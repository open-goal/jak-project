;; All Types

;; type system setup
(define-extern object type)
(define-extern type type)
(define-extern structure type)
(define-extern uint128 type)
(define-extern basic type)
(define-extern pair type)
(define-extern array type)
(define-extern symbol type)
(define-extern binteger type)
(define-extern number type)
(define-extern integer type)
(define-extern uinteger type)
(define-extern float type)
(define-extern boolean type) ;; not actually added as a runtime type in jak2, but valid? supports it.
(define-extern uint16 type)
(define-extern uint32 type)
(define-extern int32 type)
(define-extern int64 type)
(define-extern uint8 type)
(define-extern uint64 type)
(define-extern process-tree type)
(define-extern process type)
(define-extern stack-frame type)
(define-extern global kheap)
(define-extern kheap type)

(define-extern #t symbol)

;; some types we need.
(declare-type sparticle-launch-group basic)
(declare-type lightning-spec basic)
(declare-type sparticle-launcher basic)
(declare-type state basic)
(declare-type res-lump basic)

;; kernel types
(defenum link-flag
    :bitfield #t
    :type int32
    (output-load-msg 0)
    (output-load-true-msg 1)
    (execute-login 2)
    (print-login 3)
    (force-debug 4)
    (fast-link 5)
    )

(defenum language-enum
  :type int64
  (english)
  (french)
  (german)
  (spanish)
  (italian)
  (japanese)
  (korean)
  (uk-english)
  )

(define-extern *debug-segment* symbol)
(define-extern nothing (function none))
(define-extern _format (function _varargs_ object))
(define-extern method-set! (function type int object none)) ;; may actually return function.
(define-extern malloc (function symbol int pointer))
(define-extern kmemopen (function kheap string none))
(define-extern kmemclose (function none))
(define-extern dgo-load (function string kheap link-flag int none))
(define-extern *listener-function* (function object))
(define-extern *enable-method-set* int)

(declare-type cpad-info basic)
(declare-type mouse-info basic)
(define-extern cpad-open (function cpad-info int cpad-info))
(define-extern cpad-get-data (function cpad-info cpad-info))
(define-extern scf-get-territory (function int)) ;; not actually a scf function...
(define-extern mouse-get-data (function mouse-info none))
(define-extern file-stream-read (function file-stream pointer int int))
(define-extern file-stream-open (function file-stream string symbol file-stream))
(define-extern file-stream-length (function file-stream int))
(define-extern reset-path (function none))
(define-extern flush-cache (function int none))
(define-extern gs-store-image (function object object object))
(define-extern sync-path (function int int int))
(define-extern file-stream-write (function file-stream pointer uint uint))
(define-extern file-stream-close (function file-stream file-stream))
(define-extern new-dynamic-structure (function symbol type int structure))
(define-extern kernel-shutdown (function none))
(define-extern scf-get-timeout (function int))
(define-extern scf-get-inactive-timeout (function int))
(define-extern syncv (function int int))
(define-extern string->symbol (function string symbol))
(define-extern link-begin (function pointer (pointer uint8) int kheap link-flag int))
(define-extern link-resume (function int))
(define-extern link-reset (function none))
(define-extern kset-language (function language-enum int))
(define-extern reset-graph (function int int int int none))

(declare-type sql-result basic)
(define-extern sql-query (function string sql-result))

(define-extern loading-level kheap)
(define-extern dma-sync (function pointer int int int))



(defenum kmalloc-flags
  :bitfield #t
  (align-16    4)
  (align-64    6)
  (align-256   8)
  (memset     12)
  (top        13)
  )

(define-extern kmalloc (function kheap int kmalloc-flags string pointer))

(define-extern *kernel-boot-message* symbol)
(define-extern *kernel-boot-art-group* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gcommon                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vec4s (uint128)
  ((x float :offset 0)
   (y float :offset 32)
   (z float :offset 64)
   (w float :offset 96))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector (structure)
  ((data float   4 :score -1 :offset-assert 0)
   (x    float     :offset 0)
   (y    float     :offset 4)
   (z    float     :offset 8)
   (w    float     :offset 12)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bfloat (basic)
  ((data float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype inline-array-class (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   ;; this is 16-byte aligned.
   ;; children of inline-array-class should define their own data which overlays this one.
   (_data            uint8  :score -50 :dynamic :offset 16)
   )
  (:methods
    (new (symbol type int) _type_ 0))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern identity (function object object))
(define-extern 1/ (function float float))
(define-extern + (function int int int))
(define-extern - (function int int int))
(define-extern * (function int int int))
(define-extern / (function int int int))
(define-extern ash (function int int int))
(define-extern mod (function int int int))
(define-extern rem (function int int int))
(define-extern abs (function int int))
(define-extern min (function int int int))
(define-extern max (function int int int))
(define-extern logior (function int int int))
(define-extern logand (function int int int))
(define-extern lognor (function int int int))
(define-extern logxor (function int int int))
(define-extern lognot (function int int))
(define-extern false-func (function symbol))
(define-extern true-func (function symbol))
(define-extern format (function _varargs_ object))
(define-extern basic-type? (function basic type symbol))
(define-extern type-type? (function type type symbol))
(define-extern type? (function object type symbol))
(define-extern find-parent-method (function type int function))
(define-extern ref (function object int object))
(define-extern last (function object object))
(define-extern member (function object object object))
(define-extern nmember (function basic object object))
(define-extern assoc (function object object object))
(define-extern assoce (function object object object))
(define-extern nassoc (function string object object))
(define-extern nassoce  (function string object object))
(define-extern append! (function object object object))
(define-extern delete! (function object object pair))
(define-extern delete-car! (function object object object))
(define-extern insert-cons! (function object object pair))
(define-extern sort (function pair (function object object object) pair))
(define-extern mem-copy! (function pointer pointer int pointer))
(define-extern qmem-copy<-! (function pointer pointer int pointer))
(define-extern qmem-copy->! (function pointer pointer int pointer))
(define-extern mem-set32! (function pointer int int pointer))
(define-extern mem-or! (function pointer pointer int pointer))
(define-extern quad-copy! (function pointer pointer int none))
(define-extern fact (function int int))
(define-extern *print-column* binteger)
(define-extern print (function object object))
(define-extern printl (function object object))
(define-extern inspect (function object object))
(define-extern mem-print (function (pointer uint32) int symbol))
(define-extern *trace-list* pair)
(define-extern print-tree-bitmask (function int int symbol))
(define-extern breakpoint-range-set! (function uint uint uint int))
(define-extern valid? (function object type symbol symbol object symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstring-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gkernel-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type process-tree basic)
(declare-type process process-tree)
(declare-type thread basic)
(declare-type cpu-thread thread)
(declare-type clock basic)
(declare-type res-lump basic)
(declare-type entity res-lump)
(declare-type entity-actor entity)
(declare-type event-message-block structure)
(declare-type level basic)

(defenum process-mask
  :type uint32
  :bitfield #t
  (execute 0)
  (freeze 1)
  (pause 2)
  (menu 3)
  (progress 4)
  (actor-pause 5)
  (sleep 6)
  (sleep-code 7)
  (process-tree 8)
  (heap-shrunk 9)
  (going 10)
  (kernel-run 11)
  (no-kill 12)
  (movie 13)
  (dark-effect 14)
  (target 15)
  (sidekick 16)
  (crate 17)
  (bit18 18) ;; unused?
  (enemy 19)
  (camera 20)
  (platform 21)
  (ambient 22)
  (entity 23)
  (projectile 24)
  (bot 25)
  (collectable 26)
  (death 27)
  (no-track 28)
  (guard 29)
  (vehicle 30)
  (civilian 31)
  )
(deftype process-tree (basic)
  ((name string :offset-assert 4)
   (mask process-mask :offset-assert 8)
   (clock clock :offset-assert 12)
   (parent (pointer process-tree) :offset-assert 16)
   (brother (pointer process-tree) :offset-assert 20)
   (child (pointer process-tree) :offset-assert 24)
   (ppointer (pointer process) :offset-assert 28)
   (self process-tree :offset-assert 32)
   )
  (:methods
    (new (symbol type string) _type_ 0)
    (activate (_type_ process-tree basic pointer) process-tree 9)
    (deactivate  (_type_) none 10)
    (init-from-entity! (_type_ entity-actor) none 11) ;; todo check
    (run-logic? (_type_) symbol 12)
    (process-tree-method-13 () none 13)
    )
  :size-assert #x24
  :method-count-assert 14
  :no-runtime-type
  )

(deftype kernel-context (basic)
  ((prevent-from-run   process-mask  :offset-assert 4) ;; guessed by decompiler
   (require-for-run    process-mask  :offset-assert 8) ;; guessed by decompiler
   (allow-to-run       process-mask  :offset-assert 12) ;; guessed by decompiler
   (next-pid           int32         :offset-assert 16)
   (fast-stack-top     pointer       :offset-assert 20) ;; guessed by decompiler
   (current-process    process       :offset-assert 24) ;; guessed by decompiler
   (relocating-process basic         :offset-assert 28)
   (relocating-min     int32         :offset-assert 32)
   (relocating-max     int32         :offset-assert 36)
   (relocating-offset  int32         :offset-assert 40)
   (relocating-level   level         :offset-assert 44) ;; guessing here
   (low-memory-message symbol        :offset-assert 48) ;; guessed by decompiler
   (login-object       basic         :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  ;; field relocating-level uses ~A with a signed load
  )

(deftype time-frame (int64)
  ()
  :flag-assert #x900000008
  )


(deftype clock (basic)
  ((index                      int32          :offset-assert   4) ;; which clock we are, in *display*
   (mask                       process-mask   :offset-assert   8) ;; mask for ticking
   (clock-ratio                float          :offset-assert  12) ;; how fast to run. 1.0 = realtime.
   (accum                      float          :offset-assert  16) ;; fractional time for frame-counter (time-frame units)
   (integral-accum             float          :offset-assert  20) ;; fractional time for integral (time-frame untis)
   (frame-counter              time-frame     :offset-assert  24) ;; how much time has gone by since reset (time-frame units)
   (old-frame-counter          time-frame     :offset-assert  32) ;; the frame-counter on the last engine iteration
   (integral-frame-counter     uint64         :offset-assert  40) ;; how many vsyncs have gone by since reset
   (old-integral-frame-counter uint64         :offset-assert  48) ;; the integral-frame-counter on the last engine iteration
   (sparticle-data             vector :inline :offset-assert  64) ;; sparticle timescale info
   (seconds-per-frame          float          :offset-assert  80) ;; how many seconds (not time-frames) should go by in 1 vsync
   (frames-per-second          float          :offset-assert  84) ;; inverse of above
   (time-adjust-ratio          float          :offset-assert  88) ;; 1, if the game runs at 60fps NTSC with clock-ratio = 1.
   )
  :method-count-assert 15
  :size-assert         #x5c
  :flag-assert         #xf0000005c
  (:methods
    (new (symbol type int) _type_ 0)
    (update-rates! (_type_ float) float 9)
    (advance-by! (_type_ float) clock 10)
    (tick! (_type_) clock 11)
    (save! (_type_ (pointer uint64)) int 12)
    (load! (_type_ (pointer uint64)) int 13)
    (reset! (_type_) none 14)
    )
  )


(deftype thread (basic)
  ((name         symbol                      :offset-assert 4)
   (process      process                     :offset-assert 8) ;; guessed by decompiler
   (previous     thread                      :offset-assert 12) ;; guessed by decompiler
   (suspend-hook (function cpu-thread none)  :offset-assert 16) ;; guessed by decompiler
   (resume-hook  (function cpu-thread none)  :offset-assert 20) ;; guessed by decompiler
   (pc           pointer                     :offset-assert 24) ;; guessed by decompiler
   (sp           pointer                     :offset-assert 28) ;; guessed by decompiler
   (stack-top    pointer                     :offset-assert 32) ;; guessed by decompiler
   (stack-size   int32                       :offset-assert 36)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (stack-size-set! (_type_ int) none 9)
    (thread-suspend (_type_) none 10)
    (thread-resume (_type_) none 11)
    )
  )


;; modified for x86.
(deftype cpu-thread (thread)
  ((rreg  uint64 7       :offset-assert 40)
   (freg float 8)

   ;; old values:
   ;; (rreg  uint64 8        :offset-assert 40) ;; guessed by decompiler
   ;; (freg  float  6        :offset-assert 104) ;; guessed by decompiler
   (stack uint8  :dynamic :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x80
  :flag-assert         #xc00000080
  (:methods
     (new (symbol type process symbol int pointer) _type_ 0)
    )
  )



(deftype dead-pool (process-tree)
  ()
  :method-count-assert 16
  :size-assert         #x24
  :flag-assert         #x1000000024
  ;; Failed to read fields.
  (:methods
    (new (symbol type int int string) _type_ 0)
    (get-process (_type_ type int) process 14)
    (return-process (_type_ process) none 15)
    )
  )


(deftype dead-pool-heap-rec (structure)
  ((process process             :offset-assert 0) ;; guessed by decompiler
   (prev    dead-pool-heap-rec  :offset-assert 4)
   (next    dead-pool-heap-rec  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )


(deftype dead-pool-heap (dead-pool)
  ((allocated-length   int32                       :offset-assert 36)
   (compact-time       uint32                      :offset-assert 40)
   (compact-count-targ uint32                      :offset-assert 44)
   (compact-count      uint32                      :offset-assert 48)
   (fill-percent       float                       :offset-assert 52)
   (first-gap          dead-pool-heap-rec          :offset-assert 56)
   (first-shrink       dead-pool-heap-rec          :offset-assert 60)
   (heap               kheap              :inline  :offset-assert 64)
   (alive-list         dead-pool-heap-rec :inline  :offset-assert 80)
   (last               dead-pool-heap-rec :offset #x54  :offset-assert 84)
   (dead-list          dead-pool-heap-rec :inline  :offset-assert 92)
   (process-list       dead-pool-heap-rec :inline :dynamic :offset-assert 104)
   )
  :method-count-assert 28
  :size-assert         #x68
  :flag-assert         #x1c00000068
  ;; Failed to read fields.
  (:methods
    (new (symbol type string int int) _type_ 0)
    (init (_type_ symbol int) none 16)
    (compact (dead-pool-heap int) none 17)
    (shrink-heap (dead-pool-heap process) dead-pool-heap 18)
    (churn (dead-pool-heap int) none 19)
    (memory-used (_type_) int 20)
    (memory-total (_type_) int 21)
    (memory-free (dead-pool-heap) int 22)
    (compact-time (dead-pool-heap) uint 23)
    (gap-size (dead-pool-heap dead-pool-heap-rec) int 24)
    (gap-location (dead-pool-heap dead-pool-heap-rec) pointer 25)
    (find-gap (dead-pool-heap dead-pool-heap-rec) dead-pool-heap-rec 26)
    (find-gap-by-size (dead-pool-heap int) dead-pool-heap-rec 27)
    )
  )

(deftype stack-frame (basic)
  ((name symbol :offset 4)
   (next stack-frame :offset 8) ;; which way does this point?
   )
  :size-assert #xc
  :method-count-assert 9
  :flag-assert #x90000000c
  )

;; a "catch" frame is a frame that can be "thrown" to.
;; the "throw" is a nonlocal control flow back to the state before the "catch" block.
(deftype catch-frame (stack-frame)
  ((sp   int32     :offset-assert  12)
   (ra   int32     :offset-assert  16)
   ; (freg float   6 :offset-assert  20)
   ; (rreg uint128 8 :offset-assert  48)
   ;; In OpenGOAL, we swap a rreg for 4 more fregs.
   (freg float 10 :offset-assert 20) ;; only use 8
   (rreg uint128 7)                  ;; only use 5
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  (:methods
    (new (symbol type symbol function (pointer uint64)) object 0)
    )
  )

(deftype protect-frame (stack-frame)
  ((exit (function none)  :offset-assert 12) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type (function none)) protect-frame)
    )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype handle (uint64)
  ((process (pointer process) :offset 0)
   (pid int32 :offset 32)
   (u64 uint64 :offset 0)
   )
  :flag-assert #x900000008
  )

(deftype state (protect-frame)
  ((code  function                                                  :offset-assert 16) ;; guessed by decompiler
   (trans (function none)                                           :offset-assert 20) ;; guessed by decompiler
   (post  function                                                  :offset-assert 24) ;; guessed by decompiler
   (enter function                                                  :offset-assert 28) ;; guessed by decompiler
   (event (function process int symbol event-message-block object)  :offset-assert 32) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type symbol function
          (function none)
          function
          (function none)
          (function process int symbol event-message-block object)) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype event-message-block (structure)
  ((to-handle handle)
   (to (pointer process) :offset 0) ;; overlays process field of handle
   (form-handle handle :offset-assert 8)
   (from (pointer process) :offset 8)
   (param uint64 6)
   (message symbol)
   (num-params int32)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  ;; Failed to read fields.
  )



(deftype event-message-block-array (inline-array-class)
  ((data event-message-block :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (send-all! (_type_) none 9)
    )
  )


(deftype process (process-tree)
  ((pool dead-pool)
   (status symbol :offset-assert 40)
   (pid int32)
   (main-thread cpu-thread :offset-assert 48)
   (top-thread cpu-thread :offset-assert 52)
   (entity entity :offset-assert 56)
   (level level :offset-assert 60)
   (state state :offset-assert 64)
   (next-state state :offset-assert 68)
   (trans-hook function :offset-assert 72)
   (post-hook function :offset-assert 76)
   (event-hook (function process int symbol event-message-block object) :offset-assert 80)
   (allocated-length int32 :offset-assert 84)
   (pad0 uint32 2)
   (heap-base pointer :offset-assert 96)
   (heap-top pointer :offset-assert 100)
   (heap-cur pointer :offset-assert 104)
   (stack-frame-top stack-frame :offset-assert 108)
   (connection-list connectable :inline :offset-assert 112)
   (stack uint8 :dynamic :offset-assert 128)
   )
  (:methods
    (new (symbol type string int) _type_ 0)
    )
  (:states
    dead-state
    empty-state)
  :size-assert #x80
  :method-count-assert 14
  :no-runtime-type ;; already defined by kscheme. Don't do it again.
  )

(deftype sql-result (basic)
  ((len int32 :offset-assert 4)
   (allocated-length  uint32 :offset-assert 8)
   (error  symbol :offset-assert 12)
   (data   symbol :dynamic :offset-assert 16)
   )
   (:methods (new (symbol type uint) _type_ 0))
   :method-count-assert 9
   :size-assert #x10
  )

(define-extern *sql-result* sql-result)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gkernel                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *kernel-version* binteger)
(define-extern *irx-version* binteger)
(define-extern *kernel-boot-mode* symbol)
(define-extern *kernel-boot-level* symbol)
(define-extern *deci-count* int)
(define-extern *last-loado-length* int)
(define-extern *last-loado-global-usage* int)
(define-extern *last-loado-debug-usage* int)
(define-extern *kernel-packages* pair)
(define-extern load-package (function string kheap pair))
(define-extern unload-package (function string pair))
(define-extern *kernel-context* kernel-context)
(define-extern *dram-stack* (pointer uint8))
(define-extern *null-kernel-context* kernel-context)
(define-extern remove-exit (function none :behavior process))
(define-extern stream<-process-mask (function object process-mask process-mask))
(define-extern *master-mode* symbol)
(define-extern *pause-lock* symbol)
(define-extern inspect-process-heap (function process symbol))
(define-extern return-from-thread (function none))
(define-extern return-from-thread-dead (function none))
(define-extern reset-and-call (function thread function object))
(define-extern method-state (function type basic state))
(define-extern *global-search-name* basic)
(define-extern *global-search-count* int)
(define-extern process-by-name (function string process-tree process))
(define-extern process-not-name (function string process-tree process))
(define-extern process-count (function process-tree int))
(define-extern kill-by-name (function string process-tree symbol))
(define-extern kill-by-type (function type process-tree symbol))
(define-extern kill-not-name (function string process-tree symbol))
(define-extern kill-not-type (function type process-tree symbol))
(define-extern iterate-process-tree (function process-tree (function object object) kernel-context object))
(define-extern execute-process-tree (function process-tree (function object object) kernel-context object))
(define-extern search-process-tree (function process-tree (function process-tree object) process-tree))
(define-extern kernel-dispatcher (function object))
(define-extern sync-dispatcher (function object))
(define-extern inspect-process-tree (function process-tree int int symbol process-tree))
(define-extern throw-dispatch (function catch-frame object none))
(define-extern throw (function symbol object int))
(define-extern previous-brother (function process-tree object))
(define-extern change-parent (function process-tree process-tree process-tree))
(define-extern change-brother (function process-tree process-tree object))
(define-extern change-to-last-brother (function process-tree process-tree))
(define-extern run-function-in-process (function process function object object object object object object object))
(define-extern set-to-run-bootstrap (function none))
(define-extern set-to-run (function cpu-thread function object object object object object object pointer))
(define-extern dead-state (state process))
(define-extern entity-deactivate-handler (function process entity-actor none))
(define-extern *listener-process* process)
(define-extern *null-process* process)
(define-extern *vis-boot* symbol)
(define-extern *kernel-clock* clock)
(define-extern *16k-dead-pool* dead-pool)
(define-extern *8k-dead-pool* dead-pool)
(define-extern *4k-dead-pool* dead-pool)
(define-extern *target-dead-pool* dead-pool)
(define-extern *camera-dead-pool* dead-pool)
(define-extern *camera-master-dead-pool* dead-pool)
(define-extern *debug-dead-pool* dead-pool-heap)
(define-extern *nk-dead-pool* dead-pool-heap)
(define-extern *default-dead-pool* dead-pool)
(define-extern *pickup-dead-pool* dead-pool)
(define-extern *city-dead-pool* dead-pool-heap)
(define-extern *dead-pool-list* pair)
(define-extern *active-pool* process-tree)
(define-extern *display-pool* process-tree) ;; process-tree
(define-extern *camera-pool* process-tree) ;; process-tree
(define-extern *target-pool* process-tree) ;; process-tree
(define-extern *entity-pool* process-tree) ;; process-tree
(define-extern *mid-pool* process-tree)
(define-extern *pusher-pool* process-tree)
(define-extern *bg-pool* process-tree)
(define-extern *default-pool* process-tree) ;; process-tree

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pskernel                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype lowmemmap (structure)
  ((irq-info-stack  uint32   :offset-assert 0)
   (irq2-info-stack uint32   :offset-assert 4)
   (kernel-copy-fn  uint32   :offset-assert 8)
   (kernel-write-fn uint32   :offset-assert 12)
   (r1-save         uint128  :offset-assert 16)
   (last-time       uint32   :offset-assert 32)
   (high-time       uint32   :offset-assert 36)
   (dma-status      uint32   :offset-assert 40)
   (dma-qnext       uint32   :offset-assert 44)
   (dma-qwc         uint32   :offset-assert 48)
   (dma-tnext       uint32   :offset-assert 52)
   (dma-stack0      uint32   :offset-assert 56)
   (dma-stack1      uint32   :offset-assert 60)
   (kernel-read-fn  uint32   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern kernel-copy-function (function object (pointer int32) int32 int32 none))
(define-extern kernel-copy-to-kernel-ram (function none))
(define-extern kernel-write-function (function object object object none))
(define-extern kernel-write (function none))
(define-extern kernel-read-function (function object (pointer int32) none))
(define-extern kernel-read (function none))
(define-extern kernel-check-hardwired-addresses (function none))
(define-extern install-default-debug-handler (function object none))
(define-extern return-from-exception (function object none))
(define-extern kernel-set-exception-vector (function object none))
(define-extern kernel-set-interrupt-vector (function none))
(define-extern kernel-set-level2-vector (function object object none))
(define-extern deinstall-debug-handler (function none))
(define-extern deinstall-debug-handlers (function none))
(define-extern resend-exception (function object object object object none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstring                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern copy-string<-string  (function string string string))
(define-extern string= (function string string symbol))
(define-extern string-prefix= (function string string symbol))
(define-extern charp-prefix= (function (pointer uint8) (pointer uint8) symbol))
(define-extern string-suffix= (function string string symbol))
(define-extern string-position (function string string int))
(define-extern string-charp= (function string (pointer uint8) symbol))
(define-extern name= (function object object symbol))
(define-extern copyn-string<-charp (function string (pointer uint8) int string))
(define-extern string<-charp (function string (pointer uint8) string))
(define-extern charp<-string (function (pointer uint8) string int))
(define-extern copyn-charp<-string (function (pointer uint8) string int none))
(define-extern copy-charp<-charp (function (pointer uint8) (pointer uint8) (pointer uint8)))
(define-extern cat-string<-string (function string string string))
(define-extern catn-string<-charp (function string (pointer uint8) int string))
(define-extern cat-string<-string_to_charp (function string string (pointer uint8) (pointer uint8)))
(define-extern append-character-to-string (function string uint8 int))
(define-extern charp-basename (function (pointer uint8) (pointer uint8)))
(define-extern clear (function string string))
(define-extern string<? (function string string symbol))
(define-extern string>? (function string string symbol))
(define-extern string<=? (function string string symbol))
(define-extern string>=? (function string string symbol))
(define-extern *string-tmp-str* string)
(define-extern string-skip-to-char (function (pointer uint8) uint (pointer uint8)))
(define-extern string-cat-to-last-char (function string string uint (pointer uint8)))
(define-extern string-skip-whitespace (function (pointer uint8) (pointer uint8)))
(define-extern string-suck-up! (function string (pointer uint8) symbol))
(define-extern string-strip-leading-whitespace! (function string symbol))
(define-extern string-strip-trailing-whitespace! (function string symbol))
(define-extern string-strip-whitespace! (function string symbol))
(define-extern string-upcase (function string string none))
(define-extern string-get-arg!! (function string string symbol))
(define-extern string->int (function string int))
(define-extern string->float (function string float))
(define-extern string-get-int32!! (function (pointer int32) string symbol))
(define-extern string-get-float!! (function (pointer float) string symbol))
(define-extern string-get-flag!! (function (pointer symbol) string string string symbol))
(define-extern *debug-draw-pauseable* symbol)
(define-extern *stdcon0* string)
(define-extern *stdcon1* string)
(define-extern *stdcon* string)
(define-extern *temp-string* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dgo-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype dgo-entry (structure)
  ((offset uint32  :offset-assert 0)
   (length uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dgo-file (basic)
  ((num-go-files uint32          :offset-assert 4)
   (total-length uint32          :offset-assert 8)
   (rsvd         uint32          :offset-assert 12)
   (data         uint8  :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstate                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern inherit-state (function state state state))
(define-extern enter-state (function object object object object object object object))
(define-extern *event-queue* event-message-block-array)
(define-extern send-event-function (function process-tree event-message-block object))
(define-extern looping-code (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; types-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype part-id (uint32)
  ()
  :flag-assert #x900000004
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vu1-macros                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype rgba (uint32)
  ((r uint8 :offset 0)
   (g uint8 :offset 8)
   (b uint8 :offset 16)
   (a uint8 :offset 24)
   )
  :flag-assert #x900000004
  :no-runtime-type
  )

(deftype float-type (uint32)
  ()
  :flag-assert #x900000004
  :no-runtime-type
  )

(deftype xyzw (uint128)
  ()
  :flag-assert #x900000010
  )

(deftype xyzwh (uint128)
  ()
  :flag-assert #x900000010
  )

(deftype random-generator (basic)
  ((seed uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern truncate (function float float))
(define-extern floor (function float float))
(define-extern ceil (function float float))
(define-extern integral? (function float symbol))
(define-extern fractional-part (function float float))
(define-extern sawtooth-wave (function float float))
(define-extern triangle-wave (function float float))
(define-extern log-x-plus-1-order9 (function float float))
(define-extern logf (function float float))
(define-extern log2f (function float float))
(define-extern exp-slead (pointer float))
(define-extern exp-strail (pointer float))
(define-extern exp (function float float))
(define-extern pow (function float float float))
(define-extern print-exp (function float none))
(define-extern print-time (function object time-frame none))
(define-extern log2 (function int int))
(define-extern seek (function float float float float))
(define-extern seek-ease (function float float float float float float))
(define-extern seek-ease-in-out (function float float float float float float float float))
(define-extern lerp (function float float float float))
(define-extern lerp-scale-old (function float float float float float float))
(define-extern lerp-scale (function float float float float float float))
(define-extern lerp-clamp (function float float float float))
(define-extern seekl (function int int int int))
(define-extern rand-vu-init (function float float))
(define-extern rand-vu (function float))
(define-extern rand-vu-nostep  (function float))
(define-extern rand-vu-float-range (function float float float))
(define-extern rand-vu-percent? (function float symbol))
(define-extern rand-vu-int-range (function int int int))
(define-extern rand-vu-int-count (function int int))
(define-extern rand-vu-int-count-excluding (function int int int))
(define-extern rand-vu-int-range-exclude (function int int int int))
(define-extern *random-generator*  random-generator)
(define-extern rand-uint31-gen (function random-generator uint))
(define-extern cube-root (function float float))
(define-extern int-noise (function int float))
(define-extern smooth-step (function float float))
(define-extern smooth-interp (function float float float float float float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vector-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bit-array (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   (_pad             uint8  :offset-assert 12)
   (bytes            uint8  :dynamic :offset 12)
   )
  :method-count-assert 13
  :size-assert         #xd
  :flag-assert         #xd0000000d
  (:methods
    (new (symbol type int) _type_ 0)
    (get-bit (_type_ int) symbol 9)
    (clear-bit (_type_ int) int 10)
    (set-bit (_type_ int) int 11)
    (clear-all! (_type_) _type_ 12)
    )
  )


(deftype vector16ub (structure)
  ((data uint8 16   :offset-assert 0)
   (quad uint128    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4ub (structure)
  ((data uint8  4 :offset-assert 0)
   (x    uint8    :offset        0)
   (y    uint8    :offset        1)
   (z    uint8    :offset        2)
   (w    uint8    :offset        3)
   (clr  uint32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector4b (structure)
  ((data int8  4 :offset-assert 0)
   (x    int8    :offset        0)
   (y    int8    :offset        1)
   (z    int8    :offset        2)
   (w    int8    :offset        3)
   (clr  int32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2ub (structure)
  ((data uint8 2 :offset-assert 0)
   (x    uint8   :offset        0)
   (y    uint8   :offset        1)
   (clr  uint16  :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype vector2b (structure)
  ((data int8 2 :offset-assert 0)
   (x    int8   :offset        0)
   (y    int8   :offset        1)
   (clr  int16  :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype vector2h (structure)
  ((data int16 2 :offset-assert 0)
   (x    int16   :offset        0)
   (y    int16   :offset        2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2uh (structure)
  ((data uint16 2 :offset-assert 0)
   (x    uint16   :offset        0)
   (y    uint16   :offset        2)
   (val  uint32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector3h (structure)
  ((data int16 3 :offset-assert 0)
   (x    int16   :offset        0)
   (y    int16   :offset        2)
   (z    int16   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector3uh (structure)
  ((data uint16 3 :offset-assert 0)
   (x    uint16   :offset        0)
   (y    uint16   :offset        2)
   (z    uint16   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector2w (structure)
  ((data int32 2 :offset-assert 0)
   (x    int32   :offset        0)
   (y    int32   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3w (structure)
  ((data int32 3 :offset-assert 0)
   (x    int32   :offset        0)
   (y    int32   :offset        4)
   (z    int32   :offset        8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4w (structure)
  ((data  int32  4 :offset-assert 0 :score -1)
   (x     int32     :offset        0)
   (y     int32     :offset        4)
   (z     int32     :offset        8)
   (w     int32     :offset        12)
   (dword uint64  2 :offset        0)
   (quad  uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector2 (structure)
  ((data float 2 :offset-assert 0)
   (x    float   :offset 0)
   (y    float   :offset 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3 (structure)
  ((data float 3 :offset-assert 0)
   (x    float   :offset        0)
   (y    float   :offset        4)
   (z    float   :offset        8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4 (structure)
  ((data  float 4  :offset-assert 0 :score -1)
   (x     float    :offset        0)
   (y     float    :offset        4)
   (z     float    :offset        8)
   (w     float    :offset        12)
   (dword uint64 2 :offset        0)
   (quad  uint128  :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4w-2 (structure)
  ((data   int32    8 :offset-assert  0 :score -2)
   (quad   uint128  2 :offset         0 :score -1)
   (vector vector4w 2 :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype vector4w-3 (structure)
  ((data   int32    12 :offset-assert  0 :score -2)
   (quad   uint128  3  :offset         0 :score -1)
   (vector vector4w 3  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector4w-4 (structure)
  ((data   int32    16 :offset-assert  0)
   (quad   uint128  4  :offset         0)
   (vector vector4w 4  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vector4h (structure)
  ((data int16  4 :offset-assert 0)
   (x    int16    :offset        0)
   (y    int16    :offset        2)
   (z    int16    :offset        4)
   (w    int16    :offset        6)
   (long uint64   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector8h (structure)
  ((data int16   8 :offset-assert 0)
   (quad uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector16b (structure)
  ((data int8    16 :offset-assert 0)
   (quad uint128    :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4s-3 (structure)
  ((data   float   12 :offset-assert 0)
   (quad   uint128 3  :offset        0)
   (vector vector  3  :inline :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector-array (inline-array-class)
  ((data vector :inline :dynamic :offset-assert 16 :score 10)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rgbaf (vector)
  ((r    float     :offset 0)
   (g    float     :offset 4)
   (b    float     :offset 8)
   (a    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype plane (vector)
  ((a    float     :offset 0)
   (b    float     :offset 4)
   (c    float     :offset 8)
   (d    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sphere (vector)
  ((r    float     :offset 12 :score 999)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype isphere (vec4s)
  ()
  )

(deftype box8s (structure)
  ((data   float   8       :offset-assert 0)
   (quad   uint128 2       :offset        0)
   (vector vector  2       :offset        0)
   (min    vector  :inline :offset        0)
   (max    vector  :inline :offset        16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype box8s-array (inline-array-class)
  ((data box8s :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cylinder (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (debug-draw (_type_ vector4w) none 9)
    (ray-capsule-intersect (_type_ vector vector) float 10)
    )
  )

(deftype cylinder-flat (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (debug-draw (_type_ vector4w) none 9)
    (ray-flat-cyl-intersect (_type_ vector vector) float 10)
    )
  )

(deftype vertical-planes (structure)
  ((data uint128 4 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vertical-planes-array (basic)
  ((length uint32                            :offset-assert 4)
   (data   vertical-planes :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype qword (structure)
  ((data     uint32   4       :offset-assert 0)
   (byte     uint8    16      :offset        0)
   (hword    uint16   8       :offset        0)
   (word     uint32   4       :offset        0)
   (dword    uint64   2       :offset        0)
   (quad     uint128          :offset        0)
   (vector   vector   :inline :offset        0 :score -100)
   (vector4w vector4w :inline :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector3s (structure)
  ((data float 3 :offset-assert 0)
   (x    float   :offset        0)
   (y    float   :offset        4)
   (z    float   :offset        8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(define-extern *null-vector* vector)
(define-extern *identity-vector* vector)
(define-extern *x-vector* vector)
(define-extern *y-vector* vector)
(define-extern *z-vector* vector)
(define-extern *up-vector* vector)
(define-extern vector-dot (function vector vector float))
(define-extern vector-dot-vu (function vector vector float))
(define-extern vector4-dot (function vector vector float))
(define-extern vector4-dot-vu (function vector vector float))
(define-extern vector+! (function vector vector vector vector))
(define-extern vector-! (function vector vector vector vector))
(define-extern vector-zero! (function vector vector))
(define-extern vector-reset! (function vector vector))
(define-extern vector-copy! (function vector vector vector))
(define-extern vector-length< (function vector float symbol))
(define-extern vector-length> (function vector float symbol))
(define-extern *zero-vector* vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gravity-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bounding-box-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bounding-box (structure)
  ((min vector :inline :offset-assert 0)
   (max vector :inline :offset-assert 16)
   )
  :method-count-assert 21
  :size-assert         #x20
  :flag-assert         #x1500000020
  (:methods
    (add-spheres! (_type_ (inline-array sphere) int) int 9)
    (add-box! (_type_ bounding-box) int 10)
    (add-point! (_type_ vector) none 11)
    (intersects-line-segment? (_type_ vector vector) symbol 12)
    (set-from-point-offset! (_type_ vector vector) none 13)
    (set-from-point-offset-pad! (_type_ vector vector float) int 14)
    (set-to-point! (_type_ vector) none 15)
    (set-from-sphere! (_type_ sphere) none 16)
    (set-from-spheres! (_type_ (inline-array sphere) int) int 17)
    (get-bounding-sphere (_type_ vector) vector 18)
    (inside-xyz? (bounding-box vector) symbol 19)
    (inside-xz? (bounding-box vector) symbol 20)
    )
  )


(deftype bounding-box4w (structure)
  ((min vector4w :inline :offset-assert 0)
   (max vector4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )



(deftype bounding-box-both (structure)
  ((box   bounding-box   :inline :offset-assert 0)
   (box4w bounding-box4w :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )



(deftype bounding-box-array (inline-array-class)
  ((data bounding-box :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matrix-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype matrix (structure)
  ((data   float   16          :offset-assert 0 :score -10)
   (vector vector  4  :inline  :offset        0)
   (quad   uint128 4           :offset        0)
   (trans  vector  :inline     :offset        48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (transform-vectors! (_type_ (inline-array vector) (inline-array vector) int) none 9)
    )
  )

(deftype matrix3 (structure)
  ((data   float   12 :offset-assert 0)
   (vector vector  3 :inline :offset        0)
   (quad   uint128 3  :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype matrix4h (structure)
  ((data     int16    16         :offset-assert 0)
   (vector4h vector4h 4  :inline :offset        0)
   (long     int64    4          :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern matrix-copy! (function matrix matrix matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; quaternion-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype quaternion (structure)
  ((data float   4       :offset-assert 0 :score -1)
   (x    float           :offset        0)
   (y    float           :offset        4)
   (z    float           :offset        8)
   (w    float           :offset        12)
   (vec  vector  :inline :offset        0)
   (quad uint128         :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *unity-quaternion* quaternion)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; euler-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype euler-angles (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern EulSafe (array int32))
(define-extern EulNext (array int32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transform-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype transform (structure)
  ((trans vector :inline :offset-assert 0)
   (rot   vector :inline :offset-assert 16)
   (scale vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trs (basic)
  ((trans vector :inline :offset-assert 16)
   (rot   vector :inline :offset-assert 32)
   (scale vector :inline :offset-assert 48)
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; geometry-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype curve (structure)
  ((cverts     (inline-array vector)  :offset-assert 0)
   (num-cverts int32                  :offset-assert 4)
   (knots      (pointer float)        :offset-assert 8)
   (num-knots  int32                  :offset-assert 12)
   (length     float                  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype border-plane (basic)
  ((name   symbol         :offset-assert 4)
   (action basic          :offset-assert 8)
   (slot   int8           :offset-assert 12)
   (trans  vector :inline :offset-assert 16)
   (normal vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (debug-draw! (_type_) none 9)
    (point-past-plane? (_type_ vector) symbol 10)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trigonometry-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transformq-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype transformq (transform)
  ((quat quaternion :inline :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trsq (trs)
  ((quat quaternion :inline :offset 32 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype trsqv (trsq)
  ((pause-adjust-distance meters             :offset 4)
   (nav-radius            meters             :offset 8)
   (transv                vector     :inline :offset-assert 64)
   (rotv                  vector     :inline :offset-assert 80)
   (scalev                vector     :inline :offset-assert 96)
   (dir-targ              quaternion :inline :offset-assert 112)
   (angle-change-time     time-frame             :offset-assert 128) ;; time-frame
   (old-y-angle-diff      float              :offset-assert 136)
   )
  :method-count-assert 28
  :size-assert         #x8c
  :flag-assert         #x1c0000008c
  (:methods
    (seek-toward-heading-vec! (_type_ vector float time-frame) quaternion 9)
    (set-heading-vec! (_type_ vector) quaternion 10)
    (seek-to-point-toward-point! (_type_ vector float time-frame) quaternion 11)
    (point-toward-point! (_type_ vector) quaternion 12)
    (seek-toward-yaw-angle! (_type_ float float time-frame) quaternion 13)
    (set-yaw-angle-clear-roll-pitch! (_type_ float) quaternion 14)
    (set-roll-to-grav! (_type_ float) quaternion 15)
    (set-roll-to-grav-2! (_type_ float) quaternion 16)
    (rotate-toward-orientation! (_type_ quaternion float float int float float) quaternion 17)
    (set-quaternion! (_type_ quaternion) quaternion 18)
    (set-heading-vec-clear-roll-pitch! (_type_ vector) quaternion 19)
    (point-toward-point-clear-roll-pitch! (_type_ vector) quaternion 20)
    (rot->dir-targ! (_type_) quaternion 21)
    (y-angle (_type_) float 22)
    (global-y-angle-to-point (_type_ vector) float 23)
    (relative-y-angle-to-point (_type_ vector) float 24)
    (roll-relative-to-gravity (_type_) float 25)
    (set-and-limit-velocity (_type_ int vector float) trsqv 26)
    (get-quaternion (_type_) quaternion 27)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bounding-box                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype liang-barsky-line-clip-params (structure)
  ((te float  :offset-assert 0)
   (tl float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern box-vector-enside? (function bounding-box vector symbol))
(define-extern box-vector-inside? (function bounding-box vector symbol))
(define-extern liang-barsky-line-clipt (function liang-barsky-line-clip-params float float symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matrix                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern matrix-identity! (function matrix matrix))
(define-extern *identity-matrix* matrix)
(define-extern *hermite-matrix* matrix)
(define-extern matrix+! (function matrix matrix matrix matrix))
(define-extern matrix-! (function matrix matrix matrix matrix))
(define-extern matrix*! (function matrix matrix matrix matrix))
(define-extern matrixp*! (function matrix matrix matrix matrix))
(define-extern vector-matrix*! (function vector vector matrix vector))
(define-extern vector-rotate*! (function vector vector matrix vector))
(define-extern vector3s-matrix*! (function vector3s vector3s matrix vector3s))
(define-extern vector3s-rotate*! (function vector3s vector3s matrix vector3s))
(define-extern matrix-transpose! (function matrix matrix matrix))
(define-extern matrix-inverse-of-rot-trans! (function matrix matrix matrix))
(define-extern matrix-4x4-inverse! (function matrix matrix matrix))
(define-extern matrix-translate! (function matrix vector matrix))
(define-extern matrix-translate+! (function matrix matrix vector matrix))
(define-extern matrix-scale! (function matrix vector matrix))
(define-extern scale-matrix! (function matrix vector matrix matrix))
(define-extern matrix-inv-scale! (function matrix vector matrix))
(define-extern column-scale-matrix! (function matrix vector matrix matrix))
(define-extern matrix-rotate-x! (function matrix float matrix))
(define-extern matrix-rotate-y! (function matrix float matrix))
(define-extern matrix-rotate-z! (function matrix float matrix))
(define-extern matrix-rotate-zyx! (function matrix vector matrix))
(define-extern matrix-rotate-xyz-2! (function matrix vector matrix))
(define-extern matrix-rotate-xyz! (function matrix vector matrix))
(define-extern matrix-rotate-zxy! (function matrix vector matrix))
(define-extern matrix-rotate-yxz! (function matrix vector matrix))
(define-extern matrix-rotate-yzx! (function matrix vector matrix))
(define-extern matrix-rotate-yxy! (function matrix vector matrix))
(define-extern matrix-rotate-yx! (function matrix float float matrix))
(define-extern matrix-axis-sin-cos-vu! (function matrix vector float float none))
(define-extern matrix-axis-sin-cos! (function matrix vector float float matrix))
(define-extern matrix-axis-angle! (function matrix vector float none))
(define-extern matrix-lerp! (function matrix matrix matrix float matrix))
(define-extern matrix-3x3-determinant (function matrix float))
(define-extern matrix3-determinant (function matrix float))
(define-extern matrix-3x3-inverse! (function matrix matrix matrix))
(define-extern matrix-3x3-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix3-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix-3x3-normalize! (function matrix matrix matrix))
(define-extern matrix-4x4-determinant (function matrix float))
(define-extern matrix-4x4-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix-y-angle (function matrix float))
(define-extern matrix->trans (function matrix vector vector))
(define-extern matrix<-trans (function matrix vector matrix))
(define-extern matrix->scale (function matrix vector vector))
(define-extern matrix<-scale (function matrix vector matrix))
(define-extern matrix->quat (function matrix quaternion quaternion))
(define-extern matrix<-quat (function matrix quaternion matrix))
(define-extern matrix->transformq (function transformq matrix transformq))
(define-extern matrix-mirror! (function matrix vector vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transform                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern transform-matrix-calc! (function transform matrix matrix))
(define-extern transform-matrix-parent-calc! (function transform matrix vector matrix))
(define-extern trs-matrix-calc! (function trs matrix matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; quaternion                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern quaternion-axis-angle! (function quaternion float float float float quaternion))
(define-extern quaternion-vector-angle! (function quaternion vector float quaternion))
(define-extern vector-angle<-quaternion! (function vector quaternion vector))
(define-extern quaternion-look-at! (function quaternion vector vector quaternion))
(define-extern quaternion-zero! (function quaternion quaternion))
(define-extern quaternion-identity! (function quaternion quaternion))
(define-extern quaternion-i! (function quaternion quaternion))
(define-extern quaternion-j! (function quaternion quaternion))
(define-extern quaternion-k! (function quaternion quaternion))
(define-extern quaternion-copy! (function quaternion quaternion quaternion))
(define-extern quaternion-set! (function quaternion float float float float quaternion))
(define-extern quaternion+! (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-! (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-negate! (function quaternion quaternion quaternion))
(define-extern quaternion-conjugate! (function quaternion quaternion quaternion))
(define-extern quaternion-float*! (function quaternion quaternion float quaternion))
(define-extern quaternion-float/! (function quaternion quaternion float quaternion))
(define-extern quaternion-norm2 (function quaternion float))
(define-extern quaternion-norm (function quaternion float))
(define-extern quaternion-normalize! (function quaternion quaternion))
(define-extern quaternion-inverse! (function quaternion quaternion quaternion))
(define-extern quaternion-dot (function quaternion quaternion float))
(define-extern quaternion*! (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-right-mult-matrix! (function matrix quaternion matrix))
(define-extern quaternion-left-mult-matrix! (function matrix quaternion matrix))
(define-extern quaternion->matrix (function matrix quaternion matrix))
(define-extern quaternion->matrix-2 (function matrix quaternion matrix))
(define-extern matrix->quaternion (function quaternion matrix quaternion))
(define-extern matrix-with-scale->quaternion (function quaternion matrix quaternion))
(define-extern quaternion-vector-len (function quaternion float))
(define-extern quaternion-log! (function quaternion quaternion quaternion))
(define-extern quaternion-exp! (function quaternion quaternion quaternion))
(define-extern quaternion-slerp! (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-pseudo-slerp! (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-pseudo-seek (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-smooth-seek! (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-zxy! (function quaternion vector quaternion))
(define-extern vector-x-quaternion! (function vector quaternion vector))
(define-extern vector-y-quaternion! (function vector quaternion vector))
(define-extern vector-z-quaternion! (function vector quaternion vector))
(define-extern quaternion-x-angle (function quaternion float))
(define-extern quaternion-y-angle (function quaternion float))
(define-extern quaternion-z-angle (function quaternion float))
(define-extern quaternion-vector-y-angle (function quaternion vector float))
(define-extern quaternion-rotate-local-x! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-y! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-z! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-y! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-x! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-z! (function quaternion quaternion float quaternion))
(define-extern quaternion-delta-y (function quaternion quaternion float))
(define-extern quaternion-rotate-y-to-vector! (function quaternion quaternion quaternion float quaternion))
(define-extern vector-rotate-x! (function vector vector float vector))
(define-extern vector-rotate-y! (function vector vector float vector))
(define-extern vector-rotate-z! (function vector vector float vector))
(define-extern vector-y-angle (function vector float))
(define-extern vector-x-angle (function vector float))
(define-extern quaternion<-rotate-y-vector (function quaternion vector quaternion))
(define-extern quaternion-validate (function quaternion none))
(define-extern quaternion-xz-angle (function quaternion float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; euler                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-eul! (function euler-angles float float float int euler-angles))
(define-extern eul->matrix (function matrix euler-angles matrix))
(define-extern matrix->eul (function euler-angles matrix int euler-angles))
(define-extern eul->quat (function quaternion euler-angles quaternion))
(define-extern quat->eul (function euler-angles quaternion int euler-angles))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trigonometry                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern radmod (function float float))
(define-extern deg- (function float float float))
(define-extern deg-diff (function float float float))
(define-extern deg-seek (function float float float float))
(define-extern deg-seek-smooth (function float float float float float))
(define-extern deg-lerp-clamp (function float float float float))
(define-extern binary-table (array float))
(define-extern sincos-table (array float))
(define-extern sin (function float float))
(define-extern sin-rad (function float float))
(define-extern *sin-poly-vec* vector)
(define-extern *sin-poly-vec2* vector)
(define-extern vector-sin-rad! (function vector vector vector))
(define-extern cos-rad (function float float))
(define-extern *cos-poly-vec* vector)
(define-extern vector-cos-rad! (function vector vector vector))
(define-extern vector-sincos-rad! (function vector vector vector int))
(define-extern sincos-rad! (function (pointer float) float int))
(define-extern sincos! (function (pointer float) float int))
(define-extern vector-rad<-vector-deg! (function vector vector none))
(define-extern vector-rad<-vector-deg/2! (function vector vector int))
(define-extern vector-sincos! (function vector vector vector int))
(define-extern tan-rad (function float float))
(define-extern cos (function float float))
(define-extern tan (function float float))
(define-extern atan0 (function float float float))
(define-extern atan-series-rad (function float float))
(define-extern atan-rad (function float float))
(define-extern sign-bit (function int int))
(define-extern sign-float (function float float))
(define-extern sign (function float float))
(define-extern atan2-rad (function float float float))
(define-extern atan (function float float float))
(define-extern asin (function float float))
(define-extern acos (function float float))
(define-extern acos-rad (function float float))
(define-extern sinerp (function float float float float))
(define-extern sinerp-clamp (function float float float float))
(define-extern coserp (function float float float float))
(define-extern coserp-clamp (function float float float float))
(define-extern coserp180 (function float float float float))
(define-extern coserp180-clamp (function float float float float))
(define-extern ease-in-out (function int int float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gsound-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum sound-command
  :type uint16
  (iop-store            0) ;; sound-rpc-bank-cmd
  (iop-free             1) ;; sound-rpc-bank-cmd
  (load-bank            2) ;; sound-rpc-load-bank
  (load-bank-from-iop   3) ;; sound-rpc-load-bank
  (load-bank-from-ee    4) ;; sound-rpc-load-bank
  (load-music           5) ;; sound-rpc-load-music
  (unload-bank          6) ;; sound-rpc-bank-cmd
  (play                 7) ;; sound-rpc-play
  (pause-sound          8) ;; sound-rpc-pause-sound
  (stop-sound           9) ;; sound-rpc-stop-sound
  (continue-sound      10) ;; sound-rpc-continue-sound
  (set-param           11)
  (set-master-volume   12) ;; sound-rpc-set-master-volume
  (pause-group         13) ;; sound-rpc-pause-group
  (stop-group          14) ;; sound-rpc-stop-group
  (continue-group      15) ;; sound-rpc-continue-group
  (get-irx-version     16)
  (set-falloff-curve   17)
  (set-sound-falloff   18)
  (reload-info         19)
  (set-language        20) ;; sound-rpc-set-language
  (set-flava           21) ;; sound-rpc-set-flava
  (set-midi-reg        22) ;; sound-rpc-set-midi-reg
  (set-reverb          23) ;; sound-rpc-set-reverb
  (set-ear-trans       24) ;; sound-rpc-set-ear-trans
  (shutdown            25)
  (list-sounds         26) ;; sound-rpc-list-sounds
  (unload-music        27) ;; sound-rpc-unload-music
  (set-fps             28) ;; sound-rpc-set-fps
  (boot-load           29)
  (game-load           30)
  (num-tests           31)
  (num-testruns        32)
  (num-sectors         33)
  (num-streamsectors   34)
  (num-streambanks     35)
  (track-pitch         36)
  (linvel-nom          37)
  (linvel-stm          38)
  (seek-nom            39)
  (seek-stm            40)
  (read-seq-nom        41)
  (read-seq-stm        42)
  (read-spr-nom        43)
  (read-spr-stm        44)
  (read-spr-strn-nom   45)
  (rand-stm-abort      46)
  (rand-nom-abort      47)
  (iop-mem             48)
  (cancel-dgo          49)
  (set-stereo-mode     50) ;; sound-rpc-set-stereo-mode
  )

(defenum sound-group
  :bitfield #t
  :type uint8
  (sfx)
  (sog1)
  (sog2)
  (sog3)
  (sog4)
  (sog5)
  (sog6)
  (sog7)

  ; (music) 1
  ; (dialog) 2
  ; (sog3)
  ; (ambient)
  ; (sog5)
  ; (sog6)
  ; (sog7)
  )

;; not 100% sure on these
(defenum sound-mask
  :bitfield #t
  :type uint16
  (volume)
  (pitch)
  (bend)
  (unused)
  (time)
  (trans)
  (fo-min)
  (fo-max)
  (fo-curve)
  )


(deftype sound-stream-name (structure)
  ((name uint8 48 :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-cmd (structure)
  ((rsvd1   uint16        :offset-assert 0)
   (command sound-command :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-play-params (structure)
  ((mask      uint16    :offset-assert 0)
   (pitch-mod int16     :offset-assert 2)
   (bend      int16     :offset-assert 4)
   (fo-min    int16     :offset-assert 6)
   (fo-max    int16     :offset-assert 8)
   (fo-curve  int8      :offset-assert 10)
   (priority  int8      :offset-assert 11)
   (volume    int32     :offset-assert 12)
   (trans     int32   3 :offset-assert 16)
   (group     uint8     :offset-assert 28)
   (reg       uint8   3 :offset-assert 29)
   (group-and-regs uint32 :offset 28)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-name (uint128)
  ((lo  uint64  :offset 0)
   (hi  uint64  :offset 64)
   )
  :flag-assert #x900000010
  )

(deftype sound-id (uint32)
  ()
  (:methods
   (unused-9 () none 9)
   )
  :flag-assert #xa00000004
  )

(deftype sound-bank-id (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype sound-rpc-bank-cmd (sound-rpc-cmd)
  ((bank-name sound-name  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-test-cmd (sound-rpc-cmd)
  ((ee-addr pointer  :offset-assert 4)
   (param0  uint16   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-sound-cmd (sound-rpc-cmd)
  ((id sound-id  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-group-cmd (sound-rpc-cmd)
  ((group sound-group  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-load-bank (sound-rpc-bank-cmd)
  ((ee-addr pointer  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype sound-rpc-load-music (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-unload-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-play (sound-rpc-sound-cmd)
  ((name   sound-name                :offset-assert 16)
   (params sound-play-params :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sound-rpc-pause-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-param (sound-rpc-sound-cmd)
  ((params    sound-play-params :inline :offset-assert 8)
   (auto-time int32                     :offset-assert 40)
   (auto-from int32                     :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-set-master-volume (sound-rpc-group-cmd)
  ((volume int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-pause-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-stop-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-continue-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-get-irx-version (sound-rpc-cmd)
  ((major   uint32   :offset-assert 4)
   (minor   uint32   :offset-assert 8)
   (ee-addr pointer  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-language (sound-rpc-cmd)
  ((lang uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-stereo-mode (sound-rpc-cmd)
  ((mode int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-reverb (sound-rpc-cmd)
  ((core   uint8   :offset-assert 4)
   (reverb int32   :offset-assert 8)
   (left   uint32  :offset-assert 12)
   (right  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype sound-rpc-set-ear-trans (sound-rpc-cmd)
  ((ear-trans1 int32  3 :offset-assert 4)
   (ear-trans0 int32  3 :offset-assert 16)
   (cam-trans  int32  3 :offset-assert 28)
   (cam-angle  int32    :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sound-rpc-set-flava (sound-rpc-cmd)
  ((flava      uint8  :offset-assert 4)
   (excitement uint8  :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype sound-rpc-set-midi-reg (sound-rpc-cmd)
  ((reg   int32  :offset-assert 4)
   (value int16  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-shutdown (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-fps (sound-rpc-cmd)
  ((fps uint8  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-list-sounds (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-unload-music (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-union (structure)
  ((data              uint32                      20 :offset-assert 0)
   (load-bank         sound-rpc-load-bank            :offset        0)
   (unload-bank       sound-rpc-unload-bank          :offset        0)
   (play              sound-rpc-play                 :offset        0)
   (pause-sound       sound-rpc-pause-sound          :offset        0)
   (stop-sound        sound-rpc-stop-sound           :offset        0)
   (continue-sound    sound-rpc-continue-sound       :offset        0)
   (set-param         sound-rpc-set-param            :offset        0)
   (set-master-volume sound-rpc-set-master-volume    :offset        0)
   (pause-group       sound-rpc-pause-group          :offset        0)
   (stop-group        sound-rpc-stop-group           :offset        0)
   (continue-group    sound-rpc-continue-group       :offset        0)
   (get-irx-version   sound-rpc-get-irx-version      :offset        0)
   (set-language      sound-rpc-set-language         :offset        0)
   (set-reverb        sound-rpc-set-reverb           :offset        0)
   (set-ear-trans     sound-rpc-set-ear-trans        :offset        0)
   (set-flava         sound-rpc-set-flava            :offset        0)
   (set-midi-reg      sound-rpc-set-midi-reg         :offset        0)
   (set-fps           sound-rpc-set-fps              :offset        0)
   (shutdown          sound-rpc-shutdown             :offset        0)
   (list-sounds       sound-rpc-list-sounds          :offset        0)
   (unload-music      sound-rpc-unload-music         :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sound-spec (basic)
  ((mask            sound-mask  :offset-assert 4)
   (num             float       :offset-assert 8)
   (group           sound-group :offset-assert 12)
   (reg             uint8 3     :offset-assert 13)
   (group-and-regs  uint32      :offset 12)
   (sound-name-char uint8 16    :offset-assert 16)
   (sound-name      sound-name  :offset 16 :score 1)
   (trans           int32 4     :offset-assert 32)
   (volume          int32       :offset-assert 48)
   (pitch-mod       int32       :offset-assert 52)
   (bend            int32       :offset-assert 56)
   (fo-min          int16       :offset-assert 60)
   (fo-max          int16       :offset-assert 62)
   (fo-curve        int8        :offset-assert 64)
   (priority        int8        :offset-assert 65)
   (auto-time       int32       :offset-assert 68)
   (auto-from       int32       :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ambient-sound (basic)
  ((spec         sound-spec              :offset-assert 4)
   (playing-id   sound-id                :offset-assert 8)
   (trans        vector          :inline :offset-assert 16)
   (name         sound-name              :offset-assert 32)
   (play-time    time-frame              :offset-assert 48)
   (time-base    time-frame              :offset-assert 56)
   (time-random  time-frame              :offset-assert 64)
   (volume       int32                   :offset-assert 72)
   (pitch        int32                   :offset-assert 76)
   (falloff-near int32                   :offset-assert 80)
   (falloff-far  int32                   :offset-assert 84)
   (falloff-mode int32                   :offset-assert 88)
   (params       (pointer float)         :offset-assert 92)
   (param-count  int32                   :offset-assert 96)
   (entity       entity                  :offset-assert 100)
   (sound-count  int32                   :offset-assert 104)
   )
  :method-count-assert 16
  :size-assert         #x6c
  :flag-assert         #x100000006c
  (:methods
    (new (symbol type basic vector) _type_ 0)
    (update! (_type_) int 9)
    (change-sound! (_type_ sound-name) int 10)
    (update-trans! (_type_ vector) int 11)
    (update-vol! (_type_ float) int 12)
    (update-pitch-mod! (_type_ float) none 13)
    (set-falloff-far! (_type_ float) none 14)
    (stop! (_type_) int 15)
    )
  )

(define-extern *current-sound-id* sound-id)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; timer-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum timer-clock-selection
  :type uint8
  (busclk 0)
  (busclk/16 1)
  (busclk/256 2)
  (hblank 3)
  )

(deftype timer-mode (uint32)
  ((clks  timer-clock-selection :offset 0 :size 2)
   (gate  uint8 :offset 2 :size 1) ;; gate function enable
   (gats  uint8 :offset 3 :size 1) ;; gate selection: 0 = hblank, 1 = vblank
   ;; gate mode:
   ;;  0: count while gate signal is low
   ;;  1: start when gate signal rises
   ;;  2: start when gate signal falls
   ;;  3: start when gate signal rises/falls
   (gatm  uint8 :offset 4 :size 2)
   (zret  uint8 :offset 6 :size 1) ;; zero return: clear counter when equal to reference value
   (cue   uint8 :offset 7 :size 1) ;; count-up enable
   (cmpe  uint8 :offset 8 :size 1) ;; compare-interrupt enable
   (ovfe  uint8 :offset 9 :size 1) ;; overflow-interrupt enable
   (equf  uint8 :offset 10 :size 1) ;; equal-flag
   (ovff  uint8 :offset 11 :size 1) ;; overflow-flag
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype timer-bank (structure)
  ((count uint32      :offset-assert 0)
   (mode  timer-mode  :offset 16)
   (comp  uint32      :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype timer-hold-bank (timer-bank)
  ((hold uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype stopwatch (basic)
  ((prev-time-elapsed time-frame :offset-assert 8)
   (start-time        time-frame :offset-assert 16)
   (begin-level       int32      :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(define-extern *ticks-per-frame* int)
(define-extern timer-init (function timer-bank timer-mode int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vif-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vif-stat (uint32)
  ((vps uint8 :offset 0 :size 2)
   (vew uint8 :offset 2 :size 1)
   (mrk uint8 :offset 6 :size 1)
   (vss uint8 :offset 8 :size 1)
   (vfs uint8 :offset 9 :size 1)
   (vis uint8 :offset 10 :size 1)
   (int uint8 :offset 11 :size 1)
   (er0 uint8 :offset 12 :size 1)
   (er1 uint8 :offset 13 :size 1)
   (fqc uint8 :offset 24 :size 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-fbrst (uint32)
  ((rst uint8 :offset 0 :size 1)
   (fbk uint8 :offset 1 :size 1)
   (stp uint8 :offset 2 :size 1)
   (stc uint8 :offset 3 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-err (uint32)
  ((mii uint8 :offset 0 :size 1)
   (me0 uint8 :offset 1 :size 1) ;; PS2 hardware bug, must set this to 1 for correct operation.
   (me1 uint8 :offset 2 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-bank (structure)
  ((stat   uint32  :offset-assert 0)
   (fbrst  uint32  :offset 16)
   (err    vif-err :offset 32)
   (mark   uint32  :offset 48)
   (cycle  uint32  :offset 64)
   (mode   uint32  :offset 80)
   (num    uint32  :offset 96)
   (mask   uint32  :offset 112)
   (code   uint32  :offset 128)
   (itops  uint32  :offset 144)
   (base   uint32  :offset 160)
   (offset uint32  :offset 176)
   (tops   uint32  :offset 192)
   (itop   uint32  :offset 208)
   (top    uint32  :offset 224)
   (r0     uint32  :offset 256)
   (r1     uint32  :offset 272)
   (r2     uint32  :offset 288)
   (r3     uint32  :offset 304)
   (c0     uint32  :offset 320)
   (c1     uint32  :offset 336)
   (c2     uint32  :offset 352)
   (c3     uint32  :offset 368)
   )
  :method-count-assert 9
  :size-assert         #x174
  :flag-assert         #x900000174
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dma-chcr (uint32)
  ((dir uint8 :offset 0 :size 1) ;; 1 - from memory
   (mod uint8 :offset 2 :size 2) ;; normal, chain, interleave
   (asp uint8 :offset 4 :size 2) ;; none, 1, 2
   (tte uint8 :offset 6 :size 1) ;; transfer tag (sc only)
   (tie uint8 :offset 7 :size 1) ;; tag interrupt
   (str uint8 :offset 8 :size 1) ;; start!
   (tag uint16 :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype dma-bank (structure)
  ((chcr dma-chcr  :offset 0)
   (madr uint32  :offset 16)
   (qwc  uint32  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype dma-bank-source (dma-bank)
  ((tadr uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype dma-bank-vif (dma-bank-source)
  ((as0  uint32  :offset 64)
   (as1  uint32  :offset 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

(deftype dma-bank-spr (dma-bank-source)
  ((sadr uint32  :offset 128)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype dma-ctrl (uint32)
  ((dmae  uint8 :offset 0 :size 1)
   (rele  uint8 :offset 1 :size 1)
   (mfd   uint8 :offset 2 :size 2)
   (sts   uint8 :offset 4 :size 2)
   (std   uint8 :offset 6 :size 2)
   (rcyc  uint8 :offset 8 :size 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype dma-enable (uint32)
  ((cpnd  uint8 :offset 16 :size 1))
  :flag-assert #x900000004
  )

(deftype dma-sqwc (uint32)
  ((sqwc  uint8 :offset 0  :size 8)
   (tqwc  uint8 :offset 16 :size 8)
   )
  :flag-assert #x900000004
  )

(deftype dma-bank-control (structure)
  ((ctrl    dma-ctrl  :offset 0)
   (stat    uint32  :offset 16)
   (pcr     uint32  :offset 32)
   (sqwc    dma-sqwc  :offset 48)
   (rbsr    uint32  :offset 64)
   (rbor    uint32  :offset 80)
   (stadr   uint32  :offset 96)
   (enabler uint32  :offset 5408)
   (enablew uint32  :offset 5520)
   )
  :method-count-assert 9
  :size-assert         #x1594
  :flag-assert         #x900001594
  )

(deftype vu-code-block (basic)
  ((name         basic   :offset-assert 4)
   (code         uint32  :offset-assert 8)
   (size         int32   :offset-assert 12)
   (dest-address uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


(deftype vu-stat (uint64)
  ()
  :flag-assert #x900000008
  )

(defenum dma-tag-id
    :bitfield #f
    :type uint8
    (refe 0)      ;; addr=ADDR, ends after this transfer
    (cnt 1)       ;; addr=after tag, next-tag=after data
    (next 2)      ;; addr=after tag, next-tag=ADDR
    (ref 3)       ;; addr=ADDR, next-tag=after tag
    (refs 4)      ;; ref, but stall controled
    (call 5)      ;;
    (ret 6)       ;;
    (end 7)       ;; next, but ends.
    )

(deftype dma-tag (uint64)
  ((qwc uint16    :offset 0)           ;; quadword count
   (pce uint8     :offset 26 :size 2)  ;; priority (source mode)
   (id dma-tag-id :offset 28 :size 3)  ;; ID (what the tag means)
   (irq uint8     :offset 31 :size 1)  ;; interrupt at the end?
   (addr uint32   :offset 32 :size 31) ;; address (31 bits)
   (spr uint8     :offset 63 :size 1)  ;; spr or not flag.
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dma-bucket (structure)
  ((tag   dma-tag             :offset-assert 0)
   (last  (pointer dma-tag)  :offset-assert 8)
   (dummy uint32             :offset-assert 12)
   (next  uint32             :offset 4)
   (clear uint64             :offset 8)
   (vif0  uint32             :offset 8)
   (vif1  uint32             :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; all these have mask (only applies to unpacks) and interrupt not set.
(defenum vif-cmd
    :bitfield #f
    :type uint8
    (nop          0)  ;; no-op, can still have irq set.
    (stcycl       1)  ;; set write recycle register
    (offset       2)  ;; set offset register
    (base         3)  ;; set base register
    (itop         4)  ;; set data pointer register (itops)
    (stmod        5)  ;; set mode register
    (mskpath3     6)  ;; set path 3 mask
    (mark         7)  ;; set mark register
    (pc-port      8)  ;; special tag for PC Port data.
    (flushe       16) ;; wait for end of microprogram
    (flush        17) ;; wait for end of microprogram and transfer (path1/path2)
    (flusha       19) ;; wait for end of microprogram and transfer (path1/path2/path3)
    (mscal        20) ;; activate microprogram (call)
    (mscalf       21) ;; flushe and activate (call)
    (mscnt        23) ;; activate microprogram (continue)
    (stmask       32) ;; set MASK register.
    (strow        48) ;; set filling data
    (stcol        49) ;; set filling data
    (mpg          74) ;; transfer microprogram
    (direct       80) ;; straight to GIF.
    (directhl     81)
    (unpack-s-32  96)
    (unpack-s-16  97)
    (unpack-s-8   98)
    ;; 99 is invalid
    (unpack-v2-32 100)
    (unpack-v2-16 101)
    (unpack-v2-8  102)
    ;; 103 is invalid
    (unpack-v3-32 104)
    (unpack-v3-16 105)
    (unpack-v3-8  106)
    ;; 107 is invalid
    (unpack-v4-32 108)
    (unpack-v4-16 109)
    (unpack-v4-8  110)
    (unpack-v4-5  111)
    (cmd-mask     239) ;; not sure what this is
    )

(defenum vif-cmd-32
    :bitfield #f
    :type uint32
    :copy-entries vif-cmd
    )

(deftype vif-mask (uint32)
  ((m0  uint8 :offset 0  :size 2)
   (m1  uint8 :offset 2  :size 2)
   (m2  uint8 :offset 4  :size 2)
   (m3  uint8 :offset 6  :size 2)
   (m4  uint8 :offset 8  :size 2)
   (m5  uint8 :offset 10 :size 2)
   (m6  uint8 :offset 12 :size 2)
   (m7  uint8 :offset 14 :size 2)
   (m8  uint8 :offset 16 :size 2)
   (m9  uint8 :offset 18 :size 2)
   (m10 uint8 :offset 20 :size 2)
   (m11 uint8 :offset 22 :size 2)
   (m12 uint8 :offset 24 :size 2)
   (m13 uint8 :offset 26 :size 2)
   (m14 uint8 :offset 28 :size 2)
   (m15 uint8 :offset 30 :size 2)
   )
  :flag-assert #x900000004
  )

(deftype vif-stcycl-imm (uint16)
  ((cl  uint8 :offset 0 :size 8)
   (wl  uint8 :offset 8 :size 8)
   )
  :flag-assert #x900000002
  )

(deftype vif-unpack-imm (uint16)
  ((addr  uint16 :offset 0  :size 10)
   (usn   uint8  :offset 14 :size 1)
   (flg   uint8  :offset 15 :size 1)
   )
  :flag-assert #x900000002
  )

(deftype vif-tag (uint32)
  ((imm uint16  :offset 0 :size 16)
   (num uint8   :offset 16 :size 8)
   (cmd vif-cmd :offset 24 :size 7)
   (irq uint8   :offset 31 :size 1)
   (msk uint8   :offset 28 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern dma-sync-fast (function dma-bank none))
(define-extern dma-send-no-scratch (function dma-bank uint32 uint32 none))
(define-extern dma-sync-with-count (function dma-bank (pointer int32) int))
(define-extern dma-count-until-done (function dma-bank (pointer int32) int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; video-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype video-params (structure)
  ((set-video-mode              basic  :offset-assert 0)
   (reset-video-mode            basic  :offset-assert 4)
   (display-fbp                 int32  :offset-assert 8)
   (relative-x-scale            float  :offset 16)
   (display-dx                  int32  :offset-assert 20)
   (display-dy                  int32  :offset-assert 24)
   (display-sy                  int32  :offset-assert 28)
   (relative-x-scale-reciprical float  :offset-assert 32)
   (screen-pages-high           int32  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(define-extern *video-params* video-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vu1-user-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum texture-enable-mask
  :type uint64
  :bitfield #t
  (tfrag  0)
  (pris   1)
  (shrub  2)
  (alpha  3)
  (water  4)
  (warp   5)
  (sprite 6)
  (map    7)
  (sky    8)
  (tex9   9)
  (tex10 10)
  (tex11 11)
  (tex12 12)
  (tex13 13)
  (tex14 14)
  (tex15 15)
  (tex16 16)
  )

(defenum texture-enable-mask-u32
  :type uint32
  :bitfield #t
  :copy-entries texture-enable-mask
  )

;;  <what renderer>-<what level>-<what tpage>
(defenum bucket-id
  :type int32
  :bitfield #f

  ;;;;;;;;;;

  (bucket-0      0)
  (bucket-1      1)
  (bucket-2      2)
  (bucket-3      3)   ;; blit displays
  (tex-lcom-sky-pre  4)   ;; tex
  (bucket-5      5)   ;; sky
  (bucket-6      6)   ;; ocean

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; All levels with tfrag tpage
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (tex-l0-tfrag      7)   ;; level 0 tex
  (bucket-8          8)   ;; tfrag
  (bucket-9          9)   ;; tie
  (bucket-10        10)   ;; tie
  (bucket-11        11)   ;; tfrag
  (bucket-12        12)   ;; tie
  (bucket-13        13)   ;; tie
  (merc-l0-tfrag    14)   ;; merc
  (emerc-l0-tfrag   15)   ;; emerc
  (bucket-16        16)   ;; mercneric
  (bucket-17        17)   ;; tie

  (tex-l1-tfrag     18)   ;; tex
  (bucket-19        19)   ;; tfrag
  (bucket-20        20)   ;; tie
  (bucket-21        21)   ;; tie
  (bucket-22        22)   ;; tfrag
  (bucket-23        23)   ;; tie
  (bucket-24        24)   ;; tie
  (merc-l1-tfrag    25)   ;; merc
  (emerc-l1-tfrag   26)   ;; emerc
  (bucket-27        27)   ;; mercneric
  (bucket-28        28)   ;; tie

  (tex-l2-tfrag     29)   ;; tex
  (bucket-30        30)   ;; tfrag
  (bucket-31        31)   ;; tie
  (bucket-32        32)   ;; tie
  (bucket-33        33)   ;; tfrag
  (bucket-34        34)   ;; tie
  (bucket-35        35)   ;; tie
  (merc-l2-tfrag    36)   ;; merc
  (emerc-l2-tfrag   37)   ;; emerc
  (bucket-38        38)   ;; mercneric
  (bucket-39        39)   ;; tie

  (tex-l3-tfrag     40)   ;; tex
  (bucket-41        41)   ;; tfrag
  (bucket-42        42)   ;; tie
  (bucket-43        43)   ;; tie
  (bucket-44        44)   ;; tfrag
  (bucket-45        45)   ;; tie
  (bucket-46        46)   ;; tie
  (merc-l3-tfrag    47)   ;; merc
  (emerc-l3-tfrag   48)   ;; emerc
  (bucket-49        49)   ;; mercneric
  (bucket-50        50)   ;; tie

  (tex-l4-tfrag     51)   ;; tex
  (bucket-52        52)   ;; tfrag
  (bucket-53        53)   ;; tie
  (bucket-54        54)   ;; tie
  (bucket-55        55)   ;; tfrag
  (bucket-56        56)   ;; tie
  (bucket-57        57)   ;; tie
  (merc-l4-tfrag    58)   ;; merc
  (emerc-l4-tfrag   59)   ;; emerc
  (bucket-60        60)   ;; mercneric
  (bucket-61        61)   ;; tie

  (tex-l5-tfrag     62)   ;; tex
  (bucket-63        63)   ;; tfrag
  (bucket-64        64)   ;; tie
  (bucket-65        65)   ;; tie
  (bucket-66        66)   ;; tfrag
  (bucket-67        67)   ;; tie
  (bucket-68        68)   ;; tie
  (merc-l5-tfrag    69)   ;; merc
  (emerc-l5-tfrag   70)   ;; emerc
  (bucket-71        71)   ;; mercneric
  (bucket-72        72)   ;; tie

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; All levels with shrub tpage
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (tex-l0-shrub      73)   ;; tex
  (bucket-74         74)   ;; shrub
  (bucket-75         75)   ;; shrub
  (bucket-76         76)   ;; shrub
  (bucket-77         77)   ;; shrub
  (bucket-78         78)   ;; shrub
  (merc-l0-shrub     79)   ;; merc
  (emerc-l0-shrub    80)   ;; emerc
  (bucket-81         81)   ;; mercneric

  (tex-l1-shrub      82)   ;; tex
  (bucket-83         83)   ;; shrub
  (bucket-84         84)   ;; shrub
  (bucket-85         85)   ;; shrub
  (bucket-86         86)   ;; shrub
  (bucket-87         87)   ;; shrub
  (merc-l1-shrub     88)   ;; merc
  (emerc-l1-shrub    89)   ;; emerc
  (bucket-90         90)   ;; mercneric

  (tex-l2-shrub      91)   ;; tex
  (bucket-92         92)   ;; shrub
  (bucket-93         93)   ;; shrub
  (bucket-94         94)   ;; shrub
  (bucket-95         95)   ;; shrub
  (bucket-96         96)   ;; shrub
  (merc-l2-shrub     97)   ;; merc
  (emerc-l2-shrub    98)   ;; emerc
  (bucket-99         99)   ;; mercneric

  (tex-l3-shrub     100)  ;; tex
  (bucket-101       101)  ;; shrub
  (bucket-102       102)  ;; shrub
  (bucket-103       103)  ;; shrub
  (bucket-104       104)  ;; shrub
  (bucket-105       105)  ;; shrub
  (merc-l3-shrub    106)  ;; merc
  (emerc-l3-shrub   107)  ;; emerc
  (bucket-108       108)  ;; mercneric

  (tex-l4-shrub     109)  ;; tex
  (bucket-110       110)  ;; shrub
  (bucket-111       111)  ;; shrub
  (bucket-112       112)  ;; shrub
  (bucket-113       113)  ;; shrub
  (bucket-114       114)  ;; shrub
  (merc-l4-shrub    115)  ;; merc
  (emerc-l4-shrub   116)  ;; emerc
  (bucket-117       117)  ;; mercneric

  (tex-l5-shrub     118)  ;; tex
  (bucket-119       119)  ;; shrub
  (bucket-120       120)  ;; shrub
  (bucket-121       121)  ;; shrub
  (bucket-122       122)  ;; shrub
  (bucket-123       123)  ;; shrub
  (merc-l5-shrub    124)  ;; merc
  (emerc-l5-shrub   125)  ;; emerc
  (bucket-126       126)  ;; mercneric

  (tex-l0-alpha     127)  ;; tex
  (bucket-128       128)  ;; tfrag
  (bucket-129       129)  ;; tie
  (bucket-130       130)  ;; tie
  (merc-l0-alpha    131)  ;; merc
  (emerc-l0-alpha   132)  ;; emerc
  (bucket-133       133)  ;; mercneric
  (bucket-134       134)  ;; tfrag
  (bucket-135       135)  ;; tie
  (bucket-136       136)  ;; tie

  (tex-l1-alpha     137)  ;; tex
  (bucket-138       138)  ;; tfrag
  (bucket-139       139)  ;; tie
  (bucket-140       140)  ;; tie
  (merc-l1-alpha    141)  ;; merc
  (emerc-l1-alpha   142)  ;; emerc
  (bucket-143       143)  ;; mercneric
  (bucket-144       144)  ;; tfrag
  (bucket-145       145)  ;; tie
  (bucket-146       146)  ;; tie

  (tex-l2-alpha     147)  ;; tex
  (bucket-148       148)  ;; tfrag
  (bucket-149       149)  ;; tie
  (bucket-150       150)  ;; tie
  (merc-l2-alpha    151)  ;; merc
  (emerc-l2-alpha   152)  ;; emerc
  (bucket-153       153)  ;; mercneric
  (bucket-154       154)  ;; tfrag
  (bucket-155       155)  ;; tie
  (bucket-156       156)  ;; tie

  (tex-l3-alpha     157)  ;; tex
  (bucket-158       158)  ;; tfrag
  (bucket-159       159)  ;; tie
  (bucket-160       160)  ;; tie
  (merc-l3-alpha    161)  ;; merc
  (emerc-l3-alpha   162)  ;; emerc
  (bucket-163       163)  ;; mercneric
  (bucket-164       164)  ;; tfrag
  (bucket-165       165)  ;; tie
  (bucket-166       166)  ;; tie

  (tex-l4-alpha     167)  ;; tex
  (bucket-168       168)  ;; tfrag
  (bucket-169       169)  ;; tie
  (bucket-170       170)  ;; tie
  (merc-l4-alpha    171)  ;; merc
  (emerc-l4-alpha   172)  ;; emerc
  (bucket-173       173)  ;; mercneric
  (bucket-174       174)  ;; tfrag
  (bucket-175       175)  ;; tie
  (bucket-176       176)  ;; tie

  (tex-l5-alpha     177)  ;; tex
  (bucket-178       178)  ;; tfrag
  (bucket-179       179)  ;; tie
  (bucket-180       180)  ;; tie
  (merc-l5-alpha    181)  ;; merc
  (emerc-l5-alpha   182)  ;; emerc
  (bucket-183       183)  ;; mercneric
  (bucket-184       184)  ;; tfrag
  (bucket-185       185)  ;; tie
  (bucket-186       186)  ;; tie

  (tex-lcom-tfrag   187)  ;; tex
  (merc-lcom-tfrag  188)  ;; merc
  (emerc-lcom-tfrag 189)  ;; emerc
  (bucket-190       190)  ;; mercneric

  (tex-lcom-shrub   191)  ;; tex
  (merc-lcom-shrub  192)  ;; merc
  (emerc-lcom-shrub 193)  ;; emerc
  (bucket-194       194)  ;; mercneric

  (bucket-195       195)  ;; shadow

  (tex-l0-pris      196)  ;; tex
  (merc-l0-pris     197)  ;; merc
  (emerc-l0-pris    198)  ;; emerc
  (bucket-199       199)  ;; mercneric

  (tex-l1-pris      200)  ;; tex
  (merc-l1-pris     201)  ;; merc
  (emerc-l1-pris    202)  ;; emerc
  (bucket-203       203)  ;; mercneric

  (tex-l2-pris      204)  ;; tex
  (merc-l2-pris     205)  ;; merc
  (emerc-l2-pris    206)  ;; emerc
  (bucket-207       207)  ;; mercneric

  (tex-l3-pris      208)  ;; tex
  (merc-l3-pris     209)  ;; merc
  (emerc-l3-pris    210)  ;; emerc
  (bucket-211       211)  ;; mercneric

  (tex-l4-pris      212)  ;; tex
  (merc-l4-pris     213)  ;; merc
  (emerc-l4-pris    214)  ;; emerc
  (bucket-215       215)  ;; mercneric

  (tex-l5-pris      216)  ;; tex
  (merc-l5-pris     217)  ;; merc
  (emerc-l5-pris    218)  ;; emerc
  (bucket-219       219)  ;; mercneric

  (tex-lcom-pris    220)  ;; tex
  (merc-lcom-pris   221)  ;; merc
  (emerc-lcom-pris  222)  ;; emerc
  (bucket-223       223)  ;; mercneric

  (tex-l0-pris2     224)  ;; tex
  (merc-l0-pris2    225)  ;; merc
  (emerc-l0-pris2   226)  ;; emerc
  (bucket-227       227)  ;; mercneric

  (tex-l1-pris2     228)  ;; tex
  (merc-l1-pris2    229)  ;; merc
  (emerc-l1-pris2   230)  ;; emerc
  (bucket-231       231)  ;; mercneric

  (tex-l2-pris2     232)  ;; tex
  (merc-l2-pris2    233)  ;; merc
  (emerc-l2-pris2   234)  ;; emerc
  (bucket-235       235)  ;; mercneric

  (tex-l3-pris2     236)  ;; tex
  (merc-l3-pris2    237)  ;; merc
  (emerc-l3-pris2   238)  ;; emerc
  (bucket-239       239)  ;; mercneric

  (tex-l4-pris2     240)  ;; tex
  (merc-l4-pris2    241)  ;; merc
  (emerc-l4-pris2   242)  ;; emerc
  (bucket-243       243)  ;; mercneric

  (tex-l5-pris2     244)  ;; tex
  (merc-l5-pris2    245)  ;; merc
  (emerc-l5-pris2   246)  ;; emerc
  (bucket-247       247)  ;; mercneric

  (tex-lcom-pris2   248)  ;; tex
  (merc-lcom-pris2  249)  ;; merc
  (emerc-lcom-pris2 250)  ;; emerc
  (bucket-251       251)  ;; mercneric

  (tex-l0-water     252)  ;; tex
  (merc-l0-water    253)  ;; merc
  (bucket-254       254)  ;; mercneric
  (bucket-255       255)  ;; tfrag
  (bucket-256       256)
  (bucket-257       257)
  (bucket-258       258)
  (bucket-259       259)  ;; tfrag
  (bucket-260       260)

  (tex-l1-water     261)  ;; tex
  (merc-l1-water    262)  ;; merc
  (bucket-263       263)  ;; mercneric
  (bucket-264       264)  ;; tfrag
  (bucket-265       265)
  (bucket-266       266)
  (bucket-267       267)
  (bucket-268       268)  ;; tfrag
  (bucket-269       269)

  (tex-l2-water     270)  ;; tex
  (merc-l2-water    271)  ;; merc
  (bucket-272       272)  ;; mercneric
  (bucket-273       273)  ;; tfrag
  (bucket-274       274)
  (bucket-275       275)
  (bucket-276       276)
  (bucket-277       277)  ;; tfrag
  (bucket-278       278)

  (tex-l3-water     279)  ;; tex
  (merc-l3-water    280)  ;; merc
  (bucket-281       281)  ;; mercneric
  (bucket-282       282)  ;; tfrag
  (bucket-283       283)
  (bucket-284       284)
  (bucket-285       285)
  (bucket-286       286)  ;; tfrag
  (bucket-287       287)

  (tex-l4-water     288)  ;; tex
  (merc-l4-water    289)  ;; merc
  (bucket-290       290)  ;; mercneric
  (bucket-291       291)  ;; tfrag
  (bucket-292       292)
  (bucket-293       293)
  (bucket-294       294)
  (bucket-295       295)  ;; tfrag
  (bucket-296       296)

  (tex-l5-water     297)  ;; tex
  (merc-l5-water    298)  ;; merc
  (bucket-299       299)  ;; mercneric
  (bucket-300       300)  ;; tfrag
  (bucket-301       301)
  (bucket-302       302)
  (bucket-303       303)
  (bucket-304       304)  ;; tfrag
  (bucket-305       305)

  (tex-lcom-water   306)  ;; tex
  (merc-lcom-water  307)  ;; merc
  (bucket-308       308)  ;; mercneric

  (tex-lcom-sky-post 309)

  (bucket-310       310)  ;; ocean
  (bucket-311       311)  ;; depth-cue

  (tex-all-sprite   312)
  (bucket-313       313)  ;; particles
  (bucket-314       314)  ;; shadow
  (bucket-315       315)  ;; effects
  (tex-all-warp     316)  ;; tex
  (bucket-317       317)  ;; mercneric
  (bucket-318       318)  ;; debug, no zbuf
  (tex-all-map      319)  ;; tex
  (bucket-320       320)  ;; hud
  (bucket-321       321)  ;; hud letterbox, no zbuf
  (bucket-322       322)  ;; hud
  (bucket-323       323)  ;; hud
  (bucket-324   324)  ;; debug
  (debug-no-zbuf 325)  ;; debug
  (debug-unknown-326 326)
  )

;; TODO - names in `render` menu
(defenum vu1-renderer-mask
  :type uint64
  :bitfield #t
  (rn0)
  (rn1)
  (rn2)
  (rn3)
  (rn4)
  (rn5)
  (rn6)
  (rn7)
  (rn8)
  (rn9)
  (rn10)
  (rn11)
  (rn12)
  (merc)
  (emerc)
  (rn15)
  (rn16)
  (rn17)
  (rn18)
  (rn19)
  (rn20)
  (rn21)
  (rn22)
  (rn23)
  (rn24)
  (rn25)
  (rn26)
  (rn27)
  (rn28)
  (rn29)
  (rn30)
  (rn31)
  (rn32)
  (rn33)
  (rn34)
  )

(defenum tpage-category
  :type int8
  (tfrag  0)
  (pris   1)
  (shrub  2)
  (alpha  3)
  (water  4)
  (warp   5)
  (pris2  6)
  (sprite 7)
  (map    8)
  (sky    9)
  )

(defenum tpage-category-u32
  :type uint32
  :copy-entries tpage-category
  )


(deftype dma-foreground-sink (basic)
  ((bucket                   bucket-id      :offset-assert 4)
   (foreground-texture-page  tpage-category :offset-assert 8)
   (foreground-texture-level int8           :offset-assert 9)
   (foreground-output-bucket int8           :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xb
  :flag-assert         #x90000000b
  )

(deftype generic-bucket-state (structure)
  ((gifbuf-adr uint32  :offset-assert 0)
   (inbuf-adr  uint32  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype generic-dma-foreground-sink (dma-foreground-sink)
  ((state generic-bucket-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; profile-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype profile-segment (structure)
  ((name       symbol  :offset-assert 0)
   (start-time int16   :offset-assert 4)
   (end-time   int16   :offset-assert 6)
   (count      uint8   :offset-assert 8)
   (vu-count   uint8   :offset-assert 9)
   (depth      uint16  :offset-assert 10)
   (color      rgba    :offset-assert 12)
   (code-time  uint16  :offset 4)
   (vu-time    uint16  :offset 6)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype profile-collapse (structure)
  ((count int32      :offset-assert 0)
   (data  profile-segment 48 :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x304
  :flag-assert         #x900000304
  )


(deftype profile-segment-array (basic)
  ((count     int16       :offset-assert 4)
   (depth     int8        :offset-assert 6)
   (max-depth int8        :offset-assert 7)
   (base-time int16       :offset-assert 8)
   (segment   profile-segment 9   :offset-assert 12) ;; todo
   (data      profile-segment 512 :inline :offset-assert 48)
   )
  :method-count-assert 13
  :size-assert         #x2030
  :flag-assert         #xd00002030
  (:methods
    (get-total-time (_type_) int 9)
    (start-frame! (_type_) none 10)
    (start-segment! (_type_ symbol rgba) none 11)
    (end-segment! (_type_) none 12)
    )
  )

(declare-type dma-buffer structure)

(deftype profile-array (structure)
  ((data profile-segment-array 2 :offset-assert 0) ;; guess
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (setup-categories! (_type_) none 9)
    (draw-bars! (_type_ dma-buffer int) none 10)
    (draw-text! (_type_) none 11)
    )
  )


(define-extern *profile-gap-color* rgba)
(define-extern *profile-all-color* rgba)
(define-extern *profile-particles-color* rgba)
(define-extern *profile-target-color* rgba)
(define-extern *profile-target-post-color* rgba)
(define-extern *profile-joints-color* rgba)
(define-extern *profile-debug-color* rgba)
(define-extern *profile-draw-hook-color* rgba)
(define-extern *profile-sky-color* rgba)
(define-extern *profile-ocean-color* rgba)
(define-extern *profile-background-color* rgba)
(define-extern *profile-bsp-color* rgba)
(define-extern *profile-foreground-color* rgba)
(define-extern *profile-tfrag-color* rgba)
(define-extern *profile-instance-tie-color* rgba)
(define-extern *profile-instance-shrubbery-color* rgba)
(define-extern *profile-generic-tie-color* rgba)
(define-extern *profile-bones-color* rgba)
(define-extern *profile-generic-merc-color* rgba)
(define-extern *profile-shadow-color* rgba)
(define-extern *profile-update-actors-color* rgba)
(define-extern *profile-menu-hook-color* rgba)
(define-extern *profile-texture-color* rgba)
(define-extern *profile-effects-color* rgba)
(define-extern *profile-sprite-color* rgba)
(define-extern *profile-merc-color* rgba)
(define-extern *profile-actors-color* rgba)
(define-extern *profile-collide-color* rgba)
(define-extern *profile-nav-color* rgba)
(define-extern *profile-camera-color* rgba)
(define-extern *profile-blit-color* rgba)
(define-extern *profile-hud-color* rgba)
(define-extern *profile-emerc-color* rgba)
(define-extern *profile-array* profile-array)
(define-extern *profile-collapse* profile-collapse)
(define-extern *profile-interrupt-segment* profile-segment-array)
(define-extern *profile-interrupt-start* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern dma-sync-hang (function dma-bank none))
(define-extern dma-sync-crash (function dma-bank none))
(define-extern dma-send (function dma-bank uint uint none))
(define-extern dma-send-chain (function dma-bank-source uint none))
(define-extern dma-send-chain-no-tte (function dma-bank-source uint none))
(define-extern dma-send-chain-no-flush (function dma-bank-source uint none))
(define-extern dma-send-to-spr (function uint uint uint symbol none))
(define-extern dma-send-to-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-send-from-spr (function uint uint uint symbol none))
(define-extern dma-send-from-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-initialize (function none))
(define-extern clear-vu0-mem (function none))
(define-extern clear-vu1-mem (function none))
(define-extern dump-vu1-mem (function none))
(define-extern dump-vu1-range (function uint uint symbol))
(define-extern reset-vif1-path (function none))
(define-extern ultimate-memcpy (function pointer pointer uint none))
(define-extern symlink2 (function none))
(define-extern symlink3 (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-buffer                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype dma-packet (structure)
  ((dma  dma-tag   :offset-assert 0)
   (vif0 vif-tag   :offset-assert 8)
   (vif1 vif-tag   :offset-assert 12)
   (quad uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-packet-array (inline-array-class)
  ((data dma-packet :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-gif (structure)
  ((gif  uint64 2  :offset-assert 0)
   (quad uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-gif-packet (structure)
  ((dma-vif dma-packet :inline :offset-assert 0)
   (gif     uint64     2       :offset-assert 16)
   ;; added these two
   (gif0    uint64 :offset 16)
   (gif1    uint64 :offset 24)
   (quad    uint128    2       :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype dma-buffer (basic)
  ((allocated-length int32     :offset-assert 4)
   (base             pointer   :offset-assert 8)
   (end              pointer   :offset-assert 12)
   (data             uint64  1 :offset-assert 16)
   (data-buffer      uint8    :dynamic :offset 16) ;; added
   )
  (:methods
   (new (symbol type int) _type_  0)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )


(define-extern dma-buffer-inplace-new (function dma-buffer int dma-buffer))
(define-extern dma-buffer-length (function dma-buffer int))
(define-extern dma-buffer-free (function dma-buffer int))
(define-extern dma-buffer-add-vu-function (function dma-buffer vu-function int symbol))
(define-extern dma-buffer-send (function dma-bank dma-buffer none))
(define-extern dma-buffer-send-chain (function dma-bank-source dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-bucket                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern dma-buffer-add-buckets (function dma-buffer int (inline-array dma-bucket)))
(define-extern dma-buffer-patch-buckets (function (inline-array dma-bucket) int (inline-array dma-bucket)))
(define-extern dma-bucket-insert-tag (function (inline-array dma-bucket) bucket-id pointer (pointer dma-tag) pointer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-disasm                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vif-disasm-element (structure)
  ((mask    uint32      :offset-assert 0)
   (tag     vif-cmd-32  :offset-assert 4) ;; guessed by decompiler
   (val     uint32      :offset-assert 8)
   (print   uint32      :offset-assert 12)
   (string1 string      :offset-assert 16) ;; guessed by decompiler
   (string2 string      :offset-assert 20) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define-extern *vif-disasm-table* (array vif-disasm-element))
(define-extern disasm-vif-details (function symbol (pointer uint8) vif-cmd int symbol))
(define-extern disasm-vif-tag (function (pointer vif-tag) int symbol symbol int))
(define-extern disasm-dma-tag (function dma-tag symbol none))
(define-extern *dma-disasm* symbol)
(define-extern disasm-dma-list (function dma-packet symbol symbol symbol int symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pad                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum pad-buttons
    :bitfield #t
    :type uint32
    (select   0)
    (l3       1)
    (r3       2)
    (start    3)
    (up       4)
    (right    5)
    (down     6)
    (left     7)
    (l2       8)
    (r2       9)
    (l1       10)
    (r1       11)
    (triangle 12)
    (circle   13)
    (x        14)
    (square   15)
    )

(deftype scf-time (structure)
  ((stat   uint8  :offset-assert 0)
   (second uint8  :offset-assert 1)
   (minute uint8  :offset-assert 2)
   (hour   uint8  :offset-assert 3)
   (week   uint8  :offset-assert 4)
   (day    uint8  :offset-assert 5)
   (month  uint8  :offset-assert 6)
   (year   uint8  :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype hw-cpad (basic)
  ((valid   uint8     :offset-assert 4)
   (status  uint8     :offset-assert 5)
   (button0 uint16    :offset-assert 6)
   (rightx  uint8     :offset-assert 8)
   (righty  uint8     :offset-assert 9)
   (leftx   uint8     :offset-assert 10)
   (lefty   uint8     :offset-assert 11)
   (abutton uint8  12 :offset-assert 12)
   (dummy   uint8  12 :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype cpad-info (hw-cpad)
  ((number             int32         :offset-assert 36)
   (cpad-file          int32         :offset-assert 40)
   (button0-abs        pad-buttons 3 :offset-assert 44) ;; guessed by decompiler
   (button0-shadow-abs pad-buttons 1 :offset-assert 56) ;; guessed by decompiler
   (button0-rel        pad-buttons 3 :offset-assert 60) ;; guessed by decompiler
   (stick0-dir         float         :offset-assert 72)
   (stick0-speed       float         :offset-assert 76)
   (new-pad            int32         :offset-assert 80)
   (state              int32         :offset-assert 84)
   (align              uint8       6 :offset-assert 88) ;; guessed by decompiler
   (direct             uint8       6 :offset-assert 94) ;; guessed by decompiler
   (buzz-val           uint8       2 :offset-assert 100) ;; guessed by decompiler
   (buzz-pause-val     uint8       1 :offset-assert 102)
   (buzz-pause-time    uint8         :offset-assert 103)
   (buzz-time          time-frame  2 :offset-assert 104) ;; guessed by decompiler
   (buzz               basic         :offset-assert 120)
   (buzz-act           int32         :offset-assert 124)
   (change-time        time-frame        :offset-assert 128) ;; time-frame
   (old-rightx         uint8       2 :offset-assert 136)
   (old-righty         uint8       2 :offset-assert 138)
   (old-leftx          uint8       2 :offset-assert 140)
   (old-lefty          uint8       2 :offset-assert 142)
   )
  :method-count-assert 10
  :size-assert         #x90
  :flag-assert         #xa00000090
  (:methods
    (new (symbol type int) _type_ 0)
    (invert-analog-if-needed (_type_) none 9)
    )
  )

(deftype cpad-list (basic)
  ((num-cpads int32       :offset-assert 4)
   (cpads     cpad-info 2 :offset-assert 8)
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mouse-info (basic)
  ((active symbol :offset-assert 4)
   (cursor basic :offset-assert 8)
   (valid symbol :offset-assert 12)
   (id uint8 :offset-assert 16)
   (status uint16 :offset-assert 18)
   (button0 uint16 :offset-assert 20)
   (deltax int8 :offset-assert 22)
   (deltay int8 :offset-assert 23)
   (wheel uint8 :offset-assert 24)
   (change-time time-frame :offset-assert 32)
   (button0-abs uint32 3 :offset-assert 40)
   (button0-shadow-abs uint32 1 :offset-assert 52)
   (button0-rel uint32 3 :offset-assert 56)
   (pos vector 2 :inline :offset-assert 80)
   (posx float :offset 80)
   (posy float :offset 84)
   (oldposx float :offset 96 :do-not-decompile)
   (oldposy float :offset 100)
   (speedx float :offset 92)
   (speedy float :offset 108)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(define-extern *cheat-mode* symbol)
(define-extern cpad-invalid! (function cpad-info cpad-info))
(define-extern analog-input (function int float float float float float))
(define-extern cpad-set-buzz! (function cpad-info int int time-frame none))
(define-extern *cpad-list* cpad-list)
(define-extern *cpad-debug* symbol)
(define-extern service-cpads (function cpad-list))
(define-extern buzz-stop! (function int none))
(define-extern *mouse* mouse-info)
(define-extern service-mouse (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gs                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum gs-psm
    :bitfield #f
    :type uint8
    (ct32 0)
    (ct24 1)
    (ct16 2)
    (ct16s 10)
    (mt8 19)
    (mt4 20)
    (mt8h 27)
    (mt4hl 36)
    (mt4hh 44)
    (mz32 48)
    (mz24 49)
    (mz16 50)
    (mz16s 58)
    )

(defenum gs-reg
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (tex1-1 20)
  (tex1-2 21)
  (tex2-1 22)
  (tex2-2 23)
  (xyoffset-1 24)
  (xyoffset-2 25)
  (prmodecont 26)
  (prmode 27)
  (texclut 28)
  (scanmsk 34)
  (miptbp1-1 52)
  (miptbp1-2 53)
  (miptbp2-1 54)
  (miptbp2-2 55)
  (texa 59)
  (fogcol 61)
  (texflush 63)
  (scissor-1 64)
  (scissor-2 65)
  (alpha-1 66)
  (alpha-2 67)
  (dimx 68)
  (dthe 69)
  (colclamp 70)
  (test-1 71)
  (test-2 72)
  (pabe 73)
  (fba-1 74)
  (fba-2 75)
  (frame-1 76)
  (frame-2 77)
  (zbuf-1 78)
  (zbuf-2 79)
  (bitbltbuf 80)
  (trxpos 81)
  (trxreg 82)
  (trxdir 83)
  (hwreg 84)
  (signal 96)
  (finish 97)
  (label 98)
  )

(defenum gs-reg64
  :type uint64
  :copy-entries gs-reg
  )

(defenum gs-reg32
  :type uint32
  :copy-entries gs-reg
  )

(defenum gs-prim-type
  :type uint8
  (point 0)
  (line 1)
  (line-strip 2)
  (tri 3)
  (tri-strip 4)
  (tri-fan 5)
  (sprite 6)
  )


(deftype gs-pmode (uint64)
  ((en1    uint8 :offset 0 :size 1)
   (en2    uint8 :offset 1 :size 1)
   (crtmd  uint8 :offset 2 :size 3)
   (mmod   uint8 :offset 5 :size 1)
   (amod   uint8 :offset 6 :size 1)
   (slbg   uint8 :offset 7 :size 1)
   (alp    uint8 :offset 8 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-smode2 (uint64)
  ((int   uint8 :offset 0 :size 1)
   (ffmd  uint8 :offset 1 :size 1)
   (dpms  uint8 :offset 2 :size 2)
   )
  :flag-assert #x900000008
  )

(deftype gs-display-fb (uint64)
  ((fbp  uint16 :offset 0  :size 9)
   (fbw  uint8  :offset 9  :size 6)
   (psm  gs-psm :offset 15 :size 5)
   (dbx  uint16 :offset 32 :size 11)
   (dby  uint16 :offset 43 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's DISPLAY registers make settings for the display position on the screen regarding
;; information on Rectangular Area Read Output Circuit n for the PCRTC.
;; write-only
(deftype gs-display (uint64)
  ((dx    uint16 :offset 0  :size 12)
   (dy    uint16 :offset 12 :size 11)
   (magh  uint8  :offset 23 :size 4)
   (magv  uint8  :offset 27 :size 2)
   (dw    uint16 :offset 32 :size 12)
   (dh    uint16 :offset 44 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's BGCOLOR register sets the background color of the PCRTC with RGB value.
;; write-only
(deftype gs-bgcolor (uint64)
  ((r  uint8 :offset 0)
   (g  uint8 :offset 8)
   (b  uint8 :offset 16)
   )
  :flag-assert #x900000008
  )

;; the GS's CSR register sets and obtains various GS statuses.
;; read-write. the fields have different effects depending on whether they're being read from
;; or written to.
;; bits 5 and 6 (0x20 and 0x40) should be zero
(deftype gs-csr (uint64)
  ((signal  uint8 :offset 0  :size 1)
   (finish  uint8 :offset 1  :size 1)
   (hsint   uint8 :offset 2  :size 1)
   (vsint   uint8 :offset 3  :size 1)
   (edwint  uint8 :offset 4  :size 1)
   (flush   uint8 :offset 8  :size 1)
   (reset   uint8 :offset 9  :size 1)
   (nfield  uint8 :offset 12 :size 1)
   (field   uint8 :offset 13 :size 1)
   (fifo    uint8 :offset 14 :size 2)
   (rev     uint8 :offset 16 :size 8)
   (id      uint8 :offset 24 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-bank (structure)
  ((pmode    gs-pmode  :offset-assert 0)
   (smode2   gs-smode2  :offset 32)
   (dspfb1   gs-display-fb  :offset 112)
   (display1 gs-display  :offset 128)
   (dspfb2   gs-display-fb  :offset 144)
   (display2 gs-display  :offset 160)
   (extbuf   uint64  :offset 176)
   (extdata  uint64  :offset 192)
   (extwrite uint64  :offset 208)
   (bgcolor  gs-bgcolor  :offset 224)
   (csr      gs-csr   :offset 4096)
   (imr      uint64  :offset 4112)
   (busdir   uint64  :offset 4160)
   )
  :method-count-assert 9
  :size-assert         #x1048
  :flag-assert         #x900001048
  )

(deftype gs-frame (uint64)
  ((fbp    uint16 :offset 0  :size 9)
   (fbw    uint8  :offset 16 :size 6)
   (psm    gs-psm :offset 24 :size 6)
   (fbmsk  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )


;; the GS's ZBUF registers make various settings regarding Z buffer.
(deftype gs-zbuf (uint64)
  ((zbp   uint16 :offset 0  :size 9)
   (psm   gs-psm :offset 24 :size 4)
   (zmsk  uint8  :offset 32 :size 1)
   )
  :flag-assert #x900000008
  )

;; the GS's XYOFFSET registers set the offset value for converting from the primitive coordinate
;; system to the window coordinate system.
(deftype gs-xy-offset (uint64)
  ((ofx  uint16 :offset 0  :size 16)
   (ofy  uint16 :offset 32 :size 16)
   )
  :flag-assert #x900000008
  )

;; the GS's SCISSOR registers specify the scissoring area.  The coordinate values for
;; the upper-left/lower-right points of the enabled drawing area are specified by the window
;; coordinate system.
(deftype gs-scissor (uint64)
  ((scax0  uint16 :offset 0  :size 11)
   (scax1  uint16 :offset 16 :size 11)
   (scay0  uint16 :offset 32 :size 11)
   (scay1  uint16 :offset 48 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's PRMODECONT register sets whether to use primitive attributes (IIP, TME, FGE, ABE,
;; AA1, FST, CTXT, FIX) specified by the PRMODE register or the PRIM register.
(deftype gs-prmode-cont (uint64)
  ((ac  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

;; the GS's COLCLAMP register stores settings as to whether clamping for the RGB value of the
;; pixel is performed.
(deftype gs-color-clamp (uint64)
  ((clamp  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

;; the GS's DTHE register stores settings for dithering (performed/not performed).
(deftype gs-dthe (uint64)
  ((dthe  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

(defenum gs-atest
  :type uint8
  (never 0)
  (always 1)
  (less 2)
  (less-equal 3)
  (equal 4)
  (greater-equal 5)
  (greater 6)
  (not-equal 7)
  )
(defenum gs-ztest
  :type uint8
  (never 0)
  (always 1)
  (greater-equal 2)
  (greater 3)
  )
;; the GS's TEST register performs settings related to the pixel test.
(deftype gs-test (uint64)
  ((ate    uint8 :offset 0  :size 1) ;; alpha test enable
   (atst   gs-atest :offset 1  :size 3) ;; alpha test method
   (aref   uint8 :offset 4  :size 8) ;; alpha val reference
   (afail  uint8 :offset 12 :size 2) ;; processing method on alpha test fail
   (date   uint8 :offset 14 :size 1) ;; dest alpha test enable
   (datm   uint8 :offset 15 :size 1) ;; dest alpha test mode
   (zte    uint8 :offset 16 :size 1) ;; depth test enable
   (ztst   gs-ztest :offset 17 :size 2) ;; depth test method
   )
  :flag-assert #x900000008
  )

(deftype gs-prim (uint64)
  ((prim  gs-prim-type :offset 0  :size 3)
   (iip   uint8        :offset 3  :size 1)
   (tme   uint8        :offset 4  :size 1)
   (fge   uint8        :offset 5  :size 1)
   (abe   uint8        :offset 6  :size 1)
   (aa1   uint8        :offset 7  :size 1)
   (fst   uint8        :offset 8  :size 1)
   (ctxt  uint8        :offset 9  :size 1)
   (fix   uint8        :offset 10 :size 1)
   )
  :flag-assert #x900000008
  )

;; gap!
;; the GS's RGBAQ register sets the RGBA value of the vertex and the Q value of the normalized
;; texture coordinates.
(deftype gs-rgbaq (uint64)
  ((r  uint8 :offset 0  :size 8)
   (g  uint8 :offset 8  :size 8)
   (b  uint8 :offset 16 :size 8)
   (a  uint8 :offset 24 :size 8) ;; 0x80 --> 1.0
   (q  float :offset 32 :size 32) ;; affects some LOD behavior apparently?
   )
  :flag-assert #x900000008
  )

;; GS XYZ registers
(deftype gs-xyz (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

;; the GS's UV register specifies the texel coordinate (UV) values of the vertex.
(deftype gs-uv (uint64)
  ((u  uint16 :offset 0  :size 14) ;; Q4 fixed point
   (v  uint16 :offset 16 :size 14) ;; Q4 fixed point
   )
  :flag-assert #x900000008
  )

;; the GS's ST register sets the S and T values of the vertex texture coordinates.
;; The value Q is specified by the RGBAQ register.
(deftype gs-st (uint64)
  ((s  float :offset 0  :size 32)
   (t  float :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

;; GS XYZF registers
(deftype gs-xyzf (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 24)
   (f  uint8  :offset 56 :size 8) ;; fog coeff
   )
  :flag-assert #x900000008
  )

;; the GS's TRXPOS register specifies the position and scanning direction of the rectangular area
;; in each buffer where buffer transmission is performed.
(deftype gs-trxpos (uint64)
  ((ssax  uint16 :offset 0  :size 11)
   (ssay  uint16 :offset 16 :size 11)
   (dsax  uint16 :offset 32 :size 11)
   (dsay  uint16 :offset 48 :size 11)
   (dir   uint8 :offset 59 :size 2)
   )
  :flag-assert #x900000008
  )

;; the GS's TRXREG register specifies the size of the rectangular area, where the transmission
;; between buffers is implemented, in units of pixels.
;; The pixel mode must be the one set by the BITBLTBUF register.
(deftype gs-trxreg (uint64)
  ((rrw  uint16 :offset 0  :size 12)
   (rrh  uint16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

;; the GS's TRXDIR register specifies the transmission direction in the transmission between
;; buffers, and activates transmission.
;; Appropriate settings must be made by the BITBLTBUF/TRXPOS/TRXREG before activating
;; the transmission.
(deftype gs-trxdir (uint64)
  ((xdir  uint8 :offset 0 :size 2))
  :flag-assert #x900000008
  )

;; the GS's BITBLTBUF register stores buffer-related settings for transmission source and
;; destination during transmission between buffers.
(deftype gs-bitbltbuf (uint64)
  ((sbp   uint16 :offset 0  :size 14)
   (sbw   uint8  :offset 16 :size 6)
   (spsm  uint8  :offset 24 :size 6)
   (dbp   uint16 :offset 32 :size 14)
   (dbw   uint8  :offset 48 :size 6)
   (dpsm  uint8  :offset 56 :size 6)
   )
  :flag-assert #x900000008
  )

;; the GS's TEX0 registers set various kinds of information regarding the textures to be used.
(deftype gs-tex0 (uint64)
  ((tbp0  uint16 :offset 0 :size 14)
   (tbw   uint8  :offset 14 :size 6)
   (psm   uint8  :offset 20 :size 6)
   (tw    uint8  :offset 26 :size 4)
   (th    uint8  :offset 30 :size 4)
   (tcc   uint8  :offset 34 :size 1)
   (tfx   uint8  :offset 35 :size 2)
   (cbp   uint16 :offset 37 :size 14)
   (cpsm  uint8  :offset 51 :size 4)
   (csm   uint8  :offset 55 :size 1)
   (csa   uint8  :offset 56 :size 5)
   (cld   uint8  :offset 61 :size 3)
   )
  :flag-assert #x900000008
  )

;; the GS's TEX1 registers set information on the sampling method of the textures.
(deftype gs-tex1 (uint64)
  ((lcm   uint8 :offset 0  :size 1)
   (mxl   uint8 :offset 2  :size 3)
   (mmag  uint8 :offset 5  :size 1)
   (mmin  uint8 :offset 6  :size 3)
   (mtba  uint8 :offset 9  :size 1)
   (l     uint8 :offset 19 :size 2)
   (k     int16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

;; the GS's TEXA register sets the Alpha value to be referred to when the Alpha value of the
;; texture is not an 8-bit value.
(deftype gs-texa (uint64)
  ((ta0  uint8 :offset 0  :size 8)
   (aem  uint8 :offset 15 :size 1)
   (ta1  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

;; the GS's TEXCLUT register specifies the CLUT position in the buffer when the CLUT storage mode
;; is CSM=1 (CSM2 mode).
(deftype gs-texclut (uint64)
  ((cbw  uint8  :offset 0  :size 6)
   (cou  uint8  :offset 6  :size 6)
   (cov  uint16 :offset 12 :size 10)
   )
  :flag-assert #x900000008
  )

;; the GS's MIPTBP registers set the buffer pointer and buffer width of textures when performing
;; MIPMAP.
;; MIPTBP1 sets levels 1 to 3, MIPTBP2 sets levels 4 to 6.
(deftype gs-miptbp (uint64)
  ((tbp1  uint16 :offset 0  :size 14)
   (tbw1  uint8  :offset 14 :size 6)
   (tbp2  uint16 :offset 20 :size 14)
   (tbw2  uint8  :offset 34 :size 6)
   (tbp3  uint16 :offset 40 :size 14)
   (tbw3  uint8  :offset 54 :size 6)
   )
  :flag-assert #x900000008
  )

(deftype gs-adcmd (structure)
  ((word uint32 4  :offset-assert 0)
   (quad uint128   :offset        0)
   (data uint64    :offset        0)
   (cmds uint64    :offset        8)
   (cmd  uint8     :offset        8)
   (x    uint32    :offset        0)
   (y    uint32    :offset        4)
   (z    uint32    :offset        8)
   (w    uint32    :offset        12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-alpha (uint64)
  ((a    uint8 :offset 0  :size 2)
   (b    uint8 :offset 2  :size 2)
   (c    uint8 :offset 4  :size 2)
   (d    uint8 :offset 6  :size 2)
   (fix  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

(defenum gs-tex-wrap-mode
  :type uint8
  (repeat 0)
  (clamp 1)
  (region-clamp 2)
  (region-repeat 3)
  )

(deftype gs-clamp (uint64)
  ((wms   gs-tex-wrap-mode  :offset 0  :size 2)
   (wmt   gs-tex-wrap-mode  :offset 2  :size 2)
   (minu  uint16 :offset 4  :size 10)
   (maxu  uint16 :offset 14 :size 10)
   (minv  uint16 :offset 24 :size 10)
   (maxv  uint16 :offset 34 :size 10)
   )
  :flag-assert #x900000008
  )

(deftype gs-fog (uint64)
  ((f  uint8 :offset 56 :size 8))
  :flag-assert #x900000008
  )

(deftype gs-fogcol (uint64)
  ((fcr  uint8 :offset 0  :size 8)
   (fcg  uint8 :offset 8  :size 8)
   (fcb  uint8 :offset 16 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gif-ctrl (uint32)
  ((rst  uint8 :offset 0 :size 1)
   (pse  uint8 :offset 3 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-mode (uint32)
  ((m3r  uint8 :offset 0 :size 1)
   (imt  uint8 :offset 2 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-stat (uint32)
  ((m3r    uint8 :offset 0  :size 1)
   (m3p    uint8 :offset 1  :size 1)
   (imt    uint8 :offset 2  :size 1)
   (pse    uint8 :offset 3  :size 1)
   (ip3    uint8 :offset 5  :size 1)
   (p3q    uint8 :offset 6  :size 1)
   (p2q    uint8 :offset 7  :size 1)
   (p1q    uint8 :offset 8  :size 1)
   (oph    uint8 :offset 9  :size 1)
   (apath  uint8 :offset 10 :size 2)
   (dir    uint8 :offset 12 :size 1)
   (fqc    uint8 :offset 24 :size 5)
   )
  :flag-assert #x900000004
  )

(deftype gif-cnt (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (regcnt   uint8  :offset 16 :size 4)
   (vuaddr   uint16 :offset 20 :size 10)
   )
  :flag-assert #x900000004
  )

(deftype gif-p3cnt (uint32)
  ((p3cnt  uint16 :offset 0 :size 15))
  :flag-assert #x900000004
  )

(deftype gif-p3tag (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (eop      uint8  :offset 15 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-bank (structure)
  ((ctrl  gif-ctrl  :offset 0)
   (mode  gif-mode  :offset 16)
   (stat  gif-stat  :offset 32)
   (tag0  uint32  :offset 64)
   (tag1  uint32  :offset 80)
   (tag2  uint32  :offset 96)
   (tag3  uint32  :offset 112)
   (cnt   gif-cnt  :offset 128)
   (p3cnt gif-p3cnt  :offset 144)
   (p3tag gif-p3tag  :offset 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

(deftype gif-tag-prim (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype gif-tag-count (uint32)
  ()
  :flag-assert #x900000004
  )

(defenum gif-reg-id
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (a+d 14)
  (nop 15)
  )

(defenum gif-flag
  :type uint8
  (packed 0)
  (reg-list 1)
  (image 2)
  (disable 3)
  )

(deftype gif-tag64 (uint64)
  ((nloop   uint16  :offset 0   :size 15)
   (eop     uint8   :offset 15  :size 1)
   (id      uint16  :offset 32  :size 14)
   (pre     uint8   :offset 46  :size 1)
   (prim    gs-prim :offset 47  :size 11)
   (flg     gif-flag   :offset 58  :size 2)
   (nreg    uint8   :offset 60  :size 4))
  :flag-assert #x900000008
  )
(deftype gif-tag (uint128)
  ((nloop   uint16 :offset 0   :size 15)
   (eop     uint8  :offset 15  :size 1)
   (id      uint16 :offset 32  :size 14)
   (pre     uint8  :offset 46  :size 1)
   (prim    uint16 :offset 47  :size 11)
   (flg     gif-flag  :offset 58  :size 2)
   (nreg    uint8  :offset 60  :size 4)
   (regs0   gif-reg-id :offset 64  :size 4)
   (regs1   gif-reg-id :offset 68  :size 4)
   (regs2   gif-reg-id :offset 72  :size 4)
   (regs3   gif-reg-id :offset 76  :size 4)
   (regs4   gif-reg-id :offset 80  :size 4)
   (regs5   gif-reg-id :offset 84  :size 4)
   (regs6   gif-reg-id :offset 88  :size 4)
   (regs7   gif-reg-id :offset 92  :size 4)
   (regs8   gif-reg-id :offset 96  :size 4)
   (regs9   gif-reg-id :offset 100 :size 4)
   (regs10  gif-reg-id :offset 104 :size 4)
   (regs11  gif-reg-id :offset 108 :size 4)
   (regs12  gif-reg-id :offset 112 :size 4)
   (regs13  gif-reg-id :offset 116 :size 4)
   (regs14  gif-reg-id :offset 120 :size 4)
   (regs15  gif-reg-id :offset 124 :size 4)
   )
  :flag-assert #x900000010
  )

(deftype gif-tag-regs (uint64)
  ((regs0   gif-reg-id :offset 0  :size 4)
   (regs1   gif-reg-id :offset 4  :size 4)
   (regs2   gif-reg-id :offset 8  :size 4)
   (regs3   gif-reg-id :offset 12  :size 4)
   (regs4   gif-reg-id :offset 16  :size 4)
   (regs5   gif-reg-id :offset 20  :size 4)
   (regs6   gif-reg-id :offset 24  :size 4)
   (regs7   gif-reg-id :offset 28  :size 4)
   (regs8   gif-reg-id :offset 32  :size 4)
   (regs9   gif-reg-id :offset 36 :size 4)
   (regs10  gif-reg-id :offset 40 :size 4)
   (regs11  gif-reg-id :offset 44 :size 4)
   (regs12  gif-reg-id :offset 48 :size 4)
   (regs13  gif-reg-id :offset 52 :size 4)
   (regs14  gif-reg-id :offset 56 :size 4)
   (regs15  gif-reg-id :offset 60 :size 4)
   )
  )

(deftype gs-gif-tag (structure)
  ((qword uint128   :offset-assert 0 :score -1) ;; is "qword" and inline? in game

   (tag   gif-tag64    :offset 0)
   (regs  gif-tag-regs :offset 8)

   (dword uint64 2     :offset 0)
   (word  uint32 4     :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


; (deftype dma-gif-packet (structure)
;   ((dma-vif dma-packet :inline :offset-assert 0)
;    (gif     uint64     2       :offset-assert 16)
;    ;; added these two
;    (gif0    gif-tag64 :offset 16 :score 1)
;    (gif1    gif-tag-regs :offset 24 :score 1)
;    (quad    uint128    2       :offset        0)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )


(deftype gif-packet (basic)
  ((reg-count int32     :offset-assert 4)

   (gif-tag   gs-gif-tag :inline :offset-assert 16) ;; note- added
   (gif-tag0  uint128   :offset 16)
   (args      uint64 1 :offset-assert 32)
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-context (basic)
  ((orgx   int32  :offset-assert 4)
   (orgy   int32  :offset-assert 8)
   (orgz   int32  :offset-assert 12)
   (width  int32  :offset-assert 16)
   (height int32  :offset-assert 20)
   (color  rgba    4 :offset-assert 24)
   )
  (:methods
    (new (symbol type int int int int rgba) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  ;; Failed to read some fields.
  )

(deftype gs-packed-rgba (vector4w)
  ((r int32  :offset 0)
   (g int32  :offset 4)
   (b int32  :offset 8)
   (a int32  :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-xyzw (vector)
  ((ix   int32     :offset 0)
   (iy   int32     :offset 4)
   (iz   int32     :offset 8)
   (iw   int32     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-stq (vector)
  ((tex-s float     :offset 0)
   (tex-t float     :offset 4)
   (tex-q float     :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-uv (vector)
  ((u    int16     :offset 0)
   (v    int16     :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-gt (structure)
  ((stq  gs-packed-stq  :inline :offset 0)
   (rgba gs-packed-rgba :inline :offset 16)
   (xyzw gs-packed-xyzw :inline :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype gs-packed-gt4 (structure)
  ((data gs-packed-gt 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(define-extern psm-size (function gs-psm int))
(define-extern psm-page-height (function gs-psm int))
(define-extern psm->string (function gs-psm string))
(define-extern *fog-color* rgba)
(define-extern open-gif-packet (function gif-packet gif-packet))
(define-extern add-reg-gif-packet (function gif-packet int int none))
(define-extern close-gif-packet (function gif-packet int gif-packet))
(define-extern draw-context-set-xy (function draw-context int int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype display-frame (basic)
  ((buffer        dma-buffer    11          :offset-assert 4) ;; guessed by decompiler
   (calc-buf      dma-buffer                :offset 8)
   (vu1-buf       dma-buffer                :offset 8)
   (debug-buf     dma-buffer                :offset 36)
   (global-buf    dma-buffer                :offset 40)
   (bucket-group  (inline-array dma-bucket) :offset 44)
   (profile-array profile-array :inline     :offset-assert 48)
   (start-time    time-frame                :offset-assert 56)
   (run-time      time-frame                :offset-assert 64) ;; int64
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype display (basic)
  ((on-screen            int32             :offset-assert 4)
   (last-screen          int32             :offset-assert 8)
   (frames               display-frame 2   :offset-assert 12)
   (bgcolor              uint64            :offset-assert 24)
   (pmode                gs-pmode          :offset-assert 32)
   (clock                clock         13  :offset-assert 40)
   (session-clock        clock             :offset        40)
   (game-clock           clock             :offset        44)
   (base-clock           clock             :offset        48)
   (real-clock           clock             :offset        52)
   (frame-clock          clock             :offset        56)
   (real-frame-clock     clock             :offset        60)
   (target-clock         clock             :offset        64)
   (entity-clock         clock             :offset        68)
   (part-clock           clock             :offset        72)
   (bg-clock             clock             :offset        76)
   (camera-clock         clock             :offset        80)
   (user0-clock          clock             :offset        84)
   (total-game-clock     clock             :offset        88)
   (time-factor          float             :offset-assert 92)
   (dog-ratio            float             :offset-assert 96)
   (vblank-start-time    time-frame        2   :offset-assert 104)
   (total-run-time       time-frame            :offset-assert 120)
   (run-half-speed       basic             :offset-assert 128)
   (dog-count            float             :offset-assert 132)
   (vu1-enable-user      vu1-renderer-mask :offset-assert 136)
   (vu1-enable-user-menu vu1-renderer-mask :offset-assert 144)
   (force-sync           uint32            :offset-assert 152)
   )
  :method-count-assert 10
  :size-assert         #x9c
  :flag-assert         #xa0000009c
  (:methods
    (new (symbol type int int int int int) _type_ 0)
    (set-time-ratios (_type_ float) float 9)
    )
  )

(define-extern *pre-draw-hook* (function object none))
(define-extern *post-draw-hook* (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; geometry                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern vector-flatten! (function vector vector vector vector))
(define-extern vector-reflect! (function vector vector vector vector))
(define-extern vector-reflect-flat! (function vector vector vector vector))
(define-extern vector-reflect-flat-above! (function vector vector vector vector))
(define-extern vector-reflect-flat-gravity! (function vector vector vector vector vector))
(define-extern vector-segment-distance-point! (function vector vector vector vector float))
(define-extern vector-line-distance (function vector vector vector float))
(define-extern vector-line-distance-point! (function vector vector vector vector float))
(define-extern vector-segment-overlap (function vector vector vector float))
(define-extern line-sphere-intersection? (function vector vector vector symbol))
(define-extern vector-orient-by-quat! (function vector vector quaternion vector))
(define-extern vector-inv-orient-by-quat! (function vector vector quaternion vector))
(define-extern forward-down->inv-matrix (function matrix vector vector matrix))
(define-extern forward-down-nopitch->inv-matrix (function matrix vector vector matrix))
(define-extern forward-up->inv-matrix (function matrix vector vector matrix))
(define-extern forward-up-nopitch->inv-matrix (function matrix vector vector matrix))
(define-extern forward-up-nopitch->quaternion (function quaternion vector vector quaternion))
(define-extern forward-up->quaternion (function quaternion vector vector quaternion))
(define-extern quaternion-from-two-vectors! (function quaternion vector vector quaternion))
(define-extern quaternion-from-two-vectors-partial! (function quaternion vector vector float quaternion))
(define-extern quaternion-from-two-vectors-max-angle! (function quaternion vector vector float quaternion))
(define-extern quaternion-from-two-vectors-max-angle-partial! (function quaternion vector vector float float quaternion))
(define-extern matrix-from-two-vectors! (function matrix vector vector matrix))
(define-extern matrix-from-two-vectors-max-angle! (function matrix vector vector float matrix))
(define-extern matrix-from-two-vectors-smooth! (function matrix vector vector float int matrix))
(define-extern matrix-from-two-vectors-the-long-way-smooth! (function matrix vector vector float int matrix))
(define-extern quaternion-from-two-vectors-smooth! (function quaternion vector vector float int quaternion))
(define-extern matrix-from-two-vectors-max-angle-partial! (function matrix vector vector float float matrix))
(define-extern matrix-from-two-vectors-partial-linear! (function matrix vector vector float matrix))
(define-extern matrix-remove-z-rot (function matrix vector matrix))
(define-extern matrix-rot-diff! (function vector matrix matrix float))
(define-extern quaternion-seek (function quaternion quaternion quaternion float float quaternion))
(define-extern vector-deg-seek (function vector vector vector float vector))
(define-extern vector-deg-slerp (function vector vector vector float vector))
(define-extern vector-vector-deg-slerp! (function vector vector vector float vector vector))
(define-extern normal-of-plane (function vector vector vector vector vector))
(define-extern vector-3pt-cross! (function vector vector vector vector vector))
(define-extern closest-pt-in-triangle (function vector vector matrix vector none))
(define-extern point-in-triangle-cross (function vector vector vector vector vector symbol))
(define-extern point-in-plane-<-point+normal! (function vector vector vector vector))
(define-extern circle-circle-xz-intersect (function sphere sphere vector vector int))
(define-extern circle-test (function none))
(define-extern vector-circle-tangent-new (function vector vector vector vector none))
(define-extern vector-circle-tangent (function vector vector vector vector none))
(define-extern find-knot-span (function int int float (inline-array vector) int))
(define-extern calculate-basis-functions-vector! (function vector int float (pointer float) vector))
(define-extern curve-evaluate! (function vector float (inline-array vector) int (pointer float) int vector))
(define-extern curve-get-pos! (function vector float curve vector))
(define-extern curve-length (function curve float))
(define-extern curve-copy! (function curve curve curve))
(define-extern curve-closest-point (function curve vector float float int float float))
(define-extern vector-plane-distance (function vector plane vector float))
(define-extern intersect-ray-plane (function vector vector vector vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; timer                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern timer-count (function timer-bank uint))
(define-extern disable-irq (function none))
(define-extern enable-irq (function none))
(define-extern stopwatch-init (function stopwatch int))
(define-extern stopwatch-reset (function stopwatch int))
(define-extern stopwatch-start (function stopwatch int))
(define-extern stopwatch-stop (function stopwatch none))
(define-extern stopwatch-begin (function stopwatch int))
(define-extern stopwatch-end (function stopwatch none))
(define-extern stopwatch-elapsed-ticks (function stopwatch time-frame))
(define-extern stopwatch-elapsed-seconds (function stopwatch float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vector                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern vector-cross! (function vector vector vector vector))
(define-extern vector-xz-cross! (function vector vector vector vector))
(define-extern vector+float! (function vector vector float vector))
(define-extern vector*! (function vector vector vector vector))
(define-extern vector+*! (function vector vector vector float vector))
(define-extern vector-*! (function vector vector vector float vector))
(define-extern vector/! (function vector vector vector vector))
(define-extern vector-float*! (function vector vector float vector))
(define-extern vector-average! (function vector vector vector vector))
(define-extern vector+float*! (function vector vector vector float vector))
(define-extern vector--float*! (function vector vector vector float vector))
(define-extern vector-float/! (function vector vector float vector))
(define-extern vector-negate! (function vector vector vector))
(define-extern vector-negate-in-place! (function vector vector))
(define-extern vector= (function vector vector symbol))
(define-extern vector-delta (function vector vector float))
(define-extern vector-seek! (function vector vector float vector))
(define-extern vector-smooth-seek! (function vector vector float vector))
(define-extern vector-seek-2d-xz-smooth! (function vector vector float float vector))
(define-extern vector-seek-2d-yz-smooth! (function vector vector float float vector))
(define-extern vector-seek-3d-smooth! (function vector vector float float vector))
(define-extern seek-with-smooth (function float float float float float float))
(define-extern vector-identity! (function vector vector))
(define-extern vector-seconds (function vector vector vector))
(define-extern vector-seconds! (function vector vector))
(define-extern vector-v! (function vector vector))
(define-extern vector-v+! (function vector vector vector vector))
(define-extern vector-v*float+! (function vector vector vector float vector))
(define-extern vector-v++! (function vector vector vector))
(define-extern vector-v*float! (function vector vector float vector))
(define-extern vector-v*float++! (function vector vector float vector))
(define-extern vector-to-ups! (function vector vector vector))
(define-extern vector-from-ups! (function vector vector vector))
(define-extern vector-length (function vector float))
(define-extern vector-length-squared (function vector float))
(define-extern vector-xz-length-squared (function vector float))
(define-extern vector-xz-length (function vector float))
(define-extern vector-vector-distance (function vector vector float))
(define-extern vector-vector-distance-squared (function vector vector float))
(define-extern vector-vector-xz-distance (function vector vector float))
(define-extern vector-vector-xy-distance (function vector vector float))
(define-extern vector-vector-xz-distance-squared (function vector vector float))
(define-extern vector-normalize! (function vector float vector))
(define-extern vector-normalize-ret-len! (function vector float float))
(define-extern vector-normalize-copy! (function vector vector float vector))
(define-extern vector-xz-normalize! (function vector float vector))
(define-extern vector-xz-normalize-copy! (function vector vector float vector))
(define-extern vector-length-max! (function vector float vector))
(define-extern vector-xz-length-max! (function vector float vector))
(define-extern vector-rotate-around-x! (function vector vector float vector))
(define-extern vector-rotate-around-y! (function vector vector float vector))
(define-extern vector-rotate90-around-y! (function vector vector vector))
(define-extern vector-rotate-around-z! (function vector vector float vector))
(define-extern rotate-y<-vector+vector (function vector vector float))
(define-extern rotate-x<-vector+vector (function vector vector float))
(define-extern rotate-z<-vector+vector (function vector vector float))
(define-extern vector-cvt.w.s! (function vector vector vector))
(define-extern vector-cvt.s.w! (function vector vector vector))
(define-extern rot-zxy-from-vector! (function vector vector vector))
(define-extern rot-zyx-from-vector! (function vector vector vector))
(define-extern vector-lerp! (function vector vector vector float vector))
(define-extern vector-lerp-clamp! (function vector vector vector float vector))
(define-extern vector4-lerp! (function vector vector vector float vector))
(define-extern vector4-lerp-clamp! (function vector vector vector float vector))
(define-extern vector-degi (function vector vector vector))
(define-extern vector-degf (function vector vector vector))
(define-extern vector-degmod (function vector vector vector))
(define-extern vector-deg-diff (function vector vector vector none))
(define-extern vector-deg-lerp-clamp! (function vector vector vector float vector))
(define-extern vector3s-copy! (function vector vector vector))
(define-extern vector3s+! (function vector vector vector vector))
(define-extern vector3s*float! (function vector vector float vector))
(define-extern vector3s-! (function vector vector vector vector))
(define-extern vector4-add! (function vector4 vector4 vector4 none))
(define-extern vector4-sub! (function vector4 vector4 vector4 none))
(define-extern vector4-mul! (function vector4 vector4 vector4 none))
(define-extern vector4-scale! (function vector4 vector4 float none))
(define-extern vector4-madd! (function vector4 vector4 vector4 float none))
(define-extern vector4-msub! (function vector4 vector4 vector4 float none))
(define-extern vector4-array-add! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-sub! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-mul! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-scale! (function (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-madd! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-msub! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-lerp! (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int symbol))
(define-extern spheres-overlap? (function sphere sphere symbol))
(define-extern sphere<-vector! (function sphere vector sphere))
(define-extern sphere<-vector+r! (function sphere vector float sphere))
(define-extern rand-vu-sphere-point! (function vector float vector))
(define-extern vector-vector-angle-safe (function vector vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; file-io                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum file-kind
    :bitfield #f
    (level-bt 0) ;; aka bsp-header.
    (art-group 1)
    (tpage 2)
    (dir-tpage 3)
    (level-vs 4)
    (tx 5)
    (vis 6)
    (map 7)
    )

(deftype file-stream (basic)
  ((flags uint32  :offset-assert 4)
   (mode  symbol  :offset-assert 8)
   (name  string  :offset-assert 12)
   (file  uint32  :offset-assert 16)
   )
  (:methods
    (new (symbol type string symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype file-info (basic)
  ((file-type      (pointer string)  :offset-assert 4) ;; guessed by decompiler
   (file-name      basic   :offset-assert 8)
   (major-version  uint32  :offset-assert 12)
   (minor-version  uint32  :offset-assert 16)
   (maya-file-name basic   :offset-assert 20)
   (tool-debug     basic   :offset-assert 24)
   (mdb-file-name  basic   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern file-stream-read-string (function file-stream string string))
(define-extern *file-temp-string* string)
(define-extern make-file-name (function file-kind string int symbol string))
(define-extern make-vfile-name (function file-kind string string))
(define-extern file-info-correct-version? (function file-info file-kind int symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; loader-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type art-group basic)
(define-extern art-group type)

(deftype load-dir (basic)
  ;; copied from jak1.
  ((lev level :offset-assert 4)
   (string-array (array string) :offset-assert 8) ;; these are the names
   (data-array (array basic) :score -50 :offset-assert 12) ;; this is the file data.
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  ;; Failed to read fields.
  (:methods
    (new (symbol type int level) _type_ 0)
    (load-to-heap-by-name (_type_ string symbol kheap int) art-group 9)
    (set-loaded-art (_type_ art-group) art-group 10)
    )
  )

(deftype load-dir-art-group (load-dir)
  ((art-group-array (array art-group) :offset 12)
   )
  :flag-assert #xb00000010
  (:methods
    (new (symbol type int level) _type_ 0)
    )
  )

(deftype external-art-buffer (basic)
  ((index                      int32                       :offset-assert 4)
   (other                      external-art-buffer         :offset-assert 8) ;; guessed by decompiler
   (status                     symbol                      :offset-assert 12) ;; guessed by decompiler
   (locked?                    symbol                      :offset-assert 16) ;; guessed by decompiler
   (login?                     symbol                      :offset-assert 20)
   (frame-lock                 symbol                      :offset-assert 24) ;; guessed by decompiler
   (init-heap                  (function external-art-buffer object)  :offset-assert 28)
   (heap                       kheap               :inline :offset-assert 32)
   (pending-load-file          string                      :offset-assert 48) ;; guessed by decompiler
   (pending-load-file-part     int32                       :offset-assert 52)
   (pending-load-file-owner    handle                      :offset-assert 56)
   (pending-load-file-priority float                       :offset-assert 64)
   (load-file                  string                      :offset-assert 68) ;; guessed by decompiler
   (load-file-part             int32                       :offset-assert 72)
   (load-file-owner            handle                      :offset-assert 80)
   (load-file-priority         float                       :offset-assert 88)
   (buf                        pointer                     :offset-assert 92) ;; guessed by decompiler
   (len                        int32                       :offset-assert 96)
   (art-group                  art-group                   :offset-assert 100) ;; guessed by decompiler
   (art-data                   uint32                      :offset 100)
   )
  :method-count-assert 16
  :size-assert         #x68
  :flag-assert         #x1000000068
  (:methods
    (new (symbol type int function symbol) _type_ 0)
    (set-pending-file (_type_ string int handle float) int 9)
    (update (_type_) int 10)
    (inactive? (_type_) symbol 11)
    (file-status (_type_ string int) symbol 12)
    (link-file (_type_ art-group) art-group 13)
    (unlink-file (_type_ art-group) int 14)
    (unlock! (_type_) int 15)
    )
  )

(deftype spool-anim (basic)
  ((name         string  :offset 16) ;; guessed by decompiler
   (anim-name    basic   :offset-assert 20)
   (buffer       external-art-buffer :offset 20 :score 10) ;; added
   (parts        int32   :offset-assert 24)
   (hint-id      int32   :offset 24)
   (priority     float   :offset-assert 28)
   (owner        handle  :offset-assert 32)
   (command-list pair    :offset-assert 40) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(declare-type process-drawable process)
(deftype external-art-control (basic)
  ((buffer                   external-art-buffer 2       :offset-assert 4) ;; guessed by decompiler
   (rec                      spool-anim          3 :inline      :offset-assert 16) ;; guessed by decompiler
   (spool-lock               handle                      :offset-assert 160)
   (reserve-buffer           external-art-buffer         :offset-assert 168)
   (reserve-buffer-count     int16                       :offset-assert 172)
   (dma-reserve-buffer-count int16                       :offset-assert 174)
   (active-stream            string                      :offset-assert 176)
   (queue-stream             (array spool-anim)          :offset-assert 180)
   (frame-mask               uint32                      :offset-assert 184)
   (dma-reserve-heap         kheap               :inline :offset-assert 192)
   )
  :method-count-assert 16
  :size-assert         #xd0
  :flag-assert         #x10000000d0
  (:methods
    (new (symbol type) _type_ 0)
    (update (_type_ symbol) int 9)
    (clear-rec (_type_) int 10)
    (spool-push (_type_ string int process float) int 11)
    (file-status (_type_ string int) symbol 12)
    (reserve-alloc (_type_) kheap 13)
    (reserve-free (_type_ kheap) int 14)
    (none-reserved? (_type_) symbol 15)
    )
  )


(deftype subtitle-range (basic)
  ((start-frame float :offset-assert 4)
   (end-frame   float :offset-assert 8)
   (message    object 8 :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  ;; Failed to read fields.
  )


(deftype subtitle-image (basic)
  ((width   uint16           :offset-assert 4)
   (height  uint16           :offset-assert 6)
   (palette rgba 16          :offset 16)
   (data    uint8 :dynamic   :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type texture-page basic)

(deftype texture-id (uint32)
  ((index  uint16 :offset 8  :size 12)
   (page   uint16 :offset 20 :size 12)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-pool-segment (structure)
  ((dest uint32  :offset-assert 0)
   (size uint32  :offset-assert 4)
   )
  :allow-misaligned
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype texture-pool (basic)
  ((top                      int32                                                        :offset-assert 4)
   (cur                      int32                                                        :offset-assert 8)
   (allocate-func            (function texture-pool texture-page kheap int texture-page)  :offset-assert 12) ;; guessed by decompiler
   (font-palette             int32                                                        :offset-assert 16)
   (segment                  texture-pool-segment    4 :inline       :offset-assert 20) ;; guessed by decompiler
   (segment-near             texture-pool-segment    :inline :offset 20)
   (segment-common           texture-pool-segment    :inline :offset 28)
   (common-page              texture-page            32      :offset-assert 52) ;; guessed by decompiler
   (common-page-mask         int32                           :offset-assert 180)
   (update-sprites-flag      symbol                          :offset-assert 184)
   (update-flag              symbol                          :offset-assert 188)
   (texture-enable-user      texture-enable-mask             :offset-assert 192)
   (texture-enable-user-menu texture-enable-mask             :offset-assert 200)
   (ids                      uint32                  128     :offset-assert 208) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x2d0
  :flag-assert         #x1a000002d0
  (:methods
    (new (symbol type) _type_ 0)
    (initialize! (_type_) _type_ 9)
    (print-usage (_type_) _type_ 10)
    (setup-font-texture (_type_) none 11)
    (allocate-defaults (_type_) none 12)
    (login-level-textures (_type_ level int (pointer texture-id)) none 13)
    (add-level-tpage-dma (_type_ level tpage-category bucket-id) none 14)
    (allocate-vram-words! (_type_ int) int 15)
    (allocate-segment (_type_ texture-pool-segment int) texture-pool-segment 16)
    (unload-page (_type_ texture-page) none 17)
    (get-common-page-slot-by-id (_type_ int) int 18)
    (update-warp-and-hud (_type_) none 19)
    (update-sprites (_type_) none 20)
    (mark-hud-warp-sprite-dirty (_type_) none 21)
    (lay-out-sprite-tex (_type_) none 22)
    (lay-out-hud-tex (_type_) none 23)
    (lay-out-warp-tex (_type_) none 24)
    (clear-ids (_type_) none 25)
    )
  )

(deftype texture-mask (structure)
  ((mask vector4w :inline :offset-assert 0)
   (dist float            :offset 12)
   (long uint64   2       :offset 0)
   (quad uint128          :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype texture-masks (structure)
  ((data texture-mask 3 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype texture-masks-array (inline-array-class)
  ((data texture-masks :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype texture (basic)
  ((w            int16                 :offset-assert 4)
   (h            int16                 :offset-assert 6)
   (num-mips     uint8                 :offset-assert 8)
   (tex1-control uint8                 :offset-assert 9)
   (psm          gs-psm                :offset-assert 10)
   (mip-shift    uint8                 :offset-assert 11)
   (clutpsm      uint16                :offset-assert 12)
   (dest         uint16        7       :offset-assert 14)
   (clutdest     uint16                :offset-assert 28)
   (width        uint8         7       :offset-assert 30)
   (name         string                :offset-assert 40)
   (size         uint32                :offset-assert 44)
   (uv-dist      float                 :offset-assert 48)
   (pad          uint32        3       :offset-assert 52)
   (masks        texture-masks :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype texture-page-segment (structure)
  ((block-data pointer  :offset-assert 0) ;; guessed by decompiler
   (size       uint32   :offset-assert 4)
   (dest       uint32   :offset-assert 8)
   )
  :allow-misaligned
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(defenum tex-upload-mode
  (none     -3)
  (seg0-1   -2)
  (seg0-1-2 -1)
  (seg0      0)
  (seg2      2)
  )

(deftype texture-page (basic)
  ((info      file-info                      :offset-assert 4)
   (name      string                         :offset-assert 8)
   (id        uint32                         :offset-assert 12)
   (length    int32                          :offset-assert 16)
   (mip0-size uint32                         :offset-assert 20)
   (size      uint32                         :offset-assert 24)
   (segment   texture-page-segment 3 :inline :offset-assert 28)
   (dram-size uint32                         :offset-assert 64)
   (pad       uint32               15        :offset-assert 68)
   (data      texture              :dynamic  :offset-assert 128)
   )
  :method-count-assert 14
  :size-assert         #x80
  :flag-assert         #xe00000080
  (:methods
    (relocate (_type_ kheap (pointer uint8)) texture-page :replace 7)
    (remove-data-from-heap (_type_ kheap) _type_ 9)
    (get-leftover-block-count (_type_ int int) int 10)
    (relocate-dests! (_type_ int int) none 11)
    (add-to-dma-buffer (_type_ dma-buffer tex-upload-mode) int 12)
    (upload-now! (_type_ tex-upload-mode) none 13)
    )
  )

(declare-type adgif-shader structure)
(deftype shader-ptr (uint32)
  ((shader uint32 :offset 8 :size 24))
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-link (structure)
  ((next shader-ptr  1 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-page-dir-entry (structure)
  ((length int16         :offset-assert 0)
   (status uint16        :offset-assert 2)
   (page   texture-page  :offset-assert 4)
   (link   texture-link  :offset-assert 8)
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-relocate-later (basic)
  ((memcpy symbol                  :offset-assert 4)
   (dest   uint32                  :offset-assert 8)
   (source uint32                  :offset-assert 12)
   (move   uint32                  :offset-assert 16)
   (entry  texture-page-dir-entry  :offset-assert 20)
   (page   texture-page            :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(defenum link-test-flags
  :type uint32
  :bitfield #t
  (needs-log-in 8)
  (bit-9 9)
  )


(deftype adgif-shader (structure)
  ((quad       qword           5 :inline  :offset-assert 0 :score -100)
   (prims      gs-reg64        10 :offset 0 :score -100)
   (reg-0      uint8              :offset 8)
   (reg-1      uint8              :offset 24)
   (reg-2      uint8              :offset 40 :score -1)
   (reg-3      uint8              :offset 56)
   (reg-4-u32  gs-reg32           :offset 72)
   (reg-4      uint8              :offset 72)
   (tex0       gs-tex0            :offset 0)
   (tex1       gs-tex1            :offset 16)
   (miptbp1    gs-miptbp          :offset 32)
   (clamp      gs-clamp           :offset 48)
   (clamp-reg  gs-reg64           :offset 56)
   (alpha      gs-alpha           :offset 64)
   (alpha-as-miptb2 gs-miptbp :offset 64)

   (link-test  link-test-flags    :offset 8)
   (texture-id texture-id         :offset 24)
   (next       shader-ptr         :offset 40)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype adgif-shader-array (inline-array-class)
  ((data adgif-shader :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype texture-base (structure)
  ((vram-page  uint32  :offset-assert 0)
   (vram-block uint32  :offset-assert 4)
   (vram-word  uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-page-translate-item (structure)
  ((bucket             bucket-id  :offset-assert 0)
   (level-index        uint32     :offset-assert 4)
   (level-texture-page tpage-category-u32     :offset-assert 8)
   (texture-user       texture-enable-mask-u32     :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype texture-page-dir (basic)
  ((length int32)
   (entries texture-page-dir-entry 1 :inline)
   )
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (unlink-shaders-in-heap (_type_ kheap) int 9)
    )
  :flag-assert #xa00000014
  )

(define-extern *texture-masks* texture-masks)
(define-extern *texture-masks-array* texture-masks-array)
(define-extern texture-mip->segment (function int int int))
(define-extern *texture-relocate-later* texture-relocate-later)
(define-extern *texture-page-dir* texture-page-dir)
(define-extern ct32-24-block-table (array int32))
(define-extern mz32-24-block-table (array int32))
(define-extern ct16-block-table (array int32))
(define-extern ct16s-block-table (array int32))
(define-extern mz16-block-table (array int32))
(define-extern mz16s-block-table (array int32))
(define-extern mt8-block-table (array int32))
(define-extern mt4-block-table (array int32))
(define-extern *texture-page-translate* (array texture-page-translate-item))
(define-extern *eyes-texture-base* texture-base)
(define-extern *skull-gem-texture-base* texture-base)
(define-extern *ocean-texture-base* texture-base)
(define-extern *ocean-envmap-texture-base* texture-base)
(define-extern *grey-scale-base* texture-base)
(define-extern *map-texture-base* texture-base)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype texture-anim-layer (structure)
  ((extra           vector  :inline :offset 240)
   (func            basic           :offset 256)
   (func-id         basic           :offset 256)
   (init-func       basic           :offset 260)
   (init-func-id    basic           :offset 260)
   (tex             basic           :offset 264)
   (start-time      float           :offset 268)
   (end-time        float           :offset 272)
   (tex-name        basic           :offset 276)
   (test            uint64          :offset 280)
   (alpha           uint64          :offset 288)
   (clamp           uint64          :offset 296)
   (start-color     vector  :inline :offset 80)
   (start-scale     vector2 :inline :offset 96)
   (start-offset    vector2 :inline :offset 104)
   (start-st-scale  vector2 :inline :offset 112)
   (start-st-offset vector2 :inline :offset 120)
   (start-qs        vector  :inline :offset 128)
   (start-rot       degrees         :offset 144)
   (start-st-rot    degrees         :offset 148)
   (end-color       vector  :inline :offset 160)
   (end-scale       vector2 :inline :offset 176)
   (end-offset      vector2 :inline :offset 184)
   (end-st-scale    vector2 :inline :offset 192)
   (end-st-offset   vector2 :inline :offset 200)
   (end-qs          vector  :inline :offset 208)
   (end-rot         degrees         :offset 224)
   (end-st-rot      degrees         :offset 228)
   )
  :method-count-assert 11
  :size-assert         #x130
  :flag-assert         #xb00000130
  (:methods
    (texture-anim-layer-method-9 () none 9)
    (texture-anim-layer-method-10 () none 10)
    )
  )

(deftype texture-anim (structure)
  ((num-layers   uint32           :offset-assert 0)
   (func         basic            :offset-assert 4)
   (func-id      basic            :offset 4)
   (init-func    basic            :offset-assert 8)
   (init-func-id basic            :offset 8)
   (tex          basic            :offset-assert 12)
   (tex-name     basic            :offset-assert 16)
   (extra        vector  :inline  :offset-assert 32)
   (color        uint32           :offset-assert 48)
   (frame-time   float            :offset-assert 52)
   (frame-delta  float            :offset-assert 56)
   (frame-mod    float            :offset-assert 60)
   (test         uint64           :offset-assert 64)
   (alpha        uint64           :offset-assert 72)
   (clamp        uint64           :offset-assert 80)
   (data         uint8   :dynamic :offset-assert 88)
   )
  :method-count-assert 11
  :size-assert         #x58
  :flag-assert         #xb00000058
  (:methods
    (texture-anim-method-9 () none 9)
    (texture-anim-method-10 () none 10)
    )
  )

(deftype texture-anim-array (array)
  ()
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (texture-anim-array-method-9 () none 9)
    (texture-anim-array-method-10 () none 10)
    )
  )

(deftype texture-anim-work (structure)
  ((erase-tmpl   dma-gif-packet :inline :offset-assert 0)
   (draw-tmpl    dma-gif-packet :inline :offset-assert 32)
   (draw2-tmpl   dma-gif-packet :inline :offset-assert 64)
   (fill-tmpl    dma-gif-packet :inline :offset-assert 96)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 128)
   (corner0      vector         :inline :offset-assert 160)
   (corner1      vector         :inline :offset-assert 176)
   (corner2      vector         :inline :offset-assert 192)
   (corner3      vector         :inline :offset-assert 208)
   (const        vector         :inline :offset-assert 224)
   (random       vector 8 :inline       :offset-assert 240)
   (random-index uint8                  :offset-assert 368)
   )
  :method-count-assert 9
  :size-assert         #x171
  :flag-assert         #x900000171
  )

(deftype clut16x16 (structure)
  ((clut rgba 256 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype noise8x8 (structure)
  ((image uint8 64 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype noise16x16 (structure)
  ((image uint8 256 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype noise32x32 (structure)
  ((image uint8 1024 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype noise64x64 (structure)
  ((image uint8 4096 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(deftype noise128x128 (structure)
  ((image uint8 16384 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )


(deftype fog8x256 (structure)
  ((image uint8 256 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )


(deftype fog-texture-work (structure)
  ((corner      vector 4 :inline :offset-assert 0)
   (const       vector   :inline :offset-assert 64)
   (min-corner  vector   :inline :offset-assert 80)
   (max-corner  vector   :inline :offset-assert 96)
   (fog-near    float            :offset-assert 112)
   (fog-far     float            :offset-assert 116)
   (fog-delta   float            :offset-assert 120)
   (alpha-near  float            :offset-assert 124)
   (alpha-far   float            :offset-assert 128)
   (alpha-delta float            :offset-assert 132)
   (color       uint32           :offset-assert 136)
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )

(define-extern *clut-translate* (pointer uint32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lights-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vu-lights (structure)
  ((direction vector 3 :inline :offset-assert 0)
   (color     vector 3 :inline :offset-assert 48)
   (ambient   vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype light (structure)
  ((direction     vector  :inline :offset-assert 0)
   (color         rgbaf   :inline :offset-assert 16)
   (extra         vector  :inline :offset-assert 32)
   (level         float           :offset 32)
   (luminance     float           :offset 40)
   (priority      float           :offset 44)
   (bytes         uint8   4       :offset 36)
   (mask          uint16          :offset 36)
   (palette-index int8            :offset 39)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype light-sphere (structure)
  ((name                string          :offset-assert 0)
   (bsphere             vector  :inline :offset-assert 16)
   (direction           vector  :inline :offset-assert 32)
   (color               vector  :inline :offset-assert 48)
   (decay-start         float           :offset 4)
   (ambient-point-ratio float           :offset 8)
   (brightness          float           :offset 12)
   (bytes               uint8 4         :offset 60)
   (mask                uint16          :offset 60)
   (palette-index       int8            :offset 63)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype light-hash-bucket (structure)
  ((index uint16  :offset-assert 0)
   (count uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype light-hash (basic)
  ((num-lights         uint16           :offset-assert 4)
   (num-indices        uint16           :offset-assert 6)
   (num-buckets        uint16           :offset-assert 8)
   (bucket-step        uint8   2        :offset-assert 10)
   (base-trans         vector   :inline :offset-assert 16)
   (axis-scale         vector   :inline :offset-assert 32)
   (dimension-array    vector4w :inline :offset-assert 48)
   (bucket-array       pointer          :offset-assert 64)
   (index-array        pointer          :offset-assert 68)
   (light-sphere-array (inline-array light-sphere) :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype light-hash-work (structure)
  ((ones vector4w :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype light-group (structure)
  ((dir0 light :inline :offset-assert 0)
   (dir1 light :inline :offset-assert 48)
   (dir2 light :inline :offset-assert 96)
   (ambi light :inline :offset-assert 144)
   (lights light 4 :inline :offset 0) ;; added
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(define-extern *light-hash* light-hash)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mood-channel (structure)
  ((data float 24 :offset-assert 0)
   (vecs vector4 6 :inline :offset 0 :score 999)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype mood-channel-group (structure)
  ((data mood-channel 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert 0)
   (fog-dists   vector :inline :offset-assert 16)
   (fog-start   meters         :offset 16)
   (fog-end     meters         :offset 20)
   (fog-max     float          :offset 24)
   (fog-min     float          :offset 28)
   (erase-color vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype mood-fog-table (structure)
  ((data mood-fog 8 :inline :offset-assert 0)
   (data-raw uint128 24 :offset 0 :score -1)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype mood-color (structure)
  ((lgt-color vector :inline :offset-assert 0)
   (amb-color vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype mood-direction-table (structure)
  ((data vector 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype mood-color-table (structure)
  ((data mood-color 8 :inline :offset-assert 0)
   (data-raw uint128 16 :offset 0 :score -1)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype mood-sky-table (structure)
  ((data vector 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype mood-clouds (structure)
  ((cloud-min float  :offset-assert 0)
   (cloud-max float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-weather (structure)
  ((data  float   2 :offset-assert 0)
   (cloud float     :offset 0)
   (fog   float     :offset 4)
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-iweather (structure)
  ((data  int32 2   :offset-assert 0)
   (cloud int32     :offset 0)
   (fog   int32     :offset 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-range (structure)
  ((data      float 4   :offset-assert 0)
   (min-cloud float     :offset 0)
   (max-cloud float     :offset 4)
   (min-fog   float     :offset 8)
   (max-fog   float     :offset 12)
   (quad      uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mood-filters-table (structure)
  ((data vector 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(declare-type sky-color-day structure)
(deftype mood-table (basic)
  ((mood-fog-table       mood-fog-table        :offset-assert 4)
   (mood-color-table     mood-color-table      :offset-assert 8)
   (mood-channel-group   mood-channel-group    :offset-assert 12)
   (mood-direction-table mood-direction-table  :offset-assert 16)
   (mood-sky-table       mood-sky-table        :offset-assert 20)
   (mood-interp-table    sky-color-day                 :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype mood-context-core (structure)
  ((current-fog          mood-fog :inline :offset-assert 0)
   (current-sky-color    vector   :inline :offset-assert 48)
   (current-env-color    vector   :inline :offset-assert 64)
   (current-prt-color    vector   :inline :offset-assert 80)
   (current-shadow-color vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype mood-context-core2 (mood-context-core)
  ((light-group light-group 8 :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x670
  :flag-assert         #x900000670
  )

(deftype mood-context-core3 (mood-context-core2)
  ((times vector 8 :inline :offset-assert 1648)
   )
  :method-count-assert 9
  :size-assert         #x6f0
  :flag-assert         #x9000006f0
  )

(deftype mood-context (mood-context-core3)
  "`state` holds an arbitrary state structure, ie `[[sewer-states]]` and is used
   when updating the mood.  This means that an individual state structure must be less than 128 bytes"
  ((itimes vector4w 4  :inline :offset-assert 1776)
   (state  uint32    32 :offset-assert 1840)
   (data   uint128 123 :offset 0 :score -1) ;; added
   )
  :method-count-assert 9
  :size-assert         #x7b0
  :flag-assert         #x9000007b0
  )

(deftype mood-control-work (structure)
  ((weather        mood-weather  :inline :offset-assert 0)
   (iweather       mood-iweather :inline :offset-assert 8)
   (interp         mood-weather  :inline :offset-assert 16)
   (index          int32       4       :offset-assert 24)
   (color-interp   float                 :offset-assert 40)
   (color-index    int32       2       :offset-assert 44)
   (channel-interp float                 :offset-assert 52)
   (channel-index  int32       2       :offset-assert 56)
   (cloud-interp   float                 :offset-assert 64)
   (cloud-index    int32       2       :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype mood-control (mood-table)
  ((mood-clouds           mood-clouds          :offset-assert 28)
   (current-interp        mood-weather :inline :offset-assert 32)
   (target-interp         mood-weather :inline :offset-assert 40)
   (speed-interp          mood-weather :inline :offset-assert 48)
   (range                 mood-range   :inline :offset-assert 64)
   (time-until-random     mood-weather :inline :offset-assert 80)
   (time-until-random-min mood-weather :inline :offset-assert 88)
   (time-until-random-max mood-weather :inline :offset-assert 96)
   (display-flag          symbol                :offset-assert 104)
   (overide-weather-flag  symbol                :offset-assert 108)
   (overide               mood-weather :inline :offset-assert 112)
   (lightning-index       int32                :offset-assert 120)
   (lightning-val         int32                :offset-assert 124)
   (lightning-time        int32                :offset-assert 128)
   (lightning-time2       float                :offset-assert 132)
   (lightning-flash       float                :offset-assert 136)
   (lightning-id          sound-id             :offset-assert 140)
   (lightning-count0      uint32               :offset-assert 144)
   (lightning-count1      uint32               :offset-assert 148)
   (lightning-count2      uint32               :offset-assert 152)
   (rain-id               uint32               :offset-assert 156)
   (sound-pitch           float                :offset-assert 160)
   (fogs                  mood-fog-table     9       :offset-assert 164)
   (colors                mood-color-table   3       :offset-assert 200)
   (channels              mood-channel-group 3       :offset-assert 212)
   (clouds                mood-clouds  9       :offset-assert 224)
   )
  :method-count-assert 19
  :size-assert         #x104
  :flag-assert         #x1300000104
  (:methods
    (init-weather!
      ;; TODO - local-vars mess up docstring placement
      ;; "A bunch of setup around moods and weather depending on a variety of conditions"
      (_type_) none :behavior process 9)
    (update-mood-weather!
      "Set the `target-interp` and `speed-interp` for the clouds and fog
       If `*-speed` is 0.0, use the `*-target` args to set `current-interp`
       See [[mood-weather]]"
      (_type_ float float float float) none 10)
    (update-mood-range!
      "Set the minimum and maximum ranges of clouds and fog
       See [[mood-range]]"
      (_type_ float float float float) none 11)
    (set-time-for-random-weather!
      "Set the `time-until-random`'s cloud and fog values
       See [[mood-weather]]"
      (_type_ float float) none 12)
    (apply-mood-clouds-and-fog (_type_ mood-control-work) none 13)
    (apply-mood-color (_type_ mood-control-work) none 14)
    (apply-mood-channels (_type_ mood-control-work) none 15)
    (adjust-num-clouds! (_type_ mood-control-work) none 16)
    (gen-lightning-and-thunder!
      ;; TODO - docstrings with behaviors!
      ;; "Generates the lightning and thunder to play, kicks off the associated sounds"
      (_type_) number 17)
    (play-or-stop-lightning!
      "Handles playing/stopping of the lightning sound
       - Plays the lightning sound if we are not loading and `lightning-id` is zero
       - Stops the lightning sound first if `lightning-id` is non-zero
       Returns the current value of `lightning-id`"
      (_type_ sound-spec vector) sound-id 18)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type bsp-header basic)

(defenum vis-info-flag
  :type uint32
  :bitfield #t
  (dummy0  0)
  (dummy1  1)
  (dummy2  2)
  (dummy3  3)
  (dummy4  4)
  (dummy5  5)
  (dummy6  6)
  (dummy7  7)
  (dummy8  8)
  (dummy9  9)
  (dummy10 10)
  (dummy11 11)
  (dummy12 12)
  (dummy13 13)
  (dummy14 14)
  (dummy15 15)
  (dummy16 16)
  (dummy17 17)
  (dummy18 18)
  (dummy19 19)
  (dummy20 20)
  (dummy21 21)
  (dummy22 22)
  (dummy23 23)
  (dummy24 24)
  (dummy25 25)
  (dummy26 26)
  (dummy27 27)
  (dummy28 28)
  (in-iop  29)
  (loading 30)
  (vis-valid 31)
  )

(deftype level-vis-info (basic)
  ((level              level           :offset-assert 4)
   (from-level         level           :offset-assert 8)
   (from-bsp           bsp-header      :offset-assert 12)
   (flags              vis-info-flag   :offset-assert 16)
   (length             uint32          :offset-assert 20)
   (allocated-length   uint32          :offset-assert 24)
   (dictionary-length  uint32          :offset-assert 28)
   (dictionary         uint32          :offset-assert 32)
   (string-block       uint32          :offset-assert 36)
   (ramdisk            uint32          :offset-assert 40)
   (vis-bits           uint32          :offset-assert 44)
   (current-vis-string uint32          :offset-assert 48)
   (vis-string         uint32 :dynamic :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )


(defenum task-mask
  :type uint32
  :bitfield #t
  (task0    0) ;; 0x1
  (task1    1) ;; 0x2
  (task2    2) ;; 0x4
  (task3    3) ;; 0x8
  (task4    4) ;; 0x10
  (task5    5) ;; 0x20
  (task6    6) ;; 0x40
  (task7    7) ;; 0x80
  (done     8) ;; 0x100
  (dummy0   9) ;; 0x200
  (dummy1   10) ;; 0x400
  (dummy2   11) ;; 0x800
  (special  12) ;; 0x1000
  (primary0 13) ;; 0x2000
  (ctywide  14) ;; 0x4000
  (never    15) ;; 0x8000
  (movie0   16) ;; 0x10000
  (movie1   17) ;; 0x20000
  (movie2   18) ;; 0x40000
  )

(deftype level-load-info (basic)
  ((name-list           symbol 6  :offset-assert 4 :score -1)
   (index               int16     :offset-assert 28)
   (task-level          uint8     :offset-assert 30)
   (name                symbol    :offset 4)
   (visname             symbol    :offset 8)
   (nickname            symbol    :offset 12)
   (dbname              symbol    :offset 16)
   (taskname            symbol    :offset 20)
   (other-name-1        symbol    :offset 24)
   (packages            pair      :offset-assert 32) ;; guess on type
   (memory-mode         uint32    :offset-assert 36)
   (music-bank          symbol     :offset-assert 40)
   (ambient-sounds      symbol     :offset-assert 44)
   (sound-reverb        float     :offset-assert 48)
   (mood-func           symbol    :offset-assert 52)
   (mood-init           symbol    :offset-assert 56)
   (ocean               symbol     :offset-assert 60)
   (sky                 symbol     :offset-assert 64)
   (use-camera-other    symbol     :offset-assert 68)
   (part-engine-max     int32     :offset-assert 72)
   (city-map-bits       uint64    :offset-assert 80)
   (continues           pair      :offset-assert 88)
   (tasks               pair     :offset-assert 92)
   (priority            int32     :offset-assert 96)
   (load-commands       pair     :offset-assert 100)
   (alt-load-commands   pair     :offset-assert 104)
   (bsp-mask            uint64    :offset-assert 112)
   (buzzer              int32     :offset-assert 120)
   (buttom-height       meters    :offset-assert 124)
   (run-packages        pair     :offset-assert 128)
   (prev-level          symbol     :offset-assert 132)
   (next-level          symbol     :offset-assert 136)
   (wait-for-load       symbol    :offset-assert 140)
   (login-func          symbol    :offset-assert 144)
   (activate-func       symbol    :offset-assert 148)
   (deactivate-func     symbol    :offset-assert 152)
   (kill-func           symbol    :offset-assert 156)
   (borrow-size         uint16 2  :offset-assert 160)
   (borrow-level        symbol 2  :offset-assert 164)
   (borrow-display?     symbol 2  :offset-assert 172)
   (base-task-mask      task-mask :offset-assert 180)
   (texture-anim        symbol 10 :offset-assert 184 :score -1)
   (texture-anim-tfrag  symbol    :offset 184)
   (texture-anim-pris   symbol    :offset 188)
   (texture-anim-shrub  symbol    :offset 192)
   (texture-anim-alpha  symbol    :offset 196)
   (texture-anim-water  symbol    :offset 200)
   (texture-anim-twarp  symbol    :offset 204)
   (texture-anim-pris2  symbol    :offset 208)
   (texture-anim-sprite symbol    :offset 212)
   (texture-anim-map    symbol    :offset 216)
   (texture-anim-sky    symbol    :offset 220)
   (draw-priority       float     :offset-assert 224)
   (level-flags         uint32    :offset-assert 228)
   (fog-height          float     :offset-assert 232)
   (bigmap-id           uint32    :offset-assert 236)
   (ocean-near-translucent? symbol :offset-assert 240)
   (ocean-far?          symbol    :offset-assert 244)
   (mood-range          mood-range :inline :offset-assert 256)
   (max-rain            float      :offset-assert 272)
   (fog-mult            float      :offset-assert 276)
   (ocean-alpha         float      :offset-assert 280)
   (extra-sound-bank    pair       :offset-assert 284)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

(declare-type drawable basic)
(deftype login-state (basic)
  ((state int32       :offset-assert 4)
   (pos   uint32      :offset-assert 8)
   (elts  uint32      :offset-assert 12)
   (elt   drawable 16 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
(declare-type entity-links-array inline-array-class)
(declare-type game-text-info basic)

(defenum load-buffer-mode
  :type uint32
  (small-edge 0)
  (small-center 1)
  (medium 2)
  (large 3)
  (borrow 4)
  (ten 10)
  )

(declare-type game-text-id uint32)
(declare-type engine basic)
(deftype level (basic)
  ((name              symbol  :offset-assert 4)
   (load-name         string   :offset-assert 8)
   (nickname          string   :offset-assert 12)
   (index             int32   :offset-assert 16)
   (status            symbol  :offset-assert 20)
   (borrow-level      level 2 :offset-assert 24)
   (borrow-from-level level   :offset-assert 32)
   (heap              kheap :inline :offset-assert 48)
   (borrow-heap       kheap 2 :inline :offset-assert 64)
   (bsp               bsp-header :offset-assert 96)
   (art-group         load-dir-art-group :offset-assert 100)
   (info              level-load-info :offset-assert 104)
   (texture-page      texture-page 18 :offset-assert 108)
   (loaded-texture-page texture-page 16 :offset-assert 180)
   (loaded-texture-page-count int32 :offset-assert 244)
   (entity            entity-links-array :offset-assert 248)
   (closest-object    float :offset-assert 252)
   (closest-object-array float 18 :offset 252)
   ;; ????
   (upload-size       int32 18 :offset 324)
   (inside-boxes      symbol :offset-assert 396)
   (display?          symbol :offset-assert 400)
   (render?           symbol :offset-assert 404)
   (meta-inside?      symbol :offset-assert 408)
   (force-inside?     symbol :offset-assert 412)
   (mood-context      mood-context :inline :offset-assert 416)
   (mood-func         (function mood-context float int none) :offset-assert 2384)
   (mood-init         (function mood-context none) :offset-assert 2388)
   (vis-bits          pointer :offset-assert 2392)
   (all-visible?      symbol :offset-assert 2396)
   (force-all-visible? symbol :offset-assert 2400)
   (linking           basic :offset-assert 2404)
   (vis-info          level-vis-info 8 :offset-assert 2408)
   (vis-self-index    int32 :offset-assert 2440)
   (vis-adj-index     int32 :offset-assert 2444)
   (vis-buffer        uint8 2048 :offset-assert 2448)
   (mem-usage-block   memory-usage-block :offset-assert 4496)
   (mem-usage         int32 :offset-assert 4500)
   (code-memory-start pointer :offset-assert 4504)
   (code-memory-end   pointer :offset-assert 4508)
   (load-start-time   time-frame :offset-assert 4512)
   (load-stop-time    time-frame :offset-assert 4520)
   (load-buffer       uint32 2 :offset-assert 4528)
   (load-buffer-size  uint32  :offset-assert 4536)
   (load-buffer-last  uint32 :offset-assert 4540)
   (load-buffer-mode  load-buffer-mode :offset-assert 4544)
   (display-start-time time-frame :offset-assert 4552)
   (memory-mask       uint32 :offset-assert 4560)
   (task-mask         task-mask :offset-assert 4564)
   (tfrag-gs-test     uint64 :offset-assert 4568)
   (texture-dirty-masks texture-mask 10 :inline :offset-assert 4576)
   (texture-mask texture-mask 18 :inline :offset-assert 4736)
   (sky-mask texture-mask :inline :offset-assert 5024)
   (tfrag-masks       texture-masks-array :offset-assert 5040)
   (tfrag-dists       pointer :offset-assert 5044)
   (shrub-masks       texture-masks-array :offset-assert 5048)
   (shrub-dists       pointer :offset-assert 5052)
   (alpha-masks       texture-masks-array :offset-assert 5056)
   (alpha-dists       pointer :offset-assert 5060)
   (water-masks       texture-masks-array :offset-assert 5064)
   (water-dists       pointer :offset-assert 5068)
   (tfrag-last-calls  int32 6 :offset-assert 5072)
   (texture-anim-array texture-anim-array 10 :offset-assert 5096)
   (light-hash        light-hash :offset-assert 5136)
   (draw-priority     float  :offset-assert 5140)
   (draw-index        int32    :offset-assert 5144)
   (part-engine       engine :offset-assert 5148)
   (user-object       basic 4 :offset-assert 5152)
   (loaded-text-info-count int32 :offset-assert 5168)
   (loaded-text-info  game-text-info 8 :offset-assert 5172)
   (level-type        type :offset-assert 5204)
   (load-order        int64 :offset-assert 5208)

   ;; ??
   (pad int8 12)
   )
  :method-count-assert 30
  :size-assert         #x146c
  :flag-assert         #x1e0000146c
  ;; Failed to read fields.
  (:methods
    (deactivate (_type_) _type_ 9)
    (level-method-10 () none 10) ;; (is-object-visible? (_type_ int) symbol 10)
    (level-method-11 () none 11) ;; (add-irq-to-tex-buckets! (_type_) none 11)
    (unload! (_type_) _type_ 12)
    (bsp-name (_type_) symbol 13)
    (compute-memory-usage (_type_ object) memory-usage-block 14)
    (point-in-boxes? (_type_ vector) symbol 15)
    (level-method-16 () none 16) ;; (update-vis! (_type_ level-vis-info uint uint) symbol 16)
    (load-continue (_type_) _type_ 17)
    (load-begin (_type_) _type_ 18)
    (login-begin (_type_) _type_ 19)
    (debug-print-region-splitbox (_type_ vector object) none 20) ;; (vis-load (_type_) uint 20)
    (get-art-group-by-name (_type_ string) art-group 21) ;; (unused-21 (_type_) none 21)
    (level-method-22 () none 22) ;; (birth (_type_) _type_ 22)
    (lookup-text (_type_ game-text-id symbol) string 23) ;; (level-status-set! (_type_ symbol) _type_ 23)
    (level-method-24 () none 24)
    (birth (_type_) _type_ 25) ;; (init-vis (_type_) int 25)
    (level-status-update! (_type_ symbol) _type_ 26)
    (load-required-packages (_type_) _type_ 27) ;; (debug-print-splitbox (_type_ vector string) none 27)
    (init-vis-from-bsp (_type_) none 28)
    (vis-clear (_type_) none 29)
    )
  )

(declare-type entity-links structure)

(deftype level-group (basic)
  ((length int32 :offset-assert 4)
   ;; not in inspect, copied from jak1
   (log-in-level-bsp    bsp-header :offset-assert 8)
   (loading-level   level          :offset-assert 12)
   ;;
   (entity-link entity-links :offset 16)
   (border? symbol :offset-assert 20)
   (vis?    symbol :offset-assert 24)
   (want-level basic :offset-assert 28)
   (receiving-level basic :offset-assert 32)
   (load-commands pair :offset-assert 36)
   (play? symbol :offset-assert 40)
   (target-pos vector 2 :inline :offset-assert 48)
   (camera-pos vector 2 :inline :offset-assert 80)
   (heap kheap :inline :offset-assert 112)
   (sound-bank basic 4 :offset-assert 128)
   (disk-load-timing? symbol :offset-assert 144)
   (load-level basic :offset-assert 148)
   (load-size uint32 :offset-assert 152)
   (load-time float :offset-assert 156)
   (load-login-time float :offset-assert 160)
   (draw-level-count int32 :offset-assert 164)
   (draw-level level 7 :offset-assert 168)
   (draw-index-map uint8 7 :offset-assert 196)
   (load-order uint64 :offset-assert 208)
   ;; ?
   (pad uint8 30)
   (level level 7 :inline :offset-assert 256 :score -1)
   (level0 level :inline :offset 256)
   (level1 level :inline :offset 5488)
   (level2 level :inline :offset 10720)
   (level3 level :inline :offset 15952)
   (level4 level :inline :offset 21184)
   (level5 level :inline :offset 26416)
   (default-level level :inline :offset 31648)

   (unknown-inline-vec-01 (inline-array vector) :offset 32064)
   (unknown-inline-vec-02 (inline-array vector) :offset 33712)

   (pad2 uint8 4)
   )
  :method-count-assert 31
  :size-assert         #x9014
  :flag-assert         #x1f00009014
  ;; Failed to read fields.
  (:methods
    (level-get (_type_ symbol) level 9)
    (level-get-with-status (_type_ symbol) level 10)
    (get-level-by-heap-ptr-and-status (_type_ pointer symbol) level 11) ;;
    (level-get-for-use (_type_ symbol symbol) level 12)
    (activate-levels! (_type_) int 13) ;; (debug-print-entities (_type_ symbol type) none 13)
    (level-group-method-14 () none 14)
    (debug-draw-actors (_type_ symbol) none 15)
    (assign-draw-indices (_type_) none 16) ;; (level-update (_type_) int 16)
    (actors-update (_type_) none 17) ;; (level-get-target-inside (_type_) level 17)
    (level-group-method-18 () none 18) ;; (alloc-levels! (_type_ symbol) int 18)
    (level-update (_type_) none 19) ;;
    (level-get-target-inside (_type_) level 20) ;; (art-group-get-by-name (_type_ string) art-group 20)
    (alloc-levels-if-needed (_type_ symbol) none 21)
    (load-commands-set! (_type_ pair) none 22) ;; (update-vis-volumes (_type_) none 22)
    (art-group-get-by-name (_type_ string (pointer uint32)) art-group 23) ;; (update-vis-volumes-from-nav-mesh (_type_) none 23)
    (load-command-get-index (_type_ symbol int) pair 24) ;; (print-volume-sizes (_type_) none 24)
    (level-group-method-25 () none 25) ;; (level-status (_type_ symbol) symbol 25)
    (level-group-method-26 () none 26)
    (level-group-method-27 () none 27)
    (level-status (_type_ symbol) symbol 28)
    (load-in-progress? (_type_) symbol 29)
    (level-get-most-disposable (_type_) level 30)
    )
  )

(define-extern *level* level-group)
(define-extern *draw-index* int)
(define-extern *level-index* int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; capture-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gs-store-image-packet (structure)
  ((vifcode        vif-tag 4     :offset-assert 0)
   (giftag         gif-tag       :offset-assert 16)
   (bitbltbuf      gs-bitbltbuf  :offset-assert 32)
   (bitbltbuf-addr gs-reg64      :offset-assert 40)
   (trxpos         gs-trxpos     :offset-assert 48)
   (trxpos-addr    gs-reg64      :offset-assert 56)
   (trxreg         gs-trxreg     :offset-assert 64)
   (trxreg-addr    gs-reg64      :offset-assert 72)
   (finish         int64         :offset-assert 80)
   (finish-addr    gs-reg64      :offset-assert 88)
   (trxdir         gs-trxdir     :offset-assert 96)
   (trxdir-addr    gs-reg64     :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype screen-shot-work (structure)
  ((count          int16  :offset-assert 0)
   (size           int16  :offset-assert 2)
   (name           string  :offset-assert 4)
   (highres-enable symbol  :offset-assert 8)
   (hud-enable     symbol  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *screen-shot-work* screen-shot-work)
(define-extern *image-name* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math-camera-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vis-gif-tag (structure)
  ((fog0  uint32  :offset-assert 0)
   (strip uint32  :offset-assert 4)
   (regs  uint32  :offset-assert 8)
   (fan   uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cull-info (structure)
  ((x-fact      float  :offset-assert 0)
   (y-fact      float  :offset-assert 4)
   (z-fact      float  :offset-assert 8)
   (cam-radius  float  :offset-assert 12)
   (cam-x       float  :offset-assert 16)
   (cam-y       float  :offset-assert 20)
   (xz-dir-ax   float  :offset-assert 24)
   (xz-dir-az   float  :offset-assert 28)
   (xz-dir-bx   float  :offset-assert 32)
   (xz-dir-bz   float  :offset-assert 36)
   (xz-cross-ab float  :offset-assert 40)
   (yz-dir-ay   float  :offset-assert 44)
   (yz-dir-az   float  :offset-assert 48)
   (yz-dir-by   float  :offset-assert 52)
   (yz-dir-bz   float  :offset-assert 56)
   (yz-cross-ab float  :offset-assert 60)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype math-camera (basic)
  ((d                          meters              :offset-assert 4)
   (f                          meters              :offset-assert 8)
   (fov                        degrees             :offset-assert 12)
   (x-ratio                    float               :offset-assert 16)
   (y-ratio                    float               :offset-assert 20)
   (x-pix                      float               :offset-assert 24)
   (x-clip                     float               :offset-assert 28)
   (x-clip-ratio-in            float               :offset-assert 32)
   (x-clip-ratio-over          float               :offset-assert 36)
   (y-pix                      float               :offset-assert 40)
   (y-clip                     float               :offset-assert 44)
   (y-clip-ratio-in            float               :offset-assert 48)
   (y-clip-ratio-over          float               :offset-assert 52)
   (cull-info                  cull-info   :inline :offset-assert 56)
   (fog-start                  meters              :offset-assert 120)
   (fog-end                    meters              :offset-assert 124)
   (fog-max                    float               :offset-assert 128)
   (fog-min                    float               :offset-assert 132)
   (reset                      int32               :offset-assert 136)
   (smooth-step                float               :offset-assert 140)
   (smooth-t                   float               :offset-assert 144)
   (perspective                matrix      :inline :offset-assert 160)
   (isometric                  matrix      :inline :offset-assert 224)
   (sprite-2d                  matrix      :inline :offset-assert 288)
   (sprite-2d-hvdf             vector      :inline :offset-assert 352)
   (camera-rot                 matrix      :inline :offset-assert 368)
   (inv-camera-rot             matrix      :inline :offset-assert 432)
   (inv-camera-rot-smooth      matrix      :inline :offset-assert 496)
   (inv-camera-rot-smooth-from quaternion  :inline :offset-assert 560)
   (camera-temp                matrix      :inline :offset-assert 576)
   (prev-camera-temp           matrix      :inline :offset-assert 640)
   (prev-inv-camera-rot        matrix      :inline :offset-assert 704)
   (prev-trans                 vector      :inline :offset-assert 768)
   (hmge-scale                 vector      :inline :offset-assert 784)
   (inv-hmge-scale             vector      :inline :offset-assert 800)
   (hvdf-off                   vector      :inline :offset-assert 816)
   (guard                      vector      :inline :offset-assert 832)
   (vis-gifs                   vis-gif-tag 4 :inline      :offset-assert 848) ;; guessed by decompiler
   (giftex                     uint128             :offset 848) ;; vis-gif-tag
   (gifgr                      uint128             :offset 864) ;; vis-gif-tag
   (giftex-trans               uint128             :offset 880) ;; vis-gif-tag
   (gifgr-trans                uint128             :offset 896) ;; vis-gif-tag
   (pfog0                      float               :offset-assert 912)
   (pfog1                      float               :offset-assert 916)
   (trans                      vector      :inline :offset-assert 928)
   (plane                      plane       4 :inline       :offset-assert 944) ;; guessed by decompiler
   (guard-plane                plane       4 :inline      :offset-assert 1008) ;; guessed by decompiler
   (shrub-mat                  matrix      :inline :offset-assert 1072)
   (quat-other                 quaternion  :inline :offset-assert 1136)
   (trans-other                vector      :inline :offset-assert 1152)
   (shrub-mat-other            matrix      :inline :offset-assert 1168)
   (camera-temp-other          matrix      :inline :offset-assert 1232)
   (camera-rot-other           matrix      :inline :offset-assert 1296)
   (inv-camera-rot-other       matrix      :inline :offset-assert 1360)
   (plane-other                plane     4  :inline     :offset-assert 1424)
   (guard-plane-other          plane     4 :inline      :offset-assert 1488)
   (mirror-trans               vector      :inline :offset-assert 1552)
   (mirror-normal              vector      :inline :offset-assert 1568)
   (fov-correction-factor      float               :offset-assert 1584)
   )
  (:methods (new (symbol type) _type_ 0))
  :method-count-assert 9
  :size-assert         #x634
  :flag-assert         #x900000634
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math-camera                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype fog-corrector (structure)
  ((fog-end   float  :offset-assert 0)
   (fog-start float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern fog-corrector-setup (function fog-corrector math-camera none))
(define-extern *math-camera-fog-correction* fog-corrector)
(define-extern update-math-camera (function math-camera symbol symbol float math-camera))
(define-extern *math-camera* math-camera)
(define-extern math-cam-start-smoothing (function float float quaternion))
(define-extern move-target-from-pad (function transform int transform))
(define-extern transform-point-vector! (function vector vector symbol))
(define-extern transform-point-qword! (function vector4w vector symbol))
(define-extern transform-point-vector-scale! (function vector vector float))
(define-extern reverse-transform-point! (function vector vector vector vector none))
(define-extern init-for-transform (function matrix none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype char-verts (structure)
  ((pos    vector 4 :inline :offset-assert 0) ;; guessed by decompiler
   (color  vector 4 :inline :offset-assert 64) ;; guessed by decompiler
   (tex-st vector 4 :inline :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype char-color (structure)
  ((color rgba 4 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; +++font-h:font-color
(defenum font-color
  :type uint32
  (default-#cddbcd 0)
  (#dadada 1)
  (#ededed 2)
  (precursor-#ec3b00 3)
  (gold-#ba9200 4)
  (yellow-#f3f300 5)
  (green-#3df23d 6)
  (blue-#003cf1 7)
  (cyan-#00fefe 8)
  (magenta-#f87df8 9)
  (#a0d5d5 10)
  (#7cbaba 11)
  (white-#ffffff 12)
  (#959595 13)
  (#f9a400 14)
  (#daf95e 15)
  (#8aa81f 16)
  (#a6b5a6 17)
  (#757f75 18)
  (#5e3f5e 19)
  (#f0e387 20)
  (#3fbaed 21)
  (#3a3a3a 22)
  (#5c5c5c 23)
  (#f298c8 24)
  (#f46868 25)
  (#20ca98 26)
  (#8289de 27)
  (#a8f3f6 28)
  (#fef666 29)
  (#f1f104 30)
  (#8ed0f4 31)
  (#7efbfb 32)
  (#7ffcfc 33)
  (#f9f9f9 34)
  (#408080 35)
  (#e0f0e0 36)
  (#c00000 37)
  (#ffc040 38)
  (#000000 39)
  )
;; ---font-h:font-color

(defenum font-flags
  :type uint32
  :bitfield #t
  (shadow 0)
  (kerning 1)
  (middle 2)
  (left 3)
  (right 4)
  (large 5)
  (pc-hack 6)
  )

(deftype font-context (basic)
  ((origin     vector     :inline :offset-assert 16)
   (strip-gif  vector     :inline :offset-assert 32)
   (width      float              :offset-assert 48)
   (height     float              :offset-assert 52)
   (projection float              :offset-assert 56)
   (scale      float              :offset-assert 60)
   (color      font-color         :offset-assert 64) ;; guessed by decompiler
   (flags      font-flags         :offset-assert 68) ;; guessed by decompiler
   (mat        matrix             :offset-assert 72)
   (start-line uint32             :offset-assert 76)
   (alpha      float              :offset-assert 80)
   )
  :method-count-assert 21
  :size-assert         #x54
  :flag-assert         #x1500000054
  (:methods
    (new (symbol type matrix int int float font-color font-flags) _type_ 0)
    (set-mat! (font-context matrix) font-context 9)
    (set-origin! (font-context int int) font-context 10)
    (set-depth! (font-context int) font-context 11)
    (set-w! (font-context float) font-context 12)
    (set-width! (font-context int) font-context 13)
    (set-height! (font-context int) font-context 14)
    (set-projection! (font-context float) font-context 15)
    (set-color! (font-context font-color) font-context 16)
    (set-flags! (font-context font-flags) font-context 17)
    (set-start-line! (font-context uint) font-context 18)
    (set-scale! (font-context float) font-context 19)
    (set-alpha! (font-context float) font-context 20)
    )
  )


(deftype font-work (structure)
  ((font-tmpl           dma-gif-packet :inline :offset-assert 0)
   (char-tmpl           dma-gif-packet :inline :offset-assert 32)
   (tex1-tmpl           uint64         2       :offset-assert 64) ;; guessed by decompiler
   (small-font-0-tmpl   uint64        2       :offset-assert 80)
   (small-font-1-tmpl   uint64        2       :offset-assert 96)
   (small-font-2-tmpl   uint64        2       :offset-assert 112)
   (small-font-3-tmpl   uint64        2       :offset-assert 128)
   (large-font-0-tmpl   uint64        2       :offset-assert 144)
   (large-font-1-tmpl   uint64        2       :offset-assert 160)
   (large-font-2-tmpl   uint64        2       :offset-assert 176)
   (large-font-3-tmpl   uint64        2       :offset-assert 192)
   (size1-small         vector         :inline :offset-assert 208)
   (size2-small         vector         :inline :offset-assert 224)
   (size3-small         vector         :inline :offset-assert 240)
   (size1-large         vector         :inline :offset-assert 256)
   (size2-large-0       vector         :inline :offset-assert 272)
   (size2-large-1       vector         :inline :offset-assert 288)
   (size2-large-2       vector         :inline :offset-assert 304)
   (size2-large-3       vector         :inline :offset-assert 320)
   (size3-large         vector         :inline :offset-assert 336)
   (size2-0             vector         :inline :offset-assert 352)
   (size2-1             vector         :inline :offset-assert 368)
   (size2-2             vector         :inline :offset-assert 384)
   (size2-3             vector         :inline :offset-assert 400)
   (size-st1            vector         :inline :offset-assert 416)
   (size-st2            vector         :inline :offset-assert 432)
   (size-st3            vector         :inline :offset-assert 448)
   (save                vector         :inline :offset-assert 464)
   (save-color          vector         4  :inline     :offset-assert 480) ;; guessed by decompiler
   (current-verts       char-verts     :inline :offset-assert 544)
   (src-verts           char-verts     :inline :offset-assert 736)
   (dest-verts          char-verts     :inline :offset-assert 928)
   (justify             vector         64  :inline    :offset-assert 1120) ;; guessed by decompiler
   (color-shadow        vector4w       :inline :offset-assert 2144)
   (color-table         char-color     40 :inline     :offset-assert 2160) ;; guessed by decompiler
   (current-font-0-tmpl uint64        2       :offset-assert 2800)
   (current-font-1-tmpl uint64        2       :offset-assert 2816)
   (current-font-2-tmpl uint64        2       :offset-assert 2832)
   (current-font-3-tmpl uint64        2       :offset-assert 2848)
   (last-color          font-color             :offset-assert 2864) ;; guessed by decompiler
   (save-last-color     font-color             :offset-assert 2868) ;; guessed by decompiler
   (buf                 basic                  :offset-assert 2872)
   (str-ptr             uint32                 :offset-assert 2876)
   (flags               font-flags             :offset-assert 2880) ;; guessed by decompiler
   (reg-save            uint32         5       :offset-assert 2884) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xb58
  :flag-assert         #x900000b58
  )


(define-extern *font-default-matrix* matrix)
(define-extern *font-work* font-work)
(define-extern font-set-tex0 (function (pointer gs-tex0) texture int int int none))
(define-extern set-font-color (function int int int int int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; decomp-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype decomp-work (structure)
  ((buffer0      uint8  2048 :offset-assert 0) ;; guessed by decompiler
   (buffer1      uint8  2048 :offset-assert 2048) ;; guessed by decompiler
   (indices      uint16 2048 :offset-assert 4096) ;; guessed by decompiler
   (temp-indices uint16 2048 :offset-assert 8192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; profile                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype profile-work (structure)
  ((sprite-tmpl dma-gif-packet :inline :offset-assert 0)
   (line-tmpl   dma-gif-packet :inline :offset-assert 32)
   (last-index  int32                  :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern *profile-work* profile-work)
(define-extern *profile-x* int)
(define-extern *profile-y* int)
(define-extern *profile-w* int)
(define-extern *profile-h* int)
(define-extern *profile-ticks* symbol)
(define-extern profile-texture-test (function bucket-id symbol))
(define-extern profile-tfrag-test (function bucket-id symbol))
(define-extern profile-tie-test (function bucket-id symbol))
(define-extern profile-merc-test (function bucket-id symbol))
(define-extern profile-emerc-test (function bucket-id symbol))
(define-extern profile-mercneric-test (function bucket-id symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern get-current-time (function time-frame))
(define-extern get-integral-current-time (function uint))
(define-extern set-display (function display display))
(define-extern allocate-dma-buffers (function display display))
(define-extern *font-context* font-context)
(define-extern draw-sprite2d-xy (function dma-buffer int int int int rgba none))
(define-extern draw-sprite2d-xy-absolute (function dma-buffer int int int int rgba none))
(define-extern draw-quad2d (function dma-buffer draw-context none))
(define-extern screen-gradient (function dma-buffer rgba rgba rgba rgba none))
(define-extern vif1-handler-debug (function int none))
(define-extern vif1-handler (function none))
(define-extern vblank-handler (function int))
(define-extern set-display-gs-state (function dma-buffer int int int int int dma-buffer))
(define-extern set-display-gs-state-offset (function dma-buffer int int int int int int int dma-buffer))
(define-extern reset-display-gs-state (function display dma-buffer int display))
(define-extern *vu0-dma-list* dma-buffer)
(define-extern *display* display)

(define-extern install-handler (function int function int))  ;; GOAL thinks it returns something.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; connect                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype connectable (structure)
  ((next0 connectable  :offset-assert 0)
   (prev0 connectable  :offset-assert 4)
   (next1 connectable  :offset-assert 8)
   (prev1 connectable  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(declare-type engine basic)

(deftype connection (connectable)
  ((param0 basic     :offset-assert 16)
   (param1 int32     :offset-assert 20) ;; guessed by decompiler
   (param2 int32     :offset-assert 24) ;; guessed by decompiler
   (param3 int32     :offset-assert 28) ;; guessed by decompiler
   (quad   uint128 2 :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  ;; field param1 uses ~A with a signed load field param2 uses ~A with a signed load field param3 uses ~A with a signed load
  (:methods
    (get-engine (connection) engine 9)
    (get-process (connection) process 10)
    (belongs-to-engine? (connection engine) symbol 11)
    (belongs-to-process? (connection process) symbol 12)
    (move-to-dead (connection) connection 13)
    )
  )



(deftype engine (basic)
  ((name symbol :offset-assert 4)
   (engine-time time-frame :offset 16)
   (allocated-length int16 :offset 10)
   (length int16 :offset 8)
   (element-type type :offset 12)
   (alive-list connectable :inline :offset-assert 32)
   (alive-list-end connectable :inline :offset-assert 48)
   (dead-list connectable :inline :offset-assert 64)
   (dead-list-end connectable :inline :offset-assert 80)
   ;; storage for nodes. this is dynamically sized.
   (data connection :dynamic :inline :offset-assert 96)
   )
  :method-count-assert 26
  :size-assert         #x60
  :flag-assert         #x1a00000060
  ;; Failed to read fields.
  (:methods
    (new (symbol type symbol int type) _type_ 0)
    (inspect-all-connections (engine) engine 9)
    (apply-to-connections (engine (function connectable none)) int 10)
    (apply-to-connections-reverse (engine (function connectable none)) int 11)
    (execute-connections (engine object) int 12)
    (execute-connections-and-move-to-dead (engine object) int 13)
    (execute-connections-if-needed (engine object) int 14)
    (add-connection (engine process object object object object) connection 15)
    (remove-from-process (engine process) int 16)
    (remove-matching (engine (function connection engine symbol)) int 17)
    (remove-all (engine) int 18)
    (remove-by-param0 (engine object) int 19)
    (remove-by-param1 (engine int) int 20)
    (remove-by-param2 (engine int) int 21)
    (get-first-connectable (engine) connectable 22)
    (get-last-connectable (engine) connectable 23)
    (get-next-connectable (_type_ connectable) connectable 24)
    (get-prev-connectable (_type_ connectable) connectable 25)
    )
  )


(deftype connection-pers (structure)
  ((next connection-pers :offset-assert 0)
   (key object :offset-assert 4)
   (update-time time-frame :offset-assert 8)
   (param object 4 :offset 16)
   (param-int32 int32 4 :offset 16)
   (param-int64 int64 2 :offset 16)
   (param-float float 4 :offset 16)
   (param-quat int128 :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; Failed to read fields.
  )

(deftype engine-pers (basic)
  ((name             symbol                   :offset-assert 4)
   (length           int16                    :offset-assert 8)
   (allocated-length int16                    :offset-assert 10)
   (element-type     type                    :offset-assert 12)
   (execute-time     time-frame                   :offset-assert 16)
   (alive-list       connection-pers          :offset-assert 24)
   (dead-list        connection-pers          :offset-assert 28)
   (data             connection-pers :inline         :dynamic :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (new (symbol type symbol int type) _type_ 0)
    (schedule-callback (_type_ object time-frame) connection-pers 9)
    (kill-callback (_type_ connection-pers) none 10)
    (kill-by-key (_type_ object) none 11)
    (kill-matching (_type_ (function engine-pers connection-pers object object symbol) object object) none 12)
    (update-callback (_type_) none 13)
    (run-pending-updates! (_type_ time-frame) none 14)
    )
  )

(define-extern connection-process-apply (function process (function object none) symbol))
(define-extern process-disconnect (function process int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-id-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum game-text-id
  :type uint32
  :bitfield #f
;; GAME-TEXT-ID ENUM BEGINS
  (pause 257)
;; GAME-TEXT-ID ENUM ENDS
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype game-text (structure)
  ((id   game-text-id  :offset-assert 0) ;; guessed by decompiler
   (text string        :offset-assert 4) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )



(deftype game-text-info (basic)
  ((length      int32              :offset-assert 4)
   (language-id int32              :offset-assert 8)
   (group-name  string             :offset-assert 12) ;; guessed by decompiler
   (data        game-text :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (lookup-text! (_type_ game-text-id symbol) string 9)
    )
  )


(define-extern *text-group-names* (array string))
(define-extern *common-text-heap* kheap)
(define-extern *common-text* game-text-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera-defs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype camera-bank (basic)
  ((collide-move-rad        float   :offset-assert 4)
   (joypad                  uint32  :offset-assert 8)
   (min-detectable-velocity float   :offset-assert 12)
   (attack-timeout          time-frame :offset-assert 16) ;; time-frame
   (default-string-max-y    meters  :offset-assert 24)
   (default-string-min-y    meters  :offset-assert 28)
   (default-string-max-z    meters  :offset-assert 32)
   (default-string-min-z    meters  :offset-assert 36)
   (default-string-push-z   meters  :offset-assert 40)
   (default-tilt-adjust     degrees :offset-assert 44) ;; degrees
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


(deftype camera-master-bank (basic)
  ((onscreen-head-height            meters  :offset-assert 4)
   (onscreen-foot-height            meters  :offset-assert 8)
   (target-height                   meters  :offset-assert 12)
   (up-move-to-pitch-ratio-in-air   float   :offset-assert 16)
   (down-move-to-pitch-ratio-in-air float   :offset-assert 20)
   (up-move-to-pitch-on-ground      float   :offset-assert 24)
   (down-move-to-pitch-on-ground    float   :offset-assert 28)
   (pitch-off-blend                 float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )


(define-extern *CAMERA-bank* camera-bank)
(define-extern *CAMERA_MASTER-bank* camera-master-bank)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype trail-node (structure)
  ((next-id         int16   :offset-assert 0)
   (prev-id         int16   :offset-assert 2)
   (parent-id       int16   :offset-assert 4)
   (x               int16   :offset-assert 6)
   (z               int16   :offset-assert 8)
   (first-conn      uint16  :offset-assert 10)
   (cost-from-start uint16  :offset-assert 12)
   (cost-to-goal    uint16  :offset-assert 14)
   (flags           uint8   :offset-assert 16)
   (conn-count      uint8   :offset-assert 17)
   )
  :method-count-assert 12
  :size-assert         #x12
  :flag-assert         #xc00000012
  (:methods
    (trail-node-method-9 () none 9)
    (trail-node-method-10 () none 10)
    (trail-node-method-11 () none 11)
    )
  )

(deftype trail-visgroup (structure)
  ((first-node uint16  :offset-assert 0)
   (node-count uint8   :offset-assert 2)
   (pad        uint8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(deftype trail-conn (structure)
  ((head-id     uint16  :offset-assert 0)
   (tail-id     uint16  :offset-assert 2)
   (flags       uint8   :offset-assert 4)
   (visgroup-id uint8   :offset-assert 5)
   (cost        uint16  :offset-assert 6)
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (trail-conn-method-9 () none 9)
    )
  )

(deftype trail-conn-hash-cell (structure)
  ((first-conn uint16  :offset-assert 0)
   (conn-count uint8   :offset-assert 2)
   (pad        uint8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype trail-conn-search (structure)
  ((best-conn-id         int32                  :offset-assert 0)
   (best-dist            float                  :offset-assert 4)
   (src-pos              vector                 :offset-assert 8)
   (conn-pos             vector                 :offset-assert 12)
   (debug-cells-searched int32                  :offset-assert 16)
   (debug-conns-searched int32                  :offset-assert 20)
   (bounds               bounding-box4w :inline :offset-assert 32)
   (cell-quads           qword        2 :inline  :offset-assert 64)
   (conn-quads           qword        7 :inline      :offset-assert 96)
   (cell-bits            vector16ub   2 :inline     :offset 64)
   ;; (conn-bits            UNKNOWN      2       :offset-assert 96) ??
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )


(deftype trail-conn-hash (basic)
  ((cell-width meters         :offset-assert 4)
   (origin     vector :inline :offset-assert 16)
   (cell       uint32         :offset-assert 32)
   (conn-ids   uint32         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )


(deftype trail-cached-search-info (structure)
  ((goal-conn-id  int16          :offset-assert 0)
   (orig-goal-pos vector :inline :offset-assert 16)
   (conn-goal-pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


(deftype trail-graph (basic)
  ((mode           uint8           :offset-assert 4)
   (search-id      uint32          :offset-assert 8)
   (open-head-id   int16           :offset-assert 12)
   (goal-conn-id   int16           :offset-assert 14)
   (goal-node-id   int16           :offset-assert 16)
   (node-count     uint16          :offset-assert 18)
   (conn-count     uint16          :offset-assert 20)
   (conn-mask      uint8           :offset-assert 22)
   (node           uint32          :offset-assert 24)
   (conn           uint32          :offset-assert 28)
   (conn-ids       uint32          :offset-assert 32)
   (visgroup       uint32          :offset-assert 36)
   (visnode-ids    uint32          :offset-assert 40)
   (conn-hash      basic           :offset-assert 44)
   (orig-start-pos vector  :inline :offset-assert 48)
   (orig-goal-pos  vector  :inline :offset-assert 64)
   (conn-start-pos vector  :inline :offset-assert 80)
   (conn-goal-pos  vector  :inline :offset-assert 96)
   (open-quads     qword 6 :inline :offset-assert 112)
   (closed-quads   qword 6 :inline :offset-assert 208)
   ; (open-bits      UNKNOWN 2       :offset-assert 112)
   ; (closed-bits    UNKNOWN 2       :offset-assert 208)
   )
  :method-count-assert 29
  :size-assert         #x130
  :flag-assert         #x1d00000130
  (:methods
    (trail-graph-method-9 () none 9)
    (trail-graph-method-10 () none 10)
    (trail-graph-method-11 () none 11)
    (trail-graph-method-12 () none 12)
    (trail-graph-method-13 () none 13)
    (trail-graph-method-14 () none 14)
    (trail-graph-method-15 () none 15)
    (trail-graph-method-16 () none 16)
    (trail-graph-method-17 () none 17)
    (trail-graph-method-18 () none 18)
    (trail-graph-method-19 () none 19)
    (trail-graph-method-20 () none 20)
    (trail-graph-method-21 () none 21)
    (trail-graph-method-22 () none 22)
    (trail-graph-method-23 () none 23)
    (trail-graph-method-24 () none 24)
    (trail-graph-method-25 () none 25)
    (trail-graph-method-26 () none 26)
    (trail-graph-method-27 () none 27)
    (trail-graph-method-28 () none 28)
    )
  )

(define-extern *trail-graph* trail-graph)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; minimap-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum minimap-flag
  :bitfield #t
  :type uint16
  (active      0) ;; 1
  (fade-in     1) ;; 2
  (fade-out    2) ;; 4
  (clamp       3) ;; 8
  (trail       4) ;; 16
  (task-graph  5) ;; 32
  (flash       6) ;; 64
  (minimap     7) ;; 128
  (background  8) ;; 256
  (task        9) ;; 512
  (enemy      10) ;; 1024
  (frustum    11) ;; 2048
  (racer      12) ;; 4096
  (bigmap     13) ;; 8192
  (goal       14) ;; 16384
  (city-only  15) ;; 32768
  )

(defenum minimap-class
  :type uint16
  :bitfield #f
  (none 0)
  (onintent 1)
  (ruins 2)
  (vinroom 3)
  (mountain 4)
  (hideout 5)
  (sewer 6)
  (atoll 7)
  (hiphog 8)
  (fortress 9)
  (gungame 10)
  (gun-yellow 11)
  (garage 12)
  (palace-cable 13)
  (guard 14)
  (goal 15)
  (goal-no-trail 16)
  (parking-spot 17)
  (forest 18)
  (kiosk 19)
  (dig 20)
  (canyon 21)
  (tomb 22)
  (tanker 23)
  (kid 24)
  (consite 25)
  (palace 26)
  (castle 27)
  (underport 28)
  (stadium 29)
  (port-turret 30)
  (oracle 31)
  (guard-frustum 32)
  (burning-bush 33)
  (gun-dark 34)
  (slumc-seal 35)
  (racer 36)
  (racer-target 37)
  (racer-errol 38)
  (flag 39)
  (bbush-gena 40)
  (bbush-gena-2 41)
  (bbush-genb 42)
  (bbush-genb-2 43)
  (bbush-genc 44)
  (bbush-genc-2 45)
  (bbush-sluma 46)
  (bbush-slumb   47)
  (bbush-slumb-2 48)
  (bbush-slumc 49)
  (bbush-port-3 50)
  (bbush-port-2 51)
  (bbush-port   52)
  (bbush-farma 53)
  (bbush-farmb 54)
  (bbush-inda 55)
  (bbush-indb 56)
  (bbush-marka 57)
  (bbush-markb 58)
  (bbush-markb-2 59)
  (bbush-pal 60)
  (bbush-pal-2 61)
  (bbush-stadium 62)
  (atoll-valve 63)
  (atoll-ashelin 64)
  (mountain-lens 65)
  (mountain-shard 66)
  (mountain-gear 67)
  (ruins-hut 68)
  (forest-samos 69)
  (metalhead 70)

  )

(deftype minimap-class-node (structure)
  ((default-position vector :inline :offset-assert 0)
   (flags minimap-flag  :offset-assert 16)
   (class minimap-class  :offset-assert 18)
   (name basic :offset-assert 20)
   (icon-xy vector2ub :inline :offset-assert 24)
   (scale float :offset-assert 28)
   (color rgba :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  ;; Failed to read fields.
  )


(deftype connection-minimap (connection-pers)
  ((handle handle :offset 8)
   (position vector :offset 16)
   (alpha float :offset 20)
   (class minimap-class-node :offset 24)
   (flags minimap-flag :offset 28)
   (node uint16 :offset 30)
   (edge-ry float :offset-assert 32)
   (last-world-pos vector :inline :offset-assert 48)
   (last-relative-pos vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; Failed to read fields.
  )



(deftype engine-minimap (engine-pers)
  ((alive-list-override connection-minimap  :offset 24)
   (dead-list-override  connection-minimap  :offset 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    )
  )

(deftype minimap-trail (structure)
  ((used-by        connection-minimap               :offset-assert 0)
   (search-id      uint32                           :offset-assert 4)
   (node-count     int16                            :offset-assert 8)
   (goal-node-id   int32                            :offset-assert 12)
   (node-path-dist float                            :offset-assert 16)
   (last-updated   uint64                           :offset-assert 24)
   (cached-info    trail-cached-search-info :inline :offset-assert 32)
   (node-id        uint16                   64      :offset-assert 80)
   )
  :method-count-assert 11
  :size-assert         #xd0
  :flag-assert         #xb000000d0
  (:methods
    (minimap-trail-method-9 () none 9)
    (minimap-trail-method-10 () none 10)
    )
  )



(deftype minimap-draw-work (structure)
  ((buf           basic            :offset-assert 0)
   (justify-right basic            :offset-assert 4)
   (draw-pos      vector4w :inline :offset-assert 16)
   (mat           matrix   :inline :offset-assert 32)
   (corner        vector4w  4 :inline       :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )



(deftype minimap (structure)
  ((draw-tmpl        dma-gif-packet :inline :offset-assert 0)
   (draw2-tmpl       dma-gif-packet :inline :offset-assert 32)
   (draw3-tmpl       dma-gif-packet :inline :offset-assert 64)
   (draw4-tmpl       dma-gif-packet :inline :offset-assert 96)
   (sprite-tmpl      dma-gif-packet :inline :offset-assert 128)
   (adgif-tmpl       dma-gif-packet :inline :offset-assert 160)
   (color            vector4w       :inline :offset-assert 192)
   (offset           vector         :inline :offset-assert 208)
   (minimap-corner   vector         :inline :offset-assert 224)
   (last-name        basic                  :offset-assert 240)
   (last-tex         basic                  :offset-assert 244)
   (target-inv-scale float                  :offset-assert 248)
   (map-bits         uint64                 :offset-assert 256)
   (level            basic                  :offset-assert 264)
   (ctywide          basic                  :offset-assert 268)
   (inv-scale        float                  :offset 212)
   (fade             float                  :offset 220)
   (engine           basic                  :offset-assert 272)
   (engine-key       uint32                 :offset-assert 276)
   (trail           minimap-trail 6 :inline :offset-assert 288)
   (race-tex         basic                  :offset-assert 1536)
   (race-scale       float                  :offset-assert 1540)
   (race-level       basic                  :offset-assert 1544)
   (sprite2-tmpl     dma-gif-packet :inline :offset-assert 1552)
   (race-corner      vector         :inline :offset-assert 1584)
   (goal-time        float                  :offset-assert 1600)
   (frustum-alpha    float                  :offset-assert 1604)
   )
  :method-count-assert 28
  :size-assert         #x648
  :flag-assert         #x1c00000648
  (:methods
    (minimap-method-9 () none 9)
    (minimap-method-10 () none 10)
    (minimap-method-11 () none 11)
    (minimap-method-12 () none 12)
    (minimap-method-13 () none 13)
    (minimap-method-14 () none 14)
    (minimap-method-15 () none 15)
    (minimap-method-16 () none 16)
    (minimap-method-17 () none 17)
    (minimap-method-18 () none 18)
    (minimap-method-19 () none 19)
    (minimap-method-20 () none 20)
    (minimap-method-21 () none 21)
    (minimap-method-22 () none 22)
    (minimap-method-23 () none 23)
    (minimap-method-24 () none 24)
    (minimap-method-25 () none 25)
    (minimap-method-26 () none 26)
    (minimap-method-27 () none 27)
    )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bigmap-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype bigmap-bit-mask (structure)
  ((data uint8 6656 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x1a00
  :flag-assert         #x900001a00
  )


(deftype bigmap-layer-mask (structure)
  ((data uint8 26624 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x6800
  :flag-assert         #x900006800
  )

(deftype bigmap-image (structure)
  ((clut-offset  uint32    :offset-assert 0)
   (image-offset uint32    :offset-assert 4)
   (pad          uint32  2 :offset-assert 8)
   (data         uint8   1 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x11
  :flag-assert         #x900000011
  )


(deftype bigmap-info (vector)
  ((scale     float     :offset 8 :score 1)
   (inv-scale float     :offset 12 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype bigmap-info-array (structure)
  ((data bigmap-info 21 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

(deftype bigmap-compressed-layers (structure)
  ((data    uint32 20  :offset-assert 0 :score -1)
   (layer0  uint32     :offset 0)
   (layer1  uint32     :offset 4)
   (layer2  uint32     :offset 8)
   (layer3  uint32     :offset 12)
   (layer4  uint32     :offset 16)
   (layer5  uint32     :offset 20)
   (layer6  uint32     :offset 24)
   (layer7  uint32     :offset 28)
   (layer8  uint32     :offset 32)
   (layer9  uint32     :offset 36)
   (layer10 uint32     :offset 40)
   (layer11 uint32     :offset 44)
   (layer12 uint32     :offset 48)
   (layer13 uint32     :offset 52)
   (layer14 uint32     :offset 56)
   (layer15 uint32     :offset 60)
   (layer16 uint32     :offset 64)
   (layer17 uint32     :offset 68)
   (layer18 uint32     :offset 72)
   (layer19 uint32     :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )


(deftype bigmap (basic)
  ((drawing-flag          symbol                           :offset-assert 4)
   (loading-flag          symbol                           :offset-assert 8)
   (recording-flag        symbol                           :offset-assert 12)
   (fill-flag             symbol                           :offset-assert 16)
   (bigmap-index          uint32                           :offset-assert 20)
   (bigmap-image          external-art-buffer              :offset-assert 24)
   (tpage                 basic                            :offset-assert 28)
   (progress-minimap      basic                            :offset-assert 32)
   (mask-index            uint32                           :offset-assert 36)
   (bit-mask              bigmap-bit-mask                  :offset-assert 40)
   (compressed-next-index uint32                           :offset-assert 44)
   (max-next-index        uint32                           :offset-assert 48)
   (compressed-masks      uint32                  20       :offset-assert 52) ;; just a guess...
   (compressed-data       uint32                           :offset-assert 132)
   (layer-index           uint32                           :offset-assert 136)
   (layer-mask            bigmap-layer-mask                :offset-assert 140)
   (compressed-layers     bigmap-compressed-layers         :offset-assert 144)
   (layer-mask-enable     uint32                           :offset-assert 148)
   (load-index            uint32                           :offset-assert 152)
   (x0                    int32                            :offset-assert 156)
   (y0                    int32                            :offset-assert 160)
   (x1                    int32                            :offset-assert 164)
   (y1                    int32                            :offset-assert 168)
   (y2                    int32                            :offset-assert 172)
   (goal-time             float                            :offset-assert 176)
   (sprite-tmpl           dma-gif-packet           :inline :offset-assert 192)
   (draw-tmpl             dma-gif-packet           :inline :offset-assert 224)
   (adgif-tmpl            dma-gif-packet           :inline :offset-assert 256)
   (offset                vector                   :inline :offset-assert 288)
   (size                  float                            :offset 296)
   (scale                 float                            :offset 300)
   (draw-offset           vector                   :inline :offset-assert 304)
   (draw-size             float                            :offset 312)
   (draw-scale            float                            :offset 316)
   (scroll                vector                   :inline :offset-assert 320)
   (pos                   vector4w                 :inline :offset-assert 336)
   (color                 vector4w                 :inline :offset-assert 352)
   (corner                vector4w              4  :inline :offset-assert 368)
   (auto-save-icon-flag   basic                            :offset-assert 432)
   )
  :method-count-assert 28
  :size-assert         #x1b4
  :flag-assert         #x1c000001b4
  (:methods
    (new (symbol type) _type_ 0)
    (initialize (_type_) none 9) ;; some sort of init?
    (update (_type_) none 10)
    (bigmap-method-11 () none 11)
    (bigmap-method-12 () none 12)
    (bigmap-method-13 () none 13)
    (bigmap-method-14 () none 14)
    (bigmap-method-15 () none 15)
    (bigmap-method-16 () none 16)
    (bigmap-method-17 () none 17)
    (bigmap-method-18 () none 18)
    (bigmap-method-19 () none 19)
    (bigmap-method-20 () none 20)
    (bigmap-method-21 () none 21)
    (bigmap-method-22 () none 22)
    (bigmap-method-23 () none 23)
    (bigmap-method-24 () none 24)
    (bigmap-method-25 () none 25)
    (bigmap-method-26 () none 26)
    (bigmap-method-27 () none 27)
    )
  )

(define-extern *bigmap-info-array* bigmap-info-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum language-enum
  :type int64
  (english)
  (french)
  (german)
  (spanish)
  (italian)
  (japanese)
  (korean)
  (uk-english)
  )

(deftype user-setting-data (structure)
  ((border-mode symbol)
   (process-mask process-mask)
   (unknown-int32-00 int32 :offset-assert 8)
   (language language-enum :offset 16)
   (unknown-int32-01 int32 :offset-assert 24)
   (unknown-int32-02 int32 :offset-assert 28)
   (vibration symbol :offset 32)
   (play-hints symbol :offset 36)
   (movie (pointer process) :offset 40)
   (talking (pointer process))
   (spooling (pointer process))
   (hint (pointer process))
   (ambient (pointer process) :offset-assert 56)
   (video-mode symbol)
   (aspect-ratio symbol :offset-assert 64)
   (unknown-uint32-00 uint32 :offset 68)
   (auto-save symbol :offset 72)
   (bg-r float :offset-assert 76)
   (bg-g float)
   (bg-b float)
   (bg-a float)
   (bg-a-speed float)
   (bg-a-force float)
   (allow-progress symbol :offset-assert 100)
   (allow-pause symbol :offset-assert 104)
   (ocean-off symbol :offset-assert 108)
   (allow-look-around symbol :offset-assert 112)
   (unknowng-symbol-00 symbol :offset-assert 116)
   (movie-name symbol :offset 120)
   (weather symbol :offset-assert 124)
   (mouse symbol :offset-assert 128)
   (cursor symbol :offset-assert 132)
   (task-mask task-mask :offset 136)
   (region-mode symbol :offset-assert 140)
   (duck symbol :offset 144)
   (attack symbol)
   (gun symbol)
   (board symbol)
   (jump symbol)
   (speed-mult float)
   (features uint64)
   (sfx-volume float)
   (sfx-movie-volume float :offset-assert 180)
   (music-volume float)
   (music-volume-movie float)
   (dialog-volume float)
   (dialog-volume-hint float)
   (ambient-volume float)
   (ambient-volume-move float)
   (sound-flava uint8)
   (sound-flava-priority float :offset-assert 212)
   (mode-sound-bank uint32)
   (sound-excitement float)
   (sound-reverb float)
   (stereo-mode int32)
   (music symbol)
   (sound-stinger int32 :offset-assert 236)
   (spool-anim spool-anim)
   (sound-mode uint32)
   (task-manager (pointer process))
   (task symbol)
   (airlock symbol :offset-assert 256)
   (minimap uint16)
   (sound-tune uint32)
   (allow-continue symbol :offset-assert 268)
   (spotlight-color rgba)
   (subtitle symbol :offset-assert 276)
   (borrow symbol)
   (doorway symbol)
   (gen symbol)
   (half-speed symbol)
   (gun-buoy symbol)
   (double-jump symbol)
   (pilot symbol)
   (pilot-exit symbol)
   (exclusive-task int32 :offset-assert 312)
   (speech-control symbol)
   (vehicle-hijacking symbol)
   (darkjak symbol)
   (endlessfall symbol)
   (rain float)
   (snow float)
   (exclusive-load symbol)
   (render symbol)
   (allow-timeout symbol)
   (mirror symbol)
   (movie-skip-frame float)
   (allow-blackout symbol)
   (race-minimap int32 :offset-assert 364)
   (extra-bank symbol)
   (beard symbol)
   (ignore-target symbol)
   (subtitle-language language-enum)
   (sound-bank-load symbol)
   (allow-error symbol)
   (under-water-pitch-mod float :offset-assert 400)
   (dummy object 31)
   )
  :method-count-assert 11
  :size-assert         #x210
  :flag-assert         #xb00000210
  (:methods
    (user-setting-data-method-9 (_type_ engine engine-pers engine) user-setting-data 9)
    (user-setting-data-method-10 "set-defaults! perhaps?" (_type_ object symbol float uint) user-setting-data 10)
    )
  )

;; TODO - a duplicate...but in camera-slave it seems to only be 32 bits....?
(defenum cam-slave-options
  :type uint64
  :bitfield #t
  (BUTT_CAM)
  (SAME_SIDE)
  (MOVE_SPHERICAL)
  (ALLOW_Z_ROT)
  (JUMP_PITCHES)
  (COLLIDE)
  (FIND_HIDDEN_TARGET)
  (DRAG)
  (PLAYER_MOVING_CAMERA)
  (LINE_OF_SIGHT)
  (MOVEMENT_BLOCKED)
  (SHRINK_MAX_ANGLE)
  (GOTO_GOOD_POINT)
  (BIKE_MODE)
  (NO_ROTATE)
  (STICKY_ANGLE)
  (BLOCK_RIGHT_STICK)
  (ALLOW_SHIFT_BUTTONS)
  (GUN_CAM)
  (WIDE_FOV)
  (RAPID_TRACKING)
  (EASE_SPLINE_IDX)
  (VERTICAL_FOLLOW_MATCHES_CAMERA)
  (HAVE_BUTT_HANDLE))

(defenum cam-master-options
  :type uint64
  :bitfield #t
  (HAVE_TARGET) ;; 1
  (SET_COMBINER_AXIS) ;; 2
  (FLIP_COMBINER) ;; 4
  (HAVE_EASE_TO_POS) ;; 8
  (IN_BASE_REGION) ;; 10
  (IGNORE_ANALOG) ;; 20
  (READ_BUTTONS) ;; 40
  (IMMEDIATE_STRING_MIN_MAX) ;; 80
  )

(deftype cam-setting-data (structure)
  ((fov degrees)
   (pov-handle handle :offset 16)
   (pov-bone int32)
   (pov-offset vector :inline)
   (string-default symbol :offset-assert 48)
   (string-max-length meters)
   (string-min-length meters)
   (string-max-height meters)
   (string-min-height meters)
   (string-cliff-height meters)
   (string-camera-ceiling meters)
   (gun-max-height meters)
   (gun-min-height meters)
   (string-local-down vector :inline)
   (slave-options cam-slave-options :offset-assert 112)
   (matrix-blend-max-angle degrees :offset-assert 120)
   (matrix-blend-max-partial float)
   (string-spline-max-move meters)
   (string-spline-accel meters)
   (string-spline-max-move-player meters)
   (string-spline-accel-player meters)
   (string-startup-vector vector :inline)
   (string-use-startup-vector symbol)
   (look-at-point vector :inline :offset-assert 176)
   (use-look-at-point symbol)
   (target-height meters)
   (foot-offset meters)
   (head-offset meters)
   (teleport-on-entity-change symbol)
   (entity-name string)
   (entity-or-mode-changed symbol)
   (master-options cam-master-options)
   (entity-mask uint32 :offset-assert 232)
   (mode-name symbol)
   (real-entity-name string)
   (cam-mode symbol :offset-assert 244)
   (interp-time uint32)
   (no-intro symbol)
   (use-point-of-interest symbol)
   (point-of-interest vector :inline :offset-assert 272)
   (handle-of-interest handle)
   (mouse-tumble-point vector :inline)
   (use-mouse-tumble-point symbol)
   (mouse-input symbol)
   (cpad1-skip-buttons symbol)
   (butt-handle handle)
   (butt-angle float)
   (extra-follow-height float)
   (1Tinterp-time-priority uint32)
   (string-max-length-default symbol)
   (string-min-length-default symbol)
   (string-max-height-default symbol)
   (string-min-height-default symbol :offset-assert 368)
   (dummy object 102)
   )
  :method-count-assert 11
  :size-assert         #x30c
  :flag-assert         #xb0000030c
  (:methods
    (cam-setting-data-method-9 (_type_ engine engine-pers engine) cam-setting-data 9)
    (cam-setting-data-method-10 (_type_ object (pointer process) float int) none 10)
    )
  )

(declare-type engine basic)
(deftype setting-control (basic)
  ((user-current                 user-setting-data :inline :offset-assert 16)
   (user-target                  user-setting-data :inline :offset-assert 544)
   (user-default                 user-setting-data :inline :offset-assert 1072)
   (cam-current                  cam-setting-data  :inline :offset-assert 1600)
   (cam-target                   cam-setting-data  :inline :offset-assert 2384)
   (cam-default                  cam-setting-data  :inline :offset-assert 3168)
   (engine                       engine                    :offset-assert 3948) ;; guessed by decompiler
   (engine-pers                  engine-pers                     :offset-assert 3952)
   (engine-hi                    engine                     :offset-assert 3956)
   (sound-stinger-time           time-frame                    :offset-assert 3960)
   (sound-stinger-change-time    time-frame           4       :offset-assert 3968)
   (sound-excitement-change-time time-frame                    :offset-assert 4000)
   (sound-excitement-targ        float                     :offset-assert 4008)
   (sound-excitement-level       uint32                    :offset-assert 4012)
   )
  :method-count-assert 19
  :size-assert         #xfb0
  :flag-assert         #x1300000fb0
  (:methods
    (new (symbol type int) _type_ 0)
    (add-setting (_type_ process symbol object object object) none 9)
    (persist-with-delay (_type_ process time-frame object object float object) none 10)
    (set-setting (_type_ process symbol object object object) none 11)
    (remove-setting (_type_ process symbol) none 12)
    (kill-persister "Calls [[engine-pers::kill-matching]]" (_type_ engine-pers object) none 13)
    (setting-control-method-14 (_type_ object) connectable 14)
    (remove-setting-by-arg0
      "Calls [[engine::remove-by-param0]] on `engine-hi`"
      (_type_ object) none 15)
    (set-setting-by-param
      "Same as [[setting-control::set-setting]] but will [[engine::remove-by-param0]] using the symbol provided"
      (_type_ symbol object object object) connection 16)
    (apply-settings (_type_) user-setting-data 17)
    (update (_type_) user-setting-data 18)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; capture                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern gs-set-default-store-image (function gs-store-image-packet int int int int int int int int))
(define-extern store-image (function screen-shot-work int))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memory-usage-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum mem-usage-id
    :bitfield #f
    :type uint32
    (entity 43)
    (camera 44)

    (res 48)

    (bsp-leaf-vis-self 62)
    (bsp-leaf-vis-adj  63)

    (level-code   65)
    (entity-links 66)

    (joint            67)

    (joint-anim-compressed-control 69)
    (joint-anim-fixed 70)
    (joint-anim-frame 71)

    (art-group        73)
    (art-mesh-anim    74)
    (art-mesh-geo     75)
    (art-joint-geo    76)
    (art-joint-anim   77)

    (joint-anim-drawable 78)

    (eye-anim        111)
    )

(deftype memory-usage-info (structure)
  ((name  string  :offset-assert 0) ;; guessed by decompiler
   (count int32   :offset-assert 4)
   (used  int32   :offset-assert 8)
   (total int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype memory-usage-block (basic)
  ((work-bsp basic                 :offset-assert 4)
   (length   int32                 :offset-assert 8)
   (data     memory-usage-info 112 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x710
  :flag-assert         #xc00000710
  (:methods
    (reset! (_type_) _type_ 9)
    (memory-usage-block-method-10 () none 10) ;; (calculate-total (_type_) int 10)
    (print-mem-usage (_type_ level object) none 11)
    )
  )

(define-extern *mem-usage* memory-usage-block)
(define-extern *dma-mem-usage* memory-usage-block)
(define-extern *temp-mem-usage* memory-usage-block)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blit-displays-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype blit-displays-work (structure)
  ((adgif-tmpl               dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl              dma-gif-packet :inline :offset-assert 32)
   (sprite-slow-tmpl         dma-gif-packet :inline :offset-assert 64)
   (line-tmpl                dma-gif-packet :inline :offset-assert 96)
   (scan-tmpl                dma-gif-packet :inline :offset-assert 128)
   (color                    vector4w       :inline :offset-assert 160)
   (line-color               uint64                 :offset-assert 176)
   (scan-colors              vector4w 15 :inline    :offset-assert 192) ;; guesss
   (menu-mode                basic                  :offset-assert 432)
   (screen-copied            basic                  :offset-assert 436)
   (vu1-enable-user-menu     uint64                 :offset-assert 440)
   (texture-enable-user-menu uint32                 :offset-assert 448)
   (count-down               uint32                 :offset-assert 452)
   (horizontal-flip-flag     basic                  :offset-assert 456)
   (scan-alpha               float                  :offset-assert 460)
   (scanline                 uint32                 :offset-assert 464)
   (progress-interp          float                  :offset-assert 468)
   (progress-interp-dest     float                  :offset-assert 472)
   (progress-interp-speed    float                  :offset-assert 476)
   )
  :method-count-assert 9
  :size-assert         #x1e0
  :flag-assert         #x9000001e0
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO skip

#|
(deftype texture-page-dir (basic)
  ()
  :method-count-assert 10
  :size-assert         #x14
  :flag-assert         #xa00000014
  ;; Failed to read fields.
  (:methods
    (texture-page-dir-method-9 () none 9) ;; (unlink-textures-in-heap! (_type_ kheap) int 9)
    )
  )
|#

(define-extern texture-bpp (function gs-psm int))
(define-extern texture-qwc (function int int gs-psm int))
(define-extern physical-address (function pointer pointer))
(define-extern dma-buffer-add-ref-texture (function dma-buffer pointer int int gs-psm none))
(define-extern gs-find-block (function int int gs-psm int))
(define-extern gs-page-width  (function gs-psm int))
(define-extern gs-page-height (function gs-psm int))
(define-extern gs-block-width (function gs-psm int))
(define-extern gs-block-height (function gs-psm int))
(define-extern gs-largest-block (function int int gs-psm int))
(define-extern gs-blocks-used (function int int gs-psm int))
(define-extern texture-page-default-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-common-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-font-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-common-boot-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern upload-vram-data (function dma-buffer int pointer int int none))
(define-extern upload-vram-pages  (function texture-pool texture-pool-segment texture-page tex-upload-mode bucket-id int))
(define-extern update-vram-pages (function texture-pool texture-pool-segment texture-page tex-upload-mode int))
(define-extern upload-vram-pages-pris (function texture-pool texture-pool-segment texture-page bucket-id (pointer int32) int))
(define-extern texture-page-level-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-size-check (function texture-pool level symbol int))
(define-extern set-skull-gem-masks (function none))
(define-extern upload-textures (function texture-pool none))
(define-extern *txt-dma-list* dma-buffer)
(define-extern texture-relocate (function dma-buffer texture int gs-psm int dma-buffer))
(define-extern relocate-later (function symbol))
(define-extern texture-page-login  (function texture-id (function texture-pool texture-page kheap int texture-page) kheap texture-page-dir-entry))
(define-extern lookup-texture-by-id (function texture-id texture))
(define-extern lookup-texture-by-id-fast (function texture-id texture))
(define-extern lookup-texture-by-name (function string string (pointer texture-page) texture))
(define-extern lookup-texture-id-by-name (function string string texture-id))
(define-extern lookup-level-texture-by-name (function string level (pointer texture-page) texture))
(define-extern *shader-list* pair)
(define-extern *edit-shader* texture-id)
(define-extern link-texture-by-id (function texture-id adgif-shader texture-page-dir-entry))
(define-extern adgif-shader<-texture! (function adgif-shader texture adgif-shader))
(define-extern adgif-shader-update! (function adgif-shader texture none))
(define-extern adgif-shader<-texture-with-update! (function adgif-shader texture adgif-shader))
(define-extern hack-texture (function texture float))
(define-extern adgif-shader-login (function adgif-shader texture))
(define-extern adgif-shader-login-no-remap (function adgif-shader texture))
(define-extern adgif-shader-login-fast (function adgif-shader texture))
(define-extern adgif-shader-login-no-remap-fast (function adgif-shader texture))
(define-extern adgif-shader<-texture-simple! (function adgif-shader texture adgif-shader))
(define-extern set-dirty-mask! (function level int int int none))
(define-extern texture-page-dir-inspect (function texture-page-dir symbol none))
(define-extern *texture-pool* texture-pool)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype frame-stats (structure)
  ((field-time time-frame 2 :offset-assert 0) ;; guessed by decompiler
   (field      int32        :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype screen-filter (basic)
  ((draw?          symbol         :offset-assert 4)
   (bucket         bucket-id      :offset-assert 8)
   (color          vector :inline :offset-assert 16)
   (color-src      vector :inline :offset-assert 32)
   (color-dest     vector :inline :offset-assert 48)
   (extra          vector :inline :offset-assert 64)
   (speed          float          :offset 64)
   (current-interp float          :offset 68)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    (draw (_type_) none 9)
    (setup (_type_ vector vector float bucket-id) none 10)
    (disable (_type_) none 11)
    )
  )

(deftype col-rend (basic)
  ((draw?               symbol         :offset-assert 4)
   (outline?            symbol         :offset-assert 8)
   (show-back-faces?    symbol         :offset-assert 12)
   (show-normals?       symbol         :offset-assert 16)
   (ghost-hidden?       symbol         :offset-assert 20)
   (show-only           uint32         :offset-assert 24)
   (cspec               uint32         :offset-assert 28)
   (track               uint8          :offset-assert 32)
   (bbox-radius         float          :offset-assert 36)
   (bbox-center         vector :inline :offset-assert 48)
   (camera-to-bbox-dist float          :offset-assert 64)
   )
  :method-count-assert 10
  :size-assert         #x44
  :flag-assert         #xa00000044
  (:methods
    (col-rend-method-9 () none 9)
    )
  )

(define-extern *stats-poly* symbol)
(define-extern *stats-memory* symbol)
(define-extern *stats-memory-short* symbol)
(define-extern *stats-memory-level-index* int)
(define-extern *stats-collide* symbol)
(define-extern *stats-bsp* symbol)
(define-extern *stats-buffer* symbol)
(define-extern *stats-target* symbol)
(define-extern *stats-profile-bars* symbol)
(define-extern *stats-perf* symbol)
(define-extern *artist-all-visible* symbol)
(define-extern *artist-flip-visible* symbol)
(define-extern *artist-fix-visible* symbol)
(define-extern *artist-fix-frustum* symbol)
(define-extern *artist-error-spheres* symbol)
(define-extern *artist-use-menu-subdiv* symbol)
(define-extern *display-profile* symbol)
(define-extern *display-sidekick-stats* symbol)
(define-extern *display-quad-stats* symbol)
(define-extern *display-tri-stats* symbol)
(define-extern *display-ground-stats* symbol)
(define-extern *display-collision-marks* symbol)
(define-extern *display-collide-cache* symbol)
(define-extern *display-render-collision* symbol)
(define-extern *display-hipri-collision-marks* symbol)
(define-extern *display-edge-collision-marks* symbol)
(define-extern *display-geo-marks* symbol)
(define-extern *display-target-marks* symbol)
(define-extern *target-rc-board-controls* symbol)
(define-extern *display-collide-history* int)
(define-extern *display-xyz-axes* symbol)
(define-extern *display-cam-collide-history* symbol)
(define-extern *record-cam-collide-history* symbol)
(define-extern *display-cam-master-marks* symbol)
(define-extern *display-cam-other* symbol)
(define-extern *display-camera-marks* symbol)
(define-extern *camera-no-mip-correction* symbol)
(define-extern *display-cam-los-info* symbol)
(define-extern *display-cam-los-debug* symbol)
(define-extern *display-cam-los-marks* symbol)
(define-extern *display-cam-coll-marks* symbol)
(define-extern *display-camera-info* symbol)
(define-extern *display-camera-old-stats* symbol)
(define-extern *display-camera-last-attacker* symbol)
(define-extern *display-file-info* symbol)
(define-extern *display-actor-marks* symbol)
(define-extern *display-sprite-info* symbol)
(define-extern *display-sprite-marks* symbol)
(define-extern *display-sprite-spheres* symbol)
(define-extern *display-entity-errors* symbol)
(define-extern *display-instance-info* symbol)
(define-extern *display-deci-count* symbol)
(define-extern *sync-dma* symbol)

;; +++main-h:strip-lines-controls
(defenum strip-lines-controls
  :type int64
  (none 0)
  (strippable 1)
  (convertible 2)
  (good 3)
  (edgeable 4)
  (ordinary 8)
  (color-mismatch 16)
  (shader-mismatch 32)
  (uv-mismatch 64)
  (too-big 128)
  (bad 240)
  (all-edges 255)
  (strips 256)
  (frags 512))
;; ---main-h:strip-lines-controls

(define-extern *display-strip-lines* strip-lines-controls)

(define-extern *display-battle-marks* symbol)
(define-extern *display-joint-axes* symbol)
(define-extern *display-nav-marks* symbol)
(define-extern *display-nav-network* symbol)
(define-extern *display-path-marks* symbol)
(define-extern *display-vol-marks* symbol)
(define-extern *display-water-marks* symbol)
(define-extern *display-nav-mesh* symbol)
(define-extern *display-actor-pointer* symbol)
(define-extern *display-actor-vis* symbol)
(define-extern *display-actor-graph* symbol)
(define-extern *display-traffic-height-map* symbol)
(define-extern *display-trail-graph* symbol)
(define-extern *display-color-bars* symbol)
(define-extern *display-bug-report* symbol)
(define-extern *display-level-border* symbol)
(define-extern *display-memcard-info* symbol)
(define-extern *display-split-boxes* symbol)
(define-extern *display-split-box-info* symbol)
(define-extern *display-texture-distances* symbol)
(define-extern *display-texture-download* symbol)
(define-extern *display-art-control* symbol)
(define-extern *display-gui-control* symbol)
(define-extern *display-level-spheres* symbol)
(define-extern *time-of-day-fast* symbol)
(define-extern *display-iop-info* symbol)
(define-extern *ambient-sound-class* symbol)
(define-extern *slow-frame-rate* symbol)
(define-extern *display-region-marks* symbol)
(define-extern *execute-regions* symbol)
(define-extern *debug-pause* symbol)
(define-extern *debug-view-anims* symbol)
(define-extern *debug-unkillable* symbol)
(define-extern *debug-actor* object)
(define-extern *gun-marks* symbol)

;; TODO - is a symbol for sure but...you can pick multiple options?
;; (defenum bug-report-mode
;;   :bitfield #t
;;   :type int64
;;   (display)
;;   (screen)
;;   (listener)
;;   (file))

(define-extern *bug-report-output-mode* symbol)

;; +++main-h:scene-controls
(defenum scene-controls
  :type int64
  (all-off 0)
  (channel 1)
  (anim-name 2)
  (dma-size 4)
  (bounds-spheres 8)
  (actors 16)
  (actor-marks 32)
  (special-fma-spheres 64)
  (all-on 95))
;; ---main-h:scene-controls

(define-extern *display-scene-control* scene-controls)

;; +++main-h:bot-marks-controls
(defenum bot-marks-controls
  :type int64
  (all-off 0)
  (course-spots 1)
  (task-spots 2)
  (all-on 3))
;; ---main-h:bot-marks-controls

(define-extern *display-bot-marks* bot-marks-controls)

;; +++main-h:race-marks-controls
(defenum race-marks-controls
  :type int64
  (all-off 0)
  (path0-red 1)
  (path1-green 2)
  (path2-blue 4)
  (path3-yellow 8)
  (path4-cyan 16)
  (path5-violet 32)
  (path6-orange 64)
  (path7-black 128)
  (all-paths-on 255))
;; ---main-h:race-marks-controls

(define-extern *display-race-marks* race-marks-controls)
(define-extern *race-record-path* symbol)

;; +++main-h:race-selection
(defenum race-selection
  :type int64
  (kiera-class3 0)
  (kiera-class2 1)
  (kiera-class1 2)
  (errol 3)
  (bush-class3 4)
  (bush-class2 5)
  (bush-class1 6)
  (bush-errol 7)
  (bush-port 8)
  (bush-class3-reverse 9)
  (bush-class2-reverse 10)
  (bush-class1-reverse 11))
;; ---main-h:race-selection

(define-extern *select-race* race-selection)
(define-extern *select-race-path* int)
(define-extern *bot-record-path* int)

;; +++main-h:subdivide-setting
(defenum subdivide-setting
  :type int64
  (textured 0)
  (outline 1)
  (gouraud 2)
  (hack 3))
;; ---main-h:subdivide-setting

(define-extern *subdivide-draw-mode* subdivide-setting)
(define-extern *subdivide-scissor-draw-mode* subdivide-setting)
(define-extern *subdivide-foreground-draw-mode* subdivide-setting)
(define-extern *subdivide-ocean-draw-mode* subdivide-setting)

;; +++main-h:ocean-height-hack
(defenum ocean-height-hack
  :type int64
  (zero 1)
  (far-below 2)
  (sewer-start 3)
  (sewer-hi 4)
  (sewer-med 5)
  (sewer-lo 6))
;; ---main-h:ocean-height-hack

(define-extern *ocean-height-hack* ocean-height-hack)

(define-extern *dproc* process)
(define-extern *run* symbol)
(define-extern *teleport* symbol)
(define-extern *teleport-count* int)
(define-extern *draw-hook*  (function none))
(define-extern *debug-hook* pair)
(declare-type debug-menu-context basic)
(define-extern *menu-hook* (function debug-menu-context))
(define-extern *progress-hook* (function none))
(define-extern *dma-timeout-hook* (function none))
(define-extern *frame-stats* frame-stats)
(define-extern *col-rend* col-rend)
(define-extern debug-actor? (function object symbol))

(declare-type time-of-day-proc process)
(define-extern *time-of-day* (pointer time-of-day-proc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mspace-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype joint (basic)
  ((name      basic          :offset-assert 4)
   (number    int32          :offset-assert 8)
   (parent    joint          :offset-assert 12) ;; guessed by decompiler
   (bind-pose matrix :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype bone-cache (structure)
  ((bone-matrix   uint32  :offset-assert 0)
   (parent-matrix uint32  :offset-assert 4)
   (dummy         uint32  :offset-assert 8)
   (frame         uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bone (structure)
  ((transform matrix :inline :offset-assert 0)
   (position  vector :inline :offset 48)
   (scale     vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype skeleton (inline-array-class)
  ((bones bone :inline :dynamic))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cspace (structure)
  ((parent    cspace    :offset-assert 0)
   (joint     joint     :offset-assert 4) ;; guessed by decompiler
   (joint-num int16     :offset-assert 8)
   (geo       basic     :offset-assert 12)
   (bone      bone      :offset-assert 16)
   (param0    function  :offset-assert 20) ;; guessed by decompiler
   (param1    basic     :offset-assert 24)
   (param2    basic     :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  ;; field param1 uses ~A with a signed load field param2 uses ~A with a signed load
  (:methods
    (new (symbol type basic) _type_ 0)
    (reset-and-assign-geo! (_type_ basic) _type_ 9)
    )
  )

(deftype cspace-array (inline-array-class)
  ((data cspace :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type region-prim-list structure)

(deftype drawable (basic)
  ((id      int16          :offset-assert 4)
   (bsphere vector :inline :offset-assert 16)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    (login (_type_) _type_ 9)
    (draw (_type_ _type_ display-frame) none 10)
    (drawable-method-11 () none 11) ;; (collide-with-box (_type_ int collide-list) none 11)
    (drawable-method-12 () none 12) ;; (collide-y-probe (_type_ int collide-list) none 12)
    (collect-stats (_type_) none 13) ;; (collide-ray (_type_ int collide-list) none 13)
    (debug-draw (_type_ drawable display-frame) none 14)
    (unpack-vis (_type_ (pointer int8) (pointer int8)) (pointer int8) 15) ;;
    (collect-regions (_type_ sphere int region-prim-list) none 16)
    )
  )



(deftype drawable-error (drawable)
  ((name string  :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x24
  :flag-assert         #x1100000024
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-group-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype drawable-group (drawable)
  ((length int16 :offset 6)
   (data    drawable :dynamic  :offset-assert 32)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  ;; Failed to read fields.
  (:methods
     ;; (new (symbol type int) _type_ 0)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-inline-array-h        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-inline-array (drawable)
  ((length int16  :offset 6)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; draw-node-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype draw-node (drawable)
  ((child-count uint8     :offset 6)
   (flags       uint8     :offset 7)
   (child       drawable  :offset 8) ;; guessed by decompiler
   (distance    float     :offset 12)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  ;; field distance is a float printed as hex?
  (:methods
    )
  )


(deftype drawable-inline-array-node (drawable-inline-array)
  ((data draw-node 1 :inline)
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  ;; Failed to read fields.
  (:methods
    )
  )


(deftype draw-node-dma (structure)
  ((banka draw-node 32 :inline :offset-assert 0)
   (bankb draw-node 32 :inline :offset-assert 1024)
   )
  :method-count-assert 9
  :size-assert         #x800
  :flag-assert         #x900000800
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-tree-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-tree (drawable-group)
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-tree-array (drawable-group)
  ((trees drawable-tree :dynamic :offset 32 :score 100))
  :flag-assert #x1100000020
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-actor-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-actor (drawable)
  ((actor entity-actor  :offset 8) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    )
  )


(deftype drawable-tree-actor (drawable-tree)
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-inline-array-actor (drawable-inline-array)
  ((data drawable-actor 1 :inline)
   (pad uint8 4))
  :flag-assert #x1100000044
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype region (structure)
  ((id        uint32  :offset-assert 0)
   (on-enter  basic   :offset-assert 4)
   (on-inside basic   :offset-assert 8)
   (on-exit   basic   :offset-assert 12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  ;; field on-enter uses ~A with a signed load field on-inside uses ~A with a signed load field on-exit uses ~A with a signed load
  (:methods
    (region-method-9 () none 9)
    )
  )


(deftype region-array (inline-array-class)
  ((data             region :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype drawable-region-prim (drawable)
  ((region region  :offset 8)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    (drawable-region-prim-method-17 () none 17)
    (drawable-region-prim-method-18 () none 18)
    (drawable-region-prim-method-19 () none 19)
    )
  )


(deftype drawable-tree-region-prim (drawable-tree)
  ((name basic :offset 8)
   (data2 drawable-inline-array :dynamic :offset 32 :score 1))
  :method-count-assert 19
  :size-assert         #x20
  :flag-assert         #x1300000020
  ;; Failed to read fields.
  (:methods
    (drawable-tree-region-prim-method-17 () none 17)
    (debug-print (_type_ vector object) none 18)
    )
  )


(deftype drawable-inline-array-region-prim (drawable-inline-array)
  ((data drawable-region-prim 1 :inline)
   (pad uint8 4))
  :flag-assert #x1100000044
  )


(deftype drawable-region-sphere (drawable-region-prim)
  ()
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    )
  )

(deftype region-face-data (structure)
  ((normal        vector  :inline  :offset-assert 0)
   (normal-offset float            :offset 12)
   (num-points    uint32           :offset-assert 16)
   (points        vector :inline :dynamic :offset-assert 32) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype drawable-region-face (drawable-region-prim)
  ((data region-face-data  :offset 12)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    )
  )

(deftype region-face-array (inline-array-class)
  ((data region-face-data :dynamic :offset 20) ;; not sure what's going on here.
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype drawable-region-volume (drawable-region-prim)
  ((faces region-face-array  :offset 12)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    )
  )

(deftype region-prim-list (structure)
  ((num-items int32       :offset-assert 0)
   (items     drawable-region-prim 320 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x504
  :flag-assert         #x900000504
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype traffic-danger-info (structure)
  ((sphere        sphere :inline :offset-assert 0)
   (velocity      vector :inline :offset-assert 16)
   (handle        uint64         :offset-assert 32)
   (notify-radius float          :offset-assert 40)
   (danger-level  float          :offset-assert 44)
   (decay-rate    float          :offset-assert 48)
   (flags         uint8          :offset-assert 52)
   (danger-type   uint8          :offset-assert 53)
   )
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )

(deftype traffic-suppression-params (structure)
  ((bbox     bounding-box :inline :offset-assert 0)
   (duration uint64               :offset-assert 32)
   (id       int8                 :offset-assert 40)
   )
  :method-count-assert 13
  :size-assert         #x29
  :flag-assert         #xd00000029
  (:methods
    (traffic-suppression-params-method-9 () none 9)
    (traffic-suppression-params-method-10 () none 10)
    (has-valid-id? (_type_) none 11)
    (traffic-suppression-params-method-12 () none 12)
    )
  )

(deftype traffic-object-spawn-params (structure)
  ((object-type uint8              :offset-assert 0)
   (behavior    uint64             :offset-assert 8)
   (id          uint32             :offset-assert 16)
   (nav-mesh    basic              :offset-assert 20)
   (nav-branch  basic              :offset-assert 24)
   (position    vector     :inline :offset-assert 32)
   (rotation    quaternion :inline :offset-assert 48)
   (velocity    vector     :inline :offset-assert 64)
   (handle      uint64             :offset-assert 80)
   (guard-type  uint8              :offset-assert 88)
   (user-data   uint32             :offset-assert 92)
   (flags       uint32             :offset-assert 96)
   (proc        basic              :offset-assert 100)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(define-extern *traffic-manager* process)
(define-extern *ctywide-entity* object)
(define-extern *lwide-entity* object)
(define-extern *race-vehicle-entity* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-task-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++game-task-h:game-task
(defenum game-task
  :type uint8
  :bitfield #f
  (none 0)
  (complete 1)
  (dummy0 2)
  (eco-blue-button 3)
  (eco-yellow-button 4)
  (eco-red-button 5)
  (fortress-escape 6)
  (city-help-kid 7)
  (city-vehicle-training 8)
  (ruins-tower 9)
  (atoll-water 10)
  (fortress-dump 11)
  (city-krew-delivery 12)
  (city-red-gun-training 13)
  (atoll-sig 14)
  (sewer-enemy 15)
  (strip-rescue 16)
  (atoll-battle 17)
  (mountain-lens 18)
  (mountain-gear 19)
  (mountain-shard 20)
  (mountain-collection 21)
  (city-keira-delivery 22)
  (stadium-board1 23)
  (city-krew-collection 24)
  (city-yellow-gun-training 25)
  (drill-eggs 26)
  (city-power 27)
  (palace-cable 28)
  (palace-boss 29)
  (city-shuttle 30)
  (ruins-enemy 31)
  (city-blue-gun-training 32)
  (forest-scouts 33)
  (city-escort-kid 34)
  (dig-knock-down 35)
  (strip-grenade 36)
  (drill-ship 37)
  (city-port-run 38)
  (city-meet-brutter 39)
  (sewer-board 40)
  (forest-hunt 41)
  (city-intercept-tanker 42)
  (stadium-race-class3 43)
  (city-protect-water-slums 44)
  (dig-find-totem 45)
  (city-destroy-guard-vehicles 46)
  (city-play-onin-game 47)
  (canyon-insert-items 48)
  (tomb-poles 49)
  (tomb-water 50)
  (tomb-boss 51)
  (fortress-save-friends 52)
  (sewer-escort 53)
  (city-dark-gun-training 54)
  (stadium-race-class2 55)
  (city-stop-bomb-bots 56)
  (city-errol-challenge 57)
  (strip-drop 58)
  (ruins-mech 59)
  (forest-protect 60)
  (drill-mech 61)
  (city-save-lurkers 62)
  (stadium-race-class 63)
  (palace-sneak-in 64)
  (castle-break-in 65)
  (castle-boss 66)
  (city-whack 67)
  (under-mech 68)
  (under-sig 69)
  (city-defend-stadium 70)
  (consite-find-baron 71)
  (nest-get-to-gun 72)
  (nest-enter 73)
  (nest-boss 74)
  (city-win 75)
  (city-oracle 76)
  (city-burning-bush-ring-1 77)
  (city-burning-bush-get-to-1 78)
  (city-burning-bush-get-to-2 79)
  (city-burning-bush-get-to-3 80)
  (city-burning-bush-get-to-4 81)
  (city-burning-bush-collection-1 82)
  (city-burning-bush-racepoint-1 83)
  (city-burning-bush-ring-2 84)
  (city-burning-bush-get-to-5 85)
  (city-burning-bush-get-to-6 86)
  (city-burning-bush-shuttle-1 87)
  (city-burning-bush-get-to-7 88)
  (city-burning-bush-get-to-8 89)
  (city-burning-bush-get-to-9 90)
  (city-burning-bush-collection-2 91)
  (city-burning-bush-get-to-10 92)
  (city-burning-bush-get-to-11 93)
  (city-burning-bush-ring-3 94)
  (city-burning-bush-get-to-12 95)
  (city-burning-bush-bombbot-1 96)
  (city-burning-bush-get-to-13 97)
  (city-burning-bush-get-to-14 98)
  (city-burning-bush-get-to-15 99)
  (city-burning-bush-collection-3 100)
  (city-burning-bush-race-errol 101)
  (city-burning-bush-race-port 102)
  (stadium-burning-bush-race-board 103)
  (stadium-burning-bush-race-class3 104)
  (stadium-burning-bush-race-class2 105)
  (stadium-burning-bush-race-class1 106)
  (stadium-burning-bush-race-class3-r 107)
  (stadium-burning-bush-race-class2-r 108)
  (stadium-burning-bush-race-class1-r 109)
  (max 110))
;; ---game-task-h:game-task

;; +++game-task-h:game-task-node
(defenum game-task-node
  :type uint32
  :bitfield #f
  (dig-knock-down-resolution 113)
  (tomb-boss-torches 167)
  (fortress-save-friends-resolution 172)
  (drill-mech-resolution 204)
  (drill-mech-started-smashing 205))
;; ---game-task-h:game-task-node

(defenum game-task-actor
  :bitfield #f
  :type uint8
  (none 0)
  (minimap 1)
  (torn-hideout 2)
  (torn-alley 3)
  (kor-alley 4)
  (kor-vinroom 5)
  (kor-tomb 6)
  (krew-hiphog 7)
  (sig-hiphog 8)
  (sig-atoll 9)
  (keira-garage 10)
  (vin-vinroom 11)
  (ashelin-atoll 12)
  (ashelin-market 13)
  (onin-onintent 14)
  (pecker-onintent 15)
  (baron-palace 16)
  (baron-tomb 17)
  (youngsamos-hideout 18)
  (youngsamos-tomb 19)
  (brutter-kiosk 20)
  (kid-tomb 21)
  (youngsamos-alley 22)
  (kid-alley 23)
  (crocadog-alley 24)
  (crocadog-tomb 25)
  (youngsamos-forest 26)
  (ashelin-throne 27)
  (baron-castle 28)
  (tess-alley 29)
  (youngsamos-onintent 30)
  (samos-hideout 31)
  (burning-bush-slumb 32)
  (burning-bush-gena 33)
  (burning-bush-genc 34)
  (tess-hiphog 35)
  (keira-stadium 36)
  (kor-consite 37)
  (kor-onintent 38)
  (oracle-oracle 39)
  (daxter-tomb 40)
  (burning-bush-marka 41)
  (burning-bush-sluma 42)
  (burning-bush-slumb-2 43)
  (burning-bush-slumc 44)
  (burning-bush-farma 45)
  (burning-bush-farmb 46)
  (burning-bush-markb 47)
  (burning-bush-markb-2 48)
  (burning-bush-gena-2 49)
  (burning-bush-genb 50)
  (burning-bush-genc-2 51)
  (burning-bush-inda 52)
  (burning-bush-indb 53)
  (burning-bush-port 54)
  (burning-bush-port-2 55)
  (burning-bush-port-3 56)
  (burning-bush-pal 57)
  (burning-bush-stadium 58)
  (burning-bush-pal-2 59)
  (burning-bush-genb-2 60)
  (kor-hideout 61)
  (kid-hideout 62)
  (kid-vinroom 63)
  (crocadog-vinroom 64)
  (samos-garage 65)
  (baron-consite 66)
  (whack-a-metal-hiphog 67)
  )

(defenum game-task-action
  :bitfield #f
  :type uint8
  (hide 0)
  (idle 1)
  (say  2)
  (talk 3)
  (show 4)
  (shade 5)
  (play 6)
  (menu 7)
  )

(defenum game-task-flags
  :type uint8
  )

(defenum game-task-icon
  :type uint16
  )

(defenum task-manager-mask
  :type uint32
  :bitfield #t
  (intro-scene 0) ;; 1
  (resolution-scene 1) ;; 2
  (begin-sphere 2) ;; 4
  (end-sphere   3) ;; 8
  (fail-message 4) ;; 16
  (retry-message 5) ;; 32
  )

(defenum game-task-node-flag
  :type uint32 ;; guess
  :bitfield #t

  (closed            0) ;; 1
  (auto-close        1) ;; 2
  (data              2) ;; 4
  (close-task        3) ;; 8
  (save-on-life      4) ;; 16
  (save-on-try       5) ;; 32
  (abs-task-mask     6) ;; 64
  (set-task-mask     7) ;; 128
  (clear-task-mask   8) ;; 256
  (task-retry        9) ;; 512
  (exclusive        10) ;; 1024
  (intro-wait       11) ;; 2048
  (city-wait        12) ;; 4096
  (reset-on-try     13) ;; 8192
  (task-manager     14) ;; 16384
  (no-fail-on-death 15) ;; 32768
  (no-restart       16) ;; 1
  (no-audio         17) ;; 2
  (no-slow-down     18) ;; #4 high
  (utility-node     19) ;; #x8 high
  )

(defenum game-task-node-command
  :type uint8 ;; guess
  :bitfield #f
  (none 0)
  (add-sidekick 1)
  (sub-sidekick 2)
  (add-board 3)
  (sub-board 4)
  (add-gun-red 5)
  (add-gun-yellow 6)
  (add-gun-blue 7)
  (add-gun-dark 8)
  (add-gun-up-1 9)
  (add-gun-up-2 10)
  (add-gun-up-3 11)
  (add-gun-up-4 12)
  (add-pass-red 13)
  (add-pass-green 14)
  (add-pass-yellow 15)
  (add-pass-blue 16)
  (add-darkjak 17)
  (add-darkjak-0 18)
  (add-darkjak-1 19)
  (add-darkjak-2 20)
  (add-darkjak-3 21)
  (add-board-training 22)
  )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-control-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype game-task-event (basic)
  ((actor game-task-actor :offset-assert 4)
   (action game-task-action :offset-assert 5)
   (icon game-task-icon :offset 6)
   (flags game-task-flags :offset 7)
   (scene basic :offset 8)
   (distance meters :offset-assert 12)
  )
  :flag-assert         #x900000010
  )


(deftype task-manager-info (structure)
  ((mask task-manager-mask)
   (level basic)
   (manager handle)
   (fail-message uint32)
   (retry-message uint32)
   (intro-scene basic)
   (resolution-scene basic)
   (resolution-scene-continue basic)
   (retry-continue basic)
   (fail-continue basic)
   (init-hook basic)
   (cleanup-hook basic)
   (update-hook basic)
   (code-hook basic)
   (complete-hook basic)
   (fail-hook basic)
   (event-hook basic)
   (final-node uint16)
   (time-limit int32)
   (sphere-count int8)
   (index int8)
   (intro-delay uint16)
   (sphere-array uint32) ;; pointers...
   (on-complete basic)
   (on-fail basic)
   (begin-sphere sphere :inline)
   (end-sphere sphere :inline)
   )
  :flag-assert #x900000080
  )



(deftype game-task-node-info (basic)
  ((level basic)
   (task game-task)
   (name string)
   (when-open array)
   (flags game-task-node-flag)
   (parent-node uint16 4)
   (task-mask task-mask)
   (on-open basic)
   (info task-manager-info)
   (borrow basic)
   (open? symbol)
   (on-close basic)
   (close-time time-frame)
   (death-count uint16)
   (gem-count uint16)
   (skill-count uint16)
   (suck-death-count uint8)
   (add game-task-node-command)
   (description uint32)
   )
  :flag-assert         #xe0000004c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )


(deftype game-task-info (basic)
  ((name                string   :offset-assert 4)
   (text-name           uint32  :offset-assert 8)
   (pre-play-node       uint16  :offset-assert 12)
   (kiosk-play-node     uint16  :offset-assert 14)
   (pre-play-continue   string   :offset-assert 16)
   (play-node           uint16  :offset-assert 20)
   (play-continue       string   :offset-assert 24)
   (kiosk-play-continue string   :offset-assert 28)
   )
  :flag-assert         #x900000020
  )

(deftype game-task-control (basic)
  ((counter uint32)
   (actor game-task-actor)
   (current-node uint16)
   (current-event uint32)
   )
  :flag-assert #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )


(deftype task-manager (process)
  (
   (node-info basic)
   (info task-manager-info)
   (lev-name basic)
   (fail-on-death? symbol)
   (fail-now basic)
   (retry-now basic)
   (allow-fail basic)
   (state-time time-frame)
   (count int16)
   (max-count int16)
   (sub-state uint32 :offset-assert 172)
   (slave uint64 32) ;; ?
   (arrow uint64 :offset-assert 432)
   (link uint32)
   (start-time time-frame)
   (total-time time-frame)
   (beep-time time-frame)
   (time-limit time-frame)
   (begin-pos vector :inline :offset-assert 480)
   (end-pos vector :inline)
   (data-int8 int8 32)
   (data-int32 int32 32)
   (data-float float 32)
   (data-vector vector 32 :inline :offset-assert 800)
   (actor-group uint32 4 :offset-assert 1312)
   (minimap uint32 8 :offset-assert 1328)
   (hud uint64 4 :offset-assert 1360)
   (hud-timer time-frame :offset 1360)
   (hud-counter int64 :offset 1368)
   (sound-id uint32 4 :offset-assert 1392)
   (intro-time time-frame :offset-assert 1408)
   )
  :flag-assert #x1705100588
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)

    )
  )


(deftype ambient-control (structure)
  ((last-ambient-time time-frame    :offset-assert 0) ;; time-frame
   (last-ambient      string    :offset-assert 8) ;; guessed by decompiler
   (last-ambient-id   sound-id  :offset-assert 12) ;; guessed by decompiler
   )
  :flag-assert         #xc00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

(define-extern game-task->string (function game-task string))
(define-extern c-string->game-task (function string game-task))
(define-extern game-task-actor->string (function game-task-actor string))
(define-extern game-task-action->string (function game-task-action string))
(define-extern game-task-node-flag->string (function game-task-node-flag none))
(define-extern game-task-node-command->string (function game-task-node-command string))
(define-extern *traffic-engine* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gsf-vertex (structure)
  ((data uint32   8       :offset-assert 0)
   (byte uint8   32      :offset 0)
   (quad uint128   2       :offset 0)
   (vt   qword     :inline :offset 0)
   (pos  vector3s  :inline :offset 0)
   (tex  vector2uh :inline :offset 12)
   (nrm  vector3s  :inline :offset 16)
   (nc   qword     :inline :offset 16)
   (clr  vector4ub :inline :offset 28)
   (dtex vector2uh :inline :offset 16)
   (dclr vector4ub :inline :offset 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype gsf-fx-vertex (structure)
  ((clr vector4ub :inline :offset-assert 0)
   (tex vector2uh :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(deftype gsf-header (structure)
  ((num-strips   uint8     :offset-assert 0)
   (num-new-vtxs uint8     :offset-assert 1)
   (num-dps      uint16    :offset-assert 2)
   (num-vtxs     uint16    :offset-assert 4)
   (strip-table  uint8  10 :offset-assert 6) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-ik (structure)
  ((index   uint8  :offset-assert 0)
   (no-kick uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype gsf-info (structure)
  ((ptr-iks   uint32  :offset-assert 0)
   (ptr-verts uint32  :offset-assert 4)
   (ptr-fx    uint32  :offset-assert 8)
   (dummy2    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-buffer (structure)
  ((data      uint8      8192     :offset-assert 0) ;; guessed by decompiler
   (info      gsf-info   :inline  :offset 0)
   (header    gsf-header :inline  :offset 16)
   (work-area uint8      :dynamic :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype generic-frag (structure)
  ((start-pos uint16  :offset-assert 0)
   (end-pos   uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-strip (structure)
  ((pos uint16  :offset-assert 0)
   (len uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-envmap-saves (structure)
  ((index-mask vector4w :inline :offset-assert 0)
   (verts      uint128  12      :offset-assert 16) ;; guessed by decompiler
   (kicks      uint128  4       :offset-assert 208) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype generic-interp-job (structure)
  ((job-type uint16  :offset-assert 0)
   (num      uint16  :offset-assert 2)
   (first    uint16  :offset-assert 4)
   (pad      uint16  :offset-assert 6)
   (ptr-data uint32  :offset-assert 8)
   (morph-z  uint16  :offset-assert 12)
   (morph-w  uint16  :offset-assert 14)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-saves (structure)
  ((ptr-dma           uint32                       :offset-assert 0)
   (ptr-vtxs          uint32                       :offset-assert 4)
   (ptr-clrs          uint32                       :offset-assert 8)
   (ptr-texs          uint32                       :offset-assert 12)
   (ptr-env-clrs      uint32                       :offset-assert 16)
   (ptr-env-texs      uint32                       :offset-assert 20)
   (cur-outbuf        uint32                       :offset-assert 24)
   (ptr-fx-buf        uint32                       :offset-assert 28)
   (xor-outbufs       uint32                       :offset-assert 32)
   (num-dps           uint32                       :offset-assert 36)
   (qwc               uint32                       :offset-assert 40)
   (gsf-buf           gsf-buffer                   :offset-assert 44)
   (ptr-shaders       uint32                       :offset-assert 48)
   (ptr-env-shader    uint32                       :offset-assert 52)
   (is-envmap         uint16                       :offset-assert 56) ;; uint32
   (is-translucent    uint16                       :offset-assert 58)
   (basep             uint32                       :offset-assert 60)
   (ptr-interp-job    generic-interp-job           :offset-assert 64)
   (gifbuf-adr        uint32                       :offset-assert 68)
   (inbuf-adr         uint32                       :offset-assert 72)
   (fade-val          uint32                       :offset-assert 76)
   (time-of-day-color rgba                         :offset-assert 80) ;; guessed by decompiler
   (to-vu0-waits      uint32                       :offset-assert 84)
   (to-spr-waits      uint32                       :offset-assert 88)
   (from-spr-waits    uint32                       :offset-assert 92)
   (envmap            generic-envmap-saves :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-gif-tag (structure)
  ((data       uint32 4       :offset-assert 0) ;; guessed by decompiler
   (qword      qword  :inline :offset 0)
   (fan-prim   uint32         :offset 0)
   (str-prim   uint32         :offset 4)
   (regs       uint32         :offset 8)
   (num-strips uint32         :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-envmap-consts (structure)
  ((consts vector          :inline :offset-assert 0)
   (strgif generic-gif-tag :inline :offset-assert 16)
   (colors vector4w        :inline :offset-assert 32)
   (shader adgif-shader    :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-consts (structure)
  ((dma-header        dma-packet            :inline :offset-assert 0)
   (vif-header        uint32                4       :offset-assert 16) ;; guessed by decompiler
   (dma-ref-vtxs      dma-packet            :inline :offset-assert 32)
   (dma-cnt-call      dma-packet            :inline :offset-assert 48)
   (matrix            matrix                :inline :offset-assert 64)
   (base-strgif       generic-gif-tag       :inline :offset-assert 128)
   (alpha-opaque      gs-adcmd              :inline :offset-assert 144) ;; ad-cmd :inline
   (alpha-translucent gs-adcmd              :inline :offset-assert 160) ;; ad-cmd :inline
   (ztest-normal      gs-adcmd              :inline :offset-assert 176) ;; ad-cmd :inline
   (ztest-opaque      gs-adcmd              :inline :offset-assert 192) ;; ad-cmd :inline
   (adcmd-offsets     uint8                 16      :offset-assert 208) ;; guessed by decompiler
   ;(adcmds            gs-adcmd              4       :offset-assert 144) ;; guessed by decompiler
   (stcycle-tag       uint32                        :offset-assert 224)
   (unpack-vtx-tag    uint32                        :offset-assert 228)
   (unpack-clr-tag    uint32                        :offset-assert 232)
   (unpack-tex-tag    uint32                        :offset-assert 236)
   (mscal-tag         uint32                        :offset-assert 240)
   (flush-tag         uint32                        :offset-assert 244)
   (reset-cycle-tag   uint32                        :offset-assert 248)
   (dummy0            uint32                        :offset-assert 252)
   (dma-tag-cnt       uint64                        :offset-assert 256)
   (envmap            generic-envmap-consts :inline :offset-assert 272)
   (light-consts      vector                :inline :offset-assert 400)
   (texture-offset    uint16                8       :offset-assert 416) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1b0
  :flag-assert         #x9000001b0
  )

(deftype generic-storage (structure)
  ((data uint128 16 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

#|
(deftype gsf-vertex-array (UNKNOWN)
  ((vtx gsf-vertex :dynamic :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype gsf-fx-vertex-array (UNKNOWN)
  ((data gsf-fx-vertex :dynamic :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

(deftype gsf-vertex-array (structure)
  ((vtx gsf-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(deftype gsf-fx-vertex-array (structure)
  ((data gsf-fx-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(define-extern *gsf-buffer* gsf-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert 0)
   (snapshot2   int32  :offset-assert 4)
   (morph-start float  :offset-assert 8)
   (morph-end   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sky-color-day (structure)
  ((hour sky-color-hour 24 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert 0 :score -1) ;; guessed by decompiler
   (pos            vector  :inline :offset 0)
   (r-sun          float           :offset 16)
   (r-halo         float           :offset 20)
   (r-aurora       float           :offset 24)
   (c-sun-start    rgba            :offset 32) ;; guessed by decompiler
   (c-sun-end      rgba            :offset 48) ;; guessed by decompiler
   (c-halo-start   rgba            :offset 36) ;; guessed by decompiler
   (c-halo-end     rgba            :offset 52) ;; guessed by decompiler
   (c-aurora-start rgba            :offset 40) ;; guessed by decompiler
   (c-aurora-end   rgba            :offset 56) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert 0) ;; guessed by decompiler
   (pos   vector  :inline :offset 0)
   (scale vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert 0)
   (tilt      float  :offset-assert 4)
   (rise      float  :offset-assert 8)
   (dist      float  :offset-assert 12)
   (min-halo  float  :offset-assert 16)
   (max-halo  float  :offset-assert 20)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype sky-upload-data (structure)
  ((data uint128       10      :offset-assert 0 :score -1) ;; guessed by decompiler
   (sun  sky-sun-data  2 :inline  :offset 0) ;; guessed by decompiler
   (moon sky-moon-data :inline :offset 128)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype cloud-vertex (structure)
  ((pos  vector :inline :offset-assert 0)
   (stq  vector :inline :offset-assert 16)
   (col  vector :inline :offset-assert 32)
   (nrm  vector :inline :offset-assert 48)
   (stq2 vector :inline :offset-assert 64)
   (col2 vector :inline :offset-assert 80)
   (nrm2 vector :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype cloud-vert-array (structure)
  ((data cloud-vertex 100 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2bc0
  :flag-assert         #x900002bc0
  )

(deftype haze-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (nrm vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype haze-vert-array (structure)
  ((data haze-vertex 36 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x6c0
  :flag-assert         #x9000006c0
  )

(deftype cloud-lights (structure)
  ((sun0-normal      vector :inline :offset-assert 0)
   (sun1-normal      vector :inline :offset-assert 16)
   (moon-normal      vector :inline :offset-assert 32)
   (ambi-color       vector :inline :offset-assert 48)
   (ambi-color-lower vector :inline :offset-assert 64)
   (sun0-color       vector :inline :offset-assert 80)
   (sun1-color       vector :inline :offset-assert 96)
   (moon-color       vector :inline :offset-assert 112)
   (sun0-color-lower vector :inline :offset-assert 128)
   (sun0-scale       float          :offset-assert 144)
   (sun1-scale       float          :offset-assert 148)
   (moon-scale       float          :offset-assert 152)
   )
  :method-count-assert 9
  :size-assert         #x9c
  :flag-assert         #x90000009c
  )

(deftype haze-lights (structure)
  ((sun0-normal vector :inline :offset-assert 0)
   (sun1-normal vector :inline :offset-assert 16)
   (moon-normal vector :inline :offset-assert 32)
   (ambi-color  vector :inline :offset-assert 48)
   (sun0-color  vector :inline :offset-assert 64)
   (sun1-color  vector :inline :offset-assert 80)
   (moon-color  vector :inline :offset-assert 96)
   (sun0-scale  float          :offset-assert 112)
   (sun1-scale  float          :offset-assert 116)
   (moon-scale  float          :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype sky-work (structure)
  ((adgif-tmpl       dma-gif-packet  :inline :offset-assert 0)
   (draw-tmpl        dma-gif-packet  :inline :offset-assert 32)
   (draw-tmpl2       dma-gif-packet  :inline :offset-assert 64)
   (fog-tmpl         dma-gif-packet  :inline :offset-assert 96)
   (blend-tmpl       dma-gif-packet  :inline :offset-assert 128)
   (sprite-tmpl      dma-gif-packet  :inline :offset-assert 160)
   (sprite-tmpl2     dma-gif-packet  :inline :offset-assert 192)
   (sun-coords       vector      2   :inline :offset-assert 224)
   (green-coords     vector      2   :inline :offset-assert 256)
   (moon0-coords     vector      2   :inline :offset-assert 288)
   (moon1-coords     vector      2   :inline :offset-assert 320)
   (moon2-coords     vector      2   :inline :offset-assert 352)
   (star-coords      vector      2   :inline :offset-assert 384)
   (sun-colors       vector4w     2    :inline :offset-assert 416)
   (green-colors     vector4w     2    :inline :offset-assert 448)
   (moon-colors      vector4w     3    :inline :offset-assert 480)
   (star-colors      vector4w     16   :inline :offset-assert 528)
   (st-coords        vector     2    :inline :offset-assert 784)
   (random           vector4w     8    :inline :offset-assert 816)
   (giftag-base      dma-gif         :inline :offset-assert 944)
   (giftag-haze      dma-gif         :inline :offset-assert 960)
   (giftag-roof      dma-gif         :inline :offset-assert 976)
   (giftag-ocean     dma-gif         :inline :offset-assert 992)
   (fog              vector          :inline :offset-assert 1008)
   (sky              float       8   :offset-assert 1024)
   (time             float                   :offset-assert 1056)
   (off-s            uint16                  :offset-assert 1060)
   (off-t            uint16                  :offset-assert 1062)
   (orbit            sky-orbit    3  :inline   :offset-assert 1064)
   (upload-data      sky-upload-data :inline :offset-assert 1168)
   (ambi-color       vector4w          :inline :offset-assert 1328)
   (ambi-color-lower vector4w          :inline :offset-assert 1344)
   (sun0-color       vector4w          :inline :offset-assert 1360)
   (sun1-color       vector4w          :inline :offset-assert 1376)
   (moon-color       vector4w          :inline :offset-assert 1392)
   (sun0-color-lower vector4w          :inline :offset-assert 1408)
   (cam-mat          matrix          :inline :offset-assert 1424)
   (star-mat         matrix          :inline :offset-assert 1488)
   (vec0             vector4w        :inline :offset-assert 1552)
   (vec1             vector4w        :inline :offset-assert 1568)
   (cloud-lights     cloud-lights    :inline :offset-assert 1584)
   (haze-lights      haze-lights     :inline :offset-assert 1744)
   (buf              basic                   :offset-assert 1868)
   (draw-vortex      basic                   :offset-assert 1872)
   (stars            vector        512 :inline    :offset-assert 1888)
   )
  :method-count-assert 37
  :size-assert         #x2760
  :flag-assert         #x2500002760
  (:methods
    (init-sun-data! "Sets the sun related upload data - the sun, halo and aurora" (_type_ int float float float) none 9)
    (init-orbit-settings! (_type_ int float float float float float float) none 10)
    (sky-work-method-11 () none 11)
    (sky-work-method-12 () none 12)
    (draw (_type_) none 13)
    (sky-work-method-14 () none 14)
    (sky-work-method-15 () none 15)
    (sky-work-method-16 () none 16)
    (sky-work-method-17 () none 17)
    (sky-work-method-18 () none 18)
    (sky-work-method-19 () none 19)
    (sky-work-method-20 () none 20)
    (sky-work-method-21 () none 21)
    (sky-work-method-22 () none 22)
    (sky-work-method-23 () none 23)
    (sky-work-method-24 () none 24)
    (sky-work-method-25 () none 25)
    (sky-work-method-26 () none 26)
    (sky-work-method-27 () none 27)
    (sky-work-method-28 () none 28)
    (sky-work-method-29 () none 29)
    (sky-work-method-30 () none 30)
    (sky-work-method-31 () none 31)
    (sky-work-method-32 () none 32)
    (sky-work-method-33 () none 33)
    (sky-work-method-34 () none 34)
    (sky-work-method-35 () none 35)
    (sky-work-method-36 () none 36)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ocean-corner (structure)
  ((bsphere      sphere :inline :offset-assert 0)
   (start-corner vector :inline :offset-assert 16)
   (y-scales     vector :inline :offset-assert 32)
   (alphas       vector :inline :offset-assert 48)
   (colors       uint32 4       :offset-assert 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype ocean-wave-info (structure)
  ((frequency  float  :offset-assert 0)
   (amplitude  float  :offset-assert 4)
   (wave-speed float  :offset-assert 8)
   (angle      float  :offset-assert 12)
   (kx         float  :offset-assert 16)
   (ky         float  :offset-assert 20)
   (w          float  :offset-assert 24)
   (flags      int32  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-spheres (structure)
  ((spheres sphere 36 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-colors (structure)
  ((colors rgba 2548 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x27d0
  :flag-assert         #x9000027d0
  )

(deftype ocean-colors-float (structure)
  ((colors vector 2548 :inline :offset-assert 0) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x9f40
  :flag-assert         #x900009f40
  )

(deftype ocean-mid-mask (structure)
  ((mask  uint8  8 :offset-assert 0) ;; guessed by decompiler
   (dword uint64   :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-mid-indices (basic)
  ((data uint16 36 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ocean-mid-masks (basic)
  ((data (inline-array ocean-mid-mask)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-trans-mask (structure)
  ((mask uint8 4 :offset-assert 0) ;; guessed by decompiler
   (word int32   :offset 0) ;; uint64
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype ocean-trans-index (structure)
  ((parent int16  :offset-assert 0)
   (child  int16  :offset-assert 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype ocean-trans-indices (basic)
  ((data ocean-trans-index 2304 :inline :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2404
  :flag-assert         #x900002404
  )

(deftype ocean-near-index (structure)
  ((data uint16 16 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-near-indices (basic)
  ((data (inline-array ocean-near-index)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-near-colors (structure)
  ((color0 vector :inline :offset-assert 0)
   (color1 vector :inline :offset-assert 16)
   (color2 vector :inline :offset-assert 32)
   (color3 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype ocean-trans-strip (structure)
  ((verts uint128 10 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype ocean-trans-strip-array (structure)
  ((data ocean-trans-strip 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

(deftype ocean-wave-data (structure)
  ((data uint8 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype ocean-wave-frames (structure)
  ((frame ocean-wave-data 64 :inline :offset-assert 0) ;; guessed by decompiler
   )
  ;; overflow 16-bit int size bug
  :method-count-assert 9
  :size-assert         #x10000
  ;:flag-assert         #x900010000
  )

(deftype ocean-texture-constants (structure)
  ((giftag    gs-gif-tag    :inline :offset-assert 0) ;; was qword
   (buffers   vector4w :inline :offset-assert 16)
   (dests     vector4w :inline :offset-assert 32)
   (start     vector   :inline :offset-assert 48)
   (offsets   vector   :inline :offset-assert 64)
   (constants vector   :inline :offset-assert 80)
   (cam-nrm   vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype ocean-mid-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (col vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


(deftype ocean-mid-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (drw-fan        gs-gif-tag        :inline :offset-assert 96) ;; gs-gif-tag :inline
   (env-fan        gs-gif-tag        :inline :offset-assert 112) ;; gs-gif-tag :inline
   (drw-adgif      gs-gif-tag        :inline :offset-assert 128) ;; gs-gif-tag :inline
   (drw-texture    adgif-shader :inline :offset-assert 144)
   (drw-strip-0    gs-gif-tag        :inline :offset-assert 224) ;; gs-gif-tag :inline
   (drw-strip-1    gs-gif-tag        :inline :offset-assert 240) ;; gs-gif-tag :inline
   (env-adgif      gs-gif-tag        :inline :offset-assert 256) ;; gs-gif-tag :inline
   (env-texture    adgif-shader :inline :offset-assert 272)
   (env-strip      gs-gif-tag        :inline :offset-assert 352) ;; gs-gif-tag :inline
   (env-color      vector       :inline :offset-assert 368)
   (index-table    vector4w     8 :inline      :offset-assert 384) ;; guessed by decompiler
   (pos0           vector       :inline :offset-assert 512)
   (pos1           vector       :inline :offset-assert 528)
   (pos2           vector       :inline :offset-assert 544)
   (pos3           vector       :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )


(deftype ocean-mid-upload (structure)
  ((rot    matrix  :inline :offset-assert 0)
   (matrix matrix  :inline :offset-assert 64)
   (colors uint128 108     :offset-assert 128) ;; guessed by decompiler
   (masks  uint128 2       :offset-assert 1856) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x760
  :flag-assert         #x900000760
  )

(deftype ocean-mid-upload2 (structure)
  ((rot    matrix   :inline :offset-assert 0)
   (matrix matrix   :inline :offset-assert 64)
   (count  vector4w :inline :offset-assert 128)
   (tex0   vector   :inline :offset-assert 144)
   (tex1   vector   :inline :offset-assert 160)
   (tex2   vector   :inline :offset-assert 176)
   (tex3   vector   :inline :offset-assert 192)
   (clr0   vector   :inline :offset-assert 208)
   (clr1   vector   :inline :offset-assert 224)
   (clr2   vector   :inline :offset-assert 240)
   (clr3   vector   :inline :offset-assert 256)
   (verts  uint128  18      :offset-assert 272) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )

(deftype ocean-mid-work (structure)
  ((env0    vector  :inline :offset-assert 0)
   (env1    vector  :inline :offset-assert 16)
   (env2    vector  :inline :offset-assert 32)
   (hmg0    vector  :inline :offset-assert 48)
   (hmg1    vector  :inline :offset-assert 64)
   (hmg2    vector  :inline :offset-assert 80)
   (indices uint128 16      :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

(deftype ocean-near-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (constants3     vector       :inline :offset-assert 96)
   (constants4     vector       :inline :offset-assert 112)
   (constants5     vector       :inline :offset-assert 128)
   (drw-fan        gs-gif-tag        :inline :offset-assert 144) ;; gs-gif-tag :inline
   (drw2-fan       gs-gif-tag        :inline :offset-assert 160) ;; gs-gif-tag :inline
   (env-fan        gs-gif-tag        :inline :offset-assert 176) ;; gs-gif-tag :inline
   (drw-adgif      gs-gif-tag        :inline :offset-assert 192) ;; gs-gif-tag :inline
   (drw-texture    adgif-shader :inline :offset-assert 208)
   (drw-strip      gs-gif-tag        :inline :offset-assert 288) ;; gs-gif-tag :inline
   (env-adgif      gs-gif-tag        :inline :offset-assert 304) ;; gs-gif-tag :inline
   (env-texture    adgif-shader :inline :offset-assert 320)
   (env-strip      gs-gif-tag        :inline :offset-assert 400) ;; gs-gif-tag :inline
   (env-color      vector       :inline :offset-assert 416)
   (drw2-adgif     gs-gif-tag        :inline :offset-assert 432) ;; gs-gif-tag :inline
   (drw2-tex0      qword        :inline :offset-assert 448)
   (drw2-frame     qword        :inline :offset-assert 464)
   (drw2-strip     gs-gif-tag        :inline :offset-assert 480) ;; gs-gif-tag :inline
   (drw3-adgif     gs-gif-tag        :inline :offset-assert 496) ;; gs-gif-tag :inline
   (drw3-frame     qword        :inline :offset-assert 512)
   (index-table    vector4w   4 :inline :offset-assert 528) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x250
  :flag-assert         #x900000250
  )

(deftype ocean-near-upload (structure)
  ((rot          matrix            :inline :offset-assert 0)
   (matrix       matrix            :inline :offset-assert 64)
   (masks        uint128           2       :offset-assert 128) ;; guessed by decompiler
   (start-height vector4w          :inline :offset-assert 160)
   (start-st     vector            :inline :offset-assert 176)
   (near-colors  ocean-near-colors :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype ocean-near-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-near-work (structure)
  ((verts-ptr vector  :inline :offset-assert 0)
   (indices   uint128 16      :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype ocean-height-array (structure)
  ((data float 1024 :offset-assert 0) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(deftype ocean-vert-array (structure)
  ((data vector 2048 :inline :offset-assert 0);; guess
   )
  :method-count-assert 9
  :size-assert         #x8000
  :flag-assert         #x900008000
  )

(deftype ocean-map (structure)
  ((start-corner        vector              :inline :offset-assert 0)
   (far-color           vector              :inline :offset-assert 16)
   (ocean-spheres       ocean-spheres               :offset-assert 32)
   (ocean-colors        ocean-colors                :offset-assert 36)
   (ocean-mid-indices   ocean-mid-indices           :offset-assert 40) ;; guessed by decompiler
   (ocean-trans-indices ocean-trans-indices         :offset-assert 44) ;; guessed by decompiler
   (ocean-near-indices  ocean-near-indices          :offset-assert 48) ;; guessed by decompiler
   (ocean-mid-masks     ocean-mid-masks             :offset-assert 52) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x38
  :flag-assert         #xb00000038
  (:methods
    (set-height! (_type_ float) none 9)
    (ocean-map-method-10 () none 10)
    )
  )

(deftype ocean (ocean-map)
  ((off                     basic                      :offset-assert 56)
   (near-off                basic                      :offset-assert 60)
   (mid-off                 basic                      :offset-assert 64)
   (far-on                  basic                      :offset-assert 68)
   (ocean-facing            uint32                     :offset-assert 72)
   (heights                 ocean-height-array         :offset-assert 76)
   (heights2                ocean-height-array         :offset-assert 80)
   (verts                   ocean-vert-array           :offset-assert 84)
   (ocean-near-translucent? basic                      :offset-assert 88)
   (deltas                  vector             :inline :offset-assert 96)
   (map-min                 vector             :inline :offset-assert 112)
   (map-max                 vector             :inline :offset-assert 128)
   (interp                  vector             :inline :offset-assert 144)
   (corner-array            ocean-corner   25  :inline :offset-assert 160)
   (corner-count            int32                      :offset-assert 2160)
   (temp-vecs               vector         4  :inline  :offset-assert 2176)
   (mid-mask-ptrs           pointer            36      :offset-assert 2240)
   (mid-camera-masks        uint64             36      :offset-assert 2384)
   (trans-mask-ptrs         pointer            64      :offset-assert 2672)
   (trans-camera-masks      uint32             16      :offset-assert 2928)
   (trans-temp-masks        uint32             16      :offset-assert 2992)
   (sprite-tmpl             dma-gif-packet     :inline :offset-assert 3056)
   (sprite-tmpl2            dma-gif-packet     :inline :offset-assert 3088)
   (sprite-tmpl3            dma-gif-packet     :inline :offset-assert 3120)
   (adgif-tmpl              dma-gif-packet     :inline :offset-assert 3152)
   (line-tmpl               dma-gif-packet     :inline :offset-assert 3184)
   (sun-tmpl                dma-gif-packet     :inline :offset-assert 3216)
   (erase-tmpl              dma-gif-packet     :inline :offset-assert 3248)
   (haze-tmpl               dma-gif-packet     :inline :offset-assert 3280)
   (cloud-tmpl              dma-gif-packet     :inline :offset-assert 3312)
   (clut-tmpl               dma-gif-packet     :inline :offset-assert 3344)
   (cloud-lights            cloud-lights       :inline :offset-assert 3376)
   (haze-lights             haze-lights        :inline :offset-assert 3536)
   (constant                vector             :inline :offset-assert 3664)
   (sky-color               vector             :inline :offset-assert 3680)
   (haze-verts              vector4w      32   :inline :offset-assert 3696)
   (cloud-verts             vector4w      36   :inline :offset-assert 4208)
   (cloud-nrms              vector        36   :inline :offset-assert 4784)
   (cloud-col0              vector        36   :inline :offset-assert 5360)
   (cloud-col1              vector        36   :inline :offset-assert 5936)
   (cloud-st0               vector        36   :inline :offset-assert 6512)
   (cloud-st1               vector        36   :inline :offset-assert 7088)
   (color80808080           vector4w           :inline :offset-assert 7664)
   (color80808040           vector4w           :inline :offset-assert 7680)
   (color80808000           vector4w           :inline :offset-assert 7696)
   (st0000                  vector             :inline :offset-assert 7712)
   (st0505                  vector             :inline :offset-assert 7728)
   (st1010                  vector             :inline :offset-assert 7744)
   (uv00                    vector4w           :inline :offset-assert 7760)
   (uv44                    vector4w           :inline :offset-assert 7776)
   (uv88                    vector4w           :inline :offset-assert 7792)
   (uv1010                  vector4w           :inline :offset-assert 7808)
   (uv2020                  vector4w           :inline :offset-assert 7824)
   (uv4040                  vector4w           :inline :offset-assert 7840)
   (uv8080                  vector4w           :inline :offset-assert 7856)
   (xy00                    vector4w           :inline :offset-assert 7872)
   (xy88                    vector4w           :inline :offset-assert 7888)
   (xy1010                  vector4w           :inline :offset-assert 7904)
   (xy2020                  vector4w           :inline :offset-assert 7920)
   (xy4040                  vector4w           :inline :offset-assert 7936)
   (xy8080                  vector4w           :inline :offset-assert 7952)
   (cloud-alpha             uint8            36      :offset-assert 7968)
   (near-mask-indices       uint16            16      :offset-assert 8004)
   (mid-minx                uint8                      :offset-assert 8036)
   (mid-maxx                uint8                      :offset-assert 8037)
   (mid-minz                uint8                      :offset-assert 8038)
   (mid-maxz                uint8                      :offset-assert 8039)
   (near-minx               uint8                      :offset-assert 8040)
   (near-maxx               uint8                      :offset-assert 8041)
   (near-minz               uint8                      :offset-assert 8042)
   (near-maxz               uint8                      :offset-assert 8043)
   (temp-minx               uint8                      :offset-assert 8044)
   (temp-maxx               uint8                      :offset-assert 8045)
   (temp-minz               uint8                      :offset-assert 8046)
   (temp-maxz               uint8                      :offset-assert 8047)
   (tex1                    uint64                     :offset-assert 8048)
   (tex1-near               uint64                     :offset-assert 8056)
   (corner00                float                      :offset-assert 8064)
   (corner01                float                      :offset-assert 8068)
   (corner10                float                      :offset-assert 8072)
   (corner11                float                      :offset-assert 8076)
   (frame-num               float                      :offset-assert 8080)
   (frame-speed             float                      :offset-assert 8084)
   (frame-num2              float                      :offset-assert 8088)
   (frame-speed2            float                      :offset-assert 8092)
   (cloud-interp            float                      :offset 3676)
   (scales                  vector             :inline :offset-assert 8096)
   (mask-hi                 vector4w           :inline :offset-assert 8112)
   (mask-lo                 vector4w           :inline :offset-assert 8128)
   (lights                  vu-lights          :inline :offset-assert 8144)
   (uv-scroll-0             vector4w           :inline :offset-assert 8256)
   (uv-scroll-1             vector4w           :inline :offset-assert 8272)
   (st-scroll               vector2            :inline :offset-assert 8288)
   (wait-to-vu0             uint32                     :offset-assert 8296)
   )
  :method-count-assert 92
  :size-assert         #x206c
  :flag-assert         #x5c0000206c
  (:methods
    (ocean-method-11 (_type_ (inline-array vector) symbol) float 11)
    (draw! (_type_) none 12)
    (update-map (_type_) none 13)
    (ocean-method-14 () none 14)
    (ocean-method-15 () none 15)
    (ocean-method-16 () none 16)
    (ocean-method-17 () none 17)
    (ocean-method-18 () none 18)
    (ocean-method-19 () none 19)
    (ocean-method-20 () none 20)
    (ocean-method-21 () none 21)
    (ocean-method-22 () none 22)
    (ocean-method-23 () none 23)
    (ocean-method-24 () none 24)
    (ocean-method-25 () none 25)
    (ocean-method-26 () none 26)
    (ocean-method-27 () none 27)
    (ocean-method-28 () none 28)
    (ocean-method-29 () none 29)
    (ocean-method-30 () none 30)
    (ocean-method-31 () none 31)
    (ocean-method-32 () none 32)
    (ocean-method-33 () none 33)
    (ocean-method-34 () none 34)
    (ocean-method-35 () none 35)
    (ocean-method-36 () none 36)
    (ocean-method-37 () none 37)
    (ocean-method-38 () none 38)
    (ocean-method-39 () none 39)
    (ocean-method-40 () none 40)
    (ocean-method-41 () none 41)
    (ocean-method-42 () none 42)
    (ocean-method-43 () none 43)
    (ocean-method-44 () none 44)
    (ocean-method-45 () none 45)
    (ocean-method-46 () none 46)
    (ocean-method-47 () none 47)
    (ocean-method-48 () none 48)
    (ocean-method-49 () none 49)
    (ocean-method-50 () none 50)
    (ocean-method-51 () none 51)
    (ocean-method-52 () none 52)
    (ocean-method-53 () none 53)
    (ocean-method-54 () none 54)
    (ocean-method-55 () none 55)
    (ocean-method-56 () none 56)
    (ocean-method-57 () none 57)
    (ocean-method-58 () none 58)
    (ocean-method-59 () none 59)
    (ocean-method-60 () none 60)
    (ocean-method-61 () none 61)
    (ocean-method-62 () none 62)
    (ocean-method-63 () none 63)
    (ocean-method-64 () none 64)
    (ocean-method-65 () none 65)
    (ocean-method-66 () none 66)
    (ocean-method-67 () none 67)
    (ocean-method-68 () none 68)
    (ocean-method-69 () none 69)
    (ocean-method-70 () none 70)
    (ocean-method-71 () none 71)
    (ocean-method-72 () none 72)
    (ocean-method-73 () none 73)
    (ocean-method-74 () none 74)
    (ocean-method-75 () none 75)
    (ocean-method-76 () none 76)
    (ocean-method-77 () none 77)
    (ocean-method-78 () none 78)
    (ocean-method-79 () none 79)
    (ocean-method-80 () none 80)
    (ocean-method-81 () none 81)
    (ocean-method-82 () none 82)
    (ocean-method-83 () none 83)
    (ocean-method-84 () none 84)
    (ocean-method-85 () none 85)
    (ocean-method-86 () none 86)
    (ocean-method-87 () none 87)
    (ocean-method-88 () none 88)
    (ocean-method-89 () none 89)
    (ocean-method-90 () none 90)
    (ocean-method-91 () none 91)
    )
  )

(define-extern *ocean-map* ocean-map)
(define-extern *ocean* ocean)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-trans-tables             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-left-table* (pointer float))
(define-extern *ocean-right-table* (pointer float))
(define-extern *ocean-up-table* (pointer float))
(define-extern *ocean-down-table* (pointer float))
(define-extern *ocean-down-left-table* (pointer float))
(define-extern *ocean-down-right-table* (pointer float))
(define-extern *ocean-up-right-table* (pointer float))
(define-extern *ocean-up-left-table* (pointer float))
(define-extern *ocean-trans-left-table* (pointer float))
(define-extern *ocean-trans-right-table* (pointer float))
(define-extern *ocean-trans-up-table* (pointer float))
(define-extern *ocean-trans-down-table* (pointer float))
(define-extern *ocean-trans-down-left-table* (pointer float))
(define-extern *ocean-trans-down-right-table* (pointer float))
(define-extern *ocean-trans-up-right-table* (pointer float))
(define-extern *ocean-trans-up-left-table* (pointer float))
(define-extern *ocean-trans-corner-table* (inline-array vector4w-2))
(define-extern *ocean-trans-strip-array* (pointer float))
(define-extern *ocean-trans-st-table* (inline-array vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-tables                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-spheres-city* ocean-spheres)
(define-extern *ocean-colors-city* ocean-colors)
(define-extern *ocean-near-indices-city* ocean-near-indices)
(define-extern *ocean-trans-indices-city* ocean-trans-indices)
(define-extern *ocean-mid-indices-city* ocean-mid-indices)
(define-extern *ocean-mid-masks-city* ocean-mid-masks)
(define-extern *ocean-map-city* ocean-map)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-frames                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-wave-frames* (pointer uint32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; time-of-day-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype palette-fade-control (structure)
  ((trans      vector :inline :offset-assert 0)
   (fade       float          :offset-assert 16)
   (actor-dist float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype palette-fade-controls (basic)
  ((control palette-fade-control 8 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x110
  :flag-assert         #xb00000110
  (:methods
    (reset! (_type_) none 9)
    (set-fade! (_type_ int float float vector) object 10)
    )
  )

(declare-type sparticle-launch-control inline-array-class)
(deftype time-of-day-proc (process)
  ((hours           int32                     :offset-assert 128)
   (minutes         int32                     :offset-assert 132)
   (seconds         int32                     :offset-assert 136)
   (old-frame       uint64                    :offset-assert 144)
   (current-frame   uint64                    :offset-assert 152)
   (frames          uint64                    :offset-assert 160)
   (time-of-day     float                     :offset-assert 168)
   (time-ratio      float                     :offset-assert 172)
   (dest-time-ratio float                     :offset-assert 176)
   (dest-time-delta float                     :offset-assert 180)
   (sun-count       int32                     :offset-assert 184)
   (sun             sparticle-launch-control  :offset-assert 188) ;; guessed by decompiler
   (green-sun-count int32                     :offset-assert 192)
   (green-sun       sparticle-launch-control  :offset-assert 196) ;; guessed by decompiler
   (moon-count      int32                     :offset-assert 200)
   (moon            sparticle-launch-control  :offset-assert 204) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #xd0
  :flag-assert         #xe005000d0
  )

(deftype time-of-day-palette (basic)
  ((width  int32   :offset-assert 4)
   (height int32   :offset-assert 8)
   (pad    int32   :offset-assert 12)
   (data   int32 1 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(defenum time-of-day-palette-id
  :type uint32
  :bitfield #t
  (unk0 0) ;; 1
  (unk1         1) ;; 2
  (unk2    2) ;; 4
  (unk3       3) ;; 8
  (palette-0        4) ;; 16
  (palette-1  5) ;; 32
  (palette-2 6) ;; 64
  (palette-3       7) ;; 128
  (palette-4       8) ;; 256
  (palette-5 9) ;; 512
  (palette-6      10) ;; 1024
  (palette-7 11) ;; 2048
  )

(deftype time-of-day-context (basic)
  ((interp               float       6       :offset-assert 4) ;; guessed by decompiler
   (current-fog          mood-fog    :inline :offset-assert 32)
   (current-sky-color    vector      :inline :offset-assert 80)
   (current-env-color    vector      :inline :offset-assert 96)
   (current-prt-color    vector      :inline :offset-assert 112)
   (current-shadow-color vector      :inline :offset-assert 128)
   (light-group          light-group 8 :inline      :offset-assert 144) ;; guessed by decompiler
   (current-clouds       mood-clouds :inline :offset-assert 1680)
   (times                vector     8 :inline       :offset-assert 1696) ;; might be vector4w?
   (title-light-group    light-group :inline :offset-assert 1824)
   (filter               vector      :inline :offset-assert 2016)
   (filter-color         vector      :inline :offset-assert 2032)
   (time                 float               :offset-assert 2048)
   (target-interp        float               :offset-assert 2052)
   (erase-color          rgba                :offset-assert 2056) ;; guessed by decompiler
   (sky                  symbol              :offset-assert 2060) ;; guessed by decompiler
   (use-camera-other     basic               :offset-assert 2064)
   (title-updated        symbol              :offset-assert 2068) ;; guessed by decompiler
   (mode                 time-of-day-palette-id              :offset-assert 2072)
   (overide-enable       symbol               :offset-assert 2076)
   (overide-palette      time-of-day-palette-id              :offset-assert 2080)
   (max-rain             float               :offset-assert 2084)
   (fog-mult             float               :offset-assert 2088)
   (exterior-level       basic               :offset-assert 2092)
   (ocean-alpha          float               :offset-assert 2096)
   )
  :method-count-assert 9
  :size-assert         #x834
  :flag-assert         #x900000834
  )


(deftype time-of-day-dma (structure)
  ((outa  uint32 256 :offset-assert 0) ;; guessed by decompiler
   (outb  uint32 256 :offset-assert 1024) ;; guessed by decompiler
   (banka uint32 256 :offset-assert 2048) ;; guessed by decompiler
   (bankb uint32 256 :offset-assert 3072) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(define-extern *palette-fade-controls* palette-fade-controls) ;; palette-fade-controls
(define-extern *time-of-day-context* time-of-day-context) ;; time-of-day-context

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; art-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype joint-anim (basic)
  ((name   string  :offset-assert 4) ;; guessed by decompiler
   (number int16   :offset-assert 8)
   (length int16   :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-matrix (joint-anim)
  ((data  matrix :inline :dynamic :offset 16))
  :flag-assert #x900000010
  )

(deftype joint-anim-transformq (joint-anim)
  ((data  transformq :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype joint-anim-drawable (joint-anim)
  ((data drawable :dynamic :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-frame (structure)
  ((matrices matrix 2 :inline :offset-assert 0) ;; guessed by decompiler
   (data     transformq :dynamic :inline :offset-assert 128) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype joint-anim-compressed-hdr (structure)
  ((control-bits uint32 14 :offset-assert 0) ;; guessed by decompiler
   (num-joints   uint32    :offset-assert 56)
   (matrix-bits  uint32    :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype joint-anim-compressed-fixed (structure)
  ((hdr       joint-anim-compressed-hdr :inline :offset-assert 0)
   (offset-64 uint32                            :offset-assert 64)
   (offset-32 uint32                            :offset-assert 68)
   (offset-16 uint32                            :offset-assert 72)
   (reserved  uint32                            :offset-assert 76)
   (data      vector       133          :inline :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8a0
  :flag-assert         #x9000008a0
  )

(deftype joint-anim-compressed-frame (structure)
  ((offset-64 uint32     :offset-assert 0)
   (offset-32 uint32     :offset-assert 4)
   (offset-16 uint32     :offset-assert 8)
   (reserved  uint32     :offset-assert 12)
   (data      vector 133 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x860
  :flag-assert         #x900000860
  )

(deftype joint-anim-compressed-control (structure)
  ((num-frames uint16                               :offset-assert 0) ;; uint32
   (flags      uint16                               :offset-assert 2)
   (fixed-qwc  uint32                               :offset-assert 4)
   (frame-qwc  uint32                               :offset-assert 8)
   (fixed      joint-anim-compressed-fixed          :offset-assert 12)
   (data       joint-anim-compressed-frame :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype art (basic)
  ((name   string    :offset 8) ;; guessed by decompiler
   (length int32     :offset-assert 12)
   (extra  res-lump  :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x14
  :flag-assert         #xd00000014
  (:methods
    (login (_type_) _type_ 9)
    (get-art-by-name-method (_type_ string type) basic 10)
    (get-art-idx-by-name-method (_type_ string type) int 11)
    (needs-link? (_type_) symbol 12)
    )
  )


(deftype art-element (art)
  ((pad uint8 12))
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  )


(deftype art-mesh-anim (art-element)
  ((data basic :dynamic))
  :flag-assert #xd00000020
  )

(declare-type merc-eye-anim-block structure)
(deftype art-joint-anim (art-element)
  ((speed                  float                          :offset 20)
   (artist-base            float                          :offset 24)
   (artist-step            float                          :offset 28)
   (eye-anim               merc-eye-anim-block            :offset 4)
   (master-art-group-name  string                         :offset-assert 32) ;; guessed by decompiler
   (master-art-group-index int32                          :offset-assert 36)
   (blend-shape-anim       basic                          :offset-assert 40)
   (frames                 joint-anim-compressed-control  :offset-assert 44)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  ;; field blend-shape-anim uses ~A with a signed load
  (:methods
    )
  )

(deftype art-group (art)
  ((info  file-info    :offset 4)
   (data  art-element  :score -1 :dynamic :offset 32) ;; might just be art?
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  ;; Failed to read fields.
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (link-art! (_type_) art-group 13)
    (unlink-art! (_type_) int 14)
    )
  )

(deftype art-mesh-geo (art-element)
  ((data  basic  :dynamic :offset-assert 32)
   )
  :flag-assert #xd00000020
  )

(deftype art-joint-geo (art-element)
  ((data  joint  :dynamic :offset-assert 32)
   )
  :flag-assert #xd00000020
  )

(deftype art-joint-anim-manager-slot (structure)
  ((anim       art-joint-anim :offset-assert 0)
   (comp-data  uint32  :offset-assert 4)
   (time-stamp uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype art-joint-anim-manager (basic)
  ((kheap kheap :inline)
   (free-index int32)
   (slot art-joint-anim-manager-slot 64 :inline)
   )
  :method-count-assert 14
  :size-assert         #x430
  :flag-assert         #xe00000430
  ;; Failed to read fields.
  (:methods
    (new (symbol type int) _type_ 0)
    (decompress (_type_ art-joint-anim) art-joint-anim 9)
    (update-time-stamp (_type_ art-joint-anim) art-joint-anim 10)
    (unload-from-slot (_type_ int) art-joint-anim 11)
    (used-bytes-for-slot (_type_ int) int 12)
    (unload-from-level (_type_ level) none 13)
    )
  )

(deftype skeleton-group (art-group)
  ((art-group-name     string           :offset-assert 32) ;; guessed by decompiler
   (jgeo               int32            :offset-assert 36)
   (janim              int32            :offset-assert 40)
   (bounds             vector  :inline  :offset-assert 48)
   (radius             meters           :offset 60)
   (mgeo               int16   6        :offset-assert 64) ;; guessed by decompiler
   (max-lod            int32            :offset-assert 76)
   (lod-dist           float   6        :offset-assert 80) ;; guessed by decompiler
   (longest-edge       meters           :offset-assert 104)
   (texture-level      int8             :offset-assert 108)
   (version            int8             :offset-assert 109)
   (shadow             int8             :offset-assert 110)
   (sort               int8             :offset-assert 111)
   (origin-joint-index int8             :offset-assert 112)
   (shadow-joint-index int8             :offset-assert 113)
   (light-index        uint8            :offset-assert 114)
   (pad uint8) ;; ?
   )
  :method-count-assert 16
  :size-assert         #x74
  :flag-assert         #x1000000074
  (:methods
    (add-to-loading-level (_type_) skeleton-group 15)
    )
  )

(declare-type merc-ctrl art-element)
(deftype lod-group (structure)
  ((geo  merc-ctrl  :offset-assert 0) ;; guessed by decompiler
   (dist meters     :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype lod-set (structure)
  ((lod     lod-group 6 :inline :offset-assert 0) ;; guessed by decompiler
   (max-lod int8        :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x31
  :flag-assert         #xa00000031
  (:methods
    (lod-set-method-9 () none 9) ;; (setup-lods! (_type_ skeleton-group art-group entity) _type_ 9)
    )
  )

(defenum draw-control-status
  :type uint16
  :bitfield #t
  (close-to-screen 0) ;; 1
  (no-draw         1) ;; 2
  (no-draw-temp    2) ;; 4
  (on-screen       3) ;; 8
  (uninited        4) ;; 16
  (no-draw-bounds  5) ;; 32
  (no-closest-distance 6) ;; 64
  (math-skel       7) ;; 128
  (force-vu1       8) ;; 256
  (no-draw-bounds2 9) ;; 512
  (force-fade      10) ;; 1024
  (warp-cross-fade 11) ;; 2048
  (lod-set         12) ;; 4096
  (disable-fog     13) ;; 8192
  (hud             14) ;; 16384
  )

(defenum draw-control-data-format
  :type uint8
  :bitfield #f
  (pris 0)
  (merc 1)
  )

(defenum draw-control-global-effect
  :type uint8
  :bitfield #t
  (bit-0       0)
  (bit-1       1) ;; 2
  (title-light 2) ;; 4
  (disable-envmap 3) ;; 8
  )

(declare-type ripple-control basic)
(declare-type shadow-control basic)
(declare-type shadow-geo basic)
(declare-type joint-control basic)

(deftype draw-control (basic)
  ((process process :offset-assert 4)
   (status draw-control-status)
   (data-format draw-control-data-format)
   (global-effect draw-control-global-effect)
   (art-group art-group :offset-assert 12)
   (jgeo art-joint-geo)
   (mgeo merc-ctrl)
   (dma-add-func function) ;; (function process-drawable draw-control symbol object none)
   (skeleton skeleton)
   (lod-set lod-set :inline)
   (max-lod int8 :offset 80)
   (force-lod int8)
   (cur-lod int8)
   (desired-lod int8)
   (ripple ripple-control)
   (longest-edge meters :offset-assert 88)
   (longest-edge? uint32 :offset 88)
   (light-index uint8)
   (shadow-mask uint8)
   (level-index uint8)
   (death-draw-overlap uint8 :offset-assert 95)
   (death-timer uint8)
   (death-timer-org uint8)
   (death-vertex-skip uint16)
   (death-effect uint32)
   (shadow shadow-geo)
   (shadow-ctrl shadow-control :offset-assert 108)
   (distance meters)
   (origin vector :inline)
   (bounds vector :inline)
   (radius meters :offset 156)
   (color-mult rgbaf :inline)
   (color-emissive rgbaf :inline)
   (effect-mask uint64)
   (seg-mask uint64)
   (origin-joint-index uint8)
   (shadow-joint-index uint8)
   (force-fade uint8)
   (default-texture-page uint8)
   (shadow-values uint32)
   )
  :method-count-assert 15
  :size-assert         #xd8
  :flag-assert         #xf000000d8
  ;; Failed to read fields.
  (:methods
     ;; (new (symbol type process art-joint-geo) _type_ 0)
    (get-skeleton-origin (_type_) vector 9)
    (draw-control-method-10 () none 10) ;; (lod-set! (_type_ int) none 10)
    (draw-control-method-11 () none 11) ;; (lods-assign! (_type_ lod-set) none 11)
    (draw-control-method-12 () none 12)
    (draw-control-method-13 () none 13)
    (draw-control-method-14 (_type_ cspace-array joint-control) none 14)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu1-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pris-mtx (structure)
  ((data   float   32      :offset-assert 0) ;; guessed by decompiler
   (vector vector  8       :offset 0) ;; guessed by decompiler
   (t-mtx  matrix  :inline :offset 0)
   (n-mtx  matrix3 :inline :offset 64)
   (scale  vector  :inline :offset 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-pris-mtx-save (structure)
  ((loc-mtx pris-mtx :inline :offset-assert 0)
   (par-mtx pris-mtx :inline :offset-assert 128)
   (dif-mtx pris-mtx :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype generic-constants (structure)
  ((fog         vector :inline :offset-assert 0)
   (adgif       gs-gif-tag  :inline :offset-assert 16) ;; was qword
   (hvdf-offset vector :inline :offset-assert 32)
   (hmge-scale  vector :inline :offset-assert 48)
   (invh-scale  vector :inline :offset-assert 64)
   (guard       vector :inline :offset-assert 80)
   (flush       qword  :inline :offset-assert 96)
   (stores      qword  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-shrub-constants (structure)
  ((shrub-giftag generic-gif-tag :inline :offset-assert 0)
   (shrub-adnop  qword           :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype gcf-shader (structure)
  ((adgif  uint128      5       :offset-assert 0) ;; guess
   (shader adgif-shader :inline :offset 0)
   (pos    uint32               :offset 12)
   (num    uint32               :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype gcf-control (structure)
  ((matrix      matrix          :inline  :offset-assert 0)
   (giftag      generic-gif-tag :inline  :offset-assert 64)
   (adnops      uint32         2        :offset-assert 80) ;; guess
   (num-strips  uint32                   :offset 76)
   (num-dps     uint32                   :offset 92)
   (kick-offset uint32                   :offset 108)
   (shader      gcf-shader :inline       :dynamic :offset-assert 112) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype gcf-vertex (structure)
  ((tex vector4w       :inline :offset-assert 0)
   (clr gs-packed-rgba :inline :offset-assert 16)
   (pos gs-packed-xyzw :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ripple-merc-query (inline-array-class)
  ((start-vertex     int32           :offset-assert 16)
   (vertex-skip      int32           :offset-assert 20)
   (vertex-count     int32           :offset-assert 24)
   (current-loc      int32           :offset-assert 28)
   (data             vector :inline :dynamic :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype merc-byte-header (structure)
  ((srcdest-off        uint8    :offset-assert 0)
   (rgba-off           uint8    :offset-assert 1)
   (lump-off           uint8    :offset-assert 2)
   (fp-off             uint8    :offset-assert 3)
   (mat1-cnt           uint8    :offset-assert 4)
   (mat2-cnt           uint8    :offset-assert 5)
   (mat3-cnt           uint8    :offset-assert 6)
   (samecopy-cnt       uint8    :offset-assert 7)
   (crosscopy-cnt      uint8    :offset-assert 8)
   (strip-len          uint8    :offset-assert 9)
   (mm-quadword-fp-off uint8    :offset-assert 10)
   (mm-quadword-size   uint8    :offset-assert 11)
   (perc-off           uint8    :offset-assert 12)
   (mat-slot           uint8 10 :offset-assert 13) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

(deftype merc-fragment (structure)
  ((header merc-byte-header :inline :offset-assert 0)
   (rest   uint8            1       :offset-assert 23) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (login-adgifs (_type_) merc-fragment 9)
    )
  )

(deftype merc-vtx (structure)
  ((mat-0 uint8  :offset-assert 0)
   (mat-1 uint8  :offset-assert 1)
   (nrm-x uint8  :offset-assert 2)
   (pos-x uint8  :offset-assert 3)
   (dst-0 uint8  :offset-assert 4)
   (dst-1 uint8  :offset-assert 5)
   (nrm-y uint8  :offset-assert 6)
   (pos-y uint8  :offset-assert 7)
   (tex-s uint8  :offset-assert 8)
   (tex-t uint8  :offset-assert 9)
   (nrm-z uint8  :offset-assert 10)
   (pos-z uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype merc-fp-header (structure)
  ((x-add            float  :offset-assert 0)
   (y-add            float  :offset-assert 4)
   (z-add            float  :offset-assert 8)
   (shader-cnt       uint8  :offset-assert 12)
   (kick-info-offset uint8  :offset-assert 13)
   (kick-info-step   uint8  :offset-assert 14)
   (hword-cnt        uint8  :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-mat-dest (structure)
  ((matrix-number uint8  :offset-assert 0)
   (matrix-dest   uint8  :offset-assert 1)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype merc-fragment-control (structure)
  ((unsigned-four-count uint8                  :offset-assert 0)
   (lump-four-count     uint8                  :offset-assert 1)
   (fp-qwc              uint8                  :offset-assert 2)
   (mat-xfer-count      uint8                  :offset-assert 3)
   (mat-dest-data       merc-mat-dest :inline :dynamic :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype merc-blend-data (structure) ;; was unknown!
  ((int8-data int8 :dynamic :offset-assert 0)
   )
  )

(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count     uint8          :offset-assert 0)
   (nonzero-index-count uint8          :offset-assert 1)
   (bt-index            uint8 :dynamic :offset-assert 2) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype mei-envmap-tint (structure)
  ((fade0 float   :offset-assert 0)
   (fade1 float   :offset-assert 4)
   (tint  uint32  :offset-assert 8)
   (dummy int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-texture-scroll (structure)
  ((max-dist     float   :offset-assert 0)
   (st-int-scale uint8   :offset-assert 4)
   (time-factor  uint8   :offset-assert 5)
   (scroll-dir   uint8   :offset-assert 6)
   (cached-time  uint8   :offset-assert 7)
   (time-delta   uint8   :offset-assert 8)
   (dummy        uint8 7 :offset-assert 9) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-ripple (structure)
  ((x-base    float  :offset-assert 0)
   (z-base    float  :offset-assert 4)
   (grid-size float  :offset-assert 8)
   (angle     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-extra-info (structure)
  ((envmap-tint-offset    uint8    :offset-assert 0)
   (shader-offset         uint8    :offset-assert 1)
   (texture-scroll-offset uint8    :offset-assert 2)
   (ripple-offset         uint8    :offset-assert 3)
   (dummy                 uint8 12 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-effect (structure)
  ((frag-geo            merc-fragment          :offset-assert 0)
   (frag-ctrl           merc-fragment-control  :offset-assert 4)
   (blend-data          merc-blend-data        :offset-assert 8)
   (blend-ctrl          merc-blend-ctrl        :offset-assert 12)
   (merc-effect-version uint8                  :offset-assert 16)
   (effect-bits         uint8                  :offset-assert 17)
   (frag-count          uint16                 :offset-assert 18)
   (blend-frag-count    uint16                 :offset-assert 20)
   (tri-count           uint16                 :offset-assert 22)
   (dvert-count         uint16                 :offset-assert 24)
   (texture-index       uint8                  :offset-assert 26)
   (effect-usage        uint8                  :offset-assert 27)
   (extra-info          merc-extra-info        :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (login-adgifs (_type_) none 9)
    )
  )

(deftype merc-eye-ctrl (structure)
  ((eye-slot           int8                 :offset-assert 0)
   (shader-offset      int8                 :offset-assert 1)
   (shader-count       int8                 :offset-assert 2)
   (shader             adgif-shader 6 :inline  :offset-assert 16 :score -1) ;; guessed by decompiler
   (left-iris-shader   adgif-shader :inline :offset 16)
   (left-pupil-shader  adgif-shader :inline :offset 96)
   (left-lid-shader    adgif-shader :inline :offset 176)
   (right-iris-shader  adgif-shader :inline :offset 256)
   (right-pupil-shader adgif-shader :inline :offset 336)
   (right-lid-shader   adgif-shader :inline :offset 416)
   )
  :method-count-assert 9
  :size-assert         #x1f0
  :flag-assert         #x9000001f0
  )

(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x int8    :offset-assert 0)
   (pupil-trans-y int8    :offset-assert 1)
   (blink         int8    :offset-assert 2)
   (iris-scale    int8    :offset 4)
   (pupil-scale   int8    :offset 5)
   (lid-scale     int8    :offset 6)
   (dword         uint64  :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-eye-anim-block (structure)
  ((max-frame int16                        :offset-assert 0)
   (data      merc-eye-anim-frame :inline :dynamic :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype texture-usage-group (structure)
  ((data texture-masks 7 :inline :offset-assert 0) ;; total guess here
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

(deftype merc-ctrl-header (structure)
  ((xyz-scale              float                        :offset-assert 0)
   (st-magic               uint32                       :offset-assert 4)
   (st-out-a               uint32                       :offset-assert 8)
   (st-out-b               uint32                       :offset-assert 12)
   (st-vif-add             uint32                       :offset-assert 16)
   (st-int-off             uint16                       :offset-assert 20)
   (st-int-scale           uint16                       :offset-assert 22)
   (effect-count           uint32                       :offset-assert 24)
   (blend-target-count     uint32                       :offset-assert 28)
   (fragment-count         uint16                       :offset-assert 32)
   (tri-count              uint16                       :offset-assert 34)
   (matrix-count           uint8                        :offset-assert 36)
   (shader-count           uint8                        :offset-assert 37)
   (transform-vertex-count uint16                       :offset-assert 38)
   (dvert-count            uint16                       :offset-assert 40)
   (one-mat-count          uint16                       :offset-assert 42)
   (two-mat-count          uint16                       :offset-assert 44)
   (two-mat-reuse-count    uint16                       :offset-assert 46)
   (three-mat-count        uint16                       :offset-assert 48)
   (three-mat-reuse-count  uint16                       :offset-assert 50)
   (shader-upload-count    uint8                        :offset-assert 52)
   (matrix-upload-count    uint8                        :offset-assert 53)
   (same-copy-count        uint16                       :offset-assert 54)
   (cross-copy-count       uint16                       :offset-assert 56)
   (num-verts              uint16                       :offset-assert 58)
   (longest-edge           float                        :offset-assert 60)
   (eye-ctrl               merc-eye-ctrl                :offset-assert 64)
   (pad                    uint32              3        :offset-assert 68)
   (masks-padding          texture-masks       :inline  :offset-assert 80)
   (texture-usage-group    texture-usage-group          :offset 80)
   (dummy-bytes            uint8               :dynamic :offset 32) ;; guessed by decompiler
   (envmap-tint            uint32                       :offset 32)
   (query                  basic                        :offset 36)
   (needs-clip             uint8                        :offset 40)
   (use-isometric          uint8                        :offset 41)
   (use-attached-shader    uint8                        :offset 42)
   (display-triangles      uint8                        :offset 43)
   (death-vertex-skip      uint16                       :offset 44)
   (death-start-vertex     uint16                       :offset 46)
   (death-effect           uint32                       :offset 48)
   (use-translucent        uint8                        :offset 52)
   (display-this-fragment  uint8                        :offset 53)
   (use-warp               uint8                        :offset 54)
   (ignore-alpha           uint8                        :offset 55)
   (force-fade             uint8                        :offset 56)
   (disable-fog            uint8                        :offset 57)
   (disable-envmap         uint8                        :offset 58)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  ;; field xyz-scale is a float printed as hex?
  )

(deftype merc-ctrl (art-element)
  ((num-joints int32                     :offset 20)
   (seg-table  basic                     :offset 24)
   (header     merc-ctrl-header :inline  :offset-assert 32)
   (effect     merc-effect      :inline :dynamic :offset-assert 160) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #xa0
  :flag-assert         #xd000000a0
  (:methods
    )
  )

(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag   :inline :offset-assert 0)   ;; was qword
   (ad-gif        gs-gif-tag   :inline :offset-assert 16)  ;; was qword
   (hvdf-offset   vector  :inline :offset-assert 32)
   (perspective   uint128 4       :offset-assert 48) ;; guessed by decompiler
   (fog           vector  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype emerc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag    :inline :offset-assert 0)
   (ad-gif        gs-gif-tag    :inline :offset-assert 16)
   (hvdf-offset   vector        :inline :offset-assert 32)
   (perspective   vector 4      :inline :offset-assert 48)
   (fog           vector        :inline :offset-assert 112)
   (unperspect    vector        :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(deftype ripple-wave (structure)
  ((scale float  :offset-assert 0)
   (offs  float  :offset-assert 4)
   (xdiv  int16  :offset-assert 8)
   (zdiv  int16  :offset-assert 10)
   (speed float  :offset-assert 12)
   (xmul  float  :offset-assert 16)
   (zmul  float  :offset-assert 20)
   (delta float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype ripple-wave-set (basic)
  ((count        int32         :offset-assert 4)
   (converted    basic         :offset-assert 8)
   (normal-scale float         :offset-assert 12)
   (wave         ripple-wave 4 :inline :offset-assert 16) ;; guessed by decompiler
   (frame-save   uint64        :offset-assert 128) ;; uint32
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(deftype ripple-control (basic)
  ((global-scale            float              :offset-assert 4)
   (last-frame-scale        float              :offset-assert 8)
   (close-fade-dist         float              :offset-assert 12)
   (far-fade-dist           float              :offset-assert 16)
   (faded-scale             float              :offset-assert 20)
   (individual-normal-scale float              :offset-assert 24)
   (waveform                ripple-wave-set    :offset-assert 28) ;; guessed by decompiler
   (send-query              symbol             :offset-assert 32) ;; guessed by decompiler
   (query                   ripple-merc-query  :offset-assert 36) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(define-extern merc-fragment-fp-data (function merc-fragment merc-fp-header))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-merc-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype merc-matrix (structure)
  ((quad   uint128 8 :offset-assert 0) ;; guessed by decompiler
   (vector vector  8 :offset 0) ;; guessed by decompiler
   (tag    uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-merc-tag (dma-packet)
  ((next-ptr uint32  :offset 12)
   (size     uint32  :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-merc-ctrl (structure)
  ((tag    generic-merc-tag :inline :offset-assert 0)
   (lights vu-lights        :inline :offset-assert 16)
   (header merc-ctrl-header :inline :offset-assert 128)
   (effect merc-effect      :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data uint128 11 :offset-assert 288) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1d0
  :flag-assert         #x9000001d0
  )

(deftype generic-merc-input (structure)
  ((geo-tag     generic-merc-tag           :inline :offset-assert 0)
   (geo-block   uint8                      1296    :offset-assert 16) ;; guessed by decompiler
   (byte-header merc-byte-header           :inline :offset 16)
   (matrix      merc-matrix                9 :inline      :offset-assert 1312) ;; guessed by decompiler
   (control     generic-merc-ctrl-with-sfx :inline :offset-assert 2464)
   (end-tag     generic-merc-tag           :inline :offset-assert 2928)
   (shader      adgif-shader               :inline :offset-assert 2944)
   )
  :method-count-assert 9
  :size-assert         #xbd0
  :flag-assert         #x900000bd0
  )

(deftype generic-merc-output (structure)
  ((info             gsf-info   :inline :offset-assert 0)
   (header           gsf-header :inline :offset-assert 16)
   (index-kick-table uint16     80      :offset-assert 32) ;; guessed by decompiler
   (index-table      uint8      160     :offset 32) ;; guessed by decompiler
   (inverse-table    uint8      256     :offset-assert 192) ;; guessed by decompiler
   (vertex-table     gsf-vertex 72  :inline :offset-assert 448) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xac0
  :flag-assert         #x900000ac0
  )

(deftype generic-merc-dcache (structure)
  ((output-a    generic-merc-output :inline :offset-assert 0)
   (output-b    generic-merc-output :inline :offset-assert 2752)
   (inv-table-1 uint8               544     :offset-assert 5504) ;; guessed by decompiler
   (inv-table-7 uint8               544     :offset-assert 6048) ;; guessed by decompiler
   (inv-safety  uint8               16      :offset-assert 6592) ;; guessed by decompiler
   (effect-data uint8               1584    :offset-assert 6608) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype gm-shadow (structure)
  ((perspective                matrix              :inline :offset-assert 0)
   (isometric                  matrix              :inline :offset-assert 64)
   (inv-camera-rot             matrix              :inline :offset-assert 128)
   (envmap-shader              adgif-shader        :inline :offset-assert 192)
   (current-chain              uint32                      :offset-assert 272)
   (next-chain                 uint32                      :offset-assert 276)
   (buf-index                  uint32                      :offset-assert 280)
   (fragment-count             uint32                      :offset-assert 284)
   (write-limit                int32                       :offset-assert 288) ;; pointer
   (indexed-input-base         generic-merc-input          :offset-assert 292)
   (other-input-base           generic-merc-input          :offset-assert 296)
   (indexed-output-base        generic-merc-output         :offset-assert 300)
   (other-output-base          generic-merc-output         :offset-assert 304)
   (p-input                    uint32                      :offset-assert 308)
   (gsf-buf                    generic-merc-dcache         :offset-assert 312)
   (p-fheader                  merc-fp-header              :offset-assert 316)
   (curr-chain                 basic                       :offset-assert 320)
   (mercneric-convert          basic                       :offset-assert 324)
   (generic-prepare-dma-single basic                       :offset-assert 328)
   (generic-prepare-dma-double basic                       :offset-assert 332)
   (generic-light-proc         basic                       :offset-assert 336)
   (generic-envmap-proc        basic                       :offset-assert 340)
   (high-speed-reject          basic                       :offset-assert 344)
   (dummy-0                    uint32                      :offset-assert 348)
   (hsr-xmult                  vector              :inline :offset-assert 352)
   (hsr-ymult                  vector              :inline :offset-assert 368)
   (warp-consts                vector              :inline :offset-assert 384)
   )
  :method-count-assert 9
  :size-assert         #x190
  :flag-assert         #x900000190
  )

(deftype generic-merc-work (structure)
  ((input-a generic-merc-input         :inline :offset-assert 0)
   (input-b generic-merc-input         :inline :offset-assert 3024)
   (ctrl    generic-merc-ctrl-with-sfx :inline :offset-assert 6048)
   (shadow  gm-shadow                  :inline :offset-assert 6512)
   (stack   uint128                    16      :offset-assert 6912) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c00
  :flag-assert         #x900001c00
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-tie-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype generic-tie-instance (structure)
  ((matrix-tag  dma-packet :inline :offset-assert 0)
   (matrix-data vector     6 :inline      :offset-assert 16) ;; guessed by decompiler
   (index-tag   dma-packet :inline :offset-assert 112)
   (indices     uint8      224     :offset-assert 128) ;; guessed by decompiler
   (end-tag     dma-packet :inline :offset-assert 352)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-tie-input (structure)
  ((palette-tag dma-packet :inline :offset-assert 0)
   (palette     rgba       128     :offset-assert 16) ;; guessed by decompiler
   (model-tag   dma-packet :inline :offset-assert 528)
   (model       vector     146 :inline    :offset-assert 544) ;; guessed by decompiler
   (matrix-tag  dma-packet :inline :offset-assert 2880)
   (matrix-data vector     6 :inline      :offset-assert 2896) ;; guessed by decompiler
   (index-tag   dma-packet :inline :offset-assert 2992)
   (indices     uint8      224     :offset-assert 3008) ;; guessed by decompiler
   (end-tag     dma-packet :inline :offset-assert 3232)
   )
  :method-count-assert 9
  :size-assert         #xcb0
  :flag-assert         #x900000cb0
  )

(deftype generic-tie-run-control (structure)
  ((skip-bp2    uint8  :offset-assert 0)
   (skip-ips    uint8  :offset-assert 1)
   (gifbuf-skip uint8  :offset-assert 2)
   (strips      uint8  :offset-assert 3)
   (target-bp1  uint8  :offset-assert 4)
   (target-bp2  uint8  :offset-assert 5)
   (target-ip1  uint8  :offset-assert 6)
   (target-ip2  uint8  :offset-assert 7)
   (target-bps  uint8  :offset-assert 8)
   (target-ips  uint8  :offset-assert 9)
   (is-generic  uint8  :offset-assert 10)
   (reserved    uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype generic-tie-base-point (structure)
  ((data uint16  8 :offset-assert 0) ;; guessed by decompiler
   (quad uint128   :offset 0)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset 4)
   (d0   int16     :offset 6)
   (vtx  uint64    :offset 0)
   (u    int16     :offset 8)
   (v    int16     :offset 10)
   (tex  uint32    :offset 8)
   (w    int16     :offset 12)
   (d1   int16     :offset 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-bps (structure)
  ((bp generic-tie-base-point 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype generic-tie-interp-point (structure)
  ((data   uint16  12 :offset-assert 0) ;; guessed by decompiler
   ;(quad   uint128    :offset 0) ;; misaligned??
   (x      int16      :offset 0)
   (y      int16      :offset 2)
   (z      int16      :offset 4)
   (d0     int16      :offset 6)
   (vtx0   uint64     :offset 0)
   (dx     int16      :offset 8)
   (dy     int16      :offset 10)
   (dz     int16      :offset 12)
   (unused int16      :offset 14)
   (vtx1   uint64     :offset 8)
   (u      int16      :offset 16)
   (v      int16      :offset 18)
   (tex    uint32     :offset 16)
   (w      int16      :offset 20)
   (d1     int16      :offset 22)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype generic-tie-ips (structure)
  ((ip generic-tie-interp-point 2 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-header (structure)
  ((effect              uint8              :offset-assert 0)
   (interp-table-size   uint8              :offset-assert 1)
   (num-bps             uint8              :offset-assert 2)
   (num-ips             uint8              :offset-assert 3)
   (tint-color          uint32             :offset-assert 4)
   (index-table-offset  uint16             :offset-assert 8)
   (kick-table-offset   uint16             :offset-assert 10)
   (normal-table-offset uint16             :offset-assert 12)
   (interp-table-offset uint16             :offset-assert 14)
   (gsf-header          gsf-header :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype generic-tie-matrix (structure)
  ((matrix matrix :inline :offset-assert 0)
   (morph  vector :inline :offset-assert 64)
   (fog    qword  :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype generic-tie-normal (structure)
  ((x     int8  :offset-assert 0)
   (y     int8  :offset-assert 1)
   (z     int8  :offset-assert 2)
   (dummy int8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-tie-control (structure)
  ((ptr-palette   uint32                   :offset-assert 0)
   (ptr-shaders   uint32                   :offset-assert 4)
   (ptr-runctrl   generic-tie-run-control  :offset-assert 8)
   (ptr-verts     uint32                   :offset-assert 12)
   (ptr-generic   generic-tie-header       :offset-assert 16)
   (ptr-dps       uint32                   :offset-assert 20)
   (ptr-kicks     uint32                   :offset-assert 24)
   (ptr-normals   uint32                   :offset-assert 28)
   (ptr-interp    uint32                   :offset-assert 32)
   (ptr-mtxs      generic-tie-matrix       :offset-assert 36)
   (ptr-cinds     uint32                   :offset-assert 40)
   (next-instance uint32                   :offset-assert 44)
   (next-model    uint32                   :offset-assert 48)
   (next-is-model uint32                   :offset-assert 52)
   (tie-type      uint32                   :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype generic-tie-stats (structure)
  ((num-bps       uint32  :offset-assert 0)
   (num-ips       uint32  :offset-assert 4)
   (num-dps       uint32  :offset-assert 8)
   (num-shaders   uint32  :offset-assert 12)
   (num-models    uint32  :offset-assert 16)
   (num-instances uint32  :offset-assert 20)
   (num-waits     uint32  :offset-assert 24)
   (num-qwc       uint32  :offset-assert 28)
   (max-qwc       uint32  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double basic  :offset-assert 0)
   (generic-envmap-dproc       basic  :offset-assert 4)
   (generic-interp-dproc       basic  :offset-assert 8)
   (generic-no-light-dproc     basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-shadow (structure)
  ((out-buf      gsf-buffer                :offset-assert 0)
   (cur-buf      uint32                    :offset-assert 4)
   (tie-type     int32                     :offset-assert 8)
   (ptr-inst     uint32                    :offset-assert 12)
   (ptr-buf      uint32                    :offset-assert 16)
   (inst-xor     int32                     :offset-assert 20)
   (end-of-chain uint32                    :offset-assert 24)
   (write-limit  uint32                    :offset-assert 28)
   (calls        generic-tie-calls :inline :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-work (structure)
  ((control     generic-tie-control  :inline :offset-assert 0)
   (interp-job  generic-interp-job   :inline :offset-assert 60)
   (shadow      generic-tie-shadow   :inline :offset-assert 76)
   (input-a     generic-tie-input    :inline :offset-assert 128)
   (input-b     generic-tie-input    :inline :offset-assert 3376)
   (inst-buf    generic-tie-instance :inline :offset-assert 6624)
   (palette-buf rgba                 128     :offset-assert 6992) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1d50
  :flag-assert         #x900001d50
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-work-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype generic-input-buffer (structure)
  ((data uint128           473     :offset-assert 0) ;; guessed by decompiler
   (merc generic-merc-work :inline :offset 0)
   (tie  generic-tie-work  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x1d90
  :flag-assert         #x900001d90
  )

(deftype generic-debug (structure)
  ((locks      uint32 4  :offset-assert 0) ;; guessed by decompiler
   (timer      uint32 32 :offset-assert 16) ;; guessed by decompiler
   (count      uint32 32 :offset-assert 144) ;; guessed by decompiler
   (vps        uint32 32 :offset-assert 272) ;; guessed by decompiler
   (buffer     int32     :offset-assert 400)
   (start-addr int32     :offset-assert 404)
   (lock       int32     :offset-assert 408)
   )
  :method-count-assert 9
  :size-assert         #x19c
  :flag-assert         #x90000019c
  )

(deftype generic-vu1-header (structure)
  ((matrix  matrix          :inline :offset-assert 0)
   (strgif  generic-gif-tag :inline :offset-assert 64)
   (adcmds  gs-adcmd      2 :inline :offset-assert 80) ;; guessed by decompiler
   (adnop1  gs-adcmd        :inline :offset 80) ;; ad-cmd :inline
   (adnop2  gs-adcmd        :inline :offset 96) ;; ad-cmd :inline
   (dps     uint16                  :offset 92)
   (kickoff uint16                  :offset 108)
   (strips  uint16                  :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-vu1-texbuf (structure)
  ((header generic-vu1-header :inline  :offset-assert 0)
   (shader uint32             :dynamic :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-texbuf (structure)
  ((tag    dma-packet         :inline  :offset-assert 0)
   (header generic-vu1-header :inline  :offset-assert 16)
   (shader uint32             :dynamic :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-effect-work (structure)
  ((consts   generic-consts  :inline :offset-assert 0)
   (storage  generic-storage :inline :offset-assert 432)
   (storage2 generic-storage :inline :offset-assert 688)
   (lights   vu-lights       :inline :offset-assert 944)
   )
  :method-count-assert 9
  :size-assert         #x420
  :flag-assert         #x900000420
  )

(deftype generic-effect-buffer (structure)
  ((outbuf-0 uint8               3552    :offset-assert 0) ;; guessed by decompiler
   (work     generic-effect-work :inline :offset-assert 3552)
   (outbuf-1 uint8               3552    :offset-assert 4608) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1fe0
  :flag-assert         #x900001fe0
  )

(deftype generic-work (structure)
  ((saves   generic-saves         :inline :offset-assert 0)
   (storage generic-storage       :inline :offset-assert 368)
   (in-buf  generic-input-buffer  :inline :offset-assert 624)
   (fx-buf  generic-effect-buffer :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )

(define-extern *generic-debug* generic-debug)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-cpu-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum shadow-flags
  :bitfield #t
  :type int32
  (shdf00) ;; unused
  (disable-fade)
  (shdf02) ;; only set, never used.
  (shdf03)
  (shdf04) ;; unused
  (disable-draw)
  )

(deftype shadow-settings (structure)
  ((center        vector :inline :offset-assert 0 :score -1)
   (flags         shadow-flags   :offset 12) ;; shadow-flags
   (shadow-dir    vector :inline :offset-assert 16)
   (dist-to-locus float          :offset 28)
   (bot-plane     plane  :inline :offset-assert 32)
   (top-plane     plane  :inline :offset-assert 48)
   (fade-dist     float          :offset-assert 64)
   (fade-start    float          :offset-assert 68)
   (dummy-2       int32          :offset-assert 72)
   (shadow-type   int32          :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shadow-control (basic)
  ((settings shadow-settings :inline :offset-assert 16)
   )
  :method-count-assert 15
  :size-assert         #x60
  :flag-assert         #xf00000060
  (:methods
    (new (symbol type float float float float float) _type_ 0)
    (clear-offset-bit (shadow-control) int 9)
    (set-offset-bit (shadow-control) int 10)
    (set-top-plane-offset (shadow-control float) int 11)
    (set-bottom-plane-offset (shadow-control float) int 12)
    (shadow-control-method-13 () none 13) ;; (unused-13 (_type_) none 13)
    (shadow-control-method-14 () none 14) ;; (update-direction-from-time-of-day (_type_) none 14)
    )
  )

(deftype shadow-data (structure)
  ((dma-unpack-template dma-packet :inline :offset-assert 0)
   (dma-cnt             dma-tag            :offset-assert 16) ;; was u64
   (vif-nop             vif-tag            :offset-assert 24) ;; guessed by decompiler
   (vif-unpack-v4-8     vif-tag            :offset-assert 28) ;; guessed by decompiler
   (pdc                 basic              :offset-assert 32)
   (dist                float              :offset-assert 36)
   (waits               uint32             :offset-assert 40)
   (inside-volume?      uint32             :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype shadow-work (structure)
  ((shadow-data shadow-data :inline :offset-assert 0)
   (inbuf       uint128     600     :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x25b0
  :flag-assert         #x9000025b0
  )

(deftype shadow-bucket (structure)
  ((first        uint32  :offset-assert 0)
   (next         uint32  :offset-assert 4)
   (bucket-id    int32   :offset-assert 8)
   (shadow-color uint32  :offset-assert 12)
   (constants    basic   :offset-assert 16)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype shadow-globals (structure)
  ((num-buckets uint32    :offset-assert 0)
   (cur-bucket  uint32    :offset-assert 4)
   (bucket      shadow-bucket 2 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype shadow-vertex (structure)
  ((x      float  :offset-assert 0)
   (y      float  :offset-assert 4)
   (z      float  :offset-assert 8)
   (weight float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype shadow-matrix-ref (structure)
  ((joint-0 uint8  :offset-assert 0)
   (joint-1 uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

; (deftype shadow-edge (structure)
;   ((ind-0 uint16  :offset-assert 0)
;    (ind-1 uint16  :offset-assert 2)
;    (tri-0 uint16  :offset-assert 4)
;    (tri-1 uint16  :offset-assert 6)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

(deftype shadow-tri (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (ind-2 uint8  :offset-assert 2)
   (faces uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype shadow-edge (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (tri-0 uint8  :offset-assert 2)
   (tri-1 uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype shadow-frag-header (structure)
  ((qwc-data         uint32  :offset-assert 0)
   (num-joints       uint32  :offset-assert 4)
   (num-verts        uint16  :offset-assert 8)
   (num-twos         uint16  :offset-assert 10)
   (num-single-tris  uint16  :offset-assert 12)
   (num-single-edges uint16  :offset-assert 14)
   (num-double-tris  uint16  :offset-assert 16)
   (num-double-edges uint16  :offset-assert 18)
   (ofs-verts        uint32  :offset-assert 20)
   (ofs-refs         uint32  :offset-assert 24)
   (ofs-single-tris  uint32  :offset-assert 28)
   (ofs-single-edges uint32  :offset-assert 32)
   (ofs-double-tris  uint32  :offset-assert 36)
   (ofs-double-edges uint32  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype shadow-frag-ref (structure)
  ((header shadow-frag-header  :offset-assert 0)
   (qwc    uint32              :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype shadow-geo-old (art-element)
  ((version   uint32                      :offset 20)
   (header    shadow-frag-header :inline  :offset-assert 32)
   (total-qwc uint32                      :offset 32)
   (rest      uint64            :dynamic :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x50
  :flag-assert         #xd00000050
  (:methods
    )
  )

(deftype shadow-geo (art-element)
  ((version       uint32           :offset 20)
   (total-qwc     uint32           :offset-assert 32)
   (num-joints    uint32           :offset-assert 36)
   (num-fragments uint32           :offset-assert 40)
   (frags         shadow-frag-ref :inline :dynamic :offset-assert 44) ;; guess
   )
  :method-count-assert 13
  :size-assert         #x2c
  :flag-assert         #xd0000002c
  (:methods
    )
  )

(define-extern *shadow-globals* shadow-globals)
(define-extern *shadow* object) ;; symbol
(define-extern *shadow-object* object)
(define-extern *shadow-debug* object)
(define-extern *shadow-dma-buf* dma-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-vu1-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memcard-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mc-handle (int32)
  ()
  :flag-assert #x900000004
  )

(deftype mc-file-info (structure)
  ((present               int32     :offset-assert 0)
   (blind-data            float  16 :offset 4) ;; guessed by decompiler
   (blind-data-int8       int8   64 :offset 4) ;; guessed by decompiler
   (level-index           int32     :offset 4)
   (gem-count             float     :offset 8)
   (skill-count           float     :offset 12)
   (completion-percentage float     :offset 16)
   (minute                uint8     :offset 24)
   (hour                  uint8     :offset 25)
   (week                  uint8     :offset 26)
   (day                   uint8     :offset 27)
   (month                 uint8     :offset 28)
   (year                  uint8     :offset 29)
   (game-time0            uint32    :offset 36)
   (game-time1            uint32    :offset 40)
   (secrets               uint32    :offset 44)
   (features              uint32    :offset 48)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype mc-slot-info (structure)
  ((handle       int32          :offset-assert 0)
   (known        int32          :offset-assert 4)
   (formatted    int32          :offset-assert 8)
   (inited       int32          :offset-assert 12)
   (last-file    int32          :offset-assert 16)
   (mem-required int32          :offset-assert 20)
   (mem-actual   int32          :offset-assert 24)
   (file         mc-file-info 4 :inline :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x12c
  :flag-assert         #x90000012c
  )

(define-extern mc-sync (function int))
(define-extern show-mc-info (function dma-buffer none))

(define-extern mc-run (function none))
(define-extern mc-check-result (function int))
(define-extern mc-get-slot-info (function int mc-slot-info none))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-info-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype actor-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype highscore-info (structure)
  ((flags        uint8     :offset-assert 0)
   (award-scores float 3   :offset-assert 4)
   (bronze-score float     :offset        4)
   (silver-score float     :offset        8)
   (gold-score   float     :offset        12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (highscore-info-method-9 () none 9)
    )
  )

(deftype level-buffer-state (structure)
  ((name          symbol  :offset-assert 0) ;; guessed by decompiler
   (display?      symbol  :offset-assert 4) ;; guessed by decompiler
   (force-vis?    symbol  :offset-assert 8) ;; guessed by decompiler
   (force-inside? symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype load-state (basic)
  ((want level-buffer-state 6 :inline)
   (want-sound symbol 3)
   (vis-nick symbol :offset-assert 112)
   (command-list pair)
   (object-name string 256)
   (object-status basic 256)
   )
  :method-count-assert 22
  :size-assert         #x878
  :flag-assert         #x1600000878
  ;; Failed to read fields.
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (update! (_type_) int 10)
    (want-levels (_type_ (pointer symbol)) int 11)
    (want-sound-banks (_type_ (pointer symbol)) none 12)
    (want-display-level (_type_ symbol symbol) int 13)
    (want-vis-level (_type_ symbol) none 14)
    (want-force-vis (_type_ symbol symbol) int 15)
    (execute-command (_type_ pair) none 16)
    (execute-commands-up-to (_type_ float) none 17)
    (backup-load-state-and-set-cmds (_type_ pair) int 18)
    (restore-load-state-and-cleanup (_type_) int 19)
    (restore-load-state (_type_) int 20)
    (set-force-inside! (_type_ symbol symbol) none 21)
    )
  )


(defenum continue-flags
  :type uint32
  :bitfield #t
  (cf0 0)
  (cf1 1)
  (cf2 2)
  (cf3 3)
  (cf4 4)
  (cf5 5)
  (cf6 6)
  (cf7 7)
  (cf8 8)
  (cf9 9)
  (cf10 10)
  (cf11 11)
  (cf12 12)
  (cf13 13)
  (cf14 14)
  (cf15 15)
  (cf16 16)
  (cf17 17)
  (cf18 18)
  (cf19 19)
  (cf20 20)
  (cf21 21)
  (cf22 22)
  (cf23 23)
  (cf24 24)
  (cf25 25)
  (cf26 26)
  (cf27 27)
  (cf28 28)
  (cf29 29)
  (cf30 30)
  )

(deftype continue-point (basic)
  ((name string) ;; ?
   (level symbol) ;; ?
   (flags continue-flags)
   (trans vector :inline)
   (quat vector :inline)
   (camera-trans vector :inline)
   (camera-rot float 9)
   (on-goto pair)
   (vis-nick symbol)
   (want level-buffer-state 6 :inline)
   (want-sound symbol 3)
   )
  :method-count-assert 12
  :size-assert         #xd8
  :flag-assert         #xc000000d8
  ;; Failed to read fields.
  (:methods
    (continue-point-method-9 () none 9) ;; (debug-draw! (_type_) none 9)
    (continue-point-method-10 () none 10)
    (continue-point-method-11 (_type_) none 11)
    )
  )

(defenum mc-status-code
  :type uint32
  ;; (busy 0)
  (ok 1)
  ; (bad-handle 2)
  ; (format-failed 3)
  ; (internal-error 4)
  ; (write-error 5)
  ; (read-error 6)
  ; (new-game 7)
  ; (no-memory 8)
  ; (no-card 9)
  ; (no-last 10)
  ; (no-format 11)
  ; (no-file 12)
  ; (no-save 13)
  ; (no-space 14)
  ; (bad-version 15)
  ; (no-process 16)
  ; (no-auto-save 17)
  )

(declare-type entity-perm-array inline-array-class)
(declare-type continue-point basic)
(declare-type game-save basic)

(defenum game-feature
  :type uint64
  :bitfield #t
  (unk-game-feature-01)
  (unk-game-feature-02)
  (unk-game-feature-03)
  (unk-game-feature-04)
  (unk-game-feature-05)
  (unk-game-feature-06)
  (gun-yellow)
  (gun-red)
  (gun-blue)
  (gun-dark)
  (board)
  (carry)
  (sidekick)
  (darkjak)
  (gun-upgrade-speed)
  (gun-upgrade-ammo)
  (gun-upgrade-damage)
  (unk-game-feature-18)
  (pass-red)
  (pass-green)
  (pass-yellow)
  (unk-game-feature-22)
  (darkjak-bomb0)
  (darkjak-bomb1)
  (darkjak-invinc)
  (darkjak-giant)
  (board-training))

(defenum game-secrets
  :type uint32
  :bitfield #t
  (toggle-beard)
  (hflip-screen)
  (endless-ammo)
  (invulnerable)
  (endless-dark)
  (scene-player-1)
  (scene-player-2)
  (scene-player-3)
  (level-select)
  (scrap-book-1)
  (scrap-book-2)
  (gungame-blue)
  (gungame-dark)
  (reverse-races)
  (hero-mode)
  (big-head)
  (little-head))

(deftype game-info (basic)
  ((mode                   symbol               :offset-assert   4)
   (save-name              string               :offset-assert   8)
   (life                   float                :offset-assert  12)
   (life-max               float                :offset-assert  16)
   (money                  float                :offset-assert  20)
   (money-total            float                :offset-assert  24)
   (money-per-level        uint8             32 :offset-assert  28)
   (deaths-per-level       uint8             32 :offset-assert  60)
   (buzzer-total           float                :offset-assert  92)
   (fuel                   float                :offset-assert  96)
   (gem                    float                :offset-assert 100)
   (gem-total              float                :offset-assert 104)
   (skill                  float                :offset-assert 108)
   (skill-total            float                :offset-assert 112)
   (karma                  float                :offset-assert 116)
   (eco-pill-dark          float                :offset-assert 120)
   (eco-pill-dark-total    float                :offset-assert 124)
   (features               game-feature         :offset-assert 128)
   (debug-features         game-feature         :offset-assert 136)
   (secrets                game-secrets         :offset-assert 144)
   (unknown-pad1           uint32)
   (purchase-secrets       uint32               :offset-assert 152)
   (unknown-pad2           uint32               :offset-assert 156)
   (gun-type               int32                :offset-assert 160)
   (gun-ammo               float            4   :offset-assert 164)
   (shield                 float                :offset-assert 180)
   (score                  float                :offset-assert 184)
   (score-owner            uint64               :offset-assert 192)
   (timer                  uint64               :offset-assert 200)
   (timer-owner            uint64               :offset-assert 208)
   (timer-flash            basic                :offset-assert 216)
   (counter                float                :offset-assert 220)
   (counter-flash          basic                :offset-assert 224)
   (attack-id              uint32               :offset-assert 228)
   (perm-list              entity-perm-array    :offset-assert 232)
   (task-perm-list         entity-perm-array    :offset-assert 236)
   (current-continue       continue-point       :offset-assert 240)
   (last-continue          continue-point       :offset-assert 244)
   (play-list              (array game-task-info) :offset-assert 248)
   (sub-task-list          (array game-task-node-info) :offset-assert 252)
   (unknown-pad5 array :offset-assert 256)
   (task-counter           uint32               :offset-assert 260)
   (unknown-pad6           uint32               :offset-assert 264)
   (level-opened           uint8             32 :offset-assert 268)
   (total-deaths           int32                :offset-assert 300)
   (continue-deaths        int32                :offset-assert 304)
   (task-deaths            int32                :offset-assert 308)
   (total-trys             int32                :offset-assert 312)
   (game-start-time        time-frame           :offset-assert 320)
   (continue-time          time-frame           :offset-assert 328)
   (death-time             time-frame           :offset-assert 336)
   (hit-time               time-frame           :offset-assert 344)
   (task-pickup-time       time-frame           :offset-assert 352)
   (unknown-array1         (array uint64)       :offset-assert 360)
   (unknown-array2         (array uint64)       :offset-assert 364)
   (unknown-array3         (array uint64)       :offset-assert 368)
   (death-pos              vector-array         :offset        372)
   (stop-watch-start       uint64               :offset-assert 376)
   (stop-watch-stop        uint64               :offset-assert 384)
   (blackout-time          time-frame           :offset-assert 392)
   (letterbox-time         time-frame           :offset-assert 400)
   (hint-play-time         time-frame           :offset-assert 408)
   (display-text-time      time-frame           :offset-assert 416)
   (display-text-handle    uint64               :offset-assert 424)
   (death-movie-tick       int32                :offset-assert 432)
   (want-auto-save         symbol               :offset-assert 436)
   (auto-save-proc         handle               :offset-assert 440)
   (auto-save-status       mc-status-code       :offset-assert 448)
   (auto-save-card         int32                :offset-assert 452)
   (auto-save-which        int32                :offset-assert 456)
   (auto-save-count        int32                :offset-assert 460)
   (pov-camera-handle      uint64               :offset-assert 464)
   (other-camera-handle    uint64               :offset-assert 472)
   (controller             uint64            2  :offset-assert 480)
   (race-timer             uint64               :offset-assert 496)
   (race-current-lap-count int32                :offset-assert 504)
   (race-total-lap-count   int32                :offset-assert 508)
   (race-position          int32                :offset-assert 512)
   (race-number-turbos     int32                :offset-assert 516)
   (bot-health             uint32            3  :offset-assert 520)
   (demo-state             uint32               :offset-assert 532)
   (wanted-flash           basic                :offset-assert 536)
   (distance               float                :offset-assert 540)
   (kiosk-timeout          uint64               :offset-assert 544)
   (pause-start-time       time-frame           :offset-assert 552)
   (game-score             (array highscore-info)                :offset-assert 560)
   (goal                   float                :offset-assert 564)
   (miss                   float                :offset-assert 568)
   (miss-max               float                :offset-assert 572)
   (unknown-array4         (array uint64)       :offset-assert 576)
   (live-eco-pill-count    int32                :offset-assert 580)
   (live-gem-count         int32                :offset-assert 584)
   (air-supply             float                :offset-assert 588)
   (homing-beacon          int32                :offset-assert 592)
   (dark-eco-pickup        int32                :offset-assert 596)
   (green-eco-pickup       int32                :offset-assert 600)
   )
  :method-count-assert 31
  :size-assert         #x25c
  :flag-assert         #x1f0000025c
  (:methods
    (initialize! (_type_ symbol game-save string) _type_ 9)
    (game-info-method-10 () none 10) ;; (adjust (_type_ symbol float handle) float 10)
    (task-complete? (_type_ game-task) symbol 11)
    (game-info-method-12 (_type_) none 12) ;; (lookup-entity-perm-by-aid (_type_ actor-id) entity-perm 12)
    (game-info-method-13 () none 13) ;; (get-entity-task-perm (_type_ game-task) entity-perm 13)
    (game-info-method-14 () none 14) ;;  14)
    (game-info-method-15 () none 15)
    (copy-perms-from-level! (_type_ level) none 16)
    (copy-perms-to-level! (_type_ level) none 17)
    (game-info-method-18 () none 18)
    (get-current-continue-point (_type_) continue-point 19)
    (get-continue-by-name (_type_ string) continue-point 20)
    (set-continue! (_type_ basic) continue-point 21)
    (game-info-method-22 () none 22)
    (game-info-method-23 () none 23)
    (game-info-method-24 () none 24)
    (game-info-method-25 () none 25)
    (game-info-method-26 () none 26)
    (get-next-attack-id (_type_) uint 27)
    (game-info-method-28 () none 28)
    (game-info-method-29 () none 29)
    (game-info-method-30 () none 30)
    )
  )


(define-extern *GAME-bank* game-bank)
(define-extern *game-info* game-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gui-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defenum gui-action
  :type uint8
  :bitfield #f
  (none 0)
  (queue 1)
  (play 2)
  (playing 3)
  (stop 4)
  (stopping 5)
  (abort 6)
  (hide 7)
  (hidden 8)
  (fade 9)
  )

(defenum gui-channel
  :type uint8
  :bitfield #f
  (none 0)
  (art-load 16)
  (art-load-next 17)
  (background 18)
  (jak 19)
  (daxter 20)
  (sig 21)
  (ashelin 22)
  (mog 23)
  (jinx 24)
  (grim 25)
  (kid 26)
  (kor 27)
  (hal 28)
  (voicebox 29)
  (guard 30)
  (crocadog 31)
  (alert 32)
  (citizen 33)
  (bbush 34)
  (krew 35)
  (voice 47)
  (movie 64)
  (blackout 65)
  (query 66)
  (message 67)
  (notice 68)
  (subtitle 69)
  (supertitle 70)
  (notice-low 71)
  (screen 79)
  (hud-upper-right 80)
  (hud-upper-left 81)
  (hud-lower-right 82)
  (hud-lower-left 83)
  (hud-lower-left-1 84)
  (hud-lower-left-2 85)
  (hud-center-right 86)
  (hud-center-left 87)
  (hud-middle-right 88)
  (hud-middle-left 89)
  (hud-upper-center 90)
  (hud-upper-center-2 91)
  (hud 95)
  (max 96)
  )

(deftype gui-connection (connection)
  ((priority float :offset 16 :score 1)
   (action gui-action :offset 20)
   (channel gui-channel :offset 21)
   (anim-part uint8 :offset 22)
   (flags uint8 :offset 23)
   (name string :offset 24)
   (id sound-id :offset 28)
   (handle handle :offset 0)
   (time-stamp time-frame :offset 8)
   (hold-time time-frame :offset-assert 32)
   (fo-min int16)
   (fo-max int16)
   (fo-curve int8)
   (fade uint8)
   (pad uint8 2)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  ;; Failed to read fields.
  (:methods
    )
  )



(deftype gui-control (basic)
  ((engine engine)
   (update-time  time-frame  :offset-assert 8)
   (connections gui-connection 32 :inline :offset-assert 16)
   (spool-connections gui-connection 4 :inline :offset-assert 1552)
   (ids sound-id 96 :offset-assert 1744)
   (times time-frame 96 :offset-assert 2128)
   (cmd pair 96 :offset-assert 2896)
   )
  :method-count-assert 25
  :size-assert         #xcd0
  :flag-assert         #x1900000cd0
  ;; Failed to read fields.
  (:methods
    (new (symbol type int) _type_ 0)
    (gui-control-method-9 (_type_ process gui-channel gui-action string float time-frame) sound-id 9)
    (gui-control-method-10 (_type_ process gui-channel) none 10)
    (gui-control-method-11 (_type_ gui-connection) int 11)
    (gui-control-method-12 (_type_ process gui-channel gui-action string int float sound-id) sound-id 12)
    (update (_type_ symbol) int 13)
    (gui-control-method-14 (_type_ string gui-channel gui-action) int 14)
    (gui-control-method-15 (_type_ process gui-channel string sound-id) gui-connection 15)
    (gui-control-method-16 (_type_ gui-action sound-id gui-channel gui-action string (function gui-connection symbol) process) int 16)
    (gui-control-method-17 (_type_ sound-id) gui-action 17)
    (gui-control-method-18 (_type_ gui-channel) symbol 18)
    (gui-control-method-19 (_type_ gui-channel gui-connection) symbol 19)
    (gui-control-method-20 (_type_ sound-id symbol int int int) gui-connection 20)
    (gui-control-method-21 (_type_ gui-connection vector) int 21)
    (gui-control-method-22 (_type_ gui-connection process symbol) none 22)
    (gui-control-method-23 (_type_ gui-channel gui-channel symbol gui-connection) symbol 23)
    (channel-id-set! (_type_ gui-connection sound-id) int 24)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ambient-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype talker-speech-class (structure)
  ((name          string   :offset-assert 0)
   (channel       uint8   :offset-assert 4)
   (flags         uint8   :offset-assert 5)
   (speech        uint16  :offset-assert 6)
   (text-message  uint32  :offset-assert 8)
   (text-duration uint16  :offset-assert 12)
   (delay         uint16  :offset-assert 14)
   (pos           uint16  :offset-assert 16)
   (neg           uint16  :offset-assert 18)
   (on-close      basic   :offset-assert 20)
   )
  :pack-me
  :method-count-assert 14
  :size-assert         #x18
  :flag-assert         #xe00000018
  ;; field on-close uses ~A with a signed load
  (:methods
    (talker-speech-class-method-9 () none 9)
    (talker-speech-class-method-10 () none 10)
    (talker-speech-class-method-11 () none 11)
    (talker-speech-class-method-12 () none 12)
    (talker-speech-class-method-13 () none 13)
    )
  )

(deftype talker (process)
  ((trans          vector              :inline :offset-assert 128)
   (message        talker-speech-class         :offset-assert 144)
   (total-time     time-frame                      :offset-assert 152)
   (total-off-time time-frame                      :offset-assert 160)
   (start-time     time-frame                      :offset-assert 168)
   (state-time     time-frame                      :offset-assert 176)
   (voicebox       uint64                      :offset-assert 184)
   (voice-id       uint32                      :offset-assert 192)
   (message-id     uint32                      :offset-assert 196)
   (region         region                      :offset-assert 200)
   (interp         float                       :offset-assert 204)
   (save?          basic                       :offset-assert 208)
   )
  :method-count-assert 18
  :size-assert         #xd4
  :flag-assert         #x12006000d4
  (:methods
    (talker-method-14 () none 14)
    (talker-method-15 () none 15)
    (talker-method-16 () none 16)
    (talker-method-17 () none 17)
    )
  )

(define-extern *talker-speech* talker-speech-class)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; speech-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum speech-type-flag
  :type uint8
  :bitfield #t
  (random-order 0)
  )

(deftype speech-type-info (structure)
  ((channel uint8)
   (flags speech-type-flag)
   (priority int8)
   (request-timeout uint16)
   (min-delay uint16)
   (max-delay uint16)
   (delay uint16)
   (play-index int16)
   (list basic)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  ;; Failed to read fields.
  )

(deftype speech-request (structure)
  ((handle      uint64  :offset-assert 0)
   (time        time-frame  :offset-assert 8)
   (priority    float   :offset-assert 16)
   (speech-type int8    :offset-assert 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x15
  :flag-assert         #x900000015
  )

(defenum speech-channel-flag
  :type uint8
  :bitfield #t
  (disable 0)
  )

(deftype speech-channel (structure)
  ((flags speech-channel-flag)
   (gui-channel gui-channel)
   (delay uint16)
   (id uint32)
   (update-time time-frame :offset-assert 8)
   (start-time time-frame)
   (end-time time-frame)
   (request speech-request :inline)
   (last-request speech-request :inline)
   (target-pos vector :inline)
   (speech-table uint32)
   )
  :method-count-assert 14
  :size-assert         #x64
  :flag-assert         #xe00000064
  ;; Failed to read fields.
  (:methods
    (speech-channel-method-9 () none 9)
    (speech-channel-method-10 () none 10)
    (speech-channel-method-11 () none 11)
    (speech-channel-method-12 () none 12)
    (speech-channel-method-13 () none 13)
    )
  )


(deftype speech-control (structure)
  ((channel-array speech-channel 2  :inline :offset-assert 0)
   (speech-table  uint32 57 :offset-assert 224) ;; guess
   )
  :method-count-assert 17
  :size-assert         #x1c4
  :flag-assert         #x11000001c4
  (:methods
    (speech-control-method-9 () none 9)
    (speech-control-method-10 () none 10)
    (speech-control-method-11 () none 11)
    (speech-control-method-12 () none 12)
    (speech-control-method-13 () none 13)
    (speech-control-method-14 () none 14)
    (speech-control-method-15 () none 15)
    (speech-control-method-16 () none 16)
    )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype wind-vector (structure)
  ((wind-pos  vector4w :inline :offset-assert 0) ;; vector2w :inline
   (wind-vel  vector4w :inline :offset-assert 16) ;; vector2w :inline
   (stiffness float            :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype wind-work (basic)
  ((wind-array    vector  64 :inline :offset-assert 16) ;; guessed by decompiler
   (wind-normal   vector  :inline :offset-assert 1040)
   (wind-temp     vector  :inline :offset-assert 1056)
   (wind-force    float   64 :offset-assert 1072) ;; guessed by decompiler
   (wind-const    vector  :inline :offset-assert 1328)
   (wind-time     uint32          :offset-assert 1344)
   (wait-to-vu0   uint32          :offset-assert 1348)
   (wait-to-spr   uint32          :offset-assert 1352)
   (wait-from-spr uint32          :offset-assert 1356)
   (spr-index     uint32          :offset-assert 1360)
   (count         uint32          :offset-assert 1364)
   (next-count    uint32          :offset-assert 1368)
   (last-count    uint32          :offset-assert 1372)
   (to-spr        uint32          :offset-assert 1376)
   (from-spr      uint32          :offset-assert 1380)
   (next-mem      uint32          :offset-assert 1384)
   (last-mem      uint32          :offset-assert 1388)
   (next-spr      uint32          :offset-assert 1392)
   (last-spr      uint32          :offset-assert 1396)
   (to-ptrs       uint32  3       :offset-assert 1400)
   )
  :method-count-assert 9
  :size-assert         #x584
  :flag-assert         #x900000584
  )

(deftype wind-dma (structure)
  ((buffer0 wind-vector 128 :inline :offset-assert 0)
   (buffer1 wind-vector 128 :inline :offset-assert 4096)
   (buffer2 wind-vector 128 :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

(define-extern *wind-scales* (array uint8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prototype-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype prototype-bucket (basic)
  ((name                string           :offset-assert 4) ;; guessed by decompiler
   (flags               uint16           :offset-assert 8) ;; uint32
   (texture-masks-index uint16           :offset-assert 10)
   (in-level            uint16           :offset-assert 12)
   (utextures           uint16           :offset-assert 14)
   (geometry            drawable 4       :offset-assert 16) ;; guessed by decompiler
   (dists               vector   :inline :offset-assert 32)
   (rdists              vector   :inline :offset-assert 48)
   (near-plane          meters           :offset 32)
   (near-stiff          meters           :offset 36)
   (mid-plane           meters           :offset 40)
   (far-plane           meters           :offset 44)
   (rlength-near        float            :offset 48)
   (rlength-stiff       float            :offset 52)
   (rlength-mid         float            :offset 56)
   (stiffness           float            :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype prototype-bucket-shrub (prototype-bucket)
  ((next        uint32     4 :offset-assert 64) ;; guessed by decompiler
   (count       uint16     4 :offset-assert 80) ;; guessed by decompiler
   (mod-count   uint16     4 :offset-assert 88) ;; guessed by decompiler
   (last        dma-packet 4 :offset-assert 96) ;; guessed by decompiler
   (next-clear  uint128      :offset 64)
   (count-clear uint64       :offset 80)
   (last-clear  uint128      :offset 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype prototype-inline-array-shrub (drawable)
  ((length int16                    :offset 6)
   (data   prototype-bucket-shrub 1 :inline :offset 32) ;; guessed by decompiler
   (_pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x94
  :flag-assert         #x1100000094
  (:methods
    )
  )

(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub  :offset-assert 4) ;; guessed by decompiler
   (wind-vectors                 uint32                        :offset-assert 8)
   (wind-count                   int32                         :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(declare-type prototype-tie drawable)

(deftype prototype-bucket-tie (prototype-bucket)
  ((next                        uint32              12       :offset-assert 64) ;; guessed by decompiler
   (count                       uint16              12       :offset-assert 112) ;; guessed by decompiler
   (frag-count                  uint8               4        :offset-assert 136) ;; guessed by decompiler
   (index-start                 uint8               4        :offset-assert 140) ;; guessed by decompiler
   (base-qw                     uint16              4        :offset-assert 144) ;; guessed by decompiler
   (tie-rvanish                 float                        :offset-assert 152)
   (tie-vanish-far              float                        :offset-assert 156)
   (envmap-rfade                float                        :offset-assert 160)
   (envmap-fade-far             float                        :offset-assert 164)
   (envmap-shader               adgif-shader                 :offset-assert 168)
   (tint-color                  uint32                       :offset-assert 172)
   (collide-hash-fragment-array basic                        :offset-assert 176)
   (tie-colors                  time-of-day-palette          :offset-assert 180) ;; guessed by decompiler
   (data                        uint32              :dynamic :offset-assert 184) ;; guessed by decompiler
   (color-index-qwc             uint32              :dynamic :offset-assert 184) ;; guessed by decompiler
   (scissor-frag-count          uint8                        :offset 136)
   (near-frag-count             uint8                        :offset 137)
   (mid-frag-count              uint8                        :offset 138)
   (far-frag-count              uint8                        :offset 139)
   (scissor-index-start         uint8                        :offset 140)
   (near-index-start            uint8                        :offset 141)
   (mid-index-start             uint8                        :offset 142)
   (far-index-start             uint8                        :offset 143)
   (scissor-base-qw             uint16                       :offset 144)
   (near-base-qw                uint16                       :offset 146)
   (mid-base-qw                 uint16                       :offset 148)
   (far-base-qw                 uint16                       :offset 150)
   (tie-next                    uint32             4        :offset 64)
   (tie-scissor-next            uint32                       :offset 64)
   (tie-near-next               uint32                       :offset 68)
   (tie-mid-next                uint32                       :offset 72)
   (tie-far-next                uint32                       :offset 76)
   (trans-next                  uint32             4        :offset 64)
   (trans-scissor-next          uint32             4        :offset 64)
   (trans-near-next             uint32                       :offset 68)
   (trans-mid-next              uint32                       :offset 72)
   (trans-far-next              uint32                       :offset 76)
   (water-next                  uint32             4        :offset 64)
   (water-scissor-next          uint32             4        :offset 64)
   (water-near-next             uint32                       :offset 68)
   (water-mid-next              uint32                       :offset 72)
   (water-far-next              uint32                       :offset 76)
   (envmap-next                 uint32             4        :offset 80)
   (envmap-scissor-next         uint32             4        :offset 80)
   (envmap-near-next            uint32                       :offset 84)
   (envmap-mid-next             uint32                       :offset 88)
   (envmap-far-next             uint32                       :offset 92)
   (generic-next                uint32              3        :offset 96) ;; guessed by decompiler
   (generic-near-next           uint32                       :offset 96)
   (generic-mid-next            uint32                       :offset 100)
   (generic-far-next            uint32                       :offset 104)
   (vanish-next                 uint32                       :offset 108)
   (tie-count                   uint16             4        :offset 112)
   (tie-scissor-count           uint16                       :offset 112)
   (tie-near-count              uint16                       :offset 114)
   (tie-mid-count               uint16                       :offset 116)
   (tie-far-count               uint16                       :offset 118)
   (trans-count                 uint16             4        :offset 112)
   (trans-scissor-count         uint16                       :offset 112)
   (trans-near-count            uint16                       :offset 114)
   (trans-mid-count             uint16                       :offset 116)
   (trans-far-count             uint16                       :offset 118)
   (water-count                 uint16             4        :offset 112)
   (water-scissor-count         uint16                       :offset 112)
   (water-near-count            uint16                       :offset 114)
   (water-mid-count             uint16                       :offset 116)
   (water-far-count             uint16                       :offset 118)
   (envmap-count                uint16             4        :offset 120)
   (envmap-scissor-count        uint16                       :offset 120)
   (envmap-near-count           uint16                       :offset 122)
   (envmap-mid-count            uint16                       :offset 124)
   (envmap-far-count            uint16                       :offset 126)
   (generic-count               uint16              3        :offset 128) ;; guessed by decompiler
   (generic-near-count          uint16                       :offset 128)
   (generic-mid-count           uint16                       :offset 130)
   (generic-far-count           uint16                       :offset 132)
   (vanish-count                uint16                       :offset 134)
   (next-clear                  uint128             3        :offset 64) ;; guessed by decompiler
   (count-clear                 uint64              3        :offset 112) ;; guessed by decompiler
   ;; added
   (tie-geom                    prototype-tie       4        :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #xb8
  :flag-assert         #x9000000b8
  )

(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset 16) ;; NOTE - field added, not 100% positive on the type
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (login (_type_) none 9)
    )
  )

(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie  :offset-assert 4) ;; guessed by decompiler
   (wind-vectors        uint32               :offset-assert 8)
   (wind-count          uint16               :offset-assert 12)
   (prototype-max-qwc   uint16               :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (origin       matrix4h :inline :offset-assert 32)
   (flags        uint16           :offset 46)
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum joint-control-command
  :type int64
  (push 1)
  (blend 2)
  (eight 8)
  (push1 19)
  (stack 36)
  (float 42)
  (stack1 52)
  )

(declare-type joint-control basic)
(deftype joint-control-channel (structure)
  ((parent           joint-control     :offset-assert 0)
   (frame-group      art-joint-anim    :offset-assert 4)
   (frame-num        float             :offset-assert 8)
   (dist             meters            :offset-assert 12)
   (num-func   (function joint-control-channel float float float float))
   (param float 3)
   (frame-interp float 2)
   (inspector-amount uint8)
   (command joint-control-command)
   (group-sub-index int8 :offset-assert 56)
   (group-size int8)
   (eval-time uint32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  ;; Failed to read fields.
  )



(deftype top-anim-joint-control (basic)
  ((process             uint32         :offset-assert 4)
   (interp-select       uint64  2      :offset-assert 8)
   (base-anim           basic          :offset-assert 24)
   (base-anim-speed     float          :offset-assert 28)
   (base-anim-blend     float          :offset-assert 32)
   (interp              float          :offset-assert 36)
   (frame-group         art-joint-anim :offset-assert 40)
   (frame-group-push    basic          :offset-assert 44)
   (frame-num           float          :offset-assert 48)
   (frame-targ          basic          :offset-assert 52)
   (frame-speed         float          :offset-assert 56)
   (frame-blend         float          :offset-assert 60)
   (frame-cur-blend     float          :offset-assert 64)
   (frame-start         float          :offset-assert 68)
   (frame-post-blend    float          :offset-assert 72)
   (frame-post-end      float          :offset-assert 76)
   (frame-push-time     time-frame     :offset-assert 80)
   (frame-post-put-away basic          :offset-assert 88)
   (update-time         time-frame     :offset-assert 96)
   )
  :method-count-assert 13
  :size-assert         #x68
  :flag-assert         #xd00000068
  (:methods
    (top-anim-joint-control-method-9 () none 9)
    (top-anim-joint-control-method-10 () none 10)
    (top-anim-joint-control-method-11 () none 11)
    (top-anim-joint-control-method-12 () none 12)
    )
  )


(defenum joint-control-status
  :type uint16
  :bitfield #t

  (sync-math               0) ;; 1
  (spooling                1) ;; 2
  (spooling-not-last-block 2) ;; 4
  (blend-shape             3) ;; 8
  (math-when-off-screen    4) ;; 16
  (valid-spooled-frame     5) ;; 32
  (blend-shape-valid       6) ;; 64
  (eye-anim-valid          7) ;; 128
  (eye-anim                8) ;; 256
  )

(declare-type effect-control basic)

(deftype joint-control (basic)
  ((status joint-control-status)
   (allocated-length uint8)
   (active-channels uint8)
   (root-channel (inline-array joint-control-channel) :offset 16)
   (blend-index uint8)
   (active-frame-interp uint8)
   (float-channels uint8)
   (generate-frame-function function)
   (prebind-function function)
   (postbind-function function)
   (effect effect-control)
   (interp-select int64 2)
   (top-anim top-anim-joint-control)
   (override basic)
   (channel joint-control-channel :inline :dynamic)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  ;; Failed to read fields.
  (:methods
    (new (symbol type int) _type_ 0)
    (joint-control-method-9 () none 9) ;; (current-cycle-distance (_type_) float 9)
    (joint-control-method-10 (_type_) none 10)
    (debug-print-channels (_type_ symbol) int 11)
    )
  )

(deftype matrix-stack (structure)
  ((top  matrix    :offset-assert 0)
   (data matrix 24 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x610
  :flag-assert         #x900000610
  )

(deftype channel-upload-info (structure)
  ((fixed     joint-anim-compressed-fixed  :offset-assert 0)
   (fixed-qwc int32                        :offset-assert 4)
   (frame     joint-anim-compressed-frame  :offset-assert 8)
   (frame-qwc int32                        :offset-assert 12)
   (amount    float                        :offset-assert 16)
   (interp    float                        :offset-assert 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-work (structure)
  ((temp-mtx       matrix                      :inline :offset-assert 0)
   (joint-stack    matrix-stack                :inline :offset-assert 64)
   (fix-jmp-table  (function none)             16      :offset-assert 1616) ;; guessed by decompiler
   (frm-jmp-table  (function none)             16      :offset-assert 1680) ;; guessed by decompiler
   (pair-jmp-table (function none)             16      :offset-assert 1744) ;; guessed by decompiler
   (uploads        channel-upload-info         24 :inline     :offset-assert 1808) ;; guessed by decompiler
   (num-uploads    int32                               :offset-assert 2384)
   (mtx-acc        matrix                      2  :inline     :offset-assert 2400) ;; guessed by decompiler
   (tq-acc         transformq                  100 :inline     :offset-assert 2528) ;; guessed by decompiler
   (jacp-hdr       joint-anim-compressed-hdr   :inline :offset-assert 7328)
   (fixed-data     joint-anim-compressed-fixed :inline :offset-assert 7392)
   (frame-data     joint-anim-compressed-frame 2 :inline      :offset-assert 9600) ;; guessed by decompiler
   (flatten-array  float                       576     :offset 2400) ;; guessed by decompiler
   (flattened      vector                      24      :offset 2400) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3640
  :flag-assert         #x900003640
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bones-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype bone-buffer (structure)
  ((joint  joint-anim-compressed-hdr 16 :inline :offset-assert 0) ;; guessed by decompiler
   (bone   bone                      16 :inline :offset-assert 1024) ;; guessed by decompiler
   ;; (output UNKNOWN                   16 :offset-assert 2304)
   (_pad uint8 #x800)
   )
  :method-count-assert 9
  :size-assert         #x1100
  :flag-assert         #x900001100
  )

(deftype bone-layout (structure)
  ((data   uint16  8 :offset-assert 0) ;; guessed by decompiler
   (joint  joint   2 :offset 0) ;; guessed by decompiler
   (bone   bone    2 :offset 8) ;; guessed by decompiler
   (output uint32  2 :offset 16) ;; guessed by decompiler
   (unused uint32 2 :offset 24) ;; was "cache" in jak 1, but they removed this.
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype bone-regs (structure)
  ((dma-buf    basic                 :offset-assert 0)
   (wait-count uint32                :offset-assert 4)
   (in-count   uint32                :offset-assert 8)
   (sp-size    uint32                :offset-assert 12)
   (sp-bufnum  uint32                :offset-assert 16)
   (joint-ptr  (inline-array joint)  :offset-assert 20) ;; guessed by decompiler
   (bone-ptr   (inline-array bone)   :offset-assert 24) ;; guessed by decompiler
   (num-bones  uint32                :offset-assert 28)
   (mtxs       uint32                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype bone-work (structure)
  ((layout bone-layout :inline :offset-assert 0)
   (regs   bone-regs   :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype bone-debug (structure)
  ((time-ctr uint32     :offset-assert 0)
   (timing   uint32 360 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x5a4
  :flag-assert         #x9000005a4
  )

(deftype bone-memory (structure)
  ((work   bone-work   :inline :offset-assert 0)
   (buffer bone-buffer 2 :inline      :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2250
  :flag-assert         #x900002250
  )

(defenum bone-calc-flags
  :type uint16
  :bitfield #t
  (bncfl00 0)
  (bncfl01 1)  ;; use identity matrix in bone matrix calc instead of cam rot (effectively screen-space bones?)
  (bncfl02 2)
  (bncfl03 3)
  (bncfl04 4)
  (bncfl05 5)
  (bncfl06 6)
  (bncfl07 7)
  (bncfl08 8)
  (bncfl09 9)
  (bncfl10 10)
  (bncfl11 11)
  (bncfl12 12)
  (bncfl13 13)
  (bncfl14 14)
  (bncfl15 15)
  )


(deftype bone-calculation (structure)
  ((flags               bone-calc-flags        :offset-assert 0) ;; bone-calc-flags
   (num-bones           uint16                 :offset-assert 2)
   (matrix-area         (inline-array matrix)  :offset-assert 4) ;; guessed by decompiler
   (joints              (inline-array joint)   :offset-assert 8) ;; guessed by decompiler
   (bones               (inline-array bone)    :offset-assert 12) ;; guessed by decompiler
   (ripple-scale        float                  :offset-assert 16)
   (ripple-y-scale      float                  :offset-assert 20)
   (ripple-normal-scale float                  :offset-assert 24)
   (ripple-area         (inline-array vector)  :offset-assert 28) ;; guessed by decompiler
   (next                bone-calculation       :offset-assert 32)
   (dummy-1             uint32                 :offset-assert 36)
   (dummy-2             uint32                 :offset-assert 40)
   (dummy-3             uint32                 :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; foreground-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mercneric-chain (structure)
  ((first      uint32                       :offset-assert 0)
   (next       uint32                       :offset-assert 4)
   (state      generic-bucket-state :inline :offset-assert 8)
   (vu1-bucket int32                        :offset-assert 16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype merc-chain (structure)
  ((first      dma-packet  :offset-assert 0)
   (patch      dma-packet  :offset-assert 4)
   (vu1-bucket int32       :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype foreground-bucket (structure)
  ((merc      merc-chain      :inline :offset-assert 0)
   (emerc     merc-chain      :inline :offset-assert 12)
   (mercneric mercneric-chain :inline :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype foreground-level-buckets (structure)
  ((data foreground-bucket 7 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )


(deftype foreground-bucket-grid (structure)
  ((level-buckets foreground-level-buckets 7 :inline  :offset-assert 0)
   (warp-chain    mercneric-chain :inline :offset-assert 2352)
   )
  :method-count-assert 9
  :size-assert         #x944
  :flag-assert         #x900000944
  )

(deftype foreground-regs (structure)
  ((dist                  float                     :offset-assert 0)
   (merc-used             uint32                    :offset-assert 4)
   (emerc-used            uint32                    :offset-assert 8)
   (mercneric-used        uint32                    :offset-assert 12)
   (use-isometric         uint32                    :offset-assert 16)
   (base-start            dma-packet                :offset-assert 20)
   (joint-ptr             uint32                    :offset-assert 24)
   (bone-ptr              uint32                    :offset-assert 28)
   (num-bones             uint32                    :offset-assert 32)
   (mtxs                  uint32                    :offset-assert 36)
   (dma-buf               basic                     :offset-assert 40)
   (default-texture-index uint32                    :offset-assert 44)
   (mercneric-chain       mercneric-chain           :offset-assert 48)
   (level-buckets         foreground-level-buckets  :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype foreground-work (structure)
  ((regs           foreground-regs        :inline :offset-assert 0)
   (draw-index-map uint16                7       :offset 64) ;; ????
   (grid           foreground-bucket-grid :inline :offset-assert 80)
   (bounds         sphere                 :inline :offset-assert 2464)
   (lights         vu-lights              :inline :offset-assert 2480)
   (distance       vector                 :inline :offset-assert 2592)
   (next-tmpl      dma-packet             :inline :offset-assert 2608)
   )
  :method-count-assert 9
  :size-assert         #xa40
  :flag-assert         #x900000a40
  )

(deftype texscroll-globals (structure)
  ((requests int32          :offset-assert 0)
   (effects  merc-effect 32 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype merc-effect-bucket-info (structure)
  ((color-fade     rgba   :offset-assert 0) ;; guessed by decompiler
   (merc-path      uint8  :offset-assert 4)
   (ignore-alpha   uint8  :offset-assert 5)
   (disable-draw   uint8  :offset-assert 6)
   (disable-envmap uint8  :offset-assert 7)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-bucket-info (structure)
  ((light                       vu-lights               :inline :offset-assert 0)
   (needs-clip                  int32                           :offset-assert 112)
   (need-mercprime-if-merc      int32                           :offset-assert 116)
   (must-use-mercneric-for-clip int32                           :offset-assert 120)
   (effect                      merc-effect-bucket-info 64 :inline      :offset-assert 124) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x27c
  :flag-assert         #x90000027c
  )

(deftype foreground-globals (structure)
  ((foreground-grid  foreground-bucket-grid :inline :offset-assert 0)
   (merc-bucket-info merc-bucket-info       :inline :offset-assert 2384)
   (texscroll        texscroll-globals      :inline :offset-assert 3024)
   )
  :method-count-assert 9
  :size-assert         #xc54
  :flag-assert         #x900000c54
  )

(deftype shadow-dma-packet (structure)
  ((tag      generic-merc-tag :inline :offset-assert 0)
   (settings shadow-settings  :inline :offset-assert 16)
   (geo-ref  dma-packet       :inline :offset-assert 96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(define-extern invalidate-cache-line (function pointer int))
(define-extern *foreground* foreground-globals)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; engines                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *background-draw-engine* engine)
(define-extern *matrix-engine* (array handle))
(define-extern *part-engine* engine)
(define-extern *camera-engine* engine) ;; engine
(define-extern *debug-engine* engine) ;; engine
(define-extern *pad-engine* engine)
(define-extern *lightning-engine* engine)
(define-extern *hud-engine* engine)
(define-extern *task-manager-engine* engine)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum lightning-spec-flags
  :type uint16
  :bitfield #t
  (lsf0 0)
  (lsf1 1)
  (lsf2 2)
  (lsf3 3)
  (size-from-adjust-dist 4)
  )

(deftype lightning-spec (basic)
  ((name              string  :offset-assert 4)
   (flags             lightning-spec-flags  :offset-assert 8)
   (rand-func         uint8   :offset-assert 10)
   (adjust-distance   uint8   :offset-assert 11)
   (start-color       uint32  :offset-assert 12)
   (end-color         uint32  :offset-assert 16)
   (fade-to-color     uint32  :offset-assert 20)
   (fade-start-factor float   :offset-assert 24)
   (fade-time         float   :offset-assert 28)
   (texture           uint32  :offset-assert 32)
   (reduction         float   :offset-assert 36)
   (num-points        int32   :offset-assert 40)
   (box-size          float   :offset-assert 44)
   (merge-factor      float   :offset-assert 48)
   (merge-count       int32   :offset-assert 52)
   (radius            float   :offset-assert 56)
   (duration          float   :offset-assert 60)
   (duration-rand     float   :offset-assert 64)
   (sound             basic   :offset-assert 68)
   (delay             float   :offset-assert 72)
   (delay-rand        float   :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(defenum lightning-mode
  :type uint8
  (lm0 0)
  (lm1 1)
  (lm2 2)
  (lm3 3)
  )

(deftype lightning-state (structure)
  ((mode           lightning-mode      :offset-assert 0)
   (counter        float               :offset-assert 4)
   (points-to-draw int32               :offset-assert 8)
   (box-size       float               :offset-assert 12)
   (gcf-control    gcf-control :inline :offset-assert 16)
   (line           vector-array        :offset-assert 128)
   (meet           vector-array        :offset-assert 132)
   (path           vector-array        :offset-assert 136)
   (start-color    uint32              :offset-assert 140)
   (end-color      uint32              :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

(deftype lightning-control (basic)
  ((spec    lightning-spec          :offset-assert 4)
   (process process                 :offset-assert 8)
   (state   lightning-state :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #xa4
  :flag-assert         #xe000000a4
  (:methods
    (new (symbol type lightning-spec process float) _type_)
    (change-mode (_type_ lightning-mode) lightning-mode 9)
    (get-mode (_type_) lightning-mode 10)
    (set-point (_type_ int vector) none 11)
    (set-first-meet-point (_type_ vector) none 12)
    (set-last-meet-point (_type_ vector) none 13)
    )
  )

(deftype lightning-probe-vars (basic)
  ((src-joint-index uint32          :offset-assert 4)
   (next-spawn-time time-frame          :offset-assert 8)
   (last-valid-time time-frame          :offset-assert 16)
   (point           vector 2 :inline       :offset-assert 32)
   (start-pos       vector  :inline :offset 32)
   (end-pos         vector  :inline :offset 48)
   (probe-dirs      (inline-array vector)          :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern lookup-lightning-spec-by-name (function string lightning-spec))
(define-extern *lightning-probe-vars* lightning-probe-vars)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; res-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO confirm, this is just copied from jak1
(deftype res-tag (uint128)
  ((name        symbol  :offset 0)
   (key-frame   float   :offset 32)
   (elt-type    type    :offset 64)
   (data-offset uint16  :offset 96)
   (elt-count   uint32  :offset 112 :size 15)
   (inlined?    uint8   :offset 127 :size 1) ;; guess.
   )
  :flag-assert #x900000010
  )

(declare-type entity-links structure)




(define-extern *res-key-string* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; res                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype res-tag-pair (uint64)
  ((lo  int32 :offset 0)
   (hi  int32 :offset 32)
   )
  ;; made-up type
  )

(deftype res-lump (basic)
  ((length           int32              :offset-assert 4)
   (allocated-length int32              :offset-assert 8)
   (data-base        pointer            :offset-assert 12) ;; guessed by decompiler
   (data-top         pointer            :offset-assert 16) ;; guessed by decompiler
   (data-size        int32              :offset-assert 20)
   (extra            entity-links       :offset-assert 24) ;; guessed by decompiler
   (tag              (pointer res-tag)  :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field extra uses ~A with a signed load
  (:methods
    (new (symbol type int int) _type_ 0)
    (get-property-data (_type_ symbol symbol float pointer (pointer res-tag) pointer) pointer :no-virtual 9)
    (get-property-struct (_type_ symbol symbol float structure (pointer res-tag) pointer) structure :no-virtual 10)
    (get-property-value (_type_ symbol symbol float uint128 (pointer res-tag) pointer) uint128 :no-virtual 11)
    (get-property-value-float (_type_ symbol symbol float float (pointer res-tag) pointer) float :no-virtual 12)
    (get-tag-index-data (_type_ int) pointer 13)
    (get-tag-data (_type_ res-tag) pointer 14)
    (allocate-data-memory-for-tag! (_type_ res-tag) res-tag 15)
    (sort! (_type_) _type_ 16)
    (add-data! (_type_ res-tag pointer) res-lump 17)
    (add-32bit-data! (_type_ res-tag object) res-lump 18)
    (lookup-tag-idx (_type_ symbol symbol float) res-tag-pair :no-virtual 19)
    (make-property-data (_type_ float res-tag-pair pointer) pointer 20)
    (get-curve-data! (_type_ curve symbol symbol float) symbol 21)
    )
  )

(define-extern *res-static-buf* pointer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lights                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO skipped
;;  some asm stuff, maybe needs mips2c.

(define-extern *light-hash-work* light-hash-work)
(define-extern light-slerp (function light light light float light))
(define-extern light-group-slerp (function light-group light-group light-group float light-group))
(define-extern light-group-process! (function vu-lights light-group vector vector none))
(define-extern *default-lights* vu-lights)
(define-extern vu-lights-default! (function vu-lights vu-lights))
(define-extern init-light-hash (function none))
(define-extern light-hash-count-items (function light-hash none))
;; (define-extern light-hash-add-items function)
(define-extern reset-light-hash (function none))
(define-extern update-light-hash (function light-hash none))
(define-extern lookup-light-sphere-by-name (function string light-hash light-sphere))
(define-extern light-hash-get-bucket-index (function light-hash vector int))
;; (define-extern add-light-sphere-to-light-group function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dynamics-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dynamics (basic)
  ((name           symbol         :offset-assert 4)
   (gravity-max    meters         :offset-assert 8)
   (gravity-length meters         :offset-assert 12)
   (gravity        vector :inline :offset-assert 16)
   (gravity-normal vector :inline :offset-assert 32)
   (walk-distance  meters         :offset-assert 48)
   (run-distance   meters         :offset-assert 52)
   )
  :method-count-assert 10
  :size-assert         #x38
  :flag-assert         #xa00000038
  (:methods
    (set-gravity-length (_type_ float) none 9)
    )
  )

(define-extern time-to-apex (function float float int))
(define-extern time-to-ground (function float float float int))
(define-extern *standard-dynamics* dynamics)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; surface-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum surface-flag
  :bitfield #t
  :type uint32

  (look-around         0) ;; 1
  (xz-local            1) ;; 2
  (smooth-collision    2) ;; 4
  (no-turn-around      3) ;; 8
  (turn-to-pad         4) ;; 16
  (turn-to-vel         5) ;; 32
  (no-jump             6) ;; 64
  (no-attack           7) ;; 128
  (no-hands            8) ;; 256
  (no-feet             9) ;; 512
  (check-edge         10) ;; 1024
  (air                11) ;; 2048
  (attack             12) ;; 4096
  (duck               13) ;; 8192
  (momentum           14) ;; 16384
  (turn-when-centered 15) ;; 32768

  (turn-to-alt        16) ;; hi 1
  (spin               17) ;; hi 2
  (super              18) ;; hi 4
  (gun-inactive       19) ;; hi 8
  (gun-hide           20) ;; hi 16
  (gun-off            21) ;; hi 32
  (gun-fast-exit      22) ;; hi 64
  (gun-direct         23) ;; hi 128
  (gun-strafe         24) ;; hi 256
  (gun-no-twist       25) ;; hi 512
  (laser-hide         26) ;; hi 1024
  (no-board           27) ;; hi 2048
  (gun-turn-fast      28) ;; hi 4096
  )

(deftype surface (basic)
  ((name symbol)
   ;(data float 30 :score -1)
   (turnv             float      :offset-assert 8)
   (turnvv            float      :offset-assert 12)
   (tiltv             float      :offset-assert 16)
   (tiltvv            float      :offset-assert 20)

   (transv-max        float      :offset-assert 24)
   (target-speed      float      :offset-assert 28)
   (seek0             float      :offset-assert 32)
   (seek90            float      :offset-assert 36)
   (seek180           float      :offset-assert 40)
   (fric              float      :offset-assert 44)
   (nonlin-fric-dist  float      :offset-assert 48)
   (slip-factor       float      :offset-assert 52)
   (slide-factor      float      :offset-assert 56)
   (slope-up-factor   float      :offset-assert 60)
   (slope-down-factor float      :offset-assert 64)
   (slope-slip-angle  float      :offset-assert 68)
   (impact-fric       float      :offset-assert 72)
   (bend-factor       float      :offset-assert 76)
   (bend-speed        float      :offset-assert 80)
   (alignv            float      :offset-assert 84)
   (slope-up-traction float      :offset-assert 88)
   (align-speed       float      :offset-assert 92)

   (slope-change-preserve float)

   (turnvf float :offset-assert 100)
   (turnvvf float :offset-assert 104)
   (tiltvf float :offset-assert 108)
   (tiltvvf float :offset-assert 112)
   (vel-turn float :offset-assert 116)

   ;; hook
   (active-hook (function none) :offset 128)
   (touch-hook (function none))
   (impact-hook function)
   (mult-hook (function surface surface surface int none))
   (exit-hook function)

   ;; dataw
   (mode symbol :offset-assert 148)
   (flags surface-flag)

   (data              float 30 :offset 8)
   (hook              function 4  :offset 128)
   (dataw             uint32 2  :offset 148)

   )
  :method-count-assert 9
  :size-assert         #x9c
  :flag-assert         #x90000009c
  ;; Failed to read fields.
  )

(define-extern calc-terminal-vel (function float float float float))
(define-extern calc-terminal2-vel (function float float float float float))
(define-extern calc-terminal4-vel (function float float float float))
(define-extern surface-interp! (function surface surface surface float surface))
(define-extern surface-mult! (function surface surface surface surface))
(define-extern surface-clamp-speed (function surface surface surface int none))
(define-extern *walk-mods* surface)
(define-extern *walk-no-turn-mods* surface)
(define-extern *turn-around-mods* surface)
(define-extern *jump-mods* surface)
(define-extern *double-jump-mods* surface)
(define-extern *smack-jump-mods* surface)
(define-extern *high-jump-mods* surface)
(define-extern *launch-jump-mods* surface)
(define-extern *forward-high-jump-mods* surface)
(define-extern *flip-jump-mods* surface)
(define-extern *forward-jump-mods* surface)
(define-extern *forward-pole-jump-mods* surface)
(define-extern *dark-jump-mods* surface)
(define-extern *roll-mods* surface)
(define-extern *roll-flip-mods* surface)
(define-extern *flop-mods* surface)
(define-extern *flop-land-mods* surface)
(define-extern *wade-mods* surface)
(define-extern *swim-mods* surface)
(define-extern *dive-mods* surface)
(define-extern *dive-bottom-mods* surface)
(define-extern *pole-mods* surface)
(define-extern *grab-mods* surface)
(define-extern *edge-grab-mods* surface)
(define-extern *empty-mods* surface)
(define-extern *neutral-mods* surface)
(define-extern *stone-surface* surface)
(define-extern *gravel-surface* surface)
(define-extern *edge-surface* surface)
(define-extern *wade-surface* surface)
(define-extern *quicksand-surface* surface)
(define-extern *tar-surface* surface)
(define-extern *ice-surface* surface)
(define-extern *rail-surface* surface)
(define-extern *standard-ground-surface* surface)
(define-extern *swim-surface* surface)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pat-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum pat-mode
  :type uint8
  (ground 0)
  (wall 1)
  (obstacle 2)
  (halfpipe 3)
  )

(defenum pat-material
  :type uint8
  (unknown     0)
  (ice         1)
  (quicksand   2)
  (waterbottom 3)
  (tar         4)
  (sand        5)
  (wood        6)
  (grass       7)
  (pcmetal     8)
  (snow        9)
  (deepsnow   10)
  (hotcoals   11)
  (lava       12)
  (crwood     13)
  (gravel     14)
  (dirt       15)
  (metal      16)
  (straw      17)
  (tube       18)
  (swamp      19)
  (stopproj   20)
  (rotate     21)
  (neutral    22)
  (stone      23)
  (crmetal    24)
  (carpet     25)
  (grmetal    26)
  (shmetal    27)
  (hdwood     28)
  )

(defenum pat-event
  :type uint8
  (none        0)
  (deadly      1)
  (endlessfall 2)
  (burn        3)
  (deadlup     4)
  (burnup      5)
  (melt        6)
  (slide       7)
  (lip         8)
  (lipramp     9)
  (shock      10)
  (shockup    11)
  (hide       12)
  (rail       13)
  (slippery   14)
  )

(deftype pat-surface (uint32)
  ((skip      uint8        :offset  0 :size 7 :do-not-decompile)
   (mode      pat-mode     :offset  7 :size 3)
   (material  pat-material :offset 10 :size 6)
   (camera    uint8        :offset 16 :size 1 :do-not-decompile) ;; sz = 2??
   (event     pat-event    :offset 18 :size 6)
   (skip2     uint8        :offset 24 :size 5 :do-not-decompile)

   (noentity  uint8        :offset  0 :size 1)
   (nocamera  uint8        :offset  1 :size 1)
   (noedge    uint8        :offset  2 :size 1)
   (nogrind   uint8        :offset  3 :size 1)
   (nojak     uint8        :offset  4 :size 1)
   (noboard   uint8        :offset  5 :size 1)
   (nopilot   uint8        :offset  6 :size 1)

   (probe     uint8        :offset 24 :size 1)
   (nomech    uint8        :offset 25 :size 1)
   (noproj    uint8        :offset 26 :size 1)
   (noendlessfall uint8    :offset 27 :size 1)
   (noprobe   uint8        :offset 28 :size 1)

   (nolineofsight uint8    :offset 16 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  ;; Failed to read some fields.
  )

(deftype pat-mode-info (structure)
  ((name         string  :offset-assert 0) ;; guessed by decompiler
   (wall-angle   float   :offset-assert 4)
   (color        rgba    :offset-assert 8) ;; guessed by decompiler
   (hilite-color rgba    :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(define-extern pat-material->string (function pat-surface string))
(define-extern pat-mode->string (function pat-surface string))
(define-extern pat-event->string (function pat-surface string))
(define-extern *pat-mode-info* (inline-array pat-mode-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fact-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum pickup-type
  :bitfield #f
  :type int32
  (none            0)
  (eco-yellow      1)
  (eco-red         2)
  (eco-blue        3)
  (eco-dark        4)
  (eco-green       5)
  (eco-pill-green  6)
  (eco-pill-dark   7)
  (eco-pill-random 8)
  (money           9)
  (fuel-cell      10)
  (buzzer         11)
  (darkjak        12)
  (ammo-yellow    13)
  (ammo-red       14)
  (ammo-blue      15)
  (ammo-dark      16)
  (shield         17)
  (health         18)
  (trick-point    19)
  (trick-judge    20)
  (gem            21)
  (skill          22)
  (karma          23)
  (gun-red        24)
  (gun-yellow     25)
  (gun-blue       26)
  (gun-dark       27)
  (board          28)
  (pass-red       29)
  (pass-green     30)
  (pass-yellow    31)
  (pass-blue      32)
  (ammo-random    33)
  )

(deftype fact-bank (basic)
  ((eco-level-max              float    :offset-assert 4)
   (eco-single-inc             float    :offset-assert 8)
   (eco-full-inc               float    :offset-assert 12)
   (eco-single-timeout         seconds  :offset-assert 16)
   (eco-full-timeout           seconds  :offset-assert 24)
   (dummy                      seconds  :offset-assert 32)
   (health-max-default         float    :offset-assert 40)
   (health-single-inc          float    :offset-assert 44)
   (health-default-inc         float    :offset-assert 48)
   (health-darkjak-inc         float    :offset-assert 52)
   (health-darkjak-min         float    :offset-assert 56)
   (health-darkjak-error       float    :offset-assert 60)
   (eco-pill-green-max-default float    :offset-assert 64)
   (eco-pill-dark-max-default  float    :offset-assert 68)
   (health-small-inc           float    :offset-assert 72)
   (buzzer-max-default         float    :offset-assert 76)
   (buzzer-single-inc          float    :offset-assert 80)
   (suck-bounce-dist           meters   :offset-assert 84)
   (suck-suck-dist             meters   :offset-assert 88)
   (default-eco-pill-green-inc float    :offset-assert 92)
   (default-eco-pill-dark-inc  float    :offset-assert 96)
   (ammo-yellow-max            float    :offset-assert 100)
   (ammo-red-max               float    :offset-assert 104)
   (ammo-blue-max              float    :offset-assert 108)
   (ammo-dark-max              float    :offset-assert 112)
   (ammo-yellow-start          float    :offset-assert 116)
   (ammo-red-start             float    :offset-assert 120)
   (ammo-blue-start            float    :offset-assert 124)
   (ammo-dark-start            float    :offset-assert 128)
   (shield-max                 float    :offset-assert 132)
   (shield-use-speed           float    :offset-assert 136)
   (shield-time-min            seconds  :offset-assert 144)
   (trick-point-max            float    :offset-assert 152)
   (super-skill-inc            float    :offset-assert 156)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(defenum actor-option
  :bitfield #t
  :type uint64

  (blocked           0) ;; 1
  (spawns-fuel-cell  1) ;; 2
  (draw-blocker      2) ;; 4
  (loop              3) ;; 8
  (reflect           4) ;; 16
  (wait-for-cue      5) ;; 32
  (auto-pickup       6) ;; 64
  (fuel-cell-no-jump 7) ;; 128
  (suck-in           8) ;; 256
  (fade-out          9) ;; 512
  (big-collision    10) ;; 1024
  (racer-only       11) ;; 2048
  (no-reaction      12) ;; 4096
  (no-shadow        13) ;; 8192
  (wait-for-task-complete 14) ;; 16384
  (respawn-delay    15) ;; 32768

  (no-amb-sound     16) ;; hi 1
  (user17           17) ;; hi 2
  (user18           18) ;; hi 4
  (user19           19) ;; hi 8
  (user20           20) ;; hi 16
  (cond-hide        21) ;; hi 32
  (cond-respawn     22) ;; hi 64
  (fall             23) ;; hi 128
  (mirror           24) ;; hi 256
  (cond-low-ammo             25) ;; hi 512
  (no-distance-check-fadeout 26) ;; 1024
  (no-track                  27) ;; hi 2048
  )

(deftype fact-info (basic)
  ((process process :offset-assert 4)
   (pickup-type pickup-type :offset-assert 8)
   (pickup-amount float :offset-assert 12)
   (pickup-spawn-amount float :offset-assert 16)
   (options actor-option :offset-assert 24)
   (fade-time time-frame :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  ;; Failed to read fields.
  (:methods
    (new (symbol type process pickup-type float) _type_ 0)
    (fact-info-method-9 () none 9) ;; (drop-pickup (_type_ symbol process-tree fact-info int) (pointer process) 9)
    (reset! (_type_ symbol) none 10)
    (pickup-collectable! (_type_ pickup-type float handle) float 11)
    )
  )

(declare-type target process-focusable)

(deftype fact-info-target (fact-info)
  ((eco-type int32)
   (eco-level float)
   (eco-pickup-time time-frame)
   (eco-timeout time-frame)
   (eco-source uint64)
   (eco-source-time time-frame)
   (health float)
   (health-max float)
   (health-pickup-time time-frame)
   (buzzer float)
   (buzzer-max float)
   (eco-pill-green float)
   (eco-pill-green-max float)
   (eco-pill-green-pickup-time time-frame)
   (eco-pill-dark-pickup-time time-frame)
   (money-pickup-time time-frame)
   (buzzer-pickup-time time-frame)
   (task-pickup-time time-frame)
   (stop-time-timeout time-frame)
   (darkjak-start-time time-frame)
   (darkjak-effect-time time-frame)
   (ammo-pickup-time time-frame)
   (shield-pickup-time time-frame)
   (shield-start-time time-frame)
   (shield-use-time time-frame)
   (shield-level float)
   (shield-attack-id uint32)
   (trick-point float)
   (trick-point-pickup-time time-frame)
   (trick-point-start-time time-frame)
   (trick-point-duration time-frame)
   (gem-pickup-time time-frame)
   (skill-pickup-time time-frame)
   (karma-pickup-time time-frame)
   )
  :method-count-assert 13
  :size-assert         #x110
  :flag-assert         #xd00000110
  ;; Failed to read fields.
  (:methods
    (new (symbol type process-drawable pickup-type float) _type_ 0)
    (get-gun-ammo (_type_ target) float 12)
    )
  )

(defenum enemy-option
  :bitfield #t
  :type uint32
  (user0              0) ;; 1
  (user1              1) ;; 2
  (user2              2) ;; 4
  (user3              3) ;; 8
  (user4              4) ;; 16
  (user5              5) ;; 32
  (user6              6) ;; 64
  (user7              7) ;; 128
  (user8              8) ;; 256
  (user9              9) ;; 512
  (user10            10) ;; 1024
  (user11            11) ;; 2048
  (user12            12) ;; 4096
  (user13            13) ;; 8192
  (user14            14) ;; 16k
  (user15            15)

  (dormant           16) ;; hi 1
  (dormant-aware     17) ;; hi 2
  (ambush            18) ;; hi 4
  (spawner           19) ;; hi 8
  (prespawned        20) ;; hi 16
  (multi-focus       21) ;; hi 32
  (has-trigger       22)
  (idle-til-trigger  23) ;; hi 128
  (knocked-into-water 24) ;; hi 256
  (water             25) ;; hi 512
  )

(deftype fact-info-enemy (fact-info)
  ((speed float)
   (idle-distance meters)
   (notice-top meters)
   (notice-bottom meters)
   (cam-horz meters)
   (cam-vert meters)
   (cam-notice-dist meters)
   (enemy-options enemy-option)
   (trig-dist meters)
   (trig-actor-group uint32)
   (trig-mask-count int8)
   (trig-mask uint8 2)
   )
  :method-count-assert 13
  :size-assert         #x53
  :flag-assert         #xd00000053
  ;; Failed to read fields.
  (:methods
    (new (symbol type process (pointer float) pickup-type float) _type_ 0)
    (clear-mask-bits (_type_ int) none 12)
    )
  )

(deftype fact-info-crate (fact-info)
  ((suck-count int32))
  :method-count-assert 12
  :size-assert         #x2c
  :flag-assert         #xc0000002c
  ;; Failed to read fields.
  (:methods
    (new (symbol type process pickup-type float) _type_ 0)
    )
  )

(deftype fact-info-enemy-defaults (basic)
  ((idle-distance meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern *FACT-bank* fact-bank)
(define-extern pickup-type->string (function pickup-type string))
(define-extern *fact-info-enemy-defaults* fact-info-enemy-defaults)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; aligner-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type process-drawable process)

(defenum align-flags
  :bitfield #t
  :type uint32
  (disabled) ;; keep object velocity
  )

(defenum align-opts
  :bitfield #t
  :type uint32
  (adjust-x-vel)
  (adjust-y-vel)
  (adjust-xz-vel)
  (keep-other-velocities)
  (adjust-quat) ;; 16
  (alop0)
  (alop1)
  (alop2)
  (alop3)
  (alop4)
  (alop5)
  (no-gravity)
  (ignore-y-if-zero)
  )

(deftype align-control (basic)
  ((flags       align-flags              :offset-assert 4) ;; guessed by decompiler
   (process     process-drawable         :offset-assert 8) ;; guessed by decompiler
   (frame-group art-joint-anim           :offset-assert 12) ;; guessed by decompiler
   (frame-num   float                    :offset-assert 16)
   (matrix      matrix           2 :inline     :offset-assert 32) ;; guessed by decompiler
   (transform   transform        2 :inline     :offset-assert 160) ;; guessed by decompiler
   (delta       transformq       :inline :offset-assert 256)
   (last-speed  meters                   :offset-assert 304)
   (align       transformq       :inline :offset 160)
   )
  :method-count-assert 14
  :size-assert         #x134
  :flag-assert         #xe00000134
  (:methods
    (new (symbol type process) _type_ 0)
    (align-control-method-9 () none 9) ;; (compute-alignment! (_type_) transformq 9)
    (align-control-method-10 () none 10) ;; (align! (_type_ align-opts float float float) trsqv 10)
    (align-control-method-11 () none 11) ;; (align-vel-and-quat-only! (_type_ align-opts vector int float float) trsqv 11)
    (align-control-method-12 () none 12) ;; (first-transform (_type_) transform 12)
    (align-control-method-13 () none 13) ;; (snd-transform (_type_) transform 13)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; penetrate-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum penetrate
  :bitfield #t
  :type uint64
  (touch             0) ;; 1
  (generic-attack    1) ;; 2
  (lunge             2) ;; 4
  (flop              3) ;; 8
  (punch             4) ;; 16
  (spin              5) ;; 32
  (roll              6) ;; 64
  (uppercut          7) ;; 128
  (bonk              8) ;; 256
  (tube              9) ;; 512
  (vehicle           10) ;; 1024
  (flut-attack       11) ;; 2048
  (board             12) ;; 4096
  (mech              13) ;; 8192
  (mech-punch        14) ;; 16384
  (mech-bonk         15) ;; 32768
  (dark-skin         16) ;; hi 1
  (dark-punch        17) ;; hi 2
  (dark-bomb         18) ;; hi 4
  (dark-giant        19) ;; hi 8
  (shield            20) ;; hi 16
  (explode           21) ;; hi 32
  (jak-yellow-shot   22) ;; hi 64
  (jak-red-shot      23) ;; hi 128
  (jak-blue-shot     24) ;; hi 256
  (jak-dark-shot     25) ;; hi 512
  (enemy-yellow-shot 26) ;; hi 1024
  (enemy-dark-shot   27) ;; hi 2048
  (eco-yellow        28) ;; hi 4096
  (eco-red           29) ;; hi 8192
  (eco-blue          30) ;; hi 16384
  (eco-green         31) ;; hi 32768
  (knocked           32) ;; hihi 1
  )

(define-extern penetrate-using->damage (function penetrate int))
(define-extern penetrated-by-all&hit-points->penetrated-by (function penetrate int penetrate))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type nav-control structure)
(declare-type path-control basic)
(declare-type vol-control basic)
(declare-type actor-link-info basic)
(declare-type water-control basic)

(defenum state-flags
  :bitfield #t
  :type uint32
  (sf0 0)
  (sf1 1)
  (sf2 2)
  (tinvul1 3)
  (sf4 4)
  (sf5 5)
  (sf6 6)
  (sf7 7)
  (sf8 8)
  (sf9 9)
  (sf10 10)
  (sf11 11)
  (sf12 12)
  (sf13 13)
  (sf14 14)
  (sf15 15)
  (sf16 16)
  (sf17 17)
  (sf18 18)
  (lleg-still 19)
  (rleg-still 20)
  (lleg-no-ik 21)
  (rleg-no-ik 22)
  (sf23 23)
  (disable-attacks 24)
  (tinvul2 25)
  (sf26 26)
  (sf27 27)
  (sf28 28)
  (sf29 29)
  (sf30 30)
  (sf31 31)
  )

(deftype process-drawable (process)
  ((root        trsqv                     :offset-assert 128) ;; guessed by decompiler
   (node-list   cspace-array              :offset-assert 132) ;; guessed by decompiler
   (draw        draw-control              :offset-assert 136) ;; guessed by decompiler
   (skel        joint-control             :offset-assert 140) ;; guessed by decompiler
   (nav         nav-control               :offset-assert 144) ;; guessed by decompiler
   (align       align-control             :offset-assert 148) ;; guessed by decompiler
   (path        path-control              :offset-assert 152) ;; guessed by decompiler
   (vol         vol-control               :offset-assert 156) ;; guessed by decompiler
   (fact        fact-info                 :offset-assert 160) ;; guessed by decompiler
   (link        actor-link-info           :offset-assert 164) ;; guessed by decompiler
   (part        sparticle-launch-control  :offset-assert 168) ;; guessed by decompiler
   (water       water-control             :offset-assert 172) ;; guessed by decompiler
   (sound       ambient-sound             :offset-assert 176) ;; guessed by decompiler
   (carry       basic                     :offset-assert 180)
   (rbody       basic                     :offset-assert 184)
   (state-flags state-flags               :offset-assert 188) ;; guessed by decompiler
   (state-time  time-frame                    :offset-assert 192) ;; time-frame
   )
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14005000c8
  (:methods
    (initialize-skeleton (_type_ skeleton-group pair) none 14)
    (initialize-skeleton-by-name (_type_ string object) draw-control 15)
    (process-drawable-method-16 () none 16) ;; (apply-alignment (_type_ align-opts transformq vector) collide-shape 16)
    (process-drawable-method-17 () none 17) ;; (do-joint-math! (_type_) none 17)
    (process-drawable-method-18 () none 18) ;; (cleanup-for-death (_type_) none 18)
    (process-drawable-method-19 () none 19) ;; (evaluate-joint-control (_type_) none 19)
    )
  )

(deftype process-drawable-reserved (process-drawable)
  ()
  :method-count-assert 178
  :size-assert         #xc8
  :flag-assert         #xb2005000c8
  (:methods
    (process-drawable-reserved-method-20 () none 20) ;; (dummy-20 () none 20)
    (process-drawable-reserved-method-21 () none 21) ;; (dummy-21 () none 21)
    (process-drawable-reserved-method-22 () none 22) ;; (dummy-22 () none 22)
    (process-drawable-reserved-method-23 () none 23) ;; (dummy-23 () none 23)
    (process-drawable-reserved-method-24 () none 24) ;; (dummy-24 () none 24)
    (process-drawable-reserved-method-25 () none 25) ;; (dummy-25 () none 25)
    (process-drawable-reserved-method-26 () none 26) ;; (dummy-26 () none 26)
    (process-drawable-reserved-method-27 () none 27) ;; (dummy-27 () none 27)
    (process-drawable-reserved-method-28 () none 28) ;; (dummy-28 () none 28)
    (process-drawable-reserved-method-29 () none 29) ;; (dummy-29 () none 29)
    (process-drawable-reserved-method-30 () none 30) ;; (dummy-30 () none 30)
    (process-drawable-reserved-method-31 () none 31) ;; (dummy-31 () none 31)
    (process-drawable-reserved-method-32 () none 32) ;; (dummy-32 () none 32)
    (process-drawable-reserved-method-33 () none 33) ;; (dummy-33 () none 33)
    (process-drawable-reserved-method-34 () none 34) ;; (dummy-34 () none 34)
    (process-drawable-reserved-method-35 () none 35) ;; (dummy-35 () none 35)
    (process-drawable-reserved-method-36 () none 36) ;; (dummy-36 () none 36)
    (process-drawable-reserved-method-37 () none 37) ;; (dummy-37 () none 37)
    (process-drawable-reserved-method-38 () none 38) ;; (dummy-38 () none 38)
    (process-drawable-reserved-method-39 () none 39) ;; (dummy-39 () none 39)
    (process-drawable-reserved-method-40 () none 40) ;; (dummy-40 () none 40)
    (process-drawable-reserved-method-41 () none 41) ;; (dummy-41 () none 41)
    (process-drawable-reserved-method-42 () none 42) ;; (dummy-42 () none 42)
    (process-drawable-reserved-method-43 () none 43) ;; (dummy-43 () none 43)
    (process-drawable-reserved-method-44 () none 44) ;; (dummy-44 () none 44)
    (process-drawable-reserved-method-45 () none 45) ;; (dummy-45 () none 45)
    (process-drawable-reserved-method-46 () none 46) ;; (dummy-46 () none 46)
    (process-drawable-reserved-method-47 () none 47) ;; (dummy-47 () none 47)
    (process-drawable-reserved-method-48 () none 48) ;; (dummy-48 () none 48)
    (process-drawable-reserved-method-49 () none 49) ;; (dummy-49 () none 49)
    (process-drawable-reserved-method-50 () none 50) ;; (dummy-50 () none 50)
    (process-drawable-reserved-method-51 () none 51) ;; (dummy-51 () none 51)
    (process-drawable-reserved-method-52 () none 52) ;; (dummy-52 () none 52)
    (process-drawable-reserved-method-53 () none 53) ;; (dummy-53 () none 53)
    (process-drawable-reserved-method-54 () none 54) ;; (dummy-54 () none 54)
    (process-drawable-reserved-method-55 () none 55) ;; (dummy-55 () none 55)
    (process-drawable-reserved-method-56 () none 56) ;; (dummy-56 () none 56)
    (process-drawable-reserved-method-57 () none 57) ;; (dummy-57 () none 57)
    (process-drawable-reserved-method-58 () none 58) ;; (dummy-58 () none 58)
    (process-drawable-reserved-method-59 () none 59) ;; (dummy-59 () none 59)
    (process-drawable-reserved-method-60 () none 60) ;; (dummy-60 () none 60)
    (process-drawable-reserved-method-61 () none 61) ;; (dummy-61 () none 61)
    (process-drawable-reserved-method-62 () none 62) ;; (dummy-62 () none 62)
    (process-drawable-reserved-method-63 () none 63)
    (process-drawable-reserved-method-64 () none 64)
    (process-drawable-reserved-method-65 () none 65)
    (process-drawable-reserved-method-66 () none 66)
    (process-drawable-reserved-method-67 () none 67)
    (process-drawable-reserved-method-68 () none 68)
    (process-drawable-reserved-method-69 () none 69)
    (process-drawable-reserved-method-70 () none 70)
    (process-drawable-reserved-method-71 () none 71)
    (process-drawable-reserved-method-72 () none 72)
    (process-drawable-reserved-method-73 () none 73)
    (process-drawable-reserved-method-74 () none 74)
    (process-drawable-reserved-method-75 () none 75)
    (process-drawable-reserved-method-76 () none 76)
    (process-drawable-reserved-method-77 () none 77)
    (process-drawable-reserved-method-78 () none 78)
    (process-drawable-reserved-method-79 () none 79)
    (process-drawable-reserved-method-80 () none 80)
    (process-drawable-reserved-method-81 () none 81)
    (process-drawable-reserved-method-82 () none 82)
    (process-drawable-reserved-method-83 () none 83)
    (process-drawable-reserved-method-84 () none 84)
    (process-drawable-reserved-method-85 () none 85)
    (process-drawable-reserved-method-86 () none 86)
    (process-drawable-reserved-method-87 () none 87)
    (process-drawable-reserved-method-88 () none 88)
    (process-drawable-reserved-method-89 () none 89)
    (process-drawable-reserved-method-90 () none 90)
    (process-drawable-reserved-method-91 () none 91)
    (process-drawable-reserved-method-92 () none 92)
    (process-drawable-reserved-method-93 () none 93)
    (process-drawable-reserved-method-94 () none 94)
    (process-drawable-reserved-method-95 () none 95)
    (process-drawable-reserved-method-96 () none 96)
    (process-drawable-reserved-method-97 () none 97)
    (process-drawable-reserved-method-98 () none 98)
    (process-drawable-reserved-method-99 () none 99)
    (process-drawable-reserved-method-100 () none 100)
    (process-drawable-reserved-method-101 () none 101)
    (process-drawable-reserved-method-102 () none 102)
    (process-drawable-reserved-method-103 () none 103)
    (process-drawable-reserved-method-104 () none 104)
    (process-drawable-reserved-method-105 () none 105)
    (process-drawable-reserved-method-106 () none 106)
    (process-drawable-reserved-method-107 () none 107)
    (process-drawable-reserved-method-108 () none 108)
    (process-drawable-reserved-method-109 () none 109)
    (process-drawable-reserved-method-110 () none 110)
    (process-drawable-reserved-method-111 () none 111)
    (process-drawable-reserved-method-112 () none 112)
    (process-drawable-reserved-method-113 () none 113)
    (process-drawable-reserved-method-114 () none 114)
    (process-drawable-reserved-method-115 () none 115)
    (process-drawable-reserved-method-116 () none 116)
    (process-drawable-reserved-method-117 () none 117)
    (process-drawable-reserved-method-118 () none 118)
    (process-drawable-reserved-method-119 () none 119)
    (process-drawable-reserved-method-120 () none 120)
    (process-drawable-reserved-method-121 () none 121)
    (process-drawable-reserved-method-122 () none 122)
    (process-drawable-reserved-method-123 () none 123)
    (process-drawable-reserved-method-124 () none 124)
    (process-drawable-reserved-method-125 () none 125)
    (process-drawable-reserved-method-126 () none 126)
    (process-drawable-reserved-method-127 () none 127)
    (process-drawable-reserved-method-128 () none 128)
    (process-drawable-reserved-method-129 () none 129)
    (process-drawable-reserved-method-130 () none 130)
    (process-drawable-reserved-method-131 () none 131)
    (process-drawable-reserved-method-132 () none 132)
    (process-drawable-reserved-method-133 () none 133)
    (process-drawable-reserved-method-134 () none 134)
    (process-drawable-reserved-method-135 () none 135)
    (process-drawable-reserved-method-136 () none 136)
    (process-drawable-reserved-method-137 () none 137)
    (process-drawable-reserved-method-138 () none 138)
    (process-drawable-reserved-method-139 () none 139)
    (process-drawable-reserved-method-140 () none 140)
    (process-drawable-reserved-method-141 () none 141)
    (process-drawable-reserved-method-142 () none 142)
    (process-drawable-reserved-method-143 () none 143)
    (process-drawable-reserved-method-144 () none 144)
    (process-drawable-reserved-method-145 () none 145)
    (process-drawable-reserved-method-146 () none 146)
    (process-drawable-reserved-method-147 () none 147)
    (process-drawable-reserved-method-148 () none 148)
    (process-drawable-reserved-method-149 () none 149)
    (process-drawable-reserved-method-150 () none 150)
    (process-drawable-reserved-method-151 () none 151)
    (process-drawable-reserved-method-152 () none 152)
    (process-drawable-reserved-method-153 () none 153)
    (process-drawable-reserved-method-154 () none 154)
    (process-drawable-reserved-method-155 () none 155)
    (process-drawable-reserved-method-156 () none 156)
    (process-drawable-reserved-method-157 () none 157)
    (process-drawable-reserved-method-158 () none 158)
    (process-drawable-reserved-method-159 () none 159)
    (process-drawable-reserved-method-160 () none 160)
    (process-drawable-reserved-method-161 () none 161)
    (process-drawable-reserved-method-162 () none 162)
    (process-drawable-reserved-method-163 () none 163)
    (process-drawable-reserved-method-164 () none 164)
    (process-drawable-reserved-method-165 () none 165)
    (process-drawable-reserved-method-166 () none 166)
    (process-drawable-reserved-method-167 () none 167)
    (process-drawable-reserved-method-168 () none 168)
    (process-drawable-reserved-method-169 () none 169)
    (process-drawable-reserved-method-170 () none 170)
    (process-drawable-reserved-method-171 () none 171)
    (process-drawable-reserved-method-172 () none 172)
    (process-drawable-reserved-method-173 () none 173)
    (process-drawable-reserved-method-174 () none 174)
    (process-drawable-reserved-method-175 () none 175)
    (process-drawable-reserved-method-176 () none 176)
    (process-drawable-reserved-method-177 () none 177)
    )
  )

(deftype attack-dir-info (structure)
  ((dir               vector :inline :offset-assert 0)
   (xz-dir            vector :inline :offset-assert 16)
   (attacker-velocity vector :inline :offset-assert 32)
   (pos               vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(defenum attack-info-mask
  :bitfield #t
  :type uint32
  (trans        0) ;; 1
  (vector       1) ;; 2
  (intersection 2) ;; 4
  (attacker     3) ;; 8
  (attack-time  4) ;; 16
  (invinc-time  5) ;; 32
  (mode         6) ;; 64
  (shove-back   7) ;; 128
  (shove-up     8) ;; 256
  (speed        9) ;; 512
  (dist        10) ;; 1024
  (control     11) ;; 2048
  (angle       12) ;; 4096
  (rotate-to   13) ;; 8192
  (prev-state  14) ;; 16384
  (id          15) ;; 32768
  (count       16) ;; hi 1
  (penetrate-using 17) ;; hi 2
  (attacker-velocity 18);; hi 4
  (damage      19) ;; hi 8
  (shield-damage 20) ;; hi16
  (knock        21) ;; hi 32
  (test         22) ;; hi 64
  )

(deftype attack-info (structure)
  ((trans vector :inline)
   (vector vector :inline)
   (attacker-velocity vector :inline)
   (intersection vector :inline)
   (attacker handle)
   (attack-time time-frame)
   (invinc-time time-frame)
   (mask attack-info-mask)
   (mode symbol)
   (shove-back meters)
   (shove-up meters)
   (speed meters)
   (dist meters)
   (control float)
   (angle symbol)
   (rotate-to degrees)
   (prev-state state)
   (id uint32)
   (count uint32)
   (penetrate-using uint64)
   (damage float)
   (shield-damage float)
   (knock uint8)
   (test uint32)
   )
  :method-count-assert 12
  :size-assert         #xa0
  :flag-assert         #xc000000a0
  ;; Failed to read fields.
  (:methods
    (attack-info-method-9 () none 9) ;; (combine! (_type_ attack-info) none 9)
    (attack-info-method-10 () none 10)
    (attack-info-method-11 () none 11)
    )
  )

(deftype ground-tween-info (structure)
  ((chan  uint8  3 :offset-assert 0) ;; guessed by decompiler
   (blend float  3 :offset-assert 4) ;; guessed by decompiler
   (group uint32 5 :offset-assert 16) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; script-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype script-form (structure)
  ((name string  :offset-assert 0)
   (spec basic  :offset-assert 4)
   (func basic  :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (script-form-method-9 () none 9)
    )
  )

(deftype script-context (structure)
  ((load-state load-state)
   (key basic)
   (process process)
   (trans vector)
   (side-effect? symbol)
   (got-error? symbol)
   (expr basic)
   (param-count int32)
   (param object 16)
   (param-type object 16)
   )
  :method-count-assert 12
  :size-assert         #xa0
  :flag-assert         #xc000000a0
  ;; Failed to read fields.
  (:methods
    (new (symbol type basic process vector) _type_ 0)
    (eval! (_type_ structure) pair 9)
    (script-context-method-10 () none 10)
    (script-context-method-11 () none 11)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype scene-actor (basic)
  ((name                basic   :offset-assert 4)
   (level               basic   :offset-assert 8)
   (art-group           basic   :offset-assert 12)
   (prefix              basic   :offset-assert 16)
   (draw-frames         basic   :offset-assert 20)
   (scissor-frames      basic   :offset-assert 24)
   (camera              int16   :offset-assert 28)
   (light-index         uint8   :offset-assert 30)
   (shadow-mask         uint8   :offset-assert 31)
   (shadow-values       uint32  :offset-assert 32)
   (flags               uint32  :offset-assert 36)
   (command-list        basic   :offset-assert 40)
   (shadow-flags        int32   :offset-assert 44)
   (shadow-volume-joint basic   :offset-assert 48)
   (draw-seg            uint64  :offset-assert 56)
   (no-draw-seg         uint64  :offset-assert 64)
   (process             uint64  :offset-assert 72)
   )
  :method-count-assert 10
  :size-assert         #x50
  :flag-assert         #xa00000050
  (:methods
    (scene-actor-method-9 () none 9)
    )
  )

(deftype scene (art-group)
  ((mask-to-clear    uint32           :offset-assert 32)
   (entity           basic            :offset-assert 36)
   (art-group        basic            :offset-assert 40)
   (anim             basic            :offset-assert 44)
   (parts            int32            :offset-assert 48)
   (command-list     basic            :offset-assert 52)
   (cut-list         basic            :offset-assert 56)
   (wait-max-time    time-frame           :offset-assert 64)
   (wait-air-time    time-frame           :offset-assert 72)
   (wait-ground-time time-frame           :offset-assert 80)
   (draw-target      basic            :offset-assert 88)
   (abort            basic            :offset-assert 92)
   (actor            basic            :offset-assert 96)
   (load-point       basic            :offset-assert 100)
   (end-point        basic            :offset-assert 104)
   (borrow           basic            :offset-assert 108)
   (sfx-volume       float            :offset-assert 112)
   (ambient-volume   float            :offset-assert 116)
   (music-volume     float            :offset-assert 120)
   (blackout-end     basic            :offset-assert 124)
   (peaceful         basic            :offset-assert 128)
   (music-delay      float            :offset-assert 132)
   (save             basic            :offset-assert 136)
   (scene-task       uint16           :offset-assert 140)
   )
  :method-count-assert 17
  :size-assert         #x8e
  :flag-assert         #x110000008e
  (:methods
    (scene-method-15 () none 15)
    (scene-method-16 () none 16)
    )
  )

(deftype scene-player (process-drawable)
  ((scene-list           basic              :offset-assert 200)
   (scene                basic              :offset-assert 204)
   (scene-index          int32              :offset-assert 208)
   (anim                 basic              :offset-assert 212)
   (next-anim            basic              :offset-assert 216)
   (camera               uint64             :offset-assert 224)
   (main-entity          basic              :offset-assert 232)
   (wait                 basic              :offset-assert 236)
   (old-target-pos       transformq :inline :offset-assert 240)
   (pre-cut-frame        basic              :offset-assert 288)
   (preload-continue     basic              :offset-assert 292)
   (dma-max              uint32             :offset-assert 296)
   (gui-id               uint32             :offset-assert 300)
   (aborted?             basic              :offset-assert 304)
   (scene-start-time     time-frame             :offset-assert 312)
   (targ-speed           float              :offset-assert 320)
   (cur-speed            float              :offset-assert 324)
   (speed-change-time    time-frame             :offset-assert 328)
   (speed-press-time     time-frame             :offset-assert 336)
   (speed-change-speed   float              :offset-assert 344)
   (subtitle-change-time time-frame             :offset-assert 352)
   (user-sound           uint32    4       :offset-assert 360) ;; guess
   )
  :method-count-assert 26
  :size-assert         #x178
  :flag-assert         #x1a01000178
  (:methods
    (scene-player-method-20 () none 20)
    (scene-player-method-21 () none 21)
    (scene-player-method-22 () none 22)
    (scene-player-method-23 () none 23)
    (scene-player-method-24 () none 24)
    (scene-player-method-25 () none 25)
    )
  )

(define-extern *scene-player* scene-player)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sync-info-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum sync-flags
  :type uint64
  :bitfield #t
  )

(deftype sync-info-params (structure)
  ((sync-type  basic   :offset-assert 0)
   (sync-flags sync-flags  :offset-assert 8)
   (entity     basic   :offset-assert 16)
   (period     uint32  :offset-assert 20)
   (percent    float   :offset-assert 24)
   (ease-in    float   :offset-assert 28)
   (ease-out   float   :offset-assert 32)
   (pause-in   float   :offset-assert 36)
   (pause-out  float   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sync-info (structure)
  ((sync-flags sync-flags  :offset-assert 0)
   (offset     float   :offset-assert 8)
   (period     uint32  :offset-assert 12)
   )
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  (:methods
    (sync-info-method-9 (_type_) none 9) ;; (get-current-value (_type_ float) float 9)
    (get-phase-offset "Get the offset, as a fraction of period" (_type_) float 10)
    (get-norm! "Abstract method, stubbed" (_type_) float 11)
    (multiply-norm! "Multiples result of `get-norm!` by the provided float" (_type_ float object) float 12)
    (initialize! "Abstract method, stubbed" () none 13)
    (sync-info-method-14 (_type_ time-frame) time-frame 14)
    (sync-info-method-15 (_type_ float) none 15) ;; (load-params! (_type_ process uint float float float) symbol 15)
    )
  )

(deftype sync-linear (sync-info)
  ()
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  (:methods
    )
  )

(deftype sync-eased (sync-info)
  ((tlo       float  :offset-assert 16)
   (thi       float  :offset-assert 20)
   (ylo       float  :offset-assert 24)
   (m2        float  :offset-assert 28)
   (yend      float  :offset-assert 32)
   (pause-in  float  :offset-assert 36)
   (pause-out float  :offset-assert 40)
   )
  :method-count-assert 16
  :size-assert         #x2c
  :flag-assert         #x100000002c
  (:methods
    )
  )

(deftype sync-paused (sync-info)
  ((pause-in  float  :offset-assert 16)
   (pause-out float  :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  (:methods
    )
  )

(deftype delayed-rand-float (structure)
  ((min-time   int32   :offset-assert 0)
   (max-time   int32   :offset-assert 4)
   (max-val    float   :offset-assert 8)
   (timer      int32   :offset-assert 12)
   (start-time time-frame  :offset-assert 16) ;; time-frame
   (value      float   :offset-assert 24)
   )
  :method-count-assert 13
  :size-assert         #x1c
  :flag-assert         #xd0000001c
  (:methods
    (delayed-rand-float-method-9 () none 9) ;; (set-params! (_type_ int int float) float 9)
    (delayed-rand-float-method-10 () none 10) ;; (update! (_type_) float 10)
    (delayed-rand-float-method-11 () none 11)
    (delayed-rand-float-method-12 () none 12)
    )
  )

(deftype oscillating-float (structure)
  ((value   float  :offset-assert 0)
   (target  float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (max-vel float  :offset-assert 12)
   (damping float  :offset-assert 16)
   (accel   float  :offset-assert 20)
   )
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (oscillating-float-method-9 () none 9) ;; (set-params! (_type_ float float float float) float 9)
    (oscillating-float-method-10 () none 10) ;; (update! (_type_ float) float 10)
    )
  )

(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert 0)
   (max-value  float                     :offset-assert 24)
   (min-value  float                     :offset-assert 28)
   (elasticity float                     :offset-assert 32)
   (state      int32                     :offset-assert 36)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (bouncing-float-method-9 () none 9) ;; (set-params! (_type_ float float float float float float float) float 9)
    (bouncing-float-method-10 () none 10) ;; (update! (_type_ float) float 10)
    (bouncing-float-method-11 () none 11) ;; (at-min? (_type_) symbol 11)
    (bouncing-float-method-12 () none 12) ;; (at-max? (_type_) symbol 12)
    )
  )

(deftype delayed-rand-vector (structure)
  ((min-time   int32          :offset-assert 0)
   (max-time   int32          :offset-assert 4)
   (xz-max     float          :offset-assert 8)
   (y-max      float          :offset-assert 12)
   (timer      int32          :offset-assert 16)
   (start-time time-frame         :offset-assert 24) ;; time-frame
   (value      vector :inline :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (delayed-rand-vector-method-9 () none 9) ;; (set-params! (_type_ int int float float) vector 9)
    (delayed-rand-vector-method-10 () none 10) ;; (update-now! (_type_) vector 10)
    (delayed-rand-vector-method-11 () none 11) ;; (update-with-delay! (_type_) vector 11)
    (delayed-rand-vector-method-12 () none 12) ;; (update-with-delay-or-reset! (_type_) vector 12)
    )
  )

(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert 0)
   (target  vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (max-vel float          :offset-assert 48)
   (damping float          :offset-assert 52)
   (accel   float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (oscillating-vector-method-9 () none 9) ;; (set-params! (_type_ vector float float float) vector 9)
    (oscillating-vector-method-10 () none 10) ;; (update! (_type_ vector) vector 10)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pov-camera-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum pov-camera-flag
  :bitfield #t
  :type int32
  (notify-of-abort 0)
  (allow-abort 1)
  (inherit-orientation 2)
  )

(deftype pov-camera (process-drawable)
  ((flags             pov-camera-flag :offset-assert 200) ;; pov-camera-flag
   (debounce-start-time time-frame    :offset-assert 208) ;; time-frame
   (notify-handle       uint64        :offset-assert 216) ;; handle
   (anim-name           string        :offset-assert 224) ;; guessed by decompiler
   (command-list        pair          :offset-assert 228) ;; guessed by decompiler
   (mask-to-clear       process-mask  :offset-assert 232) ;; guessed by decompiler
   (music-volume-movie  float         :offset-assert 236)
   (sfx-volume-movie    float         :offset-assert 240)
   )
  :method-count-assert 30
  :size-assert         #xf4
  :flag-assert         #x1e008000f4
  (:methods
    (pov-camera-method-20 () none 20) ;; (pov-camera-abort () _type_ :state 20)
    (pov-camera-method-21 () none 21) ;; (pov-camera-done-playing () _type_ :state 21)
    (pov-camera-method-22 () none 22) ;; (pov-camera-playing () _type_ :state 22)
    (pov-camera-method-23 () none 23) ;; (pov-camera-start-playing () _type_ :state 23)
    (pov-camera-method-24 () none 24) ;; (pov-camera-startup () _type_ :state 24)
    (pov-camera-method-25 () none 25) ;; (check-for-abort (_type_) symbol 25)
    (pov-camera-method-26 () none 26) ;; (target-grabbed? (_type_) symbol 26)
    (pov-camera-method-27 () none 27) ;; (pre-startup-callback (_type_) none 27)
    (pov-camera-method-28 () none 28) ;; (target-released? () symbol 28)
    (pov-camera-method-29 () none 29) ;; (set-stack-size! (_type_) none 29)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; smush-control-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype smush-control (structure)
  ((start-time  time-frame  :offset-assert 0) ;; time-frame
   (period      float   :offset-assert 8)
   (duration    float   :offset-assert 12)
   (amp         float   :offset-assert 16)
   (damp-amp    float   :offset-assert 20)
   (damp-period float   :offset-assert 24)
   (ticks       float   :offset-assert 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (set-zero! (_type_) _type_ 9)
    (update! (_type_) float 10)
    (get-no-update (_type_) float 11)
    (activate! (_type_ float int int float float clock) _type_ 12)
    (nonzero-amplitude? (_type_) symbol 13)
    (die-on-next-update! (_type_) _type_ 14)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pos-history (structure)
  ((points     (inline-array vector)  :offset-assert 0) ;; guessed by decompiler
   (num-points int32                  :offset-assert 4)
   (h-first    int32                  :offset-assert 8)
   (h-last     int32                  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype debug-vertex (structure)
  ((trans  vector4w :inline :offset-assert 0)
   (normal vector3h :inline :offset-assert 16)
   (st     vector2h :inline :offset-assert 22)
   (color  uint32           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype debug-vertex-stats (basic)
  ((length    int32            :offset-assert 4)
   (pos-count int32            :offset-assert 8)
   (vertex    debug-vertex 600 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4b10
  :flag-assert         #x900004b10
  )

(define-extern *color-black* rgba)
(define-extern *color-white* rgba)
(define-extern *color-gray* rgba)
(define-extern *color-red* rgba)
(define-extern *color-green* rgba)
(define-extern *color-blue* rgba)
(define-extern *color-cyan* rgba)
(define-extern *color-magenta* rgba)
(define-extern *color-yellow* rgba)
(define-extern *color-light-red* rgba)
(define-extern *color-light-green* rgba)
(define-extern *color-light-blue* rgba)
(define-extern *color-light-cyan* rgba)
(define-extern *color-light-magenta* rgba)
(define-extern *color-light-yellow* rgba)
(define-extern *color-dark-red* rgba)
(define-extern *color-dark-green* rgba)
(define-extern *color-dark-blue* rgba)
(define-extern *color-dark-cyan* rgba)
(define-extern *color-dark-magenta* rgba)
(define-extern *color-dark-yellow* rgba)
(define-extern *color-orange* rgba)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-mod-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum joint-mod-mode
  :bitfield #t
  :type uint32
  (flex-blend)
  (look-at)
  (world-look-at)
  (rotate)
  (joint-set)
  (joint-set*)
  (rotate2) ;; ??
  (reset)
  (polar-look-at)
  (joint-set*-world)
  (gun-look-at)
  (foot-rot)
  (joint-set-world)
  )

;; +++joint-mod-h:track-mode
(defenum track-mode
  :bitfield #t
  :type uint16
  (track-on       0) ;; 1
  (track-x        1) ;; 2
  (track-y        2) ;; 4
  (lock-on        3) ;; 8
  (no-trans       4) ;; 16
  (no-rotate      5) ;; 32
  (no-scale       6) ;; 64
  )
;; ---joint-mod-h:track-mode

(deftype joint-mod (basic)
  ((mode joint-mod-mode)
   (process process-drawable)
   (joint cspace)
   (target vector :inline)
   (twist vector :inline)
   (twist-max vector :inline)
   ;; (twist-max float 4)
   (extra-twist degrees :offset 40)
   (track-mode track-mode :offset 44)
   (loock-at-count uint16 :offset 46)
   (twist-range-x meters :offset 56)
   (twist-range-y meters :offset 60)
   (twist-speed-x float :offset 64)
   (twist-speed-y float :offset 68)
   (twist-min-x float :offset 72)
   (twist-min-y float :offset 76)
   (trans vector :inline :offset-assert 80)
   (shmushy-old float :offset 80)
   (smushy-off float :offset 84)
   (smushyv float :offset 88)
   (quat quaternion :inline :offset-assert 96)
   (scale vector :inline)
   (notice-time time-frame)
   (flex-blend float)
   (blend float)
   (max-dist meters)
   (ignore-angle degrees)
   (up uint8)
   (nose uint8)
   (ear uint8)
   (base-joint uint8)
   (base-nose uint8)
   (shutting-down? symbol)
   (parented-scale? symbol)
   (polar-internal-tilt-max float)
   (polar-internal-radius float)
   (polar-external-tilt-max float)
   (polar-external-radius float)
   )
  :method-count-assert 16
  :size-assert         #xb8
  :flag-assert         #x10000000b8
  ;; Failed to read fields.
  (:methods
    (new (symbol type joint-mod-mode process-drawable int) _type_ 0)
    (mode-set! (_type_ joint-mod-mode) none 9)
    (target-set! (_type_ vector) none 10)
    (look-at! (_type_ vector symbol process) none :behavior process 11)
    (reset-blend! (_type_) _type_ 12)
    (twist-set! (_type_ float float float) vector 13)
    (trs-set! (_type_ vector quaternion vector) none 14)
    (shut-down (_type_) none 15)
    )
  )

(deftype try-to-look-at-info (basic)
  ((who  handle  :offset-assert 8)
   (horz float   :offset-assert 16)
   (vert float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-mod-wheel (basic)
  ((last-position vector           :inline :offset-assert 16)
   (angle         float                    :offset-assert 32)
   (process       process-drawable         :offset-assert 36) ;; guessed by decompiler
   (wheel-radius  float                    :offset-assert 40)
   (wheel-axis    int8                     :offset-assert 44)
   )
  (:methods
    (new (symbol type process-drawable int float int) _type_)
    )
  :method-count-assert 9
  :size-assert         #x2d
  :flag-assert         #x90000002d
  )

(deftype joint-mod-set-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (set-rotation    symbol             :offset-assert 64)
   (set-scale       symbol             :offset-assert 68)
   (set-translation symbol             :offset-assert 72)
   (enable          symbol             :offset-assert 76)
   )
  (:methods
    (new (symbol type process-drawable int symbol symbol symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype joint-mod-add-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (add-rotation    symbol              :offset-assert 64)
   (add-scale       symbol              :offset-assert 68)
   (add-translation symbol              :offset-assert 72)
   (enable          symbol              :offset-assert 76)
   )
  (:methods
    (new (symbol type process-drawable int symbol symbol symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype joint-mod-set-world (basic)
  ((transform  transformq :inline :offset-assert 16)
   (node-index int32              :offset-assert 64)
   (enable     symbol             :offset-assert 68)
   )
  (:methods
    (new (symbol type process-drawable int symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype joint-mod-blend-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (node-index      int32              :offset-assert 112)
   (blend           float              :offset-assert 116)
   (enable          symbol              :offset-assert 120)
   )
  (:methods
    (new (symbol type process-drawable int symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype joint-mod-spinner (basic)
  ((spin-axis vector :inline :offset-assert 16)
   (angle     float          :offset-assert 32)
   (spin-rate float          :offset-assert 36)
   (enable    symbol         :offset-assert 40)
   )
  (:methods
    (new (symbol type process-drawable int vector float) _type_)
    )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(defenum joint-mod-blend-flags
  :bitfield #t
  :type uint32
  (trans)
  (scale)
  (rotation)
  )

(deftype joint-mod-blend-world (basic)
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (blend-flags     joint-mod-blend-flags  :offset-assert 112)
   (node-index      int32              :offset-assert 116)
   (blend           float              :offset-assert 120)
   (enable          symbol             :offset-assert 124)
   )
  (:methods
    (new (symbol type process-drawable int symbol float) _type_)
    )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype joint-mod-rotate-local (basic)
  ((enable   symbol              :offset-assert 4)
   (rotation quaternion :inline :offset-assert 16)
   )
  (:methods
    (new (symbol type process-drawable int symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defenum joint-mod-ik-flags
  :bitfield #t
  :type uint32
  (enable)
  (elbow-trans-neg)
  (elbow-rot-neg)
  )

(deftype joint-mod-ik (basic)
  ((flags                  joint-mod-ik-flags  :offset-assert 4)
   (process                process-drawable    :offset-assert 8)
   (hand-dist              float          :offset-assert 12)
   (handle-pos             vector :inline :offset-assert 16)
   (elbow-pole-vector-axis uint32         :offset-assert 32)
   (elbow-rotation-axis    uint32         :offset-assert 36)
   (user-position          vector :inline :offset-assert 48)
   (user-normal            vector :inline :offset-assert 64)
   (user-blend             float          :offset-assert 80)
   (user-float             float          :offset-assert 84)
   (callback               (function joint-mod-ik matrix matrix vector object)          :offset-assert 88)
   (shoulder-matrix-no-ik  matrix :inline :offset-assert 96)
   (elbow-matrix-no-ik     matrix :inline :offset-assert 160)
   (blend                  float          :offset-assert 224)
   (blend-interp           float          :offset-assert 228)
   )
  :method-count-assert 11
  :size-assert         #xe8
  :flag-assert         #xb000000e8
  (:methods
    (new (symbol type process-drawable int float) _type_)
    (handle-copy! (_type_ vector) none 9)
    (enable-set! (_type_ symbol) none 10)
    )
  )

(define-extern joint-mod-debug-draw (function joint-mod none))
(define-extern *joint-axis-vectors* (inline-array vector))
(define-extern joint-mod-wheel-callback (function cspace transformq none))
(define-extern joint-mod-set-local-callback (function cspace transformq none))
(define-extern joint-mod-add-local-callback (function cspace transformq none))
(define-extern joint-mod-set-world-callback (function cspace transformq none))
(define-extern joint-mod-blend-local-callback (function cspace transformq none))
(define-extern joint-mod-spinner-callback (function cspace transformq none))
(define-extern joint-mod-blend-world-callback (function cspace transformq none))
(define-extern joint-mod-rotate-local-callback (function cspace transformq none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-func-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-mesh-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-tri-result (structure)
  ((vertex      vector      3 :inline :offset-assert 0) ;; guessed by decompiler
   (intersect   vector      :inline :offset-assert 48)
   (normal      vector      :inline :offset-assert 64)
   (pat         pat-surface         :offset-assert 80) ;; guessed by decompiler
   (collide-ptr basic               :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype collide-mesh-tri (structure)
  ((vertex-index uint8       3 :offset-assert 0) ;; guessed by decompiler
   (unused       uint8         :offset-assert 3)
   (pat          pat-surface   :offset-assert 4) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-mesh (basic)
  ((joint-id    int32                   :offset-assert 4)
   (num-tris    uint32                  :offset-assert 8)
   (num-verts   uint32                  :offset-assert 12)
   (vertex-data (inline-array vector)   :offset-assert 16) ;; guessed by decompiler
   (tris        collide-mesh-tri      1 :inline :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 16
  :size-assert         #x28
  :flag-assert         #x1000000028
  (:methods
    (collide-mesh-method-9 () none 9) ;; (debug-draw-tris (_type_ process-drawable int) none 9)
    (collide-mesh-method-10 () none 10) ;; (overlap-test (_type_ collide-mesh-cache-tri vector) symbol 10)
    (collide-mesh-method-11 () none 11) ;; (should-push-away-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float 11)
    (collide-mesh-method-12 () none 12) ;; (sphere-on-platform-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float 12)
    (collide-mesh-method-13 () none 13) ;; (populate-cache! (_type_ collide-mesh-cache-tri matrix) none 13)
    (collide-mesh-method-14 () none 14) ;; (collide-mesh-math-1 (_type_ object object) none 14)
    (collide-mesh-method-15 () none 15) ;; (collide-mesh-math-2 (_type_ object object object) none 15)
    )
  )

(deftype collide-mesh-cache-tri (structure)
  ((vertex vector         3 :inline      :offset-assert 0) ;; guessed by decompiler
   (normal vector         :inline :offset-assert 48)
   (bbox4w bounding-box4w :inline :offset-assert 64)
   (pat    pat-surface            :offset 60) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype collide-mesh-cache-entry (structure)
  ((mat  matrix  :inline  :offset-assert 0)
   (tris collide-mesh-cache-tri :dynamic :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype collide-mesh-cache (basic)
  ((used-size uint32       :offset-assert 4)
   (max-size  uint32       :offset-assert 8)
   (id        uint32       :offset-assert 12) ;; guessed by decompiler
   (data      uint8  48000 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #xbb90
  :flag-assert         #xd0000bb90
  (:methods
    (collide-mesh-cache-method-9 () none 9) ;; (allocate! (_type_ int) int 9)
    (is-id? (_type_ int) symbol 10) ;; (is-id? (_type_ int) symbol 10)
    (next-id! (_type_) uint 11) ;; (next-id! (_type_) uint 11)
    (collide-mesh-cache-method-12 () none 12)
    )
  )

(define-extern *collide-mesh-cache* collide-mesh-cache) ;; collide-mesh-cache

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type collide-shape trsqv)
(declare-type collide-shape-moving collide-shape)
(declare-type touching-list structure)

(defenum collide-spec
  :bitfield #t
  :type uint32

  (backgnd            0) ;; 1
  (jak                1) ;; 2
  (bot                2) ;; 4
  (crate              3) ;; 8
  (civilian           4) ;; 16
  (enemy              5) ;; 32
  (obstacle           6) ;; 64
  (vehicle-sphere     7) ;; 128
  (hit-by-player-list 8) ;; 256
  (hit-by-others-list 9) ;; 512
  (player-list       10) ;; 1024
  (water             11) ;; 2048
  (collectable       12) ;; 4096
  (blocking-plane    13) ;; 8192
  (projectile        14) ;; 16384
  (jak-vulnerable    15) ;; 32768
  (camera-blocker    16) ;; hi 1
  (notice-blue-eco-powerup 17) ;; hi 2
  (tobot             18) ;; hi 4
  (pusher            19) ;; hi 8
  (vehicle-mesh      20) ;; hi 16
  (bot-targetable    21) ;; hi 32
  (jak-vehicle       22) ;; hi 64
  (special-obstacle  23) ;; hi 128
  (mech-punch        24) ;; hi 256
  (obstacle-for-jak  25) ;; hi 512
  (vehicle-mesh-probeable 26) ;; hi 1024
  (unknown-27 27)
  (unknown-28 28)
  (unknown-29 29)
  (unknown-30 30)
  (unknown-31 31)
  (unknown-32 32)
  (unknown-33 33)
  (unknown-34 34)
  (unknown-35 35)
  (unknown-36 36)
  (unknown-37 37)
  (unknown-38 38)
  (unknown-39 39)
  (unknown-40 40)
  (unknown-41 41)
  (unknown-42 42)
  (unknown-43 43)
  (unknown-44 44)
  (unknown-45 45)
  (unknown-46 46)
  (unknown-47 47)
  (unknown-48 48)
  (unknown-49 49)
  (unknown-50 50)
  (unknown-51 51)
  (unknown-52 52)
  (unknown-53 53)
  (unknown-54 54)
  (unknown-55 55)
  (unknown-56 56)
  (unknown-57 57)
  (unknown-58 58)
  (unknown-59 59)
  (unknown-60 60)
  (unknown-61 61)
  (unknown-62 62)
  (unknown-63 63)
  )

(defenum collide-action
  :bitfield #t
  :type uint32

  (solid                  0) ;; 1
  (semi-solid             1) ;; 2
  (rideable               2) ;; 4
  (can-ride               3) ;; 8
  (dont-push-away         4) ;; 16
  (pull-rider-can-collide 5) ;; 32
  (deadly                 6) ;; 64
  (persistent-attack      7) ;; 128
  (no-smack               8) ;; 256
  (no-standon             9) ;; 512
  (block-turn-around     10) ;; 1024
  (check-edge            11) ;; 2048
  (check-stuck           12) ;; 4096
  (stuck-wall-escape     13) ;; 8192
  (no-normal-reset       14) ;; 163884
  (edge-grabbed          15) ;; 32768
  (nav-sphere            16) ;; hi 1
  )

(deftype collide-rider (structure)
  ((rider-handle    uint64         :offset-assert 0)
   (sticky-prim     basic          :offset-assert 8)
   (prim-ry         float          :offset-assert 12)
   (rider-local-pos vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-rider-pool (basic)
  ((alloc-count int32      :offset-assert 4)
   (riders      collide-rider 20 :inline :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x290
  :flag-assert         #xb00000290
  (:methods
    (collide-rider-pool-method-9 () none 9)
    (prepare (_type_) none 10)
    )
  )

(deftype pull-rider-info (structure)
  ((rider          collide-rider                :offset-assert 0) ;; collide-sticky-rider
   (rider-cshape   collide-shape-moving         :offset-assert 4) ;; guessed by decompiler
   (rider-delta-ry float                        :offset-assert 8)
   (rider-dest     vector               :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defenum overlaps-others-options
  :type uint32
  :bitfield #t
  (oo0)
  (oo1)
  (oo2)
  (oo3)
  (oo4)
  )

(deftype overlaps-others-params (structure)
  ((options                     overlaps-others-options         :offset-assert 0)
   (collide-with-filter         collide-spec   :offset-assert 4)
   (tlist                       touching-list  :offset-assert 8) ;; guessed by decompiler
   (filtered-root-collide-with  collide-spec   :offset-assert 12)
   (filtered-child-collide-with collide-spec   :offset-assert 16)
   (filtered-other-collide-as   collide-spec   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype move-above-ground-params (structure)
  ((gnd-collide-with       collide-spec                   :offset-assert 0)
   (popup                  float                          :offset-assert 4)
   (dont-move-if-overlaps? basic                          :offset-assert 8)
   (hover-if-no-ground?    basic                          :offset-assert 12)
   (overlaps-params        overlaps-others-params :inline :offset-assert 16)
   (new-pos                vector                 :inline :offset-assert 48)
   (old-gspot-pos          vector                 :inline :offset-assert 64)
   (old-gspot-normal       vector                 :inline :offset-assert 80)
   (pat                    pat-surface                    :offset-assert 96) ;; was u32
   (on-ground?             basic                          :offset-assert 100)
   (do-move?               basic                          :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  )

(defenum prim-type
  :type int8
  (prim   -2)
  (sphere -1)
  (group  0)
  (mesh 1)
  (fake-prim 2)
  )

(deftype collide-prim-core (structure)
  ((world-sphere vector         :inline :offset-assert 0)
   (collide-as   collide-spec           :offset-assert 16) ;; guessed by decompiler
   (collide-with collide-spec           :offset-assert 20)
   (action       collide-action         :offset-assert 24) ;; guessed by decompiler
   (prim-type    prim-type              :offset-assert 28)
   (unused1      uint8        3       :offset-assert 29)
   (quad         uint128        2       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-shape-prim (basic)
  ((cshape          collide-shape             :offset-assert 4)
   (prim-id         uint32                    :offset-assert 8)
   (transform-index int8                      :offset-assert 12)
   (unused2         int8 3)
   (prim-core       collide-prim-core :inline :offset-assert 16)
   (local-sphere    vector            :inline :offset-assert 48)
   ;; specifc
   (world-sphere    vector            :inline :offset 16)
   (collide-as collide-spec :offset 32)
   (collide-with collide-spec :offset 36)
   (action collide-action :offset 40)
   (prim-type int8 :offset 44)
   (radius float :offset 60)
   (specific uint8 16 :score -1)
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  ;; Failed to read fields.
  (:methods
    (new (symbol type collide-shape uint int) _type_ 0)
    (collide-shape-prim-method-9 () none 9) ;; (move-by-vector! (_type_ vector) none 9)
    (collide-shape-prim-method-10 () none 10) ;; (find-prim-by-id (_type_ uint) collide-shape-prim 10)
    (collide-shape-prim-method-11 () none 11) ;; (debug-draw-world-sphere (_type_) symbol 11)
    (collide-shape-prim-method-12 () none 12) ;; (add-fg-prim-using-box (_type_ collide-cache) none 12)
    (collide-shape-prim-method-13 () none 13) ;; (add-fg-prim-using-line-sphere (_type_ collide-cache) none 13)
    (collide-shape-prim-method-14 () none 14) ;; (add-fg-prim-using-y-probe (_type_ collide-cache) none 14)
    (collide-shape-prim-method-15 () none 15) ;; (overlaps-others-test (_type_ overlaps-others-params collide-shape-prim) symbol 15)
    (collide-shape-prim-method-16 () none 16) ;; (overlaps-others-group (_type_ overlaps-others-params collide-shape-prim-group) symbol 16)
    (collide-shape-prim-method-17 () none 17) ;; (unused-17 () none 17)
    (collide-shape-prim-method-18 () none 18) ;; (collide-with-collide-cache-prim-mesh (_type_ collide-shape-intersect collide-cache-prim) none 18)
    (collide-shape-prim-method-19 () none 19) ;; (collide-with-collide-cache-prim-sphere (_type_ collide-shape-intersect collide-cache-prim) none 19)
    )
  )


(deftype collide-shape-prim-sphere (collide-shape-prim)
  ((pat pat-surface :offset 64)
   (nav-radius float :offset 68)
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  ;; Failed to read fields.
  (:methods
     (new (symbol type collide-shape uint) _type_ 0)
    )
  )


(deftype collide-shape-prim-mesh (collide-shape-prim)
  ((mesh collide-mesh :offset 64)
   (mesh-id int32 :offset 68)
   (mesh-cache-id uint32 :offset 72)
   (mesh-cache-entry collide-mesh-cache-entry :offset 76)
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  ;; Failed to read fields.
  (:methods
     (new (symbol type collide-shape uint uint) _type_ 0)
    )
  )

(deftype collide-shape-prim-group (collide-shape-prim)
  ((num-children uint8 :offset 64)
   (num-alloc-children uint8 :offset 65)
   (child (inline-array collide-shape) :offset 68) ;; total guess..
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  ;; Failed to read fields.
  (:methods
     (new (symbol type collide-shape uint int) _type_ 0)
    )
  )

(defenum collide-list-enum
  (hit-by-player)
  (usually-hit-by-player)
  (hit-by-others)
  (player)
  )

;; +++collide-shape-h:nav-flags
(defenum nav-flags
  :type uint8
  :bitfield #t
  (nav-flags0 0)
  (nav-flags1 1)
  )
;; ---collide-shape-h:nav-flags

(deftype collide-shape (trsqv)
  ((actor-hash-index int16 :offset 12)
   (process process-drawable :offset-assert 140)
   (max-iteration-count uint8)
   (nav-flags nav-flags)
   (total-prims uint8)
   (num-riders uint8)
   (pat-ignore-mask pat-surface)
   (event-self symbol)
   (event-other symbol)
   (root-prim collide-shape-prim)
   (riders pointer) ;; no
   (penetrate-using penetrate)
   (penetrated-by penetrate)
   (backup-collide-as collide-spec)
   (backup-collde-with collide-spec)
   (event-priority uint8)
   (rider-max-momentum float)
   )
  :method-count-assert 55
  :size-assert         #xc8
  :flag-assert         #x37000000c8
  ;; Failed to read fields.
  (:methods
    (new (symbol type process-drawable collide-list-enum) _type_ 0)
    (collide-shape-method-28 () none 28) ;; (move-by-vector! (_type_ vector) none 28)
    (collide-shape-method-29 (_type_ vector) none 29) ;; (alloc-riders (_type_ int) none 29)
    (collide-shape-method-30 () none 30) ;; (move-to-point! (_type_ vector) none 30)
    (collide-shape-method-31 () none 31) ;; (debug-draw (_type_) none 31)
    (collide-shape-method-32 (_type_ vector uint int) none 32) ;; (fill-cache-for-shape! (_type_ float collide-kind) none 32)
    (collide-shape-method-33 () none 33) ;; (fill-cache-integrate-and-collide! (_type_ vector collide-kind) none 33)
    (collide-shape-method-34 () none 34) ;; (find-prim-by-id (_type_ uint) collide-shape-prim 34)
    (collide-shape-method-35 () none 35) ;; (detect-riders! (_type_) symbol 35)
    (collide-shape-method-36 () none 36) ;; (build-bounding-box-for-shape (_type_ bounding-box float collide-kind) symbol 36)
    (collide-shape-method-37 () none 37) ;; (integrate-and-collide! (_type_ vector) none 37)
    (collide-shape-method-38 () none 38) ;; (find-collision-meshes (_type_) symbol 38)
    (collide-shape-method-39 () none 39) ;; (on-platform (_type_ collide-shape collide-overlap-result) symbol 39)
    (find-overlapping-shapes (_type_ overlaps-others-params) symbol 40) ;; (find-overlapping-shapes (_type_ overlaps-others-params) symbol 40)
    (collide-shape-method-41 () none 41) ;; (dummy-41 (_type_ attack-info float) vector 41)
    (collide-shape-method-42 () none 42) ;; (should-push-away (_type_ collide-shape collide-overlap-result) symbol 42)
    (collide-shape-method-43 () none 43) ;; (pull-rider! (_type_ pull-rider-info) none 43)
    (collide-shape-method-44 () none 44) ;; (pull-riders! (_type_) symbol 44)
    (collide-shape-method-45 () none 45) ;; (do-push-aways! (_type_) symbol 45)
    (collide-shape-method-46 (_type_) none 46) ;; (set-root-prim! (_type_ collide-shape-prim) collide-shape-prim 46)
    (collide-shape-method-47 () none 47) ;; (update-transforms! (_type_) symbol 47)
    (collide-shape-method-48 () none 48) ;; (clear-collide-with-as (_type_) none 48)
    (collide-shape-method-49 () none 49) ;; (restore-collide-with-as (_type_) none 49)
    (collide-shape-method-50 () none 50) ;; (backup-collide-with-as (_type_) none 50)
    (collide-shape-method-51 () none 51) ;; (set-root-prim-collide-with! (_type_ collide-kind) none 51)
    (collide-shape-method-52 () none 52) ;; (set-root-prim-collide-as! (_type_ collide-kind) none 52)
    (collide-shape-method-53 () none 53) ;; (set-collide-kinds (_type_ int collide-kind collide-kind) none 53)
    (collide-shape-method-54 () none 54) ;; (set-collide-offense (_type_ int collide-offense) none 54)
    )
  )

(defenum cshape-moving-flags
  :bitfield #t
  :type uint64
  (on-surface 0)
  (on-ground 1)
  (t-surface 2)
  (t-wall 3)
  (t-ceil 4)
  (t-act 5)
  (csmf06)
  (csmf07)
  (csmf08)
  (csmf09)
  (on-water 10)
  (csmf11)
  (csmf12)
  (csmf13)
  (csmf14)
  (csmf15)
  (csmf16)
  (csmf17)
  (csmf18)
  (csmf19)
  (csmf20)
  (csmf21)
  (csmf22)
  (csmf23)
  (csmf24)
  (csmf25)
  (csmf26)
  (csmf27)
  (csmf28)
  (csmf29)
  )

(defenum cshape-reaction-flags
  :bitfield #t
  :type uint32
  (csrf00)
  (csrf01)
  (csrf02)
  (csrf03)
  (csrf04)
  (csrf05)
  (csrf06)
  (csrf07)
  (csrf08)
  (csrf09)
  (csrf10)
  (csrf11)
  (csrf12)
  (csrf13)
  (csrf14)
  (csrf15)
  (csrf16)
  (csrf17)
  (csrf18)
  (csrf19)
  (csrf20)
  (csrf21)
  (csrf22)
  (csrf23)
  (csrf24)
  (csrf25)
  (csrf26)
  (csrf27)
  (csrf28)
  (csrf29)
  (csrf30)
  (csrf31)
  )

(deftype collide-shape-moving (collide-shape)
  ((rider-time time-frame :offset-assert 200)
   (rider-last-move vector :inline)
   (trans-old vector :inline)
   (poly-pat pat-surface :offset 272)
   (cur-pat pat-surface)
   (ground-pat pat-surface)
   (status cshape-moving-flags)
   (old-status cshape-moving-flags)
   (prev-status cshape-moving-flags :offset-assert 304)
   (reaction-flag cshape-reaction-flags)
   (reaction function) ;; function types...
   (no-reaction function)
   (local-normal vector :inline)
   (surface-normal vector :inline)
   (poly-normal vector :inline)
   (ground-poly-normal vector :inline)
   (gspot-pos vector :inline)
   (gspot-normal vector :inline)
   (grount-touch-point vector :inline)
   (ground-impact-vel meters)
   (surface-angle float)
   (poly-angle float)
   (touch-angle float)
   (coverage float)
   (dynam dynamics)
   (surf surface)
   )
  :method-count-assert 68
  :size-assert         #x1dc
  :flag-assert         #x44000001dc
  ;; Failed to read fields.
  (:methods
    (new (symbol type process-drawable collide-list-enum) _type_ 0)
    (collide-shape-moving-method-55 (_type_) symbol 55)
    (collide-shape-moving-method-56 () none 56) ;; (set-and-handle-pat! (_type_ pat-surface) none 56)
    (collide-shape-moving-method-57 () none 57) ;; (integrate-no-collide! (_type_ vector) none 57)
    (collide-shape-moving-method-58 () none 58) ;; (dummy-58 (_type_ vector) symbol 58)
    (collide-shape-moving-method-59 () none 59) ;; (integrate-for-enemy-with-move-to-ground! (_type_ vector collide-kind float symbol symbol symbol) none 59)
    (collide-shape-moving-method-60 () none 60) ;; (move-to-ground (_type_ float float symbol collide-kind) symbol 60)
    (collide-shape-moving-method-61 () none 61) ;; (move-to-ground-point! (_type_ vector vector vector) none 61)
    (collide-shape-moving-method-62 (_type_) none 62) ;; (compute-acc-due-to-gravity (_type_ vector float) vector 62)
    (collide-shape-moving-method-63 () none 63) ;; (step-collison! (_type_ vector vector float) float 63)
    (collide-shape-moving-method-64 () none 64) ;; (move-to-tri! (_type_ collide-tri-result vector) none 64)
    (collide-shape-moving-method-65 () none 65)
    (collide-shape-moving-method-66 () none 66)
    (collide-shape-moving-method-67 () none 67)
    )
  )

(define-extern *collide-hit-by-player-list* engine) ;; engine
(define-extern *collide-hit-by-others-list* engine) ;; engine
(define-extern *collide-player-list* engine) ;; engine
(define-extern *collide-shape-prim-backgnd* collide-shape-prim-mesh) ;; collide-shape-prim-mesh
(define-extern *collide-shape-prim-water* collide-shape-prim-mesh) ;; collide-shape-prim-mesh
(define-extern *collide-rider-pool* collide-rider-pool)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-obs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum manipy-options
  :bitfield #t
  :type uint32
  )

(deftype manipy (process-drawable)
  ((new-trans-hook       (function none)        :offset-assert 200)
   (cur-trans-hook       (function none)        :offset-assert 204)
   (cur-event-hook       (function none)        :offset-assert 208)
   (new-joint-anim       art-joint-anim         :offset-assert 212)
   (new-joint-anim-blend uint64                 :offset-assert 216)
   (anim-mode            symbol                 :offset-assert 224)
   (cur-grab-handle      handle                 :offset-assert 232)
   (cur-target-handle    handle                 :offset-assert 240)
   (old-grab-pos         vector        :inline  :offset-assert 256)
   (joint                joint-mod 4            :offset-assert 272)
   (new-post-hook        (function none)        :offset-assert 288)
   (cur-post-hook        (function none)        :offset-assert 292)
   (clone-copy-trans     symbol                 :offset-assert 296)
   (shadow-backup        basic                  :offset-assert 300)
   (draw?                symbol                 :offset-assert 304)
   (userdata             uint64                 :offset-assert 312)
   (prefix               basic                  :offset-assert 320)
   (shadow-volume-joint  int32                  :offset-assert 324)
   (speed                float                  :offset-assert 328)
   (user-uint64          uint64    4            :offset-assert 336)
   (options              manipy-options         :offset-assert 368)
   )
  :flag-assert #x1501000174
  (:methods
    (manipy-method-20 () none 20)
    )
  )

(deftype part-spawner (process)
  ((root         trsqv                                    :offset-assert 128) ;; guessed by decompiler
   (part         sparticle-launch-control                 :offset-assert 132) ;; guessed by decompiler
   (sound        ambient-sound                            :offset-assert 136) ;; guessed by decompiler
   (mode         (pointer sparticle-launch-group)         :offset-assert 140) ;; guessed by decompiler
   (enable       symbol                                   :offset-assert 144) ;; guessed by decompiler
   (radius       meters                                   :offset-assert 148)
   (world-sphere sphere                           :inline :offset-assert 160)
   )
  :method-count-assert 16
  :size-assert         #xb0
  :flag-assert         #x10003000b0
  (:methods
    (part-spawner-method-14 () none 14)
    (part-spawner-method-15 () none 15)
    )
  )

(deftype part-tracker (process)
  ((root            trsqv                                  :offset-assert 128) ;; guessed by decompiler
   (mat             matrix                         :inline :offset-assert 144)
   (part            sparticle-launch-control               :offset-assert 208) ;; guessed by decompiler
   (callback        (function part-tracker vector)         :offset-assert 212) ;; guessed by decompiler
   (linger-callback (function part-tracker vector)         :offset-assert 216) ;; guessed by decompiler
   (duration        uint64                                 :offset-assert 224) ;; time-frame
   (linger-duration uint64                                 :offset-assert 232) ;; time-frame
   (start-time      time-frame                                 :offset-assert 240) ;; time-frame
   (target          uint64                                 :offset-assert 248) ;; handle
   (target-joint    int32                                  :offset-assert 256)
   (offset          vector                         :inline :offset-assert 272)
   (userdata        uint64                                 :offset-assert 288)
   (user-time       time-frame                     2       :offset-assert 296) ;; guessed by decompiler
   (user-vector     vector                         :inline :offset-assert 320) ;; two of these in jak1, seems like there's still space.
   (user-handle     uint32                         2       :offset 352) ;; guessed by decompiler
   )
  :method-count-assert 16
  :size-assert         #x168
  :flag-assert         #x1000f00168
  ;; field userdata uses ~A with a 64-bit load
  (:methods
    (part-tracker-method-14 () none 14)
    (part-tracker-method-15 () none 15)
    )
  )

(deftype lightning-tracker (process)
  ((root          basic           :offset-assert 128)
   (lightning     basic           :offset-assert 132)
   (callback      basic           :offset-assert 136)
   (duration      uint64          :offset-assert 144)
   (start-time    time-frame          :offset-assert 152)
   (offset0       vector  :inline :offset-assert 160)
   (offset1       vector  :inline :offset-assert 176)
   (target0       uint64          :offset-assert 192)
   (target1       uint64          :offset-assert 200)
   (target-joint0 int32           :offset-assert 208)
   (target-joint1 int32           :offset-assert 212)
   (sound         uint32          :offset-assert 216)
   (userdata      uint64          :offset-assert 224)
   (user-time     time-frame 2       :offset-assert 232)
   (user-vector   vector  :inline :offset-assert 256)
   (user-handle   handle 2       :offset 288)
   )
  :method-count-assert 17
  :size-assert         #x130
  :flag-assert         #x1100b00130
  ;; field userdata uses ~A with a 64-bit load
  (:methods
    (lightning-tracker-method-14 () none 14)
    (lightning-tracker-method-15 () none 15)
    (lightning-tracker-method-16 () none 16)
    )
  )

(deftype touch-tracker (process-drawable)
  ((duration     time-frame                     :offset-assert 200)
   (target       handle                         :offset-assert 208)
   (event        symbol                         :offset-assert 216) ;; guessed by decompiler
   (run-function (function object)              :offset-assert 220) ;; guessed by decompiler
   (callback     (function touch-tracker none)  :offset-assert 224) ;; guessed by decompiler
   (event-mode   basic                          :offset-assert 228)
   )
  :method-count-assert 21
  :size-assert         #xe8
  :flag-assert         #x15007000e8
  (:methods
    (touch-tracker-method-20 () none 20)
    )
  )

(deftype swingpole (process-drawable)
  ((edge-length meters             :offset-assert 200)
   (path-pos    float              :offset-assert 204)
   (joint-track int32              :offset-assert 208)
   (speed       meters             :offset-assert 212)
   (dir         vector     :inline :offset-assert 224)
   (sync        sync-eased :inline :offset-assert 240)
   )
  :method-count-assert 23
  :size-assert         #x11c
  :flag-assert         #x1700a0011c
  (:methods
    (swingpole-method-20 () none 20)
    (swingpole-method-21 () none 21)
    (swingpole-method-22 () none 22)
    )
  )

(deftype gui-query (structure)
  ((x-position        int32   :offset-assert 0)
   (y-position        int32   :offset-assert 4)
   (message           string  :offset-assert 8) ;; guessed by decompiler
   (decision          symbol  :offset-assert 12) ;; guessed by decompiler
   (only-allow-cancel symbol  :offset-assert 16) ;; guessed by decompiler
   (no-msg            string  :offset-assert 20) ;; guessed by decompiler
   (message-space     int32   :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (gui-query-method-9 () none 9) ;; (init! (_type_ string int int int symbol string) none 9)
    (gui-query-method-10 () none 10) ;; (get-response (_type_) symbol 10)
    )
  )

(deftype othercam (process)
  ((hand              handle               :offset-assert 128)
   (old-global-mask   process-mask         :offset-assert 136) ;; guessed by decompiler
   (mask-to-clear     process-mask         :offset-assert 140) ;; guessed by decompiler
   (cam-joint-index   int32                :offset-assert 144)
   (old-pos           vector       :inline :offset-assert 160)
   (old-mat-z         vector       :inline :offset-assert 176)
   (had-valid-frame   basic                :offset-assert 192)
   (border-value      basic                :offset-assert 196)
   (die?              symbol               :offset-assert 200) ;; guessed by decompiler
   (survive-anim-end? symbol               :offset-assert 204) ;; guessed by decompiler
   (spooling?         symbol               :offset-assert 208) ;; guessed by decompiler
   (fov               float                :offset-assert 212)
   )
  :method-count-assert 14
  :size-assert         #xd8
  :flag-assert         #xe006000d8
  )

(deftype explosion (process-drawable)
  ((start-time      time-frame  :offset-assert 200)
   (duration        uint32  :offset-assert 208)
   (linger-duration uint32  :offset-assert 212)
   (attack-id       uint32  :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:methods
    (explosion-method-20 () none 20)
    (explosion-method-21 () none 21)
    (explosion-method-22 () none 22)
    )
  )

(deftype explosion-init-params (structure)
  ((spawn-point     vector     :inline :offset-assert 0)
   (spawn-quat      quaternion :inline :offset-assert 16)
   (radius          float              :offset-assert 32)
   (group           basic              :offset-assert 36)
   (collide-with    collide-spec       :offset-assert 40)
   (penetrate-using penetrate          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  ;; Failed to read fields.
  (:methods
    (process-hidden-method-14 () none 14) ;; (die () _type_ :state 14)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trajectory-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype trajectory (structure)
  ((initial-position vector :inline :offset-assert 0)
   (initial-velocity vector :inline :offset-assert 16)
   (time             float          :offset-assert 32)
   (gravity          meters         :offset-assert 36)
   )
  :method-count-assert 18
  :size-assert         #x28
  :flag-assert         #x1200000028
  (:methods
    (compute-trans-at-time (_type_ float vector) vector 9)
    (compute-transv-at-time (_type_ float vector) vector 10)
    (compute-time-until-apex (_type_) float 11)
    (setup-from-to-duration! (_type_ vector vector float float) none 12)
    (setup-from-to-xz-vel! (_type_ vector vector float float) none 13)
    (setup-from-to-y-vel! (_type_ vector vector float float) none 14)
    (setup-from-to-height! (_type_ vector vector float float) none 15)
    (setup-from-to-duration-and-height! (_type_ vector vector float float) none 16)
    (debug-draw (_type_) none 17)
    )
  )

(declare-type collide-query structure)
(deftype impact-control (structure)
  ((process      (pointer process-drawable) :offset-assert 0)
   (radius       float             :offset-assert 4)
   (joint        int32             :offset-assert 8)
   (collide-with collide-spec      :offset-assert 12)
   (start-time   time-frame        :offset-assert 16)
   (trans        vector 2 :inline  :offset-assert 32)
   (dir          vector   :inline  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    (new (symbol type process-drawable int float collide-spec) _type_ 0)
    (initialize (_type_ process-drawable int float collide-spec) impact-control :behavior process 9)
    (update-from-cspace (_type_) none 10)
    (impact-control-method-11 (_type_ collide-query process pat-surface) float 11)
    )
  )

(deftype point-tracker (structure)
  ((trans        vector 2 :inline  :offset-assert 0))
  :method-count-assert 12
  :size-assert         #x20
  :flag-assert         #xc00000020
  (:methods
    (new (symbol type vector vector) _type_ 0)
    (initialize (_type_ vector vector) point-tracker 9)
    (point-tracker-method-10 (_type_ vector vector vector float) vector 10)
    (point-tracker-method-11 (_type_ vector vector vector float) vector 11)
    )
  )

(deftype combo-tracker (point-tracker)
  ((target          handle            :offset-assert 32)
   (move-start-time time-frame     :offset-assert 40)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  (:methods
    (combo-tracker-method-12 (_type_ vector vector process time-frame) combo-tracker 12)
    (combo-tracker-method-13 (_type_ handle vector float vector float) none 13)
    )
  )

(deftype traj2d-params (structure)
  ((x             float  :offset-assert 0)
   (y             float  :offset-assert 4)
   (gravity       float  :offset-assert 8)
   (initial-tilt  float  :offset-assert 12)
   (initial-speed float  :offset-assert 16)
   (time          float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype traj3d-params (structure)
  ((gravity          float          :offset-assert 0)
   (initial-tilt     float          :offset-assert 4)
   (initial-speed    float          :offset-assert 8)
   (time             float          :offset-assert 12)
   (src              vector :inline :offset-assert 16)
   (dest             vector :inline :offset-assert 32)
   (diff             vector :inline :offset-assert 48)
   (initial-velocity vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype cubic-curve (structure)
  ((mat matrix :inline :offset-assert 0)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (cubic-curve-method-9 (_type_ vector vector vector vector) none 9)
    (cubic-curve-method-10 (_type_ vector float) vector 10)
    (cubic-curve-method-11 (_type_ vector float) vector 11)
    (cubic-curve-method-12 (_type_ vector float) vector 12)
    (debug-draw-curve (_type_) none 13)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-target-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype control-info (collide-shape-moving)
  ((unknown-float00             float                                :offset 448)  ;; logic-target::target-print-stats
   (unknown-float01             float                                :offset 452)  ;; logic-target::target-print-stats
   (unknown-float02             float                                :offset 456)  ;; logic-target::target-print-stats
   (unknown-float03             float                                :offset 460)  ;; logic-target::target-print-stats
   (unknown-vector00            vector                       :inline :offset 480)  ;; logic-target::reverse-conversions
   (unknown-vector01            vector                       :inline :offset 496)  ;; logic-target::add-thrust
   (unknown-vector02            vector                       :inline :offset 512)  ;; logic-target::reset-target-state
   (unknown-quaternion00        quaternion                   :inline :offset 528)  ;; (anon-function 82 default-menu)
   (unknown-quaternion01        quaternion                   :inline :offset 544)  ;; logic-target::reset-target-state
   (unknown-float04             float                                :offset 560)  ;; logic-target::reset-target-state
   (unknown-float05             float                                :offset 564)  ;; logic-target::target-print-stats
   (unknown-float06             float                                :offset 572)  ;; logic-target::do-rotations2
   (unknown-float07             float                                :offset 576)  ;; logic-target::add-thrust
   (unknown-time-frame00        time-frame                           :offset 584)  ;; logic-target::do-rotations2
   (unknown-vector03            vector                       :inline :offset 592)  ;; logic-target::do-rotations2
   (unknown-quaternion02        quaternion                   :inline :offset 608)  ;; logic-target::flag-setup
   (unknown-quaternion03        quaternion                   :inline :offset 624)  ;; logic-target::flag-setup
   (unknown-vector-array00      vector                   128 :inline :offset 640)  ;; logic-target::target-log-trans
   (unknown-time-frame-array00  time-frame               128         :offset 2688) ;; logic-target::target-log-trans
   (unknown-word00              int32                                :offset 3712) ;; logic-target::target-log-trans
   (unknown-vector04            vector                       :inline :offset 3728) ;; logic-target::target-no-ja-move-post
   (unknown-vector05            vector                       :inline :offset 3744) ;; logic-target::target-no-ja-move-post
   (unknown-vector06            vector                       :inline :offset 3776) ;; logic-target::target-no-ja-move-post
   (unknown-dynamics00          dynamics                             :offset 3824) ;; logic-target::reset-target-state
   (unknown-surface00           surface                              :offset 3828) ;; logic-target::target-print-stats
   (unknown-surface01           surface                              :offset 3832) ;; board-h::want-to-board?
   (unknown-surface02           surface                              :offset 3836) ;; logic-target::build-conversions
   (unknown-time-frame02        time-frame                           :offset 3840) ;; logic-target::build-conversions
   (unknown-cpad-info00         cpad-info                            :offset 3848) ;; board-h::want-to-board?
   (unknown-float08             float                                :offset 3852) ;; logic-target::turn-to-vector
   (unknown-float09             float                                :offset 3856) ;; logic-target::turn-to-vector
   (unknown-float10             float                                :offset 3860) ;; logic-target::turn-to-vector
   (unknown-float11             float                                :offset 3864) ;; logic-target::turn-to-vector
   (unknown-vector07            vector                       :inline :offset 3872) ;; logic-target::turn-to-vector
   (unknown-vector08            vector                       :inline :offset 3888) ;; logic-target::turn-to-vector
   (unknown-vector09            vector                       :inline :offset 3904) ;; logic-target::turn-to-vector
   (unknown-vector10            vector                       :inline :offset 3920) ;; logic-target::turn-to-vector
   (unknown-vector-array01      vector                   7   :inline :offset 3936) ;; logic-target::turn-to-vector
   (unknown-vector12            vector                       :inline :offset 4064) ;; logic-target::read-pad
   (unknown-vector13            vector                       :inline :offset 4080) ;; logic-target::read-pad
   (unknown-float12             float                                :offset 4096) ;; logic-target::read-pad
   (unknown-float13             float                                :offset 4100) ;; logic-target::read-pad
   (unknown-dword01             int64                                :offset 4104) ;; logic-target::read-pad
   (unknown-matrix00            matrix                       :inline :offset 4112) ;; logic-target::build-conversions
   (unknown-matrix01            matrix                       :inline :offset 4176) ;; logic-target::reverse-conversions
   (unknown-matrix02            matrix                       :inline :offset 4240) ;; logic-target::joint-points
   (unknown-vector14            vector                       :inline :offset 4320) ;; logic-target::pre-collide-setup
   (unknown-vector15            vector                       :inline :offset 4336) ;; logic-target::reset-target-state
   (unknown-matrix03            matrix                       :inline :offset 4352) ;; logic-target::read-pad
   (unknown-dword02             int64                                :offset 4416) ;; logic-target::read-pad
   (unknown-vector16            vector                       :inline :offset 4432) ;; logic-target::target-real-post
   (unknown-float14             float                                :offset 4448) ;; logic-target::target-real-post
   (unknown-float15             float                                :offset 4456) ;; logic-target::target-real-post
   (unknown-word01              int32                                :offset 4460) ;; logic-target::joint-points
   (unknown-vector17            vector                       :inline :offset 4464) ;; logic-target::pre-collide-setup
   (unknown-vector18            vector                       :inline :offset 4480) ;; logic-target::pre-collide-setup
   (unknown-time-frame03        time-frame                           :offset 4496) ;; logic-target::pre-collide-setup
   (unknown-time-frame04        time-frame                           :offset 4504) ;; logic-target::pre-collide-setup
   (unknown-vector19            vector                       :inline :offset 4512) ;; logic-target::build-conversions
   (unknown-vector20            vector                       :inline :offset 4528) ;; logic-target::build-conversions
   (unknown-vector21            vector                       :inline :offset 4544) ;; logic-target::target-print-stats
   (unknown-float16             float                                :offset 4548) ;; logic-target::target-print-stats
   (unknown-vector22            vector                       :inline :offset 4560) ;; logic-target::target-update-ik
   (unknown-vector23            vector                       :inline :offset 4576) ;; logic-target::flag-setup
   (unknown-time-frame05        time-frame                           :offset 4624) ;; board-h::want-to-board?
   (unknown-float17             float                                :offset 4636) ;; logic-target::target-print-stats
   (unknown-float18             float                                :offset 4640) ;; logic-target::target-print-stats
   (unknown-float19             float                                :offset 4644) ;; logic-target::target-compute-slopes
   (unknown-float20             float                                :offset 4648) ;; logic-target::target-compute-slopes
   (unknown-time-frame06        time-frame                           :offset 4656) ;; board-h::want-to-board?
   (unknown-time-frame07        time-frame                           :offset 4672) ;; logic-target::turn-around?
   (unknown-pat-surface00       pat-surface                          :offset 4680) ;; logic-target::target-print-stats
   (unknown-vector24            vector                       :inline :offset 4688) ;; logic-target::add-thrust
   (unknown-vector25            vector                       :inline :offset 4720) ;; logic-target::wall-hide?
   (unknown-handle01            handle                               :offset 4768) ;; logic-target::reset-target-state
   (unknown-pat-surface01       pat-surface                          :offset 4776) ;; logic-target::target-print-stats
   (unknown-float21             float                                :offset 4780) ;; logic-target::target-compute-slopes
   (unknown-float22             float                                :offset 4784) ;; logic-target::target-compute-slopes
   (unknown-float23             float                                :offset 4788) ;; logic-target::target-compute-slopes
   (unknown-float24             float                                :offset 4792) ;; logic-target::target-compute-slopes
   (unknown-float25             float                                :offset 4796) ;; logic-target::target-compute-slopes
   (unknown-time-frame08        time-frame                           :offset 4816) ;; logic-target::turn-around?
   (unknown-vector26            vector                       :inline :offset 4928) ;; logic-target::target-add-slide-factor
   (unknwon-vector27            vector                       :inline :offset 4976) ;; logic-target::add-thrust
   (unknown-float26             float                                :offset 4992) ;; logic-target::wall-hide?
   (unknown-time-frame09        time-frame                           :offset 5000) ;; logic-target::add-thrust
   (unknown-sphere-array00      collide-shape-prim-sphere 10         :offset 5016) ;; (method 28 target)
   (unknown-float27             float                                :offset 5132) ;; logic-target::target-print-stats
   (unknown-float28             float                                :offset 5136) ;; logic-target::target-print-stats
   (unknown-float29             float                                :offset 5140) ;; logic-target::target-print-stats
   (unknown-vector28            vector                       :inline :offset 5152) ;; logic-target::joint-points
   (unknown-vector29            vector                       :inline :offset 5168) ;; logic-target::joint-points
   (unknown-vector30            vector                       :inline :offset 5184) ;; logic-target::joint-points
   (unknown-vector31            vector                       :inline :offset 5200) ;; logic-target::joint-points
   (unknown-vector32            vector                       :inline :offset 5216) ;; logic-target::joint-points
   (unknown-vector33            vector                       :inline :offset 5232) ;; logic-target::joint-points
   (unknown-float31             float                                :offset 5256) ;; logic-target::joint-points
   (unknown-vector-array02      vector                    15 :inline :offset 5264) ;; logic-target::turn-around?
   (unknown-float32             float                                :offset 5520) ;; logic-target::turn-around?
   (unknown-word02              int32                                :offset 5524) ;; logic-target::turn-around?
   (unknown-float33             float                                :offset 5528) ;; logic-target::target-compute-pole
   (unknown-vector34            vector                       :inline :offset 5536) ;; logic-target::target-compute-pole
   (unknown-vector35            vector                       :inline :offset 5568) ;; logic-target::target-compute-pole
   (unknown-time-frame10        time-frame                           :offset 5584) ;; logic-target::target-compute-edge
   (unknown-time-frame11        time-frame                           :offset 5592) ;; logic-target::target-compute-edge
   (unknown-handle00            handle                               :offset 5608) ;; logic-target::reset-target-state
   (unknown-symbol00            symbol                               :offset 5620) ;; logic-target::target-compute-pole
   (unknown-cspace02            cspace                       :inline :offset 5824) ;; logic-target::joint-points
   (unknown-vector36            vector                       :inline :offset 5904) ;; logic-target::target-print-stats
   (unknown-float34             float                                :offset 5908) ;; logic-target::target-print-stats
   (unknown-vector37            vector                       :inline :offset 5920) ;; logic-target::target-print-stats
   (unknown-float35             float                                :offset 5924) ;; logic-target::target-print-stats
   (unknown-time-frame12        time-frame                           :offset 5944) ;; board-h::want-to-board?
   (unknown-dword05             uint64                               :offset 6008) ;; (method 28 target)
   (unknown-symbol01            symbol                               :offset 6144) ;; logic-target::post-flag-setup
   (unknown-halfword00          uint16                               :offset 6188) ;; logic-target::target-no-move-post
   (history-length              uint16                               :offset 6190) ;; logic-target::draw-history
   (unknown-word03              int32                                :offset 6192) ;; logic-target::target-real-post
   (unknown-time-frame13        time-frame                           :offset 6200) ;; logic-target::post-flag-setup
   (unknown-time-frame14        time-frame                           :offset 6208) ;; logic-target::post-flag-setup
   (unknown-time-frame15        time-frame                           :offset 6216) ;; logic-target::post-flag-setup
   (unknown-time-frame16        time-frame                           :offset 6224) ;; logic-target::post-flag-setup
   (unknown-time-frame17        time-frame                           :offset 6248) ;; logic-target::target-calc-camera-pos
   (unknown-time-frame18        time-frame                           :offset 6256) ;; logic-target::target-calc-camera-pos
   (unknown-dword06             int64                                :offset 6264) ;; logic-target::reset-target-state
   (unknown-sound-id00          sound-id                             :offset 6240) ;; (method 28 target)
   (unknown-sound-id01          sound-id                             :offset 6244) ;; (method 28 target)
   (unknown-sound-id02          sound-id                             :offset 6292) ;; (method 28 target)
   (unknown-word04              int32                                :offset 6300) ;; (method 28 target)
   (unknown-word05              int32                                :offset 6304) ;; (method 28 target)
   (unknown-word06              int32                                :offset 6308) ;; (method 28 target)
   (unknown-word07              int32                                :offset 6312) ;; (method 28 target)
   (unknown-time-frame19        time-frame                           :offset 6320) ;; logic-target::flag-setup
   (unknown-time-frame20        time-frame                           :offset 6328) ;; logic-target::flag-setup
   (unknown-dword07             int64                                :offset 6336) ;; logic-target::flag-setup
   (unknown-time-frame21        time-frame                           :offset 6368) ;; board-h::want-to-board?
   (unknown-quaternion04        quaternion                   :inline :offset 6384) ;; logic-target::flag-setup
   (unknown-time-frame22        time-frame                           :offset 6400) ;; logic-target::wall-hide?
   (unknown-time-frame23        time-frame                           :offset 6408) ;; logic-target::wall-hide?
   (pad                         uint8                                :offset #x190f)
   )
  :flag-assert #x4400001910
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-touch-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype touching-prim (structure)
  ((cprim    collide-shape-prim         :offset-assert 0) ;; guessed by decompiler
   (has-tri? symbol                     :offset-assert 4) ;; guessed by decompiler
   (tri      collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(deftype touching-prims-entry (structure)
  ((next       touching-prims-entry         :offset-assert 0)
   (prev       touching-prims-entry         :offset-assert 4)
   (allocated? symbol                       :offset-assert 8) ;; guessed by decompiler
   (u          float                        :offset-assert 12)
   (prim1      touching-prim        :inline :offset-assert 16)
   (prim2      touching-prim        :inline :offset-assert 128)
   )
  :method-count-assert 12
  :size-assert         #xe8
  :flag-assert         #xc000000e8
  (:methods
    (touching-prims-entry-method-9 () none 9) ;; (get-touched-prim (_type_ trsqv touching-shapes-entry) collide-shape-prim 9)
    (touching-prims-entry-method-10 () none 10) ;; (dummy-10 () none 10)
    (touching-prims-entry-method-11 () none 11) ;; (get-middle-of-bsphere-overlap (_type_ vector) vector 11)
    )
  )

(deftype touching-prims-entry-pool (structure)
  ((head  touching-prims-entry    :offset-assert 0)
   (nodes touching-prims-entry 64 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x3c10
  :flag-assert         #xd00003c10
  (:methods
    (new (symbol type) _type_ 0)
    (touching-prims-entry-pool-method-9 () none 9) ;; (alloc-node (_type_) touching-prims-entry 9)
    (touching-prims-entry-pool-method-10 () none 10) ;; (get-free-node-count (_type_) int 10)
    (init-list! (_type_) none 11)
    (touching-prims-entry-pool-method-12 () none 12) ;; (free-node (_type_ touching-prims-entry) touching-prims-entry 12)
    )
  )

(deftype touching-shapes-entry (structure)
  ((cshape1   collide-shape         :offset-assert 0) ;; guessed by decompiler
   (cshape2   collide-shape         :offset-assert 4) ;; guessed by decompiler
   (resolve-u int8                  :offset-assert 8)
   (head      touching-prims-entry  :offset-assert 12)
   (handle1   uint64                :offset-assert 16)
   (handle2   uint64                :offset-assert 24)
   )
  :pack-me
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (get-head (_type_) touching-prims-entry 9) ;; (dummy-9 (_type_) none 9)
    (get-next (_type_ touching-shapes-entry) touching-prims-entry 10) ;; (get-touched-shape (_type_ collide-shape) collide-shape 10)
    (touching-shapes-entry-method-11 () none 11) ;; (dummy-11 () none 11)
    (touching-shapes-entry-method-12 () none 12) ;; (prims-touching? (_type_ collide-shape-moving uint) touching-prims-entry 12)
    (touching-shapes-entry-method-13 () none 13) ;; (prims-touching-action? (_type_ collide-shape collide-action collide-action) touching-prims-entry 13)
    (touching-shapes-entry-method-14 () none 14) ;; (dummy-14 () none 14)
    )
  )

(deftype touching-list (structure)
  ((num-touching-shapes int32                    :offset-assert 0)
   (resolve-u           int8                     :offset-assert 4)
   (touching-shapes     touching-shapes-entry 32 :inline :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x408
  :flag-assert         #xe00000408
  (:methods
    (new (symbol type) _type_ 0)
    (touching-list-method-9 () none 9) ;; (add-touching-prims (_type_ collide-shape-prim collide-shape-prim float collide-tri-result collide-tri-result) none 9)
    (free-nodes (_type_) none 10) ;; (dummy-10 () none 10)
    (touching-list-method-11 () none 11) ;; (update-from-step-size (_type_ float) none 11)
    (send-events-for-touching-shapes (_type_) none 12)
    (touching-list-method-13 () none 13) ;; (get-shapes-entry (_type_ collide-shape collide-shape) touching-shapes-entry 13)
    )
  )

(define-extern *touching-prims-entry-pool* touching-prims-entry-pool)
(define-extern *touching-list* touching-list)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-edge-grab-h            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pilot-edge-grab-info (structure)
  ((local-pos vector :inline :offset-assert 0)
   (local-dir vector :inline :offset-assert 16)
   (handle    handle         :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype edge-grab-info (structure)
  ((world-vertex               vector         8     :inline :offset-assert 0) ;; guessed by decompiler
   (local-vertex               vector         8     :inline :offset-assert 128) ;; guessed by decompiler
   (status                     uint64                       :offset-assert 256)
   (actor-cshape-prim-offset   int32                        :offset-assert 264)
   (actor-handle               uint64                       :offset-assert 272) ;; handle
   (hanging-matrix             matrix               :inline :offset-assert 288)
   (edge-vertex                vector         2     :inline :offset 0) ;; guessed by decompiler
   (center-hold                vector               :inline :offset 32)
   (tri-vertex                 vector         3     :inline :offset 48) ;; guessed by decompiler
   (adjacent-edge-left-vertex  vector               :inline :offset 96)
   (adjacent-edge-right-vertex vector               :inline :offset 112)
   (left-hand-hold             vector               :inline :offset-assert 352)
   (right-hand-hold            vector               :inline :offset-assert 368)
   (center-hold-old            vector               :inline :offset-assert 384)
   (edge-tri-pat               uint32                       :offset-assert 400)
   (found-edge?                symbol                       :offset-assert 404)
   (pilot-edge-grab?           symbol                       :offset-assert 408)
   (pilot-edge-grab            pilot-edge-grab-info :inline :offset-assert 416)
   (pilot-start-grab-pos       vector               :inline :offset-assert 464)
   (pilot-grab-interp          float                        :offset-assert 480)
   )
  :method-count-assert 11
  :size-assert         #x1e4
  :flag-assert         #xb000001e4
  (:methods
    (edge-grab-info-method-9 (_type_) symbol 9) ;; (dummy-9 (_type_) symbol 9)
    (debug-draw (_type_) symbol 10)
    )
  )

(declare-type collide-cache-tri structure)
(deftype collide-edge-tri (structure)
  ((ctri   collide-cache-tri         :offset-assert 0) ;; guessed by decompiler
   (normal vector            :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-edge-edge (structure)
  ((ignore        basic                         :offset-assert 0)
   (etri          collide-edge-tri              :offset-assert 4)
   (vertex-ptr    (inline-array vector) 2       :offset-assert 8) ;; guessed by decompiler
   (outward       vector                :inline :offset-assert 16)
   (edge-vec-norm vector                :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (collide-edge-edge-method-9 () none 9)
    )
  )

(deftype collide-edge-hold-item (structure)
  ((next       collide-edge-hold-item         :offset-assert 0)
   (rating     float                          :offset-assert 4)
   (split      int8                           :offset-assert 8)
   (edge       collide-edge-edge              :offset-assert 12)
   (center-pt  vector                 :inline :offset-assert 16)
   (outward-pt vector                 :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-edge-hold-list (structure)
  ((num-allocs   uint32                    :offset-assert 0)
   (num-attempts uint32                    :offset-assert 4)
   (head         collide-edge-hold-item    :offset-assert 8)
   (items        collide-edge-hold-item 32 :inline :offset-assert 16) ;; guessed by decompiler
   (attempts     qword                  32 :inline :offset-assert 1552) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x810
  :flag-assert         #xb00000810
  (:methods
    (collide-edge-hold-list-method-9 () none 9) ;; (debug-draw (_type_) object 9)
    (collide-edge-hold-list-method-10 () none 10) ;; (add-to-list! (_type_ collide-edge-hold-item) none 10)
    )
  )

(deftype collide-edge-spec (structure)
  ((split-dists                  float        2       :offset-assert 0)
   (outward-offset               vector       :inline :offset-assert 16)
   (flags                        uint64               :offset-assert 32)
   (ignore-pat                   pat-surface          :offset-assert 40)
   (max-dist-sqrd-to-outward-pt  float                :offset-assert 44)
   (max-dir-cosa-delta           float                :offset-assert 48)
   (max-dir-cosa-player          float                :offset-assert 52)
   (touching-segment             symbol               :offset-assert 56)
   (local-cache-fill-box         bounding-box :inline :offset-assert 64)
   (local-within-reach-box       bounding-box :inline :offset-assert 96)
   (local-player-spheres         sphere    12 :inline :offset 128)
   (local-player-hanging-spheres sphere    6  :inline :offset 128)
   (local-player-leap-up-spheres sphere    6  :inline :offset 224)
   )
  :method-count-assert 9
  :size-assert         #x140
  :flag-assert         #x900000140
  )

(declare-type collide-cache basic)

(deftype collide-edge-work (structure)
  ((ccache                       collide-cache                  :offset-assert 0) ;; guessed by decompiler
   (cshape                       collide-shape                  :offset-assert 4) ;; guessed by decompiler
   (num-verts                    uint32                         :offset-assert 8)
   (num-edges                    uint32                         :offset-assert 12)
   (num-tris                     uint32                         :offset-assert 16)
   (cache-fill-box               bounding-box           :inline :offset-assert 32)
   (within-reach-box             bounding-box           :inline :offset-assert 64)
   (within-reach-box4w           bounding-box4w         :inline :offset-assert 96)
   (search-pt                    vector                 :inline :offset-assert 128)
   (search-dir-vec               vector                 :inline :offset-assert 144)
   (world-player-spheres         sphere                 12 :inline      :offset-assert 160) ;; guessed by decompiler
   (world-player-hanging-spheres sphere                 6  :inline      :offset 160) ;; guessed by decompiler
   (world-player-leap-up-spheres sphere                 6  :inline      :offset 256) ;; guessed by decompiler
   (spec                         collide-edge-spec      :inline :offset-assert 352)
   (process                      uint32                         :offset-assert 672)
   (verts                        vector                 64 :inline    :offset-assert 688) ;; guessed by decompiler
   (edges                        collide-edge-edge      96 :inline    :offset-assert 1712) ;; guessed by decompiler
   (tris                         collide-edge-tri       48 :inline    :offset-assert 6320) ;; guessed by decompiler
   (hold-list                    collide-edge-hold-list :inline :offset-assert 7856)
   )
  :method-count-assert 21
  :size-assert         #x26c0
  :flag-assert         #x15000026c0
  (:methods
    (collide-edge-work-method-9 () none 9) ;; (search-for-edges (_type_ collide-edge-hold-list) symbol 9)
    (collide-edge-work-method-10 () none 10) ;; (debug-draw-edges (_type_) object 10)
    (collide-edge-work-method-11 () none 11) ;; (debug-draw-tris (_type_) none 11)
    (collide-edge-work-method-12 () none 12) ;; (debug-draw-sphere (_type_) symbol 12)
    (collide-edge-work-method-13 () none 13) ;; (compute-center-point! (_type_ collide-edge-edge vector) float 13)
    (collide-edge-work-method-14 () none 14) ;; (dummy-14 (_type_ vector vector int) float 14)
    (collide-edge-work-method-15 () none 15) ;; (find-grabbable-edges! (_type_) none 15)
    (collide-edge-work-method-16 () none 16) ;; (find-grabbable-tris! (_type_) none 16)
    (collide-edge-work-method-17 () none 17) ;; (should-add-to-list? (_type_ collide-edge-hold-item collide-edge-edge) symbol 17)
    (collide-edge-work-method-18 () none 18) ;; (find-best-grab! (_type_ collide-edge-hold-list edge-grab-info) symbol 18)
    (collide-edge-work-method-19 () none 19) ;; (check-grab-for-collisions (_type_ collide-edge-hold-item edge-grab-info) symbol 19)
    (collide-edge-work-method-20 () none 20)
    )
  )

(define-extern *collide-edge-spec* collide-edge-spec)
(define-extern *collide-edge-work* collide-edge-work)
(define-extern *edge-grab-info* edge-grab-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-drawable-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cspace-by-name-no-fail (function process-drawable string cspace))
(define-extern cspace-index-by-name-no-fail (function process-drawable string int))
(define-extern num-func-none (function joint-control-channel float float float float :behavior process))
(define-extern num-func-+! (function joint-control-channel float float float float :behavior process))
(define-extern num-func--! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-loop! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-loop-speedless! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-seek! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-blend-in! (function joint-control-channel float float float float :behavior process))
(define-extern joint-channel-float-delete! (function joint-control-channel none))
(define-extern num-func-interp-play! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-interp1-play! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-chan (function joint-control-channel float float float float :behavior process))
(define-extern num-func-identity (function joint-control-channel float float float float :behavior process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-focusable              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum focus-status
  :bitfield #t
  :type uint32
  (disable 0) ;; if set, all collide checks fail
  (dead 1)    ;; if set, all collide checks fail
  (ignore 2)
  (inactive 3)
  (dangerous 4)
  (in-air 5)
  (hit 6)
  (grabbed 7)
  (in-head 8)
  (touch-water 9)
  (on-water 10)
  (under-water 11)
  (edge-grab 12)
  (pole 13)
  (pilot-riding 14)
  (flut 15)
  (tube 16)
  (ice 17)
  (board 18)
  (gun 19)
  (pilot 20) ;; also racer?
  (mech 21)
  (dark 22)
  (rail 23)
  (halfpipe 24)
  (carry 25)
  (super 26)
  (shooting 27)
  (indax 28)
  (arrestable 29)
  (teleporting 30)
  (fs31 31)
  )

(deftype process-focusable (process-drawable)
  ((focus-status focus-status :offset-assert 200)
   )
  :method-count-assert 27
  :size-assert         #xcc
  :flag-assert         #x1b005000cc
  (:methods
    (get-trans (_type_ int) vector 20)
    (get-quat (_type_) quaternion 21)
    (get-transv (_type_) vector 22)
    (process-focusable-method-23 (_type_) none 23)
    (process-focusable-method-24 (_type_) none 24)
    (process-focusable-method-25 (_type_) int 25)
    (process-focusable-method-26 (_type_) none 26)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-taskable-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype process-taskable (process-focusable)
  ((task              basic                   :offset-assert 204)
   (ambient           ambient-control :inline :offset-assert 208)
   (neck-joint-index  int32                   :offset-assert 224)
   (talk-message      game-text-id            :offset-assert 228) ;; guessed by decompiler
   (bounce-away       symbol                  :offset-assert 232) ;; guessed by decompiler
   (will-talk         symbol                  :offset-assert 236) ;; guessed by decompiler
   (look-at-me        symbol                  :offset-assert 240)
   (hide-during-movie symbol                  :offset-assert 244)
   (talk-distance     meters                  :offset-assert 248)
   (talk-height       meters                  :offset-assert 252)
   (last-talk         time-frame              :offset-assert 256) ;; time-frame
   (want-to-say       uint64                  :offset-assert 264)
   (birth-time        time-frame              :offset-assert 272)
   (slave             handle                  :offset-assert 280)
   )
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    (process-taskable-method-27 () none 27) ;; (play-anim () _type_ :state 27)
    (process-taskable-method-28 () none 28) ;; (hidden () _type_ :state 28)
    (process-taskable-method-29 () none 29) ;; (be-clone (handle) _type_ :state 29)
    (process-taskable-method-30 () none 30) ;; (idle () _type_ :state 30)
    (process-taskable-method-31 () none 31) ;; (get-art-elem (_type_) art-element 31)
    (process-taskable-method-32 () none 32) ;; (play-anim! (_type_ symbol) basic 32)
    (process-taskable-method-33 () none 33) ;; (dummy-33 (_type_) none 33)
    (process-taskable-method-34 () none 34) ;; (get-accept-anim (_type_ symbol) spool-anim 34)
    (process-taskable-method-35 () none 35) ;; (push-accept-anim (_type_) none 35)
    (process-taskable-method-36 () none 36) ;; (get-reject-anim (_type_ symbol) spool-anim 36)
    (process-taskable-method-37 () none 37) ;; (push-reject-anim (_type_) none 37)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; focus                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; skipped : handle creation is different, want to grab more.
;; otherwise looks good

(deftype focus (structure)
  ((handle       handle        :offset-assert 0)
   (collide-with collide-spec  :offset-assert 8)
   )
  :method-count-assert 13
  :size-assert         #xc
  :flag-assert         #xd0000000c
  (:methods
    (clear-focused (_type_) none 9)
    (collide-check? (_type_ process-focusable) object 10)
    (reset-to-collide-spec (_type_ collide-spec) none 11)
    (try-update-focus (_type_ process-focusable) symbol 12)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; effect-control-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum effect-control-flag
  :type uint32
  :bitfield #t
  (ecf0)
  (ecf1)
  (ecf2)
  (ecf3)
  (ecf4)
  (ecf5)
  (ecf6)
  (ecf7)
  (ecf8)
  (ecf9)
  (ecf10)
  (ecf11)
  (ecf12)
  (ecf13)
  (ecf14)
  (ecf15)
  (ecf16)
  (ecf17)
  (ecf18)
  (ecf19)
  (ecf20)
  (ecf21)
  (ecf22)
  (ecf23)
  (ecf24)
  (ecf25)
  (ecf26)
  (ecf27)
  (ecf28)
  (ecf29)
  (ecf30)
  (ecf31)
  )

(deftype effect-control (basic)
  ((process          process-drawable    :offset-assert 4) ;; guessed by decompiler
   (flags            effect-control-flag :offset-assert 8)
   (last-frame-group art-joint-anim      :offset-assert 12) ;; guessed by decompiler
   (last-frame-num   float               :offset-assert 16)
   (channel-offset   int32               :offset-assert 20)
   (res              res-lump            :offset-assert 24) ;; guessed by decompiler
   (name             (pointer res-tag)   :offset-assert 28) ;; guessed by decompiler
   (param            uint32              :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x24
  :flag-assert         #xf00000024
  (:methods
    (new (symbol type process-drawable) _type_ 0)
    (effect-control-method-9 () none 9) ;; (TODO-RENAME-9 (_type_) none 9)
    (effect-control-method-10 () none 10) ;; (dummy-10 (_type_ symbol float int) object 10)
    (effect-control-method-11 () none 11) ;; (dummy-11 (_type_ symbol float int basic pat-surface) none 11)
    (effect-control-method-12 () none 12) ;; (dummy-12 (_type_ symbol float int basic sound-name) int 12)
    (set-channel-offset! (_type_ int) none 13)
    (effect-control-method-14 () none 14) ;; (TODO-RENAME-14 (_type_ float float float) none 14)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-frag-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-frag-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-frag-mesh (basic)
  ((packed-data     uint32           :offset-assert 4)
   (pat-array       uint32           :offset-assert 8)
   (strip-data-len  uint16           :offset-assert 12)
   (poly-count      uint16           :offset-assert 14)
   (base-trans      vector4w :inline :offset-assert 16) ;; vector :inline
   (vertex-count    uint8            :offset 28)
   (vertex-data-qwc uint8            :offset 29)
   (total-qwc       uint8            :offset 30)
   (unused          uint8            :offset 31)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-fragment (drawable)
  ((mesh        collide-frag-mesh  :offset 8) ;; guessed by decompiler
   (collide-new basic              :offset 12)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    )
  )

(deftype drawable-inline-array-collide-fragment (drawable-inline-array)
  ((data collide-fragment 1 :inline :offset-assert 32) ;; guessed by decompiler
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  (:methods
    )
  )

(deftype drawable-tree-collide-fragment (drawable-tree)
  ()
  :flag-assert #x1100000020
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-hash-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-hash-scratch (structure)
  ((collidable-bits uint128 128 :offset-assert 0)
   (poly-bits       uint64 2   :offset 0)
   (id-bits         uint32 512  :offset 0)
   (tris            uint32      :offset-assert 2048)
   )
  :method-count-assert 9
  :size-assert         #x804
  :flag-assert         #x900000804
  )

(deftype collide-hash-bucket (structure)
  ((index int16  :offset-assert 0)
   (count int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-item (structure)
  ((id         uint32  :offset-assert 0)
   (collidable basic   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-hash-poly (structure)
  ((data        uint8   4 :offset-assert 0 :score -1)
   (vert-index0 uint8     :offset 0)
   (vert-index1 uint8     :offset 1)
   (vert-index2 uint8     :offset 2)
   (pat-index   uint8     :offset 3)
   (word        uint32    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment-stats (structure)
  ((num-verts  uint16  :offset-assert 0)
   (num-polys  uint8   :offset-assert 2)
   (poly-count uint8   :offset-assert 3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment (drawable)
  ((num-buckets     uint16                              :offset 4)
   (num-indices     uint16                              :offset 6)
   (pat-array       uint32                              :offset 8)
   (bucket-array    uint32                              :offset 12)
   (grid-step       vector                      :inline :offset-assert 32)
   (bbox            bounding-box                :inline :offset-assert 48)
   (bbox4w          bounding-box4w              :inline :offset-assert 80)
   (axis-scale      vector                      :inline :offset 64)
   (avg-extents     vector                      :inline :offset 80)
   (dimension-array uint32                      4       :offset 44) ;; ?
   (stats           collide-hash-fragment-stats :inline :offset 60)
   (num-verts       uint16                              :offset 60)
   (num-polys       uint8                               :offset 62)
   (poly-count      uint8                               :offset 63)
   (poly-array      uint32                              :offset 76)
   (vert-array      uint32                              :offset 92)
   (index-array     uint32                              :offset 108)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  (:methods
    )
  )

(deftype collide-hash-fragment-array (array)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-hash (drawable)
  ((num-ids         uint16                 :offset 4)
   (id-count        uint16                 :offset 6)
   (num-buckets     uint32                 :offset 8)
   (qwc-id-bits     uint32                 :offset 12)
   (grid-step       vector         :inline :offset 16)
   (bbox            bounding-box   :inline :offset-assert 32)
   (bbox4w          bounding-box4w :inline :offset-assert 64)
   (axis-scale      vector         :inline :offset 48)
   (avg-extents     vector         :inline :offset 64)
   (bucket-array    uint32                 :offset 44)
   (item-array      uint32                 :offset 60)
   (dimension-array uint32         3       :offset 76) ;; ?
   (num-items       uint32                 :offset 92)
   )
  :method-count-assert 17
  :size-assert         #x60
  :flag-assert         #x1100000060
  (:methods
    )
  )

(define-extern *collide-list-boxes* object)
(define-extern *collide-hash-fragments* object)
(define-extern *collide-hash-fragments-tfrag* object)
(define-extern *collide-hash-fragments-instance* object)
(define-extern *already-printed-exeeded-max-cache-tris* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; chain-physics-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype chain-physics-setup (structure)
  ((joint-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype chain-physics-joint (structure)
  ((position  vector :inline :offset-assert 0)
   (velocity  vector :inline :offset-assert 16)
   (old-x     vector :inline :offset-assert 32)
   (joint-mod joint-mod      :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype chain-physics (basic)
  ((chain-joints          chain-physics-joint 20 :inline      :offset-assert 16)
   (num-joints            uint8           :offset-assert 1296)
   (root-joint-index      uint8           :offset-assert 1297)
   (joint-length          float           :offset-assert 1300)
   (gravity               vector  :inline :offset-assert 1312)
   (gravity-target        vector  :inline :offset-assert 1328)
   (stretch-vel           float           :offset-assert 1344)
   (stretch-vel-parallel  float           :offset-assert 1348)
   (compress-vel          float           :offset-assert 1352)
   (compress-vel-parallel float           :offset-assert 1356)
   (negate-y              basic           :offset-assert 1360)
   (axial-slop            float           :offset-assert 1364)
   (maximum-stretch       float           :offset-assert 1368)
   (turn-off-start        time-frame      :offset-assert 1376)
   (turn-off-duration     time-frame      :offset-assert 1384)
   )
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  (:methods
    (initialize-chain-joints (_type_) symbol 9)
    (turn-off (_type_ time-frame) none :behavior process 10)
    (update (_type_ process-drawable) none :behavior process 11)
    (gravity-update (_type_) none 12)
    (apply-gravity (_type_ vector int) none :behavior process 13)
    (chain-physics-method-14 (_type_ vector int) none 14)
    (clamp-length (_type_ vector vector) vector 15)
    (chain-physics-method-16 (_type_ int) float 16)
    (chain-physics-method-17 (_type_ vector) none 17)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; projectile-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum projectile-options
  :type uint64
  :bitfield #t
  )

(deftype projectile (process-drawable)
  ((starting-pos    vector                     :inline :offset-assert 208)
   (starting-dir    vector                     :inline :offset-assert 224)
   (target-pos      vector                     :inline :offset-assert 240)
   (base-target-pos vector                     :inline :offset-assert 256)
   (pre-move-transv vector                     :inline :offset-assert 272)
   (timeout         time-frame                         :offset-assert 288)
   (spawn-time      time-frame                         :offset-assert 296)
   (options         projectile-options                 :offset-assert 304)
   (last-target     handle                             :offset-assert 312)
   (notify-handle   handle                             :offset-assert 320)
   (owner-handle    handle                             :offset-assert 328)
   (ignore-handle   handle                             :offset-assert 336)
   (update-velocity (function projectile none)         :offset-assert 344) ;; guessed by decompiler
   (move            basic                              :offset-assert 348)
   (pick-target     basic                              :offset-assert 352)
   (max-speed       float                              :offset-assert 356)
   (old-dist        float                      16      :offset-assert 360) ;; guessed by decompiler
   (old-dist-count  int32                              :offset-assert 424)
   (hits            int32                              :offset-assert 428)
   (max-hits        int32                              :offset-assert 432)
   (tween           float                              :offset-assert 436)
   (attack-mode     symbol                             :offset-assert 440) ;; guessed by decompiler
   (attack-id       uint32                             :offset-assert 444)
   (damage          float                              :offset-assert 448)
   (charge-level    float                              :offset-assert 452)
   (sound-id        sound-id                           :offset-assert 456) ;; guessed by decompiler
   (stop-speed      meters                             :offset-assert 460)
   (invinc-time     time-frame                         :offset-assert 464)
   )
  :method-count-assert 40
  :size-assert         #x1d8
  :flag-assert         #x28016001d8
  (:methods
    (projectile-method-20 () none 20) ;; (projectile-die () _type_ :state 20)
    (projectile-method-21 () none 21) ;; (projectile-dissipate () _type_ :state 21)
    (projectile-method-22 () none 22) ;; (projectile-impact () _type_ :state 22)
    (projectile-method-23 () none 23) ;; (projectile-moving () _type_ :state 23)
    (projectile-method-24 () none 24) ;; (dummy-24 (_type_) none 24)
    (projectile-method-25 () none 25) ;; (dummy-25 (_type_) none 25)
    (projectile-method-26 () none 26) ;; (dummy-26 (_type_) none 26)
    (projectile-method-27 () none 27) ;; (dummy-27 (_type_) none 27)
    (projectile-method-28 () none 28) ;; (dummy-28 (_type_) none 28)
    (projectile-method-29 () none 29)
    (projectile-method-30 () none 30)
    (projectile-method-31 () none 31)
    (projectile-method-32 () none 32)
    (projectile-method-33 () none 33)
    (projectile-method-34 () none 34)
    (projectile-method-35 () none 35)
    (projectile-method-36 () none 36)
    (projectile-method-37 () none 37)
    (projectile-method-38 () none 38)
    (projectile-method-39 () none 39)
    )
  )

(deftype projectile-init-by-other-params (structure)
  ((ent           basic          :offset-assert 0)
   (charge        float          :offset-assert 4)
   (attack-id     uint32         :offset-assert 8)
   (options       projectile-options   :offset-assert 16)
   (notify-handle handle         :offset-assert 24)
   (owner-handle  handle         :offset-assert 32)
   (ignore-handle handle         :offset-assert 40)
   (pos           vector :inline :offset-assert 48)
   (vel           vector :inline :offset-assert 64)
   (timeout       handle         :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype projectile-bounce (projectile)
  ((played-bounce-time time-frame         :offset-assert 472)
   (tumble-quat        quaternion :inline :offset-assert 480)
   )
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    (projectile-bounce-method-40 () none 40)
    (projectile-bounce-method-41 () none 41)
    )
  )

(define-extern spawn-projectile (function type projectile-init-by-other-params process-tree dead-pool (pointer process)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; find-nearest-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; empty!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; missing ref test - there's a useless array defintion with a list of not-yet-defined types
;; and this doesn't work in goalc.

(declare-type shadow-geo basic)
(declare-type sidekick basic)
(declare-type racer-info basic)
(declare-type tube-info basic)
(declare-type flut-info basic)
(declare-type board-info basic)
(declare-type pilot-info basic)
(declare-type gun-info basic)
(declare-type darkjak-info basic)

(deftype target (process-focusable)
  ((control                 control-info               :score 1      :offset 128) ;; guessed by decompiler
   (skel2                   basic                                    :offset-assert 204)
   (shadow-backup           shadow-geo                               :offset-assert 208)
   (target-flags            uint32                                   :offset 188)
   (game                    game-info                                :offset-assert 212) ;; guessed by decompiler
   (neck                    joint-mod                                :offset-assert 216) ;; guessed by decompiler
   (head                    joint-mod                                :offset-assert 220)
   (upper-body              joint-mod                                :offset-assert 224)
   (horns                   joint-mod                                :offset-assert 228)
   (hair                    joint-mod                    2           :offset-assert 232)
   (darkjak-interp          float                                    :offset-assert 240)
   (darkjak-giant-interp    float                                    :offset-assert 244)
   (arm-ik                  joint-mod-ik                 2           :offset-assert 248)
   (leg-ik                  joint-mod-ik                 2           :offset-assert 256)
   (foot                    joint-mod                    2           :offset-assert 264)
   (init-time               time-frame                               :offset-assert 272)
   (teleport-time           time-frame                               :offset-assert 280)
   (state-hook-time         time-frame                               :offset-assert 288) ;; time-frame
   (state-hook              (function none :behavior target)         :offset-assert 296) ;; guessed by decompiler
   (cam-user-mode           symbol                                   :offset-assert 300) ;; guessed by decompiler
   (sidekick                (pointer sidekick)                       :offset-assert 304) ;; guessed by decompiler
   (manipy                  (pointer manipy)                         :offset-assert 308) ;; guessed by decompiler
   (mirror                  (pointer process-drawable)               :offset-assert 312)
   (attack-info             attack-info                      :inline :offset-assert 320)
   (attack-info-rec         attack-info                      :inline :offset-assert 480)
   (attack-info-old         attack-info                  8   :inline :offset-assert 640)
   (anim-seed               uint64                                   :offset-assert 1920)
   (alt-cam-pos             vector                           :inline :offset-assert 1936)
   (current-level           level                                    :offset-assert 1952) ;; guessed by decompiler
   (saved-pos               transformq                       :inline :offset-assert 1968)
   (saved-owner             uint64                                   :offset-assert 2016)
   (alt-neck-pos            vector                           :inline :offset-assert 2032)
   (focus-search            (array collide-shape)                    :offset-assert 2048)
   (excitement              float                                    :offset-assert 2052)
   (shock-effect-time       time-frame                               :offset-assert 2056)
   (beard?                  symbol                                   :offset-assert 2064)
   (spool-anim              symbol                                   :offset-assert 2068)
   (ambient-time            time-frame                               :offset-assert 2072)
   (fp-hud                  handle                                   :offset-assert 2080) ;; handle
   (no-load-wait            uint64                                   :offset-assert 2088) ;; time-frame
   (no-look-around-wait     uint64                                   :offset-assert 2096) ;; time-frame
   (burn-proc               handle                                   :offset-assert 2104) ;; handle
   (pre-joint-hook          (function none :behavior target)         :offset-assert 2112)
   (notify                  uint64                                   :offset-assert 2120)
   (mode-cache              basic                                    :offset-assert 2128)
   (mode-param1             uint64                                   :offset-assert 2136)
   (mode-param2             uint64                                   :offset-assert 2144)
   (mode-param3             uint64                                   :offset-assert 2152)
   (tobot-state             state                                    :offset-assert 2160)
   (tobot?                  symbol                                   :offset-assert 2164)
   (tobot-recorder          basic                                    :offset-assert 2168)
   (color-effect            basic                                    :offset-assert 2172)
   (color-effect-start-time time-frame                               :offset-assert 2176)
   (color-effect-duration   uint64                                   :offset-assert 2184)
   (racer                   racer-info                               :offset-assert 2192) ;; guessed by decompiler
   (tube                    tube-info                                :offset-assert 2196) ;; guessed by decompiler
   (flut                    flut-info                                :offset-assert 2200) ;; guessed by decompiler
   (board                   board-info                               :offset-assert 2204)
   (pilot                   pilot-info                               :offset-assert 2208)
   (gun                     gun-info                                 :offset-assert 2212)
   (mech                    basic                                    :offset-assert 2216)
   (turret                  basic                                    :offset-assert 2220)
   (darkjak                 darkjak-info                             :offset-assert 2224)
   (indax                   basic                                    :offset-assert 2228)
   )
  :method-count-assert 29
  :size-assert         #x8b8
  :flag-assert         #x1d084008b8
  ;; field mode-param2 uses ~A with a 64-bit load field mode-param3 uses ~A with a 64-bit load
  (:methods
    (target-method-27 (_type_ collide-cache collide-edge-spec) none 27)
    (init-target (_type_ continue-point symbol) none :behavior target 28)
    )
  )

(deftype sidekick (process-drawable)
  ((control             control-info         :offset 128) ;; guessed by decompiler
   (anim-seed           uint64               :offset 208) ;; ??
   (shadow-in-movie?    symbol               :offset-assert 216) ;; guessed by decompiler
   (special-anim-time   time-frame           :offset-assert 224)
   (special-anim-interp float                :offset-assert 232)
   (special-anim-frame  float                :offset-assert 236)
   (offset              transformq   :inline :offset-assert 240)
   (mirror              uint32               :offset-assert 288)
   )
  :method-count-assert 20
  :size-assert         #x124
  :flag-assert         #x1400b00124
  (:methods
    )
  )

(define-extern *target* target)
(define-extern *sidekick* sidekick)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stats-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tr-stat (structure)
  ((groups    uint16  :offset-assert 0)
   (fragments uint16  :offset-assert 2)
   (tris      uint32  :offset-assert 4)
   (dverts    uint32  :offset-assert 8)
   (instances uint16  :offset-assert 12)
   (pad       uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-global-stats (structure)
  ((merc      tr-stat :inline :offset-assert 0)
   (emerc     tr-stat :inline :offset-assert 16)
   (mercneric tr-stat :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype perf-stat (structure)
  ((frame-number   uint32  :offset-assert 0)
   (count          uint32  :offset-assert 4)
   (cycles         uint32  :offset-assert 8)
   (instructions   uint32  :offset-assert 12)
   (icache         uint32  :offset-assert 16)
   (dcache         uint32  :offset-assert 20)
   (select         uint32  :offset-assert 24)
   (ctrl           uint32  :offset-assert 28)
   (accum0         uint32  :offset-assert 32)
   (accum1         uint32  :offset-assert 36)
   (to-vu0-waits   uint32  :offset-assert 40)
   (to-spr-waits   uint32  :offset-assert 44)
   (from-spr-waits uint32  :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x34
  :flag-assert         #xe00000034
  (:methods
    (perf-stat-method-9 () none 9) ;; (dummy-9 (_type_) none 9)
    (print-to-stream (_type_ string basic) none 10)
    (reset! (_type_) none 11)
    (read! (_type_) none 12)
    (update-wait-stats (_type_ uint uint uint) none 13)
    )
  )

(deftype perf-stat-array (inline-array-class)
  ((data             perf-stat :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum perf-stat-bucket
  :type uint32 ;; guess

  (all-code        0)
  (spatial-hash-build 1)
  (spatial-hash-search 2)
  (collide         3)
  (collide-list    4)
  (collide-fill    5)
  (actor-hash      6)
  (nav             7)
  (nav-dma-all     8)
  (nav-dma-read    9)
  (nav-dma-write  10)
  (nav-dma-work   11)
  (nav-part1      12)
  (nav-part2      13)
  (nav-part3      14)
  (nav-part4      15)
  (nav-part5      16)
  (nav-part6      17)
  (nav-part7      18)
  (nav-part8      19)
  (nav-part9      20)
  (nav-part10     21)
  (add-to-translation 22)
  (update-current-poly 23)
  (clamp-vector-to-mesh 24)
  (ray-step      25)
  (update-spheres 26)
  (travel-around-spheres 27)
  (avoid-spheres     28)
  (check-vector-collision-with-nav-spheres 29)
  (find-nearest-poly 30)
  (find-containing-poly 31)
  (generate-velocity 32)
  (apply-rotation 33)
  (apply-velocity 34)
  (travel-post    35)
  (common-post    36)
  (misc           37)
  (mercneric      38)
  (tie-generic    39)
  (background     40)
  (drawable       41)
  (tfrag          42)
  (tfrag-scissor  43)
  (inst-shrub     44)
  (proto-shrub    45)
  (inst-tie       46)
  (proto-tie      47)
  (bones          48)
  (camera         49)
  (foreground     50)
  )

(define-extern perf-stat-bucket->string  (function perf-stat-bucket string))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bsp-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bsp-node (structure)
  ((front         int16            :offset-assert 0) ;; int32
   (back          int16            :offset-assert 2) ;; int32
   (front-box-min vector4b :inline :offset-assert 4)
   (front-box-max vector4b :inline :offset-assert 8)
   (back-box-min  vector4b :inline :offset-assert 12)
   (back-box-max  vector4b :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype game-level (basic)
  ((master-bsp basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype view-frustum (structure)
  ((hither-top-left     vector :inline :offset-assert 0)
   (hither-top-right    vector :inline :offset-assert 16)
   (hither-bottom-left  vector :inline :offset-assert 32)
   (hither-bottom-right vector :inline :offset-assert 48)
   (yon-top-left        vector :inline :offset-assert 64)
   (yon-top-right       vector :inline :offset-assert 80)
   (yon-bottom-left     vector :inline :offset-assert 96)
   (yon-bottom-right    vector :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(declare-type entity-camera entity)
(declare-type entity-race-mesh entity)
(declare-type entity-nav-mesh entity)
(declare-type actor-group basic)

(defenum texture-page-flag
  :type uint16
  :bitfield #t)

(deftype bsp-header (drawable)
  (
   ;; TYPE                                                          0
   (info file-info                                               :offset 4)
   ;; 0                                                                  8
   ;; 0                                                                 12
   ;; 0                                                                 16
   ;; 0                                                                 20
   ;; 0                                                                 24
   ;; 0                                                                 28
   (all-visible-list         (pointer uint16)            :offset-assert 32)
   (visible-list-length      int16                       :offset-assert 36)
   (drawable-trees           drawable-tree-array         :offset-assert 40)
   (pat                      pointer                     :offset-assert 44)
   (pat-length               int32                       :offset-assert 48)
   (texture-remap-table      (pointer uint64)            :offset-assert 52)
   (texture-remap-table-len  int32                       :offset-assert 56)
   (texture-ids              (pointer texture-id)        :offset-assert 60)
   (texture-page-count       int32                       :offset-assert 64)
   ;; 0                                                                 68
   (name                     symbol                             :offset 72)
   (nickname                 symbol                      :offset-assert 76)
   (vis-info                 level-vis-info 8            :offset-assert 80)
   (actors                   drawable-inline-array-actor :offset-assert 112)
   (cameras                  (array entity-camera)       :offset-assert 116)
   (nodes                    (inline-array bsp-node)     :offset-assert 120)
   (level                    level                       :offset-assert 124)
   ;; 0 (maybe current-leaf-idx?)                                       128
   (texture-flags            texture-page-flag 10               :offset 130)
   ;; 0 (maybe padding)                                                 150
   ;; 0 (was boxes, current back flags?, byte?)                         152
   (ambients                 symbol                      :offset        156) ;; now just #t?
   (subdivide-close          float                       :offset        160)
   (subdivide-far            float                       :offset-assert 164)
   (race-meshes              (array entity-race-mesh)    :offset-assert 168)
   ;; pointer to table of sorted floats                                 172
   (light-hash               light-hash                  :offset        176)
   (nav-meshes               (array entity-nav-mesh)     :offset-assert 180)
   (actor-groups             (array actor-group)         :offset-assert 184)
   (region-trees             (array drawable-tree-region-prim) :offset-assert 188)
   (region-array             region-array                :offset-assert 192)
   (collide-hash             collide-hash                :offset-assert 196)
   ;; 200 is some array
   ;; 204 is maybe that array's length
   ;; 216 is a vector array
  ;;  (vec-array (pointer vector) :offset 216) ; TODO see - `update-visible` hits assertion

   (region-tree drawable-tree-region-prim :offset 252)

   ; (actor-birth-order (pointer uint32) :offset-assert 172)
   ; (split-box-indices (pointer uint16) :offset-assert 176)
   (unk-data-8 uint32 55 :offset 180)
   )
  :method-count-assert 19
  :size-assert         #x190
  :flag-assert         #x1300000190
  ;; Failed to read fields.
  (:methods
    (birth (_type_) none 17)
    (deactivate-entities (_type_) none 18)
    )
  )

;; something very strange happened here and these stopwatches are
;; totally broken

(deftype collide-stats (structure)
  ((calls             uint32            :offset-assert 0)
   (spheres           uint32            :offset-assert 4)
   (nodes             uint32            :offset-assert 8)
   (frags             uint32            :offset-assert 12)
   (tris              uint32            :offset-assert 16)
   (output            uint32            :offset-assert 20)
   (pad0              uint32 2)
   (total-target      uint32 8          :offset-assert 32)
   (target-cache-fill uint32 8          :offset-assert 64)
   (target-ray-poly   uint32 6          :offset-assert 96)
   ;(pad uint8 :offset 119)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )

(define-extern inspect-bsp-tree (function bsp-header bsp-node none))
(define-extern map-bsp-tree (function (function bsp-node none) bsp-header bsp-node none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-cache-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-puss-sphere (structure)
  ((bsphere sphere         :inline :offset-assert 0)
   (bbox4w  bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-puss-work (structure)
  ((closest-pt     vector              :inline :offset-assert 0)
   (tri-normal     vector              :inline :offset-assert 16)
   (tri-bbox4w     bounding-box4w      :inline :offset-assert 32)
   (spheres-bbox4w bounding-box4w      :inline :offset-assert 64)
   (spheres        collide-puss-sphere 64 :inline :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #xc60
  :flag-assert         #xb00000c60
  (:methods
    (collide-puss-work-method-9 () none 9) ;; (dummy-9 (_type_ object object) symbol 9)
    (collide-puss-work-method-10 () none 10) ;; (dummy-10 (_type_ object object) symbol 10)
    )
  )

(deftype collide-cache-tri (structure)
  ((vertex      vector      3 :inline :offset-assert 0) ;; guessed by decompiler
   (extra-quad  uint8       16 :offset-assert 48) ;; guessed by decompiler
   (pat         pat-surface    :offset 48) ;; guessed by decompiler
   (collide-ptr basic          :offset 52)
   (prim-index  uint16         :offset 56)
   (user16      uint16         :offset 58)
   (user32      uint32         :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype collide-cache-prim (structure)
  ((prim-core    collide-prim-core  :inline :offset-assert 0)
   (extra-quad   uint8            16      :offset-assert 32) ;; guessed by decompiler
   (ccache       collide-cache              :offset 32) ;; guessed by decompiler
   (prim         collide-shape-prim         :offset 36) ;; guessed by decompiler
   (first-tri    uint16                     :offset 40)
   (num-tris     uint16                     :offset 42)
   (unused       uint8              4       :offset 44) ;; guessed by decompiler
   (world-sphere vector             :inline :offset 0)
   (collide-as   collide-spec               :offset 16) ;; guessed by decompiler
   (action       collide-action             :offset 24) ;; guessed by decompiler
   (prim-type    prim-type                  :offset 28)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (collide-cache-prim-method-9 () none 9) ;; (resolve-moving-sphere-tri (_type_ collide-tri-result collide-prim-core vector float collide-action) float 9)
    (collide-cache-prim-method-10 () none 10) ;; (resolve-moving-sphere-sphere (_type_ collide-tri-result collide-prim-core vector float collide-action) float 10)
    )
  )

(declare-type collide-query structure)

(deftype collide-cache (basic)
  ((num-tris         int32                      :offset-assert 4)
   (num-prims        int32                      :offset-assert 8)
   (ignore-mask      pat-surface                :offset-assert 12) ;; guessed by decompiler
   (ignore-processes process            2       :offset-assert 16)
   (collide-box      bounding-box       :inline :offset-assert 32)
   (collide-box4w    bounding-box4w     :inline :offset-assert 64)
   (collide-with     collide-spec               :offset-assert 96) ;; guessed by decompiler
   (unused           uint32                     :offset-assert 100)
   (prims            collide-cache-prim 100     :inline :offset-assert 112) ;; guessed by decompiler
   (tris             collide-cache-tri  461     :inline :offset-assert 4912) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x8670
  :flag-assert         #x1a00008670
  (:methods
    (collide-cache-method-9 () none 9) ;; (debug-draw (_type_) none 9)
    (fill-and-probe-using-line-sphere (_type_ collide-query) float 10)
    (fill-and-probe-using-spheres (_type_ collide-query) symbol 11)
    (collide-cache-method-12 (_type_ collide-query) none 12) ;; (fill-and-probe-using-y-probe (_type_ vector float collide-kind process-drawable collide-tri-result pat-surface) float 12)
    (fill-using-line-sphere (_type_ collide-query) none 13) ;; (fill-using-bounding-box (_type_ bounding-box collide-kind process-drawable pat-surface) none 13)
    (fill-using-spheres (_type_ collide-query) none 14)
    (collide-cache-method-15 () none 15)
    (collide-cache-method-16 (_type_ collide-query) float 16) ;; (fill-using-y-probe (_type_ vector float collide-kind process-drawable pat-surface) none 16)
    (probe-using-spheres (_type_ collide-query) symbol 17) ;; (initialize (_type_) none 17)
    (collide-cache-method-18 () none 18) ;; (probe-using-line-sphere (_type_ vector vector float collide-kind collide-tri-result pat-surface) float 18)
    (collide-cache-method-19 () none 19) ;; (probe-using-spheres (_type_ collide-using-spheres-params) symbol 19)
    (collide-cache-method-20 () none 20) ;; (probe-using-y-probe (_type_ vector float collide-kind collide-tri-result pat-surface) float 20)
    (collide-cache-method-21 () none 21) ;; (fill-from-background (_type_ (function bsp-header int collide-list none) (function collide-cache object none)) none 21)
    (collide-cache-method-22 () none 22) ;; (fill-from-foreground-using-box (_type_) none 22)
    (collide-cache-method-23 () none 23) ;; (fill-from-foreground-using-line-sphere (_type_) none 23)
    (collide-cache-method-24 () none 24) ;; (fill-from-foreground-using-y-probe (_type_) none 24)
    (collide-cache-method-25 () none 25) ;; (fill-from-water (_type_ water-control) none 25)
    )
  )

(deftype collide-list-item (structure)
  ((mesh collide-frag-mesh  :offset-assert 0) ;; guessed by decompiler
   (inst basic              :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-list (structure)
  ((num-items int32                 :offset-assert 0)
   (items     collide-list-item 256 :inline :offset 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x810
  :flag-assert         #x900000810
  )

(define-extern *collide-cache* collide-cache)
(define-extern *collide-list* collide-list)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-query (structure)
  ((best-other-tri   collide-tri-result :inline :offset-assert 0)
   (best-my-tri      collide-tri-result :inline :offset 0)
   (ignore-processes process            2       :offset-assert 88)
   (ignore-process0  process                    :offset 88)
   (ignore-process1  process                    :offset 92)
   (ignore-pat       pat-surface                :offset-assert 96)
   (collide-with     collide-spec               :offset-assert 100)
   (overlay-params   uint32             3       :offset 112) ;; ?
   (bbox             bounding-box       :inline :offset-assert 128)
   (bbox4w           bounding-box4w     :inline :offset-assert 160)
   (bsphere          sphere             :inline :offset-assert 192)
   (start-pos        vector             :inline :offset-assert 208)
   (move-dist        vector             :inline :offset-assert 224)
   (rlength          vector             :inline :offset-assert 240)
   (exit-planes      plane              2       :offset-assert 256) ;; ?
   (radius           float                      :offset 268)
   (inv-mat          matrix             :inline :offset 288)
   (spheres          (inline-array sphere)      :offset 112 :score 1)
   (num-spheres      uint32                     :offset 116)
   (solid-only       symbol                     :offset 120)
   (best-dist        float                      :offset 112 :score -1)
   (best-other-prim  basic                      :offset 116)
   (best-my-prim     basic                      :offset 120)
   (move-vec         vector             :inline :offset 224)
   (best-u           float                      :offset 112 :score -1)
   (action-mask      collide-action             :offset-assert 352)
   (local-box4w      bounding-box4w     :inline :offset-assert 368)
   (search-box       bounding-box4w     :inline :offset-assert 400)
   (search-vector    vector4w           :inline :offset-assert 432)
   (instance-mat     matrix             :inline :offset-assert 448)
   (instance-ptr     basic                      :offset-assert 512)
   (x-addr           uint32                     :offset-assert 516)
   (x-step           uint32                     :offset-assert 520)
   (y-addr           uint32                     :offset-assert 524)
   (y-step           uint32                     :offset-assert 528)
   (z-addr           uint32                     :offset-assert 532)
   (z-step           uint32                     :offset-assert 536)
   )
  :method-count-assert 9
  :size-assert         #x21c
  :flag-assert         #x90000021c
  )

(define-extern *collide-test-flag* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrubbery-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype billboard (drawable)
  ((flat adgif-shader :inline :offset-assert 32)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  (:methods
    )
  )

(deftype shrub-view-data (structure)
  ((data           uint128 3       :offset-assert 0) ;; guessed by decompiler
   (texture-giftag gs-gif-tag   :inline :offset 0) ;; was qword
   (consts         vector  :inline :offset 16)
   (fog-clamp      vector  :inline :offset 32)
   (tex-start-ptr  int32           :offset 16)
   (gifbufsum      float           :offset 16)
   (mtx-buf-ptr    int32           :offset 20)
   (exp23          float           :offset 20)
   (fog-0          float           :offset 24)
   (fog-1          float           :offset 28)
   (fog-min        float           :offset 32)
   (fog-max        float           :offset 36)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype shrubbery (drawable)
  ((textures (inline-array adgif-shader) :offset 4)
   ;; header breakdown:
   ;; [0] - number of textures / 2
   ;; [1] - number of vertices
   ;; [2] - number of triangle strips
   ;; [3] - ??
   ;;
   ;; Number of Triangles in the Shrub = header[2] - 2 * header[1]
   (header   qword  :offset 8 :score -1)
   (obj-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   ;; start of static dma-chain
   (obj      uint32         :score 999 :offset 16)
   (vtx      uint32         :score 999 :offset 20)
   (col      uint32         :score 999 :offset 24)
   (stq      uint32         :score 999 :offset 28)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    )
  )

(deftype instance-shrubbery (instance)
  ((flat-normal vector :inline :offset-assert 64)
   (flat-hwidth float          :offset 76)
   (color       uint32         :offset 8)
   )
  :method-count-assert 17
  :size-assert         #x50
  :flag-assert         #x1100000050
  (:methods
    )
  )

(deftype drawable-inline-array-instance-shrub (drawable-inline-array)
  ((data instance-shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :flag-assert #x1100000074
  )

(deftype drawable-tree-instance-shrub (drawable-tree)
  ((info prototype-array-shrub-info :offset 8)
   (colors-added time-of-day-palette :offset 12) ;; added
   )
  :flag-assert #x1100000020
  )

(deftype generic-shrub-fragment (drawable)
  ((textures (inline-array adgif-shader)  :offset 4) ;; guessed by decompiler
   (vtx-cnt  uint32                       :offset 8)
   (cnt-qwc  uint8                        :offset 12)
   (vtx-qwc  uint8                        :offset 13)
   (col-qwc  uint8                        :offset 14)
   (stq-qwc  uint8                        :offset 15)
   (cnt      uint32                       :offset 16)
   (vtx      uint32                       :offset 20)
   (col      uint32                       :offset 24)
   (stq      uint32                       :offset 28)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    )
  )


(deftype prototype-shrubbery (drawable-inline-array)
  ((data shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  ;; Failed to read fields.
  (:methods
    )
  )

(deftype prototype-trans-shrubbery (prototype-shrubbery)
  ()
  :flag-assert #x1100000044
  )

(deftype prototype-generic-shrub (drawable-group)
  ()
  :flag-assert #x1100000020
  )

(deftype shrubbery-matrix (structure)
  ((mat   matrix :inline :offset-assert 0)
   (color qword  :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shrub-near-packet (structure)
  ((matrix-tmpl dma-packet :inline :offset-assert 0)
   (header-tmpl dma-packet :inline :offset-assert 16)
   (stq-tmpl    dma-packet :inline :offset-assert 32)
   (color-tmpl  dma-packet :inline :offset-assert 48)
   (vertex-tmpl dma-packet :inline :offset-assert 64)
   (mscal-tmpl  dma-packet :inline :offset-assert 80)
   (init-tmpl   dma-packet :inline :offset-assert 96)
   (init-data   uint32     8       :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(deftype instance-shrub-work (structure)
  ((dummy                           qword             3 :inline      :offset-assert 0) ;; guessed by decompiler
   (chaina                          qword             8 :inline       :offset-assert 48) ;; guessed by decompiler
   (chainb                          qword             8 :inline       :offset-assert 176) ;; guessed by decompiler
   (colors                          rgba              1024    :offset-assert 304) ;; guessed by decompiler
   (matrix-tmpl                     qword             20 :inline      :offset-assert 4400) ;; guessed by decompiler
   (count-tmpl                      vector4w          20 :inline      :offset-assert 4720) ;; guessed by decompiler
   (mscalf-tmpl                     dma-packet        :inline :offset-assert 5040)
   (mscalf-ret-tmpl                 dma-packet        :inline :offset-assert 5056)
   (adgif-tmpl                      dma-gif-packet    :inline :offset-assert 5072)
   (billboard-tmpl                  dma-gif-packet    :inline :offset-assert 5104)
   (billboard-const                 vector            :inline :offset-assert 5136)
   (shrub-near-packets              shrub-near-packet 6  :inline      :offset-assert 5152) ;; guessed by decompiler
   (dma-ref                         dma-packet        :inline :offset-assert 6016)
   (dma-end                         dma-packet        :inline :offset-assert 6032)
   (wind-const                      vector            :inline :offset-assert 6048)
   (constants                       vector            :inline :offset-assert 6064)
   (color-constant                  vector4w          :inline :offset-assert 6080)
   (hmge-d                          vector            :inline :offset-assert 6096)
   (hvdf-offset                     vector            :inline :offset-assert 6112)
   (wind-force                      vector            :inline :offset-assert 6128)
   (color                           vector            :inline :offset-assert 6144)
   (bb-color                        vector            :inline :offset-assert 6160)
   (min-dist                        vector            :inline :offset-assert 6176)
   (temp-vec                        vector            :inline :offset-assert 6192)
   (guard-plane                     plane             4  :inline      :offset-assert 6208) ;; guessed by decompiler
   (plane                           plane             4  :inline      :offset-assert 6272) ;; guessed by decompiler
   (last                            uint32            4       :offset-assert 6336) ;; guessed by decompiler
   (next                            uint32            4       :offset-assert 6352) ;; guessed by decompiler
   (count                           uint16            4       :offset-assert 6368) ;; guessed by decompiler
   (mod-count                       uint16            4       :offset-assert 6376) ;; guessed by decompiler
   (wind-vectors                    uint32                    :offset-assert 6384)
   (instance-ptr                    uint32                    :offset-assert 6388)
   (chain-ptr                       uint32                    :offset-assert 6392)
   (chain-ptr-next                  uint32                    :offset-assert 6396)
   (stack-ptr                       uint32                    :offset-assert 6400)
   (bucket-ptr                      uint32                    :offset-assert 6404)
   (src-ptr                         uint32                    :offset-assert 6408)
   (to-spr                          uint32                    :offset-assert 6412)
   (from-spr                        uint32                    :offset-assert 6416)
   (shrub-count                     uint32                    :offset-assert 6420)
   ;(stack-ptr                       uint32                    :offset-assert 6400)
   (pad uint32)
   (node                            uint32            6       :offset-assert 6428) ;; guessed by decompiler
   (length                          uint32            6       :offset-assert 6452) ;; guessed by decompiler
   (prototypes                      uint32                    :offset-assert 6476)
   ;(bucket-ptr                      uint32                    :offset-assert 6404)
   (pad2 uint32)
   (start-bank                      uint8             20      :offset-assert 6484) ;; guessed by decompiler
   (buffer-index                    uint32                    :offset-assert 6504)
   (current-spr                     uint32                    :offset-assert 6508)
   (current-mem                     uint32                    :offset-assert 6512)
   (current-shrub-near-packet       uint32                    :offset-assert 6516)
   (current-shrub-near-trans-packet uint32                    :offset-assert 6520)
   ;(to-spr                          uint32                    :offset-assert 6412)
   (pad3 uint32)
   (dma-buffer                      basic                     :offset-assert 6528)
   (near-last                       uint32                    :offset-assert 6532)
   (near-next                       uint32                    :offset-assert 6536)
   (near-count                      uint32                    :offset-assert 6540)
   (near-trans-last                 uint32                    :offset-assert 6544)
   (near-trans-next                 uint32                    :offset-assert 6548)
   (near-trans-count                uint32                    :offset-assert 6552)
   (last-shrubs                     uint32                    :offset-assert 6556)
   (chains                          uint32                    :offset-assert 6560)
   (flags                           uint32                    :offset-assert 6564)
   (node-count                      uint32                    :offset-assert 6568)
   (inst-count                      uint32                    :offset-assert 6572)
   (wait-from-spr                   uint32                    :offset-assert 6576)
   (wait-to-spr                     uint32                    :offset-assert 6580)
   (texture-dists                   uint32                    :offset-assert 6584)
   )
  :method-count-assert 9
  :size-assert         #x19bc
  :flag-assert         #x9000019bc
  )

(deftype instance-shrub-dma (structure)
  ((instancea uint128 325 :offset-assert 0) ;; guessed by decompiler
   (instanceb uint128 325 :offset-assert 5200) ;; guessed by decompiler
   (outa      uint128 128 :offset-assert 10400) ;; guessed by decompiler
   (outb      uint128 128 :offset-assert 12448) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

(define-extern shrubbery-login-post-texture (function shrubbery none))
(define-extern *shrub-state* int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tie-fragment-debug (structure)
  ((num-tris    uint16  :offset-assert 0)
   (num-dverts  uint16  :offset-assert 2)
   (debug-lines (array vector-array)   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype tie-fragment (drawable)
  ((gif-ref       (inline-array adgif-shader)  :offset 4) ;; guessed by decompiler
   (point-ref     uint32                       :offset 8)
   (color-index   uint16                       :offset 12)
   (base-colors   uint8                        :offset 14)
   (tex-count     uint16                       :offset 32)
   (gif-count     uint16                       :offset 34)
   (vertex-count  uint16                       :offset 36)
   (color-count   uint16                       :offset 38)
   (dp-ref        uint32                       :offset 40)
   (dp-qwc        uint32                       :offset 44)
   (generic-ref   uint32                       :offset 48)
   (generic-count uint16                       :offset 52) ;; uint32
   (normal-count  uint16                       :offset 54)
   (normal-ref    uint32                       :offset 56)
   (debug         tie-fragment-debug           :offset 60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  (:methods
    )
  )

(deftype instance-tie (instance)
  ((color-indices uint32                :offset 8)
   (bucket-ptr    prototype-bucket-tie  :offset 12) ;; guessed by decompiler
   (max-scale     uint16                :offset 38)
   (rmin-scale    uint16                :offset 54)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  (:methods
    )
  )

(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data instance-tie 1 :inline :offset-assert 32)  ;; not sure on type here
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  ;; Failed to read fields.
  (:methods
    )
  )

(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes proxy-prototype-array-tie           :offset 8)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  ;; Failed to read fields.
  (:methods
    )
  )

(deftype prototype-tie (drawable-inline-array)
  ((data tie-fragment 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  ;; Failed to read fields.
  (:methods
    )
  )


(deftype tie-matrix (structure)
  ((mat          matrix :inline :offset-assert 0)
   (morph        qword  :inline :offset-assert 64)
   (fog          qword  :inline :offset-assert 80)
   (envmap-flag  uint32         :offset 80)
   (guard-flag   uint32         :offset 84)
   (vertex-alpha float          :offset 88)
   (fog-value    float          :offset 92)
   (fixed-alpha  float          :offset 68)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype instance-tie-work (structure)
  ((wind-const                     vector     :inline :offset-assert 0)
   (hmge-d                         vector     :inline :offset-assert 16)
   (hvdf-offset                    vector     :inline :offset-assert 32)
   (wind-force                     vector     :inline :offset-assert 48)
   (constant                       vector     :inline :offset-assert 64)
   (far-morph                      vector     :inline :offset-assert 80)
   (dist-test                      vector     :inline :offset-assert 96)
   (min-dist                       vector     :inline :offset-assert 112)
   (guard-plane                    plane      4 :inline       :offset-assert 128) ;; guessed by decompiler
   (upload-color-0                 dma-packet :inline :offset-assert 192)
   (upload-color-1                 dma-packet :inline :offset-assert 208)
   (upload-color-2                 dma-packet :inline :offset-assert 224)
   (upload-color-ret               dma-packet :inline :offset-assert 240)
   (upload-color-temp              dma-packet :inline :offset-assert 256)
   (generic-color-0                dma-packet :inline :offset-assert 272)
   (generic-color-1                dma-packet :inline :offset-assert 288)
   (generic-color-end              dma-packet :inline :offset-assert 304)
   (envmap-color-0                 dma-packet :inline :offset-assert 320)
   (envmap-color-1                 dma-packet :inline :offset-assert 336)
   (tie-scissor-perspective-matrix matrix     :inline :offset-assert 352)
   (tod-env-color                  vector     :inline :offset-assert 416)
   (morph-temp                     vector     :inline :offset-assert 432)
   (fog-temp                       vector     :inline :offset-assert 448)
   (fade-temp                      float              :offset-assert 464)
   (wind-vectors                   uint32             :offset-assert 468)
   (test-id                        uint32             :offset-assert 472)
   (test-id2                       uint32             :offset-assert 476)
   (dma-buffer                     basic              :offset-assert 480)
   (to-spr                         uint32             :offset-assert 484)
   (from-spr                       uint32             :offset-assert 488)
   (wind-work                      uint32             :offset-assert 492)
   (cur-vis-bits                   uint32             :offset-assert 496)
   (end-vis-bits                   uint32             :offset-assert 500)
   (refl-fade-fac                  float              :offset-assert 504)
   (refl-fade-end                  float              :offset-assert 508)
   (flags                          uint32             :offset-assert 512)
   (vanish-flag                    uint32             :offset-assert 516)
   (translucent-flag               uint32             :offset-assert 520)
   (wait-from-spr                  uint32             :offset-assert 524)
   (wait-to-spr                    uint32             :offset-assert 528)
   (use-etie                       basic              :offset-assert 532)
   (buffer-start                   uint32             :offset-assert 536)
   (buffer-end                     uint32             :offset-assert 540)
   (tfrag-dists                    uint32             :offset-assert 544)
   (alpha-dists                    uint32             :offset-assert 548)
   (water-dists                    uint32             :offset-assert 552)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )

(deftype instance-tie-dma (structure)
  ((banka instance-tie 32 :inline :offset-assert 0)
   (bankb instance-tie 32 :inline :offset-assert 2048)
   (outa  uint128           256 :offset-assert 4096)
   (outb  uint128           256 :offset-assert 8192)
   ;; this is outside the type????
   (work  instance-tie-work :dynamic  :offset-assert 12288)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

(deftype prototype-tie-work (structure)
  ((upload-flushe              dma-packet   :inline :offset-assert 0)
   (upload-palette             dma-packet   :inline :offset-assert 16)
   (upload-model-0             dma-packet   :inline :offset-assert 32)
   (upload-model-1             dma-packet   :inline :offset-assert 48)
   (upload-model-2             dma-packet   :inline :offset-assert 64)
   (upload-model-3             dma-packet   :inline :offset-assert 80)
   (upload-model-near-0        dma-packet   :inline :offset-assert 96)
   (upload-model-near-1        dma-packet   :inline :offset-assert 112)
   (upload-model-near-2        dma-packet   :inline :offset-assert 128)
   (upload-model-near-3        dma-packet   :inline :offset-assert 144)
   (upload-model-near-4        dma-packet   :inline :offset-assert 160)
   (envmap-palette             dma-packet   :inline :offset-assert 176)
   (envmap-shader              dma-packet   :inline :offset-assert 192)
   (upload-envmap-0            dma-packet   :inline :offset-assert 208)
   (upload-envmap-1            dma-packet   :inline :offset-assert 224)
   (upload-envmap-2            dma-packet   :inline :offset-assert 240)
   (upload-envmap-3            dma-packet   :inline :offset-assert 256)
   (upload-envmap-4            dma-packet   :inline :offset-assert 272)
   (upload-envmap-scissor-4    dma-packet   :inline :offset-assert 288)
   (generic-palette            dma-packet   :inline :offset-assert 304)
   (generic-model-0            dma-packet   :inline :offset-assert 320)
   (generic-model-1            dma-packet   :inline :offset-assert 336)
   (generic-model-2            dma-packet   :inline :offset-assert 352)
   (model-next                 dma-packet   :inline :offset-assert 368)
   (clamp                      uint64               :offset-assert 384)
   (prototype-array            basic                :offset-assert 392)
   (wait-from-spr              uint32               :offset-assert 396)
   (wait-to-spr                uint32               :offset-assert 400)
   (mood                       mood-context         :offset-assert 404)
   (last                       uint32      16      :offset 416)
   (next                       uint32      16      :offset-assert 480)
   (count                      uint16      16      :offset-assert 544)
   (tie-last                   uint32               :offset 416)
   (tie-next                   uint32               :offset 480)
   (tie-count                  uint16               :offset 544)
   (trans-last                 uint32               :offset 420)
   (trans-next                 uint32               :offset 484)
   (trans-count                uint16               :offset 546)
   (water-last                 uint32               :offset 424)
   (water-next                 uint32               :offset 488)
   (water-count                uint16               :offset 548)
   (scissor-last               uint32               :offset 428)
   (scissor-next               uint32               :offset 492)
   (scissor-count              uint16               :offset 550)
   (scissor-trans-last         uint32               :offset 432)
   (scissor-trans-next         uint32               :offset 496)
   (scissor-trans-count        uint16               :offset 552)
   (scissor-water-last         uint32               :offset 436)
   (scissor-water-next         uint32               :offset 500)
   (scissor-water-count        uint16               :offset 554)
   (envmap-last                uint32               :offset 440)
   (envmap-next                uint32               :offset 504)
   (envmap-count               uint16               :offset 556)
   (envmap-trans-last          uint32               :offset 444)
   (envmap-trans-next          uint32               :offset 508)
   (envmap-trans-count         uint16               :offset 558)
   (envmap-water-last          uint32               :offset 448)
   (envmap-water-next          uint32               :offset 512)
   (envmap-water-count         uint16               :offset 560)
   (envmap-scissor-last        uint32               :offset 452)
   (envmap-scissor-next        uint32               :offset 516)
   (envmap-scissor-count       uint16               :offset 562)
   (envmap-scissor-trans-last  uint32               :offset 456)
   (envmap-scissor-trans-next  uint32               :offset 520)
   (envmap-scissor-trans-count uint16               :offset 564)
   (envmap-scissor-water-last  uint32               :offset 460)
   (envmap-scissor-water-next  uint32               :offset 524)
   (envmap-scissor-water-count uint16               :offset 566)
   (generic-last               uint32               :offset 464)
   (generic-next               uint32               :offset 528)
   (generic-count              uint16               :offset 568)
   (generic-trans-last         uint32               :offset 468)
   (generic-trans-next         uint32               :offset 532)
   (generic-trans-count        uint16               :offset 570)
   (generic-water-last         uint32               :offset 472)
   (generic-water-next         uint32               :offset 536)
   (generic-water-count        uint16               :offset 572)
   (vanish-last                uint32               :offset 476)
   (vanish-next                uint32               :offset 540)
   (vanish-count               uint16               :offset 574)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype prototype-tie-dma (structure)
  ((colora               rgba    256 :offset-assert 0) ;; guessed by decompiler
   (colorb               rgba    256 :offset-assert 1024) ;; guessed by decompiler
   (outa                 uint128 256 :offset-assert 2048) ;; guessed by decompiler
   (outb                 uint128 256 :offset-assert 6144) ;; guessed by decompiler
   (geometry             uint32  4   :offset-assert 10240) ;; guessed by decompiler
   (next                 uint32  12  :offset 10256) ;; guessed by decompiler
   (count                uint16  12  :offset 10304)
   (counts               uint32  4   :offset 10328)
   (palette-ptr          uint32      :offset 10336)
   (model-ptr            uint32      :offset 10340)
   (ret-ptr              uint32      :offset 10344)
   (length               uint32      :offset 10348)
   (flags                uint32      :offset 10352)
   (dma-buffer           basic       :offset 10356)
   (this-frag-count      uint32      :offset 10360)
   (frag-count           uint8   4   :offset 10364) ;; guessed by decompiler
   (from-spr             uint32      :offset 10368)
   (to-spr               uint32      :offset 10372)
   (spr-out              uint32      :offset 10376)
   (this-count           uint32      :offset 10380)
   (scissor-geometry     uint32      :offset 10240)
   (near-geometry        uint32      :offset 10244)
   (mid-geometry         uint32      :offset 10248)
   (far-geometry         uint32      :offset 10252)
   (scissor-frag-count   uint8       :offset 10364)
   (near-frag-count      uint8       :offset 10365)
   (mid-frag-count       uint8       :offset 10366)
   (far-frag-count       uint8       :offset 10367)
   (tie-scissor-next     uint32      :offset 10256)
   (tie-near-next        uint32      :offset 10260)
   (tie-mid-next         uint32      :offset 10264)
   (tie-far-next         uint32      :offset 10268)
   (trans-scissor-next   uint32 4    :offset 10256)
   (trans-near-next      uint32      :offset 10260)
   (trans-mid-next       uint32      :offset 10264)
   (trans-far-next       uint32      :offset 10268)
   (water-scissor-next   uint32 4    :offset 10256)
   (water-near-next      uint32      :offset 10260)
   (water-mid-next       uint32      :offset 10264)
   (water-far-next       uint32      :offset 10268)
   (envmap-scissor-next  uint32 4    :offset 10272)
   (envmap-near-next     uint32      :offset 10276)
   (envmap-mid-next      uint32      :offset 10280)
   (envmap-far-next      uint32      :offset 10284)
   (generic-near-next    uint32      :offset 10288)
   (generic-mid-next     uint32      :offset 10292)
   (generic-far-next     uint32      :offset 10296)
   (vanish-next          uint32      :offset 10300)
   (tie-count            uint16      :offset 10304)
   (tie-scissor-count    uint16      :offset 10304)
   (tie-near-count       uint16      :offset 10306)
   (tie-mid-count        uint16      :offset 10308)
   (tie-far-count        uint16      :offset 10310)
   (trans-count          uint16      :offset 10304)
   (trans-scissor-count  uint16      :offset 10304)
   (trans-near-count     uint16      :offset 10306)
   (trans-mid-count      uint16      :offset 10308)
   (trans-far-count      uint16      :offset 10310)
   (water-count          uint16      :offset 10304)
   (water-scissor-count  uint16      :offset 10304)
   (water-near-count     uint16      :offset 10306)
   (water-mid-count      uint16      :offset 10308)
   (water-far-count      uint16      :offset 10310)
   (envmap-count         uint16      :offset 10312)
   (envmap-scissor-count uint16      :offset 10312)
   (envmap-near-count    uint16      :offset 10314)
   (envmap-mid-count     uint16      :offset 10316)
   (envmap-far-count     uint16      :offset 10318)
   (generic-count        uint16      :offset 10320)
   (generic-near-count   uint16      :offset 10320)
   (generic-mid-count    uint16      :offset 10322)
   (generic-far-count    uint16      :offset 10324)
   (vanish-count         uint16      :offset 10326)
   (next-clear           uint32 3   :offset 10256)
   (count-clear          uint16 3   :offset 10304)
   )
  :method-count-assert 9
  :size-assert         #x2890
  :flag-assert         #x900002890
  )

(define-extern *instance-tie-work-copy* instance-tie-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tfragment-stats (structure)
  ((num-tris   uint16 4 :offset-assert 0) ;; guessed by decompiler
   (num-dverts uint16 4 :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype tfragment-debug-data (structure)
  ((stats       tfragment-stats      :inline :offset-assert 0)
   (debug-lines (array vector-array)         :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype generic-tfragment (structure)
  ((dummy int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype tfragment (drawable)
  ((color-index         uint16                        :offset 6)
   (debug-data          tfragment-debug-data          :offset 8)
   (color-indices       uint32                        :offset 12)
   (colors              uint32                        :offset 12)
   (dma-chain           uint32                      3 :offset 32) ;; guessed by decompiler
   (dma-common          uint32                        :offset 32)
   (dma-level-0         uint32                        :offset 32)
   (dma-base            uint32                        :offset 36)
   (dma-level-1         uint32                        :offset 40)
   (dma-qwc             uint8                       4 :offset 44) ;; guessed by decompiler
   (shader              (inline-array adgif-shader)   :offset 48) ;; guessed by decompiler
   (num-shaders         uint8                         :offset 52)
   (num-base-colors     uint8                         :offset 53)
   (num-level0-colors   uint8                         :offset 54)
   (num-level1-colors   uint8                         :offset 55)
   (color-offset        uint8                         :offset 56)
   (color-count         uint8                         :offset 57)
   (texture-masks-index uint16                        :offset 58)
   (generic             generic-tfragment             :offset 60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  (:methods
    )
  )

(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((data tfragment 1 :inline :offset-assert 32)
   (pad uint32))
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  ;; Failed to read fields.
  (:methods
    )
  )

(deftype drawable-inline-array-tfrag-trans (drawable-inline-array-tfrag)
  ;; same bug here as jak 1
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2 uint32))
  :flag-assert #x11000000b4
  )

(deftype drawable-inline-array-tfrag-water (drawable-inline-array-tfrag)
  ;; same bug here as jak 1
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2 uint32))
  :flag-assert #x11000000b4
  )

(deftype drawable-tree-tfrag (drawable-tree)
  ((time-of-day-pal time-of-day-palette :offset 12)
   (arrays    drawable-inline-array :dynamic :offset 32 :score 100) ;; either drawable-inline-array-node or drawable-inline-array-tfrag
   )
  :flag-assert #x1100000020
  )

(deftype drawable-tree-tfrag-trans (drawable-tree-tfrag)
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-tree-tfrag-water (drawable-tree-tfrag-trans)
  ()
  :flag-assert #x1100000020
  )


(deftype tfrag-dists (structure)
  ((data   uint32 16 :offset-assert 0 :score -1)
   (vector vector 4 :inline  :offset 0 :score -1)
   (k0s    vector 2 :inline  :offset 0)
   (k1s    vector 2 :inline  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


(deftype tfrag-data (structure)
  ((data        uint32     56       :offset 0 :score -1)
   (vector      vector 14 :inline   :offset 0 :score -1)
   (fog         vector      :inline :offset 0)
   (val         vector      :inline :offset 16)
   (strgif      gs-gif-tag  :inline :offset 32) ;; was qword
   (fangif      gs-gif-tag  :inline :offset 48) ;; was qword
   (adgif       gs-gif-tag  :inline :offset 64) ;; was qword
   (hvdf-offset vector      :inline :offset 80)
   (hmge-scale  vector      :inline :offset 96)
   (invh-scale  vector      :inline :offset 112)
   (ambient     vector      :inline :offset 128)
   (guard       vector      :inline :offset 144)
   (dists       tfrag-dists :inline :offset 160)
   (k0s         uint128     2       :offset 160) ;; guessed by decompiler
   (k1s         uint128     2       :offset 192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype tfrag-control (structure)
  ((num-base-points           uint32  :offset-assert 0)
   (num-shared-base-points    uint32  :offset-assert 4)
   (num-level0-points         uint32  :offset-assert 8)
   (num-shared-level0-points  uint32  :offset-assert 12)
   (num-level1-points         uint32  :offset-assert 16)
   (num-shared-level1-points  uint32  :offset-assert 20)
   (ptr-vtxdata               uint32  :offset-assert 24)
   (ptr-base-points           uint32  :offset-assert 28)
   (ptr-shared-base-points    uint32  :offset-assert 32)
   (ptr-level0-points         uint32  :offset-assert 36)
   (ptr-shared-level0-points  uint32  :offset-assert 40)
   (ptr-level1-points         uint32  :offset-assert 44)
   (ptr-shared-level1-points  uint32  :offset-assert 48)
   (ptr-draw-points           uint32  :offset-assert 52)
   (ptr-interpolated-0        uint32  :offset-assert 56)
   (ptr-shared-interpolated-0 uint32  :offset-assert 60)
   (ptr-interpolated1         uint32  :offset-assert 64)
   (ptr-shared-interpolated1  uint32  :offset-assert 68)
   (ptr-strip-data            uint32  :offset-assert 72)
   (ptr-texture-data          uint32  :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype tfrag-stats (structure)
  ((from         int32  :offset-assert 0)
   (to           int32  :offset-assert 4)
   (cnt          int32  :offset-assert 8)
   (tris         int32  :offset-assert 12)
   (tfaces       int32  :offset-assert 16)
   (tfrags       int32  :offset-assert 20)
   (dtris        int32  :offset-assert 24)
   (base-verts   int32  :offset-assert 28)
   (level0-verts int32  :offset-assert 32)
   (level1-verts int32  :offset-assert 36)
   (dma-cnt      int32  :offset-assert 40)
   (dma-dta      int32  :offset-assert 44)
   (dma-tex      int32  :offset-assert 48)
   (strips       int32  :offset-assert 52)
   (drawpoints   int32  :offset-assert 56)
   (vif          int32  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype tfrag-packet (structure)
  ((tag uint128 2 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tfrag-work (structure)
  ((base-tmpl                dma-packet :inline :offset-assert 0)
   (level-0-tmpl             dma-packet :inline :offset-assert 16)
   (common-tmpl              dma-packet :inline :offset-assert 32)
   (level-1-tmpl             dma-packet :inline :offset-assert 48)
   (color-tmpl               dma-packet :inline :offset-assert 64)
   (frag-dists               vector     :inline :offset-assert 80)
   (min-dist                 vector     :inline :offset-assert 96)
   (color-ptr                vector4w   :inline :offset-assert 112)
   (tr-stat-tfrag            tr-stat            :offset-assert 128)
   (tr-stat-tfrag-scissor    tr-stat            :offset-assert 132)
   (vu1-enable-tfrag         int32              :offset-assert 136)
   (vu1-enable-tfrag-scissor int32              :offset-assert 140)
   (cur-vis-bits             uint32             :offset-assert 144)
   (end-vis-bits             uint32             :offset-assert 148)
   (src-ptr                  uint32             :offset-assert 152)
   (last-call                uint32             :offset-assert 156)
   (dma-buffer               basic              :offset-assert 160)
   (test-id                  uint32             :offset-assert 164)
   (wait-from-spr            uint32             :offset-assert 168)
   (wait-to-spr              uint32             :offset-assert 172)
   (near-wait-from-spr       uint32             :offset-assert 176)
   (near-wait-to-spr         uint32             :offset-assert 180)
   (max-fragment             uint16             :offset-assert 184)
   (min-fragment             uint16             :offset-assert 186)
   (texture-dists            uint32             :offset-assert 188)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype tfrag-dma (structure)
  ((banka  tfragment 16 :inline   :offset-assert 0)
   (bankb  tfragment 16 :inline  :offset-assert 1024)
   (outa   uint128 128  :offset-assert 2048)
   (outb   uint128 128  :offset-assert 4096)
   (colors rgba 2047 :offset-assert 6144) ;; why is this one short!!!
   )
  :method-count-assert 9
  :size-assert         #x37fc
  :flag-assert         #x9000037fc
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; background-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype background-work (basic)
  ((tfrag-tree-count       int32                          :offset-assert 4)
   (tfrag-trees            drawable-tree-tfrag          8 :offset-assert 8) ;; guessed by decompiler
   (tfrag-levels           level                        8 :offset-assert 40) ;; guessed by decompiler
   (tfrag-trans-tree-count int32                          :offset-assert 72)
   (tfrag-trans-trees      drawable-tree-tfrag-trans    8 :offset-assert 76)
   (tfrag-trans-levels     level                        8 :offset-assert 108)
   (tfrag-water-tree-count int32                          :offset-assert 140)
   (tfrag-water-trees      drawable-tree-tfrag-water    8 :offset-assert 144)
   (tfrag-water-levels     level                        8 :offset-assert 176)
   (shrub-tree-count       int32                          :offset-assert 208)
   (shrub-trees            drawable-tree-instance-shrub 8 :offset-assert 212) ;; guessed by decompiler
   (shrub-levels           level                        8 :offset-assert 244) ;; guessed by decompiler
   (tie-tree-count         int32                          :offset-assert 276)
   (tie-trees              drawable-tree-instance-tie   8 :offset-assert 280) ;; guessed by decompiler
   (tie-levels             level                        8 :offset-assert 312) ;; guessed by decompiler
   (tie-generic            basic                        8 :offset-assert 344) ;; guessed by decompiler
   (tie-generic-trans      basic                        8 :offset-assert 376)
   (wait-to-vu0            uint32                         :offset-assert 408)
   )
  :method-count-assert 9
  :size-assert         #x19c
  :flag-assert         #x90000019c
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; subdivide-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype subdivide-settings (basic)
  ((dist   float 5 :offset-assert 4) ;; guessed by decompiler
   (meters float 5 :offset-assert 24) ;; guessed by decompiler
   (close  float 8 :offset-assert 44) ;; guessed by decompiler
   (far    float 8 :offset-assert 76) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type meters meters) _type_)
    )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  )

(deftype subdivide-dists (structure)
  ((data   uint32  32 :offset-assert 0) ;; guessed by decompiler
   (vector vector  8 :inline :offset 0) ;; guessed by decompiler
   (k0s    uint128 4  :offset 0) ;; guessed by decompiler
   (k1s    uint128 4  :offset 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype terrain-stats (structure)
  ((pris                     tr-stat :inline :offset-assert 0)
   (tie-generic              tr-stat :inline :offset-assert 16)
   (tie-vanish               tr-stat :inline :offset-assert 32)
   (tie                      tr-stat :inline :offset-assert 48)
   (tie-scissor              tr-stat :inline :offset-assert 64)
   (tie-envmap               tr-stat :inline :offset-assert 80)
   (tie-envmap-scissor       tr-stat :inline :offset-assert 96)
   (tie-trans                tr-stat :inline :offset-assert 112)
   (tie-scissor-trans        tr-stat :inline :offset-assert 128)
   (tie-envmap-trans         tr-stat :inline :offset-assert 144)
   (tie-envmap-scissor-trans tr-stat :inline :offset-assert 160)
   (tie-water                tr-stat :inline :offset-assert 176)
   (tie-scissor-water        tr-stat :inline :offset-assert 192)
   (tie-envmap-water         tr-stat :inline :offset-assert 208)
   (tie-envmap-scissor-water tr-stat :inline :offset-assert 224)
   (shrub-near               tr-stat :inline :offset-assert 240)
   (shrub                    tr-stat :inline :offset-assert 256)
   (tfrag-scissor            tr-stat :inline :offset-assert 272)
   (tfrag                    tr-stat :inline :offset-assert 288)
   (billboard                tr-stat :inline :offset-assert 304)
   (tfrag-trans              tr-stat :inline :offset-assert 320)
   (tfrag-scissor-trans      tr-stat :inline :offset-assert 336)
   (tfrag-water              tr-stat :inline :offset-assert 352)
   (tfrag-scissor-water      tr-stat :inline :offset-assert 368)
   (trans-pris               tr-stat :inline :offset-assert 384)
   (trans-shrub              tr-stat :inline :offset-assert 400)
   (ocean-mid                tr-stat :inline :offset-assert 416)
   (ocean-near               tr-stat :inline :offset-assert 432)
   (shadow                   tr-stat :inline :offset-assert 448)
   (total                    tr-stat :inline :offset-assert 464)
   )
  :method-count-assert 9
  :size-assert         #x1e0
  :flag-assert         #x9000001e0
  )

(deftype dma-area (structure)
  ((instance-shrub-dma instance-shrub-dma :inline :offset 0)
   (draw-node-dma      draw-node-dma      :inline :offset 0)
   (tfrag-dma          tfrag-dma          :inline :offset 0)
   (instance-tie-dma   instance-tie-dma   :inline :offset 0)
   (prototype-tie-dma  prototype-tie-dma  :inline :offset 0)
   (wind-dma           wind-dma           :inline :offset 0)
   (time-of-day-dma    time-of-day-dma    :inline :offset 0)
   (decomp-work        decomp-work        :inline :offset 0)
   (ocean-vertex       ocean-vertex       4       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

(deftype background-area (structure)
  ((dma-area dma-area :inline :offset-assert 0)
   (vis-list uint8    2048    :offset-assert 14496) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

(deftype foreground-area (structure)
  ((generic-work    generic-work    :inline :offset-assert 0)
   (foreground-work foreground-work :inline :offset 0)
   (joint-work      joint-work      :inline :offset 0)
   (bone-mem        bone-memory     :inline :offset 0)
   (shadow-work     shadow-work     :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )

(deftype region-prim-area (structure)
  ((region-prim-list        region-prim-list :inline :offset-assert 0)
   (pos                     vector           :inline :offset-assert 1296)
   (ray                     vector           :inline :offset 1328)
   (region-enter-count      int32                    :offset 1360)
   (region-enter-list       uint32          320     :offset-assert 1364)
   (region-enter-prim-list  uint32          320     :offset-assert 2644)
   (region-exit-count       int32                    :offset-assert 3924)
   (region-exit-list        uint32          320     :offset-assert 3928)
   (region-exit-prim-list   uint32          320     :offset-assert 5208)
   (region-inside-count     int32                    :offset-assert 6488)
   (region-inside-list      uint32          320     :offset-assert 6492)
   (region-inside-prim-list uint32          320     :offset-assert 7772)
   (region-start-count      int32                    :offset-assert 9052)
   (region-start-list       uint32          320     :offset-assert 9056)
   (region-start-prim-list  uint32          320     :offset-assert 10336)
   )
  :method-count-assert 13
  :size-assert         #x2d60
  :flag-assert         #xd00002d60
  (:methods
    (region-prim-area-method-9 () none 9)
    (region-prim-area-method-10 () none 10)
    (region-prim-area-method-11 () none 11)
    (region-prim-area-method-12 () none 12)
    )
  )

(deftype sprite-area (structure)
  ((clock-data vector 13 :inline       :offset-assert 0)
   (buffer     uint8 :dynamic :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype work-area (structure)
  ((background  background-area  :inline :offset-assert 0)
   (foreground  foreground-area  :inline :offset 0)
   (region-prim region-prim-area :inline :offset 0)
   (sprite      sprite-area      :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

(deftype terrain-context (structure)
  ((work work-area :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

(define-extern *terrain-stats* terrain-stats)
(define-extern *collide-stats* collide-stats)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum entity-perm-status
  :bitfield #t
  :type uint16
  (bit-0 0)
  (bit-1 1)
  (dead 2)
  (bit-3 3)
  (bit-4 4)
  (bit-5 5)
  (subtask-complete 6)
  (bit-7 7)
  (complete 8)
  (bit-9 9)
  (bit-10 10)
  )

(deftype entity-perm (structure)
  ((user-object object   2 :offset-assert 0) ;; guessed by decompiler
   (user-uint64 uint64     :offset 0)
   (user-float  float    2 :offset 0) ;; guessed by decompiler
   (user-int32  int32    2 :offset 0) ;; guessed by decompiler
   (user-uint32 uint32   2 :offset 0) ;; guessed by decompiler
   (user-int16  int16    4 :offset 0) ;; guessed by decompiler
   (user-uint16 uint16   4 :offset 0) ;; guessed by decompiler
   (user-int8   int8     8 :offset 0) ;; guessed by decompiler
   (user-uint8  uint8    8 :offset 0) ;; guessed by decompiler
   (status      entity-perm-status     :offset 8) ;; entity-perm-status
   (dummy       uint8    1 :offset 10) ;; guessed by decompiler
   (task        uint8      :offset 11) ;; game-task
   (aid         actor-id   :offset 12) ;; guessed by decompiler
   (quad        uint128    :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (entity-perm-method-9 () none 9) ;; (update-perm! (_type_ symbol entity-perm-status) _type_ 9)
    )
  )


(deftype entity-links (structure)
  ((prev-link entity-links :offset-assert 0)
   (next-link entity-links :offset-assert 4)
   (entity entity :offset-assert 8)
   (process process :offset-assert 12)
   (level level :offset-assert 16)
   (vis-id int32 :offset-assert 20)
   (kill-mask task-mask :offset-assert 24)
   (vis-dist meters :offset-assert 28)
   (trans vector :inline :offset-assert 32)
   (perm entity-perm :inline :offset-assert 48)
   (status uint16 :offset 56)
   (aid uint32 :offset 60)
   (task uint8 :offset 59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  ;; Failed to read fields.
  (:methods
    (entity-links-method-9 () none 9) ;; (birth? (_type_ vector) symbol 9)
    )
  )

(deftype entity-perm-array (inline-array-class)
  ((data             entity-perm :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype entity-links-array (inline-array-class)
  ((data             entity-links :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity (res-lump)
  ((trans vector :inline :offset-assert 32)
   (aid uint32 :offset-assert 48)
   )
  :method-count-assert 27
  :size-assert         #x34
  :flag-assert         #x1b00000034
  ;; Failed to read fields.
  (:methods
    (entity-method-22 (_type_) _type_ 22) ;; (birth! (_type_) _type_ 22)
    (entity-method-23 (_type_) _type_ 23) ;; (kill! (_type_) _type_ 23)
    (entity-method-24 () none 24) ;; (add-to-level! (_type_ level-group level actor-id) none 24)
    (entity-method-25 () none 25) ;; (remove-from-level! (_type_ level-group) _type_ 25)
    (entity-method-26 () none 26) ;; (get-level (_type_) level 26)
    )
  )

(deftype entity-camera (entity)
  ((connect connectable :inline :offset-assert 64)) ;; guess from jak 1
  :flag-assert #x1b00000050
  )

(declare-type nav-mesh basic)
(deftype entity-nav-mesh (entity)
  ((nav-mesh nav-mesh  :offset-assert  52))
  :method-count-assert 29
  :size-assert         #x38
  :flag-assert         #x1d00000038
  (:methods
    (entity-nav-mesh-method-27 (_type_) none 27)
    (debug-draw (_type_) none 28)
    )
  )

(declare-type race-mesh basic)
(deftype entity-race-mesh (entity)
  ((race-mesh race-mesh)
   )
  :flag-assert #x1d00000038
  (:methods
    (entity-race-mesh-method-27 () none 27)
    (entity-race-mesh-method-28 () none 28)
    )
  )

(define-extern entity-actor type)
(declare-type nav-poly structure)
(deftype entity-actor (entity)
  ((etype type :offset 56)
   (task  game-task :offset-assert 60)
   (kill-mask task-mask :offset 52)
   (vis-id int16 :offset-assert 62)
   (quat quaternion :inline :offset-assert 64)
   )
  :method-count-assert 33
  :size-assert         #x50
  :flag-assert         #x2100000050
  ;; Failed to read fields.
  (:methods
    (next-actor (_type_) entity-actor 27)
    (prev-actor (_type_) entity-actor 28)
    (entity-actor-method-29 () none 29) ;; (debug-print (_type_ symbol type) none 29)
    (entity-actor-method-30 () none 30) ;; (dummy-30 (_type_ entity-perm-status symbol) none 30)
    (entity-actor-method-31 (_type_ vector vector vector object float) nav-mesh 31)
    (entity-actor-method-32 (_type_ vector vector nav-poly float) nav-poly 32)
    )
  )

(deftype actor-reference (structure)
  ((actor basic   :offset-assert 0)
   (id    uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype actor-group (inline-array-class)
  ((data             actor-reference :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity-info (basic)
  ((ptype     type   :offset-assert 4)
   (package   string  :offset-assert 8)
   (art-group pair   :offset-assert 12)
   (pool      symbol  :offset-assert 16)
   (heap-size int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype actor-bank (basic)
  ((pause-dist meters  :offset-assert 4)
   (birth-dist meters  :offset-assert 8)
   (birth-max  int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *generate-actor-vis* symbol)
(define-extern *generate-actor-vis-start* symbol)
(define-extern *generate-actor-vis-output* symbol)
(define-extern *ACTOR-bank* actor-bank)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-vec-data-2d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert 0)
   (flag-rot-sy vector   :inline :offset-assert 16)
   (r-g-b-a     vector   :inline :offset-assert 32)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (rot         float            :offset 24)
   (flag        int32            :offset 16)
   (matrix      int32            :offset 20)
   (warp-turns  int32            :offset 16)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0) ;; guessed by decompiler
   (data64      uint64   6       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-2d (basic)
  ((num-sprites int32                       2 :offset-assert 4) ;; guessed by decompiler
   (num-valid   int32                       2 :offset-assert 12) ;; guessed by decompiler
   (vec-data    pointer                       :offset-assert 20) ;; guessed by decompiler
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24) ;; guessed by decompiler
   (pad         uint128                     4 :offset-assert 32) ;; guessed by decompiler
   (data        uint128                     1 :offset-assert 96) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype sprite-vec-data-3d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert 0)
   (qx-qy-qz-sy vector   :inline :offset-assert 16)
   (r-g-b-a     vector   :inline :offset-assert 32)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (qx          float            :offset 16)
   (qy          float            :offset 20)
   (qz          float            :offset 24)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (rot         vector3s :inline :offset 16)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-3d (basic)
  ((num-sprites int32                       2 :offset-assert 4) ;; guessed by decompiler
   (num-valid   int32                       2 :offset-assert 12) ;; guessed by decompiler
   (vec-data    pointer                       :offset-assert 20) ;; guessed by decompiler
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24) ;; guessed by decompiler
   (data        uint128                     1 :offset-assert 32) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-sprite-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-glow-data (structure)
  ((position   vector :inline :offset-assert 0)
   (size-x     float          :offset 12)
   (size-probe float          :offset-assert 16)
   (z-offset   float          :offset-assert 20)
   (rot-angle  float          :offset-assert 24)
   (size-y     float          :offset-assert 28)
   (color      rgbaf  :inline :offset-assert 32)
   (fade-a     float          :offset-assert 48)
   (fade-b     float          :offset-assert 52)
   (tex-id     uint32         :offset-assert 56)
   (dummy      uint32         :offset-assert 60)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (set-trans (_type_ vector) none 9)
    )
  )

(deftype simple-sprite-system (structure)
  ((count     int16   :offset-assert 0)
   (max-count int16   :offset-assert 2)
   (data      uint32  :offset-assert 4)
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (add! () none 9)
    (simple-sprite-system-method-10 (_type_ dma-buffer) none 10)
    (clear! (_type_) none 11)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; eye-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype eye (structure)
  ((data        vector 2 :inline :offset-assert 0) ;; guessed by decompiler
   (x           float    :offset 0)
   (y           float    :offset 4)
   (lid         float    :offset 8)
   (iris-scale  float    :offset 16)
   (pupil-scale float    :offset 20)
   (lid-scale   float    :offset 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype eye-control (structure)
  ((process        handle                              :offset-assert 0)
   (draw-flag      symbol                              :offset-assert 8)
   (different-eyes basic                               :offset-assert 12)
   (random-time    uint16                              :offset-assert 16)
   (bucket         uint16                              :offset-assert 18)
   (blink          float                               :offset-assert 20)
   (shaders        (inline-array adgif-shader)         :offset-assert 24) ;; guessed by decompiler
   (left           eye                         :inline :offset-assert 32)
   (right          eye                         :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype eye-control-array (basic)
  ((data eye-control 16 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x610
  :flag-assert         #x900000610
  )

(deftype eye-control-arrays (basic)
  ((data eye-control-array 6 :inline :offset-assert 16)
   (pad uint32)
   )
  :method-count-assert 9
  :size-assert         #x2474
  :flag-assert         #x900002474
  )

(deftype eye-work (structure)
  ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
   (blink-table  float          10      :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(define-extern *eye-control-arrays* eye-control-arrays)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-launcher-h           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; note: changed from jak 1, slightly.
(defenum sp-field-id
  :type uint16

  (misc-fields-start 0)
  (spt-texture 1)
  (spt-anim 2)
  (spt-anim-speed 3)
  (spt-birth-func 4)
  (spt-joint/refpoint 5)
  (spt-num 6)
  (spt-sound 7)
  (misc-fields-end 8)

  (sprite-fields-start 9)
  (spt-x 10)
  (spt-y 11)
  (spt-z 12)
  (spt-scale-x 13)
  (spt-rot-x 14)
  (spt-rot-y 15)
  (spt-rot-z 16)
  (spt-scale-y 17)
  (spt-r 18)
  (spt-g 19)
  (spt-b 20)
  (spt-a 21)
  (sprite-fields-end 22)

  (cpu-fields-start 23)
  (spt-omega 24)
  (spt-vel-x 25)
  (spt-vel-y 26)
  (spt-vel-z 27)
  (spt-scalevel-x 28)
  (spt-rotvel-x 29)
  (spt-rotvel-y 30)
  (spt-rotvel-z 31)
  (spt-scalevel-y 32)
  (spt-fade-r 33)
  (spt-fade-g 34)
  (spt-fade-b 35)
  (spt-fade-a 36)
  (spt-accel-x 37)
  (spt-accel-y 38)
  (spt-accel-z 39)
  (spt-dummy 40)
  (spt-quat-x 41)
  (spt-quat-y 42)
  (spt-quat-z 43)
  (spt-quad-w 44)
  (spt-friction 45)
  (spt-timer 46)
  (spt-flags 47)
  (spt-userdata 48)
  (spt-func 49)
  (spt-next-time 50)
  (spt-next-launcher 51)
  (cpu-fields-end 52)

  (launch-fields-start 53)
  (spt-launchrot-x 54)
  (spt-launchrot-y 55)
  (spt-launchrot-z 56)
  (spt-launchrot-w 57)
  (spt-conerot-x 58)
  (spt-conerot-y 59)
  (spt-conerot-z 60)
  (spt-conerot-w 61)
  (spt-rotate-x 62)
  (spt-rotate-y 63)
  (spt-rotate-z 64)

  (spt-conerot-radius 65)
  (spt-mat-scale-x 66)
  (spt-mat-scale-y 67)
  (spt-mat-scale-z 68)
  (launch-fields-end 69)

  (spt-scale 70)
  (spt-scalevel 71)
  (spt-end 72)
  )

;; appears the same as jak 1
(defenum sp-flag
  :type uint16
  (plain-v1 0) ;; just a plain signed integer. No random crap.
  (float-with-rand 1)
  (int-with-rand 2)
  (copy-from-other-field 3)
  (plain-v2 4)
  (from-pointer 5)
  (part-by-id 6)
  )

(defenum sp-group-item-flag
  :bitfield #t
  :type uint16
  (is-3d 0)
  (bit1 1)
  (start-dead 2)
  (launch-asap 3)
  (bit6 6)
  )

(defenum sp-launch-state-flags
  :bitfield #t
  :type uint16
  (launcher-active 0)        ;; active
  (particles-active 1) ;; wants to launch
  (bit2 2)
  )

;; +++sparticle-launcher-h:sp-group-flag
(defenum sp-group-flag
  :bitfield #t
  :type uint16
  (use-local-clock 0)
  (always-draw 1)
  (screen-space 2)
  (unk-3 3) ;; beach-part
  (unk-4 4)
  (unk-5 5)
  (unk-6 6)
  (unk-7 7)
  )
;; ---sparticle-launcher-h:sp-group-flag


(deftype sparticle-birthinfo (structure)
  ((sprite       uint32   :offset-assert 0)
   (anim         int32    :offset-assert 4)
   (anim-speed   float    :offset-assert 8)
   (birth-func   basic    :offset-assert 12)
   (joint-ppoint int32    :offset-assert 16)
   (num-to-birth float    :offset-assert 20)
   (sound        basic    :offset-assert 24)
   (dataf        float  1 :offset 0) ;; guessed by decompiler
   (data         uint32 1 :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype sp-field-init-spec (structure)
  ((field          sp-field-id :offset-assert 0)
   (flags          sp-flag     :offset-assert 2)
   (initial-valuef float       :offset-assert 4)
   (random-rangef  float       :offset-assert 8)
   (random-multf   float       :offset-assert 12)
   (initial-value  int32       :offset 4)
   (random-range   int32       :offset 8)
   (random-mult    int32       :offset 12)
   (func           symbol      :offset 4) ;; guessed by decompiler
   (tex            texture-id  :offset 4) ;; guessed by decompiler
   (pntr           pointer     :offset 4) ;; guessed by decompiler
   (object         basic       :offset 4)
   (sym            symbol      :offset 4) ;; guessed by decompiler
   (sound          sound-spec  :offset 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  ;; field object uses ~A with a signed load
  )

(deftype sparticle-launcher (basic)
  ((birthaccum float                              :offset-assert 4)
   (soundaccum float                              :offset-assert 8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (get-field-spec-by-id
      "Returns the [[sp-field-init-spec]] that has the matching [[sp-field-id]]"
      (_type_ sp-field-id) sp-field-init-spec 9)
    (sparticle-launcher-method-10 (_type_ string) none 10)
    )
  )

(deftype sparticle-group-item (structure)
  ((launcher   uint32  :offset-assert 0)
   (fade-after meters  :offset-assert 4)
   (falloff-to meters  :offset-assert 8)
   (flags      sp-group-item-flag  :offset-assert 12)
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     int16   :offset-assert 18) ;; uint16
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(declare-type sparticle-cpuinfo structure)

(deftype sparticle-launch-state (structure)
  ((group-item sparticle-group-item  :offset-assert 0)
   (flags      sp-launch-state-flags :offset-assert 4)
   (randomize  uint16                :offset-assert 6)
   (center     vector                :offset-assert 8)
   (sprite3d   sprite-vec-data-3d    :offset-assert 12)
   (sprite     sparticle-cpuinfo     :offset-assert 16) ;; guessed by decompiler
   (offset     uint32                :offset-assert 20)
   (accum      float                 :offset-assert 24)
   (spawn-time uint32                :offset-assert 28)
   (control    basic                 :offset-assert 32)
   (swarm      basic                 :offset 20)
   (seed       uint32                :offset 24)
   (time       uint32                :offset 28)
   (spec       basic                 :offset 16)
   (id         uint32                :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype sparticle-launch-group (basic)
  ((length          int16                                       :offset-assert 4)
   (duration        uint16                                      :offset-assert 6)
   (linger-duration uint16                                      :offset-assert 8)
   (flags           sp-group-flag                               :offset-assert 10)
   (name            string                                      :offset-assert 12) ;; guessed by decompiler
   (launcher        (inline-array sparticle-group-item)         :offset-assert 16) ;; guessed by decompiler
   (rotate-x        degrees                                     :offset-assert 20)
   (rotate-y        degrees                                     :offset-assert 24)
   (rotate-z        degrees                                     :offset-assert 28)
   (scale-x         float                                       :offset-assert 32)
   (scale-y         float                                       :offset-assert 36)
   (scale-z         float                                       :offset-assert 40)
   (bounds          sphere                              :inline :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control 9) ;;
    )
  )

(deftype sparticle-launch-control (inline-array-class)
  ((group            sparticle-launch-group          :offset-assert 16) ;; guessed by decompiler
   (proc             process-drawable                         :offset-assert 20) ;; guessed by decompiler
   (local-clock      int32                           :offset-assert 24)
   (fade             float                           :offset-assert 28)
   (matrix           int8                            :offset-assert 32) ;; int32
   (state-mode       uint8                  3        :offset-assert 33)
   (state-counter    uint32                          :offset-assert 36)
   (last-spawn-frame int32                           :offset-assert 40)
   (last-spawn-time  int32                           :offset-assert 44)
   (origin           matrix                 :inline  :offset-assert 48)
   (center           vector                 :inline  :offset 96)
   (data             sparticle-launch-state :dynamic :inline :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 16
  :size-assert         #x70
  :flag-assert         #x1000000070
  (:methods
    (initialize (_type_ sparticle-launch-group process) none 9) ;;
    (sparticle-launch-control-method-10 (_type_ vector) symbol 10) ;; (is-visible? (_type_ vector) symbol 10)
    (sparticle-launch-control-method-11 (_type_ vector) none 11) ;; TODO - CFG ;; (spawn (_type_ vector) object 11)
    (sparticle-launch-control-method-12 (_type_ matrix) none 12)
    (sparticle-launch-control-method-13 (_type_ cspace) none 13)
    (kill-and-free-particles (_type_) none 14)
    (kill-particles (_type_) none 15)
    )
  )

(define-extern *launch-matrix* matrix)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++sparticle-h:sp-cpuinfo-flag
(defenum sp-cpuinfo-flag
  :bitfield #t
  :type uint32
  (sp-cpuinfo-flag-0 0)
  (sp-cpuinfo-flag-1 1)
  (sp-cpuinfo-flag-2 2)     ;; cleared after an aux has its func set to add-to-sprite-aux-lst
  (sp-cpuinfo-flag-3 3)
  (sp-cpuinfo-flag-4 4)
  (sp-cpuinfo-flag-5 5)
  (ready-to-launch 6) ;; maybe just just death?
  (distort 7) ;; distort sprite
  (aux-list 8)     ;; prevents relaunch, adds to aux
  (sp-cpuinfo-flag-9 9)
  (level0 10)
  (level1 11)
  (sp-cpuinfo-flag-12 12)   ;; required to relaunch
  (sp-cpuinfo-flag-13 13)
  (sp-cpuinfo-flag-14 14)
  (glow 15) ;; glow sprite
  (use-global-acc 16)
  (launch-along-z 17)
  (left-multiply-quat 18)
  (right-multiply-quat 19)
  (set-conerot 20)
  (sp-cpuinfo-flag-21 21)
  )
;; ---sparticle-h:sp-cpuinfo-flag

(declare-type sparticle-system basic)
(deftype sparticle-cpuinfo (structure)
  ((sprite        sprite-vec-data-2d               :offset-assert 0)
   (adgif         adgif-shader                     :offset-assert 4)
   (radius        float                            :offset-assert 8)
   (omega         float                            :offset-assert 12)
   (vel-sxvel     vector                   :inline :offset-assert 16) ;; these are used interchangably as vector3s' as well
   (rot-syvel     vector                   :inline :offset-assert 32)
   (fade          rgbaf                    :inline :offset-assert 48)
   (acc           vector                   :inline :offset-assert 64)
   (rotvel3d      quaternion               :inline :offset-assert 80)
   (vel           vector                 :inline :offset 16)
   (accel         vector                 :inline :offset 64)
   (scalevelx     float                            :offset 28)
   (scalevely     float                            :offset 44)
   (friction      float                            :offset-assert 96)
   (timer         int32                            :offset-assert 100)
   (flags         sp-cpuinfo-flag                  :offset-assert 104) ;; NOTE - loaded with lw and lwu?
   (user-int32    int32                            :offset-assert 108)
   (user-uint32   uint32                           :offset 108)
   (user-float    float                            :offset 108 :score 1)
   (user-pntr     uint32                           :offset 108)
   (user-object   basic                            :offset 108)
   (user-sprite   sprite-vec-data-2d               :offset 108)
   (sp-func       (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none)                             :offset-assert 112)
   (next-time     uint32                           :offset-assert 116)
   (next-launcher basic                            :offset-assert 120)
   (cache-alpha   float                            :offset-assert 124)
   (valid         uint8                            :offset-assert 128) ;; symbol
   (clock-index   uint8                            :offset-assert 129)
   (user1-int16   uint16                           :offset-assert 130)
   (key           sparticle-launch-control         :offset-assert 132)
   (key-alt       sparticle-launch-state           :offset 132)
   (binding       sparticle-launch-state           :offset-assert 136)
   (data          uint32                   1       :offset 12) ;; guessed by decompiler
   (datab         uint8                    4       :offset 12)
   (dataf         float                    1       :offset 12) ;; guessed by decompiler
   (datac         uint8                    1       :offset 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  ;; field user-object uses ~A with a signed load field key uses ~A with a signed load
  )

(deftype sparticle-launchinfo (structure)
  ((launchrot  vector :inline :offset-assert 0) ; NOTE - both used as a vector3s and a normal vector
   (conerot    vector :inline :offset-assert 16)
   (rotate-x   float          :offset-assert 32)
   (rotate-y   float          :offset-assert 36)
   (rotate-z   float          :offset-assert 40)
   (coneradius float          :offset-assert 44)
   (rotate     vector :inline :offset 32)
   (scale-x    float          :offset 48)
   (scale-y    float          :offset 52)
   (scale-z    float          :offset 56)
   (dummy      float          :offset 60)
   (scale      vector :inline :offset 48)
   (data       uint8  1       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sparticle-system (basic)
  ((blocks          int32                            2 :offset-assert 4) ;; guessed by decompiler
   (length          int32                            2 :offset-assert 12) ;; guessed by decompiler
   (num-alloc       int32                            2 :offset-assert 20) ;; guessed by decompiler
   (is-3d           basic                              :offset-assert 28)
   (flags           uint32                             :offset-assert 32)
   (alloc-table     (pointer uint64)                   :offset-assert 36) ;; guessed by decompiler
   (cpuinfo-table   (inline-array sparticle-cpuinfo)   :offset-assert 40) ;; guessed by decompiler
   (vecdata-table   pointer                            :offset-assert 44) ;; guessed by decompiler
   (adgifdata-table (inline-array adgif-shader)        :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  (:methods
    (new (symbol type int int symbol pointer (inline-array adgif-shader)) _type_ 0))
  )

(define-extern *sp-60-hz* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-link-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype actor-link-info (basic)
  ((process process       :offset-assert 4) ;; guessed by decompiler
   (next    entity-actor  :offset-assert 8) ;; guessed by decompiler
   (prev    entity-actor  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x10
  :flag-assert         #x1a00000010
  (:methods
    (new (symbol type process symbol) _type_ 0)
    (get-matching-actor-type-mask (_type_ type) int 9)
    (actor-count-before (_type_) int 10)
    (link-to-next-and-prev-actor (_type_) actor-link-info 11)
    (get-next (_type_) entity-actor 12)
    (get-prev (_type_) entity-actor 13)
    (get-next-process (_type_) process 14)
    (get-prev-process (_type_) process 15)
    (apply-function-forward (_type_ (function entity-actor object object) object) int 16)
    (apply-function-reverse (_type_ (function entity-actor object object) object) int 17)
    (apply-all (_type_ (function entity-actor object object) object) int 18)
    (send-to-all (_type_ symbol) none 19)
    (send-to-all-after (_type_ symbol) object 20)
    (send-to-all-before (_type_ symbol) object 21)
    (send-to-next-and-prev (_type_ symbol) none 22)
    (send-to-next (_type_ symbol) none 23)
    (send-to-prev (_type_ symbol) none 24)
    (actor-count (_type_) int 25)
    )
  )

(define-extern entity-actor-lookup (function res-lump symbol int entity-actor))
(define-extern entity-actor-count (function res-lump symbol int))
(define-extern actor-link-subtask-complete-hook (function entity-actor (pointer symbol) symbol))
(define-extern actor-link-subtask-incomplete-count-hook (function entity-actor (pointer uint64) symbol))
(define-extern actor-link-dead-hook (function entity-actor (pointer symbol) symbol))
(define-extern alt-actor-list-subtask-incomplete-count (function process-drawable int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; +++camera-h:cam-index-options
(defenum cam-index-options
  :type uint32
  :bitfield #t
  (RADIAL)
  (SPHERICAL)
  )
;; ---camera-h:cam-index-options

;; +++camera-h:slave-los-state
(defenum slave-los-state
  :type uint32
  (none 0)
  (cw 1)
  (ccw 2)
  (between 3)
  )
;; ---camera-h:slave-los-state

(deftype cam-index (structure)
  ((flags cam-index-options   :offset-assert 0) ;; guessed by decompiler
   (vec   vector            2 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (cam-index-method-9 (_type_ symbol entity vector curve) symbol 9)
    (cam-index-method-10 (_type_ vector) float 10)
    )
  )

(deftype tracking-point (structure)
  ((position    vector :inline :offset-assert 0)
   (direction   vector :inline :offset-assert 16)
   (tp-length   float          :offset-assert 32)
   (next        int32          :offset-assert 36)
   (incarnation int32          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype tracking-spline-sampler (structure)
  ((cur-pt     int32  :offset-assert 0)
   (partial-pt float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype tracking-spline (structure)
  ((point              tracking-point 32 :inline      :offset-assert 0) ;; guessed by decompiler
   (summed-len         float                  :offset-assert 1536)
   (free-point         int32                  :offset-assert 1540)
   (used-point         int32                  :offset-assert 1544)
   (partial-point      float                  :offset-assert 1548)
   (end-point          int32                  :offset-assert 1552)
   (next-to-last-point int32                  :offset-assert 1556)
   (max-move           float                  :offset-assert 1560)
   (sample-len         float                  :offset-assert 1564)
   (used-count         int32                  :offset-assert 1568)
   (old-position       vector         :inline :offset-assert 1584)
   (debug-old-position vector         :inline :offset-assert 1600)
   (debug-out-position vector         :inline :offset-assert 1616)
   (debug-last-point   int32                  :offset-assert 1632)
   )
  :method-count-assert 24
  :size-assert         #x664
  :flag-assert         #x1800000664
  (:methods
    (tracking-spline-method-9 (_type_) none 9)
    (tracking-spline-method-10 (_type_ vector) none 10)
    (debug-point-info (_type_ int) none 11)
    (debug-all-points (_type_) none 12)
    (tracking-spline-method-13 (_type_ int) none 13)
    (tracking-spline-method-14 (_type_ tracking-spline-sampler) none 14)
    (tracking-spline-method-15 (_type_) none 15)
    (tracking-spline-method-16 (_type_ float) none 16)
    (tracking-spline-method-17 (_type_ vector float float symbol) int 17)
    (tracking-spline-method-18 (_type_ float vector tracking-spline-sampler) vector 18)
    (tracking-spline-method-19 (_type_ float vector tracking-spline-sampler) vector 19)
    (tracking-spline-method-20 (_type_ vector int) none 20)
    (tracking-spline-method-21 (_type_ vector float float float) vector 21)
    (tracking-spline-method-22 (_type_ float) none 22)
    (debug-draw-spline (_type_) none 23)
    )
  )

(deftype cam-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x18
  :flag-assert         #xd00000018
  (:methods
    (init (_type_ float float float float) none 9)
    (copy-to (_type_ _type_) none 10)
    (update! (_type_ float) none 11)
    (jump-to-target! (_type_ float) float 12)
    )
  )

(deftype cam-vector-seeker (structure)
  ((target      vector :inline :offset-assert 0)
   (value       vector :inline :offset-assert 16)
   (vel         vector :inline :offset-assert 32)
   (accel       float          :offset-assert 48)
   (max-vel     float          :offset-assert 52)
   (max-partial float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (init (_type_ vector float float float) none 9)
    (update! (_type_ vector) none 10)
    )
  )

(deftype cam-rotation-tracker (structure)
  ((inv-mat                 matrix           :inline :offset-assert 0)
   (no-follow               basic                    :offset-assert 64)
   (follow-pt               vector           :inline :offset-assert 80)
   (follow-off              vector           :inline :offset-assert 96)
   (follow-blend            float                    :offset-assert 112)
   (tilt-adjust             cam-float-seeker :inline :offset-assert 116)
   (point-of-interest-blend cam-float-seeker :inline :offset-assert 140)
   (underwater-blend        cam-float-seeker :inline :offset-assert 164)
   (looking-at              vector           :inline :offset-assert 192)
   (looking-interesting     vector           :inline :offset-assert 208)
   (old-cam-trans           vector           :inline :offset-assert 224)
   (follow-height-extra     cam-float-seeker :inline :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x108
  :flag-assert         #x900000108
  )

(deftype camera-combiner (process)
  ((trans             vector               :inline :offset-assert 128 :score 999)
   (inv-camera-rot    matrix               :inline :offset-assert 144 :score 999)
   (fov               float                        :offset-assert 208)
   (interp-val        float                        :offset-assert 212)
   (interp-step       float                        :offset-assert 216)
   (dist-from-src     float                        :offset-assert 220)
   (dist-from-dest    float                        :offset-assert 224)
   (flip-control-axis vector               :inline :offset-assert 240)
   (velocity          vector               :inline :offset-assert 256)
   (tracking-status   uint64                       :offset-assert 272)
   (tracking-options  int32                        :offset-assert 280)
   (tracking          cam-rotation-tracker :inline :offset-assert 288)
   (fast-rot          basic                        :offset-assert 552)
   )
  :method-count-assert 14
  :size-assert         #x22c
  :flag-assert         #xe01b0022c
  )

;; +++camera-h:camera-blend-to-type
(defenum camera-blend-to-type
  :type uint64
  (unknown-0 0)
  (unknown-1 1)
  (unknown-2 2))
;; ---camera-h:camera-blend-to-type

(deftype camera-slave (process)
  ((trans                         vector               :inline :offset-assert 128 :score 999)
   (fov                           float                        :offset-assert 144)
   (fov0                          float                        :offset-assert 148)
   (fov1                          float                        :offset-assert 152)
   (fov-index                     cam-index            :inline :offset-assert 160)
   (tracking                      cam-rotation-tracker :inline :offset-assert 208)
   (view-off-param                float                        :offset-assert 472)
   (view-off                      vector               :inline :offset-assert 480)
   (joystick-saved-view-off       vector               :inline :offset-assert 496)
   (min-z-override                float                        :offset-assert 512)
   (view-flat                     vector               :inline :offset-assert 528)
   (string-vel-dir                uint32                       :offset-assert 544)
   (string-trans                  vector               :inline :offset-assert 560)
   (position-spline               tracking-spline      :inline :offset-assert 576)
   (pivot-pt                      vector               :inline :offset-assert 2224)
   (pivot-rad                     float                        :offset-assert 2240)
   (circular-follow               vector               :inline :offset-assert 2256)
   (max-angle-offset              float                        :offset-assert 2272)
   (max-angle-curr                float                        :offset-assert 2276)
   (options                       uint32                       :offset-assert 2280) ;; TODO - this is likely a cam-slave-options but the size is wrong?
   (cam-entity                    entity                       :offset-assert 2284) ;; guessed by decompiler
   (butt-timer                    uint64                       :offset-assert 2288)
   (butt-seek                     basic                        :offset-assert 2296)
   (butt-vector                   vector               :inline :offset-assert 2304)
   (velocity                      vector               :inline :offset-assert 2320)
   (desired-pos                   vector               :inline :offset-assert 2336)
   (time-dist-too-far             uint32                       :offset-assert 2352)
   (los-state                     slave-los-state              :offset-assert 2356) ;; guessed by decompiler
   (good-point                    vector               :inline :offset-assert 2368)
   (los-tgt-spline-pt             int32                        :offset-assert 2384)
   (los-tgt-spline-pt-incarnation int32                        :offset-assert 2388)
   (los-last-pos                  vector               :inline :offset-assert 2400)
   (intro-curve                   curve                :inline :offset-assert 2416)
   (intro-offset                  vector               :inline :offset-assert 2448)
   (intro-t                       float                        :offset-assert 2464)
   (intro-t-step                  float                        :offset-assert 2468)
   (outro-exit-value              float                        :offset-assert 2472)
   (spline-exists                 basic                        :offset-assert 2476)
   (spline-curve                  curve                :inline :offset-assert 2480)
   (spline-offset                 vector               :inline :offset-assert 2512)
   (index                         cam-index            :inline :offset-assert 2528)
   (saved-pt                      vector               :inline :offset-assert 2576)
   (spline-tt                     float                        :offset-assert 2592)
   (spline-follow-dist            float                        :offset-assert 2596)
   (enter-has-run                 symbol                       :offset-assert 2600) ;; guessed by decompiler
   (blend-from-type               uint64                       :offset-assert 2608)
   (blend-to-type                 camera-blend-to-type         :offset-assert 2616)
   (have-phony-joystick           basic                        :offset-assert 2624)
   (phony-joystick-x              float                        :offset-assert 2628)
   (phony-joystick-y              float                        :offset-assert 2632)
   (string-min-val                vector               :inline :offset-assert 2640)
   (string-max-val                vector               :inline :offset-assert 2656)
   (string-val-locked             basic                        :offset-assert 2672)
   (relative-position             vector               :inline :offset-assert 2688)
   (string-relative               basic                        :offset-assert 2704)
   )
  :method-count-assert 14
  :size-assert         #xa94
  :flag-assert         #xe0a200a94
  (:states
    cam-really-fixed
    cam-fixed
    cam-fixed-read-entity
    cam-pov
    cam-pov180
    cam-pov-track
    cam-standoff
    cam-standoff-read-entity
    cam-eye
    cam-spline
    cam-decel
    cam-endlessfall
    cam-circular
    cam-lookat
    cam-string
    cam-stick
    cam-bike
    cam-robotboss ;; TODO - state docstrings "A holdout from jak 1?"
    cam-point-watch
    cam-free-floating))

(deftype camera-master (process)
  ((master-options      uint32                           :offset-assert 128)
   (settings            cam-setting-data                 :offset-assert 132)
   (slave               (pointer camera-slave)           :offset-assert 136) ;; guessed by decompiler
   (decel               (pointer camera-slave)           :offset-assert 140) ;; a total guess that is probably wrong!
   (slave-options       uint32                           :offset-assert 144)
   (view-off-param-save float                            :offset-assert 148)
   (changer             uint32                           :offset-assert 152)
   (string-min          cam-vector-seeker        :inline :offset-assert 160)
   (string-max          cam-vector-seeker        :inline :offset-assert 224)
   (string-push-z       float                            :offset-assert 284)
   (local-down          vector                   :inline :offset-assert 288)
   (focus               focus                    :inline :offset-assert 304)
   (being-attacked      symbol                           :offset-assert 316) ;; guessed by decompiler
   (attack-start        time-frame                       :offset-assert 320) ;; time-frame
   (on-ground           symbol                           :offset-assert 328) ;; guessed by decompiler
   (under-water         int32                            :offset-assert 332)
   (on-pole             symbol                           :offset-assert 336) ;; guessed by decompiler
   (tgt-rot-mat         matrix                   :inline :offset-assert 352)
   (tgt-face-mat        matrix                   :inline :offset-assert 416)
   (tpos-old            vector                   :inline :offset-assert 480)
   (tpos-curr           vector                   :inline :offset-assert 496)
   (tpos-old-adj        vector                   :inline :offset-assert 512)
   (tpos-curr-adj       vector                   :inline :offset-assert 528)
   (tpos-tgt            vector                   :inline :offset-assert 544)
   (upspeed             float                            :offset-assert 560)
   (pitch-off           vector                   :inline :offset-assert 576)
   (target-spline       tracking-spline          :inline :offset-assert 592)
   (ease-from           vector                   :inline :offset-assert 2240)
   (ease-t              float                            :offset-assert 2256)
   (ease-step           float                            :offset-assert 2260)
   (ease-to             vector                   :inline :offset-assert 2272)
   (outro-curve         curve                    :inline :offset-assert 2288)
   (outro-t             float                            :offset-assert 2308)
   (outro-t-step        float                            :offset-assert 2312)
   (outro-exit-value    float                            :offset-assert 2316)
   (water-drip-time     time-frame                       :offset-assert 2320) ;; time-frame
   (water-drip          sparticle-launch-control         :offset-assert 2328) ;; guessed by decompiler
   (water-drip-mult     float                            :offset-assert 2332)
   (water-drip-speed    float                            :offset-assert 2336)
   )
  :method-count-assert 17
  :size-assert         #x924
  :flag-assert         #x1108b00924
  (:methods
    (camera-master-method-14 (_type_ vector) vector 14)
    (camera-master-method-15 (_type_ vector) vector 15)
    (camera-master-method-16 (_type_ symbol) none 16)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-debug-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *redline-table* (pointer float))
(define-extern *redline-index* int)
(define-extern float-save-redline (function float none))
(define-extern float-lookup-redline (function float float))
(define-extern *blueline-table* (pointer float))
(define-extern *blueline-index* int)
(define-extern float-save-blueline (function float none))
(define-extern float-lookup-blueline (function float float))
(define-extern *greenline-table* (pointer float))
(define-extern *greenline-index* int)
(define-extern float-save-greenline (function float none))
(define-extern float-lookup-greenline (function float float))
(define-extern *yellowline-table* (pointer float))
(define-extern *yellowline-index* int)
(define-extern float-save-yellowline (function float none))
(define-extern float-lookup-yellowline (function float float))
(define-extern *timeplot-table* (pointer float))
(define-extern *timeplot-index* int)
(define-extern float-save-timeplot (function float none))
(define-extern float-lookup-timeplot (function float float))
(define-extern *cam-layout* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-interface-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *camera-init-mat* matrix)
(define-extern *camera* camera-master)
(define-extern *camera-combiner* camera-combiner)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-update-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum external-cam-option
  :bitfield #t
  (allow-z 0)
  )

(define-extern *external-cam-options* external-cam-option)
(define-extern *external-cam-mode* symbol)
(define-extern *camera-look-through-other*  int)
(define-extern *camera-other-fov*  bfloat)
(define-extern *camera-other-trans*  vector)
(define-extern *camera-other-matrix*  matrix)
(define-extern *camera-smush-control*  smush-control)
(define-extern *camera-other-root*  vector)
(define-extern *fix-visible-level-mask* int)
(define-extern *manual-sample-point* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype hud-string (basic)
  ((text  string           :offset-assert 4)
   (scale float            :offset-assert 8)
   (color uint32           :offset-assert 12)
   (flags uint32           :offset-assert 16)
   (pos   vector4w :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype hud-sprite (structure)
  ((pos     vector4w :inline :offset-assert 0)
   (color   vector4w :inline :offset-assert 16)
   (flags   uint32           :offset-assert 32)
   (scale-x float            :offset-assert 36)
   (scale-y float            :offset-assert 40)
   (angle   float            :offset-assert 44)
   (tex     basic            :offset-assert 48)
   )
  :method-count-assert 11
  :size-assert         #x34
  :flag-assert         #xb00000034
  (:methods
    (hud-sprite-method-9 () none 9)
    (hud-sprite-method-10 () none 10)
    )
  )

(deftype hud-box (structure)
  ((min   vector2  :inline :offset-assert 0)
   (max   vector2  :inline :offset-assert 8)
   (color vector4w :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x20
  :flag-assert         #x1000000020
  (:methods
    (hud-box-method-9 () none 9)
    (hud-box-method-10 () none 10)
    (hud-box-method-11 () none 11)
    (hud-box-method-12 () none 12)
    (hud-box-method-13 () none 13)
    (hud-box-method-14 () none 14)
    (hud-box-method-15 () none 15)
    )
  )

(deftype hud-icon (basic)
  ((icon    (pointer manipy)         :offset-assert 4) ;; guessed by decompiler
   (pos     vector4w         :inline :offset-assert 16)
   (scale-x float                    :offset-assert 32)
   (scale-y float                    :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype hud-value (basic)
  ((current int32   :offset-assert 4)
   (target  int32   :offset-assert 8)
   (flags   uint16  :offset-assert 12)
   (counter uint16  :offset-assert 14)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum hud-flags
  :type uint32
  :bitfield #t
  )
(deftype hud (process)
  ((trigger-time   time-frame      :offset-assert 128) ;; time-frame
   (last-hide-time time-frame      :offset-assert 136) ;; time-frame
   (offset         float       :offset-assert 144) ;; int32
   (flags          hud-flags   :offset-assert 148)
   (values         hud-value  8 :inline :offset-assert 152)
   (strings        hud-string  14 :inline :offset-assert 288)
   (sprites        hud-sprite  30 :inline :offset-assert 960)
   (icons          hud-icon 2  :inline :offset-assert 2880) ;; guessed by decompiler
   (gui-id         uint32      :offset-assert 2976)
   )
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    (hud-method-14 () none 14) ;; (hidden? (_type_) symbol 14)
    (hud-method-15 () none 15) ;; (draw-hud (_type_) none 15)
    (hud-method-16 () none 16) ;; (tally-value (_type_ int int) none 16)
    (hud-method-17 () none 17) ;; (draw-icons (_type_) none 17)
    (hud-method-18 () none 18) ;; (draw-particles (_type_) none 18)
    (hud-method-19 () none 19) ;; (hud-update (_type_) none 19)
    (hud-method-20 () none 20) ;; (init-particles! (_type_ int) none 20)
    (hud-method-21 () none 21) ;; (get-icon-pos-x (_type_) int 21)
    (hud-method-22 () none 22) ;; (get-icon-pos-y (_type_) int 22)
    (hud-method-23 () none 23) ;; (dummy-23 (_type_) none 23)
    (hud-method-24 () none 24) ;; (set-pos-and-scale (_type_ symbol symbol) none 24)
    (hud-method-25 () none 25) ;; (get-icon-scale-x (_type_) float 25)
    (hud-method-26 () none 26) ;; (get-icon-scale-y (_type_) float 26)
    )
  )

(deftype hud-ashelin (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-cargo (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-citizen (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-cpanel (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-dig-clasp (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-gun (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-dark-eco-symbol (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-helldog (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-lurker (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-map (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-moneybag (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-pegasus (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-plasmite (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-dig-button (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-predator (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-heatmeter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-progress (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-rocketsensor (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-ruffians (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-score (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-sig (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-skill (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-skullgem (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-timer (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-turret (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-squid (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-gunturret (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-gruntegg (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-crimsonhover (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-metalkor (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-big-score (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-goal (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-miss (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-timer (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-lap-counter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-turbo-counter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-position (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-map (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-samos-old (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-samos-young (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-lurker-button (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-widow (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-race-final-stats (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-mech-air-tank (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-homing-beacon (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-dark-eco-pickup (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )

(deftype hud-green-eco-pickup (hud)
  ()
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype progress (process-drawable)
  ((current-options    basic              :offset-assert 200)
   (menu-transition    float              :offset-assert 204)
   (option-index       int32              :offset-assert 208)
   (want-option-index  int32              :offset-assert 212)
   (next-option-index  int32              :offset-assert 216)
   (graphic-index      int32              :offset-assert 220)
   (selected-option    basic              :offset-assert 224)
   (current            basic              :offset-assert 228)
   (next               basic              :offset-assert 232)
   (ring-angle         float              :offset-assert 236)
   (ring-want-angle    float              :offset-assert 240)
   (init-quat          quaternion :inline :offset-assert 256)
   (pos-transition     float              :offset-assert 272)
   (anim-frame         float              :offset-assert 276)
   (swing              float              :offset-assert 280)
   (main-menu          basic              :offset-assert 284)
   (state-stack        int32      5       :offset-assert 288)
   (option-index-stack int32      5       :offset-assert 308) ;; guessed by decompiler
   (state-pos          int32              :offset-assert 328)
   (secret-buying      basic              :offset-assert 332)
   (secret-buy-choice  basic              :offset-assert 336)
   (sliding            float              :offset-assert 340)
   (sliding-off        float              :offset-assert 344)
   (scanlines-alpha    float              :offset-assert 348)
   (sliding-height     float              :offset-assert 352)
   )
  :method-count-assert 33
  :size-assert         #x164
  :flag-assert         #x2100f00164
  (:methods
    (progress-method-20 () none 20) ;; (hidden? (_type_) symbol 20)
    (progress-method-21 () none 21) ;; (adjust-sprites (_type_) none 21)
    (progress-method-22 () none 22) ;; (adjust-icons (_type_) none 22)
    (progress-method-23 () none 23) ;; (adjust-ratios (_type_ symbol symbol) none 23)
    (progress-method-24 () none 24) ;; (draw-fuel-cell-screen (_type_ int) none 24)
    (progress-method-25 () none 25) ;; (draw-money-screen (_type_ int) none 25)
    (progress-method-26 () none 26) ;; (draw-buzzer-screen (_type_ int) none 26)
    (progress-method-27 () none 27) ;; (draw-notice-screen (_type_) none 27)
    (progress-method-28 () none 28) ;; (draw-options (_type_ int int float) none 28)
    (progress-method-29 () none 29) ;; (respond-common (_type_) none 29)
    (progress-method-30 () none 30) ;; (respond-progress (_type_) none 30)
    (progress-method-31 () none 31) ;; (respond-memcard (_type_) none 31)
    (progress-method-32 () none 32) ;; (can-go-back? (_type_) symbol 32)
    )
  )

(deftype menu-option (basic)
  ((name  uint32    :offset-assert 4)
   (scale basic     :offset-assert 8)
   (box   bounding-box  1 :inline :offset-assert 16) ;; no idea
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (menu-option-method-9 () none 9)
    (menu-option-method-10 () none 10)
    (menu-option-method-11 () none 11)
    )
  )

(deftype menu-on-off-option (menu-option)
  ((value-to-modify uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    )
  )

(deftype menu-yes-no-option (menu-option)
  ((value-to-modify uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    )
  )

(deftype menu-language-option (menu-option)
  ((language-selection  uint64  :offset-assert 48)
   (language-direction  basic   :offset-assert 56)
   (language-transition basic   :offset-assert 60)
   (language-x-offset   int32   :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-quit-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-slider-option (menu-option)
  ((value-to-modify uint32    :offset-assert 48)
   (sprites         hud-sprite 5 :inline :offset-assert 64) ;; guess
   )
  :method-count-assert 12
  :size-assert         #x180
  :flag-assert         #xc00000180
  (:methods
    )
  )

(deftype menu-sub-menu-option (menu-option)
  ((next-state basic  :offset-assert 48)
   (pad uint8 44)
   )
  :method-count-assert 12
  :size-assert         #x60
  :flag-assert         #xc00000060
  (:methods
    )
  )

(deftype menu-sub-menu-sound-option (menu-option)
  ((next-state basic  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    )
  )

(deftype menu-stereo-mode-sound-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-sub-menu-graphic-option (menu-option)
  ((next-state basic  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    )
  )

(deftype menu-unlocked-menu-option (menu-sub-menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x60
  :flag-assert         #xc00000060
  (:methods
    )
  )

(deftype menu-main-menu-option (menu-option)
  ((next-state basic  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    )
  )

(deftype menu-memcard-slot-option (menu-option)
  ((sprites hud-sprite 5 :inline :offset-assert 48) ;; total guess
   (pad uint8 32)
   )
  :method-count-assert 12
  :size-assert         #x190
  :flag-assert         #xc00000190
  (:methods
    )
  )

(deftype menu-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-insufficient-space-option (menu-option)
  ((last-move uint64  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x38
  :flag-assert         #xc00000038
  (:methods
    )
  )

(deftype menu-secrets-insufficient-space-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-insert-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-error-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-error-auto-saving-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-card-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-error-disc-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-error-reading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-icon-info-option (menu-option)
  ((sprites hud-sprite 2 :inline :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #xb0
  :flag-assert         #xc000000b0
  (:methods
    )
  )

(deftype menu-format-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-already-exists-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-create-game-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-video-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-video-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-progressive-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-progressive-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype menu-select-start-option (menu-option)
  ((task-index      int32   :offset-assert 48)
   (real-task-index int32   :offset-assert 52)
   (last-move       uint64  :offset-assert 56)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-select-scene-option (menu-option)
  ((task-index int32   :offset-assert 48)
   (last-move  uint64  :offset-assert 56)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-bigmap-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )

(deftype paged-menu-option (menu-option)
  ((page-index      int32  :offset-assert 48)
   (prev-page-index int32  :offset-assert 52)
   (num-pages       int32  :offset-assert 56)
   (slide-dir       float  :offset-assert 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-missions-option (paged-menu-option)
  ((task-line-index int32   :offset-assert 64)
   (last-move       uint64  :offset-assert 72)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    )
  )

(deftype menu-highscores-option (paged-menu-option)
  ((last-move uint64    :offset-assert 64)
   (sprites   hud-sprite 2 :inline :offset-assert 80)
   )
  :method-count-assert 12
  :size-assert         #xd0
  :flag-assert         #xc000000d0
  (:methods
    )
  )

(deftype secret-item-option (menu-option)
  ((cost        int32   :offset-assert 48)
   (can-toggle  basic   :offset-assert 52)
   (flag        uint32  :offset-assert 56)
   (avail-after uint16  :offset-assert 60)
   )
  :method-count-assert 12
  :size-assert         #x3e
  :flag-assert         #xc0000003e
  (:methods
    )
  )

(deftype menu-secret-option (menu-option)
  ((item-index      int32     :offset-assert 48)
   (prev-item-index int32     :offset-assert 52)
   (num-items       int32     :offset-assert 56)
   (num-hero-items  int32     :offset-assert 60)
   (secret-items    basic     :offset-assert 64)
   (last-move       uint64    :offset-assert 72)
   (sprites         hud-sprite 2 :inline :offset-assert 80)
   )
  :method-count-assert 12
  :size-assert         #xd0
  :flag-assert         #xc000000d0
  (:methods
    )
  )

(deftype menu-option-list (basic)
  ((y-center int32  :offset-assert 4)
   (y-space  int32  :offset-assert 8)
   (scale    float  :offset-assert 12)
   (options  basic  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype menu-qr-option (menu-option)
  ((last-move       uint64  :offset-assert 48)
   (value-to-modify uint32  :offset 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-restart-mission-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-quit-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-sub-menu-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-graphic-option (menu-option)
  ((last-move       uint64  :offset-assert 48)
   (value-to-modify uint32  :offset 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-on-off-progressive-scan-graphic-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-aspect-ratio-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-center-screen-graphic-option (menu-graphic-option)
  ((next-state basic  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-video-mode-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-game-option (menu-option)
  ((last-move       uint64  :offset-assert 48)
   (value-to-modify uint32  :offset 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-on-off-game-vibrations-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-on-off-game-subtitles-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    )
  )

(deftype menu-sub-menu-game-option (menu-game-option)
  ((next-state basic  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    )
  )

(deftype menu-language-game-option (menu-game-option)
  ((language-selection  uint64  :offset-assert 64)
   (language-direction  basic   :offset-assert 72)
   (language-transition basic   :offset-assert 76)
   (language-x-offset   int32   :offset-assert 80)
   )
  :method-count-assert 12
  :size-assert         #x54
  :flag-assert         #xc00000054
  (:methods
    )
  )

(deftype menu-subtitle-language-game-option (menu-game-option)
  ((language-selection  uint64  :offset-assert 64)
   (language-direction  basic   :offset-assert 72)
   (language-transition basic   :offset-assert 76)
   (language-x-offset   int32   :offset-assert 80)
   )
  :method-count-assert 12
  :size-assert         #x54
  :flag-assert         #xc00000054
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rpc-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern rpc-busy? (function int uint))
(define-extern rpc-call (function int uint uint uint int uint int uint))

(deftype rpc-buffer (basic)
  ((elt-size  uint32           :offset-assert 4)
   (elt-count uint32           :offset-assert 8)
   (elt-used  uint32           :offset-assert 12)
   (busy      basic            :offset-assert 16)
   (base      pointer          :offset-assert 20) ;; guessed by decompiler
   (data      uint8   :dynamic :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
    (new (symbol type uint uint) rpc-buffer 0)
    )
  )

(deftype rpc-buffer-pair (basic)
  ((buffer           rpc-buffer 2 :offset-assert 4) ;; guessed by decompiler
   (current          rpc-buffer   :offset-assert 12) ;; guessed by decompiler
   (last-recv-buffer pointer      :offset-assert 16) ;; guessed by decompiler
   (rpc-port         int32        :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (new (symbol type uint uint int) rpc-buffer-pair 0)
    (call (rpc-buffer-pair uint pointer uint) int 9)
    (add-element (rpc-buffer-pair) pointer 10)
    (decrement-elt-used (rpc-buffer-pair) int 11)
    (sync (rpc-buffer-pair symbol) int 12)
    (check-busy (rpc-buffer-pair) symbol 13)
    (pop-last-received (rpc-buffer-pair) pointer 14)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; path-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum path-control-flag
  :bitfield #t
  :type uint32
  (display 0)
  (draw-line 1) ;; TODO - only seen it used to control debug drawing so far
  (draw-point 2) ;; TODO - only seen it used to control debug drawing so far
  (draw-text 3) ;; TODO - only seen it used to control debug drawing so far
  (not-found 4)
  )

(deftype path-control (basic)
  ((flags      path-control-flag             :offset-assert 4) ;; guessed by decompiler
   (name       symbol                        :offset-assert 8) ;; guessed by decompiler
   (process    process-drawable              :offset-assert 12) ;; guessed by decompiler
   (curve      curve                 :inline :offset-assert 16)
   (num-cverts int32                         :offset 20)
   (cverts     (inline-array vector)         :offset 16) ;; guessed by decompiler
   )
  :method-count-assert 27
  :size-assert         #x24
  :flag-assert         #x1b00000024
  (:methods
    (new (symbol type process symbol float entity symbol) _type_ 0)
    (path-control-method-9 () none 9) ;; (dummy-9 (_type_) none 9)
    (path-control-method-10 () none 10) ;; (eval-path-curve-div! (_type_ vector float symbol) vector 10)
    (path-control-method-11 () none 11) ;; (get-random-point (_type_ vector) vector 11)
    (path-control-method-12 () none 12) ;; (TODO-RENAME-12 (_type_ vector float) vector 12)
    (path-control-method-13 () none 13) ;; (eval-path-curve! (_type_ vector float symbol) vector 13)
    (path-control-method-14 () none 14) ;; (TODO-RENAME-14 (_type_ vector float) vector 14)
    (path-control-method-15 () none 15) ;; (length-as-float (_type_) float 15)
    (path-control-method-16 () none 16) ;; (path-distance (_type_) float 16)
    (get-num-segments (_type_) float 17)
    (path-control-method-18 () none 18) ;; (should-display? (_type_) symbol 18)
    (get-num-verts (_type_) int 19) ;; (TODO-RENAME-19 (_type_) float 19)
    (path-distance-equal-spacing (_type_ float) float 20) ;; (TODO-RENAME-20 (_type_) float 20)
    (average-segment-length (_type_ float) float 21)
    (path-control-method-22 () none 22)
    (path-control-method-23 () none 23)
    (path-control-method-24 () none 24)
    (should-display-marks? (_type_) symbol 25)
    (path-control-method-26 () none 26)
    )
  )

(deftype curve-control (path-control)
  ()
  :method-count-assert 27
  :size-assert         #x24
  :flag-assert         #x1b00000024
  (:methods
     (new (symbol type process symbol float) _type_ 0)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype nav-mesh-work-debug (structure)
  ((debug-vec1   vector  :inline     :offset-assert 0)
   (debug-vec2   vector  :inline     :offset-assert 16)
   (debug-vec3   vector  :inline     :offset-assert 32)
   (debug-vec4   vector  :inline     :offset-assert 48)
   (debug-vec5   vector  :inline     :offset-assert 64)
   (debug-vec6   vector  :inline     :offset-assert 80)
   (debug-vec7   vector  :inline     :offset-assert 96)
   (debug-vec8   vector  :inline     :offset-assert 112)
   (debug-vec9   vector  :inline     :offset-assert 128)
   (debug-vec10  vector  :inline     :offset-assert 144)
   (debug-vec11  vector  :inline     :offset-assert 160)
   (debug-vec12  vector  :inline     :offset-assert 176)
   (sphere-array sphere  16 :inline  :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

(deftype nav-mesh-work (structure)
  ((vert0-table            int8               4  :offset-assert 0)
   (vert1-table            int8               4  :offset-assert 4)
   (edge-mask-table        uint8               3  :offset-assert 8)
   (pad0                   uint32                 :offset-assert 12)
   (deg-to-rad             float                  :offset-assert 16)
   (rad-to-deg             float                  :offset-assert 20)
   (nav-poly-min-dist      float                  :offset-assert 24)
   (nav-poly-epsilon       float                  :offset-assert 28)
   (sphere-array           sphere  16  :inline    :offset-assert 32)
   (debug                  nav-mesh-work-debug    :offset-assert 288)
   (work-struct-in-scratch int8                   :offset-assert 292)
   (mesh-struct-in-scratch int8                   :offset-assert 293)
   (polys-in-scratch       int8                   :offset-assert 294)
   (mesh                   nav-mesh               :offset-assert 296)
   (nav                    basic                  :offset-assert 300)
   (poly0                  nav-poly                  :offset-assert 304)
   (poly1                  nav-poly                  :offset-assert 308)
   (poly-id                int32                  :offset-assert 312)
   )
  :method-count-assert 9
  :size-assert         #x13c
  :flag-assert         #x90000013c
  )

(deftype nav-mesh-link (structure)
  ((id                  uint32  :offset-assert 0)
   (dest-mesh-id        uint32  :offset-assert 4)
   (src-link-poly-id    uint8   :offset-assert 8)
   (src-switch-poly-id  uint8   :offset-assert 9)
   (dest-link-poly-id   uint8   :offset-assert 10)
   (dest-switch-poly-id uint8   :offset-assert 11)
   (dest-mesh           basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-poly (structure)
  ((data         uint8   64       :offset-assert 0 :score -1)
   (vertex       vector 4 :inline :offset 0) ;; changed to vector from uint8 in jak 1
   (vertex0      vector  :inline  :offset 0 :score 999)
   (vertex1      vector  :inline  :offset 16)
   (vertex2      vector  :inline  :offset 32)
   (vertex3      vector  :inline  :offset 48)
   (id           uint8            :offset 12)
   (pat          uint8            :offset 13)
   (vertex-count uint8            :offset 14)
   (link         uint8            :offset 15)
   (adj-poly     uint8   4        :offset 28) ;; guessed by decompiler
   (adj-poly0    uint8            :offset 28)
   (adj-poly1    uint8            :offset 29)
   (adj-poly2    uint8            :offset 30)
   (adj-poly3    uint8            :offset 31)
   (min-y        float            :offset 44)
   (max-y        float            :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype nav-vertex (vector)
  "A typedef for `vector`, not used because our code looks nicer if everything is `vector`s anyway
   and declared out of order (cannot use forward declared structures in inline arrays)"
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-sphere (structure)
  ((trans sphere :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-ray (structure)
  ((current-pos  vector   :inline :offset-assert 0)
   (dir          vector   :inline :offset-assert 16)
   (dest-pos     vector   :inline :offset-assert 32)
   (current-poly nav-poly         :offset-assert 48)
   (next-poly    nav-poly         :offset-assert 52)
   (len          meters           :offset-assert 56)
   (last-edge    int8             :offset-assert 60)
   (ignore       uint8            :offset-assert 61)
   (terminated   symbol           :offset-assert 64) ;; guessed by decompiler
   (reached-dest symbol           :offset-assert 68) ;; guessed by decompiler
   (hit-boundary symbol           :offset-assert 72) ;; guessed by decompiler
   (hit-gap      symbol           :offset-assert 76) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype nav-route-portal (structure)
  ((vertex     nav-vertex 2 :inline :offset-assert 0) ;; guessed by decompiler
   (next-poly  nav-poly     :offset-assert 32)
   (edge-index int8         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x25
  :flag-assert         #x900000025
  )

(deftype nav-find-poly-parms (structure)
  ((point         vector   :inline :offset-assert 0)
   (y-threshold   float            :offset-assert 16)
   (ignore        uint8            :offset-assert 20) ;; TODO - bitfield of some kind
   (poly          nav-poly         :offset-assert 24)
   (dist          float            :offset-assert 28)
   (point-inside? symbol           :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype clamp-travel-vector-to-mesh-return-info (structure)
  ((found-boundary  basic            :offset-assert 0)
   (intersection    vector   :inline :offset-assert 16)
   (boundary-normal vector   :inline :offset-assert 32)
   (prev-normal     vector   :inline :offset-assert 48)
   (next-normal     vector   :inline :offset-assert 64)
   (poly            nav-poly         :offset-assert 80)
   (gap-poly        nav-poly         :offset-assert 84)
   (edge            int8             :offset-assert 88)
   (ignore          uint8            :offset-assert 89)
   (vert-prev       vector   :inline :offset-assert 96)
   (vert-0          vector   :inline :offset-assert 112)
   (vert-1          vector   :inline :offset-assert 128)
   (vert-next       vector   :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(define-extern nav-mesh type) ;; remove once we have this.

(defenum nav-mesh-flag
  :type uint8
  :bitfield #t
  (dummy 0)
  )

(declare-type grid-hash basic)
(declare-type sphere-hash grid-hash)
(deftype nav-mesh (basic)
  ((work                  nav-mesh-work         :offset-assert   4)
   (poly-array            (inline-array nav-poly)              :offset-assert   8) ;; is this actually an inline-array?
   (static-sphere-count   uint8                 :offset-assert  12)
   (poly-count            uint8                 :offset-assert  13)
   (nav-control-count     uint8                 :offset-assert  14)
   (max-nav-control-count uint8                 :offset-assert  15)
   (route                 uint32                :offset-assert  16)
   (poly-hash             grid-hash                 :offset-assert  20)
   (nav-control-array     (inline-array nav-control)                :offset-assert  24) ;; 307 elts
   (sphere-hash           sphere-hash                 :offset-assert  28)
   (static-sphere         (inline-array sphere)                :offset-assert  32)
   (user-list             engine                 :offset-assert  36)
   (next-nav-mesh         surface                 :offset-assert  40)
   (prev-nav-mesh         surface                 :offset-assert  44)
   (bounds                sphere        :inline :offset-assert  48)
   (origin                vector        :inline :offset         48)
   (entity                entity                :offset-assert  64)
   (link-array            (array nav-mesh-link)                :offset-assert  68)
   (link-count            uint8                 :offset-assert  72)
   (flags                 nav-mesh-flag         :offset-assert  73)
   (pad1                  uint8         2       :offset-assert  74)
   (nearest-y-threshold   meters                :offset-assert  76)
   (water-max-height      meters                :offset-assert  80)
   (pad2                  uint32        7       :offset-assert  84)
   )
  :method-count-assert 47
  :size-assert         #x70
  :flag-assert         #x2f00000070
  (:methods
    (nav-mesh-method-9 (_type_) none 9) ;; (tri-centroid-world (_type_ nav-poly vector) vector 9)
    (nav-mesh-method-10 (_type_ vector vector nav-poly) nav-poly 10) ;; (tri-centroid-local (_type_ nav-poly vector) vector 10)
    (nav-mesh-method-11 (_type_ nav-poly vector) vector 11) ;; (get-adj-poly (_type_ nav-poly nav-poly symbol) nav-poly 11)
    (nav-mesh-method-12 (_type_ nav-poly vector) none 12) ;; (setup-portal (_type_ nav-poly nav-poly nav-route-portal) object 12)
    (nav-mesh-method-13 (_type_ symbol symbol) none 13) ;; (initialize-mesh! (_type_) none 13)
    (get-route-portal(_type_ object object nav-find-poly-parms) none 14) ;; (move-along-nav-ray! (_type_ nav-ray) none 14)
    (initialize-mesh! (_type_) none 15) ;; (try-move-along-ray (_type_ nav-poly vector vector float) meters 15)
    (move-along-nav-ray! (_type_ nav-ray) none 16) ;; (TODO-RENAME-16 (_type_ vector nav-poly vector symbol float clip-travel-vector-to-mesh-return-info) none 16)
    (try-move-along-ray (_type_ nav-poly vector vector float) meters 17) ;; (update-route-table (_type_) none 17)
    (nav-mesh-method-18 () none 18) ;; (dummy-18 (_type_ int vector int (pointer int8) int) none 18)
    (nav-mesh-method-19 () none 19) ;; (compute-bounding-box (_type_ vector vector) none 19)
    (nav-mesh-method-20 () none 20) ;; (debug-draw-poly (_type_ nav-poly rgba) none 20)
    (nav-mesh-method-21 () none 21) ;; (point-in-poly? (_type_ nav-poly vector) symbol 21)
    (nav-mesh-method-22 (_type_ vector vector) none 22) ;; (find-opposite-vertices (_type_ nav-poly nav-poly) uint 22)
    (nav-mesh-method-23 (_type_ entity-nav-mesh) none 23) ;; (dummy-23 (_type_ nav-poly vector vector vector nav-route-portal) vector 23)
    (nav-mesh-method-24 (_type_) none 24) ;; (closest-point-on-boundary (_type_ nav-poly vector vector) vector 24)
    (nav-mesh-method-25 (_type_) none 25) ;; (project-point-into-tri-3d (_type_ nav-poly vector vector) none 25)
    (nav-mesh-method-26 (_type_) none 26) ;; (project-point-into-tri-2d (_type_ nav-poly vector vector) vector 26)
    (new-nav-control (_type_ vector int) nav-control 27) ;; (find-poly-fast (_type_ vector meters) nav-poly 27)
    (nav-mesh-method-28 (_type_ object) none 28) ;; (find-poly (_type_ vector meters (pointer nav-control-flags)) nav-poly 28)
    (nav-mesh-method-29 (_type_ object symbol) nav-control 29) ;; (is-in-mesh? (_type_ vector float meters) symbol 29)
    (nav-mesh-method-30 (_type_ process-drawable) none 30)
    (change-to (_type_ process-drawable) none 31)
    (nav-mesh-method-32 "arg1 is a [[nav-mesh-link]] `id`" (_type_ uint32) none 32)
    (nav-mesh-method-33 "arg1 is a [[nav-mesh-link]] `id`" (_type_ uint32) symbol 33)
    (nav-mesh-method-34 (_type_ object vector float) none 34)
    (nav-mesh-method-35
      "TODO - Assertion failed: 'std::isfinite(value)'
        Source: C:/Users/xtvas/Repositories/opengoal/jak-project/common/util/print_float.cpp:90
        Function: int __cdecl float_to_cstr(float, char *, bool)"
      () none 35)
    (nav-mesh-method-36 (_type_ nav-poly rgba) none 36)
    (point-in-poly? (_type_ nav-poly vector) symbol 37)
    (nav-mesh-method-38 (_type_ nav-poly vector vector vector object) vector 38)
    (closest-point-on-boundary (_type_ nav-poly vector vector) none 39)
    (nav-mesh-method-40 (_type_ nav-poly vector object vector) none 40)
    (project-point-into-poly-2d (_type_ nav-poly vector vector) none 41)
    (nav-mesh-method-42 (_type_ nav-find-poly-parms) symbol 42)
    (nav-mesh-method-43 (_type_ nav-find-poly-parms) none 43)
    (nav-mesh-method-44 (_type_ vector float float) symbol 44)
    (nav-mesh-method-45 "TODO - asm expression building error" (_type_ entity-perm) none 45)
    (nav-mesh-method-46 (_type_ object) none 46)
    )
  )


(define-extern vector-normalize-unity! (function vector vector))
(define-extern vector-normalize-unity-copy! (function vector vector vector))
(define-extern debug-validate-current-poly (function symbol))
(define-extern init-ray (function nav-ray none))
(define-extern point-poly-intersection? (function nav-mesh vector int (inline-array vector) symbol))
(define-extern nav-sphere-from-cam (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-control-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert 0)
   (intersect vector :inline :offset-assert 16)
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert 0)
   (poly nav-poly         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype nav-avoid-spheres-params (structure)
  ((current-pos          vector  :inline :offset-assert 0)
   (travel               vector  :inline :offset-assert 16)
   (pref-dir             vector  :inline :offset-assert 32)
   (out-travel           vector 2 :inline       :offset-assert 48)
   (closest-sphere-dist2 float           :offset-assert 80)
   (avoiding-sphere?     basic           :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype nav-callback-info (structure)
  ((callback-count int32      :offset-assert 0)
   (callback-array uint32 10 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(defenum nav-state-flag
  :type uint32
  :bitfield #t

  (display-marks      0) ;; 1
  (recovery-mode      1) ;; 2
  (initialized        2) ;; 4
  (debug              3) ;; 8
  (directional-mode   4) ;; 16
  (trapped-by-sphere  5) ;; 32
  (target-poly-dirty  6) ;; 64
  (blocked            7) ;; 128
  (in-target-poly     8) ;; 256
  (at-target          9) ;; 512
  (target-inside     10) ;; 1024
  (in-mesh           11) ;; 2048
  (avoiding-sphere   12) ;; 4096
  (touching-sphere   13) ;; 8192
  (at-gap            14) ;; 16384
  )

(deftype nav-state (structure)
  ((flags                     nav-state-flag         :offset-assert   0)
   (nav                       basic                  :offset-assert   4)
   (user-poly                 nav-poly               :offset-assert   8)
   (mesh                      nav-mesh               :offset-assert  12)
   (current-poly              nav-poly               :offset-assert  16)
   (virtual-current-poly      nav-poly               :offset-assert  20)
   (next-poly                 nav-poly               :offset-assert  24)
   (target-poly               nav-poly               :offset-assert  28) ;; wrong
   (rotation-rate             float                  :offset-assert  32)
   (speed                     meters                 :offset-assert  36)
   (prev-speed                meters                 :offset-assert  40)
   (pad0                      uint32         1       :offset-assert  44)
   (travel                    vector         :inline :offset-assert  48)
   (target-post               vector         :inline :offset-assert  64)
   (current-pos               vector         :inline :offset-assert  80)
   (current-pos-local         vector         :inline :offset-assert  96)
   (virtual-current-pos-local vector         :inline :offset-assert 112)
   (velocity                  vector         :inline :offset-assert 128)
   (heading                   vector         :inline :offset-assert 144)
   (target-dir                vector         :inline :offset-assert 160)
   (accel                     vector         :inline :offset        160)
   )
  :method-count-assert 55
  :size-assert         #xb0
  :flag-assert         #x37000000b0
  ;; Failed to read fields.
  (:methods
    (nav-state-method-9 () none 9)
    (nav-state-method-10 () none 10)
    (nav-state-method-11 () none 11)
    (nav-state-method-12 () none 12)
    (nav-state-method-13 () none 13)
    (nav-state-method-14 () none 14)
    (nav-state-method-15 () none 15)
    (nav-state-method-16 () none 16)
    (nav-state-method-17 () none 17)
    (nav-state-method-18 () none 18)
    (nav-state-method-19 () none 19)
    (nav-state-method-20 () none 20)
    (nav-state-method-21 () none 21)
    (nav-state-method-22 () none 22)
    (nav-state-method-23 () none 23)
    (nav-state-method-24 () none 24)
    (nav-state-method-25 () none 25)
    (nav-state-method-26 () none 26)
    (nav-state-method-27 () none 27)
    (nav-state-method-28 () none 28)
    (nav-state-method-29 () none 29)
    (nav-state-method-30 () none 30)
    (nav-state-method-31 () none 31)
    (nav-state-method-32 () none 32)
    (nav-state-method-33 () none 33)
    (nav-state-method-34 () none 34)
    (nav-state-method-35 () none 35)
    (nav-state-method-36 () none 36)
    (nav-state-method-37 () none 37)
    (nav-state-method-38 () none 38)
    (nav-state-method-39 () none 39)
    (nav-state-method-40 () none 40)
    (nav-state-method-41 () none 41)
    (nav-state-method-42 () none 42)
    (nav-state-method-43 () none 43)
    (nav-state-method-44 () none 44)
    (nav-state-method-45 () none 45)
    (nav-state-method-46 () none 46)
    (nav-state-method-47 () none 47)
    (nav-state-method-48 () none 48)
    (nav-state-method-49 () none 49)
    (nav-state-method-50 () none 50)
    (nav-state-method-51 () none 51)
    (nav-state-method-52 () none 52)
    (nav-state-method-53 () none 53)
    (nav-state-method-54 () none 54)
    )
  )

(defenum nav-control-flag
  :type uint32
  :bitfield #t
  (display-marks        0) ;; 1
  (debug                1) ;; 2
  (no-redirect-in-clamp 2) ;; 4
  (limit-rotation-rate  3) ;; 8
  (update-heading-from-facing 4) ;; 16
  (use-momentum        5) ;; 32
  (momentum-ignore-heading 6) ;; 64
  (output-sphere-hash  7) ;; 128
  (kernel-run          8) ;; 256
  )

(deftype nav-control (structure)
  ((flags                nav-control-flag              :offset-assert   0)
   (callback-info        nav-callback-info             :offset-assert   4)
   (process              process                       :offset-assert   8)
   (pad0                 uint32                        :offset-assert  12)
   (shape                collide-shape                 :offset-assert  16)
   (nearest-y-threshold  meters                        :offset-assert  20)
   (nav-cull-radius      meters                        :offset-assert  24)
   (sec-per-frame        float                         :offset-assert  28)
   (target-speed         meters                        :offset-assert  32)
   (acceleration         meters                        :offset-assert  36)
   (turning-acceleration meters                        :offset-assert  40)
   (max-rotation-rate    float                         :offset-assert  44)
   (speed-scale          float                         :offset-assert  48)
   (sphere-count         int32                         :offset-assert  52)
   (sphere-array         (inline-array sphere)         :offset-assert  56)
   (root-sphere-id       uint8                         :offset-assert  60)
   (sphere-mask          uint8                         :offset-assert  61)
   (pad1                 uint8                 2       :offset-assert  62)
   (sphere-id-array      uint8                 16      :offset-assert  64)
   (extra-nav-sphere     sphere                :inline :offset-assert  80)
   (root-nav-sphere      sphere                :inline :offset-assert  96)
   (state                nav-state             :inline :offset-assert 112)
   )
  :method-count-assert 47
  :size-assert         #x120
  :flag-assert         #x2f00000120
  ;; Failed to read fields.
  (:methods
     ;; (new (symbol type collide-shape int float) _type_ 0)
    (nav-control-method-9 () none 9) ;; (debug-draw (_type_) none 9)
    (point-in-bounds?
      "Is the given point ([[vector]]) outside of the [[nav-mesh]]'s `bounds` [[sphere]] radius"
      (_type_ vector) symbol 10)
    (nav-control-method-11 "TODO" (_type_ vector) vector 11) ;; (dummy-11 (_type_ vector) vector 11)
    (nav-control-method-12 () none 12) ;; (TODO-RENAME-12 (_type_ nav-gap-info) symbol 12)
    (find-poly "TODO" (_type_ vector) nav-poly 13) ;; (dummy-13 (_type_ vector vector) vector 13)
    (nav-control-method-14 (_type_ nav-poly vector object vector) none 14) ;; (set-current-poly! (_type_ nav-poly) none 14)
    (nav-control-method-15 "TODO - same as 11" (_type_ vector) none 15) ;; (set-target-pos! (_type_ vector) none 15)
    (nav-control-method-16 (_type_ vector float) symbol 16) ;; (dummy-16 (_type_ vector) nav-poly 16)
    (is-in-mesh? "TODO" (_type_ vector float) symbol 17) ;; (project-onto-nav-mesh (_type_ vector vector) vector 17)
    (nav-control-method-18 () none 18) ;; (find-poly (_type_ vector) nav-poly 18)
    (nav-control-method-19 () none 19) ;; (dummy-19 (_type_ vector collide-shape-moving vector float) none 19)
    (nav-control-method-20 (_type_ vector vector vector int symbol symbol) none 20) ;; (project-point-into-tri-3d (_type_ nav-poly vector vector) vector 20)
    (nav-control-method-21 () none 21) ;; (TODO-RENAME-21 (_type_ vector) nav-poly 21)
    (nav-control-method-22 () none 22) ;; (TODO-RENAME-22 (_type_ vector float) symbol 22)
    (nav-control-method-23 "TODO" (_type_) none 23) ;; (dummy-23 (_type_ vector check-vector-collision-with-nav-spheres-info) float 23)
    (nav-control-method-24 () none 24) ;; (dummy-24 (_type_ float clip-travel-vector-to-mesh-return-info) none 24)
    (get-max-rotation-rate (_type_) float 25) ;; (is-in-mesh? (_type_ vector float) symbol 25)
    (get-sphere-mask (_type_) none 26) ;; (TODO-RENAME-26 (_type_) none 26)
    (get-target-speed (_type_) meters 27) ;; (TODO-RENAME-27 (_type_) none 27)
    (nav-control-method-28 "TODO - Clears `nav-flags::1` on `shape`'s `flags`" (_type_) none 28) ;; (TODO-RENAME-28 (_type_ collide-kind) none 28)
    (nav-control-method-29 "TODO - Sets `nav-flags::1` on `shape`'s `flags`" (_type_) none 29) ;; (should-display? (_type_) symbol 29)
    (copy-extra-nav-sphere! "Copies the given [[sphere]] into `extra-nav-sphere`" (_type_ sphere) none 30) ;; (dummy-30 (_type_ vector vector vector) sphere 30)
    (set-extra-nav-sphere! "Set the `extra-nav-sphere` with the data in the given [[sphere]]" (_type_ sphere) none 31) ;; (intersect-ray-line-segment? (_type_ vector vector vector vector) symbol 31)
    (set-extra-nav-sphere-radius! "Set's `extra-nav-sphere`'s radius" (_type_ float) none 32) ;; (TODO-ASM-32 (_type_ vector vector vector vector float) symbol 32)
    (set-nearest-y-thres! "Set `nearest-y-threshold`" (_type_ float) none 33) ;; (TODO-RENAME-33 (_type_ vector vector vector vector float) symbol 33)
    (set-nav-cull-radius! "Set `nav-cull-radius`" (_type_ meters) none 34) ;; (dummy-34 () none 34)
    (set-speed-scale! "Set `speed-scale`" (_type_ float) none 35) ;; (dummy-35 (_type_ vector vector vector vector float) none 35)
    (set-target-speed! "Set `target-speed`" (_type_ meters) none 36)
    (set-acceleration! "Set `acceleration`" (_type_ meters) none 37)
    (set-turning-acceleration! "Set `turning-acceleration`" (_type_ meters) none 38)
    (set-max-rotation-rate! "Set `max-rotation-rate`" (_type_ float) none 39)
    (set-sphere-mask! "TODO - probably an enum - Set `sphere-mask`" (_type_ uint) none 40)
    (nav-control-method-41 "TODO - calls nav-mesh::28" (_type_) none 41)
    (init! "Initializes the [[nav-control]], setting `shape` with the provided [[collide-shape]]" (_type_ collide-shape) none 42)
    (display-marks? "Returns if navigation related marks should be displayed" (_type_) symbol 43)
    (nav-control-method-44 () none 44)
    (nav-control-method-45 (_type_ vector vector vector) sphere 45)
    (find-sphere "TODO" (_type_) none 46)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spatial-hash-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype grid-hash-word (uint8)
  ()
  :flag-assert #x900000001
  )

(deftype grid-hash-box (structure)
  ((min uint8 3 :offset-assert 0)
   (max uint8 3 :offset-assert 3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype grid-hash (basic)
  ((work                basic                 :offset-assert 4)
   (search-box          grid-hash-box :inline :offset-assert 8)
   (bucket-size         int16                 :offset-assert 14)
   (axis-scale          uint32       3       :offset-assert 16)
   (dimension-array     uint8       3       :offset-assert 28)
   (vertical-cell-count int8                  :offset-assert 31)
   (bucket-array        uint32                :offset-assert 32)
   (box-min             uint32       3       :offset-assert 36)
   (box-max             uint32       3       :offset-assert 48)
   (object-count        int16                 :offset-assert 60)
   (bucket-count        int16                 :offset-assert 62)
   (min-cell-size       float                 :offset-assert 64)
   (bucket-memory-size  int32                 :offset-assert 68)
   (mem-bucket-array    uint32                :offset-assert 72)
   (spr-bucket-array    uint32                :offset-assert 76)
   (debug-draw          basic                 :offset-assert 80)
   (use-scratch-ram     basic                 :offset-assert 84)
   )
  :method-count-assert 25
  :size-assert         #x58
  :flag-assert         #x1900000058
  (:methods
    (grid-hash-method-9 () none 9)
    (grid-hash-method-10 () none 10)
    (grid-hash-method-11 () none 11)
    (grid-hash-method-12 () none 12)
    (grid-hash-method-13 () none 13)
    (grid-hash-method-14 () none 14)
    (grid-hash-method-15 () none 15)
    (grid-hash-method-16 () none 16)
    (grid-hash-method-17 () none 17)
    (grid-hash-method-18 () none 18)
    (grid-hash-method-19 () none 19)
    (grid-hash-method-20 () none 20)
    (grid-hash-method-21 () none 21)
    (grid-hash-method-22 () none 22)
    (grid-hash-method-23 () none 23)
    (grid-hash-method-24 () none 24)
    )
  )

(deftype find-nav-sphere-ids-params (structure)
  ((bsphere     sphere :inline :offset-assert 0)
   (y-threshold float          :offset-assert 16)
   (len         int16          :offset-assert 20)
   (max-len     int16          :offset-assert 22)
   (mask        uint8          :offset-assert 24)
   (array       uint32         :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sphere-hash (grid-hash)
  ((sphere-array     (inline-array sphere)  :offset-assert 88)
   (max-object-count int16   :offset-assert 92)
   (pad              int16   :offset-assert 94)
   (mem-sphere-array uint32  :offset-assert 96)
   (spr-sphere-array uint32  :offset-assert 100)
   )
  :method-count-assert 34
  :size-assert         #x68
  :flag-assert         #x2200000068
  (:methods
    (sphere-hash-method-25 () none 25)
    (sphere-hash-method-26 () none 26)
    (sphere-hash-method-27 () none 27)
    (sphere-hash-method-28 () none 28)
    (sphere-hash-method-29 () none 29)
    (sphere-hash-method-30 (_type_ find-nav-sphere-ids-params) none 30)
    (sphere-hash-method-31 () none 31)
    (sphere-hash-method-32 () none 32)
    (sphere-hash-method-33 () none 33)
    )
  )

(deftype hash-object-info (structure)
  ((object basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype spatial-hash (sphere-hash)
  ((object-array     uint32  :offset-assert 104)
   (mem-object-array uint32  :offset-assert 108)
   (spr-object-array uint32  :offset-assert 112)
   )
  :method-count-assert 41
  :size-assert         #x74
  :flag-assert         #x2900000074
  (:methods
    (spatial-hash-method-34 () none 34)
    (spatial-hash-method-35 () none 35)
    (spatial-hash-method-36 () none 36)
    (spatial-hash-method-37 () none 37)
    (spatial-hash-method-38 () none 38)
    (spatial-hash-method-39 () none 39)
    (spatial-hash-method-40 () none 40)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-hash-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *actor-list* pointer) ;; some array of something.
(define-extern *actor-list-length* int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load-dgo                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum load-msg-result
  :type uint16
  :bitfield #f
  (done 0)
  (error 1)
  (more 2)
  (aborted 3)
  (invalid 666)
  )

(deftype load-dgo-msg (structure)
  ((rsvd    uint16   :offset-assert 0)
   (result  load-msg-result   :offset-assert 2)
   (b1      pointer  :offset-assert 4) ;; guessed by decompiler
   (b2      pointer  :offset-assert 8) ;; guessed by decompiler
   (bt      pointer  :offset-assert 12) ;; guessed by decompiler
   (name    uint128  :offset-assert 16)
   (address uint32   :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype load-chunk-msg (structure)
  ((rsvd     uint16                    :offset-assert 0)
   (result   load-msg-result           :offset-assert 2)
   (address  pointer                   :offset-assert 4) ;; guessed by decompiler
   (section  uint32                    :offset-assert 8)
   (maxlen   uint32                    :offset-assert 12)
   (dummy    uint32           4       :offset-assert 16)
   (basename sound-stream-name :inline :offset-assert 32) ;; uint8 48
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype play-chunk-msg (structure)
  ((rsvd     uint16    :offset-assert 0)
   (result   uint16    :offset-assert 2)
   (address  pointer   :offset-assert 4)
   (section  uint32    :offset-assert 8)
   (maxlen   uint32    :offset-assert 12)
   (id       uint32 4 :offset-assert 16)
   (basename sound-stream-name 4 :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype dgo-header (structure)
  ((length   uint32    :offset-assert 0)
   (rootname uint8  60 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(define-extern *load-dgo-rpc* rpc-buffer-pair)
(define-extern *load-str-rpc* rpc-buffer-pair)
(define-extern *play-str-rpc* rpc-buffer-pair)
(define-extern *load-str-lock* symbol)
(define-extern *que-str-lock* symbol)
(define-extern *dgo-name* string)
(define-extern str-load (function string int pointer int symbol))
(define-extern str-load-status (function (pointer int32) symbol))
(define-extern str-load-cancel (function none))
(define-extern str-play-async (function string sound-id none))
(define-extern str-play-stop (function string sound-id none))
(define-extern str-play-queue (function string string string string (pointer uint32) pointer none))
(define-extern str-ambient-play (function string none))
(define-extern str-ambient-stop (function string none))
(define-extern str-play-kick (function none)) ;;
(define-extern *dgo-time* time-frame)
(define-extern dgo-load-begin (function string pointer pointer pointer load-dgo-msg))
(define-extern dgo-load-get-next (function (pointer symbol) pointer))
(define-extern dgo-load-continue (function pointer pointer pointer load-dgo-msg))
(define-extern dgo-load-cancel (function none))
(define-extern find-temp-buffer (function int pointer))
(define-extern dgo-load-link (function dgo-header kheap uint symbol symbol symbol))
(define-extern destroy-mem (function (pointer uint32) (pointer uint32) none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ramdisk                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ramdisk-rpc-fill (structure)
  ((rsvd1    int32     :offset-assert 0)
   (ee-id    int32     :offset-assert 4)
   (rsvd2    int32   2 :offset-assert 8) ;; guessed by decompiler
   (filename uint128   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ramdisk-rpc-load (structure)
  ((rsvd   int32   :offset-assert 0)
   (ee-id  int32   :offset-assert 4)
   (offset uint32  :offset-assert 8)
   (length uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ramdisk-rpc-load-to-ee (structure)
  ((rsvd     int32    :offset-assert 0)
   (addr     int32    :offset-assert 4)
   (offset   int32    :offset-assert 8)
   (length   int32    :offset-assert 12)
   (filename uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern *ramdisk-rpc* rpc-buffer-pair)
(define-extern *current-ramdisk-id* int)
(define-extern ramdisk-load (function int uint uint pointer int))
(define-extern ramdisk-sync (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gsound                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ghost function
(define-extern *debug-effect-control* symbol)
(define-extern effect-param->sound-spec (function sound-spec (pointer float) int sound-spec))

(deftype engine-sound-pers (engine-pers)
  ()
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    )
  )

(defenum stream-status
  :type uint32
  :bitfield #t
  (ststatus-zero        0)
  (ststatus-one         1) ;; another way to be playing
  (ststatus-two         2)
  (ststatus-three       3)
  (ststatus-four        4) ;; is playing?
  (ststatus-five        5)
  (ststatus-six         6) ;; another way to be playing.
  (ststatus-seven       7)
  (ststatus-eight       8)
  (ststatus-nine        9)
  )

(defenum stereo-mode
  :type int32
  )

(deftype sound-iop-info (structure)
  ((frame uint32 :offset-assert 0)
   (strpos int32 :offset-assert 4)
   (str-id uint32 :offset-assert 8)
   (str-id-sign int32 :offset 8)
   (freemem uint32 :offset-assert 12)
   (chinfo uint8 48 :offset-assert 16)
   (freemem2 uint32 :offset-assert 64)
   (nocd uint32 :offset-assert 68)
   (dirtycd uint32 :offset-assert 72)
   (diskspeed uint32 2 :offset-assert 76)
   (lastspeed uint32 :offset-assert 84)
   (dupseg int32 :offset-assert 88)
   (times int32 41 :offset-assert 92)
   (times-seq uint32 :offset-assert 256)
   (iop-ticks uint32 :offset-assert 260)
   (stream-position uint32 4 :offset 272)
   (stream-status stream-status 4 :offset-assert 288)
   (stream-name sound-stream-name 4 :inline :offset-assert 304)
   (stream-id sound-id 4 :offset-assert 496)
   (stream-id-int32 int32 4 :offset 496) ;; ughhhh...
   (music-register uint8 17 :offset-assert 512)
   (music-excite int8 :offset 528)
   (ramdisk-name uint8 48 :offset-assert 529)
   )
  :method-count-assert 9
  :size-assert         #x241
  :flag-assert         #x900000241
  ;; Failed to read fields.
  )

(define-extern *sound-loop-engine* engine-sound-pers)
(define-extern *sound-player-rpc* rpc-buffer-pair)
(define-extern *sound-loader-rpc* rpc-buffer-pair)
(define-extern sound-name= (function sound-name sound-name symbol))
(define-extern *sound-iop-info* sound-iop-info)
(define-extern str-is-playing? (function symbol))
(define-extern str-id-is-playing? (function int symbol))
(define-extern current-str-pos (function sound-id int))
(define-extern is-ramdisk-loaded? (function symbol symbol))
(define-extern is-cd-in? (function symbol))
(define-extern new-sound-id (function sound-id))
(define-extern check-irx-version (function int))
(define-extern sound-bank-iop-store (function sound-name sound-id))
(define-extern sound-bank-iop-free (function sound-name sound-id))
(define-extern sound-bank-load (function sound-name sound-id))
(define-extern sound-bank-load-from-iop (function sound-name sound-id))
(define-extern sound-bank-load-from-ee (function sound-name pointer sound-id))
(define-extern sound-bank-unload (function sound-name int))
(define-extern sound-music-load (function sound-name int))
(define-extern sound-music-unload (function int))
(define-extern set-language (function language-enum int))
(define-extern sound-set-stereo-mode (function stereo-mode none))
(define-extern list-sounds (function none))
(define-extern sound-command->string (function sound-command string))
(define-extern sound-buffer-dump (function int))
(define-extern *sound-player-enable* symbol)
(define-extern swap-sound-buffers  (function vector vector vector float int))
(define-extern get-sound-buffer-entry (function pointer))
(define-extern free-last-sound-buffer-entry (function none))
(define-extern sound-basic-cb (function int (pointer int32) none))
(define-extern sound-trans-convert (function vector3w vector int))
(define-extern sound-angle-convert (function float int))
(define-extern string->sound-name  (function string sound-name))
(define-extern sound-set-volume (function sound-group float int))
(define-extern sound-set-reverb (function int float float uint int))
(define-extern sound-set-ear-trans (function vector vector vector float int))
(define-extern sound-play-by-name (function sound-name sound-id int int int sound-group symbol sound-id))
(define-extern sound-play-by-spec (function sound-spec sound-id vector sound-id)) ;; NOTE - the `vector` can also be #t
(define-extern sound-pause (function sound-id int))
(define-extern sound-stop (function sound-id int))
(define-extern sound-continue (function sound-id int))
(define-extern sound-group-pause (function sound-group int))
(define-extern sound-group-stop (function sound-group int))
(define-extern sound-group-continue (function sound-group int))
(define-extern sound-set-flava (function uint uint int))
(define-extern sound-set-midi-reg (function int int int))
(define-extern sound-set-fps (function int int))
(define-extern sound-volume-off (function int))
(define-extern *ambient-spec* sound-spec)
(define-extern show-iop-info (function dma-buffer int))
(define-extern show-iop-memory (function dma-buffer int))
(define-extern ear-trans (function int vector))
(define-extern make-sqrt-table (function int))
(define-extern loader-test-command (function sound-command uint none))
(define-extern doppler-pitch-shift (function vector vector float))
(define-extern sound-bank-reload (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transformq                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern transformq-copy! (function transformq transformq transformq))
(define-extern matrix<-transformq! (function matrix transformq matrix))
(define-extern matrix<-no-trans-transformq! (function matrix transformq matrix))
(define-extern matrix<-transformq+trans! (function matrix transformq vector matrix))
(define-extern matrix<-transformq+world-trans! (function matrix transformq vector matrix))
(define-extern matrix<-parented-transformq! (function matrix transformq vector matrix))
(define-extern matrix<-transformq+rot-offset! (function matrix transformq vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-func                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern raw-ray-sphere-intersect function) ;; (function float float)
(define-extern ray-sphere-intersect (function vector vector vector float float))
(define-extern ray-circle-intersect (function vector vector vector float float)) ;;
(define-extern ray-cylinder-intersect (function vector vector vector vector float float vector float))
;; (define-extern ray-plane-intersect function) ;; (function vector vector vector vector vector vector vector float)
;; (define-extern ray-triangle-intersect function) ;; (function vector vector float matrix vector vector float)
;; (define-extern collide-do-primitives function) ;; (function float)
(define-extern moving-sphere-triangle-intersect (function vector vector float collide-cache-tri vector vector float)) ;;
;; (define-extern moving-sphere-sphere-intersect function) ;; (function vector vector vector vector float)
;; (define-extern moving-sphere-moving-sphere-intersect function) ;; (function vector vector vector vector vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-extern joint-anim-login (function joint-anim-drawable joint-anim-drawable))
(define-extern joint-anim-inspect-elt (function joint-anim float joint-anim))
(define-extern jacc-mem-usage (function joint-anim-compressed-control memory-usage-block int joint-anim-compressed-control))
(define-extern joint-control-channel-eval (function joint-control-channel float :behavior process))
(define-extern joint-control-channel-eval! (function joint-control-channel (function joint-control-channel float float float float) float :behavior process))
(define-extern joint-control-channel-group-eval! (function joint-control-channel art-joint-anim (function joint-control-channel float float float float) int))
(define-extern joint-control-channel-group! (function joint-control-channel art-joint-anim (function joint-control-channel float float float float) int))
(define-extern joint-control-copy! (function joint-control joint-control joint-control))
(define-extern joint-control-remap! (function joint-control art-group art-group pair int string object))
(define-extern flatten-joint-control-to-spr (function joint-control int))
(define-extern matrix-from-joint-anim-frame (function joint-anim-compressed-control int int matrix))
(define-extern matrix-from-control-channel!  (function matrix joint joint-control-channel matrix))
(define-extern matrix-from-control-pair! (function matrix matrix joint int matrix))
(define-extern matrix-from-control! (function matrix-stack joint joint-control symbol matrix))
(define-extern cspace<-cspace! (function cspace cspace matrix))
(define-extern cspace<-cspace-normalized! (function cspace cspace matrix))
(define-extern cspace<-parent-joint! (function cspace (pointer process-drawable) int matrix))
(define-extern cspace<-rot-yxy! (function cspace transform matrix))
(define-extern cspace<-transform-yxy! (function cspace transform matrix))
(define-extern cspace<-transformq! (function cspace transformq matrix))
(define-extern cspace<-transformq+trans! (function cspace transformq vector matrix))
(define-extern cspace<-transformq+world-trans! (function cspace transformq vector matrix))
(define-extern cspace<-transformq+rot-offset! (function cspace transformq vector matrix))
(define-extern cspace-calc-total-matrix! (function cspace matrix matrix))
(define-extern cspace<-matrix-no-push-joint! (function cspace joint-control matrix))
(define-extern cspace<-matrix-joint! (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-joint! (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-mirror! (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-joint-flip-z! (function cspace matrix matrix))
(define-extern cspace<-matrix-joint-flip-z! (function cspace matrix none))
(define-extern cspace<-parented-transformq-joint! (function cspace transformq none))
(define-extern cspace<-parented-transformq-joint-flip-z! (function cspace transformq none))
;; (define-extern clear-frame-accumulator function) ;; (function (inline-array vector) none)
;; (define-extern normalize-frame-quaternions function) ;; function
(define-extern decompress-fixed-data-to-accumulator function) ;; (function none)
(define-extern decompress-frame-data-to-accumulator function) ;; (function none)
(define-extern decompress-frame-data-pair-to-accumulator function) ;; (function none)
(define-extern make-joint-jump-tables (function int))
(define-extern calc-animation-from-spr (function joint-anim-frame int none))
(define-extern create-interpolated-joint-animation-frame (function joint-anim-frame int joint-control int))
(define-extern create-interpolated2-joint-animation-frame (function joint-anim-frame int joint-control int))
(define-extern *anim-manager* art-joint-anim-manager)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-mod                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern joint-mod-ik-callback (function cspace transformq none :behavior process))
(define-extern real-joint-mod-gun-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-gun-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-foot-rot-handler (function cspace transformq none :behavior process))
(define-extern last-try-to-look-at-data try-to-look-at-info)
(define-extern joint-mod-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-polar-look-at-guts (function cspace transformq none :behavior process))
(define-extern joint-mod-polar-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-world-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-rotate-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-scale-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set-world-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set*-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set*-world-handler (function cspace transformq none :behavior process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; chain-physics                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern chain-physics-initialize (function process-drawable chain-physics int float (array chain-physics-setup) int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cylinder                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deftype cylinder-verts (structure)
  ((vert vector 24 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype cylinder-flat-verts (structure)
  ((vert vector 10 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(define-extern ray-arbitrary-circle-intersect (function vector vector vector vector float float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind-work                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *wind-work* wind-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern update-wind (function wind-work (array uint8) none))
;; (define-extern wind-get-hashed-index function) ;; (function vector int)
;; (define-extern level-update-wind function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bsp                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern mem-usage-bsp-tree function) ;; (function bsp-header bsp-node memory-usage-block int none)
;; (define-extern *test-shrub* object) ;; int
(define-extern bsp-camera-asm (function bsp-header vector none)) ;;
(define-extern print-collide-stats (function none))
(define-extern level-remap-texture (function texture-id texture-id))
(define-extern build-masks (function bsp-header none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; subdivide                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *merc-global-stats* object) ;; merc-global-stats
;; (define-extern clear-tr-stat function) ;; (function tr-stat none)
(define-extern *stat-string-tfrag* string)
(define-extern *stat-string-tfrag-scissor* string)
(define-extern *stat-string-total* string)
;; (define-extern print-tr-stat function) ;; (function tr-stat string string none)
(define-extern print-terrain-stats (function none))
;; (define-extern update-subdivide-settings! function) ;; (function subdivide-settings math-camera int none)
(define-extern *subdivide-settings* subdivide-settings)
;; (define-extern set-tfrag-dists! function) ;; (function tfrag-dists none)
;; (define-extern *terrain-context* object) ;; terrain-context
;; (define-extern GSH_ENABLE object) ;; symbol
;; (define-extern GSH_BUCKET object) ;; bucket-id
;; (define-extern GSH_WHICH_STAT object) ;; int
;; (define-extern GSH_MAX_DISPLAY object) ;; basic
;; (define-extern GSH_TIME object) ;; int
(define-extern *perf-stats* perf-stat-array)
;; (define-extern *gomi-stats-hack* object) ;; (inline-array perf-stat)
(define-extern start-perf-stat-collection (function none))
(define-extern end-perf-stat-collection (function none))
(define-extern print-perf-stats (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-header (structure)
  ((header      qword 1 :inline :offset-assert 0)
   (num-sprites int32           :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-hvdf-data (structure)
  ((data qword 76 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4c0
  :flag-assert         #x9000004c0
  )

(deftype sprite-hvdf-control (structure)
  ((alloc int8 76 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(defenum sprite-aux-type
  :bitfield #f
  :type uint32
  (distort 0)
  (glow 1)
  )

(deftype sprite-aux-elem (structure)
  ((aux-type sprite-aux-type      :offset-assert 0)
   (data     vector             3 :offset-assert 4)
   (vec-data sprite-vec-data-2d   :offset 4)
   (gif-data adgif-shader         :offset 8)
   (aux-data sparticle-cpuinfo    :offset 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-aux-list (basic)
  ((num-entries int32                            :offset-assert 4)
   (entry       int32                            :offset-assert 8)
   (data        sprite-aux-elem :dynamic :inline :offset-assert 12)
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sprite-frame-data (structure)
  (;;(data               UNKNOWN      42      :offset-assert 0)
   (cdata              vector    16 :inline :offset 0)
   ;;(fdata              UNKNOWN      26      :offset-assert 256)
   (xy-array           vector     8 :inline :offset 0)   ;; 0 - 32
   (st-array           vector     4 :inline :offset 128) ;; 128 - 144
   (xyz-array          vector     4 :inline :offset 192) ;; 192 - 208
   (hmge-scale         vector       :inline :offset 256)
   (consts             vector       :inline :offset 272 :score -1)
   (pfog0              float                :offset 272)
   (deg-to-rad         float                :offset 276)
   (min-scale          float                :offset 280)
   (inv-area           float                :offset 284)
   (adgif-giftag       gs-gif-tag   :inline :offset-assert 288)
   (sprite-2d-giftag   gs-gif-tag   :inline :offset-assert 304)
   (sprite-2d-giftag-2 gs-gif-tag   :inline :offset-assert 320)
   (sincos-01          vector       :inline :offset-assert 336)
   (sincos-23          vector       :inline :offset-assert 352)
   (sincos-45          vector       :inline :offset-assert 368)
   (sincos-67          vector       :inline :offset-assert 384)
   (sincos-89          vector       :inline :offset-assert 400)
   (basis-x            vector       :inline :offset-assert 416)
   (basis-y            vector       :inline :offset-assert 432)
   (sprite-3d-giftag   gs-gif-tag   :inline :offset-assert 448)
   (sprite-3d-giftag-2 gs-gif-tag   :inline :offset-assert 464)
   (screen-shader      adgif-shader :inline :offset-assert 480)
   (inv-hmge-scale     vector       :inline :offset 576)
   (stq-offset         vector       :inline :offset-assert 592)
   (stq-scale          vector       :inline :offset-assert 608)
   (rgba-plain         qword        :inline :offset-assert 624)
   (warp-giftag        gs-gif-tag   :inline :offset-assert 640)
   (fog-clamp          vector       :inline :offset-assert 656)
   (fog-min            float                :offset 656)
   (fog-max            float                :offset 660)
   (max-scale          float                :offset 664 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x2a0
  :flag-assert         #x9000002a0
  )

(define-extern sprite-setup-header (function sprite-header int none))
(define-extern clear-sprite-aux-list (function none))
(define-extern add-to-sprite-aux-list (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none))
(define-extern sprite-setup-frame-data (function sprite-frame-data uint none))
(define-extern sprite-vu1-block vu-function)
(define-extern sprite-set-3d-quaternion! (function sprite-vec-data-3d quaternion quaternion))
(define-extern sprite-get-3d-quaternion! (function quaternion sprite-vec-data-3d quaternion))
(define-extern sprite-add-matrix-data (function dma-buffer uint none))
(define-extern sprite-add-frame-data (function dma-buffer uint none))
(define-extern sprite-add-2d-chunk (function sprite-array-2d int int dma-buffer int none))
(define-extern sprite-add-2d-all (function sprite-array-2d dma-buffer int none))
(define-extern sprite-add-3d-chunk (function sprite-array-3d int int dma-buffer none))
(define-extern sprite-add-3d-all (function sprite-array-3d dma-buffer int none))
(define-extern sprite-draw (function display none))
(define-extern sprite-allocate-user-hvdf (function int))
(define-extern sprite-release-user-hvdf (function int none))
(define-extern sprite-get-user-hvdf (function int vector))
(define-extern *sprite-hvdf-data* sprite-hvdf-data)
(define-extern *sprite-hvdf-control* sprite-hvdf-control)
(define-extern *sprite-aux-list* sprite-aux-list)
(define-extern *sprite-array-2d* sprite-array-2d)
(define-extern *sprite-array-3d* sprite-array-3d)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-distort                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-distorter-sine-tables (basic)
  ((aspx   float              :offset-assert 4)
   (aspy   float              :offset-assert 8)
   (entry  vector 128 :inline :offset-assert 16)
   (ientry qword  9   :inline :offset-assert 2064)
   (giftag gs-gif-tag :inline :offset-assert 2208)
   (color  qword      :inline :offset-assert 2224)
   )
  :method-count-assert 9
  :size-assert         #x8c0
  :flag-assert         #x9000008c0
  )

(define-extern *sprite-distorter-sine-tables* sprite-distorter-sine-tables)
(define-extern sprite-distorter-generate-tables (function none))
(define-extern sprite-distort-vu1-block vu-function)
(define-extern sprite-init-distorter (function dma-buffer none))
(define-extern sprite-draw-distorters (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-glow                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-glow-template (structure)
  ((clear-init-giftag   gs-gif-tag     :inline :offset-assert 0)
   (clear-init-adcmds   vector4w     5 :inline :offset-assert 16) ;; gs-adcmd?
   (clear-draw-giftag   gs-gif-tag     :inline :offset-assert 96)
   (clear-draw-clr-0    gs-packed-rgba :inline :offset-assert 112)
   (clear-draw-xyz-0    vector       2 :inline :offset-assert 128)
   (clear-draw-clr-1    gs-packed-rgba :inline :offset-assert 160)
   (clear-draw-xyz-1    vector       2 :inline :offset-assert 176)
   (offscr-setup-giftag gs-gif-tag     :inline :offset-assert 208)
   (offscr-setup-adcmds vector4w     8 :inline :offset-assert 224) ;; gs-adcmd?
   (offscr-first-giftag gs-gif-tag     :inline :offset-assert 352)
   (offscr-first-clr    gs-packed-rgba :inline :offset-assert 368)
   (offscr-first-uv-0   gs-packed-uv   :inline :offset-assert 384)
   (offscr-first-xyzw-0 gs-packed-xyzw :inline :offset-assert 400)
   (offscr-first-uv-1   gs-packed-uv   :inline :offset-assert 416)
   (offscr-first-xyzw-1 gs-packed-xyzw :inline :offset-assert 432)
   (repeat-draw-giftag  gs-gif-tag     :inline :offset-assert 448)
   (repeat-draw-adcmds  vector4w    29 :inline :offset-assert 464) ;; gs-adcmd?
   (flare-alpha-giftag  gs-gif-tag     :inline :offset-assert 928)
   (flare-alpha-clr     gs-packed-rgba :inline :offset-assert 944)
   (flare-alpha-uv      gs-packed-uv   :inline :offset-assert 960)
   (flare-alpha-xyzw-0  gs-packed-xyzw :inline :offset-assert 976)
   (flare-alpha-xyzw-1  gs-packed-xyzw :inline :offset-assert 992)
   (flare-alpha-xyzw-2  gs-packed-xyzw :inline :offset-assert 1008)
   (flare-alpha-xyzw-3  gs-packed-xyzw :inline :offset-assert 1024)
   (flare-init-giftag   gs-gif-tag     :inline :offset-assert 1040)
   (flare-init-adcmds   vector4w     8 :inline :offset-assert 1056) ;; gs-adcmd?
   (flare-draw-giftag   gs-gif-tag     :inline :offset-assert 1184)
   (flare-draw-clr      gs-packed-rgba :inline :offset-assert 1200)
   (flare-draw-stq-0    gs-packed-stq  :inline :offset-assert 1216)
   (flare-draw-xyzw-0   gs-packed-xyzw :inline :offset-assert 1232)
   (flare-draw-stq-1    gs-packed-stq  :inline :offset-assert 1248)
   (flare-draw-xyzw-1   gs-packed-xyzw :inline :offset-assert 1264)
   (flare-draw-stq-2    gs-packed-stq  :inline :offset-assert 1280)
   (flare-draw-xyzw-2   gs-packed-xyzw :inline :offset-assert 1296)
   (flare-draw-stq-3    gs-packed-stq  :inline :offset-assert 1312)
   (flare-draw-xyzw-3   gs-packed-xyzw :inline :offset-assert 1328)
   )
  :method-count-assert 9
  :size-assert         #x540
  :flag-assert         #x900000540
  )

(deftype sprite-glow-consts (structure)
  ((camera      matrix   :inline :offset-assert 0)
   (perspective matrix   :inline :offset-assert 64)
   (hvdf-offset vector   :inline :offset-assert 128)
   (hmge-scale  vector   :inline :offset-assert 144)
   (consts      vector   :inline :offset-assert 160 :score -1)
   (pfog0       float            :offset 160)
   (deg-to-rad  float            :offset 164)
   (min-scale   float            :offset 168)
   (inv-area    float            :offset 172)
   (sincos-01   vector   :inline :offset-assert 176)
   (sincos-23   vector   :inline :offset-assert 192)
   (sincos-45   vector   :inline :offset-assert 208)
   (sincos-67   vector   :inline :offset-assert 224)
   (sincos-89   vector   :inline :offset-assert 240)
   (basis-x     vector   :inline :offset-assert 256)
   (basis-y     vector   :inline :offset-assert 272)
   (xy-array    vector 4 :inline :offset-assert 288)
   (clamp-min   vector   :inline :offset-assert 352)
   (clamp-max   vector   :inline :offset-assert 368)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype sprite-glow-dma-packet-data (structure)
  ((control-packet    dma-packet :inline :offset-assert 0)
   (vecdata-packet    dma-packet :inline :offset-assert 16)
   (shader-cnt-packet dma-packet :inline :offset-assert 32)
   (shader-ref-packet dma-packet :inline :offset-assert 48)
   (mscal-packet      dma-packet :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sprite-glow-cnt-template (structure)
  ((control-packet dma-packet       :inline :offset-assert 0)
   (num-sprites    uint32                   :offset-assert 16)
   (dummys         uint32         3         :offset-assert 20)
   (vecdata-packet dma-packet       :inline :offset-assert 32)
   (vecdata        sprite-glow-data :inline :offset-assert 48)
   (shader-packet  dma-packet       :inline :offset-assert 112)
   (shader         adgif-shader     :inline :offset-assert 128)
   (mscal-packet   dma-packet       :inline :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype sprite-glow-ref-template (structure)
  ((control-packet dma-packet       :inline :offset-assert 0)
   (num-sprites    uint32                   :offset-assert 16)
   (dummys         uint32           3       :offset-assert 20)
   (vecdata-packet dma-packet       :inline :offset-assert 32)
   (vecdata        sprite-glow-data :inline :offset-assert 48)
   (shader-packet  dma-packet       :inline :offset-assert 112)
   (mscal-packet   dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(define-extern *sprite-glow-template* sprite-glow-template)
(define-extern sprite-glow-vu1-block vu-function)
(define-extern sprite-glow-init-consts (function sprite-glow-consts none))
(define-extern sprite-glow-init-engine (function dma-buffer none))
(define-extern *sprite-glow-dma-packet-data* sprite-glow-dma-packet-data)
(define-extern sprite-glow-add-sprite (function dma-buffer sprite-vec-data-2d float float float adgif-shader none))
;; (define-extern sprite-glow-add-simple-sprite function)
(define-extern sprite-glow-draw (function dma-buffer none))
(define-extern add-shader-to-dma (function dma-buffer pointer))
(define-extern *simple-sprite-system* simple-sprite-system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-sphere                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern make-debug-sphere-table (function vector-array float float vector-array))
(define-extern *debug-sphere-table* (array vector-array))
(define-extern add-debug-sphere-from-table (function bucket-id vector meters rgba int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype debug-line (structure)
  ((flags  int32          :offset-assert 0)
   (bucket bucket-id      :offset-assert 4)
   (v1     vector :inline :offset-assert 16)
   (v2     vector :inline :offset-assert 32)
   (color  rgba           :offset-assert 48)
   (mode   symbol         :offset-assert 52)
   (color2 rgba           :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype debug-text-3d (structure)
  ((flags  int32              :offset-assert 0)
   (bucket bucket-id          :offset-assert 4)
   (pos    vector     :inline :offset-assert 16)
   (color  font-color         :offset-assert 32)
   (offset vector2h   :inline :offset-assert 36)
   (str    string             :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype debug-tracking-thang (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(define-extern transform-float-point (function vector vector4w vector4w))
(define-extern add-debug-point (function symbol bucket-id vector symbol))
(define-extern debug-line-clip? (function vector vector vector vector symbol))
(define-extern internal-draw-debug-line (function bucket-id vector vector rgba symbol rgba pointer))
(define-extern internal-draw-debug-text-3d (function bucket-id string vector font-color vector2h pointer))
(define-extern add-debug-outline-triangle (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-triangle-normal (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-flat-triangle (function symbol bucket-id vector vector vector rgba symbol))
(define-extern *debug-lines* (inline-array debug-line))
(define-extern *debug-lines-trk* debug-tracking-thang)
(define-extern *debug-text-3ds* (inline-array debug-text-3d))
(define-extern *debug-text-3d-trk* debug-tracking-thang)
(define-extern get-debug-line (function debug-line))
(define-extern get-debug-text-3d (function debug-text-3d))
(define-extern debug-reset-buffers (function symbol))
(define-extern debug-draw-buffers (function symbol))
(define-extern add-debug-line (function symbol bucket-id vector vector rgba symbol rgba symbol))
(define-extern add-debug-line2d (function symbol bucket-id vector vector vector symbol))
(define-extern add-debug-box (function symbol bucket-id vector vector rgba symbol))
(define-extern add-debug-box-with-transform (function symbol bucket-id bounding-box matrix rgba symbol)) ;; unsure if arg2 is bounding-box
(define-extern add-debug-x (function symbol bucket-id vector rgba symbol))
(define-extern add-debug-cross (function symbol bucket-id vector float symbol))
(define-extern add-debug-text-3d (function symbol bucket-id string vector font-color vector2h symbol))
(define-extern add-debug-sphere-with-transform (function symbol bucket-id vector meters matrix rgba symbol))
(define-extern add-debug-sphere (function symbol bucket-id vector meters rgba symbol))
(define-extern add-debug-text-sphere (function symbol bucket-id vector meters string rgba symbol))
(define-extern add-debug-spheres (function symbol bucket-id (inline-array vector) int rgba symbol))
(define-extern add-debug-line-sphere (function symbol bucket-id vector vector float rgba none))
(define-extern add-debug-circle (function symbol bucket-id vector float rgba matrix symbol))
(define-extern add-debug-vector (function symbol bucket-id vector vector meters rgba symbol))
(define-extern add-debug-matrix (function symbol bucket-id matrix meters matrix))
(define-extern add-debug-rot-matrix (function symbol bucket-id matrix vector matrix))
(define-extern add-debug-quaternion (function symbol bucket-id vector quaternion none))
(define-extern add-debug-cspace (function symbol bucket-id cspace cspace))
(define-extern add-debug-yrot-vector (function symbol bucket-id vector float float rgba symbol))
(define-extern add-debug-arc (function symbol bucket-id vector float float float rgba matrix symbol))
(define-extern add-debug-curve (function symbol bucket-id (inline-array vector) int (pointer float) int rgba symbol))
(define-extern add-debug-curve2 (function symbol bucket-id curve rgba symbol symbol))
(define-extern add-debug-points (function symbol bucket-id (inline-array vector) int rgba float int symbol))
(define-extern debug-percent-bar (function symbol bucket-id int int float rgba int int symbol))
(define-extern debug-pad-display (function cpad-info symbol))
(define-extern add-debug-light (function symbol bucket-id light vector string symbol))
(define-extern add-debug-lights (function symbol bucket-id (inline-array light) vector symbol))
(define-extern drawable-frag-count (function drawable int))
(define-extern history-init (function pos-history int pos-history))
(define-extern history-draw-and-update (function pos-history symbol vector symbol))
(define-extern dma-timeout-cam (function vector))
(define-extern display-file-info (function int))
(define-extern add-debug-cursor (function symbol bucket-id int int int none))
(define-extern *boundary-polygon* none) ;; (inline-array lbvtx) ;; TODO: figure out what this actually is
(define-extern init-boundary-regs (function none))
(define-extern add-boundary-shader (function texture-id dma-buffer none))
;; (define-extern draw-boundary-polygon function) ;; function
;; (define-extern render-boundary-quad function) ;; (function lbvtx dma-buffer none)
;; (define-extern render-boundary-tri function) ;; (function lbvtx dma-buffer none)
;; (define-extern add-debug-bound-internal function)
(define-extern add-debug-bound (function int transform int rgba rgba int none))
(define-extern cpu-delay (function int none))
(define-extern qword-read-time (function (array uint128) int int))
(define-extern bugfix? (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; history                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum collide-status
  :bitfield #t
  :type uint64
  (on-surface 0)
  (on-ground 1)
  (touch-surface 2)
  (touch-wall 3)
  (touch-ceiling 4)
  (touch-actor 5)
  (on-special-surface 6)
  (touch-edge 7)
  (no-touch 8)
  (blocked 9)
  (on-water 10)
  (impact-surface 11)
  (touch-background 12)
  (stuck 13)
  (touch-ceiling-sticky 14)
  (glance 15)
  (probe-hit 16)
  )

(defenum history-channel
  :type uint8
  (trans 0)
  (transv 1)
  (transv-in 2)
  (transv-out 3)
  (intersect 4)
  (local-normal 5)
  (surface-normal 6)
  (collide-status 7)
  (pat 8)
  (time 9)
  (friction 10))

(deftype history-elt (structure)
  ((record-tag-bytes      uint8 4       :offset-assert 0)
   (record-tag            uint32          :offset 0)
   (record-id             uint16          :offset 0)
   (owner                 uint8           :offset 2)
   (channel               history-channel           :offset-assert 4)
   (timestamp             time-frame          :offset-assert 8)
   (origin                vector  :inline :offset-assert 16)
   (bytes                 uint8 16      :offset-assert 32)
   (vector                vector  :score 1 :inline :offset 32)
   (float                 float           :offset 32)
   (collide-status        collide-status          :offset 32)
   (collide-reaction-flag uint32          :offset 40)
   (pat                   pat-surface          :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype history-iterator (basic)
  ((max-age      uint32  :offset-assert 4)
   (owner        uint8   :offset-assert 8)
   (proc         process   :offset-assert 12)
   (out          object   :offset-assert 16)
   (channel-mask uint64  :offset-assert 24)
   (index        int32   :offset-assert 32)
   (done?        symbol   :offset-assert 36)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (new (symbol type uint) _type_ 0)
    (frame-counter-delta
     "Returns the difference between [[*display*]]'s `base-clock.frame-counter` and the elt's `timestamp`"
     (_type_ history-elt) time-frame 9)
    (update-entries!
     "Iterate through each [[history-elt]] in [[*history*]]
      - If we hit the end set `done?` to true
      - If the `timestamp` on the elt, minus the current framecounter exceeds `max-age`, we are also done, return #f
      - However if we find an elt who's `owner` matches the iterator's, break out early returning that `elt`"
     (_type_) history-elt 10)
    (history-iterator-method-11
     "TODO - Unsure of the purpose
      `min(1.0, ((history-elt.timestamp - 1) + frame-counter) / (max-age + 1)) - 1.0`"
     (_type_ history-elt) float 11)
    )
  )

(deftype history (basic)
  ((alloc-index      int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (elts             history-elt :dynamic :inline :offset 16)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (new (symbol type int) _type_ 0)
    (clear-record-tags!
      "First grab the latest [[history-elt]] at `alloc-index`
       1. update it's `channel`, `record-id` and `owner` from the provided args
       2. - if it's `record-tag` is zero -- return it
           - otherwise, iterate through all `elts` until one is found that does not match it's `timestamp`
             - if not `0` out the `record-tag` for that elt and continue iteration"
      (_type_ history-channel uint uint) history-elt 9)
    (clear-history-entries!
      "Iterates through each [[history-elt]] in the `elt` dynamic array
       For each entry:
       - clear `timestamp`
       - clear `record-tag`"
      (_type_) none 10)
    )
  )

(define-extern history-channel->string (function history-channel string))
(define-extern *history* history)
(define-extern history-print (function history-iterator none))
(define-extern history-draw (function history-iterator none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-vu1                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern merc-vu1-block vu-function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emerc-vu1                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern emerc-vu1-block vu-function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-blend-shape               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert 0)
   (vtx-count uint32                   :offset-assert 16)
   (overlap   uint32                   :offset-assert 20)
   (lump-dest uint32                   :offset-assert 24)
   (lump-qwc  uint32                   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype blerc-block (structure)
  ((output uint8              848     :offset-assert 0) ;; guessed by decompiler
   (header blerc-block-header :inline :offset-assert 848)
   )
  :method-count-assert 9
  :size-assert         #x370
  :flag-assert         #x900000370
  )
|#

#|
(deftype blerc-dcache (structure)
  ((repl-mult vector 40 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )
|#

#|
(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert 0)
   (next             uint32  :offset-assert 4)
   (min-val          int16   :offset-assert 8)
   (max-val          int16   :offset-assert 10)
   (fragment-count   int32   :offset-assert 12)
   (vtx-count        int32   :offset-assert 16)
   (target-vtx-count int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype blerc-context (structure)
  ((block-a blerc-block :inline :offset-assert 0)
   (dummy   uint8       7312    :offset-assert 880) ;; guessed by decompiler
   (block-b blerc-block :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x2370
  :flag-assert         #x900002370
  )
|#

;; (define-extern *stats-blerc* object) ;; symbol
;; (define-extern *blerc-globals* object) ;; blerc-globals
;; (define-extern blerc-stats-init function) ;; (function none)
(define-extern blerc-init (function none)) ;;
;; (define-extern blerc-a-fragment function) ;; function
;; (define-extern dma-from-spr function) ;; function
;; (define-extern merc-dma-chain-to-spr function) ;; function
(define-extern blerc-execute (function none))
;; (define-extern merc-blend-shape function) ;; (function process-drawable object)
;; (define-extern setup-blerc-chains-for-one-fragment function) ;; (function object object object object object object object)
;; (define-extern setup-blerc-chains function) ;; (function merc-ctrl (pointer int16) dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype texture-login-data (structure)
  ((default-texture-index int32                :offset-assert 0)
   (current-texture-index int32                :offset-assert 4)
   (texture-usage-group   texture-usage-group  :offset-assert 8)
   (merc-ctrl-header      merc-ctrl-header     :offset-assert 12)
   (name                  basic                :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

#|
(deftype merc-fragment-control (structure)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  ;; Failed to read fields.
  )
|#

#|
(deftype merc-ctrl (art-element)
  ()
  :method-count-assert 13
  :size-assert         #xa0
  :flag-assert         #xd000000a0
  ;; Failed to read fields.
  (:methods
    )
  )
|#

(define-extern *texture-login-data* texture-login-data)
(define-extern texture-usage-init (function merc-ctrl symbol))
(define-extern texture-usage-update (function texture symbol))
(define-extern merc-stats-display (function merc-ctrl none))
(define-extern merc-stats (function none))
(define-extern merc-edge-stats (function none))
(define-extern merc-vu1-add-vu-function (function dma-packet vu-function int dma-gif-packet))
(define-extern merc-vu1-initialize-chain (function dma-gif-packet int dma-packet))
(define-extern merc-vu1-init-buffer (function bucket-id int symbol int))
(define-extern merc-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emerc                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern emerc-vu1-initialize-chain (function dma-gif-packet dma-packet))
(define-extern emerc-vu1-init-buffer (function bucket-id gs-test int none))
(define-extern emerc-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ripple                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ripple-request (structure)
  ((waveform ripple-wave  :offset-assert 0) ;; guessed by decompiler
   (effect   merc-effect  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ripple-globals (structure)
  ((count    int32             :offset-assert 0)
   (requests ripple-request 16 :inline :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(define-extern *ripple-globals* "A collection of [[ripple-request]] (max of 16)" ripple-globals)
(define-extern ripple-make-request
  "Iterate through [[*ripple-globals*]] `requests` looking for the one that matches the provided `effect`
   If NOT found, append a new [[ripple-request]] with the providded `effect` and `waveform` to the end of the `requests`.

   NOTE: There can only be 16 effects at a given time, NOOP if already at that limit!"
  (function ripple-wave merc-effect none))
(define-extern ripple-update-waveform-offs (function ripple-wave-set none))
(define-extern ripple-execute-init "TODO - Handled by MIPS2C" (function none))
(define-extern ripple-create-wave-table "TODO - Handled by MIPS2C" (function ripple-wave-set int))
(define-extern ripple-apply-wave-table "TODO - Handled by MIPS2C" (function merc-effect symbol))
(define-extern ripple-execute
  "Iterate through [[*ripple-globals*]] requests, from the end to index `0`
   For each request, if it has a `waveform` create the wave-table via `ripple-create-wave-table`
   Then for each `waveform` apply the `effect` using `ripple-apply-wave-table`

   Once completed, all `requests` have been processed and the `count` is reset to `0`"
  (function none))
(define-extern ripple-matrix-scale "TODO - Handled by MIPS2C" function)
(define-extern ripple-add-debug-sphere (function process-drawable vector float float none))
(define-extern ripple-slow-add-sine-waves (function ripple-wave-set float float float))
(define-extern ripple-find-height (function process-drawable int vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bones                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bone-calculation-list (structure)
  ((first bone-calculation  :offset-assert 0)
   (next  bone-calculation  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *bone-calculation-list* object) ;; bone-calculation-list
;; (define-extern bone-list-init function) ;; (function none)
;; (define-extern bones-vu0-block object) ;; vu-function
;; (define-extern bones-set-sqwc function) ;; (function none)
;; (define-extern bones-reset-sqwc function) ;; (function none)
(define-extern bones-init (function dma-buffer none))
;; (define-extern bones-mtx-calc function) ;; (function int pointer pointer int object none)
(define-extern bones-mtx-calc-execute (function none))
;; (define-extern dump-qword function) ;; (function qword none)
;; (define-extern dump-mem function) ;; (function pointer int none)
;; (define-extern bones-debug function) ;; (function none)
;; (define-extern dump-bone-mem function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-foreground               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern diag-frag-print function)
;; (define-extern debug-merc-highres-runtime function)
;; (define-extern debug-merc-size-runtime function)
;; (define-extern debug-merc-fade-runtime function)
;; (define-extern foreground-check-longest-edge function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; foreground                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern foreground-vu0-block object)
;; (define-extern *bucket-map* object)
;; (define-extern vu1-bucket-map function)
;; (define-extern generic-bucket-state-init function)
;; (define-extern mercneric-chain-init function)
(define-extern foreground-init (function none))
;; (define-extern texscroll-make-request function) ;; (function merc-effect none)
(define-extern texscroll-execute (function none))
(define-extern vu-lights<-light-group! (function vu-lights light-group none))
;; (define-extern foreground-add-mtx-calc function)
(define-extern foreground-wrapup (function none))
;; (define-extern *default-shadow-settings* object) ;; shadow-settings
;; (define-extern foreground-shadow function)
;; (define-extern foreground-generic-merc-death function)
;; (define-extern foreground-generic-merc-add-fragments function)
;; (define-extern foreground-generic-merc function)
;; (define-extern foreground-merc function)
;; (define-extern foreground-emerc function)
;; (define-extern foreground-check-longest-edge-asm function)
;; (define-extern foreground-ripple function)
;; (define-extern foreground-draw function)
;; (define-extern foreground-draw-hud function)
(define-extern *foreground-draw-engine* engine)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu0                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern generic-vu0-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu1                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern generic-vu1-block object) ;; vu-function
;; (define-extern generic-setup-constants function) ;; (function generic-constants int none)
;; (define-extern generic-add-constants function) ;; (function dma-buffer int none)
;; (define-extern generic-setup-shrub-constants function)
;; (define-extern generic-add-shrub-constants function)
;; (define-extern generic-init-buf function) ;; (function dma-buffer int gs-zbuf none)
;; (define-extern generic-vu1-init-buf function)
;; (define-extern generic-vu1-init-buf-special function)
(define-extern generic-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-effect                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *target-lock* object) ;; symbol
(define-extern *generic-consts* generic-consts)
;; (define-extern generic-work-init function) ;; (function generic-dma-foreground-sink none)
;; (define-extern generic-upload-vu0 function) ;; (function none)
;; (define-extern upload-vu0-program function) ;; (function vu-function pointer none)
;; (define-extern generic-initialize-without-sync function)
;; (define-extern generic-initialize function) ;; (function generic-dma-foreground-sink matrix vu-lights none)
;; (define-extern generic-wrapup function) ;; (function generic-dma-foreground-sink none)
;; (define-extern generic-dma-from-spr function) ;; function
;; (define-extern generic-light-proc function) ;; function
;; (define-extern generic-envmap-proc function) ;; function
;; (define-extern generic-prepare-dma-double function) ;; function
;; (define-extern generic-prepare-dma-single function) ;; function
;; (define-extern generic-envmap-dproc function) ;; function
;; (define-extern generic-interp-dproc function) ;; function
;; (define-extern generic-no-light-proc function) ;; function
;; (define-extern generic-no-light-dproc-only function) ;; function
;; (define-extern generic-no-light-dproc function) ;; function
;; (define-extern generic-no-light+envmap function) ;; function
;; (define-extern generic-no-light function) ;; function
;; (define-extern generic-envmap-only-proc function) ;; function
;; (define-extern generic-light function) ;; function
;; (define-extern generic-copy-vtx-dclr-dtex function) ;; function
;; (define-extern generic-none function) ;; function
;; (define-extern generic-none-dma-wait function) ;; function
;; (define-extern *warp-data* object)
;; (define-extern generic-warp-source-proc function)
;; (define-extern generic-warp-source function)
;; (define-extern generic-warp-dest-proc function)
;; (define-extern generic-warp-dest function)
;; (define-extern generic-warp-envmap-dest function)
;; (define-extern generic-debug-light-proc function) ;; function
;; (define-extern generic-post-debug function) ;; function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-merc                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype invinitdata (structure)
  ((count     uint8   :offset-assert 0)
   (init-data uint8   :offset-assert 1)
   (init-addr uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern mercneric-vu0-block object) ;; vu-function
;; (define-extern *inv-init-table* object) ;; (inline-array invinitdata)
;; (define-extern generic-merc-init-asm function) ;; (function none)
;; (define-extern mercneric-matrix-asm function) ;; function
;; (define-extern mercneric-shader-asm function) ;; function
;; (define-extern mercneric-bittable-asm function) ;; function
;; (define-extern mercneric-convert function) ;; function
;; (define-extern high-speed-reject function) ;; (function none)
;; (define-extern generic-translucent function)
;; (define-extern generic-merc-query function)
;; (define-extern generic-merc-death function)
;; (define-extern generic-merc-execute-asm function) ;; (function none)
;; (define-extern generic-merc-do-chain function)
(define-extern generic-merc-execute-all (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-tie                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gsf-vertex (structure)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; Failed to read fields.
  )
|#

;; (define-extern generic-tie-dma-to-spad function) ;; function
;; (define-extern generic-tie-dma-to-spad-sync function) ;; (function object object none)
;; (define-extern *generic-tie* object) ;; symbol
;; (define-extern generic-tie-decompress function) ;; function
;; (define-extern generic-tie-upload-next function) ;; function
;; (define-extern generic-tie-convert-proc function) ;; function
;; (define-extern generic-tie-convert function) ;; (function none)
;; (define-extern generic-tie-display-stats function) ;; function
;; (define-extern generic-tie-debug function) ;; function
;; (define-extern generic-tie-execute function) ;; (function generic-dma-foreground-sink dma-buffer basic none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-cpu                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shadow-stats (structure)
  ((num-single-tris  uint32  :offset-assert 0)
   (num-double-tris  uint32  :offset-assert 4)
   (num-single-edges uint32  :offset-assert 8)
   (num-double-edges uint32  :offset-assert 12)
   (num-fragments    uint16  :offset-assert 16)
   (num-objects      uint16  :offset-assert 18)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype shadow-dcache (structure)
  ((vtx-table              uint32                :offset-assert 0)
   (single-edge-table      uint32                :offset-assert 4)
   (double-edge-table      uint32                :offset-assert 8)
   (double-tri-table       uint32                :offset-assert 12)
   (dcache-top             uint32                :offset-assert 16)
   (num-facing-single-tris uint32                :offset-assert 20)
   (num-single-edges       uint32                :offset-assert 24)
   (num-double-edges       uint32                :offset-assert 28)
   (single-tri-list        uint32                :offset-assert 32)
   (single-edge-list       uint32                :offset-assert 36)
   (double-edge-list       uint32                :offset-assert 40)
   (ptr-dual-verts         uint32                :offset-assert 44)
   (stats                  shadow-stats :inline  :offset-assert 48)
   (frag-qwc               uint32                :offset-assert 68)
   (center                 vector       :inline  :offset-assert 80)
   (plane                  vector       :inline  :offset-assert 96)
   (top-plane              vector       :inline  :offset-assert 112)
   (near-plane             vector       :inline  :offset-assert 128)
   (light-dir              vector       :inline  :offset-assert 144)
   (vtx-min                vector       :inline  :offset-assert 160)
   (data                   uint8        :dynamic :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern *shadow-data* object) ;; shadow-data
;; (define-extern shadow-invert-z-buf function)
;; (define-extern shadow-make-invert-buf function)
;; (define-extern *shadow-dma-invert-call* object)
;; (define-extern shadow-dma-init function) ;; (function dma-buffer none)
;; (define-extern shadow-dma-end function) ;; (function dma-buffer none)
;; (define-extern shadow-vu0-block object) ;; vu-function
;; (define-extern shadow-xform-verts function) ;; function
;; (define-extern shadow-calc-dual-verts function) ;; function
;; (define-extern shadow-scissor-edges function) ;; function
;; (define-extern shadow-scissor-top function) ;; function
;; (define-extern shadow-init-vars function) ;; function
;; (define-extern shadow-find-facing-single-tris function) ;; function
;; (define-extern shadow-find-single-edges function) ;; function
;; (define-extern shadow-find-facing-double-tris function) ;; function
;; (define-extern shadow-find-double-edges function) ;; function
;; (define-extern shadow-add-verts function) ;; function
;; (define-extern shadow-add-facing-single-tris function) ;; function
;; (define-extern shadow-add-single-edges function) ;; function
;; (define-extern shadow-add-single-tris function)
;; (define-extern shadow-add-double-tris function) ;; function
;; (define-extern shadow-add-double-edges function) ;; function
;; (define-extern debug-draw-settings function)
;; (define-extern shadow-execute function) ;; (function shadow-dma-packet pointer pointer)
;; (define-extern shadow-vu0-upload function) ;; (function none)
(define-extern shadow-execute-all (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-vu1                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shadow-vu1-constants (structure)
  ((hmgescale vector     :inline :offset-assert 0)
   (invhscale vector     :inline :offset-assert 16)
   (texoffset vector     :inline :offset-assert 32)
   (texscale  vector     :inline :offset-assert 48)
   (hvdfoff   vector     :inline :offset-assert 64)
   (fog       vector     :inline :offset-assert 80)
   (clrs      vector     2       :offset-assert 96) ;; guessed by decompiler
   (adgif     gs-gif-tag :inline :offset-assert 128)
   (texflush  gs-adcmd   :inline :offset-assert 144) ;; ad-cmd :inline
   (flush     gs-adcmd   :inline :offset-assert 160) ;; ad-cmd :inline
   (trigif    gs-gif-tag :inline :offset-assert 176)
   (quadgif   gs-gif-tag :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )
|#

#|
(deftype shadow-vu1-data (structure)
  ((adgif     gs-gif-tag :inline :offset-assert 0)
   (ad        gs-adcmd   :inline :offset-assert 16)
   (flush     gs-adcmd   :inline :offset-assert 32)
   (trigif    gs-gif-tag :inline :offset-assert 48)
   (quadgif   gs-gif-tag :inline :offset-assert 64)
   (texoffset vector     :inline :offset-assert 80)
   (texscale  vector     :inline :offset-assert 96)
   (clrs      UNKNOWN    2       :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

;; (define-extern *shadow-vu1-data* object)
;; (define-extern shadow-vu1-block object) ;; vu-function
;; (define-extern shadow-vu1-add-constants function) ;; (function dma-buffer none)
;; (define-extern shadow-vu1-patch-consts function)
;; (define-extern shadow-vu1-add-matrix function) ;; (function dma-buffer math-camera none)
;; (define-extern shadow-vu1-init-buffer function) ;; (function dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; warp                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern fx-copy-buf (function dma-buffer none))
(define-extern *warp-shader* adgif-shader)
(define-extern create-blanket "Does nothing, always returns '#f" (function symbol))
(define-extern *warp* symbol)
(define-extern warp-test "First two args are unused" (function object object int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *texture-anim-work* object)
;; (define-extern texture-anim-layer-interp function)
;; (define-extern texture-anim-layer-add-shader function)
;; (define-extern texture-anim-layer-add-clut-shader function)
;; (define-extern texture-anim-layer-draw function)
;; (define-extern default-texture-anim-layer-func function)
;; (define-extern blend-clut-texture-anim-layer-func function)
;; (define-extern move-rg-to-ba-texture-anim-layer-func function)
;; (define-extern fill-rgb-texture-anim-layer-func function)
(define-extern update-texture-anim (function bucket-id none))
;; (define-extern no-alpha-texture-anim-layer-func function)
;; (define-extern copy-alpha-texture-anim-layer-func function)
;; (define-extern copy-clut-alpha-texture-anim-layer-func function)
;; (define-extern set-alpha-texture-anim-layer-func function)
;; (define-extern set-clut-alpha-texture-anim-layer-func function)
;; (define-extern dest-texture-init function)
;; (define-extern src-texture-init function)
;; (define-extern src-texture-init-mt8 function)
;; (define-extern make-noise-texture function)
;; (define-extern make-cloud-clut function)
;; (define-extern texture-anim-cloud-clut-upload function)
;; (define-extern texture-anim-cloud-clut-init function)
;; (define-extern make-slime-clut function)
;; (define-extern texture-anim-slime-clut-upload function)
;; (define-extern texture-anim-slime-clut-init function)
;; (define-extern make-ramp-clut function)
;; (define-extern make-alpha-ramp-clut function)
;; (define-extern noise-texture-init function)
;; (define-extern texture-anim-alpha-ramp-clut-upload function)
;; (define-extern texture-anim-alpha-ramp-clut-init function)
;; (define-extern texture-anim-overide-size-init function)
;; (define-extern texture-anim-change-mt8h-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-funcs             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern noise-texture-anim-layer-func function)
;; (define-extern cloud-texture-anim-layer-func function)
;; (define-extern cloud-texture-anim-func function)
;; (define-extern fog-texture-anim-init function)
(define-extern *fog-texture-work* fog-texture-work)
;; (define-extern real-fog-texture-anim-func function)
;; (define-extern fog-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-tables            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *sky-texture-anim-array* texture-anim-array)
(define-extern set-fog-height! (function float none))
(define-extern set-cloud-minmax! (function float float none))
(define-extern *darkjak-texture-anim-array* texture-anim-array)
;; (define-extern set-darkjak-texture-morph! function)
(define-extern *skull-gem-texture-anim-array* texture-anim-array)
(define-extern *waterfall-texture-anim-array* texture-anim-array)
(define-extern *waterfall-b-texture-anim-array* texture-anim-array)
(define-extern *bomb-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blit-displays                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *blit-displays-work* blit-displays-work)
;; (define-extern blit-disp-slow function)
;; (define-extern blur-disp function)
;; (define-extern filter-disp function)
;; (define-extern hflip-disp function)
(define-extern blit-displays (function none))
(define-extern draw-color-bars (function none))
;; (define-extern draw-raw-image function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font-data                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *font12-table* (inline-array vector))
(define-extern *font24-table* (inline-array vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype draw-string-result (uint64)
  ((length float :offset 0)
   (b float :offset 32))
  )

(define-extern gen-font-12 (function string none))
(define-extern draw-string-asm (function string dma-buffer font-context uint))
(define-extern draw-string (function string dma-buffer font-context draw-string-result))
(define-extern get-string-length (function string font-context draw-string-result))
(define-extern draw-string-xy (function string dma-buffer int int font-color font-flags draw-string-result))
(define-extern draw-string-adv (function string dma-buffer font-context none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; decomp                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype huf-dictionary-node (structure)
  ((zero uint16  :offset-assert 0)
   (one  uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern unpack-comp-rle function) ;; (function (pointer int8) (pointer int8) none)
;; (define-extern unpack-comp-huf function) ;; (function (pointer uint8) (pointer uint8) uint huf-dictionary-node none)
(define-extern unpack-comp-lzo (function object object none))
;; (define-extern pack-comp-rle function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; background                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *background-work* background-work)
;; (define-extern background-vu0-block object) ;; vu-function
;; (define-extern background-upload-vu0 function) ;; (function none)
(define-extern init-background (function none))
;; (define-extern upload-vis-bits function) ;; (function level level bsp-header none)
;; (define-extern set-background-regs! function)
;; (define-extern set-tie-quard-planes! function)
;; (define-extern set-shrub-quard-planes! function)
(define-extern finish-background (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; draw-node                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern draw-node-cull function) ;; (function pointer pointer (inline-array draw-node) int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrubbery                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#|
(deftype dma-test (structure)
  ((data UNKNOWN 101 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x650
  :flag-assert         #x900000650
  )
|#

#|
(deftype dma-test-work (structure)
  ((upload dma-packet :inline :offset-assert 0)
   (end    dma-packet :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

;; (define-extern mem-usage-shrub-walk function) ;; (function draw-node int memory-usage-block int draw-node)
;; (define-extern shrub-vu1-block object) ;; vu-function
;; (define-extern shrub-num-tris function) ;; (function shrubbery uint)
(define-extern shrub-make-perspective-matrix (function matrix matrix)) ;;
;; (define-extern shrub-init-view-data function) ;; (function shrub-view-data symbol)
;; (define-extern shrub-upload-view-data function) ;; (function dma-buffer symbol)
;; (define-extern shrub-time function) ;; (function int int int int int int)
;; (define-extern shrub-do-init-frame function) ;; (function dma-buffer symbol)
;; (define-extern shrub-init-frame function) ;; (function dma-buffer gs-test none)
;; (define-extern shrub-upload-model function) ;; (function shrubbery dma-buffer int symbol)
;; (define-extern draw-inline-array-instance-shrub function) ;; (function dma-buffer drawable int (inline-array prototype-bucket-shrub) none)
;; (define-extern draw-prototype-inline-array-shrub function) ;; (function int (inline-array prototype-bucket-shrub) pointer)
;; (define-extern draw-drawable-tree-instance-shrub function) ;; (function drawable-tree-instance-shrub level none)
;; (define-extern *dma-test* object)
;; (define-extern *dma-test-work* object)
;; (define-extern init-dma-test function)
;; (define-extern dma-test-func function)
;; (define-extern move-test-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrub-work                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *instance-shrub-work* instance-shrub-work) ;;
;; (define-extern upload-generic-shrub function) ;; (function dma-buffer generic-shrub-fragment int int dma-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-near                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern tnear-vu1-block object) ;; vu-function
;; (define-extern tfrag-details function) ;; (function tfragment none)
;; (define-extern clip-restore function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *tfrag-display-stats* object) ;; symbol
;; (define-extern tfrag-vu1-block object) ;; vu-function
;; (define-extern tfrag-data-setup function) ;; (function tfrag-data int none)
;; (define-extern add-tfrag-mtx-0 function) ;; (function dma-buffer none)
;; (define-extern add-tfrag-mtx-1 function) ;; (function dma-buffer none)
;; (define-extern add-tfrag-data function) ;; (function dma-buffer int none)
;; (define-extern t-stat object) ;; tfrag-stats
;; (define-extern tfrag-print-stats function) ;; (function symbol none)
;; (define-extern tfrag-init-buffer function) ;; (function dma-buffer gs-test int none)
;; (define-extern tfrag-end-buffer function) ;; (function dma-buffer none)
;; (define-extern draw-inline-array-tfrag function) ;; (function pointer drawable-inline-array int dma-buffer none)
;; (define-extern tfrag-scissor-init-buffer function)
;; (define-extern tfrag-scissor-end-buffer function)
;; (define-extern draw-inline-array-tfrag-scissor function)
;; (define-extern stats-tfrag-asm function) ;; (function tfragment none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-methods                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tfrag-init-data (structure)
  ((tfrag-bucket               int32  :offset-assert 0)
   (tfrag-scissor-bucket       int32  :offset-assert 4)
   (tfrag-trans-bucket         int32  :offset-assert 8)
   (tfrag-scissor-trans-bucket int32  :offset-assert 12)
   (tfrag-water-bucket         int32  :offset-assert 16)
   (tfrag-water-scissor-bucket int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern edge-debug-lines function) ;; (function (array vector-array) none)
;; (define-extern draw-drawable-tree-tfrag function) ;; (function drawable-tree-tfrag none)
;; (define-extern draw-drawable-tree-tfrag-trans function)
;; (define-extern draw-drawable-tree-tfrag-water function)
;; (define-extern tfrag-vu1-init-buf function)
;; (define-extern tfrag-scissor-vu1-init-buf function)
;; (define-extern *tfrag-init-table* object)
(define-extern tfrag-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-work                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *tfrag-work* tfrag-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#|
(deftype tie-consts (structure)
  ((data      uint32   40      :offset-assert 0) ;; guessed by decompiler
   (vector    vector   10      :offset-assert 0) ;; guessed by decompiler
   (quads     uint128  10      :offset-assert 0) ;; guessed by decompiler
   (adgif     qword    :inline :offset-assert 0) ;; gs-gif-tag :inline
   (strgif    qword    :inline :offset-assert 16) ;; gs-gif-tag :inline
   (extra     qword    :inline :offset-assert 32) ;; vector :inline
   (gifbufs   qword    :inline :offset-assert 48) ;; vector :inline
   (clrbufs   qword    :inline :offset-assert 64)
   (misc      qword    :inline :offset-assert 80)
   (atestgif  qword    :inline :offset-assert 96) ;; gs-gif-tag :inline
   (alpha     qword    :inline :offset-assert 112)
   (atest     ad-cmd   2       :offset-assert 128) ;; guessed by decompiler
   (atest-tra gs-adcmd :inline :offset-assert 128) ;; ad-cmd :inline
   (atest-def gs-adcmd :inline :offset-assert 144) ;; ad-cmd :inline
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

;; (define-extern tie-vu1-block object) ;; vu-function
;; (define-extern tie-init-consts function) ;; (function tie-consts int none)
;; (define-extern tie-init-engine function) ;; (function dma-buffer gs-test int none)
;; (define-extern tie-end-buffer function) ;; (function dma-buffer none)
;; (define-extern tie-int-reg function) ;; (function int string)
;; (define-extern tie-float-reg function) ;; (function int string)
;; (define-extern tie-ints function) ;; (function none)
;; (define-extern tie-floats function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; etie-vu1                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype etie-consts (structure)
  ((gifbufs qword        :inline :offset-assert 0)
   (adgif   qword        :inline :offset-assert 16)
   (alpha   qword        :inline :offset-assert 32)
   (strgif  qword        :inline :offset-assert 48)
   (envgif  qword        :inline :offset-assert 64)
   (envmap  adgif-shader :inline :offset-assert 80)
   (pers0   vector       :inline :offset-assert 160)
   (pers1   vector       :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )
|#

#|
(deftype etie-matrix (structure)
  ((rmtx  matrix  :inline :offset-assert 0)
   (nmtx  matrix3 :inline :offset-assert 64)
   (morph float           :offset-assert 76)
   (fog   float           :offset-assert 92)
   (fade  uint32          :offset-assert 108)
   (tint  qword   :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

;; (define-extern etie-vu1-block object)
;; (define-extern etie-magic function)
;; (define-extern etie-init-consts function)
;; (define-extern etie-init-engine function)
;; (define-extern etie-end-buffer function)
;; (define-extern etie-float-reg-bp function)
;; (define-extern etie-float-reg function)
;; (define-extern etie-floats function)
;; (define-extern etie-int-reg function)
;; (define-extern etie-ints function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; etie-near-vu1                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype etn-consts (structure)
  ((gifbufs qword           :inline :offset-assert 0)
   (adgif   qword           :inline :offset-assert 16)
   (alpha   qword           :inline :offset-assert 32)
   (strgif  generic-gif-tag :inline :offset-assert 48)
   (envgif  generic-gif-tag :inline :offset-assert 64)
   (envmap  adgif-shader    :inline :offset-assert 80)
   (pers0   vector          :inline :offset-assert 160)
   (pers1   vector          :inline :offset-assert 176)
   (hvdf    vector          :inline :offset-assert 192)
   (invh    vector          :inline :offset-assert 208)
   (guard   vector          :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )
|#

#|
(deftype etn-matrix (structure)
  ((rmtx  matrix  :inline :offset-assert 0)
   (nmtx  matrix3 :inline :offset-assert 64)
   (morph float           :offset-assert 76)
   (fog   float           :offset-assert 92)
   (fade  uint32          :offset-assert 108)
   (tint  qword   :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

#|
(deftype etn-vtx (structure)
  ((pos vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (tex vector :inline :offset-assert 32)
   (tx2 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype etn-plane (structure)
  ((point   uint32          :offset-assert 0)
   (prev    uint32          :offset-assert 4)
   (outfunc uint32          :offset-assert 8)
   (flags   uint32          :offset-assert 12)
   (out     etn-vtx :inline :offset-assert 16)
   (in      etn-vtx :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

;; (define-extern etn-vu1-block object)
;; (define-extern etn-magic function)
;; (define-extern etn-init-consts function)
;; (define-extern etn-init-engine function)
;; (define-extern etn-end-buffer function)
;; (define-extern etn-float-reg-calc function)
;; (define-extern etn-float-reg function)
;; (define-extern etn-floats function)
;; (define-extern etn-int-reg-draw function)
;; (define-extern etn-int-reg function)
;; (define-extern etn-ints function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-near                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tie-near-consts (structure)
  ((extra     qword    :inline :offset-assert 0)
   (gifbufs   qword    :inline :offset-assert 16)
   (clrbufs   qword    :inline :offset-assert 32)
   (adgif     qword    :inline :offset-assert 48) ;; gs-gif-tag :inline
   (strgif    qword    :inline :offset-assert 64) ;; gs-gif-tag :inline
   (fangif    qword    :inline :offset-assert 80) ;; gs-gif-tag :inline
   (hvdfoffs  vector   :inline :offset-assert 96)
   (invhscale vector   :inline :offset-assert 112)
   (guard     vector   :inline :offset-assert 128)
   (atest     ad-cmd   2       :offset-assert 144) ;; guessed by decompiler
   (atest-tra gs-adcmd :inline :offset-assert 144) ;; ad-cmd :inline
   (atest-def gs-adcmd :inline :offset-assert 160) ;; ad-cmd :inline
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern tie-near-vu1-block object) ;; vu-function
;; (define-extern tie-near-init-consts function) ;; (function tie-near-consts int none)
;; (define-extern tie-near-init-engine function) ;; (function dma-buffer gs-test int none)
;; (define-extern tie-near-end-buffer function) ;; (function dma-buffer none)
;; (define-extern tie-scissor-make-perspective-matrix function)
;; (define-extern tie-near-int-reg function) ;; (function int string)
;; (define-extern tie-near-float-reg function) ;; (function int string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-work                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *instance-tie-work* instance-tie-work) ;;
;; (define-extern *prototype-tie-work* object) ;; prototype-tie-work

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-methods                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tie-debug (structure)
  ((max-instance  uint32  :offset-assert 0)
   (min-instance  uint32  :offset-assert 4)
   (test-fragment uint32  :offset-assert 8)
   (frag-count    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype tie-init-data (structure)
  ((tie-bucket                      int32  :offset-assert 0)
   (tie-scissor-bucket              int32  :offset-assert 4)
   (tie-envmap-bucket               int32  :offset-assert 8)
   (tie-envmap-scissor-bucket       int32  :offset-assert 12)
   (tie-vanish-bucket               int32  :offset-assert 16)
   (tie-trans-bucket                int32  :offset-assert 20)
   (tie-scissor-trans-bucket        int32  :offset-assert 24)
   (tie-envmap-trans-bucket         int32  :offset-assert 28)
   (tie-envmap-scissor-trans-bucket int32  :offset-assert 32)
   (tie-water-bucket                int32  :offset-assert 36)
   (tie-scissor-water-bucket        int32  :offset-assert 40)
   (tie-envmap-water-bucket         int32  :offset-assert 44)
   (tie-envmap-scissor-water-bucket int32  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

;; (define-extern *tie* object) ;; tie-instance-debug
;; (define-extern tie-debug-between function) ;; (function uint uint uint)
;; (define-extern tie-debug-one function) ;; (function uint uint uint)
;; (define-extern tie-debug-frag-between function)
;; (define-extern tie-debug-frag-one function)
;; (define-extern walk-tie-generic-prototypes function) ;; (function none)
;; (define-extern *pke-hack* object) ;; vector
;; (define-extern draw-inline-array-instance-tie function) ;; (function pointer (inline-array instance-tie) int dma-buffer none)
;; (define-extern draw-inline-array-prototype-tie-asm function) ;; (function dma-buffer int prototype-array-tie none)
;; (define-extern instance-tie-patch-buckets function)
;; (define-extern draw-drawable-tree-instance-tie function) ;; (function drawable-tree-instance-tie level none)
;; (define-extern tie-init-scissor-buf function)
;; (define-extern tie-init-buf function)
;; (define-extern tie-init-envmap-buf function)
;; (define-extern tie-init-envmap-scissor-buf function)
;; (define-extern *tie-init-table* object)
(define-extern tie-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sync-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trajectory                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern traj2d-calc-initial-speed-using-tilt (function traj2d-params symbol))
(define-extern traj3d-calc-initial-velocity-using-tilt (function traj3d-params symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-launcher             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sparticle-launcher (basic)
  ()
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  ;; Failed to read fields.
  (:methods
    (sparticle-launcher-method-9 () none 9)
    (sparticle-launcher-method-10 () none 10)
    )
  )
|#

(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system           :offset-assert 0) ;; guessed by decompiler
   (sp-launcher sparticle-launcher         :offset-assert 4) ;; guessed by decompiler
   (pos         vector             :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sp-launch-queue (basic)
  ((in-use int32                          :offset-assert 4)
   (queue  sp-queued-launch-particles 256 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2010
  :flag-assert         #x900002010
  )

(deftype particle-adgif-cache (basic)
  ((used    int32           :offset-assert 4)
   (last    uint16          :offset-assert 8)
   (lastgif adgif-shader    :offset-assert 12)
   (tidhash uint16       80 :offset-assert 16) ;; guessed by decompiler
   (spadgif adgif-shader 80 :inline :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )

(deftype sp-launch-stack (structure)
  ((ra         basic                       :offset-assert 0)
   (dummy0     basic                       :offset-assert 4)
   (dummy1     basic                       :offset-assert 8)
   (b-spfic    basic                       :offset-assert 12)
   (r16        uint128                     :offset-assert 16)
   (r17        uint128                     :offset-assert 32)
   (r18        uint128                     :offset-assert 48)
   (pos        uint128                     :offset-assert 64)
   (matrix     matrix              :inline :offset-assert 80)
   (l-spfic    basic                       :offset-assert 144)
   (birth-info sparticle-birthinfo :inline :offset-assert 160)
   (sprite     sprite-vec-data-2d  :inline :offset-assert 192)
   (r19        uint128                     :offset-assert 240)
   (r20        uint128                     :offset-assert 256)
   (r21        uint128                     :offset-assert 272)
   (r22        uint128                     :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x130
  :flag-assert         #x900000130
  ;; field ra uses ~A with a signed load field dummy0 uses ~A with a signed load field dummy1 uses ~A with a signed load field b-spfic uses ~A with a signed load field l-spfic uses ~A with a signed load
  )

(define-extern *part-id-table* (array sparticle-launcher))
(define-extern *part-group-id-table* (array sparticle-launch-group)) ;;
(define-extern *sp-temp* int)
(define-extern lookup-part-group-by-name
  "Iterate through the [[*part-group-id-table*]] and return the matching [[sparticle-launch-group]], or [[#f]] otherwise"
  (function string sparticle-launch-group))
(define-extern lookup-part-group-pointer-by-name
  "Similar to [[lookup-part-group-by-name]] but returns a pointer instead"
  (function string (pointer object))) ;;
(define-extern part-group-pointer?
  "Verifies if the given pointer, points to a [[sparticle-launch-group]]"
  (function pointer symbol))
(define-extern unlink-part-group-by-heap (function kheap int)) ;;
(define-extern sp-init-fields! (function object (inline-array sp-field-init-spec) sp-field-id sp-field-id symbol object)) ;; TODO - mips2c
(define-extern *sp-launcher-lock* symbol) ;;
(define-extern *sp-launch-queue* sp-launch-queue) ;;
(define-extern *sp-launcher-enable* symbol) ;;
;; (define-extern particle-setup-adgif (function adgif-shader texture-id none)) ;; TODO - assertion failure
(define-extern *particle-adgif-cache* particle-adgif-cache) ;;
(define-extern particle-adgif-cache-flush "Clear [[*particle-adgif-cache*]]" (function none))
(define-extern particle-adgif (function adgif-shader texture-id none)) ;; TODO - particle-adgif atomic ops, MIPS2C
(define-extern particle-adgif-callback (function adgif-shader none)) ;; TODO bad VF dependencies
(define-extern sp-queue-launch (function sparticle-system sparticle-launcher matrix int))
(define-extern sp-adjust-launch (function sparticle-launchinfo sparticle-cpuinfo (inline-array sp-field-init-spec) matrix symbol none)) ;;
(define-extern sp-euler-convert (function sparticle-launchinfo sparticle-cpuinfo none)) ;;
(define-extern sp-rotate-system (function sparticle-launchinfo sparticle-cpuinfo transformq none)) ;;
(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none)) ;; TODO - mips2c
(define-extern *death-adgif* adgif-shader) ;;
(define-extern sp-launch-particles-death (function sparticle-system sparticle-launcher vector none)) ;;
(define-extern sp-clear-queue (function none)) ;;
(define-extern sp-relaunch-setup-fields (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)) ;;
(define-extern sp-relaunch-particle-2d (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)) ;;
(define-extern sp-relaunch-particle-3d (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)) ;;
(define-extern execute-part-engine (function none)) ;; TODO - whats the basic off the connection?
(define-extern sparticle-track-root (function object sparticle-cpuinfo vector none)) ;;
(define-extern sparticle-track-root-prim (function object sparticle-cpuinfo vector none)) ;;
(define-extern sparticle-track-joint (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-turn-to-vel (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d none))
(define-extern birth-func-copy-rot-color (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)) ;;
(define-extern *global-toggle* int) ;;
(define-extern birth-func-copy2-rot-color (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)) ;;
(define-extern birth-func-copy-omega-to-z (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)) ;;
(define-extern birth-func-random-next-time (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)) ;;
(define-extern sparticle-respawn-heights (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-respawn-timer (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-texture-animate (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-texture-day-night (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-mode-animate (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-motion-blur (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-motion-blur-old "Unused" (function object sparticle-cpuinfo sprite-vec-data-3d object))
(define-extern sparticle-set-conerot (function sparticle-launcher vector none))
(define-extern sparticle-next-on-mode-1 (function sparticle-system sparticle-cpuinfo sparticle-launchinfo float))
(define-extern check-ground-bounce (function sparticle-system sparticle-cpuinfo sparticle-launchinfo float))
(define-extern check-drop-group-center (function sparticle-system sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-y->userdata (function sparticle-system sparticle-cpuinfo matrix none)) ;;
(define-extern birth-func-ocean-height (function sparticle-system sparticle-cpuinfo matrix none)) ;;
(define-extern birth-func-camera-orient (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern *particle-quat* quaternion) ;;
(define-extern birth-func-set-quat (function int sparticle-cpuinfo sparticle-launchinfo none)) ;;
(define-extern *particle-vel* vector)
(define-extern birth-func-set-vel (function object sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-texture-group (function int sparticle-cpuinfo sparticle-launchinfo none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern sp-particle-copy! (function sparticle-cpuinfo sparticle-cpuinfo none)) ;;
(define-extern *sp-particle-system-2d* sparticle-system) ;;
(define-extern *sp-particle-system-3d* sparticle-system) ;; sparticle-system
(define-extern sp-get-block-size (function sparticle-system int int)) ;;
(define-extern sp-get-approx-alloc-size (function sparticle-system int int)) ;;
(define-extern sp-free-particle (function sparticle-system int sparticle-cpuinfo sprite-vec-data-2d none)) ;;
(define-extern sp-get-particle (function sparticle-system int sparticle-launch-state sparticle-cpuinfo)) ;; TODO - manually fixed in jak 1? gross
(define-extern sp-kill-particle (function sparticle-system sparticle-cpuinfo symbol)) ;;
(define-extern sp-orbiter (function sparticle-system sparticle-cpuinfo vector none)) ;;
(define-extern sp-process-block-2d (function sparticle-system int int int int symbol none)) ;; TODO - mips2c
(define-extern sp-process-block-3d (function sparticle-system int int int int symbol none)) ;; TODO - mips2c
(define-extern sp-copy-to-spr (function int pointer int none)) ;; TODO - these are all actually uints, but this is needed to get the casts right...
(define-extern sp-copy-from-spr (function int pointer int none)) ;; TODO - these are all actually uints, but this is needed to get the casts right...
(define-extern memcpy function) ;; TODO - was done manually as well?
(define-extern sp-process-block (function sparticle-system int sprite-array-2d int none))
(define-extern sp-process-particle-system (function sparticle-system int sprite-array-2d none))
(define-extern *particles-flag* symbol) ;;
(define-extern forall-particles-with-key-runner (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) sparticle-system none)) ;;
(define-extern forall-particles-with-key (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) symbol symbol none))
(define-extern sparticle-kill-it (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level0 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level1 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level2 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level3 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level4 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level5 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-60-to-50 (function sparticle-system sparticle-cpuinfo pointer none))
(define-extern sparticle-50-to-60 (function sparticle-system sparticle-cpuinfo pointer none))
(define-extern kill-all-particles-with-key (function sparticle-launch-control none))
(define-extern forall-particles-runner (function (function sparticle-system sparticle-cpuinfo pointer none) sparticle-system none))
(define-extern forall-particles (function function symbol symbol none))
(define-extern kill-all-particles-in-level (function level int))
(define-extern all-particles-50-to-60 (function none))
(define-extern all-particles-60-to-50 (function none))
(define-extern remap-particle (function sparticle-system sparticle-cpuinfo pointer none))
(define-extern remap-all-particles (function none))
(define-extern process-particles (function none))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity-table                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *entity-info* (array entity-info))
(define-extern entity-info-lookup
  "Given a type, return the [[entity-info]] from [[*entity-info*]] whos type
   matches the `ptype` field.  Set's `method 13` on said type that returns the `length`
   off the [[entity-info]]

   If nothing matches, set `method 13` to `#f` and return `#f`"
  (function type entity-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; loader                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype spooler-block (basic)
  ((anim             spool-anim   :offset-assert 4)
   (idle             art-joint-anim   :offset-assert 8)
   (exit             art-joint-anim   :offset-assert 12)
   (break-func       (function process-drawable object)   :offset-assert 16)
   (part             int32   :offset-assert 20)
   (part-audio-start float   :offset-assert 24)
   (old-status       uint16  :offset-assert 28)
   (old-pos          int32   :offset-assert 32)
   (good-time        time-frame  :offset-assert 40)
   (old-time         time-frame  :offset-assert 48)
   (good-count       int32   :offset-assert 56)
   (sid              sound-id  :offset-assert 60)
   (real-start-time  time-frame  :offset-assert 64)
   (paused?          symbol   :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  (:methods
    (new (symbol type art-joint-anim (function process-drawable symbol)) _type_ 0)
    )
  )

(define-extern drawable-load (function drawable kheap drawable))
(define-extern art-load (function string kheap art))
(define-extern art-group-load-check (function string kheap int art-group))
(define-extern external-art-buffer-init (function external-art-buffer int))
(define-extern *preload-spool-anims* symbol)
(define-extern ja-play-spooled-anim (function spool-anim art-joint-anim art-joint-anim (function process-drawable symbol) int :behavior process-drawable))
(define-extern ja-abort-spooled-anim (function spool-anim art-joint-anim int int :behavior process-drawable))
(define-extern *gui-control* gui-control)
(define-extern *art-control* external-art-control)
(define-extern *stack-top* pointer)
(define-extern *kernel-sp* pointer)
(define-extern loado (function string kheap object))
(define-extern link (function pointer pointer int kheap int pointer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *default-continue* continue-point)
;; (define-extern task-level->string function)
;; (define-extern level-name->task-level function)
(define-extern trsq->continue-point (function trsq none))
(define-extern position->stream (function string symbol symbol none))
(define-extern bug-report-display (function none))
;; (define-extern print-continues function)
(define-extern *highscore-info-array* (array highscore-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-task                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-save                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype game-save-tag (structure)
  ((user-object object 2 :offset-assert 0) ;; guessed by decompiler
   (user-uint64 uint64   :offset-assert 0)
   (user-float0 float    :offset-assert 0)
   (user-float  float  2 :offset-assert 0) ;; guessed by decompiler
   (user-int32  int32  2 :offset-assert 0) ;; guessed by decompiler
   (user-uint32 uint32 2 :offset-assert 0) ;; guessed by decompiler
   (user-int16  int16  4 :offset-assert 0) ;; guessed by decompiler
   (user-uint16 uint16 4 :offset-assert 0) ;; guessed by decompiler
   (user-int8   int8   8 :offset-assert 0) ;; guessed by decompiler
   (user-int80  int8     :offset-assert 0)
   (user-int81  int8     :offset-assert 1)
   (user-uint8  uint8  8 :offset-assert 0) ;; guessed by decompiler
   (elt-count   int32    :offset-assert 8)
   (elt-size    uint16   :offset-assert 12)
   (elt-type    uint16   :offset-assert 14) ;; game-save-elt
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype game-save (basic)
  ((version               int32                  :offset-assert 4)
   (allocated-length      int32                  :offset-assert 8)
   (length                int32                  :offset-assert 12)
   (info-int32            int32         16       :offset-assert 16) ;; guessed by decompiler
   (info-int8             int8          64       :offset-assert 16) ;; guessed by decompiler
   (level-index           int32                  :offset-assert 16)
   (gem-count             float                  :offset-assert 20)
   (skill-count           float                  :offset-assert 24)
   (completion-percentage float                  :offset-assert 28)
   (minute                uint8                  :offset-assert 36)
   (hour                  uint8                  :offset-assert 37)
   (week                  uint8                  :offset-assert 38)
   (day                   uint8                  :offset-assert 39)
   (month                 uint8                  :offset-assert 40)
   (year                  uint8                  :offset-assert 41)
   (new-game              int32                  :offset-assert 44)
   (game-time             time-frame                 :offset-assert 48)
   (secrets               uint32                 :offset-assert 56)
   (features              uint32                 :offset-assert 60)
   (tag                   game-save-tag :dynamic :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
     ;; (new (symbol type int) _type_ 0)
    (game-save-method-9 () none 9) ;; (save-to-file (_type_ string) _type_ 9)
    (game-save-method-10 () none 10) ;; (load-from-file! (_type_ string) _type_ 10)
    (game-save-method-11 () none 11) ;; (debug-print (_type_ symbol) _type_ 11)
    )
  )
|#

#|
(deftype game-save (basic)
  ()
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  ;; Failed to read fields.
  (:methods
     ;; (new (symbol type int) _type_ 0)
    (game-save-method-9 () none 9) ;; (save-to-file (_type_ string) _type_ 9)
    (game-save-method-10 () none 10) ;; (load-from-file! (_type_ string) _type_ 10)
    (game-save-method-11 () none 11) ;; (debug-print (_type_ symbol) _type_ 11)
    )
  )
|#

#|
(deftype auto-save (process)
  ((card       int32                  :offset-assert 124)
   (slot       int32                  :offset-assert 128)
   (which      int32                  :offset-assert 132)
   (buffer     kheap                  :offset-assert 136)
   (mode       basic                  :offset-assert 140)
   (result     mc-status-code         :offset-assert 144) ;; guessed by decompiler
   (save       game-save              :offset-assert 148) ;; guessed by decompiler
   (info       mc-slot-info   :inline :offset-assert 152)
   (notify     uint64                 :offset-assert 452) ;; handle
   (force      basic                  :offset-assert 460)
   (state-time time-frame                 :offset-assert 468) ;; time-frame
   (icon       hud-sprite     :inline :offset-assert 476)
   )
  :method-count-assert 23
  :size-assert         #x214
  :flag-assert         #x1701a00214
  (:methods
    (auto-save-method-9 () none 9)
    (auto-save-method-10 () none 10)
    (auto-save-method-11 () none 11)
    (auto-save-method-12 () none 12)
    (auto-save-method-13 () none 13)
    (get-heap () _type_ :state 14) ;; (get-heap () _type_ :state 14)
    (get-card () _type_ :state 15) ;; (get-card () _type_ :state 15)
    (format-card () _type_ :state 16) ;; (format-card () _type_ :state 16)
    (unformat-card () _type_ :state 17) ;; (create-file () _type_ :state 17)
    (create-file () _type_ :state 18) ;; (save () _type_ :state 18)
    (save () _type_ :state 19) ;; (restore () _type_ :state 19)
    (restore () _type_ :state 20) ;; (error (mc-status-code) _type_ :state 20)
    (error () _type_ :state 21) ;; (done () _type_ :state 21)
    (done () _type_ :state 22) ;; (unformat-card () _type_ :state 22)
    )
  )
|#

;; (define-extern game-save-elt->string function) ;; (function game-save-elt string)
;; (define-extern *auto-save-info* object) ;; mc-slot-info
;; (define-extern auto-save-post function) ;; (function none :behavior auto-save)
;; (define-extern auto-save-init-by-other function) ;; (function symbol process-tree int int none :behavior auto-save)
(define-extern auto-save-command (function symbol int int process-tree symbol none))
(define-extern auto-save-check (function none))
;; (define-extern auto-save-user function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-aspect-ratio (function symbol none))
(define-extern set-video-mode (function symbol none))
(define-extern scf-get-volume "Defined in the kernel" (function int))
(define-extern scf-get-language "Defined in the kernel" (function language-enum))
(define-extern scf-get-aspect "Defined in the kernel" (function uint))
(define-extern *boot-video-mode* "Defined in the kernel" int)

(define-extern get-current-language "Returns the current [[language-enum]]" (function language-enum))
(define-extern *setting-control* setting-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-tables                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *no-cloud-haze-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-clear-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-smog-mood-fog-table* mood-fog-table)
(define-extern *overcast-fog-mood-fog-table* mood-fog-table)
(define-extern *overcast-clear-mood-fog-table* mood-fog-table)
(define-extern *overcast-rain-mood-fog-table* mood-fog-table)
(define-extern *storm-fog-mood-fog-table* mood-fog-table)
(define-extern *storm-clear-mood-fog-table* mood-fog-table)
(define-extern *storm-rain-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-mood-color-table* mood-color-table)
(define-extern *overcast-mood-color-table* mood-color-table)
(define-extern *storm-mood-color-table* mood-color-table)
(define-extern *no-cloud-mood-channel-group* mood-channel-group)
(define-extern *overcast-mood-channel-group* mood-channel-group)
(define-extern *stormy-mood-channel-group* mood-channel-group)
(define-extern *clouds-000* mood-clouds)
(define-extern *clouds-125* mood-clouds)
(define-extern *clouds-250* mood-clouds)
(define-extern *clouds-375* mood-clouds)
(define-extern *clouds-500* mood-clouds)
(define-extern *clouds-625* mood-clouds)
(define-extern *clouds-750* mood-clouds)
(define-extern *clouds-875* mood-clouds)
(define-extern *clouds-1000* mood-clouds)
(define-extern *drill-mood-fog-table* mood-fog-table)
(define-extern *drill-mood-color-table* mood-color-table)
(define-extern *drill-mood-direction-table* mood-direction-table)
(define-extern *mood-direction-table* mood-direction-table)
(define-extern *mood-sky-table* mood-sky-table)
(define-extern *mood-interp-table* sky-color-day)
(define-extern init-mood-control (function mood-control none))
(define-extern *mood-control* mood-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-tables2                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *overide-mood-color-table* mood-color-table)
(define-extern *overide-mood-fog-table* mood-fog-table)
(define-extern init-overide-table (function mood-table none))
(define-extern *overide-table* mood-table)
(define-extern print-mood-tables
  "Print out the contents of the [[*overide-table*]]"
  (function none))
(define-extern desaturate-mood-colors
  "Unused - Generate GOAL code for a new [[*overide-mood-color-table*]] definition that desaturates the color
   Apply said overrides to the [[*overide-table*]]"
  (function float float float none))
(define-extern desaturate-mood-fog
  "Unused - Generate GOAL code for a new [[*overide-mood-fog-table*]] definition that desaturates the fog color
   Apply said overrides to the [[*overide-table*]]"
  (function (pointer mood-fog-table) float float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype flames-state (structure)
  ((time   float  :offset-assert 0) ;; uint8
   (index  uint8  :offset-assert 4)
   (length uint8  :offset-assert 5)
   (height uint8  :offset-assert 6)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )

(deftype light-state (structure)
  ((time float  :offset-assert 0)
   (fade float  :offset-assert 4) ;; uint8
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype lava-state (structure)
  ((lava float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype flicker-state (structure)
  ((flicker-off uint8  :offset-assert 0)
   (flicker-on  uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype florescent-state (structure)
  ((value  float  :offset-assert 0)
   (delay  int8   :offset-assert 4)
   (delay2 int8   :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype electricity-state (structure)
  ((value float  :offset-assert 0)
   (scale float  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype pulse-state (structure)
  ((pulse float  :offset-assert 0)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype strobe-state (structure)
  ((time float  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern palette-select-special "Use the `special` time-of-day mode palette" (function mood-context-core3 symbol))
(define-extern clear-mood-times "Clear all of the mood times on the given context" (function mood-context symbol))
(define-extern update-mood-itimes (function mood-context none))
(define-extern update-mood-direction (function mood-context-core3 mood-table float float))
(define-extern update-mood-exterior (function mood-context-core3 mood-table float int object)) ;; TODO - so many potential return values...
(define-extern copy-mood-exterior (function mood-context symbol))
(define-extern copy-mood-exterior-ambi (function mood-context symbol none))
(define-extern clear-mood-context (function mood-context symbol))
(define-extern update-mood-interior (function mood-context float))
(define-extern update-mood-flames (function mood-context int int int float float float float :behavior time-of-day-proc))
(define-extern *flash0* (array float))
(define-extern *flash1* (array float))
(define-extern *flash2* (array float))
(define-extern *flash3* (array float))
(define-extern *flash4* (array float))
(define-extern *flash5* (array float))
(define-extern *flash6* (array float))
(define-extern *flash7* (array float))
(define-extern update-mood-light (function mood-context int int float float float float float float))
(define-extern update-mood-lava "Unused" (function mood-context int int float float float float float float)) ;;
(define-extern update-mood-flicker "Unused" (function mood-context int int none))
(define-extern update-mood-florescent "Unused" (function mood-context int int float))
(define-extern update-mood-electricity (function mood-context int int float float none))
(define-extern update-mood-pulse (function mood-context int int float float float float none))
(define-extern update-mood-strobe (function mood-context int int int float float))
(define-extern update-mood-caustics (function mood-context int float float float float float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-funcs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ruins-states (structure)
  ((light  light-state        :inline :offset-assert 0)
   (spec-0 sp-field-init-spec         :offset-assert 8)
   (spec-1 sp-field-init-spec         :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype strip-states (structure)
  ((light0 light-state        :inline :offset-assert 0)
   (light1 light-state        :inline :offset-assert 8)
   (spec-0 sp-field-init-spec         :offset-assert 16)
   (spec-1 sp-field-init-spec         :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype ctywide-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )

(deftype ctyind-states (structure)
  ((light light-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ctysluma-states (structure)
  ((light           light-state        :inline :offset-assert 0)
   (neon            light-state        :inline :offset-assert 8)
   (flame           flames-state       :inline :offset-assert 16)
   (spec-0          sp-field-init-spec         :offset-assert 24)
   (spec-1          sp-field-init-spec         :offset-assert 28)
   (neon-min-bright float                      :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype ctyslumb-states (structure)
  ((light  light-state        :inline :offset-assert 0)
   (flame  flames-state       :inline :offset-assert 8)
   (spec-0 sp-field-init-spec         :offset-assert 16)
   (spec-1 sp-field-init-spec         :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype ctyslumc-states (structure)
  ((light  light-state        :inline :offset-assert 0)
   (spec-0 sp-field-init-spec         :offset-assert 8)
   (spec-1 sp-field-init-spec         :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ctyport-states (structure)
  ((light           light-state        :inline :offset-assert 0)
   (spec-0          sp-field-init-spec         :offset-assert 8)
   (neon-min-bright float                      :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ctymarka-states (structure)
  ((light light-state :inline :offset-assert 0)
   (blink float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype ctymarkb-states (structure)
  ((light light-state :inline :offset-assert 0)
   (blink float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype palcab-states (structure)
  ((light        light-state       :inline :offset-assert 0)
   (turret-value float                     :offset-assert 8)
   (electricity  electricity-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype stadium-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )

(deftype stadiumb-states (structure)
  ((light        light-state :inline :offset-assert 0)
   (shield-count float               :offset-assert 8)
   (shield       float               :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype skatea-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )

(deftype ltentout-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   (totem flames-state :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

(deftype mountain-states (structure)
  ((light0 light-state        :inline :offset-assert 0)
   (light1 light-state        :inline :offset-assert 8)
   (spec-0 sp-field-init-spec         :offset-assert 16)
   (spec-1 sp-field-init-spec         :offset-assert 20)
   (spec-2 sp-field-init-spec         :offset-assert 24)
   (spec-3 sp-field-init-spec         :offset-assert 28)
   (spec-4 sp-field-init-spec         :offset-assert 32)
   (spec-5 sp-field-init-spec         :offset-assert 36)
   (spec-6 sp-field-init-spec         :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype forest-states (structure)
  ((light light-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype atoll-states (structure)
  ((light     light-state :inline :offset-assert 0)
   (explosion float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype drill-states (structure)
  ((fire-floor      float                :offset-assert 0)
   (fire-floor-fade float                :offset-assert 4)
   (fire-floor-flag symbol               :offset-assert 8)
   (flame           flames-state :inline :offset-assert 12)
   (electricity     electricity-state      2  :inline     :offset-assert 20) ;; TODO - probably wrong, elec-wall? (but its an array....)
   (pulse           pulse-state  :inline :offset 52)
   (light-flag      basic                :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype drillb-states (structure)
  ((fire-floor      float               :offset-assert 0)
   (fire-floor-fade float               :offset-assert 4)
   (fire-floor-flag symbol              :offset-assert 8)
   (pulse           pulse-state :inline :offset-assert 12)
   (light-flag      symbol              :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype casboss-states (structure)
  ((light     light-state :inline :offset-assert 0)
   (explosion float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype caspad-states (structure)
  ((light       light-state :inline :offset-assert 0)
   (red         float               :offset-assert 8)
   (white       float               :offset-assert 12)
   (white-count int32               :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype palout-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )

(deftype palroof-states (structure)
  ((electricity electricity-state 2 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype palent-states (structure)
  ((flame        flames-state :inline :offset-assert 0)
   (turret-value float                :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype nest-states (structure)
  ((light       light-state :inline :offset-assert 0)
   (green-flag  symbol               :offset-assert 8)
   (green       float               :offset-assert 12)
   (green-noise float               :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype village1-states (structure)
  ((interp      float  :offset-assert 0)
   (interp-flag symbol  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype consite-states (structure)
  ((light light-state :inline :offset-assert 0)
   (flash float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype mincan-states (structure)
  ((beams float 2 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(define-extern update-mood-default (function mood-context float int none :behavior time-of-day-proc))
(define-extern get-sphere-interp (function sphere vector float float float))
(define-extern init-mood-ruins (function mood-context none))
(define-extern update-mood-ruins (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-strip (function mood-context uint))
(define-extern update-mood-strip (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-ctywide (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-copy-ctywide (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-ctyind (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-ctysluma (function mood-context float))
(define-extern update-mood-ctysluma (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-ctyslumb (function mood-context uint))
(define-extern update-mood-ctyslumb (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-ctyslumc (function mood-context none))
(define-extern update-mood-ctyslumc (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-ctyport (function mood-context uint))
(define-extern init-mood-ctyport-no-part (function mood-context none))
(define-extern update-mood-ctyport (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-ctymarka (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-ctymarkb (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-palcab (function mood-context float))
(define-extern update-mood-palcab (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-palcab-turret-flash! (function float float))
(define-extern update-stadium-lights (function mood-context none))
(define-extern update-mood-stadium (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-copy-stadium (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-stadiumb-lights (function mood-context none))
(define-extern update-mood-stadiumb (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-skatea (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-ltentout-lights (function mood-context none))
(define-extern update-mood-ltentout (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-mountain (function mood-context uint))
(define-extern update-mood-mountain (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-forest (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-atoll (function mood-context float))
(define-extern update-mood-atoll (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-atoll-explosion! (function float float))
(define-extern update-mood-atollext (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-drill (function mood-context symbol))
(define-extern update-drill-lights (function mood-context none))
(define-extern update-mood-drill (function mood-context object int none :behavior time-of-day-proc))
(define-extern set-drill-fire-floor! (function symbol symbol))
(define-extern set-drill-electricity-scale! (function float int float))
(define-extern update-mood-drillmnt (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-drillb (function mood-context symbol))
(define-extern update-mood-drillb (function mood-context none :behavior time-of-day-proc))
(define-extern update-casboss-lights (function mood-context float))
(define-extern update-mood-casboss (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-casboss-explosion! (function float))
(define-extern update-mood-caspad (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-palout (function mood-context vector))
(define-extern update-mood-palout (function mood-context float int none :behavior time-of-day-proc))
(define-extern init-mood-palroof (function mood-context float))
(define-extern update-mood-palroof (function mood-context object int none :behavior time-of-day-proc))
(define-extern set-palroof-electricity-scale! (function float int float))
(define-extern update-mood-palent (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-palent-turret-flash! (function float float))
(define-extern init-mood-nest (function mood-context symbol))
(define-extern update-nest-lights (function mood-context pointer))
(define-extern update-mood-nest (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-nest-green-flag! (function symbol symbol))
(define-extern init-mood-village1 (function mood-context symbol))
(define-extern update-village1-lights (function mood-context float))
(define-extern update-mood-village1 (function mood-context float int none :behavior time-of-day-proc))
(define-extern update-mood-copy-village1 (function mood-context float int none :behavior time-of-day-proc))
(define-extern clear-village1-interp! (function symbol))
(define-extern set-village1-interp! (function symbol))
(define-extern update-mood-consite (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-consite-flash! (function float))
(define-extern update-mood-mincan (function mood-context float int none :behavior time-of-day-proc))
(define-extern set-mincan-beam! (function int float float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-funcs2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype default-interior-states (structure)
  ()
  :method-count-assert 9
  :size-assert         #x0 ;; TODO - is it actually empty?
  :flag-assert         #x900000000
  )

(deftype vinroom-states (structure)
  ((main     float  :offset-assert 0)
   (flicker1 float  :offset-assert 4)
   (flicker2 float  :offset-assert 8)
   (warp     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype hideout-states (structure)
  ((flame0 flames-state :inline :offset-assert 0)
   (flame1 flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )

(declare-type com-airlock process-drawable)
(declare-type hip-door-a com-airlock)
(deftype hiphog-states (structure)
  ((spec-m-on        sp-field-init-spec  :offset-assert 0)
   (spec-o-on        sp-field-init-spec  :offset-assert 4)
   (spec-r-on        sp-field-init-spec  :offset-assert 8)
   (spec-g-on        sp-field-init-spec  :offset-assert 12)
   (spec-a-on        sp-field-init-spec  :offset-assert 16)
   (spec-n-on        sp-field-init-spec  :offset-assert 20)
   (spec-m-off       sp-field-init-spec  :offset-assert 24)
   (spec-o-off       sp-field-init-spec  :offset-assert 28)
   (spec-r-off       sp-field-init-spec  :offset-assert 32)
   (spec-g-off       sp-field-init-spec  :offset-assert 36)
   (spec-a-off       sp-field-init-spec  :offset-assert 40)
   (spec-n-off       sp-field-init-spec  :offset-assert 44)
   (spec-hog-1-on    sp-field-init-spec  :offset-assert 48)
   (spec-hog-2-on    sp-field-init-spec  :offset-assert 52)
   (spec-hiphog-on   sp-field-init-spec  :offset-assert 56)
   (spec-hiphog-off  sp-field-init-spec  :offset-assert 60)
   (spec-hiphog-on2  sp-field-init-spec  :offset-assert 64)
   (spec-hiphog-off2 sp-field-init-spec  :offset-assert 68)
   (spec-clock-sun   sp-field-init-spec  :offset-assert 72)
   (spec-clock-moon  sp-field-init-spec  :offset-assert 76)
   (door             entity               :offset-assert 80)
   (m-on             uint8               :offset-assert 84)
   (o-on             uint8               :offset-assert 85)
   (r-on             uint8               :offset-assert 86)
   (g-on             uint8               :offset-assert 87)
   (a-on             uint8               :offset-assert 88)
   (n-on             uint8               :offset-assert 89)
   (m-off            uint8               :offset-assert 90)
   (o-off            uint8               :offset-assert 91)
   (r-off            uint8               :offset-assert 92)
   (g-off            uint8               :offset-assert 93)
   (a-off            uint8               :offset-assert 94)
   (n-off            uint8               :offset-assert 95)
   (hog-on           uint8               :offset-assert 96)
   (hiphog-on        uint8               :offset-assert 97)
   (hiphog-off       uint8               :offset-assert 98)
   (clock-sun        uint8               :offset-assert 99)
   (clock-moon       uint8               :offset-assert 100)
   )
  :method-count-assert 9
  :size-assert         #x65
  :flag-assert         #x900000065
  )

(deftype sewer-states (structure)
  ((light-flag        symbol              :offset-assert 0)
   (light-count       uint32              :offset-assert 4)
   (turret-value      float               :offset-assert 8)
   (spec-light-center sp-field-init-spec  :offset-assert 12)
   (spec-light        sp-field-init-spec  :offset-assert 16)
   (explosion         float               :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype onintent-states (structure)
  ((flame0      flames-state :inline :offset-assert 0)
   (flame1      flames-state :inline :offset-assert 8)
   (flame2      flames-state :inline :offset-assert 16)
   (green-flame flames-state :inline :offset-assert 24)
   (totem0      flames-state :inline :offset-assert 32)
   (totem1      flames-state :inline :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2f
  :flag-assert         #x90000002f
  )

(deftype oracle-states (structure)
  ((flame0       flames-state :inline :offset-assert 0)
   (flame1       flames-state :inline :offset-assert 8)
   (flame2       flames-state :inline :offset-assert 16)
   (blue-flame   flames-state :inline :offset-assert 24)
   (door-entity  entity                :offset-assert 32)
   (door-current float                :offset-assert 36)
   (door-target  float                :offset-assert 40)
   (purple-flag  symbol                :offset-assert 44)
   (purple       float                :offset-assert 48)
   (purple-noise float                :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype tomba-states (structure)
  ((flame0    flames-state :inline :offset-assert 0)
   (flame1    flames-state :inline :offset-assert 8)
   (flame2    flames-state :inline :offset-assert 16)
   (light     light-state  :inline :offset-assert 24)
   (gem-light float                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype tombb-states (structure)
  ((flame0 flames-state :inline :offset-assert 0)
   (flame1 flames-state :inline :offset-assert 8)
   (flame2 flames-state :inline :offset-assert 16)
   (light  light-state  :inline :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tombc-states (structure)
  ((flame0      flames-state      :inline :offset-assert 0)
   (flame1      flames-state      :inline :offset-assert 8)
   (flame2      flames-state      :inline :offset-assert 16)
   (electricity electricity-state :inline :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tombd-states (structure)
  ((flame0    flames-state :inline :offset-assert 0)
   (flame1    flames-state :inline :offset-assert 8)
   (flame2    flames-state :inline :offset-assert 16)
   (light     light-state  :inline :offset-assert 24)
   (gem-light float                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype tombe-states (structure)
  ((flame0    flames-state :inline :offset-assert 0)
   (flame1    flames-state :inline :offset-assert 8)
   (flame2    flames-state :inline :offset-assert 16)
   (light     light-state  :inline :offset-assert 24)
   (gem-light float                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype tombboss-states (structure)
  ((flame0    flames-state :inline :offset-assert 0)
   (flame1    flames-state :inline :offset-assert 8)
   (flame2    flames-state :inline :offset-assert 16)
   (light     light-state  :inline :offset-assert 24)
   (gem-light float                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype fortress-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype fordumpa-states (structure)
  ((turret-value float           4       :offset-assert 0)
   (pulse        pulse-state       :inline :offset-assert 16)
   (electricity  electricity-state :inline :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype fordumpc-states (structure)
  ((light-flag symbol               :offset-assert 0)
   (pulse0     pulse-state  :inline :offset-assert 4)
   (pulse1     pulse-state  :inline :offset-assert 8)
   (strobe     strobe-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype forresca-states (structure)
  ((pulse       pulse-state :inline :offset-assert 0)
   (electricity electricity-state 2 :inline :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype forrescb-states (structure)
  ((electricity electricity-state 2 :inline :offset-assert 0)
   (turret      float 4 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype prison-states (structure)
  ((pulse        float  :offset-assert 0)
   (angle        float  :offset-assert 4)
   (torture      float  :offset-assert 8)
   (torture-flag symbol  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype under-states (structure)
  ((flame0     flames-state :inline :offset-assert 0)
   (flame1     flames-state :inline :offset-assert 8)
   (rot        float                :offset-assert 16)
   (rot2       float                :offset-assert 20)
   (time       float                :offset-assert 24)
   (laser      float                :offset-assert 28)
   (fog-interp float                :offset-assert 32)
   (flicker    float                :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype gungame-states (structure)
  ((florescent florescent-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype dig1-states (structure)
  ((pulse0    pulse-state :inline :offset-assert 0)
   (pulse1    pulse-state :inline :offset-assert 4)
   (explosion float               :offset-assert 8)
   (drillbit  float               :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vortex-states (structure)
  ((time        float          :offset-assert 0)
   (level       float          :offset-assert 4)
   (delta       float          :offset-assert 8)
   (scale       float          :offset-assert 12)
   (flash       float          :offset-assert 16)
   (num         int32          :offset-assert 20)
   (white       symbol         :offset-assert 24)
   (white-count float          :offset-assert 28)
   (pos         vector :inline :offset-assert 32)
   (dir         vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype nestb-states (structure)
  ((pulse        pulse-state :inline :offset-assert 0)
   (rot          float               :offset-assert 4)
   (purple       float               :offset-assert 8)
   (purple-noise float               :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype consiteb-states (structure)
  ((flicker       float  :offset-assert 0)
   (flicker-count float  :offset-assert 4)
   (flicker-state int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype castle-states (structure)
  ((electricity electricity-state :inline :offset-assert 0)
   (pulse       pulse-state 2 :inline     :offset-assert 8)
   (rot         float                     :offset-assert 40)
   (robot-rot   float                     :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype garage-states (structure)
  ()
  :method-count-assert 9
  :size-assert         #x0 ;; TODO - is it actually empty?
  :flag-assert         #x900000000
  )

(deftype palshaft-states (structure)
  ()
  :method-count-assert 9
  :size-assert         #x0 ;; TODO - is it actually empty?
  :flag-assert         #x900000000
  )

(define-extern update-mood-default-interior (function mood-context none :behavior time-of-day-proc))
(define-extern update-vinroom-lights (function mood-context none))
(define-extern update-mood-vinroom (function mood-context none :behavior time-of-day-proc))
(define-extern update-hideout-lights (function mood-context none))
(define-extern update-mood-hideout (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-copy-hideout (function mood-context none :behavior time-of-day-proc))
(define-extern init-mood-hiphog (function mood-context none))
(define-extern update-hiphog-lights (function mood-context none))
(define-extern update-mood-hiphog (function mood-context float none :behavior time-of-day-proc))
(define-extern update-mood-copy-hiphog (function mood-context none :behavior time-of-day-proc))
(define-extern update-sewer-lights (function mood-context none))
(define-extern init-mood-sewer (function mood-context none))
(define-extern update-mood-sewer (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-copy-sewerb (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-copy-sewescb (function mood-context none :behavior time-of-day-proc))
(define-extern set-sewer-lights-flag! (function symbol symbol))
(define-extern set-sewer-turret-flash! (function float))
(define-extern set-sewesc-explosion! (function float))
(define-extern update-onintent-lights (function mood-context none))
(define-extern update-mood-onintent (function mood-context none :behavior time-of-day-proc))
(define-extern init-mood-oracle (function mood-context symbol))
(define-extern update-mood-oracle (function mood-context none :behavior time-of-day-proc))
(define-extern set-oracle-purple-flag! (function symbol symbol))
(define-extern update-tomba-lights (function mood-context none))
(define-extern update-mood-tomba (function mood-context none :behavior time-of-day-proc))
(define-extern update-tombb-lights (function mood-context none))
(define-extern update-mood-tombb (function mood-context none :behavior time-of-day-proc))
(define-extern init-mood-tombc (function mood-context float))
(define-extern update-mood-tombc (function mood-context none :behavior time-of-day-proc))
(define-extern set-tombc-electricity-scale! (function float float))
(define-extern update-tombd-lights (function mood-context none))
(define-extern update-mood-tombd (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-tombe (function mood-context none :behavior time-of-day-proc))
(define-extern update-tombboss-lights (function mood-context none))
(define-extern update-mood-tombboss (function mood-context none :behavior time-of-day-proc))
(define-extern set-tombboss-gem-light! (function float float))
(define-extern update-fortress-lights (function mood-context none))
(define-extern update-mood-fortress (function mood-context none :behavior time-of-day-proc))
(define-extern init-mood-fordumpa (function mood-context float))
(define-extern update-mood-fordumpa (function mood-context none :behavior time-of-day-proc))
(define-extern set-fordumpa-turret-flash! (function int float))
(define-extern set-fordumpa-electricity-scale! (function float float))
(define-extern init-mood-fordumpc (function mood-context symbol))
(define-extern update-mood-fordumpc (function mood-context none :behavior time-of-day-proc))
(define-extern set-fordumpc-light-flag! (function symbol symbol))
(define-extern init-mood-forresca (function mood-context float))
(define-extern update-mood-forresca (function mood-context none :behavior time-of-day-proc))
(define-extern set-forresca-electricity-scale! (function float int float))
(define-extern init-mood-forrescb (function mood-context float))
(define-extern update-mood-forrescb (function mood-context none :behavior time-of-day-proc))
(define-extern set-forrescb-turret-flash! (function int float))
(define-extern set-forrescb-electricity-scale! (function float int float))
(define-extern update-prison-lights (function mood-context none))
(define-extern init-mood-prison (function mood-context float))
(define-extern update-mood-prison (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-copy-prison (function mood-context none :behavior time-of-day-proc))
(define-extern set-prison-torture-flag! (function symbol symbol))
(define-extern update-under-lights (function mood-context float))
(define-extern update-mood-under (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-copy-underb (function mood-context none :behavior time-of-day-proc))
(define-extern set-under-laser! (function float float))
(define-extern set-under-fog-interp! (function float float))
(define-extern update-gungame-lights (function mood-context none))
(define-extern update-mood-gungame (function mood-context none :behavior time-of-day-proc))
(define-extern init-mood-dig1 (function mood-context float))
(define-extern update-dig1-lights (function mood-context none))
(define-extern update-mood-dig1 (function mood-context none :behavior time-of-day-proc))
(define-extern set-dig1-explosion! (function float float))
(define-extern update-vortex-lights (function mood-context none))
(define-extern update-mood-vortex (function mood-context none :behavior time-of-day-proc))
(define-extern set-vortex-flash! (function float float))
(define-extern set-vortex-white! (function symbol float))
(define-extern update-nestb-lights (function mood-context none))
(define-extern update-mood-nestb (function mood-context object int none :behavior time-of-day-proc))
(define-extern set-nestb-purple! (function float float))
(define-extern get-nestb-purple (function float))
(define-extern init-mood-consiteb (function mood-context none))
(define-extern update-mood-consiteb (function mood-context object int none :behavior time-of-day-proc))
(define-extern update-castle-lights (function mood-context none))
(define-extern init-mood-castle (function mood-context float))
(define-extern update-mood-castle (function mood-context none :behavior time-of-day-proc))
(define-extern set-castle-electricity-scale! (function float float))
(define-extern init-mood-garage (function mood-context symbol))
(define-extern update-garage-lights (function mood-context none))
(define-extern update-mood-garage (function mood-context object int none :behavior time-of-day-proc))
(define-extern update-mood-copy-garage (function mood-context none :behavior time-of-day-proc))
(define-extern update-mood-palshaft (function mood-context none :behavior time-of-day-proc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; weather-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern group-rain-screend-drop sparticle-launch-group) ;;
(define-extern update-snow (function target none))
;; (define-extern birth-func-omega-normal-orient function)
;; (define-extern birth-func-rain function)
;; (define-extern check-drop-level-rain function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-drop-level-rain2 function)
;; (define-extern check-drop-level-splash function)
(define-extern update-rain (function target none))
(define-extern cam-master-effect (function none :behavior camera-master)) ;;
;; (define-extern sparticle-track-sun function) ;; (function int sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; time-of-day                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern time-of-day-effect (function none))
(define-extern time-of-day-update (function none :behavior time-of-day-proc))
(define-extern update-counters (function float :behavior time-of-day-proc))
(define-extern time-of-day-tick (state time-of-day-proc))
(define-extern init-time-of-day (function object :behavior time-of-day-proc)) ;;
(define-extern start-time-of-day (function (pointer process)))
(define-extern time-of-day-setup (function symbol symbol))
;; (define-extern time-of-day-interp-colors function) ;; (function (pointer rgba) uint mood-context none)
;; (define-extern time-of-day-interp-colors-scratch function) ;; (function (pointer rgba) time-of-day-palette mood-context none)
(define-extern init-time-of-day-context (function time-of-day-context symbol))
(define-extern set-filter-color! (function float float float none))
(define-extern tod-madd! (function vector vector vector float))
(define-extern update-environment-colors (function time-of-day-context vector))
(define-extern update-time-of-day (function time-of-day-context none))
(define-extern calc-fade-from-fog (function vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-data                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *sky-work* sky-work)
(define-extern sky-base-polygons (inline-array sky-vertex))
(define-extern sky-roof-polygons (inline-array sky-vertex))
(define-extern *cloud-vert-array* cloud-vert-array)
(define-extern *cloud-poly* (inline-array cloud-vertex))
(define-extern init-cloud-vert-array (function symbol))
(define-extern *haze-vert-array* haze-vert-array)
(define-extern *haze-poly* (inline-array haze-vertex))
(define-extern init-haze-vert-array (function symbol))
(define-extern sky-make-sun-data "Initialize `upload-data` with [[sky-sun-data]] in [[*sky-work*]]" (function sky-work int float none))
(define-extern sky-make-moon-data "Initialize `upload-data` with [[sky-moon-data]] in [[*sky-work*]]" (function sky-work float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-tng                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern set-tex-offset function) ;; (function int int none)
;; (define-extern draw-large-polygon function) ;; function
;; (define-extern clip-polygon-against-positive-hyperplane function) ;; function
;; (define-extern clip-polygon-against-negative-hyperplane function) ;; function
;; (define-extern render-sky-quad function) ;; (function int dma-buffer none)
;; (define-extern render-sky-tri function) ;; (function (inline-array sky-vertex) dma-buffer none)
;; (define-extern close-sky-buffer function) ;; (function dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load-state                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *display-load-commands* object) ;; symbol
;; (define-extern *backup-load-state* object) ;; load-state
(define-extern *load-state* load-state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level-info                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *task-level* (array symbol))
(define-extern default-level level-load-info) ;; level-load-info
(define-extern intro level-load-info) ;; level-load-info
(define-extern demo level-load-info) ;; level-load-info
(define-extern title level-load-info) ;; level-load-info
(define-extern vinroom level-load-info)
(define-extern drillmid level-load-info)
(define-extern drill level-load-info)
(define-extern drillb level-load-info)
(define-extern drillmtn level-load-info)
(define-extern sewer level-load-info)
(define-extern sewerb level-load-info)
(define-extern sewesc level-load-info)
(define-extern sewescb level-load-info)
(define-extern tomba level-load-info)
(define-extern tombb level-load-info)
(define-extern tombc level-load-info)
(define-extern tombd level-load-info)
(define-extern tombe level-load-info)
(define-extern tombext level-load-info)
(define-extern tombboss level-load-info)
(define-extern under level-load-info)
(define-extern underb level-load-info)
(define-extern palcab level-load-info)
(define-extern palshaft level-load-info)
(define-extern palboss level-load-info)
(define-extern palroof level-load-info)
(define-extern palout level-load-info)
(define-extern throne level-load-info)
(define-extern lbrnermk level-load-info)
(define-extern lashthrn level-load-info)
(define-extern lthrnout level-load-info)
(define-extern palent level-load-info)
(define-extern prison level-load-info)
(define-extern ldjakbrn level-load-info)
(define-extern lprsncst level-load-info)
(define-extern forexita level-load-info)
(define-extern forexitb level-load-info)
(define-extern forresca level-load-info)
(define-extern forrescb level-load-info)
(define-extern fordumpa level-load-info)
(define-extern fordumpb level-load-info)
(define-extern fordumpc level-load-info)
(define-extern fordumpd level-load-info)
(define-extern strip level-load-info)
(define-extern ruins level-load-info)
(define-extern sagehut level-load-info)
(define-extern atoll level-load-info)
(define-extern atollext level-load-info)
(define-extern mountain level-load-info)
(define-extern mtnext level-load-info)
(define-extern forest level-load-info)
(define-extern forestb level-load-info)
(define-extern mincan level-load-info)
(define-extern ctywide level-load-info)
(define-extern lwidea level-load-info)
(define-extern lwideb level-load-info)
(define-extern lwidec level-load-info)
(define-extern ctykora level-load-info)
(define-extern ctyasha level-load-info)
(define-extern ctygena level-load-info)
(define-extern ctygenb level-load-info)
(define-extern ctygenc level-load-info)
(define-extern ctysluma level-load-info)
(define-extern ctyslumb level-load-info)
(define-extern ctyslumc level-load-info)
(define-extern ctyport level-load-info)
(define-extern ljkdxash level-load-info)
(define-extern ctyfarma level-load-info)
(define-extern ctyfarmb level-load-info)
(define-extern ctyinda level-load-info)
(define-extern consite level-load-info)
(define-extern consiteb level-load-info)
(define-extern ctyindb level-load-info)
(define-extern ctymarka level-load-info)
(define-extern ctymarkb level-load-info)
(define-extern ctypal level-load-info)
(define-extern stadium level-load-info)
(define-extern stadiumb level-load-info)
(define-extern stadiumc level-load-info)
(define-extern stadiumd level-load-info)
(define-extern skatea level-load-info)
(define-extern garage level-load-info)
(define-extern stadblmp level-load-info)
(define-extern lwidesta level-load-info)
(define-extern lerrol level-load-info)
(define-extern lkeirift level-load-info)
(define-extern lracelit level-load-info)
(define-extern lracebb level-load-info)
(define-extern lracebf level-load-info)
(define-extern lracecb level-load-info)
(define-extern lracecf level-load-info)
(define-extern lracedb level-load-info)
(define-extern lracedf level-load-info)
(define-extern lgarcsta level-load-info)
(define-extern lsamergd level-load-info)
(define-extern lerbrngd level-load-info)
(define-extern lsmysbrt level-load-info)
(define-extern lashgrd level-load-info)
(define-extern onintent level-load-info)
(define-extern ltentout level-load-info)
(define-extern ltentob level-load-info)
(define-extern kiosk level-load-info)
(define-extern oracle level-load-info) ;; type
(define-extern hideout level-load-info)
(define-extern ltrntess level-load-info)
(define-extern ltrnkrkd level-load-info)
(define-extern ltrnysam level-load-info)
(define-extern lysamsam level-load-info)
(define-extern lyskdcd level-load-info)
(define-extern lkiddoge level-load-info)
(define-extern lhelldog level-load-info)
(define-extern lpackage level-load-info)
(define-extern lsack level-load-info)
(define-extern lportrun level-load-info)
(define-extern lshuttle level-load-info)
(define-extern lmeetbrt level-load-info)
(define-extern lpower level-load-info)
(define-extern lerlchal level-load-info)
(define-extern lprtrace level-load-info)
(define-extern lbombbot level-load-info)
(define-extern lbbush level-load-info)
(define-extern lprotect level-load-info)
(define-extern hiphog level-load-info)
(define-extern ltess level-load-info)
(define-extern lhipout level-load-info)
(define-extern lwhack level-load-info)
(define-extern lguard level-load-info)
(define-extern lcguard level-load-info)
(define-extern lerltess level-load-info)
(define-extern gungame level-load-info)
(define-extern dig1 level-load-info)
(define-extern dig3a level-load-info)
(define-extern dig3b level-load-info)
(define-extern caspad level-load-info)
(define-extern castle level-load-info)
(define-extern casboss level-load-info)
(define-extern casext level-load-info)
(define-extern cascity level-load-info)
(define-extern village1 level-load-info) ;; level-load-info
(define-extern introcst level-load-info)
(define-extern lcitylow level-load-info)
(define-extern lintcstb level-load-info)
(define-extern ljakdax level-load-info)
(define-extern nest level-load-info)
(define-extern nestb level-load-info)
(define-extern outrocst level-load-info)
(define-extern portwall level-load-info)
(define-extern loutcstb level-load-info)
(define-extern island1 level-load-info)
(define-extern city-start (function none))
(define-extern skatepark level-load-info)
(define-extern halfpipe level-load-info) ;; level-load-info
(define-extern vistest level-load-info)
(define-extern woodstest level-load-info)
(define-extern tobytest level-load-info)
(define-extern chartest level-load-info)
(define-extern dptest level-load-info)
(define-extern ctyfence level-load-info)
(define-extern *level-load-list* pair) ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern lookup-level-info (function symbol level-load-info))
(define-extern remap-level-name (function level-load-info symbol))
(define-extern add-bsp-drawable (function bsp-header level symbol display-frame none))
(define-extern *login-state* login-state)
(define-extern *print-login* symbol)
(define-extern load-buffer-resize (function level pointer none))
(define-extern level-update-after-load (function level login-state level))
(define-extern bg (function symbol none))
(define-extern play  (function symbol symbol int))
(define-extern play-boot (function none))
;; (define-extern update-sound-banks function) ;; (function int)
(define-extern show-level (function symbol int))
(define-extern *default-level* level)

(define-extern *level-type-list* type) ;; ??

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *expand-buf-number* int)
(define-extern *game-text-word* string)
(define-extern *game-text-line* string)
(define-extern *expanded-text-line0* string)
(define-extern *expanded-text-line1* string)
(define-extern *level-text-file-load-flag* symbol)
(define-extern convert-korean-text
  "Converts the provided [[game-text]] into korean. Returns a [[string]]"
  (function game-text string))
(define-extern text-is-loading symbol)
(define-extern load-game-text-info
  "Load text, if needed. txt-name is the group name, curr-text is the _symbol_ for
   the game-text-info, and heap is the heap to load to. The heap will be cleared."
  (function string symbol kheap int))
(define-extern load-level-text-files
  "Load the text files needed for level idx.
   This function made more sense back when text files were split up, but in the end they put everything
   in a single text group and file."
  (function int none))
(define-extern draw-debug-text-box "Draws some lines" (function font-context none))
(define-extern print-game-text-scaled "Print text, with a given scaling" (function string float font-context int none))
(define-extern print-game-text "Print text." (function string font-context symbol int int float))
(define-extern disable-level-text-file-loading "Disables [[*level-text-file-load-flag*]]" (function none))
(define-extern enable-level-text-file-loading "Disables [[*level-text-file-load-flag*]]" (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-hash                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern add-collide-debug-box function)
;; (define-extern print-collide-cache-tri-count function)
;; (define-extern print-exceeded-max-cache-tris function)
;; (define-extern fill-bg-using-box-new function)
;; (define-extern fill-bg-using-line-sphere-new function)
;; (define-extern collide-list-fill-bg-using-box function)
;; (define-extern collide-list-fill-bg-using-line-sphere function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-probe                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collide-probe-stack-elem (structure)
  ((child uint32  :offset-assert 0)
   (count uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype collide-probe-stack (structure)
  ((data collide-probe-stack-elem 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )
|#

;; (define-extern creates-new-method? function) ;; (function type int symbol)
;; (define-extern overrides-parent-method? function) ;; (function type int symbol)
;; (define-extern describe-methods function) ;; (function type symbol)
;; (define-extern indent-to function) ;; (function int none)
;; (define-extern probe-traverse-draw-node function) ;; (function draw-node int none)
;; (define-extern probe-traverse-inline-array-node function) ;; (function drawable-inline-array-node int none)
;; (define-extern probe-traverse-collide-fragment function) ;; (function drawable-tree-collide-fragment int none)
;; (define-extern *collide-probe-stack* object) ;; collide-probe-stack
;; (define-extern collide-vu0-block object) ;; vu-function
;; (define-extern collide-probe-node function) ;; (function (inline-array draw-node) int collide-list int)
;; (define-extern print-out function) ;; (function int object)
;; (define-extern collide-probe-instance-tie-collide-frags function) ;; (function none)
;; (define-extern collide-probe-instance-tie function) ;; (function object int collide-list int int)
;; (define-extern collide-probe-collide-fragment-tree-make-list function) ;; (function drawable-tree-collide-fragment collide-list none)
;; (define-extern collide-probe-instance-tie-tree-make-list function) ;; (function drawable-tree-instance-tie collide-list int)
;; (define-extern collide-upload-vu0 function) ;; (function none)
;; (define-extern collide-probe-make-list function) ;; (function level collide-list none)
;; (define-extern distc function) ;; (function vector vector float)
;; (define-extern interpolate function) ;; (function float float float float float float)
;; (define-extern misty-ambush-height function) ;; (function vector float)
;; (define-extern misty-ambush-height-probe function) ;; (function vector float float)
;; (define-extern pke-collide-test function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-frag                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-mesh                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sopt-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype spat-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype oot-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-touch                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype add-prims-touching-work (structure)
  ((tri1 collide-tri-result  :offset-assert 0)
   (tri2 collide-tri-result  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern get-intersect-point function) ;; (function vector touching-prims-entry control-info process vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-edge-grab              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pbhp-stack-vars (structure)
  ((edge        collide-edge-edge         :offset-assert 0)
   (allocated   basic                     :offset-assert 4)
   (neg-hold-pt vector            :inline :offset-assert 16)
   (split-vec   vector            :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype faei-stack-vars (structure)
  ((hold-edge-vec-norm vector :inline :offset-assert 0)
   (adj-edge-vec-norm  vector :inline :offset-assert 16)
   (found-left?        basic          :offset-assert 32)
   (left-dot           float          :offset-assert 36)
   (found-right?       basic          :offset-assert 40)
   (right-dot          float          :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern *no-walk-surface* surface) ;; surface

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern find-ground-point function) ;; (function control-info vector float float vector)
;; (define-extern target-attack-up function) ;; (function target symbol symbol none)
;; (define-extern collide-shape-moving-angle-set! function) ;; (function collide-shape-moving vector vector none)
;; (define-extern cshape-reaction-update-state function)
;; (define-extern cshape-reaction-default function)
;; (define-extern cshape-reaction-just-move function)
(define-extern collide-shape-draw-debug-marks (function none))
;; (define-extern *col-timer* object) ;; stopwatch
;; (define-extern *frame-timer* object) ;; stopwatch
;; (define-extern *col-timer-enable* object) ;; symbol
;; (define-extern debug-report-col-stats function) ;; (function int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape-rider            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *collide-vif0-init* (array uint32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-planes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern collide-planes-intersect function) ;; (function vector (inline-array bounding-box) vector float)
;; (define-extern collide-planes-test0 function) ;; (function vector float float vector vector bounding-box vector float)
;; (define-extern collide-planes-test1 function) ;; (function vector float vector (inline-array vector) vector float)
;; (define-extern collide-planes function) ;; (function (inline-array vector) int vector (inline-array vector) symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spatial-hash                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grid-hash-work (basic)
  ((result-words      UNKNOWN 32      :offset-assert 16)
   (result-bits       UNKNOWN 32      :offset-assert 16)
   (object-id         int32           :offset-assert 48)
   (temp-box-min      vector  :inline :offset-assert 64)
   (temp-box-max      vector  :inline :offset-assert 80)
   (visit-count       int32           :offset-assert 96)
   (temp-time         uint32          :offset-assert 100)
   (queue-object-time uint32          :offset-assert 104)
   (make-hash-time    uint32          :offset-assert 108)
   (search-time       uint32          :offset-assert 112)
   (add-object-time   uint32          :offset-assert 116)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )
|#

;; TODO remove this after spatial-hash PR merges
(declare-type grid-hash-work basic)
(define-extern *grid-hash-work* grid-hash-work)
;; (define-extern validate-bucket-bits function)
;; (define-extern draw-grid function)
;; (define-extern draw-sphere-box function)
;; (define-extern draw-line-sphere function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-hash                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype actor-cshape-ptr (structure)
  ((cshape basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype actor-hash-bucket (structure)
  ((length     int16   :offset-assert 0)
   (max-length int16   :offset-assert 2)
   (data       uint32  :offset-assert 4)
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (actor-hash-bucket-method-9 () none 9)
    )
  )
|#

#|
(deftype actor-hash-buckets (structure)
  ((hash basic           :offset-assert 0)
   (list basic           :offset-assert 4)
   (data UNKNOWN 4       :offset-assert 8)
   (tpos vector  :inline :offset-assert 80)
   )
  :method-count-assert 10
  :size-assert         #x60
  :flag-assert         #xa00000060
  (:methods
    (actor-hash-buckets-method-9 () none 9)
    )
  )
|#

(define-extern *actor-hash* spatial-hash)
;; (define-extern *actor-hash-buckets* object)
(define-extern update-actor-hash (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-death                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert 4)
   (timer       uint8   :offset-assert 6)
   (overlap     uint8   :offset-assert 7)
   (effect      uint32  :offset-assert 8)
   (sound       symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern *merc-death-globals* object) ;; vector
;; (define-extern birth-func-death-sparks function) ;; (function none)
;; (define-extern death-seed death-info)
;; (define-extern start-seed-effect function)
;; (define-extern death-default death-info) ;; death-info
;; (define-extern death-warp-in death-info) ;; death-info
;; (define-extern death-warp-out death-info) ;; death-info
;; (define-extern sparticle-texture-glow-soft function)
;; (define-extern merc-death-spawn function) ;; (function int vector vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-flow                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flow-section (structure)
  ((start      vector :inline :offset-assert 0)
   (trailing   plane  :inline :offset-assert 16)
   (pull-dir   vector :inline :offset-assert 32)
   (radial-dir vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype flow-section-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype flow-control (basic)
  ((path           basic          :offset-assert 4)
   (speed          float          :offset-assert 8)
   (belt-radius    float          :offset-assert 12)
   (sections       basic          :offset-assert 16)
   (leading        plane  :inline :offset-assert 32)
   (collide-bounds sphere :inline :offset-assert 48)
   )
  :method-count-assert 13
  :size-assert         #x40
  :flag-assert         #xd00000040
  (:methods
    (flow-control-method-9 () none 9)
    (flow-control-method-10 () none 10)
    (flow-control-method-11 () none 11)
    (flow-control-method-12 () none 12)
    )
  )
|#

;; (define-extern ray-plane-equation-intersect function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum water-flags
  :bitfield #t
  :type uint32
  (active)
  (can-wade)
  (can-swim)
  (swim-ground)
  (can-ground)
  (use-ocean)
  (tar)
  (mud)
  (deadly)
  (use-water-anim)
  (no-grab-ground)
  (dark-eco)
  (lava)
  (swamp)
  (flow)
  (under-water)
  (head-under-water)
  (bouncing)
  (wading)
  (swimming)
  (touch-water)
  (jump-out)
  (break-surface)
  (spawn-drip)
  (part-splash)
  (part-drip)
  (part-rings)
  (part-water)
  (event)
  (over-water)
  (find-water)
  (touch-water-good)
  )

(deftype water-info (structure)
  ((trans       vector      :inline :offset-assert 0)
   (normal      vector      :inline :offset-assert 16)
   (base-height meters              :offset-assert 32)
   (depth       meters              :offset-assert 36)
   (handle      uint64              :offset-assert 40)
   (flags       water-flags         :offset-assert 48)
   (prim        basic               :offset-assert 52)
   (extra-flags uint32              :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype water-control (basic)
  ((flags             water-flags           :offset-assert 4)
   (process           process-hidden        :offset-assert 8)
   (joint-index       int32                 :offset-assert 12)
   (top-y-offset      float                 :offset-assert 16)
   (attack-id         uint32                :offset-assert 20)
   (enter-water-time  time-frame            :offset-assert 24)
   (wade-time         time-frame            :offset-assert 32)
   (on-water-time     time-frame            :offset-assert 40)
   (enter-swim-time   time-frame            :offset-assert 48)
   (swim-time         time-frame            :offset-assert 56)
   (base-height       meters                :offset-assert 64)
   (wade-height       meters                :offset-assert 68)
   (swim-height       meters                :offset-assert 72)
   (surface-height    meters                :offset-assert 76)
   (bottom-height     meters                :offset-assert 80)
   (collide-height    meters                :offset-assert 84)
   (height            meters                :offset-assert 88)
   (height-offset     float 4     :score -1 :offset-assert 92)
   (base-ocean-offset meters                :offset 92)
   (real-ocean-offset meters                :offset 92)
   (ocean-offset      meters                :offset 96)
   (bob-offset        meters                :offset 100)
   (align-offset      meters                :offset 104)
   (swim-depth        meters                :offset 108)
   (bob               smush-control :inline :offset 112)
   (ripple            int64                 :offset 144)
   (ripple-size       meters                :offset 152)
   (wake-size         meters                :offset 156)
   (bottom            vector      2 :inline :offset 160)
   (top               vector      2 :inline :offset 192)
   (enter-water-pos   vector        :inline :offset 224)
   (drip-old-pos      vector        :inline :offset 240)
   (drip-joint-index  int32                 :offset 256)
   (drip-wetness      float                 :offset 260)
   (drip-time         time-frame            :offset 264)
   (drip-speed        float                 :offset 272)
   (drip-height       meters                :offset 276)
   (drip-mult         float                 :offset 280)
   (distort-time      time-frame            :offset 288)
   )
  :method-count-assert 17
  :size-assert         #x128
  :flag-assert         #x1100000128
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (water-control-method-9 () none 9) ;; (dummy-9 (_type_) none 9)
    (water-control-method-10 () none 10) ;; (dummy-10 (_type_) none 10)
    (water-control-method-11 () none 11) ;; (start-bobbing! (_type_ float int int) none 11)
    (distance-from-surface (_type_) float 12)
    (water-control-method-13 () none 13) ;; (dummy-13 (_type_ float vector int vector) none 13)
    (display-water-marks? (_type_) symbol 14)
    (water-control-method-15 () none 15) ;; (TODO-RENAME-15 (_type_) none 15)
    (water-control-method-16 () none 16) ;; (TODO-RENAME-16 (_type_) none 16)
    )
  )

(deftype water-vol (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *cam-res-string* string)
(define-extern cam-slave-get-vector-with-offset (function entity-actor vector symbol symbol))
(define-extern cam-slave-get-flags (function entity symbol uint)) ;; TODO - probably a `cam-slaves-options` but the wrong size!
(define-extern cam-slave-get-float (function entity symbol float float))
(define-extern cam-slave-get-fov (function entity float))
(define-extern cam-slave-get-intro-step (function entity float))
(define-extern cam-slave-get-interp-time (function entity float))
(define-extern cam-slave-get-rot (function entity-actor matrix matrix))
(define-extern cam-state-from-entity (function entity (state camera-slave)))
(define-extern parameter-ease-none (function object object))
(define-extern parameter-ease-clamp (function float float))
(define-extern parameter-ease-lerp-clamp (function float float))
(define-extern parameter-ease-sqrt-clamp (function float float))
(define-extern fourth-power (function float float))
(define-extern third-power (function float float))
(define-extern parameter-ease-sqr-clamp (function float float))
(define-extern parameter-ease-cube-clamp (function float float))
(define-extern parameter-ease-sin-clamp (function float float))
(define-extern cam-slave-init-vars (function none :behavior camera-slave))
(define-extern cam-slave-go (function (state camera-slave) none :behavior camera-slave))
(define-extern cam-slave-init (function (state camera-slave) entity none :behavior camera-slave))
(define-extern cam-standard-event-handler (function process int symbol event-message-block none :behavior camera-slave))
(define-extern cam-curve-pos (function vector vector curve symbol vector :behavior camera-slave))
(define-extern cam-curve-setup (function vector none :behavior camera-slave))
(define-extern cam-calc-follow! (function cam-rotation-tracker vector symbol vector))
(define-extern mat-remove-z-rot (function matrix vector matrix))
(define-extern slave-matrix-blend-2 (function matrix float vector matrix matrix))
(define-extern vector-into-frustum-nosmooth! (function matrix vector float vector))
(define-extern slave-set-rotation! (function cam-rotation-tracker vector float float symbol none))
(define-extern v-slrp2! (function vector vector vector float vector float vector))
(define-extern v-slrp3! (function vector vector vector vector float vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-interface                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern position-in-front-of-camera! (function vector float float vector))
(define-extern position-in-front-of-screen! (function vector float vector vector))
(define-extern matrix-local->world
  "Returns [[*math-camera*]]'s `inv-camera-rot-smooth` if `smooth?` is true, else return `inv-camera-rot`"
  (function symbol matrix))
(define-extern matrix-world->local
  "Returns [[*math-camera*]]'s `camera-rot`"
  (function matrix))
(define-extern *camera-dummy-vector* vector)
(define-extern camera-pos
  "Returns the `trans` vector from whatever is first determined to exist:
   - [[*camera-combiner*]]
   - [[*math-camera*]]
   - else, [[*camera-dummy-vector*]]"
  (function vector))
(define-extern math-camera-pos "Returns [[*math-camera*]]'s `trans`" (function vector))
(define-extern camera-matrix
  "If [[*camera-combiner*]] exists, return it's `inv-camera-rot`.  Else, return [[*math-camera*]]'s"
  (function matrix))
(define-extern math-camera-matrix
  "Returns [[*math-camera*]]'s `inv-camera-rot`"
  (function matrix))
(define-extern camera-angle (function float))
(define-extern camera-teleport-to-entity (function entity-actor none :behavior process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-master                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern reset-follow (function float :behavior camera-master))
(define-extern reset-target-tracking (function symbol :behavior camera-master))
(define-extern master-track-target (function symbol :behavior camera-master))
(define-extern setup-slave-for-hopefull (function camera-slave none))
(define-extern master-is-hopeful-better? (function camera-slave camera-slave symbol :behavior camera-master))
(define-extern master-choose-entity (function cam-setting-data symbol :behavior camera-master))
(define-extern cam-master-set-entity (function cam-setting-data none))
(define-extern cam-master-activate-slave (function symbol none))
(define-extern cam-master-active (state camera-master))
(define-extern cam-master-init (function none :behavior camera-master))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-eye-bank (basic)
  ((rot-speed float :offset-assert 4)
   (max-degrees float :offset-assert 8)
   (max-fov float :offset-assert 12)
   (min-fov float :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-string-bank (basic)
  ((los-coll-rad meters :offset-assert 4)
   (los-coll-rad2 meters :offset-assert 8))
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype los-dist (structure)
  ((par-dist float :offset-assert 0)
   (lat-dist float :offset-assert 4)
   (vert-dist float :offset-assert 8))
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c)

(deftype collide-los-dist-info (structure)
  ((min-par float  :offset-assert 0)
   (max-par float  :offset-assert 4)
   (min-lat float  :offset-assert 8)
   (max-lat float  :offset-assert 12)
   (min-vp float  :offset-assert 16)
   (max-vp float  :offset-assert 20)
   (min-vn float  :offset-assert 24)
   (max-vn float  :offset-assert 28)
   (count int32 :offset-assert 32))
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype collide-los-result (structure)
  ((lateral vector :inline :offset-assert 0)
   (cw collide-los-dist-info :inline :offset-assert 16)
   (ccw collide-los-dist-info :inline :offset-assert 64)
   (straddle collide-los-dist-info :inline :offset-assert 112)
   (lateral-valid symbol :offset-assert 148))
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

(deftype cam-stick-bank (basic)
  ((max-z meters :offset-assert 4)
   (min-z meters :offset-assert 8)
   (max-y meters :offset-assert 12)
   (min-y meters :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-bike-bank (basic)
  ((max-z meters :offset-assert 4)
   (min-z meters :offset-assert 8)
   (max-y meters :offset-assert 12)
   (min-y meters :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


(define-extern cam-standoff-calc-trans (function vector :behavior camera-slave))
(define-extern *CAM_EYE-bank* cam-eye-bank)
(define-extern cam-circular-position-into-max-angle (function vector vector float vector :behavior camera-slave))
;; (define-extern cam-circular-position (function symbol vector :behavior camera-slave)) ;; TODO - hang
(define-extern cam-circular-code (function float :behavior camera-slave))
(define-extern *CAM_STRING-bank* cam-string-bank) ;; cam-string-bank
(define-extern cam-string-find-position-rel! (function vector symbol)) ;;
(define-extern cam-string-set-position-rel! (function vector cam-slave-options :behavior camera-slave))
(define-extern string-push-help (function float)) ;;
(define-extern cam-draw-collide-cache (function collide-cache none)) ;;
(define-extern dist-info-init (function collide-los-dist-info none)) ;;
(define-extern dist-info-valid? (function collide-los-dist-info symbol)) ;;
(define-extern dist-info-append (function collide-los-dist-info vector none)) ;;
(define-extern dist-info-print (function collide-los-dist-info string object)) ;;
(define-extern los-cw-ccw (function (inline-array collide-cache-tri) vector vector float collide-los-result vector float symbol)) ;;
(define-extern cam-los-spline-collide (function vector vector pat-surface float)) ;;
(define-extern cam-los-setup-lateral (function collide-los-result vector vector symbol :behavior camera-slave)) ;;
(define-extern cam-los-collide (function vector vector collide-los-result pat-surface symbol :behavior camera-slave)) ;;
(define-extern cam-string-follow (function object :behavior camera-slave)) ;;
;; (define-extern cam-string-line-of-sight (function vector :behavior camera-slave)) ;; TODO - hang
(define-extern cam-dist-analog-input (function int float float)) ;;
(define-extern cam-string-joystick (function vector :behavior camera-slave)) ;;
(define-extern cam-string-find-hidden (function none :behavior camera-slave)) ;;
(define-extern cam-string-move (function object :behavior camera-slave)) ;;
(define-extern cam-string-code (function vector :behavior camera-slave)) ;;
(define-extern set-string-params (function vector :behavior camera-slave))
(define-extern *CAM_STICK-bank* cam-stick-bank) ;; cam-stick-bank
;; (define-extern cam-stick-code (function none :behavior camera-slave)) ;; TODO - hang
(define-extern *CAM_BIKE-bank* cam-bike-bank) ;; cam-bike-bank
(define-extern cam-calc-bike-follow! (function cam-rotation-tracker vector symbol vector :behavior camera-slave)) ;;
;; (define-extern cam-bike-code (function none :behavior camera-slave)) ;; TODO - hang



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-states-dbg                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-point-watch-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed degrees    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype cam-free-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed degrees    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype camera-free-floating-move-info (structure)
  ((rv vector :inline :offset-assert 0)
   (tv vector :inline :offset-assert 16)
   (up vector :inline :offset-assert 32)
   (tm matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(define-extern *CAM_POINT_WATCH-bank* cam-point-watch-bank)
(define-extern *CAM_FREE-bank* cam-free-bank)
(define-extern cam-mouse-input (function vector vector float))
(define-extern cam-free-floating-input (function vector vector symbol int vector))
(define-extern cam-free-floating-move (function matrix vector vector int vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-combiner                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cam-helper-temp (function (pointer camera-slave) (pointer camera-slave) float matrix :behavior camera-combiner))
(define-extern cam-combiner-active (state camera-combiner))
(define-extern cam-combiner-init (function none :behavior camera-combiner))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-update                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern plane-from-points (function (inline-array plane) vector vector vector int float)) ;;
(define-extern set-point (function vector float float float float)) ;;
(define-extern update-view-planes (function math-camera (inline-array plane) float matrix float)) ;;
(define-extern *update-leaf-when-outside-bsp* symbol) ;;
(define-extern update-visible (function math-camera symbol)) ;;
(define-extern *save-camera-inv-rot* matrix) ;;
(define-extern move-camera-from-pad (function math-camera math-camera)) ;;
(define-extern external-cam-reset! (function none))
(define-extern *start-timer* int) ;;
(define-extern *timer-value* int) ;;
(define-extern *start-pos* vector) ;;
(define-extern update-camera (function symbol)) ;;
(define-extern move-level-by-name (function symbol float float float vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vol-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype plane-volume (structure)
  ((volume-type  symbol                :offset-assert 0) ;; guessed by decompiler
   (point-count  int16                 :offset-assert 4)
   (normal-count int16                 :offset-assert 6)
   (first-point  (pointer vector)                :offset-assert 8) ;; (pointer vector)
   (first-normal (pointer vector)                :offset-assert 12) ;; (pointer vector)
   (num-planes   int32                 :offset-assert 16)
   (plane        (inline-array plane)  :offset-assert 20) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (plane-volume-method-9 (_type_ symbol vector-array vector-array) plane-volume 9)
    (debug-draw (_type_) none 10)
    (point-in-vol?
      "TODO - Checks if the given [[vector]] point is inside the volume defined by 6 [[plane]]s by atleast the padding value provided"
      (_type_ vector float) symbol 11)
    )
  )

;; +++vol-h:vol-flags
(defenum vol-flags
  :bitfield #t
  :type uint32
  (display?)
  (vol-flags-1)
  )
;; ---vol-h:vol-flags

(deftype vol-control (basic)
  ((flags         vol-flags     :offset-assert 4)
   (process       process-drawable      :offset-assert 8)
   (pos-vol-count int32      :offset-assert 12)
   (pos-vol       plane-volume 32 :inline :offset-assert 16)
   (neg-vol-count int32      :offset-assert 784)
   (neg-vol       plane-volume 32 :inline :offset-assert 788)
   (debug-point   vector-array      :offset-assert 1556)
   (debug-normal  vector-array      :offset-assert 1560)
   )
  :method-count-assert 12
  :size-assert         #x61c
  :flag-assert         #xc0000061c
  (:methods
    (new (symbol type process-drawable) _type_ 0)
    (vol-control-method-9 (_type_) none 9)
    (vol-control-method-10 (_type_ plane) symbol 10)
    (should-display?
      "Returns true/false if the volume's marks should be displayed"
      (_type_) symbol 11)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-layout                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-layout-bank (basic)
  (
    (spline-t float :offset-assert 4)
    (spline-step float :offset-assert 8)
    (intro-t float :offset-assert 12)
    (intro-step float :offset-assert 16)
    (debug-t float :offset-assert 20)
    (debug-step float :offset-assert 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-basic (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype clm-item-action (structure)
  (
    (button uint64 :offset-assert 0)
    (options uint64 :offset-assert 8)
    (func symbol :offset-assert 16)
    (parm0 int32 :offset 20)
    (parm0-symbol symbol :offset 20)
    (parm0-basic basic :offset 20)
    (parm1 symbol :offset 24)
    (parm1-basic basic :offset 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-item (clm-basic)
  (
    (description string :offset-assert 4)
    (button-symbol symbol :offset-assert 8)
    (action clm-item-action :inline :offset-assert 16)
  )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype clm-list-item (basic)
  (
    (description string :offset-assert 4)
    (track-val symbol :offset-assert 8)
    (val-func symbol :offset-assert 12)
    (val-parm0 int32 :offset 16)
    (val-parm0-symbol symbol :offset 16)
    (val-parm0-basic basic :offset 16)
    (val-parm1 symbol :offset 20)
    (val-parm1-basic basic :offset 20)
    (actions (array clm-item-action) :offset-assert 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-list (clm-basic)
  (
    (tracker symbol :offset-assert 4)
    (cur-list-item int32 :offset-assert 8)
    (items (array clm-list-item) :offset-assert 12)
  )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype clm (basic)
  (
    (title string :offset-assert 4)
    (items (array clm-basic) :offset-assert 8)
  )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype volume-descriptor-array (inline-array-class)
  ((data  plane-volume  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cam-layout (process)
  (
    (cam-entity entity-camera :offset-assert 128)
    (num-entities int32 :offset-assert 132)
    (cur-entity int32 :offset-assert 136)
    (num-volumes int32 :offset-assert 140)
    (cur-volume int32 :offset-assert 144)
    (first-pvol int32 :offset-assert 148)
    (first-cutoutvol int32 :offset-assert 152)
    (res-key float :offset-assert 156)
  )
  :method-count-assert 14
  :heap-base           #x200
  :size-assert         #xa0
  :flag-assert         #xe020000a0
  (:states
    cam-layout-active)
  )

(deftype interp-test-info (structure)
  (
    (from vector :inline :offset-assert 0)
    (to vector :inline :offset-assert 16)
    (origin vector :inline :offset-assert 32)
    (color vector4w :offset-assert 48)
    (axis vector :offset-assert 52)
    (disp string :offset-assert 56)
  )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype clmf-cam-flag-toggle-info (structure)
  (
    (key float :offset-assert 0)
    (force-on int32 :offset-assert 4)
    (force-off int32 :offset-assert 8)
  )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(define-extern *camera-layout-blink* symbol) ;;
(define-extern *CAM_LAYOUT-bank* cam-layout-bank) ;; cam-layout-bank
(define-extern *camera-layout-message-ypos* int) ;; int
(define-extern *volume-point-current* int) ;; int
(define-extern *volume-point* vector-array) ;; vector-array
(define-extern *volume-normal-current* int) ;; int
(define-extern *volume-normal* vector-array) ;; vector-array
(define-extern *volume-descriptor-current* int) ;; int
(define-extern *volume-descriptor* vol-control) ;; vol-control
(define-extern cam-layout-print (function int int string pointer)) ;;
(define-extern cam-layout-intersect-dist (function vector vector vector float)) ;;
(define-extern cam-layout-entity-volume-info-create (function entity-camera symbol symbol :behavior cam-layout)) ;;
(define-extern cam-layout-entity-volume-info (function symbol :behavior cam-layout)) ;;
(define-extern v-slrp! (function vector vector vector float vector)) ;;
(define-extern interp-test (function (function vector vector vector float vector float none) interp-test-info none)) ;;
(define-extern interp-test-deg (function (function vector vector vector vector float none) interp-test-info none)) ;;
(define-extern cam-layout-entity-info (function entity-actor none)) ;;
(define-extern clmf-button-test "Displays the message `button test`" (function symbol)) ;;
(define-extern clmf-bna "Displays the message `button not available`" (function symbol)) ;;
(define-extern clmf-implement "Displays the message `button not implemented yet`" (function symbol)) ;;
(define-extern clmf-input (function vector vector int vector)) ;;
(define-extern clmf-pos-rot (function symbol symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-next-volume (function int symbol :behavior cam-layout)) ;;
(define-extern clmf-next-vol-dpad (function symbol)) ;;
(define-extern clmf-to-edit-cam (function symbol)) ;;
(define-extern *last-cur-entity* int) ;; int
(define-extern clmf-next-entity (function int symbol :behavior cam-layout)) ;;
(define-extern clmf-to-spline-attr (function symbol)) ;;
(define-extern clmf-to-intro-attr (function symbol)) ;;
(define-extern clmf-to-index-attr (function symbol)) ;;
(define-extern clmf-to-focalpull-attr (function symbol)) ;; (function symbol)
(define-extern clmf-to-edit (function symbol :behavior cam-layout)) ;;
(define-extern clmf-to-select (function symbol)) ;; (function symbol)
(define-extern clmf-look-through (function symbol :behavior cam-layout)) ;;
(define-extern fov->maya (function float float)) ;;
(define-extern cam-layout-save-cam-rot (function symbol string entity-actor none)) ;;
(define-extern cam-layout-save-cam-trans (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-pivot (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-align (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-interesting (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-fov (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-focalpull (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-flags (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-focalpull-flags (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-campoints-flags (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-introsplinetime (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-introsplineexitval (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-interptime (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-splineoffset (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-spline-follow-dist-offset (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-campointsoffset (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-tiltAdjust (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-stringMinLength (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-stringMaxLength (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-stringMinHeight (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-stringMaxHeight (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-stringCliffHeight (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern cam-layout-save-maxAngle (function symbol string entity-actor none)) ;; (function symbol string entity-actor string)
(define-extern clmf-save-single (function entity-camera symbol symbol file-stream :behavior cam-layout)) ;;
(define-extern clmf-save-one (function symbol symbol :behavior cam-layout)) ;; (function symbol symbol :behavior cam-layout)
(define-extern clmf-save-all (function symbol symbol :behavior cam-layout)) ;; (function symbol symbol :behavior cam-layout)
(define-extern clmf-cam-flag-toggle (function int int symbol :behavior cam-layout)) ;; (function int int symbol :behavior cam-layout)
(define-extern clmf-cam-flag (function string uint uint symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-float-adjust (function symbol (pointer float) symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-meters (function meters symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-fov (function degrees symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-deg (function degrees symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-intro-time (function float symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-interp-time (function float symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-float (function float symbol symbol :behavior cam-layout)) ;;
(define-extern clmf-cam-string (function string symbol symbol :behavior cam-layout)) ;;
(define-extern *clm-focalpull-attr* clm) ;; clm
(define-extern *clm-index-attr* clm) ;; clm
(define-extern *clm-intro-attr* clm) ;; clm
(define-extern *clm-spline-attr* clm) ;; clm
(define-extern *clm-cam-attr* clm) ;; clm
(define-extern *clm-cam-lookthrough* clm) ;; clm
(define-extern *clm-edit* clm) ;; clm
(define-extern *clm-save-all* clm) ;; clm
(define-extern *clm-save-one* clm) ;; clm
(define-extern *clm-select* clm) ;; clm
(define-extern *clm* clm) ;; clm
(define-extern cam-layout-do-action (function clm-item-action symbol :behavior cam-layout)) ;;
(define-extern cam-layout-function-call (function symbol string int basic symbol :behavior cam-layout)) ;;
(define-extern cam-layout-do-menu (function clm symbol :behavior cam-layout)) ;;
(define-extern cam-layout-active (state cam-layout)) ;;
(define-extern cam-layout-init (function object :behavior cam-layout)) ;;
(define-extern cam-layout-stop (function symbol))
(define-extern cam-layout-start (function symbol))
(define-extern cam-layout-restart (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-debug                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-dbg-scratch (structure)
  ((linevec4w      vector4w 2 :inline :offset-assert 0) ;; vector4w 2 :inline
   (color          vector4w :inline :offset-assert 32)
   (plotvec        vector4w 2 :inline :offset-assert 48) ;; vector4w 2 :inline
   (linevec        vector4w 2 :inline :offset-assert 80) ;; vector4w 2 :inline
   (rel-vec        vector :inline :offset-assert 112)
   (sphere-v-start vector :inline :offset-assert 128)
   (sphere-v-end   vector :inline :offset-assert 144)
   (sphere-v-down  vector :inline :offset-assert 160)
   (sphere-vec     vector :inline :offset-assert 176)
   (crossvec       vector 3 :inline :offset-assert 192)
   (bboxvec        vector 6 :inline :offset-assert 240)
   (fov-vv         vector 4 :inline :offset-assert 336)
   (fov-src        vector :inline :offset-assert 400)
   (fov-dest       vector :inline :offset-assert 416)
   (fov-vert       vector :inline :offset-assert 432)
   (fov-horz       vector :inline :offset-assert 448)
   )
  :method-count-assert 9
  :size-assert         #x1d0
  :flag-assert         #x9000001d0
  )

(deftype cam-debug-tri (structure)
  ((vertex    vector   3       :inline :offset-assert 0) ;; guessed by decompiler
   (intersect vector   :inline :offset-assert 48)
   (color     vector4w         :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype cam-collision-record (structure)
  ((pos            vector :inline :offset-assert 0)
   (vel            vector :inline :offset-assert 16)
   (desired-pos    vector :inline :offset-assert 32)
   (cam-tpos-cur   vector :inline :offset-assert 48)
   (cam-tpos-old   vector :inline :offset-assert 64)
   (view-flat      vector :inline :offset-assert 80)
   (string-min-val vector :inline :offset-assert 96)
   (string-max-val vector :inline :offset-assert 112)
   (view-off       vector :inline :offset-assert 128)
   (min-z-override float          :offset-assert 144)
   (string-push-z  float          :offset-assert 148)
   (view-off-param float          :offset-assert 152)
   (frame          int32          :offset-assert 156)
   (iteration      int32          :offset-assert 160)
   (move-type      symbol         :offset-assert 164) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )

(deftype cam-collision-record-array (inline-array-class)
  ((data             cam-collision-record :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *camera-old-cpu* int)
(define-extern *camera-old-vu* int)
(define-extern *camera-old-tfrag-bytes* int)
(define-extern *camera-old-level* string)
(define-extern *camera-old-stat-string-tfrag* string)
(define-extern *camera-old-stat-string-tfrag-near* string)
(define-extern *camera-old-stat-string-total* string)
(define-extern cam-slave-options->string (function cam-slave-options object string))
(define-extern cam-index-options->string (function cam-index-options object string))
(define-extern slave-los-state->string (function slave-los-state string))
(define-extern cam-line-dma (function pointer)) ;;
(define-extern camera-line2d (function vector4w vector4w pointer)) ;;
(define-extern camera-plot-float-func (function float float float float (function float float) vector4w none)) ;;
(define-extern camera-line-setup (function vector4w none)) ;;
(define-extern camera-line-draw (function vector vector none)) ;;
(define-extern camera-line (function vector vector vector4w none))
(define-extern camera-line-rel (function vector vector vector4w none)) ;;
(define-extern camera-line-rel-len (function vector vector float vector4w none))
(define-extern camera-sphere (function vector float vector4w none)) ;;
(define-extern camera-cross (function vector vector vector vector4w meters none)) ;;
(define-extern camera-bounding-box-draw (function bounding-box basic rgba none)) ;;
(define-extern *cam-debug-los-tri-current* int) ;; int
(define-extern *cam-debug-los-tri* (inline-array cam-debug-tri)) ;;
(define-extern *cam-debug-coll-tri-current* int) ;; int
(define-extern *cam-debug-coll-tri* (inline-array cam-debug-tri)) ;; (inline-array cam-debug-tri)
(define-extern cam-debug-reset-coll-tri (function none)) ;;
(define-extern cam-debug-add-los-tri (function (inline-array collide-cache-tri) vector vector none)) ;;
(define-extern cam-debug-add-coll-tri (function cam-debug-tri vector cam-debug-tri none)) ;;
(define-extern cam-debug-draw-tris (function symbol)) ;;
(define-extern camera-fov-draw (function int int vector float float vector4w none)) ;;
(define-extern camera-fov-frame (function matrix vector float float float vector4w symbol)) ;;
(define-extern debug-euler (function cam-dbg-scratch object)) ;;
(define-extern bike-cam-limit (function float float)) ;;
(define-extern camera-slave-debug (function camera-slave none))
(define-extern master-draw-coordinates (function vector none)) ;;
(define-extern *cam-collision-record-first* int) ;; int
(define-extern *cam-collision-record-last* int) ;; int
(define-extern *cam-collision-record-show* int) ;; int
(define-extern *cam-collision-record* cam-collision-record-array) ;;
(define-extern cam-collision-record-save (function vector vector int symbol camera-slave none)) ;;
(define-extern cam-collision-record-step (function int none)) ;;
(define-extern cam-collision-record-draw (function none)) ;;
(define-extern camera-master-debug (function camera-master none)) ;;
(define-extern debug-set-camera-pos-rot! (function vector matrix vector)) ;;
(define-extern cam-restore (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-start                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cam-stop (function symbol))
(define-extern cam-start (function symbol none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-drawable               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cspace-by-name (function process-drawable string cspace))
(define-extern cspace-index-by-name (function process-drawable string int))
(define-extern vector<-cspace! (function vector cspace vector))
(define-extern vector<-matrix! (function vector matrix vector))
;; (define-extern vector<-cspace+vector! function) ;; (function vector cspace vector vector)
;; (define-extern cspace-children function) ;; (function process-drawable int pair)
;; (define-extern cspace-inspect-tree function) ;; (function process-drawable cspace int int object object)
(define-extern execute-math-engine (function int))
;; (define-extern draw-joint-axes function)
;; (define-extern draw-root function)
;; (define-extern empty-state state) ;; (state process)
(define-extern process-drawable-art-error (state string process-drawable))
;; (define-extern process-drawable-idle state) ;; (state process-drawable)
;; (define-extern skeleton-group->draw-control function)
(define-extern ja-done? (function int symbol :behavior process-drawable))
(define-extern ja-min? (function int symbol :behavior process-drawable)) ;;
(define-extern ja-max? (function int symbol :behavior process-drawable)) ;;
;; (define-extern ja-num-frames function) ;; (function int int :behavior process-drawable)
(define-extern ja-frame-num (function int float :behavior process-drawable))
(define-extern ja-aframe-num (function int float :behavior process-drawable))
(define-extern ja-aframe (function float int float :behavior process-drawable))
;; (define-extern ja-speed function) ;; (function int float :behavior process-drawable)
;; (define-extern ja-step function) ;; (function int float :behavior process-drawable)
(define-extern ja-channel-set! (function int int :behavior process-drawable))
(define-extern ja-channel-push! (function int time-frame int :behavior process-drawable))
;; (define-extern ja-channel-float! function)
(define-extern joint-control-reset! (function joint-control joint-control-channel none :behavior process-drawable))
;; (define-extern ja-group-size function) ;; (function int :behavior process-drawable)
;; (define-extern ja-eval function) ;; (function int :behavior process-drawable)
;; (define-extern ja-blend-eval function) ;; (function int :behavior process-drawable)
(define-extern ja-post (function none :behavior process-drawable))
(define-extern sleep-code (function symbol))
;; (define-extern transform-and-sleep function)
;; (define-extern transform-and-sleep-code function)
(define-extern transform-post (function int :behavior process-drawable)) ;;
;; (define-extern rider-trans function) ;; (function int :behavior process-drawable)
;; (define-extern rider-post function) ;; (function int :behavior process-drawable)
;; (define-extern pusher-post function) ;; (function int :behavior process-drawable)
;; (define-extern process-drawable-delay-player function) ;; (function time-frame int :behavior process-drawable)
;; (define-extern process-drawable-fuel-cell-handler function) ;; (function process int symbol event-message-block none :behavior process-drawable)
;; (define-extern process-drawable-birth-fuel-cell function) ;; (function entity vector symbol none :behavior process-drawable)
;; (define-extern find-offending-process-focusable function)
;; (define-extern *valid-con* object) ;; string
;; (define-extern process-drawable-valid? function) ;; (function process-drawable symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ambient                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern can-display-query? function)
(define-extern talker-surpress! (function none))
;; (define-extern talker-displayed? function)
;; (define-extern kill-current-talker function)
;; (define-extern string->talker-speech function)
;; (define-extern talker-spawn-func function)
;; (define-extern talker-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; speech                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *speech-control* speech-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern region-tree-execute function)
(define-extern region-execute (function none))
;; (define-extern region-prim-lookup-by-id function)
;; (define-extern region-lookup-by-id function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fma-sphere                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fma-sphere (process-drawable)
  ((first-time?  basic                       :offset-assert 196)
   (mode         uint32                      :offset-assert 200)
   (track-handle uint64                      :offset-assert 204)
   (track-joint  int32                       :offset-assert 212)
   (attack-id    uint32                      :offset-assert 216)
   (duration     uint64                      :offset-assert 220)
   (sphere       sphere              :inline :offset-assert 236)
   (danger       traffic-danger-info :inline :offset-assert 252)
   )
  :method-count-assert 21
  :size-assert         #x136
  :flag-assert         #x1500c00136
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern fma-sphere-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; script                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern command-get-int (function object int int))
(define-extern command-get-float (function object float float))
(define-extern command-get-time (function object int int))
(define-extern command-get-param (function object object object))
(define-extern command-get-quoted-param (function object object object))
;; (define-extern command-get-process (function object process process :behavior camera-tracker))
(define-extern command-get-entity
  "- If `search` is a [[process]] - return it's `entity`
   - If `search` is an [[entity]] - return it
   - If `search` is a [[string]] - return the result of [[entity-by-name]]
   - If `search` is [[null?]] or [[empty]] or if no other condition passes, return `fallback`"
  (function object entity entity))
(define-extern command-get-trans (function object vector vector))
(define-extern key-assoc (function none))
(define-extern *script-form* int)
;; (define-extern level-from-heap function)
(define-extern *syntax-context* script-context)
(define-extern *script-context* script-context)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype target-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  ;; Failed to read fields.
  (:methods
    )
  )
|#

(declare-type camera-start basic)
(define-extern camera-start type)
#|
(deftype camera-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  ;; Failed to read fields.
  (:methods
    )
  )
|#

#|
(deftype med-res-level (process-drawable)
  ((level-name basic  :offset-assert 196)
   (part-mode  basic  :offset-assert 200)
   (index      int32  :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype launcher (process-drawable)
  ((spring-height   meters           :offset-assert 196)
   (camera          state            :offset-assert 200) ;; guessed by decompiler
   (active-distance float            :offset-assert 204)
   (seek-time       time-frame           :offset-assert 212) ;; time-frame
   (dest            vector   :inline :offset-assert 220)
   (sound-id        sound-id         :offset-assert 236) ;; guessed by decompiler
   )
  :method-count-assert 23
  :size-assert         #xf4
  :flag-assert         #x17008000f4
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    (deactivated () _type_ :state 22)
    )
  )
|#

;; (define-extern entity-lookup-part-group function)
;; (define-extern clone-anim-once function) ;; (function handle int symbol string none :behavior process-drawable)
;; (define-extern clone-anim function) ;; (function handle int symbol string none :behavior process-drawable)
;; (define-extern swingpole-init function)
;; (define-extern manipy-post function)
(define-extern manipy-init (function vector entity-actor skeleton-group vector none :behavior manipy)) ;; (function vector entity-actor skeleton-group vector none :behavior manipy)
;; (define-extern part-tracker-init function) ;; (function sparticle-launch-group time-frame (function part-tracker none) (pointer process-drawable) process collide-prim-core none :behavior part-tracker)
;; (define-extern part-tracker-track-root function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern part-tracker-move-to-target function) ;; (function part-tracker vector)
;; (define-extern part-tracker-track-target function) ;; (function part-tracker vector)
;; (define-extern lightning-tracker-init function)
;; (define-extern process-grab? function) ;; (function process symbol :behavior camera-tracker)
;; (define-extern process-release? function) ;; (function process symbol :behavior process)
;; (define-extern camera-look-at function) ;; (function pair uint process :behavior camera-tracker)
;; (define-extern ja-anim-done? function) ;; (function process symbol)
;; (define-extern camera-pov-from function) ;; (function pair uint process :behavior camera-tracker)
;; (define-extern cam-launcher-joystick function) ;; (function vector :behavior camera-slave)
;; (define-extern cam-launcher-shortfall state) ;; (state camera-slave)
;; (define-extern cam-launcher-long-joystick function) ;; (function vector :behavior camera-slave)
;; (define-extern cam-launcher-longfall state) ;; (state camera-slave)
;; (define-extern launcher-init-by-other function) ;; (function vector float int float none :behavior launcher)
;; (define-extern touch-tracker-init function) ;; (function vector float time-frame none :behavior touch-tracker)
;; (define-extern explosion-init-by-other function)
;; (define-extern explosion-spawn function)
;; (define-extern process-drawable-random-point! function) ;; (function process-drawable vector vector)
;; (define-extern process-drawable-pair-random-point! function) ;; (function process-drawable process-drawable vector float vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype lightning-globals (structure)
  ((gcf-buf uint16  :offset-assert 0)
   (vtx-buf uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

(define-extern *lightning-spec-id-table* (array lightning-spec))
;; (define-extern *lightning-gcf* object)
;; (define-extern lightning-fractal-gen function)
;; (define-extern lightning-uniform-gen function)
;; (define-extern lightning-trail-uniform-gen function)
;; (define-extern lightning-trail-fractal-gen function)
;; (define-extern gs-packed-rgba-lerp! function)
;; (define-extern rgba-lerp function)
;; (define-extern lightning-fade function)
;; (define-extern lightning-update function)
;; (define-extern lightning-draw function)
;; (define-extern lightning-start function)
;; (define-extern *lightning-globals* object)
;; (define-extern *lightning* object)
(define-extern lightning-draw-all (function none))
;; (define-extern unlink-lightning-spec-by-heap function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; carry-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum carry-mode
  :bitfield #t
  :type uint8
  (carry 0)
  (mech-carry 1)
  (mech-drag 2)
  (cm3)
  (cm4)
  (cm5)
  (cm6)
  (cm7)
  )

(deftype carry-info (basic)
  ((process          (pointer target)         :offset-assert 4)
   (pickup-time      time-frame               :offset-assert 8)
   (other-value      float                    :offset-assert 16)
   (other            int64                    :offset-assert 24)
   (point            vector           :inline :offset-assert 32)
   (normal           vector           :inline :offset-assert 48)
   (max-angle        degrees                  :offset-assert 64)
   (max-distance     meters                   :offset-assert 68)
   (max-pull         meters                   :offset-assert 72)
   (min-pull         meters                   :offset-assert 76)
   (grab-trans-blend float                    :offset-assert 80)
   (carry-radius     meters                   :offset-assert 84)
   (backup-radius    meters                   :offset-assert 88)
   (joint            int8                     :offset-assert 92)
   (mode             carry-mode               :offset-assert 93)
   (face-dir         int8                     :offset-assert 94)
   (local-point      vector           :inline :offset-assert 96)
   (local-normal     vector           :inline :offset-assert 112)
   (grab-quat        vector           :inline :offset-assert 128)
   (grab-trans       vector           :inline :offset-assert 144)
   (hold-trans       vector           :inline :offset-assert 160)
   )
  :method-count-assert 17
  :size-assert         #xb0
  :flag-assert         #x11000000b0
  (:methods
    (carry-info-method-9 () none 9)
    (carry-info-method-10 () none 10)
    (carry-info-method-11 () none 11)
    (carry-info-method-12 (_type_) none 12)
    (carry-info-method-13 () none 13)
    (carry-info-method-14 () none 14)
    (carry-info-method-15 (_type_) none 15)
    (carry-info-method-16 () none 16)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vehicle-controls (structure)
  ((steering float  :offset-assert 0)
   (throttle float  :offset-assert 4)
   (brake    float  :offset-assert 8)
   (lean-z   float  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype pilot-info (basic)
  ((entity                  basic                    :offset-assert 4)
   (vehicle                 uint64                   :offset-assert 8)
   (left-right-interp       float                    :offset-assert 16)
   (front-back-interp       float                    :offset-assert 20)
   (up-down-interp          float                    :offset-assert 24)
   (up-down-accel-factor    float                    :offset-assert 28)
   (front-back-accel-factor float                    :offset-assert 32)
   (left-right-accel-factor float                    :offset-assert 36)
   (stance                  uint8                    :offset-assert 40)
   (seat-index              int8                     :offset-assert 41)
   (backup-nav-radius       float                    :offset-assert 44)
   (cam-side-shift          float                    :offset-assert 48)
   (enable-cam-side-shift   basic                    :offset-assert 52)
   (gun?                    symbol                   :offset-assert 56)
   (controls                vehicle-controls :inline :offset-assert 60)
   (accel-array             vector 8         :inline :offset-assert 80)
   (local-accel             vector           :inline :offset-assert 208)
   (pilot-trans             vector           :inline :offset-assert 224)
   (pilot-quat              vector           :inline :offset-assert 240)
   (pilot-scale             vector           :inline :offset-assert 256)
   (pilot-time              time-frame               :offset-assert 272)
   (as-daxter?              symbol                   :offset-assert 280)
   (art-group-backup        basic                    :offset-assert 284)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gun (process-drawable)
  ((control       control-info    :offset 128)
   (shadow-backup shadow-geo      :offset 208)
   (read-scale    basic           :offset-assert 212)
   (gun-type      pickup-type     :offset-assert 216)
   (barrel        joint-mod       :offset-assert 220)
   (mag           joint-mod 4     :offset-assert 224) ;; guessed type
   (mag-scale     float 4         :offset-assert 240)
   )
  :method-count-assert 24
  :size-assert         #x100
  :flag-assert         #x1800800100
  (:methods
    (idle () _type_ :state 20)
    (use (symbol) _type_ :state 21)
    (hidden () _type_ :state 22)
    (die () _type_ :state 23)
    )
  )

(deftype gun-info (basic)
  ((process                (pointer target)   :offset-assert 4)
   (gun                    (pointer gun)      :offset-assert 8)
   (gun-pos                transformq :inline :offset-assert 16)
   (gun-trans              vector     :inline :offset 16)
   (gun-quat               quaternion :inline :offset 32)
   (gun-scale              vector     :inline :offset 48)
   (gun-type               pickup-type        :offset-assert 64)
   (using-gun-type         pickup-type        :offset-assert 68)
   (active?                symbol             :offset-assert 72)
   (latch?                 symbol             :offset-assert 76)
   (put-away?              symbol             :offset-assert 80)
   (surpress-time          time-frame         :offset-assert 88)
   (fire-time              time-frame         :offset-assert 96)
   (gun-time               time-frame         :offset-assert 104)
   (gun-get-on-time        time-frame         :offset-assert 112)
   (active-time            time-frame         :offset-assert 120)
   (fire-delay             uint32             :offset-assert 128)
   (gun-control            uint32             :offset-assert 132)
   (gun-target             uint32             :offset-assert 136)
   (gun-daxter             float              :offset-assert 140)
   (gun-roty-rel           degrees            :offset-assert 144)
   (gun-roty               degrees            :offset-assert 148)
   (gun-roty-targ          degrees            :offset-assert 152)
   (hips                   basic              :offset-assert 156)
   (upper-body             basic              :offset-assert 160)
   (chest                  basic              :offset-assert 164)
   (fire-dir-rot           degrees            :offset-assert 168)
   (fire-dir               vector 2 :inline   :offset-assert 176) ;; guess
   (fire-point             vector   :inline   :offset-assert 208)
   (fire-dir-backup        vector   :inline   :offset-assert 224)
   (fire-dir-out           vector   :inline   :offset-assert 240)
   (fire-pending           int32              :offset-assert 256)
   (fire-pending-time      time-frame         :offset-assert 264)
   (fire-start-time        time-frame         :offset-assert 272)
   (fire-charge            float              :offset-assert 280)
   (fire-spin              degrees            :offset-assert 284)
   (fire-spinv             degrees            :offset-assert 288)
   (fire-chamber           int32              :offset-assert 292)
   (fire-range             meters             :offset-assert 296)
   (laser-active?          symbol             :offset-assert 300)
   (laser-point            vector   :inline   :offset-assert 304)
   (laser-dir              vector 2 :inline   :offset-assert 320) ;; guess
   (laser-hit-point        vector   :inline   :offset-assert 352)
   (track?                 uint16             :offset-assert 368)
   (track-tilt             degrees            :offset-assert 372)
   (track-turn             degrees            :offset-assert 376)
   (track-find-range       meters             :offset-assert 380)
   (track-turnv-range      meters             :offset-assert 384)
   (track-tilt-range       meters             :offset-assert 388)
   (track-turn-range       meters             :offset-assert 392)
   (track-tilt-max         degrees            :offset-assert 396)
   (track-turn-max         degrees            :offset-assert 400)
   (track-angle-mult       float              :offset-assert 404)
   (track-beam-size        float              :offset-assert 408)
   (track-auto-fire        symbol             :offset-assert 412)
   (track-require          uint32             :offset-assert 416)
   (track-target-hold-time time-frame         :offset-assert 424)
   (track-start-time       time-frame         :offset-assert 432)
   (track-press-start-time time-frame         :offset-assert 440)
   (track-target           focus 2 :inline    :offset-assert 448)
   (track-trans            vector  :inline    :offset-assert 480)
   (track-dir              vector  :inline    :offset-assert 496)
   (turn-fast-hold-time    time-frame         :offset-assert 512)
   (blue-whine-sound-id    uint32             :offset-assert 520)
   (blue-whine-volume      float              :offset-assert 524)
   (top-anim-twist         vector  :inline    :offset-assert 528)
   (top-anim-twist-targ    vector  :inline    :offset-assert 544)
   (top-anim-look-at       vector  :inline    :offset-assert 560)
   (top-anim-twist-reset   uint64             :offset-assert 576)
   (top-anim-gun-height    meters             :offset-assert 584)
   (top-anim-blue-cycle    float              :offset-assert 588)
   (top-anim-low-high      float              :offset-assert 592)
   (top-anim-extra-twistv  degrees            :offset-assert 596)
   (top-anim-tilt-up       degrees            :offset-assert 600)
   (attack-combo           combo-tracker :inline  :offset-assert 608)
   (combo-window-start     time-frame         :offset-assert 656)
   (combo-window-state     uint32             :offset-assert 664)
   (combo-fire-delay       uint32             :offset-assert 668)
   (charge-ammo            float              :offset-assert 672)
   (charge-start-time      time-frame         :offset-assert 680)
   (charge-inc-time        time-frame         :offset-assert 688)
   (charge-active?         uint64             :offset-assert 696)
   )
  :method-count-assert 10
  :size-assert         #x2c0
  :flag-assert         #xa000002c0
  (:methods
    (gun-info-method-9 (_type_) none 9)
    )
  )

(define-extern want-to-gun? (function target symbol symbol :behavior process))
(define-extern using-gun? (function target symbol))
(define-extern enabled-gun? (function target symbol))
(define-extern gun->ammo (function pickup-type int))
(define-extern *gun-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype board (process-drawable)
  ((control       control-info          :offset 128)
   (shadow-backup shadow-geo            :offset 208)
   (main          joint-mod             :offset 212)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (idle (symbol) _type_ :state 20)
    (use () _type_ :state 21)
    (hidden () _type_ :state 22)
    )
  )

(deftype board-info (basic)
  ((board                  (pointer board)    :offset-assert 4)
   (camera-interp          float              :offset-assert 8)
   (process                (pointer target)   :offset-assert 12)
   (board-trans            vector :inline     :offset-assert 16)
   (board-quat             vector :inline     :offset-assert 32)
   (board-scale            vector :inline     :offset-assert 48)
   (main                   joint-mod          :offset-assert 64)
   (upper-body             basic              :offset-assert 68)
   (sound-bank-knob        float              :offset-assert 72)
   (sound-air-knob         float              :offset-assert 76)
   (wind-sound-id          uint32             :offset-assert 80)
   (wind-sound-pitch       float              :offset-assert 84)
   (wind-sound-volume      float              :offset-assert 88)
   (engine-sound-id        uint32             :offset-assert 92)
   (engine-sound-pitch     float              :offset-assert 96)
   (engine-sound-volume    float              :offset-assert 100)
   (bank-sound-id          uint32             :offset-assert 104)
   (bank-sound-pitch       float              :offset-assert 108)
   (bank-sound-volume      float              :offset-assert 112)
   (ride-sound-id          uint32             :offset-assert 116)
   (spin-sound-id          uint32             :offset-assert 120)
   (spin-sound-volume      float              :offset-assert 124)
   (spin-sound-pitch       float              :offset-assert 128)
   (up-vector              vector 2 :inline   :offset-assert 144)
   (slow-transv            vector   :inline   :offset-assert 176)
   (board-time             time-frame         :offset-assert 192)
   (board-get-on-time      time-frame         :offset-assert 200)
   (in-air-time            time-frame         :offset-assert 208)
   (stick-lock             basic              :offset 240)
   (stick-off              basic              :offset-assert 244)
   (stance-info            ground-tween-info :inline  :offset-assert 248)
   (mods-backup            basic              :offset-assert 284)
   (attack-id              uint32             :offset-assert 288)
   (latch?                 symbol             :offset-assert 292)
   (unstuck-time           time-frame         :offset 344)
   (stuck-count            int32              :offset-assert 352)
   (thrust-scale           float              :offset-assert 356)
   (flip-time              time-frame         :offset-assert 360)
   (transv-max             meters             :offset-assert 368)
   (turn-anim-tilt?        symbol             :offset-assert 372)
   (turn-anim-mag          float              :offset-assert 376)
   (turn-anim-targ         float              :offset-assert 380)
   (turn-anim-frame        float              :offset-assert 384)
   (turn-anim-vel          float              :offset-assert 388)
   (turn-anim-duck         float              :offset-assert 392)
   (turn-anim-duck-vel     float              :offset-assert 396)
   (tilt-anim-frame        vector   :inline   :offset-assert 400)
   (tilt-anim-target       vector   :inline   :offset-assert 416)
   (smack-surface-time     time-frame         :offset-assert 432)
   (smack-speed            meters             :offset-assert 440)
   (smack-normal           vector   :inline   :offset-assert 448)
   (glance-time            time-frame         :offset-assert 464)
   (glance-speed           meters             :offset-assert 472)
   (glance-in-transv       vector   :inline   :offset-assert 480)
   (glance-out-transv      vector   :inline   :offset-assert 496)
   (glance-normal          vector   :inline   :offset-assert 512)
   (on-flat-time           time-frame         :offset-assert 528)
   (jump-land-time         time-frame         :offset-assert 536)
   (slip-factor            float              :offset-assert 544)
   (ground-on-dir          vector   :inline   :offset-assert 560)
   (ride-time              time-frame         :offset-assert 576)
   (ride-start-time        time-frame         :offset-assert 584)
   (ride-button-time       time-frame         :offset-assert 592)
   (ride-lean-targ         float              :offset-assert 600)
   (ride-lean              float              :offset-assert 604)
   (ride-leanv             float              :offset-assert 608)
   (ride-lean-mag          float              :offset-assert 612)
   (ride-tilt-targ         float              :offset-assert 616)
   (ride-tilt              float              :offset-assert 620)
   (ride-tiltv             float              :offset-assert 624)
   (ride-tilt-mag          float              :offset-assert 628)
   (ride-lock              symbol             :offset-assert 632)
   (ride-lock-on           symbol             :offset-assert 636)
   (ride-speed             meters             :offset-assert 640)
   (ride-mode              uint32             :offset-assert 644)
   (ride-rot               degrees            :offset-assert 648)
   (ride-rot-old           degrees            :offset-assert 652)
   (ride-rot-abs           degrees 2          :offset-assert 656)
   (ride-rtv-abs           degrees            :offset-assert 664)
   (ride-touch-segment     vector  2 :inline  :offset-assert 672)
   (ride-dir               vector    :inline  :offset-assert 704)
   (ride-vertex-length     int16              :offset-assert 720)
   (ride-vertex-length-old int16              :offset-assert 722)
   (ride-vertex-base       int16              :offset-assert 724)
   (ride-vertex-base2      int16              :offset-assert 726)
   (ride-vertex-index      float              :offset-assert 728)
   (ride-vertex-index2     float              :offset-assert 732)
   (ride-vertex-index-old  float              :offset-assert 736)
   (ride-vertex            vector 3   :inline :offset-assert 752)
   (ride-segment           vector     :inline :offset-assert 800)
   (ride-dir-lean          vector     :inline :offset-assert 816)
   (ride-pad-vector        vector 1   :inline :offset-assert 832)
   (ride-vertex-old        vector 3   :inline :offset-assert 848)
   (ride-segment-old       vector     :inline :offset-assert 896)
   (ride-vertex-trail      vector 128 :inline :offset-assert 912)
   (halfpipe-side-time     time-frame         :offset-assert 2960)
   (halfpipe-jump-time     time-frame         :offset-assert 2968)
   (halfpipe-lip-time      time-frame         :offset-assert 2976)
   (halfpipe-time          time-frame         :offset-assert 2984)
   (halfpipe-gspot-time    time-frame         :offset-assert 2992)
   (halfpipe-lip-event     symbol             :offset-assert 3000)
   (spin-check-time        time-frame         :offset-assert 3008)
   (spin-time              time-frame         :offset-assert 3016)
   (spin-start-time        time-frame         :offset-assert 3024)
   (spin-start-dir         vector     :inline :offset-assert 3040)
   (spin-control           float              :offset-assert 3056)
   (spin-ground-start-time time-frame         :offset-assert 3064)
   (spin-ground-time       time-frame         :offset-assert 3072)
   (spin-ground-press-time time-frame         :offset-assert 3080)
   (flip-control           float              :offset-assert 3088)
   (flip-count             int32              :offset-assert 3092)
   (trickx-count           int32              :offset 3144)
   (trotyv-max             degrees            :offset-assert 3148)
   (trotyv                 degrees            :offset-assert 3152)
   (troty                  degrees            :offset-assert 3156)
   (troty-cum              degrees            :offset-assert 3160)
   (upper-body-rotyv-max   degrees            :offset 3168)
   (upper-body-rotyv       degrees            :offset-assert 3172)
   (upper-body-roty        degrees            :offset-assert 3176)
   (cushion-base           meters             :offset-assert 3180)
   (cushion-offset         meters             :offset-assert 3184)
   (shock-offset           meters             :offset-assert 3188)
   (shock-offsetv          meters             :offset-assert 3192)
   (shock-rotx             meters             :offset-assert 3196)
   (trick-count            int32              :offset 3204)
   (pad                    uint8              :offset 3399)
   )
  :method-count-assert 11
  :size-assert         #xd48
  :flag-assert         #xb00000d48
  (:methods
    (board-info-method-9 () none 9)
    (board-info-method-10 () none 10)
    )
  )

(deftype target-board-bank (basic)
  ((jump-height-min        meters   :offset-assert 4)
   (jump-height-max        meters   :offset-assert 8)
   (duck-jump-height-min   meters   :offset-assert 12)
   (duck-jump-height-max   meters   :offset-assert 16)
   (turn-frames            float    :offset-assert 20)
   (wall-kick-window       seconds  :offset-assert 24)
   (cushion                meters   :offset-assert 32)
   (trickx-jump-height-min meters   :offset-assert 36)
   (trickx-jump-height-max meters   :offset-assert 40)
   (tricky-jump-height-min meters   :offset-assert 44)
   (tricky-jump-height-max meters   :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(define-extern *TARGET_BOARD-bank* target-board-bank)
(define-extern want-to-board? (function symbol :behavior target))
(define-extern *board-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; darkjak-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype darkjak-info (basic)
  ((process      uint32    :offset-assert 4)
   (attack-id    uint32    :offset-assert 8)
   (start-time   time-frame    :offset-assert 16)
   (attack-time  time-frame    :offset-assert 24)
   (attack-count uint64    :offset-assert 32)
   (stage        uint32    :offset-assert 40)
   (want-stage   uint32    :offset-assert 44)
   (clock-pos    float     :offset-assert 48)
   (clock-vel    float     :offset-assert 52)
   (clock-on     symbol    :offset-assert 56)
   (hud          handle  1 :offset 64)
   (tone         uint32    :offset 72)
   (bomb         uint32    :offset 76)
   )
  :method-count-assert 10
  :size-assert         #x50
  :flag-assert         #xa00000050
  (:methods
    (darkjak-info-method-9 (_type_ int) none :behavior target 9)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-util                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype target-bank (basic)
  ((jump-collide-offset              meters          :offset-assert 4)
   (jump-height-min                  meters          :offset-assert 8)
   (jump-height-max                  meters          :offset-assert 12)
   (double-jump-height-min           meters          :offset-assert 16)
   (double-jump-height-max           meters          :offset-assert 20)
   (flip-jump-height-min             meters          :offset-assert 24)
   (flip-jump-height-max             meters          :offset-assert 28)
   (duck-jump-height-min             meters          :offset-assert 32)
   (duck-jump-height-max             meters          :offset-assert 36)
   (flop-jump-height-min             meters          :offset-assert 40)
   (flop-jump-height-max             meters          :offset-assert 44)
   (attack-jump-height-min           meters          :offset-assert 48)
   (attack-jump-height-max           meters          :offset-assert 52)
   (edge-grab-jump-height-min        meters          :offset-assert 56)
   (edge-grab-jump-height-max        meters          :offset-assert 60)
   (swim-jump-height-min             meters          :offset-assert 64)
   (swim-jump-height-max             meters          :offset-assert 68)
   (tube-jump-height-min             meters          :offset-assert 72)
   (tube-jump-height-max             meters          :offset-assert 76)
   (carry-jump-height-min            meters          :offset-assert 80)
   (carry-jump-height-max            meters          :offset-assert 84)
   (mech-jump-height-min             meters          :offset-assert 88)
   (mech-jump-height-max             meters          :offset-assert 92)
   (mech-carry-jump-height-min       meters          :offset-assert 96)
   (mech-carry-jump-height-max       meters          :offset-assert 100)
   (indax-jump-height-min            meters          :offset-assert 104)
   (indax-jump-height-max            meters          :offset-assert 108)
   (indax-double-jump-height-min     meters          :offset-assert 112)
   (indax-double-jump-height-max     meters          :offset-assert 116)
   (roll-duration                    uint64          :offset-assert 120)
   (roll-jump-pre-window             uint64          :offset-assert 128)
   (roll-jump-post-window            uint64          :offset-assert 136)
   (roll-timeout                     uint64          :offset-assert 144)
   (roll-speed-min                   meters          :offset-assert 152)
   (roll-speed-inc                   meters          :offset-assert 156)
   (roll-flip-duration               uint64          :offset-assert 160)
   (roll-flip-height                 meters          :offset-assert 168)
   (roll-flip-dist                   meters          :offset-assert 172)
   (roll-flip-art-height             meters          :offset-assert 176)
   (roll-flip-art-dist               meters          :offset-assert 180)
   (duck-slide-distance              meters          :offset-assert 184)
   (fall-far                         meters          :offset-assert 188)
   (fall-far-inc                     meters          :offset-assert 192)
   (attack-timeout                   uint64          :offset-assert 200) ;; time-frame
   (ground-timeout                   uint64          :offset-assert 208) ;; time-frame
   (slide-down-timeout               uint64          :offset-assert 216) ;; time-frame
   (fall-timeout                     uint64          :offset-assert 224) ;; time-frame
   (fall-stumble-threshold           meters          :offset-assert 232)
   (yellow-projectile-speed          meters          :offset-assert 236)
   (hit-invulnerable-timeout         uint64          :offset-assert 240) ;; time-frame
   (same-attack-invulnerable-timeout uint64          :offset-assert 248)
   (run-cycle-length                 float           :offset-assert 256)
   (walk-cycle-dist                  meters          :offset-assert 260)
   (walk-up-cycle-dist               meters          :offset-assert 264)
   (walk-down-cycle-dist             meters          :offset-assert 268)
   (walk-side-cycle-dist             meters          :offset-assert 272)
   (run-cycle-dist                   meters          :offset-assert 276)
   (run-up-cycle-dist                meters          :offset-assert 280)
   (run-down-cycle-dist              meters          :offset-assert 284)
   (run-side-cycle-dist              meters          :offset-assert 288)
   (run-wall-cycle-dist              meters          :offset-assert 292)
   (duck-walk-cycle-dist             meters          :offset-assert 296)
   (wade-shallow-walk-cycle-dist     meters          :offset-assert 300)
   (wade-deep-walk-cycle-dist        meters          :offset-assert 304)
   (mech-walk-cycle-dist             meters          :offset-assert 308)
   (mech-run-cycle-dist              meters          :offset-assert 312)
   (smack-surface-dist               meters          :offset-assert 316)
   (smack-surface-height             meters          :offset-assert 320)
   (min-dive-depth                   meters          :offset-assert 324)
   (root-radius                      meters          :offset-assert 328)
   (root-offset                      vector  :inline :offset-assert 336)
   (body-radius                      meters          :offset-assert 352)
   (edge-radius                      meters          :offset-assert 356)
   (edge-offset                      vector  :inline :offset-assert 368)
   (edge-grab-height-off-ground      meters          :offset-assert 384)
   (head-radius                      meters          :offset-assert 388)
   (head-height                      meters          :offset-assert 392)
   (head-offset                      vector  :inline :offset-assert 400)
   (spin-radius                      meters          :offset-assert 416)
   (spin-offset                      vector  :inline :offset-assert 432)
   (duck-spin-radius                 meters          :offset-assert 448)
   (duck-spin-offset                 vector  :inline :offset-assert 464)
   (punch-radius                     meters          :offset-assert 480)
   (punch-offset                     vector  :inline :offset-assert 496)
   (uppercut-radius                  meters          :offset-assert 512)
   (uppercut0-offset                 vector  :inline :offset-assert 528)
   (uppercut1-offset                 vector  :inline :offset-assert 544)
   (flop-radius                      meters          :offset-assert 560)
   (flop0-offset                     vector  :inline :offset-assert 576)
   (flop1-offset                     vector  :inline :offset-assert 592)
   (stuck-time                       seconds         :offset-assert 608)
   (stuck-timeout                    seconds         :offset-assert 616)
   (stuck-distance                   meters          :offset-assert 624)
   (tongue-pull-speed-min            float           :offset-assert 628)
   (tongue-pull-speed-max            float           :offset-assert 632)
   (yellow-attack-timeout            uint64          :offset-assert 640) ;; time-frame
   (fall-height                      meters          :offset-assert 648)
   (mech-jump-thrust-fuel            float           :offset-assert 652)
   (strafe-jump-pre-window           uint64          :offset-assert 656)
   (strafe-jump                      basic           :offset-assert 664)
   (strafe-duck-jump                 basic           :offset-assert 668)
   (dark-jump-height-min             meters          :offset-assert 672)
   (dark-jump-height-max             meters          :offset-assert 676)
   )
  :method-count-assert 9
  :size-assert         #x2a8
  :flag-assert         #x9000002a8
  )

(define-extern *target-shadow-control* shadow-control)
(define-extern *TARGET-bank* target-bank)
;; (define-extern target-start-attack function) ;; (function none :behavior target)
;; (define-extern target-danger-set! function) ;; (function symbol symbol float :behavior target)
(define-extern target-collide-set! (function symbol float int :behavior target))
(define-extern debounce-speed (function float float vector vector float :behavior target))
;; (define-extern target-align-vel-z-adjust function) ;; (function float float :behavior target)
;; (define-extern average-turn-angle function) ;; (function target float)
;; (define-extern can-play-stance-amibent? function) ;; (function symbol :behavior target)
;; (define-extern target-height-above-ground function) ;; (function float :behavior target)
;; (define-extern can-jump? function) ;; (function symbol symbol :behavior target)
;; (define-extern target-jump-go function)
;; (define-extern move-legs? function) ;; (function symbol :behavior target)
;; (define-extern jump-hit-ground-stuck? function)
;; (define-extern target-time-to-ground function)
;; (define-extern fall-test function) ;; (function none :behavior target)
;; (define-extern slide-down-test function) ;; (function none :behavior target)
;; (define-extern smack-surface? function) ;; (function symbol symbol :behavior target)
;; (define-extern can-roll? function)
;; (define-extern can-duck? function) ;; (function symbol :behavior target)
(define-extern can-exit-duck? (function symbol :behavior target)) ;; (function symbol :behavior target)
;; (define-extern can-hands? function) ;; (function symbol symbol :behavior target)
;; (define-extern can-feet? function) ;; (function symbol :behavior target)
;; (define-extern are-still? function)
;; (define-extern vector-local+! function) ;; (function vector vector vector :behavior target)
;; (define-extern move-forward function) ;; (function float vector :behavior target)
;; (define-extern set-forward-vel function) ;; (function float vector :behavior target)
;; (define-extern delete-back-vel function) ;; (function none :behavior target)
;; (define-extern set-side-vel function) ;; (function float vector :behavior target)
;; (define-extern target-timed-invulnerable function) ;; (function time-frame target none)
(define-extern target-timed-invulnerable-off (function target int none))
;; (define-extern target-log-attack function)
;; (define-extern ground-tween-initialize function) ;; (function ground-tween-info uint uint uint uint uint uint ground-tween-info :behavior target)
;; (define-extern ground-tween-update function) ;; (function ground-tween-info float float none :behavior target)
(define-extern target-pos (function int vector))
;; (define-extern target-cam-pos function) ;; (function vector)
;; (define-extern target-rot function) ;; (function quaternion)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-copy-target-y-rot function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-ground-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-target-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-vector-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-set-alpha-from-userdata function)
;; (define-extern part-tracker-track-target-joint function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern process-drawable-burn-effect function) ;; (function time-frame none :behavior target)
;; (define-extern lightning-probe-callback function)
;; (define-extern process-drawable-shock-effect function)
;; (define-extern process-drawable-shock-wall-effect function)
;; (define-extern process-drawable2-shock-effect function)
;; (define-extern process-drawable-shock-skel-effect function)
;; (define-extern *lightning-darkjak-pill* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-part                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *red-shot-colors* object)
;; (define-extern check-shell-level1 function)
;; (define-extern check-shell-level2 function)
;; (define-extern sparticle-dark-shot-lightning function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-reaction-target        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern poly-find-nearest-edge (function vector (inline-array vector) vector vector vector))
;; (define-extern target-collision-low-coverage function) ;; (function control-info collide-shape-intersect vector (pointer uint32) (pointer uint64) (pointer symbol) uint)
(define-extern target-collision-reaction (function control-info collide-query vector vector cshape-moving-flags)) ;; (function control-info collide-shape-intersect vector vector cshape-moving-flags)
(define-extern target-collision-no-reaction (function control-info collide-query vector vector none)) ;; (function control-info collide-shape-intersect vector vector none)
;; (define-extern *collide-edge-board-spec* object)
(define-extern rail-surface-touch (function none))
(define-extern gravel-surface-touch (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; logic-target                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern build-conversions (function vector vector :behavior target))
(define-extern vector-turn-to (function vector vector :behavior target))
(define-extern reverse-conversions (function vector none :behavior target))
(define-extern draw-history (function control-info none))
;; (define-extern target-history-print (function control-info symbol))
(define-extern target-print-stats (function target symbol symbol))
(define-extern read-pad (function vector vector :behavior target))
(define-extern set-pad (function vector vector :behavior target))
(define-extern warp-vector-into-surface! (function vector vector vector matrix vector))
(define-extern vector<-pad-in-surface! (function vector symbol vector :behavior target))
(define-extern vector<-pad-in-matrix! (function vector cpad-info matrix none))
(define-extern local-pad-angle (function float :behavior target))
(define-extern turn-around? (function symbol :behavior target))
(define-extern wall-hide? (function symbol :behavior target))
(define-extern target-log-trans (function none :behavior target))
(define-extern target-move-dist (function time-frame float :behavior target))
(define-extern turn-to-vector (function vector float symbol :behavior target))
(define-extern target-bend-vel-turn (function vector vector :behavior target))
(define-extern target-add-slide-factor (function vector vector :behavior target))
(define-extern add-thrust (function symbol :behavior target))
(define-extern add-gravity (function vector :behavior target))
(define-extern target-compute-slopes (function vector int :behavior target))
(define-extern do-rotations1 (function quaternion :behavior target))
(define-extern do-rotations2 (function int :behavior target))
(define-extern leg-ik-callback (function joint-mod-ik object object vector none))
(define-extern target-update-ik (function none :behavior target))
(define-extern pre-collide-setup (function none :behavior target))
(define-extern level-setup (function none :behavior target))
(define-extern flag-setup (function none :behavior target))
(define-extern post-flag-setup (function none :behavior target))
(define-extern bend-gravity (function symbol :behavior target))
(define-extern target-compute-edge (function none :behavior target))
(define-extern target-compute-edge-rider (function none :behavior target))
(define-extern target-compute-pole (function none :behavior target))
(define-extern target-calc-camera-pos (function none :behavior target))
(define-extern joint-points (function none :behavior target))
(define-extern do-target-gspot (function none :behavior target))
(define-extern target-real-post (function none :behavior target))
(define-extern target-post (function none :behavior target))
(define-extern target-swim-post (function none :behavior target))
(define-extern target-no-stick-post (function none :behavior target))
(define-extern target-no-move-post (function none :behavior target))
(define-extern target-no-ja-move-post (function none :behavior target))
(define-extern reset-target-state (function symbol target :behavior target))
(define-extern target-init (function continue-point none :behavior target))
(define-extern tobot-init (function symbol none :behavior target)) ;; unused?
(define-extern stop (function symbol int))
(define-extern start (function symbol continue-point target))
(define-extern tobot-start (function symbol target)) ;; unused?
(define-extern tobot-stop (function int)) ;; unused?
(define-extern tobot-stance (state target)) ;; unused?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sidekick                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sidekick-remap* object) ;; pair
;; (define-extern cspace<-cspace+transformq! function)
(define-extern target-sidekick-setup (function symbol none :behavior target))
;; (define-extern sidekick-clone state) ;; (state sidekick)
;; (define-extern init-sidekick function) ;; (function none :behavior sidekick)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; voicebox                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype camera-remote (camera-slave)
  ()
  :method-count-assert 14
  :size-assert         #xa94
  :flag-assert         #xe0a200a94
  (:methods
    )
  )
|#

#|
(deftype remote (process-drawable)
  ((base-trans    vector           :inline :offset-assert 204)
   (focus         focus            :inline :offset-assert 220)
   (seeker        cam-float-seeker :inline :offset-assert 232)
   (start-time    time-frame                   :offset-assert 260)
   (blend         float                    :offset-assert 268)
   (twist         float                    :offset-assert 272)
   (speak-effect? basic                    :offset-assert 276)
   )
  :method-count-assert 26
  :size-assert         #x11c
  :flag-assert         #x1a00a0011c
  (:methods
    (enter () _type_ :state 20)
    (idle () _type_ :state 21)
    (exit () _type_ :state 22)
    (remote-method-23 () none 23)
    (remote-method-24 () none 24)
    (remote-method-25 () none 25)
    )
  )
|#

#|
(deftype voicebox (remote)
  ((hint uint64  :offset-assert 284) ;; handle
   )
  :method-count-assert 26
  :size-assert         #x128
  :flag-assert         #x1a00b00128
  (:methods
    )
  )
|#

#|
(deftype judge (remote)
  ((total-time time-frame  :offset-assert 284)
   (beep-time  time-frame  :offset-assert 292)
   (hud-timer  uint64  :offset-assert 300)
   (score      uint8   :offset-assert 308)
   )
  :method-count-assert 28
  :size-assert         #x139
  :flag-assert         #x1c00c00139
  (:methods
    (wait () _type_ :state 26)
    (judge-method-27 () none 27)
    )
  )
|#

;; (define-extern remote-track function)
;; (define-extern cam-remote state)
;; (define-extern voicebox-init-by-other function) ;; (function vector handle none :behavior voicebox)
;; (define-extern voicebox-spawn function) ;; (function process vector (pointer process))
;; (define-extern judge-init-by-other function)
;; (define-extern judge-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collectables-part              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern eco-fadeout function) ;; (function sparticle-system sparticle-cpuinfo none)
;; (define-extern eco-track-root-prim-fadeout function) ;; (function sparticle-system sparticle-cpuinfo vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-track-root-money function) ;; (function sparticle-system sparticle-cpuinfo vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; find-nearest                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++find-nearest:search-info-flag
(defenum search-info-flag
  :type uint32
  :bitfield #t
  (crate 0)
  (enemy 1)
  (on-screen 2)
  (prefer-dist 3)
  (prefer-angle 4)
  (prefer-xz 5)
  (cull-angle 6)
  (cull-xz 7)
  (back-point 8)
  (combo 9)
  (probe 10)
  (probe-camera 11)
  (check-track 12)
  (prefer-center 13)
  )
;; ---find-nearest:search-info-flag

(deftype search-info (structure)
  (
    (point vector :inline :offset-assert 0)
    (best-point vector :inline :offset-assert 16)
    (match-handle handle :offset-assert 32)
    (match basic :offset-assert 40)
    (best float :offset-assert 44)
    (radius float :offset-assert 48)
    (rating search-info-flag :offset-assert 52)
    (require search-info-flag :offset-assert 56)
    (mask search-info-flag :offset-assert 60)
    (rot-base vector :inline :offset-assert 64)
    (ack-point vector :inline :offset-assert 80)
    (rot-range float :offset-assert 96)
  )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )

(define-extern *search-info* search-info)
(define-extern find-nearest-attackable (function vector float uint uint vector vector float basic))
(define-extern find-nearest-focusable (function (array collide-shape) vector float search-info-flag search-info-flag vector vector float basic))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-arrow                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-arrow-params (structure)
  ((flags    uint32             :offset-assert 0)
   (map-icon uint16             :offset-assert 4)
   (pos      vector     :inline :offset-assert 16)
   (quat     quaternion :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype task-arrow (process-drawable)
  ((pos              vector             :inline :offset-assert 204)
   (theta            float                      :offset-assert 220)
   (phi              float                      :offset-assert 224)
   (dist             float                      :offset-assert 228)
   (smoothed-dist    float                      :offset-assert 232)
   (max-dist         float                      :offset-assert 236)
   (flags            uint32                     :offset-assert 240)
   (map-icon         uint16                     :offset-assert 244)
   (minimap          connection-minimap         :offset-assert 248)
   (hud-dist         uint64                     :offset-assert 252)
   (base-quat        quaternion         :inline :offset-assert 268)
   (rod-of-god-scale float                      :offset-assert 284)
   (moving           basic                      :offset-assert 288)
   )
  :method-count-assert 25
  :size-assert         #x128
  :flag-assert         #x1900b00128
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (leave () _type_ :state 22)
    (task-arrow-method-23 () none 23)
    (task-arrow-method-24 () none 24)
    )
  )
|#

;; (define-extern task-arrow-init-by-other function)
;; (define-extern task-arrow-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; projectile                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern cshape-reaction-projectile function)
;; (define-extern projectile-event-handler function)
;; (define-extern projectile-move-fill-all-dirs function)
;; (define-extern projectile-move-fill-line-sphere function)
;; (define-extern projectile-update-velocity-add-gravity function)
;; (define-extern projectile-update-velocity-space-wars function) ;; (function projectile none)
(define-extern projectile-init-by-other (function projectile-init-by-other-params projectile)) ;; (function entity-actor vector vector uint handle none :behavior projectile)
;; (define-extern projectile-bounce-update-velocity function)
;; (define-extern projectile-bounce-falling-post function)
;; (define-extern projectile-bounce-move function)
;; (define-extern projectile-bounce-reaction function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-handler                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-shoved function) ;; (function meters meters process (state object object target) object :behavior target)
;; (define-extern attack-mode-is-invinc function)
;; (define-extern target-attacked function) ;; (function symbol attack-info process process (state symbol attack-info target) object :behavior target)
;; (define-extern target-send-attack function) ;; (function process uint uint int int symbol :behavior target)
(define-extern target-generic-event-handler (function process int symbol event-message-block object :behavior target)) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-standard-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-dangerous-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-bonk-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-jump-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-walk-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
(define-extern target-exit (function none :behavior target))
;; (define-extern target-state-hook-exit function) ;; (function none :behavior target)
;; (define-extern target-effect-exit function) ;; (function none :behavior target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-anim                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-land-anim function)
;; (define-extern target-stance-anim function)
;; (define-extern target-stance-push function)
;; (define-extern target-falling-anim function) ;; (function time-frame time-frame symbol :behavior target)
;; (define-extern target-falling-anim-trans function) ;; (function none :behavior target)
;; (define-extern target-walk-anim function)
;; (define-extern target-hit-ground-flop-anim function)
;; (define-extern target-hit-ground-anim function) ;; (function symbol symbol :behavior target)
;; (define-extern target-attack-air-anim function)
;; (define-extern target-edge-grab-anim function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-falling-trans function) ;; (function basic time-frame none :behavior target)
;; (define-extern target-startup state) ;; (state target)
;; (define-extern target-stance state) ;; (state target)
;; (define-extern target-walk state) ;; (state target)
;; (define-extern target-turn-around state) ;; (state target)
;; (define-extern target-slide-down state) ;; (state target)
;; (define-extern *slide-down-mods* surface)
;; (define-extern *slide-jump-mods* surface)
;; (define-extern target-slide-down-to-ground state)
;; (define-extern init-var-jump function) ;; (function float float vector vector vector vector :behavior target)
;; (define-extern mod-var-jump function) ;; (function symbol symbol symbol vector vector :behavior target)
;; (define-extern *duck-mods* surface) ;; surface
;; (define-extern target-duck-stance state) ;; (state target)
;; (define-extern target-duck-walk state) ;; (state target)
;; (define-extern target-jump-top-anim function)
;; (define-extern target-jump state) ;; (state float float surface target)
;; (define-extern target-jump-forward state) ;; (state float float target)
;; (define-extern target-double-jump state) ;; (state float float target)
;; (define-extern target-high-jump state) ;; (state float float basic target)
;; (define-extern target-duck-high-jump state) ;; (state float float symbol target)
;; (define-extern target-duck-high-jump-jump state) ;; (state float float symbol target)
;; (define-extern target-falling state) ;; (state symbol target)
;; (define-extern target-hit-ground state) ;; (state symbol target)
;; (define-extern *attack-mods* surface) ;; surface
;; (define-extern *attack-end-mods* object)
;; (define-extern target-attack state) ;; (state target)
;; (define-extern *run-attack-mods* surface) ;; surface
;; (define-extern target-running-attack state) ;; (state target)
;; (define-extern *jump-attack-mods* surface) ;; surface
;; (define-extern target-attack-air state) ;; (state symbol target)
;; (define-extern *uppercut-mods* object)
;; (define-extern *uppercut-jump-mods* surface) ;; surface
;; (define-extern target-attack-uppercut state) ;; (state float float target)
;; (define-extern target-attack-uppercut-jump state) ;; (state float float target)
;; (define-extern target-flop state) ;; (state float float float target)
;; (define-extern target-flop-hit-ground state) ;; (state symbol target)
;; (define-extern target-roll state)
;; (define-extern target-roll-flip state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target2                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *trip-mods* object)
;; (define-extern target-load-wait state) ;; (state target)
;; (define-extern target-stance-ambient state) ;; (state target)
;; (define-extern target-stance-look-around state) ;; (state target)
;; (define-extern *look-around-mods* object)
;; (define-extern target-look-around state) ;; (state target)
;; (define-extern target-grab state) ;; (state target)
;; (define-extern target-pole-cycle state) ;; (state handle target)
;; (define-extern target-pole-flip-up state) ;; (state object object float target)
;; (define-extern target-pole-flip-up-jump state) ;; (state float float target)
;; (define-extern target-pole-flip-forward state) ;; (state float float float target)
;; (define-extern target-pole-flip-forward-jump state) ;; (state float float target)
;; (define-extern target-edge-grab state) ;; (state target)
;; (define-extern target-edge-grab-jump state) ;; (state float float target)
;; (define-extern target-edge-grab-off state) ;; (state target)
;; (define-extern *hit-ground-hard-mods* object)
;; (define-extern target-hit-ground-hard state) ;; (state float target)
;; (define-extern *hide-mods* surface)
;; (define-extern target-hide state)
;; (define-extern target-launch state) ;; (state float symbol vector int target)
;; (define-extern target-play-anim state) ;; (state string handle target)
(define-extern target-clone-anim (state handle target))
;; (define-extern *float-mods* object)
(define-extern target-float (state target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-swim                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-wade-stance state) ;; (state target)
;; (define-extern target-wade-walk state) ;; (state target)
;; (define-extern target-swim-tilt function) ;; (function float float float float float :behavior target)
;; (define-extern target-swim-stance state) ;; (state target)
;; (define-extern target-swim-walk state) ;; (state target)
;; (define-extern target-swim-down state) ;; (state target)
;; (define-extern target-swim-up state) ;; (state target)
;; (define-extern target-swim-jump-jump state) ;; (state float float surface target)
;; (define-extern target-swim-jump state) ;; (state float float target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-carry                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *carry-walk-mods* surface)
;; (define-extern *carry-jump-mods* surface)
;; (define-extern target-carry-update function)
;; (define-extern target-carry-post function)
;; (define-extern target-carry-pickup state)
;; (define-extern target-carry-drop state)
;; (define-extern target-carry-stance state)
;; (define-extern target-carry-walk state)
;; (define-extern target-carry-falling state)
;; (define-extern target-carry-hit-ground state)
;; (define-extern target-carry-jump state)
;; (define-extern target-carry-throw state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-darkjak                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern target-darkjak-setup (function symbol none :behavior target))
;; (define-extern want-to-darkjak? function)
;; (define-extern *darkjak-trans-mods* object)
;; (define-extern target-darkjak-end-mode function)
;; (define-extern target-darkjak-process function)
;; (define-extern target-darkjak-get-on state)
;; (define-extern target-darkjak-get-off state)
;; (define-extern target-darkjak-running-attack state)
;; (define-extern target-darkjak-bomb-collide function)
;; (define-extern target-darkjak-bomb0 state)
;; (define-extern target-bomb1-fire-shot function)
;; (define-extern target-darkjak-bomb1 state)
;; (define-extern target-darkjak-giant state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-death                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kill-nearby-enemies-info (UNKNOWN)
  ((dist float          :offset-assert 4)
   (pos  vector :inline :offset-assert 16)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *auto-continue* object) ;; symbol
;; (define-extern next-continue function)
(define-extern target-continue (state continue-point target))
;; (define-extern *smack-mods* surface) ;; surface
;; (define-extern *smack-up-mods* surface) ;; surface
;; (define-extern velocity-set-to-target! function) ;; (function vector float attack-info vector :behavior target)
;; (define-extern target-hit-effect function) ;; (function attack-info none :behavior target)
;; (define-extern target-hit-push function) ;; (function vector matrix float float attack-info object :behavior target)
;; (define-extern target-hit-orient function) ;; (function attack-info vector symbol :behavior target)
;; (define-extern target-hit-setup-anim function) ;; (function attack-info object :behavior target)
;; (define-extern target-hit-move function) ;; (function attack-info symbol (function none :behavior target) float none :behavior target)
;; (define-extern target-hit state) ;; (state symbol attack-info target)
;; (define-extern *death-spool-array* array) ;; (array spool-anim)
;; (define-extern death-movie-remap function) ;; (function int int int)
;; (define-extern *kill-nearby-enemies-info* kill-nearby-enemies-info)
;; (define-extern kill-nearby-enemies function)
;; (define-extern target-death-anim-trans function)
;; (define-extern target-death-anim function) ;; (function spool-anim none :behavior target)
;; (define-extern target-death-main function)
;; (define-extern target-death-reset function)
;; (define-extern target-death state) ;; (state symbol target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-gun                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *kernel-packages* object) ;; pair
;; (define-extern *gun-walk-mods* surface)
;; (define-extern target-gun-event-handler function)
(define-extern target-gun-setup (function symbol none :behavior target))
;; (define-extern target-gun-init function)
;; (define-extern target-gun-exit function)
(define-extern target-gun-end-mode (function none :behavior target))
;; (define-extern quat<-gun! function)
;; (define-extern target-gun-ammo-out-pick function)
;; (define-extern target-gun-type-set! function)
;; (define-extern target-gun-marking-menu function)
;; (define-extern target-gun-build-track-list function)
;; (define-extern target-gun-find-track function)
;; (define-extern target-top-anim-base-mode function)
;; (define-extern target-gun-combo-start function)
(define-extern target-gun-joint-pre0 (function none :behavior target))
(define-extern target-gun-joint-pre (function none :behavior target))
(define-extern target-gun-compute-pos (function matrix :behavior target))
(define-extern target-gun-joint-points (function none :behavior target))
;; (define-extern target-gun-fire function)
(define-extern target-gun-check (function none :behavior target))
;; (define-extern camera-rotate-to-vector function)
;; (define-extern target-gun-real-post function)
;; (define-extern target-gun-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-util                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gun-eject (projectile-bounce)
  ()
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    )
  )

(deftype gun-mag-yellow (projectile-bounce)
  ()
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    )
  )

(deftype gun-mag-red (projectile-bounce)
  ()
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    )
  )

(deftype gun-mag-blue (projectile-bounce)
  ()
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    )
  )

(deftype gun-mag-dark (projectile-bounce)
  ()
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    )
  )

(deftype beam-info (structure)
  ((y-scale float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern *beam-info* beam-info)
(define-extern birth-func-setup-beam (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-laser-pointer (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern draw-beam (function sparticle-launcher vector vector symbol symbol none)) ;; probably wrong args
(define-extern gun-post (function none :behavior gun))
(define-extern gun-init (function none :behavior gun))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-blue-shot                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-blue-shot (projectile)
  ((init-pos       vector :inline :offset-assert 476)
   (init-dir       vector :inline :offset-assert 492)
   (collide-normal vector :inline :offset-assert 508)
   )
  :method-count-assert 40
  :size-assert         #x210
  :flag-assert         #x2801900210
  (:methods
    )
  )
|#

;; (define-extern target-gun-fire-blue function)
;; (define-extern gun-blue-shot-move function)
;; (define-extern cshape-reaction-blue-shot function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-yellow-shot                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gun-yellow-shot (projectile)
  ((hit-actor? symbol         :offset-assert 472)
   (tail-pos   vector :inline :offset-assert 480)
   (hit-pos    vector :inline :offset-assert 496)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )

(define-extern target-gun-fire-yellow (function none :behavior target))
;; (define-extern someone-fire-yellow function)
;; (define-extern gun-yellow-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-red-shot                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-red-shot (process-drawable)
  ((probe-count int32           :offset-assert 196)
   (probe-mask  uint32          :offset-assert 200)
   (actor-count int32           :offset-assert 204)
   (attack-id   uint32          :offset-assert 208)
   (start-pos   vector  :inline :offset-assert 220)
   (start-dir   vector  :inline :offset-assert 236)
   (start-rot   vector  :inline :offset-assert 252)
   (probe-dir   UNKNOWN 19      :offset-assert 268)
   )
  :method-count-assert 30
  :size-assert         #x240
  :flag-assert         #x1e01c00240
  (:methods
    (blocked () _type_ :state 20)
    (debug-idle () _type_ :state 21)
    (idle () _type_ :state 22)
    (gun-red-shot-method-23 () none 23)
    (gun-red-shot-method-24 () none 24)
    (gun-red-shot-method-25 () none 25)
    (gun-red-shot-method-26 () none 26)
    (gun-red-shot-method-27 () none 27)
    (gun-red-shot-method-28 () none 28)
    (gun-red-shot-method-29 () none 29)
    )
  )
|#

;; (define-extern target-gun-fire-red function)
;; (define-extern gun-red-shot-event-handler function)
;; (define-extern gun-red-shot-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dark-shot                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-dark-shot (projectile)
  ((blast-radius  float           :offset-assert 468)
   (core-position vector  :inline :offset-assert 476)
   (core-velocity vector  :inline :offset-assert 492)
   (spin-vector   vector  :inline :offset-assert 508)
   (track-target  uint64          :offset-assert 524)
   (size-t        float           :offset-assert 532)
   (result-array  UNKNOWN 16      :offset-assert 540)
   (charge-sound  uint32          :offset-assert 668)
   (fire-sound    uint32          :offset-assert 672)
   (trail-sound   uint32          :offset-assert 676)
   (explode-sound uint32          :offset-assert 680)
   (start-pilot?  basic           :offset-assert 684)
   )
  :method-count-assert 42
  :size-assert         #x2b4
  :flag-assert         #x2a024002b4
  (:methods
    (startup () _type_ :state 40)
    (fizzle () _type_ :state 41)
    )
  )
|#

;; (define-extern target-gun-fire-dark function)
;; (define-extern process-drawable-shock-effect-bullseye function)
;; (define-extern gun-dark-shot-init-fizzle function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-gun-stance state)
;; (define-extern target-gun-walk state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-util                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern board-post (function none :behavior board))
(define-extern board-init (function none :behavior board))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-board                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *board-walk-mods* surface)
(define-extern *board-duck-mods* surface)
(define-extern *board-air-mods* surface)
(define-extern *board-jump-mods* surface)
;; (define-extern *board-ride-jump-mods* surface)
(define-extern *board-duck-jump-mods* object)
(define-extern *board-spin-mods* object)
;; (define-extern *board-spin-post-mods* object)
;; (define-extern *board-flip-mods* object)
;; (define-extern *board-wall-kick-mods* surface)
;; (define-extern *board-halfpipe-mods* surface)
(define-extern *board-turn-to-mods* surface)
;; (define-extern *board-ride-mods* surface)
;; (define-extern *collide-edge-board-halfpipe-spec* object)
;; (define-extern target-board-handler function)
(define-extern target-board-setup (function symbol none :behavior target))
;; (define-extern target-board-init function)
;; (define-extern target-board-exit function)
;; (define-extern target-board-falling-anim-trans function)
;; (define-extern board-on-ground? function)
;; (define-extern target-board-smack-surface? function)
;; (define-extern board-add-thrust function)
;; (define-extern segment-array-vector->index function)
;; (define-extern segment-array-index->vector function)
;; (define-extern target-board-exit-check function)
;; (define-extern target-board-effect function)
;; (define-extern target-board-physics function)
;; (define-extern target-board-collision function)
(define-extern target-board-joint-points (function none :behavior target))
;; (define-extern target-board-pre-move function)
;; (define-extern target-board-real-post function)
;; (define-extern probe-test function)
;; (define-extern target-board-compute-edge function)
;; (define-extern board-ride-add-thrust function)
;; (define-extern target-board-ride-post function)
;; (define-extern target-board-post function)
;; (define-extern target-board-center-anim function)
;; (define-extern target-board-turn-anim function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern vector-vector-angle function)
;; (define-extern target-board-anim-trans function)
;; (define-extern target-board-spin-check function)
;; (define-extern target-board-halfpipe-trans function)
;; (define-extern target-board-resolve-points function)
;; (define-extern target-board-ground-check function)
;; (define-extern target-board-halfpipe-check function)
;; (define-extern target-board-jump-trans function)
;; (define-extern target-board-start state)
;; (define-extern target-board-stance state)
;; (define-extern target-board-duck-stance state)
;; (define-extern target-board-jump state)
;; (define-extern target-board-halfpipe state)
;; (define-extern target-board-falling state)
;; (define-extern target-board-jump-kick state)
;; (define-extern target-board-wall-kick state)
;; (define-extern target-board-flip state)
;; (define-extern target-board-hold state)
;; (define-extern target-board-trickx state)
;; (define-extern target-board-hit-ground state)
;; (define-extern target-board-turn-to state)
;; (define-extern target-board-ride-edge state)
;; (define-extern target-board-grenade state)
;; (define-extern target-board-get-on state)
;; (define-extern target-board-pegasus state)
;; (define-extern target-board-get-off state)
;; (define-extern target-board-grab state)
;; (define-extern target-board-clone-anim state)
;; (define-extern target-board-hit state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mech-info (basic)
  ((entity                basic                      :offset-assert 4)
   (hud                   uint64            1       :offset-assert 8) ;; handle?
   (mech-trans            vector             :inline :offset-assert 16)
   (mech-quat             vector             :inline :offset-assert 32)
   (mech-scale            vector             :inline :offset-assert 48)
   (engine-sound-id       uint32                     :offset-assert 64)
   (engine-sound-volume   float                      :offset-assert 68)
   (engine-sound-pitch    float                      :offset-assert 72)
   (thrust-sound-id       uint32                     :offset-assert 76)
   (drag-sound-id         uint32                     :offset-assert 80)
   (whine-sound-id        uint32                     :offset-assert 84)
   (mech-start-time       time-frame                     :offset-assert 88)
   (mech-time             time-frame                     :offset-assert 96)
   (no-get-off-time       time-frame                     :offset-assert 104)
   (stick-lock            basic                      :offset-assert 112)
   (stick-off             basic                      :offset-assert 116)
   (forward-vel           meters                     :offset-assert 120)
   (jump-thrust           meters                     :offset-assert 124)
   (jump-thrust-fuel      float                      :offset-assert 128)
   (unstuck-time          time-frame                     :offset-assert 136)
   (stuck-count           int32                      :offset-assert 144)
   (back-touch-point      vector             :inline :offset-assert 160)
   (back-touch-trans      vector             :inline :offset-assert 176)
   (back-touch-time       time-frame                     :offset-assert 192)
   (attack-id             uint32                     :offset-assert 200)
   (shield-value          float                      :offset-assert 204)
   (shield-max            float                      :offset-assert 208)
   (walk-anim-leg         int32                      :offset-assert 212)
   (state-impact?         symbol            1       :offset-assert 216)
   (state-impact          impact-control            1       :inline :offset-assert 224)
   (thruster-flame-width  meters                     :offset-assert 304)
   (thruster-flame-length meters                     :offset-assert 308)
   (thruster-local-pos    vector            2      :inline :offset-assert 320)
   (exhaust-local-pos     vector            2      :inline :offset-assert 352)
   (exhaust-local-dir     vector            2      :inline :offset-assert 384)
   (smoke-local-pos       vector            2      :inline :offset-assert 416)
   (smoke-local-vel       vector            2      :inline :offset-assert 448)
   (particle-system-2d    basic                      :offset-assert 480)
   (particle-system-3d    basic                      :offset-assert 484)
   (part-thruster         basic                      :offset-assert 488)
   (part-thruster-scale-x sp-field-init-spec         :offset-assert 492)
   (part-thruster-scale-y sp-field-init-spec         :offset-assert 496)
   (part-quat             quaternion                 :offset-assert 500)
   (part-vel              vector                     :offset-assert 504)
   )
  :method-count-assert 9
  :size-assert         #x1fc
  :flag-assert         #x9000001fc
  )

(define-extern *mech-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; menu                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type debug-menu basic)
(deftype debug-menu-context (basic)
  ((is-active     symbol                  :offset-assert 4) ;; guessed by decompiler
   (sel-length    int32                   :offset-assert 8)
   (sel-menu      debug-menu            8 :offset-assert 12) ;; guessed by decompiler
   (root-menu     debug-menu              :offset-assert 44) ;; guessed by decompiler
   (joypad-func   (function basic none)   :offset-assert 48) ;; guessed by decompiler
   (joypad-item   basic                   :offset-assert 52)
   (font          font-context            :offset-assert 56) ;; guessed by decompiler
   (is-hidden     symbol                  :offset-assert 60) ;; guessed by decompiler
   (joypad-number int32                   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  (:methods
   (new (symbol type) _type_ 0))
  )

(deftype debug-menu-node (basic)
  ((name          string      :offset-assert 4) ;; guessed by decompiler
   (parent        debug-menu  :offset-assert 8) ;; guessed by decompiler
   (refresh-delay int32       :offset-assert 12)
   (refresh-ctr   int32       :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(declare-type debug-menu-item debug-menu-node)
(deftype debug-menu (debug-menu-node)
  ((context       debug-menu-context  :offset-assert 20) ;; guessed by decompiler
   (selected-item debug-menu-item     :offset-assert 24) ;; guessed by decompiler
   (pix-width     int32               :offset-assert 28)
   (pix-height    int32               :offset-assert 32)
   (items         pair                :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  (:methods
   (new (symbol type debug-menu-context string) _type_ 0))
  )

(deftype debug-menu-item (debug-menu-node)
  ((id int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype debug-menu-item-submenu (debug-menu-item)
  ((submenu debug-menu  :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  (:methods
   (new (symbol type string debug-menu) _type_ 0))
  )

(deftype debug-menu-item-function (debug-menu-item)
  ((activate-func (function object object)  :offset-assert 24) ;; guessed by decompiler
   (hilite-timer  int8                      :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x1d
  :flag-assert         #x90000001d
  (:methods
   (new (symbol type string object (function object object)) _type_ 0))
  )

;; +++debug-h:debug-menu-msg
(defenum debug-menu-msg
  :type int32
  (activate 1)
  (deactivate 2)
  (update 3)
  (press 4)
  )
;; ---debug-h:debug-menu-msg

(deftype debug-menu-item-flag (debug-menu-item)
  ((activate-func (function object debug-menu-msg object)  :offset-assert 24) ;; guessed by decompiler
   (is-on         object                                   :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
   (new (symbol type string object (function object debug-menu-msg object)) _type_ 0))
  )

(deftype debug-menu-item-var (debug-menu-item)
  ((display-str      string                                           :offset-assert 24) ;; guessed by decompiler
   (grabbed-joypad-p symbol                                           :offset-assert 28) ;; guessed by decompiler
   (float-p          symbol                                           :offset-assert 32) ;; guessed by decompiler
   (range-p          symbol                                           :offset-assert 36) ;; guessed by decompiler
   (show-len         int32                                            :offset-assert 40)
   (inc-delay        int32                                            :offset-assert 44)
   (inc-delay-ctr    int32                                            :offset-assert 48)
   (step-delay-ctr   int32                                            :offset-assert 52)
   (inc-dir          int32                                            :offset-assert 56)
   (fval             float                                            :offset-assert 60)
   (fundo-val        float                                            :offset-assert 64)
   (frange-min       float                                            :offset-assert 68)
   (frange-max       float                                            :offset-assert 72)
   (fstart-inc       float                                            :offset-assert 76)
   (fstep            float                                            :offset-assert 80)
   (fprecision       int32                                            :offset-assert 84)
   (factivate-func   (function int debug-menu-msg float float float)  :offset-assert 88) ;; guessed by decompiler
   (ival             int32                                            :offset 60)
   (iundo-val        int32                                            :offset 64)
   (irange-min       int32                                            :offset 68)
   (irange-max       int32                                            :offset 72)
   (istart-inc       int32                                            :offset 76)
   (istep            int32                                            :offset 80)
   (ihex-p           symbol                                           :offset-assert 92) ;; guessed by decompiler
   (iactivate-func   (function int debug-menu-msg int int int)        :offset 88) ;; guessed by decompiler
   (ifloat-p         symbol                                           :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  (:methods
   (new (symbol type string int int) _type_ 0))
  )

;; +++debug-h:debug-menu-dest
(defenum debug-menu-dest
  :type int32
  (activation 0)
  (root 1)
  (open-menus 2)
  (current-selection 3))
;; ---debug-h:debug-menu-dest

(define-extern debug-menu-item-var-update-display-str (function debug-menu-item-var debug-menu-item-var)) ;;
(define-extern debug-menu-item-var-make-int (function debug-menu-item-var (function int debug-menu-msg int int int) int symbol int int symbol debug-menu-item-var))
(define-extern debug-menu-item-var-make-float (function debug-menu-item-var (function int debug-menu-msg float float float) float symbol float float int debug-menu-item-var))
(define-extern debug-menu-context-grab-joypad (function debug-menu-context basic (function basic none) symbol)) ;;
(define-extern debug-menu-context-release-joypad (function debug-menu-context symbol)) ;;
(define-extern debug-menu-item-get-max-width (function debug-menu-item debug-menu int)) ;;
(define-extern debug-menu-context-default-selection (function debug-menu-context symbol debug-menu-context)) ;;
(define-extern debug-menu-rebuild (function debug-menu debug-menu)) ;;
(define-extern debug-menu-context-set-root-menu (function debug-menu-context debug-menu debug-menu-context))
(define-extern debug-menu-append-item (function debug-menu debug-menu-node debug-menu-node))
(define-extern debug-menu-remove-all-items (function debug-menu debug-menu))
(define-extern debug-menu-func-decode (function object function)) ;;
(define-extern debug-menu-make-from-template (function debug-menu-context pair debug-menu-node))
(define-extern debug-menu-find-from-template (function debug-menu-context pair debug-menu))
(define-extern debug-menu-item-submenu-render (function debug-menu-item-submenu int int int symbol debug-menu-item-submenu)) ;;
(define-extern debug-menu-item-function-render (function debug-menu-item-function int int int symbol debug-menu-item-function)) ;;
(define-extern debug-menu-item-flag-render (function debug-menu-item-flag int int int symbol debug-menu-item-flag)) ;;
(define-extern debug-menu-item-var-render (function debug-menu-item-var int int int symbol debug-menu-item-var)) ;;
(define-extern debug-menu-item-render (function debug-menu-item int int int symbol debug-menu-item)) ;;
(define-extern debug-menu-render (function debug-menu int int debug-menu-node int debug-menu)) ;;
(define-extern debug-menu-context-render (function debug-menu-context debug-menu-context)) ;;
(define-extern debug-menu-context-select-next-or-prev-item (function debug-menu-context int debug-menu-context)) ;;
(define-extern debug-menu-context-select-new-item (function debug-menu-context int debug-menu-context)) ;;
(define-extern debug-menu-context-open-submenu (function debug-menu-context debug-menu basic)) ;;
(define-extern debug-menu-context-close-submenu (function debug-menu-context debug-menu-context)) ;;
(define-extern debug-menu-item-submenu-msg (function debug-menu-item-submenu debug-menu-msg debug-menu-item-submenu)) ;;
(define-extern debug-menu-item-function-msg (function debug-menu-item-function debug-menu-msg debug-menu-item-function)) ;;
(define-extern debug-menu-item-flag-msg (function debug-menu-item-flag debug-menu-msg debug-menu-item-flag)) ;;
(define-extern debug-menu-item-var-joypad-handler (function debug-menu-item-var debug-menu-msg debug-menu-item-var)) ;;
(define-extern debug-menu-item-var-msg (function debug-menu-item-var debug-menu-msg debug-menu-item-var)) ;;
(define-extern debug-menu-item-send-msg (function debug-menu-item debug-menu-msg debug-menu-item)) ;;
(define-extern debug-menu-send-msg (function debug-menu debug-menu-msg symbol debug-menu)) ;;
(define-extern debug-menu-context-send-msg (function debug-menu-context debug-menu-msg debug-menu-dest debug-menu-context))
(define-extern debug-menu-context-activate-selection (function debug-menu-context debug-menu-context)) ;;
(define-extern debug-menus-default-joypad-func (function debug-menu-context debug-menu-context)) ;;
(define-extern debug-menus-active (function debug-menu-context debug-menu-context)) ;;
(define-extern debug-menus-handler (function debug-menu-context debug-menu-context))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern sphere-cull (function vector symbol))
(define-extern guard-band-cull (function vector symbol))
(define-extern sphere-in-view-frustum? (function sphere symbol))
(define-extern line-in-view-frustum? (function vector vector symbol))
(define-extern vis-cull (function int symbol))
;; (define-extern vis-cull-debug function)
(define-extern error-sphere (function drawable-error string none))
(define-extern *edit-instance* string)
(define-extern *instance-mem-usage* memory-usage-block)
;; (define-extern find-instance-by-name-level function)
(define-extern find-instance-by-name (function string prototype-bucket))
;; (define-extern prototypes-game-visible-set! function)
;; (define-extern find-instance-by-index function) ;; (function type int bsp-header prototype-bucket)
(define-extern prototype-bucket-type (function prototype-bucket type))
(define-extern prototype-bucket-recalc-fields (function prototype-bucket prototype-bucket))
(define-extern print-prototype-list (function none))
;; (define-extern draw-instance-info function) ;; (function string none)
;; (define-extern set-shadow-by-name function)
;; (define-extern get-shadow-by-name function)
;; (define-extern teleport-camera-by-name function)
;; (define-extern dma-add-process-drawable function) ;; (function process-drawable draw-control symbol dma-buffer none)
(define-extern *hud-lights* vu-lights)
;; (define-extern dma-add-process-drawable-hud function) ;; (function process-drawable draw-control symbol dma-buffer none)
;; (define-extern add-process-drawable function) ;; (function process-drawable draw-control symbol dma-buffer none)
(define-extern foreground-engine-execute (function engine display-frame none))
;; (define-extern main-debug-hook function) ;; (function none)
;; (define-extern *debug-hook* object) ;; (function none)
(define-extern *add-sphere* symbol)
(define-extern *generic-effect-mode* int)
(define-extern foreground-initialize-engines (function none))
(define-extern foreground-execute-cpu-vu0-engines (function none))
(define-extern real-main-draw-hook (function none))
(define-extern main-draw-hook (function none))
(define-extern *draw-hook* (function none))
(define-extern default-init-buffer (function bucket-id gs-zbuf gs-test none))
(define-extern default-end-buffer (function bucket-id gs-zbuf gs-test none))
;; (define-extern screen-shot-scale function)
;; (define-extern screen-shot function)
(define-extern display-frame-start (function display int float none))
(define-extern display-frame-finish (function display display))
(define-extern determine-pause-mode (function int))
(define-extern display-sync (function display none))
(define-extern swap-display (function display none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-group                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-inline-array          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-tree                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prototype                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main-collide                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern drawable-sphere-box-intersect? function) ;; (function drawable bounding-box4w symbol)
;; (define-extern instance-sphere-box-intersect? function) ;; (function drawable instance-tie bounding-box4w symbol)
;; (define-extern instance-tfragment-add-debug-sphere function) ;; (function drawable instance-tie symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; video                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern set-video-mode function) ;; (function symbol none)
(define-extern get-video-mode (function symbol))
;; (define-extern set-aspect-ratio function) ;; (function symbol none)
;; (define-extern get-aspect-ratio function) ;; (function symbol)
;; (define-extern set-progressive-scan function)
;; (define-extern get-progressive-scan function)
(define-extern *smode2* int)
(define-extern set-graphics-mode (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-letterbox-frames (function time-frame none))
(define-extern letterbox (function none))
(define-extern set-blackout-frames (function time-frame none))
(define-extern blackout (function none))
(define-extern paused? (function symbol))
(define-extern movie? (function symbol))
(define-extern demo? (function symbol))
(define-extern *last-master-mode* symbol)
(define-extern set-master-mode (function symbol none))
(define-extern pause-allowed?  (function symbol))
(define-extern toggle-pause (function int))
(define-extern *screen-filter* screen-filter)
(define-extern *cheat-temp* (pointer int32))
(define-extern *master-exit* symbol)
(define-extern *progress-cheat* symbol)
(define-extern *first-boot* symbol)
(define-extern main-cheats (function int))
(define-extern end-display (function display none))
(define-extern display-loop-main (function display none))
(define-extern display-loop  (function int :behavior process))
(define-extern on (function symbol process))
(define-extern off (function int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-cache                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collide-puls-work (structure)
  ((ignore-pat pat-surface         :offset-assert 0) ;; guessed by decompiler
   (bsphere    sphere      :inline :offset-assert 16)
   (move-dist  vector      :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype lsmi-work (structure)
  ((best-u      float                 :offset-assert 0)
   (orig-best-u float                 :offset-assert 4)
   (action      uint32                :offset-assert 8)
   (cquery      collide-query :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )
|#

;; (define-extern test-closest-pt-in-triangle function) ;; (function collide-cache symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-debug                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype col-rend-filter (structure)
  ((show-pat-set   uint32  :offset-assert 0)
   (show-pat-clear uint32  :offset-assert 4)
   (event-mask     uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern col-rend-draw function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; relocate                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memory-usage                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype memory-usage-block (basic)
  ()
  :method-count-assert 12
  :size-assert         #x710
  :flag-assert         #xc00000710
  ;; Failed to read fields.
  (:methods
    (memory-usage-block-method-9 () none 9) ;; (reset! (_type_) _type_ 9)
    (memory-usage-block-method-10 () none 10) ;; (calculate-total (_type_) int 10)
    (memory-usage-block-method-11 () none 11) ;; (print-mem-usage (_type_ level object) none 11)
    )
  )
|#

(define-extern mem-size (function basic symbol int int))
;; (define-extern *max-dma* object) ;; int


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype actor-group (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  ;; Failed to read fields.
  )
|#


#|
(deftype debug-actor-info (basic)
  ((name    basic   :offset-assert 4)
   (handle  uint64  :offset-assert 8)
   (process basic   :offset-assert 16)
   (pid     int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

(define-extern *spawn-actors* symbol)
(define-extern *compact-actors* symbol)
(define-extern *vis-actors* symbol)
(define-extern entity-by-name (function string entity))
(define-extern entity-by-type (function type entity-actor))
(define-extern entity-by-aid (function uint entity))
;; (define-extern entity-actor-from-level-name function)
(define-extern entity-nav-mesh-by-aid (function actor-id entity-nav-mesh))
(define-extern nav-mesh-from-res-tag (function entity symbol int nav-mesh))
;; (define-extern entity-by-meters function) ;; (function float float float entity-actor)
;; (define-extern process-by-ename function) ;; (function string process)
;; (define-extern entity-process-count function) ;; (function symbol int)
;; (define-extern entity-count function) ;; (function int)
;; (define-extern entity-remap-names function) ;; (function pair none)
;; (define-extern process-status-bits function) ;; (function process symbol none)
;; (define-extern process-entity-set! function)
(define-extern process-task-mask (function process task-mask))
;; (define-extern update-actor-vis-box function) ;; (function process-drawable vector vector none)
;; (define-extern expand-bounding-box function)
;; (define-extern expand-vis-box-with-point function) ;; (function entity vector none)
;; (define-extern *debug-actor-info* debug-actor-info)
;; (define-extern *pid-string* object)
(define-extern debug-actor (function string none))
;; (define-extern draw-actor-marks function)
;; (define-extern init-entity function) ;; (function process entity-actor none)
;; (define-extern entity-deactivate-handler function) ;; (function process entity-actor none)
;; (define-extern check-for-rougue-process function)
;; (define-extern process-drawable-scale-from-entity! function)
(define-extern process-drawable-from-entity! (function process-drawable entity-actor none)) ;;
(define-extern reset-actors (function symbol none))
(define-extern reset-cameras (function none))
;; (define-extern entity-birth-no-kill function) ;; (function entity none)
;; (define-extern entity-task-complete-on function) ;; (function entity none)
;; (define-extern entity-task-complete-off function) ;; (function entity none)
(define-extern process-entity-status! (function process entity-perm-status symbol int)) ;;
;; (define-extern find-nearest-entity function)
;; (define-extern entity-speed-test function) ;; (function string none)
;; (define-extern dump-entity-remap function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; path                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vol                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern plane-volume-intersect-dist (function vector vector vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype nav-engine-spr-buffer (structure)
  ((mem-addr  uint32  :offset-assert 0)
   (mem-nav   uint32  :offset 0)
   (spr-addr  uint32  :offset-assert 4)
   (spr-nav   uint32  :offset 4)
   (q-size    uint32  :offset-assert 8)
   (i-nav     uint8   :offset-assert 12)
   (done      int8    :offset-assert 13)
   (nav-count int8    :offset-assert 14)
   (i-pass    int8    :offset-assert 15)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-engine (structure)
  ((spr-addr              uint32          :offset-assert 0)
   (nav-work-addr         uint32          :offset-assert 4)
   (nav-mesh-addr         nav-mesh        :offset-assert 8)
   (poly-array-addr       uint32          :offset-assert 12)
   (hash-sphere-addr      uint32          :offset-assert 16)
   (hash-buckets-addr     uint32          :offset-assert 20)
   (buf-nav-control-count int8            :offset-assert 24)
   (max-pass-count        int8            :offset-assert 25)
   (output-sphere-hash    uint8           :offset-assert 26)
   (work-buf-array        nav-engine-spr-buffer       3 :inline :offset-assert 28)
   (spr-work              nav-mesh-work   :offset 4)
   (mem-work              nav-mesh-work   :offset-assert 76)
   (spr-mesh              basic           :offset 8)
   (mem-mesh              nav-mesh           :offset-assert 80)
   (spr-poly-array        uint32          :offset 12)
   (mem-poly-array        (inline-array nav-poly)          :offset-assert 84)
   (hash-sphere-list      uint32          :offset 16)
   (hash-buckets          uint32          :offset 20)
   (to-spr-wait           uint32          :offset-assert 88)
   (from-spr-wait         uint32          :offset-assert 92)
   )
  :method-count-assert 22
  :size-assert         #x60
  :flag-assert         #x1600000060
  (:methods
    (inc-spr-addr! "Adds the given integer to `spr-addr` and returns it" (_type_ uint) uint 9)
    (nav-engine-method-10 (_type_ object) none 10)
    (nav-engine-method-11 (_type_) none 11)
    (nav-engine-method-12 (_type_ nav-mesh object) none 12)
    (nav-engine-method-13 (_type_) none 13)
    (nav-engine-method-14 (_type_) none 14)
    (nav-engine-method-15 (_type_) none 15)
    (update-nav-controls-in-spr (_type_) none 16)
    (nav-engine-method-17 (_type_ nav-engine-spr-buffer) none 17)
    (nav-engine-method-18 (_type_ nav-engine-spr-buffer) none 18)
    (nav-engine-method-19 (_type_ nav-engine-spr-buffer) none 19)
    (nav-engine-method-20 () none 20)
    (nav-engine-method-21 () none 21)
    )
  )

(define-extern *debug-nav-control-output* symbol)
(define-extern *debug-nav-control* symbol)
(define-extern *debug-nav-mesh-output* symbol)
(define-extern *debug-nav-ray* nav-ray) ;; nav-ray
(define-extern *debug-ray-offset* vector) ;; vector
(define-extern *debug-offset* vector) ;; vector
(define-extern *nav-mesh-work* nav-mesh-work)
(define-extern *default-nav-mesh* nav-mesh) ;; nav-mesh
(define-extern nav-mesh-connect-from-ent (function entity-nav-mesh none))
(define-extern connection-validate (function connection none))
(define-extern connection-list-validate (function (inline-array connection) none))
(define-extern nav-control-validate (function nav-control none))
(define-extern debug-validate-nav-poly (function nav-mesh-link nav-poly none))
(define-extern nav-dma-send-to-spr-no-flush (function object object object none))
(define-extern nav-dma-send-from-spr-no-flush (function none))
;; TODO - local vars and docstrings "Increments and returns the provided [[int]], if the value exceeds `2`, wrap back to `0`"
(define-extern inc-mod3 (function int int)) ;;
(define-extern nav-state-patch-pointers (function none))
(define-extern vu-point-triangle-intersection? (function vector vector vector vector symbol)) ;;
(define-extern poly-in-height-range? (function nav-poly float float symbol))
(define-extern init-ray-local (function nav-ray nav-poly vector vector none)) ;;
(define-extern init-ray-dir-local (function nav-ray nav-poly vector vector float none)) ;;
(define-extern nav-ray-test (function nav-mesh nav-poly vector vector meters)) ;;
(define-extern point-poly-distance-min (function nav-poly none))
(define-extern nav-mesh-route-table-bit-index (function nav-mesh uint int int))
(define-extern ray-ccw-line-segment-intersection? (function vector vector vector vector symbol)) ;;
(define-extern ray-line-segment-intersection? (function vector vector vector vector symbol)) ;;
(define-extern plane-height-at-xz-point (function plane vector float))
(define-extern nav-normal-from-3-points (function vector vector vector vector none))
(define-extern get-nav-mesh (function actor-id nav-mesh))
(define-extern find-nearest-nav-mesh (function vector float nav-mesh))
;; (define-extern point-to-poly-boundary
;;   "TODO - assertion:
;;    Assertion failed: 'std::isfinite(value)'
;;         Source: C:/Users/xtvas/Repositories/opengoal/jak-project/common/util/print_float.cpp:90"
;;   (function nav-poly object vector object none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-control                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype nav-control-cfs-work (structure)
  ((in-dir              vector  :inline :offset-assert 0)
   (right-dir           vector  :inline :offset-assert 16)
   (best-dir            vector  2       :inline :offset-assert 32) ;; guessed by decompiler
   (temp-dir            vector  2       :inline  :offset-assert 64) ;; guessed by decompiler
   (away-dir            vector  :inline :offset-assert 96)
   (best-dir-angle      degrees 2       :offset-assert 112) ;; guessed by decompiler
   (ignore-mask         uint64          :offset-assert 120)
   (initial-ignore-mask uint64          :offset-assert 128)
   (i-sphere            int32           :offset-assert 136)
   (i-first-sphere      int32           :offset-assert 140)
   (i-inside-sphere     int32           :offset-assert 144)
   (inside-sphere-dist  float           :offset-assert 148)
   (sign                float           :offset-assert 152)
   (travel-len          float           :offset-assert 156)
   (dist2               float           :offset-assert 160)
   (inside-dist         float           :offset-assert 164)
   (rand-angle          float           :offset-assert 168)
   (dir-update          basic           :offset-assert 172)
   (debug-offset        vector  :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(define-extern *nav-triangle-test-count* int) ;; int
(define-extern *nav-last-triangle-test-count* int) ;; int
(define-extern debug-nav-validate-current-poly (function nav-mesh nav-poly vector symbol))
(define-extern debug-report-nav-stats "Does nothing" (function none))
(define-extern get-nav-control
  "Given a [[process-drawable]] return the associated [[nav-control]] using either:
   - the provided `nav-mesh` arg
   - the `nav-mesh` associated with the [[process-drawable]]'s [[entity]]
   If no [[nav-mesh]] is set or found, set the [[entity]]'s [[entity-perm-status]] to TODO and return an error"
  (function process-drawable nav-mesh nav-control))
(define-extern add-nav-sphere
  "Adds the given [[sphere]] to the [[nav-control]]'s `sphere-array` so long as
   `max-spheres` is less than [[nav-control]]'s `sphere-count`"
  (function nav-control sphere int none))
(define-extern add-collide-shape-spheres (function nav-control collide-shape sphere none)) ;;
(define-extern circle-tangent-directions (function vector vector vector vector vector)) ;;
(define-extern circle-ray-intersection? (function vector vector float vector symbol))
(define-extern find-closest-circle-ray-intersection (function vector vector float int (inline-array vector) int int)) ;;
;; (define-extern compute-dir-parm function) ;; (function vector vector vector float)
;; (define-extern vector-rotate-y-sincos! function)
;; (define-extern test-xz-point-on-line-segment? function) ;; (function vector vector vector float symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; aligner                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-water-level-drop function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-and-die function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-and-die-motion function)
;; (define-extern check-water-level-above-and-die function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-motion function)
;; (define-extern part-water-splash-callback function) ;; (function part-tracker none)
;; (define-extern splash-spawn function) ;; (function basic basic int none)
;; (define-extern rings-water-spawn function)
;; (define-extern water-info<-region function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collectables                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collectable (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco-yellow (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco-red (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco-blue (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco-green (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype health (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype eco-pill (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype money (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gem (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype skill (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype fuel-cell (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype trick-point (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype skate-point (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype ammo-collectable (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype ammo (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype shield (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype upgrade-collectable (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype ecovent (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern initialize-eco-by-other function) ;; (function vector vector fact-info none :behavior eco)
;; (define-extern add-blue-shake function) ;; (function vector vector vector vector)
;; (define-extern check-blue-suck function) ;; (function process-drawable none :behavior eco-collectable)
;; (define-extern add-blue-motion function) ;; (function symbol symbol symbol symbol symbol :behavior eco-collectable)
;; (define-extern collectable-standard-event-handler function)
;; (define-extern money-init-by-other function) ;; (function vector vector fact-info entity-actor none :behavior money)
;; (define-extern money-init-by-other-no-bob function) ;; (function vector vector fact-info float entity-actor none :behavior money)
;; (define-extern *collectable-dummy-shadow-control* shadow-control)
;; (define-extern initialize-ammo-by-other function)
;; (define-extern initialize-upgrade-by-other function)
;; (define-extern birth-pickup-at-point function) ;; (function vector pickup-type float symbol process-tree fact-info (pointer process) :behavior process)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-control                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fail-mission-params (structure)
  ((message        uint8   :offset-assert 0)
   (flags          uint8   :offset-assert 1)
   (retry-continue basic   :offset-assert 4)
   (fail-continue  basic   :offset-assert 8)
   (reset-delay    uint32  :offset-assert 12)
   (task           uint8   :offset-assert 16)
   (fail-message   uint32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype fail-mission-control (basic)
  ((process          uint64  :offset-assert 8)
   (handle-init-hack basic   :offset-assert 8)
   )
  :method-count-assert 13
  :size-assert         #x10
  :flag-assert         #xd00000010
  (:methods
    (fail-mission-control-method-9 () none 9)
    (fail-mission-control-method-10 () none 10)
    (fail-mission-control-method-11 () none 11)
    (fail-mission-control-method-12 () none 12)
    )
  )
|#

#|
(deftype fail-mission (process)
  ((message        uint8   :offset-assert 124)
   (flags          uint8   :offset-assert 125)
   (retry-continue basic   :offset-assert 128)
   (fail-continue  basic   :offset-assert 132)
   (reset-delay    uint32  :offset-assert 136)
   (grabbed-time   time-frame  :offset-assert 140)
   (retry          basic   :offset-assert 148)
   (task           uint8   :offset-assert 152)
   (message-id     uint32  :offset-assert 156)
   (fail-message   uint32  :offset-assert 160)
   (stinger        uint32  :offset-assert 164)
   )
  :method-count-assert 17
  :size-assert         #xac
  :flag-assert         #x11003000ac
  (:methods
    (fail-mission-method-9 () none 9)
    (fail-mission-method-10 () none 10)
    (fail-mission-method-11 () none 11)
    (fail-mission-method-12 () none 12)
    (fail-mission-method-13 () none 13)
    (idle () _type_ :state 14)
    (resetting () _type_ :state 15)
    (fail-mission-method-16 () none 16)
    )
  )
|#

;; (define-extern *fail-mission-control* fail-mission-control)
;; (define-extern game-task-node->string function)
(define-extern update-task-masks (function symbol none))
(define-extern play-clean (function symbol none))
(define-extern play-task (function game-task symbol symbol string))
;; (define-extern restart-mission function)
;; (define-extern task-node-by-name function)
;; (define-extern task-resolution-close! function)
;; (define-extern task-close! function)
;; (define-extern task-closed? function) ;; (function game-task task-status symbol)
;; (define-extern open-task-nodes function)
(define-extern task-node-closed? (function game-task-node symbol))
(define-extern task-node-close! (function game-task none))
(define-extern task-node-open? (function game-task symbol))
(define-extern task-node-open! (function game-task none))
;; (define-extern task-node-reset function)
;; (define-extern task-node-dump function)
;; (define-extern fail-mission-init-by-other function)
;; (define-extern task-manager-init-by-other function)
;; (define-extern task-manager-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype scene-stage (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  ;; Failed to read fields.
  (:methods
    )
  )
|#

#|
(deftype subtitle-work (structure)
  ((draw-tmpl dma-gif-packet :inline :offset-assert 0)
   (color0    vector4w       :inline :offset-assert 32)
   (color1    vector4w       :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

;; (define-extern scene-decode-continue function)
;; (define-extern scene-lookup function)
;; (define-extern *subtitle-work* object)
;; (define-extern draw-subtitle-image function)
;; (define-extern process-drawable-draw-subtitles function)
(define-extern scene-player-init (function string symbol object none :behavior scene-player))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pov-camera                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern pov-camera-play-and-reposition function) ;; (function art-joint-anim vector float none :behavior pov-camera)
;; (define-extern pov-camera-init-by-other function) ;; (function vector skeleton-group string pov-camera-flag process-drawable pair none :behavior pov-camera)
;; (define-extern othercam-calc function) ;; (function float none)
;; (define-extern othercam-running state) ;; (state othercam)
;; (define-extern othercam-init-by-other function) ;; (function process-taskable symbol symbol symbol none :behavior othercam)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; powerups                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern cloud-track function) ;; (function process-tree process-tree (function vector none) time-frame time-frame time-frame none :behavior process)
;; (define-extern eco-blue-glow function) ;; (function vector none)
;; (define-extern target-eco-process function)
;; (define-extern target-color-effect-process function)
(define-extern target-powerup-process (function none :behavior target))
;; (define-extern target-powerup-effect function) ;; (function symbol none :behavior target)
;; (define-extern process-contact-action function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crates                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype crate-bank (basic)
  ((COLLIDE_YOFF           float  :offset-assert 4)
   (COLLIDE_RADIUS         float  :offset-assert 8)
   (DARKECO_EXPLODE_RADIUS float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype crate (process-focusable)
  ((smush              smush-control :inline :offset-assert 204)
   (base               vector        :inline :offset-assert 236)
   (look               symbol                :offset-assert 252) ;; guessed by decompiler
   (defense            symbol                :offset-assert 256) ;; guessed by decompiler
   (incoming-attack-id uint32                :offset-assert 260)
   (target             uint64                :offset-assert 268) ;; handle
   (child-count        int32                 :offset-assert 276)
   (victory-anim       spool-anim            :offset-assert 280) ;; guessed by decompiler
   )
  :method-count-assert 41
  :size-assert         #x120
  :flag-assert         #x2900a00120
  (:methods
    (hide () _type_ :state 27) ;; (params-set! (_type_ symbol symbol) none 27)
    (idle () _type_ :state 28) ;; (dummy-28 (_type_) none 28)
    (die () _type_ :state 29) ;; (smush-update! (_type_) none 29)
    (special-contents-die () _type_ :state 30)
    (bounce-on () _type_ :state 31)
    (notice-blue () _type_ :state 32)
    (carry () _type_ :state 33)
    (fall () _type_ :state 34)
    (crate-method-35 () none 35)
    (crate-method-36 () none 36)
    (crate-method-37 () none 37)
    (crate-method-38 () none 38)
    (crate-method-39 () none 39)
    (crate-method-40 () none 40)
    )
  )
|#

#|
(deftype pickup-spawner (crate)
  ((blocker entity-actor  :offset-assert 284) ;; guessed by decompiler
   )
  :method-count-assert 41
  :size-assert         #x124
  :flag-assert         #x2900b00124
  (:methods
    )
  )
|#

;; (define-extern *CRATE-bank* crate-bank) ;; crate-bank
;; (define-extern crate-post function) ;; (function int :behavior crate)
;; (define-extern crate-standard-event-handler function) ;; (function process int symbol event-message-block object :behavior crate)
;; (define-extern crate-init-by-other function) ;; (function entity vector symbol none :behavior crate)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-sprite-work (structure)
  ((adgif-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl dma-gif-packet :inline :offset-assert 32)
   (draw-tmpl   dma-gif-packet :inline :offset-assert 64)
   (box-tmpl    dma-gif-packet :inline :offset-assert 96)
   (box2-tmpl   dma-gif-packet :inline :offset-assert 128)
   (mask-tmpl   dma-gif-packet :inline :offset-assert 160)
   (line-tmpl   dma-gif-packet :inline :offset-assert 192)
   (scan-tmpl   dma-gif-packet :inline :offset-assert 224)
   (line-color  uint64                 :offset-assert 256)
   (scan-colors UNKNOWN        32      :offset-assert 272)
   (scanline    uint32                 :offset-assert 784)
   )
  :method-count-assert 9
  :size-assert         #x314
  :flag-assert         #x900000314
  )
|#

;; (define-extern *hud-sprite-work* object)
;; (define-extern hud-create-icon function)
;; (define-extern hud-hidden state) ;; (state hud)
;; (define-extern hud-arriving state) ;; (state hud)
;; (define-extern hud-in state) ;; (state hud)
;; (define-extern hud-leaving state) ;; (state int hud)
;; (define-extern hud-init-by-other function) ;; (function int none :behavior hud)
;; (define-extern hide-hud function) ;; (function none)
;; (define-extern enable-hud function) ;; (function none)
;; (define-extern hide-hud-quick function) ;; (function none)
;; (define-extern show-hud function) ;; (function none)
;; (define-extern hud-hidden? function) ;; (function symbol)
;; (define-extern set-hud-piece-position! function)
;; (define-extern set-as-offset-from! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud-classes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hud-skullgem* object)
(define-extern activate-hud (function target none)) ;; (function process none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-static                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-scene-info (basic)
  ((name     basic   :offset-assert 4)
   (continue basic   :offset-assert 8)
   (info     basic   :offset-assert 12)
   (text     uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  ;; field info uses ~A with a signed load
  )
|#

;; (define-extern *main-options* menu-option-list) ;; (array game-option)
;; (define-extern *main-options-debug* menu-option-list)
;; (define-extern *main-kiosk-options* menu-option-list)
;; (define-extern *main-demo-options* menu-option-list)
;; (define-extern *title* menu-option-list) ;; (array game-option)
;; (define-extern *unlocked-secrets* menu-option-list)
;; (define-extern *options* menu-option-list) ;; (array game-option)
;; (define-extern *game-options* menu-option-list) ;; (array game-option)
;; (define-extern *game-options-japan* menu-option-list) ;; (array game-option)
;; (define-extern *game-options-demo* menu-option-list) ;; (array game-option)
;; (define-extern *graphic-options* menu-option-list) ;; (array game-option)
;; (define-extern *graphic-title-options-pal* menu-option-list) ;; (array game-option)
;; (define-extern *sound-options* menu-option-list) ;; (array game-option)
;; (define-extern *quit-restart-options* menu-option-list)
;; (define-extern *load-save-options* menu-option-list)
;; (define-extern *save-options-title* menu-option-list) ;; (array game-option)
;; (define-extern *loading-options* menu-option-list)
;; (define-extern *insufficient-space-options* menu-option-list)
;; (define-extern *secrets-insufficient-space-options* menu-option-list)
;; (define-extern *insert-card-options* menu-option-list)
;; (define-extern *error-loading-options* menu-option-list)
;; (define-extern *error-auto-saving-options* menu-option-list)
;; (define-extern *card-removed-options* menu-option-list)
;; (define-extern *error-disc-removed-options* menu-option-list)
;; (define-extern *error-reading-options* menu-option-list)
;; (define-extern *icon-info-options* menu-option-list)
;; (define-extern *format-card-options* menu-option-list)
;; (define-extern *already-exists-options* menu-option-list)
;; (define-extern *create-game-options* menu-option-list)
;; (define-extern *video-mode-warning-options* menu-option-list)
;; (define-extern *video-mode-ok-options* menu-option-list)
;; (define-extern *progressive-mode-warning-options* menu-option-list)
;; (define-extern *progressive-mode-ok-options* menu-option-list)
;; (define-extern *quit-options* menu-option-list)
;; (define-extern *select-start-options* menu-option-list)
;; (define-extern *select-scene-options* menu-option-list)
;; (define-extern *bigmap-options* menu-option-list)
;; (define-extern *missions-options* menu-option-list)
;; (define-extern *highscores-options* menu-option-list)
;; (define-extern *secret-options* menu-option-list)
;; (define-extern *language-name-remap* array) ;; (array game-text-id)
;; (define-extern *stereo-mode-name-remap* array)
;; (define-extern *hud-ring-graphic-remap* array)
;; (define-extern *hud-ring-kiosk-graphic-remap* array)
;; (define-extern *hud-ring-demo-graphic-remap* array)
;; (define-extern *hud-select-scene-act1* array)
;; (define-extern *hud-select-scene-act2* array)
;; (define-extern *hud-select-scene-act3* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype progress-global-state (UNKNOWN)
  ((aspect-ratio-choice                  symbol           :offset-assert 4) ;; guessed by decompiler
   (video-mode-choice                    symbol           :offset-assert 8) ;; guessed by decompiler
   (yes-no-choice                        symbol           :offset-assert 12) ;; guessed by decompiler
   (on-off-choice                        basic            :offset-assert 16)
   (which-slot                           int32            :offset-assert 20)
   (starting-state                       progress-screen  :offset-assert 24) ;; guessed by decompiler
   (last-slot-saved                      int32            :offset-assert 28)
   (slider-backup                        float            :offset-assert 32)
   (language-backup                      uint64           :offset-assert 40) ;; language-enum
   (center-x-backup                      int32            :offset-assert 48)
   (center-y-backup                      int32            :offset-assert 52)
   (aspect-ratio-backup                  symbol           :offset-assert 56) ;; guessed by decompiler
   (last-slider-sound                    uint64           :offset-assert 64) ;; time-frame
   (video-mode-timeout                   uint64           :offset-assert 72)
   (progressive-mode-timeout             uint64           :offset-assert 80)
   (current-task-index                   int32            :offset-assert 88)
   (current-line-index                   int32            :offset-assert 92)
   (first-closed-line-index              int32            :offset-assert 96)
   (extra-text-state                     int32            :offset-assert 100)
   (current-task                         uint8            :offset-assert 104)
   (num-open-tasks-found                 int32            :offset-assert 108)
   (num-closed-tasks-found               int32            :offset-assert 112)
   (color-flash-counter                  int32            :offset-assert 116)
   (num-unlocked-secrets                 int32            :offset-assert 120)
   (game-options-item-selected           int32            :offset-assert 124)
   (game-options-item-picked             basic            :offset-assert 128)
   (game-options-last-move               uint64           :offset-assert 136)
   (game-options-vibrations              basic            :offset-assert 144)
   (game-options-subtitles               basic            :offset-assert 148)
   (game-options-language-index          int32            :offset-assert 152)
   (game-options-subtitle-language-index int32            :offset-assert 156)
   (graphic-options-item-selected        int32            :offset-assert 160)
   (graphic-options-item-picked          basic            :offset-assert 164)
   (graphic-options-last-move            uint64           :offset-assert 168)
   (graphic-options-aspect-ratio         basic            :offset-assert 176)
   (graphic-options-progressive-scan     basic            :offset-assert 180)
   (qr-options-item-selected             int32            :offset-assert 184)
   (qr-options-item-picked               basic            :offset-assert 188)
   (qr-options-last-move                 uint64           :offset-assert 192)
   (qr-options-restart                   basic            :offset-assert 200)
   (qr-options-quit                      basic            :offset-assert 204)
   (total-num-tasks                      int32            :offset-assert 208)
   (scene-player-act                     int32            :offset-assert 212)
   (stereo-mode-backup                   int32            :offset-assert 216)
   (secrets-unlocked                     basic            :offset-assert 220)
   (missions-total-spacing               float            :offset-assert 224)
   (clear-screen                         basic            :offset-assert 228)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype hud-ring-cell (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *progress-stack* object) ;; (pointer uint8)
(define-extern *progress-process* (pointer progress))
;; (define-extern *progress-state* progress-global-state) ;; progress-global-state
;; (define-extern *progress-save-info* object) ;; mc-slot-info
;; (define-extern min-max-wrap-around function)
;; (define-extern progress-intro-start function)
;; (define-extern hud-ring-cell-init-by-other function)
;; (define-extern progress-init-by-other function) ;; (function none :behavior progress)
;; (define-extern set-ring-position function)
(define-extern activate-progress (function process symbol none))
;; (define-extern deactivate-progress function) ;; (function none)
(define-extern hide-progress-screen (function none))
(define-extern progress-allowed? (function symbol))
;; (define-extern menu-update-purchase-secrets function)
;; (define-extern progress-trans function)
;; (define-extern begin-scan function)
;; (define-extern end-scan function)
;; (define-extern progress-post function)
;; (define-extern update-center-screen function)
;; (define-extern update-restart-quit function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-draw                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype print-highscore-obj (UNKNOWN)
  ((self        basic  :offset-assert 4)
   (index       int32  :offset-assert 8)
   (previous    basic  :offset-assert 12)
   (place       int32  :offset-assert 16)
   (score       float  :offset-assert 20)
   (game-score  basic  :offset-assert 24)
   (context     basic  :offset-assert 28)
   (local-scale float  :offset-assert 32)
   (interp      float  :offset-assert 36)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern progress-selected function)
;; (define-extern draw-percent-bar function) ;; (function int int float rgba none)
;; (define-extern draw-highlight function)
;; (define-extern draw-busy-loading function)
;; (define-extern draw-previous-next function)
;; (define-extern draw-up-down function)
;; (define-extern draw-missions-up-down function)
;; (define-extern draw-scene-up-down function)
;; (define-extern begin-scissor function)
;; (define-extern end-scissor function)
;; (define-extern begin-scissor-secret function)
;; (define-extern end-scissor-secret function)
;; (define-extern begin-scissor-missions function)
;; (define-extern end-scissor-missions function)
;; (define-extern begin-scissor-scene function)
;; (define-extern end-scissor-scene function)
;; (define-extern begin-scissor-level function)
;; (define-extern end-scissor-level function)
;; (define-extern print-language-name function) ;; (function int font-context int symbol font-context)
;; (define-extern unlocked-secret-menu? function)
;; (define-extern memcard-unlocked-secrets? function)
;; (define-extern num-unlocked-secret? function)
;; (define-extern print-menu-text function)
;; (define-extern draw-yes-no function)
;; (define-extern draw-continue-retry function)
;; (define-extern draw-savegame-box function)
;; (define-extern get-level-icon-id-01 function)
;; (define-extern get-level-icon-id-02 function)
;; (define-extern get-level-icon-id-03 function)
;; (define-extern get-level-icon-id-04 function)
;; (define-extern draw-decoration function)
;; (define-extern draw-missions-decoration function)
;; (define-extern draw-sound-options-decoration function)
;; (define-extern draw-decoration-secrets function)
;; (define-extern draw-decoration-load-save function)
;; (define-extern sort-task-node-result function)
;; (define-extern find-mission-text-at-index function)
;; (define-extern draw-secret-list function)
;; (define-extern draw-highscore-icon function)
;; (define-extern draw-highscore-cup function)
;; (define-extern get-highscore-score function)
;; (define-extern eval-highscore function)
;; (define-extern str-print-time function)
;; (define-extern print-highscore function)
;; (define-extern get-highscore-text function)
;; (define-extern get-highscore-text-sub function)
;; (define-extern get-highscore-icon function)
;; (define-extern get-highscore-type function)
;; (define-extern highscore-available? function)
;; (define-extern get-num-highscores function)
;; (define-extern get-next-highscore function)
;; (define-extern get-prev-highscore function)
;; (define-extern get-highscore-icon-scale function)
;; (define-extern get-highscore-icon-xoffset function)
;; (define-extern get-highscore-icon-yoffset function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern init-ocean-far-regs function) ;; (function none)
;; (define-extern draw-large-polygon-ocean function) ;; (function none)
;; (define-extern render-ocean-quad function) ;; (function (inline-array ocean-vertex) dma-buffer symbol)
;; (define-extern test-seq-read function)
;; (define-extern test-worst-read function)
;; (define-extern test-seq-write function)
;; (define-extern test-worst-write function)
;; (define-extern test-to-spr function)
;; (define-extern test-from-spr function)
;; (define-extern test-to-from-spr function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-vu0                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-vu0-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-texture                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-texture-vu1-block object) ;; vu-function
;; (define-extern check-normals function)
;; (define-extern generate-cloud-verts function)
;; (define-extern generate-cloud-nrms function)
;; (define-extern set-ocean-lk function)
;; (define-extern set-ocean-normal-scale function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-mid                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-mid-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-transition               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-near                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-near-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; minimap                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype minimap-texture-name-array (structure)
  ((data UNKNOWN 35 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )
|#

#|
(deftype minimap-corner-array (structure)
  ((data UNKNOWN 35 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )
|#

#|
(deftype engine-minimap (engine-pers)
  ()
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  ;; Failed to read fields.
  (:methods
    )
  )
|#

;; (define-extern *minimap-texture-name-array* object)
;; (define-extern *minimap-corner-array* object)
;; (define-extern *minimap* object)
;; (define-extern *minimap-class-list* object)
;; (define-extern lookup-minimap-texture-by-name function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bigmap-data                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *bigmap-compressed-layers* bigmap-compressed-layers)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bigmap                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *circle-mask-1x1-meter* array)
;; (define-extern *circle-mask-2x2-meters* array)
;; (define-extern *image-mask-table* object)
;; (define-extern *map-save-ptr* object)
(define-extern *bigmap* bigmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; eye                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *eye-work* object) ;; eye-work
;; (define-extern render-eyes-32 function)
;; (define-extern render-eyes-32-different function)
;; (define-extern render-eyes-64 function)
;; (define-extern render-eyes-64-different function)
;; (define-extern debug-eyes function)
(define-extern update-eyes (function none))
(define-extern get-eye-block (function int int int))
;; (define-extern convert-eye-data function) ;; (function eye uint float)
;; (define-extern merc-eye-anim function) ;; (function process-drawable none)
;; (define-extern set-eye-draw-flag function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glist-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype glst-node (structure)
  ((next glst-node  :offset-assert 0)
   (prev glst-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype glst-named-node (glst-node)
  ((privname string  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype glst-list (structure)
  ((head     glst-node  :offset-assert 0)
   (tail     glst-node  :offset-assert 4)
   (tailpred glst-node  :offset-assert 8)
   (numelem  int32      :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern glst-next (function glst-node glst-node))
(define-extern glst-prev (function glst-node glst-node))
(define-extern glst-head (function glst-list glst-node))
(define-extern glst-tail (function glst-list glst-node))
(define-extern glst-end-of-list? (function glst-node symbol))
(define-extern glst-start-of-list? (function glst-node symbol))
(define-extern glst-empty? (function glst-list symbol))
(define-extern glst-node-name "Returns the `privname` of the provided [[glst-named-node]]" (function glst-named-node string))
(define-extern glst-set-name! "Sets the `privname` of the provided [[glst-named-node]]" (function glst-named-node string string))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glist                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern glst-num-elements "Returns `numelem` from the provided [[glst-list]]" (function glst-list int))
(define-extern glst-remove "Removes the provided [[glst-node]] from the list and returns it back" (function glst-list glst-node glst-node))
(define-extern glst-remove-tail
  "Removes the tail of the [[glst-list]], returns #f if the list is empty, otherwise returns the [[glst-node]] that was removed"
  (function glst-list glst-node))
(define-extern glst-remove-head
  "Removes the head of the [[glst-list]], returns #f if the list is empty, otherwise returns the [[glst-node]] that was removed"
  (function glst-list glst-node))
(define-extern glst-insert-before "Inserts `new` before `curr`, returns the newly inserted [[glst-node]]" (function glst-list glst-node glst-node glst-node))
(define-extern glst-insert-after "Inserts `new` after `curr`, returns the newly inserted [[glst-node]]" (function glst-list glst-node glst-node glst-node))
(define-extern glst-add-tail "Adds the provided [[glst-node]] to the end of the [[glst-list]]" (function glst-list glst-node glst-node))
(define-extern glst-add-head "Adds the provided [[glst-node]] to the beginning of the [[glst-list]]" (function glst-list glst-node glst-node))
(define-extern glst-init-list! "Clears the provided [[glst-list]]" (function glst-list glst-list))
(define-extern glst-find-node-by-name
  "Returns the [[glst-named-node]] by examining it's `privname`, returns #f if nothing is found"
  (function glst-list string glst-node))
(define-extern glst-get-node-by-index
  "Returns the [[glst-node]] by index, returns #f if nothing is found"
  (function glst-list int glst-node))
(define-extern glst-length-of-longest-name "Returns the length of the longest `privname`" (function glst-list int))
(define-extern glst-get-node-index "Given a [[glst-node]] return it's position in the [[glst-list]]" (function glst-list glst-node int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; anim-tester                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype list-control (structure)
  ((listfunc             (function int list-control symbol)  :offset-assert 0)
   (list-owner           uint32     :offset-assert 4)
   (top                  int32      :offset-assert 8)
   (left                 int32      :offset-assert 12)
   (list                 glst-list  :offset-assert 16)
   (the-node             glst-node  :offset-assert 20)
   (top-index            int32      :offset-assert 24)
   (the-index            int32      :offset-assert 28)
   (the-disp-line        int32      :offset-assert 32)
   (highlight-index      int32      :offset-assert 36)
   (current-index        int32      :offset-assert 40)
   (numlines             int32      :offset-assert 44)
   (lines-to-disp        int32      :offset-assert 48)
   (charswide            int32      :offset-assert 52)
   (highlight-disp-line  int32      :offset-assert 56)
   (field-id             int32      :offset-assert 60)
   (xpos                 int32      :offset-assert 64)
   (ypos                 int32      :offset-assert 68)
   (user-info            int32      :offset-assert 72)
   (user-info-u          uint32     :offset 72) ;; custom
   (return-int           int32      :offset-assert 76)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

#|
(deftype list-field (UNKNOWN)
  ((left  int32  :offset-assert 0)
   (width int32  :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype DISP_LIST-bank (UNKNOWN)
  ((V_SPACING     int32  :offset-assert 4)
   (BORDER_WIDTH  int32  :offset-assert 8)
   (BORDER_HEIGHT int32  :offset-assert 12)
   (MAX_LINES     int32  :offset-assert 16)
   (CHAR_WIDTH    int32  :offset-assert 20)
   (INC_DELAY     int32  :offset-assert 24)
   (BORDER_LINES  int32  :offset-assert 28)
   (CXOFF         int32  :offset-assert 32)
   (CYOFF         int32  :offset-assert 36)
   (BXOFF         int32  :offset-assert 40)
   (BYOFF         int32  :offset-assert 44)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype anim-tester-bank (UNKNOWN)
  ((ANIM_SPEED            float  :offset-assert 4)
   (BLEND                 float  :offset-assert 8)
   (OBJECT_LIST_X         int32  :offset-assert 12)
   (OBJECT_LIST_Y         int32  :offset-assert 16)
   (OBJECT_LIST_MIN_WIDTH int32  :offset-assert 20)
   (ANIM_LIST_X           int32  :offset-assert 24)
   (ANIM_LIST_Y           int32  :offset-assert 28)
   (ANIM_LIST_MIN_WIDTH   int32  :offset-assert 32)
   (PICK_LIST_X           int32  :offset-assert 36)
   (PICK_LIST_Y           int32  :offset-assert 40)
   (PICK_LIST_MIN_WIDTH   int32  :offset-assert 44)
   (EDIT_LIST_X           int32  :offset-assert 48)
   (EDIT_LIST_Y           int32  :offset-assert 52)
   (EDIT_STATS_X          int32  :offset-assert 56)
   (EDIT_LIST_MIN_WIDTH   int32  :offset-assert 60)
   (EDIT_PICK_X           int32  :offset-assert 64)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

(defenum anim-tester-flags
  :bitfield #t
  :type int32
  (fanimt0)
  (fanimt1)
  (fanimt2)
  (fanimt3)
  (fanimt4)
  (fanimt5)
  )

(defenum anim-tester-debug-flags
  :bitfield #t
  :type int32
  (unk0)
  (unk1)
  (unk2)
  (unk3)
  (at-show-joint-info)
  (at-apply-align)
  (unk6)
  )

(deftype anim-tester (process-drawable)
  ((flags        anim-tester-flags     :offset-assert 200)
   (debug-flags  anim-tester-debug-flags :offset-assert 204)
   (obj-list     glst-list     :inline :offset-assert 208)
   (current-obj  string                :offset-assert 224)
   (speed        int32                 :offset-assert 228)
   (list-con     list-control  :inline :offset-assert 232)
   (pick-con     list-control  :inline :offset-assert 312)
   (item-field   int64                 :offset-assert 392)
   (inc-delay    int32                 :offset-assert 400)
   (inc-timer    int32                 :offset-assert 404)
   (edit-mode    int32                 :offset-assert 408)
   (old-mode     int32                 :offset-assert 412)
   (anim-speed   float                 :offset-assert 416)
   (anim-gspeed  float                 :offset-assert 420)
   (anim-first   float                 :offset-assert 424)
   (anim-last    float                 :offset-assert 428)
   )
  :method-count-assert 20
  :size-assert         #x1b0
  :heap-base           #x130
  :flag-assert         #x14013001b0
  (:states
    anim-tester-process
    )
  )

#|
(deftype anim-test-obj (UNKNOWN)
  ((next          glst-node             :offset-assert 0)
   (prev          glst-node             :offset-assert 4)
   (privname      string                :offset-assert 8) ;; guessed by decompiler
   (obj-art-group art-group             :offset-assert 12) ;; guessed by decompiler
   (seq-list      glst-list     :inline :offset-assert 16)
   (flags         int32                 :offset-assert 32)
   (mesh-geo      merc-ctrl             :offset-assert 36) ;; guessed by decompiler
   (joint-geo     art-joint-geo         :offset-assert 40) ;; guessed by decompiler
   (list-con      list-control  :inline :offset-assert 44)
   (parent        uint32                :offset-assert 124)
   (anim-index    int32                 :offset-assert 128)
   (anim-hindex   int32                 :offset-assert 132)
   (seq-index     int32                 :offset-assert 136)
   (seq-hindex    int32                 :offset-assert 140)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype anim-test-sequence (UNKNOWN)
  ((next         glst-node             :offset-assert 0)
   (prev         glst-node             :offset-assert 4)
   (privname     string                :offset-assert 8) ;; guessed by decompiler
   (item-list    glst-list     :inline :offset-assert 12)
   (playing-item int32                 :offset-assert 28)
   (flags        int32                 :offset-assert 32)
   (list-con     list-control  :inline :offset-assert 36)
   (parent       anim-test-obj         :offset-assert 116)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype anim-test-seq-item (UNKNOWN)
  ((next        glst-node           :offset-assert 0)
   (prev        glst-node           :offset-assert 4)
   (privname    string              :offset-assert 8) ;; guessed by decompiler
   (speed       int32               :offset-assert 12)
   (blend       int32               :offset-assert 16)
   (first-frame float               :offset-assert 20)
   (last-frame  float               :offset-assert 24)
   (num-frames  float               :offset-assert 28)
   (artist-base float               :offset-assert 32)
   (flags       int32               :offset-assert 36)
   (parent      anim-test-sequence  :offset-assert 40)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *DISP_LIST-bank* DISP_LIST-bank) ;; DISP_LIST-bank
;; (define-extern display-list-control function) ;; (function list-control none)
;; (define-extern *ANIM_TESTER-bank* anim-tester-bank) ;; anim-tester-bank
;; (define-extern anim-tester-num-print function) ;; (function basic float none)
(define-extern *anim-tester* (pointer anim-tester))
;; (define-extern anim-test-obj-init function) ;; (function anim-test-obj list-control none)
;; (define-extern anim-test-sequence-init function) ;; (function anim-test-sequence anim-test-obj none)
;; (define-extern anim-test-seq-item-copy! function) ;; (function anim-test-seq-item anim-test-seq-item anim-test-sequence)
;; (define-extern anim-test-obj-item-valid? function) ;; (function anim-test-obj anim-test-seq-item symbol)
;; (define-extern anim-test-obj-remove-invalid function) ;; (function anim-test-obj symbol)
;; (define-extern anim-tester-real-post function) ;; (function none :behavior anim-tester)
;; (define-extern anim-tester-post function) ;; (function none :behavior anim-tester)
;; (define-extern anim-tester-update-anim-info function) ;; (function anim-test-seq-item float :behavior anim-tester)
;; (define-extern anim-tester-reset function) ;; (function none :behavior anim-tester)
;; (define-extern anim-tester-disp-frame-num function) ;; (function string float float font-context pointer)
;; (define-extern anim-tester-standard-event-handler function) ;; (function process int symbol event-message-block object :behavior anim-tester)
;; (define-extern anim-test-obj-list-handler function) ;; (function int list-control symbol)
;; (define-extern anim-test-anim-list-handler function) ;; (function int list-control symbol)
;; (define-extern anim-test-sequence-list-handler function) ;; (function int list-control symbol)
;; (define-extern anim-test-field-highlight-lw object) ;; (inline-array list-field)
;; (define-extern anim-tester-adjust-frame function) ;; (function float float float)
;; (define-extern anim-tester-pick-item-setup function) ;; (function anim-test-seq-item anim-test-sequence none)
;; (define-extern anim-test-seq-mark-as-edited function) ;; (function anim-test-sequence none)
;; (define-extern anim-test-edit-seq-insert-item function) ;; (function anim-test-seq-item anim-test-sequence none)
;; (define-extern anim-test-edit-sequence-list-handler function) ;; (function int list-control symbol)
;; (define-extern anim-tester-interface function) ;; (function none :behavior anim-tester)
;; (define-extern anim-tester-get-playing-item function) ;; (function anim-test-sequence anim-test-seq-item)
;; (define-extern anim-tester-process state) ;; (state anim-tester)
;; (define-extern initialize-anim-tester function) ;; (function none :behavior anim-tester)
;; (define-extern anim-tester-string-get-frame!! function) ;; (function list-field string symbol)
;; (define-extern anim-tester-load-object-seqs function) ;; (function anim-tester string symbol)
;; (define-extern anim-tester-save-object-seqs function) ;; (function anim-test-obj file-stream)
;; (define-extern anim-tester-save-all-objects function) ;; (function anim-tester symbol)
;; (define-extern anim-tester-add-newobj function) ;; (function anim-tester string art-group object)
;; (define-extern anim-tester-stop function) ;; (function symbol)
(define-extern anim-tester-start (function symbol))
(define-extern anim-tester-add-object (function string none))
;; (define-extern anim-tester-set-name function) ;; (function string object)
;; (define-extern anim-tester-add-sequence function) ;; (function string none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; viewer                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype viewer (process-drawable)
  ((janim art-joint-anim  :offset-assert 196) ;; guessed by decompiler
   )
  :method-count-assert 20
  :size-assert         #xcc
  :flag-assert         #x14005000cc
  (:methods
    )
  )
|#

;; (define-extern *viewer-sg* skeleton-group) ;; skeleton-group
;; (define-extern viewer-process state) ;; (state viewer)
;; (define-extern viewer-string object) ;; string
;; (define-extern viewer-ja-name object) ;; string
;; (define-extern viewer-geo-name object) ;; string
;; (define-extern actor-get-arg! function) ;; (function string string string symbol)
;; (define-extern art-part-name function) ;; (function string string)
;; (define-extern init-viewer function) ;; (function string object :behavior viewer)
;; (define-extern init-viewer-for-other function) ;; (function string vector none :behavior viewer)
;; (define-extern add-a-bunch function) ;; (function string int int float symbol)
;; (define-extern birth-viewer function) ;; (function process entity-actor object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; part-tester                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype part-tester (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *part-tester-name* object) ;; string
;; (define-extern part-tester-idle state) ;; (state part-tester)
;; (define-extern part-tester-init-by-other function) ;; (function vector none :behavior process-drawable)
;; (define-extern *debug-part-dead-pool* object) ;; dead-pool
;; (define-extern start-part function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++editable-h:editable-command
(defenum editable-command
  :type uint32
  :bitfield #f
  (none 0)
  (exit 1)
  (kill 2)
  (select-one 3)
  (select-toggle 4)
  (select-all 5)
  (select-none 6)
  (select-region 7)
  (select-face 8)
  (select-prim 9)
  (select-current-owner 10)
  (select-current-region 11)
  (select-current-face 12)
  (select-current-prim 13)
  (pick-target 14)
  (pick-loc 15)
  (pick-yes-no 16)
  (cancel 17)
  (drag-move-xy 18)
  (drag-move-xz 19)
  (drag-move-x 20)
  (drag-move-y 21)
  (drag-move-z 22)
  (drag-resize 23)
  (camera-tumble 24)
  (camera-xy 25)
  (camera-xz 26)
  (insert-sphere 27)
  (insert-point 28)
  (insert-sample 29)
  (insert-sample-camera 30)
  (insert-light 31)
  (insert-entity 32)
  (insert-face 33)
  (insert-plane 34)
  (insert-box 35)
  (delete 36)
  (copy 37)
  (resize 38)
  (snap-to-ground 39)
  (snap-xz 40)
  (snap-y 41)
  (flip-side 42)
  (region-set 43)
  (region-new 44)
  (edit-plane-set 45)
  (edit-plane-clear 46)
  (delete-region 47)
  (copy-region 48)
  (region-add 49)
  (save 50)
  (load 51)
  (update-game 52)
  (print-region-info 53)
  (refresh-filter 54)
  (rotate-level 55)
  (translate-y-level 56)
  )
;; ---editable-h:editable-command

;; +++editable-h:editable-filter
(defenum editable-filter
  :type uint32
  :bitfield #t
  (none 0)
  (unknown 1)
  (sound 2)
  (part 3)
  (user-setting 4)
  (cam-setting 5)
  (load 6)
  (water-command 7)
  (camera 8)
  (target 9)
  (water  10)
  (data  11)
  (city_vis  12)
  (sample  13)
  (light  14)
  (entity  15)
  (selected  16)
  )
;; ---editable-h:editable-filter

(deftype editable-region (basic)
  ((changed   symbol   :offset-assert 4)
   (locked    symbol   :offset-assert 8)
   (id        uint64  :offset-assert 16)
   (filter    editable-filter  :offset-assert 24)
   (tree      string   :offset-assert 28)
   (level     string   :offset-assert 32)
   (on-enter  string   :offset-assert 36)
   (on-inside string   :offset-assert 40)
   (on-exit   string   :offset-assert 44)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (new (symbol type) _type_ 0) ;; added to avoid re-definition errors (even though nothing was being re-defined)
    (editable-region-method-9 () none 9)
    (editable-region-method-10 (_type_ int) symbol 10)
    (editable-region-method-11 (_type_ vector int) none 11)
    (editable-region-method-12 (_type_) editable-filter 12)
    )
  )

;; +++editable-h:editable-flag
(defenum editable-flag
  :type uint32
  :bitfield #t
  (selected)
  (no-save)
  (orient)
  (x)
  (y)
  (z)
  (no-plane-snap)
  (no-update)
  (mark)
  (top-set)
  (bot-set)
  (changed)
  )
;; ---editable-h:editable-flag

(declare-type editable-array basic)
(deftype editable (basic)
  (
    (flags editable-flag :offset-assert 4)
    (name string :offset-assert 8)
    (id uint32 :offset-assert 12)
    (region editable-region :offset-assert 16) ;; or symbol?
    (owner pair :offset-assert 20) ;; command-list?
  )
  :method-count-assert 30
  :size-assert         #x18
  :flag-assert         #x1e00000018
  (:methods
    (get-color
      "Returns the [[rgba]] that corresponds to the type of [[editable]] TODO - document the colors"
      (_type_ int) rgba 9)
    (editable-method-10 (_type_) none 10)
    (editable-method-11 (_type_ vector) symbol 11)
    (select-editable! (_type_ symbol) none 12)
    (edit-get-distance "Returns the distance from the camera to the [[editable]], or -1.0" (_type_ vector) float 13)
    (edit-get-trans "Returns the `trans` [[vector]] or [[*null-vector*]]" (_type_) vector 14)
    (editable-method-15 (_type_ vector int) none 15)
    (edit-coord! (_type_ vector editable-flag) none 16)
    (editable-method-17 (_type_ vector) none 17)
    (editable-method-18 (_type_ vector matrix) none 18)
    (editable-method-19 (_type_ vector) none 19)
    (editable-method-20 (_type_ vector vector vector vector) none 20)
    (editable-method-21 (_type_ editable-region) none 21)
    (editable-method-22 (_type_ editable-array int int) symbol 22)
    (editable-method-23 (_type_) symbol 23)
    (editable-method-24 (_type_) none 24)
    (editable-method-25 (_type_ editable-array) none 25)
    (editable-method-26 (_type_ editable editable-array) none 26)
    (editable-method-27 (_type_ editable-array) editable 27)
    (editable-method-28 (_type_ editable-filter) none 28)
    (editable-method-29 (_type_ editable-filter) symbol 29)
    )
  )

(declare-type editable-player process-drawable)
(declare-type editable-plane editable)
(deftype editable-array (basic)
  (
    (allocated-length int32 :offset-assert 4)
    (length int32 :offset-assert 8)
    (region editable-region :offset-assert 12)
    (backup-region editable-region :offset-assert 16)
    (region-lock? symbol :offset-assert 20)
    (move-lock? symbol :offset-assert 24)
    (move-speed float :offset-assert 28)
    (selection (array editable) :offset-assert 32)
    (filter editable-filter 2 :offset-assert 36)
    (target editable :offset-assert 44)
    (target-mode uint32 :offset-assert 48) ;; enum?
    (target-command basic :offset-assert 52) ;; editable-command?
    (target-message string :offset-assert 56)
    (edit-plane editable-plane :offset-assert 60)
    (edit-plane-center vector :inline :offset-assert 64)
    (edit-plane-normal vector :inline :offset-assert 80)
    (level-offset vector :inline :offset-assert 96)
    (level-info-id uint32  :offset-assert 112)
    (level uint32 :offset-assert 116) ;; symbol?
    (edit-param0 float :offset-assert 120)
    (data editable :dynamic :offset-assert 124)
  )
  :method-count-assert 18
  :size-assert         #x7c
  :flag-assert         #x120000007c
  (:methods
    (new (symbol type int) _type_ 0)
    (editable-array-method-9 (_type_ editable-command editable-array) symbol :behavior editable-player 9)
    (editable-array-method-10 (_type_ vector int) editable 10)
    (editable-array-method-11 (_type_) int 11)
    (editable-array-method-12 (_type_ editable-array) none 12)
    (editable-array-method-13 (_type_ uint basic string) none 13)
    (editable-array-method-14 (_type_ (function symbol) symbol) none 14)
    (editable-array-method-15 (_type_ editable) none 15)
    (editable-array-method-16 (_type_) none 16)
    (editable-array-method-17 (_type_ vector vector) vector 17)
    )
  )

(deftype editable-point (editable)
  (
    (radius float :offset-assert 24)
    (trans vector :inline :offset-assert 32)
  )
  :method-count-assert 30
  :size-assert         #x30
  :flag-assert         #x1e00000030
  (:methods
    (new (symbol type vector editable-region) _type_ 0))
  )

(deftype editable-sphere (editable-point)
  ()
  :method-count-assert 30
  :size-assert         #x30
  :flag-assert         #x1e00000030
  (:methods
    (new (symbol type vector float editable-region) _type_ 0)))

(deftype editable-sample (editable-point)
  ()
  :method-count-assert 30
  :size-assert         #x30
  :flag-assert         #x1e00000030)

(deftype editable-light (editable-sphere)
  (
    (direction vector :inline :offset-assert 48)
    (color vector :inline :offset-assert 64)
    (decay-start float :offset-assert 80)
    (ambient-point-ratio float :offset-assert 84)
    (brightness float :offset-assert 88)
  )
  :method-count-assert 30
  :size-assert         #x5c
  :flag-assert         #x1e0000005c
  (:methods
    (new (symbol type vector float editable-region) _type_ 0)))

(deftype editable-entity (editable-point)
  ()
  :method-count-assert 30
  :size-assert         #x30
  :flag-assert         #x1e00000030)

(deftype editable-face (editable)
  (
    (length int32 :offset-assert 24)
    (normal vector :inline :offset-assert 32)
    (center vector :inline :offset-assert 48)
    (vertex editable-point 6 :offset-assert 64)
  )
  :method-count-assert 32
  :size-assert         #x58
  :flag-assert         #x2000000058
  (:methods
    (new (symbol type editable-region) _type_ 0)
    (editable-face-method-30 (_type_ (inline-array vector)) int 30)
    (editable-face-method-31 (_type_ vector) vector 31)
    )
  )

(deftype editable-plane (editable)
  (
    (length int32 :offset-assert 24)
    (radius float :offset-assert 28)
    (vertex editable-point 2 :offset-assert 32)
  )
  :method-count-assert 32
  :size-assert         #x28
  :flag-assert         #x2000000028
  (:methods
    (new (symbol type editable-region) _type_ 0)
    (editable-plane-method-30 (_type_ matrix) int 30)
    (editable-plane-method-31 (_type_ vector) vector 31)
    )
  )

(deftype editable-player (process-drawable)
  ((current           editable-array     :offset-assert 200)
   (select-command    function    :offset-assert 204)
   (move-command      function    :offset-assert 208)
   (extra-command     function    :offset-assert 212)
   (left-handed       basic     :offset-assert 216)
   (light-names       basic     :offset-assert 220)
   (external-cam-mode symbol     :offset-assert 224)
   (command           function 6 :offset-assert 228)
   (close-menu-time   time-frame    :offset-assert 256)
   )
  :method-count-assert 22
  :size-assert         #x108
  :flag-assert         #x1600900108
  (:methods
    (idle () _type_ :state 20)
    (editable-player-method-21 (_type_) none 21)
    )
  )

(deftype editable-work (basic)
  ((num-found  int16       :offset-assert 4)
   (last-found int16       :offset-assert 6)
   (last-x     float       :offset-assert 8)
   (last-y     float       :offset-assert 12)
   (found      editable 256 :offset-assert 16) ;; a guess
   (dists      uint32 256 :offset-assert 1040)
   )
  :method-count-assert 9
  :size-assert         #x810
  :flag-assert         #x900000810
  )

(define-extern *editable-temp-id* int)
(define-extern editable-command->string (function editable-command string)) ;; TODO - find a caller
(define-extern editable-filter->string (function editable-filter basic string)) ;; TODO - find a caller
(define-extern *editable-work* editable-work)
(define-extern *editable* (pointer editable-player))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern update-light-sphere-from-editable-light (function editable-light none))
(define-extern *editable-sample-region* editable-region)
(define-extern *editable-light-region* editable-region)
(define-extern *editable-entity-region* editable-region)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable-player                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cleanup-selection (function editable-array none))
(define-extern insert-box (function editable-array vector none))
(define-extern execute-select (function editable-array editable-command editable-array symbol))
(define-extern execute-mouse-move (function editable-array editable-command editable-array symbol))
(define-extern execute-move (function editable-array editable-command editable-array symbol))
(define-extern editable-player-init (function symbol none :behavior editable-player)) ;; TODO - return type not confirmed
(define-extern *editable-menu-context* debug-menu-context)
(define-extern editable-menu-command (function int none))
(define-extern editable-menu-command-no-close (function int none)) ;; TODO - whats the int
(define-extern dm-region-tree-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-editable-flag-pick-func (function editable-flag debug-menu-msg symbol))
(define-extern dm-editable-filter0-pick-func (function editable-filter debug-menu-msg symbol))
(define-extern dm-editable-filter1-pick-func (function editable-filter debug-menu-msg symbol))
(define-extern dm-editable-light-float-func (function object debug-menu-msg float symbol object))
(define-extern dm-cam-externalize2 (function symbol debug-menu-msg symbol))
(define-extern dm-editable-boolean-toggle-pick-func (function int debug-menu-msg none))
(define-extern editable-menu-context-make-menus (function debug-menu-context none))
(define-extern insert-sample-camera (function symbol none))
;; (define-extern *debug-hook* object) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mysql-nav-graph                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++mysql-nav-graph:mysql-save-flag
(defenum mysql-save-flag
  :type uint32
  :bitfield #t
  (delete 1)
  (update 2)
  (insert 3)
  )
;; ---mysql-nav-graph:mysql-save-flag

;; +++mysql-nav-graph:nav-node-flag
(defenum nav-node-flag
  "This string value is stored in their SQL database"
  :type uint32
  :bitfield #t
  (visited 0)
  (blocked 1)
  (pedestrian 2)
  (selected 3)
  (hidden 4))
;; ---mysql-nav-graph:nav-node-flag

(declare-type mysql-nav-edge structure)
(deftype mysql-nav-node (structure)
  ((mysql-save-flag  mysql-save-flag         :offset-assert 0)
   (runtime-id       uint32         :offset-assert 4)
   (temp-edge-list   (inline-array mysql-nav-edge)          :offset-assert 8)
   (level-node-index int32          :offset-assert 12)
   (cam-dist         float          :offset-assert 16)
   (visible          basic          :offset-assert 20)
   (nav_node_id      uint32         :offset-assert 24)
   (nav_graph_id     uint32         :offset-assert 28)
   (position         vector :inline :offset-assert 32)
   (level_name       symbol         :offset-assert 48)
   (angle            float          :offset-assert 52)
   (radius           float          :offset-assert 56)
   (nav_node_flag    nav-node-flag         :offset-assert 60)
   (nav_mesh_id      uint32         :offset-assert 64)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x44
  :flag-assert         #xb00000044
  (:methods
    (exec-sql!
      "Executes the respective SQL operation specified by `mysql-save-flag`, return value indicates success"
      (_type_) symbol 9)
    (temp-edge-size
      "Returns the number of [[mysql-nav-edge]] stored in the `temp-edge-list`"
      (_type_) int 10)
    )
  )

(deftype mysql-nav-node-array (inline-array-class)
  ((data             mysql-nav-node :dynamic :inline :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; +++mysql-nav-graph:nav-directionality
(defenum nav-directionality
  :type uint32
  :bitfield #f
  (default 0)
  (directed 1)
  (bi_directional 2))
;; ---mysql-nav-graph:nav-directionality

;; +++mysql-nav-graph:nav-clock-mask
(defenum nav-clock-mask
  "This string value is stored in their SQL database"
  :type uint32
  :bitfield #t
  (phase-1 0)
  (phase-1a 1)
  (phase-2 2)
  (phase-2a 3)
  (phase-3 4)
  (phase-3a 5)
  (phase-4 6)
  (phase-4a 7))
;; ---mysql-nav-graph:nav-clock-mask

;; +++mysql-nav-graph:nav-clock-type
(defenum nav-clock-type
  "This string value is stored in their SQL database"
  :type uint32
  :bitfield #f
  (no-clock 0)
  (clock2 1)
  (clock3 2)
  (clock4 3))
;; ---mysql-nav-graph:nav-clock-mask

;; +++mysql-nav-graph:nav-minimap-edge-flag
(defenum nav-minimap-edge-flag
  "This string value is stored in their SQL database"
  :type int32
  :bitfield #t
  (pass-red 0)
  (pass-green 1)
  (pass-yellow 2)
  (pass-blue 3))
;; ---mysql-nav-graph:nav-minimap-edge-flag

(deftype mysql-nav-edge (structure)
  ((mysql-save-flag   mysql-save-flag          :offset-assert 0)
   (runtime-id        uint32          :offset-assert 4)
   (runtime-node-id-1 int32           :offset-assert 8)
   (runtime-node-id-2 int32           :offset-assert 12)
   (temp-next-edge    mysql-nav-edge  :offset-assert 16)
   (nav_edge_id       uint32          :offset-assert 20)
   (nav_graph_id      uint32          :offset-assert 24)
   (nav_node_id_1     uint32          :offset-assert 28)
   (nav_node_id_2     uint32          :offset-assert 32)
   (directionality    nav-directionality          :offset-assert 36)
   (speed_limit       float           :offset-assert 40)
   (density           float           :offset-assert 44)
   (traffic_edge_flag int32           :offset-assert 48)
   (nav_clock_mask    nav-clock-mask          :offset-assert 52)
   (nav_clock_type    nav-clock-type          :offset-assert 56)
   (width             float           :offset-assert 60)
   (minimap_edge_flag nav-minimap-edge-flag           :offset-assert 64)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x44
  :flag-assert         #xa00000044
  (:methods
    (exec-sql!
      "Executes the respective SQL operation specified by `mysql-save-flag`, return value indicates success"
      (_type_) symbol 9))
  )

(deftype mysql-nav-edge-array (inline-array-class)
  ((data             mysql-nav-edge :dynamic :inline :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mysql-nav-visnode (structure)
  ((mysql-save-flag mysql-save-flag  :offset-assert 0)
   (runtime-node-id int32   :offset-assert 4)
   (runtime-edge-id int32   :offset-assert 8)
   (nav_visnode_id  uint32  :offset-assert 12)
   (nav_graph_id    uint32  :offset-assert 16)
   (nav_node_id     uint32  :offset-assert 20)
   (nav_edge_id     uint32  :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x1c
  :flag-assert         #xa0000001c
  (:methods
    (exec-sql!
      "Executes the respective SQL operation specified by `mysql-save-flag`, return value indicates success"
      (_type_) symbol 9))
  )

(deftype mysql-nav-visnode-array (inline-array-class)
  ((data             mysql-nav-visnode :dynamic :inline :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mysql-nav-graph-level-info (structure)
  ((level         basic   :offset-assert 0)
   (level-id      uint32  :offset-assert 4)
   (node-count    int32   :offset-assert 8)
   (branch-count  int32   :offset-assert 12)
   (to-link-count int32   :offset-assert 16)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype mysql-nav-graph (basic)
  ((nav_graph_id            uint32     :offset-assert 4)
   (node-array              mysql-nav-node-array      :offset-assert 8)
   (edge-array              mysql-nav-edge-array      :offset-assert 12)
   (visnode-array           mysql-nav-visnode-array      :offset-assert 16)
   (level-info-array-length int32      :offset-assert 20)
   (level-info-last-lookup  int32      :offset-assert 24)
   (level-info-array        mysql-nav-graph-level-info 32 :inline :offset-assert 28)
   )
  :method-count-assert 21
  :size-assert         #x41c
  :flag-assert         #x150000041c
  (:methods
    (new (symbol type int string) _type_ 0)
    (init-from-sql!
      "Query the database and initialize the [[mysql-nav-graph]] and all it's related components"
      (_type_ string string) symbol 9)
    (exec-sql! (_type_) symbol 10)
    (indexof-nav-node
      "Iterate through the `node-array` and return the index for the first [[mysql-nav-node]] whom's `nav_node_id` matches the provided id
       returns `-1` if none is found"
      (_type_ int) int 11)
    (indexof-nav-edge
      "Iterate through the `edge-array` and return the index for the first [[mysql-nav-edge]] whom's `nav_edge_id` matches the provided id
       returns `-1` if none is found"
      (_type_ int) int 12)
    (alloc-new-node!
      "Allocates a new `[[mysql-nav-node]]`, if `node-array`'s `length` exceeds `3000` return `-1`
       otherwise, return the new size of the array"
      (_type_) int 13)
    (alloc-new-edge!
      "Allocates a new `[[mysql-nav-edge]]`, if `edge-array`'s `length` exceeds `5000` return `-1`
       otherwise, return the new size of the array"
      (_type_) int 14)
    (indexof-visnode
      "Returns the index in the `visnode-array` whom's [[mysql-nav-visnode]] has the provided `runtime-edge-id` and `runtime-node-id`
       if none exist, return `-1`"
      (_type_ int int) int 15)
    (alloc-new-visnode!
      "Potentially allocates a new `[[mysql-nav-visnode]]`:
       - if `visnode-array`'s `length` exceeds `3000` return `-1`
       - otherwise, if the node already exists, TODO
         - if the node does not already exist, create it!"
      (_type_ int int) int 16)
    (mysql-nav-graph-method-17
      (_type_) none 17)
    (lookup-level-info2
      "TODO - this was originally called `lookup-level-info` but it clashes with the function defined in `level`"
      (_type_ mysql-nav-node symbol) mysql-nav-graph-level-info 18)
    (mysql-nav-graph-method-19 (_type_) none 19)
    (mysql-nav-graph-method-20 (_type_) none 20)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph-editor               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype nav-graph-command (structure)
  ((com-type uint32         :offset-assert 0)
   (id       int32          :offset-assert 4)
   (index    int32          :offset-assert 8)
   (move-vec vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype nav-graph-command-array (inline-array-class)
  ((data             nav-graph-command :dynamic :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-graph-editor (process)
  ((nav-graph           basic                  :offset-assert 128)
   (mode                uint32                 :offset-assert 132)
   (command-id          int32                  :offset-assert 136)
   (max-command         int32                  :offset-assert 140)
   (selected-index      int32                  :offset-assert 144)
   (selected-dist       float                  :offset-assert 148)
   (selected-node-edge? basic                  :offset-assert 152)
   (closest-node        int32                  :offset-assert 156)
   (dist-closest-node   float                  :offset-assert 160)
   (closest-edge        int32                  :offset-assert 164)
   (dist-closest-edge   float                  :offset-assert 168)
   (mouse-pos           vector         :inline :offset-assert 176)
   (mouse-hit           vector         :inline :offset-assert 192)
   (mouse-hit-pick      vector         :inline :offset-assert 208)
   (mouse-normal        vector         :inline :offset-assert 224)
   (mouse-spos-hold     vector         :inline :offset-assert 240)
   (edge-src            int32                  :offset-assert 256)
   (edge-dst            int32                  :offset-assert 260)
   (edge-visibility     int32                  :offset-assert 264)
   (vehicle-edit-mode   basic                  :offset-assert 268)
   (hover-edit-mode     basic                  :offset-assert 272)
   (clipping-dist       float                  :offset-assert 276)
   (plane-height        float                  :offset-assert 280)
   (plane-height-hold   float                  :offset-assert 284)
   (default-node        mysql-nav-node :inline :offset-assert 288)
   (default-edge        mysql-nav-edge :inline :offset-assert 356)
   (command-array       basic                  :offset-assert 424)
   )
  :method-count-assert 64
  :size-assert         #x1ac
  :flag-assert         #x40013001ac
  (:methods
    (move-node () _type_ :state 14)
    (move-plane () _type_ :state 15)
    (create () _type_ :state 16)
    (edit-edge () _type_ :state 17)
    (create-edge () _type_ :state 18)
    (adjust-plane () _type_ :state 19)
    (adjust-it () _type_ :state 20)
    (adjust-minimap () _type_ :state 21)
    (adjust-node-angle () _type_ :state 22)
    (adjust-node-radius () _type_ :state 23)
    (adjust-edge-visibility () _type_ :state 24)
    (adjust-edge-width () _type_ :state 25)
    (adjust-edge-density () _type_ :state 26)
    (draw-closest-minimap () _type_ :state 27)
    (nav-graph-editor-method-28 () none 28)
    (nav-graph-editor-method-29 () none 29)
    (nav-graph-editor-method-30 () none 30)
    (nav-graph-editor-method-31 () none 31)
    (nav-graph-editor-method-32 () none 32)
    (nav-graph-editor-method-33 () none 33)
    (nav-graph-editor-method-34 () none 34)
    (nav-graph-editor-method-35 () none 35)
    (nav-graph-editor-method-36 () none 36)
    (nav-graph-editor-method-37 () none 37)
    (nav-graph-editor-method-38 () none 38)
    (nav-graph-editor-method-39 () none 39)
    (nav-graph-editor-method-40 () none 40)
    (nav-graph-editor-method-41 () none 41)
    (nav-graph-editor-method-42 () none 42)
    (nav-graph-editor-method-43 () none 43)
    (nav-graph-editor-method-44 () none 44)
    (nav-graph-editor-method-45 () none 45)
    (nav-graph-editor-method-46 () none 46)
    (nav-graph-editor-method-47 () none 47)
    (nav-graph-editor-method-48 () none 48)
    (nav-graph-editor-method-49 () none 49)
    (nav-graph-editor-method-50 () none 50)
    (nav-graph-editor-method-51 () none 51)
    (nav-graph-editor-method-52 () none 52)
    (nav-graph-editor-method-53 () none 53)
    (nav-graph-editor-method-54 () none 54)
    (nav-graph-editor-method-55 () none 55)
    (nav-graph-editor-method-56 () none 56)
    (nav-graph-editor-method-57 () none 57)
    (nav-graph-editor-method-58 () none 58)
    (nav-graph-editor-method-59 () none 59)
    (nav-graph-editor-method-60 () none 60)
    (nav-graph-editor-method-61 () none 61)
    (nav-graph-editor-method-62 (_type_ symbol symbol) none 62)
    (nav-graph-editor-method-63 () none 63)
    )
  )

(define-extern *nav-graph-editor* nav-graph-editor)
;; (define-extern nav-graph-editor-init-by-other function)
(define-extern run-nav-graph-editor (function symbol none))
(define-extern get-nav-graph-editor (function nav-graph-editor))
(define-extern exit-nav-graph-editor (function none))
;; (define-extern set-minimap-edge-flag function)
;; (define-extern set-vehicle-edit-mode function)
;; (define-extern translate-nav-graph function)
;; (define-extern update-nav-meshes function)
;; (define-extern smooth-nav-graph function)
;; (define-extern update-height function)
;; (define-extern update-width function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sampler                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sampler-mem* object)
;; (define-extern *sampler-compare* object)
;; (define-extern *sampler-count* object)
;; (define-extern timer0-handler function)
;; (define-extern sampler-start function)
;; (define-extern sampler-stop function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; default-menu                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *debug-menu-context* debug-menu-context)
(define-extern *dm-cam-mode-interpolation* int)
(define-extern dm-cam-mode-func (function (state camera-slave) debug-menu-msg object))
(define-extern dm-cam-mode-default (function object debug-menu-msg symbol))
(define-extern dm-cam-settings-default (function object debug-menu-msg symbol))
(define-extern dm-cam-settings-func (function cam-slave-options debug-menu-msg symbol))
(define-extern dm-cam-settings-func-int (function int debug-menu-msg int int int))
(define-extern dm-cam-externalize (function symbol debug-menu-msg symbol))
(define-extern dm-cam-setting-float (function float debug-menu-msg float float float)) ;; TODO - omit the last 2 args and set the return type to `none` to get a hang
(define-extern dm-cam-render-float (function int debug-menu-msg float float float))
(define-extern dm-subdiv-float (function symbol debug-menu-msg float float float))
(define-extern dm-subdiv-int (function symbol debug-menu-msg int int int))
(define-extern dm-select-race-path (function object debug-menu-msg int int))
(define-extern dm-setting-language (function int debug-menu-msg symbol))
(define-extern dm-setting-subtitle-language (function int debug-menu-msg symbol))
(define-extern dm-setting-stereo-mode (function object debug-menu-msg symbol))
(define-extern dm-current-continue (function string debug-menu-msg symbol))
(define-extern dm-subdiv-draw-func (function int debug-menu-msg symbol))
(define-extern dm-scissor-subdiv-draw-func (function int debug-menu-msg symbol))
(define-extern dm-foreground-subdiv-draw-func (function int debug-menu-msg symbol))
(define-extern dm-col-rend-on-func (function object debug-menu-msg symbol))
(define-extern dm-col-rend-outline-func (function object debug-menu-msg symbol))
(define-extern dm-col-rend-back-face-func (function object debug-menu-msg symbol))
(define-extern dm-col-rend-normals-func (function object debug-menu-msg symbol))
(define-extern dm-col-rend-ghost-hidden-func (function object debug-menu-msg symbol))
(define-extern dm-col-rend-track-func (function int debug-menu-msg symbol))
(define-extern dm-col-rend-show-only-toggle-func (function uint debug-menu-msg symbol))
(define-extern dm-col-rend-show-only-set-func (function uint debug-menu-msg symbol))
(define-extern dm-col-rend-cspec-toggle (function uint debug-menu-msg symbol))
(define-extern dm-col-rend-size (function object debug-menu-msg float float))
(define-extern dm-col-rend-cam-dist (function object debug-menu-msg float float))
(define-extern dm-ocean-height-func (function ocean-height-hack debug-menu-msg symbol))
(define-extern dm-ocean-subdiv-draw-func (function object debug-menu-msg symbol))

(defenum dm-time-of-day-setting
  :type int64
  (7am-sunrise)
  (10am-morning)
  (12pm-noon)
  (2pm-afternoon)
  (6pm-sunset)
  (7pm-twilight)
  (11pm-evening)
  (4am-green-sun)
  (fast-mode))

(define-extern dm-time-of-day-func (function dm-time-of-day-setting debug-menu-msg symbol))
(define-extern dm-time-of-day-func2 (function symbol debug-menu-msg object))

(defenum dm-time-of-day-palette-settings
  :type int64
  (palette-0)
  (palette-1)
  (palette-2)
  (palette-3)
  (palette-4)
  (palette-5)
  (palette-6)
  (palette-7))

(define-extern dm-time-of-day-palette-func (function dm-time-of-day-palette-settings debug-menu-msg symbol))
(define-extern dm-boolean-toggle-pick-func (function symbol debug-menu-msg object))
(define-extern dm-time-of-day-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-stats-memory-func (function int debug-menu-msg symbol))
(define-extern dm-actor-marks-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-select-race-pick-func (function int debug-menu-msg symbol))
(define-extern dm-compact-actor-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-actor-vis-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-game-mode-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-game-feature-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-game-secret-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern display-scene-control-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern display-scene-control-set-pick-func (function scene-controls debug-menu-msg symbol))
(define-extern display-bot-marks-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern display-bot-marks-set-pick-func (function bot-marks-controls debug-menu-msg symbol))
(define-extern display-race-marks-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern display-race-marks-set-pick-func (function race-marks-controls debug-menu-msg symbol))
(define-extern dm-vu1-user-toggle-pick-func (function vu1-renderer-mask debug-menu-msg symbol))
(define-extern dm-vu1-user-all-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-vu1-user-none-pick-func (function symbol debug-menu-msg symbol))

;; TODO - make enums for these
(define-extern dm-texture-user-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-texture-user-set-pick-func (function int debug-menu-msg symbol))

(define-extern dm-strip-lines-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-strip-lines-set-pick-func (function strip-lines-controls debug-menu-msg symbol))
(define-extern dm-edit-instance-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern all-texture-tweak-adjust (function texture-page-dir float none))

(define-extern dm-float-field-tie-rvanish-func "NOTE - Weird cast, it's not an instance-tie...but it is?" (function symbol debug-menu-msg float float float))
(define-extern dm-float-field-tie-vanish-far-func "NOTE - Weird cast, it's not an instance-tie...but it is?" (function symbol debug-menu-msg float float float))

(define-extern dm-bug-report-output-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-bug-report-report-pick-func (function symbol debug-menu-msg none))
(define-extern debug-menu-node<? (function debug-menu-node debug-menu-node symbol))
(define-extern dm-shader-pick-func (function texture-id debug-menu-msg symbol))
(define-extern *shader-pick-menu* debug-menu)
(define-extern build-shader-list (function none))
(define-extern dm-instance-pick-func (function string debug-menu-msg basic))
(define-extern dm-enable-instance-func (function string debug-menu-msg symbol))
(define-extern *instance-shrub-menu* debug-menu)
(define-extern *instance-tie-menu* debug-menu)
(define-extern *enable-instance-shrub-menu* debug-menu)
(define-extern *enable-instance-tie-menu* debug-menu)
(define-extern build-instance-list (function object none))
(define-extern dm-scene-load-pick-func (function pair debug-menu-msg symbol))
(define-extern debug-create-cam-restore (function none))
(define-extern debug-menu-make-camera-mode-menu (function debug-menu debug-menu debug-menu-node))
(define-extern debug-menu-make-camera-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern debug-menu-make-shader-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern debug-menu-make-instance-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern dm-task-menu-pick-func (function game-task debug-menu-msg symbol))
(define-extern debug-menu-make-continue-sub-menu (function debug-menu-context symbol pair))
(define-extern debug-menu-make-task-sub-menu "TODO - need to know more about game-info" (function symbol pair))
(define-extern debug-menu-make-task-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern dm-play-task-with-continue (function game-task string none))
(define-extern dm-play-task (function game-task none))
(define-extern dm-play-race (function race-selection symbol none))
(define-extern debug-menu-make-play-menu (function symbol none))
(define-extern dm-anim-tester-flag-func (function int debug-menu-msg symbol))
(define-extern dm-anim-tester-func (function int debug-menu-msg symbol))
(define-extern dm-pilot-mode "TODO - what is the third arg to target's change-mode?" (function object none))
(define-extern dm-pilot-race-mode "TODO - what is the third arg to target's change-mode?" (function object none))
(define-extern stop-watch-display (function object object symbol))
(define-extern debug-menu-context-make-default-menus (function debug-menu-context debug-menu-context))
(define-extern *popup-menu-context* debug-menu-context)
(define-extern popup-menu-context-make-default-menus (function debug-menu-context debug-menu-context))
(define-extern menu-respond-to-pause (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; los-control-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype los-control (structure)
  ((src-proc            uint64                     :offset-assert 0)
   (dst-proc            uint64                     :offset-assert 8)
   (have-los            uint64                     :offset-assert 16)
   (have-no-los         uint64                     :offset-assert 24)
   (check-interval      uint64                     :offset-assert 32)
   (last-check-time     time-frame                     :offset-assert 40)
   (last-collide-result collide-tri-result :inline :offset-assert 48)
   (collide-with        uint32                     :offset-assert 144)
   )
  :method-count-assert 14
  :size-assert         #x94
  :flag-assert         #xe00000094
  (:methods
    (los-control-method-9 () none 9)
    (los-control-method-10 () none 10)
    (los-control-method-11 () none 11)
    (los-control-method-12 () none 12)
    (los-control-method-13 () none 13)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; airlock                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype com-airlock (process-drawable)
  ((child-override        basic    :offset 24) ;; what is this!
   (root-override         collide-shape    :offset 128 :score 999)
   (level-name            string   :offset-assert 200)
   (open-test             symbol   :offset-assert 204)
   (were-behind?          symbol   :offset-assert 208)
   (inner?                symbol   :offset-assert 212)
   (sound-behind?         symbol   :offset-assert 216)
   (visible-move?         symbol   :offset-assert 220)
   (saw-pilot?            handle  :offset-assert 224)
   (last-distance         meters  :offset-assert 232)
   (y-height              vector  :offset-assert 236) ;; a guess
   (pre-open-speed        float   :offset-assert 240)
   (latch-closed-time     time-frame  :offset-assert 248)
   (latch-open-time       time-frame  :offset-assert 256)
   (gear                  joint-mod   :offset-assert 264)
   (gear-rot              degrees     :offset-assert 268)
   (gear-rotv             degrees     :offset-assert 272)
   (open-frame            float   :offset-assert 276)
   (pre-open-frame        float   :offset-assert 280)
   (lock-frame            float   :offset-assert 284)
   (open-distance         meters  :offset-assert 288)
   (active-distance       meters  :offset-assert 292)
   (sound-id              sound-id  :offset-assert 296)
   (gear-sound-id         sound-id  :offset-assert 300)
   (sound-gear            sound-spec   :offset-assert 304)
   (sound-pre-open        sound-spec   :offset-assert 308)
   (sound-pre-open-stop   sound-spec   :offset-assert 312)
   (sound-lock-loop       sound-spec   :offset-assert 316)
   (sound-lock-stop       sound-spec   :offset-assert 320)
   (sound-open            sound-spec   :offset-assert 324)
   (sound-open-loop       sound-spec   :offset-assert 328)
   (sound-open-stop       sound-spec   :offset-assert 332)
   (sound-close           sound-spec   :offset-assert 336)
   (sound-close-loop      sound-spec   :offset-assert 340)
   (sound-close-stop      sound-spec   :offset-assert 344)
   (sound-post-close      sound-spec   :offset-assert 348)
   (sound-post-close-stop sound-spec   :offset-assert 352)
   (spool-sound-time      time-frame  :offset-assert 360)
   (door-radius           meters  :offset-assert 368)
   )
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  ;; field level-name uses ~A with a signed load field open-test uses ~A with a signed load
  (:methods
    (open (symbol) _type_ :state 20)
    (close (symbol) _type_ :state 21)
    (init-airlock! (_type_) _type_ 22)
    (want-cross-airlock? (_type_) symbol :behavior com-airlock 23)
    (destination-loaded? (_type_ symbol) symbol 24)
    (check-crossing-distance (_type_ vector symbol) float :behavior com-airlock 25)
    (rotate-gear! (_type_ float) degrees :behavior com-airlock 26)
    (play-city-voice-sound (_type_ symbol) none :behavior com-airlock 27) ;; TODO - really weird usage of a string array / sound-array?
    )
  )

(deftype com-airlock-outer (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype com-airlock-inner (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype fort-entry-gate (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype hip-door-a (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype tomb-mar-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype cas-front-door (com-airlock-outer)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype pal-throne-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype vin-door-ctyinda (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype under-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )

(deftype oracle-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-anim                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim (process-drawable)
  ((water-height        meters       :offset-assert 196)
   (wade-height         meters       :offset-assert 200)
   (swim-height         meters       :offset-assert 204)
   (bottom-height       meters       :offset-assert 208)
   (attack-event        symbol       :offset-assert 212) ;; guessed by decompiler
   (attack-id           uint32       :offset-assert 216)
   (flow                basic        :offset-assert 220)
   (target              uint64       :offset-assert 228) ;; handle
   (flags               water-flags  :offset-assert 236) ;; guessed by decompiler
   (look                int32        :offset-assert 240)
   (play-ambient-sound? symbol       :offset-assert 244) ;; guessed by decompiler
   (visible             basic        :offset-assert 248)
   )
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    (water-anim-method-20 () none 20)
    (idle () _type_ :state 21)
    (water-anim-method-22 () none 22)
    (water-anim-method-23 () none 23)
    (water-anim-method-24 () none 24)
    (water-anim-method-25 () none 25)
    (water-anim-method-26 () none 26)
    (water-anim-method-27 () none 27)
    (water-anim-method-28 () none 28)
    )
  )
|#

#|
(deftype water-anim-look (structure)
  ((skel-group         symbol      :offset-assert 0) ;; guessed by decompiler
   (anim               int32       :offset-assert 4)
   (ambient-sound-spec sound-spec  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern *water-anim-look* array) ;; (array water-anim-look)
;; (define-extern water-anim-event-handler function)
;; (define-extern water-anim-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blocking-plane                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blocking-plane (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (blocking-plane-method-21 () none 21)
    )
  )
|#

;; (define-extern blocking-plane-init-by-other function) ;; (function curve-control int none :behavior blocking-plane)
;; (define-extern blocking-plane-spawn function) ;; (function curve-control none :behavior process)
;; (define-extern blocking-plane-destroy function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; idle-control                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype idle-control-frame (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  ;; Failed to read fields.
  )
|#

#|
(deftype idle-control (structure)
  ((anim    uint32  :offset-assert 0)
   (current uint32  :offset-assert 4)
   (counter int32   :offset-assert 8)
   (target  int32   :offset-assert 12)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (idle-control-method-9 () none 9)
    (idle-control-method-10 () none 10)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dark-eco-pool                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dark-eco-pool (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

;; (define-extern *ripple-for-dark-eco-pool* ripple-wave-set)
;; (define-extern *ripple-strip-dark-eco-near-lift* ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype enemy-focus (focus)
  ((aware uint64  :offset-assert 16)
   (flags uint64  :offset-assert 24)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (enemy-focus-method-13 () none 13)
    )
  )
|#

#|
(deftype enemy-info (basic)
  ((fact-defaults                       basic           :offset-assert 4)
   (use-die-falling                     basic           :offset-assert 8)
   (use-victory                         basic           :offset-assert 12)
   (use-jump-blocked                    basic           :offset-assert 16)
   (debug-draw-neck                     basic           :offset-assert 20)
   (jump-debug-draw                     basic           :offset-assert 24)
   (move-to-ground                      basic           :offset-assert 28)
   (hover-if-no-ground                  basic           :offset-assert 32)
   (idle-anim-script                    uint32          :offset-assert 36)
   (idle-anim                           int32           :offset-assert 40)
   (notice-anim                         int32           :offset-assert 44)
   (hostile-anim                        int32           :offset-assert 48)
   (hit-anim                            int32           :offset-assert 52)
   (knocked-anim                        int32           :offset-assert 56)
   (knocked-land-anim                   int32           :offset-assert 60)
   (die-anim                            int32           :offset-assert 64)
   (die-falling-anim                    int32           :offset-assert 68)
   (victory-anim                        int32           :offset-assert 72)
   (jump-wind-up-anim                   int32           :offset-assert 76)
   (jump-in-air-anim                    int32           :offset-assert 80)
   (jump-land-anim                      int32           :offset-assert 84)
   (neck-joint                          int32           :offset-assert 88)
   (look-at-joint                       int32           :offset-assert 92)
   (bullseye-joint                      int32           :offset-assert 96)
   (sound-hit                           uint128         :offset-assert 112)
   (sound-die                           uint128         :offset-assert 128)
   (notice-distance                     meters          :offset-assert 144)
   (notice-distance-delta               meters          :offset-assert 148)
   (proximity-notice-distance           meters          :offset-assert 152)
   (default-hit-points                  int32           :offset-assert 156)
   (gnd-collide-with                    uint32          :offset-assert 160)
   (overlaps-others-collide-with-filter uint32          :offset-assert 164)
   (penetrate-flinch                    uint64          :offset-assert 168)
   (penetrate-knocked                   uint64          :offset-assert 176)
   (movement-gravity                    meters          :offset-assert 184)
   (friction                            float           :offset-assert 188)
   (slip-factor                         float           :offset-assert 192)
   (attack-shove-back                   meters          :offset-assert 196)
   (attack-shove-up                     meters          :offset-assert 200)
   (attack-mode                         basic           :offset-assert 204)
   (attack-damage                       int32           :offset-assert 208)
   (recover-gnd-collide-with            uint32          :offset-assert 212)
   (jump-height-min                     meters          :offset-assert 216)
   (jump-height-factor                  float           :offset-assert 220)
   (knocked-seek-ry-clamp               float           :offset-assert 224)
   (knocked-soft-vxz-lo                 float           :offset-assert 228)
   (knocked-soft-vxz-hi                 float           :offset-assert 232)
   (knocked-soft-vy-lo                  float           :offset-assert 236)
   (knocked-soft-vy-hi                  float           :offset-assert 240)
   (knocked-medium-vxz-lo               float           :offset-assert 244)
   (knocked-medium-vxz-hi               float           :offset-assert 248)
   (knocked-medium-vy-lo                float           :offset-assert 252)
   (knocked-medium-vy-hi                float           :offset-assert 256)
   (knocked-hard-vxz-lo                 float           :offset-assert 260)
   (knocked-hard-vxz-hi                 float           :offset-assert 264)
   (knocked-hard-vy-lo                  float           :offset-assert 268)
   (knocked-hard-vy-hi                  float           :offset-assert 272)
   (knocked-huge-vxz-lo                 float           :offset-assert 276)
   (knocked-huge-vxz-hi                 float           :offset-assert 280)
   (knocked-huge-vy-lo                  float           :offset-assert 284)
   (knocked-huge-vy-hi                  float           :offset-assert 288)
   (knocked-yellow-vxz-lo               float           :offset-assert 292)
   (knocked-yellow-vxz-hi               float           :offset-assert 296)
   (knocked-yellow-vy-lo                float           :offset-assert 300)
   (knocked-yellow-vy-hi                float           :offset-assert 304)
   (knocked-red-vxz-lo                  float           :offset-assert 308)
   (knocked-red-vxz-hi                  float           :offset-assert 312)
   (knocked-red-vy-lo                   float           :offset-assert 316)
   (knocked-red-vy-hi                   float           :offset-assert 320)
   (knocked-blue-vxz-lo                 float           :offset-assert 324)
   (knocked-blue-vxz-hi                 float           :offset-assert 328)
   (knocked-blue-vy-lo                  float           :offset-assert 332)
   (knocked-blue-vy-hi                  float           :offset-assert 336)
   (shadow-size                         meters          :offset-assert 340)
   (shadow-max-y                        meters          :offset-assert 344)
   (shadow-min-y                        meters          :offset-assert 348)
   (shadow-locus-dist                   meters          :offset-assert 352)
   (gem-joint                           int32           :offset-assert 356)
   (gem-seg                             uint32          :offset-assert 360)
   (gem-no-seg                          uint32          :offset-assert 364)
   (gem-offset                          sphere  :inline :offset-assert 368)
   )
  :method-count-assert 10
  :size-assert         #x180
  :flag-assert         #xa00000180
  (:methods
    (enemy-info-method-9 () none 9)
    )
  )
|#

#|
(deftype enemy-knocked-info (structure)
  ((anim-speed         float   :offset-assert 0)
   (on-surface-count   int32   :offset-assert 4)
   (move-count         int32   :offset-assert 8)
   (land-can-land-time time-frame  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype enemy-jump-info (structure)
  ((flags      uint8              :offset-assert 0)
   (anim-speed float              :offset-assert 4)
   (hang-time  time-frame             :offset-assert 8)
   (start-pos  vector     :inline :offset-assert 16)
   (dest-pos   vector     :inline :offset-assert 32)
   (traj       trajectory :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype enemy-init-by-other-params (structure)
  ((trans                      vector     :inline :offset-assert 0)
   (quat                       quaternion :inline :offset-assert 16)
   (entity                     basic              :offset-assert 32)
   (directed?                  basic              :offset-assert 36)
   (no-initial-move-to-ground? basic              :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype enemy-attack-info (structure)
  ((attack-id         uint32         :offset-assert 0)
   (knocked-type      uint8          :offset-assert 4)
   (blue-juggle-count uint8          :offset-assert 5)
   (attacker-handle   uint64         :offset-assert 8)
   (attack-time       time-frame         :offset-assert 16)
   (penetrate-using   uint64         :offset-assert 24)
   (attacker-pos      vector :inline :offset-assert 32)
   (attack-direction  vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype enemy-best-focus (structure)
  ((proc   basic   :offset-assert 0)
   (rating float   :offset-assert 4)
   (aware  uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype enemy (process-focusable)
  ()
  :method-count-assert 137
  :size-assert         #x214
  :flag-assert         #x8901a00214
  ;; Failed to read fields.
  (:methods
    (enemy-method-27 () none 27)
    (enemy-method-28 () none 28)
    (enemy-method-29 () none 29)
    (enemy-method-30 () none 30)
    (enemy-method-31 () none 31)
    (enemy-method-32 () none 32)
    (enemy-method-33 () none 33)
    (enemy-method-34 () none 34)
    (enemy-method-35 () none 35)
    (enemy-method-36 () none 36)
    (enemy-method-37 () none 37)
    (enemy-method-38 () none 38)
    (enemy-method-39 () none 39)
    (enemy-method-40 () none 40)
    (enemy-method-41 () none 41)
    (enemy-method-42 () none 42)
    (enemy-method-43 () none 43)
    (enemy-method-44 () none 44)
    (enemy-method-45 () none 45)
    (enemy-method-46 () none 46)
    (enemy-method-47 () none 47)
    (enemy-method-48 () none 48)
    (enemy-method-49 () none 49)
    (enemy-method-50 () none 50)
    (enemy-method-51 () none 51)
    (enemy-method-52 () none 52)
    (enemy-method-53 () none 53)
    (enemy-method-54 () none 54)
    (enemy-method-55 () none 55)
    (enemy-method-56 () none 56)
    (enemy-method-57 () none 57)
    (enemy-method-58 () none 58)
    (enemy-method-59 () none 59)
    (enemy-method-60 () none 60)
    (enemy-method-61 () none 61)
    (enemy-method-62 () none 62)
    (enemy-method-63 () none 63)
    (enemy-method-64 () none 64)
    (enemy-method-65 () none 65)
    (enemy-method-66 () none 66)
    (enemy-method-67 () none 67)
    (enemy-method-68 () none 68)
    (enemy-method-69 () none 69)
    (enemy-method-70 () none 70)
    (enemy-method-71 () none 71)
    (enemy-method-72 () none 72)
    (enemy-method-73 () none 73)
    (enemy-method-74 () none 74)
    (enemy-method-75 () none 75)
    (enemy-method-76 () none 76)
    (enemy-method-77 () none 77)
    (enemy-method-78 () none 78)
    (enemy-method-79 () none 79)
    (enemy-method-80 () none 80)
    (enemy-method-81 () none 81)
    (enemy-method-82 () none 82)
    (enemy-method-83 () none 83)
    (enemy-method-84 () none 84)
    (enemy-method-85 () none 85)
    (enemy-method-86 () none 86)
    (enemy-method-87 () none 87)
    (enemy-method-88 () none 88)
    (enemy-method-89 () none 89)
    (enemy-method-90 () none 90)
    (enemy-method-91 () none 91)
    (enemy-method-92 () none 92)
    (enemy-method-93 () none 93)
    (enemy-method-94 () none 94)
    (enemy-method-95 () none 95)
    (enemy-method-96 () none 96)
    (enemy-method-97 () none 97)
    (enemy-method-98 () none 98)
    (enemy-method-99 () none 99)
    (enemy-method-100 () none 100)
    (enemy-method-101 () none 101)
    (enemy-method-102 () none 102)
    (enemy-method-103 () none 103)
    (enemy-method-104 () none 104)
    (enemy-method-105 () none 105)
    (enemy-method-106 () none 106)
    (enemy-method-107 () none 107)
    (enemy-method-108 () none 108)
    (enemy-method-109 () none 109)
    (enemy-method-110 () none 110)
    (enemy-method-111 () none 111)
    (enemy-method-112 () none 112)
    (enemy-method-113 () none 113)
    (enemy-method-114 () none 114)
    (enemy-method-115 () none 115)
    (enemy-method-116 () none 116)
    (enemy-method-117 () none 117)
    (enemy-method-118 () none 118)
    (enemy-method-119 () none 119)
    (enemy-method-120 () none 120)
    (enemy-method-121 () none 121)
    (enemy-method-122 () none 122)
    (enemy-method-123 () none 123)
    (enemy-method-124 () none 124)
    (enemy-method-125 () none 125)
    (enemy-method-126 () none 126)
    (enemy-method-127 () none 127)
    (enemy-method-128 () none 128)
    (enemy-method-129 () none 129)
    (enemy-method-130 () none 130)
    (enemy-method-131 () none 131)
    (enemy-method-132 () none 132)
    (enemy-method-133 () none 133)
    (enemy-method-134 () none 134)
    (enemy-method-135 () none 135)
    (enemy-method-136 () none 136)
    )
  )
|#

#|
(deftype anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-enemy-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-enemy-info (enemy-info)
  ((callback-info             nav-callback-info  :offset-assert 384)
   (use-momentum              symbol             :offset-assert 388) ;; guessed by decompiler
   (use-frustration           basic              :offset-assert 392)
   (use-stop-chase            basic              :offset-assert 396)
   (use-circling              basic              :offset-assert 400)
   (use-pacing                basic              :offset-assert 404)
   (walk-anim                 int32              :offset-assert 408)
   (turn-anim                 int32              :offset-assert 412)
   (run-anim                  int32              :offset-assert 416)
   (taunt-anim                int32              :offset-assert 420)
   (run-travel-speed          meters             :offset-assert 424)
   (run-acceleration          meters             :offset-assert 428)
   (run-turning-acceleration  meters             :offset-assert 432)
   (walk-travel-speed         meters             :offset-assert 436)
   (walk-acceleration         meters             :offset-assert 440)
   (walk-turning-acceleration meters             :offset-assert 444)
   (maximum-rotation-rate     deg                :offset-assert 448)
   (notice-nav-radius         meters             :offset-assert 452)
   (frustration-distance      meters             :offset-assert 456)
   (frustration-time          time-frame             :offset-assert 464) ;; time-frame
   (blocked-time              time-frame             :offset-assert 472)
   (circle-dist-lo            float              :offset-assert 480)
   (circle-dist-hi            float              :offset-assert 484)
   (nav-mesh                  basic              :offset-assert 488)
   )
  :method-count-assert 11
  :size-assert         #x1ec
  :flag-assert         #xb000001ec
  (:methods
    (nav-enemy-info-method-10 () none 10)
    )
  )
|#

#|
(deftype nav-enemy (enemy)
  ((frustration-point       vector :inline :offset-assert 540)
   (move-dest               vector :inline :offset-assert 556)
   (frustration-time        time-frame         :offset-assert 572) ;; time-frame
   (blocked-start-time      time-frame         :offset-assert 580)
   (restore-nav-radius-time time-frame         :offset-assert 588)
   (nav-radius-backup       float          :offset-assert 596)
   (circle-radial-dist      float          :offset-assert 240)
   )
  :method-count-assert 178
  :size-assert         #x25c
  :flag-assert         #xb201e0025c
  (:methods
    (nav-enemy-method-137 () none 137)
    (nav-enemy-method-138 () none 138)
    (nav-enemy-method-139 () none 139)
    (nav-enemy-method-140 () none 140)
    (nav-enemy-method-141 () none 141)
    (nav-enemy-method-142 () none 142)
    (nav-enemy-method-143 () none 143)
    (nav-enemy-method-144 () none 144)
    (nav-enemy-method-145 () none 145)
    (nav-enemy-method-146 () none 146)
    (nav-enemy-method-147 () none 147)
    (nav-enemy-method-148 () none 148)
    (nav-enemy-method-149 () none 149)
    (nav-enemy-method-150 () none 150)
    (nav-enemy-method-151 () none 151)
    (nav-enemy-method-152 () none 152)
    (nav-enemy-method-153 () none 153)
    (nav-enemy-method-154 () none 154)
    (nav-enemy-method-155 () none 155)
    (nav-enemy-method-156 () none 156)
    (nav-enemy-method-157 () none 157)
    (nav-enemy-method-158 () none 158)
    (nav-enemy-method-159 () none 159)
    (nav-enemy-method-160 () none 160)
    (nav-enemy-method-161 () none 161)
    (nav-enemy-method-162 () none 162)
    (nav-enemy-method-163 () none 163)
    (nav-enemy-method-164 () none 164)
    (nav-enemy-method-165 () none 165)
    (nav-enemy-method-166 () none 166)
    (nav-enemy-method-167 () none 167)
    (nav-enemy-method-168 () none 168)
    (nav-enemy-method-169 () none 169)
    (nav-enemy-method-170 () none 170)
    (nav-enemy-method-171 () none 171)
    (nav-enemy-method-172 () none 172)
    (nav-enemy-method-173 () none 173)
    (nav-enemy-method-174 () none 174)
    (nav-enemy-method-175 () none 175)
    (nav-enemy-method-176 () none 176)
    (nav-enemy-method-177 () none 177)
    )
  )
|#

#|
(deftype nav-enemy-debug-control-info (basic)
  ((enable   basic  :offset-assert 4)
   (steering float  :offset-assert 8)
   (throttle float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype rigid-body-info (structure)
  ((mass                float           :offset-assert 0)
   (inv-mass            float           :offset-assert 4)
   (linear-damping      float           :offset-assert 8)
   (angular-damping     float           :offset-assert 12)
   (bounce-factor       float           :offset-assert 16)
   (friction-factor     float           :offset-assert 20)
   (bounce-mult-factor  float           :offset-assert 24)
   (cm-offset-joint     vector  :inline :offset-assert 32)
   (inv-inertial-tensor matrix  :inline :offset-assert 48)
   (inertial-tensor     matrix  :inline :offset-assert 112)
   (inertial-tensor-box meters 3        :offset-assert 176)
   )
  :method-count-assert 10
  :size-assert         #xbc
  :flag-assert         #xa000000bc
  (:methods
    (rigid-body-info-method-9 (_type_) none 9)
    )
  )

(deftype rigid-body-object-extra-info (structure)
  ((max-time-step      float   :offset-assert 0)
   (gravity            meters  :offset-assert 4)
   (idle-distance      meters  :offset-assert 8)
   (attack-force-scale float   :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rigid-body-object-constants (structure)
  ((info               rigid-body-info              :inline :offset-assert 0 :score -1)
   (mass               float                                :offset 0)
   (inv-mass           float                                :offset 4)
   (cm-joint-x         meters                               :offset 32)
   (cm-joint-y         meters                               :offset 36)
   (cm-joint-z         meters                               :offset 40)
   (linear-damping     float                                :offset 8)
   (angular-damping    float                                :offset 12)
   (bounce-factor      float                                :offset 16)
   (friction-factor    float                                :offset 20)
   (inertial-tensor-x  meters                               :offset 176)
   (inertial-tensor-y  meters                               :offset 180)
   (inertial-tensor-z  meters                               :offset 184)
   (extra              rigid-body-object-extra-info :inline :offset-assert 188 :score -1)
   (max-time-step      float                                :offset 188)
   (gravity            meters                               :offset 192)
   (idle-distance      meters                               :offset 196)
   (attack-force-scale float                                :offset 200)
   (name               basic                                :offset-assert 204)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype rigid-body-impact (structure)
  ((point    vector :inline :offset-assert 0)
   (normal   vector :inline :offset-assert 16)
   (velocity vector :inline :offset-assert 32)
   (impulse  float          :offset-assert 48)
   (pat      uint32         :offset-assert 52)
   (rbody    basic          :offset-assert 56)
   (prim-id  uint32         :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(defenum rigid-body-flag
  :bitfield #t
  :type uint32
  (display-marks 0)
  (enable-physics 1)
  (enable-collision 2)
  (active 3)
  (debug 4)
  (blocker 5)
  )

(deftype rigid-body (structure)
  ((work           basic              :offset-assert 0)
   (info           rigid-body-info    :offset-assert 4)
   (flags          rigid-body-flag    :offset-assert 8)
   (force-callback basic              :offset-assert 12)
   (blocked-by     basic              :offset-assert 16)
   (time-remaining float              :offset-assert 20)
   (step-count     int16              :offset-assert 24)
   (position       vector     :inline :offset-assert 32)
   (rot            vector     :inline :offset-assert 48)
   (rotation       quaternion :inline :offset        48 :score 1)
   (lin-momentum   vector     :inline :offset-assert 64)
   (ang-momentum   vector     :inline :offset-assert 80)
   (force          vector     :inline :offset-assert 96)
   (torque         vector     :inline :offset-assert 112)
   (lin-velocity   vector     :inline :offset-assert 128)
   (ang-velocity   vector     :inline :offset-assert 144)
   (matrix         matrix     :inline :offset-assert 160)
   (inv-i-world    matrix     :inline :offset-assert 224)
   )
  :method-count-assert 32
  :size-assert         #x120
  :flag-assert         #x2000000120
  (:methods
    (rigid-body-method-9 () none 9)
    (rigid-body-method-10 () none 10)
    (rigid-body-method-11 () none 11)
    (rigid-body-method-12 (_type_ float) none 12)
    (rigid-body-method-13 (_type_) none 13)
    (rigid-body-method-14 (_type_ float) none 14)
    (rigid-body-method-15 () none 15)
    (clear-force-torque! (_type_) none 16)
    (clear-momentum! (_type_) none 17)
    (rigid-body-method-18 (_type_ vector vector) none 18)
    (rigid-body-method-19 (_type_ vector vector) none 19)
    (rigid-body-method-20 (_type_ vector) none 20)
    (rigid-body-method-21 (_type_ vector vector float) none 21)
    (rigid-body-method-22 (_type_ vector vector) vector 22)
    (rigid-body-method-23 (_type_ vector) vector 23)
    (rigid-body-method-24 (_type_) none 24)
    (rigid-body-method-25 (_type_ rigid-body-info vector quaternion basic) none 25)
    (rigid-body-method-26 (_type_ vector quaternion) none 26) ;; TODO: stack
    (print-physics (_type_ object) none 27) ;; probably a better name for this
    (print-force-torque (_type_ object) none 28)
    (print-position-rotation (_type_ object) none 29)
    (print-momentum (_type_ object) none 30)
    (print-velocity (_type_ object) none 31)
    )
  )

(deftype rigid-body-control (basic)
  ((process        process            :offset-assert 4)
   (state          rigid-body :inline :offset-assert 16)
   (work           basic              :offset 16)
   (info           rigid-body-info    :offset 20)
   (flags          rigid-body-flag    :offset 24)
   (force-callback basic              :offset 28)
   (blocked-by     basic              :offset 32)
   (time-remaining float              :offset 36)
   (step-count     int16              :offset 40)
   (position       vector     :inline :offset 48)
   (rot            vector     :inline :offset 64)
   (rotation       quaternion :inline :offset 64)
   (lin-momentum   vector     :inline :offset 80)
   (ang-momentum   vector     :inline :offset 96)
   (force          vector     :inline :offset 112)
   (torque         vector     :inline :offset 128)
   (lin-velocity   vector     :inline :offset 144)
   (ang-velocity   vector     :inline :offset 160)
   (matrix         matrix     :inline :offset 176)
   (inv-i-world    matrix     :inline :offset 240)
   )
  :method-count-assert 26
  :size-assert         #x130
  :flag-assert         #x1a00000130
  (:methods
    (rigid-body-control-method-9 () none 9)
    (rigid-body-control-method-10 () none 10)
    (rigid-body-control-method-11 () none 11)
    (rigid-body-control-method-12 (_type_ float) none 12)
    (rigid-body-control-method-13 (_type_) none 13)
    (rigid-body-control-method-14 () none 14)
    (clear-force-torque! (_type_) none 15)
    (clear-momentum! (_type_) none 16)
    (rigid-body-control-method-17 (_type_ vector vector) none 17)
    (rigid-body-control-method-18 (_type_ vector vector) none 18)
    (rigid-body-control-method-19 (_type_ vector) none 19)
    (rigid-body-control-method-20 (_type_ vector vector float) none 20)
    (rigid-body-control-method-21 (_type_ vector vector) vector 21)
    (rigid-body-control-method-22 (_type_ vector) vector 22)
    (rigid-body-control-method-23 (_type_) none 23)
    (rigid-body-control-method-24 (_type_ rigid-body-info vector quaternion basic) none 24)
    (rigid-body-control-method-25 (_type_ vector quaternion) none 25)
    )
  )

(defenum rigid-body-object-flag
  :bitfield #t
  :type uint64
  (enable-collision 0)
  (disturbed 1)
  (damaged 2)
  (dead 3)
  (player-touching 4)
  (player-edge-grabbing 5)
  (player-standing-on 6)
  (player-impulse-force 7)
  (player-contact-force 8)
  )

(deftype rigid-body-object (process-focusable)
  ((info                  rigid-body-object-constants :offset-assert 204)
   (flags                 rigid-body-object-flag      :offset-assert 208)
   (max-time-step         float                       :offset-assert 216)
   (incoming-attack-id    uint32                      :offset-assert 220)
   (player-touch-time     time-frame                  :offset-assert 224)
   (disturbed-time        time-frame                  :offset-assert 232)
   (player-force-position vector              :inline :offset-assert 240)
   (player-force          vector              :inline :offset-assert 256)
   )
  :method-count-assert 53
  :size-assert         #x110
  :flag-assert         #x3500900110
  (:methods
    (rigid-body-object-method-27 () none 27)
    (rigid-body-object-method-28 () none 28)
    (rigid-body-object-method-29 () none 29)
    (rigid-body-object-method-30 () none 30)
    (rigid-body-object-method-31 () none 31)
    (rigid-body-object-method-32 () none 32)
    (rigid-body-object-method-33 () none 33)
    (rigid-body-object-method-34 () none 34)
    (rigid-body-object-method-35 () none 35)
    (rigid-body-object-method-36 () none 36)
    (rigid-body-object-method-37 () none 37)
    (rigid-body-object-method-38 () none 38)
    (rigid-body-object-method-39 () none 39)
    (rigid-body-object-method-40 () none 40)
    (rigid-body-object-method-41 () none 41)
    (rigid-body-object-method-42 () none 42)
    (rigid-body-object-method-43 () none 43)
    (rigid-body-object-method-44 () none 44)
    (rigid-body-object-method-45 () none 45)
    (rigid-body-object-method-46 () none 46)
    (rigid-body-object-method-47 () none 47)
    (rigid-body-object-method-48 () none 48)
    (rigid-body-object-method-49 () none 49)
    (rigid-body-object-method-50 () none 50)
    (rigid-body-object-method-51 () none 51)
    (rigid-body-object-method-52 () none 52)
    )
  )

(deftype rigid-body-queue (structure)
  ((count int8        :offset-assert 0)
   (array uint64 128  :offset 8) ;; TODO: unsure about type
   )
  :method-count-assert 17
  :size-assert         #x408
  :flag-assert         #x1100000408
  (:methods
    (rigid-body-queue-method-9 () none 9)
    (rigid-body-queue-method-10 () none 10)
    (rigid-body-queue-method-11 () none 11)
    (rigid-body-queue-method-12 () none 12)
    (rigid-body-queue-method-13 () none 13)
    (rigid-body-queue-method-14 () none 14)
    (rigid-body-queue-method-15 () none 15)
    (rigid-body-queue-method-16 () none 16)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *enemy-dummy-shadow-control* shadow-control)
;; (define-extern get-penetrate-using-from-attack-event function)
;; (define-extern enemy-init-by-other function)
;; (define-extern enemy-event-handler function)
;; (define-extern enemy-simple-post function)
;; (define-extern enemy-falling-post function)
;; (define-extern enemy-die-falling-post function)
;; (define-extern ja-group-index? function) ;; (function int symbol :behavior nav-enemy)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-enemy                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *nav-enemy-dummy-shadow-control* shadow-control) ;; shadow-control
;; (define-extern *nav-enemy-null-callback-info* object)
;; (define-extern *nav-enemy-callback-info* object)
;; (define-extern *nav-enemy-physics-callback-info* object)
;; (define-extern nav-enemy-simple-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-die-falling-post function)
;; (define-extern nav-enemy-travel-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-patrol-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-chase-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-flee-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-face-focus-post function)
;; (define-extern nav-enemy-stare-post function)
;; (define-extern nav-enemy-falling-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-turn-to-face-dir function) ;; (function vector float none :behavior nav-enemy)
;; (define-extern nav-enemy-turn-to-face-point function) ;; (function vector float none :behavior nav-enemy)
;; (define-extern *nav-enemy-debug-control-info* nav-enemy-debug-control-info)
;; (define-extern nav-enemy-debug-control-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; base-plat                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype base-plat (process-focusable)
  ((smush        smush-control :inline :offset-assert 204)
   (basetrans    vector        :inline :offset-assert 236)
   (bounce-time  time-frame                :offset-assert 252)
   (bouncing     basic                 :offset-assert 260)
   (bounce-scale meters                :offset-assert 264)
   )
  :method-count-assert 34
  :size-assert         #x110
  :flag-assert         #x2200900110
  (:methods
    (base-plat-method-27 () none 27)
    (base-plat-method-28 () none 28)
    (base-plat-method-29 () none 29)
    (base-plat-method-30 () none 30)
    (base-plat-method-31 () none 31)
    (base-plat-method-32 () none 32)
    (base-plat-method-33 () none 33)
    )
  )
|#

#|
(deftype eco-door (process-drawable)
  ((speed          float                :offset-assert 196)
   (open-distance  float                :offset-assert 200)
   (close-distance float                :offset-assert 204)
   (out-dir        vector       :inline :offset-assert 220)
   (open-sound     uint128              :offset-assert 236) ;; sound-name
   (close-sound    uint128              :offset-assert 252) ;; sound-name
   (state-actor    entity-actor         :offset-assert 268) ;; guessed by decompiler
   (flags          int32                :offset-assert 272) ;; eco-door-flags
   (locked         symbol               :offset-assert 276) ;; guessed by decompiler
   (auto-close     symbol               :offset-assert 280) ;; guessed by decompiler
   (one-way        symbol               :offset-assert 284) ;; guessed by decompiler
   )
  :method-count-assert 27
  :size-assert         #x124
  :flag-assert         #x1b00b00124
  (:methods
    (door-closed () _type_ :state 20) ;; (door-closed () _type_ :state 20)
    (door-opening () _type_ :state 21) ;; (door-opening () _type_ :state 21)
    (door-open () _type_ :state 22) ;; (door-open () _type_ :state 22)
    (door-closing () _type_ :state 23) ;; (door-closing () _type_ :state 23)
    (eco-door-method-24 () none 24) ;; (TODO-RENAME-24 (_type_) none 24)
    (eco-door-method-25 () none 25) ;; (TODO-RENAME-25 (_type_) none 25)
    (eco-door-method-26 () none 26) ;; (dummy-26 (_type_) none 26)
    )
  )
|#

;; (define-extern plat-code function) ;; (function none :behavior baseplat)
;; (define-extern plat-trans function) ;; (function none :behavior baseplat)
;; (define-extern plat-post function) ;; (function none :behavior baseplat)
;; (define-extern plat-event function) ;; (function process int symbol event-message-block object :behavior baseplat)
;; (define-extern eco-door-event-handler function) ;; (function process int symbol event-message-block object :behavior eco-door)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; plat                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype plat (base-plat)
  ((path-pos float              :offset-assert 268)
   (sound-id sound-id           :offset-assert 272) ;; guessed by decompiler
   (sync     sync-eased :inline :offset-assert 276) ;; sync-info-eased :inline
   )
  :method-count-assert 37
  :size-assert         #x144
  :flag-assert         #x2500d00144
  (:methods
    (plat-idle () _type_ :state 34)
    (plat-path-active () _type_ :state 35)
    (plat-method-36 () none 36)
    )
  )
|#

#|
(deftype drop-plat (base-plat)
  ((art-name        basic          :offset-assert 268)
   (anim            basic          :offset-assert 272)
   (break-anim-name basic          :offset-assert 276)
   (safe-time       time-frame         :offset-assert 284)
   (hit-point       vector :inline :offset-assert 300)
   )
  :method-count-assert 36
  :size-assert         #x140
  :flag-assert         #x2400c00140
  (:methods
    (idle () _type_ :state 34)
    (fall () _type_ :state 35)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; basebutton                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype basebutton (process-focusable)
  ()
  :method-count-assert 39
  :size-assert         #x120
  :flag-assert         #x2700a00120
  ;; Failed to read fields.
  (:methods
    (down-idle () _type_ :state 27) ;; (TODO-RENAME-27 (_type_) collide-shape-moving 27)
    (going-down () _type_ :state 28) ;; (arm-trigger-event! (_type_) symbol 28)
    (going-up () _type_ :state 29) ;; (TODO-RENAME-29 (_type_ symbol entity) none 29)
    (up-idle () _type_ :state 30) ;; (move-to-vec-or-quat! (_type_ vector quaternion) quaternion 30)
    (basebutton-method-31 () none 31) ;; (press! (_type_ symbol) int 31)
    (basebutton-method-32 () none 32)
    (basebutton-method-33 () none 33)
    (basebutton-method-34 () none 34)
    (basebutton-method-35 () none 35)
    (basebutton-method-36 () none 36)
    (basebutton-method-37 () none 37)
    (basebutton-method-38 () none 38)
    )
  )
|#

;; (define-extern basebutton-init-by-other function) ;; (function entity-actor vector quaternion entity-actor symbol float none :behavior basebutton)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bouncer                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bouncer (process-drawable)
  ((spring-height meters  :offset-assert 196)
   (smush         float   :offset-assert 200)
   (mods          basic   :offset-assert 204)
   )
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:methods
    (idle () _type_ :state 20)
    (fire () _type_ :state 21)
    (smush () _type_ :state 22)
    (bouncer-method-23 () none 23)
    (bouncer-method-24 () none 24)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; conveyor                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype conveyor-section (structure)
  ((start      vector :inline :offset-assert 0)
   (trailing   plane  :inline :offset-assert 16)
   (pull-dir   vector :inline :offset-assert 32)
   (radial-dir vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype conveyor-section-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype conveyor (process-drawable)
  ((speed                float          :offset-assert 196)
   (belt-radius          float          :offset-assert 200)
   (pull-y-threshold     float          :offset-assert 204)
   (speed-mult-array     uint32         :offset-assert 208)
   (speed-mult-array-len int8           :offset-assert 212)
   (sections             basic          :offset-assert 216)
   (leading              plane  :inline :offset-assert 220)
   (collide-bounds       sphere :inline :offset-assert 236)
   )
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    (idle () _type_ :state 20)
    (conveyor-method-21 () none 21)
    (conveyor-method-22 () none 22)
    (conveyor-method-23 () none 23)
    (conveyor-method-24 () none 24)
    (conveyor-method-25 () none 25)
    (conveyor-method-26 () none 26)
    (conveyor-method-27 () none 27)
    )
  )
|#

#|
(deftype strip-conveyor (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#

#|
(deftype lgconveyor (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; elevator                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype elevator-params (structure)
  ((xz-threshold float   :offset-assert 0)
   (y-threshold  float   :offset-assert 4)
   (start-pos    float   :offset-assert 8)
   (move-rate    float   :offset-assert 12)
   (flags        uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype path-step (structure)
  ((next-pos float  :offset-assert 0)
   (dist     float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype path-step-inline-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype elevator (base-plat)
  ((params                       elevator-params :inline :offset-assert 268)
   (path-seq                     basic                   :offset-assert 292)
   (path-dest                    float                   :offset-assert 296)
   (bottom-top                   UNKNOWN         2       :offset-assert 300)
   (move-pos                     UNKNOWN         2       :offset-assert 308)
   (move-dist                    float                   :offset-assert 316)
   (path-pos                     float                   :offset-assert 320)
   (path-eased-pos               float                   :offset-assert 324)
   (ride-timer                   uint64                  :offset-assert 332)
   (sticky-player-last-ride-time time-frame                  :offset-assert 340)
   (elevator-status              uint64                  :offset-assert 348)
   (on-activate                  basic                   :offset-assert 356)
   (on-deactivate                basic                   :offset-assert 360)
   )
  :method-count-assert 49
  :size-assert         #x170
  :flag-assert         #x3100f00170
  ;; field on-activate uses ~A with a signed load field on-deactivate uses ~A with a signed load
  (:methods
    (dormant () _type_ :state 34)
    (waiting () _type_ :state 35)
    (running () _type_ :state 36)
    (arrived () _type_ :state 37)
    (elevator-method-38 () none 38)
    (elevator-method-39 () none 39)
    (elevator-method-40 () none 40)
    (elevator-method-41 () none 41)
    (elevator-method-42 () none 42)
    (elevator-method-43 () none 43)
    (elevator-method-44 () none 44)
    (elevator-method-45 () none 45)
    (elevator-method-46 () none 46)
    (elevator-method-47 () none 47)
    (elevator-method-48 () none 48)
    )
  )
|#

;; (define-extern ease-value-in-out function)
;; (define-extern elevator-event function)
;; (define-extern move-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype rigid-body-work (structure)
  ((max-ang-momentum float  :offset-assert 0)
   (max-ang-velocity float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern *rigid-body-work* rigid-body-work)
(define-extern matrix-3x3-triple-transpose-product (function matrix matrix matrix matrix))
(define-extern damping-time-adjust (function float float float))
;; (define-extern transform-rigid-body-prims (function object matrix none)) ;; TODO: first param
(define-extern *rigid-body-object-constants* rigid-body-object-constants)
;; (define-extern rigid-body-object-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-queue               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rigid-body-queue-manager (process)
  ((queue rigid-body-queue  :offset-assert 124)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:methods
    (rigid-body-queue-manager-method-9 () none 9)
    (rigid-body-queue-manager-method-10 () none 10)
    (rigid-body-queue-manager-method-11 () none 11)
    (rigid-body-queue-manager-method-12 () none 12)
    (rigid-body-queue-manager-method-13 () none 13)
    (idle () _type_ :state 14)
    )
  )
|#

;; (define-extern rigid-body-queue-manager-init-by-other function)
;; (define-extern rigid-body-queue-manager-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-plat                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype rigid-body-platform-constants (rigid-body-object-constants)
  ((drag-factor           float   :offset-assert 208)
   (buoyancy-factor       float   :offset-assert 212)
   (max-buoyancy-depth    meters  :offset-assert 216)
   (player-weight         meters  :offset-assert 220)
   (player-bonk-factor    float   :offset-assert 224)
   (player-dive-factor    float   :offset-assert 228)
   (player-force-distance meters  :offset-assert 232)
   (player-force-clamp    meters  :offset-assert 236)
   (player-force-timeout  uint64  :offset-assert 240) ;; time-frame
   (explosion-force       meters  :offset-assert 248)
   (control-point-count   int32   :offset-assert 252)
   (platform              symbol  :offset-assert 256) ;; guessed by decompiler
   (sound-name            string  :offset-assert 260) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x108
  :flag-assert         #x900000108
  )

(deftype rigid-body-control-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (world-pos vector :inline :offset-assert 16)
   (velocity  vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype rigid-body-control-point-inline-array (inline-array-class)
  ((data             rigid-body-control-point :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

#|
(deftype rigid-body-platform (rigid-body-object)
  ((control-point-array   rigid-body-control-point-inline-array         :offset-assert 268) ;; guessed by decompiler
   (player-velocity       vector                                :inline :offset-assert 284)
   (player-velocity-prev  vector                                :inline :offset-assert 300)
   (player-force-position vector                                :inline :offset-assert 236)
   (player-force          vector                                :inline :offset-assert 252)
   (float-height-offset   float                                         :offset-assert 348)
   (player-bonk-timeout   uint64                                        :offset-assert 356) ;; time-frame
   (water-anim            water-anim                                    :offset-assert 364) ;; guessed by decompiler
   )
  :method-count-assert 57
  :size-assert         #x174
  :flag-assert         #x3901000174
  (:methods
    (rigid-body-platform-method-53 () none 53)
    (rigid-body-platform-method-54 () none 54)
    (rigid-body-platform-method-55 () none 55)
    (rigid-body-platform-method-56 () none 56)
    )
  )
|#

(define-extern *rigid-body-platform-constants* rigid-body-platform-constants)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-exploder                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype joint-exploder-tuning (structure)
  ((explosion                   uint64         :offset-assert 0)
   (duration                    uint64         :offset-assert 8) ;; time-frame
   (gravity                     float          :offset-assert 16)
   (rot-speed                   float          :offset-assert 20)
   (bounds-inflate              float          :offset-assert 24)
   (max-probe-width             float          :offset-assert 28)
   (max-probe-height            float          :offset-assert 32)
   (max-probe-depth             float          :offset-assert 36)
   (fountain-rand-transv-lo     vector :inline :offset-assert 48)
   (fountain-rand-transv-hi     vector :inline :offset-assert 64)
   (away-from-focal-pt          vector :inline :offset-assert 48)
   (away-from-rand-transv-xz-lo float          :offset-assert 64)
   (away-from-rand-transv-xz-hi float          :offset-assert 68)
   (away-from-rand-transv-y-lo  float          :offset-assert 72)
   (away-from-rand-transv-y-hi  float          :offset-assert 76)
   (hit-xz-reaction             float          :offset-assert 80)
   (hit-y-reaction              float          :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype joint-exploder-static-joint-params (structure)
  ((joint-index        int16  :offset-assert 0)
   (parent-joint-index int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype joint-exploder-static-params (basic)
  ((joints       (array joint-exploder-static-joint-params)  :offset-assert 4) ;; guessed by decompiler
   (collide-spec uint32                                      :offset-assert 8)
   (art-level    basic                                       :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype joint-exploder-joint (structure)
  ((next        int16          :offset-assert 0)
   (prev        int16          :offset-assert 2)
   (joint-index int16          :offset-assert 4)
   (mat         matrix :inline :offset-assert 16)
   (rmat        matrix :inline :offset-assert 80)
   (update-rmat matrix :inline :offset-assert 144)
   (transv      vector :inline :offset-assert 208)
   (prev-pos    vector :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )
|#

#|
(deftype joint-exploder-joints (basic)
  ((num-joints int32                         :offset-assert 4)
   (joint      joint-exploder-joint :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype joint-exploder-list (structure)
  ((head        int32                :offset-assert 0)
   (pre-moved?  symbol               :offset-assert 4) ;; guessed by decompiler
   (bbox-valid? symbol               :offset-assert 8) ;; guessed by decompiler
   (probeless?  basic                :offset-assert 12)
   (bbox        bounding-box :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype joint-exploder (process-drawable)
  ((die-if-below-y             float                                :offset-assert 196)
   (die-if-beyond-xz-dist-sqrd float                                :offset-assert 200)
   (joints                     joint-exploder-joints                :offset-assert 204) ;; guessed by decompiler
   (static-params              joint-exploder-static-params         :offset-assert 208) ;; guessed by decompiler
   (anim                       art-joint-anim                       :offset-assert 212) ;; guessed by decompiler
   (scale-vector               vector                       :inline :offset-assert 220)
   (tuning                     joint-exploder-tuning        :inline :offset-assert 236)
   (lists                      joint-exploder-list          5       :offset-assert 332) ;; guessed by decompiler
   )
  :method-count-assert 30
  :size-assert         #x240
  :flag-assert         #x1e01c00240
  (:methods
    (joint-exploder-method-20 () none 20) ;; (TODO-RENAME-20 (_type_ joint-exploder-list int) int 20)
    (joint-exploder-method-21 () none 21) ;; (TODO-RENAME-21 (_type_ joint-exploder-list joint-exploder-joint) none 21)
    (joint-exploder-method-22 () none 22) ;; (TODO-RENAME-22 (_type_ joint-exploder-list) symbol 22)
    (joint-exploder-method-23 () none 23) ;; (TODO-RENAME-23 (_type_) symbol 23)
    (joint-exploder-method-24 () none 24) ;; (TODO-RENAME-24 (_type_ joint-exploder-list int) int 24)
    (joint-exploder-method-25 () none 25) ;; (TODO-RENAME-25 (_type_ joint-exploder-list) symbol 25)
    (joint-exploder-method-26 () none 26) ;; (TODO-RENAME-26 (_type_ joint-exploder-list int) int 26)
    (joint-exploder-method-27 () none 27) ;; (TODO-RENAME-27 (_type_ joint-exploder-list int) joint-exploder-list 27)
    (joint-exploder-method-28 () none 28) ;; (TODO-RENAME-28 (_type_ joint-exploder-list) none 28)
    (joint-exploder-method-29 () none 29)
    )
  )
|#

;; (define-extern joint-exploder-joint-callback function) ;; (function joint-exploder none)
;; (define-extern joint-exploder-shatter state) ;; (state joint-exploder)
;; (define-extern joint-exploder-init-by-other function) ;; (function skeleton-group int joint-exploder-static-params joint-exploder-static-params none :behavior joint-exploder)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-focus                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype simple-focus (process-focusable)
  ((first-time? basic  :offset-assert 200)
   )
  :method-count-assert 28
  :size-assert         #xd0
  :flag-assert         #x1c005000d0
  (:methods
    (idle () _type_ :state 27)
    )
  )
|#

;; (define-extern simple-focus-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-nav-sphere              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype simple-nav-sphere (process-drawable)
  ((first-time? basic  :offset-assert 196)
   (track-joint int32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    )
  )
|#

;; (define-extern simple-nav-sphere-event-handler function)
;; (define-extern simple-nav-sphere-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-taskable               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern process-taskable-anim-loop function) ;; (function none :behavior process-taskable)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene-actor                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kor-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype metalkor-highres (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tess-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype keira-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype krew-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype kid-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype crocadog-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype torn-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype youngsamos-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype samos-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype onin-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype pecker-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype brutter-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype ashelin-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype daxter-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

;; (define-extern intro-play function)
;; (define-extern outro-play function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene-looper                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype scene-looper (process)
  ((scene-name basic  :offset-assert 124)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:methods
    (scene-looper-method-9 () none 9)
    (scene-looper-method-10 () none 10)
    (scene-looper-method-11 () none 11)
    (scene-looper-method-12 () none 12)
    (scene-looper-method-13 () none 13)
    (idle () _type_ :state 14)
    )
  )
|#

;; (define-extern scene-looper-init-by-other function)
;; (define-extern stop-loop-scene function)
;; (define-extern loop-scene function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; warp-gate                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype warp-gate (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype air-train (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *kernel-packages* object) ;; pair
;; (define-extern warp-gate-init function)
;; (define-extern *warp-jump-mods* surface) ;; surface
;; (define-extern target-warp-out state) ;; (state vector vector target)
;; (define-extern target-warp-in state) ;; (state vector vector target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-projectile               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guard-shot (projectile)
  ((hit-actor? basic          :offset-assert 468)
   (tail-pos   vector :inline :offset-assert 476)
   )
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype vehicle-grenade (projectile-bounce)
  ((blast-radius float  :offset-assert 492)
   )
  :method-count-assert 42
  :size-assert         #x1f4
  :flag-assert         #x2a018001f4
  (:methods
    )
  )
|#

#|
(deftype guard-lazer-shot (projectile)
  ()
  :method-count-assert 40
  :size-assert         #x1d8
  :flag-assert         #x28016001d8
  (:methods
    )
  )
|#

;; (define-extern guard-shot-move function)
;; (define-extern guard-lazer-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-projectile           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-shot (projectile)
  ((tail-pos vector :inline :offset-assert 476)
   )
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype metalhead-grenade-shot (projectile)
  ((tumble-quat  quaternion :inline :offset-assert 476)
   (blast-radius float              :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x1f4
  :flag-assert         #x28018001f4
  (:methods
    )
  )
|#

;; (define-extern metalhead-shot-move function)
;; (define-extern spawn-metalhead-projectile function)
;; (define-extern gren-canister-move function)
;; (define-extern gren-cshape-reaction-canister function)
;; (define-extern spawn-metalhead-grenade function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; los-control                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *los-time-offset* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grunt                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grunt-anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype grunt-global-info (basic)
  ((prev-knocked-anim-index    int32     :offset-assert 4)
   (prev-yellow-hit-anim-index int32     :offset-assert 8)
   (prev-blue-hit-anim-index   int32     :offset-assert 12)
   (patrol-anim                UNKNOWN 4 :offset-assert 16)
   (charge-anim                UNKNOWN 3 :offset-assert 48)
   (attack-anim                UNKNOWN 2 :offset-assert 72)
   (knocked-anim               UNKNOWN 4 :offset-assert 88)
   (knocked-land-anim          UNKNOWN 4 :offset-assert 120)
   (yellow-hit-anim            UNKNOWN 4 :offset-assert 152)
   (blue-hit-anim              UNKNOWN 6 :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xe8
  :flag-assert         #x9000000e8
  )
|#

#|
(deftype grunt (nav-enemy)
  ((patrol-anim            grunt-anim-info            :offset-assert 600)
   (charge-anim            grunt-anim-info            :offset-assert 604)
   (attack-anim            grunt-anim-info            :offset-assert 608)
   (knocked-anim           grunt-anim-info            :offset-assert 612)
   (yellow-hit-anim        grunt-anim-info            :offset-assert 616)
   (blue-hit-anim          grunt-anim-info            :offset-assert 620)
   (intro-path             basic                      :offset-assert 624)
   (use-charge-anim-index  int8                       :offset-assert 632)
   (knocked-anim-index     int8                       :offset-assert 633)
   (jumping-ambush-path-pt int8                       :offset-assert 634)
   (grunt-flags            uint8                      :offset-assert 635)
   (state-timeout2         uint64                     :offset-assert 636)
   (next-warn-time         time-frame                     :offset-assert 644)
   (dest                   vector             :inline :offset-assert 652)
   (focus-pos              vector             :inline :offset-assert 348)
   (minimap                connection-minimap         :offset-assert 684)
   )
  :method-count-assert 186
  :size-assert         #x2b4
  :flag-assert         #xba024002b4
  (:methods
    (attack () _type_ :state 178)
    (falling-ambush () _type_ :state 179)
    (jumping-ambush () _type_ :state 180)
    (jumping-ambush-cont () _type_ :state 181)
    (wait-for-focus () _type_ :state 182)
    (spin-attack () _type_ :state 183)
    (grunt-method-184 () none 184)
    (grunt-method-185 () none 185)
    )
  )
|#

;; (define-extern *grunt-global-info* grunt-global-info)
;; (define-extern *grunt-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flitter                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flitter (nav-enemy)
  ((move-angle       float                      :offset-assert 600)
   (heading          basic                      :offset-assert 604)
   (change-dir-time  time-frame                     :offset-assert 612)
   (last-change-dir  uint64                     :offset-assert 620)
   (off-screen-timer uint64                     :offset-assert 628)
   (amb-sound-timer  uint64                     :offset-assert 636)
   (attack-time      time-frame                     :offset-assert 644)
   (target-pos       vector             :inline :offset-assert 652)
   (attack-pos       vector             :inline :offset-assert 668)
   (base-height      float                      :offset-assert 684)
   (minimap          connection-minimap         :offset-assert 688)
   )
  :method-count-assert 184
  :size-assert         #x2b8
  :flag-assert         #xb8024002b8
  (:methods
    (attack () _type_ :state 178)
    (ambush-jumping () _type_ :state 179)
    (flitter-method-180 () none 180)
    (flitter-method-181 () none 181)
    (flitter-method-182 () none 182)
    (flitter-method-183 () none 183)
    )
  )
|#

;; (define-extern check-drop-level-flitter-dirt-rubble function)
;; (define-extern *flitter-nav-enemy-info* nav-enemy-info)
;; (define-extern flitter-fall-and-play-death-anim function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; battle                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype battle-info (basic)
  ((id                                int8    :offset-assert 4)
   (notice-spec                       uint64  :offset-assert 8)
   (pick-logic                        int8    :offset-assert 16)
   (notice-distance                   float   :offset-assert 20)
   (dont-spawn-initial-until-notice?  basic   :offset-assert 24)
   (play-battle-music                 basic   :offset-assert 28)
   (min-battle-spawn-delay            uint32  :offset-assert 32)
   (max-battle-spawn-delay            uint32  :offset-assert 36)
   (min-spawner-notice-attack-delay   uint32  :offset-assert 40)
   (max-spawner-notice-attack-delay   uint32  :offset-assert 44)
   (spawner-blocked-by-player-xz      float   :offset-assert 48)
   (spawner-blocked-by-collide-radius float   :offset-assert 52)
   (pick-spawner-max-dist             float   :offset-assert 56)
   (max-count                         uint32  :offset-assert 60)
   (desired-alive-count               uint8   :offset-assert 64)
   (spawner-collide-with              uint32  :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )
|#

#|
(deftype battle-ally (structure)
  ((entity basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype battle-ally-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype battle-breed (structure)
  ((breed-type basic  :offset-assert 0)
   (percent    float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype battle-breed-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype battle-spawner (structure)
  ((flags               uint64         :offset-assert 0)
   (entity              basic          :offset-assert 8)
   (breeds              basic          :offset-assert 12)
   (creature-index      int8           :offset-assert 16)
   (ready-index         int8           :offset-assert 17)
   (attack-index        int8           :offset-assert 18)
   (mode                uint8          :offset-assert 19)
   (intro-path          basic          :offset-assert 20)
   (notice-attack-delay uint32         :offset-assert 24)
   (creature            uint64         :offset-assert 32)
   (last-spawn-time     time-frame         :offset-assert 40)
   (noticed-attack-time time-frame         :offset-assert 48)
   (attack-pos          vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
|#

#|
(deftype battle-spawner-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype battle (process-drawable)
  ((info                     basic   :offset-assert 196)
   (flags                    uint8   :offset-assert 200)
   (spawn-initial-creatures? basic   :offset-assert 204)
   (next-spawn-delay         uint32  :offset-assert 208)
   (on-notice                basic   :offset-assert 212)
   (on-hostile               basic   :offset-assert 216)
   (on-beaten                basic   :offset-assert 220)
   (max-count                uint32  :offset-assert 224)
   (count                    uint32  :offset-assert 228)
   (die-count                uint32  :offset-assert 232)
   (stat-child-count         uint16  :offset-assert 236)
   (cant-spawn-time          time-frame  :offset-assert 244)
   (jammed-starting-time     time-frame  :offset-assert 252)
   (spawners                 basic   :offset-assert 260)
   (allies                   basic   :offset-assert 264)
   )
  :method-count-assert 53
  :size-assert         #x110
  :flag-assert         #x3500900110
  ;; field on-notice uses ~A with a signed load field on-hostile uses ~A with a signed load field on-beaten uses ~A with a signed load
  (:methods
    (idle () _type_ :state 20)
    (battle-method-21 () none 21)
    (notice () _type_ :state 22)
    (hostile () _type_ :state 23)
    (beaten () _type_ :state 24)
    (battle-method-25 () none 25)
    (battle-method-26 () none 26)
    (battle-method-27 () none 27)
    (battle-method-28 () none 28)
    (battle-method-29 () none 29)
    (battle-method-30 () none 30)
    (battle-method-31 () none 31)
    (battle-method-32 () none 32)
    (battle-method-33 () none 33)
    (battle-method-34 () none 34)
    (battle-method-35 () none 35)
    (battle-method-36 () none 36)
    (battle-method-37 () none 37)
    (battle-method-38 () none 38)
    (battle-method-39 () none 39)
    (battle-method-40 () none 40)
    (battle-method-41 () none 41)
    (battle-method-42 () none 42)
    (battle-method-43 () none 43)
    (battle-method-44 () none 44)
    (battle-method-45 () none 45)
    (battle-method-46 () none 46)
    (battle-method-47 () none 47)
    (battle-method-48 () none 48)
    (battle-method-49 () none 49)
    (battle-method-50 () none 50)
    (battle-method-51 () none 51)
    (battle-method-52 () none 52)
    )
  )
|#

;; (define-extern *battles* array)
;; (define-extern battle-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; elec-gate                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype elec-gate-params (structure)
  ((bolt-spec       basic  :offset-assert 0)
   (ring-spec       basic  :offset-assert 4)
   (ring-radius-min float  :offset-assert 8)
   (ring-radius-max float  :offset-assert 12)
   (speed-mult      float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype elec-gate-bolt (structure)
  ((ring        UNKNOWN 2 :offset-assert 0)
   (bolt        basic     :offset-assert 8)
   (ring-radius float     :offset-assert 12)
   (pos         float     :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype elec-wall (structure)
  ((pos vector :inline :offset-assert 0)
   (dir vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype elec-gate (process-drawable)
  ((params             elec-gate-params         :offset-assert 196)
   (path-l             basic                    :offset-assert 148)
   (path-r             basic                    :offset-assert 200)
   (l-bolt             UNKNOWN          5       :offset-assert 204)
   (part-on            basic                    :offset-assert 164)
   (part-off           basic                    :offset-assert 364)
   (part-spawner-left  basic                    :offset-assert 368)
   (part-spawner-right basic                    :offset-assert 372)
   (on-start           basic                    :offset-assert 376)
   (on-stop            basic                    :offset-assert 380)
   (dividing-wall      elec-wall        :inline :offset-assert 396)
   (plane              UNKNOWN          2       :offset-assert 428)
   (wall-y             float                    :offset-assert 492)
   (wall-xz            float                    :offset-assert 496)
   (lightning-quality  float                    :offset-assert 500)
   (quality-enabled?   basic                    :offset-assert 504)
   )
  :method-count-assert 30
  :size-assert         #x200
  :flag-assert         #x1e01800200
  ;; field on-start uses ~A with a signed load field on-stop uses ~A with a signed load
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    (shutdown () _type_ :state 22)
    (elec-gate-method-23 () none 23)
    (elec-gate-method-24 () none 24)
    (elec-gate-method-25 () none 25)
    (elec-gate-method-26 () none 26)
    (elec-gate-method-27 () none 27)
    (elec-gate-method-28 () none 28)
    (elec-gate-method-29 () none 29)
    )
  )
|#

#|
(deftype fort-elec-gate (elec-gate)
  ((palette-id int32  :offset-assert 508)
   )
  :method-count-assert 30
  :size-assert         #x204
  :flag-assert         #x1e01900204
  (:methods
    )
  )
|#

#|
(deftype drill-elec-gate (elec-gate)
  ((palette-id int32  :offset-assert 508)
   )
  :method-count-assert 30
  :size-assert         #x204
  :flag-assert         #x1e01900204
  (:methods
    )
  )
|#

#|
(deftype caspad-elec-gate (elec-gate)
  ()
  :method-count-assert 30
  :size-assert         #x200
  :flag-assert         #x1e01800200
  (:methods
    )
  )
|#

#|
(deftype castle-elec-gate (elec-gate)
  ()
  :method-count-assert 30
  :size-assert         #x200
  :flag-assert         #x1e01800200
  (:methods
    )
  )
|#

#|
(deftype palroof-elec-gate (elec-gate)
  ((palette-id int32  :offset-assert 508)
   )
  :method-count-assert 30
  :size-assert         #x204
  :flag-assert         #x1e01900204
  (:methods
    )
  )
|#

;; (define-extern *default-elec-gate-params* object)
;; (define-extern elec-gate-post function)
;; (define-extern *caspad-elec-gate-params* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-guard-turret-button        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-guard-turret-button (basebutton)
  ()
  :method-count-assert 40
  :size-assert         #x120
  :flag-assert         #x2800a00120
  (:methods
    (pop-up () _type_ :state 39)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; meet-brutter                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype paddywagon (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype pw-iter-seg (UNKNOWN)
  ((self        basic               :offset-assert 0)
   (desired-dir vector      :inline :offset-assert 16)
   (score       float               :offset-assert 32)
   (seg         nav-segment         :offset-assert 36)
   (level       basic               :offset-assert 40)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype city-lurker (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype city-meet-brutter-info (UNKNOWN)
  ((pos         vector :inline :offset-assert 0)
   (level       basic          :offset-assert 16)
   (nav-mesh-id uint32         :offset-assert 20)
   (end-pos     vector :inline :offset-assert 32)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype city-save-lurkers-info (UNKNOWN)
  ((pos         vector :inline :offset-assert 0)
   (level       basic          :offset-assert 16)
   (nav-mesh-id uint32         :offset-assert 20)
   (end-pos     vector :inline :offset-assert 32)
   (pipe-name   basic          :offset-assert 48)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *paddywagon-constants* object)
;; (define-extern pw-iter-seg-new-dir-level function)
;; (define-extern choose-next-branch-no-exit-level function)
;; (define-extern *city-lurker-global-info* civilian-global-info)
;; (define-extern *city-lurker-nav-enemy-info* nav-enemy-info)
;; (define-extern *city-meet-brutter-vehicle-info* object)
;; (define-extern *meet-brutter-position* array)
;; (define-extern *city-save-lurkers-pipe-info* array)
;; (define-extern *city-save-lurkers-vehicle-info* object)
;; (define-extern *save-lurkers-position* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctysluma-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctysluma-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-ctysluma-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neon-baron-part                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype neon-baron (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype hide-door-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *baron-neon-skull* array)
;; (define-extern *city-baron-group-ids* array)
;; (define-extern *neon-baron-flashing-acc* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palace-ocean                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-palace* object)
;; (define-extern *ocean-colors-palace* object)
;; (define-extern *ocean-near-indices-palace* ocean-near-indices)
;; (define-extern *ocean-trans-indices-palace* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-palace* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-palace* ocean-mid-masks)
;; (define-extern *ocean-map-palace* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-turbo-pad (structure)
  ((position vector :inline :offset-assert 0)
   (handle   uint64         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype race-decision-point (structure)
  ((pos           float  :offset-assert 0)
   (decision-type uint8  :offset-assert 4)
   (shortcuts     uint8  :offset-assert 5)
   (safe-paths    uint8  :offset-assert 6)
   )
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )
|#

#|
(deftype race-racer-info (structure)
  ((rider       uint8  :offset-assert 0)
   (vehicle     uint8  :offset-assert 1)
   (flags       uint8  :offset-assert 2)
   (seek-offset int8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-info (basic)
  ((race-mesh-name           basic          :offset-assert 4)
   (path-group-name          basic          :offset-assert 8)
   (task-node                uint16         :offset-assert 12)
   (mesh                     basic          :offset-assert 16)
   (ai-min-speed-factor      float          :offset-assert 20)
   (ai-max-speed-factor      float          :offset-assert 24)
   (ai-spread-factor         float          :offset-assert 28)
   (start-sphere             sphere :inline :offset-assert 32)
   (start-dir                vector :inline :offset-assert 48)
   (finish-sphere            sphere :inline :offset-assert 64)
   (finish-dir               vector :inline :offset-assert 80)
   (player-intro-pos         vector :inline :offset-assert 96)
   (flags                    uint8          :offset-assert 112)
   (score                    uint8          :offset-assert 113)
   (lap-count                int8           :offset-assert 114)
   (racer-count              int8           :offset-assert 115)
   (turbo-pad-count          int8           :offset-assert 116)
   (map-index                int8           :offset-assert 117)
   (decision-point-count     int8           :offset-assert 118)
   (safe-paths               uint8          :offset-assert 119)
   (turbo-pad-array          uint32         :offset-assert 120)
   (racer-array              uint32         :offset-assert 124)
   (decision-point-array     uint32         :offset-assert 128)
   (level                    basic          :offset-assert 132)
   (borrow-level             basic          :offset-assert 136)
   (borrow                   basic          :offset-assert 140)
   (manager                  uint64         :offset-assert 144)
   (manager-handle-init-hack basic          :offset-assert 144)
   (hatch-actor-name         basic          :offset-assert 152)
   (countdown-scene          basic          :offset-assert 156)
   (complete-continue        basic          :offset-assert 160)
   (start-camera             basic          :offset-assert 164)
   (go-speech                uint16         :offset-assert 168)
   )
  :method-count-assert 10
  :size-assert         #xaa
  :flag-assert         #xa000000aa
  ;; field borrow uses ~A with a signed load
  (:methods
    (race-info-method-9 () none 9)
    )
  )
|#

#|
(deftype racer-state (structure)
  ((position          vector  :inline :offset-assert 0)
   (racer             uint64          :offset-assert 16)
   (flags             uint8           :offset-assert 24)
   (rank              int8            :offset-assert 25)
   (finish-count      int8            :offset-assert 26)
   (lap-count         int8            :offset-assert 27)
   (lap-quadrant      int8            :offset-assert 28)
   (rider             uint8           :offset-assert 29)
   (lap-distance      float           :offset-assert 32)
   (lap-distance-prev float           :offset-assert 36)
   (pos               float           :offset-assert 40)
   (target-pos-offset float           :offset-assert 44)
   (speed-factor      float           :offset-assert 48)
   (finish-time       uint32          :offset-assert 52)
   (lap-start         uint32          :offset-assert 56)
   (best-lap-time     uint32          :offset-assert 60)
   (lap-time-array    UNKNOWN 5       :offset-assert 64)
   (start-position    vector  :inline :offset-assert 96)
   )
  :method-count-assert 14
  :size-assert         #x70
  :flag-assert         #xe00000070
  (:methods
    (racer-state-method-9 () none 9)
    (racer-state-method-10 () none 10)
    (racer-state-method-11 () none 11)
    (racer-state-method-12 () none 12)
    (racer-state-method-13 () none 13)
    )
  )
|#

#|
(deftype race-state (structure)
  ((info                 basic               :offset-assert 0)
   (flags                uint8               :offset-assert 4)
   (state                uint8               :offset-assert 5)
   (racer-count          int8                :offset-assert 6)
   (finished-count       int8                :offset-assert 7)
   (i-player             int8                :offset-assert 8)
   (i-countdown          int8                :offset-assert 9)
   (manager              uint64              :offset-assert 16)
   (scene-player         uint64              :offset-assert 24)
   (race-signal          uint64              :offset-assert 32)
   (arrow                uint64              :offset-assert 40)
   (hud-timer            uint64              :offset-assert 48)
   (hud-lap-counter      uint64              :offset-assert 56)
   (hud-turbo-counter    uint64              :offset-assert 64)
   (hud-position         uint64              :offset-assert 72)
   (current-time         uint32              :offset-assert 80)
   (countdown-start-time uint32              :offset-assert 84)
   (race-start-time      uint32              :offset-assert 88)
   (rankings             UNKNOWN     10      :offset-assert 92)
   (target-pos           float               :offset-assert 104)
   (suck-factor          float               :offset-assert 108)
   (racer-array          UNKNOWN     10      :offset-assert 112)
   (player-intro-curve   cubic-curve :inline :offset-assert 1232)
   )
  :method-count-assert 19
  :size-assert         #x510
  :flag-assert         #x1300000510
  (:methods
    (race-state-method-9 () none 9)
    (race-state-method-10 () none 10)
    (race-state-method-11 () none 11)
    (race-state-method-12 () none 12)
    (race-state-method-13 () none 13)
    (race-state-method-14 () none 14)
    (race-state-method-15 () none 15)
    (race-state-method-16 () none 16)
    (race-state-method-17 () none 17)
    (race-state-method-18 () none 18)
    )
  )
|#

#|
(deftype race-manager (process)
  ((race-state           race-state  :offset-assert 124)
   (state-time           time-frame      :offset-assert 132)
   (player-on-track-time time-frame      :offset-assert 140)
   (message-id           uint32      :offset-assert 148)
   (finish-sound-id      uint32      :offset-assert 152)
   )
  :method-count-assert 28
  :size-assert         #xa0
  :flag-assert         #x1c002000a0
  (:methods
    (race-manager-method-9 () none 9)
    (race-manager-method-10 () none 10)
    (race-manager-method-11 () none 11)
    (race-manager-method-12 () none 12)
    (race-manager-method-13 () none 13)
    (race-manager-method-14 () none 14)
    (race-manager-method-15 () none 15)
    (race-manager-method-16 () none 16)
    (race-manager-method-17 () none 17)
    (race-manager-method-18 () none 18)
    (race-manager-method-19 () none 19)
    (race-manager-method-20 () none 20)
    (race-manager-method-21 () none 21)
    (race-manager-method-22 () none 22)
    (race-manager-method-23 () none 23)
    (race-manager-method-24 () none 24)
    (race-manager-method-25 () none 25)
    (race-manager-method-26 () none 26)
    (race-manager-method-27 () none 27)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-mesh                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-mesh-hash-search (structure)
  ((best-dist             float                  :offset-assert 0)
   (debug-cells-searched  int32                  :offset-assert 4)
   (debug-slices-searched int32                  :offset-assert 8)
   (bounds                bounding-box4w :inline :offset-assert 16)
   (cell-quads            UNKNOWN        2       :offset-assert 48)
   (slice-quads           UNKNOWN        4       :offset-assert 80)
   (cell-bits             UNKNOWN        2       :offset-assert 48)
   (slice-bits            UNKNOWN        2       :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

#|
(deftype race-mesh-slice-query (structure)
  ((slice-id      int16           :offset-assert 0)
   (lap-dist      float           :offset-assert 4)
   (pt-on-slice   vector  :inline :offset-assert 16)
   (slice-corners UNKNOWN 4       :offset-assert 32)
   (search-sphere sphere  :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

#|
(deftype race-path-edge-info (structure)
  ((sample-t float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-path-sample (structure)
  ((bytes    UNKNOWN    32      :offset-assert 0)
   (pos      vector     :inline :offset-assert 0)
   (quat     quaternion :inline :offset-assert 16)
   (stick-x  int8               :offset-assert 12)
   (stick-y  int8               :offset-assert 13)
   (throttle uint8              :offset-assert 14)
   (flags    uint8              :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-path (structure)
  ((sample-count uint16  :offset-assert 0)
   (record-id    int8    :offset-assert 2)
   (pad          uint8   :offset-assert 3)
   (samples      uint32  :offset-assert 4)
   (edge-infos   uint32  :offset-assert 8)
   )
  :method-count-assert 13
  :size-assert         #xc
  :flag-assert         #xd0000000c
  (:methods
    (race-path-method-9 () none 9)
    (race-path-method-10 () none 10)
    (race-path-method-11 () none 11)
    (race-path-method-12 () none 12)
    )
  )
|#

#|
(deftype race-path-group (structure)
  ((name       basic     :offset-assert 0)
   (path-count int8      :offset-assert 4)
   (pad        UNKNOWN 3 :offset-assert 5)
   (paths      uint32    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype race-mesh-edge (structure)
  ((left     vector :inline :offset-assert 0)
   (right    vector :inline :offset-assert 16)
   (lap-dist float          :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-mesh-slice (structure)
  ((edge-index-array UNKNOWN 2 :offset-assert 0)
   (start-edge       int16     :offset-assert 0)
   (end-edge         int16     :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-mesh-hash-cell (structure)
  ((first-slice int16  :offset-assert 0)
   (slice-count uint8  :offset-assert 2)
   (pad         uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-mesh-hash (structure)
  ((cells-wide  int8           :offset-assert 0)
   (cells-tall  int8           :offset-assert 1)
   (cell-length float          :offset-assert 4)
   (cells       uint32         :offset-assert 8)
   (slice-table uint32         :offset-assert 12)
   (origin      vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-mesh (basic)
  ((version          uint8            :offset-assert 4)
   (path-group-count uint8            :offset-assert 5)
   (flags            uint8            :offset-assert 6)
   (pad              UNKNOWN        1 :offset-assert 7)
   (slice-count      int16            :offset-assert 8)
   (edge-count       int16            :offset-assert 10)
   (slices           uint32           :offset-assert 12)
   (edges            uint32           :offset-assert 16)
   (hash             race-mesh-hash   :offset-assert 20)
   (path-groups      uint32           :offset-assert 24)
   )
  :method-count-assert 20
  :size-assert         #x1c
  :flag-assert         #x140000001c
  (:methods
    (race-mesh-method-9 () none 9)
    (race-mesh-method-10 () none 10)
    (race-mesh-method-11 () none 11)
    (race-mesh-method-12 () none 12)
    (race-mesh-method-13 () none 13)
    (race-mesh-method-14 () none 14)
    (race-mesh-method-15 () none 15)
    (race-mesh-method-16 () none 16)
    (race-mesh-method-17 () none 17)
    (race-mesh-method-18 () none 18)
    (race-mesh-method-19 () none 19)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-signal-banner (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype race-signal (process-drawable)
  ((pos           vector      :inline :offset-assert 204)
   (y-offset      float               :offset-assert 220)
   (dest-y-offset float               :offset-assert 224)
   (bob-time      time-frame              :offset-assert 228)
   (start-time    time-frame              :offset-assert 236)
   (banner        uint64              :offset-assert 244)
   (curve         cubic-curve :inline :offset-assert 252)
   )
  :method-count-assert 30
  :size-assert         #x140
  :flag-assert         #x1e00c00140
  (:methods
    (spawn-banner () _type_ :state 20)
    (idle () _type_ :state 21)
    (count-3 () _type_ :state 22)
    (count-2 () _type_ :state 23)
    (count-1 () _type_ :state 24)
    (count-go () _type_ :state 25)
    (die () _type_ :state 26)
    (test () _type_ :state 27)
    (race-signal-method-28 () none 28)
    (race-signal-method-29 () none 29)
    )
  )
|#

#|
(deftype stadium-racer (vehicle-rider)
  ((rider-type uint8  :offset-assert 217)
   )
  :method-count-assert 36
  :size-assert         #xde
  :flag-assert         #x24006000de
  (:methods
    )
  )
|#

#|
(deftype errol-rider (stadium-racer)
  ()
  :method-count-assert 36
  :size-assert         #xde
  :flag-assert         #x24006000de
  (:methods
    )
  )
|#

#|
(deftype turbo-pickup (process-drawable)
  ((available basic  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (turbo-pickup-method-22 () none 22)
    )
  )
|#

;; (define-extern race-signal-banner-init-by-other function)
;; (define-extern race-signal-banner-spawn function)
;; (define-extern race-signal-event-handler function)
;; (define-extern race-signal-init-by-other function)
;; (define-extern race-signal-spawn function)
;; (define-extern turbo-pickup-init-by-other function)
;; (define-extern turbo-pickup-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-racer                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-control (structure)
  ((state        race-state               :offset-assert 0)
   (mesh         basic                    :offset-assert 4)
   (path-select  int8                     :offset-assert 8)
   (path-group   race-path-group          :offset-assert 12)
   (path         race-path                :offset-assert 16)
   (path-t       float                    :offset-assert 20)
   (racer-state  racer-state              :offset-assert 24)
   (path-sample  race-path-sample :inline :offset-assert 32)
   (lin-velocity vector           :inline :offset-assert 64)
   (ang-velocity vector           :inline :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x60
  :flag-assert         #xd00000060
  (:methods
    (race-control-method-9 () none 9)
    (race-control-method-10 () none 10)
    (race-control-method-11 () none 11)
    (race-control-method-12 () none 12)
    )
  )
|#

#|
(deftype vehicle-racer (vehicle)
  ((race                  race-control       :inline :offset-assert 876)
   (ai-controls           vehicle-controls   :inline :offset-assert 972)
   (rider-hand-joint      int8                       :offset-assert 988)
   (turbo-pickup-count    int8                       :offset-assert 989)
   (minimap               connection-minimap         :offset-assert 992)
   (shortcut-speed-factor float                      :offset-assert 996)
   (path-deviation        float                      :offset-assert 1000)
   (shortcut-time         time-frame                     :offset-assert 1004)
   )
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  (:methods
    (waiting-race () _type_ :state 144)
    (waiting-for-start () _type_ :state 145)
    (racing () _type_ :state 146)
    (race-finished () _type_ :state 147)
    (vehicle-racer-method-148 () none 148)
    (vehicle-racer-method-149 () none 149)
    (vehicle-racer-method-150 () none 150)
    (vehicle-racer-method-151 () none 151)
    (vehicle-racer-method-152 () none 152)
    (vehicle-racer-method-153 () none 153)
    (vehicle-racer-method-154 () none 154)
    (vehicle-racer-method-155 () none 155)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *race-info-array* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-manager                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern race-find-ground function)
;; (define-extern *race-state* object)
;; (define-extern *race-rigid-body-queue* object)
;; (define-extern race-manager-event-handler function)
;; (define-extern *race-manager* object)
;; (define-extern race-manager-init-by-other function)
;; (define-extern race-start function)
;; (define-extern race-kill function)
;; (define-extern type-from-race-vehicle-type function)
;; (define-extern race-vehicle-entity-hack function)
;; (define-extern race-level-activate function)
;; (define-extern race-level-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-hud                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern rminutes function)
;; (define-extern rseconds function)
;; (define-extern rmicroseconds function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-recorder                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pilrec-sample (structure)
  ((sample-time time-frame             :offset-assert 0)
   (pos         vector     :inline :offset-assert 16)
   (quat        quaternion :inline :offset-assert 32)
   (stick-x     float              :offset-assert 48)
   (stick-y     float              :offset-assert 52)
   (throttle    float              :offset-assert 56)
   (flags       uint8              :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x3d
  :flag-assert         #x90000003d
  )
|#

#|
(deftype pilot-recorder-samples (basic)
  ((samples uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype pilot-recorder (process)
  ((info                 basic          :offset-assert 124)
   (mesh                 basic          :offset-assert 128)
   (select-race          uint64         :offset-assert 132)
   (path-num             int32          :offset-assert 140)
   (sample-count         int32          :offset-assert 144)
   (samples              uint32         :offset-assert 148)
   (state-time           time-frame         :offset-assert 156)
   (start-time           time-frame         :offset-assert 164)
   (start-record-plane   plane  :inline :offset-assert 172)
   (start-record-center  vector :inline :offset-assert 188)
   (finish-record-plane  plane  :inline :offset-assert 204)
   (finish-record-center vector :inline :offset-assert 220)
   (prev-pos             vector :inline :offset-assert 236)
   )
  :method-count-assert 31
  :size-assert         #x100
  :flag-assert         #x1f00800100
  (:methods
    (pilot-recorder-method-9 () none 9)
    (pilot-recorder-method-10 () none 10)
    (pilot-recorder-method-11 () none 11)
    (pilot-recorder-method-12 () none 12)
    (pilot-recorder-method-13 () none 13)
    (die-fast () _type_ :state 14)
    (idle () _type_ :state 15)
    (active () _type_ :state 16)
    (recording () _type_ :state 17)
    (fail-full () _type_ :state 18)
    (finished () _type_ :state 19)
    (save () _type_ :state 20)
    (fail-save () _type_ :state 21)
    (pilot-recorder-method-22 () none 22)
    (pilot-recorder-method-23 () none 23)
    (pilot-recorder-method-24 () none 24)
    (pilot-recorder-method-25 () none 25)
    (pilot-recorder-method-26 () none 26)
    (pilot-recorder-method-27 () none 27)
    (pilot-recorder-method-28 () none 28)
    (pilot-recorder-method-29 () none 29)
    (pilot-recorder-method-30 () none 30)
    )
  )
|#

;; (define-extern *pilot-recorder-samples* object)
;; (define-extern delete-race-path function)
;; (define-extern *pilot-recorder* object)
;; (define-extern pilot-recorder-init-by-other function)
;; (define-extern start-pilot-recorder function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; racebike                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-race-bike (vehicle-racer)
  ((steering-wheel basic  :offset-assert 1012)
   )
  :method-count-assert 156
  :size-assert         #x3fc
  :flag-assert         #x9c038003fc
  (:methods
    )
  )
|#

#|
(deftype race-bike-d (vehicle-race-bike)
  ()
  :method-count-assert 156
  :size-assert         #x3fc
  :flag-assert         #x9c038003fc
  (:methods
    )
  )
|#

#|
(deftype race-bike-e (vehicle-race-bike)
  ()
  :method-count-assert 156
  :size-assert         #x3fc
  :flag-assert         #x9c038003fc
  (:methods
    )
  )
|#

;; (define-extern *race-bike-d-constants* object)
;; (define-extern *race-bike-e-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-race-obs               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stdmb-race-hatch (process-drawable)
  ((tt        float  :offset-assert 196)
   (tt-target float  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    (idle () _type_ :state 20)
    (stdmb-race-hatch-method-21 () none 21)
    (stdmb-race-hatch-method-22 () none 22)
    )
  )
|#

#|
(deftype stdmb-platform (stdmb-race-hatch)
  ()
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    )
  )
|#

;; (define-extern stdmb-race-hatch-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spyder                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spyder-shot (metalhead-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype spyder (nav-enemy)
  ((los               los-control :inline :offset-assert 604)
   (joint             basic               :offset-assert 752)
   (start-pos         vector      :inline :offset-assert 764)
   (focus-pos         vector      :inline :offset-assert 348)
   (face-pos          vector      :inline :offset-assert 796)
   (my-up-vector      vector      :inline :offset-assert 812)
   (status-flags      uint64              :offset-assert 828)
   (change-dir-timer  uint64              :offset-assert 836)
   (fire-info         UNKNOWN     2       :offset-assert 844)
   (joint-ik          UNKNOWN     4       :offset-assert 876)
   (delta-y-ik        UNKNOWN     4       :offset-assert 892)
   (predator-effect?  basic               :offset-assert 908)
   (shock-effect-time time-frame              :offset-assert 916)
   (shock-effect-end  uint64              :offset-assert 924)
   (fade              float               :offset-assert 932)
   (dest-fade         float               :offset-assert 936)
   )
  :method-count-assert 186
  :size-assert         #x3b0
  :flag-assert         #xba033003b0
  (:methods
    (attack () _type_ :state 178)
    (backup () _type_ :state 179)
    (spyder-method-180 () none 180)
    (spyder-method-181 () none 181)
    (spyder-method-182 () none 182)
    (spyder-method-183 () none 183)
    (spyder-method-184 () none 184)
    (spyder-method-185 () none 185)
    )
  )
|#

#|
(deftype ik-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *spyder-nav-enemy-info* nav-enemy-info)
;; (define-extern spyder-travel-post function)
;; (define-extern spyder-face-player-post function)
;; (define-extern *spyder-ik-setup* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crimson-guard-level            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guard-level-anim-info (UNKNOWN)
  ((anim-index       UNKNOWN 2 :offset-assert 0)
   (anim-index-front int32     :offset-assert 0)
   (anim-index-back  int32     :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype guard-level-global-info (UNKNOWN)
  ((prev-yellow-hit         int8      :offset-assert 4)
   (prev-blue-hit           int8      :offset-assert 5)
   (knocked                 UNKNOWN 2 :offset-assert 8)
   (knocked-land            UNKNOWN 2 :offset-assert 16)
   (anim-knocked-front      int32     :offset-assert 8)
   (anim-knocked-back       int32     :offset-assert 12)
   (anim-knocked-front-land int32     :offset-assert 16)
   (anim-knocked-back-land  int32     :offset-assert 20)
   (yellow-hit-anim         UNKNOWN 2 :offset-assert 24)
   (yellow-land-anim        UNKNOWN 2 :offset-assert 40)
   (blue-hit-anim           UNKNOWN 1 :offset-assert 56)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype guard-level-shoot-info (UNKNOWN)
  ((anim-index int32  :offset-assert 0)
   (start      float  :offset-assert 4)
   (end        float  :offset-assert 8)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype crimson-guard-level (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype crimson-guard-level-params (UNKNOWN)
  ((pos            vector     :inline :offset-assert 0)
   (quat           quaternion :inline :offset-assert 16)
   (nav-mesh       basic              :offset-assert 32)
   (handle         uint64             :offset-assert 40)
   (transport-side uint32             :offset-assert 48)
   (weapon         int32              :offset-assert 52)
   (proc           basic              :offset-assert 56)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *crimson-guard-fact* fact-info-enemy-defaults)
;; (define-extern *crimson-guard-level-global-info* guard-level-global-info)
;; (define-extern *crimson-guard-level-info* nav-enemy-info)
;; (define-extern *crimson-guard-level-blast-info* nav-enemy-info)
;; (define-extern *crimson-guard-level-grenade-info* nav-enemy-info)
;; (define-extern *crimson-guard-level-sniper-info* nav-enemy-info)
;; (define-extern *crimson-guard-level-tazer-info* nav-enemy-info)
;; (define-extern crimson-guard-level-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-conversation             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gconv-speech (basic)
  ((name0     basic   :offset-assert 4)
   (name1     basic   :offset-assert 8)
   (hold-time uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype gconv-dialogue (basic)
  ((speeches basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype gconv-dialogues (basic)
  ((dialogues basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype guard-conversation (process-drawable)
  ((triggered?        basic   :offset-assert 196)
   (actor-group       basic   :offset-assert 200)
   (actor-count       int8    :offset-assert 204)
   (remaining         int8    :offset-assert 205)
   (skip-mask         uint32  :offset-assert 208)
   (last-playing-time time-frame  :offset-assert 212)
   )
  :method-count-assert 25
  :size-assert         #xe0
  :flag-assert         #x19006000e0
  (:methods
    (dormant () _type_ :state 20)
    (active () _type_ :state 21)
    (notice () _type_ :state 22)
    (die () _type_ :state 23)
    (guard-conversation-method-24 () none 24)
    )
  )
|#

;; (define-extern *gconv-dialogues* gconv-dialogues)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transport-level                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype transport-level (process-focusable)
  ((y-dest                float     :offset-assert 200)
   (last-guard-spawn-time time-frame    :offset-assert 204)
   (nav-mesh              basic     :offset-assert 212)
   (spawn-side            uint32    :offset-assert 216)
   (spawn?                basic     :offset-assert 220)
   (leave-time            time-frame    :offset-assert 228)
   (max-guard             uint32    :offset-assert 236)
   (count-guard           uint32    :offset-assert 240)
   (max-time              float     :offset-assert 244)
   (spawn-time            time-frame    :offset-assert 252)
   (ambient-sound-id      uint32    :offset-assert 260)
   (num-wanted-guards     uint32    :offset-assert 264)
   (guards                UNKNOWN 8 :offset-assert 268)
   )
  :method-count-assert 35
  :size-assert         #x150
  :flag-assert         #x2300d00150
  (:methods
    (come-down () _type_ :state 27)
    (idle () _type_ :state 28)
    (leave () _type_ :state 29)
    (die-fast () _type_ :state 30)
    (transport-level-method-31 () none 31)
    (transport-level-method-32 () none 32)
    (transport-level-method-33 () none 33)
    (transport-level-method-34 () none 34)
    )
  )
|#

;; (define-extern transport-level-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-formation-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype form-search-info (structure)
  ((form           basic      :offset-assert 0)
   (count          int32      :offset-assert 4)
   (pos-table      uint32     :offset-assert 8)
   (actor-position UNKNOWN 16 :offset-assert 16)
   (actor-valid?   UNKNOWN 16 :offset-assert 272)
   (index-table    UNKNOWN 16 :offset-assert 336)
   (dest-pos-table UNKNOWN 16 :offset-assert 400)
   (best-mapping   UNKNOWN 16 :offset-assert 656)
   (best-cost      float      :offset-assert 720)
   )
  :method-count-assert 9
  :size-assert         #x2d4
  :flag-assert         #x9000002d4
  )
|#

#|
(deftype hover-actor (structure)
  ((handle uint64         :offset-assert 0)
   (offset vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype hover-formation-control (basic)
  ((search-info    form-search-info :inline :offset-assert 16)
   (entity         basic                    :offset-assert 740)
   (anchor-proc    uint64                   :offset-assert 744)
   (actor-table    UNKNOWN          16      :offset-assert 752)
   (flags          uint16                   :offset-assert 880)
   (formation-type uint64                   :offset-assert 888)
   (center         vector           :inline :offset-assert 896)
   (zone-to-world  matrix           :inline :offset-assert 912)
   (world-to-zone  matrix           :inline :offset-assert 976)
   (offset         vector           :inline :offset-assert 1040)
   (focus-quat     quaternion       :inline :offset-assert 1056)
   (notice-dist    float                    :offset-assert 1072)
   (rotation-inc   float                    :offset-assert 1076)
   )
  :method-count-assert 21
  :size-assert         #x438
  :flag-assert         #x1500000438
  (:methods
    (hover-formation-control-method-9 () none 9)
    (hover-formation-control-method-10 () none 10)
    (hover-formation-control-method-11 () none 11)
    (hover-formation-control-method-12 () none 12)
    (hover-formation-control-method-13 () none 13)
    (hover-formation-control-method-14 () none 14)
    (hover-formation-control-method-15 () none 15)
    (hover-formation-control-method-16 () none 16)
    (hover-formation-control-method-17 () none 17)
    (hover-formation-control-method-18 () none 18)
    (hover-formation-control-method-19 () none 19)
    (hover-formation-control-method-20 () none 20)
    )
  )
|#

#|
(deftype hover-formation (process)
  ((formation       basic   :offset-assert 124)
   (path            basic   :offset-assert 128)
   (formation-timer uint64  :offset-assert 132)
   )
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  (:methods
    (hover-formation-method-9 () none 9)
    (hover-formation-method-10 () none 10)
    (hover-formation-method-11 () none 11)
    (hover-formation-method-12 () none 12)
    (hover-formation-method-13 () none 13)
    (hover-formation-method-14 () none 14)
    (hover-formation-method-15 () none 15)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-control-h            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-network-adjacency (structure)
  ((index int32  :offset-assert 0)
   (dist  float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype nav-network-adjacency-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype list-node (structure)
  ((next list-node  :offset-assert 0)
   (prev list-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype nav-network-path-node (list-node)
  ()
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  ;; Failed to read fields.
  )
|#

#|
(deftype nav-network-info (structure)
  ((index     int32                         :offset-assert 0)
   (pos       vector                :inline :offset-assert 16)
   (path-node nav-network-path-node :inline :offset-assert 32)
   (count     int32                         :offset-assert 60)
   (adjacency uint32                        :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype nav-network-info-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype hover-nav-sphere (list-node)
  ((sphere sphere :inline :offset-assert 16)
   (handle uint64         :offset-assert 32)
   (timer  uint64         :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype hover-nav-path-segment (list-node)
  ((curve-matrix matrix  :inline :offset-assert 16)
   (pos-index    UNKNOWN 2       :offset-assert 80)
   (dist         float           :offset-assert 88)
   (du           float           :offset-assert 92)
   )
  :method-count-assert 10
  :size-assert         #x60
  :flag-assert         #xa00000060
  (:methods
    (hover-nav-path-segment-method-9 () none 9)
    )
  )
|#

#|
(deftype hover-nav-path-info (structure)
  ((segment-list hover-nav-path-segment  :offset-assert 0)
   (tail-segment hover-nav-path-segment  :offset-assert 4)
   (curr-segment hover-nav-path-segment  :offset-assert 8)
   (curr-u       float                   :offset-assert 12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (hover-nav-path-info-method-9 () none 9)
    )
  )
|#

#|
(deftype path-index-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype nav-network (basic)
  ((network           basic                          :offset-assert 4)
   (dummy             nav-network-info       :inline :offset-assert 16)
   (control-handle    uint64                         :offset-assert 88)
   (list-table        UNKNOWN                5       :offset-assert 96)
   (open-list         nav-network-path-node          :offset-assert 96)
   (closed-list       nav-network-path-node          :offset-assert 100)
   (sphere-list       hover-nav-sphere               :offset-assert 108)
   (free-segment-list hover-nav-path-segment         :offset-assert 104)
   (free-sphere-list  hover-nav-sphere               :offset-assert 112)
   (segment-pool      uint32                         :offset-assert 116)
   (sphere-pool       uint32                         :offset-assert 120)
   )
  :method-count-assert 33
  :size-assert         #x7c
  :flag-assert         #x210000007c
  (:methods
    (nav-network-method-9 () none 9)
    (nav-network-method-10 () none 10)
    (nav-network-method-11 () none 11)
    (nav-network-method-12 () none 12)
    (nav-network-method-13 () none 13)
    (nav-network-method-14 () none 14)
    (nav-network-method-15 () none 15)
    (nav-network-method-16 () none 16)
    (nav-network-method-17 () none 17)
    (nav-network-method-18 () none 18)
    (nav-network-method-19 () none 19)
    (nav-network-method-20 () none 20)
    (nav-network-method-21 () none 21)
    (nav-network-method-22 () none 22)
    (nav-network-method-23 () none 23)
    (nav-network-method-24 () none 24)
    (nav-network-method-25 () none 25)
    (nav-network-method-26 () none 26)
    (nav-network-method-27 () none 27)
    (nav-network-method-28 () none 28)
    (nav-network-method-29 () none 29)
    (nav-network-method-30 () none 30)
    (nav-network-method-31 () none 31)
    (nav-network-method-32 () none 32)
    )
  )
|#

#|
(deftype hover-nav-params (structure)
  ((max-speed              float  :offset-assert 0)
   (max-acceleration       float  :offset-assert 4)
   (friction               float  :offset-assert 8)
   (nav-collide-prim-index int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype hover-nav-control (basic)
  ((root                        basic                       :offset-assert 4)
   (nav                         basic                       :offset-assert 8)
   (flags                       uint16                      :offset-assert 12)
   (params                      hover-nav-params            :offset-assert 16)
   (path-timer                  uint64                      :offset-assert 24)
   (transvv                     vector              :inline :offset-assert 32)
   (dest-pos                    vector              :inline :offset-assert 48)
   (dest-vel                    vector              :inline :offset-assert 64)
   (dest-move-dir               vector              :inline :offset-assert 80)
   (dest-offset                 vector              :inline :offset-assert 96)
   (move-dir                    vector              :inline :offset-assert 112)
   (nav-collide-impulse         vector              :inline :offset-assert 128)
   (nav-collide-impulse-len     float                       :offset-assert 144)
   (dest-speed                  float                       :offset-assert 148)
   (local-dist                  float                       :offset-assert 152)
   (speed                       float                       :offset-assert 156)
   (max-los-speed               float                       :offset-assert 160)
   (target-speed                float                       :offset-assert 164)
   (target-acceleration         float                       :offset-assert 168)
   (speed-dest                  float                       :offset-assert 172)
   (path-info                   hover-nav-path-info :inline :offset-assert 176)
   (curr-dest-pt                int32                       :offset-assert 192)
   (los-obstruction-distance    float                       :offset-assert 196)
   (los-last-clear-time         time-frame                      :offset-assert 200)
   (max-speed-multiplier        float                       :offset-assert 208)
   (max-acceleration-multiplier float                       :offset-assert 212)
   )
  :method-count-assert 32
  :size-assert         #xd8
  :flag-assert         #x20000000d8
  (:methods
    (hover-nav-control-method-9 () none 9)
    (hover-nav-control-method-10 () none 10)
    (hover-nav-control-method-11 () none 11)
    (hover-nav-control-method-12 () none 12)
    (hover-nav-control-method-13 () none 13)
    (hover-nav-control-method-14 () none 14)
    (hover-nav-control-method-15 () none 15)
    (hover-nav-control-method-16 () none 16)
    (hover-nav-control-method-17 () none 17)
    (hover-nav-control-method-18 () none 18)
    (hover-nav-control-method-19 () none 19)
    (hover-nav-control-method-20 () none 20)
    (hover-nav-control-method-21 () none 21)
    (hover-nav-control-method-22 () none 22)
    (hover-nav-control-method-23 () none 23)
    (hover-nav-control-method-24 () none 24)
    (hover-nav-control-method-25 () none 25)
    (hover-nav-control-method-26 () none 26)
    (hover-nav-control-method-27 () none 27)
    (hover-nav-control-method-28 () none 28)
    (hover-nav-control-method-29 () none 29)
    (hover-nav-control-method-30 () none 30)
    (hover-nav-control-method-31 () none 31)
    )
  )
|#

;; (define-extern *hover-nav-time-offset* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-enemy-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hover-enemy-info (structure)
  ((fly-forward-anim    int32  :offset-assert 0)
   (fly-backward-anim   int32  :offset-assert 4)
   (fly-left-anim       int32  :offset-assert 8)
   (fly-right-anim      int32  :offset-assert 12)
   (shoot-anim          int32  :offset-assert 16)
   (main-joint          int32  :offset-assert 20)
   (gun-base            int32  :offset-assert 24)
   (engine-left         int32  :offset-assert 28)
   (engine-right        int32  :offset-assert 32)
   (thrust-rotate-left  float  :offset-assert 36)
   (thrust-rotate-right float  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype hover-enemy (enemy)
  ((hover                      basic                    :offset-assert 528)
   (hover-info                 hover-enemy-info         :offset-assert 532)
   (formation-entity           basic                    :offset-assert 536)
   (fly-anim-speed             float                    :offset-assert 540)
   (restart-fly-anims          basic                    :offset-assert 544)
   (main-joint-acc             vector           :inline :offset-assert 556)
   (main-joint-vel             vector           :inline :offset-assert 572)
   (main-joint-pos             vector           :inline :offset-assert 588)
   (thrust                     UNKNOWN          2       :offset-assert 604)
   (rotation-vec               vector           :inline :offset-assert 620)
   (dest-pos                   vector           :inline :offset-assert 636)
   (offset                     vector           :inline :offset-assert 652)
   (surface-normal             vector           :inline :offset-assert 668)
   (local-dir                  vector           :inline :offset-assert 684)
   (scale                      float                    :offset-assert 700)
   (scale-timer                uint64                   :offset-assert 708)
   (hit-surface?               basic                    :offset-assert 716)
   (knocked-start-level        float                    :offset-assert 720)
   (knocked-fall-dist          float                    :offset-assert 724)
   (flying-death-anim          int32                    :offset-assert 728)
   (flying-death-transv        vector           :inline :offset-assert 732)
   (flying-death-engine        int32                    :offset-assert 748)
   (flying-death-thrust-rotate float                    :offset-assert 752)
   (flying-death-spin          float                    :offset-assert 756)
   (flying-death-spin-dest     float                    :offset-assert 760)
   (flying-death-spin-axis     vector           :inline :offset-assert 764)
   )
  :method-count-assert 156
  :size-assert         #x310
  :flag-assert         #x9c02900310
  (:methods
    (hover-enemy-method-137 () none 137)
    (hover-enemy-method-138 () none 138)
    (hover-enemy-method-139 () none 139)
    (hover-enemy-method-140 () none 140)
    (hover-enemy-method-141 () none 141)
    (hover-enemy-method-142 () none 142)
    (hover-enemy-method-143 () none 143)
    (hover-enemy-method-144 () none 144)
    (hover-enemy-method-145 () none 145)
    (hover-enemy-method-146 () none 146)
    (hover-enemy-method-147 () none 147)
    (hover-enemy-method-148 () none 148)
    (hover-enemy-method-149 () none 149)
    (hover-enemy-method-150 () none 150)
    (hover-enemy-method-151 () none 151)
    (hover-enemy-method-152 () none 152)
    (hover-enemy-method-153 () none 153)
    (hover-enemy-method-154 () none 154)
    (hover-enemy-method-155 () none 155)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-network              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *drill-adjacency* array)
;; (define-extern *fortress-adjacency* array)
;; (define-extern *forest-adjacency* array)
;; (define-extern *under-adjacency* array)
;; (define-extern *nestb-adjacency* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-control              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-network-control (process)
  ((nav-network basic  :offset-assert 124)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:methods
    (nav-network-control-method-9 () none 9)
    (nav-network-control-method-10 () none 10)
    (nav-network-control-method-11 () none 11)
    (nav-network-control-method-12 () none 12)
    (nav-network-control-method-13 () none 13)
    (idle () _type_ :state 14)
    )
  )
|#

;; (define-extern *debug-hover* object)
;; (define-extern nav-network-control-init-by-other function)
;; (define-extern detect-loop function)
;; (define-extern list-contains function)
;; (define-extern *nav-network* object)
;; (define-extern hover-bounce-reaction function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-enemy                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wasp (hover-enemy)
  ((gun-jmod              basic          :offset-assert 780)
   (entity-group          basic          :offset-assert 784)
   (smoke-part            basic          :offset-assert 788)
   (engine-part           basic          :offset-assert 792)
   (old-gravity           float          :offset-assert 800)
   (knocked-anim          int32          :offset-assert 804)
   (knocked-recover-anim  int32          :offset-assert 808)
   (last-fire-time        time-frame         :offset-assert 812)
   (bridge-index          int32          :offset-assert 820)
   (gun-x-angle           float          :offset-assert 824)
   (gun-x-angle-final     float          :offset-assert 828)
   (path-u                float          :offset-assert 832)
   (path-du               float          :offset-assert 836)
   (path-du-final         float          :offset-assert 840)
   (path-dest             float          :offset-assert 844)
   (plat-pos              vector :inline :offset-assert 860)
   (sound-id              uint32         :offset-assert 876)
   (attack-wait-min       float          :offset-assert 880)
   (attack-wait-max       float          :offset-assert 884)
   (attack-miss-dist-min  float          :offset-assert 888)
   (attack-miss-dist-max  float          :offset-assert 892)
   (attack-miss-dist-curr float          :offset-assert 896)
   )
  :method-count-assert 166
  :size-assert         #x388
  :flag-assert         #xa603100388
  (:methods
    (wasp-method-156 () none 156)
    (wasp-method-157 () none 157)
    (wasp-method-158 () none 158)
    (wasp-method-159 () none 159)
    (wasp-method-160 () none 160)
    (wasp-method-161 () none 161)
    (wasp-method-162 () none 162)
    (wasp-method-163 () none 163)
    (wasp-method-164 () none 164)
    (wasp-method-165 () none 165)
    )
  )
|#

;; (define-extern hover-enemy-dest-post function)
;; (define-extern hover-enemy-hostile-post function)
;; (define-extern hover-enemy-fly-code function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-enemy-battle             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hover-enemy-battle-command (structure)
  ((command     basic   :offset-assert 0)
   (wave        uint16  :offset-assert 4)
   (time        time-frame  :offset-assert 8)
   (alive-count int32   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype hover-enemy-manager (process)
  ()
  :method-count-assert 19
  :size-assert         #xa8
  :flag-assert         #x13003000a8
  ;; Failed to read fields.
  (:methods
    (hover-enemy-manager-method-9 () none 9)
    (hover-enemy-manager-method-10 () none 10)
    (hover-enemy-manager-method-11 () none 11)
    (hover-enemy-manager-method-12 () none 12)
    (hover-enemy-manager-method-13 () none 13)
    (idle () _type_ :state 14)
    (spawning () _type_ :state 15)
    (die () _type_ :state 16)
    (hover-enemy-manager-method-17 () none 17)
    (hover-enemy-manager-method-18 () none 18)
    )
  )
|#

;; (define-extern hover-enemy-manager-handler function)
;; (define-extern hover-enemy-manager-post function)
;; (define-extern hover-enemy-manager-init-by-other function)
;; (define-extern hover-manager-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-formation                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gen-perms-context (structure)
  ((num           int32   :offset-assert 0)
   (table         uint32  :offset-assert 4)
   (iterate-count int32   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern odd? function)
;; (define-extern even? function)
;; (define-extern gen-perms function)
;; (define-extern test-gen-perms function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-edit                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hover-nav-bsp-point (list-node)
  ((index int32          :offset-assert 8)
   (pos   vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype hover-nav-bsp-node (structure)
  ((split-plane vector              :inline :offset-assert 0)
   (point-list  hover-nav-bsp-point         :offset-assert 16)
   (left        hover-nav-bsp-node          :offset-assert 20)
   (right       hover-nav-bsp-node          :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (hover-nav-bsp-node-method-9 () none 9)
    (hover-nav-bsp-node-method-10 () none 10)
    )
  )
|#

#|
(deftype hover-nav-bsp (structure)
  ((root hover-nav-bsp-node  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern probe-for-clear-collision? function)
;; (define-extern hover-nav-graph-process-points function)
;; (define-extern hover-nav-graph-output function)
;; (define-extern *axes-table* array)
;; (define-extern *hover-bsp* object)
;; (define-extern hover-nav-graph-output-bsp function)
;; (define-extern hover-nav-network-build-bsp function)
;; (define-extern hover-nav-bsp-output function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasp-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasp                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wasp-shot (metalhead-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

;; (define-extern *wasp-exploder-params* joint-exploder-static-params)
;; (define-extern *wasp-enemy-info* enemy-info)
;; (define-extern shoot-bridge-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crimson-guard-hover            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype crimson-guard-hover-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype crimson-guard-hover (hover-enemy)
  ((gun-jmod              basic               :offset-assert 780)
   (hips-jmod             basic               :offset-assert 784)
   (entity-group          basic               :offset-assert 788)
   (los                   los-control :inline :offset-assert 796)
   (smoke-part            basic               :offset-assert 944)
   (engine-part           basic               :offset-assert 948)
   (last-fire-time        time-frame              :offset-assert 956)
   (gun-x-angle           float               :offset-assert 964)
   (gun-x-angle-final     float               :offset-assert 968)
   (path-u                float               :offset-assert 972)
   (path-du               float               :offset-assert 976)
   (path-du-final         float               :offset-assert 980)
   (path-dest             float               :offset-assert 984)
   (sound-id              uint32              :offset-assert 988)
   (knocked-recover-anim  int32               :offset-assert 992)
   (attack-wait-min       float               :offset-assert 996)
   (attack-wait-max       float               :offset-assert 1000)
   (attack-miss-dist-min  float               :offset-assert 1004)
   (attack-miss-dist-max  float               :offset-assert 1008)
   (attack-miss-dist-curr float               :offset-assert 1012)
   (shots-fired           int32               :offset-assert 1016)
   )
  :method-count-assert 163
  :size-assert         #x400
  :flag-assert         #xa303800400
  (:methods
    (ambush-fly () _type_ :state 156)
    (ambush-attack () _type_ :state 157)
    (kick-attack () _type_ :state 158)
    (attack () _type_ :state 159)
    (die-now () _type_ :state 160)
    (crimson-guard-hover-method-161 () none 161)
    (crimson-guard-hover-method-162 () none 162)
    )
  )
|#

;; (define-extern *crimson-guard-hover-enemy-info* enemy-info)
;; (define-extern *crimson-guard-hover-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flamer                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flying-formation (hover-formation)
  ()
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  (:methods
    )
  )
|#

#|
(deftype flamer (nav-enemy)
  ((shot-trajectory   trajectory :inline :offset-assert 604)
   (last-fire-time    time-frame             :offset-assert 644)
   (sync-off          uint32             :offset-assert 652)
   (base-pos          vector     :inline :offset-assert 668)
   (idle-pos          vector     :inline :offset-assert 684)
   (offset            vector     :inline :offset-assert 700)
   (dest-pos          vector     :inline :offset-assert 716)
   (zone-to-world     matrix     :inline :offset-assert 732)
   (world-to-zone     matrix     :inline :offset-assert 796)
   (formation-entity  basic              :offset-assert 860)
   (flit-joint        basic              :offset-assert 864)
   (flit-angle        float              :offset-assert 868)
   (flit-timer        uint64             :offset-assert 876)
   (path-pos          float              :offset-assert 884)
   (sound-volume      float              :offset-assert 888)
   (scale             float              :offset-assert 892)
   (hit-surface?      basic              :offset-assert 896)
   (ground-mode       int8               :offset-assert 900)
   (init-quat         quaternion :inline :offset-assert 908)
   (surface-normal    vector     :inline :offset-assert 924)
   (main-joint-pos    vector     :inline :offset-assert 940)
   (main-joint-vel    vector     :inline :offset-assert 956)
   (main-joint-acc    vector     :inline :offset-assert 972)
   (main-acceleration float              :offset-assert 988)
   (fly-dir           vector     :inline :offset-assert 1004)
   )
  :method-count-assert 192
  :size-assert         #x400
  :flag-assert         #xc003800400
  (:methods
    (attack () _type_ :state 178)
    (wait-for-formation () _type_ :state 179)
    (exit-ambush () _type_ :state 180)
    (exit-ambush-path () _type_ :state 181)
    (flamer-method-182 () none 182)
    (flamer-method-183 () none 183)
    (flamer-method-184 () none 184)
    (flamer-method-185 () none 185)
    (flamer-method-186 () none 186)
    (flamer-method-187 () none 187)
    (flamer-method-188 () none 188)
    (flamer-method-189 () none 189)
    (flamer-method-190 () none 190)
    (flamer-method-191 () none 191)
    )
  )
|#

;; (define-extern *flamer-exploder-params* joint-exploder-static-params)
;; (define-extern *flamer-fact-defaults* fact-info-enemy-defaults)
;; (define-extern *flamer-nav-enemy-info* nav-enemy-info)
;; (define-extern flamer-attack-post function)
;; (define-extern flamer-flit-post function)
;; (define-extern flamer-fly-code function)
;; (define-extern vector-square! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forest-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-forest-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forest-hover-manager (hover-enemy-manager)
  ((transport-actor UNKNOWN 2 :offset-assert 164)
   )
  :method-count-assert 19
  :size-assert         #xb0
  :flag-assert         #x13003000b0
  (:methods
    )
  )
|#

#|
(deftype forest-youngsamos (process-focusable)
  ((init-quat           quaternion :inline :offset-assert 204)
   (desired-pos         vector     :inline :offset-assert 220)
   (hit-dir             vector     :inline :offset-assert 236)
   (hit-points          float              :offset-assert 252)
   (incoming-attack-id  uint32             :offset-assert 256)
   (falling?            basic              :offset-assert 260)
   (focus-disable-timer uint64             :offset-assert 268)
   (hud                 uint64             :offset-assert 276)
   (sound-id            uint32             :offset-assert 284)
   )
  :method-count-assert 31
  :size-assert         #x124
  :flag-assert         #x1f00b00124
  (:methods
    (idle () _type_ :state 27)
    (hit () _type_ :state 28)
    (die () _type_ :state 29)
    (dormant () _type_ :state 30)
    )
  )
|#

;; (define-extern *forest-protect-battle* array)
;; (define-extern forest-youngsamos-post function)
;; (define-extern forest-youngsamos-bounce-reaction function)
;; (define-extern forest-login function)
;; (define-extern forest-deactivate function)
;; (define-extern forest-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pegasus                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pegasus-path-info (structure)
  ((num-data     int32   :offset-assert 0)
   (path-data    basic   :offset-assert 4)
   (control-data uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype pegasus (enemy)
  ((curve-position   float           :offset-assert 528)
   (speed            float           :offset-assert 532)
   (facing           vector  :inline :offset-assert 540)
   (tangent          vector  :inline :offset-assert 556)
   (run-blend-interp float           :offset-assert 572)
   (near-timer       int32           :offset-assert 576)
   (far-time         time-frame          :offset-assert 580)
   (y-offset         float           :offset-assert 588)
   (y-offset-desired float           :offset-assert 592)
   (y-vel            float           :offset-assert 596)
   (water-height     float           :offset-assert 600)
   (timeout          uint64          :offset-assert 604)
   (ambient-possible uint64          :offset-assert 612)
   (ambient-expire   uint64          :offset-assert 620)
   (can-run          basic           :offset-assert 628)
   (on-ground        basic           :offset-assert 632)
   (over-ground      basic           :offset-assert 636)
   (allow-idle       basic           :offset-assert 640)
   (path-info        UNKNOWN 20      :offset-assert 644)
   (previous-path    int32           :offset-assert 964)
   (current-path     int32           :offset-assert 968)
   (num-paths        int32           :offset-assert 972)
   (display-path     int32           :offset-assert 976)
   (targetted-timer  uint64          :offset-assert 980)
   )
  :method-count-assert 138
  :size-assert         #x3e0
  :flag-assert         #x8a036003e0
  (:methods
    (pegasus-method-137 () none 137)
    )
  )
|#

;; (define-extern *pegasus-enemy-info* enemy-info)
;; (define-extern pegasus-draw-section function)
;; (define-extern pegasus-show-runs function)
;; (define-extern pegasus-rotate function)
;; (define-extern pegasus-loop-on-same-path function)
;; (define-extern pegasus-choose-path function)
;; (define-extern pegasus-move function)
;; (define-extern pegasus-calc-speed function)
;; (define-extern pegasus-calc-anim-speed function)
;; (define-extern pegasus-debug state)
;; (define-extern pegasus-fly-code function)
;; (define-extern pegasus-tired state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wren                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wren (process-drawable)
  ((move-dest      vector  :inline :offset-assert 204)
   (fly-curve      UNKNOWN 2       :offset-assert 220)
   (fly-index      uint32          :offset-assert 228)
   (fly-speed      float           :offset-assert 232)
   (fly-y-rate     float           :offset-assert 236)
   (fly-interp     float           :offset-assert 240)
   (path-u         float           :offset-assert 244)
   (path-du        float           :offset-assert 248)
   (path-du-mod    float           :offset-assert 252)
   (bob-level      float           :offset-assert 256)
   (bob-level-seek float           :offset-assert 260)
   (bank-angle     float           :offset-assert 264)
   (peck-timer     uint64          :offset-assert 268)
   (flags          uint16          :offset-assert 276)
   )
  :method-count-assert 28
  :size-assert         #x11a
  :flag-assert         #x1c00a0011a
  (:methods
    (hunt () _type_ :state 20)
    (peck () _type_ :state 21)
    (fly () _type_ :state 22)
    (land () _type_ :state 23)
    (on-branch () _type_ :state 24)
    (die () _type_ :state 25)
    (wren-method-26 () none 26)
    (wren-method-27 () none 27)
    )
  )
|#

;; (define-extern fly-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fish                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype minnow (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype fish (structure)
  ((pos       vector :inline :offset-assert 0)
   (vel       vector :inline :offset-assert 16)
   (border-f  vector :inline :offset-assert 32)
   (avoid-d   vector :inline :offset-assert 48)
   (wander    float          :offset-assert 64)
   (max-speed float          :offset-assert 68)
   (speed     float          :offset-assert 72)
   (handle    uint64         :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype fish-manager (process-drawable)
  ((fishes UNKNOWN 12 :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #x550
  :flag-assert         #x1504d00550
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern minnow-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; predator-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype predator-node (structure)
  ()
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  ;; Failed to read fields.
  )
|#

;; (deftype predator-edge (structure)
;;   ()
;;   :flag-assert #x900000004
;;   )

#|
(deftype predator-graph (structure)
  ((node-count uint16  :offset-assert 0)
   (edge-count uint16  :offset-assert 2)
   (node       uint32  :offset-assert 4)
   (edge       uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; predator-graph                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *predator-graph* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; predator                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype predator-shot (metalhead-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype predator (nav-enemy)
  ((los               los-control :inline :offset-assert 604)
   (want-stop         basic               :offset-assert 752)
   (target-pos        vector      :inline :offset-assert 764)
   (curr-node         int32               :offset-assert 780)
   (hide-pos          vector      :inline :offset-assert 796)
   (next-change       uint64              :offset-assert 812)
   (shoot-angle       float               :offset-assert 820)
   (miss-amount       float               :offset-assert 824)
   (ambient-sound-id  uint32              :offset-assert 828)
   (shock-effect-time time-frame              :offset-assert 836)
   (shock-effect-end  uint64              :offset-assert 844)
   (fade              float               :offset-assert 852)
   (dest-fade         float               :offset-assert 856)
   )
  :method-count-assert 189
  :size-assert         #x360
  :flag-assert         #xbd02e00360
  (:methods
    (close-attack () _type_ :state 178)
    (fire () _type_ :state 179)
    (hide () _type_ :state 180)
    (hidden () _type_ :state 181)
    (predator-method-182 () none 182)
    (predator-method-183 () none 183)
    (predator-method-184 () none 184)
    (predator-method-185 () none 185)
    (predator-method-186 () none 186)
    (predator-method-187 () none 187)
    (predator-method-188 () none 188)
    )
  )
|#

#|
(deftype predator-manager (process)
  ()
  :method-count-assert 17
  :size-assert         #x198
  :flag-assert         #x1101200198
  ;; Failed to read fields.
  (:methods
    (predator-manager-method-9 () none 9)
    (predator-manager-method-10 () none 10)
    (closed () _type_ :state 11)
    (predator-manager-method-12 () none 12)
    (predator-manager-method-13 () none 13)
    (idle () _type_ :state 14)
    (closed () _type_ :state 15)
    (predator-manager-method-16 () none 16)
    )
  )
|#

;; (define-extern point-in-line-region? function)
;; (define-extern *predator-nav-enemy-info* nav-enemy-info)
;; (define-extern *predator-manager* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hideout-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hideout-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hide-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-hide-fireplace-sparks function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hideout-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hide-door-b (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype hide-light (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern hide-light-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyslumb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyslumb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-ctyslumb-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kiosk-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kiosk-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-kiosk-fire-sparks function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig-digger                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-clasp (process-drawable)
  ((b    basic               :offset-assert 196)
   (conn connection-minimap  :offset-assert 200)
   )
  :method-count-assert 24
  :size-assert         #xd0
  :flag-assert         #x18005000d0
  (:methods
    (broken () _type_ :state 20)
    (break-it () _type_ :state 21)
    (idle () _type_ :state 22)
    (dig-clasp-method-23 () none 23)
    )
  )
|#

#|
(deftype dig-clasp-b (dig-clasp)
  ()
  :method-count-assert 24
  :size-assert         #xd0
  :flag-assert         #x18005000d0
  (:methods
    )
  )
|#

#|
(deftype dig-tether-chain (structure)
  ((position  vector :inline :offset-assert 0)
   (velocity  vector :inline :offset-assert 16)
   (joint-mod basic          :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype dig-tether (process-drawable)
  ((clasp             basic                       :offset-assert 196)
   (clasp-info-ok     basic                       :offset-assert 200)
   (clasp-pos         vector              :inline :offset-assert 204)
   (digger-pos        vector              :inline :offset-assert 220)
   (digger-vertical   vector              :inline :offset-assert 236)
   (frame             oscillating-float   :inline :offset-assert 252)
   (frame-kicker      delayed-rand-float  :inline :offset-assert 276)
   (old-dist          float                       :offset-assert 304)
   (chain-joints      UNKNOWN             8       :offset-assert 316)
   (chain-offset-rand delayed-rand-vector :inline :offset-assert 700)
   (chain-offset      oscillating-vector  :inline :offset-assert 748)
   (joint-one         basic                       :offset-assert 808)
   (snapped-look      lod-set             :inline :offset-assert 812)
   )
  :method-count-assert 25
  :size-assert         #x361
  :flag-assert         #x1902f00361
  (:methods
    (broken () _type_ :state 20)
    (idle () _type_ :state 21)
    (dig-tether-method-22 () none 22)
    (dig-tether-method-23 () none 23)
    (dig-tether-method-24 () none 24)
    )
  )
|#

#|
(deftype dig-digger-tether-info (structure)
  ((rp       int32   :offset-assert 0)
   (handle   uint64  :offset-assert 8)
   (broken-x float   :offset-assert 16)
   (broken-z float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype dig-digger (process-drawable)
  ()
  :method-count-assert 25
  :size-assert         #x4ec
  :flag-assert         #x19047004ec
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    (dig-digger-method-22 () none 22)
    (dig-digger-method-23 () none 23)
    (dig-digger-method-24 () none 24)
    )
  )
|#

;; (define-extern birth-func-dig-digger-collide function)
;; (define-extern check-drop-level-dig-digger-rubble-sparks function)
;; (define-extern *dig-clasp-exploder-params* joint-exploder-static-params)
;; (define-extern dig-tether-handler function)
;; (define-extern dig-tether-init-by-other function)
;; (define-extern bustclasp function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig-obs                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-sinking-plat (rigid-body-platform)
  ((anchor-point      vector      :inline :offset-assert 380)
   (sync              sync-linear :inline :offset-assert 396)
   (last-ridden-time  time-frame              :offset-assert 412)
   (prev-pos          float               :offset-assert 420)
   (path-pos          float               :offset-assert 424)
   (surface-height    float               :offset-assert 428)
   (once              basic               :offset-assert 432)
   (bubbling-sound-id uint32              :offset-assert 436)
   )
  :method-count-assert 57
  :size-assert         #x1bc
  :flag-assert         #x39014001bc
  (:methods
    )
  )
|#

#|
(deftype dig-log-button-info (basic)
  ((cam-ret-mode basic          :offset-assert 4)
   (cam-ret-dir  vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype dig-log (process-drawable)
  ((pressed-count  int8    :offset-assert 196)
   (total-buttons  int8    :offset-assert 197)
   (last-button-id int8    :offset-assert 198)
   (base-y         float   :offset-assert 200)
   (hud-handle     uint64  :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  (:methods
    (idle () _type_ :state 20)
    (moving () _type_ :state 21)
    (dig-log-method-22 () none 22)
    )
  )
|#

#|
(deftype dig-button (process-drawable)
  ((down-y float  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    (idle-up () _type_ :state 20)
    (going-down () _type_ :state 21)
    (idle-down () _type_ :state 22)
    )
  )
|#

;; (define-extern *dig-sinking-platform-constants* object)
;; (define-extern *dig-log-button-infos* array)
;; (define-extern *dig-log-heights* object)
;; (define-extern dig-log-event-handler function)
;; (define-extern dig3-login function)
;; (define-extern dig3-activate function)
;; (define-extern dig3-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig1-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-conveyor (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#

#|
(deftype dig-bomb-crate-cylinder (rigid-body-object)
  ((flash-counter int8    :offset-assert 268)
   (attack-id     uint32  :offset-assert 272)
   (wait-time     time-frame  :offset-assert 276)
   )
  :method-count-assert 54
  :size-assert         #x120
  :flag-assert         #x3600a00120
  (:methods
    (die () _type_ :state 53)
    )
  )
|#

#|
(deftype dig-bomb-crate-cylinder-spawn-params (structure)
  ((pos  vector     :inline :offset-assert 0)
   (vel  vector     :inline :offset-assert 16)
   (avel vector     :inline :offset-assert 32)
   (quat quaternion :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype dig-bomb-crate (process-focusable)
  ()
  :method-count-assert 30
  :size-assert         #xcc
  :flag-assert         #x1e005000cc
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (dig-bomb-crate-method-29 () none 29)
    )
  )
|#

#|
(deftype dig-jump-pad (bouncer)
  ()
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:methods
    )
  )
|#

;; (define-extern *dig-bomb-crate-cylinder-constants* object)
;; (define-extern dig-bomb-crate-cylinder-init-by-other function)
;; (define-extern dig-bomb-crate-cylinder-spawn function)
;; (define-extern *dig-bomb-crate-exploder-params* joint-exploder-static-params)
;; (define-extern *dig-bomb-crate-array* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig2-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-breakable-door (process-focusable)
  ((anim         basic  :offset-assert 200)
   (art-name     basic  :offset-assert 204)
   (collide-mesh int32  :offset-assert 208)
   )
  :method-count-assert 28
  :size-assert         #xd8
  :flag-assert         #x1c006000d8
  (:methods
    (idle () _type_ :state 27)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig3-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-spikey-step (process-drawable)
  ((smush         smush-control :inline :offset-assert 196)
   (init-quat     quaternion    :inline :offset-assert 236)
   (shudder-angle float                 :offset-assert 252)
   (rot-angle     float                 :offset-assert 256)
   (cycle-time    float                 :offset-assert 260)
   (cycle-offset  float                 :offset-assert 264)
   )
  :method-count-assert 21
  :size-assert         #x110
  :flag-assert         #x1500900110
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype dig-spikey-sphere (projectile-bounce)
  ((attack-id    uint32  :offset-assert 440)
   (death-height float   :offset-assert 496)
   )
  :method-count-assert 42
  :size-assert         #x1f8
  :flag-assert         #x2a018001f8
  (:methods
    )
  )
|#

#|
(deftype dig-spikey-sphere-door (process-drawable)
  ((sync      sync-linear :inline :offset-assert 196)
   (prev-sync float               :offset-assert 212)
   )
  :method-count-assert 22
  :size-assert         #xdc
  :flag-assert         #x16006000dc
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    )
  )
|#

#|
(deftype dig-balloon-lurker (process-drawable)
  ((init-quat        quaternion    :inline :offset-assert 204)
   (sync             sync-eased    :inline :offset-assert 220)
   (swing-sync       sync-linear   :inline :offset-assert 268)
   (smush            smush-control :inline :offset-assert 284)
   (pov-cam-offset   vector        :inline :offset-assert 316)
   (options          int32                 :offset-assert 332)
   (bouncing         basic                 :offset-assert 336)
   (bounce-scale     meters                :offset-assert 340)
   (bob-counter      float                 :offset-assert 344)
   (forward-backward basic                 :offset-assert 348)
   (grabbed          basic                 :offset-assert 352)
   (trapeze-grabbed  basic                 :offset-assert 356)
   (pedal-anim-frame float                 :offset-assert 360)
   (pedal-anim-speed float                 :offset-assert 364)
   (pedal-sound-id   uint32                :offset-assert 368)
   )
  :method-count-assert 21
  :size-assert         #x178
  :flag-assert         #x1501000178
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype dig-balloon-lurker-trapeze (process-drawable)
  ((swing-type       float   :offset-assert 196)
   (swing-pole       uint32  :offset-assert 200)
   (swing-anim-frame float   :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd4
  :flag-assert         #x16006000d4
  (:methods
    (idle () _type_ :state 20)
    (dig-balloon-lurker-trapeze-method-21 () none 21)
    )
  )
|#

#|
(deftype dig-wheel-step (process-drawable)
  ((anim-speed     float   :offset-assert 196)
   (wheel-sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype dig-tipping-rock (rigid-body-platform)
  ((anchor-point      vector :inline :offset-assert 380)
   (last-ridden-time  time-frame         :offset-assert 396)
   (surface-height    float          :offset-assert 404)
   (bubbling-sound-id uint32         :offset-assert 408)
   )
  :method-count-assert 57
  :size-assert         #x1a0
  :flag-assert         #x39012001a0
  (:methods
    )
  )
|#

#|
(deftype dig-wall-bouncer (bouncer)
  ()
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:methods
    )
  )
|#

#|
(deftype dig-stomp-block (rigid-body-object)
  ((desty float  :offset-assert 268)
   (flag  basic  :offset-assert 272)
   )
  :method-count-assert 55
  :size-assert         #x118
  :flag-assert         #x3700a00118
  (:methods
    (waiting () _type_ :state 53)
    (hit () _type_ :state 54)
    )
  )
|#

#|
(deftype dig-stomp-block-controller (process-drawable)
  ((stomp-blocks UNKNOWN 4 :offset-assert 196)
   (played-fall? basic     :offset-assert 212)
   )
  :method-count-assert 21
  :size-assert         #xdc
  :flag-assert         #x15006000dc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype dig-totem (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern *dig-spikey-sphere-exploder-params* joint-exploder-static-params)
;; (define-extern spikey-sphere-update-velocity function)
;; (define-extern spikey-sphere-reaction function)
;; (define-extern spikey-sphere-move function)
;; (define-extern dig-balloon-lurker-trapeze-init-by-other function)
;; (define-extern *dig-tipping-rock-constants* object)
;; (define-extern *dig-stomp-block-constants* object)
;; (define-extern dig-stomp-block-init-by-other function)
;; (define-extern *dig-stomp-block-table* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-baby-spider               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-baby-spider (nav-enemy)
  ()
  :method-count-assert 180
  :size-assert         #x25c
  :flag-assert         #xb401e0025c
  (:methods
    (attack () _type_ :state 178)
    (attack-stop () _type_ :state 179)
    )
  )
|#

#|
(deftype dig-spider (tomb-baby-spider)
  ()
  :method-count-assert 180
  :size-assert         #x25c
  :flag-assert         #xb401e0025c
  (:methods
    )
  )
|#

;; (define-extern *tomb-baby-spider-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grenadier                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bank-info (structure)
  ((circle      sphere :inline :offset-assert 0)
   (tangent-pos vector :inline :offset-assert 16)
   (final-pos   vector :inline :offset-assert 32)
   (final-dir   vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype grenadier (nav-enemy)
  ((shot-trajectory           trajectory :inline :offset-assert 604)
   (hostile-path              basic              :offset-assert 644)
   (bank                      bank-info  :inline :offset-assert 652)
   (joint                     basic              :offset-assert 716)
   (heading                   basic              :offset-assert 720)
   (move-pos                  vector     :inline :offset-assert 732)
   (move-angle                float              :offset-assert 748)
   (status-flags              uint64             :offset-assert 756)
   (suppress-knockaside-timer uint64             :offset-assert 764)
   )
  :method-count-assert 184
  :size-assert         #x308
  :flag-assert         #xb802900308
  (:methods
    (attack () _type_ :state 178)
    (backup () _type_ :state 179)
    (spin-kick () _type_ :state 180)
    (grenadier-method-181 () none 181)
    (grenadier-method-182 () none 182)
    (grenadier-method-183 () none 183)
    )
  )
|#

;; (define-extern *grenadier-nav-enemy-info* nav-enemy-info)
;; (define-extern pos-rotate-y<-vector+vector function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalmonk                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalmonk-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype metalmonk-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (idle-anim       UNKNOWN 3 :offset-assert 8)
   (patrol-anim     UNKNOWN 2 :offset-assert 20)
   (notice-anim     UNKNOWN 2 :offset-assert 28)
   (charge-anim     UNKNOWN 2 :offset-assert 36)
   (attack-anim     UNKNOWN 2 :offset-assert 44)
   (knocked-anim    UNKNOWN 2 :offset-assert 52)
   (celebrate-anim  UNKNOWN 2 :offset-assert 60)
   (yellow-hit-anim UNKNOWN 4 :offset-assert 68)
   (blue-hit-anim   UNKNOWN 3 :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

#|
(deftype metalmonk (nav-enemy)
  ((focus-pos  vector :inline :offset-assert 348)
   (new-facing vector :inline :offset-assert 620)
   (old-facing vector :inline :offset-assert 636)
   (high-time  time-frame         :offset-assert 652)
   (intro-path basic          :offset-assert 660)
   )
  :method-count-assert 183
  :size-assert         #x29c
  :flag-assert         #xb70220029c
  (:methods
    (attack () _type_ :state 178)
    (metalmonk-method-179 () none 179)
    (metalmonk-method-180 () none 180)
    (metalmonk-method-181 () none 181)
    (metalmonk-method-182 () none 182)
    )
  )
|#

;; (define-extern *metalmonk-global-info* metalmonk-global-info)
;; (define-extern *metalmonk-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig-texture                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lava-texture-anim-array* texture-anim-array)
;; (define-extern *lava-b-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig-scenes                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dig-part                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dig-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-dig-lava-bloops function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-tube                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tube-info (basic)
  ((entity           basic            :offset-assert 4)
   (tube             uint64           :offset-assert 8) ;; handle
   (downhill         vector   :inline :offset-assert 16)
   (centertube       vector   :inline :offset-assert 32)
   (downtube         vector   :inline :offset-assert 48)
   (sidetube         vector   :inline :offset-assert 64)
   (foretube         vector   :inline :offset-assert 80)
   (old-transv       vector   :inline :offset-assert 96)
   (mod-x            float            :offset-assert 112)
   (mod-y            float            :offset-assert 116)
   (start-time       time-frame           :offset-assert 120) ;; time-frame
   (turn-anim-targ   float            :offset-assert 128)
   (turn-anim-frame  float            :offset-assert 132)
   (turn-anim-vel    float            :offset-assert 136)
   (tube-sound-id    sound-id         :offset-assert 140) ;; guessed by decompiler
   (tube-sound-vol   float            :offset-assert 144)
   (tube-sound-pitch float            :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )
|#

#|
(deftype tube-bank (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype slide-control (process-drawable)
  ((target uint64         :offset-assert 196) ;; handle
   (pos    float          :offset-assert 204)
   (trans  vector :inline :offset-assert 220)
   (rot    vector :inline :offset-assert 236)
   (side   vector :inline :offset-assert 252)
   )
  :method-count-assert 22
  :size-assert         #x110
  :flag-assert         #x1600900110
  (:methods
    (slide-control-watch () _type_ :state 20) ;; (slide-control-watch () _type_ :state 20)
    (slide-control-ride () _type_ :state 21) ;; (slide-control-ride () _type_ :state 21)
    )
  )
|#

;; (define-extern *tube-mods* surface) ;; surface
;; (define-extern *tube-jump-mods* surface) ;; surface
;; (define-extern *tube-hit-mods* surface) ;; surface
;; (define-extern *tube-surface* surface) ;; surface
;; (define-extern *TUBE-bank* tube-bank) ;; tube-bank
;; (define-extern tube-sounds function) ;; (function sound-id :behavior target)
;; (define-extern tube-thrust function) ;; (function float float none :behavior target)
;; (define-extern target-tube-post function) ;; (function none :behavior target)
;; (define-extern target-tube-start state) ;; (state handle target)
;; (define-extern target-tube-turn-anim function) ;; (function none :behavior target)
;; (define-extern target-tube state) ;; (state target)
;; (define-extern target-tube-jump state) ;; (state float float target)
;; (define-extern target-tube-hit state) ;; (state symbol attack-info target)
;; (define-extern target-tube-death state) ;; (state symbol target)
;; (define-extern distance-from-tangent function) ;; (function path-control float vector vector vector vector float)
;; (define-extern find-target-point function) ;; (function vector float :behavior slide-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fortress-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-trap-door (process-drawable)
  ((notify-actor basic  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype water-anim-fortress (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

;; (define-extern *fort-trap-door-exploder-params* joint-exploder-static-params)
;; (define-extern ripple-for-water-anim-fortress ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forexitb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forexitb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-forexitb-drop-userdata function)
;; (define-extern check-drop-level-forexitb-drop-water-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-turret-shot             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turret-shot (guard-shot)
  ((hit-pos vector :inline :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-turret                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-turret-health (hud)
  ((fade-interp float  :offset-assert 2976)
   )
  :method-count-assert 27
  :size-assert         #xba8
  :flag-assert         #x1b0b300ba8
  (:methods
    )
  )
|#

#|
(deftype hud-drill-turret-health (hud-turret-health)
  ()
  :method-count-assert 27
  :size-assert         #xba8
  :flag-assert         #x1b0b300ba8
  (:methods
    )
  )
|#

#|
(deftype hud-port-turret-health (hud-turret-health)
  ()
  :method-count-assert 27
  :size-assert         #xba8
  :flag-assert         #x1b0b300ba8
  (:methods
    )
  )
|#

#|
(deftype turret-info (basic)
  ((process  uint32             :offset-assert 4)
   (handle   uint64             :offset-assert 8)
   (turret   uint32             :offset-assert 16)
   (grabbed? basic              :offset-assert 20)
   (quat     quaternion :inline :offset-assert 32)
   (trans    vector     :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype turret-path-event (structure)
  ((pos        float  :offset-assert 0)
   (event-type basic  :offset-assert 4)
   (param      basic  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  ;; field param uses ~A with a signed load
  )
|#

#|
(deftype turret-path (structure)
  ((event-count int32   :offset-assert 0)
   (event-tbl   uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype base-turret (process-focusable)
  ()
  :method-count-assert 49
  :size-assert         #x234
  :flag-assert         #x3101c00234
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 27)
    (setup () _type_ :state 28)
    (active () _type_ :state 29)
    (shutdown () _type_ :state 30)
    (dormant () _type_ :state 31)
    (die () _type_ :state 32)
    (base-turret-method-33 () none 33)
    (base-turret-method-34 () none 34)
    (base-turret-method-35 () none 35)
    (base-turret-method-36 () none 36)
    (base-turret-method-37 () none 37)
    (base-turret-method-38 () none 38)
    (base-turret-method-39 () none 39)
    (base-turret-method-40 () none 40)
    (base-turret-method-41 () none 41)
    (base-turret-method-42 () none 42)
    (base-turret-method-43 () none 43)
    (base-turret-method-44 () none 44)
    (base-turret-method-45 () none 45)
    (base-turret-method-46 () none 46)
    (base-turret-method-47 () none 47)
    (base-turret-method-48 () none 48)
    )
  )
|#

;; (define-extern init-turret-hud function)
;; (define-extern *turret-exploder-params* joint-exploder-static-params)
;; (define-extern turret-handler function)
;; (define-extern set-recoil function)
;; (define-extern cam-turret state)
;; (define-extern target-turret-post function)
;; (define-extern target-turret-stance state)
;; (define-extern *turret-get-on-mods* object)
;; (define-extern target-turret-get-on state)
;; (define-extern target-turret-get-off state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-turret                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turret (base-turret)
  ((hover-battle    uint64  :offset-assert 564)
   (hover-formation basic   :offset-assert 572)
   (use-egg-hud     basic   :offset-assert 576)
   (hud-egg         uint64  :offset-assert 580)
   (use-cgh-hud     basic   :offset-assert 588)
   (hud-cgh         uint64  :offset-assert 596)
   (hud-cgh-event   basic   :offset-assert 604)
   (egg-timer       uint64  :offset-assert 612)
   (cgh-timer       uint64  :offset-assert 620)
   )
  :method-count-assert 49
  :size-assert         #x278
  :flag-assert         #x3102000278
  (:methods
    )
  )
|#

;; (define-extern *drill-turret-10-battle* array)
;; (define-extern *drill-turret-11-battle* array)
;; (define-extern *drill-turret-12-battle* array)
;; (define-extern *turret-13-path* object)
;; (define-extern *drill-turret-13-battle* array)
;; (define-extern *turret-14-path* object)
;; (define-extern *turret-15-path* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drillmid-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-elevator-doors (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype drill-lift (elevator)
  ((sound-id uint32  :offset-assert 364)
   )
  :method-count-assert 50
  :size-assert         #x174
  :flag-assert         #x3201000174
  (:methods
    (drill-lift-method-49 () none 49)
    )
  )
|#

#|
(deftype drill-moving-staircase (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-part2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-drop-level-drill-drillbit-rubble-sparks function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-mech-master              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-mech-master (process)
  ((cpanel-count         int8    :offset-assert 124)
   (alarm-sound-id       uint32  :offset-assert 128)
   (explosion-sound-id   uint32  :offset-assert 132)
   (exited?              basic   :offset-assert 136)
   (killed-jak?          basic   :offset-assert 140)
   (part-doom            basic   :offset-assert 144)
   (hud-cpanel           uint64  :offset-assert 148)
   (hud-timer            uint64  :offset-assert 156)
   (scene-player-handle  uint64  :offset-assert 164)
   (state-time           time-frame  :offset-assert 172)
   (next-warn-time       time-frame  :offset-assert 180)
   (total-countdown-time time-frame  :offset-assert 188)
   (started-timer-time   time-frame  :offset-assert 196)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14005000d0
  (:methods
    (drill-mech-master-method-9 () none 9)
    (drill-mech-master-method-10 () none 10)
    (drill-mech-master-method-11 () none 11)
    (drill-mech-master-method-12 () none 12)
    (drill-mech-master-method-13 () none 13)
    (idle () _type_ :state 14)
    (active () _type_ :state 15)
    (hostile () _type_ :state 16)
    (failed () _type_ :state 17)
    (victory () _type_ :state 18)
    (drill-mech-master-method-19 () none 19)
    )
  )
|#

;; (define-extern *drill-mech-master* object)
;; (define-extern drill-mech-master-event-handler function)
;; (define-extern drill-mech-master-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-plat-falling (base-plat)
  ((init-quat quaternion :inline :offset-assert 268)
   )
  :method-count-assert 36
  :size-assert         #x120
  :flag-assert         #x2400a00120
  (:methods
    (idle () _type_ :state 34)
    (falling () _type_ :state 35)
    )
  )
|#

#|
(deftype drill-elevator-shaft (process-drawable)
  ((extent UNKNOWN 2 :offset-assert 204)
   (length float     :offset-assert 236)
   )
  :method-count-assert 22
  :size-assert         #xf4
  :flag-assert         #x16008000f4
  (:methods
    (idle () _type_ :state 20)
    (drill-elevator-shaft-method-21 () none 21)
    )
  )
|#

#|
(deftype drill-elevator (elevator)
  ((shaft    uint32  :offset-assert 364)
   (sound-id uint32  :offset-assert 368)
   )
  :method-count-assert 49
  :size-assert         #x178
  :flag-assert         #x3101000178
  (:methods
    )
  )
|#

#|
(deftype drill-mech-elevator (drill-elevator)
  ((running-sound-id uint32  :offset-assert 372)
   )
  :method-count-assert 49
  :size-assert         #x17c
  :flag-assert         #x310100017c
  (:methods
    )
  )
|#

#|
(deftype fire-floor (process-drawable)
  ((part-off           basic               :offset-assert 196)
   (size               UNKNOWN     2       :offset-assert 200)
   (attack-id          uint32              :offset-assert 208)
   (sound-id           uint32              :offset-assert 212)
   (sound-playing      basic               :offset-assert 216)
   (deadly-width       float               :offset-assert 220)
   (deadly-length      float               :offset-assert 224)
   (flames-end-tt      float               :offset-assert 228)
   (generous           float               :offset-assert 232)
   (no-collision-timer uint64              :offset-assert 236)
   (local-to-world     matrix      :inline :offset-assert 252)
   (world-to-local     matrix      :inline :offset-assert 316)
   (sync               sync-linear :inline :offset-assert 380)
   )
  :method-count-assert 22
  :size-assert         #x190
  :flag-assert         #x1601100190
  (:methods
    (idle () _type_ :state 20)
    (fire-floor-method-21 () none 21)
    )
  )
|#

#|
(deftype fire-floor-a (fire-floor)
  ()
  :method-count-assert 22
  :size-assert         #x190
  :flag-assert         #x1601100190
  (:methods
    )
  )
|#

#|
(deftype drill-switch (basebutton)
  ((green-part basic  :offset-assert 284)
   (down-frame float  :offset-assert 288)
   )
  :method-count-assert 41
  :size-assert         #x128
  :flag-assert         #x2900b00128
  (:methods
    (drill-switch-method-39 () none 39)
    (drill-switch-method-40 () none 40)
    )
  )
|#

#|
(deftype drill-laser (process-drawable)
  ((speed        float   :offset-assert 196)
   (offset       float   :offset-assert 200)
   (pause        float   :offset-assert 204)
   (firing?      basic   :offset-assert 208)
   (hit-sound-id uint32  :offset-assert 212)
   )
  :method-count-assert 21
  :size-assert         #xe8
  :flag-assert         #x15007000e8
  (:methods
    (drill-laser-idle () _type_ :state 20)
    )
  )
|#

;; (define-extern drill-plat-falling-trans function)
;; (define-extern drill-elevator-shaft-init-by-other function)
;; (define-extern drill-login function)
;; (define-extern drill-deactivate function)
;; (define-extern drill-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-panel                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-control-panel (process-focusable)
  ((id             int8    :offset-assert 200)
   (idle-sound-id  uint32  :offset-assert 204)
   (debris-part    basic   :offset-assert 208)
   (state-time     time-frame  :offset-assert 188)
   (next-warn-time time-frame  :offset-assert 220)
   )
  :method-count-assert 33
  :size-assert         #xe8
  :flag-assert         #x21007000e8
  (:methods
    (idle () _type_ :state 27)
    (hit () _type_ :state 28)
    (drill-control-panel-method-29 () none 29)
    (drill-control-panel-method-30 () none 30)
    (drill-control-panel-method-31 () none 31)
    (drill-control-panel-method-32 () none 32)
    )
  )
|#

#|
(deftype drill-control-panel-a (drill-control-panel)
  ()
  :method-count-assert 33
  :size-assert         #xe8
  :flag-assert         #x21007000e8
  (:methods
    )
  )
|#

#|
(deftype drill-control-panel-b (drill-control-panel-a)
  ()
  :method-count-assert 33
  :size-assert         #xe8
  :flag-assert         #x21007000e8
  (:methods
    )
  )
|#

;; (define-extern spawn-drill-panel-explode function)
;; (define-extern spawn-drill-panel-ab-explode function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-obs2                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-flip-step (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-falling-door (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-sliding-door (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-accelerator-floor (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-breakable-barrel (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-metalhead-eggs (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-metalhead-eggs-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-metalhead-eggs-b (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-metalhead-eggs-c (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-bridge-shot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-drill (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-drop-plat (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *drill-falling-door-anim-table* array)
;; (define-extern drill-falling-door-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-spool                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-wall (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype drill-crane (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-baron                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drill-barons-ship (process-drawable)
  ((init-quat          quaternion :inline :offset-assert 204)
   (next-to-shoot-idx  int32              :offset-assert 220)
   (current-y-position float              :offset-assert 224)
   (from-y             float              :offset-assert 228)
   (inc-y              float              :offset-assert 232)
   (ease-y             float              :offset-assert 236)
   (x-offset-angle     float              :offset-assert 240)
   (pass               int32              :offset-assert 244)
   (end-of-pass        basic              :offset-assert 248)
   (rock-angle         float              :offset-assert 252)
   (soundid            uint32             :offset-assert 256)
   )
  :method-count-assert 23
  :size-assert         #x108
  :flag-assert         #x1700900108
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    (drill-barons-ship-method-22 () none 22)
    )
  )
|#

#|
(deftype drill-barons-ship-explode (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype barons-ship-turret-info (structure)
  ((init-y-angle  float  :offset-assert 0)
   (twist-y-max   float  :offset-assert 4)
   (joint-idx     int32  :offset-assert 8)
   (mesh          int32  :offset-assert 12)
   (ship-y-offset float  :offset-assert 16)
   (alive         basic  :offset-assert 20)
   (next-to-shoot basic  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype drill-barons-ship-turret (process-drawable)
  ((info               barons-ship-turret-info  :offset-assert 196)
   (shot-timer         uint64                   :offset-assert 204)
   (shot-counter       int32                    :offset-assert 212)
   (jmod               basic                    :offset-assert 216)
   (jmod-left          basic                    :offset-assert 220)
   (jmod-right         basic                    :offset-assert 224)
   (anim-frame         float                    :offset-assert 228)
   (error-y-angle      float                    :offset-assert 232)
   (error-y-angle-dest float                    :offset-assert 236)
   (hit-count          int32                    :offset-assert 240)
   (soundid            uint32                   :offset-assert 244)
   )
  :method-count-assert 25
  :size-assert         #xfc
  :flag-assert         #x19008000fc
  (:methods
    (idle () _type_ :state 20)
    (attack () _type_ :state 21)
    (dead () _type_ :state 22)
    (going-down () _type_ :state 23)
    (drill-barons-ship-turret-method-24 () none 24)
    )
  )
|#

#|
(deftype drill-ship-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

;; (define-extern *ship-turrets-first-pass* array)
;; (define-extern *ship-turrets-second-pass* array)
;; (define-extern *barons-ship-turrets* array)
;; (define-extern drill-barons-ship-turret-init-by-other function)
;; (define-extern drill-barons-ship-explode-init-by-other function)
;; (define-extern drill-ship-shot-move function)
;; (define-extern *drill-ship-turret-speed-event* object)
;; (define-extern calculate-ship-projectile-velocity function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drill-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; centurion                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype centurion-shot (metalhead-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype centurion (nav-enemy)
  ((los                los-control :inline :offset-assert 604)
   (target-pos         vector      :inline :offset-assert 764)
   (can-shoot?         basic               :offset-assert 780)
   (incoming-attack-id uint32              :offset-assert 784)
   (can-take-damage?   basic               :offset-assert 788)
   (first-shoot?       basic               :offset-assert 792)
   (shoot-dir          vector      :inline :offset-assert 796)
   (tar-pos            vector      :inline :offset-assert 812)
   (joint              basic               :offset-assert 828)
   (joint-enable       basic               :offset-assert 832)
   (victory-sound      uint32              :offset-assert 836)
   (shield-shot        uint32              :offset-assert 840)
   )
  :method-count-assert 183
  :size-assert         #x350
  :flag-assert         #xb702d00350
  (:methods
    (attack () _type_ :state 178)
    (fire () _type_ :state 179)
    (centurion-method-180 () none 180)
    (centurion-method-181 () none 181)
    (centurion-method-182 () none 182)
    )
  )
|#

#|
(deftype centurion-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype centurion-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (yellow-hit-anim UNKNOWN 1 :offset-assert 8)
   (blue-hit-anim   UNKNOWN 3 :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern *centurion-shield-glow-spt-scale-x* object)
;; (define-extern *centurion-shield-glow-spt-scale-y* object)
;; (define-extern *centurion-shield-center-spt-scale-x* object)
;; (define-extern *centurion-shield-center-spt-scale-y* object)
;; (define-extern *centurion-shield-spt-scale-x* object)
;; (define-extern *centurion-shield-spt-scale-y* object)
;; (define-extern *centurion-shield-2-spt-scale-x* object)
;; (define-extern *centurion-shield-2-spt-scale-y* object)
;; (define-extern centurion-shield-big function)
;; (define-extern centurion-shield-little function)
;; (define-extern *centurion-global-info* centurion-global-info)
;; (define-extern *centurion-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ginsu                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ginsu-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype ginsu-global-info (basic)
  ((prev-blue-hit int8      :offset-assert 4)
   (blue-hit-anim UNKNOWN 3 :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype ginsu (nav-enemy)
  ((blade-jm            basic                    :offset-assert 600)
   (blade-speed         cam-float-seeker :inline :offset-assert 604)
   (blade-angle         float                    :offset-assert 628)
   (desired-distance    float                    :offset-assert 632)
   (spiral-time         time-frame                   :offset-assert 636)
   (blade-part          basic                    :offset-assert 644)
   (ambush-path         basic                    :offset-assert 648)
   (path-pos            float                    :offset-assert 652)
   (ambush-started      basic                    :offset-assert 656)
   (blade-sound         uint32                   :offset-assert 660)
   (blade-sound-playing basic                    :offset-assert 664)
   (grind-sound         uint32                   :offset-assert 668)
   (grind-sound-playing basic                    :offset-assert 672)
   (grind-timer         uint64                   :offset-assert 676)
   )
  :method-count-assert 184
  :size-assert         #x2b0
  :flag-assert         #xb8023002b0
  (:methods
    (anticipate-attack () _type_ :state 178)
    (attack () _type_ :state 179)
    (ginsu-method-180 () none 180)
    (ginsu-method-181 () none 181)
    (ginsu-method-182 () none 182)
    (ginsu-method-183 () none 183)
    )
  )
|#

;; (define-extern *ginsu-global-info* ginsu-global-info)
;; (define-extern *ginsu-nav-enemy-info* nav-enemy-info)
;; (define-extern ginsu-sounds-off function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; oracle-texture                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *darkjak-hires-texture-anim-array* texture-anim-array)
;; (define-extern set-darkjak-highres-texture-morph! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; oracle-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype oracle-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; oracle-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype oracle-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; oracle-training                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalkor-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *metkor-texture-anim-array* texture-anim-array)
;; (define-extern metkor-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyslumc-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyslumc-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forresca-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forresca-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forresca-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-elec-button (cty-guard-turret-button)
  ((start-up? basic  :offset-assert 284)
   )
  :method-count-assert 41
  :size-assert         #x124
  :flag-assert         #x2900b00124
  (:methods
    (waiting () _type_ :state 40)
    )
  )
|#

#|
(deftype fort-led (process-drawable)
  ((button-actor basic  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (red () _type_ :state 20)
    (green () _type_ :state 21)
    )
  )
|#

#|
(deftype elec-lock-gate (fort-elec-gate)
  ()
  :method-count-assert 32
  :size-assert         #x210
  :flag-assert         #x2001900210
  ;; Failed to read fields.
  (:methods
    (pre-shutdown () _type_ :state 30)
    (elec-lock-gate-method-31 () none 31)
    )
  )
|#

;; (define-extern fortress-login function)
;; (define-extern fortress-deactivate function)
;; (define-extern fortress-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rhino                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rhino (nav-enemy)
  ((wall                  basic              :offset-assert 600)
   (path-intro            basic              :offset-assert 604)
   (charge-aware          uint64             :offset-assert 612)
   (anim-skid-left        int32              :offset-assert 620)
   (anim-skid-right       int32              :offset-assert 624)
   (anim-victory-hit      int32              :offset-assert 628)
   (circle-backward?      basic              :offset-assert 636)
   (focus-pos             vector     :inline :offset-assert 348)
   (skid-speed            float              :offset-assert 668)
   (angle                 float              :offset-assert 672)
   (angle-speed           float              :offset-assert 676)
   (dest                  vector     :inline :offset-assert 684)
   (charge-straight       basic              :offset-assert 700)
   (in-stop-run           basic              :offset-assert 704)
   (smush-target          basic              :offset-assert 708)
   (num-hit-flinch        int32              :offset-assert 712)
   (frame-die-smush       float              :offset-assert 716)
   (quat                  quaternion :inline :offset-assert 732)
   (can-hit?              basic              :offset-assert 748)
   (interest              int32              :offset-assert 752)
   (victory-count         uint32             :offset-assert 756)
   (stomach-touched-once? basic              :offset-assert 760)
   )
  :method-count-assert 183
  :size-assert         #x300
  :flag-assert         #xb702800300
  (:methods
    (attack () _type_ :state 178)
    (stop-run () _type_ :state 179)
    (run-away () _type_ :state 180)
    (charge () _type_ :state 181)
    (rhino-method-182 () none 182)
    )
  )
|#

;; (define-extern *rhino-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rhino-wall                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rhino-wall (process-focusable)
  ((anim     basic  :offset-assert 200)
   (art-name basic  :offset-assert 204)
   (id       int8   :offset-assert 208)
   )
  :method-count-assert 31
  :size-assert         #xd5
  :flag-assert         #x1f006000d5
  (:methods
    (unbroken () _type_ :state 27)
    (hit () _type_ :state 28)
    (broken () _type_ :state 29)
    (rhino-wall-method-30 () none 30)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mountain-ocean                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-mountain* object)
;; (define-extern *ocean-colors-mountain* object)
;; (define-extern *ocean-near-indices-mountain* ocean-near-indices)
;; (define-extern *ocean-trans-indices-mountain* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-mountain* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-mountain* ocean-mid-masks)
;; (define-extern *ocean-map-mountain* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mountain-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mtn-dice-button (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-dice (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-dice-info (UNKNOWN)
  ((mat UNKNOWN 12 :offset-assert 0)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype mtn-plat-elevator (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-updown (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-eject (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-long (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-gate (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-aval-rocks (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-aval-rocks-shadow (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-return (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-gap (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-button (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-gear-device (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype water-anim-mountain (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype trans-plat (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *dice-back-way-num* object)
;; (define-extern *dice-back-way* array)
;; (define-extern *dice-position-array* array)
;; (define-extern *dice-angle-array* array)
;; (define-extern *dice-offset-x* object)
;; (define-extern *dice-offset-z* object)
;; (define-extern *dice-world-array* array)
;; (define-extern *dice-good-way-array* array)
;; (define-extern *dice-blocked-array* array)
;; (define-extern *dice-last-safe-position* object)
;; (define-extern dice-wrong-way? function)
;; (define-extern *mtn-dice-done-info* array)
;; (define-extern dice-joint-callback function)
;; (define-extern *mtn-aval-rocks-shadow-control* shadow-control)
;; (define-extern mtn-aval-rocks-shadow-init-by-other function)
;; (define-extern ripple-for-water-anim-mountain ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mountain-obs2                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mtn-iris-door (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (open () _type_ :state 20)
    (close () _type_ :state 21)
    )
  )
|#

#|
(deftype mtn-plat-shoot (plat)
  ((incoming-attack-id  uint32         :offset-assert 320)
   (angle-flip          float          :offset-assert 324)
   (angle-flip-vel      float          :offset-assert 328)
   (axe-flip            vector :inline :offset-assert 332)
   (state-flip          uint32         :offset-assert 348)
   (hit-time            time-frame         :offset-assert 356)
   (time-flip           float          :offset-assert 364)
   (disable-track-under basic          :offset-assert 368)
   (dest-angle          float          :offset-assert 372)
   (on-shake            basic          :offset-assert 376)
   (hint-count          float          :offset-assert 380)
   )
  :method-count-assert 37
  :size-assert         #x184
  :flag-assert         #x2501100184
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mountain-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mtn-plat-buried-rocks (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-plat-buried (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-lens (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-lens-base (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-lens-floor (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-shard (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-step-plat-rocks-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-step-plat-rocks-b (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype mtn-step-plat-rocks-c (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mountain-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mountain-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-mountain-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hopper                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hopper (nav-enemy)
  ((speed-y               float                      :offset-assert 600)
   (accel-y               float                      :offset-assert 604)
   (next-jump-time        int32                      :offset-assert 608)
   (path-intro            basic                      :offset-assert 612)
   (can-go-knocked?       basic                      :offset-assert 616)
   (land-anim-index       int32                      :offset-assert 620)
   (step-num              int32                      :offset-assert 624)
   (best-point            vector             :inline :offset-assert 636)
   (best-score            float                      :offset-assert 652)
   (origin                vector             :inline :offset-assert 668)
   (direction             vector             :inline :offset-assert 684)
   (jump-dist             float                      :offset-assert 700)
   (side                  float                      :offset-assert 704)
   (jump-start-anim       uint32                     :offset-assert 708)
   (jump-air-anim         uint32                     :offset-assert 712)
   (jump-land-anim        uint32                     :offset-assert 716)
   (jump-height-min       float                      :offset-assert 720)
   (jump-anim-start-frame float                      :offset-assert 724)
   (minimap               connection-minimap         :offset-assert 728)
   )
  :method-count-assert 180
  :size-assert         #x2e0
  :flag-assert         #xb4026002e0
  (:methods
    (hopper-method-178 () none 178)
    (hopper-method-179 () none 179)
    )
  )
|#

#|
(deftype hopper-anim-info (structure)
  ((hit-anim-index  int32  :offset-assert 0)
   (land-anim-index int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype hopper-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (yellow-hit-anim UNKNOWN 3 :offset-assert 8)
   (blue-hit-anim   UNKNOWN 3 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

;; (define-extern *hopper-global-info* hopper-global-info)
;; (define-extern *hopper-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern *hopper-next-jump-time* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-ocean                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-village1* object) ;; ocean-spheres
;; (define-extern *ocean-colors-village1* object) ;; ocean-colors
;; (define-extern *ocean-near-indices-village1* ocean-near-indices) ;; ocean-near-indices
;; (define-extern *ocean-trans-indices-village1* ocean-trans-indices) ;; ocean-trans-indices
;; (define-extern *ocean-mid-indices-village1* ocean-mid-indices) ;; ocean-mid-indices
;; (define-extern *ocean-mid-masks-village1* ocean-mid-masks) ;; ocean-mid-masks
;; (define-extern *ocean-map-village1* object) ;; ocean-map

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-drop-level-bigdoor-open-pops function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-split-level-intro-vortex-pop-userdata function)
;; (define-extern *jak-highres-src-lightning-joints* array)
;; (define-extern *jak-highres-dst-lightning-joints* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype intro-flamer (process-drawable)
  ((up-dir           vector :inline :offset-assert 204)
   (average-dir      vector :inline :offset-assert 220)
   (id               int32          :offset-assert 236)
   (path-u           float          :offset-assert 240)
   (path-du          float          :offset-assert 244)
   (z-rot            float          :offset-assert 248)
   (flit-prev-offset vector :inline :offset-assert 252)
   (flit-next-offset vector :inline :offset-assert 268)
   (flit-factor      float          :offset-assert 284)
   (flit-timer       uint64         :offset-assert 292)
   (flit-interval    uint64         :offset-assert 300)
   )
  :method-count-assert 23
  :size-assert         #x138
  :flag-assert         #x1700c00138
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (intro-flamer-method-22 () none 22)
    )
  )
|#

#|
(deftype metalhead-spawner (process)
  ((path-tbl    UNKNOWN 19      :offset-assert 124)
   (init-pos    vector  :inline :offset-assert 204)
   (average-dir vector  :inline :offset-assert 220)
   )
  :method-count-assert 17
  :size-assert         #xf0
  :flag-assert         #x11007000f0
  (:methods
    (metalhead-spawner-method-9 () none 9)
    (metalhead-spawner-method-10 () none 10)
    (metalhead-spawner-method-11 () none 11)
    (metalhead-spawner-method-12 () none 12)
    (metalhead-spawner-method-13 () none 13)
    (idle () _type_ :state 14)
    (active () _type_ :state 15)
    (die () _type_ :state 16)
    )
  )
|#

#|
(deftype vil-windmill-sail (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern intro-flamer-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vortex-data                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vortex-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype vortex-vert-array (structure)
  ((data UNKNOWN 306 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2640
  :flag-assert         #x900002640
  )
|#

#|
(deftype vortex-work (basic)
  ((giftag  dma-gif :inline :offset-assert 16)
   (off-s-0 uint16          :offset-assert 32)
   (off-t-0 uint16          :offset-assert 34)
   (off-s-1 uint16          :offset-assert 36)
   (off-t-1 uint16          :offset-assert 38)
   (off-s-2 uint16          :offset-assert 40)
   (off-t-2 uint16          :offset-assert 42)
   (off-s-3 uint16          :offset-assert 44)
   (off-t-3 uint16          :offset-assert 46)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern *vortex-work* vortex-work)
;; (define-extern *vortex-vert-array* object)
;; (define-extern *vortex-poly* object)
;; (define-extern *vortex-tvals* object)
;; (define-extern init-vortex-polys function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vortex                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sort-vortex-data function)
;; (define-extern init-vortex-regs function)
;; (define-extern draw-large-polygon-vortex function)
;; (define-extern render-vortex-quad function)
;; (define-extern update-vortex-data function)
(define-extern draw-vortex (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ai-task-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ai-task (basic)
  ((next      basic      :offset-assert 4)
   (prev      basic      :offset-assert 8)
   (pool      basic      :offset-assert 12)
   (unique-id uint32     :offset-assert 16)
   (bytes     UNKNOWN 16 :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (ai-task-method-9 () none 9)
    (ai-task-method-10 () none 10)
    (ai-task-method-11 () none 11)
    )
  )
|#

#|
(deftype ai-task-pool (basic)
  ((anchor       basic   :offset-assert 4)
   (tasks        uint32  :offset-assert 8)
   (tasks-length uint32  :offset-assert 12)
   (unique-id    uint32  :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x14
  :flag-assert         #xc00000014
  (:methods
    (ai-task-pool-method-9 () none 9)
    (ai-task-pool-method-10 () none 10)
    (ai-task-pool-method-11 () none 11)
    )
  )
|#

#|
(deftype ai-task-control (basic)
  ((anchor basic  :offset-assert 4)
   (pool   basic  :offset-assert 8)
   )
  :method-count-assert 18
  :size-assert         #xc
  :flag-assert         #x120000000c
  (:methods
    (ai-task-control-method-9 () none 9)
    (ai-task-control-method-10 () none 10)
    (ai-task-control-method-11 () none 11)
    (ai-task-control-method-12 () none 12)
    (ai-task-control-method-13 () none 13)
    (ai-task-control-method-14 () none 14)
    (ai-task-control-method-15 () none 15)
    (ai-task-control-method-16 () none 16)
    (ai-task-control-method-17 () none 17)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bot-focus-info (structure)
  ((max-los-dist     float          :offset-assert 0)
   (fproc            basic          :offset-assert 4)
   (bullseye-xz-dist float          :offset-assert 8)
   (ry-diff          float          :offset-assert 12)
   (my-facing-ry     float          :offset-assert 16)
   (bullseye-ry      float          :offset-assert 20)
   (los              int8           :offset-assert 24)
   (update-time      time-frame         :offset-assert 32)
   (bullseye         vector :inline :offset-assert 48)
   (pos              vector :inline :offset-assert 64)
   (my-facing-xz-dir vector :inline :offset-assert 80)
   (bullseye-xz-dir  vector :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

#|
(deftype bot-turn-info (structure)
  ((facing-ry          float              :offset-assert 0)
   (targ-ry            float              :offset-assert 4)
   (ry-diff            float              :offset-assert 8)
   (predicted-ry-diff  float              :offset-assert 12)
   (predicted-targ-ry  float              :offset-assert 16)
   (facing-dir         vector     :inline :offset-assert 32)
   (targ-pos           vector     :inline :offset-assert 48)
   (predicted-targ-pos vector     :inline :offset-assert 64)
   (src-quat           quaternion :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

#|
(deftype bot-speech-tuning (structure)
  ((fo-min   int32  :offset-assert 0)
   (fo-max   int32  :offset-assert 4)
   (fo-curve int8   :offset-assert 8)
   (trans?   basic  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype bot-speech-info (structure)
  ((flags     uint16  :offset-assert 0)
   (hold-time uint16  :offset-assert 2)
   (slave-id  int8    :offset-assert 4)
   (tuning-id int8    :offset-assert 5)
   (name      basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype bot-spot (structure)
  ((center          vector :inline :offset-assert 0)
   (center-x        float          :offset-assert 0)
   (center-y        float          :offset-assert 4)
   (center-z        float          :offset-assert 8)
   (inside-xz-dist  float          :offset-assert 12)
   (blocked-xz-dist float          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype bot-waypoint (basic)
  ((waypoint-id      int16  :offset-assert 4)
   (nav-mesh-index   int8   :offset-assert 6)
   (skip-to          int8   :offset-assert 7)
   (on-set           basic  :offset-assert 8)
   (on-update        basic  :offset-assert 12)
   (on-skipping-here basic  :offset-assert 16)
   (check-too-far    basic  :offset-assert 20)
   (warn-dist        float  :offset-assert 24)
   (fail-dist-delta  float  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; field check-too-far uses ~A with a signed load
  )
|#

#|
(deftype bot-course (basic)
  ((course-id              uint8   :offset-assert 4)
   (speech-count           uint16  :offset-assert 6)
   (spot-count             uint16  :offset-assert 8)
   (retry-cookie           uint8   :offset-assert 10)
   (too-far-warn-speeches  basic   :offset-assert 12)
   (too-far-fail-speeches  basic   :offset-assert 16)
   (attack-player-speeches basic   :offset-assert 20)
   (default-check-too-far  basic   :offset-assert 24)
   (waypoints              basic   :offset-assert 28)
   (speeches               uint32  :offset-assert 32)
   (speech-tunings         uint32  :offset-assert 36)
   (dirs                   uint32  :offset-assert 40)
   (spots                  uint32  :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype bot (nav-enemy)
  ((bot-flags                       uint32                 :offset-assert 600)
   (min-speed                       float                  :offset-assert 604)
   (max-speed                       float                  :offset-assert 608)
   (follow-offset                   float                  :offset-assert 612)
   (too-far-warn-dist               float                  :offset-assert 616)
   (too-far-fail-dist-delta         float                  :offset-assert 620)
   (too-far-warn-dist-default       float                  :offset-assert 624)
   (too-far-fail-dist-delta-default float                  :offset-assert 628)
   (travel-prev-ry                  float                  :offset-assert 632)
   (travel-prev-ry1                 float                  :offset-assert 636)
   (player-blocking                 float                  :offset-assert 640)
   (ai-ctrl                         basic                  :offset-assert 644)
   (course                          basic                  :offset-assert 648)
   (waypoint                        basic                  :offset-assert 652)
   (waypoint-bits                   uint32                 :offset-assert 656)
   (waypoint-int32a                 int32                  :offset-assert 660)
   (bot-task-bits                   uint32                 :offset-assert 664)
   (hit-invuln-ignore-me-delay      uint32                 :offset-assert 668)
   (hit-invuln-focus-disable-delay  uint32                 :offset-assert 672)
   (warn-to-fail-timeout            uint32                 :offset-assert 676)
   (warn-min-delay                  uint32                 :offset-assert 680)
   (warn-max-delay                  uint32                 :offset-assert 684)
   (spot-color                      uint32                 :offset-assert 688)
   (waypoint-request                int16                  :offset-assert 692)
   (hit-by-enemy-count              uint16                 :offset-assert 694)
   (hit-by-player-count             uint16                 :offset-assert 696)
   (notice-enemy-dist               float                  :offset-assert 700)
   (channel                         uint8                  :offset-assert 704)
   (focus-mode                      int8                   :offset-assert 705)
   (nav-mesh-index                  int8                   :offset-assert 706)
   (delay-too-far-check             int8                   :offset-assert 707)
   (slave-id                        int8                   :offset-assert 708)
   (vehicle-seat-index              int8                   :offset-assert 709)
   (bot-health-index                int8                   :offset-assert 710)
   (task                            basic                  :offset-assert 712)
   (swivel-joint-mod                basic                  :offset-assert 716)
   (health-handle                   uint64                 :offset-assert 724)
   (poi-handle                      uint64                 :offset-assert 732)
   (my-simple-focus                 uint32                 :offset-assert 740)
   (attacker-handle                 uint64                 :offset-assert 748)
   (scene-player-handle             uint64                 :offset-assert 756)
   (master-handle                   uint64                 :offset-assert 764)
   (vehicle-handle                  uint64                 :offset-assert 772)
   (hit-invuln-starting-time        time-frame                 :offset-assert 780)
   (danger-time                     time-frame                 :offset-assert 788)
   (attacker-time                   time-frame                 :offset-assert 796)
   (started-warning-time            time-frame                 :offset-assert 804)
   (waypoint-time0                  uint64                 :offset-assert 812)
   (next-too-far-warn-time          time-frame                 :offset-assert 820)
   (spot                            bot-spot       :inline :offset-assert 828)
   (follow-dir                      vector         :inline :offset-assert 860)
   (focus-info                      bot-focus-info :inline :offset-assert 876)
   )
  :method-count-assert 225
  :size-assert         #x3e0
  :flag-assert         #xe1036003e0
  (:methods
    (bot-method-178 () none 178)
    (bot-method-179 () none 179)
    (bot-method-180 () none 180)
    (bot-method-181 () none 181)
    (bot-method-182 () none 182)
    (bot-method-183 () none 183)
    (bot-method-184 () none 184)
    (bot-method-185 () none 185)
    (bot-method-186 () none 186)
    (bot-method-187 () none 187)
    (bot-method-188 () none 188)
    (bot-method-189 () none 189)
    (bot-method-190 () none 190)
    (bot-method-191 () none 191)
    (bot-method-192 () none 192)
    (bot-method-193 () none 193)
    (bot-method-194 () none 194)
    (bot-method-195 () none 195)
    (bot-method-196 () none 196)
    (bot-method-197 () none 197)
    (bot-method-198 () none 198)
    (bot-method-199 () none 199)
    (bot-method-200 () none 200)
    (bot-method-201 () none 201)
    (bot-method-202 () none 202)
    (bot-method-203 () none 203)
    (bot-method-204 () none 204)
    (bot-method-205 () none 205)
    (bot-method-206 () none 206)
    (bot-method-207 () none 207)
    (bot-method-208 () none 208)
    (bot-method-209 () none 209)
    (bot-method-210 () none 210)
    (bot-method-211 () none 211)
    (bot-method-212 () none 212)
    (bot-method-213 () none 213)
    (bot-method-214 () none 214)
    (bot-method-215 () none 215)
    (bot-method-216 () none 216)
    (bot-method-217 () none 217)
    (bot-method-218 () none 218)
    (bot-method-219 () none 219)
    (bot-method-220 () none 220)
    (bot-method-221 () none 221)
    (bot-method-222 () none 222)
    (bot-method-223 () none 223)
    (bot-method-224 () none 224)
    )
  )
|#

#|
(deftype bot-speech-list (basic)
  ((flags            uint8  :offset-assert 4)
   (retry-cookie     uint8  :offset-assert 5)
   (last-local-index int16  :offset-assert 6)
   (speech-indexes   basic  :offset-assert 8)
   )
  :method-count-assert 11
  :size-assert         #xc
  :flag-assert         #xb0000000c
  (:methods
    (bot-speech-list-method-9 () none 9)
    (bot-speech-list-method-10 () none 10)
    )
  )
|#

#|
(deftype bot-speech-list-shuffle (bot-speech-list)
  ((history-mask      uint64  :offset-assert 16)
   (history-mask-full uint64  :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  (:methods
    )
  )
|#

#|
(deftype bot-course-table (basic)
  ((course UNKNOWN 18 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )
|#

;; (define-extern *bot-task-pool* ai-task-pool)
;; (define-extern *bot-course-table* bot-course-table)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern bot-simple-check-too-far function)
;; (define-extern bot-check-too-far-always-okay function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-plasma (structure)
  ((flags            uint8   :offset-assert 0)
   (level            float   :offset-assert 4)
   (min-level        float   :offset-assert 8)
   (charge-speed     float   :offset-assert 12)
   (powerup-sound-id uint32  :offset-assert 16)
   (plasma-sound-id  uint32  :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (sig-plasma-method-9 () none 9)
    (sig-plasma-method-10 () none 10)
    (sig-plasma-method-11 () none 11)
    (sig-plasma-method-12 () none 12)
    (sig-plasma-method-13 () none 13)
    (sig-plasma-method-14 () none 14)
    )
  )
|#

#|
(deftype sig-path-sample (structure)
  ((bytes  UNKNOWN    32      :offset-assert 0)
   (pos    vector     :inline :offset-assert 32)
   (quat   quaternion :inline :offset-assert 48)
   (flags  uint8              :offset-assert 12)
   (pos-x  float              :offset-assert 32)
   (pos-y  float              :offset-assert 36)
   (pos-z  float              :offset-assert 40)
   (quat-x float              :offset-assert 48)
   (quat-y float              :offset-assert 52)
   (quat-z float              :offset-assert 56)
   (quat-w float              :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype sig-path (basic)
  ((sample-count int32   :offset-assert 4)
   (samples      uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype sig (bot)
  ((fired-gun-count     uint32             :offset-assert 988)
   (sig-path            basic              :offset-assert 992)
   (sig-path-clock      basic              :offset-assert 996)
   (travel-anim-interp  float              :offset-assert 1000)
   (platform-index      uint8              :offset-assert 1004)
   (played-unjam-time   time-frame             :offset-assert 1012)
   (sig-path-start-time time-frame             :offset-assert 1020)
   (sig-path-cur-time   time-frame             :offset-assert 1028)
   (sig-path-prev-time  time-frame             :offset-assert 1036)
   (plasma              sig-plasma :inline :offset-assert 1044)
   (sig-path-prev-pos   vector     :inline :offset-assert 364)
   )
  :method-count-assert 259
  :size-assert         #x430
  :flag-assert         #x10303b00430
  (:methods
    (sig-method-225 () none 225)
    (sig-method-226 () none 226)
    (sig-method-227 () none 227)
    (sig-method-228 () none 228)
    (sig-method-229 () none 229)
    (sig-method-230 () none 230)
    (sig-method-231 () none 231)
    (sig-method-232 () none 232)
    (sig-method-233 () none 233)
    (sig-method-234 () none 234)
    (sig-method-235 () none 235)
    (sig-method-236 () none 236)
    (sig-method-237 () none 237)
    (sig-method-238 () none 238)
    (sig-method-239 () none 239)
    (sig-method-240 () none 240)
    (sig-method-241 () none 241)
    (sig-method-242 () none 242)
    (sig-method-243 () none 243)
    (sig-method-244 () none 244)
    (sig-method-245 () none 245)
    (sig-method-246 () none 246)
    (sig-method-247 () none 247)
    (sig-method-248 () none 248)
    (sig-method-249 () none 249)
    (sig-method-250 () none 250)
    (sig-method-251 () none 251)
    (sig-method-252 () none 252)
    (sig-method-253 () none 253)
    (sig-method-254 () none 254)
    (sig-method-255 () none 255)
    (sig-method-256 () none 256)
    (sig-method-257 () none 257)
    (sig-method-258 () none 258)
    )
  )
|#

#|
(deftype sigt-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype sigt-choose-piston (ai-task)
  ((check-done    basic     :offset-assert 32)
   (which-spot    int8      :offset-assert 36)
   (num-spots     uint8     :offset-assert 37)
   (spot-indexes  UNKNOWN 4 :offset-assert 38)
   (actor-indexes UNKNOWN 4 :offset-assert 42)
   )
  :method-count-assert 15
  :size-assert         #x30
  :flag-assert         #xf00000030
  (:methods
    (sigt-choose-piston-method-12 () none 12)
    (sigt-choose-piston-method-13 () none 13)
    (sigt-choose-piston-method-14 () none 14)
    )
  )
|#

#|
(deftype sigt-riding-piston (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 4 :offset-assert 38)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (sigt-riding-piston-method-12 () none 12)
    )
  )
|#

#|
(deftype sigt-charge-plasma (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 4 :offset-assert 38)
   (actor-index  uint8     :offset-assert 42)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype sigt-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype sigt-repair-gun (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-shot                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-shot (projectile)
  ((tail-pos vector :inline :offset-assert 476)
   (hit-pos  vector :inline :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#

;; (define-extern sig-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-plasma                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-sig-plasma-lightning function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype sig-global-info (basic)
  ((prev-blue-hit int8      :offset-assert 4)
   (blue-hit-anim UNKNOWN 3 :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern *sig-global-info* sig-global-info)
;; (define-extern *sig-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-course (bot-course)
  ((ouch-speeches    basic  :offset-assert 48)
   (victory-speeches basic  :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype ashelin (bot)
  ((knocked-anim        basic          :offset-assert 988)
   (travel-anim-interp  float          :offset-assert 992)
   (fired-gun-count     uint32         :offset-assert 996)
   (last-fire-time      time-frame         :offset-assert 1004)
   (victory-speech-time time-frame         :offset-assert 1012)
   (frontline           plane  :inline :offset-assert 1020)
   )
  :method-count-assert 251
  :size-assert         #x410
  :flag-assert         #xfb03900410
  (:methods
    (ashelin-method-225 () none 225)
    (ashelin-method-226 () none 226)
    (ashelin-method-227 () none 227)
    (ashelin-method-228 () none 228)
    (ashelin-method-229 () none 229)
    (ashelin-method-230 () none 230)
    (ashelin-method-231 () none 231)
    (ashelin-method-232 () none 232)
    (ashelin-method-233 () none 233)
    (ashelin-method-234 () none 234)
    (ashelin-method-235 () none 235)
    (ashelin-method-236 () none 236)
    (ashelin-method-237 () none 237)
    (ashelin-method-238 () none 238)
    (ashelin-method-239 () none 239)
    (ashelin-method-240 () none 240)
    (ashelin-method-241 () none 241)
    (ashelin-method-242 () none 242)
    (ashelin-method-243 () none 243)
    (ashelin-method-244 () none 244)
    (ashelin-method-245 () none 245)
    (ashelin-method-246 () none 246)
    (ashelin-method-247 () none 247)
    (ashelin-method-248 () none 248)
    (ashelin-method-249 () none 249)
    (ashelin-method-250 () none 250)
    )
  )
|#

#|
(deftype asht-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype asht-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-shot                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-shot (projectile)
  ((tail-pos vector :inline :offset-assert 476)
   (hit-pos  vector :inline :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#

;; (define-extern ashelin-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype ashelin-global-info (basic)
  ((prev-blue-hit      int8      :offset-assert 4)
   (blue-hit-anim      UNKNOWN 6 :offset-assert 8)
   (blue-hit-land-anim UNKNOWN 6 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

;; (define-extern *ashelin-global-info* ashelin-global-info)
;; (define-extern *ashelin-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig0-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-atoll (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype sig0-course (UNKNOWN)
  ((course-id               uint8   :offset-assert 4)
   (speech-count            uint16  :offset-assert 6)
   (spot-count              uint16  :offset-assert 8)
   (retry-cookie            uint8   :offset-assert 10)
   (too-far-warn-speeches   basic   :offset-assert 12)
   (too-far-fail-speeches   basic   :offset-assert 16)
   (attack-player-speeches  basic   :offset-assert 20)
   (default-check-too-far   basic   :offset-assert 24)
   (waypoints               basic   :offset-assert 28)
   (speeches                uint32  :offset-assert 32)
   (speech-tunings          uint32  :offset-assert 36)
   (dirs                    uint32  :offset-assert 40)
   (spots                   uint32  :offset-assert 44)
   (liftcat-speech-index    int8    :offset-assert 48)
   (first-liftcat-speeches  basic   :offset-assert 52)
   (second-liftcat-speeches basic   :offset-assert 56)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

;; (define-extern sig0-first-battle-too-far function)
;; (define-extern sig0-tank-check-too-far function)
;; (define-extern sig0-gangway-check-too-far function)
;; (define-extern sig0-final-snipers-check-too-far function)
;; (define-extern sig0-say-look-out-if-should function)
;; (define-extern sig-say-waste-the-suckers-if-should function)
;; (define-extern *sig0-course* sig0-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash1-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-battle (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *ash1-course* ashelin-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; atoll-tank                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype atoll-tank (process-focusable)
  ((is-master?     basic  :offset-assert 200)
   (aftermath-part basic  :offset-assert 204)
   )
  :method-count-assert 29
  :size-assert         #xd4
  :flag-assert         #x1d006000d4
  (:methods
    (dormant () _type_ :state 27)
    (idle () _type_ :state 28)
    )
  )
|#

;; (define-extern atoll-tank-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; atoll-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern atoll-sniper-lightning function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sniper                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sniper (spyder)
  ((next-pick-time time-frame  :offset-assert 940)
   )
  :method-count-assert 186
  :size-assert         #x3b8
  :flag-assert         #xba034003b8
  (:methods
    )
  )
|#

;; (define-extern *sniper-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; amphibian                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype amphibian-tongue-attack-info (structure)
  ((targ-dist   float          :offset-assert 0)
   (max-length  float          :offset-assert 4)
   (start-pos   vector :inline :offset-assert 16)
   (base-dir    vector :inline :offset-assert 32)
   (base-rot    vector :inline :offset-assert 48)
   (targ-pos    vector :inline :offset-assert 64)
   (targ-dir    vector :inline :offset-assert 80)
   (targ-rot    vector :inline :offset-assert 96)
   (clamped-pos vector :inline :offset-assert 112)
   (clamped-dir vector :inline :offset-assert 128)
   (clamped-rot vector :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

#|
(deftype amphibian-joint-mod (basic)
  ((joint-index int32          :offset-assert 4)
   (proc        basic          :offset-assert 8)
   (max-length  float          :offset-assert 12)
   (target      vector :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (amphibian-joint-mod-method-9 () none 9)
    )
  )
|#

#|
(deftype amphibian-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype amphibian-global-info (basic)
  ((prev-blue-hit     int8      :offset-assert 4)
   (prev-knocked      int8      :offset-assert 5)
   (notice-anim       UNKNOWN 2 :offset-assert 8)
   (run-anim          UNKNOWN 2 :offset-assert 16)
   (knocked-anim      UNKNOWN 3 :offset-assert 24)
   (knocked-land-anim UNKNOWN 3 :offset-assert 36)
   (blue-hit-anim     UNKNOWN 3 :offset-assert 48)
   (jump-wind-up-anim UNKNOWN 2 :offset-assert 60)
   (jump-in-air-anim  UNKNOWN 2 :offset-assert 68)
   (jump-land-anim    UNKNOWN 2 :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

#|
(deftype amphibian (nav-enemy)
  ((tongue-scale       float   :offset-assert 600)
   (flags              uint8   :offset-assert 604)
   (knocked-anim-index int8    :offset-assert 605)
   (jump-anim-index    int8    :offset-assert 606)
   (tongue-mode        uint64  :offset-assert 612)
   (tongue-mod         basic   :offset-assert 620)
   (attacker-handle    uint64  :offset-assert 628)
   (prev-ry            float   :offset-assert 636)
   (prev-ry1           float   :offset-assert 640)
   )
  :method-count-assert 188
  :size-assert         #x288
  :flag-assert         #xbc02100288
  (:methods
    (attack-forward () _type_ :state 178)
    (attack-forward-lunge () _type_ :state 179)
    (attack-forward-end () _type_ :state 180)
    (attack-spin () _type_ :state 181)
    (stare-idle () _type_ :state 182)
    (tongue-attack () _type_ :state 183)
    (amphibian-method-184 () none 184)
    (amphibian-method-185 () none 185)
    (amphibian-method-186 () none 186)
    (amphibian-method-187 () none 187)
    )
  )
|#

;; (define-extern *amphibian-global-info* amphibian-global-info)
;; (define-extern *amphibian-nav-enemy-info* nav-enemy-info)
;; (define-extern amphibian-joint-mod-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; juicer                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype juicer-shot (projectile)
  ((lightning UNKNOWN 5 :offset-assert 468)
   (victim    uint64    :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x1f8
  :flag-assert         #x28018001f8
  (:methods
    )
  )
|#

#|
(deftype juicer-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype juicer-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (idle-anim       UNKNOWN 3 :offset-assert 8)
   (patrol-anim     UNKNOWN 2 :offset-assert 20)
   (notice-anim     UNKNOWN 2 :offset-assert 28)
   (charge-anim     UNKNOWN 2 :offset-assert 36)
   (knocked-anim    UNKNOWN 2 :offset-assert 44)
   (celebrate-anim  UNKNOWN 2 :offset-assert 52)
   (yellow-hit-anim UNKNOWN 4 :offset-assert 60)
   (blue-hit-anim   UNKNOWN 6 :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype juicer (nav-enemy)
  ((los                los-control :inline :offset-assert 604)
   (intro-path         basic               :offset-assert 752)
   (joint              basic               :offset-assert 756)
   (joint-enable       basic               :offset-assert 760)
   (joint-blend        float               :offset-assert 764)
   (last-fire-time     time-frame              :offset-assert 772)
   (heading            basic               :offset-assert 780)
   (move-angle         float               :offset-assert 784)
   (torso-track-player basic               :offset-assert 788)
   (circle-backward?   basic               :offset-assert 796)
   (using-turn-anim    basic               :offset-assert 800)
   (hit-focus          basic               :offset-assert 804)
   (ambush-path-pt     int8                :offset-assert 808)
   (charge-index       int8                :offset-assert 809)
   (hostile-dest       vector      :inline :offset-assert 812)
   (focus-is-up        basic               :offset-assert 828)
   (current-projectile uint64              :offset-assert 836)
   )
  :method-count-assert 185
  :size-assert         #x350
  :flag-assert         #xb902d00350
  (:methods
    (ambush-cont () _type_ :state 178)
    (attack () _type_ :state 179)
    (juicer-method-180 () none 180)
    (juicer-method-181 () none 181)
    (juicer-method-182 () none 182)
    (juicer-method-183 () none 183)
    (juicer-method-184 () none 184)
    )
  )
|#

;; (define-extern juicer-proj-move function)
;; (define-extern *juicer-global-info* juicer-global-info)
;; (define-extern *juicer-nav-enemy-info* nav-enemy-info)
;; (define-extern juicer-face-player-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarm-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shaker (structure)
  ((axis         vector :inline :offset-assert 0)
   (start-time   time-frame         :offset-assert 16)
   (decay-time   float          :offset-assert 24)
   (amplitude    float          :offset-assert 28)
   (freq         float          :offset-assert 32)
   (y-decay-time float          :offset-assert 36)
   (y-amplitude  float          :offset-assert 40)
   (y-freq       float          :offset-assert 44)
   (shake        float          :offset-assert 48)
   (y-shake      float          :offset-assert 52)
   )
  :method-count-assert 10
  :size-assert         #x38
  :flag-assert         #xa00000038
  (:methods
    (shaker-method-9 () none 9)
    )
  )
|#

#|
(deftype farm-marrow (process-focusable)
  ((shakers            UNKNOWN 5 :offset-assert 204)
   (incoming-attack-id uint32    :offset-assert 524)
   )
  :method-count-assert 31
  :size-assert         #x214
  :flag-assert         #x1f01a00214
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (farm-marrow-method-29 () none 29)
    (farm-marrow-method-30 () none 30)
    )
  )
|#

#|
(deftype farm-beetree (process-focusable)
  ((shakers            UNKNOWN 2 :offset-assert 204)
   (incoming-attack-id uint32    :offset-assert 332)
   )
  :method-count-assert 31
  :size-assert         #x154
  :flag-assert         #x1f00e00154
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (farm-beetree-method-29 () none 29)
    (farm-beetree-method-30 () none 30)
    )
  )
|#

#|
(deftype farm-cabbage (process-focusable)
  ((shakers            UNKNOWN 2 :offset-assert 204)
   (incoming-attack-id uint32    :offset-assert 332)
   )
  :method-count-assert 31
  :size-assert         #x154
  :flag-assert         #x1f00e00154
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (farm-cabbage-method-29 () none 29)
    (farm-cabbage-method-30 () none 30)
    )
  )
|#

#|
(deftype farm-small-cabbage (process-focusable)
  ((shakers            UNKNOWN 1 :offset-assert 204)
   (incoming-attack-id uint32    :offset-assert 268)
   )
  :method-count-assert 31
  :size-assert         #x114
  :flag-assert         #x1f00a00114
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (farm-small-cabbage-method-29 () none 29)
    (farm-small-cabbage-method-30 () none 30)
    )
  )
|#

#|
(deftype farm-chilirots (process-focusable)
  ((shakers            UNKNOWN 4 :offset-assert 204)
   (incoming-attack-id uint32    :offset-assert 460)
   )
  :method-count-assert 31
  :size-assert         #x1d4
  :flag-assert         #x1f016001d4
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (farm-chilirots-method-29 () none 29)
    (farm-chilirots-method-30 () none 30)
    )
  )
|#

#|
(deftype farm-sprinkler-barrels (process-focusable)
  ()
  :method-count-assert 30
  :size-assert         #xcc
  :flag-assert         #x1e005000cc
  (:methods
    (idle () _type_ :state 27)
    (farm-sprinkler-barrels-method-28 () none 28)
    (farm-sprinkler-barrels-method-29 () none 29)
    )
  )
|#

;; (define-extern check-farm-piece-ground function)
;; (define-extern pu->knocked-type function)
;; (define-extern *farm-marrow-exploder-params* joint-exploder-static-params)
;; (define-extern farm-marrow-callback function)
;; (define-extern *farm-beetree-exploder-params* joint-exploder-static-params)
;; (define-extern farm-beetree-callback function)
;; (define-extern *farm-cabbage-exploder-params* joint-exploder-static-params)
;; (define-extern farm-cabbage-callback function)
;; (define-extern *farm-small-cabbage-exploder-params* joint-exploder-static-params)
;; (define-extern farm-small-cabbage-callback function)
;; (define-extern *farm-chilirots-exploder-params* joint-exploder-static-params)
;; (define-extern farm-chilirots-callback function)
;; (define-extern farm-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarma-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyfarma-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-ctyfarma-drip function)
;; (define-extern check-drop-level-ctyfarma-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarmb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyfarmb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-ctyfarmb-drip function)
;; (define-extern check-drop-level-ctyfarmb-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; yakow                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype yakow (nav-enemy)
  ((incoming-attack-id uint32  :offset-assert 600)
   (grazing            basic   :offset-assert 604)
   )
  :method-count-assert 179
  :size-assert         #x264
  :flag-assert         #xb301f00264
  (:methods
    (kicked () _type_ :state 178)
    )
  )
|#

;; (define-extern *yakow-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; casboss-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *krew-holo-texture-anim-array* texture-anim-array)
;; (define-extern krew-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-baron                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cboss-tractor (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cboss-elevator (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype krew-boss-clone (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype krew-boss (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype krew-boss-shot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype hud-krew-boss (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern clones-wave-speech function)
;; (define-extern krew-hit-speech function)
;; (define-extern krew-hits-jak-speech function)
;; (define-extern krew-comes-in-speech function)
;; (define-extern *krew-boss-clone-nav-enemy-info* nav-enemy-info)
;; (define-extern krew-boss-shot-move function)
;; (define-extern *krew-boss-crate-spawn-points* array)
;; (define-extern *krew-boss-clone-spawn-points* array)
;; (define-extern *krew-boss-idle-path* array)
;; (define-extern *krew-boss-nav-enemy-info* nav-enemy-info)
;; (define-extern baron-move-point-on-ground function)
;; (define-extern *krew-boss-die-positions* array)
;; (define-extern casboss-deactivate function)
;; (define-extern casboss-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; casboss-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype casboss-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cascity-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype strip-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-strip-fencespikes-sparks-10 function)
;; (define-extern check-drop-level-ecowell-victory-dirt-rubble function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-ocean                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-strip* object)
;; (define-extern *ocean-colors-strip* object)
;; (define-extern *ocean-near-indices-strip* ocean-near-indices)
;; (define-extern *ocean-trans-indices-strip* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-strip* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-strip* ocean-mid-masks)
;; (define-extern *ocean-map-strip* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-rescue                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cntrlrm-door (process-drawable)
  ((root collide-shape  :offset-assert 124)
   )
  :method-count-assert 22
  :size-assert         #x198
  :flag-assert         #x1601200198
  (:methods
    (idle () _type_ :state 20)
    (opened () _type_ :state 21)
    )
  )
|#

#|
(deftype cntrlrm-button (process-drawable)
  ((root collide-shape  :offset-assert 124)
   )
  :method-count-assert 21
  :size-assert         #x198
  :flag-assert         #x1501200198
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-drop                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype strip-game-crate (process-drawable)
  ((local-offset vector :inline :offset-assert 204)
   (swing-angle  vector :inline :offset-assert 220)
   )
  :method-count-assert 23
  :size-assert         #xf0
  :flag-assert         #x17007000f0
  (:methods
    (idle () _type_ :state 20)
    (final-position () _type_ :state 21)
    (strip-game-crate-method-22 () none 22)
    )
  )
|#

#|
(deftype crane (process-drawable)
  ((angle-vel  float              :offset-assert 196)
   (angle      float              :offset-assert 200)
   (init-quat  quaternion :inline :offset-assert 204)
   (final-quat quaternion :inline :offset-assert 220)
   (crate      uint32             :offset-assert 236)
   )
  :method-count-assert 23
  :size-assert         #xf4
  :flag-assert         #x17008000f4
  (:methods
    (idle () _type_ :state 20)
    (swinging () _type_ :state 21)
    (final-position () _type_ :state 22)
    )
  )
|#

#|
(deftype cranecrate (process-drawable)
  ((root collide-shape  :offset-assert 124)
   )
  :method-count-assert 22
  :size-assert         #x198
  :flag-assert         #x1601200198
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    )
  )
|#

#|
(deftype grunt-egg (process-drawable)
  ((idle-anim-player idle-control :inline :offset-assert 204)
   (attack-id        uint32               :offset-assert 220)
   )
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (grunt-egg-method-22 () none 22)
    (grunt-egg-method-23 () none 23)
    )
  )
|#

#|
(deftype grunt-egg-a (grunt-egg)
  ()
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    )
  )
|#

#|
(deftype grunt-egg-b (grunt-egg)
  ()
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    )
  )
|#

#|
(deftype grunt-egg-c (grunt-egg)
  ()
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    )
  )
|#

#|
(deftype grunt-egg-d (grunt-egg)
  ()
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    )
  )
|#

;; (define-extern check-drop-level-strip-crate-drop-userdata-nosplat function)
;; (define-extern check-drop-level-strip-crate-drop-userdata function)
;; (define-extern strip-game-crate-init-by-other function)
;; (define-extern *grunt-egg-a-script* object)
;; (define-extern *grunt-egg-b-script* object)
;; (define-extern *grunt-egg-c-script* object)
;; (define-extern *grunt-egg-d-script* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; strip-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype strip-hazard (process-drawable)
  ((sync               sync-linear :inline :offset-assert 196)
   (shove-vec          vector      :inline :offset-assert 220)
   (no-collision-timer uint64              :offset-assert 236)
   (attack-id          uint32              :offset-assert 244)
   )
  :method-count-assert 21
  :size-assert         #xfc
  :flag-assert         #x15008000fc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype fencespikes (strip-hazard)
  ((start-quat   quaternion :inline :offset-assert 252)
   (spin         float              :offset-assert 268)
   (offset       float              :offset-assert 272)
   (sparks-group uint32             :offset-assert 276)
   )
  :method-count-assert 21
  :size-assert         #x11c
  :flag-assert         #x1500a0011c
  (:methods
    )
  )
|#

#|
(deftype pitspikes (strip-hazard)
  ((spinner basic  :offset-assert 248)
   )
  :method-count-assert 21
  :size-assert         #x100
  :flag-assert         #x1500800100
  (:methods
    )
  )
|#

#|
(deftype curtainsaw (strip-hazard)
  ()
  :method-count-assert 21
  :size-assert         #xfc
  :flag-assert         #x15008000fc
  (:methods
    )
  )
|#

#|
(deftype grenade-point (process-drawable)
  ((camera-name        basic               :offset-assert 196)
   (parented?          basic               :offset-assert 200)
   (lightning-time     time-frame              :offset-assert 204)
   (strike-table       basic               :offset-assert 212)
   (last-strike-index  int32               :offset-assert 216)
   (speed              meters              :offset-assert 220)
   (part2              basic               :offset-assert 224)
   (part3              basic               :offset-assert 228)
   (part-lightning-hit basic               :offset-assert 232)
   (enter-time         time-frame              :offset-assert 236)
   (minimap            connection-minimap  :offset-assert 244)
   )
  :method-count-assert 22
  :size-assert         #xfc
  :flag-assert         #x16008000fc
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype grenade (projectile)
  ((tumble-quat  quaternion :inline :offset-assert 476)
   (blast-radius float              :offset-assert 492)
   (end-target   uint64             :offset-assert 500)
   )
  :method-count-assert 42
  :size-assert         #x200
  :flag-assert         #x2a01800200
  (:methods
    (grenade-method-40 () none 40)
    (grenade-method-41 () none 41)
    )
  )
|#

#|
(deftype drill-plat (strip-hazard)
  ((plat-sound basic  :offset-assert 248)
   )
  :method-count-assert 21
  :size-assert         #x100
  :flag-assert         #x1500800100
  (:methods
    )
  )
|#

;; (define-extern strip-handler function)
;; (define-extern strip-trans function)
;; (define-extern *pitspikes-rotate-pos* object)
;; (define-extern pitspikes-birth-func function)
;; (define-extern *grenade-point-strike-table* array)
;; (define-extern strip-login function)
;; (define-extern strip-activate function)
;; (define-extern strip-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; chaincrate                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype strip-chain-crate-slave (process-drawable)
  ((part2            basic   :offset-assert 196)
   (path-u           float   :offset-assert 200)
   (path-speed       float   :offset-assert 204)
   (guide-sound-mask uint32  :offset-assert 208)
   (guide-num        int8    :offset-assert 212)
   )
  :method-count-assert 23
  :size-assert         #xd9
  :flag-assert         #x17006000d9
  (:methods
    (die-fast () _type_ :state 20)
    (moving () _type_ :state 21)
    (strip-chain-crate-slave-method-22 () none 22)
    )
  )
|#

#|
(deftype strip-chain-crate (process-drawable)
  ((spawn-pos       vector :inline :offset-assert 204)
   (next-spawn-time time-frame         :offset-assert 220)
   (spawn-delay     uint32         :offset-assert 228)
   (spawn-offset    uint32         :offset-assert 232)
   (dist-apart      float          :offset-assert 236)
   (crate-speed     float          :offset-assert 240)
   )
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:methods
    (idle () _type_ :state 20)
    (strip-chain-crate-method-21 () none 21)
    )
  )
|#

;; (define-extern *strip-chain-crate-guides* object)
;; (define-extern strip-chain-crate-slave-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-buoy                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-buoy-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#

#|
(deftype gun-buoy (nav-enemy)
  ((gun-elev-jmod      basic              :offset-assert 600)
   (start-pos          vector     :inline :offset-assert 604)
   (aim-dir            vector     :inline :offset-assert 620)
   (focus-pos          vector     :inline :offset-assert 348)
   (banking-quat       quaternion :inline :offset-assert 652)
   (offset-from-player vector     :inline :offset-assert 668)
   (offset-y-angular   float              :offset-assert 684)
   (elev-angle         float              :offset-assert 688)
   (y-final            float              :offset-assert 692)
   (y-offset           float              :offset-assert 696)
   (y-bob              float              :offset-assert 700)
   (y-speed            float              :offset-assert 704)
   (warning-interval   uint64             :offset-assert 708)
   (warning-timer      uint64             :offset-assert 716)
   (splash-timer       uint64             :offset-assert 724)
   (stare-down-timer   uint64             :offset-assert 732)
   (warning-id         uint32             :offset-assert 740)
   (voice-id           uint32             :offset-assert 744)
   (flags              uint16             :offset-assert 748)
   )
  :method-count-assert 184
  :size-assert         #x2f2
  :flag-assert         #xb8028002f2
  (:methods
    (attack () _type_ :state 178)
    (exit-ambush () _type_ :state 179)
    (warning () _type_ :state 180)
    (stare-down () _type_ :state 181)
    (open-guns () _type_ :state 182)
    (gun-buoy-method-183 () none 183)
    )
  )
|#

;; (define-extern gun-buoy-shot-move function)
;; (define-extern *gun-buoy-nav-enemy-info* nav-enemy-info)
;; (define-extern *gun-buoy-warning-speech* array)
;; (define-extern *gun-buoy-warning-index* object)
;; (define-extern *gun-buoy-victory-speech* array)
;; (define-extern *gun-buoy-victory-index* object)
;; (define-extern gun-buoy-chase-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; atoll-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype atoll-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-atoll-bird-wing function)
;; (define-extern check-drop-level-atoll-drop function)
;; (define-extern check-drop-level-atoll-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; atoll-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype piston (process-focusable)
  ((sound-trans  vector     :inline :offset-assert 204)
   (init-height  float              :offset-assert 220)
   (range-top    float              :offset-assert 224)
   (range-bottom float              :offset-assert 228)
   (sound-time   UNKNOWN    2       :offset-assert 236)
   (sync         sync-eased :inline :offset-assert 252)
   (piston-id    int32              :offset-assert 296)
   (looping-id   uint32             :offset-assert 300)
   )
  :method-count-assert 31
  :size-assert         #x134
  :flag-assert         #x1f00c00134
  (:methods
    (idle () _type_ :state 27)
    (dormant-down () _type_ :state 28)
    (dormant-up () _type_ :state 29)
    (running () _type_ :state 30)
    )
  )
|#

#|
(deftype turbine (process-drawable)
  ((dest-height float  :offset-assert 196)
   (rise-height float  :offset-assert 200)
   (rotspeed    float  :offset-assert 204)
   (risen       basic  :offset-assert 208)
   )
  :method-count-assert 22
  :size-assert         #xd8
  :flag-assert         #x16006000d8
  (:methods
    (idle () _type_ :state 20)
    (risen () _type_ :state 21)
    )
  )
|#

#|
(deftype liftcat (process-drawable)
  ((up-y   float  :offset-assert 196)
   (down-y float  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    (idle-up () _type_ :state 20)
    (going-down () _type_ :state 21)
    (idle-down () _type_ :state 22)
    )
  )
|#

#|
(deftype atollrotpipe (process-drawable)
  ((smush         smush-control :inline :offset-assert 196)
   (init-quat     quaternion    :inline :offset-assert 236)
   (rot-angle     float                 :offset-assert 252)
   (shudder-angle float                 :offset-assert 256)
   (cycle-time    float                 :offset-assert 260)
   (cycle-offset  float                 :offset-assert 264)
   )
  :method-count-assert 21
  :size-assert         #x110
  :flag-assert         #x1500900110
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype slider (process-drawable)
  ((path-pos          float              :offset-assert 196)
   (sync              sync-eased :inline :offset-assert 204)
   (attack-id         uint32             :offset-assert 248)
   (sound-id          uint32             :offset-assert 252)
   (collide-off-timer uint64             :offset-assert 260)
   (l-points          UNKNOWN    6       :offset-assert 268)
   (l-bolts           UNKNOWN    4       :offset-assert 364)
   )
  :method-count-assert 21
  :size-assert         #x180
  :flag-assert         #x1501000180
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype atoll-windmill (process-drawable)
  ((sync         sync-linear :inline :offset-assert 196)
   (blade-normal vector      :inline :offset-assert 220)
   (orig-quat    quaternion  :inline :offset-assert 236)
   )
  :method-count-assert 21
  :size-assert         #x100
  :flag-assert         #x1500800100
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype atoll-valve (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype atoll-hatch (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype atoll-hellcat (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (die-fast () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype atoll-mar-symbol (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fodder                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fodder-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype fodder-global-info (basic)
  ((prev-blue-hit int8      :offset-assert 4)
   (blue-hit-anim UNKNOWN 3 :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype fodder (nav-enemy)
  ((left-eye           basic          :offset-assert 600)
   (right-eye          basic          :offset-assert 604)
   (look-at-other      uint64         :offset-assert 612)
   (neck-away-from     basic          :offset-assert 620)
   (look-at-other-time time-frame         :offset-assert 628)
   (focus-pos          vector :inline :offset-assert 348)
   (slow-timer         uint64         :offset-assert 652)
   (fast-timer         uint64         :offset-assert 660)
   (attack-type        uint64         :offset-assert 668)
   (test-vec           vector :inline :offset-assert 684)
   )
  :method-count-assert 183
  :size-assert         #x2c0
  :flag-assert         #xb7024002c0
  (:methods
    (fodder-method-178 () none 178)
    (fodder-method-179 () none 179)
    (fodder-method-180 () none 180)
    (fodder-method-181 () none 181)
    (fodder-method-182 () none 182)
    )
  )
|#

;; (define-extern *fodder-global-info* fodder-global-info)
;; (define-extern *fodder-nav-enemy-info* nav-enemy-info)
;; (define-extern fodder-setup-eye-control function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hal (bot)
  ((handle-failed-slave-id int8      :offset-assert 988)
   (slave-handle           UNKNOWN 3 :offset-assert 996)
   )
  :method-count-assert 227
  :size-assert         #x400
  :flag-assert         #xe303800400
  (:methods
    (hal-method-225 () none 225)
    (hal-method-226 () none 226)
    )
  )
|#

#|
(deftype halt-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hal-nav-enemy-info* nav-enemy-info)
;; (define-extern hal-simple-check-too-far function)
;; (define-extern hal-post function)
;; (define-extern hal-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruf-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ruffian-course (bot-course)
  ((ouch-speeches basic  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype ruffian (bot)
  ((travel-anim-interp float   :offset-assert 988)
   (fired-gun-count    uint32  :offset-assert 992)
   (next-fire-time     time-frame  :offset-assert 996)
   )
  :method-count-assert 246
  :size-assert         #x3f0
  :flag-assert         #xf6037003f0
  (:methods
    (ruffian-method-225 () none 225)
    (ruffian-method-226 () none 226)
    (ruffian-method-227 () none 227)
    (ruffian-method-228 () none 228)
    (ruffian-method-229 () none 229)
    (ruffian-method-230 () none 230)
    (ruffian-method-231 () none 231)
    (ruffian-method-232 () none 232)
    (ruffian-method-233 () none 233)
    (ruffian-method-234 () none 234)
    (ruffian-method-235 () none 235)
    (ruffian-method-236 () none 236)
    (ruffian-method-237 () none 237)
    (ruffian-method-238 () none 238)
    (ruffian-method-239 () none 239)
    (ruffian-method-240 () none 240)
    (ruffian-method-241 () none 241)
    (ruffian-method-242 () none 242)
    (ruffian-method-243 () none 243)
    (ruffian-method-244 () none 244)
    (ruffian-method-245 () none 245)
    )
  )
|#

#|
(deftype ruft-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype ruft-choose-jump (ai-task)
  ((check-done        basic     :offset-assert 32)
   (which-spot        int8      :offset-assert 36)
   (num-spots         uint8     :offset-assert 37)
   (src-spot-indexes  UNKNOWN 4 :offset-assert 38)
   (dest-spot-indexes UNKNOWN 4 :offset-assert 42)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  (:methods
    (ruft-choose-jump-method-12 () none 12)
    (ruft-choose-jump-method-13 () none 13)
    )
  )
|#

#|
(deftype ruft-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#

#|
(deftype ruft-plant-bomb (ai-task)
  ((check-done         basic     :offset-assert 32)
   (which-spot         int8      :offset-assert 36)
   (num-spots          uint8     :offset-assert 37)
   (stand-spot-indexes UNKNOWN 2 :offset-assert 38)
   (face-spot-indexes  UNKNOWN 2 :offset-assert 40)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruf-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruf                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruf-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx (ruffian)
  ((bomb-handle     uint64  :offset-assert 1004)
   (bomb-func       basic   :offset-assert 1012)
   (bomb-fuse-delay uint32  :offset-assert 1016)
   )
  :method-count-assert 246
  :size-assert         #x400
  :flag-assert         #xf603800400
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx-shot                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx-shot (projectile)
  ((tail-pos vector :inline :offset-assert 476)
   (hit-pos  vector :inline :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#

;; (define-extern jinx-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx-bomb                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx-bomb (process-focusable)
  ((fuse-delay    uint32  :offset-assert 200)
   (attack-id     uint32  :offset-assert 204)
   (shake-screen? basic   :offset-assert 208)
   (explode-func  basic   :offset-assert 212)
   )
  :method-count-assert 29
  :size-assert         #xdc
  :flag-assert         #x1d006000dc
  (:methods
    (idle () _type_ :state 27)
    (explode () _type_ :state 28)
    )
  )
|#

;; (define-extern jinx-bomb-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype jinx-global-info (basic)
  ((prev-blue-hit-front int8      :offset-assert 4)
   (prev-blue-hit-back  int8      :offset-assert 5)
   (blue-hit-front-anim UNKNOWN 3 :offset-assert 8)
   (blue-hit-back-anim  UNKNOWN 3 :offset-assert 20)
   (kick-anim           UNKNOWN 2 :offset-assert 32)
   (scared-idle-anim    UNKNOWN 5 :offset-assert 40)
   (bomb-recoil-anim    UNKNOWN 2 :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

;; (define-extern *jinx-global-info* jinx-global-info)
;; (define-extern *jinx-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx-states                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mog-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mog (jinx)
  ()
  :method-count-assert 246
  :size-assert         #x400
  :flag-assert         #xf603800400
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mog                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *mog-nav-enemy-info* nav-enemy-info)
;; (define-extern mog-prebind-function function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grim-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grim (jinx)
  ()
  :method-count-assert 246
  :size-assert         #x400
  :flag-assert         #xf603800400
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grim                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sewer-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern sewer-drop-birth-func function)
;; (define-extern check-drop-level-sewer-drop function)
;; (define-extern sewer-drop2-birth-func function)
;; (define-extern check-drop2-level-sewer-drop function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-ocean                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-sewer* object)
;; (define-extern *ocean-colors-sewer* object)
;; (define-extern *ocean-near-indices-sewer* ocean-near-indices)
;; (define-extern *ocean-trans-indices-sewer* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-sewer* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-sewer* ocean-mid-masks)
(define-extern *ocean-map-sewer* ocean-map)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-blade (process-drawable)
  ((y-min        float    :offset-assert 196)
   (y-max        float    :offset-assert 200)
   (snd-water    uint128  :offset-assert 204)
   (snd-no-water uint128  :offset-assert 220)
   (last-sound   int32    :offset-assert 236)
   (attack-id    uint32   :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #xf8
  :flag-assert         #x15008000f8
  (:methods
    (sew-blade-method-20 () none 20)
    )
  )
|#

#|
(deftype sew-single-blade (sew-blade)
  ((quat quaternion :inline :offset-assert 252)
   )
  :method-count-assert 22
  :size-assert         #x110
  :flag-assert         #x1600900110
  (:methods
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-tri-blade (sew-blade)
  ((anim-time    float  :offset-assert 244)
   (anim-offset  float  :offset-assert 248)
   (switch-state int32  :offset-assert 252)
   )
  :method-count-assert 22
  :size-assert         #x104
  :flag-assert         #x1600900104
  (:methods
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-arm-blade (sew-blade)
  ()
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:methods
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-multi-blade (sew-blade)
  ()
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:methods
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-twist-blade (sew-blade)
  ((no-collision-timer uint64  :offset-assert 244)
   )
  :method-count-assert 22
  :size-assert         #x100
  :flag-assert         #x1600800100
  (:methods
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-light-switch (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xd4
  :flag-assert         #x18006000d4
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 20)
    (pressed () _type_ :state 21)
    (sew-light-switch-method-22 () none 22)
    (sew-light-switch-method-23 () none 23)
    )
  )
|#

#|
(deftype sew-light-control (process)
  ((search-switches basic  :offset-assert 124)
   (search-turrets  basic  :offset-assert 128)
   (switch-ent      basic  :offset-assert 132)
   (turret-ent      basic  :offset-assert 136)
   )
  :method-count-assert 17
  :size-assert         #x90
  :flag-assert         #x1100100090
  (:methods
    (sew-light-control-method-9 () none 9)
    (sew-light-control-method-10 () none 10)
    (sew-light-control-method-11 () none 11)
    (sew-light-control-method-12 () none 12)
    (sew-light-control-method-13 () none 13)
    (idle () _type_ :state 14)
    (sew-light-control-method-15 () none 15)
    (sew-light-control-method-16 () none 16)
    )
  )
|#

;; (define-extern sew-tri-blade-joint-callback function)
;; (define-extern sew-light-control-init-by-other function)
;; (define-extern sewer-startup function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-obs2                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-elevator (elevator)
  ((sound-id uint32  :offset-assert 364)
   )
  :method-count-assert 50
  :size-assert         #x174
  :flag-assert         #x3201000174
  (:methods
    (sew-elevator-method-49 () none 49)
    )
  )
|#

#|
(deftype sew-valve (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xe0
  :flag-assert         #x16006000e0
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 20)
    (turn () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-mar-statue-debris (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype sew-mar-statue-debris-b (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype sew-mar-statue (process-drawable)
  ((spawned-debris? basic  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    )
  )
|#

#|
(deftype sew-catwalk (drop-plat)
  ()
  :method-count-assert 36
  :size-assert         #x140
  :flag-assert         #x2400c00140
  (:methods
    )
  )
|#

#|
(deftype sew-mine (process-drawable)
  ((last-time time-frame  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (sew-mine-method-22 () none 22)
    )
  )
|#

#|
(deftype sew-mine-a (sew-mine)
  ()
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    )
  )
|#

#|
(deftype sew-mine-b (sew-mine)
  ((base-height float          :offset-assert 204)
   (center      vector :inline :offset-assert 220)
   (time-skew   uint64         :offset-assert 236)
   (period      float          :offset-assert 244)
   )
  :method-count-assert 23
  :size-assert         #xfc
  :flag-assert         #x17008000fc
  (:methods
    )
  )
|#

#|
(deftype sew-wall (process-focusable)
  ((deadly-radius      float   :offset-assert 200)
   (prev-deadly-radius float   :offset-assert 204)
   (attack-id          uint32  :offset-assert 208)
   (first-wall?        basic   :offset-assert 212)
   (anim               basic   :offset-assert 216)
   (art-name           basic   :offset-assert 220)
   )
  :method-count-assert 30
  :size-assert         #xe4
  :flag-assert         #x1e007000e4
  (:methods
    (idle () _type_ :state 27)
    (hit () _type_ :state 28)
    (sew-wall-method-29 () none 29)
    )
  )
|#

#|
(deftype sew-grill (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype sew-scare-grunt (grunt)
  ((anim             basic   :offset-assert 688)
   (manipy           uint32  :offset-assert 692)
   (spooled-sound-id uint32  :offset-assert 696)
   (grill-actor      basic   :offset-assert 700)
   )
  :method-count-assert 188
  :size-assert         #x2c4
  :flag-assert         #xbc025002c4
  (:methods
    (waiting () _type_ :state 186)
    (scare () _type_ :state 187)
    )
  )
|#

;; (define-extern sew-mar-statue-debris-init-by-other function)
;; (define-extern sew-mar-statue-debris-b-init-by-other function)
;; (define-extern sew-mar-statue-event-handler function)
;; (define-extern *sew-scare-grunt-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hosehead                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hosehead (nav-enemy)
  ()
  :method-count-assert 198
  :size-assert         #x33c
  :flag-assert         #xc602c0033c
  ;; Failed to read fields.
  (:methods
    (ambush-land () _type_ :state 178)
    (idle-sentry () _type_ :state 179)
    (active-wall () _type_ :state 180)
    (notice-wall () _type_ :state 181)
    (hostile-sentry () _type_ :state 182)
    (fire () _type_ :state 183)
    (attack () _type_ :state 184)
    (hosehead-method-185 () none 185)
    (hosehead-method-186 () none 186)
    (hosehead-method-187 () none 187)
    (hosehead-method-188 () none 188)
    (hosehead-method-189 () none 189)
    (hosehead-method-190 () none 190)
    (hosehead-method-191 () none 191)
    (hosehead-method-192 () none 192)
    (hosehead-method-193 () none 193)
    (hosehead-method-194 () none 194)
    (hosehead-method-195 () none 195)
    (hosehead-method-196 () none 196)
    (hosehead-method-197 () none 197)
    )
  )
|#

#|
(deftype ik-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype hosehead-anim-info (structure)
  ((hit-index  int32  :offset-assert 0)
   (land-index int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype hosehead-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (prev-knocked    int8      :offset-assert 6)
   (yellow-hit-anim UNKNOWN 2 :offset-assert 8)
   (blue-hit-anim   UNKNOWN 3 :offset-assert 24)
   (knocked-anim    UNKNOWN 2 :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

;; (define-extern *hosehead-idle-wall* object)
;; (define-extern *hosehead-idle-ground* object)
;; (define-extern *hosehead-nav-enemy-info* nav-enemy-info)
;; (define-extern *hosehead-ik-setup* object)
;; (define-extern *hosehead-global-info* hosehead-global-info)
;; (define-extern point-line-distance function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hosehead-fake                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hosehead-fake-spawn-info (basic)
  ((id        int32              :offset-assert 4)
   (walk-dist float              :offset-assert 8)
   (handle    uint64             :offset-assert 16)
   (trans     vector     :inline :offset-assert 32)
   (quat      quaternion :inline :offset-assert 48)
   (trans-x   float              :offset-assert 32)
   (trans-y   float              :offset-assert 36)
   (trans-z   float              :offset-assert 40)
   (trans-w   float              :offset-assert 44)
   (quat-x    float              :offset-assert 48)
   (quat-y    float              :offset-assert 52)
   (quat-z    float              :offset-assert 56)
   (quat-w    float              :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype hosehead-fake (process-drawable)
  ((info      basic          :offset-assert 196)
   (id        int32          :offset-assert 200)
   (walk-dest vector :inline :offset-assert 204)
   )
  :method-count-assert 25
  :size-assert         #xe0
  :flag-assert         #x19006000e0
  (:methods
    (die-fast () _type_ :state 20)
    (idle () _type_ :state 21)
    (walk () _type_ :state 22)
    (hosehead-fake-method-23 () none 23)
    (hosehead-fake-method-24 () none 24)
    )
  )
|#

;; (define-extern hosehead-fake-event-handler function)
;; (define-extern hosehead-fake-init-by-other function)
;; (define-extern *hosehead-fakes* array)
;; (define-extern spawn-hosehead-fakes function)
;; (define-extern hosehead-fake-trigger function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gator                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gator (nav-enemy)
  ((ocean-y         float          :offset-assert 600)
   (lock-nav-target basic          :offset-assert 604)
   (new-facing      vector :inline :offset-assert 620)
   (old-facing      vector :inline :offset-assert 636)
   (turn-time       time-frame         :offset-assert 652)
   )
  :method-count-assert 182
  :size-assert         #x298
  :flag-assert         #xb602200298
  (:methods
    (attack-forward () _type_ :state 178)
    (gator-method-179 () none 179)
    (gator-method-180 () none 180)
    (gator-method-181 () none 181)
    )
  )
|#

;; (define-extern *gator-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal2-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hal2-course (UNKNOWN)
  ((course-id              uint8   :offset-assert 4)
   (speech-count           uint16  :offset-assert 6)
   (spot-count             uint16  :offset-assert 8)
   (retry-cookie           uint8   :offset-assert 10)
   (too-far-warn-speeches  basic   :offset-assert 12)
   (too-far-fail-speeches  basic   :offset-assert 16)
   (attack-player-speeches basic   :offset-assert 20)
   (default-check-too-far  basic   :offset-assert 24)
   (waypoints              basic   :offset-assert 28)
   (speeches               uint32  :offset-assert 32)
   (speech-tunings         uint32  :offset-assert 36)
   (dirs                   uint32  :offset-assert 40)
   (spots                  uint32  :offset-assert 44)
   (sentries1-reminders    basic   :offset-assert 48)
   (sentries2-reminders    basic   :offset-assert 52)
   (bomb2-reminders        basic   :offset-assert 56)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype hal-sewer (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern hal2-default-check-too-far function)
;; (define-extern hal2-near-start-check-too-far function)
;; (define-extern hal2-below-elevator-a-check-too-far function)
;; (define-extern hal2-force-fail-check-too-far function)
;; (define-extern hal2-onslaught-check-too-far function)
;; (define-extern *hal2-course* hal2-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mog2-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mog-sewer (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *mog2-course* ruffian-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jinx2-course                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx-sewer (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern jinx2-bomb1-callback function)
;; (define-extern *jinx2-course* ruffian-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grim2-course                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grim-sewer (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *grim2-course* ruffian-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fake-jinx-bomb-info (basic)
  ((handle uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern *fake-jinx-bomb-info* fake-jinx-bomb-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sew-gunturret                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-turret-params (structure)
  ((normal-sg    basic     :offset-assert 0)
   (explode-sg   basic     :offset-assert 4)
   (enemy-info   basic     :offset-assert 8)
   (idle-anim    int32     :offset-assert 12)
   (shoot-anim   int32     :offset-assert 16)
   (track-joint  int32     :offset-assert 20)
   (barrel-joint int32     :offset-assert 24)
   (gun-joint    int32     :offset-assert 28)
   (hole-joints  UNKNOWN 8 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype sew-gunturret (enemy)
  ((gun-tilt-jm       basic                     :offset-assert 528)
   (params            gun-turret-params         :offset-assert 532)
   (aim-pos           vector            :inline :offset-assert 540)
   (gun-twist         float                     :offset-assert 556)
   (gun-tilt          float                     :offset-assert 560)
   (desired-twist     float                     :offset-assert 564)
   (desired-tilt      float                     :offset-assert 568)
   (los-clear         basic                     :offset-assert 572)
   (smoke-part        basic                     :offset-assert 576)
   (casing-part       basic                     :offset-assert 580)
   (flash-state       basic                     :offset-assert 584)
   (can-shoot         basic                     :offset-assert 588)
   (last-hit-time     time-frame                    :offset-assert 596)
   (init-mat          matrix            :inline :offset-assert 604)
   (activate-distance float                     :offset-assert 668)
   )
  :method-count-assert 142
  :size-assert         #x2a4
  :flag-assert         #x8e023002a4
  (:methods
    (sew-gunturret-method-137 () none 137)
    (sew-gunturret-method-138 () none 138)
    (sew-gunturret-method-139 () none 139)
    (sew-gunturret-method-140 () none 140)
    (sew-gunturret-method-141 () none 141)
    )
  )
|#

#|
(deftype pal-gun-turret (sew-gunturret)
  ()
  :method-count-assert 142
  :size-assert         #x2a4
  :flag-assert         #x8e023002a4
  (:methods
    )
  )
|#

;; (define-extern *sew-gunturret-exploder-params* joint-exploder-static-params)
;; (define-extern *sew-gunturret-enemy-info* enemy-info)
;; (define-extern *pal-gun-turret-enemy-info* enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctypower                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *city-power-switch-on-position* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyindb-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyindb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyindb-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shuttle                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-rebel (citizen-norm)
  ((nav-mesh-aid uint32         :offset-assert 1056)
   (done?        basic          :offset-assert 1060)
   (task-node    uint16         :offset-assert 1064)
   (end-pos      vector :inline :offset-assert 1068)
   (index        uint32         :offset-assert 1084)
   (gui-id       uint32         :offset-assert 1088)
   )
  :method-count-assert 219
  :size-assert         #x448
  :flag-assert         #xdb03d00448
  (:methods
    )
  )
|#

#|
(deftype city-shuttle-info (structure)
  ((pos         vector :inline :offset-assert 0)
   (level       basic          :offset-assert 16)
   (nav-mesh-id uint32         :offset-assert 20)
   (time        time-frame         :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

;; (define-extern *citizen-rebel-global-info* civilian-global-info)
;; (define-extern *citizen-rebel-nav-enemy-info* nav-enemy-info)
;; (define-extern shuttle-init function)
;; (define-extern shuttle-cleanup function)
;; (define-extern shuttle-update function)
;; (define-extern *city-shuttle-info* array)
;; (define-extern *city-burning-bush-shuttle-1-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpa-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *fortress-pris-texture-anim-array* texture-anim-array)
;; (define-extern *fortress-warp-texture-anim-array* texture-anim-array)
;; (define-extern set-roboscreen-alpha! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fort-robotank-turret           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-robotank-turret (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype fort-robotank-reticle (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype fort-roboscreen (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype fort-robotank-shot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern fort-roboscreen-init-by-other function)
;; (define-extern fort-robotank-reticle-post function)
;; (define-extern fort-robotank-reticle-handler function)
;; (define-extern fort-robotank-reticle-init-by-other function)
;; (define-extern draw-2d-hud function)
;; (define-extern turret-post function)
;; (define-extern robotank-turret-handler function)
;; (define-extern fort-robotank-turret-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fort-robotank                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-robotank-segment-event (UNKNOWN)
  ((source     uint64  :offset-assert 0)
   (event-type basic   :offset-assert 8)
   (actor      basic   :offset-assert 12)
   (pos-norm   float   :offset-assert 16)
   (param      basic   :offset-assert 20)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; field param uses ~A with a signed load
  )
|#

#|
(deftype fort-robotank-segment (UNKNOWN)
  ((flags              uint16  :offset-assert 0)
   (max-speed          float   :offset-assert 4)
   (next-segment       int32   :offset-assert 8)
   (next-segment-start float   :offset-assert 12)
   (event-count        int32   :offset-assert 16)
   (event-tbl          uint32  :offset-assert 20)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype fort-robotank-path-info (UNKNOWN)
  ((path          basic          :offset-assert 0)
   (dir           vector :inline :offset-assert 16)
   (u             float          :offset-assert 32)
   (du            float          :offset-assert 36)
   (du-final      float          :offset-assert 40)
   (prev-u        float          :offset-assert 44)
   (max-speed     float          :offset-assert 48)
   (dist          float          :offset-assert 52)
   (dir-y-angle   float          :offset-assert 56)
   (start-y-angle float          :offset-assert 60)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype fort-robotank-path-info-array (UNKNOWN)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype fort-robotank-wheel-info (UNKNOWN)
  ((jmod   basic  :offset-assert 0)
   (radius float  :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype fort-robotank-tread-info (UNKNOWN)
  ((wheel         UNKNOWN      7       :offset-assert 0)
   (texture       texture-anim         :offset-assert 112)
   (locator-joint int32                :offset-assert 116)
   (pos           vector       :inline :offset-assert 128)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype fort-robotank (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *fort-robotank-1-segment-table* object)
;; (define-extern *fort-robotank-2-segment-table* object)
;; (define-extern fort-robotank-post function)
;; (define-extern fort-robotank-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpc-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fordumpc-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpc-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-dump-bomb-a (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype fort-missile-target (process-drawable)
  ((part-mat UNKNOWN 2 :offset-assert 204)
   (sound-id uint32    :offset-assert 332)
   )
  :method-count-assert 22
  :size-assert         #x154
  :flag-assert         #x1600e00154
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype fort-missile (process-drawable)
  ((part-doom          basic     :offset-assert 196)
   (hud                uint64    :offset-assert 204)
   (door-actor         UNKNOWN 2 :offset-assert 212)
   (tank-actor         basic     :offset-assert 220)
   (bomb               UNKNOWN 4 :offset-assert 228)
   (bomb-count         uint32    :offset-assert 260)
   (attack-id          uint32    :offset-assert 264)
   (explosion-sound-id uint32    :offset-assert 268)
   (alarm-sound-id     uint32    :offset-assert 272)
   )
  :method-count-assert 25
  :size-assert         #x118
  :flag-assert         #x1900a00118
  (:methods
    (idle () _type_ :state 20)
    (targets-active () _type_ :state 21)
    (missile-countdown () _type_ :state 22)
    (die () _type_ :state 23)
    (dormant () _type_ :state 24)
    )
  )
|#

;; (define-extern *fort-missile-target-exploder-params* joint-exploder-static-params)
;; (define-extern fort-missile-target-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fortress-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; throne-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype throne-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern throne-deactivate function)
;; (define-extern throne-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palace-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype throne-throne (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern check-drop-level-palace-roof-rain function)
;; (define-extern *metalkor-head-lightning-shock-skel* lightning-spec)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-texture                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *jakb-prison-texture-anim-array* texture-anim-array)
;; (define-extern set-jakb-prison-texture-morph! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prison-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prison-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prison-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prsn-hang-cell (process-drawable)
  ((path-u  float  :offset-assert 196)
   (path-du float  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype warp-gate-b (warp-gate)
  ()
  :method-count-assert 26
  :size-assert         #x100
  :flag-assert         #x1a00800100
  (:methods
    (warp-gate-b-method-9 () none 9)
    (warp-gate-b-method-10 () none 10)
    (warp-gate-b-method-11 () none 11)
    (warp-gate-b-method-12 () none 12)
    (warp-gate-b-method-13 () none 13)
    (warp-gate-b-method-14 () none 14)
    (warp-gate-b-method-15 () none 15)
    (warp-gate-b-method-16 () none 16)
    (warp-gate-b-method-17 () none 17)
    (warp-gate-b-method-18 () none 18)
    (warp-gate-b-method-19 () none 19)
    (warp-gate-b-method-20 () none 20)
    (warp-gate-b-method-21 () none 21)
    (warp-gate-b-method-22 () none 22)
    (warp-gate-b-method-23 () none 23)
    (warp-gate-b-method-24 () none 24)
    (warp-gate-b-method-25 () none 25)
    )
  )
|#

#|
(deftype prsn-cell-door (process-drawable)
  ((frame   float  :offset-assert 196)
   (desired float  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype prsn-vent-fan (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype prsn-torture (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern *prsn-torture-lightning-joints* array)
;; (define-extern *prsn-chair-shackle-lightning-joints* array)
;; (define-extern dark-lightning-handler function)
;; (define-extern prsn-hang-cell-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kidesc-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kid-escort (bot)
  ((travel-anim-interp  float          :offset-assert 988)
   (arrest-attempt-time time-frame         :offset-assert 996)
   (arrestor-handle     uint64         :offset-assert 1004)
   (crocadog-handle     uint64         :offset-assert 1012)
   (exit-vehicle-dest   vector :inline :offset-assert 364)
   )
  :method-count-assert 240
  :size-assert         #x400
  :flag-assert         #xf003800400
  (:methods
    (kid-escort-method-225 () none 225)
    (kid-escort-method-226 () none 226)
    (kid-escort-method-227 () none 227)
    (kid-escort-method-228 () none 228)
    (kid-escort-method-229 () none 229)
    (kid-escort-method-230 () none 230)
    (kid-escort-method-231 () none 231)
    (kid-escort-method-232 () none 232)
    (kid-escort-method-233 () none 233)
    (kid-escort-method-234 () none 234)
    (kid-escort-method-235 () none 235)
    (kid-escort-method-236 () none 236)
    (kid-escort-method-237 () none 237)
    (kid-escort-method-238 () none 238)
    (kid-escort-method-239 () none 239)
    )
  )
|#

#|
(deftype kidesct-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crocesc-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype crocadog-escort (bot)
  ((travel-anim-interp float          :offset-assert 988)
   (anim-speed         float          :offset-assert 992)
   (kid-handle         uint64         :offset-assert 996)
   (local-seat-pos     vector :inline :offset-assert 1020)
   (exit-vehicle-dest  vector :inline :offset-assert 364)
   )
  :method-count-assert 239
  :size-assert         #x410
  :flag-assert         #xef03900410
  (:methods
    (crocadog-escort-method-225 () none 225)
    (crocadog-escort-method-226 () none 226)
    (crocadog-escort-method-227 () none 227)
    (crocadog-escort-method-228 () none 228)
    (crocadog-escort-method-229 () none 229)
    (crocadog-escort-method-230 () none 230)
    (crocadog-escort-method-231 () none 231)
    (crocadog-escort-method-232 () none 232)
    (crocadog-escort-method-233 () none 233)
    (crocadog-escort-method-234 () none 234)
    (crocadog-escort-method-235 () none 235)
    (crocadog-escort-method-236 () none 236)
    (crocadog-escort-method-237 () none 237)
    (crocadog-escort-method-238 () none 238)
    )
  )
|#

#|
(deftype crocesct-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal4-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hal4-course (bot-course)
  ((defend-speeches basic  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype hal-escort (hal)
  ((vehicle-handle     uint64         :offset-assert 772)
   (arrow-handle       uint64         :offset-assert 1028)
   (arrestor-handle    uint64         :offset-assert 1036)
   (arrestor-time      time-frame         :offset-assert 1044)
   (locked-player-time time-frame         :offset-assert 1052)
   (dont-fail-until    uint64         :offset-assert 1060)
   (played-defend-time time-frame         :offset-assert 1068)
   (played-get-in-time time-frame         :offset-assert 1076)
   (notice-plane       plane  :inline :offset-assert 1084)
   )
  :method-count-assert 237
  :size-assert         #x450
  :flag-assert         #xed03d00450
  (:methods
    (hal-escort-method-227 () none 227)
    (hal-escort-method-228 () none 228)
    (hal-escort-method-229 () none 229)
    (hal-escort-method-230 () none 230)
    (hal-escort-method-231 () none 231)
    (hal-escort-method-232 () none 232)
    (hal-escort-method-233 () none 233)
    (hal-escort-method-234 () none 234)
    (hal-escort-method-235 () none 235)
    (hal-escort-method-236 () none 236)
    )
  )
|#

;; (define-extern hal4-walking-too-far function)
;; (define-extern *hal4-course* hal4-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kidesc-task                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kidesc                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *kid-escort-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kidesc-states                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crocesc-task                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crocesc                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *crocadog-escort-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crocesc-states                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kidesc4-course                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern kid4-update-spot-to-track-crocadog function)
;; (define-extern *kid4-course* bot-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crocesc4-course                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *crocadog4-course* bot-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nest-switch (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype nest-piston (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mantis                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mantis-jump-info (structure)
  ((distance    float          :offset-assert 0)
   (search-step uint32         :offset-assert 4)
   (destination vector :inline :offset-assert 16)
   (direction   uint16         :offset-assert 32)
   (start-anim  uint32         :offset-assert 36)
   (air-anim    uint32         :offset-assert 40)
   (land-anim   uint32         :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype mantis (nav-enemy)
  ()
  :method-count-assert 195
  :size-assert         #x2d0
  :flag-assert         #xc3025002d0
  ;; Failed to read fields.
  (:methods
    (crawl () _type_ :state 178)
    (attack0 () _type_ :state 179)
    (attack1 () _type_ :state 180)
    (ambush-crawling () _type_ :state 181)
    (ambush-jumping () _type_ :state 182)
    (mantis-method-183 () none 183)
    (roll-right () _type_ :state 184)
    (roll-left () _type_ :state 185)
    (hop-away () _type_ :state 186)
    (mantis-method-187 () none 187)
    (mantis-method-188 () none 188)
    (mantis-method-189 () none 189)
    (mantis-method-190 () none 190)
    (mantis-method-191 () none 191)
    (mantis-method-192 () none 192)
    (mantis-method-193 () none 193)
    (mantis-method-194 () none 194)
    )
  )
|#

;; (define-extern *mantis-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mammoth                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mammoth (nav-enemy)
  ((joint-ik               UNKNOWN    4       :offset-assert 600)
   (ik-handle-pos          UNKNOWN    4       :offset-assert 620)
   (ik-handle-y            UNKNOWN    4       :offset-assert 684)
   (heel-lerp              UNKNOWN    4       :offset-assert 700)
   (foot-flags             uint16             :offset-assert 716)
   (old-foot-flags         uint16             :offset-assert 718)
   (y-level                float              :offset-assert 720)
   (foot-pos               UNKNOWN    4       :offset-assert 732)
   (my-up-vector           vector     :inline :offset-assert 796)
   (my-up-quat             quaternion :inline :offset-assert 812)
   (move-pos               UNKNOWN    2       :offset-assert 828)
   (travel-dest            vector     :inline :offset-assert 860)
   (tilt-quat              quaternion :inline :offset-assert 876)
   (path-index             int32              :offset-assert 892)
   (path-index-dir         int32              :offset-assert 896)
   (path-pos               float              :offset-assert 900)
   (turn-angle             float              :offset-assert 904)
   (gspot-timer            uint64             :offset-assert 908)
   (gspot-normal           vector     :inline :offset-assert 924)
   (attack-timer           uint64             :offset-assert 940)
   (lightning-timer        uint64             :offset-assert 948)
   (lightning-attack-timer uint64             :offset-assert 956)
   (spawn-timer            uint64             :offset-assert 964)
   (turn-anim-start        int32              :offset-assert 972)
   (turn-anim              int32              :offset-assert 976)
   (turn-anim-end          int32              :offset-assert 980)
   (turn-move-start        float              :offset-assert 984)
   (turn-move-end          float              :offset-assert 988)
   (feet-ik-init-timer     uint64             :offset-assert 996)
   )
  :method-count-assert 186
  :size-assert         #x3f0
  :flag-assert         #xba037003f0
  (:methods
    (waiting () _type_ :state 178)
    (wait-to-walk () _type_ :state 179)
    (walking () _type_ :state 180)
    (walking-attack () _type_ :state 181)
    (turning () _type_ :state 182)
    (mammoth-method-183 () none 183)
    (mammoth-method-184 () none 184)
    (mammoth-method-185 () none 185)
    )
  )
|#

#|
(deftype mammoth-ik-setup (structure)
  ((elbow-index int32   :offset-assert 0)
   (hand-dist   float   :offset-assert 4)
   (ground-dist float   :offset-assert 8)
   (foot-flag   uint16  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #xe
  :flag-assert         #x90000000e
  )
|#

;; (define-extern *mammoth-nav-enemy-info* nav-enemy-info)
;; (define-extern *mammoth-lightning-joint-tbl* array)
;; (define-extern *mammoth-ik-setup* object)
;; (define-extern mammoth-walk-post function)
;; (define-extern mammoth-walk-check-end function)
;; (define-extern next-path-index function)
;; (define-extern set-nav-destination function)
;; (define-extern mammoth-walk-handler function)
;; (define-extern mammoth-joint-mod-tilt function)
;; (define-extern mammoth-joint-mod-heel function)
;; (define-extern mammoth-leg-ik-callback function)
;; (define-extern mammoth-update-ik function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flying-spider                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flying-spider-shot (metalhead-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype flying-spider (nav-enemy)
  ((my-up-vector vector :inline :offset-assert 604)
   (gspot-normal vector :inline :offset-assert 620)
   (gspot-timer  uint64         :offset-assert 636)
   (focus-dir    uint16         :offset-assert 644)
   (path-u       float          :offset-assert 648)
   (path-du      float          :offset-assert 652)
   )
  :method-count-assert 183
  :size-assert         #x294
  :flag-assert         #xb702200294
  (:methods
    (ambush-falling () _type_ :state 178)
    (attack () _type_ :state 179)
    (attack-fire () _type_ :state 180)
    (turn-to-focus () _type_ :state 181)
    (flying-spider-method-182 () none 182)
    )
  )
|#

;; (define-extern spawn-flying-spider-projectile function)
;; (define-extern *flying-spider-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-ocean                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-nest* object)
;; (define-extern *ocean-colors-nest* object)
;; (define-extern *ocean-near-indices-nest* ocean-near-indices)
;; (define-extern *ocean-trans-indices-nest* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-nest* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-nest* ocean-mid-masks)
;; (define-extern *ocean-map-nest* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-scenes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype canyon-lightning-thingy (process-drawable)
  ((lightning UNKNOWN 5 :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xdc
  :flag-assert         #x15006000dc
  (:methods
    (zap () _type_ :state 20)
    )
  )
|#

;; (define-extern canyon-lightning-thingy-init-by-other function)
;; (define-extern activate-canyon-lightning-thingy function)
;; (define-extern nest-deactivate function)
;; (define-extern nest-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nest-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-texture                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *darkjak-hires-nest-texture-anim-array* texture-anim-array)
;; (define-extern set-darkjak-highres-nest-texture-morph! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalkor-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalkor-setup                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalkor-bomb (process-drawable)
  ((joint-mods UNKNOWN 49 :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #x18c
  :flag-assert         #x150110018c
  (:methods
    (metalkor-bomb-method-20 () none 20)
    )
  )
|#

#|
(deftype gem-tracker (process)
  ((gems            UNKNOWN 10 :offset-assert 124)
   (gems-collected  int8       :offset-assert 204)
   (perm-byte-index int8       :offset-assert 205)
   )
  :method-count-assert 15
  :size-assert         #xd2
  :flag-assert         #xf006000d2
  (:methods
    (gem-tracker-method-9 () none 9)
    (gem-tracker-method-10 () none 10)
    (gem-tracker-method-11 () none 11)
    (gem-tracker-method-12 () none 12)
    (gem-tracker-method-13 () none 13)
    (idle () _type_ :state 14)
    )
  )
|#

#|
(deftype flitter-gem-tracker (gem-tracker)
  ()
  :method-count-assert 15
  :size-assert         #xd2
  :flag-assert         #xf006000d2
  (:methods
    )
  )
|#

#|
(deftype wasp-gem-tracker (gem-tracker)
  ()
  :method-count-assert 15
  :size-assert         #xd2
  :flag-assert         #xf006000d2
  (:methods
    )
  )
|#

#|
(deftype rift-occlude (process-drawable)
  ((original-trans vector :inline :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :flag-assert         #x15006000e0
  (:methods
    (rift-occlude-method-20 () none 20)
    )
  )
|#

#|
(deftype metalkor-distort (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (metalkor-distort-method-20 () none 20)
    )
  )
|#

#|
(deftype metalkor-explode (process-drawable)
  ((ring uint64  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:methods
    (metalkor-explode-method-20 () none 20)
    )
  )
|#

#|
(deftype metalkor-kid (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (metalkor-kid-method-20 () none 20)
    )
  )
|#

#|
(deftype nestb-tail-bound (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (nestb-tail-bound-method-20 () none 20)
    )
  )
|#

#|
(deftype metalkor-ja-float-info (structure)
  ((float-anim    basic  :offset-assert 0)
   (channel-index int8   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )
|#

#|
(deftype metalkor-spinner-info (structure)
  ((joint-index  int8   :offset-assert 0)
   (launch-angle float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype metalkor-shot (metalhead-shot)
  ((old-transv vector :inline :offset-assert 492)
   )
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  (:methods
    )
  )
|#

#|
(deftype metalkor-flitter (flitter)
  ()
  :method-count-assert 184
  :size-assert         #x2b8
  :flag-assert         #xb8024002b8
  (:methods
    )
  )
|#

#|
(deftype metalkor-wasp (wasp)
  ()
  :method-count-assert 166
  :size-assert         #x388
  :flag-assert         #xa603100388
  (:methods
    )
  )
|#

#|
(deftype metalkor-spinner-chain-physics (chain-physics)
  ((gravity-mult  float  :offset-assert 1392)
   (velocity-mult float  :offset-assert 1396)
   )
  :method-count-assert 18
  :size-assert         #x578
  :flag-assert         #x1200000578
  (:methods
    )
  )
|#

#|
(deftype metalkor-spinner (process-drawable)
  ((parent-joint-index int8           :offset-assert 196)
   (target-pos         vector :inline :offset-assert 204)
   (chain              basic          :offset-assert 220)
   (anim-speed         float          :offset-assert 224)
   )
  :method-count-assert 23
  :size-assert         #xe8
  :flag-assert         #x17007000e8
  (:methods
    (metalkor-spinner-method-20 () none 20)
    (metalkor-spinner-method-21 () none 21)
    (metalkor-spinner-method-22 () none 22)
    )
  )
|#

#|
(deftype metalkor-egg (process-focusable)
  ((last-hit-normal vector :inline :offset-assert 204)
   (sticky-time     time-frame         :offset-assert 220)
   (flitter-slot    int8           :offset-assert 228)
   )
  :method-count-assert 31
  :size-assert         #xe9
  :flag-assert         #x1f007000e9
  (:methods
    (metalkor-egg-method-27 () none 27)
    (metalkor-egg-method-28 () none 28)
    (metalkor-egg-method-29 () none 29)
    (metalkor-egg-method-30 () none 30)
    )
  )
|#

#|
(deftype metalkor-wings (process-drawable)
  ((prefix basic  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (metalkor-wings-method-20 () none 20)
    )
  )
|#

#|
(deftype metalkor-foot-lock (structure)
  ((lock         cam-float-seeker :inline :offset-assert 0)
   (old-position vector           :inline :offset-assert 32)
   (initialized  basic                    :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype metalkor-legs (process-focusable)
  ((prefix        basic     :offset-assert 200)
   (trackable     basic     :offset-assert 204)
   (joint-ik      UNKNOWN 6 :offset-assert 208)
   (ja-float-info UNKNOWN 3 :offset-assert 232)
   (foot-locks    UNKNOWN 6 :offset-assert 284)
   )
  :method-count-assert 28
  :size-assert         #x2a0
  :flag-assert         #x1c022002a0
  (:methods
    (metalkor-legs-method-27 () none 27)
    )
  )
|#

#|
(deftype metalkor-chain-physics (chain-physics)
  ((prev-rotation    float                      :offset-assert 1392)
   (prev-y-rotation  float                      :offset-assert 1396)
   (osc-z            oscillating-float  :inline :offset-assert 1400)
   (osc-y            oscillating-float  :inline :offset-assert 1424)
   (rand-z           delayed-rand-float :inline :offset-assert 1448)
   (rand-y           delayed-rand-float :inline :offset-assert 1480)
   (move-with-parent basic                      :offset-assert 1508)
   )
  :method-count-assert 18
  :size-assert         #x5e8
  :flag-assert         #x12000005e8
  (:methods
    )
  )
|#

#|
(deftype metalkor-lowtorso (process-focusable)
  ((prefix               basic                     :offset-assert 200)
   (tail                 basic                     :offset-assert 204)
   (tail-initialized     basic                     :offset-assert 208)
   (spinners             UNKNOWN           4       :offset-assert 212)
   (ja-float-info        UNKNOWN           3       :offset-assert 244)
   (no-collision-timer   uint64                    :offset-assert 292)
   (egg-toss-joint-1     basic                     :offset-assert 300)
   (egg-toss-joint-2     basic                     :offset-assert 304)
   (egg-toss-joint-3     basic                     :offset-assert 308)
   (egg-toss-joint-angle oscillating-float :inline :offset-assert 312)
   )
  :method-count-assert 28
  :size-assert         #x154
  :flag-assert         #x1c00e00154
  (:methods
    (metalkor-lowtorso-method-27 () none 27)
    )
  )
|#

#|
(deftype metalkor (process-focusable)
  ((trackable                       basic                    :offset-assert 200)
   (flitters                        UNKNOWN          10      :offset-assert 204)
   (flitter-gem-tracker             uint64                   :offset-assert 284)
   (wasps                           UNKNOWN          3       :offset-assert 292)
   (wasp-gem-tracker                uint64                   :offset-assert 316)
   (last-flitter-launched           int8                     :offset-assert 324)
   (last-wasp-launched              int8                     :offset-assert 325)
   (live-flitters                   int8                     :offset-assert 326)
   (live-wasps                      int8                     :offset-assert 327)
   (shoot-timer                     uint64                   :offset-assert 332)
   (target-angle                    float                    :offset-assert 340)
   (wave-timer                      uint64                   :offset-assert 348)
   (in-wave                         basic                    :offset-assert 356)
   (flitter-timer                   uint64                   :offset-assert 364)
   (wasp-timer                      uint64                   :offset-assert 372)
   (launching-flitters              basic                    :offset-assert 380)
   (launching-wasps                 basic                    :offset-assert 384)
   (egg-timer                       uint64                   :offset-assert 388)
   (last-close-attack               int8                     :offset-assert 396)
   (last-standing-attack            int8                     :offset-assert 397)
   (stage                           int8                     :offset-assert 398)
   (next-stage-timer                uint64                   :offset-assert 404)
   (initial-y                       float                    :offset-assert 412)
   (shots-fired                     int16                    :offset-assert 416)
   (stage-hit-points                float                    :offset-assert 420)
   (hud                             uint64                   :offset-assert 428)
   (lowtorso                        uint64                   :offset-assert 436)
   (legs                            uint64                   :offset-assert 444)
   (wings                           uint64                   :offset-assert 452)
   (kid                             uint64                   :offset-assert 460)
   (explode                         uint64                   :offset-assert 468)
   (rift-occlude                    uint64                   :offset-assert 476)
   (last-attack-id                  uint32                   :offset-assert 484)
   (current-nav-poly                nav-poly                 :offset-assert 488)
   (shot-anticipate                 basic                    :offset-assert 492)
   (spinners                        UNKNOWN          4       :offset-assert 500)
   (neck                            basic                    :offset-assert 532)
   (previous-flat-travel            vector           :inline :offset-assert 540)
   (previous-flat-travel-timer      uint64                   :offset-assert 556)
   (previous-flat-travel-long-timer uint64                   :offset-assert 564)
   (min-state-hit-points            float                    :offset-assert 572)
   (countdown-to-roar               int8                     :offset-assert 576)
   (for-back-interp                 cam-float-seeker :inline :offset-assert 580)
   (run-walk-interp                 cam-float-seeker :inline :offset-assert 604)
   (left-right-interp               cam-float-seeker :inline :offset-assert 628)
   (walk-turn-interp                cam-float-seeker :inline :offset-assert 652)
   (idle-interp                     cam-float-seeker :inline :offset-assert 676)
   (tmp-hit-points                  float                    :offset-assert 700)
   (reps-till-idle-alt              int8                     :offset-assert 704)
   (last-rotation                   float                    :offset-assert 708)
   (no-collision-timer              uint64                   :offset-assert 716)
   (egg-timer                       uint64                   :offset-assert 388)
   (egg-angle                       float                    :offset-assert 732)
   (arm-frame                       float                    :offset-assert 736)
   (been-to-entity                  basic                    :offset-assert 740)
   (flying-speed                    cam-float-seeker :inline :offset-assert 744)
   (wing-sound                      uint32                   :offset-assert 768)
   (wing-sound-playing              basic                    :offset-assert 772)
   (explode-sound                   uint32                   :offset-assert 776)
   (bomb-sound                      uint32                   :offset-assert 780)
   (stop-bomb-sound                 basic                    :offset-assert 784)
   (hit-ring-trans                  vector           :inline :offset-assert 796)
   (hit-ring-offset                 vector           :inline :offset-assert 812)
   (ring-cam-pos                    cam-float-seeker :inline :offset-assert 828)
   (need-teleport                   basic                    :offset-assert 852)
   )
  :method-count-assert 43
  :size-assert         #x35c
  :flag-assert         #x2b02e0035c
  (:methods
    (metalkor-method-27 () none 27)
    (metalkor-method-28 () none 28)
    (metalkor-method-29 () none 29)
    (metalkor-method-30 () none 30)
    (metalkor-method-31 () none 31)
    (metalkor-method-32 () none 32)
    (metalkor-method-33 () none 33)
    (metalkor-method-34 () none 34)
    (metalkor-method-35 () none 35)
    (metalkor-method-36 () none 36)
    (metalkor-method-37 () none 37)
    (metalkor-method-38 () none 38)
    (metalkor-method-39 () none 39)
    (metalkor-method-40 () none 40)
    (metalkor-method-41 () none 41)
    (metalkor-method-42 () none 42)
    )
  )
|#

#|
(deftype metalkor-ik-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern gem-tracker-get-slot function)
;; (define-extern *metalkor-flitter-nav-enemy-info* nav-enemy-info)
;; (define-extern *metalkor-bomb-probe-joints* array)
;; (define-extern metalkor-bomb-init-by-other function)
;; (define-extern gem-tracker-init-by-other function)
;; (define-extern rift-occlude-init-by-other function)
;; (define-extern metalkor-distort-init-by-other function)
;; (define-extern metalkor-explode-init-by-other function)
;; (define-extern metalkor-kid-init-by-other function)
;; (define-extern *metalkor-spinner-chain-setup* array)
;; (define-extern metalkor-spinner-init-by-other function)
;; (define-extern metalkor-egg-reaction function)
;; (define-extern metalkor-egg-init-by-other function)
;; (define-extern metalkor-wings-init-by-other function)
;; (define-extern *metalkor-ik-setup* array)
;; (define-extern metalkor-legs-init-by-other function)
;; (define-extern *metalkor-lowtorso-chain-setup* array)
;; (define-extern metalkor-lowtorso-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalkor-states                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *metalkor-spinner-setup* array)
;; (define-extern metalkor-start-spinner function)
;; (define-extern metalkor-spinners-off function)
;; (define-extern metalkor-lowtorso-spinners-off function)
;; (define-extern metalkor-spinner-check function)
;; (define-extern metalkor-lowtorso-spinner-check function)
;; (define-extern metalkor-update-hud function)
;; (define-extern metalkor-all-spinners-on function)
;; (define-extern metalkor-ja-float function)
;; (define-extern metalkor-ja-float-stop function)
;; (define-extern metalkor-ja-float-children function)
;; (define-extern metalkor-ja-float-group? function)
;; (define-extern metalkor-get-ring function)
;; (define-extern metalkor-common function)
;; (define-extern set-countdown-to-roar function)
;; (define-extern metalkor-go-next-stage function)
;; (define-extern metalkor-setup-hit-anim function)
;; (define-extern metalkor-get-gem-tracker function)
;; (define-extern metalkor-handler function)
;; (define-extern metalkor-start-egg function)
;; (define-extern metalkor-check-egg function)
;; (define-extern metalkor-shoot-projectile function)
;; (define-extern metalkor-face-to-vector function)
;; (define-extern update-walk-anim function)
;; (define-extern rotate-and-update-hang-anim function)
;; (define-extern set-color-vectors function)
;; (define-extern metalkor-walk-the-walk function)
;; (define-extern metalkor-set-deadly function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalkor-extras                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nestb-formation (hover-formation)
  ()
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  (:methods
    )
  )
|#

#|
(deftype rift-ring-ingame (process-drawable)
  ((anim-speed         delayed-rand-float :inline :offset-assert 196)
   (stutter            basic                      :offset-assert 224)
   (spin-sound         uint32                     :offset-assert 228)
   (spin-sound-playing basic                      :offset-assert 232)
   )
  :method-count-assert 21
  :size-assert         #xf0
  :flag-assert         #x15007000f0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype nest-break-precipice (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype metalkor-rays (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern metalkor-egg-handler function)
;; (define-extern metalkor-shot-move function)
;; (define-extern metalkor-legs-handler function)
;; (define-extern ik-adjust function)
;; (define-extern metalkor-update-ik function)
;; (define-extern *metalkor-lowtorso-spinner-setup* array)
;; (define-extern metalkor-lowtorso-start-spinner function)
;; (define-extern ja-aframe-num-of-proc function)
;; (define-extern metalkor-distort-update function)
;; (define-extern metalkor-rays-init-by-other function)
;; (define-extern *metalkor-bomb-collide-joints* array)
;; (define-extern metalkor-bomb-collide function)
;; (define-extern metalkor-bomb-ground-check function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nestb-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nest-gun-parts (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype nest-unbroken-rocks (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern movie-nest-metalkor-shot-draw-fire function)
;; (define-extern movie-nest-metalkor-shot-draw-moving function)
;; (define-extern movie-nest-metalkor-shot-draw-impact function)
;; (define-extern nestb-login function)
;; (define-extern nestb-deactivate function)
;; (define-extern nestb-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nestb-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nestb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; consiteb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype consiteb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bombbot-node (structure)
  ((position    vector :inline :offset-assert 0)
   (nav-mesh-id uint32         :offset-assert 16)
   (pos-x       float          :offset-assert 0)
   (pos-y       float          :offset-assert 4)
   (pos-z       float          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype bombbot-path (structure)
  ((node-count uint16  :offset-assert 0)
   (node       uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot-path                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *bombbot-path-1* object)
;; (define-extern *bombbot-path-2* object)
;; (define-extern *bombbot-path-3* object)
;; (define-extern *bombbot-path-4* object)
;; (define-extern *bombbot-path-5* object)
;; (define-extern *bombbot-path-6* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bombbot-foot (structure)
  ((pos-offset    vector :inline :offset-assert 0)
   (joint-index   uint32         :offset-assert 16)
   (offset        float          :offset-assert 20)
   (position      vector :inline :offset-assert 32)
   (next-position vector :inline :offset-assert 48)
   (real-position vector :inline :offset-assert 64)
   (speed         vector :inline :offset-assert 80)
   (moving        basic          :offset-assert 96)
   (main-y        float          :offset-assert 100)
   (delta-y       float          :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  )
|#

#|
(deftype bombbot (nav-enemy)
  ((joint-ik               UNKNOWN                     4       :offset-assert 600)
   (feet                   UNKNOWN                     4       :offset-assert 620)
   (legs-strength          UNKNOWN                     4       :offset-assert 1068)
   (last-trans             vector                      :inline :offset-assert 1084)
   (linear-speed           vector                      :inline :offset-assert 1100)
   (last-quat              quaternion                  :inline :offset-assert 1116)
   (y-angular-velocity     float                               :offset-assert 1132)
   (main-quat              quaternion                  :inline :offset-assert 1148)
   (main-spd-y             float                               :offset-assert 1164)
   (main-pos-y             float                               :offset-assert 1168)
   (main-pos               vector                      :inline :offset-assert 1180)
   (city-path              bombbot-path                        :offset-assert 1196)
   (current-node           uint32                              :offset-assert 1200)
   (shot-count             uint32                              :offset-assert 1204)
   (next-shoot             uint64                              :offset-assert 1212)
   (stop-shoot             uint64                              :offset-assert 1220)
   (next-target            uint64                              :offset-assert 1228)
   (start-target           uint64                              :offset-assert 1236)
   (beep-time              time-frame                              :offset-assert 1244)
   (target-pos             vector                      :inline :offset-assert 1260)
   (start-target-pos       vector                      :inline :offset-assert 1276)
   (start-target-vel       vector                      :inline :offset-assert 1292)
   (top-quat               quaternion                  :inline :offset-assert 1308)
   (gun-swivel-quat        quaternion                  :inline :offset-assert 1324)
   (gun-quat               quaternion                  :inline :offset-assert 1340)
   (angle-turret           float                               :offset-assert 1356)
   (angle-gun              float                               :offset-assert 1360)
   (high                   float                               :offset-assert 1364)
   (shield-hit-points      float                               :offset-assert 1368)
   (hit-axis               vector                      :inline :offset-assert 1372)
   (rigidbody              basic                               :offset-assert 1388)
   (info                   rigid-body-object-constants         :offset-assert 1392)
   (explosing              basic                               :offset-assert 1396)
   (minimap                connection-minimap                  :offset-assert 1400)
   (lazer-sound            uint32                              :offset-assert 1404)
   (head-sound             uint32                              :offset-assert 1408)
   (cannon-sound           uint32                              :offset-assert 1412)
   (last-head-roty-speed   float                               :offset-assert 1416)
   (head-roty-speed        float                               :offset-assert 1420)
   (last-cannon-roty-speed float                               :offset-assert 1424)
   (cannon-roty-speed      float                               :offset-assert 1428)
   )
  :method-count-assert 185
  :size-assert         #x59c
  :flag-assert         #xb90520059c
  (:methods
    (explode () _type_ :state 178)
    (bombbot-method-179 () none 179)
    (bombbot-method-180 () none 180)
    (bombbot-method-181 () none 181)
    (bombbot-method-182 () none 182)
    (bombbot-method-183 () none 183)
    (bombbot-method-184 () none 184)
    )
  )
|#

#|
(deftype ik-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype spring-setup (structure)
  ((bpos1 vector  :offset-assert 0)
   (wpos2 vector  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype bombbot-spawn-params (structure)
  ((position vector       :inline :offset-assert 0)
   (quat     quaternion   :inline :offset-assert 16)
   (nav-mesh basic                :offset-assert 32)
   (path     bombbot-path         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

;; (define-extern *bombbot-body-constants* object)
;; (define-extern *bombbot-exploder-params* joint-exploder-static-params)
;; (define-extern *bombbot-nav-enemy-info* nav-enemy-info)
;; (define-extern *bombbot-ik-setup* array)
;; (define-extern bombbot-do-spline function)
;; (define-extern bombbot-spread-lightning-lazer function)
;; (define-extern bombbot-callback function)
;; (define-extern bombbot-head-callback function)
;; (define-extern bombbot-gun-swivel-callback function)
;; (define-extern bombbot-gun-callback function)
;; (define-extern *bombbot-spring-setup* array)
;; (define-extern bombbot-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; demo-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype demo-control (process)
  ()
  :method-count-assert 15
  :size-assert         #x154
  :flag-assert         #xf00e00154
  ;; Failed to read fields.
  (:methods
    (demo-control-method-9 () none 9)
    (demo-control-method-10 () none 10)
    (demo-control-method-11 () none 11)
    (demo-control-method-12 () none 12)
    (demo-control-method-13 () none 13)
    (idle () _type_ :state 14)
    )
  )
|#

;; (define-extern demo-plug-lightning function)
;; (define-extern demo-screen-change function)
;; (define-extern demo-wait-for-press function)
;; (define-extern demo-menu function)
;; (define-extern demo-control-init function)
;; (define-extern target-demo state) ;; (state target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; errol-chal-part                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern city-race-borrow-level-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; errol-chal                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype errol-racer (vehicle-rider)
  ((minimap connection-minimap  :offset-assert 220)
   )
  :method-count-assert 36
  :size-assert         #xe4
  :flag-assert         #x24007000e4
  (:methods
    )
  )
|#

#|
(deftype vehicle-city-racer (vehicle-racer)
  ()
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  (:methods
    )
  )
|#

#|
(deftype race-bike-a (vehicle-city-racer)
  ()
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  (:methods
    )
  )
|#

#|
(deftype race-bike-b (vehicle-city-racer)
  ()
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  (:methods
    )
  )
|#

#|
(deftype turbo-ring (process-drawable)
  ((touch-time time-frame                     :offset-assert 196)
   (minimap    connection-minimap         :offset-assert 204)
   (player-got basic                      :offset-assert 208)
   (persistent basic                      :offset-assert 212)
   (id         int8                       :offset-assert 216)
   (boost      float                      :offset-assert 220)
   (plane      vector             :inline :offset-assert 236)
   (part-track uint64                     :offset-assert 252)
   (mat        matrix             :inline :offset-assert 268)
   )
  :method-count-assert 25
  :size-assert         #x150
  :flag-assert         #x1900d00150
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (turbo-ring-method-22 () none 22)
    (turbo-ring-method-23 () none 23)
    (turbo-ring-method-24 () none 24)
    )
  )
|#

;; (define-extern *race-bike-a-constants* object)
;; (define-extern *race-bike-b-constants* object)
;; (define-extern turbo-ring-init-by-other function)
;; (define-extern turbo-ring-spawn function)
;; (define-extern *city-errol-challenge-rings* array)
;; (define-extern *city-bush-port-rings* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; credits                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern draw-end-credits function) ;; (function int symbol)
;; (define-extern start-credits function)
;; (define-extern check-pop-level-firework-userdata function)
;; (define-extern check-pop-level-firework-red-userdata function)
;; (define-extern check-pop-level-firework-green-userdata function)
;; (define-extern birth-func-firework-color function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; outro-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern death-precursor death-info)
;; (define-extern start-precursor-effect function)
;; (define-extern birth-func-pecker-feather-color function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palroof-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype palroof-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-palroof-drop-userdata function)
;; (define-extern palroof-deactivate function)
;; (define-extern palroof-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palroof-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pal-lowrez-throne (med-res-level)
  ()
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:methods
    )
  )
|#

#|
(deftype pal-prong (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (break-it () _type_ :state 21)
    (broken () _type_ :state 22)
    )
  )
|#

;; (define-extern *pal-prong-exploder-params* joint-exploder-static-params)
;; (define-extern pal-prong-small-collision function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palboss-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *shield-texture-anim-array* texture-anim-array)
;; (define-extern set-shield-color! function)
;; (define-extern set-shield-flash! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palboss-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palboss-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern attach-squid-movie-part function)
;; (define-extern func-squid-damaged-sparks-awake function)
;; (define-extern attach-squid-break-movie-part function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpa-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fordumpa-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpa-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-elec-switch (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 20)
    (play-hint () _type_ :state 21)
    (die () _type_ :state 22)
    )
  )
|#

#|
(deftype fort-fence (process-drawable)
  ((anim      basic   :offset-assert 196)
   (exit-anim basic   :offset-assert 200)
   (loading?  basic   :offset-assert 204)
   (tank      uint64  :offset-assert 212)
   )
  :method-count-assert 24
  :size-assert         #xe0
  :flag-assert         #x18006000e0
  (:methods
    (idle () _type_ :state 20)
    (breaking () _type_ :state 21)
    (fort-fence-method-22 () none 22)
    (fort-fence-method-23 () none 23)
    )
  )
|#

#|
(deftype fort-fence-a (fort-fence)
  ()
  :method-count-assert 24
  :size-assert         #xe0
  :flag-assert         #x18006000e0
  (:methods
    )
  )
|#

#|
(deftype fort-fence-b (fort-fence)
  ()
  :method-count-assert 24
  :size-assert         #xe0
  :flag-assert         #x18006000e0
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fort-turret                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-turret (enemy)
  ((gun-tilt-jm     basic               :offset-assert 528)
   (gun-shadow-jm   basic               :offset-assert 532)
   (aim-pos         vector      :inline :offset-assert 540)
   (target-bullseye vector      :inline :offset-assert 556)
   (gun-twist       float               :offset-assert 572)
   (gun-tilt        float               :offset-assert 576)
   (desired-twist   float               :offset-assert 580)
   (desired-tilt    float               :offset-assert 584)
   (los-clear       basic               :offset-assert 588)
   (flash-state     basic               :offset-assert 592)
   (flash-index     uint32              :offset-assert 596)
   (can-shoot       basic               :offset-assert 600)
   (last-hit-time   time-frame              :offset-assert 604)
   (init-mat        matrix      :inline :offset-assert 620)
   (target-timeout  uint64              :offset-assert 684)
   (beam-intersect  basic               :offset-assert 692)
   (sync            sync-linear :inline :offset-assert 700)
   (invincible      basic               :offset-assert 716)
   )
  :method-count-assert 143
  :size-assert         #x2d4
  :flag-assert         #x8f026002d4
  (:methods
    (attack () _type_ :state 137)
    (sweep () _type_ :state 138)
    (fort-turret-method-139 () none 139)
    (fort-turret-method-140 () none 140)
    (fort-turret-method-141 () none 141)
    (fort-turret-method-142 () none 142)
    )
  )
|#

;; (define-extern fort-turret-draw-laser-spot function)
;; (define-extern fort-turret-draw-laser function)
;; (define-extern *fort-turret-exploder-params* joint-exploder-static-params)
;; (define-extern *fort-turret-enemy-info* enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; whack                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hip-mole-event (UNKNOWN)
  ((min-time uint16  :offset-assert 0)
   (max-time uint16  :offset-assert 2)
   (mode     uint8   :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype hip-mole (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype whack-a-metal (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-whack-score function)
;; (define-extern *mole-data* array)
;; (define-extern hip-mole-init function)
;; (define-extern whack-a-metal-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; roboguard-level                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype roboguard-level (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *roboguard-level-exploder-params* joint-exploder-static-params)
;; (define-extern *roboguard-level-nav-enemy-info* nav-enemy-info)
;; (define-extern roboguard-roll-travel-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-texture                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *slime-clut* object)
;; (define-extern *toxic-slime-texture-anim-array* texture-anim-array)
;; (define-extern set-slime-alphas function)
;; (define-extern get-slime-alphas function)
;; (define-extern set-slime-speed function)
;; (define-extern *cas-conveyor-texture-anim-array* texture-anim-array)
;; (define-extern set-conveyor-speed! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cas-conveyor (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-conveyor-switch (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-electric-fence (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-button (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-elevator (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-rot-bridge (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-switch (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-trapdoor (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-chain-plat (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-rot-blade (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-flag-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-flag-b (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cas-robot-door (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype lightning-ball (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *cas-conveyor-room-id* object)
;; (define-extern sound-update function)
;; (define-extern *cas-electric-fence-exploder-params* joint-exploder-static-params)
;; (define-extern *cas-trapdoor-exploder-params* joint-exploder-static-params)
;; (define-extern *cas-rot-blade-shadow-control* shadow-control)
;; (define-extern cas-rot-blade-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype castle-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-castle-drop-userdata function)
;; (define-extern castle-green-dome-light-pulsate function)
;; (define-extern castle-green-slime-popper function)
;; (define-extern birth-func-castle-green-slime-tube function)
;; (define-extern castle-green-slime-tube-check-delta function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; consite-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *kor-transform-texture-anim-array* texture-anim-array)
;; (define-extern set-kor-texture-morph! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; consite-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype consite-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; consite-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern consite-crimson-guard-shot function)
;; (define-extern movie-consite-metalkor-shot-draw-fire function)
;; (define-extern movie-consite-metalkor-shot-draw-moving function)
;; (define-extern movie-consite-metalkor-shot-draw-impact function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; consite-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype consite-break-scaffold (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype consite-bomb-elevator-hinges (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype consite-bomb-elevator (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype consite-silo-doors (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype baron-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

;; (define-extern consite-bomb-elevator-hinges-init-by-other function)
;; (define-extern consite-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-indax                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype indax-info (basic)
  ((indax-start-time time-frame  :offset-assert 8)
   (indax-time       time-frame  :offset-assert 16)
   (art-group-backup basic   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

;; (define-extern *indax-walk-mods* object)
;; (define-extern *indax-jump-mods* object)
;; (define-extern *indax-double-jump-mods* object)
;; (define-extern *indax-bounce-mods* object)
;; (define-extern target-indax-handler function)
;; (define-extern target-indax-dangerous-event-handler function)
;; (define-extern target-indax-jump-event-handler function)
;; (define-extern target-indax-init function)
;; (define-extern target-indax-exit function)
;; (define-extern target-indax-real-post function)
;; (define-extern target-indax-post function)
;; (define-extern target-indax-start state)
;; (define-extern target-indax-stance state)
;; (define-extern target-indax-walk state)
;; (define-extern target-indax-falling state)
;; (define-extern target-indax-jump state)
;; (define-extern target-indax-double-jump state)
;; (define-extern target-indax-hit-ground state)
;; (define-extern target-indax-trip state)
;; (define-extern target-indax-attack state)
;; (define-extern target-indax-attack-air state)
;; (define-extern target-indax-running-attack state)
;; (define-extern target-indax-hit-setup-anim function)
;; (define-extern target-indax-hit state)
;; (define-extern target-indax-death state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-boulder                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-spider (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tomb-boulder-stop (process-drawable)
  ((prefix basic  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tomb-boulder-pillar (process-drawable)
  ((prefix basic  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tomb-boulder (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #x174
  :flag-assert         #x1601000174
  ;; Failed to read fields.
  (:methods
    (chase () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype spider-eyes (process-drawable)
  ((node-index uint32  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (idle () _type_ :state 20)
    (spider-eyes-method-21 () none 21)
    )
  )
|#

;; (define-extern tomb-spider-init function)
;; (define-extern tomb-boulder-stop-init function)
;; (define-extern tomb-boulder-pillar-init function)
;; (define-extern spider-eyes-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squid-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squid-setup                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype squid-whirlwind (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-collision (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-driver (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-baron (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-tentacle-chain (UNKNOWN)
  ((position  vector :inline :offset-assert 0)
   (velocity  vector :inline :offset-assert 16)
   (old-x     vector :inline :offset-assert 32)
   (joint-mod basic          :offset-assert 48)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype squid-tentacle (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-grenade-holder (UNKNOWN)
  ((target-position vector :inline :offset-assert 0)
   (show-it         basic          :offset-assert 16)
   (grenade         uint64         :offset-assert 24)
   (marker          uint64         :offset-assert 32)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype squid-grenade (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype squid-shot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *squid-shield-exploder-params* joint-exploder-static-params)
;; (define-extern *squid-tentacle-shield-exploder-params* joint-exploder-static-params)
;; (define-extern squid-whirlwind-init-by-other function)
;; (define-extern squid-collision-init-by-other function)
;; (define-extern squid-driver-init-by-other function)
;; (define-extern squid-baron-init-by-other function)
;; (define-extern squid-tentacle-handler function)
;; (define-extern squid-tentacle-init-by-other function)
;; (define-extern squid-take-hit function)
;; (define-extern squid-increment-shield function)
;; (define-extern squid-check-hit-points function)
;; (define-extern squid-handler function)
;; (define-extern squid-num-grenades-to-shoot function)
;; (define-extern squid-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squid-extras                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern squid-grenade-move function)
;; (define-extern squid-whirlwind-move function)
;; (define-extern scene-tentacle-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squid-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern squid-talker function)
;; (define-extern *squid-first-pole* object)
;; (define-extern *squid-second-pole* object)
;; (define-extern go-through-wall function)
;; (define-extern squid-adjust-fly-anim function)
;; (define-extern squid-whirlwind-time function)
;; (define-extern setup-grenade function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fort-floor-spike               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spike-row-info (structure)
  ((sync      sync-linear :inline :offset-assert 0)
   (table-ptr uint32              :offset-assert 16)
   (on-ratio  float               :offset-assert 20)
   (state     int32               :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype spike-row-info-array (inline-array-class)
  ((length           int32            :offset-assert 4)
   (allocated-length int32            :offset-assert 8)
   (data             UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype fort-floor-spike (process-drawable)
  ((pos-table        uint32    :offset-assert 196)
   (spike-row        basic     :offset-assert 200)
   (spike-dim        UNKNOWN 2 :offset-assert 204)
   (attack-id        int32     :offset-assert 212)
   (no-overlap-timer uint64    :offset-assert 220)
   )
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    (idle () _type_ :state 20)
    (fort-floor-spike-method-21 () none 21)
    (fort-floor-spike-method-22 () none 22)
    (fort-floor-spike-method-23 () none 23)
    )
  )
|#

#|
(deftype fort-floor-spike-a (fort-floor-spike)
  ()
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    )
  )
|#

#|
(deftype fort-floor-spike-b (fort-floor-spike)
  ()
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    )
  )
|#

#|
(deftype fort-floor-spike-c (fort-floor-spike)
  ()
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    )
  )
|#

;; (define-extern joint-mod-set-y-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forrescb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forrescb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forrescb-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-twist-rail (process-drawable)
  ((sync      sync-eased :inline :offset-assert 196)
   (init-quat quaternion :inline :offset-assert 252)
   )
  :method-count-assert 21
  :size-assert         #x110
  :flag-assert         #x1500900110
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype fort-elec-belt-inst (process-drawable)
  ((l-spec    basic      :offset-assert 196)
   (l-bolt    basic      :offset-assert 200)
   (points    UNKNOWN 17 :offset-assert 204)
   (path-u    float      :offset-assert 476)
   (path-du   float      :offset-assert 480)
   (attack-id uint32     :offset-assert 484)
   (sound-id  uint32     :offset-assert 488)
   )
  :method-count-assert 23
  :size-assert         #x1f0
  :flag-assert         #x17017001f0
  (:methods
    (idle () _type_ :state 20)
    (running () _type_ :state 21)
    (die () _type_ :state 22)
    )
  )
|#

#|
(deftype fort-elec-belt (process)
  ((l-spec          basic               :offset-assert 124)
   (next-spawn-time time-frame              :offset-assert 132)
   (path            basic               :offset-assert 140)
   (init-quat       quaternion  :inline :offset-assert 156)
   (sync            sync-linear :inline :offset-assert 172)
   (attack-id       uint32              :offset-assert 188)
   (path-du         float               :offset-assert 192)
   )
  :method-count-assert 16
  :size-assert         #xc8
  :flag-assert         #x10005000c8
  (:methods
    (fort-elec-belt-method-9 () none 9)
    (fort-elec-belt-method-10 () none 10)
    (fort-elec-belt-method-11 () none 11)
    (fort-elec-belt-method-12 () none 12)
    (fort-elec-belt-method-13 () none 13)
    (idle () _type_ :state 14)
    (fort-elec-belt-method-15 () none 15)
    )
  )
|#

#|
(deftype fort-conveyor (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#

;; (define-extern fort-elec-belt-inst-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spydroid                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spydroid (nav-enemy)
  ((old-y-deg    float     :offset-assert 600)
   (diff-angle   float     :offset-assert 604)
   (desire-turn  basic     :offset-assert 608)
   (hit-target   basic     :offset-assert 612)
   (lightning    UNKNOWN 4 :offset-assert 616)
   (floor        float     :offset-assert 632)
   (explode-part basic     :offset-assert 636)
   )
  :method-count-assert 179
  :size-assert         #x284
  :flag-assert         #xb302100284
  (:methods
    (attack () _type_ :state 178)
    )
  )
|#

;; (define-extern *spydroid-exploder-params* joint-exploder-static-params)
;; (define-extern *spydroid-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palent-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype palent-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern palent-deactivate function)
;; (define-extern palent-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pal-obs                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pal-falling-plat (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (fall () _type_ :state 21)
    )
  )
|#

#|
(deftype pal-ent-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype pal-grind-ring-center (process-focusable)
  ((speed-y           float  :offset-assert 200)
   (hit-sound-played? basic  :offset-assert 204)
   )
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e006000d4
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (pal-grind-ring-center-method-29 () none 29)
    )
  )
|#

#|
(deftype pal-grind-ring (process-focusable)
  ((speed-y           float  :offset-assert 200)
   (hit-sound-played? basic  :offset-assert 204)
   )
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e006000d4
  (:methods
    (idle () _type_ :state 27)
    (fall () _type_ :state 28)
    (pal-grind-ring-method-29 () none 29)
    )
  )
|#

#|
(deftype pal-ent-glass (process-focusable)
  ()
  :method-count-assert 31
  :size-assert         #xcc
  :flag-assert         #x1f005000cc
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (pal-ent-glass-method-29 () none 29)
    (pal-ent-glass-method-30 () none 30)
    )
  )
|#

#|
(deftype palent-turret-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype palent-turret (process-focusable)
  ((next-shoot uint64  :offset-assert 204)
   )
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:methods
    (idle () _type_ :state 27)
    (palent-turret-method-28 () none 28)
    )
  )
|#

#|
(deftype pal-breakable-window (process-focusable)
  ()
  :method-count-assert 31
  :size-assert         #xcc
  :flag-assert         #x1f005000cc
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    (pal-breakable-window-method-29 () none 29)
    (pal-breakable-window-method-30 () none 30)
    )
  )
|#

;; (define-extern *pal-grind-ring-center-exploder-params* joint-exploder-static-params)
;; (define-extern pal-grind-ring-center-init-by-other function)
;; (define-extern *pal-ent-glass-exploder-params* joint-exploder-static-params)
;; (define-extern palent-turret-callback function)
;; (define-extern *pal-breakable-window-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; title-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype title-control (process)
  ()
  :method-count-assert 18
  :size-assert         #x15c
  :flag-assert         #x1200e0015c
  ;; Failed to read fields.
  (:methods
    (title-control-method-9 () none 9)
    (title-control-method-10 () none 10)
    (title-control-method-11 () none 11)
    (title-control-method-12 () none 12)
    (title-control-method-13 () none 13)
    (startup () _type_ :state 14)
    (wait () _type_ :state 15)
    (idle () _type_ :state 16)
    (scrap-book () _type_ :state 17)
    )
  )
|#

;; (define-extern title-plug-lightning function)
;; (define-extern title-screen-change function)
;; (define-extern wait-for-press function)
;; (define-extern title-menu function)
;; (define-extern title-fade-out function)
;; (define-extern title-progress function)
;; (define-extern title-control-init function)
;; (define-extern target-title state) ;; (state target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern mech-spawn-thruster function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mech (process-drawable)
  ((extra-trans       vector :inline :offset-assert 204)
   (condition         int32          :offset-assert 220)
   (shadow-backup     basic          :offset-assert 224)
   (rider             uint64         :offset-assert 228)
   (shield-value      float          :offset-assert 236)
   (nav-sphere-handle uint64         :offset-assert 244)
   (probe-time        time-frame         :offset-assert 252)
   )
  :method-count-assert 25
  :size-assert         #x108
  :flag-assert         #x1900900108
  (:methods
    (wait-for-start () _type_ :state 20)
    (idle () _type_ :state 21)
    (pickup () _type_ :state 22)
    (wait-for-return () _type_ :state 23)
    (mech-method-24 () none 24)
    )
  )
|#

#|
(deftype mech-target (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    )
  )
|#

;; (define-extern *kernel-packages* object) ;; pair
;; (define-extern mech-init function)
;; (define-extern mech-target-init function)
;; (define-extern mech-target-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-mech                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *mech-stance-mods* surface)
;; (define-extern *mech-walk-mods* surface)
;; (define-extern *mech-jump-mods* surface)
;; (define-extern *mech-punch-mods* surface)
;; (define-extern *mech-pickup-mods* surface)
;; (define-extern *mech-carry-walk-mods* surface)
;; (define-extern *mech-carry-drag-mods* surface)
;; (define-extern *mech-carry-jump-mods* surface)
;; (define-extern target-mech-falling-anim-trans function)
;; (define-extern target-mech-mech-effect function)
;; (define-extern mech-on-ground? function)
;; (define-extern target-mech-get-off? function)
;; (define-extern target-mech-handler function)
;; (define-extern target-mech-bonk-event-handler function)
;; (define-extern mech-leg-ik-callback function)
;; (define-extern mech-update-ik function)
;; (define-extern target-mech-init function)
;; (define-extern target-mech-exit function)
;; (define-extern target-mech-effect function)
;; (define-extern target-mech-add-thrust function)
;; (define-extern target-mech-collision function)
;; (define-extern target-mech-real-post function)
;; (define-extern target-mech-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-states                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *mech-exploder-params* joint-exploder-static-params)
;; (define-extern target-mech-start state)
;; (define-extern target-mech-stance state)
;; (define-extern target-mech-walk state)
;; (define-extern target-mech-punch-pick function)
;; (define-extern target-mech-punch state)
;; (define-extern target-mech-falling state)
;; (define-extern target-mech-jump state)
;; (define-extern target-mech-hit-ground state)
;; (define-extern target-mech-hit state)
;; (define-extern target-mech-death state)
;; (define-extern target-mech-carry-update function)
;; (define-extern target-mech-carry-post function)
;; (define-extern target-mech-carry-pickup state)
;; (define-extern target-mech-carry-drop state)
;; (define-extern target-mech-carry-stance state)
;; (define-extern target-mech-carry-walk state)
;; (define-extern target-mech-carry-drag state)
;; (define-extern target-mech-carry-falling state)
;; (define-extern target-mech-carry-hit-ground state)
;; (define-extern target-mech-carry-jump state)
;; (define-extern target-mech-carry-throw state)
;; (define-extern target-mech-get-on state)
;; (define-extern target-mech-get-off state)
;; (define-extern target-mech-grab state)
;; (define-extern target-mech-clone-anim state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grunt-mech                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grunt-mech-hold (structure)
  ((reserve-mask uint8          :offset-assert 0)
   (lower-hold   int8           :offset-assert 1)
   (grunt-handle uint64         :offset-assert 8)
   (timeout      uint64         :offset-assert 16)
   (local-pos    vector :inline :offset-assert 32)
   (local-rot    vector :inline :offset-assert 48)
   (local-mat    matrix :inline :offset-assert 64)
   (world-mat    matrix :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )
|#

#|
(deftype grunt-mech-info (basic)
  ((reserved-mask    uint8     :offset-assert 4)
   (last-update-time time-frame    :offset-assert 8)
   (holds            UNKNOWN 6 :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x490
  :flag-assert         #xb00000490
  (:methods
    (grunt-mech-info-method-9 () none 9)
    (grunt-mech-info-method-10 () none 10)
    )
  )
|#

#|
(deftype grunt-mech (grunt)
  ((hold-id       int8           :offset-assert 688)
   (dismount-dest vector :inline :offset-assert 700)
   )
  :method-count-assert 196
  :size-assert         #x2d0
  :flag-assert         #xc4025002d0
  (:methods
    (mech-lunge () _type_ :state 186)
    (mech-hold () _type_ :state 187)
    (mech-dismount () _type_ :state 188)
    (mech-post-circling () _type_ :state 189)
    (mech-pre-circling () _type_ :state 190)
    (grunt-mech-method-191 () none 191)
    (grunt-mech-method-192 () none 192)
    (grunt-mech-method-193 () none 193)
    (grunt-mech-method-194 () none 194)
    (grunt-mech-method-195 () none 195)
    )
  )
|#

;; (define-extern *grunt-mech-info* grunt-mech-info)
;; (define-extern grunt-mech-hold-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palcab-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype palcab-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern palcab-bird-bob-func function)
;; (define-extern sparticle-palcab-bird-moon function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palcab-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pal-fan-ring (structure)
  ((lightning      basic  :offset-assert 0)
   (radius         float  :offset-assert 4)
   (dist           float  :offset-assert 8)
   (local-z-rotate float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype pal-fan-pole (structure)
  ((rings    UNKNOWN 6 :offset-assert 0)
   (z-rotate float     :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype pal-electric-fan (process-drawable)
  ((poles              UNKNOWN 3 :offset-assert 196)
   (no-collision-timer uint64    :offset-assert 532)
   (sound-timer        uint64    :offset-assert 540)
   (rotate-speed       float     :offset-assert 548)
   (attack-id          uint32    :offset-assert 552)
   (sound-id           uint32    :offset-assert 556)
   )
  :method-count-assert 21
  :size-assert         #x234
  :flag-assert         #x1501c00234
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype pal-cable-nut (process-drawable)
  ((sync              sync-linear :inline :offset-assert 196)
   (init-quat         quaternion  :inline :offset-assert 220)
   (sound-played?     UNKNOWN     2       :offset-assert 236)
   (hold-percentage   float               :offset-assert 244)
   (wiggle-percentage float               :offset-assert 248)
   )
  :method-count-assert 21
  :size-assert         #x100
  :flag-assert         #x1500800100
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype pal-rot-gun-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype pal-rot-gun (process-drawable)
  ((init-quat       quaternion :inline :offset-assert 204)
   (fire-timer      uint64             :offset-assert 220)
   (gun-index       int32              :offset-assert 228)
   (spin-rate       float              :offset-assert 232)
   (spin-rate-final float              :offset-assert 236)
   (sound-id        uint32             :offset-assert 240)
   (shot-sound-id   uint32             :offset-assert 244)
   (prev-z-rot      float              :offset-assert 248)
   )
  :method-count-assert 24
  :size-assert         #x100
  :flag-assert         #x1800800100
  (:methods
    (idle () _type_ :state 20)
    (spin () _type_ :state 21)
    (spin-down () _type_ :state 22)
    (pal-rot-gun-method-23 () none 23)
    )
  )
|#

#|
(deftype pal-windmill (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype pal-flip-step (process-drawable)
  ((task-node basic  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    (idle () _type_ :state 20)
    (fall () _type_ :state 21)
    (fallen () _type_ :state 22)
    )
  )
|#

;; (define-extern pal-rot-gun-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; searchlight                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype searchlight (process-drawable)
  ((sync sync-eased :inline :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xf4
  :flag-assert         #x15008000f4
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; protect                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype seal-of-mar (process-drawable)
  ((attach-object uint64  :offset-assert 196)
   (scale         float   :offset-assert 204)
   (trans-y       float   :offset-assert 208)
   )
  :method-count-assert 24
  :size-assert         #xd8
  :flag-assert         #x18006000d8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (seal-of-mar-method-22 () none 22)
    (seal-of-mar-method-23 () none 23)
    )
  )
|#

#|
(deftype city-slums-transport-info (structure)
  ((id         uint32             :offset-assert 0)
   (spawned    basic              :offset-assert 4)
   (plane-pos  vector     :inline :offset-assert 16)
   (plane-quat quaternion :inline :offset-assert 32)
   (t-pos      vector     :inline :offset-assert 48)
   (t-quat     quaternion :inline :offset-assert 64)
   (num-guard  uint32             :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

;; (define-extern seal-of-mar-init-by-other function)
;; (define-extern seal-of-mar-spawn function)
;; (define-extern *city-slums-transport-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forexita-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forexita-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forexita-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-lift-plat (plat)
  ((sound-time time-frame  :offset-assert 324)
   (last-val   float   :offset-assert 332)
   )
  :method-count-assert 38
  :size-assert         #x154
  :flag-assert         #x2600e00154
  (:methods
    (plat-anim-active () _type_ :state 37)
    )
  )
|#

#|
(deftype fort-claw (process-drawable)
  ((path-u    float  :offset-assert 196)
   (path-dest float  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:methods
    (idle () _type_ :state 20)
    (pause () _type_ :state 21)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onintent-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype onintent-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-bubble-surface-onintent function)
;; (define-extern check-onintent-bugs function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onintent-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onin-game                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype onin-game-event (structure)
  ((min-count  uint16  :offset-assert 0)
   (max-count  uint16  :offset-assert 2)
   (min-event  uint16  :offset-assert 4)
   (max-event  uint16  :offset-assert 6)
   (wave-delay uint16  :offset-assert 8)
   (min-wave   uint16  :offset-assert 10)
   (max-wave   uint16  :offset-assert 12)
   (gravity    meters  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype onin-game-bubble (process-drawable)
  ((bubble-type       int32   :offset-assert 196)
   (bubble-start-time time-frame  :offset-assert 204)
   (gravity           meters  :offset-assert 212)
   (dead?             basic   :offset-assert 216)
   (angle             float   :offset-assert 220)
   (height            float   :offset-assert 224)
   )
  :method-count-assert 22
  :size-assert         #xe8
  :flag-assert         #x16007000e8
  (:methods
    (idle () _type_ :state 20)
    (fall () _type_ :state 21)
    )
  )
|#

#|
(deftype onin-game (process-drawable)
  ((wave            int32   :offset-assert 196)
   (event           int32   :offset-assert 200)
   (wave-time       time-frame  :offset-assert 204)
   (wave-delay-time time-frame  :offset-assert 212)
   (wave-length     uint64  :offset-assert 220)
   (event-time      time-frame  :offset-assert 228)
   (event-length    uint64  :offset-assert 236)
   (hud-score       uint64  :offset-assert 244)
   (hud-goal        uint64  :offset-assert 252)
   (hud-miss        uint64  :offset-assert 260)
   (score           float   :offset-assert 268)
   (score-time      time-frame  :offset-assert 276)
   (game            uint32  :offset-assert 284)
   (miss-max        int32   :offset-assert 288)
   (miss-count      int32   :offset-assert 292)
   (point-win       float   :offset-assert 296)
   (game-start-time time-frame  :offset-assert 300)
   (last-type       int32   :offset-assert 308)
   (current-bonus   float   :offset-assert 312)
   (last-angle      float   :offset-assert 316)
   (wave-start-miss int32   :offset-assert 320)
   )
  :method-count-assert 28
  :size-assert         #x148
  :flag-assert         #x1c00d00148
  (:methods
    (hide () _type_ :state 20)
    (wait-for-start () _type_ :state 21)
    (active () _type_ :state 22)
    (lose () _type_ :state 23)
    (win () _type_ :state 24)
    (onin-game-method-25 () none 25)
    (onin-game-method-26 () none 26)
    (onin-game-method-27 () none 27)
    )
  )
|#

;; (define-extern *onin-game-data* array)
;; (define-extern birth-func-onin-bubble-pop function)
;; (define-extern birth-func-onin-bubble-birth-pop function)
;; (define-extern onin-game-bubble-init function)
;; (define-extern onin-game-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadiumb-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *stadiumb-energy-wall-anim-array* texture-anim-array)
;; (define-extern set-stadiumb-energy-wall! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stadium-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-stadium-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadiumb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stadiumb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stadiumc-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stadiumd-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern race-birth-func-texture-lap-01 function)
;; (define-extern race-birth-func-texture-lap-02 function)
;; (define-extern race-birth-func-texture-position-01 function)
;; (define-extern race-birth-func-texture-position-02 function)
;; (define-extern race-birth-func-texture-position-word function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim-stadium (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype dummy-vehicle (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gar-curtain (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype rift-rider (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype rift-rider-battle-info (UNKNOWN)
  ((path-pos     float  :offset-assert 0)
   (entity-index int32  :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype spotlight (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gar-door (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-samos (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-youngsamos (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stadium-barrier (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-force-field (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-c-force-field (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-d-force-field (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-keira (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype stad-brutter (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype brutter-balloon (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern ripple-for-water-anim-stadium ripple-wave-set)
;; (define-extern *rift-rider-physics-constants* object)
;; (define-extern *rift-rider-force-points* array)
;; (define-extern *rift-rider-battle-table* array)
;; (define-extern defend-stadium-rift-rider-handler function)
;; (define-extern rift-rider-travel-post function)
;; (define-extern rift-rider-bounce-reaction function)
;; (define-extern defend-stadium-wait state)
;; (define-extern *stad-nav-callback-info* object)
;; (define-extern *stad-samos-lightning-joint-tbl* array)
;; (define-extern stad-samos-post function)
;; (define-extern spawn-energy function)
;; (define-extern stad-samos-handler function)
;; (define-extern stadium-barrier-init-by-other function)
;; (define-extern stadium-barrier-spawn function)
;; (define-extern stad-keira-init-by-other function)
;; (define-extern stad-brutter-init-by-other function)
;; (define-extern *suppress-stadium* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype keira-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctygenc-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctygenc-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctymark-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype market-object (process-focusable)
  ((part-explode   basic          :offset-assert 200)
   (explode-matrix matrix :inline :offset-assert 204)
   )
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    )
  )
|#

#|
(deftype market-basket-a (market-object)
  ()
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    )
  )
|#

#|
(deftype market-basket-b (market-object)
  ()
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    )
  )
|#

#|
(deftype market-crate (market-object)
  ()
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    )
  )
|#

#|
(deftype market-sack-a (market-object)
  ()
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    )
  )
|#

#|
(deftype market-sack-b (market-object)
  ()
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    )
  )
|#

;; (define-extern check-market-piece-ground function)
;; (define-extern market-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctymarka-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctymarka-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctymarkb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctymarkb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpb-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fort-plat-orbit (process-drawable)
  ((sync sync-linear :inline :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15006000d8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype fort-plat-shuttle-plat (process-drawable)
  ((path-pos   float  :offset-assert 196)
   (path-speed float  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype fort-plat-shuttle (process-drawable)
  ((next-spawn-time time-frame              :offset-assert 196)
   (sync            sync-linear :inline :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  (:methods
    (dormant () _type_ :state 20)
    (idle () _type_ :state 21)
    (fort-plat-shuttle-method-22 () none 22)
    )
  )
|#

#|
(deftype fort-conveyor (conveyor)
  ()
  :method-count-assert 28
  :size-assert         #x100
  :flag-assert         #x1c00800100
  (:methods
    )
  )
|#

;; (define-extern fort-plat-shuttle-plat-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fordumpb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fordumpb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; skatea-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype skatea-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; skatea-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hoverboard-training-manager (process)
  ()
  :method-count-assert 31
  :size-assert         #x100
  :flag-assert         #x1f00800100
  ;; Failed to read fields.
  (:methods
    (hoverboard-training-manager-method-9 () none 9)
    (hoverboard-training-manager-method-10 () none 10)
    (hoverboard-training-manager-method-11 () none 11)
    (hoverboard-training-manager-method-12 () none 12)
    (hoverboard-training-manager-method-13 () none 13)
    (wait-for-pickup () _type_ :state 14)
    (wait-for-pickup-training () _type_ :state 15)
    (wait-for-board () _type_ :state 16)
    (wait () _type_ :state 17)
    (jump () _type_ :state 18)
    (duck-jump () _type_ :state 19)
    (boost-jump () _type_ :state 20)
    (grind () _type_ :state 21)
    (spin () _type_ :state 22)
    (flip () _type_ :state 23)
    (trick () _type_ :state 24)
    (game () _type_ :state 25)
    (idle () _type_ :state 26)
    (idle-training () _type_ :state 27)
    (hoverboard-training-manager-method-28 () none 28)
    (hoverboard-training-manager-method-29 () none 29)
    (hoverboard-training-manager-method-30 () none 30)
    )
  )
|#

#|
(deftype skate-training-ramp (process-focusable)
  ((onoff basic  :offset-assert 200)
   )
  :method-count-assert 29
  :size-assert         #xd0
  :flag-assert         #x1d005000d0
  (:methods
    (idle () _type_ :state 27)
    (skate-training-ramp-method-28 () none 28)
    )
  )
|#

#|
(deftype skate-gate (process-focusable)
  ((onoff basic  :offset-assert 200)
   )
  :method-count-assert 30
  :size-assert         #xd0
  :flag-assert         #x1e005000d0
  (:methods
    (idle () _type_ :state 27)
    (open () _type_ :state 28)
    (open () _type_ :state 29)
    )
  )
|#

#|
(deftype skatea-jump-pad (bouncer)
  ()
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:methods
    )
  )
|#

#|
(deftype skatea-floating-ring (process-focusable)
  ((pos-y  float  :offset-assert 200)
   (offset float  :offset-assert 204)
   )
  :method-count-assert 29
  :size-assert         #xd4
  :flag-assert         #x1d006000d4
  (:methods
    (idle () _type_ :state 27)
    (skatea-floating-ring-method-28 () none 28)
    )
  )
|#

;; (define-extern trick-type-trick? function)
;; (define-extern hoverboard-training-manager-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyinda-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyinda-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyinda-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-plat-wall (plat)
  ((position vector :inline :offset-assert 332)
   (last-pos float          :offset-assert 348)
   )
  :method-count-assert 37
  :size-assert         #x164
  :flag-assert         #x2500f00164
  (:methods
    )
  )
|#

#|
(deftype tomb-stair-block-spikes (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tomb-stair-block-spike-info (structure)
  ((spike    uint64  :offset-assert 0)
   (joint    int32   :offset-assert 8)
   (y-offset float   :offset-assert 12)
   (up       basic   :offset-assert 16)
   (sounded  basic   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype tomb-stair-block (process-drawable)
  ((initial-y    float     :offset-assert 196)
   (spike-info   UNKNOWN 4 :offset-assert 204)
   (camera-state int32     :offset-assert 332)
   (sink-sound   uint32    :offset-assert 336)
   (rise-sound   uint32    :offset-assert 340)
   )
  :method-count-assert 25
  :size-assert         #x15c
  :flag-assert         #x1900e0015c
  (:methods
    (wait-for-pools () _type_ :state 20)
    (idle () _type_ :state 21)
    (moving () _type_ :state 22)
    (sink () _type_ :state 23)
    (sunk () _type_ :state 24)
    )
  )
|#

#|
(deftype tomb-bounce-web (bouncer)
  ()
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:methods
    )
  )
|#

#|
(deftype tomb-plat-pillar (plat)
  ()
  :method-count-assert 37
  :size-assert         #x144
  :flag-assert         #x2500d00144
  (:methods
    )
  )
|#

#|
(deftype tomb-elevator (elevator)
  ((last-pos vector :inline :offset-assert 364)
   (speed    float          :offset-assert 380)
   )
  :method-count-assert 49
  :size-assert         #x184
  :flag-assert         #x3101100184
  (:methods
    )
  )
|#

#|
(deftype tomb-boss-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype water-anim-tomb (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

#|
(deftype tomb-wing-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype tomb-boulder-door (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (open () _type_ :state 20)
    (close () _type_ :state 21)
    )
  )
|#

#|
(deftype tomb-plat-return (base-plat)
  ((intro-path basic   :offset-assert 268)
   (ride-timer uint64  :offset-assert 276)
   (flags      uint16  :offset-assert 284)
   (path-pos   float   :offset-assert 288)
   (dest-pos   float   :offset-assert 292)
   (path-speed float   :offset-assert 296)
   (sound-id   uint32  :offset-assert 300)
   )
  :method-count-assert 39
  :size-assert         #x134
  :flag-assert         #x2700c00134
  (:methods
    (hidden () _type_ :state 34)
    (run-intro () _type_ :state 35)
    (waiting () _type_ :state 36)
    (running () _type_ :state 37)
    (waiting-for-no-player () _type_ :state 38)
    )
  )
|#

#|
(deftype tomb-sphinx (process-drawable)
  ((target-actor basic   :offset-assert 196)
   (sound-id     uint32  :offset-assert 200)
   (move-dir     float   :offset-assert 212)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    (doors-open () _type_ :state 22)
    )
  )
|#

;; (define-extern tomb-stair-block-collision function)
;; (define-extern tomb-stair-block-spikes-init-by-other function)
;; (define-extern lift-pool function)
;; (define-extern drop-pool function)
;; (define-extern position-spikes function)
;; (define-extern ripple-for-water-anim-tomb ripple-wave-set)
;; (define-extern tomb-sphinx-draw-beam function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-water                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-door (process-drawable)
  ((notify-actor basic   :offset-assert 196)
   (round        uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:methods
    (idle () _type_ :state 20)
    (open () _type_ :state 21)
    )
  )
|#

#|
(deftype tomb-beetle-door (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #x128
  :flag-assert         #x1600b00128
  ;; Failed to read fields.
  (:methods
    (idle () _type_ :state 20)
    (open () _type_ :state 21)
    )
  )
|#

#|
(deftype tomb-button (basebutton)
  ()
  :method-count-assert 39
  :size-assert         #x120
  :flag-assert         #x2700a00120
  (:methods
    )
  )
|#

#|
(deftype tomb-beetle-button (tomb-button)
  ((round        uint32  :offset-assert 284)
   (speech-mask  uint32  :offset-assert 288)
   (speech-timer uint64  :offset-assert 292)
   )
  :method-count-assert 40
  :size-assert         #x130
  :flag-assert         #x2800b00130
  (:methods
    (tomb-beetle-button-method-39 () none 39)
    )
  )
|#

#|
(deftype tomb-simon-block (base-plat)
  ((sound-show  uint128         :offset-assert 268)
   (color       vector  :inline :offset-assert 284)
   (my-idx      int32           :offset-assert 300)
   (next-idx    int32           :offset-assert 304)
   (flags       uint16          :offset-assert 308)
   (blink-timer UNKNOWN 2       :offset-assert 316)
   (ride-timer  uint64          :offset-assert 332)
   (order       int32           :offset-assert 340)
   (base-height float           :offset-assert 344)
   (move-rate   float           :offset-assert 348)
   )
  :method-count-assert 42
  :size-assert         #x164
  :flag-assert         #x2a00f00164
  (:methods
    (idle () _type_ :state 34)
    (ready () _type_ :state 35)
    (ridden () _type_ :state 36)
    (temporary () _type_ :state 37)
    (dangerous () _type_ :state 38)
    (wobble-die () _type_ :state 39)
    (die () _type_ :state 40)
    (tomb-simon-block-method-41 () none 41)
    )
  )
|#

#|
(deftype tomb-plat-simon (process-drawable)
  ((plat           basic   :offset-assert 196)
   (plat-seq       uint32  :offset-assert 200)
   (plat-count     int32   :offset-assert 204)
   (plat-seq-count int32   :offset-assert 208)
   (plat-idx       int32   :offset-assert 212)
   (button-handle  uint64  :offset-assert 220)
   (notify-actor   basic   :offset-assert 228)
   (flags          uint16  :offset-assert 232)
   )
  :method-count-assert 25
  :size-assert         #xee
  :flag-assert         #x19007000ee
  (:methods
    (dormant () _type_ :state 20)
    (appear () _type_ :state 21)
    (show-sequence () _type_ :state 22)
    (idle () _type_ :state 23)
    (tomb-plat-simon-method-24 () none 24)
    )
  )
|#

#|
(deftype tomb-simon-button (process-drawable)
  ((notify-actor basic  :offset-assert 196)
   (on-notice    basic  :offset-assert 200)
   (on-activate  basic  :offset-assert 204)
   )
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  ;; field on-notice uses ~A with a signed load field on-activate uses ~A with a signed load
  (:methods
    (idle () _type_ :state 20)
    (open () _type_ :state 21)
    (waiting () _type_ :state 22)
    (pressed () _type_ :state 23)
    (unpress () _type_ :state 24)
    )
  )
|#

#|
(deftype tomb-vibe (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #x110
  :flag-assert         #x1800900110
  ;; Failed to read fields.
  (:methods
    (get-pattern () _type_ :state 20)
    (idle () _type_ :state 21)
    (vibrate () _type_ :state 22)
    (die () _type_ :state 23)
    )
  )
|#

#|
(deftype tomb-water-trap (process-drawable)
  ((bbox              bounding-box :inline :offset-assert 204)
   (run-bbox          bounding-box :inline :offset-assert 236)
   (sync              sync-linear  :inline :offset-assert 268)
   (on-duration       uint64               :offset-assert 284)
   (harmless-time     time-frame               :offset-assert 292)
   (l-spec            basic                :offset-assert 300)
   (l-count           uint32               :offset-assert 304)
   (l-index           basic                :offset-assert 308)
   (attack-id         uint32               :offset-assert 312)
   (volume            float                :offset-assert 316)
   (can-exit-running? basic                :offset-assert 320)
   )
  :method-count-assert 25
  :size-assert         #x148
  :flag-assert         #x1900d00148
  (:methods
    (idle () _type_ :state 20)
    (running () _type_ :state 21)
    (tomb-water-trap-method-22 () none 22)
    (tomb-water-trap-method-23 () none 23)
    (tomb-water-trap-method-24 () none 24)
    )
  )
|#

#|
(deftype tomb-smash-door (process-drawable)
  ((timeout uint64  :offset-assert 196)
   (button  uint64  :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (idle () _type_ :state 20)
    (open () _type_ :state 21)
    (close () _type_ :state 22)
    )
  )
|#

;; (define-extern tomb-beetle-door-offsets object)
;; (define-extern *tomb-simon-sound-tbl* object)
;; (define-extern *tomb-simon-color-tbl* object)
;; (define-extern tomb-plat-simon-handler function)
;; (define-extern simon-block-handler function)
;; (define-extern tomb-simon-block-post function)
;; (define-extern tomb-simon-block-trans function)
;; (define-extern tomb-simon-block-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-beetle                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-beetle-fly-info (structure)
  ((dst       vector     :inline :offset-assert 0)
   (dst-quat  quaternion :inline :offset-assert 16)
   (dist      meters             :offset-assert 32)
   (threshold meters             :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype tomb-beetle (nav-enemy)
  ((src-quat          quaternion :inline :offset-assert 604)
   (fly-info          UNKNOWN    2       :offset-assert 620)
   (speed             meters             :offset-assert 716)
   (init-height       meters             :offset-assert 720)
   (flags             uint16             :offset-assert 724)
   (dest-index        int32              :offset-assert 728)
   (round             uint32             :offset-assert 732)
   (flying?           basic              :offset-assert 736)
   (fly-away-radius   float              :offset-assert 740)
   (fly-away-ry       float              :offset-assert 744)
   (fly-away-ry-speed float              :offset-assert 748)
   (fly-away-acc      float              :offset-assert 752)
   (fly-away-dir      vector     :inline :offset-assert 764)
   )
  :method-count-assert 186
  :size-assert         #x310
  :flag-assert         #xba02900310
  (:methods
    (tomb-beetle-method-178 () none 178)
    (explode () _type_ :state 179)
    (fly-away () _type_ :state 180)
    (go-to-door () _type_ :state 181)
    (key () _type_ :state 182)
    (land () _type_ :state 183)
    (stand () _type_ :state 184)
    (tomb-beetle-method-185 () none 185)
    )
  )
|#

;; (define-extern *tomb-beetle-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-boss-pebble function)
;; (define-extern check-drop-level-boss-pebble function)
;; (define-extern func-widow-damaged-sparks-awake function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow-baron                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype widow-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   (bounce-high float  :offset-assert 24)
   )
  :method-count-assert 13
  :size-assert         #x1c
  :flag-assert         #xd0000001c
  (:methods
    (widow-float-seeker-method-9 () none 9)
    (widow-float-seeker-method-10 () none 10)
    (widow-float-seeker-method-11 () none 11)
    (widow-float-seeker-method-12 () none 12)
    )
  )
|#

#|
(deftype widow-rand-vector (structure)
  ((min-time int32          :offset-assert 0)
   (max-time int32          :offset-assert 4)
   (xz-max   float          :offset-assert 8)
   (y-max    float          :offset-assert 12)
   (timer    int32          :offset-assert 16)
   (value    vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (widow-rand-vector-method-9 () none 9)
    (widow-rand-vector-method-10 () none 10)
    )
  )
|#

#|
(deftype widow-oscillator (structure)
  ((target  vector :inline :offset-assert 0)
   (value   vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (accel   float          :offset-assert 48)
   (max-vel float          :offset-assert 52)
   (damping float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (widow-oscillator-method-9 () none 9)
    (widow-oscillator-method-10 () none 10)
    )
  )
|#

#|
(deftype widow-shot (guard-shot)
  ()
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  (:methods
    )
  )
|#

#|
(deftype widow (process-drawable)
  ((bomb                         UNKNOWN            8       :offset-assert 196)
   (next-launch                  int32                      :offset-assert 260)
   (launch-dest                  vector             :inline :offset-assert 268)
   (next-jumper                  int32                      :offset-assert 284)
   (ammos                        UNKNOWN            2       :offset-assert 292)
   (ammo-timers                  UNKNOWN            2       :offset-assert 308)
   (bomb-hits                    int32                      :offset-assert 324)
   (circle-center                vector             :inline :offset-assert 332)
   (theta                        cam-float-seeker   :inline :offset-assert 348)
   (traj                         trajectory         :inline :offset-assert 380)
   (osc                          widow-oscillator   :inline :offset-assert 428)
   (noise-osc                    widow-oscillator   :inline :offset-assert 492)
   (rand-vec                     widow-rand-vector  :inline :offset-assert 556)
   (attack-from-high-deg         basic                      :offset-assert 604)
   (which-gun                    int32                      :offset-assert 608)
   (which-pod                    int32                      :offset-assert 612)
   (left-cover-angle             widow-float-seeker :inline :offset-assert 616)
   (right-cover-angle            widow-float-seeker :inline :offset-assert 644)
   (left-cover-jm                basic                      :offset-assert 672)
   (right-cover-jm               basic                      :offset-assert 676)
   (drill-speed                  cam-float-seeker   :inline :offset-assert 680)
   (drill-angle                  float                      :offset-assert 704)
   (left-drill-jm                basic                      :offset-assert 708)
   (right-drill-jm               basic                      :offset-assert 712)
   (flying                       basic                      :offset-assert 716)
   (previous-anim                int32                      :offset-assert 720)
   (launched-a-bomb              basic                      :offset-assert 724)
   (old-bomb-hits                int32                      :offset-assert 728)
   (catwalk                      UNKNOWN            8       :offset-assert 732)
   (heart                        uint64                     :offset-assert 796)
   (pod                          uint64                     :offset-assert 804)
   (baron                        uint32                     :offset-assert 812)
   (drill-spark-part             basic                      :offset-assert 816)
   (drill-spark-part-alt         basic                      :offset-assert 820)
   (extract-stone-time           time-frame                     :offset-assert 828)
   (extract-stone-part           basic                      :offset-assert 836)
   (insert-stone-time            time-frame                     :offset-assert 844)
   (insert-stone-part            basic                      :offset-assert 852)
   (land-part                    basic                      :offset-assert 856)
   (green-charge-part            basic                      :offset-assert 860)
   (green-fire-part              basic                      :offset-assert 864)
   (lightning                    UNKNOWN            5       :offset-assert 868)
   (stop-catwalk-sound           basic                      :offset-assert 888)
   (catwalk-sound                uint32                     :offset-assert 892)
   (drill-sound                  uint32                     :offset-assert 896)
   (drill-sound-playing          basic                      :offset-assert 900)
   (drill-sweeten-sound          uint32                     :offset-assert 904)
   (drill-sweeten-sound-playing  basic                      :offset-assert 908)
   (movie-handle                 uint64                     :offset-assert 916)
   (tilt                         cam-float-seeker   :inline :offset-assert 924)
   (targetted-catwalk            int32                      :offset-assert 948)
   (hover-sound                  uint32                     :offset-assert 952)
   (hover-sound-playing          basic                      :offset-assert 956)
   (shake-sound                  uint32                     :offset-assert 960)
   (shake-sound-playing          basic                      :offset-assert 964)
   (hud                          uint64                     :offset-assert 972)
   (last-want-stone-talker       int8                       :offset-assert 980)
   (last-general-flying-talker   int8                       :offset-assert 981)
   (last-launch-droids-talker    int8                       :offset-assert 982)
   (last-launch-bombs-talker     int8                       :offset-assert 983)
   (last-shoot-gun-talker        int8                       :offset-assert 984)
   (last-stone-charge-up-talker  int8                       :offset-assert 985)
   (last-after-stone-shot-talker int8                       :offset-assert 986)
   (last-leave-perch-talker      int8                       :offset-assert 987)
   (last-damaged-talker          int8                       :offset-assert 988)
   (kicked-bombs                 int8                       :offset-assert 989)
   (launch-stages-completed      int8                       :offset-assert 990)
   (current-shoot-stage          int16                      :offset-assert 992)
   (last-gun-hit-stage           int16                      :offset-assert 994)
   (gun-hits                     int16                      :offset-assert 996)
   (last-attack-id               uint32                     :offset-assert 1000)
   )
  :method-count-assert 47
  :size-assert         #x3f0
  :flag-assert         #x2f037003f0
  (:methods
    (widow-method-20 () none 20)
    (widow-method-21 () none 21)
    (widow-method-22 () none 22)
    (widow-method-23 () none 23)
    (widow-method-24 () none 24)
    (widow-method-25 () none 25)
    (widow-method-26 () none 26)
    (widow-method-27 () none 27)
    (widow-method-28 () none 28)
    (widow-method-29 () none 29)
    (widow-method-30 () none 30)
    (widow-method-31 () none 31)
    (widow-method-32 () none 32)
    (widow-method-33 () none 33)
    (widow-method-34 () none 34)
    (widow-method-35 () none 35)
    (widow-method-36 () none 36)
    (widow-method-37 () none 37)
    (widow-method-38 () none 38)
    (widow-method-39 () none 39)
    (widow-method-40 () none 40)
    (widow-method-41 () none 41)
    (widow-method-42 () none 42)
    (widow-method-43 () none 43)
    (widow-method-44 () none 44)
    (widow-method-45 () none 45)
    (widow-method-46 () none 46)
    )
  )
|#

#|
(deftype baron-pod (process-drawable)
  ((red-tip-change-time time-frame  :offset-assert 196)
   (alt-red-tip-on      basic   :offset-assert 204)
   (blink-time          time-frame  :offset-assert 212)
   (blink-mask          int32   :offset-assert 220)
   (has-stone           basic   :offset-assert 224)
   )
  :method-count-assert 22
  :size-assert         #xe8
  :flag-assert         #x16007000e8
  (:methods
    (idle () _type_ :state 20)
    (baron-pod-method-21 () none 21)
    )
  )
|#

#|
(deftype tomb-boss-bridge (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern baron-pod-init-by-other function)
;; (define-extern widow-want-stone-talker function)
;; (define-extern widow-general-flying-talker function)
;; (define-extern widow-launch-droids-talker function)
;; (define-extern widow-launch-bombs-talker function)
;; (define-extern widow-shoot-gun-talker function)
;; (define-extern widow-stone-charge-up-talker function)
;; (define-extern widow-after-stone-shot-talker function)
;; (define-extern widow-leave-perch-talker function)
;; (define-extern widow-damaged-talker function)
;; (define-extern widow-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow-extras                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-boss-catwalk (process-drawable)
  ((which-look int32  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    (shatter () _type_ :state 20)
    (idle () _type_ :state 21)
    (tomb-boss-catwalk-method-22 () none 22)
    )
  )
|#

#|
(deftype tomb-boss-catwalk-main (tomb-boss-catwalk)
  ()
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    )
  )
|#

#|
(deftype widow-bomb (process-focusable)
  ((traj                  trajectory     :inline :offset-assert 204)
   (explode-part          basic                  :offset-assert 244)
   (trail-part            basic                  :offset-assert 248)
   (warning-glow-part     basic                  :offset-assert 252)
   (warning-spark-part    basic                  :offset-assert 256)
   (impact                impact-control :inline :offset-assert 268)
   (which-trajectory      int32                  :offset-assert 348)
   (next-countdown-tick   uint64                 :offset-assert 356)
   (skid-part             basic                  :offset-assert 364)
   (x-rotate              float                  :offset-assert 368)
   (y-rotate              float                  :offset-assert 372)
   (spin-jm               basic                  :offset-assert 376)
   (firework-sound-played basic                  :offset-assert 380)
   (steam-sound           uint32                 :offset-assert 384)
   (launch                vector         :inline :offset-assert 396)
   (launch-pos            vector         :inline :offset-assert 412)
   (fizzle-timer          uint64                 :offset-assert 428)
   )
  :method-count-assert 35
  :size-assert         #x1b8
  :flag-assert         #x23014001b8
  (:methods
    (freefall () _type_ :state 27)
    (back-atcha () _type_ :state 28)
    (explode () _type_ :state 29)
    (smoke () _type_ :state 30)
    (idle () _type_ :state 31)
    (widow-bomb-method-32 () none 32)
    (widow-bomb-method-33 () none 33)
    (widow-bomb-method-34 () none 34)
    )
  )
|#

#|
(deftype heart-mar (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype tomb-boss-pillar (process-drawable)
  ((explode-part    basic   :offset-assert 196)
   (segs-shot       int32   :offset-assert 200)
   (last-pillar-hit uint64  :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (idle () _type_ :state 20)
    (break-it () _type_ :state 21)
    (broken () _type_ :state 22)
    )
  )
|#

#|
(deftype tomb-boss-firepot (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (break-it () _type_ :state 21)
    (broken () _type_ :state 22)
    )
  )
|#

;; (define-extern tomb-boss-catwalk-init-by-other function)
;; (define-extern widow-bomb-handler function)
;; (define-extern widow-bomb-back-handler function)
;; (define-extern widow-bomb-reaction function)
;; (define-extern widow-bomb-init-by-other function)
;; (define-extern heart-mar-init-by-other function)
;; (define-extern damage-pillar function)
;; (define-extern tomb-boss-pillar-shrink-collision function)
;; (define-extern tomb-boss-firepot-shrink-collision function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow-more-extras              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-boss-debris (process-drawable)
  ((y-velocity  float              :offset-assert 196)
   (floor       float              :offset-assert 200)
   (sound-floor float              :offset-assert 204)
   (rot         quaternion :inline :offset-assert 220)
   (look        int32              :offset-assert 236)
   )
  :method-count-assert 22
  :size-assert         #xf4
  :flag-assert         #x16008000f4
  (:methods
    (die () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype cave-in-master (process-drawable)
  ((prev-points UNKNOWN 100 :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #x258
  :flag-assert         #x1601e00258
  (:methods
    (idle () _type_ :state 20)
    (wait () _type_ :state 21)
    )
  )
|#

;; (define-extern tomb-boss-debris-init-by-other function)
;; (define-extern cavein-get-random-point function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern widow-common function)
;; (define-extern widow-calc-position function)
;; (define-extern widow-calc-target-position function)
;; (define-extern widow-calc-root-from-osc function)
;; (define-extern widow-next-pod function)
;; (define-extern widow-pod-position function)
;; (define-extern spydroid-setup function)
;; (define-extern widow-bomb-setup function)
;; (define-extern spydroid-launch function)
;; (define-extern widow-bomb-launch function)
;; (define-extern widow-give-ammo function)
;; (define-extern widow-bomb-slots-full function)
;; (define-extern widow-debug function)
;; (define-extern widow-cleanup-launch-anim function)
;; (define-extern widow-last-bomb-anim function)
;; (define-extern widow-flying-anim function)
;; (define-extern widow-kaboom-check function)
;; (define-extern hover-seek-under-stage-3 state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widow2                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; monster-frog                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype monster-frog (nav-enemy)
  ()
  :method-count-assert 181
  :size-assert         #x25c
  :flag-assert         #xb501e0025c
  (:methods
    (attack () _type_ :state 178)
    (attack-recover () _type_ :state 179)
    (turn () _type_ :state 180)
    )
  )
|#

;; (define-extern *monster-frog-nav-enemy-info* nav-enemy-info)
;; (define-extern monster-frog-hop-slow-code function)
;; (define-extern monster-frog-hop-fast-code function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-scenes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern attach-pod-part function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; com-elevator                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype com-elevator (elevator)
  ((camera-startup      UNKNOWN 2 :offset-assert 364)
   (use-camera-startup? UNKNOWN 2 :offset-assert 396)
   (sound-id            uint32    :offset-assert 404)
   )
  :method-count-assert 50
  :size-assert         #x19c
  :flag-assert         #x320120019c
  (:methods
    (com-elevator-method-49 () none 49)
    )
  )
|#

#|
(deftype tomb-trans-elevator (com-elevator)
  ()
  :method-count-assert 50
  :size-assert         #x1a0
  :flag-assert         #x32012001a0
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palshaft-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype palshaft-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern palshaft-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-bbush                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-ring (process-drawable)
  ((last-target-pos       vector        :inline :offset-assert 204)
   (keep-part-track-alive symbol                :offset-assert 220) ;; guessed by decompiler
   (part-track            uint64                :offset-assert 228) ;; handle
   (rot-y                 float                 :offset-assert 236)
   (cyl                   cylinder-flat :inline :offset-assert 252)
   )
  :method-count-assert 24
  :size-assert         #x128
  :flag-assert         #x1800b00128
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (race-ring-method-22 () none 22)
    (race-ring-method-23 () none 23)
    )
  )
|#

#|
(deftype bb-ring-info (structure)
  ((time      time-frame         :offset-assert 0)
   (start-pos vector :inline :offset-assert 16)
   (rotation  float          :offset-assert 32)
   (rings     basic          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype bush-collect (process-drawable)
  ((minimap   connection-minimap  :offset-assert 196)
   (trans-y   float               :offset-assert 200)
   (beep-time float               :offset-assert 204)
   )
  :method-count-assert 24
  :size-assert         #xd4
  :flag-assert         #x18006000d4
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (bush-collect-method-22 () none 22)
    (bush-collect-method-23 () none 23)
    )
  )
|#

#|
(deftype burning-bush-collection-info (structure)
  ((pos     vector             :inline :offset-assert 0)
   (handle  uint64                     :offset-assert 16)
   (minimap connection-minimap         :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x1c
  :flag-assert         #xa0000001c
  (:methods
    (burning-bush-collection-info-method-9 () none 9)
    )
  )
|#

#|
(deftype bb-collection-info (structure)
  ((user-data uint32  :offset-assert 0)
   (time      time-frame  :offset-assert 8)
   (colls     basic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype burning-bush-get-on-info (structure)
  ((trans        vector     :inline :offset-assert 0)
   (quat         quaternion :inline :offset-assert 16)
   (camera-trans vector     :inline :offset-assert 32)
   (camera-rot   UNKNOWN    9       :offset-assert 48)
   (time         float              :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

;; (define-extern race-ring-set-particle-rotation-callback function) ;; (function part-tracker none)
;; (define-extern race-ring-init-by-other function)
;; (define-extern race-ring-spawn function)
;; (define-extern *bb-ring-info* array)
;; (define-extern *city-race-ring-edit-info* object)
;; (define-extern bush-collect-init-by-other function)
;; (define-extern bush-collect-dark-eco-init-by-other function)
;; (define-extern bush-collect-homing-beacon-init-by-other function)
;; (define-extern bush-collect-spawn function)
;; (define-extern bush-collect-homing-beacon-spawn function)
;; (define-extern bush-collect-dark-eco-spawn function)
;; (define-extern *bb-collection-info* array)
;; (define-extern *city-bb-collection-edit-info* object)
;; (define-extern *burning-bush-get-on-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; delivery-task                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype krew-package (process-drawable)
  ((attach-object uint64  :offset-assert 196)
   (scale         float   :offset-assert 204)
   )
  :method-count-assert 24
  :size-assert         #xd4
  :flag-assert         #x18006000d4
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (krew-package-method-22 () none 22)
    (krew-package-method-23 () none 23)
    )
  )
|#

;; (define-extern krew-package-init-by-other function)
;; (define-extern krew-package-spawn function)
;; (define-extern delivery-task-setup-ambush-1 function)
;; (define-extern delivery-task-setup-ambush-2 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; portrun                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-port-run-mine-info (structure)
  ((handle   uint64  :offset-assert 0)
   (pos1-x   float   :offset-assert 8)
   (pos1-y   float   :offset-assert 12)
   (pos1-z   float   :offset-assert 16)
   (type     uint32  :offset-assert 20)
   (pos2-x   float   :offset-assert 24)
   (pos2-y   float   :offset-assert 28)
   (pos2-z   float   :offset-assert 32)
   (speed    float   :offset-assert 36)
   (offset   float   :offset-assert 40)
   (center-x float   :offset-assert 8)
   (center-y float   :offset-assert 12)
   (center-z float   :offset-assert 16)
   (radius   float   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype ctyport-mine (process-drawable)
  ((info        city-port-run-mine-info         :offset-assert 196)
   (base-height float                           :offset-assert 200)
   (center      vector                  :inline :offset-assert 204)
   (time-skew   uint64                          :offset-assert 220)
   (period      float                           :offset-assert 228)
   (trans-y     float                           :offset-assert 232)
   (speed-y     float                           :offset-assert 236)
   (acc-y       float                           :offset-assert 240)
   (beep        basic                           :offset-assert 244)
   (beep-time   time-frame                          :offset-assert 252)
   (beep-color  vector                  :inline :offset-assert 268)
   )
  :method-count-assert 24
  :size-assert         #x120
  :flag-assert         #x1800a00120
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (fall () _type_ :state 22)
    (ctyport-mine-method-23 () none 23)
    )
  )
|#

#|
(deftype ctyport-spy (process-drawable)
  ((trans-y float  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype ctyport-cargo (process-focusable)
  ((minimap connection-minimap  :offset-assert 200)
   (trans-y float               :offset-assert 204)
   (speed-y float               :offset-assert 208)
   )
  :method-count-assert 31
  :size-assert         #xd8
  :flag-assert         #x1f006000d8
  (:methods
    (idle () _type_ :state 27)
    (focus-camera () _type_ :state 28)
    (die () _type_ :state 29)
    (ctyport-cargo-method-30 () none 30)
    )
  )
|#

#|
(deftype city-port-run-cargo-info (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern check-cargo-piece-ground function)
;; (define-extern *city-port-run-mine-info* array)
;; (define-extern ctyport-mine-init-by-other function)
;; (define-extern ctyport-mine-spawn function)
;; (define-extern ctyport-spy-init-by-other function)
;; (define-extern ctyport-spy-spawn function)
;; (define-extern *city-port-position* object)
;; (define-extern *ctyport-cargo-exploder-params* joint-exploder-static-params)
;; (define-extern ctyport-cargo-init-by-other function)
;; (define-extern ctyport-cargo-spawn function)
;; (define-extern *city-port-run-cargo-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctygenb-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctygenb-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; helldog                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype helldog (hellcat)
  ((current-level basic  :offset-assert 1076)
   )
  :method-count-assert 159
  :size-assert         #x43c
  :flag-assert         #x9f03c0043c
  (:methods
    )
  )
|#

;; (define-extern *helldog-constants* object)
;; (define-extern *helldog-front-turret-control-info* object)
;; (define-extern *helldog-top-turret-control-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dummy                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpath-control-frame (UNKNOWN)
  ((time      float  :offset-assert 0)
   (path-pos  uint8  :offset-assert 4)
   (command   uint8  :offset-assert 5)
   (move-type uint8  :offset-assert 6)
   (path-num  uint8  :offset-assert 7)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype tpath-info (UNKNOWN)
  ((s-time       float     :offset-assert 0)
   (num          uint16    :offset-assert 4)
   (ref-time-num int16     :offset-assert 6)
   (score        int16     :offset-assert 8)
   (flags        uint8     :offset-assert 10)
   (num-anims    uint8     :offset-assert 11)
   (bonus-time   float     :offset-assert 12)
   (list         basic     :offset-assert 16)
   (anims        UNKNOWN 3 :offset-assert 20)
   (anim1        uint32    :offset-assert 20)
   (anim2        uint32    :offset-assert 24)
   (anim3        uint32    :offset-assert 28)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype gun-dummy (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-b (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-c (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-big (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-gold (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-dummy-peace (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-cit-a (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-cit-b (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-cit-c (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gun-cit-d (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-gungame-piece-ground function)
;; (define-extern *tpath-rand* object)
;; (define-extern *gun-dummy-a-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-dummy-b-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-dummy-c-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-dummy-big-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-dummy-gold-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-dummy-peace-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-cit-a-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-cit-b-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-cit-c-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-cit-d-exploder-params* joint-exploder-static-params)
;; (define-extern gun-dummy-init-by-other function)
;; (define-extern gun-dummy-a-init-by-other function)
;; (define-extern gun-dummy-b-init-by-other function)
;; (define-extern gun-dummy-c-init-by-other function)
;; (define-extern gun-dummy-big-init-by-other function)
;; (define-extern gun-dummy-gold-init-by-other function)
;; (define-extern gun-dummy-peace-init-by-other function)
;; (define-extern gun-cit-a-init-by-other function)
;; (define-extern gun-cit-b-init-by-other function)
;; (define-extern gun-cit-c-init-by-other function)
;; (define-extern gun-cit-d-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-data                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gungame-crate (UNKNOWN)
  ((pos   vector :inline :offset-assert 0)
   (pos-x float          :offset-assert 0)
   (pos-y float          :offset-assert 4)
   (pos-z float          :offset-assert 8)
   (angle float          :offset-assert 12)
   (ammo  int32          :offset-assert 16)
   (num   uint32         :offset-assert 20)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *entrance-gungame-crates-pos* array)
;; (define-extern *gungame-red-crates-pos* array)
;; (define-extern *gungame-yellow-crates-pos* array)
;; (define-extern *gungame-blue-crates-pos* array)
;; (define-extern *gungame-peace-crates-pos* array)
;; (define-extern *red-training-path-global-info* array)
;; (define-extern *yellow-training-path-global-info* array)
;; (define-extern *blue-training-path-global-info* array)
;; (define-extern *peace-training-path-global-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype training-path (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype training-manager (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype gungame-door (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern yellow-training state)
;; (define-extern *yellow-training-path-combo-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gungame-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mincan-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim-mincan (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

#|
(deftype mincan-lighthouse-lens (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (erect () _type_ :state 21)
    )
  )
|#

#|
(deftype mincan-lighthouse (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (erect () _type_ :state 21)
    )
  )
|#

#|
(deftype mincan-lens (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (closed () _type_ :state 20)
    (open () _type_ :state 21)
    )
  )
|#

#|
(deftype mincan-cogs (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern ripple-for-water-anim-mincan ripple-wave-set)
;; (define-extern mincan-lighthouse-lens-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; canyon-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern canyon-draw-beam function)
;; (define-extern canyon-draw-beam-lens function)
;; (define-extern canyon-draw-beam-statue function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vinroom-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vinroom-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-vinroom-sphere function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vinroom-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vin-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

;; (define-extern check-drop-level-vinroom-piss-drop-userdata function)
;; (define-extern vin-rescue-yellow-shot function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vinroom-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vin-turbine (process-drawable)
  ((dont-draw-outside? basic          :offset-assert 196)
   (lightning-timer    uint64         :offset-assert 204)
   (outside-plane      plane  :inline :offset-assert 220)
   (lightning-plane    plane  :inline :offset-assert 236)
   )
  :method-count-assert 22
  :size-assert         #x100
  :flag-assert         #x1600800100
  (:methods
    (idle () _type_ :state 20)
    (dormant () _type_ :state 21)
    )
  )
|#

#|
(deftype vin-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctygena-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctygena-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype citytest-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neon-praxis-part               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-neon-praxis (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *praxis* array)
;; (define-extern *praxis-backing* array)
;; (define-extern *city-neon-praxis-group-ids* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctypal-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctypal-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-ctypal-drop-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctypal-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim-ctypal (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

#|
(deftype palace-door (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype ctypal-broke-wall (process-drawable)
  ((ent basic  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (idle () _type_ :state 20)
    (done () _type_ :state 21)
    )
  )
|#

#|
(deftype ctypal-baron-statue-broken (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern ripple-for-water-anim-ctypal ripple-wave-set)
;; (define-extern ripple-ctypal-smlground-pool ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-shoot-block              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype under-block-spawner (basic)
  ((col            int8    :offset-assert 4)
   (row            int8    :offset-assert 5)
   (active-handle  uint64  :offset-assert 8)
   (waiting-handle uint64  :offset-assert 16)
   (exploded-time  time-frame  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype under-block-slot (basic)
  ((col int8  :offset-assert 4)
   (row int8  :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype under-block-puzzle (basic)
  ((auto-unlock?           basic          :offset-assert 4)
   (cells-wide             int8           :offset-assert 8)
   (cells-tall             int8           :offset-assert 9)
   (last-block-id          int8           :offset-assert 10)
   (slot-mask              uint8          :offset-assert 11)
   (slot-mask-full         uint8          :offset-assert 12)
   (prev-special-attack-id uint32         :offset-assert 16)
   (orient-ry              float          :offset-assert 20)
   (spawners               basic          :offset-assert 24)
   (slots                  basic          :offset-assert 28)
   (cells                  uint32         :offset-assert 32)
   (pulse-ops              uint32         :offset-assert 36)
   (origin                 vector :inline :offset-assert 48)
   (local-to-world         matrix :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

#|
(deftype under-block (process-focusable)
  ((puzzle             basic          :offset-assert 200)
   (my-parent          uint32         :offset-assert 204)
   (prev-attack-id     uint32         :offset-assert 208)
   (spawner-id         int8           :offset-assert 212)
   (my-id              int8           :offset-assert 213)
   (col                int8           :offset-assert 214)
   (row                int8           :offset-assert 215)
   (prev-col           int8           :offset-assert 216)
   (prev-row           int8           :offset-assert 217)
   (move-dir-x         int8           :offset-assert 218)
   (move-dir-z         int8           :offset-assert 219)
   (pulse-op           int8           :offset-assert 220)
   (pulse-pc           int8           :offset-assert 221)
   (pulse-ctr          int8           :offset-assert 222)
   (flags              uint64         :offset-assert 228)
   (activated-time     time-frame         :offset-assert 236)
   (rot-axis           vector :inline :offset-assert 252)
   (away-from-focal-pt vector :inline :offset-assert 268)
   )
  :method-count-assert 51
  :size-assert         #x120
  :flag-assert         #x3300a00120
  (:methods
    (waiting () _type_ :state 27)
    (rise-up () _type_ :state 28)
    (follow () _type_ :state 29)
    (idle () _type_ :state 30)
    (active () _type_ :state 31)
    (flip () _type_ :state 32)
    (rock () _type_ :state 33)
    (sink-partially () _type_ :state 34)
    (sunk-partially () _type_ :state 35)
    (victory () _type_ :state 36)
    (beaten () _type_ :state 37)
    (fall () _type_ :state 38)
    (explode () _type_ :state 39)
    (die-fast () _type_ :state 40)
    (under-block-method-41 () none 41)
    (under-block-method-42 () none 42)
    (under-block-method-43 () none 43)
    (under-block-method-44 () none 44)
    (under-block-method-45 () none 45)
    (under-block-method-46 () none 46)
    (under-block-method-47 () none 47)
    (under-block-method-48 () none 48)
    (under-block-method-49 () none 49)
    (under-block-method-50 () none 50)
    )
  )
|#

#|
(deftype under-shoot-block (process-drawable)
  ((puzzle        basic   :offset-assert 196)
   (actor-group   uint32  :offset-assert 200)
   (allow-unlock? basic   :offset-assert 204)
   )
  :method-count-assert 29
  :size-assert         #xe0
  :flag-assert         #x1d006000e0
  (:methods
    (idle () _type_ :state 20)
    (victory-locked () _type_ :state 21)
    (victory () _type_ :state 22)
    (beaten () _type_ :state 23)
    (under-shoot-block-method-24 () none 24)
    (under-shoot-block-method-25 () none 25)
    (under-shoot-block-method-26 () none 26)
    (under-shoot-block-method-27 () none 27)
    (under-shoot-block-method-28 () none 28)
    )
  )
|#

;; (define-extern *under-block-puzzles* array)
;; (define-extern *under-shoot-block-exploder-params* joint-exploder-static-params)
;; (define-extern under-block-event-handler function)
;; (define-extern cshape-reaction-under-block function)
;; (define-extern under-block-init-by-other function)
;; (define-extern under-shoot-block-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; underb-master                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype under-warp (process-drawable)
  ((interp float  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:methods
    (idle () _type_ :state 20)
    (die-fast () _type_ :state 21)
    (die-fast () _type_ :state 22)
    )
  )
|#

#|
(deftype underb-master (process)
  ((warp-handle           uint64  :offset-assert 124)
   (tank-handle           uint64  :offset-assert 132)
   (underwater-time       time-frame  :offset-assert 140)
   (last-air-beep-time    time-frame  :offset-assert 148)
   (ambient-sound-id      uint32  :offset-assert 156)
   (air-supply            float   :offset-assert 160)
   (air-charge-up?        basic   :offset-assert 164)
   (under-water-pitch-mod float   :offset-assert 168)
   (big-room-entered      basic   :offset-assert 172)
   (big-room-timer        uint64  :offset-assert 180)
   (under-plat-player-on  basic   :offset-assert 188)
   (under-plat-is-up      basic   :offset-assert 192)
   )
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:methods
    (underb-master-method-9 () none 9)
    (underb-master-method-10 () none 10)
    (underb-master-method-11 () none 11)
    (underb-master-method-12 () none 12)
    (underb-master-method-13 () none 13)
    (idle () _type_ :state 14)
    (big-room-player-under () _type_ :state 15)
    (big-room-player-plat () _type_ :state 16)
    (underb-master-method-17 () none 17)
    (big-room-player-above () _type_ :state 18)
    (big-room-player-falling () _type_ :state 19)
    (big-room-player-exiting () _type_ :state 20)
    (big-room-player-done () _type_ :state 21)
    (underb-master-method-22 () none 22)
    (underb-master-method-23 () none 23)
    )
  )
|#

#|
(deftype under-locking (process-drawable)
  ((id                  int8    :offset-assert 196)
   (up-y                float   :offset-assert 200)
   (down-y              float   :offset-assert 204)
   (mode                uint64  :offset-assert 212)
   (which-reminder?     basic   :offset-assert 220)
   (spooled-sound-id    uint32  :offset-assert 224)
   (draining-part       basic   :offset-assert 228)
   (actor-group         uint32  :offset-assert 232)
   (spooled-sound-delay int32   :offset-assert 236)
   (last-reminder-time  time-frame  :offset-assert 252)
   )
  :method-count-assert 24
  :size-assert         #x108
  :flag-assert         #x1800900108
  (:methods
    (startup () _type_ :state 20)
    (active () _type_ :state 21)
    (filling () _type_ :state 22)
    (draining () _type_ :state 23)
    )
  )
|#

#|
(deftype water-anim-under (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    )
  )
|#

;; (define-extern under-warp-init-by-other function)
;; (define-extern *underb-master* object)
;; (define-extern underb-master-event-handler function)
;; (define-extern underb-master-post function)
;; (define-extern underb-master-init-by-other function)
;; (define-extern underb-login function)
;; (define-extern underb-deactivate function)
;; (define-extern underb-activate function)
;; (define-extern ripple-for-water-anim-under ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bubbler (process-drawable)
  ((rod-of-god-scale   float   :offset-assert 196)
   (ambient-id         uint32  :offset-assert 200)
   (last-recharge-time time-frame  :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd8
  :flag-assert         #x16006000d8
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    )
  )
|#

#|
(deftype under-rise-plat (process-drawable)
  ((up-y           float   :offset-assert 196)
   (down-y         float   :offset-assert 200)
   (delta-y        float   :offset-assert 204)
   (up-threshold   float   :offset-assert 208)
   (down-threshold float   :offset-assert 212)
   (last-ridden    uint64  :offset-assert 220)
   (ridden         basic   :offset-assert 228)
   (rider-started  basic   :offset-assert 232)
   (extra-id       int32   :offset-assert 236)
   )
  :method-count-assert 26
  :size-assert         #xf4
  :flag-assert         #x1a008000f4
  (:methods
    (idle-up () _type_ :state 20)
    (wait-up () _type_ :state 21)
    (going-down () _type_ :state 22)
    (idle-down () _type_ :state 23)
    (wait-down () _type_ :state 24)
    (going-up () _type_ :state 25)
    )
  )
|#

#|
(deftype under-buoy-base (process-drawable)
  ((release         basic  :offset-assert 196)
   (open-anim-frame float  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:methods
    (idle () _type_ :state 20)
    (opened () _type_ :state 21)
    )
  )
|#

#|
(deftype under-buoy-chain (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-buoy-plat (rigid-body-platform)
  ((orig-trans     vector :inline :offset-assert 380)
   (surface-height float          :offset-assert 396)
   (anchor-point   vector :inline :offset-assert 412)
   (base           uint32         :offset-assert 428)
   )
  :method-count-assert 59
  :size-assert         #x1b4
  :flag-assert         #x3b014001b4
  (:methods
    (waiting () _type_ :state 57)
    (running () _type_ :state 58)
    )
  )
|#

#|
(deftype under-mine-chain-physics (chain-physics)
  ()
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  (:methods
    )
  )
|#

(deftype under-mine (process-drawable)
  ((chain             chain-physics  :offset-assert 200)
   (chain-initialized symbol  :offset-assert 204)
   (main-mod          joint-mod  :offset-assert 208)
   (head-mod          joint-mod  :offset-assert 212)
   )
  :method-count-assert 22
  :size-assert         #xd8
  :flag-assert         #x16006000d8
  (:methods
    (explode () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )

#|
(deftype under-lift (elevator)
  ((sound-id uint32  :offset-assert 364)
   )
  :method-count-assert 50
  :size-assert         #x174
  :flag-assert         #x3201000174
  (:methods
    (under-lift-method-49 () none 49)
    )
  )
|#

#|
(deftype under-break-door (process-focusable)
  ((anim         basic  :offset-assert 200)
   (art-name     basic  :offset-assert 204)
   (collide-mesh int32  :offset-assert 208)
   )
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:methods
    (hit () _type_ :state 27)
    (idle () _type_ :state 28)
    )
  )
|#

#|
(deftype under-seaweed-a (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-seaweed-b (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-seaweed-c (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-seaweed-d (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern under-rise-plat-event-handler function)
;; (define-extern under-buoy-base-init-by-other function)
;; (define-extern under-buoy-chain-init-by-other function)
;; (define-extern *under-buoy-plat-platform-constants* object)
;; (define-extern *under-mine-chain-setup* array)
;; (define-extern *under-mine-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-sig-obs                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype under-plat-shoot (plat)
  ((draw-test-script    basic          :offset-assert 320)
   (incoming-attack-id  uint32         :offset-assert 324)
   (angle-flip          float          :offset-assert 328)
   (angle-flip-vel      float          :offset-assert 332)
   (state-flip          uint32         :offset-assert 336)
   (time-flip           uint32         :offset-assert 340)
   (disable-track-under basic          :offset-assert 344)
   (dest-angle          float          :offset-assert 348)
   (on-shake            basic          :offset-assert 352)
   (hint-count          float          :offset-assert 356)
   (hit-time            time-frame         :offset-assert 364)
   (knocked-sound-time  time-frame         :offset-assert 364)
   (axe-flip            vector :inline :offset-assert 380)
   )
  :method-count-assert 39
  :size-assert         #x190
  :flag-assert         #x2701100190
  ;; field draw-test-script uses ~A with a signed load
  (:methods
    (die-falling () _type_ :state 37)
    (dormant () _type_ :state 38)
    )
  )
|#

#|
(deftype under-break-floor (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (die-fast () _type_ :state 22)
    )
  )
|#

#|
(deftype under-break-wall (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )
|#

#|
(deftype under-break-bridge (process-drawable)
  ((bridge-id int8  :offset-assert 196)
   )
  :method-count-assert 23
  :size-assert         #xc9
  :flag-assert         #x17005000c9
  (:methods
    (idle () _type_ :state 20)
    (broken () _type_ :state 21)
    (die () _type_ :state 22)
    )
  )
|#

#|
(deftype under-int-door (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle-closed () _type_ :state 20)
    (open () _type_ :state 21)
    (idle-open () _type_ :state 22)
    )
  )
|#

#|
(deftype under-plat-long (base-plat)
  ((sync       sync-eased :inline :offset-assert 268)
   (move-start vector     :inline :offset-assert 316)
   (move-end   vector     :inline :offset-assert 332)
   )
  :method-count-assert 35
  :size-assert         #x160
  :flag-assert         #x2300e00160
  (:methods
    (idle () _type_ :state 34)
    )
  )
|#

#|
(deftype under-plat-wall (process-drawable)
  ((extended-amount float               :offset-assert 196)
   (in-trans        vector      :inline :offset-assert 204)
   (out-trans       vector      :inline :offset-assert 220)
   (sync            sync-paused :inline :offset-assert 236)
   )
  :method-count-assert 21
  :size-assert         #x108
  :flag-assert         #x1500900108
  (:methods
    (active () _type_ :state 20)
    )
  )
|#

#|
(deftype under-pipe-growls (process-drawable)
  ((volume             float   :offset-assert 196)
   (desired-volume     float   :offset-assert 200)
   (volume-seek-speed  float   :offset-assert 204)
   (approach-sound-id  uint32  :offset-assert 208)
   (approach-play-time time-frame  :offset-assert 212)
   )
  :method-count-assert 23
  :size-assert         #xe8
  :flag-assert         #x17007000e8
  (:methods
    (block-puzzle () _type_ :state 20)
    (block-puzzle-fade () _type_ :state 21)
    (intro-shooting () _type_ :state 22)
    )
  )
|#

;; (define-extern cshape-reaction-under-plat-shoot function)
;; (define-extern *under-break-floor-exploder-params* joint-exploder-static-params)
;; (define-extern under-pipe-growls-post function)
;; (define-extern under-pipe-growls-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-laser                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype under-laser-info (basic)
  ((options              uint8  :offset-assert 4)
   (laser-radius         float  :offset-assert 8)
   (laser-move-dist      float  :offset-assert 12)
   (shadow-top-y         float  :offset-assert 16)
   (shadow-height        float  :offset-assert 20)
   (shadow-radius-adjust float  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype under-laser-shadow (process-drawable)
  ((info            basic          :offset-assert 196)
   (trans-xz-offset vector :inline :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :flag-assert         #x15006000e0
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-laser-slave (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype under-laser (process-drawable)
  ((info               basic              :offset-assert 196)
   (id                 int8               :offset-assert 200)
   (lightning          basic              :offset-assert 204)
   (draw-test-script   basic              :offset-assert 208)
   (sync               sync-eased :inline :offset-assert 212)
   (laser-dir          vector     :inline :offset-assert 268)
   (slave-trans-offset vector     :inline :offset-assert 284)
   (zero-pos           vector     :inline :offset-assert 300)
   (one-pos            vector     :inline :offset-assert 316)
   )
  :method-count-assert 23
  :size-assert         #x150
  :flag-assert         #x1700d00150
  ;; field draw-test-script uses ~A with a signed load
  (:methods
    (dormant () _type_ :state 20)
    (idle () _type_ :state 21)
    (under-laser-method-22 () none 22)
    )
  )
|#

;; (define-extern *under-laser-infos* array)
;; (define-extern under-laser-shadow-init-by-other function)
;; (define-extern under-laser-slave-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pipe-grunt                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pipe-grunt (grunt)
  ((pipe-front vector :inline :offset-assert 700)
   (pipe-dir   vector :inline :offset-assert 716)
   )
  :method-count-assert 187
  :size-assert         #x2e0
  :flag-assert         #xbb026002e0
  (:methods
    (pipe-grunt-method-186 () none 186)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jellyfish                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jellyfish-formation (hover-formation)
  ()
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  (:methods
    )
  )
|#

#|
(deftype jellyfish-chain-physics (chain-physics)
  ()
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  (:methods
    )
  )
|#

#|
(deftype jellyfish (hover-enemy)
  ((los                   los-control :inline :offset-assert 780)
   (sync                  sync-eased  :inline :offset-assert 932)
   (sound-id              uint32              :offset-assert 976)
   (path-player-u         float               :offset-assert 980)
   (path-my-u             float               :offset-assert 984)
   (path-y-offset         float               :offset-assert 988)
   (path-stare-u          float               :offset-assert 992)
   (tentacle-clock        float               :offset-assert 996)
   (tentacle-blend        float               :offset-assert 1000)
   (last-attack-time      time-frame              :offset-assert 1004)
   (last-fire-time        time-frame              :offset-assert 1012)
   (charge-path-timer     uint64              :offset-assert 1020)
   (tentacles             UNKNOWN     5       :offset-assert 1028)
   (tentacles-initialized basic               :offset-assert 1048)
   (stare-pos             vector      :inline :offset-assert 1052)
   (charge-pos            vector      :inline :offset-assert 1068)
   (grab-front            basic               :offset-assert 1084)
   (grab-offset           vector      :inline :offset-assert 1100)
   (grab-start-pos        vector      :inline :offset-assert 1116)
   (grab-start-quat       quaternion  :inline :offset-assert 1132)
   (focus-rot             quaternion  :inline :offset-assert 1148)
   (attach-lerp           float               :offset-assert 1164)
   )
  :method-count-assert 165
  :size-assert         #x494
  :flag-assert         #xa504200494
  (:methods
    (jellyfish-method-156 () none 156)
    (threaten () _type_ :state 157)
    (charge-attack () _type_ :state 158)
    (grab-mech () _type_ :state 159)
    (die-now () _type_ :state 160)
    (jellyfish-method-161 () none 161)
    (jellyfish-method-162 () none 162)
    (jellyfish-method-163 () none 163)
    (jellyfish-method-164 () none 164)
    )
  )
|#

#|
(deftype jellyfish-joint-mod-tentacle-info (structure)
  ((axis   vector :inline :offset-assert 0)
   (angle  float          :offset-assert 16)
   (period float          :offset-assert 20)
   (offset float          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

;; (define-extern *jellyfish-mech-reserved* object)
;; (define-extern *jellyfish-mainvein-chain-setup* array)
;; (define-extern *jellyfish-lfront-chain-setup* array)
;; (define-extern *jellyfish-rfront-chain-setup* array)
;; (define-extern *jellyfish-lrear-chain-setup* array)
;; (define-extern *jellyfish-rrear-chain-setup* array)
;; (define-extern *jellyfish-enemy-info* enemy-info)
;; (define-extern jellyfish-joint-mod-tentacle function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype under-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-under-drip function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; centipede                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype centipede-cam (structure)
  ((init?            basic          :offset-assert 0)
   (trans            vector :inline :offset-assert 16)
   (dir              vector :inline :offset-assert 32)
   (track-focus-tilt float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype centipede (nav-enemy)
  ((id                     int8                  :offset-assert 600)
   (anim-ctr               int8                  :offset-assert 601)
   (focus-pos-hist-count   int8                  :offset-assert 602)
   (legs-sound             basic                 :offset-assert 604)
   (grabbed-focus?         basic                 :offset-assert 608)
   (using-chan1-effects?   basic                 :offset-assert 612)
   (set-camera-mode?       basic                 :offset-assert 616)
   (talking-volume         float                 :offset-assert 620)
   (desired-talking-volume float                 :offset-assert 624)
   (legs-volume            float                 :offset-assert 628)
   (focus-gnd-height       float                 :offset-assert 632)
   (track-focus-tilt       float                 :offset-assert 636)
   (bobbing-intensity      float                 :offset-assert 640)
   (bobbing                basic                 :offset-assert 644)
   (src-quat               quaternion    :inline :offset-assert 652)
   (dest-quat              quaternion    :inline :offset-assert 668)
   (cam                    centipede-cam :inline :offset-assert 684)
   (focus-pos-hist         UNKNOWN       15      :offset-assert 748)
   )
  :method-count-assert 189
  :size-assert         #x3e0
  :flag-assert         #xbd036003e0
  (:methods
    (attack () _type_ :state 178)
    (attack-failed () _type_ :state 179)
    (hidden () _type_ :state 180)
    (grab-cam () _type_ :state 181)
    (thru-grating () _type_ :state 182)
    (centipede-method-183 () none 183)
    (centipede-method-184 () none 184)
    (centipede-method-185 () none 185)
    (centipede-method-186 () none 186)
    (centipede-method-187 () none 187)
    (centipede-method-188 () none 188)
    )
  )
|#

;; (define-extern *centipede-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig5-cent1-path0               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sig5-cent1-path0* sig-path)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig5-cent2-path0               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sig5-cent2-path0* sig-path)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig5-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig5-course (bot-course)
  ((chase-speeches basic  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype sig-under (sig)
  ((shot-at-growls-index int8            :offset-assert 1068)
   (growls               UNKNOWN 2       :offset-assert 1076)
   (next-chase-play-time time-frame          :offset-assert 1092)
   (grating-broken-time  time-frame          :offset-assert 1092)
   (test-plane           plane   :inline :offset-assert 1100)
   )
  :method-count-assert 265
  :size-assert         #x460
  :flag-assert         #x10903e00460
  (:methods
    (intro-shooting () _type_ :state 259)
    (sig-under-method-260 () none 260)
    (sig-under-method-261 () none 261)
    (sig-under-method-262 () none 262)
    (sig-under-method-263 () none 263)
    (sig-under-method-264 () none 264)
    )
  )
|#

;; (define-extern sig5-default-check-too-far function)
;; (define-extern *sig5-course* sig5-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; under-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern under-sig-red-shot function)
;; (define-extern under-sig-red-shot-overhead function)
;; (define-extern under-sig-red-shot-grunt function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-recorder                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-path-info (basic)
  ((name             basic          :offset-assert 4)
   (finish-center-p0 vector :inline :offset-assert 16)
   (finish-center-p1 vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype sigrec-sample (structure)
  ((sample-time time-frame             :offset-assert 0)
   (pos         vector     :inline :offset-assert 16)
   (quat        quaternion :inline :offset-assert 32)
   (flags       uint8              :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x31
  :flag-assert         #x900000031
  )
|#

#|
(deftype sig-recorder-samples (basic)
  ((samples uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype sig-recorder (process)
  ((path-num             int32          :offset-assert 124)
   (info                 basic          :offset-assert 128)
   (sample-count         int32          :offset-assert 132)
   (samples              uint32         :offset-assert 136)
   (state-time           time-frame         :offset-assert 140)
   (start-time           time-frame         :offset-assert 148)
   (finish-record-plane  plane  :inline :offset-assert 156)
   (finish-record-center vector :inline :offset-assert 172)
   (prev-pos             vector :inline :offset-assert 188)
   )
  :method-count-assert 29
  :size-assert         #xd0
  :flag-assert         #x1d005000d0
  (:methods
    (sig-recorder-method-9 () none 9)
    (sig-recorder-method-10 () none 10)
    (sig-recorder-method-11 () none 11)
    (sig-recorder-method-12 () none 12)
    (sig-recorder-method-13 () none 13)
    (idle () _type_ :state 14)
    (recording () _type_ :state 15)
    (fail-full () _type_ :state 16)
    (finished () _type_ :state 17)
    (save () _type_ :state 18)
    (fail-save () _type_ :state 19)
    (sig-recorder-method-20 () none 20)
    (sig-recorder-method-21 () none 21)
    (sig-recorder-method-22 () none 22)
    (sig-recorder-method-23 () none 23)
    (sig-recorder-method-24 () none 24)
    (sig-recorder-method-25 () none 25)
    (sig-recorder-method-26 () none 26)
    (sig-recorder-method-27 () none 27)
    (sig-recorder-method-28 () none 28)
    )
  )
|#

;; (define-extern *sig-paths* array)
;; (define-extern *sig-recorder-samples* object)
;; (define-extern *sig-recorder* object)
;; (define-extern *sigrec-out* object)
;; (define-extern sig-recorder-init-by-other function)
;; (define-extern start-sig-recorder function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyport-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype hiphog-exterior-marquee (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype farthy (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-ctyport-drop-userdata function)
;; (define-extern *hiphog-exterior-marquee* array)
;; (define-extern *hiphog-exterior-marquee-group-ids* array)
;; (define-extern *hiphog-exterior-marquee-daxter-group-ids* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; caspad-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cpad-elevator (elevator)
  ((sound-id uint32  :offset-assert 364)
   )
  :method-count-assert 50
  :size-assert         #x174
  :flag-assert         #x3201000174
  (:methods
    (cpad-elevator-method-49 () none 49)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; caspad-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype caspad-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; castle-tasks                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-branch (structure)
  ((node              UNKNOWN 2 :offset-assert 0)
   (src-node          basic     :offset-assert 0)
   (dest-node         basic     :offset-assert 4)
   (temp-dest-node-id int32     :offset-assert 4)
   (speed-limit       uint8     :offset-assert 8)
   (density           uint8     :offset-assert 9)
   (clock-type        uint8     :offset-assert 10)
   (clock-mask        uint8     :offset-assert 11)
   (max-user-count    uint8     :offset-assert 12)
   (user-count        uint8     :offset-assert 13)
   (width             uint8     :offset-assert 14)
   (flags             uint8     :offset-assert 15)
   )
  :method-count-assert 21
  :size-assert         #x10
  :flag-assert         #x1500000010
  (:methods
    (nav-branch-method-9 () none 9)
    (nav-branch-method-10 () none 10)
    (nav-branch-method-11 () none 11)
    (nav-branch-method-12 () none 12)
    (nav-branch-method-13 () none 13)
    (nav-branch-method-14 () none 14)
    (nav-branch-method-15 () none 15)
    (nav-branch-method-16 () none 16)
    (nav-branch-method-17 () none 17)
    (nav-branch-method-18 () none 18)
    (nav-branch-method-19 () none 19)
    (nav-branch-method-20 () none 20)
    )
  )
|#

#|
(deftype nav-node (structure)
  ()
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; Failed to read fields.
  (:methods
    (nav-node-method-9 () none 9)
    (nav-node-method-10 () none 10)
    (nav-node-method-11 () none 11)
    (nav-node-method-12 () none 12)
    (nav-node-method-13 () none 13)
    (nav-node-method-14 () none 14)
    (nav-node-method-15 () none 15)
    (nav-node-method-16 () none 16)
    (nav-node-method-17 () none 17)
    (nav-node-method-18 () none 18)
    (nav-node-method-19 () none 19)
    (nav-node-method-20 () none 20)
    (nav-node-method-21 () none 21)
    )
  )
|#

#|
(deftype nav-graph-link (structure)
  ((id            uint32           :offset-assert 0)
   (dest-graph-id uint32           :offset-assert 4)
   (src-branch-id uint16           :offset-assert 8)
   (dest-node-id  uint16           :offset-assert 10)
   (dest-graph    basic            :offset-assert 12)
   (dummy-node    nav-node :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype nav-graph (basic)
  ((node-count   int16     :offset-assert 4)
   (branch-count int16     :offset-assert 6)
   (node-array   uint32    :offset-assert 8)
   (branch-array uint32    :offset-assert 12)
   (link-count   int16     :offset-assert 16)
   (pad2         uint16    :offset-assert 18)
   (link-array   uint32    :offset-assert 20)
   (first-node   int16     :offset-assert 24)
   (pad0         uint16    :offset-assert 26)
   (patched      basic     :offset-assert 28)
   (id           uint32    :offset-assert 32)
   (pad1         UNKNOWN 6 :offset-assert 36)
   )
  :method-count-assert 45
  :size-assert         #x3c
  :flag-assert         #x2d0000003c
  (:methods
    (nav-graph-method-9 () none 9)
    (nav-graph-method-10 () none 10)
    (nav-graph-method-11 () none 11)
    (nav-graph-method-12 () none 12)
    (nav-graph-method-13 () none 13)
    (nav-graph-method-14 () none 14)
    (nav-graph-method-15 () none 15)
    (nav-graph-method-16 () none 16)
    (nav-graph-method-17 () none 17)
    (nav-graph-method-18 () none 18)
    (nav-graph-method-19 () none 19)
    (nav-graph-method-20 () none 20)
    (nav-graph-method-21 () none 21)
    (nav-graph-method-22 () none 22)
    (nav-graph-method-23 () none 23)
    (nav-graph-method-24 () none 24)
    (nav-graph-method-25 () none 25)
    (nav-graph-method-26 () none 26)
    (nav-graph-method-27 () none 27)
    (nav-graph-method-28 () none 28)
    (nav-graph-method-29 () none 29)
    (nav-graph-method-30 () none 30)
    (nav-graph-method-31 () none 31)
    (nav-graph-method-32 () none 32)
    (nav-graph-method-33 () none 33)
    (nav-graph-method-34 () none 34)
    (nav-graph-method-35 () none 35)
    (nav-graph-method-36 () none 36)
    (nav-graph-method-37 () none 37)
    (nav-graph-method-38 () none 38)
    (nav-graph-method-39 () none 39)
    (nav-graph-method-40 () none 40)
    (nav-graph-method-41 () none 41)
    (nav-graph-method-42 () none 42)
    (nav-graph-method-43 () none 43)
    (nav-graph-method-44 () none 44)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-engine-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-segment (structure)
  ((vertex        UNKNOWN    2 :offset-assert 0)
   (length        float        :offset-assert 12)
   (spawn-spacing float        :offset-assert 28)
   (branch        nav-branch   :offset-assert 32)
   (nav-mesh-id   uint32       :offset-assert 36)
   (id            uint16       :offset-assert 40)
   (cell-id       uint16       :offset-assert 42)
   (from-cell-id  uint16       :offset-assert 44)
   (tracker-id    int8         :offset-assert 46)
   (pad0          int8         :offset-assert 47)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype vis-cell (structure)
  ()
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  ;; Failed to read fields.
  (:methods
    (vis-cell-method-9 () none 9)
    (vis-cell-method-10 () none 10)
    )
  )
|#

#|
(deftype vis-grid-pos (structure)
  ((data UNKNOWN 3 :offset-assert 0)
   (x    int8      :offset-assert 0)
   (y    int8      :offset-assert 1)
   (z    int8      :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )
|#

#|
(deftype vis-grid-box (structure)
  ((min vis-grid-pos :inline :offset-assert 0)
   (max vis-grid-pos :inline :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype vis-ray (structure)
  ((pos      vector       :inline :offset-assert 0)
   (dir      vector       :inline :offset-assert 16)
   (dest-pos vector       :inline :offset-assert 32)
   (plane    plane        :inline :offset-assert 48)
   (grid-pos vis-grid-pos :inline :offset-assert 64)
   (len      float                :offset-assert 68)
   (cell     vis-cell             :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )
|#

#|
(deftype grid-info (structure)
  ((axis-scale      UNKNOWN      3       :offset-assert 0)
   (dimension-array UNKNOWN      3       :offset-assert 12)
   (pad0            UNKNOWN      1       :offset-assert 15)
   (box             bounding-box :inline :offset-assert 16)
   (cell-size       vector       :inline :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (grid-info-method-9 () none 9)
    (grid-info-method-10 () none 10)
    (grid-info-method-11 () none 11)
    (grid-info-method-12 () none 12)
    (grid-info-method-13 () none 13)
    )
  )
|#

#|
(deftype city-level-info (structure)
  ((grid-info      grid-info :inline :offset-assert 0)
   (cell-array     uint32            :offset-assert 64)
   (segment-count  int16             :offset-assert 68)
   (cell-count     uint16            :offset-assert 70)
   (segment-array  uint32            :offset-assert 72)
   (nav-graph      basic             :offset-assert 76)
   (camera-ceiling meters            :offset-assert 80)
   (pad-array      UNKNOWN   56      :offset-assert 84)
   )
  :method-count-assert 19
  :size-assert         #x8c
  :flag-assert         #x130000008c
  (:methods
    (city-level-info-method-9 () none 9)
    (city-level-info-method-10 () none 10)
    (city-level-info-method-11 () none 11)
    (city-level-info-method-12 () none 12)
    (city-level-info-method-13 () none 13)
    (city-level-info-method-14 () none 14)
    (city-level-info-method-15 () none 15)
    (city-level-info-method-16 () none 16)
    (city-level-info-method-17 () none 17)
    (city-level-info-method-18 () none 18)
    )
  )
|#

#|
(deftype traffic-level-data (structure)
  ((city-info               city-level-info         :offset-assert 0)
   (active-cell-count       uint8                   :offset-assert 4)
   (newly-active-cell-count uint8                   :offset-assert 5)
   (active-cell-list        UNKNOWN         255     :offset-assert 8)
   (newly-active-cell-list  UNKNOWN         255     :offset-assert 1028)
   (active-cell-box         bounding-box    :inline :offset-assert 2048)
   )
  :method-count-assert 15
  :size-assert         #x820
  :flag-assert         #xf00000820
  (:methods
    (traffic-level-data-method-9 () none 9)
    (traffic-level-data-method-10 () none 10)
    (traffic-level-data-method-11 () none 11)
    (traffic-level-data-method-12 () none 12)
    (traffic-level-data-method-13 () none 13)
    (traffic-level-data-method-14 () none 14)
    )
  )
|#

#|
(deftype traffic-suppression-box (structure)
  ((data     UNKNOWN      32      :offset-assert 0)
   (bbox     bounding-box :inline :offset-assert 0)
   (flags    uint8                :offset-assert 12)
   (duration uint32               :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype traffic-guard-type-info (structure)
  ((object-type      uint8  :offset-assert 0)
   (max-target-count int8   :offset-assert 1)
   (min-target-count int8   :offset-assert 2)
   (target-count     int8   :offset-assert 3)
   (count            int8   :offset-assert 4)
   (change-to-type   uint8  :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype traffic-guard-type-settings (structure)
  ((target-count    int8    :offset-assert 0)
   (inaccuracy      float   :offset-assert 4)
   (acquire-delay   uint16  :offset-assert 8)
   (shot-delay      uint16  :offset-assert 10)
   (burst-delay     uint16  :offset-assert 12)
   (shot-count      int8    :offset-assert 14)
   (rand-shot-count int8    :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype traffic-alert-state-settings (structure)
  ((guard-settings-array UNKNOWN                     6       :offset-assert 0)
   (ped-tazer            traffic-guard-type-settings :inline :offset-assert 0)
   (ped-rifle            traffic-guard-type-settings :inline :offset-assert 16)
   (ped-grenade          traffic-guard-type-settings :inline :offset-assert 32)
   (ped-roboguard        traffic-guard-type-settings :inline :offset-assert 48)
   (bike-turret          traffic-guard-type-settings :inline :offset-assert 64)
   (hellcat-turret       traffic-guard-type-settings :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

#|
(deftype traffic-target-status (structure)
  ()
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; Failed to read fields.
  )
|#

#|
(deftype traffic-alert-state (structure)
  ()
  :method-count-assert 10
  :size-assert         #x3d8
  :flag-assert         #xa000003d8
  ;; Failed to read fields.
  (:methods
    (traffic-alert-state-method-9 () none 9)
    )
  )
|#

#|
(deftype traffic-object-type-info (structure)
  ((flags             uint8   :offset-assert 0)
   (target-count      int8    :offset-assert 1)
   (active-count      int8    :offset-assert 2)
   (inactive-count    int8    :offset-assert 3)
   (reserve-count     uint16  :offset-assert 4)
   (killed-count      uint16  :offset-assert 6)
   (want-count        int8    :offset-assert 8)
   (tracker-index     uint8   :offset-assert 9)
   (parking-spot-prob uint8   :offset-assert 10)
   (guard-type        uint8   :offset-assert 11)
   (array             uint32  :offset-assert 12)
   (level             basic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype traffic-suppressor (structure)
  ((flags uint8                :offset-assert 0)
   (bbox  bounding-box :inline :offset-assert 16)
   (array UNKNOWN      16      :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x230
  :flag-assert         #xe00000230
  (:methods
    (traffic-suppressor-method-9 () none 9)
    (traffic-suppressor-method-10 () none 10)
    (traffic-suppressor-method-11 () none 11)
    (traffic-suppressor-method-12 () none 12)
    (traffic-suppressor-method-13 () none 13)
    )
  )
|#

#|
(deftype traffic-tracker (structure)
  ((traffic                 basic       :offset-assert 0)
   (object-hash             basic       :offset-assert 4)
   (rand                    float       :offset-assert 8)
   (id                      uint8       :offset-assert 12)
   (active-object-count     uint8       :offset-assert 13)
   (inactive-object-count   int8        :offset-assert 14)
   (active-object-list      UNKNOWN 126 :offset-assert 16)
   (active-object-type-list UNKNOWN 126 :offset-assert 1024)
   )
  :method-count-assert 27
  :size-assert         #x47e
  :flag-assert         #x1b0000047e
  (:methods
    (traffic-tracker-method-9 () none 9)
    (traffic-tracker-method-10 () none 10)
    (traffic-tracker-method-11 () none 11)
    (traffic-tracker-method-12 () none 12)
    (traffic-tracker-method-13 () none 13)
    (traffic-tracker-method-14 () none 14)
    (traffic-tracker-method-15 () none 15)
    (traffic-tracker-method-16 () none 16)
    (traffic-tracker-method-17 () none 17)
    (traffic-tracker-method-18 () none 18)
    (traffic-tracker-method-19 () none 19)
    (traffic-tracker-method-20 () none 20)
    (traffic-tracker-method-21 () none 21)
    (traffic-tracker-method-22 () none 22)
    (traffic-tracker-method-23 () none 23)
    (traffic-tracker-method-24 () none 24)
    (traffic-tracker-method-25 () none 25)
    (traffic-tracker-method-26 () none 26)
    )
  )
|#

#|
(deftype traffic-engine (basic)
  ((object-hash            basic                       :offset-assert 4)
   (manager                uint64                      :offset-assert 8)
   (inv-density-factor     float                       :offset-assert 16)
   (sync-clock             uint8                       :offset-assert 20)
   (sync-mask-8            uint8                       :offset-assert 21)
   (sync-mask-16           uint16                      :offset-assert 22)
   (sync-mask-32           uint32                      :offset-assert 24)
   (sync-array             UNKNOWN             4       :offset-assert 28)
   (flags                  uint8                       :offset-assert 32)
   (alert-state            traffic-alert-state :inline :offset-assert 48)
   (level-data-array       UNKNOWN             2       :offset-assert 1040)
   (object-type-info-array UNKNOWN             21      :offset-assert 5200)
   (tracker-array          UNKNOWN             2       :offset-assert 5872)
   (inactive-object-array  UNKNOWN             420     :offset-assert 8176)
   (suppressor             traffic-suppressor  :inline :offset-assert 11536)
   (danger-sphere-count    int8                        :offset-assert 12096)
   (danger-sphere-array    UNKNOWN             4       :offset-assert 12112)
   )
  :method-count-assert 74
  :size-assert         #x3050
  :flag-assert         #x4a00003050
  (:methods
    (traffic-engine-method-9 () none 9)
    (traffic-engine-method-10 () none 10)
    (traffic-engine-method-11 () none 11)
    (traffic-engine-method-12 () none 12)
    (traffic-engine-method-13 () none 13)
    (traffic-engine-method-14 () none 14)
    (traffic-engine-method-15 () none 15)
    (traffic-engine-method-16 () none 16)
    (traffic-engine-method-17 () none 17)
    (traffic-engine-method-18 () none 18)
    (traffic-engine-method-19 () none 19)
    (traffic-engine-method-20 () none 20)
    (traffic-engine-method-21 () none 21)
    (traffic-engine-method-22 () none 22)
    (traffic-engine-method-23 () none 23)
    (traffic-engine-method-24 () none 24)
    (traffic-engine-method-25 () none 25)
    (traffic-engine-method-26 () none 26)
    (traffic-engine-method-27 () none 27)
    (traffic-engine-method-28 () none 28)
    (traffic-engine-method-29 () none 29)
    (traffic-engine-method-30 () none 30)
    (traffic-engine-method-31 () none 31)
    (traffic-engine-method-32 () none 32)
    (traffic-engine-method-33 () none 33)
    (traffic-engine-method-34 () none 34)
    (traffic-engine-method-35 () none 35)
    (traffic-engine-method-36 () none 36)
    (traffic-engine-method-37 () none 37)
    (traffic-engine-method-38 () none 38)
    (traffic-engine-method-39 () none 39)
    (traffic-engine-method-40 () none 40)
    (traffic-engine-method-41 () none 41)
    (traffic-engine-method-42 () none 42)
    (traffic-engine-method-43 () none 43)
    (traffic-engine-method-44 () none 44)
    (traffic-engine-method-45 () none 45)
    (traffic-engine-method-46 () none 46)
    (traffic-engine-method-47 () none 47)
    (traffic-engine-method-48 () none 48)
    (traffic-engine-method-49 () none 49)
    (traffic-engine-method-50 () none 50)
    (traffic-engine-method-51 () none 51)
    (traffic-engine-method-52 () none 52)
    (traffic-engine-method-53 () none 53)
    (traffic-engine-method-54 () none 54)
    (traffic-engine-method-55 () none 55)
    (traffic-engine-method-56 () none 56)
    (traffic-engine-method-57 () none 57)
    (traffic-engine-method-58 () none 58)
    (traffic-engine-method-59 () none 59)
    (traffic-engine-method-60 () none 60)
    (traffic-engine-method-61 () none 61)
    (traffic-engine-method-62 () none 62)
    (traffic-engine-method-63 () none 63)
    (traffic-engine-method-64 () none 64)
    (traffic-engine-method-65 () none 65)
    (traffic-engine-method-66 () none 66)
    (traffic-engine-method-67 () none 67)
    (traffic-engine-method-68 () none 68)
    (traffic-engine-method-69 () none 69)
    (traffic-engine-method-70 () none 70)
    (traffic-engine-method-71 () none 71)
    (traffic-engine-method-72 () none 72)
    (traffic-engine-method-73 () none 73)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-lookup-info (structure)
  ((turn-radius       meters  :offset-assert 0)
   (throttle-turning  float   :offset-assert 4)
   (throttle-straight float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype vehicle-control-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (normal    vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype vehicle-section-info (structure)
  ((damage-seg-array UNKNOWN 3 :offset-assert 0)
   (damage-seg-count int8      :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x19
  :flag-assert         #x900000019
  )
|#

#|
(deftype vehicle-seat-info (structure)
  ((data     UNKNOWN 16      :offset-assert 0)
   (position vector  :inline :offset-assert 0)
   (pos-x    float           :offset-assert 0)
   (pos-y    float           :offset-assert 4)
   (pos-z    float           :offset-assert 8)
   (angle    int16           :offset-assert 12)
   (flags    uint8           :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype vehicle-explosion-info (joint-exploder-static-params)
  ((skel      basic  :offset-assert 16)
   (skel-name basic  :offset-assert 20)
   (anim      int32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype vehicle-grab-rail-info (structure)
  ((local-pos UNKNOWN 2       :offset-assert 0)
   (normal    vector  :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype rigid-body-vehicle-constants (rigid-body-object-constants)
  ((flags                             uint32                       :offset-assert 208)
   (object-type                       uint8                        :offset-assert 212)
   (guard-type                        uint8                        :offset-assert 213)
   (max-engine-thrust                 meters                       :offset-assert 216)
   (inv-max-engine-thrust             float                        :offset-assert 220)
   (engine-response-rate              float                        :offset-assert 224)
   (engine-intake-factor              float                        :offset-assert 228)
   (brake-factor                      float                        :offset-assert 232)
   (turbo-boost-factor                float                        :offset-assert 236)
   (max-xz-speed                      meters                       :offset-assert 240)
   (ground-probe-distance             meters                       :offset-assert 244)
   (ground-probe-offset               meters                       :offset-assert 248)
   (cos-ground-effect-angle           float                        :offset-assert 252)
   (spring-lift-factor                float                        :offset-assert 256)
   (air-steering-factor               float                        :offset-assert 260)
   (air-drag-factor                   float                        :offset-assert 264)
   (steering-fin-angle                float                        :offset-assert 268)
   (steering-thruster-factor          float                        :offset-assert 272)
   (steering-thruster-max-gain        float                        :offset-assert 276)
   (steering-thruster-half-gain-speed meters                       :offset-assert 280)
   (tire-steering-angle               float                        :offset-assert 284)
   (tire-friction-factor              float                        :offset-assert 288)
   (tire-static-friction              float                        :offset-assert 292)
   (tire-static-friction-speed        meters                       :offset-assert 296)
   (tire-dynamic-friction             float                        :offset-assert 300)
   (tire-dynamic-friction-speed       meters                       :offset-assert 304)
   (tire-inv-max-friction-speed       float                        :offset-assert 308)
   (airfoil-factor                    float                        :offset-assert 312)
   (drag-force-factor                 float                        :offset-assert 316)
   (speed-scrubbing-drag              float                        :offset-assert 320)
   (speed-limiting-drag               float                        :offset-assert 324)
   (pitch-control-factor              float                        :offset-assert 328)
   (roll-control-factor               float                        :offset-assert 332)
   (roll-angle                        float                        :offset-assert 336)
   (jump-thrust-factor                float                        :offset-assert 340)
   (buoyancy-factor                   float                        :offset-assert 344)
   (player-weight                     float                        :offset-assert 348)
   (player-shift-x                    meters                       :offset-assert 352)
   (player-shift-z                    meters                       :offset-assert 356)
   (target-speed-offset               meters                       :offset-assert 360)
   (turning-accel                     meters                       :offset-assert 364)
   (toughness-factor                  float                        :offset-assert 368)
   (damage-factor                     float                        :offset-assert 372)
   (camera-string-min-height          meters                       :offset-assert 376)
   (camera-string-max-height          meters                       :offset-assert 380)
   (camera-string-min-length          meters                       :offset-assert 384)
   (camera-string-max-length          meters                       :offset-assert 388)
   (camera-min-fov                    float                        :offset-assert 392)
   (camera-max-fov                    float                        :offset-assert 396)
   (camera-head-offset                float                        :offset-assert 400)
   (camera-foot-offset                float                        :offset-assert 404)
   (camera-normal-max-angle-offset    float                        :offset-assert 408)
   (camera-air-max-angle-offset       float                        :offset-assert 412)
   (camera-max-lookaround-speed       float                        :offset-assert 416)
   (seat-count                        int8                         :offset-assert 420)
   (section-count                     int8                         :offset-assert 421)
   (rider-stance                      uint8                        :offset-assert 422)
   (grab-rail-count                   int8                         :offset-assert 423)
   (grab-rail-array                   uint32                       :offset-assert 424)
   (seat-array                        UNKNOWN              4       :offset-assert 432)
   (rider-hand-offset                 UNKNOWN              2       :offset-assert 496)
   (section-array                     UNKNOWN              4       :offset-assert 528)
   (section-bike-front                vehicle-section-info :inline :offset-assert 528)
   (section-bike-rear                 vehicle-section-info :inline :offset-assert 560)
   (section-car-front-left            vehicle-section-info :inline :offset-assert 528)
   (section-car-rear-left             vehicle-section-info :inline :offset-assert 560)
   (section-car-front-right           vehicle-section-info :inline :offset-assert 592)
   (section-car-rear-right            vehicle-section-info :inline :offset-assert 624)
   (explosion                         basic                        :offset-assert 656)
   (engine-pitch-scale                float                        :offset-assert 660)
   (engine-pitch-offset               float                        :offset-assert 664)
   (engine-pitch-mod-amp              float                        :offset-assert 668)
   (engine-sound-select               int8                         :offset-assert 672)
   (engine-sound                      uint128                      :offset-assert 688)
   (thrust-sound                      uint128                      :offset-assert 704)
   (scrape-sound                      uint128                      :offset-assert 720)
   (glance-sound                      uint128                      :offset-assert 736)
   (impact-sound                      uint128                      :offset-assert 752)
   (extra-sound                       uint128                      :offset-assert 768)
   (explosion-part                    int32                        :offset-assert 784)
   (headlight-count                   int8                         :offset-assert 788)
   (taillight-count                   int8                         :offset-assert 789)
   (thruster-flame-width              meters                       :offset-assert 792)
   (thruster-flame-length             meters                       :offset-assert 796)
   (thruster-local-pos                UNKNOWN              2       :offset-assert 800)
   (exhaust-local-pos                 UNKNOWN              2       :offset-assert 832)
   (exhaust-local-dir                 UNKNOWN              2       :offset-assert 864)
   (smoke-local-pos                   UNKNOWN              2       :offset-assert 896)
   (smoke-local-vel                   UNKNOWN              2       :offset-assert 928)
   (headlight-local-pos               UNKNOWN              3       :offset-assert 960)
   (taillight-local-pos               UNKNOWN              2       :offset-assert 1008)
   (lift-thruster-count               int8                         :offset-assert 1040)
   (roll-thruster-count               int8                         :offset-assert 1041)
   (steering-thruster-count           int8                         :offset-assert 1042)
   (stabilizer-count                  int8                         :offset-assert 1043)
   (inv-lift-thruster-count           float                        :offset-assert 1044)
   (lift-thruster-array               UNKNOWN              2       :offset-assert 1056)
   (roll-thruster-array               UNKNOWN              2       :offset-assert 1120)
   (steering-thruster-array           UNKNOWN              2       :offset-assert 1184)
   (stabilizer-array                  UNKNOWN              6       :offset-assert 1248)
   (engine-thrust-local-pos           vector               :inline :offset-assert 1440)
   (brake-local-pos                   vector               :inline :offset-assert 1456)
   (particle-system-2d                basic                        :offset-assert 1472)
   (particle-system-3d                basic                        :offset-assert 1476)
   (part-thruster                     basic                        :offset-assert 1480)
   (part-thruster-scale-x             sp-field-init-spec           :offset-assert 1484)
   (part-thruster-scale-y             sp-field-init-spec           :offset-assert 1488)
   (part-quat                         quaternion                   :offset-assert 1492)
   (part-vel                          vector                       :offset-assert 1496)
   (color-option-count                int8                         :offset-assert 1500)
   (color-option-select               int8                         :offset-assert 1501)
   (color-option-array                uint32                       :offset-assert 1504)
   (sample-dir                        vector               :inline :offset-assert 1520)
   (sample-time                       time-frame                       :offset-assert 1536)
   (sample-index                      int32                        :offset-assert 1544)
   )
  :method-count-assert 11
  :size-assert         #x60c
  :flag-assert         #xb0000060c
  (:methods
    (rigid-body-vehicle-constants-method-9 () none 9)
    (rigid-body-vehicle-constants-method-10 () none 10)
    )
  )
|#

#|
(deftype vehicle-controller (structure)
  ()
  :method-count-assert 22
  :size-assert         #x90
  :flag-assert         #x1600000090
  ;; Failed to read fields.
  (:methods
    (vehicle-controller-method-9 () none 9) ;; (init! (_type_ vehicle-path (pointer float) (pointer float) int float) none 9)
    (vehicle-controller-method-10 () none 10) ;; (TODO-RENAME-10 (_type_ vector float int) none 10)
    (vehicle-controller-method-11 () none 11) ;; (dummy-11 (_type_) none 11)
    (vehicle-controller-method-12 () none 12) ;; (TODO-RENAME-12 (_type_ int vector) none 12)
    (vehicle-controller-method-13 () none 13) ;; (move-to-next-point (_type_ vector) none 13)
    (vehicle-controller-method-14 () none 14) ;; (TODO-RENAME-14 (_type_ vector vector) none 14)
    (vehicle-controller-method-15 () none 15) ;; (dummy-15 (_type_ collide-shape-moving) none 15)
    (vehicle-controller-method-16 () none 16) ;; (dummy-16 (_type_) none 16)
    (vehicle-controller-method-17 () none 17)
    (vehicle-controller-method-18 () none 18)
    (vehicle-controller-method-19 () none 19)
    (vehicle-controller-method-20 () none 20)
    (vehicle-controller-method-21 () none 21)
    )
  )
|#

#|
(deftype vehicle-section (structure)
  ((damage float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype vehicle (rigid-body-object)
  ()
  :method-count-assert 144
  :size-assert         #x370
  :flag-assert         #x9002f00370
  ;; Failed to read fields.
  (:methods
    (vehicle-method-53 () none 53)
    (vehicle-method-54 () none 54)
    (vehicle-method-55 () none 55)
    (vehicle-method-56 () none 56)
    (vehicle-method-57 () none 57)
    (vehicle-method-58 () none 58)
    (vehicle-method-59 () none 59)
    (vehicle-method-60 () none 60)
    (vehicle-method-61 () none 61)
    (vehicle-method-62 () none 62)
    (vehicle-method-63 () none 63)
    (vehicle-method-64 () none 64)
    (vehicle-method-65 () none 65)
    (vehicle-method-66 () none 66)
    (vehicle-method-67 () none 67)
    (vehicle-method-68 () none 68)
    (vehicle-method-69 () none 69)
    (vehicle-method-70 () none 70)
    (vehicle-method-71 () none 71)
    (vehicle-method-72 () none 72)
    (vehicle-method-73 () none 73)
    (vehicle-method-74 () none 74)
    (vehicle-method-75 () none 75)
    (vehicle-method-76 () none 76)
    (vehicle-method-77 () none 77)
    (vehicle-method-78 () none 78)
    (vehicle-method-79 () none 79)
    (vehicle-method-80 () none 80)
    (vehicle-method-81 () none 81)
    (vehicle-method-82 () none 82)
    (vehicle-method-83 () none 83)
    (vehicle-method-84 () none 84)
    (vehicle-method-85 () none 85)
    (vehicle-method-86 () none 86)
    (vehicle-method-87 () none 87)
    (vehicle-method-88 () none 88)
    (vehicle-method-89 () none 89)
    (vehicle-method-90 () none 90)
    (vehicle-method-91 () none 91)
    (vehicle-method-92 () none 92)
    (vehicle-method-93 () none 93)
    (vehicle-method-94 () none 94)
    (vehicle-method-95 () none 95)
    (vehicle-method-96 () none 96)
    (vehicle-method-97 () none 97)
    (vehicle-method-98 () none 98)
    (vehicle-method-99 () none 99)
    (vehicle-method-100 () none 100)
    (vehicle-method-101 () none 101)
    (vehicle-method-102 () none 102)
    (vehicle-method-103 () none 103)
    (vehicle-method-104 () none 104)
    (vehicle-method-105 () none 105)
    (vehicle-method-106 () none 106)
    (vehicle-method-107 () none 107)
    (vehicle-method-108 () none 108)
    (vehicle-method-109 () none 109)
    (vehicle-method-110 () none 110)
    (vehicle-method-111 () none 111)
    (vehicle-method-112 () none 112)
    (vehicle-method-113 () none 113)
    (vehicle-method-114 () none 114)
    (vehicle-method-115 () none 115)
    (vehicle-method-116 () none 116)
    (vehicle-method-117 () none 117)
    (vehicle-method-118 () none 118)
    (vehicle-method-119 () none 119)
    (vehicle-method-120 () none 120)
    (vehicle-method-121 () none 121)
    (vehicle-method-122 () none 122)
    (vehicle-method-123 () none 123)
    (vehicle-method-124 () none 124)
    (vehicle-method-125 () none 125)
    (vehicle-method-126 () none 126)
    (vehicle-method-127 () none 127)
    (vehicle-method-128 () none 128)
    (vehicle-method-129 () none 129)
    (vehicle-method-130 () none 130)
    (vehicle-method-131 () none 131)
    (vehicle-method-132 () none 132)
    (vehicle-method-133 () none 133)
    (vehicle-method-134 () none 134)
    (vehicle-method-135 () none 135)
    (vehicle-method-136 () none 136)
    (vehicle-method-137 () none 137)
    (vehicle-method-138 () none 138)
    (vehicle-method-139 () none 139)
    (vehicle-method-140 () none 140)
    (vehicle-method-141 () none 141)
    (vehicle-method-142 () none 142)
    (vehicle-method-143 () none 143)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen (nav-enemy)
  ()
  :method-count-assert 201
  :size-assert         #x3c4
  :flag-assert         #xc9035003c4
  ;; Failed to read fields.
  (:methods
    (citizen-method-178 () none 178)
    (citizen-method-179 () none 179)
    (citizen-method-180 () none 180)
    (citizen-method-181 () none 181)
    (citizen-method-182 () none 182)
    (citizen-method-183 () none 183)
    (citizen-method-184 () none 184)
    (citizen-method-185 () none 185)
    (citizen-method-186 () none 186)
    (citizen-method-187 () none 187)
    (citizen-method-188 () none 188)
    (citizen-method-189 () none 189)
    (citizen-method-190 () none 190)
    (citizen-method-191 () none 191)
    (citizen-method-192 () none 192)
    (citizen-method-193 () none 193)
    (citizen-method-194 () none 194)
    (citizen-method-195 () none 195)
    (citizen-method-196 () none 196)
    (citizen-method-197 () none 197)
    (citizen-method-198 () none 198)
    (citizen-method-199 () none 199)
    (citizen-method-200 () none 200)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; height-map-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype xz-height-map (structure)
  ((offset        UNKNOWN 3 :offset-assert 0)
   (x-offset      float     :offset-assert 0)
   (y-offset      float     :offset-assert 4)
   (z-offset      float     :offset-assert 8)
   (x-inv-spacing float     :offset-assert 12)
   (z-inv-spacing float     :offset-assert 16)
   (y-scale       float     :offset-assert 20)
   (dim           UNKNOWN 2 :offset-assert 24)
   (x-dim         int16     :offset-assert 24)
   (z-dim         int16     :offset-assert 26)
   (data          uint32    :offset-assert 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (xz-height-map-method-9 () none 9)
    (xz-height-map-method-10 () none 10)
    (xz-height-map-method-11 () none 11)
    (xz-height-map-method-12 () none 12)
    (xz-height-map-method-13 () none 13)
    (xz-height-map-method-14 () none 14)
    )
  )
|#

;; (define-extern get-traffic-height function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-obs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-race-ring-info (structure)
  ((pos   vector :inline :offset-assert 0)
   (angle float          :offset-assert 12)
   (boost float          :offset-assert 16)
   (dist  float          :offset-assert 20)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (city-race-ring-info-method-9 () none 9)
    )
  )
|#

#|
(deftype city-ambush-spot (structure)
  ((pos      vector :inline :offset-assert 0)
   (obj-type uint8          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x11
  :flag-assert         #x900000011
  )
|#

#|
(deftype city-ambush-info (structure)
  ((count int16   :offset-assert 0)
   (array uint32  :offset-assert 4)
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (city-ambush-info-method-9 () none 9)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; height-map                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern point-in-bbox? function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-height-map             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *traffic-height-map* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern make-nav-graph function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-rider                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-rider (process-focusable)
  ((flags       uint8  :offset-assert 200)
   (riding-anim int32  :offset-assert 204)
   (anim-t      float  :offset-assert 208)
   (anim-speed  float  :offset-assert 212)
   (seat-index  int8   :offset-assert 216)
   )
  :method-count-assert 36
  :size-assert         #xdd
  :flag-assert         #x24006000dd
  (:methods
    (inactive () _type_ :state 27)
    (active () _type_ :state 28)
    (taunt () _type_ :state 29)
    (got-passed () _type_ :state 30)
    (vehicle-rider-method-31 () none 31)
    (vehicle-rider-method-32 () none 32)
    (vehicle-rider-method-33 () none 33)
    (vehicle-rider-method-34 () none 34)
    (vehicle-rider-method-35 () none 35)
    )
  )
|#

#|
(deftype citizen-norm-rider (vehicle-rider)
  ()
  :method-count-assert 36
  :size-assert         #xdd
  :flag-assert         #x24006000dd
  (:methods
    )
  )
|#

#|
(deftype crimson-guard-rider (vehicle-rider)
  ()
  :method-count-assert 36
  :size-assert         #xdd
  :flag-assert         #x24006000dd
  (:methods
    )
  )
|#

;; (define-extern vehicle-rider-event-handler function)
;; (define-extern vehicle-rider-init-by-other function)
;; (define-extern vehicle-rider-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-control                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *vehicle-control-debug-obj* object)
;; (define-extern nearest-dist2-between-moving-points function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-effects                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern calc-fade-vals function)
;; (define-extern *vehicle-headlight-glow-template* object)
;; (define-extern *vehicle-taillight-glow-template* object)
;; (define-extern *vehicle-thruster-glow-template* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype debug-vehicle-work (basic)
  ((impact-time  time-frame                    :offset-assert 8)
   (impact       rigid-body-impact :inline :offset-assert 16)
   (prim-sphere1 sphere            :inline :offset-assert 80)
   (prim-sphere2 sphere            :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

;; (define-extern string-word-wrap function)
;; (define-extern *debug-vehicle-work* debug-vehicle-work)
;; (define-extern *vehicle-shadow-control* shadow-control)
;; (define-extern *vehicle-shadow-control-disabled* shadow-control)
;; (define-extern vehicle-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-util                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-hud-request (structure)
  ((handle           uint64  :offset-assert 0)
   (hack-handle-init basic   :offset-assert 0)
   (priority         float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype vehicle-hud-requests (structure)
  ((time     time-frame    :offset-assert 0)
   (requests UNKNOWN 4 :offset-assert 8)
   )
  :method-count-assert 12
  :size-assert         #x48
  :flag-assert         #xc00000048
  (:methods
    (vehicle-hud-requests-method-9 () none 9)
    (vehicle-hud-requests-method-10 () none 10)
    (vehicle-hud-requests-method-11 () none 11)
    )
  )
|#

#|
(deftype vehicle-hud-chooser (structure)
  ((cur  vehicle-hud-requests :inline :offset-assert 0)
   (last vehicle-hud-requests :inline :offset-assert 72)
   )
  :method-count-assert 10
  :size-assert         #x90
  :flag-assert         #xa00000090
  (:methods
    (vehicle-hud-chooser-method-9 () none 9)
    )
  )
|#

;; (define-extern *vehicle-hud-chooser* object)
;; (define-extern *pilot-edge-grab-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-physics                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-probe-work (structure)
  ((local-pos     vector :inline :offset-assert 0)
   (local-normal  vector :inline :offset-assert 16)
   (world-pos     vector :inline :offset-assert 32)
   (world-normal  vector :inline :offset-assert 48)
   (probe-pos     vector :inline :offset-assert 64)
   (ground-pos    vector :inline :offset-assert 80)
   (ground-normal vector :inline :offset-assert 96)
   (velocity      vector :inline :offset-assert 112)
   (tire-force    vector :inline :offset-assert 128)
   (wheel-axis    vector :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

#|
(deftype vehicle-physics-work (structure)
  ((mat              matrix  :inline :offset-assert 0)
   (force            vector  :inline :offset-assert 64)
   (velocity         vector  :inline :offset-assert 80)
   (world-pos        vector  :inline :offset-assert 96)
   (world-normal     vector  :inline :offset-assert 112)
   (local-pos        vector  :inline :offset-assert 128)
   (steering-axis    vector  :inline :offset-assert 144)
   (lift-dir         vector  :inline :offset-assert 160)
   (normal           vector  :inline :offset-assert 176)
   (tmp              vector  :inline :offset-assert 192)
   (p-body           vector  :inline :offset-assert 208)
   (axis             vector  :inline :offset-assert 224)
   (dir              vector  :inline :offset-assert 240)
   (ground-normal    vector  :inline :offset-assert 256)
   (impulse          float           :offset-assert 272)
   (vel-dot-norm     float           :offset-assert 276)
   (friction-coef    float           :offset-assert 280)
   (speed-factor     float           :offset-assert 284)
   (probe-work-array UNKNOWN 2       :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x260
  :flag-assert         #x900000260
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-states                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern vehicle-event-handler function)
;; (define-extern vehicle-explode-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-guard                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turret-barrel-info (structure)
  ((local-pos vector :inline :offset-assert 0)
   (local-dir vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype turret-control-info (structure)
  ((joint-index  int8            :offset-assert 0)
   (barrel-count int8            :offset-assert 1)
   (shot-speed   float           :offset-assert 4)
   (attack-range float           :offset-assert 8)
   (rot-min      UNKNOWN 2       :offset-assert 12)
   (rot-max      UNKNOWN 2       :offset-assert 20)
   (rot-x-min    float           :offset-assert 12)
   (rot-x-max    float           :offset-assert 20)
   (rot-y-min    float           :offset-assert 16)
   (rot-y-max    float           :offset-assert 24)
   (local-pos    vector  :inline :offset-assert 32)
   (local-dir    vector  :inline :offset-assert 48)
   (barrel-array UNKNOWN 4       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )
|#

#|
(deftype turret-control (structure)
  ()
  :method-count-assert 18
  :size-assert         #x50
  :flag-assert         #x1200000050
  ;; Failed to read fields.
  (:methods
    (turret-control-method-9 () none 9)
    (turret-control-method-10 () none 10)
    (turret-control-method-11 () none 11)
    (turret-control-method-12 () none 12)
    (turret-control-method-13 () none 13)
    (turret-control-method-14 () none 14)
    (turret-control-method-15 () none 15)
    (turret-control-method-16 () none 16)
    (turret-control-method-17 () none 17)
    )
  )
|#

#|
(deftype vehicle-guard-target-data (structure)
  ((tpos          vector :inline :offset-assert 0)
   (spos          vector :inline :offset-assert 16)
   (tvel          vector :inline :offset-assert 32)
   (svel          vector :inline :offset-assert 48)
   (tdir          vector :inline :offset-assert 64)
   (sdir          vector :inline :offset-assert 80)
   (to-target     vector :inline :offset-assert 96)
   (to-target-dir vector :inline :offset-assert 112)
   (temp          vector :inline :offset-assert 128)
   (target        basic          :offset-assert 144)
   (dist          float          :offset-assert 148)
   (inv-dist      float          :offset-assert 152)
   (attack-range  float          :offset-assert 156)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

#|
(deftype vehicle-guard (vehicle)
  ()
  :method-count-assert 159
  :size-assert         #x434
  :flag-assert         #x9f03c00434
  ;; Failed to read fields.
  (:methods
    (hostile () _type_ :state 144)
    (stop-and-shoot () _type_ :state 145)
    (slow-pursuit () _type_ :state 146)
    (vehicle-guard-method-147 () none 147)
    (vehicle-guard-method-148 () none 148)
    (waiting-ambush () _type_ :state 149)
    (vehicle-guard-method-150 () none 150)
    (vehicle-guard-method-151 () none 151)
    (vehicle-guard-method-152 () none 152)
    (vehicle-guard-method-153 () none 153)
    (vehicle-guard-method-154 () none 154)
    (vehicle-guard-method-155 () none 155)
    (vehicle-guard-method-156 () none 156)
    (vehicle-guard-method-157 () none 157)
    (vehicle-guard-method-158 () none 158)
    )
  )
|#

;; (define-extern vehicle-los-clear? function)
;; (define-extern vehicle-draw-beam function)
;; (define-extern vehicle-draw-laser-spot function)
;; (define-extern vehicle-draw-laser function)
;; (define-extern vehicle-guard-choose-branch function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transport                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-turret (process-focusable)
  ((turret-jm basic                  :offset-assert 200)
   (turret    turret-control :inline :offset-assert 204)
   (target    uint64                 :offset-assert 284)
   )
  :method-count-assert 31
  :size-assert         #x128
  :flag-assert         #x1f00b00128
  (:methods
    (idle () _type_ :state 27)
    (vehicle-turret-method-28 () none 28)
    (vehicle-turret-method-29 () none 29)
    (vehicle-turret-method-30 () none 30)
    )
  )
|#

#|
(deftype transport-params (structure)
  ((spawn-pos vector     :inline :offset-assert 0)
   (quat      quaternion :inline :offset-assert 16)
   (nav-mesh  basic              :offset-assert 32)
   (max-guard uint32             :offset-assert 36)
   (max-time  float              :offset-assert 40)
   (turret?   basic              :offset-assert 44)
   (speeches? basic              :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype transport (process-focusable)
  ((y-dest                float   :offset-assert 200)
   (last-guard-spawn-time time-frame  :offset-assert 204)
   (nav-mesh              basic   :offset-assert 212)
   (spawn-side            uint32  :offset-assert 216)
   (spawn?                basic   :offset-assert 220)
   (leave-time            time-frame  :offset-assert 228)
   (max-guard             uint32  :offset-assert 236)
   (count-guard           uint32  :offset-assert 240)
   (max-time              float   :offset-assert 244)
   (ambient-sound-id      uint32  :offset-assert 248)
   (turret                uint64  :offset-assert 252)
   )
  :method-count-assert 36
  :size-assert         #x108
  :flag-assert         #x2400900108
  (:methods
    (come-down () _type_ :state 27)
    (idle () _type_ :state 28)
    (leave () _type_ :state 29)
    (die-fast () _type_ :state 30)
    (transport-method-31 () none 31)
    (transport-method-32 () none 32)
    (transport-method-33 () none 33)
    (transport-method-34 () none 34)
    (transport-method-35 () none 35)
    )
  )
|#

;; (define-extern *transport-turret-state-info* object)
;; (define-extern vehicle-turret-init-by-other function)
;; (define-extern *transport-turret-control-info* object)
;; (define-extern transport-event-handler function)
;; (define-extern transport-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bike                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bike-base (vehicle)
  ()
  :method-count-assert 144
  :size-assert         #x370
  :flag-assert         #x9002f00370
  (:methods
    )
  )
|#

#|
(deftype bikea (bike-base)
  ((fin-fl  basic  :offset-assert 876)
   (fin-fr  basic  :offset-assert 880)
   (fin-rl  basic  :offset-assert 884)
   (fin-rr  basic  :offset-assert 888)
   (rudder  basic  :offset-assert 892)
   (brake-l basic  :offset-assert 896)
   (brake-r basic  :offset-assert 900)
   )
  :method-count-assert 144
  :size-assert         #x38c
  :flag-assert         #x900310038c
  (:methods
    )
  )
|#

#|
(deftype bikeb (bike-base)
  ((fin-rl   basic  :offset-assert 876)
   (fin-rr   basic  :offset-assert 880)
   (rudder   basic  :offset-assert 884)
   (rudder-f basic  :offset-assert 888)
   (brake-l  basic  :offset-assert 892)
   (brake-r  basic  :offset-assert 896)
   (flap-l   basic  :offset-assert 900)
   (flap-r   basic  :offset-assert 904)
   )
  :method-count-assert 144
  :size-assert         #x390
  :flag-assert         #x9003100390
  (:methods
    )
  )
|#

#|
(deftype bikec (bike-base)
  ((fin-fl    basic  :offset-assert 876)
   (fin-fr    basic  :offset-assert 880)
   (fin-rl    basic  :offset-assert 884)
   (fin-rr    basic  :offset-assert 888)
   (fin2-fl   basic  :offset-assert 892)
   (fin2-fr   basic  :offset-assert 896)
   (rudder    basic  :offset-assert 900)
   (brake-l   basic  :offset-assert 904)
   (brake-r   basic  :offset-assert 908)
   (spoiler-l basic  :offset-assert 912)
   (spoiler-r basic  :offset-assert 916)
   )
  :method-count-assert 144
  :size-assert         #x39c
  :flag-assert         #x900320039c
  (:methods
    )
  )
|#

#|
(deftype guard-bike (vehicle-guard)
  ((turret-jm basic  :offset-assert 1072)
   )
  :method-count-assert 159
  :size-assert         #x438
  :flag-assert         #x9f03c00438
  (:methods
    )
  )
|#

;; (define-extern *bike-explosion-info* vehicle-explosion-info)
;; (define-extern *bikea-constants* object)
;; (define-extern *bikeb-constants* object)
;; (define-extern *bikec-constants* object)
;; (define-extern *guard-bike-constants* object)
;; (define-extern *guard-bike-turret-control-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; car                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype car-base (vehicle)
  ((rider-hand-joint-array UNKNOWN 2 :offset-assert 876)
   )
  :method-count-assert 144
  :size-assert         #x372
  :flag-assert         #x9003000372
  (:methods
    )
  )
|#

#|
(deftype cara (car-base)
  ((steering-wheel-l basic  :offset-assert 880)
   (steering-wheel-r basic  :offset-assert 884)
   (fin-fl           basic  :offset-assert 888)
   (fin-fr           basic  :offset-assert 892)
   (fin-rl           basic  :offset-assert 896)
   (fin-rr           basic  :offset-assert 900)
   (rudder-l         basic  :offset-assert 904)
   (rudder-r         basic  :offset-assert 908)
   (rudder           basic  :offset-assert 912)
   )
  :method-count-assert 144
  :size-assert         #x398
  :flag-assert         #x9003200398
  (:methods
    )
  )
|#

#|
(deftype carb (car-base)
  ((steering-wheel-l basic  :offset-assert 880)
   (steering-wheel-r basic  :offset-assert 884)
   (fin-fl           basic  :offset-assert 888)
   (fin-fr           basic  :offset-assert 892)
   (fin-rl           basic  :offset-assert 896)
   (fin-rr           basic  :offset-assert 900)
   )
  :method-count-assert 144
  :size-assert         #x38c
  :flag-assert         #x900310038c
  (:methods
    )
  )
|#

#|
(deftype carc (car-base)
  ((steering-wheel basic  :offset-assert 880)
   (fin-fl         basic  :offset-assert 884)
   (fin-fr         basic  :offset-assert 888)
   (fin-rl         basic  :offset-assert 892)
   (fin-rr         basic  :offset-assert 896)
   (fin2-rl        basic  :offset-assert 900)
   (fin2-rr        basic  :offset-assert 904)
   )
  :method-count-assert 144
  :size-assert         #x390
  :flag-assert         #x9003100390
  (:methods
    )
  )
|#

#|
(deftype hellcat (vehicle-guard)
  ((turret-jm basic  :offset-assert 1072)
   )
  :method-count-assert 159
  :size-assert         #x438
  :flag-assert         #x9f03c00438
  (:methods
    )
  )
|#

;; (define-extern *car-explosion-info* vehicle-explosion-info)
;; (define-extern *cara-constants* object)
;; (define-extern *carb-constants* object)
;; (define-extern *carc-constants* object)
;; (define-extern *hellcat-constants* object)
;; (define-extern *hellcat-front-turret-control-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; test-bike                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype test-bike (bikec)
  ()
  :method-count-assert 144
  :size-assert         #x39c
  :flag-assert         #x900320039c
  (:methods
    )
  )
|#

#|
(deftype evan-test-bike (bikea)
  ()
  :method-count-assert 144
  :size-assert         #x38c
  :flag-assert         #x900310038c
  (:methods
    )
  )
|#

;; (define-extern *test-bike-constants* object)
;; (define-extern *evan-test-bike-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; test-car                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype test-car (cara)
  ()
  :method-count-assert 144
  :size-assert         #x398
  :flag-assert         #x9003200398
  (:methods
    )
  )
|#

;; (define-extern *test-car-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype iter-seg (structure)
  ((self        basic               :offset-assert 0)
   (score       float               :offset-assert 4)
   (seg         nav-segment         :offset-assert 8)
   (cp-plane    plane       :inline :offset-assert 16)
   (desired-dir vector      :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern *citizen-debug* object)
;; (define-extern citizen-init-by-other function)
;; (define-extern citizen-travel-anim function)
;; (define-extern iter-seg-clear-path function)
;; (define-extern iter-seg-new-dir function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; civilian                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype civilian-anim-info (structure)
  ((anim-index       UNKNOWN 2 :offset-assert 0)
   (anim-index-front int32     :offset-assert 0)
   (anim-index-back  int32     :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype civilian-global-info (basic)
  ((prev-yellow-hit                int8      :offset-assert 4)
   (prev-blue-hit                  int8      :offset-assert 5)
   (knocked                        UNKNOWN 2 :offset-assert 8)
   (anim-knocked-front             int32     :offset-assert 8)
   (anim-knocked-back              int32     :offset-assert 12)
   (knocked-land                   UNKNOWN 2 :offset-assert 16)
   (anim-knocked-front-land        int32     :offset-assert 16)
   (anim-knocked-back-land         int32     :offset-assert 20)
   (yellow-hit-anim                UNKNOWN 1 :offset-assert 24)
   (blue-hit-anim                  UNKNOWN 3 :offset-assert 32)
   (anim-cover-head-start          int32     :offset-assert 56)
   (anim-cover-head-loop           int32     :offset-assert 60)
   (anim-cover-head-end            int32     :offset-assert 64)
   (car-stance-anim                int32     :offset-assert 68)
   (bike-stance-anim               int32     :offset-assert 72)
   (get-in-car-anim                int32     :offset-assert 76)
   (get-on-bike-anim               int32     :offset-assert 80)
   (seat-flag                      uint8     :offset-assert 84)
   (speech-ambient                 int8      :offset-assert 85)
   (speech-alert                   int8      :offset-assert 86)
   (speech-cower                   int8      :offset-assert 87)
   (speech-touched-by-player       int8      :offset-assert 88)
   (speech-shot-by-player          int8      :offset-assert 89)
   (speech-avoiding-player-vehicle int8      :offset-assert 90)
   (speech-hit-by-player-vehicle   int8      :offset-assert 91)
   (speech-player-stealing-vehicle int8      :offset-assert 92)
   )
  :method-count-assert 9
  :size-assert         #x5d
  :flag-assert         #x90000005d
  )
|#

#|
(deftype civilian (citizen)
  ((info              basic          :offset-assert 960)
   (anim-panic-run    int32          :offset-assert 964)
   (anim-on-ground    int32          :offset-assert 968)
   (anim-dive         int32          :offset-assert 972)
   (anim-get-up-front int32          :offset-assert 976)
   (anim-get-up-back  int32          :offset-assert 980)
   (last-second-pos   vector :inline :offset-assert 988)
   (last-distance     float          :offset-assert 1004)
   (next-time         time-frame         :offset-assert 1012)
   (dive-target-point vector :inline :offset-assert 1020)
   (dive-reaction     float          :offset-assert 1036)
   (allow-dive        basic          :offset-assert 1040)
   (dive-finished?    basic          :offset-assert 1044)
   (hit-face          uint32         :offset-assert 1048)
   (seat              int32          :offset-assert 1052)
   )
  :method-count-assert 218
  :size-assert         #x424
  :flag-assert         #xda03b00424
  (:methods
    (avoid-danger () _type_ :state 201)
    (clear-path () _type_ :state 202)
    (on-ground () _type_ :state 203)
    (dive () _type_ :state 204)
    (get-up-front () _type_ :state 205)
    (get-up-back () _type_ :state 206)
    (cower-ground () _type_ :state 207)
    (wait-for-ride () _type_ :state 208)
    (move-to-vehicle () _type_ :state 209)
    (board-vehicle () _type_ :state 210)
    (ride () _type_ :state 211)
    (exit-vehicle () _type_ :state 212)
    (wait-at-dest () _type_ :state 213)
    (civilian-method-214 () none 214)
    (civilian-method-215 () none 215)
    (civilian-method-216 () none 216)
    (civilian-method-217 () none 217)
    )
  )
|#

;; (define-extern civilian-flee-post function)
;; (define-extern civilian-avoid-danger-post function)
;; (define-extern civilian-avoid-danger-post2 function)
;; (define-extern civilian-clear-path-post function)
;; (define-extern civilian-clear-path-post2 function)
;; (define-extern civilian-falling-post function)
;; (define-extern do-spline2 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guard-anim-info (UNKNOWN)
  ((anim-index       UNKNOWN 2 :offset-assert 0)
   (anim-index-front int32     :offset-assert 0)
   (anim-index-back  int32     :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype guard-global-info (UNKNOWN)
  ((prev-yellow-hit         int8      :offset-assert 4)
   (prev-blue-hit           int8      :offset-assert 5)
   (knocked                 UNKNOWN 2 :offset-assert 8)
   (knocked-land            UNKNOWN 2 :offset-assert 16)
   (anim-knocked-front      int32     :offset-assert 8)
   (anim-knocked-back       int32     :offset-assert 12)
   (anim-knocked-front-land int32     :offset-assert 16)
   (anim-knocked-back-land  int32     :offset-assert 20)
   (yellow-hit-anim         UNKNOWN 2 :offset-assert 24)
   (yellow-land-anim        UNKNOWN 2 :offset-assert 40)
   (blue-hit-anim           UNKNOWN 1 :offset-assert 56)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype guard-shoot-info (UNKNOWN)
  ((anim-index int32  :offset-assert 0)
   (start      float  :offset-assert 4)
   (end        float  :offset-assert 8)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype crimson-guard (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *crimson-guard-global-info* guard-global-info)
;; (define-extern *crimson-guard-nav-enemy-info* nav-enemy-info)
;; (define-extern *guard-min-id-hack* object)
;; (define-extern do-spline function)
;; (define-extern spread-lightning-lazer function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-norm                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-norm (civilian)
  ()
  :method-count-assert 219
  :size-assert         #x424
  :flag-assert         #xdb03b00424
  (:methods
    (knocked-off-vehicle () _type_ :state 218)
    )
  )
|#

;; (define-extern *citizen-norm-global-info* civilian-global-info)
;; (define-extern *citizen-norm-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-fat                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-fat (civilian)
  ()
  :method-count-assert 218
  :size-assert         #x424
  :flag-assert         #xda03b00424
  (:methods
    )
  )
|#

;; (define-extern *citizen-fat-global-info* civilian-global-info)
;; (define-extern *citizen-fat-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-chick                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-chick (civilian)
  ()
  :method-count-assert 218
  :size-assert         #x424
  :flag-assert         #xda03b00424
  (:methods
    )
  )
|#

;; (define-extern *citizen-chick-global-info* civilian-global-info)
;; (define-extern *citizen-chick-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-enemy                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-enemy (citizen)
  ((next-update-target uint64              :offset-assert 964)
   (minimap            connection-minimap  :offset-assert 972)
   )
  :method-count-assert 203
  :size-assert         #x3d4
  :flag-assert         #xcb036003d4
  (:methods
    (citizen-enemy-method-201 () none 201)
    (citizen-enemy-method-202 () none 202)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-predator             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-predator-shot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype metalhead-predator (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *metalhead-predator-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-grunt                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-grunt (citizen-enemy)
  ((patrol-anim            grunt-anim-info         :offset-assert 976)
   (charge-anim            grunt-anim-info         :offset-assert 980)
   (attack-anim            grunt-anim-info         :offset-assert 984)
   (knocked-anim           grunt-anim-info         :offset-assert 988)
   (yellow-hit-anim        grunt-anim-info         :offset-assert 992)
   (blue-hit-anim          grunt-anim-info         :offset-assert 996)
   (intro-path             basic                   :offset-assert 1000)
   (circle-radial-dist     float                   :offset-assert 240)
   (use-charge-anim-index  int8                    :offset-assert 1008)
   (knocked-anim-index     int8                    :offset-assert 1009)
   (jumping-ambush-path-pt int8                    :offset-assert 1010)
   (grunt-flags            uint8                   :offset-assert 1011)
   (state-timeout2         uint64                  :offset-assert 1012)
   (next-warn-time         time-frame                  :offset-assert 1020)
   (dest                   vector          :inline :offset-assert 1036)
   (focus-pos              vector          :inline :offset-assert 348)
   )
  :method-count-assert 212
  :size-assert         #x430
  :flag-assert         #xd403b00430
  (:methods
    (attack () _type_ :state 203)
    (falling-ambush () _type_ :state 204)
    (jumping-ambush () _type_ :state 205)
    (jumping-ambush-cont () _type_ :state 206)
    (wait-for-focus () _type_ :state 207)
    (spin-attack () _type_ :state 208)
    (metalhead-grunt-method-209 () none 209)
    (metalhead-grunt-method-210 () none 210)
    (metalhead-grunt-method-211 () none 211)
    )
  )
|#

;; (define-extern *metalhead-grunt-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-flitter              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-flitter (citizen-enemy)
  ((move-angle       float          :offset-assert 976)
   (heading          basic          :offset-assert 980)
   (change-dir-time  time-frame         :offset-assert 988)
   (last-change-dir  uint64         :offset-assert 996)
   (off-screen-timer uint64         :offset-assert 1004)
   (amb-sound-timer  uint64         :offset-assert 1012)
   (attack-time      time-frame         :offset-assert 1020)
   (target-pos       vector :inline :offset-assert 1036)
   (attack-pos       vector :inline :offset-assert 1052)
   (base-height      float          :offset-assert 1068)
   )
  :method-count-assert 210
  :size-assert         #x434
  :flag-assert         #xd203c00434
  (:methods
    (attack () _type_ :state 203)
    (ambush-jumping () _type_ :state 204)
    (metalhead-flitter-method-205 () none 205)
    (metalhead-flitter-method-206 () none 206)
    (metalhead-flitter-method-207 () none 207)
    (metalhead-flitter-method-208 () none 208)
    (metalhead-flitter-method-209 () none 209)
    )
  )
|#

;; (define-extern *metalhead-flitter-nav-enemy-info* nav-enemy-info)
;; (define-extern metalhead-flitter-fall-and-play-death-anim function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-engine                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype traffic-find-segment-struct (UNKNOWN)
  ((best-seg    nav-segment         :offset-assert 0)
   (best-rating float               :offset-assert 4)
   (dir         vector      :inline :offset-assert 16)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *traffic-suppress-activation* object)
;; (define-extern *mysql-nav-graph* object)
;; (define-extern *traffic-rigid-body-queue* object)
;; (define-extern get-level-nav-graph-by-id function)
;; (define-extern add-debug-line-arrow function)
;; (define-extern traffic-los-clear? function)
;; (define-extern *guard-target-spots* array)
;; (define-extern *guard-id-spots* array)
;; (define-extern *guard-status-spots* array)
;; (define-extern update-guard-status-spots function)
;; (define-extern generate-target-spots function)
;; (define-extern *alert-level-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail-graph                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *trail-graph* trail-graph)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype trail-vis-work (structure)
  ((best-count    uint32          :offset-assert 0)
   (best-dist     float           :offset-assert 4)
   (start-conn-id uint32          :offset-assert 8)
   (p0            vector  :inline :offset-assert 16)
   (p1            vector  :inline :offset-assert 32)
   (best-node-id  UNKNOWN 64      :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern *trail-graph* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-manager                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype traffic-manager (process)
  ((traffic-engine   basic                               :offset-assert 124)
   (fast-spawn       basic                               :offset-assert 128)
   (dark-guard-ratio int32                               :offset-assert 132)
   (spawn-params     traffic-object-spawn-params :inline :offset-assert 140)
   )
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:methods
    (traffic-manager-method-9 () none 9)
    (traffic-manager-method-10 () none 10)
    (traffic-manager-method-11 () none 11)
    (traffic-manager-method-12 () none 12)
    (traffic-manager-method-13 () none 13)
    (idle () _type_ :state 14)
    (active () _type_ :state 15)
    (traffic-manager-method-16 () none 16)
    (traffic-manager-method-17 () none 17)
    (traffic-manager-method-18 () none 18)
    (traffic-manager-method-19 () none 19)
    (traffic-manager-method-20 () none 20)
    (traffic-manager-method-21 () none 21)
    )
  )
|#

;; (define-extern *traffic-engine* object)
;; (define-extern *traffic-fast-spawn* object)
;; (define-extern draw-city-info function)
;; (define-extern vehicle-spawn function)
;; (define-extern citizen-spawn function)
;; (define-extern traffic-object-spawn function)
;; (define-extern type-from-vehicle-type function)
;; (define-extern traffic-manager-event-handler function)
;; (define-extern traffic-manager-init-by-other function)
(define-extern traffic-start (function none))
(define-extern traffic-kill (function none))
;; (define-extern riders-on function)
;; (define-extern riders-off function)
;; (define-extern ctywide-login function)
;; (define-extern ctywide-activate function)
;; (define-extern *traffic-alert-level-force* object)
;; (define-extern lwide-activate function)
;; (define-extern lwide-deactivate function)
;; (define-extern ctywide-deactivate function)
;; (define-extern ctywide-entity-hack function)
;; (define-extern lwide-entity-hack function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *security-texture-anim-array* texture-anim-array)
;; (define-extern set-security-color! function)
;; (define-extern set-security-flash! function)
;; (define-extern set-security-texture-masks! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctywide-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype citywide-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern birth-func-race-poster function)
;; (define-extern birth-func-ctywide-baron-propoganda-ticker-rotate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype security-wall (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype fruit-stand (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cty-fruit-stand (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype cty-guard-turret (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype parking-spot (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype propa (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype baron-statue (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype burning-bush (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype barons-ship-lores (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype lurker-pipe-lid (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype ctyn-lamp (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern *fruit-check-ground-counter* object)
;; (define-extern fruit-check-ground-bounce function)
;; (define-extern fruit-sparticle-next-on-mode-1 function)
;; (define-extern fruit-stand-event-handler function)
;; (define-extern *cty-guard-turret-exploder-params* joint-exploder-static-params)
;; (define-extern cty-guard-turret-event-handler function)
;; (define-extern *propa-sounds* array)
;; (define-extern *propa-sounds-class-3* array)
;; (define-extern *propa-sounds-class-2* array)
;; (define-extern *propa-sounds-class-1* array)
;; (define-extern *propa-sounds-metalheads* array)
;; (define-extern *propa-sounds-baron-construction* array)
;; (define-extern propa-pu->knocked-type function)
;; (define-extern *ctyn-lamp-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-tasks                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-bb-racepoint-info (structure)
  ((bike-pos   vector :inline :offset-assert 0)
   (end-pos    vector :inline :offset-assert 16)
   (bike-angle float          :offset-assert 32)
   (map        basic          :offset-assert 36)
   (time       float          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

;; (define-extern wait-for-speech-end function)
;; (define-extern *city-bb-racepoint-info* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-speech                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern restore-city-speeches function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype boat-manager (process)
  ((mesh  basic     :offset-assert 124)
   (paths UNKNOWN 4 :offset-assert 128)
   )
  :method-count-assert 16
  :size-assert         #x94
  :flag-assert         #x1000200094
  (:methods
    (boat-manager-method-9 () none 9)
    (boat-manager-method-10 () none 10)
    (boat-manager-method-11 () none 11)
    (boat-manager-method-12 () none 12)
    (boat-manager-method-13 () none 13)
    (idle () _type_ :state 14)
    (boat-manager-method-15 () none 15)
    )
  )
|#

#|
(deftype boat-base (vehicle)
  ((angle      float   :offset-assert 876)
   (y-rot      float   :offset-assert 880)
   (path-num   uint32  :offset-assert 884)
   (path-index float   :offset-assert 888)
   )
  :method-count-assert 149
  :size-assert         #x380
  :flag-assert         #x9503000380
  (:methods
    (boat-base-method-144 () none 144)
    (boat-base-method-145 () none 145)
    (boat-base-method-146 () none 146)
    (boat-base-method-147 () none 147)
    (boat-base-method-148 () none 148)
    )
  )
|#

#|
(deftype barge (boat-base)
  ((engine   uint32  :offset-assert 892)
   (bow-wash uint32  :offset-assert 896)
   )
  :method-count-assert 149
  :size-assert         #x388
  :flag-assert         #x9503100388
  (:methods
    )
  )
|#

;; (define-extern *barge-constants* object)
;; (define-extern *boat-nav-callback-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-pilot                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *pilot-mods* surface)
;; (define-extern target-pilot-handler function)
;; (define-extern target-pilot-pidax-enter function)
;; (define-extern target-pilot-pidax-exit function)
;; (define-extern target-pilot-exit function)
;; (define-extern target-pilot-init function)
;; (define-extern pilot-on-ground? function)
;; (define-extern target-pilot-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-pilot-start state)
;; (define-extern target-pilot-bike-anim-loop function)
;; (define-extern target-pilot-car-anim-loop function)
;; (define-extern target-daxter-pilot-car-anim-loop function)
;; (define-extern target-pilot-trans function)
;; (define-extern target-pilot-signal-ready function)
;; (define-extern target-pilot-stance state)
;; (define-extern target-pilot-impact state)
;; (define-extern *pilot-get-on-mods* object)
;; (define-extern target-pilot-get-on state)
;; (define-extern *pilot-get-off-mods* object)
;; (define-extern target-pilot-get-off state)
;; (define-extern target-pilot-grab state)
;; (define-extern target-pilot-clone-anim state)
;; (define-extern target-pilot-edge-grab state)
;; (define-extern target-pilot-hit state)
;; (define-extern target-pilot-death state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kid-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kid (bot)
  ((travel-anim-interp  float   :offset-assert 988)
   (arrest-attempt-time time-frame  :offset-assert 996)
   (arrestor-handle     uint64  :offset-assert 1004)
   )
  :method-count-assert 235
  :size-assert         #x3f8
  :flag-assert         #xeb038003f8
  (:methods
    (kid-method-225 () none 225)
    (kid-method-226 () none 226)
    (kid-method-227 () none 227)
    (kid-method-228 () none 228)
    (kid-method-229 () none 229)
    (kid-method-230 () none 230)
    (kid-method-231 () none 231)
    (kid-method-232 () none 232)
    (kid-method-233 () none 233)
    (kid-method-234 () none 234)
    )
  )
|#

#|
(deftype kidt-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kor-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kor (bot)
  ((travel-anim-interp  float   :offset-assert 988)
   (arrest-attempt-time time-frame  :offset-assert 996)
   (arrestor-handle     uint64  :offset-assert 1004)
   )
  :method-count-assert 235
  :size-assert         #x3f8
  :flag-assert         #xeb038003f8
  (:methods
    (kor-method-225 () none 225)
    (kor-method-226 () none 226)
    (kor-method-227 () none 227)
    (kor-method-228 () none 228)
    (kor-method-229 () none 229)
    (kor-method-230 () none 230)
    (kor-method-231 () none 231)
    (kor-method-232 () none 232)
    (kor-method-233 () none 233)
    (kor-method-234 () none 234)
    )
  )
|#

#|
(deftype kort-wait-spot (ai-task)
  ((check-done   basic     :offset-assert 32)
   (which-spot   int8      :offset-assert 36)
   (num-spots    uint8     :offset-assert 37)
   (spot-indexes UNKNOWN 6 :offset-assert 38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hal3-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hal3-course (bot-course)
  ((transport uint64  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  ;; field default-check-too-far uses ~A with a signed load
  )
|#

#|
(deftype hal-help-kid (hal)
  ((nav-mesh   basic                :offset-assert 1020)
   (alley-bbox bounding-box :inline :offset-assert 1036)
   (suppress   UNKNOWN      2       :offset-assert 1068)
   )
  :method-count-assert 229
  :size-assert         #x490
  :flag-assert         #xe504100490
  (:methods
    (hal-help-kid-method-227 () none 227)
    (hal-help-kid-method-228 () none 228)
    )
  )
|#

;; (define-extern *hal3-course* hal3-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kid-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kid                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *kid-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kid-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kor-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kor                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kor-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern *kor-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kor-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kid3-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern kid-update-during-battle function)
;; (define-extern *kid3-course* bot-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kor3-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern kor-update-during-battle function)
;; (define-extern *kor3-course* bot-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruins-ocean                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-spheres-ruins* object)
;; (define-extern *ocean-colors-ruins* object)
;; (define-extern *ocean-near-indices-ruins* ocean-near-indices)
;; (define-extern *ocean-trans-indices-ruins* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-ruins* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-ruins* ocean-mid-masks)
;; (define-extern *ocean-map-ruins* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruins-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flag (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype ruins-precipice (process-drawable)
  ((play? basic  :offset-assert 196)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

;; (define-extern ruins-slide-sparks function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mechtest-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mechblock (process-drawable)
  ((origin         vector :inline :offset-assert 204)
   (drop-point     vector :inline :offset-assert 252)
   (allow-drag?    basic          :offset-assert 268)
   (reset-on-land? basic          :offset-assert 272)
   (hit-something? basic          :offset-assert 276)
   (attack-id      uint32         :offset-assert 280)
   (next-entity    basic          :offset-assert 284)
   )
  :method-count-assert 25
  :size-assert         #x124
  :flag-assert         #x1900b00124
  (:methods
    (idle () _type_ :state 20)
    (carry () _type_ :state 21)
    (drag () _type_ :state 22)
    (fall () _type_ :state 23)
    (wait () _type_ :state 24)
    )
  )
|#

#|
(deftype throwblock (mechblock)
  ()
  :method-count-assert 25
  :size-assert         #x124
  :flag-assert         #x1900b00124
  (:methods
    )
  )
|#

#|
(deftype pushblock (mechblock)
  ()
  :method-count-assert 25
  :size-assert         #x124
  :flag-assert         #x1900b00124
  (:methods
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruins-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ruins-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

;; (define-extern check-drop-level-ruins-rubble function)
;; (define-extern ruins-bird-bob-func function)
;; (define-extern sparticle-ruins-bird-moon function)
;; (define-extern check-drop-level-ruins-tower-userdata-nosplat function)
;; (define-extern check-drop-level-ruins-tower-userdata function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; breakable-wall                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rbw-side (basic)
  ((break-anim             basic          :offset-assert 4)
   (end-anim               basic          :offset-assert 8)
   (break-prim-mask        uint8          :offset-assert 12)
   (break-root-prim-joint  int16          :offset-assert 14)
   (break-bounds-joint     int16          :offset-assert 16)
   (break-root-prim-sphere sphere :inline :offset-assert 32)
   (break-bounds-sphere    sphere :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype rbw-info (basic)
  ((skel-group basic  :offset-assert 4)
   (anim       basic  :offset-assert 8)
   (sides      basic  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype ruins-breakable-wall (process-focusable)
  ((info     basic  :offset-assert 200)
   (side     basic  :offset-assert 204)
   (nav-mesh basic  :offset-assert 208)
   )
  :method-count-assert 31
  :size-assert         #xd8
  :flag-assert         #x1f006000d8
  (:methods
    (unbroken () _type_ :state 27)
    (hit () _type_ :state 28)
    (broken () _type_ :state 29)
    (ruins-breakable-wall-method-30 () none 30)
    )
  )
|#

;; (define-extern *rbw-infos* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pillar-collapse                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ruins-pillar-collapse (process-drawable)
  ((player-attack-id int32     :offset-assert 196)
   (fall-anim-index  int32     :offset-assert 200)
   (hit-points       int8      :offset-assert 204)
   (mesh-trans       UNKNOWN 3 :offset-assert 205)
   (mesh-joint       UNKNOWN 2 :offset-assert 208)
   (deadly?          basic     :offset-assert 212)
   (art-name         basic     :offset-assert 216)
   (anim             basic     :offset-assert 220)
   )
  :method-count-assert 24
  :size-assert         #xe4
  :flag-assert         #x18007000e4
  (:methods
    (idle () _type_ :state 20)
    (bump () _type_ :state 21)
    (hit () _type_ :state 22)
    (fall () _type_ :state 23)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ruins-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sinking-plat (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 380)
   )
  :method-count-assert 57
  :size-assert         #x190
  :flag-assert         #x3901100190
  (:methods
    )
  )
|#

#|
(deftype beam (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (collapse () _type_ :state 21)
    )
  )
|#

#|
(deftype ruins-bridge (drop-plat)
  ()
  :method-count-assert 36
  :size-assert         #x140
  :flag-assert         #x2400c00140
  (:methods
    )
  )
|#

#|
(deftype ruins-drop-plat (drop-plat)
  ()
  :method-count-assert 36
  :size-assert         #x140
  :flag-assert         #x2400c00140
  (:methods
    )
  )
|#

;; (define-extern *ruins-sinking-platform-constants* object)
;; (define-extern ruins-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rapid-gunner                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rapid-gunner (nav-enemy)
  ((los              los-control :inline :offset-assert 604)
   (joint            basic               :offset-assert 752)
   (joint-blend      float               :offset-assert 756)
   (joint-enable     basic               :offset-assert 760)
   (shot-timer       uint64              :offset-assert 764)
   (predict-timer    uint64              :offset-assert 772)
   (target-prev-pos  vector      :inline :offset-assert 780)
   (target-next-pos  vector      :inline :offset-assert 796)
   (focus-dir        vector      :inline :offset-assert 812)
   (y-diff           float               :offset-assert 828)
   (shots-fired      uint32              :offset-assert 832)
   (spin-up-angle    float               :offset-assert 836)
   (spin-up-timer    uint64              :offset-assert 844)
   (shoot-anim-index int32               :offset-assert 852)
   (status-flags     uint64              :offset-assert 860)
   (start-pos        vector      :inline :offset-assert 876)
   (dest-pos         vector      :inline :offset-assert 892)
   (hop-dir          vector      :inline :offset-assert 908)
   (roam-radius      float               :offset-assert 924)
   )
  :method-count-assert 187
  :size-assert         #x3a4
  :flag-assert         #xbb033003a4
  (:methods
    (attack () _type_ :state 178)
    (spin-attack () _type_ :state 179)
    (hop () _type_ :state 180)
    (hop-turn () _type_ :state 181)
    (cool-down () _type_ :state 182)
    (reload () _type_ :state 183)
    (rapid-gunner-method-184 () none 184)
    (rapid-gunner-method-185 () none 185)
    (rapid-gunner-method-186 () none 186)
    )
  )
|#

#|
(deftype shield-gunner (rapid-gunner)
  ()
  :method-count-assert 187
  :size-assert         #x3a4
  :flag-assert         #xbb033003a4
  (:methods
    )
  )
|#

;; (define-extern *rapid-gunner-nav-enemy-info* nav-enemy-info)
;; (define-extern vector-average-copy! function)
;; (define-extern *aim-pos* object)
;; (define-extern rapid-gunner-common-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collection-task                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype krew-collection-item (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (krew-collection-item-method-22 () none 22)
    )
  )
|#

;; (define-extern krew-collection-item-init-by-other function)
;; (define-extern krew-collection-item-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyasha-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tanker-grunt (grunt)
  ((expensive-gnd-collide? basic  :offset-assert 688)
   )
  :method-count-assert 186
  :size-assert         #x2b8
  :flag-assert         #xba024002b8
  (:methods
    )
  )
|#

#|
(deftype tanker-juicer (juicer)
  ((expensive-gnd-collide? basic  :offset-assert 844)
   )
  :method-count-assert 185
  :size-assert         #x354
  :flag-assert         #xb902e00354
  (:methods
    )
  )
|#

#|
(deftype tanker-container (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (dormant () _type_ :state 20)
    (idle () _type_ :state 21)
    (tanker-container-method-22 () none 22)
    )
  )
|#

#|
(deftype tanker-crash (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (dormant () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )
|#

#|
(deftype tanker-deadly (process-drawable)
  ((track-joint int32          :offset-assert 196)
   (attack-id   uint32         :offset-assert 200)
   (die-time    time-frame         :offset-assert 204)
   (prev-pos    vector :inline :offset-assert 220)
   )
  :method-count-assert 22
  :size-assert         #xf0
  :flag-assert         #x16007000f0
  (:methods
    (active () _type_ :state 20)
    (die-fast () _type_ :state 21)
    )
  )
|#

;; (define-extern tanker-container-event-handler function)
;; (define-extern tanker-deadly-init-by-other function)
;; (define-extern tanker-spawn-deadly-barrels function)
;; (define-extern tanker-spawn-deadly-cab function)
;; (define-extern tanker-spawn-deadly-trailers function)
;; (define-extern tanker-spawn-deadly-container function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash4-course                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-tanker (ashelin)
  ((suppress traffic-suppression-params :inline :offset-assert 1036)
   )
  :method-count-assert 252
  :size-assert         #x439
  :flag-assert         #xfc03c00439
  (:methods
    (ashelin-tanker-method-251 () none 251)
    )
  )
|#

;; (define-extern *ash4-course* ashelin-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hip-trophy-a (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-d (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-f (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-g (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-i (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-j (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-n (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype hip-trophy-m (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hiphog-part (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  ;; Failed to read fields.
  )
|#

#|
(deftype hiphog-mirror-wf-pt (UNKNOWN)
  ((x float  :offset-assert 0)
   (y float  :offset-assert 4)
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern birth-func-rotate-minute function)
;; (define-extern birth-func-rotate-hour function)
;; (define-extern birth-func-rotate-second function)
;; (define-extern *hiphog-mirror-sheen-waveform* object)
;; (define-extern hiphog-mirror-sheen-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hip-door-b (com-airlock)
  ()
  :method-count-assert 28
  :size-assert         #x174
  :flag-assert         #x1c01000174
  (:methods
    )
  )
|#

#|
(deftype hip-whack-a-metal (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

#|
(deftype hip-mirror (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (idle () _type_ :state 20)
    )
  )
|#

#|
(deftype sig-npc (process-taskable)
  ()
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  (:methods
    )
  )
|#

;; (define-extern hiphog-activate function)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-upload                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *default-envmap-shader* adgif-shader)
(define-extern *generic-envmap-texture* texture)
