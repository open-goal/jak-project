
;; ----------------------
;; File - gcommon
;; Source Path - kernel/gcommon.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Types

(deftype vec4s (uint128)
  ((x float :offset 0)
   (y float :offset 32)
   (z float :offset 64)
   (w float :offset 96))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bfloat (basic)
  ((data float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype inline-array-class (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   ;; this is 16-byte aligned.
   ;; children of inline-array-class should define their own data which overlays this one.
   (_data            uint8  :score -50 :dynamic :offset 16)
   )
  (:methods (new (symbol type int) _type_ 0))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern format (function _varargs_ object))
(define-extern valid? (function object type basic basic object symbol))
(define-extern type-type? (function type type symbol))
(define-extern fact (function int int))
(define-extern delete-car! (function object object object))
(define-extern nmember (function basic object object))
(define-extern name= (function basic basic symbol))
(define-extern nothing (function none))
(define-extern identity (function object object))
(define-extern 1/ (function float float))
(define-extern + (function int int int))
(define-extern - (function int int int))
(define-extern * (function int int int))
(define-extern / (function int int int))
(define-extern ash (function int int int))
(define-extern mod (function int int int))
(define-extern rem (function int int int))
(define-extern abs (function int int))
(define-extern min (function int int int))
(define-extern max (function int int int))
(define-extern logior (function int int int))
(define-extern logand (function int int int))
(define-extern lognor (function int int int))
(define-extern logxor (function int int int))
(define-extern lognot (function int int))
(define-extern false-func (function symbol))
(define-extern true-func (function symbol))
(define-extern _format (function _varargs_ object))
(define-extern method-set! (function type int object none)) ;; may actually return function.
(define-extern basic-type? (function basic type symbol))
(define-extern find-parent-method (function type int function))
(define-extern ref (function object int object))
(define-extern last (function object object))
(define-extern member (function object object object))
(define-extern assoc (function object object object))
(define-extern assoce (function object object object))
(define-extern nassoc (function string object object))
(define-extern nassoce (function string object object))
(define-extern append! (function object object object))
(define-extern delete! (function object object pair))
(define-extern insert-cons! (function object object pair))
(define-extern sort (function pair (function object object object) pair))
(define-extern mem-copy! (function pointer pointer int pointer))
(define-extern qmem-copy<-! (function pointer pointer int pointer))
(define-extern qmem-copy->! (function pointer pointer int pointer))
(define-extern mem-set32! (function pointer int int pointer))
(define-extern mem-or! (function pointer pointer int pointer))
(define-extern print (function object object))
(define-extern printl (function object object))
(define-extern inspect (function object object))
(define-extern mem-print (function (pointer uint32) int symbol))
(define-extern print-tree-bitmask (function int int symbol))
(define-extern quad-copy! (function pointer pointer int none))
;; has issues:
(define-extern breakpoint-range-set! (function uint uint uint int))

;; - Symbols

(define-extern #f symbol)
(define-extern structure type)
(define-extern pair type)
(define-extern binteger type)
(define-extern type type)
;; built-in. these need to be listed so the type symbols have type of type
;; in the decompiler.
(define-extern symbol type)
(define-extern array type)
(define-extern number type)
(define-extern integer type)
(define-extern float type)
(define-extern object type)
(define-extern uint128 type)
(define-extern basic type)
(define-extern *print-column* binteger)
(define-extern *debug-segment* symbol)
(define-extern *trace-list* pair)

;; ----------------------
;; NO FILE
;; Unknowns / Built-Ins / Non-Original Types

(define-extern #t symbol)

(define-extern uint8 type)

(define-extern int8 type)

(define-extern int16 type)

(define-extern int128 type)

(define-extern pointer type)

(defenum kmalloc-flags
  :bitfield #t
  (align-16    4)
  (align-64    6)
  (align-256   8)
  (memset     12)
  (top        13)
  )

(defenum link-flag
    :bitfield #t
    :type int32
    (output-load-msg 0)
    (output-load-true-msg 1)
    (execute-login 2)
    (print-login 3)
    (force-debug 4)
    (fast-link 5)
    )

(defenum process-mask
    :bitfield #t :type uint32
    (execute         0) ;; 1
    (draw            1) ;; 2
    (pause           2) ;; 4
    (menu            3) ;; 8
    (progress        4) ;; 16
    (actor-pause     5) ;; 32
    (sleep           6) ;; 64
    (sleep-code      7) ;; 128
    (process-tree    8) ;; 256        not an actual process, just a "tree node" for organization
    (heap-shrunk     9) ;; 512
    (going          10) ;; 1024
    (movie          11) ;; 2048
    (movie-subject  12) ;; 4096
    (target         13) ;; 8192
    (sidekick       14) ;; 16384
    (crate          15) ;; 32768
    (collectable    16) ;; 65536
    (enemy          17) ;; 131072
    (camera         18) ;; 262144
    (platform       19) ;; 524288
    (ambient        20) ;; 1048576
    (entity         21) ;; 2097152
    (projectile     22) ;; 4194304
    (attackable     23) ;; 8388608
    (death          24) ;; 16777216
    )

(defenum timer-clock-selection
  :type uint8
  (busclk 0)
  (busclk/16 1)
  (busclk/256 2)
  (hblank 3)
  )

(defenum dma-tag-id
    :bitfield #f
    :type uint8
    (refe 0)      ;; addr=ADDR, ends after this transfer
    (cnt 1)       ;; addr=after tag, next-tag=after data
    (next 2)      ;; addr=after tag, next-tag=ADDR
    (ref 3)       ;; addr=ADDR, next-tag=after tag
    (refs 4)      ;; ref, but stall controled
    (call 5)      ;;
    (ret 6)       ;;
    (end 7)       ;; next, but ends.
    )

;; all these have mask (only applies to unpacks) and interrupt not set.
(defenum vif-cmd
    :bitfield #f
    :type uint8
    (nop          0)  ;; no-op, can still have irq set.
    (stcycl       1)  ;; set write recycle register
    (offset       2)  ;; set offset register
    (base         3)  ;; set base register
    (itop         4)  ;; set data pointer register (itops)
    (stmod        5)  ;; set mode register
    (mskpath3     6)  ;; set path 3 mask
    (mark         7)  ;; set mark register
    (pc-port      8)  ;; special tag for PC Port data.
    (flushe       16) ;; wait for end of microprogram
    (flush        17) ;; wait for end of microprogram and transfer (path1/path2)
    (flusha       19) ;; wait for end of microprogram and transfer (path1/path2/path3)
    (mscal        20) ;; activate microprogram (call)
    (mscalf       21) ;; flushe and activate (call)
    (mscnt        23) ;; activate microprogram (continue)
    (stmask       32) ;; set MASK register.
    (strow        48) ;; set filling data
    (stcol        49) ;; set filling data
    (mpg          74) ;; transfer microprogram
    (direct       80) ;; straight to GIF.
    (directhl     81)
    (unpack-s-32  96)
    (unpack-s-16  97)
    (unpack-s-8   98)
    ;; 99 is invalid
    (unpack-v2-32 100)
    (unpack-v2-16 101)
    (unpack-v2-8  102)
    ;; 103 is invalid
    (unpack-v3-32 104)
    (unpack-v3-16 105)
    (unpack-v3-8  106)
    ;; 107 is invalid
    (unpack-v4-32 108)
    (unpack-v4-16 109)
    (unpack-v4-8  110)
    (unpack-v4-5  111)
    (cmd-mask     239) ;; not sure what this is
    )

(defenum vif-cmd-32
    :bitfield #f
    :type uint32
    :copy-entries vif-cmd
    )

;; moved these here for the decompiler for now!
(defenum gs-prim-type
  :type uint8
  (point 0)
  (line 1)
  (line-strip 2)
  (tri 3)
  (tri-strip 4)
  (tri-fan 5)
  (sprite 6)
  )

(defenum gif-reg-id
  :bitfield #f
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (a+d 14)
  (nop 15)
  )

(defenum pad-buttons
    :bitfield #t
    :type uint32
    (select   0)
    (l3       1)
    (r3       2)
    (start    3)
    (up       4)
    (right    5)
    (down     6)
    (left     7)
    (l2       8)
    (r2       9)
    (l1       10)
    (r1       11)
    (triangle 12)
    (circle   13)
    (x        14)
    (square   15)
    )

(defenum gs-psm
    :bitfield #f
    :type uint8
    (ct32 0)
    (ct24 1)
    (ct16 2)
    (ct16s 10)
    (mt8 19)
    (mt4 20)
    (mt8h 27)
    (mt4hl 36)
    (mt4hh 44)
    (mz32 48)
    (mz24 49)
    (mz16 50)
    (mz16s 58)
    )

(defenum gs-reg
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (tex1-1 20)
  (tex1-2 21)
  (tex2-1 22)
  (tex2-2 23)
  (xyoffset-1 24)
  (xyoffset-2 25)
  (prmodecont 26)
  (prmode 27)
  (texclut 28)
  (scanmsk 34)
  (miptbp1-1 52)
  (miptbp1-2 53)
  (miptbp2-1 54)
  (miptbp2-2 55)
  (texa 59)
  (fogcol 61)
  (texflush 63)
  (scissor-1 64)
  (scissor-2 65)
  (alpha-1 66)
  (alpha-2 67)
  (dimx 68)
  (dthe 69)
  (colclamp 70)
  (test-1 71)
  (test-2 72)
  (pabe 73)
  (fba-1 74)
  (fba-2 75)
  (frame-1 76)
  (frame-2 77)
  (zbuf-1 78)
  (zbuf-2 79)
  (bitbltbuf 80)
  (trxpos 81)
  (trxreg 82)
  (trxdir 83)
  (hwreg 84)
  (signal 96)
  (finish 97)
  (label 98)
  )

(defenum gs-reg64
  :type uint64
  :copy-entries gs-reg
  )

(defenum file-kind
    :bitfield #f
    (level-bt 0) ;; aka bsp-header.
    (art-group 1)
    (tpage 2)
    (dir-tpage 3)
    (level-vs 4)
    (tx 5)
    (vis 6)
    )

(deftype res-tag-pair (uint64)
  ((lo  int32 :offset 0)
   (hi  int32 :offset 32)
   )
  ;; made-up type
  )

(defenum pat-material
  :type uint8
  (stone)
  (ice)
  (quicksand)
  (waterbottom)
  (tar)
  (sand)
  (wood)
  (grass)
  (pcmetal)
  (snow)
  (deepsnow)
  (hotcoals)
  (lava)
  (crwood)
  (gravel)
  (dirt)
  (metal)
  (straw)
  (tube)
  (swamp)
  (stopproj)
  (rotate)
  (neutral)
  )

(defenum pat-mode
  :type uint8
  (ground)
  (wall)
  (obstacle)
  )

(defenum pat-event
  :type uint8
  (none)
  (deadly)
  (endlessfall)
  (burn)
  (deadlyup)
  (burnup)
  (melt)
  )

(defenum pickup-type
  :type int32
  (none)
  (eco-yellow)
  (eco-red)
  (eco-blue)
  (eco-green)
  (money)
  (fuel-cell)
  (eco-pill)
  (buzzer)
  (eco-pill-random)
  )

(defenum load-msg-result
  :type uint16
  :bitfield #f
  (done 0)
  (error 1)
  (more 2)
  (aborted 3)
  (invalid 666)
  )

(defenum bucket-id
    :type int32
    :bitfield #f

    ;; 0
    ;; 1
    ;; 2
    (sky-draw          3) ;; actual sky and cloud framebuffer draws
    (ocean-mid-and-far 4) ;; actual ocean framebuffer draws for mid/transition/far

    (tfrag-tex0         5) ;; tfrag texture upload, level 0
    (tfrag-0            6) ;; tfrag draw, level 0
    (tfrag-near-0       7) ;; tfrag near draw, level 0
    (tie-near-0         8) ;; tie near draw, level 0
    (tie-0              9) ;; tie draw, level 0
    (merc-tfrag-tex0    10) ;; merc, with tfrag textures, level 0
    (generic-tfrag-tex0 11) ;; generic merc, with tfrag textures, level 0

    (tfrag-tex1         12) ;; tfrag texture upload, level 1
    (tfrag-1            13) ;; tfrag draw, level 1
    (tfrag-near-1       14) ;; tfrag near draw, level 1
    (tie-near-1         15) ;; tie near draw, level 1
    (tie-1              16) ;; tie draw, level 1
    (merc-tfrag-tex1    17) ;; merc, with tfrag textures, level 1
    (generic-tfrag-tex1 18) ;; generic merc, with tfrag textures, level 1

    (shrub-tex0       19)
    (shrub0           20)
    ;; 21 (likely shrub near)
    (shrub-billboard0 22)
    (shrub-trans0     23)
    (shrub-generic0   24)

    (shrub-tex1       25)
    (shrub1           26)
    ;; 27 (likely shrub near)
    (shrub-billboard1 28)
    (shrub-trans1     29)
    (shrub-generic1   30)

    (alpha-tex0         31)
    (tfrag-trans-0      32) ;; also sky blend
    (tfrag-trans-near-0 33)
    (tfrag-dirt-0       34)
    (tfrag-dirt-near-0  35)
    (tfrag-ice-0        36)
    (tfrag-ice-near-0   37)

    (alpha-tex1         38)
    (tfrag-trans-1      39) ;; also sky blend
    (tfrag-trans-near-1 40)
    (tfrag-dirt-1       41)
    (tfrag-dirt-near-1  42)
    (tfrag-ice-1        43)
    (tfrag-ice-near-1   44)

    (merc-alpha-tex    45)
    (generic-alpha-tex 46)

    (shadow 47)

    (pris-tex0     48)
    (merc-pris0    49)
    (generic-pris0 50)

    (pris-tex1     51)
    (merc-pris1    52)
    (generic-pris1 53)

    (eyes 54)

    (merc-pris-common    55)
    (generic-pris-common 56)

    (water-tex0 57)
    (merc-water0 58)
    (generic-water0 59)

    (water-tex1 60)
    (merc-water1 61)
    (generic-water1 62)

    (ocean-near 63) ; ocean
    (depth-cue 64)
    (common-page-tex 65)
    (sprite 66)
    (debug 67)
    (debug-no-zbuf 68)

    ;; extra buckets for pc port
    (subtitle 69)
    )

(define-extern sinteger type)

(define-extern wheel type)

(define-extern evilplant type)

(define-extern lavaspoutdrip type)

(defenum sound-command
  :type uint16
  (load-bank)
  (load-music)
  (unload-bank)
  (play)
  (pause-sound)
  (stop-sound)
  (continue-sound)
  (set-param)
  (set-master-volume)
  (pause-group)
  (stop-group)
  (continue-group)
  (get-irx-version)
  (set-falloff-curve)
  (set-sound-falloff)
  (reload-info)
  (set-language)
  (set-flava)
  (set-reverb)
  (set-ear-trans)
  (shutdown)
  (list-sounds)
  (unload-music)
  (set-fps)
  (set-mirror 201) ;; added
  )

;; flavors for music
(defenum music-flava
  :type uint8
  (racer 1)
  (flutflut 2)
  (to-maincave 3)
  (to-snow 4)
  (sage 5)
  (assistant 6)
  (birdlady 7)
  (mayor 8)
  (sculptor 9)
  (explorer 10)
  (sage-yellow 11)
  (sage-red 12)
  (sage-blue 13)
  (miners 14)
  (warrior 15)
  (geologist 16)
  (gambler 17)
  (sage-hut 18)
  (dock 19)
  (farmer 20)
  (jungleb-eggtop 21)
  (misty-boat 22)
  (misty-battle 23)
  (beach-sentinel 24)
  (beach-cannon 25)
  (beach-grotto 26)
  (citadel-center 27)
  (robocave 28)
  (robocave-top 29)
  (maincave 30)
  (darkcave 31)
  (snow-battle 32)
  (snow-cave 33)
  (snow-fort 34)
  (snow-balls 35)
  (levitator 36)
  (swamp-launcher 37)
  (swamp-battle 38)
  (jungle-temple-exit 39)
  (jungle-lurkerm 40)
  (jungle-temple-top 41)
  (rolling-gorge 42)
  (ogre-middle 43)
  (ogre-end 44)
  (lavatube-middle 45)
  (lavatube-end 46)
  (finalboss-middle 47)
  (finalboss-end 48)
  (default 49)
  )

;; - Enums
(defenum joint-mod-handler-mode
  :bitfield #t
  :type uint32
  (flex-blend 0)    ;; 1
  (look-at 1)       ;; 2
  (world-look-at 2) ;; 4
  (rotate 3)        ;; 8
  (joint-set 4)     ;; 16
  (joint-set* 5)    ;; 32
  ;; ??             ;; 64
  (reset 7)         ;; 128
  )

(defenum collide-list-enum
  (hit-by-player)
  (usually-hit-by-player)
  (hit-by-others)
  (player)
  )

(defenum entity-perm-status
  :bitfield #t
  :type uint16
  (bit-0 0)
  (bit-1 1)
  (dead 2)
  (bit-3 3)
  (bit-4 4)
  (user-set-from-cstage 5)
  (complete 6) ;; wrong!
  (bit-7 7)
  (real-complete 8)
  (bit-9 9)
  (bit-10 10)
  )

(defenum path-control-flag
  :bitfield #t
  :type uint32
  (display 0)
  (draw-line 1) ;; TODO - only seen it used to control debug drawing so far
  (draw-point 2) ;; TODO - only seen it used to control debug drawing so far
  (draw-text 3) ;; TODO - only seen it used to control debug drawing so far
  (not-found 4)
  )

(defenum nav-control-flags
  :bitfield #t
  :type uint32
  (display-marks 0)
  (navcf1 1) ;; TODO - nav-control::9
  (navcf2 2) ;; TODO - nav-control::9
  (navcf3 3) ;; TODO - nav-enemy::45 | nav-control::9
  (navcf4 4) ;; TODO - nav-control::9
  (navcf5 5) ;; TODO - nav-enemy::45 | ;; TODO - nav-control::9
  (navcf6 6) ;; TODO - nav-enemy::45 | ;; TODO - nav-control::9
  (navcf7 7) ;; TODO - nav-enemy::45 | ;; TODO - nav-control::9
  (navcf8 8)
  (navcf9 9) ;; TODO - nav-control::14 | 11
  (navcf10 10) ;; TODO - nav-enemy::nav-enemy-patrol-post
  (navcf11 11) ;; TODO - nav-control::28
  (navcf12 12) ;; TODO - rolling-lightning-mole::(enter nav-enemy-chase fleeing-nav-enemy)
  (navcf13 13)
  (navcf17 17) ;; TODO - nav-control::11
  (navcf18 18) ;; TODO - nav-control::11
  (navcf19 19) ;; TODO - nav-control::11 | 17
  (navcf20 20) ;; TODO - nav-mesh::28
  (navcf21 21) ;; TODO - nav-control::19
  )

(defenum task-status
  :type uint64
  (invalid 0)
  (unknown 1)
  (need-hint 2)
  (need-introduction 3)
  (need-reminder-a 4)
  (need-reminder 5)
  (need-reward-speech 6)
  (need-resolution 7)
  )

(defenum game-task
  :type uint8
  (none 0)
  (complete 1)
  (jungle-eggtop 2)
  (jungle-lurkerm 3)
  (jungle-tower 4)
  (jungle-fishgame 5)
  (jungle-plant 6)
  (jungle-buzzer 7)
  (jungle-canyon-end 8)
  (jungle-temple-door 9)
  (village1-yakow 10)
  (village1-mayor-money 11)
  (village1-uncle-money 12)
  (village1-oracle-money1 13)
  (village1-oracle-money2 14)
  (beach-ecorocks 15)
  (beach-pelican 16)
  (beach-flutflut 17)
  (beach-seagull 18)
  (beach-cannon 19)
  (beach-buzzer 20)
  (beach-gimmie 21)
  (beach-sentinel 22)
  (misty-muse 23)
  (misty-boat 24)
  (misty-warehouse 25)
  (misty-cannon 26)
  (misty-bike 27)
  (misty-buzzer 28)
  (misty-bike-jump 29)
  (misty-eco-challenge 30)
  (village2-gambler-money 31)
  (village2-geologist-money 32)
  (village2-warrior-money 33)
  (village2-oracle-money1 34)
  (village2-oracle-money2 35)
  (swamp-billy 36)
  (swamp-flutflut 37)
  (swamp-battle 38)
  (swamp-tether-1 39)
  (swamp-tether-2 40)
  (swamp-tether-3 41)
  (swamp-tether-4 42)
  (swamp-buzzer 43)
  (sunken-platforms 44)
  (sunken-pipe 45)
  (sunken-slide 46)
  (sunken-room 47)
  (sunken-sharks 48)
  (sunken-buzzer 49)
  (sunken-top-of-helix 50)
  (sunken-spinning-room 51)
  (rolling-race 52)
  (rolling-robbers 53)
  (rolling-moles 54)
  (rolling-plants 55)
  (rolling-lake 56)
  (rolling-buzzer 57)
  (rolling-ring-chase-1 58)
  (rolling-ring-chase-2 59)
  (snow-eggtop 60)
  (snow-ram 61)
  (snow-fort 62)
  (snow-ball 63)
  (snow-bunnies 64)
  (snow-buzzer 65)
  (snow-bumpers 66)
  (snow-cage 67)
  (firecanyon-buzzer 68)
  (firecanyon-end 69)
  (citadel-sage-green 70)
  (citadel-sage-blue 71)
  (citadel-sage-red 72)
  (citadel-sage-yellow 73)
  (village3-extra1 74)
  (village1-buzzer 75)
  (village2-buzzer 76)
  (village3-buzzer 77)
  (cave-gnawers 78)
  (cave-dark-crystals 79)
  (cave-dark-climb 80)
  (cave-robot-climb 81)
  (cave-swing-poles 82)
  (cave-spider-tunnel 83)
  (cave-platforms 84)
  (cave-buzzer 85)
  (ogre-boss 86)
  (ogre-end 87)
  (ogre-buzzer 88)
  (lavatube-end 89)
  (lavatube-buzzer 90)
  (citadel-buzzer 91)
  (training-gimmie 92)
  (training-door 93)
  (training-climb 94)
  (training-buzzer 95)
  (village3-miner-money1 96)
  (village3-miner-money2 97)
  (village3-miner-money3 98)
  (village3-miner-money4 99)
  (village3-oracle-money1 100)
  (village3-oracle-money2 101)
  (firecanyon-assistant 102)
  (village2-levitator 103)
  (swamp-arm 104)
  (village3-button 105)
  (red-eggtop 106)
  (lavatube-balls 107)
  (lavatube-start 108)
  (intro 109)
  (ogre-secret 110)
  (village4-button 111)
  (finalboss-movies 112)
  (plunger-lurker-hit 113)
  (leaving-misty 114)
  (assistant-village3 115)
  (max 116)
  )

(defenum text-id
  :type uint32
  :bitfield #f
;; GAME-TEXT-ID ENUM BEGINS
  (zero 0)
  (one 1)
  (confirm #x103)
  (press-to-talk #x104)
  (press-to-use #x105)
  (confirm-play #x106)
  (play-again? #x107)
  (quit #x108)
  (pause #x109)
  (sfx-volume #x10a)
  (music-volume #x10b)
  (speech-volume #x10c)
  (language #x10d)
  (vibrations #x10e)
  (play-hints #x10f)
  (center-screen #x110)
  (on #x111)
  (off #x112)
  (move-dpad #x113)
  (english #x114)
  (french #x115)
  (german #x116)
  (spanish #x117)
  (italian #x118)
  (japanese #x119)
  (press-to-trade-money #x11a)
  (press-to-trade-money-oracle #x11b)
  (press-to-warp #x11c)
  (press-to-exit #x11d)
  (press-to-talk-to-sage #x123)
  (press-to-talk-to-assistant #x124)
  (aspect-ratio #x125)
  (video-mode #x126)
  (game-options #x127)
  (graphic-options #x128)
  (sound-options #x129)
  (4x3 #x12a)
  (16x9 #x12b)
  (60hz #x12c)
  (50hz #x12d)
  (game-title #x12e)
  (hidden-power-cell #x12f) ;; why is this here??
  (memcard-no-space #x130)
  (memcard-not-inserted #x131)
  (memcard-not-formatted-title #x132)
  (memcard-space-requirement1 #x133)
  (memcard-space-requirement2 #x134)
  (memcard-not-formatted-msg #x135)
  (saving-data #x136)
  (loading-data #x137)
  (memcard-do-not-remove #x138)
  (overwrite? #x139)
  (format? #x13a)

  (yes #x13c)
  (no #x13d)
  (back #x13e)
  (continue-without-saving #x13f)
  (select-file-to-save #x140)
  (select-file-to-load #x141)
  (save-data-already-exists #x142)
  (insert-memcard #x143)
  (continue? #x144)
  (load-game #x14b)
  (save-game #x14c)
  (formatting #x14d)
  (creating-save-data #x14e)
  (empty #x14f)
  (options #x150)
  (error-loading #x151)
  (error-saving #x152)
  (error-formatting #x153)
  (error-creating-data #x154)
  (memcard-removed #x156)
  (autosave-disabled-title #x157)
  (autosave-disabled-msg #x158)
  (no-save-data #x159)
  (create-save-data? #x15a)
  (check-memcard #x15b)
  (new-game #x15c)
  (back? #x15d)
  (ok #x15e)
  (exit-demo #x15f)
  (autosave-warn-title #x160)
  (autosave-warn-msg #x161)
  (task-completed #x162)
  (check-memcard-and-retry #x163)
  (screen-change-to-60hz #x164)
  (screen-60hz-warn-support #x165)
  (screen-60hz-warn-timer #x166)
  (screen-now-60hz #x167)
  (screen-60hz-keep? #x168)
  (warp-gate-use-dpad #x169)
  (no-disc-title #x16a)
  (no-disc-msg #x16b)
  (bad-disc-title #x16c)
  (bad-disc-msg #x16d)
  (press-start #x16e)
  (quit-game #x16f)
  (quit? #x170)
  (total-collected #x171)

  (village1-mayor-money #x200)
  (village1-uncle-money #x201)
  (village1-yakow-herd #x202)
  (village1-yakow-return #x203)
  (village1-oracle #x204)
  (beach-ecorocks #x205)
  (beach-flutflut-push #x206)
  (beach-flutflut-meet #x207)
  (beach-pelican #x208)
  (beach-seagull #x209)
  (beach-cannon #x20a)
  (beach-buzzer #x20b)
  (jungle-lurkerm-connect #x20c)
  (jungle-tower #x20d)
  (jungle-eggtop #x20e)
  (jungle-plant #x20f)
  (jungle-fishgame #x210)
  (misty-muse-catch #x211)
  (misty-muse-return #x212)
  (misty-boat #x213)
  (misty-cannon #x214)
  (misty-return-to-pool #x215)
  (misty-find-transpad #x216)
  (misty-balloon-lurkers #x217)
  (village1-poi-farmer #x218)
  (village1-poi-mayor #x219)
  (village1-poi-bird-lady #x21a)
  (village1-poi-sculptor #x21b)
  (village1-poi-explorer #x21c)
  (village1-poi-fisherman #x21d)
  (village1-poi-sage-hut #x21e)
  (village1-poi-assistant #x21f)
  (village1-level-name #x220)
  (beach-level-name #x221)
  (jungle-level-name #x222)
  (misty-level-name #x223)
  (village1-poi-firecanyon #x224)
  (jungleb-level-name #x225)
  (generic-yes #x226)
  (generic-no #x227)
  (flutflut #x228)
  (oracle #x229)
  (trans-pad #x22a)
  (green-eco-harvester #x22b)
  (money #x22c)
  (fuel-cell #x22d)
  (beach-seagull-get #x22e)
  (jungle-lurkerm-unblock #x22f)
  (jungle-lurkerm-return #x230)
  (sidekick-reminder-fishermans-boat #x231)
  (sidekick-hint-fishermans-boat #x232)
  (sidekick-reminder-money #x233)
  (sidekick-reminder-oracle #x234)
  (sidekick-hint-oracle #x235)
  (sidekick-hint-seagulls #x236)
  (sidekick-hint-pelican #x237)

  (sidekick-hint-ecorocks #x239)
  (sidekick-hint-mistycannon #x23a)
  (sidekick-hint-dive #x23b)
  (sidekick-hint-rounddoor #x23c)
  (sidekick-hint-lurkerm #x23d)
  (sidekick-hint-tower #x23e)
  
  (sidekick-reminder-fish #x240)

  (firecanyon-need-cells #x24f)

  (sidekick-hint-orb-cache-top #x251)

  (sidekick-hint-precurbridge #x25b)
  (sidekick-hint-launcher #x25c)

  (jungle-lurkerm-resolution #x25e)
  (jungle-lurkerm-hint #x25f)

  (beach-gimmie #x262)
  (beach-sentinel #x263)
  (jungle-canyon-end #x264)
  (jungle-temple-door #x265)
  (misty-bike-jump #x266)
  (misty-eco-challenge #x267)
  (sidekick-seagulls1 #x268)
  (sidekick-hint-seagulls2 #x269)
  (sidekick-seagulls2 #x26a)
  (sidekick-seagulls3 #x26b)
  (sidekick-seagulls4 #x26c)

  (sidekick-warehouse #x26e)
  (sidekick-misty #x26f)

  (beach-seagulls-avalanche #x273)

  (beach-pelican-quick-get-cell #x274)

  (beach-flutflutegg-hint #x275)

  (sidekick-hint-fish-powerup #x278)
  (misty-bike-hint #x27e)
  (misty-bike-mines-hint #x27f)
  (sidekick-hint-trans-pad #x280)
  (sidekick-hint-crate-darkeco1 #x281)
  (sidekick-hint-buzzer #x282)
  (sidekick-hint-crate-steel-break1 #x283)
  (sidekick-hint-crate-iron #x284)
  (sidekick-hint-crate-steel #x285)
  (sidekick-hint-fuel-cell #x286)
  (sidekick-hint-money #x287)
  (beach-ecorocks-resolution #x288)
  (jungle-eggtop-resolution #x289)
  (misty-cannon-resolution #x28a)
  (misty-bike-resolution #x28b)

  (sidekick-hint-crate-steel-break2 #x28e)
  (sidekick-hint-crate-darkeco2 #x28f)
  (sidekick-launcher1 #x290)
  (sidekick-launcher2 #x291)
  (sidekick-mistycannon #x292)
  (sidekick-unknown1 #x293)
  (sidekick-hint-buzzer2 #x294)
  (sidekick-hint-buzzer3 #x295)
  (sidekick-buzzer-resolution #x296)
  (village1-yakow-resolution #x297)

  (sidekick-hint-periscope #x29c)
  (sidekick-hint-reflector-mirror #x29d)
  (sidekick-hint-aphid #x29e)
  (sidekick-hint-periscope2 #x29f)
  (sidekick-hint-periscope3 #x2a0)
  (sidekick-hint-eco-door #x2a1)

  (misty-teetertotter #x2a4)
  (misty-eco-red-hint #x2a5)
  (misty-eco-red-first-use #x2a6)
  (misty-eco-plat #x2a7)

  (fish? #x2a9)
  (misty-bone-bridge-hint #x2aa)

  (beach-grottopole-increment #x2af)

  (village1cam-enough-cells #x2b1)
  (village1cam-enough-cells2 #x2b2)
  (firecanyon-need-cells-text #x2b3)
  (caught #x2b4)
  (missed #x2b5)
  (lose! #x2b6)

  (village2-gambler-money #x300)
  (village2-geologist-money #x301)
  (village2-warrior-money #x302)
  (village2-oracle-money #x303)
  (swamp-tether #x304)
  (swamp-arm #x305)
  (swamp-poles #x306)
  (swamp-flutflut #x307)
  (swamp-tetherrocks #x308)
  (swamp-billy #x309)
  (sunken-elevator-raise #x30a)
  (sunken-elevator-get-to-roof #x30b)
  (sunken-pipe #x30c)
  (sunken-climb-tube #x30d)
  (sunken-pool #x30e)
  (sunken-platforms #x30f)
  (rolling-moles #x310)
  (rolling-moles-return #x311)
  (rolling-robbers #x312)
  (rolling-race #x313)
  (rolling-race-return #x314)
  (rolling-lake #x315)
  (rolling-plants #x316)
  (generic-buzzer #x317)
  (poi-bluesage-hut #x318)
  (village2-level-name #x319)
  (poi-levitator #x31a)
  (rolling-level-name #x31b)
  (swamp-level-name #x31c)
  (sunken-level-name #x31d)
  (ogre-level-name #x31e)
  (levitator-yes #x31f)
  (levitator-no #x320)
  (swamp-battle #x321)
  (sunken-slide #x322)
  (sunken-spinning-room #x323)
  (rolling-ring-chase-1 #x324)
  (rolling-ring-chase-2 #x325)
  (sunken-room-resolution #x326)
  (rolling-robbers-resolution #x327)
  (swamp-flutflut-resolution #x328)

  (rolling-race-beat-record #x335)
  (sidekick-hint-crate-darkeco-rolling #x336)
  (rolling-moles-hint #x337)
  (rolling-moles-resolution #x338)
  (rolling-plants-hint #x339)
  (rolling-plants-hint-eco-green #x33a)
  (rolling-plants-hint-eco-green2 #x33b)
  (rolling-robbers-hint #x33c)
  (rolling-moles-hint-hole #x33d)
  (rolling-plants-hint-eco-green3 #x33e)
  (rolling-ring-chase-1-hint #x33f)
  (rolling-ring-chase-2-hint #x340)
  (rolling-ring-chase-fail #x341)
  (rolling-ring-grass #x342)
  (sunken-pipegame-hint #x343)
  (sunken-helix-hint #x344)
  (sunken-blue-eco-charger-hint #x345)
  (sunken-room-hint #x346)
  (sunken-double-lurker-hint #x347)
  (sunken-helix-darkeco-hint #x348)
  (sunken-helix-darkeco-close #x349)
  (sunken-qbert-plat-hint #x34a)
  (sunken-bully-dive-hint #x34b)
  (sunken-tube-hint #x34c)
  (sunken-blue-eco-charger-all-hint #x34d)
  (sunken-hotpipes #x34e)
  (sunken-water1 #x34f)
  (sunken-water2 #x350)
  (swamp-tetherrocks-hint #x351)
  (swamp-tetherrock-eco-yellow-hint #x352)
  (swamp-billy-reminder #x353)
  (swamp-flutflut-doublejump #x354)
  (swamp-tar #x355)
  (swamp-water #x356)
  (swamp-kermit-tongue-hint #x357)
  (swamp-rat-nest-hint #x358)
  (swamp-eco-yellow-first-use #x359)
  (swamp-eco-yellow-hint #x35a)
  (swamp-swingpole #x35b)
  (swamp-bramble #x35c)
  (swamp-tether-hint #x35d)
  (swamp-kermit-charge-hint #x35e)
  (swamp-kermit-flee #x35f)
  (swamp-battle-hint #x360)
  (swamp-arm-hint #x361)
  (swamp-tar-hint #x362)
  (swamp-bat-eco-yellow-hint #x363)
  (swamp-bat-duck-hint #x364)
  (swamp-tetherrocks-3-left #x365)
  (swamp-tetherrocks-2-left #x366)
  (swamp-tetherrocks-1-left #x367)
  (swamp-flutflut-hint #x368)
  (swamp-rats-hurt #x369)
  (rolling-plants-resolution #x36a)
  (swamp-arm-resolution #x36b)
  (village2-levitator-need-cells #x36c)
  (village2-levitator-find-cells #x36d)

  (village2-button-reminder #x36f)
  (village2-button-reminder2 #x370)
  (village2-button-reminder3 #x371)
  (village2-levitator-need-cells-text #x372)
  (time #x373)
  (record #x374)
  (new-record #x375)
  (try-again #x376)
  (race-aborted #x377)

  (village3-miner-money #x400)
  (village3-oracle-money #x401)
  (snow-ram-3-left #x402)
  (snow-ram-2-left #x403)
  (snow-ram-1-left #x404)
  (snow-fort #x405)
  (snow-bunnies #x406)
  (red-eggtop #x407)
  (snow-ball #x408)
  (cave-gem #x409)
  (cave-drilling-lurkers #x40a)
  (snow-top #x40b)
  (snow-troops #x40c)
  (snow-troops2 #x40d)
  (cave-robot-climb #x40e)
  (cave-dark-climb #x40f)
  (cave-gnawers #x410)
  (cave-dark-crystals #x411)
  (cave-bats #x412)
  (village3-buzzer #x413)
  (village3-poi-redsage-hut #x414)
  (village3-level-name #x415)
  (village3-poi-gondola #x416)
  (snow-level-name #x417)
  (village3-poi-yosemite #x418)
  (cave-level-name #x419)
  (village3-poi-ogre #x41a)
  (lavatube-level-name #x41b)
  (gondola-ride? #x41c)
  (gondola-yes #x41d)
  (gondola-no #x41e)
  (snow-ram-boss #x41f)
  (snow-lake #x420)
  (snow-eggtop #x421)
  (snow-birds #x422)
  (cave-spider-tunnel #x423)
  (cave-platforms #x424)

  (cave-swing-poles #x426)
  (assistant-lavatube-hint #x427)
  (assistant-lavatube-need-cells #x428)
  (gondola-need-cells #x429)
  (gondola-enough-cells #x42a)
  (snow-cage #x42b)
  (snow-bumpers #x42c)

  (cave-dark-crystals-resolution #x432)
  (cave-gnawers-look-around #x433)
  (cave-darkeco #x434)
  (cave-dark-crystals-reminder #x435)
  (cave-gnawers-reminder #x436)
  (darkcave-light-end #x437)
  (darkcave-light-hint #x438)
  (cave-dark-crystals-flee #x439)
  (robocave-introduction #x43a)
  (cave-spider-egg-hint #x43b)
  (darkcave-introduction #x43c)
  (cave-spiderweb-hint #x43d)
  (cave-spider-hurt #x43e)
  (cave-baby-spider-hint #x43f)
  (cave-trap-nest-hint #x440)
  (cave-spider-egg-spawn #x441)
  (cave-spider-nest-flee #x442)
  (snow-fort-hint #x443)
  (snow-ram-boss-red-eco-hint #x444)
  (snow-platform-hint #x445)
  (snow-vent-hint #x446)
  (snow-eggtop-hint #x447)
  (snow-ice-cube-hint #x448)
  (snow-button-hint #x449)
  (snow-plat-hint #x44a)
  (snow-red-eco-hint #x44b)
  (snow-eggtop-resolution #x44c)
  (snow-cage-resolution #x44d)
  (snow-ball-hint #x44e)
  (assistant-lavatube-enough-cells #x44f)
  (assistant-lavatube-enough-cells2 #x450)
  (assistant-lavatube-reminder #x451)
  (village3-button-reminder #x452)
  (village3-button-reminder2 #x453)
  (village3-button-reminder3 #x454)
  (assistant-lavatube-need-cells-text #x455)

  (firecanyon-end #x500)
  (firecanyon-buzzer #x501)
  (firecanyon-balloon-hint #x502)
  (firecanyon-ramp-hint #x503)
  (firecanyon-heat-warning1 #x504)
  (firecanyon-steer-hint #x505)
  (firecanyon-crate-darkeco1 #x506)
  (firecanyon-crate-darkeco2 #x507)
  (firecanyon-babak-hint #x508)
  (firecanyon-heat-warning2 #x509)
  (firecanyon-heat-warning3 #x50a)
  (firecanyon-heat-warning4 #x50b)
  (firecanyon-level-name #x50c)
  (firecanyon-balloon-reminder #x50d)
  (firecanyon-balloon-reminder2 #x50e)
  (firecanyon-heat-warning5 #x50f)
  (firecanyon-balloon-missed #x510)
  (firecanyon-heat-warning6 #x511)
  (firecanyon-heat-warning7 #x512)
  (firecanyon-heat-warning8 #x513)
  (firecanyon-heat-warning9 #x514)
  (firecanyon-end-resolution #x515)
  (firecanyon-buzzer-hint #x516)

  (ogre-end #x600)
  (ogre-buzzer #x601)
  (ogre-poi-ogre #x602)
  (ogre-boss #x603)
  (ogre-boss-resolution #x604)
  (ogre-race-hint #x605)

  (ogre-race-introduction #x607)
  (ogre-tnt-hint #x608)
  (ogre-race-ahead-hint #x609)
  (ogre-eco-blue-hint #x60a)
  (ogre-tree-hint #x60b)
  (ogre-eco-blue-reminder #x60c)
  (ogre-tnt-reminder #x60d)
  (ogre-hole-hint #x60e)
  (ogre-bonk-hint #x60f)
  (ogre-flying-lurker-hint #x610)
  (ogre-flying-lurker-reminder #x611)
  (ogre-flying-lurker-pass #x612)
  (ogre-flying-lurker-passed #x613)
  (ogre-race-losing #x614)
  (ogre-race-winning #x615)
  (ogre-race-reminder #x616)
  (ogre-jump-hint #x617)
  (ogre-race-end-almost #x618)
  (ogre-race-end-almost2 #x619)
  (ogre-race-end-almost3 #x61a)
  (ogre-race-end-almost-losing #x61b)
  (ogre-plunger-lurker-resolution #x61c)
  (ogre-race-resolution #x61d)

  (lavatube-end #x700)
  (lavatube-buzzer #x701)
  (lavatube-hurry #x702)
  (lavatube-hurry-path #x703)
  (lavatube-chainmine #x704)
  (lavatube-darkecobarrel #x705)
  (lavatube-balloon #x706)
  (lavatube-heat1 #x707)
  (lavatube-heat2 #x708)
  (lavatube-eco-blue #x709)
  (lavatube-eco-yellow #x70a)
  (lavatube-tunnel1 #x70b)
  (lavatube-tunnel2 #x70c)
  (lavatube-balls #x70d)
  (lavatube-balls-almost-dead #x70e)
  (lavatube-balls-resolution #x710)
  (lavatube-tunnel3 #x711)
  (lavatube-end-resolution #x712)

  (citadel-buzzer #x800)
  (citadel-level-name #x801)
  (citadel-sage-blue #x802)
  (citadel-sage-red #x803)
  (citadel-sage-yellow #x804)
  (citadel-sage-green #x805)
  (citadel-generator #x806)
  (citadel-edge #x807)
  (citadel-battle #x808)
  (citadel-generator-no-mushroom #x809)
  (citadel-button #x80a)
  (citadel-robotboss #x80b)
  (citadel-plat #x80c)
  (citadel-launcher #x80d)
  (citadel-battle2 #x80e)
  (citadel-sagecage #x80f)
  (citadel-hub1 #x810)
  (citadel-hub2 #x811)
  (citadel-launcher2 #x812)
  (citadel-battle-end #x813)

  (training-voicebox #x900)
  (training-money #x901)
  (training-fuel-cell #x902)
  (training-buzzer-hint #x903)
  (training-buzzer-resolution #x904)
  (training-sharkey #x905)
  (training-fuel-cell-reminder #x906)
  (training-blue-eco-vent #x907)
  (training-eco-green #x908)
  (training-eco-blue #x909)
  (training-eco-reminder #x90a)
  (training-precursor-door #x90b)
  (training-eco-opened-door #x90c)
  (training-progress #x90d)
  (training-double-jump #x90e)
  (training-spin #x90f)
  (training-spin-bad1 #x910)
  (training-spin-bad2 #x911)
  (training-spin-success #x912)
  (training-punch #x914)
  (training-punch-bad1 #x914)
  (training-punch-bad2 #x915)
  (training-punch-success #x916)
  (training-ironcrate #x917)
  (training-combo #x918)
  (training-warp-gate-blocked #x919)
  (training-warp-gate-reminder #x91a)
  (training-gimmie-task-name #x91b)
  (training-buzzer-task-name #x91c)
  (training-door-task-name #x91d)
  (training-climb-task-name #x91e)
  (training-level-name #x91f)

  (inc #xf10)
  (europe #xf11)

  ;; extra IDs for pc port
  (camera-options               #x1000)
  (normal                       #x1001)
  (inverted                     #x1002)
  (camera-controls-first-horz   #x1003)
  (camera-controls-first-vert   #x1004)
  (camera-controls-third-horz   #x1005)
  (camera-controls-third-vert   #x1006)
  (restore-defaults             #x1007)
  (auto-save-disabled           #x100c)
  (disable-auto-save-query      #x100d)
  (disable-auto-save            #x100e)
  (misc-options                 #x100f)
  (accessibility-options        #x1010)
  (money-starburst              #x1011)
  (ps2-options                  #x1020)
  (ps2-load-speed               #x1021)
  (ps2-parts                    #x1022)
  (music-fadeout                #x1023)
  (music-fadein                 #x1024)
  (force-actors                 #x1025)
  (force-background             #x1026)
  (force-envmap                 #x1027)
  (discord-rpc                  #x1030)
  (display-mode                 #x1031)
  (windowed                     #x1032)
  (borderless                   #x1033)
  (fullscreen                   #x1034)
  (game-resolution              #x1035)
  (resolution-fmt               #x1036)
  (ps2-aspect-ratio             #x1037)
  (ps2-aspect-ratio-msg         #x1038)
  (aspect-ratio-ps2             #x1039)
  (fit-to-screen                #x103a)
  (vsync                        #x103b)
  (aspect4x3-ps2                #x103c)
  (aspect16x9-ps2               #x103d)
  (aspect-fmt                   #x103e)
  (subtitle-hint                #x103f)
  (subtitle-enabled             #x1040)
  (subtitle-disabled            #x1041)
  (text-language                #x1042)
  (display                      #x1043)
  (display-fmt                  #x1044)
  (msaa                         #x1050)
  (x-times-fmt                  #x1051)
  (2-times                      #x1052)
  (4-times                      #x1053)
  (8-times                      #x1054)
  (16-times                     #x1055)
  (frame-rate                   #x1060)
  (60fps                        #x1061)
  (100fps                       #x1062)
  (150fps                       #x1063)
  (lod-bg                       #x1070)
  (lod-fg                       #x1071)
  (lod-highest                  #x1072)
  (lod-high                     #x1073)
  (lod-mid                      #x1074)
  (lod-low                      #x1075)
  (lod-lowest                   #x1076)
  (lod-ps2                      #x1077)
  (subtitles                    #x1078)
  (hinttitles                   #x1079)
  (subtitles-language           #x107a)
  (subtitles-speaker            #x107b)
  (speaker-always               #x107c)
  (speaker-never                #x107d)
  (speaker-auto                 #x107e)
  (hint-log                     #x107f)
  (cheats                       #x1080)
  (secrets                      #x1081)
  (select-level                 #x1082)
  (select-flava                 #x1083)
  (finalboss-level-name         #x1084)
  (credits                      #x1085)
  (locked                       #x1086)
  (ogreboss                     #x1087)
  (fishgame                     #x1088)
  (danger-mus                   #x1089)
  (flava-player-controls        #x108a)
  (cheat-eco-blue               #x1090)
  (cheat-eco-red                #x1091)
  (cheat-eco-green              #x1092)
  (cheat-eco-yellow             #x1093)
  (cheat-sidekick-alt           #x1094)
  (cheat-invinc                 #x1095)
  (cheat-tunes                  #x1096)
  (cheat-sky                    #x1097)
  (cheat-req-100-percent        #x1098)
  (cheat-req-beat-game          #x1099)
  (cheat-big-head               #x109a)
  (cheat-small-head             #x109b)
  (cheat-big-fist               #x109c)
  (cheat-big-head-npc           #x109d)
  (cheat-no-tex                 #x109e)
  (cheat-mirror                 #x109f)
  (cheat-huge-head              #x10a0)
  (music-player                 #x10c0)
  (scene-player                 #x10c1)
  (play-credits                 #x10c2)
  (scrapbook                    #x10c3)
  (default                      #x10d0)
  (flava-vi1-unused0            #x10d1)
  (flava-sage                   #x10d2)
  (flava-sage-hut               #x10d3)
  (flava-birdlady               #x10d4)
  (flava-farmer                 #x10d5)
  (flava-assistant              #x10d6)
  (flava-mayor                  #x10d7)
  (flava-sculptor               #x10d8)
  (flava-explorer               #x10d9)
  (flava-dock                   #x10da)
  (flava-jun-temple-exit        #x10db)
  (flava-jun-lurkerm            #x10dc)
  (flava-jun-temple-top         #x10dd)
  (flava-jub-eggtop             #x10de)
  (flava-jub-plant-boss         #x10df)
  (flava-bea-sentinel           #x10e0)
  (flava-bea-cannon             #x10e1)
  (flava-bea-grotto             #x10e2)
  (flava-mis-battle             #x10e3)
  (flava-mis-boat               #x10e4)
  (flava-mis-unused0            #x10e5)
  (flava-racer                  #x10e6)
  (flava-flutflut               #x10e7)
  (flava-fic-unused0            #x10e8)
  (flava-warrior                #x10e9)
  (flava-geologist              #x10ea)
  (flava-gambler                #x10eb)
  (flava-levitator              #x10ec)
  (flava-swa-game               #x10ed)
  (flava-swa-launcher           #x10ee)
  (flava-swa-battle             #x10ef)
  (flava-rol-gorge              #x10f0)
  (flava-ogr-middle             #x10f1)
  (flava-ogr-end                #x10f2)
  (flava-vi3-mai                #x10f3)
  (flava-vi3-sno                #x10f4)
  (flava-vi3-miners             #x10f5)
  (flava-mai-rob                #x10f6)
  (flava-mai-rob-top            #x10f7)
  (flava-mai-mai                #x10f8)
  (flava-mai-dar                #x10f9)
  (flava-sno-battle             #x10fa)
  (flava-sno-cave               #x10fb)
  (flava-sno-fort               #x10fc)
  (flava-sno-balls              #x10fd)
  (flava-lav-middle             #x10fe)
  (flava-lav-end                #x10ff)
  (flava-cit-yellowsage         #x1100)
  (flava-cit-redsage            #x1101)
  (flava-cit-bluesage           #x1102)
  (flava-cit-hub                #x1103)
  (flava-fin-middle             #x1104)
  (flava-fin-end                #x1105)
  (flava-credits-middle         #x1106)
  (flava-credits-end            #x1107)
  (uk-english                   #x1110)
  (portuguese                   #x1111)
  (br-portuguese                #x1112)
  (finnish                      #x1113)
  (swedish                      #x1114)
  (danish                       #x1115)
  (norwegian                    #x1116)
  (hungarian                    #x1117)
  (dutch                        #x1118)
  (catalan                      #x1119)
  (icelandic                    #x111a)
  (scene-0                      #x1200)
  (scene-255                    #x12ff)
  (hint-0                       #x1300)
  (hint-511                     #x14ff)
  (speedrunner-mode             #x1500)
  (cutscene-skips               #x1501)
  (checkpoint-select            #x1502)
  (speedrun-options-heading     #x1503)
  (speedrun-options-warning     #x1504)
  (speedrun-reset-current-run   #x1505)
  (speedrun-new-full-game       #x1506)
  ;; (speedrun-full-game-any       #x1507)
  ;; (speedrun-full-game-100       #x1508)
  ;; (speedrun-full-game-nolts     #x1509)
  ;; (speedrun-full-game-nofcs     #x150a)
  ;; (speedrun-full-game-orbless   #x150b)
  ;; (speedrun-full-game-all-flies #x150c)
  ;; (speedrun-full-game-all-orbs  #x150d)
  (speedrun-new-individual-level #x150e)
  (speedrun-il-training          #x150f)
  (speedrun-il-village1          #x1510)
  (speedrun-il-beach             #x1511)
  (speedrun-il-jungle            #x1512)
  (speedrun-il-misty             #x1513)
  (speedrun-il-firecanyon        #x1514)
  (speedrun-il-village2          #x1515)
  (speedrun-il-sunken            #x1516)
  (speedrun-il-swamp             #x1517)
  (speedrun-il-rolling           #x1518)
  (speedrun-il-ogre              #x1519)
  (speedrun-il-village3          #x151a)
  (speedrun-il-snow              #x151b)
  (speedrun-il-cave              #x151c)
  (speedrun-il-lavatube          #x151d)
  (speedrun-il-citadel           #x151e)
  (speedrun-new-cat-ext          #x151f)
  (speedrun-new-game-plus        #x1520)
  (speedrun-hub1-100             #x1521)
  (speedrun-hub2-100             #x1522)
  (speedrun-hub3-100             #x1523)
  (speedrun-all-cutscenes        #x1524)
  ;; input options
  (input-options #x1600)
  (input-opts-select-controller #x1601)
  (input-opts-analog-deadzone #x1602)
  (input-opts-ignore-controller-win-focus #x1603)
  (input-opts-controller-led-reflect-hp #x1604)
  (input-opts-controller-led-reflect-eco #x1605)
  (input-opts-mouse-enable-camera #x1606)
  (input-opts-mouse-horizontal-sens #x1607)
  (input-opts-mouse-vertical-sens #x1608)
  (input-opts-mouse-enable-movement #x1609)
  (input-opts-binds-controller #x160a)
  (input-opts-binds-keyboard #x160b)
  (input-opts-binds-mouse #x160c)
  (input-opts-controller-opts #x160d)
  (input-opts-enable-kb #x160e)
  (input-opts-enable-mouse #x160f)
  (input-opts-mouse-opts #x1610)
  (input-opts-reassign-binds #x1611)
  (input-opts-generic-controller #x1612)
  (input-opts-auto-hide-cursor #x1613)
  (input-opts-binds-unset #x1614)
  (input-opts-binds-unknown #x1615)
  (progress-no-other-resolution-options #x1616)
  (input-opts-controller-led-reflect-heat #x1617)
;; GAME-TEXT-ID ENUM ENDS
  )


;; ----------------------
;; File - gkernel-h
;; Source Path - kernel/gkernel-h.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Types

(define-extern process-tree type) ; deftype provided by C Kernel
(declare-type process basic)
(declare-type entity-actor basic)
(deftype process-tree (basic)
  ((name basic :offset-assert 4)
   (mask process-mask :offset-assert 8)
   (parent (pointer process-tree) :offset-assert 12)
   (brother (pointer process-tree) :offset-assert 16)
   (child (pointer process-tree) :offset-assert 20)
   (ppointer (pointer process) :offset-assert 24)
   (self process-tree :offset-assert 28)
   )
  (:methods
    (new (symbol type basic) _type_ 0)
    (activate (_type_ process-tree basic pointer) process-tree 9)
    (deactivate  (_type_) none 10)
    (init-from-entity! (_type_ entity-actor) none 11)
    (run-logic? (_type_) symbol 12)
    (process-tree-method-13 () none 13)
    )
  :size-assert #x20
  :method-count-assert 14
  :no-runtime-type
  )

(deftype stack-frame (basic)
  ((name symbol :offset 4)
   (next stack-frame :offset 8) ;; which way does this point?
   )
  :size-assert #xc
  :method-count-assert 9
  :flag-assert #x90000000c
  )

(deftype kernel-context (basic)
  ((prevent-from-run   process-mask  :offset-assert 4)
   (require-for-run    process-mask  :offset-assert 8)
   (allow-to-run       process-mask  :offset-assert 12)
   (next-pid           int32         :offset-assert 16)
   (fast-stack-top     pointer       :offset-assert 20)
   (current-process    process       :offset-assert 24)
   (relocating-process basic         :offset-assert 28)
   (relocating-min     int32         :offset-assert 32)
   (relocating-max     int32         :offset-assert 36)
   (relocating-offset  int32         :offset-assert 40)
   (low-memory-message symbol        :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(declare-type cpu-thread thread)
(declare-type process process-tree)
(deftype thread (basic)
  ((name         basic   :offset-assert 4)
   (process      process :offset-assert 8)
   (previous     thread  :offset-assert 12)
   (suspend-hook (function cpu-thread none)   :offset-assert 16)
   (resume-hook  (function cpu-thread none)   :offset-assert 20)
   (pc           pointer :offset-assert 24)
   (sp           pointer :offset-assert 28)
   (stack-top    pointer :offset-assert 32)
   (stack-size   int32   :offset-assert 36)
   )
  (:methods
    (stack-size-set! (_type_ int) none 9)
    (thread-suspend (_type_) none 10)
    (thread-resume  (_type_) none 11)
    )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  )

(deftype cpu-thread (thread)
  (
   ;;(rreg  uint64 8       :offset-assert 40)
   ;;(freg  float 6        :offset-assert 104)
   ;; changed from GOAL, see gkernel-h.gc
   (rreg  uint64 7       :offset-assert 40)
   (freg float 8)
   (stack uint8 :dynamic :offset-assert 128)
   )
  (:methods
    (new (symbol type process symbol int pointer) _type_ 0)
    (thread-suspend (_type_) none 10)
    (thread-resume  (_type_) none 11)
    )
  :method-count-assert 12
  :size-assert         #x80
  :flag-assert         #xc00000080
  )

(deftype dead-pool (process-tree)
  (
   ;; nothing new!
   )
  (:methods
    (new (symbol type int int basic) _type_ 0)
    (get-process (_type_ type int) process 14)
    (return-process ( _type_ process) none 15)
    )
  :size-assert #x20
  :method-count-assert 16
  :flag-assert #x1000000020
  )

(deftype dead-pool-heap-rec (structure)
  ((process process             :offset-assert 0)
   (prev    dead-pool-heap-rec  :offset-assert 4)
   (next    dead-pool-heap-rec  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype dead-pool-heap (dead-pool)
  ((allocated-length   int32                       :offset-assert 32)
   (compact-time       uint32                      :offset-assert 36)
   (compact-count-targ uint32                      :offset-assert 40)
   (compact-count      uint32                      :offset-assert 44)
   (fill-percent       float                       :offset-assert 48)
   (first-gap          dead-pool-heap-rec          :offset-assert 52)
   (first-shrink       dead-pool-heap-rec          :offset-assert 56)
   (heap               kheap              :inline  :offset-assert 64)
   (alive-list         dead-pool-heap-rec :inline  :offset-assert 80)
   (last               dead-pool-heap-rec :offset #x54  :offset-assert 84)
   (dead-list          dead-pool-heap-rec :inline  :offset-assert 92)
   (process-list       dead-pool-heap-rec :inline :dynamic :offset-assert 104)
   )
  (:methods
    (new (symbol type basic int int) _type_ 0)
    (compact (dead-pool-heap int) none 16)
    (shrink-heap (dead-pool-heap process) dead-pool-heap 17)
    (churn (dead-pool-heap int) none 18)
    (memory-used (dead-pool-heap) int 19)
    (memory-total (dead-pool-heap) int 20)
    (gap-size (dead-pool-heap dead-pool-heap-rec) int 21)
    (gap-location (dead-pool-heap dead-pool-heap-rec) pointer 22)
    (find-gap (dead-pool-heap dead-pool-heap-rec) dead-pool-heap-rec 23)
    (find-gap-by-size (dead-pool-heap int) dead-pool-heap-rec 24)
    (memory-free (dead-pool-heap) int 25)
    (compact-time (dead-pool-heap) uint 26)
    )
  :method-count-assert 27
  :size-assert         #x68
  :flag-assert         #x1b00000068
  )

(deftype catch-frame (stack-frame)
  ((sp   int32     :offset-assert 12)
   (ra   int32     :offset-assert 16)
   ;; changed from GOAL, see gkernel-h.gc
   (freg float 10 :offset-assert 20)
   (rreg uint128 7)
   ;;(freg float 6 :offset-assert 20)
   ;;(rreg uint128 8 :offset-assert 48)
   )
  (:methods
    (new (symbol type symbol function (pointer uint64)) object 0)
    )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )

(deftype protect-frame (stack-frame)
  ((exit (function none)  :offset-assert 12)
   )
  (:methods
    (new (symbol type (function none)) protect-frame)
    )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype handle (uint64)
  ((process (pointer process) :offset 0)
   (pid int32 :offset 32)
   (u64 uint64 :offset 0)
   )
  :flag-assert #x900000008
  )

(declare-type event-message-block structure)
(deftype state (protect-frame)
  ((code  function         :offset-assert  16)
   (trans (function none)  :offset-assert  20)
   (post  function         :offset-assert  24)
   (enter function         :offset-assert  28)
   (event (function process int symbol event-message-block object)  :offset-assert  32)
   )
  (:methods
    (new (symbol type symbol function
          (function none)
          function
          (function none)
          (function process int symbol event-message-block object)) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype event-message-block (structure)
  ((to         process   :offset-assert 0)
   (from       process   :offset-assert 4)
   (num-params int32     :offset-assert 8)
   (message    symbol    :offset-assert 12)
   (param      uint64 7  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  :always-stack-singleton
  )

;; - Symbols

(define-extern uint64 type)


;; ----------------------
;; File - gkernel
;; Source Path - kernel/gkernel.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Types

(declare-type connectable structure)
(declare-type res-lump basic)
(declare-type entity res-lump)
(define-extern process type) ; deftype provided by C Kernel
(deftype process (process-tree)
  ((pool dead-pool :offset-assert 32)
   (status basic :offset-assert 36)
   (pid int32 :offset-assert 40)
   (main-thread cpu-thread :offset-assert 44)
   (top-thread thread :offset-assert 48)
   (entity entity-actor :offset-assert 52)
   (state state :offset-assert 56)
   (trans-hook function :offset-assert 60)
   (post-hook function :offset-assert 64)
   (event-hook (function process int symbol event-message-block object) :offset-assert 68)
   (allocated-length int32 :offset-assert 72)
   (next-state state :offset-assert 76)
   (heap-base pointer :offset-assert 80)
   (heap-top pointer :offset-assert 84)
   (heap-cur pointer :offset-assert 88)
   (stack-frame-top stack-frame :offset-assert 92)
   (connection-list connectable :inline :offset-assert 96) ;; can be a connection
   (stack uint8 :dynamic :offset-assert 112)
   )
  (:methods
    (new (symbol type basic int) _type_ 0)
    )
  (:states
    dead-state
    empty-state)
  :size-assert #x70
  :method-count-assert 14
  :no-runtime-type ;; already defined by kscheme. Don't do it again.
  )

;; - Functions

(define-extern entity-deactivate-handler (function process entity-actor none))
(define-extern process-disconnect (function process int))
(define-extern throw (function symbol object int))
(define-extern set-to-run-bootstrap (function none))
(define-extern change-parent (function process-tree process-tree process-tree))
(define-extern inspect-process-tree (function process-tree int int symbol process-tree))
(define-extern *listener-function* (function object))
(define-extern reset-and-call (function thread function object))
(define-extern execute-process-tree (function process-tree (function object object) kernel-context object))
(define-extern search-process-tree (function process-tree (function process-tree object) process-tree))
(define-extern iterate-process-tree (function process-tree (function object object) kernel-context object))
(define-extern process-not-name (function object process-tree process))
(define-extern process-by-name (function object process-tree process))
(define-extern inspect-process-heap (function process symbol))
;; functions defined in C. TODO - this will end up being a duplicate of kernel-defs.gc?
(define-extern dgo-load (function string kheap link-flag int none))
(define-extern load-package (function string kheap pair))
(define-extern unload-package (function string pair))
(define-extern malloc (function symbol int pointer)) ;; from kernel-defs.gc
(define-extern remove-exit (function :behavior process stack-frame))
(define-extern stream<-process-mask (function object process-mask process-mask))
(define-extern return-from-thread (function none))
(define-extern return-from-thread-dead (function none))
(define-extern process-count (function process-tree int))
(define-extern kill-by-name (function object process-tree symbol))
(define-extern kill-by-type (function object process-tree symbol))
(define-extern kill-not-name (function object process-tree symbol))
(define-extern kill-not-type (function object process-tree symbol))
(define-extern kernel-dispatcher (function object))
(define-extern throw-dispatch (function catch-frame object none))
(define-extern previous-brother (function process-tree object))
(define-extern change-brother (function process-tree process-tree object))
(define-extern change-to-last-brother (function process-tree process-tree))
(define-extern run-function-in-process (function process function object object object object object object object))
(define-extern set-to-run (function cpu-thread function object object object object object object pointer))

;; - Symbols

(define-extern *kernel-context* kernel-context)
(define-extern *enable-method-set* int)
(define-extern *listener-process* process)
(define-extern *active-pool* process-tree)
(define-extern *stdcon1* string)
(define-extern *stdcon* string)
(define-extern *debug-draw-pauseable* symbol)
(define-extern *stdcon0* string)
(define-extern *dram-stack* (pointer uint8))
(define-extern *global-search-name* basic)
(define-extern *global-search-count* int)
(define-extern *null-kernel-context* kernel-context)
(define-extern *null-process* process)
(define-extern *debug-dead-pool* dead-pool-heap)
(define-extern *vis-boot* basic)
(define-extern *kernel-packages* pair)
(define-extern *kernel-version* binteger)
(define-extern *irx-version* binteger)
(define-extern *kernel-boot-mode* symbol)
(define-extern *kernel-boot-level* symbol)
(define-extern *deci-count* int)
(define-extern *last-loado-length* int)
(define-extern *last-loado-global-usage* int)
(define-extern *last-loado-debug-usage* int)
(define-extern *master-mode* symbol)
(define-extern *pause-lock* symbol)
(define-extern *16k-dead-pool* dead-pool)
(define-extern *8k-dead-pool* dead-pool)
(define-extern *4k-dead-pool* dead-pool)
(define-extern *target-dead-pool* dead-pool)
(define-extern *camera-dead-pool* dead-pool)
(define-extern *camera-master-dead-pool* dead-pool)
(define-extern *nk-dead-pool* dead-pool-heap)
(define-extern *default-dead-pool* dead-pool)
(define-extern *pickup-dead-pool* dead-pool)
(define-extern *dead-pool-list* pair)
(define-extern *display-pool* process-tree)
(define-extern *camera-pool* process-tree)
(define-extern *target-pool* process-tree)
(define-extern *entity-pool* process-tree)
(define-extern *default-pool* process-tree)


;; ----------------------
;; File - pskernel
;; Source Path - kernel/pskernel.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Types

(deftype lowmemmap (structure)
  ((irq-info-stack  uint32   :offset-assert 0)
   (irq2-info-stack uint32   :offset-assert 4)
   (kernel-copy-fn  uint32   :offset-assert 8)
   (kernel-write-fn uint32   :offset-assert 12)
   (r1-save         uint128  :offset-assert 16)
   (last-time       uint32   :offset-assert 32)
   (high-time       uint32   :offset-assert 36)
   (dma-status      uint32   :offset-assert 40)
   (dma-qnext       uint32   :offset-assert 44)
   (dma-qwc         uint32   :offset-assert 48)
   (dma-tnext       uint32   :offset-assert 52)
   (dma-stack0      uint32   :offset-assert 56)
   (dma-stack1      uint32   :offset-assert 60)
   (kernel-read-fn  uint32   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

;; - Functions

(define-extern deinstall-debug-handlers (function none))
(define-extern return-from-exception (function object none))
(define-extern kernel-set-exception-vector (function none))
(define-extern kernel-write (function none))
(define-extern install-debug-handler (function int object symbol))
(define-extern kernel-copy-function (function object object object object none))
(define-extern kernel-copy-to-kernel-ram (function none))
(define-extern kernel-write-function (function object object object none))
(define-extern kernel-read-function (function object object none))
(define-extern kernel-read (function none))
(define-extern kernel-check-hardwired-addresses (function none))
(define-extern install-default-debug-handler (function object none))
(define-extern kernel-set-interrupt-vector (function none))
(define-extern kernel-set-level2-vector (function none))
(define-extern deinstall-debug-handler (function none))
(define-extern resend-exception (function none))


;; ----------------------
;; File - gstring
;; Source Path - kernel/gstring.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Functions

(define-extern string-get-arg!! (function string string symbol))
(define-extern string= (function string string symbol))
(define-extern string->float (function string float))
(define-extern string->int (function string int))
(define-extern string-skip-whitespace (function (pointer uint8) (pointer uint8)))
(define-extern copyn-string<-charp (function string (pointer uint8) int string))
(define-extern string-suck-up! (function string (pointer uint8) symbol))
(define-extern string-strip-trailing-whitespace! (function string symbol))
(define-extern string-strip-leading-whitespace! (function string symbol))
(define-extern string-skip-to-char (function (pointer uint8) uint (pointer uint8)))
(define-extern cat-string<-string_to_charp (function string string (pointer uint8) (pointer uint8)))
(define-extern copy-string<-string (function string string string))
(define-extern string-charp= (function string (pointer uint8) symbol))
(define-extern string<-charp (function string (pointer uint8) string))
(define-extern charp<-string (function (pointer uint8) string int))
(define-extern copy-charp<-charp (function (pointer uint8) (pointer uint8) (pointer uint8)))
(define-extern cat-string<-string (function string string string))
(define-extern catn-string<-charp (function string (pointer uint8) int string))
(define-extern append-character-to-string (function string uint8 int))
(define-extern charp-basename (function (pointer uint8) (pointer uint8)))
(define-extern clear (function string string))
(define-extern string<? (function string string symbol))
(define-extern string>? (function string string symbol))
(define-extern string<=? (function string string symbol))
(define-extern string>=? (function string string symbol))
;; this one might be wrong
(define-extern string-cat-to-last-char (function string string uint (pointer uint8)))
(define-extern string-strip-whitespace! (function string symbol))
(define-extern string-get-int32!! (function (pointer int32) string symbol))
(define-extern string-get-float!! (function (pointer float) string symbol))
(define-extern string-get-flag!! (function (pointer symbol) string string string symbol))

;; - Symbols

(define-extern *string-tmp-str* string)
(define-extern string type)
(define-extern *temp-string* string)


;; ----------------------
;; File - dgo-h
;; Source Path - kernel/dgo-h.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Types

(deftype dgo-entry (structure)
  ((offset uint32  :offset-assert 0)
   (length uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dgo-file (basic)
  ((num-go-files uint32           :offset-assert 4)
   (total-length uint32           :offset-assert 8)
   (rsvd         uint32           :offset-assert 12)
   (data         uint8 :dynamic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;; ----------------------
;; File - gstate
;; Source Path - kernel/gstate.gc
;; Containing DGOs - ['KERNEL']
;; Version - 3

;; - Functions

(define-extern enter-state (function object object object object object object object))
(define-extern inherit-state (function state state state))
(define-extern send-event-function (function process-tree event-message-block object))
(define-extern looping-code (function symbol))


;; ----------------------
;; File - types-h
;; Source Path - engine/util/types-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype time-frame (int64)
  ()
  :flag-assert #x900000008
  )

(deftype part-id (uint32)
  ()
  :flag-assert #x900000004
  )

;; - Symbols

(define-extern int64 type)
(define-extern uint32 type)


;; ----------------------
;; File - math
;; Source Path - engine/math/math.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype rgba (uint32)
  ((r uint8 :offset 0)
   (g uint8 :offset 8)
   (b uint8 :offset 16)
   (a uint8 :offset 24)
   )
  :flag-assert #x900000004
  )

;; TODO: fields
(deftype xyzw (uint128)
  ()
  :flag-assert #x900000010
  )

;; TODO: fields
(deftype xyzwh (uint128)
  ()
  :flag-assert #x900000010
  )

(deftype random-generator (basic)
  ((seed uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; - Functions

(define-extern rand-vu (function float))
(define-extern rand-vu-float-range (function float float float))
(define-extern truncate (function float float))
(define-extern integral? (function float symbol))
(define-extern fractional-part (function float float))
(define-extern log2 (function int int))
(define-extern seek (function float float float float))
(define-extern lerp (function float float float float))
(define-extern lerp-scale (function float float float float float float))
(define-extern lerp-clamp (function float float float float))
(define-extern seekl (function int int int int))
(define-extern rand-vu-init (function float float))
(define-extern rand-vu-nostep (function float))
(define-extern rand-vu-percent? (function float symbol))
(define-extern rand-vu-int-range (function int int int))
(define-extern rand-vu-int-count (function int int))
(define-extern rand-uint31-gen (function random-generator uint))

;; - Symbols

(define-extern *random-generator* random-generator)


;; ----------------------
;; File - vector-h
;; Source Path - engine/math/vector-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype bit-array (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   (_pad             uint8  :offset-assert 12)
   (bytes            uint8  :dynamic :offset 12)
   )
  :method-count-assert 13
  :size-assert         #xd
  :flag-assert         #xd0000000d
  (:methods
    (new (symbol type int) _type_ 0)
    (get-bit (_type_ int) symbol 9)
    (clear-bit (_type_ int) int 10)
    (set-bit (_type_ int) int 11)
    (clear-all! (_type_) _type_ 12)
    )
  )

(deftype vector4ub (structure)
  ((data uint8 4 :offset-assert 0)
   (x    uint8     :offset 0)
   (y    uint8     :offset 1)
   (z    uint8     :offset 2)
   (w    uint8     :offset 3)
   (clr  uint32    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector4b (structure)
  ((data int8 4 :offset-assert 0)
   (x    int8      :offset 0)
   (y    int8      :offset 1)
   (z    int8      :offset 2)
   (w    int8      :offset 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2h (structure)
  ((data int16 2 :score -9999 :offset-assert 0 :do-not-decompile)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2uh (structure)
  ((data uint16 2 :offset-assert 0)
   (x    uint16    :offset 0)
   (y    uint16    :offset 2)
   (val  uint32    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector3h (structure)
  ((data int16 2 :score -9999 :offset-assert 0) ;; probably a bug, should be 3.
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector2w (structure)
  ((data int32 2 :score -9999 :offset-assert 0)
   (x    int32     :offset 0)
   (y    int32     :offset 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3w (structure)
  ((data int32 3 :score -9999 :offset-assert 0)
   (x    int32     :offset 0)
   (y    int32     :offset 4)
   (z    int32     :offset 8)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4w (structure)
  ((data  uint32  4 :score -9999 :offset-assert 0)
   (x     int32     :offset 0)
   (y     int32     :offset 4)
   (z     int32     :offset 8)
   (w     int32     :offset 12)
   (dword uint64  2 :offset 0)
   (quad  uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4w-2 (structure)
  ((data   int32 8 :score -9999 :offset-assert 0)
   (quad   uint128 2 :offset 0)
   (vector vector4w 2 :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype vector4w-3 (structure)
  ((data   int32 12 :score -9999 :offset-assert 0)
   (quad   uint128 3  :offset 0)
   (vector vector4w 3  :inline :score 100 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector4w-4 (structure)
  ((data   int32 16 :score -9999 :offset-assert 0)
   (quad   uint128 4  :offset 0)
   (vector vector4w 4  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vector4h (structure)
  ((data int16 4 :offset-assert 0)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset 4)
   (w    int16     :offset 6)
   (long uint64    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector8h (structure)
  ((data int16 8 :offset-assert 0)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector16b (structure)
  ((data int8 16 :offset-assert 0)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector (structure)
  ((x float :offset 0)
   (y float :offset 4)
   (z float :offset 8)
   (w float :offset 12)
   (data float 4  :score -9999 :offset 0)
   (quad uint128 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4s-3 (structure)
  ((data   float 12 :offset-assert 0) ;; guess
   (quad   uint128 3  :offset 0)
   (vector vector 3 :inline :offset 0)     ;; guess
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector-array (inline-array-class)
  ((data  vector  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rgbaf (vector)
  ((r    float     :offset 0)
   (g    float     :offset 4)
   (b    float     :offset 8)
   (a    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype plane (vector)
  ((a    float     :offset 0)
   (b    float     :offset 4)
   (c    float     :offset 8)
   (d    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sphere (vector)
  ((r    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; todo isphere
(deftype isphere (vec4s)
  ()
  )

(deftype box8s (structure)
  ((data   float 8       :offset-assert 0)
   (quad   uint128 2       :offset 0)
   (vector vector 2       :offset 0)
   (min    vector  :inline :offset 0)
   (max    vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype box8s-array (inline-array-class)
  ((data  box8s  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cylinder (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (debug-draw (_type_ vector4w) none 9)
    (ray-capsule-intersect (_type_ vector vector) float 10)
    )
  )

(deftype cylinder-flat (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (debug-draw (_type_ vector4w) none 9)
    (ray-flat-cyl-intersect (_type_ vector vector) float 10)
    )
  )

(deftype vertical-planes (structure)
  ((data uint128 4 :offset-assert 0) ;; probably wrong
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vertical-planes-array (basic)
  ((length uint32           :offset-assert 4)
   (data   vertical-planes :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; the signs on these are a guess
(deftype qword (structure)
  ((data     uint32  4       :offset-assert 0)
   (byte     uint8  16      :offset 0)
   (hword    uint16  8       :offset 0)
   (word     uint32  4       :offset 0)
   (dword    uint64  2       :offset 0)
   (quad     uint128          :offset 0)
   (vector   vector   :inline :offset 0 :score -100)
   (vector4w vector4w :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector3s (structure)
  ((data float 3 :offset-assert 0)
   (x    float     :offset 0)
   (y    float     :offset 4)
   (z    float     :offset 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; - Functions

(define-extern vector-dot (function vector vector float))
(define-extern vector-dot-vu (function vector vector float))
(define-extern vector4-dot (function vector vector float))
(define-extern vector4-dot-vu (function vector vector float))
(define-extern vector+! (function vector vector vector vector))
(define-extern vector-! (function vector vector vector vector))
(define-extern vector-zero! (function vector vector))
(define-extern vector-reset! (function vector vector))
(define-extern vector-copy! (function vector vector vector))

;; - Symbols

(define-extern *null-vector* vector)
(define-extern *identity-vector* vector)
(define-extern *x-vector* vector)
(define-extern *y-vector* vector)
(define-extern *z-vector* vector)
(define-extern *up-vector* vector)
(define-extern *zero-vector* vector)


;; ----------------------
;; File - bounding-box-h
;; Source Path - engine/geometry/bounding-box-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype bounding-box (structure)
  ((min vector :inline :offset-assert 0)
   (max vector :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x20
  :flag-assert         #x1000000020
  (:methods
    (add-spheres! (_type_ (inline-array sphere) int) int 9)
    (add-point! (_type_ vector3s) int 10)
    (set-from-point-offset! (_type_ vector3s vector3s) int 11)
    (set-from-point-offset-pad! (_type_ vector3s vector3s float) int 12)
    (set-from-sphere! (_type_ sphere) int 13)
    (set-from-spheres! (_type_ (inline-array sphere) int) int 14)
    (add-box! (_type_ bounding-box) int 15)
    )
  )

(deftype bounding-box4w (structure)
  ((min vector4w :inline :offset-assert 0)
   (max vector4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype bounding-box-both (structure)
  ((box   bounding-box   :inline :offset-assert 0)
   (box4w bounding-box4w :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


;; ----------------------
;; File - matrix-h
;; Source Path - engine/math/matrix-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype matrix (structure)
  ((vector vector 4  :score 999 :inline :offset 0)
   (quad   uint128 4  :offset 0)
   (data   float 16 :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (transform-vectors! (_type_ (inline-array vector) (inline-array vector) int) none 9)
    )
  )

(deftype matrix3 (structure)
  ((data   float 12 :offset-assert 0)
   (vector vector 3 :inline :offset 0)
   (quad   uint128 3  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype matrix4h (structure)
  ((data     int16 16 :offset-assert 0)
   (vector4h vector4h 4 :inline :offset 0)
   (long     int64 4  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; - Functions

(define-extern matrix-copy! (function matrix matrix matrix))


;; ----------------------
;; File - quaternion-h
;; Source Path - engine/math/quaternion-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype quaternion (structure)
  ((x    float           :offset-assert 0)
   (y    float           :offset-assert 4)
   (z    float           :offset-assert 8)
   (w    float           :offset-assert 12)
   (data float 4 :score -9999 :offset 0)
   (vec  vector  :inline :offset 0)
   (quad uint128         :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Symbols

(define-extern *unity-quaternion* quaternion)


;; ----------------------
;; File - euler-h
;; Source Path - engine/math/euler-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype euler-angles (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Symbols

(define-extern EulSafe (array int32))
(define-extern EulNext (array int32))


;; ----------------------
;; File - transform-h
;; Source Path - engine/math/transform-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype transform (structure)
  ((trans vector :inline :offset-assert 0)
   (rot   vector :inline :offset-assert 16)
   (scale vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trs (basic)
  ((trans vector :inline :offset-assert 16)
   (rot   vector :inline :offset-assert 32)
   (scale vector :inline :offset-assert 48)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


;; ----------------------
;; File - geometry-h
;; Source Path - engine/geometry/geometry-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype curve (structure)
  ((cverts     (inline-array vector)  :offset-assert 0)
   (num-cverts int32   :offset-assert 4)
   (knots      (pointer float)  :offset-assert 8)
   (num-knots  int32   :offset-assert 12)
   (length     float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype border-plane (basic)
  ((name   symbol         :offset-assert 4)
   (action basic          :offset-assert 8)
   (slot   int8           :offset-assert 12)
   (trans  vector :inline :offset-assert 16)
   (normal vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (debug-draw! (_type_) none 9)
    (point-past-plane? (_type_ vector) symbol 10)
    )
  )


;; ----------------------
;; File - transformq-h
;; Source Path - engine/math/transformq-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype transformq (transform)
  ((quat  quaternion :inline :offset 16 :score 100)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trsq (trs)
  ((quat  quaternion :inline :offset 32 :score 100)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype trsqv (trsq)
  ((pause-adjust-distance meters             :offset 4)
   (nav-radius            meters             :offset 8)
   (transv                vector     :inline :offset-assert 64)
   (rotv                  vector     :inline :offset-assert 80)
   (scalev                vector     :inline :offset-assert 96)
   (dir-targ              quaternion :inline :offset-assert 112)
   (angle-change-time     time-frame              :offset-assert 128)
   (old-y-angle-diff      float              :offset-assert 136)
   )
  :method-count-assert 28
  :size-assert         #x8c
  :flag-assert         #x1c0000008c
  (:methods
    (seek-toward-heading-vec! (_type_ vector float time-frame) quaternion 9)
    (set-heading-vec! (_type_ vector) quaternion 10)
    (seek-to-point-toward-point! (_type_ vector float time-frame) quaternion 11)
    (point-toward-point! (_type_ vector) quaternion 12)
    (seek-toward-yaw-angle! (_type_ float float time-frame) quaternion 13)
    (set-yaw-angle-clear-roll-pitch! (_type_ float) quaternion 14)
    (set-roll-to-grav! (_type_ float) quaternion 15)
    (set-roll-to-grav-2! (_type_ float) quaternion 16)
    (rotate-toward-orientation! (_type_ quaternion float float) quaternion 17)
    (set-quaternion! (_type_ quaternion) quaternion 18)
    (set-heading-vec-clear-roll-pitch! (_type_ vector) quaternion 19)
    (point-toward-point-clear-roll-pitch! (_type_ vector) quaternion 20)
    (rot->dir-targ! (_type_) quaternion 21)
    (y-angle (_type_) float 22)
    (global-y-angle-to-point (_type_ vector) float 23)
    (relative-y-angle-to-point (_type_ vector) float 24)
    (roll-relative-to-gravity (_type_) float 25)
    (set-and-limit-velocity (_type_ int vector float) trsqv 26)
    (get-quaternion (_type_) quaternion 27)
    )
  )

;; - Functions

(define-extern deg-diff (function float float float))
(define-extern vector-y-angle (function vector float))


;; ----------------------
;; File - bounding-box
;; Source Path - engine/geometry/bounding-box.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern box-vector-enside? (function bounding-box vector symbol))
(define-extern box-vector-inside? (function bounding-box vector symbol))


;; ----------------------
;; File - matrix
;; Source Path - engine/math/matrix.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern atan (function float float float))
(define-extern matrix-4x4-determinant (function matrix float))
(define-extern matrix-3x3-determinant (function matrix float))
(define-extern matrix-axis-sin-cos! (function matrix vector float float matrix))
(define-extern sin (function float float))
(define-extern cos (function float float))
(define-extern matrix-rotate-y! (function matrix float matrix))
(define-extern matrix-rotate-x! (function matrix float matrix))
(define-extern matrix*! (function matrix matrix matrix matrix))
(define-extern vector-sincos! (function vector vector vector int))
(define-extern matrix-rotate-z! (function matrix float matrix))
(define-extern matrix-identity! (function matrix matrix))
(define-extern matrix-transpose! (function matrix matrix matrix))
(define-extern vector-rotate*! (function vector vector matrix vector))
(define-extern vector-matrix*! (function vector vector matrix vector))
(define-extern matrix+! (function matrix matrix matrix matrix))
(define-extern matrix-! (function matrix matrix matrix matrix))
(define-extern matrixp*! (function matrix matrix matrix matrix))
(define-extern vector3s-matrix*! (function vector3s vector3s matrix vector3s))
(define-extern vector3s-rotate*! (function vector3s vector3s matrix vector3s))
(define-extern matrix-inverse-of-rot-trans! (function matrix matrix matrix))
(define-extern matrix-4x4-inverse! (function matrix matrix matrix))
(define-extern matrix-translate! (function matrix vector matrix))
(define-extern matrix-translate+! (function matrix matrix vector matrix))
(define-extern matrix-scale! (function matrix vector matrix))
(define-extern scale-matrix! (function matrix vector matrix matrix))
(define-extern matrix-inv-scale! (function matrix vector matrix))
(define-extern column-scale-matrix! (function matrix vector matrix matrix))
(define-extern matrix-rotate-zyx! (function matrix vector matrix))
(define-extern matrix-rotate-xyz! (function matrix vector matrix))
(define-extern matrix-rotate-zxy! (function matrix vector matrix))
(define-extern matrix-rotate-yxz! (function matrix vector matrix))
(define-extern matrix-rotate-yzx! (function matrix vector matrix))
(define-extern matrix-rotate-yxy! (function matrix vector matrix))
(define-extern matrix-rotate-yx! (function matrix float float matrix))
(define-extern matrix-axis-sin-cos-vu! (function matrix vector float float none))
(define-extern matrix-axis-angle! (function matrix vector float none))
(define-extern matrix-lerp! (function matrix matrix matrix float matrix))
(define-extern matrix3-determinant (function matrix float))
(define-extern matrix-3x3-inverse! (function matrix matrix matrix))
(define-extern matrix-3x3-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix3-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix-4x4-inverse-transpose! (function matrix matrix matrix))
(define-extern matrix-y-angle (function matrix float))

;; - Symbols

(define-extern *identity-matrix* matrix)


;; ----------------------
;; File - transform
;; Source Path - engine/math/transform.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern transform-matrix-calc! (function transform matrix matrix))
(define-extern vector-identity! (function vector vector))
(define-extern transform-matrix-parent-calc! (function transform matrix vector matrix))
(define-extern trs-matrix-calc! (function trs matrix matrix))


;; ----------------------
;; File - quaternion
;; Source Path - engine/math/quaternion.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern quaternion->matrix (function matrix quaternion matrix))
(define-extern quaternion-vector-angle! (function quaternion vector float quaternion))
(define-extern vector-xz-length (function vector float))
(define-extern vector-xz-normalize! (function vector float vector))
(define-extern quaternion-from-two-vectors-max-angle! (function quaternion vector vector float quaternion))
(define-extern vector-z-quaternion! (function vector quaternion vector))
(define-extern quaternion-normalize! (function quaternion quaternion))
(define-extern quaternion*! (function quaternion quaternion quaternion quaternion))
(define-extern acos (function float float))
(define-extern vector-x-quaternion! (function vector quaternion vector))
(define-extern quaternion-y-angle (function quaternion float))
(define-extern vector-rad<-vector-deg/2! (function vector vector int))
(define-extern vector-sincos-rad! (function vector vector vector int))
(define-extern quaternion-dot (function quaternion quaternion float))
(define-extern atan-series-rad (function float float))
(define-extern vector-sin-rad! (function vector vector vector))
(define-extern vector-length (function vector float))
(define-extern sincos-rad! (function (pointer float) float int))
(define-extern quaternion-vector-len (function quaternion float))
(define-extern atan2-rad (function float float float))
(define-extern matrix->quaternion (function quaternion matrix quaternion))
(define-extern quaternion-float*! (function quaternion quaternion float quaternion))
(define-extern acos-rad (function float float))
(define-extern quaternion-norm (function quaternion float))
(define-extern quaternion-axis-angle! (function quaternion float float float float quaternion))
(define-extern vector-angle<-quaternion! (function vector quaternion vector))
(define-extern quaternion-zero! (function quaternion quaternion))
(define-extern quaternion-identity! (function quaternion quaternion))
(define-extern quaternion-i! (function quaternion quaternion))
(define-extern quaternion-j! (function quaternion quaternion))
(define-extern quaternion-k! (function quaternion quaternion))
(define-extern quaternion-copy! (function quaternion quaternion quaternion))
(define-extern quaternion-set! (function quaternion float float float float quaternion))
(define-extern quaternion+! (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-! (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-negate! (function quaternion quaternion quaternion))
(define-extern quaternion-conjugate! (function quaternion quaternion quaternion))
(define-extern quaternion-float/! (function quaternion quaternion float quaternion))
(define-extern quaternion-norm2 (function quaternion float))
(define-extern quaternion-inverse! (function quaternion quaternion quaternion))
(define-extern quaternion-right-mult-matrix! (function matrix quaternion matrix))
(define-extern quaternion-left-mult-matrix! (function matrix quaternion matrix))
(define-extern matrix-with-scale->quaternion (function quaternion matrix quaternion))
(define-extern quaternion-log! (function quaternion quaternion quaternion))
(define-extern quaternion-exp! (function quaternion quaternion quaternion))
(define-extern quaternion-slerp! (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-pseudo-slerp! (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-zxy! (function quaternion vector quaternion))
(define-extern vector-y-quaternion! (function vector quaternion vector))
(define-extern quaternion-vector-y-angle (function quaternion vector float))
(define-extern quaternion-rotate-local-x! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-y! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-z! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-y! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-x! (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-z! (function quaternion quaternion float quaternion))
(define-extern quaternion-delta-y (function quaternion quaternion float))
(define-extern quaternion-rotate-y-to-vector! (function quaternion quaternion quaternion float quaternion))
(define-extern vector-rotate-y! (function vector vector float vector))
(define-extern vector-x-angle (function vector float))
(define-extern quaterion<-rotate-y-vector (function quaternion vector quaternion))
(define-extern quaternion-validate (function quaternion none))
(define-extern quaternion-xz-angle (function quaternion float))


;; ----------------------
;; File - euler
;; Source Path - engine/math/euler.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern matrix->eul (function euler-angles matrix int euler-angles))
(define-extern eul->matrix (function matrix euler-angles matrix))
(define-extern set-eul! (function euler-angles float float float int euler-angles))
(define-extern eul->quat (function quaternion euler-angles quaternion))
(define-extern quat->eul (function euler-angles quaternion int euler-angles))


;; ----------------------
;; File - geometry
;; Source Path - engine/geometry/geometry.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions



(define-extern vector-vector-distance-squared (function vector vector float))

(define-extern vector-vector-distance (function vector vector float))
(define-extern circle-circle-xz-intersect (function sphere sphere vector vector int))
(define-extern vector-normalize-copy! (function vector vector float vector))
(define-extern forward-up->quaternion (function quaternion vector vector quaternion))
(define-extern matrix-from-two-vectors-partial-linear! (function matrix vector vector float matrix))
(define-extern matrix-from-two-vectors-max-angle! (function matrix vector vector float matrix))
(define-extern vector-negate! (function vector vector vector))
(define-extern vector-normalize-ret-len! (function vector float float))
(define-extern vector-flatten! (function vector vector vector vector))
(define-extern vector-normalize! (function vector float vector))
(define-extern vector-cross! (function vector vector vector vector))
(define-extern forward-down->inv-matrix (function matrix vector vector matrix))
(define-extern forward-up-nopitch->inv-matrix (function matrix vector vector matrix))
(define-extern forward-down-nopitch->inv-matrix (function matrix vector vector matrix))
(define-extern vector-float*! (function vector vector float vector))
(define-extern vector+float*! (function vector vector vector float vector))
(define-extern vector-reflect! (function vector vector vector vector))
(define-extern vector-reflect-flat! (function vector vector vector vector))
(define-extern vector-reflect-true-flat! (function vector vector vector vector))
(define-extern vector-reflect-flat-above! (function vector vector vector vector))
(define-extern vector-segment-distance-point! (function vector vector vector vector float))
(define-extern vector-line-distance (function vector vector vector float))
(define-extern vector-line-distance-point! (function vector vector vector vector float))
(define-extern vector-orient-by-quat! (function vector vector quaternion vector))
(define-extern forward-up-nopitch->quaternion (function quaternion vector vector quaternion))
(define-extern quaternion-from-two-vectors! (function quaternion vector vector quaternion))
(define-extern matrix-from-two-vectors! (function matrix vector vector matrix))
(define-extern matrix-from-two-vectors-max-angle-partial! (function matrix vector vector float float matrix))
(define-extern matrix-remove-z-rot (function matrix matrix matrix))
(define-extern matrix-rot-diff! (function vector matrix matrix float))
(define-extern quaternion-seek (function quaternion quaternion quaternion float float quaternion))
(define-extern vector-deg-seek (function vector vector vector float vector))
(define-extern vector-deg-slerp (function vector vector vector float vector))
(define-extern vector-vector-deg-slerp! (function vector vector vector float vector vector)) ;; stack spills!
(define-extern normal-of-plane (function vector vector vector vector vector))
(define-extern vector-3pt-cross! (function vector vector vector vector vector))
(define-extern closest-pt-in-triangle (function vector vector matrix vector none)) ;; asm branches
(define-extern point-in-triangle-cross (function vector vector vector vector vector symbol))
(define-extern point-in-plane-<-point+normal! (function vector vector vector vector))
(define-extern circle-test (function none))
(define-extern vector-circle-tangent-new (function vector vector vector vector none))
(define-extern vector-circle-tangent (function vector vector vector vector none))
(define-extern find-knot-span (function int int float (inline-array vector) int))
(define-extern calculate-basis-functions-vector! (function vector int float (pointer float) vector))

(define-extern curve-closest-point (function curve vector float float int float float))
(define-extern vector-plane-distance (function vector plane vector float))

(define-extern curve-get-pos! (function vector float curve vector))
(define-extern curve-evaluate! (function vector float (inline-array vector) int (pointer float) int vector))
(define-extern curve-length (function curve float))
(define-extern curve-copy! (function curve curve curve))


;; ----------------------
;; File - trigonometry
;; Source Path - engine/math/trigonometry.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype float-type (uint32)
  ()
  )

;; - Functions

(define-extern coserp180 (function float float float float))
(define-extern coserp (function float float float float))
(define-extern sinerp (function float float float float))
(define-extern asin (function float float))
(define-extern atan0 (function float float float))
(define-extern sign (function float float))
(define-extern vector-rad<-vector-deg! (function vector vector none))
(define-extern deg- (function float float float))
(define-extern radmod (function float float))
(define-extern deg-seek (function float float float float))
(define-extern deg-seek-smooth (function float float float float float))
(define-extern deg-lerp-clamp (function float float float float))
(define-extern sin-rad (function float float))
(define-extern cos-rad (function float float))
(define-extern vector-cos-rad! (function vector vector vector))
(define-extern sincos! (function (pointer float) float int))
(define-extern tan-rad (function float float))
(define-extern tan (function float float))
(define-extern atan-rad (function float float))
(define-extern exp (function float float))
(define-extern sinerp-clamp (function float float float float))
(define-extern coserp-clamp (function float float float float))
(define-extern coserp180-clamp (function float float float float))
(define-extern ease-in-out (function int int float))

;; - Symbols

(define-extern *sin-poly-vec2* vector)
(define-extern *sin-poly-vec* vector)
(define-extern *cos-poly-vec* vector)
(define-extern binary-table (array float))
(define-extern sincos-table (array float))
(define-extern exp-slead (pointer float))
(define-extern exp-strail (pointer float))


;; ----------------------
;; File - gsound-h
;; Source Path - engine/sound/gsound-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum sound-group
  :bitfield #t
  :type uint8
  (sfx)
  (music)
  (dialog)
  (sog3)
  (ambient)
  (sog5)
  (sog6)
  (sog7)
  )

(deftype sound-id (uint32)
  ()
  (:methods
   (unused-9 () none 9)
   )
  :flag-assert #xa00000004
  )

(deftype sound-bank-id (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype sound-name (uint128)
  ((lo  uint64  :offset 0)
   (hi  uint64  :offset 64)
   )
  :flag-assert #x900000010
  )

(defenum sound-mask
  :bitfield #t
  :type uint16
  (volume)
  (pitch)
  (bend)
  (unused)
  (time)
  (trans)
  (fo-min)
  (fo-max)
  (fo-curve)
  )

(deftype sound-rpc-cmd (structure)
  ((rsvd1   uint16  :offset-assert 0)
   (command sound-command  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-play-parms (structure)
  ((mask      sound-mask :offset-assert 0)
   (pitch-mod int16     :offset-assert 2)
   (bend      int16     :offset-assert 4)
   (fo-min    int16     :offset-assert 6)
   (fo-max    int16     :offset-assert 8)
   (fo-curve  int8      :offset-assert 10)
   (priority  int8      :offset-assert 11)
   (volume    int32     :offset-assert 12)
   (trans     vector3w  :inline :offset-assert 16)
   (group     sound-group  :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1d
  :flag-assert         #x90000001d
  )

(deftype sound-rpc-bank-cmd (sound-rpc-cmd)
  ((bank-name sound-name  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-sound-cmd (sound-rpc-cmd)
  ((id      sound-id  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-group-cmd (sound-rpc-cmd)
  ((group   sound-group   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-load-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-load-music (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-unload-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-play (sound-rpc-sound-cmd)
  ((name    sound-name               :offset-assert 16)
   (parms   sound-play-parms :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x3d
  :flag-assert         #x90000003d
  )

(deftype sound-rpc-pause-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-param (sound-rpc-sound-cmd)
  ((parms     sound-play-parms :inline :offset-assert 8)
   (auto-time int32                    :offset-assert 40)
   (auto-from int32                    :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-set-master-volume (sound-rpc-group-cmd)
  ((volume  int32   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-pause-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-stop-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-continue-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-get-irx-version (sound-rpc-cmd)
  ((major   uint32  :offset-assert 4)
   (minor   uint32  :offset-assert 8)
   (ee-addr pointer :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-language (sound-rpc-cmd)
  ((lang    uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-falloff-curve (sound-rpc-cmd)
  ((curve   int32   :offset-assert 4)
   (falloff int32   :offset-assert 8)
   (ease    int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-sound-falloff (sound-rpc-cmd)
  ((name    sound-name  :offset-assert 16)
   (curve   int32    :offset-assert 32)
   (min     int32    :offset-assert 36)
   (max     int32    :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sound-rpc-reload-info (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-reverb (sound-rpc-cmd)
  ((core    uint8   :offset-assert 4)
   (reverb  int32   :offset-assert 8)
   (left    uint32  :offset-assert 12)
   (right   uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype sound-rpc-set-ear-trans (sound-rpc-cmd)
  ((ear-trans vector3w :inline :offset-assert 4)
   (cam-trans vector3w :inline :offset-assert 16)
   (cam-angle int32     :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-set-flava (sound-rpc-cmd)
  ((flava   uint8   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-shutdown (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-fps (sound-rpc-cmd)
  ((fps  uint8  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-list-sounds (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-unload-music (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

; added
(defenum sound-mirror-mode
  :type uint8
  (normal)
  (mirrored)
  )

; added for mirror mode
(deftype sound-rpc-set-mirror-mode (sound-rpc-cmd)
  ((mirror sound-mirror-mode)))

(deftype sound-rpc-union (structure)
  ((data              uint32                     20 :offset-assert 0)
   (load-bank         sound-rpc-load-bank            :offset 0)
   (unload-bank       sound-rpc-unload-bank          :offset 0)
   (play              sound-rpc-play                 :offset 0)
   (pause-sound       sound-rpc-pause-sound          :offset 0)
   (stop-sound        sound-rpc-stop-sound           :offset 0)
   (continue-sound    sound-rpc-continue-sound       :offset 0)
   (set-param         sound-rpc-set-param            :offset 0)
   (set-master-volume sound-rpc-set-master-volume    :offset 0)
   (pause-group       sound-rpc-pause-group          :offset 0)
   (stop-group        sound-rpc-stop-group           :offset 0)
   (continue-group    sound-rpc-continue-group       :offset 0)
   (get-irx-version   sound-rpc-get-irx-version      :offset 0)
   (set-falloff-curve sound-rpc-set-falloff-curve    :offset 0)
   (set-sound-falloff sound-rpc-set-sound-falloff    :offset 0)
   (reload-info       sound-rpc-reload-info          :offset 0)
   (set-language      sound-rpc-set-language         :offset 0)
   (set-reverb        sound-rpc-set-reverb           :offset 0)
   (set-ear-trans     sound-rpc-set-ear-trans        :offset 0)
   (set-flava         sound-rpc-set-flava            :offset 0)
   (set-fps           sound-rpc-set-fps              :offset 0)
   (shutdown          sound-rpc-shutdown             :offset 0)
   (list-sounds       sound-rpc-list-sounds          :offset 0)
   (unload-music      sound-rpc-unload-music         :offset 0)
   (mirror-mode       sound-rpc-set-mirror-mode      :offset 0) ;; added
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sound-spec (basic)
  ((mask            sound-mask :offset-assert 4)
   (num             float      :offset-assert 8)
   (group           sound-group :offset-assert 12)
   (sound-name-char uint8 16   :offset 16)
   (sound-name      sound-name :score 20 :offset 16)
   (trans           float 4    :offset-assert 32) ;; guess
   (volume          int32      :offset-assert 48)
   (pitch-mod       int32      :offset-assert 52)
   (bend            int32      :offset-assert 56)
   (fo-min          int16      :offset-assert 60)
   (fo-max          int16      :offset-assert 62)
   (fo-curve        int8       :offset-assert 64)
   (priority        int8       :offset-assert 65)
   (auto-time       int32      :offset-assert 68)
   (auto-from       int32      :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(declare-type res-lump basic)
(declare-type entity res-lump)
(deftype ambient-sound (basic)
  ((spec         sound-spec       :offset-assert 4)
   (playing-id   sound-id         :offset-assert 8)
   (trans        vector   :inline :offset-assert 16)
   (name         sound-name       :offset-assert 32)
   (play-time    time-frame       :offset-assert 48)
   (time-base    time-frame       :offset-assert 56)
   (time-random  time-frame       :offset-assert 64)
   (volume       int32            :offset-assert 72)
   (pitch        int32            :offset-assert 76)
   (falloff-near int32            :offset-assert 80)
   (falloff-far  int32            :offset-assert 84)
   (falloff-mode int32            :offset-assert 88)
   (params       (pointer float)  :offset-assert 92)
   (param-count  int32            :offset-assert 96)
   (entity       entity           :offset-assert 100)
   (sound-count  int32            :offset-assert 104)
   )
  :method-count-assert 14
  :size-assert         #x6c
  :flag-assert         #xe0000006c
  (:methods
    (new (symbol type basic vector) _type_ 0)
    (update! (_type_) int 9)
    (change-sound! (_type_ sound-name) int 10)
    (update-trans! (_type_ vector) int 11)
    (update-vol! (_type_ int) int 12)
    (stop! (_type_) int 13)
    )
  )

;; - Symbols

(define-extern *current-sound-id* sound-id)
(define-extern *sound-bank-1* symbol)
(define-extern *sound-bank-2* symbol)


;; ----------------------
;; File - timer-h
;; Source Path - engine/ps2/timer-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype timer-mode (uint32)
  ((clks  timer-clock-selection :offset 0 :size 2)
   (gate  uint8 :offset 2 :size 1) ;; gate function enable
   (gats  uint8 :offset 3 :size 1) ;; gate selection: 0 = hblank, 1 = vblank
   ;; gate mode:
   ;;  0: count while gate signal is low
   ;;  1: start when gate signal rises
   ;;  2: start when gate signal falls
   ;;  3: start when gate signal rises/falls
   (gatm  uint8 :offset 4 :size 2)
   (zret  uint8 :offset 6 :size 1) ;; zero return: clear counter when equal to reference value
   (cue   uint8 :offset 7 :size 1) ;; count-up enable
   (cmpe  uint8 :offset 8 :size 1) ;; compare-interrupt enable
   (ovfe  uint8 :offset 9 :size 1) ;; overflow-interrupt enable
   (equf  uint8 :offset 10 :size 1) ;; equal-flag
   (ovff  uint8 :offset 11 :size 1) ;; overflow-flag
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype timer-bank (structure)
  ((count uint32      :offset 0)
   (mode  timer-mode  :offset 16)
   (comp  uint32      :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype timer-hold-bank (timer-bank)
  ((hold  uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype stopwatch (basic)
  ((prev-time-elapsed time-frame  :offset-assert 8)
   (start-time        time-frame  :offset-assert 16)
   (begin-level       int32   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype profile-frame (structure)
  ((name       symbol  :offset-assert 0)
   (time-stamp uint32  :offset-assert 4)
   (color      rgba    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(declare-type dma-buffer basic)
(deftype profile-bar (basic)
  ((profile-frame-count int32        :offset-assert 4)
   (cache-time          time-frame       :offset-assert 8)
   (data                profile-frame 1024 :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x4010
  :flag-assert         #xe00004010
  (:methods
    (new (symbol type) _type_)
    (get-last-frame-time-stamp (_type_) uint 9)
    (reset (_type_) _type_ 10)
    (add-frame (_type_ symbol rgba) profile-frame 11)
    (add-end-frame (_type_ symbol rgba) profile-frame 12)
    (draw (_type_ dma-buffer int) float 13)
    )
  )

;; - Functions

(define-extern timer-init (function timer-bank timer-mode int))

;; - Symbols

(define-extern *ticks-per-frame* int)


;; ----------------------
;; File - timer
;; Source Path - engine/ps2/timer.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern stopwatch-elapsed-ticks (function stopwatch time-frame))
(define-extern timer-reset (function timer-bank none))
(define-extern timer-count (function timer-bank uint))
(define-extern disable-irq (function none))
(define-extern enable-irq (function none))
(define-extern stopwatch-init (function stopwatch int))
(define-extern stopwatch-reset (function stopwatch int))
(define-extern stopwatch-start (function stopwatch int))
(define-extern stopwatch-stop (function stopwatch none))
(define-extern stopwatch-begin (function stopwatch int))
(define-extern stopwatch-end (function stopwatch none))
(define-extern stopwatch-elapsed-seconds (function stopwatch float))


;; ----------------------
;; File - vif-h
;; Source Path - engine/ps2/vif-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype vif-stat (uint32)
  ((vps uint8 :offset 0 :size 2)
   (vew uint8 :offset 2 :size 1)
   (mrk uint8 :offset 6 :size 1)
   (vss uint8 :offset 8 :size 1)
   (vfs uint8 :offset 9 :size 1)
   (vis uint8 :offset 10 :size 1)
   (int uint8 :offset 11 :size 1)
   (er0 uint8 :offset 12 :size 1)
   (er1 uint8 :offset 13 :size 1)
   (fqc uint8 :offset 24 :size 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-fbrst (uint32)
  ((rst uint8 :offset 0 :size 1)
   (fbk uint8 :offset 1 :size 1)
   (stp uint8 :offset 2 :size 1)
   (stc uint8 :offset 3 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-err (uint32)
  ((mii uint8 :offset 0 :size 1)
   (me0 uint8 :offset 1 :size 1) ;; PS2 hardware bug, must set this to 1 for correct operation.
   (me1 uint8 :offset 2 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-bank (structure)
  ((stat   uint32  :offset-assert 0)
   (fbrst  uint32  :offset 16)
   (err    vif-err :offset 32)
   (mark   uint32  :offset 48)
   (cycle  uint32  :offset 64)
   (mode   uint32  :offset 80)
   (num    uint32  :offset 96)
   (mask   uint32  :offset 112)
   (code   uint32  :offset 128)
   (itops  uint32  :offset 144)
   (base   uint32  :offset 160)
   (offset uint32  :offset 176)
   (tops   uint32  :offset 192)
   (itop   uint32  :offset 208)
   (top    uint32  :offset 224)
   (r0     uint32  :offset 256)
   (r1     uint32  :offset 272)
   (r2     uint32  :offset 288)
   (r3     uint32  :offset 304)
   (c0     uint32  :offset 320)
   (c1     uint32  :offset 336)
   (c2     uint32  :offset 352)
   (c3     uint32  :offset 368)
   )
  :method-count-assert 9
  :size-assert         #x174
  :flag-assert         #x900000174
  )


;; ----------------------
;; File - dma-h
;; Source Path - engine/dma/dma-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype dma-chcr (uint32)
  ((dir uint8 :offset 0 :size 1) ;; 1 - from memory
   (mod uint8 :offset 2 :size 2) ;; normal, chain, interleave
   (asp uint8 :offset 4 :size 2) ;; none, 1, 2
   (tte uint8 :offset 6 :size 1) ;; transfer tag (sc only)
   (tie uint8 :offset 7 :size 1) ;; tag interrupt
   (str uint8 :offset 8 :size 1) ;; start!
   (tag uint16 :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype dma-bank (structure)
  ((chcr dma-chcr  :offset 0)
   (madr uint32  :offset 16)
   (qwc  uint32  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype dma-bank-source (dma-bank)
  ((tadr uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype dma-bank-vif (dma-bank-source)
  ((as0  uint32  :offset 64)
   (as1  uint32  :offset 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

(deftype dma-bank-spr (dma-bank-source)
  ((sadr uint32  :offset 128)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype dma-ctrl (uint32)
  ((dmae  uint8 :offset 0 :size 1)
   (rele  uint8 :offset 1 :size 1)
   (mfd   uint8 :offset 2 :size 2)
   (sts   uint8 :offset 4 :size 2)
   (std   uint8 :offset 6 :size 2)
   (rcyc  uint8 :offset 8 :size 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  ;; likely a bitfield type
  )

(deftype dma-enable (uint32)
  ((cpnd  uint8 :offset 16 :size 1))
  :flag-assert #x900000004
  )

(deftype dma-sqwc (uint32)
  ((sqwc  uint8 :offset 0  :size 8)
   (tqwc  uint8 :offset 16 :size 8)
   )
  :flag-assert #x900000004
  )

(deftype dma-bank-control (structure)
  ((ctrl    dma-ctrl  :offset 0)
   (stat    uint32  :offset 16)
   (pcr     uint32  :offset 32)
   (sqwc    dma-sqwc  :offset 48)
   (rbsr    uint32  :offset 64)
   (rbor    uint32  :offset 80)
   (stadr   uint32  :offset 96)
   (enabler uint32  :offset 5408)
   (enablew uint32  :offset 5520)
   )
  :method-count-assert 9
  :size-assert         #x1594
  :flag-assert         #x900001594
  )

(deftype vu-code-block (basic)
  ((name         basic   :offset-assert 4)
   (code         uint32  :offset-assert 8)
   (size         int32   :offset-assert 12)
   (dest-address uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype vu-stat (uint64)
  ()
  :flag-assert #x900000008
  )

(deftype dma-tag (uint64)
  ((qwc uint16    :offset 0)          ;; quadword count
   (pce uint8     :offset 26 :size 2)  ;; priority (source mode)
   (id dma-tag-id :offset 28 :size 3)   ;; ID (what the tag means)
   (irq uint8     :offset 31 :size 1)  ;; interrupt at the end?
   (addr uint32   :offset 32 :size 31) ;; address (31 bits)
   (spr uint8     :offset 63 :size 1)    ;; spr or not flag.
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dma-bucket (structure)
  ((tag   dma-tag  :offset-assert 0)     ;; the DMA tag to transfer the bucket's data
   (last  (pointer dma-tag)  :offset-assert 8)  ;; the last tag of this bucket.
   (dummy uint32  :offset-assert 12)     ;; empty space.
   (next  uint32  :offset 4)             ;; this overlaps with the addr bit-field of the dma-tag
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vif-mask (uint32)
  ((m0  uint8 :offset 0  :size 2)
   (m1  uint8 :offset 2  :size 2)
   (m2  uint8 :offset 4  :size 2)
   (m3  uint8 :offset 6  :size 2)
   (m4  uint8 :offset 8  :size 2)
   (m5  uint8 :offset 10 :size 2)
   (m6  uint8 :offset 12 :size 2)
   (m7  uint8 :offset 14 :size 2)
   (m8  uint8 :offset 16 :size 2)
   (m9  uint8 :offset 18 :size 2)
   (m10 uint8 :offset 20 :size 2)
   (m11 uint8 :offset 22 :size 2)
   (m12 uint8 :offset 24 :size 2)
   (m13 uint8 :offset 26 :size 2)
   (m14 uint8 :offset 28 :size 2)
   (m15 uint8 :offset 30 :size 2)
   )
  :flag-assert #x900000004
  )

(deftype vif-stcycl-imm (uint16)
  ((cl  uint8 :offset 0 :size 8)
   (wl  uint8 :offset 8 :size 8)
   )
  :flag-assert #x900000002
  )

(deftype vif-unpack-imm (uint16)
  ((addr  uint16 :offset 0  :size 10)
   (usn   uint8  :offset 14 :size 1)
   (flg   uint8  :offset 15 :size 1)
   )
  :flag-assert #x900000002
  )

(deftype vif-tag (uint32)
  ((imm uint16  :offset 0 :size 16)
   (num uint8   :offset 16 :size 8)
   (cmd vif-cmd :offset 24 :size 7)
   (irq uint8   :offset 31 :size 1)
   (msk uint8   :offset 28 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; - Functions

(define-extern dma-sync-fast (function dma-bank none))
(define-extern dma-send-no-scratch (function dma-bank uint32 uint32 none))
(define-extern dma-sync-with-count (function dma-bank (pointer int32) int))
;
(define-extern dma-count-until-done (function dma-bank (pointer int32) int))

;; - Symbols

(define-extern uint16 type)


;; ----------------------
;; File - video-h
;; Source Path - engine/gfx/hw/video-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype video-parms (structure)
  ((set-video-mode              basic  :offset-assert 0)
   (reset-video-mode            basic  :offset-assert 4)
   (screen-sy                   int32  :offset-assert 8)
   (screen-hy                   int32  :offset-assert 12)
   (screen-miny                 int32  :offset-assert 16)
   (screen-maxy                 int32  :offset-assert 20)
   (screen-masky                int32  :offset-assert 24)
   (display-dx                  int32  :offset-assert 28)
   (display-dy                  int32  :offset-assert 32)
   (screen-pages-high           int32  :offset-assert 36)
   (_pad                        int64)
   (relative-x-scale            float  :offset-assert 48)
   (relative-y-scale            float  :offset-assert 52)
   (_pad2                       int64)
   (relative-x-scale-reciprical float  :offset-assert 64)
   (relative-y-scale-reciprical float  :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; - Symbols

(define-extern *video-parms* video-parms)


;; ----------------------
;; File - vu1-user-h
;; Source Path - engine/gfx/hw/vu1-user-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype dma-foreground-sink (basic)
  ((bucket                   bucket-id  :offset-assert 4)
   (foreground-texture-page  int8   :offset-assert 8)
   (foreground-texture-level int8   :offset-assert 9)
   (foreground-output-bucket int8   :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xb
  :flag-assert         #x90000000b
  )

(deftype generic-bucket-state (structure)
  ((gifbuf-adr uint32  :offset-assert 0)
   (inbuf-adr  uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype generic-dma-foreground-sink (dma-foreground-sink)
  ((state                    generic-bucket-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(declare-type level basic)
(deftype dma-foreground-sink-group (basic)
  ((sink         dma-foreground-sink       3 :offset-assert 4)
   (merc-sink    dma-foreground-sink         :offset 4)
   (generic-sink generic-dma-foreground-sink :offset 8)
   (level        level                       :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; - Symbols

(defenum vu1-renderer-mask
  :bitfield #t
  (sky 3)
  (ocean 4)
  (ocean-wave 5)
  (tfrag 6)
  (tie-near 7)
  (tie 8)
  (generic 9)
  (merc 10)
  (shrubbery 11)
  (shrub-near 12)
  (billboard 13)
  (trans-shrubbery 14)
  (trans-tfrag 15)
  (sprite 16)
  (shadow 17)
  (depth-cue 18)
  (nineteen 19)
  (twenty 20)
  )

(define-extern *vu1-enable-user-menu* vu1-renderer-mask)
(define-extern *vu1-enable-user* vu1-renderer-mask)


;; ----------------------
;; File - dma
;; Source Path - engine/dma/dma.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern flush-cache (function int none))
(define-extern dma-sync (function pointer int int int))
(define-extern reset-path (function none))
(define-extern reset-graph (function int int int int none))
(define-extern dma-sync-hang (function dma-bank none))
(define-extern dma-sync-crash (function dma-bank none))
(define-extern dma-send (function dma-bank uint uint none))
(define-extern dma-send-chain (function dma-bank-source uint none))
(define-extern dma-send-chain-no-tte (function dma-bank-source uint none))
(define-extern dma-send-chain-no-flush (function dma-bank-source uint none))
(define-extern dma-send-to-spr (function uint uint uint symbol none))
(define-extern dma-send-to-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-send-from-spr (function uint uint uint symbol none))
(define-extern dma-send-from-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-initialize (function none))
(define-extern clear-vu0-mem (function none))
(define-extern clear-vu1-mem (function none))
(define-extern dump-vu1-mem (function none))
(define-extern dump-vu1-range (function uint uint symbol))
(define-extern reset-vif1-path (function none))
(define-extern ultimate-memcpy (function pointer pointer uint none))
(define-extern symlink2 (function none))
(define-extern symlink3 (function none))

;; - Symbols

(define-extern *video-reset-parm* int)


;; ----------------------
;; File - dma-buffer
;; Source Path - engine/dma/dma-buffer.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype dma-packet (structure)
  ((dma  dma-tag   :offset-assert 0)
   (vif0 vif-tag   :offset-assert 8)
   (vif1 vif-tag   :offset-assert 12)
   (quad uint128  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-packet-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; change this type when you want the decompiler to output nice gif-tags,
;; change it back when you're done or other stuff breaks.
;; ND did something REALLY strange with these and now we have to suffer from it
(deftype dma-gif-packet (structure)
  ((dma-vif dma-packet :inline :offset-assert 0)
   (gif     uint64    2       :offset-assert 16) ;; guess
   (gif0    uint64 :offset 16 :score 1)
   (gif1    uint64 :offset 24 :score 1)
   (quad    uint128    2       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype dma-buffer (basic)
  ((allocated-length int32     :offset-assert 4)
   (base             pointer   :offset-assert 8)
   (end              pointer    :offset-assert 12)
   (data             uint64 1 :offset-assert 16) ;; weird, I guess this aligns the data?
   (data-buffer      uint8 :dynamic :offset 16)
   )
  (:methods
   (new (symbol type int) _type_  0)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; - Functions

(define-extern dma-buffer-length (function dma-buffer int))
(define-extern dma-buffer-inplace-new (function dma-buffer int dma-buffer))
(define-extern dma-buffer-free (function dma-buffer int))
(define-extern dma-buffer-add-vu-function (function dma-buffer vu-function int symbol))
(define-extern dma-buffer-send (function dma-bank dma-buffer none))
(define-extern dma-buffer-send-chain (function dma-bank-source dma-buffer none))


;; ----------------------
;; File - dma-bucket
;; Source Path - engine/dma/dma-bucket.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern dma-buffer-add-buckets (function dma-buffer int (inline-array dma-bucket)))
(define-extern dma-buffer-patch-buckets (function (inline-array dma-bucket) int (inline-array dma-bucket)))
(define-extern dma-bucket-insert-tag (function (inline-array dma-bucket) bucket-id pointer (pointer dma-tag) pointer))


;; ----------------------
;; File - dma-disasm
;; Source Path - engine/dma/dma-disasm.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype vif-disasm-element (structure)
  ((mask    uint32   :offset-assert 0)
   (tag     vif-cmd-32  :offset-assert 4)
   (val     uint32   :offset-assert 8)
   (print   uint32   :offset-assert 12)
   (string1 string   :offset-assert 16)
   (string2 string   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; - Functions

(define-extern disasm-dma-tag (function dma-tag symbol none))
(define-extern disasm-vif-tag (function (pointer vif-tag) int symbol symbol int))
(define-extern disasm-vif-details (function symbol (pointer uint8) vif-cmd int symbol))
(define-extern disasm-dma-list (function dma-packet symbol symbol symbol int symbol))

;; - Symbols

(define-extern *vif-disasm-table* (array vif-disasm-element))
(define-extern *dma-disasm* symbol)


;; ----------------------
;; File - pad
;; Source Path - engine/ps2/pad.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype hw-cpad (basic)
  ((valid   uint8       :offset-assert 4)
   (status  uint8       :offset-assert 5)
   (button0 uint16      :offset-assert 6)
   (rightx  uint8       :offset-assert 8)
   (righty  uint8       :offset-assert 9)
   (leftx   uint8       :offset-assert 10)
   (lefty   uint8       :offset-assert 11)
   (abutton uint8 12    :offset-assert 12)
   (dummy   uint8 12    :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype cpad-info (hw-cpad)
  ((number             int32      :offset-assert 36)
   (cpad-file          int32      :offset-assert 40)
   (button0-abs        pad-buttons 3  :offset-assert 44) ;; guess
   (button0-shadow-abs pad-buttons 1  :offset-assert 56) ;; guess
   (button0-rel        pad-buttons 3  :offset-assert 60) ;; guess
   (stick0-dir         float      :offset-assert 72)
   (stick0-speed       float      :offset-assert 76)
   (new-pad            int32      :offset-assert 80)
   (state              int32      :offset-assert 84)
   (align              uint8 6  :offset-assert 88)
   (direct             uint8 6  :offset-assert 94)
   (buzz-val           uint8 2  :offset-assert 100)
   (buzz-time          time-frame 2  :offset-assert 104)
   (buzz               basic      :offset-assert 120)
   (buzz-act           int32      :offset-assert 124)
   (change-time        time-frame     :offset-assert 128)
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(deftype cpad-list (basic)
  ((num-cpads int32     :offset-assert 4)
   (cpads     cpad-info 4 :offset-assert 8) ;; guess, modified from 2->4 for PC 4-pad support
   )
  (:methods
    (new (symbol type) _type_ 0))
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; - Functions

(define-extern cpad-set-buzz! (function cpad-info int int time-frame none))
(define-extern cpad-get-data (function cpad-info cpad-info))
(define-extern get-current-time (function time-frame))
(define-extern get-integral-current-time (function time-frame))
(define-extern cpad-invalid! (function cpad-info cpad-info))
;; in the kernel.
(define-extern cpad-open (function cpad-info int cpad-info))
(define-extern analog-input (function int float float float float float))
(define-extern service-cpads (function cpad-list))
(define-extern buzz-stop! (function int none))

;; - Symbols

(define-extern *cpad-list* cpad-list)
(define-extern *cpad-debug* symbol)
(define-extern *cheat-mode* symbol) ;; bool


;; ----------------------
;; File - gs
;; Source Path - engine/gfx/hw/gs.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype gs-pmode (uint64)
  ((en1    uint8 :offset 0 :size 1)
   (en2    uint8 :offset 1 :size 1)
   (crtmd  uint8 :offset 2 :size 3)
   (mmod   uint8 :offset 5 :size 1)
   (amod   uint8 :offset 6 :size 1)
   (slbg   uint8 :offset 7 :size 1)
   (alp    uint8 :offset 8 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-smode2 (uint64)
  ((int   uint8 :offset 0 :size 1)
   (ffmd  uint8 :offset 1 :size 1)
   (dpms  uint8 :offset 2 :size 2)
   )
  :flag-assert #x900000008
  )

(deftype gs-display-fb (uint64)
  ((fbp  uint16 :offset 0  :size 9)
   (fbw  uint8  :offset 9  :size 6)
   (psm  gs-psm :offset 15 :size 5)
   (dbx  uint16 :offset 32 :size 11)
   (dby  uint16 :offset 43 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's DISPLAY registers make settings for the display position on the screen regarding
;; information on Rectangular Area Read Output Circuit n for the PCRTC.
;; write-only
(deftype gs-display (uint64)
  ((dx    uint16 :offset 0  :size 12)
   (dy    uint16 :offset 12 :size 11)
   (magh  uint8  :offset 23 :size 4)
   (magv  uint8  :offset 27 :size 2)
   (dw    uint16 :offset 32 :size 12)
   (dh    uint16 :offset 44 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's BGCOLOR register sets the background color of the PCRTC with RGB value.
;; write-only
(deftype gs-bgcolor (uint64)
  ((r  uint8 :offset 0)
   (g  uint8 :offset 8)
   (b  uint8 :offset 16)
   )
  :flag-assert #x900000008
  )

;; the GS's CSR register sets and obtains various GS statuses.
;; read-write. the fields have different effects depending on whether they're being read from
;; or written to.
;; bits 5 and 6 (0x20 and 0x40) should be zero
(deftype gs-csr (uint64)
  ((signal  uint8 :offset 0  :size 1)
   (finish  uint8 :offset 1  :size 1)
   (hsint   uint8 :offset 2  :size 1)
   (vsint   uint8 :offset 3  :size 1)
   (edwint  uint8 :offset 4  :size 1)
   (flush   uint8 :offset 8  :size 1)
   (reset   uint8 :offset 9  :size 1)
   (nfield  uint8 :offset 12 :size 1)
   (field   uint8 :offset 13 :size 1)
   (fifo    uint8 :offset 14 :size 2)
   (rev     uint8 :offset 16 :size 8)
   (id      uint8 :offset 24 :size 8)
   )
  :flag-assert #x900000008
  )

;; memory layout of the GS's privileged registers
;; it is missing the SIGLBLID/LABELID register at 4224 (useless anyway?)
(deftype gs-bank (structure)
  ((pmode    gs-pmode  :offset-assert 0)
   (smode2   gs-smode2  :offset 32)
   (dspfb1   gs-display-fb  :offset 112)
   (display1 gs-display  :offset 128)
   (dspfb2   gs-display-fb  :offset 144)
   (display2 gs-display  :offset 160)
   (extbuf   uint64  :offset 176)
   (extdata  uint64  :offset 192)
   (extwrite uint64  :offset 208)
   (bgcolor  gs-bgcolor  :offset 224)
   (csr      gs-csr   :offset 4096)
   (imr      uint64  :offset 4112)
   (busdir   uint64  :offset 4160)
   )
  :method-count-assert 9
  :size-assert         #x1048
  :flag-assert         #x900001048
  )

;; the GS's FRAME registers store various settings related to the frame buffer.
(deftype gs-frame (uint64)
  ((fbp    uint16 :offset 0  :size 9)
   (fbw    uint8  :offset 16 :size 6)
   (psm    gs-psm :offset 24 :size 6)
   (fbmsk  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

;; the GS's ZBUF registers make various settings regarding Z buffer.
(deftype gs-zbuf (uint64)
  ((zbp   uint16 :offset 0  :size 9)
   (psm   gs-psm :offset 24 :size 4)
   (zmsk  uint8  :offset 32 :size 1)
   )
  :flag-assert #x900000008
  )

;; the GS's XYOFFSET registers set the offset value for converting from the primitive coordinate
;; system to the window coordinate system.
(deftype gs-xy-offset (uint64)
  ((ofx  uint16 :offset 0  :size 16)
   (ofy  uint16 :offset 32 :size 16)
   )
  :flag-assert #x900000008
  )

;; the GS's SCISSOR registers specify the scissoring area.  The coordinate values for
;; the upper-left/lower-right points of the enabled drawing area are specified by the window
;; coordinate system.
(deftype gs-scissor (uint64)
  ((scax0  uint16 :offset 0  :size 11)
   (scax1  uint16 :offset 16 :size 11)
   (scay0  uint16 :offset 32 :size 11)
   (scay1  uint16 :offset 48 :size 11)
   )
  :flag-assert #x900000008
  )

;; the GS's PRMODECONT register sets whether to use primitive attributes (IIP, TME, FGE, ABE,
;; AA1, FST, CTXT, FIX) specified by the PRMODE register or the PRIM register.
(deftype gs-prmode-cont (uint64)
  ((ac  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

;; the GS's COLCLAMP register stores settings as to whether clamping for the RGB value of the
;; pixel is performed.
(deftype gs-color-clamp (uint64)
  ((clamp  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

;; the GS's DTHE register stores settings for dithering (performed/not performed).
(deftype gs-dthe (uint64)
  ((dthe  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

(defenum gs-atest
  :type uint8
  (never 0)
  (always 1)
  (less 2)
  (less-equal 3)
  (equal 4)
  (greater-equal 5)
  (greater 6)
  (not-equal 7)
  )
(defenum gs-ztest
  :type uint8
  (never 0)
  (always 1)
  (greater-equal 2)
  (greater 3)
  )
;; the GS's TEST register performs settings related to the pixel test.
(deftype gs-test (uint64)
  ((ate    uint8 :offset 0  :size 1) ;; alpha test enable
   (atst   gs-atest :offset 1  :size 3) ;; alpha test method
   (aref   uint8 :offset 4  :size 8) ;; alpha val reference
   (afail  uint8 :offset 12 :size 2) ;; processing method on alpha test fail
   (date   uint8 :offset 14 :size 1) ;; dest alpha test enable
   (datm   uint8 :offset 15 :size 1) ;; dest alpha test mode
   (zte    uint8 :offset 16 :size 1) ;; depth test enable
   (ztst   gs-ztest :offset 17 :size 2) ;; depth test method
   )
  :flag-assert #x900000008
  )

(deftype gs-prim (uint64)
  ((prim  gs-prim-type :offset 0  :size 3)
   (iip   uint8        :offset 3  :size 1)
   (tme   uint8        :offset 4  :size 1)
   (fge   uint8        :offset 5  :size 1)
   (abe   uint8        :offset 6  :size 1)
   (aa1   uint8        :offset 7  :size 1)
   (fst   uint8        :offset 8  :size 1)
   (ctxt  uint8        :offset 9  :size 1)
   (fix   uint8        :offset 10 :size 1)
   )
  :flag-assert #x900000008
  )

;; gap!
;; the GS's RGBAQ register sets the RGBA value of the vertex and the Q value of the normalized
;; texture coordinates.
(deftype gs-rgbaq (uint64)
  ((r  uint8 :offset 0  :size 8)
   (g  uint8 :offset 8  :size 8)
   (b  uint8 :offset 16 :size 8)
   (a  uint8 :offset 24 :size 8) ;; 0x80 --> 1.0
   (q  float :offset 32 :size 32) ;; affects some LOD behavior apparently?
   )
  :flag-assert #x900000008
  )

;; GS XYZ registers
(deftype gs-xyz (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

;; the GS's UV register specifies the texel coordinate (UV) values of the vertex.
(deftype gs-uv (uint64)
  ((u  uint16 :offset 0  :size 14) ;; Q4 fixed point
   (v  uint16 :offset 16 :size 14) ;; Q4 fixed point
   )
  :flag-assert #x900000008
  )

;; the GS's ST register sets the S and T values of the vertex texture coordinates.
;; The value Q is specified by the RGBAQ register.
(deftype gs-st (uint64)
  ((s  float :offset 0  :size 32)
   (t  float :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

;; GS XYZF registers
(deftype gs-xyzf (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 24)
   (f  uint8  :offset 56 :size 8) ;; fog coeff
   )
  :flag-assert #x900000008
  )

;; the GS's TRXPOS register specifies the position and scanning direction of the rectangular area
;; in each buffer where buffer transmission is performed.
(deftype gs-trxpos (uint64)
  ((ssax  uint16 :offset 0  :size 11)
   (ssay  uint16 :offset 16 :size 11)
   (dsax  uint16 :offset 32 :size 11)
   (dsay  uint16 :offset 48 :size 11)
   (dir   uint8 :offset 59 :size 2)
   )
  :flag-assert #x900000008
  )

;; the GS's TRXREG register specifies the size of the rectangular area, where the transmission
;; between buffers is implemented, in units of pixels.
;; The pixel mode must be the one set by the BITBLTBUF register.
(deftype gs-trxreg (uint64)
  ((rrw  uint16 :offset 0  :size 12)
   (rrh  uint16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

;; the GS's TRXDIR register specifies the transmission direction in the transmission between
;; buffers, and activates transmission.
;; Appropriate settings must be made by the BITBLTBUF/TRXPOS/TRXREG before activating
;; the transmission.
(deftype gs-trxdir (uint64)
  ((xdir  uint8 :offset 0 :size 2))
  :flag-assert #x900000008
  )

;; the GS's BITBLTBUF register stores buffer-related settings for transmission source and
;; destination during transmission between buffers.
(deftype gs-bitbltbuf (uint64)
  ((sbp   uint16 :offset 0  :size 14)
   (sbw   uint8  :offset 16 :size 6)
   (spsm  uint8  :offset 24 :size 6)
   (dbp   uint16 :offset 32 :size 14)
   (dbw   uint8  :offset 48 :size 6)
   (dpsm  uint8  :offset 56 :size 6)
   )
  :flag-assert #x900000008
  )

;; the GS's TEX0 registers set various kinds of information regarding the textures to be used.
(deftype gs-tex0 (uint64)
  ((tbp0  uint16 :offset 0 :size 14)
   (tbw   uint8  :offset 14 :size 6)
   (psm   uint8  :offset 20 :size 6)
   (tw    uint8  :offset 26 :size 4)
   (th    uint8  :offset 30 :size 4)
   (tcc   uint8  :offset 34 :size 1)
   (tfx   uint8  :offset 35 :size 2)
   (cbp   uint16 :offset 37 :size 14)
   (cpsm  uint8  :offset 51 :size 4)
   (csm   uint8  :offset 55 :size 1)
   (csa   uint8  :offset 56 :size 5)
   (cld   uint8  :offset 61 :size 3)
   )
  :flag-assert #x900000008
  )

;; the GS's TEX1 registers set information on the sampling method of the textures.
(deftype gs-tex1 (uint64)
  ((lcm   uint8 :offset 0  :size 1)
   (mxl   uint8 :offset 2  :size 3)
   (mmag  uint8 :offset 5  :size 1)
   (mmin  uint8 :offset 6  :size 3)
   (mtba  uint8 :offset 9  :size 1)
   (l     uint8 :offset 19 :size 2)
   (k     int16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

;; the GS's TEXA register sets the Alpha value to be referred to when the Alpha value of the
;; texture is not an 8-bit value.
(deftype gs-texa (uint64)
  ((ta0  uint8 :offset 0  :size 8)
   (aem  uint8 :offset 15 :size 1)
   (ta1  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

;; the GS's TEXCLUT register specifies the CLUT position in the buffer when the CLUT storage mode
;; is CSM=1 (CSM2 mode).
(deftype gs-texclut (uint64)
  ((cbw  uint8  :offset 0  :size 6)
   (cou  uint8  :offset 6  :size 6)
   (cov  uint16 :offset 12 :size 10)
   )
  :flag-assert #x900000008
  )

;; the GS's MIPTBP registers set the buffer pointer and buffer width of textures when performing
;; MIPMAP.
;; MIPTBP1 sets levels 1 to 3, MIPTBP2 sets levels 4 to 6.
(deftype gs-miptbp (uint64)
  ((tbp1  uint16 :offset 0  :size 14)
   (tbw1  uint8  :offset 14 :size 6)
   (tbp2  uint16 :offset 20 :size 14)
   (tbw2  uint8  :offset 34 :size 6)
   (tbp3  uint16 :offset 40 :size 14)
   (tbw3  uint8  :offset 54 :size 6)
   )
  :flag-assert #x900000008
  )

;; the GS's ALPHA registers define the blend function of alpha blending
(deftype gs-alpha (uint64)
  ((a    uint8 :offset 0  :size 2)
   (b    uint8 :offset 2  :size 2)
   (c    uint8 :offset 4  :size 2)
   (d    uint8 :offset 6  :size 2)
   (fix  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

(defenum gs-tex-wrap-mode
  :type uint8
  (repeat 0)
  (clamp 1)
  (region-clamp 2)
  (region-repeat 3)
  )

(deftype gs-clamp (uint64)
  ((wms   gs-tex-wrap-mode  :offset 0  :size 2)
   (wmt   gs-tex-wrap-mode  :offset 2  :size 2)
   (minu  uint16 :offset 4  :size 10)
   (maxu  uint16 :offset 14 :size 10)
   (minv  uint16 :offset 24 :size 10)
   (maxv  uint16 :offset 34 :size 10)
   )
  :flag-assert #x900000008
  )

(deftype gs-fog (uint64)
  ((f  uint8 :offset 56 :size 8))
  :flag-assert #x900000008
  )

(deftype gs-fogcol (uint64)
  ((fcr  uint8 :offset 0  :size 8)
   (fcg  uint8 :offset 8  :size 8)
   (fcb  uint8 :offset 16 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gif-ctrl (uint32)
  ((rst  uint8 :offset 0 :size 1)
   (pse  uint8 :offset 3 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-mode (uint32)
  ((m3r  uint8 :offset 0 :size 1)
   (imt  uint8 :offset 2 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-stat (uint32)
  ((m3r    uint8 :offset 0  :size 1)
   (m3p    uint8 :offset 1  :size 1)
   (imt    uint8 :offset 2  :size 1)
   (pse    uint8 :offset 3  :size 1)
   (ip3    uint8 :offset 5  :size 1)
   (p3q    uint8 :offset 6  :size 1)
   (p2q    uint8 :offset 7  :size 1)
   (p1q    uint8 :offset 8  :size 1)
   (oph    uint8 :offset 9  :size 1)
   (apath  uint8 :offset 10 :size 2)
   (dir    uint8 :offset 12 :size 1)
   (fqc    uint8 :offset 24 :size 5)
   )
  :flag-assert #x900000004
  )

(deftype gif-cnt (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (regcnt   uint8  :offset 16 :size 4)
   (vuaddr   uint16 :offset 20 :size 10)
   )
  :flag-assert #x900000004
  )

(deftype gif-p3cnt (uint32)
  ((p3cnt  uint16 :offset 0 :size 15))
  :flag-assert #x900000004
  )

(deftype gif-p3tag (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (eop      uint8  :offset 15 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-bank (structure)
  ((ctrl  gif-ctrl  :offset 0)
   (mode  gif-mode  :offset 16)
   (stat  gif-stat  :offset 32)
   (tag0  uint32  :offset 64)
   (tag1  uint32  :offset 80)
   (tag2  uint32  :offset 96)
   (tag3  uint32  :offset 112)
   (cnt   gif-cnt  :offset 128)
   (p3cnt gif-p3cnt  :offset 144)
   (p3tag gif-p3tag  :offset 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

(deftype gif-tag-prim (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype gif-tag-count (uint32)
  ()
  :flag-assert #x900000004
  )

(defenum gif-reg-id
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (a+d 14)
  (nop 15)
  )

(defenum gif-flag
  :type uint8
  (packed 0)
  (reg-list 1)
  (image 2)
  (disable 3)
  )

(deftype gif-tag64 (uint64)
  ((nloop   uint16  :offset 0   :size 15)
   (eop     uint8   :offset 15  :size 1)
   (id      uint16  :offset 32  :size 14)
   (pre     uint8   :offset 46  :size 1)
   (prim    gs-prim :offset 47  :size 11)
   (flg     gif-flag   :offset 58  :size 2)
   (nreg    uint8   :offset 60  :size 4))
  :flag-assert #x900000008
  )
(deftype gif-tag (uint128)
  ((nloop   uint16 :offset 0   :size 15)
   (eop     uint8  :offset 15  :size 1)
   (id      uint16 :offset 32  :size 14)
   (pre     uint8  :offset 46  :size 1)
   (prim    uint16 :offset 47  :size 11)
   (flg     gif-flag  :offset 58  :size 2)
   (nreg    uint8  :offset 60  :size 4)
   (regs0   gif-reg-id :offset 64  :size 4)
   (regs1   gif-reg-id :offset 68  :size 4)
   (regs2   gif-reg-id :offset 72  :size 4)
   (regs3   gif-reg-id :offset 76  :size 4)
   (regs4   gif-reg-id :offset 80  :size 4)
   (regs5   gif-reg-id :offset 84  :size 4)
   (regs6   gif-reg-id :offset 88  :size 4)
   (regs7   gif-reg-id :offset 92  :size 4)
   (regs8   gif-reg-id :offset 96  :size 4)
   (regs9   gif-reg-id :offset 100 :size 4)
   (regs10  gif-reg-id :offset 104 :size 4)
   (regs11  gif-reg-id :offset 108 :size 4)
   (regs12  gif-reg-id :offset 112 :size 4)
   (regs13  gif-reg-id :offset 116 :size 4)
   (regs14  gif-reg-id :offset 120 :size 4)
   (regs15  gif-reg-id :offset 124 :size 4)
   )
  :flag-assert #x900000010
  )

(deftype gif-tag-regs (uint64)
  ((regs0   gif-reg-id :offset 0  :size 4)
   (regs1   gif-reg-id :offset 4  :size 4)
   (regs2   gif-reg-id :offset 8  :size 4)
   (regs3   gif-reg-id :offset 12  :size 4)
   (regs4   gif-reg-id :offset 16  :size 4)
   (regs5   gif-reg-id :offset 20  :size 4)
   (regs6   gif-reg-id :offset 24  :size 4)
   (regs7   gif-reg-id :offset 28  :size 4)
   (regs8   gif-reg-id :offset 32  :size 4)
   (regs9   gif-reg-id :offset 36 :size 4)
   (regs10  gif-reg-id :offset 40 :size 4)
   (regs11  gif-reg-id :offset 44 :size 4)
   (regs12  gif-reg-id :offset 48 :size 4)
   (regs13  gif-reg-id :offset 52 :size 4)
   (regs14  gif-reg-id :offset 56 :size 4)
   (regs15  gif-reg-id :offset 60 :size 4)
   )
  )

(deftype gs-gif-tag (structure)
  ((qword uint128   :offset-assert 0 :score -1) ;; is "qword" and inline? in game

   (tag   gif-tag64    :offset 0)
   (regs  gif-tag-regs :offset 8)

   (dword uint64 2     :offset 0)
   (word  uint32 4     :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gif-packet (basic)
  ((reg-count int32     :offset-assert 4)

   (gif-tag   gs-gif-tag :inline :offset-assert 16) ;; note- added
   (gif-tag0  uint128   :offset 16)
   (args      uint64 1 :offset-assert 32)
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-context (basic)
  ((orgx   int32     :offset-assert 4)
   (orgy   int32     :offset-assert 8)
   (orgz   int32     :offset-assert 12)
   (width  int32     :offset-assert 16)
   (height int32     :offset-assert 20)
   (color  rgba    4 :offset-assert 24)
   )
  (:methods
    (new (symbol type int int int int rgba) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; - Functions

(define-extern psm-size (function gs-psm int))
(define-extern psm-page-height (function gs-psm int))
(define-extern psm->string (function gs-psm string))
(define-extern default-buffer-init (function dma-buffer none))
(define-extern open-gif-packet (function gif-packet gif-packet))
(define-extern add-reg-gif-packet (function gif-packet int int none))
(define-extern close-gif-packet (function gif-packet int gif-packet))
(define-extern draw-context-set-xy (function draw-context int int none))

;; - Symbols

(define-extern *fog-color* rgba)
(define-extern *default-regs-buffer* dma-buffer)


;; ----------------------
;; File - display-h
;; Source Path - engine/gfx/hw/display-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype display-env (structure)
  ((pmode   gs-pmode      :offset-assert 0)
   (smode2  gs-smode2     :offset-assert 8)
   (dspfb   gs-display-fb :offset-assert 16)
   (display gs-display    :offset-assert 24)
   (bgcolor gs-bgcolor    :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; the "addr" fields represent GS register addresses
(deftype draw-env (structure)
  ((frame1         gs-frame        :offset-assert 0)
   (frame1addr     gs-reg64        :offset-assert 8)
   (zbuf1          gs-zbuf         :offset-assert 16)
   (zbuf1addr      gs-reg64        :offset-assert 24)
   (xyoffset1      gs-xy-offset    :offset-assert 32)
   (xyoffset1addr  gs-reg64        :offset-assert 40)
   (scissor1       gs-scissor      :offset-assert 48)
   (scissor1addr   gs-reg64        :offset-assert 56)
   (prmodecont     gs-prmode-cont  :offset-assert 64)
   (prmodecontaddr gs-reg64        :offset-assert 72)
   (colclamp       gs-color-clamp  :offset-assert 80)
   (colclampaddr   gs-reg64        :offset-assert 88)
   (dthe           gs-dthe         :offset-assert 96)
   (dtheaddr       gs-reg64        :offset-assert 104)
   (test1          gs-test         :offset-assert 112)
   (test1addr      gs-reg64        :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype display-frame (basic)
  ((calc-buf     dma-buffer    :offset 8)
   (vu1-buf      dma-buffer    :offset 8)
   (debug-buf    dma-buffer    :offset 36)
   (global-buf   dma-buffer    :offset 40)
   (bucket-group (inline-array dma-bucket)    :offset 44)
   (buffer       dma-buffer    11  :offset 4)
   (profile-bar  profile-bar 2 :offset 48)
   (run-time     int64        :offset 56)
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype virtual-frame (structure)
  ((display      display-env    :offset-assert 0)
   (display-last display-env    :offset-assert 4)
   (gif          pointer        :offset-assert 8)
   (draw         draw-env       :offset-assert 12)
   (frame        display-frame  :offset-assert 16)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype display (basic)
  ((display-env0                    display-env :inline :offset-assert 8)
   (display-env1                    display-env :inline :offset-assert 48)
   (display-env2                    display-env :inline :offset-assert 88)
   (gif-tag0                        gs-gif-tag  :inline :offset-assert 128)
   (draw0                           draw-env    :inline :offset-assert 144)
   (gif-tag1                        gs-gif-tag  :inline :offset-assert 272)
   (draw1                           draw-env    :inline :offset-assert 288)
   (gif-tag2                        gs-gif-tag  :inline :offset-assert 416)
   (draw2                           draw-env    :inline :offset-assert 432)
   (on-screen                       int32               :offset-assert 560)
   (last-screen                     int32               :offset-assert 564)
   (frames                          virtual-frame 6 :inline :offset-assert 568)
   (bg-clear-color                  rgba         4      :offset-assert 760)
   (real-frame-counter              time-frame          :offset-assert 776)
   (base-frame-counter              time-frame          :offset-assert 784)
   (game-frame-counter              time-frame          :offset-assert 792)
   (integral-frame-counter          time-frame          :offset-assert 800)
   (real-integral-frame-counter     time-frame          :offset-assert 808)
   (actual-frame-counter            time-frame          :offset-assert 816)
   (real-actual-frame-counter       time-frame          :offset-assert 824)
   (part-frame-counter              time-frame          :offset-assert 832)
   (old-real-frame-counter          time-frame          :offset-assert 840)
   (old-base-frame-counter          time-frame          :offset-assert 848)
   (old-game-frame-counter          time-frame          :offset-assert 856)
   (old-integral-frame-counter      time-frame          :offset-assert 864)
   (old-real-integral-frame-counter time-frame          :offset-assert 872)
   (old-actual-frame-counter        time-frame          :offset-assert 880)
   (old-real-actual-frame-counter   time-frame          :offset-assert 888)
   (old-part-frame-counter          time-frame          :offset-assert 896)
   (time-ratio                      float               :offset-assert 904)
   (seconds-per-frame               float               :offset-assert 908)
   (frames-per-second               float               :offset-assert 912)
   (time-factor                     float               :offset-assert 916)
   (time-adjust-ratio               float               :offset-assert 920)
   )
  :method-count-assert 10
  :size-assert         #x39c
  :flag-assert         #xa0000039c
  (:methods
   (new (symbol type int int int int int) _type_ 0)
   (set-time-ratios (_type_ float) float 9)
   )
  )

;; - Functions

(define-extern set-display (function display int int int int int display))
(define-extern put-draw-env (function (pointer gif-tag) none))
(define-extern *pre-draw-hook* (function object none))
(define-extern *post-draw-hook* (function dma-buffer none))


;; ----------------------
;; File - vector
;; Source Path - engine/math/vector.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern vector+float! (function vector vector float vector))
(define-extern vector*! (function vector vector vector vector))
(define-extern vector+*! (function vector vector vector float vector))
(define-extern vector-*! (function vector vector vector float vector))
(define-extern vector/! (function vector vector vector vector))
(define-extern vector-average! (function vector vector vector vector))
(define-extern vector--float*! (function vector vector vector float vector))
(define-extern vector-float/! (function vector vector float vector))
(define-extern vector-negate-in-place! (function vector vector))
(define-extern vector= (function vector vector symbol))
(define-extern vector-delta (function vector vector float))
(define-extern vector-seek! (function vector vector float vector))
(define-extern vector-seek-2d-xz-smooth! (function vector vector float float vector))
(define-extern vector-seek-2d-yz-smooth! (function vector vector float float vector))
(define-extern vector-seek-3d-smooth! (function vector vector float float vector))
(define-extern seek-with-smooth (function float float float float float float))
(define-extern vector-seconds (function vector vector vector))
(define-extern vector-seconds! (function vector vector))
(define-extern vector-v! (function vector vector))
(define-extern vector-v+! (function vector vector vector vector))
(define-extern vector-v*float+! (function vector vector vector float vector))
(define-extern vector-v++! (function vector vector vector))
(define-extern vector-v*float! (function vector vector float vector))
(define-extern vector-v*float++! (function vector vector float vector))
(define-extern vector-to-ups! (function vector vector vector))
(define-extern vector-from-ups! (function vector vector vector))
(define-extern vector-length-squared (function vector float))
(define-extern vector-xz-length-squared (function vector float))
(define-extern vector-vector-xz-distance (function vector vector float))
(define-extern vector-vector-xz-distance-squared (function vector vector float))
(define-extern vector-length-max! (function vector float vector))
(define-extern vector-xz-length-max! (function vector float vector))
(define-extern vector-rotate-around-y! (function vector vector float vector))
(define-extern rotate-y<-vector+vector (function vector vector float))
(define-extern vector-cvt.w.s! (function vector vector vector))
(define-extern vector-cvt.s.w! (function vector vector vector))
(define-extern rot-zxy-from-vector! (function vector vector vector))
(define-extern rot-zyx-from-vector! (function vector vector vector))
(define-extern vector-lerp! (function vector vector vector float vector))
(define-extern vector-lerp-clamp! (function vector vector vector float vector))
(define-extern vector4-lerp! (function vector vector vector float vector))
(define-extern vector4-lerp-clamp! (function vector vector vector float vector))
(define-extern vector-degi (function vector vector vector))
(define-extern vector-degf (function vector vector vector))
(define-extern vector-degmod (function vector vector vector))
(define-extern vector-deg-diff (function vector vector vector none))
(define-extern vector-deg-lerp-clamp! (function vector vector vector float vector)) ;; todo
(define-extern vector3s-copy! (function vector vector vector))
(define-extern vector3s+! (function vector vector vector vector))
(define-extern vector3s*float! (function vector vector float vector))
(define-extern vector3s-! (function vector vector vector vector))
(define-extern spheres-overlap? (function sphere sphere symbol))
(define-extern sphere<-vector! (function sphere vector sphere))
(define-extern sphere<-vector+r! (function sphere vector float sphere))
(define-extern rand-vu-sphere-point! (function vector float vector)) ;; todo

;; - Symbols

(define-extern *display* display)


;; ----------------------
;; File - file-io
;; Source Path - engine/load/file-io.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype file-stream (basic)
  ((flags uint32  :offset-assert 4)
   (mode  symbol  :offset-assert 8)
   (name  string  :offset-assert 12)
   (file  uint32  :offset-assert 16)
   )
  (:methods
    (new (symbol type string symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype file-info (basic)
  ((file-type      symbol  :offset-assert 4)
   (file-name      basic   :offset-assert 8)
   (major-version  uint32  :offset-assert 12)
   (minor-version  uint32  :offset-assert 16)
   (maya-file-name basic   :offset-assert 20)
   (tool-debug     basic   :offset-assert 24)
   (mdb-file-name  basic   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; - Functions

(define-extern file-stream-read (function file-stream pointer int int))
(define-extern file-stream-open (function file-stream basic basic file-stream))
(define-extern file-stream-length (function file-stream int))
(define-extern file-stream-read-string (function file-stream string string))
(define-extern make-file-name (function file-kind string int symbol string))
(define-extern make-vfile-name (function file-kind string string))
(define-extern file-info-correct-version? (function file-info file-kind int symbol))

;; - Symbols

(define-extern *file-temp-string* string)


;; ----------------------
;; File - loader-h
;; Source Path - engine/load/loader-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type art-group basic)
;; custom fields
(deftype load-dir (basic)
  ((lev level :offset-assert 4)
   (string-array (array string) :offset-assert 8) ;; these are the names
   (data-array (array basic) :score -50 :offset-assert 12) ;; this is the file data.
   )
  :flag-assert #xb00000010
  (:methods
    (new (symbol type int level) _type_ 0)
    ;; these methods dont exist for this type
    (load-to-heap-by-name (_type_ string symbol kheap int) art-group 9)
    (set-loaded-art (_type_ art-group) art-group 10)
    )
  )

;; custom fields
(deftype load-dir-art-group (load-dir)
  ((art-group-array (array art-group) :offset 12)
   )
  :flag-assert #xb00000010
  (:methods
    (new (symbol type int level) _type_ 0)
    )
  )

(deftype external-art-buffer (basic)
  ((index                      int32          :offset-assert 4)
   (other                      external-art-buffer          :offset-assert 8)
   (status                     symbol         :offset-assert 12)
   (locked?                    symbol         :offset-assert 16)
   (frame-lock                 symbol         :offset-assert 20)
   (heap                       kheap  :inline :offset-assert 32)
   (pending-load-file          string         :offset-assert 48)
   (pending-load-file-part     int32          :offset-assert 52)
   (pending-load-file-owner    handle         :offset-assert 56)
   (pending-load-file-priority float          :offset-assert 64)
   (load-file                  string         :offset-assert 68)
   (load-file-part             int32          :offset-assert 72)
   (load-file-owner            handle         :offset-assert 80)
   (load-file-priority         float          :offset-assert 88)
   (buf                        pointer        :offset-assert 92)
   (len                        int32          :offset-assert 96)
   (art-group                  art-group      :offset-assert 100)
   )
  :method-count-assert 16
  :size-assert         #x68
  :flag-assert         #x1000000068
  (:methods
    (new (symbol type int) _type_ 0)
    (set-pending-file (_type_ string int handle float) int 9)
    (update (_type_) int 10)
    (inactive? (_type_) symbol 11)
    (file-status (_type_ string int) symbol 12)
    (link-file (_type_ art-group) art-group 13)
    (unlink-file (_type_ art-group) int 14)
    (unlock! (_type_) symbol 15)
    )
  )

(deftype spool-anim (basic)
  ((name         string  :offset 16) ;; why?
   (buf1         external-art-buffer  :offset 16) ;; custom
   (index        int32   :score 100   :offset 20)
   (buf2         external-art-buffer  :offset 20) ;; custom (also what?)
   (parts        int32   :offset-assert 24)
   (priority     float   :offset-assert 28)
   (owner        handle  :offset-assert 32)
   (command-list pair    :offset-assert 40)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype external-art-control (basic)
  ((buffer               external-art-buffer    2       :offset-assert 4)
   (rec                  spool-anim 3 :inline :offset-assert 16)
   (spool-lock           handle             :offset-assert 160)
   (reserve-buffer       external-art-buffer  :offset-assert 168)
   (reserve-buffer-count int32              :offset-assert 172)
   (active-stream        string             :offset-assert 176)
   (preload-stream       spool-anim :inline :offset-assert 184)
   (last-preload-stream  spool-anim :inline :offset-assert 232)
   (end-pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x118
  :flag-assert         #x1100000118
  (:methods
    (new (symbol type) _type_ 0)
    (update (_type_ symbol) int 9)
    (clear-rec (_type_) int 10)
    (spool-push (_type_ string int process float) int 11)
    (file-status (_type_ string int) symbol 12)
    (reserve-alloc (_type_) kheap 13)
    (reserve-free (_type_ kheap) int 14)
    (none-reserved? (_type_) symbol 15)
    (try-preload-stream (_type_ string int process float) int 16)
    )
  )


;; ----------------------
;; File - texture-h
;; Source Path - engine/gfx/texture-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype texture-id (uint32)
  ((index  uint16 :offset 8  :size 12)
   (page   uint16 :offset 20 :size 12)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-pool-segment (structure)
  ((dest uint32  :offset-assert 0)
   (size uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(declare-type texture-page basic)
(deftype texture-pool (basic)
  ((top              int32                        :offset-assert 4)
   (cur              int32                        :offset-assert 8)
   (allocate-func    (function texture-pool texture-page kheap int texture-page)                        :offset-assert 12)
   (font-palette     int32                        :offset-assert 16) ;; vram word idx

   ;; these were reordered
   (segment-near     texture-pool-segment :inline :offset-assert 20)
   (segment-common   texture-pool-segment :inline :offset-assert 28)
   (segment          texture-pool-segment 4 :inline :offset 20)

   (common-page      texture-page              32      :offset-assert 52)
   (common-page-mask int32                        :offset-assert 180)
   (ids              uint32              126     :offset-assert 184)
   )
  :method-count-assert 23
  :size-assert         #x2b0
  :flag-assert         #x17000002b0
  (:methods
    (new (symbol type) _type_ 0)
    (initialize! (_type_) _type_ 9)
    (print-usage (_type_) _type_ 10)
    (setup-font-texture! (_type_) none 11)
    (allocate-defaults! (_type_) none 12)
    (login-level-textures (_type_ level int (pointer texture-id)) none 13) ;; loading level...
    (add-tex-to-dma! (_type_ level int) none 14) ;; very mysterious arg types.
    (allocate-vram-words! (_type_ int) int 15)
    (allocate-segment! (_type_ texture-pool-segment int) texture-pool-segment 16)
    (unused-17 () none 17)
    (unused-18 () none 18)
    (unused-19 () none 19)
    (unload! (_type_ texture-page) int 20)
    (upload-one-common! (_type_ level) symbol 21)
    (lookup-boot-common-id (_type_ int) int 22)
    )
  )

(deftype texture (basic)
  ((w            int16     :offset-assert 4)
   (wu           uint16    :offset 4)
   (h            int16     :offset-assert 6)
   (hu           uint16    :offset 6)
   (num-mips     uint8     :offset-assert 8)
   (tex1-control uint8     :offset-assert 9)   ;; each level has a dest and a width
   (psm          gs-psm    :offset-assert 10)
   (mip-shift    uint8     :offset-assert 11)
   (clutpsm      uint16    :offset-assert 12)
   (dest         uint16 7 :offset-assert 14)  ;; dest vram word addr, per leve
   (clutdest     uint16    :offset-assert 28) ;; destination vram word addr of clut.
   (width        uint8 7 :offset-assert 30)   ;; mip widths
   (name         string    :offset-assert 40)
   (size         uint32    :offset-assert 44)
   (uv-dist      float     :offset-assert 48)
   (masks        uint32 3 :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype texture-page-segment (structure)
  ((block-data pointer :offset-assert 0)
   (size       uint32  :offset-assert 4)
   (dest       uint32  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-page (basic)
  ((info      file-info        :offset-assert 4)
   (name      basic            :offset-assert 8)
   (id        uint32           :offset-assert 12)
   (length    int32            :offset-assert 16) ;; number of texture
   (mip0-size uint32           :offset-assert 20)
   (size      uint32           :offset-assert 24) ;; in vram words.
   (segment   texture-page-segment 3 :inline :offset-assert 28)
   (pad       uint32 16       :offset-assert 64)
   (data      texture :dynamic :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (remove-from-heap (_type_ kheap) _type_ 9)
    (get-leftover-block-count (_type_ int int) int 10)
    (unused-11 () none 11)
    (relocate-dests! (_type_ int int) none 12)
    (add-to-dma-buffer (_type_ dma-buffer int) int 13)
    (upload-now! (_type_ int) none 14)
    )
  )

(deftype shader-ptr (uint32)
  ((shader uint32 :offset 8 :size 24)) ;; TODO this seems wrong - default-menu::all-texture-tweak-adjust
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-link (structure)
  ((next shader-ptr 1 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-page-dir-entry (structure)
  ((length int16   :offset-assert 0)
   (status uint16  :offset-assert 2)
   (page   texture-page   :offset-assert 4)
   (link   texture-link  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-page-dir (basic)
  ((length int32)
   (entries texture-page-dir-entry 1 :inline)
   )
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (unlink-textures-in-heap! (_type_ kheap) int 9)
    )
  :flag-assert #xa00000014
  )

(deftype texture-relocate-later (basic)
  ((memcpy symbol                  :offset-assert 4)
   (dest   uint32                  :offset-assert 8)
   (source uint32                  :offset-assert 12)
   (move   uint32                  :offset-assert 16)
   (entry  texture-page-dir-entry  :offset-assert 20)
   (page   texture-page                   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(defenum link-test-flags
  :type uint32
  :bitfield #t
  (needs-log-in 8)
  (bit-9 9)
  )

(deftype adgif-shader (structure)
  ((quad       qword  5 :score -100 :inline  :offset 0)
   (prims      gs-reg64 10 :score -100 :offset 0)
   (tex0       gs-tex0     :offset 0) ;; prims 1
   (tex1       gs-tex1     :offset 16) ;; prims 3
   (miptbp1    gs-miptbp     :offset 32) ;; prims 5
   (clamp      gs-clamp     :offset 48) ;; prims 7
   (clamp-reg  gs-reg64     :offset 56)
   (alpha      gs-alpha     :offset 64) ;; prims 9
   (alpha-as-miptb2 gs-miptbp :offset 64)
   (link-test  link-test-flags     :offset 8)
   (texture-id texture-id     :offset 24)
   (next       shader-ptr :offset 40)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype adgif-shader-array (inline-array-class)
  ((data  adgif-shader  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern texture-mip->segment (function int int int))

;; - Symbols

(define-extern *texture-enable-user-menu* int)
(define-extern *texture-enable-user* int)
(define-extern *texture-relocate-later* texture-relocate-later)
(define-extern *texture-page-dir* texture-page-dir)
(define-extern *sky-base-vram-word* int)
(define-extern *sky-base-block* int)
(define-extern *sky-base-page* int)
(define-extern *depth-cue-base-vram-word* int)
(define-extern *depth-cue-base-block* int)
(define-extern *depth-cue-base-page* int)
(define-extern *eyes-base-vram-word* int)
(define-extern *eyes-base-block* int)
(define-extern *eyes-base-page* int)
(define-extern *ocean-base-vram-word* int)
(define-extern *ocean-base-block* int)
(define-extern *ocean-base-page* int)


;; ----------------------
;; File - level-h
;; Source Path - engine/level/level-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type bsp-header basic)
(deftype level-vis-info (basic)
  ((level              symbol           :offset-assert 4)
   (from-level         symbol           :offset-assert 8)
   (from-bsp           bsp-header       :offset-assert 12)
   (flags              uint32           :offset-assert 16)
   (length             uint32           :offset-assert 20)
   (allocated-length   uint32           :offset-assert 24)
   (dictionary-length  uint32           :offset-assert 28)
   (dictionary         uint32           :offset-assert 32)
   (string-block       uint32           :offset-assert 36)
   (ramdisk            uint32           :offset-assert 40)
   (vis-bits           pointer          :offset-assert 44)
   (current-vis-string uint32           :offset-assert 48)
   (vis-string         uint32 :dynamic :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype level-load-info (basic)
  ((name-list         symbol 3   :do-not-decompile :offset-assert 4)
   (index             int32     :offset-assert 16)
   (name              symbol     :offset 4)
   (visname           symbol    :offset 8)
   (nickname          symbol    :offset 12)
   (packages          pair      :offset-assert 20)
   (sound-banks       pair      :offset-assert 24)
   (music-bank        symbol     :offset-assert 28)
   (ambient-sounds    pair      :offset-assert 32)
   (mood              symbol    :offset-assert 36)
   (mood-func         symbol    :offset-assert 40)
   (ocean             symbol    :offset-assert 44)
   (sky               symbol    :offset-assert 48)
   (sun-fade          float     :offset-assert 52)
   (continues         pair      :offset-assert 56)
   (tasks             pair      :offset-assert 60)
   (priority          int32     :offset-assert 64)
   (load-commands     pair      :offset-assert 68)
   (alt-load-commands pair      :offset-assert 72)
   (bsp-mask          uint64    :offset-assert 80)
   (bsphere           sphere    :offset-assert 88)
   (buzzer            int32     :offset-assert 92)
   (bottom-height     meters    :offset-assert 96)
   (run-packages      pair      :offset-assert 100)
   (prev-level        basic     :offset-assert 104)
   (next-level        basic     :offset-assert 108)
   (wait-for-load     symbol    :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x74
  :flag-assert         #x900000074
  )

(declare-type drawable basic)
(deftype login-state (basic)
  ((state int32      :offset-assert 4)
   (pos   uint32     :offset-assert 8)
   (elts  uint32     :offset-assert 12)
   (elt   drawable 16 :offset-assert 16) ;; might be something more specific.
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(declare-type engine basic)
(declare-type entity-links-array basic)
(declare-type entity-ambient-data-array basic)
(declare-type mood-context basic)
(deftype level (basic)
  ((name                      symbol          :offset-assert 4)
   (load-name                 symbol          :offset-assert 8)
   (nickname                  symbol          :offset-assert 12)
   (index                     int32           :offset-assert 16)
   (status                    symbol          :offset-assert 20)
   (other                     level           :offset-assert 24)
   (heap                      kheap   :inline :offset-assert 32)
   (bsp                       bsp-header      :offset-assert 48)
   (art-group                 load-dir-art-group  :offset-assert 52)
   (info                      level-load-info     :offset-assert 56)
   (texture-page              texture-page 9      :offset-assert 60)
   (loaded-texture-page       texture-page 16     :offset-assert 96)
   (loaded-texture-page-count int32           :offset-assert 160)
   (tfrag-tex-foreground-sink-group dma-foreground-sink-group :inline :offset-assert 176)
   (pris-tex-foreground-sink-group dma-foreground-sink-group :inline :offset-assert 208)
   (water-tex-foreground-sink-group dma-foreground-sink-group :inline :offset-assert 240)

   (foreground-sink-group     dma-foreground-sink-group 3 :inline :offset 176) ;; inline basic
   (foreground-draw-engine    engine 3       :offset-assert 272)
   (entity                    entity-links-array           :offset-assert 284)
   (ambient                   entity-ambient-data-array           :offset-assert 288)
   (closest-object            float 9       :offset-assert 292)
   (upload-size               int32 9       :offset-assert 328)
   (level-distance            meters          :offset-assert 364)
   (inside-sphere?            symbol          :offset-assert 368)
   (inside-boxes?             symbol          :offset-assert 372)
   (display?                  symbol          :offset-assert 376)
   (meta-inside?              symbol          :offset-assert 380)
   (mood                      mood-context          :offset-assert 384)
   (mood-func                 (function mood-context float int none) :offset-assert 388)
   (vis-bits                  pointer         :offset-assert 392)
   (all-visible?              symbol        :offset-assert 396)
   (force-all-visible?        symbol          :offset-assert 400)
   (linking                   basic           :offset-assert 404)
   (vis-info                  level-vis-info 8       :offset-assert 408)
   (vis-self-index            int32           :offset-assert 440)
   (vis-adj-index             int32           :offset-assert 444)
   (vis-buffer                uint8 2048    :offset-assert 448)
   (mem-usage-block           memory-usage-block           :offset-assert 2496)
   (mem-usage                 int32           :offset-assert 2500)
   (code-memory-start         pointer          :offset-assert 2504)
   (code-memory-end           pointer          :offset-assert 2508) ;; NOTE - usually a texture-page
   (texture-mask              uint32 9       :offset-assert 2512)
   (force-inside?             symbol          :offset-assert 2548)
   (pad                       uint8 56)
   )
  :method-count-assert 29
  :size-assert         #xa30
  :flag-assert         #x1d00000a30
  (:methods
    (deactivate (_type_) _type_ 9)
    (is-object-visible? (_type_ int) symbol 10)
    (add-irq-to-tex-buckets! (_type_) none 11)
    (unload! (_type_) _type_ 12)
    (bsp-name (_type_) symbol 13)
    (compute-memory-usage (_type_ object) memory-usage-block 14)
    (point-in-boxes? (_type_ vector) symbol 15)
    (update-vis! (_type_ level-vis-info uint uint) symbol 16)
    (load-continue (_type_) _type_ 17)
    (load-begin (_type_) _type_ 18)
    (login-begin (_type_) _type_ 19)
    (vis-load (_type_) uint 20)
    (unused-21 (_type_) none 21)
    (birth (_type_) _type_ 22)
    (level-status-set! (_type_ symbol) _type_ 23)
    (load-required-packages (_type_) _type_ 24)
    (init-vis (_type_) int 25)
    (vis-clear (_type_) int 26)
    (debug-print-splitbox (_type_ vector string) none 27)
    (art-group-get-by-name (_type_ string) art-group 28)
    )
  )

(declare-type entity-links structure)
(deftype level-group (basic)
  ((length          int32                :offset-assert 4)
   (log-in-level-bsp    bsp-header                :offset-assert 8)
   (loading-level   level                :offset-assert 12)
   (entity-link     entity-links         :offset-assert 16) ;; not sure what's going on here
   (border?         basic                :offset-assert 20)
   (vis?            basic                :offset-assert 24)
   (want-level      basic                :offset-assert 28)
   (receiving-level basic                :offset-assert 32)
   (load-commands   pair                 :offset-assert 36)
   (play?           symbol               :offset-assert 40)
   ;; there's something? from 40 -> 96. ;; - Look at default-menu::debug-create-cam-restore
   (_hack-pad        uint8                :offset 90)
   (level0          level        :inline :offset-assert 96)
   (level1          level        :inline :offset-assert 2704)
   (level-default   level        :inline :offset-assert 5312)
   ;; this actually went earlier,
   (level           level 3      :inline :offset 96)
   ;; and this one too. why another one?
   (data            level 3      :score -1 :inline :offset 96)
   (pad uint32)
   )
  :method-count-assert 27
  :size-assert         #x1ef4
  :flag-assert         #x1b00001ef4
  (:methods
    (level-get (_type_ symbol) level 9)
    (level-get-with-status (_type_ symbol) level 10)
    (level-get-for-use (_type_ symbol symbol) level 11)
    (activate-levels! (_type_) int 12)
    (debug-print-entities (_type_ symbol type) none 13)
    (debug-draw-actors (_type_ symbol) none 14)
    (actors-update (_type_) object 15)
    (level-update (_type_) int 16)
    (level-get-target-inside (_type_) level 17)
    (alloc-levels! (_type_ symbol) int 18)
    (load-commands-set! (_type_ pair) pair 19)
    (art-group-get-by-name (_type_ string) art-group 20)
    (load-command-get-index (_type_ symbol int) pair 21)
    (update-vis-volumes (_type_) none 22)
    (update-vis-volumes-from-nav-mesh (_type_) none 23)
    (print-volume-sizes (_type_) none 24)
    (level-status (_type_ symbol) symbol 25)
    (level-get-most-disposable (_type_) level 26)
    )
  )

;; - Symbols

(define-extern *level* level-group)


;; ----------------------
;; File - math-camera-h
;; Source Path - engine/camera/math-camera-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype vis-gif-tag (structure)
  ((fog0  uint32  :offset-assert 0)
   (strip uint32  :offset-assert 4)
   (regs  uint32  :offset-assert 8)
   (fan   uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cull-info (structure)
  ((x-fact      float  :offset-assert 0)
   (y-fact      float  :offset-assert 4)
   (z-fact      float  :offset-assert 8)
   (cam-radius  float  :offset-assert 12)
   (cam-x       float  :offset-assert 16)
   (cam-y       float  :offset-assert 20)
   (xz-dir-ax   float  :offset-assert 24)
   (xz-dir-az   float  :offset-assert 28)
   (xz-dir-bx   float  :offset-assert 32)
   (xz-dir-bz   float  :offset-assert 36)
   (xz-cross-ab float  :offset-assert 40)
   (yz-dir-ay   float  :offset-assert 44)
   (yz-dir-az   float  :offset-assert 48)
   (yz-dir-by   float  :offset-assert 52)
   (yz-dir-bz   float  :offset-assert 56)
   (yz-cross-ab float  :offset-assert 60)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype math-camera (basic)
  ((d                          meters             :offset-assert 4)
   (f                          meters             :offset-assert 8)
   (fov                        degrees            :offset-assert 12)
   (x-ratio                    float              :offset-assert 16)
   (y-ratio                    float              :offset-assert 20)
   (x-pix                      float              :offset-assert 24)
   (x-clip                     float              :offset-assert 28)
   (x-clip-ratio-in            float              :offset-assert 32)
   (x-clip-ratio-over          float              :offset-assert 36)
   (y-pix                      float              :offset-assert 40)
   (y-clip                     float              :offset-assert 44)
   (y-clip-ratio-in            float              :offset-assert 48)
   (y-clip-ratio-over          float              :offset-assert 52)
   (cull-info                  cull-info  :inline :offset-assert 56)
   (fog-start                  meters             :offset-assert 120)
   (fog-end                    meters             :offset-assert 124)
   (fog-max                    float              :offset-assert 128)
   (fog-min                    float              :offset-assert 132)
   (reset                      int32              :offset-assert 136)
   (smooth-step                float              :offset-assert 140)
   (smooth-t                   float              :offset-assert 144)
   (perspective                matrix     :inline :offset-assert 160)
   (isometric                  matrix     :inline :offset-assert 224)
   (sprite-2d                  matrix     :inline :offset-assert 288)
   (sprite-2d-hvdf             vector     :inline :offset-assert 352)
   (camera-rot                 matrix     :inline :offset-assert 368)
   (inv-camera-rot             matrix     :inline :offset-assert 432)
   (inv-camera-rot-smooth      matrix     :inline :offset-assert 496)
   (inv-camera-rot-smooth-from quaternion :inline :offset-assert 560)
   (camera-temp                matrix     :inline :offset-assert 576)
   (prev-camera-temp           matrix     :inline :offset-assert 640)
   (hmge-scale                 vector     :inline :offset-assert 704)
   (inv-hmge-scale             vector     :inline :offset-assert 720)
   (hvdf-off                   vector     :inline :offset-assert 736)
   (guard                      vector     :inline :offset-assert 752)
   (vis-gifs                   vis-gif-tag 4 :inline      :offset-assert 768)
   (vis-gifs-quads             uint128 4      :offset 768) ;; added
   (giftex                     vis-gif-tag            :offset 768)
   (gifgr                      vis-gif-tag            :offset 784)
   (giftex-trans               vis-gif-tag            :offset 800)
   (gifgr-trans                vis-gif-tag            :offset 816)
   (pfog0                      float              :offset-assert 832)
   (pfog1                      float              :offset-assert 836)
   (trans                      vector     :inline :offset-assert 848)
   (plane                      plane    4       :inline :offset-assert 864)
   (guard-plane                plane    4       :inline :offset-assert 928)
   (shrub-mat                  matrix     :inline :offset-assert 992)
   (fov-correction-factor      float              :offset-assert 1056)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x424
  :flag-assert         #x900000424
  )


;; ----------------------
;; File - math-camera
;; Source Path - engine/camera/math-camera.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype fog-corrector (structure)
  ((fog-end   float  :offset-assert 0)
   (fog-start float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; - Functions

(define-extern update-math-camera (function math-camera symbol symbol math-camera))
(define-extern fog-corrector-setup (function fog-corrector math-camera none))
(define-extern sprite-distorter-generate-tables (function none))
(define-extern math-cam-start-smoothing (function float float quaternion))
(define-extern move-target-from-pad (function transform int transform))
(define-extern transform-point-vector! (function vector vector symbol))
(define-extern transform-point-qword! (function vector4w vector symbol))
(define-extern transform-point-vector-scale! (function vector vector float))
(define-extern init-for-transform (function matrix none))

;; - Symbols

(define-extern *math-camera* math-camera)
(define-extern *math-camera-fog-correction* fog-corrector)


;; ----------------------
;; File - font-h
;; Source Path - engine/gfx/font-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

;;;;;;;;;;;
;;;;;;;;;;;
(deftype char-verts (structure)
  ((pos    vector 4 :inline :offset-assert 0)
   (color  vector 4 :inline :offset-assert 64)
   (tex-st vector 4 :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype char-color (structure)
  ((color rgba 4 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum font-color
  :type uint64
  (default 0)
  (white 1)
  (transparent 2)
  (red 3)
  (orange 4)
  (yellow 5)
  (green 6)
  (blue 7)
  (cyan 8)
  (pink 9)
  (menu-selected 10)
  (menu-selected-parent 11)
  (menu 12)
  (menu-parent 13)
  (menu-func-bad 14)
  (menu-flag-on 15)
  (menu-flag-on-parent 16)
  (menu-flag-off 17)
  (menu-flag-off-parent 18)
  (menu-invalid 19)
  (flat-yellow 20)
  (progress-memcard 21)
  (pad-back 22)
  (pad-shine 23)
  (pad-square 24)
  (pad-circle 25)
  (pad-triangle 26)
  (pad-x 27)
  (progress-blue 28)
  (progress-yellow 29)
  (progress-selected 30)
  (progress-percent 31)
  (credits 32)
  (red-reverse 33)
  (red-obverse 34)
  )

(defenum font-flags
  :type uint32
  :bitfield #t
  (shadow 0)
  (kerning 1)
  (middle 2)
  (left 3)
  (right 4)
  (large 5)
  (pc-hack 6)
  )

(deftype font-context (basic)
  ((origin     vector :inline :offset-assert 16)
   (strip-gif  vector :inline :offset-assert 32)
   (width      float          :offset-assert 48)
   (height     float          :offset-assert 52)
   (projection float          :offset-assert 56)
   (context-vec vector :inline :offset 48) ;; added
   (color      font-color     :offset-assert 64)
   (color-s32  int32          :offset 64) ;; added for asm
   (flags      font-flags         :offset-assert 72)
   (flags-signed int32        :offset        72) ;; added for asm
   (mat        matrix         :offset-assert 76)
   (start-line uint32         :offset-assert 80)
   (scale      float          :offset-assert 84)
   )
  :method-count-assert 20
  :size-assert         #x58
  :flag-assert         #x1400000058
  (:methods
    (new (symbol type matrix int int float font-color font-flags) _type_ 0)
    (set-mat! (font-context matrix) font-context 9)
    (set-origin! (font-context int int) font-context 10)
    (set-depth! (font-context int) font-context 11)
    (set-w! (font-context float) font-context 12)
    (set-width! (font-context int) font-context 13)
    (set-height! (font-context int) font-context 14)
    (set-projection! (font-context float) font-context 15)
    (set-color! (font-context font-color) font-context 16)
    (set-flags! (font-context font-flags) font-context 17)
    (set-start-line! (font-context uint) font-context 18)
    (set-scale! (font-context float) font-context 19)
    )
  )

(deftype font-work (structure)
  ((font-tmpl          dma-gif-packet :inline :offset-assert 0)
   (char-tmpl          dma-gif-packet :inline :offset-assert 32)
   (tex1-tmpl          uint64        2       :offset-assert 64)
   (small-font-lo-tmpl uint64        2       :offset-assert 80)
   (small-font-lo-tmpl-qw uint128            :offset 80)
   (small-font-hi-tmpl uint64        2       :offset-assert 96)
   (small-font-hi-tmpl-qw uint128            :offset 96)
   (large-font-lo-tmpl uint64        2       :offset-assert 112)
   (large-font-lo-tmpl-qw uint128            :offset 112)
   (large-font-hi-tmpl uint64        2       :offset-assert 128)
   (large-font-hi-tmpl-qw uint128            :offset 128)
   (size1-small        vector         :inline :offset-assert 144)
   (size2-small        vector         :inline :offset-assert 160)
   (size3-small        vector         :inline :offset-assert 176)
   (size1-large        vector         :inline :offset-assert 192)
   (size2-large        vector         :inline :offset-assert 208)
   (size3-large        vector         :inline :offset-assert 224)
   (size-st1           vector         :inline :offset-assert 240)
   (size-st2           vector         :inline :offset-assert 256)
   (size-st3           vector         :inline :offset-assert 272)
   (save               vector         :inline :offset-assert 288)
   (save-color         vector  4   :inline    :offset-assert 304)
   (current-verts      char-verts     :inline :offset-assert 368)
   (src-verts          char-verts     :inline :offset-assert 560)
   (dest-verts         char-verts     :inline :offset-assert 752)
   (justify            vector        64   :inline   :offset-assert 944)
   (color-shadow       vector4w       :inline :offset-assert 1968)
   (color-table        char-color       64  :inline    :offset-assert 1984)
   (last-color         font-color             :offset-assert 3008)
   (last-color-32      int32                  :offset 3008)
   (save-last-color    font-color             :offset-assert 3016)
   (save-last-color-32 int32                  :offset 3016) ;; added
   (buf                basic                  :offset-assert 3024)
   (str-ptr            uint32                 :offset-assert 3028)
   (str-ptr-signed     (pointer uint8)                  :offset 3028) ;; added
   (flags              font-flags                 :offset-assert 3032)
   (flags-signed       int32                  :offset 3032) ;; added
   (reg-save           uint32        5       :offset-assert 3036)
   )
  :method-count-assert 9
  :size-assert         #xbf0
  :flag-assert         #x900000bf0
  )

;; - Functions

(define-extern font-set-tex0 (function (pointer gs-tex0) texture uint uint uint none))

;; - Symbols

(define-extern *font-default-matrix* matrix)
(define-extern *font-work* font-work)


;; ----------------------
;; File - decomp-h
;; Source Path - engine/gfx/decomp-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

;;;;;;;;;;;;;
;;;;;;;;;;;;;
(deftype decomp-work (structure)
  ((buffer0      uint8 2048 :offset-assert 0)
   (buffer1      uint8 2048 :offset-assert 2048)
   (indices      uint16 2048 :offset-assert 4096)
   (temp-indices uint16 2048 :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )


;; ----------------------
;; File - display
;; Source Path - engine/gfx/hw/display.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern draw-quad2d (function dma-buffer draw-context none))
(define-extern set-display-env (function display-env int int int int int int display-env))
(define-extern set-draw-env (function draw-env int int int int int int draw-env))
(define-extern get-video-mode (function symbol))
(define-extern draw-string-xy (function string dma-buffer int int font-color font-flags float))
(define-extern set-draw-env-offset (function draw-env int int int draw-env))
(define-extern put-display-alpha-env (function display-env none))
(define-extern set-display2 (function display int int int int int display))
(define-extern allocate-dma-buffers (function display display))
(define-extern draw-sprite2d-xy (function dma-buffer int int int int rgba none))
(define-extern screen-gradient (function dma-buffer rgba rgba rgba rgba none))
(define-extern vif1-handler-debug (function none))
(define-extern vif1-handler (function none))
(define-extern install-handler (function int function int))  ;; GOAL thinks it returns something.
(define-extern vblank-handler (function int))
(define-extern set-display-gs-state (function dma-buffer int int int int int dma-buffer))
(define-extern set-display-gs-state-offset (function dma-buffer int int int int int int int dma-buffer))
(define-extern reset-display-gs-state (function display dma-buffer int display))

;; - Symbols

(define-extern *profile-y* int)
(define-extern *profile-h* int)
(define-extern *profile-x* int)
(define-extern *profile-w* int)
(define-extern *profile-ticks* symbol)
(define-extern *font-context* font-context)
(define-extern *pause-context* font-context)
(define-extern *vblank-counter* int)
(define-extern *oddeven* int)
(define-extern *vu0-dma-list* dma-buffer)


;; ----------------------
;; File - connect
;; Source Path - engine/engine/connect.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

;;;;;;;;;;;;;
;;;;;;;;;;;;;
(deftype connectable (structure)
  ((next0 connectable  :offset-assert 0)
   (prev0 connectable  :offset-assert 4)
   (next1 connectable  :offset-assert 8)
   (prev1 connectable  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(declare-type engine basic)
(deftype connection (connectable)
  ((param0 basic         :offset-assert 16) ;; often (function object object object object object), but can be other things.
   (param1 int32         :offset-assert 20)
   (param2 int32         :offset-assert 24)
   (param3 int32         :offset-assert 28)
   (quad   uint128     2 :offset 0)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  ;; field param1 is a basic loaded with a signed load field param2 is a basic loaded with a signed load field param3 is a basic loaded with a signed load
  (:methods
    (print (connection) _type_ 2)
    (get-engine (connection) engine 9)
    (get-process (connection) process 10)
    (belongs-to-engine? (connection engine) symbol 11)
    (belongs-to-process? (connection process) symbol 12)
    (move-to-dead (connection) connection 13)
    )
  )

(deftype engine (basic)
  ((name basic :offset-assert 4)
   (length int16 :offset-assert 8)             ;; in use elts of the data array
   (allocated-length int16 :offset-assert 10)  ;; size of the data array
   (engine-time time-frame :offset-assert 16)      ;; frame that we last executed
   ;; terminating nodes for the next0/prev0 linked lists
   (alive-list connectable :inline :offset-assert 32)
   (alive-list-end connectable :inline :offset-assert 48)
   (dead-list connectable :inline :offset-assert 64)
   (dead-list-end connectable :inline :offset-assert 80)
   ;; storage for nodes. this is dynamically sized.
   (data connection 1 :inline :offset-assert 96)
   )
  :method-count-assert 24
  :size-assert         #x80
  :flag-assert         #x1800000080
  (:methods
    (new (symbol type basic int) _type_ 0)
    (inspect-all-connections (engine) engine 9)
    (apply-to-connections (engine (function connectable none)) int 10)
    (apply-to-connections-reverse (engine (function connectable none)) int 11)
    (execute-connections (engine object) int 12)
    (execute-connections-and-move-to-dead (engine object) int 13)
    (execute-connections-if-needed (engine object) int 14)
    (add-connection (engine process object object object object) connection 15)
    (remove-from-process (engine process) int 16)
    (remove-matching (engine (function connection engine symbol)) int 17)
    (remove-all (engine) int 18)
    (remove-by-param1 (engine object) int 19)
    (remove-by-param2 (engine int) int 20)
    (get-first-connectable (engine) connectable 21)
    (get-last-connectable (engine) connectable 22)
    (unknown-1 (engine (pointer uint32)) uint 23)
    )
  )

;; - Functions

(define-extern connection-process-apply (function process (function object none) symbol))


;; ----------------------
;; File - text-h
;; Source Path - engine/ui/text-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype game-text (structure)
  ((id   text-id  :offset-assert 0)
   (text string  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype game-text-info (basic)
  ((length      int32            :offset-assert 4)
   (language-id int32            :offset-assert 8)
   (group-name  string           :offset-assert 12)
   (data        game-text :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (lookup-text! (_type_ text-id symbol) string 9)
    )
  )

;; - Symbols

(define-extern *text-group-names* (array string))
(define-extern kheap type)
(define-extern *common-text-heap* kheap)
(define-extern *common-text* game-text-info)


;; ----------------------
;; File - settings-h
;; Source Path - engine/game/settings-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum language-enum
  :type int64
  (english)
  (french)
  (german)
  (spanish)
  (italian)
  (japanese)
  (uk-english)
  )
;; was manually done
(deftype setting-data (structure)
  ((border-mode symbol :offset-assert 0)
   (sfx-volume  float :offset-assert 4)
   (music-volume float :offset-assert 8)
   (dialog-volume float :offset-assert 12)
   (process-mask process-mask :offset-assert 16)
   (common-page int32 :offset-assert 20)
   (language language-enum :offset-assert 24)
   (screenx int32 :offset-assert 32)
   (screeny int32 :offset-assert 36)
   (vibration symbol :offset-assert 40)
   (play-hints symbol :offset-assert 44)
   (movie (pointer process) :offset-assert 48) ;; special print
   (talking (pointer process) :offset-assert 52) ;; special print
   (spooling (pointer process) :offset-assert 56) ;; special print
   (hint (pointer process) :offset-assert 60) ;; special print
   (ambient (pointer process) :offset-assert 64) ;; special print
   (video-mode symbol :offset-assert 68)
   (aspect-ratio symbol :offset-assert 72)
   (sound-flava uint8 :offset-assert 76)
   (auto-save symbol :offset-assert 80)
   (music-volume-movie float :offset-assert 84)
   (sfx-volume-movie float :offset-assert 88)
   (music symbol :offset-assert 92)
   (bg-r float :offset-assert 96)
   (bg-g float :offset-assert 100)
   (bg-b float :offset-assert 104)
   (bg-a float :offset-assert 108)
   (bg-a-speed float :offset-assert 112)
   (bg-a-force float :offset-assert 116)
   (allow-progress symbol :offset-assert 120)
   (allow-pause symbol :offset-assert 124)
   (sound-flava-priority float :offset-assert 128)
   (ocean-off symbol :offset-assert 132)
   (allow-look-around symbol :offset-assert 136)
   (ambient-volume float :offset-assert 140)
   (ambient-volume-movie float :offset-assert 144)
   (dialog-volume-hint float :offset-assert 148)
   (dummy uint32 11 :offset-assert 152)
   )
  :method-count-assert 10
  :size-assert         #xc4
  :flag-assert         #xa000000c4
  (:methods
    (update-from-engine (_type_ engine) setting-data 9)
    )
  )

(deftype setting-control (basic)
  ((current setting-data :inline :offset-assert 16)
   (target  setting-data :inline :offset-assert 224)
   (default setting-data :inline :offset-assert 432)
   (engine  engine               :offset-assert 628)
   )
  :method-count-assert 14
  :size-assert         #x278
  :flag-assert         #xe00000278
  (:methods
    (new (symbol type int) _type_ 0)
    (add-setting (_type_ process symbol object object object) none 9)
    (set-setting (_type_ process symbol object object object) none 10)
    (remove-setting (_type_ process symbol) none 11)
    (apply-settings (_type_) setting-data 12)
    (update (_type_) setting-data 13)
    )
  )

(deftype scf-time (structure)
  ((stat   uint8  :offset-assert 0)
   (second uint8  :offset-assert 1)
   (minute uint8  :offset-assert 2)
   (hour   uint8  :offset-assert 3)
   (week   uint8  :offset-assert 4)
   (day    uint8  :offset-assert 5)
   (month  uint8  :offset-assert 6)
   (year   uint8  :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; ----------------------
;; File - capture
;; Source Path - engine/gfx/capture.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype gs-store-image-packet (structure)
  ((vifcode        vif-tag 4 :offset-assert 0)
   (giftag         gif-tag   :offset-assert 16)
   (bitbltbuf      gs-bitbltbuf    :offset-assert 32)
   (bitbltbuf-addr gs-reg64    :offset-assert 40)
   (trxpos         gs-trxpos    :offset-assert 48)
   (trxpos-addr    gs-reg64    :offset-assert 56)
   (trxreg         gs-trxreg    :offset-assert 64)
   (trxreg-addr    gs-reg64    :offset-assert 72)
   (finish         int64    :offset-assert 80) ;; gs-finish
   (finish-addr    gs-reg64    :offset-assert 88)
   (trxdir         gs-trxdir    :offset-assert 96)
   (trxdir-addr    gs-reg64    :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; - Functions

(define-extern gs-set-default-store-image (function gs-store-image-packet int int int int int int int int))
(define-extern gs-store-image (function object object object))
(define-extern sync-path (function int int int))
(define-extern file-stream-write (function file-stream pointer uint uint))
(define-extern file-stream-close (function file-stream file-stream))
(define-extern store-image (function int int))


;; ----------------------
;; File - memory-usage-h
;; Source Path - engine/debug/memory-usage-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype memory-usage-info (structure)
  ((name  string :offset-assert 0)
   (count int32  :offset-assert 4)
   (used  int32  :offset-assert 8)
   (total int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype memory-usage-block (basic)
  ((work-bsp basic       :offset-assert 4)
   (length   int32       :offset-assert 8)
   (data     memory-usage-info 109 :inline :offset-assert 16) ;; guess
   )
  :method-count-assert 12
  :size-assert         #x6e0
  :flag-assert         #xc000006e0
  (:methods
    (reset! (_type_) _type_ 9)
    (calculate-total (_type_) int 10)
    (print-mem-usage (_type_ level object) none 11)
    )
  )

;; - Symbols

(define-extern *mem-usage* memory-usage-block)
(define-extern *dma-mem-usage* memory-usage-block)
(define-extern *temp-mem-usage* memory-usage-block)


;; ----------------------
;; File - texture
;; Source Path - engine/gfx/texture.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern adgif-shader<-texture! (function adgif-shader texture adgif-shader))
(define-extern adgif-shader<-texture-with-update! (function adgif-shader texture adgif-shader))
(define-extern level-remap-texture (function texture-id texture-id))
(define-extern link-texture-by-id (function texture-id adgif-shader texture-page-dir-entry))
(define-extern lookup-texture-by-id (function texture-id texture))
(define-extern texture-page-login (function texture-id (function texture-pool texture-page kheap int texture-page) kheap texture-page-dir-entry))
;; arg2 in these is not an int, but something else. Not sure what it is yet.
;; all these texture-page-segment might actually be texture-relocate-later!
(define-extern texture-page-default-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern loado (function string kheap object))
(define-extern texture-relocate (function dma-buffer texture int gs-psm int dma-buffer))
(define-extern dma-buffer-add-ref-texture (function dma-buffer pointer int int gs-psm none))
(define-extern upload-vram-pages (function texture-pool texture-pool-segment texture-page int bucket-id int))
(define-extern upload-vram-pages-pris (function texture-pool texture-pool-segment texture-page bucket-id int int))
(define-extern movie? (function symbol))
(define-extern texture-page-near-allocate-1 (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-near-allocate-0 (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-common-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-size-check (function texture-pool level symbol int))
(define-extern update-vram-pages (function texture-pool texture-pool-segment texture-page int int)) ;; todo
(define-extern upload-vram-data (function dma-buffer int pointer int none))
(define-extern gs-page-width (function gs-psm int))
(define-extern gs-page-height (function gs-psm int))
(define-extern gs-largest-block (function int int gs-psm int))
(define-extern gs-block-width (function gs-psm int))
(define-extern gs-block-height (function gs-psm int))
(define-extern gs-find-block (function int int gs-psm int))
(define-extern physical-address (function pointer pointer))
(define-extern texture-qwc (function int int gs-psm int))
(define-extern texture-bpp (function gs-psm int))
(define-extern texture-page-dir-inspect (function texture-page-dir symbol none))
(define-extern gs-blocks-used (function int int gs-psm int))
(define-extern texture-page-common-boot-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-level-allocate (function texture-pool texture-page kheap int texture-page))
(define-extern relocate-later (function symbol))
(define-extern adgif-shader-update! (function adgif-shader texture none)) ;; todo - unconfirmed
(define-extern adgif-shader-login (function adgif-shader texture))
(define-extern adgif-shader-login-no-remap (function adgif-shader texture))
(define-extern adgif-shader-login-fast (function adgif-shader texture))
(define-extern adgif-shader-login-no-remap-fast (function adgif-shader texture))
(define-extern adgif-shader<-texture-simple! (function adgif-shader texture adgif-shader))

;; - Symbols

(define-extern loading-level kheap)
(define-extern *texture-pool* texture-pool)
(define-extern *font-texture* texture)
(define-extern global kheap)
(define-extern *txt-dma-list* dma-buffer)
(define-extern ct32-24-block-table (array int32))
(define-extern ct16-block-table (array int32))
(define-extern ct16s-block-table (array int32))
(define-extern mz32-24-block-table (array int32))
(define-extern mz16-block-table (array int32))
(define-extern mz16s-block-table (array int32))
(define-extern mt8-block-table (array int32))
(define-extern mt4-block-table (array int32))
(define-extern *shader-list* pair)
(define-extern *edit-shader* texture-id)


;; ----------------------
;; File - main-h
;; Source Path - engine/game/main-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype frame-stats (structure)
  ((field-time time-frame 2 :offset-assert 0)
   (field      int32     :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype screen-filter (basic)
  ((draw? basic   :offset-assert 4)
   (color rgba    :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (draw (_type_) none 9)
    )
  )

;; - Functions

(define-extern *draw-hook* (function none))
(define-extern *debug-hook* (function none))
(declare-type debug-menu-context basic)
(define-extern *menu-hook* (function debug-menu-context))
(define-extern *progress-hook* (function none))
(define-extern *dma-timeout-hook* (function none))

;; - Symbols

(define-extern *stats-poly* symbol)
(define-extern *stats-memory* symbol)
(define-extern *stats-memory-short* symbol)
(define-extern *stats-collide* symbol)
(define-extern *stats-bsp* symbol)
(define-extern *stats-buffer* symbol)
(define-extern *stats-target* symbol)
(define-extern *stats-dma-test* symbol)
(define-extern *artist-all-visible* symbol)
(define-extern *artist-flip-visible* symbol)
(define-extern *artist-fix-visible* symbol)
(define-extern *artist-fix-frustum* symbol)
(define-extern *artist-error-spheres* symbol)
(define-extern *artist-use-menu-subdiv* symbol)
(define-extern *display-profile* symbol)
(define-extern *display-sidekick-stats* symbol)
(define-extern *display-quad-stats* symbol)
(define-extern *display-tri-stats* symbol)
(define-extern *display-perf-stats* symbol)
(define-extern *display-ground-stats* symbol)
(define-extern *display-collision-marks* symbol)
(define-extern *display-collide-cache* symbol)
(define-extern *display-render-collision* symbol)
(define-extern *display-hipri-collision-marks* symbol)
(define-extern *display-edge-collision-marks* symbol)
(define-extern *display-geo-marks* symbol)
(define-extern *display-target-marks* symbol)
(define-extern *display-collide-history* int)
(define-extern *display-xyz-axes* symbol)
(define-extern *display-cam-collide-history* symbol)
(define-extern *record-cam-collide-history* symbol)
(define-extern *display-cam-master-marks* symbol)
(define-extern *display-cam-other* symbol)
(define-extern *display-camera-marks* symbol)
(define-extern *camera-no-mip-correction* symbol)
(define-extern *display-cam-los-info* symbol)
(define-extern *display-cam-los-debug* symbol)
(define-extern *display-cam-los-marks* symbol)
(define-extern *display-cam-coll-marks* symbol)
(define-extern *display-camera-info* symbol)
(define-extern *display-camera-old-stats* symbol)
(define-extern *display-camera-last-attacker* symbol)
(define-extern *display-file-info* symbol)
(define-extern *display-actor-marks* symbol)
(define-extern *display-ambient-hint-marks* symbol)
(define-extern *display-ambient-sound-marks* symbol)
(define-extern *display-ambient-poi-marks* symbol)
(define-extern *display-ambient-light-marks* symbol)
(define-extern *display-ambient-dark-marks* symbol)
(define-extern *display-ambient-weather-off-marks* symbol)
(define-extern *display-ambient-ocean-off-marks* symbol)
(define-extern *display-ambient-ocean-near-off-marks* symbol)
(define-extern *display-ambient-music-marks* symbol)
(define-extern *display-sprite-info* symbol)
(define-extern *display-entity-errors* symbol)
(define-extern *display-lights* symbol)
(define-extern *display-instance-info* symbol)
(define-extern *display-deci-count* symbol)
(define-extern *sync-dma* symbol)
(define-extern *display-strip-lines* int)
(define-extern *display-nav-marks* symbol)
(define-extern *display-path-marks* symbol)
(define-extern *display-vol-marks* symbol)
(define-extern *display-water-marks* symbol)
(define-extern *display-actor-anim* string)
(define-extern *display-process-anim* (pointer process))
(define-extern *display-actor-vis* symbol)
(define-extern *display-actor-graph* symbol)
(define-extern *display-level-border* symbol)
(define-extern *display-load-boundaries* symbol)
(define-extern *display-memcard-info* symbol)
(define-extern *display-split-boxes* symbol)
(define-extern *display-split-box-info* symbol)
(define-extern *display-texture-download* symbol)
(define-extern *display-art-control* symbol)
(define-extern *display-level-spheres* symbol)
(define-extern *time-of-day-effects* symbol)
(define-extern *time-of-day-fast* symbol)
(define-extern *display-iop-info* symbol)
(define-extern *ambient-sound-class* symbol)
(define-extern *slow-frame-rate* symbol)
(define-extern *weather-off* symbol)
(define-extern *debug-pause* symbol)
(define-extern *subdivide-draw-mode* int)
(define-extern *ocean-subdivide-draw-mode* int)
(define-extern *dproc* process)
(define-extern *run* symbol)
(define-extern *teleport* symbol)
(define-extern *teleport-count* int)
(define-extern *frame-stats* frame-stats)


;; ----------------------
;; File - mspace-h
;; Source Path - engine/anim/mspace-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype joint (basic)
  ((name      string         :offset-assert 4)
   (number    int32          :offset-assert 8)
   (parent    joint          :offset-assert 12)
   (bind-pose matrix :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype bone-cache (structure)
  ((bone-matrix   uint32  :offset-assert 0)
   (parent-matrix uint32  :offset-assert 4)
   (dummy         uint32  :offset-assert 8)
   (frame         uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bone (structure)
  ((transform matrix     :inline :offset-assert 0)
   (position  vector     :inline :offset 48) ;; overlays the matrix
   (scale     vector     :inline :offset-assert 64)
   (cache     bone-cache :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype skeleton (inline-array-class)
  ((bones bone :inline :dynamic))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cspace (structure)
  ((parent    cspace    :offset-assert 0)
   (joint     joint     :offset-assert 4)
   (joint-num int16     :offset-assert 8)
   (geo       basic     :offset-assert 12)
   (bone      bone      :offset-assert 16)
   (param0    function  :offset-assert 20)
   (param1    basic     :offset-assert 24)
   (param2    basic     :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  ;; field param1 is a basic loaded with a signed load field param2 is a basic loaded with a signed load
  (:methods
    (new (symbol type basic) _type_ 0)
    (reset-and-assign-geo! (_type_ basic) _type_ 9)
    )
  )

(deftype cspace-array (inline-array-class)
  (
   (data cspace :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;; ----------------------
;; File - drawable-h
;; Source Path - engine/draw/drawable-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type ambient-list structure)
(declare-type collide-list structure)
(declare-type drawable-error drawable)
(deftype drawable (basic)
  ((id      int16          :offset-assert 4)
   (bsphere vector :inline :offset-assert 16)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (login (_type_) _type_ 9) ;; probably login or init.
    (draw (_type_ _type_ display-frame) none 10)
    (collide-with-box (_type_ int collide-list) none 11)
    (collide-y-probe (_type_ int collide-list) none 12)
    (collide-ray (_type_ int collide-list) none 13)
    (collect-stats (_type_) none 14)
    (debug-draw (_type_ drawable display-frame) none 15)
    (unpack-vis (_type_ (pointer int8) (pointer int8)) (pointer int8) 16)
    (collect-ambients (_type_ sphere int ambient-list) none 17)
    )
  )

(deftype drawable-error (drawable)
  ((name    string          :offset-assert 32)
   )
  :method-count-assert 18
  :size-assert         #x24
  :flag-assert         #x1200000024
  )


;; ----------------------
;; File - drawable-group-h
;; Source Path - engine/draw/drawable-group-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype drawable-group (drawable)
  ((length  int16       :offset 6)
   (data    drawable 1  :offset-assert 32)
   )
  (:methods
    (new (symbol type int) _type_)
    )
  :flag-assert #x1200000024
  )

;; - Symbols

(define-extern *collide-nodes* int)


;; ----------------------
;; File - drawable-inline-array-h
;; Source Path - engine/draw/drawable-inline-array-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype drawable-inline-array (drawable)
  ((length  int16          :offset 6) ;; this is kinda weird.
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  )


;; ----------------------
;; File - draw-node-h
;; Source Path - engine/draw/draw-node-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype draw-node (drawable)
  ((child-count uint8          :offset 6)
   (flags       uint8          :offset 7)
   (child       drawable        :offset 8)
   (distance    float          :offset 12)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  ;; field distance is a float printed as hex?
  )

(deftype drawable-inline-array-node (drawable-inline-array)
  ((data draw-node 1 :inline)
   (pad uint32)
   )
  :method-count-assert 18
  :size-assert         #x44
  :flag-assert         #x1200000044
  ;;  too many basic blocks
  (:methods

    )
  )

(deftype draw-node-dma (structure)
  ((banka draw-node 32 :inline :offset-assert 0)
   (bankb draw-node 32 :inline :offset-assert 1024)
   )
  :method-count-assert 9
  :size-assert         #x800
  :flag-assert         #x900000800
  )


;; ----------------------
;; File - drawable-tree-h
;; Source Path - engine/draw/drawable-tree-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype drawable-tree (drawable-group)
  ()
  :flag-assert #x1200000024
  )

(deftype drawable-tree-array (drawable-group)
  ((trees drawable-tree 1 :offset 32 :score 100))
  :flag-assert #x1200000024
  )


;; ----------------------
;; File - drawable-actor-h
;; Source Path - engine/draw/drawable-actor-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type entity-actor basic)
(deftype drawable-actor (drawable)
  ((actor   entity-actor   :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  )

(deftype drawable-tree-actor (drawable-tree)
  ()
  :flag-assert #x1200000024
  )

(deftype drawable-inline-array-actor (drawable-inline-array)
  ((data drawable-actor 1 :inline)
   (pad uint8 4))
  :flag-assert #x1200000044
  )


;; ----------------------
;; File - drawable-ambient-h
;; Source Path - engine/draw/drawable-ambient-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type entity-ambient basic)
(deftype drawable-ambient (drawable)
  ((ambient entity-ambient :offset 8)
   )
  :method-count-assert 19
  :size-assert         #x20
  :flag-assert         #x1300000020
  (:methods
    (execute-ambient (_type_ vector) none 18)
    )
  )

(deftype drawable-tree-ambient (drawable-tree)
  ()
  :flag-assert #x1200000024
  )

(deftype drawable-inline-array-ambient (drawable-inline-array)
  ((data drawable-ambient 1 :inline)
   (pad uint32))
  :flag-assert #x1200000044
  )

(deftype level-hint (process)
  ((text-id-to-display text-id    :offset-assert 112)
   (sound-to-play      string    :offset-assert 116)
   (trans              vector    :offset-assert 120)
   (sound-id           sound-id  :offset-assert 124)
   (mode               symbol    :offset-assert 128)
   (total-time         time-frame     :offset-assert 136)
   (total-off-time     time-frame     :offset-assert 144)
   (last-time          time-frame     :offset-assert 152)
   (voicebox           handle    :offset-assert 160)
   )
  :heap-base #x40
  :method-count-assert 16
  :size-assert         #xa8
  :flag-assert         #x10004000a8
  ;; inherited inspect of process
  (:methods
    (print-text (_type_) none 14)
    (appeared-for-long-enough? (_type_) symbol 15)
    )
  (:states
    (level-hint-sidekick string)
    level-hint-normal
    level-hint-exit
    (level-hint-ambient-sound string)
    (level-hint-error string string)
    )
  )

(deftype ambient-list (structure)
  ((num-items int32        :offset-assert 0)
   (items     drawable-ambient 2048 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2004
  :flag-assert         #x900002004
  )


;; ----------------------
;; File - hint-control-h
;; Source Path - engine/game/task/hint-control-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype level-hint-control (structure)
  ((delay-before-playing        time-frame  :offset-assert 0)
   (id                          text-id  :offset-assert 8)
   (num-attempts-before-playing int8    :offset-assert 12)
   (num-success-before-killing  int8    :offset-assert 13)
   (num-attempts                int8    :offset-assert 14)
   (num-success                 int8    :offset-assert 15)
   (start-time                  time-frame  :offset-assert 16)
   (last-time-called            time-frame  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype task-hint-control (structure)
  ((task  game-task   :offset-assert 0)
   (delay time-frame  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype task-hint-control-group (structure)
  ((tasks (array task-hint-control)  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


;; ----------------------
;; File - generic-h
;; Source Path - engine/gfx/generic/generic-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type gsf-vertex structure)
(deftype gsf-vertex-array (structure)
  ((vtx gsf-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(declare-type gsf-fx-vertex structure)
(deftype gsf-fx-vertex-array (structure)
  ((data gsf-fx-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(deftype gsf-vertex (structure)
  ((data uint32   8       :offset-assert 0)
   (byte uint8   32      :offset 0)
   (quad uint128   2       :offset 0)
   (vt   qword     :inline :offset 0)
   (pos  vector3s  :inline :offset 0)
   (tex  vector2uh :inline :offset 12)
   (nrm  vector3s  :inline :offset 16)
   (nc   qword     :inline :offset 16)
   (clr  vector4ub :inline :offset 28)
   (dtex vector2uh :inline :offset 16)
   (dclr vector4ub :inline :offset 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype gsf-fx-vertex (structure)
  ((clr vector4ub :inline :offset-assert 0)
   (tex vector2uh :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype gsf-header (structure)
  ((num-strips  uint8      :offset-assert 0)
   (expanded    uint8      :offset-assert 1)
   (num-dps     uint16     :offset-assert 2)
   (num-vtxs    uint16     :offset-assert 4)
   (strip-table uint8 10 :offset-assert 6)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-ik (structure)
  ((index   uint8  :offset-assert 0)
   (no-kick uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype gsf-info (structure)
  ((ptr-iks   uint32  :offset-assert 0)
   (ptr-verts uint32  :offset-assert 4)
   (ptr-fx    uint32  :offset-assert 8)
   (dummy2    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-buffer (structure)
  ((data      uint8    8192     :offset-assert 0)
   (info      gsf-info   :inline  :offset 0)
   (header    gsf-header :inline  :offset 16)
   (work-area uint8    :dynamic :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype generic-frag (structure)
  ((start-pos uint16  :offset-assert 0)
   (end-pos   uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-strip (structure)
  ((pos uint16  :offset-assert 0)
   (len uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-envmap-saves (structure)
  ((index-mask vector4w :inline :offset-assert 0)
   (verts      uint128  12     :offset-assert 16)
   (kicks      uint128  4       :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype generic-interp-job (structure)
  ((job-type uint16  :offset-assert 0)
   (num      uint16  :offset-assert 2)
   (first    uint16  :offset-assert 4)
   (pad      uint16  :offset-assert 6)
   (ptr-data uint32  :offset-assert 8)
   (morph-z  uint16  :offset-assert 12)
   (morph-w  uint16  :offset-assert 14)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-saves (structure)
  ((ptr-dma           uint32                       :offset-assert 0)
   (ptr-vtxs          uint32                       :offset-assert 4)
   (ptr-clrs          uint32                       :offset-assert 8)
   (ptr-texs          uint32                       :offset-assert 12)
   (ptr-env-clrs      uint32                       :offset-assert 16)
   (ptr-env-texs      uint32                       :offset-assert 20)
   (cur-outbuf        uint32                       :offset-assert 24)
   (ptr-fx-buf        uint32                       :offset-assert 28)
   (xor-outbufs       uint32                       :offset-assert 32)
   (num-dps           uint32                       :offset-assert 36)
   (qwc               uint32                       :offset-assert 40)
   (gsf-buf           gsf-buffer                   :offset-assert 44)
   (ptr-shaders       uint32                       :offset-assert 48)
   (ptr-env-shader    uint32                       :offset-assert 52)
   (is-envmap         uint32                       :offset-assert 56)
   (basep             uint32                       :offset-assert 60)
   (ptr-interp-job    generic-interp-job           :offset-assert 64)
   (gifbuf-adr        uint32                       :offset-assert 68)
   (inbuf-adr         uint32                       :offset-assert 72)
   (fade-val          uint32                       :offset-assert 76)
   (time-of-day-color rgba                         :offset-assert 80)
   (to-vu0-waits      uint32                       :offset-assert 84)
   (to-spr-waits      uint32                       :offset-assert 88)
   (from-spr-waits    uint32                       :offset-assert 92)
   (envmap            generic-envmap-saves :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-gif-tag (structure)
  ((data       uint32 4       :offset-assert 0 :score -1)
   (qword      qword   :inline :offset 0 :score -1)
   (fan-prim   uint32          :offset 0)
   (str-prim   uint32          :offset 4)
   (regs       uint32          :offset 8)
   (num-strips uint32          :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ad-cmd (structure)
  ((word uint32 4 :offset-assert 0)
   (quad uint128   :offset 0)
   (data uint64    :offset 0 :score 1)
   (cmds uint64    :offset 8)
   (cmd  gs-reg    :offset 8 :score 1)
   (x    uint32    :offset 0 )
   (y    uint32    :offset 4)
   (z    uint32    :offset 8)
   (w    uint32    :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-envmap-consts (structure)
  ((consts vector          :inline :offset-assert 0)
   (strgif generic-gif-tag :inline :offset-assert 16)
   (colors vector4w        :inline :offset-assert 32)
   (shader adgif-shader    :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-consts (structure)
  ((dma-header        dma-packet            :inline :offset-assert 0)
   (vif-header        uint32               4        :offset-assert 16)
   (dma-ref-vtxs      dma-packet            :inline :offset-assert 32)
   (dma-cnt-call      dma-packet            :inline :offset-assert 48)
   (matrix            matrix                :inline :offset-assert 64)
   (base-strgif       generic-gif-tag       :inline :offset-assert 128)
   (alpha-opaque      ad-cmd                :inline :offset-assert 144)
   (alpha-translucent ad-cmd                :inline :offset-assert 160)
   (ztest-normal      ad-cmd                :inline :offset-assert 176)
   (ztest-opaque      ad-cmd                :inline :offset-assert 192)
   (adcmd-offsets     uint8               16        :offset-assert 208)
   (adcmds            ad-cmd               4        :offset 144)
   (stcycle-tag       uint32                        :offset-assert 224)
   (unpack-vtx-tag    uint32                        :offset-assert 228)
   (unpack-clr-tag    uint32                        :offset-assert 232)
   (unpack-tex-tag    uint32                        :offset-assert 236)
   (mscal-tag         uint32                        :offset-assert 240)
   (flush-tag         uint32                        :offset-assert 244)
   (reset-cycle-tag   uint32                        :offset-assert 248)
   (dummy0            uint32                        :offset-assert 252)
   (dma-tag-cnt       uint64                        :offset-assert 256)
   (envmap            generic-envmap-consts :inline :offset-assert 272)
   (light-consts      vector                :inline :offset-assert 400)
   (texture-offset    uint16               8        :offset-assert 416)
   )
  :method-count-assert 9
  :size-assert         #x1b0
  :flag-assert         #x9000001b0
  )

(deftype generic-storage (structure)
  ((data uint128 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; - Functions

(define-extern kmalloc (function kheap int kmalloc-flags string pointer))

;; - Symbols

(define-extern *gsf-buffer* gsf-buffer)


;; ----------------------
;; File - lights-h
;; Source Path - engine/gfx/lights-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype vu-lights (structure)
  ((direction vector 3 :inline :offset-assert 0)
   (color     vector 3 :inline :offset-assert 48)
   (ambient   vector :inline   :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype light (structure)
  ((direction  vector :inline :offset-assert 0)
   (color      rgbaf  :inline :offset-assert 16)
   (levels     vector :inline :offset-assert 32)
   (level      float          :offset 32)
   (sort-level float          :offset 36)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype light-ellipse (structure)
  ((matrix              matrix :inline :offset-assert 0)
   (color               rgbaf  :inline :offset-assert 64)
   (name                basic          :offset 12)
   (decay-start         float          :offset 28)
   (ambient-point-ratio float          :offset 44)
   (level               float          :offset 60)
   (func-symbol         basic          :offset 76)
   (func                basic          :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype light-array (array)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype light-volume (basic)
  ((light-array light-array  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype light-volume-sphere (light-volume)
  ((bsphere     sphere :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype light-volume-planes (light-volume)
  ((planes      vertical-planes  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; todo
(deftype light-volume-array (array)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype light-group (structure)
  ((dir0 light :inline :offset-assert 0)
   (dir1 light :inline :offset-assert 48)
   (dir2 light :inline :offset-assert 96)
   (ambi light :inline :offset-assert 144)
   (lights light 4 :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )


;; ----------------------
;; File - ocean-h
;; Source Path - engine/gfx/ocean/ocean-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype ocean-corner (structure)
  ((bsphere      sphere  :inline :offset-assert 0)
   (start-corner vector  :inline :offset-assert 16)
   (y-scales     vector  :inline :offset-assert 32)
   (alphas       vector  :inline :offset-assert 48)
   (colors       uint32 4       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype ocean-wave-info (structure)
  ((frequency  float  :offset-assert 0)
   (amplitude  float  :offset-assert 4)
   (wave-speed float  :offset-assert 8)
   (angle      float  :offset-assert 12)
   (kx         float  :offset-assert 16)
   (ky         float  :offset-assert 20)
   (w          float  :offset-assert 24)
   (flags      int32  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-spheres (structure)
  ((spheres sphere 36 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-colors (structure)
  ((colors rgba  2548 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x27d0
  :flag-assert         #x9000027d0
  )

(deftype ocean-mid-mask (structure)
  ((mask  uint8 8 :offset-assert 0) ;; avoid huge arrays. (this causes an ocean-transition function to not decompile!)
   (dword uint64    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-mid-indices (basic)
  ((data uint16 36 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ocean-mid-masks (basic)
  ((data (inline-array ocean-mid-mask) :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-trans-mask (structure)
  ((mask uint8   4 :offset-assert 0)
   (word uint64    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-trans-index (structure)
  ((parent int16  :offset-assert 0)
   (child  int16  :offset-assert 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype ocean-trans-indices (basic)
  ((data ocean-trans-index 2304 :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2404
  :flag-assert         #x900002404
  )

(deftype ocean-near-index (structure)
  ((data uint16 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-near-indices (basic)
  ((data (inline-array ocean-near-index)  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-near-colors (structure)
  ((color0 vector :inline :offset-assert 0)
   (color1 vector :inline :offset-assert 16)
   (color2 vector :inline :offset-assert 32)
   (color3 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype ocean-map (basic)
  ((start-corner        vector        :inline :offset-assert 16)
   (far-color           vector        :inline :offset-assert 32)
   (ocean-spheres       ocean-spheres         :offset-assert 48)
   (ocean-colors        ocean-colors          :offset-assert 52)
   (ocean-mid-indices   ocean-mid-indices     :offset-assert 56)
   (ocean-trans-indices ocean-trans-indices   :offset-assert 60)
   (ocean-near-indices  ocean-near-indices    :offset-assert 64)
   (ocean-mid-masks     ocean-mid-masks       :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype ocean-trans-strip (structure)
  ((verts uint128 10 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype ocean-trans-strip-array (structure)
  ((data ocean-trans-strip 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

(deftype ocean-wave-data (structure)
  ((data uint8 1024 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype ocean-wave-frames (structure)
  ((frame ocean-wave-data 64 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10000
  ;:flag-assert         #x900010000
  )

(deftype ocean-work (basic)
  ((deltas             vector  :inline :offset-assert 16)
   (map-min            vector  :inline :offset-assert 32)
   (map-max            vector  :inline :offset-assert 48)
   (interp             vector  :inline :offset-assert 64)
   (corner-array       ocean-corner 25 :inline     :offset-assert 80)
   (corner-count       int32           :offset-assert 2080)
   (temp-vecs          vector 4 :inline        :offset-assert 2096)
   (mid-mask-ptrs      (pointer int64) 36      :offset-assert 2160)
   (mid-camera-masks   uint64 36     :offset-assert 2304)
   (trans-mask-ptrs    (pointer int32) 64      :offset-assert 2592)
   (trans-camera-masks ocean-trans-mask 16 :inline      :offset-assert 2848)
   (trans-temp-masks   ocean-trans-mask 16 :inline     :offset-assert 2976)
   (near-mask-indices  uint16 16      :offset-assert 3104)
   (mid-minx           uint8           :offset-assert 3136)
   (mid-maxx           uint8           :offset-assert 3137)
   (mid-minz           uint8           :offset-assert 3138)
   (mid-maxz           uint8           :offset-assert 3139)
   (near-minx          uint8           :offset-assert 3140)
   (near-maxx          uint8           :offset-assert 3141)
   (near-minz          uint8           :offset-assert 3142)
   (near-maxz          uint8           :offset-assert 3143)
   (temp-minx          uint8           :offset-assert 3144)
   (temp-maxx          uint8           :offset-assert 3145)
   (temp-minz          uint8           :offset-assert 3146)
   (temp-maxz          uint8           :offset-assert 3147)
   )
  :method-count-assert 9
  :size-assert         #xc4c
  :flag-assert         #x900000c4c
  )

(deftype ocean-vu0-work (structure)
  ((scales      vector    :inline :offset-assert 0)
   (mask-hi     vector4w  :inline :offset-assert 16)
   (mask-lo     vector4w  :inline :offset-assert 32)
   (lights      vu-lights :inline :offset-assert 48)
   (wait-to-vu0 uint32            :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

(deftype ocean-texture-constants (structure)
  ((giftag    gs-gif-tag    :inline :offset-assert 0)
   (buffers   vector4w :inline :offset-assert 16)
   (dests     vector4w :inline :offset-assert 32)
   (start     vector   :inline :offset-assert 48)
   (offsets   vector   :inline :offset-assert 64)
   (constants vector   :inline :offset-assert 80)
   (cam-nrm   vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype ocean-texture-work (structure)
  ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype ocean-mid-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (col vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-mid-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (drw-fan        gs-gif-tag        :inline :offset-assert 96) ;; was qword
   (env-fan        gs-gif-tag        :inline :offset-assert 112) ;; was qword
   (drw-adgif      gs-gif-tag        :inline :offset-assert 128);; was qword
   (drw-texture    adgif-shader :inline :offset-assert 144)
   (drw-strip-0    gs-gif-tag        :inline :offset-assert 224) ;; was qword
   (drw-strip-1    gs-gif-tag        :inline :offset-assert 240) ;; was qword
   (env-adgif      gs-gif-tag        :inline :offset-assert 256) ;; was qword
   (env-texture    adgif-shader :inline :offset-assert 272)
   (env-strip      gs-gif-tag        :inline :offset-assert 352) ;; was qword
   (env-color      vector       :inline :offset-assert 368)
   (index-table    vector4w      8 :inline      :offset-assert 384)
   (pos0           vector       :inline :offset-assert 512)
   (pos1           vector       :inline :offset-assert 528)
   (pos2           vector       :inline :offset-assert 544)
   (pos3           vector       :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-mid-upload (structure)
  ((rot    matrix  :inline :offset-assert 0)
   (matrix matrix  :inline :offset-assert 64)
   (colors uint128 108     :offset-assert 128)
   (masks  uint128 2       :offset-assert 1856)
   )
  :method-count-assert 9
  :size-assert         #x760
  :flag-assert         #x900000760
  )

(deftype ocean-mid-upload2 (structure)
  ((rot    matrix   :inline :offset-assert 0)
   (matrix matrix   :inline :offset-assert 64)
   (count  vector4w :inline :offset-assert 128)
   (tex0   vector   :inline :offset-assert 144)
   (tex1   vector   :inline :offset-assert 160)
   (tex2   vector   :inline :offset-assert 176)
   (tex3   vector   :inline :offset-assert 192)
   (clr0   vector   :inline :offset-assert 208)
   (clr1   vector   :inline :offset-assert 224)
   (clr2   vector   :inline :offset-assert 240)
   (clr3   vector   :inline :offset-assert 256)
   (verts  uint128  18      :offset-assert 272)
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )

(deftype ocean-mid-work (structure)
  ((env0    vector  :inline :offset-assert 0)
   (env1    vector  :inline :offset-assert 16)
   (env2    vector  :inline :offset-assert 32)
   (hmg0    vector  :inline :offset-assert 48)
   (hmg1    vector  :inline :offset-assert 64)
   (hmg2    vector  :inline :offset-assert 80)
   (indices uint128 16      :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

(deftype ocean-near-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (constants3     vector       :inline :offset-assert 96)
   (constants4     vector       :inline :offset-assert 112)
   (drw-fan        gs-gif-tag   :inline :offset-assert 128) ;; was qword
   (drw2-fan       gs-gif-tag   :inline :offset-assert 144) ;; was qword
   (env-fan        gs-gif-tag   :inline :offset-assert 160) ;; was qword
   (drw-adgif      gs-gif-tag   :inline :offset-assert 176) ;; was qword
   (drw-texture    adgif-shader :inline :offset-assert 192)
   (drw-strip      gs-gif-tag   :inline :offset-assert 272) ;; was qword
   (env-adgif      gs-gif-tag   :inline :offset-assert 288) ;; was qword
   (env-texture    adgif-shader :inline :offset-assert 304) ;; was qword
   (env-strip      gs-gif-tag   :inline :offset-assert 384)
   (env-color      vector       :inline :offset-assert 400)
   (drw2-adgif     gs-gif-tag   :inline :offset-assert 416)
   (drw2-tex0      qword        :inline :offset-assert 432)
   (drw2-frame     qword        :inline :offset-assert 448)
   (drw2-strip     gs-gif-tag        :inline :offset-assert 464)
   (drw3-adgif     gs-gif-tag        :inline :offset-assert 480)
   (drw3-frame     qword        :inline :offset-assert 496)
   (index-table    vector4w      4  :inline     :offset-assert 512)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-near-upload (structure)
  ((rot          matrix            :inline :offset-assert 0)
   (matrix       matrix            :inline :offset-assert 64)
   (masks        uint128           2       :offset-assert 128)
   (start-height vector4w          :inline :offset-assert 160)
   (start-st     vector            :inline :offset-assert 176)
   (near-colors  ocean-near-colors :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype ocean-near-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-near-work (structure)
  ((verts-ptr vector  :inline :offset-assert 0)
   (indices   uint128 16      :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;; - Symbols

(define-extern *ocean-work* ocean-work)
(define-extern *ocean-facing* int)
(define-extern *ocean-off* symbol)
(define-extern *ocean-mid-off* symbol)
(define-extern *ocean-near-off* symbol)
(define-extern *ocean-heights* ocean-wave-info) ;; guess
(define-extern *ocean-verts* (inline-array vector)) ;; ret from ocean-generate-verts


;; ----------------------
;; File - ocean-trans-tables
;; Source Path - engine/gfx/ocean/ocean-trans-tables.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *ocean-left-table* (pointer float))
(define-extern *ocean-right-table* (pointer float))
(define-extern *ocean-up-table* (pointer float))
(define-extern *ocean-down-table* (pointer float))
(define-extern *ocean-down-left-table* (pointer float))
(define-extern *ocean-down-right-table* (pointer float))
(define-extern *ocean-up-right-table* (pointer float))
(define-extern *ocean-up-left-table* (pointer float))
(define-extern *ocean-trans-left-table* (pointer float))
(define-extern *ocean-trans-right-table* (pointer float))
(define-extern *ocean-trans-up-table* (pointer float))
(define-extern *ocean-trans-down-table* (pointer float))
(define-extern *ocean-trans-down-left-table* (pointer float))
(define-extern *ocean-trans-down-right-table* (pointer float))
(define-extern *ocean-trans-up-right-table* (pointer float))
(define-extern *ocean-trans-up-left-table* (pointer float))
(define-extern *ocean-trans-corner-table* (inline-array vector4w-2))
(define-extern *ocean-trans-strip-array* (pointer float)) ;; TODO this should probably be a ocean-trans-strip-array ?
(define-extern *ocean-trans-st-table* (inline-array vector))


;; ----------------------
;; File - ocean-tables
;; Source Path - engine/gfx/ocean/ocean-tables.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *ocean-spheres-village1* ocean-spheres)
(define-extern *ocean-colors-village1* ocean-colors)
(define-extern *ocean-near-indices-village1* ocean-near-indices)
(define-extern *ocean-trans-indices-village1* ocean-trans-indices)
(define-extern *ocean-mid-indices-village1* ocean-mid-indices)
(define-extern *ocean-mid-masks-village1* ocean-mid-masks)
(define-extern *ocean-spheres-village2* ocean-spheres)
(define-extern *ocean-colors-village2* ocean-colors)
(define-extern *ocean-near-indices-village2* ocean-near-indices)
(define-extern *ocean-trans-indices-village2* ocean-trans-indices)
(define-extern *ocean-mid-indices-village2* ocean-mid-indices)
(define-extern *ocean-mid-masks-village2* ocean-mid-masks)
(define-extern *ocean-near-indices-sunken* ocean-near-indices)
(define-extern *ocean-trans-indices-sunken* ocean-trans-indices)
(define-extern *ocean-mid-indices-sunken* ocean-mid-indices)
(define-extern *ocean-mid-masks-sunken* ocean-mid-masks)
(define-extern *ocean-map-village1* ocean-map)
(define-extern *ocean-map-village2* ocean-map)
(define-extern *ocean-map-sunken* ocean-map)


;; ----------------------
;; File - ocean-frames
;; Source Path - engine/gfx/ocean/ocean-frames.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *ocean-wave-frames* (pointer uint32))


;; ----------------------
;; File - sky-h
;; Source Path - engine/gfx/sky/sky-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert 0)
   (snapshot2   int32  :offset-assert 4)
   (morph-start float  :offset-assert 8)
   (morph-end   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sky-color-day (structure)
  ((hour sky-color-hour 24 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype sky-circle-data (structure)
  ((data vector 17 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert 0)
   (pos            vector  :inline :offset 0)
   (r-sun          float           :offset 16)
   (r-halo         float           :offset 20)
   (r-aurora       float           :offset 24)
   (c-sun-start    rgba            :offset 32)
   (c-sun-end      rgba            :offset 48)
   (c-halo-start   rgba            :offset 36)
   (c-halo-end     rgba            :offset 52)
   (c-aurora-start rgba            :offset 40)
   (c-aurora-end   rgba            :offset 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert 0)
   (pos   vector  :inline :offset 0)
   (scale vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert 0)
   (tilt      float  :offset-assert 4)
   (rise      float  :offset-assert 8)
   (dist      float  :offset-assert 12)
   (min-halo  float  :offset-assert 16)
   (max-halo  float  :offset-assert 20)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype sky-upload-data (basic)
  ((circle sky-circle-data :inline :offset-assert 16)
   (sun    sky-sun-data  2 :inline :offset-assert 288)
   (moon   sky-moon-data   :inline :offset-assert 416)
   (data   uint128         27      :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

(deftype sky-parms (basic)
  ;; check - the alignment on some of these.
  ((orbit             sky-orbit 3     :inline :offset-assert 4)
   (upload-data       sky-upload-data :inline :offset-assert 112)
   (sun-lights        light-group     :inline :offset-assert 560)
   (moon-lights       light-group     :inline :offset-assert 752)
   (default-lights    light-group     :inline :offset-assert 944)
   (default-vu-lights vu-lights       :inline :offset-assert 1136)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x4e0
  :flag-assert         #x9000004e0
  )

(deftype sky-tng-data (basic)
  ((giftag-base  gs-gif-tag :inline  :offset-assert 16);; changed
   (giftag-roof  gs-gif-tag   :inline :offset-assert 32)
   (giftag-ocean gs-gif-tag   :inline :offset-assert 48)
   (fog          vector  :inline :offset-assert 64)
   (sky          uint32  8       :offset-assert 80)
   (time         float           :offset-assert 112)
   (off-s-0      uint16          :offset-assert 116)
   (off-t-0      uint16          :offset-assert 118)
   (off-s-1      uint16          :offset-assert 120)
   (off-t-1      uint16          :offset-assert 122)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype sky-work (structure)
  ((adgif-tmpl dma-gif-packet :inline :offset-assert 0)
   (draw-tmpl  dma-gif-packet :inline :offset-assert 32)
   (blend-tmpl dma-gif-packet :inline :offset-assert 64)
   (sky-data   qword 5 :inline               :offset-assert 96)
   (cloud-data qword 5 :inline               :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; - Symbols

(define-extern *sky-parms* sky-parms)
(define-extern *sky-upload-data* sky-upload-data)
(define-extern *sky-drawn* symbol)
(define-extern *cloud-drawn* symbol)


;; ----------------------
;; File - mood-h
;; Source Path - engine/gfx/mood-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert 0)
   (fog-dists   vector :inline :offset-assert 16)
   (fog-start   meters         :offset 16)
   (fog-end     meters         :offset 20)
   (fog-max     float          :offset 24)
   (fog-min     float          :offset 28)
   (erase-color vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype mood-fog-table (structure)
  ((data mood-fog 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype mood-lights (structure)
  ((direction vector :inline :offset-assert 0)
   (lgt-color vector :inline :offset-assert 16)
   (prt-color vector :inline :offset-assert 32)
   (amb-color vector :inline :offset-assert 48)
   (shadow    vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype mood-lights-table (structure)
  ((data mood-lights 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

(deftype mood-sun (structure)
  ((sun-color vector :inline :offset-assert 0)
   (env-color vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype mood-sun-table (structure)
  ((data mood-sun 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype mood-context (basic)
  ((mood-fog-table       mood-fog-table            :offset-assert 4)
   (mood-lights-table    mood-lights-table         :offset-assert 8)
   (mood-sun-table       mood-sun-table            :offset-assert 12)
   (fog-interp           sky-color-day             :offset-assert 16)
   (palette-interp       sky-color-day             :offset-assert 20)
   (sky-texture-interp   sky-color-day             :offset-assert 24)
   (current-fog          mood-fog          :inline :offset-assert 32)
   (current-sun          mood-sun          :inline :offset-assert 80)
   (current-prt-color    vector            :inline :offset-assert 112)
   (current-shadow       vector            :inline :offset-assert 128)
   (current-shadow-color vector            :inline :offset-assert 144)
   (light-group          light-group     8 :inline :offset-assert 160)
   (times                vector  8 :inline         :offset-assert 1696)
   (sky-times            float           8         :offset-assert 1824)
   (itimes               vector4w        4 :inline :offset-assert 1856)
   (state                uint8             16      :offset-assert 1920)
   (num-stars            float                     :offset-assert 1936)
   (some-byte            uint8                     :offset 1939) ;; cant cast on update-mood-lavatube
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x794
  :flag-assert         #x900000794
  )


;; ----------------------
;; File - time-of-day-h
;; Source Path - engine/gfx/time-of-day-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype palette-fade-control (structure)
  ((trans      vector :inline :offset-assert 0)
   (fade       float          :offset-assert 16)
   (actor-dist float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype palette-fade-controls (basic)
  ((control palette-fade-control 8 :inline :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x110
  :flag-assert         #xb00000110
  (:methods
    (reset! (_type_) symbol 9)
    (set-fade! (_type_ int float float vector) object 10) ; returns float or error string
    )
  )

(declare-type sparticle-launch-control basic)
(deftype time-of-day-proc (process)
  ((year            int32  :offset-assert 112)
   (month           int32  :offset-assert 116)
   (week            int32  :offset-assert 120)
   (day             int32  :offset-assert 124)
   (hour            int32  :offset-assert 128)
   (minute          int32  :offset-assert 132)
   (second          int32  :offset-assert 136)
   (frame           int32  :offset-assert 140)
   (time-of-day     float  :offset-assert 144)
   (time-ratio      float  :offset-assert 148)
   (star-count      int32  :offset-assert 152)
   (stars           sparticle-launch-control  :offset-assert 156)
   (sun-count       int32  :offset-assert 160)
   (sun             sparticle-launch-control  :offset-assert 164)
   (green-sun-count int32  :offset-assert 168)
   (green-sun       sparticle-launch-control  :offset-assert 172)
   (moon-count      int32  :offset-assert 176)
   (moon            sparticle-launch-control  :offset-assert 180)
   )
  :heap-base #x50
  :method-count-assert 14
  :size-assert         #xb8
  :flag-assert         #xe005000b8
  (:states
    time-of-day-tick)
  )

(deftype time-of-day-palette (basic)
  ((width  int32     :offset-assert 4)
   (height int32     :offset-assert 8)
   (pad    int32     :offset-assert 12)
   (data   int32 1 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype time-of-day-context (basic)
  ((active-count         uint32                :offset-assert 4)
   (interp               float                 :offset-assert 8)
   (current-interp       float                 :offset-assert 12)
   (moods                mood-context 2        :offset-assert 16)
   (current-fog          mood-fog      :inline :offset-assert 32)
   (current-sun          mood-sun      :inline :offset-assert 80)
   (current-prt-color    vector        :inline :offset-assert 112)
   (current-shadow       vector        :inline :offset-assert 128)
   (current-shadow-color vector        :inline :offset-assert 144)
   (light-group          light-group 9 :inline :offset-assert 160)
   (title-light-group    light-group   :inline :offset-assert 1888)
   (time                 float                 :offset-assert 2080)
   (target-interp        float                 :offset-assert 2084)
   (erase-color          rgba                  :offset-assert 2088)
   (num-stars            float                 :offset-assert 2092)
   (light-masks-0        uint8       2         :offset-assert 2096)
   (light-masks-1        uint8       2         :offset-assert 2098)
   (light-interp         float       2         :offset-assert 2100)
   (sky                  symbol                 :offset-assert 2108)
   (sun-fade             float                 :offset-assert 2112)
   (title-updated        symbol                :offset-assert 2116)
   )
  :method-count-assert 9
  :size-assert         #x848
  :flag-assert         #x900000848
  )

(deftype time-of-day-dma (structure)
  ((outa  uint32 256 :offset-assert 0)
   (outb  uint32 256 :offset-assert 1024)
   (banka uint32 256 :offset-assert 2048)
   (bankb uint32 256 :offset-assert 3072)
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

;; - Symbols

(define-extern *palette-fade-controls* palette-fade-controls)
(define-extern *time-of-day-mode* int)
(define-extern *time-of-day-context* time-of-day-context)


;; ----------------------
;; File - art-h
;; Source Path - engine/data/art-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype joint-anim (basic)
  ((name   string :offset-assert 4)
   (number int16  :offset-assert 8)
   (length int16  :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-matrix (joint-anim)
  ((data  matrix :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype joint-anim-transformq (joint-anim)
  ((data  transformq :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype joint-anim-drawable (joint-anim)
  ((data   drawable :dynamic :offset-assert 12) ;; guess
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-compressed (joint-anim)
  ((data  uint32 :dynamic :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-frame (structure)
  ((matrices matrix 2 :inline :offset-assert 0)
   (data     matrix :inline   :dynamic :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  (:methods
    (new (symbol type int) _type_ 0)
    )
  )

(deftype joint-anim-compressed-hdr (structure)
  ((control-bits uint32 14  :offset-assert 0)
   (num-joints   uint32     :offset-assert 56)
   (matrix-bits  uint32     :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype joint-anim-compressed-fixed (structure)
  ((hdr       joint-anim-compressed-hdr :inline :offset-assert 0)
   (offset-64 uint32                            :offset-assert 64)
   (offset-32 uint32                            :offset-assert 68)
   (offset-16 uint32                            :offset-assert 72)
   (reserved  uint32                            :offset-assert 76)
   (data      vector                133 :inline :offset-assert 80) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x8a0
  :flag-assert         #x9000008a0
  )

(deftype joint-anim-compressed-frame (structure)
  ((offset-64 uint32      :offset-assert 0)
   (offset-32 uint32      :offset-assert 4)
   (offset-16 uint32      :offset-assert 8)
   (reserved  uint32      :offset-assert 12)
   (data      vector 133 :inline :offset-assert 16) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x860
  :flag-assert         #x900000860
  )

(deftype joint-anim-compressed-control (structure)
  ((num-frames uint32                        :offset-assert 0)
   (fixed-qwc  uint32                        :offset-assert 4)
   (frame-qwc  uint32                        :offset-assert 8)
   (fixed      joint-anim-compressed-fixed   :offset-assert 12)
   (data       joint-anim-compressed-frame 1 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype art (basic)
  ((name   string    :offset 8)
   (length int32     :offset-assert 12)
   (extra  res-lump  :offset-assert 16) ; possible types: [res-lump]
                                      ; this field is very strange
   )
  :method-count-assert 13
  :size-assert         #x14
  :flag-assert         #xd00000014
  (:methods
    (login (_type_) _type_ 9)
    (lookup-art (_type_ string type) joint 10) ;; can also be art-joint-anim
    (lookup-idx-of-art (_type_ string type) int 11)
    (needs-link? (_type_) symbol 12)
    )
  )

(deftype art-element (art)
  ((pad uint8 12))
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  )

(deftype art-mesh-anim (art-element)
  ((data basic :dynamic))
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  )

(declare-type merc-eye-anim-block structure)
(deftype art-joint-anim (art-element)
  ;; figured out manually from custom inspect.
  ((eye-anim-data merc-eye-anim-block :offset 4) ;; no clue. used in mem-usage and merc-eye-anim
   (speed float :offset 20)
   (artist-base float :offset 24)
   (artist-step float :offset 28)
   (master-art-group-name string :offset 32)
   (master-art-group-index int32 :offset 36)
   (blerc-data (pointer uint8) :offset 40) ;; todo, this is probably something else
   (frames joint-anim-compressed-control :offset 44)
   (data joint-anim-compressed :dynamic :offset-assert 48)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  )

(deftype art-group (art)
  ((info  file-info    :offset 4)
   (data  art-element  :dynamic :offset 32) ;; might just be art?
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (link-art! (_type_) art-group 13)
    (unlink-art! (_type_) int 14)
    )
  )

(deftype art-mesh-geo (art-element)
  ((data  basic  :dynamic :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  )

(deftype art-joint-geo (art-element)
  ((data  joint  :dynamic :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  )

(deftype skeleton-group (basic)
  ((art-group-name string          :offset-assert 4)
   (jgeo           int32           :offset-assert 8)
   (janim          int32           :offset-assert 12)
   (bounds         vector  :inline :offset-assert 16)
   (radius         meters          :offset 28)
   (mgeo           int16 4         :offset-assert 32)
   (max-lod        int32           :offset-assert 40)
   (lod-dist       float   4       :offset-assert 44)
   (longest-edge   meters          :offset-assert 60)
   (texture-level  int8            :offset-assert 64)
   (version        int8            :offset-assert 65)
   (shadow         int8            :offset-assert 66)
   (sort           int8            :offset-assert 67)
   (_pad uint8 4) ;; what was here?
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(declare-type merc-ctrl art-element)
(deftype lod-group (structure)
  ((geo  merc-ctrl   :offset-assert 0)
   (dist meters  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype lod-set (structure)
  ((lod     lod-group 4 :inline :offset-assert 0)
   (max-lod int8      :offset-assert 32)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x21
  :flag-assert         #xa00000021
  (:methods
    (setup-lods! (_type_ skeleton-group art-group entity) _type_ 9)
    )
  )

(defenum draw-status
  :type uint8
  :bitfield #t
  (needs-clip 0)          ;; set by engine, determines if object should be clipped
  (hidden 1)              ;; set by user, can disable drawing and animation codes
  (no-anim 2)             ;; set by engine, if there is no active joint animation
  (was-drawn 3)           ;; set by engine, if we were drawn (passed cull checks)
  (no-skeleton-update 4)  ;; set by engine, if our transforms are not valid
  (skip-bones 5)          ;; set by user, skips call to draw-bones but does everything else
  (do-not-check-distance 6) ;; set by user, ignore in finding closest object for texture calcs
  (has-joint-channels 7)    ;; set by engine, if the object has joint channels.
  )

(defenum draw-effect
  :type uint8
  (drweff0 0)
  (drweff1 1)
  (drweff2 2)
  (title 3)
  (drweff4 4)
  (drweff5 5)
  (drweff6 6)
  (drweff7 7)
  )

(declare-type ripple-control basic)
(declare-type shadow-control basic)
(declare-type shadow-geo art-element)
(declare-type process-drawable process)
(deftype draw-control (basic)
  ((status                   draw-status     :offset-assert 4)
   (matrix-type              uint8           :offset-assert 5)
   (data-format              uint8           :offset-assert 6)
   (global-effect            draw-effect     :offset-assert 7)
   (art-group                art-group       :offset-assert 8)
   (jgeo                     art-joint-geo   :offset-assert 12)
   (mgeo                     merc-ctrl       :offset-assert 16)
   (dma-add-func             (function process-drawable draw-control symbol object none) :offset-assert 20)
   (skeleton                 skeleton        :offset-assert 24) ;; or cspace-array or shadow-control
   (lod-set                  lod-set :inline :offset-assert 28)
   (lod                      lod-group 4 :inline :offset 28)
   (max-lod                  int8                :offset 60)
   (force-lod                int8            :offset-assert 61)
   (cur-lod                  int8            :offset-assert 62)
   (desired-lod              int8            :offset-assert 63)
   (ripple                   ripple-control  :offset-assert 64)
   (longest-edge             meters          :offset-assert 68)
   (longest-edge?            uint32          :offset 68)
   (light-index              uint8           :offset-assert 72)
   (dummy                    uint8 2         :offset-assert 73)
   (death-draw-overlap       uint8           :offset-assert 75)
   (death-timer              uint8           :offset-assert 76)
   (death-timer-org          uint8           :offset-assert 77)
   (death-vertex-skip        uint16          :offset-assert 78)
   (death-effect             uint32          :offset-assert 80)
   (sink-group               dma-foreground-sink-group :offset-assert 84) ;; dma-foreground-sink-group?
   (process                  process         :offset-assert 88)
   (shadow                   shadow-geo           :offset-assert 92)
   (shadow-ctrl              shadow-control           :offset-assert 96)
   (origin                   vector  :inline :offset-assert 112)
   (bounds                   vector  :inline :offset-assert 128)
   (radius                   meters          :offset 140)
   (color-mult               rgbaf   :inline :offset-assert 144)
   (color-emissive           rgbaf   :inline :offset-assert 160)
   (secondary-interp         float           :offset-assert 176)
   (current-secondary-interp float           :offset-assert 180)
   (shadow-mask              uint8           :offset-assert 184)
   (level-index              uint8           :offset-assert 185)
   (origin-joint-index       uint8           :offset-assert 186)
   (shadow-joint-index       uint8           :offset-assert 187)
   )
  :method-count-assert 12
  :size-assert         #xbc
  :flag-assert         #xc000000bc
  (:methods
    (new (symbol type process art-joint-geo) _type_ 0)
    (get-skeleton-origin (_type_) vector 9)
    (lod-set! (_type_ int) none 10)
    (lods-assign! (_type_ lod-set) none 11)
    )
  )

;; - Functions

(define-extern new-dynamic-structure (function symbol type int structure))


;; ----------------------
;; File - generic-vu1-h
;; Source Path - engine/gfx/generic/generic-vu1-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype pris-mtx (structure)
  ((data   float 32      :offset 0)
   (vector vector 8 :inline       :offset 0)
   (t-mtx  matrix  :inline :score 100 :offset 0)
   (n-mtx  matrix3 :inline :offset 64)
   (scale  vector  :inline :offset 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-pris-mtx-save (structure)
  ((loc-mtx pris-mtx :inline :offset-assert 0)
   (par-mtx pris-mtx :inline :offset-assert 128)
   (dif-mtx pris-mtx :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype generic-constants (structure)
  ((fog         vector :inline :offset-assert 0)
   (adgif       gs-gif-tag  :inline :offset-assert 16) ;; was qword
   (giftag      gs-gif-tag  :inline :offset-assert 32) ;; was qword
   (hvdf-offset vector :inline :offset-assert 48)
   (hmge-scale  vector :inline :offset-assert 64)
   (invh-scale  vector :inline :offset-assert 80)
   (guard       vector :inline :offset-assert 96)
   (adnop       qword  :inline :offset-assert 112)
   (flush       qword  :inline :offset-assert 128)
   (stores      qword  :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )


;; ----------------------
;; File - merc-h
;; Source Path - engine/gfx/merc/merc-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype merc-blend-data (structure) ;; was unknown!
  ((int8-data int8 :dynamic :offset-assert 0)
   )
  )

(deftype ripple-merc-query (inline-array-class)
  ((start-vertex     int32            :offset-assert 16)
   (vertex-skip      int32            :offset-assert 20)
   (vertex-count     int32            :offset-assert 24)
   (current-loc      int32            :offset-assert 28)
   (data             vector :inline :dynamic :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype merc-byte-header (structure)
  ((srcdest-off        uint8      :offset-assert 0)  ; 0x
   (rgba-off           uint8      :offset-assert 1)  ; 0y
   (lump-off           uint8      :offset-assert 2)  ; 0z
   (fp-off             uint8      :offset-assert 3)  ; 0w
   (mat1-cnt           uint8      :offset-assert 4)  ; 1x
   (mat2-cnt           uint8      :offset-assert 5)  ; 1y
   (mat3-cnt           uint8      :offset-assert 6)  ; 1z
   (samecopy-cnt       uint8      :offset-assert 7)  ; 1w
   (crosscopy-cnt      uint8      :offset-assert 8)  ; 2x
   (strip-len          uint8      :offset-assert 9)  ; 2y
   (mm-quadword-fp-off uint8      :offset-assert 10) ; 2z
   (mm-quadword-size   uint8      :offset-assert 11) ; 2w
   (perc-off           uint8      :offset-assert 12) ; 3x
   (mat-slot           uint8 10 :offset-assert 13)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

(deftype merc-fragment (structure)
  ((header merc-byte-header :inline :offset-assert 0)
   (rest   uint8          1       :offset-assert 23)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (login-adgifs (_type_) none 9)
    )
  )

(deftype merc-vtx (structure)
  ((mat-0 uint8  :offset-assert 0)
   (mat-1 uint8  :offset-assert 1)
   (nrm-x uint8  :offset-assert 2)
   (pos-x uint8  :offset-assert 3)
   (dst-0 uint8  :offset-assert 4)
   (dst-1 uint8  :offset-assert 5)
   (nrm-y uint8  :offset-assert 6)
   (pos-y uint8  :offset-assert 7)
   (tex-s uint8  :offset-assert 8)
   (tex-t uint8  :offset-assert 9)
   (nrm-z uint8  :offset-assert 10)
   (pos-z uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype merc-fp-header (structure)
  ((x-add            float  :offset-assert 0)
   (y-add            float  :offset-assert 4)
   (z-add            float  :offset-assert 8)
   (shader-cnt       uint8  :offset-assert 12) ;; only 7 bits used? maybe flag in top bit?
   (kick-info-offset uint8  :offset-assert 13)
   (kick-info-step   uint8  :offset-assert 14)
   (hword-cnt        uint8  :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-mat-dest (structure)
  ((matrix-number uint8  :offset-assert 0)
   (matrix-dest   uint8  :offset-assert 1)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype merc-fragment-control (structure)
  ((unsigned-four-count uint8            :offset-assert 0) ;; (in 32-bit words, not qw)
   (lump-four-count     uint8            :offset-assert 1) ;; merc-vtx
   (fp-qwc              uint8            :offset-assert 2) ;; merc-fp-header
   (mat-xfer-count      uint8            :offset-assert 3)
   (mat-dest-data       merc-mat-dest :inline :dynamic :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count     uint8            :offset-assert 0)
   (nonzero-index-count uint8            :offset-assert 1)
   (bt-index            uint8 :dynamic :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype mei-envmap-tint (structure)
  ((fade0 float   :offset-assert 0)
   (fade1 float   :offset-assert 4)
   (tint  uint32  :offset-assert 8)
   (dummy int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-texture-scroll (structure)
  ((max-dist     float     :offset-assert 0)
   (st-int-scale uint8     :offset-assert 4)
   (time-factor  uint8     :offset-assert 5)
   (scroll-dir   uint8     :offset-assert 6)
   (cached-time  uint8     :offset-assert 7)
   (time-delta   uint8     :offset-assert 8)
   (dummy        uint8 7 :offset-assert 9)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-ripple (structure)
  ((x-base    float  :offset-assert 0)
   (z-base    float  :offset-assert 4)
   (grid-size float  :offset-assert 8)
   (angle     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; implicitly also the start of an array of mei (merc extra info's)
;; this means that an offset of 0 will point to this structure itself
;; an offset of 1 will point to 16 bytes after this structure, etc.
(deftype merc-extra-info (structure)
  ((envmap-tint-offset    uint8      :offset-assert 0)
   (shader-offset         uint8      :offset-assert 1)
   (texture-scroll-offset uint8      :offset-assert 2)
   (ripple-offset         uint8      :offset-assert 3)
   (dummy                 uint8 12 :offset-assert 4) ;; pad size to 16 bytes
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;;effect-bits:
;; 0 - texture scroll
;; 1 - swap with last effect,
;; 2 - ripple

(deftype merc-effect (structure)
  ((frag-geo         merc-fragment          :offset-assert 0) ;; ?
   (frag-ctrl        merc-fragment-control  :offset-assert 4)
   (blend-data       merc-blend-data        :offset-assert 8)
   (blend-ctrl       merc-blend-ctrl        :offset-assert 12)
   (dummy0           uint8                  :offset-assert 16)
   (effect-bits      uint8                  :offset-assert 17)
   (frag-count       uint16                 :offset-assert 18)
   (blend-frag-count uint16                 :offset-assert 20)
   (tri-count        uint16                 :offset-assert 22)
   (dvert-count      uint16                 :offset-assert 24)
   (dummy1           uint8                  :offset-assert 26)
   (envmap-usage     uint8                  :offset-assert 27)
   (extra-info       merc-extra-info        :offset-assert 28)

   ;; added
   (data uint64 4 :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (login-adgifs (_type_) none 9)
    )
  )

(deftype merc-eye-ctrl (structure)
  ((eye-slot      int8                 :offset-assert 0)
   (shader-offset int8                 :offset-assert 1)
   (shader-count  int8                 :offset-assert 2)
   (iris-shader   adgif-shader :inline :offset-assert 16)
   (pupil-shader  adgif-shader :inline :offset-assert 96)
   (lid-shader    adgif-shader :inline :offset-assert 176)
   (shader        adgif-shader 3 :inline :offset 16) ;; moved
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x int8    :offset-assert 0)
   (pupil-trans-y int8    :offset-assert 1)
   (blink         int8    :offset-assert 2)
   (iris-scale    int8    :offset 4)
   (pupil-scale   int8    :offset-assert 5)
   (lid-scale     int8    :offset-assert 6)
   (dword         uint64  :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-eye-anim-block (structure)
  ((max-frame int16            :offset-assert 0)
   (data      merc-eye-anim-frame :inline :dynamic :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-ctrl-header (structure)
  ((xyz-scale              float            :offset-assert 0)
   (st-magic               uint32           :offset-assert 4)
   (st-out-a               uint32           :offset-assert 8)
   (st-out-b               uint32           :offset-assert 12)
   (st-vif-add             uint32           :offset-assert 16)
   (st-int-off             uint16           :offset-assert 20)
   (st-int-scale           uint16           :offset-assert 22)
   (effect-count           uint32           :offset-assert 24) ;; number of effects in merc-ctrl effect
   (blend-target-count     uint32           :offset-assert 28)
   (fragment-count         uint16           :offset-assert 32)
   (tri-count              uint16           :offset-assert 34)
   (matrix-count           uint8            :offset-assert 36)
   (shader-count           uint8            :offset-assert 37)
   (transform-vertex-count uint16           :offset-assert 38)
   (dvert-count            uint16           :offset-assert 40)
   (one-mat-count          uint16           :offset-assert 42)
   (two-mat-count          uint16           :offset-assert 44)
   (two-mat-reuse-count    uint16           :offset-assert 46)
   (three-mat-count        uint16           :offset-assert 48)
   (three-mat-reuse-count  uint16           :offset-assert 50)
   (shader-upload-count    uint8            :offset-assert 52)
   (matrix-upload-count    uint8            :offset-assert 53)
   (same-copy-count        uint16           :offset-assert 54)
   (cross-copy-count       uint16           :offset-assert 56)
   (num-verts              uint16           :offset-assert 58)
   (longest-edge           float            :offset-assert 60)
   (eye-ctrl               merc-eye-ctrl    :offset-assert 64)
   (masks                  uint32       3  :offset-assert 68)
   (dummy-bytes            uint8       48 :offset 32)
   (envmap-tint            uint32           :offset 32)
   (query                  basic            :offset 36)
   (needs-clip             uint8            :offset 40)
   (use-isometric          uint8            :offset 41)
   (use-attached-shader    uint8            :offset 42)
   (display-triangles      uint8            :offset 43)
   (death-vertex-skip      uint16           :offset 44)
   (death-start-vertex     uint16           :offset 46)
   (death-effect           uint32           :offset 48)
   (use-translucent        uint8            :offset 52)
   (display-this-fragment  uint8            :offset 53)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; field xyz-scale is a float printed as hex?
  )

(deftype merc-ctrl (art-element)
  ((num-joints int32                     :offset 20)
   (header     merc-ctrl-header :inline  :offset-assert 32)
   (effect     merc-effect         :inline :dynamic :offset-assert 112)
   )
  :method-count-assert 13
  :size-assert         #x70
  :flag-assert         #xd00000070
  )

(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag   :inline :offset-assert 0) ;; was qword   0
   (ad-gif        gs-gif-tag   :inline :offset-assert 16) ;; was qword  1
   (hvdf-offset   vector  :inline :offset-assert 32)                 ;; 2
   (perspective   uint128 4       :offset-assert 48)                 ;; 3, 4, 5, 6
   (fog           vector  :inline :offset-assert 112)                ;; 7
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype ripple-wave (structure)
  ((scale float  :offset-assert 0)
   (offs  float  :offset-assert 4)
   (xdiv  int16  :offset-assert 8)
   (zdiv  int16  :offset-assert 10)
   (speed float  :offset-assert 12)
   (xmul  float  :offset-assert 16)
   (zmul  float  :offset-assert 20)
   (delta float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype ripple-wave-set (basic)
  ((count        int32     :offset-assert 4)
   (converted    basic     :offset-assert 8)
   (frame-save   uint32    :offset-assert 12)
   (normal-scale float     :offset-assert 16)
   (wave         ripple-wave 4 :inline :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype ripple-control (basic)
  ((global-scale            float  :offset-assert 4)
   (last-frame-scale        float  :offset-assert 8)
   (close-fade-dist         float  :offset-assert 12)
   (far-fade-dist           float  :offset-assert 16)
   (faded-scale             float  :offset-assert 20)
   (individual-normal-scale float  :offset-assert 24)
   (waveform                ripple-wave-set  :offset-assert 28)
   (send-query              symbol  :offset-assert 32) ;; bool
   (query                   ripple-merc-query  :offset-assert 36)
   )
  (:methods
    (new (symbol type) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; - Functions

(define-extern merc-fragment-fp-data (function merc-fragment merc-fp-header))


;; ----------------------
;; File - generic-merc-h
;; Source Path - engine/gfx/merc/generic-merc-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype merc-matrix (structure)
  ((quad   uint128 8 :offset-assert 0)
   (vector vector 8 :inline :offset 0)
   (tag    uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-merc-tag (dma-packet)
  ((next-ptr uint32   :offset 12)
   (size     uint32   :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-merc-ctrl (structure)
  ((tag    generic-merc-tag :inline :offset-assert 0)
   (lights vu-lights        :inline :offset-assert 16)
   (header merc-ctrl-header :inline :offset-assert 128)
   (effect merc-effect      :inline :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )

(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data uint128          11      :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x1a0
  :flag-assert         #x9000001a0
  )

(deftype generic-merc-input (structure)
  ((geo-tag     generic-merc-tag           :inline :offset-assert 0)
   (geo-block   uint8                    1296    :offset-assert 16)
   (byte-header merc-byte-header           :inline :offset 16)
   (matrix      merc-matrix       9    :inline   :offset-assert 1312)
   (control     generic-merc-ctrl-with-sfx :inline :offset-assert 2464)
   (end-tag     generic-merc-tag           :inline :offset-assert 2880)
   (shader      adgif-shader               :inline :offset-assert 2896)
   )
  :method-count-assert 9
  :size-assert         #xba0
  :flag-assert         #x900000ba0
  )

(deftype generic-merc-output (structure)
  ((info             gsf-info   :inline :offset-assert 0)
   (header           gsf-header :inline :offset-assert 16)
   (index-kick-table uint16     80      :offset-assert 32)
   (index-table      uint8      160     :offset 32)
   (inverse-table    uint8      256     :offset-assert 192)
   (vertex-table     gsf-vertex 72 :inline :offset-assert 448)
   )
  :method-count-assert 9
  :size-assert         #xac0
  :flag-assert         #x900000ac0
  )

(deftype generic-merc-dcache (structure)
  ((output-a    generic-merc-output :inline :offset-assert 0)
   (output-b    generic-merc-output :inline :offset-assert 2752)
   (inv-table-1 uint8               544     :offset-assert 5504)
   (inv-table-7 uint8               544     :offset-assert 6048)
   (inv-safety  uint8               16      :offset-assert 6592)
   (effect-data uint8               1584    :offset-assert 6608)
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype gm-shadow (structure)
  ((perspective                matrix              :inline :offset-assert 0)
   (isometric                  matrix              :inline :offset-assert 64)
   (inv-camera-rot             matrix              :inline :offset-assert 128)
   (envmap-shader              adgif-shader        :inline :offset-assert 192)
   (current-chain              uint32                      :offset-assert 272)
   (next-chain                 uint32                      :offset-assert 276)
   (buf-index                  uint32                      :offset-assert 280)
   (fragment-count             uint32                      :offset-assert 284)
   (write-limit                pointer                     :offset-assert 288)
   (indexed-input-base         generic-merc-input          :offset-assert 292)
   (other-input-base           generic-merc-input          :offset-assert 296)
   (indexed-output-base        generic-merc-output         :offset-assert 300)
   (other-output-base          generic-merc-output         :offset-assert 304)
   (p-input                    uint32                      :offset-assert 308)
   (gsf-buf                    generic-merc-dcache         :offset-assert 312)
   (p-fheader                  merc-fp-header              :offset-assert 316)
   (mercneric-convert          basic                       :offset-assert 320)
   (generic-prepare-dma-single basic                       :offset-assert 324)
   (generic-prepare-dma-double basic                       :offset-assert 328)
   (generic-light-proc         basic                       :offset-assert 332)
   (generic-envmap-proc        basic                       :offset-assert 336)
   (high-speed-reject          basic                       :offset-assert 340)
   (hsr-xmult                  vector              :inline :offset-assert 352)
   (hsr-ymult                  vector              :inline :offset-assert 368)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype generic-merc-work (structure)
  ((input-a generic-merc-input         :inline :offset-assert 0)
   (input-b generic-merc-input         :inline :offset-assert 2976)
   (ctrl    generic-merc-ctrl-with-sfx :inline :offset-assert 5952)
   (shadow  gm-shadow                  :inline :offset-assert 6368)
   (stack   uint128                    16      :offset-assert 6752)
   )
  :method-count-assert 9
  :size-assert         #x1b60
  :flag-assert         #x900001b60
  )


;; ----------------------
;; File - generic-tie-h
;; Source Path - engine/gfx/tie/generic-tie-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype generic-tie-instance (structure)
  ((matrix-tag  dma-packet :inline :offset-assert 0)
   (matrix-data vector   6 :inline :offset-assert 16)
   (index-tag   dma-packet :inline :offset-assert 112)
   (indices     uint8      224     :offset-assert 128)
   (end-tag     dma-packet :inline :offset-assert 352)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-tie-input (structure)
  ((palette-tag dma-packet :inline :offset-assert 0)
   (palette     rgba       128 :offset-assert 16)
   (model-tag   dma-packet :inline :offset-assert 528)
   (model       vector     146 :inline :offset-assert 544)
   (matrix-tag  dma-packet :inline :offset-assert 2880)
   (matrix-data vector     6 :inline :offset-assert 2896)
   (index-tag   dma-packet :inline :offset-assert 2992)
   (indices     uint8      224     :offset-assert 3008)
   (end-tag     dma-packet :inline :offset-assert 3232)
   )
  :method-count-assert 9
  :size-assert         #xcb0
  :flag-assert         #x900000cb0
  )

(deftype generic-tie-run-control (structure)
  ((skip-bp2    uint8  :offset-assert 0)
   (skip-ips    uint8  :offset-assert 1)
   (gifbuf-skip uint8  :offset-assert 2)
   (strips      uint8  :offset-assert 3)
   (target-bp1  uint8  :offset-assert 4)
   (target-bp2  uint8  :offset-assert 5)
   (target-ip1  uint8  :offset-assert 6)
   (target-ip2  uint8  :offset-assert 7)
   (target-bps  uint8  :offset-assert 8)
   (target-ips  uint8  :offset-assert 9)
   (is-generic  uint8  :offset-assert 10)
   (reserved    uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype generic-tie-base-point (structure)
  ((x    int16     :offset-assert 0)
   (y    int16     :offset-assert 2)
   (z    int16     :offset-assert 4)
   (d0   int16     :offset-assert 6)
   (vtx  uint64    :offset 0)
   (u    int16     :offset-assert 8)
   (v    int16     :offset-assert 10)
   (tex  uint32    :offset 8)
   (w    int16     :offset-assert 12)
   (d1   int16     :offset-assert 14)
   (data uint16  8 :offset 0) ;; moved
   (quad uint128   :offset 0) ;; moved
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-bps (structure)
  ((bp generic-tie-base-point 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype generic-tie-interp-point (structure)
  ((x      int16      :offset-assert 0)
   (y      int16      :offset-assert 2)
   (z      int16      :offset-assert 4)
   (d0     int16      :offset-assert 6)
   (vtx0   uint64     :offset 0)
   (dx     int16      :offset-assert 8)
   (dy     int16      :offset-assert 10)
   (dz     int16      :offset-assert 12)
   (unused int16      :offset-assert 14)
   (vtx1   uint64     :offset 8)
   (u      int16      :offset-assert 16)
   (v      int16      :offset-assert 18)
   (tex    uint32     :offset 16)
   (w      int16      :offset-assert 20)
   (d1     int16      :offset-assert 22)
   (data   uint16  12 :offset 0)
   ;(quad   uint128    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype generic-tie-ips (structure)
  ((ip generic-tie-interp-point 2 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-header (structure)
  ((effect              uint8              :offset-assert 0)
   (interp-table-size   uint8              :offset-assert 1)
   (num-bps             uint8              :offset-assert 2)
   (num-ips             uint8              :offset-assert 3)
   (tint-color          uint32             :offset-assert 4)
   (index-table-offset  uint16             :offset-assert 8)
   (kick-table-offset   uint16             :offset-assert 10)
   (normal-table-offset uint16             :offset-assert 12)
   (interp-table-offset uint16             :offset-assert 14)
   (gsf-header          gsf-header :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype generic-tie-matrix (structure)
  ((matrix matrix :inline :offset-assert 0)
   (morph  vector :inline :offset-assert 64)
   (fog    qword  :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype generic-tie-normal (structure)
  ((x     int8  :offset-assert 0)
   (y     int8  :offset-assert 1)
   (z     int8  :offset-assert 2)
   (dummy int8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-tie-control (structure)
  ((ptr-palette   uint32                   :offset-assert 0)
   (ptr-shaders   uint32                   :offset-assert 4)
   (ptr-runctrl   generic-tie-run-control  :offset-assert 8)
   (ptr-verts     uint32                   :offset-assert 12)
   (ptr-generic   generic-tie-header       :offset-assert 16)
   (ptr-dps       uint32                   :offset-assert 20)
   (ptr-kicks     uint32                   :offset-assert 24)
   (ptr-normals   uint32                   :offset-assert 28)
   (ptr-interp    uint32                   :offset-assert 32)
   (ptr-mtxs      generic-tie-matrix       :offset-assert 36)
   (ptr-cinds     uint32                   :offset-assert 40)
   (next-instance uint32                   :offset-assert 44)
   (next-model    uint32                   :offset-assert 48)
   (next-is-model uint32                   :offset-assert 52)
   (tie-type      uint32                   :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype generic-tie-stats (structure)
  ((num-bps       uint32  :offset-assert 0)
   (num-ips       uint32  :offset-assert 4)
   (num-dps       uint32  :offset-assert 8)
   (num-shaders   uint32  :offset-assert 12)
   (num-models    uint32  :offset-assert 16)
   (num-instances uint32  :offset-assert 20)
   (num-waits     uint32  :offset-assert 24)
   (num-qwc       uint32  :offset-assert 28)
   (max-qwc       uint32  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double basic  :offset-assert 0)
   (generic-envmap-dproc       basic  :offset-assert 4)
   (generic-interp-dproc       basic  :offset-assert 8)
   (generic-no-light-dproc     basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-shadow (structure)
  ((out-buf      gsf-buffer                :offset-assert 0)
   (cur-buf      uint32                    :offset-assert 4)
   (tie-type     int32                     :offset-assert 8)
   (ptr-inst     uint32                    :offset-assert 12)
   (ptr-buf      uint32                    :offset-assert 16)
   (inst-xor     int32                     :offset-assert 20)
   (end-of-chain uint32                    :offset-assert 24)
   (write-limit  uint32                    :offset-assert 28)
   (calls        generic-tie-calls :inline :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-work (structure)
  ((control     generic-tie-control  :inline :offset-assert 0)
   (interp-job  generic-interp-job   :inline :offset-assert 60)
   (shadow      generic-tie-shadow   :inline :offset-assert 76)
   (input-a     generic-tie-input    :inline :offset-assert 128)
   (input-b     generic-tie-input    :inline :offset-assert 3376)
   (inst-buf    generic-tie-instance :inline :offset-assert 6624)
   (palette-buf rgba                 128     :offset-assert 6992)
   )
  :method-count-assert 9
  :size-assert         #x1d50
  :flag-assert         #x900001d50
  )


;; ----------------------
;; File - generic-work-h
;; Source Path - engine/gfx/generic/generic-work-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype generic-input-buffer (structure)
  ((merc generic-merc-work :inline :offset 0)
   (tie  generic-tie-work  :inline :offset 0)
   (data uint128           472     :offset 0) ;; moved
   )
  :method-count-assert 9
  :size-assert         #x1d80
  :flag-assert         #x900001d80
  )

(deftype generic-debug (structure)
  ((locks      uint32  4  :offset-assert 0)
   (timer      uint32  32 :offset-assert 16)
   (count      uint32  32 :offset-assert 144)
   (vps        uint32  32 :offset-assert 272)
   (buffer     int32      :offset-assert 400)
   (start-addr int32      :offset-assert 404)
   (lock       int32      :offset-assert 408)
   )
  :method-count-assert 9
  :size-assert         #x19c
  :flag-assert         #x90000019c
  )

(deftype generic-vu1-header (structure)
  ((matrix  matrix          :inline :offset-assert 0)
   (strgif  generic-gif-tag :inline :offset-assert 64)
   (adnop1  ad-cmd          :inline :offset-assert 80)
   (adnop2  ad-cmd          :inline :offset-assert 96)
   (adcmds  ad-cmd        2 :inline :offset 80) ;; moved
   (dps     uint16                  :offset 92)
   (kickoff uint16                  :offset 108)
   (strips  uint16                  :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-vu1-texbuf (structure)
  ((header generic-vu1-header :inline  :offset-assert 0)
   (shader uint32             :dynamic :offset-assert 112) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-texbuf (structure)
  ((tag    dma-packet         :inline  :offset-assert 0)
   (header generic-vu1-header :inline  :offset-assert 16)
   (shader uint32             :dynamic :offset-assert 128) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-effect-work (structure)
  ((consts   generic-consts  :inline :offset-assert 0)
   (storage  generic-storage :inline :offset-assert 432)
   (storage2 generic-storage :inline :offset-assert 688)
   (lights   vu-lights       :inline :offset-assert 944)
   )
  :method-count-assert 9
  :size-assert         #x420
  :flag-assert         #x900000420
  )

(deftype generic-effect-buffer (structure)
  ((outbuf-0 uint8               3552    :offset-assert 0)
   (work     generic-effect-work :inline :offset-assert 3552)
   (outbuf-1 uint8               3552    :offset-assert 4608)
   )
  :method-count-assert 9
  :size-assert         #x1fe0
  :flag-assert         #x900001fe0
  )

(deftype generic-work (structure)
  ((saves   generic-saves         :inline :offset-assert 0)
   (storage generic-storage       :inline :offset-assert 368)
   (in-buf  generic-input-buffer  :inline :offset-assert 624)
   (fx-buf  generic-effect-buffer :inline :offset-assert 8176)
   )
  :method-count-assert 9
  :size-assert         #x3fd0
  :flag-assert         #x900003fd0
  )

;; - Symbols

(define-extern *generic-debug* generic-debug)


;; ----------------------
;; File - shadow-cpu-h
;; Source Path - engine/gfx/shadow/shadow-cpu-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum shadow-flags
  :bitfield #t
  :type int32
  (shdf00) ;; unused
  (disable-fade)
  (shdf02) ;; only set, never used.
  (shdf03)
  (shdf04) ;; unused
  (disable-draw)
  )

(deftype shadow-settings (structure)
  ((center        vector :inline :offset-assert 0 :do-not-decompile)
   (flags         shadow-flags   :score 100 :offset 12)
   (shadow-dir    vector :inline :offset-assert 16)
   (dist-to-locus float          :offset 28)
   (bot-plane     plane  :inline :offset-assert 32)
   (top-plane     plane  :inline :offset-assert 48)
   (fade-dist     float          :offset-assert 64)
   (fade-start    float          :offset-assert 68)
   (dummy-2       int32          :offset-assert 72)
   (dummy-3       int32          :offset-assert 76)
   (fade-vec      vector :inline :offset 64) ;; added
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shadow-control (basic)
  ((settings shadow-settings :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x60
  :flag-assert         #x1000000060
  (:methods
    (new (symbol type float float float float float) _type_ 0)
    (clear-offset-bit (shadow-control) int 9)
    (set-offset-bit (shadow-control) int 10)
    (set-top-plane-offset (shadow-control float) int 11)
    (set-bottom-plane-offset (shadow-control float) int 12)
    (unused-13 (_type_) none 13)
    (update-direction-from-time-of-day (_type_) none 14)
    (collide-to-find-planes (_type_ vector float float float) none 15)
    )
  )

(deftype shadow-data (structure)
  ((texoffset           vector     :inline :offset-assert 0)
   (texscale            vector     :inline :offset-assert 16)
   (clrs                vector 2   :inline :offset-assert 32)
   (dma-unpack-template dma-packet :inline :offset-assert 64)
   (dma-cnt             dma-tag            :offset-assert 80)
   (vif-nop             vif-tag            :offset-assert 88)
   (vif-unpack-v4-8     vif-tag            :offset-assert 92)
   (pdc                 basic              :offset-assert 96)
   (dist                float              :offset-assert 100)
   (oddeven             uint8              :offset-assert 104)
   (waits               uint32             :offset-assert 108)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype shadow-work (structure)
  ((shadow-data shadow-data :inline :offset-assert 0)
   (inbuf       uint128     600     :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x25f0
  :flag-assert         #x9000025f0
  )

(deftype shadow-run (structure)
  ((first dma-packet  :offset-assert 0)
   (next  (pointer dma-packet)  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype shadow-queue (structure)
  ((num-runs uint32     :offset-assert 0)
   (cur-run  uint32     :offset-assert 4)
   (run      shadow-run 15 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf8
  :flag-assert         #x9000000f8
  )

(deftype shadow-vertex (structure)
  ((x      float  :offset-assert 0)
   (y      float  :offset-assert 4)
   (z      float  :offset-assert 8)
   (weight float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype shadow-matrix-ref (structure)
  ((joint-0 uint8  :offset-assert 0)
   (joint-1 uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; Defined twice, the second definition won?
;; the fields here are wrong and need to be corrected assuming that is the case
;; (deftype shadow-edge (structure)
;;   ((ind-0 uint16  :offset-assert 0)
;;    (ind-1 uint16  :offset-assert 2)
;;    (tri-0 uint16  :offset-assert 4)
;;    (tri-1 uint16  :offset-assert 6)
;;    )
;;   :method-count-assert 9
;;   :size-assert         #x4
;;   :flag-assert         #x900000008
;;   )

(deftype shadow-tri (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (ind-2 uint8  :offset-assert 2)
   (faces uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype shadow-header (structure)
  ((qwc-data         uint32  :offset-assert 0)
   (num-joints       uint32  :offset-assert 4)
   (num-verts        uint16  :offset-assert 8)
   (num-twos         uint16  :offset-assert 10)
   (num-single-tris  uint16  :offset-assert 12)
   (num-single-edges uint16  :offset-assert 14)
   (num-double-tris  uint16  :offset-assert 16)
   (num-double-edges uint16  :offset-assert 18)
   (ofs-verts        uint32  :offset-assert 20)
   (ofs-refs         uint32  :offset-assert 24)
   (ofs-single-tris  uint32  :offset-assert 28)
   (ofs-single-edges uint32  :offset-assert 32)
   (ofs-double-tris  uint32  :offset-assert 36)
   (ofs-double-edges uint32  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype shadow-geo (art-element)
  ((total-size uint32                 :offset-assert 32)
   (header     shadow-header :inline  :offset 32)
   (rest       uint64       :dynamic :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x50
  :flag-assert         #xd00000050
  )

;; - Functions

(define-extern shadow-queue-append (function shadow-queue uint))
(define-extern shadow-queue-reset (function shadow-queue int))

;; - Symbols

(define-extern *shadow-queue* shadow-queue)
(define-extern *shadow* symbol)
(define-extern *shadow-object* symbol)
(define-extern *shadow-debug* symbol)


;; ----------------------
;; File - memcard-h
;; Source Path - engine/ps2/memcard-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype mc-handle (int32)
  (
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype mc-file-info (structure)
  ((present               int32      :offset-assert 0)
   (blind-data            float 16 :offset-assert 4)
   (blind-data-int8       int8 64 :offset 4)
   (level-index           int32      :offset 4)
   (fuel-cell-count       float      :offset 8)
   (money-count           float      :offset 12)
   (buzzer-count          float      :offset 16)
   (completion-percentage float      :offset 20)
   (minute                uint8      :offset 24)
   (hour                  uint8      :offset 25)
   (week                  uint8      :offset 26)
   (day                   uint8      :offset 27)
   (month                 uint8      :offset 28)
   (year                  uint8      :offset 29)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype mc-slot-info (structure)
  ((handle       int32     :offset-assert 0)
   (known        int32     :offset-assert 4)
   (formatted    int32     :offset-assert 8)
   (inited       int32     :offset-assert 12)
   (last-file    int32     :offset-assert 16)
   (mem-required int32     :offset-assert 20)
   (mem-actual   int32     :offset-assert 24)
   (file         mc-file-info 4 :inline :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12c
  :flag-assert         #x90000012c
  )

;; - Functions

(define-extern mc-get-slot-info (function int mc-slot-info none))
(define-extern mc-run (function none))
(define-extern mc-check-result (function int))
(define-extern mc-sync (function int))
(define-extern show-mc-info (function dma-buffer none))

;; - Symbols

(define-extern int32 type)


;; ----------------------
;; File - game-info-h
;; Source Path - engine/game/game-info-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype actor-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype level-buffer-state (structure)
  ((name          symbol :offset-assert 0)
   (display?      symbol :offset-assert 4)
   (force-vis?    symbol :offset-assert 8)
   (force-inside? symbol :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype load-state (basic)
  ((want          level-buffer-state  2 :inline  :offset-assert 4)
   (vis-nick      symbol     :offset-assert 36)
   (command-list  pair       :offset-assert 40)
   (object-name   symbol 256 :offset-assert 44) ;; TODO string
   (object-status basic  256 :offset-assert 1068)
   )
  :method-count-assert 21
  :size-assert         #x82c
  :flag-assert         #x150000082c
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (update! (_type_) int 10)
    (want-levels (_type_ symbol symbol) int 11)
    (want-display-level (_type_ symbol symbol) int 12)
    (want-vis (_type_ symbol) int 13)
    (want-force-vis (_type_ symbol symbol) int 14)
    (execute-command (_type_ pair) none 15)
    (execute-commands-up-to (_type_ float) int 16)
    (backup-load-state-and-set-cmds (_type_ pair) int 17)
    (restore-load-state-and-cleanup (_type_) int 18)
    (restore-load-state (_type_) int 19)
    (set-force-inside! (_type_ symbol symbol) none 20)
    )
  )

(defenum continue-flags
  :type uint32
  :bitfield #t
  (contf00)
  (contf01)
  (warp)
  (demo)
  (intro)
  (sage-intro)
  (sage-demo-convo)
  (title)
  (contf08)
  (contf09)
  (game-start)
  (sage-ecorocks)
  )

(deftype continue-point (basic)
  ((name          string          :offset-assert 4)
   (level         symbol          :offset-assert 8)
   (flags         continue-flags  :offset-assert 12)
   (trans         vector  :inline :offset-assert 16)
   (quat          quaternion  :inline :offset-assert 32)
   (camera-trans  vector  :inline :offset-assert 48)
   (camera-rot    float  9        :offset-assert 64)
   (load-commands pair            :offset-assert 100)
   (vis-nick      symbol          :offset-assert 104)
   (lev0          symbol          :offset-assert 108)
   (disp0         symbol          :offset-assert 112)
   (lev1          symbol          :offset-assert 116)
   (disp1         symbol          :offset-assert 120)
   )
  :method-count-assert 10
  :size-assert         #x7c
  :flag-assert         #xa0000007c
  (:methods
    (debug-draw! (_type_) none 9)
    )
  )

(defenum mc-status-code
  :type uint32
  (busy 0)
  (ok 1)
  (bad-handle 2)
  (format-failed 3)
  (internal-error 4)
  (write-error 5)
  (read-error 6)
  (new-game 7)
  (no-memory 8)
  (no-card 9)
  (no-last 10)
  (no-format 11)
  (no-file 12)
  (no-save 13)
  (no-space 14)
  (bad-version 15)
  (no-process 16)
  (no-auto-save 17)
  )


(declare-type entity-perm structure)
(declare-type game-save basic)
(declare-type entity-perm-array basic)
(deftype game-info (basic)
  ((mode                  symbol     :offset-assert 4)
   (save-name             basic     :offset-assert 8)
   (life                  float     :offset-assert 12)
   (life-max              float     :offset-assert 16)
   (money                 float     :offset-assert 20)
   (money-total           float     :offset-assert 24)
   (money-per-level       uint8  32 :offset-assert 28)
   (deaths-per-level      uint8  32 :offset-assert 60)
   (buzzer-total          float     :offset-assert 92)
   (fuel                  float     :offset-assert 96)
   (perm-list             entity-perm-array     :offset-assert 100)
   (task-perm-list        entity-perm-array     :offset-assert 104)
   (current-continue      continue-point     :offset-assert 108)
   (text-ids-seen         bit-array     :offset-assert 112)
   (level-opened          uint8  32 :offset-assert 116)
   (hint-control          (array level-hint-control)     :offset-assert 148)
   (task-hint-control     (array task-hint-control-group)     :offset-assert 152)
   (total-deaths          int32     :offset-assert 156)
   (continue-deaths       int32     :offset-assert 160)
   (fuel-cell-deaths      int32     :offset-assert 164)
   (game-start-time       time-frame    :offset-assert 168)
   (continue-time         time-frame    :offset-assert 176)
   (death-time            time-frame    :offset-assert 184)
   (hit-time              time-frame    :offset-assert 192)
   (fuel-cell-pickup-time time-frame    :offset-assert 200)
   (fuel-cell-time        (array time-frame)     :offset-assert 208)
   (enter-level-time      (array time-frame)     :offset-assert 212)
   (in-level-time         (array time-frame)     :offset-assert 216)
   (blackout-time         time-frame     :offset-assert 224)
   (letterbox-time        time-frame     :offset-assert 232)
   (hint-play-time        time-frame     :offset-assert 240)
   (display-text-time     time-frame     :offset-assert 248)
   (display-text-handle   handle    :offset-assert 256)
   (death-movie-tick      int32     :offset-assert 264)
   (want-auto-save        symbol     :offset-assert 268)
   (auto-save-proc        handle    :offset-assert 272)
   (auto-save-status      mc-status-code    :offset-assert 280)
   (auto-save-card        int32     :offset-assert 284)
   (auto-save-which       int32     :offset-assert 288)
   (pov-camera-handle     handle    :offset-assert 296)
   (other-camera-handle   handle    :offset-assert 304)
   (death-pos             vector-array     :offset-assert 312)
   (dummy                 basic     :offset-assert 316)
   (auto-save-count       int32     :offset-assert 320)
   )
  :method-count-assert 29
  :size-assert         #x144
  :flag-assert         #x1d00000144
  ;; field dummy is a basic loaded with a signed load
  (:methods
    (initialize! (_type_ symbol game-save string) _type_ 9)
    (adjust (_type_ symbol float handle) float 10)
    (task-complete? (_type_ game-task) symbol 11)
    (lookup-entity-perm-by-aid (_type_ actor-id) entity-perm 12)
    (get-entity-task-perm (_type_ game-task) entity-perm 13)
    (copy-perms-from-level! (_type_ level) none 14)
    (copy-perms-to-level! (_type_ level) none 15)
    (debug-print (_type_ symbol) _type_ 16)
    (get-or-create-continue! (_type_) continue-point 17)
    (get-continue-by-name (_type_ string) continue-point 18)
    (set-continue! (_type_ basic) continue-point 19)
    (buzzer-count (_type_ game-task) int 20)
    (seen-text? (_type_ text-id) symbol 21)
    (mark-text-as-seen (_type_ text-id) none 22)
    (got-buzzer? (_type_ game-task int) symbol 23)
    (save-game! (_type_ game-save string) none 24)
    (load-game! (_type_ game-save) game-save 25)
    (clear-text-seen! (_type_ text-id) none 26)
    (get-death-count (_type_ symbol) int 27)
    (get-health-percent-lost (_type_ symbol) float 28)
    )
  )

;; - Symbols

(define-extern *GAME-bank* game-bank)
(define-extern *game-info* game-info)


;; ----------------------
;; File - wind-h
;; Source Path - engine/gfx/wind-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype wind-vector (structure)
  ((wind-pos vector2w :inline :offset-assert 0)
   (wind-vel vector2w :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype wind-work (basic)
  ((wind-array  vector  64 :inline      :offset-assert 16)
   (wind-normal vector  :inline :offset-assert 1040)
   (wind-temp   vector  :inline :offset-assert 1056)
   (wind-force  float 64      :offset-assert 1072)
   (wind-time   uint32          :offset-assert 1328)
   )
  :method-count-assert 9
  :size-assert         #x534
  :flag-assert         #x900000534
  )

;; - Functions

(define-extern wind-get-hashed-index (function vector int))

;; - Symbols

(define-extern *wind-work* wind-work)
(define-extern *wind-scales* (array uint8))


;; ----------------------
;; File - prototype-h
;; Source Path - engine/gfx/tie/prototype-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype prototype-bucket (basic)
  ((name          string           :offset-assert 4)
   (flags         uint32          :offset-assert 8)
   (in-level      uint16          :offset-assert 12)
   (utextures     uint16          :offset-assert 14)
   (geometry      drawable 4        :offset-assert 16) ;; 15, 20, 24
   (dists         vector  :inline :offset-assert 32)
   (rdists        vector  :inline :offset-assert 48)
   (next          uint32 4        :offset-assert 64)
   (count         uint16 4        :offset-assert 80)
   (near-plane    meters          :offset 32)
   (near-stiff    meters          :offset 36)
   (mid-plane     meters          :offset 40)
   (far-plane     meters          :offset 44)
   (rlength-near  float           :offset 48)
   (rlength-stiff float           :offset 52)
   (rlength-mid   float           :offset 56)
   (stiffness     float           :offset 60)
   (next-clear    uint128         :offset 64)
   (next-clear-1  int32 :offset 64)
   (next-clear-2  int32 :offset 68)
   (next-clear-3  int32 :offset 72)
   (next-clear-4  int32 :offset 76)
   (count-clear   uint64          :offset 80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype prototype-bucket-shrub (prototype-bucket)
  (;; Geometry Array
   ;; - prototype-generic-shrub / shrub-near (drawn with generic)
   ;; - prototype-shrubbery
   ;; - prototype-trans-shrubbery
   ;; - billboard
   (mod-count     uint16  4       :offset-assert 88)
   (last          dma-packet 4       :offset-assert 96)
   (count-clear-qword   uint128         :offset 80)
   (last-clear    uint128         :offset 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype prototype-inline-array-shrub (drawable)
  ((length  int16                     :offset 6)
   (data    prototype-bucket-shrub 1 :inline :offset 32)
   (_pad uint32)
   )
  :method-count-assert 18
  :size-assert         #x94
  :flag-assert         #x1200000094
  )

(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub   :offset-assert 4)
   (wind-vectors                 uint32  :offset-assert 8) ; likely a pointer
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(declare-type drawable-inline-array-collide-fragment drawable-inline-array)
(declare-type prototype-tie drawable)
(deftype prototype-bucket-tie (prototype-bucket)
  ((generic-count       uint16       4        :offset-assert 88)
   (generic-next        uint32       4        :offset-assert 96)
   (frag-count          uint8        4        :offset-assert 112)
   (index-start         uint8        4        :offset-assert 116)
   (base-qw             uint16       4        :offset-assert 120)
   (envmap-rfade        float                 :offset-assert 128)
   (envmap-fade-far     float                 :offset-assert 132)
   (envmap-shader       adgif-shader          :offset-assert 136)
   (collide-frag        drawable-inline-array-collide-fragment                 :offset-assert 140)
   (tie-colors          time-of-day-palette                 :offset-assert 144)
   (data                uint32       :dynamic :offset-assert 148)
   (color-index-qwc     uint32       :dynamic :offset-assert 148)
   (generic-next-clear  uint128               :offset 96)
   (generic-count-clear uint128               :offset 80)
   (geometry-override   prototype-tie 4 :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset 16) ;; NOTE - field added, not 100% positive on the type
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (login (_type_) none 9)
    )
  )

(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie   :offset-assert 4)
   (wind-vectors        uint32  :offset-assert 8) ; likely a pointer
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (error   (pointer drawable-error) :offset 8) ;; - from default-menu::build-instance-list
   (origin       matrix4h :inline :offset-assert 32) ; TODO - this can also be a float, default-menu::lambda_62
   (unknown-vector vector :inline :offset 32) ;; todo, this might not be right.
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )


;; ----------------------
;; File - joint-h
;; Source Path - engine/anim/joint-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type joint-control basic)
(deftype joint-control-channel (structure)
  ((parent           joint-control     :offset-assert 0)
   (command          symbol    :offset-assert 4)
   (frame-interp     float     :offset-assert 8)
   (frame-group      art-joint-anim     :offset-assert 12)
   (frame-num        float     :offset-assert 16)
   (num-func         (function joint-control-channel float float float)  :offset-assert 20)
   (param            float  2  :offset-assert 24)
   (group-sub-index  int16     :offset-assert 32)
   (group-size       int16     :offset-assert 34)
   (dist             meters    :offset-assert 36)
   (eval-time        uint32    :offset-assert 40)
   (inspector-amount float     :offset-assert 44)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (debug-print-frames (_type_) _type_ 9)
    )
  )

(defenum janim-status
  :type uint16
  :bitfield #t
  (inited 0)
  (drawn 1)
  (done 2)
  (blerc 3)
  (skelf04 4)
  (spool 5)
  (blerc-done 6)
  (eye-done 7)
  (eye 8)
  )

(declare-type process-drawable basic)
(declare-type effect-control basic)
(deftype joint-control (basic)
  ((status                  janim-status     :offset-assert 4)
   (allocated-length        int16            :offset-assert 6)
   (root-channel            (inline-array joint-control-channel) :offset 16)
   (blend-index             int32            :offset-assert 20)
   (active-channels         int32            :offset-assert 24)
   (generate-frame-function (function (inline-array vector) int process-drawable int) :offset-assert 28)
   (prebind-function        (function pointer int process-drawable none) :offset-assert 32)
   (postbind-function       (function process-drawable none) :offset-assert 36)
   (effect                  effect-control   :offset-assert 40)
   (channel                 joint-control-channel 3 :inline :offset-assert 48) ;; actually dynamic?
   (frame-group0            art-joint-anim   :offset 60)
   (frame-num0              float            :offset 64)
   (frame-interp0           float            :offset 56)
   (frame-group1            art-joint-anim   :offset 108)
   (frame-num1              float            :offset 112)
   (frame-interp1           float            :offset 104)
   (frame-group2            art-joint-anim   :offset 156)
   (frame-num2              float            :offset 160)
   (frame-interp2           float            :offset 152)
   )
  :method-count-assert 11
  :size-assert         #xc0
  :flag-assert         #xb000000c0
  (:methods
    (new (symbol type int) _type_ 0)
    (current-cycle-distance (_type_) float 9)
    (debug-print-channels (_type_ symbol) int 10)
    )
  )

(deftype matrix-stack (structure)
  ((top  matrix     :offset-assert 0)
   (data matrix 24 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x610
  :flag-assert         #x900000610
  )

(deftype channel-upload-info (structure)
  ((fixed     joint-anim-compressed-fixed  :offset-assert 0)
   (fixed-qwc int32                        :offset-assert 4)
   (frame     joint-anim-compressed-frame  :offset-assert 8)
   (frame-qwc int32                        :offset-assert 12)
   (amount    float                        :offset-assert 16)
   (interp    float                        :offset-assert 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-work (structure)
  ((temp-mtx       matrix                      :inline :offset-assert 0)
   (joint-stack    matrix-stack                :inline :offset-assert 64)
   (fix-jmp-table  (function none)             16      :offset-assert 1616)
   (frm-jmp-table  (function none)             16      :offset-assert 1680)
   (pair-jmp-table (function none)             16      :offset-assert 1744)
   (uploads        channel-upload-info      24 :inline :offset-assert 1808)
   (num-uploads    int32                               :offset-assert 2384)
   (mtx-acc        matrix                    2 :inline :offset-assert 2400)
   (tq-acc         transformq              100 :inline :offset-assert 2528)
   (jacp-hdr       joint-anim-compressed-hdr   :inline :offset-assert 7328)
   (fixed-data     joint-anim-compressed-fixed :inline :offset-assert 7392)
   (frame-data     joint-anim-compressed-frame 2 :inline :offset-assert 9600)
   (flatten-array  float 576     :offset 2400) ;; no clue!
   (flattened      vector 24  :inline    :offset 2400) ;; no clue!
   )
  :method-count-assert 9
  :size-assert         #x3640
  :flag-assert         #x900003640
  )


;; ----------------------
;; File - bones-h
;; Source Path - engine/anim/bones-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype bone-buffer (structure)
  ((joint  joint-anim-compressed-hdr 16 :inline :offset-assert 0) ;; might be something else
   (bone   bone 16 :inline :offset-assert 1024)
   ;(output UNKNOWN 16 :offset-assert 2560) no clue either :-(

   (_pad uint8 #x800)
   )
  :method-count-assert 9
  :size-assert         #x1200
  :flag-assert         #x900001200
  )

(deftype bone-layout (structure)
  ((joint  joint   2 :offset-assert 0)
   (bone   bone    2 :offset-assert 8)
   (data   uint16  8 :offset 0) ;; moved
   (output uint32  2 :offset-assert 16)
   (cache  uint32  2 :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype bone-regs (structure)
  ((joint-ptr (inline-array joint) :offset-assert 0)
   (bone-ptr  (inline-array bone)  :offset-assert 4)
   (num-bones uint32          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype bone-work (structure)
  ((layout     bone-layout :inline :offset-assert 0)
   (bounds     sphere      :inline :offset-assert 32)
   (lights     vu-lights   :inline :offset-assert 48)
   (distance   vector      :inline :offset-assert 160)
   (next-tag   dma-packet  :inline :offset-assert 176)
   (dma-buf    dma-buffer          :offset-assert 192)
   (sink-group dma-foreground-sink-group :offset-assert 196) ;; dma sink
   (next-pris  dma-packet          :offset-assert 200)
   (next-merc  dma-packet          :offset-assert 204)
   (wait-count uint32              :offset-assert 208)
   (in-count   uint32              :offset-assert 212)
   (sp-size    uint32              :offset-assert 216)
   (sp-bufnum  uint32              :offset-assert 220)
   (regs       bone-regs   :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #xec
  :flag-assert         #x9000000ec
  )

(deftype bone-debug (structure)
  ((time-ctr uint32      :offset-assert 0)
   (timing   uint32  360 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5a4
  :flag-assert         #x9000005a4
  )

(deftype bone-memory (structure)
  ((work     bone-work       :inline :offset-assert 0)
   (buffer   bone-buffer  2  :inline :offset-assert 240)
   (dma-list dma-packet      :inline :offset 240) ;; what?
   )
  :method-count-assert 9
  :size-assert         #x24f0
  :flag-assert         #x9000024f0
  )

(deftype merc-globals (structure)
  ((first uint32  :offset-assert 0)
   (next  (pointer uint32)  :offset-assert 4)
   (sink  generic-dma-foreground-sink   :offset-assert 8) ;; dma sink
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype merc-global-array (structure)
  ((count   uint32    :offset-assert 0)
   (globals merc-globals 8 :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype shadow-dma-packet (structure)
  ((tag      generic-merc-tag :inline :offset-assert 0)
   (settings shadow-settings  :inline :offset-assert 16)
   (geo-ref  dma-packet       :inline :offset-assert 96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;; - Functions

(define-extern invalidate-cache-line (function pointer int))

;; - Symbols

(define-extern *merc-globals* merc-globals)


;; ----------------------
;; File - engines
;; Source Path - engine/engine/engines.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

;;;; engine
(define-extern *background-draw-engine* engine)
(define-extern *matrix-engine* (array handle))
(define-extern *camera-engine* engine)
(define-extern *debug-engine* engine)


;; ----------------------
;; File - res-h
;; Source Path - engine/data/res-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype res-tag (uint128)
  ((name        symbol  :offset 0)
   (key-frame   float   :offset 32)
   (elt-type    type    :offset 64)
   (data-offset uint16  :offset 96)
   (elt-count   uint32  :offset 112 :size 15)
   (inlined?    uint8   :offset 127 :size 1) ;; guess.
   )
  :flag-assert #x900000010
  )

(deftype res-lump (basic)
  ((length           int32              :offset-assert 4)
   (allocated-length int32              :offset-assert 8)
   (data-base        pointer            :offset-assert 12)
   (data-top         pointer            :offset-assert 16)
   (data-size        int32              :offset-assert 20)
   (extra            entity-links       :offset-assert 24) ;; NOTE - can be anything it seems - have seen entity-links
   (tag              (pointer res-tag)  :offset-assert 28)
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field extra is a basic loaded with a signed load
  (:methods
    (new (symbol type int int) _type_ 0)
    (get-property-data (_type_ symbol symbol float pointer (pointer res-tag) pointer) pointer :no-virtual 9)
    (get-property-struct (_type_ symbol symbol float structure (pointer res-tag) pointer) structure :no-virtual 10)
    (get-property-value (_type_ symbol symbol float uint128 (pointer res-tag) pointer) uint128 :no-virtual 11)
    (get-property-value-float (_type_ symbol symbol float float (pointer res-tag) pointer) float :no-virtual 12)
    (get-tag-index-data (_type_ int) pointer 13)
    (get-tag-data (_type_ res-tag) pointer 14)
    (allocate-data-memory-for-tag! (_type_ res-tag) res-tag 15)
    (sort! (_type_) _type_ 16)
    (add-data! (_type_ res-tag pointer) res-lump 17)
    (add-32bit-data! (_type_ res-tag object) res-lump 18)
    (lookup-tag-idx (_type_ symbol symbol float) res-tag-pair :no-virtual 19)
    (make-property-data (_type_ float res-tag-pair pointer) pointer 20)
    (get-curve-data! (_type_ curve symbol symbol float) symbol 21)
    )
  )

;; - Symbols

(define-extern *res-key-string* string)


;; ----------------------
;; File - res
;; Source Path - engine/data/res.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3


;; - Symbols

(define-extern *res-static-buf* pointer)
(define-extern uinteger type)


;; ----------------------
;; File - lights
;; Source Path - engine/gfx/lights.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern vu-lights<-light-group! (function vu-lights light-group none))
(define-extern light-slerp (function light light light float light))
(define-extern light-group-slerp (function light-group light-group light-group float light-group))
(define-extern light-group-process! (function vu-lights light-group vector vector none))
(define-extern vu-lights-default! (function vu-lights vu-lights))

;; - Symbols

(define-extern *default-lights* vu-lights)


;; ----------------------
;; File - dynamics-h
;; Source Path - engine/physics/dynamics-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype dynamics (basic)
  ((name           basic          :offset-assert 4)
   (gravity-max    meters         :offset-assert 8)
   (gravity-length meters         :offset-assert 12)
   (gravity        vector :inline :offset-assert 16)
   (gravity-normal vector :inline :offset-assert 32)
   (walk-distance  meters         :offset-assert 48)
   (run-distance   meters         :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

;; - Functions

(define-extern time-to-apex (function float float int))
(define-extern time-to-ground (function float float float int))

;; - Symbols

(define-extern *standard-dynamics* dynamics)


;; ----------------------
;; File - surface-h
;; Source Path - engine/target/surface-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum surface-flags
  :bitfield #t
  :type uint32
  (allow-look-around) ;; allows entering first person with triangle
  (dive)              ;; set on all diving (dive, dive-bottom) surfaces
  (surf02)            ;; unused
  (no-turn-around)    ;; prevent "changed direction" animation from happening

  ;; when jak is on a surface with this flag, the case where jak
  ;; is forced to rotate in the direction he's traveling is
  ;; never taken. It's used on ice (though it is not needed, the turn toward transv
  ;; is disabled by not being in target-walk ever) and also used to prevent
  ;; jak from spinning around when he shouldn't (like if he's knocked back)
  (no-rotate-toward-transv)
  ;; if jak should always be forced to rotate in the direction he's travelling.
  ;; used for the slides and also the warp gate jump
  (always-rotate-toward-transv)

  ;; never set, but prevents jak from jumping (both normal and roll)
  (prevent-jump)

  ;; target is launch jumping (from a blue eco pad)
  (prevent-attacks-during-launch-jump)
  (surf08) ;; never set, prevents various attacks from being possible
  (surf09) ;; another attack prevent
  (allow-edge-grab) ;; if set, and jak is falling, turn on the ledge grab search.
  (jump) ;; set on all jumps, used to prevent "on-grounds" in places
  (attacking) ;; set on all attacks, but not actually used anywhere
  (ducking)   ;; set on all ducks, but not actually used anywhere
  (moving-ground) ;; unused, but would make sense if jak was on something moving
  )

(deftype surface (basic)
  ((name              symbol      :offset-assert 4)
   ;; data went here
   (turnv             float      :offset-assert 8)
   (turnvv            float      :offset-assert 12)
   (tiltv             float      :offset-assert 16)
   (tiltvv            float      :offset-assert 20)
   (transv-max        float      :offset-assert 24)
   (target-speed      float      :offset-assert 28)
   (seek0             float      :offset-assert 32)
   (seek90            float      :offset-assert 36)
   (seek180           float      :offset-assert 40)
   (fric              float      :offset-assert 44)
   (nonlin-fric-dist  float      :offset-assert 48)
   (slip-factor       float      :offset-assert 52)
   (slide-factor      float      :offset-assert 56)
   (slope-up-factor   float      :offset-assert 60)
   (slope-down-factor float      :offset-assert 64)
   (slope-slip-angle  float      :offset-assert 68)
   (impact-fric       float      :offset-assert 72)
   (bend-factor       float      :offset-assert 76)
   (bend-speed        float      :offset-assert 80)
   (alignv            float      :offset-assert 84)
   (slope-up-traction float      :offset-assert 88)
   (align-speed       float      :offset-assert 92)
   ;; hook went here
   (active-hook       (function none)      :offset 128) ;; from logic-target::flag-setup not 100% sure but seems to pass no args
   (touch-hook        (function none)      :offset-assert 132) ;; from logic-target::flag-setup not 100% sure but seems to pass no args
   (impact-hook       function      :offset-assert 136)
   (mult-hook         (function surface surface surface int none)     :offset-assert 140)
   ;; dataw went here
   (mode              symbol      :offset-assert 144)
   (flags             surface-flags  :offset-assert 148)
   (data              float 30 :offset 8)
   (hook              function 4  :offset 128)
   (dataw             uint32 2  :offset 144)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

;; - Functions

(define-extern calc-terminal-vel (function float float float float))
(define-extern calc-terminal2-vel (function float float float float float))
(define-extern calc-terminal4-vel (function float float float float))
(define-extern surface-interp! (function surface surface surface float surface))
(define-extern surface-mult! (function surface surface surface surface))
(define-extern surface-clamp-speed (function surface surface surface int none))

;; - Symbols

(define-extern *walk-mods* surface)
(define-extern *walk-no-turn-mods* surface)
(define-extern *turn-around-mods* surface)
(define-extern *duck-mods* surface)
(define-extern *duck-attack-mods* surface)
(define-extern *jump-mods* surface)
(define-extern *double-jump-mods* surface)
(define-extern *smack-jump-mods* surface)
(define-extern *high-jump-mods* surface)
(define-extern *launch-jump-mods* surface)
(define-extern *forward-high-jump-mods* surface)
(define-extern *flip-jump-mods* surface)
(define-extern *forward-jump-mods* surface)
(define-extern *forward-pole-jump-mods* surface)
(define-extern *attack-mods* surface)
(define-extern *jump-attack-mods* surface)
(define-extern *uppercut-jump-mods* surface)
(define-extern *run-attack-mods* surface)
(define-extern *wheel-mods* surface)
(define-extern *wheel-flip-mods* surface)
(define-extern *flop-mods* surface)
(define-extern *flop-land-mods* surface)
(define-extern *wade-mods* surface)
(define-extern *swim-mods* surface)
(define-extern *dive-mods* surface)
(define-extern *dive-bottom-mods* surface)
(define-extern *pole-mods* surface)
(define-extern *grab-mods* surface)
(define-extern *edge-grab-mods* surface)
(define-extern *empty-mods* surface)
(define-extern *neutral-mods* surface)
(define-extern *stone-surface* surface)
(define-extern *edge-surface* surface)
(define-extern *wade-surface* surface)
(define-extern *slope-surface* surface)
(define-extern *quicksand-surface* surface)
(define-extern *tar-surface* surface)
(define-extern *grass-surface* surface)
(define-extern *ice-surface* surface)
(define-extern *tread-surface* surface)
(define-extern *standard-ground-surface* surface)
(define-extern *swim-surface* surface)


;; ----------------------
;; File - pat-h
;; Source Path - engine/target/pat-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype pat-surface (uint32)
  ((skip          uint8        :offset   0 :size   3 :do-not-decompile)
   (mode          pat-mode     :offset   3 :size   3)
   (material      pat-material :offset   6 :size   6)
   (camera        uint8        :offset  12 :size   2 :do-not-decompile)
   (event         pat-event    :offset  14 :size   6)
   (noentity      uint8        :offset   0 :size   1)
   (nocamera      uint8        :offset   1 :size   1)
   (noedge        uint8        :offset   2 :size   1)
   (nolineofsight uint8        :offset  12 :size   1)

   ;; this is not in the inspect, but appears to be set.
   (unknown-bit uint8 :offset 15 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype pat-mode-info (structure)
  ((name         string  :offset-assert 0)
   (wall-angle   float   :offset-assert 4)
   (color        rgba    :offset-assert 8)
   (hilite-color rgba    :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern pat-material->string (function pat-surface string))
(define-extern pat-mode->string (function pat-surface string))
(define-extern pat-event->string (function pat-surface string))

;; - Symbols

(define-extern *pat-mode-info* (inline-array pat-mode-info))


;; ----------------------
;; File - fact-h
;; Source Path - engine/game/fact-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum fact-options
  :bitfield #t
  :type uint64
  (vent-blocked 0)
  (has-power-cell 1) ;; should spawn power cell on death
  (vent-valve 2)
  (wrap-phase 3)     ;; phase should wrap from 1 to 0 instead of mirroring.
  (fop4 4)           ;; unused?
  (fop5 5)           ;; wait-for-cue after death? nothing sets this.
  (instant-collect 6) ;; set on balloon lurker, puffer
  (skip-jump-anim 7) ;; skips fuel cell "jump" animation
  (can-collect 8)
  (fade 9)
  (large 10)
  (require-zoomer 11) ;; iron, but need to be riding zoomer to break it. only used in demo?
  (powerup 12)
  ;; strengths
  (touch 13)
  (normal-attack 14)
  (strong-attack 15)
  (indestructible 16)
  (fop17 17)         ;; engine doesn't check it, set on babak near jungleb exit and in robot room.
  (eco-blocked 18)
  (respawn 19)
  )

(deftype fact-bank (basic)
  ((eco-level-max        float     :offset-assert 4)
   (eco-single-inc       float     :offset-assert 8)
   (eco-full-inc         float     :offset-assert 12)
   (eco-single-timeout   seconds   :offset-assert 16)
   (eco-full-timeout     seconds   :offset-assert 24)
   (dummy                seconds   :offset-assert 32)
   (health-max-default   float     :offset-assert 40)
   (health-single-inc    float     :offset-assert 44)
   (eco-pill-max-default float     :offset-assert 48)
   (health-small-inc     float     :offset-assert 52)
   (buzzer-max-default   float     :offset-assert 56)
   (buzzer-single-inc    float     :offset-assert 60)
   (suck-bounce-dist     meters    :offset-assert 64)
   (suck-suck-dist       meters    :offset-assert 68)
   (default-pill-inc     float     :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype fact-info (basic)
  ((process             process-drawable :offset-assert 4)
   (pickup-type         pickup-type   :offset-assert 8)
   (pickup-amount       float   :offset-assert 12)
   (pickup-spawn-amount float   :offset-assert 16)
   (options             fact-options  :offset-assert 24)
   (fade-time           time-frame   :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (new (symbol type process-drawable pickup-type float) _type_ 0)
    (drop-pickup (_type_ symbol process-tree fact-info int) (pointer process) 9)
    (reset! (_type_ symbol) none 10)
    (pickup-collectable! (_type_ pickup-type float handle) float 11)
    )
  )

(deftype fact-info-target (fact-info)
  ((eco-type              pickup-type :offset-assert 40)
   (eco-level             float     :offset-assert 44)
   (eco-pickup-time       time-frame    :offset-assert 48)
   (eco-timeout           seconds   :offset-assert 56)
   (health                float     :offset-assert 64)
   (health-max            float     :offset-assert 68)
   (buzzer                float     :offset-assert 72)
   (buzzer-max            float     :offset-assert 76)
   (eco-pill              float     :offset-assert 80)
   (eco-pill-max          float     :offset-assert 84)
   (health-pickup-time    time-frame    :offset-assert 88)
   (eco-source            handle    :offset-assert 96)
   (eco-source-time       time-frame    :offset-assert 104)
   (money-pickup-time     time-frame    :offset-assert 112)
   (buzzer-pickup-time    time-frame    :offset-assert 120)
   (fuel-cell-pickup-time time-frame    :offset-assert 128)
   (eco-pill-pickup-time  time-frame    :offset-assert 136)
   )
  :method-count-assert 12
  :size-assert         #x90
  :flag-assert         #xc00000090
  (:methods
    (new (symbol type process-drawable pickup-type float) _type_ 0)
    )
  )

(deftype fact-info-enemy (fact-info)
  ((speed               float   :offset-assert 40)
   (idle-distance       meters  :offset-assert 44)
   (notice-top          meters  :offset-assert 48)
   (notice-bottom       meters  :offset-assert 52)
   (cam-horz            meters  :offset-assert 56)
   (cam-vert            meters  :offset-assert 60)
   (cam-notice-dist     meters  :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    (new (symbol type process-drawable pickup-type float) _type_ 0)
    )
  )

;; - Functions

(define-extern pickup-type->string (function pickup-type string))

;; - Symbols

(define-extern *FACT-bank* fact-bank)


;; ----------------------
;; File - aligner-h
;; Source Path - engine/anim/aligner-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum align-flags
  :bitfield #t
  :type uint32
  (disabled) ;; keep object velocity
  )

(defenum align-opts
  :bitfield #t
  :type uint32
  (adjust-x-vel)
  (adjust-y-vel)
  (adjust-xz-vel)
  (keep-other-velocities)
  (adjust-quat) ;; 16
  (alop0)
  (alop1)
  (alop2)
  (alop3)
  (alop4)
  (alop5)
  (no-gravity)
  (ignore-y-if-zero)
  )

(deftype align-control (basic)
  ((flags       align-flags                :offset-assert   4)
   (process     process-drawable           :offset-assert   8)
   (frame-group art-joint-anim             :offset-assert  12)
   (frame-num   float                      :offset-assert  16)
   (matrix      matrix           2 :inline :offset-assert  32)
   (transform   transform        2 :inline :offset-assert 160)
   (delta       transformq       :inline   :offset-assert 256)
   (last-speed  meters                     :offset-assert 304)
   (align       transformq       :inline   :offset        160)
   )
  :method-count-assert 14
  :size-assert         #x134
  :flag-assert         #xe00000134
  (:methods
    (new (symbol type process) _type_ :behavior process-drawable 0)
    (compute-alignment! (_type_) transformq 9)
    (align! (_type_ align-opts float float float) trsqv 10)
    (align-vel-and-quat-only! (_type_ align-opts vector int float float) trsqv 11) ;; 3rd arg is unused
    (first-transform (_type_) transform 12)
    (snd-transform (_type_) transform 13)
    )
  )


;; ----------------------
;; File - game-h
;; Source Path - engine/game/game-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum state-flags
  :bitfield #t
  :type uint32
  (fade-out-particles) ;; set so particle callbacks can fade out before death
  (dangerous)          ;; set on jak if he is "dangerous" (currently attacking)
  (sf02)               ;; never sent, blocks tripping
  (being-attacked)     ;; set when attacked
  (invulnerable)       ;; set from the debug menu
  (timed-invulnerable) ;; after being attacked
  (invuln-powerup)     ;; unused invulnerable mode from powerup
  (do-not-notice)      ;; enemies etc shouldn't notice jak
  (grabbed)            ;; something else has "grabbed" control of jak
  (first-person-mode)  ;; triangle, billy game
  (use-alt-cam-pos)    ;; target-cam-pos should use an alternate position (jumping in warp gate, on to flutflut...)
  (prevent-jump)       ;; target cannot do any jumps
  (prevent-attack)     ;; target cannot do attacks
  (prevent-duck)       ;; can't duck or roll
  (remove-prevents)    ;; when set, removes the previous 3 prevents on the next frame.
  (dying)                ;; set during death anim
  (sf16)                 ;; unused
  (has-saved-position)       ;; is there a saved position?
  (looking-at-enemy)         ;; neck mod active to look at enemy
  (falling-into-pool-of-bad) ;; falling into lava, dark eco, or melt
  (flop-hit-ground)          ;; set when ground pound hit ground
  )

(declare-type nav-control basic)
(declare-type path-control basic)
(declare-type vol-control basic)
(declare-type actor-link-info basic)
(declare-type sparticle-launch-control basic)
(declare-type water-control basic)
(declare-type collide-shape basic)
(declare-type nav-control basic)
(deftype process-drawable (process)
  ((root        trsqv           :offset-assert 112)
   (node-list   cspace-array    :offset-assert 116)
   (draw        draw-control    :offset-assert 120)
   (skel        joint-control   :offset-assert 124)
   (nav         nav-control     :offset-assert 128)
   (align       align-control   :offset-assert 132)
   (path        path-control    :offset-assert 136)
   (vol         vol-control     :offset-assert 140)
   (fact        fact-info       :offset-assert 144)
   (link        actor-link-info   :offset-assert 148)
   (part        sparticle-launch-control   :offset-assert 152)
   (water       water-control   :offset-assert 156)
   (sound       ambient-sound   :offset-assert 160)
   (state-flags state-flags  :offset-assert 164)
   (state-time  time-frame   :offset-assert 168)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  ;; inherited inspect of process
  (:methods
    (initialize-skeleton (_type_ skeleton-group pair) none 14)
    (initialize-skeleton-by-name (_type_ string object) _type_ 15)
    (apply-alignment (_type_ align-opts transformq vector) collide-shape 16)
    (do-joint-math! (_type_) none 17)
    (cleanup-for-death (_type_) none 18)
    (evaluate-joint-control (_type_) none 19)
    )
  (:states
    (process-drawable-art-error string)
    process-drawable-idle)
  )

(deftype process-drawable-reserved (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 63
  :size-assert         #xb0
  :flag-assert         #x3f004000b0
  ;;  not enough basic ops
  (:methods
    (process-drawable-reserved-method-20 () none 20)
    (process-drawable-reserved-method-21 () none 21)
    (process-drawable-reserved-method-22 () none 22)
    (process-drawable-reserved-method-23 () none 23)
    (process-drawable-reserved-method-24 () none 24)
    (process-drawable-reserved-method-25 () none 25)
    (process-drawable-reserved-method-26 () none 26)
    (process-drawable-reserved-method-27 () none 27)
    (process-drawable-reserved-method-28 () none 28)
    (process-drawable-reserved-method-29 () none 29)
    (process-drawable-reserved-method-30 () none 30)
    (process-drawable-reserved-method-31 () none 31)
    (process-drawable-reserved-method-32 () none 32)
    (process-drawable-reserved-method-33 () none 33)
    (process-drawable-reserved-method-34 () none 34)
    (process-drawable-reserved-method-35 () none 35)
    (process-drawable-reserved-method-36 () none 36)
    (process-drawable-reserved-method-37 () none 37)
    (process-drawable-reserved-method-38 () none 38)
    (process-drawable-reserved-method-39 () none 39)
    (process-drawable-reserved-method-40 () none 40)
    (process-drawable-reserved-method-41 () none 41)
    (process-drawable-reserved-method-42 () none 42)
    (process-drawable-reserved-method-43 () none 43)
    (process-drawable-reserved-method-44 () none 44)
    (process-drawable-reserved-method-45 () none 45)
    (process-drawable-reserved-method-46 () none 46)
    (process-drawable-reserved-method-47 () none 47)
    (process-drawable-reserved-method-48 () none 48)
    (process-drawable-reserved-method-49 () none 49)
    (process-drawable-reserved-method-50 () none 50)
    (process-drawable-reserved-method-51 () none 51)
    (process-drawable-reserved-method-52 () none 52)
    (process-drawable-reserved-method-53 () none 53)
    (process-drawable-reserved-method-54 () none 54)
    (process-drawable-reserved-method-55 () none 55)
    (process-drawable-reserved-method-56 () none 56)
    (process-drawable-reserved-method-57 () none 57)
    (process-drawable-reserved-method-58 () none 58)
    (process-drawable-reserved-method-59 () none 59)
    (process-drawable-reserved-method-60 () none 60)
    (process-drawable-reserved-method-61 () none 61)
    (process-drawable-reserved-method-62 () none 62)
    )
  )

(defenum attack-mask
  :bitfield #t
  :type uint32
  (trans)
  (vector)
  (intersection)
  (attacker)
  (invinc-time)
  (mode)
  (shove-back)
  (shove-up)
  (speed)
  (dist)
  (control)
  (angle)
  (rotate-to)
  (atki13)
  )

(deftype attack-info (structure)
  ((trans        vector :inline :offset-assert 0)
   (vector       vector :inline :offset-assert 16)
   (intersection vector :inline :offset-assert 32)
   (attacker     handle         :offset-assert 48)
   (invinc-time  time-frame     :offset-assert 56)
   (mask         attack-mask    :offset-assert 64)
   (mode         symbol         :offset-assert 68)
   (shove-back   meters         :offset-assert 72)
   (shove-up     meters         :offset-assert 76)
   (speed        meters         :offset-assert 80)
   (dist         meters         :offset-assert 84)
   (control      float          :offset-assert 88)
   (angle        symbol         :offset-assert 92)
   (rotate-to    degrees        :offset-assert 96)
   (prev-state   state          :offset-assert 100)
   )
  :method-count-assert 10
  :size-assert         #x68
  :flag-assert         #xa00000068
  (:methods
    (combine! (_type_ attack-info) none 9)
    )
  )

(deftype ground-tween-info (structure)
  ((chan  uint8   3 :offset-assert 0)
   (blend float   3 :offset-assert 4)
   (group uint32  5 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; - Symbols

(define-extern *global-attack-id* int)


;; ----------------------
;; File - generic-obs-h
;; Source Path - engine/game/generic-obs-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type joint-mod basic)
(deftype manipy (process-drawable)
  ((new-trans-hook       (function none)        :offset-assert 176) ;; TODO - no idea on these types
   (cur-trans-hook       (function none)        :offset-assert 180) ;; TODO - no idea on these types
   (cur-event-hook       (function none)        :offset-assert 184) ;; TODO - no idea on these types
   (new-joint-anim       art-joint-anim  :offset-assert 188)
   (new-joint-anim-blend uint64          :offset-assert 192)
   (anim-mode            symbol          :offset-assert 200)
   (cur-grab-handle      handle          :offset-assert 208)
   (cur-target-handle    handle          :offset-assert 216)
   (old-grab-pos         vector  :inline :offset-assert 224)
   (joint                joint-mod 4 :offset-assert 240)
   (new-post-hook        (function none)        :offset-assert 256) ;; TODO - no idea on these types
   (cur-post-hook        (function none)        :offset-assert 260) ;; TODO - no idea on these types
   (clone-copy-trans     symbol          :offset-assert 264)
   (shadow-backup        basic           :offset-assert 268)
   (draw?                symbol          :offset-assert 272)
   )
  :heap-base #xb0
  :method-count-assert 20
  :size-assert         #x114
  :flag-assert         #x1400b00114
  (:states
    manipy-idle)
  )

(declare-type sparticle-launch-group basic)
(deftype part-spawner (process-drawable)
  ((mode         (pointer sparticle-launch-group)         :offset-assert 176) ;; takes a part-spawner as it's first arg in method 9
   (enable       symbol         :offset-assert 180)
   (radius       meters         :offset-assert 184)
   (world-sphere sphere :inline :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15006000d0
  (:methods
    (is-visible? (_type_) symbol 20)
    )
  (:states
    part-spawner-active)
  )

(deftype part-tracker (process)
  ((root             trsqv               :offset-assert 112)
   (part             sparticle-launch-control :offset-assert 116)
   (target           handle              :offset-assert 120)
   (callback         (function part-tracker vector)               :offset-assert 128)
   (linger-callback  (function part-tracker vector)               :offset-assert 132)
   (duration         time-frame              :offset-assert 136)
   (linger-duration  time-frame              :offset-assert 144)
   (start-time       time-frame              :offset-assert 152)
   (offset           vector     :inline  :offset-assert 160)
   (userdata         uint64              :offset-assert 176)
   (user-time        time-frame   2           :offset-assert 184)
   (user-vector      vector  2  :inline  :offset-assert 208)
   (user-handle      uint32  2           :offset-assert 240)
   )
  :heap-base #x90
  :method-count-assert 14
  :size-assert         #xf8
  :flag-assert         #xe009000f8
  (:states
    part-tracker-process)
  )

(deftype camera-tracker (process)
  ((grab-target     handle  :offset 120)
   (grab-event      symbol   :offset-assert 128)
   (release-event   symbol   :offset-assert 132)
   (old-global-mask process-mask  :offset-assert 136)
   (old-self-mask   process-mask  :offset-assert 140)
   (old-parent-mask process-mask  :offset-assert 144)
   (look-at-target  handle  :offset-assert 152)
   (pov-target      handle  :offset-assert 160)
   (work-process    handle  :offset-assert 168)
   (anim-process    handle  :offset-assert 176)
   (start-time      time-frame   :offset-assert 184)
   (callback        basic   :offset-assert 192)
   (userdata        basic   :offset-assert 196)
   (message         basic   :offset-assert 200)
   (border-value    basic   :offset-assert 204)
   (mask-to-clear   process-mask  :offset-assert 208)
   (script          pair   :offset-assert 212)
   (script-line     pair   :offset-assert 216)
   (script-func     (function none)   :offset-assert 220) ;; TODO - unconfirmed, see generic-obs::lambda::33
   )
  :heap-base #x70
  :method-count-assert 15
  :size-assert         #xe0
  :flag-assert         #xf007000e0
  (:methods
    (eval (_type_ pair) process 14)
    )
  (:states
    camera-tracker-process)
  )

(declare-type collide-shape-moving basic)
(deftype touch-tracker (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (duration     time-frame  :offset-assert 176)
   (target       handle  :offset-assert 184)
   (event        symbol   :offset-assert 192)
   (run-function (function object)   :offset-assert 196)
   (callback     (function touch-tracker none)   :offset-assert 200)
   (event-mode   basic   :offset-assert 204) ;; not a basic!
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14006000d0
  (:states
    touch-tracker-idle)
  )

(deftype swingpole (process)
  ((root        trsq           :offset-assert 112)
   (dir         vector :inline :offset-assert 128)
   (range       meters         :offset-assert 144)
   (edge-length meters         :offset-assert 148)
   )
  :heap-base #x30
  :method-count-assert 14
  :size-assert         #x98
  :flag-assert         #xe00300098
  (:states
    swingpole-stance
    swingpole-active)
  )

(deftype gui-query (structure)
  ((x-position        int32  :offset-assert 0)
   (y-position        int32  :offset-assert 4)
   (message           string  :offset-assert 8)
   (decision          symbol  :offset-assert 12)
   (only-allow-cancel symbol  :offset-assert 16)
   (no-msg            string  :offset-assert 20)
   (message-space     int32  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (init! (_type_ string int int int symbol string) none 9)
    (get-response (_type_) symbol 10)
    )
  )

(deftype othercam (process)
  ((hand              handle         :offset-assert 112)
   (old-global-mask   process-mask   :offset-assert 120)
   (mask-to-clear     process-mask   :offset-assert 124)
   (cam-joint-index   int32          :offset-assert 128)
   (old-pos           vector :inline :offset-assert 144)
   (old-mat-z         vector :inline :offset-assert 160)
   (had-valid-frame   basic          :offset-assert 176)
   (border-value      basic          :offset-assert 180)
   (die?              symbol         :offset-assert 184)
   (survive-anim-end? symbol         :offset-assert 188)
   (spooling?         symbol         :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 14
  :size-assert         #xc4
  :flag-assert         #xe006000c4
  (:states
    othercam-running)
  )

(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  (:methods
    (die () _type_ :state 14)
    )
  )


;; ----------------------
;; File - pov-camera-h
;; Source Path - engine/camera/pov-camera-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum pov-camera-flag
  :bitfield #t
  :type int32
  (notify-of-abort 0)
  (allow-abort 1)
  (inherit-orientation 2)
  )

(deftype pov-camera (process-drawable)
  ((cspace-array        cspace-array    :offset        112)
   (flags               pov-camera-flag :offset-assert 176)
   (debounce-start-time time-frame      :offset-assert 184)
   (notify-handle       handle          :offset-assert 192)
   (anim-name           string          :offset-assert 200)
   (command-list        pair            :offset-assert 204)
   (mask-to-clear       process-mask    :offset-assert 208)
   (music-volume-movie  float           :offset-assert 212)
   (sfx-volume-movie    float           :offset-assert 216)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  (:methods
    (pov-camera-abort () _type_ :state 20)
    (pov-camera-done-playing () _type_ :state 21)
    (pov-camera-playing () _type_ :state 22)
    (pov-camera-start-playing () _type_ :state 23)
    (pov-camera-startup () _type_ :state 24)
    (check-for-abort (_type_) symbol 25)
    (target-grabbed? (_type_) symbol 26)
    (pre-startup-callback (_type_) none 27)
    (target-released? () symbol 28)
    (set-stack-size! (_type_) none 29)
    )
  )

;; ----------------------
;; File - sync-info-h
;; Source Path - engine/util/sync-info-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sync-info (structure)
  ((offset float   :offset-assert 0)
   (period uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 18
  :size-assert         #x8
  :flag-assert         #x1200000008
  (:methods
    (get-current-value (_type_ float) float 9)
    (get-current-phase-no-mod (_type_) float 10)
    (get-current-phase (_type_) float 11)
    (get-current-value-with-mirror (_type_ float) float 12)
    (get-current-phase-with-mirror (_type_) float 13)
    (setup-params! (_type_ uint float float float) none 14)
    (load-params! (_type_ process uint float float float) symbol 15)
    (sync-now! (_type_ float) float 16)
    (get-phase-offset (_type_) float 17)
    )
  )

(deftype sync-info-eased (sync-info)
  ((tlo    float   :offset-assert 8)
   (thi    float   :offset-assert 12)
   (ylo    float   :offset-assert 16)
   (m2     float   :offset-assert 20)
   (yend   float   :offset-assert 24)
   )
  :allow-misaligned
  :method-count-assert 18
  :size-assert         #x1c
  :flag-assert         #x120000001c
  )

(deftype sync-info-paused (sync-info)
  ((pause-after-out float   :offset-assert 8)
   (pause-after-in  float   :offset-assert 12)
   )
  :pack-me
  :method-count-assert 18
  :size-assert         #x10
  :flag-assert         #x1200000010
  )

(deftype delayed-rand-float (structure)
  ((min-time   int32   :offset-assert 0)
   (max-time   int32   :offset-assert 4)
   (max-val    float   :offset-assert 8)
   (timer      int32   :offset-assert 12)
   (start-time time-frame   :offset-assert 16)
   (value      float   :offset-assert 24)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (set-params! (_type_ int int float) float 9)
    (update! (_type_ ) float 10)
    )
  )

(deftype oscillating-float (structure)
  ((value   float  :offset-assert 0)
   (target  float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (max-vel float  :offset-assert 12)
   (damping float  :offset-assert 16)
   (accel   float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (set-params! (_type_ float float float float) float 9)
    (update! (_type_ float) float 10)
    )
  )

(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert 0)
   (max-value  float                     :offset-assert 24)
   (min-value  float                     :offset-assert 28)
   (elasticity float                     :offset-assert 32)
   (state      int32                     :offset-assert 36)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (set-params! (_type_ float float float float float float float) float 9)
    (update! (_type_ float) float 10)
    (at-min? (_type_) symbol 11) ;; bool
    (at-max? (_type_) symbol 12) ;; bool
    )
  )

(deftype delayed-rand-vector (structure)
  ((min-time   int32          :offset-assert 0)
   (max-time   int32          :offset-assert 4)
   (xz-max     float          :offset-assert 8)
   (y-max      float          :offset-assert 12)
   (timer      int32          :offset-assert 16)
   (start-time time-frame          :offset-assert 24)
   (value      vector :inline :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (set-params! (_type_ int int float float) vector 9)
    (update-now! (_type_) vector 10)
    (update-with-delay! (_type_) vector 11)
    (update-with-delay-or-reset! (_type_) vector 12)
    )
  )

(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert 0)
   (target  vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (max-vel float          :offset-assert 48)
   (damping float          :offset-assert 52)
   (accel   float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (set-params! (_type_ vector float float float) vector 9)
    (update! (_type_ vector) vector 10)
    )
  )


;; ----------------------
;; File - smush-control-h
;; Source Path - engine/util/smush-control-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype smush-control (structure)
  ((start-time  time-frame   :offset-assert 0)
   (period      float   :offset-assert 8)
   (duration    float   :offset-assert 12)
   (amp         float   :offset-assert 16)
   (damp-amp    float   :offset-assert 20)
   (damp-period float   :offset-assert 24)
   (ticks       float   :offset-assert 28)
   )
  :pack-me
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (set-zero! (_type_) _type_ 9)
    (update! (_type_) float 10)
    (get-no-update (_type_) float 11)
    (activate! (_type_ float int int float float) _type_ 12)
    (nonzero-amplitude? (_type_) symbol 13)
    (die-on-next-update! (_type_) _type_ 14)
    )
  )

;; ----------------------
;; File - trajectory-h
;; Source Path - engine/physics/trajectory-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3


  (deftype trajectory (structure)
    ((initial-position vector :inline :offset-assert 0)
     (initial-velocity vector :inline :offset-assert 16)
     (time             float          :offset-assert 32)
     (gravity          meters         :offset-assert 36)
     )
    :method-count-assert 16
    :size-assert         #x28
    :flag-assert         #x1000000028
    (:methods
      (eval-position! (_type_ float vector) vector 9)
      (eval-velocity! (_type_ float vector) vector 10)
      (setup-from-to-duration! (_type_ vector vector float float) none 11)
      (setup-from-to-xz-vel! (_type_ vector vector float float) none 12)
      (setup-from-to-y-vel! (_type_ vector vector float float) none 13)
      (setup-from-to-height! (_type_ vector vector float float) none 14)
      (debug-draw! (_type_) none 15)
      )
    )

;; ----------------------
;; File - debug-h
;; Source Path - engine/debug/debug-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype pos-history (structure)
  ((points     (inline-array vector)  :offset-assert 0)
   (num-points int32   :offset-assert 4)
   (h-first    int32   :offset-assert 8)
   (h-last     int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype debug-vertex (structure)
  ((trans  vector4w :inline :offset-assert 0)
   (normal vector3h :inline :offset-assert 16)
   (st     vector2h :inline :offset-assert 22)
   (color  uint32           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype debug-vertex-stats (basic)
  ((length    int32                    :offset-assert 4)
   (pos-count int32                    :offset-assert 8)
   (vertex    debug-vertex 600 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x4b10
  :flag-assert         #x900004b10
  )

(define-extern *debug-vertex-stats* debug-vertex-stats)

;; ----------------------
;; File - joint-mod-h
;; Source Path - engine/target/joint-mod-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype joint-mod (basic)
  ((mode            joint-mod-handler-mode :offset-assert 4)
   (process         process-drawable       :offset-assert 8)
   (joint           cspace                 :offset-assert 12)
   (target          vector     :inline     :offset-assert 16)
   (twist           vector     :inline     :offset-assert 32)
   (twist-max       vector     :inline     :offset-assert 48)
   (trans           vector     :inline     :offset-assert 64)
   (quat            quaternion :inline     :offset-assert 80)
   (scale           vector     :inline     :offset-assert 96)
   (notice-time     time-frame                  :offset-assert 112)
   (flex-blend      float                  :offset-assert 120)
   (blend           float                  :offset-assert 124)
   (max-dist        meters                 :offset-assert 128)
   (ignore-angle    degrees                :offset-assert 132)
   (up              uint8                  :offset-assert 136)
   (nose            uint8                  :offset-assert 137)
   (ear             uint8                  :offset-assert 138)
   (shutting-down?  symbol                 :offset-assert 140)
   (parented-scale? symbol                 :offset 128)
   )
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000000090
  (:methods
    (new (symbol type joint-mod-handler-mode process-drawable int) _type_ 0)
    (set-mode! (_type_ joint-mod-handler-mode) _type_ 9)
    (set-target! (_type_ vector) none 10)
    (look-at-enemy! (_type_ vector symbol process) none 11)
    (reset-blend! (_type_) _type_ 12)
    (set-twist! (_type_ float float float) vector 13)
    (set-trs! (_type_ vector quaternion vector) none 14)
    (shut-down! (_type_) none 15)
    )
  )

(deftype try-to-look-at-info (basic)
  ((who  handle  :offset-assert 8)
   (horz float   :offset-assert 16)
   (vert float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-mod-wheel (basic)
  ((last-position vector :inline   :offset-assert 16)
   (angle         float            :offset-assert 32)
   (process       process-drawable :offset-assert 36)
   (wheel-radius  float            :offset-assert 40)
   (wheel-axis    int8             :offset-assert 44)
   )
  (:methods
    (new (symbol type process-drawable int float int) _type_)
    )
  :method-count-assert 9
  :size-assert         #x2d
  :flag-assert         #x90000002d
  )

(deftype joint-mod-set-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (set-rotation    symbol             :offset-assert 64)
   (set-scale       symbol             :offset-assert 68)
   (set-translation symbol             :offset-assert 72)
   (enable          symbol             :offset-assert 76)
   )
  (:methods
    (new (symbol type process-drawable int symbol symbol symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype joint-mod-set-world (basic)
  ((transform  transformq :inline :offset-assert 16)
   (node-index int32              :offset-assert 64)
   (enable     basic              :offset-assert 68)
   )
  (:methods
    (new (symbol type process-drawable int basic) _type_)
    )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype joint-mod-blend-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (node-index      int32              :offset-assert 112)
   (blend           float              :offset-assert 116)
   (enable          basic              :offset-assert 120)
   )
  (:methods
    (new (symbol type process-drawable int basic) _type_)
    )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype joint-mod-spinner (basic)
  ((spin-axis vector :inline :offset-assert 16)
   (angle     float          :offset-assert 32)
   (spin-rate float          :offset-assert 36)
   (enable    basic          :offset-assert 40)
   )
  (:methods
    (new (symbol type process-drawable int vector float) _type_)
    )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; - Functions

(define-extern joint-mod-spinner-callback (function cspace transformq none))
(define-extern cspace<-parented-transformq-joint! (function cspace transformq none))
(define-extern joint-mod-blend-local-callback (function cspace transformq none))
(define-extern joint-mod-set-world-callback (function cspace transformq none))
(define-extern cspace<-transformq! (function cspace transformq matrix))
(define-extern joint-mod-set-local-callback (function cspace transformq none))
(define-extern joint-mod-wheel-callback (function cspace transformq none))
(define-extern vector<-cspace! (function vector cspace vector))
(define-extern add-debug-text-sphere (function symbol bucket-id vector float string rgba symbol))
(define-extern joint-mod-look-at-handler (function cspace transformq none))
(define-extern joint-mod-world-look-at-handler (function cspace transformq none))
(define-extern joint-mod-rotate-handler (function cspace transformq none))
(define-extern joint-mod-joint-set-handler (function cspace transformq none))
(define-extern joint-mod-joint-set*-handler (function cspace transformq none))
(define-extern add-debug-matrix (function symbol bucket-id matrix matrix))
(define-extern joint-mod-debug-draw (function joint-mod none))

;; - Symbols

(define-extern *joint-axis-vectors* (inline-array vector))
(define-extern last-try-to-look-at-data try-to-look-at-info)


;; ----------------------
;; File - collide-mesh-h
;; Source Path - engine/collide/collide-mesh-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-tri-result (structure)
  ((vertex    vector 3 :inline :offset-assert 0)
   (intersect vector  :inline  :offset-assert 48)
   (normal    vector  :inline  :offset-assert 64)
   (pat       pat-surface      :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

(deftype collide-mesh-tri (structure)
  ((vertex-index uint8   3    :offset-assert 0)
   (unused       uint8        :offset-assert 3)
   (pat          pat-surface  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(declare-type collide-mesh-cache-tri structure)
(deftype collide-mesh (basic)
  ((joint-id    int32     :offset-assert 4)
   (num-tris    uint32    :offset-assert 8)
   (num-verts   uint32    :offset-assert 12)
   (vertex-data (inline-array vector) :offset-assert 16)
   (tris        collide-mesh-tri 1 :inline :offset 32)
   )
  :method-count-assert 16
  :size-assert         #x28
  :flag-assert         #x1000000028
  (:methods
    (debug-draw-tris (_type_ process-drawable int) none 9)
    (overlap-test (_type_ collide-mesh-cache-tri vector) symbol 10)
    (should-push-away-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float 11) ;; spat
    (sphere-on-platform-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float 12) ;; sopt
    (populate-cache! (_type_ collide-mesh-cache-tri matrix) none 13)
    (collide-mesh-math-1 (_type_ object object) none 14)
    (collide-mesh-math-2 (_type_ object object object) none 15)
    )
  )

(deftype collide-mesh-cache (basic)
  ((used-size uint32        :offset-assert 4)
   (max-size  uint32        :offset-assert 8)
   (id        uint64        :offset-assert 16)
   (data      uint8 #xa000  :offset 32)
   )
  :method-count-assert 12
  :size-assert         #xa020
  :flag-assert         #xc0000a020
  (:methods
    (allocate! (_type_ int) int 9)
    (is-id? (_type_ int) symbol 10)
    (next-id! (_type_) uint 11)
    )
  )

(deftype collide-mesh-cache-tri (structure)
  ((vertex vector   3     :inline :offset-assert 0)
   (normal vector         :inline :offset-assert 48)
   (bbox4w bounding-box4w :inline :offset-assert 64)
   (pat    pat-surface            :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; - Symbols

(define-extern *collide-mesh-cache* collide-mesh-cache)


;; ----------------------
;; File - collide-shape-h
;; Source Path - engine/collide/collide-shape-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type collide-shape-prim basic)
(deftype collide-sticky-rider (structure)
  ((rider-handle    handle         :offset-assert 0)
   (sticky-prim     collide-shape-prim          :offset-assert 8)
   (prim-ry         float          :offset-assert 12)
   (rider-local-pos vector :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (set-rider! (_type_ handle) symbol 9)
    )
  )

(deftype collide-sticky-rider-group (basic)
  ((num-riders       int32     :offset-assert 4)
   (allocated-riders int32     :offset-assert 8)
   (rider            collide-sticky-rider 1 :inline :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (new (symbol type int) _type_ 0)
    (add-rider! (_type_ process-drawable) collide-sticky-rider 9)
    (reset! (_type_) int 10)
    )
  )

(deftype pull-rider-info (structure)
  ((rider          collide-sticky-rider         :offset-assert 0)
   (rider-cshape   collide-shape-moving         :offset-assert 4)
   (rider-delta-ry float                        :offset-assert 8)
   (rider-dest     vector               :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(declare-type collide-shape-prim basic)
(deftype collide-shape-intersect (basic)
  ((move-vec       vector             :inline :offset-assert 16)
   (best-u         float                      :offset-assert 32)
   (best-tri       collide-tri-result :inline :offset-assert 48)
   (best-from-prim collide-shape-prim                      :offset-assert 132)
   (best-to-prim   collide-shape-prim                      :offset-assert 136)
   )
  :method-count-assert 10
  :size-assert         #x8c
  :flag-assert         #xa0000008c
  (:methods
    (init! (_type_ vector) symbol 9)
    )
  )

(declare-type collide-shape-prim basic)
(deftype collide-overlap-result (structure)
  ((best-dist      float                      :offset-assert 0)
   (best-from-prim collide-shape-prim                      :offset-assert 4)
   (best-to-prim   collide-shape-prim                      :offset-assert 8)
   (best-from-tri  collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x64
  :flag-assert         #xa00000064
  (:methods
    (reset! (_type_) none 9)
    )
  )

(declare-type touching-list structure)
(deftype overlaps-others-params (structure)
  ((options uint32  :offset-assert 0)
   (tlist   touching-list   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(defenum collide-kind
  :type uint64
  :bitfield #t
  (background 0)
  (cak-1 1) ;; hit by player
  (cak-2 2) ;; usually hit by player
  (cak-3 3) ;; hit by others
  (target 4) ;; target
  (water 5)
  (powerup 6)
  (crate 7)
  (enemy 8) ;; also used for powerups
  (wall-object 9) ;; also object. door, pusher (blockers?)
  (projectile 10)
  (ground-object 11) ;; object, like darkecobarray, platforms
  (target-attack 12) ;; all target attacks
  (mother-spider 13)
  (cak-14 14) ;; unused
  (blue-eco-suck 15) ;; manipy, orb-cache-top,
  (unknown-16 16)
  (unknown-17 17)
  (unknown-18 18)
  (unknown-19 19)
  (unknown-20 20)
  (unknown-21 21)
  (unknown-22 22)
  (unknown-23 23)
  (unknown-24 24)
  (unknown-25 25)
  (unknown-26 26)
  (unknown-27 27)
  (unknown-28 28)
  (unknown-29 29)
  (unknown-30 30)
  (unknown-31 31)
  (unknown-32 32)
  (unknown-33 33)
  (unknown-34 34)
  (unknown-35 35)
  (unknown-36 36)
  (unknown-37 37)
  (unknown-38 38)
  (unknown-39 39)
  (unknown-40 40)
  (unknown-41 41)
  (unknown-42 42)
  (unknown-43 43)
  (unknown-44 44)
  (unknown-45 45)
  (unknown-46 46)
  (unknown-47 47)
  (unknown-48 48)
  (unknown-49 49)
  (unknown-50 50)
  (unknown-51 51)
  (unknown-52 52)
  (unknown-53 53)
  (unknown-54 54)
  (unknown-55 55)
  (unknown-56 56)
  (unknown-57 57)
  (unknown-58 58)
  (unknown-59 59)
  (unknown-60 60)
  (unknown-61 61)
  (unknown-62 62)
  (unknown-63 63)
  )

(defenum collide-action
  :type uint32
  :bitfield #t
  (solid 0)              ;; used for solid things
  (rider-plat-sticky 1)  ;; used for platforms in rider/platform interactions
  (rider-target 2)       ;; used for target in rider/platform interactions
  (edgegrab-active 3)    ;; set/cleared when entering/exiting edgegrab states
  (rider-plat 4)         ;; used for platforms in rider/platform interactions
  (unused 5)             ;; totally unused?
  (edgegrab-possible 6)  ;; used when edge grab checks should be done
  (edgegrab-cam 7)       ;; set/cleared when entering/exiting edgegrab states
  (swingpole-active 8)   ;; set/cleared when entering/exiting swingpole states
  (racer 9)              ;; set/cleared when entering/exiting racer states
  (attackable 10)        ;; used for something to do with attacking/damaging
  (attackable-unused 11) ;; seems to relate to attacking - set in several places but never tested for?
  (snowball 12)          ;; set/cleared when entering/exiting snowball states
  (tube 13)              ;; set/cleared when entering/exiting tube states
  (flut 14)              ;; set/cleared when entering/exiting flutflut states
  (racer-grounded 15)    ;; set/cleared when entering/exiting certain racer states w/ extra conditions
  (racer-unused 16)      ;; seems to relate to racer - never set, only cleared in one place?
  )

(defenum collide-offense
  :type int8
  (no-offense 0)
  (touch 1)           ;; just have to touch
  (normal-attack 2)   ;; any attack (like a normal crate)
  (strong-attack 3)   ;; hit with zoomer, slide, ground pound/flop, flut attack
  (indestructible 4)  ;; can't attack it.
  )

(defenum collide-prim-type
  :type int8
  :bitfield #t
  (bad -2)
  (unk0 0)
  (unk1 1)
  )


(deftype collide-prim-core (structure)
  ((world-sphere vector  :inline   :offset-assert 0)
   (collide-as   collide-kind   :offset-assert 16)
   (action       collide-action    :offset-assert 24)
   (offense      collide-offense   :offset-assert 28)
   (prim-type    int8              :offset-assert 29)
   (extra        uint8 2           :offset-assert 30)
   (quad         uint128 2         :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(declare-type collide-cache-prim structure)
(declare-type collide-shape-prim-group basic)
(declare-type collide-cache basic)
(deftype collide-shape-prim (basic)
  ((cshape          collide-shape             :offset-assert 4)
   (prim-id         uint32                    :offset-assert 8)
   (transform-index int8                      :offset-assert 12)
   (prim-core       collide-prim-core :inline :offset-assert 16)
   (local-sphere    vector            :inline :offset-assert 48)
   (collide-with    collide-kind         :offset-assert 64)
   (world-sphere    vector            :inline :offset 16)
   (collide-as      collide-kind           :offset 32)
   (action          collide-action            :offset 40)
   (offense         collide-offense           :offset 44)
   (prim-type       int8                      :offset 45)
   (radius          meters                    :offset 60)
   )
  :method-count-assert 28
  :size-assert         #x48
  :flag-assert         #x1c00000048
  (:methods
    (new (symbol type collide-shape uint int) _type_ 0)
    (move-by-vector! (_type_ vector) none 9)
    (find-prim-by-id (_type_ uint) collide-shape-prim 10)
    (debug-draw-world-sphere (_type_) symbol 11)
    (add-fg-prim-using-box (_type_ collide-cache) none 12)
    (add-fg-prim-using-line-sphere (_type_ collide-cache) none 13)
    (add-fg-prim-using-y-probe (_type_ collide-cache) none 14)
    (overlaps-others-test (_type_ overlaps-others-params collide-shape-prim) symbol 15)
    (overlaps-others-group (_type_ overlaps-others-params collide-shape-prim-group) symbol 16)
    (unused-17 () none 17)
    (collide-with-collide-cache-prim-mesh (_type_ collide-shape-intersect collide-cache-prim) none 18)
    (collide-with-collide-cache-prim-sphere (_type_ collide-shape-intersect collide-cache-prim) none 19)
    (add-to-bounding-box (_type_ collide-kind) symbol 20)
    (num-mesh (_type_ collide-shape-prim) int 21)
    (on-platform-test (_type_ collide-shape-prim collide-overlap-result float) none 22)
    (should-push-away-test (_type_ collide-shape-prim collide-overlap-result) none 23)
    (should-push-away-reverse-test (_type_ collide-shape-prim-group collide-overlap-result) none 24)
    (update-transforms! (_type_ process-drawable) symbol 25)
    (set-collide-as! (_type_ collide-kind) none 26)
    (set-collide-with! (_type_ collide-kind) none 27)
    )
  )

(deftype collide-shape-prim-sphere (collide-shape-prim)
  ((pat             pat-surface                    :offset-assert 72)
   )
  :method-count-assert 28
  :size-assert         #x4c
  :flag-assert         #x1c0000004c
  (:methods
    (new (symbol type collide-shape uint) _type_ 0)
    )
  )

(deftype collide-shape-prim-mesh (collide-shape-prim)
  ((mesh            collide-mesh                     :offset-assert 72)
   (mesh-id         int32                     :offset-assert 76)
   (mesh-cache-id   uint64                    :offset-assert 80)
   (mesh-cache-tris (inline-array collide-mesh-cache-tri)   :offset-assert 88)
   )
  :method-count-assert 29
  :size-assert         #x5c
  :flag-assert         #x1d0000005c
  (:methods
    (new (symbol type collide-shape uint uint) _type_ 0)
    (change-mesh (_type_ int) none 28)
    )
  )

(deftype collide-shape-prim-group (collide-shape-prim)
  ((num-prims       int32                     :offset-assert 72)
   (num-prims-u     uint32                    :offset 72)
   (allocated-prims int32                     :offset-assert 76)
   (prim            collide-shape-prim  1     :offset-assert 80)
   (prims           collide-shape-prim  :dynamic :score 20 :offset 80) ;; added
   )
  :method-count-assert 30
  :size-assert         #x54
  :flag-assert         #x1e00000054
  (:methods
    (new (symbol type collide-shape uint int) _type_ 0)
    (append-prim (_type_ collide-shape-prim) none 28)
    (add-to-non-empty-bounding-box (_type_ collide-kind) none 29)
    )
  )

(defenum nav-flags
  :bitfield #t
  :type uint8
  (navf0 0)
  (navf1 1)
  (navf2 2)
  (navf3 3)
  (navf4 4)
  (navf5 5)
  (navf6 6)
  (navf7 7)
  )

(declare-type collide-edge-hold-list structure)
(declare-type collide-work structure)
(declare-type touching-shapes-entry structure)
(deftype collide-shape (trsqv)
  ((process               process-drawable   :offset-assert 140)
   (max-iteration-count   uint8              :offset-assert 144)
   (nav-flags             nav-flags          :offset-assert 145)
   (pad-byte              uint8      2       :offset-assert 146)
   (pat-ignore-mask       pat-surface        :offset-assert 148)
   (event-self            symbol             :offset-assert 152)
   (event-other           symbol             :offset-assert 156)
   (root-prim             collide-shape-prim              :offset-assert 160) ;; i think this can be any subtype of collide-shape-prim as well!
   (riders                collide-sticky-rider-group              :offset-assert 164)
   (backup-collide-as     collide-kind          :offset-assert 168)
   (backup-collide-with   collide-kind        :offset-assert 176)
   )
  :method-count-assert 56
  :size-assert         #xb8
  :flag-assert         #x38000000b8
  (:methods
    (new (symbol type process-drawable collide-list-enum) _type_)
    (move-by-vector! (_type_ vector) none 28)
    (alloc-riders (_type_ int) none 29)
    (move-to-point! (_type_ vector) none 30) ;; ret - symbol | float (CSPG::9)
    (debug-draw (_type_) none 31)
    (fill-cache-for-shape! (_type_ float collide-kind) none 32)
    (fill-cache-integrate-and-collide! (_type_ vector collide-kind) none 33)
    (find-prim-by-id (_type_ uint) collide-shape-prim  34)
    (detect-riders! (_type_) symbol 35)
    (build-bounding-box-for-shape (_type_ bounding-box float collide-kind) symbol 36)
    (integrate-and-collide! (_type_ vector) none 37)
    (find-collision-meshes (_type_) symbol 38)
    (on-platform (_type_ collide-shape collide-overlap-result) symbol 39)
    (find-overlapping-shapes (_type_ overlaps-others-params) symbol 40) ;; check if blocked??
    (calc-shove-up (_type_ attack-info float) vector 41)
    (should-push-away (_type_ collide-shape collide-overlap-result) symbol 42)
    (pull-rider! (_type_ pull-rider-info) none 43)
    (pull-riders! (_type_) symbol 44)
    (do-push-aways! (_type_) symbol 45)
    (set-root-prim! (_type_ collide-shape-prim) collide-shape-prim 46)
    (update-transforms! (_type_) symbol 47)
    (clear-collide-with-as (_type_) none 48)
    (restore-collide-with-as (_type_) none 49)
    (backup-collide-with-as (_type_) none 50)
    (set-root-prim-collide-with! (_type_ collide-kind) none 51)
    (set-root-prim-collide-as! (_type_ collide-kind) none 52)
    (set-collide-kinds (_type_ int collide-kind collide-kind) none 53)
    (set-collide-offense (_type_ int collide-offense) none 54)
    (send-shove-back (_type_ process touching-shapes-entry float float float) none 55)
    )
  )

(defenum cshape-moving-flags
  :bitfield #t
  :type uint64
  (onsurf)
  (onground)
  (tsurf)
  (twall)
  (t-ciel)
  (t-act)
  (csmf06)
  (csmf07)
  (csmf08)
  (csmf09)
  (on-water)
  (csmf11)
  (csmf12)
  (csmf13)
  (csmf14)
  (csmf15)
  (csmf16)
  (csmf17)
  (csmf18)
  (csmf19)
  (csmf20)
  (csmf21)
  (csmf22)
  (csmf23)
  (csmf24)
  (csmf25)
  (csmf26)
  (csmf27)
  (csmf28)
  (csmf29)
  )

(defenum cshape-reaction-flags
  :bitfield #t
  :type uint32
  (csrf00)
  (csrf01)
  (csrf02)
  (csrf03)
  (csrf04)
  (csrf05)
  (csrf06)
  (csrf07)
  (csrf08)
  (csrf09)
  (csrf10)
  (csrf11)
  (csrf12)
  (csrf13)
  (csrf14)
  (csrf15)
  (csrf16)
  (csrf17)
  (csrf18)
  (csrf19)
  (csrf20)
  (csrf21)
  (csrf22)
  (csrf23)
  (csrf24)
  (csrf25)
  (csrf26)
  (csrf27)
  (csrf28)
  (csrf29)
  (csrf30)
  (csrf31)
  )

(deftype collide-shape-moving (collide-shape)
  ((rider-time            time-frame             :offset-assert 184)
   (rider-last-move       vector     :inline :offset-assert 192)
   (trans-old             vector    3 :inline      :offset-assert 208)
   (poly-pat              pat-surface        :offset-assert 256)
   (cur-pat               pat-surface        :offset-assert 260)
   (ground-pat            pat-surface        :offset-assert 264)
   (status                cshape-moving-flags :offset-assert 272)
   (old-status            cshape-moving-flags :offset-assert 280)
   (prev-status           cshape-moving-flags :offset-assert 288)
   (reaction-flag         cshape-reaction-flags :offset-assert 296)
   (reaction              (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags) :offset-assert 300)
   (no-reaction           (function collide-shape-moving collide-shape-intersect vector vector none) :offset-assert 304)
   (local-normal          vector     :inline :offset-assert 320)
   (surface-normal        vector     :inline :offset-assert 336)
   (poly-normal           vector     :inline :offset-assert 352)
   (ground-poly-normal    vector     :inline :offset-assert 368)
   (ground-touch-point    vector     :inline :offset-assert 384)
   (shadow-pos            vector     :inline :offset-assert 400)
   (ground-impact-vel     meters             :offset-assert 416)
   (surface-angle         float              :offset-assert 420)
   (poly-angle            float              :offset-assert 424)
   (touch-angle           float              :offset-assert 428)
   (coverage              float              :offset-assert 432)
   (dynam                 dynamics              :offset-assert 436)
   (surf                  surface              :offset-assert 440)
   )
  :method-count-assert 65
  :size-assert         #x1bc
  :flag-assert         #x41000001bc
  (:methods
    (set-and-handle-pat! (_type_ pat-surface) none 56)
    (integrate-no-collide! (_type_ vector) none 57)
    (collide-shape-moving-method-58 (_type_ vector) symbol 58)
    (integrate-for-enemy-with-move-to-ground! (_type_ vector collide-kind float symbol symbol symbol) none 59)
    (move-to-ground (_type_ float float symbol collide-kind) symbol 60)
    (move-to-ground-point! (_type_ vector vector vector) none 61)
    (compute-acc-due-to-gravity (_type_ vector float) vector 62)
    (step-collison! (_type_ vector vector float) float 63)
    (move-to-tri! (_type_ collide-tri-result vector) none 64)
    )
  )

;; - Symbols

(define-extern *collide-hit-by-player-list* engine)
(define-extern *collide-usually-hit-by-player-list* engine)
(define-extern *collide-hit-by-others-list* engine)
(define-extern *collide-player-list* engine)
(define-extern *collide-shape-prim-backgnd* collide-shape-prim-mesh)
(define-extern *collide-shape-prim-water* collide-shape-prim-mesh)


;; ----------------------
;; File - collide-target-h
;; Source Path - engine/collide/collide-target-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-history (structure)
  ((intersect      vector :inline :offset-assert 0)
   (trans          vector :inline :offset-assert 16)
   (transv         vector :inline :offset-assert 32)
   (transv-out     vector :inline :offset-assert 48)
   (local-normal   vector :inline :offset-assert 64)
   (surface-normal vector :inline :offset-assert 80)
   (time           time-frame          :offset-assert 96)
   (status         cshape-moving-flags :offset-assert 104)
   (pat            pat-surface    :offset-assert 112)
   (reaction-flag  cshape-reaction-flags :offset-assert 116)
   )
  :method-count-assert 10
  :size-assert         #x78
  :flag-assert         #xa00000078
  (:methods
    (update! (_type_ collide-shape-moving vector vector vector) _type_ 9)
    )
  )

;; NOTE : type has been PAL patched
(deftype control-info (collide-shape-moving)
  (
   (unknown-vector00 vector :inline :offset 448) ;; from - logic-target::build-conversions
   (unknown-vector01 vector :inline :offset 464) ;; from - logic-target::turn-to-vector
   (unknown-vector02 vector :inline :offset 480) ;; from - logic-target::do-rotations2
   (unknown-quaternion00 quaternion :inline :offset 496) ;; from - target-util::(method 27 control-info)
   (unknown-quaternion01 quaternion :inline :offset 512) ;; from - logic-target::do-rotations2
   (unknown-float00  float  :offset 528) ;; from - logic-target::do-rotations2
   (unknown-float01  float  :offset 532)
   (unknown-float02  float  :offset 536) ;; from - logic-target::add-thrust
   (unknown-vector10  vector :inline  :offset 544) ;; from - logic-target::flat-setup
   (unknown-vector11  vector :inline  :offset 560) ;; from - logic-target::target-no-move-post
   (unknown-vector12  vector :inline  :offset 576)
   (unknown-vector13  vector :inline  :offset 592) ;; from - collide-shape::method-37 | target::mod-var-jump
   (unknown-vector14  vector :inline  :offset 608) ;; from - logic-target::target-no-move-post
   (unknown-vector15  vector :inline  :offset 624) ;; from - collide-shape::method-37 | target-handler::target-exit
   (unknown-vector16  vector :inline  :offset 640) ;; from - collide-shape::method-37
   (unknown-dynamics00  dynamics  :offset 656) ;; from - logic-target::bend-gravity
   (unknown-surface00  surface  :offset 660)
   (unknown-surface01  surface  :offset 664) ;; not a symbol - target-util::target-align-vel-z-adjust
   (unknown-cpad-info00  cpad-info  :offset 668) ;; not a symbol - target-util::move-legs?
   (unknown-float10  float  :offset 672) ;; from - logic-target::turn-to-vector
   (unknown-float11  float  :offset 676) ;; from - logic-target::turn-to-vector
   (unknown-float12  float  :offset 680) ;; from - logic-target::turn-to-vector
   (unknown-float13  float  :offset 684) ;; from - logic-target::turn-to-vector
   (unknown-vector20  vector :inline :offset 688) ;; from - logic-target::turn-to-vector
   (unknown-vector21  vector :inline :offset 704) ;; from - logic-target::turn-to-vector
   (unknown-vector22  vector :inline :offset 720) ;; from - logic-target::turn-to-vector
   (unknown-vector23  vector :inline :offset 736) ;; from - logic-target::turn-to-vector
   ;  (unknown-dword-temp-01  uint64  :offset 776) ;; from - logic-target::read-pad
   (unknown-vector-array00  vector 7 :inline :offset 752) ;; from - logic-target::turn-to-vector
   (unknown-vector30  vector :inline :offset 880) ;; from - logic-target::read-pad
   (unknown-vector31  vector :inline  :offset 896) ;; from - logic-target::read-pad
   (unknown-float20 float  :offset 912) ;; from - logic-target::read-pad
   (unknown-float21 float  :offset 916) ;; from - logic-target::read-pad
   (unknown-dword00 uint64  :offset 920) ;; from - logic-target::read-pad
   (unknown-matrix00 matrix :inline :offset 928) ;; from - target-util::(method 16 target)
   (unknown-matrix01 matrix :inline :offset 992) ;; from - target-util::(method 16 target)
   (unknown-matrix02 matrix :inline :offset 1056) ;; from - logic-target::joint-points
   (unknown-qword00  uint128  :offset 1136)
   (unknown-float30  float  :offset 1140) ;; from - logic-target::target-calc-camera-pos
   (unknown-vector40  vector :inline  :offset 1152) ;; from - logic-target::target-real-post
   (unknown-float40  float :offset 1172) ;; from - target-death::lambda-1
   (unknown-float41  float :offset 1176) ;; from - logic-target::do-rotations2
   (unknown-int00  int32 :offset 1180) ;; from - logic-target::joint-points
   (unknown-float50  float :offset 1168) ;; from - logic-target::target-real-post
   (unknown-vector50  vector :inline :offset 1184) ;; from - logic-target::build-conversions
   (unknown-vector51  vector :inline :offset 1200) ;; from - logic-target::build-conversions
   (unknown-vector52  vector :inline :offset 1216)
   (unknown-vector53  vector :inline :offset 1232)
   (last-known-safe-ground  vector :inline :offset 1248)
   (unknown-vector55  vector :inline :offset 1264)
   (unknown-dword10 time-frame :offset 1280) ;; from - collide-reaction-target::target-collision-reaction
   (unknown-dword11 time-frame :offset 1288) ;; from - target-util::can-jump?
   (unknown-float60 float :offset 1300) ;; from - target-util::can-duck?
   (unknown-float61 float :offset 1304) ;; from - target-util::target-align-vel-z-adjust
   (unknown-float62 float :offset 1308) ;; from - target-util::target-print-stats
   (unknown-float63 float :offset 1312) ;; from - logic-target::target-compute-slopes
   (unknown-float64 float :offset 1316) ;; from - logic-target::target-compute-slopes
   (unknown-dword20 time-frame :offset 1320) ;; from target-util::turn-around? - TODO
   (unknown-dword21 time-frame :offset 1328) ;; from target-util::turn-around? - TODO
   (unknown-dword-coverage int64 :offset 1336)
   (unknown-float-coverage-0 float :offset 1344)
   (unknown-float-coverage-1 float :offset 1348)
   (unknown-float-coverage-2 float :offset 1352)
   (unknown-u32-coverage-0 uint32 :offset 1356)
   (unknown-vector-coverage-0 vector :inline :offset 1376)
   (unknown-vector-coverage-1 vector :inline :offset 1392)
   (unknown-vector-coverage-2 vector :inline :offset 1440)
   (unknown-vector-coverage-3 vector :inline :offset 1472)
   (unknown-vector60 vector :inline :offset 1456) ;; from - logic-target::add-thrust
   (unknown-vector61 vector :inline :offset 1504) ;; from - logic-target::add-thrust
   (unknown-float70 float :offset 1520) ;; from - logic-target::add-thrust
   (unknown-float71 float :offset 1524) ;; from - collide-shape::method-37
   (unknown-vector70 vector :inline :offset 1536) ;; from - logic-target::add-thrust
   (unknown-vector71 vector :inline :offset 1552) ;; from - target-tube::tube-thrust
   (unknown-vector72 vector :inline :offset 1568) ;; from - collide-reaction-racer::racer-collision-reaction
   (unknown-vector73 vector :inline :offset 1584) ;; from - collide-reaction-racer::racer-collision-reaction
   (unknown-handle00 handle :offset 1600) ;; from logic-target::reset-target-state
   (unknown-sphere-array00 collide-shape-prim-sphere 3 :offset 1608) ;; from target-util::target-collide-set! and from target-util::target-danger-set!
   (unknown-sphere00 collide-shape-prim-sphere :offset 1632) ;; from target-util::target-danger-set!
   (unknown-sphere01 collide-shape-prim-sphere :offset 1636) ;; from target-util::target-danger-set!
   (unknown-sphere02 collide-shape-prim-sphere :offset 1640) ;; from target-util::target-danger-set!
   (unknown-int50 int32 :offset 1656) ;; from target::(enter target-wheel)
   (unknown-dword30 time-frame :offset 1664) ;; from target::(trans target-walk)
   (unknown-dword31 time-frame :offset 1672) ;; from target-util::can-hands?
   (unknown-dword32 time-frame :offset 1680) ;; from target-util::can-hands?
   (unknown-dword33 time-frame :offset 1688) ;; from target-util::can-feet?
   (unknown-dword34 time-frame :offset 1696) ;; from target-util::can-feet?
   (unknown-dword35 time-frame :offset 1704) ;; from target::(exit target-slide-down)
   (unknown-dword36 time-frame :offset 1712) ;; from target::(trans target-jump)
   (unknown-float80 float :offset 1724) ;; from logic-target::bend-gravity
   (unknown-float81 float :offset 1728) ;; from logic-target::bend-gravity
   (unknown-float82 float :offset 1732) ;; from logic-target::bend-gravity
   (unknown-vector80 vector :inline :offset 1744) ;; from logic-target::joint-points
   (unknown-cspace00 cspace :inline :offset 1760) ;; from logic-target::joint-points
   (unknown-vector90 vector :score 100 :inline :offset 1776) ;; from logic-target::target-compute-edge
   (unknown-vector91 vector :inline :offset 1792) ;; from logic-target::target-compute-edge
   (unknown-vector92 vector :inline :offset 1824) ;; from logic-target::joint-points
   (unknown-cspace10 cspace :inline :offset 1808) ;; from logic-target::joint-points
   (unknown-symbol00 symbol :offset 1840) ;; from target-util::target-danger-set!
   (unknown-float90 float :offset 1844) ;; from target-util::target-danger-set!
   (unknown-float91 float :offset 1848) ;; from target-util::target-collide-set!
   (unknown-vector-array10 vector 16 :inline :offset 1856) ;; from target-util::turn-around?
   (unknown-float100 float :offset 2112) ;; from target-util::turn-around?
   (unknown-int10 int32 :offset 2116) ;; from target-util::turn-around?
   (unknown-float110  float :offset 2120) ;; from logic-target::target-compute-edge
   (unknown-vector100  vector :inline :offset 2128) ;; from logic-target::target-compute-edge
   (unknown-vector101  vector :inline :offset 2144) ;; from logic-target::target-compute-edge
   (unknown-dword40  time-frame :offset 2160) ;; from logic-target::target-compute-edge
   (unknown-dword41  time-frame :offset 2168) ;; from logic-target::target-compute-edge
   (unknown-handle10  handle :offset 2176) ;; from logic-target::target-compute-pole - probably a swingpole
   (unknown-uint20     uint32          :offset 2184) ;; from target::(trans target-running-attack)
   (unknown-spoolanim00     spool-anim          :offset 2184) ;; from target2::(trans target-stance-ambient)
   (unknown-int20     int32          :offset 2184) ;; from (anon-function 1 basebutton)
   (unknown-symbol20   symbol          :offset 2184) ;; from (anon-function 1 basebutton)
   (unknown-float120 float :offset 2184) ;; from target::mod-var-jump
   (unknown-int21 int32 :offset 2188) ;; from logic-target::target-compute-pole
   (unknown-uint30 uint32 :offset 2188) ;; from target::(code target-running-attack)
   (unknown-float121 float :offset 2188) ;; from target::mod-var-jump
   (unknown-uint31 uint32 :offset 2192) ;; from target::(trans target-running-attack)
   (unknown-int37 int32 :offset 2192)
   (unknown-float122 float :offset 2196) ;; from target::(trans target-jump)
   (unknown-float123 float :offset 2200) ;; from target::mod-var-jump
   (unknown-float124 float :offset 2204) ;; from target::init-var-jump
   (unknown-vector102  vector :inline :offset 2224) ;; from (anon-function 3 basebutton)
   (unknown-vector103  vector :inline :offset 2240) ;; from (anon-function 3 basebutton)
   (unknown-quaternion02  quaternion :inline :offset 2256) ;; from racer-states::(code target-racing-get-on)
   (unknown-quaternion03  quaternion :inline :offset 2272) ;; from racer-states::(code target-racing-get-on)
   (unknown-smush00  smush-control :inline :offset 2288) ;; from (event target-fishing)
   (unknown-vector110  vector :inline :offset 2320) ;; from logic-target::flag-setup
   (unknown-vector111  vector :inline :offset 2336) ;; from logic-target::flag-setup
   (unknown-symbol30  symbol :offset 2384) ;; from target-util::target-danger-set!
   (unknown-int31  uint32 :offset 2384) ;; from target:: (event target-running-attack)
   (unknown-dword50 int64 :offset 2392) ;; from target-util::target-start-attack
   (unknown-dword51 int64 :offset 2400) ;; from target-util::target-start-attack
   (unknown-pointer00 pointer :offset 2416) ;; from target-handler::target-standard-event-handler
   (unknown-symbol40 symbol :offset 2428) ;; from logic-target::post-flag-setup
   (unknown-dword60 int64 :offset 2432) ;; from target::(enter target-jump)
   (unknown-dword61 int64 :offset 2440) ;; from target::(enter target-jump)
   (unknown-dword62 int64 :offset 2448) ;; from target::(enter target-jump) - probably some sort of object64 that's used as a vector?
   (unknown-dword63 int64 :offset 2456) ;; from target::(enter target-jump)
   (unknown-halfword00 int16 :offset 2488) ;; from logic-target::target-move-dist
   ;; these were determined from racer-collision-reaction.
   (history-length int16 :offset 2490)
   (history-data collide-history 128 :inline :offset-assert 2496)
   (unknown-float140 float :offset 18944)
   (unknown-dword70 time-frame :offset 18952) ;; from logic-target::add-thrust
   (unknown-int40 int32 :offset 18880) ;; from logic-target::flag-setup
   (unknown-dword80 time-frame :offset 18888) ;; from logic-target::post-flag-setup
   (unknown-dword81 time-frame :offset 18896) ;; from logic-target::post-flag-setup
   (unknown-float130 float :offset 18904) ;; from target2::target-swim-tilt
   (unknown-float131 float :offset 18908) ;; from target2::target-swim-tilt
   (unknown-dword82 time-frame :offset 18912) ;; from logic-target::reset-target-state
   (unknown-vector120 vector :inline :offset 18928) ;; from target::(code target-running-attack)
   (unknown-float150 float :offset 18944) ;; from target::(code target-wheel-flip)
   (unknown-vector121 vector :inline :offset 18960) ;; from target collide response
   (wall-pat pat-surface :offset 18976) ;; pat information for wall-check collision
   (unknown-soundid00 sound-id :offset 18980) ;; from powerups::target-powerup-process
   (unknown-float141 float :offset 18984) ;; from powerups::target-powerup-process
   ;; PAL patch here
   (unknown-soundid01 sound-id :offset 18988)
   (unknown-int34 int32 :offset 18992)
   (unknown-int35 int32 :offset 18996)
   (unknown-int36 int32 :offset 19000)
   )
  :size-assert #x4a3c ;; #x4a2c
  :method-count-assert 65
  :flag-assert #x4100004a3c ;; #x4100004a2c
  )

;; ----------------------
;; File - collide-touch-h
;; Source Path - engine/collide/collide-touch-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype touching-prim (structure)
  ((cprim    collide-shape-prim         :offset-assert 0) ;; a big guess, there's a few that meet this name
   (has-tri? symbol                     :offset-assert 4)
   (tri      collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )

(declare-type touching-shapes-entry structure)
(deftype touching-prims-entry (structure)
  ((next       touching-prims-entry         :offset-assert 0)
   (prev       touching-prims-entry         :offset-assert 4)
   (allocated? symbol                        :offset-assert 8)
   (u          float                        :offset-assert 12)
   (prim1      touching-prim        :inline :offset-assert 16)
   (prim2      touching-prim        :inline :offset-assert 128)
   )
  :method-count-assert 13
  :size-assert         #xe4
  :flag-assert         #xd000000e4
  (:methods
    (get-touched-prim (_type_ trsqv touching-shapes-entry) collide-shape-prim 9)
    (touching-prims-entry-method-10 () none 10)
    (get-middle-of-bsphere-overlap (_type_ vector) vector 11)
    (get-touched-tri (_type_ collide-shape touching-shapes-entry) collide-tri-result 12)
    )
  )

(deftype touching-prims-entry-pool (structure)
  ((head  touching-prims-entry    :offset-assert 0)
   (nodes touching-prims-entry 64 :inline :offset-assert 16)
   )
  :method-count-assert 13
  :size-assert         #x3c10
  :flag-assert         #xd00003c10
  (:methods
    (new (symbol type) _type_ 0)
    (alloc-node (_type_) touching-prims-entry 9)
    (get-free-node-count (_type_) int 10)
    (init-list! (_type_) none 11)
    (free-node (_type_ touching-prims-entry) touching-prims-entry 12)
    )
  )

(deftype touching-shapes-entry (structure)
  ((cshape1   collide-shape                 :offset-assert 0)
   (cshape2   collide-shape                 :offset-assert 4)
   (resolve-u int8                  :offset-assert 8)
   (head      touching-prims-entry  :offset-assert 12)
   )
  :allow-misaligned
  :method-count-assert 18
  :size-assert         #x10
  :flag-assert         #x1200000010
  (:methods
    (touching-shapes-entry-method-9 (_type_) none 9)
    (get-touched-shape (_type_ collide-shape) collide-shape 10)
    (touching-shapes-entry-method-11 () none 11)
    (prims-touching? (_type_ collide-shape-moving uint) touching-prims-entry 12) ; this one!
    (prims-touching-action? (_type_ collide-shape collide-action collide-action) touching-prims-entry 13)
    (touching-shapes-entry-method-14 () none 14)
    (free-touching-prims-list (_type_) symbol 15)
    (get-head (_type_) touching-prims-entry 16)
    (get-next (_type_ touching-prims-entry) touching-prims-entry 17)
    )
  )

(deftype touching-list (structure)
  ((num-touching-shapes int32      :offset-assert 0)
   (resolve-u           int8       :offset-assert 4)
   (touching-shapes     touching-shapes-entry 32 :inline :offset-assert 8)
   )
  :method-count-assert 15
  :size-assert         #x208
  :flag-assert         #xf00000208
  (:methods
    (new (symbol type) _type_ 0)
    (add-touching-prims (_type_ collide-shape-prim collide-shape-prim float collide-tri-result collide-tri-result) none 9)
    (touching-list-method-10 () none 10)
    (update-from-step-size (_type_ float) none 11)
    (send-events-for-touching-shapes (_type_) none 12)
    (get-shapes-entry (_type_ collide-shape collide-shape) touching-shapes-entry 13)
    (free-all-prim-nodes (_type_) none 14)
    )
  )

;; - Symbols

(define-extern *touching-prims-entry-pool* touching-prims-entry-pool)
(define-extern *touching-list* touching-list)


;; ----------------------
;; File - collide-edge-grab-h
;; Source Path - engine/collide/collide-edge-grab-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype edge-grab-info (structure)
  ((world-vertex             vector 6 :inline      :offset-assert 0)
   (local-vertex             vector 6 :inline      :offset-assert 96)
   (actor-cshape-prim-offset int32           :offset-assert 192)
   (actor-handle             handle          :offset-assert 200)
   (hanging-matrix           matrix  :inline :offset-assert 208)
   (edge-vertex              vector 2 :inline       :offset 0)
   (center-hold              vector  :inline :offset 32)
   (tri-vertex               vector 3 :inline     :offset 48)
   (left-hand-hold           vector  :inline :offset-assert 272)
   (right-hand-hold          vector  :inline :offset-assert 288)
   (center-hold-old          vector  :inline :offset-assert 304)
   (edge-tri-pat             uint32          :offset-assert 320)
   )
  :method-count-assert 11
  :size-assert         #x144
  :flag-assert         #xb00000144
  (:methods
    (edge-grab-info-method-9 (_type_) symbol 9)
    (debug-draw (_type_) symbol 10)
    )
  )

(declare-type collide-cache-tri structure)
(deftype collide-edge-tri (structure)
  ((ctri   collide-cache-tri         :offset-assert 0)
   (normal vector            :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-edge-edge (structure)
  ((ignore        basic                    :offset-assert 0)
   (etri          collide-edge-tri         :offset-assert 4)
   (vertex-ptr    (inline-array vector)         2       :offset-assert 8)
   (outward       vector           :inline :offset-assert 16)
   (edge-vec-norm vector           :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-edge-hold-item (structure)
  ((next       collide-edge-hold-item         :offset-assert 0)
   (rating     float                          :offset-assert 4)
   (split      int8                           :offset-assert 8)
   (edge       collide-edge-edge              :offset-assert 12)
   (center-pt  vector                 :inline :offset-assert 16)
   (outward-pt vector                 :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-edge-hold-list (structure)
  ((num-allocs   uint32                    :offset-assert 0)
   (num-attempts uint32                    :offset-assert 4)
   (head         collide-edge-hold-item    :offset-assert 8)
   (items        collide-edge-hold-item  32 :inline :offset-assert 16)
   (attempts     qword   32 :inline :offset-assert 1552)
   )
  :method-count-assert 11
  :size-assert         #x810
  :flag-assert         #xb00000810
  (:methods
    (debug-draw (_type_) object 9)
    (add-to-list! (_type_ collide-edge-hold-item) none 10)
    )
  )

(declare-type collide-cache basic)
(declare-type collide-shape basic)
(deftype collide-edge-work (structure)
  ((ccache                       collide-cache                          :offset-assert 0)
   (cshape                       collide-shape                          :offset-assert 4)
   (num-verts                    uint32                         :offset-assert 8)
   (num-edges                    uint32                         :offset-assert 12)
   (num-tris                     uint32                         :offset-assert 16)
   (cache-fill-box               bounding-box           :inline :offset-assert 32)
   (within-reach-box             bounding-box           :inline :offset-assert 64)
   (within-reach-box4w           bounding-box4w         :inline :offset-assert 96)
   (search-pt                    vector                 :inline :offset-assert 128)
   (search-dir-vec               vector                 :inline :offset-assert 144)
   (max-dist-sqrd-to-outward-pt  float                          :offset-assert 160)
   (max-dir-cosa-delta           float                          :offset-assert 164)
   (split-dists                  float                2       :offset-assert 168)
   (outward-offset               vector                 :inline :offset-assert 176)
   (local-cache-fill-box         bounding-box           :inline :offset-assert 192)
   (local-within-reach-box       bounding-box           :inline :offset-assert 224)
   (local-player-spheres         sphere   12   :inline   :offset-assert 256)
   (world-player-spheres         sphere                12  :inline    :offset-assert 448)
   (local-player-hanging-spheres sphere                6   :inline    :offset 256)
   (world-player-hanging-spheres sphere                6    :inline   :offset 448)
   (local-player-leap-up-spheres sphere                6    :inline   :offset 352)
   (world-player-leap-up-spheres sphere                6    :inline   :offset 544)
   (verts                        vector      64 :inline     :offset-assert 640)
   (edges                        collide-edge-edge     96  :inline    :offset-assert 1664)
   (tris                         collide-edge-tri    48  :inline    :offset-assert 6272)
   (hold-list                    collide-edge-hold-list :inline :offset-assert 7808)
   )
  :method-count-assert 20
  :size-assert         #x2690
  :flag-assert         #x1400002690
  (:methods
    (search-for-edges (_type_ collide-edge-hold-list) symbol 9)
    (debug-draw-edges (_type_) object 10)
    (debug-draw-tris (_type_) none 11)
    (debug-draw-sphere (_type_) symbol 12)
    (compute-center-point! (_type_ collide-edge-edge vector) float 13)
    (collide-edge-work-method-14 (_type_ vector vector int) float 14)
    (find-grabbable-edges! (_type_) none 15)
    (find-grabbable-tris! (_type_) none 16)
    (should-add-to-list? (_type_ collide-edge-hold-item collide-edge-edge) symbol 17)
    (find-best-grab! (_type_ collide-edge-hold-list edge-grab-info) symbol 18)
    (check-grab-for-collisions (_type_ collide-edge-hold-item edge-grab-info) symbol 19)
    )
  )

;; - Symbols

(define-extern *collide-edge-work* collide-edge-work)
(define-extern *edge-grab-info* edge-grab-info)


;; ----------------------
;; File - process-drawable-h
;; Source Path - engine/draw/process-drawable-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern joint-control-reset! (function joint-control joint-control-channel none :behavior process-drawable))
(define-extern cspace-index-by-name (function process-drawable string int))
(define-extern cspace-by-name (function process-drawable string cspace))
(define-extern cspace-by-name-no-fail (function process-drawable string cspace))
(define-extern cspace-index-by-name-no-fail (function process-drawable string int))
(define-extern num-func-none (function joint-control-channel float float float))
(define-extern num-func-+! (function joint-control-channel float float float))
(define-extern num-func--! (function joint-control-channel float float float))
(define-extern num-func-loop! (function joint-control-channel float float float))
(define-extern num-func-seek! (function joint-control-channel float float float))
(define-extern num-func-blend-in! (function joint-control-channel float float float))
(define-extern num-func-chan (function joint-control-channel float float float))
(define-extern num-func-identity (function joint-control-channel float float float))


;; ----------------------
;; File - effect-control-h
;; Source Path - engine/game/effect-control-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype effect-control (basic)
  ((process          process-drawable   :offset-assert 4)
   (flags            uint32  :offset-assert 8)
   (last-frame-group art-joint-anim   :offset-assert 12)
   (last-frame-num   float   :offset-assert 16)
   (channel-offset   int32   :offset-assert 20)
   (res              res-lump   :offset-assert 24)
   (name             (pointer res-tag)  :offset-assert 28)
   (param            uint32  :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x24
  :flag-assert         #xf00000024
  (:methods
    (new (symbol type process-drawable) _type_)
    (effect-control-method-9 (_type_) none 9)
    (effect-control-method-10 (_type_ symbol float int) object 10)
    (effect-control-method-11 (_type_ symbol float int basic pat-surface) none 11)
    (effect-control-method-12 (_type_ symbol float int basic sound-name) int 12)
    (set-channel-offset! (_type_ int) none 13)
    (effect-control-method-14 (_type_ float float float) none 14)
    )
  )


;; ----------------------
;; File - collide-frag-h
;; Source Path - engine/collide/collide-frag-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-frag-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-frag-mesh (basic)
  ((packed-data     uint32         :offset-assert 4)
   (pat-array       uint32         :offset-assert 8)
   (strip-data-len  uint16         :offset-assert 12)
   (poly-count      uint16         :offset-assert 14)
   (base-trans      vector :inline :offset-assert 16)
   ;; these go in the w of the vector above.
   (vertex-count    uint8          :offset 28)
   (vertex-data-qwc uint8          :offset 29)
   (total-qwc       uint8          :offset 30)
   (unused          uint8          :offset 31)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-fragment (drawable)
  ((mesh    collide-frag-mesh          :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  )

(deftype drawable-inline-array-collide-fragment (drawable-inline-array)
  ((data    collide-fragment 1 :inline      :offset-assert 32)
   (pad     uint32) ;; ending in inline basic always results in 4 byte pad.
   )
  :method-count-assert 18
  :size-assert         #x44
  :flag-assert         #x1200000044
  )

(deftype drawable-tree-collide-fragment (drawable-tree)
  ((data-override drawable-inline-array :offset 32))
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )


;; ----------------------
;; File - projectiles-h
;; Source Path - engine/game/projectiles-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype projectile (process-drawable)
  ((root-override   collide-shape-moving :score 100 :offset 112)
   (base-trans      vector  :inline :offset-assert 176)
   (target          vector  :inline :offset-assert 192)
   (target-base     vector  :inline :offset-assert 208)
   (parent-base     vector  :inline :offset-assert 224)
   (parent-quat     vector  :inline :offset-assert 240)
   (base-vector     vector  :inline :offset-assert 256)
   (timeout         time-frame          :offset-assert 272)
   (options         uint64          :offset-assert 280)
   (last-target     handle          :offset-assert 288)
   (notify-handle   handle          :offset-assert 296)
   (max-speed       float           :offset-assert 304)
   (max-turn        float           :offset-assert 308)
   (old-dist        float   16      :offset-assert 312)
   (old-dist-count  int32           :offset-assert 376)
   (hits            int32           :offset-assert 380)
   (max-hits        int32           :offset-assert 384)
   (tween           float           :offset-assert 388)
   (attack-mode     symbol           :offset-assert 392)
   (update-velocity (function projectile none)           :offset-assert 396)
   (counter         int32           :offset-assert 400)
   (target-count    int32           :offset-assert 404)
   (sound-id        sound-id        :offset-assert 408)
   )
  :heap-base #x130
  :method-count-assert 29
  :size-assert         #x19c
  :flag-assert         #x1d0130019c
  ;; inherited inspect of process-drawable
  (:methods
    (projectile-die () _type_ :state 20) ;; state - sound related?
    (projectile-dissipate () _type_ :state 21) ;; state
    (projectile-impact () _type_ :state 22) ;; state
    (projectile-moving () _type_ :state 23) ;; state
    (projectile-method-24 (_type_) none 24)
    (projectile-method-25 (_type_) none 25)
    (projectile-method-26 (_type_) none 26)
    (projectile-method-27 (_type_) none 27)
    (projectile-method-28 (_type_) none 28)
    )
  )

(deftype projectile-yellow (projectile)
  ((mode  int32  :offset-assert 412)
   (angle float  :offset-assert 416)
   )
  :heap-base #x140
  :method-count-assert 29
  :size-assert         #x1a4
  :flag-assert         #x1d014001a4
  )

(deftype projectile-blue (projectile)
  ((mode      int32  :offset-assert 412)
   (joint-num int32  :offset-assert 416)
   )
  :heap-base #x140
  :method-count-assert 29
  :size-assert         #x1a4
  :flag-assert         #x1d014001a4
  )


;; ----------------------
;; File - target-h
;; Source Path - engine/target/target-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type sidekick basic)
(declare-type collide-cache basic)
(declare-type snowball-info basic)
(declare-type tube-info basic)
(declare-type racer-info basic)
(declare-type flut-info basic)
;; NOTE : type has been PAL patched.
(deftype target (process-drawable)
  ((self-override       target   :score 100 :offset 28)
   (control             control-info        :score 100 :offset 112)
   (fact-info-target    fact-info-target    :score 100 :offset 144)
   (skel2               basic               :offset-assert 176)
   (racer               racer-info          :offset-assert 180)
   (game                game-info           :offset-assert 184)
   (neck                joint-mod           :offset-assert 188)
   (state-hook-time     time-frame          :offset-assert 192)
   (state-hook          (function none :behavior target)     :offset-assert 200)
   (cam-user-mode       symbol              :offset-assert 204)
   (sidekick            (pointer sidekick)  :offset-assert 208)
   (manipy              (pointer manipy)    :offset-assert 212)
   (attack-info         attack-info :inline :offset-assert 224)
   (attack-info-rec     attack-info :inline :offset-assert 336)
   (anim-seed           uint64              :offset-assert 440)
   (alt-cam-pos         vector      :inline :offset-assert 448)
   (snowball            snowball-info       :offset-assert 464)
   (tube                tube-info           :offset-assert 468)
   (flut                flut-info           :offset-assert 472)
   (current-level       level               :offset-assert 476)
   (saved-pos           transformq  :inline :offset-assert 480)
   (saved-owner         uint64              :offset-assert 528)
   (alt-neck-pos        vector      :inline :offset-assert 544)
   (fp-hud              handle              :offset-assert 560)
   (no-load-wait        time-frame          :offset-assert 568)
   (no-look-around-wait time-frame          :offset-assert 576)
   ;; PAL patch here
   (burn-proc           handle              :offset-assert 584)
   )
  :heap-base #x1e0
  :method-count-assert 21
  :size-assert         #x250 ;;#x248
  :flag-assert         #x1501e00250 ;;#x1501e00248
  (:methods
    (find-edge-grabs! (_type_ collide-cache) object 20) ;; none or #f
    )
  (:states
    (target-jump float float surface)
    (target-hit symbol attack-info)
    (target-eco-powerup object float)
    target-load-wait
    target-grab
    target-look-around
    target-billy-game
    (target-racing-start handle)
    (target-racing-death symbol)
    (target-flut-start handle)
    (target-snowball-start handle)
    (target-tube-start handle)
    (target-periscope handle)
    (target-fishing handle)
    (target-final-door basic handle)
    (target-play-anim string handle)
    target-edge-grab
    (target-pole-cycle handle)
    target-swim-stance
    target-wade-stance
    (target-hit-ground symbol)
    target-stance
    (target-high-jump float float basic)
    (target-attack-air symbol)
    (target-wheel-flip float float)
    target-duck-stance
    (target-hit-ground-hard float)
    (target-flop-hit-ground symbol)
    target-yellow-jump-blast
    target-swim-down
    (target-flop float float float)
    (target-attack-uppercut-jump float float)
    target-attack
    (target-attack-uppercut float float)
    target-yellow-blast
    target-wade-walk
    target-walk
    target-running-attack
    (target-duck-high-jump-jump float float symbol)
    (target-launch float symbol vector int)
    (target-duck-high-jump float float symbol)
    (target-double-jump float float)
    target-duck-walk
    target-ice-walk
    target-wheel
    target-turn-around
    target-stance-ambient
    target-ice-stance
    target-startup
    (target-jump-forward float float)
    (target-swim-jump-jump float float surface)
    target-swim-up
    (target-swim-jump float float)
    target-swim-walk
    (target-edge-grab-jump float float)
    target-edge-grab-off
    (target-pole-flip-up-jump float float)
    (target-pole-flip-forward-jump float float)
    (target-pole-flip-up object object float)
    (target-pole-flip-forward float float float)
    target-stance-look-around
    (target-racing-smack float symbol)
    target-racing
    target-racing-grab
    (target-racing-clone-anim handle)
    (target-racing-get-off-hit-ground symbol)
    (target-racing-get-off-jump handle)
    (target-racing-jump float float symbol)
    (target-racing-bounce float float symbol)
    target-racing-falling
    (target-racing-get-on handle)
    (target-racing-get-off handle)
    (target-racing-hit handle attack-info)
    target-flut-stance
    target-flut-grab
    (target-flut-clone-anim handle)
    (target-flut-get-off-hit-ground symbol)
    (target-flut-get-off-jump handle)
    (target-flut-death symbol)
    target-flut-hit-ground
    target-flut-air-attack-hit-ground
    (target-flut-jump float float)
    (target-flut-falling symbol)
    (target-flut-hit symbol attack-info)
    target-flut-walk
    (target-flut-air-attack float)
    (target-flut-double-jump float float)
    target-flut-running-attack
    (target-flut-get-on handle)
    (target-flut-get-off handle)
    target-slide-down
    (target-falling symbol)
    (target-continue continue-point)
    (target-warp-out vector vector)
    target-tube
    (target-tube-death symbol)
    (target-tube-jump float float)
    (target-tube-hit symbol attack-info)
    target-snowball
    (target-death symbol)
    (target-clone-anim handle)
    target-title
    target-demo
    target-title-play
    target-title-wait
    (target-warp-in vector vector)
    )
  )

(deftype sidekick (process-drawable)
  ((parent-override  (pointer target) :score 100 :offset 12)
   (control          control-info   :offset 112)
   (anim-seed        uint64  :offset 192)
   (shadow-in-movie? symbol  :offset-assert 200)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xcc
  :flag-assert         #x14006000cc
  (:states
    sidekick-clone)
  )

;; - Symbols

(define-extern *target* target)
(define-extern *sidekick* sidekick)


;; ----------------------
;; File - depth-cue-h
;; Source Path - engine/gfx/depth-cue-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype depth-cue-data (structure)
  ((data      vector :inline :offset-assert 0)
   (sharpness float          :offset 0)
   (alpha     float          :offset 4)
   (distance  float          :offset 8)
   (w         float          :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype depth-cue-work (structure)
  ((texture-strip-tmpl dma-gif-packet :inline :offset-assert 0)
   (temp-strip-tmpl    dma-gif-packet :inline :offset-assert 32)
   (stencil-tmpl       dma-gif-packet :inline :offset-assert 64)
   (clear-color        vector4w       :inline :offset-assert 96)
   (set-color          vector4w       :inline :offset-assert 112)
   (draw-color         vector4w       :inline :offset-assert 128)
   (depth              depth-cue-data         :offset-assert 144)
   (front              depth-cue-data         :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )


;; ----------------------
;; File - stats-h
;; Source Path - engine/debug/stats-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tr-stat (structure)
  ((groups    uint16  :offset-assert 0)
   (fragments uint16  :offset-assert 2)
   (tris      uint32  :offset-assert 4)
   (dverts    uint32  :offset-assert 8)
   (instances uint16  :offset-assert 12)
   (pad       uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-global-stats (structure)
  ((merc      tr-stat :inline :offset-assert 0)
   (mercneric tr-stat :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype perf-stat (structure)
  ((frame-number   uint32  :offset-assert 0)
   (count          uint32  :offset-assert 4)
   (cycles         uint32  :offset-assert 8)
   (instructions   uint32  :offset-assert 12)
   (icache         uint32  :offset-assert 16)
   (dcache         uint32  :offset-assert 20)
   (select         uint32  :offset-assert 24)
   (ctrl           uint32  :offset-assert 28)
   (accum0         uint32  :offset-assert 32)
   (accum1         uint32  :offset-assert 36)
   (to-vu0-waits   uint32  :offset-assert 40)
   (to-spr-waits   uint32  :offset-assert 44)
   (from-spr-waits uint32  :offset-assert 48)
   )
  :pack-me
  :method-count-assert 14
  :size-assert         #x34
  :flag-assert         #xe00000034
  (:methods
    (perf-stat-method-9 (_type_) none 9)
    (print-to-stream (_type_ string basic) none 10)
    (reset! (_type_) none 11)
    (read! (_type_) none 12)
    (update-wait-stats (_type_ uint uint uint) none 13)
    )
  )

(deftype perf-stat-array (inline-array-class)
  ((data perf-stat :inline :dynamic :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;; ----------------------
;; File - bsp-h
;; Source Path - engine/gfx/vis/bsp-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype bsp-node (structure)
  ((front       int32          :offset-assert 0)
   (back        int32          :offset-assert 4)
   (front-flags uint32         :offset-assert 8)
   (back-flags  uint32         :offset-assert 12)
   (plane       vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(declare-type entity-camera basic)
(deftype bsp-header (drawable)
  (
   (info file-info :offset 4)
   (all-visible-list (pointer uint16) :offset-assert 32)
   (visible-list-length int32 :offset-assert 36)
   (drawable-trees drawable-tree-array :offset-assert 40)
   (pat pointer :offset-assert 44)
   (pat-length int32 :offset-assert 48)

   ;; some sort of texture remapping info
   (texture-remap-table (pointer uint64) :offset-assert 52)
   (texture-remap-table-len int32 :offset-assert 56)

   (texture-ids (pointer texture-id) :offset-assert 60)
   (texture-page-count int32 :offset-assert 64)

   (unk-zero-0 basic :offset-assert 68)

   (name symbol :offset-assert 72)
   (nickname symbol :offset-assert 76)
   (vis-info level-vis-info 8 :offset-assert 80)
   (actors drawable-inline-array-actor :offset-assert 112)
   (cameras (array entity-camera) :offset-assert 116)
   (nodes (inline-array bsp-node) :offset-assert 120)

   (level level :offset-assert 124)
   (current-leaf-idx uint16 :offset-assert 128)
   (unk-data-2 uint16 9 :offset-assert 130)

   (boxes box8s-array :offset-assert 148)
   (current-bsp-back-flags uint32 :offset-assert 152)
   (ambients drawable-inline-array-ambient :offset-assert 156)
   (unk-data-4 float :offset-assert 160)
   (unk-data-5 float :offset-assert 164)
   (adgifs adgif-shader-array :offset-assert 168)
   (actor-birth-order (pointer uint32) :offset-assert 172)
   (split-box-indices (pointer uint16) :offset-assert 176)
   (unk-data-8 uint32 55 :offset-assert 180)

   )
  :method-count-assert 20
  :size-assert         #x190
  :flag-assert         #x1400000190
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace 7)
    (birth (_type_) none 18)
    (deactivate-entities (_type_) none 19)
    )
  )

(deftype game-level (basic)
  ((master-bsp basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype view-frustum (structure)
  ((hither-top-left     vector :inline :offset-assert 0)
   (hither-top-right    vector :inline :offset-assert 16)
   (hither-bottom-left  vector :inline :offset-assert 32)
   (hither-bottom-right vector :inline :offset-assert 48)
   (yon-top-left        vector :inline :offset-assert 64)
   (yon-top-right       vector :inline :offset-assert 80)
   (yon-bottom-left     vector :inline :offset-assert 96)
   (yon-bottom-right    vector :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype cl-stat (structure)
  ((fragments uint32  :offset-assert 0)
   (tris      uint32  :offset-assert 4)
   (output    uint32  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype collide-stats (structure)
  ((other             cl-stat   :inline :offset-assert 0)
   (total             cl-stat   :inline :offset-assert 12)
   (nodes             uint32            :offset-assert 24)
   (calls             uint32            :offset-assert 28)
   (total-target      stopwatch :inline :offset-assert 32)
   (target-cache-fill stopwatch :inline :offset-assert 64)
   (target-ray-poly   stopwatch :inline :offset-assert 96)
   (pad uint32) ;; end with inline basic
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; - Functions

(define-extern map-bsp-tree (function (function bsp-node none) bsp-header bsp-node none))
(define-extern inspect-bsp-tree (function bsp-header bsp-node none))


;; ----------------------
;; File - collide-cache-h
;; Source Path - engine/collide/collide-cache-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-using-spheres-params (structure)
  ((spheres      (inline-array sphere)  :offset-assert 0)
   (num-spheres  uint32  :offset-assert 4)
   (collide-with collide-kind  :offset-assert 8)
   (proc         process-drawable   :offset-assert 16)
   (ignore-pat   pat-surface  :offset-assert 20) ;; flags / bitfield i bet
   (solid-only   basic   :offset-assert 24) ;; probably a symbol
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype collide-puss-sphere (structure)
  ((bsphere sphere         :inline :offset-assert 0)
   (bbox4w  bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-puss-work (structure)
  ((closest-pt     vector         :inline :offset-assert 0)
   (tri-normal     vector         :inline :offset-assert 16)
   (tri-bbox4w     bounding-box4w :inline :offset-assert 32)
   (spheres-bbox4w bounding-box4w :inline :offset-assert 64)
   (spheres        collide-puss-sphere 64 :inline    :offset-assert 96)
   )
  :method-count-assert 11
  :size-assert         #xc60
  :flag-assert         #xb00000c60
  (:methods
    (collide-puss-work-method-9 (_type_ object object) symbol 9)
    (collide-puss-work-method-10 (_type_ object object) symbol 10)
    )
  )

(deftype collide-puyp-work (structure)
  ((best-u     float                      :offset-assert 0)
   (ignore-pat pat-surface                :offset-assert 4)
   (tri-out    collide-tri-result         :offset-assert 8)
   (start-pos  vector             :inline :offset-assert 16)
   (move-dist  vector             :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-cache-tri (structure)
  ((vertex     vector 3 :inline  :offset-assert 0)
   ;(extra-quad UNKNOWN 16 :offset-assert 48)
   (extra-quad uint128 :offset 48)
   (pat        pat-surface     :offset 48)
   (prim-index uint16     :offset 52)
   (user16     uint16     :offset 54)
   (user32     uint32 2  :offset 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype collide-cache-prim (structure)
  ((prim-core    collide-prim-core :inline :offset-assert 0)
   (extra-quad   uint128                   :offset-assert 32)
   (ccache       collide-cache             :offset 32)
   (prim         collide-shape-prim        :offset 36)
   (first-tri    uint16                    :offset 40)
   (num-tris     uint16                    :offset 42)
   (unused       uint8           4       :offset 44)
   (world-sphere vector            :inline :offset 0)
   (collide-as   collide-kind   :offset 16)
   (action       collide-action    :offset 24)
   (offense      collide-offense   :offset 28)
   (prim-type    int8              :offset 29)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (resolve-moving-sphere-tri (_type_ collide-tri-result collide-prim-core vector float collide-action) float 9)
    (resolve-moving-sphere-sphere (_type_ collide-tri-result collide-prim-core vector float collide-action) float 10)
    )
  )

(deftype collide-cache (basic)
  ((num-tris      int32                  :offset-assert 4)
   ;;(num-tris-u    uint32                 :offset 4) ;; added
   (num-prims     int32                  :offset-assert 8)
   (num-prims-u   uint32                 :offset 8 );; added
   (ignore-mask   pat-surface            :offset-assert 12)
   (proc          process-drawable                  :offset-assert 16) ;; types: target
   (collide-box   bounding-box   :inline :offset-assert 32)
   (collide-box4w bounding-box4w :inline :offset-assert 64)
   (collide-with  collide-kind      :offset-assert 96)
   (prims         collide-cache-prim    100 :inline    :offset-assert 112)
   (tris          collide-cache-tri  461 :inline    :offset-assert 4912)
   )
  :method-count-assert 33
  :size-assert         #x8670
  :flag-assert         #x2100008670
  (:methods
    (debug-draw (_type_) none 9)
    (fill-and-probe-using-line-sphere (_type_ vector vector float collide-kind process collide-tri-result pat-surface) float 10)
    (fill-and-probe-using-spheres (_type_ collide-using-spheres-params) symbol 11)
    (fill-and-probe-using-y-probe (_type_ vector float collide-kind process-drawable collide-tri-result pat-surface) float 12)
    (fill-using-bounding-box (_type_ bounding-box collide-kind process-drawable pat-surface) none 13)
    (fill-using-line-sphere (_type_ vector vector float collide-kind process-drawable pat-surface) none 14)
    (fill-using-spheres (_type_ collide-using-spheres-params) none 15)
    (fill-using-y-probe (_type_ vector float collide-kind process-drawable pat-surface) none 16)
    (initialize (_type_) none 17)
    (probe-using-line-sphere (_type_ vector vector float collide-kind collide-tri-result pat-surface) float 18)
    (probe-using-spheres (_type_ collide-using-spheres-params) symbol 19)
    (probe-using-y-probe (_type_ vector float collide-kind collide-tri-result pat-surface) float 20)
    (fill-from-background (_type_ (function bsp-header int collide-list none) (function collide-cache object none)) none 21) ;; second functiom is method 28
    (fill-from-foreground-using-box (_type_) none 22)
    (fill-from-foreground-using-line-sphere (_type_) none 23)
    (fill-from-foreground-using-y-probe (_type_) none 24)
    (fill-from-water (_type_ water-control) none 25) ;; or whatever is from 152 in the process passed to 16
    (load-mesh-from-spad-in-box (_type_ collide-frag-mesh) none 26)
    (collide-cache-method-27 (_type_) none 27)
    (collide-cache-method-28 (_type_) none 28)
    (collide-cache-method-29 (_type_ collide-frag-mesh) none 29)
    (puyp-mesh (_type_ collide-puyp-work collide-cache-prim) none 30)
    (puyp-sphere (_type_ collide-puyp-work collide-cache-prim) vector 31)
    (unpack-background-collide-mesh (_type_ object object object) none 32) ;; helper for fill from background.
    )
  )

(deftype collide-list-item (structure)
  ((mesh collide-frag-mesh  :offset-assert 0)
   (inst basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-list (structure)
  ((num-items int32       :offset-assert 0)
   (items     collide-list-item 256 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x1010
  :flag-assert         #x900001010
  )

(deftype collide-work (structure)
  ((collide-sphere-neg-r sphere         :inline :offset-assert 0)
   (collide-box4w        bounding-box4w :inline :offset-assert 16)
   (inv-mat              matrix         :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; - Symbols

(define-extern *collide-work* collide-work)
(define-extern *collide-cache* collide-cache)
(define-extern *collide-list* collide-list)


;; ----------------------
;; File - collide-h
;; Source Path - engine/collide/collide-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *collide-test-flag* symbol)


;; ----------------------
;; File - shrubbery-h
;; Source Path - engine/gfx/shrub/shrubbery-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

;; Single rectangle -- only one texture (aka adgif-shader)
(deftype billboard (drawable)
  ((flat    adgif-shader :inline :offset-assert 32)
   )
  :method-count-assert 18
  :size-assert         #x70
  :flag-assert         #x1200000070
  )

(deftype shrub-view-data (structure)
  ((data           uint128 3                   :offset-assert 0)
   (texture-giftag gs-gif-tag   :inline :offset 0)
   (consts         vector  :inline :offset 16)
   (fog-clamp      vector  :inline :offset 32)
   (tex-start-ptr  int32          :score 999 :offset 16)
   (gifbufsum      float          :score 999 :offset 16)
   ;; suspected to be part of hacks to get around VU's lack of integer operations
   (mtx-buf-ptr    int32          :score 999 :offset 20)
   (exp23          float          :score 999 :offset 20)
   (fog-0          float          :score 999 :offset 24)
   (fog-1          float          :score 999 :offset 28)
   (fog-min        float          :score 999 :offset 32)
   (fog-max        float          :score 999 :offset 36)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype shrubbery (drawable)
  ((textures (inline-array adgif-shader) :offset 4)
   ;; header breakdown:
   ;; [0] - number of textures / 2
   ;; [1] - number of vertices
   ;; [2] - number of triangle strips
   ;; [3] - ??
   ;;
   ;; Number of Triangles in the Shrub = header[2] - 2 * header[1]
   (header   qword          :offset 8)
   (obj-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   ;; start of static dma-chain
   (obj      uint32         :score 999 :offset 16)
   (vtx      uint32         :score 999 :offset 20)
   (col      uint32         :score 999 :offset 24)
   (stq      uint32         :score 999 :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  )

(deftype instance-shrubbery (instance)
  ((color-indices        uint32   :offset 8)
   (flat-normal  vector   :inline :offset-assert 64)
   (flat-hwidth  float            :offset 76)
   (color        uint32           :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x50
  :flag-assert         #x1200000050
  )

(deftype drawable-inline-array-instance-shrub (drawable-inline-array)
  ((data instance-shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :method-count-assert #x12
  :size-assert #x74
  :flag-assert #x1200000074
  )

(deftype drawable-tree-instance-shrub (drawable-tree)
  ((info prototype-array-shrub-info :offset 8)
   (colors-added time-of-day-palette :offset 12) ;; added
   )
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype generic-shrub-fragment (drawable)
  ((textures (inline-array adgif-shader)         :score 999 :offset 4)
   (vtx-cnt  uint32         :score 999 :offset 8)
   ;; the total size of the textures array
   ;; - each texture is 5 qwords
   (cnt-qwc  uint8          :score 999 :offset 12)
   (vtx-qwc  uint8          :score 999 :offset 13)
   (col-qwc  uint8          :score 999 :offset 14)
   (stq-qwc  uint8          :score 999 :offset 15)
   (cnt      uint32         :score 999 :offset 16)
   (vtx      uint32         :score 999 :offset 20)
   (col      uint32         :score 999 :offset 24)
   (stq      uint32         :score 999 :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  )

(deftype prototype-shrubbery (drawable-inline-array)
  ((data shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :method-count-assert 18
  :size-assert         #x44
  :flag-assert         #x1200000044
  )

(deftype prototype-trans-shrubbery (prototype-shrubbery)
  ()
  :method-count-assert #x12
  :size-assert #x44
  :flag-assert #x1200000044
  )

(deftype prototype-generic-shrub (drawable-group)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype shrubbery-matrix (structure)
  ((mat   matrix :inline :offset-assert 0)
   (color qword  :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shrub-near-packet (structure)
  ((matrix-tmpl dma-packet :inline :offset-assert 0)
   (header-tmpl dma-packet :inline :offset-assert 16)
   (stq-tmpl    dma-packet :inline :offset-assert 32)
   (color-tmpl  dma-packet :inline :offset-assert 48)
   (vertex-tmpl dma-packet :inline :offset-assert 64)
   (mscal-tmpl  dma-packet :inline :offset-assert 80)
   (init-tmpl   dma-packet :inline :offset-assert 96)
   (init-data   uint32    8       :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(deftype instance-shrub-work (structure)
  ((dummy                     qword        3       :inline :offset-assert 0)
   (chaina                    qword        8       :inline :offset-assert 48)
   (chainb                    qword        8       :inline :offset-assert 176)
   (colors                    rgba           1024    :offset-assert 304)
   (matrix-tmpl               qword        20      :inline :offset-assert 4400)
   (count-tmpl                vector4w        20      :inline :offset-assert 4720)
   (mscalf-tmpl               dma-packet     :inline :offset-assert 5040)
   (mscalf-ret-tmpl           dma-packet     :inline :offset-assert 5056)
   (adgif-tmpl                dma-gif-packet :inline :offset-assert 5072)
   (billboard-tmpl            dma-gif-packet :inline :offset-assert 5104)
   (billboard-const           vector         :inline :offset-assert 5136)
   (shrub-near-packets        shrub-near-packet 6 :inline      :offset-assert 5152)
   (dma-ref                   dma-packet     :inline :offset-assert 6016)
   (dma-end                   dma-packet     :inline :offset-assert 6032)
   (wind-const                vector         :inline :offset-assert 6048)
   (constants                 vector         :inline :offset-assert 6064)
   (color-constant            vector4w       :inline :offset-assert 6080)
   (hmge-d                    vector         :inline :offset-assert 6096)
   (hvdf-offset               vector         :inline :offset-assert 6112)
   (wind-force                vector         :inline :offset-assert 6128)
   (color                     vector         :inline :offset-assert 6144)
   (bb-color                  vector         :inline :offset-assert 6160)
   (min-dist                  vector         :inline :offset-assert 6176)
   (temp-vec                  vector         :inline :offset-assert 6192)
   (guard-plane               plane 4 :inline      :offset-assert 6208)
   (plane                     plane 4 :inline      :offset-assert 6272)
   (last                      uint32        4       :offset-assert 6336)
   (next                      uint32        4       :offset-assert 6352)
   (count                     uint16        4       :offset-assert 6368)
   (mod-count                 uint16        4       :offset-assert 6376)
   (wind-vectors              uint32                 :offset-assert 6384)
   (instance-ptr              uint32                 :offset-assert 6388)
   (chain-ptr                 uint32                 :offset-assert 6392)
   (chain-ptr-next            uint32                 :offset-assert 6396)
   (stack-ptr                 uint32                 :offset-assert 6400)
   (bucket-ptr                uint32                 :offset-assert 6404)
   (src-ptr                   uint32                 :offset-assert 6408)
   (to-spr                    uint32                 :offset-assert 6412)
   (from-spr                  uint32                 :offset-assert 6416)
   (shrub-count               uint32                 :offset-assert 6420)
   ;;(stack-ptr               uint32                 :offset-assert 6400) ;; this field appears twice?
   (node                      uint32        6       :offset 6428)
   (length                    uint32        6       :offset-assert 6452)
   (prototypes                uint32                 :offset-assert 6476)
   ;;(bucket-ptr                uint32                 :offset-assert 6404) appears twice

   (start-bank                uint8        20        :offset 6484)
   (buffer-index              uint32                 :offset-assert 6504)
   (current-spr               uint32                 :offset-assert 6508)
   (current-mem               uint32                 :offset-assert 6512)
   (current-shrub-near-packet uint32                 :offset-assert 6516)
   ;;(to-spr                    uint32                 :offset-assert 6412)
   (dma-buffer                basic                  :offset 6524)
   (near-last                 uint32                 :offset-assert 6528)
   (near-next                 uint32                 :offset-assert 6532)
   (near-count                uint32                 :offset-assert 6536)
   (last-shrubs               uint32                 :offset-assert 6540)
   (chains                    uint32                 :offset-assert 6544)
   (flags                     uint32                 :offset-assert 6548)
   (paused                    basic                  :offset-assert 6552)
   (node-count                uint32                 :offset-assert 6556)
   (inst-count                uint32                 :offset-assert 6560)
   (wait-from-spr             uint32                 :offset-assert 6564)
   (wait-to-spr               uint32                 :offset-assert 6568)
   )
  :method-count-assert 9
  :size-assert         #x19ac
  :flag-assert         #x9000019ac
  )

(deftype instance-shrub-dma (structure)
  ((instancea uint128 325 :offset-assert 0)
   (instanceb uint128 325 :offset-assert 5200)
   (outa      uint128 128 :offset-assert 10400)
   (outb      uint128 128 :offset-assert 12448)
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

;; - Functions

(define-extern shrubbery-login-post-texture (function shrubbery none))

;; - Symbols

(define-extern *shrub-state* int)


;; ----------------------
;; File - tie-h
;; Source Path - engine/gfx/tie/tie-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tie-fragment (drawable)
  ((gif-ref       (inline-array adgif-shader) :offset 4)
   (point-ref     uint32         :offset 8)
   (color-index   uint16         :offset 12)
   (base-colors   uint8          :offset 14)
   (tex-count     uint16         :offset-assert 32)
   (gif-count     uint16         :offset-assert 34)
   (vertex-count  uint16         :offset-assert 36)
   (color-count   uint16         :offset-assert 38)
   (num-tris      uint16         :offset-assert 40)
   (num-dverts    uint16         :offset-assert 42)
   (dp-ref        uint32         :offset-assert 44)
   (dp-qwc        uint32         :offset-assert 48)
   (generic-ref   uint32         :offset-assert 52) ;; L891 ish, just a pointer to data.
   (generic-count uint32         :offset-assert 56)
   (debug-lines   (array vector-array)  :offset-assert 60)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )

(deftype instance-tie (instance)
  ((color-indices uint32           :offset 8)
   (bucket-ptr    prototype-bucket-tie            :offset 12)
   (max-scale     uint16           :offset 38)
   (flags         uint16           :offset 46)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )

(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data instance-tie 1 :inline :offset-assert 32)  ;; not sure on type here
   (pad uint32)
   )
  :method-count-assert 18
  :size-assert         #x64
  :flag-assert         #x1200000064
  )

(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes proxy-prototype-array-tie           :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x24
  :flag-assert         #x1200000024
  )

(deftype prototype-tie (drawable-inline-array)
  ((data tie-fragment 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :method-count-assert 18
  :size-assert         #x64
  :flag-assert         #x1200000064
  )

(deftype tie-matrix (structure)
  ((mat   matrix :inline :offset-assert 0)
   (morph qword  :inline :offset-assert 64)
   (fog   qword  :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype instance-tie-work (structure)
  ((wind-const                  vector     :inline :offset-assert 0)
   (hmge-d                      vector     :inline :offset-assert 16)
   (hvdf-offset                 vector     :inline :offset-assert 32)
   (wind-force                  vector     :inline :offset-assert 48)
   (constant                    vector     :inline :offset-assert 64)
   (far-morph                   vector     :inline :offset-assert 80)
   (dist-test                   vector     :inline :offset-assert 96)
   (min-dist                    vector     :inline :offset-assert 112)
   (guard-plane                 plane 4    :inline :offset-assert 128)
   (upload-color-0              dma-packet :inline :offset-assert 192)
   (upload-color-1              dma-packet :inline :offset-assert 208)
   (upload-color-2              dma-packet :inline :offset-assert 224)
   (upload-color-ret            dma-packet :inline :offset-assert 240)
   (upload-color-temp           dma-packet :inline :offset-assert 256)
   (generic-color-0             dma-packet :inline :offset-assert 272)
   (generic-color-1             dma-packet :inline :offset-assert 288)
   (generic-color-end           dma-packet :inline :offset-assert 304)
   (tie-near-perspective-matrix matrix     :inline :offset-assert 320)
   (wind-vectors                uint32             :offset-assert 384)
   (test-id                     uint32             :offset-assert 388)
   (test-id2                    uint32             :offset-assert 392)
   (dma-buffer                  basic              :offset-assert 396)
   (to-spr                      uint32             :offset-assert 400)
   (from-spr                    uint32             :offset-assert 404)
   (wind-work                   uint32             :offset-assert 408)
   (cur-vis-bits                uint32             :offset-assert 412)
   (end-vis-bits                uint32             :offset-assert 416)
   (first-generic-prototype     uint32             :offset-assert 420)
   (refl-fade-fac               float              :offset-assert 424)
   (refl-fade-end               float              :offset-assert 428)
   (flags                       uint32             :offset-assert 432)
   (paused                      basic              :offset-assert 436)
   (wait-from-spr               uint32             :offset-assert 440)
   (wait-to-spr                 uint32             :offset-assert 444)
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

(deftype instance-tie-dma (structure)
  ((banka instance-tie 32 :inline :offset-assert 0)
   (bankb instance-tie 32 :inline :offset-assert 2048)
   (outa  uint128           256 :offset-assert 4096)
   (outb  uint128           256 :offset-assert 8192)
   ;; this is outside the type????
   (work  instance-tie-work :dynamic  :offset-assert 12288)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

(deftype prototype-tie-work (structure)
  ((upload-palette-0      dma-packet :inline :offset-assert 0)
   (upload-palette-1      dma-packet :inline :offset-assert 16)
   (upload-model-0        dma-packet :inline :offset-assert 32)
   (upload-model-1        dma-packet :inline :offset-assert 48)
   (upload-model-2        dma-packet :inline :offset-assert 64)
   (upload-model-3        dma-packet :inline :offset-assert 80)
   (upload-model-near-0   dma-packet :inline :offset-assert 96)
   (upload-model-near-1   dma-packet :inline :offset-assert 112)
   (upload-model-near-2   dma-packet :inline :offset-assert 128)
   (upload-model-near-3   dma-packet :inline :offset-assert 144)
   (upload-model-near-4   dma-packet :inline :offset-assert 160)
   (generic-envmap-shader dma-packet :inline :offset-assert 176)
   (generic-palette       dma-packet :inline :offset-assert 192)
   (generic-model-0       dma-packet :inline :offset-assert 208)
   (generic-model-1       dma-packet :inline :offset-assert 224)
   (generic-model-2       dma-packet :inline :offset-assert 240)
   (generic-model-next    dma-packet :inline :offset-assert 256)
   (clamp                 uint64             :offset-assert 272)
   (prototype-array       basic              :offset-assert 280)
   (generic-wait-from-spr uint32             :offset-assert 284)
   (generic-wait-to-spr   uint32             :offset-assert 288)
   (wait-from-spr         uint32             :offset-assert 292)
   (wait-to-spr           uint32             :offset-assert 296)
   (near-wait-from-spr    uint32             :offset-assert 300)
   (near-wait-to-spr      uint32             :offset-assert 304)
   )
  :method-count-assert 9
  :size-assert         #x134
  :flag-assert         #x900000134
  )

;; stored at spr + 16 (I think)
(deftype prototype-tie-dma (structure)
  ((colora          rgba 256 :offset-assert 0)
   (colorb          rgba 256 :offset-assert 1024)
   (outa            uint128 256 :offset-assert 2048)
   (outb            uint128 256 :offset-assert 6144)
   (length          uint32      :offset-assert 10240)
   (dma-buffer      basic       :offset-assert 10244)
   (this-frag-count uint32      :offset-assert 10248)

   (next            uint32 4   :offset 10256)

   (geometry        uint32 4   :offset-assert 10272)
   (frag-count      uint8 4   :offset-assert 10288)
   )
  :method-count-assert 9
  :size-assert         #x2834
  :flag-assert         #x900002834
  )

;; - Symbols

(define-extern *instance-tie-work-copy* instance-tie-work)


;; ----------------------
;; File - tfrag-h
;; Source Path - engine/gfx/tfrag/tfrag-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tfragment-stats (structure)
  ((num-tris   uint16 4 :offset-assert 0)
   (num-dverts uint16 4 :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype tfragment-debug-data (structure)
  ((stats       tfragment-stats :inline :offset-assert 0)
   (debug-lines (array vector-array)    :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype generic-tfragment (structure)
  ((dummy int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype tfragment (drawable)
  (
   (color-index       uint16                       :offset 6)
   (debug-data        tfragment-debug-data         :offset 8)
   (color-indices     uint32                       :offset 12)
   (colors            uint32                       :offset 12)
   (dma-chain         uint32              3       :offset-assert 32)
   (dma-common        uint32                       :offset 32)
   (dma-level-0       uint32                       :offset 32)
   (dma-base          uint32                       :offset 36)
   (dma-level-1       uint32                       :offset 40)
   (dma-qwc           uint8              4       :offset 44)
   (shader            (inline-array adgif-shader)                       :offset 48)
   (num-shaders       uint8                        :offset 52)
   (num-base-colors   uint8                        :offset 53)
   (num-level0-colors uint8                        :offset 54)
   (num-level1-colors uint8                        :offset 55)
   (color-offset      uint8                        :offset 56)
   (color-count       uint8                        :offset 57)
   (pad0              uint8                        :offset 58)
   (pad1              uint8                        :offset 59)
   (generic           generic-tfragment            :offset-assert 60)
   (generic-u32       uint32                       :offset 60)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )

(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((data tfragment 1 :inline :offset-assert 32)
   (pad uint32))
  :method-count-assert 18
  :size-assert         #x64
  :flag-assert         #x1200000064
  )

(deftype drawable-inline-array-trans-tfrag (drawable-inline-array-tfrag)
  ;; I think this is a bug.
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2 uint32))
  :method-count-assert #x12
  :size-assert #xb4
  :flag-assert #x12000000b4
  )

(deftype drawable-tree-tfrag (drawable-tree)
  ((time-of-day-pal time-of-day-palette :offset 12)
   (arrays    drawable-inline-array 1  :offset 32 :score 100) ;; either drawable-inline-array-node or drawable-inline-array-tfrag
   )
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype drawable-tree-trans-tfrag (drawable-tree-tfrag)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype drawable-tree-dirt-tfrag (drawable-tree-tfrag)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype drawable-tree-ice-tfrag (drawable-tree-tfrag)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype drawable-tree-lowres-tfrag (drawable-tree-tfrag)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype drawable-tree-lowres-trans-tfrag (drawable-tree-trans-tfrag)
  ()
  :method-count-assert #x12
  :size-assert #x24
  :flag-assert #x1200000024
  )

(deftype tfrag-dists (structure)
  ((data   uint32 16 :offset-assert 0 :score -1)
   (vector vector 4 :inline  :offset 0 :score -1)
   (k0s    vector 2 :inline  :offset 0)
   (k1s    vector 2 :inline  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype tfrag-data (structure)
  ((data        uint32     56      :offset 0 :score -1)
   (vector      vector 14 :inline      :offset 0 :score -1)
   (fog         vector      :inline :offset 0)
   (val         vector      :inline :offset 16)

   (strgif      gs-gif-tag  :inline :offset 32)   ;; was qword
   (fangif      gs-gif-tag  :inline :offset 48)   ;; was qword
   (adgif       gs-gif-tag  :inline :offset 64)   ;; was qword
   (hvdf-offset vector      :inline :offset 80)
   (hmge-scale  vector      :inline :offset 96)
   (invh-scale  vector      :inline :offset 112)
   (ambient     vector      :inline :offset 128)
   (guard       vector      :inline :offset 144)
   (dists       tfrag-dists :inline :offset 160)
   (k0s         uint128     2       :offset 160)
   (k1s         uint128     2       :offset 192)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype tfrag-control (structure)
  ((num-base-points           uint32  :offset-assert 0)
   (num-shared-base-points    uint32  :offset-assert 4)
   (num-level0-points         uint32  :offset-assert 8)
   (num-shared-level0-points  uint32  :offset-assert 12)
   (num-level1-points         uint32  :offset-assert 16)
   (num-shared-level1-points  uint32  :offset-assert 20)
   (ptr-vtxdata               uint32  :offset-assert 24)
   (ptr-base-points           uint32  :offset-assert 28)
   (ptr-shared-base-points    uint32  :offset-assert 32)
   (ptr-level0-points         uint32  :offset-assert 36)
   (ptr-shared-level0-points  uint32  :offset-assert 40)
   (ptr-level1-points         uint32  :offset-assert 44)
   (ptr-shared-level1-points  uint32  :offset-assert 48)
   (ptr-draw-points           uint32  :offset-assert 52)
   (ptr-interpolated-0        uint32  :offset-assert 56)
   (ptr-shared-interpolated-0 uint32  :offset-assert 60)
   (ptr-interpolated1         uint32  :offset-assert 64)
   (ptr-shared-interpolated1  uint32  :offset-assert 68)
   (ptr-strip-data            uint32  :offset-assert 72)
   (ptr-texture-data          uint32  :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype tfrag-stats (structure)
  ((from         int32  :offset-assert 0)
   (to           int32  :offset-assert 4)
   (cnt          int32  :offset-assert 8)
   (tris         int32  :offset-assert 12)
   (tfaces       int32  :offset-assert 16)
   (tfrags       int32  :offset-assert 20)
   (dtris        int32  :offset-assert 24)
   (base-verts   int32  :offset-assert 28)
   (level0-verts int32  :offset-assert 32)
   (level1-verts int32  :offset-assert 36)
   (dma-cnt      int32  :offset-assert 40)
   (dma-dta      int32  :offset-assert 44)
   (dma-tex      int32  :offset-assert 48)
   (strips       int32  :offset-assert 52)
   (drawpoints   int32  :offset-assert 56)
   (vif          int32  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype tfrag-packet (structure)
  ((tag uint128 2 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tfrag-work (structure)
  ((base-tmpl             dma-packet :inline :offset-assert 0)
   (level-0-tmpl          dma-packet :inline :offset-assert 16)
   (common-tmpl           dma-packet :inline :offset-assert 32)
   (level-1-tmpl          dma-packet :inline :offset-assert 48)
   (color-tmpl            dma-packet :inline :offset-assert 64)
   (frag-dists            vector     :inline :offset-assert 80)
   (max-dist              vector     :inline :offset-assert 96)
   (min-dist              vector     :inline :offset-assert 112)
   (color-ptr             vector4w   :inline :offset-assert 128)
   (tr-stat-tfrag         tr-stat            :offset-assert 144)
   (tr-stat-tfrag-near    tr-stat            :offset-assert 148)
   (vu1-enable-tfrag      int32              :offset-assert 152)
   (vu1-enable-tfrag-near int32              :offset-assert 156)
   (cur-vis-bits          uint32             :offset-assert 160)
   (end-vis-bits          uint32             :offset-assert 164)
   (src-ptr               uint32             :offset-assert 168)
   (last-call             uint32             :offset-assert 172)
   (dma-buffer            basic              :offset-assert 176)
   (test-id               uint32             :offset-assert 180)
   (wait-from-spr         uint32             :offset-assert 184)
   (wait-to-spr           uint32             :offset-assert 188)
   (near-wait-from-spr    uint32             :offset-assert 192)
   (near-wait-to-spr      uint32             :offset-assert 196)
   )
  :method-count-assert 9
  :size-assert         #xc8
  :flag-assert         #x9000000c8
  )

(deftype tfrag-dma (structure)
  ((banka  tfragment 16 :inline   :offset-assert 0)
   (bankb  tfragment 16 :inline  :offset-assert 1024)
   (outa   uint128 128  :offset-assert 2048)
   (outb   uint128 128  :offset-assert 4096)
   (colors rgba 2047 :offset-assert 6144) ;; why is this one short!!!
   )
  :method-count-assert 9
  :size-assert         #x37fc
  :flag-assert         #x9000037fc
  )


;; ----------------------
;; File - background-h
;; Source Path - engine/gfx/background-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype background-work (basic)
  ((tfrag-tree-count              int32     :offset-assert 4)
   (tfrag-trees                   drawable-tree-tfrag 8 :offset-assert 8)
   (tfrag-levels                  level 8 :offset-assert 40)
   (trans-tfrag-tree-count        int32     :offset-assert 72)
   (trans-tfrag-trees             drawable-tree-trans-tfrag 8 :offset-assert 76)
   (trans-tfrag-levels            level 8 :offset-assert 108)
   (dirt-tfrag-tree-count         int32     :offset-assert 140)
   (dirt-tfrag-trees              drawable-tree-dirt-tfrag 8 :offset-assert 144)
   (dirt-tfrag-levels             level 8 :offset-assert 176)
   (ice-tfrag-tree-count          int32     :offset-assert 208)
   (ice-tfrag-trees               drawable-tree-ice-tfrag 8 :offset-assert 212)
   (ice-tfrag-levels              level 8 :offset-assert 244)
   (lowres-tfrag-tree-count       int32     :offset-assert 276)
   (lowres-tfrag-trees            drawable-tree-lowres-tfrag 8 :offset-assert 280)
   (lowres-tfrag-levels           level 8 :offset-assert 312)
   (lowres-trans-tfrag-tree-count int32     :offset-assert 344)
   (lowres-trans-tfrag-trees      drawable-tree-trans-tfrag 8 :offset-assert 348)
   (lowres-trans-tfrag-levels     level 8 :offset-assert 380)
   (shrub-tree-count              int32     :offset-assert 412)
   (shrub-trees                   drawable-tree-instance-shrub 8 :offset-assert 416)
   (shrub-levels                  level 8 :offset-assert 448)
   (tie-tree-count                int32     :offset-assert 480)
   (tie-trees                     drawable-tree-instance-tie 8 :offset-assert 484)
   (tie-levels                    level 8 :offset-assert 516)
   (tie-generic                   basic 8 :offset-assert 548)
   (wait-to-vu0                   uint32    :offset-assert 580)
   )
  :method-count-assert 9
  :size-assert         #x248
  :flag-assert         #x900000248
  )


;; ----------------------
;; File - subdivide-h
;; Source Path - engine/gfx/tfrag/subdivide-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype subdivide-settings (basic)
  ;; guess on these being floats
  ((dist   float 5 :offset-assert 4)
   (meters float 5 :offset-assert 24)
   (close  float 4 :offset-assert 44)
   (far    float 4 :offset-assert 60)
   )
  (:methods
    (new (symbol type meters meters) _type_)
    )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype subdivide-dists (structure)
  ((data   uint32 32 :offset 0)
   (vector vector 8 :inline  :offset 0)
   (k0s    uint128 4  :offset 0)
   (k1s    uint128 4  :offset 64)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype gs-packed-rgba (structure)
  ((data  int32 4 :offset-assert 0)
   (red   int32     :offset 0)
   (green int32     :offset 4)
   (blue  int32     :offset 8)
   (alpha int32     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-xyzw (structure)
  ((data int32 4 :offset-assert 0)
   (x    int32     :offset 0)
   (y    int32     :offset 4)
   (z    int32     :offset 8)
   (w    int32     :offset 12)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-stq (structure)
  ((data  float 4 :offset-assert 0)
   (tex-s float     :offset 0)
   (tex-t float     :offset 4)
   (tex-q float     :offset 8)
   (quad  uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-gt (structure)
  ((stq  gs-packed-stq  :inline :offset-assert 0)
   (rgba gs-packed-rgba :inline :offset-assert 16)
   (xyzw gs-packed-xyzw :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype gs-packed-gt4 (structure)
  ((data gs-packed-gt 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype terrain-bsp (structure)
  ((lev-index int32  :offset-assert 0)
   (mood      basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype terrain-stats (structure)
  ((pris             tr-stat :inline :offset-assert 0)
   (tie-generic      tr-stat :inline :offset-assert 16)
   (tie              tr-stat :inline :offset-assert 32)
   (tie-near         tr-stat :inline :offset-assert 48)
   (shrub-near       tr-stat :inline :offset-assert 64)
   (shrub            tr-stat :inline :offset-assert 80)
   (tfrag-near       tr-stat :inline :offset-assert 96)
   (tfrag            tr-stat :inline :offset-assert 112)
   (billboard        tr-stat :inline :offset-assert 128)
   (trans-tfrag      tr-stat :inline :offset-assert 144)
   (trans-tfrag-near tr-stat :inline :offset-assert 160)
   (trans-pris       tr-stat :inline :offset-assert 176)
   (trans-shrub      tr-stat :inline :offset-assert 192)
   (ocean-mid        tr-stat :inline :offset-assert 208)
   (ocean-near       tr-stat :inline :offset-assert 224)
   (total            tr-stat :inline :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype dma-area (structure)
  ((draw-node-dma      draw-node-dma      :inline :offset 0)
   (tfrag-dma          tfrag-dma          :inline :offset 0)
   (instance-shrub-dma instance-shrub-dma :inline :offset 0)
   (instance-tie-dma   instance-tie-dma   :inline :offset 0)
   (prototype-tie-dma  prototype-tie-dma  :inline :offset 0)
   (time-of-day-dma    time-of-day-dma    :inline :offset 0)
   (decomp-work        decomp-work        :inline :offset 0)
   (ocean-vertex       ocean-vertex   4   :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

(deftype background-area (structure)
  ((dma-area dma-area :inline :offset-assert 0)
   (vis-list uint8  2048    :offset-assert 14496)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

(deftype foreground-area (structure)
  (
   (joint-work   joint-work   :inline :offset-assert 0 :score 1999999999)
   (generic-work generic-work :inline :offset 0)
   (bone-mem     bone-memory  :inline :offset 0)
   (shadow-work  shadow-work  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x3fd0
  :flag-assert         #x900003fd0
  )

(deftype ambient-area (structure)
  ((ambient-list ambient-list :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2004
  :flag-assert         #x900002004
  )

(deftype work-area (structure)
  ((background background-area :inline :offset-assert 0)
   (foreground foreground-area :inline :offset 0)
   (ambient    ambient-area    :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

(deftype terrain-context (structure)
  ((bsp  terrain-bsp :inline :offset-assert 0)
   (work work-area   :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x40b0
  :flag-assert         #x9000040b0
  )

;; - Symbols

(define-extern *terrain-stats* terrain-stats)
(define-extern *collide-stats* collide-stats)


;; ----------------------
;; File - entity-h
;; Source Path - engine/entity/entity-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype entity-perm (structure)
  ((user-object object 2 :offset-assert 0)
   (user-uint64 uint64    :offset 0)
   (user-float  float 2 :offset 0)
   (user-int32  int32 2 :offset 0)
   (user-uint32 uint32 2 :offset 0)
   (user-int16  int16 4 :offset 0)
   (user-uint16 uint16 4 :offset 0)
   (user-int8   int8 8 :offset 0)
   (user-uint8  uint8 8 :offset 0)
   (status      entity-perm-status    :offset-assert 8)
   (dummy       uint8 1 :offset-assert 10)
   (task        game-task     :offset-assert 11)
   (aid         actor-id    :offset-assert 12)
   (quad        uint128   :offset 0)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (update-perm! (_type_ symbol entity-perm-status) _type_ 9)
    )
  )

(deftype entity-links (structure)
  ((prev-link entity-links         :offset-assert 0)
   (next-link entity-links         :offset-assert 4)
   (entity    entity                :offset-assert 8)
   (process   process              :offset-assert 12)
   (level     level                :offset-assert 16)
   (vis-id    int32                :offset-assert 20)
   (trans     vector       :inline :offset-assert 32)
   (perm      entity-perm  :inline :offset-assert 48)
   (status    uint16               :offset 56) ;; overlays
   (aid       actor-id             :offset 60)
   (task      game-task            :offset 59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (birth? (_type_ vector) symbol 9)
    )
  )

(deftype entity-perm-array (inline-array-class)
  ((data entity-perm :inline :dynamic :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity-links-array (inline-array-class)
  ((data entity-links :inline :dynamic :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity (res-lump)
  (
    (trans vector :inline :offset-assert 32)
    (aid uint32 :offset-assert 48) ; prints with ~A but other entity types use uint32 :shrug: for now
   )
  :method-count-assert 27
  :size-assert         #x34
  :flag-assert         #x1b00000034
  ;; unrecognized get op: (set! t9 find-parent-method) parent was res-lump
  (:methods
    (birth! (_type_) _type_ 22)
    (kill! (_type_) _type_ 23)
    (add-to-level! (_type_ level-group level actor-id) none 24)
    (remove-from-level! (_type_ level-group) _type_ 25)
    (get-level (_type_) level 26)
    )
  )

(deftype entity-camera (entity)
  (
    (connect connectable :inline :offset-assert 64)
  )
  :method-count-assert 27
  :size-assert #x50
  :flag-assert #x1b00000050
  (:methods
    )
  )

(deftype entity-ambient-data (structure)
  ((user-object object 3  :score -100 :offset-assert 0)
   (function    (function drawable-ambient vector none)      :offset-assert 12)
   (quad        uint128    :offset 0)
   (user-uint64 uint64 1  :offset 0)
   (user-float  float 3  :offset 0)
   (user-int32  int32 3  :offset 0)
   (user-uint32 uint32 3  :offset 0)
   (user-int16  int16 6  :offset 0)
   (user-uint16 uint16 6  :offset 0)
   (user-int8   int8 12 :offset 0)
   (user-uint8  uint8 12 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity-ambient-data-array (inline-array-class)
  ((data entity-ambient-data :dynamic :inline))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype entity-ambient (entity)
  ((ambient-data  entity-ambient-data  :score 50 :offset 24) ;; added!
   )
  :method-count-assert 29
  :size-assert #x34
  :flag-assert #x1d00000034
  (:methods
    (draw-debug (_type_) none 27)
    (birth-ambient! (_type_) none 28)
    )
  )

(declare-type nav-mesh basic)
(deftype entity-actor (entity)
  (
    (nav-mesh nav-mesh :offset-assert 52)
    (etype type :offset-assert 56) ;; probably type
    (task game-task :offset-assert 60)
    (vis-id uint16 :offset-assert 62)
    (vis-id-signed int16 :offset 62) ;; added
    (quat quaternion :inline :offset-assert 64)
  )
  :method-count-assert 31
  :size-assert         #x50
  :flag-assert         #x1f00000050
  ;; unrecognized get op: (set! t9 find-parent-method) parent was entity
  (:methods
    (next-actor (_type_) entity-actor 27)
    (prev-actor (_type_) entity-actor 28)
    (debug-print (_type_ symbol type) none 29)
    (set-or-clear-status! (_type_ entity-perm-status symbol) none 30)
    )
  )

(deftype entity-info (basic)
  ((ptype     type   :offset-assert 4)
   (package   basic  :offset-assert 8)
   (art-group pair   :offset-assert 12)
   (pool      basic  :offset-assert 16)
   (heap-size int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype actor-bank (basic)
  ((pause-dist float  :offset-assert 4)
   (birth-dist float  :offset-assert 8)
   (birth-max  int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern entity-nav-login (function entity-actor none))

;; - Symbols

(define-extern *generate-actor-vis* symbol)
(define-extern *generate-actor-vis-start* symbol)
(define-extern *generate-actor-vis-output* symbol)
(define-extern *ACTOR-bank* actor-bank)


;; ----------------------
;; File - sprite-h
;; Source Path - engine/gfx/sprite/sprite-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sprite-vec-data-2d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert 0 :score -10)
   (flag-rot-sy vector   :inline :offset-assert 16 :score -10)
   (r-g-b-a     vector   :inline :offset-assert 32 :score -10)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (rot         float            :offset 24)
   (flag        int32            :offset 16)
   (matrix      int32            :offset 20)
   (warp-turns  int32            :offset 16)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0)
   (data64      uint64  6       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-2d (basic)
  ((num-sprites int32 2 :offset-assert 4)
   (num-valid   int32 2 :offset-assert 12)
   (vec-data    pointer   :offset-assert 20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24)
   (pad         uint128 4 :offset-assert 32)
   (data        uint128 1 :offset-assert 96)
   )
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype sprite-vec-data-3d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert 0)
   (qx-qy-qz-sy vector   :inline :offset-assert 16)
   (r-g-b-a     vector   :inline :offset-assert 32)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (qx          float            :offset 16)
   (qy          float            :offset 20)
   (qz          float            :offset 24)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (rot         vector3s :inline :offset 16)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-3d (basic)
  ((num-sprites int32 2 :offset-assert 4)
   (num-valid   int32 2 :offset-assert 12)
   (vec-data    pointer   :offset-assert 20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24)
   (data        uint128 1 :offset-assert 32)
   )
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;; ----------------------
;; File - shadow-h
;; Source Path - engine/gfx/shadow/shadow-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype fake-shadow (structure)
  ((px    float  :offset-assert 0)
   (py    float  :offset-assert 4)
   (pz    float  :offset-assert 8)
   (scale float  :offset-assert 12)
   (qx    float  :offset-assert 16)
   (qy    float  :offset-assert 20)
   (qz    float  :offset-assert 24)
   (flags int32  :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype fake-shadow-buffer (basic)
  ((num-shadows int32      :offset-assert 4)
   (data fake-shadow 32 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x408
  :flag-assert         #x900000408
  )

;; - Symbols

(define-extern *fake-shadow-buffer-1* fake-shadow-buffer)
(define-extern *fake-shadow-buffer-2* fake-shadow-buffer)
(define-extern *fake-shadow-buffer* fake-shadow-buffer)


;; ----------------------
;; File - eye-h
;; Source Path - engine/gfx/eye-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype eye (structure)
  ((data        vector 2 :inline :offset-assert 0 :score 100)
   (x           float     :offset 0)
   (y           float     :offset 4)
   (lid         float     :offset 8)
   (iris-scale  float     :offset 16)
   (pupil-scale float     :offset 20)
   (lid-scale   float     :offset 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype eye-control (structure)
  ((process     handle         :offset-assert 0)
   (random-time uint16         :offset-assert 8)
   (level       uint16         :offset-assert 10)
   (blink       float          :offset-assert 12)
   (shaders     (inline-array adgif-shader)         :offset-assert 16)
   (left        eye    :inline :offset-assert 32)
   (right       eye    :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype eye-control-array (basic)
  ((data eye-control 11 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x430
  :flag-assert         #x900000430
  )

(deftype eye-work (structure)
  ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
   (blink-table  float        10      :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

;; - Symbols

(define-extern *eye-control-array* eye-control-array)


;; ----------------------
;; File - sparticle-launcher-h
;; Source Path - engine/sparticle/sparticle-launcher-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

(defenum sp-field-id
  :type uint16

  (misc-fields-start 0)
  (spt-texture 1)
  (spt-anim 2)
  (spt-anim-speed 3)
  (spt-birth-func 4)
  (spt-joint/refpoint 5)
  (spt-num 6)
  (spt-sound 7)
  (misc-fields-end 8)

  (sprite-fields-start 9)
  (spt-x 10)
  (spt-y 11)
  (spt-z 12)
  (spt-scale-x 13)
  (spt-rot-x 14)
  (spt-rot-y 15)
  (spt-rot-z 16)
  (spt-scale-y 17)
  (spt-r 18)
  (spt-g 19)
  (spt-b 20)
  (spt-a 21)
  (sprite-fields-end 22)

  (cpu-fields-start 23)
  (spt-omega 24)
  (spt-vel-x 25)
  (spt-vel-y 26)
  (spt-vel-z 27)
  (spt-scalevel-x 28)
  (spt-rotvel-x 29)
  (spt-rotvel-y 30)
  (spt-rotvel-z 31)
  (spt-scalevel-y 32)
  (spt-fade-r 33)
  (spt-fade-g 34)
  (spt-fade-b 35)
  (spt-fade-a 36)
  (spt-accel-x 37)
  (spt-accel-y 38)
  (spt-accel-z 39)
  (spt-dummy 40)
  (spt-quat-x 41)
  (spt-quat-y 42)
  (spt-quat-z 43)
  (spt-quad-w 44)
  (spt-friction 45)
  (spt-timer 46)
  (spt-flags 47)
  (spt-userdata 48)
  (spt-func 49)
  (spt-next-time 50)
  (spt-next-launcher 51)
  (cpu-fields-end 52)

  (launch-fields-start 53)
  (spt-launchrot-x 54)
  (spt-launchrot-y 55)
  (spt-launchrot-z 56)
  (spt-launchrot-w 57)
  (spt-conerot-x 58)
  (spt-conerot-y 59)
  (spt-conerot-z 60)
  (spt-conerot-w 61)
  (spt-conerot-radius 62)
  (spt-rotate-y 63)
  (launch-fields-end 64)

  (spt-scale 65)
  (spt-scalevel 66)
  (spt-end 67)
  )

(defenum sp-flag
  :type uint16
  (int 0) ;; int
  (float 1) ;; float
  (float-int-rand 2) ;; float with int rand
  (copy-from-other 3) ;; copy
  (object 4) ;; label
  (symbol 5) ;; symbol
  (launcher 6) ;; launcher from id
  )

;; - Types

(declare-type sparticle-system basic)
(declare-type sparticle-cpuinfo structure)
(deftype sp-field-init-spec (structure)
  ((field          sp-field-id  :offset-assert 0)
   (flags          sp-flag  :offset-assert 2)
   (initial-valuef float   :offset-assert 4)
   (random-rangef  float   :offset-assert 8)
   (random-multf   float   :offset-assert 12)
   (initial-value  int32   :offset 4)
   (random-range   int32   :offset 8)
   (random-mult    int32   :offset 12)
   (func           symbol      :offset 4)
   (tex            texture-id  :offset 4)
   (pntr           pointer     :offset 4)
   (sym            symbol      :offset 4)
   (sound          sound-spec  :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sparticle-launcher (basic)
  ((birthaccum float   :offset-assert 4)
   (soundaccum float   :offset-assert 8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum sp-group-item-flag
  :bitfield #t
  :type uint16
  (is-3d 0)
  (bit1 1)
  (start-dead 2)
  (launch-asap 3)
  (bit6 6)
  )

(deftype sparticle-group-item (structure)
  ((launcher   uint32  :offset-assert 0)
   (fade-after meters  :offset-assert 4)
   (falloff-to meters  :offset-assert 8)
   (flags      sp-group-item-flag  :offset-assert 12)
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     uint16  :offset-assert 18)
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(defenum sp-launch-state-flags
  :bitfield #t
  :type uint16
  (launcher-active 0)        ;; active
  (particles-active 1) ;; wants to launch
  (bit2 2)
  )

(declare-type sparticle-cpuinfo structure)

(deftype sparticle-launch-state (structure)
  ((group-item sparticle-group-item  :offset-assert 0)
   (flags      sp-launch-state-flags :offset-assert 4)
   (randomize  uint16                :offset-assert 6)
   (origin     vector                :offset-assert 8)
   (sprite3d   sprite-vec-data-3d    :offset-assert 12)
   (sprite     sparticle-cpuinfo     :offset-assert 16)
   (offset     uint32                :offset-assert 20)
   (accum      float                 :offset-assert 24)
   (spawn-time uint32                :offset-assert 28)
   (swarm      basic                 :offset 20)
   (seed       uint32                :offset 24)
   (time       uint32                :offset 28)
   (spec       basic                 :offset 16)
   (id         uint32                :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defenum sp-group-flag
  :bitfield #t
  :type uint16
  (use-local-clock 0)
  (always-draw 1)
  (screen-space 2)
  (unknown-bit-01 3) ;; beach-part
  )

(deftype sparticle-launch-group (basic)
  ((length          int16          :offset-assert 4)
   (duration        uint16         :offset-assert 6)
   (linger-duration uint16         :offset-assert 8)
   (flags           sp-group-flag  :offset-assert 10)
   (name            string         :offset-assert 12)
   (launcher        (inline-array sparticle-group-item)         :offset-assert 16)
   (bounds          sphere :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control 9)
    )
  )

(deftype sparticle-launch-control (inline-array-class)
  ((group            sparticle-launch-group  :offset-assert 16)
   (proc             process          :offset-assert 20)
   (local-clock      int32            :offset-assert 24)
   (fade             float            :offset-assert 28)
   (matrix           int32            :offset-assert 32)
   (last-spawn-frame int32            :offset-assert 36)
   (last-spawn-time  int32            :offset-assert 40)
   (center           vector  :inline  :offset-assert 48)
   (data             sparticle-launch-state :inline :dynamic :offset-assert 64)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (initialize (_type_ sparticle-launch-group process) none 9)
    (is-visible? (_type_ vector) symbol 10)
    (spawn (_type_ vector) object 11)
    (kill-and-free-particles (_type_) none 12)
    (kill-particles (_type_) none 13)
    )
  )


(define-extern part-group-pointer? (function pointer symbol))

;; ----------------------
;; File - sparticle-h
;; Source Path - engine/sparticle/sparticle-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum sp-cpuinfo-flag
  :bitfield #t
  :type uint32
  (bit0 0)
  (bit1 1) ;; village1-part
  (bit2 2)     ;; cleared after an aux has its func set to add-to-sprite-aux-lst
  (bit3 3)
  (bit4 4) ;; see - swamp-blimp
  (ready-to-launch 6) ;; maybe just just death?
  (bit7 7)
  (aux-list 8)     ;; prevents relaunch, adds to aux
  (bit9 9)
  (level0 10)
  (level1 11)
  (bit12 12)   ;; required to relaunch
  (bit13 13)
  (bit14 14)
  (use-global-acc 16)
  (launch-along-z 17)
  (left-multiply-quat 18)
  (right-multiply-quat 19)
  (set-conerot 20)
  )

(deftype sparticle-cpuinfo (structure)
  ((sprite        sprite-vec-data-2d             :offset-assert 0)
   (adgif         adgif-shader                   :offset-assert 4)
   (radius        float                          :offset-assert 8)
   (omega         float                          :offset-assert 12)
   (vel-sxvel     vector                 :inline :offset-assert 16)
   (rot-syvel     vector                 :inline :offset-assert 32)
   (fade          rgbaf                  :inline :offset-assert 48)
   (acc           vector                 :inline :offset-assert 64)
   (rotvel3d      quaternion             :inline :offset-assert 80)
   (vel           vector3s               :inline :offset 16)
   (accel         vector3s               :inline :offset 64)
   (scalevelx     float                          :offset 28)
   (scalevely     float                          :offset 44)
   (friction      float                          :offset-assert 96)
   (timer         int32                          :offset-assert 100)
   (flags         sp-cpuinfo-flag                :offset-assert 104)
   (user-int32    int32                          :offset-assert 108)
   (user-uint32   uint32                         :offset 108)
   (user-float    float                          :score 100 :offset 108)
   (user-pntr     uint32                         :offset 108)
   (user-sprite   sprite-vec-data-2d             :offset 108)
   (func          basic                          :offset-assert 112)
   (next-time     uint32                         :offset-assert 116)
   (next-launcher basic                          :offset-assert 120)
   (cache-alpha   float                          :offset-assert 124)
   (valid         symbol                          :offset-assert 128)
   (key           sparticle-launch-control       :offset-assert 132)
   (binding       sparticle-launch-state         :offset-assert 136)
   (data          uint32                 1       :offset 12)
   (dataf         float                  1       :offset 12)
   (datac         uint8                  1       :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  ;; field key is a basic loaded with a signed load
  )

(deftype sparticle-launchinfo (structure)
  ((launchrot  vector  :inline :offset-assert 0)
   (conerot    vector  :inline :offset-assert 16)
   (coneradius float           :offset-assert 32)
   (rotate-y   float           :offset-assert 36)
   (data       uint8 1       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype sparticle-system (basic)
  ((blocks          int32 2 :offset-assert 4)
   (length          int32 2 :offset-assert 12)
   (num-alloc       int32 2 :offset-assert 20)
   (is-3d           basic     :offset-assert 28)
   (flags           uint32    :offset-assert 32)
   (alloc-table     (pointer uint64)    :offset-assert 36)
   (cpuinfo-table   (inline-array sparticle-cpuinfo)    :offset-assert 40)
   (vecdata-table   pointer    :offset-assert 44) ;; sprite-vec-data-2d or sprite-vec-data-3d
   (adgifdata-table (inline-array adgif-shader)    :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  (:methods
    (new (symbol type int int symbol pointer (inline-array adgif-shader)) _type_ 0)
    )
  )

;; - Symbols

(define-extern *sp-frame-time* vector)
(define-extern *sp-60-hz* symbol)


;; ----------------------
;; File - actor-link-h
;; Source Path - engine/entity/actor-link-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype actor-link-info (basic)
  ((process process  :offset-assert 4)
   (next    entity-actor  :offset-assert 8)
   (prev    entity-actor  :offset-assert 12)
   )
  :method-count-assert 26
  :size-assert         #x10
  :flag-assert         #x1a00000010
  (:methods
    (new (symbol type process) _type_ 0)
    (get-matching-actor-type-mask (_type_ type) int 9)
    (actor-count-before (_type_) int 10)
    (link-to-next-and-prev-actor (_type_) entity-actor 11)
    (get-next (_type_) entity-actor 12)
    (get-prev (_type_) entity-actor 13)
    (get-next-process (_type_) process 14)
    (get-prev-process (_type_) process 15)
    (apply-function-forward (_type_ (function entity-actor object object) object) int 16)
    (apply-function-reverse (_type_ (function entity-actor object object) object) int 17)
    (apply-all (_type_ (function entity-actor object object) object) int 18)
    (send-to-all (_type_ symbol) none 19)
    (send-to-all-after (_type_ symbol) object 20)
    (send-to-all-before (_type_ symbol) object 21)
    (send-to-next-and-prev (_type_ symbol) none 22)
    (send-to-next (_type_ symbol) none 23)
    (send-to-prev (_type_ symbol) none 24)
    (actor-count (_type_) int 25)
    )
  )

;; - Functions

(define-extern entity-actor-count (function res-lump symbol int))
(define-extern entity-actor-lookup (function res-lump symbol int entity-actor)) ;; NOTE - return value is not confirmed
(define-extern entity-by-name (function string entity))
(define-extern entity-by-aid (function uint entity))
(define-extern actor-link-subtask-complete-hook (function entity-actor (pointer symbol) symbol))
(define-extern actor-link-dead-hook (function entity-actor (pointer symbol) symbol))
(define-extern alt-actor-list-subtask-incomplete-count (function process-drawable int))


;; ----------------------
;; File - camera-h
;; Source Path - engine/camera/camera-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Enums

(defenum cam-slave-options
  :bitfield #t
  (BUTT_CAM)
  (SAME_SIDE)
  (MOVE_SPHERICAL)
  (ALLOW_Z_ROT)
  (JUMP_PITCHES)
  (COLLIDE)
  (FIND_HIDDEN_TARGET)
  (DRAG)
  (PLAYER_MOVING_CAMERA)
  (LINE_OF_SIGHT)
  (MOVEMENT_BLOCKED)
  (SHRINK_MAX_ANGLE)
  (GOTO_GOOD_POINT)
  (BLOCK_SHIFT_BUTTONS)
  (BIKE_MODE)
  (NO_ROTATE)
  (STICKY_ANGLE)
  (AIR_EXIT)
  )

(defenum cam-index-options
  :type uint32
  :bitfield #t
  (RADIAL)
  (SPHERICAL)
  )

(defenum slave-los-state
  :type uint32
  (none 0)
  (cw 1)
  (ccw 2)
  (between 3)
  )

;; - Types

(deftype camera-bank (basic)
  ((collide-move-rad        float   :offset-assert 4)
   (joypad                  uint32  :offset-assert 8)
   (min-detectable-velocity float   :offset-assert 12)
   (attack-timeout          time-frame :offset-assert 16)
   (default-string-max-y    meters  :offset-assert 24)
   (default-string-min-y    meters  :offset-assert 28)
   (default-string-max-z    meters  :offset-assert 32)
   (default-string-min-z    meters  :offset-assert 36)
   (default-string-push-z   meters  :offset-assert 40)
   (default-tilt-adjust     degrees :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype cam-index (structure)
  ((flags cam-index-options :offset-assert 0)
   (vec   vector  2 :inline :offset 16)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (cam-index-method-9 (_type_ symbol entity vector curve) symbol 9)
    (cam-index-method-10 (_type_ vector) float 10) ; inlined vector-dot issue?
    )
  )

(deftype tracking-point (structure)
  ((position    vector :inline :offset-assert 0)
   (direction   vector :inline :offset-assert 16)
   (tp-length   float          :offset-assert 32)
   (next        int32          :offset-assert 36)
   (incarnation int32          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype tracking-spline-sampler (structure)
  ((cur-pt     int32  :offset-assert 0)
   (partial-pt float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype tracking-spline (structure)
  ((point              tracking-point 32 :inline     :offset-assert 0)
   (summed-len         float           :offset-assert 1536)
   (free-point         int32           :offset-assert 1540)
   (used-point         int32           :offset-assert 1544)
   (partial-point      float           :offset-assert 1548)
   (end-point          int32           :offset-assert 1552)
   (next-to-last-point int32           :offset-assert 1556)
   (max-move           float           :offset-assert 1560)
   (sample-len         float           :offset-assert 1564)
   (used-count         int32           :offset-assert 1568)
   (old-position       vector  :inline :offset-assert 1584)
   (debug-old-position vector  :inline :offset-assert 1600)
   (debug-out-position vector  :inline :offset-assert 1616)
   (debug-last-point   int32           :offset-assert 1632)
   )
  :method-count-assert 24
  :size-assert         #x664
  :flag-assert         #x1800000664
  (:methods
    (tracking-spline-method-9 (_type_) none 9)
    (tracking-spline-method-10 (_type_ vector) none 10)
    (print-nth-point (_type_ int) none 11)
    (tracking-spline-method-12 (_type_) none 12)
    (tracking-spline-method-13 (_type_ int) none 13)
    (tracking-spline-method-14 (_type_ tracking-spline-sampler) none 14)
    (tracking-spline-method-15 (_type_) none 15)
    (tracking-spline-method-16 (_type_ float) none 16)
    (tracking-spline-method-17 (_type_ vector float float symbol) int 17) ; - return value is actually none but they do a manual `return`
    (tracking-spline-method-18 (_type_ float vector tracking-spline-sampler) vector 18)
    (tracking-spline-method-19 (_type_ float vector tracking-spline-sampler) vector 19)
    (tracking-spline-method-20 (_type_ vector int) none 20)
    (tracking-spline-method-21 (_type_ vector float float) vector 21)
    (tracking-spline-method-22 (_type_ float) none 22)
    (tracking-spline-method-23 (_type_) none 23)
    )
  )

(deftype cam-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x18
  :flag-assert         #xd00000018
  (:methods
    (init-cam-float-seeker (_type_ float float float float) none 9)
    (copy-cam-float-seeker (_type_ _type_) none 10)
    (update! (_type_ float) none 11)
    (jump-to-target! (_type_ float) float 12)
    )
  )

(deftype cam-vector-seeker (structure)
  ((target      vector :inline :offset-assert 0)
   (value       vector :inline :offset-assert 16)
   (vel         vector :inline :offset-assert 32)
   (accel       float          :offset-assert 48)
   (max-vel     float          :offset-assert 52)
   (max-partial float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (init! (_type_ vector float float float) none 9)
    (update! (_type_ vector) none 10)
    )
  )

(deftype cam-rotation-tracker (structure)
  ((inv-mat                 matrix           :inline :offset-assert 0)
   (no-follow               basic                    :offset-assert 64)
   (follow-pt               vector           :inline :offset-assert 80)
   (follow-off              vector           :inline :offset-assert 96)
   (follow-blend            float                    :offset-assert 112)
   (tilt-adjust             cam-float-seeker :inline :offset-assert 116)
   (use-point-of-interest   basic                    :offset-assert 140)
   (point-of-interest       vector           :inline :offset-assert 144)
   (point-of-interest-blend cam-float-seeker :inline :offset-assert 160)
   (underwater-blend        cam-float-seeker :inline :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype camera-combiner (process)
  ((trans             vector               :score 999 :inline :offset-assert 112)
   (inv-camera-rot    matrix               :inline :offset-assert 128)
   (fov               float                        :offset-assert 192)
   (interp-val        float                        :offset-assert 196)
   (interp-step       float                        :offset-assert 200)
   (dist-from-src     float                        :offset-assert 204)
   (dist-from-dest    float                        :offset-assert 208)
   (flip-control-axis vector               :inline :offset-assert 224)
   (velocity          vector               :inline :offset-assert 240)
   (tracking-status   uint64                       :offset-assert 256)
   (tracking-options  int32                        :offset-assert 264)
   (tracking          cam-rotation-tracker :inline :offset-assert 272)
   )
  :heap-base #x170
  :method-count-assert 14
  :size-assert         #x1e0
  :flag-assert         #xe017001e0
  (:states
    cam-combiner-active)
  )

(deftype camera-slave (process)
  ((trans                         vector    :score 999 :inline :offset-assert 112)
   (fov                           float                        :offset-assert 128)
   (fov0                          float                        :offset-assert 132)
   (fov1                          float                        :offset-assert 136)
   (fov-index                     cam-index            :inline :offset-assert 144)
   (tracking                      cam-rotation-tracker :inline :offset-assert 192)
   (view-off-param                float                        :offset-assert 400)
   (unknown-symbol                symbol                       :offset        412) ;; from - cam-combiner::lambda2 - I'm convinced `camera-slave` is the only matching process in this case
   (view-off                      vector               :inline :offset-assert 416)
   (min-z-override                float                        :offset-assert 432)
   (view-flat                     vector               :inline :offset-assert 448)
   (string-vel-dir                uint32                       :offset-assert 464)
   (string-trans                  vector               :inline :offset-assert 480)
   (position-spline               tracking-spline      :inline :offset-assert 496)
   (pivot-pt                      vector               :inline :offset-assert 2144)
   (pivot-rad                     float                        :offset-assert 2160)
   (circular-follow               vector               :inline :offset-assert 2176)
   (max-angle-offset              float                        :offset-assert 2192)
   (max-angle-curr                float                        :offset-assert 2196)
   (options                       uint32                       :offset-assert 2200)
   (cam-entity                    entity                       :offset-assert 2204) ; not totally confirmed yet, could be entity-actor
   (velocity                      vector               :inline :offset-assert 2208)
   (desired-pos                   vector               :inline :offset-assert 2224)
   (time-dist-too-far             uint32                       :offset-assert 2240)
   (los-state                     slave-los-state              :offset-assert 2244)
   (good-point                    vector               :inline :offset-assert 2256)
   (los-tgt-spline-pt             int32                        :offset-assert 2272)
   (los-tgt-spline-pt-incarnation int32                        :offset-assert 2276)
   (los-last-pos                  vector               :inline :offset-assert 2288)
   (intro-curve                   curve                :inline :offset-assert 2304)
   (intro-offset                  vector               :inline :offset-assert 2336)
   (intro-t                       float                        :offset-assert 2352)
   (intro-t-step                  float                        :offset-assert 2356)
   (outro-exit-value              float                        :offset-assert 2360)
   (spline-exists                 basic                        :offset-assert 2364)
   (spline-curve                  curve                :inline :offset-assert 2368)
   (spline-offset                 vector               :inline :offset-assert 2400)
   (index                         cam-index            :inline :offset-assert 2416)
   (saved-pt                      vector               :inline :offset-assert 2464)
   (spline-tt                     float                        :offset-assert 2480)
   (spline-follow-dist            float                        :offset-assert 2484)
   (change-event-from             (pointer process-drawable)   :offset-assert 2488) ;; mistycannon
   (enter-has-run                 symbol                       :offset-assert 2492)
   (blend-from-type               uint64                       :offset-assert 2496)
   (blend-to-type                 uint64                       :offset-assert 2504)
   (have-phony-joystick           basic                        :offset-assert 2512)
   (phony-joystick-x              float                        :offset-assert 2516)
   (phony-joystick-y              float                        :offset-assert 2520)
   (string-min-val                vector               :inline :offset-assert 2528)
   (string-max-val                vector               :inline :offset-assert 2544)
   (string-val-locked             basic                        :offset-assert 2560)
   )
  :heap-base #x9a0
  :method-count-assert 14
  :size-assert         #xa04
  :flag-assert         #xe09a00a04
  (:states
    cam-circular
    cam-standoff-read-entity
    cam-spline
    *camera-base-mode*
    cam-fixed-read-entity
    cam-free-floating
    cam-fixed
    cam-decel
    cam-eye
    cam-string
    cam-standoff
    cam-pov
    cam-pov180
    cam-pov-track
    cam-billy
    cam-endlessfall
    cam-lookat
    cam-stick
    cam-bike
    cam-point-watch
    cam-orbit
    cam-launcher-longfall
    cam-launcher-shortfall
    cam-robotboss
    cam-mistycannon
    cam-periscope)
  )

(deftype camera-master (process)
  ((master-options      uint32                    :offset-assert 112)
   (num-slaves          int32                     :offset-assert 116)
   (slave               (pointer camera-slave)           2       :offset-assert 120)
   (slave-options       uint32                    :offset-assert 128)
   (view-off-param-save float                     :offset-assert 132)
   (changer             uint32                    :offset-assert 136)
   (cam-entity          entity                    :offset-assert 140) ; not totally confirmed yet
   (stringMinLength     float                     :offset-assert 144)
   (stringMaxLength     float                     :offset-assert 148)
   (stringMinHeight     float                     :offset-assert 152)
   (stringMaxHeight     float                     :offset-assert 156)
   (string-min          cam-vector-seeker :inline :offset-assert 160)
   (string-max          cam-vector-seeker :inline :offset-assert 224)
   (string-push-z       float                     :offset-assert 284)
   (stringCliffHeight   float                     :offset-assert 288)
   (no-intro            uint32                    :offset-assert 292)
   (force-blend         uint32                    :offset-assert 296)
   (force-blend-time    uint32                    :offset-assert 300)
   (local-down          vector            :inline :offset-assert 304)
   (drawable-target     handle                    :offset-assert 320) ; likely a `target`?
   (which-bone          int32                     :offset-assert 328)
   (pov-handle          handle                    :offset-assert 336)
   (pov-bone            int32                     :offset-assert 344)
   (being-attacked      symbol                     :offset-assert 348)
   (attack-start        time-frame                    :offset-assert 352)
   (on-ground           symbol                     :offset-assert 360)
   (under-water         int32                     :offset-assert 364)
   (on-pole             symbol                     :offset-assert 368)
   (tgt-rot-mat         matrix            :inline :offset-assert 384)
   (tgt-face-mat        matrix            :inline :offset-assert 448)
   (tpos-old            vector            :inline :offset-assert 512)
   (tpos-curr           vector            :inline :offset-assert 528)
   (target-height       float                     :offset-assert 544)
   (tpos-old-adj        vector            :inline :offset-assert 560)
   (tpos-curr-adj       vector            :inline :offset-assert 576)
   (tpos-tgt            vector            :inline :offset-assert 592)
   (upspeed             float                     :offset-assert 608)
   (pitch-off           vector            :inline :offset-assert 624)
   (foot-offset         float                     :offset-assert 640)
   (head-offset         float                     :offset-assert 644)
   (target-spline       tracking-spline   :inline :offset-assert 656)
   (ease-from           vector            :inline :offset-assert 2304)
   (ease-t              float                     :offset-assert 2320)
   (ease-step           float                     :offset-assert 2324)
   (ease-to             vector            :inline :offset-assert 2336)
   (outro-curve         curve             :inline :offset-assert 2352)
   (outro-t             float                     :offset-assert 2372)
   (outro-t-step        float                     :offset-assert 2376)
   (outro-exit-value    float                     :offset-assert 2380)
   (water-drip-time     time-frame                    :offset-assert 2384)
   (water-drip          sparticle-launch-control  :offset-assert 2392)
   (water-drip-mult     float                     :offset-assert 2396)
   (water-drip-speed    float                     :offset-assert 2400)
   )
  :heap-base #x900
  :method-count-assert 14
  :size-assert         #x964
  :flag-assert         #xe09000964
  (:states
    cam-master-active
    list-keeper-active)
  )

;; - Symbols

(define-extern *CAMERA-bank* camera-bank)


;; ----------------------
;; File - cam-debug-h
;; Source Path - engine/camera/cam-debug-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern float-save-redline (function float none))
(define-extern float-lookup-redline (function float float))
(define-extern float-save-blueline (function float none))
(define-extern float-lookup-blueline (function float float))
(define-extern float-save-greenline (function float none))
(define-extern float-lookup-greenline (function float float))
(define-extern float-save-yellowline (function float none))
(define-extern float-lookup-yellowline (function float float))
(define-extern float-save-timeplot (function float none))
(define-extern float-lookup-timeplot (function float float))

;; - Symbols

(define-extern *timeplot-index* int)
(define-extern *timeplot-table* (pointer float))
(define-extern *yellowline-index* int)
(define-extern *yellowline-table* (pointer float))
(define-extern *greenline-index* int)
(define-extern *greenline-table* (pointer float))
(define-extern *blueline-index* int)
(define-extern *blueline-table* (pointer float))
(define-extern *redline-index* int)
(define-extern *redline-table* (pointer float))
(define-extern *cam-layout* symbol)


;; ----------------------
;; File - cam-interface-h
;; Source Path - engine/camera/cam-interface-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *camera-read-analog* symbol)
(define-extern *camera-read-buttons* symbol)
(define-extern *cam-free-move-along-z* symbol)
(define-extern *camera-init-mat* matrix)
(define-extern *camera* camera-master)
(define-extern *camera-combiner* camera-combiner)
(define-extern *camera-orbit-target* (pointer process-drawable))


;; ----------------------
;; File - cam-update-h
;; Source Path - engine/camera/cam-update-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

(defenum external-cam-option
  :bitfield #t
  (allow-z 0)
  )

;; - Symbols

(define-extern *external-cam-options* external-cam-option)
(define-extern *external-cam-mode* symbol)
(define-extern *camera-look-through-other* int)
(define-extern *camera-other-fov* bfloat)
(define-extern *camera-other-trans* vector)
(define-extern *camera-other-matrix* matrix)
(define-extern *camera-smush-control* smush-control)
(define-extern *camera-other-root* vector)


;; ----------------------
;; File - assert-h
;; Source Path - engine/debug/assert-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype __assert-info-private-struct (structure)
  ((filename   string  :offset-assert 0)
   (line-num   uint16  :offset-assert 4)
   (column-num uint16  :offset-assert 6)
   )
  :method-count-assert 11
  :size-assert         #x8
  :flag-assert         #xb00000008
  (:methods
    (set-pos (_type_ string uint uint) int 9)
    (print-pos (_type_) int 10)
    )
  )

;; - Symbols

(define-extern *__private-assert-info* __assert-info-private-struct)


;; ----------------------
;; File - hud-h
;; Source Path - engine/ui/hud-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype hud-icon (basic)
  ((icon    (pointer manipy)  :offset-assert 4)
   (icon-y  int32   :offset-assert 8)
   (icon-x  int32   :offset-assert 12)
   (icon-z  int32   :offset-assert 16)
   (scale-x float   :offset-assert 20)
   (scale-y float   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype hud-particle (basic)
  ((part     sparticle-launch-control  :offset-assert 4)
   (init-pos vector :inline :offset-assert 16)
   (pos      vector :inline :offset-assert 32)
   (prev-pos vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype hud (process)
  ((value                  int32     :offset-assert 112)
   (value2                 int32     :offset-assert 116)
   (target-value           int32     :offset-assert 120)
   (last-increment-time    time-frame     :offset-assert 128)
   (last-target-equal-time time-frame     :offset-assert 136)
   (offset                 int32     :offset-assert 144)
   (y-offset               int32     :offset-assert 148)
   (next-y-offset          int32     :offset-assert 152)
   (x-sgn                  int32     :offset-assert 156)
   (y-sgn                  int32     :offset-assert 160)
   (text-x                 int32     :offset-assert 164)
   (text-y                 int32     :offset-assert 168)
   (friend                 int32     :offset-assert 172)
   (first-init             symbol     :offset-assert 176)
   (increment-on-event     symbol     :offset-assert 180)
   (skip-particle          int32     :offset-assert 184)
   (disable                symbol     :offset-assert 188)
   (force-on-screen        symbol     :offset-assert 192)
   (deactivate-when-hidden symbol     :offset-assert 196)
   (trigger-time           time-frame    :offset-assert 200)
   (last-hide-time         time-frame    :offset-assert 208)
   (nb-of-icons            int32     :offset-assert 216)
   (icons                  hud-icon 6 :offset-assert 220)
   (max-nb-of-particles    int32     :offset-assert 244)
   (nb-of-particles        int32     :offset-assert 248)
   (particles              hud-particle 7 :offset-assert 252)
   )
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  ;; inherited inspect of process
  (:methods
    (hidden? (_type_) symbol 14)
    (draw-hud (_type_) none 15)
    (tally-value (_type_ int int) none 16)
    (draw-icons (_type_) none 17)
    (draw-particles (_type_) none 18)
    (hud-update (_type_) none 19)
    (init-particles! (_type_ int) none 20)
    (get-icon-pos-x (_type_) int 21)
    (get-icon-pos-y (_type_) int 22)
    (hud-method-23 (_type_) none 23) ;; unused
    (set-pos-and-scale (_type_ symbol symbol) none 24)
    (get-icon-scale-x (_type_) float 25)
    (get-icon-scale-y (_type_) float 26)
    )
  (:states
    hud-arriving
    hud-hidden
    (hud-leaving int)
    hud-in)
  )

(declare-type hud-pickups hud)
(declare-type hud-money hud)
(declare-type hud-fuel-cell hud)
(declare-type hud-health hud)
(declare-type hud-buzzers hud)
(declare-type hud-power hud)
(declare-type hud-bike-speed hud)
(declare-type hud-bike-heat hud)
(declare-type hud-money-all hud)
(deftype hud-parts (structure)
  (
   (pickups    (pointer hud-pickups)    :offset-assert 0)
   (money      (pointer hud-money)    :offset-assert 4)
   (fuel-cell  (pointer hud-fuel-cell)    :offset-assert 8)
   (health     (pointer hud-health)    :offset-assert 12)
   (buzzers    (pointer hud-buzzers)    :offset-assert 16)
   (power      (pointer hud-power)    :offset-assert 20)
   (bike-speed (pointer hud-bike-speed)    :offset-assert 24)
   (bike-heat  (pointer hud-bike-heat)    :offset-assert 28)
   (money-all  (pointer hud-money-all)    :offset-assert 32)
   (parts (pointer hud) 9 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; - Symbols

(define-extern *hud-parts* hud-parts)


;; ----------------------
;; File - progress-h
;; Source Path - engine/ui/progress-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype count-info (structure)
  ((money-count  int32  :offset-assert 0)
   (buzzer-count int32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype game-count-info (basic)
  ((length int32            :offset-assert 4)
   (data   count-info :inline :dynamic :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype task-info-data (basic)
  ((task-id                  game-task     :offset-assert 4)
   (task-name                text-id  4 :offset-assert 8)
   (text-index-when-resolved int32     :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype level-tasks-info (basic)
  ((level-name-id     text-id    :offset-assert 4)
   (text-group-index  int32     :offset-assert 8)
   (nb-of-tasks       int32     :offset-assert 12)
   (buzzer-task-index int32     :offset-assert 16)
   (task-info         task-info-data 8 :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(defenum progress-screen
  :type int64
  (invalid -1)
  (fuel-cell 0)
  (money 1)
  (buzzer 2)
  (settings 3)
  (game-settings 4)
  (graphic-settings 5)
  (sound-settings 6)
  (memcard-no-space 7)
  (memcard-not-inserted 8)
  (memcard-not-formatted 9)
  (memcard-format 10)
  (memcard-data-exists 11)
  (memcard-loading 12)
  (memcard-saving 13)
  (memcard-formatting 14)
  (memcard-creating 15)
  (load-game 16)
  (save-game 17)
  (save-game-title 18)
  (memcard-insert 19)
  (memcard-error-loading 20)
  (memcard-error-saving 21)
  (memcard-removed 22)
  (memcard-no-data 23)
  (memcard-error-formatting 24)
  (memcard-error-creating 25)
  (memcard-auto-save-error 26)
  (title 27)
  (settings-title 28)
  (auto-save 29)
  (pal-change-to-60hz 30)
  (pal-now-60hz 31)
  (no-disc 32)
  (bad-disc 33)
  (quit 34)

  ;; extra screens for pc port
  ;; input options
  (input-options)
  (select-controller)
  (controller-binds) ;; 0x25
  (keyboard-binds)
  (mouse-binds)
  (controller-options)
  (mouse-options)
  (reassign-binds-options)

  (camera-options)
  (accessibility-options)
  (game-ps2-options)
  (misc-options)
  (resolution)
  (aspect-msg)
  (aspect-ratio)
  (gfx-ps2-options)
  (secrets)
  (hint-log)
  (cheats)
  (scrapbook)
  (music-player)
  (scene-player)
  (credits)
  (quit-title)
  (flava-player)
  (memcard-disable-auto-save)
  (memcard-auto-save-disabled)
  (monitor)
  (checkpoint-select)
  (speedrun-options)
  (speedrun-il-options)
  (speedrun-cat-ext-options)

  ;; the last one!
  (max)
  )

(defenum game-option-type
  :type uint64
  (slider 0)
  (language 1)
  (on-off 2)
  (center-screen 3)
  (aspect-ratio 4)
  (video-mode 5)
  (menu 6)
  (yes-no 7)
  (button 8)

  ;; extra types for pc port
  (normal-inverted)
  (display-mode)
  (msaa)
  (frame-rate)
  (lod-bg)
  (lod-fg)
  (resolution)
  (aspect-new)
  (language-subtitles)
  (language-text)
  (speaker)
  (aspect-native)
  (button-music)
  (button-flava)
  (cheat-toggle)
  (monitor)
  (controller)
  (binding-assignment)
  (confirmation)
  )

(defenum game-option-menu
  :type int32
  :copy-entries progress-screen)

(deftype game-option (basic)
  ((option-type     game-option-type  :offset-assert   8)
   (name            text-id      :offset-assert  16)
   (scale           symbol            :offset-assert  20)
   (param1          float             :offset-assert  24)
   (param2          float             :offset-assert  28)
   (param3          game-option-menu  :offset-assert  32)
   (value-to-modify pointer           :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype progress (process)
  ((current-debug-string         int32           :offset-assert 112)
   (current-debug-language       int32           :offset-assert 116)
   (current-debug-group          int32           :offset-assert 120)
   (in-out-position              int32           :offset-assert 124)
   (display-state                progress-screen :offset-assert 128)
   (next-display-state           progress-screen :offset-assert 136)
   (option-index                 int32           :offset-assert 144)
   (selected-option              basic           :offset-assert 148)
   (completion-percentage        float           :offset-assert 152)
   (ready-to-run                 basic           :offset-assert 156)
   (display-level-index          int32           :offset-assert 160)
   (next-level-index             int32           :offset-assert 164)
   (task-index                   int32           :offset-assert 168)
   (in-transition                basic           :offset-assert 172)
   (last-in-transition           basic           :offset-assert 176)
   (force-transition             basic           :offset-assert 180)
   (stat-transition              basic           :offset-assert 184)
   (level-transition             int32           :offset-assert 188)
   (language-selection           language-enum   :offset-assert 192)
   (language-direction           symbol          :offset-assert 200)
   (language-transition          basic           :offset-assert 204)
   (language-x-offset            int32           :offset-assert 208)
   (sides-x-scale                float           :offset-assert 212)
   (sides-y-scale                float           :offset-assert 216)
   (left-x-offset                int32           :offset-assert 220)
   (right-x-offset               int32           :offset-assert 224)
   (button-scale                 float           :offset-assert 228)
   (slot-scale                   float           :offset-assert 232)
   (left-side-x-scale            float           :offset-assert 236)
   (left-side-y-scale            float           :offset-assert 240)
   (right-side-x-scale           float           :offset-assert 244)
   (right-side-y-scale           float           :offset-assert 248)
   (small-orb-y-offset           int32           :offset-assert 252)
   (big-orb-y-offset             int32           :offset-assert 256)
   (transition-offset            int32           :offset-assert 260)
   (transition-offset-invert     int32           :offset-assert 264)
   (transition-percentage        float           :offset-assert 268)
   (transition-percentage-invert float           :offset-assert 272)
   (transition-speed             float           :offset-assert 276)
   (total-nb-of-power-cells      int32           :offset-assert 280)
   (total-nb-of-orbs             int32           :offset-assert 284)
   (total-nb-of-buzzers          int32           :offset-assert 288)
   (card-info                    mc-slot-info    :offset-assert 292)
   (last-option-index-change     time-frame      :offset-assert 296)
   (video-mode-timeout           time-frame      :offset-assert 304)
   (display-state-stack          progress-screen 5  :offset-assert 312)
   (option-index-stack           int32        5  :offset-assert 352)
   (display-state-pos            int32           :offset-assert 372)
   (nb-of-icons                  int32           :offset-assert 376)
   (icons                        hud-icon     6  :offset-assert 380)
   (max-nb-of-particles          int32           :offset-assert 404)
   (nb-of-particles              int32           :offset-assert 408)
   (particles                    hud-particle 40 :offset-assert 412)
   (particle-state               int32        40 :offset-assert 572)
   )
  :method-count-assert 59
  :size-assert         #x2dc
  :heap-base           #x270
  :flag-assert         #x3b027002dc
  (:methods
    (progress-method-14 (_type_) none 14) ;; unused
    (progress-method-15 (_type_) none 15) ;; unused
    (progress-method-16 (_type_) none 16) ;; unused
    (draw-progress (_type_) none 17)
    (progress-method-18 () none 18) ;; unused
    (visible? (_type_) symbol 19)
    (hidden? (_type_) symbol 20)
    (adjust-sprites (_type_) none 21)
    (adjust-icons (_type_) none 22)
    (adjust-ratios (_type_ symbol symbol) none 23)
    (draw-fuel-cell-screen (_type_ int) none 24)
    (draw-money-screen (_type_ int) none 25)
    (draw-buzzer-screen (_type_ int) none 26)
    (draw-notice-screen (_type_) none 27)
    (draw-options (_type_ int int float) none 28)
    (respond-common (_type_) none 29)
    (respond-progress (_type_) none 30)
    (respond-memcard (_type_) none 31)
    (can-go-back? (_type_) symbol 32)
    (initialize-icons (_type_) none 33)
    (initialize-particles (_type_) none 34)
    (draw-memcard-storage-error (_type_ font-context) none 35)
    (draw-memcard-data-exists (_type_ font-context) none 36)
    (draw-memcard-no-data (_type_ font-context) none 37)
    (draw-memcard-accessing (_type_ font-context) none 38)
    (draw-memcard-insert (_type_ font-context) none 39)
    (draw-memcard-file-select (_type_ font-context) none 40)
    (draw-memcard-auto-save-error (_type_ font-context) none 41)
    (draw-memcard-removed (_type_ font-context) none 42)
    (draw-memcard-error (_type_ font-context) none 43)
    (progress-method-44 (_type_) none 44) ;; unused
    (push! (_type_) none 45)
    (pop! (_type_) none 46)
    (progress-method-47 (_type_) none 47) ;; unused
    (enter! (_type_ progress-screen int) none 48)
    (draw-memcard-format (_type_ font-context) none 49)
    (draw-auto-save (_type_ font-context) none 50)
    (set-transition-progress! (_type_ int) none 51)
    (set-transition-speed! (_type_) none 52)
    (set-memcard-screen (_type_ progress-screen) progress-screen 53)
    (draw-pal-change-to-60hz (_type_ font-context) none 54)
    (draw-pal-now-60hz (_type_ font-context) none 55)
    (draw-no-disc (_type_ font-context) none 56)
    (draw-bad-disc (_type_ font-context) none 57)
    (draw-quit (_type_ font-context) none 58)
    )
  (:states
    progress-normal
    progress-going-out
    progress-gone
    progress-coming-in
    progress-waiting
    progress-debug)
  )

;; - Symbols

(define-extern *progress-process* (pointer progress))
(define-extern *progress-last-task-index* int)


;; ----------------------
;; File - rpc-h
;; Source Path - engine/ps2/rpc-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype rpc-buffer (basic)
  ((elt-size  uint32           :offset-assert 4)
   (elt-count uint32           :offset-assert 8)
   (elt-used  uint32           :offset-assert 12)
   (busy      basic            :offset-assert 16)
   (base      pointer          :offset-assert 20)
   (data      uint8   :dynamic :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
    (new (symbol type uint uint) rpc-buffer 0)
    )
  )

(deftype rpc-buffer-pair (basic)
  ((buffer           rpc-buffer 2 :offset-assert 4)
   (current          rpc-buffer   :offset-assert 12)
   (last-recv-buffer pointer      :offset-assert 16)
   (rpc-port         int32     :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (new (symbol type uint uint int) rpc-buffer-pair 0)
    (call (rpc-buffer-pair uint pointer uint) int 9)
    (add-element (rpc-buffer-pair) pointer 10)
    (decrement-elt-used (rpc-buffer-pair) int 11)
    (sync (rpc-buffer-pair symbol) int 12)
    (check-busy (rpc-buffer-pair) symbol 13)
    (pop-last-received (rpc-buffer-pair) pointer 14)
    )
  )

;; - Functions

(define-extern rpc-busy? (function int uint))
(define-extern rpc-call (function int uint uint uint int uint int uint))


;; ----------------------
;; File - path-h
;; Source Path - engine/nav/path-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype path-control (basic)
  ((flags      path-control-flag         :offset-assert 4)
   (name       symbol          :offset-assert 8)
   (process    process-drawable          :offset-assert 12)
   (curve      curve  :inline :offset-assert 16)
   (num-cverts int32          :offset 20)
   (cverts     (inline-array vector)         :score 100 :offset 16)
   )
  :method-count-assert 21
  :size-assert         #x24
  :flag-assert         #x1500000024
  (:methods
    (new (symbol type process symbol float) _type_)
    (debug-draw (_type_) none 9)
    (eval-path-curve-div! (_type_ vector float symbol) vector 10)
    (get-random-point (_type_ vector) vector 11)
    (path-control-method-12 (_type_ vector float) vector 12)
    (eval-path-curve! (_type_ vector float symbol) vector 13)
    (path-control-method-14 (_type_ vector float) vector 14)
    (length-as-float (_type_) float 15)
    (path-distance (_type_) float 16)
    (get-num-verts (_type_) int 17)
    (should-display? (_type_) symbol 18)
    (path-control-method-19 (_type_) float 19)
    (path-control-method-20 (_type_) float 20)
    )
  )

(deftype curve-control (path-control)
  ()
  (:methods
    (new (symbol type process symbol float) _type_)
    )
  :method-count-assert 21
  :size-assert         #x24
  :flag-assert         #x1500000024
  )

;; - Functions

(define-extern string->symbol (function string symbol))


;; ----------------------
;; File - navigate-h
;; Source Path - engine/nav/navigate-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype nav-poly (structure)
  ((id       uint8     :offset-assert 0)
   (vertex   uint8 3 :offset-assert 1)
   (adj-poly uint8 3 :offset-assert 4)
   (pat      uint8     :offset-assert 7)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype nav-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-sphere (structure)
  ((trans sphere :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-ray (structure)
  ((current-pos  vector   :inline :offset-assert 0)
   (dir          vector   :inline :offset-assert 16)
   (dest-pos     vector   :inline :offset-assert 32)
   (current-poly nav-poly         :offset-assert 48)
   (next-poly    nav-poly         :offset-assert 52)
   (len          meters           :offset-assert 56)
   (last-edge    int8             :offset-assert 60)
   (terminated   symbol            :offset-assert 64) ;; TODO - guesses
   (reached-dest symbol            :offset-assert 68) ;; TODO - guesses
   (hit-boundary symbol            :offset-assert 72) ;; TODO - guesses
   (hit-gap      symbol            :offset-assert 76) ;; TODO - guesses
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype nav-route-portal (structure)
  ((next-poly  nav-poly   :offset-assert 0)
   (vertex     nav-vertex 2 :offset-assert 4)
   (edge-index int8       :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #xd
  :flag-assert         #x90000000d
  )

(deftype clip-travel-vector-to-mesh-return-info (structure)
  ((found-boundary  symbol            :offset-assert 0)
   (intersection    vector   :inline :offset-assert 16)
   (boundary-normal vector   :inline :offset-assert 32)
   (prev-normal     vector   :inline :offset-assert 48)
   (next-normal     vector   :inline :offset-assert 64)
   (poly            nav-poly         :offset-assert 80)
   (gap-poly        nav-poly         :offset-assert 84)
   (edge            int32            :offset-assert 88)
   (vert-prev       vector   :inline :offset-assert 96)
   (vert-0          vector   :inline :offset-assert 112)
   (vert-1          vector   :inline :offset-assert 128)
   (vert-next       vector   :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype nav-node (structure)
  ((center-x      float           :offset-assert 0)
   (center-y      float           :offset-assert 4)
   (center-z      float           :offset-assert 8)
   (type          uint16          :offset-assert 12)
   (parent-offset uint16          :offset-assert 14)
   (center        vector  :inline :offset 0)
   (radius-x      float           :offset-assert 16)
   (radius-y      float           :offset-assert 20)
   (radius-z      float           :offset-assert 24)
   (left-offset   uint16          :offset-assert 28)
   (right-offset  uint16          :offset-assert 30)
   (num-tris      uint32          :offset 28)
   (radius        vector  :inline :offset 16)
   (scale-x       float           :offset-assert 32)
   (first-tris    uint8 4         :offset-assert 36)
   (scale-z       float           :offset-assert 40)
   (last-tris     uint8 4         :offset-assert 44)
   (scale         vector  :inline :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype nav-lookup-elem (structure)
  ((vec         vector :inline :offset-assert 0)
   (y-thresh    float          :offset 12)
   (time        uint32         :offset-assert 16)
   (node-offset uint32         :offset-assert 20)
   (lookup-type uint8          :offset-assert 24)
   (poly-ind    uint8          :offset-assert 25)
   (dummy0      uint16         :offset-assert 26)
   (dummy       uint32         :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype nav-mesh (basic)
  ((user-list           engine           :offset-assert 4)
   (poly-lookup-history uint8 2         :offset-assert 8)
   (debug-time          uint8           :offset-assert 10)
   (static-sphere-count uint8           :offset-assert 11)
   (static-sphere       (inline-array nav-sphere)          :offset-assert 12)
   (bounds              sphere  :inline :offset-assert 16)
   (origin              vector  :inline :offset-assert 32)
   (cache               nav-lookup-elem 4 :inline :offset-assert 48) ;; guess on type
   (node-count          int32           :offset-assert 176)
   (nodes               (inline-array nav-node)        :offset-assert 180)
   (vertex-count        int32           :offset-assert 184)
   (vertex              (inline-array nav-vertex)          :offset-assert 188)
   (poly-count          int32           :offset-assert 192)
   (poly                (inline-array nav-poly)          :offset-assert 196)
   (route               (inline-array vector4ub)          :offset-assert 200) ;; this is a guess, it's probably wrong -- but its something with a uint8 at offset 0
   )
  :method-count-assert 30
  :size-assert         #xcc
  :flag-assert         #x1e000000cc
  (:methods
    (tri-centroid-world (_type_ nav-poly vector) vector 9) ;; finds the centroid of the given triangle, in the "world" coordinate system.
    (tri-centroid-local (_type_ nav-poly vector) vector 10) ;; finds the centroid of the given triangle, in the local nav-mesh coordinate system.
    (get-adj-poly (_type_ nav-poly nav-poly symbol) nav-poly 11)
    (setup-portal (_type_ nav-poly nav-poly nav-route-portal) object 12) ;; sets up a portal between two polys.
    (initialize-mesh! (_type_) none 13)
    (move-along-nav-ray! (_type_ nav-ray) none 14) ;; think this updates the current position in a nav-ray, and updates which triangle you're in.
    ;; this takes in a point/direction/distance, and see what would happen if you tried to move this way.
    ;; it returns the distance you can go before one of these happens:
    ;; - you reach the destination
    ;; - you hit a nav mesh boundary/gap
    ;; - you cross 15 triangles.
    (try-move-along-ray (_type_ nav-poly vector vector float) meters 15)
    (nav-mesh-method-16 (_type_ vector nav-poly vector symbol float clip-travel-vector-to-mesh-return-info) none 16)
    (update-route-table (_type_) none 17) ;; (initialization related)
    (nav-mesh-method-18 (_type_ int vector int (pointer int8) int) none 18) ;; something to do with routes.
    (compute-bounding-box (_type_ vector vector) none 19)
    (debug-draw-poly (_type_ nav-poly rgba) none 20) ;; TODO - is rgba a vector4w?
    (point-in-poly? (_type_ nav-poly vector) symbol 21) ;; is the point inside of the triangle?
    (find-opposite-vertices (_type_ nav-poly nav-poly) uint 22) ;; given two triangles that share an edge, get the indices of the two vertices that aren't part of the edge.
    (nav-mesh-method-23 (_type_ nav-poly vector vector vector nav-route-portal) vector 23)
    (closest-point-on-boundary (_type_ nav-poly vector vector) vector 24) ;; find the closest point on the perimeter of the triangle.
    (project-point-into-tri-3d (_type_ nav-poly vector vector) none 25) ;; will move a 3D point in space to the surface of this nav-poly
    ;; Looking from the top down, is the point inside the nav-poly?
    ;; - if the point is inside the triangle, returns that point.
    ;; - if the point is outside the triangle, move it to the closest point (will be on the edge)
    (project-point-into-tri-2d (_type_ nav-poly vector vector) vector 26)
    ;; finds which triangle the given point is in.
    ;; also has some caching stuff so if you look up the same point multiple times, it won't redo the work.
    ;; I _think_ this is only an approximate check that may return #f even if you are inside.
    ;; But, if it returns a poly, it will be right.
    (find-poly-fast (_type_ vector meters) nav-poly 27)
    (find-poly (_type_ vector meters (pointer nav-control-flags)) nav-poly 28) ;; The accurate version of find-poly (tries find-poly-fast first)
    ;; checks to see if the triangle is in the mesh or not.
    ;; not sure why it's separate from 27 (and such a different implementation). there might be some details I'm missing here.
    (is-in-mesh? (_type_ vector float meters) symbol 29)
    )
  )

(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert 0)
   (intersect vector :inline :offset-assert 16)
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert 0)
   (poly nav-poly         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype nav-control (basic)
  ((flags               nav-control-flags :offset-assert 4)
   (process             basic             :offset-assert 8)
   (shape               collide-shape     :offset-assert 12)
   (mesh                nav-mesh          :offset-assert 16)
   (gap-event           basic             :offset-assert 20)
   (block-event         basic             :offset-assert 24)
   (current-poly        nav-poly          :offset-assert 28)
   (next-poly           nav-poly          :offset-assert 32)
   (target-poly         nav-poly          :offset-assert 36)
   (portal              nav-route-portal  2        :offset-assert 40) ;; guess
   (nearest-y-threshold meters            :offset-assert 48)
   (event-temp          vector   :inline  :offset-assert 64)
   (old-travel          vector   :inline  :offset-assert 80)
   (blocked-travel      vector   :inline  :offset-assert 96)
   (prev-pos            vector   :inline  :offset-assert 112)
   (extra-nav-sphere    vector   :inline  :offset-assert 128)
   (travel              vector   :inline  :offset-assert 144)
   (target-pos          vector   :inline  :offset-assert 160)
   (destination-pos     vector   :inline  :offset-assert 176)
   (block-time          time-frame            :offset-assert 192)
   (block-count         float             :offset-assert 200)
   (user-poly           nav-poly          :offset-assert 204)
   (nav-cull-radius     float             :offset-assert 208)
   (num-spheres         int16             :offset-assert 212)
   (max-spheres         int16             :offset-assert 214)
   (sphere              sphere :inline  :dynamic :offset-assert 224) ;; guess
   )
  :method-count-assert 36
  :size-assert         #xe0
  :flag-assert         #x24000000e0
  (:methods
    (new (symbol type collide-shape int float) _type_)
    (debug-draw (_type_) none 9)
    (point-in-bounds? (_type_ vector) symbol 10)
    (nav-control-method-11 (_type_ vector) vector 11)
    (nav-control-method-12 (_type_ nav-gap-info) symbol 12)
    (nav-control-method-13 (_type_ vector vector) vector 13) ;; see - puffer::20 | second vector may be clip-travel-vector-to-mesh-return-info though
    (set-current-poly! (_type_ nav-poly) none 14)
    (set-target-pos! (_type_ vector) none 15)
    (nav-control-method-16 (_type_ vector) nav-poly 16) ; see - nav-enemy-test-point-in-nav-mesh?
    (project-onto-nav-mesh (_type_ vector vector) vector 17) ;; moves point to nav-mesh.
    (find-poly (_type_ vector) nav-poly 18)
    (nav-control-method-19 (_type_ vector collide-shape-moving vector float) none 19) ;; csm not trsqv? ret not vector?
    (project-point-into-tri-3d (_type_ nav-poly vector vector) vector 20)
    (nav-control-method-21 (_type_ vector) nav-poly 21)
    (nav-control-method-22 (_type_ vector float) symbol 22)
    (nav-control-method-23 (_type_ vector check-vector-collision-with-nav-spheres-info) float 23) ;; TODO - unconfirmed maybe (nav-control-method-23 (_type_ vector matrix) float 23)
    (nav-control-method-24 (_type_ float clip-travel-vector-to-mesh-return-info) none 24)
    (is-in-mesh? (_type_ vector float) symbol 25) ; see - nav-enemy-test-point-near-nav-mesh?
    (nav-control-method-26 (_type_) none 26) ;; stub
    (nav-control-method-27 (_type_) none 27)
    (nav-control-method-28 (_type_ collide-kind) none 28)
    (should-display? (_type_) symbol 29)
    (nav-control-method-30 (_type_ vector vector vector) sphere 30) ;; TODO - last arg? - it has a float as the first arg, vector is a total guess
    (intersect-ray-line-segment? (_type_ vector vector vector vector) symbol 31)
    (nav-control-method-32 (_type_ vector vector vector vector float) symbol 32)
    (nav-control-method-33 (_type_ vector vector vector vector float) symbol 33)
    (nav-control-method-34 () none 34)
    (nav-control-method-35 (_type_ vector vector vector vector float) none 35)
    )
  )

;; - Functions

(define-extern nav-mesh-connect (function process trsqv nav-control nav-mesh :behavior process))
(define-extern has-nav-mesh? (function entity-actor symbol))

;; - Symbols

(define-extern process-level-heap kheap)
(define-extern *default-nav-mesh* nav-mesh)


;; ----------------------
;; File - load-dgo
;; Source Path - engine/load/load-dgo.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype load-dgo-msg (structure)
  ((rsvd       uint16              :offset-assert 0) ;; unused?
   (result     load-msg-result     :offset-assert 2) ;; status from OVERLORD
   (b1         pointer             :offset-assert 4) ;; EE -> OVERLORD, first temp load buffer
   (b2         pointer             :offset-assert 8) ;; EE -> OVERLORD, second temp load buffer
   (bt         pointer             :offset-assert 12) ;; EE -> OVERLORD, location of heap
   (name       uint128             :offset-assert 16) ;; EE -> OVERLORD, name of file.
   (name-chars uint8   16          :offset  16)       ;; name of file (as chars)
   (address    uint32              :offset   4) ;; OVERLORD -> EE, location of loaded file.
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype load-chunk-msg (structure)
  ((rsvd     uint16     :offset-assert 0)
   (result   load-msg-result     :offset-assert 2)
   (address  pointer    :offset-assert 4)
   (section  uint32     :offset-assert 8)
   (maxlen   uint32     :offset-assert 12)
   (id       uint32     :offset 4)
   (basename uint8 48 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype dgo-header (structure)
  ((length   uint32     :offset-assert 0)
   (rootname uint8 60 :offset-assert 4)
   ;; added
   (data uint8 :dynamic :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; - Functions

(define-extern link-begin (function pointer (pointer uint8) int kheap link-flag int))
(define-extern string->sound-name (function string sound-name))
(define-extern str-load (function string int pointer int symbol))
(define-extern str-load-status (function (pointer int32) symbol))
(define-extern str-load-cancel (function none))
(define-extern str-play-async (function string sound-id none))
(define-extern str-play-stop (function string none))
(define-extern str-play-queue (function string none))
(define-extern str-ambient-play (function string none))
(define-extern str-ambient-stop (function string none))
(define-extern str-play-kick (function none))
(define-extern dgo-load-begin (function string pointer pointer pointer load-dgo-msg))
(define-extern dgo-load-get-next (function (pointer symbol) pointer))
(define-extern dgo-load-continue (function pointer int))
(define-extern dgo-load-cancel (function none))
(define-extern find-temp-buffer (function int pointer))
(define-extern dgo-load-link (function dgo-header kheap symbol symbol symbol))
(define-extern destroy-mem (function (pointer uint32) (pointer uint32) none))

;; - Symbols

(define-extern *dgo-name* string)
(define-extern *load-dgo-rpc* rpc-buffer-pair)
(define-extern *dgo-time* time-frame)
(define-extern *play-str-rpc* rpc-buffer-pair)
(define-extern *que-str-lock* symbol)
(define-extern *load-str-lock* symbol)
(define-extern *load-str-rpc* rpc-buffer-pair)


;; ----------------------
;; File - ramdisk
;; Source Path - engine/load/ramdisk.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype ramdisk-rpc-fill (structure)
  ((rsvd1    int32     :offset-assert 0)
   (ee-id    int32     :offset-assert 4)
   (rsvd2    int32 2 :offset-assert 8)
   (filename uint128   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ramdisk-rpc-load (structure)
  ((rsvd   int32   :offset-assert 0)
   (ee-id  int32   :offset-assert 4)
   (offset uint32  :offset-assert 8)
   (length uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ramdisk-rpc-load-to-ee (structure)
  ((rsvd     int32    :offset-assert 0)
   (addr     int32    :offset-assert 4)
   (offset   int32    :offset-assert 8)
   (length   int32    :offset-assert 12)
   (filename uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; - Functions

(define-extern ramdisk-load (function int uint uint pointer int))
(define-extern ramdisk-sync (function none))

;; - Symbols

(define-extern *ramdisk-rpc* rpc-buffer-pair)
(define-extern *current-ramdisk-id* int)


;; ----------------------
;; File - gsound
;; Source Path - engine/sound/gsound.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sound-iop-info (basic)
  ((frame       uint32     :offset  16)
   (strpos      int32      :offset-assert 20)
   (str-id      sound-id   :offset-assert 24)
   (str-id-sign int32      :offset  24)
   (freemem     uint32     :offset-assert 28)
   (chinfo      uint8  48  :offset-assert 32)
   (freemem2    uint32     :offset-assert 80)
   (nocd        uint32     :offset-assert 84)
   (dirtycd     uint32     :offset-assert 88)
   (diskspeed   uint32 2   :offset-assert 92)
   (lastspeed   uint32     :offset-assert 100)
   (dupseg      int32      :offset-assert 104)
   (times       uint32 41  :offset-assert 108)
   (times-seq   uint32     :offset-assert 272)
   )
  :method-count-assert 9
  :size-assert         #x114
  :flag-assert         #x900000114
  )

(deftype flava-table-row (structure)
  ((music symbol     :offset-assert 0)
   (flava uint8   50 :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )

(deftype flava-table (basic)
  ((row   flava-table-row 20 :inline :offset-assert 4)
   (count int32      :offset-assert 1284)
   )
  :method-count-assert 9
  :size-assert         #x508
  :flag-assert         #x900000508
  )

;; - Functions

(define-extern math-camera-pos (function vector))
(define-extern target-pos (function int vector))
(define-extern camera-pos (function vector))
(define-extern new-sound-id (function sound-id))
(define-extern get-sound-buffer-entry (function pointer))
(define-extern sound-trans-convert (function vector3w vector int))
(define-extern sound-stop (function sound-id int))
(define-extern effect-param->sound-spec (function sound-spec (pointer float) int sound-spec))
(define-extern ear-trans (function vector))
(define-extern sound-play-by-spec (function sound-spec sound-id vector sound-id))
(define-extern sound-play-by-name (function sound-name sound-id int int int sound-group symbol sound-id))
(define-extern sound-angle-convert (function float int))
(define-extern sound-set-ear-trans (function vector vector float int))
(define-extern activate-progress (function process progress-screen none))
(define-extern kset-language (function language-enum int))
(define-extern sound-command->string (function sound-command string))
(define-extern sound-name= (function sound-name sound-name symbol))
(define-extern str-is-playing? (function symbol))
(define-extern current-str-id (function sound-id))
(define-extern current-str-pos (function sound-id int))
(define-extern is-cd-in? (function symbol))
(define-extern check-irx-version (function int))
(define-extern sound-bank-load (function sound-name sound-id))
(define-extern sound-bank-unload (function sound-name int))
(define-extern sound-music-load (function sound-name int))
(define-extern sound-music-unload (function int))
(define-extern sound-reload-info (function int))
(define-extern set-language (function language-enum int))
(define-extern list-sounds (function int))
(define-extern sound-buffer-dump (function int))
(define-extern swap-sound-buffers (function vector vector float int))
(define-extern free-last-sound-buffer-entry (function int))
(define-extern sound-basic-cb (function int (pointer int32) none))
(define-extern sound-set-volume (function sound-group float int))
(define-extern sound-set-reverb (function int float float uint int))
(define-extern sound-pause (function sound-id int))
(define-extern sound-continue (function sound-id int))
(define-extern sound-group-pause (function sound-group int))
(define-extern sound-group-stop (function sound-group int))
(define-extern sound-group-continue (function sound-group int))
(define-extern sound-set-falloff-curve (function int float float int))
(define-extern sound-set-sound-falloff (function sound-name int int int int))
(define-extern sound-set-flava (function uint int))
(define-extern sound-volume-off (function int))
(define-extern sound-set-fps (function int int))
(define-extern show-iop-info (function dma-buffer int))
(define-extern show-iop-memory (function dma-buffer int))
(define-extern make-sqrt-table (function int))
(define-extern flava-lookup (function symbol music-flava int))

;; - Symbols

(define-extern *flava-table* flava-table)
(define-extern *sound-iop-info* sound-iop-info)
(define-extern *ambient-spec* sound-spec)
(define-extern *debug-effect-control* symbol)
(define-extern *setting-control* setting-control)
(define-extern *sound-player-enable* symbol)
(define-extern *sound-player-rpc* rpc-buffer-pair)
(define-extern *sound-loader-rpc* rpc-buffer-pair)


;; ----------------------
;; File - transformq
;; Source Path - engine/math/transformq.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern transformq-copy! (function transformq transformq transformq))
(define-extern matrix<-transformq! (function matrix transformq matrix))
(define-extern matrix<-no-trans-transformq! (function matrix transformq matrix))
(define-extern matrix<-transformq+trans! (function matrix transformq vector matrix))
(define-extern matrix<-transformq+world-trans! (function matrix transformq vector matrix))
(define-extern matrix<-parented-transformq! (function matrix transformq vector matrix))


;; ----------------------
;; File - collide-func
;; Source Path - engine/collide/collide-func.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

;; pt, u, sphere, rad
(define-extern ray-sphere-intersect (function vector vector vector float float))
(define-extern raw-ray-sphere-intersect (function float float))
(define-extern ray-circle-intersect (function vector vector vector float float))
(define-extern ray-cylinder-intersect (function vector vector vector vector float float vector float))
(define-extern ray-plane-intersect (function vector vector vector vector vector vector vector float))
(define-extern ray-triangle-intersect (function vector vector float matrix vector vector float))
(define-extern collide-do-primitives (function float)) ;; NOTE - didn't bother to check input args
(define-extern moving-sphere-sphere-intersect (function vector vector vector vector float))
(define-extern moving-sphere-moving-sphere-intersect (function vector vector vector vector vector float))
(define-extern moving-sphere-triangle-intersect (function vector vector float collide-cache-tri vector vector float))


;; ----------------------
;; File - joint
;; Source Path - engine/anim/joint.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern flatten-joint-control-to-spr (function joint-control int))
(define-extern make-joint-jump-tables (function int))
(define-extern calc-animation-from-spr (function (inline-array vector) int none))
(define-extern decompress-fixed-data-to-accumulator (function none))
(define-extern decompress-frame-data-to-accumulator (function none))
(define-extern decompress-frame-data-pair-to-accumulator (function none))
(define-extern matrix-from-control! (function matrix-stack joint joint-control symbol matrix))
(define-extern matrix-from-control-channel! (function matrix joint joint-control-channel matrix))
(define-extern matrix-from-control-pair! (function matrix matrix joint matrix))
(define-extern matrix-from-joint-anim-frame (function joint-anim-compressed-control int int matrix)) ;; ???
(define-extern create-interpolated-joint-animation-frame (function (inline-array vector) int process-drawable int))
(define-extern mem-size (function basic symbol int int))
(define-extern jacc-mem-usage (function joint-anim-compressed-control memory-usage-block int joint-anim-compressed-control))
(define-extern joint-anim-inspect-elt (function joint-anim float joint-anim))
(define-extern joint-anim-login (function joint-anim-drawable joint-anim-drawable))
(define-extern joint-control-channel-eval (function joint-control-channel none))
(define-extern joint-control-channel-eval! (function joint-control-channel (function joint-control-channel float float float) none))
(define-extern joint-control-channel-group-eval! (function joint-control-channel art-joint-anim (function joint-control-channel float float float) int))
(define-extern joint-control-channel-group! (function joint-control-channel art-joint-anim (function joint-control-channel float float float) int))
(define-extern joint-control-copy! (function joint-control joint-control joint-control))
(define-extern joint-control-remap! (function joint-control art-group art-group pair int string object))
(define-extern cspace<-cspace! (function cspace cspace matrix))
(define-extern cspace<-rot-yxy! (function cspace transform matrix)) ;; unused
(define-extern cspace<-transform-yxy! (function cspace transform matrix)) ;; unused
(define-extern cspace<-transformq+trans! (function cspace transformq vector matrix))
(define-extern cspace<-transformq+world-trans! (function cspace transformq vector matrix))
(define-extern cspace-calc-total-matrix! (function cspace matrix matrix))
(define-extern cspace<-matrix-no-push-joint! (function cspace joint-control matrix))
(define-extern cspace<-matrix-joint! (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-joint! (function cspace matrix matrix))
(define-extern clear-frame-accumulator (function (inline-array vector) none))
(define-extern normalize-frame-quaternions function)


;; ----------------------
;; File - cylinder
;; Source Path - engine/geometry/cylinder.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cylinder-verts (structure)
  ((vert vector 24 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype cylinder-flat-verts (structure)
  ((vert vector 10 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; - Functions

(define-extern ray-arbitrary-circle-intersect (function vector vector vector vector float float))
(define-extern camera-line (function vector vector vector4w none))


;; ----------------------
;; File - wind
;; Source Path - engine/gfx/wind.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern update-wind (function wind-work (array uint8) none))


;; ----------------------
;; File - bsp
;; Source Path - engine/gfx/vis/bsp.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern print-cl-stat (function cl-stat string none))
(define-extern clear-cl-stat (function cl-stat none))
(define-extern mem-usage-bsp-tree (function bsp-header bsp-node memory-usage-block int none))
(define-extern bsp-camera-asm (function bsp-header vector none))
(define-extern print-collide-stats (function none))

;; - Unknowns

(define-extern *test-shrub* int)


;; ----------------------
;; File - subdivide
;; Source Path - engine/gfx/tfrag/subdivide.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(defenum perf-stat-bucket
  (all-code 0)
  (mercneric 1)
  (tie-generic 2)
  (background 3)
  (drawable 4)
  (tfrag 5)
  (tfrag-near 6)
  (inst-shrub 7)
  (proto-shrub 8)
  (inst-tie 9)
  (proto-tie-g 10)
  (proto-tie 11)
  (proto-tie-n 12)
  (bones 13)
  (nav 14)
  (collide 15)
  (camera 16))

(define-extern perf-stat-bucket->string (function perf-stat-bucket string))
(define-extern print-tr-stat (function tr-stat string string none))
(define-extern clear-tr-stat (function tr-stat none))
(define-extern print-terrain-stats (function none))
(define-extern update-subdivide-settings! (function subdivide-settings math-camera int none))
(define-extern set-tfrag-dists! (function tfrag-dists none))
(define-extern start-perf-stat-collection (function none))
(define-extern end-perf-stat-collection (function none))
(define-extern print-perf-stats (function none))

;; - Unknowns

(define-extern *subdivide-settings* subdivide-settings)
(define-extern *tfrag-work* tfrag-work)
(define-extern *perf-stats* perf-stat-array)
(define-extern *merc-global-stats* merc-global-stats)
(define-extern *stat-string-tfrag-near* string)
(define-extern *stat-string-tfrag* string)
(define-extern *stat-string-total* string)
(define-extern *terrain-context* terrain-context)
(define-extern GSH_ENABLE symbol)
(define-extern GSH_BUCKET bucket-id)
(define-extern GSH_WHICH_STAT int)
(define-extern GSH_MAX_DISPLAY basic)
(define-extern GSH_TIME int)
(define-extern *gomi-stats-hack* (inline-array perf-stat))


;; ----------------------
;; File - sprite
;; Source Path - engine/gfx/sprite/sprite.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sprite-header (structure)
  (
   (header      qword 1 :inline :offset-assert 0)
   (num-sprites int32     :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-hvdf-data (structure)
  ((data qword 76 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4c0
  :flag-assert         #x9000004c0
  )

(deftype sprite-hvdf-control (structure)
  ((alloc int8 76 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype sprite-aux-list (basic)
  ((num-entries int32     :offset-assert 4)
   (entry       int32     :offset-assert 8)
   (data        sprite-vec-data-2d 1   :offset-assert 12) ;; likely 4-bytes each
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-frame-data (structure)
  (
   ;(data               UNKNOWN      41      :offset-assert 0)
   (cdata              vector      16 :inline     :offset-assert 0)
   ;(fdata              UNKNOWN      25      :offset-assert 256)
   ;(xy-array           UNKNOWN      8       :offset-assert 0)
   ;(st-array           UNKNOWN      4       :offset-assert 128)
   ;(xyz-array          UNKNOWN      4       :offset-assert 192)
   (hmge-scale         vector       :inline :offset 256)
   (consts             vector       :inline :offset-assert 272 :score -100.)
   (pfog0              float                :offset 272)
   (deg-to-rad         float                :offset 276)
   (min-scale          float                :offset 280)
   (inv-area           float                :offset 284)
   ;(adgif-giftag       qword        :inline :offset-assert 288)
   (adgif-giftag       gs-gif-tag        :inline :offset-assert 288)
   (sprite-2d-giftag   gs-gif-tag        :inline :offset-assert 304)
   (sprite-2d-giftag-2 gs-gif-tag        :inline :offset-assert 320)
   ;;(sprite-2d-giftag   qword        :inline :offset-assert 304)
   ;;(sprite-2d-giftag-2 qword        :inline :offset-assert 320)
   (sincos-01          vector       :inline :offset-assert 336)
   (sincos-23          vector       :inline :offset-assert 352)
   (sincos-45          vector       :inline :offset-assert 368)
   (sincos-67          vector       :inline :offset-assert 384)
   (sincos-89          vector       :inline :offset-assert 400)
   (basis-x            vector       :inline :offset-assert 416)
   (basis-y            vector       :inline :offset-assert 432)
   ;;(sprite-3d-giftag   qword        :inline :offset-assert 448)
   (sprite-3d-giftag   gs-gif-tag   :inline :offset-assert 448)
   (screen-shader      adgif-shader :inline :offset-assert 464)
   ;;(clipped-giftag     qword        :inline :offset-assert 544)
   (clipped-giftag     gs-gif-tag   :inline :offset-assert 544)
   (inv-hmge-scale     vector       :inline :offset-assert 560)
   (stq-offset         vector       :inline :offset-assert 576)
   (stq-scale          vector       :inline :offset-assert 592)
   (rgba-plain         qword        :inline :offset-assert 608)
   ;;(warp-giftag        qword        :inline :offset-assert 624)
   (warp-giftag        gs-gif-tag   :inline :offset-assert 624)
   (fog-clamp          vector       :inline :offset-assert 640)
   (fog-min            float                :offset 640)
   (fog-max            float                :offset 644)
   (max-scale          float                :offset 648)
   )
  :method-count-assert 9
  :size-assert         #x290
  :flag-assert         #x900000290
  )

;; - Functions

(define-extern sprite-init-distorter (function dma-buffer uint none))
(define-extern sprite-draw-distorters (function dma-buffer none))
(define-extern sprite-add-frame-data (function dma-buffer uint none))
(define-extern sprite-add-matrix-data (function dma-buffer uint none))
(define-extern sprite-add-3d-all (function sprite-array-3d dma-buffer int none))
(define-extern sprite-add-2d-all (function sprite-array-2d dma-buffer int none))
(define-extern sprite-add-shadow-all (function fake-shadow-buffer dma-buffer none))
(define-extern sprite-add-shadow-chunk (function fake-shadow-buffer int int dma-buffer none))
(define-extern sprite-setup-header (function sprite-header int none))
(define-extern sprite-add-3d-chunk (function sprite-array-3d int int dma-buffer none))
(define-extern sprite-add-2d-chunk (function sprite-array-2d int int dma-buffer int none))
(define-extern sprite-setup-frame-data (function sprite-frame-data int none))
(define-extern clear-sprite-aux-list (function none))
(define-extern add-to-sprite-aux-list (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d none)) ;; it's a callback.
(define-extern sprite-set-3d-quaternion! (function sprite-vec-data-3d quaternion quaternion))
(define-extern sprite-get-3d-quaternion! (function quaternion sprite-vec-data-3d quaternion))
(define-extern sprite-draw (function display none))
(define-extern sprite-allocate-user-hvdf (function int))
(define-extern sprite-release-user-hvdf (function int none))
(define-extern sprite-get-user-hvdf (function int vector))

;; - Symbols

(define-extern *shadow-middot-texture* texture)

;; - Unknowns

(define-extern *sprite-hvdf-data* sprite-hvdf-data)
(define-extern *sprite-hvdf-control* sprite-hvdf-control)
(define-extern sprite-vu1-block vu-function)
(define-extern *sprite-array-3d* sprite-array-3d)
(define-extern *sprite-array-2d* sprite-array-2d)
(define-extern *sprite-aux-list* sprite-aux-list)


;; ----------------------
;; File - sprite-distort
;; Source Path - engine/gfx/sprite/sprite-distort.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sprite-distorter-sine-tables (basic)
  ((aspx   float           :offset-assert 4)
   (aspy   float           :offset-assert 8)
   (entry  vector 128 :inline     :offset-assert 16)
   (ientry qword 9 :inline      :offset-assert 2064)
   (giftag gs-gif-tag   :inline :offset-assert 2208) ;; was qword
   (color  qword   :inline :offset-assert 2224)
   )
  :method-count-assert 9
  :size-assert         #x8c0
  :flag-assert         #x9000008c0
  )

;; - Unknowns

(define-extern *sprite-distorter-sine-tables* sprite-distorter-sine-tables)
(define-extern sprite-distort-vu1-block vu-function)


;; ----------------------
;; File - debug-sphere
;; Source Path - engine/debug/debug-sphere.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype debug-sphere-table (basic)
  ((point vector 300 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x12d0
  :flag-assert         #x9000012d0
  )

;; - Functions

(define-extern add-debug-line (function symbol bucket-id vector vector rgba symbol rgba symbol))
(define-extern make-debug-sphere-table (function debug-sphere-table none))
(define-extern add-debug-sphere-from-table (function bucket-id vector float rgba none))

;; - Symbols

(define-extern *debug-sphere-table* debug-sphere-table)


;; ----------------------
;; File - debug
;; Source Path - engine/debug/debug.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype debug-line (structure)
  ((flags  int32          :offset-assert 0)
   (bucket bucket-id      :offset-assert 4)
   (v1     vector :inline :offset-assert 16)
   (v2     vector :inline :offset-assert 32)
   (color  rgba           :offset-assert 48)
   (mode   symbol         :offset-assert 52)
   (color2 rgba           :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype debug-text-3d (structure)
  ((flags  int32            :offset-assert 0)
   (bucket bucket-id        :offset-assert 4)
   (pos    vector   :inline :offset-assert 16)
   (color  font-color       :offset-assert 32)
   (offset vector2h :inline :offset-assert 40)
   (str    string           :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype debug-tracking-thang (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; - Functions

(define-extern debug-set-camera-pos-rot! (function vector matrix vector))
(define-extern drawable-frag-count (function drawable int))
(define-extern add-debug-light (function symbol bucket-id light vector string symbol))
(define-extern add-debug-text-3d (function symbol bucket-id string vector font-color vector2h symbol))
(define-extern add-debug-x (function symbol bucket-id vector rgba symbol))
(define-extern add-debug-curve (function symbol bucket-id (inline-array vector) int (pointer float) int rgba symbol))
(define-extern add-debug-sphere (function symbol bucket-id vector float rgba symbol))
(define-extern get-debug-text-3d (function debug-text-3d))
(define-extern internal-draw-debug-text-3d (function bucket-id string vector font-color vector2h pointer))
(define-extern get-debug-line (function debug-line))
(define-extern internal-draw-debug-line (function bucket-id vector vector rgba symbol rgba pointer))
(define-extern draw-string (function string dma-buffer font-context float))
(define-extern transform-float-point (function vector vector4w vector4w))
(define-extern add-debug-point (function symbol bucket-id vector symbol)) ;; unused
(define-extern add-debug-outline-triangle (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-triangle-normal (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-flat-triangle (function symbol bucket-id vector vector vector rgba symbol))
(define-extern debug-reset-buffers (function symbol))
(define-extern debug-draw-buffers (function symbol))
(define-extern add-debug-line2d (function symbol bucket-id vector vector vector symbol))
(define-extern add-debug-box (function symbol bucket-id vector vector rgba symbol))
(define-extern add-debug-sphere-with-transform (function symbol bucket-id vector meters matrix rgba symbol))
(define-extern add-debug-spheres (function symbol bucket-id (inline-array vector) int rgba symbol))
(define-extern add-debug-circle (function symbol bucket-id vector float rgba matrix symbol))
(define-extern add-debug-rot-matrix (function symbol bucket-id matrix vector matrix))
(define-extern add-debug-yrot-vector (function symbol bucket-id vector float float rgba symbol))
(define-extern add-debug-arc (function symbol bucket-id vector float float float rgba matrix symbol))
(define-extern add-debug-curve2 (function symbol bucket-id curve rgba symbol symbol))
(define-extern add-debug-points (function symbol bucket-id (inline-array vector) int rgba float int symbol)) ;; unused
(define-extern debug-percent-bar (function symbol bucket-id int int float rgba symbol))
(define-extern debug-pad-display (function cpad-info symbol)) ;; unused
(define-extern add-debug-lights (function symbol bucket-id (inline-array light) vector symbol))
(define-extern history-init (function pos-history int pos-history))
(define-extern history-draw-and-update (function pos-history int vector symbol))
(define-extern dma-timeout-cam (function vector))
(define-extern display-file-info (function int))

;; - Unknowns

(define-extern add-debug-vector (function symbol bucket-id vector vector meters rgba symbol))
(define-extern *debug-lines* (inline-array debug-line))
(define-extern *debug-lines-trk* debug-tracking-thang)
(define-extern *debug-text-3ds* (inline-array debug-text-3d))
(define-extern *debug-text-3d-trk* debug-tracking-thang)


;; ----------------------
;; File - merc-vu1
;; Source Path - engine/gfx/merc/merc-vu1.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern merc-vu1-block vu-function)


;; ----------------------
;; File - merc-blend-shape
;; Source Path - engine/gfx/merc/merc-blend-shape.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert 0)
   (vtx-count uint32                   :offset-assert 16)
   (overlap   uint32                   :offset-assert 20)
   (lump-dest uint32                   :offset-assert 24)
   (lump-qwc  uint32                   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype blerc-block (structure)
  ((output uint8            848     :offset-assert 0)
   (header blerc-block-header :inline :offset-assert 848)
   )
  :method-count-assert 9
  :size-assert         #x370
  :flag-assert         #x900000370
  )

(deftype blerc-dcache (structure)
  ((repl-mult vector 40 :inline  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert 0)
   (next             uint32  :offset-assert 4)
   (min-val          int16   :offset-assert 8)
   (max-val          int16   :offset-assert 10)
   (fragment-count   int32   :offset-assert 12)
   (vtx-count        int32   :offset-assert 16)
   (target-vtx-count int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype blerc-context (structure)
  ((block-a blerc-block :inline :offset-assert 0)
   (dummy   uint8     7312    :offset-assert 880)
   (block-b blerc-block :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x2370
  :flag-assert         #x900002370
  )

;; - Functions

(define-extern setup-blerc-chains-for-one-fragment (function object object object object object object object))
(define-extern setup-blerc-chains (function merc-ctrl (pointer int16) dma-buffer none))
(define-extern blerc-stats-init (function none))
(define-extern blerc-init (function none))
(define-extern blerc-a-fragment function)
(define-extern dma-from-spr function)
(define-extern merc-dma-chain-to-spr function)
(define-extern blerc-execute (function none))
(define-extern merc-blend-shape (function process-drawable object))

;; - Unknowns

(define-extern *blerc-globals* blerc-globals)
(define-extern *stats-blerc* symbol)


;; ----------------------
;; File - merc
;; Source Path - engine/gfx/merc/merc.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern merc-vu1-init-buffer (function bucket-id gs-test int none))
(define-extern merc-vu1-initialize-chain (function dma-gif-packet dma-packet))
(define-extern merc-vu1-add-vu-function (function dma-packet vu-function int dma-gif-packet))
(define-extern get-eye-block (function int int int))
(define-extern merc-stats-display (function merc-ctrl none))
(define-extern merc-stats (function none))
(define-extern merc-edge-stats (function none))
(define-extern merc-vu1-init-buffers (function none))

;; - Unknowns

(define-extern *merc-ctrl-header* merc-ctrl-header)


;; ----------------------
;; File - ripple
;; Source Path - engine/gfx/ripple.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype ripple-request (structure)
  ((waveform ripple-wave  :offset-assert 0)
   (effect   merc-effect  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ripple-globals (structure)
  ((count    int32      :offset-assert 0)
   (requests ripple-request 16 :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

;; - Functions

(define-extern ripple-update-waveform-offs (function ripple-wave-set none))
(define-extern ripple-slow-add-sine-waves (function ripple-wave-set float float float))
(define-extern ripple-execute-init (function none))
(define-extern ripple-create-wave-table (function ripple-wave-set int))
(define-extern ripple-apply-wave-table (function merc-effect symbol))
(define-extern ripple-make-request (function ripple-wave merc-effect none))
(define-extern ripple-execute (function none))
(define-extern ripple-matrix-scale function)
(define-extern ripple-add-debug-sphere (function process-drawable vector float float none)) ; TODO - this could be a child type of process-drawable instead
(define-extern ripple-find-height (function process-drawable int vector float))

;; - Symbols

(define-extern *ripple-globals* ripple-globals)


;; ----------------------
;; File - bones
;; Source Path - engine/anim/bones.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum bone-calc-flags
  :type uint16
  :bitfield #t
  (bncfl00 0)
  (bncfl01 1)  ;; use identity matrix in bone matrix calc instead of cam rot (effectively screen-space bones?)
  (bncfl02 2)
  (bncfl03 3)
  (bncfl04 4)
  (bncfl05 5)
  (bncfl06 6)
  (bncfl07 7)
  (bncfl08 8)
  (bncfl09 9)
  (bncfl10 10)
  (bncfl11 11)
  (bncfl12 12)
  (bncfl13 13)
  (bncfl14 14)
  (bncfl15 15)
  )

(deftype bone-calculation (structure)
  ((flags               bone-calc-flags   :offset-assert 0)
   (num-bones           uint16            :offset-assert 2)
   (matrix-area         (inline-array matrix) :offset-assert 4)
   (joints              (inline-array joint)  :offset-assert 8)
   (bones               (inline-array bone)   :offset-assert 12)
   (ripple-scale        float             :offset-assert 16)
   (ripple-y-scale      float             :offset-assert 20)
   (ripple-normal-scale float             :offset-assert 24)
   (ripple-area         (inline-array vector) :offset-assert 28)
   (next                bone-calculation  :offset-assert 32)
   (dummy-1             uint32            :offset-assert 36)
   (dummy-2             uint32            :offset-assert 40)
   (dummy-3             uint32            :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype bone-calculation-list (structure)
  ((first bone-calculation  :offset-assert 0)
   (next  bone-calculation  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype texscroll-globals (structure)
  ((requests int32      :offset-assert 0)
   (effects  merc-effect 32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype merc-effect-bucket-info (structure)
  ((color-fade    rgba    :offset-assert 0)
   (use-mercneric uint8   :offset-assert 4)
   (ignore-alpha  uint8   :offset-assert 5)
   (pad0          uint8   :offset-assert 6)
   (pad1          uint8   :offset-assert 7)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-bucket-info (structure)
  ((light                       vu-lights :inline :offset-assert 0)
   (needs-clip                  int32             :offset-assert 112)
   (need-mercprime-if-merc      int32             :offset-assert 116)
   (must-use-mercneric-for-clip int32             :offset-assert 120)
   (effect   merc-effect-bucket-info  16  :inline :offset-assert 124)
   )
  :method-count-assert 9
  :size-assert         #xfc
  :flag-assert         #x9000000fc
  )

;; - Functions

(define-extern paused? (function symbol))
(define-extern dump-mem (function pointer int none))
(define-extern bone-list-init (function none))
(define-extern texscroll-make-request (function merc-effect none))
(define-extern texscroll-execute (function none))
(define-extern bones-set-sqwc (function none))
(define-extern bones-reset-sqwc (function none))
(define-extern bones-init (function dma-buffer dma-foreground-sink-group none))
(define-extern draw-bones-mtx-calc (function bone-calculation int bone-calc-flags object))
(define-extern bones-mtx-calc (function int pointer pointer int object none))
(define-extern bones-mtx-calc-execute (function none))
(define-extern bones-wrapup (function none))
(define-extern dump-qword (function qword none))
(define-extern bones-debug (function none))
(define-extern dump-bone-mem (function none))
(define-extern draw-bones-shadow (function draw-control pointer pointer pointer))
(define-extern draw-bones-generic-merc (function draw-control pointer pointer int pointer))
(define-extern draw-bones-merc (function draw-control object object int int pointer))
(define-extern draw-bones-check-longest-edge (function draw-control float none))
(define-extern draw-bones-check-longest-edge-asm (function draw-control float symbol))
(define-extern draw-bones (function draw-control dma-buffer float none))
(define-extern draw-bones-hud (function draw-control dma-buffer none))

;; - Unknowns

(define-extern *merc-bucket-info* merc-bucket-info)
(define-extern *bone-calculation-list* bone-calculation-list)
(define-extern bones-vu0-block vu-function)
(define-extern *texscroll-globals* texscroll-globals)
(define-extern *use-generic* symbol)
(define-extern *merc-global-array* merc-global-array)
(define-extern *bones-first* symbol)
(define-extern *default-shadow-settings* shadow-settings)


;; ----------------------
;; File - generic-vu0
;; Source Path - engine/gfx/generic/generic-vu0.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern generic-vu0-block vu-function)


;; ----------------------
;; File - generic
;; Source Path - engine/gfx/generic/generic.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern generic-init-buf (function dma-buffer int gs-zbuf none))
(define-extern generic-dma-foreground-sink-init (function generic-dma-foreground-sink none))
(define-extern generic-init-buffers (function symbol))
(define-extern generic-sink (function int generic-dma-foreground-sink))

;; - Symbols

(define-extern *generic-foreground-sinks* (array generic-dma-foreground-sink))


;; ----------------------
;; File - generic-vu1
;; Source Path - engine/gfx/generic/generic-vu1.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern generic-add-constants (function dma-buffer int none))
(define-extern generic-setup-constants (function generic-constants int none))
(define-extern generic-reset-buffers (function dma-buffer int int none))

;; - Unknowns

(define-extern generic-vu1-block vu-function)


;; ----------------------
;; File - generic-effect
;; Source Path - engine/gfx/generic/generic-effect.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern generic-work-init (function generic-dma-foreground-sink none))
(define-extern generic-upload-vu0 (function none))
(define-extern upload-vu0-program (function vu-function pointer none))
(define-extern generic-initialize-without-sink (function matrix vu-lights none))
(define-extern generic-initialize (function generic-dma-foreground-sink matrix vu-lights none))
(define-extern generic-wrapup (function generic-dma-foreground-sink none))
(define-extern generic-dma-from-spr function)
(define-extern generic-light-proc function)
(define-extern generic-envmap-proc function)
(define-extern generic-prepare-dma-double function)
(define-extern generic-prepare-dma-single function)
(define-extern generic-envmap-dproc function)
(define-extern generic-interp-dproc function)
(define-extern generic-no-light-proc function)
(define-extern generic-no-light-dproc-only function)
(define-extern generic-no-light-dproc function)
(define-extern generic-no-light+envmap function)
(define-extern generic-no-light function)
(define-extern generic-envmap-only-proc function)
(define-extern generic-light function)
(define-extern generic-copy-vtx-dclr-dtex function)
(define-extern generic-none function)
(define-extern generic-none-dma-wait function)
(define-extern generic-debug-light-proc function)
(define-extern generic-post-debug function)

;; - Symbols

(define-extern *generic-envmap-texture* texture)

;; - Unknowns

(define-extern *generic-consts* generic-consts)
(define-extern *target-lock* symbol)


;; ----------------------
;; File - generic-merc
;; Source Path - engine/gfx/generic/generic-merc.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype invinitdata (structure)
  ((count     uint8   :offset-assert 0)
   (init-data uint8   :offset-assert 1)
   (init-addr uint16  :offset-assert 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; - Functions

(define-extern generic-merc-init-asm (function none))
(define-extern mercneric-matrix-asm function)
(define-extern mercneric-shader-asm function)
(define-extern mercneric-bittable-asm function)
(define-extern mercneric-convert function)
(define-extern high-speed-reject (function none))
(define-extern generic-merc-execute-asm (function none))
(define-extern generic-merc-add-to-cue (function generic-dma-foreground-sink none))
(define-extern generic-merc-execute-all (function dma-buffer none))

;; - Unknowns

(define-extern mercneric-vu0-block vu-function)
(define-extern *inv-init-table* (inline-array invinitdata))


;; ----------------------
;; File - generic-tie
;; Source Path - engine/gfx/generic/generic-tie.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern generic-tie-dma-to-spad function)
(define-extern generic-tie-dma-to-spad-sync (function object object none))
(define-extern generic-tie-decompress function)
(define-extern generic-tie-upload-next function)
(define-extern generic-tie-convert-proc function)
(define-extern generic-tie-convert (function none))
(define-extern generic-tie-display-stats function)
(define-extern generic-tie-debug function)
(define-extern generic-tie-execute (function generic-dma-foreground-sink dma-buffer basic none))

;; - Unknowns

(define-extern *generic-tie* symbol)


;; ----------------------
;; File - shadow-cpu
;; Source Path - engine/gfx/shadow/shadow-cpu.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype shadow-stats (structure)
  ((num-single-tris  uint32  :offset-assert 0)
   (num-double-tris  uint32  :offset-assert 4)
   (num-single-edges uint32  :offset-assert 8)
   (num-double-edges uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype shadow-dcache (structure)
  ((vtx-table              uint32                :offset-assert 0)
   (single-edge-table      uint32                :offset-assert 4)
   (double-edge-table      uint32                :offset-assert 8)
   (double-tri-table       uint32                :offset-assert 12)
   (dcache-top             uint32                :offset-assert 16)
   (num-facing-single-tris uint32                :offset-assert 20)
   (num-single-edges       uint32                :offset-assert 24)
   (num-double-edges       uint32                :offset-assert 28)
   (single-tri-list        uint32                :offset-assert 32)
   (single-edge-list       uint32                :offset-assert 36)
   (double-edge-list       uint32                :offset-assert 40)
   (ptr-dual-verts         uint32                :offset-assert 44)
   (stats                  shadow-stats :inline  :offset-assert 48)
   (center                 vector       :inline  :offset-assert 64)
   (plane                  vector       :inline  :offset-assert 80)
   (top-plane              vector       :inline  :offset-assert 96)
   (near-plane             vector       :inline  :offset-assert 112)
   (light-dir              vector       :inline  :offset-assert 128)
   (vtx-min                vector       :inline  :offset-assert 144)
   (data                   uint8      :dynamic :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; - Functions

(define-extern shadow-vu0-upload (function none))
(define-extern shadow-dma-init (function dma-buffer none))
(define-extern shadow-execute (function shadow-dma-packet pointer pointer))
(define-extern shadow-dma-end (function dma-buffer none))
(define-extern shadow-vu1-init-buffer (function dma-buffer none))
(define-extern shadow-xform-verts function)
(define-extern shadow-calc-dual-verts function)
(define-extern shadow-scissor-edges function)
(define-extern shadow-scissor-top function)
(define-extern shadow-init-vars function)
(define-extern shadow-find-facing-single-tris function)
(define-extern shadow-find-single-edges function)
(define-extern shadow-find-facing-double-tris function)
(define-extern shadow-find-double-edges function)
(define-extern shadow-add-verts function)
(define-extern shadow-add-facing-single-tris function)
(define-extern shadow-add-single-edges function)
(define-extern shadow-add-double-tris function)
(define-extern shadow-add-double-edges function)
(define-extern shadow-execute-all (function dma-buffer shadow-queue none))

;; - Symbols

(define-extern *shadow-data* shadow-data)

;; - Unknowns

(define-extern shadow-vu0-block vu-function)


;; ----------------------
;; File - shadow-vu1
;; Source Path - engine/gfx/shadow/shadow-vu1.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

 (deftype shadow-vu1-constants (structure)
   ((hmgescale vector     :inline :offset-assert 0)
    (invhscale vector     :inline :offset-assert 16)
    (texoffset vector     :inline :offset-assert 32)
    (texscale  vector     :inline :offset-assert 48)
    (hvdfoff   vector     :inline :offset-assert 64)
    (fog       vector     :inline :offset-assert 80)
    (clrs      vector 2   :inline :offset-assert 96)
    (adgif     gs-gif-tag :inline :offset-assert 128)
    (texflush  ad-cmd     :inline :offset-assert 144)
    (flush     ad-cmd     :inline :offset-assert 160)
    (trigif    gs-gif-tag :inline :offset-assert 176)
    (quadgif   gs-gif-tag :inline :offset-assert 192)
    )
   :method-count-assert 9
   :size-assert         #xd0
   :flag-assert         #x9000000d0
   )

 (deftype shadow-vu1-gifbuf-template (structure)
   ((adgif   gs-gif-tag :inline :offset-assert 0)
    (ad      ad-cmd     :inline :offset-assert 16)
    (flush   ad-cmd     :inline :offset-assert 32)
    (trigif  gs-gif-tag :inline :offset-assert 48)
    (quadgif gs-gif-tag :inline :offset-assert 64)
    )
   :method-count-assert 9
   :size-assert         #x50
   :flag-assert         #x900000050
   )

;; - Functions

(define-extern shadow-vu1-add-constants (function dma-buffer none))
(define-extern shadow-vu1-add-matrix (function dma-buffer math-camera none))

;; - Unknowns

(define-extern shadow-vu1-block vu-function)
(define-extern *shadow-vu1-tri-template* shadow-vu1-gifbuf-template)


;; ----------------------
;; File - depth-cue
;; Source Path - engine/gfx/depth-cue.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern depth-cue-draw-front (function dma-buffer int float float uint int symbol))
(define-extern depth-cue-set-stencil (function dma-buffer int int int dma-gif-packet vector4w))
(define-extern depth-cue-draw-depth (function dma-buffer int float float int int symbol))
(define-extern depth-cue-calc-z (function float float))
(define-extern depth-cue (function display pointer))

;; - Unknowns

(define-extern *depth-cue-work* depth-cue-work)


;; ----------------------
;; File - font
;; Source Path - engine/gfx/font.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern get-string-length (function string font-context float))
(define-extern draw-string-adv (function string dma-buffer font-context none))

;; - Unknowns

(define-extern *font12-table* (inline-array vector))
(define-extern *font24-table* (inline-array vector))


;; ----------------------
;; File - decomp
;; Source Path - engine/load/decomp.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype huf-dictionary-node (structure)
  ((zero uint16  :offset-assert 0)
   (one  uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; - Functions

(define-extern unpack-comp-rle (function (pointer int8) (pointer int8) none))
(define-extern unpack-comp-huf (function (pointer uint8) (pointer uint8) uint huf-dictionary-node none))


;; ----------------------
;; File - background
;; Source Path - engine/gfx/background.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern background-upload-vu0 (function none))
(define-extern time-of-day-interp-colors (function (pointer rgba) uint mood-context none))
(define-extern draw-drawable-tree-instance-shrub (function drawable-tree-instance-shrub level none))
(define-extern upload-vis-bits (function level level bsp-header none))
(define-extern time-of-day-interp-colors-scratch (function (pointer rgba) time-of-day-palette mood-context none))
(define-extern draw-drawable-tree-tfrag (function drawable-tree-tfrag none))
(define-extern draw-drawable-tree-trans-tfrag (function drawable-tree-trans-tfrag none))
(define-extern draw-drawable-tree-dirt-tfrag (function drawable-tree-dirt-tfrag none))
(define-extern draw-drawable-tree-ice-tfrag (function drawable-tree-ice-tfrag none))
(define-extern tie-near-make-perspective-matrix (function matrix matrix))
(define-extern draw-drawable-tree-instance-tie (function drawable-tree-instance-tie level none))
(define-extern init-background (function none))
(define-extern finish-background (function none))

;; - Symbols

(define-extern *instance-shrub-work* instance-shrub-work)
(define-extern *background-work* background-work)
(define-extern *instance-tie-work* instance-tie-work)

;; - Unknowns

(define-extern background-vu0-block vu-function)


;; ----------------------
;; File - draw-node
;; Source Path - engine/draw/draw-node.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern collide-cache-using-line-sphere-test (function vector symbol))
(define-extern collide-cache-using-y-probe-test (function vector symbol))
(define-extern collide-cache-using-box-test (function vector symbol))
(define-extern draw-node-cull (function pointer pointer (inline-array draw-node) int none))


;; ----------------------
;; File - shrubbery
;; Source Path - engine/gfx/shrub/shrubbery.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern upload-generic-shrub (function dma-buffer generic-shrub-fragment int int dma-buffer))
(define-extern shrub-num-tris (function shrubbery uint))
(define-extern shrub-init-frame (function dma-buffer gs-test none))
(define-extern shrub-upload-model (function shrubbery dma-buffer int symbol)) ;; third arg is `start-bank` from shrub-work
(define-extern shrub-do-init-frame (function dma-buffer symbol))
(define-extern shrub-upload-view-data (function dma-buffer symbol))
(define-extern shrub-init-view-data (function shrub-view-data symbol))
(define-extern mem-usage-shrub-walk (function draw-node int memory-usage-block int draw-node))
(define-extern shrub-make-perspective-matrix (function matrix matrix))
(define-extern shrub-time (function int int int int int int)) ;; unused
(define-extern draw-inline-array-instance-shrub (function dma-buffer drawable int (inline-array prototype-bucket-shrub) none))
(define-extern draw-prototype-inline-array-shrub (function int (inline-array prototype-bucket-shrub) pointer))
(define-extern shrub-upload-test (function generic-shrub-fragment none))
(define-extern test-func (function none))

;; - Unknowns

(define-extern shrub-vu1-block vu-function)


;; ----------------------
;; File - tfrag-near
;; Source Path - engine/gfx/tfrag/tfrag-near.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern tfrag-details (function tfragment none))
(define-extern clip-restore (function none))

;; - Unknowns

(define-extern tnear-vu1-block vu-function)


;; ----------------------
;; File - tfrag
;; Source Path - engine/gfx/tfrag/tfrag.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern add-tfrag-mtx-0 (function dma-buffer none))
(define-extern add-tfrag-mtx-1 (function dma-buffer none))
(define-extern add-tfrag-data (function dma-buffer int none))
(define-extern tfrag-data-setup (function tfrag-data int none))
(define-extern tfrag-print-stats (function symbol none))
(define-extern tfrag-init-buffer (function dma-buffer gs-test int none))
(define-extern tfrag-end-buffer (function dma-buffer none))
(define-extern draw-inline-array-tfrag (function pointer drawable-inline-array int dma-buffer none))
(define-extern tfrag-near-init-buffer (function dma-buffer gs-test int none))
(define-extern tfrag-near-end-buffer (function dma-buffer none))
(define-extern draw-inline-array-tfrag-near (function pointer drawable-inline-array int dma-buffer none))
(define-extern stats-tfrag-asm (function tfragment none))

;; - Unknowns

(define-extern tfrag-vu1-block vu-function)
(define-extern t-stat tfrag-stats)
(define-extern *tfrag-display-stats* symbol)


;; ----------------------
;; File - tfrag-methods
;; Source Path - engine/gfx/tfrag/tfrag-methods.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern edge-debug-lines (function (array vector-array) none))
(define-extern vis-cull (function int symbol))


;; ----------------------
;; File - tie
;; Source Path - engine/gfx/tie/tie.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tie-consts (structure)
  ((data      uint32  24        :offset-assert 0)
   (vector    vector  6 :inline :offset 0)
   (quads     uint128 6         :offset 0)
   (adgif     gs-gif-tag     :inline :offset 0) ;; was qword
   (strgif    gs-gif-tag     :inline :offset 16) ;; was qword
   (extra     vector    :inline :offset 32) ;; was qword
   (gifbufs   vector    :inline :offset 48) ;; was qword
   (clrbufs   qword     :inline :offset 64)
   (misc      qword     :inline :offset 80)
   (atestgif  gs-gif-tag     :inline :offset 96)
   (atest     ad-cmd 2  :inline :offset 112)
   (atest-tra ad-cmd    :inline :offset 112)
   (atest-def ad-cmd    :inline :offset 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;; - Functions

(define-extern tie-init-consts (function tie-consts int none))
(define-extern tie-float-reg (function int string))
(define-extern tie-int-reg (function int string))
(define-extern tie-init-engine (function dma-buffer gs-test int none)) ;; probably first int is gs-test
(define-extern tie-end-buffer (function dma-buffer none))
(define-extern tie-ints (function none))
(define-extern tie-floats (function none))

;; - Unknowns

(define-extern tie-vu1-block vu-function)


;; ----------------------
;; File - tie-near
;; Source Path - engine/gfx/tie/tie-near.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tie-near-consts (structure)
  ((extra     qword   :inline :offset-assert 0)
   (gifbufs   qword   :inline :offset-assert 16)
   (clrbufs   qword   :inline :offset-assert 32)
   (adgif     gs-gif-tag   :inline :offset-assert 48) ;; was qword
   (strgif    gs-gif-tag   :inline :offset-assert 64) ;; was qword
   (fangif    gs-gif-tag   :inline :offset-assert 80) ;; was qword
   (hvdfoffs  vector  :inline :offset-assert 96)
   (invhscale vector  :inline :offset-assert 112)
   (guard     vector  :inline :offset-assert 128)
   (atest     ad-cmd 2  :inline   :offset-assert 144)
   (atest-tra ad-cmd  :inline :offset 144)
   (atest-def ad-cmd  :inline :offset 160)
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )

;; - Functions

(define-extern tie-near-init-consts (function tie-near-consts int none))
(define-extern tie-near-init-engine (function dma-buffer gs-test int none))
(define-extern tie-near-end-buffer (function dma-buffer none))
(define-extern tie-near-int-reg (function int string))
(define-extern tie-near-float-reg (function int string))

;; - Unknowns

(define-extern tie-near-vu1-block vu-function)


;; ----------------------
;; File - tie-work
;; Source Path - engine/gfx/tie/tie-work.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *prototype-tie-work* prototype-tie-work)


;; ----------------------
;; File - tie-methods
;; Source Path - engine/gfx/tie/tie-methods.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype tie-instance-debug (structure)
  ((max-instance uint32  :offset-assert 0)
   (min-instance uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; - Functions

(define-extern tie-init-buffers (function dma-buffer none))
(define-extern tie-debug-between (function uint uint uint))
(define-extern tie-debug-one (function uint uint uint))
(define-extern walk-tie-generic-prototypes (function none))
(define-extern draw-inline-array-instance-tie (function pointer (inline-array instance-tie) int dma-buffer none))
(define-extern draw-inline-array-prototype-tie-generic-asm (function dma-buffer int prototype-array-tie none))
(define-extern draw-inline-array-prototype-tie-asm (function dma-buffer int prototype-array-tie none))
(define-extern draw-inline-array-prototype-tie-near-asm (function dma-buffer int prototype-array-tie none))
(define-extern tie-test-cam-restore (function none))

;; - Unknowns

(define-extern *tie* tie-instance-debug)
(define-extern *pke-hack* vector)


;; ----------------------
;; File - sparticle-launcher
;; Source Path - engine/sparticle/sparticle-launcher.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sparticle-birthinfo (structure)
  ((sprite       uint32    :offset-assert 0)
   (anim         int32     :offset-assert 4)
   (anim-speed   float     :offset-assert 8)
   (birth-func   basic     :offset-assert 12)
   (joint-ppoint int32     :offset-assert 16)
   (num-to-birth float     :offset-assert 20)
   (sound        basic     :offset-assert 24)
   (dataf        float 1 :offset 0)
   (data         uint32 1 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system          :offset-assert 0)
   (sp-launcher sparticle-launcher          :offset-assert 4)
   (pos         vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sp-launch-queue (basic)
  ((in-use int32      :offset-assert 4)
   (queue  sp-queued-launch-particles 32 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x410
  :flag-assert         #x900000410
  )

(deftype particle-adgif-cache (basic)
  ((used    int32           :offset-assert 4)
   (last    uint16          :offset-assert 8)
   (lastgif adgif-shader    :offset-assert 12)
   (tidhash uint16      80 :offset-assert 16)
   (spadgif adgif-shader 80 :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )

;; - Functions

(define-extern sphere-in-view-frustum? (function sphere symbol))
(define-extern kill-all-particles-with-key (function sparticle-launch-control none))

(define-extern sp-relaunch-setup-fields (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none))

(define-extern sp-init-fields! (function (pointer float) (inline-array sp-field-init-spec) sp-field-id sp-field-id symbol (inline-array sp-field-init-spec)))

(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher vector sparticle-launch-state sparticle-launch-control float none)) ;; asm - ret not confirmed
(define-extern sp-get-particle (function sparticle-system int sparticle-launch-state sparticle-cpuinfo))
(define-extern particle-adgif (function adgif-shader texture-id none))
(define-extern lookup-part-group-by-name (function string basic))
(define-extern lookup-part-group-pointer-by-name (function string (pointer sparticle-launch-group))) ;; this can actually be a pointer to way more than just a SLG - can be - SLG | sparticle-launcher | sound-spec | death-info.  See effect-control::10
(define-extern unlink-part-group-by-heap (function kheap int))
(define-extern particle-setup-adgif (function adgif-shader texture-id none))
(define-extern sp-queue-launch (function sparticle-system sparticle-launcher vector int))
(define-extern sp-adjust-launch (function sparticle-launchinfo sparticle-cpuinfo (inline-array sp-field-init-spec) none))
(define-extern sp-euler-convert (function sparticle-launchinfo sparticle-cpuinfo none))
(define-extern sp-rotate-system (function sparticle-launchinfo sparticle-cpuinfo transformq none))
(define-extern sp-launch-particles-death (function sparticle-system sparticle-launcher vector none))
(define-extern sp-clear-queue (function none))
(define-extern sp-relaunch-particle-2d (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none))
(define-extern sp-relaunch-particle-3d (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none))
(define-extern sparticle-track-root (function object sparticle-cpuinfo vector none))
(define-extern sparticle-track-root-prim (function object sparticle-cpuinfo vector none))
(define-extern birth-func-copy-rot-color (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none))
(define-extern birth-func-copy2-rot-color (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none))
(define-extern birth-func-copy-omega-to-z (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none))
(define-extern birth-func-random-next-time (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none))

;; - Unknowns

(define-extern *global-toggle* int)
(define-extern *part-id-table* (array sparticle-launcher))
(define-extern *particle-300hz-timer* int)
(define-extern *sp-launch-queue* sp-launch-queue)
(define-extern *death-adgif* adgif-shader) ;; guess
(define-extern *part-group-id-table* (array sparticle-launch-group))
(define-extern *sp-launcher-lock* symbol)
(define-extern *sp-launcher-enable* symbol)
(define-extern *particle-adgif-cache* particle-adgif-cache)


;; ----------------------
;; File - sparticle
;; Source Path - engine/sparticle/sparticle.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern all-particles-60-to-50 (function none))
(define-extern all-particles-50-to-60 (function none))
(define-extern sp-process-particle-system (function sparticle-system int sprite-array-2d none))
(define-extern forall-particles-runner (function (function sparticle-system sparticle-cpuinfo pointer none) sparticle-system none))
(define-extern sparticle-60-to-50 (function sparticle-system sparticle-cpuinfo pointer none))
(define-extern sparticle-50-to-60 (function sparticle-system sparticle-cpuinfo pointer none))
(define-extern forall-particles (function function symbol symbol none))
(define-extern sparticle-kill-it-level0 (function sparticle-system sparticle-cpuinfo none))
(define-extern sparticle-kill-it-level1 (function sparticle-system sparticle-cpuinfo none))
(define-extern forall-particles-with-key (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) symbol symbol none))
(define-extern sparticle-kill-it (function sparticle-system sparticle-cpuinfo none))
(define-extern forall-particles-with-key-runner (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) sparticle-system none))
(define-extern sp-get-approx-alloc-size (function sparticle-system int int))
(define-extern sp-process-block (function sparticle-system int sprite-array-2d int none))
(define-extern sp-copy-to-spr (function int pointer int none))
(define-extern sp-process-block-3d (function sparticle-system int int int int symbol none))
(define-extern sp-process-block-2d (function sparticle-system int int int int symbol none))
(define-extern sp-copy-from-spr (function int pointer int none))
(define-extern sp-free-particle (function sparticle-system int sparticle-cpuinfo sprite-vec-data-2d none))
(define-extern sp-particle-copy! (function sparticle-cpuinfo sparticle-cpuinfo none))
(define-extern sp-get-block-size (function sparticle-system int int))
(define-extern sp-kill-particle (function sparticle-system sparticle-cpuinfo none))
(define-extern sp-orbiter (function sparticle-system sparticle-cpuinfo vector none))
(define-extern memcpy function)
(define-extern kill-all-particles-in-level (function level int))
(define-extern set-particle-frame-time (function int none))
(define-extern process-particles (function none))

;; - Unknowns

(define-extern *particles-flag* symbol)
(define-extern *sp-particle-system-2d* sparticle-system)
(define-extern *sp-particle-system-3d* sparticle-system)


;; ----------------------
;; File - entity-table
;; Source Path - engine/entity/entity-table.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

;; This is a terrible terrible function, here be dragons - https://github.com/water111/jak-project/pull/623!
(define-extern entity-info-lookup (function type entity-info))

;; - Symbols

(define-extern *entity-info* (array entity-info))


;; ----------------------
;; File - loader
;; Source Path - engine/load/loader.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ja-channel-push! (function int time-frame int :behavior process-drawable))
(define-extern ja-channel-set! (function int int :behavior process-drawable))
(define-extern kill-current-level-hint (function pair pair symbol none))
(define-extern level-hint-surpress! (function none))
(define-extern ja-aframe-num (function int float :behavior process-drawable))
(define-extern ja-abort-spooled-anim (function spool-anim art-joint-anim int int :behavior process-drawable))
(define-extern art-group-load-check (function string kheap int art-group))
(define-extern drawable-load (function drawable kheap drawable))
(define-extern art-load (function string kheap art))
(define-extern ja-play-spooled-anim (function spool-anim art-joint-anim art-joint-anim (function process-drawable symbol) int :behavior process-drawable))
(define-extern link (function pointer pointer int kheap int pointer))

;; - Symbols

(define-extern *load-state* load-state)
(define-extern *kernel-sp* pointer)

;; - Unknowns

(define-extern *art-control* external-art-control)
(define-extern *preload-spool-anims* symbol)
(define-extern *stack-top* pointer)


;; ----------------------
;; File - task-control-h
;; Source Path - engine/game/task/task-control-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum task-flags
  :type uint8
  :bitfield #t
  (closed 0)
  (has-entity 1)
  (closed-by-default 2)
  )

(declare-type task-control basic)
(deftype task-cstage (structure)
  ((game-task game-task   :offset-assert 0)
   (status    task-status  :offset-assert 8)
   (flags     task-flags  :offset-assert 16)
   (condition (function task-control symbol) :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  (:methods
    (get-task (_type_) game-task 9)
    (get-status (_type_) task-status 10)
    (task-available? (_type_ task-control) symbol 11)
    (closed? (_type_) symbol 12)
    (closed-by-default? (_type_) symbol 13)
    (close-task! (_type_) int 14)
    (open-task! (_type_) int 15)
    )
  )

(deftype task-control (basic)
  ((current-stage int16  :offset-assert 4)
   (stage         (array task-cstage)  :offset-assert 8)
   )
  :method-count-assert 19
  :size-assert         #xc
  :flag-assert         #x130000000c
  (:methods
    (current-task (_type_) game-task 9)
    (current-status (_type_) task-status 10)
    (close-current! (_type_) game-task 11)
    (close-status! (_type_ task-status) game-task 12)
    (first-any (_type_ symbol) game-task 13)
    (reset! (_type_ symbol symbol) int 14)
    (closed? (_type_ game-task task-status) symbol 15)
    (get-reminder (_type_ int) int 16)
    (save-reminder (_type_ int int) int 17) ;; TODO - i believe this is none
    (exists? (_type_ game-task task-status) symbol 18)
    )
  )

(deftype ambient-control (structure)
  ((last-ambient-time time-frame     :offset-assert 0)
   (last-ambient      string    :offset-assert 8)
   (last-ambient-id   sound-id  :offset-assert 12)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  :pack-me
  (:methods
    (ambient-control-method-9 (_type_) none 9)
    (ambient-control-method-10 (_type_ vector time-frame float process-drawable) vector 10)
    (play-ambient (_type_ string symbol vector) symbol 11)
    )
  )

(deftype process-taskable (process-drawable)
  ((root-override        collide-shape           :score 100 :offset 112)
   (tasks                task-control            :offset-assert 176)
   (query                gui-query       :inline :offset-assert 180)
   (old-target-pos       transformq      :inline :offset-assert 208)
   (cell-for-task        game-task               :offset-assert 256)
   (cell-x               handle                  :offset-assert 264)
   (cam-joint-index      int32                   :offset-assert 272)
   (skippable            symbol                  :offset-assert 276) ;; probably a symbol
   (blend-on-exit        art-joint-anim          :offset-assert 280)
   (camera               handle                  :offset-assert 288)
   (will-talk            symbol                   :offset-assert 296)
   (talk-message         text-id                  :offset-assert 300)
   (last-talk            time-frame                  :offset-assert 304)
   (bounce-away          symbol                   :offset-assert 312)
   (ambient              ambient-control :inline :offset-assert 320)
   (center-joint-index   int32                   :offset-assert 336)
   (draw-bounds-y-offset float                   :offset-assert 340)
   (neck-joint-index     int32                   :offset-assert 344)
   (fuel-cell-anim       spool-anim                   :offset-assert 348)
   (sound-flava          music-flava                   :offset-assert 352)
   (have-flava           symbol                   :offset-assert 356) ;; probably
   (music                symbol                   :offset-assert 360)
   (have-music           symbol                   :offset-assert 364) ;; probably
   (been-kicked          symbol                   :offset-assert 368) ;; probably
   (cur-trans-hook       (function none)                   :offset-assert 372)
   (shadow-backup        shadow-geo                   :offset-assert 376)
   )
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  (:methods
    (release () _type_ :state 20)
    (give-cell () _type_ :state 21) ;; state
    (lose () _type_ :state 22)
    (enter-playing () _type_ :state 23) ;; state
    (play-accept () _type_ :state 24) ;; state
    (play-reject () _type_ :state 25)
    (query () _type_ :state 26) ;; state
    (play-anim () _type_ :state 27) ;; state
    (hidden () _type_ :state 28) ;; state
    (be-clone (handle) _type_ :state 29)
    (idle () _type_ :state 30) ;; state
    (get-art-elem (_type_) art-element 31)
    (play-anim! (_type_ symbol) basic 32) ;; ret - spool-anim | ..
    (process-taskable-method-33 (_type_) none 33)
    (get-accept-anim (_type_ symbol) spool-anim 34)
    (push-accept-anim (_type_) none 35)
    (get-reject-anim (_type_ symbol) spool-anim 36) ;; ret - spool-anim | ..
    (push-reject-anim (_type_) none 37)
    (process-taskable-method-38 (_type_) none 38)
    (should-display? (_type_) symbol 39)
    (process-taskable-method-40 (_type_ object skeleton-group int int vector int) none 40)
    (initialize-collision (_type_ int vector) none 41)
    (process-taskable-method-42 (_type_) none 42)
    (process-taskable-method-43 (_type_) symbol 43)
    (play-reminder (_type_) symbol 44)
    (process-taskable-method-45 (_type_) symbol 45)
    (process-taskable-method-46 (_type_) none 46)
    (target-above-threshold? (_type_) symbol 47)
    (draw-npc-shadow (_type_) none 48)
    (hidden-other () _type_ :state 49)
    (process-taskable-method-50 (_type_) symbol 50)
    (close-anim-file! (_type_) symbol 51)
    (process-taskable-method-52 (_type_) none 52)
    )
  )


;; ----------------------
;; File - game-info
;; Source Path - engine/game/game-info.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern get-task-control (function game-task task-control))
(define-extern level-hint-spawn (function text-id string entity process-tree game-task none))
(define-extern get-game-count (function int count-info))
(define-extern activate-orb-all (function int int))
(define-extern close-specific-task! (function game-task task-status game-task))
(define-extern reset-all-hint-controls (function none))
(define-extern reset-actors (function symbol none))
(define-extern set-blackout-frames (function time-frame none))
(define-extern set-master-mode (function symbol none))
(define-extern stop (function symbol int))
(define-extern start (function symbol continue-point target))
(define-extern position-in-front-of-camera! (function vector float float vector))
(define-extern game-task->string (function game-task string))
(define-extern trsq->continue-point (function trsq none))

;; - Symbols

(define-extern *kernel-boot-message* symbol)
(define-extern *level-load-list* pair)
(define-extern *spawn-actors* symbol)
(define-extern *default-continue* continue-point)


;; ----------------------
;; File - game-save
;; Source Path - engine/game/game-save.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum game-save-elt
  :type uint16
  (name 100)
  (base-time 101)
  (real-time 102)
  (game-time 103)
  (integral-time 104)
  (continue 200)
  (life 201)
  (money 202)
  (money-total 203)
  (money-per-level 204)
  (buzzer-total 205)
  (fuel-cell 206)
  (death-movie-tick 207)
  (task-list 300)
  (perm-list 301)
  (hint-list 303)
  (text-list 304)
  (level-open-list 305)
  (total-deaths 400)
  (continue-deaths 401)
  (fuel-cell-deaths 402)
  (game-start-time 403)
  (continue-timke 404) ;; typo in game
  (death-time 405)
  (hit-time 406)
  (fuel-cell-pickup-time 407)
  (continue-time 408)
  (fuel-cell-time 409)
  (enter-level-time 410)
  (deaths-per-level 411)
  (death-pos 412)
  (auto-save-count 413)
  (in-level-time 414)
  (sfx-volume 500)
  (music-volume 501)
  (dialog-volume 502)
  (language 503)
  (screenx 504)
  (screeny 505)
  (vibration 506)
  (play-hints 507)
  (video-mode 508)
  (aspect-ratio 509)
  )

(deftype game-save-tag (structure)
  ((user-object object 2 :offset-assert 0)
   (user-uint64 uint64    :offset 0)
   (user-float0 float     :offset 0)
   (user-float  float 2 :offset 0)
   (user-int32  int32 2 :offset 0)
   (user-uint32 uint32 2 :offset 0)
   (user-int16  int16 4 :offset 0)
   (user-uint16 uint16 4 :offset 0)
   (user-int8   int8 8 :offset 0)
   (user-int80  int8      :offset 0)
   (user-int81  int8      :offset 1)
   (user-uint8  uint8 8 :offset 0)
   (elt-count   int32     :offset-assert 8)
   (elt-size    uint16    :offset-assert 12)
   (elt-type    game-save-elt    :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype game-save (basic)
  ((version               int32            :offset-assert 4)
   (allocated-length      int32            :offset-assert 8)
   (length                int32            :offset-assert 12)
   (info-int32            int32 16       :offset-assert 16)
   (info-int8             int8 64       :offset 16)
   (level-index           int32            :offset 16)
   (fuel-cell-count       float            :offset 20)
   (money-count           float            :offset 24)
   (buzzer-count          float            :offset 28)
   (completion-percentage float            :offset 32)
   (minute                uint8            :offset 36)
   (hour                  uint8            :offset 37)
   (week                  uint8            :offset 38)
   (day                   uint8            :offset 39)
   (month                 uint8            :offset 40)
   (year                  uint8            :offset 41)
   (new-game              int32            :offset 44)
   (tag                   game-save-tag :inline :dynamic :offset-assert 80)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    (new (symbol type int) _type_ 0)
    (save-to-file (_type_ string) _type_ 9)
    (load-from-file! (_type_ string) _type_ 10)
    (debug-print (_type_ symbol) _type_ 11)
    )
  )

(deftype auto-save (process)
  ((card       int32                :offset-assert 112)
   (slot       int32                :offset-assert 116)
   (which      int32                :offset-assert 120)
   (buffer     kheap                :offset-assert 124)
   (mode       basic                :offset-assert 128)
   (result     mc-status-code               :offset-assert 132)
   (save       game-save            :offset-assert 136)
   (info       mc-slot-info :inline :offset-assert 140)
   (notify     handle               :offset-assert 440)
   (state-time time-frame                :offset-assert 448)
   (part       sparticle-launch-control                :offset-assert 456)
   )
  :heap-base #x160
  :method-count-assert 23
  :size-assert         #x1cc
  :flag-assert         #x17016001cc
  ;; inherited inspect of process
  (:methods
    (get-heap () _type_ :state 14)
    (get-card () _type_ :state 15)
    (format-card () _type_ :state 16)
    (create-file () _type_ :state 17)
    (save () _type_ :state 18)
    (restore () _type_ :state 19)
    (error (mc-status-code) _type_ :state 20)
    (done () _type_ :state 21)
    (unformat-card () _type_ :state 22)
    )
  )

;; - Functions

(define-extern auto-save-command (function symbol int int process-tree none))
(define-extern auto-save-init-by-other (function symbol process-tree int int none :behavior auto-save))
(define-extern progress-allowed? (function symbol))
(define-extern print-game-text (function string font-context symbol int int float)) ; TODO decomp error, this seems correct though
(define-extern get-aspect-ratio (function symbol))
(define-extern get-task-status (function game-task task-status))
(define-extern lookup-level-info (function symbol level-load-info))
(define-extern calculate-completion (function progress float))
(define-extern game-save-elt->string (function game-save-elt string))
(define-extern progress-level-index->string (function int string))
(define-extern auto-save-post (function none :behavior auto-save))
(define-extern auto-save-check (function none))

(define-extern mc-format (function int mc-status-code))
(define-extern mc-unformat (function int mc-status-code))
(define-extern mc-create-file (function int uint mc-status-code))
(define-extern mc-save (function int int pointer int mc-status-code))
(define-extern mc-load (function int int pointer mc-status-code))

;; - Unknowns

(define-extern *auto-save-info* mc-slot-info)
(define-extern scf-get-time (function scf-time none))


;; ----------------------
;; File - settings
;; Source Path - engine/game/settings.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern set-aspect-ratio (function symbol none))
(define-extern set-video-mode (function symbol none))
(define-extern scf-get-volume (function int))
(define-extern scf-get-language (function language-enum))
(define-extern scf-get-aspect (function uint))

;; - Symbols

(define-extern *boot-video-mode* int)


;; ----------------------
;; File - mood-tables
;; Source Path - engine/ambient/mood-tables.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern make-light-kit (function light-group float float float float none))
(define-extern make-village1-light-kit (function mood-context none))
(define-extern make-misty-light-kit (function mood-context none))
(define-extern make-village2-light-kit (function mood-context none))
(define-extern make-rolling-light-kit (function mood-context none))
(define-extern make-village3-light-kit (function mood-context none))
(define-extern update-mood-shadow-direction (function mood-lights none))
(define-extern update-mood-erase-color (function mood-fog mood-lights none))
(define-extern update-mood-erase-color2 (function mood-fog mood-lights mood-lights none))

;; - Symbols

(define-extern *default-interp-table* sky-color-day)
(define-extern *village1-palette-interp-table* sky-color-day)
(define-extern *misty-palette-interp-table* sky-color-day)
(define-extern *firecanyon-palette-interp-table* sky-color-day)
(define-extern *rolling-palette-interp-table* sky-color-day)
(define-extern *village2-sky-texture-table* sky-color-day)
(define-extern *finalboss-interp-table* sky-color-day)
(define-extern *village1-mood-fog-table* mood-fog-table)
(define-extern *village1-mood-lights-table* mood-lights-table)
(define-extern *village1-mood-sun-table* mood-sun-table)
(define-extern *training-mood-fog-table* mood-fog-table)
(define-extern *snow-mood-fog-table* mood-fog-table)
(define-extern *snow-mood-lights-table* mood-lights-table)
(define-extern *snow-mood-sun-table* mood-sun-table)
(define-extern *jungleb-mood-fog-table* mood-fog-table)
(define-extern *jungleb-mood-lights-table* mood-lights-table)
(define-extern *jungleb-mood-sun-table* mood-sun-table)
(define-extern *maincave-mood-fog-table* mood-fog-table)
(define-extern *maincave-mood-lights-table* mood-lights-table)
(define-extern *maincave-mood-sun-table* mood-sun-table)
(define-extern *robocave-mood-fog-table* mood-fog-table)
(define-extern *darkcave-mood-fog-table* mood-fog-table)
(define-extern *darkcave-mood-lights-table* mood-lights-table)
(define-extern *darkcave-mood-sun-table* mood-sun-table)
(define-extern *misty-mood-fog-table* mood-fog-table)
(define-extern *misty-mood-lights-table* mood-lights-table)
(define-extern *misty-mood-sun-table* mood-sun-table)
(define-extern *village2-mood-fog-table* mood-fog-table)
(define-extern *village2-mood-lights-table* mood-lights-table)
(define-extern *village2-mood-sun-table* mood-sun-table)
(define-extern *swamp-mood-fog-table* mood-fog-table)
(define-extern *swamp-mood-lights-table* mood-lights-table)
(define-extern *swamp-mood-sun-table* mood-sun-table)
(define-extern *sunken-mood-fog-table* mood-fog-table)
(define-extern *sunken-mood-lights-table* mood-lights-table)
(define-extern *sunken-mood-sun-table* mood-sun-table)
(define-extern *rolling-mood-fog-table* mood-fog-table)
(define-extern *rolling-mood-lights-table* mood-lights-table)
(define-extern *rolling-mood-sun-table* mood-sun-table)
(define-extern *firecanyon-mood-fog-table* mood-fog-table)
(define-extern *firecanyon-mood-lights-table* mood-lights-table)
(define-extern *firecanyon-mood-sun-table* mood-sun-table)
(define-extern *ogre-mood-fog-table* mood-fog-table)
(define-extern *ogre-mood-lights-table* mood-lights-table)
(define-extern *ogre2-mood-lights-table* mood-lights-table)
(define-extern *ogre3-mood-fog-table* mood-fog-table)
(define-extern *ogre3-mood-lights-table* mood-lights-table)
(define-extern *village3-mood-fog-table* mood-fog-table)
(define-extern *village3-mood-lights-table* mood-lights-table)
(define-extern *lavatube-mood-fog-table* mood-fog-table)
(define-extern *lavatube-mood-lights-table* mood-lights-table)
(define-extern *lavatube-mood-sun-table* mood-sun-table)
(define-extern *finalboss-mood-sun-table* mood-sun-table)
(define-extern *finalboss-mood-fog-table* mood-fog-table)
(define-extern *citadel-mood-fog-table* mood-fog-table)
(define-extern *citadel-mood-lights-table* mood-lights-table)
(define-extern *citadel-mood-sun-table* mood-sun-table)
(define-extern *default-mood* mood-context)
(define-extern *village1-mood* mood-context)
(define-extern *beach-mood* mood-context)
(define-extern *jungle-mood* mood-context)
(define-extern *jungleb-mood* mood-context)
(define-extern *misty-mood* mood-context)
(define-extern *firecanyon-mood* mood-context)
(define-extern *village2-mood* mood-context)
(define-extern *swamp-mood* mood-context)
(define-extern *sunken-mood* mood-context)
(define-extern *sunkenb-mood* mood-context)
(define-extern *rolling-mood* mood-context)
(define-extern *training-mood* mood-context)
(define-extern *maincave-mood* mood-context)
(define-extern *darkcave-mood* mood-context)
(define-extern *robocave-mood* mood-context)
(define-extern *snow-mood* mood-context)
(define-extern *ogre-mood* mood-context)
(define-extern *ogre2-mood* mood-context)
(define-extern *ogre3-mood* mood-context)
(define-extern *village3-mood* mood-context)
(define-extern *finalboss-mood* mood-context)
(define-extern *finalboss2-mood* mood-context)
(define-extern *lavatube-mood* mood-context)
(define-extern *citadel-mood* mood-context)


;; ----------------------
;; File - mood
;; Source Path - engine/ambient/mood.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype flames-state (structure)
  ((index  uint8  :offset-assert 0)
   (time   uint8  :offset-assert 1)
   (length uint8  :offset-assert 2)
   (height uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype lightning-state (structure)
  ((val uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

(deftype light-time-state (structure)
  ((time uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

(deftype light-state (structure)
  ((fade uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

(deftype lava-state (structure)
  ((scale      float 4 :offset-assert 0)
   (time       uint8     :offset-assert 16)
   (last-index uint8     :offset-assert 17)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

(deftype misty-states (structure)
  ((flames flames-state     :inline :offset-assert 0)
   (light0 light-state      :inline :offset-assert 4)
   (light1 light-state      :inline :offset-assert 5)
   (time0  light-time-state :inline :offset-assert 6)
   (time1  light-time-state :inline :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype swamp-village2-states (structure)
  ((flames    flames-state    :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype village1-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype jungle-states (structure)
  ((light    light-state      :inline :offset-assert 0)
   (time     light-time-state :inline :offset-assert 1)
   (one-shot uint8                    :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )

(deftype sunken-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype rolling-states (structure)
  ((light0    light-state      :inline :offset-assert 0)
   (light1    light-state      :inline :offset-assert 1)
   (light2    light-state      :inline :offset-assert 2)
   (light3    light-state      :inline :offset-assert 3)
   (time      light-time-state :inline :offset-assert 4)
   (lightning lightning-state  :inline :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype firecanyon-states (structure)
  ((lava lava-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

(deftype training-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype maincave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype robocave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype snow-states (structure)
  ((flames   flames-state     :inline :offset-assert 0)
   (light    light-state      :inline :offset-assert 4)
   (time     light-time-state :inline :offset-assert 5)
   (one-shot uint8                    :offset-assert 6)
   (interp   float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype village3-states (structure)
  ((flames    flames-state :inline :offset-assert 0)
   (scale     float                :offset-assert 4)
   (lava      lava-state   :inline :offset-assert 8)
   (lava-time float                :offset-assert 28)
   (time      uint8                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x21
  :flag-assert         #x900000021
  )

(deftype lavatube-states (structure)
  ((lava  lava-state       :inline :offset-assert 0)
   (light light-state      :inline :offset-assert 18)
   (time  light-time-state :inline :offset-assert 19)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype ogre-states (structure)
  ((lava      lava-state      :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 18)
   (lava-time float                   :offset-assert 20)
   (lava-fade float                   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype finalboss-states (structure)
  ((start-time  time-frame  :offset-assert 0)
   (secret-time time-frame  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype citadel-states (structure)
  ((flames      flames-state     :inline :offset-assert 0)
   (light       light-state      :inline :offset-assert 4)
   (time        light-time-state :inline :offset-assert 5)
   (flicker-off uint8                    :offset-assert 6)
   (flicker-on  uint8                    :offset-assert 7)
   (shield-fade float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; - Functions

(define-extern clear-mood-times (function mood-context symbol))
(define-extern update-mood-quick (function mood-context int int int int vector))
(define-extern update-mood-flames (function mood-context int int int float float float none))
(define-extern update-mood-light (function mood-context int int int float float float int none))
(define-extern target-joint-pos (function vector)) ;; TODO - unconfirmed
(define-extern update-mood-itimes (function mood-context none)) ;; TODO - implement VFTOI12 and PPACH
(define-extern update-mood-fog (function mood-context float vector))
(define-extern update-mood-sky-texture (function mood-context float vector))
(define-extern update-mood-palette (function mood-context float int float))
(define-extern update-mood-interp (function mood-context mood-context mood-context float none))
(define-extern update-mood-lightning (function mood-context int int int int float symbol none)) ;; TODO - asm - ret not verified
(define-extern update-mood-lava (function mood-context int int symbol none))
(define-extern update-light-kit (function light-group light float none))
(define-extern set-target-light-index (function int int))
(define-extern update-mood-caustics (function mood-context int int none))
(define-extern update-mood-jungleb-blue (function mood-context float int none))
(define-extern update-mood-prt-color (function mood-context vector))
(define-extern update-mood-default (function mood-context float int none))
(define-extern update-mood-misty (function mood-context float int none))
(define-extern update-mood-village2 (function mood-context float int none))
(define-extern update-mood-swamp (function mood-context float int none))
(define-extern update-mood-village1 (function mood-context float int none))
(define-extern update-mood-jungle (function mood-context float int none))
(define-extern update-mood-jungleb (function mood-context float int none))
(define-extern update-mood-sunken (function mood-context float int none))
(define-extern update-mood-rolling (function mood-context float int none))
(define-extern update-mood-firecanyon (function mood-context float int none))
(define-extern update-mood-training (function mood-context float int none))
(define-extern update-mood-maincave (function mood-context float int none))
(define-extern update-mood-darkcave (function mood-context float int none))
(define-extern update-mood-robocave (function mood-context float int none))
(define-extern update-mood-snow (function mood-context float int none))
(define-extern update-mood-village3 (function mood-context float int none))
(define-extern update-mood-lavatube (function mood-context float int none))
(define-extern update-mood-ogre (function mood-context float int none))
(define-extern update-mood-finalboss (function mood-context float int none))
(define-extern update-mood-citadel (function mood-context float int none))

;; - Symbols

(define-extern *time-of-day-proc* (pointer time-of-day-proc))
(define-extern *lightning-time2* int)
(define-extern *rolling-spheres-on* (inline-array vector)) ;; 11 vectors
(define-extern *rolling-spheres-light0* vector) ;; TODO - what is going on here...
(define-extern *rolling-spheres-light1* (inline-array vector)) ; TODO - what is going on here...
(define-extern *rolling-spheres-light2* light-ellipse)
(define-extern *rolling-spheres-light3* (inline-array vector))
(define-extern *rolling-spheres-light4* vector) ;; TODO - what is going on here...
(define-extern *flash0* (array float))
(define-extern *flash1* (array float))
(define-extern *flash2* (array float))
(define-extern *flash3* (array float))
(define-extern *flash4* (array float))
(define-extern *flash5* (array float))
(define-extern *flash6* (array float))
(define-extern *flash7* (array float))
(define-extern *lightning-index* int)
(define-extern *lightning-time* int)
(define-extern *lightning-frame-done* symbol)
(define-extern *lightning-realtime-done* symbol)
(define-extern *thunder-id0* sound-id)
(define-extern *thunder-id1* sound-id)
(define-extern *thunder-id2* sound-id)
(define-extern *thunder-id* sound-id)
(define-extern *thunder-count* int)
(define-extern *lava-time* float) ;; TODO - guess


;; ----------------------
;; File - weather-part
;; Source Path - engine/ambient/weather-part.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern matrix-local->world (function symbol symbol matrix))
(define-extern update-snow (function target none))
(define-extern check-drop-level-rain (function sparticle-system sparticle-cpuinfo vector none)) ;; second arg is a guess, it's passed as `a1` to `sp-kill-particle`
(define-extern update-rain (function target none))
(define-extern cam-master-effect (function none :behavior camera-master))
(define-extern sparticle-track-sun (function int sparticle-cpuinfo matrix none)) ;; TODO - unused / first arg is unknown / matrix is probably wrong

;; - Symbols

(define-extern group-rain-screend-drop sparticle-launch-group)


;; ----------------------
;; File - time-of-day
;; Source Path - engine/gfx/time-of-day.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern make-sky-textures (function time-of-day-context int none))
(define-extern init-time-of-day (function none :behavior time-of-day-proc))
(define-extern update-sky-tng-data (function float none))
(define-extern time-of-day-update (function none :behavior time-of-day-proc))
(define-extern start-time-of-day (function none))
(define-extern time-of-day-setup (function symbol symbol))
(define-extern set-time-of-day (function float none))
(define-extern init-time-of-day-context (function time-of-day-context none))
(define-extern update-time-of-day (function time-of-day-context none))

;; - Symbols

(define-extern time-of-day-effect (function none)) ;; only 'nothing' is stored here, looks like dead code

;; - Unknowns

(define-extern sky-base-polygons (inline-array sky-vertex))


;; ----------------------
;; File - sky-utils
;; Source Path - engine/gfx/sky/sky-utils.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern sky-set-sun-radii (function sky-parms int float float float symbol))
(define-extern sky-set-sun-colors (function sky-parms int rgba rgba rgba rgba symbol))
(define-extern sky-set-sun-colors-sun (function sky-parms int rgba rgba symbol))
(define-extern sky-set-sun-colors-halo (function sky-parms int rgba rgba symbol))
(define-extern sky-set-sun-colors-aurora (function sky-parms int rgba rgba symbol))
(define-extern sky-set-orbit (function sky-parms int float float float float float float symbol))


;; ----------------------
;; File - sky
;; Source Path - engine/gfx/sky/sky.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sky-frame-data (structure)
  ((data              uint128 18      :offset-assert 0)
   (world-homo-matrix matrix  :inline :offset 0)
   (hmge-scale        vector  :inline :offset 64)
   (hvdf-offset       vector  :inline :offset 80)
   (consts            vector  :inline :offset 96)
   (pfog0             float           :offset 96)
   (radius            float           :offset 100)
   (nokick            float           :offset 108)
   (strip-giftag      qword   :inline :offset 112)
   (col-adgif         qword   :inline :offset 128)
   (save              uint128 5       :offset 144)
   (sun-fan-giftag    qword   :inline :offset 224)
   (sun-strip-giftag  qword   :inline :offset 240)
   (sun-alpha         qword   :inline :offset 256)
   (sun-alpha-giftag  qword   :inline :offset 272)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

;; - Functions

(define-extern sky-add-frame-data function)
(define-extern sky-make-sun-data (function sky-parms int float none))
(define-extern sky-make-moon-data (function sky-parms float none))
(define-extern sky-make-light (function sky-parms light int rgba none))
(define-extern sky-init-upload-data function)
(define-extern sky-upload function)
(define-extern sky-draw (function sky-parms none))

;; - Unknowns

(define-extern sky-vu1-block vu-function)


;; ----------------------
;; File - sky-tng
;; Source Path - engine/gfx/sky/sky-tng.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern copy-sky-texture (function dma-buffer adgif-shader float none))
(define-extern copy-cloud-texture (function dma-buffer adgif-shader float none))
(define-extern init-sky-regs (function none))
(define-extern render-sky-tri (function (inline-array sky-vertex) dma-buffer none))
(define-extern close-sky-buffer (function dma-buffer none))
(define-extern set-tex-offset (function int int none))
(define-extern render-sky-quad (function int dma-buffer none))
(define-extern sky-tng-setup-cloud-layer (function float float vector (inline-array sky-vertex) none))
(define-extern draw-large-polygon function)
(define-extern init-sky-tng-data (function sky-tng-data none))
(define-extern clip-polygon-against-positive-hyperplane function)
(define-extern clip-polygon-against-negative-hyperplane function)
(define-extern sky-duplicate-polys function)
(define-extern sky-tng-setup-clouds (function none))
(define-extern render-sky-tng (function time-of-day-context none))

;; - Unknowns

(define-extern *sky-work* sky-work)
(define-extern *sky-tng-data* sky-tng-data)
(define-extern sky-roof-polygons (inline-array sky-vertex))
(define-extern sky-cloud-polygons (inline-array sky-vertex))
(define-extern sky-cloud-polygon-indices (pointer uint8))


;; ----------------------
;; File - load-boundary-h
;; Source Path - engine/level/load-boundary-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype lbvtx (structure)
  ((x    float           :offset-assert 0)
   (y    float           :offset-assert 4)
   (z    float           :offset-assert 8)
   (v0   uint8           :offset-assert 12)
   (v1   uint8           :offset-assert 13)
   (v2   uint8           :offset-assert 14)
   (ix   uint8           :offset-assert 15)
   (quad uint128         :offset 0)
   (v    vector  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum load-boundary-cmd
  :type uint8
  (invalid 0)
  (load 1)
  (cmd2 2)
  (display 3)
  (vis 4)
  (force-vis 5)
  (checkpt 6)
  )

(deftype load-boundary-crossing-command (structure)
  ((cmd        load-boundary-cmd     :offset-assert 0)
   (bparm      uint8 3 :offset-assert 1)
   (parm       uint32 2 :offset-assert 4)
   (lev0       basic     :offset 4)
   (lev1       basic     :offset 8)
   (displev    basic     :offset 4)
   (dispcmd    basic     :offset 8)
   (nick       basic     :offset 4)
   (forcelev   basic     :offset 4)
   (forceonoff basic     :offset 8)
   (checkname  basic     :offset 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(defenum load-boundary-flags
  :type uint8
  :bitfield #t
  (closed 0)
  (player 1)
  )

(deftype load-boundary (basic)
  ((num-points uint16                                 :offset-assert 4)
   (flags      load-boundary-flags                                  :offset-assert 6)
   (top-plane  float                                  :offset-assert 8)
   (bot-plane  float                                  :offset-assert 12)
   (tri-cnt    int32                                  :offset-assert 16)
   (next       load-boundary                          :offset-assert 20)
   (cmd-fwd    load-boundary-crossing-command :inline :offset-assert 24)
   (cmd-bwd    load-boundary-crossing-command :inline :offset-assert 36)
   (rejector   vector                         :inline :offset-assert 48)
   (data       lbvtx                        1    :inline   :offset-assert 64)
   (data2       lbvtx                        :dynamic    :inline   :offset 64)
   )
  (:methods
    (new (symbol type int symbol symbol) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; - Unknowns

(define-extern *load-boundary-list* load-boundary) ;; guess for now
(define-extern *load-boundary-target* (inline-array lbvtx))


;; ----------------------
;; File - load-boundary
;; Source Path - engine/level/load-boundary.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype lb-editor-parms (basic)
  ((boundary load-boundary  :offset-assert 4)
   (vertex   int32  :offset-assert 8)
   (x-origin float  :offset-assert 12)
   (z-origin float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; - Functions

(define-extern check-closed-boundary (function load-boundary lbvtx lbvtx symbol))
(define-extern check-open-boundary (function load-boundary lbvtx lbvtx symbol))
(define-extern load-state-want-vis (function symbol int))
(define-extern load-state-want-levels (function symbol symbol int))
(define-extern load-state-want-display-level (function symbol symbol int))
(define-extern load-state-want-force-vis (function symbol symbol int))
(define-extern command-get-param (function object object object))
(define-extern entity-birth-no-kill (function entity none))
(define-extern part-tracker-init (function sparticle-launch-group time-frame (function part-tracker none) (pointer process-drawable) process collide-prim-core none :behavior part-tracker))
(define-extern command-list-get-process (function object process))
(define-extern command-get-quoted-param (function object object object))
(define-extern command-get-int (function object int int))
(define-extern ambient-hint-spawn (function string vector process-tree symbol object))
(define-extern command-get-float (function object float float))
(define-extern process-by-ename (function string process))
(define-extern point-in-polygon (function load-boundary vector symbol))
(define-extern try-corner (function object int symbol))
(define-extern split-monotone-polygon (function load-boundary int none))
(define-extern fix-boundary-normals (function load-boundary none))
(define-extern triangulate-boundary (function load-boundary object))
(define-extern find-bounding-circle (function load-boundary none))
(define-extern render-boundary (function load-boundary none))
(define-extern check-boundary (function load-boundary none))
(define-extern edit-load-boundaries (function none))
(define-extern copy-load-command! (function load-boundary-crossing-command load-boundary-crossing-command none))
(define-extern copy-load-boundary! (function load-boundary load-boundary none))
(define-extern lb-add-plane (function load-boundary))
(define-extern lb-add (function load-boundary))
(define-extern save-boundary-cmd (function load-boundary-crossing-command string object none))
(define-extern replace-load-boundary (function load-boundary load-boundary none))
(define-extern format-boundary-cmd (function load-boundary-crossing-command none))
(define-extern boundary-set-color (function lbvtx load-boundary-crossing-command none))
(define-extern add-boundary-shader (function texture-id dma-buffer none))
(define-extern draw-boundary-cap (function load-boundary float dma-buffer symbol none))
(define-extern draw-boundary-side (function load-boundary integer integer dma-buffer symbol none))
(define-extern init-boundary-regs (function none))
(define-extern render-boundary-tri (function lbvtx dma-buffer none))
(define-extern render-boundary-quad (function lbvtx dma-buffer none))
(define-extern draw-boundary-polygon function)
(define-extern lb-del (function none))
(define-extern lb-add-vtx-before (function none))
(define-extern lb-add-vtx-after (function none))
(define-extern lb-del-vtx (function none))
(define-extern load-boundary-from-template (function (array object) none))
(define-extern ---lb-save (function none))
(define-extern lb-add-load (function object object none))
(define-extern lb-add-load-plane (function object object none))
(define-extern lb-flip (function none))
(define-extern lb-set-camera (function none))
(define-extern lb-set-player (function none))
(define-extern lb-copy (function none))
(define-extern render-boundaries (function none))
(define-extern command-get-time (function object int int))

;; - Unknowns

(define-extern *backup-load-state* load-state)
(define-extern *display-load-commands* symbol)
(define-extern *triangulation-buffer* (inline-array lbvtx))
(define-extern *lb-editor-parms* lb-editor-parms)
(define-extern *boundary-polygon* (inline-array lbvtx))


;; ----------------------
;; File - load-boundary-data
;; Source Path - engine/level/load-boundary-data.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern *static-load-boundary-list* (array array))


;; ----------------------
;; File - level-info
;; Source Path - engine/level/level-info.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern training level-load-info)
(define-extern village1 level-load-info)
(define-extern beach level-load-info)
(define-extern jungle level-load-info)
(define-extern jungleb level-load-info)
(define-extern misty level-load-info)
(define-extern firecanyon level-load-info)
(define-extern village2 level-load-info)
(define-extern sunken level-load-info)
(define-extern sunkenb level-load-info)
(define-extern swamp level-load-info)
(define-extern rolling level-load-info)
(define-extern ogre level-load-info)
(define-extern village3 level-load-info)
(define-extern snow level-load-info)
(define-extern maincave level-load-info)
(define-extern darkcave level-load-info)
(define-extern robocave level-load-info)
(define-extern lavatube level-load-info)
(define-extern citadel level-load-info)
(define-extern finalboss level-load-info)
(define-extern intro level-load-info)
(define-extern demo level-load-info)
(define-extern title level-load-info)
(define-extern halfpipe level-load-info)
(define-extern default-level level-load-info)


;; ----------------------
;; File - level
;; Source Path - engine/level/level.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern update-sound-banks (function int))
(define-extern load-vis-info (function symbol symbol int))
(define-extern on (function symbol process))
(define-extern level-update-after-load (function level login-state level))
(define-extern add-bsp-drawable (function bsp-header level symbol display-frame none))
(define-extern remap-level-name (function level-load-info symbol))
(define-extern bg (function symbol int))
(define-extern play (function symbol symbol int))
(define-extern show-level (function symbol int))

;; - Symbols

(define-extern *print-login* symbol)

;; - Unknowns

(define-extern unload (function string none))
(define-extern *login-state* login-state)
(define-extern link-resume (function int))


;; ----------------------
;; File - text
;; Source Path - engine/ui/text.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern set-font-color-alpha (function font-color int none))
(define-extern load-game-text-info (function string symbol kheap int))
(define-extern load-level-text-files (function int none))
(define-extern draw-debug-text-box (function font-context none))
(define-extern print-game-text-scaled (function string float font-context int none))
(define-extern disable-level-text-file-loading (function none))
(define-extern enable-level-text-file-loading (function none))

;; - Unknowns

(define-extern *level-text-file-load-flag* symbol)
(define-extern *game-text-line* string)
(define-extern *game-text-word* string)
(define-extern text-is-loading symbol)


;; ----------------------
;; File - collide-probe
;; Source Path - engine/collide/collide-probe.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-probe-stack-elem (structure)
  ((child uint32  :offset-assert 0)
   (count uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-probe-stack (structure)
  ((data collide-probe-stack-elem 1024 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

;; - Functions

(define-extern misty-ambush-height (function vector float))
(define-extern distc (function vector vector float))
(define-extern interpolate (function float float float float float float))
(define-extern collide-upload-vu0 (function none))
(define-extern collide-probe-instance-tie (function object int collide-list int int)) ;; drawable is either an instance-tie or a draw-node inline arrary
(define-extern collide-probe-node (function (inline-array draw-node) int collide-list int))
(define-extern indent-to (function int none))
(define-extern probe-traverse-inline-array-node (function drawable-inline-array-node int none))
(define-extern probe-traverse-draw-node (function draw-node int none))
(define-extern creates-new-method? (function type int symbol))
(define-extern overrides-parent-method? (function type int symbol))
(define-extern describe-methods (function type symbol))
(define-extern probe-traverse-collide-fragment (function drawable-tree-collide-fragment int none))
(define-extern print-out (function int object))
(define-extern collide-probe-instance-tie-collide-frags (function none)) ;; does nothing
(define-extern collide-probe-collide-fragment-tree-make-list (function drawable-tree-collide-fragment collide-list none))
(define-extern collide-probe-instance-tie-tree-make-list (function drawable-tree-instance-tie collide-list int))
(define-extern collide-probe-make-list (function level collide-list none))
(define-extern misty-ambush-height-probe (function vector float float))
(define-extern pke-collide-test (function none)) ;; does nothing

;; - Unknowns

(define-extern collide-vu0-block vu-function)
(define-extern *collide-probe-stack* collide-probe-stack) ;; scratchpad pointer?


;; ----------------------
;; File - collide-frag
;; Source Path - engine/collide/collide-frag.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern sphere-cull (function vector symbol)) ;; vf deps - vf16-19


;; ----------------------
;; File - collide-mesh
;; Source Path - engine/collide/collide-mesh.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype sopt-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype spat-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype oot-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;; ----------------------
;; File - collide-touch
;; Source Path - engine/collide/collide-touch.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype add-prims-touching-work (structure)
  ((tri1 collide-tri-result  :offset-assert 0)
   (tri2 collide-tri-result  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


;; ----------------------
;; File - collide-edge-grab
;; Source Path - engine/collide/collide-edge-grab.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype pbhp-stack-vars (structure)
  ((edge        collide-edge-edge         :offset-assert 0)
   (allocated   basic                     :offset-assert 4)
   (neg-hold-pt vector            :inline :offset-assert 16)
   (split-vec   vector            :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; - Unknowns

(define-extern *rotate-surface* surface)
(define-extern *no-walk-surface* surface)


;; ----------------------
;; File - collide-shape
;; Source Path - engine/collide/collide-shape.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern target-attack-up (function target symbol symbol none))
(define-extern find-ground-point (function control-info vector float float vector))
(define-extern default-collision-reaction (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags))
(define-extern simple-collision-reaction (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags))
(define-extern collide-shape-draw-debug-marks (function none))
(define-extern debug-report-col-stats (function int))

;; - Unknowns

(define-extern *col-timer-enable* symbol)
(define-extern *frame-timer* stopwatch)
(define-extern *col-timer* stopwatch)
(define-extern *race-track-surface* surface)


;; ----------------------
;; File - collide
;; Source Path - engine/collide/collide.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern *collide-vif0-init* (array uint32))


;; ----------------------
;; File - collide-planes
;; Source Path - engine/collide/collide-planes.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern camera-bounding-box-draw (function bounding-box basic rgba none))
(define-extern collide-planes-test0 (function vector float float vector vector bounding-box vector float))
(define-extern collide-planes-test1 (function vector float vector (inline-array vector) vector float))
(define-extern camera-cross (function vector vector vector vector4w meters basic))
(define-extern collide-planes-intersect (function vector (inline-array bounding-box) vector float))
(define-extern collide-planes (function (inline-array vector) int vector (inline-array vector) symbol))


;; ----------------------
;; File - merc-death
;; Source Path - engine/gfx/merc/merc-death.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert 4)
   (timer       uint8   :offset-assert 6)
   (overlap     uint8   :offset-assert 7)
   (effect      uint32  :offset-assert 8)
   (sound       symbol  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern birth-func-death-sparks (function none)) ;; does absolutely nothing
(define-extern merc-death-spawn (function int vector vector none)) ;; i think the int is the id for the particle table

;; - Unknowns

(define-extern *merc-death-globals* vector)
(define-extern death-beach-puppy death-info)
(define-extern death-jungle-snake death-info)
(define-extern death-default death-info)
(define-extern death-warp-in death-info)
(define-extern death-warp-out death-info)


;; ----------------------
;; File - water-h
;; Source Path - engine/gfx/water/water-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum water-flags
  :bitfield #t
  :type uint32
  (wt00)
  (wt01)
  (wt02)
  (wt03)
  (wt04)
  (wt05)
  (wt06)
  (wt07)
  (wt08)
  (wt09)
  (wt10)
  (wt11)
  (wt12)
  (wt13)
  (wt14)
  (wt15)
  (wt16)
  (wt17)
  (wt18)
  (wt19)
  (wt20)
  (wt21)
  (wt22)
  (wt23)
  (wt24)
  (wt25)
  (wt26)
  (wt27)
  (wt28)
  (wt29)
  (wt30)
  (wt31)
  )

(deftype water-control (basic)
  ((flags             water-flags           :offset-assert 4)
   (process           process-drawable      :offset-assert 8)
   (joint-index       int32                 :offset-assert 12)
   (top-y-offset      float                 :offset-assert 16)
   (ripple-size       meters                :offset-assert 20)
   (enter-water-time  time-frame            :offset-assert 24)
   (wade-time         time-frame            :offset-assert 32)
   (on-water-time     time-frame            :offset-assert 40)
   (enter-swim-time   time-frame            :offset-assert 48)
   (swim-time         time-frame            :offset-assert 56)
   (base-height       meters                :offset-assert 64)
   (wade-height       meters                :offset-assert 68)
   (swim-height       meters                :offset-assert 72)
   (surface-height    meters                :offset-assert 76)
   (bottom-height     meters                :offset-assert 80)
   (height            meters                :offset-assert 84)
   (height-offset     float       4         :offset-assert 88)
   (real-ocean-offset meters                :offset 88)
   (ocean-offset      meters                :offset 92)
   (bob-offset        meters                :offset 96)
   (align-offset      meters                :offset 100)
   (swim-depth        meters                :offset-assert 104)
   (bob               smush-control :inline :offset-assert 112)
   (volume            handle                :offset-assert 144) ;; handle?
   (bottom            vector      2 :inline :offset-assert 160)
   (top               vector      2 :inline :offset-assert 192)
   (enter-water-pos   vector        :inline :offset-assert 224)
   (drip-old-pos      vector        :inline :offset-assert 240)
   (drip-joint-index  int32                 :offset-assert 256)
   (drip-wetness      float                 :offset-assert 260)
   (drip-time         time-frame            :offset-assert 264)
   (drip-speed        float                 :offset-assert 272)
   (drip-height       meters                :offset-assert 276)
   (drip-mult         float                 :offset-assert 280)
   )
  :method-count-assert 17
  :size-assert         #x11c
  :flag-assert         #x110000011c
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (water-control-method-9 (_type_) none 9)
    (water-control-method-10 (_type_) none 10)
    (start-bobbing! (_type_ float int int) none 11)
    (distance-from-surface (_type_) float 12)
    (create-splash (_type_ float vector int vector) none 13)
    (display-water-marks? (_type_) symbol 14)
    (water-control-method-15 (_type_) none 15)
    (water-control-method-16 (_type_) none 16)
    )
  )

(deftype water-vol (process-drawable)
  ((water-height  meters  :offset-assert 176)
   (wade-height   meters  :offset-assert 180)
   (swim-height   meters  :offset-assert 184)
   (bottom-height meters  :offset-assert 188)
   (attack-event  symbol  :offset-assert 192)
   (target        handle  :offset-assert 200)
   (flags         water-flags  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  ;; inherited inspect of process-drawable
  (:methods
    (water-vol-idle () _type_ :state 20)
    (water-vol-startup () _type_ :state 21)
    (water-vol-method-22 (_type_) none 22) ;; can also return an obs?
    (reset-root! (_type_) none 23)
    (set-stack-size! (_type_) none 24)
    (water-vol-method-25 (_type_) none 25)
    (update! (_type_) none 26)
    (on-exit-water (_type_) none 27)
    (get-ripple-height (_type_ vector) float 28)
    (init! (_type_) none 29)
    )
  )


;; ----------------------
;; File - camera
;; Source Path - engine/camera/camera.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern vector-into-frustum-nosmooth! (function matrix vector float vector))
(define-extern slave-matrix-blend-2 (function matrix float vector matrix matrix))
(define-extern mat-remove-z-rot (function matrix vector matrix))
(define-extern parameter-ease-sin-clamp (function float float))
(define-extern cam-slave-get-intro-step (function entity float))
(define-extern cam-slave-get-float (function entity symbol float float))
(define-extern cam-slave-init-vars (function none :behavior camera-slave))
(define-extern cam-calc-follow! (function cam-rotation-tracker vector symbol vector))
(define-extern slave-set-rotation! (function cam-rotation-tracker vector float float symbol none))
(define-extern camera-slave-debug (function camera-slave none))
(define-extern camera-line-rel-len (function vector vector float vector4w none))
(define-extern cam-slave-get-flags (function entity symbol uint128))
(define-extern cam-slave-get-vector-with-offset (function entity-actor vector symbol symbol))
(define-extern cam-slave-get-fov (function entity float))
(define-extern cam-slave-get-interp-time (function entity float))
(define-extern cam-slave-get-rot (function entity-actor matrix matrix))
(define-extern cam-state-from-entity (function entity state))
(define-extern parameter-ease-none (function object object)) ;; stubbed and unused
(define-extern parameter-ease-clamp (function float float)) ;; unused
(define-extern parameter-ease-lerp-clamp (function float float)) ;; unused
(define-extern parameter-ease-sqrt-clamp (function float float)) ;; unused
(define-extern fourth-power (function float float)) ;; unused
(define-extern third-power (function float float)) ;; unused
(define-extern parameter-ease-sqr-clamp (function float float))
(define-extern cam-slave-go (function state none))
(define-extern cam-slave-init (function state entity none :behavior camera-slave))
(define-extern cam-standard-event-handler (function process int symbol event-message-block object :behavior camera-slave))
(define-extern cam-curve-pos (function vector vector curve symbol vector :behavior camera-slave))
(define-extern cam-curve-setup (function vector none :behavior camera-slave))
(define-extern v-slrp2! (function vector vector vector float vector float vector))
(define-extern v-slrp3! (function vector vector vector vector float vector))

;; - Symbols

(define-extern *cam-res-string* string)

;; ----------------------
;; File - cam-interface
;; Source Path - engine/camera/cam-interface.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern matrix-world->local (function matrix))
(define-extern camera-angle (function float))
(define-extern camera-teleport-to-entity (function entity-actor none :behavior process))

;; - Symbols

(define-extern *camera-dummy-vector* vector)


;; ----------------------
;; File - cam-master
;; Source Path - engine/camera/cam-master.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype camera-master-bank (basic)
  ((onscreen-head-height            meters  :offset-assert 4)
   (onscreen-foot-height            meters  :offset-assert 8)
   (target-height                   meters  :offset-assert 12)
   (up-move-to-pitch-ratio-in-air   float   :offset-assert 16)
   (down-move-to-pitch-ratio-in-air float   :offset-assert 20)
   (up-move-to-pitch-on-ground      float   :offset-assert 24)
   (down-move-to-pitch-on-ground    float   :offset-assert 28)
   (pitch-off-blend                 float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype list-keeper (process)
  ((dummy float  :offset-assert 112)
   )
  :heap-base #x10
  :method-count-assert 14
  :size-assert         #x74
  :flag-assert         #xe00100074
  ;; inherited inspect of process
  )

;; - Functions

(define-extern list-keeper-init (function none :behavior camera-master))
(define-extern master-track-target (function symbol :behavior camera-master)) ;; TODO - go get that collide-cache function
(define-extern master-check-regions (function object :behavior camera-master))
(define-extern camera-master-debug (function camera-master none))
(define-extern master-unset-region (function object :behavior camera-master))
(define-extern reset-target-tracking (function symbol :behavior camera-master))
(define-extern reset-drawable-tracking (function symbol :behavior camera-master))
(define-extern master-switch-to-entity (function entity symbol :behavior camera-master))
(define-extern reset-drawable-follow (function float :behavior camera-master))
(define-extern reset-follow (function float :behavior camera-master))
(define-extern in-cam-entity-volume? (function vector entity float symbol symbol))
(define-extern master-base-region (function entity float :behavior camera-master))
(define-extern setup-slave-for-hopefull (function camera-slave none))
(define-extern master-is-hopeful-better? (function camera-slave camera-slave symbol :behavior camera-master)) ;; TODO - ASM
(define-extern target-cam-pos (function vector))
(define-extern cam-master-init (function none :behavior camera-master))

;; - Symbols

(define-extern *CAMERA_MASTER-bank* camera-master-bank)


;; ----------------------
;; File - cam-states
;; Source Path - engine/camera/cam-states.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cam-eye-bank (basic)
  ((rot-speed float :offset-assert 4)
   (max-degrees float :offset-assert 8)
   (max-fov float :offset-assert 12)
   (min-fov float :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-billy-bank (basic)
  ((rot-speed float :offset-assert 4)
   (tilt-degrees float :offset-assert 8))
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype cam-string-bank (basic)
  ((los-coll-rad meters :offset-assert 4)
   (los-coll-rad2 meters :offset-assert 8))
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype los-dist (structure)
  (
    (par-dist float :offset-assert 0)
    (lat-dist float :offset-assert 4)
    (vert-dist float :offset-assert 8)
  )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype collide-los-dist-info (structure)
  ((min-par float  :offset-assert 0)
   (max-par float  :offset-assert 4)
   (min-lat float  :offset-assert 8)
   (max-lat float  :offset-assert 12)
   (min-vp float  :offset-assert 16)
   (max-vp float  :offset-assert 20)
   (min-vn float  :offset-assert 24)
   (max-vn float  :offset-assert 28)
   (count int32 :offset-assert 32))
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype collide-los-result (structure)
  ((lateral vector :inline :offset-assert 0)
   (cw collide-los-dist-info :inline :offset-assert 16)
   (ccw collide-los-dist-info :inline :offset-assert 64)
   (straddle collide-los-dist-info :inline :offset-assert 112)
   (lateral-valid symbol :offset-assert 148))
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

(deftype cam-stick-bank (basic)
  ((max-z meters :offset-assert 4)
   (min-z meters :offset-assert 8)
   (max-y meters :offset-assert 12)
   (min-y meters :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-bike-bank (basic)
  ((max-z meters :offset-assert 4)
   (min-z meters :offset-assert 8)
   (max-y meters :offset-assert 12)
   (min-y meters :offset-assert 16))
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; - Functions

(define-extern cam-bike-code (function none :behavior camera-slave))
(define-extern cam-calc-bike-follow! (function cam-rotation-tracker vector symbol vector :behavior camera-slave))
(define-extern cam-stick-code (function none :behavior camera-slave))
(define-extern set-string-parms (function vector :behavior camera-slave))
(define-extern cam-string-code (function vector :behavior camera-slave))
(define-extern cam-string-find-position-rel! (function vector symbol))
(define-extern cam-string-set-position-rel! (function vector int :behavior camera-slave))
(define-extern cam-debug-reset-coll-tri (function none)) ;; not confirmed
(define-extern cam-string-follow (function object :behavior camera-slave))
(define-extern cam-string-line-of-sight (function vector :behavior camera-slave))
(define-extern cam-string-joystick (function vector :behavior camera-slave))
(define-extern cam-string-find-hidden (function none :behavior camera-slave))
(define-extern cam-collision-record-save (function vector vector int symbol camera-slave none))
(define-extern cam-string-move (function object :behavior camera-slave))
(define-extern cam-dist-analog-input (function int float float))
(define-extern cam-los-collide (function vector vector clip-travel-vector-to-mesh-return-info pat-surface symbol :behavior camera-slave))
(define-extern dist-info-init (function collide-los-dist-info none))
(define-extern los-cw-ccw (function (inline-array collide-cache-tri) vector vector float clip-travel-vector-to-mesh-return-info vector float symbol))
(define-extern cam-debug-add-los-tri (function (inline-array collide-cache-tri) vector vector none))
(define-extern cam-los-spline-collide (function vector vector pat-surface float))
(define-extern cam-los-setup-lateral (function clip-travel-vector-to-mesh-return-info vector vector symbol :behavior camera-slave))
(define-extern slave-los-state->string (function slave-los-state string))
(define-extern dist-info-print (function collide-los-dist-info string object))
(define-extern dist-info-valid? (function collide-los-dist-info symbol))
(define-extern dist-info-append (function collide-los-dist-info vector none))
(define-extern cam-circular-code (function float :behavior camera-slave))
(define-extern cam-circular-position (function symbol vector :behavior camera-slave))
(define-extern cam-circular-position-into-max-angle (function vector vector float vector :behavior camera-slave))
(define-extern cam-standoff-calc-trans (function vector :behavior camera-slave))
(define-extern string-push-help (function float))
(define-extern cam-draw-collide-cache (function collide-cache none))

;; - Symbols


;; - Unknowns

(define-extern *CAM_BIKE-bank* cam-bike-bank)
(define-extern *CAM_STICK-bank* cam-stick-bank)
(define-extern *CAM_STRING-bank* cam-string-bank)
(define-extern *CAM_BILLY-bank* cam-billy-bank)
(define-extern *CAM_EYE-bank* cam-eye-bank)


;; ----------------------
;; File - cam-states-dbg
;; Source Path - engine/camera/cam-states-dbg.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cam-point-watch-bank (basic)
  ((speed     float   :offset-assert 4)
   (rot-speed degrees :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype cam-free-bank (basic)
  ((speed     float   :offset-assert 4)
   (rot-speed degrees :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype camera-free-floating-move-info (structure)
  ((rv vector :inline :offset-assert 0)
   (tv vector :inline :offset-assert 16)
   (up vector :inline :offset-assert 32)
   (tm matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype camera-orbit-info (structure)
  ((radius      float          :offset-assert 0)
   (rot         float          :offset-assert 4)
   (target-off  vector :inline :offset-assert 16)
   (orbit-off   vector :inline :offset-assert 32)
   (radius-lerp float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype CAM_ORBIT-bank (basic)
  ((RADIUS_MAX        float  :offset-assert 4)
   (RADIUS_MIN        float  :offset-assert 8)
   (TARGET_OFF_ADJUST float  :offset-assert 12)
   (ORBIT_OFF_ADJUST  float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; - Functions

(define-extern cam-free-floating-move (function matrix vector vector int vector))
(define-extern cam-free-floating-input (function vector vector symbol int vector))

;; - Symbols

(define-extern *CAM_FREE-bank* cam-free-bank)

;; - Unknowns

(define-extern *camera-orbit-info* camera-orbit-info)
(define-extern *CAM_ORBIT-bank* CAM_ORBIT-bank)
(define-extern *CAM_POINT_WATCH-bank* cam-point-watch-bank)


;; ----------------------
;; File - cam-combiner
;; Source Path - engine/camera/cam-combiner.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern cam-combiner-init (function none :behavior camera-combiner))

;; - Symbols



;; ----------------------
;; File - cam-update
;; Source Path - engine/camera/cam-update.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern move-camera-from-pad (function math-camera math-camera))
(define-extern update-view-planes (function math-camera (inline-array plane) float none))
(define-extern update-visible (function math-camera symbol)) ;; second/third arg unused
(define-extern set-point (function vector float float float none))
(define-extern plane-from-points (function (inline-array plane) vector vector vector int none))
(define-extern update-camera (function symbol))

;; - Symbols

(define-extern *start-timer* int)
(define-extern *timer-value* int)
(define-extern *start-pos* vector)
(define-extern *save-camera-inv-rot* matrix)
(define-extern *update-leaf-when-outside-bsp* symbol) ;; boolean


;; ----------------------
;; File - vol-h
;; Source Path - engine/geometry/vol-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype plane-volume (structure)
  ((volume-type  symbol  :offset-assert 0)
   (point-count  int16   :offset-assert 4)
   (normal-count int16   :offset-assert 6)
   (first-point  (pointer vector)  :offset-assert 8)
   (first-normal (pointer vector)  :offset-assert 12)
   (num-planes   int32   :offset-assert 16)
   (plane        (inline-array plane)  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (init-vol! (_type_ symbol vector-array vector-array) symbol 9)
    (debug-draw (_type_) none 10)
    (point-in-vol? (_type_ vector float) symbol 11)
    )
  )

(defenum vol-flags
  :bitfield #t
  :type uint32
  (volf00)
  (volf01)
  (volf02)
  (volf03)
  (volf04)
  (volf05)
  (volf06)
  (volf07)
  (volf08)
  (volf09)
  (volf10)
  (volf11)
  (volf12)
  (volf13)
  (volf14)
  (volf15)
  (volf16)
  (volf17)
  (volf18)
  (volf19)
  (volf20)
  (volf21)
  (volf22)
  (volf23)
  (volf24)
  (volf25)
  (volf26)
  (volf27)
  (volf28)
  (volf29)
  (volf30)
  (volf31)
  )

(deftype vol-control (basic)
  ((flags         uint32     :offset-assert 4)
   (process       process-drawable      :offset-assert 8)
   (pos-vol-count int32      :offset-assert 12)
   (pos-vol       plane-volume 32 :inline :offset-assert 16)
   (neg-vol-count int32      :offset-assert 784)
   (neg-vol       plane-volume 32 :inline :offset-assert 788)
   (debug-point   vector-array      :offset-assert 1556)
   (debug-normal  vector-array      :offset-assert 1560)
   )
  :method-count-assert 12
  :size-assert         #x61c
  :flag-assert         #xc0000061c
  (:methods
    (new (symbol type process-drawable) _type_ 0)
    (init! (_type_) symbol 9)
    (point-in-vol? (_type_ vector) symbol 10)
    (vol-control-method-11 (_type_) symbol 11)
    )
  )


;; ----------------------
;; File - cam-layout
;; Source Path - engine/camera/cam-layout.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cam-layout (process)
  (
    (cam-entity entity-camera :offset-assert 112)
    (num-entities int32 :offset-assert 116)
    (cur-entity int32 :offset-assert 120)
    (num-volumes int32 :offset-assert 124)
    (cur-volume int32 :offset-assert 128)
    (first-pvol int32 :offset-assert 132)
    (first-cutoutvol int32 :offset-assert 136)
    (res-key float :offset-assert 140)
  )
  :method-count-assert 14
  :heap-base           #x200
  :size-assert         #x90
  :flag-assert         #xe02000090
  (:states
    cam-layout-active)
  )

(deftype clm-basic (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype clm (basic)
  (
    (title string :offset-assert 4)
    (items (array clm-basic) :offset-assert 8) ; array of something
  )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype clmf-cam-flag-toggle-info (structure)
  (
    (key float :offset-assert 0)
    (force-on int32 :offset-assert 4)
    (force-off int32 :offset-assert 8)
  )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype interp-test-info (structure)
  (
    (from vector :inline :offset-assert 0)
    (to vector :inline :offset-assert 16)
    (origin vector :inline :offset-assert 32)
    (color vector4w :offset-assert 48)
    (axis vector :offset-assert 52)
    (disp string :offset-assert 56)
  )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype cam-layout-bank (basic)
  (
    (spline-t float :offset-assert 4)
    (spline-step float :offset-assert 8)
    (intro-t float :offset-assert 12)
    (intro-step float :offset-assert 16)
    (debug-t float :offset-assert 20)
    (debug-step float :offset-assert 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-item-action (structure)
  (
    (button uint64 :offset-assert 0)
    (options uint64 :offset-assert 8)
    (func symbol :offset-assert 16)
    (parm0 int32 :offset 20)
    (parm0-basic basic :offset 20)
    (parm1-basic basic :offset 24)
    (parm1 symbol :offset 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-item (clm-basic)
  (
    (description string :offset-assert 4)
    (button-symbol symbol :offset-assert 8)
    (action clm-item-action :inline :offset-assert 16)
  )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype clm-list-item (basic)
  (
    (description string :offset-assert 4)
    (track-val symbol :offset-assert 8)
    (val-func symbol :offset-assert 12)
    (val-parm0 int32 :offset 16)
    (val-parm0-basic basic :offset 16)
    (val-parm1-basic basic :offset 20)
    (val-parm1 symbol :offset 20)
    (actions (array clm-item-action) :offset-assert 24)
  )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-list (clm-basic)
  (
    (tracker symbol :offset-assert 4)
    (cur-list-item int32 :offset-assert 8)
    (items (array clm-list-item) :offset-assert 12)
  )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype volume-descriptor-array (inline-array-class)
  ((data  plane-volume  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern cam-layout-stop (function symbol))
(define-extern cam-layout-start (function none))
(define-extern cam-layout-init (function none :behavior cam-layout))
(define-extern clmf-next-entity (function int symbol :behavior cam-layout))
(define-extern cam-layout-entity-info (function entity-actor basic))
(define-extern cam-layout-entity-volume-info (function symbol :behavior cam-layout)) ; TODO - crash
(define-extern cam-layout-do-menu (function clm none :behavior cam-layout))
(define-extern cam-layout-print (function int int string pointer))
(define-extern cam-layout-function-call (function symbol string int basic symbol :behavior cam-layout))
(define-extern cam-layout-do-action (function clm-item-action symbol :behavior cam-layout))
(define-extern clmf-save-single (function entity-camera symbol symbol file-stream :behavior cam-layout))
(define-extern cam-layout-save-cam-rot (function symbol string entity-actor string))
(define-extern cam-layout-save-cam-trans (function symbol string entity-actor string))
(define-extern cam-layout-save-pivot (function symbol string entity-actor string))
(define-extern cam-layout-save-align (function symbol string entity-actor string))
(define-extern cam-layout-save-interesting (function symbol string entity-actor string))
(define-extern cam-layout-save-fov (function symbol string entity-actor string))
(define-extern cam-layout-save-focalpull (function symbol string entity-actor string))
(define-extern cam-layout-save-flags (function symbol string entity-actor string))
(define-extern cam-layout-save-introsplinetime (function symbol string entity-actor string))
(define-extern cam-layout-save-introsplineexitval (function symbol string entity-actor string))
(define-extern cam-layout-save-interptime (function symbol string entity-actor string))
(define-extern cam-layout-save-splineoffset (function symbol string entity-actor string))
(define-extern cam-layout-save-spline-follow-dist-offset (function symbol string entity-actor string))
(define-extern cam-layout-save-campointsoffset (function symbol string entity-actor string))
(define-extern cam-layout-save-tiltAdjust (function symbol string entity-actor string))
(define-extern cam-layout-save-stringMinLength (function symbol string entity-actor string))
(define-extern cam-layout-save-stringMaxLength (function symbol string entity-actor string))
(define-extern cam-layout-save-stringMinHeight (function symbol string entity-actor string))
(define-extern cam-layout-save-stringMaxHeight (function symbol string entity-actor string))
(define-extern cam-layout-save-stringCliffHeight (function symbol string entity-actor string))
(define-extern cam-layout-save-maxAngle (function symbol string entity-actor string))
(define-extern cam-layout-save-campoints-flags (function symbol string entity-actor string))
(define-extern cam-layout-save-focalpull-flags (function symbol string entity-actor string))
(define-extern cam-index-options->string (function cam-index-options object string))
(define-extern cam-slave-options->string (function cam-slave-options object string))
(define-extern fov->maya (function float float))
(define-extern cam-layout-entity-volume-info-create (function entity-camera symbol symbol :behavior cam-layout)) ;; TODO - decomp crash
(define-extern clmf-next-volume (function int symbol :behavior cam-layout))
(define-extern clmf-input (function vector vector int vector))
(define-extern camera-fov-frame (function matrix vector float float float vector4w none))
(define-extern interp-test (function (function vector vector vector float vector float none) interp-test-info basic))
(define-extern v-slrp! (function vector vector vector float vector))
(define-extern interp-test-deg (function (function vector vector vector vector float none) interp-test-info basic))
(define-extern camera-line-setup (function vector4w none))
(define-extern camera-line-draw (function vector vector symbol))
(define-extern cam-layout-intersect-dist (function vector vector vector float))
(define-extern clmf-button-test (function symbol))
(define-extern clmf-bna (function symbol))
(define-extern clmf-implement (function symbol))
(define-extern clmf-pos-rot (function symbol symbol symbol :behavior cam-layout))
(define-extern clmf-next-vol-dpad (function symbol))
(define-extern clmf-to-edit-cam (function symbol))
(define-extern clmf-to-vol-attr (function symbol :behavior cam-layout))
(define-extern clmf-to-spline-attr (function symbol))
(define-extern clmf-to-intro-attr (function symbol))
(define-extern clmf-to-index-attr (function symbol))
(define-extern clmf-to-focalpull-attr (function symbol))
(define-extern clmf-to-edit (function symbol :behavior cam-layout))
(define-extern clmf-to-select (function symbol))
(define-extern clmf-look-through (function symbol :behavior cam-layout))
(define-extern clmf-save-one (function symbol symbol :behavior cam-layout))
(define-extern clmf-save-all (function symbol symbol :behavior cam-layout))
(define-extern clmf-cam-flag-toggle (function int int symbol :behavior cam-layout))
(define-extern clmf-cam-flag (function string uint uint symbol :behavior cam-layout))
(define-extern clmf-cam-float-adjust (function symbol (pointer float) symbol :behavior cam-layout))
(define-extern clmf-cam-meters (function meters symbol symbol :behavior cam-layout))
(define-extern clmf-cam-fov (function degrees symbol symbol :behavior cam-layout))
(define-extern clmf-cam-deg (function degrees symbol symbol :behavior cam-layout))
(define-extern clmf-cam-intro-time (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-interp-time (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-float (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-string (function string symbol symbol :behavior cam-layout))
(define-extern cam-layout-restart (function none))

;; - Symbols

(define-extern function type)

;; - Unknowns

(define-extern *camera-layout-blink* symbol)
(define-extern *last-cur-entity* int)
(define-extern *clm-select* clm)
(define-extern *clm* clm)
(define-extern *camera-layout-message-ypos* int)
(define-extern *CAM_LAYOUT-bank* cam-layout-bank)
(define-extern *clm-edit* clm)
(define-extern *clm-focalpull-attr* clm)
(define-extern *clm-index-attr* clm)
(define-extern *clm-intro-attr* clm)
(define-extern *clm-spline-attr* clm)
(define-extern *clm-vol-attr* clm)
(define-extern *volume-descriptor-current* int)
(define-extern *volume-point-current* int)
(define-extern *volume-normal-current* int)
(define-extern *volume-descriptor* vol-control)
(define-extern *volume-point* vector-array)
(define-extern *volume-normal* vector-array)
(define-extern *clm-cam-attr* clm)
(define-extern *clm-cam-lookthrough* clm)
(define-extern *clm-save-all* clm)
(define-extern *clm-save-one* clm)


;; ----------------------
;; File - cam-debug
;; Source Path - engine/camera/cam-debug.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cam-dbg-scratch (structure)
  ((linevec4w      vector4w 2    :inline   :offset-assert 0)
   (color          vector  :inline :offset-assert 32)
   (plotvec        vector4w 2  :inline     :offset-assert 48)
   (linevec        vector4w 2   :inline    :offset-assert 80)
   (rel-vec        vector  :inline :offset-assert 112)
   (sphere-v-start vector  :inline :offset-assert 128)
   (sphere-v-end   vector  :inline :offset-assert 144)
   (sphere-v-down  vector  :inline :offset-assert 160)
   (sphere-vec     vector  :inline :offset-assert 176)
   (crossvec       vector 3   :inline     :offset-assert 192)
   (bboxvec        vector 6    :inline   :offset-assert 240)
   (fov-vv         vector 4    :inline   :offset-assert 336)
   (fov-src        vector  :inline :offset-assert 400)
   (fov-dest       vector  :inline :offset-assert 416)
   (fov-vert       vector  :inline :offset-assert 432)
   (fov-horz       vector  :inline :offset-assert 448)
   )
  :method-count-assert 9
  :size-assert         #x1d0
  :flag-assert         #x9000001d0
  )

(deftype cam-debug-tri (structure)
  ((vertex    vector  3      :inline :offset-assert 0)
   (intersect vector   :inline :offset-assert 48)
   (color     vector4w         :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype cam-collision-record (structure)
  ((pos            vector :inline :offset-assert 0)
   (vel            vector :inline :offset-assert 16)
   (desired-pos    vector :inline :offset-assert 32)
   (cam-tpos-cur   vector :inline :offset-assert 48)
   (cam-tpos-old   vector :inline :offset-assert 64)
   (view-flat      vector :inline :offset-assert 80)
   (string-min-val vector :inline :offset-assert 96)
   (string-max-val vector :inline :offset-assert 112)
   (view-off       vector :inline :offset-assert 128)
   (min-z-override float          :offset-assert 144)
   (string-push-z  float          :offset-assert 148)
   (view-off-param float          :offset-assert 152)
   (frame          int32          :offset-assert 156)
   (iteration      int32          :offset-assert 160)
   (move-type      symbol          :offset-assert 164)
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )

(deftype cam-collision-record-array (inline-array-class)
  ((data             cam-collision-record :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern cam-collision-record-draw (function none))
(define-extern master-draw-coordinates (function vector none))
(define-extern cam-debug-draw-tris (function symbol))
(define-extern cam-collision-record-step (function int none))
(define-extern camera-sphere (function vector float vector none))
(define-extern camera-line-rel (function vector vector vector4w none))
(define-extern camera-fov-draw (function int int vector float float vector4w symbol))
(define-extern cam-line-dma (function pointer))
(define-extern camera-line2d (function vector4w vector4w pointer))
(define-extern camera-plot-float-func (function float float float float (function float float) vector4w none))
(define-extern cam-debug-add-coll-tri (function cam-debug-tri vector cam-debug-tri none))
(define-extern debug-euler (function cam-dbg-scratch object))
(define-extern bike-cam-limit (function float float))
(define-extern external-cam-reset! (function none))

;; - Unknowns

(define-extern *camera-old-level* string)
(define-extern *camera-old-cpu* int)
(define-extern *camera-old-vu* int)
(define-extern *camera-old-tfrag-bytes* int)
(define-extern *camera-old-stat-string-tfrag-near* string)
(define-extern *camera-old-stat-string-tfrag* string)
(define-extern *camera-old-stat-string-total* string)
(define-extern *cam-collision-record-show* int)
(define-extern *cam-collision-record* cam-collision-record-array)
(define-extern *cam-collision-record-last* int)
(define-extern *cam-collision-record-first* int)
(define-extern *cam-debug-los-tri* (inline-array cam-debug-tri))
(define-extern *cam-debug-los-tri-current* int)
(define-extern *cam-debug-coll-tri* (inline-array cam-debug-tri))
(define-extern *cam-debug-coll-tri-current* int)


;; ----------------------
;; File - cam-start
;; Source Path - engine/camera/cam-start.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern cam-stop (function none))
(define-extern reset-cameras (function none)) ;; defined in entity.gc
(define-extern cam-start (function symbol none))


;; ----------------------
;; File - process-drawable
;; Source Path - engine/draw/process-drawable.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern process-entity-status! (function process entity-perm-status symbol int))
(define-extern process-grab? (function process symbol :behavior camera-tracker))
(define-extern process-release? (function process symbol :behavior process))
(define-extern ja-post (function none :behavior process-drawable))
(define-extern make-nodes-from-jg (function art-joint-geo pair symbol cspace-array :behavior process-drawable))
(define-extern dma-add-process-drawable (function process-drawable draw-control symbol dma-buffer none))
(define-extern add-process-drawable (function process-drawable draw-control symbol dma-buffer none))
(define-extern vector<-cspace+vector! (function vector cspace vector vector))
(define-extern cspace-children (function process-drawable int pair))
(define-extern cspace-inspect-tree (function process-drawable cspace int int object object))
(define-extern fill-skeleton-cache (function process-drawable int)) ;; idk
(define-extern execute-math-engine (function int))
(define-extern draw-joint-spheres (function process-drawable symbol))
(define-extern anim-loop (function none :behavior process-drawable))
(define-extern ja-done? (function int symbol :behavior process-drawable))
(define-extern ja-min? (function int symbol :behavior process-drawable))
(define-extern ja-max? (function int symbol :behavior process-drawable))
(define-extern ja-num-frames (function int int :behavior process-drawable))
(define-extern ja-frame-num (function int float :behavior process-drawable))
(define-extern ja-aframe (function float int float :behavior process-drawable))
(define-extern ja-speed (function int float :behavior process-drawable))
(define-extern ja-step (function int float :behavior process-drawable))
(define-extern ja-group-size (function int :behavior process-drawable))
(define-extern ja-eval (function int :behavior process-drawable))
(define-extern ja-blend-eval (function int :behavior process-drawable))
(define-extern transform-post (function int :behavior process-drawable))
(define-extern rider-trans (function int :behavior process-drawable))
(define-extern rider-post (function int :behavior process-drawable))
(define-extern pusher-post (function int :behavior process-drawable))
(define-extern process-drawable-delay-player (function time-frame int :behavior process-drawable))
(define-extern process-drawable-fuel-cell-handler (function process int symbol event-message-block none :behavior process-drawable))
(define-extern process-drawable-birth-fuel-cell (function entity vector symbol none :behavior process-drawable))
(define-extern process-drawable-valid? (function process-drawable symbol))

;; - Unknowns

(define-extern *valid-con* string)
(define-extern *default-skel-template* pair)


;; ----------------------
;; File - hint-control
;; Source Path - engine/game/task/hint-control.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern find-hint-control-index (function text-id int))
(define-extern start-hint-timer (function text-id none))
(define-extern increment-success-for-hint (function text-id none))
(define-extern can-hint-be-played? (function text-id entity string symbol))
(define-extern update-task-hints (function none))

;; - Symbols

(define-extern *hint-semaphore* (pointer level-hint))


;; ----------------------
;; File - ambient
;; Source Path - engine/ambient/ambient.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

(defenum hint-command
  (if-unknown 0)
  (if-known 1)
  (if-resolved 2)
  (if-need-introduction 3)
  (if-need-reminder 4)
  (if-need-reminder-a 5)
  (if-need-reward-speech 6)
  (close-need-hint 7)
  (close-need-introduction 8)
  (close-need-reminder 9)
  (close-need-reminder-a 10)
  (close-need-reward-speech 11)
  (close-need-resolution 12)
  (if-at-most-need-reminder-a 13)
  )

(declare-type voicebox process-drawable)

;; - Functions

(define-extern ambient-type-error (function drawable-ambient vector none))
(define-extern ambient-type-sound (function drawable-ambient vector none))
(define-extern ambient-type-sound-loop (function drawable-ambient vector none))
(define-extern ambient-type-poi (function drawable-ambient vector none))
(define-extern ambient-type-hint (function drawable-ambient vector none))
(define-extern ambient-type-light (function drawable-ambient vector none))
(define-extern ambient-type-dark (function drawable-ambient vector none))
(define-extern ambient-type-weather-off (function drawable-ambient vector none))
(define-extern ambient-type-ocean-off (function drawable-ambient vector none))
(define-extern ambient-type-ocean-near-off (function drawable-ambient vector none))
(define-extern ambient-type-music (function drawable-ambient vector none))
(define-extern level-hint-task-process (function entity uint128 string int))
(define-extern bottom-hud-hidden? (function symbol))
(define-extern level-hint-init-by-other (function text-id string entity none :behavior level-hint))
(define-extern voicebox-spawn (function process vector (pointer process)))
(define-extern hide-bottom-hud (function none))
(define-extern ambient-hint-init-by-other (function string vector symbol none :behavior level-hint))
(define-extern level-hint-process-cmd (function (pointer int32) int int int))
(define-extern task-known? (function game-task symbol))
(define-extern can-grab-display? (function process symbol))
(define-extern level-hint-displayed? (function symbol))
(define-extern ambient-inspect function)

;; - Unknowns

(define-extern *execute-ambients* symbol)


;; ----------------------
;; File - assert
;; Source Path - engine/debug/assert.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern __assert (function symbol string int))
(define-extern __assert-min-max-range-float (function float float float string string string int))
(define-extern __assert-min-max-range-int (function int int int string string string int))
(define-extern __assert-zero-lim-range-int (function int int string string int))

;; - Symbols

(define-extern *run-time-assert-enable* symbol)


;; ----------------------
;; File - generic-obs
;; Source Path - engine/game/generic-obs.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype target-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype camera-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype med-res-level (process-drawable)
  ((level     symbol  :offset-assert 176)
   (part-mode basic  :offset-assert 180) ;; sometimes a sound-mode, but too low a sample size to know for sure
   (index     int32  :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    med-res-level-idle)
  )

(deftype launcher (process-drawable)
  ((root-override   collide-shape  :score 100 :offset 112)
   (spring-height   meters         :offset-assert 176)
   (camera          state          :offset-assert 180)
   (active-distance float          :offset-assert 184)
   (seek-time       time-frame         :offset-assert 192)
   (dest            vector :inline :offset-assert 208)
   (sound-id        sound-id       :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xe4
  :heap-base           #x80
  :flag-assert         #x14008000e4
  (:states
    launcher-idle
    launcher-deactivated
    launcher-active)
  )

;; - Functions

(define-extern line-in-view-frustum? (function vector vector symbol))
(define-extern process-drawable-random-point! (function process-drawable vector vector))
(define-extern process-drawable-from-entity! (function process-drawable entity-actor none))
(define-extern cam-launcher-long-joystick (function vector :behavior camera-slave))
(define-extern hide-hud-quick (function none))
(define-extern command-get-process (function object process process :behavior camera-tracker))
(define-extern camera-change-to (function string int symbol symbol))
(define-extern camera-look-at (function pair uint process :behavior camera-tracker))
(define-extern camera-pov-from (function pair uint process :behavior camera-tracker))
(define-extern command-get-trans (function object vector vector)) ;; object types - null | symbol (null | target) | pair
(define-extern manipy-init (function vector entity-actor skeleton-group vector none :behavior manipy)) ;; TODO - not confirmed yet
(define-extern part-tracker-notify (function object :behavior part-tracker))
(define-extern clone-anim-once (function handle int symbol string none :behavior process-drawable))
(define-extern convert-to-hud-object (function process-drawable hud none :behavior process-drawable))
(define-extern clone-anim (function handle int symbol string none :behavior process-drawable))
(define-extern merc-eye-anim (function process-drawable none))
(define-extern ja-anim-done? (function process symbol))
(define-extern command-get-camera (function object state state))
(define-extern camera-anim (function symbol basic entity (pointer process) :behavior camera-tracker)) ;; unused
(define-extern camera-tracker-init (function object object :behavior camera-tracker)) ;; TODO - nested SC
(define-extern cam-launcher-joystick (function vector :behavior camera-slave))
(define-extern launcher-init-by-other (function vector float int float none :behavior launcher))
(define-extern touch-tracker-init (function vector float time-frame none :behavior touch-tracker))
(define-extern process-drawable-pair-random-point! (function process-drawable process-drawable vector float vector))
(define-extern birth-func-set-quat (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern draw-eco-beam (function vector vector none))

;; - Unknowns

(define-extern *particle-quat* quaternion)
(define-extern *lev-string* string)


;; ----------------------
;; File - target-util
;; Source Path - engine/target/target-util.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype target-bank (basic)
  ((jump-collide-offset          meters           :offset-assert 4)
   (jump-height-min              meters           :offset-assert 8)
   (jump-height-max              meters           :offset-assert 12)
   (double-jump-height-min       meters           :offset-assert 16)
   (double-jump-height-max       meters           :offset-assert 20)
   (flip-jump-height-min         meters           :offset-assert 24)
   (flip-jump-height-max         meters           :offset-assert 28)
   (duck-jump-height-min         meters           :offset-assert 32)
   (duck-jump-height-max         meters           :offset-assert 36)
   (flop-jump-height-min         meters           :offset-assert 40)
   (flop-jump-height-max         meters           :offset-assert 44)
   (attack-jump-height-min       meters           :offset-assert 48)
   (attack-jump-height-max       meters           :offset-assert 52)
   (edge-grab-jump-height-min    meters           :offset-assert 56)
   (edge-grab-jump-height-max    meters           :offset-assert 60)
   (swim-jump-height-min         meters           :offset-assert 64)
   (swim-jump-height-max         meters           :offset-assert 68)
   (tube-jump-height-min         meters           :offset-assert 72)
   (tube-jump-height-max         meters           :offset-assert 76)
   (wheel-duration               time-frame           :offset-assert 80)
   (wheel-jump-pre-window        time-frame           :offset-assert 88)
   (wheel-jump-post-window       time-frame           :offset-assert 96)
   (wheel-timeout                time-frame           :offset-assert 104)
   (wheel-speed-min              meters           :offset-assert 112)
   (wheel-speed-inc              meters           :offset-assert 116)
   (wheel-flip-duration          time-frame           :offset-assert 120)
   (wheel-flip-height            meters           :offset-assert 128)
   (wheel-flip-dist              meters           :offset-assert 132)
   (wheel-flip-art-height        meters           :offset-assert 136)
   (wheel-flip-art-dist          meters           :offset-assert 140)
   (duck-slide-distance          meters           :offset-assert 144)
   (fall-far                     meters           :offset-assert 148)
   (fall-far-inc                 meters           :offset-assert 152)
   (attack-timeout               time-frame           :offset-assert 160)
   (ground-timeout               time-frame           :offset-assert 168)
   (slide-down-timeout           time-frame           :offset-assert 176)
   (fall-timeout                 time-frame           :offset-assert 184)
   (fall-stumble-threshold       meters           :offset-assert 192)
   (yellow-projectile-speed      meters           :offset-assert 196)
   (hit-invulnerable-timeout     time-frame           :offset-assert 200)
   (run-cycle-length             float            :offset-assert 208)
   (walk-cycle-dist              meters           :offset-assert 212)
   (walk-up-cycle-dist           meters           :offset-assert 216)
   (walk-down-cycle-dist         meters           :offset-assert 220)
   (walk-side-cycle-dist         meters           :offset-assert 224)
   (run-cycle-dist               meters           :offset-assert 228)
   (run-up-cycle-dist            meters           :offset-assert 232)
   (run-down-cycle-dist          meters           :offset-assert 236)
   (run-side-cycle-dist          meters           :offset-assert 240)
   (run-wall-cycle-dist          meters           :offset-assert 244)
   (duck-walk-cycle-dist         meters           :offset-assert 248)
   (wade-shallow-walk-cycle-dist meters           :offset-assert 252)
   (wade-deep-walk-cycle-dist    meters           :offset-assert 256)
   (smack-surface-dist           meters           :offset-assert 260)
   (smack-surface-height         meters           :offset-assert 264)
   (min-dive-depth               meters           :offset-assert 268)
   (root-radius                  meters           :offset-assert 272)
   (root-offset                  vector   :inline :offset-assert 288)
   (body-radius                  meters           :offset-assert 304)
   (edge-radius                  meters           :offset-assert 308)
   (edge-offset                  vector   :inline :offset-assert 320)
   (head-radius                  meters           :offset-assert 336)
   (head-height                  meters           :offset-assert 340)
   (head-offset                  vector   :inline :offset-assert 352)
   (spin-radius                  meters           :offset-assert 368)
   (spin-offset                  vector   :inline :offset-assert 384)
   (duck-spin-radius             meters           :offset-assert 400)
   (duck-spin-offset             vector   :inline :offset-assert 416)
   (punch-radius                 meters           :offset-assert 432)
   (punch-offset                 vector   :inline :offset-assert 448)
   (uppercut-radius              meters           :offset-assert 464)
   (uppercut0-offset             vector   :inline :offset-assert 480)
   (uppercut1-offset             vector   :inline :offset-assert 496)
   (flop-radius                  meters           :offset-assert 512)
   (flop0-offset                 vector   :inline :offset-assert 528)
   (flop1-offset                 vector   :inline :offset-assert 544)
   (stuck-time                   seconds         :offset-assert 560)
   (stuck-timeout                seconds         :offset-assert 568)
   (stuck-distance               meters           :offset-assert 576)
   (tongue-pull-speed-min        float            :offset-assert 580)
   (tongue-pull-speed-max        float            :offset-assert 584)
   (yellow-attack-timeout        time-frame           :offset-assert 592)
   )
  :method-count-assert 9
  :size-assert         #x258
  :flag-assert         #x900000258
  )

;; - Functions

(define-extern target-height-above-ground (function float :behavior target))
(define-extern target-align-vel-z-adjust (function float float :behavior target))
(define-extern target-collide-set! (function symbol float int :behavior target))
(define-extern target-start-attack (function none :behavior target))
(define-extern target-danger-set! (function symbol symbol float :behavior target))
(define-extern average-turn-angle (function target float)) ;; NOTE - arg not confirmed, also unused
(define-extern can-play-stance-amibent? (function symbol :behavior target))
(define-extern can-jump? (function symbol symbol :behavior target))
(define-extern move-legs? (function symbol :behavior target))
(define-extern fall-test (function none :behavior target)) ;; NOTE - first arg unused
(define-extern slide-down-test (function none :behavior target))
(define-extern smack-surface? (function symbol symbol :behavior target))
(define-extern can-wheel? (function symbol :behavior target))
(define-extern can-duck? (function symbol :behavior target))
(define-extern can-exit-duck? (function symbol :behavior target)) ;; TODO - have to investigate collide-cache for this
(define-extern can-hands? (function symbol symbol :behavior target))
(define-extern can-feet? (function symbol :behavior target))
(define-extern vector-local+! (function vector vector vector :behavior target))
(define-extern move-forward (function float vector :behavior target))
(define-extern set-forward-vel (function float vector :behavior target))
(define-extern delete-back-vel (function none :behavior target))
(define-extern set-side-vel (function float vector :behavior target))
(define-extern target-timed-invulnerable (function time-frame target none))
(define-extern target-timed-invulnerable-off (function target none))
(define-extern ground-tween-initialize (function ground-tween-info uint uint uint uint uint uint ground-tween-info :behavior target)) ;; TODO - dealing with inline-array issues
(define-extern ground-tween-update (function ground-tween-info float float none :behavior target)) ;; TODO - inline array issues as well
(define-extern target-rot (function quaternion))

;; - Symbols

(define-extern *TARGET-bank* target-bank)
(define-extern *jchar-sg* skeleton-group)
(define-extern *target-shadow-control* shadow-control)


;; ----------------------
;; File - target-part
;; Source Path - engine/target/target-part.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern birth-func-copy-target-y-rot (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-ground-orient (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-target-orient (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-vector-orient (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern part-tracker-track-target-joint (function int sparticle-cpuinfo sparticle-launchinfo none)) ;; 3rd arg could also be a vector
(define-extern process-drawable-burn-effect (function time-frame none :behavior target))


;; ----------------------
;; File - collide-reaction-target
;; Source Path - engine/collide/collide-reaction-target.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern collide-shape-moving-angle-set! (function collide-shape-moving vector vector none))
(define-extern target-collision-low-coverage (function control-info collide-shape-intersect vector (pointer uint32) (pointer uint64) (pointer symbol) uint)) ;; i think the pointers are lies - TODO
(define-extern poly-find-nearest-edge (function vector (inline-array vector) vector vector vector))
(define-extern target-collision-reaction (function control-info collide-shape-intersect vector vector cshape-moving-flags))
(define-extern target-collision-no-reaction (function control-info collide-shape-intersect vector vector none))


;; ----------------------
;; File - logic-target
;; Source Path - engine/target/logic-target.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern init-target (function continue-point none :behavior target))
(define-extern target-print-stats (function target symbol symbol ))
(define-extern activate-hud (function process none))
(define-extern reset-target-state (function symbol target :behavior target))
(define-extern init-sidekick (function none :behavior sidekick))
(define-extern target-generic-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern level-setup (function none :behavior target))
(define-extern target-exit (function none :behavior target))
(define-extern target-calc-camera-pos (function none :behavior target))
(define-extern do-target-shadow (function none :behavior target))
(define-extern target-powerup-process (function none :behavior target))
(define-extern flag-setup (function none :behavior target))
(define-extern build-conversions (function vector vector :behavior target))
(define-extern do-rotations1 (function quaternion :behavior target))
(define-extern read-pad (function vector vector :behavior target))
(define-extern turn-to-vector (function vector float symbol :behavior target))
(define-extern add-thrust (function symbol :behavior target))
(define-extern add-gravity (function vector :behavior target))
(define-extern do-rotations2 (function int :behavior target))
(define-extern reverse-conversions (function vector none :behavior target))
(define-extern bend-gravity (function symbol :behavior target))
(define-extern post-flag-setup (function none :behavior target))
(define-extern joint-points (function none :behavior target))
(define-extern target-real-post (function none :behavior target))
(define-extern target-compute-edge (function none :behavior target))
(define-extern target-compute-pole (function none :behavior target))
(define-extern target-compute-slopes (function vector int :behavior target))
(define-extern warp-vector-into-surface! (function vector vector vector vector))
(define-extern vector<-pad-in-surface! (function vector symbol vector :behavior target))
(define-extern draw-history (function control-info symbol))
(define-extern vector-turn-to (function vector vector :behavior target))
(define-extern print-history (function control-info none))
(define-extern local-pad-angle (function float :behavior target))
(define-extern turn-around? (function symbol :behavior target))
(define-extern target-move-dist (function time-frame float :behavior target))
(define-extern target-compute-edge-rider (function none :behavior target))
(define-extern target-post (function none :behavior target))
(define-extern target-swim-post (function none :behavior target))
(define-extern target-no-stick-post (function none :behavior target))
(define-extern target-no-move-post (function none :behavior target))
(define-extern target-slide-down-post (function none :behavior target))
(define-extern target-no-ja-move-post (function none :behavior target))

;; - Unknowns



;; ----------------------
;; File - sidekick
;; Source Path - engine/target/sidekick.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern cspace<-cspace+quaternion! (function cspace cspace quaternion matrix))
(define-extern starts (function object))

;; - Unknowns

(define-extern *sidekick-sg* skeleton-group)
(define-extern *sidekick-remap* pair)


;; ----------------------
;; File - voicebox
;; Source Path - engine/game/voicebox.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype camera-voicebox (camera-slave)
  ()
  :method-count-assert 14
  :size-assert         #xa04
  :heap-base           #x9a0
  :flag-assert         #xe09a00a04
  (:states
    cam-voicebox)
  )

(deftype voicebox (process-drawable)
  ((parent-override (pointer camera-voicebox) :score 100         :offset 12)
   (base-trans vector           :inline :offset-assert 176)
   (seeker     cam-float-seeker :inline :offset-assert 192)
   (blend      float                    :offset-assert 216)
   (twist      float                    :offset-assert 220)
   (hint       handle                   :offset-assert 224)
   )
  :method-count-assert 23
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x17008000e8
  (:methods
    (enter () _type_ :state 20)
    (idle () _type_ :state 21)
    (exit () _type_ :state 22)
    )
  )

;; - Functions

(define-extern voicebox-init-by-other (function vector handle none :behavior voicebox)) ;; first arg is either a `level-hint` process or a `vector`
(define-extern voicebox-track (function none :behavior voicebox))

;; - Unknowns

(define-extern *voicebox-sg* skeleton-group)


;; ----------------------
;; File - target-handler
;; Source Path - engine/target/target-handler.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern target-bonk-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-standard-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-send-attack (function process uint touching-shapes-entry int int symbol :behavior target)) ;; i suspect the uints are actually structures/basics
(define-extern target-attacked (function symbol attack-info process touching-shapes-entry (state symbol attack-info target) object :behavior target))
(define-extern target-apply-tongue (function vector symbol :behavior target))
(define-extern get-intersect-point (function vector touching-prims-entry control-info touching-shapes-entry vector))
(define-extern target-powerup-effect (function symbol none :behavior target))
(define-extern target-shoved (function meters meters process (state object object target) object :behavior target))
(define-extern target-dangerous-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-jump-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-walk-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-state-hook-exit (function none :behavior target))
(define-extern target-effect-exit (function none :behavior target))

;; - Unknowns



;; ----------------------
;; File - target
;; Source Path - engine/target/target.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern target-land-effect (function none :behavior target))
(define-extern target-hit-ground-anim (function symbol symbol :behavior target))
(define-extern mod-var-jump (function symbol symbol symbol vector vector :behavior target))
(define-extern init-var-jump (function float float vector vector vector vector :behavior target)) ;; 1st and 2nd vectors may be symbols instead?
(define-extern target-falling-anim (function time-frame time-frame symbol :behavior target))
(define-extern target-falling-trans (function basic time-frame none :behavior target))
(define-extern target-falling-anim-trans (function none :behavior target)) ;; unconfirmed

;; - Unknowns


;; ----------------------
;; File - target2
;; Source Path - engine/target/target2.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype first-person-hud (process)
  (
    (max-nb-of-particles int32 :offset-assert 112)
    (nb-of-particles int32 :offset-assert 116)
    (particles hud-particle 3 :offset-assert 120)
    (in-out-position int32 :offset-assert 132)
    (sides-x-scale float :offset-assert 136)
    (sides-y-scale float :offset-assert 140)
    (x-offset int32 :offset-assert 144)
  )
  :method-count-assert 15
  :heap-base           #x30
  :size-assert         #x94
  :flag-assert         #xf00300094
  (:methods
    (dumb-15 (_type_) none))
  (:states
    hud-normal
    hud-coming-in
    hud-going-out
    hud-waiting)
  )

;; - Functions

(define-extern target-swim-tilt (function float float float float float :behavior target))
(define-extern projectile-init-by-other (function entity-actor vector vector uint handle none :behavior projectile)) ;; 4th arg is `options`, 5th is `last-target`
(define-extern first-person-hud-init-by-other (function none :behavior first-person-hud))
(define-extern disable-hud (function int none))
(define-extern enable-hud (function none))
(define-extern part-first-person-hud-left-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-first-person-hud-right-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-first-person-hud-selector-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern look-for-points-of-interest (function symbol))

;; - Unknowns

(define-extern *yellow-jump-mods* surface)
(define-extern *fp-hud-stack* pointer)


;; ----------------------
;; File - target-death
;; Source Path - engine/target/target-death.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern target-death-anim (function spool-anim none :behavior target))
(define-extern death-movie-remap (function int int int))
(define-extern pov-camera-init-by-other (function vector skeleton-group string pov-camera-flag process-drawable pair none :behavior pov-camera)) ;; TODO - not confirmed -- sunken-elevator
(define-extern target-hit-effect (function attack-info none :behavior target))
(define-extern target-hit-setup-anim (function attack-info none :behavior target))
(define-extern target-hit-move (function attack-info symbol (function none :behavior target) float none :behavior target))
(define-extern target-hit-orient (function attack-info vector symbol :behavior target))
(define-extern target-hit-push (function vector matrix float float attack-info object :behavior target))
(define-extern velocity-set-to-target! (function vector float attack-info vector :behavior target))
(define-extern start-sequence-a (function none)) ;; not confirmed
(define-extern task-closed? (function game-task task-status symbol))
(define-extern next-level (function symbol level-load-info))

;; - Unknowns

(define-extern *death-spool-array* (array spool-anim))
(define-extern *deathcam-sg* skeleton-group)
(define-extern *smack-mods* surface)
(define-extern *smack-up-mods* surface)
(define-extern *auto-continue* symbol)


;; ----------------------
;; File - menu
;; Source Path - engine/debug/menu.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(declare-type debug-menu basic)
(deftype debug-menu-context (basic)
  ((is-active   symbol     :offset-assert 4)
   (sel-length  int32     :offset-assert 8)
   (sel-menu    debug-menu   8 :offset-assert 12)
   (root-menu   debug-menu     :offset-assert 44)
   (joypad-func (function basic none)     :offset-assert 48)
   (joypad-item basic     :offset-assert 52) ;; is this more specific?
   (font        font-context     :offset-assert 56)
   (is-hidden   symbol     :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  (:methods
   (new (symbol type) _type_ 0))
  )

(deftype debug-menu-node (basic)
  ((name          string  :offset-assert 4)
   (parent        debug-menu  :offset-assert 8)
   (refresh-delay int32  :offset-assert 12)
   (refresh-ctr   int32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(declare-type debug-menu-item debug-menu-node)
(deftype debug-menu (debug-menu-node)
  ((context       debug-menu-context  :offset-assert 20)
   (selected-item debug-menu-item  :offset-assert 24)
   (pix-width     int32  :offset-assert 28)
   (pix-height    int32  :offset-assert 32)
   (items         pair  :offset-assert 36) ; list of debug-menu-item
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  (:methods
   (new (symbol type debug-menu-context string) _type_ 0))
  )

(deftype debug-menu-item (debug-menu-node)
  ((id            int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype debug-menu-item-submenu (debug-menu-item)
  ((submenu       debug-menu  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  (:methods
   (new (symbol type string debug-menu) _type_ 0))
  )

(defenum debug-menu-msg
  :type int32
  (activate 1)
  (deactivate 2)
  (update 3)
  (press 4)
  )

(deftype debug-menu-item-function (debug-menu-item)
  ((activate-func (function object object)  :offset-assert 24)
   (hilite-timer  int8   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x1d
  :flag-assert         #x90000001d
  (:methods
   (new (symbol type string object (function object object)) _type_ 0))
  )

(deftype debug-menu-item-flag (debug-menu-item)
  ((activate-func (function object debug-menu-msg object)  :offset-assert 24)
   (is-on         object  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
   (new (symbol type string object (function object debug-menu-msg object)) _type_ 0))
  )


(deftype debug-menu-item-var (debug-menu-item)
  ((display-str      string  :offset-assert 24)
   (grabbed-joypad-p symbol  :offset-assert 28)
   (float-p          symbol  :offset-assert 32)
   (range-p          symbol  :offset-assert 36)
   (show-len         int32  :offset-assert 40)
   (inc-delay        int32  :offset-assert 44)
   (inc-delay-ctr    int32  :offset-assert 48)
   (step-delay-ctr   int32  :offset-assert 52)
   (inc-dir          int32  :offset-assert 56)
   (fval             float  :offset-assert 60)
   (fundo-val        float  :offset-assert 64)
   (frange-min       float  :offset-assert 68)
   (frange-max       float  :offset-assert 72)
   (fstart-inc       float  :offset-assert 76)
   (fstep            float  :offset-assert 80)
   (fprecision       int32  :offset-assert 84)
   (factivate-func   (function int debug-menu-msg float float float)  :offset-assert  88)
   (ival             int32     :offset         60)
   (iundo-val        int32     :offset         64)
   (irange-min       int32     :offset         68)
   (irange-max       int32     :offset         72)
   (istart-inc       int32     :offset         76)
   (istep            int32     :offset         80)
   (ihex-p           symbol    :offset-assert  92)
   (iactivate-func   (function int debug-menu-msg int int int)  :offset         88)
   (ifloat-p         symbol  :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  (:methods
   (new (symbol type string int int) _type_ 0))
  )

;; - Functions



(defenum debug-menu-dest
  :type int32
  (root 1)
  (open-menus 2)
  (current-selection 3)
  (activation 0)
  )

(define-extern debug-menus-active (function debug-menu-context debug-menu-context))
(define-extern debug-menus-default-joypad-func (function debug-menu-context debug-menu-context))
(define-extern debug-menu-context-render (function debug-menu-context debug-menu-context))
(define-extern debug-menu-context-close-submenu (function debug-menu-context debug-menu-context))
(define-extern debug-menu-context-activate-selection (function debug-menu-context debug-menu-context))
(define-extern debug-menu-context-select-new-item (function debug-menu-context int debug-menu-context))
(define-extern debug-menu-item-send-msg (function debug-menu-item debug-menu-msg debug-menu-item))
(define-extern debug-menu-send-msg (function debug-menu debug-menu-msg symbol debug-menu))
(define-extern debug-menu-context-send-msg (function debug-menu-context debug-menu-msg debug-menu-dest debug-menu-context))
(define-extern debug-menu-item-submenu-msg (function debug-menu-item-submenu debug-menu-msg debug-menu-item-submenu))
(define-extern debug-menu-item-function-msg (function debug-menu-item-function debug-menu-msg debug-menu-item-function))
(define-extern debug-menu-item-flag-msg (function debug-menu-item-flag debug-menu-msg debug-menu-item-flag))
(define-extern debug-menu-item-var-msg (function debug-menu-item-var debug-menu-msg debug-menu-item-var))
(define-extern debug-menu-context-release-joypad (function debug-menu-context symbol)) ;; this is called with a second arg in places, but definitely not used!
(define-extern debug-menu-context-grab-joypad (function debug-menu-context basic (function basic none) symbol))
(define-extern debug-menu-item-var-joypad-handler (function debug-menu-item-var debug-menu-item-var))
(define-extern debug-menu-item-var-update-display-str (function debug-menu-item-var debug-menu-item-var))
(define-extern debug-menu-context-open-submenu (function debug-menu-context debug-menu basic)) ;; can also return string error messages
(define-extern debug-menu-context-select-next-or-prev-item (function debug-menu-context int debug-menu-context))
(define-extern debug-menu-render (function debug-menu int int debug-menu-node int debug-menu))
(define-extern debug-menu-item-render (function debug-menu-item int int int symbol debug-menu-item))
(define-extern debug-menu-item-submenu-render (function debug-menu-item-submenu int int int symbol debug-menu-item-submenu))
(define-extern debug-menu-item-function-render (function debug-menu-item-function int int int symbol debug-menu-item-function))
(define-extern debug-menu-item-flag-render (function debug-menu-item-flag int int int symbol debug-menu-item-flag))
(define-extern debug-menu-item-var-render (function debug-menu-item-var int int int symbol debug-menu-item-var))
(define-extern debug-menu-make-from-template (function debug-menu-context pair debug-menu-node))
(define-extern debug-menu-append-item (function debug-menu debug-menu-node debug-menu-node))
(define-extern debug-menu-context-set-root-menu (function debug-menu-context debug-menu debug-menu-context))
(define-extern debug-menu-func-decode (function object function))
(define-extern debug-menu-item-var-make-int (function debug-menu-item-var (function int debug-menu-msg int int int) int symbol int int symbol debug-menu-item-var))
(define-extern debug-menu-item-var-make-float (function debug-menu-item-var (function int debug-menu-msg float float float) float symbol float float int debug-menu-item-var))
(define-extern debug-menu-rebuild (function debug-menu debug-menu))
(define-extern debug-menu-context-default-selection (function debug-menu-context symbol debug-menu-context))
(define-extern debug-menu-item-get-max-width (function debug-menu-item debug-menu int))
(define-extern debug-menu-remove-all-items (function debug-menu debug-menu))
(define-extern debug-menu-find-from-template (function debug-menu-context pair debug-menu))
(define-extern debug-menus-handler (function debug-menu-context debug-menu-context))


;; ----------------------
;; File - drawable
;; Source Path - engine/draw/drawable.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern display-frame-finish (function display display))
(define-extern display-sync (function display none))
(define-extern determine-pause-mode (function int))
(define-extern display-frame-start (function display int int none))
(define-extern toggle-pause (function int))
(define-extern deactivate-progress (function none))
(define-extern debug-init-buffer (function bucket-id gs-zbuf gs-test none))
(define-extern real-main-draw-hook (function none))
(define-extern error-sphere (function drawable-error string none))
(define-extern draw-instance-info (function string none)) ;; only passed *stdcon*
(define-extern find-instance-by-name (function string prototype-bucket))
(define-extern prototype-bucket-type (function prototype-bucket type))
(define-extern guard-band-cull (function vector symbol))
(define-extern find-instance-by-index (function type int bsp-header prototype-bucket))
(define-extern prototype-bucket-recalc-fields (function prototype-bucket prototype-bucket))
(define-extern dma-add-process-drawable-hud (function process-drawable draw-control symbol dma-buffer none))
(define-extern foreground-engine-execute (function engine display-frame int int none))
(define-extern main-debug-hook (function none))
(define-extern main-draw-hook (function none))
(define-extern swap-display (function display none))
(define-extern marks-cam-restore (function none))
(define-extern eddie-cam-restore (function none))
(define-extern gregs-jungle-cam-restore (function none))
(define-extern gregs-village1-cam-restore (function none))
(define-extern gregs-texture-cam-restore (function none))
(define-extern gregs-texture2-cam-restore (function none))
(define-extern cave-cam-restore (function none))
(define-extern paals-cam-restore (function none))

;; - Symbols

(define-extern *edit-instance* string)

;; - Unknowns

(define-extern syncv (function int int))
(define-extern put-display-env (function object none))
(define-extern *surrogate-dma-buffer* dma-buffer)
(define-extern *screen-shot* symbol)
(define-extern *hud-lights* vu-lights)
(define-extern *instance-mem-usage* memory-usage-block)
(define-extern *add-sphere* symbol)
(define-extern *generic-effect-mode* int)


;; ----------------------
;; File - main-collide
;; Source Path - engine/collide/main-collide.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern drawable-sphere-box-intersect? (function drawable bounding-box4w symbol)) ;; TODO - pcgtw | por | ppach
(define-extern instance-sphere-box-intersect? (function drawable instance-tie bounding-box4w symbol)) ;; pextlh | VITOF12 | pcgtw | por | ppach ;; TODO - the first arg is based from the second arg in `drawable:11`
(define-extern instance-tfragment-add-debug-sphere (function drawable instance-tie symbol)) ;; unused


;; ----------------------
;; File - video
;; Source Path - engine/game/video.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern set-hud-aspect-ratio (function symbol symbol none)) ;; TODO return type not validated yet


;; ----------------------
;; File - main
;; Source Path - engine/game/main.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern display-loop (function int :behavior process))
(define-extern entity-by-type (function type entity-actor))
(define-extern scf-get-territory (function int))
(define-extern pause-allowed? (function symbol))
(define-extern menu-respond-to-pause (function symbol))
(define-extern hide-progress-screen (function none))
(define-extern set-letterbox-frames (function time-frame none))
(define-extern letterbox (function none))
(define-extern blackout (function none))
(define-extern main-cheats (function int))
(define-extern off (function int))

;; - Symbols

(define-extern *cheat-temp* (pointer int32))
(define-extern *progress-cheat* symbol)
(define-extern *master-exit* symbol)
(define-extern *last-master-mode* symbol)
(define-extern *screen-filter* screen-filter)
(define-extern *first-boot* symbol) ;; PAL

;; - Unknowns

(define-extern scf-get-timeout (function int))
(define-extern scf-get-inactive-timeout (function int))
(define-extern kernel-shutdown (function none))


;; ----------------------
;; File - collide-cache
;; Source Path - engine/collide/collide-cache.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype collide-puls-work (structure)
  ((ignore-pat pat-surface                :offset-assert 0)
   (tri-out    collide-tri-result         :offset-assert 4)
   (bsphere    sphere             :inline :offset-assert 16)
   (move-dist  vector             :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype lsmi-work (structure)
  ((best-u      float                      :offset-assert 0)
   (orig-best-u float                      :offset-assert 4)
   (action      uint32                     :offset-assert 8)
   (tri-out     collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )

;; - Functions

(define-extern make-collide-list-using-line-sphere-inst-test (function collide-fragment instance-tie symbol))
(define-extern test-closest-pt-in-triangle (function collide-cache symbol))

;; - Unknowns

(define-extern *already-printed-exeeded-max-cache-tris* symbol) ;; TODO - not confirmed


;; ----------------------
;; File - memory-usage
;; Source Path - engine/debug/memory-usage.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern *max-dma* int)


;; ----------------------
;; File - entity
;; Source Path - engine/entity/entity.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern task-control-reset (function symbol none))
(define-extern init-entity (function process entity-actor none))
(define-extern birth-viewer (function process entity-actor object))
(define-extern update-actor-vis-box (function process-drawable vector vector none))
(define-extern process-status-bits (function process symbol none))
(define-extern entity-by-meters (function float float float entity-actor))
(define-extern entity-process-count (function symbol int))
(define-extern entity-count (function int))
(define-extern entity-remap-names (function pair none))
(define-extern expand-vis-box-with-point (function entity vector none))
(define-extern entity-task-complete-on (function entity none))
(define-extern entity-task-complete-off (function entity none))
(define-extern entity-speed-test (function string none))

;; - Unknowns

(define-extern *compact-actors* symbol)
(define-extern *vis-actors* symbol)


;; ----------------------
;; File - vol
;; Source Path - engine/geometry/vol.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern plane-volume-intersect-dist (function vector vector vector float))


;; ----------------------
;; File - navigate
;; Source Path - engine/nav/navigate.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype cfs-travel-vec (structure)
  ((dir         vector :inline :offset-assert 0)
   (delta-angle float          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cfs-work (structure)
  ((desired-travel-dist float           :offset-assert 0)
   (desired-angle       float           :offset-assert 4)
   (max-dist            float           :offset-assert 8)
   (old-angle           float           :offset-assert 12)
   (modified            int32           :offset-assert 16)
   (blocked-mask        uint64          :offset-assert 24)
   (travel              vector  :inline :offset-assert 32)
   (current             vector  :inline :offset-assert 48)
   (new-travel          cfs-travel-vec 2       :inline :offset-assert 64)
   (temp-travel         cfs-travel-vec 2       :inline :offset-assert 128)
   (prev-dir            vector  :inline :offset-assert 192)
   (attempt-dir         vector  :inline :offset-assert 208)
   (tangent             vector 2       :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype nav-control-cfs-work (structure)
  ((in-dir              vector  :inline :offset-assert 0)
   (right-dir           vector  :inline :offset-assert 16)
   (best-dir            vector 2       :inline :offset-assert 32)
   (temp-dir            vector 2       :inline :offset-assert 64)
   (away-dir            vector  :inline :offset-assert 96)
   (best-dir-angle      degrees 2         :offset-assert 112) ;; maybe degs?
   (ignore-mask         uint64          :offset-assert 120)
   (initial-ignore-mask uint64          :offset-assert 128)
   (i-sphere            int32           :offset-assert 136)
   (i-first-sphere      int32           :offset-assert 140)
   (i-inside-sphere     int32           :offset-assert 144)
   (inside-sphere-dist  float           :offset-assert 148)
   (sign                float           :offset-assert 152)
   (travel-len          float           :offset-assert 156)
   (dist2               float           :offset-assert 160)
   (inside-dist         float           :offset-assert 164)
   (rand-angle          float           :offset-assert 168)
   (dir-update          basic           :offset-assert 172)
   (debug-offset        vector  :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

;; - Functions

(define-extern test-xz-point-on-line-segment? (function vector vector vector float symbol))
(define-extern ray-ccw-line-segment-intersection? (function vector vector vector vector symbol))
(define-extern choose-travel-portal-vertex (function nav-mesh nav-route-portal nav-poly vector int))
(define-extern init-ray (function nav-ray symbol))
(define-extern ray-line-segment-intersection? (function vector vector vector vector symbol))
(define-extern point-triangle-distance-min (function vector float (inline-array nav-vertex) float))
(define-extern nav-mesh-update-route-table (function nav-mesh int int uint uint))
(define-extern nav-mesh-lookup-route (function nav-mesh int int uint))
(define-extern nav-ray-test-local? (function nav-mesh nav-poly vector vector symbol))
(define-extern init-ray-local (function nav-ray nav-poly vector vector symbol))
(define-extern init-ray-dir-local (function nav-ray nav-poly vector vector float symbol))
(define-extern circle-triangle-intersection? (function vector float (inline-array nav-vertex) symbol))
(define-extern point-inside-rect? (function nav-node vector float symbol))
(define-extern recursive-inside-poly (function nav-mesh nav-node vector float int)) ;; unused
(define-extern point-inside-poly? (function nav-mesh uint vector float symbol))
(define-extern vu-point-triangle-intersection? (function vector vector vector vector symbol))
(define-extern pke-nav-hack (function none))
(define-extern debug-report-nav-stats (function none)) ;; empty stub
(define-extern inc-mod3 (function int int))
(define-extern dec-mod3 (function int int))
(define-extern circle-triangle-intersection-proc? (function vector float (inline-array nav-vertex) symbol))
(define-extern nav-ray-test (function nav-mesh nav-poly vector vector meters))
(define-extern clip-vector-to-halfspace! (function vector float float float float))
(define-extern add-nav-sphere (function nav-control vector none))
(define-extern add-collide-shape-spheres (function nav-control collide-shape vector none)) ;; unused
(define-extern circle-tangent-directions (function vector vector vector vector vector))
(define-extern find-closest-circle-ray-intersection (function vector vector float int (inline-array vector) int int)) ;; last int arg may be a float but...it does a logand with it
(define-extern sign-bit (function int int))
(define-extern compute-dir-parm (function vector vector vector float))
(define-extern debug-nav-validate-current-poly (function nav-mesh nav-poly vector symbol)) ;; unused
(define-extern start-collect-nav (function none))
(define-extern end-collect-nav (function none))
(define-extern nav-sphere-from-cam (function none))

;; - Unknowns

(define-extern *edge-vert0-table* (array int8))
(define-extern *edge-vert1-table* (array int8))
(define-extern *edge-mask-table* (array int8))
(define-extern *nav-patch-route-table* symbol)
(define-extern *nav-timer* stopwatch)
(define-extern *nav-update-route-table-ray-count* int)
(define-extern *nav-update-route-table-route-count* int)
(define-extern *debug-traverse* int)
(define-extern *debug-tests* int)
(define-extern *color-red* rgba)
(define-extern *color-blue* rgba)
(define-extern *color-green* rgba)
(define-extern *color-cyan* rgba)
(define-extern *color-yellow* rgba)
(define-extern *color-white* rgba)
(define-extern *travel-timer* stopwatch)
(define-extern *clip-for-spheres-timer* stopwatch)
(define-extern *find-poly-timer* stopwatch)
(define-extern *nav-timer-enable* symbol)
(define-extern *nav-triangle-test-count* int)
(define-extern *nav-last-triangle-test-count* int)
(define-extern *debug-output* symbol) ;; TODO - could be wrong
(define-extern *debug-nav* symbol)
(define-extern *debug-nav-ray* nav-ray)
(define-extern *debug-ray-offset* vector) ;; TODO - or some other 4 word type
(define-extern *debug-nav-travel* symbol) ;; TODO - ??
(define-extern *color-black* rgba)
(define-extern *color-gray* rgba)
(define-extern *color-magenta* rgba)
(define-extern *color-light-red* rgba)
(define-extern *color-light-green* rgba)
(define-extern *color-light-blue* rgba)
(define-extern *color-light-cyan* rgba)
(define-extern *color-light-magenta* rgba)
(define-extern *color-light-yellow* rgba)
(define-extern *color-dark-red* rgba)
(define-extern *color-dark-green* rgba)
(define-extern *color-dark-blue* rgba)
(define-extern *color-dark-cyan* rgba)
(define-extern *color-dark-magenta* rgba)
(define-extern *color-dark-yellow* rgba)
(define-extern *color-orange* rgba)
(define-extern *nav-one-third* vector)
(define-extern *debug-offset* vector) ;; TODO - or some other 4 word type
(define-extern *debug-ray-test* nav-ray) ;; TODO - ??
(define-extern *debug-ray-test-capture-mode* symbol) ;; TODO - ??
(define-extern *debug-ray-test-capture-output* symbol) ;; TODO - ??
(define-extern *test-ray-start-poly-id* int)
(define-extern *test-ray-src-pos* vector) ;; TODO - or some other 4 word type
(define-extern *test-ray-dest-pos* vector) ;; TODO - or some other 4 word type


;; ----------------------
;; File - effect-control
;; Source Path - engine/game/effect-control.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern sound-name-with-material (function symbol pat-surface string sound-name))

;; - Unknowns

(define-extern *footstep-surface* int)


;; ----------------------
;; File - water
;; Source Path - engine/gfx/water/water.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern splash-spawn (function basic basic int none))
(define-extern part-water-splash-callback (function part-tracker none))
(define-extern ocean-get-height (function vector float))
(define-extern birth-func-y->userdata (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern birth-func-ocean-height (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern check-water-level-drop (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-water-level-drop-and-die (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-water-level-above-and-die (function sparticle-system sparticle-cpuinfo vector none))
(define-extern water-vol-init-by-other (function entity-actor none :behavior water-vol))


;; ----------------------
;; File - collectables-part
;; Source Path - engine/game/collectables-part.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern eco-fadeout (function sparticle-system sparticle-cpuinfo none))
(define-extern eco-track-root-prim-fadeout (function sparticle-system sparticle-cpuinfo vector none))
(define-extern part-tracker-track-root (function sparticle-system sparticle-cpuinfo vector none))
(define-extern part-tracker-move-to-target (function part-tracker vector))
(define-extern part-tracker-track-target (function part-tracker vector))
(define-extern sparticle-track-root-money (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - collectables
;; Source Path - engine/game/collectables.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(defenum collectable-flags
  :bitfield #t
  :type uint32
  (trans 0)
  (fade 1)
  (can-collect 2)
  (fading 3)
  (suck 4)
  (ignore-blue 5)
  (anim 6)
  )

(deftype collectable (process-drawable)
  ((root-override   collide-shape-moving :score 100 :offset 112)
   (pickup-type     pickup-type          :offset-assert 176)
   (pickup-amount   float          :offset-assert 180)
   (notify-parent   basic          :offset-assert 184)
   (old-base        vector :inline :offset-assert 192)
   (base            vector :inline :offset-assert 208)
   (extra-trans     vector :inline :offset-assert 224)
   (jump-pos        vector :inline :offset-assert 240)
   (flags           collectable-flags  :offset-assert 256)
   (birth-time      time-frame          :offset-assert 264)
   (collect-timeout time-frame          :offset-assert 272)
   (fadeout-timeout time-frame          :offset-assert 280)
   (bob-offset      int64          :offset-assert 288)
   (bob-amount      float          :offset-assert 296)
   (pickup-handle   handle         :offset-assert 304) ;; not sure it's a handle
   (actor-pause     symbol         :offset-assert 312)
   )
  :heap-base #xd0
  :method-count-assert 22
  :size-assert         #x13c
  :flag-assert         #x1600d0013c
  (:methods
    (initialize (_type_) _type_ 20)
    (initialize-params (_type_ time-frame float) none 21)
    )
  )

(deftype eco-collectable (collectable)
  ((eco-effect          sparticle-launch-group          :offset-assert 316)
   (collect-effect      sparticle-launch-group          :offset-assert 320)
   (collect-effect2     sparticle-launch-group          :offset-assert 324)
   (collect-effect-time time-frame        :offset-assert 328)
   (respawn-delay       time-frame          :offset-assert 336)
   (sound-name          sound-spec     :offset-assert 344)
   (target              handle         :offset-assert 352)
   (suck-time           time-frame          :offset-assert 360)
   (suck-y-offset       float          :offset-assert 368)
   (speed               vector :inline :offset-assert 384)
   (movie-pos-index     int32          :offset-assert 400)
   )
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  (:methods
    (wait () _type_ :state 22) ;; state
    (pickup (object handle) _type_ :state 23) ;; state
    (die () _type_ :state 24) ;; state
    (jump () _type_ :state 25)
    (notice-blue (handle) _type_ :state 26) ;; state
    (initialize-effect (_type_ pickup-type) none 27)
    (initialize-eco (_type_ entity-actor pickup-type float) object 28)
    (animate (_type_) none 29)
    (blocked () _type_ :state 30)
    )
  )

(deftype eco (eco-collectable)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype eco-yellow (eco)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype eco-red (eco)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype eco-blue (eco)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype health (eco-collectable)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype eco-pill (eco-collectable)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype money (eco-collectable)
  ()
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x194
  :flag-assert         #x1f01300194
  )

(deftype fuel-cell (eco-collectable)
  ((victory-anim spool-anim :offset-assert 404)
   (state-object symbol :offset-assert 408)
   )
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x19c
  :flag-assert         #x1f0130019c
  (:states
    (fuel-cell-clone-anim handle)
    (fuel-cell-spline-slider handle float float))
  )

(deftype buzzer (eco-collectable)
  ((victory-anim spool-anim :offset-assert 404)
   )
  :heap-base #x130
  :method-count-assert 31
  :size-assert         #x198
  :flag-assert         #x1f01300198
  )

(declare-type vent process-drawable)
(deftype ecovalve (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (offset        vector :inline :offset-assert 176)
   (offset-target vector :inline :offset-assert 192)
   (block-func (function vent symbol) :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xd4
  :flag-assert         #x14007000d4
  (:states
    ecovalve-idle)
  )

(deftype vent (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (show-particles      symbol  :offset-assert 176)
   (collect-effect      sparticle-launch-group  :offset-assert 180)
   (collect-effect2     sparticle-launch-group  :offset-assert 184)
   (collect-effect-time time-frame :offset-assert 192)
   (blocker             entity-actor  :offset-assert 200)
   (block-func          (function vent symbol)  :offset-assert 204)
   (pickup-handle       handle :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15007000d8
  (:methods
    (initialize (_type_ entity-actor pickup-type) none 20)
    )
  (:states
    vent-blocked
    vent-wait-for-touch
    (vent-pickup handle)
    )
  )

(deftype ventyellow (vent)
  ()
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15007000d8
  )

(deftype ventred (vent)
  ()
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15007000d8
  )

(deftype ventblue (vent)
  ()
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15007000d8
  )

(deftype ecovent (vent)
  ()
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15007000d8
  )

;; - Functions

(define-extern vent-standard-event-handler (function process int symbol event-message-block object :behavior vent))
(define-extern ecovalve-init-by-other (function (function vent symbol) none :behavior ecovalve))
(define-extern birth-pickup-at-point (function vector pickup-type float symbol process-tree fact-info (pointer process) :behavior process))
(define-extern fuel-cell-pick-anim (function process-drawable spool-anim))
(define-extern othercam-init-by-other (function process-taskable symbol symbol symbol none :behavior othercam))
(define-extern fuel-cell-animate (function none :behavior fuel-cell))
(define-extern add-blue-motion (function symbol symbol symbol symbol symbol :behavior eco-collectable))
(define-extern check-blue-suck (function process-drawable none :behavior eco-collectable))
(define-extern initialize-eco-by-other (function vector vector fact-info none :behavior eco))
(define-extern add-blue-shake (function vector vector vector vector))
(define-extern money-init-by-other (function vector vector fact-info entity-actor none :behavior money))
(define-extern money-init-by-other-no-bob (function vector vector fact-info float entity-actor none :behavior money))
(define-extern fuel-cell-init-by-other (function vector vector fact-info entity-actor none :behavior fuel-cell))
(define-extern fuel-cell-init-as-clone (function handle int none :behavior fuel-cell))
(define-extern buzzer-init-by-other (function vector vector fact-info entity-actor none :behavior buzzer))

;; - Symbols

(define-extern *ecovalve-sg* skeleton-group)
(define-extern *eco-pill-count* int)
(define-extern *buzzer-sg* skeleton-group)
(define-extern *fuel-cell-tune-pos* vector)
(define-extern *fuel-cell-sg* skeleton-group)
(define-extern *money-sg* skeleton-group)


;; ----------------------
;; File - task-control
;; Source Path - engine/game/task/task-control.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern task-status->string (function task-status string))
(define-extern open-specific-task! (function game-task task-status game-task))
(define-extern task-exists? (function game-task task-status symbol))
(define-extern sages-kidnapped? (function symbol))

;; - Symbols

(define-extern *null-task-control* task-control)
(define-extern *task-controls* (array task-control))
(define-extern *assistant-tasks* task-control)
(define-extern *assistant-village2-tasks* task-control)
(define-extern *gambler-tasks* task-control)
(define-extern *geologist-tasks* task-control)
(define-extern *mayor-tasks* task-control)
(define-extern *sage-tasks* task-control)
(define-extern *sage-bluehut-tasks* task-control)
(define-extern *oracle-village1-tasks* task-control)
(define-extern *oracle-village2-tasks* task-control)
(define-extern *oracle-village3-tasks* task-control)
(define-extern *miners-tasks* task-control)
(define-extern *sage-villagec-tasks* task-control)
(define-extern *citb-greensage-tasks* task-control)
(define-extern *citb-bluesage-tasks* task-control)
(define-extern *citb-redsage-tasks* task-control)
(define-extern *citb-yellowsage-tasks* task-control)


;; ----------------------
;; File - process-taskable
;; Source Path - engine/game/task/process-taskable.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern othercam-calc (function float none))
(define-extern vector-for-ambient (function process-drawable vector vector))
(define-extern hide-hud (function none))
(define-extern hud-hidden? (function symbol))
(define-extern process-taskable-clean-up-after-talking (function none :behavior process-taskable))
(define-extern process-taskable-hide-exit (function symbol none :behavior process-taskable))
(define-extern process-taskable-play-anim-code (function art-joint-anim basic object :behavior process-taskable)) ;; second arg can either be spool-anim or art-joint-anim
(define-extern process-taskable-play-anim-trans (function none :behavior process-taskable))
(define-extern process-taskable-anim-loop (function none :behavior process-taskable))
(define-extern process-taskable-play-anim-enter (function symbol :behavior process-taskable))
(define-extern process-taskable-play-anim-exit (function none :behavior process-taskable))
(define-extern process-taskable-hide-handler (function process int symbol event-message-block none :behavior process-taskable))
(define-extern process-taskable-hide-enter (function int :behavior process-taskable))

;; - Unknowns



;; ----------------------
;; File - pov-camera
;; Source Path - engine/camera/pov-camera.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern pov-camera-play-and-reposition (function art-joint-anim vector float none :behavior pov-camera))


;; ----------------------
;; File - powerups
;; Source Path - engine/game/powerups.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern eco-blue-glow (function vector none))
(define-extern cloud-track (function process-tree process-tree (function vector none) time-frame time-frame time-frame none :behavior process))


;; ----------------------
;; File - crates
;; Source Path - engine/game/crates.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype crate-bank (basic)
  ((COLLIDE_YOFF           float  :offset-assert 4)
   (COLLIDE_RADIUS         float  :offset-assert 8)
   (DARKECO_EXPLODE_RADIUS float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype crate (process-drawable)
  ((root-override       collide-shape-moving :score 20 :offset 112)
   (smush               smush-control :inline :offset-assert 176)
   (base                vector        :inline :offset-assert 208)
   (look                symbol                :offset-assert 224)
   (defense             symbol                :offset-assert 228)
   (incomming-attack-id uint64                :offset-assert 232)
   (target              handle                :offset-assert 240)
   (child-count         int32                 :offset-assert 248)
   (victory-anim        spool-anim            :offset-assert 252)
   )
  :method-count-assert 30
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1e00900100
  ;; inherited inspect of process-drawable
  (:methods
    (wait ()  _type_ :state 20) ;; state
    (die (symbol int) _type_ :state 21)
    (special-contents-die () _type_ :state 22)
    (bounce-on ()  _type_ :state 23) ;; state
    (notice-blue (handle) _type_ :state 24)
    (params-init (_type_ entity) none 25)
    (art-init (_type_) crate 26)
    (params-set! (_type_ symbol symbol) none 27)
    (check-dead (_type_) none 28)
    (smush-update! (_type_) none 29)
    )
  )

(deftype barrel (crate)
  ()
  :method-count-assert 30
  :heap-base           #x90
  :size-assert         #x100
  :flag-assert         #x1e00900100
  )

(deftype bucket (crate)
  ()
  :method-count-assert 30
  :heap-base           #x90
  :size-assert         #x100
  :flag-assert         #x1e00900100
  )

(deftype crate-buzzer (crate)
  ()
  :method-count-assert 30
  :heap-base           #x90
  :size-assert         #x100
  :flag-assert         #x1e00900100
  )

(deftype pickup-spawner (crate)
  ((blocker entity-actor  :offset-assert 256)
   )
  :method-count-assert 30
  :heap-base           #xa0
  :size-assert         #x104
  :flag-assert         #x1e00a00104
  )

;; - Functions

(define-extern crate-post (function int :behavior crate))
(define-extern crate-standard-event-handler (function process int symbol event-message-block object :behavior crate))
(define-extern crate-init-by-other (function entity vector symbol none :behavior crate))

;; - Unknowns

(define-extern *crate-iron-sg* skeleton-group)
(define-extern *crate-steel-sg* skeleton-group)
(define-extern *crate-darkeco-sg* skeleton-group)
(define-extern *crate-barrel-sg* skeleton-group)
(define-extern *crate-bucket-sg* skeleton-group)
(define-extern *crate-wood-sg* skeleton-group)
(define-extern *CRATE-bank* crate-bank)


;; ----------------------
;; File - hud
;; Source Path - engine/ui/hud.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern send-hud-increment-event (function hud object))
(define-extern hud-init-by-other (function int none :behavior hud))

;; - Symbols


;; - Unknowns


(define-extern hud-collecting (state handle process-drawable))



;; ----------------------
;; File - hud-classes
;; Source Path - engine/ui/hud-classes.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype hud-pickups (hud)
  ()
  :method-count-assert 27
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1b00b00118
  )

(deftype hud-health (hud)
  ((scale float  :offset-assert 280)
   )
  :method-count-assert 27
  :size-assert         #x11c
  :heap-base           #xb0
  :flag-assert         #x1b00b0011c
  )

(deftype hud-money-all (hud)
  ((x-scale     float   :offset-assert 280)
   (y-scale     float   :offset-assert 284)
   (y-pos       int32   :offset-assert 288)
   (total-orbs  int32   :offset-assert 292)
   (level-index int32   :offset-assert 296)
   (start-time  time-frame  :offset-assert 304)
   )
  :method-count-assert 27
  :size-assert         #x138
  :heap-base           #xd0
  :flag-assert         #x1b00d00138
  )

(deftype hud-money (hud)
  ((x-scale float  :offset-assert 280)
   (y-scale float  :offset-assert 284)
   (y-pos   int32  :offset-assert 288)
   )
  :method-count-assert 27
  :size-assert         #x124
  :heap-base           #xc0
  :flag-assert         #x1b00c00124
  )

(deftype hud-fuel-cell (hud)
  ((scale-starburst-3-x float  :offset-assert 280)
   (scale-starburst-3-y float  :offset-assert 284)
   (scale-starburst-4-x float  :offset-assert 288)
   (scale-starburst-4-y float  :offset-assert 292)
   (scale-icon          float  :offset-assert 296)
   (scale-center        float  :offset-assert 300)
   (icon-pos-y          int32  :offset-assert 304)
   )
  :method-count-assert 27
  :size-assert         #x134
  :heap-base           #xd0
  :flag-assert         #x1b00d00134
  )

(deftype hud-buzzers (hud)
  ((scale         float  :offset-assert 280)
   (text-y-offset int32  :offset-assert 284)
   )
  :method-count-assert 27
  :size-assert         #x120
  :heap-base           #xb0
  :flag-assert         #x1b00b00120
  )

(deftype hud-power (hud)
  ((scale-timer   float  :offset-assert 280)
   (scale-backing float  :offset-assert 284)
   (scale-blue    float  :offset-assert 288)
   )
  :method-count-assert 27
  :size-assert         #x124
  :heap-base           #xc0
  :flag-assert         #x1b00c00124
  )

;; - Functions

(define-extern calculate-rotation-and-color-for-slice (function int float int int int hud-particle none))
(define-extern part-hud-health-01-func (function basic basic hud-particle none)) ;; TODO - i figured this out on another branch...all these particle functions get called by the particle system with the same beginning types iirc
(define-extern part-hud-health-02-func (function basic basic hud-particle none))
(define-extern part-hud-health-03-func (function basic basic hud-particle none))
(define-extern fuel-cell-hud-orbit-callback (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern fuel-cell-hud-starburst-3-callback (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern fuel-cell-hud-starburst-4-callback (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern fuel-cell-hud-center-callback (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-hud-buzzer-func (function basic basic hud-particle none))
(define-extern part-hud-eco-timer-01-func (function basic basic hud-particle none))
(define-extern part-hud-eco-timer-02-func (function basic basic hud-particle none))
(define-extern part-hud-eco-timer-03-func (function basic basic hud-particle none))
(define-extern part-hud-eco-timer-backing-func (function basic basic hud-particle none))
(define-extern part-hud-eco-timer-func (function basic basic hud-particle none))
(define-extern show-hud (function none))

;; - Unknowns

(define-extern *fuelcell-naked-sg* skeleton-group)


;; ----------------------
;; File - progress-static
;; Source Path - engine/ui/progress/progress-static.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Symbols

(define-extern *main-options* (array game-option))
(define-extern *title* (array game-option))
(define-extern *options* (array game-option))
(define-extern *main-options-demo* (array game-option))
(define-extern *main-options-demo-shared* (array game-option))
(define-extern *game-options* (array game-option))
(define-extern *game-options-japan* (array game-option))
(define-extern *game-options-demo* (array game-option))
(define-extern *graphic-options* (array game-option))
(define-extern *graphic-title-options-pal* (array game-option))
(define-extern *sound-options* (array game-option))
(define-extern *yes-no-options* (array game-option))
(define-extern *ok-options* (array game-option))
(define-extern *load-options* (array game-option))
(define-extern *save-options* (array game-option))
(define-extern *save-options-title* (array game-option))
(define-extern *options-remap* (array (array game-option)))
(define-extern *language-name-remap* (array text-id))
(define-extern *task-egg-starting-x* (array int32))
(define-extern *game-counts* game-count-info)
(define-extern *level-task-data-remap* (array int32))
(define-extern *level-task-data* (array level-tasks-info))


;; ----------------------
;; File - progress-part
;; Source Path - engine/ui/progress/progress-part.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern part-progress-hud-left-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-hud-right-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-hud-orb-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-hud-buzzer-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-hud-button-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-hud-tint-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-card-slot-01-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-card-slot-02-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-card-slot-03-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-card-slot-04-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-card-cell-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-progress-save-icon-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern fuel-cell-progress-hud-orbit-callback (function sparticle-system sparticle-cpuinfo matrix none))


;; ----------------------
;; File - progress-draw
;; Source Path - engine/ui/progress/progress-draw.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern adjust-pos (function int int int))
(define-extern draw-percent-bar (function int int float rgba none))
(define-extern print-language-name (function int font-context int symbol font-context))
(define-extern hide-progress-icons (function none))


;; ----------------------
;; File - progress
;; Source Path - engine/ui/progress/progress.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype progress-global-state (basic)
  ((aspect-ratio-choice   symbol  :offset-assert  4)
   (video-mode-choice     symbol  :offset-assert  8)
   (yes-no-choice         symbol  :offset-assert 12)
   (which                 int32   :offset-assert 16)
   (starting-state        progress-screen   :offset-assert 24)
   (last-slot-saved       int32   :offset-assert 32)
   (slider-backup         float   :offset-assert 36)
   (language-backup       language-enum   :offset-assert 40)
   (on-off-backup         symbol  :offset-assert 48)
   (center-x-backup       int32   :offset-assert 52)
   (center-y-backup       int32   :offset-assert 56)
   (aspect-ratio-backup   symbol  :offset-assert 60)
   (last-slider-sound     time-frame   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; - Functions

(define-extern get-next-task-up (function int int int))
(define-extern get-next-level-up (function int int))
(define-extern get-next-level-down (function int int))
(define-extern get-next-task-down (function int int int))
(define-extern make-levels-with-tasks-available-to-progress (function none))
(define-extern progress-init-by-other (function none :behavior progress))
(define-extern init-game-options (function progress none))
(define-extern make-current-level-available-to-progress (function none))

;; - Unknowns

(define-extern *progress-state* progress-global-state)
(define-extern *progress-save-info* mc-slot-info)
(define-extern *progress-stack* (pointer uint8))


;; ----------------------
;; File - credits
;; Source Path - engine/ui/credits.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern set-credits-font-color (function float none))
(define-extern draw-title-credits (function float none))
(define-extern draw-end-credits (function int symbol))

;; - Symbols

(define-extern *title-credits-scale* (array float))
(define-extern *title-credits-spacing* (array int32))


;; ----------------------
;; File - projectiles
;; Source Path - engine/game/projectiles.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype search-info (structure)
  ((point        vector :inline :offset-assert 0)
   (best-point   vector :inline :offset-assert 16)
   (match-handle handle         :offset-assert 32)
   (match        projectile          :offset-assert 40)
   (best         float          :offset-assert 44)
   (radius       float          :offset-assert 48)
   (rating       uint32         :offset-assert 52)
   (require      uint32         :offset-assert 56)
   (mask         uint32         :offset-assert 60)
   (rot-base     vector :inline :offset-assert 64)
   (rot-range    float          :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

;; - Functions

(define-extern projectile-collision-reaction (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags))
(define-extern projectile-update-velocity-space-wars (function projectile none))
(define-extern find-nearest-attackable (function vector float uint uint vector float projectile)) ;; Whatever te search returns (match from search-info)
(define-extern find-ground-and-draw-shadow (function vector vector float collide-kind process-drawable float float none))
(define-extern spawn-projectile-blue (function target none))

;; - Unknowns

(define-extern *search-info* search-info)


;; ----------------------
;; File - ocean
;; Source Path - engine/gfx/ocean/ocean.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ocean-interp-wave (function ocean-wave-info uint none)) ;; unconfirmed
(define-extern ocean-generate-verts (function (inline-array vector) ocean-wave-info none)) ;; unconfirmed - pointer is *ocean-verts*
(define-extern draw-ocean-texture (function dma-buffer (inline-array vector) symbol none)) ;; unconfirmed - pointer is *ocean-verts*
(define-extern ocean-init-buffer (function dma-buffer pointer))
(define-extern draw-ocean-far (function dma-buffer profile-frame))
(define-extern draw-ocean-mid (function dma-buffer none)) ; not confirmed
(define-extern ocean-end-buffer (function dma-buffer pointer))
(define-extern draw-ocean-near (function dma-buffer none))
(define-extern init-ocean-far-regs (function none))
(define-extern render-ocean-far (function dma-buffer int none))
(define-extern render-ocean-quad (function (inline-array ocean-vertex) dma-buffer symbol))
(define-extern draw-large-polygon-ocean (function none))
(define-extern draw-ocean (function none))
(define-extern update-ocean (function none))

;; - Symbols

(define-extern *ocean-map* ocean-map)

;; - Unknowns

(define-extern *swamp-low-ocean-marker* vector)


;; ----------------------
;; File - ocean-vu0
;; Source Path - engine/gfx/ocean/ocean-vu0.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Unknowns

(define-extern *ocean-vu0-work* ocean-vu0-work)
(define-extern ocean-vu0-block vu-function)


;; ----------------------
;; File - ocean-texture
;; Source Path - engine/gfx/ocean/ocean-texture.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ocean-texture-add-constants (function dma-buffer pointer))
(define-extern ocean-texture-add-envmap (function dma-buffer pointer))
(define-extern ocean-texture-add-verts (function dma-buffer (inline-array vector) pointer)) ;; pointer is *ocean-verts*
(define-extern ocean-texture-add-call-start (function dma-buffer none)) ;; unconfirmed
(define-extern ocean-texture-add-call-rest (function dma-buffer none)) ;; unconfirmed
(define-extern ocean-texture-add-verts-last (function dma-buffer (inline-array vector) (inline-array vector) pointer)) ;; pointer is *ocean-verts* and unconfirmed
(define-extern ocean-texture-add-call-done (function dma-buffer none)) ;; unconfirmed
(define-extern ocean-texture-setup-constants (function ocean-texture-constants none))

;; - Unknowns

(define-extern ocean-texture-vu1-block vu-function)
(define-extern *ocean-texture-work* ocean-texture-work)


;; ----------------------
;; File - ocean-mid
;; Source Path - engine/gfx/ocean/ocean-mid.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ocean-mid-add-constants (function dma-buffer none))
(define-extern ocean-mid-add-call (function dma-buffer int none))
(define-extern ocean-mid-add-upload (function dma-buffer int int int int float symbol))
(define-extern ocean-mid-add-call-flush (function dma-buffer uint none))
(define-extern draw-ocean-transition (function dma-buffer none))
(define-extern draw-ocean-mid-seams (function dma-buffer none))
(define-extern ocean-seams-add-constants (function dma-buffer none))
(define-extern ocean-mid-add-upload-top (function dma-buffer uint uint none))
(define-extern ocean-mid-add-upload-bottom (function dma-buffer uint uint none))
(define-extern ocean-mid-add-upload-middle (function dma-buffer uint uint none))
(define-extern ocean-mid-camera-masks-bit? (function uint uint symbol))
(define-extern ocean-mid-mask-ptrs-bit? (function uint uint symbol))
(define-extern ocean-mid-add-upload-table (function dma-buffer uint uint (pointer float) int symbol none))
(define-extern ocean-mid-camera-masks-set! (function uint uint symbol))
(define-extern ocean-mid-add-matrices (function dma-buffer vector none)) ;; not verified
(define-extern ocean-mid-check (function pointer int int vector symbol))
(define-extern ocean-matrix*! (function matrix matrix matrix matrix))
(define-extern ocean-mid-setup-constants (function ocean-mid-constants none))
(define-extern ocean-vector-matrix*! (function vector vector matrix vector))

;; - Unknowns

(define-extern ocean-mid-block vu-function)


;; ----------------------
;; File - ocean-transition
;; Source Path - engine/gfx/ocean/ocean-transition.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ocean-make-trans-camera-masks (function uint uint uint uint symbol))
(define-extern ocean-trans-add-upload-strip (function dma-buffer uint uint uint uint uint none))
(define-extern ocean-trans-add-constants (function dma-buffer pointer))
(define-extern draw-ocean-transition-seams (function dma-buffer symbol))
(define-extern ocean-trans-camera-masks-bit? (function uint uint symbol))
(define-extern ocean-trans-add-upload (function dma-buffer int int none))
(define-extern ocean-trans-mask-ptrs-bit? (function int int symbol))
(define-extern ocean-trans-add-upload-table (function dma-buffer int int (pointer float) int symbol none))
(define-extern ocean-transition-check (function ocean-trans-mask int int vector symbol))
(define-extern ocean-trans-mask-ptrs-set! (function int int symbol))


;; ----------------------
;; File - ocean-near
;; Source Path - engine/gfx/ocean/ocean-near.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern ocean-near-add-constants (function dma-buffer none))
(define-extern ocean-near-add-heights (function dma-buffer none))
(define-extern ocean-near-add-call (function dma-buffer int none))
(define-extern ocean-near-add-upload (function dma-buffer uint uint none))
(define-extern ocean-near-add-matrices (function dma-buffer vector none))
(define-extern ocean-near-setup-constants (function ocean-near-constants none))
(define-extern ocean-near-add-call-flush (function dma-buffer int none))

;; - Unknowns

(define-extern ocean-near-block vu-function)


;; ----------------------
;; File - shadow
;; Source Path - engine/gfx/shadow/shadow.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern compute-and-draw-shadow (function vector vector vector vector float float none))
(define-extern draw-shadow (function vector vector vector float float float none))
(define-extern add-fake-shadow-to-buffer (function vector vector float int none))
(define-extern swap-fake-shadow-buffers (function none))


;; ----------------------
;; File - eye
;; Source Path - engine/gfx/eye.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern convert-eye-data (function eye uint float))
(define-extern render-eyes (function dma-buffer eye-control int pointer))
(define-extern update-eyes (function none))

;; - Unknowns

(define-extern *eye-work* eye-work)


;; ----------------------
;; File - glist-h
;; Source Path - engine/util/glist-h.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype glst-node (structure)
  ((next glst-node  :offset-assert 0)
   (prev glst-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype glst-named-node (glst-node)
  ((privname string     :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype glst-list (structure)
  ((head     glst-node  :offset-assert 0)
   (tail     glst-node  :offset-assert 4)
   (tailpred glst-node  :offset-assert 8)
   (numelem  int32      :offset-assert 12)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern glst-next (function glst-node glst-node))
(define-extern glst-prev (function glst-node glst-node))
(define-extern glst-head (function glst-list glst-node))
(define-extern glst-tail (function glst-list glst-node))
(define-extern glst-end-of-list? (function glst-node symbol))
(define-extern glst-start-of-list? (function glst-node symbol))
(define-extern glst-empty? (function glst-list symbol))
(define-extern glst-node-name (function glst-named-node string))
(define-extern glst-set-name! (function glst-named-node string string))


;; ----------------------
;; File - glist
;; Source Path - engine/util/glist.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern glst-num-elements (function glst-list int))
(define-extern glst-insert-after (function glst-list glst-node glst-node glst-node))
(define-extern glst-insert-before (function glst-list glst-node glst-node glst-node))
(define-extern glst-remove (function glst-list glst-node glst-node))
(define-extern glst-remove-tail (function glst-list glst-node))
(define-extern glst-remove-head (function glst-list glst-node))
(define-extern glst-add-tail (function glst-list glst-node glst-node))
(define-extern glst-add-head (function glst-list glst-node glst-node))
(define-extern glst-init-list! (function glst-list glst-list))
(define-extern glst-find-node-by-name (function glst-list string glst-node))
(define-extern glst-get-node-by-index (function glst-list int glst-node))
(define-extern glst-length-of-longest-name (function glst-list int))
(define-extern glst-get-node-index (function glst-list glst-node int))


;; ----------------------
;; File - anim-tester
;; Source Path - engine/debug/anim-tester.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype list-control (structure)
  ((listfunc             (function int list-control symbol)  :offset-assert 0)
   (list-owner           uint32     :offset-assert 4)
   (top                  int32      :offset-assert 8)
   (left                 int32      :offset-assert 12)
   (list                 glst-list  :offset-assert 16)
   (the-node             glst-node  :offset-assert 20)
   (top-index            int32      :offset-assert 24)
   (the-index            int32      :offset-assert 28)
   (the-disp-line        int32      :offset-assert 32)
   (highlight-index      int32      :offset-assert 36)
   (current-index        int32      :offset-assert 40)
   (numlines             int32      :offset-assert 44)
   (lines-to-disp        int32      :offset-assert 48)
   (charswide            int32      :offset-assert 52)
   (highlight-disp-line  int32      :offset-assert 56)
   (field-id             int32      :offset-assert 60)
   (xpos                 int32      :offset-assert 64)
   (ypos                 int32      :offset-assert 68)
   (user-info            int32      :offset-assert 72)
   (user-info-u          uint32     :offset 72) ;; custom
   (return-int           int32      :offset-assert 76)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype list-field (structure)
  ((left   int32  :offset-assert 0)
   (width  int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype DISP_LIST-bank (basic)
  ((TV_SPACING     int32  :offset-assert 4)
   (BORDER_WIDTH   int32  :offset-assert 8)
   (BORDER_HEIGHT  int32  :offset-assert 12)
   (MAX_LINES      int32  :offset-assert 16)
   (CHAR_WIDTH     int32  :offset-assert 20)
   (INC_DELAY      int32  :offset-assert 24)
   (BORDER_LINES   int32  :offset-assert 28)
   (CXOFF          int32  :offset-assert 32)
   (CYOFF          int32  :offset-assert 36)
   (BXOFF          int32  :offset-assert 40)
   (BYOFF          int32  :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype anim-tester-bank (basic)
  ((ANIM_SPEED             float  :offset-assert 4)
   (BLEND                  float  :offset-assert 8)
   (OBJECT_LIST_X          int32  :offset-assert 12)
   (OBJECT_LIST_Y          int32  :offset-assert 16)
   (OBJECT_LIST_MIN_WIDTH  int32  :offset-assert 20)
   (ANIM_LIST_X            int32  :offset-assert 24)
   (ANIM_LIST_Y            int32  :offset-assert 28)
   (ANIM_LIST_MIN_WIDTH    int32  :offset-assert 32)
   (PICK_LIST_X            int32  :offset-assert 36)
   (PICK_LIST_Y            int32  :offset-assert 40)
   (PICK_LIST_MIN_WIDTH    int32  :offset-assert 44)
   (EDIT_LIST_X            int32  :offset-assert 48)
   (EDIT_LIST_Y            int32  :offset-assert 52)
   (EDIT_STATS_X           int32  :offset-assert 56)
   (EDIT_LIST_MIN_WIDTH    int32  :offset-assert 60)
   (EDIT_PICK_X            int32  :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(defenum anim-tester-flags
  :bitfield #t
  :type int32
  (fanimt0)
  (fanimt1)
  (fanimt2)
  (fanimt3)
  (fanimt4)
  (fanimt5)
  )

(deftype anim-tester (process-drawable)
  ((flags        anim-tester-flags     :offset-assert 176)
   (obj-list     glst-list     :inline :offset-assert 180)
   (current-obj  string                :offset-assert 196)
   (speed        int32                 :offset-assert 200)
   (list-con     list-control  :inline :offset-assert 204)
   (pick-con     list-control  :inline :offset-assert 284)
   (item-field   int64                 :offset-assert 368)
   (inc-delay    int32                 :offset-assert 376)
   (inc-timer    int32                 :offset-assert 380)
   (edit-mode    int32                 :offset-assert 384)
   (old-mode     int32                 :offset-assert 388)
   (anim-speed   float                 :offset-assert 392)
   (anim-gspeed  float                 :offset-assert 396)
   (anim-first   float                 :offset-assert 400)
   (anim-last    float                 :offset-assert 404)
   )
  :method-count-assert 20
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x1401300198
  (:states
    anim-tester-process
    )
  )

(deftype anim-test-obj (glst-named-node)
  ((obj-art-group  art-group          :offset-assert 12)
   (seq-list       glst-list  :inline :offset-assert 16)
   (flags          int32              :offset-assert 32)
   (mesh-geo       merc-ctrl          :offset-assert 36)
   (joint-geo      art-joint-geo      :offset-assert 40)
   (list-con       list-control :inline :offset-assert 44)
   (parent         uint32             :offset-assert 124)
   (anim-index     int32              :offset-assert 128)
   (anim-hindex    int32              :offset-assert 132)
   (seq-index      int32              :offset-assert 136)
   (seq-hindex     int32              :offset-assert 140)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  (:methods
    (new (symbol type int string basic) _type_ 0)
    )
  )

(deftype anim-test-sequence (glst-named-node)
  ((item-list     glst-list     :inline :offset-assert 12)
   (playing-item  int32                 :offset-assert 28)
   (flags         int32                 :offset-assert 32)
   (list-con      list-control  :inline :offset-assert 36)
   (parent        anim-test-obj         :offset-assert 116)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  (:methods
    (new (symbol type int string) _type_ 0)
    )
  )

(deftype anim-test-seq-item (glst-named-node)
  ((speed         int32  :offset-assert 12)
   (blend         int32  :offset-assert 16)
   (first-frame   float  :offset-assert 20)
   (last-frame    float  :offset-assert 24)
   (num-frames    float  :offset-assert 28)
   (artist-base   float  :offset-assert 32)
   (flags         int32  :offset-assert 36)
   (parent        anim-test-sequence  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  (:methods
    (new (symbol type int string) _type_ 0)
    )
  )

;; - Functions

(define-extern anim-test-edit-sequence-list-handler (function int list-control symbol))
(define-extern anim-test-seq-mark-as-edited (function anim-test-sequence none))
(define-extern anim-tester-start (function symbol))
(define-extern anim-tester-add-newobj (function anim-tester string art-group object))
(define-extern anim-tester-stop (function symbol))
(define-extern initialize-anim-tester (function none :behavior anim-tester))
(define-extern anim-tester-save-object-seqs (function anim-test-obj file-stream))
(define-extern anim-tester-num-print (function basic float none))
(define-extern anim-test-obj-list-handler (function int list-control symbol))
(define-extern anim-tester-standard-event-handler (function process int symbol event-message-block object :behavior anim-tester))
(define-extern anim-tester-reset (function none :behavior anim-tester))
(define-extern anim-tester-get-playing-item (function anim-test-sequence anim-test-seq-item))
(define-extern anim-tester-update-anim-info (function anim-test-seq-item float :behavior anim-tester))
(define-extern anim-tester-interface (function none :behavior anim-tester))
(define-extern display-list-control (function list-control none))
(define-extern anim-test-anim-list-handler (function int list-control symbol))
(define-extern anim-test-sequence-list-handler (function int list-control symbol))
(define-extern anim-tester-disp-frame-num (function string float float font-context pointer))
(define-extern anim-test-seq-item-copy! (function anim-test-seq-item anim-test-seq-item anim-test-sequence))
(define-extern anim-tester-adjust-frame (function float float float))
(define-extern anim-test-edit-seq-insert-item (function anim-test-seq-item anim-test-sequence none))
(define-extern anim-tester-pick-item-setup (function anim-test-seq-item anim-test-sequence none))
(define-extern anim-tester-save-all-objects (function anim-tester symbol))
(define-extern anim-tester-real-post (function none :behavior anim-tester))
(define-extern anim-test-obj-item-valid? (function anim-test-obj anim-test-seq-item symbol))
(define-extern anim-test-obj-init (function anim-test-obj list-control none))
(define-extern anim-test-sequence-init (function anim-test-sequence anim-test-obj none))
(define-extern anim-test-obj-remove-invalid (function anim-test-obj symbol))
(define-extern anim-tester-post (function none :behavior anim-tester))
(define-extern anim-tester-string-get-frame!! (function list-field string symbol))
(define-extern anim-tester-load-object-seqs (function anim-tester string symbol))
(define-extern anim-tester-add-object (function string none))
(define-extern anim-tester-set-name (function string object))
(define-extern anim-tester-add-sequence (function string none))

;; - Unknowns

(define-extern *anim-tester* (pointer anim-tester))
(define-extern *ANIM_TESTER-bank* anim-tester-bank)
(define-extern anim-test-field-highlight-lw (inline-array list-field))
(define-extern *DISP_LIST-bank* DISP_LIST-bank)
(define-extern *debug-menu-context* debug-menu-context)


;; ----------------------
;; File - viewer
;; Source Path - engine/debug/viewer.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype viewer (process-drawable)
  ((janim art-joint-anim  :offset-assert 176)
   )
  (:states
    viewer-process
    )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  )

;; - Functions

(define-extern init-viewer-for-other (function string vector none :behavior viewer))
(define-extern actor-get-arg! (function string string string symbol))
(define-extern init-viewer (function string object :behavior viewer))
(define-extern art-part-name (function string string))
(define-extern add-a-bunch (function string int int float symbol))

;; - Unknowns

(define-extern *viewer* viewer)
(define-extern viewer-ja-name string)
(define-extern viewer-geo-name string)
(define-extern *viewer-sg* skeleton-group)
(define-extern viewer-string string)
(define-extern viewer-process (state viewer))


;; ----------------------
;; File - part-tester
;; Source Path - engine/debug/part-tester.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Types

(deftype part-tester (process)
  ((root        trsqv    :offset-assert 112)
   (part        sparticle-launch-control    :offset-assert 116)
   (old-group   sparticle-launch-group    :offset-assert 120))
  :method-count-assert 14
  :size-assert         #x7c
  :heap-base           #x100
  :flag-assert         #xe0100007c
  )

;; - Functions

(define-extern part-tester-init-by-other (function vector none :behavior process-drawable))
(define-extern start-part (function none))

;; - Unknowns

(define-extern *debug-part-dead-pool* dead-pool)
(define-extern *part-tester* part-tester)
(define-extern *part-tester-name* string)
(define-extern part-tester-idle (state part-tester))


;; ----------------------
;; File - default-menu
;; Source Path - engine/debug/default-menu.gc
;; Containing DGOs - ['GAME', 'ENGINE']
;; Version - 3

;; - Functions

(define-extern build-continue-menu (function debug-menu game-info debug-menu-context))
(define-extern debug-menu-make-camera-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern debug-menu-make-shader-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern debug-menu-make-instance-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern debug-menu-make-task-menu (function debug-menu-context debug-menu-item-submenu))
(define-extern dm-current-continue (function string debug-menu-msg symbol))
(define-extern dm-task-get-money (function int debug-menu-msg symbol))
(define-extern dm-levitator-ready (function int debug-menu-msg symbol))
(define-extern dm-lavabike-ready (function int debug-menu-msg symbol))
(define-extern dm-give-all-cells (function int debug-menu-msg symbol))
(define-extern debug-menu-make-task-unknown-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-hint-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-introduction-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-reminder-a-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-reminder-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-reward-speech-menu (function debug-menu debug-menu-context none))
(define-extern debug-menu-make-task-need-resolution-menu (function debug-menu debug-menu-context none))
(define-extern dm-give-cell (function game-task none))
(define-extern build-instance-list (function object none)) ;; TODO - drawable types aren't complete
(define-extern dm-edit-instance-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-boolean-toggle-pick-func (function (pointer symbol) debug-menu-msg symbol))
(define-extern build-shader-list (function none))
(define-extern all-texture-tweak-adjust (function texture-page-dir float none)) ;; TODO - texture related types
(define-extern debug-menu-make-camera-mode-menu (function debug-menu debug-menu none))
(define-extern dm-cam-externalize (function symbol debug-menu-msg symbol))
(define-extern dm-cam-render-float (function int debug-menu-msg float float float))
(define-extern dm-cam-settings-func (function int debug-menu-msg symbol))
(define-extern dm-cam-settings-func-int (function int debug-menu-msg int int int))
(define-extern debug-create-cam-restore (function none))
(define-extern dm-cam-mode-func (function (state camera-slave) debug-menu-msg object))
(define-extern dm-instance-pick-func (function string debug-menu-msg basic))
(define-extern dm-enable-instance-func (function string debug-menu-msg symbol))
(define-extern dm-shader-pick-func (function texture-id debug-menu-msg symbol))
(define-extern debug-menu-node<? (function debug-menu-node debug-menu-node symbol))
(define-extern dm-subdiv-float (function symbol debug-menu-msg float float float))
(define-extern dm-subdiv-int (function symbol debug-menu-msg int int int))
(define-extern dm-setting-language (function int debug-menu-msg symbol))
(define-extern dm-subdiv-draw-func (function int debug-menu-msg symbol))
(define-extern dm-ocean-subdiv-draw-func (function int debug-menu-msg symbol))
(define-extern dm-time-of-day-func (function int debug-menu-msg symbol))
(define-extern dm-time-of-day-func2 (function (pointer symbol) debug-menu-msg symbol)) ;; TODO
(define-extern dm-time-of-day-pick-func (function symbol debug-menu-msg none)) ;; TODO - confirm time-of-day::time-of-day-setup
(define-extern dm-actor-marks-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-compact-actor-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-actor-vis-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-game-mode-pick-func (function symbol debug-menu-msg symbol))
(define-extern dm-vu1-user-toggle-pick-func (function vu1-renderer-mask debug-menu-msg symbol))
(define-extern dm-vu1-user-set-pick-func (function vu1-renderer-mask debug-menu-msg symbol))
(define-extern dm-texture-user-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-texture-user-set-pick-func (function int debug-menu-msg symbol))
(define-extern dm-strip-lines-toggle-pick-func (function int debug-menu-msg symbol))
(define-extern dm-strip-lines-set-pick-func (function int debug-menu-msg symbol))
(define-extern dm-task-unknown (function int debug-menu-msg symbol))
(define-extern dm-task-hint (function int debug-menu-msg symbol))
(define-extern dm-task-introduction (function int debug-menu-msg symbol))
(define-extern dm-task-reminder-a (function int debug-menu-msg symbol))
(define-extern dm-task-reminder (function int debug-menu-msg symbol))
(define-extern dm-task-reward-speech (function int debug-menu-msg symbol))
(define-extern dm-task-resolution (function int debug-menu-msg symbol))
(define-extern dm-anim-tester-flag-func (function int debug-menu-msg symbol))
(define-extern dm-anim-tester-func (function int debug-menu-msg none))
(define-extern debug-menu-context-make-default-menus (function debug-menu-context debug-menu-context))
(define-extern popup-menu-context-make-default-menus (function debug-menu-context debug-menu-context))

;; - Unknowns

(define-extern *popup-menu-context* debug-menu-context)
(define-extern *instance-shrub-menu* debug-menu)
(define-extern *instance-tie-menu* debug-menu)
(define-extern *enable-instance-tie-menu* debug-menu)
(define-extern *shader-pick-menu* debug-menu)
(define-extern *dm-cam-mode-interpolation* int)


;; ----------------------
;; File - texture-upload
;; Source Path - levels/common/texture-upload.gc
;; Containing DGOs - ['GAME', 'ART']
;; Version - 3

;; - Symbols

(define-extern *ocean-texture* texture)


;; ----------------------
;; File - rigid-body-h
;; Source Path - levels/common/rigid-body-h.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype rigid-body (structure)
  ((mass                        float              :offset-assert 0)
   (inv-mass                    float              :offset-assert 4)
   (lin-momentum-damping-factor float              :offset-assert 8)
   (ang-momentum-damping-factor float              :offset-assert 12)
   (inertial-tensor             matrix     :inline :offset-assert 16)
   (inv-inertial-tensor         matrix     :inline :offset-assert 80)
   (cm-offset-joint             vector     :inline :offset-assert 144)
   (position                    vector     :inline :offset-assert 160)
   (rotation                    quaternion :inline :offset-assert 176)
   (lin-momentum                vector     :inline :offset-assert 192)
   (ang-momentum                vector     :inline :offset-assert 208)
   (lin-velocity                vector     :inline :offset-assert 224)
   (ang-velocity                vector     :inline :offset-assert 240)
   (inv-i-world                 matrix     :inline :offset-assert 256)
   (matrix                      matrix     :inline :offset-assert 320)
   (force                       vector     :inline :offset-assert 384)
   (torque                      vector     :inline :offset-assert 400)
   (max-ang-momentum            float              :offset-assert 416)
   (max-ang-velocity            float              :offset-assert 420)
   )
  :method-count-assert 23
  :size-assert         #x1a8
  :flag-assert         #x17000001a8
  (:methods
    (rigid-body-method-9 (_type_ float float float float) none 9)
    (rigid-body-method-10 (_type_ float) none 10)
    (clear-force-torque! (_type_) none 11)
    (clear-momentum! (_type_) none 12)
    (rigid-body-method-13 (_type_ vector vector) none 13)
    (rigid-body-method-14 (_type_ vector vector) none 14)
    (rigid-body-method-15 (_type_ vector) none 15)
    (rigid-body-method-16 (_type_ vector vector float) none 16)
    (rigid-body-method-17 (_type_ vector vector) vector 17)
    (rigid-body-method-18 (_type_ vector) vector 18)
    (print-stats (_type_) none 19)
    (rigid-body-method-20 (_type_) none 20)
    (rigid-body-method-21 (_type_) none 21)
    (rigid-body-method-22 (_type_ vector quaternion float float) none 22)
    )
  )

(deftype rigid-body-control-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (world-pos vector :inline :offset-assert 16)
   (velocity  vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;; ----------------------
;; File - water-anim
;; Source Path - levels/common/water-anim.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1', 'WATER-AN']
;; Version - 3

;; - Types

(deftype water-anim (water-vol)
  ((ppointer-water-anim (pointer water-anim)  :score 100 :offset 24)
   (look                int32  :offset-assert 212)
   (play-ambient-sound? symbol  :offset-assert 216)
   )
  :method-count-assert 30
  :heap-base           #x70
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  )

(deftype water-anim-look (structure)
  ((skel-group         symbol  :offset-assert 0)
   (anim               int32  :offset-assert 4)
   (ambient-sound-spec sound-spec  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; - Unknowns

(define-extern *water-anim-look* (array water-anim-look))
(define-extern *water-anim-sunken-dark-eco-qbert-sg* skeleton-group)
(define-extern *water-anim-sunken-dark-eco-platform-room-sg* skeleton-group)
(define-extern *water-anim-sunken-dark-eco-helix-room-sg* skeleton-group)
(define-extern *water-anim-sunken-big-room-sg* skeleton-group)
(define-extern *water-anim-sunken-first-room-from-entrance-sg* skeleton-group)
(define-extern *water-anim-sunken-qbert-room-sg* skeleton-group)
(define-extern *water-anim-sunken-first-right-branch-sg* skeleton-group)
(define-extern *water-anim-sunken-circular-with-bullys-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-with-one-whirlpool-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-with-three-whirlpools-sg* skeleton-group)
(define-extern *water-anim-sunken-start-of-helix-slide-sg* skeleton-group)
(define-extern *water-anim-sunken-room-above-exit-chamber-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-before-big-room-sg* skeleton-group)
(define-extern *water-anim-sunken-short-piece-sg* skeleton-group)
(define-extern *water-anim-sunken-big-room-upper-water-sg* skeleton-group)
(define-extern *water-anim-maincave-center-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-lower-right-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-mid-right-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-lower-left-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-mid-left-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-water-with-crystal-sg* skeleton-group)
(define-extern *water-anim-robocave-main-pool-sg* skeleton-group)
(define-extern *water-anim-misty-mud-by-arena-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skeleton-sg* skeleton-group)
(define-extern *water-anim-misty-mud-behind-skeleton-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skull-back-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skull-front-sg* skeleton-group)
(define-extern *water-anim-misty-mud-other-near-skull-sg* skeleton-group)
(define-extern *water-anim-misty-mud-near-skull-sg* skeleton-group)
(define-extern *water-anim-misty-mud-under-spine-sg* skeleton-group)
(define-extern *water-anim-misty-mud-by-dock-sg* skeleton-group)
(define-extern *water-anim-misty-mud-island-near-dock-sg* skeleton-group)
(define-extern *water-anim-misty-mud-lonely-island-sg* skeleton-group)
(define-extern *water-anim-misty-dark-eco-pool-sg* skeleton-group)
(define-extern *water-anim-ogre-lava-sg* skeleton-group)
(define-extern *water-anim-jungle-river-sg* skeleton-group)
(define-extern *water-anim-village3-lava-sg* skeleton-group)
(define-extern *water-anim-training-lake-sg* skeleton-group)
(define-extern *water-anim-darkcave-water-with-crystal-sg* skeleton-group)
(define-extern *water-anim-rolling-water-back-sg* skeleton-group)
(define-extern *water-anim-rolling-water-front-sg* skeleton-group)
(define-extern *water-anim-finalboss-dark-eco-pool-sg* skeleton-group)
(define-extern *water-anim-lavatube-energy-lava-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-sg* skeleton-group)
(define-extern *water-anim-village1-fountain-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-mid-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-top-sg* skeleton-group)
(define-extern *water-anim-village2-bucket-sg* skeleton-group)


;; ----------------------
;; File - dark-eco-pool
;; Source Path - levels/common/dark-eco-pool.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype dark-eco-pool (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  ;;  not enough basic ops
  )

;; - Unknowns

(define-extern ripple-for-dark-eco-pool ripple-wave-set)
(define-extern ripple-for-misty-dark-eco-pool ripple-wave-set)
(define-extern ripple-for-maincave-dark-eco-pool ripple-wave-set)
(define-extern ripple-for-sunken-dark-eco-helix-room ripple-wave-set)
(define-extern ripple-for-finalboss-dark-eco-pool ripple-wave-set)


;; ----------------------
;; File - rigid-body
;; Source Path - levels/common/rigid-body.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype rigid-body-platform-constants (structure)
  ((drag-factor           float   :offset-assert 0)
   (buoyancy-factor       float   :offset-assert 4)
   (max-buoyancy-depth    meters  :offset-assert 8)
   (gravity-factor        float   :offset-assert 12)
   (gravity               meters  :offset-assert 16)
   (player-weight         meters  :offset-assert 20)
   (player-bonk-factor    float   :offset-assert 24)
   (player-dive-factor    float   :offset-assert 28)
   (player-force-distance meters  :offset-assert 32)
   (player-force-clamp    meters  :offset-assert 36)
   (player-force-timeout  time-frame  :offset-assert 40)
   (explosion-force       meters  :offset-assert 48)
   (linear-damping        float   :offset-assert 52)
   (angular-damping       float   :offset-assert 56)
   (control-point-count   int32   :offset-assert 60)
   (mass                  float   :offset-assert 64)
   (inertial-tensor-x     meters  :offset-assert 68)
   (inertial-tensor-y     meters  :offset-assert 72)
   (inertial-tensor-z     meters  :offset-assert 76)
   (cm-joint-x            meters  :offset-assert 80)
   (cm-joint-y            meters  :offset-assert 84)
   (cm-joint-z            meters  :offset-assert 88)
   (idle-distance         meters  :offset-assert 92)
   (platform              symbol   :offset-assert 96)
   (sound-name            string   :offset-assert 100)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(deftype rigid-body-control-point-inline-array (inline-array-class)
  ((data  rigid-body-control-point  :inline :dynamic :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rigid-body-platform (process-drawable)
  ((root-overlay          collide-shape-moving                  :score 100 :offset 112)
   (info                  rigid-body-platform-constants         :offset-assert 176)
   (rbody                 rigid-body                    :inline :offset-assert 192)
   (control-point-array   rigid-body-control-point-inline-array      :offset-assert 616)
   (player-velocity       vector                        :inline :offset-assert 624)
   (player-velocity-prev  vector                        :inline :offset-assert 640)
   (player-force-position vector                        :inline :offset-assert 656)
   (player-force          vector                        :inline :offset-assert 672)
   (sim-time-remaining    float                                 :offset-assert 688)
   (float-height-offset   float                                 :offset-assert 692)
   (player-attack-id      int32                                 :offset-assert 696)
   (player-bonk-timeout   time-frame                                 :offset-assert 704)
   (water-anim            water-anim                            :offset-assert 712)
   (player-contact        basic                                 :offset-assert 716) ; not a basic
   (player-impulse        collide-shape-prim-mesh               :offset-assert 720)
   )
  :method-count-assert 35
  :heap-base           #x270
  :size-assert         #x2d4
  :flag-assert         #x23027002d4
  ;; inherited inspect of process-drawable
  (:methods
    (rigid-body-platform-idle () _type_ :state 20)
    (rigid-body-platform-float () _type_ :state 21)
    (rigid-body-platform-method-22 (_type_ vector float) float 22)
    (rigid-body-platform-method-23 (_type_ float) none 23)
    (rigid-body-platform-method-24 (_type_ rigid-body-control-point float) none 24)
    (rigid-body-platform-method-25 (_type_) none 25)
    (rigid-body-platform-method-26 (_type_) none 26)
    (rigid-body-platform-method-27 (_type_ vector) none 27)
    (rigid-body-platform-method-28 (_type_)  none 28)
    (rigid-body-platform-method-29 (_type_ rigid-body-platform-constants) none 29)
    (rigid-body-platform-method-30 (_type_) none 30)
    (rigid-body-platform-method-31 (_type_) none 31)
    (rigid-body-platform-method-32 (_type_) sound-id 32)
    (rigid-body-platform-method-33 (_type_) object 33)
    (rigid-body-platform-method-34 (_type_) none 34)
    )
  )


;; - Functions

(define-extern matrix-3x3-triple-transpose-product (function matrix matrix matrix matrix))
(define-extern rigid-body-platform-event-handler (function process int symbol event-message-block vector :behavior rigid-body-platform))
(define-extern rigid-body-platform-post (function int :behavior rigid-body-platform))

;; - Unknowns

(define-extern *rigid-body-platform-constants* rigid-body-platform-constants)


;; ----------------------
;; File - nav-enemy-h
;; Source Path - levels/common/nav-enemy-h.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype nav-enemy-info (basic)
  ((idle-anim                 int32     :offset-assert 4)
   (walk-anim                 int32     :offset-assert 8)
   (turn-anim                 int32     :offset-assert 12)
   (notice-anim               int32     :offset-assert 16)
   (run-anim                  int32     :offset-assert 20)
   (jump-anim                 int32     :offset-assert 24)
   (jump-land-anim            int32     :offset-assert 28)
   (victory-anim              int32     :offset-assert 32)
   (taunt-anim                int32     :offset-assert 36)
   (die-anim                  int32     :offset-assert 40)
   (neck-joint                int32     :offset-assert 44)
   (player-look-at-joint      int32     :offset-assert 48)
   (run-travel-speed          meters    :offset-assert 52)
   (run-rotate-speed          degrees   :offset-assert 56)
   (run-acceleration          meters    :offset-assert 60)
   (run-turn-time             seconds   :offset-assert 64)
   (walk-travel-speed         meters    :offset-assert 72)
   (walk-rotate-speed         degrees   :offset-assert 76)
   (walk-acceleration         meters    :offset-assert 80)
   (walk-turn-time            seconds   :offset-assert 88)
   (attack-shove-back         meters    :offset-assert 96)
   (attack-shove-up           meters    :offset-assert 100)
   (shadow-size               meters    :offset-assert 104)
   (notice-nav-radius         meters    :offset-assert 108)
   (nav-nearest-y-threshold   meters    :offset-assert 112)
   (notice-distance           meters    :offset-assert 116)
   (proximity-notice-distance meters    :offset-assert 120)
   (stop-chase-distance       meters    :offset-assert 124)
   (frustration-distance      meters    :offset-assert 128)
   (frustration-time          time-frame    :offset-assert 136)
   (die-anim-hold-frame       float     :offset-assert 144)
   (jump-anim-start-frame     float     :offset-assert 148)
   (jump-land-anim-end-frame  float     :offset-assert 152)
   (jump-height-min           meters    :offset-assert 156)
   (jump-height-factor        float     :offset-assert 160)
   (jump-start-anim-speed     float     :offset-assert 164)
   (shadow-max-y              meters    :offset-assert 168)
   (shadow-min-y              meters    :offset-assert 172)
   (shadow-locus-dist         meters    :offset-assert 176)
   (use-align                 symbol     :offset-assert 180)
   (draw-shadow               symbol     :offset-assert 184)
   (move-to-ground            symbol     :offset-assert 188)
   (hover-if-no-ground        symbol     :offset-assert 192)
   (use-momentum              symbol     :offset-assert 196)
   (use-flee                  symbol     :offset-assert 200)
   (use-proximity-notice      symbol     :offset-assert 204)
   (use-jump-blocked          symbol     :offset-assert 208)
   (use-jump-patrol           symbol     :offset-assert 212)
   (gnd-collide-with          collide-kind    :offset-assert 216)
   (debug-draw-neck           symbol     :offset-assert 224)
   (debug-draw-jump           symbol     :offset-assert 228)
   )
  :method-count-assert 9
  :size-assert         #xe8
  :flag-assert         #x9000000e8
  )

(defenum nav-enemy-flags
  :bitfield #t
  :type uint32
  (navenmf0 0)
  (navenmf1 1)
  (navenmf2 2)
  (enable-rotate 3)
  (enable-travel 4)
  (navenmf5 5)
  (navenmf6 6)
  (navenmf7 7)
  (navenmf8 8)
  (standing-jump 9)
  (drop-jump 10)
  (navenmf11 11)
  (navenmf12 12)
  (navenmf13 13)
  (navenmf14 14)
  (navenmf15 15)
  (navenmf16 16)
  (navenmf17 17)
  (navenmf18 18)
  (navenmf19 19)
  (navenmf20 20)
  (navenmf21 21)
  (navenmf22 22)
  (navenmf23 23)
  (navenmf24 24)
  (navenmf25 25)
  (navenmf26 26)
  (navenmf27 27)
  (navenmf28 28)
  (navenmf29 29)
  (navenmf30 30)
  (navenmf31 31)
  )

(deftype nav-enemy (process-drawable)
  ((collide-info        collide-shape-moving  :score 100 :offset 112)
   (enemy-info          fact-info-enemy       :score 100 :offset 144)
   (hit-from-dir        vector     :inline :offset-assert 176)
   (event-param-point   vector     :inline :offset-assert 192)
   (frustration-point   vector     :inline :offset-assert 208)
   (jump-dest           vector     :inline :offset-assert 224)
   (jump-trajectory     trajectory :inline :offset-assert 240)
   (jump-time           time-frame         :offset-assert 280)
   (nav-info            nav-enemy-info     :offset-assert 288)
   (target-speed        float              :offset-assert 292)
   (momentum-speed      float              :offset-assert 296)
   (acceleration        float              :offset-assert 300)
   (rotate-speed        float              :offset-assert 304)
   (turn-time           time-frame         :offset-assert 312)
   (frustration-time    time-frame         :offset-assert 320)
   (speed-scale         float              :offset-assert 328)
   (neck                joint-mod          :offset-assert 332)
   (reaction-time       time-frame         :offset-assert 336)
   (notice-time         time-frame         :offset-assert 344)
   (state-timeout       time-frame         :offset-assert 352)
   (free-time           time-frame         :offset-assert 360)
   (touch-time          time-frame         :offset-assert 368)
   (nav-enemy-flags     nav-enemy-flags    :offset-assert 376)
   (incomming-attack-id handle             :offset-assert 384)
   (jump-return-state   (state process)    :offset-assert 392)
   (rand-gen            random-generator              :offset-assert 396)
   )
  :heap-base #x120
  :method-count-assert 76
  :size-assert         #x190
  :flag-assert         #x4c01200190
  (:methods
    (nav-enemy-attack () _type_ :state 20)
    (nav-enemy-chase () _type_ :state 21)
    (nav-enemy-flee () _type_ :state 22)
    (nav-enemy-die () _type_ :state 23)
    (nav-enemy-fuel-cell () _type_ :state 24)
    (nav-enemy-give-up () _type_ :state 25)
    (nav-enemy-jump () _type_ :state 26)
    (nav-enemy-jump-land () _type_ :state 27)
    (nav-enemy-idle () _type_ :state 28)
    (nav-enemy-notice () _type_ :state 29)
    (nav-enemy-patrol () _type_ :state 30)
    (nav-enemy-stare () _type_ :state 31)
    (nav-enemy-stop-chase () _type_ :state 32)
    (nav-enemy-victory () _type_ :state 33)
    (nav-enemy-method-34 (_type_) none 34)
    (nav-enemy-wait-for-cue () _type_ :state 35)
    (nav-enemy-jump-to-point () _type_ :state 36)
    (nav-enemy-method-37 (_type_) none 37)
    (nav-enemy-method-38 (_type_) none 38)
    (common-post (_type_) none 39)
    (nav-enemy-method-40 (_type_) none 40)
    (nav-enemy-method-41 (_type_) none 41)
    (new-patrol-point! (_type_) int 42)
    (attack-handler (_type_ process event-message-block) object 43)
    (touch-handler (_type_ process event-message-block) object 44)
    (init-defaults! (_type_ nav-enemy-info) none 45)
    (target-in-range? (_type_ float) basic 46)
    (initialize-collision (_type_) none 47)
    (nav-enemy-method-48 (_type_) none 48) ;; object past to method 60 -- see citb-bunny
    (init-jm! (_type_ nav-enemy-info) float 49)
    (nav-enemy-method-50 (_type_ vector) symbol 50)
    (nav-enemy-method-51 (_type_) none 51) ;; ret - float | symbol
    (nav-enemy-method-52 (_type_ vector) symbol 52) ;; ret - symbol | vector
    (nav-enemy-method-53 (_type_) symbol 53) ;; ret - symbol | none
    (nav-enemy-method-54 (_type_ vector) symbol 54)
    (nav-enemy-method-55 (_type_) symbol 55)
    (set-jump-height-factor! (_type_ int) none 56)
    (nav-enemy-method-57 (_type_) none 57)
    (nav-enemy-method-58 (_type_) none 58)
    (nav-enemy-method-59 (_type_) none 59)
    (nav-enemy-method-60 (_type_ symbol) symbol 60)
    (snow-bunny-attack () _type_ :state 61)
    (snow-bunny-chase-hop () _type_ :state 62)
    (snow-bunny-defend () _type_ :state 63)
    (nav-enemy-method-64 () _type_ :state 64)
    (snow-bunny-lunge () _type_ :state 65)
    (snow-bunny-nav-resume () _type_ :state 66)
    (snow-bunny-patrol-hop () _type_ :state 67)
    (snow-bunny-patrol-idle () _type_ :state 68)
    (nav-enemy-method-69 () _type_ :state 69)
    (snow-bunny-retreat-hop () _type_ :state 70)
    (snow-bunny-tune-spheres () _type_ :state 71)
    (nav-enemy-touch-handler (_type_ process event-message-block) object 72)
    (nav-enemy-attack-handler (_type_ process event-message-block) object 73)
    (nav-enemy-jump-blocked ()  _type_ :state 74)
    (nav-enemy-method-75 () _type_ :state 75)
    )
  )


;; ----------------------
;; File - nav-enemy
;; Source Path - levels/common/nav-enemy.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Functions

(define-extern nav-enemy-rnd-int-range (function int int int))
(define-extern nav-enemy-initialize-jump (function vector none :behavior nav-enemy))
(define-extern nav-enemy-neck-control-look-at (function none :behavior nav-enemy))
(define-extern nav-enemy-facing-point? (function vector float symbol :behavior nav-enemy))
(define-extern nav-enemy-turn-to-face-point (function vector float none :behavior nav-enemy))
(define-extern nav-enemy-execute-jump (function none :behavior nav-enemy))
(define-extern nav-enemy-jump-land-anim (function none :behavior nav-enemy)) ;; TODO
(define-extern nav-enemy-rnd-float-range (function float float float :behavior nav-enemy))
(define-extern nav-enemy-common-post (function none :behavior nav-enemy)) ;; TODO not confirmed
(define-extern nav-enemy-execute-custom-jump (function int float float none :behavior nav-enemy))
(define-extern nav-enemy-initialize-custom-jump (function vector symbol float float float none :behavior nav-enemy))
(define-extern nav-enemy-simple-post (function none :behavior nav-enemy)) ;; TODO not confirmed
(define-extern nav-enemy-fall-and-play-death-anim (function art-joint-anim float float float int none :behavior nav-enemy)) ;; second arg is whatever is passed to align-control::11
(define-extern nav-enemy-neck-control-inactive (function none :behavior nav-enemy))
(define-extern nav-enemy-frustrated? (function symbol :behavior nav-enemy))
(define-extern nav-enemy-player-at-frustration-point? (function symbol :behavior nav-enemy))
(define-extern nav-enemy-reset-frustration (function none :behavior nav-enemy))
(define-extern nav-enemy-rnd-go-idle? (function float symbol))
(define-extern nav-enemy-notice-player? (function symbol :behavior nav-enemy))
(define-extern nav-enemy-turn-to-face-dir (function vector float none :behavior nav-enemy))
(define-extern nav-enemy-facing-direction? (function vector float symbol :behavior nav-enemy))
(define-extern nav-enemy-test-point-near-nav-mesh? (function vector symbol :behavior nav-enemy))
(define-extern nav-enemy-travel-post (function none :behavior nav-enemy))
(define-extern nav-enemy-get-new-patrol-point (function int :behavior nav-enemy))
(define-extern nav-enemy-set-hit-from-direction (function process none :behavior nav-enemy))
(define-extern nav-enemy-send-attack (function process touching-shapes-entry symbol object :behavior nav-enemy))
(define-extern nav-enemy-rnd-int-count (function int int))
(define-extern nav-enemy-rnd-float (function float))
(define-extern nav-enemy-rnd-percent? (function float symbol))
(define-extern nav-enemy-default-event-handler (function process int symbol event-message-block none :behavior nav-enemy)) ;; TODO - last arg is definitely a vector...but also not?
(define-extern nav-enemy-jump-event-handler (function process int symbol event-message-block object :behavior nav-enemy))
(define-extern process-drawable-death-event-handler (function process int symbol event-message-block none :behavior process-drawable)) ;; First two args are unused
(define-extern nav-enemy-patrol-post (function none :behavior nav-enemy))
(define-extern nav-enemy-chase-post (function none :behavior nav-enemy))
(define-extern nav-enemy-flee-post (function none :behavior nav-enemy))
(define-extern nav-enemy-face-player-post (function none :behavior nav-enemy))
(define-extern nav-enemy-falling-post (function none :behavior nav-enemy))
(define-extern nav-enemy-death-post (function none :behavior nav-enemy))
(define-extern nav-enemy-player-vulnerable? (function symbol))
(define-extern nav-enemy-facing-player? (function float symbol))
(define-extern nav-enemy-test-nav-mesh-intersection-xz? (function vector symbol :behavior nav-enemy)) ;; TODO - vector is a guess, check nav-control::16
(define-extern nav-enemy-test-point-in-nav-mesh? (function vector symbol :behavior nav-enemy)) ;; TODO - vector is a guess, check nav-control::16
(define-extern nav-enemy-set-base-collide-sphere-collide-with (function uint none :behavior nav-enemy)) ;; unused
(define-extern ja-group-index? (function int symbol :behavior nav-enemy))
(define-extern nav-enemy-jump-post (function none :behavior nav-enemy))
(define-extern nav-enemy-jump-land-post (function none :behavior nav-enemy))
(declare-type battlecontroller process-drawable)
(define-extern nav-enemy-init-by-other (function battlecontroller vector vector none :behavior nav-enemy))

;; - Unknowns

(define-extern *nav-enemy-dummy-shadow-control* shadow-control)


;; ----------------------
;; File - baseplat
;; Source Path - levels/common/baseplat.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype baseplat (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (smush     smush-control :inline :offset-assert 176)
   (basetrans vector        :inline :offset-assert 208)
   (bouncing  symbol                :offset-assert 224)
   )
  :method-count-assert 27
  :size-assert         #xe4
  :heap-base           #x80
  :flag-assert         #x1b008000e4
  ;; inherited inspect of process-drawable
  (:methods
    (baseplat-method-20 (_type_) none 20)
    (baseplat-method-21 (_type_) none 21)
    (baseplat-method-22 (_type_) none 22)
    (get-unlit-skel (_type_) skeleton-group 23)
    (baseplat-method-24 (_type_) none 24)
    (baseplat-method-25 (_type_) sparticle-launch-group 25)
    (baseplat-method-26 (_type_) none 26)
    )
  )

(defenum eco-door-flags
  :bitfield #t
  :type int32
  (ecdf00)
  (ecdf01)
  (auto-close)
  (one-way)
  (ecdf04)
  (ecdf05)
  (ecdf06)
  (ecdf07)
  (ecdf08)
  (ecdf09)
  (ecdf10)
  (ecdf11)
  (ecdf12)
  (ecdf13)
  (ecdf14)
  (ecdf15)
  (ecdf16)
  (ecdf17)
  (ecdf18)
  (ecdf19)
  (ecdf20)
  (ecdf21)
  (ecdf22)
  (ecdf23)
  (ecdf24)
  (ecdf25)
  (ecdf26)
  (ecdf27)
  (ecdf28)
  (ecdf29)
  (ecdf30)
  (ecdf31)
  )

(deftype eco-door (process-drawable)
  ((root-override  collide-shape   :score 100 :offset 112)
   (speed          float           :offset-assert 176)
   (open-distance  float           :offset-assert 180)
   (close-distance float           :offset-assert 184)
   (out-dir        vector  :inline :offset-assert 192)
   (open-sound     sound-name      :offset-assert 208)
   (close-sound    sound-name      :offset-assert 224)
   (state-actor    entity-actor    :offset-assert 240)
   (flags          eco-door-flags  :offset-assert 244)
   (locked         symbol          :offset-assert 248)
   (auto-close     symbol          :offset-assert 252)
   (one-way        symbol          :offset-assert 256)
   )
  :method-count-assert 27
  :size-assert         #x104
  :heap-base           #xa0
  :flag-assert         #x1b00a00104
  ;; inherited inspect of process-drawable
  (:methods
    (door-closed () _type_ :state 20)
    (door-opening () _type_ :state 21)
    (door-open () _type_ :state 22)
    (door-closing () _type_ :state 23)
    (eco-door-method-24 (_type_) none 24)
    (eco-door-method-25 (_type_) none 25)
    (eco-door-method-26 (_type_) none 26)
    )
  )

;; - Functions

(define-extern plat-code (function none :behavior baseplat))
(define-extern plat-trans (function none :behavior baseplat))
(define-extern plat-post (function none :behavior baseplat))
(define-extern plat-event (function process int symbol event-message-block object :behavior baseplat))
(define-extern eco-door-event-handler (function process int symbol event-message-block object :behavior eco-door))


;; ----------------------
;; File - basebutton
;; Source Path - levels/common/basebutton.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype basebutton (process-drawable)
  ((root-override     collide-shape-moving :score 100 :offset 112)
   (down?             symbol             :offset-assert 176)
   (spawned-by-other? symbol              :offset-assert 180)
   (move-to?          symbol             :offset-assert 184)
   (notify-actor      entity-actor              :offset-assert 188)
   (timeout           float              :offset-assert 192)
   (button-id         int32              :offset-assert 196)
   (event-going-down  symbol              :offset-assert 200)
   (event-down        symbol              :offset-assert 204)
   (event-going-up    symbol              :offset-assert 208)
   (event-up          symbol              :offset-assert 212)
   (anim-speed        float              :offset-assert 216)
   (move-to-pos       vector     :inline :offset-assert 224)
   (move-to-quat      quaternion :inline :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x2000900100
  ;; inherited inspect of process-drawable
  (:methods
    (basebutton-down-idle () _type_ :state 20) ;; state
    (basebutton-going-down () _type_ :state 21) ;; state
    (basebutton-going-up () _type_ :state 22)
    (basebutton-startup () _type_ :state 23)
    (basebutton-up-idle () _type_ :state 24) ;; state
    (reset! (_type_) float 25)
    (basebutton-method-26 (_type_) none 26)
    (basebutton-method-27 (_type_) collide-shape-moving 27)
    (arm-trigger-event! (_type_) symbol 28)
    (basebutton-method-29 (_type_ symbol entity) none 29)
    (move-to-vec-or-quat! (_type_ vector quaternion) quaternion 30) ;; args are optional
    (press! (_type_ symbol) int 31)
    )
  )

(deftype warp-gate (process-drawable)
  ((level      symbol  :offset-assert 176)
   (level-slot int32  :offset-assert 180)
   (min-slot   int32  :offset-assert 184)
   (max-slot   int32  :offset-assert 188)
   )
  :method-count-assert 24
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x18005000c0
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    (use (int level) _type_ :state 22)
    (hidden () _type_ :state 23)
    )
  )

;; - Functions

(define-extern basebutton-init-by-other (function entity-actor vector quaternion entity-actor symbol float none :behavior basebutton))

;; - Unknowns

(define-extern *warp-jump-mods* surface)
(define-extern *warp-info* (array string))
(define-extern *generic-button-sg* skeleton-group)


;; ----------------------
;; File - tippy
;; Source Path - levels/common/tippy.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype tippy (structure)
  ((axis       vector     :inline :offset-assert 0)
   (angle      float              :offset-assert 16)
   (orig       quaternion :inline :offset-assert 32)
   (dist-ratio float              :offset-assert 48)
   (damping    float              :offset-assert 52)
   (1-damping  float              :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (reset! (_type_ process-drawable float float) none 9)
    (tippy-method-10 (_type_ process-drawable vector) symbol 10)
    )
  )


;; ----------------------
;; File - joint-exploder
;; Source Path - levels/common/joint-exploder.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype joint-exploder-tuning (structure)
  ((explosion                   uint64         :offset-assert 0)
   (duration                    time-frame         :offset-assert 8)
   (gravity                     float          :offset-assert 16)
   (rot-speed                   float          :offset-assert 20)
   (fountain-rand-transv-lo     vector :inline :offset-assert 32)
   (fountain-rand-transv-hi     vector :inline :offset-assert 48)
   (away-from-focal-pt          vector :inline :offset 32)
   (away-from-rand-transv-xz-lo float          :offset 48)
   (away-from-rand-transv-xz-hi float          :offset 52)
   (away-from-rand-transv-y-lo  float          :offset 56)
   (away-from-rand-transv-y-hi  float          :offset 60)
   )
  (:methods
    (new (symbol type int) _type_ 0)
    )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype joint-exploder-static-joint-params (structure)
  ((joint-index        int16  :offset-assert 0)
   (parent-joint-index int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype joint-exploder-static-params (basic)
  ((joints (array joint-exploder-static-joint-params)  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype joint-exploder-joint (structure)
  ((next        int16          :offset-assert 0)
   (prev        int16          :offset-assert 2)
   (joint-index int16          :offset-assert 4)
   (rspeed      float          :offset-assert 8)
   (mat         matrix :inline :offset-assert 16)
   (rmat        matrix :inline :offset-assert 80)
   (transv      vector :inline :offset-assert 144)
   (prev-pos    vector :inline :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )

(deftype joint-exploder-joints (basic)
  ((num-joints int32            :offset-assert 4)
   (joint      joint-exploder-joint :dynamic :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  (:methods
    (new (symbol type joint-exploder-static-params) _type_ 0))
  )

(deftype joint-exploder-list (structure)
  ((head        int32                :offset-assert 0)
   (pre-moved?  symbol                :offset-assert 4)
   (bbox-valid? symbol                :offset-assert 8)
   (bbox        bounding-box :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype joint-exploder (process-drawable)
  ((parent-override  (pointer process-drawable) :score 100 :offset 12)
   (die-if-below-y             float                         :offset-assert 176)
   (die-if-beyond-xz-dist-sqrd float                         :offset-assert 180)
   (joints                     joint-exploder-joints                         :offset-assert 184)
   (static-params              joint-exploder-static-params                         :offset-assert 188)
   (anim                       art-joint-anim                         :offset-assert 192)
   (scale-vector               vector                :inline :offset-assert 208)
   (tuning                     joint-exploder-tuning :inline :offset-assert 224)
   (lists                      joint-exploder-list               5      :inline :offset-assert 288)
   )
  :method-count-assert 29
  :size-assert         #x210
  :heap-base           #x1a0
  :flag-assert         #x1d01a00210
  (:methods
    (joint-exploder-method-20 (_type_ joint-exploder-list int) int 20)
    (joint-exploder-method-21 (_type_ joint-exploder-list joint-exploder-joint) none 21)
    (joint-exploder-method-22 (_type_ joint-exploder-list) symbol 22)
    (joint-exploder-method-23 (_type_) symbol 23)
    (joint-exploder-method-24 (_type_ joint-exploder-list int) int 24)
    (joint-exploder-method-25 (_type_ joint-exploder-list) symbol 25)
    (joint-exploder-method-26 (_type_ joint-exploder-list int) int 26)
    (joint-exploder-method-27 (_type_ joint-exploder-list int) joint-exploder-list 27)
    (joint-exploder-method-28 (_type_ joint-exploder-list) none 28)
    )
  (:states
    joint-exploder-shatter)
  )

;; - Functions

(define-extern joint-exploder-joint-callback (function joint-exploder none))
(define-extern joint-exploder-init-by-other (function skeleton-group int joint-exploder-static-params joint-exploder-static-params none :behavior joint-exploder))

;; - Unknowns



;; ----------------------
;; File - babak
;; Source Path - levels/common/babak.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype babak (nav-enemy)
  ()
  :method-count-assert 76
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x4c01200190
  (:states
    babak-run-to-cannon)
  )

;; - Unknowns

(define-extern *babak-sg* skeleton-group)
(define-extern *babak-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - sharkey
;; Source Path - levels/common/sharkey.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype sharkey (nav-enemy)
  ((dir               vector :inline :offset-assert 400)
   (spawn-point       vector :inline :offset-assert 416)
   (scale             float          :offset-assert 432)
   (anim-speed        float          :offset-assert 436)
   (y-max             meters         :offset-assert 440)
   (y-min             meters         :offset-assert 444)
   (attack-time       float          :offset-assert 448)
   (player-water-time time-frame         :offset-assert 456)
   (player-in-water   basic          :offset-assert 464)
   (last-y            float          :offset-assert 468)
   (spawn-distance    meters         :offset-assert 472)
   (chase-speed       meters         :offset-assert 476)
   (y-speed           meters         :offset-assert 480)
   (sound-id          sound-id       :offset-assert 484)
   (enable-patrol     basic          :offset-assert 488)
   )
  :method-count-assert 76
  :size-assert         #x1ec
  :heap-base           #x180
  :flag-assert         #x4c018001ec
  ;; inherited inspect of nav-enemy
  )

;; - Functions

(define-extern sharkey-get-player-position (function vector none))
(define-extern sharkey-follow-trajectory (function float quaternion :behavior sharkey))
(define-extern sharkey-reset-position (function none :behavior sharkey))
(define-extern sharkey-notice-player? (function symbol :behavior sharkey))
(define-extern sharkey-move-to-attack-position (function float :behavior sharkey))

;; - Unknowns

(define-extern *sharkey-sg* skeleton-group)
(define-extern *sharkey-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - orb-cache
;; Source Path - levels/common/orb-cache.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype orb-cache-top (baseplat)
  ((active-distance   float      :offset-assert 228)
   (inactive-distance float      :offset-assert 232)
   (money-list        handle  60 :offset-assert 240)
   (money-pos-list    float   60 :offset-assert 720)
   (money-pos-actual  float   60 :offset-assert 960)
   (platform-pos      float      :offset-assert 1200)
   (root-pos          float      :offset-assert 1204)
   (money             int32      :offset-assert 1208)
   (activated         symbol     :offset-assert 1212)
   )
  :method-count-assert 29
  :size-assert         #x4c0
  :heap-base           #x450
  :flag-assert         #x1d045004c0
  ;; inherited inspect of baseplat
  (:methods
    (pos-logic (_type_ symbol) symbol 27)
    (calculate-pos (_type_ symbol) none 28)
    )
  (:states
    (orb-cache-top-complete symbol)
    (orb-cache-top-activate symbol)
    (orb-cache-top-idle symbol)
    )
  )

;; - Unknowns

(define-extern *orb-cache-top-sg* skeleton-group)


;; ----------------------
;; File - plat
;; Source Path - levels/common/plat.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype plat (baseplat)
  ((path-pos float                   :offset-assert 228)
   (sync     sync-info-eased :inline :offset-assert 232)
   (sound-id sound-id                :offset-assert 260)
   )
  :method-count-assert 33
  :size-assert         #x108
  :heap-base           #xa0
  :flag-assert         #x2100a00108
  ;; inherited inspect of baseplat
  (:methods
    (get-lit-skel (_type_) skeleton-group 27)
    (plat-method-28 () none 28)
    (wad () _type_ :state 29)
    (plat-startup (plat) _type_ :state 30) ;; state
    (plat-idle () _type_ :state 31) ;; state
    (plat-path-active (plat) _type_ :state 32) ;; state
    )
  )

;; - Unknowns

(define-extern *plat-jungleb-sg* skeleton-group)
(define-extern *plat-sunken-sg* skeleton-group)
(define-extern *plat-sg* skeleton-group)


;; ----------------------
;; File - plat-button
;; Source Path - levels/common/plat-button.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype plat-button (process-drawable)
  ((root-override           collide-shape-moving :score 100 :offset 112)
   (go-back-if-lost-player? symbol         :offset-assert 176)
   (grab-player?            symbol         :offset-assert 180)
   (should-grab-player?     symbol         :offset-assert 184)
   (path-pos                float          :offset-assert 188)
   (bidirectional?          symbol         :offset-assert 192)
   (allow-auto-kill         symbol         :offset-assert 196)
   (sound-id                sound-id       :offset-assert 200)
   (trans-off               vector :inline :offset-assert 208)
   (spawn-pos               vector :inline :offset-assert 224)
   )
  :method-count-assert 33
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x21008000f0
  ;; inherited inspect of process-drawable
  (:methods
    (plat-button-at-end () _type_ :state 20) ;; state
    (plat-button-idle () _type_ :state 21)
    (plat-button-pressed () _type_ :state 22)
    (plat-button-move-downward () _type_ :state 23)
    (plat-button-move-upward () _type_ :state 24)
    (plat-button-teleport-to-other-end () _type_ :state 25)
    (can-activate? (_type_) symbol 26)
    (plat-button-method-27 (_type_) none 27)
    (plat-button-method-28 (_type_) collide-shape-moving 28)
    (can-target-move? (_type_) none 29)
    (should-teleport? (_type_) symbol 30)
    (plat-button-method-31 (_type_) none 31) ;; TODO - need to know super::14
    (plat-button-method-32 (_type_) none 32)
    )
  )

;; - Functions

(define-extern plat-button-camera-off (function none :behavior plat-button))
(define-extern plat-button-camera-on (function none :behavior plat-button))

;; - Unknowns

(define-extern *plat-button-sg* skeleton-group)


;; ----------------------
;; File - plat-eco
;; Source Path - levels/common/plat-eco.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype plat-eco (plat)
  ((notice-dist      float           :offset-assert 264)
   (sync-offset-dest float           :offset-assert 268)
   (sync-offset-faux float           :offset-assert 272)
   (sync-linear-val  float           :offset-assert 276)
   (target           handle          :offset-assert 280)
   (unlit-look       lod-set :inline :offset-assert 288)
   (lit-look         lod-set :inline :offset-assert 324)
   )
  :method-count-assert 33
  :size-assert         #x165
  :heap-base           #x100
  :flag-assert         #x2101000165
  (:methods
    (notice-blue (handle) _type_ :replace :state 29)
    )
  )

;; - Unknowns

(define-extern *plat-eco-lit-sg* skeleton-group)
(define-extern *plat-eco-unlit-sg* skeleton-group)


;; ----------------------
;; File - ropebridge
;; Source Path - levels/common/ropebridge.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype ropebridge-tuning (structure)
  ((num-springs             int32   :offset-assert 0)
   (num-spring-points       int32   :offset-assert 4)
   (col-mesh-indexes        (pointer uint8) :offset-assert 8) ;; pointer to a variable sized thing
   (view-frustum-radius     float   :offset-assert 12)
   (root-prim-radius        float   :offset-assert 16)
   (desired-spring-len      float   :offset-assert 20)
   (gravity                 float   :offset-assert 24)
   (spring-coefficient      float   :offset-assert 28)
   (spring-mass             float   :offset-assert 32)
   (friction                float   :offset-assert 36)
   (max-influence-dist      float   :offset-assert 40)
   (rider-max-gravity       float   :offset-assert 44)
   (max-bonk-influence-dist float   :offset-assert 48)
   (rider-bonk-force        float   :offset-assert 52)
   (rider-bonk-min          float   :offset-assert 56)
   (rider-bonk-max          float   :offset-assert 60)
   (normal-board-len        float   :offset-assert 64)
   (bridge-end-to-end-len   float   :offset-assert 68)
   (rest-state              symbol   :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ropebridge-spring-point (structure)
  ((local-pos   vector :inline :offset-assert 0)
   (vel         vector :inline :offset-assert 16)
   (extra-force vector :inline :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ropebridge (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (subtype                uint64                    :offset-assert 176)
   (subtype-name           string                    :offset-assert 184)
   (agitated-time-stamp    time-frame                    :offset-assert 192)
   (bonk-time-stamp        time-frame                    :offset-assert 200)
   (attack-flop-time-stamp time-frame                    :offset-assert 208)
   (player-attack-id       uint64                    :offset-assert 216)
   (sleep-dist             float                     :offset-assert 224)
   (do-physics?            basic                     :offset-assert 228)
   (tuning                 ropebridge-tuning         :offset-assert 232)
   (world-matrix           matrix            :inline :offset-assert 240)
   (inv-world-matrix       matrix            :inline :offset-assert 304)
   (extra-trans            vector            :inline :offset-assert 368)
   (spring-point           ropebridge-spring-point           36     :inline :offset-assert 384)
   )
  :method-count-assert 29
  :size-assert         #x840
  :heap-base           #x7d0
  :flag-assert         #x1d07d00840
  (:methods
    (set-vel-from-impact (_type_ uint vector int float) none 20)
    (set-vel-from-riders (_type_) none 21) ;; physics2
    (set-vel-from-rider (_type_ uint vector int) none 22)
    (clear-spring-forces (_type_) none 23) ;; physics1
    (debug-draw (_type_) none 24)
    (set-to-rest-state (_type_) none 25)
    (add-collision-meshes (_type_) none 26)
    (do-integration (_type_) none 27) ;; physics3
    (ropebridge-method-28 (_type_) none 28)
    )
  (:states
    ropebridge-idle)
  )

;; - Functions

(define-extern ropebridge-joint-callback (function ropebridge none))

;; - Unknowns

(define-extern *ropebridge-tunings* (inline-array ropebridge-tuning))
(define-extern *ropebridge-70-rest-state* (inline-array vector)) ;; can't find ropebridges with these ids in the game??
(define-extern *ropebridge-52-rest-state* (inline-array vector))
(define-extern *ropebridge-32-rest-state* (inline-array vector))
(define-extern *ropebridge-36-rest-state* (inline-array vector))
(define-extern *ropebridge-32-sg* skeleton-group)
(define-extern *snow-bridge-36-sg* skeleton-group)
(define-extern *ropebridge-52-sg* skeleton-group)
(define-extern *ropebridge-70-sg* skeleton-group)
(define-extern *ropebridge-36-sg* skeleton-group)
(define-extern *vil3-bridge-36-sg* skeleton-group)


;; ----------------------
;; File - ticky
;; Source Path - levels/common/ticky.gc
;; Containing DGOs - ['GAME', 'COMMON', 'L1']
;; Version - 3

;; - Types

(deftype ticky (structure)
  ((delay-til-ramp    time-frame  :offset-assert 0)
   (delay-til-timeout time-frame  :offset-assert 8)
   (starting-time     time-frame  :offset-assert 16)
   (last-tick-time    time-frame  :offset-assert 24)
   )
  :method-count-assert 12
  :size-assert         #x20
  :flag-assert         #xc00000020
  (:methods
    (sleep (_type_ time-frame) none 9)
    (reached-delay? (_type_ time-frame) symbol 10)
    (completed? (_type_) symbol 11)
    )
  )


;; ----------------------
;; File - mistycannon
;; Source Path - levels/common/mistycannon.gc
;; Containing DGOs - ['BEA', 'L1', 'MIS']
;; Version - 3

;; - Types

(deftype angle-tracker (structure)
  ((value float  :offset-assert 0)
   (min   float  :offset-assert 4)
   (range float  :offset-assert 8)
   (speed float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mistycannon-missile (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (muzzle-time  float              :offset-assert 176)
   (tumble-quat  quaternion :inline :offset-assert 192)
   (blast-radius float              :offset-assert 208)
   (water-height float              :offset-assert 212)
   (sfx          uint32             :offset-assert 216)
   (part2        sparticle-launch-control              :offset-assert 220)
   (ground-time  time-frame             :offset-assert 224)
   )
  :method-count-assert 21
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x15008000e8
  (:methods
    (spawn-part (_type_) none 20)
    )
  (:states
    mistycannon-missile-idle
    mistycannon-missile-explode
    mistycannon-missile-in-water)
  )

(deftype mistycannon-init-data (structure)
  ((pos          vector  :offset-assert 0)
   (vel          vector  :offset-assert 4)
   (rotate       float   :offset-assert 8)
   (flight-time  float   :offset-assert 12)
   (muzzle-time  float   :offset-assert 16)
   (blast-radius float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype mistycannon (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (rotate                 angle-tracker :inline :offset-assert 176)
   (fact-info-override fact-info-enemy :score 100 :offset 144)
   (tilt                   angle-tracker :inline :offset-assert 192)
   (front-wheel            float                 :offset-assert 208)
   (rear-wheel             float                 :offset-assert 212)
   (last-known-rotation    float                 :offset-assert 216)
   (part-timer             time-frame                :offset-assert 224)
   (hellmouth              vector        :inline :offset-assert 240)
   (postbindinfo-ok        symbol                 :offset-assert 256)
   (launch-origin          vector        :inline :offset-assert 272)
   (goggles                vector        :inline :offset-assert 288)
   (avoid-entity           entity-actor                 :offset-assert 304)
   (center-point           vector        :inline :offset-assert 320)
   (at-point               vector        :inline :offset-assert 336)
   (accuracy-range         float                 :offset-assert 352)
   (target-theta           float                 :offset-assert 356)
   (sound-id               sound-id              :offset-assert 360)
   (aim-sound-id           sound-id              :offset-assert 364)
   (player-touching-grips? symbol                 :offset-assert 368)
   )
  :method-count-assert 24
  :size-assert         #x174
  :heap-base           #x110
  :flag-assert         #x1801100174
  (:methods
    (rotate! (_type_ float) none 20)
    (tilt! (_type_ float) none 21)
    (mistycannon-method-22 (_type_ float float float) none 22) ;; can return a #f is postbindinfo-ok is false
    (mistycannon-method-23 (_type_) none 23)
    )
  (:states
    mistycannon-idle
    mistycannon-waiting-for-player
    mistycannon-waiting-for-player-to-fuck-off
    mistycannon-aim-at-player
    mistycannon-player-control)
  )

(deftype quadratic-solution (structure)
  ((s1 float  :offset-assert 0)
   (s2 float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype trajectory-params (structure)
  ((x       float  :offset-assert 0)
   (y       float  :offset-assert 4)
   (gravity float  :offset-assert 8)
   (theta   float  :offset-assert 12)
   (speed   float  :offset-assert 16)
   (time    float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; - Functions

(define-extern mistycannon-prebind-function (function pointer int mistycannon none))
(define-extern mistycannon-postbind-function (function mistycannon none))
(define-extern angle-tracker-init-range! (function angle-tracker float float float none))
(define-extern mistycannon-pick-random-target-point (function none :behavior mistycannon))
(define-extern angle-tracker-seek! (function angle-tracker float symbol))
(define-extern mistycannon-do-aim (function vector vector none :behavior mistycannon)) ;; can return a #f is postbindinfo-ok is false
(define-extern mistycannon-find-trajectory (function trajectory-params none :behavior mistycannon))
(define-extern solve-missile-velocity (function trajectory-params float none))
(define-extern spawn-mistycannon-missile (function process-tree vector vector float float float float entity none))
(define-extern angle-tracker-apply-move! (function angle-tracker float float))
(define-extern mistycannon-missile-init-by-other (function mistycannon-init-data entity-actor none :behavior mistycannon-missile))
(define-extern mistycannon-collision-reaction (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags))
(define-extern angle-tracker-get-value (function angle-tracker float))
(define-extern angle-tracker-set-value (function angle-tracker float float))
(define-extern solve-missile-tilt (function quadratic-solution float float float float symbol))
(define-extern mistycannon-find-best-solution (function quadratic-solution int :behavior mistycannon))

;; - Unknowns

(define-extern *mistycannon-sg* skeleton-group)
(define-extern *mistycannon-missile-sg* skeleton-group)


;; ----------------------
;; File - babak-with-cannon
;; Source Path - levels/common/babak-with-cannon.gc
;; Containing DGOs - ['BEA', 'L1', 'MIS']
;; Version - 3

;; - Types

(deftype babak-with-cannon (babak)
  ((cannon-ent entity  :offset-assert 400)
   (distance   float  :offset-assert 404)
   )
  :method-count-assert 76
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x4c01300198
  (:states
    babak-with-cannon-jump-off-cannon
    babak-with-cannon-shooting
    babak-with-cannon-jump-onto-cannon)
  )

;; - Functions

(define-extern beachcam-spawn (function none))
(define-extern mistycam-spawn (function none))
(define-extern babak-with-cannon-compute-ride-point (function mistycannon vector vector))
(define-extern babak-with-cannon-compute-cannon-dir (function mistycannon vector vector))
(define-extern handle->process-safe (function handle process))
(define-extern babak-with-cannon-ride-cannon-post (function none :behavior babak-with-cannon))

;; - Unknowns



;; ----------------------
;; File - air-h
;; Source Path - levels/beach/air-h.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype air-box (structure)
  ((vecs         vector 2 :inline :offset-assert 0)
   (x-pos        float     :offset 0)
   (height-level float     :offset 4)
   (z-pos        float     :offset 8)
   (cos-angle    float     :offset 12)
   (x-length     float     :offset 16)
   (z-length     float     :offset 24)
   (sin-angle    float     :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; - Functions

(define-extern point-in-air-box-area? (function float float air-box symbol))
(define-extern point-in-air-box? (function vector air-box symbol))


;; ----------------------
;; File - air
;; Source Path - levels/beach/air.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Functions

(define-extern point-in-air? (function vector (inline-array air-box) int symbol)) ;; Not used
(define-extern points-in-air? (function vector vector (inline-array air-box) int symbol))
(define-extern add-debug-air-box (function bucket-id air-box symbol))


;; ----------------------
;; File - wobbler
;; Source Path - levels/beach/wobbler.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype wobbler (basic)
  ((posx    float  :offset-assert 4)
   (posy    float  :offset-assert 8)
   (velx    float  :offset-assert 12)
   (vely    float  :offset-assert 16)
   (spring  float  :offset-assert 20)
   (damping float  :offset-assert 24)
   (height  float  :offset-assert 28)
   )
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  (:methods
    (reset! (_type_ float float float) none 9)
    (inc-xy-vel! (_type_ float float) none 10)
    (move! (_type_) none 11)
    (wobbler-method-12 (_type_ quaternion) none 12)
    )
  )


;; ----------------------
;; File - twister
;; Source Path - levels/beach/twister.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype twist-joint (structure)
  ((ry      float  :offset-assert 0)
   (max-dry float  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype twister (basic)
  ((num-joints   int32            :offset-assert 4)
   (first-joint  int32            :offset-assert 8)
   (last-joint   int32            :offset-assert 12)
   (something    uint16           :offset 12)
   (max-speed    float            :offset-assert 16)
   (smoothing    float            :offset-assert 20)
   (min-dist     float            :offset-assert 24)
   (target       float            :offset-assert 28)
   (ry           float            :offset-assert 32)
   (max-speed-ry float            :offset-assert 36)
   (data         twist-joint :inline :dynamic :offset-assert 40)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (new (symbol type int int float float float float) _type_ 0)
    (twister-method-9 (_type_ int int float) none 9)
    (set-target! (_type_ float) none 10)
    (twister-method-11 (_type_) none 11)
    (twister-method-12 (_type_ process-drawable) none 12)
    )
  )


;; ----------------------
;; File - beach-obs
;; Source Path - levels/beach/beach-obs.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype windmill-one (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (sound-id sound-id  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    windmill-one-idle)
  )

(deftype grottopole (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (speed               meters  :offset-assert 176)
   (distance            meters  :offset-assert 180)
   (position            int32   :offset-assert 184)
   (max-position        int32   :offset-assert 188)
   (incomming-attack-id uint64  :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x14006000c8
  (:states
    grottopole-idle
    grottopole-moving-up
    grottopole-moving-down)
  )

(deftype ecoventrock (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    (ecoventrock-break symbol)
    ecoventrock-idle)
  )

(deftype flying-rock (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112) ;; a guess
   (tumble quaternion :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x14005000c0
  (:states
    flying-rock-rolling
    flying-rock-idle)
  )

(deftype bladeassm (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (angle float  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    bladeassm-idle)
  )

(deftype flutflutegg (process-drawable)
  ((root-override collide-shape-moving  :score 100 :offset 112)
   (fall-dist           meters                  :offset-assert 176)
   (start               vector          :inline :offset-assert 192)
   (dir                 vector          :inline :offset-assert 208)
   (pos                 float                   :offset-assert 224)
   (vel                 float                   :offset-assert 228)
   (wobbler             wobbler                   :offset-assert 232)
   (last-impulse-time   int32                   :offset-assert 236)
   (incomming-attack-id uint64                  :offset-assert 240)
   (ambients-played     int32                   :offset-assert 248)
   (ambient             ambient-control :inline :offset-assert 256)
   )
  :method-count-assert 21
  :size-assert         #x110
  :heap-base           #xa0
  :flag-assert         #x1500a00110
  (:methods
    (flutflutegg-method-20 (_type_ float float float) none 20)
    )
  (:states
    (flutflutegg-break symbol)
    flutflutegg-idle
    flutflutegg-physics-fall
    flutflutegg-physics)
  )

(deftype harvester (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (alt-actor entity-actor  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    harvester-idle
    (harvester-inflate symbol))
  )

(deftype beachcam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

;; - Functions

(define-extern flutflutegg-hit-sounds (function none :behavior flutflutegg))
(define-extern bladeassm-prebind-function (function process-drawable int bladeassm event-message-block object)) ;; TODO - first arg is very likely wrong
(define-extern flying-rock-init-by-other (function vector vector float entity-actor none :behavior flying-rock))
(define-extern spawn-flying-rock (function vector vector float entity none))
(define-extern move-grottopole-to-position (function grottopole none))
(define-extern move-grottopole (function grottopole float none))

;; - Unknowns

(define-extern *beachcam-sg* skeleton-group)
(define-extern *harvester-sg* skeleton-group)
(define-extern *flutflutegg-sg* skeleton-group)
(define-extern *bladeassm-sg* skeleton-group)
(define-extern *kickrock-sg* skeleton-group)
(define-extern *ecoventrock-sg* skeleton-group)
(define-extern *grottopole-sg* skeleton-group)
(define-extern *windmill-one-sg* skeleton-group)
(define-extern *flutflut-naked-sg* skeleton-group)


;; ----------------------
;; File - bird-lady
;; Source Path - levels/beach/bird-lady.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype bird-lady (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *bird-lady-sg* skeleton-group)


;; ----------------------
;; File - bird-lady-beach
;; Source Path - levels/beach/bird-lady-beach.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype bird-lady-beach (process-taskable)
  ((flutflut handle  :offset-assert 384)
   (egg      handle  :offset-assert 392)
   )
  :method-count-assert 53
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x3501200190
  )

;; - Unknowns

(define-extern *bird-lady-beach-sg* skeleton-group)


;; ----------------------
;; File - mayor
;; Source Path - levels/beach/mayor.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype mayor (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Functions

(define-extern mayor-lurkerm-reward-speech (function mayor symbol spool-anim))

;; - Unknowns

(define-extern *mayor-sg* skeleton-group)


;; ----------------------
;; File - sculptor
;; Source Path - levels/beach/sculptor.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype sculptor (process-taskable)
  ((muse handle  :offset-assert 384)
   )
  :method-count-assert 53
  :size-assert         #x188
  :heap-base           #x120
  :flag-assert         #x3501200188
  )

;; - Functions

(declare-type muse nav-enemy)
(define-extern muse-to-idle (function muse object :behavior sculptor))

;; - Unknowns

(define-extern *sculptor-sg* skeleton-group)
(define-extern *sculptor-muse-sg* skeleton-group)


;; ----------------------
;; File - pelican
;; Source Path - levels/beach/pelican.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype pelican-bank (basic)
  ((circle-speed        meters    :offset-assert 4)
   (dive-time           seconds  :offset-assert 8)
   (to-nest0-time       seconds  :offset-assert 16)
   (to-nest1-time       seconds  :offset-assert 24)
   (land-time           seconds  :offset-assert 32)
   (from-nest-time      seconds  :offset-assert 40)
   (spit-time           seconds  :offset-assert 48)
   (pre-spit-wait-time  seconds  :offset-assert 56)
   (post-spit-wait-time seconds  :offset-assert 64)
   (run-away-time       seconds  :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype pelican (process-drawable)
  ((root-override   collide-shape-moving :score 100 :offset 112)
   (query           gui-query :inline :offset-assert 176)
   (fuel-cell       handle            :offset-assert 208)
   (cam-tracker     handle            :offset-assert 216)
   (path-data       curve-control   8         :offset-assert 224)
   (path-circle     curve-control             :offset 224)
   (path-dive0      curve-control             :offset 228)
   (path-to-nest0   curve-control             :offset 232)
   (path-from-nest0 curve-control             :offset 236)
   (path-spit0      curve-control             :offset 240)
   (path-dive1      curve-control             :offset 244)
   (path-to-nest1   curve-control             :offset 248)
   (path-to-nest2   curve-control             :offset 252)
   (path-cache      curve-control             :offset-assert 256)
   (time-cache      time-frame            :offset-assert 264)
   (path-pos        float             :offset-assert 272)
   (path-speed      float             :offset-assert 276)
   (path-max        float             :offset-assert 280)
   (path-vector     vector    :inline :offset-assert 288)
   (state-vector    vector    :inline :offset-assert 304)
   (state-vector1   vector    :inline :offset-assert 320)
   (state-float     float   2         :offset-assert 336)
   (state-object    symbol             :offset-assert 344)
   (neck            joint-mod             :offset-assert 348)
   )
  :method-count-assert 20
  :heap-base           #xf0
  :size-assert         #x160
  :flag-assert         #x1400f00160
  (:states
    (pelican-wait-at-end symbol)
    (pelican-wait-at-nest symbol)
    pelican-circle
    (pelican-dive path-control curve-control time-frame)
    pelican-from-nest
    (pelican-explode symbol)
    pelican-spit
    (pelican-fly-to-end path-control time-frame)
    (pelican-to-nest path-control int))
  )

;; - Functions

(define-extern pelican-fly (function (function pelican int) (function pelican int) none :behavior pelican))
(define-extern pelican-path-update (function float int float float symbol quaternion :behavior pelican))
(define-extern pelican-post (function none :behavior pelican))

;; - Unknowns

(define-extern *pelican-sg* skeleton-group)
(define-extern zero-func (function int))
(define-extern *PELICAN-bank* pelican-bank)


;; ----------------------
;; File - lurkerworm
;; Source Path - levels/beach/lurkerworm.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype lurkerworm (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (twister      twister  :offset-assert 176)
   (head-tilt    float  :offset-assert 180)
   (strike-count int32  :offset-assert 184)
   (angle        float  :offset-assert 188)
   (vulnerable   symbol  :offset-assert 192)
   (part2        sparticle-launch-control  :offset-assert 196)
   )
  :method-count-assert 22
  :heap-base           #x60
  :size-assert         #xc8
  :flag-assert         #x16006000c8
  ;; inherited inspect of process-drawable
  (:methods
    (lurkerworm-method-20 (_type_) none 20)
    (particle-effect (_type_) none 21)
    )
  (:states
    lurkerworm-idle
    lurkerworm-rest
    lurkerworm-strike
    lurkerworm-sink
    lurkerworm-rise
    lurkerworm-spot
    lurkerworm-die)
  )

;; - Functions

(define-extern lurkerworm-prebind-function (function pointer int lurkerworm none :behavior lurkerworm))
(define-extern lurkerworm-joint-callback (function lurkerworm none))
(define-extern lurkerworm-default-event-handler (function process int symbol event-message-block object :behavior lurkerworm))
(define-extern lurkerworm-default-post-behavior (function none :behavior lurkerworm))

;; - Unknowns

(define-extern *lurkerworm-sg* skeleton-group)


;; ----------------------
;; File - lurkercrab
;; Source Path - levels/beach/lurkercrab.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype lurkercrab (nav-enemy)
  ((orient basic  :offset-assert 400)
   )
  :method-count-assert 76
  :heap-base           #x130
  :size-assert         #x194
  :flag-assert         #x4c01300194
  (:states
    lurkercrab-pushed
    )
  )

;; - Functions

(define-extern lurkercrab-vulnerable (function int :behavior lurkercrab))
(define-extern lurkercrab-invulnerable (function int :behavior lurkercrab))

;; - Unknowns

(define-extern *lurkercrab-sg* skeleton-group)
(define-extern *lurkercrab-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - lurkerpuppy
;; Source Path - levels/beach/lurkerpuppy.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype lurkerpuppy (nav-enemy)
  ()
  :method-count-assert 76
  :heap-base           #x120
  :size-assert         #x190
  :flag-assert         #x4c01200190
  )

;; - Unknowns

(define-extern *lurkerpuppy-sg* skeleton-group)
(define-extern *lurkerpuppy-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - beach-rocks
;; Source Path - levels/beach/beach-rocks.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype beach-rock (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (trigger      basic   :offset-assert 176)
   (movie-start  time-frame  :offset-assert 184)
   (part-falling sparticle-launch-control   :offset-assert 192)
   (part-landing sparticle-launch-control   :offset-assert 196)
   (prev-frame   float   :offset-assert 200)
   )
  :method-count-assert 24
  :heap-base           #x60
  :size-assert         #xcc
  :flag-assert         #x18006000cc
  (:methods
    (idle () _type_ :state 20) ;; state
    (loading () _type_ :state 21) ;; state
    (falling () _type_ :state 22) ;; state
    (fallen () _type_ :state 23) ;; state
    )
  )

(deftype lrocklrg (beach-rock)
  ()
  :method-count-assert 24
  :heap-base           #x60
  :size-assert         #xcc
  :flag-assert         #x18006000cc
  )

;; - Unknowns

(define-extern *lrocklrg-sg* skeleton-group)


;; ----------------------
;; File - seagull
;; Source Path - levels/beach/seagull.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(declare-type seagullflock process)
(deftype seagull (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (index             int32   :offset-assert 176)
   (flock             (pointer seagullflock)  :offset-assert 180)
   (heading           float   :offset-assert 184)
   (tilt              float   :offset-assert 188)
   (max-tilt          float   :offset-assert 192)
   (angletan          float   :offset-assert 196)
   (target-dist       float   :offset-assert 200)
   (scared            int32   :offset-assert 204)
   (temp-heading      float   :offset-assert 208)
   (temp-heading-time int32   :offset-assert 212)
   (part-time         time-frame  :offset-assert 216)
   (thrust            float   :offset-assert 224)
   (teleport          symbol  :offset-assert 228)
   )
  :method-count-assert 28
  :heap-base           #x80
  :size-assert         #xe8
  :flag-assert         #x1c008000e8
  (:methods
    (move-vertically! (_type_ symbol) none 20)
    (adjust-heading-around-point-slow! (_type_ float) none 21)
    (seagull-method-22 (_type_) none 22)
    (adjust-heading-around-point! (_type_ float) none 23)
    (seagull-method-24 (_type_) none 24)
    (seagull-method-25 (_type_ float) none 25)
    (seagull-method-26 (_type_) symbol 26)
    (seagull-method-27 (_type_) none 27)
    )
  (:states
    (seagull-idle)
    (seagull-soaring)
    (seagull-flying)
    (seagull-landing float)
    (seagull-takeoff))
  )

(deftype seagullflock (process)
  ((self-override      seagullflock :score 100         :offset 28)
   (path               path-control           :offset-assert 112)
   (trans              vector  :inline :offset-assert 128)
   (bird               (pointer seagull) 64      :offset-assert 144)
   (birds              int32           :offset-assert 400)
   (link               actor-link-info           :offset-assert 404)
   (bird-at-waterfall  uint64          :offset-assert 408)
   (birds-at-waterfall int32           :offset-assert 416)
   (target             vector  :inline :offset-assert 432)
   (targetnum          int32           :offset-assert 448)
   (alert-time         time-frame          :offset-assert 456)
   (teleport-frames    int32           :offset-assert 464)
   (cam-tracker        uint64          :offset-assert 472)
   (state-time         time-frame          :offset-assert 480)
   (squall             ambient-sound           :offset-assert 488)
   (max-lift           float           :offset-assert 492)
   )
  :method-count-assert 17
  :size-assert         #x1f0
  :heap-base           #x180
  :flag-assert         #x11018001f0
  (:methods
    (spawn-bird (_type_ vector) (pointer process) 14)
    (play-hint (_type_ int) none 15)
    (seagullflock-method-16 (_type_ seagull) float 16)
    )
  (:states
    (seagullflock-idle)
    (seagullflock-at-waterfall))
  )

;; - Functions

(define-extern seagull-init-by-other (function vector int seagullflock none :behavior seagull))
(define-extern seagull-reaction (function collide-shape-moving collide-shape-intersect vector vector cshape-moving-flags))
(define-extern seagull-post (function none :behavior seagull))
(define-extern beach-rock-trigger (function int))

;; - Unknowns

(define-extern sound-seagull-squall sound-spec)
(define-extern aybabtu (function int int)) ;; this is just sceCdMmode
(define-extern *seagull-sg* skeleton-group)
(define-extern *seagull-boxes* (inline-array air-box))


;; ----------------------
;; File - beach-part
;; Source Path - levels/beach/beach-part.gc
;; Containing DGOs - ['BEA', 'L1']
;; Version - 3

;; - Types

(deftype beach-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  (:states
    beach-part-grotto-1)
  )

;; - Unknowns

(define-extern sound-beach-waterfall sound-spec)


;; ----------------------
;; File - villagep-obs
;; Source Path - levels/village_common/villagep-obs.gc
;; Containing DGOs - ['CIT', 'L1', 'VI1', 'VI2', 'VI3', 'VILLAGEP']
;; Version - 3

;; - Types

(deftype warpgate (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype warp-gate-switch (basebutton)
  ((warp handle  :offset-assert 256)
   )
  :method-count-assert 33
  :size-assert         #x108
  :heap-base           #xa0
  :flag-assert         #x2100a00108
  (:methods
    (pressable? (_type_) symbol 32)
    )
  )

(deftype village-cam (process)
  ((root-override       trsq   :score 100 :offset-assert 112)
   (range      meters  :offset-assert 116)
   (index      int32   :offset-assert 120)
   (state-time time-frame  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x88
  :heap-base           #x20
  :flag-assert         #xf00200088
  (:methods
    (idle () _type_ :state 14)
    )
  )

;; - Functions

(define-extern warp-gate-init-by-other (function vector none :behavior warp-gate))
(define-extern get-next-slot-up (function warp-gate int int))
(define-extern get-next-slot-down (function warp-gate int int))
(define-extern print-level-name (function int font-context int int font-context))

;; - Unknowns

(define-extern *village-cam-sg* skeleton-group)
(define-extern *warp-gate-switch-sg* skeleton-group)


;; ----------------------
;; File - oracle
;; Source Path - levels/village_common/oracle.gc
;; Containing DGOs - ['CIT', 'L1', 'VI1', 'VI2', 'VI3', 'VILLAGEP']
;; Version - 3

;; - Types

(deftype oracle (process-taskable)
  ((first-task     uint8   :offset-assert 380)
   (second-task    uint8   :offset-assert 381)
   (left-eye-cell  handle  :offset-assert 384)
   (right-eye-cell handle  :offset-assert 392)
   )
  :method-count-assert 53
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x3501200190
  )

;; - Unknowns

(define-extern *oracle-sg* skeleton-group)


;; ----------------------
;; File - battlecontroller
;; Source Path - levels/common/battlecontroller.gc
;; Containing DGOs - ['CIT', 'L1', 'MIS', 'SWA']
;; Version - 3

;; - Types

(deftype battlecontroller-spawner (structure)
  ((path          path-control   :offset-assert 0)
   (creature      handle  :offset-assert 8)
   (trigger-actor entity-actor   :offset-assert 16)
   (blocker-actor entity-actor   :offset-assert 20)
   (state         int8    :offset-assert 24)
   (enabled       symbol   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype battlecontroller-creature-type (structure)
  ((type2            type  :offset-assert 0) ; a guess
   (percent          float  :offset-assert 4)
   (pickup-percent   float  :offset-assert 8)
   (pickup-type      pickup-type  :offset-assert 12)
   (max-pickup-count int8   :offset-assert 16)
   (pickup-count     int8   :offset-assert 17)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

(deftype battlecontroller (process-drawable)
  ((final-pickup-spawn-point    vector  :inline :offset-assert 176)
   (activate-distance           float           :offset-assert 192)
   (max-spawn-count             int16           :offset-assert 196)
   (spawn-count                 int16           :offset-assert 198)
   (die-count                   int16           :offset-assert 200)
   (target-count                int8            :offset-assert 202)
   (spawner-count               int8            :offset-assert 203)
   (creature-type-count         int8            :offset-assert 204)
   (spawner-array               battlecontroller-spawner 8 :inline :offset-assert 208)
   (spawn-period                time-frame          :offset-assert 464)
   (path-spawn                  path-control           :offset-assert 472)
   (creature-type-array         battlecontroller-creature-type 4 :inline :offset-assert 476)
   (final-pickup-type           pickup-type      :offset-assert 604)
   (prespawn                    symbol           :offset-assert 608)
   (noticed-player              symbol           :offset-assert 612)
   (camera-on                   symbol           :offset-assert 616)
   (misty-ambush-collision-hack symbol           :offset-assert 620)
   (disable-ocean               symbol           :offset-assert 624)
   (disable-near-ocean          symbol           :offset-assert 628)
   (disable-mid-ocean           symbol           :offset-assert 632)
   )
  :method-count-assert 29
  :size-assert         #x27c
  :heap-base           #x210
  :flag-assert         #x1d0210027c
  ;; inherited inspect of process-drawable
  (:methods
    (battlecontroller-method-20 () none 20)
    (battlecontroller-idle () _type_ :state 21)
    (battlecontroller-play-intro-camera ()  _type_ :state 22)
    (battlecontroller-method-23 () none 23)
    (battlecontroller-active ()  _type_ :state 24)
    (battlecontroller-method-25 () none 25)
    (battlecontroller-die () _type_ :state 26)
    (battlecontroller-method-27 (_type_) none 27) ;; has pairs
    (cleanup-if-finished! (_type_) none 28)
    )
  )

;; - Functions

(define-extern battlecontroller-task-completed? (function symbol :behavior battlecontroller))
(define-extern battlecontroller-off (function none :behavior battlecontroller))
(define-extern battlecontroller-camera-on (function object :behavior battlecontroller))
(define-extern battlecontroller-spawn-creature-random-spawner (function none :behavior battlecontroller))
(define-extern battlecontroller-disable-ocean (function none :behavior battlecontroller))
(define-extern battlecontroller-update-spawners (function none :behavior battlecontroller))
(define-extern battlecontroller-fill-all-spawners (function none :behavior battlecontroller))
(define-extern battlecontroller-battle-begin (function none :behavior battlecontroller))
(define-extern battlecontroller-spawn-creature-at-spawner (function int int none :behavior battlecontroller))
(define-extern battlecontroller-spawn-creature (function vector vector handle :behavior battlecontroller))
(define-extern battlecontroller-spawners-full? (function symbol :behavior battlecontroller))
(define-extern battlecontroller-default-event-handler (function process int symbol event-message-block object :behavior battlecontroller))
(define-extern battlecontroller-draw-debug (function none :behavior battlecontroller))
(define-extern battlecontroller-camera-off (function none :behavior battlecontroller))
(define-extern battlecontroller-battle-end (function none :behavior battlecontroller))
(define-extern battlecontroller-special-contents? (function symbol :behavior battlecontroller))
(define-extern battlecontroller-special-contents-collected? (function symbol :behavior battlecontroller))
(define-extern battlecontroller-set-special-contents-collected (function none :behavior battlecontroller))
(define-extern battlecontroller-set-task-completed  (function none :behavior battlecontroller))


;; ----------------------
;; File - citadel-part
;; Source Path - levels/citadel/citadel-part.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(deftype citb-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern check-drop-level-firehose-pops (function sparticle-system sparticle-cpuinfo vector none))
(define-extern birth-func-random-rot (function sparticle-system sparticle-cpuinfo matrix none))


;; ----------------------
;; File - citadel-obs
;; Source Path - levels/citadel/citadel-obs.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(deftype citb-arm-section (process-drawable)
  ((sync           sync-info :inline :offset-assert 176)
   (cull-dir-local vector    :inline :offset-assert 192)
   (cull-dot       float             :offset-assert 208)
   (rot-scale      float             :offset-assert 212)
   (y-angle        float             :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  (:methods
    (init-root! (_type_) none 20)
    (setup-new-process! (_type_) none 21)
    (idle () _type_ :state 22)
    )
  )

(deftype citb-arm (citb-arm-section)
  ((root-override  collide-shape-moving :score 100 :offset 112))
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-shoulder (citb-arm-section)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-a (citb-arm)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-b (citb-arm)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-c (citb-arm)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-d (citb-arm)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-shoulder-a (citb-arm-shoulder)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-arm-shoulder-b (citb-arm-shoulder)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x17007000dc
  )

(deftype citb-disc (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (sync          sync-info :inline :offset-assert 176)
   (rot-scale     float             :offset-assert 184)
   )
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  (:methods
    (init! (_type_) none 20)
    (citb-disc-method-21 (_type_) none 21)
    )
  (:states
    citb-disc-idle)
  )

(deftype citb-disc-a (citb-disc)
  ()
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  )

(deftype citb-disc-b (citb-disc)
  ()
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  )

(deftype citb-disc-c (citb-disc)
  ()
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  )

(deftype citb-disc-d (citb-disc)
  ()
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  )

(deftype citb-iris-door (eco-door)
  ()
  :method-count-assert 27
  :size-assert         #x104
  :heap-base           #xa0
  :flag-assert         #x1b00a00104
  )

(deftype citb-button (basebutton)
  ()
  :method-count-assert 32
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x2000900100
  )

(deftype citb-launcher (plat)
  ((launcher (pointer launcher)  :offset-assert 264)
   )
  :method-count-assert 33
  :size-assert         #x10c
  :heap-base           #xa0
  :flag-assert         #x2100a0010c
  )

(deftype citb-robotboss (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (shield-on symbol  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    citb-robotboss-die
    citb-robotboss-idle)
  )

(deftype citb-coil (process-drawable)
  ((part-off sparticle-launch-control  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    citb-coil-broken
    citb-coil-idle
    citb-coil-break)
  )

(deftype citb-hose (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    citb-hose-die
    citb-hose-idle
    citb-hose-spawn)
  )

(deftype citb-chains (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype citb-generator (process-drawable)
  ((root-override   collide-shape :score 100 :offset 112)
   (normal-look     lod-set :inline :offset-assert 176)
   (broken-look     lod-set :inline :offset-assert 212)
   (mushroom-pos    vector  :inline :offset-assert 256)
   (mushroom        symbol           :offset-assert 272)
   (birth-fuel-cell symbol           :offset-assert 276)
   (trigger-others  symbol           :offset-assert 280) ; a guess
   (part-broken     sparticle-launch-control           :offset-assert 284)
   (part-mushroom   sparticle-launch-control           :offset-assert 288)
   )
  :method-count-assert 22
  :size-assert         #x124
  :heap-base           #xc0
  :flag-assert         #x1600c00124
  (:methods
    (init! (_type_) none 20)
    (citb-generator-method-21 (_type_) none 21)
    )
  (:states
    citb-generator-broken
    citb-generator-idle
    citb-generator-break)
  )

(deftype citadelcam (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    citadelcam-idle
    citadelcam-stair-plats)
  )

(deftype citb-battlecontroller (battlecontroller)
  ()
  :method-count-assert 29
  :size-assert         #x27c
  :heap-base           #x210
  :flag-assert         #x1d0210027c
  )

;; - Functions

(define-extern citb-generator-trigger-others (function none :behavior citb-generator))
(define-extern citb-hose-event-handler (function process int symbol event-message-block object :behavior citb-hose))

;; - Unknowns

(define-extern *citadelcam-sg* skeleton-group)
(define-extern *citb-generator-sg* skeleton-group)
(define-extern *citb-generator-broken-sg* skeleton-group)
(define-extern *citb-hose-sg* skeleton-group)
(define-extern *citb-coil-sg* skeleton-group)
(define-extern *citb-robotboss-sg* skeleton-group)
(define-extern *citb-robotboss-nose-sg* skeleton-group)
(define-extern *citb-robotboss-head-sg* skeleton-group)
(define-extern *citb-robotboss-gun-sg* skeleton-group)
(define-extern *citb-robotboss-leftshoulder-sg* skeleton-group)
(define-extern *citb-robotboss-rightshoulder-sg* skeleton-group)
(define-extern *citb-robotboss-leftarm-sg* skeleton-group)
(define-extern *citb-robotboss-rightarm-sg* skeleton-group)
(define-extern *citb-robotboss-belly-sg* skeleton-group)
(define-extern *citb-launcher-sg* skeleton-group)
(define-extern *citb-button-sg* skeleton-group)
(define-extern *citb-iris-door-sg* skeleton-group)
(define-extern *citb-disc-d-sg* skeleton-group)
(define-extern *citb-disc-c-sg* skeleton-group)
(define-extern *citb-disc-b-sg* skeleton-group)
(define-extern *citb-disc-a-sg* skeleton-group)
(define-extern *citb-arm-shoulder-b-sg* skeleton-group)
(define-extern *citb-arm-shoulder-a-sg* skeleton-group)
(define-extern *citb-arm-d-sg* skeleton-group)
(define-extern *citb-arm-c-sg* skeleton-group)
(define-extern *citb-arm-b-sg* skeleton-group)
(define-extern *citb-arm-a-sg* skeleton-group)


;; ----------------------
;; File - citb-plat
;; Source Path - levels/citadel/citb-plat.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(deftype citb-base-plat (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (idle-distance float  :offset-assert 176)
   )
  :method-count-assert 25
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x19005000b4
  ;; inherited inspect of process-drawable
  (:methods
    (citb-base-plat-idle () _type_ :state 20) ;; state
    (citb-base-plat-method-21 (_type_) none 21)
    (citb-base-plat-method-22 (_type_) none 22)
    (citb-base-plat-active () _type_ :state 23) ;; state
    (citb-base-plat-method-24 (_type_) none 24)
    )
  )

(deftype citb-plat-eco (plat-eco)
  ()
  :method-count-assert 33
  :size-assert         #x165
  :heap-base           #x100
  :flag-assert         #x2101000165
  )

(deftype citb-plat (plat)
  ((trans-offset vector :inline :offset-assert 272)
   )
  :method-count-assert 33
  :size-assert         #x120
  :heap-base           #xb0
  :flag-assert         #x2100b00120
  )

(deftype citb-stair-plat (citb-base-plat)
  ((idle-height float   :offset-assert 180)
   (rise-height float   :offset-assert 184)
   (delay       time-frame  :offset-assert 192)
   (rise        symbol   :offset-assert 200) ; educated guess
   )
  :method-count-assert 25
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x19006000cc
  )

(deftype citb-chain-plat (rigid-body-platform)
  ((orig-trans   vector     :inline :offset-assert 736)
   (orig-quat    quaternion :inline :offset-assert 752)
   (beam-end     vector     :inline :offset-assert 768)
   (float-offset float              :offset-assert 784)
   (idle-offset  float              :offset-assert 788)
   )
  :method-count-assert 35
  :heap-base           #x2b0
  :size-assert         #x318
  :flag-assert         #x2302b00318
  (:states
    citb-chain-plat-settle)
  )

(deftype citb-rotatebox (citb-base-plat)
  ()
  :method-count-assert 25
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x19005000b4
  )

(deftype citb-donut (citb-base-plat)
  ((sync sync-info :inline :offset-assert 180)
   )
  :method-count-assert 25
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x19005000bc
  )

(deftype citb-stopbox (plat)
  ()
  :method-count-assert 33
  :size-assert         #x108
  :heap-base           #xa0
  :flag-assert         #x2100a00108
  )

(deftype citb-firehose (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (idle-distance float             :offset-assert 176)
   (sync          sync-info :inline :offset-assert 180)
   (last-sync     float             :offset-assert 188)
   (blast-pos     vector    :inline :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x14006000d0
  (:states
    citb-firehose-idle
    citb-firehose-active
    citb-firehose-blast)
  )

(deftype citb-exit-plat (plat-button)
  ((idle-height float  :offset-assert 240)
   (rise-height float  :offset-assert 244)
   (activated   symbol  :offset-assert 248)
   )
  :method-count-assert 33
  :size-assert         #xfc
  :heap-base           #x90
  :flag-assert         #x21009000fc
  (:states
    citb-exit-plat-idle
    citb-exit-plat-rise)
  )

;; - Functions

(define-extern citb-exit-plat-move-player (function vector none :behavior citb-exit-plat))
(define-extern citb-firehose-blast-particles (function object :behavior citb-firehose))

;; - Unknowns

(define-extern *citb-exit-plat-sg* skeleton-group)
(define-extern *citb-firehose-sg* skeleton-group)
(define-extern *citb-stopbox-sg* skeleton-group)
(define-extern *citb-donut-sg* skeleton-group)
(define-extern *citb-rotatebox-sg* skeleton-group)
(define-extern *citb-chain-plat-sg* skeleton-group)
(define-extern *citb-chain-plat-constants* rigid-body-platform-constants)
(define-extern *plat-citb-sg* skeleton-group)
(define-extern *plat-eco-citb-lit-sg* skeleton-group)
(define-extern *plat-eco-citb-unlit-sg* skeleton-group)


;; ----------------------
;; File - citadel-sages
;; Source Path - levels/citadel/citadel-sages.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(declare-type citb-sage process-taskable)
(deftype citb-sagecage (process-drawable)
  ((parent-override (pointer citb-sage) :score 100 :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112)
   (bar-array    vector 12  :inline :score 100 :offset-assert 176)
   (angle-offset float      :offset-assert 368)
   (bars-on      symbol      :offset-assert 372)
   (cloning      symbol      :offset-assert 376)
   )
  :method-count-assert 22
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x160110017c
  (:methods
    (citb-sagecage-method-20 (_type_) none 20)
    (citb-sagecage-method-21 (_type_) none 21)
    )
  (:states
    citb-sagecage-idle)
  )

(deftype citb-sage (process-taskable)
  ((spawn-pos         vector :inline :offset-assert 384)
   (target-pos        vector :inline :offset-assert 400)
   (dir               vector :inline :offset-assert 416)
   (rot-y             float          :offset-assert 432)
   (rot-x             float          :offset-assert 436)
   (idle-anim         int32          :offset-assert 440)
   (attack-start-anim int32          :offset-assert 444)
   (attack-anim       int32          :offset-assert 448)
   (beam-joint        int32          :offset-assert 452)
   (cage              handle         :offset-assert 456)
   (part-impact       sparticle-launch-control          :offset-assert 464)
   (beam-on           symbol          :offset-assert 468)
   (resolution-anim   spool-anim          :offset-assert 472)
   (sound-name        string          :offset-assert 476)
   (sound-id          sound-id       :offset-assert 480)
   (alt-actor         entity-actor          :offset-assert 484)
   )
  :method-count-assert 53
  :size-assert         #x1e8
  :heap-base           #x180
  :flag-assert         #x35018001e8
  )

(deftype red-sagecage (citb-sage)
  ()
  :method-count-assert 53
  :size-assert         #x1e8
  :heap-base           #x180
  :flag-assert         #x35018001e8
  )

(deftype blue-sagecage (citb-sage)
  ()
  :method-count-assert 53
  :size-assert         #x1e8
  :heap-base           #x180
  :flag-assert         #x35018001e8
  )

(deftype yellow-sagecage (citb-sage)
  ()
  :method-count-assert 53
  :size-assert         #x1e8
  :heap-base           #x180
  :flag-assert         #x35018001e8
  )

(deftype green-sagecage (citb-sage)
  ((which-movie int32   :offset-assert 488)
   (evilbro     handle  :offset-assert 496)
   (evilsis     handle  :offset-assert 504)
   (robotboss   handle  :offset-assert 512)
   (exitplat    handle  :offset-assert 520)
   )
  :method-count-assert 53
  :size-assert         #x210
  :heap-base           #x1a0
  :flag-assert         #x3501a00210
  )

;; - Functions

(define-extern citb-sage-draw-beam (function object :behavior citb-sage))
(define-extern citb-sagecage-init-by-other (function citb-sage none :behavior citb-sagecage))
(define-extern citb-sagecage-update-collision (function none :behavior citb-sagecage))
(define-extern citb-sagecage-draw-bars (function none :behavior citb-sagecage))

;; - Unknowns

(define-extern *green-sagecage-sg* skeleton-group)
(define-extern *robotboss-sg* skeleton-group)
(define-extern *evilbro-citadel-sg* skeleton-group)
(define-extern *evilsis-citadel-sg* skeleton-group)
(define-extern *yellowsage-sg* skeleton-group)
(define-extern *bluesage-sg* skeleton-group)
(define-extern *redsage-sg* skeleton-group)
(define-extern *citb-sagecage-sg* skeleton-group)


;; ----------------------
;; File - snow-bunny
;; Source Path - levels/common/snow-bunny.gc
;; Containing DGOs - ['CIT', 'L1', 'SNO']
;; Version - 3

;; - Types

(deftype snow-bunny (nav-enemy)
  ((patrol-rand-distraction int32          :offset-assert 400)
   (base-hop-dist           float          :offset-assert 404)
   (halfway-dist            float          :offset-assert 408)
   (retreat-timeout         float          :offset-assert 412)
   (gnd-popup               float          :offset-assert 416)
   (jump-height-min         float          :offset-assert 420)
   (jump-height-factor      float          :offset-assert 424)
   (jump-anim-start-frame   float          :offset-assert 428)
   (defense                 uint64         :offset-assert 432)
   (retreat-timeout-time    time-frame         :offset-assert 440)
   (last-nondangerous-time  time-frame         :offset-assert 448)
   (patrol-hop-failed?      basic          :offset-assert 456)
   (should-retreat?         basic          :offset-assert 460)
   (got-jump-event?         symbol         :offset-assert 464)
   (using-jump-event?       basic          :offset-assert 468)
   (jump-anim               int8           :offset-assert 472)
   (notice-land-anim        int8           :offset-assert 473)
   (attack-anim             int8           :offset-assert 474)
   (final-dest              vector :inline :offset-assert 480)
   (jump-event-dest         vector :inline :offset-assert 496)
   )
  :method-count-assert 77
  :size-assert         #x200
  :heap-base           #x190
  :flag-assert         #x4d01900200
  (:methods
    (snow-bunny-method-51 (_type_ vector vector) symbol :replace 51)
    (snow-bunny-method-52 (_type_) symbol :replace 52)
    (snow-bunny-method-54 (_type_) symbol :replace 54)
    (snow-bunny-method-57 (_type_) symbol :replace 57)
    (snow-bunny-method-60 (_type_) none :replace 60)
    (snow-bunny-method-76 (_type_ symbol) none 76)
    )
  )

(deftype snow-bunny-retreat-work (structure)
  ((found-best        basic          :offset-assert 0)
   (using-jump-event? basic          :offset-assert 4)
   (best-travel-dist  float          :offset-assert 8)
   (best-dest         vector :inline :offset-assert 16)
   (away-vec          vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; - Functions

(define-extern snow-bunny-execute-jump (function none :behavior snow-bunny))
(define-extern snow-bunny-initialize-jump (function vector none :behavior snow-bunny))
(define-extern snow-bunny-default-event-handler (function process int symbol event-message-block object :behavior snow-bunny))

;; - Unknowns

(define-extern *snow-bunny* (pointer snow-bunny))
(define-extern *snow-bunny-nav-enemy-info* nav-enemy-info)
(define-extern *snow-bunny-sg* skeleton-group)


;; ----------------------
;; File - citb-bunny
;; Source Path - levels/citadel/citb-bunny.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(deftype citb-bunny (snow-bunny)
  ()
  :method-count-assert 77
  :size-assert         #x200
  :heap-base           #x190
  :flag-assert         #x4d01900200
  (:methods
    (citb-bunny-method-48 (_type_ object) none :replace 48)) ;; object past to method 60
  )

;; - Unknowns

(define-extern *citb-bunny-nav-enemy-info* nav-enemy-info)
(define-extern *citb-bunny-sg* skeleton-group)


;; ----------------------
;; File - citb-drop-plat-CIT
;; Source Path - levels/citadel/citb-drop-plat-CIT.gc
;; Containing DGOs - ['CIT']
;; Version - 3

;; - Types

(deftype drop-plat (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (spin-axis  vector :inline :offset-assert 176)
   (spin-angle float          :offset-assert 192)
   (spin-speed float          :offset-assert 196)
   (interp     float          :offset-assert 200)
   (duration   time-frame          :offset-assert 208)
   (delay      time-frame          :offset-assert 216)
   (color      int8           :offset-assert 224)
   )
  :method-count-assert 22
  :size-assert         #xe1
  :heap-base           #x80
  :flag-assert         #x16008000e1
  (:methods
    (drop-plat-method-20 (_type_) none 20)
    (drop-plat-method-21 (_type_) none 21)
    )
  (:states
    drop-plat-spawn
    drop-plat-die
    drop-plat-idle
    drop-plat-drop
    (drop-plat-rise draw-control))
  )

(deftype handle-inline-array (inline-array-class)
  ((data             handle :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype citb-drop-plat (process-drawable)
  ((x-count           int32          :offset-assert 176)
   (z-count           int32          :offset-assert 180)
   (child-count       int32          :offset-assert 184)
   (child-array       handle-inline-array          :offset-assert 188)
   (child-color-array (pointer int8)         :offset-assert 192)
   (x-dir             vector :inline :offset-assert 208)
   (z-dir             vector :inline :offset-assert 224)
   (origin            vector :inline :offset-assert 240)
   (x-spacing         float          :offset-assert 256)
   (z-spacing         float          :offset-assert 260)
   (idle-distance     float          :offset-assert 264)
   (duration          time-frame          :offset-assert 272)
   (drop-time         time-frame          :offset-assert 280)
   )
  :method-count-assert 20
  :size-assert         #x120
  :heap-base           #xb0
  :flag-assert         #x1400b00120
  (:states
    citb-drop-plat-idle
    citb-drop-plat-active)
  )

;; - Functions

(define-extern citb-drop-plat-spawn-children (function none :behavior citb-drop-plat))
(define-extern citb-drop-plat-drop-children (function int none :behavior citb-drop-plat))
(define-extern citb-drop-plat-drop-all-children (function symbol :behavior citb-drop-plat))
(define-extern drop-plat-init-by-other (function vector time-frame time-frame int none :behavior drop-plat))
(define-extern drop-plat-set-fade (function none :behavior drop-plat))

;; - Unknowns

(define-extern *citb-drop-plat-red-sg* skeleton-group)
(define-extern *citb-drop-plat-green-sg* skeleton-group)
(define-extern *citb-drop-plat-blue-sg* skeleton-group)
(define-extern *citb-drop-plat-yellow-sg* skeleton-group)
(define-extern *citb-drop-plat-sg* skeleton-group)


;; ----------------------
;; File - assistant-citadel
;; Source Path - levels/citadel/assistant-citadel.gc
;; Containing DGOs - ['CIT', 'L1']
;; Version - 3

;; - Types

(deftype assistant-lavatube-end (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *assistant-lavatube-end-sg* skeleton-group)


;; ----------------------
;; File - darkcave-obs
;; Source Path - levels/darkcave/darkcave-obs.gc
;; Containing DGOs - ['DAR', 'L1']
;; Version - 3

;; - Types

(deftype cavecrystal (process-drawable)
  ((root-override              collide-shape  :score 100 :offset 112)
   (is-master?                 symbol          :offset-assert 176)
   (crystal-id                 int32          :offset-assert 180)
   (glow-u                     float          :offset-assert 184)
   (glow-wf-period             int32          :offset-assert 188)
   (glow-wf-offset             int32          :offset-assert 192)
   (prev-compute-glow-time     time-frame         :offset-assert 200)
   (start-fade-time            time-frame         :offset-assert 208)
   (end-fade-time              time-frame         :offset-assert 216)
   (activated-time             time-frame         :offset-assert 224)
   (last-updated-user-lighting time-frame         :offset-assert 232)
   (player-attack-id           uint64         :offset-assert 240)
   (on-color-mult              vector :inline :offset-assert 256)
   (on-color-emissive          vector :inline :offset-assert 272)
   (off-color-mult             vector :inline :offset-assert 288)
   (off-color-emissive         vector :inline :offset-assert 304)
   )
  :method-count-assert 22
  :size-assert         #x140
  :heap-base           #xd0
  :flag-assert         #x1600d00140
  (:methods
    (update-connected-crystals! (_type_) none 20)
    (compute-glow (_type_) float 21)
    )
  (:states
    cavecrystal-active
    cavecrystal-idle)
  )

;; - Unknowns

(declare-type cavecrystal-light-control basic)
(define-extern *cavecrystal-sg* skeleton-group)
(define-extern *cavecrystal-light-control* cavecrystal-light-control)


;; ----------------------
;; File - demo-obs
;; Source Path - levels/demo/demo-obs.gc
;; Containing DGOs - ['DEM', 'L1']
;; Version - 3

;; - Functions

(declare-type static-screen process)
(define-extern static-screen-spawn (function int texture-id texture-id texture-id time-frame symbol process-tree (pointer static-screen)))


;; ----------------------
;; File - static-screen
;; Source Path - levels/common/static-screen.gc
;; Containing DGOs - ['DEM', 'L1', 'TIT']
;; Version - 3

;; - Types

(deftype static-screen (process)
  ((part       sparticle-launch-control 1 :offset-assert 112)
   (state-time time-frame    :offset-assert 120)
   )
  :method-count-assert 15
  :size-assert         #x80
  :heap-base           #x10
  :flag-assert         #xf00100080
  (:methods
    (idle (int time-frame symbol) _type_ :state 14)
    )
  )

;; - Functions

(define-extern static-screen-init-by-other (function int texture-id texture-id texture-id time-frame symbol none :behavior static-screen))


;; ----------------------
;; File - robotboss-h
;; Source Path - levels/finalboss/robotboss-h.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

;; definition of type robotboss-dda
(deftype robotboss-dda (structure)
  ((blue-bomb-time       float  :offset-assert   0)
   (num-blobs            int32  :offset-assert   4)
   (green-bomb-time      float  :offset-assert   8)
   (red-shots-min        int32  :offset-assert  12)
   (red-shots-rnd        int32  :offset-assert  16)
   (red-shot-time-min    float  :offset-assert  20)
   (red-shot-time-rnd    float  :offset-assert  24)
   (red-bomb-time        float  :offset-assert  28)
   (yellow-shot-time-min float  :offset-assert  32)
   (yellow-shot-time-rnd float  :offset-assert  36)
   (yellow-gun-hits      int32  :offset-assert  40)
   (yellow-bomb-time     float  :offset-assert  44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype robotboss (process-drawable)
  ((root-override    collide-shape-moving :score 100 :offset 112) ;; custom
   (alts             entity-actor             13      :offset-assert 176)
   (desired-loc      vector                   :inline :offset-assert 240)
   (old-loc          vector                   :inline :offset-assert 256)
   (loc-t            float                            :offset-assert 272)
   (loc-t-start      time-frame                            :offset-assert 280)
   (loc-t-duration   time-frame                            :offset-assert 288)
   (hits-to-go       int32                            :offset-assert 296)
   (took-hit         symbol                           :offset-assert 300)
   (children-spawned int32                            :offset-assert 304)
   (vulnerable       int64                            :offset-assert 312)
   (till-next-shot   int64                            :offset-assert 320)
   (shot-attractor   handle                           :offset-assert 328)
   (desired-pool-y   float                            :offset-assert 336)
   (particle         sparticle-launch-control 7       :offset-assert 340)
   (blue-smoke       symbol                           :offset-assert 368)
   (red-smoke        symbol                           :offset-assert 372)
   (yellow-smoke     symbol                           :offset-assert 376)
   (white-eco        handle                           :offset-assert 384)
   (des-cam-entity   string                           :offset-assert 392)
   (use-interesting  symbol                           :offset-assert 396)
   (ignore-camera    symbol                           :offset-assert 400)
   (ambient          ambient-control          :inline :offset-assert 408)
   (yellow-gun       joint-mod                        :offset-assert 424)
   (palette-val      float                            :offset-assert 428)
   (looping-sound    ambient-sound            4       :offset-assert 432)
   (dda              robotboss-dda                    :offset-assert 448)
   (valid-frames     int32                            :offset-assert 452)
   (skip-cut         symbol                           :offset-assert 456)
   (keep-charging    symbol                           :offset-assert 460)
   )
  :heap-base #x160
  :method-count-assert 21
  :size-assert         #x1d0
  :flag-assert         #x15016001d0
  (:methods
    (ease-loc-t (_type_) float 20)
    )
  (:states
    robotboss-blue-wait
    robotboss-blue-dark-bomb
    robotboss-blue-dark-bomb-wait
    robotboss-green
    robotboss-green-wait
    robotboss-green-dark-bomb
    robotboss-green-dark-bomb-wait
    robotboss-red
    robotboss-red-wait
    robotboss-red-dark-bomb
    robotboss-red-dark-bomb-wait
    robotboss-yellow
    robotboss-yellow-wait
    robotboss-yellow-dark-bomb
    robotboss-white-eco-movie
    robotboss-daxter-sacrifice-movie
    robotboss-yellow-dark-bomb-wait)
  )

;; - Functions

(define-extern target-has-all-the-cells? (function symbol :behavior process))


;; ----------------------
;; File - sage-finalboss-part
;; Source Path - levels/finalboss/sage-finalboss-part.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Functions

(define-extern check-drop-level-eichar-lighteco-pops (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-drop-level-bigdoor-open-pops (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - light-eco
;; Source Path - levels/finalboss/light-eco.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype light-eco-child (process-drawable)
  ((root-override  collide-shape  :score 20 :offset 112)
   (angle-bit          int32              :offset-assert 176)
   (ground-y           float              :offset-assert 180)
   (falling-start-time time-frame             :offset-assert 184)
   (last-update-time   time-frame             :offset-assert 192)
   (rot                vector     :inline :offset-assert 208)
   (rotv               vector     :inline :offset-assert 224)
   (traj               trajectory :inline :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1500b00118
  ;; inherited inspect of process-drawable
  (:methods
    (common-trans (_type_) none 20)
    )
  (:states
    light-eco-child-grabbed
    light-eco-child-hit-ground
    light-eco-child-idle
    light-eco-child-die
    light-eco-child-appear
    )
  )

(deftype light-eco-mother (process-drawable)
  ((player-got-eco?   symbol   :offset-assert 176)
   (angle-mask        int64   :offset-assert 184)
   (delay-til-spawn   int32   :offset-assert 192)
   (part2             sparticle-launch-control   :offset-assert 196) ;; guess
   (last-update-time  time-frame  :offset-assert 200)
   (last-spawned-time time-frame  :offset-assert 208)
   )
  :method-count-assert 22
  :size-assert         #xd8
  :heap-base           #x70
  :flag-assert         #x16007000d8
  (:methods
    (spawn-child-eco (_type_) symbol 20)
    (common-trans (_type_) none 21)
    )
  (:states
    light-eco-mother-discipate
    light-eco-mother-active
    light-eco-mother-appear
    )
  )

;; - Functions

(define-extern light-eco-child-init-by-other (function entity-actor vector vector int none :behavior light-eco-child))
(define-extern check-drop-level-lighteco-big-pops (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-drop-level-lighteco-pops (function sparticle-system sparticle-cpuinfo vector none))
(define-extern light-eco-child-default-event-handler (function process int symbol event-message-block object :behavior light-eco-child))
(define-extern light-eco-mother-default-event-handler (function process int symbol event-message-block int :behavior light-eco-mother))
(define-extern light-eco-mother-init-by-other (function entity-actor vector none :behavior light-eco-mother))

;; - Unknowns

(define-extern *light-eco-big-sg* skeleton-group)
(define-extern *light-eco-small-sg* skeleton-group)


;; ----------------------
;; File - robotboss-weapon
;; Source Path - levels/finalboss/robotboss-weapon.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype torus (structure)
  ((origin           vector :inline :offset-assert 0)
   (axis             vector :inline :offset-assert 16)
   (radius-primary   float          :offset-assert 32)
   (radius-secondary float          :offset-assert 36)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (torus-method-9 (_type_ vector) none 9)
    (torus-method-10 (_type_ collide-prim-core vector) symbol 10)
    (torus-method-11 (_type_ vector) symbol 11)
    (torus-method-12 (_type_ vector) vector 12)
    )
  )

(deftype torus-verts (structure)
  ((vert vector 8 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype arcing-shot (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (y-vel float          :offset-assert 176)
   (grav  float          :offset-assert 180)
   (from  vector :inline :offset-assert 192)
   (to    vector :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x14007000e0
  (:states
    arcing-shot-debug-trajectory)
  )

(deftype darkecobomb (arcing-shot)
  ((flight-time    time-frame  :offset-assert 224)
   (countdown-time float   :offset-assert 232)
   (anim-speed     float   :offset-assert 236)
   (next-tick      float   :offset-assert 240)
   )
  :method-count-assert 20
  :size-assert         #xf4
  :heap-base           #x90
  :flag-assert         #x14009000f4
  (:states
    darkecobomb-idle
    darkecobomb-land
    darkecobomb-countdown
    (darkecobomb-explode symbol))
  )

(deftype greenshot (arcing-shot)
  ((flight-time time-frame  :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x14008000e8
  (:states
    greenshot-idle)
  )

(deftype redshot (arcing-shot)
  ((flight-time     time-frame         :offset-assert 224)
   (stall-time      time-frame         :offset-assert 232)
   (ring            torus  :inline :offset-assert 240)
   (rotation-offset int64         :offset-assert 280)
   (part-track      handle         :offset-assert 288)
   (shot-particle   sparticle-launch-control          :offset-assert 296)
   (test-particle   sparticle-launch-control          :offset-assert 300)
   )
  :method-count-assert 20
  :size-assert         #x130
  :heap-base           #xc0
  :flag-assert         #x1400c00130
  (:states
    redshot-idle
    redshot-wait
    redshot-explode)
  )

(deftype yellowshot (arcing-shot)
  ((flight-time time-frame  :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x14008000e8
  (:states
    yellowshot-idle)
  )

;; - Functions

(define-extern arcing-shot-setup (function vector vector float float :behavior arcing-shot))
(define-extern arcing-shot-calculate (function vector float float :behavior arcing-shot))
(define-extern redshot-trans (function time-frame none :behavior redshot))
(define-extern redshot-particle-callback (function part-tracker none))
(define-extern darkecobomb-explode-if-player-high-enough (function none :behavior darkecobomb))
(define-extern arcing-shot-draw (function symbol :behavior arcing-shot))
(define-extern darkecobomb-handler (function process int symbol event-message-block object :behavior darkecobomb))
(define-extern darkecobomb-init-by-other (function vector vector float time-frame float none :behavior darkecobomb))
(define-extern greenshot-init-by-other (function vector vector float time-frame none :behavior greenshot))
(define-extern redshot-handler (function process int symbol event-message-block object :behavior redshot))
(define-extern redshot-init-by-other (function vector vector float time-frame time-frame int none :behavior redshot))
(define-extern yellowshot-init-by-other (function vector vector float time-frame none :behavior yellowshot))

;; - Unknowns

(define-extern *redring-sg* skeleton-group)
(define-extern *greenshot-sg* skeleton-group)
(define-extern *darkecobomb-sg* skeleton-group)


;; ----------------------
;; File - robotboss-misc
;; Source Path - levels/finalboss/robotboss-misc.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype ecoclaw-part-info (structure)
  ((tracker handle         :offset-assert 0)
   (kind    basic          :offset-assert 8)
   (trans   vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ecoclaw (process-drawable)
  ((particles ecoclaw-part-info 3 :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #x110
  :heap-base           #xa0
  :flag-assert         #x1400a00110
  (:states
    ecoclaw-idle
    ecoclaw-activate)
  )

(deftype silodoor (process-drawable)
  ((part-opened float  :offset-assert 176)
   )
  :method-count-assert 22
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x16005000b4
  (:methods
    (idle () _type_ :state 20)
    (hidden () _type_ :state 21)
    )
  )

(deftype finalbosscam (process-taskable)
  ((robotboss handle  :offset-assert 384)
   )
  :method-count-assert 53
  :size-assert         #x188
  :heap-base           #x120
  :flag-assert         #x3501200188
  )

;; - Functions

(define-extern robotboss-manipy-trans-hook (function none :behavior robotboss))
(define-extern ecoclaw-beam-particle-callback (function part-tracker none))
(define-extern ecoclaw-handler (function process int symbol event-message-block object :behavior ecoclaw))
(define-extern finalbosscam-init-by-other (function entity-actor none :behavior finalbosscam))

;; - Unknowns

(define-extern *finalbosscam-sg* skeleton-group)
(define-extern *silodoor-sg* skeleton-group)
(define-extern *ecoclaw-sg* skeleton-group)
(define-extern *ecoclaw* (pointer ecoclaw))
(define-extern *med-res-snow1-sg* skeleton-group)


;; ----------------------
;; File - green-eco-lurker
;; Source Path - levels/finalboss/green-eco-lurker.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype green-eco-lurker (nav-enemy)
  ((played-sound? symbol             :offset-assert 400)
   (sound-delay   int32              :offset-assert 404)
   (appear-dest   vector     :inline :offset-assert 416)
   (traj          trajectory :inline :offset-assert 432)
   )
  :method-count-assert 76
  :size-assert         #x1d8
  :heap-base           #x170
  :flag-assert         #x4c017001d8
  (:methods
    (green-eco-lurker-method-51 (_type_ vector) symbol :replace 51))
  (:states
    green-eco-lurker-appear
    green-eco-lurker-appear-land
    green-eco-lurker-wait-to-appear
    green-eco-lurker-tune-spheres)
  )

(deftype green-eco-lurker-gen (process-drawable)
  ((num-to-spawn int32  :offset-assert 176)
   (num-spawned  int32  :offset-assert 180)
   (num-alive    int32  :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    spawn-minions)
  )

;; - Functions

(define-extern green-eco-lurker-init-by-other (function entity-actor green-eco-lurker-gen vector none :behavior green-eco-lurker))
(define-extern green-eco-lurker-gen-init-by-other (function entity-actor vector int none :behavior green-eco-lurker-gen))

;; - Unknowns

(define-extern *green-eco-lurker-sg* skeleton-group)
(define-extern *green-eco-lurker-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - robotboss
;; Source Path - levels/finalboss/robotboss.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype redshot-launch-info (structure)
  ((dest         vector :inline :offset-assert 0)
   (flight-time  time-frame  :offset-assert 16)
   (stall-time   time-frame  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype redshot-launch-array (structure)
  ((info redshot-launch-info 6 :inline :offset-assert 0))
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

;; - Functions

(define-extern robotboss-always-trans (function (state robotboss) none :behavior robotboss)) ;; CFG problems TODO
(define-extern robotboss-shooting-trans (function int none :behavior robotboss))
(define-extern robotboss-blue-done (function object :behavior robotboss))
(define-extern robotboss-blue-beam (function int symbol none :behavior robotboss))
(define-extern robotboss-position (function object :behavior robotboss))
(define-extern robotboss-cut-cam (function float float int none :behavior robotboss))
(define-extern robotboss-set-dda (function none :behavior robotboss)) ;; TODO - what structure type does this return?
(define-extern robotboss-cut-cam-exit (function none :behavior robotboss))
(define-extern robotboss-setup-for-hits (function int int object :behavior robotboss))
(define-extern robotboss-yellow-eco-on (function none :behavior robotboss))
(define-extern robotboss-yellow-eco-off (function none :behavior robotboss))
(define-extern robotboss-greenshot (function vector float int symbol none :behavior robotboss))
(define-extern robotboss-handler (function process int symbol event-message-block object :behavior robotboss))
(define-extern robotboss-darkecobomb (function vector float (pointer part-tracker) :behavior robotboss))
(define-extern robotboss-is-red-hit (function symbol :behavior robotboss))
(define-extern robotboss-redshot-fill-array (function redshot-launch-array none :behavior robotboss))
(define-extern robotboss-redshot (function redshot-launch-info symbol sound-id :behavior robotboss)) ;; run-func-in-process edge-case
(define-extern robotboss-time-to-shoot-yellow (function symbol :behavior robotboss))
(define-extern robotboss-is-yellow-hit (function symbol :behavior robotboss))
(define-extern robotboss-yellowshot (function none :behavior robotboss))
(define-extern robotboss-bomb-handler (function process int symbol event-message-block object :behavior robotboss))
(define-extern robotboss-anim-blend-loop (function art-joint-anim none :behavior robotboss))

;; - Unknowns

(define-extern *robotboss-blueeco-sg* skeleton-group)
(define-extern *robotboss-redeco-sg* skeleton-group)
(define-extern *robotboss-yelloweco-sg* skeleton-group)


;; ----------------------
;; File - final-door
;; Source Path - levels/finalboss/final-door.gc
;; Containing DGOs - ['FIN', 'L1']
;; Version - 3

;; - Types

(deftype fin-door (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype final-door (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x17004000b0
  ;;  not enough basic ops
  (:methods
    (idle () _type_ :state 20) ;; state
    (final-door-method-21 (_type_) none 21)
    (open (symbol) _type_ :state 22)
    )
  )

(deftype power-left (final-door)
  ()
  :method-count-assert 23
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x17004000b0
  )

(deftype power-right (final-door)
  ()
  :method-count-assert 23
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x17004000b0
  )

(deftype powercellalt (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (jump-pos vector :inline :offset-assert 176)
   (base     vector :inline :offset-assert 192)
   (index    int32          :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xd4
  :heap-base           #x70
  :flag-assert         #x17007000d4
  (:methods
    (powercellalt-method-20 () none 20)
    (jump () _type_ :state 21)
    (idle () _type_ :state 22)
    )
  )

;; - Functions

(define-extern powercellalt-init-by-other (function entity-actor vector vector int none :behavior powercellalt))

;; - Unknowns

(define-extern *powercellalt-sg* skeleton-group)
(define-extern *power-right-sg* skeleton-group)
(define-extern *power-left-sg* skeleton-group)


;; ----------------------
;; File - sage-finalboss-FIN
;; Source Path - levels/finalboss/sage-finalboss-FIN.gc
;; Containing DGOs - ['FIN']
;; Version - 3

;; - Types

(deftype plat-eco-finalboss (plat-eco)
  ((force-dest float   :offset-assert 360)
   (targ-dest  float   :offset-assert 364)
   (dest       float   :offset-assert 368)
   (speed      float   :offset-assert 372)
   (touch-time time-frame   :offset-assert 376)
   )
  :method-count-assert 33
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x2101100180
  )

(deftype sage-finalboss-particle (structure)
  ((part   sparticle-launch-control  :offset-assert 0)
   (active symbol  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sage-finalboss (process-taskable)
  ((redsage           handle    :offset-assert 384)
   (bluesage          handle    :offset-assert 392)
   (yellowsage        handle    :offset-assert 400)
   (assistant         handle    :offset-assert 408)
   (robotplat         handle    :offset-assert 416)
   (robotboss         handle    :offset-assert 424)
   (silodoor          handle    :offset-assert 432)
   (jak-white         handle    :offset-assert 440)
   (left-door         entity-actor     :offset-assert 448)
   (right-door        entity-actor     :offset-assert 452)
   (kick-in-the-door  symbol    :offset-assert 456)
   (kick-the-credits  symbol    :offset-assert 460)
   (credit-fade       float     :offset-assert 464)
   (palette-val       float     :offset-assert 468)
   (particle          sage-finalboss-particle 9 :inline :offset-assert 472)
   (particle-whiteout sparticle-launch-control  :offset-assert 616)
   (credits-played    symbol     :offset-assert 620)
   )
  :method-count-assert 53
  :size-assert         #x270
  :heap-base           #x200
  :flag-assert         #x3502000270
  (:states
    sage-finalboss-credits)
  )

;; - Functions

(define-extern sage-finalboss-extra-enter (function none :behavior sage-finalboss))
(define-extern sage-finalboss-extra-trans (function none :behavior sage-finalboss))
(define-extern sage-finalboss-credit-particle (function none :behavior sage-finalboss))

;; - Unknowns

(define-extern *sage-finalboss-sg* skeleton-group)
(define-extern *jak-white-sg* skeleton-group)
(define-extern *robotboss-cinematic-sg* skeleton-group)
(define-extern *plat-eco-finalboss-lit-sg* skeleton-group)
(define-extern *plat-eco-finalboss-unlit-sg* skeleton-group)


;; ----------------------
;; File - evilbro
;; Source Path - levels/intro/evilbro.gc
;; Containing DGOs - ['INT', 'L1']
;; Version - 3

;; - Types

(deftype evilbro (process-taskable)
  ((evilsis entity-actor  :offset-assert 380)
   )
  :method-count-assert 53
  :heap-base           #x110
  :size-assert         #x180
  :flag-assert         #x3501100180
  )

(deftype evilsis (process-taskable)
  ()
  :method-count-assert 53
  :heap-base           #x110
  :size-assert         #x17c
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *evilsis-intro-sg* skeleton-group)
(define-extern *evilbro-intro-sg* skeleton-group)


;; ----------------------
;; File - jungleb-obs
;; Source Path - levels/jungleb/jungleb-obs.gc
;; Containing DGOs - ['JUB', 'L1']
;; Version - 3

;; - Types

(deftype eggtop (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (cam-tracker handle   :offset-assert 176)
   (sound-id    sound-id :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    (eggtop-close symbol)
    eggtop-idle)
  )

 (deftype jng-iris-door (eco-door)
   ()
   :method-count-assert 27
   :size-assert         #x104
   :heap-base           #xa0
   :flag-assert         #x1b00a00104
   )

;; - Unknowns

(define-extern *jng-iris-door-sg* skeleton-group)
(define-extern *eggtop-sg* skeleton-group)


;; ----------------------
;; File - plat-flip
;; Source Path - levels/jungleb/plat-flip.gc
;; Containing DGOs - ['JUB', 'L1']
;; Version - 3

;; - Types

(deftype plat-flip (process-drawable)
  ((root-override         collide-shape-moving  :score 100 :offset 112)
   (path-pos              float                 :offset-assert 176)
   (before-turn-down-time float                 :offset-assert 180)
   (turn-down-time        float                 :offset-assert 184)
   (before-turn-up-time   float                 :offset-assert 188)
   (turn-up-time          float                 :offset-assert 192)
   (total-time            float                 :offset-assert 196)
   (sync                  sync-info     :inline :offset-assert 200)
   (base-pos              vector        :inline :offset-assert 208)
   (smush                 smush-control :inline :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1400900100
  (:states
    plat-flip-idle)
  )

;; - Unknowns

(define-extern *plat-flip-sg* skeleton-group)


;; ----------------------
;; File - aphid
;; Source Path - levels/jungleb/aphid.gc
;; Containing DGOs - ['JUB', 'L1']
;; Version - 3

;; - Types

(deftype aphid (nav-enemy)
  ((try int32  :offset-assert 400)
   )
  :method-count-assert 76
  :size-assert         #x194
  :heap-base           #x130
  :flag-assert         #x4c01300194
  )

;; - Functions

(define-extern aphid-invulnerable (function none :behavior aphid))
(define-extern aphid-vulnerable (function none :behavior aphid))
(define-extern aphid-init-by-other (function nav-enemy vector vector none :behavior aphid))

;; - Unknowns

(define-extern *aphid-sg* skeleton-group)
(define-extern *aphid-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - plant-boss
;; Source Path - levels/jungleb/plant-boss.gc
;; Containing DGOs - ['JUB', 'L1']
;; Version - 3

;; - Types

(declare-type plant-boss process-drawable)
(deftype plant-boss-arm (process-drawable)
  ((parent-override (pointer plant-boss) :score 100 :offset 12)
   (root-override collide-shape :score 100 :offset 112)
   (side int32  :offset-assert 176)
   )
  :method-count-assert 20
  :heap-base           #x50
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  (:states
    (plant-boss-back-arms-hit symbol)
    (plant-boss-back-arms-die symbol)
    (plant-boss-arm-die symbol)
    (plant-boss-arm-hit basic)
    plant-boss-back-arms-idle
    plant-boss-arm-idle
    (plant-boss-root-die symbol)
    (plant-boss-vine-die symbol)
    (plant-boss-vine-hit basic)
    plant-boss-vine-idle
    plant-boss-root-idle
    )
  )

(deftype plant-boss-leaf (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (side int32  :offset-assert 176)
   (state-object symbol           :offset-assert 180)
   (state-time-frame time-frame           :offset-assert 184)
   )
  :method-count-assert 20
  :heap-base           #x50
  :size-assert         #xc0
  :flag-assert         #x14005000c0
  (:states
    (plant-boss-leaf-idle symbol)
    (plant-boss-leaf-die basic)
    (plant-boss-leaf-open-idle symbol)
    plant-boss-leaf-close
    plant-boss-leaf-bounce
    (plant-boss-leaf-open symbol)
    )
  )

(deftype plant-boss (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (neck joint-mod  :offset-assert 176)
   (body joint-mod           :offset-assert 180)
   (leaf (pointer plant-boss-leaf) 2           :offset-assert 184)
   (energy float           :offset-assert 192)
   (health float           :offset-assert 196)
   (ate symbol           :offset-assert 200)
   (cycle-count int32           :offset-assert 204)
   (snap-count int32           :offset-assert 208)
   (attack-prim collide-shape-prim-sphere 3           :offset-assert 212)
   (death-prim collide-shape-prim-mesh 3           :offset-assert 224)
   (cam-tracker handle           :offset-assert 240)
   (want-aphid-count int32           :offset-assert 248)
   (aphid-count int32           :offset-assert 252)
   (aphid-spawn-time time-frame           :offset-assert 256)
   (interp float           :offset-assert 264)
   (try int32           :offset-assert 268)
   (camera handle           :offset-assert 272)
   (money handle           :offset-assert 280)
   (try-inc symbol           :offset-assert 288)
   )
  :method-count-assert 20
  :heap-base           #xc0
  :size-assert         #x124
  :flag-assert         #x1400c00124
  (:states
    plant-boss-eat
    (plant-boss-dead symbol)
    plant-boss-far-idle
    plant-boss-dead-idle
    (plant-boss-dead-bounce float)
    plant-boss-spawn
    (plant-boss-attack int)
    plant-boss-idle
    (plant-boss-reset int)
    (plant-boss-hit symbol)
    plant-boss-vulnerable
    plant-boss-intro)
  )

;; - Functions

(define-extern plant-boss-arm-init (function vector float int none :behavior plant-boss-arm))
(define-extern plant-boss-back-arms-init (function vector float int none :behavior plant-boss-arm))
(define-extern plant-boss-vine-init (function vector vector float int none :behavior plant-boss-arm))
(define-extern plant-boss-root-init (function vector vector vector int none :behavior plant-boss-arm))
(define-extern plant-boss-leaf-init (function vector float int none :behavior plant-boss-leaf))
(define-extern plant-boss-generic-event-handler (function process int symbol event-message-block object :behavior plant-boss))
(define-extern plant-boss-post (function none :behavior plant-boss))
(define-extern plant-boss-default-event-handler (function process int symbol event-message-block object :behavior plant-boss))

;; - Unknowns

(define-extern *plant-boss-sg* skeleton-group)
(define-extern *plant-boss-shadow-control* shadow-control)
(define-extern *plant-boss-leaf-sg* skeleton-group)
(define-extern *plant-boss-root-sg* skeleton-group)
(define-extern *plant-boss-vine-sg* skeleton-group)
(define-extern *plant-boss-back-arms-sg* skeleton-group)
(define-extern *plant-boss-arm-sg* skeleton-group)


;; ----------------------
;; File - jungle-elevator
;; Source Path - levels/jungle/jungle-elevator.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype jungle-elevator (plat-button)
  ((bottom-height       float  :offset-assert 240)
   (teleport-if-below-y float  :offset-assert 244)
   (teleport-if-above-y float  :offset-assert 248)
   )
  :method-count-assert 33
  :size-assert         #xfc
  :heap-base           #x90
  :flag-assert         #x21009000fc
  )


;; ----------------------
;; File - bouncer
;; Source Path - levels/jungle/bouncer.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype springbox (process-drawable)
  ((spring-height meters  :offset-assert 176)
   (smush         float   :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    bouncer-wait
    bouncer-fire
    bouncer-smush)
  )

;; - Unknowns

(define-extern *bouncer-sg* skeleton-group)


;; ----------------------
;; File - hopper
;; Source Path - levels/jungle/hopper.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype hopper (nav-enemy)
  ((jump-length  float  :offset-assert 400)
   (shadow-min-y float  :offset-assert 404)
   )
  :method-count-assert 76
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x4c01300198
  )

;; - Functions

(define-extern hopper-do-jump (function none :behavior hopper))
(define-extern hopper-jump-to (function vector none :behavior hopper))
(define-extern hopper-find-ground (function vector object :behavior hopper))

;; - Unknowns

(define-extern *hopper-sg* skeleton-group)
(define-extern *hopper-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - junglesnake
;; Source Path - levels/jungle/junglesnake.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype junglesnake-twist-joint (structure)
  ((joint-index   int32  :offset-assert 0)
   (ry            float  :offset-assert 4)
   (drag-delta-ry float  :offset-assert 8)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype junglesnake-tilt-joint (structure)
  ((joint-index int32  :offset-assert 0)
   (flip-it     symbol  :offset-assert 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype junglesnake (process-drawable)
  ((root-override     collide-shape :score 100 :offset 112)
   (state-time2       time-frame      :offset-assert 176) ;; changed
   (hit-player        symbol      :offset 184)
   (is-lethal?        symbol      :offset-assert 188)
   (refractory-delay  int32      :offset-assert 192)
   (ry                float      :offset-assert 196)
   (des-ry            float      :offset-assert 200)
   (tilt              float      :offset-assert 204)
   (des-tilt          float      :offset-assert 208)
   (track-player-ry   symbol      :offset-assert 212)
   (track-player-tilt symbol      :offset-assert 216)
   (twist-joints      junglesnake-twist-joint 24 :inline :offset 220)
   (tilt-joints       junglesnake-tilt-joint 3  :inline :offset 604)
   )
  :method-count-assert 25
  :size-assert         #x28c
  :heap-base           #x220
  :flag-assert         #x190220028c
  (:methods
    (junglesnake-method-20 (_type_) symbol 20)
    (junglesnake-method-21 (_type_) symbol 21)
    (junglesnake-method-22 (_type_ float) symbol 22)
    (junglesnake-method-23 (_type_) none 23)
    (junglesnake-method-24 (_type_) none 24)
    )
  (:states
    junglesnake-sleeping
    junglesnake-tracking
    junglesnake-attack
    junglesnake-give-up
    junglesnake-wake
    junglesnake-die)
  )

;; - Functions

(define-extern junglesnake-joint-callback (function junglesnake none))
(define-extern junglesnake-default-event-handler (function process int symbol event-message-block object :behavior junglesnake))

;; - Unknowns

(define-extern *junglesnake-sg* skeleton-group)
(define-extern *junglesnake-twist-max-deltas* (pointer float))


;; ----------------------
;; File - darkvine
;; Source Path - levels/jungle/darkvine.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype darkvine (process-drawable)
  ((root-override    collide-shape :score 100 :offset 112)
   (speed            float   :offset-assert 176)
   (tip-index        int8    :offset-assert 180)
   (dangerous        symbol   :offset-assert 184)
   (vulnerable       symbol   :offset-assert 188)
   (hit-player       symbol   :offset-assert 192)
   (touch-time       time-frame  :offset-assert 200)
   (player-attack-id int32   :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xd4
  :heap-base           #x70
  :flag-assert         #x14007000d4
  (:states
    (darkvine-die symbol)
    darkvine-idle
    darkvine-retreat)
  )

;; - Functions

(define-extern darkvine-event-handler (function process int symbol event-message-block object :behavior darkvine))

;; - Unknowns

(define-extern *darkvine-sg* skeleton-group)


;; ----------------------
;; File - jungle-obs
;; Source Path - levels/jungle/jungle-obs.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

;; TODO - completely useless?
(deftype precurbridge-span (structure)
  ()
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(deftype logtrap (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112))
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

(deftype towertop (process-drawable)
  ((root-override trsq :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    towertop-idle)
  )

(deftype lurkerm-tall-sail (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (speed         float  :offset-assert 176)
   (alt-actor     entity-actor  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    lurkerm-tall-sail-idle)
  )

(deftype lurkerm-short-sail (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (speed         float  :offset-assert 176)
   (alt-actor     entity-actor  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    lurkerm-short-sail-idle)
  )

(deftype lurkerm-piston (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (sync      sync-info :inline :offset-assert 176)
   (base      vector    :inline :offset-assert 192)
   (height    vector    :inline :offset-assert 208)
   (speed     float             :offset-assert 224)
   (alt-actor entity-actor             :offset-assert 228)
   )
  :method-count-assert 20
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x14008000e8
  (:states
    lurkerm-piston-idle)
  )

(deftype accordian (process-drawable)
  ((speed     float  :offset-assert 176)
   (alt-actor entity-actor  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    accordian-idle)
  )

(deftype junglecam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype precurbridgecam (pov-camera)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype precurbridge (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (smush            smush-control :inline :offset-assert 176)
   (base             vector        :inline :offset-assert 208)
   (activation-point vector        :inline :offset-assert 224)
   (span-array       precurbridge-span       8       :offset-assert 240)
   )
  :method-count-assert 20
  :size-assert         #x110
  :heap-base           #xa0
  :flag-assert         #x1400a00110
  (:states
    (precurbridge-active symbol)
    precurbridge-idle
    precurbridge-activate)
  )

(deftype maindoor (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (thresh vector :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x14005000c0
  (:states
    (maindoor-open symbol)
    (maindoor-closed symbol))
  )

(deftype sidedoor (eco-door)
  ()
  :method-count-assert 27
  :size-assert         #x104
  :heap-base           #xa0
  :flag-assert         #x1b00a00104
  )

;; I think unused!
(deftype jngpusher (process-drawable)
  ((root-override trsqv :offset 112)
   (sync      sync-info :inline :offset-assert 176)
   (back-prim collide-shape-prim             :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    jngpusher-idle)
  )

(deftype jungle-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

;; - Unknowns

(define-extern ripple-for-jungle-water ripple-wave-set)
(define-extern *jngpusher-sg* skeleton-group)
(define-extern *sidedoor-sg* skeleton-group)
(define-extern *maindoor-sg* skeleton-group)
(define-extern *precurbridge-sg* skeleton-group)
(define-extern *junglecam-sg* skeleton-group)
(define-extern *accordian-sg* skeleton-group)
(define-extern *lurkerm-piston-sg* skeleton-group)
(define-extern *lurkerm-short-sail-sg* skeleton-group)
(define-extern *lurkerm-tall-sail-sg* skeleton-group)
(define-extern *towertop-sg* skeleton-group)
(define-extern *logtrap-sg* skeleton-group)
(define-extern *med-res-firecanyon-sg* skeleton-group)
(define-extern *jungle-camera-sg* skeleton-group)


;; ----------------------
;; File - jungle-mirrors
;; Source Path - levels/jungle/jungle-mirrors.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(declare-type reflector process-drawable)
(deftype periscope (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (y-offset               meters         :offset-assert 176)
   (y-offset-grips         meters         :offset-assert 180)
   (height                 meters         :offset-assert 184)
   (turn                   degrees        :offset-assert 188)
   (tilt                   degrees            :offset-assert 192)
   (target-turn            degrees            :offset-assert 196)
   (target-tilt            degrees            :offset-assert 200)
   (base                   vector :inline :offset-assert 208)
   (reflector-trans        vector :inline :offset-assert 224)
   (next-reflector-trans   vector :inline :offset-assert 240)
   (prev-reflector-trans   vector :inline :offset-assert 256)
   (old-camera-matrix      matrix :inline :offset-assert 272)
   (reflector              (pointer reflector)         :offset-assert 336)
   (gauge-rot              degrees            :offset-assert 340)
   (lock-time              time-frame         :offset-assert 344)
   (aligned?               symbol          :offset-assert 352)
   (raised?                symbol          :offset-assert 356)
   (player-touching-grips? symbol          :offset-assert 360)
   (grips-moving?          symbol          :offset-assert 364)
   (sound-id               sound-id       :offset-assert 368)
   (rise-sound-id          sound-id       :offset-assert 372)
   (grips-sound-id         sound-id       :offset-assert 376)
   (grips                  joint-mod-set-world          :offset-assert 380)
   (part-aligned           sparticle-launch-control          :offset-assert 384)
   )
  :method-count-assert 20
  :size-assert         #x184
  :heap-base           #x120
  :flag-assert         #x1401200184
  (:states
    (periscope-power-on)
    (periscope-wait-for-player)
    (periscope-idle)
    (periscope-wait-for-power-input)
    (periscope-player-control)
    (periscope-activate))
  )

(deftype reflector (process-drawable)
  ((parent-override (pointer periscope) :score 100         :offset 12)
   (root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    (reflector-idle))
  )

(deftype reflector-origin (process-drawable)
  ((reflector-trans      vector :inline :offset-assert 176)
   (next-reflector-trans vector :inline :offset-assert 192)
   (reflector            uint32         :offset-assert 208)
   (next                 basic          :offset-assert 212) ;; no clue, never filled...?
   (blocker              entity-actor          :offset-assert 216)
   )
  :method-count-assert 20
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x14007000dc
  (:states
    (reflector-origin-idle))
  )

(deftype reflector-mirror (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (beam-end vector :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x14005000c0
  (:states
    (reflector-mirror-broken symbol)
    (reflector-mirror-idle))
  )

;; - Functions

(define-extern peri-beamcam-init-by-other (function string (pointer pov-camera) :behavior process))
(define-extern draw-power-beam (function vector vector none))
(define-extern reflector-origin-update (function entity-actor none :behavior reflector-origin))
(define-extern reflector-init-by-other (function vector none :behavior reflector))
(define-extern periscope-find-next (function none :behavior periscope))
(define-extern periscope-find-reflection-angles (function none :behavior periscope))
(define-extern periscope-update-joints (function none :behavior periscope))
(define-extern periscope-has-power-input? (function symbol :behavior periscope))
(define-extern periscope-draw-beam (function none :behavior periscope))
(define-extern periscope-find-aim-at-angles (function none :behavior periscope))
(define-extern periscope-crosshair (function symbol :behavior periscope))
(define-extern periscope-test-task-complete? (function symbol :behavior periscope))
(define-extern periscope-draw-beam-impact (function none :behavior periscope))
(define-extern periscope-set-target-direction (function vector none :behavior periscope))
(define-extern periscope-post (function none :behavior periscope))
(define-extern periscope-debug-trans (function none :behavior periscope))
(define-extern target-close-to-point? (function vector float symbol))

;; - Unknowns

(define-extern *reflector-mirror-sg* skeleton-group)
(define-extern *reflector-mirror-break-sg* skeleton-group)
(define-extern *periscope-base-sg* skeleton-group)
(define-extern *periscope-mirror-sg* skeleton-group)


;; ----------------------
;; File - junglefish
;; Source Path - levels/jungle/junglefish.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype junglefish (nav-enemy)
  ()
  :method-count-assert 76
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x4c01200190
  )

;; - Unknowns

(define-extern *junglefish-sg* skeleton-group)
(define-extern *junglefish-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - fisher-JUN
;; Source Path - levels/jungle/fisher-JUN.gc
;; Containing DGOs - ['JUN']
;; Version - 3

;; - Types

(deftype fisher-bank (basic)
  ((width      meters  :offset-assert 4)
   (net-radius meters  :offset-assert 8)
   (max-caught int32   :offset-assert 12)
   (max-missed int32   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype fisher-params (structure)
  ((timeout         time-frame   :offset-assert 0)
   (vel             float   :offset-assert 8)
   (swing-min       time-frame   :offset-assert 16)
   (swing-max       time-frame   :offset-assert 24)
   (period          time-frame   :offset-assert 32)
   (fish-vel        float   :offset-assert 40)
   (bad-percent     float   :offset-assert 44)
   (deadly-percent  float   :offset-assert 48)
   (powerup-percent float   :offset-assert 52)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype fisher (process-taskable)
  ((paddle-end      vector      2 :inline :offset-assert 384)
   (paddle-pos      vector        :inline :offset-assert 416)
   (paddle          float                 :offset-assert 432)
   (paddle-vel      float                 :offset-assert 436)
   (spawner         float                 :offset-assert 440)
   (spawner-last    float                 :offset-assert 444)
   (spawn-time      time-frame                 :offset-assert 448)
   (turn-time       time-frame                 :offset-assert 456)
   (swing-time      time-frame                 :offset-assert 464)
   (block-time      time-frame                 :offset-assert 472)
   (block           int32                 :offset-assert 480)
   (caught          int32                 :offset-assert 484)
   (missed          int32                 :offset-assert 488)
   (difficulty      int32                 :offset-assert 492)
   (start-time      time-frame                 :offset-assert 496)
   (ambient-big-one time-frame                 :offset-assert 504)
   (ambient-steady  time-frame                 :offset-assert 512)
   (ambient-sagging time-frame                 :offset-assert 520)
   (ambient-almost  time-frame                 :offset-assert 528)
   (cheat-temp      int32                 :offset-assert 536)
   (hard            symbol                :offset-assert 540)
   (training        symbol                :offset-assert 544)
   (params          fisher-params :inline :offset-assert 552)
   )
  :method-count-assert 53
  :size-assert         #x260
  :heap-base           #x1f0
  :flag-assert         #x3501f00260
  (:states
    fisher-playing
    fisher-done)
  )

(deftype fisher-fish (process-drawable)
  ((dir    vector :inline :offset-assert 176)
   (offset float          :offset-assert 192)
   (pos    float          :offset-assert 196)
   (vel    float          :offset-assert 200)
   (mode   basic          :offset-assert 204)
   (size   meters         :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xd4
  :heap-base           #x70
  :flag-assert         #x14007000d4
  (:states
    fisher-fish-fall
    fisher-fish-caught
    fisher-fish-die)
  )

;; - Functions

(define-extern fisher-fish-water (function vector float none :behavior fisher-fish))
(define-extern fisher-game-update (function none :behavior fisher))
(define-extern fisher-draw-display (function fisher none :behavior fisher))
(define-extern fisher-spawn-ambient (function none :behavior fisher))
(define-extern fisher-fish-init-by-other (function symbol float float none :behavior fisher-fish))
(define-extern fisher-fish-move (function none :behavior fisher-fish))

;; - Unknowns

(define-extern *fish-net-sg* skeleton-group)
(define-extern *fisher-sg* skeleton-group)
(define-extern *FISHER-bank* fisher-bank)
(define-extern *fisher-params* (array (inline-array fisher-params)))
(define-extern *catch-fishc-sg* skeleton-group)
(define-extern *catch-fishb-sg* skeleton-group)
(define-extern *catch-fisha-sg* skeleton-group)


;; ----------------------
;; File - jungle-part
;; Source Path - levels/jungle/jungle-part.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1']
;; Version - 3

;; - Types

(deftype jungle-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - launcherdoor
;; Source Path - levels/common/launcherdoor.gc
;; Containing DGOs - ['JUN', 'JUNGLE', 'L1', 'MAI', 'MAINCAVE', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype launcherdoor (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (notify-player-passed-thru? symbol  :offset-assert 176)
   (thresh-y                   float  :offset-assert 180)
   (open-speed                 float  :offset-assert 184)
   (close-speed                float  :offset-assert 188)
   (load-mode                  symbol  :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xc4
  :heap-base           #x60
  :flag-assert         #x14006000c4
  (:states
    (launcherdoor-open symbol)
(launcherdoor-closed symbol))
  )

;; - Unknowns

(define-extern *launcherdoor-maincave-sg* skeleton-group)
(define-extern *launcherdoor-sg* skeleton-group)


;; ----------------------
;; File - target-racer-h-L1-RACERP
;; Source Path - levels/l1_only/target-racer-h-L1-RACERP.gc
;; Containing DGOs - ['L1', 'RACERP']
;; Version - 3

;; - Types

(deftype racer-info (basic)
  ((entity              entity-actor                 :offset-assert 4)
   (bike-trans          vector        :inline :offset-assert 16)
   (bike-quat           vector        :inline :offset-assert 32)
   (bike-scale          vector        :inline :offset-assert 48)
   (mod-x               float                 :offset-assert 64)
   (rot                 vector        :inline :offset-assert 80)
   (rot-old             vector        :inline :offset-assert 96)
   (rotv                vector        :inline :offset-assert 112)
   (lean-rotx           degrees                   :offset-assert 128)
   (change-roty         degrees                   :offset-assert 132)
   (change-roty-old     degrees                   :offset-assert 136)
   (quat                vector        :inline :offset-assert 144)
   (surface-y           meters                :offset-assert 160)
   (surface-vy          meters                :offset-assert 164)
   (surface-quat        vector        :inline :offset-assert 176)
   (surface-quat-smooth vector        :inline :offset-assert 192)
   (cushion-base        meters                :offset-assert 208)
   (cushion-offset      meters                :offset-assert 212)
   (cushion-bob         meters                :offset-assert 216)
   (cushion-bob-old     meters                :offset-assert 220)
   (cushion-smush       smush-control :inline :offset-assert 224)
   (shock-offset        meters                :offset-assert 256)
   (shock-offsetv       meters                :offset-assert 260)
   (shock-rotx          meters                :offset-assert 264)
   (hill-value          float                 :offset-assert 268)
   (hill-ground-value   float                 :offset-assert 272)
   (hill-offset         meters                :offset-assert 276)
   (hill-rotx           degrees                   :offset-assert 280)
   (hill-boost          meters                :offset-assert 284)
   (bob-timer           float                 :offset-assert 288)
   (bob-meta-timer      float                 :offset-assert 292)
   (bob-meta-meta-timer float                 :offset-assert 296)
   (bob-mult-rot        float                 :offset-assert 300)
   (bob-mult-trans      float                 :offset-assert 304)
   (bob-period          float                 :offset-assert 308)
   (bob-meta-time       time-frame                :offset-assert 312)
   (bob-hit-ground-time time-frame                :offset-assert 320)
   (cur-rotx            degrees                   :offset-assert 328)
   (targ-rotx           degrees                   :offset-assert 332)
   (speed-rotx          float                 :offset-assert 336)
   (mult-rotx           degrees                   :offset-assert 340)
   (front-blade         joint-mod                 :offset-assert 344)
   (front-rot           degrees                   :offset-assert 348)
   (front-rotv          degrees                   :offset-assert 352)
   (bottom-blade        joint-mod                 :offset-assert 356)
   (bottom-rot          degrees                   :offset-assert 360)
   (front               joint-mod                 :offset-assert 364)
   (front-turn          degrees                   :offset-assert 368)
   (tail                joint-mod                 :offset-assert 372)
   (tail-tilt           degrees                   :offset-assert 376)
   (transv-max          meters                :offset-assert 380)
   (slide-down-time     time-frame       2       :offset-assert 384)
   (slide-enter-time    time-frame                :offset-assert 400)
   (slide-mode          int32                 :offset-assert 408)
   (slide-amp           float                 :offset-assert 412)
   (slide-grip-mult     float                 :offset-assert 416)
   (slide-shift-x       float                 :offset-assert 420)
   (slide-interp        float                 :offset-assert 424)
   (heat                float                 :offset-assert 428)
   (boost-time          time-frame                :offset-assert 432)
   (boost-duration      time-frame                :offset-assert 440)
   (boost-curve         float                 :offset-assert 448)
   (boost-level         float                 :offset-assert 452)
   (boost-target        float                 :offset-assert 456)
   (boost-output        float                 :offset-assert 460)
   (hop?                symbol                 :offset-assert 464)
   (hop-start-y         float                 :offset-assert 468)
   (bounce              int32                 :offset-assert 472)
   (bounce-hit          float                 :offset-assert 476)
   (engine-sound-id     sound-id              :offset-assert 480)
   (boost-sound-id      sound-id              :offset-assert 484)
   (engine-sound-pitch  float                 :offset-assert 488)
   (turn-anim-targ      float                 :offset-assert 492)
   (turn-anim-frame     float                 :offset-assert 496)
   (turn-anim-vel       float                 :offset-assert 500)
   (tail-anim-vel       float                 :offset-assert 504)
   (tail-anim-frame     float                 :offset-assert 508)
   (rudd-anim-vel       float                 :offset-assert 512)
   (rudd-anim-frame     float                 :offset-assert 516)
   (racing-time         time-frame                :offset-assert 520)
   (stick-lock          symbol                 :offset-assert 528)
   (stick-off           symbol                 :offset-assert 532)
   (heavy               symbol                 :offset-assert 536)
   (unstuck-time        time-frame                :offset-assert 544)
   (stuck-count         int32                 :offset-assert 552)
   (scrape-sound-id     sound-id              :offset-assert 556)
   (heat-sound-time     time-frame                :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x238
  :flag-assert         #x900000238
  )

(deftype racer-bank (basic)
  ((slide-hold-time            seconds  :offset-assert 8)
   (heat-max                   float     :offset-assert 16)
   (hotcoals-heat-inc          float     :offset-assert 20)
   (lava-heat-inc              float     :offset-assert 24)
   (lava-air-heat-inc          float     :offset-assert 28)
   (surface-heat-inc           float     :offset-assert 32)
   (jump-heat-inc              float     :offset-assert 36)
   (lavatube-hotcoals-heat-inc float     :offset-assert 40)
   (lavatube-lava-heat-inc     float     :offset-assert 44)
   (lavatube-lava-air-heat-inc float     :offset-assert 48)
   (lavatube-surface-heat-inc  float     :offset-assert 52)
   (lavatube-jump-heat-inc     float     :offset-assert 56)
   (boost-curve-max            meters    :offset-assert 60)
   (boost-level-max            meters    :offset-assert 64)
   (boost-level-inc            meters    :offset-assert 68)
   (boost-duration             seconds  :offset-assert 72)
   (default-front-blade        degrees       :offset-assert 80)
   (yellow-projectile-speed    meters    :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

;; - Unknowns

(define-extern *RACER-bank* racer-bank)
(define-extern *balloon-sg* skeleton-group)


;; ----------------------
;; File - racer-part
;; Source Path - levels/racer_common/racer-part.gc
;; Containing DGOs - ['L1', 'FIC', 'LAV', 'MIS', 'OGR', 'RACERP', 'ROL']
;; Version - 3

;; - Types

(deftype hud-bike-heat (hud)
  ()
  :method-count-assert 27
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1b00b00118
  )

(deftype hud-bike-speed (hud)
  ()
  :method-count-assert 27
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1b00b00118
  )

;; - Functions

(define-extern zoomer-heat-slice-color (function matrix float none))
(define-extern part-hud-racer-speed-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-hud-racer-heat-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-hud-zoomer-heat-slice-01-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-hud-zoomer-heat-slice-02-func (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern part-hud-zoomer-heat-slice-03-func (function sparticle-system sparticle-cpuinfo matrix none))


;; ----------------------
;; File - racer
;; Source Path - levels/racer_common/racer.gc
;; Containing DGOs - ['L1', 'FIC', 'LAV', 'MIS', 'OGR', 'RACERP', 'ROL']
;; Version - 3

;; - Types

(deftype racer (process-drawable)
  ((parent-override (pointer target) :score 100 :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112)
   (extra-trans   vector  :inline :offset-assert 176)
   (condition     int32           :offset-assert 192)
   (cell          handle          :offset-assert 200)
   (path-data     path-control 2       :offset-assert 208)
   (path-target   curve-control           :offset 208)
   (path-racer    path-control           :offset 212)
   (auto-get-off  symbol           :offset-assert 216)
   (shadow-backup shadow-geo           :offset-assert 220)
   )
  :method-count-assert 24
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x18007000e0
  (:methods
    (wait-for-start () _type_ :state 20)
    (idle () _type_ :state 21)
    (pickup ((state collectable)) _type_ :state 22)
    (wait-for-return () _type_ :state 23)
    )
  )

;; - Functions

(define-extern blocking-plane-spawn (function curve-control none :behavior process))
(define-extern racer-effect (function none :behavior racer))
(define-extern blocking-plane-destroy (function none))

;; - Unknowns

(define-extern *racer-sg* skeleton-group)
(define-extern *racer-shadow-control* shadow-control)
(define-extern *racer-explode-sg* skeleton-group)


;; ----------------------
;; File - target-racer-L1-RACERP
;; Source Path - levels/l1_only/target-racer-L1-RACERP.gc
;; Containing DGOs - ['L1', 'RACERP']
;; Version - 3

;; - Functions

(define-extern racer-collision-reaction (function control-info collide-shape-intersect vector vector cshape-moving-flags))
(define-extern racer-service-slide (function none :behavior target))
(define-extern racer-xz (function float float none :behavior target))
(define-extern racer-thrust (function basic float none :behavior target))
(define-extern racer-calc-gravity (function vector :behavior target))
(define-extern racer-on-ground? (function symbol :behavior racer))
(define-extern racer-collision (function none :behavior target))
(define-extern racer-integrate (function none :behavior target))
(define-extern racer-effects (function none :behavior target))
(define-extern racer-sounds (function object :behavior target))
(define-extern racer-bend-gravity (function none :behavior target))
(define-extern racer-find-prop-point (function vector vector vector :behavior target))
(define-extern racer-cushion (function float none :behavior target))
(define-extern racer-buzz (function float none :behavior target))
(define-extern target-racing-center-anim (function none :behavior target))
(define-extern target-racing-turn-anim (function none :behavior target))
(define-extern target-racing-jump-anim (function basic time-frame none :behavior target))
(define-extern target-racing-land-anim (function symbol none :behavior target))
(define-extern target-racing-post (function none :behavior target))

;; - Unknowns

(define-extern *racer-mods* surface)
(define-extern *racer-air-mods* surface)


;; ----------------------
;; File - racer-states-L1-RACERP
;; Source Path - levels/l1_only/racer-states-L1-RACERP.gc
;; Containing DGOs - ['L1', 'RACERP']
;; Version - 3

;; - Functions

(define-extern target-racing-smack-check (function none :behavior target))

;; - Unknowns



;; ----------------------
;; File - blocking-plane
;; Source Path - levels/common/blocking-plane.gc
;; Containing DGOs - ['L1', 'FIC', 'LAV', 'MIS', 'OGR', 'RACERP', 'ROL', 'SNO', 'SWA']
;; Version - 3

;; - Types

(deftype blocking-plane (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    blocking-plane-idle)
  )

;; - Functions

(define-extern blocking-plane-init-by-other (function curve-control int none :behavior blocking-plane))

;; - Unknowns

(define-extern *ef-plane-sg* skeleton-group)


;; ----------------------
;; File - flutflut
;; Source Path - levels/flut_common/flutflut.gc
;; Containing DGOs - ['L1', 'SNO', 'SWA']
;; Version - 3

;; - Types

(deftype flutflut (process-drawable)
  ((parent-override (pointer target) :score 100 :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112)
   (extra-trans  vector  :inline :offset-assert 176)
   (condition    int32           :offset-assert 192)
   (auto-get-off symbol          :offset-assert 196)
   (cell         handle          :offset-assert 200)
   (path-data    path-control 2       :offset-assert 208)
   (path-target  path-control           :offset 208)
   (path-flut    path-control           :offset 212)
   (touch-time   time-frame          :offset-assert 216)
   )
  :pack-me
  :method-count-assert 24
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x18007000e0
  ;; inherited inspect of process-drawable
  (:methods
    (wait-for-start () _type_ :state 20)
    (idle () _type_ :state 21)
    (pickup ((state flutflut)) _type_ :state  22)
    (wait-for-return () _type_ :state  23)
    )
  )

;; - Functions

(define-extern flutflut-effect (function none :behavior flutflut))

;; - Unknowns

(define-extern *flutflut-sg* skeleton-group)
(define-extern *flutflut-shadow-control* shadow-control)


;; ----------------------
;; File - target-flut
;; Source Path - levels/flut_common/target-flut.gc
;; Containing DGOs - ['L1', 'SNO', 'SWA']
;; Version - 3

;; - Types

(deftype flut-info (basic)
  ((entity entity-actor :offset-assert 4)
   (flut-trans vector :inline :offset-assert 16)
   (flut-quat vector :inline :offset-assert 32)
   (flut-scale vector :inline :offset-assert 48)
   (stick-lock basic :offset-assert 64)
   (flap-sound-id sound-id :offset-assert 68)
  )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype flut-bank (basic)
  ((jump-height-min meters :offset-assert 4)
   (jump-height-max meters :offset-assert 8)
   (double-jump-height-min meters :offset-assert 12)
   (double-jump-height-max meters :offset-assert 16)
   (air-attack-speed meters :offset-assert 20)
   (ground-timeout time-frame :offset-assert 24))
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; - Functions

(define-extern target-flut-post-post (function none :behavior target))
(define-extern target-flut-falling-anim-trans (function none :behavior target))
(define-extern target-flut-dangerous-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-flut-hit-ground-anim (function symbol :behavior target))
(define-extern target-flut-standard-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-flut-post (function none :behavior target))

;; - Unknowns

(define-extern *flut-air-attack-mods* surface)
(define-extern *FLUT-bank* flut-bank)
(define-extern *flut-run-attack-mods* surface)
(define-extern *flut-jump-mods* surface)
(define-extern *flut-walk-mods* surface)
(define-extern *flut-double-jump-mods* surface)


;; ----------------------
;; File - farmer
;; Source Path - levels/village1/farmer.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype farmer (process-taskable)
  ()
  :method-count-assert 53
  :heap-base           #x110
  :size-assert         #x17c
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *farmer-sg* skeleton-group)


;; ----------------------
;; File - explorer
;; Source Path - levels/village1/explorer.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype explorer (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *explorer-sg* skeleton-group)


;; ----------------------
;; File - assistant
;; Source Path - levels/village1/assistant.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype assistant (process-taskable)
  ((sound-id sound-id  :offset-assert 380)
   )
  :method-count-assert 53
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x3501100180
  )

;; - Functions

(define-extern check-drop-level-assistant (function sparticle-system sparticle-cpuinfo vector none))

;; - Unknowns

(define-extern *assistant-sg* skeleton-group)


;; ----------------------
;; File - sage
;; Source Path - levels/village1/sage.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype sage (process-taskable)
  ((reminder-played basic   :offset-assert 380)
   (assistant       handle  :offset-assert 384)
   )
  :method-count-assert 53
  :size-assert         #x188
  :heap-base           #x120
  :flag-assert         #x3501200188
  )

;; - Unknowns

(define-extern *sage-sg* skeleton-group)


;; ----------------------
;; File - yakow
;; Source Path - levels/village1/yakow.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype yakow-bank (basic)
  ((walk-cycle-frame-count float   :offset-assert 4)
   (run-cycle-frame-count  float   :offset-assert 8)
   (walk-speed             meters  :offset-assert 12)
   (run-speed              meters  :offset-assert 16)
   (walk-anim-speed        float   :offset-assert 20)
   (run-anim-speed         float   :offset-assert 24)
   (walk-away-dist         meters  :offset-assert 28)
   (run-away-dist          meters  :offset-assert 32)
   (walk-rotate-speed      float   :offset-assert 36)
   (run-rotate-speed       float   :offset-assert 40)
   (walk-turn-time         time-frame  :offset-assert 48)
   (run-turn-time          time-frame  :offset-assert 56)
   (max-walk-speed         float   :offset-assert 64)
   (min-run-speed          float   :offset-assert 68)
   (walk-run-blend-rate    float   :offset-assert 72)
   (walk-turn-blend-rate   float   :offset-assert 76)
   (max-run-speed          float   :offset-assert 80)
   (acceleration           meters  :offset-assert 84)
   (default-patrol-time    time-frame  :offset-assert 88)
   (default-idle-distance  meters  :offset-assert 96)
   (safe-distance          meters  :offset-assert 100)
   (min-run-anim-speed     float   :offset-assert 104)
   (max-run-anim-speed     float   :offset-assert 108)
   (min-walk-anim-speed    float   :offset-assert 112)
   (speed-boost-impulse    meters  :offset-assert 116)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )

(deftype yakow (process-drawable)
  ((root-override      collide-shape-moving :score 100 :offset 112)
   (fact-override      fact-info-enemy :score 100 :offset 144)
   (player-attack-id   int32          :offset-assert 176)
   (walk-run-blend     float          :offset-assert 180)
   (walk-turn-blend    float          :offset-assert 184)
   (run-mode           basic          :offset-assert 188)
   (travel-speed       meters         :offset-assert 192)
   (final-speed        meters         :offset-assert 196)
   (rotate-speed       float          :offset-assert 200)
   (turn-time          time-frame         :offset-assert 208)
   (vulnerable         basic          :offset-assert 216)
   (grazing            basic          :offset-assert 220)
   (push-velocity      vector :inline :offset-assert 224)
   (home-base          vector :inline :offset-assert 240)
   (dest-base          vector :inline :offset-assert 256)
   (dest-rot           degrees         :offset-assert 272)
   (enable-turn-around basic          :offset-assert 276)
   (rotating           basic          :offset-assert 280)
   (in-pen             basic          :offset-assert 284)
   )
  :method-count-assert 20
  :size-assert         #x120
  :heap-base           #xb0
  :flag-assert         #x1400b00120
  (:states
    yakow-graze
    yakow-idle
    yakow-run-away
    yakow-graze-kicked
    (yakow-walk-to vector)
    yakow-notice
    yakow-kicked
    yakow-die)
  )

;; - Functions

(define-extern yakow-task-complete? (function symbol symbol :behavior yakow))
(define-extern yakow-facing-player? (function float symbol :behavior yakow))
(define-extern yakow-post (function none :behavior yakow))
(define-extern yakow-facing-point? (function vector float symbol :behavior yakow))
(define-extern yakow-facing-direction? (function vector float symbol :behavior yakow))
(define-extern yakow-generate-travel-vector (function vector :behavior yakow))
(define-extern yakow-common-post (function none :behavior yakow))
(define-extern yakow-cam (function none))
(define-extern yakow-default-event-handler (function process-drawable int symbol event-message-block object :behavior yakow))
(define-extern yakow-simple-post (function none :behavior yakow))
(define-extern yakow-run-post (function none :behavior yakow))
(define-extern yakow-blend-walk-run (function none :behavior yakow))

;; - Unknowns

(define-extern *YAKOW-bank* yakow-bank)
(define-extern *yakow-sg* skeleton-group)
(define-extern *village1cam-sg* skeleton-group)


;; ----------------------
;; File - village-obs-L1
;; Source Path - levels/l1_only/village-obs-L1.gc
;; Containing DGOs - ['L1']
;; Version - 3

;; - Types

(deftype windmill-sail (process-drawable)
  ((root-override trsq :score 100 :offset 112)
   (sync         sync-info  :inline :offset-assert 176)
   (blade-normal vector     :inline :offset-assert 192)
   (orig-quat    quaternion :inline :offset-assert 208)
   (alt-actor    entity-actor              :offset-assert 224)
   (part2        sparticle-launch-control              :offset-assert 228)
   )
  :method-count-assert 20
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x14008000e8
  (:states
    windmill-sail-idle)
  )

(deftype sagesail (process-drawable)
  ((root-override trsq :score 100 :offset 112)
   (sync         sync-info  :inline :offset-assert 176)
   (blade-normal vector     :inline :offset-assert 192)
   (orig-quat    quaternion :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x14007000e0
  (:states
    sagesail-idle)
  )

(deftype windspinner (process-drawable)
  ((blade-normal vector     :inline :offset-assert 176)
   (orig-quat    quaternion :inline :offset-assert 192)
   (angle        float              :offset-assert 208)
   (angle-vel    float              :offset-assert 212)
   )
  :method-count-assert 20
  :size-assert         #xd8
  :heap-base           #x70
  :flag-assert         #x14007000d8
  (:states
    windspinner-idle)
  )

(deftype mayorgears (process-drawable)
  ((alt-actor entity-actor  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    mayorgears-idle)
  )

(deftype reflector-middle (process-drawable)
  ((reflector-trans      vector :inline :offset-assert 176)
   (next-reflector-trans vector :inline :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x14006000d0
  (:states
    reflector-middle-idle)
  )

(deftype reflector-end (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    reflector-end-idle)
  )

(deftype villa-starfish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb1
  :heap-base           #x50
  :flag-assert         #x14005000b1
  (:states
    villa-starfish-idle)
  )

(deftype starfish (nav-enemy)
  ()
  :method-count-assert 76
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x4c01200190
  (:states
    starfish-idle
    starfish-patrol)
  )

(deftype village-fish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb1
  :heap-base           #x50
  :flag-assert         #x14005000b1
  (:states
    village-fish-idle)
  )

(deftype villa-fisha (village-fish)
  ()
  :method-count-assert 20
  :size-assert         #xb1
  :heap-base           #x50
  :flag-assert         #x14005000b1
  )

(deftype villa-fishb (village-fish)
  ()
  :method-count-assert 20
  :size-assert         #xb1
  :heap-base           #x50
  :flag-assert         #x14005000b1
  )

(deftype cyclegen (structure)
  ((output float  :offset-assert 0)
   (inc    float  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype hutlamp (process-drawable)
  ((pivot joint-mod-set-local   :offset-assert 176)
   (clock cyclegen :inline :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    hutlamp-idle)
  )

(deftype revcycleprop (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

(deftype revcycle (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

(deftype villagea-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype evilplant (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; - Functions

(define-extern set-period (function cyclegen int float))
(define-extern update-clock (function cyclegen float))
(define-extern process-drawable-child-count (function int :behavior process-drawable))
(define-extern starfish-spawn-child (function (pointer starfish) :behavior starfish))
(define-extern starfish-init-by-other (function starfish vector none :behavior starfish))

;; - Unknowns

(define-extern ripple-for-villagea-water ripple-wave-set)
(define-extern *revcycle-sg* skeleton-group)
(define-extern *revcycleprop-sg* skeleton-group)
(define-extern *hutlamp-sg* skeleton-group)
(define-extern *starfish-sg* skeleton-group)
(define-extern *starfish-nav-enemy-info* nav-enemy-info)
(define-extern *reflector-middle-sg* skeleton-group)
(define-extern *mayorgears-sg* skeleton-group)
(define-extern *windspinner-sg* skeleton-group)
(define-extern *sagesail-sg* skeleton-group)
(define-extern *windmill-sail-sg* skeleton-group)
(define-extern *med-res-jungle-sg* skeleton-group)
(define-extern *med-res-jungle1-sg* skeleton-group)
(define-extern *med-res-jungle2-sg* skeleton-group)
(define-extern *med-res-beach-sg* skeleton-group)
(define-extern *med-res-beach1-sg* skeleton-group)
(define-extern *med-res-beach2-sg* skeleton-group)
(define-extern *med-res-beach3-sg* skeleton-group)
(define-extern *med-res-misty-sg* skeleton-group)
(define-extern *med-res-village11-sg* skeleton-group)
(define-extern *med-res-village12-sg* skeleton-group)
(define-extern *med-res-village13-sg* skeleton-group)
(define-extern *med-res-training-sg* skeleton-group)
(define-extern *evilplant-sg* skeleton-group)


;; ----------------------
;; File - fishermans-boat
;; Source Path - levels/village1/fishermans-boat.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype boat-stabilizer (structure)
  ((local-pos vector :inline :score 100 :offset-assert 0)
   (normal    vector :inline :score 100 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype vehicle-path (structure)
  ((point-array vector 10 :inline :offset-assert 0)
   (point-count int32      :offset-assert 160)
   )
  :method-count-assert 14
  :size-assert         #xa4
  :flag-assert         #xe000000a4
  (:methods
    (get-point-count (_type_) int 9)
    (nth-point (_type_ int vector) vector 10)
    (distance-to-next-point (_type_ int vector) vector 11)
    (add-point! (_type_ float float float float) none 12)
    (debug-draw (_type_) symbol 13)
    )
  )

(deftype vehicle-controller (structure)
  ((path                   vehicle-path         :offset-assert 0)
   (turning-radius-table   (pointer float)               :offset-assert 4)
   (throttle-control-table (pointer float)               :offset-assert 8)
   (table-step             float                :offset-assert 12)
   (table-length           int32                :offset-assert 16)
   (circle-radius          float                :offset-assert 20)
   (throttle               float                :offset-assert 24)
   (steering               float                :offset-assert 28)
   (path-dest-index        int8                 :offset-assert 32)
   (left-circle            int8                 :offset-assert 33)
   (path-dest-point        vector       :inline :offset-assert 48)
   (path-dest-velocity     vector       :inline :offset-assert 64)
   (dest-circle            vector       :inline :offset-assert 80)
   (target-point           vector       :inline :offset-assert 96)
   (sample-dir             vector       :inline :offset-assert 112)
   (sample-time            time-frame               :offset-assert 128)
   (sample-index           int32                :offset-assert 136)
   )
  :method-count-assert 17
  :size-assert         #x8c
  :flag-assert         #x110000008c
  (:methods
    (init! (_type_ vehicle-path (pointer float) (pointer float) int float) none 9)
    (vehicle-controller-method-10 (_type_ vector float int) none 10)
    (vehicle-controller-method-11 (_type_) none 11)
    (vehicle-controller-method-12 (_type_ int vector) none 12)
    (move-to-next-point (_type_ vector) none 13)
    (vehicle-controller-method-14 (_type_ vector vector) none 14)
    (vehicle-controller-method-15 (_type_ collide-shape-moving) none 15)
    (vehicle-controller-method-16 (_type_) none 16)
    )
  )

(deftype fishermans-boat (rigid-body-platform)
  ((stabilizer-array        boat-stabilizer            2 :inline :offset-assert 736)
   (engine-thrust-local-pos vector             :inline :offset-assert 800)
   (ignition                symbol                      :offset-assert 816)
   (engine-thrust           float                      :offset-assert 820)
   (propeller               joint-mod-spinner                      :offset-assert 824)
   (dock-point              vector             :inline :offset-assert 832)
   (dest-dir                vector             :inline :offset-assert 848)
   (dock-point-index        int8                       :offset-assert 864)
   (auto-pilot              symbol                      :offset-assert 868)
   (anchored                symbol                      :offset-assert 872)
   (waiting-for-player      symbol                      :offset-assert 876)
   (player-riding           symbol                      :offset-assert 880)
   (boat-path               vehicle-path       :inline :offset-assert 896)
   (cam-tracker             handle                     :offset-assert 1064)
   (kill-player             symbol                      :offset 1076)
   (engine-sound-id         sound-id                   :offset 1080)
   (engine-sound-envelope   float                      :offset 1084)
   (debug-draw              basic                      :offset 1088)
   (debug-path-record       basic                      :offset 1092)
   (debug-path-playback     basic                      :offset 1096)
   (measure-parameters      basic                      :offset 1100)
   (controller              vehicle-controller :inline :offset 1104)
   (anim                    spool-anim                      :offset 1244)
   (old-target-pos          transformq         :inline :offset 1248)
   (evilbro                 handle                     :offset 1296)
   (evilsis                 handle                     :offset 1304)
   )
  :method-count-assert 35
  :size-assert         #x520
  :heap-base           #x4b0
  :flag-assert         #x2304b00520
  (:states
    fishermans-boat-docked-village
    fishermans-boat-docked-misty
    fishermans-boat-player-control
    fishermans-boat-entering-village
    fishermans-boat-entering-misty
    fishermans-boat-ride-to-village1
    fishermans-boat-ride-to-misty
    fishermans-boat-leaving-village
    fishermans-boat-leaving-misty
    fishermans-boat-measurements)
  )

;; - Functions

(define-extern fishermans-boat-spawn-particles (function float none :behavior fishermans-boat))
(define-extern fishermans-boat-play-sounds (function none :behavior fishermans-boat))
(define-extern fishermans-boat-reset-physics (function none :behavior fishermans-boat))
(define-extern fishermans-boat-set-dock-point (function int none :behavior fishermans-boat))
(define-extern fishermans-boat-set-path-point (function int none :behavior fishermans-boat))
(define-extern fishermans-boat-next-path-point (function none :behavior fishermans-boat))
(define-extern fishermans-boat-set-throttle-by-speed (function float none :behavior fishermans-boat))
(define-extern fishermans-boat-enter-dock? (function symbol :behavior fishermans-boat))
(define-extern fishermans-boat-leave-dock? (function symbol :behavior fishermans-boat))
(define-extern fishermans-boat-wave (function vector float float none :behavior fishermans-boat))
(define-extern fishermans-boat-post (function none :behavior fishermans-boat))

;; - Unknowns

(define-extern *fb-evilbro-sg* skeleton-group)
(define-extern *fb-evilsis-sg* skeleton-group)
(define-extern *fishermans-boat-sg* skeleton-group)
(define-extern *boat-turning-radius-table* (pointer float))
(define-extern *boat-throttle-control-table* (pointer float))
(define-extern *fishermans-boat-constants* rigid-body-platform-constants)


;; ----------------------
;; File - village1-part
;; Source Path - levels/village1/village1-part.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype villagea-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern bird-bob-func (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-seagull-moon (function sparticle-system sparticle-cpuinfo matrix none))
(define-extern check-drop-level-village1-fountain-nosplash (function sparticle-system sparticle-cpuinfo vector vector))
(define-extern check-drop-level-village1-fountain (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - village1-part2
;; Source Path - levels/village1/village1-part2.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Functions

(define-extern check-drop-level-sagehut (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - sequence-a-village1
;; Source Path - levels/village1/sequence-a-village1.gc
;; Containing DGOs - ['L1', 'VI1']
;; Version - 3

;; - Types

(deftype sequenceA-village1 (process-taskable)
  ((boat handle  :offset-assert 384)
   (side handle  :offset-assert 392)
   )
  :method-count-assert 53
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x3501200190
  )

;; - Functions

(define-extern sequenceA-village1-init-by-other (function entity-actor none :behavior sequenceA-village1))
(define-extern sequenceA-village1-trans-hook (function none :behavior sequenceA-village1))

;; - Unknowns

(define-extern *sidekick-human-sg* skeleton-group)


;; ----------------------
;; File - training-obs
;; Source Path - levels/training/training-obs.gc
;; Containing DGOs - ['L1', 'TRA']
;; Version - 3

;; - Types

(deftype training-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype training-cam (process)
  ((root       trsq   :offset-assert 112)
   (range      meters  :offset-assert 116)
   (index      int32   :offset-assert 120)
   (state-time time-frame  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x88
  :heap-base           #x20
  :flag-assert         #xf00200088
  (:methods
    (idle () _type_ :state 14)
    )
  )

(deftype tra-pontoon (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   )
  :method-count-assert 35
  :size-assert         #x2f0
  :heap-base           #x280
  :flag-assert         #x23028002f0
  )

(deftype tra-iris-door (eco-door)
  ()
  :method-count-assert 27
  :size-assert         #x104
  :heap-base           #xa0
  :flag-assert         #x1b00a00104
  )

(deftype scarecrow-a (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (incomming-attack-id uint64         :offset-assert 176)
   (intersection        vector :inline :offset-assert 192)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x16006000d0
  (:methods
    (idle () _type_ :state 20)
    (hit (float vector symbol) _type_ :state 21)
    )
  )

(deftype scarecrow-b (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (incomming-attack-id uint64         :offset-assert 176)
   (intersection        vector :inline :offset-assert 192)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x16006000d0
  (:methods
    (idle () _type_ :state 20)
    (hit (float vector symbol) _type_ :state 21)
    )
  )

;; - Unknowns

(define-extern *scarecrow-b-sg* skeleton-group)
(define-extern *scarecrow-b-break-sg* skeleton-group)
(define-extern *scarecrow-a-sg* skeleton-group)
(define-extern *scarecrow-a-break-sg* skeleton-group)
(define-extern *tra-iris-door-sg* skeleton-group)
(define-extern *tra-pontoon-sg* skeleton-group)
(define-extern *tra-pontoon-constants* rigid-body-platform-constants)
(define-extern *training-cam-sg* skeleton-group)
(define-extern ripple-for-training-water ripple-wave-set)


;; ----------------------
;; File - training-part
;; Source Path - levels/training/training-part.gc
;; Containing DGOs - ['L1', 'TRA']
;; Version - 3

;; - Types

(deftype training-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern check-drop-level-training-mist (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-drop-level-training-spout-rain (function sparticle-system sparticle-cpuinfo vector none))
(define-extern tra-bird-bob-func (function sparticle-system sparticle-cpuinfo vector none))
(define-extern tra-sparticle-seagull-moon (function sparticle-system sparticle-cpuinfo matrix none))


;; ----------------------
;; File - misty-obs
;; Source Path - levels/misty/misty-obs.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype boatpaddle (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    boatpaddle-idle)
  )

(deftype windturbine (process-drawable)
  ((spawn-particle-enable symbol  :offset-assert 176)
   (angle-speed           float  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    windturbine-idle)
  )

(deftype mis-bone-bridge (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (particle-group   sparticle-launch-group  :offset-assert 176)
   (player-attack-id int32  :offset-assert 180)
   (fall-anim-index  int32  :offset-assert 184)
   (hit-points       int8   :offset-assert 188)
   )
  :method-count-assert 20
  :size-assert         #xbd
  :heap-base           #x50
  :flag-assert         #x14005000bd
  (:states
    (mis-bone-bridge-fall symbol)
    mis-bone-bridge-idle
    mis-bone-bridge-hit
    mis-bone-bridge-bump)
  )

(deftype breakaway (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112))
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (init! (_type_ res-lump int) none 20)
    (go-idle (_type_) none 21)
    )
  (:states
    breakaway-idle
    breakaway-fall
    breakaway-about-to-fall)
  )

(deftype breakaway-right (breakaway)
  ()
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  )

(deftype breakaway-mid (breakaway)
  ()
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  )

(deftype breakaway-left (breakaway)
  ()
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  )

(deftype bone-platform (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   )
  :method-count-assert 35
  :size-assert         #x2f0
  :heap-base           #x280
  :flag-assert         #x23028002f0
  )

(deftype mistycam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype misty-battlecontroller (battlecontroller)
  ()
  :method-count-assert 29
  :size-assert         #x27c
  :heap-base           #x210
  :flag-assert         #x1d0210027c
  )

(deftype boat-fuelcell (process-drawable)
  ((play-cutscene? symbol  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    boat-fuelcell-spawn
    boat-fuelcell-idle
    boat-fuelcell-die)
  )

;; - Functions

(define-extern mis-bone-bridge-event-handler (function process int symbol event-message-block object :behavior mis-bone-bridge))
(define-extern actor-wait-for-period (function time-frame symbol))
(define-extern misty-cam-restore (function symbol))

;; - Unknowns

(define-extern *mistycam-sg* skeleton-group)
(define-extern *mis-bone-platform-sg* skeleton-group)
(define-extern *bone-platform-constants* rigid-body-platform-constants)
(define-extern *breakaway-left-sg* skeleton-group)
(define-extern *breakaway-mid-sg* skeleton-group)
(define-extern *breakaway-right-sg* skeleton-group)
(define-extern *mis-bone-bridge-sg* skeleton-group)
(define-extern *windturbine-sg* skeleton-group)
(define-extern *boatpaddle-sg* skeleton-group)


;; ----------------------
;; File - misty-warehouse
;; Source Path - levels/misty/misty-warehouse.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype silostep (process-drawable)
  ((anim-limit  float   :offset-assert 176)
   (cam-tracker handle  :offset-assert 184)
   )
  :method-count-assert 20
  :heap-base           #x50
  :size-assert         #xc0
  :flag-assert         #x14005000c0
  (:states
    (silostep-rise symbol)
    silostep-idle
    silostep-camera)
  )

(deftype rounddoor (eco-door)
  ()
  :method-count-assert 27
  :heap-base           #xa0
  :size-assert         #x104
  :flag-assert         #x1b00a00104
  )

;; - Functions


(define-extern misty-camera-view (function none :behavior silostep))
;; - Unknowns

(define-extern *rounddoor-sg* skeleton-group)
(define-extern *silostep-sg* skeleton-group)


;; ----------------------
;; File - misty-conveyor
;; Source Path - levels/misty/misty-conveyor.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype keg-conveyor (process-drawable)
  ((pivot joint-mod-spinner              :offset-assert 176)
   (quat  quaternion :inline :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x14006000d0
  (:states
    keg-conveyor-idle)
  )

(deftype keg-conveyor-paddle (process-drawable)
  ((root-override    collide-shape-moving :score 100 :offset 112)
   (object-on-paddle (pointer bouncing-float)            :offset-assert 176)
   (sync             sync-info :inline :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x14005000bc
  (:states
    keg-conveyor-paddle-idle)
  )

(deftype keg (process-drawable)
  ((root-override       collide-shape-moving  :score 100 :offset 112)
   (sync-offset         float                 :offset-assert 176)
   (keg-behavior        int8                  :offset-assert 180)
   (path-position       vector        :inline :offset-assert 192)
   (shadow-enable-plane vector        :inline :offset-assert 208)
   (smush               smush-control :inline :offset-assert 224)
   (sound-id            sound-id              :offset-assert 256)
   )
  :method-count-assert 20
  :size-assert         #x104
  :heap-base           #xa0
  :flag-assert         #x1400a00104
  (:states
    keg-on-paddle
    keg-die
    keg-in-chute
    keg-on-path
    keg-paddle-to-path)
  )

;; - Functions

(define-extern keg-conveyor-paddle-init-by-other (function keg-conveyor-paddle none :behavior keg-conveyor-paddle))
(define-extern keg-conveyor-spawn-keg (function keg-conveyor (pointer keg)))
(define-extern keg-conveyor-spawn-bouncing-keg (function keg-conveyor (pointer keg)))
(define-extern keg-init-by-other (function keg int none :behavior keg))
(define-extern keg-bounce-set-particle-rotation-callback (function part-tracker none))
(define-extern keg-update-smush (function keg float none))
(define-extern keg-event-handler (function process int symbol event-message-block object :behavior keg))
(define-extern keg-post (function int :behavior keg))

;; - Unknowns

(define-extern *keg-conveyor-sg* skeleton-group)
(define-extern *keg-conveyor-paddle-sg* skeleton-group)
(define-extern *keg-conveyor-keg-spawn-table* (array int8))
(define-extern *keg-sg* skeleton-group)


;; ----------------------
;; File - mud
;; Source Path - levels/misty/mud.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype mud (water-anim)
  ()
  :method-count-assert 30
  :heap-base           #x70
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  )

;; - Unknowns

(define-extern ripple-for-mud ripple-wave-set)
(define-extern ripple-for-small-mud ripple-wave-set)


;; ----------------------
;; File - muse
;; Source Path - levels/misty/muse.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype muse (nav-enemy)
  ((root-override      collide-shape-moving :score 100 :offset 112)
   (current-path-index float              :offset-assert 400)
   (prev-path-index    float              :offset-assert 404)
   (dest-path-index    float              :offset-assert 408)
   (player-path-index  float              :offset-assert 412)
   (max-path-index     float              :offset-assert 416)
   (sprint-distance    float              :offset-assert 420)
   (dest-point         vector     :inline :offset-assert 432)
   (anim               spool-anim              :offset-assert 448) ; TODO - guess
   (victory-anim       spool-anim              :offset-assert 452) ; TODO - guess
   (old-target-pos     transformq :inline :offset-assert 464)
   )
  :method-count-assert 76
  :size-assert         #x200
  :heap-base           #x190
  :flag-assert         #x4c01900200
  (:states
    muse-idle
    muse-caught
    )
  )

(deftype point-on-path-segment-info (structure)
  ((point               vector  :inline :offset-assert 0)
   (segment             vector 2  :inline     :offset-assert 16) ;; TODO - guess
   (dir                 vector  :inline :offset-assert 48)
   (nearest-point       vector  :inline :offset-assert 64)
   (segment-length      float           :offset-assert 80)
   (distance-to-segment float           :offset-assert 84)
   (parametric-index    float           :offset-assert 88)
   )
  :method-count-assert 9
  :size-assert         #x5c
  :flag-assert         #x90000005c
  )

;; - Functions

(define-extern muse-check-dest-point (function none :behavior muse))
(define-extern analyze-point-on-path-segment (function point-on-path-segment-info float))
(define-extern muse-get-path-point (function vector int none :behavior muse))

;; - Unknowns

(define-extern *muse-sg* skeleton-group)
(define-extern *muse-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - bonelurker
;; Source Path - levels/misty/bonelurker.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype bonelurker (nav-enemy)
  ((bump-player-time time-frame  :offset-assert 400)
   )
  :method-count-assert 76
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x4c01300198
  (:states
    bonelurker-stun)
  )

;; - Functions

(define-extern bonelurker-set-small-bounds-sphere (function none :behavior bonelurker))
(define-extern bonelurker-set-large-bounds-sphere (function none :behavior bonelurker))
(define-extern bonelurker-stunned-event-handler (function process int symbol event-message-block object :behavior bonelurker))
(define-extern bonelurker-push-post (function none :behavior bonelurker))

;; - Unknowns

(define-extern *bonelurker-sg* skeleton-group)
(define-extern *bonelurker-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - quicksandlurker
;; Source Path - levels/misty/quicksandlurker.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype quicksandlurker-missile (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   )
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    quicksandlurker-missile-impact
    quicksandlurker-missile-idle
    )
  )

(deftype quicksandlurker-missile-init-data (structure)
  ((position vector  :offset-assert 0)
   (velocity vector  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype quicksandlurker (process-drawable)
  ((root-override     collide-shape :score 100 :offset 112)
   (original-position vector :inline :offset-assert 176)
   (y-offset          float          :offset-assert 192)
   (theta-angle       float          :offset-assert 196)
   (radial-offset     float          :offset-assert 200)
   (bob-angle         float          :offset-assert 204)
   (mud-entity        entity-actor   :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xd4
  :heap-base           #x70
  :flag-assert         #x14007000d4
  (:states
    quicksandlurker-die
    quicksandlurker-victory
    quicksandlurker-hide
    quicksandlurker-wait
    quicksandlurker-track
    quicksandlurker-attack
    quicksandlurker-popup
    quicksandlurker-idle
    quicksandlurker-yawn
    )
  )

;; - Functions

(define-extern orient-to-face-target (function quaternion :behavior quicksandlurker))
(define-extern quicksandlurker-spit (function (pointer part-tracker) :behavior quicksandlurker))
(define-extern spawn-quicksandlurker-missile (function process vector vector entity-actor none))
(define-extern quicksandlurker-check-hide-transition (function none :behavior quicksandlurker))
(define-extern inc-angle (function (pointer float) float float))
(define-extern quicksandlurker-missile-init-by-other (function quicksandlurker-missile-init-data entity-actor none :behavior quicksandlurker-missile))
(define-extern get-height-over-navmesh! function) ;; unused
(define-extern intersects-nav-mesh? (function nav-control vector symbol)) ;; unused
(define-extern quicksandlurker-default-event-handler (function process int symbol event-message-block object :behavior quicksandlurker))
(define-extern quicksandlurker-post (function none :behavior quicksandlurker))

;; - Unknowns

(define-extern *quicksandlurker-sg* skeleton-group)


;; ----------------------
;; File - misty-teetertotter
;; Source Path - levels/misty/misty-teetertotter.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype teetertotter (process-drawable)
  ((launched-player   basic  :offset-assert 176)
   (in-launch-window  basic  :offset-assert 180)
   (rock-is-dangerous basic  :offset-assert 184)
   )
  :method-count-assert 20
  :heap-base           #x50
  :size-assert         #xbc
  :flag-assert         #x14005000bc
  (:states
    teetertotter-idle
    teetertotter-launch
    teetertotter-bend)
  )

;; - Functions

(define-extern target-on-end-of-teetertotter? (function teetertotter symbol))

;; - Unknowns

(define-extern *teetertotter-sg* skeleton-group)


;; ----------------------
;; File - balloonlurker
;; Source Path - levels/misty/balloonlurker.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype balloonlurker-bank (basic)
  ((buoyancy-depth-offset       meters  :offset-assert 4)
   (player-mass                 float   :offset-assert 8)
   (rudder-factor               float   :offset-assert 12)
   (max-engine-thrust           float   :offset-assert 16)
   (max-rudder-deflection-angle float   :offset-assert 20)
   (throttle-factor             float   :offset-assert 24)
   (throttle-distance           float   :offset-assert 28)
   (throttle-close-distance     float   :offset-assert 32)
   (explosion-force             float   :offset-assert 36)
   (mine-weight                 float   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype balloonlurker (rigid-body-platform)
  ((explosion-force-position vector  :inline :offset-assert 736)
   (explosion-force          vector  :inline :offset-assert 752)
   (explosion                symbol          :offset-assert 768)
   (explosion-joint-index    uint16  2       :offset-assert 772)
   (explosion-joint-index-bytes int8 4       :score 50 :offset 772) ;; added overlay
   (vulnerable               symbol           :offset-assert 776)
   (water-y                  float           :offset-assert 780)
   (propeller                joint-mod-spinner             :offset-assert 784)
   (rudder                   joint-mod-set-local           :offset-assert 788)
   (mine                     joint-mod-set-world   2       :offset-assert 792)
   (buoyancy-factor          float           :offset-assert 800)
   (rudder-control           float           :offset-assert 804)
   (throttle-control         float           :offset-assert 808)
   (engine-thrust            float           :offset-assert 812)
   (dest-point               vector  :inline :offset-assert 816)
   (dest-point-old           vector  :inline :offset-assert 832)
   (dest-index               int8            :offset-assert 848)
   (auto-pilot               symbol           :offset-assert 852)
   (dead                     symbol           :offset-assert 856)
   (anim-frame               float           :offset-assert 860)
   (engine-sound-id          sound-id        :offset-assert 864)
   (pedal-sound-id           sound-id        :offset-assert 868)
   (frame-count              int8            :offset-assert 872)
   )
  :method-count-assert 35
  :size-assert         #x369
  :heap-base           #x300
  :flag-assert         #x2303000369
  (:states
    balloonlurker-patrol
    balloonlurker-die
    (balloonlurker-mine-explode int))
  )

(deftype balloonlurker-pilot (process-drawable)
  ((parent-override (pointer balloonlurker) :score 100         :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112))
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (balloonlurker-pilot-method-20 (_type_) none 20)
    (balloonlurker-pilot-method-21 (_type_) none 21)
    )
  (:states
    balloonlurker-pilot-idle
    balloonlurker-pilot-die)
  )

;; - Functions

(define-extern balloonlurker-pilot-init-by-other (function balloonlurker none :behavior balloonlurker-pilot))
(define-extern balloonlurker-find-nearest-path-point (function none :behavior balloonlurker))
(define-extern balloonlurker-snap-to-path-point (function int quaternion :behavior balloonlurker))
(define-extern balloonlurker-get-next-path-point (function none :behavior balloonlurker))
(define-extern balloonlurker-play-sounds (function none :behavior balloonlurker))
(define-extern balloonlurker-player-impulse (function vector :behavior balloonlurker))
(define-extern balloonlurker-get-path-point (function int none :behavior balloonlurker))
(define-extern balloonlurker-event-handler (function process int symbol event-message-block object :behavior balloonlurker))
(define-extern balloonlurker-post (function none :behavior balloonlurker))

;; - Unknowns

(define-extern *balloonlurker-sg* skeleton-group)
(define-extern *balloonlurker-constants* rigid-body-platform-constants)
(define-extern *balloonlurker-pilot-sg* skeleton-group)
(define-extern *BALLOONLURKER-bank* balloonlurker-bank)
(define-extern *balloonlurker-rudder-joint-home* vector)


;; ----------------------
;; File - misty-part
;; Source Path - levels/misty/misty-part.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype misty-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - sidekick-human
;; Source Path - levels/misty/sidekick-human.gc
;; Containing DGOs - ['L1', 'MIS']
;; Version - 3

;; - Types

(deftype sequenceA (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype sequenceB (process-taskable)
  ((bonelurker  handle   :offset-assert 384) ;; bonelurker
   (evilbro     handle   :offset-assert 392) ;; evilbro
   (evilsis     handle   :offset-assert 400) ;; evilsis
   (lurker-army handle 9 :offset-assert 408) ;; babak?
   )
  :heap-base #x170
  :method-count-assert 53
  :size-assert         #x1e0
  :flag-assert         #x35017001e0
  )

(deftype sequenceC (process-taskable)
  ((bonelurker              handle          :offset-assert 384) ;; bonelurker likely
   (darkecocan              handle          :offset-assert 392) ;; darkecobarrel-base likely
   (darkecocan-glowing-look lod-set :inline :offset-assert 400)
   )
  :heap-base #x150
  :method-count-assert 53
  :size-assert         #x1b1
  :flag-assert         #x35015001b1
  )

(deftype army-info (structure)
  ((pos         vector  :offset-assert   0)
   (rot         float   :offset-assert   4)
   (start-frame float   :offset-assert   8)
   (skel        symbol  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; - Functions

(define-extern sequenceC-trans-hook (function none :behavior sequenceC))
(define-extern sequenceC-can-trans-hook (function none :behavior sequenceC))
(define-extern sequenceC-can-trans-hook-2 (function none :behavior sequenceC))
(define-extern evilsib-trans-hook-wait (function none :behavior evilbro))
(define-extern evilsib-trans-hook-hover (function none :behavior evilbro))

;; - Unknowns

(define-extern *darkecocan-sg* skeleton-group)
(define-extern *darkecocan-glow-sg* skeleton-group)
(define-extern *lurker-army* (array army-info))
(define-extern *evilbro-sg* skeleton-group)
(define-extern *evilsis-sg* skeleton-group)


;; ----------------------
;; File - firecanyon-part
;; Source Path - levels/firecanyon/firecanyon-part.gc
;; Containing DGOs - ['L1', 'FIC']
;; Version - 3

;; - Types

(deftype firecanyon-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - assistant-firecanyon
;; Source Path - levels/firecanyon/assistant-firecanyon.gc
;; Containing DGOs - ['L1', 'FIC']
;; Version - 3

;; - Types

(deftype assistant-firecanyon (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *assistant-firecanyon-sg* skeleton-group)


;; ----------------------
;; File - village2-part
;; Source Path - levels/village2/village2-part.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype villageb-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern check-drop-level-sagehut2 (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - village2-obs
;; Source Path - levels/village2/village2-obs.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype village2cam (pov-camera)
  ((seq uint64  :offset-assert 224)
   )
  :method-count-assert 30
  :heap-base           #x80
  :size-assert         #xe8
  :flag-assert         #x1e008000e8
  )

(deftype pontoon (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   (task         uint8          :offset-assert 752)
   (alt-task     uint8          :offset-assert 753)
   )
  :method-count-assert 35
  :heap-base           #x290
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  (:states
    pontoon-die
    pontoon-hidden)
  )

(deftype pontoonfive (pontoon)
  ()
  :method-count-assert 35
  :heap-base           #x290
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  )

(deftype pontoonten (pontoon)
  ()
  :method-count-assert 35
  :heap-base           #x290
  :size-assert         #x2f2
  :flag-assert         #x23029002f2
  )

(deftype allpontoons (process-drawable)
  ((task uint8  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb1
  :heap-base           #x50
  :flag-assert         #x14005000b1
  (:states
    allpontoons-idle
    (allpontoons-be-clone handle))
  )

(deftype fireboulder (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (tracker handle  :offset-assert 176) ;; part-tracker
   (task    uint8   :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xb9
  :heap-base           #x50
  :flag-assert         #x14005000b9
  (:states
    fireboulder-idle
    fireboulder-hover
    (fireboulder-be-clone handle))
  )

(deftype ceilingflag (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    ceilingflag-idle)
  )

(deftype exit-chamber-dummy (process-drawable)
  ((orig-trans   vector :inline :offset-assert 176)
   (fcell-handle handle         :offset-assert 192)
   )
  :method-count-assert 21
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x15006000c8
  (:methods
    (skip-reminder? (_type_) symbol 20)
    )
  (:states
    exit-chamber-dummy-wait-to-appear
    exit-chamber-dummy-idle          )
  )

(deftype ogreboss-village2 (process-drawable)
  ((boulder handle  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    ogreboss-village2-idle
    ogreboss-village2-throw)
  )

(deftype villageb-ogreboss (ogreboss-village2)
  ()
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  )

(deftype villageb-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

;; - Functions

(define-extern boulder1-trans (function none :behavior fireboulder))
(define-extern boulder2-trans (function none :behavior fireboulder))
(define-extern boulder3-trans (function none :behavior fireboulder))
(define-extern boulder4-trans (function none :behavior fireboulder))
(define-extern boulder4-trans-2 (function none :behavior fireboulder))
(define-extern boulder4-trans-3 (function none :behavior fireboulder))
(define-extern boulder3-trans-2 (function none :behavior fireboulder))
(define-extern boulder2-trans-2 (function none :behavior fireboulder))
(define-extern fireboulder-disable-blocking-collision (function none :behavior fireboulder))
(define-extern fireboulder-hover-stuff (function object :behavior fireboulder))
(define-extern ogreboss-village2-trans (function none :behavior ogreboss-village2))

;; - Unknowns

(define-extern ripple-for-villageb-water ripple-wave-set)
(define-extern *ogreboss-village2-sg* skeleton-group)
(define-extern *fireboulder-sg* skeleton-group)
(define-extern *exit-chamber-dummy-sg* skeleton-group)
(define-extern *ceilingflag-sg* skeleton-group)
(define-extern *allpontoons-sg* skeleton-group)
(define-extern *pontoonten-sg* skeleton-group)
(define-extern *pontoonten-constants* rigid-body-platform-constants)
(define-extern *pontoonfive-sg* skeleton-group)
(define-extern *pontoonfive-constants* rigid-body-platform-constants)
(define-extern *village2cam-sg* skeleton-group)
(define-extern *med-res-rolling-sg* skeleton-group)
(define-extern *med-res-rolling1-sg* skeleton-group)
(define-extern *med-res-village2-sg* skeleton-group)


;; ----------------------
;; File - gambler
;; Source Path - levels/village2/gambler.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype gambler (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *gambler-sg* skeleton-group)


;; ----------------------
;; File - warrior
;; Source Path - levels/village2/warrior.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype warrior (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *warrior-sg* skeleton-group)


;; ----------------------
;; File - geologist
;; Source Path - levels/village2/geologist.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype geologist (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *geologist-sg* skeleton-group)


;; ----------------------
;; File - swamp-blimp
;; Source Path - levels/village2/swamp-blimp.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype swamp-blimp-bank (basic)
  ((arm-index                 int32  :offset-assert 4)
   (pause-before-dropping-arm int32  :offset-assert 8)
   (rise-per-break            float  :offset-assert 12)
   (arm-sink-wait             float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype tetherrock-info (structure)
  ((rock-camera       string  :offset-assert 0)
   (arm-camera        string  :offset-assert 4)
   (blimp-rp          int32  :offset-assert 8)
   (other-rp          int32  :offset-assert 12)
   (connected-to-rock basic  :offset-assert 16)
   (damping           float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype swamp-rope-rand-float (structure)
  ((min-time int32  :offset-assert 0)
   (max-time int32  :offset-assert 4)
   (max-val  float  :offset-assert 8)
   (timer    int32  :offset-assert 12)
   (value    float  :offset-assert 16)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x14
  :flag-assert         #xb00000014
  (:methods
    (init! (_type_ int int float) none 9)
    (update-timer! (_type_) none 10)
    )
  )

(deftype swamp-rope-oscillator (structure)
  ((target  float  :offset-assert 0)
   (value   float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (accel   float  :offset-assert 12)
   (vector-overlay vector :inline :offset 0)
   (max-vel float  :offset-assert 16)
   (damping float  :offset-assert 20)
   )
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (init! (_type_ float float float float) none 9)
    (swamp-rope-oscillator-method-10 (_type_ float) none 10)
    )
  )

(deftype swamp-blimp-rand-vector (structure)
  ((min-time int32          :offset-assert 0)
   (max-time int32          :offset-assert 4)
   (xz-max   float          :offset-assert 8)
   (y-max    float          :offset-assert 12)
   (timer    int32          :offset-assert 16)
   (value    vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (init! (_type_ int int float float) none 9)
    (update-timer! (_type_) none 10)
    )
  )

(deftype swamp-blimp-oscillator (structure)
  ((target  vector :inline :offset-assert 0)
   (value   vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (accel   float          :offset-assert 48)
   (max-vel float          :offset-assert 52)
   (damping float          :offset-assert 56)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (init! (_type_ vector float float float) none 9)
    (swamp-blimp-oscillator-method-10 (_type_ vector) none 10)
    )
  )

(deftype swamp-tetherrock (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (tension     float              :offset-assert 176)
   (tension-pt  vector     :inline :offset-assert 192)
   (blimp       entity-actor              :offset-assert 208)
   (rot-at-init quaternion :inline :offset-assert 224)
   (hits        int32              :offset-assert 240)
   )
  :method-count-assert 20
  :size-assert         #xf4
  :heap-base           #x90
  :flag-assert         #x14009000f4
  (:states
    swamp-tetherrock-die
    swamp-tetherrock-hide
    swamp-tetherrock-idle
    swamp-tetherrock-break)
  )

(deftype precursor-arm (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (y-init    float          :offset-assert 176)
   (y-offset  float          :offset-assert 180)
   (rot-speed float          :offset-assert 184)
   (rot-dist  float          :offset-assert 188)
   (rot-base  float          :offset-assert 192)
   (rot-t     float          :offset-assert 196)
   (init-mat  matrix :inline :offset-assert 208)
   (tension   float          :offset-assert 272)
   )
  :method-count-assert 20
  :size-assert         #x114
  :heap-base           #xb0
  :flag-assert         #x1400b00114
  (:states
    precursor-arm-idle
    precursor-arm-die
    precursor-arm-sink)
  )

(declare-type swamp-blimp process-drawable)
(deftype swamp-rope (process-drawable)
  ((parent-override (pointer swamp-blimp) :score 100         :offset 12) ;; or is it the tether rock...
   (parent-rp    int32                         :offset-assert 176)
   (other-entity entity-actor                         :offset-assert 180)
   (other-rp     int32                         :offset-assert 184)
   (old-scale    float                         :offset-assert 188)
   (frame        swamp-rope-oscillator :inline :offset-assert 192)
   (other-pos    vector                :inline :offset-assert 224)
   (scale-base   float                         :offset-assert 240)
   (base-vec     vector                :inline :offset-assert 256)
   (scale-t      float                         :offset-assert 272)
   (x-t          float                         :offset-assert 276)
   (z-t          float                         :offset-assert 280)
   (rot-speed    float                         :offset-assert 284)
   )
  :method-count-assert 21
  :size-assert         #x120
  :heap-base           #xb0
  :flag-assert         #x1500b00120
  (:methods
    (swamp-rope-method-20 (_type_) basic 20) ;; ret - entity-actor | symbol
    )
  (:states
    swamp-rope-idle-rock
    swamp-rope-idle-arm
    swamp-rope-break)

  )

(deftype swamp-blimp (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (the-ropes               handle              5      :offset-assert 176)
   (arm-timer               int32                           :offset-assert 216)
   (trans-at-init           vector                  :inline :offset-assert 224)
   (rot-at-init             quaternion              :inline :offset-assert 240)
   (y-vel                   float                           :offset-assert 256)
   (y-offset                float                           :offset-assert 260)
   (y-offset-target         float                           :offset-assert 264)
   (main-tilt-rand          swamp-blimp-rand-vector :inline :offset-assert 272)
   (main-tilt-oscillator    swamp-blimp-oscillator  :inline :offset-assert 320)
   (gondola-tilt-oscillator swamp-blimp-oscillator  :inline :offset-assert 384)
   (pos-rand                swamp-blimp-rand-vector :inline :offset-assert 448)
   (pos-oscillator          swamp-blimp-oscillator  :inline :offset-assert 496)
   (scale-rand              swamp-rope-rand-float   :inline :offset-assert 556)
   (scale-oscillator        swamp-rope-oscillator   :inline :offset-assert 576)
   (gondola                 joint-mod                           :offset-assert 600)
   (bag                     joint-mod                           :offset-assert 604)
   )
  :method-count-assert 20
  :size-assert         #x260
  :heap-base           #x1f0
  :flag-assert         #x1401f00260
  (:states
    swamp-blimp-idle
    swamp-blimp-bye-bye)
  )

;; - Functions

(define-extern swamp-rope-init-by-other (function vector entity-actor none :behavior swamp-rope))
(define-extern swamp-blimp-setup (function int :behavior swamp-blimp))
(define-extern tetherrock-get-info (function entity tetherrock-info))
(define-extern swamp-rope-post (function none :behavior swamp-rope))
(define-extern swamp-rope-break-code (function quaternion :behavior swamp-rope))
(define-extern swamp-rope-update-bounding-spheres (function none :behavior swamp-rope))
(define-extern precursor-arm-slip (function float float))
(define-extern swamp-rope-trans (function none :behavior swamp-rope))
(define-extern blimp-trans (function float :behavior swamp-blimp))
(define-extern bustarock (function int object))

;; - Unknowns

(define-extern *swamp-blimp-sg* skeleton-group)
(define-extern *SWAMP_BLIMP-bank* swamp-blimp-bank)
(define-extern *swamp-rope-sg* skeleton-group)
(define-extern *precursor-arm-sg* skeleton-group)
(define-extern *swamp-tetherrock-sg* skeleton-group)
(define-extern *swamp-tetherrock-explode-sg* skeleton-group)


;; ----------------------
;; File - sage-bluehut
;; Source Path - levels/village2/sage-bluehut.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype assistant-bluehut (process-taskable)
  ((sound-id   sound-id  :offset-assert 380)
   (jaws       handle  :offset-assert 384) ; manipy - lol is this the small fish in the bucket?
   (sage       entity-actor   :offset-assert 392)
   (im-talking symbol   :offset-assert 396)
   )
  :method-count-assert 53
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x3501200190
  )

(deftype sage-bluehut (process-taskable)
  ((reminder-played symbol  :offset-assert 380)
   (assistant       entity-actor  :offset-assert 384)
   )
  :method-count-assert 53
  :size-assert         #x184
  :heap-base           #x120
  :flag-assert         #x3501200184
  )

;; - Unknowns

(define-extern *sage-bluehut-sg* skeleton-group)


;; ----------------------
;; File - flutflut-bluehut
;; Source Path - levels/village2/flutflut-bluehut.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype flutflut-bluehut (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *flutflut-bluehut-sg* skeleton-group)


;; ----------------------
;; File - assistant-village2
;; Source Path - levels/village2/assistant-village2.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype assistant-levitator (process-taskable)
  ((boulder  entity-actor     :offset-assert 380)
   (particle sparticle-launch-control 4 :offset-assert 384)
   )
  :method-count-assert 53
  :size-assert         #x190
  :heap-base           #x120
  :flag-assert         #x3501200190
  (:states
    just-particles)
  )

;; - Functions

(define-extern assistant-levitator-blue-glow (function none :behavior assistant-levitator))
(define-extern assistant-levitator-blue-beam (function none :behavior assistant-levitator))
(define-extern check-drop-level-assistant-bluehut (function sparticle-system sparticle-cpuinfo vector none))

;; - Unknowns

(define-extern *assistant-village2-sg* skeleton-group)
(define-extern *jaws-sg* skeleton-group)


;; ----------------------
;; File - sunken-elevator
;; Source Path - levels/village2/sunken-elevator.gc
;; Containing DGOs - ['L1', 'VI2']
;; Version - 3

;; - Types

(deftype sunken-elevator (plat-button)
  ((play-at-top-going-up-camera? symbol  :offset-assert 240)
   (teleport-if-below-y          float  :offset-assert 244)
   (teleport-if-above-y          float  :offset-assert 248)
   )
  :method-count-assert 33
  :heap-base           #x90
  :size-assert         #xfc
  :flag-assert         #x21009000fc
  )

;; - Unknowns

(define-extern *sunken-elevator-sg* skeleton-group)


;; ----------------------
;; File - swamp-obs
;; Source Path - levels/swamp/swamp-obs.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(deftype swamp-spike (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (sync      sync-info :inline :offset-assert 176)
   (open-gate symbol             :offset-assert 184)
   (dangerous symbol             :offset-assert 188)
   )
  :method-count-assert 21
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x15005000c0
  (:methods
    (init! (_type_) symbol 20)
    )
  (:states
    swamp-spike-idle)
  )

(deftype swampgate (swamp-spike)
  ()
  :method-count-assert 21
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x15005000c0
  (:states
    swamp-spike-gate-down
    swamp-spike-gate-up)
  )

(deftype balance-plat (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (y-travel float  :offset-assert 176)
   (y-init   float  :offset-assert 180)
   (y-offset float  :offset-assert 184)
   (y-vel    float  :offset-assert 188)
   (y-accel  float  :offset-assert 192)
   (got-grow symbol  :offset-assert 196)
   )
  :method-count-assert 20
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x14006000c8
  (:states
    balance-plat-idle)
  )

(deftype swamp-rock (process-drawable)
  ((root-override basic :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    swamp-rock-idle
    swamp-rock-break)
  )

(deftype tar-plat (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   (float-height float          :offset-assert 752)
   )
  :method-count-assert 35
  :size-assert         #x2f4
  :heap-base           #x290
  :flag-assert         #x23029002f4
  )

(deftype swamp-barrel (barrel)
  ()
  :method-count-assert 30
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1e00900100
  )

(deftype swampcam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype swamp-battlecontroller (battlecontroller)
  ()
  :method-count-assert 29
  :size-assert         #x27c
  :heap-base           #x210
  :flag-assert         #x1d0210027c
  )

;; - Functions

(define-extern swamp-spike-set-particle-rotation-callback (function part-tracker none))
(define-extern swamp-spike-default-event-handler (function process int symbol event-message-block object :behavior swamp-spike))
(define-extern swamp-spike-post (function none :behavior swamp-spike))
(define-extern swamp-rock-init-by-other (function vector none :behavior swamp-rock))

;; - Unknowns

(define-extern *swampcam-sg* skeleton-group)
(define-extern *tar-plat-sg* skeleton-group)
(define-extern *tar-plat-constants* rigid-body-platform-constants)
(define-extern *swamp-rock-sg* skeleton-group)
(define-extern *balance-plat-sg* skeleton-group)
(define-extern *swamp-spike-sg* skeleton-group)


;; ----------------------
;; File - swamp-bat
;; Source Path - levels/swamp/swamp-bat.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(deftype swamp-bat-idle-path (structure)
  ((origin vector :inline :offset-assert 0)
   (x-axis vector :inline :offset-assert 16)
   (y-axis vector :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (swamp-bat-idle-path-method-9 (_type_ vector float) vector 9)
    )
  )

(declare-type swamp-bat-slave process-drawable)
(deftype swamp-bat (process-drawable)
  ((child-process       (pointer swamp-bat-slave)  :score 100 :offset 20)
   (root-override       collide-shape :score 100 :offset 112)
   (fact-override       fact-info-enemy :score 100 :offset 144)
   (path-origin         vector  :inline :offset-assert 176)
   (idle-position-angle float   8       :offset-assert 192)
   (path-select-plane   plane 2       :inline :offset-assert 224)
   (path-list           curve-control 2       :offset-assert 256)
   (path-select         int8            :offset-assert 264)
   (slave-count         int8            :offset-assert 265)
   (path-count          int8            :offset-assert 266)
   )
  :method-count-assert 20
  :size-assert         #x10b
  :heap-base           #xa0
  :flag-assert         #x1400a0010b
  (:states
    swamp-bat-idle
    swamp-bat-launch-slaves)
  )

(deftype swamp-bat-slave (process-drawable)
  ((parent-process      (pointer swamp-bat)  :score 100 :offset 12)
   (root-override       collide-shape-moving        :score 100 :offset 112)
   (sync                sync-info           :inline :offset-assert 176)
   (idle-anim-speed     float                       :offset-assert 184)
   (strafe-envelope     float                       :offset-assert 188)
   (strafe-distance     float                       :offset-assert 192)
   (path-point-count    float                       :offset-assert 196)
   (idle-path           swamp-bat-idle-path :inline :offset-assert 208)
   (idle-position       vector              :inline :offset-assert 256)
   (idle-position-index int8                        :offset-assert 272)
   (path-select         int8                        :offset-assert 273)
   (launch-ready        symbol                      :offset-assert 276)
   )
  :method-count-assert 21
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1500b00118
  (:methods
    (swamp-bat-slave-method-20 (_type_) float 20)
    )
  (:states
    swamp-bat-slave-idle
    swamp-bat-slave-return
    swamp-bat-slave-strafe
    swamp-bat-slave-swoop
    (swamp-bat-slave-die handle)
    swamp-bat-slave-launch)
  )

;; - Functions

(define-extern swamp-bat-make-path-select-plane (function int float :behavior swamp-bat))
(define-extern swamp-bat-setup-new-path (function int symbol :behavior swamp-bat))
(define-extern swamp-bat-update-path (function none :behavior swamp-bat))
(define-extern swamp-bat-slave-init-by-other (function swamp-bat-slave int none :behavior swamp-bat-slave))
(define-extern swamp-bat-launch-slave (function object :behavior swamp-bat))
(define-extern swamp-bat-check-slave-paths-match? (function int symbol :behavior swamp-bat))
(define-extern swamp-bat-slave-get-new-path (function float :behavior swamp-bat-slave))
(define-extern swamp-bat-slave-post (function int :behavior swamp-bat-slave))
(define-extern swamp-bat-slave-event-handler (function process int symbol event-message-block object :behavior swamp-bat-slave))
(define-extern swamp-bat-slave-path-post (function int :behavior swamp-bat-slave))
(define-extern swamp-bat-debug (function none :behavior swamp-bat))

;; - Unknowns

(define-extern *swamp-bat-slave-sg* skeleton-group)


;; ----------------------
;; File - swamp-rat
;; Source Path - levels/swamp/swamp-rat.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(declare-type swamp-rat-nest process-drawable)
(deftype swamp-rat (nav-enemy)
  ((up-vector          vector :inline :offset-assert 400)
   (state-float        float          :offset-assert 416)
   (state-vector       vector :inline :offset-assert 432)
   ;(free-time          uint64         :offset-assert 360)
   (_hack              uint64         :offset-assert 448)
   (wiggle-time        time-frame         :offset-assert 456)
   (wiggle-angle       float          :offset-assert 464)
   (delta-wiggle-angle float          :offset-assert 468)
   (wiggle-factor      float          :offset-assert 472)
   (min-height         float          :offset-assert 476)
   (chase-rest-time    time-frame         :offset-assert 480)
   (target-nav-time    time-frame         :offset-assert 488)
   )
  :method-count-assert 76
  :size-assert         #x1f0
  :heap-base           #x180
  :flag-assert         #x4c018001f0
  (:states
    swamp-rat-spawn)
  )

;; - Functions

(define-extern swamp-rat-update-wiggle-target (function vector vector :behavior swamp-rat))
(define-extern swamp-rat-update-wiggle-params (function float :behavior swamp-rat))
(define-extern swamp-rat-default-event-handler (function process int symbol event-message-block object :behavior swamp-rat))
(declare-type billy process-drawable)
(define-extern swamp-rat-init-by-other (function billy vector vector pickup-type symbol none :behavior swamp-rat))

;; - Unknowns

(define-extern *swamp-rat-sg* skeleton-group)
(define-extern *swamp-rat-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - swamp-rat-nest
;; Source Path - levels/swamp/swamp-rat-nest.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(declare-type swamp-rat-nest-dummy process-drawable)
(deftype swamp-rat-nest (process-drawable)
  ((child-process       (pointer swamp-rat-nest-dummy)  :score 100 :offset 20)
   (fact-override       fact-info-enemy         :score 100 :offset 144)
   (dummy               (pointer swamp-rat-nest-dummy)  :offset-assert 176)
   (damaged             symbol   :offset-assert 180)
   (dummy-type          int8    :offset-assert 184)
   (rat-count           int8    :offset-assert 185)
   (hit-points          int8    :offset-assert 186)
   (defensive-rat-count int8    :offset-assert 187)
   (spawn-period        float   :offset-assert 188)
   (spawn-period-scale  float   :offset-assert 192)
   (test-interval       time-frame  :offset-assert 200)
   (player-attack-id    int32   :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xd4
  :heap-base           #x70
  :flag-assert         #x14007000d4
  (:states
    swamp-rat-nest-idle
    swamp-rat-nest-active
    swamp-rat-nest-gestate
    swamp-rat-nest-die
    swamp-rat-nest-victory)
  )

(deftype swamp-rat-nest-dummy (process-drawable)
  ((parent-process       (pointer swamp-rat-nest)  :score 100 :offset 12)
   (root-override        collide-shape        :score 100 :offset 112)
   (top-sphere           sphere  :inline :offset-assert 176)
   (death-part           sparticle-launch-group           :offset-assert 192)
   (spawn-joint-array    int8    6       :offset-assert 196)
   (spawn-joint-count    int8            :offset-assert 202)
   (particle-spawn-joint int8            :offset-assert 203)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x16006000cc
  (:methods
    (swamp-rat-nest-dummy-method-20 (_type_) none 20)
    (swamp-rat-nest-dummy-method-21 (_type_) int 21)
    )
  (:states
    swamp-rat-nest-dummy-idle
    swamp-rat-nest-dummy-hit
    swamp-rat-nest-dummy-die
    swamp-rat-nest-dummy-shake)
  )

(deftype swamp-rat-nest-dummy-a (swamp-rat-nest-dummy)
  ()
  :method-count-assert 22
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x16006000cc
  )

(deftype swamp-rat-nest-dummy-b (swamp-rat-nest-dummy)
  ()
  :method-count-assert 22
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x16006000cc
  )

(deftype swamp-rat-nest-dummy-c (swamp-rat-nest-dummy)
  ()
  :method-count-assert 22
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x16006000cc
  )

;; - Functions

(define-extern swamp-rat-nest-check-dummy (function none :behavior swamp-rat-nest))
(define-extern swamp-rat-nest-spawn-rat (function (pointer swamp-rat) :behavior swamp-rat-nest)) ;; this needs a t2 symbol arg to pass to swamp-rat-init-from-other...but
(define-extern swamp-rat-nest-dummy-init-by-other (function swamp-rat-nest-dummy none :behavior swamp-rat-nest-dummy))
(define-extern swamp-rat-nest-pick-spawn-joint (function int :behavior swamp-rat-nest))
(define-extern swamp-rat-nest-dummy-take-damage (function int none :behavior swamp-rat-nest-dummy))
(define-extern swamp-rat-nest-dummy-draw-spawn-joints (function symbol :behavior swamp-rat-nest-dummy))
(define-extern swamp-rat-nest-dummy-event-handler (function process int symbol event-message-block object :behavior swamp-rat-nest-dummy))
(define-extern swamp-rat-nest-default-event-handler (function process int symbol event-message-block object :behavior swamp-rat-nest))

;; - Unknowns

(define-extern *swamp-rat-nest-dummy-c-sg* skeleton-group)
(define-extern *swamp-rat-nest-dummy-b-sg* skeleton-group)
(define-extern *swamp-rat-nest-dummy-a-sg* skeleton-group)


;; ----------------------
;; File - kermit
;; Source Path - levels/swamp/kermit.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(declare-type kermit nav-enemy)
(deftype joint-mod-tracker (basic)
  ((target-pos               vector :inline :offset-assert 16)
   (target-pos-func          (function vector vector)          :offset-assert 32)
   (inv-forward-scale-factor float          :offset-assert 36)
   (forward-scale-control    float          :offset-assert 40)
   (forward-scale-max        float          :offset-assert 44)
   (process                  kermit          :offset-assert 48) ;; could probably be other things too
   (enable                   symbol          :offset-assert 52)
   (up-axis                  int8           :offset-assert 56)
   (forward-axis             int8           :offset-assert 57)
   )
  :method-count-assert 9
  :size-assert         #x3a
  :flag-assert         #x90000003a
  (:methods (new (symbol type kermit int function int int) _type_ 0))
  )

(deftype kermit-pulse (process-drawable)
  ((parent-override (pointer kermit) :score 100         :offset 12)
   (self-override kermit-pulse :score 100         :offset 28)
   (root-override collide-shape-moving :score 100 :offset 112)
   (sound-id sound-id  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    kermit-pulse-idle
    kermit-pulse-impact)
  )

(deftype kermit (nav-enemy)
  ((child-override (pointer kermit-pulse) :score 100         :offset 20)
   (rotate-dir       vector :inline :offset-assert 400)
   (charging-part    sparticle-launch-control         :offset-assert 416)
   (airborne         symbol          :offset-assert 420)
   (tongue-control   joint-mod-tracker          :offset-assert 424)
   (tongue-pulse-pos float          :offset-assert 428)
   (miss-count       int8           :offset-assert 432)
   (charged-up       symbol          :offset-assert 436)
   (sound-id         sound-id       :offset-assert 440)
   )
  :method-count-assert 76
  :size-assert         #x1bc
  :heap-base           #x150
  :flag-assert         #x4c015001bc
  (:states
    kermit-idle
    kermit-chase
    kermit-retract-tongue
    kermit-tongue-stuck
    kermit-patrol
    kermit-attack
    kermit-chase-new-position
    kermit-give-up
    kermit-notice)
  )

;; - Functions

(define-extern kermit-get-tongue-target-callback (function vector vector))
(define-extern kermit-disable-tongue (function none :behavior kermit))
(define-extern kermit-hop (function float symbol :behavior kermit))
(define-extern kermit-set-nav-mesh-target (function vector vector :behavior kermit))
(define-extern kermit-set-rotate-dir-to-player (function vector :behavior kermit))
(define-extern kermit-simple-post (function none :behavior kermit))
(define-extern kermit-player-target-pos (function vector))
(define-extern kermit-tongue-pos (function kermit vector))
(define-extern kermit-check-tongue-is-clear? (function symbol :behavior kermit))
(define-extern kermit-enable-tongue (function none :behavior kermit))
(define-extern spawn-kermit-pulse (function kermit vector entity none))
(define-extern kermit-check-to-hit-player? (function float symbol :behavior kermit))
(define-extern kermit-get-head-dir-xz (function kermit vector vector))
(define-extern kermit-set-rotate-dir-to-nav-target (function vector :behavior kermit))
(define-extern kermit-get-new-patrol-point (function vector :behavior kermit))
(define-extern kermit-long-hop (function symbol :behavior kermit))
(define-extern kermit-short-hop (function symbol :behavior kermit))
(define-extern kermit-pulse-init-by-other (function vector entity-actor none :behavior kermit-pulse))
(define-extern joint-mod-tracker-callback (function cspace transformq none))
(define-extern build-matrix-from-up-and-forward-axes! (function matrix vector int vector int matrix))
(define-extern kermit-get-head-dir (function kermit vector vector))
(define-extern kermit-post (function none :behavior kermit))

;; - Unknowns

(define-extern *kermit-sg* skeleton-group)
(define-extern *kermit-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - swamp-part
;; Source Path - levels/swamp/swamp-part.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(deftype swamp-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - billy
;; Source Path - levels/swamp/billy.gc
;; Containing DGOs - ['L1', 'SWA']
;; Version - 3

;; - Types

(declare-type billy-snack process-drawable)
(deftype billy (process-taskable)
  ((child-override         (pointer billy-snack)  :score 100 :offset 20)
   (farthy            handle    :offset-assert 384)
   (path-data         path-control 3   :offset-assert 392)
   (path-snacks       path-control     :offset 392)
   (path-starts       path-control     :offset 396)
   (path-waypts       path-control     :offset 400)
   (passed-last-stage symbol     :offset-assert 404)
   (spawn-rats        symbol     :offset-assert 408)
   (current-wave      int32     :offset-assert 412)
   (wave-start-time   time-frame    :offset-assert 416)
   (num-snacks        int32     :offset-assert 424)
   (num-rats          int32     :offset-assert 428)
   (max-rats          int32     :offset-assert 432)
   (rat-speed         float     :offset-assert 436)
   (offending-rat     handle    :offset-assert 440)
   )
  :method-count-assert 53
  :size-assert         #x1c0
  :heap-base           #x150
  :flag-assert         #x35015001c0
  (:states
    billy-playing
    billy-done)
  )

(deftype billy-snack (process-drawable)
  ((num-rats int32  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    billy-snack-idle
    billy-snack-eat)
  )
(deftype billy-rat (swamp-rat)
  ((dest-type   uint64         :offset-assert 496)
   (snack       handle         :offset-assert 504)
   (destination vector :inline :offset-assert 512)
   (billy       (pointer billy)         :offset-assert 528)
   )
  :method-count-assert 76
  :size-assert         #x214
  :heap-base           #x1b0
  :flag-assert         #x4c01b00214
  (:states
    billy-rat-salivate
    billy-rat-eat)
  )

;; - Functions

(define-extern billy-kill-all-but-farthy (function symbol :behavior billy))
(define-extern billy-game-update (function none :behavior billy))
(define-extern billy-snack-init-by-other (function vector none :behavior billy-snack))
(define-extern rat-about-to-eat? (function billy-rat billy symbol))
(define-extern billy-game-update-wave (function none :behavior billy))
(define-extern billy-rat-init-by-other (function billy vector vector none :behavior billy-rat))

;; - Unknowns

(define-extern *billy-sg* skeleton-group)
(define-extern *billy-sidekick-sg* skeleton-group)
(define-extern *farthy-snack-sg* skeleton-group)


;; ----------------------
;; File - cavecrystal-light
;; Source Path - levels/maincave/cavecrystal-light.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype cavecrystal-light (structure)
  ((next           cavecrystal-light         :offset-assert 0)
   (crystal-id     int32                     :offset-assert 4)
   (intensity      float                     :offset-assert 8)
   (fade-start     float                     :offset-assert 12)
   (fade-end       float                     :offset-assert 16)
   (crystal-handle handle                    :offset-assert 24)
   (trans          vector            :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype cavecrystal-light-control (basic)
  ((active-count          int32               :offset-assert 4)
   (head                  cavecrystal-light   :offset-assert 8)
   (last-known-valid-time time-frame              :offset-assert 16)
   (crystal               cavecrystal-light           7 :inline :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x170
  :flag-assert         #xf00000170
  (:methods
    (cavecrystal-light-control-method-9 (_type_ int float process-drawable) none 9)
    (cavecrystal-light-control-method-10 (_type_ vector) float 10)
    (inc-intensities! (_type_) none 11)
    (cavecrystal-light-control-method-12 (_type_) none 12)
    (create-connection! (_type_ process-drawable res-lump (function object object object object object) int float) connection 13) ;; TODO - process-drawable is often a cavecrystal
    (execute-connections (_type_) int 14)
    )
  )

;; - Functions

(define-extern cavecrystal-light-control-default-callback (function (pointer process-drawable) int float none))

;; - Unknowns

(define-extern *cavecrystal-engine* engine)


;; ----------------------
;; File - maincave-obs
;; Source Path - levels/maincave/maincave-obs.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype maincavecam (pov-camera)
  ((seq uint64  :offset-assert 224)
   )
  :method-count-assert 30
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x1e008000e8
  )

(deftype cave-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype cavecrusher (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    cavecrusher-idle)
  )

(deftype cavetrapdoor (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (delay-before-wiggle int32  :offset-assert 176)
   )
  :method-count-assert 22
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x16005000b4
  (:methods
    (idle () _type_ :state 20)
    (trigger () _type_ :state 21)
    )
  )

(deftype caveflamepots (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (shove-up           float     :offset-assert 176)
   (cycle-speed        int32     :offset-assert 180)
   (cycle-pause        int32     :offset-assert 184)
   (cycle-offset       uint32    :offset-assert 188)
   (was-deadly?        symbol     :offset-assert 192)
   (should-play-sound? symbol     :offset-assert 196)
   (launch-pos         vector 2 :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x14008000f0
  (:states
    caveflamepots-active)
  )

(deftype cavespatula (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (sync sync-info :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    cavespatula-idle)
  )

(deftype cavespatulatwo (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (sync sync-info :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    cavespatulatwo-idle)
  )

(deftype caveelevator (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (elev-mode               uint64                :offset-assert 176)
   (elev-type               int32                 :offset-assert 184)
   (prev-frame-num          float                 :offset-assert 188)
   (last-update-bounce-time time-frame                :offset-assert 192)
   (orig-trans              vector        :inline :offset-assert 208)
   (sync                    sync-info     :inline :offset-assert 224)
   (smush                   smush-control :inline :offset-assert 232)
   (anim                    int32    2     :offset-assert 264)
   (wheel-ry-mat            matrix        :inline :offset 272)
   )
  :method-count-assert 22
  :size-assert         #x150
  :heap-base           #xe0
  :flag-assert         #x1600e00150
  (:methods
    (caveelevator-method-20 (_type_) none 20)
    (caveelevator-method-21 (_type_) float 21)
    )
  (:states
    caveelevator-cycle-active
    caveelevator-one-way-idle-start
    caveelevator-one-way-travel-to-start
    caveelevator-one-way-idle-end
    caveelevator-one-way-travel-to-end)
  )

;; - Functions

(define-extern caveelevator-joint-callback (function caveelevator none))
(define-extern cavecrystal-light-control-caveelevator-callback (function (pointer cavecrystal) int float vector))

;; - Unknowns

(define-extern *caveelevator-sg* skeleton-group)
(define-extern *cavespatulatwo-sg* skeleton-group)
(define-extern *cavespatula-darkcave-sg* skeleton-group)
(define-extern *cavespatula-sg* skeleton-group)
(define-extern *cavetrapdoor-sg* skeleton-group)
(define-extern *cavecrusher-sg* skeleton-group)
(define-extern ripple-for-cave-water ripple-wave-set)
(define-extern *maincavecam-sg* skeleton-group)


;; ----------------------
;; File - maincave-part
;; Source Path - levels/maincave/maincave-part.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype maincave-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

(deftype darkcave-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern check-drop-level-maincave-drip (function sparticle-system sparticle-cpuinfo vector none))


;; ----------------------
;; File - spiderwebs
;; Source Path - levels/maincave/spiderwebs.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype spiderwebs (process-drawable)
  ((spring-height meters  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    spiderwebs-idle
    spiderwebs-bounce
    )
  )

;; - Functions

(define-extern spiderwebs-default-event-handler (function process int symbol event-message-block object :behavior spiderwebs))

;; - Unknowns

(define-extern *spiderwebs-sg* skeleton-group)
(define-extern *spider-jump-mods* surface)


;; ----------------------
;; File - dark-crystal
;; Source Path - levels/maincave/dark-crystal.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype dark-crystal (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (crystal-num           int32          :offset-assert 176)
   (underwater?           symbol          :offset-assert 180)
   (explode-danger-radius float          :offset-assert 184)
   (lit-color-mult        vector :inline :offset-assert 192)
   (lit-color-emissive    vector :inline :offset-assert 208)
   (unlit-color-mult      vector :inline :offset-assert 224)
   (unlit-color-emissive  vector :inline :offset-assert 240)
   )
  :method-count-assert 22
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1600900100
  (:methods
    (dark-crystal-method-20 (_type_) none 20)
    (dark-crystal-method-21 (_type_) symbol 21)
    )
  (:states
    dark-crystal-spawn-fuel-cell
    dark-crystal-idle
    dark-crystal-explode
    dark-crystal-activate)
  )

;; - Unknowns

(define-extern *dark-crystal-sg* skeleton-group)
(define-extern *dark-crystal-explode-sg* skeleton-group)
(define-extern *dark-crystal-exploder-params* joint-exploder-static-params)
(define-extern *dark-crystal-flash-delays* (array int32))


;; ----------------------
;; File - baby-spider
;; Source Path - levels/maincave/baby-spider.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype baby-spider-spawn-params (structure)
  ((hatched?                          symbol   :offset-assert 0)
   (fast-start?                       symbol   :offset-assert 4)
   (hack-move-above-ground?           symbol   :offset-assert 8)
   (die-if-not-visible?               symbol   :offset-assert 12)
   (pickup                            int32   :offset-assert 16)
   (pickup-amount                     int32   :offset-assert 20)
   (event-death                       symbol   :offset-assert 24)
   (delay-before-dying-if-not-visible time-frame  :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (init! (_type_ symbol symbol symbol symbol int int symbol) none 9)
    (set-delay! (_type_ time-frame) none 10)
    )
  )

(deftype baby-spider (nav-enemy)
  ((die-if-not-visible?               symbol         :offset-assert 400)
   (hack-move-above-ground?           symbol         :offset-assert 404)
   (state-float                       float          :offset-assert 408)
   (wiggle-angle                      float          :offset-assert 412)
   (delta-wiggle-angle                float          :offset-assert 416)
   (wiggle-factor                     float          :offset-assert 420)
   (event-death                       symbol         :offset-assert 424)
   (delay-before-dying-if-not-visible time-frame         :offset-assert 432)
   (chase-rest-time                   time-frame         :offset-assert 440)
   (target-nav-time                   time-frame         :offset-assert 448)
   (unknown00                         basic          :offset-assert 456)
   (unknown01                         basic          :offset-assert 460)
   (wiggle-time                       time-frame         :offset-assert 464)
   (last-visible-time                 time-frame         :offset-assert 472)
   (up-vector                         vector :inline :offset-assert 480)
   (state-vector                      vector :inline :offset-assert 496)
   )
  :method-count-assert 76
  :size-assert         #x200
  :heap-base           #x190
  :flag-assert         #x4c01900200
  (:states
    baby-spider-hatching
    baby-spider-resume
    baby-spider-die-fast
    )
  )

;; - Functions

(define-extern baby-spider-default-event-handler (function process int symbol event-message-block object :behavior baby-spider))
(define-extern baby-spider-init-by-other (function baby-spider vector vector baby-spider-spawn-params none :behavior baby-spider))

;; - Unknowns

(define-extern *baby-spider-sg* skeleton-group)
(define-extern *baby-spider-nav-enemy-info-for-cave-trap* nav-enemy-info)
(define-extern *baby-spider-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - mother-spider-h
;; Source Path - levels/maincave/mother-spider-h.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype mother-spider-leg (process-drawable)
  ((gravity     float          :offset-assert 176)
   (transv      vector :inline :offset-assert 192)
   (facing-rot  vector :inline :offset-assert 208)
   (facing-rotv vector :inline :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x14008000f0
  (:states
    (mother-spider-leg-flying))
  )

(deftype mother-spider-thread (structure)
  ((joint-index int32  :offset-assert 0)
   (trans-u     float  :offset-assert 4)
   (swing-arc-u float  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype mother-spider-leg-info (structure)
  ((joint-index0 int32  :offset-assert 0)
   (joint-index1 int32  :offset-assert 4)
   (cprim-index  int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype mother-spider-history (structure)
  ((trans vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mother-spider-history-array (inline-array-class)
  ((data             mother-spider-history :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mother-spider (process-drawable)
  ((root-override                  collide-shape :score 100 :offset 112)
   (mode                           uint64          :offset-assert 176)
   (damage                         int32           :offset-assert 184)
   (baby-count                     int32           :offset-assert 188)
   (max-baby-count                 int32           :offset-assert 192)
   (birthing-counter               int32           :offset-assert 196)
   (spit-counter                   int32           :offset-assert 200)
   (leg-socket-part-mask           int32           :offset-assert 204)
   (dist-from-anchor               float           :offset-assert 208)
   (targ-dist-from-anchor          float           :offset-assert 212)
   (idle-dist-from-anchor          float           :offset-assert 216)
   (player-sticky-dist-from-anchor float           :offset-assert 220)
   (max-dist-from-anchor           float           :offset-assert 224)
   (activate-xz-dist               float           :offset-assert 228)
   (deactivate-xz-dist             float           :offset-assert 232)
   (max-spit-xz-dist               float           :offset-assert 236)
   (max-swing-radius               float           :offset-assert 240)
   (spin-vel                       float           :offset-assert 244)
   (thread-speed                   float           :offset-assert 248)
   (thread-vel                     float           :offset-assert 252)
   (history                        mother-spider-history-array           :offset-assert 256)
   (history-len                    int32           :offset-assert 260)
   (history-next-index             int32           :offset-assert 264)
   (hit?                           symbol           :offset-assert 268)
   (going-up?                      symbol           :offset-assert 272)
   (check-z-thresh?                symbol           :offset-assert 276)
   (activate-z-thresh              float           :offset-assert 280)
   (deactivate-z-thresh            float           :offset-assert 284)
   (spawned-time                   time-frame          :offset-assert 288)
   (last-update-time               time-frame          :offset-assert 296)
   (spin-time                      time-frame          :offset-assert 304)
   (last-spit-time                 time-frame          :offset-assert 312)
   (last-player-in-air-time        time-frame          :offset-assert 320)
   (started-birthing-time          time-frame          :offset-assert 328)
   (neck                           joint-mod           :offset-assert 336)
   (player-attack-id               uint64          :offset-assert 344)
   (leg-socket-part-time           time-frame  6       :offset-assert 352)
   (orient-rot                     vector  :inline :offset-assert 400)
   (anchor-trans                   vector  :inline :offset-assert 416)
   (thread-min-trans               vector  :inline :offset-assert 432)
   (swing-pos                      vector  :inline :offset-assert 448)
   (swing-base-pos                 vector  :inline :offset-assert 464)
   (swing-vel                      vector  :inline :offset-assert 480)
   )
  :method-count-assert 32
  :size-assert         #x1f0
  :heap-base           #x180
  :flag-assert         #x20018001f0
  (:methods
    (mother-spider-method-20 (_type_ vector vector) symbol 20)
    (mother-spider-method-21 (_type_ vector float symbol) symbol 21)
    (mother-spider-method-22 (_type_ matrix vector) float 22)
    (mother-spider-method-23 (_type_) none 23)
    (shadow-handler (_type_) number 24)
    (letgo-player? (_type_) symbol 25)
    (grab-player? (_type_) symbol 26)
    (mother-spider-method-27 (_type_) none 27)
    (mother-spider-method-28 (_type_) none 28)
    (mother-spider-method-29 (_type_ symbol symbol) none 29)
    (spawn-child (_type_ vector vector symbol) int 30)
    (is-player-stuck? (_type_) symbol 31)
    )
  (:states
    (mother-spider-die-wait-for-children)
    (mother-spider-idle)
    (mother-spider-hit-while-birthing)
    (mother-spider-birthing)
    (mother-spider-traveling uint)
    (mother-spider-birth-baby)
    (mother-spider-tracking)
    (mother-spider-hit-while-tracking)
    (mother-spider-spit)
    (mother-spider-stop-traveling)
    (mother-spider-die-from-uppercut)
    (mother-spider-die)
    (wait-for-children))
  )

;; ----------------------
;; File - mother-spider-egg
;; Source Path - levels/maincave/mother-spider-egg.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype mother-spider-egg (process-drawable)
  ((parent-override (pointer mother-spider) :score 100         :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112)
   (anim-speed         float              :offset-assert 176)
   (part2              sparticle-launch-control              :offset-assert 180)
   (falling-start-time time-frame             :offset-assert 184)
   (fall-dest          vector     :inline :offset-assert 192)
   (fall-dest-normal   vector     :inline :offset-assert 208)
   (broken-look        lod-set    :inline :offset-assert 224)
   (traj               trajectory :inline :offset-assert 272)
   (shadow-pos         vector     :inline :offset-assert 320)
   )
  :method-count-assert 22
  :size-assert         #x150
  :heap-base           #xe0
  :flag-assert         #x1600e00150
  (:methods
    (mother-spider-egg-method-20 (_type_) none 20)
    (draw-egg-shadow (_type_ vector symbol) symbol 21)
    )
  (:states
    (mother-spider-egg-falling)
    (mother-spider-egg-die-exit)
    (mother-spider-egg-hatch)
    (mother-spider-egg-die)
    (mother-spider-egg-on-ground)
    (mother-spider-egg-die-while-falling))
  )

;; - Functions

(define-extern mother-spider-egg-init-by-other (function entity-actor vector vector vector none :behavior mother-spider-egg))

;; - Unknowns

(define-extern *mother-spider-egg-unbroken-sg* skeleton-group)
(define-extern *mother-spider-egg-broken-sg* skeleton-group)


;; ----------------------
;; File - mother-spider-proj
;; Source Path - levels/maincave/mother-spider-proj.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype mother-spider-proj (projectile)
  ((parent-process (pointer projectile) :score 100 :offset 12)
   (facing-dir vector :inline :offset-assert 416)
   )
  :method-count-assert 29
  :heap-base           #x140
  :size-assert         #x1b0
  :flag-assert         #x1d014001b0
  ;; inherited inspect of projectile
  )

;; - Functions

(define-extern mother-spider-proj-update-velocity (function mother-spider-proj none))


;; ----------------------
;; File - mother-spider
;; Source Path - levels/maincave/mother-spider.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Functions

(define-extern mother-spider-leg-init-by-other (function mother-spider vector vector vector none :behavior mother-spider-leg))
(define-extern mother-spider-full-joint-callback (function mother-spider none))
(define-extern mother-spider-default-event-handler (function process int symbol event-message-block object :behavior mother-spider))
(define-extern mother-spider-death-event-handler (function process int symbol event-message-block object :behavior mother-spider))

;; - Unknowns

(define-extern *mother-spider-sg* skeleton-group)
(define-extern *mother-spider-threads* (inline-array mother-spider-thread))
(define-extern *mother-spider-leg-infos* (inline-array mother-spider-leg-info))
(define-extern *mother-spider-leg-sg* skeleton-group)


;; ----------------------
;; File - gnawer
;; Source Path - levels/maincave/gnawer.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype gnawer-falling-segment (process-drawable)
  ((transv      vector :inline :offset-assert 176)
   (facing-rot  vector :inline :offset-assert 192)
   (facing-rotv vector :inline :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x15007000e0
  (:methods
    (falling () _type_ :state 20)
    )
  )

(deftype gnawer-segment-info (structure)
  ((num-joints  int32     :offset-assert 0)
   (joint-index int8    8 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype gnawer-segment (structure)
  ((place                      int32          :offset-assert 0)
   (world-pos                  vector :inline :offset-assert 16)
   (anim-to-local-trans-offset vector :inline :offset-assert 32)
   (orient-mat                 matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype gnawer-route (structure)
  ((src-pt-index      int32          :offset-assert 0)
   (dest-pt-index     int32          :offset-assert 4)
   (total-travel-time time-frame         :offset-assert 8)
   (src-ang           float          :offset-assert 16)
   (dest-ang          float          :offset-assert 20)
   (delta-ang         float          :offset-assert 24)
   (surface-dist      float          :offset-assert 28)
   (total-dist        float          :offset-assert 32)
   (src-pt-offset     vector :inline :offset-assert 48)
   (dest-pt-offset    vector :inline :offset-assert 64)
   (surface-dir       vector :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype gnawer (process-drawable)
  ((root-override  collide-shape :score 100 :offset 112)
   (hit-points     int32                :offset-assert 176)
   (gnawer-id      int32                :offset-assert 180)
   (total-money    int32                :offset-assert 184)
   (money-mask     uint32               :offset-assert 188)
   (eco-green-mask uint32               :offset-assert 192)
   (hidden?        symbol                :offset-assert 196)
   (show-damage?   symbol                :offset-assert 200)
   (route-dist     float                :offset-assert 204)
   (speed          float                :offset-assert 208)
   (anim-speed     float                :offset-assert 212)
   (part2          sparticle-launch-control                :offset-assert 216)
   (sound2         ambient-sound                :offset-assert 220)
   (last-hit-time  time-frame               :offset-assert 224)
   (post-trans     vector       :inline :offset-assert 240)
   (fall-trans     vector       :inline :offset-assert 256)
   (route          gnawer-route :inline :offset-assert 272)
   (segments       gnawer-segment      10      :inline :offset-assert 368)
   )
  :method-count-assert 31
  :size-assert         #x5d0
  :heap-base           #x560
  :flag-assert         #x1f056005d0
  (:methods
    (gnawer-method-20 (_type_ int) matrix 20)
    (gnawer-method-21 (_type_ int bounding-box symbol float) float 21)
    (gnawer-method-22 (_type_ float) symbol 22)
    (gnawer-method-23 (_type_) none 23)
    (gnawer-method-24 (_type_) none 24)
    (gnawer-method-25 (_type_) symbol 25)
    (gnawer-method-26 (_type_) none 26)
    (gnawer-method-27 (_type_) none 27)
    (gnawer-method-28 (_type_ int int) symbol 28)
    (gnawer-method-29 (_type_ int vector vector) float 29)
    (gnawer-method-30 (_type_ process-drawable) uint 30)
    )
  (:states
    gnawer-put-items-at-dest
    gnawer-chewing-on-post
    gnawer-give-fuel-cell
    gnawer-dying-give-pickups
    gnawer-wait-to-run
    gnawer-die
    gnawer-run
    gnawer-retreat-into-post)
  )

;; - Functions

(define-extern gnawer-falling-segment-init-by-other (function gnawer vector vector none :behavior gnawer-falling-segment))
(define-extern gnawer-joint-callback (function gnawer none))

;; - Unknowns

(define-extern *gnawer-sg* skeleton-group)
(define-extern *gnawer-segment-infos* (inline-array gnawer-segment-info))
(define-extern *gnawer-segment-sg* skeleton-group)


;; ----------------------
;; File - driller-lurker
;; Source Path - levels/maincave/driller-lurker.gc
;; Containing DGOs - ['L1', 'MAI', 'MAINCAVE']
;; Version - 3

;; - Types

(deftype driller-lurker (process-drawable)
  ((root-overeride collide-shape-moving :score 100 :offset 112)
   (hit-player?             symbol   :offset-assert 176)
   (played-drill-sound?     symbol   :offset-assert 180)
   (mode                    uint64  :offset-assert 184)
   (path-u                  float   :offset-assert 192)
   (path-units-per-meter    float   :offset-assert 196)
   (path-speed              float   :offset-assert 200)
   (targ-path-speed         float   :offset-assert 204)
   (path-dir                float   :offset-assert 208)
   (path-ry                 float   :offset-assert 212)
   (facing-ry               float   :offset-assert 216)
   (drill-rz                float   :offset-assert 220)
   (drill-speed             float   :offset-assert 224)
   (up-blend                float   :offset-assert 228)
   (player-path-u           float   :offset-assert 232)
   (ambient-drilling-u      float   :offset-assert 236)
   (timeout                 int32   :offset-assert 240)
   (neck                    joint-mod   :offset-assert 244)
   (drill                   joint-mod   :offset-assert 248)
   (sound2                  ambient-sound   :offset-assert 252)
   (last-update-time        time-frame  :offset-assert 256)
   (last-player-path-u-time time-frame  :offset-assert 264)
   (started-chasing-time    time-frame  :offset-assert 272)
   (hit-player-time         time-frame  :offset-assert 280)
   (player-attack-id        uint64  :offset-assert 288)
   )
  :method-count-assert 28
  :size-assert         #x128
  :heap-base           #xc0
  :flag-assert         #x1c00c00128
  (:methods
    (driller-lurker-method-20 (_type_ symbol target) symbol 20)
    (driller-lurker-method-21 (_type_) none 21)
    (driller-lurker-method-22 (_type_) none 22)
    (driller-lurker-method-23 (_type_) float 23)
    (driller-lurker-method-24 (_type_) symbol 24)
    (driller-lurker-method-25 (_type_) symbol 25)
    (driller-lurker-method-26 (_type_) symbol 26)
    (driller-lurker-method-27 (_type_) object 27)
    )
  (:states
    driller-lurker-idle-drilling
    driller-lurker-patrol
    (driller-lurker-chase symbol)
    driller-lurker-jammed-standing
    driller-lurker-attack
    driller-lurker-patrol-pause
    driller-lurker-die
    driller-lurker-debug-play-anims)
  )

;; - Functions

(define-extern driller-lurker-default-event-handler (function process int symbol event-message-block object :behavior driller-lurker))

;; - Unknowns

(define-extern *driller-lurker-sg* skeleton-group)
(define-extern *driller-lurker-shadow-control* shadow-control)


;; ----------------------
;; File - sunken-part
;; Source Path - levels/sunken/sunken-part.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype sunken-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - target-tube
;; Source Path - levels/sunken/target-tube.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype tube-info (basic)
  ((entity          basic          :offset-assert 4)
   (tube            handle         :offset-assert 8)
   (downhill        vector :inline :offset-assert 16)
   (centertube      vector :inline :offset-assert 32)
   (downtube        vector :inline :offset-assert 48)
   (sidetube        vector :inline :offset-assert 64)
   (foretube        vector :inline :offset-assert 80)
   (old-transv      vector :inline :offset-assert 96)
   (mod-x           float          :offset-assert 112)
   (mod-y           float          :offset-assert 116)
   (start-time      time-frame         :offset-assert 120)
   (turn-anim-targ  float          :offset-assert 128)
   (turn-anim-frame float          :offset-assert 132)
   (turn-anim-vel   float          :offset-assert 136)
   (tube-sound-id   sound-id       :offset-assert 140)
   (tube-sound-vol  float          :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

(deftype tube-bank (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype slide-control (process-drawable)
  ((target handle         :offset-assert 176)
   (pos    float          :offset-assert 184)
   (trans  vector :inline :offset-assert 192)
   (rot    vector :inline :offset-assert 208)
   (side   vector :inline :offset-assert 224)
   )
  :method-count-assert 22
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x16008000f0
  (:methods
    (slide-control-watch () _type_ :state 20)
    (slide-control-ride () _type_ :state 21)
    )
  )

;; - Functions

(define-extern find-target-point (function vector float :behavior slide-control))
(define-extern distance-from-tangent (function path-control float vector vector vector vector float))
(define-extern target-tube-post (function none :behavior target))
(define-extern target-tube-turn-anim (function none :behavior target))
(define-extern tube-thrust (function float float none :behavior target))
(define-extern tube-sounds (function sound-id :behavior target))

;; - Unknowns

(define-extern *tube-jump-mods* surface)
(define-extern *tube-mods* surface)
(define-extern *tube-surface* surface)
(define-extern *tube-hit-mods* surface)
(define-extern *TUBE-bank* tube-bank)


;; ----------------------
;; File - sunken-obs
;; Source Path - levels/sunken/sunken-obs.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype water-vol-deadly (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype side-to-side-plat (plat)
  ((part-ry float  :offset-assert 264)
   )
  :method-count-assert 33
  :size-assert         #x10c
  :heap-base           #xa0
  :flag-assert         #x2100a0010c
  )

(deftype sunkencam (pov-camera)
  ((ppointer-override (pointer sunkencam) :score 100 :offset 24)
   (seq uint64  :offset-assert 224)
   )
  :method-count-assert 30
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x1e008000e8
  )

(deftype seaweed (process-drawable)
  ((anim-speed float  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    seaweed-idle)
  )

;; - Unknowns

(define-extern *seaweed-sg* skeleton-group)
(define-extern *seaweed* seaweed)
(define-extern *side-to-side-plat-sg* skeleton-group)
(define-extern *sunkencam-sg* skeleton-group)


;; ----------------------
;; File - shover
;; Source Path - levels/sunken/shover.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype shover (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (shove-up float  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    (shover-idle))
  )

;; - Unknowns

(define-extern *shover-sg* skeleton-group)
(define-extern *shover* shover)


;; ----------------------
;; File - square-platform
;; Source Path - levels/sunken/square-platform.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype square-platform (baseplat)
  ((plat-id           int32          :offset-assert 228)
   (pos-u             float          :offset-assert 232)
   (water-entity      entity-actor          :offset-assert 236)
   (splash-counter    int32          :offset-assert 240)
   (start-splash-time time-frame         :offset-assert 248)
   (part2             sparticle-launch-control          :offset-assert 256) ; these arent basics
   (part3             sparticle-launch-control          :offset-assert 260) ; these arent basics
   (part4             sparticle-launch-control          :offset-assert 264) ; these arent basics
   (up-pos            vector :inline :offset-assert 272)
   (down-pos          vector :inline :offset-assert 288)
   )
  :method-count-assert 28
  :size-assert         #x130
  :heap-base           #xc0
  :flag-assert         #x1c00c00130
  (:methods
    (square-platform-method-27 (_type_ symbol) none 27)
    )
  (:states
    square-platform-lowered
    square-platform-rising
    square-platform-lowering
    square-platform-raised)
  )

(deftype square-platform-button (basebutton)
  ()
  :method-count-assert 32
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x2000900100
  )

(deftype square-platform-master (process-drawable)
  ((button-id                int32          :offset-assert 176)
   (plat-id                  int32          :offset-assert 180)
   (plat-mask                uint32         :offset-assert 184)
   (plat-id-dir              int32          :offset-assert 188)
   (wiggled?                 symbol          :offset-assert 192)
   (timeout                  time-frame         :offset-assert 200)
   (last-plat-activated-time time-frame         :offset-assert 208)
   (delay-til-wiggle         time-frame         :offset-assert 216)
   (ticker                   ticky  :inline :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1400900100
  (:states
    square-platform-master-idle
    square-platform-master-activate)
  )

;; - Unknowns

(define-extern *square-platform-sg* skeleton-group)


;; ----------------------
;; File - sun-iris-door
;; Source Path - levels/sunken/sun-iris-door.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype sun-iris-door (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (timeout                float              :offset-assert 176)
   (proximity?             symbol              :offset-assert 180)
   (directional-proximity? symbol              :offset-assert 184)
   (move-to?               symbol              :offset-assert 188)
   (locked-by-task?        symbol              :offset-assert 192)
   (close-dist             float              :offset-assert 196)
   (open-dist              float              :offset-assert 200)
   (move-to-pos            vector     :inline :offset-assert 208)
   (outward-vec            vector     :inline :offset-assert 224)
   (move-to-quat           quaternion :inline :offset-assert 240)
   )
  :method-count-assert 22
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1600900100
  (:methods
    (should-close? (_type_) symbol 20)
    (should-open? (_type_) symbol 21)
    )
  (:states
    (sun-iris-door-open)
    (sun-iris-door-closed)
    (sun-iris-door-opening)
    (sun-iris-door-closing))
  )

;; - Functions

(define-extern sun-iris-door-init-by-other (function vector quaternion symbol none :behavior sun-iris-door))

;; - Unknowns

(define-extern *sun-iris-door-sg* skeleton-group)


;; ----------------------
;; File - orbit-plat
;; Source Path - levels/sunken/orbit-plat.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(declare-type orbit-plat baseplat)
(deftype orbit-plat-bottom (process-drawable)
  ((parent-override (pointer orbit-plat) :score 100         :offset 12)
   (part2 sparticle-launch-control  :offset-assert 176)
   )
  :method-count-assert 21
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x15005000b4
  (:methods
    (orbit-plat-bottom-method-20 (_type_ vector vector) none 20)
    )
  (:states
    orbit-plat-bottom-idle)
  )

(deftype orbit-plat (baseplat)
  ((other        entity-actor          :offset-assert 228)
   (rot-dir      float          :offset-assert 232)
   (reset-trans  vector :inline :offset-assert 240)
   (is-reset?    symbol          :offset-assert 256)
   (reset-length float          :offset-assert 260)
   (timeout      float          :offset-assert 264)
   (plat-status  uint64         :offset-assert 272)
   )
  :method-count-assert 29
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1d00b00118
  (:methods
    (orbit-plat-method-27 (_type_) symbol 27)
    (orbit-plat-method-28 (_type_) symbol 28)
    )
  (:states
    orbit-plat-wait-for-other
    orbit-plat-idle
    orbit-plat-riding
    orbit-plat-rotating
    orbit-plat-still
    orbit-plat-reset)
  )

;; - Functions

(define-extern orbit-plat-bottom-init-by-other (function entity-actor orbit-plat none :behavior orbit-plat-bottom))
(define-extern get-rotate-point! (function vector vector vector vector float float vector))
(define-extern get-nav-point! (function vector orbit-plat vector float vector))

;; - Unknowns

(define-extern *orbit-plat-sg* skeleton-group)
(define-extern *orbit-plat-bottom-sg* skeleton-group)


;; ----------------------
;; File - wedge-plats
;; Source Path - levels/sunken/wedge-plats.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype wedge-plat-master (process)
  ((center       vector :inline :score 100 :offset-assert 112)
   (rotspeed     float          :offset-assert 128)
   (rotate-inner float          :offset-assert 132)
   (rotate-outer float          :offset-assert 136)
   )
  :method-count-assert 14
  :size-assert         #x8c
  :heap-base           #x20
  :flag-assert         #xe0020008c
  (:states
    wedge-plat-master-idle)
  )

(deftype wedge-plat (baseplat)
  ((master   wedge-plat-master  :offset-assert 228)
   (distance float  :offset-assert 232)
   (offset   float  :offset-assert 236)
   )
  :method-count-assert 28
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x1c008000f0
  (:methods
    (wedge-plat-method-27 (_type_) symbol 27)
    )
  (:states
    wedge-plat-idle
    wedge-plat-tip)
  )

(deftype wedge-plat-outer (wedge-plat)
  ()
  :method-count-assert 28
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x1c008000f0
  (:states
    wedge-plat-outer-idle
    wedge-plat-outer-tip)
  )

;; - Unknowns

(define-extern *wedge-plat-sg* skeleton-group)
(define-extern *wedge-plat-outer-sg* skeleton-group)


;; ----------------------
;; File - wall-plat
;; Source Path - levels/sunken/wall-plat.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype wall-plat (process-drawable)
  ((root-override   collide-shape-moving     :score 100 :offset 112)
   (use-sync?       symbol                   :offset-assert 176)
   (extended-amount float                    :offset-assert 180)
   (in-trans        vector           :inline :offset-assert 192)
   (out-trans       vector           :inline :offset-assert 208)
   (sync            sync-info-paused :inline :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x14008000f0
  (:states
    wall-plat-sync-idle
    wall-plat-retracted
    wall-plat-retracting
    wall-plat-extended
    wall-plat-extending)
  )

;; - Unknowns

(define-extern *wall-plat-sg* skeleton-group)


;; ----------------------
;; File - qbert-plat
;; Source Path - levels/sunken/qbert-plat.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype qbert-plat-on (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  )

(deftype qbert-plat (rigid-body-platform)
  ((anchor-point      vector :inline :offset-assert 736)
   (plat-id           int32          :offset-assert 752)
   (on?               symbol          :offset-assert 756)
   (player-is-riding? symbol          :offset-assert 760)
   (master            entity-actor          :offset-assert 764) ;; qbert-plat-master
   )
  :method-count-assert 35
  :size-assert         #x300
  :heap-base           #x290
  :flag-assert         #x2302900300
  (:states
    qbert-plat-wait-for-master
    qbert-plat-on-mimic
    qbert-plat-on-die)
  )

(deftype qbert-plat-master (process-drawable)
  ((last-plat-triggered             int32          :offset-assert 176)
   (plat-states                     uint32         :offset-assert 180)
   (plat-states-needed-to-open-door uint32         :offset-assert 184)
   (player-in-bounds?               symbol          :offset-assert 188)
   (player-in-water?                symbol          :offset-assert 192)
   (play-door-cam?                  symbol          :offset-assert 196)
   (puzzle-beaten?                  symbol          :offset-assert 200)
   (door                            entity-actor          :offset-assert 204) ;; sun-iris-door
   (door-plat                       entity-actor          :offset-assert 208) ;; wall-plat
   (bounds-start                    vector :inline :offset-assert 224)
   (bounds-end                      vector :inline :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1500900100
  (:methods
    (plat-state-set? (_type_ uint) symbol 20)
    )
  (:states
    qbert-plat-master-wait-for-door
    qbert-plat-master-idle
    (qbert-plat-master-do-door symbol))
  )

;; - Functions

(define-extern qbert-plat-on-init-by-other (function entity-actor qbert-plat none :behavior qbert-plat))
(define-extern qbert-plat-event-handler (function process int symbol event-message-block object :behavior qbert-plat))

;; - Unknowns

(define-extern *qbert-plat-sg* skeleton-group)
(define-extern *qbert-plat-constants* rigid-body-platform-constants)
(define-extern *qbert-plat-on-sg* skeleton-group)


;; ----------------------
;; File - steam-cap
;; Source Path - levels/sunken/steam-cap.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype steam-cap-control-pt (structure)
  ((trans  vector :inline :offset-assert 0)
   (transv vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype steam-cap (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (do-burst?         symbol             :offset-assert 176)
   (do-falling-sound? symbol             :offset-assert 180)
   (do-landing-sound? symbol             :offset-assert 184)
   (begin-travel-up   float             :offset-assert 188)
   (begin-travel-down float             :offset-assert 192)
   (sync              sync-info :inline :offset-assert 196)
   (part2             sparticle-launch-control             :offset-assert 204)
   (part3             sparticle-launch-control             :offset-assert 208)
   (down              vector    :inline :offset-assert 224)
   (up                vector    :inline :offset-assert 240)
   (control-pt        steam-cap-control-pt   3       :inline :offset-assert 256)
   )
  :method-count-assert 22
  :size-assert         #x160
  :heap-base           #xf0
  :flag-assert         #x1600f00160
  (:methods
    (steam-cap-method-20 (_type_) none 20)
    (steam-cap-method-21 (_type_) quaternion 21)
    )
  (:states
    (steam-cap-idle))
  )

;; - Unknowns

(define-extern *steam-cap-sg* skeleton-group)


;; ----------------------
;; File - sun-exit-chamber
;; Source Path - levels/sunken/sun-exit-chamber.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(declare-type blue-eco-charger process-drawable)
(deftype blue-eco-charger-orb (process-drawable)
  ((parent-process  (pointer blue-eco-charger)  :score 100 :offset 12)
   (orbit-rot       vector :inline :offset-assert 176)
   (orbit-rotv      vector :inline :offset-assert 192)
   (targ-orbit-rotv vector :inline :offset-assert 208)
   (rest-pos        vector :inline :offset-assert 224)
   )
  :method-count-assert 21
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x15008000f0
  (:methods
    (blue-eco-charger-orb-method-20 (_type_ float) vector 20)
    )
  (:states
    blue-eco-charger-orb-idle
    blue-eco-charger-orb-active)
  )

(deftype blue-eco-charger (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (charger-id    int32  :offset-assert 176)
   (open-level    float  :offset-assert 180)
   (master        entity-actor  :offset-assert 184)
   )
  :method-count-assert 22
  :size-assert         #xbc
  :heap-base           #x50
  :flag-assert         #x16005000bc
  (:methods
    (blue-eco-charger-method-20 (_type_) object 20)
    (blue-eco-charger-method-21 (_type_ symbol) object 21)
    )
  (:states
    blue-eco-charger-idle
    (blue-eco-charger-open symbol)
    blue-eco-charger-close
    blue-eco-charger-stuck-open)
  )

(deftype exit-chamber-items (structure)
  ((door-pos    vector     :inline :offset-assert 0)
   (door-quat   quaternion :inline :offset-assert 16)
   (button-pos  vector     :inline :offset-assert 32)
   (button-quat quaternion :inline :offset-assert 48)
   (fcell-pos   vector     :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(declare-type exit-chamber-button basebutton)
(deftype exit-chamber (process-drawable)
  ((root-override           collide-shape-moving  :score 100 :offset 112)
   (chargers-active         uint32         :offset-assert 176)
   (move-player?            symbol         :offset-assert 180)
   (move-fcell?             symbol          :offset-assert 184)
   (play-assistant-message? symbol          :offset-assert 188)
   (wave-scale              float          :offset-assert 192)
   (button                  (pointer exit-chamber-button)         :offset-assert 196)
   (door                    (pointer sun-iris-door)         :offset-assert 200)
   (fcell-handle            handle         :offset-assert 208)
   (orig-trans              vector :inline :offset-assert 224)
   (last-pos                vector :inline :offset-assert 240)
   )
  :method-count-assert 25
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x1900900100
  (:methods
    (exit-chamber-method-20 (_type_ float) float 20)
    (exit-chamber-method-21 (_type_ exit-chamber-items) vector 21)
    (exit-chamber-method-22 (_type_) none 22)
    (exit-chamber-method-23 (_type_ symbol) object 23)
    (exit-chamber-method-24 (_type_ float) none 24)
    )
  (:states
    exit-chamber-charger-puzzle
    exit-chamber-idle-in-sunken
    (exit-chamber-idle-in-village symbol)
    exit-chamber-lower
    exit-chamber-rise
    exit-chamber-charger-puzzle-beaten)
  )

(deftype exit-chamber-button (basebutton)
  ()
  :method-count-assert 32
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x2000900100
  )

;; - Functions

(define-extern exit-chamber-button-init-by-other (function vector quaternion entity-actor symbol none :behavior exit-chamber-button))
(define-extern blue-eco-charger-orb-init-by-other (function entity-actor blue-eco-charger-orb none :behavior blue-eco-charger-orb))

;; - Unknowns

(define-extern *exit-chamber-sg* skeleton-group)
(define-extern *blue-eco-charger-sg* skeleton-group)
(define-extern *blue-eco-charger-orb-sg* skeleton-group)


;; ----------------------
;; File - floating-launcher
;; Source Path - levels/sunken/floating-launcher.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype floating-launcher (baseplat)
  ((trigger-height float   :offset-assert 228)
   (launcher       (pointer launcher)  :offset-assert 232)
   )
  :method-count-assert 27
  :size-assert         #xec
  :heap-base           #x80
  :flag-assert         #x1b008000ec
  (:states
    (floating-launcher-idle)
    (floating-launcher-ready)
    (floating-launcher-lowering))
  )

;; - Unknowns

(define-extern *floating-launcher-sg* skeleton-group)


;; ----------------------
;; File - sunken-water
;; Source Path - levels/sunken/sunken-water.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype sunken-water (water-anim)
  ((use-sync?             symbol             :offset-assert 220)
   (playing-deadly-sound? symbol             :offset-assert 224)
   (deadly-time           float             :offset-assert 228)
   (deadly-fade           float             :offset-assert 232)
   (sync                  sync-info :inline :offset-assert 236)
   (safe-color-mult       vector    :inline :offset-assert 256)
   (safe-color-emissive   vector    :inline :offset-assert 272)
   (deadly-color-mult     vector    :inline :offset-assert 288)
   (deadly-color-emissive vector    :inline :offset-assert 304)
   )
  :method-count-assert 31
  :size-assert         #x140
  :heap-base           #xd0
  :flag-assert         #x1f00d00140
  (:methods
    (draw-ripple (_type_) symbol 30)
    )
  )

;; - Unknowns

(define-extern ripple-for-sunken-water ripple-wave-set)


;; ----------------------
;; File - whirlpool
;; Source Path - levels/sunken/whirlpool.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype whirlpool (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (spin-ry          float                    :offset-assert 176)
   (spin-speed-idle  float                    :offset-assert 180)
   (spin-speed-delta float                    :offset-assert 184)
   (sync             sync-info-paused :inline :offset-assert 188)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :heap-base           #x60
  :flag-assert         #x15006000cc
  (:methods
    (whirlpool-method-20 (_type_ float) cshape-moving-flags 20)
    )
  (:states
    (whirlpool-idle))
  )

;; - Unknowns

(define-extern *whirlpool-sg* skeleton-group)


;; ----------------------
;; File - sunken-pipegame
;; Source Path - levels/sunken/sunken-pipegame.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype sunken-pipegame-button (basebutton)
  ()
  :method-count-assert 32
  :size-assert         #x100
  :heap-base           #x90
  :flag-assert         #x2000900100
  )

(deftype sunken-pipegame-prize (structure)
  ((puzzle-delay            time-frame          :offset-assert 0)
   (pipe-travel-time-to-far time-frame          :offset-assert 8)
   (pipe-travel-time-to-jar time-frame          :offset-assert 16)
   (actor-handle            handle         :offset-assert 24)
   (jar-pos                 vector :inline :offset-assert 32)
   (far-pos                 vector :inline :offset-assert 48)
   (sucked-up-jar-part-pos  vector :inline :offset-assert 64)
   (sucked-up-far-part-pos  vector :inline :offset-assert 80)
   (blown-out-jar-part-pos  vector :inline :offset-assert 96)
   (blown-out-far-part-pos  vector :inline :offset-assert 112)
   (sucked-up-part          sparticle-launch-control          :offset-assert 128) ; guesses
   (blown-out-part          sparticle-launch-control          :offset-assert 132) ; guesses
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(deftype sunken-pipegame (process-drawable)
  ((abort-audio-if-beaten? symbol           :offset-assert 176)
   (challenges-mask        uint32          :offset-assert 180)
   (challenge              int32           :offset-assert 184)
   (ticker                 ticky   :inline :offset-assert 192)
   (button                 (pointer sunken-pipegame-button) 3       :offset-assert 224)
   (prize                  sunken-pipegame-prize 3       :inline :offset-assert 240)
   )
  :method-count-assert 23
  :size-assert         #x2a0
  :heap-base           #x230
  :flag-assert         #x17023002a0
  (:methods
    (sunken-pipegame-method-20 (_type_) uint 20)
    (sunken-pipegame-method-21 (_type_ symbol) symbol 21)
    (sunken-pipegame-method-22 (_type_ symbol) none 22)
    )
  (:states
    sunken-pipegame-start-up
    sunken-pipegame-idle
    sunken-pipegame-end-play
    sunken-pipegame-beat-challenge
    sunken-pipegame-begin-play)
  )

;; - Functions

(define-extern sunken-pipegame-button-init-by-other (function vector quaternion entity-actor symbol none :behavior sunken-pipegame-button))


;; ----------------------
;; File - bully
;; Source Path - levels/sunken/bully.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(declare-type bully process-drawable)
(deftype bully-broken-cage (process-drawable)
  ((parent-override (pointer bully) :score 100         :offset 12))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    (bully-broken-cage-explode)
    )
  )

(deftype bully (process-drawable)
  ((root-override   collide-shape-moving :score 100 :offset 112)
   (fact-override   fact-info-enemy :score 100 :offset 144)
   (hit-player?     symbol   :offset-assert 176)
   (bounced?        symbol   :offset-assert 180)
   (bounce-volume   int32   :offset-assert 184)
   (facing-ry       float   :offset-assert 188)
   (travel-ry       float   :offset-assert 192)
   (speed-u         float   :offset-assert 196)
   (spin-vel        float   :offset-assert 200)
   (travel-speed    float   :offset-assert 204)
   (reaction-delay  time-frame  :offset-assert 208)
   (start-spin-time time-frame  :offset-assert 216)
   (slow-down       time-frame  :offset-assert 224)
   (hit-player-time time-frame  :offset-assert 232)
   (neck            joint-mod   :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #xf4
  :heap-base           #x90
  :flag-assert         #x15009000f4
  (:methods
    (bully-method-20 (_type_) float 20)
    )
  (:states
    (bully-idle symbol)
    (bully-start-spinning)
    (bully-stop-spinning)
    (bully-notice)
    (bully-die)
    )
  )

;; - Functions

(define-extern bully-broken-cage-init-by-other (function entity-actor none :behavior bully-broken-cage))
(define-extern bully-default-event-handler (function process int symbol event-message-block object :behavior bully))
(define-extern bully-post (function none :behavior bully))

;; - Unknowns

(define-extern *bully-sg* skeleton-group)
(define-extern *bully-shadow-control* shadow-control)
(define-extern *bully-broken-cage-sg* skeleton-group)


;; ----------------------
;; File - double-lurker
;; Source Path - levels/sunken/double-lurker.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(declare-type double-lurker nav-enemy)
(deftype double-lurker-top (nav-enemy)
  ((parent-process      (pointer double-lurker)  :score 100 :offset 12)
   (fall-dest vector :inline :offset-assert 400)
   )
  :method-count-assert 76
  :size-assert         #x1a0
  :heap-base           #x130
  :flag-assert         #x4c013001a0
  (:states
    double-lurker-top-on-shoulders
    double-lurker-top-resume
    (double-lurker-top-knocked-down object vector vector)
    double-lurker-top-on-shoulders-die)
  )

(deftype double-lurker (nav-enemy)
  ((knocked-back-speed  float   :offset-assert 400)
   (buddy-on-shoulders? symbol   :offset-assert 404)
   (dead?               symbol   :offset-assert 408)
   (buddy-dead?         symbol   :offset-assert 412)
   (buddy-handle        handle  :offset-assert 416) ; double-lurker-top
   )
  (:methods
    (initialize-collision (_type_) collide-shape-moving :replace 47)
    (double-lurker-method-53 (_type_ vector) symbol :replace 53)
    )
  :method-count-assert 76
  :size-assert         #x1a8
  :heap-base           #x140
  :flag-assert         #x4c014001a8
  (:states
    double-lurker-waiting-to-die
    double-lurker-resume
    double-lurker-break-apart
    double-lurker-both-knocked-back
    double-lurker-buddy-was-hit
    double-lurker-show-anims
    double-lurker-knocked-back
    )
  )

;; - Functions

(define-extern double-lurker-top-init-by-other (function entity double-lurker symbol vector none :behavior double-lurker-top))
(define-extern double-lurker-default-event-handler (function process int symbol event-message-block object :behavior double-lurker))

;; - Unknowns

(define-extern *double-lurker-sg* skeleton-group)
(define-extern *double-lurker-when-both-nav-enemy-info* nav-enemy-info)
(define-extern *double-lurker-nav-enemy-info* nav-enemy-info)
(define-extern *double-lurker-top-sg* skeleton-group)
(define-extern *double-lurker-top-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - helix-water
;; Source Path - levels/sunken/helix-water.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype helix-slide-door (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    helix-slide-door-idle-open
    helix-slide-door-idle-closed
    helix-slide-door-close)
  )

(deftype helix-button (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (my-water     entity-actor          :offset-assert 176)
   (my-door      entity-actor          :offset-assert 180)
   (fcell-handle handle         :offset-assert 184)
   (down-y       float          :offset-assert 192)
   (spawn-trans  vector :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x14007000e0
  (:states
    helix-button-startup
    helix-button-idle-down
    helix-button-quick-activate
    helix-button-activate
    helix-button-idle-up)
  )

(deftype helix-dark-eco (dark-eco-pool)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype helix-water (process-drawable)
  ((last-alt-actor-consumed int32   :offset-assert 176)
   (alt-actors              (array entity-actor)   :offset-assert 180)
   (transv-y                float   :offset-assert 184)
   (start-y                 float   :offset-assert 188)
   (end-y                   float   :offset-assert 192)
   (dark-eco                (pointer helix-dark-eco)  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x16006000c8
  (:methods
    (helix-water-method-20 (_type_) none 20)
    (helix-water-method-21 (_type_) object 21)
    )
  (:states
    helix-water-idle
    helix-water-activated)
  )

;; - Unknowns

(define-extern *helix-water* helix-water)
(define-extern *helix-button-sg* skeleton-group)
(define-extern *helix-button* helix-button)
(define-extern *helix-slide-door-sg* skeleton-group)
(define-extern *helix-slide-door* helix-slide-door)


;; ----------------------
;; File - puffer
;; Source Path - levels/sunken/puffer.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype puffer (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (fact-info-override fact-info-enemy :score 100 :offset 144)
   (path-index           int32             :offset-assert 176)
   (facing-ry            float             :offset-assert 180)
   (travel-ry            float             :offset-assert 184)
   (travel-speed         float             :offset-assert 188)
   (attack-bottom-y      float             :offset-assert 192)
   (patrol-bottom-y      float             :offset-assert 196)
   (top-y                float             :offset-assert 200)
   (targ-trans-y         float             :offset-assert 204)
   (acc-y                float             :offset-assert 208)
   (travel-turn-speed    float             :offset-assert 212)
   (notice-dist          float             :offset-assert 216)
   (give-up-dist         float             :offset-assert 220)
   (attacking?           symbol             :offset-assert 224)
   (hit-player?          symbol             :offset-assert 228)
   (look-mean?           symbol             :offset-assert 232)
   (cprims-type          uint64            :offset-assert 240)
   (neck                 joint-mod             :offset-assert 248)
   (hit-player-time      time-frame            :offset-assert 256)
   (reaction-delay       time-frame            :offset-assert 264)
   (picked-point-time    time-frame            :offset-assert 272)
   (pick-new-point-delay time-frame            :offset-assert 280)
   (last-on-screen-time  time-frame            :offset-assert 288)
   (buddy                process-drawable             :offset-assert 296) ;; what is this, its very likely wrong!
   (nice-look            lod-set   :inline :offset-assert 300)
   (mean-look            lod-set   :inline :offset-assert 336)
   (dest-pos             vector    :inline :offset-assert 384)
   (sync                 sync-info :inline :offset-assert 400)
   )
  :method-count-assert 32
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x2001300198
  (:methods
    (puffer-method-20 (_type_ vector) none 20)
    (puffer-method-21 (_type_) none 21)
    (puffer-method-22 (_type_) symbol 22)
    (puffer-method-23 (_type_ symbol) symbol 23)
    (puffer-method-24 (_type_ vector) symbol 24)
    (puffer-method-25 (_type_ float) symbol 25)
    (puffer-method-26 (_type_) none 26)
    (puffer-method-27 (_type_) none 27)
    (puffer-method-28 (_type_) none 28)
    (flip-look! (_type_ symbol) none 29)
    (puffer-method-30 (_type_) vector 30)
    (puffer-method-31 (_type_) vector 31)
    )
  (:states
    puffer-idle
    puffer-patrol
    puffer-attack
    puffer-die)
  )

(deftype pick-patrol-point-away-from-buddy-work (structure)
  ((best-path-index int32          :offset-assert 0)
   (best-rating     float          :offset-assert 4)
   (best-dest       vector :inline :offset-assert 16)
   (pt-dir          vector :inline :offset-assert 32)
   (buddy-dir       vector :inline :offset-assert 48)
   (dest            vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; - Functions

(define-extern puffer-default-event-handler (function process int symbol event-message-block object :behavior puffer))
(define-extern puffer-post (function none :behavior puffer))

;; - Unknowns

(define-extern *puffer-sg* skeleton-group)
(define-extern *puffer-mean-sg* skeleton-group)


;; ----------------------
;; File - sunken-fish
;; Source Path - levels/sunken/sunken-fish.gc
;; Containing DGOs - ['L1', 'SUN', 'SUNKEN']
;; Version - 3

;; - Types

(deftype sunkenfisha (process-drawable)
  ((path-u                 float          :offset-assert 176)
   (path-speed             float          :offset-assert 180)
   (path-speed-seek-speed  float          :offset-assert 184)
   (targ-path-speed        float          :offset-assert 188)
   (path-normal-speed-lo   float          :offset-assert 192)
   (path-normal-speed-hi   float          :offset-assert 196)
   (path-dir               float          :offset-assert 200)
   (change-path-dir-time   time-frame         :offset-assert 208)
   (local-path-offset      vector :inline :offset-assert 224)
   (targ-local-path-offset vector :inline :offset-assert 240)
   (local-path-offset-dir  vector :inline :offset-assert 256)
   (max-local-path-offset  vector :inline :offset-assert 272)
   (facing-rot             vector :inline :offset-assert 288)
   (path-trans-offset      vector :inline :offset-assert 304)
   )
  :method-count-assert 28
  :size-assert         #x140
  :heap-base           #xd0
  :flag-assert         #x1c00d00140
  (:methods
    (sunkenfisha-method-20 (_type_) float 20)
    (sunkenfisha-method-21 (_type_ vector float vector) vector 21)
    (sunkenfisha-method-22 (_type_) none 22)
    (sunkenfisha-method-23 (_type_) quaternion 23)
    (sunkenfisha-method-24 (_type_) vector 24)
    (sunkenfisha-method-25 (_type_) none 25)
    (sunkenfisha-method-26 (_type_) float 26)
    (sunkenfisha-method-27 (_type_) float 27)
    )
  (:states
    sunkenfisha-idle)
  )

;; - Functions

(define-extern sunkenfisha-init-by-other (function entity-actor none :behavior sunkenfisha))

;; - Unknowns

(define-extern *sunkenfisha-red-yellow-sg* skeleton-group)
(define-extern *sunkenfisha-yellow-blue-sg* skeleton-group)
(define-extern *sunkenfisha-yellow-eye-sg* skeleton-group)


;; ----------------------
;; File - rolling-obs
;; Source Path - levels/rolling/rolling-obs.gc
;; Containing DGOs - ['L1', 'ROL']
;; Version - 3

;; - Types

(deftype rolling-part (part-spawner)
  ((root-override basic :offset 112))
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

(deftype rollingcam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

(deftype pusher-base (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (max-frame float  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  )

(deftype pusher (pusher-base)
  ((sync sync-info-paused :inline :offset-assert 180)
   (cyl  cylinder         :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xf8
  :heap-base           #x90
  :flag-assert         #x14009000f8
  (:states
    pusher-idle)
  )

(deftype gorge-pusher (pusher-base)
  ((min-frame float  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    gorge-pusher-idle)
  )

(deftype dark-plant (process-drawable)
  ((num-alts int32     :offset-assert 176)
   (alts     entity-actor 4 :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xc4
  :heap-base           #x60
  :flag-assert         #x14006000c4
  (:states
    dark-plant-gone
    dark-plant-startup
    dark-plant-idle
    dark-plant-sprout
    dark-plant-death)
  )

(deftype happy-plant (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (alt-actor entity-actor  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    happy-plant-opened
    happy-plant-init
    happy-plant-opening)
  )

(deftype race-time (structure)
  ((digit int8 5 :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype rolling-start (process-drawable)
  ((whole-look  lod-set :inline :offset-assert 176)
   (broken-look lod-set :inline :offset-assert 212)
   )
  :method-count-assert 20
  :size-assert         #xf5
  :heap-base           #x90
  :flag-assert         #x14009000f5
  (:states
    rolling-start-whole
    (rolling-start-break symbol))
  )

(deftype gorge (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (coord     matrix :inline :offset-assert 176)
   (radius    float          :offset-assert 240)
   (thickness float          :offset-assert 244)
   )
  :method-count-assert 20
  :size-assert         #xf8
  :heap-base           #x90
  :flag-assert         #x14009000f8
  )

(deftype gorge-start (gorge)
  ((tasks            task-control             :offset-assert 248)
   (record-time      race-time :inline :offset-assert 252)
   (this-time        race-time :inline :offset-assert 257)
   (start-banner     handle            :offset-assert 264)
   (end-banner       handle            :offset-assert 272)
   (timer-pos-offset int32             :offset-assert 280)
   (ticker           ticky     :inline :offset-assert 288)
   )
  :method-count-assert 20
  :size-assert         #x140
  :heap-base           #xd0
  :flag-assert         #x1400d00140
  (:states
    gorge-start-idle
    gorge-start-ready
    gorge-start-racing
    gorge-start-race-finished
    gorge-start-race-aborted)
  )

(deftype gorge-finish (gorge)
  ((alt-actor entity-actor  :offset-assert 248)
   )
  :method-count-assert 20
  :size-assert         #xfc
  :heap-base           #x90
  :flag-assert         #x14009000fc
  (:states
    gorge-finish-idle)
  )

(deftype gorge-abort (gorge)
  ()
  :method-count-assert 20
  :size-assert         #xf8
  :heap-base           #x90
  :flag-assert         #x14009000f8
  (:states
    gorge-abort-idle)
  )

(deftype rolling-water (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

;; - Functions

(define-extern gorge-init (function vector vector float float float :behavior gorge))
(define-extern gorge-in-front (function gorge symbol))
(define-extern gorge-start-launch-start-banner (function handle :behavior gorge-start))
(define-extern gorge-trans (function none))
(define-extern gorge-start-draw-time (function symbol symbol none :behavior gorge-start))
(define-extern gorge-behind (function gorge symbol))
(define-extern seconds->race-time (function race-time time-frame none))
;; PAL version is better
;;(define-extern race-time-read (function race-time int task-control time-frame none))
(define-extern race-time-read (function race-time task-control time-frame none))
(define-extern rolling-start-init-by-other (function vector float none :behavior rolling-start))
(define-extern gorge-finish-init-by-other (function vector vector float none :behavior gorge-finish))
(define-extern gorge-abort-init-by-other (function vector vector float none :behavior gorge-abort))
(define-extern race-time->string (function race-time string))
(define-extern race-time-less-than (function race-time race-time symbol))
;; PAL version is better
;;(define-extern race-time-save (function race-time int task-control symbol))
(define-extern race-time-save (function race-time task-control symbol))
(define-extern dark-plants-all-done (function dark-plant symbol))
(define-extern dark-plant-randomize (function dark-plant vector))
(define-extern dark-plant-check-target (function dark-plant symbol))
(define-extern dark-plant-has-bad-neighbor (function dark-plant symbol))
(define-extern pusher-base-init (function collide-shape-moving :behavior pusher-base))
(define-extern dark-plant-trans (function none :behavior dark-plant))
(define-extern race-time-copy! (function race-time race-time symbol))
(define-extern race-time->seconds (function race-time int))

;; - Unknowns

(define-extern ripple-for-rolling-water object)
(define-extern *rolling-start-whole-sg* skeleton-group)
(define-extern *rolling-start-broken-sg* skeleton-group)
(define-extern *happy-plant-sg* skeleton-group)
(define-extern *rollingcam-sg* skeleton-group)
(define-extern *dark-plant-sg* skeleton-group)
(define-extern *pusher-sg* skeleton-group)


;; ----------------------
;; File - rolling-lightning-mole
;; Source Path - levels/rolling/rolling-lightning-mole.gc
;; Containing DGOs - ['L1', 'ROL']
;; Version - 3

;; - Types

(deftype fleeing-nav-enemy-info (structure)
  ((min-reflect-angle       float  :offset-assert 0)
   (max-reflect-angle       float  :offset-assert 4)
   (max-boundary-deflection float  :offset-assert 8)
   (deflection-min-dist     float  :offset-assert 12)
   (deflection-max-dist     float  :offset-assert 16)
   (reflection-time         int32  :offset-assert 20)
   (travel-rotate-speed     float  :offset-assert 24)
   (blend_interp_angle      float  :offset-assert 28)
   (min-speed-adjust        float  :offset-assert 32)
   (max-speed-adjust        float  :offset-assert 36)
   (speed-adjust-center     float  :offset-assert 40)
   (speed-adjust-range      float  :offset-assert 44)
   (abort-notice-distance   float  :offset-assert 48)
   (min-notice-dist         float  :offset-assert 52)
   (max-notice-dist         float  :offset-assert 56)
   (min-stop-chase-dist     float  :offset-assert 60)
   (max-stop-chase-dist     float  :offset-assert 64)
   (max-flee-rotation       float  :offset-assert 68)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype fleeing-nav-enemy (nav-enemy)
  ((last-reflection-time time-frame                         :offset-assert 400)
   (run-blend-interp     float                          :offset-assert 408)
   (desired-travel       vector                 :inline :offset-assert 416)
   (saved-travel         vector                 :inline :offset-assert 432)
   (speed-adjust         float                          :offset-assert 448)
   (flee-info            fleeing-nav-enemy-info :inline :offset-assert 452)
   )
  :method-count-assert 76
  :size-assert         #x20c
  :heap-base           #x1a0
  :flag-assert         #x4c01a0020c
  (:states
    fleeing-nav-enemy-debug)
  )

(deftype lightning-mole (fleeing-nav-enemy)
  ((debug-vector vector :inline :offset-assert 528)
   (alt-actor    entity-actor          :offset-assert 544)
   )
  :method-count-assert 76
  :size-assert         #x224
  :heap-base           #x1c0
  :flag-assert         #x4c01c00224
  (:states
    lightning-mole-gone
    lightning-mole-hiding
    lightning-mole-yelp
    lightning-mole-head-for-hole
    lightning-mole-dive
    lightning-mole-debug-run
    lightning-mole-debug-blend)
  )

(deftype peeper (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    peeper-up
    peeper-down
    peeper-hide
    peeper-wait)
  )

;; - Functions

(define-extern lightning-mole-task-complete? (function symbol :behavior lightning-mole))
(define-extern fleeing-nav-enemy-clip-travel (function fleeing-nav-enemy vector symbol))
(define-extern fleeing-nav-enemy-adjust-travel (function fleeing-nav-enemy object vector)) ;; unused second arg
(define-extern fleeing-nav-enemy-chase-post-func (function float :behavior fleeing-nav-enemy))
(define-extern fleeing-nav-enemy-adjust-nav-info (function float :behavior fleeing-nav-enemy))
(define-extern find-adjacent-bounds-one (function nav-mesh nav-poly int (array int8) (array int8) vector symbol))
(define-extern find-adjacent-bounds (function nav-mesh clip-travel-vector-to-mesh-return-info none))
(define-extern fleeing-nav-enemy-chase-post (function none :behavior fleeing-nav-enemy))
(define-extern lightning-mole-hole-post (function none :behavior lightning-mole))
(define-extern lightning-mole-run-code (function none :behavior lightning-mole))
(define-extern check-drop-level-rolling-dirt (function sparticle-system sparticle-cpuinfo vector none))
(define-extern check-drop-level-rolling-dirt-finish (function sparticle-system sparticle-cpuinfo vector none))

;; - Unknowns

(define-extern *lightning-mole-sg* skeleton-group)
(define-extern *lightning-mole-nav-enemy-info* nav-enemy-info)
(define-extern *lightning-mole-hole* vector)


;; ----------------------
;; File - rolling-robber
;; Source Path - levels/rolling/rolling-robber.gc
;; Containing DGOs - ['L1', 'ROL']
;; Version - 3

;; - Types

(deftype robber (process-drawable)
  ((root-override        collide-shape-moving :score 100 :offset 112)
   (curve-position       float          :offset-assert 176)
   (speed                float          :offset-assert 180)
   (facing               vector :inline :offset-assert 192)
   (tangent              vector :inline :offset-assert 208)
   (run-blend-interp     float          :offset-assert 224)
   (near-timer           int32          :offset-assert 228)
   (far-time             time-frame         :offset-assert 232)
   (y-offset             float          :offset-assert 240)
   (y-offset-desired     float          :offset-assert 244)
   (y-vel                float          :offset-assert 248)
   (water-height         float          :offset-assert 252)
   (timeout              time-frame         :offset-assert 256)
   (last-ambient-time    time-frame         :offset-assert 264)
   (time-to-next-ambient time-frame         :offset-assert 272)
   )
  :method-count-assert 20
  :size-assert         #x118
  :heap-base           #xb0
  :flag-assert         #x1400b00118
  (:states
    robber-die
    robber-dead
    robber-initial
    robber-initial-notice
    robber-flee
    robber-got-away
    robber-tired
    robber-idle
    robber-debug)
  )

;; - Functions

(define-extern robber-find-ground (function symbol :behavior robber))
(define-extern robber-move (function float :behavior robber))
(define-extern robber-calc-speed (function float float float float symbol float :behavior robber))
(define-extern robber-rotate (function target float vector :behavior robber))
(define-extern robber-calc-anim-speed (function float :behavior robber))
(define-extern robber-task-complete? (function symbol :behavior robber))
(define-extern fuel-cell-init-as-spline-slider (function handle float float int none :behavior fuel-cell))
(define-extern robber-event-handler (function process int symbol event-message-block object :behavior robber))

;; - Unknowns

(define-extern *robber-sg* skeleton-group)


;; ----------------------
;; File - rolling-race-ring
;; Source Path - levels/rolling/rolling-race-ring.gc
;; Containing DGOs - ['L1', 'ROL']
;; Version - 3

;; - Types

(deftype race-ring (process-drawable)
  ((rot-y                 float                 :offset-assert 176)
   (face-vec              vector        :inline :offset-assert 192)
   (part-track            handle                :offset-assert 208)
   (keep-part-track-alive symbol                 :offset-assert 216)
   (timeout               time-frame                :offset-assert 224)
   (alt-actor             entity-actor                 :offset-assert 232)
   (alt-task              uint8                 :offset-assert 236)
   (cyl                   cylinder-flat :inline :offset-assert 240)
   (old-hips              vector        :inline :offset-assert 288)
   )
  :method-count-assert 20
  :size-assert         #x130
  :heap-base           #xc0
  :flag-assert         #x1400c00130
  (:states
    race-ring-active
    race-ring-wait
    race-ring-idle)
  )

;; - Functions

(define-extern first-ring? (function race-ring symbol))
(define-extern last-ring? (function race-ring symbol))
(define-extern race-ring-blue-set-particle-rotation-callback (function part-tracker none))
(define-extern race-ring-set-particle-rotation-callback (function part-tracker none))

;; - Unknowns

(define-extern *race-ring-sg* skeleton-group)


;; ----------------------
;; File - firecanyon-obs
;; Source Path - levels/firecanyon/firecanyon-obs.gc
;; Containing DGOs - ['L1', 'FIC', 'OGR']
;; Version - 3

;; - Types

(deftype balloon (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    balloon-idle
    balloon-popping)
  )

(deftype spike (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (num-alts int32  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    spike-down
    spike-idle
    spike-up)
  )

(deftype crate-darkeco-cluster (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )

;; - Unknowns

(define-extern *crate-darkeco-cluster-sg* skeleton-group)
(define-extern *spike-sg* skeleton-group)


;; ----------------------
;; File - ogre-part
;; Source Path - levels/ogre/ogre-part.gc
;; Containing DGOs - ['L1', 'OGR']
;; Version - 3

;; - Types

(deftype ogre-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - ogreboss
;; Source Path - levels/ogre/ogreboss.gc
;; Containing DGOs - ['L1', 'OGR']
;; Version - 3

;; - Types

(deftype ogreboss-super-boulder (process-drawable)
  ((parent-override (pointer process-drawable) :score 100 :offset 12)
   (root-override   collide-shape-moving  :score 100 :offset 112)
   (orig-pos vector :inline :offset-assert 176)
   (src-pos vector :inline :offset-assert 192)
   (spin-axis vector :inline :offset-assert 208)
   (joint joint-mod-blend-local :offset-assert 224)
   (speed float :offset-assert 228)
   (size float :offset-assert 232)
   (grow-rate float :offset-assert 236)
   (lava entity-actor :offset-assert 240)
   (sound-id sound-id :offset-assert 244)
   (hit-boss symbol :offset-assert 248)
   (tumble-quat quaternion :inline :offset-assert 256)
   )
  :method-count-assert 20
  :heap-base           #xa0
  :size-assert         #x110
  :flag-assert         #x1400a00110
  (:states
    ogreboss-super-boulder-idle
    ogreboss-super-boulder-roll
    ogreboss-super-boulder-land
    ogreboss-super-boulder-throw
    ogreboss-super-boulder-hit
    ogreboss-super-boulder-die
    ogreboss-super-boulder-killed-player)
  )

(deftype ogreboss-bounce-boulder (process-drawable)
  ((parent-override (pointer ogreboss-super-boulder) :score 100 :offset 12)
   (root-override   collide-shape-moving  :score 100 :offset 112)
   (src-pos vector :inline :offset-assert 176)
   (side-dir vector :inline :offset-assert 192)
   (side-pos float :offset-assert 208)
   (dest-pos float :offset-assert 212)
   (boulder-type int8 :offset-assert 216)
   )
  :method-count-assert 20
  :heap-base           #x70
  :size-assert         #xd9
  :flag-assert         #x14007000d9
  (:states
    ogreboss-bounce-boulder-idle)
  )

(deftype ogreboss-missile (process-drawable)
  ((parent-override (pointer process-drawable) :score 100 :offset 12)
   (root-override   collide-shape-moving  :score 100 :offset 112)
   (trajectory trajectory :inline :offset-assert 176)
   (src-pos vector :inline :offset-assert 224)
   (dest-pos vector :inline :offset-assert 240)
   (start-time time-frame :offset-assert 256)
   (tumble-quat quaternion :inline :offset-assert 272)
   (blast-radius float :offset-assert 288)
   (pickup-type pickup-type :offset-assert 292)
   )
  :method-count-assert 20
  :heap-base           #xc0
  :size-assert         #x128
  :flag-assert         #x1400c00128
  (:states
    ogreboss-missile-idle
    ogreboss-missile-impact
    ogreboss-missile-seek)
  )

(deftype ogreboss-missile-init-data (structure)
  ((src vector :offset-assert 0)
   (dest vector :offset-assert 4)
   (duration time-frame :offset-assert 8)
   (xz-speed float :offset-assert 16)
   (blast-radius float :offset-assert 20)
   (pickup-type pickup-type :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype ogreboss (process-drawable)
  ((root-override   collide-shape  :score 100 :offset 112)
   (old-player-transform transformq :inline :offset-assert 176)
   (level float :offset-assert 224)
   (difficulty float :offset-assert 228)
   (boulder handle :offset-assert 232)
   (column handle :offset-assert 240)
   (z-plane vector :inline :offset-assert 256)
   (far-pos vector :inline :offset-assert 272)
   (near-pos vector :inline :offset-assert 288)
   (side-dir vector :inline :offset-assert 304)
   (target-offset-array vector 3 :inline :offset-assert 320)
   (target-offset-array-2 vector :inline :offset 336) ;; added because accessing doesn't work nicely otherwise TODO
   (target-offset-array-3 vector :inline :offset 352) ;; added because accessing doesn't work nicely otherwise TODO
   (target-actor-array entity-actor 3 :offset-assert 368)
   (target-blast-radius-array float 3 :offset-assert 380)
   (shuffle-pos float :offset-assert 392)
   (target-count int8 :offset-assert 396)
   (hit-count int8 :offset-assert 397)
   (max-hit-count int8 :offset-assert 398)
   (roll-boulder int8 :offset-assert 399)
   (try-count uint8 :offset-assert 400)
   (hit-time time-frame :offset-assert 408)
   (grow-time float :offset-assert 416)
   (lava entity-actor :offset-assert 420)
   (vulnerable symbol :offset-assert 424)
   (bridge-assembled symbol :offset-assert 428)
   (at-near-spot symbol :offset-assert 432)
   (submerged symbol :offset-assert 436)
   (try-counted symbol :offset-assert 440)
   )
  :method-count-assert 20
  :heap-base           #x150
  :size-assert         #x1bc
  :flag-assert         #x14015001bc
  (:states
    ogreboss-dead
    ogreboss-idle
    ogreboss-die
    ogreboss-stage1
    ogreboss-stage3-throw
    ogreboss-stage3-shuffle
    ogreboss-stage3-hit
    ogreboss-stage2
    ogreboss-wait-for-player
    ogreboss-intro)
  )

;; - Functions

(define-extern ogreboss-get-targets (function none :behavior ogreboss))
(define-extern ogreboss-reset-camera (function none))
(define-extern ogreboss-trigger-steps (function symbol :behavior ogreboss))
(define-extern ogreboss-submerge (function time-frame float none :behavior ogreboss))
(define-extern ogreboss-post (function none :behavior ogreboss))
(define-extern ogreboss-spawn-super-boulder (function none :behavior ogreboss))
(define-extern ogreboss-update-shuffling (function none :behavior ogreboss))
(define-extern ogreboss-player-inside-range? (function float symbol :behavior ogreboss))
(define-extern ogreboss-super-boulder-init-by-other (function vector float entity-actor none :behavior ogreboss-super-boulder))
(define-extern ogreboss-set-stage2-camera (function none))
(define-extern ogreboss-move-far (function time-frame float none :behavior ogreboss))
(define-extern ogreboss-roll-boulder (function none :behavior ogreboss))
(define-extern ogreboss-update-super-boulder (function none :behavior ogreboss))
(define-extern ogreboss-blend-hit-anim (function none :behavior ogreboss))
(define-extern ogreboss-bounce-boulder-init-by-other (function int entity-actor none :behavior ogreboss-bounce-boulder))
(define-extern ogreboss-set-stage1-camera (function none))
(define-extern ogreboss-move-near (function time-frame float none :behavior ogreboss))
(define-extern ogreboss-shoot-boulder (function pickup-type none :behavior ogreboss))
(define-extern ogreboss-inc-try-count (function none :behavior ogreboss))
(define-extern ogreboss-emerge (function float none :behavior ogreboss))
(define-extern ogreboss-pick-target (function int :behavior ogreboss))
(define-extern ogreboss-missile-init-by-other (function ogreboss-missile-init-data entity-actor none :behavior ogreboss-missile))
(define-extern ogreboss-idle-loop (function none :behavior ogreboss))
(define-extern ogreboss-super-boulder-impact-effect (function none :behavior ogreboss-super-boulder))
(define-extern ogreboss-super-boulder-play-hit-anim (function object :behavior ogreboss-super-boulder))
(define-extern ogreboss-rock-explosion-effect (function basic handle))
(define-extern ogreboss-missile-scale-explosion (function handle none))
(define-extern ogreboss-super-boulder-event-handler (function process int symbol event-message-block object :behavior ogreboss-super-boulder))
(define-extern ogreboss-bounce-boulder-event-handler (function process int symbol event-message-block object :behavior ogreboss-bounce-boulder))
(define-extern ogreboss-debug-adjust-difficulty (function none))
(define-extern ogreboss-attack-event-handler (function process int symbol event-message-block object :behavior ogreboss))

;; - Unknowns

(define-extern *ogreboss-sg* skeleton-group)
(define-extern *ogreboss* ogreboss)
(define-extern *ogreboss-cam-sg* skeleton-group)
(define-extern *ogreboss-column-sg* skeleton-group)
(define-extern *ogreboss-bounce-boulder-sg* skeleton-group)
(define-extern *ogreboss-super-boulder-sg* skeleton-group)
(define-extern *ogreboss-shoot-boulder-sg* skeleton-group)
(define-extern *ogreboss-missile-shadow-control* shadow-control)
(define-extern *ogreboss-shoot-boulder-break-sg* skeleton-group)
(define-extern *ogreboss-shadow-control* shadow-control)


;; ----------------------
;; File - ogre-obs
;; Source Path - levels/ogre/ogre-obs.gc
;; Containing DGOs - ['L1', 'OGR']
;; Version - 3

;; - Types

(deftype tntbarrel (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (idle () _type_ :state 20)
    (die (symbol) _type_ :state 21)
    )
  )

(deftype ogre-plat (rigid-body-platform)
  ((anchor-point   vector :inline :offset-assert 736)
   (idle-y-offset  float          :offset-assert 752)
   (float-y-offset float          :offset-assert 756)
   (delay          time-frame         :offset-assert 760)
   (active         symbol          :offset-assert 768)
   (triggered      entity-actor          :offset-assert 772)
   )
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-step (ogre-plat)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-step-a (ogre-step)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-step-b (ogre-step)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-step-c (ogre-step)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-step-d (ogre-step)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-isle (ogre-plat)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-isle-b (ogre-isle)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-isle-c (ogre-isle)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-isle-d (ogre-isle)
  ()
  :method-count-assert 35
  :size-assert         #x308
  :heap-base           #x2a0
  :flag-assert         #x2302a00308
  )

(deftype ogre-bridge (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (joint-mod-array  joint-mod 8 :offset-assert 176)
   (dead-joint-count int8      :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xd1
  :heap-base           #x70
  :flag-assert         #x14007000d1
  (:states
    ogre-bridge-activated
    ogre-bridge-idle
    ogre-bridge-break
    ogre-bridge-activate)
  )

(deftype ogre-bridgeend (process-drawable)
  ((root-override collide-shape :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    ogre-bridgeend-idle)
  )

(deftype ogre-lava (water-anim)
  ((idle-anim int32  :offset-assert 220)
   (anim      int32  :offset-assert 224)
   )
  :method-count-assert 30
  :size-assert         #xe4
  :heap-base           #x80
  :flag-assert         #x1e008000e4
  )

(deftype shortcut-boulder (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (broken-look lod-set :inline :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xd1
  :heap-base           #x70
  :flag-assert         #x14007000d1
  (:states
    shortcut-boulder-idle
    shortcut-boulder-break)
  )

;; - Functions

(define-extern ogre-bridge-update-joints (function none :behavior ogre-bridge))

;; - Unknowns

(define-extern *shortcut-boulder-whole-sg* skeleton-group)
(define-extern *shortcut-boulder-broken-sg* skeleton-group)
(define-extern ripple-for-ogre-lava ripple-wave-set)
(define-extern *ogre-bridgeend-sg* skeleton-group)
(define-extern *ogre-bridge-sg* skeleton-group)
(define-extern *ogre-bridge-joint-array* (array uint8))
(define-extern *ogre-isle-d-sg* skeleton-group)
(define-extern *ogre-isle-b-sg* skeleton-group)
(define-extern *ogre-isle-constants* rigid-body-platform-constants)
(define-extern *ogre-step-b-sg* skeleton-group)
(define-extern *ogre-step-c-sg* skeleton-group)
(define-extern *ogre-step-a-sg* skeleton-group)
(define-extern *ogre-step-constants* rigid-body-platform-constants)
(define-extern *tntbarrel-sg* skeleton-group)
(define-extern *med-res-snow-sg* skeleton-group)
(define-extern *ogre-isle-a-sg* skeleton-group)
(define-extern *ogre-isle-c-sg* skeleton-group)


;; ----------------------
;; File - flying-lurker
;; Source Path - levels/ogre/flying-lurker.gc
;; Containing DGOs - ['L1', 'OGR']
;; Version - 3

;; - Types

(deftype plunger-lurker (process-drawable)
  ((alt-actor entity-actor  :offset-assert 176)
   (got-hit   symbol  :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    plunger-lurker-die
    plunger-lurker-idle
    plunger-lurker-flee
    plunger-lurker-plunge)
  )

(deftype flying-lurker (process-drawable)
  ((curve-position    float          :offset-assert 176)
   (speed             float          :offset-assert 180)
   (tangent           vector :inline :offset-assert 192)
   (anim-blend        float          :offset-assert 208)
   (y-offset          float          :offset-assert 212)
   (y-offset-desired  float          :offset-assert 216)
   (y-vel             float          :offset-assert 220)
   (last-look-time    time-frame          :offset-assert 224)
   (time-to-next-look time-frame          :offset-assert 232)
   (take-off          symbol         :offset-assert 240)
   (race-seconds      float          :offset-assert 244)
   (race-start-time   time-frame          :offset-assert 248)
   (rank              int32          :offset-assert 256)
   (alt-actor         entity-actor   :offset-assert 260)
   (alt-trans         vector         :offset-assert 264)
   (shadow-backup     shadow-geo     :offset-assert 268)
   (try-count         uint8          :offset-assert 272)
   (try-counted       symbol         :offset-assert 276)
   (default-bounds    vector :inline :offset-assert 288)
   )
  :method-count-assert 21
  :size-assert         #x130
  :heap-base           #xc0
  :flag-assert         #x1500c00130
  (:methods
    (flying-lurker-method-20 (_type_) none 20)
    )
  (:states
    flying-lurker-die
    flying-lurker-idle
    flying-lurker-start
    (flying-lurker-clone handle string)
    flying-lurker-sleep
    flying-lurker-fly)
  )

;; - Functions

(define-extern play-movie? (function symbol))
(define-extern flying-lurker-move (function none :behavior flying-lurker))
(define-extern flying-lurker-rotate (function quaternion :behavior flying-lurker))
(define-extern first? (function symbol :behavior flying-lurker))
(define-extern flying-lurker-handler (function process int symbol event-message-block object :behavior flying-lurker))
(define-extern flying-lurker-play-intro (function none :behavior flying-lurker))
(define-extern flying-lurker-inc-try-count (function none :behavior flying-lurker))
(define-extern flying-lurker-calc-anim-speed (function float :behavior flying-lurker))
(define-extern flying-lurker-calc-speed (function meters meters meters meters none :behavior flying-lurker))

;; - Unknowns

(define-extern *flying-lurker-sg* skeleton-group)
(define-extern *ogrecam-sg* skeleton-group)
(define-extern *plunger-lurker-sg* skeleton-group)


;; ----------------------
;; File - village3-part
;; Source Path - levels/village3/village3-part.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype villagec-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - village3-obs
;; Source Path - levels/village3/village3-obs.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype villagec-lava (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype gondola (process-drawable)
  ((root-override  collide-shape-moving :score 100 :offset 112)
   (anim           spool-anim              :offset-assert 176)
   (old-target-pos transformq :inline :offset-assert 192)
   )
  :method-count-assert 23
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x17008000f0
  (:methods
    (idle (symbol) _type_ :state 20)
    (ride-up () _type_ :state 21)
    (ride-down () _type_ :state 22)
    )
  )

(deftype pistons (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (idle () _type_ :state 20)
    (active (handle symbol) _type_ :state 21)
    )
  )

(deftype gondolacables (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; - Unknowns

(define-extern *gondolacables-sg* skeleton-group)
(define-extern *pistons-sg* skeleton-group)
(define-extern *gondola-sg* skeleton-group)
(define-extern ripple-for-villagec-lava ripple-wave-set)
(define-extern *med-res-ogre-sg* skeleton-group)
(define-extern *med-res-ogre2-sg* skeleton-group)
(define-extern *med-res-ogre3-sg* skeleton-group)
(define-extern *med-res-finalboss-sg* skeleton-group)


;; ----------------------
;; File - minecart
;; Source Path - levels/village3/minecart.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype minecartsteel (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (index int32             :offset-assert 176)
   (anim  spool-anim             :offset-assert 180)
   (sync  sync-info :inline :offset-assert 184)
   )
  :method-count-assert 21
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x15005000c0
  (:methods
    (idle () _type_ :state 20)
    ))

;; - Functions

(define-extern minecartsteel-initialize-by-other (function entity-actor float object :behavior minecartsteel))

;; - Unknowns

(define-extern *minecartsteel-sg* skeleton-group)


;; ----------------------
;; File - miners
;; Source Path - levels/village3/miners.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype minertall (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

(deftype minershort (process-taskable)
  ((other-miner minertall  :offset-assert 380)
   )
  :method-count-assert 53
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x3501100180
  )

(deftype cavegem (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; - Functions

(define-extern minershort-trans-hook (function none :behavior minershort))
(define-extern miners-anim-loop (function none :behavior minershort))

;; - Unknowns

(define-extern *cavegem-sg* skeleton-group)
(define-extern *minershort-sg* skeleton-group)
(define-extern *minertall-sg* skeleton-group)


;; ----------------------
;; File - assistant-village3
;; Source Path - levels/village3/assistant-village3.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype assistant-villagec (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *assistant-village3-sg* skeleton-group)


;; ----------------------
;; File - sage-village3
;; Source Path - levels/village3/sage-village3.gc
;; Containing DGOs - ['L1', 'VI3']
;; Version - 3

;; - Types

(deftype sage-villagec (process-taskable)
  ((evilbro   handle  :offset-assert 384) ; evilbro
   (evilsis   handle  :offset-assert 392) ; evilsis
   (assistant entity-actor   :offset-assert 400)
   )
  :method-count-assert 53
  :size-assert         #x194
  :heap-base           #x130
  :flag-assert         #x3501300194
  )

;; - Unknowns

(define-extern *sage-village3-sg* skeleton-group)
(define-extern *evilbro-village3-sg* skeleton-group)
(define-extern *evilsis-village3-sg* skeleton-group)


;; ----------------------
;; File - cave-trap
;; Source Path - levels/robocave/cave-trap.gc
;; Containing DGOs - ['L1', 'ROB']
;; Version - 3

;; - Types

(deftype cave-trap (process-drawable)
  ((root-override   collide-shape  :score 100 :offset 112)
   (spider-count    int32          :offset-assert 176)
   (alt-actors      (array entity-actor)          :offset-assert 180)
   (spawn-delay     time-frame         :offset-assert 184)
   (last-spawn-time time-frame         :offset-assert 192)
   (debug-targ-pos  vector :inline :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x15007000e0
  (:methods
    (cave-trap-method-20 (_type_) symbol 20)
    )
  (:states
    cave-trap-idle
    cave-trap-give-up
    cave-trap-active)
  )

(deftype spider-vent (process-drawable)
  ((last-spawn-time time-frame  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb8
  :heap-base           #x50
  :flag-assert         #x14005000b8
  (:states
    spider-vent-idle)
  )

(deftype spawn-baby-spider-best (structure)
  ((index int32  :offset-assert 0)
   (dist  float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype spawn-baby-spider-work (structure)
  ((best spawn-baby-spider-best 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; - Functions

(define-extern cave-trap-default-event-handler (function process int symbol event-message-block object :behavior cave-trap))


;; ----------------------
;; File - spider-egg
;; Source Path - levels/robocave/spider-egg.gc
;; Containing DGOs - ['L1', 'ROB']
;; Version - 3

;; - Types

(deftype spider-egg (process-drawable)
  ((root-override       collide-shape-moving :score 100 :offset 112)
   (notify-actor entity-actor           :offset-assert 176)
   (broken-look  lod-set :inline :offset-assert 180)
   )
  :method-count-assert 20
  :size-assert         #xd5
  :heap-base           #x70
  :flag-assert         #x14007000d5
  (:states
    (spider-egg-idle symbol)
    spider-egg-hatch
    spider-egg-die)
  )

;; - Unknowns

(define-extern *spider-egg-unbroken-sg* skeleton-group)
(define-extern *spider-egg-broken-sg* skeleton-group)


;; ----------------------
;; File - robocave-part
;; Source Path - levels/robocave/robocave-part.gc
;; Containing DGOs - ['L1', 'ROB']
;; Version - 3

;; - Types

(deftype robocave-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - target-snowball
;; Source Path - levels/snow/target-snowball.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype snowball-info (basic)
  ((entity basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype snowball-bank (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; - Functions

(define-extern target-snowball-post (function none :behavior target))

;; - Unknowns

(define-extern *SNOWBALL-bank* snowball-bank)


;; ----------------------
;; File - ice-cube
;; Source Path - levels/snow/ice-cube.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype ice-cube (nav-enemy)
  ((part2                  sparticle-launch-control          :offset-assert 400)
   (part3                  sparticle-launch-control          :offset-assert 404)
   (part4                  sparticle-launch-control          :offset-assert 408)
   (track-target?          symbol          :offset-assert 412)
   (slow-down?             symbol          :offset-assert 416)
   (tracking-player?       symbol          :offset-assert 420)
   (force-spawn-pt         int32          :offset-assert 424)
   (speed                  float          :offset-assert 428)
   (anim-blend             float          :offset-assert 432)
   (prev-charge-angle-diff float          :offset-assert 436)
   (charge-angle           float          :offset-assert 440)
   (ground-y               float          :offset-assert 444)
   (cprims-type            uint64         :offset-assert 448)
   (next-skid-sound-time   time-frame         :offset-assert 456)
   (starting-pos           vector :inline :offset-assert 464)
   (target-pt              vector :inline :offset-assert 480)
   )
  :method-count-assert 76
  :size-assert         #x1f0
  :heap-base           #x180
  :flag-assert         #x4c018001f0
  (:methods
    (ice-cube-method-51 (_type_ vector vector) symbol :replace 51)
    (ice-cube-method-53 (_type_ vector vector) symbol :replace 53)
    )
  (:states
    ice-cube-face-player
    ice-cube-tired
    ice-cube-retract-spikes
    ice-cube-mean-charge-done
    ice-cube-mean-turn-to-charge
    ice-cube-become-mean
    ice-cube-appear-land
    ice-cube-appear
    ice-cube-trying-to-appear
    ice-cube-shatter
    ice-cube-mean-charge)
  )

;; - Functions

(define-extern ice-cube-default-event-handler (function process int symbol event-message-block object :behavior ice-cube))

;; - Unknowns

(define-extern *ice-cube-break-sg* skeleton-group)
(define-extern *ice-cube-sg* skeleton-group)
(define-extern *ice-cube-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - snow-ball
;; Source Path - levels/snow/snow-ball.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype snow-ball-shadow (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    snow-ball-shadow-idle)
  )

(deftype snow-ball-junction (structure)
  ((enter-time time-frame  :offset-assert 0)
   (exit-time  time-frame  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype snow-ball-path-info (structure)
  ((hug-path? symbol          :offset-assert 0)
   (path-pos  vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype snow-ball-roller (process-drawable)
  ((root-override       collide-shape-moving :score 100 :offset 112)
   (which-path             int32                       :offset-assert 176)
   (path-u                 float                       :offset-assert 180)
   (path-speed             float                       :offset-assert 184)
   (path-length            float                       :offset-assert 188)
   (path-fall-u            float                       :offset-assert 192)
   (path-coming-out-u      float                       :offset-assert 196)
   (path-faded-up-u        float                       :offset-assert 200)
   (delay-til-bounce       int32                       :offset-assert 204)
   (rolling-sound-id       sound-id                    :offset-assert 208)
   (rolling-sound-enabled? symbol                       :offset-assert 212)
   (last-bounce-time       time-frame                      :offset-assert 216)
   (hit-player-time        time-frame                      :offset-assert 224)
   (path-info              snow-ball-path-info :inline :offset-assert 240)
   (junctions              snow-ball-junction             4       :inline :offset-assert 272)
   )
  :method-count-assert 23
  :size-assert         #x150
  :heap-base           #xe0
  :flag-assert         #x1700e00150
  (:methods
    (follow-path (_type_) none 20)
    (play-landing-sound (_type_ float) sound-id 21)
    (snow-ball-roller-method-22 (_type_ process-drawable) none 22)
    )
  (:states
    snow-ball-roller-idle)
  )

(deftype snow-ball (process)
  ((child-override (pointer snow-ball-roller) :score 100         :offset 20)
   (state-time             time-frame    :offset-assert 112)
   (last-path-picked       int32     :offset-assert 120)
   (same-path-picked-count int32     :offset-assert 124)
   (delay-til-next         int32     :offset-assert 128)
   (path                   curve-control 2 :offset-assert 132)
   )
  :method-count-assert 16
  :size-assert         #x8c
  :heap-base           #x20
  :flag-assert         #x100020008c
  (:methods
    (snow-ball-method-14 (_type_ (inline-array snow-ball-junction) float int) symbol 14)
    (snow-ball-method-15 (_type_ (inline-array snow-ball-junction) int) symbol 15)
    )
  (:states
    snow-ball-idle)
  )

;; - Functions

(define-extern snow-ball-roller-init-by-other (function entity-actor snow-ball float int (inline-array snow-ball-junction) none :behavior snow-ball-roller))
(define-extern snow-ball-shadow-init-by-other (function none :behavior snow-ball-shadow))
(define-extern snow-ball-roller-path-update (function none :behavior snow-ball-roller))
(define-extern snow-ball-roller-path-init (function none :behavior snow-ball-roller))

;; - Unknowns

(define-extern *snow-ball-sg* skeleton-group)
(define-extern *snow-ball-shadow-sg* skeleton-group)
(define-extern *snow-ball-shadow-control* shadow-control)


;; ----------------------
;; File - snow-obs
;; Source Path - levels/snow/snow-obs.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype snowcam (pov-camera)
  ((seq uint64  :offset-assert 224)
   )
  :method-count-assert 30
  :size-assert         #xe8
  :heap-base           #x80
  :flag-assert         #x1e008000e8
  )

(deftype snow-eggtop (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (spawn-trans vector :inline :offset-assert 176)
   (play-sound? symbol          :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xc4
  :heap-base           #x60
  :flag-assert         #x14006000c4
  (:states
    snow-eggtop-idle-down
    snow-eggtop-idle-up
    snow-eggtop-activate)
  )

(deftype snowpusher (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (max-frame   float                    :offset-assert 176)
   (open-sound  sound-name                  :offset-assert 192)
   (close-sound sound-name                  :offset-assert 208)
   (sync        sync-info-paused :inline :offset-assert 224)
   )
  :method-count-assert 20
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x14008000f0
  (:states
    snowpusher-idle)
  )

(deftype snow-spatula (baseplat)
  ((sync     sync-info :inline :offset-assert 228)
   (startmat matrix    :inline :offset-assert 240)
   )
  :method-count-assert 27
  :size-assert         #x130
  :heap-base           #xc0
  :flag-assert         #x1b00c00130
  (:states
    snow-spatula-idle)
  )

(deftype snow-fort-gate (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (part2        sparticle-launch-control          :offset-assert 176)
   (part3        sparticle-launch-control          :offset-assert 180)
   (open-trans   vector :inline :offset-assert 192)
   (closed-trans vector :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x14007000e0
  (:states
    snow-fort-gate-idle-open
    snow-fort-gate-idle-closed
    snow-fort-gate-activate)
  )

(deftype snow-gears (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x15004000b0
  (:methods
    (snow-gears-method-20 (_type_) none 20)
    )
  (:states
    snow-gears-idle
    snow-gears-stopped
    snow-gears-halt
    snow-gears-activate)
  )

(deftype snow-switch (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (pressed?     symbol          :offset-assert 176)
   (fcell-handle handle         :offset-assert 184)
   (orig-trans   vector :inline :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x14006000d0
  (:states
    snow-switch-idle-down
    snow-switch-idle-up
    snow-switch-activate)
  )

(deftype snow-log (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (master entity-actor  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    snow-log-wait-for-master
    snow-log-active
    snow-log-activate
    snow-log-hidden)
  )

(deftype snow-log-button (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (log        entity-actor          :offset-assert 176)
   (orig-trans vector :inline :offset-assert 192)
   )
  :method-count-assert 20
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x14006000d0
  (:states
    snow-log-button-idle-down
    snow-log-button-idle-up
    snow-log-button-activate)
  )

;; - Functions

(define-extern snow-switch-event-handler (function process int symbol event-message-block object :behavior snow-switch))
(define-extern snow-log-button-event-handler (function process int symbol event-message-block object :behavior snow-log-button))

;; - Unknowns

(define-extern *snow-switch-sg* skeleton-group)
(define-extern *snow-log-sg* skeleton-group)
(define-extern *snowcam-sg* skeleton-group)
(define-extern *snow-gears-sg* skeleton-group)
(define-extern *snow-fort-gate-sg* skeleton-group)
(define-extern *snow-spatula-sg* skeleton-group)
(define-extern *snowpusher-sg* skeleton-group)
(define-extern *snow-eggtop-sg* skeleton-group)


;; ----------------------
;; File - snow-flutflut-obs
;; Source Path - levels/snow/snow-flutflut-obs.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype flutflut-plat (plat)
  ((has-path?           symbol              :offset-assert 264)
   (plat-type           int32              :offset-assert 268)
   (rise-time           int32              :offset-assert 272)
   (fall-time           int32              :offset-assert 276)
   (part-ry             float              :offset-assert 280)
   (sync-starting-val   float              :offset-assert 284)
   (flutflut-button     entity-actor              :offset-assert 288)
   (appear-trans-top    vector     :inline :offset-assert 304)
   (appear-trans-bottom vector     :inline :offset-assert 320)
   (appear-quat-top     quaternion :inline :offset-assert 336)
   (appear-quat-bottom  quaternion :inline :offset-assert 352)
   (start-trans         vector     :inline :offset-assert 368)
   )
  :method-count-assert 33
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x2101100180
  (:states
    elevator-idle-at-cave
    elevator-travel-to-cave
    elevator-idle-at-fort
    elevator-travel-to-fort
    flutflut-plat-hidden-idle
    flutflut-plat-hide
    flutflut-plat-appear)
  )

(deftype snow-button (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (wiggled?         symbol          :offset-assert 176)
   (trying-for-fuel-cell?  symbol          :offset-assert 180) ;; PAL patch here
   (timeout          time-frame         :offset-assert 184)
   (delay-til-wiggle time-frame         :offset-assert 192)
   (prev-button      entity-actor          :offset-assert 200)
   (ticker           ticky  :inline :offset-assert 208)
   )
  :method-count-assert 20
  :size-assert         #xf0
  :heap-base           #x80
  :flag-assert         #x14008000f0
  (:states
    snow-button-up-idle
    snow-button-deactivate
    snow-button-activate)
  )

(deftype flutflut-plat-small (flutflut-plat)
  ()
  :method-count-assert 33
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x2101100180
  )

(deftype flutflut-plat-med (flutflut-plat)
  ()
  :method-count-assert 33
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x2101100180
  )

(deftype flutflut-plat-large (flutflut-plat)
  ()
  :method-count-assert 33
  :size-assert         #x180
  :heap-base           #x110
  :flag-assert         #x2101100180
  )

;; - Unknowns

(define-extern *flutflut-plat-large-sg* skeleton-group)
(define-extern *flutflut-plat-med-sg* skeleton-group)
(define-extern *flutflut-plat-small-sg* skeleton-group)
(define-extern *snow-button-sg* skeleton-group)


;; ----------------------
;; File - snow-bumper
;; Source Path - levels/snow/snow-bumper.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype snow-bumper (process-drawable)
  ((bumper-id               int32   :offset-assert 176)
   (base-shove-ry           float   :offset-assert 180)
   (max-shove-diff-ry       float   :offset-assert 184)
   (part2                   sparticle-launch-control   :offset-assert 188)
   (last-shoved-player-time time-frame  :offset-assert 192)
   )
  :method-count-assert 22
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x16006000c8
  (:methods
    (snow-bumper-method-20 (_type_) none 20)
    (shove-player (_type_ process-drawable) none 21)
    )
  (:states
    snow-bumper-spawn-fuel-cell
    snow-bumper-inactive-idle
    snow-bumper-active-far-idle
    snow-bumper-deactivate
    snow-bumper-active-close-idle)
  )

;; - Unknowns

(define-extern *snow-bumper-sg* skeleton-group)


;; ----------------------
;; File - snow-ram-h
;; Source Path - levels/snow/snow-ram-h.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype ram (process-drawable)
  ((root-override       collide-shape-moving :score 100 :offset 112)
   (ram-id              int32          :offset-assert 176)
   (give-fuel-cell?     symbol          :offset-assert 180)
   (give-fuel-cell-anim spool-anim          :offset-assert 184)
   (part2               sparticle-launch-control          :offset-assert 188)
   (orient-ry           float          :offset-assert 192)
   (fuel-cell-dest-pos  vector :inline :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :heap-base           #x70
  :flag-assert         #x17007000e0
  (:methods
    (ram-method-20 (_type_) object 20)
    (ram-method-21 (_type_) object 21)
    (ram-method-22 (_type_) symbol 22)
    )
  (:states
    ram-fun-idle
    ram-idle
    ram-give-fuel-cell)
  )


;; ----------------------
;; File - snow-ram-boss
;; Source Path - levels/snow/snow-ram-boss.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(declare-type ram-boss nav-enemy)
(deftype ram-boss-proj (projectile)
  ((parent-override (pointer ram-boss) :score 100         :offset 12)
   (part2           sparticle-launch-control          :offset-assert 412)
   (launched?       symbol          :offset-assert 416)
   (growth          float          :offset-assert 420)
   (charge-sound-id sound-id       :offset-assert 424)
   (launch-time     time-frame         :offset-assert 432)
   (facing-dir      vector :inline :offset-assert 448)
   )
  :method-count-assert 29
  :size-assert         #x1d0
  :heap-base           #x160
  :flag-assert         #x1d016001d0
  (:states
    ram-boss-proj-launch
    ram-boss-proj-growing)
  )

(deftype ram-boss (nav-enemy)
  ((parent-override (pointer ram) :score 100         :offset 12)
   (facing-y                 float          :offset-assert 400)
   (player-dir-y             float          :offset-assert 404)
   (last-turn-speed          float          :offset-assert 408)
   (frustration              int32          :offset-assert 412)
   (dead?                    symbol          :offset-assert 416)
   (has-shield?              symbol          :offset-assert 420)
   (proj-stoked              basic          :offset-assert 424)
   (proj-status              uint64         :offset-assert 432)
   (part2                    sparticle-launch-control          :offset-assert 440)
   (proj-last-thrown-time    time-frame         :offset-assert 448)
   (nav-enemy-patrol-timeout time-frame         :offset-assert 456)
   (proj-launch-vec          vector :inline :offset-assert 464)
   (local-throw-point        vector :inline :offset-assert 480)
   (shield-jmod              joint-mod-set-local          :offset-assert 496)
   )
  :method-count-assert 76
  :size-assert         #x1f4
  :heap-base           #x190
  :flag-assert         #x4c019001f4
  (:methods
    (ram-boss-method-51 (_type_ vector) symbol :replace 51)
    (ram-boss-method-52 (_type_) symbol :replace 52)
    (ram-boss-method-57 (_type_ float) float :replace 57)
    )
  (:states
    ram-boss-tracking
    ram-boss-nav-resume
    ram-boss-throw
    ram-boss-nav-start
    ram-boss-jump-down-hit-ground
    (ram-boss-jump-down basic)
    (ram-boss-already-down basic)
    ram-boss-idle
    ram-boss-lose-shield
    ram-boss-up-defend-block
    ram-boss-forward-defend-block
    ram-boss-show-anims)
  )

;; - Functions

(define-extern snow-ram-proj-update-velocity (function ram-boss-proj none))
(define-extern ram-boss-on-ground-event-handler (function process int symbol event-message-block object :behavior ram-boss))
(define-extern ram-boss-init-by-other (function basic nav-enemy symbol none :behavior ram-boss))

;; - Unknowns

(define-extern *ram-boss-nav-enemy-info-no-shield* nav-enemy-info)
(define-extern *ram-boss-sg* skeleton-group)
(define-extern *ram-boss-nav-enemy-info* nav-enemy-info)


;; ----------------------
;; File - snow-ram
;; Source Path - levels/snow/snow-ram.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Unknowns

(define-extern *ram-sg* skeleton-group)


;; ----------------------
;; File - snow-part
;; Source Path - levels/snow/snow-part.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype snow-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )

;; - Functions

(define-extern snow-bird-bob-func (function sparticle-system sparticle-cpuinfo vector none))
(define-extern sparticle-snow-birds-moon (function sparticle-system sparticle-cpuinfo matrix none))


;; ----------------------
;; File - yeti
;; Source Path - levels/snow/yeti.gc
;; Containing DGOs - ['L1', 'SNO']
;; Version - 3

;; - Types

(deftype yeti-slave (nav-enemy)
  ((ground-y float  :offset-assert 400)
   (part2    sparticle-launch-control  :offset-assert 404)
   )
  :method-count-assert 76
  :size-assert         #x198
  :heap-base           #x130
  :flag-assert         #x4c01300198
  (:states
    yeti-slave-appear-jump-up
    yeti-slave-appear-land
    yeti-slave-show-anims)
  )

(deftype yeti (process-drawable)
  ((child-process         (pointer yeti-slave)  :score 100 :offset 20)
   (desired-num-children  int32   :offset-assert 176)
   (spawn-delay           int32   :offset-assert 180)
   (first-time-spawn-dist float   :offset-assert 184)
   (unknown               basic  :offset-assert 188)
   (unknown1              basic  :offset-assert 192)
   (unknown2              basic  :offset-assert 196)
   )
  :method-count-assert 22
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x16006000c8
  (:methods
    (yeti-method-20 (_type_ vector vector) symbol 20)
    (aggro? (_type_ vector) symbol 21)
    )
  (:states
    yeti-resuming-start
    yeti-first-time-start
    yeti-idle)
  )

;; - Functions

(define-extern yeti-slave-init-by-other (function entity yeti vector vector symbol none :behavior yeti-slave))
(define-extern yeti-slave-default-event-handler (function process int symbol event-message-block object :behavior yeti-slave))

;; - Unknowns

(define-extern *yeti-sg* skeleton-group)
(define-extern *yeti-nav-enemy-info* nav-enemy-info)

;; ----------------------
;; File - lavatube-obs
;; Source Path - levels/lavatube/lavatube-obs.gc
;; Containing DGOs - ['L1', 'LAV']
;; Version - 3

;; - Types

(deftype lavabase (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavabase-idle)
  )

(deftype lavafall (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavafall-idle)
  )

(deftype lavashortcut (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavashortcut-idle)
  )

(deftype darkecobarrel-leak (structure)
  ((offset      vector :inline :offset-assert 0)
   (first-frame basic          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype darkecobarrel-base (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (speed float   :offset-assert 176)
   (sync  time-frame  :offset-assert 184)
   )
  :method-count-assert 20
  :size-assert         #xc0
  :heap-base           #x50
  :flag-assert         #x14005000c0
  )

(deftype darkecobarrel-mover (darkecobarrel-base)
  ((start-time   time-frame                      :offset-assert 192)
   (hits         int32                       :offset-assert 200)
   (leak         darkecobarrel-leak             1       :inline :offset-assert 208)
   (y-offset     bouncing-float      :inline :offset-assert 240)
   (y-offset-tgt delayed-rand-float  :inline :offset-assert 280)
   (down         oscillating-vector  :inline :offset-assert 320)
   (down-tgt     delayed-rand-vector :inline :offset-assert 384)
   )
  :method-count-assert 20
  :size-assert         #x1b0
  :heap-base           #x140
  :flag-assert         #x14014001b0
  (:states
    darkecobarrel-mover-move
    darkecobarrel-mover-die)
  )

(deftype darkecobarrel (darkecobarrel-base)
  ((self-override darkecobarrel :score 100 :offset 28)
   (spawn-array (array int64)  :offset-assert 192) ;; likely to darkecobarrels
   (cur-spawn   int32  :offset-assert 196)
   )
  :method-count-assert 20
  :size-assert         #xc8
  :heap-base           #x60
  :flag-assert         #x14006000c8
  (:states
    darkecobarrel-spawner)
  )

(deftype lavafallsewera (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavafallsewera-idle)
  )

(deftype lavafallsewerb (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavafallsewerb-idle)
  )

(deftype chainmine (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112))
  :method-count-assert 22
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x16004000b0
  (:methods
    (die () _type_ :state 20)
    (idle () _type_ :state 21)
    )
  )

(deftype lavaballoon (process-drawable)
  ((root-override collide-shape :score 100 :offset 112)
   (move-per-tick float  :offset-assert 176)
   )
  :method-count-assert 22
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x16005000b4
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )

(deftype lavatube-lava (water-anim)
  ()
  :method-count-assert 30
  :size-assert         #xdc
  :heap-base           #x70
  :flag-assert         #x1e007000dc
  )

(deftype lavayellowtarp (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    lavayellowtarp-idle)
  )

;; - Functions

(define-extern darkecobarrel-base-init (function res-lump path-control-flag :behavior darkecobarrel-base))
(define-extern darkecobarrel-base-time (function time-frame :behavior darkecobarrel-base))
(define-extern darkecobarrel-cycle-time (function int :behavior darkecobarrel)) ;; likely to darkecobarrels
(define-extern darkecobarrel-advance-curspawn (function none :behavior darkecobarrel))
(define-extern darkecobarrel-mover-init-by-other (function res-lump float time-frame time-frame none :behavior darkecobarrel-mover))
(define-extern darkecobarrel-base-done? (function float symbol :behavior darkecobarrel-base))
(define-extern darkecobarrel-base-pos (function time-frame float :behavior darkecobarrel-base))
(define-extern darkecobarrel-mover-pos (function none :behavior darkecobarrel-mover))

;; - Unknowns

(define-extern *lavayellowtarp-sg* skeleton-group)
(define-extern ripple-for-lavatube-lava ripple-wave-set)
(define-extern *lavaballoon-sg* skeleton-group)
(define-extern *chainmine-sg* skeleton-group)
(define-extern *lavafallsewerb-sg* skeleton-group)
(define-extern *lavafallsewera-sg* skeleton-group)
(define-extern *darkecobarrel-sg* skeleton-group)
(define-extern *lavashortcut-sg* skeleton-group)
(define-extern *lavafall-sg* skeleton-group)
(define-extern *lavabase-sg* skeleton-group)


;; ----------------------
;; File - lavatube-energy
;; Source Path - levels/lavatube/lavatube-energy.gc
;; Containing DGOs - ['L1', 'LAV']
;; Version - 3

;; - Types

(deftype energydoor (process-drawable)
  ((root-override collide-shape-moving :score 100 :offset 112)
   (alt-actor entity-actor  :offset-assert 176)
   )
  :method-count-assert 20
  :size-assert         #xb4
  :heap-base           #x50
  :flag-assert         #x14005000b4
  (:states
    energydoor-closed-till-near
    energydoor-opened
    energydoor-closed-till-task
    energydoor-opening
    energydoor-closing)
  )

(deftype energybase (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    energybase-stopped
    energybase-idle
    energybase-stopping)
  )

(deftype energyhub (process-drawable)
  ((self-override energyhub :score 100 :offset 28)
   (alts                  entity-actor            3       :offset-assert 176)
   (arm                   handle            5       :offset-assert 192)
   (rot-mat               matrix             :inline :offset-assert 240)
   (rot-mat-init          matrix             :inline :offset-assert 304)
   (rotation-speed        oscillating-float  :inline :offset-assert 368)
   (rotation-speed-offset delayed-rand-float :inline :offset-assert 392)
   (y-rotation            float                      :offset-assert 420)
   (x-rotation            float                      :offset-assert 424)
   (palette-val           float                      :offset-assert 428)
   )
  :method-count-assert 20
  :size-assert         #x1b0
  :heap-base           #x140
  :flag-assert         #x14014001b0
  (:states
    energyhub-stopped
    energyhub-idle
    energyhub-stop)
  )

(deftype energyarm (process-drawable)
  ((parent-overide (pointer energyhub) :score 100 :offset 12)
   (self-override energyarm :score 100 :offset 28)
   (root-override collide-shape-moving :score 100 :offset 112)
   (offset             vector             :inline :offset-assert 176)
   (y-rotation         float                      :offset-assert 192)
   (y-chatter-rotation bouncing-float     :inline :offset-assert 196)
   (y-chatter-min      delayed-rand-float :inline :offset-assert 240)
   (x-rotation         bouncing-float     :inline :offset-assert 268)
   (x-fall-rotation    bouncing-float     :inline :offset-assert 308)
   (rot-mat            matrix             :inline :offset-assert 352)
   (ball               handle                     :offset-assert 416)
   (x-correction       float                      :offset-assert 424)
   )
  :method-count-assert 20
  :size-assert         #x1ac
  :heap-base           #x140
  :flag-assert         #x14014001ac
  (:states
    energyarm-stop
    energyarm-idle
    energyarm-no-ball
    energyarm-fall)
  )

(deftype energyball (process-drawable)
  ((parent-overide (pointer energyarm) :score 100 :offset 12)
   (root-override collide-shape-moving :score 100 :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    energyball-idle)
  )

(deftype energylava (process-drawable)
  ((root-override basic :offset 112))
  :method-count-assert 20
  :size-assert         #xb0
  :heap-base           #x40
  :flag-assert         #x14004000b0
  (:states
    energylava-idle)
  )

;; - Functions

(define-extern energyarm-init-by-other (function vector float none :behavior energyarm))
(define-extern energyhub-set-lava-height (function float float :behavior energyhub))
(define-extern energyhub-trans (function quaternion :behavior energyhub))
(define-extern energyarm-init (function energyarm sparticle-launch-control))
(define-extern energyball-init-by-other (function vector none :behavior energyball))
(define-extern energyarm-trans (function vector :behavior energyarm))
(define-extern energyball-init (function energyball collide-shape-moving))
(define-extern energydoor-player-dist (function float :behavior energydoor))
(define-extern energydoor-open-handler (function process int symbol event-message-block object :behavior energydoor))
(define-extern energydoor-closed-handler (function process int symbol event-message-block object :behavior energydoor))

;; - Unknowns

(define-extern *energylava-sg* skeleton-group)
(define-extern *energyhub-sg* skeleton-group)
(define-extern *energyarm-sg* skeleton-group)
(define-extern *energyball-sg* skeleton-group)
(define-extern *energybase-sg* skeleton-group)
(define-extern *energydoor-sg* skeleton-group)


;; ----------------------
;; File - lavatube-part
;; Source Path - levels/lavatube/lavatube-part.gc
;; Containing DGOs - ['L1', 'LAV']
;; Version - 3

;; - Types

(deftype lavatube-part (part-spawner)
  ()
  :method-count-assert 21
  :size-assert         #xd0
  :heap-base           #x60
  :flag-assert         #x15006000d0
  )


;; ----------------------
;; File - assistant-lavatube
;; Source Path - levels/lavatube/assistant-lavatube.gc
;; Containing DGOs - ['L1', 'LAV']
;; Version - 3

;; - Types

(deftype assistant-lavatube-start (process-taskable)
  ()
  :method-count-assert 53
  :size-assert         #x17c
  :heap-base           #x110
  :flag-assert         #x350110017c
  )

;; - Unknowns

(define-extern *assistant-lavatube-start-sg* skeleton-group)


;; ----------------------
;; File - title-obs
;; Source Path - levels/title/title-obs.gc
;; Containing DGOs - ['TIT']
;; Version - 3

;; - Types

(deftype logo (process-drawable)
  ((camera      handle  :offset-assert 176)
   (camera-anim handle  :offset-assert 184)
   (volumes     handle  :offset-assert 192)
   (black       handle  :offset-assert 200)
   (target      handle  :offset-assert 208)
   (sidekick    handle  :offset-assert 216)
   (main-joint  joint-mod   :offset-assert 224)
   (anim        spool-anim   :offset-assert 228)
   (next-anim   spool-anim   :offset-assert 232)
   (done?       symbol   :offset-assert 236)
   )
  :heap-base #x80
  :method-count-assert 24
  :size-assert         #xf0
  :flag-assert         #x18008000f0
  (:methods
    (idle () _type_ :state 20)
    (startup () _type_ :state 21)
    (hidden () _type_ :state 22)
    (ndi () _type_ :state 23)
    )
  )

(deftype logo-slave (process-drawable)
  ((parent-process (pointer logo) :score 100 :offset 12)
   (main-joint joint-mod  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xb4
  :flag-assert         #x15005000b4
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; - Functions

(define-extern logo-slave-init-by-other (function entity-actor skeleton-group none :behavior logo-slave))
(define-extern logo-init-by-other (function entity-actor vector symbol none :behavior logo))

;; - Unknowns

(define-extern *logo-japan-sg* skeleton-group)
(define-extern *logo-sg* skeleton-group)
(define-extern *ndi-sg* skeleton-group)
(define-extern *ndi-cam-sg* skeleton-group)
(define-extern *ndi-volumes-sg* skeleton-group)
(define-extern *logo-cam-sg* skeleton-group)
(define-extern *logo-volumes-japan-sg* skeleton-group)
(define-extern *logo-volumes-sg* skeleton-group)
(define-extern *logo-black-sg* skeleton-group)


;; ----------------------
;; File - lava
;; Source Path - old/lava/lava.gc
;; Containing DGOs - ['WATER-AN']
;; Version - 3

;; - Types

(deftype lava (water-anim)
  ()
  ;:method-count-assert 28
  ;:size-assert         #xd0
  ;:heap-base           #x60
  ;:flag-assert         #x1c006000d0
  )

(define-extern ripple-for-lava ripple-wave-set)

;; cavegeyserrock

(deftype cavegeyserrock-control-pt (structure)
  ((trans  vector :inline :offset-assert 0)
   (transv vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; cavegeyserrock
(deftype cavegeyserrock (process-drawable)
  ((root-override  collide-shape-moving :score 30 :offset 112)
   (do-burst?         symbol            :offset-assert 176)
   (do-falling-sound? symbol            :offset-assert 180)
   (do-landing-sound? symbol            :offset-assert 184)
   (begin-travel-up   float             :offset-assert 188)
   (begin-travel-down float             :offset-assert 192)
   (sync              sync-info :inline :offset-assert 196)
   (part2             sparticle-launch-control  :offset-assert 204)
   (down              vector    :inline :offset-assert 208)
   (up                vector    :inline :offset-assert 224)
   (control-pt        cavegeyserrock-control-pt 3 :inline :offset-assert 240)
   )
  :method-count-assert 22
  :size-assert         #x150
  :flag-assert         #x1600e00150
  :heap-base #xe0
  ;; inherited inpspect of process-drawable
  (:methods
    (cavegeyserrock-method-20 (_type_) none 20)
    (cavegeyserrock-method-21 (_type_) none 21)
    )
  (:states
    cavegeyserrock-idle
    )
  )

(define-extern *cavegeyserrock-sg* skeleton-group)

(define-extern cavecrystal-light-control-cavegeyserrock-callback (function (pointer process-drawable) int float object vector none))

