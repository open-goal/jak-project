// This file replaces type_hints.jsonc.
// Functions are identified by their "unique name". This is the name after ".function" in the IR2 file.
// Each cast entry represents an override of a register's type at a certain point the function.
// These modifications do not propagate like normal types, so you may have to apply these modifications
// over a range of indices.

// Entry format: [index, register, override]
// - The index can either be specified as a single integer, or as [min, max].
//      In the case of [min, max], the min index is included, but the max is not. ([1, 4] = 1, 2, 3).
// - The register is a string with the plain PS2 register name.
// - The type is a string with a valid GOAL typespec.
//    It is parsed exactly like the compiler, so you can use compound types.
//    You should only use register types here.

{
  // GCOMMON
  "(method 2 array)": [
    [23, "gp", "(array int32)"],
    [43, "gp", "(array uint32)"],
    [63, "gp", "(array int64)"],
    [83, "gp", "(array uint64)"],
    [102, "gp", "(array int8)"],
    [121, "gp", "(array uint8)"],
    [141, "gp", "(array int16)"],
    [161, "gp", "(array uint16)"],
    [186, "gp", "(array uint128)"],
    [204, "gp", "(array int32)"],
    [223, "gp", "(array float)"],
    [232, "gp", "(array float)"],
    [249, "gp", "(array basic)"],
    [258, "gp", "(array basic)"]
  ],

  "(method 3 array)": [
    [44, "gp", "(array int32)"],
    [62, "gp", "(array uint32)"],
    [80, "gp", "(array int64)"],
    [98, "gp", "(array uint64)"],
    [115, "gp", "(array int8)"],
    [132, "gp", "(array int8)"], // bug in game
    [150, "gp", "(array int16)"],
    [168, "gp", "(array uint16)"],
    [191, "gp", "(array uint128)"],
    [207, "gp", "(array int32)"],
    [226, "gp", "(array float)"],
    [243, "gp", "(array basic)"]
  ],

  // GKERNEL-H
  "(method 2 handle)": [
    [10, "a2", "(pointer process)"],
    [11, "a3", "process"]
  ],

  // GKERNEL
  "(method 0 cpu-thread)": [[[13, 28], "v0", "cpu-thread"]],

  "(method 0 process)": [
    [12, "a0", "int"],
    [[13, 43], "v0", "process"]
  ],

  "(method 0 dead-pool-heap)": [
    [60, "v0", "int"], // a lie, actually the 115 is an align16 constant propagated on addr of heap start.
    //[63, "a0", "pointer"],
    [[61, 73], "v0", "dead-pool-heap"]
  ],

  "(method 21 dead-pool-heap)": [
    [5, "v1", "pointer"],
    [13, "a0", "pointer"],
    [25, "v1", "pointer"]
  ],

  "(method 5 dead-pool-heap)": [
    [3, "v1", "int"],
    [3, "a0", "int"]
  ],

  "(method 0 protect-frame)": [
    [0, "a0", "int"],
    [[1, 8], "v0", "protect-frame"]
  ],

  "(method 10 process)": [[[24, 30], "s4", "protect-frame"]],

  "(method 9 process)": [[43, "s5", "process"]],

  "(method 14 dead-pool)": [
    [[24, 25], "v1", "(pointer process)"],
    [[30, 39], "s4", "(pointer process)"]
  ],

  "inspect-process-heap": [
    [[4, 11], "s5", "basic"],
    [17, "s5", "pointer"]
  ],

  // GSTRING
  "name=": [
    [24, "a1", "symbol"],
    [39, "a0", "symbol"]
  ],

  "string-cat-to-last-char": [
    [3, "s5", "(pointer uint8)"],
    [4, "s5", "string"]
  ],

  // GSTATE
  "enter-state": [[68, "s0", "protect-frame"]],

  // MATH
  "log2": [[3, "v1", "int"]],

  // QUATERNION
  "vector-x-quaternion!": [[10, "v1", "(pointer uint128)"]],
  "vector-y-quaternion!": [[10, "v1", "(pointer uint128)"]],
  "vector-z-quaternion!": [[10, "v1", "(pointer uint128)"]],

  // Matrix
  //"eul->matrix": [[[110, 228], "gp", "(pointer float)"]],

  // DMA
  "dma-send-to-spr": [[[0, 32], "s5", "dma-bank-spr"]],
  "dma-send-to-spr-no-flush": [[[0, 32], "s5", "dma-bank-spr"]],
  "dma-send-from-spr": [[[0, 32], "s5", "dma-bank-spr"]],
  "dma-send-from-spr-no-flush": [[[0, 32], "s5", "dma-bank-spr"]],
  "dma-initialize": [
    [1, "v1", "vif-bank"],
    [8, "v1", "vif-bank"],
    [6, "a0", "vif-bank"],
    [13, "a0", "vif-bank"]
  ],

  "clear-vu1-mem": [[[0, 11], "v1", "(pointer uint32)"]],
  "clear-vu0-mem": [[[0, 11], "v1", "(pointer uint32)"]],

  "dump-vu1-mem": [[[0, 49], "gp", "(pointer uint32)"]],

  "dump-vu1-range": [[[0, 54], "s4", "(pointer uint32)"]],

  "ultimate-memcpy": [
    [[0, 54], "s4", "dma-bank-spr"],
    [[0, 54], "s3", "dma-bank-spr"]
  ],

  // dma-buffer
  "dma-buffer-add-vu-function": [
    [[9, 33], "t2", "dma-packet"]
  ],

  // dma-bucket
  "dma-buffer-add-buckets":[
    [[1, 4], "v1", "dma-bucket"],
    [5, "v1", "pointer"],
    [[9, 11], "v1", "dma-bucket"],
    [11, "v1", "pointer"]
    //[[6, 15], "v1", "dma-bucket"]
  ],

  "dma-buffer-patch-buckets": [
    [3, "a0", "dma-bucket"],
    [[3, 5], "a2", "dma-bucket"],
    [7, "a0", "pointer"],
    [11, "a0", "dma-bucket"],
    //[12, "a2", "uint"],
    [13, "a0", "dma-bucket"],
    [14, "a0", "pointer"],
    [[15, 17], "a0", "dma-bucket"]
  ],

  // LEVEL
  "lookup-level-info": [
    [3, "a1", "symbol"],
    [4, "a1", "level-load-info"],
    [8, "a1", "level-load-info"],
    [12, "a1", "level-load-info"]
  ],

  // DISPLAY
  "put-display-alpha-env": [
    [[0, 5], "v1", "gs-bank"]
  ]
}
