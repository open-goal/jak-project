;; All Types

;; TODO - some of these are likely not needed / copied from jak 2

;; type system setup
(define-extern object type)
(define-extern type type)
(define-extern structure type)
(define-extern uint128 type)
(define-extern basic type)
(define-extern pair type)
(define-extern array type)
(define-extern symbol type)
(define-extern binteger type)
(define-extern number type)
(define-extern integer type)
(define-extern uinteger type)
(define-extern float type)
(define-extern boolean type) ;; not actually added as a runtime type in jak2, but valid? supports it.
(define-extern uint16 type)
(define-extern uint32 type)
(define-extern int32 type)
(define-extern int64 type)
(define-extern uint8 type)
(define-extern uint64 type)
(define-extern process-tree type)
(define-extern process type)
(define-extern stack-frame type)
(define-extern global kheap)
(define-extern kheap type)
(define-extern pointer type)

(define-extern #t symbol)
(define-extern #f symbol)

;; some types we need.
(declare-type sparticle-launch-group basic)
(declare-type lightning-spec basic)
(declare-type sparticle-launcher basic)
(declare-type state basic)
(declare-type res-lump basic)

;; kernel types
(defenum link-flag
    :bitfield #t
    :type int32
    (output-load-msg 0)
    (output-load-true-msg 1)
    (execute-login 2)
    (print-login 3)
    (force-debug 4)
    (fast-link 5)
    )

(defenum language-enum
  :type uint8
  (english 0)
  (french 1)
  (german 2)
  (spanish 3)
  (italian 4)
  (commentary 5)
  (japanese 6)
  (korean 7)
  (russian 8)
  (portuguese 9)
  (dutch 10)
  (uk-english 11)
  )

(define-extern *debug-segment* symbol)
(define-extern nothing (function none))
(define-extern _format (function _varargs_ object))
(define-extern method-set! (function type int object none)) ;; may actually return function.
(define-extern malloc (function symbol int pointer))
(define-extern kmemopen (function kheap string none))
(define-extern kmemclose (function none))
(define-extern dgo-load (function string kheap link-flag int none))
(define-extern *listener-function* (function object))
(define-extern *enable-method-set* int)
(define-extern *kernel-symbol-warnings* symbol)

(declare-type cpad-info basic)
(declare-type mouse-info basic)
(define-extern cpad-open (function cpad-info int cpad-info))
(define-extern cpad-get-data (function cpad-info cpad-info))
(define-extern scf-get-territory (function int)) ;; not actually a scf function...
(define-extern mouse-get-data (function mouse-info none))
(define-extern file-stream-open (function file-stream string symbol file-stream))
(define-extern file-stream-close (function file-stream file-stream))
(define-extern file-stream-length (function file-stream int))
(define-extern file-stream-seek (function file-stream int int int))
(define-extern file-stream-read (function file-stream pointer int int))
(define-extern file-stream-write (function file-stream pointer uint uint))
(define-extern reset-path (function none))
(define-extern flush-cache (function int none))
(define-extern gs-store-image (function object object object))
(define-extern sync-path (function int int int))
(define-extern file-stream-write (function file-stream pointer uint uint))
(define-extern file-stream-close (function file-stream file-stream))
(define-extern new-dynamic-structure (function symbol type int structure))
(define-extern kernel-shutdown (function none))
(define-extern scf-get-timeout (function int))
(define-extern scf-get-inactive-timeout (function int))
(define-extern syncv (function int int))
(define-extern string->symbol (function string symbol))
(define-extern link-begin (function pointer (pointer uint8) int kheap link-flag int))
(define-extern link-resume (function int))
(define-extern link-reset (function none))
(define-extern kset-language (function language-enum int))
(define-extern reset-graph (function int int int int none))
(define-extern symbol->string (function symbol string))
(define-extern loado (function string kheap object))

(declare-type sql-result basic)
(define-extern sql-query (function string sql-result))

(define-extern loading-level kheap)
(define-extern dma-sync (function pointer int int int))
(define-extern unload (function string none))



(defenum kmalloc-flags
  :bitfield #t
  (align-16    4)
  (align-64    6)
  (align-256   8)
  (memset     12)
  (top        13)
  )

(define-extern kmalloc (function kheap int kmalloc-flags string pointer))

(define-extern *kernel-boot-message* symbol)
(define-extern *kernel-boot-art-group* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gcommon                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vec4s (uint128)
  "Vector of four floats, packed into a 128-bit integer as bitfields.
   This behaves like a value type.
   This is not the main vector type."
  ((x float :offset 0)
   (y float :offset 32)
   (z float :offset 64)
   (w float :offset 96))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector (structure)
  "Vector of four floats, stored in a structure.
   This behaves like a reference type.
   This is the main vector type."
  ((data float   4 :score -1 :offset-assert 0) ;; guessed by decompiler
   (x    float     :offset 0)
   (y    float     :offset 4)
   (z    float     :offset 8)
   (w    float     :offset 12)
   (quad uint128   :score -1 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bfloat (basic)
  "Boxed (or basic?) float. Just a basic that wraps a single float."
  ((data float))
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype inline-array-class (basic)
  "Base class for basic inline arrays.
   The stride is stored in the heap-base of the inline-array-class child class."
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   ;; this is 16-byte aligned.
   ;; children of inline-array-class should define their own data which overlays this one.
   (_data            uint8  :score -50 :dynamic :offset 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  (:methods
    (new (symbol type int) _type_) ;; 0
    (push-back "Copy object to the end, then increment length. No bounds check." (_type_ object) int);; 9
    (inline-array-class-method-10 () none) ;; 10
    (clear-1 "Set length to 0, return #t." (_type_) symbol) ;; 11
    (clear-2 "Set length to 0" (_type_) none) ;; 12
    (pop-front "Remove first object by copying last object to the front, then decrement length." (_type_ int) pointer) ;; 13
    )
  )

(deftype inline-array-class-uint64 (inline-array-class)
  "Specialization of inline-array-class for uint64. It's unclear why
   this would be preferred over a normal (array uint64), since both store data the same way."
  ((data uint64 :dynamic :overlay-at _data))
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype inline-array-class-uint32 (inline-array-class)
  "Specialization of inline-array-class for uint32. It's unclear why this would be preferred
   over a normal (array uint32), since both store data the same way."
  ((data uint32 :dynamic :overlay-at _data))
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

#|
(deftype array (UNKNOWN)
  ((allocated-length int32            :offset-assert 4)
   (length           int32            :offset-assert 0)
   (content-type     type             :offset-assert 8) ;; guessed by decompiler
   (data             uint8   :dynamic :offset-assert 12) ;; guessed by decompiler
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   (UNKNOWN          UNKNOWN          :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

(define-extern identity
               "The identity function."
               (function object object))

(define-extern 1/
               "Floating point reciprocal."
               (function float float))

(define-extern +
               "64-bit integer addition."
               (function int int int))

(define-extern -
               "64-bit integer subraction."
               (function int int int))

(define-extern *
               "32-bit signed integer multiplication."
               (function int int int))

(define-extern /
               "32-bit signed integer division."
               (function int int int))

(define-extern ash
               "64-bit arithmetic shift. (sign-extends)"
               (function int int int))

(define-extern mod
               "32-bit mod."
               (function int int int))

(define-extern rem
               "32-bit mod (same as mod)."
               (function int int int))

(define-extern abs
               "64-bit integer absolute value."
               (function int int))

(define-extern min
               "64-bit integer minimum."
               (function int int int))

(define-extern max
               "64-bit integer maximum."
               (function int int int))

(define-extern logior
               "64-bit bitwise or."
               (function int int int))

(define-extern logand
               "64-bit bitwise and."
               (function int int int))

(define-extern lognor
               "64-bit bitwise not-or."
               (function int int int))

(define-extern logxor
               "64-bit bitwise exclusive or."
               (function int int int))

(define-extern lognot
               "64-bit bitwise not."
               (function int int))

(define-extern false-func
               "Returns false."
               (function symbol))

(define-extern true-func
               "Returns true."
               (function symbol))

(define-extern format (function _varargs_ object))

(define-extern basic-type?
               "Return if the given basic is a given type. A child of the given type is also acceptable."
               (function basic type symbol))

(define-extern type-type?
               "Return if the first type is the second type, or a child of it."
               (function type type symbol))

(define-extern type?
               "Return if the given object is an instance of the given type.
                Works on basics, bintegers, or symbols."
               (function object type symbol))

(define-extern find-parent-method
               "Find the closest parent type that has a different implementation of the given method and return that method.
                If it does not exist, return `nothing` function.
                This is used to implement call-parent-method."
               (function type int function))

(define-extern ref&
               "Return the n-th pair in a linked list of pairs. No bounds checking.
                If it is the null pair, return #f."
               (function object int object))

(define-extern ref
               "Return the n-th item in a proper list. No bounds checking."
               (function object int object))

(define-extern last
               "Return the last object in a proper list."
               (function object object))

(define-extern member
               "See if the first argument is in the proper list of the second argument.
                Checked with simple equality.
                If so, return the list starting at the at point (a truthy value).
                Otherwise, return #f.
                (member 'b '(a b c)) -> (b c d).
                (member 'w '(a b c)) -> #f"
               (function object object object))

(define-extern nmember
               "Like member, but membership is checked with the name= function to handle symbols or strings."
               (function basic object object))

(define-extern assoc
               "Search an association list for given object. Return #f if not found, otherwise the element with matching car.
                (assoc 'a '((a . 1) (b . 2) (c . 3))) -> (a . 1)
                (assoc 'x '((a . 1) (b . 2) (c . 3))) -> #f"
               (function object object object))

(define-extern assoce
               "Like assoc, but supports a special `else` key which is always considered a match."
               (function object object object))

(define-extern nassoc
               "Like assoc, but uses name= instead of = to check equality."
               (function string object object))

(define-extern nassoce
               "Like assoce, but uses name= instead of = to check equality."
               (function string object object))

(define-extern append!
               "Append the second argument to the end of the list (or empty pair) in the first argument."
               (function object object object))

(define-extern delete!
               "Remove an element from the given list, return the list."
               (function object object pair))

(define-extern delete-car!
               "Remove an element from the given list with a matching car. Return the list."
               (function object object object))

(define-extern insert-cons!
               "Update an association list to have the given (key . value) pair.
                If a previous value exists, it is deleted first.
                This function always allocates a pair through `cons` on the global heap, which can never be freed,
                so it should almost never be used at runtime."
               (function object object pair))

(define-extern sort
               "Sort a list using the given comparision function.
                The function can return a #t/#f value, or a positive/negative value.
                For example, you could use either `-` or `<` as functions to sort integers."
               (function pair (function object object object) pair))

(define-extern string->symbol-debug
               "Convert a string to a symbol. The symbol must be known, and this cannot
                create a new symbol. (in the PC port, it will still work.)
                This is inteded to be used in debug only, and will not trigger a warning.
                In debug, this will work for all symbols."
               (function string symbol))

(define-extern symbol->string-debug
               "Get the name of a symbol. This is intended to be used in debug only.
                In debug, this will work for all symbols. (In PC port, this works always)"
               (function symbol string))

(define-extern symbol->hash
               "Convert a symbol to a unique integer value, which is just the symbol's address."
               (function symbol int))

(define-extern mem-copy!
               "Basic memory copy. This is not an optimized implementation."
               (function pointer pointer int pointer))

(define-extern qmem-copy<-!
               "Copy memory by quadword (16-bytes). Must by 16-byte aligned, size in 16-byte units. Increasing address copy. Not an optimized version."
               (function pointer pointer int pointer))

(define-extern qmem-copy->!
               "Copy memory by quadword (16-bytes). Must by 16-byte aligned, size in 16-byte units. Decreasing address copy. Not an optimized version."
               (function pointer pointer int pointer))

(define-extern qmem-clear!
               "Clear memory by quadword (16-bytes). Must by 16-byte aligned, size in 16-byte units. Not an optimized version."
               (function pointer int pointer))

(define-extern mem-set32!
               "Set memory to the given 32-bit value, repeated n times. (like C memset, but setting int32_t instead of char).
                Not an optimized implementation. Must be 4-byte aligned."
               (function pointer int int pointer))

(define-extern mem-or!
               "Set the destiation to `dest = dest | src`. Size in bytes. Not an optimized version."
               (function pointer pointer int pointer))

(define-extern quad-copy!
               "Optimized memory copy. Must be 16-byte aligned. Size in 16-byte units."
              (function pointer pointer int none))
(define-extern fact
               "Factorial."
               (function int int))

(define-extern *print-column* binteger)
(define-extern print
               "Print any boxed object (symbol, pair, basic, binteger) to #t (the REPL). No newline."
               (function object object))
(define-extern printl
               "Print any boxed object (symbol, pair, basic, binteger) to #t (the REPL), followed by a newline."
               (function object object))

(define-extern inspect
               "Inspect any boxed object (symbol, pair, basic, binteger) to #t (the REPL)."
               (function object object))

(define-extern mem-print
               "Print out data in memory in hex."
               (function (pointer uint32) int symbol))
(define-extern *trace-list* pair)
(define-extern print-tree-bitmask
               "Print out ASCII-art tree structure, from a bitmask of nesting levels."
               (function int int symbol))
(define-extern breakpoint-range-set!
               "Unsupported function to set a CPU breakpoint."
               (function uint uint uint int))
(define-extern valid? (function object type string symbol object symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstring-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gkernel-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type process-tree basic)
(declare-type process process-tree)
(declare-type thread basic)
(declare-type cpu-thread thread)
(declare-type clock basic)
(declare-type res-lump basic)
(declare-type entity res-lump)
(declare-type entity-actor entity)
(declare-type event-message-block structure)
(declare-type level basic)

(defenum process-mask
  :type uint32
  :bitfield #t
  (execute 0)       ;; 1
  (freeze 1)
  (pause 2)
  (menu 3)
  (progress 4)
  (actor-pause 5)  ;; 32
  (sleep 6)      ;; 64
  (sleep-code 7)   ;; 128
  (process-tree 8) ;; 256
  (heap-shrunk 9)  ;; 512
  (going 10)       ;; 1024
  (kernel-run 11) ;; 2048
  (no-kill 12)    ;; 4096
  (movie 13)      ;; 8192
  (dark-effect 14)   ;; 0x4000
  (target 15)        ;; 0x8000

  (sidekick 16)      ;;    0x1'0000
  (crate 17)         ;;    0x2'0000
  (collectable 18)   ;;    0x4'0000
  (enemy 19)         ;;    0x8'0000
  (camera 20)        ;;   0x10'0000
  (platform 21)      ;;   0x20'0000
  (ambient 22)       ;;   0x40'0000
  (entity 23)        ;;   0x80'0000
  (projectile 24)    ;;  0x100'0000
  (bot 25)           ;;  0x200'0000
  (death 26)         ;;  0x400'0000
  (guard 27)         ;;  0x800'0000
  (vehicle 28)       ;; 0x1000'0000
  (civilian 29)      ;; 0x2000'0000
  (kg-robot 30)      ;; 0x4000'0000
  (metalhead 31)     ;; 0x8000'0000
  )

(deftype process-tree (basic)
  ((name    string                  :offset-assert 4)
   (mask    process-mask            :offset-assert 8)
   (clock   clock                   :offset-assert 12) ;; guessed by decompiler
   (parent  (pointer process-tree)  :offset-assert 16) ;; guessed by decompiler
   (brother (pointer process-tree)  :offset-assert 20) ;; guessed by decompiler
   (child   (pointer process-tree)  :offset-assert 24) ;; guessed by decompiler
   (ppointer (pointer process) :offset-assert 28)
   (self process-tree :offset-assert 32)
   )
  :method-count-assert 14
  :size-assert         #x24
  :flag-assert         #xe00000024
  :no-runtime-type
  (:methods
    (new "Allocate a process-tree with the kernel clock." (symbol type string) _type_) ;; 0
    (activate "Move a process from dead to active, moving it to the given tree." (_type_ process-tree string pointer) process-tree) ;; 9
    (deactivate "Make a process dead, clean it up, remove it from the active pool, and return to dead pool." (_type_) none) ;; 10
    (init-from-entity! (_type_ entity-actor) object) ;; 11
    (run-logic? "Should this process be run? Checked by execute-process-tree." (_type_) symbol) ;; 12
    (process-tree-method-13 () none) ;; 13
    )
  )

(deftype kernel-context (basic)
  ((prevent-from-run   process-mask  :offset-assert 4) ;; guessed by decompiler
   (require-for-run    process-mask  :offset-assert 8) ;; guessed by decompiler
   (allow-to-run       process-mask  :offset-assert 12) ;; guessed by decompiler
   (next-pid           int32         :offset-assert 16)
   (fast-stack-top     pointer       :offset-assert 20) ;; guessed by decompiler
   (current-process    process       :offset-assert 24) ;; guessed by decompiler
   (relocating-process basic         :offset-assert 28)
   (relocating-min     int32         :offset-assert 32)
   (relocating-max     int32         :offset-assert 36)
   (relocating-offset  int32         :offset-assert 40)
   (relocating-level   level         :offset-assert 44) ;; guessed by decompiler
   (low-memory-message symbol        :offset-assert 48) ;; guessed by decompiler
   (login-object       basic         :offset-assert 52)
   (login-art-group    basic         :offset-assert 56)
   (login-level-index  int32         :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  ;; field relocating-level uses ~A with a signed load.
  )

(deftype time-frame (int64)
  ()
  )

(deftype clock (basic)
  ((index                      int16                :offset-assert 4) ;; int32
   (ref-count                  uint16               :offset-assert 6)
   (mask                       process-mask         :offset-assert 8) ;; guessed by decompiler
   (clock-ratio                float                :offset-assert 12)
   (accum                      float                :offset-assert 16)
   (integral-accum             float                :offset-assert 20)
   (frame-counter              time-frame           :offset-assert 24) ;; time-frame
   (old-frame-counter          time-frame           :offset-assert 32) ;; time-frame
   (integral-frame-counter     time-frame           :offset-assert 40)
   (old-integral-frame-counter time-frame           :offset-assert 48)
   (sparticle-data             vector       :inline :offset-assert 64)
   (seconds-per-frame          float                :offset-assert 80)
   (frames-per-second          float                :offset-assert 84)
   (time-adjust-ratio          float                :offset-assert 88)
   )
  :method-count-assert 24
  :size-assert         #x5c
  :flag-assert         #x180000005c
  (:methods
    (new (symbol type int) _type_) ;; 0
    (update-rates! "Recompute all clock values for the given clock ratio (arg0)." (_type_ float) float) ;; 9
    (advance-by!
      "Advance the clock by arg0 timeframes (as a float).
       Both counters keep a separate fractional and integer counter."
      (_type_ float) clock) ;; 10
    (tick! "Per-game-frame clock tick forward." (_type_) clock) ;; 11
    (save! "Save a clock's state to a buffer, return bytes used." (_type_ (pointer uint64)) int) ;; 12
    (load! "Load a clock's state from a buffer, return bytes used." (_type_ (pointer uint64)) int) ;; 13
    (copy! "Copy the frame counters and ratio from arg0." (_type_ clock) clock) ;; 14
    (reset! "Reset a clock to 1000s, rate of 1." (_type_) none) ;; 15
    (frame-mask-2 "Check if the frame count, xored with `xor-val` has its lowest bit set" (_type_ int) symbol) ;; 16
    (frame-mask-4 "Check if the frame count, xored with `xor-val` has any of its lowest 2 bits set" (_type_ int) symbol) ;; 17
    (frame-mask-8 "Check if the frame count, xored with `xor-val` has any of its lowest 3 bits set" (_type_ int) symbol) ;; 18
    (frame-mask-16 "Check if the frame count, xored with `xor-val` has any of its lowest 4 bits set" (_type_ int) symbol) ;; 19
    (frame-mask-32 "Check if the frame count, xored with `xor-val` has any of its lowest 5 bits set" (_type_ int) symbol) ;; 20
    (frame-mask-64 "Check if the frame count, xored with `xor-val` has any of its lowest 6 bits set" (_type_ int) symbol) ;; 21
    (frame-mask-128 "Check if the frame count, xored with `xor-val` has any of its lowest 7 bits set" (_type_ int) symbol) ;; 22
    (frame-mask-256 "Check if the frame count, xored with `xor-val` has any of its lowest 8 bits set" (_type_ int) symbol) ;; 23
    )
  )

(deftype thread (basic)
  ((name symbol :offset-assert 4)
   (process process :offset-assert 8)
   (previous thread :offset-assert 12)
   (suspend-hook (function cpu-thread none) :offset-assert 16)
   (resume-hook (function cpu-thread none) :offset-assert 20)
   (pc pointer :offset-assert 24)
   (sp pointer :offset-assert 28)
   (stack-top pointer :offset-assert 32)
   (stack-size int32 :offset-assert 36)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  ;; Failed to read fields.
  (:methods
    (stack-size-set! "Adjust the size of the stack that can be stored during a suspend. Must be called before any process allocations." (_type_ int) none) ;; 9
    (thread-suspend "Suspend this thread and jump to the kernel (for use by the kernel only)" (_type_) none) ;; 10
    (thread-resume "Jump from the kernel to the restored thread. (for use by the kernel only)" (_type_) none) ;; 11
    )
  )

(deftype cpu-thread (thread)
  ;; registers modified for PC port.
  ((rreg   uint64  7)
   (freg   float   8)
   (stack  uint8   :dynamic)
   )
  :method-count-assert 12
  :size-assert         #x80
  :flag-assert         #xc00000080
  ;; Failed to read fields.
  (:methods
     (new "Allocate a thread. If there is already a top-thread for this process, assume this is a temporary thread, and allocate on the bottom of the stack." (symbol type process symbol int pointer) _type_) ;; 0
    )
  )

(deftype dead-pool (process-tree)
  ()
  :method-count-assert 16
  :size-assert         #x24
  :flag-assert         #x1000000024
  (:methods
    (new "Allocate a dead pool and set up dead processes" (symbol type int int string) _type_) ;; 0
    (get-process "Allocate a process from the pool, or #f if it fails." (_type_ type int object) process) ;; 14
    (return-process "Return a process to the pool." (_type_ process) none) ;; 15
    )
  )

(deftype dead-pool-heap-rec (structure)
  ((process process             :offset-assert 0) ;; guessed by decompiler
   (prev    dead-pool-heap-rec  :offset-assert 4)
   (next    dead-pool-heap-rec  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype dead-pool-heap (dead-pool)
  ((allocated-length   int32                       :offset-assert 36)
   (compact-time       uint32                      :offset-assert 40)
   (compact-count-targ uint32                      :offset-assert 44)
   (compact-count      uint32                      :offset-assert 48)
   (fill-percent       float                       :offset-assert 52)
   (first-gap          dead-pool-heap-rec          :offset-assert 56)
   (first-shrink       dead-pool-heap-rec          :offset-assert 60)
   (heap               kheap              :inline  :offset-assert 64)
   (alive-list         dead-pool-heap-rec :inline  :offset-assert 80)
   (last               dead-pool-heap-rec          :offset-assert 84 :overlay-at (-> alive-list prev))
   (dead-list          dead-pool-heap-rec :inline  :offset-assert 92)
   (process-list       dead-pool-heap-rec :dynamic :inline :offset-assert 104) ;; guessed by decompiler
   )
  :method-count-assert 28
  :size-assert         #x68
  :flag-assert         #x1c00000068
  (:methods
    (new "Allocate and initialize a dead-pool-heap." (symbol type string int int) _type_) ;; 0
    (init "Allocate memory for processes and init records." (_type_ symbol int) none) ;; 16
    (compact "Relocate process in memory to remove gaps, increasing free memory for this dead-pool-heap." (dead-pool-heap int) none) ;; 17
    (shrink-heap "Shrink the heap of a process, allowing the dead pool heap to later reclaim the memory during a compact." (dead-pool-heap process) dead-pool-heap) ;; 18
    (churn "Relocate process in memory, to trigger memory bugs related to process relocation." (dead-pool-heap int) none) ;; 19
    (memory-used "Get the total memory used. Memory in between processes that is not used by a process is considered used." (_type_) int) ;; 20
    (memory-total "Get the total size of the heap for processes." (_type_) int) ;; 21
    (memory-free "Get the size of the unused part of the heap." (dead-pool-heap) int) ;; 22
    (compact-time "Get the compaction time (never set)." (dead-pool-heap) uint) ;; 23
    (gap-size "Get the size of the gap (possibly zero) after the given process. Use #f for the gap at the start of the pool memory." (dead-pool-heap dead-pool-heap-rec) int) ;; 24
    (gap-location "Get pointer to gap (possibly zero size) after the given process" (dead-pool-heap dead-pool-heap-rec) pointer) ;; 25
    (find-gap "Find the first process with a nonzero gap after it, after the given process." (dead-pool-heap dead-pool-heap-rec) dead-pool-heap-rec) ;; 26
    (find-gap-by-size "Find the first gap with a size at least this big" (dead-pool-heap int) dead-pool-heap-rec) ;; 27
    )
  )

(deftype stack-frame (basic)
  ((name symbol :offset 4)
   (next stack-frame :offset 8) ;; which way does this point?
   )
  :size-assert #xc
  :method-count-assert 9
  :flag-assert #x90000000c
  )

(deftype catch-frame (stack-frame)
  ((sp    int32)
   (ra    int32)
   ; (freg float   6)
   ; (rreg uint128 8)
   ;; In OpenGOAL, we swap a rreg for 4 more fregs.
   (freg float   10) ;; only use 8
   (rreg uint128  7) ;; only use 5
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  (:methods
    (new (symbol type symbol function (pointer uint64)) object) ;; 0
    )
  )


(deftype protect-frame (stack-frame)
  ((exit  (function object))
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  (:methods
    (new "Allocate and set up a protect-frame. This _must_ be used on the stack." (symbol type (function object)) protect-frame) ;; 0
    )
  )


(deftype handle (uint64)
  ((process (pointer process) :offset   0 :size  32) ;; additional level of indirection to support moving processes
   (pid     int32             :offset  32 :size  32) ;; unique pid to check if it's the same process or not.
   (u64     uint64            :offset   0 :size  64)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype state (protect-frame)
  ((parent state                                                     :offset-assert 16)
   (code   function                                                  :offset-assert 20) ;; guessed by decompiler
   (trans  (function object)                                         :offset-assert 24) ;; guessed by decompiler
   (post   function                                                  :offset-assert 28) ;; guessed by decompiler
   (enter  function                                                  :offset-assert 32) ;; guessed by decompiler
   (event  (function process int symbol event-message-block object)  :offset-assert 36) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type symbol function
          (function object)
          function
          (function object)
          (function process int symbol event-message-block object)) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype event-message-block (structure)
  ((to-handle   handle              :offset-assert 0)
   (to          (pointer process)   :offset-assert 0 :overlay-at to-handle) ;; guessed by decompiler
   (from-handle handle              :offset-assert 8)
   (from        (pointer process)   :offset-assert 8 :overlay-at from-handle)
   (param       uint64            6 :offset-assert 16) ;; guessed by decompiler
   (message     symbol              :offset-assert 64) ;; guessed by decompiler
   (num-params  int32               :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )


(deftype event-message-block-array (inline-array-class)
  ((data  event-message-block  :inline :dynamic)
   )
  :method-count-assert 15
  :size-assert         #x10
  :flag-assert         #xf00000010
  ;; Failed to read fields.
  (:methods
    (send-all! (_type_) none) ;; 14
    )
  )


(deftype process (process-tree)
  ((pool dead-pool)
   (status           symbol                                                            :offset-assert 40) ;; guessed by decompiler
   (pid int32)
   (main-thread      cpu-thread                                                        :offset-assert 48) ;; guessed by decompiler
   (top-thread       cpu-thread                                                        :offset-assert 52) ;; guessed by decompiler
   (entity           entity-actor                                                      :offset-assert 56) ;; guessed by decompiler
   (level            level                                                             :offset-assert 60) ;; guessed by decompiler
   (state            state                                                             :offset-assert 64) ;; guessed by decompiler
   (prev-state       state                                                             :offset-assert 68)
   (next-state       state                                                             :offset-assert 72) ;; guessed by decompiler
   (state-stack      basic                                                             :offset-assert 76)
   (trans-hook       function                                                          :offset-assert 80) ;; guessed by decompiler
   (post-hook        function                                                          :offset-assert 84) ;; guessed by decompiler
   (event-hook       (function process int symbol event-message-block object)          :offset-assert 88) ;; guessed by decompiler
   (allocated-length int32                                                             :offset-assert 92)
   (heap-base        pointer                                                           :offset-assert 96) ;; guessed by decompiler
   (heap-top         pointer                                                           :offset-assert 100) ;; guessed by decompiler
   (heap-cur         pointer                                                           :offset-assert 104) ;; guessed by decompiler
   (stack-frame-top  stack-frame                                                       :offset-assert 108) ;; guessed by decompiler
   (connection-list  connectable                                              :inline  :offset-assert 112)
   (stack            uint8                                                    :dynamic :offset-assert 128 :score -1) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x80
  :flag-assert         #xe00000080
  (:methods
     (new "Allocate a process, set up process heap, self/ppointer, clock." (symbol type string int) _type_) ;; 0
    )
  (:states
    dead-state ;; 10
    )
  )

(deftype sql-result (array)
  ((sql-data object :dynamic :offset 16))
  (:methods
    (new (symbol type int) _type_) ;; 0
    )
  :flag-assert #x900000010
  )

(define-extern *sql-result* sql-result)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gkernel                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *kernel-version* binteger)
(define-extern *irx-version* binteger)
(define-extern *kernel-boot-mode* symbol)
(define-extern *kernel-boot-level* symbol)
(define-extern *deci-count* int)
(define-extern *last-loado-length* int)
(define-extern *last-loado-global-usage* int)
(define-extern *last-loado-debug-usage* int)
(define-extern *kernel-packages* pair)
(define-extern load-package
               "If not already loaded, do a blocking dgo-load to load the given CGO."
               (function string kheap pair))
(define-extern unload-package
               "Mark a package as unloaded. Does not actually unload."
               (function string pair))

(define-extern *kernel-context* kernel-context)
(define-extern *dram-stack* (pointer uint8))
(define-extern *null-kernel-context* kernel-context)
(define-extern remove-exit
               "Remove the top stack frame. If you have no other stack frames, you can use this before a `go`
                to skip the `exit` of the state you are currently in."
               (function none :behavior process))
(define-extern stream<-process-mask
               "Print out the process-mask as a human readable string."
               (function object process-mask process-mask))
(define-extern *master-mode* symbol)
(define-extern *pause-lock* symbol)
(define-extern inspect-process-heap
               "Call the inspect method on every object in the process heap."
               (function process symbol))
(define-extern return-from-thread (function none))
(define-extern return-from-thread-dead (function none))
(define-extern reset-and-call (function thread function object))
(define-extern method-state
               "Get a virtual state from this type by name."
               (function type symbol state))
(define-extern *global-search-name* basic)
(define-extern *global-search-count* int)
(define-extern process-by-name
               "Find the first process with the given name in the process-tree."
               (function string process-tree process))
(define-extern process-not-name
               "Find the first process without the given name in the process-tree."
               (function string process-tree process))
(define-extern process-count
               "Count the number of processes in the given process-tree."
               (function process-tree int))
(define-extern kill-by-name "Kill all processes with the given name." (function string process-tree symbol))
(define-extern kill-by-type "Kill all processes with the given type." (function type process-tree symbol))
(define-extern kill-not-name "Kill all processes, except ones with the given name." (function string process-tree symbol))
(define-extern kill-not-type "Kill all processes, except ones with the exact type." (function type process-tree symbol))
(define-extern kill-by-type-inherited "Kill all processes, except ones that inherit from the given type." (function type process-tree symbol))
(define-extern iterate-process-tree "Call a function on each not-dead process in the tree." (function process-tree (function object object) kernel-context object))
(define-extern execute-process-tree  "Iterate over all process, calling the run callback on each, if they should run." (function process-tree (function object object) kernel-context object))
(define-extern search-process-tree "Return the first function in the process-tree which the callback returns #t on." (function process-tree (function process-tree object) process))
(define-extern kernel-dispatcher "Run the GOAL kernel! Runs the function from the listener (if there is one), then all processes" (function object))
(define-extern sync-dispatcher "Run the REPL function." (function object))
(define-extern inspect-process-tree "Display a tree-view of a process-tree." (function process-tree int int symbol process-tree))
(define-extern throw-dispatch (function catch-frame object none))
(define-extern throw (function symbol object int))
(define-extern previous-brother "Get the process before this one, at this level." (function process-tree object))
(define-extern change-parent "Reparent a process." (function process-tree process-tree process-tree))
(define-extern change-brother "Unused, and wrong." (function process-tree process-tree object))
(define-extern change-to-last-brother "Move this process to the end of its brother list." (function process-tree process-tree))
(define-extern run-function-in-process (function process function object object object object object object object))
(define-extern set-to-run-bootstrap (function none))
(define-extern set-to-run "Set up a process to run a given function, with the given arguments when it executes next." (function cpu-thread function object object object object object object pointer))
(define-extern dead-state (state process))
(define-extern entity-deactivate-handler (function process entity-actor none))
(define-extern *kernel-clock* clock)
(define-extern *vis-boot* symbol)
(define-extern *null-process* process)
(define-extern *listener-process* process)
(define-extern *16k-dead-pool* dead-pool)
(define-extern *8k-dead-pool* dead-pool)
(define-extern *4k-dead-pool* dead-pool)
(define-extern *target-dead-pool* dead-pool)
(define-extern *camera-dead-pool* dead-pool)
(define-extern *camera-master-dead-pool* dead-pool)
(define-extern *debug-dead-pool* dead-pool-heap)
(define-extern *nk-dead-pool* dead-pool-heap)
(define-extern *default-dead-pool* dead-pool)
(define-extern *pickup-dead-pool* dead-pool)
(define-extern *dead-pool-list* pair)
(define-extern *active-pool* process-tree)
(define-extern *display-pool* process-tree)
(define-extern *camera-pool* process-tree)
(define-extern *target-pool* process-tree)
(define-extern *entity-pool* process-tree)
(define-extern *mid-pool* process-tree)
(define-extern *pusher-pool* process-tree)
(define-extern *bg-pool* process-tree)
(define-extern *default-pool* process-tree)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pskernel                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype lowmemmap (structure)
  ((irq-info-stack  uint32   :offset-assert 0)
   (irq2-info-stack uint32   :offset-assert 4)
   (kernel-copy-fn  uint32   :offset-assert 8)
   (kernel-write-fn uint32   :offset-assert 12)
   (r1-save         uint128  :offset-assert 16)
   (last-time       uint32   :offset-assert 32)
   (high-time       uint32   :offset-assert 36)
   (dma-status      uint32   :offset-assert 40)
   (dma-qnext       uint32   :offset-assert 44)
   (dma-qwc         uint32   :offset-assert 48)
   (dma-tnext       uint32   :offset-assert 52)
   (dma-stack0      uint32   :offset-assert 56)
   (dma-stack1      uint32   :offset-assert 60)
   (kernel-read-fn  uint32   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern kernel-copy-function (function object (pointer int32) int32 int32 none))
(define-extern kernel-copy-to-kernel-ram (function none))
(define-extern kernel-write-function (function object object object none))
(define-extern kernel-write (function none))
(define-extern kernel-read-function (function object (pointer int32) none))
(define-extern kernel-read (function none))
(define-extern kernel-check-hardwired-addresses (function none))
(define-extern install-default-debug-handler (function object none))
(define-extern return-from-exception (function object none))
(define-extern kernel-set-exception-vector (function object none))
(define-extern kernel-set-interrupt-vector (function none))
(define-extern kernel-set-level2-vector (function object object none))
(define-extern deinstall-debug-handler (function none))
(define-extern deinstall-debug-handlers (function none))
(define-extern resend-exception (function object object object object none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstring                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern copy-string<-string
               "Copy a string. No bounds check. Writes null terminator." (function string string string))
(define-extern string=
               "Check for string equality."
               (function string string symbol))
(define-extern string-prefix=
               "Check if a string starts with a given string."
               (function string string symbol))
(define-extern charp-prefix=
               "Check if a c-string starts with a given c-string."
               (function (pointer uint8) (pointer uint8) symbol))
(define-extern string-suffix=
               "Check if a string ends with a given string."
               (function string string symbol))
(define-extern string-position
               "Find the point where a string occurs in another. If it doesn't, return -1."
               (function string string int))
(define-extern string-charp=
               "Check if a string is equal to a c-string." (function string (pointer uint8) symbol))
(define-extern name=
               "Check if a string/symbol stores the same name as another string/symbol."
               (function object object symbol))
(define-extern copyn-string<-charp
               "Copy part of a c-string to a string. Writes null terminator after num-chars." (function string (pointer uint8) int string))
(define-extern string<-charp
               "Copy a c-string to a string. Writes the null terminator."
               (function string (pointer uint8) string))
(define-extern charp<-string
               "Copy a string to a c-string. Writes the null terminator."
               (function (pointer uint8) string int))
(define-extern copyn-charp<-string
               "Copy part of a string to a c-string. Writes null terminator, repeatedly, to reach the given length.
                If the source is longer than the length, the null terminator is still included."
               (function (pointer uint8) string int none))
(define-extern copy-charp<-charp
               "C-string copy, writes null terminator."
               (function (pointer uint8) (pointer uint8) (pointer uint8)))
(define-extern cat-string<-string
               "Append a string to another."
               (function string string string))
(define-extern catn-string<-charp
               "Append part of a string to another. Writes null terminator."
               (function string (pointer uint8) int string))
(define-extern cat-string<-string_to_charp "Append part of a string to another, up to the given pointer."
               (function string string (pointer uint8) (pointer uint8)))
(define-extern append-character-to-string
               "Append a single character to a string. Writes null terminator after."
               (function string uint8 int))
(define-extern charp-basename
               "Strip the directory and suffix from a c-string."
               (function (pointer uint8) (pointer uint8)))
(define-extern clear "Set string to the empty string."
               (function string string))
(define-extern string<?
               "Slightly incorrect ordering of strings."
               (function string string symbol))
(define-extern string>? "Slightly incorrect ordering of strings." (function string string symbol))
(define-extern string<=? "Slightly incorrect ordering of strings." (function string string symbol))
(define-extern string>=? "Slightly incorrect ordering of strings." (function string string symbol))
(define-extern *string-tmp-str* string)
(define-extern string-skip-to-char "Advance to the given character."
               (function (pointer uint8) uint (pointer uint8)))
(define-extern string-cat-to-last-char "Append append-str to end of base-str, up to the last occurance of char" (function string string uint (pointer uint8)))
(define-extern string-skip-whitespace "Jump over whitespace chars."
               (function (pointer uint8) (pointer uint8)))
(define-extern string-suck-up! "Move the string forward so the pointer is now at the beginning."
               (function string (pointer uint8) symbol))
(define-extern string-strip-leading-whitespace! "Strip leading whitespace." (function string symbol))
(define-extern string-strip-trailing-whitespace! "String trailing whitespace." (function string symbol))
(define-extern string-strip-whitespace! "Strip whitespace from the beginning and end of a string" (function string symbol))
(define-extern string-upcase "Uppercase characters. If convert-dash is set, - will be uppercased to _" (function string string symbol none))
(define-extern string-get-arg!! (function string string symbol))
(define-extern string->int "Convert string to int." (function string int))
(define-extern string->float "Convert string to float. Finally implemented!" (function string float))
(define-extern string-get-int32!! (function (pointer int32) string symbol))
(define-extern string-get-float!! (function (pointer float) string symbol))
(define-extern string-get-flag!! (function (pointer symbol) string string string symbol))
(define-extern string-word-wrap "Wrap lines to specified width." (function string int none))
(define-extern *debug-draw-pauseable* symbol)
(define-extern *stdcon0* string)
(define-extern *stdcon1* string)
(define-extern *null* string)
(define-extern *stdcon* string)
(define-extern *stdebug* string)
(define-extern *temp-string* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dgo-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dgo-header (structure)
  ((length   uint32    :offset-assert 0)
   (rootname uint8  60 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype dgo-entry (structure)
  ((offset uint32  :offset-assert 0)
   (length uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dgo-file (basic)
  ((num-go-files uint32          :offset-assert 4)
   (total-length uint32          :offset-assert 8)
   (rsvd         uint32          :offset-assert 12)
   (data         uint8  :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gstate                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern inherit-state (function state state state))
(define-extern state-type? (function state symbol symbol))
(define-extern enter-state (function object object object object object object object))
(define-extern *event-queue* event-message-block-array)
(define-extern send-event-function (function process-tree event-message-block object))
(define-extern looping-code (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; types-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype basic-reserved (basic)
  ()
  :method-count-assert 29
  :size-assert         #x4
  :flag-assert         #x1d00000004
  (:methods
    (basic-reserved-method-9 () none) ;; 9
    (basic-reserved-method-10 () none) ;; 10
    (basic-reserved-method-11 () none) ;; 11
    (basic-reserved-method-12 () none) ;; 12
    (basic-reserved-method-13 () none) ;; 13
    (basic-reserved-method-14 () none) ;; 14
    (basic-reserved-method-15 () none) ;; 15
    (basic-reserved-method-16 () none) ;; 16
    (basic-reserved-method-17 () none) ;; 17
    (basic-reserved-method-18 () none) ;; 18
    (basic-reserved-method-19 () none) ;; 19
    (basic-reserved-method-20 () none) ;; 20
    (basic-reserved-method-21 () none) ;; 21
    (basic-reserved-method-22 () none) ;; 22
    (basic-reserved-method-23 () none) ;; 23
    (basic-reserved-method-24 () none) ;; 24
    (basic-reserved-method-25 () none) ;; 25
    (basic-reserved-method-26 () none) ;; 26
    (basic-reserved-method-27 () none) ;; 27
    (basic-reserved-method-28 () none) ;; 28
    )
  )

(deftype part-id (uint32)
  ()
  :flag-assert #x900000004
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vu1-macros                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype float-type (uint32)
  ()
  )

(deftype rgba (uint32)
  ((r uint8 :offset 0)
   (g uint8 :offset 8)
   (b uint8 :offset 16)
   (a uint8 :offset 24)
   )
  :flag-assert #x900000004
  :no-runtime-type
  )

(deftype xyzw (uint128)
  ()
  )

(deftype xyzwh (uint128)
  ()
  )

(deftype random-generator (basic)
  ((seed uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern truncate
  "Round (toward zero) to an integer.
   @param arg0 float to truncate"
   (function float float))
(define-extern round "Round to the nearest integer" (function float float))
(define-extern floor "Round (down) to an integer" (function float float))
(define-extern ceil "Round (up) to an integer" (function float float))
(define-extern integral? "Is this number an integer?" (function float symbol))
(define-extern fractional-part "Get the fractional part of a float." (function float float))
(define-extern odd? "Is the number odd?" (function int symbol))
(define-extern even? "Is the number even?" (function int symbol))
(define-extern sawtooth-wave "Sample a sawtooth with period 1. In range (0, 1)" (function float float))
(define-extern triangle-wave
  "Sample a triangle wave. Period is 4, in range (-1, 1) (so slope is 1 or -1)."
  (function float float))
(define-extern log-x-plus-1-order9
  "Fast approximation of ln(x + 1). Probably only accurate for x in [0, 1]."
  (function float float))
(define-extern logf "Natural log." (function float float))
(define-extern log2f "Log base 2." (function float float))
(define-extern exp-slead (pointer float))
(define-extern exp-strail (pointer float))
(define-extern exp "Compute e^x." (function float float))
(define-extern pow "Compute arg0^arg1" (function float float float))
(define-extern print-exp "Print in the format AeB where A is in the range (1, 10)" (function float none))
(define-extern print-time "Print a [[time-frame]] as h:mm:ss." (function object time-frame none))
(define-extern log2 "Log base 2." (function int int))
(define-extern seek "Move arg0 toward arg1 by at most arg2." (function float float float float))
(define-extern seek-ease
  "Move arg0 toward arg1, and slow down before reaching the end.
   When farther than arg3 away, move by at most arg2.
   When closer than arg3, linearly ramp down the movement amount from arg2 to 0 but no lower than arg4."
  (function float float float float float float))
(define-extern seek-ease-in-out
  "Move arg0 toward arg2, and slow down at the start and end.
   When within arg4 of arg1 (at the beginning of movement), ramp up speed, with a minimum speed of arg6
   When within arg5 of arg2 (at the end of movement), ramp down speed, with a minimum speed of arg5
   Normally, move at most arg3"
  (function float float float float float float float float))
(define-extern lerp "Linearly interpolate between arg0 and arg1." (function float float float float))
(define-extern lerp-scale-old
  "Linearly remap arg2 in [arg3, arg4] to [arg0, arg1].
   This is the jak 1 implementation, which I claimed was a bad implementation..."
  (function float float float float float float))
(define-extern lerp-scale
  "Linearly remap arg2 in [arg3, arg4] to [arg0, arg1].
   More efficient than the -old version."
  (function float float float float float float))
(define-extern lerp-scale-clamp
  "Clamp the input, then linearly remap arg2 in [arg3, arg4] to [arg0, arg1]."
  (function float float float float float float))
(define-extern lerp-clamp
  "Linearly interpolate between arg0 and arg1. arg2 is clamped to [0, 1]"
  (function float float float float))
(define-extern rgba-lerp (function rgba rgba rgba rgba))
(define-extern seekl "Move arg0 toward arg1, by at most arg2." (function int int int int))
(define-extern rand-vu-init "Initialize the VU0 random generator." (function float float))
(define-extern rand-vu "Get a random number in [0, 1) and advance the random generator." (function float))
(define-extern rand-vu-nostep
  "Get the number currently in the random generator.
   This will be equal to the last call of (rand-vu).
   This will not update the random generator."
  (function float))
(define-extern rand-vu-float-range "Get a random float in between arg0 and arg1." (function float float float))
(define-extern rand-vu-percent? "Get a boolean that's true with the given probability (in 0, 1)." (function float symbol))
(define-extern rand-vu-int-range "Get an integer in the given range (inclusive)." (function int int int))
(define-extern rand-vu-int-count "Get an integer in the range [0, max)." (function int int))
(define-extern rand-vu-int-count-excluding
  "Get an integer in the range [0, arg0).
   If bit n is set in arg1, exclude this value from being returned."
  (function int int int))
(define-extern rand-vu-int-range-exclude
  "Get an integer in the range [0, arg0), excluding arg2.
   Note that this doesn't use bits like rand-vu-int-count-excluding."
  (function int int int int))
(define-extern *random-generator* random-generator)
(define-extern rand-uint31-gen
  "Generate a supposedly random integer.
   Note, this might not quite be right.
   But the highest bit is always zero, like it says
  and it looks kinda random to me."
  (function random-generator uint))
(define-extern cube-root "Cube root with cool trick that I don't understand." (function float float))
(define-extern int-noise "Generate random-ish floats in range -1, 1." (function int float))
(define-extern smooth-step
  "Interpolate between 0, 1 with a cubic polynomial.
   These are picked so f(0) = 0, f(1) = 1, f'(0) = f'(1) = 0."
  (function float float))
(define-extern smooth-interp
  "Remap arg2 from (arg3, arg4) to (arg0, arg1), using cubic interpolation.
   Satisfies:
    - f(arg3) = arg0
    - f(arg4) = arg1
    - f'(arg3) = f'(arg4) = 0"
  (function float float float float float float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vector-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bit-array (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   (_pad             uint8  :offset-assert 12)
   (bytes            uint8  :dynamic :offset 12)
   )
  :method-count-assert 13
  :size-assert         #xd
  :flag-assert         #xd0000000d
  (:methods
    (new "Allocate a new bit-array with room arg0 bits." (symbol type int) _type_) ;; 0
    (get-bit "Get the nth bit as a boolean." (_type_ int) symbol) ;; 9
    (clear-bit "Set the nth bit to 0." (_type_ int) int) ;; 10
    (set-bit "Set the nth bit to 1." (_type_ int) int) ;; 11
    (clear-all! "Set all bits to 0." (_type_) _type_) ;; 12
    )
  )


(deftype vector16ub (structure)
  ((data uint8 16   :offset-assert 0)
   (quad uint128    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4ub (structure)
  ((data uint8  4 :offset-assert 0)
   (x    uint8    :offset        0)
   (y    uint8    :offset        1)
   (z    uint8    :offset        2)
   (w    uint8    :offset        3)
   (clr  uint32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector4b (structure)
  ((data int8  4 :offset-assert 0)
   (x    int8    :offset        0)
   (y    int8    :offset        1)
   (z    int8    :offset        2)
   (w    int8    :offset        3)
   (clr  int32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2ub (structure)
  ((data uint8 2 :offset-assert 0)
   (x    uint8   :offset        0)
   (y    uint8   :offset        1)
   (clr  uint16  :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype vector2b (structure)
  ((data int8 2 :offset-assert 0)
   (x    int8   :offset        0)
   (y    int8   :offset        1)
   (clr  int16  :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype vector2h (structure)
  ((data int16 2 :offset-assert 0 :score -1)
   (x    int16   :offset        0)
   (y    int16   :offset        2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2uh (structure)
  ((data uint16 2 :offset-assert 0)
   (x    uint16   :offset        0)
   (y    uint16   :offset        2)
   (val  uint32   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector3h (structure)
  ((data int16 3 :offset-assert 0)
   (x    int16   :offset        0)
   (y    int16   :offset        2)
   (z    int16   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector3uh (structure)
  ((data uint16 3 :offset-assert 0)
   (x    uint16   :offset        0)
   (y    uint16   :offset        2)
   (z    uint16   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector2w (structure)
  ((data int32 2 :offset-assert 0)
   (x    int32   :offset        0)
   (y    int32   :offset        4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3w (structure)
  ((data int32 3 :offset-assert 0)
   (x    int32   :offset        0)
   (y    int32   :offset        4)
   (z    int32   :offset        8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4w (structure)
  ((data  int32  4 :offset-assert 0 :score -1)
   (x     int32     :offset        0)
   (y     int32     :offset        4)
   (z     int32     :offset        8)
   (w     int32     :offset        12)
   (dword uint64  2 :offset        0)
   (quad  uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector2 (structure)
  ((data float 2 :offset-assert 0)
   (x    float   :offset 0)
   (y    float   :offset 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3 (structure)
  ((data float 3 :offset-assert 0)
   (x    float   :offset        0)
   (y    float   :offset        4)
   (z    float   :offset        8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4 (structure)
  ((data  float 4  :offset-assert 0 :score -1)
   (x     float    :offset        0)
   (y     float    :offset        4)
   (z     float    :offset        8)
   (w     float    :offset        12)
   (dword uint64 2 :offset        0)
   (quad  uint128  :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4w-2 (structure)
  ((data   int32    8 :offset-assert  0 :score -2)
   (quad   uint128  2 :offset         0 :score -1)
   (vector vector4w 2 :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype vector4w-3 (structure)
  ((data   int32    12 :offset-assert  0 :score -2)
   (quad   uint128  3  :offset         0 :score -1)
   (vector vector4w 3  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector4w-4 (structure)
  ((data   int32    16 :offset-assert  0)
   (quad   uint128  4  :offset         0)
   (vector vector4w 4  :inline :offset 0 :score 999)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vector4h (structure)
  ((data int16  4 :offset-assert 0)
   (x    int16    :offset        0)
   (y    int16    :offset        2)
   (z    int16    :offset        4)
   (w    int16    :offset        6)
   (long uint64   :offset        0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector8h (structure)
  ((data int16   8 :offset-assert 0)
   (quad uint128   :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector16b (structure)
  ((data int8    16 :offset-assert 0)
   (quad uint128    :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4s-3 (structure)
  ((data   float   12 :offset-assert  0)
   (quad   uint128 3  :offset         0)
   (vector vector  3  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector-array (inline-array-class)
  ((data vector :inline :dynamic :offset-assert 16 :score 10)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype rgbaf (vector)
  ((r    float     :offset 0)
   (g    float     :offset 4)
   (b    float     :offset 8)
   (a    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype plane (vector)
  ((a    float     :offset 0)
   (b    float     :offset 4)
   (c    float     :offset 8)
   (d    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sphere (vector)
  ((r    float     :offset 12 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype isphere (vec4s)
  ()
  )

(deftype box8s (structure)
  ((data   float   8       :offset-assert 0)
   (quad   uint128 2       :offset        0)
   (vector vector  2       :offset        0)
   (min    vector  :inline :offset        0)
   (max    vector  :inline :offset        16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype box8s-array (inline-array-class)
  ((data box8s :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype vertical-planes (structure)
  ((data uint128 4 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vertical-planes-array (basic)
  ((length uint32                           :offset-assert 4)
   (data   vertical-planes :inline :dynamic :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype qword (structure)
  ((data     uint32   4       :offset-assert 0)
   (byte     uint8    16      :offset        0)
   (hword    uint16   8       :offset        0)
   (word     uint32   4       :offset        0)
   (dword    uint64   2       :offset        0)
   (quad     uint128          :offset        0)
   (vector   vector   :inline :offset        0 :score -100)
   (vector4w vector4w :inline :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector3s (structure)
  ((data float 3 :offset-assert 0)
   (x    float   :offset        0)
   (y    float   :offset        4)
   (z    float   :offset        8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(define-extern *null-vector* vector)
(define-extern *identity-vector* vector)
(define-extern *x-vector* vector)
(define-extern *y-vector* vector)
(define-extern *z-vector* vector)
(define-extern *up-vector* vector)
(define-extern vector-dot
  "Take the dot product of two vectors.
   Only does the x, y, z compoments.
   Originally handwritten assembly to space out loads and use FPU accumulator"
  (function vector vector float))
(define-extern vector-dot-vu "Take the dot product (xyz only). Using VU0." (function vector vector float))
(define-extern vector4-dot
  "Take the dot product of two vectors.
   Does the x, y, z, and w compoments"
  (function vector vector float))
(define-extern vector4-dot-vu "Take the dot product (xyzw). Using VU0." (function vector vector float))
(define-extern vector+! "Set dst = a + b. The w component of dst is set to 0." (function vector vector vector vector))
(define-extern vector-! "Set dst = a - b. The w componenent of dst is set to 0." (function vector vector vector vector))
(define-extern vector-zero! "Set xyzw to 0." (function vector vector))
(define-extern vector-reset! "Set vector to <0,0,0,1>." (function vector vector))
(define-extern vector-copy! "Copy arg1 to arg0." (function vector vector vector))
(define-extern vector-length< (function vector float symbol))
(define-extern vector-length> (function vector float symbol))
(define-extern *zero-vector* vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gravity-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bounding-box-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bounding-box (structure)
  ((min vector :inline :offset-assert 0)
   (max vector :inline :offset-assert 16)
   )
  :method-count-assert 21
  :size-assert         #x20
  :flag-assert         #x1500000020
  (:methods
    (add-spheres! "Add count spheres." (_type_ (inline-array sphere) int) int) ;; 9
    (add-box! "Expand the box as needed to contain the given box." (_type_ bounding-box) int) ;; 10
    (add-point! "Expand the box as needed to contain the given point." (_type_ vector) none) ;; 11
    (intersects-line-segment?
      "Check intersection in xz plane, using liang-barsky. Not sure if this actually
       a useful check or not..."
      (_type_ vector vector) symbol) ;; 12
    (set-from-point-offset! "Set to the smallest box containing arg0, (arg0 + arg1)" (_type_ vector vector) none) ;; 13
    (set-from-point-offset-pad! "Set the box to contain arg0, arg0 + offset, with some padding." (_type_ vector vector float) int) ;; 14
    (set-to-point! "Set the box to be a single point." (_type_ vector) none) ;; 15
    (set-from-sphere! "Set the box to contain a single sphere." (_type_ sphere) none) ;; 16
    (set-from-spheres!
      "Reset box to hold the given spheres.
       Note: this implementation could be optimized."
      (_type_ (inline-array sphere) int) int) ;; 17
    (get-bounding-sphere "Get a bounding sphere for a bounding box." (_type_ vector) vector) ;; 18
    (inside-xyz? "Is the point in the box?" (bounding-box vector) symbol) ;; 19
    (inside-xz? "Is the point in the box? Check xz only." (bounding-box vector) symbol) ;; 20
    )
  )

(deftype bounding-box2 (structure)
  ((min vector2 :inline :offset-assert 0)
   (max vector2 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bounding-box4w (structure)
  ((min vector4w :inline :offset-assert 0)
   (max vector4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype bounding-box-both (structure)
  ((box   bounding-box   :inline :offset-assert 0)
   (box4w bounding-box4w :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype bounding-box-array (inline-array-class)
  ((data bounding-box :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matrix-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype matrix (structure)
  "A 4x4 matrix, stored in row-major order.
   some, but not all, functions assume that a matrix is an affine transform.
   others assume that the rotation has no scale or shear (and that its inverse is its transpose)."
  ((data   float   16      :offset-assert 0 :score -2) ;; guessed by decompiler
   (vector vector  4       :offset 0 :score -1) ;; guessed by decompiler
   (quad   uint128 4       :offset 0) ;; guessed by decompiler
   (rvec   vector  :inline :offset 0 :score 1)
   (uvec   vector  :inline :offset 16 :score 1)
   (fvec   vector  :inline :offset 32 :score 1)
   (trans  vector  :inline :offset 48 :score 1)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (transform-vectors!
      "Transform many vectors. This acts like w = 1, even if it isn't. The value of w is copied."
      (_type_ (inline-array vector) (inline-array vector) int) none) ;; 9
    )
  )

(deftype matrix3 (structure)
  "A 3x3 matrix, stored in row-major order.
   NOTE: the rows each have an extra 4-bytes of padding,
   so this is really a 3x4 matrix.
   This type is rarely used."
  ((data   float   12 :offset-assert 0 :score -1) ;; guessed by decompiler
   (vector vector  3  :inline :offset 0) ;; guessed by decompiler
   (quad   uint128 3  :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype matrix4h (structure)
  "A matrix stored using 16-bit integers.
   Note that these usually have different scaling for the 4th row which
   contains the translation in an affine transform.
   So you generally should not unpack these to floats without knowing where they came from
   and how they were originally packed (for example, in tie/shrub)."
  ((data     int16    16 :offset-assert 0 :score -1) ;; guessed by decompiler
   (vector4h vector4h 4  :offset 0) ;; guessed by decompiler
   (long     int64    4  :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern matrix-copy! "Copy arg1 to arg0" (function matrix matrix matrix))
(define-extern matrix<-vector-yz-exact! (function matrix vector vector matrix))
(define-extern matrix<-vector-yz! (function matrix vector vector matrix))
(define-extern matrix<-vector-z! (function matrix vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; quaternion-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype quaternion (structure)
  "Quaternion. Stored in xyzw order."
  ((data float   4       :offset-assert 0 :score -1) ;; guessed by decompiler
   (x    float           :offset        0)
   (y    float           :offset        4)
   (z    float           :offset        8)
   (w    float           :offset        12)
   (vec  vector  :inline :offset        0)
   (quad uint128         :offset        0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *unity-quaternion* quaternion)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; euler-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype euler-angles (vector)
  "Just uses the same xyzw and data array as vector.
   The `w` stores an integer that seems to have
   bitfields for... something? Like maybe the order?
   Euler angles are mostly unused, and the code is a bit of disaster."
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern EulSafe
  "Maybe euler angle storage orders?
   What is this naming convention?"
  (array int32))
(define-extern EulNext (array int32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transform-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype transform (structure)
  "Transformation. w components of vectors should be 1.0
   This can represent any rotation, translation, and scaling.
   Note that the scaling is applied before rotation
   (meaning it scales along the axes of the pre-transformed frame)."
  ((trans vector :inline :offset-assert 0)
   (rot   vector :inline :offset-assert 16)
   (scale vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trs (basic)
  "Like transform, but it's a basic.
   Note that the trsq child type overrides this rotation with a quaternion.
   usage of the plain trs is very limited, at least in Jak 1."
  ((trans vector :inline :offset-assert 16)
   (rot   vector :inline :offset-assert 32)
   (scale vector :inline :offset-assert 48)
   )
  (:methods
   (new (symbol type) _type_) ;; 0
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; geometry-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype curve (structure)
  ((cverts     (inline-array vector)  :offset-assert 0) ;; guessed by decompiler
   (num-cverts int32                  :offset-assert 4)
   (knots      (pointer float)        :offset-assert 8) ;; guessed by decompiler
   (num-knots  int32                  :offset-assert 12)
   (length     float                  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype line-intersection-val (structure)
  ((tt0 float  :offset-assert 0)
   (tt1 float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype border-plane (basic)
  ((name   symbol         :offset-assert 4) ;; guessed by decompiler
   (action basic          :offset-assert 8)
   (slot   int8           :offset-assert 12)
   (trans  vector :inline :offset-assert 16)
   (normal vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (debug-draw (_type_) int) ;; 9
    (point-past-plane? (_type_ vector) symbol) ;; 10
    )
  )

(deftype lissajous (structure)
  ((x-mag        float  :offset-assert 0)
   (y-mag        float  :offset-assert 4)
   (theta        float  :offset-assert 8)
   (wx           float  :offset-assert 12)
   (wy           float  :offset-assert 16)
   (period-shift float  :offset-assert 20)
   (theta-rate   float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x1c
  :flag-assert         #xa0000001c
  (:methods
    (lissajous-method-9 (_type_ vector) vector) ;; 9
    )
  )

(deftype lissajous-interp (structure)
  ((current lissajous :inline :offset-assert 0)
   (dest    lissajous :inline :offset-assert 28)
   (rate    lissajous :inline :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x54
  :flag-assert         #xb00000054
  (:methods
    (lissajous-interp-method-9 (_type_ vector) vector) ;; 9
    (lissajous-interp-method-10 (_type_) float) ;; 10
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trigonometry-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transformq-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype transformq (transform)
  ((quat quaternion :inline :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trsq (trs)
  ((quat quaternion :inline :offset 32 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype trsqv (trsq)
  "A transform with:
  - type information (child of [[basic]])
  - rotation stored as quaternion
  - velocity information.
  This is a very commonly used type to represent the position of an in-game object.
  The `root` of a process-drawable (the parent 'in-game object' type) is a [[trsqv]].
  Additionally, the collision system uses [[trsqv]] as the parent type for foreground
  collision objects ([[collide-shape]], [[collide-shape-moving]]).
  As a result, this type has a lot of weird methods and extra stuff hidden in it."
  ((pause-adjust-distance meters             :offset 4)
   (nav-radius            meters             :offset 8)
   (transv                vector     :inline :offset-assert 64)
   (rotv                  vector     :inline :offset-assert 80)
   (scalev                vector     :inline :offset-assert 96)
   (dir-targ              quaternion :inline :offset-assert 112)
   (angle-change-time     time-frame         :offset-assert 128)
   (old-y-angle-diff      float              :offset-assert 136)
   )
  :method-count-assert 28
  :size-assert         #x8c
  :flag-assert         #x1c0000008c
  (:methods
    (seek-toward-heading-vec!
      "Adjust the orientation to point along dir, only changing our yaw.
       The vel is a maximum velocity limit.
       The frame count is the time constant (first order).
       There's some logic to avoid rapidly changing directions"
      (_type_ vector float time-frame) quaternion) ;; 9
    (set-heading-vec!
      "Makes us look in the arg0 direction immediately.  Pitch will be unchanged."
      (_type_ vector) quaternion) ;; 10
    (seek-to-point-toward-point!
      "Seek toward pointing toward arg0 from our current location."
      (_type_ vector float time-frame) quaternion) ;; 11
    (point-toward-point! "Immediately point toward arg0." (_type_ vector) quaternion) ;; 12
    (seek-toward-yaw-angle! "Seek toward the given yaw angle." (_type_ float float time-frame) quaternion) ;; 13
    (set-yaw-angle-clear-roll-pitch!
      "Immediately clear our roll and pitch and set yaw to the given angle."
      (_type_ float) quaternion) ;; 14
    (set-roll-to-grav!
      "Set our roll so that our local down aligns with standard gravity."
      (_type_ float) quaternion) ;; 15
    (set-roll-to-grav-2!
      "Set our roll so that our local down aligns with standard gravity."
      (_type_ float) quaternion) ;; 16
    (rotate-toward-orientation!
      "Adjust our orientation toward target, subject to some rate limits.
       For Jak 1, I said:
       I don't think this is a very robust function and probably doesn't work right in cases
       where an axis flips by 180 degrees.
       But now they use matrix-from-two-vectors-the-long-way-smooth to fix it! Good job.
       This additionally uses the fancy logic of matrix-from-two-vectors-smooth."
      (_type_ quaternion float float int int float) quaternion) ;; 17
    (set-quaternion! "Set this [[trsqv]]'s quaternion." (_type_ quaternion) quaternion) ;; 18
    (set-heading-vec-clear-roll-pitch!
      "Set our rotation to point along the given heading, with no roll or pitch."
      (_type_ vector) quaternion) ;; 19
    (point-toward-point-clear-roll-pitch!
      "Set our orientation to point toward arg0, clearing roll and pitch."
      (_type_ vector) quaternion) ;; 20
    (rot->dir-targ!
      "Set the target direction for this [[trsqv]] to its quaternion."
      (_type_) quaternion) ;; 21
    (y-angle "Get the y angle for this [[trsqv]]'s quaternion." (_type_) float) ;; 22
    (global-y-angle-to-point
      "Get the angle in the xz plane from the position of this trsqv to the point arg0
       (ignores our current yaw)."
      (_type_ vector) float) ;; 23
    (relative-y-angle-to-point
      "Get the y angle between the current orientation and arg0
       (how much we'd have to yaw to point at arg0)."
      (_type_ vector) float) ;; 24
    (roll-relative-to-gravity "Get our roll, relative to 'down' from gravity." (_type_) float) ;; 25
    (set-and-limit-velocity (_type_ int vector float) trsqv) ;; 26
    (get-quaternion "Get the quat for this [[trsqv]]." (_type_) quaternion) ;; 27
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bounding-box                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype liang-barsky-line-clip-params (structure)
  ((te float  :offset-assert 0)
   (tl float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern box-vector-enside? "Is the point in the box? On the edge doesn't count." (function bounding-box vector symbol))
(define-extern box-vector-inside? "Is the point in the box? On the edge counts." (function bounding-box vector symbol))
(define-extern liang-barsky-line-clipt "Clip test in 1 dimension. Is arg1 in arg2?" (function liang-barsky-line-clip-params float float symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matrix                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern matrix-identity! "Set dst to the identity matrix." (function matrix matrix))
(define-extern *identity-matrix* matrix)
(define-extern *hermite-matrix* matrix)
(define-extern matrix+!
  "Set dst = src1 + src2. It is okay for any arguments to be the same data.
   This is not an efficient implementation."
  (function matrix matrix matrix matrix))
(define-extern matrix-!
  "Set dst = src1 - src1. It is okay for any arugments to be the same data.
   This is not an efficient implementation."
  (function matrix matrix matrix matrix))
(define-extern matrix*!
  "Set dst = src1 * src2. It is okay for any arguments to be the same data.
   This is a moderately efficient implementation."
  (function matrix matrix matrix matrix))
(define-extern matrixp*!
  "Set dst = src1 * src2. NOTE: this function is a wrapper around matrix*!
   that adds no additional functionality. It seems to be a leftover from
   a time when matrix*! wasn't safe to use in place. This is unused."
  (function matrix matrix matrix matrix))
(define-extern vector-matrix*! "Set dst = vec * mat. dst may be equal to src." (function vector vector matrix vector))
(define-extern vector-norm-matrix*! (function vector vector matrix vector))
(define-extern vector-rotate*!
  "Set dst to be the input vector rotated by the rotation part of mat.
   The input matrix should be a homogeneous transform with a rotation matrix as its upper-left 3x3.
   dst may be equal to src."
  (function vector vector matrix vector))
(define-extern vector3s-matrix*!
  "Set dst to be ([src 1.0] * mat).xyz.  Doesn't touch the w of dst.
   dst and vec can be the same memory"
  (function vector3s vector3s matrix vector3s))
(define-extern vector3s-rotate*!
  "Set dst to vec rotated by the rotation in the homogeneous transform mat.
   mat should not have a scale/shear (the upper 3x3 should be a pure rotation)."
  (function vector3s vector3s matrix vector3s))
(define-extern matrix-transpose! "Set dst = src^T. src and dst can be the same." (function matrix matrix matrix))
(define-extern matrix-inverse-of-rot-trans!
  "Set dst = src^-1, assuming src is a homogeneous tranform with only rotation/translation.
   NOTE: THIS FUNCTION REQUIRES dst != src"
  (function matrix matrix matrix))
(define-extern matrix-4x4-inverse!
  "Invert a 4x4 matrix. This assumes that the input is a homogeneous transform.
   Src and dst can be the same."
  (function matrix matrix matrix))
(define-extern matrix-translate! "Set dst to a homogeneous transform with only a translation of trans." (function matrix vector matrix))
(define-extern matrix-translate+!
  "Add the given translation to the translation of homogenous transform mat src
   and store in dst.  It is okay for dst = src."
  (function matrix matrix vector matrix))
(define-extern matrix-scale!
  "Set dst to a homogenous transform with only a scale. The x,y,z components
   of scale become the x,y,z scaling factors"
  (function matrix vector matrix))
(define-extern scale-matrix!
  "Scale an existing matrix. Okay for dst = src. The scaling is applied per row.
   This means the x component of scale is used to scale the first row of src.
   The w component of scale is used."
  (function matrix vector matrix matrix))
(define-extern matrix-inv-scale!
  "Set dst to a homogeneous transform with only a scale.
   The x,y,z components of scale are inverted and used as the x,y,z scaling factors"
  (function matrix vector matrix))
(define-extern column-scale-matrix!
  "Scale an existing matrix. Okay for dst = src. The scaling is applied column-wise.
   Meaning the x component of scale will scale the first column of src."
  (function matrix vector matrix matrix))
(define-extern matrix-rotate-x!
  "Set dst to a homogeneous transform matrix for a rotation around the x-axis (degrees)."
  (function matrix float matrix))
(define-extern matrix-rotate-y!
  "Set dst to a homoegeneous transform matrix for a rotation around the y axis (degrees)."
  (function matrix float matrix))
(define-extern matrix-rotate-z!
  "Set dst to a homogeneous transform matrix for a rotation around the z-axis (degrees)."
  (function matrix float matrix))
(define-extern matrix-rotate-zyx! "Rotate in z,y,x order." (function matrix vector matrix))
(define-extern matrix-rotate-xyz-2!
  "Jak 1 version of matrix-rotate-xyz. Slower than the one below."
  (function matrix vector matrix))
(define-extern matrix-rotate-xyz! "Rotate in x,y,z order." (function matrix vector matrix))
(define-extern matrix-rotate-zxy! "Rotate in z,x,y order." (function matrix vector matrix))
(define-extern matrix-rotate-yxz! "Rotate in y,x,z order." (function matrix vector matrix))
(define-extern matrix-rotate-yzx! "Rotate in y,z,x order." (function matrix vector matrix))
(define-extern matrix-rotate-yxy!
  "Rotate. I believe in yxy order? Compared to the other rotations, this one
   is quite a bit more optimized and avoid repeated trig operations."
  (function matrix vector matrix))
(define-extern matrix-rotate-yx! "Rotate by y then x." (function matrix float float matrix))
(define-extern matrix-axis-sin-cos-vu!
  "Create an axis-angle rotation matrix. But given the sin/cos of the angle. Uses the VU."
  (function matrix vector float float none))
(define-extern matrix-axis-sin-cos!
  "Create an axis-angle rotation matrix. But given the sin/cos of the angle."
  (function matrix vector float float matrix))
(define-extern matrix-axis-angle! "Create an axis-angle rotation matrix." (function matrix vector float matrix))
(define-extern matrix-lerp! "Lerp an entire matrix, coefficient-wise." (function matrix matrix matrix float matrix))
(define-extern matrix-3x3-determinant "Compute the determinant of a 3x3 matrix." (function matrix float))
(define-extern matrix3-determinant "Unused. Not sure if this has limitations compared to the above version." (function matrix float))
(define-extern matrix-3x3-inverse!
  "Compute the inverse of a 3x3 matrix. Not very efficient.
   Requires src != dst."
  (function matrix matrix matrix))
(define-extern matrix-3x3-inverse-transpose!
  "Invert and transpose.
   Requires dst != src."
  (function matrix matrix matrix))
(define-extern matrix3-inverse-transpose!
  "Unused. Not sure if this has limitations compared to other version."
  (function matrix matrix matrix))
(define-extern matrix-3x3-normalize! "Unused." (function matrix matrix matrix))
(define-extern matrix-4x4-determinant
  "Take the determinant of a 4x4 matrix, but this is wrong."
  (function matrix float))
(define-extern matrix-4x4-inverse-transpose!
  "Invert and transpose an entire 4x4. I think has no restrictions, other than dst != src. Unused.
   The answer is wrong. The determinant function is wrong."
  (function matrix matrix matrix))
(define-extern matrix-y-angle
  "If mat has its upper 3x3 as a rotation, gets the y axis rotation."
  (function matrix float))
(define-extern matrix->trans "Multiply xyz by 1/w."(function matrix vector vector))
(define-extern matrix<-trans "Set the translation." (function matrix vector matrix))
(define-extern matrix->scale "Get the scale of a matrix." (function matrix vector vector))
(define-extern matrix<-scale "Set the scale of a matrix by rescaling." (function matrix vector matrix))
(define-extern matrix->quat
  "Convert matrix to quaternion, works for matrix with scale.
   unlike matrix->quaternion."
  (function matrix quaternion quaternion))
(define-extern matrix<-quat "Modify the rotation part of a transform." (function matrix quaternion matrix))
(define-extern matrix->transformq
  "Create a transformq from a matrix. Allowing scale, etc."
  (function transformq matrix transformq))
(define-extern matrix-mirror! "Make a matrix that mirrors. Arguments are unclear." (function matrix vector vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; matrix-compose                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern matrix-fur-compose (function matrix vector vector vector matrix))
(define-extern matrix-fu-compose (function matrix vector vector vector matrix))
(define-extern matrix-fr-compose (function matrix vector vector vector matrix))
(define-extern matrix-ur-compose (function matrix vector vector vector matrix))
(define-extern matrix-f-u-compose (function matrix vector vector vector matrix))
(define-extern matrix-f-r-compose (function matrix vector vector vector matrix))
(define-extern matrix-u-f-compose (function matrix vector vector vector matrix))
(define-extern matrix-u-r-compose (function matrix vector vector vector matrix))
(define-extern matrix-r-f-compose (function matrix vector vector vector matrix))
(define-extern matrix-r-u-compose (function matrix vector vector vector matrix))
(define-extern matrix-f-compose (function matrix vector vector vector matrix))
(define-extern matrix-u-compose (function matrix vector vector vector matrix))
(define-extern matrix-r-compose (function matrix vector vector vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transform                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern transform-matrix-calc!
  "Convert a transform to matrix. Not efficient, and the output is the second arg."
  (function transform matrix matrix))
(define-extern transform-matrix-parent-calc!
  "Convert a transform to a matrix, applying an inverse scaling."
  (function transform matrix vector matrix))
(define-extern trs-matrix-calc! "Convert a trs to a matrix." (function trs matrix matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; quaternion                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; quaternion is already defined!

(define-extern quaternion-axis-angle!
  "Construct a quaternion from an axis and angle. The axis should be normalized."
  (function quaternion float float float float quaternion))
(define-extern quaternion-vector-angle!
  "Construct a quaternion from an axis and angle. The axis should be normalized."
  (function quaternion vector float quaternion))
(define-extern vector-angle<-quaternion!
  "Convert the quaternion arg1 to axis-angle form and store in arg0 (angle goes in w)"
  (function vector quaternion vector))
(define-extern quaternion-look-at! "Look along arg1, with arg2 as up." (function quaternion vector vector quaternion))
(define-extern quaternion-zero! "Set quaternion to all 0's." (function quaternion quaternion))
(define-extern quaternion-identity! "Set quaternion to 0,0,0,1 (identity)." (function quaternion quaternion))
(define-extern quaternion-i! "Create unit i quaternion." (function quaternion quaternion))
(define-extern quaternion-j! "Create unit j quaternion." (function quaternion quaternion))
(define-extern quaternion-k! "Create unit k quaternion." (function quaternion quaternion))
(define-extern quaternion-copy! "Set arg0 = arg1." (function quaternion quaternion quaternion))
(define-extern quaternion-set! "Set arg0 = [arg1, arg2, arg3, arg4]." (function quaternion float float float float quaternion))
(define-extern quaternion+! "Add quaternions as vectors." (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-! "Subtract quaternions as vectors." (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-negate! "Set arg0 = -arg1." (function quaternion quaternion quaternion))
(define-extern quaternion-conjugate!
  "Set arg0 to the conjugate of arg1 (negate only ijk).
   If arg1 is normalized, this is equivalent to the inverse
   NOTE: this gives you the inverse rotation."
  (function quaternion quaternion quaternion))
(define-extern quaternion-float*! "Multiply each element." (function quaternion quaternion float quaternion))
(define-extern quaternion-float/! "Divide each element." (function quaternion quaternion float quaternion))
(define-extern quaternion-norm2 "Get the squared norm of a quaternion." (function quaternion float))
(define-extern quaternion-norm "Get the norm of a quaternion." (function quaternion float))
(define-extern quaternion-normalize! "Normalize a quaternion." (function quaternion quaternion))
(define-extern quaternion-inverse!
  "Invert a quaternion. The inverse will satisfy q * q^-1 = identity, even if q is not normalized.
   If your quaternion is normalized, it is faster/more accurate to do quaternion-conjugate!"
  (function quaternion quaternion quaternion))
(define-extern quaternion-dot
  "Treat quaternions as vectors and take the dot product."
  (function quaternion quaternion float))
(define-extern quaternion*! "Real quaternion multiplication." (function quaternion quaternion quaternion quaternion))
(define-extern quaternion-right-mult-matrix!
  "Place quaternion coefficients into a matrix.
   You can convert a quaternion to a matrix by taking the product of this
   right-mult and left-mult matrix, but this method is not used.
   Instead, quaternion->matrix is a more efficient implementation."
  (function matrix quaternion matrix))
(define-extern quaternion-left-mult-matrix!
  "Place quaternion coefficients into a matrix. Unused."
  (function matrix quaternion matrix))
(define-extern quaternion->matrix "Convert quaternion to matrix." (function matrix quaternion matrix))
(define-extern quaternion->matrix-2 "Unused alternate quaternion->matrix function." (function matrix quaternion matrix))
(define-extern matrix->quaternion "Convert a rotation matrix to a quaternion." (function quaternion matrix quaternion))
(define-extern matrix-with-scale->quaternion
  "Convert a matrix with a rotation and scale into a quaternion (just the rotation)."
  (function quaternion matrix quaternion))
(define-extern quaternion-vector-len
  "Assuming quaternion is normalized, get the length of the xyz part."
  (function quaternion float))
(define-extern quaternion-log! "Take the log of a quaternion. Unused." (function quaternion quaternion quaternion))
(define-extern quaternion-exp! "Quaternion exponentiation. Unused." (function quaternion quaternion quaternion))
(define-extern quaternion-slerp!
  "Real quaternion slerp. Spherical-linear interpolation is a nice way to interpolate
   between quaternions."
  (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-pseudo-slerp!
  "This is a bad interpolation between quaternions. It lerps then normalizes.
   It will behave extremely poorly for 180 rotations.
   It is unused."
  (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-pseudo-seek
  "Seek one quaternion toward another. Not using real slerp, so this is only good if the quaternions
   are pretty similar."
  (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-smooth-seek! "Another hacky rotation interpolation." (function quaternion quaternion quaternion float quaternion))
(define-extern quaternion-zxy!
  "Make a quaternion from a sequence of z, x, y axis rotations."
  (function quaternion vector quaternion))
(define-extern vector-x-quaternion!
  "Get the first row of the rotation matrix for this quaternion."
  (function vector quaternion vector))
(define-extern vector-y-quaternion!
  "Get the second row of the rotation matrix for this quaternion."
  (function vector quaternion vector))
(define-extern vector-z-quaternion!
  "Get the third row of the rotation matrix for this quaternion."
  (function vector quaternion vector))
(define-extern quaternion-x-angle
  "Get the x rotation angle. Not very efficient."
  (function quaternion float))
(define-extern quaternion-y-angle
  "Get the y rotation angle. Not very efficient."
  (function quaternion float))
(define-extern quaternion-z-angle
  "Get the z rotation angle. Not very efficient."
  (function quaternion float))
(define-extern quaternion-vector-y-angle
  "Not sure. Angle between quaternion and axis, projected in xz plane?"
  (function quaternion vector float))
(define-extern quaternion-rotate-local-x!
  "Rotate existing quaternion along x axis."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-y!
  "Rotate existing quaternion along y axis."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-local-z!
  "Rotate existing quaternion along z axis."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-y!
  "Rotate existing quaternion along y axis (right multiply)."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-x!
  "Rotate existing quaternion along x axis (right multiply)."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-rotate-z!
  "Rotate existing quaternion along z axis (right multiply)."
  (function quaternion quaternion float quaternion))
(define-extern quaternion-delta-y "Difference in yaw between two quaternions." (function quaternion quaternion float))
(define-extern quaternion-rotate-y-to-vector! (function quaternion quaternion quaternion float quaternion))
(define-extern vector-rotate-around-axis!
  "Rotate along y so z-axis points to match another. Use arg3 as the max rotation amount."
  (function vector quaternion float vector vector))
(define-extern vector-rotate-x! "Rotate vector along x axis." (function vector vector float vector))
(define-extern vector-rotate-y! "Rotate vector along y axis." (function vector vector float vector))
(define-extern vector-rotate-z! "Rotate vector along z axis." (function vector vector float vector))
(define-extern vector-y-angle "Get the yaw angle of a vector." (function vector float))
(define-extern vector-x-angle "Get the pitch angle of a vector." (function vector float))
(define-extern quaternion<-rotate-y-vector "Create a quaternion representing only the yaw of the given vector." (function quaternion vector quaternion))
(define-extern quaternion-validate
  "Verify that a quaternion is valid, print an error if the length is off by more than 1%.."
  (function quaternion none))
(define-extern quaternion-xz-angle
  "Yet another function to compute the yaw of a quaternion. This is a particularly inefficient version."
  (function quaternion float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; euler                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-eul! "Set euler angles and the flag bits." (function euler-angles float float float int euler-angles))
(define-extern eul->matrix "Convert from euler angles to 4x4 matrix." (function matrix euler-angles matrix))
(define-extern matrix->eul
  "Convert matrix to euler angles with given order flag.
   Not clear how this works if the matrix has more than just a rotation."
  (function euler-angles matrix int euler-angles))
(define-extern eul->quat
  "Convert euler angles to quaternion, not very efficient."
  (function quaternion euler-angles quaternion))
(define-extern quat->eul
  "Convert quaternion to euler angles with given order, not very efficient."
  (function euler-angles quaternion int euler-angles))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trigonometry                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern radmod "Wrap arg0 to be within (-pi, pi)." (function float float))
(define-extern deg-
  "Compute arg0-arg1, unwrapped, using rotation units.
   Result should be in the range (-180, 180)"
  (function float float float))
(define-extern deg-diff
  "Very similar to the function above, but computes arg1 - arg0 instead."
  (function float float float))
(define-extern deg-seek
  "Move in toward target by at most max-diff, using rotation units"
  (function float float float float))
(define-extern deg-seek-smooth
  "Step amount of the way from in to target, by at most max-diff, using rotation units"
  (function float float float float float))
(define-extern deg-lerp-clamp
  "Map [0, 1] to min-val, max-val, handling wrapping and saturating, using rotation units."
  (function float float float float))
(define-extern binary-table (array float))
(define-extern sincos-table (array float))
(define-extern sin
  "Compute the sine of an angle in rotation units. Unwraps it."
  (function float float))
(define-extern sin-rad
  "Compute the sine of an angle in radians.
   No unwrap is done, should be in -pi, pi"
  (function float float))
(define-extern *sin-poly-vec* vector)
(define-extern *sin-poly-vec2* vector)
(define-extern vector-sin-rad!
  "Taylor series approximation of sine on all 4 elements in a vector.
   Inputs should be in radians, in -pi to pi.
   Somehow their coefficients are a little bit off.
   Like the first coefficient, which should obviously be 1, is not quite 1."
  (function vector vector vector))
(define-extern cos-rad
  "Cosine with taylor series. Input is in radians, in -pi, pi.
   - TODO constants"
  (function float float))
(define-extern *cos-poly-vec* vector)
(define-extern vector-cos-rad!
  "Compute the cosine of all 4 vector elements.
   Radians, with no wrapping. Uses taylor series with 4 coefficients."
  (function vector vector vector))
(define-extern vector-sincos-rad!
  "Compute the sine and cosine of each element of src, storing it in dst-sin and dst-cos.
   This is more efficient than separate calls to sin and cos.
   Inputs should be radians in -pi to pi."
  (function vector vector vector int))
(define-extern sincos-rad!
  "Compute the sine and cosine of x, store it in the output array.
   Has the cosine bug."
  (function vector float int))
(define-extern sincos!
  "Compute the sine and cosine of x, store it in the output array.
   The input is in rotation units, and is unwrapped properly.
   Also has the cosine bug"
  (function vector float int))
(define-extern vector-rad<-vector-deg!
  "Convert a vector in rotation units to radians, and unwrap.
   Input can be anything, output will be -2pi to pi."
  (function vector vector none))
(define-extern vector-rad<-vector-deg/2!
  "Divide the input by two, and then convert from rotation units to radians, unwrapping.
   Not sure why this really needs to be separate the from previous function..."
  (function vector vector int))
(define-extern vector-sincos!
  "Compute sine and cosine of each element in a vector, in rotation units"
  (function vector vector vector int))
(define-extern tan-rad
  "This function appears to be named wrong and actually operates on rotation units."
  (function float float))
(define-extern cos "Cosine of rotation units." (function float float))
(define-extern tan "Correctly named tangent of rotation units." (function float float))
(define-extern atan0
  "Inverse tangent, to rotation units. y,x order. Does not handle signs correctly.
   Do not use this function directly, instead use atan2."
  (function float float float))
(define-extern atan-series-rad "A helper function for atan." (function float float))
(define-extern atan-rad "Inverse tangent in radians." (function float float))
(define-extern sign-bit "Return 1 if bit 31 is set, otherwise 0." (function int int))
(define-extern sign-float
  "Return 1 if arg0 is positive or zero, -1 otherwise.
   Fast (no branching)."
  (function float float))
(define-extern sign
  "Similar to above, but returns 0 if input is 0.
   But is more complicated."
  (function float float))
(define-extern atan2-rad "Atan for radians." (function float float float))
(define-extern atan "Atan for rotation units. Signs behave like atan.." (function float float float))
(define-extern asin "Inverse sine, rotation units." (function float float))
(define-extern acos "Inverse cosine. Returns rotation units." (function float float))
(define-extern acos-rad "Inverse cosine, radians." (function float float))
(define-extern sinerp
  "Map amount to min,max using sine. Kinda weird, usually people use cosine."
  (function float float float float))
(define-extern sinerp-clamp "Like sinerp, but clamp to min,max." (function float float float float))
(define-extern coserp "Weird lerp with cosine (over 90 degrees?)." (function float float float float))
(define-extern coserp-clamp
  "Weird 90 degree lerp with cosine, clamped to min,max."
  (function float float float float))
(define-extern coserp180 "Classic lerp with cosine." (function float float float float))
(define-extern coserp180-clamp "Classic coserp with saturation." (function float float float float))
(define-extern ease-in-out
  "Weird coserp like mapping from 0 to 1 as progress goes from 0 to total."
  (function int int float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gsound-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum sound-command
  :type uint16
  (iop-store)
  (iop-free)
  (load-bank)
  (load-bank-from-iop)
  (load-bank-from-ee)
  (load-music)
  (unload-bank)
  (play)
  (pause-sound)
  (stop-sound)
  (continue-sound)
  (set-param)
  (set-master-volume)
  (pause-group)
  (stop-group)
  (continue-group)
  (get-irx-version)
  (set-falloff-curve)
  (set-sound-falloff)
  (reload-info)
  (set-language)
  (set-flava)
  (set-midi-reg)
  (set-reverb)
  (set-ear-trans)
  (shutdown)
  (list-sounds)
  (unload-music)
  (set-fps)
  (boot-load)
  (game-load)
  (num-tests)
  (num-testruns)
  (num-sectors)
  (num-streamsectors)
  (num-streambanks)
  (track-pitch)
  (linvel-nom)
  (linvel-stm)
  (seek-nom)
  (seek-stm)
  (read-seq-nom)
  (read-seq-stm)
  (read-spr-nom)
  (read-spr-stm)
  (read-spr-strn-nom)
  (rand-stm-abort)
  (rand-nom-abort)
  (iop-mem)
  (cancel-dgo)
  (set-stereo-mode)
  )

;; +++gsound-h:sound-group
(defenum sound-group
  :bitfield #t
  :type uint8
  (sfx)
  (music)
  (dialog) ;; same as jak 1 dialog
  (sog3)
  (ambient)
  (dialog2) ;; more dialog
  (special)
  (sog7)
  )
;; ---gsound-h:sound-group

(defenum sound-mask
  :bitfield #t
  :type uint16
  (volume)    ;; 1
  (pitch)     ;; 2
  (bend)      ;; 4
  (unused)    ;; 8
  (time)      ;; 10
  (trans)     ;; 20
  (fo-min)    ;; 40
  (fo-max)    ;; 80
  (fo-curve)  ;; 100
  (sm-unk1)
  (sm-unk2)
  (reg0)
  (reg1)
  (reg2)
  (unk)
  )

(defenum stream-status
  :type uint32
  :bitfield #t
  (ss1 1) ;; id-is-playing
  (ss4 4) ;; is-playing
  (ss6 6) ;; id-is-playing
  (ss9 9)
  )

(deftype sound-stream-name (structure)
  ((name uint8 48 :offset-assert 0) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-id (uint32)
  ()
  (:methods
    (unknown () none)
    )
  :flag-assert #xa00000004
  )

(deftype sound-bank-id (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype sound-name (uint128)
  ((lo  uint64  :offset 0) ;; added to help with cases where they access it by u64.
   (hi  uint64  :offset 64)
   )
  :flag-assert #x900000010
  )

(deftype sound-rpc-cmd (structure)
  ((rsvd1   uint16  :offset-assert 0)
   (command sound-command  :offset-assert 2) ;; sound-command
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-play-params (structure)
  ((mask      uint16   :offset-assert 0)
   (pitch-mod int16    :offset-assert 2)
   (bend      int16    :offset-assert 4)
   (fo-min    int16    :offset-assert 6)
   (fo-max    int16    :offset-assert 8)
   (fo-curve  int8     :offset-assert 10)
   (priority  int8     :offset-assert 11)
   (volume    int32    :offset-assert 12)
   (trans     int32  3 :offset-assert 16) ;; guessed by decompiler
   (group     uint8    :offset-assert 28)
   (reg       uint8  3 :offset-assert 29) ;; guessed by decompiler
   (group-and-reg uint32 :overlay-at group)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-bank-cmd (sound-rpc-cmd)
  ((bank-name sound-name  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-test-cmd (sound-rpc-cmd)
  ((ee-addr pointer  :offset-assert 4) ;; guessed by decompiler
   (param0  uint16   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-sound-cmd (sound-rpc-cmd)
  ((id sound-id  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-group-cmd (sound-rpc-cmd)
  ((group uint32  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-load-bank (sound-rpc-bank-cmd)
  ((ee-addr  pointer  :offset-assert 32) ;; guessed by decompiler
   (mode     uint32   :offset-assert 36)
   (priority uint32   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sound-rpc-load-music (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-unload-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-play (sound-rpc-sound-cmd)
  ((name   sound-name                :offset-assert 16)
   (params sound-play-params :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sound-rpc-pause-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-param (sound-rpc-sound-cmd)
  ((params    sound-play-params :inline :offset-assert 8)
   (auto-time int32                     :offset-assert 40)
   (auto-from int32                     :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-set-master-volume (sound-rpc-group-cmd)
  ((volume int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-pause-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-cancel-dgo (sound-rpc-group-cmd)
  ((id uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-get-irx-version (sound-rpc-cmd)
  ((major   uint32   :offset-assert 4)
   (minor   uint32   :offset-assert 8)
   (ee-addr pointer  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-language (sound-rpc-cmd)
  ((lang uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-stereo-mode (sound-rpc-cmd)
  ((mode int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-reverb (sound-rpc-cmd)
  ((core   uint8   :offset-assert 4)
   (reverb int32   :offset-assert 8)
   (left   uint32  :offset-assert 12)
   (right  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype sound-rpc-set-ear-trans (sound-rpc-cmd)
  ((ear-trans1   int32   3 :offset-assert 4) ;; guessed by decompiler
   (ear-trans0   int32   3 :offset-assert 16) ;; guessed by decompiler
   (cam-trans    int32   3 :offset-assert 28) ;; guessed by decompiler
   (cam-forward  int32 3   :offset-assert 40)
   (cam-left     int32 3   :offset-assert 52)
   (cam-scale    int32     :offset-assert 64)
   (cam-inverted int32     :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype sound-rpc-set-flava (sound-rpc-cmd)
  ((flava      uint8  :offset-assert 4)
   (excitement uint8  :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype sound-rpc-set-midi-reg (sound-rpc-cmd)
  ((reg   int32  :offset-assert 4)
   (value int16  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-shutdown (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-fps (sound-rpc-cmd)
  ((fps uint8  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-list-sounds (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-unload-music (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-union (structure)
  ((data              uint32                      20 :offset-assert 0) ;; guessed by decompiler
   (load-bank         sound-rpc-load-bank            :offset-assert 0 :overlay-at data)
   (unload-bank       sound-rpc-unload-bank          :offset-assert 0 :overlay-at data)
   (play              sound-rpc-play                 :offset-assert 0 :overlay-at data)
   (pause-sound       sound-rpc-pause-sound          :offset-assert 0 :overlay-at data)
   (stop-sound        sound-rpc-stop-sound           :offset-assert 0 :overlay-at data)
   (continue-sound    sound-rpc-continue-sound       :offset-assert 0 :overlay-at data)
   (set-param         sound-rpc-set-param            :offset-assert 0 :overlay-at data)
   (set-master-volume sound-rpc-set-master-volume    :offset-assert 0 :overlay-at data)
   (pause-group       sound-rpc-pause-group          :offset-assert 0 :overlay-at data)
   (stop-group        sound-rpc-stop-group           :offset-assert 0 :overlay-at data)
   (continue-group    sound-rpc-continue-group       :offset-assert 0 :overlay-at data)
   (get-irx-version   sound-rpc-get-irx-version      :offset-assert 0 :overlay-at data)
   (set-language      sound-rpc-set-language         :offset-assert 0 :overlay-at data)
   (set-reverb        sound-rpc-set-reverb           :offset-assert 0 :overlay-at data)
   (set-ear-trans     sound-rpc-set-ear-trans        :offset-assert 0 :overlay-at data)
   (set-flava         sound-rpc-set-flava            :offset-assert 0 :overlay-at data)
   (set-midi-reg      sound-rpc-set-midi-reg         :offset-assert 0 :overlay-at data)
   (set-fps           sound-rpc-set-fps              :offset-assert 0 :overlay-at data)
   (shutdown          sound-rpc-shutdown             :offset-assert 0 :overlay-at data)
   (list-sounds       sound-rpc-list-sounds          :offset-assert 0 :overlay-at data)
   (unload-music      sound-rpc-unload-music         :offset-assert 0 :overlay-at data)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sound-spec (basic)
  (
   (mask       sound-mask    :offset-assert 4) ;; sound-mask
   (num        float     :offset-assert 8)
   (group      sound-group     :offset-assert 12) ;;
   (reg        uint8   3 :offset-assert 13) ;; guessed by decompiler
   (group-and-reg uint32 :offset 12)
   ;; (UNKNOWN    UNKNOWN   :offset-assert -1) ;; field could not be read.
   (sound-name-char  uint8       16 :offset-assert 16)
   (sound-name sound-name   :offset-assert 16 :overlay-at sound-name-char) ;;
   (trans      int32   4 :offset-assert 32) ;; guessed by decompiler
   (volume     int32     :offset-assert 48)
   (pitch-mod  int32     :offset-assert 52)
   (bend       int32     :offset-assert 56)
   (fo-min     int16     :offset-assert 60)
   (fo-max     int16     :offset-assert 62)
   (fo-curve   int8      :offset-assert 64)
   (priority   int8      :offset-assert 65)
   (auto-time  int32     :offset-assert 68)
   (auto-from  int32     :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype sound-bank-state (structure)
  ((name symbol   :offset-assert 0)
   (mode uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ambient-sound (basic)
  ((spec         sound-spec              :offset-assert 4) ;; guessed by decompiler
   (playing-id   sound-id                :offset-assert 8) ;; guessed by decompiler
   (trans        vector          :inline :offset-assert 16)
   (name         sound-name              :offset-assert 32) ;; sound-name
   (play-time    time-frame              :offset-assert 48) ;; time-frame
   (time-base    time-frame              :offset-assert 56) ;; time-frame
   (time-random  time-frame              :offset-assert 64) ;; time-frame
   (volume       int32                   :offset-assert 72)
   (pitch        int32                   :offset-assert 76)
   (falloff-near int32                   :offset-assert 80)
   (falloff-far  int32                   :offset-assert 84)
   (falloff-mode int32                   :offset-assert 88)
   (params       (pointer float)         :offset-assert 92) ;; guessed by decompiler
   (param-count  int32                   :offset-assert 96)
   (entity       entity                  :offset-assert 100) ;; guessed by decompiler
   (sound-count  int32                   :offset-assert 104)
   (sound-state  int32                   :offset-assert 108)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  (:methods
    (new "Set up ambient-sound. Can use an entity-actor (grabs from lump), sound-spec, or name as a string." (symbol type basic vector float) _type_) ;; 0
    (update! "Per-frame update of ambient sound." (_type_) int) ;; 9
    (change-sound! "Change the sound being played." (_type_ sound-name) int) ;; 10
    (update-trans! "Change the trans of the sound." (_type_ vector) int) ;; 11
    (update-vol! "Change the volume of the sound." (_type_ float) int) ;; 12
    (update-pitch-mod! (_type_ float) none) ;; 13
    (set-falloff-far! (_type_ float) none) ;; 14
    (set-falloff-mode! (_type_ int) none) ;; 15
    (stop! (_type_) int) ;; 16
    )
  )

(define-extern *current-sound-id* sound-id)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; timer-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum timer-clock-selection
  :type uint8
  (busclk 0)
  (busclk/16 1)
  (busclk/256 2)
  (hblank 3)
  )

(deftype timer-mode (uint32)
  "This matches the Tn_MODE register structure of the ps2 EE timers.
   Only the lower 32 bits of these registers are usable, and the upper 16 hardwired to zero."
  ((clks  timer-clock-selection :offset 0 :size 2)
   (gate  uint8 :offset 2 :size 1) ;; gate function enable
   (gats  uint8 :offset 3 :size 1) ;; gate selection: 0 = hblank, 1 = vblank
   ;; gate mode:
   ;;  0: count while gate signal is low
   ;;  1: start when gate signal rises
   ;;  2: start when gate signal falls
   ;;  3: start when gate signal rises/falls
   (gatm  uint8 :offset 4 :size 2)
   (zret  uint8 :offset 6 :size 1) ;; zero return: clear counter when equal to reference value
   (cue   uint8 :offset 7 :size 1) ;; count-up enable
   (cmpe  uint8 :offset 8 :size 1) ;; compare-interrupt enable
   (ovfe  uint8 :offset 9 :size 1) ;; overflow-interrupt enable
   (equf  uint8 :offset 10 :size 1) ;; equal-flag
   (ovff  uint8 :offset 11 :size 1) ;; overflow-flag
   )
  )

(deftype timer-bank (structure)
  "This matches an EE timer (without a HOLD register, timers 2 and 3).
   Each register is 128-bits wide, but only the lower 32-bits are usable, and the upper
   16-bits of that are hardwired to zero."
  ((count uint32      :offset-assert 0)
   (mode  timer-mode  :offset 16)
   (comp  uint32      :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype timer-hold-bank (timer-bank)
  "This matches an EE timer (with a HOLD register, timers 0 and 1)."
  ((hold uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype stopwatch (basic)
  "Stopwatches are used to measure CPU clock cycles.
   They don't use the timer above, but instead the Count COP0 register,
   which counts CPU clock cycles directly."
  ((prev-time-elapsed time-frame  :offset-assert 8)
   (start-time        time-frame  :offset-assert 16)
   (begin-level       int32       :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(define-extern *ticks-per-frame* int)
(define-extern timer-init
  "Initiate a timer, start counting at a rate of 1 every 256 bus clocks (BUSCLK: ~147.456MHz)."
  (function timer-bank timer-mode int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vif-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vif-stat (uint32)
  ((vps uint8 :offset 0 :size 2)
   (vew uint8 :offset 2 :size 1)
   (mrk uint8 :offset 6 :size 1)
   (vss uint8 :offset 8 :size 1)
   (vfs uint8 :offset 9 :size 1)
   (vis uint8 :offset 10 :size 1)
   (int uint8 :offset 11 :size 1)
   (er0 uint8 :offset 12 :size 1)
   (er1 uint8 :offset 13 :size 1)
   (fqc uint8 :offset 24 :size 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-fbrst (uint32)
  ((rst uint8 :offset 0 :size 1)
   (fbk uint8 :offset 1 :size 1)
   (stp uint8 :offset 2 :size 1)
   (stc uint8 :offset 3 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-err (uint32)
  ((mii uint8 :offset 0 :size 1)
   (me0 uint8 :offset 1 :size 1) ;; PS2 hardware bug, must set this to 1 for correct operation.
   (me1 uint8 :offset 2 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vif-bank (structure)
  ((stat   uint32  :offset-assert 0)
   (fbrst  uint32  :offset 16)
   (err    vif-err :offset 32)
   (mark   uint32  :offset 48)
   (cycle  uint32  :offset 64)
   (mode   uint32  :offset 80)
   (num    uint32  :offset 96)
   (mask   uint32  :offset 112)
   (code   uint32  :offset 128)
   (itops  uint32  :offset 144)
   (base   uint32  :offset 160)
   (offset uint32  :offset 176)
   (tops   uint32  :offset 192)
   (itop   uint32  :offset 208)
   (top    uint32  :offset 224)
   (r0     uint32  :offset 256)
   (r1     uint32  :offset 272)
   (r2     uint32  :offset 288)
   (r3     uint32  :offset 304)
   (c0     uint32  :offset 320)
   (c1     uint32  :offset 336)
   (c2     uint32  :offset 352)
   (c3     uint32  :offset 368)
   )
  :method-count-assert 9
  :size-assert         #x174
  :flag-assert         #x900000174
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dma-chcr (uint32)
  "Memory mapped DMA channel control register. Typically used to start and check on DMA transfer."
  ((dir uint8 :offset 0 :size 1)
   (mod uint8 :offset 2 :size 2)
   (asp uint8 :offset 4 :size 2)
   (tte uint8 :offset 6 :size 1)
   (tie uint8 :offset 7 :size 1)
   (str uint8 :offset 8 :size 1)
   (tag uint16 :offset 16 :size 16)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype dma-bank (structure)
  "Bank of memory mapped DMA registers for a single channel. Used to control DMA."
  ((chcr dma-chcr  :offset 0) ;; guessed by decompiler
   (madr uint32    :offset 16)
   (qwc  uint32    :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype dma-bank-source (dma-bank)
  "DMA channel registers for a DMA channel supporting source-chain."
  ((tadr uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype dma-bank-vif (dma-bank-source)
  "DMA channel registers for a DMA channel with call/ret stack."
  ((as0 uint32  :offset 64)
   (as1 uint32  :offset 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

(deftype dma-bank-spr (dma-bank-source)
  "DMA channel registers for a DMA channel supporting scratchpad transfer."
  ((sadr uint32  :offset 128)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype dma-ctrl (uint32)
  "Main DMA control register, shared for all channels."
  ((dmae uint8 :offset   0 :size   1)
   (rele uint8 :offset   1 :size   1)
   (mfd  uint8 :offset   2 :size   2)
   (sts  uint8 :offset   4 :size   2)
   (std  uint8 :offset   6 :size   2)
   (rcyc uint8 :offset   8 :size   3)
   )
  :flag-assert #x900000004
  )

(deftype dma-enable (uint32)
  ((cpnd uint8 :offset  16 :size   1)
   )
  :flag-assert #x900000004
  )

(deftype dma-sqwc (uint32)
  ((sqwc uint8 :offset   0 :size   8)
   (tqwc uint8 :offset  16 :size   8)
   )
  :flag-assert #x900000004
  )

(deftype dma-bank-control (structure)
  "Memory mapping for shared DMA registers."
  ((ctrl    dma-ctrl  :offset 0) ;; guessed by decompiler
   (stat    uint32    :offset 16)
   (pcr     uint32    :offset 32)
   (sqwc    dma-sqwc  :offset 48) ;; guessed by decompiler
   (rbsr    uint32    :offset 64)
   (rbor    uint32    :offset 80)
   (stadr   uint32    :offset 96)
   (enabler uint32    :offset 5408)
   (enablew uint32    :offset 5520)
   )
  :method-count-assert 9
  :size-assert         #x1594
  :flag-assert         #x900001594
  )

(deftype vu-code-block (basic)
  "Unused type for some VU code. vu-function is used instead."
  ((name         basic   :offset-assert 4)
   (code         uint32  :offset-assert 8)
   (size         int32   :offset-assert 12)
   (dest-address uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype vu-stat (uint64)
  ()
  :flag-assert #x900000008
  )

(defenum dma-tag-id
    :bitfield #f
    :type uint8
    (refe 0) ;; addr=ADDR, ends after this transfer
    (cnt 1)  ;; addr=after tag, next-tag=after data
    (next 2) ;; addr=after tag, next-tag=ADDR
    (ref 3)  ;; addr=ADDR, next-tag=after tag
    (refs 4) ;; ref, but stall controled
    (call 5) ;;
    (ret 6)  ;;
    (end 7)  ;; next, but ends.
    )

(deftype dma-tag (uint64)
  "The 64-bit tag used by the DMA system."
  ((qwc  uint16     :offset   0 :size  16)
   (pce  uint8      :offset  26 :size   2)
   (id   dma-tag-id :offset  28 :size   3)
   (irq  uint8      :offset  31 :size   1)
   (addr uint32     :offset  32 :size  31)
   (spr  uint8      :offset  63 :size   1)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype dma-bucket (structure)
  "A linked list of DMA data, typically all in the same category. Used to organize the full DMA chain."
  ((tag   dma-tag            :offset-assert 0)
   (last  (pointer dma-tag)  :offset-assert 8) ;; guessed by decompiler
   (dummy uint32             :offset-assert 12)
   (next  uint32             :offset 4)
   (clear uint64             :offset-assert 8 :overlay-at last)
   (vif0  uint32             :offset-assert 8  :overlay-at last)
   (vif1  uint32             :offset-assert 12 :overlay-at dummy)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vif-mask (uint32)
  ((m0  uint8 :offset   0 :size   2)
   (m1  uint8 :offset   2 :size   2)
   (m2  uint8 :offset   4 :size   2)
   (m3  uint8 :offset   6 :size   2)
   (m4  uint8 :offset   8 :size   2)
   (m5  uint8 :offset  10 :size   2)
   (m6  uint8 :offset  12 :size   2)
   (m7  uint8 :offset  14 :size   2)
   (m8  uint8 :offset  16 :size   2)
   (m9  uint8 :offset  18 :size   2)
   (m10 uint8 :offset  20 :size   2)
   (m11 uint8 :offset  22 :size   2)
   (m12 uint8 :offset  24 :size   2)
   (m13 uint8 :offset  26 :size   2)
   (m14 uint8 :offset  28 :size   2)
   (m15 uint8 :offset  30 :size   2)
   )
  :flag-assert #x900000004
  )

(deftype vif-stcycl-imm (uint16)
  "The imm field of a VIF code using STCYCL, which adjusts the pattern for storing data."
  ((cl uint8 :offset   0 :size   8)
   (wl uint8 :offset   8 :size   8)
   )
  :flag-assert #x900000002
  )

(deftype vif-unpack-imm (uint16)
  "The imm field of a VIF code using UNPACK, which transfers data to VU memory."
  ((addr uint16 :offset   0 :size  10)
   (usn  uint8  :offset  14 :size   1)
   (flg  uint8  :offset  15 :size   1)
   )
  :flag-assert #x900000002
  )

;; all these have mask (only applies to unpacks) and interrupt not set.
(defenum vif-cmd
    :bitfield #f
    :type uint8
    (nop          0)  ;; no-op, can still have irq set.
    (stcycl       1)  ;; set write recycle register
    (offset       2)  ;; set offset register
    (base         3)  ;; set base register
    (itop         4)  ;; set data pointer register (itops)
    (stmod        5)  ;; set mode register
    (mskpath3     6)  ;; set path 3 mask
    (mark         7)  ;; set mark register
    (pc-port      8)  ;; special tag for PC Port data.
    (flushe       16) ;; wait for end of microprogram
    (flush        17) ;; wait for end of microprogram and transfer (path1/path2)
    (flusha       19) ;; wait for end of microprogram and transfer (path1/path2/path3)
    (mscal        20) ;; activate microprogram (call)
    (mscalf       21) ;; flushe and activate (call)
    (mscnt        23) ;; activate microprogram (continue)
    (stmask       32) ;; set MASK register.
    (strow        48) ;; set filling data
    (stcol        49) ;; set filling data
    (mpg          74) ;; transfer microprogram
    (direct       80) ;; straight to GIF.
    (directhl     81)
    (unpack-s-32  96)
    (unpack-s-16  97)
    (unpack-s-8   98)
    ;; 99 is invllid
    (unpack-v2-32 100)
    (unpack-v2-16 101)
    (unpack-v2-8  102)
    ;; 103 is invalid
    (unpack-v3-32 104)
    (unpack-v3-16 105)
    (unpack-v3-8  106)
    ;; 107 is invalid
    (unpack-v4-32 108)
    (unpack-v4-16 109)
    (unpack-v4-8  110)
    (unpack-v4-5  111)
    (cmd-mask     239) ;; not sure what this is.
    )

;; this makes a copy of the above type, but uses a uint32.
(defenum vif-cmd-32
    :bitfield #f
    :type uint32
    :copy-entries vif-cmd
    )

(deftype vif-tag (uint32)
  "A tag consumed by the VIF, which accepts DMA data."
  ((imm uint16  :offset   0 :size  16)
   (num uint8   :offset  16 :size   8)
   (cmd vif-cmd :offset  24 :size   7)
   (irq uint8   :offset  31 :size   1)
   (msk uint8   :offset  28 :size   1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern dma-sync-fast (function dma-bank none))
(define-extern dma-send-no-scratch (function dma-bank uint32 uint32 none))
(define-extern dma-sync-with-count (function dma-bank (pointer int32) int))
(define-extern dma-count-until-done (function dma-bank (pointer int32) int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; video-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype video-params (structure)
  "Parameters for the framebuffer."
  ((set-video-mode              symbol  :offset-assert 0) ;; guessed by decompiler
   (reset-video-mode            symbol  :offset-assert 4) ;; guessed by decompiler
   (display-fbp                 int32   :offset-assert 8)
   (relative-x-scale            float   :offset 16)
   (display-dx                  int32   :offset-assert 20)
   (display-dy                  int32   :offset-assert 24)
   (display-sy                  int32   :offset-assert 28)
   (relative-x-scale-reciprical float   :offset-assert 32)
   (screen-pages-high           int32   :offset-assert 36)
   (smode2                      uint64  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(define-extern *video-params* video-params) ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vu1-user-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++vu1-user-h:tpage-category
(defenum tpage-category
  :type int8
  (tfrag 0) ;;
  (pris 1)
  (shrub 2)
  (alpha 3)
  (water 4)
  (warp 5)
  (pris2 6)
  (sprite 7)
  (hud 8) ;; or map?
  (sky 9)
  (hfrag 10)
  )
;; ---vu1-user-h:tpage-category

;; +++vu1-user-h:tpage-category-u32
(defenum tpage-category-u32
  :type uint32
  :copy-entries tpage-category
  )
;; ---vu1-user-h:tpage-category-u32

;; +++vu1-user-h:bucket-id
;; <renderer>-l<level>-<tpage>
(defenum bucket-id
  :type int32
  (bucket0 0)
  (bucket1 1)
  (bucket2 2)
  (bucket3 3) ;; blit?
  (tex-lcom-sky-pre 4)
  (bucket5 5) ;; sky
  (bucket6 6) ;; ocean
  (bucket7 7) ;; unknown new jak 3 texture upload, for all levels.
  (bucket8 8) ;; hfrag
  (bucket9 9) ;; hfrag

  (tex-l0-tfrag 10) ;; texture
  (bucket11 11)     ;; tfrag
  (bucket12 12)     ;; tie
  (bucket13 13)     ;; tie
  (bucket14 14)     ;; tfrag
  (bucket15 15)     ;; tie
  (bucket16 16)     ;; tie
  (merc-l0-tfrag 17)     ;; merc
  (emerc-l0-tfrag 18)     ;; emerc
  (gmerc-l0-tfrag 19)     ;; generic
  (bucket20 20)     ;; tie
  (gmerc2-l0-tfrag 21)     ;; generic

  (tex-l1-tfrag 22)
  (bucket23 23)
  (bucket24 24)
  (bucket25 25)
  (bucket26 26)
  (bucket27 27)
  (bucket28 28)
  (merc-l1-tfrag 29)
  (emerc-l1-tfrag 30)
  (gmerc-l1-tfrag 31)
  (bucket32 32)
  (gmerc2-l1-tfrag 33)

  (tex-l2-tfrag 34)
  (bucket35 35)
  (bucket36 36)
  (bucket37 37)
  (bucket38 38)
  (bucket39 39)
  (bucket40 40)
  (merc-l2-tfrag 41)
  (emerc-l2-tfrag 42)
  (gmerc-l2-tfrag 43)
  (bucket44 44)
  (gmerc2-l2-tfrag 45)

  (tex-l3-tfrag 46)
  (bucket47 47)
  (bucket48 48)
  (bucket49 49)
  (bucket50 50)
  (bucket51 51)
  (bucket52 52)
  (merc-l3-tfrag 53)
  (emerc-l3-tfrag 54)
  (gmerc-l3-tfrag 55)
  (bucket56 56)
  (gmerc2-l3-tfrag 57)

  (tex-l4-tfrag 58)
  (bucket59 59)
  (bucket60 60)
  (bucket61 61)
  (bucket62 62)
  (bucket63 63)
  (bucket64 64)
  (merc-l4-tfrag 65)
  (emerc-l4-tfrag 66)
  (gmerc-l4-tfrag 67)
  (bucket68 68)
  (gmerc2-l4-tfrag 69)

  (tex-l5-tfrag 70)
  (bucket71 71)
  (bucket72 72)
  (bucket73 73)
  (bucket74 74)
  (bucket75 75)
  (bucket76 76)
  (merc-l5-tfrag 77)
  (emerc-l5-tfrag 78)
  (gmerc-l5-tfrag 79)
  (bucket80 80)
  (gmerc2-l5-tfrag 81)

  (tex-l6-tfrag 82)
  (bucket83 83)
  (bucket84 84)
  (bucket85 85)
  (bucket86 86)
  (bucket87 87)
  (bucket88 88)
  (merc-l6-tfrag 89)
  (emerc-l6-tfrag 90)
  (gmerc-l6-tfrag 91)
  (bucket92 92)
  (gmerc2-l6-tfrag 93)

  (tex-l7-tfrag 94)
  (bucket95 95)
  (bucket96 96)
  (bucket97 97)
  (bucket98 98)
  (bucket99 99)
  (bucket100 100)
  (merc-l7-tfrag 101)
  (emerc-l7-tfrag 102)
  (gmerc-l7-tfrag 103)
  (bucket104 104)
  (gmerc2-l7-tfrag 105)

  (tex-l8-tfrag 106)
  (bucket107 107)
  (bucket108 108)
  (bucket109 109)
  (bucket110 110)
  (bucket111 111)
  (bucket112 112)
  (merc-l8-tfrag 113)
  (emerc-l8-tfrag 114)
  (gmerc-l8-tfrag 115)
  (bucket116 116)
  (gmerc2-l8-tfrag 117)

  (tex-l9-tfrag 118)
  (bucket119 119)
  (bucket120 120)
  (bucket121 121)
  (bucket122 122)
  (bucket123 123)
  (bucket124 124)
  (merc-l9-tfrag 125)
  (emerc-l9-tfrag 126)
  (gmerc-l9-tfrag 127)
  (bucket128 128)
  (gmerc2-l9-tfrag 129)

  (tex-l0-shrub 130)
  (bucket131 131)
  (bucket132 132)
  (bucket133 133)
  (bucket134 134)
  (bucket135 135)
  (merc-l0-shrub 136)
  (emerc-l0-shrub 137)
  (gmerc-l0-shrub 138)
  (gmerc2-l0-shrub 139)

  (tex-l1-shrub 140)
  (bucket141 141)
  (bucket142 142)
  (bucket143 143)
  (bucket144 144)
  (bucket145 145)
  (merc-l1-shrub 146)
  (emerc-l1-shrub 147)
  (gmerc-l1-shrub 148)
  (gmerc2-l1-shrub 149)

  (tex-l2-shrub 150)
  (bucket151 151)
  (bucket152 152)
  (bucket153 153)
  (bucket154 154)
  (bucket155 155)
  (merc-l2-shrub 156)
  (emerc-l2-shrub 157)
  (gmerc-l2-shrub 158)
  (gmerc2-l2-shrub 159)

  (tex-l3-shrub 160)
  (bucket161 161)
  (bucket162 162)
  (bucket163 163)
  (bucket164 164)
  (bucket165 165)
  (merc-l3-shrub 166)
  (emerc-l3-shrub 167)
  (gmerc-l3-shrub 168)
  (gmerc2-l3-shrub 169)

  (tex-l4-shrub 170)
  (bucket171 171)
  (bucket172 172)
  (bucket173 173)
  (bucket174 174)
  (bucket175 175)
  (merc-l4-shrub 176)
  (emerc-l4-shrub 177)
  (gmerc-l4-shrub 178)
  (gmerc2-l4-shrub 179)

  (tex-l5-shrub 180)
  (bucket181 181)
  (bucket182 182)
  (bucket183 183)
  (bucket184 184)
  (bucket185 185)
  (merc-l5-shrub 186)
  (emerc-l5-shrub 187)
  (gmerc-l5-shrub 188)
  (gmerc2-l5-shrub 189)

  (tex-l6-shrub 190)
  (bucket191 191)
  (bucket192 192)
  (bucket193 193)
  (bucket194 194)
  (bucket195 195)
  (merc-l6-shrub 196)
  (emerc-l6-shrub 197)
  (gmerc-l6-shrub 198)
  (gmerc2-l6-shrub 199)

  (tex-l7-shrub 200)
  (bucket201 201)
  (bucket202 202)
  (bucket203 203)
  (bucket204 204)
  (bucket205 205)
  (merc-l7-shrub 206)
  (emerc-l7-shrub 207)
  (gmerc-l7-shrub 208)
  (gmerc2-l7-shrub 209)

  (tex-l8-shrub 210)
  (bucket211 211)
  (bucket212 212)
  (bucket213 213)
  (bucket214 214)
  (bucket215 215)
  (merc-l8-shrub 216)
  (emerc-l8-shrub 217)
  (gmerc-l8-shrub 218)
  (gmerc2-l8-shrub 219)

  (tex-l9-shrub 220)
  (bucket221 221)
  (bucket222 222)
  (bucket223 223)
  (bucket224 224)
  (bucket225 225)
  (merc-l9-shrub 226)
  (emerc-l9-shrub 227)
  (gmerc-l9-shrub 228)
  (gmerc2-l9-shrub 229)

  (tex-l0-alpha 230)
  (bucket231 231)
  (bucket232 232)
  (bucket233 233)
  (merc-l0-alpha 234)
  (emerc-l0-alpha 235)
  (gmerc-l0-alpha 236)
  (bucket237 237)
  (bucket238 238)
  (bucket239 239)
  (gmerc2-l0-alpha 240)

  (tex-l1-alpha 241)
  (bucket242 242)
  (bucket243 243)
  (bucket244 244)
  (merc-l1-alpha 245)
  (emerc-l1-alpha 246)
  (gmerc-l1-alpha 247)
  (bucket248 248)
  (bucket249 249)
  (bucket250 250)
  (gmerc2-l1-alpha 251)

  (tex-l2-alpha 252)
  (bucket253 253)
  (bucket254 254)
  (bucket255 255)
  (merc-l2-alpha 256)
  (emerc-l2-alpha 257)
  (gmerc-l2-alpha 258)
  (bucket259 259)
  (bucket260 260)
  (bucket261 261)
  (gmerc2-l2-alpha 262)

  (tex-l3-alpha 263)
  (bucket264 264)
  (bucket265 265)
  (bucket266 266)
  (merc-l3-alpha 267)
  (emerc-l3-alpha 268)
  (gmerc-l3-alpha 269)
  (bucket270 270)
  (bucket271 271)
  (bucket272 272)
  (gmerc2-l3-alpha 273)

  (tex-l4-alpha 274)
  (bucket275 275)
  (bucket276 276)
  (bucket277 277)
  (merc-l4-alpha 278)
  (emerc-l4-alpha 279)
  (gmerc-l4-alpha 280)
  (bucket281 281)
  (bucket282 282)
  (bucket283 283)
  (gmerc2-l4-alpha 284)

  (tex-l5-alpha 285)
  (bucket286 286)
  (bucket287 287)
  (bucket288 288)
  (merc-l5-alpha 289)
  (emerc-l5-alpha 290)
  (gmerc-l5-alpha 291)
  (bucket292 292)
  (bucket293 293)
  (bucket294 294)
  (gmerc2-l5-alpha 295)

  (tex-l6-alpha 296)
  (bucket297 297)
  (bucket298 298)
  (bucket299 299)
  (merc-l6-alpha 300)
  (emerc-l6-alpha 301)
  (gmerc-l6-alpha 302)
  (bucket303 303)
  (bucket304 304)
  (bucket305 305)
  (gmerc2-l6-alpha 306)

  (tex-l7-alpha 307)
  (bucket308 308)
  (bucket309 309)
  (bucket310 310)
  (merc-l7-alpha 311)
  (emerc-l7-alpha 312)
  (gmerc-l7-alpha 313)
  (bucket314 314)
  (bucket315 315)
  (bucket316 316)
  (gmerc2-l7-alpha 317)

  (tex-l8-alpha 318)
  (bucket319 319)
  (bucket320 320)
  (bucket321 321)
  (merc-l8-alpha 322)
  (emerc-l8-alpha 323)
  (gmerc-l8-alpha 324)
  (bucket325 325)
  (bucket326 326)
  (bucket327 327)
  (gmerc2-l8-alpha 328)

  (tex-l9-alpha 329)
  (bucket330 330)
  (bucket331 331)
  (bucket332 332)
  (merc-l9-alpha 333)
  (emerc-l9-alpha 334)
  (gmerc-l9-alpha 335)
  (bucket336 336)
  (bucket337 337)
  (bucket338 338)
  (gmerc2-l9-alpha 339)

  (tex-lcom-tfrag 340)
  (merc-lcom-tfrag 341)
  (emerc-lcom-tfrag 342)
  (gmerc-lcom-tfrag 343)
  (gmerc2-lcom-tfrag 344)

  (tex-lcom-shrub 345)
  (merc-lcom-shrub 346)
  (emerc-lcom-shrub 347)
  (gmerc-lcom-shrub 348)
  (gmerc2-lcom-shrub 349)

  (shadow 350)

  (tex-l0-pris 351)
  (merc-l0-pris 352)
  (emerc-l0-pris 353)
  (gmerc-l0-pris 354)
  (gmerc2-l0-pris 355)

  (tex-l1-pris 356)
  (merc-l1-pris 357)
  (emerc-l1-pris 358)
  (gmerc-l1-pris 359)
  (gmerc2-l1-pris 360)

  (tex-l2-pris 361)
  (merc-l2-pris 362)
  (emerc-l2-pris 363)
  (gmerc-l2-pris 364)
  (gmerc2-l2-pris 365)

  (tex-l3-pris 366)
  (merc-l3-pris 367)
  (emerc-l3-pris 368)
  (gmerc-l3-pris 369)
  (gmerc2-l3-pris 370)

  (tex-l4-pris 371)
  (merc-l4-pris 372)
  (emerc-l4-pris 373)
  (gmerc-l4-pris 374)
  (gmerc2-l4-pris 375)

  (tex-l5-pris 376)
  (merc-l5-pris 377)
  (emerc-l5-pris 378)
  (gmerc-l5-pris 379)
  (gmerc2-l5-pris 380)

  (tex-l6-pris 381)
  (merc-l6-pris 382)
  (emerc-l6-pris 383)
  (gmerc-l6-pris 384)
  (gmerc2-l6-pris 385)

  (tex-l7-pris 386)
  (merc-l7-pris 387)
  (emerc-l7-pris 388)
  (gmerc-l7-pris 389)
  (gmerc2-l7-pris 390)

  (tex-l8-pris 391)
  (merc-l8-pris 392)
  (emerc-l8-pris 393)
  (gmerc-l8-pris 394)
  (gmerc2-l8-pris 395)

  (tex-l9-pris 396)
  (merc-l9-pris 397)
  (emerc-l9-pris 398)
  (gmerc-l9-pris 399)
  (gmerc2-l9-pris 400)

  (tex-lcom-pris 401)
  (merc-lcom-pris 402)
  (emerc-lcom-pris 403)
  (gmerc-lcom-pris 404)
  (gmerc2-lcom-pris 405)

  (tex-l0-pris2 406)
  (merc-l0-pris2 407)
  (emerc-l0-pris2 408)
  (gmerc-l0-pris2 409)
  (gmerc2-l0-pris2 410)

  (tex-l1-pris2 411)
  (merc-l1-pris2 412)
  (emerc-l1-pris2 413)
  (gmerc-l1-pris2 414)
  (gmerc2-l1-pris2 415)

  (tex-l2-pris2 416)
  (merc-l2-pris2 417)
  (emerc-l2-pris2 418)
  (gmerc-l2-pris2 419)
  (gmerc2-l2-pris2 420)

  (tex-l3-pris2 421)
  (merc-l3-pris2 422)
  (emerc-l3-pris2 423)
  (gmerc-l3-pris2 424)
  (gmerc2-l3-pris2 425)

  (tex-l4-pris2 426)
  (merc-l4-pris2 427)
  (emerc-l4-pris2 428)
  (gmerc-l4-pris2 429)
  (gmerc2-l4-pris2 430)

  (tex-l5-pris2 431)
  (merc-l5-pris2 432)
  (emerc-l5-pris2 433)
  (gmerc-l5-pris2 434)
  (gmerc2-l5-pris2 435)

  (tex-l6-pris2 436)
  (merc-l6-pris2 437)
  (emerc-l6-pris2 438)
  (gmerc-l6-pris2 439)
  (gmerc2-l6-pris2 440)

  (tex-l7-pris2 441)
  (merc-l7-pris2 442)
  (emerc-l7-pris2 443)
  (gmerc-l7-pris2 444)
  (gmerc2-l7-pris2 445)

  (tex-l8-pris2 446)
  (merc-l8-pris2 447)
  (emerc-l8-pris2 448)
  (gmerc-l8-pris2 449)
  (gmerc2-l8-pris2 450)

  (tex-l9-pris2 451)
  (merc-l9-pris2 452)
  (emerc-l9-pris2 453)
  (gmerc-l9-pris2 454)
  (gmerc2-l9-pris2 455)

  (tex-lcom-pris2 456)
  (merc-lcom-pris2 457)
  (emerc-lcom-pris2 458)
  (gmerc-lcom-pris2 459)
  (gmerc2-lcom-pris2 460)

  (tex-lcom-sky-post 461)
  (bucket462 462)

  (tex-l0-water 463)
  (merc-l0-water 464)
  (gmerc-l0-water 465)
  (bucket466 466)
  (bucket467 467)
  (bucket468 468)
  (bucket469 469)
  (bucket470 470)
  (bucket471 471)
  (gmerc2-l0-water 472)

  (tex-l1-water 473)
  (merc-l1-water 474)
  (gmerc-l1-water 475)
  (bucket476 476)
  (bucket477 477)
  (bucket478 478)
  (bucket479 479)
  (bucket480 480)
  (bucket481 481)
  (gmerc2-l1-water 482)

  (tex-l2-water 483)
  (merc-l2-water 484)
  (gmerc-l2-water 485)
  (bucket486 486)
  (bucket487 487)
  (bucket488 488)
  (bucket489 489)
  (bucket490 490)
  (bucket491 491)
  (gmerc2-l2-water 492)

  (tex-l3-water 493)
  (merc-l3-water 494)
  (gmerc-l3-water 495)
  (bucket496 496)
  (bucket497 497)
  (bucket498 498)
  (bucket499 499)
  (bucket500 500)
  (bucket501 501)
  (gmerc2-l3-water 502)

  (tex-l4-water 503)
  (merc-l4-water 504)
  (gmerc-l4-water 505)
  (bucket506 506)
  (bucket507 507)
  (bucket508 508)
  (bucket509 509)
  (bucket510 510)
  (bucket511 511)
  (gmerc2-l4-water 512)

  (tex-l5-water 513)
  (merc-l5-water 514)
  (gmerc-l5-water 515)
  (bucket516 516)
  (bucket517 517)
  (bucket518 518)
  (bucket519 519)
  (bucket520 520)
  (bucket521 521)
  (gmerc2-l5-water 522)

  (tex-l6-water 523)
  (merc-l6-water 524)
  (gmerc-l6-water 525)
  (bucket526 526)
  (bucket527 527)
  (bucket528 528)
  (bucket529 529)
  (bucket530 530)
  (bucket531 531)
  (gmerc2-l6-water 532)

  (tex-l7-water 533)
  (merc-l7-water 534)
  (gmerc-l7-water 535)
  (bucket536 536)
  (bucket537 537)
  (bucket538 538)
  (bucket539 539)
  (bucket540 540)
  (bucket541 541)
  (gmerc2-l7-water 542)

  (tex-l8-water 543)
  (merc-l8-water 544)
  (gmerc-l8-water 545)
  (bucket546 546)
  (bucket547 547)
  (bucket548 548)
  (bucket549 549)
  (bucket550 550)
  (bucket551 551)
  (gmerc2-l8-water 552)

  (tex-l9-water 553)
  (merc-l9-water 554)
  (gmerc-l9-water 555)
  (bucket556 556)
  (bucket557 557)
  (bucket558 558)
  (bucket559 559)
  (bucket560 560)
  (bucket561 561)
  (gmerc2-l9-water 562)

  (tex-lcom-water 563)
  (merc-lcom-water 564)
  (gmerc-lcom-water 565)
  (gmerc2-lcom-water 566) ;; default for prim
  (bucket567 567)

  (tex-sprite 568)
  (generic-sprite-1 569) ;; ;prim
  (particles 570)
  (generic-sprite-2 571)
  (shadow2 572)
  (shadow3 573)
  (generic-sprite-3 574)

  (tex-warp 575)
  (generic-warp 576)

  (debug-no-zbuf1 577) ;; debug?
  (tex-hud-hud-alpha 578)
  (hud-draw-hud-alpha 579)
  (tex-hud-pris2 580)
  (hud-draw-pris2 581)
  (bucket582 582)
  (bucket583 583)
  (debug-no-zbuf2 584)
  (bucket585 585)
  (bucket586 586)
  )

;; ---vu1-user-h:bucket-id

(defenum bucket-id-16
  :type int16
  :copy-entries bucket-id
  )

;; +++vu1-user-h:texture-enable-mask
(defenum texture-enable-mask
  :type uint64
  :bitfield #t
  (tfrag 0)
  (all-pris 1)
  (shrub 2)
  (alpha 3)
  (water 4)
  (warp 5)
  (sprite 6)
  (hud 7)
  (sky 8)
  (hfrag 9)
  )
;; ---vu1-user-h:texture-enable-mask

;; +++vu1-user-h:texture-enable-mask-u32
(defenum texture-enable-mask-u32
  :type uint32
  :bitfield #t
  :copy-entries texture-enable-mask
  )
;; ---vu1-user-h:texture-enable-mask-u32

;; +++vu1-user-h:vu1-renderer-mask
;; TODO stolen from Jak 2
(defenum vu1-renderer-mask
  :type uint64
  :bitfield #t
  (rn0)
  (rn1)
  (rn2)
  (sky)
  (ocean)
  (ocean-wave)
  (tfrag)
  (tie)
  (tie-envmap)
  (tie-scissor)
  (tie-envmap-scissor)
  (tie-vanish)
  (shrubbery)
  (shrub-near)
  (generic)
  (merc)
  (emerc)
  (billboard)
  (shrubbery-vanish)
  (tfrag-trans)
  (tie-scissor-trans)
  (tie-trans)
  (tie-envmap-trans)
  (tie-envmap-scissor-trans)
  (tfrag-water)
  (tie-scissor-water)
  (tie-water)
  (tie-envmap-water)
  (tie-envmap-scissor-water)
  (sprite)
  (shadow)
  (rn31)
  (rn32)
  (rn33)
  (depth-cue)
  (rn35)
  (rn36)
  (rn37)
  )
;; ---vu1-user-h:vu1-renderer-mask

(deftype dma-foreground-sink (basic)
  "A specification for where a foreground renderer should output its DMA data."
  ((bucket                   bucket-id  :offset-assert 4)
   (foreground-texture-page  tpage-category   :offset-assert 8)
   (foreground-texture-level int8   :offset-assert 9)
   (foreground-output-bucket int8   :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xb
  :flag-assert         #x90000000b
  )

(deftype generic-bucket-state (structure)
  "The state of buffers for the generic renderer.
   When generating generic DMA data, you must know the previous state
   of the VU's memory to properly double-buffer the input and output data."
  ((gifbuf-adr uint32  :offset-assert 0)
   (inbuf-adr  uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype generic-dma-foreground-sink (dma-foreground-sink)
  "A specification for where a foreground generic renderer should output DMA data,
   and the state of the VU memory buffers at the end of the bucket."
  ((state generic-bucket-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; profile-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type dma-buffer structure)

(deftype profile-segment (structure)
  "Confusingly, this has two uses. Either a single event, or a summary of all events within a category."
  ((name       symbol  :offset-assert 0) ;; guessed by decompiler
   (start-time int16   :offset-assert 4)
   (end-time   int16   :offset-assert 6)
   (count      uint8   :offset-assert 8)
   (vu-count   uint8   :offset-assert 9)
   (depth      uint16  :offset-assert 10)
   (color      rgba    :offset-assert 12) ;; guessed by decompiler
   (code-time  uint16  :offset-assert 4 :overlay-at start-time)
   (vu-time    uint16  :offset-assert 6 :overlay-at end-time)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype profile-collapse (structure)
  "An array of 'summaries'. Each entry in data is a summary of all events within a category."
  ((count int32              :offset-assert 0)
   (data  profile-segment 48 :inline :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x304
  :flag-assert         #x900000304
  )

(deftype profile-segment-array (basic)
  "All profiling data for a frame, stored as a tree of events. There is one for the VU, and one for the EE."
  ((count     int16                :offset-assert 4)
   (depth     int8                 :offset-assert 6)
   (max-depth int8                 :offset-assert 7)
   (base-time int16                :offset-assert 8)
   (segment   profile-segment 9    :offset-assert 12) ;; guessed by decompiler
   (data      profile-segment 1024 :inline :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x4030
  :flag-assert         #xd00004030
  (:methods
    (get-total-time "Get the duration of the top-level event (typically, the whole frame)" (_type_) int) ;; 9
    (start-frame! "Restart the profiler for the start of a frame." (_type_) none) ;; 10
    (start-segment! "Start an event." (_type_ symbol rgba) none) ;; 11
    (end-segment! "Stop the most recently started event." (_type_) none) ;; 12
    )
  )

(deftype profile-array (structure)
  "The EE and VU profilers, and the drawing code."
  ((data profile-segment-array 2 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (postprocess-data! "Create the collapsed summary of the collected data." (_type_) none) ;; 9
    (draw-bars! "Generate DMA data for drawing the profile bars." (_type_ dma-buffer int) none) ;; 10
    (draw-text! "Generate DMA data for drawing the profile information screen." (_type_) none) ;; 11
    )
  )

(deftype profile-spec (structure)
  "Specification for a profile category."
  ((name  symbol  :offset-assert 0)
   (color rgba    :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern *profile-gap-color* rgba) ;;
(define-extern *profile-all-color* rgba) ;; rgba
(define-extern *profile-blit-color* rgba) ;; rgba
(define-extern *profile-sky-color* rgba) ;; rgba
(define-extern *profile-ocean-color* rgba) ;; rgba
(define-extern *profile-hfrag-color* rgba)
(define-extern *profile-tfrag-color* rgba) ;; rgba
(define-extern *profile-texture-color* rgba) ;; rgba
(define-extern *profile-tie-color* rgba)
(define-extern *profile-generic-color* rgba)
(define-extern *profile-merc-color* rgba) ;; rgba
(define-extern *profile-shrubbery-color* rgba)
(define-extern *profile-particle-color* rgba)
(define-extern *profile-debug-color* rgba) ;; rgba
(define-extern *profile-other-color* rgba)
(define-extern *profile-joints-color* rgba) ;; rgba
(define-extern *profile-draw-hook-color* rgba) ;; rgba
(define-extern *profile-background-color* rgba) ;; rgba
(define-extern *profile-foreground-color* rgba) ;; rgba
(define-extern *profile-bones-color* rgba) ;; rgba
(define-extern *profile-actors-color* rgba) ;; rgba
(define-extern *profile-collide-color* rgba) ;; rgba
(define-extern *profile-nav-color* rgba) ;; rgba
(define-extern *profile-camera-color* rgba) ;; rgba
(define-extern *profile-gs-sync-color* rgba)
(define-extern *profile-array* profile-array) ;; profile-array
(define-extern *profile-collapse* profile-collapse) ;; profile-collapse
(define-extern *profile-interrupt-segment* profile-segment-array) ;; profile-segment-array
(define-extern *profile-interrupt-start* symbol) ;; symbol

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern dma-sync-hang (function dma-bank none))
(define-extern dma-sync-crash (function dma-bank none))
(define-extern dma-send (function dma-bank uint uint none))
(define-extern dma-send-chain (function dma-bank-source uint none))
(define-extern dma-send-chain-no-tte (function dma-bank-source uint none))
(define-extern dma-send-chain-no-flush (function dma-bank-source uint none))
(define-extern dma-send-to-spr (function uint uint uint symbol none))
(define-extern dma-send-to-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-send-from-spr (function uint uint uint symbol none))
(define-extern dma-send-from-spr-no-flush (function uint uint uint symbol none))
(define-extern dma-initialize (function none))
(define-extern clear-vu0-mem (function none))
(define-extern clear-vu1-mem (function none))
(define-extern dump-vu1-mem (function none))
(define-extern dump-vu1-range (function uint uint symbol))
(define-extern reset-vif1-path (function none))
(define-extern ultimate-memcpy (function pointer pointer uint none))
(define-extern symlink2 (function none))
(define-extern symlink3 (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-buffer                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dma-packet (structure)
  "The header for a DMA transfer, containing an DMA tag, and VIF tags."
  ((dma  dma-tag   :offset-assert 0)
   (vif0 vif-tag  :offset-assert 8) ;; guessed by decompiler
   (vif1 vif-tag  :offset-assert 12) ;; guessed by decompiler
   (quad uint128  :offset-assert 0 :overlay-at dma)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-packet-array (inline-array-class)
  "Unused dma array. Unclear how it should be used."
  ((data dma-packet :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype dma-gif (structure)
  "Believed unused GIF header type."
  ((gif  uint64  2 :offset-assert 0) ;; guessed by decompiler
   (quad uint128   :offset-assert 0 :overlay-at gif)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-gif-packet (structure)
  "The header for a DMA transfer that goes directly to GIF, containing DMA, VIF, GIF tags."
  ((dma-vif dma-packet :inline :offset-assert 0)
   (gif     uint64     2       :offset-assert 16) ;; guessed by decompiler
   (quad    uint128    2       :offset-assert 0 :overlay-at dma-vif) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype dma-buffer (basic)
  "A buffer for DMA data."
  ((allocated-length int32     :offset-assert 4)
   (base             pointer   :offset-assert 8) ;; guessed by decompiler
   (end              pointer   :offset-assert 12) ;; guessed by decompiler
   (real-buffer-end  int32     :offset-assert 16)
   (data             uint64  1 :offset 32) ;; guessed by decompiler
   )
  (:methods
    (new "Allocate a DMA buffer to hold the given size" (symbol type int) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  (:methods
    (new (symbol type int) _type_) ;; 0
    )
  )

(define-extern dma-buffer-inplace-new
               "Create a dma-buffer in-place. Does not set the type of the dma-buffer object."
               (function dma-buffer int dma-buffer))
(define-extern dma-buffer-length
               "Get length used in quadwords, rounded up."
               (function dma-buffer int))
(define-extern dma-buffer-free
               "Get the number of free quadwords between base and end pointers."
               (function dma-buffer int))
(define-extern dma-buffer-add-vu-function
               "Add DMA tags to load the given VU function. The destination in vu instruction memory
   is specific inside the vu-function. This does NOT copy the vu-function into the buffer,
   but creates a reference to the existing VU function." (function dma-buffer vu-function int symbol))
(define-extern dma-buffer-send
               "Send the DMA buffer! DOES NOT TRANSFER TAG, you probably want dma-buffer-send-chain instead."
               (function dma-bank dma-buffer none))
(define-extern dma-buffer-send-chain
               "Send the DMA buffer! Sends the tags, so this is suitable for the main graphics chain."
                (function dma-bank-source dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-bucket                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern dma-buffer-add-buckets "Initialize an array of dma-buckets in a DMA buffer." (function dma-buffer int (inline-array dma-bucket)))
(define-extern dma-buffer-patch-buckets "Patch together DMA buckets after they have been filled." (function dma-bucket int dma-bucket))
(define-extern dma-bucket-insert-tag "Add a dma chain to the bucket." (function (inline-array dma-bucket) bucket-id pointer (pointer dma-tag) pointer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dma-disasm                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vif-disasm-element (structure)
  ((mask    uint32      :offset-assert 0)
   (tag     vif-cmd-32  :offset-assert 4) ;; guessed by decompiler
   (val     uint32      :offset-assert 8)
   (print   uint32      :offset-assert 12)
   (string1 string      :offset-assert 16) ;; guessed by decompiler
   (string2 string      :offset-assert 20) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define-extern *vif-disasm-table* (array vif-disasm-element))
(define-extern disasm-vif-details "Disassemble the data stored in a vif unpack." (function symbol (pointer uint8) vif-cmd int symbol))
(define-extern disasm-vif-tag "Disassemble vif tag, and possibly the associated data." (function (pointer vif-tag) int symbol symbol int))
(define-extern disasm-dma-tag "Disassemble just the 64-byte dma tag" (function dma-tag symbol none))
(define-extern *dma-disasm* symbol)
(define-extern disasm-dma-list "Print out an entire DMA list.
                               If mode is #t, print vif tags too. If mode is 'details, also print data unpacked by vif-tags.
                               If verbose is #t, print out the addresses of each tag, and total size statistics.
                               If expected size is negative, it is ignored. Otherwise, only disassemble this much dma data."
                               (function dma-packet symbol symbol symbol int symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pad                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++pad:pad-buttons
(defenum pad-buttons
  :bitfield #t
  :type uint32
  (select   0)
  (l3       1)
  (r3       2)
  (start    3)
  (up       4)
  (right    5)
  (down     6)
  (left     7)
  (l2       8)
  (r2       9)
  (l1       10)
  (r1       11)
  (triangle 12)
  (circle   13)
  (x        14)
  (square   15)
  ;; only 16 buttons are mapped to hardware, the rest are 'actions' or something else
  (l-analog-up 16)
  (l-analog-right 17)
  (l-analog-down 18)
  (l-analog-left 19)
  (r-analog-up 20)
  (r-analog-right 21)
  (r-analog-down 22)
  (r-analog-left 23)
  (confirm 24)
  )
;; ---pad:pad-buttons

;; +++pad:mouse-buttons
(defenum mouse-buttons
  :bitfield #t
  :type uint32
  (left)
  (right)
  (middle)
  )
;; ---pad:mouse-buttons

(deftype scf-time (structure)
  ((stat   uint8  :offset-assert 0)
   (second uint8  :offset-assert 1)
   (minute uint8  :offset-assert 2)
   (hour   uint8  :offset-assert 3)
   (week   uint8  :offset-assert 4)
   (day    uint8  :offset-assert 5)
   (month  uint8  :offset-assert 6)
   (year   uint8  :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern scf-get-time (function scf-time none))

(deftype hw-cpad (basic)
  "Data that comes directly from hardware.
   It's 32 bytes + type tag (ignored by C kernel)."
  ((valid   uint8     :offset-assert 4)
   (status  uint8     :offset-assert 5)
   (button0 uint16    :offset-assert 6)
   (rightx  uint8     :offset-assert 8)
   (righty  uint8     :offset-assert 9)
   (leftx   uint8     :offset-assert 10)
   (lefty   uint8     :offset-assert 11)
   (abutton uint8  12 :offset-assert 12) ;; guessed by decompiler
   (dummy   uint8  12 :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype cpad-info (hw-cpad)
  "Data from hardware + additional info calculated here."
  ((number             int32         :offset-assert 36)
   (cpad-file          int32         :offset-assert 40)
   (button0-abs        pad-buttons 3 :offset-assert 44) ;; guessed by decompiler
   (button0-shadow-abs pad-buttons 1 :offset-assert 56) ;; guessed by decompiler
   (button0-rel        pad-buttons 3 :offset-assert 60) ;; guessed by decompiler
   (stick0-dir         float         :offset-assert 72)
   (stick0-speed       float         :offset-assert 76)
   (new-pad            int32         :offset-assert 80)
   (state              int32         :offset-assert 84)
   (align              uint8       6 :offset-assert 88) ;; guessed by decompiler
   (direct             uint8       6 :offset-assert 94) ;; guessed by decompiler
   (buzz-val           uint8       2 :offset-assert 100) ;; guessed by decompiler
   (buzz-pause-val     uint8       1 :offset-assert 102) ;; guessed by decompiler
   (buzz-pause-time    uint8         :offset-assert 103)
   (buzz-time          time-frame  2 :offset-assert 104) ;; guessed by decompiler
   (buzz               symbol        :offset-assert 120)
   (buzz-act           int32         :offset-assert 124)
   (change-time        time-frame    :offset-assert 128) ;; time-frame
   (real-change-time   time-frame    :offset-assert 136)
   (old-rightx         uint8       2 :offset-assert 144) ;; guessed by decompiler
   (old-righty         uint8       2 :offset-assert 146) ;; guessed by decompiler
   (old-leftx          uint8       2 :offset-assert 148) ;; guessed by decompiler
   (old-lefty          uint8       2 :offset-assert 150) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x98
  :flag-assert         #xa00000098
  (:methods
    (new
      "Allocate a new cpad-info and open the pad itself through the kernel."
      (symbol type int) _type_) ;; 0
    (adjust-to-screen-flip (_type_) int) ;; 9
    )
  )

(define-extern cpad-open (function cpad-info int cpad-info))
(define-extern cpad-get-data (function cpad-info cpad-info))

(deftype cpad-list (basic)
  "List of controllers. It always has two controllers."
  ((num-cpads int32       :offset-assert 4)
   (cpads     cpad-info 2 :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  (:methods
    (new
      "Create a cpad-list for 2 controllers. It's fine to do this even if one or both controllers
       aren't connected yet."
      (symbol type) _type_) ;; 0
    )
  )

(deftype mouse-info (basic)
  ((active             symbol                  :offset-assert 4) ;; guessed by decompiler
   (cursor             symbol                  :offset-assert 8)
   (valid              symbol                  :offset-assert 12) ;; guessed by decompiler
   (id                 uint8                   :offset-assert 16)
   (status             uint16                  :offset-assert 18)
   (button0            uint16                  :offset-assert 20)
   (deltax             int8                    :offset-assert 22)
   (deltay             int8                    :offset-assert 23)
   (wheel              uint8                   :offset-assert 24)
   (change-time        time-frame              :offset-assert 32)
   (button0-abs        mouse-buttons 3         :offset-assert 40) ;; guessed by decompiler
   (button0-shadow-abs mouse-buttons 1         :offset-assert 52) ;; guessed by decompiler
   (button0-rel        mouse-buttons 3         :offset-assert 56) ;; guessed by decompiler
   (pos                vector        2 :inline :offset-assert 80) ;; guessed by decompiler
   (posx               float           :offset 80)
   (posy               float           :offset 84)
   (oldposx            float           :offset 96 :do-not-decompile)
   (oldposy            float           :offset 100)
   (speedx             float           :offset 92)
   (speedy             float           :offset 108)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  (:methods
    (new (symbol type) _type_) ;; 0
    )
  )

(define-extern mouse-get-data (function mouse-info none))

(deftype keybd-info (basic)
  ((active symbol    :offset-assert 4)
   (valid  symbol    :offset-assert 8)
   (kdata  uint8 16  :offset-assert 12)
   (keys   uint8 256 :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x11c
  :flag-assert         #x90000011c
  (:methods
    (new (symbol type) _type_) ;; 0
    )
  )

(define-extern keybd-get-data (function keybd-info none))

(define-extern *cheat-mode* symbol)
(define-extern cpad-invalid! "Reset all data in a [[cpad-info]]." (function cpad-info cpad-info))
(define-extern analog-input
  "Convert integer input from pad into a float between -out-range and +out-range.
   The offset is applied directly to the input.
   The center val is the expected value for 0, after applying offset.
   The max val is the expected value with the stick pushed all the way."
  (function int float float float float float))
(define-extern cpad-set-buzz!
  "Turn on vibration motor `buzz-idx` for duration, at magnitude `buzz-amount`."
  (function cpad-info int int time-frame none))
(define-extern *cpad-list* cpad-list)
(define-extern *cpad-debug* symbol)
(define-extern service-cpads "Read from cpads and update vibration." (function cpad-list))
(define-extern buzz-stop! "Set the buzz to 0 on both vibration motors of the given cpad." (function int none))
(define-extern *mouse* mouse-info)
(define-extern service-mouse "Update the mouse, and draw the cursor." (function none))
(define-extern *keybd* keybd-info)
(define-extern service-keybd (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gs                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++gs:gs-psm
(defenum gs-psm
  :bitfield #f
  :type uint8
  (ct32 0)
  (ct24 1)
  (ct16 2)
  (ct16s 10)
  (mt8 19)
  (mt4 20)
  (mt8h 27)
  (mt4hl 36)
  (mt4hh 44)
  (mz32 48)
  (mz24 49)
  (mz16 50)
  (mz16s 58)
  )
;; ---gs:gs-psm

;; +++gs:gs-reg
(defenum gs-reg
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (tex1-1 20)
  (tex1-2 21)
  (tex2-1 22)
  (tex2-2 23)
  (xyoffset-1 24)
  (xyoffset-2 25)
  (prmodecont 26)
  (prmode 27)
  (texclut 28)
  (scanmsk 34)
  (miptbp1-1 52)
  (miptbp1-2 53)
  (miptbp2-1 54)
  (miptbp2-2 55)
  (texa 59)
  (fogcol 61)
  (texflush 63)
  (scissor-1 64)
  (scissor-2 65)
  (alpha-1 66)
  (alpha-2 67)
  (dimx 68)
  (dthe 69)
  (colclamp 70)
  (test-1 71)
  (test-2 72)
  (pabe 73)
  (fba-1 74)
  (fba-2 75)
  (frame-1 76)
  (frame-2 77)
  (zbuf-1 78)
  (zbuf-2 79)
  (bitbltbuf 80)
  (trxpos 81)
  (trxreg 82)
  (trxdir 83)
  (hwreg 84)
  (signal 96)
  (finish 97)
  (label 98)
  (hack 127)
  )
;; ---gs:gs-reg

;; +++gs:gs-reg64
(defenum gs-reg64
  :type uint64
  :copy-entries gs-reg
  )
;; ---gs:gs-reg64

;; +++gs:gs-reg32
(defenum gs-reg32
  :type uint32
  :copy-entries gs-reg
  )
;; ---gs:gs-reg32

;; +++gs:gs-prim-type
(defenum gs-prim-type
  :type uint8
  (point 0)
  (line 1)
  (line-strip 2)
  (tri 3)
  (tri-strip 4)
  (tri-fan 5)
  (sprite 6)
  )
;; ---gs:gs-prim-type

(deftype gs-pmode (uint64)
  ((en1    uint8 :offset 0 :size 1)
   (en2    uint8 :offset 1 :size 1)
   (crtmd  uint8 :offset 2 :size 3)
   (mmod   uint8 :offset 5 :size 1)
   (amod   uint8 :offset 6 :size 1)
   (slbg   uint8 :offset 7 :size 1)
   (alp    uint8 :offset 8 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-smode2 (uint64)
  ((int   uint8 :offset 0 :size 1)
   (ffmd  uint8 :offset 1 :size 1)
   (dpms  uint8 :offset 2 :size 2)
   )
  :flag-assert #x900000008
  )

(deftype gs-display-fb (uint64)
  ((fbp  uint16 :offset 0  :size 9)
   (fbw  uint8  :offset 9  :size 6)
   (psm  gs-psm :offset 15 :size 5)
   (dbx  uint16 :offset 32 :size 11)
   (dby  uint16 :offset 43 :size 11)
   )
  :flag-assert #x900000008
  )

(deftype gs-display (uint64)
  "the GS's DISPLAY registers make settings for the display position on the screen regarding
   information on Rectangular Area Read Output Circuit n for the PCRTC.
   write-only"
  ((dx    uint16 :offset 0  :size 12)
   (dy    uint16 :offset 12 :size 11)
   (magh  uint8  :offset 23 :size 4)
   (magv  uint8  :offset 27 :size 2)
   (dw    uint16 :offset 32 :size 12)
   (dh    uint16 :offset 44 :size 11)
   )
  :flag-assert #x900000008
  )

(deftype gs-bgcolor (uint64)
  "The GS's BGCOLOR register sets the background color of the PCRTC with RGB value.
   write-only"
  ((r  uint8 :offset 0)
   (g  uint8 :offset 8)
   (b  uint8 :offset 16)
   )
  :flag-assert #x900000008
  )

(deftype gs-csr (uint64)
  "The GS's CSR register sets and obtains various GS statuses.
   read-write. The fields have different effects depending on whether they're being read from
   or written to.

   Bits 5 and 6 (0x20 and 0x40) should be zero."
  ((signal  uint8 :offset 0  :size 1)
   (finish  uint8 :offset 1  :size 1)
   (hsint   uint8 :offset 2  :size 1)
   (vsint   uint8 :offset 3  :size 1)
   (edwint  uint8 :offset 4  :size 1)
   (flush   uint8 :offset 8  :size 1)
   (reset   uint8 :offset 9  :size 1)
   (nfield  uint8 :offset 12 :size 1)
   (field   uint8 :offset 13 :size 1)
   (fifo    uint8 :offset 14 :size 2)
   (rev     uint8 :offset 16 :size 8)
   (id      uint8 :offset 24 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-bank (structure)
  "Memory layout of the GS's privileged registers (mapped to EE memory).
   It is missing the SIGLBLID/LABELID register at 4224 (useless anyway?)"
  ((pmode    gs-pmode  :offset-assert 0)
   (smode2   gs-smode2  :offset 32)
   (dspfb1   gs-display-fb  :offset 112)
   (display1 gs-display  :offset 128)
   (dspfb2   gs-display-fb  :offset 144)
   (display2 gs-display  :offset 160)
   (extbuf   uint64  :offset 176)
   (extdata  uint64  :offset 192)
   (extwrite uint64  :offset 208)
   (bgcolor  gs-bgcolor  :offset 224)
   (csr      gs-csr   :offset 4096)
   (imr      uint64  :offset 4112)
   (busdir   uint64  :offset 4160)
   )
  :method-count-assert 9
  :size-assert         #x1048
  :flag-assert         #x900001048
  )

(deftype gs-frame (uint64)
  ((fbp    uint16 :offset 0  :size 9)
   (fbw    uint8  :offset 16 :size 6)
   (psm    gs-psm :offset 24 :size 6)
   (fbmsk  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

(deftype gs-zbuf (uint64)
  "The GS's ZBUF registers make various settings regarding Z buffer."
  ((zbp   uint16 :offset 0  :size 9)
   (psm   gs-psm :offset 24 :size 4)
   (zmsk  uint8  :offset 32 :size 1)
   )
  :flag-assert #x900000008
  )

(deftype gs-xy-offset (uint64)
  "The GS's XYOFFSET registers set the offset value for converting from the primitive coordinate
   system to the window coordinate system."
  ((ofx  uint16 :offset 0  :size 16)
   (ofy  uint16 :offset 32 :size 16)
   )
  :flag-assert #x900000008
  )

(deftype gs-scissor (uint64)
  "The GS's SCISSOR registers specify the scissoring area. The coordinate values for
   the upper-left/lower-right points of the enabled drawing area are specified by the window
   coordinate system."
  ((scax0  uint16 :offset 0  :size 11)
   (scax1  uint16 :offset 16 :size 11)
   (scay0  uint16 :offset 32 :size 11)
   (scay1  uint16 :offset 48 :size 11)
   )
  :flag-assert #x900000008
  )

(deftype gs-prmode-cont (uint64)
  "The GS's PRMODECONT register sets whether to use primitive attributes (IIP, TME, FGE, ABE,
   AA1, FST, CTXT, FIX) specified by the PRMODE register or the PRIM register."
  ((ac  uint8 :offset 0 :size 1)
   )
  :flag-assert #x900000008
  )

(deftype gs-color-clamp (uint64)
  "The GS's COLCLAMP register stores settings as to whether clamping for the RGB value of the
   pixel is performed."
  ((clamp  uint8 :offset 0 :size 1)
   )
  :flag-assert #x900000008
  )

(deftype gs-dthe (uint64)
  "The GS's DTHE register stores settings for dithering (performed/not performed)."
  ((dthe  uint8 :offset 0 :size 1))
  :flag-assert #x900000008
  )

;; +++gs:gs-atest
(defenum gs-atest
  :type uint8
  (never 0)
  (always 1)
  (less 2)
  (less-equal 3)
  (equal 4)
  (greater-equal 5)
  (greater 6)
  (not-equal 7)
  )
;; ---gs:gs-atest

;; +++gs:gs-ztest
(defenum gs-ztest
  :type uint8
  (never 0)
  (always 1)
  (greater-equal 2)
  (greater 3)
  )
;; ---gs:gs-ztest

(deftype gs-test (uint64)
  "The GS's TEST register performs settings related to the pixel test."
  ((ate    uint8 :offset 0  :size 1) ;; alpha test enable
   (atst   gs-atest :offset 1  :size 3) ;; alpha test method
   (aref   uint8 :offset 4  :size 8) ;; alpha val reference
   (afail  uint8 :offset 12 :size 2) ;; processing method on alpha test fail
   (date   uint8 :offset 14 :size 1) ;; dest alpha test enable
   (datm   uint8 :offset 15 :size 1) ;; dest alpha test mode
   (zte    uint8 :offset 16 :size 1) ;; depth test enable
   (ztst   gs-ztest :offset 17 :size 2) ;; depth test method
   )
  :flag-assert #x900000008
  )

(deftype gs-prim (uint64)
  ((prim  gs-prim-type :offset 0  :size 3)
   (iip   uint8        :offset 3  :size 1)
   (tme   uint8        :offset 4  :size 1)
   (fge   uint8        :offset 5  :size 1)
   (abe   uint8        :offset 6  :size 1)
   (aa1   uint8        :offset 7  :size 1)
   (fst   uint8        :offset 8  :size 1)
   (ctxt  uint8        :offset 9  :size 1)
   (fix   uint8        :offset 10 :size 1)
   )
  :flag-assert #x900000008
  )

(deftype gs-rgbaq (uint64)
  "The GS's RGBAQ register sets the RGBA value of the vertex and the Q value of the normalized
   texture coordinates."
  ((r  uint8 :offset 0  :size 8)
   (g  uint8 :offset 8  :size 8)
   (b  uint8 :offset 16 :size 8)
   (a  uint8 :offset 24 :size 8) ;; 0x80 --> 1.0
   (q  float :offset 32 :size 32) ;; affects some LOD behavior apparently?
   )
  :flag-assert #x900000008
  )

(deftype gs-xyz (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

(deftype gs-uv (uint64)
  "The GS's UV register specifies the texel coordinate (UV) values of the vertex."
  ((u  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (v  uint16 :offset 16 :size 16) ;; Q4 fixed point
   )
  :flag-assert #x900000008
  )

(deftype gs-uv2 (uint64)
  "Hack - added for warp."
  ((u  int16 :offset 0  :size 16) ;; Q4 fixed point
   (v  int16 :offset 16 :size 16) ;; Q4 fixed point
   )
  :flag-assert #x900000008
  )

(deftype gs-st (uint64)
  "The GS's ST register sets the S and T values of the vertex texture coordinates.
   The value Q is specified by the RGBAQ register."
  ((s  float :offset 0  :size 32)
   (t  float :offset 32 :size 32)
   )
  :flag-assert #x900000008
  )

(deftype gs-xyzf (uint64)
  ((x  uint16 :offset 0  :size 16) ;; Q4 fixed point
   (y  uint16 :offset 16 :size 16) ;; Q4 fixed point
   (z  uint32 :offset 32 :size 24)
   (f  uint8  :offset 56 :size 8) ;; fog coeff
   )
  :flag-assert #x900000008
  )

(deftype gs-adcmd (structure)
  ((word uint32 4  :offset-assert 0 :score -10)
   (quad uint128   :offset        0 :score -10)
   (data uint64    :offset        0 :score -10)
   (cmds gs-reg64    :offset      8 :score 10)
   (cmd  uint8     :offset        8)
   (x    uint32    :offset        0)
   (y    uint32    :offset        4)
   (z    uint32    :offset        8)
   (w    uint32    :offset        12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-trxpos (uint64)
  "The GS's TRXPOS register specifies the position and
   scanning direction of the rectangular area
   in each buffer where buffer transmission is performed."
  ((ssax  uint16 :offset 0  :size 11)
   (ssay  uint16 :offset 16 :size 11)
   (dsax  uint16 :offset 32 :size 11)
   (dsay  uint16 :offset 48 :size 11)
   (dir   uint8 :offset 59 :size 2)
   )
  :flag-assert #x900000008
  )

(deftype gs-trxreg (uint64)
  "The GS's TRXREG register specifies the size of the rectangular area, where the transmission
   between buffers is implemented, in units of pixels.
   The pixel mode must be the one set by the BITBLTBUF register."
  ((rrw  uint16 :offset 0  :size 12)
   (rrh  uint16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

(deftype gs-trxdir (uint64)
  "The GS's TRXDIR register specifies the transmission direction in the transmission between
   buffers, and activates transmission.
   Appropriate settings must be made by the BITBLTBUF/TRXPOS/TRXREG before activating
   the transmission."
  ((xdir  uint8 :offset 0 :size 2)
   )
  :flag-assert #x900000008
  )

(deftype gs-bitbltbuf (uint64)
  "The GS's BITBLTBUF register stores buffer-related settings for transmission source and
   destination during transmission between buffers."
  ((sbp   uint16 :offset 0  :size 14)
   (sbw   uint8  :offset 16 :size 6)
   (spsm  uint8  :offset 24 :size 6)
   (dbp   uint16 :offset 32 :size 14)
   (dbw   uint8  :offset 48 :size 6)
   (dpsm  gs-psm :offset 56 :size 6)
   )
  :flag-assert #x900000008
  )

(deftype gs-tex0 (uint64)
  "The GS's TEX0 registers set various kinds of information regarding the textures to be used."
  ((tbp0  uint16 :offset 0 :size 14)
   (tbw   uint8  :offset 14 :size 6)
   (psm   uint8  :offset 20 :size 6)
   (tw    uint8  :offset 26 :size 4)
   (th    uint8  :offset 30 :size 4)
   (tcc   uint8  :offset 34 :size 1)
   (tfx   uint8  :offset 35 :size 2)
   (cbp   uint16 :offset 37 :size 14)
   (cpsm  uint8  :offset 51 :size 4)
   (csm   uint8  :offset 55 :size 1)
   (csa   uint8  :offset 56 :size 5)
   (cld   uint8  :offset 61 :size 3)
   )
  :flag-assert #x900000008
  )

(deftype gs-tex1 (uint64)
  "The GS's TEX1 registers set information on the sampling method of the textures."
  ((lcm   uint8 :offset 0  :size 1)
   (mxl   uint8 :offset 2  :size 3)
   (mmag  uint8 :offset 5  :size 1)
   (mmin  uint8 :offset 6  :size 3)
   (mtba  uint8 :offset 9  :size 1)
   (l     uint8 :offset 19 :size 2)
   (k     int16 :offset 32 :size 12)
   )
  :flag-assert #x900000008
  )

(deftype gs-texa (uint64)
  "The GS's TEXA register sets the Alpha value to be referred to when the Alpha value of the
   texture is not an 8-bit value."
  ((ta0  uint8 :offset 0  :size 8)
   (aem  uint8 :offset 15 :size 1)
   (ta1  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-texclut (uint64)
  "The GS's TEXCLUT register specifies the CLUT position in the buffer when the CLUT storage mode
   is CSM=1 (CSM2 mode)."
  ((cbw  uint8  :offset 0  :size 6)
   (cou  uint8  :offset 6  :size 6)
   (cov  uint16 :offset 12 :size 10)
   )
  :flag-assert #x900000008
  )

(deftype gs-miptbp (uint64)
  "the GS's MIPTBP registers set the buffer pointer and buffer width of textures when performing
   MIPMAP. MIPTBP1 sets levels 1 to 3, MIPTBP2 sets levels 4 to 6."
  ((tbp1  uint16 :offset 0  :size 14)
   (tbw1  uint8  :offset 14 :size 6)
   (tbp2  uint16 :offset 20 :size 14)
   (tbw2  uint8  :offset 34 :size 6)
   (tbp3  uint16 :offset 40 :size 14)
   (tbw3  uint8  :offset 54 :size 6)
   )
  :flag-assert #x900000008
  )

(deftype gs-alpha (uint64)
  ((a    uint8 :offset 0  :size 2)
   (b    uint8 :offset 2  :size 2)
   (c    uint8 :offset 4  :size 2)
   (d    uint8 :offset 6  :size 2)
   (fix  uint8 :offset 32 :size 8)
   )
  :flag-assert #x900000008
  )

;; +++gs:gs-tex-wrap-mode
(defenum gs-tex-wrap-mode
  :type uint8
  (repeat 0)
  (clamp 1)
  (region-clamp 2)
  (region-repeat 3)
  )
;; ---gs:gs-tex-wrap-mode

(deftype gs-clamp (uint64)
  ((wms   gs-tex-wrap-mode  :offset 0  :size 2)
   (wmt   gs-tex-wrap-mode  :offset 2  :size 2)
   (minu  uint16 :offset 4  :size 10)
   (maxu  uint16 :offset 14 :size 10)
   (minv  uint16 :offset 24 :size 10)
   (maxv  uint16 :offset 34 :size 10)
   )
  :flag-assert #x900000008
  )

(deftype gs-fog (uint64)
  ((f  uint8 :offset 56 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gs-fogcol (uint64)
  ((fcr  uint8 :offset 0  :size 8)
   (fcg  uint8 :offset 8  :size 8)
   (fcb  uint8 :offset 16 :size 8)
   )
  :flag-assert #x900000008
  )

(deftype gif-ctrl (uint32)
  ((rst  uint8 :offset 0 :size 1)
   (pse  uint8 :offset 3 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-mode (uint32)
  ((m3r  uint8 :offset 0 :size 1)
   (imt  uint8 :offset 2 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-stat (uint32)
  ((m3r    uint8 :offset 0  :size 1)
   (m3p    uint8 :offset 1  :size 1)
   (imt    uint8 :offset 2  :size 1)
   (pse    uint8 :offset 3  :size 1)
   (ip3    uint8 :offset 5  :size 1)
   (p3q    uint8 :offset 6  :size 1)
   (p2q    uint8 :offset 7  :size 1)
   (p1q    uint8 :offset 8  :size 1)
   (oph    uint8 :offset 9  :size 1)
   (apath  uint8 :offset 10 :size 2)
   (dir    uint8 :offset 12 :size 1)
   (fqc    uint8 :offset 24 :size 5)
   )
  :flag-assert #x900000004
  )

(deftype gif-cnt (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (regcnt   uint8  :offset 16 :size 4)
   (vuaddr   uint16 :offset 20 :size 10)
   )
  :flag-assert #x900000004
  )

(deftype gif-p3cnt (uint32)
  ((p3cnt  uint16 :offset 0 :size 15)
   )
  :flag-assert #x900000004
  )

(deftype gif-p3tag (uint32)
  ((loopcnt  uint16 :offset 0  :size 15)
   (eop      uint8  :offset 15 :size 1)
   )
  :flag-assert #x900000004
  )

(deftype gif-bank (structure)
  ((ctrl  gif-ctrl  :offset 0)
   (mode  gif-mode  :offset 16)
   (stat  gif-stat  :offset 32)
   (tag0  uint32  :offset 64)
   (tag1  uint32  :offset 80)
   (tag2  uint32  :offset 96)
   (tag3  uint32  :offset 112)
   (cnt   gif-cnt  :offset 128)
   (p3cnt gif-p3cnt  :offset 144)
   (p3tag gif-p3tag  :offset 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

;; +++gs:gif-flag
(defenum gif-flag
  :type uint8
  (packed 0)
  (reg-list 1)
  (image 2)
  (disable 3)
  )
;; ---gs:gif-flag

(deftype gif-tag-prim (uint32)
  ((id      uint16  :offset 0  :size 14)
   (pre     uint8   :offset 14  :size 1)
   (prim    gs-prim :offset 15  :size 11)
   (flg     gif-flag   :offset 26  :size 2)
   (nreg    uint8   :offset 28  :size 4)
   )
  :flag-assert #x900000004
  )

(deftype gif-tag-count (uint32)
  ((nloop   uint16  :offset 0   :size 15)
   (eop     uint8   :offset 15  :size 1)
   )
  :flag-assert #x900000004
  )

;; +++gs:gif-reg-id
(defenum gif-reg-id
  :type uint8
  (prim 0)
  (rgbaq 1)
  (st 2)
  (uv 3)
  (xyzf2 4)
  (xyz2 5)
  (tex0-1 6)
  (tex0-2 7)
  (clamp-1 8)
  (clamp-2 9)
  (fog 10)
  (xyzf3 12)
  (xyz3 13)
  (a+d 14)
  (nop 15)
  )
;; ---gs:gif-reg-id

(deftype gif-tag64 (uint64)
  ((nloop   uint16  :offset 0   :size 15)
   (eop     uint8   :offset 15  :size 1)
   (id      uint16  :offset 32  :size 14)
   (pre     uint8   :offset 46  :size 1)
   (prim    gs-prim :offset 47  :size 11)
   (flg     gif-flag   :offset 58  :size 2)
   (nreg    uint8   :offset 60  :size 4)
   )
  :flag-assert #x900000008
  )

(deftype gif-tag (uint128)
  ((nloop   uint16 :offset 0   :size 15)
   (eop     uint8  :offset 15  :size 1)
   (id      uint16 :offset 32  :size 14)
   (pre     uint8  :offset 46  :size 1)
   (prim    uint16 :offset 47  :size 11)
   (flg     gif-flag  :offset 58  :size 2)
   (nreg    uint8  :offset 60  :size 4)
   (regs0   gif-reg-id :offset 64  :size 4)
   (regs1   gif-reg-id :offset 68  :size 4)
   (regs2   gif-reg-id :offset 72  :size 4)
   (regs3   gif-reg-id :offset 76  :size 4)
   (regs4   gif-reg-id :offset 80  :size 4)
   (regs5   gif-reg-id :offset 84  :size 4)
   (regs6   gif-reg-id :offset 88  :size 4)
   (regs7   gif-reg-id :offset 92  :size 4)
   (regs8   gif-reg-id :offset 96  :size 4)
   (regs9   gif-reg-id :offset 100 :size 4)
   (regs10  gif-reg-id :offset 104 :size 4)
   (regs11  gif-reg-id :offset 108 :size 4)
   (regs12  gif-reg-id :offset 112 :size 4)
   (regs13  gif-reg-id :offset 116 :size 4)
   (regs14  gif-reg-id :offset 120 :size 4)
   (regs15  gif-reg-id :offset 124 :size 4)
   )
  :flag-assert #x900000010
  )

(deftype gif-tag-regs (uint64)
  ((regs0   gif-reg-id :offset 0  :size 4)
   (regs1   gif-reg-id :offset 4  :size 4)
   (regs2   gif-reg-id :offset 8  :size 4)
   (regs3   gif-reg-id :offset 12  :size 4)
   (regs4   gif-reg-id :offset 16  :size 4)
   (regs5   gif-reg-id :offset 20  :size 4)
   (regs6   gif-reg-id :offset 24  :size 4)
   (regs7   gif-reg-id :offset 28  :size 4)
   (regs8   gif-reg-id :offset 32  :size 4)
   (regs9   gif-reg-id :offset 36 :size 4)
   (regs10  gif-reg-id :offset 40 :size 4)
   (regs11  gif-reg-id :offset 44 :size 4)
   (regs12  gif-reg-id :offset 48 :size 4)
   (regs13  gif-reg-id :offset 52 :size 4)
   (regs14  gif-reg-id :offset 56 :size 4)
   (regs15  gif-reg-id :offset 60 :size 4)
   )
  )

(deftype gif-tag-regs-32 (uint32)
  ((regs0   gif-reg-id :offset 0  :size 4)
   (regs1   gif-reg-id :offset 4  :size 4)
   (regs2   gif-reg-id :offset 8  :size 4)
   (regs3   gif-reg-id :offset 12  :size 4)
   (regs4   gif-reg-id :offset 16  :size 4)
   (regs5   gif-reg-id :offset 20  :size 4)
   (regs6   gif-reg-id :offset 24  :size 4)
   (regs7   gif-reg-id :offset 28  :size 4)
   )
  )

(deftype gs-gif-tag (structure)
  ((qword uint128   :offset-assert 0 :score -1) ;; is "qword" and inline? in game

   (tag   gif-tag64    :offset 0)
   (regs  gif-tag-regs :offset 8)

   (dword uint64 2     :offset 0)
   (word  uint32 4     :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gif-packet (basic)
  "Unused type for building a dynamically sized gif packet."
  ((reg-count int32     :offset-assert 4)

   (gif-tag   gs-gif-tag :inline :offset-assert 16) ;; added
   (gif-tag0  uint128   :offset 16)
   (args      uint64 1 :offset-assert 32)
   )
  (:methods
    (new (symbol type int) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-context (basic)
  ((orgx   int32  :offset-assert 4)
   (orgy   int32  :offset-assert 8)
   (orgz   int32  :offset-assert 12)
   (width  int32  :offset-assert 16)
   (height int32  :offset-assert 20)
   (color  rgba    4 :offset-assert 24)
   )
  (:methods
    (new (symbol type int int int int rgba) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  ;; Failed to read some fields.
  )

(deftype gs-packed-rgba (vector4w)
  ((r int32  :offset 0)
   (g int32  :offset 4)
   (b int32  :offset 8)
   (a int32  :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-xyzw (vector)
  ((ix   int32     :offset 0 :score 10)
   (iy   int32     :offset 4 :score 10)
   (iz   int32     :offset 8 :score 10)
   (iw   int32     :offset 12 :score 10)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-stq (vector)
  ((tex-s float     :offset 0)
   (tex-t float     :offset 4)
   (tex-q float     :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-uv (vector)
  ((u    int16     :offset 0)
   (v    int16     :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gs-packed-gt (structure)
  ((stq  gs-packed-stq  :inline :offset 0)
   (rgba gs-packed-rgba :inline :offset 16)
   (xyzw gs-packed-xyzw :inline :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype gs-packed-gt4 (structure)
  ((data gs-packed-gt 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(define-extern psm-size "Convert texture format to some type of size." (function gs-psm int))
(define-extern psm-page-height "Convert texture format to some type of page height." (function gs-psm int))
(define-extern psm->string "Get the name of a texture format." (function gs-psm string))
(define-extern *fog-color* rgba)
(define-extern open-gif-packet "Initialize an existing gif-packet for 0 registers." (function gif-packet gif-packet))
(define-extern add-reg-gif-packet "Add a register + value to the packet." (function gif-packet int int none))
(define-extern close-gif-packet "Finish adding registers." (function gif-packet int gif-packet))
(define-extern draw-context-set-xy "Set the origin of the draw context." (function draw-context int int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype display-frame (basic)
  ((buffer        dma-buffer        11      :offset-assert 4) ;; guessed by decompiler
   (calc-buf      dma-buffer                :offset 8) ;; guessed by decompiler
   (vu1-buf       dma-buffer                :offset 8) ;; guessed by decompiler
   (debug-buf     dma-buffer                :offset 36) ;; guessed by decompiler
   (global-buf    dma-buffer                :offset 40) ;; guessed by decompiler
   (bucket-group  (inline-array dma-bucket) :offset 44) ;; (inline-array dma-bucket)
   (profile-array profile-array     :inline :offset 48)
   (start-time    uint64                    :offset 56) ;; int64
   (run-time      uint64                    :offset 64) ;; int64
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  (:methods
    (new (symbol type) _type_) ;; 0
    )
  )

(deftype display (basic)
  ((on-screen            int32            :offset-assert 4)
   (last-screen          int32            :offset-assert 8)
   (frames               display-frame 2  :offset-assert 12) ;; guessed by decompiler
   (bgcolor              uint64           :offset-assert 24) ;; gs-bgcolor
   (pmode                uint64           :offset-assert 32) ;; gs-pmode
   (clock                clock         22 :offset-assert 40) ;; guessed by decompiler
   (session-clock        clock            :offset 40) ;; guessed by decompiler
   (game-clock           clock            :offset 44) ;; guessed by decompiler
   (base-clock           clock            :offset 48) ;; guessed by decompiler
   (real-clock           clock            :offset 52) ;; guessed by decompiler
   (frame-clock          clock            :offset 56) ;; guessed by decompiler
   (real-frame-clock     clock            :offset 60) ;; guessed by decompiler
   (target-clock         clock            :offset 64) ;; guessed by decompiler
   (entity-clock         clock            :offset 68) ;; guessed by decompiler
   (part-clock           clock            :offset 72) ;; guessed by decompiler
   (bg-clock             clock            :offset 76) ;; guessed by decompiler
   (camera-clock         clock            :offset 80) ;; guessed by decompiler
   (total-game-clock     clock            :offset 84) ;; guessed by decompiler
   (user0-clock          clock            :offset 88) ;; guessed by decompiler
   (user1-clock          clock            :offset 92)
   (user2-clock          clock            :offset 96)
   (user3-clock          clock            :offset 100)
   (user4-clock          clock            :offset 104)
   (user5-clock          clock            :offset 108)
   (user6-clock          clock            :offset 112)
   (user7-clock          clock            :offset 116)
   (user8-clock          clock            :offset 120)
   (user9-clock          clock            :offset 124)
   (time-factor          float            :offset-assert 128)
   (dog-ratio            float            :offset-assert 132)
   (vblank-start-time    int64         2  :offset-assert 136) ;; guessed by decompiler
   (total-run-time       uint64           :offset-assert 152) ;; int64
   (run-half-speed       symbol           :offset-assert 160)
   (vu1-enable-user      vu1-renderer-mask :offset-assert 168) ;; vu1-renderer-mask
   (vu1-enable-user-menu vu1-renderer-mask :offset-assert 176) ;; vu1-renderer-mask
   (force-sync           uint32           :offset-assert 184)
   (mem-reserve-size     uint32           :offset-assert 188)
   (dma-buffer-overflow  symbol           :offset-assert 192)
   )
  :method-count-assert 10
  :size-assert         #xc4
  :flag-assert         #xa000000c4
  (:methods
    (new (symbol type int int int int int) _type_) ;; 0
    (set-time-ratios (_type_ float) float) ;; 9
    )
  )

(define-extern *pre-draw-hook* (function object none))
(define-extern *post-draw-hook* (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; geometry                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern vector-flatten!
  "Get the projection of src onto a plane with the given normal
   The normal should have magnitude 1.0."
  (function vector vector vector vector))
(define-extern vector-reflect! "Reflect a vector off of a plane." (function vector vector vector vector))
(define-extern vector-reflect-flat!
  "This is a weird one. It doesn't care about the value of src dot normal
   and it effectively replaces the component of src normal to the plane with
   the plane's normal.  I think this requires src/normal to both be unit vectors
   in order to make sense.
   NOTE: src should point from positive halfspace to negative otherwise it
   doesn't work."
  (function vector vector vector vector))
(define-extern vector-reflect-flat-above!
  "Not really a reflect. Same as flatten."
  (function vector vector vector vector))
(define-extern vector-reflect-flat-gravity! (function vector vector vector vector vector))
(define-extern vector-segment-distance-point!
   "Compute the distance from a point to the closest point on the line segment.
    arg0 is the point. arg1/arg2 are the endpoints of the line segment.
    arg3 is an optional output closest point."
  (function vector vector vector vector float))
(define-extern vector-segment-xz-distance-point! (function vector vector vector vector float))
(define-extern vector-line-distance
  "Weird function: given a point arg1, and an infinite line connecting arg2 and arg1, compute the distance
   from arg0 to that line."
  (function vector vector vector float))
(define-extern vector-line-distance-point!
  "Same as above function, but returns the point on arg2/arg1 in arg3 (ignored if #f)"
  (function vector vector vector vector float))
(define-extern vector-line-xz-distance-point! (function vector vector vector vector float))
(define-extern vector-segment-overlap
  "Seems to compute (v1 - v0).dot(v2 - v1), but in a weird way."
  (function vector vector vector float))
(define-extern line-sphere-intersection?
  "Does [arg1, arg2] intersect sphere arg0?"
  (function vector vector vector symbol))
(define-extern nearest-dist2-between-moving-points (function vector vector vector vector float float))
(define-extern vector-orient-by-quat!
  "Rotate a vector by a quaternion."
  (function vector vector quaternion vector))
(define-extern vector-inv-orient-by-quat!
  "Rotate a vector by the inverse rotation."
  (function vector vector quaternion vector))
(define-extern forward-down->inv-matrix
  "Create a matrix representing an inverse transform where arg1 is forward (+z)
   and arg2 is down (-y). Will have the pitch of forward."
  (function matrix vector vector matrix))
(define-extern forward-down-nopitch->inv-matrix
  "Create a matrix representing an inverse transform where arg1 is forward (+z)
   and arg2 is down (-y). Will not use the pitch of forward."
  (function matrix vector vector matrix))
(define-extern forward-up->inv-matrix
  "Create a matrix representing an inverse transform where arg1 is forward (+z)
   and arg2 is up (+y). Will use the pitch of forward."
  (function matrix vector vector matrix))
(define-extern forward-up-nopitch->inv-matrix
  "Create a matrix representing an inverse transform where arg1 is forward (+z)
   and arg2 is up (+y). Will not use the pitch of forward."
  (function matrix vector vector matrix))
(define-extern forward-up-nopitch->quaternion
  "Create a quaternion representing a transform where arg1 is forward (+z)
   and arg2 is up (+y). Will not use the pitch of forward."
  (function quaternion vector vector quaternion))
(define-extern forward-up->quaternion
  "Create a quaternion representing a transform where arg1 is forward (+z)
   and arg2 is up (+y). Will use the pitch of forward."
  (function quaternion vector vector quaternion))
(define-extern quaternion-from-two-vectors!
  "Create a quaternion representing the rotation between two vectors."
  (function quaternion vector vector quaternion))
(define-extern quaternion-from-two-vectors-partial!
  "Create a quaternion representing the rotation between two vectors,
   doing arg3 fraction of the total rotation."
  (function quaternion vector vector float quaternion))
(define-extern quaternion-from-two-vectors-max-angle!
  "Create a quaternion representing the rotation between two vectors,
   allowing at most a rotation of arg3 degrees."
  (function quaternion vector vector float quaternion))
(define-extern quaternion-from-two-vectors-max-angle-partial!
  "Create a quaternion representing the arg4 fraction of the rotation between two vectors,
   allowing at most a rotation of arg3 degrees."
  (function quaternion vector vector float float quaternion))
(define-extern matrix-from-two-vectors!
  "Create a rotation matrix representing the rotation between two vectors."
  (function matrix vector vector matrix))
(define-extern matrix-from-two-vectors-max-angle!
  "Create a rotation matrix representing the rotation between two vectors,
   allowing at most a rotation of arg3 degrees."
  (function matrix vector vector float matrix))
(define-extern matrix-from-two-vectors-smooth!
  "This function can help smoothly rotate from a current heading vector to a target one.
   It returns a rotation to move arg1 closer to arg2, subject to two different speed limits.
   arg3 is a rotations-per-frame rate. This limit takes frame rate into account (when lagging, the rotation is larger)
   arg4 is a 'slow down when getting close to the end' limit.
   This is used in rotate-toward-orientation, which is much improved from jak 1."
  (function matrix vector vector float int matrix))
(define-extern matrix-from-two-vectors-the-long-way-smooth!
  "Same as above, but rotates you away from the target.
   Note that the 'near the end' smoothing will apply when you're near the target."
  (function matrix vector vector float int matrix))
(define-extern quaternion-from-two-vectors-smooth!
  "Same as above, but returns a quaternion."
  (function quaternion vector vector float int quaternion))
(define-extern matrix-from-two-vectors-max-angle-partial!
  "Create a rotation matrix representing the given fraction of the rotation between two heading vectors,
   rotating by at most the given angle."
  (function matrix vector vector float float matrix))
(define-extern matrix-from-two-vectors-partial-linear!
  "Create a rotation matrix representing doing arg3 fraction of the rotation between two vectors."
  (function matrix vector vector float matrix))
(define-extern matrix-remove-z-rot "Remove the z rotation component of a rotation." (function matrix vector matrix))
(define-extern matrix-rot-diff!
  "Get the difference of rotation between two matrices, expressed as a quaternion."
  (function vector matrix matrix float))
(define-extern quaternion-seek
  "Strange quaternion rotate toward function. arg3 is ignored. arg4 is the max seek amount."
  (function quaternion quaternion quaternion float float quaternion))
(define-extern vector-deg-seek
  "Make one vector closer to another, doing at most a rotation by arg3 degrees."
  (function vector vector vector float vector))
(define-extern vector-deg-slerp
  "Slerp for vectors. (imagine that they are the z axis of two frames)"
  (function vector vector vector float vector))
(define-extern vector-vector-deg-slerp! "Unused. No clue what this does." (function vector vector vector float vector vector))
(define-extern normal-of-plane
  "Given three points on a plane, compute the plane's normal."
  (function vector vector vector vector vector))
(define-extern vector-3pt-cross!
  "Cross product of 2 - 1 and 3 - 1. (will give a normal to the plane, but not of magnitude 1)"
  (function vector vector vector vector vector))
(define-extern closest-pt-in-triangle
  "arg2 is the vertices of the triangle, arg3 is the normal, arg1 is the input point, arg0 is the output."
  (function vector vector matrix vector none))
(define-extern point-in-triangle-cross
  "Check if point is in the triangle using cross product check (so you have to get the order of points right)."
  (function vector vector vector vector vector symbol))
(define-extern point-in-plane-<-point+normal!
  "Very strange function. Takes a plane, in point-normal form, then returns some other point on that plane.
   It will move 1m in two of {x, y, z} directions. The direction not moved in is the one which is closest to point-in-triangle-cross
   in the same direction of the normal (this prevent moving huge distances for nearly vertical planes for example)."
  (function vector vector vector vector))
(define-extern circle-circle-xz-intersect
  "This function is unused and really complicated, so not implementing it for now."
  (function sphere sphere vector vector int))
(define-extern circle-test "Test the circle-circle-xz-intersect function." (function none))
(define-extern vector-circle-tangent-new "Unused." (function vector vector vector vector none))
(define-extern vector-circle-tangent "Also unused." (function vector vector vector vector none))
(define-extern find-knot-span
  "Binary serach over knots to find which contains the value float in (arg0 arg1). Unused."
  (function int int float (inline-array vector) int))
(define-extern calculate-basis-functions-vector!
  "Calculate polynomial basis for a given control point."
  (function vector int float (pointer float) vector))
(define-extern curve-evaluate!
  "Evaluate a curve.
   arg0 is the output
   arg1 is the input.
   arg2 is control vertices.
   arg3 is the number of control vertices.
   arg4 is the knot points.
   arg5 is the number of knots."
  (function vector float (inline-array vector) int (pointer float) int vector))
(define-extern curve-get-pos!
  "Get the position on the curve at the given input."
  (function vector float curve vector))
(define-extern curve-length
  "Compute the approximate curve length as the sum of distances between knots."
  (function curve float))
(define-extern curve-copy! "Shallow copy a curve." (function curve curve curve))
(define-extern curve-closest-point
  "Get the input value for the point on the curve. Approximate! And is O(n_knots)."
  (function curve vector float float int float float))
(define-extern vector-plane-distance "Unused." (function vector plane vector float))
(define-extern intersect-ray-plane
  "arg1 is ray direction, arg3 is plane normal, others don't really make sense to me."
  (function vector vector vector vector float))
(define-extern line-line-find-intersection-xz (function vector vector vector vector vector float))
(define-extern segment-segment-find-intersection-xz (function vector vector vector vector float))
(define-extern generate-rand-vector-on-sphere (function vector vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; timer                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern timer-count "Return a timer's counter value." (function timer-bank uint))
(define-extern disable-irq "Disable all interrupts. Has no effect on PC Port." (function none))
(define-extern enable-irq "Enable all interrupts. Has no effect on PC Port." (function none))
(define-extern stopwatch-init "Init a stopwatch." (function stopwatch int))
(define-extern stopwatch-reset "Restart a stopwatch's times." (function stopwatch int))
(define-extern stopwatch-start "Start a stopwatch from scratch." (function stopwatch int))
(define-extern stopwatch-stop "Fully stop a stopwatch and save its elapsed time." (function stopwatch none))
(define-extern stopwatch-begin "Begin a stopwatch level, and starts it if it hasn't yet." (function stopwatch int))
(define-extern stopwatch-end
  "End a stopwatch level. Stops the stopwatch if it's back to level zero.
   There is no guard against ending a stopwatch too many times, and a negative level
   will cause errors!"
  (function stopwatch none))
(define-extern stopwatch-elapsed-ticks
  "Returns the elapsed time so far (in clock cycles) of a stopwatch."
  (function stopwatch time-frame))
(define-extern stopwatch-elapsed-seconds
  "Returns the elapsed time so far (in seconds) of a stopwatch."
  (function stopwatch float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vector                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern vector-cross!
  "Compute the cross product. The w component is set to junk."
  (function vector vector vector vector))
(define-extern vector-xz-cross!
  "Compute the cross product of the xz components of inputs."
  (function vector vector vector vector))
(define-extern vector+float!
  "Add float to each component of vector. The w component is set to 1"
  (function vector vector float vector))
(define-extern vector*! "Elementwise product. Set w = 1." (function vector vector vector vector))
(define-extern vector+*!
  "set arg0 = arg1 + (arg3 * arg2). The w component will be set to 1."
  (function vector vector vector float vector))
(define-extern vector-*!
  "Set arg0 = arg1 - (arg3 * arg2). The w component will be set to 1."
  (function vector vector vector float vector))
(define-extern vector/!
  "Set arg0 = arg1 / arg2. The w component will be set to 1.
   The implementation is kind of crazy."
  (function vector vector vector vector))
(define-extern vector-float*!
  "Multiply all values in a vector by arg2. Set w to 1."
  (function vector vector float vector))
(define-extern vector-average!
  "Set arg0 to the average of arg1 and arg2. Set w to 1."
  (function vector vector vector vector))
(define-extern vector+float*! "arg0 = arg1 + arg2 * arg3." (function vector vector vector float vector))
(define-extern vector--float*!
  "Set arg0 = arg1 - (arg2 * arg3). The w component will be set to 1.
   Is this different from vector-*!"
  (function vector vector vector float vector))
(define-extern vector-min! (function vector vector vector vector))
(define-extern vector-max! (function vector vector vector vector))
(define-extern vector-float/!
  "Divide all components by arg2. The w component will be set to 1."
  (function vector vector float vector))
(define-extern vector-negate! "Negate xyz, set w to 1." (function vector vector vector))
(define-extern vector-negate-in-place! "Negate xyz. Doesn't touch w." (function vector vector))
(define-extern vector=
  "Are the two vectors equal? Does not compare the w component.
   The implementation is cool."
  (function vector vector symbol))
(define-extern vector-delta
  "Sum of the elementwise absolute value of differences."
  (function vector vector float))
(define-extern vector-seek!
  "Seek arg0 toward arg1. The arg0 is both read and written.
   arg2 is saturated to (0, 1)"
  (function vector vector float vector))
(define-extern vector-smooth-seek!
  "Smoothly seek vec toward target.
   The step always points toward the target and has length (dist * alpha).
   If the step is longer than max-step, the step is projected onto a _square_ with side length arg2.
   Note that this doesn't project to a circle like the function below..."
  (function vector vector float vector))
(define-extern vector-seek-2d-xz-smooth!
  "Smoothly seek vec's x and z components toward target.
   The step always points toward the target and has length (dist * alpha).
   If the step is longer than max-step, the step is projected onto a circle of radius max-step.
   Doesn't touch y or w."
  (function vector vector float float vector))
(define-extern vector-seek-2d-yz-smooth!
  "Smoothly seek vec's y and z components toward target.
   The step always points toward the target and has length (dist * alpha).
   If the step is longer than max-step, the step is projected onto a circle of radius max-step.
   Doesn't touch x or w."
  (function vector vector float float vector))
(define-extern vector-seek-3d-smooth!
  "Smoothly seek vec's x, y, and z components toward target.
   The step always points toward the target and has length (dist * alpha).
   If the step is longer than max-step, the step is projected onto a circle of radius max-step.
   Doesn't touch w."
  (function vector vector float float vector))
(define-extern seek-with-smooth
  "Move value closer to target.
   If we are within deadband, just go straight to target.
   If not, try to go alpha*err. If that is a larger step than max-step, limit to max-step"
  (function float float float float float float))
(define-extern vector-identity! "Set arg0 to 1, 1, 1, 1." (function vector vector))
(define-extern vector-seconds
  "Convert from actual seconds to the seconds unit."
  (function vector vector vector))
(define-extern vector-seconds!
  "Convert from actual seconds to seconds, in place."
  (function vector vector))
(define-extern vector-v!
  "Convert a velocity to a displacement per frame. The velocity should be in X/actual_second.
   Uses the current process clock."
  (function vector vector))
(define-extern vector-v+!
  "Euler forward step, using the current display time settings."
  (function vector vector vector vector))
(define-extern vector-v*float+!
  "Euler forward step, scaling velocity by velocity-scale."
  (function vector vector vector float vector))
(define-extern vector-v++!
  "Update position in place, using display's current timing."
  (function vector vector vector))
(define-extern vector-v*float!
  "Go from velocity to delta-p per frame, scaling by scale."
  (function vector vector float vector))
(define-extern vector-v*float++!
  "Update position with given velocity, scaled by scale."
  (function vector vector float vector))
(define-extern vector-to-ups!
  "Go from units per frame to units per second?"
  (function vector vector vector))
(define-extern vector-from-ups!
  "Go from units per second to units per frame?"
  (function vector vector vector))
(define-extern vector-length
  "Get the length of the xyz part."
  (function vector float))
(define-extern vector-length-squared
  "Get the squared length of the xyz part."
  (function vector float))
(define-extern vector-xz-length-squared
  "Get the length of the xz part, squared."
  (function vector float))
(define-extern vector-xz-length "Get the length of the xz part." (function vector float))
(define-extern vector-vector-distance
  "Subtract the xyz parts and get the norm."
  (function vector vector float))
(define-extern vector-vector-distance-squared
  "Squared norm of the difference of the xyz parts."
  (function vector vector float))
(define-extern vector-vector-xz-distance "Distance on the xz plane." (function vector vector float))
(define-extern vector-vector-xy-distance "distance on the xy plane." (function vector vector float))
(define-extern vector-vector-xz-distance-squared "Distance on the xz plane squared." (function vector vector float))
(define-extern vector-vector-planar-distance (function vector vector vector float))
(define-extern vector-normalize!
  "Modify arg0 in place to have length arg1 for its xyz components. The w part is not changed."
  (function vector float vector))
(define-extern vector-normalize-ret-len!
  "Modify arg0 in place to have length arg1 for its xyz components.
   The w part isn't changed and the _original_ length is returned."
  (function vector float float))
(define-extern vector-normalize-copy!
  "Normalize, but not in place.
   This implementation is very good compared to the vector-normalize! one.
   The w component is set to 1."
  (function vector vector float vector))
(define-extern vector-xz-normalize! "Normalize, xz components only." (function vector float vector))
(define-extern vector-xz-normalize-copy! "Normalize, xz components only." (function vector vector float vector))
(define-extern vector-length-max!
  "Make vector at most arg1 length (xyz only).
   If it is larger, project onto sphere.
   Doesn't touch w"
  (function vector float vector))
(define-extern vector-xz-length-max!
  "Make vector at most arg1 length (xz only).
   It it is larger, project onto circle.
   Doesn't touch w or y."
  (function vector float vector))
(define-extern vector-rotate-around-x! "Rotate a vector around the x axis." (function vector vector float vector))
(define-extern vector-rotate-around-y! "Rotate a vector around the y axis." (function vector vector float vector))
(define-extern vector-rotate90-around-y! "Rotate a vector 90 degrees around y." (function vector vector vector))
(define-extern vector-rotate-around-z! "Rotate a vector around the z axis." (function vector vector float vector))
(define-extern rotate-y<-vector+vector
  "Get the y rotation between vectors. These should have the same length."
  (function vector vector float))
(define-extern rotate-x<-vector+vector
  "Get the x rotation between vectors. These should have the same length."
  (function vector vector float))
(define-extern rotate-z<-vector+vector
  "Get the z rotation between vectors. These should have the same length."
  (function vector vector float))
(define-extern rotate-vector-to-vector (function vector vector vector vector))
(define-extern vector-cvt.w.s! "Convert float to int32. Truncate." (function vector vector vector))
(define-extern vector-cvt.s.w! "Convert float to int32." (function vector vector vector))
(define-extern rot-zxy-from-vector!
  "I think this gives you a vector of euler angles to rotate some unit vector
   to arg1."
  (function vector vector vector))
(define-extern rot-zyx-from-vector!
  "I think this gives you a vector of euler angles to rotate some unit vector
   to arg1."
  (function vector vector vector))
(define-extern vector-lerp!
  "Linearly interpolate between two vectors. Alpha isn't clamped.
   w will be set to 1."
  (function vector vector vector float vector))
(define-extern vector-lerp-clamp!
  "Linearly interpolate between two vectors, clamping alpha to 0, 1.
   w will be set to 1."
  (function vector vector vector float vector))
(define-extern vector4-lerp!
  "Interpolate all 4 elements of a vector. Alpha is not clamped."
  (function vector vector vector float vector))
(define-extern vector4-lerp-clamp!
  "Interpolate all 4 elements of a vector. Alpha is clamped to [0, 1]."
  (function vector vector vector float vector))
(define-extern vector-degi
  "Convert a vector (in _rotations_) to degrees units, stored in an int.
   Truncates to the nearest _rotation_.
   Neither the input or output is a commonly used form.
   Unsurprisingly, this strange function is never used."
  (function vector vector vector))
(define-extern vector-degf
  "Convert a vector (in integer degree units) to floating point rotations.
   Truncates to the nearest _rotation_.
   Like the previous function, this is stupid and unused."
  (function vector vector vector))
(define-extern vector-degmod
  "This one is actually right. Wraps degrees units (in floats, like they should be)
   to +/- half a rotation."
  (function vector vector vector))
(define-extern vector-deg-diff
  "Wrapped difference, degrees units. Will have the usual 16-bit accuracy issue."
  (function vector vector vector none))
(define-extern vector-deg-lerp-clamp!
  "Apply deg-lerp-clamp to the xyz components of a vector. Sets w = 1."
  (function vector vector vector float vector))
(define-extern vector3s-copy! (function vector vector vector))
(define-extern vector3s+! (function vector vector vector vector))
(define-extern vector3s*float! (function vector vector float vector))
(define-extern vector3s-! (function vector vector vector vector))
(define-extern vector4-add! "Add 2 vector4s." (function vector4 vector4 vector4 none))
(define-extern vector4-sub! "Subtract 2 vector4s." (function vector4 vector4 vector4 none))
(define-extern vector4-mul! "Multiple 2 vector4s." (function vector4 vector4 vector4 none))
(define-extern vector4-scale! "arg0 = arg1 * arg2." (function vector4 vector4 float none))
(define-extern vector4-madd! "arg0 = arg1 + arg2 * arg3." (function vector4 vector4 vector4 float none))
(define-extern vector4-msub! "arg0 = arg1 - arg2 * arg3." (function vector4 vector4 vector4 float none))
(define-extern vector4-array-add! "Apply vector4-add! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-sub! "Apply vector4-sub! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-mul! "Apply vector4-mul! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) int none))
(define-extern vector4-array-scale! "Apply vector4-scale! to all arrays." (function (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-madd! "Apply vector4-madd! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-msub! "Apply vector4-msub! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int none))
(define-extern vector4-array-lerp! "Apply vector4-lerp! to all arrays." (function (inline-array vector4) (inline-array vector4) (inline-array vector4) float int symbol))
(define-extern spheres-overlap? "Do the spheres overlap?" (function sphere sphere symbol))
(define-extern sphere<-vector!
  "Set the position of the sphere to arg1. Does not change the radius."
  (function sphere vector sphere))
(define-extern sphere<-vector+r!
  "Set the position of the sphere from arg1 and the radius from arg2."
  (function sphere vector float sphere))
(define-extern rand-vu-sphere-point!
  "Get a random point on the sphere at the origin with radius arg1.
   The point is on the surface of the sphere."
  (function vector float vector))
(define-extern rand-vu-sphere-point-uniform! (function vector float vector))
(define-extern vector-vector-angle-safe
  "Get the angle between two vectors, with some 'safety' applied..."
  (function vector vector float))
(define-extern vector-get-unique! (function vector vector vector))
(define-extern vector-get-closest-perpendicular! (function vector vector vector vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; file-io                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++file-io:file-kind
(defenum file-kind
  :bitfield #f
  (level-bt 0) ;; aka bsp-header.
  (art-group 1)
  (tpage 2)
  (dir-tpage 3)
  (level-vs 4)
  (tx 5)
  (vis 6)
  (map 7)
  )
;; ---file-io:file-kind

(deftype file-stream (basic)
  ((flags uint32  :offset-assert 4)
   (mode  symbol  :offset-assert 8)
   (name  string  :offset-assert 12)
   (file  uint32  :offset-assert 16)
   )
  (:methods
    (new (symbol type string symbol) _type_)
    )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype file-info (basic)
  ((file-type      (pointer string) :offset-assert 4) ;; guessed by decompiler
   (file-name      string           :offset-assert 8)
   (major-version  uint32           :offset-assert 12)
   (minor-version  uint32           :offset-assert 16)
   (maya-file-name string           :offset-assert 20)
   (tool-debug     string           :offset-assert 24)
   (mdb-file-name  string           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern file-stream-read-string
  "Fill a string with data from a file stream.
   Note: this function does not work."
  (function file-stream string string))
(define-extern *file-temp-string* string)
(define-extern make-file-name
  "Get a file name to open a file with the given kind and name.
   The art-group-version argument can be used to override the version
   of the art-group. Set it to 0 or less to use the default version.
   Similar to MakeFileName in C.
   Note: file type enum is different between C and GOAL.
   File versions should match those in versions.h.
   Uses a single *file-temp-string* buffer, shared with make-vfile-name.
   arg3 is unused."
  (function file-kind string int symbol string))
(define-extern make-vfile-name
  "Make virtual? file name. This makes a name that the kernel knows how to
   handle in a specific way. This function is not used."
  (function file-kind string string))
(define-extern file-info-correct-version?
  "Check if the version and kind in the info is valid. The `version-override` can specify a
   non-default version, or set to 0 for the default version."
  (function file-info file-kind int symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; loader-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type art basic)
(declare-type art-group art)
(define-extern art-group type)

(deftype load-dir (basic)
  "`load-dir` is an array of references to loaded things.
   It's used to handle art groups that are loaded as part of a level load."
  ((lev level :offset-assert 4)
   (string-array (array string) :offset-assert 8) ;; these are the names
   (data-array (array basic) :score -50 :offset-assert 12) ;; this is the file data.
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (new (symbol type int level) _type_) ;; 0
    (load-to-heap-by-name (_type_ string symbol kheap int) art-group) ;; 9
    (set-loaded-art (_type_ art-group) art-group) ;; 10
    )
  )

(deftype load-dir-art-group (load-dir)
  "Specialization of load-dir for `art-group`s."
  ((art-group-array (array art-group) :offset 12)
   )
  :flag-assert #xb00000010
  (:methods
    (new (symbol type int level) _type_) ;; 0
    )
  )

(deftype external-art-buffer (basic)
  "An `external-art-buffer` is a buffer that streamed files use."
  ((index                      int32                                         :offset-assert 4)
   (other                      external-art-buffer                           :offset-assert 8) ;; guessed by decompiler
   (status                     symbol                                        :offset-assert 12) ;; guessed by decompiler
   (locked?                    symbol                                        :offset-assert 16) ;; guessed by decompiler
   (login?                     symbol                                        :offset-assert 20) ;; guessed by decompiler
   (frame-lock                 symbol                                        :offset-assert 24) ;; guessed by decompiler
   (init-heap                  (function external-art-buffer object)         :offset-assert 28) ;; guessed by decompiler
   (heap                       kheap                                 :inline :offset-assert 32)
   (pending-load-file          string                                        :offset-assert 48) ;; guessed by decompiler
   (pending-load-file-part     int32                                         :offset-assert 52)
   (pending-load-file-owner    handle                                        :offset-assert 56) ;; handle
   (pending-load-file-priority float                                         :offset-assert 64)
   (load-file                  string                                        :offset-assert 68) ;; guessed by decompiler
   (load-file-part             int32                                         :offset-assert 72)
   (load-file-owner            handle                                        :offset-assert 80) ;; handle
   (load-file-priority         float                                         :offset-assert 88)
   (buf                        pointer                                       :offset-assert 92) ;; guessed by decompiler
   (len                        int32                                         :offset-assert 96)
   (art-group                  art-group                                     :offset-assert 100) ;; guessed by decompiler
   (art-data                   uint32                                        :offset 100)
   )
  :method-count-assert 16
  :size-assert         #x68
  :flag-assert         #x1000000068
  (:methods
    (new (symbol type int function symbol) _type_) ;; 0
    (set-pending-file (_type_ string int handle float) int) ;; 9
    (update (_type_) int) ;; 10
    (inactive? (_type_) symbol) ;; 11
    (file-status (_type_ string int) symbol) ;; 12
    (link-file (_type_ art-group) art-group) ;; 13
    (unlink-file (_type_ art-group) int) ;; 14
    (unlock! (_type_) int) ;; 15
    )
  )

(deftype spool-anim (basic)
  "A `spool-anim` is metadata for an animation that will be loaded in chunks
   to a pair of external-art-buffers."
  ((name         string  :offset 16) ;; guessed by decompiler
   (anim-name    string  :offset-assert 20)
   (buffer       external-art-buffer :offset 20 :score -1) ;; added
   (parts        int32   :offset-assert 24)
   (hint-id      int32   :offset 24)
   (priority     float   :offset-assert 28)
   (owner        handle  :offset-assert 32) ;; handle
   (command-list pair    :offset-assert 40) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype external-art-control (basic)
  "The `external-art-control` manages loading chunks from `spool-anim`s to `external-art-buffer`."
  ((buffer                   external-art-buffer 2       :offset-assert 4) ;; guessed by decompiler
   (rec                      spool-anim          3 :inline :offset-assert 16) ;; guessed by decompiler
   (spool-lock               handle                      :offset-assert 160) ;; handle
   (reserve-buffer           external-art-buffer         :offset-assert 168) ;; guessed by decompiler
   (reserve-buffer-count     int16                       :offset-assert 172)
   (dma-reserve-buffer-count int16                       :offset-assert 174)
   (active-stream            string                      :offset-assert 176) ;; guessed by decompiler
   (queue-stream             (array spool-anim)          :offset-assert 180) ;; guessed by decompiler
   (frame-mask               uint32                      :offset-assert 184)
   (dma-reserve-heap         kheap               :inline :offset-assert 192)
   )
  :method-count-assert 16
  :size-assert         #xd0
  :flag-assert         #x10000000d0
  (:methods
    (new (symbol type) _type_) ;; 0
    (update (_type_ symbol) int) ;; 9
    (clear-rec (_type_) int) ;; 10
    (spool-push (_type_ string int process float) int) ;; 11
    (file-status (_type_ string int) symbol) ;; 12
    (reserve-alloc (_type_) kheap) ;; 13
    (reserve-free (_type_ kheap) int) ;; 14
    (none-reserved? (_type_) symbol) ;; 15
    )
  )

(deftype subtitle-range (basic)
  ((start-frame float      :offset-assert 4)
   (end-frame   float      :offset-assert 8)
   (message     basic   12 :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype subtitle-image (basic)
  ((width   uint16          :offset-assert 4)
   (height  uint16          :offset-assert 6)
   (palette rgba   16       :offset 16) ;; guessed by decompiler
   (data    uint8  :dynamic :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type texture-page basic)

(deftype texture-id (uint32)
  "Unique identifier for a texture
   as the tpage number and index of the texture within the tpage."
  ((index  uint16 :offset 8  :size 12)
   (page   uint16 :offset 20 :size 12)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-pool-segment (structure)
  "A chunk of VRAM."
  ((dest uint32  :offset-assert 0)
   (size uint32  :offset-assert 4)
   )
  :allow-misaligned
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype texture-pool (basic)
  "The manager for the VRAM."
  ((top                      int32                                                               :offset-assert 4)
   (cur                      int32                                                               :offset-assert 8)
   (allocate-func            (function texture-pool texture-page kheap int texture-page)         :offset-assert 12) ;; guessed by decompiler
   (font-palette             int32                                                               :offset-assert 16)
   (segment                  texture-pool-segment                                      4 :inline :offset-assert 20) ;; guessed by decompiler
   (segment-near             texture-pool-segment                                        :inline :offset 20)
   (segment-common           texture-pool-segment                                        :inline :offset 28)
   (common-page              texture-page                                                32      :offset-assert 52) ;; guessed by decompiler
   (common-page-mask         int32                                                               :offset-assert 180)
   (update-sprites-flag      symbol                                                              :offset-assert 184) ;; guessed by decompiler
   (update-flag              symbol                                                              :offset-assert 188) ;; guessed by decompiler
   (texture-enable-user      texture-enable-mask                                                 :offset-assert 192) ;; texture-enable-mask
   (texture-enable-user-menu texture-enable-mask                                                 :offset-assert 200) ;; texture-enable-mask
   (ids                      uint32                                                      128     :offset-assert 208) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x2d0
  :flag-assert         #x1a000002d0
  (:methods
    (new "Allocate and initialize a texture pool." (symbol type) _type_) ;; 0
    (initialize! "Set up a texture-pool and do the initial division of VRAM." (_type_) _type_) ;; 9
    (print-usage (_type_) _type_) ;; 10
    (setup-font-texture "Set up the font texture. In normal use, the font texture is allocated, and currently uploaded to, the common segment.
                         This function copies that to the unused upper 8-bits of the depth buffer, and sets up the font
                         renderer to point to that address." (_type_) none) ;; 11
    (allocate-defaults "Allocate the common segment and set up dynamic texture addresses" (_type_) none) ;; 12
    (login-level-textures "Login all textures for the given level." (_type_ level int (pointer texture-id)) none) ;; 13
    (add-level-tpage-dma "Set up DMA to upload all textures needed to draw this level on this frame." (_type_ level tpage-category bucket-id) none) ;; 14
    (allocate-vram-words! "Increment the bump allocator to allocate vram, by words." (_type_ int) int) ;; 15
    (allocate-segment "Allocate VRAM for a texture-pool-segment" (_type_ texture-pool-segment int) texture-pool-segment) ;; 16
    (unload-page "Remove a page from the texture pool." (_type_ texture-page) none) ;; 17
    (get-common-page-slot-by-id "Unsupported in jak 3, returns -1 always." (_type_ int) int) ;; 18
    (update-warp-and-hud "Redo warp and hud textures with the current set of loaded levels." (_type_) none) ;; 19
    (update-sprites "Redo sprite texture addresses with the current set of loaded levels." (_type_) none) ;; 20
    (mark-hud-warp-sprite-dirty "Set update flags for hud/sprite/warp. Needed after level load or unload." (_type_) none) ;; 21
    (lay-out-sprite-tex "Lay out VRAM addresses for sprite rendering, which is done in one pass for all levels." (_type_) none) ;; 22
    (lay-out-hud-tex "Lay out VRAM addresses for HUD rendering, which is done all at one for all levels." (_type_) none) ;; 23
    (lay-out-warp-tex "Lay out VRAM addresses for WARP texture rendering, and update adgifs to point to the new address." (_type_) none) ;; 24
    (clear-ids "Reset all cached texture upload IDs. This must be done whenever a texture has its vram address changed." (_type_) none) ;; 25
    )
  )

(deftype texture-mask (structure)
  "Mask where each bit indicates if some part of a tpage is used, by a texture.
   Additionally, the w component holds a minimum distance. The texture is only needed
   if the distance to the object is smaller than this."
  ((mask vector4w :inline :offset-assert 0)
   (dist float            :offset 12 :score 1)
   (long uint64   2       :offset 0) ;; guessed by decompiler
   (quad uint128          :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype texture-masks (structure)
  "Grouping of three masks, corresponding to the 3 segments of the texture.
   So mask 0 is needed if segment 0 of the texture is needed, etc..."
  ((data texture-mask 3 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype texture-masks-array (inline-array-class)
  "Group of all texture-masks for a given tpage."
  ((data texture-masks :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype texture (basic)
  "Metadata for a texture."
  ((w            int16                 :offset-assert 4)
   (h            int16                 :offset-assert 6)
   (num-mips     uint8                 :offset-assert 8)
   (tex1-control uint8                 :offset-assert 9)
   (psm          uint8                 :offset-assert 10) ;; gs-psm
   (mip-shift    uint8                 :offset-assert 11)
   (clutpsm      uint16                :offset-assert 12)
   (dest         uint16        7       :offset-assert 14) ;; guessed by decompiler
   (clutdest     uint16                :offset-assert 28)
   (width        uint8         7       :offset-assert 30) ;; guessed by decompiler
   (name         string                :offset-assert 40) ;; guessed by decompiler
   (size         uint32                :offset-assert 44)
   (uv-dist      float                 :offset-assert 48)
   (pad          uint32        3       :offset-assert 52) ;; guessed by decompiler
   (masks        texture-masks :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype texture-page-segment (structure)
  "Metadata for a 'segment' of a texture page.
   Each texture page has 3 segments - smaller number segments have higher detail mips."
  ((block-data pointer  :offset-assert 0) ;; guessed by decompiler
   (size       uint32   :offset-assert 4)
   (dest       uint32   :offset-assert 8)
   )
  :allow-misaligned
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; +++texture-h:tex-upload-mode
(defenum tex-upload-mode
  (none     -3)
  (seg0-1   -2)
  (seg0-1-2 -1)
  (seg0      0)
  (seg2      2)
  )
;; ---texture-h:tex-upload-mode

(deftype texture-page (basic)
  "A collection of textures. There is a tpage per category per level.
   These tpages are loaded from the DVD.
   e.g.: prison tfrag is its own tpage.
   The tpage has multiple textures, and 3 segments.
   Lower number segments are larger and have hi-res versions of textures."
  ((info      file-info                     :offset-assert 4) ;; guessed by decompiler
   (name      string                        :offset-assert 8) ;; guessed by decompiler
   (id        uint32                        :offset-assert 12)
   (length    int32                         :offset-assert 16)
   (mip0-size uint32                        :offset-assert 20)
   (size      uint32                        :offset-assert 24)
   (segment   texture-page-segment 3 :inline :offset-assert 28) ;; guessed by decompiler
   (dram-size uint32                        :offset-assert 64)
   (vram-size uint32                        :offset-assert 68)
   (pad       uint32               14       :offset-assert 72) ;; guessed by decompiler
   (data      texture              :dynamic :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x80
  :flag-assert         #xe00000080
  (:methods
    (relocate "Handle a texture page that has been loaded by the linker.
               This must run in the linker, since we sometimes kick out textures from the loading heap, which
               requires no more allocations made after the texture, and the only time is right after the linker
               does the allocation for this GOAL object file."
               (_type_ kheap (pointer uint8)) texture-page :replace) ;; 7
    (remove-data-from-heap "Bump the kheap pointer to discard this texture data. All metadata is kept.
                            This is only safe to use if the last thing on the kheap is this texture." (_type_ kheap) _type_) ;; 9
    (get-leftover-block-count "Unused - statistics for how much unused memory we have" (_type_ int int) int) ;; 10
    (relocate-dests! "Update the metadata of this texture so it points to a new vram address." (_type_ int int) none) ;; 11
    (add-to-dma-buffer "Add upload DMA to a DMA buffer. Wrapper for upload-vram-data." (_type_ dma-buffer tex-upload-mode) int) ;; 12
    (upload-now! "Upload a texture to VRAM immediately, wait for DMA to finish." (_type_ tex-upload-mode) none) ;; 13
    )
  )

(declare-type adgif-shader structure)
(deftype shader-ptr (uint32)
  "A pointer to an adgif-shader, stored in bits 8-32. This allows them to fit into
   an adgif shader easily."
  ((first-8 uint8 :offset 0 :size 8) ;; added
   (shader uint32 :offset 8 :size 24)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-link (structure)
  "An overlay structure containing a shader-ptr that points to the next adgif-shader
   in a linked list."
  ((next shader-ptr 1  :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype texture-page-dir-entry (structure)
  "An entry for a texture in the texture-page-dir.
   The texture-page-dir contains an entry for each tpage.
   Each entry contains a reference to the tpage, and a linked list of shaders
   using it."
  ((length int16         :offset-assert 0)
   (status uint16        :offset-assert 2)
   (page   texture-page  :offset-assert 4) ;; guessed by decompiler
   (link   texture-link  :offset-assert 8) ;; guessed by decompiler
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-page-dir (basic)
  "The list of all texture pages.
   This is static data loaded from the DVD at boot."
  ((length int32)
   (entries texture-page-dir-entry 1 :inline)
   )
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace) ;; 7
    (unlink-shaders-in-heap "Iterate through all adgifs, splicing out ones that are in the given heap." (_type_ kheap) int) ;; 9
    )
  :flag-assert #xa00000014
  )

(deftype texture-relocate-later (basic)
  "Unused in Jak 2, but metadata for postponing tpage copies until a second frame,
   to have a smaller impact on frame times when loading."
  ((memcpy symbol                  :offset-assert 4) ;; guessed by decompiler
   (dest   uint32                  :offset-assert 8)
   (source uint32                  :offset-assert 12)
   (move   uint32                  :offset-assert 16)
   (entry  texture-page-dir-entry  :offset-assert 20)
   (page   texture-page            :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; +++texture-h:link-test-flags
(defenum link-test-flags
  :type uint32
  :bitfield #t
  (needs-log-in 8)
  (bit-9 9)
  (backup-sprite-tex 10) ;; set when particle-setup-adgif fails texture lookup.
  )
;; ---texture-h:link-test-flags

(deftype adgif-shader (structure)
  "GS texturing/blending settings, called adgif-shader.
   These are used by many different renderers and partially managed by the texture system.
   For example, the texture system will automatically update tbp to point to the location
   of the texture."
  ((quad       qword           5 :inline :offset-assert 0 :score -100) ;; guessed by decompiler
   (prims      gs-reg64        10 :offset 0 :score -100) ;; guessed by decompiler
   (reg-0      uint8              :offset 8)
   (reg-1      uint8              :offset 24)
   (reg-2      uint8              :offset 40)
   (reg-3      uint8              :offset 56)
   (reg-4      uint8              :offset 72)
   (tex0       gs-tex0             :offset 0) ;;
   (tex1       gs-tex1             :offset 16) ;;
   (miptbp1    gs-miptbp             :offset 32) ;;
   (clamp      gs-clamp             :offset 48) ;; gs-clamp
   (clamp-reg  gs-reg64             :offset 56) ;;
   (alpha      gs-alpha             :offset 64) ;;
   (link-test  link-test-flags    :offset 8) ;; guessed by decompiler
   (texture-id texture-id         :offset 24) ;; guessed by decompiler
   (next       shader-ptr         :offset 40) ;; guessed by decompiler
   ;(alpha-as-miptb2 gs-miptbp :offset 64) ;; added!!
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype adgif-shader-array (inline-array-class)
  ((data adgif-shader :inline :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype texture-base (structure)
  "Metadata about an area of VRAM set aside for fancy dynamic texture effects
   (sky, eye, etc)."
  ((vram-page  uint32  :offset-assert 0)
   (vram-block uint32  :offset-assert 4)
   (vram-word  uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype texture-page-translate-item (structure)
  ((bucket             bucket-id                :offset-assert 0) ;; bucket-id
   (level-index        uint32                   :offset-assert 4)
   (level-texture-page tpage-category-u32       :offset-assert 8) ;; guessed by decompiler
   (texture-user       texture-enable-mask-u32  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *texture-masks* texture-masks)
(define-extern *texture-masks-array* texture-masks-array)
(define-extern texture-mip->segment
  "Figure out which segment of a tpage a given mip level of a texture will be in.
   arg0 is the mip level, arg1 is the total number of mips.
   Higher mip level is lower detail."
  (function int int int))
(define-extern *texture-relocate-later* texture-relocate-later)
(define-extern *texture-page-dir* texture-page-dir)
(define-extern ct32-24-block-table (array int32))
(define-extern mz32-24-block-table (array int32))
(define-extern ct16-block-table (array int32))
(define-extern ct16s-block-table (array int32))
(define-extern mz16-block-table (array int32))
(define-extern mz16s-block-table (array int32))
(define-extern mt8-block-table (array int32))
(define-extern mt4-block-table (array int32))
(define-extern *texture-page-translate* (array texture-page-translate-item))
(define-extern *eyes-texture-base* texture-base)
(define-extern *skull-gem-texture-base* texture-base)
(define-extern *ocean-texture-base* texture-base)
(define-extern *ocean-envmap-texture-base* texture-base)
(define-extern *grey-scale-base* texture-base)
(define-extern *map-texture-base* texture-base)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype texture-anim-layer (structure)
  ((extra           vector                                                          :inline :offset 240)
   (func            (function dma-buffer uint int int texture-anim-layer float int)         :offset-assert 256) ;; guessed by decompiler
   (func-id         symbol                                                                  :offset-assert 256 :overlay-at func) ;; guessed by decompiler
   (init-func       (function texture-anim-layer int)                                       :offset-assert 260) ;; guessed by decompiler
   (init-func-id    symbol                                                                  :offset-assert 260 :overlay-at init-func) ;; guessed by decompiler
   (tex             texture                                                                 :offset-assert 264) ;; guessed by decompiler
   (start-time      float                                                                   :offset-assert 268)
   (end-time        float                                                                   :offset-assert 272)
   (tex-name        string                                                                  :offset-assert 276) ;; guessed by decompiler
   (test            gs-test                                                                 :offset-assert 280) ;; gs-test
   (alpha           gs-alpha                                                                :offset-assert 288) ;; gs-alpha
   (clamp           gs-clamp                                                                :offset-assert 296) ;; gs-clamp
   (start-color     vector                                                          :inline :offset 80)
   (start-scale     vector2                                                         :inline :offset 96)
   (start-offset    vector2                                                         :inline :offset 104)
   (start-st-scale  vector2                                                         :inline :offset 112)
   (start-st-offset vector2                                                         :inline :offset 120)
   (start-qs        vector                                                          :inline :offset 128)
   (start-rot       degrees                                                                 :offset 144) ;; degrees
   (start-st-rot    degrees                                                                 :offset 148) ;; degrees
   (end-color       vector                                                          :inline :offset 160)
   (end-scale       vector2                                                         :inline :offset 176)
   (end-offset      vector2                                                         :inline :offset 184)
   (end-st-scale    vector2                                                         :inline :offset 192)
   (end-st-offset   vector2                                                         :inline :offset 200)
   (end-qs          vector                                                          :inline :offset 208)
   (end-rot         degrees                                                                 :offset 224) ;; degrees
   (end-st-rot      degrees                                                                 :offset 228) ;; degrees
   )
  :method-count-assert 11
  :size-assert         #x130
  :flag-assert         #xb00000130
  (:methods
    (initialize-texture! (_type_) _type_) ;; 9
    (clear-texture! (_type_) _type_) ;; 10
    )
  )

(deftype texture-anim (structure)
  ((num-layers   uint32                                          :offset-assert 0)
   (func         (function dma-buffer texture-anim int)          :offset-assert 4) ;; guessed by decompiler
   (func-id      symbol                                          :offset-assert 4 :overlay-at func) ;; guessed by decompiler
   (init-func    (function texture-anim int)                     :offset-assert 8) ;; guessed by decompiler
   (init-func-id symbol                                          :offset-assert 8 :overlay-at init-func) ;; guessed by decompiler
   (tex          texture                                         :offset-assert 12) ;; guessed by decompiler
   (tex-name     string                                          :offset-assert 16) ;; guessed by decompiler
   (extra        vector                                 :inline  :offset-assert 32)
   (color        rgba                                            :offset-assert 48) ;; guessed by decompiler
   (frame-time   float                                           :offset-assert 52)
   (frame-delta  float                                           :offset-assert 56)
   (frame-mod    float                                           :offset-assert 60)
   (test         gs-test                                         :offset-assert 64) ;; gs-test
   (alpha        gs-alpha                                        :offset-assert 72) ;; gs-alpha
   (clamp        gs-clamp                                        :offset-assert 80) ;; gs-clamp
   (data         texture-anim-layer                     :dynamic :offset-assert 88) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x58
  :flag-assert         #xb00000058
  (:methods
    (init-textures! (_type_) _type_) ;; 9
    (clear-textures! (_type_) _type_) ;; 10
    )
  )

(deftype texture-anim-array (array)
  ()
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (init! (_type_) _type_) ;; 9
    (clear! (_type_) _type_) ;; 10
    )
  )

(deftype texture-anim-work (structure)
  ((erase-tmpl   dma-gif-packet :inline :offset-assert 0)
   (draw-tmpl    dma-gif-packet :inline :offset-assert 32)
   (draw2-tmpl   dma-gif-packet :inline :offset-assert 64)
   (fill-tmpl    dma-gif-packet :inline :offset-assert 96)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 128)
   (corner0      vector         :inline :offset-assert 160)
   (corner1      vector         :inline :offset-assert 176)
   (corner2      vector         :inline :offset-assert 192)
   (corner3      vector         :inline :offset-assert 208)
   (const        vector         :inline :offset-assert 224)
   (color        vector4w       :inline :offset-assert 240)
   (random       vector4w       8 :inline       :offset-assert 256) ;; guessed by decompiler
   (random-index uint8                  :offset-assert 384)
   )
  :method-count-assert 9
  :size-assert         #x181
  :flag-assert         #x900000181
  )

(deftype clut16x16 (structure)
  ((clut rgba 256 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype noise8x8 (structure)
  ((image uint8 64 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype noise16x16 (structure)
  ((image uint8 256 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype noise32x32 (structure)
  ((image uint8 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype noise64x64 (structure)
  ((image uint8 4096 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(deftype noise128x128 (structure)
  ((image uint8 16384 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

(deftype fog8x256 (structure)
  ((image uint8 256 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype fog-texture-work (structure)
  ((corner      vector 4 :inline      :offset-assert 0) ;; guessed by decompiler
   (const       vector :inline :offset-assert 64)
   (min-corner  vector :inline :offset-assert 80)
   (max-corner  vector :inline :offset-assert 96)
   (fog-near    float          :offset-assert 112)
   (fog-far     float          :offset-assert 116)
   (fog-delta   float          :offset-assert 120)
   (alpha-near  float          :offset-assert 124)
   (alpha-far   float          :offset-assert 128)
   (alpha-delta float          :offset-assert 132)
   (color       uint32         :offset-assert 136)
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )

(define-extern *clut-translate* (pointer uint8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lights-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vu-lights (structure)
  ((direction vector 3 :inline      :offset-assert 0) ;; guessed by decompiler
   (color     vector 3 :inline      :offset-assert 48) ;; guessed by decompiler
   (ambient   vector :inline :offset-assert 96)
   (fade-int uint32 :offset 44)
   (fade-flags uint32 :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype light (structure)
  "extra: {?, shadow, ?, ?}"
  ((direction     vector :inline :offset-assert 0)
   (color         rgbaf  :inline :offset-assert 16)
   (extra         vector :inline :offset-assert 32)
   (level         float          :offset-assert 32 :overlay-at (-> extra x))
   (luminance     float          :offset-assert 40 :overlay-at (-> extra z))
   (priority      float          :offset-assert 44 :overlay-at (-> extra w))
   (bytes         uint8  4       :offset-assert 36 :overlay-at (-> extra y)) ;; guessed by decompiler
   (mask          uint16         :offset-assert 36 :overlay-at bytes)
   (palette-index int8           :offset-assert 39 :overlay-at (-> bytes 3))
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype light-shadow-mask (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype light-sphere (structure)
  ((name                string         :offset-assert 0) ;; guessed by decompiler
   (bsphere             vector :inline :offset-assert 16)
   (direction           vector :inline :offset-assert 32)
   (color               vector :inline :offset-assert 48)
   (decay-start         float          :offset 4)
   (ambient-point-ratio float          :offset 8)
   (brightness          float          :offset 12)
   (bytes               uint8  4       :offset 60) ;; guessed by decompiler
   (mask                uint16         :offset 60)
   (palette-index       int8           :offset 63)
   (shadow              uint32         :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype light-hash-bucket (structure)
  ((index uint16  :offset-assert 0)
   (count uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype light-hash (basic)
  ((num-lights         uint16                                   :offset-assert 4)
   (num-indices        uint16                                   :offset-assert 6)
   (num-buckets        uint16                                   :offset-assert 8)
   (bucket-step        uint8                            2       :offset-assert 10) ;; guessed by decompiler
   (base-trans         vector                           :inline :offset-assert 16)
   (axis-scale         vector                           :inline :offset-assert 32)
   (dimension-array    vector4w                         :inline :offset-assert 48)
   (bucket-array       (inline-array light-hash-bucket)         :offset-assert 64) ;; guessed by decompiler
   (index-array        pointer                                  :offset-assert 68) ;; guessed by decompiler
   (light-sphere-array (inline-array light-sphere)              :offset-assert 72) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype light-hash-work (structure)
  ((ones vector4w :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype light-group (structure)
  ((dir0 light :inline :offset-assert 0)
   (dir1 light :inline :offset-assert 48)
   (dir2 light :inline :offset-assert 96)
   (ambi light :inline :offset-assert 144)
   (lights light 4 :inline :offset 0) ;; added
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(define-extern *light-hash* light-hash)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mood-channel (structure)
  ((data float   24 :offset-assert 0) ;; guessed by decompiler
   (vecs vector4 6  :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype mood-channel-group (structure)
  ((data mood-channel 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert 0)
   (fog-dists   vector :inline :offset-assert 16)
   (fog-start   meters         :offset-assert 16 :overlay-at (-> fog-dists x))
   (fog-end     meters         :offset-assert 20 :overlay-at (-> fog-dists y))
   (fog-max     float          :offset-assert 24 :overlay-at (-> fog-dists z))
   (fog-min     float          :offset-assert 28 :overlay-at (-> fog-dists w))
   (erase-color vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype mood-fog-table (structure)
  ((data mood-fog 8 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype mood-color (structure)
  ((lgt-color vector :inline :offset-assert 0)
   (amb-color vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype mood-direction-table (structure)
  ((data vector 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype mood-color-table (structure)
  ((data mood-color 8 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype mood-sky-table (structure)
  ((data vector 8 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype mood-clouds (structure)
  ((cloud-min float  :offset-assert 0)
   (cloud-max float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-weather (structure)
  ((data  float 2 :offset-assert 0) ;; guessed by decompiler
   (cloud float   :offset 0)
   (fog   float   :offset 4)
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-iweather (structure)
  ((data  int32 2 :offset-assert 0) ;; guessed by decompiler
   (cloud int32   :offset 0)
   (fog   int32   :offset 4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype mood-range (structure)
  ((data      float   4 :offset-assert 0 :score -1) ;; guessed by decompiler
   (min-cloud float     :offset 0)
   (max-cloud float     :offset 4)
   (min-fog   float     :offset 8)
   (max-fog   float     :offset 12)
   (quad      uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mood-filters-table (structure)
  ((data vector 8 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(declare-type sky-color-day structure)
(deftype mood-table (basic)
  ((mood-fog-table       mood-fog-table        :offset-assert 4)
   (mood-color-table     mood-color-table      :offset-assert 8)
   (mood-channel-group   mood-channel-group    :offset-assert 12)
   (mood-direction-table mood-direction-table  :offset-assert 16)
   (mood-sky-table       mood-sky-table        :offset-assert 20)
   (mood-interp-table    sky-color-day         :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype light-state (structure)
  ((time float  :offset-assert 0)
   (fade float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype flicker-state (structure)
  ((flicker-off uint8  :offset-assert 0)
   (flicker-on  uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype florescent-state (structure)
  ((value  float  :offset-assert 0)
   (delay  int8   :offset-assert 4)
   (delay2 int8   :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype electricity-state (structure)
  ((value float  :offset-assert 0)
   (scale float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype pulse-state (structure)
  ((pulse             float  :offset-assert 0)
   (brightness        float  :offset-assert 4)
   (target-brightness float  :offset-assert 8)
   (speed             float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype strobe-state (structure)
  ((time float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype flames-state (structure)
  ((time   float  :offset-assert 0)
   (index  uint8  :offset-assert 4)
   (length uint8  :offset-assert 5)
   (height uint8  :offset-assert 6)
   )
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )

(deftype mood-context-core (structure)
  ((current-fog          mood-fog :inline :offset-assert 0)
   (current-sky-color    vector   :inline :offset-assert 48)
   (current-env-color    vector   :inline :offset-assert 64)
   (current-prt-color    vector   :inline :offset-assert 80)
   (current-shadow-color vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype mood-context-core2 (mood-context-core)
  ((light-group light-group 8 :inline :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x670
  :flag-assert         #x900000670
  )

(deftype mood-context-core3 (mood-context-core2)
  ((times vector 8 :inline :offset-assert 1648) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x6f0
  :flag-assert         #x9000006f0
  )

(deftype mood-context (mood-context-core3)
  ((itimes vector4w 4 :inline  :offset-assert 1776) ;; guessed by decompiler
   (state  uint32   32 :offset-assert 1840) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x7b0
  :flag-assert         #x9000007b0
  )

(deftype mood-control-work (structure)
  ((color          vector4w      :inline :offset-assert 0)
   (weather        mood-weather  :inline :offset-assert 16)
   (iweather       mood-iweather :inline :offset-assert 24)
   (interp         mood-weather  :inline :offset-assert 32)
   (index          int32         4       :offset-assert 40) ;; guessed by decompiler
   (color-interp   float                 :offset-assert 56)
   (color-index    int32         2       :offset-assert 60) ;; guessed by decompiler
   (channel-interp float                 :offset-assert 68)
   (channel-index  int32         2       :offset-assert 72) ;; guessed by decompiler
   (cloud-interp   float                 :offset-assert 80)
   (cloud-index    int32         2       :offset-assert 84) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x5c
  :flag-assert         #x90000005c
  )

(deftype mood-control (mood-table)
  ((mood-clouds            mood-clouds                :offset-assert 28)
   (current-interp         mood-weather       :inline :offset-assert 32)
   (target-interp          mood-weather       :inline :offset-assert 40)
   (speed-interp           mood-weather       :inline :offset-assert 48)
   (range                  mood-range         :inline :offset-assert 64)
   (time-until-random      mood-weather       :inline :offset-assert 80)
   (time-until-random-min  mood-weather       :inline :offset-assert 88)
   (time-until-random-max  mood-weather       :inline :offset-assert 96)
   (current-special-interp float                      :offset-assert 104)
   (target-special-interp  float                      :offset-assert 108)
   (rate-special-interp    float                      :offset-assert 112)
   (display-flag           symbol                     :offset-assert 116) ;; guessed by decompiler
   (overide-weather-flag   symbol                     :offset-assert 120) ;; guessed by decompiler
   (pad                    int32                      :offset-assert 124)
   (overide                mood-weather       :inline :offset-assert 128)
   (lightning-index        int32                      :offset-assert 136)
   (lightning-val          int32                      :offset-assert 140)
   (lightning-time         int32                      :offset-assert 144)
   (lightning-time2        float                      :offset-assert 148)
   (lightning-time3        float                      :offset-assert 152)
   (lightning-flash        float                      :offset-assert 156)
   (lightning-id           sound-id                   :offset-assert 160) ;; guessed by decompiler
   (lightning-count0       uint32                     :offset-assert 164)
   (lightning-count1       uint32                     :offset-assert 168)
   (lightning-count2       uint32                     :offset-assert 172)
   (rain-id                sound-id                   :offset-assert 176) ;; guessed by decompiler
   (sound-pitch            float                      :offset-assert 180)
   (fogs                   mood-fog-table     9       :offset-assert 184) ;; guessed by decompiler
   (colors                 mood-color-table   3       :offset-assert 220) ;; guessed by decompiler
   (channels               mood-channel-group 3       :offset-assert 232) ;; guessed by decompiler
   (clouds                 mood-clouds        9       :offset-assert 244) ;; guessed by decompiler
   )
  :method-count-assert 25
  :size-assert         #x118
  :flag-assert         #x1900000118
  (:methods
    (mood-control-method-9 () none) ;; 9 ;; (init-weather! (_type_) none)
    (mood-control-method-10 () none) ;; 10 ;; (update-mood-weather! (_type_ float float float float) none)
    (mood-control-method-11 () none) ;; 11 ;; (update-mood-range! (_type_ float float float float) none)
    (mood-control-method-12 () none) ;; 12 ;; (set-time-for-random-weather! (_type_ float float) none)
    (set-special-interps!
      "Sets the `*-special-interp` values with the given values
       @param! this The [[mood-control]]
       @param target-interp Clamped between 0.0 and 1.0
       @param rate-interp Value to set [[this::rate-special-interp]]
       @param set-current-interp? Uses `target-interp` to set [[this::current-special-interp]
       @returns [[none]]"
      (_type_ float float symbol) none) ;; 13 ;; (apply-mood-clouds-and-fog (_type_ mood-control-work) none)
    (weather-event-concluded? ;; TODO - guess at name
      "@returns [[#t]] if [[this::override-weather-flag]] is set, we aren't in a cutscene and [[this::current-special-interp]] is equal to `0.0`"
      (_type_) symbol) ;; 14 ;; (apply-mood-color (_type_ mood-control-work) none)
    (mood-control-method-15 () none) ;; 15 ;; (apply-mood-channels (_type_ mood-control-work) none)
    (mood-control-method-16 () none) ;; 16 ;; (adjust-num-clouds! (_type_ mood-control-work) none)
    (mood-control-method-17 () none) ;; 17 ;; (gen-lightning-and-thunder! (_type_) number)
    (mood-control-method-18 () none) ;; 18 ;; (play-or-stop-lightning! (_type_ sound-spec vector) sound-id)
    (mood-control-method-19 () none) ;; 19
    (mood-control-method-20 () none) ;; 20
    (mood-control-method-21 () none) ;; 21
    (mood-control-method-22 () none) ;; 22
    (mood-control-method-23 () none) ;; 23
    (mood-control-method-24 () none) ;; 24
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type bsp-header basic)

;; +++level-h:vis-info-flag
(defenum vis-info-flag
  :type uint32
  :bitfield #t
  (dummy0  0)
  (dummy1  1)
  (dummy2  2)
  (dummy3  3)
  (dummy4  4)
  (dummy5  5)
  (dummy6  6)
  (dummy7  7)
  (dummy8  8)
  (dummy9  9)
  (dummy10 10)
  (dummy11 11)
  (dummy12 12)
  (dummy13 13)
  (dummy14 14)
  (dummy15 15)
  (dummy16 16)
  (dummy17 17)
  (dummy18 18)
  (dummy19 19)
  (dummy20 20)
  (dummy21 21)
  (dummy22 22)
  (dummy23 23)
  (dummy24 24)
  (dummy25 25)
  (dummy26 26)
  (dummy27 27)
  (dummy28 28)
  (in-iop  29)
  (loading 30)
  (vis-valid 31)
  )
;; ---level-h:vis-info-flag

(deftype level-vis-info (basic)
  ((level              level                  :offset-assert 4) ;; guessed by decompiler
   (from-level         symbol                 :offset-assert 8) ;; guessed by decompiler
   (from-bsp           bsp-header             :offset-assert 12) ;; guessed by decompiler
   (flags              vis-info-flag          :offset-assert 16)
   (length             uint32                 :offset-assert 20)
   (allocated-length   uint32                 :offset-assert 24)
   (dictionary-length  uint32                 :offset-assert 28)
   (dictionary         uint32                 :offset-assert 32)
   (string-block       uint32                 :offset-assert 36)
   (ramdisk            uint32                 :offset-assert 40)
   (vis-bits           uint32                 :offset-assert 44)
   (current-vis-string uint32                 :offset-assert 48)
   (vis-string         uint32        :dynamic :offset-assert 52) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype level-borrow-info (basic)
  ((alias       symbol   :offset-assert 4)
   (borrow-size uint16 5 :offset-assert 8)
   (borrow-info symbol 5 :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; +++level-h:level-memory-mode
(defenum level-memory-mode
  :type uint32
  (micro 0)
  (tiny 1)
  (tiny-edge 2)
  (tiny-center 3)
  (small-edge 4)
  (small-center 5)
  (city-center 6)
  (medium 7)
  (large 8)
  (alias 9)
  (borrow 10)
  (borrow0 11)
  (borrow1 12)
  (borrow2 13)
  (borrow3 14)
  (borrow4 15)
  (borrow-city-small 16)
  (tiny-center-small 17)
  (tiny-center-micro 18)
  (city-tiny-edge 19)
  )
;; ---level-h:level-memory-mode

;; +++level-h:task-mask
(defenum task-mask
  :type uint32
  :bitfield #t
  (task0 0)
  (task1 1)
  (task2 2)
  (task3 3)
  (task4 4)
  (task5 5)
  (task6 6)
  (task7 7)
  (done 8)
  (dummy0 9)
  (dummy1 10)
  (vehicle 11)
  (special 12)
  (primary0 13)
  (ctywide 14)
  (never 15)
  (movie0 16)
  (movie1 17)
  (movie2 18)
  )
;; ---level-h:task-mask

;; +++level-h:bigmap-id
(defenum bigmap-id
  :type uint32
  (bigmap-id-0 0)
  (bigmap-id-1 1)
  (desert 2)
  (factory 3)
  (forest 4)
  (mhcity 5)
  (mine 6)
  (nest 7)
  (bigmap-id-8 8)
  (no-map 9)
  (precursor 10)
  (bigmap-id-11 11)
  (rubble 12)
  (sewer0 13)
  (sewer1 14)
  (sewer2 15)
  (stadium 16)
  (temple 17)
  (bigmap-id-18 18)
  (bigmap-id-19 19)
  (bigmap-id-20 20)
  (tower 21)
  (volcano 22)
  (wascity 23)
  )
;; ---level-h:bigmap-id

;; +++level-h:level-flags
(defenum level-flags
  :type uint32
  :bitfield #t
  (lf0 0)
  (lf1 1)
  (lf2 2)
  (lf3 3)
  (lf4 4)
  (lf5 5)
  (lf6 6)
  (lf7 7)
  (lf8 8)
  (lf9 9)
  (lf10 10)
  (lf11 11)
  (lf12 12)
  (lf13 13)
  (lf14 14)
  (lf15 15)
  (lf16 16)
  (lf17 17)
  (lf18 18)
  (lf19 19)
  (lf20 20)
  (desert 21)
  (lf22 22)
  (lf23 23)
  (lf24 24)
  (lf25 25)
  (lf26 26)
  (lf27 27)
  (lf28 28)
  (lf29 29)
  (lf30 30)
  (lf31 31)
  )
;; ---level-h:level-flags

;; +++level-h:city-map-bits
(defenum city-map-bits
  :type uint64
  :bitfield #t
  (cmb0 0)
  (cmb1 1)
  (cmb2 2)
  (cmb3 3)
  (cmb4 4)
  (cmb5 5)
  (cmb6 6)
  (cmb7 7)
  (cmb8 8)
  (cmb9 9)
  (cmb10 10)
  (cmb11 11)
  (cmb12 12)
  (cmb13 13)
  (cmb14 14)
  (cmb15 15)
  (cmb16 16)
  (cmb17 17)
  (cmb18 18)
  (cmb19 19)
  (cmb20 20)
  (cmb21 21)
  (cmb22 22)
  (cmb23 23)
  (cmb24 24)
  (cmb25 25)
  (cmb26 26)
  (cmb27 27)
  (cmb28 28)
  (cmb29 29)
  (cmb30 30)
  (cmb31 31)
  (cmb32 32)
  (cmb33 33)
  )
;; ---level-h:city-map-bits

(deftype level-load-info (basic)
  ((name-list         symbol           6       :offset-assert 4) ;; guessed by decompiler
   (name              symbol                   :offset 4) ;; guessed by decompiler
   (visname           symbol                   :offset 8) ;; guessed by decompiler
   (nickname          symbol                   :offset 12) ;; guessed by decompiler
   (dbname            symbol                   :offset 16) ;; guessed by decompiler
   (taskname          symbol                   :offset 20) ;; guessed by decompiler
   (index             int16                    :offset-assert 28)
   (task-level        uint8                    :offset-assert 30)
   (part-engine-max   uint8                    :offset-assert 31) ;; int32
   (master-level      symbol                   :offset-assert 32)
   (level-flags       level-flags              :offset-assert 36)
   (packages          pair                     :offset-assert 40) ;; guessed by decompiler
   (run-packages      pair                     :offset-assert 44) ;; guessed by decompiler
   (memory-mode       level-memory-mode        :offset-assert 48) ;; guessed by decompiler
   (music-bank        symbol                   :offset-assert 52) ;; guessed by decompiler
   (sound-reverb      float                    :offset-assert 56)
   (extra-sound-bank  pair                     :offset-assert 60) ;; guessed by decompiler
   (mood-func         symbol                   :offset-assert 64) ;; guessed by decompiler
   (special-mood      symbol                   :offset-assert 68)
   (ocean             symbol                   :offset-assert 72) ;; guessed by decompiler
   (ocean-height      float                    :offset-assert 76)
   (ocean-alpha       float                    :offset-assert 80)
   (status-cache      uint16                   :offset-assert 84)
   (status-cache-sync uint16                   :offset-assert 86)
   (priority          int32                    :offset-assert 88)
   (draw-priority     float                    :offset-assert 92)
   (base-task-mask    task-mask                :offset-assert 96)
   (buffer-size       uint32                   :offset-assert 100)
   (city-map-bits     city-map-bits            :offset-assert 104)
   (bigmap-id         bigmap-id                :offset-assert 112) ;; guessed by decompiler
   (continues         pair                     :offset-assert 116) ;; guessed by decompiler
   (callback-list     pair                     :offset-assert 120)
   (borrow            level-borrow-info        :offset-assert 124)
   (bottom-height     meters                   :offset-assert 128)
   (fog-height        meters                   :offset-assert 132)
   (max-rain          float                    :offset-assert 136)
   (fog-mult          float                    :offset-assert 140)
   (mood-range        mood-range       :inline :offset-assert 144)
   )
  :method-count-assert 11
  :size-assert         #xa0
  :flag-assert         #xb000000a0
  ;; field extra-sound-bank uses ~A with a signed load.
  (:methods
    (level-load-info-method-9 (_type_ int) object) ;; 9
    (level-load-info-method-10 (_type_) none) ;; 10
    )
  )

(declare-type drawable basic)
(deftype login-state (basic)
  ((state int32       :offset-assert 4)
   (pos   uint32      :offset-assert 8)
   (elts  uint32      :offset-assert 12)
   (elt   drawable 16 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(declare-type entity-links-array inline-array-class)
(declare-type light-hash basic)
(declare-type engine basic)
(declare-type game-text-info structure)
(deftype level (basic)
  ((name                      symbol                                         :offset-assert 4) ;; guessed by decompiler
   (load-name                 symbol                                         :offset-assert 8) ;; guessed by decompiler
   (nickname                  symbol                                         :offset-assert 12) ;; guessed by decompiler
   (index                     int32                                          :offset-assert 16)
   (status                    symbol                                         :offset-assert 20) ;; guessed by decompiler
   (borrow-level              level                                  5       :offset-assert 24) ;; guessed by decompiler
   (borrow-from-level         level                                          :offset-assert 44) ;; guessed by decompiler
   (heap                      kheap                                  :inline :offset-assert 48)
   (borrow-heap               kheap                                  5 :inline       :offset-assert 64) ;; guessed by decompiler
   (bsp                       bsp-header                                     :offset-assert 144) ;; guessed by decompiler
   (art-group                 load-dir-art-group                             :offset-assert 148) ;; guessed by decompiler
   (info                      level-load-info                                :offset-assert 152) ;; guessed by decompiler
   (texture-page              texture-page                           20      :offset-assert 156) ;; guessed by decompiler
   (loaded-texture-page       texture-page                           16      :offset-assert 236) ;; guessed by decompiler
   (loaded-texture-page-count int32                                          :offset-assert 300)
   (entity                    entity-links-array                             :offset-assert 304) ;; guessed by decompiler
   (closest-object meters 10 :offset-assert 308)
   ;; ???
   (upload-size               int32                                  20      :offset 388) ;; guessed by decompiler
   (inside-boxes?             basic                                          :offset-assert 468)
   (display?                  symbol                                         :offset-assert 472) ;; guessed by decompiler
   (render?                   symbol                                         :offset-assert 476) ;; guessed by decompiler
   (meta-inside?              symbol                                         :offset-assert 480) ;; guessed by decompiler
   (force-inside?             symbol                                         :offset-assert 484) ;; guessed by decompiler
   (load-id                   uint32                                         :offset-assert 488)
   (mood-context              mood-context                           :inline :offset-assert 496)
   (mood-func                 (function mood-context float int none)         :offset-assert 2464) ;; guessed by decompiler
   (mood-init                 (function mood-context none)                   :offset-assert 2468) ;; guessed by decompiler
   (vis-bits                  pointer                                        :offset-assert 2472) ;; guessed by decompiler
   (all-visible?              symbol                                         :offset-assert 2476) ;; guessed by decompiler
   (force-all-visible?        symbol                                         :offset-assert 2480) ;; guessed by decompiler
   (linking                   symbol                                         :offset-assert 2484) ;; guessed by decompiler
   (vis-info                  level-vis-info                         8       :offset-assert 2488) ;; guessed by decompiler
   (vis-self-index            int32                                          :offset-assert 2520)
   (vis-adj-index             int32                                          :offset-assert 2524)
   (vis-buffer                uint8                                  2048    :offset-assert 2528) ;; guessed by decompiler
   (mem-usage-block           memory-usage-block                             :offset-assert 4576) ;; guessed by decompiler
   (mem-usage                 int32                                          :offset-assert 4580)
   (code-memory-start         pointer                                        :offset-assert 4584) ;; guessed by decompiler
   (code-memory-end           pointer                                        :offset-assert 4588) ;; guessed by decompiler
   (load-start-time           uint64                                         :offset-assert 4592) ;; time-frame
   (load-stop-time            uint64                                         :offset-assert 4600) ;; time-frame
   (load-buffer               uint32                                 2       :offset-assert 4608) ;; guessed by decompiler
   (load-buffer-size          uint32                                         :offset-assert 4616)
   (load-buffer-last          dgo-header                                     :offset-assert 4620) ;; uint32
   (load-buffer-mode          level-memory-mode                               :offset-assert 4624) ;; guessed by decompiler
   (display-start-time        uint64                                         :offset-assert 4632) ;; time-frame
   (memory-mask uint32 :offset-assert 4640)
   ; (UNKNOWN                   UNKNOWN                                        :offset-assert -1) ;; field could not be read.
   (task-mask                 task-mask                                      :offset-assert 4644)
   (tfrag-gs-test             gs-test                                         :offset-assert 4648)
   (texture-dirty-masks       texture-mask                           11  :inline    :offset-assert 4656) ;; guessed by decompiler
   (texture-mask              texture-mask                           20  :inline    :offset-assert 4832) ;; guessed by decompiler
   (sky-mask                  texture-mask                           :inline :offset-assert 5152)
   (tfrag-masks               texture-masks-array                            :offset-assert 5168) ;; guessed by decompiler
   (tfrag-dists               pointer                                        :offset-assert 5172) ;; guessed by decompiler
   (shrub-masks               texture-masks-array                            :offset-assert 5176) ;; guessed by decompiler
   (shrub-dists               pointer                                        :offset-assert 5180) ;; guessed by decompiler
   (alpha-masks               texture-masks-array                            :offset-assert 5184) ;; guessed by decompiler
   (alpha-dists               pointer                                        :offset-assert 5188) ;; guessed by decompiler
   (water-masks               texture-masks-array                            :offset-assert 5192) ;; guessed by decompiler
   (water-dists               pointer                                        :offset-assert 5196) ;; guessed by decompiler
   (tfrag-last-calls          int32                                  6       :offset-assert 5200) ;; guessed by decompiler
   (texture-anim-array        texture-anim-array                     11      :offset-assert 5224) ;; guessed by decompiler
   (light-hash                light-hash                                     :offset-assert 5268) ;; guessed by decompiler
   (draw-priority             float                                          :offset-assert 5272)
   (draw-index                int32                                          :offset-assert 5276)
   (part-engine               engine                                         :offset-assert 5280) ;; guessed by decompiler
   (user-object               basic                                  4       :offset-assert 5284) ;; guessed by decompiler
   (loaded-text-info-count    int32                                          :offset-assert 5300)
   (loaded-text-info          game-text-info                         16      :offset-assert 5304) ;; guessed by decompiler
   (level-type                type                                           :offset-assert 5368) ;; guessed by decompiler
   (load-order                uint64                                         :offset-assert 5376) ;; int64
   (eye-slot-lowres           uint8                                11      :offset-assert 5384)
   ; (UNKNOWN                   UNKNOWN                                        :offset-assert -1) ;; field could not be read.
   (eye-slot-highres          uint8                                11      :offset-assert 5395)
   ; (UNKNOWN                   UNKNOWN                                        :offset-assert -1) ;; field could not be read.
   (unknown-pad uint8 14)
   )
  :method-count-assert 30
  :size-assert         #x152c
  :flag-assert         #x1e0000152c
  (:methods
    (level-method-9 () none) ;; 9 ;; (deactivate (_type_) _type_)
    (level-method-10 () none) ;; 10 ;; (is-object-visible? (_type_ int) symbol)
    (level-method-11 () none) ;; 11 ;; (level-method-11 () none)
    (level-method-12 () none) ;; 12 ;; (unload! (_type_) _type_)
    (level-method-13 () none) ;; 13 ;; (bsp-name (_type_) symbol)
    (compute-memory-usage! (_type_ symbol) memory-usage-block) ;; 14
    (level-method-15 () none) ;; 15 ;; (inside-boxes-check (_type_ vector) symbol)
    (update-vis! (_type_ level-vis-info uint (pointer uint8)) symbol) ;; 16
    (level-method-17 () none) ;; 17 ;; (load-continue (_type_) _type_)
    (level-method-18 () none) ;; 18 ;; (load-begin (_type_) _type_)
    (level-method-19 () none) ;; 19 ;; (login-begin (_type_) _type_)
    (level-method-20 () none) ;; 20 ;; (debug-print-region-splitbox (_type_ vector object) none)
    (get-art-group-by-name (_type_ string) art-group) ;; 21
    (level-method-22 () none) ;; 22 ;; (level-method-22 (_type_ symbol) int)
    (level-method-23 () none) ;; 23 ;; (lookup-text (_type_ text-id symbol) string)
    (level-method-24 () none) ;; 24 ;; (level-method-24 () none)
    (level-method-25 () none) ;; 25 ;; (birth (_type_) _type_)
    (level-method-26 () none) ;; 26 ;; (level-status-update! (_type_ symbol) _type_)
    (level-method-27 () none) ;; 27 ;; (load-required-packages (_type_) _type_)
    (level-method-28 () none) ;; 28 ;; (init-vis-from-bsp (_type_) none)
    (level-method-29 () none) ;; 29 ;; (vis-clear (_type_) none)
    )
  )

(declare-type entity-links structure)

(deftype level-group (basic)
  ((length            int32                :offset-assert 4)
   (log-in-level-bsp bsp-header)
   (loading-level level)

   (entity-link       entity-links         :offset 16)
   (border?           symbol               :offset-assert 20) ;; guessed by decompiler
   (vis?              symbol               :offset-assert 24) ;; guessed by decompiler
   (want-level        basic                :offset-assert 28)
   (receiving-level   basic                :offset-assert 32)
   (load-commands     pair                 :offset-assert 36) ;; guessed by decompiler
   (play?             symbol               :offset-assert 40) ;; guessed by decompiler
   (target-pos        vector       2 :inline      :offset-assert 48) ;; guessed by decompiler
   (camera-pos        vector       2 :inline      :offset-assert 80) ;; guessed by decompiler
   (heap              kheap        :inline :offset-assert 112)
   (sound-bank        sound-bank-state        6 :inline      :offset-assert 128) ;; guessed by decompiler
   (disk-load-timing? symbol               :offset-assert 176) ;; guessed by decompiler
   (load-level        symbol               :offset-assert 180) ;; guessed by decompiler
   (load-size         uint32               :offset-assert 184)
   (load-time         float                :offset-assert 188)
   (load-login-time   float                :offset-assert 192)
   (draw-level-count  int32                :offset-assert 196)
   (draw-level        level        11      :offset-assert 200) ;; guessed by decompiler
   (draw-index-map    uint8        11      :offset-assert 244) ;; guessed by decompiler
   (status-cache-sync uint16               :offset-assert 256)
   (load-order        uint64               :offset-assert 264)
   (level             level        11 :inline     :offset 320) ;; guessed by decompiler
   ; (data              UNKNOWN      11      :offset-assert 324)
   (level0            level        :inline :offset-assert 320 :overlay-at (-> level 0))
   (level1            level        :inline :offset-assert 5744 :overlay-at (-> level 1))
   (level2            level        :inline :offset-assert 11168 :overlay-at (-> level 2))
   (level3            level        :inline :offset-assert 16592 :overlay-at (-> level 3))
   (level4            level        :inline :offset-assert 22016 :overlay-at (-> level 4))
   (level5            level        :inline :offset-assert 27440 :overlay-at (-> level 5))
   (level6            level        :inline :overlay-at (-> level 6))
   (level7            level        :inline :overlay-at (-> level 7))
   (level8            level        :inline :overlay-at (-> level 8))
   (level9            level        :inline :overlay-at (-> level 9))
   (level-default level :inline :offset-assert 54560 :overlay-at (-> level 10))
   (pad uint32)
   )
  :method-count-assert 31
  :size-assert         #xea54
  :flag-assert         #x1f0000ea54
  ;; Failed to read some fields.
  (:methods
    (level-get (_type_ symbol) level) ;; 9
    (level-group-method-10 () none) ;; 10 ;; (level-get-with-status (_type_ symbol) level)
    (get-level-by-heap-ptr-and-status (_type_ pointer symbol) level) ;; 11
    (level-group-method-12 () none) ;; 12 ;; (level-get-for-use (_type_ symbol symbol) level)
    (level-group-method-13 () none) ;; 13 ;; (activate-levels! (_type_) int)
    (level-group-method-14 () none) ;; 14 ;; (debug-print-entities (_type_ symbol type) none)
    (level-group-method-15 () none) ;; 15 ;; (debug-draw-actors (_type_ symbol) none)
    (level-group-method-16 () none) ;; 16 ;; (assign-draw-indices (_type_) none)
    (level-group-method-17 () none) ;; 17 ;; (actors-update (_type_) none)
    (level-group-method-18 () none) ;; 18 ;; (update-nav-meshes-method (_type_) none)
    (level-update (_type_) none) ;; 19
    (level-get-target-inside (_type_) level) ;; 20
    (level-group-method-21 () none) ;; 21 ;; (alloc-levels-if-needed (_type_ symbol) none)
    (art-group-get-by-name (_type_ string (pointer level)) art-group) ;; 22 ;; (load-commands-set! (_type_ pair) none)
    (level-group-method-23 () none) ;; 23 ;; (art-group-get-by-name (_type_ string (pointer uint32)) art-group)
    (level-group-method-24 () none) ;; 24 ;; (alt-load-command-get-index (_type_ symbol int) pair)
    (level-group-method-25 () none) ;; 25 ;; (update-vis-volumes (_type_) none)
    (level-group-method-26 (_type_ symbol) symbol) ;; 26 ;; (update-vis-volumes-from-nav-mesh (_type_) none)
    (level-group-method-27 () none) ;; 27 ;; (print-volume-sizes (_type_) none)
    (level-group-method-28 (_type_) symbol) ;; 28 ;; (level-status (_type_ symbol) symbol)
    (level-group-method-29 () none) ;; 29 ;; (load-in-progress? (_type_) symbol)
    (level-group-method-30 () none) ;; 30 ;; (level-get-most-disposable (_type_) level)
    )
  )

(define-extern *level* level-group)
(define-extern *draw-index* int) ;;
(define-extern *level-index* int) ;; int
(define-extern *city-mode* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; capture-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gs-store-image-packet (structure)
  ((vifcode        vif-tag 4 :offset-assert 0) ;; guessed by decompiler
   (giftag         gif-tag   :offset-assert 16) ;; gif-tag
   (bitbltbuf      gs-bitbltbuf    :offset-assert 32) ;; gs-bitbltbuf
   (bitbltbuf-addr gs-reg64    :offset-assert 40) ;; gs-reg64
   (trxpos         gs-trxpos    :offset-assert 48) ;; gs-trxpos
   (trxpos-addr    gs-reg64    :offset-assert 56) ;; gs-reg64
   (trxreg         gs-trxreg    :offset-assert 64) ;; gs-trxreg
   (trxreg-addr    gs-reg64    :offset-assert 72) ;; gs-reg64
   (finish         uint64    :offset-assert 80) ;; int64
   (finish-addr    gs-reg64    :offset-assert 88) ;; gs-reg64
   (trxdir         gs-trxdir    :offset-assert 96) ;; gs-trxdir
   (trxdir-addr    gs-reg64    :offset-assert 104) ;; gs-reg64
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype screen-shot-work (structure)
  ((count          int16   :offset-assert 0)
   (size           int16   :offset-assert 2)
   (name           string  :offset-assert 4) ;; guessed by decompiler
   (highres-enable symbol  :offset-assert 8) ;; guessed by decompiler
   (hud-enable     symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *screen-shot-work* screen-shot-work)
(define-extern *image-name* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math-camera-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vis-gif-tag (structure)
  "Unused."
  ((fog0  uint32  :offset-assert 0)
   (strip uint32  :offset-assert 4)
   (regs  uint32  :offset-assert 8)
   (fan   uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cull-info (structure)
  "Also seems unused."
  ((x-fact      float  :offset-assert 0)
   (y-fact      float  :offset-assert 4)
   (z-fact      float  :offset-assert 8)
   (cam-radius  float  :offset-assert 12)
   (cam-x       float  :offset-assert 16)
   (cam-y       float  :offset-assert 20)
   (xz-dir-ax   float  :offset-assert 24)
   (xz-dir-az   float  :offset-assert 28)
   (xz-dir-bx   float  :offset-assert 32)
   (xz-dir-bz   float  :offset-assert 36)
   (xz-cross-ab float  :offset-assert 40)
   (yz-dir-ay   float  :offset-assert 44)
   (yz-dir-az   float  :offset-assert 48)
   (yz-dir-by   float  :offset-assert 52)
   (yz-dir-bz   float  :offset-assert 56)
   (yz-cross-ab float  :offset-assert 60)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype math-camera (basic)
  ((d                          meters              :offset-assert 4)
   (f                          meters              :offset-assert 8)
   (fov                        degrees             :offset-assert 12) ;; degrees
   (x-ratio                    float               :offset-assert 16)
   (y-ratio                    float               :offset-assert 20)
   (x-pix                      float               :offset-assert 24)
   (x-clip                     float               :offset-assert 28)
   (x-clip-ratio-in            float               :offset-assert 32)
   (x-clip-ratio-over          float               :offset-assert 36)
   (y-pix                      float               :offset-assert 40)
   (y-clip                     float               :offset-assert 44)
   (y-clip-ratio-in            float               :offset-assert 48)
   (y-clip-ratio-over          float               :offset-assert 52)
   (cull-info                  cull-info   :inline :offset-assert 56)
   (fog-start                  meters              :offset-assert 120)
   (fog-end                    meters              :offset-assert 124)
   (fog-max                    float               :offset-assert 128)
   (fog-min                    float               :offset-assert 132)
   (reset                      int32               :offset-assert 136)
   (smooth-step                float               :offset-assert 140)
   (smooth-t                   float               :offset-assert 144)
   (perspective                matrix      :inline :offset-assert 160)
   (isometric                  matrix      :inline :offset-assert 224)
   (sprite-2d                  matrix      :inline :offset-assert 288)
   (sprite-2d-hvdf             vector      :inline :offset-assert 352)
   (camera-rot                 matrix      :inline :offset-assert 368)
   (inv-camera-rot             matrix      :inline :offset-assert 432)
   (inv-camera-rot-smooth      matrix      :inline :offset-assert 496)
   (inv-camera-rot-smooth-from quaternion  :inline :offset-assert 560)
   (camera-temp                matrix      :inline :offset-assert 576)
   (prev-camera-temp           matrix      :inline :offset-assert 640)
   (prev-inv-camera-rot        matrix      :inline :offset-assert 704)
   (prev-trans                 vector      :inline :offset-assert 768)
   (hmge-scale                 vector      :inline :offset-assert 784)
   (inv-hmge-scale             vector      :inline :offset-assert 800)
   (hvdf-off                   vector      :inline :offset-assert 816)
   (guard                      vector      :inline :offset-assert 832)
   (vis-gifs                   vis-gif-tag 4       :offset-assert 848) ;; guessed by decompiler
   (giftex                     uint128             :offset 848)
   (gifgr                      uint128             :offset 864)
   (giftex-trans               uint128             :offset 880)
   (gifgr-trans                uint128             :offset 896)
   (pfog0                      float               :offset-assert 912)
   (pfog1                      float               :offset-assert 916)
   (trans                      vector      :inline :offset-assert 928)
   (plane                      plane     4 :inline :offset-assert 944) ;; guessed by decompiler
   (guard-plane                plane     4 :inline :offset-assert 1008) ;; guessed by decompiler
   (shrub-mat                  matrix      :inline :offset-assert 1072)
   (quat-other                 quaternion  :inline :offset-assert 1136)
   (trans-other                vector      :inline :offset-assert 1152)
   (shrub-mat-other            matrix      :inline :offset-assert 1168)
   (camera-temp-other          matrix      :inline :offset-assert 1232)
   (camera-rot-other           matrix      :inline :offset-assert 1296)
   (camera-rot-other-sky       matrix      :inline :offset-assert 1360)
   (camera-rot-other-sprite    matrix      :inline :offset-assert 1424)
   (inv-camera-rot-other       matrix      :inline :offset-assert 1488)
   (plane-other                plane     4 :inline :offset-assert 1552) ;; guessed by decompiler
   (guard-plane-other          plane     4 :inline :offset-assert 1616) ;; guessed by decompiler
   (mirror-trans               vector      :inline :offset-assert 1680)
   (mirror-normal              vector      :inline :offset-assert 1696)
   (fov-correction-factor      float               :offset-assert 1712)
   )
  :method-count-assert 9
  :size-assert         #x6b4
  :flag-assert         #x9000006b4
  (:methods
    (new (symbol type) _type_) ;; 0
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; math-camera                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype fog-corrector (structure)
  "The math-camera matrices are used to compute fogging values, which are a per-vertex uint8 that
   tells the GS how 'foggy' the color should be. This should be proportional to how far away the vertex
   is. There is a scaling factor applied so the fog intensity isn't affected by the field of view angle.

   The fog-corrector stores a fog-end fog-start value that is corrected for the field of view.
   The actual correction factor is computed in cam-update.gc.
   Without this corrector, the fogginess of the world would change as the FOV changes
   (for example, when Jak gets on the zoomer, the FOV changes slightly)."
  ((fog-end   float  :offset-assert 0)
   (fog-start float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern fog-corrector-setup "Set the fog corrector based on the supplied math-camera." (function fog-corrector math-camera none))
(define-extern *math-camera-fog-correction* fog-corrector)
(define-extern update-math-camera
  "Compute some one-time camera constants.
   These should only change when changing aspect ratio."
  (function math-camera symbol symbol float math-camera))
(define-extern *math-camera* math-camera)
(define-extern math-cam-start-smoothing "Unused camera smoothing." (function float float quaternion))
(define-extern move-target-from-pad
  "Unused function to adjust trans based on inputs from the pad.
   This function must be extremely old because it takes a non-quaternion transform,
   and all [[target]] stuff uses quaternions."
  (function transform int transform))
(define-extern transform-point-vector!
  "Apply camera transformation to a point. Return true if it is visible or not.
   This returns the point in GS coords, but as float instead of int, so it's
   not really useful. See [[transform-point-qword!]] for more details."
  (function vector vector symbol))
(define-extern transform-point-qword!
  "Apply camera transformation to point, returning fixed point 28.4 position
   that can be given to the GS directly."
  (function vector4w vector symbol))
(define-extern transform-point-vector-scale!
  "Similar to transform-point-qword! but returns the scale factor instead."
  (function vector vector float))
(define-extern reverse-transform-point!
  "Likely transform arg3 from screen space to world coords, using arg1/arg2 for... something."
  (function vector vector vector vector none))
(define-extern init-for-transform
  "Sets up VU0 registers with camera info.
   This is probably a very old function and it's only used by camera debug.
   It stashes some data in vector float registers that must be there before calling transform-float-point."
  (function matrix none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++font-h:font-flags
(defenum font-flags
  :type uint32
  :bitfield #t
  (shadow 0)
  (kerning 1)
  (middle 2)
  (middle-vert 3)
  (right 4)
  (large 5)
  (pc-hack 6)
  )
;; ---font-h:font-flags

;; +++font-h:font-color
(defenum font-color
  :type uint32
  (default 0)
  (white 1)
  (transparent 2)
  (red 3)
  (orange 4)
  (yellow 5)
  (green 6)
  (blue 7)
  (cyan 8)
  (pink 9)
  (menu-selected 10)
  (menu-selected-parent 11)
  (menu 12)
  (menu-parent 13)
  (menu-func-bad 14)
  (menu-flag-on 15)
  (menu-flag-on-parent 16)
  (menu-flag-off 17)
  (menu-flag-off-parent 18)
  (menu-invalid 19)
  (flat-yellow 20)
  (font-color-21 21)
  (pad-back 22)
  (pad-shine 23)
  (pad-square 24)
  (pad-circle 25)
  (pad-triangle 26)
  (pad-x 27)
  (progress-old-blue 28)
  (progress-old-yellow 29)
  (progress-old-selected 30)
  (progress-old-percent 31)
  (font-color-32 32)
  (font-color-33 33)
  (font-color-34 34)
  (font-color-35 35)
  (font-color-36 36)
  (font-color-37 37)
  (font-color-38 38)
  (font-color-39 39)
  (font-color-40 40)
  (font-color-41 41)
  (font-color-42 42)
  (font-color-43 43)
  (font-color-44 44)
  )
;; ---font-h:font-color

(deftype char-verts (structure)
  ((pos    vector 4 :inline :offset-assert 0) ;; guessed by decompiler
   (color  vector 4 :inline :offset-assert 64) ;; guessed by decompiler
   (tex-st vector 4 :inline :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype char-color (structure)
  ((color rgba 4 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype font-context (basic)
  ((origin     vector     :inline :offset-assert 16)
   (strip-gif  vector     :inline :offset-assert 32)
   (width      float              :offset-assert 48)
   (height     float              :offset-assert 52)
   (projection float              :offset-assert 56)
   (scale      float              :offset-assert 60)
   (color      font-color         :offset-assert 64) ;; guessed by decompiler
   (flags      font-flags         :offset-assert 68) ;; guessed by decompiler
   (mat        matrix             :offset-assert 72)
   (start-line uint32             :offset-assert 76)
   (alpha      float              :offset-assert 80)
   (max-x      float              :offset-assert 84)
   )
  :method-count-assert 21
  :size-assert         #x58
  :flag-assert         #x1500000058
  (:methods
    (new (symbol type matrix int int float font-color font-flags) _type_) ;; 0
    (set-mat! (font-context matrix) font-context) ;; 9
    (set-origin! (font-context int int) font-context) ;; 10
    (set-depth! (font-context int) font-context) ;; 11
    (set-w! (font-context float) font-context) ;; 12
    (set-width! (font-context int) font-context) ;; 13
    (set-height! (font-context int) font-context) ;; 14
    (set-projection! (font-context float) font-context) ;; 15
    (set-color! (font-context font-color) font-context) ;; 16
    (set-flags! (font-context font-flags) font-context) ;; 17
    (set-start-line! (font-context uint) font-context) ;; 18
    (set-scale! (font-context float) font-context) ;; 19
    (set-alpha! (font-context float) font-context) ;; 20
    )
  )

(deftype font-work (structure)
  ((font-tmpl                 dma-gif-packet :inline :offset-assert 0)
   (char-tmpl                 dma-gif-packet :inline :offset-assert 32)
   (tex1-tmpl                 uint64         2       :offset-assert 64) ;; guessed by decompiler
   (small-font-0-tmpl         uint64         2       :offset-assert 80) ;; guessed by decompiler
   (small-font-1-tmpl         uint64         2       :offset-assert 96) ;; guessed by decompiler
   (small-font-2-tmpl         uint64         2       :offset-assert 112) ;; guessed by decompiler
   (small-font-3-tmpl         uint64         2       :offset-assert 128) ;; guessed by decompiler
   (large-font-0-tmpl         uint64         2       :offset-assert 144) ;; guessed by decompiler
   (large-font-1-tmpl         uint64         2       :offset-assert 160) ;; guessed by decompiler
   (large-font-2-tmpl         uint64         2       :offset-assert 176) ;; guessed by decompiler
   (large-font-3-tmpl         uint64         2       :offset-assert 192) ;; guessed by decompiler
   (size1-small               vector         :inline :offset-assert 208)
   (size2-small               vector         :inline :offset-assert 224)
   (size3-small               vector         :inline :offset-assert 240)
   (size1-large               vector         :inline :offset-assert 256)
   (size2-large-0             vector         :inline :offset-assert 272)
   (size2-large-1             vector         :inline :offset-assert 288)
   (size2-large-2             vector         :inline :offset-assert 304)
   (size2-large-3             vector         :inline :offset-assert 320)
   (size3-large               vector         :inline :offset-assert 336)
   (size2-0                   vector         :inline :offset-assert 352)
   (size2-1                   vector         :inline :offset-assert 368)
   (size2-2                   vector         :inline :offset-assert 384)
   (size2-3                   vector         :inline :offset-assert 400)
   (size-st1                  vector         :inline :offset-assert 416)
   (size-st2                  vector         :inline :offset-assert 432)
   (size-st3                  vector         :inline :offset-assert 448)
   (save                      vector         :inline :offset-assert 464)
   (save-color                vector       4 :inline :offset-assert 480) ;; guessed by decompiler
   (character-save-color      vector       4 :inline :offset-assert 544)
   (current-verts             char-verts     :inline :offset-assert 608)
   (src-verts                 char-verts     :inline :offset-assert 800)
   (dest-verts                char-verts     :inline :offset-assert 992)
   (justify                   vector      64 :inline :offset-assert 1184) ;; guessed by decompiler
   (color-shadow              vector4w       :inline :offset-assert 2208)
   (color-table               char-color  45 :inline :offset-assert 2224) ;; guessed by decompiler
   (current-font-0-tmpl       uint64         2       :offset-assert 2944) ;; guessed by decompiler
   (current-font-1-tmpl       uint64         2       :offset-assert 2960) ;; guessed by decompiler
   (current-font-2-tmpl       uint64         2       :offset-assert 2976) ;; guessed by decompiler
   (current-font-3-tmpl       uint64         2       :offset-assert 2992) ;; guessed by decompiler
   (last-color                font-color             :offset-assert 3008) ;; guessed by decompiler
   (save-last-color           font-color             :offset-assert 3012) ;; guessed by decompiler
   (character-save-last-color uint32                 :offset-assert 3016)
   (buf                       basic                  :offset-assert 3020)
   (str-ptr                   uint32                 :offset-assert 3024)
   (flags                     font-flags             :offset-assert 3028) ;; guessed by decompiler
   (reg-save                  uint32         5       :offset-assert 3032) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #xbec
  :flag-assert         #xa00000bec
  (:methods
    (set-context! (_type_ object) none) ;; 9
    )
  )

(define-extern *font-default-matrix* matrix)
(define-extern *font-work* font-work)
(define-extern font-set-tex0 (function (pointer gs-tex0) texture int int int none))
(define-extern set-font-color (function font-color int rgba rgba rgba int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; decomp-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype decomp-work (structure)
  "Temporary storage for visibility data decompression.
   This is stored on the scratchpad."
  ((buffer0      uint8  2048 :offset-assert 0) ;; guessed by decompiler
   (buffer1      uint8  2048 :offset-assert 2048) ;; guessed by decompiler
   (indices      uint16 2048 :offset-assert 4096) ;; guessed by decompiler
   (temp-indices uint16 2048 :offset-assert 8192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; time-of-day-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype palette-fade-control (structure)
  "Unused interface to the time-of-day control. Was used in jak 1 as an interface between level code,
   and the code in mood.gc, which set the actual fade values for time-of-day."
  ((trans      vector :inline :offset-assert 0)
   (fade       float          :offset-assert 16)
   (actor-dist float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype palette-fade-controls (basic)
  "Unused interface to the time-of-day control. Was used in jak 1 as an interface between level code,
   and the code in mood.gc, which set the actual fade values for time-of-day."
  ((control palette-fade-control 8 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x110
  :flag-assert         #xb00000110
  (:methods
    (reset! (_type_) none) ;; 9
    (set-fade! (_type_ int float float vector) object) ;; 10
    )
  )

(declare-type sparticle-launch-control inline-array-class)

(deftype time-of-day-proc (process)
  "Process for running things that change with the time-of-day, like lighting, sun/stars/moon, etc."
  ((hours              int32                     :offset-assert 128)
   (minutes            int32                     :offset-assert 132)
   (seconds            int32                     :offset-assert 136)
   (old-frame          uint64                    :offset-assert 144)
   (current-frame      uint64                    :offset-assert 152)
   (frames             uint64                    :offset-assert 160)
   (time-of-day        float                     :offset-assert 168)
   (old-frame-save     uint64                    :offset-assert 176)
   (current-frame-save uint64                    :offset-assert 184)
   (frames-save        uint64                    :offset-assert 192)
   (time-of-day-save   float                     :offset-assert 200)
   (time-ratio         float                     :offset-assert 204)
   (dest-time-ratio    float                     :offset-assert 208)
   (dest-time-delta    float                     :offset-assert 212)
   (sun-count          int32                     :offset-assert 216)
   (sun                sparticle-launch-control  :offset-assert 220) ;; guessed by decompiler
   (green-sun-count    int32                     :offset-assert 224)
   (green-sun          sparticle-launch-control  :offset-assert 228) ;; guessed by decompiler
   (moon-count         int32                     :offset-assert 232)
   (moon               sparticle-launch-control  :offset-assert 236) ;; guessed by decompiler
   (day-star-count     int32                     :offset-assert 240)
   (day-star           basic                     :offset-assert 244)
   (day-star-enable    basic                     :offset-assert 248)
   (start-timer        int32                     :offset-assert 252)
   )
  :method-count-assert 14
  :size-assert         #x100
  :flag-assert         #xe00800100
  )

(deftype time-of-day-palette (basic)
  "Pre-baked lighting values used by rendering code. The exact meaning of this data can vary,
   but in all cases, the time-of-day system can do linear interpolation of two palettes to
   blend between them."
  ((width  int32   :offset-assert 4)
   (height int32   :offset-assert 8)
   (pad    int32   :offset-assert 12)
   (data   int32 1 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; +++mood:time-of-day-palette-id
(defenum time-of-day-palette-id
  :type uint32
  :bitfield #t
  (unk0 0) ;; 1
  (unk1         1) ;; 2
  (unk2    2) ;; 4
  (unk3       3) ;; 8
  (palette-0        4) ;; 16
  (palette-1  5) ;; 32
  (palette-2 6) ;; 64
  (palette-3       7) ;; 128
  (palette-4       8) ;; 256
  (palette-5 9) ;; 512
  (palette-6      10) ;; 1024
  (palette-7 11) ;; 2048
  )
;; ---mood:time-of-day-palette-id

(deftype time-of-day-context (basic)
  "A mix of inputs/outputs to the time-of-day system."
  ((interp               float                  10      :offset-assert 4) ;; guessed by decompiler
   (current-fog          mood-fog               :inline :offset-assert 48)
   (current-sky-color    vector                 :inline :offset-assert 96)
   (current-env-color    vector                 :inline :offset-assert 112)
   (current-prt-color    vector                 :inline :offset-assert 128)
   (current-shadow-color vector                 :inline :offset-assert 144)
   (light-group          light-group            8 :inline      :offset-assert 160) ;; guessed by decompiler
   (current-clouds       mood-clouds            :inline :offset-assert 1696)
   (times                vector                 8 :inline       :offset-assert 1712) ;; guessed by decompiler
   (title-light-group    light-group            :inline :offset-assert 1840)
   (rim-light-group      light-group            :inline :offset-assert 2032)
   (rim-light-group2     light-group            :inline :offset-assert 2224)
   (rim-light-group3     light-group            :inline :offset-assert 2416)
   (filter               vector                 :inline :offset-assert 2608)
   (filter-color         vector                 :inline :offset-assert 2624)
   (time                 float                          :offset-assert 2640)
   (target-interp        float                          :offset-assert 2644)
   (erase-color          rgba                           :offset-assert 2648) ;; guessed by decompiler
   (sky                  symbol                         :offset-assert 2652) ;; guessed by decompiler
   (special-mood         basic                          :offset-assert 2656)
   (use-camera-other     basic                          :offset-assert 2660)
   (title-updated        symbol                         :offset-assert 2664) ;; guessed by decompiler
   (mode                 time-of-day-palette-id         :offset-assert 2668) ;; guessed by decompiler
   (overide-enable       symbol                         :offset-assert 2672) ;; guessed by decompiler
   (overide-palette      time-of-day-palette-id         :offset-assert 2676) ;; guessed by decompiler
   (max-rain             float                          :offset-assert 2680)
   (fog-mult             float                          :offset-assert 2684)
   (exterior-level       basic                          :offset-assert 2688)
   (ocean-alpha          float                          :offset-assert 2692)
   )
  :method-count-assert 9
  :size-assert         #xa88
  :flag-assert         #x900000a88
  )

(deftype time-of-day-dma (structure)
  "Memory layout for the time-of-day interpolation functions."
  ((outa  uint32 256 :offset-assert 0) ;; guessed by decompiler
   (outb  uint32 256 :offset-assert 1024) ;; guessed by decompiler
   (banka uint32 256 :offset-assert 2048) ;; guessed by decompiler
   (bankb uint32 256 :offset-assert 3072) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(define-extern *palette-fade-controls* palette-fade-controls)
(define-extern *time-of-day-context* time-of-day-context)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; profile                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype profile-work (structure)
  "DMA templates for profile drawing."
  ((sprite-tmpl dma-gif-packet :inline :offset-assert 0)
   (line-tmpl   dma-gif-packet :inline :offset-assert 32)
   (last-index  int32                  :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern *profile-spec-array* (inline-array profile-spec))
(define-extern *profile-translate-array* (pointer uint64))
(define-extern *profile-work* profile-work)
(define-extern *profile-x* int)
(define-extern *profile-y* int)
(define-extern *profile-w* int)
(define-extern *profile-h* int)
(define-extern *profile-ticks* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern get-current-time "Get the base-clock time." (function time-frame))
(define-extern get-integral-current-time "Get the number of frames that have happened." (function time-frame))
(define-extern get-real-current-time (function time-frame))
(define-extern set-display "Allocate and initialize clocks for the display." (function display display))
(define-extern allocate-dma-buffers "Allocate the main, debug, and calc dma buffers." (function display display))
(define-extern *font-context* font-context)
(define-extern draw-sprite2d-xy "Draw a sprite primitive with the given color and dimensions." (function dma-buffer int int int int rgba int none))
(define-extern draw-sprite2d-xy-absolute
  "Draw a sprite primitive, setting the gs-xzyf register to exactly the values specified (no offset/clamp)."
  (function dma-buffer int int int int rgba int none))
(define-extern draw-quad2d "Draw a quad that fills the entire context." (function dma-buffer draw-context none))
(define-extern screen-gradient "Fill the screen with a sprite with the given colors." (function dma-buffer rgba rgba rgba rgba none))
(define-extern vif1-handler-debug
  "Handle the VIF1 interrupt.
   The mark register of VIF will be set to the bucket that is now starting."
  (function int none))
(define-extern vif1-handler (function none))
(define-extern vblank-handler "Record the time of the last two vblanks." (function int))
(define-extern set-display-gs-state (function dma-buffer int int int int int dma-buffer))
(define-extern set-display-gs-state-offset (function dma-buffer int int int int int int int dma-buffer))
(define-extern reset-display-gs-state (function display dma-buffer display))
(define-extern *vu0-dma-list* dma-buffer)
(define-extern *display* display)

;; from kernel
(define-extern install-handler (function int function int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; connect                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype connectable (structure)
  "A connectable is the linked-list node part of a connection.
   The connections themselves are owned by the engine.

   The `next0`/`prev0` references are used for how this belongs in the connectable list
   belonging to the [[engine]]. These terminate on special nodes stored in the engine:
   `alive-list`/`alive-list-end` for the active connections, and `dead-list`/`dead-list-end`
   for the inactive.

   The `next1`/`prev1` references are used to build a linked list _per process_.
   The head of this list is the inline connectable in process and it ends with `#f`.
   This is a bit confusing at first, but these belong to two linked lists...
   These terminate on both ends with `#f`."
  ((next0 connectable  :offset-assert 0)
   (prev0 connectable  :offset-assert 4)
   (next1 connectable  :offset-assert 8)
   (prev1 connectable  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(declare-type engine basic)

(deftype connection (connectable)
  "This is the actual data for the connection.
   It may be used in multiple ways, but the most common is to use `param0` as a function.
   It receives `param1`, `param2`, `param3`, and the engine as the arguments.
   In some cases, the return value is checked for `'dead`."
  ((param0 basic     :offset-assert 16)
   (param1 basic     :offset-assert 20)
   (param2 int32     :offset-assert 24) ;; guessed by decompiler
   (param3 int32     :offset-assert 28) ;; guessed by decompiler
   (quad   uint128 2 :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  ;; field param1 uses ~A with a signed load. field param2 uses ~A with a signed load. field param3 uses ~A with a signed load.
  (:methods
    (get-engine
      "Get the engine for this connection. This must be used on a live connection."
      (connection) engine) ;; 9
    (get-process "Get the process for this connection." (connection) process) ;; 10
    (belongs-to-engine?
        "Check to see if this connection is located in the data section of the engine.
         This works on dead or alive connections."
        (connection engine) symbol) ;; 11
    (belongs-to-process? "Does this connection belong to the given process?" (connection process) symbol) ;; 12
    (move-to-dead "Move this connection from the alive list to the dead list." (connection) connection) ;; 13
    )
  )

(deftype engine (basic)
  "An engine is a collection of connections.
   You can iterate over the connections, or run them.
   The engine is dynamically sized based on how many connections it can store.

   New for Jak 2: You can use a child class of [[connection]]."
  ((name             symbol              :offset-assert 4) ;; guessed by decompiler
   (engine-time      time-frame          :offset 16) ;; time-frame
   (allocated-length int16               :offset 10)
   (length           int16               :offset 8)
   (element-type     type                :offset 12) ;; guessed by decompiler
   (alive-list       connectable :inline :offset-assert 32)
   (alive-list-end   connectable :inline :offset-assert 48)
   (dead-list        connectable :inline :offset-assert 64)
   (dead-list-end    connectable :inline :offset-assert 80)
   (data             connection  :inline :dynamic :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x60
  :flag-assert         #x1a00000060
  (:methods
    (new (symbol type symbol int type) _type_) ;; 0
    (inspect-all-connections "inspect all of the connections." (engine) engine) ;; 9
    (apply-to-connections
      "Apply arg0 to all connections for the engine.
       It's okay to have arg0 remove the connection."
      (engine (function connectable none)) int) ;; 10
    (apply-to-connections-reverse
      "Apply arg0 to all connections, reverse order.
       Do not use arg0 to remove yourself from the list."
      (engine (function connectable none)) int) ;; 11
    (execute-connections "Run the engine!" (engine object) int) ;; 12
    (execute-connections-and-move-to-dead
      "Run the engine! If any objects return `'dead`, remove them."
      (engine object) int) ;; 13
    (execute-connections-if-needed
      "Execute connections, but only if it hasn't been done on this frame."
      (engine object) int) ;; 14
    (add-connection
      "Add a connection between this engine and a given process."
      (engine process object object object object) connection) ;; 15
    (remove-from-process "Remove all connections from process for this engine." (engine process) int) ;; 16
    (remove-matching
      "Call the given function on each connection and the engine.
       If it returns truthy, `move-to-dead` that connection."
      (engine (function connection engine symbol)) int) ;; 17
    (remove-all "Remove all connections from an engine." (engine) int) ;; 18
    (remove-by-param0 "Remove all connections with param0 matching arg0." (engine object) int) ;; 19
    (remove-by-param1 "Remove all connections with param1 matching arg0." (engine int) int) ;; 20
    (remove-by-param2 "Remove all connections with param2 matching arg0." (engine int) int) ;; 21
    (get-first-connectable (engine) connectable) ;; 22
    (get-last-connectable (engine) connectable) ;; 23
    (get-next-connectable (_type_ connectable) connectable) ;; 24
    (get-prev-connectable (_type_ connectable) connectable) ;; 25
    )
  )

(deftype connection-pers (structure)
  "This is another engine system, very similar to the first, but not specific to a process.
   Each connection has a `key`, which is like the process, but unlike normal engine,
   the key's don't track which engine-pers they belong to.

   Unlike [[engine]], users can use [[engine-pers]] as a parent class."
  ((next        connection-pers   :offset-assert 0)
   (key         object            :offset-assert 4)
   (update-time time-frame        :offset-assert 8)
   (param       object          4 :offset-assert 16)
   (param-int32 int32           4 :offset 16)
   (param-int64 int64           2 :offset 16)
   (param-float float           4 :offset 16)
   (param-quat  uint128           :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; field key uses ~A with a signed load.
  )

(deftype engine-pers (basic)
  ((name             symbol                           :offset-assert 4) ;; guessed by decompiler
   (length           int16                            :offset-assert 8)
   (allocated-length int16                            :offset-assert 10)
   (element-type     type                             :offset-assert 12) ;; guessed by decompiler
   (execute-time     time-frame                       :offset-assert 16) ;; time-frame
   (alive-list       connection-pers                  :offset-assert 24)
   (dead-list        connection-pers                  :offset-assert 28)
   (data             connection-pers :inline :dynamic :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (new (symbol type symbol int type) _type_) ;; 0
    (schedule-callback
      "Get a connection for this key.
       If no connection exists, add it.
       Schedule an update to happen in arg1 seconds."
      (_type_ object time-frame) connection-pers) ;; 9
    (kill-callback "Called when a connection is removed." (_type_ connection-pers) none) ;; 10
    (kill-by-key "Remove connections with this key, calling `kill-callback`." (_type_ object) none) ;; 11
    (kill-matching
      "Call the given function on each connection. If it returns truthy, kill that connection."
      (_type_ (function engine-pers connection-pers object object symbol) object object) none) ;; 12
    (update-callback
      "Called when a connection is run.
       Users can override this as needed."
      (_type_) none) ;; 13
    (run-pending-updates!
      "Run updates if they scheduled. If something is found that has no pending update, kill it.
       Note that we won't kill things on this call if they fail to update their `update-time`.
       They will survive until the next call to `run-pending-updates`!
       (or you can modify their `update-time` before that to prevent them from being killed.)"
      (_type_ time-frame) none) ;; 14
    )
  )

(define-extern connection-process-apply
  "Apply a function to all connectables of a process."
  (function process (function object none) symbol))
(define-extern process-disconnect "Disconnect all connections for the given process." (function process int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++text-h:text-id
(defenum text-id
  :type uint32
  (null #x0)
  (text-0001 #x0001)
  (text-0002 #x0002)
  (progress-subtitle-language #x0003)
  (progress-sound-format #x0004)
  (text-0005 #x0005)
  (text-0006 #x0006)
  (text-0007 #x0007)
  (progress-sfx-volume #x0008)
  (progress-music-volume #x0009)
  (progress-speech-volume #x000a)
  (progress-language #x000b)
  (progress-vibration #x000c)
  (text-000d #x000d)
  (progress-graphics-center-screen #x000e)
  (text-000f #x000f)
  (text-0010 #x0010)
  (text-0011 #x0011)
  (progress-language-english #x0012)
  (progress-language-french #x0013)
  (progress-language-german #x0014)
  (progress-language-spanish #x0015)
  (progress-language-italian #x0016)
  (progress-language-korean #x0017)
  (progress-language-japanese #x0018)
  (progress-graphics-aspect-ratio #x0019)
  (progress-graphics-progressive-scan #x001a)
  (progress-graphics-video-mode #x001b)
  (progress-game-options #x001c)
  (progress-graphic-options #x001d)
  (progress-sound-options #x001e)
  (text-001f #x001f)
  (text-0020 #x0020)
  (text-0021 #x0021)
  (text-0022 #x0022)
  (text-0023 #x0023)
  (progress-exit-demo #x0024)
  (text-0025 #x0025)
  (text-0026 #x0026)
  (progress-back #x0027)
  (text-0028 #x0028)
  (text-0029 #x0029)
  (text-002a #x002a)
  (progress-continue-without-save #x002b)
  (text-002c #x002c)
  (text-002d #x002d)
  (progress-load-save #x002e)
  (progress-save-game #x002f)
  (text-0030 #x0030)
  (progress-options #x0031)
  (progress-title-new-game #x0032)
  (text-0033 #x0033)
  (progress-quit-game #x0034)
  (progress-bigmap #x0035)
  (progress-select-start #x0036)
  (progress-highscores #x0037)
  (text-0038 #x0038)
  (text-0039 #x0039)
  (text-003a #x003a)
  (text-003b #x003b)
  (text-003c #x003c)
  (text-003d #x003d)
  (text-003e #x003e)
  (text-003f #x003f)
  (text-0040 #x0040)
  (text-0041 #x0041)
  (text-0042 #x0042)
  (text-0043 #x0043)
  (text-0044 #x0044)
  (text-0049 #x0049)
  (text-004a #x004a)
  (text-004b #x004b)
  (text-004c #x004c)
  (text-004d #x004d)
  (text-0052 #x0052)
  (text-0053 #x0053)
  (progress-secrets #x0054)
  (text-0055 #x0055)
  (progress-secrets-toggle-beard #x0056)
  (progress-secrets-hflip-screen #x0057)
  (progress-secrets-endless-ammo #x0058)
  (progress-secrets-invulnerable #x0059)
  (progress-secrets-hero-mode #x005a)
  (progress-scene-player-act-1 #x005b)
  (progress-scene-player-act-2 #x005c)
  (progress-scene-player-act-3 #x005d)
  (progress-title-scrap-book #x005e)
  (progress-title-mega-scrap-book #x005f)
  (text-0060 #x0060)
  (text-0061 #x0061)
  (progress-secrets-endless-dark #x0062)
  (text-0063 #x0063)
  (text-0065 #x0065)
  (progress-secrets-big-head #x0066)
  (progress-secrets-little-head #x0067)
  (text-0068 #x0068)
  (text-0069 #x0069)
  (progress-missions #x006a)
  (progress-select-pre-start #x006b)
  (progress-select-kiosk-start #x006c)
  (text-006d #x006d)
  (progress-subtitles #x006e)
  (progress-restart-mission #x006f)
  (text-0072 #x0072)
  (text-0073 #x0073)
  (progress-qr #x0074)
  (text-0075 #x0075)
  (text-0076 #x0076)
  (text-0077 #x0077)
  (text-0078 #x0078)
  (text-0079 #x0079)
  (text-007a #x007a)
  (text-007b #x007b)
  (text-007c #x007c)
  (text-007d #x007d)
  (text-007e #x007e)
  (text-007f #x007f)
  (text-0080 #x0080)
  (text-0081 #x0081)
  (text-0082 #x0082)
  (text-0083 #x0083)
  (text-0084 #x0084)
  (text-0085 #x0085)
  (text-0086 #x0086)
  (text-0087 #x0087)
  (text-0088 #x0088)
  (text-0089 #x0089)
  (text-008a #x008a)
  (text-008b #x008b)
  (text-008c #x008c)
  (text-008d #x008d)
  (text-008e #x008e)
  (text-008f #x008f)
  (text-0090 #x0090)
  (text-0091 #x0091)
  (text-0092 #x0092)
  (text-0093 #x0093)
  (text-0094 #x0094)
  (text-0095 #x0095)
  (text-0096 #x0096)
  (text-0097 #x0097)
  (text-0098 #x0098)
  (text-0099 #x0099)
  (text-009a #x009a)
  (text-009b #x009b)
  (text-009c #x009c)
  (text-009d #x009d)
  (text-009e #x009e)
  (text-009f #x009f)
  (text-00a0 #x00a0)
  (text-00a1 #x00a1)
  (text-00a2 #x00a2)
  (text-00a3 #x00a3)
  (text-00a4 #x00a4)
  (text-00a5 #x00a5)
  (text-00a6 #x00a6)
  (text-00a7 #x00a7)
  (text-00a8 #x00a8)
  (text-00a9 #x00a9)
  (text-00aa #x00aa)
  (text-00ab #x00ab)
  (text-00ac #x00ac)
  (text-00ad #x00ad)
  (text-00ae #x00ae)
  (text-00af #x00af)
  (text-00b0 #x00b0)
  (text-00b1 #x00b1)
  (text-00b2 #x00b2)
  (text-00b3 #x00b3)
  (text-00b4 #x00b4)
  (text-00b5 #x00b5)
  (text-00b6 #x00b6)
  (text-012c #x012c)
  (text-012d #x012d)
  (text-012e #x012e)
  (text-012f #x012f)
  (text-0130 #x0130)
  (text-0131 #x0131)
  (text-0132 #x0132)
  (text-0134 #x0134)
  (text-0135 #x0135)
  (text-0136 #x0136)
  (text-0137 #x0137)
  (text-0138 #x0138)
  (text-0139 #x0139)
  (text-013a #x013a)
  (text-013b #x013b)
  (text-013c #x013c)
  (text-013d #x013d)
  (text-013e #x013e)
  (text-013f #x013f)
  (text-0140 #x0140)
  (text-0141 #x0141)
  (text-0142 #x0142)
  (text-0143 #x0143)
  (text-0144 #x0144)
  (text-0145 #x0145)
  (text-0147 #x0147)
  (text-0155 #x0155)
  (text-0156 #x0156)
  (text-0157 #x0157)
  (text-0158 #x0158)
  (text-01b8 #x01b8)
  (text-0207 #x0207)
  (text-0208 #x0208)
  (progress-language-english-uk #x0209)
  (text-020a #x020a)
  (text-020b #x020b)
  (text-020c #x020c)
  (text-020d #x020d)
  (text-020e #x020e)
  (text-03bf #x03bf)
  (text-03c0 #x03c0)
  (text-03c1 #x03c1)
  (text-03c2 #x03c2)
  (text-03c3 #x03c3)
  (text-03c4 #x03c4)
  (text-03c5 #x03c5)
  (text-03c6 #x03c6)
  (text-03c7 #x03c7)
  (text-03c8 #x03c8)
  (text-03c9 #x03c9)
  (text-03d1 #x03d1)
  (text-0408 #x0408)
  (text-0409 #x0409)
  (text-040a #x040a)
  (text-040b #x040b)
  (text-040c #x040c)
  (text-040d #x040d)
  (text-040e #x040e)
  (progress-missions-mine-explore #x0443)
  (progress-missions-mine-blow #x0444)
  (progress-missions-forest-turn-on-machine #x0445)
  (progress-missions-arena-training-1 #x0446)
  (progress-missions-arena-fight-1 #x0447)
  (progress-missions-wascity-chase #x0448)
  (progress-missions-sewer-hum-kg #x0449)
  (progress-missions-desert-artiface-race-1 #x044b)
  (progress-missions-factory-sky-battle #x044c)
  (progress-missions-nest-eggs #x044d)
  (progress-missions-city-blow-barricade #x044e)
  (text-044f #x044f)
  (text-0450 #x0450)
  (text-0451 #x0451)
  (text-0452 #x0452)
  (progress-missions-wascityb-game #x0453)
  (progress-missions-desert-course-race #x0454)
  (progress-missions-desert-hover #x0456)
  (progress-missions-arena-fight-2 #x0457)
  (progress-missions-arena-fight-3 #x0458)
  (progress-missions-desert-catch-lizards #x0459)
  (progress-missions-desert-rescue #x045a)
  (progress-missions-wascity-gungame #x045b)
  (progress-missions-temple-climb #x045c)
  (progress-missions-temple-oracle #x045d)
  (progress-missions-temple-tests #x045e)
  (progress-missions-desert-glide #x045f)
  (progress-missions-volcano-darkeco #x0460)
  (progress-missions-desert-oasis-defense #x0461)
  (progress-missions-mine-boss #x0462)
  (progress-missions-wascity-leaper-race #x0463)
  (progress-missions-comb-travel #x0464)
  (text-0465 #x0465)
  (text-0466 #x0466)
  (text-0467 #x0467)
  (text-0468 #x0468)
  (text-0469 #x0469)
  (text-046a #x046a)
  (text-046b #x046b)
  (text-053d #x053d)
  (text-053e #x053e)
  (text-0546 #x0546)
  (text-0547 #x0547)
  (progress-missions-watch-intro-movie #x0548)
  (progress-missions-sewer-met-hum #x0549)
  (progress-missions-city-port-fight #x054a)
  (progress-missions-city-port-attack #x054b)
  (progress-missions-city-gun-course-1 #x054c)
  (progress-missions-city-sniper-fight #x054d)
  (progress-missions-sewer-kg-met #x054e)
  (progress-missions-city-destroy-darkeco #x054f)
  (progress-missions-forest-kill-plants #x0550)
  (progress-missions-city-destroy-grid #x0551)
  (progress-missions-city-hijack-vehicle #x0552)
  (progress-missions-city-port-assault #x0553)
  (progress-missions-city-gun-course-2 #x0554)
  (progress-missions-city-protect-hq #x0555)
  (progress-missions-city-power-game #x0556)
  (progress-missions-nest-hunt #x0557)
  (progress-missions-desert-beast-battle #x0558)
  (progress-missions-desert-jump-mission #x0559)
  (progress-missions-desert-chase-marauders #x055a)
  (progress-missions-desert-artifact-race-2 #x055b)
  (progress-missions-forest-ring-chase #x055c)
  (text-055d #x055d)
  (progress-missions-factory-boss #x055e)
  (progress-missions-temple-defend #x055f)
  (progress-missions-wascity-defend #x0562)
  (progress-missions-precursor-tour #x0563)
  (progress-missions-city-blow-tower #x0564)
  (progress-missions-tower-destroy #x0565)
  (progress-missions-palace-ruins-patrol #x0566)
  (progress-missions-palace-ruins-attack #x0567)
  (progress-missions-comb-wild-ride #x0568)
  (progress-missions-precursor-destroy-ship #x0569)
  (progress-missions-desert-final-boss #x056a)
  (text-056b #x056b)
  (text-056c #x056c)
  (text-056d #x056d)
  (text-056e #x056e)
  (text-056f #x056f)
  (scene-intro-drop #x0570)
  (text-0571 #x0571)
  (text-0572 #x0572)
  (text-0573 #x0573)
  (text-0574 #x0574)
  (text-0575 #x0575)
  (text-0576 #x0576)
  (text-0577 #x0577)
  (text-0578 #x0578)
  (text-0579 #x0579)
  (text-057a #x057a)
  (text-057b #x057b)
  (text-057c #x057c)
  (text-057d #x057d)
  (text-057e #x057e)
  (text-057f #x057f)
  (text-0580 #x0580)
  (text-0581 #x0581)
  (text-0582 #x0582)
  (text-0583 #x0583)
  (text-0584 #x0584)
  (text-0585 #x0585)
  (text-0586 #x0586)
  (text-0587 #x0587)
  (text-0588 #x0588)
  (text-0589 #x0589)
  (text-058a #x058a)
  (text-058b #x058b)
  (text-058c #x058c)
  (text-058d #x058d)
  (scene-intro-training #x058e)
  (scene-arena-fight-1-intro #x058f)
  (scene-arena-fight-1-res #x0590)
  (scene-wascity-chase-intro #x0591)
  (scene-wascity-pre-game-intro #x0592)
  (scene-wascity-pre-game-res #x0593)
  (scene-desert-course-race-intro #x0594)
  (scene-desert-artifact-race-1-intro #x0595)
  (scene-desert-artifact-race-1-res #x0596)
  (scene-wascity-leaper-race-intro #x0597)
  (scene-wascity-leaper-race-res #x0598)
  (scene-desert-hover-info #x0599)
  (scene-desert-hover-res #x059a)
  (scene-arena-fight-2-intro #x059b)
  (scene-arena-fight-2-res #x059c)
  (scene-desert-catch-lizards-intro #x059d)
  (scene-desert-lizard-catch #x059e)
  (scene-desert-lizard-catch-2 #x059f)
  (scene-desert-lizard-resolution #x05a0)
  (scene-desert-rescue-intro #x05a1)
  (scene-temple-climb-res #x05a3)
  (scene-desert-glide-res #x05a4)
  (scene-temple-oracle-intro #x05a6)
  (scene-temple-oracle-res #x05a7)
  (scene-wascity-gun-intro #x05a8)
  (scene-wascity-gun-res #x05a9)
  (scene-arena-fight-3-intro #x05aa)
  (scene-arena-fight-3-res #x05ab)
  (scene-nest-eggs-intro #x05ac)
  (scene-desert-oasis-defense-res #x05ad)
  (scene-desert-oasis-defense-res-b #x05ae)
  (scene-temple-tests-intro #x05af)
  (text-05b0 #x05b0)
  (scene-temple-tests-res-b #x05b1)
  (scene-catacombs-travel-res #x05b2)
  (text-05b3 #x05b3)
  (text-05b4 #x05b4)
  (scene-mine-boss-intro #x05b5)
  (scene-mine-boss-res #x05b6)
  (scene-sewer-met-hum-intro #x05b7)
  (text-05b8 #x05b8)
  (scene-city-port-fight-intro #x05b9)
  (scene-city-port-attack-intro #x05ba)
  (scene-city-port-attack-res #x05bb)
  (scene-city-gun-course-intro #x05bc)
  (scene-city-gun-course-1-res #x05bd)
  (scene-city-sniper-fight-intro #x05be)
  (scene-sewer-kg-met-intro #x05bf)
  (scene-city-get-dark-punch #x05c0)
  (text-05c1 #x05c1)
  (scene-city-destroy-grid-res #x05c2)
  (scene-city-gun-course-2-intro #x05c3)
  (scene-city-gun-course-2-res #x05c4)
  (scene-city-hijack-vehicle-res #x05c5)
  (scene-port-assault-intro #x05c6)
  (scene-nest-hunt-intro #x05c7)
  (scene-nest-hunt-res #x05c8)
  (scene-desert-jump-mission-intro #x05c9)
  (scene-desert-beast-battle-intro #x05ca)
  (scene-desert-artifact-race-2-intro #x05cb)
  (scene-forest-ring-chase-res #x05cc)
  (scene-city-blow-barricade-intro #x05cd)
  (scene-city-blow-barricade-res #x05ce)
  (scene-city-protect-hq-intro #x05cf)
  (scene-city-protect-hq-res #x05d0)
  (scene-city-power-game-intro #x05d1)
  (scene-city-power-game-res #x05d2)
  (scene-factory-sky-battle-intro #x05d3)
  (scene-factory-sky-battle-intro-b #x05d4)
  (text-05d5 #x05d5)
  (scene-factory-boss-intro #x05d6)
  (scene-factory-boss-res #x05d7)
  (scene-temple-defend-intro #x05d8)
  (scene-temple-defend-res #x05d9)
  (scene-wascity-defend-res #x05da)
  (scene-forest-turn-on-machine-res #x05db)
  (scene-precursor-tour-res #x05dc)
  (scene-city-blow-tower-intro #x05dd)
  (scene-tower-destroy-intro #x05de)
  (scene-palace-ruins-patrol-intro #x05df)
  (scene-palace-ruins-attack-intro #x05e0)
  (scene-palace-ruins-attack-res #x05e1)
  (scene-catacombs-wild-ride-res #x05e2)
  (scene-precursor-destroy-ship-res #x05e3)
  (scene-desert-final-boss-intro #x05e4)
  (scene-arena-outro #x05e5)
  (text-05e6 #x05e6)
  (text-05e7 #x05e7)
  (text-05e8 #x05e8)
  (text-05e9 #x05e9)
  (text-05ea #x05ea)
  (progress-missions-desert-turtle-training #x05eb)
  (text-05ec #x05ec)
  (progress-picture-contrast #x05ed)
  (progress-picture-brightness #x05ee)
  (progress-picture-options #x05f0)
  (scene-volcano-darkeco-res #x05f1)
  (text-05f2 #x05f2)
  (text-05f3 #x05f3)
  (text-05f5 #x05f5)
  (text-05f6 #x05f6)
  (text-05f7 #x05f7)
  (text-05f8 #x05f8)
  (text-05f9 #x05f9)
  (progress-camera-horizontal #x05fa)
  (progress-camera-vertical #x05fb)
  (text-05fc #x05fc)
  (text-05fd #x05fd)
  (progress-camera-options #x05fe)
  (text-05ff #x05ff)
  (text-0600 #x0600)
  (text-0601 #x0601)
  (text-0602 #x0602)
  (text-0603 #x0603)
  (text-0604 #x0604)
  (text-0605 #x0605)
  (text-0606 #x0606)
  (text-0607 #x0607)
  (text-0608 #x0608)
  (text-0609 #x0609)
  (text-060a #x060a)
  (progress-controls-advanced-moves #x060b)
  (text-060c #x060c)
  (text-060d #x060d)
  (text-060e #x060e)
  (text-060f #x060f)
  (text-0610 #x0610)
  (text-0611 #x0611)
  (text-0612 #x0612)
  (text-0613 #x0613)
  (text-0614 #x0614)
  (text-0615 #x0615)
  (text-0616 #x0616)
  (text-0617 #x0617)
  (text-0618 #x0618)
  (text-0619 #x0619)
  (text-061a #x061a)
  (text-061b #x061b)
  (progress-language-russian #x061c)
  (text-061d #x061d)
  (text-061e #x061e)
  (text-061f #x061f)
  (text-0620 #x0620)
  (text-0621 #x0621)
  (text-0622 #x0622)
  (text-0623 #x0623)
  (text-0624 #x0624)
  (text-0625 #x0625)
  (text-0626 #x0626)
  (text-0627 #x0627)
  (text-0628 #x0628)
  (text-0629 #x0629)
  (text-062a #x062a)
  (text-062b #x062b)
  (text-062c #x062c)
  (progress-controls #x062d)
  (text-062e #x062e)
  (talk-to-damas #x0630)
  (talk-to-seem #x0631)
  (go-to-arena #x0632)
  (defeat-dark-satelite #x0633)
  (race-to-city #x0634)
  (nest-eggs-return-to-spargus #x0635)
  (reach-monk-temple #x0636)
  (oasis-find-ashelin #x0637)
  (talk-to-torn-naughty-ottsel #x0638)
  (talk-to-tess #x0639)
  (bring-vehicle-to-naughty-ottsel #x063a)
  (reach-freedom-hq #x063b)
  (find-power-room #x063d)
  (talk-to-sig #x063e)
  (check-out-astro-viewer #x063f)
  (find-hellcat #x0640)
  (progress-missions-factory-assault #x0641)
  (talk-to-samos #x0642)
  (text-0643 #x0643)
  (scene-temple-climb-intro #x0644)
  (text-0645 #x0645)
  (text-0646 #x0646)
  (text-0647 #x0647)
  (text-0648 #x0648)
  (text-0649 #x0649)
  (text-064a #x064a)
  (text-064b #x064b)
  (text-064c #x064c)
  (text-064d #x064d)
  (scene-ctyport-attack-get-on-nuke #x064e)
  (text-064f #x064f)
  (text-0650 #x0650)
  (text-0651 #x0651)
  (text-0652 #x0652)
  (scene-sewer-hum-kg-res #x0653)
  (text-0654 #x0654)
  (text-0655 #x0655)
  (text-0656 #x0656)
  (text-0657 #x0657)
  (text-0658 #x0658)
  (text-0659 #x0659)
  (text-065a #x065a)
  (text-065b #x065b)
  (scene-temple-jak-gets-light-glide #x065c)
  (scene-tower-destroy-res #x065d)
  (scene-city-find-catacomb-ent-intro #x065e)
  (scene-desert-final-boss-intro-a #x065f)
  (scene-desert-jak-gets-on-t-a #x0660)
  (scene-desert-jak-gets-on-t-b #x0661)
  (scene-desert-jak-gets-on-t-c #x0662)
  (scene-desert-final-boss-res #x0663)
  (scene-desert-final-boss-res-b #x0664)
  (text-0665 #x0665)
  (text-0666 #x0666)
  (text-0667 #x0667)
  (text-0668 #x0668)
  (progress-controls-pad-cross-cross #x0669)
  (progress-controls-pad-lanalog-l1 #x066a)
  (progress-controls-pad-cross-square #x066b)
  (progress-controls-pad-cross-circle #x066c)
  (progress-controls-pad-l1-cross #x066d)
  (progress-controls-pad-roll-cross #x066e)
  (progress-controls-pad-square-cross #x066f)
  (progress-controls-double-jump #x0670)
  (progress-controls-wheel #x0671)
  (progress-controls-flop #x0672)
  (progress-controls-attack-air #x0673)
  (progress-controls-high-jump #x0674)
  (progress-controls-wheel-flip #x0675)
  (progress-controls-uppercut #x0676)
  (progress-controls-weapon-moves #x0677)
  (progress-controls-pad-cross-circle-r1 #x0678)
  (progress-controls-pad-attack-r1 #x0679)
  (progress-controls-weapon-cycle #x067a)
  (progress-controls-rapid-fire-shower #x067b)
  (progress-controls-wastelander-move #x067c)
  (progress-controls-weapon-cycle-2 #x067d)
  (progress-controls-pad-cross #x067e)
  (progress-controls-pad-circle #x067f)
  (progress-controls-pad-square #x0680)
  (progress-controls-pad-triangle #x0681)
  (progress-controls-pad-l1 #x0682)
  (progress-controls-pad-l2 #x0683)
  (progress-controls-pad-r1 #x0684)
  (progress-controls-pad-r2 #x0685)
  (progress-controls-jump #x0686)
  (progress-controls-kick #x0687)
  (progress-controls-punch #x0688)
  (progress-controls-use #x0689)
  (progress-controls-crouch #x068a)
  (progress-controls-use-eco-powers #x068b)
  (progress-controls-shoot #x068c)
  (progress-controls-board-get-on #x068d)
  (progress-controls-weapon-select #x068e)
  (progress-controls-jetboard-moves #x068f)
  (progress-controls-pad-hold-l1-cross #x0690)
  (progress-controls-pad-r1-lanalog #x0691)
  (progress-controls-pad-l1-lanalog #x0692)
  (progress-controls-pad-r2-2 #x0693)
  (progress-controls-board-launch #x0694)
  (progress-controls-board-spin #x0695)
  (progress-controls-board-trick #x0696)
  (progress-controls-board-get-off #x0697)
  (progress-controls-vehicle #x0698)
  (progress-controls-pad-x-2 #x0699)
  (progress-controls-pad-circle-2 #x069a)
  (progress-controls-pad-square-2 #x069b)
  (progress-controls-pad-triangle-3 #x069c)
  (progress-controls-pad-r1-2 #x069d)
  (progress-controls-pad-r2-3 #x069e)
  (progress-controls-pad-l1-2 #x069f)
  (progress-controls-pad-l2-2 #x06a0)
  (progress-controls-accelerate #x06a1)
  (progress-controls-handbrake #x06a2)
  (progress-controls-brake #x06a3)
  (progress-controls-exit-vehicle #x06a4)
  (progress-controls-vehicle-fire-weapon #x06a5)
  (progress-controls-vehicle-turbo #x06a6)
  (progress-controls-vehicle-jump #x06a7)
  (progress-controls-rear-view #x06a8)
  (progress-controls-darkjak #x06a9)
  (progress-controls-pad-cross-square-2 #x06aa)
  (progress-controls-pad-square-cross-2 #x06ab)
  (progress-controls-pad-r1-3 #x06ac)
  (progress-controls-dark-bomb #x06ad)
  (progress-controls-dark-blast #x06ae)
  (progress-controls-dark-strike #x06af)
  (progress-controls-lightjak #x06b0)
  (progress-controls-pad-l2-triangle #x06b1)
  (progress-controls-pad-l2-square #x06b2)
  (progress-controls-pad-l2-circle #x06b3)
  (progress-controls-pad-shield-mode #x06b4)
  (progress-controls-pad-l2-cross #x06b5)
  (progress-controls-pad-flight-mode #x06b6)
  (progress-controls-lightjak-regen #x06b7)
  (progress-controls-lightjak-freeze #x06b8)
  (progress-controls-lightjak-shield #x06b9)
  (progress-controls-lightjak-wings #x06ba)
  (empty-string #x06bb)
  (progress-demo-return-to-title #x06bc)
  (text-06bd #x06bd)
  (meet-old-friends #x06be)
  (talk-to-torn-hq #x06bf)
  (wascity-defend-return-to-spargus #x06c0)
  (progress-audio-language #x06c1)
  (text-06c2 #x06c2)
  (progress-inventory-v-turtle #x06c3)
  (progress-inventory-v-snake #x06c4)
  (progress-inventory-v-scorpion #x06c5)
  (progress-inventory-v-toad #x06c6)
  (progress-inventory-v-fox #x06c7)
  (progress-inventory-v-rhino #x06c8)
  (progress-inventory-v-mirage #x06c9)
  (progress-inventory-v-x-ride #x06ca)
  (text-06de #x06de)
  (text-06df #x06df)
  (progress-inventory-gun-red-1 #x06e0)
  (progress-inventory-gun-red-2 #x06e1)
  (progress-inventory-gun-red-3 #x06e2)
  (progress-inventory-gun-yellow-1 #x06e3)
  (progress-inventory-gun-yellow-2 #x06e4)
  (progress-inventory-gun-yellow-3 #x06e5)
  (progress-inventory-gun-blue-1 #x06e6)
  (progress-inventory-gun-blue-2 #x06e7)
  (progress-inventory-gun-blue-3 #x06e8)
  (progress-inventory-gun-dark-1 #x06e9)
  (progress-inventory-gun-dark-2 #x06ea)
  (progress-inventory-gun-dark-3 #x06eb)
  (progress-inventory-armor0 #x06ec)
  (progress-inventory-armor1 #x06ed)
  (progress-inventory-armor2 #x06ee)
  (progress-inventory-armor3 #x06ef)
  (text-06f0 #x06f0)
  (text-06f1 #x06f1)
  (text-06f2 #x06f2)
  (text-06f3 #x06f3)
  (text-06f4 #x06f4)
  (text-06f5 #x06f5)
  (text-06f6 #x06f6)
  (text-06f7 #x06f7)
  (progress-inventory-board #x06f8)
  (progress-inventory-artifact-invis #x06f9)
  (progress-inventory-dark-strike #x06fa)
  (progress-inventory-lightjak-regen #x06fb)
  (progress-inventory-lightjak-freeze #x06fc)
  (progress-inventory-lightjak-shield #x06fd)
  (progress-inventory-lightjak-swoop #x06fe)
  (text-06ff #x06ff)
  (text-0700 #x0700)
  (text-0701 #x0701)
  (progress-inventory-pass-wascity #x0702)
  (progress-inventory-seal-of-mar #x0703)
  (progress-inventory-pass-factory #x0704)
  (progress-inventory-holocube #x0705)
  (progress-inventory-quantum-reflector #x0706)
  (progress-inventory-prism #x0707)
  (progress-inventory-beam-generator #x0708)
  (progress-inventory-time-map #x0709)
  (progress-inventory-light-eco-crystal #x070a)
  (progress-inventory-dark-eco-crystal #x070b)
  (progress-inventory-eco-sphere #x070c)
  (text-070d #x070d)
  (text-070e #x070e)
  (text-070f #x070f)
  (text-0775 #x0775)
  (text-0776 #x0776)
  (scene-catacomb-get-shield #x0778)
  (text-0779 #x0779)
  (mission-fail-marauders-escaped #x077a)
  (text-077b #x077b)
  (text-077c #x077c)
  (talk-to-kleiver #x078d)
  (progress-secrets-unlimited-turbos #x07b3)
  (text-07b4 #x07b4)
  (text-07b5 #x07b5)
  (progress-language-portuguese #x07b8)
  (text-07b9 #x07b9)
  (text-07ba #x07ba)
  (text-07bb #x07bb)
  (text-07bc #x07bc)
  (text-07bd #x07bd)
  (text-07be #x07be)
  (text-07bf #x07bf)
  (text-07c0 #x07c0)
  (text-07c1 #x07c1)
  (text-07c2 #x07c2)
  (text-07c3 #x07c3)
  (text-07c4 #x07c4)
  (progress-language-commentary #x07c7)
  (progress-language-dutch #x07c8)
  (progress-inventory #x07cb)
  (text-07cc #x07cc)
  (text-07cd #x07cd)
  (text-07ce #x07ce)
  (text-07cf #x07cf)
  (text-07d0 #x07d0)
  (text-07d1 #x07d1)
  (progress-title-commentary #x07d2)
  (text-07d3 #x07d3)
  (text-07d4 #x07d4)
  (progress-secrets-fast-movie #x07d5)
  (progress-secrets-slow-movie #x07d6)
  (text-07d7 #x07d7)
  (text-07d8 #x07d8)
  (progress-secrets-red-ammo-capacity #x07d9)
  (progress-secrets-yellow-ammo-capacity #x07da)
  (progress-secrets-blue-ammo-capacity #x07db)
  (progress-secrets-dark-ammo-capacity #x07dc)
  (text-07dd #x07dd)
  (progress-secrets-gungame-ratchet #x07de)
  (progress-secrets-endless-light #x07df)
  (progress-secrets-bad-weather #x07e0)
  (text-07e1 #x07e1)
  (text-07e2 #x07e2)
  (progress-title-jak3-mdl-viewer #x07e3)
  (progress-title-jak2-mdl-viewer #x07e4)
  (progress-title-jak1-mdl-viewer #x07e5)
  (text-07e6 #x07e6)
  (text-07e7 #x07e7)
  (text-07e8 #x07e8)
  (text-07e9 #x07e9)
  (progress-secrets-kleever-diaper #x07ea)
  (text-07f6 #x07f6)
  (text-07f7 #x07f7)
  (text-07f8 #x07f8)
  (text-07f9 #x07f9)
  (text-07fa #x07fa)
  (text-07fb #x07fb)
  (text-07fc #x07fc)
  (text-07fd #x07fd)
  (text-07fe #x07fe)
  (text-07ff #x07ff)
  (text-0800 #x0800)
  (text-0801 #x0801)
  (text-0802 #x0802)
  (text-0803 #x0803)
  (text-0804 #x0804)
  (text-0805 #x0805)
  (text-0806 #x0806)
  (text-0807 #x0807)
  (progress-controls-pad-cross-square-cross #x0808)
  (progress-controls-pad-l1-square #x0809)
  (progress-controls-super-flop #x080a)
  (progress-controls-crouch-uppercut #x080b)
  (progress-controls-pad-triangle-4 #x080c)
  (progress-controls-dark-invis #x080d)
  (text-0816 #x0816)
  (text-0817 #x0817)
  (text-0818 #x0818)
  (text-0819 #x0819)
  (text-081a #x081a)
  (text-081b #x081b)
  (text-081c #x081c)
  (text-081d #x081d)
  (text-081e #x081e)
  (text-081f #x081f)
  (text-0820 #x0820)
  (text-0821 #x0821)
  (text-0822 #x0822)
  (text-0823 #x0823)
  (text-0824 #x0824)
  (text-0825 #x0825)
  (text-0826 #x0826)
  (text-0827 #x0827)
  (text-0828 #x0828)
  (text-0829 #x0829)
  (text-082a #x082a)
  (text-082b #x082b)
  (text-082c #x082c)
  (text-082d #x082d)
  (text-082e #x082e)
  (text-082f #x082f)
  (text-0830 #x0830)
  (text-0831 #x0831)
  (text-0832 #x0832)
  (text-0833 #x0833)
  (progress-secrets-weapon-upgrades #x0834)
  (progress-secrets-cheats #x0835)
  (progress-secrets-vehicle-upgrades #x0836)
  (progress-secrets-crazy-stuff #x0837)
  (progress-secrets-art-gallery #x0838)
  (progress-secrets-expert-options #x0839)
  (text-083a #x083a)
  (progress-secrets-gun-upgrade-red-1 #x083b)
  (progress-secrets-gun-upgrade-red-2 #x083c)
  (progress-secrets-gun-upgrade-red-3 #x083d)
  (progress-secrets-gun-upgrade-yellow-1 #x083e)
  (progress-secrets-gun-upgrade-yellow-2 #x083f)
  (progress-secrets-gun-upgrade-yellow-3 #x0840)
  (progress-secrets-gun-upgrade-blue-1 #x0841)
  (progress-secrets-gun-upgrade-blue-2 #x0842)
  (progress-secrets-gun-upgrade-blue-3 #x0843)
  (progress-secrets-gun-upgrade-dark-1 #x0844)
  (progress-secrets-gun-upgrade-dark-2 #x0845)
  (progress-secrets-gun-upgrade-dark-3 #x0846)
  (progress-secrets-vehicle-fox #x0847)
  (progress-secrets-vehicle-mirage #x0848)
  (progress-secrets-vehicle-x-ride #x0849)
  (progress-secrets-vehicle-hit-points #x084a)
  (progress-secrets-board-fast #x084b)
  (progress-secrets-darkjak-tracking #x084c)
  (progress-secrets-daxter-pants #x084d)
  (progress-title-level-select-act-1 #x084e)
  (progress-title-level-select-act-2 #x084f)
  (progress-title-level-select-act-3 #x0850)
  (progress-secrets-button-invis #x0851)
  (text-0852 #x0852)
  (text-0853 #x0853)
  (text-0856 #x0856)
  (text-0857 #x0857)
  (text-0858 #x0858)
  (text-085a #x085a)
  (text-085f #x085f)
  (text-0860 #x0860)
  (text-0861 #x0861)
  (text-0862 #x0862)
  (text-0863 #x0863)
  (text-0864 #x0864)
  (text-0866 #x0866)
  (progress-inventory-vehicles #x0867)
  (progress-inventory-armor #x0868)
  (progress-inventory-darkjak #x0869)
  (progress-inventory-lightjak #x086a)
  (progress-inventory-items #x086c)
  (progress-inventory-dark-bomb #x086d)
  (progress-inventory-dark-blast #x086e)
  (progress-inventory-guns #x086f)
  (progress-inventory-war-amulet #x0870)
  (progress-highscores-satelite-game #x0871)
  (progress-highscores-racetrack-time-trial #x0872)
  (progress-highscores-wasteland-run #x0873)
  (progress-highscores-single-hang-time #x0874)
  (progress-highscores-total-hang-time #x0875)
  (progress-highscores-single-distance #x0876)
  (progress-highscores-total-distance #x0877)
  (progress-highscores-roll-challenge #x0878)
  (progress-highscores-spargus-turret-game #x0879)
  (progress-highscores-jetboard-challenge #x087a)
  (progress-highscores-gun-yellow-2-course #x087b)
  (progress-highscores-gun-red-2-course #x087c)
  (progress-highscores-ratchet-gun-course #x087d)
  (progress-highscores-clank-gun-course #x087e)
  (progress-highscores-eco-grid-game #x087f)
  (progress-highscores-marauder-challenge #x0880)
  (progress-controls-pad-l2-lanalog #x0883)
  (progress-controls-board-grab #x0884)
  (text-0885 #x0885)
  (text-0886 #x0886)
  (text-0887 #x0887)
  (text-0888 #x0888)
  (progress-controls-pad-360-spin #x088a)
  (progress-controls-pad-triangle-2 #x088b)
  (progress-controls-board-boost #x088c)
  (progress-controls-board-reverse #x088d)
  (commentary-intro-palace #x088e)
  (commentary-intro-rescue #x088f)
  (commentary-intro-training #x0891)
  (text-0892 #x0892)
  (text-0893 #x0893)
  (text-0894 #x0894)
  (text-0895 #x0895)
  (text-0896 #x0896)
  (text-0897 #x0897)
  (talk-to-ashelin #x0898)
  (text-0899 #x0899)
  )
;; ---text-h:text-id

(deftype game-text (structure)
  ((id   text-id  :offset-assert 0) ;; guessed by decompiler
   (text string   :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype game-text-info (basic)
  ((length      int32              :offset-assert 4)
   (language-id int32              :offset-assert 8)
   (group-name  string             :offset-assert 12) ;; guessed by decompiler
   (data        game-text :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (lookup-text! (_type_ text-id symbol) string) ;; 9
    )
  )

(define-extern *text-group-names* (array string))
(define-extern *common-text-heap* kheap)
(define-extern *common-text* game-text-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera-defs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype camera-bank (basic)
  ((collide-move-rad        float   :offset-assert 4)
   (joypad                  uint32  :offset-assert 8)
   (min-detectable-velocity float   :offset-assert 12)
   (attack-timeout          time-frame :offset-assert 16) ;; time-frame
   (default-string-max-y    meters  :offset-assert 24)
   (default-string-min-y    meters  :offset-assert 28)
   (default-string-max-z    meters  :offset-assert 32)
   (default-string-min-z    meters  :offset-assert 36)
   (default-string-push-z   meters  :offset-assert 40)
   (default-tilt-adjust     degrees :offset-assert 44) ;; degrees
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype camera-master-bank (basic)
  ((onscreen-head-height            meters  :offset-assert 4)
   (onscreen-foot-height            meters  :offset-assert 8)
   (target-height                   meters  :offset-assert 12)
   (up-move-to-pitch-ratio-in-air   float   :offset-assert 16)
   (down-move-to-pitch-ratio-in-air float   :offset-assert 20)
   (up-move-to-pitch-on-ground      float   :offset-assert 24)
   (down-move-to-pitch-on-ground    float   :offset-assert 28)
   (pitch-off-blend                 float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(define-extern *CAMERA-bank* camera-bank)
(define-extern *CAMERA_MASTER-bank* camera-master-bank)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum trail-node-flag
  :type uint8
  :bitfield #t
  (tnf0 0) ;; unused??
  (tnf1 1)
  )

(defenum conn-flag
  :type uint8
  :bitfield #t
  (cf0 0)
  (cf1 1)
  (cf2 2)
  (cf3 3)
  )

(deftype trail-node (structure)
  ((next-id         int16   :offset-assert 0)
   (prev-id         int16   :offset-assert 2)
   (parent-id       int16   :offset-assert 4)
   (x               int16   :offset-assert 6)
   (y               int16   :offset-assert 8)
   (z               int16   :offset-assert 10)
   (first-conn      uint16  :offset-assert 12)
   (cost-from-start uint16  :offset-assert 14)
   (cost-to-goal    uint16  :offset-assert 16)
   (flags           trail-node-flag   :offset-assert 18)
   (conn-count      uint8   :offset-assert 19)
   )
  :method-count-assert 12
  :size-assert         #x14
  :flag-assert         #xc00000014
  (:methods
    (trail-node-method-9 () none) ;; 9 ;; (get-dist-score (_type_ vector) uint)
    (trail-node-method-10 () none) ;; 10 ;; (debug-draw (_type_ int) none)
    (trail-node-method-11 () none) ;; 11 ;; (get-position (_type_ vector) vector)
    )
  )

(deftype trail-visgroup (structure)
  ((first-node uint16  :offset-assert 0)
   (node-count uint8   :offset-assert 2)
   (pad        uint8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype trail-blocker (structure)
  ((plane          plane  :inline :offset-assert 0)
   (center         vector :inline :offset-assert 16)
   (radius-squared float          :offset-assert 28 :overlay-at (-> center w))
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype trail-conn (structure)
  ((head-id     uint16  :offset-assert 0)
   (tail-id     uint16  :offset-assert 2)
   (flags       conn-flag   :offset-assert 4)
   (visgroup-id uint8   :offset-assert 5)
   (cost        uint16  :offset-assert 6)
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (trail-conn-method-9 () none) ;; 9 ;; (debug-draw (_type_ trail-graph int) none)
    )
  )

(deftype trail-conn-hash-cell (structure)
  ((first-conn uint16  :offset-assert 0)
   (conn-count uint8   :offset-assert 2)
   (pov-count  uint8   :offset-assert 3)
   (first-pov  uint16  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype trail-conn-search (structure)
  ((best-conn-id         int32                  :offset-assert 0)
   (best-dist            float                  :offset-assert 4)
   (src-pos              vector                 :offset-assert 8)
   (conn-pos             vector                 :offset-assert 12)
   (debug-cells-searched int32                  :offset-assert 16)
   (debug-conns-searched int32                  :offset-assert 20)
   (bounds               bounding-box4w :inline :offset-assert 32)
   (cell-quads           qword          2 :inline       :offset-assert 64) ;; guessed by decompiler
   (conn-quads           qword          7 :inline      :offset-assert 96) ;; guessed by decompiler
   (cell-bits            vector16ub     2 :inline      :offset-assert 64 :overlay-at cell-quads) ;; guessed by decompiler
   (conn-bits            vector16ub     2 :inline      :offset-assert 96 :overlay-at conn-quads)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype trail-conn-hash (basic)
  ((cell-width meters                                      :offset-assert 4)
   (origin     vector                              :inline :offset-assert 16)
   (cell       (inline-array trail-conn-hash-cell)         :offset-assert 32) ;; guessed by decompiler
   (conn-ids   (pointer uint16)                            :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype trail-cached-search-info (structure)
  ((goal-conn-id  int16          :offset-assert 0)
   (orig-goal-pos vector :inline :offset-assert 16)
   (conn-goal-pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trail-cached-start-pov (structure)
  ((last-updated      uint64         :offset-assert 0)
   (pov-can-see-start uint64         :offset-assert 8)
   (next-node-id      int32          :offset-assert 16)
   (start-pos         vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trail-graph (basic)
  ((mode                      uint8                                       :offset-assert 4)
   (search-id                 uint32                                      :offset-assert 8)
   (open-head-id              int16                                       :offset-assert 12)
   (goal-conn-id              int16                                       :offset-assert 14)
   (goal-node-id              int16                                       :offset-assert 16)
   (over-under-thresh         float                                       :offset-assert 20)
   (over-under-above-too-low  float                                       :offset-assert 24)
   (over-under-below-too-high float                                       :offset-assert 28)
   (pov-node-count            uint16                                      :offset-assert 32)
   (node-count                uint16                                      :offset-assert 34)
   (conn-count                uint16                                      :offset-assert 36)
   (blocker-count             uint16                                      :offset-assert 38)
   (conn-mask                 uint8                                       :offset-assert 40)
   (node                      (inline-array trail-node)                   :offset-assert 44) ;; guessed by decompiler
   (conn                      (inline-array trail-conn)                   :offset-assert 48) ;; guessed by decompiler
   (blocker                   uint32                                      :offset-assert 52)
   (conn-ids                  (pointer uint16)                            :offset-assert 56) ;; guessed by decompiler
   (visgroup                  (inline-array trail-conn-hash-cell)         :offset-assert 60) ;; guessed by decompiler
   (visnode-ids               (pointer uint16)                            :offset-assert 64) ;; guessed by decompiler
   (conn-hash                 trail-conn-hash                             :offset-assert 68) ;; guessed by decompiler
   (cell-pov-bit-arrays       uint32                                      :offset-assert 72)
   (pov-can-see-goal          uint64                                      :offset-assert 80)
   (cached-start-pov          trail-cached-start-pov              :inline :offset-assert 96)
   (orig-start-pos            vector                              :inline :offset-assert 144)
   (orig-goal-pos             vector                              :inline :offset-assert 160)
   (conn-start-pos            vector                              :inline :offset-assert 176)
   (conn-goal-pos             vector                              :inline :offset-assert 192)
   (open-quads                qword                               6 :inline       :offset-assert 208) ;; guessed by decompiler
   (closed-quads              qword                               6 :inline      :offset-assert 304) ;; guessed by decompiler
   (open-bits                 vector16ub                             2 :inline       :offset-assert 208 :overlay-at open-quads)
   (closed-bits               vector16ub                             2 :inline      :offset-assert 304 :overlay-at closed-quads)
   )
  :method-count-assert 34
  :size-assert         #x190
  :flag-assert         #x2200000190
  (:methods
    (trail-graph-method-9 () none) ;; 9 ;; (trail-graph-method-9 (_type_ int) none)
    (trail-graph-method-10 () none) ;; 10 ;; (trail-graph-method-10 (_type_ int) none)
    (trail-graph-method-11 () none) ;; 11 ;; (trail-graph-method-11 (_type_ int int) trail-node)
    (trail-graph-method-12 () none) ;; 12 ;; (debug-draw (_type_) none)
    (trail-graph-method-13 () none) ;; 13 ;; (debug-draw-cell (_type_ int) none)
    (trail-graph-method-14 () none) ;; 14 ;; (debug-draw-path (_type_ int (pointer uint16) vector vector rgba float) symbol)
    (trail-graph-method-15 () none) ;; 15 ;; (do-path (_type_ vector vector) int)
    (trail-graph-method-16 () none) ;; 16 ;; (trail-graph-method-16 () none)
    (trail-graph-method-17 () none) ;; 17 ;; (get-node-location-by-id (_type_ uint vector) vector)
    (trail-graph-method-18 () none) ;; 18 ;; (get-path-to-root (_type_ (pointer uint16) int (pointer int32) (pointer float)) int)
    (trail-graph-method-19 () none) ;; 19 ;; (trail-graph-method-19 (_type_ int int) symbol)
    (trail-graph-method-20 () none) ;; 20 ;; (try-initialize (_type_) symbol)
    (trail-graph-method-21 () none) ;; 21 ;; (update-node-flags-for-conn (_type_ int trail-node-flag trail-node-flag) none)
    (trail-graph-method-22 () none) ;; 22 ;; (trail-graph-method-22 (_type_ int) none)
    (trail-graph-method-23 () none) ;; 23 ;; (reset-search-state (_type_) none)
    (trail-graph-method-24 () none) ;; 24 ;; (get-next-to-explore (_type_) int)
    (trail-graph-method-25 () none) ;; 25 ;; (trail-graph-method-25 (_type_ trail-conn-search int int) none)
    (trail-graph-method-26 () none) ;; 26 ;; (do-search! (_type_ vector vector trail-cached-search-info) none)
    (trail-graph-method-27 () none) ;; 27 ;; (do-some-work (_type_) int)
    (trail-graph-method-28 () none) ;; 28 ;; (run-until-done-or-timeout (_type_ int) none)
    (trail-graph-method-29 () none) ;; 29
    (trail-graph-method-30 () none) ;; 30
    (trail-graph-method-31 () none) ;; 31
    (trail-graph-method-32 () none) ;; 32
    (trail-graph-method-33 () none) ;; 33
    )
  )

(define-extern *trail-graph* trail-graph)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; minimap-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum minimap-flag
  :type uint32
  :bitfield #t
  (active 0)
  (fade-in 1)
  (fade-out 2)
  (clamp 3)
  (trail 4)
  (task-graph 5)
  (flash 6)
  (minimap 7)
  (background 8)
  (task 9)
  (enemy 10)
  (frustum 11)
  (racer 12)
  (bigmap 13)
  (bigmap-only 14)
  (goal 15)
  (local-only 16)
  (transport 17)
  (ctywide 18)
  (wasall 19)
  (waswide 20)
  (desert 21)
  )

(defenum minimap-class
  :type uint16
  (none 0)
  (onintent 1)
  (vinroom 2)
  (sewer-kg 3)
  (sewer-genb 4)
  (sewer-slumb 5)
  (hiphog 6)
  (gungame 7)
  (gun-yellow 8)
  (desert-nest-entrance 9)
  (guard 10)
  (parking-spot 11)
  (goal 12)
  (goal-no-trail 13)
  (goal-no-trail-bigmap 14)
  (cty-sniper-vicinity 15)
  (forest 16)
  (wascity-gungame 17)
  (city-transport 18)
  (wascity-leaper-race 19)
  (wascity-pre-game 20)
  (desert-transport 21)
  (waspal 22)
  (stadium 23)
  (wasteland-arena 24)
  (guard-frustum 25)
  (wasdoors 26)
  (gun-dark 27)
  (spargus-city 28)
  (racer 29)
  (racer-target 30)
  (racer-errol 31)
  (monk-temple 32)
  (bbush-desd 33)
  (bbush-desc 34)
  (bbush-desa 35)
  (bbush-desg 36)
  (bbush-desh 37)
  (bbush-desc-2 38)
  (bbush-dese 39)
  (bbush-desb 40)
  (bbush-desa-2 41)
  (bbush-desc-3 42)
  (bbush-desg-2 43)
  (bbush-desd-2 44)
  (bbush-desg-3 45)
  (bbush-dese-2 46)
  (bbush-dese-3 47)
  (bbush-desd-3 48)
  (bbush-desb-2 49)
  (bbush-wasa-1 50)
  (bbush-wasa-2 51)
  (bbush-wasa-3 52)
  (bbush-wasa-4 53)
  (bbush-wasb-2 54)
  (bbush-wasb-1 55)
  (bbush-wasb-4 56)
  (bbush-wasb-3 57)
  (bbush-desg-4 58)
  (bbush-wasb-5 59)
  (bbush-wasb-6 60)
  (bbush-desa-3 61)
  (bbush-wasa-5 62)
  (bbush-desd-4 63)
  (bbush-desd-5 64)
  (bbush-sluma-1 65)
  (bbush-genb-1 66)
  (bbush-slumb-1 67)
  (bbush-slumb-3 68)
  (bbush-desc-4 69)
  (bbush-inda-1 70)
  (bbush-dese-4 71)
  (bbush-desc-5 72)
  (bbush-desb-3 73)
  (bbush-wasa-6 74)
  (bbush-wasb-7 75)
  (bbush-indb-1 76)
  (bbush-desf 77)
  (bbush-port-1 78)
  (bbush-genb-2 79)
  (bbush-genb-3 80)
  (bbush-genb-4 81)
  (bbush-slumb-4 82)
  (bbush-slumc-1 83)
  (bbush-dese-5 84)
  (bbush-post-game 85)
  (bbush-slumc-2 86)
  (bbush-sluma-2 87)
  (bbush-sluma-3 88)
  (bbush-indb-2 89)
  (bbush-indb-3 90)
  (bbush-inda-2 91)
  (bbush-inda-3 92)
  (bbush-inda-4 93)
  (bbush-inda-5 94)
  (bbush-port-4 95)
  (bbush-port-5 96)
  (bbush-port-6 97)
  (bbush-port-7 98)
  (bbush-port-8 99)
  (bbush-desb-4 100)
  (atoll-valve 101)
  (atoll-ashelin 102)
  (mountain-lens 103)
  (mountain-shard 104)
  (mountain-gear 105)
  (ruins-hut 106)
  (forest-samos 107)
  (metalhead 108)
  (kleever-arena 109)
  (seem-wascitya 110)
  (seem-wascityb 111)
  (kleever-wasdoors 112)
  (damus-wasdoors 113)
  (damus-waspal 114)
  (damus-arena 115)
  (kleever-wascityb 116)
  (red-clamped-dot 117)
  (tiny-red-dot 118)
  (desert-temple 119)
  (desert-oasis 120)
  (desert-corral 121)
  (sig-wasdoors 122)
  (freehq 123)
  (green-clamped-dot 124)
  (nest-cocoon 125)
  (nest-bridge 126)
  (factory 127)
  (big-orange-flashing-clamped-dot 128)
  (big-red-flashing-clamped-dot 129)
  (big-green-flashing-clamped-dot 130)
  (big-purple-flashing-clamped-dot 131)
  (medium-purple-dot 132)
  (parked-vehicle 133)
  (samos-genb 134)
  (projectile 135)
  (desertb-race 136)
  (big-red-flashing-trail-dot 137)
  (big-green-flashing-trail-dot 138)
  (robot-frustum 139)
  (desert-marauder-village 140)
  (gray-clamped-dot 141)
  (volcano-monk 142)
  (volcano-collapsing-rock 143)
  (volcano-stone-lid 144)
  (volcano-dark-maker-idol 145)
  (medium-green-dot 146)
  (big-red-flashing-dot 147)
  (factory-clamped-target 148)
  (factory-clamped-tower 149)
  (desglide-ring-dot 150)
  (desglide-thermal-dot 151)
  (mine-elevator 152)
  (mine-armor 153)
  (mine-sign-up 154)
  (mine-sign-down 155)
  (mine-door 156)
  (ruins-elec-gate 157)
  (ruins-goal 158)
  (dp-bipedal 159)
  (neo-wasp 160)
  (dark-maker 161)
  (templea-door 162)
  (templeb-watchers 163)
  (templeb-regen 164)
  (templeb-warpgate 165)
  (templex-darkmaker 166)
  (temple-tests-door 167)
  (templeb-freeze 168)
  (temple-elev 169)
  (factoryc-vehicle 170)
  (templeb-defend 171)
  (templeb-seem 172)
  (temple-defend-door-1 173)
  (temple-defend-door-2 174)
  (temple-defend-door-3 175)
  (palace-ruins 176)
  )

(deftype minimap-table-entry (structure)
  ((corner           vector :inline :offset-assert 0)
   (level-name       basic          :offset-assert 16)
   (tex-name         basic          :offset-assert 20)
   (meters-per-texel float          :offset-assert 24)
   (pos-scale        float          :offset-assert 28)
   (min-inv-scale    float          :offset-assert 32)
   (max-inv-scale    float          :offset-assert 36)
   (switch-immediate basic          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype minimap-class-node (structure)
  ((default-position vector       :inline :offset-assert 0)
   (flags            minimap-flag         :offset-assert 16)
   (name             basic                :offset-assert 20)
   (icon-xy          vector2ub    :inline :offset-assert 24)
   (class            minimap-class        :offset-assert 26) ;; minimap-class
   (scale            float                :offset-assert 28)
   (color            rgba                 :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x24
  :flag-assert         #xa00000024
  (:methods
    (minimap-class-node-method-9 () none) ;; 9
    )
  )

(deftype connection-minimap (connection-pers)
  ((next              connection-minimap         :offset-assert 0 :override) ;; connection-pers
   (handle            handle                     :offset-assert 8 :overlay-at update-time) ;;
   (position          vector                     :offset-assert 16 :overlay-at (-> param 0)) ;; object
   (alpha             float                      :offset-assert 20 :overlay-at (-> param 1))
   (flags             minimap-flag               :offset-assert 24 :overlay-at (-> param 2))
   (class             minimap-class-node         :offset-assert 28 :overlay-at (-> param 3))
   (node              uint16                     :offset-assert 32)
   (edge-ry           int16                      :offset-assert 34) ;; float
   (last-world-pos    vector             :inline :offset-assert 48)
   (last-relative-pos vector             :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; field key uses ~A with a signed load.
  )

(deftype engine-minimap (engine-pers)
  ((alive-list connection-minimap  :offset-assert 24 :override)
   (dead-list  connection-minimap  :offset-assert 28 :override)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  )

(deftype minimap-trail (structure)
  ((used-by        connection-minimap               :offset-assert 0)
   (search-id      uint32                           :offset-assert 4)
   (node-count     int16                            :offset-assert 8)
   (goal-node-id   int32                            :offset-assert 12)
   (node-path-dist float                            :offset-assert 16)
   (last-updated   uint64                           :offset-assert 24)
   (cached-info    trail-cached-search-info :inline :offset-assert 32)
   (node-id        uint16                   64      :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #xd0
  :flag-assert         #xb000000d0
  (:methods
    (get-distance-with-path (_type_ vector vector) float) ;; 9
    (minimap-trail-method-10 () none) ;; 10 ;; (reset (_type_) none)
    )
  )

(deftype minimap-draw-work (structure)
  ((buf           dma-buffer         :offset-assert 0) ;; guessed by decompiler
   (justify-right symbol             :offset-assert 4) ;; guessed by decompiler
   (global-flags  uint32             :offset-assert 8)
   (draw-pos      vector4w   :inline :offset-assert 16)
   (mat           matrix     :inline :offset-assert 32)
   (corner        vector     4 :inline      :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype minimap (structure)
  ((draw-tmpl        dma-gif-packet :inline :offset-assert 0)
   (draw2-tmpl       dma-gif-packet :inline :offset-assert 32)
   (draw3-tmpl       dma-gif-packet :inline :offset-assert 64)
   (draw4-tmpl       dma-gif-packet :inline :offset-assert 96)
   (sprite-tmpl      dma-gif-packet :inline :offset-assert 128)
   (adgif-tmpl       dma-gif-packet :inline :offset-assert 160)
   (color            vector4w       :inline :offset-assert 192)
   (offset           vector         :inline :offset-assert 208)
   (minimap-corner   vector         :inline :offset-assert 224)
   (last-name        string                 :offset-assert 240) ;; guessed by decompiler
   (last-tex         basic                  :offset-assert 244)
   (target-inv-scale float                  :offset-assert 248)
   (map-bits         uint64                 :offset-assert 256)
   (level            level                  :offset-assert 264) ;; guessed by decompiler
   (ctywide          level                  :offset-assert 268) ;; guessed by decompiler
   (meters-per-texel float                  :offset-assert 272)
   (pos-scale        float                  :offset-assert 276)
   (min-inv-scale    float                  :offset-assert 280)
   (max-inv-scale    float                  :offset-assert 284)
   (inv-scale        float                  :offset-assert 212 :overlay-at (-> offset y))
   (map-inv-scale    float                  :offset-assert 288)
   (icon-inv-scale   float                  :offset-assert 292)
   (fade             float                  :offset-assert 220 :overlay-at (-> offset w))
   (engine           engine-minimap         :offset-assert 296) ;; guessed by decompiler
   (engine-key       uint32                 :offset-assert 300)
   (trail            minimap-trail  6 :inline :offset-assert 304) ;; guessed by decompiler
   (race-tex         texture                :offset-assert 1552) ;; guessed by decompiler
   (race-scale       float                  :offset-assert 1556)
   (race-level       level                  :offset-assert 1560) ;; guessed by decompiler
   (sprite2-tmpl     dma-gif-packet :inline :offset-assert 1568)
   (race-corner      vector         :inline :offset-assert 1600)
   (goal-time        float                  :offset-assert 1616)
   (frustum-alpha    float                  :offset-assert 1620)
   )
  :method-count-assert 28
  :size-assert         #x658
  :flag-assert         #x1c00000658
  (:methods
    (minimap-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (get-trail-for-connection (_type_ connection-minimap symbol) minimap-trail) ;; 10
    (minimap-method-11 () none) ;; 11 ;; (get-icon-draw-pos (_type_ connection-minimap minimap-trail vector float vector) symbol)
    (add-icon! (_type_ process uint int vector int) connection-minimap) ;; 12
    (minimap-method-13 () none) ;; 13 ;; (free-trail-by-connection (_type_ connection-minimap) none)
    (minimap-method-14 () none) ;; 14 ;; (update-trails (_type_) none)
    (minimap-method-15 () none) ;; 15 ;; (draw-1 (_type_ dma-buffer vector4w symbol) none)
    (minimap-method-16 () none) ;; 16 ;; (draw-connection (_type_ minimap-draw-work connection-minimap) none)
    (minimap-method-17 () none) ;; 17 ;; (draw-frustum-1 (_type_ minimap-draw-work connection-minimap) none)
    (minimap-method-18 () none) ;; 18 ;; (draw-frustum-2 (_type_ minimap-draw-work connection-minimap) none)
    (minimap-method-19 () none) ;; 19 ;; (sub-draw-1-2 (_type_ minimap-draw-work) none)
    (minimap-method-20 () none) ;; 20 ;; (update! (_type_) symbol)
    (minimap-method-21 () none) ;; 21 ;; (sub-draw-1-1 (_type_ minimap-draw-work) none)
    (minimap-method-22 () none) ;; 22 ;; (set-color (_type_ vector) none)
    (minimap-method-23 () none) ;; 23 ;; (draw-racer-2 (_type_ minimap-draw-work connection-minimap) none)
    (minimap-method-24 () none) ;; 24 ;; (draw-sprite2 (_type_ dma-buffer vector4w symbol) none)
    (minimap-method-25 () none) ;; 25 ;; (set-race-texture (_type_ texture float level) none)
    (minimap-method-26 () none) ;; 26 ;; (draw-racer-1 (_type_ minimap-draw-work connection-minimap float float float) none)
    (minimap-method-27 () none) ;; 27 ;; (set-race-corner (_type_ float float) none)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bigmap-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype bigmap-image (structure)
  ((clut-offset  uint32   :offset-assert 0)
   (image-offset uint32   :offset-assert 4)
   (width        uint32   :offset-assert 8)
   (height       uint32   :offset-assert 12)
   (data         uint8  1 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x11
  :flag-assert         #x900000011
  )

(deftype bigmap-info (vector)
  ((scale     float  :offset-assert 8 :overlay-at z)
   (inv-scale float  :offset-assert 12 :overlay-at w)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bigmap-info-array (structure)
  ((data bigmap-info 24 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype bigmap (basic)
  ((drawing-flag        symbol                      :offset-assert 4) ;; guessed by decompiler
   (loading-flag        symbol                      :offset-assert 8) ;; guessed by decompiler
   (bigmap-index        uint32                      :offset-assert 12)
   (bigmap-image        external-art-buffer         :offset-assert 16) ;; guessed by decompiler
   (tpage               external-art-buffer         :offset-assert 20) ;; guessed by decompiler
   (tpage2              basic                       :offset-assert 24)
   (progress-minimap    texture-page                :offset-assert 28) ;; guessed by decompiler
   (progress-minimap2   basic                       :offset-assert 32)
   (load-index          uint32                      :offset-assert 36)
   (x0                  int32                       :offset-assert 40)
   (y0                  int32                       :offset-assert 44)
   (x1                  int32                       :offset-assert 48)
   (y1                  int32                       :offset-assert 52)
   (goal-time           float                       :offset-assert 56)
   (sprite-tmpl         dma-gif-packet      :inline :offset-assert 64)
   (draw-tmpl           dma-gif-packet      :inline :offset-assert 96)
   (adgif-tmpl          dma-gif-packet      :inline :offset-assert 128)
   (offset              vector              :inline :offset-assert 160)
   (size                float                       :offset-assert 168 :overlay-at (-> offset z))
   (scale               float                       :offset-assert 172 :overlay-at (-> offset w))
   (scroll              vector              :inline :offset-assert 176)
   (pos                 vector4w            :inline :offset-assert 192)
   (color               vector4w            :inline :offset-assert 208)
   (corner              vector              4 :inline       :offset-assert 224) ;; guessed by decompiler
   (auto-save-icon-flag symbol                      :offset-assert 288) ;; guessed by decompiler
   (global-flags        uint32                      :offset-assert 292)
   )
  :method-count-assert 23
  :size-assert         #x128
  :flag-assert         #x1700000128
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (bigmap-method-9 () none) ;; 9 ;; (initialize (_type_) none)
    (bigmap-method-10 () none) ;; 10 ;; (update (_type_) none)
    (bigmap-method-11 () none) ;; 11 ;; (draw (_type_ int int int int) int)
    (bigmap-method-12 () none) ;; 12 ;; (handle-cpad-inputs (_type_) int)
    (bigmap-method-13 () none) ;; 13 ;; (compress-all (_type_) int)
    (bigmap-method-14 () none) ;; 14 ;; (enable-drawing (_type_) none)
    (bigmap-method-15 () none) ;; 15 ;; (disable-drawing (_type_) int)
    (bigmap-method-16 (_type_) none) ;; 16 ;; (dump-to-file (_type_) file-stream)
    (bigmap-method-17 () none) ;; 17 ;; (set-pos! (_type_ vector) int)
    (bigmap-method-18 () none) ;; 18 ;; (decompress-current-masks! (_type_) int)
    (bigmap-method-19 () none) ;; 19 ;; (compress-current-masks! (_type_) int)
    (bigmap-method-20 () none) ;; 20 ;; (set-enable-from-position! (_type_) int)
    (bigmap-method-21 () none) ;; 21 ;; (maybe-fill-for-position (_type_ int int) int)
    (bigmap-method-22 () none) ;; 22 ;; (texture-upload-dma (_type_ dma-buffer (pointer uint32) int int int gs-psm) none)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++settings-h:game-feature
(defenum game-feature
  :type uint64
  :bitfield #t
  (feature0 0)
  (feature1 1)
  (feature2 2)
  (feature3 3)
  (feature4 4)
  (gun 5)
  (gun-red-1 6)
  (gun-red-2 7)
  (gun-red-3 8)
  (gun-yellow-1 9)
  (gun-yellow-2 10)
  (gun-yellow-3 11)
  (gun-blue-1 12)
  (gun-blue-2 13)
  (gun-blue-3 14)
  (gun-dark-1 15)
  (gun-dark-2 16)
  (gun-dark-3 17)
  (board 18)
  (feature19 19)
  (sidekick 20)
  (feature21 21)
  (feature22 22)
  (gun-upgrade-yellow-ammo-1 23)
  (gun-upgrade-yellow-ammo-2 24)
  (gun-upgrade-red-ammo-1 25)
  (gun-upgrade-red-ammo-2 26)
  (gun-upgrade-blue-ammo-1 27)
  (gun-upgrade-blue-ammo-2 28)
  (gun-upgrade-dark-ammo-1 29)
  (gun-upgrade-dark-ammo-2 30)
  (feature31 31)
  (feature32 32)
  (feature33 33)
  (feature34 34)
  (feature35 35)
  (feature36 36)
  (board-launch 37)
  (board-trail 38)
  (feature39 39)
  (darkjak 40)
  (darkjak-smack 41)
  (darkjak-bomb0 42)
  (darkjak-bomb1 43)
  (feature44 44)
  (feature45 45)
  (lightjak 46)
  (lightjak-regen 47)
  (lightjak-swoop 48)
  (lightjak-freeze 49)
  (lightjak-shield 50)
  (artifact-invis 51)
  (armor0 52)
  (armor1 53)
  (armor2 54)
  (armor3 55)
  (feature56 56)
  (feature57 57)
  (feature58 58)
  (feature59 59)
  (feature60 60)
  (feature61 61)
  (feature62 62)
  (feature63 63)
  )
;; ---settings-h:game-feature

;; +++settings-h:game-secrets
(defenum game-secrets
  :type uint64
  :bitfield #t
  (hero-mode 0)
  (scene-player-1 1)
  (scene-player-2 2)
  (scene-player-3 3)
  (title-commentary 4)
  (level-select-1 5)
  (level-select-2 6)
  (level-select-3 7)
  (scrap-book-1 8)
  (scrap-book-2 9)
  (scrap-book-3 10)
  (model-viewer-1 11)
  (model-viewer-2 12)
  (model-viewer-3 13)
  (toggle-beard 14)
  (hflip-screen 15)
  (endless-ammo 16)
  (invulnerable 17)
  (endless-dark 18)
  (endless-light 19)
  (gs20 20)
  (gs21 21)
  (gungame-ratchet 22)
  (big-head 23)
  (little-head 24)
  (fast-movie 25)
  (slow-movie 26)
  (unlimited-turbos 27)
  (vehicle-hit-points 28)
  (board-fast 29)
  (vehicle-fox 30)
  (vehicle-mirage 31)
  (vehicle-x-ride 32)
  (kleever-diaper 33)
  (bad-weather 34)
  (fast-weather 35)
  (daxter-pants 36)
  (darkjak-tracking 37)
  (commentary 38)
  (jak-is-jak2 39)
  (button-invis 40)
  (statistics 41)
  (gun-upgrade-red-1 42)
  (gun-upgrade-red-2 43)
  (gun-upgrade-red-3 44)
  (gun-upgrade-yellow-1 45)
  (gun-upgrade-yellow-2 46)
  (gun-upgrade-yellow-3 47)
  (gun-upgrade-blue-1 48)
  (gun-upgrade-blue-2 49)
  (gun-upgrade-blue-3 50)
  (gun-upgrade-dark-1 51)
  (gun-upgrade-dark-2 52)
  (gun-upgrade-dark-3 53)
  (gun-upgrade-ammo-red 54)
  (gun-upgrade-ammo-yellow 55)
  (gun-upgrade-ammo-blue 56)
  (gun-upgrade-ammo-dark 57)
  (gs58 58)
  (gs59 59)
  (gs60 60)
  (gs61 61)
  (gs62 62)
  (gs63 63)
  )
;; ---settings-h:game-secrets

;; +++settings-h:game-score
(defenum game-score
  :type uint64
  (none)
  (gs0)
  (gs1)
  (gs2)
  (gs3)
  (gs4)
  (gs5)
  (gs6)
  (gs7)
  (gs8)
  (gs9)
  (gs10)
  (gs11)
  (gs12)
  (gs13)
  (gs14)
  (gs15)
  (gs16)
  (gs17)
  (gs18)
  (gs19)
  (gs20)
  )
;; ---settings-h:game-score

;; +++settings-h:game-vehicles
(defenum game-vehicles
  :type uint64
  :bitfield #t
  (v-turtle 0)
  (v-snake 1)
  (v-scorpion 2)
  (v-toad 3)
  (v-fox 4)
  (v-rhino 5)
  (v-mirage 6)
  (v-x-ride 7)
  )
;; ---settings-h:game-vehicles

(declare-type resetter-spec structure)
(define-extern crate type)
(deftype user-setting-data (structure)
  ((border-mode            symbol              :offset-assert 0)
   (process-mask           process-mask        :offset-assert 4)
   (common-page            int32               :offset-assert 8)
   (language               language-enum       :offset-assert 12)
   (screenx                int32               :offset-assert 16)
   (screeny                int32               :offset-assert 20)
   (vibration              symbol              :offset-assert 24)
   (play-hints             symbol              :offset-assert 28)
   (movie                  (pointer process)   :offset-assert 32)
   (talking                (pointer process)   :offset-assert 36)
   (spooling               (pointer process)   :offset-assert 40)
   (hint                   (pointer process)   :offset-assert 44)
   (ambient                (pointer process)   :offset-assert 48)
   (video-mode             symbol              :offset-assert 52)
   (aspect-ratio           symbol              :offset-assert 56)
   (set-video-mode         symbol              :offset-assert 60)
   (auto-save              symbol              :offset-assert 64)
   (bg-r                   float               :offset-assert 68)
   (bg-g                   float               :offset-assert 72)
   (bg-b                   float               :offset-assert 76)
   (bg-a                   float               :offset-assert 80)
   (bg-a-speed             float               :offset-assert 84)
   (bg-a-force             float               :offset-assert 88)
   (blur-a                 float               :offset-assert 92)
   (blur-a-speed           float               :offset-assert 96)
   (allow-progress         symbol              :offset-assert 100)
   (allow-pause            symbol              :offset-assert 104)
   (ocean-off              symbol              :offset-assert 108)
   (allow-look-around      symbol              :offset-assert 112)
   (camera-stick-dir       symbol              :offset-assert 116)
   (movie-name             symbol              :offset-assert 120)
   (weather                symbol              :offset-assert 124)
   (mouse                  symbol              :offset-assert 128)
   (cursor                 symbol              :offset-assert 132)
   (keybd                  symbol              :offset-assert 136)
   (task-mask              task-mask           :offset-assert 140)
   (region-mode            symbol              :offset-assert 144) ;; added (method 9 game-info)
   (duck                   symbol              :offset-assert 148)
   (attack                 symbol              :offset-assert 152)
   (gun                    symbol              :offset-assert 156)
   (board                  symbol              :offset-assert 160)
   (jump                   symbol              :offset-assert 164)
   (speed-mult             float               :offset-assert 168)
   (features               game-feature        :offset-assert 176)
   (vehicles               game-vehicles       :offset-assert 184)
   (sfx-volume             float               :offset-assert 192)
   (sfx-volume-movie       float               :offset-assert 196)
   (music-volume           float               :offset-assert 200)
   (music-volume-movie     float               :offset-assert 204)
   (dialog-volume          float               :offset-assert 208)
   (dialog-volume-talker   float               :offset-assert 212)
   (ambient-volume         float               :offset-assert 216)
   (ambient-volume-movie   float               :offset-assert 220)
   (dynamic-ambient-volume float               :offset-assert 224)
   (talker-volume          float               :offset-assert 228)
   (sound-flava            uint8               :offset-assert 232)
   (sound-flava-priority   float               :offset-assert 236)
   (mode-sound-bank        uint32              :offset-assert 240)
   (sound-excitement       float               :offset-assert 244)
   (sound-reverb           float               :offset-assert 248)
   (stereo-mode            int32               :offset-assert 252)
   (music                  symbol              :offset-assert 256)
   (sound-stinger          int32               :offset-assert 260)
   (spool-anim             spool-anim          :offset-assert 264)
   (sound-mode             uint32              :offset-assert 268)
   (task-manager           (pointer process)   :offset-assert 272)
   (task                   symbol              :offset-assert 276)
   (airlock                symbol              :offset-assert 280)
   (minimap                uint32              :offset-assert 284)
   (sound-tune             uint32              :offset-assert 288)
   (allow-continue         symbol              :offset-assert 292)
   (spotlight-color        rgba                :offset-assert 296)
   (highlight-color        rgba                :offset-assert 300)
   (subtitle               symbol              :offset-assert 304)
   (doorway                symbol              :offset-assert 308)
   (gem                    symbol              :offset-assert 312)
   (half-speed             symbol              :offset-assert 316)
   (gun-buoy               symbol              :offset-assert 320)
   (double-jump            symbol              :offset-assert 324)
   (pilot                  symbol              :offset-assert 328)
   (pilot-exit             symbol              :offset-assert 332)
   (pilot-death            symbol              :offset-assert 336)
   (speech-control         symbol              :offset-assert 340)
   (vehicle-hijacking      symbol              :offset-assert 344)
   (darkjak                symbol              :offset-assert 348)
   (lightjak               symbol              :offset-assert 352)
   (endlessfall            symbol              :offset-assert 356)
   (rain                   float               :offset-assert 360)
   (snow                   float               :offset-assert 364)
   (exclusive-load         symbol              :offset-assert 368)
   (render                 symbol              :offset-assert 372)
   (allow-timeout          symbol              :offset-assert 376)
   (mirror                 symbol              :offset-assert 380)
   (movie-skip-frame       float               :offset-assert 384)
   (allow-blackout         symbol              :offset-assert 388)
   (race-minimap           int32               :offset-assert 392)
   (beard                  symbol              :offset-assert 396)
   (ignore-target          symbol              :offset-assert 400)
   (subtitle-language      language-enum       :offset-assert 404)
   (sound-bank-load        symbol              :offset-assert 408)
   (allow-error            symbol              :offset-assert 412)
   (under-water-pitch-mod  float               :offset-assert 416)
   (slow-time              float               :offset-assert 420)
   (scanlines              float               :offset-assert 424)
   (restart-info           resetter-spec       :offset-assert 428)
   (fail-info              resetter-spec       :offset-assert 432)
   (death-info             resetter-spec       :offset-assert 436)
   (quit-info              resetter-spec       :offset-assert 440)
   (extra-bank-count       uint32              :offset-assert 444)
   (extra-bank             pair              3 :offset-assert 448)
   (borrow-count           uint32              :offset-assert 460)
   (borrow                 pair              3 :offset-assert 464)
   (exclusive-task-count   uint32              :offset-assert 476)
   (exclusive-task         int32             3 :offset-assert 480)
   (level-trans-time       int32               :offset-assert 492)
   (scarf                  float               :offset-assert 496)
   (goggles                float               :offset-assert 500)
   (board-trail            symbol              :offset-assert 504)
   (kg-primary-target      handle              :offset-assert 512)
   (ff-primary-target      handle              :offset-assert 520)
   (mh-primary-target      handle              :offset-assert 528)
   (kg-target-float        float               :offset-assert 536)
   (ff-target-float        float               :offset-assert 540)
   (target-float           float               :offset-assert 544)
   (kg-difficulty          float               :offset-assert 548)
   (fog-special-interp-targ float              :offset-assert 552)
   (fog-special-interp-rate float              :offset-assert 556)
   (traffic-spawn          symbol              :offset-assert 560)
   (stop-vehicle?          symbol              :offset-assert 564)
   (part-bounds-check      symbol              :offset-assert 568)
   (letterbox              float               :offset-assert 572)
   (letterbox-speed        float               :offset-assert 576)
   (minimap-level          symbol              :offset-assert 580)
   (bigmap-level           symbol              :offset-assert 584)
   (duststorm-push-player? symbol              :offset-assert 588)
   (dust-storm-fog-scalar  float               :offset-assert 592)
   (dust-storm-sound-scalar float              :offset-assert 596)
   (citizen-fights         symbol              :offset-assert 600)
   (allow-logo             symbol              :offset-assert 604)
   (brightness             float               :offset-assert 608)
   (contrast               float               :offset-assert 612)
   (stop-boats?            symbol              :offset-assert 616)
   (borrow-city-count      uint32              :offset-assert 620)
   (borrow-city            pair              3 :offset-assert 624)
   (faction-command-count  uint32              :offset-assert 636)
   (faction-command        pair              3 :offset-assert 640)
   (change-gun             symbol              :offset-assert 652)
   (kg-enemy-settings      symbol              :offset-assert 656)
   (ff-enemy-settings      symbol              :offset-assert 660)
   (mh-enemy-settings      symbol              :offset-assert 664)
   (city-heap-load         float               :offset-assert 668)
   (gun-target-guards?     symbol              :offset-assert 672)
   (freeze-screen          symbol              :offset-assert 676)
   (borrow-hold-perm-count uint32              :offset-assert 680)
   (borrow-hold-perm       pair              3 :offset-assert 684)
   (borrow-hold-count      uint32              :offset-assert 696)
   (borrow-hold            pair              3 :offset-assert 700)
   (cloth                  symbol              :offset-assert 712)
   (player-control-override symbol             :offset-assert 716)
   (player-control-mask    uint32              :offset-assert 720)
   (gun-special-mode       symbol              :offset-assert 724)
   (airlock-command        pair                :offset-assert 728)
   (sky-type               symbol              :offset-assert 732)
   (global-wind            symbol              :offset-assert 736) ;; added (method 11 cloth-system)
   (ambient-wind-scalar    float               :offset-assert 740) ;; added (method 11 cloth-system)
   (halfpipe-jump-mult     float               :offset-assert 744)
   (audio-language         language-enum       :offset-assert 748)
   (armor                  symbol              :offset-assert 752)
   (city-sound             pair              3 :offset-assert 756)
   (board-max-speed        float               :offset-assert 768)
   (lock-sound-camera-to-target symbol         :offset-assert 772)
   (hide-crates?           symbol              :offset-assert 776)
   (pickups                symbol              :offset-assert 780)
   (sound-ear              handle              :offset-assert 784) ;; added, used in gsound.
   (sound-ear-scale        float               :offset-assert 792)
   (special-volume         float               :offset-assert 796)
   (dive                   symbol              :offset-assert 800)
   (timer-warn-seconds     uint32              :offset-assert 804)
   (gem-pool-index         int32               :offset-assert 808)
   (unique-vehicle-mission-critical symbol     :offset-assert 812)
   (turbo                  symbol              :offset-assert 816)
   (gun-eject              symbol              :offset-assert 820)
   (disable-parking-spots? symbol              :offset-assert 824)
   (gem-seek-target-dir?   symbol              :offset-assert 828)
   (unk-volume             float               :offset-assert 832)
   (nuke-active?           symbol              :offset-assert 836)
   (disable-guard-chatter? symbol              :offset-assert 840)
   (use-alternate-bouncer? symbol              :offset-assert 844)
   (pad uint8 60 :offset 848) ;; added
   )
  :method-count-assert 11
  :size-assert         #x38c
  :flag-assert         #xb0000038c
  (:methods
    (user-setting-data-method-9 (_type_ engine engine-pers engine) user-setting-data) ;; 9
    (user-setting-data-method-10 (_type_ object symbol float uint) user-setting-data) ;; 10
    )
  )

;; +++settings-h:cam-slave-options
(defenum cam-slave-options
  :type uint64
  :bitfield #t
  (BUTT_CAM)
  (SAME_SIDE)
  (MOVE_SPHERICAL)
  (ALLOW_Z_ROT)
  (JUMP_PITCHES)
  (COLLIDE)
  (FIND_HIDDEN_TARGET)
  (DRAG)
  (PLAYER_MOVING_CAMERA)
  (LINE_OF_SIGHT)
  (MOVEMENT_BLOCKED)
  (SHRINK_MAX_ANGLE)
  (GOTO_GOOD_POINT)
  (BIKE_MODE)
  (NO_ROTATE)
  (STICKY_ANGLE)
  (BLOCK_RIGHT_STICK)
  (ALLOW_SHIFT_BUTTONS)
  (GUN_CAM)
  (WIDE_FOV)
  (RAPID_TRACKING)
  (EASE_SPLINE_IDX)
  (VERTICAL_FOLLOW_MATCHES_CAMERA)
  (HAVE_BUTT_HANDLE)
  (BOMBBOT)
  (JUMP_LAG)
  )
;; ---settings-h:cam-slave-options

;; +++settings-h:cam-master-options
(defenum cam-master-options
  :type uint64
  :bitfield #t
  (HAVE_TARGET) ;; 1
  (SET_COMBINER_AXIS) ;; 2
  (FLIP_COMBINER) ;; 4
  (HAVE_EASE_TO_POS) ;; 8
  (IN_BASE_REGION) ;; 10
  (IGNORE_ANALOG) ;; 20
  (BLOCK_RIGHT_STICK) ;; 40
  (USE_L1_R1) ;; 80
  (READ_BUTTONS)
  (IMMEDIATE_STRING_MIN_MAX)
  )
;; ---settings-h:cam-master-options

(deftype cam-setting-data (structure)
  ((fov                           degrees                    :offset-assert 0) ;; degrees
   (pov-handle                    handle                     :offset 16) ;; handle
   (pov-bone                      int32                      :offset-assert 24)
   (pov-offset                    vector             :inline :offset-assert 32)
   (string-default                symbol                     :offset-assert 48) ;; symbol
   (string-max-length             meters                     :offset-assert 52)
   (string-min-length             meters                     :offset-assert 56)
   (string-max-height             meters                     :offset-assert 60)
   (string-min-height             meters                     :offset-assert 64)
   (string-cliff-height           meters                     :offset-assert 68)
   (string-camera-floor           meters                     :offset-assert 72)
   (string-camera-ceiling         meters                     :offset-assert 76)
   (gun-max-height                meters                     :offset-assert 80)
   (gun-min-height                meters                     :offset-assert 84)
   (string-local-down             vector             :inline :offset-assert 96)
   (slave-options                 cam-slave-options          :offset-assert 112)
   (matrix-blend-max-angle        degrees                    :offset-assert 120) ;; degrees
   (matrix-blend-max-partial      float                      :offset-assert 124)
   (string-spline-max-move        meters                     :offset-assert 128)
   (string-spline-accel           meters                     :offset-assert 132)
   (string-spline-max-move-player meters                     :offset-assert 136)
   (string-spline-accel-player    meters                     :offset-assert 140)
   (string-startup-vector         vector             :inline :offset-assert 144)
   (use-string-startup-vector     symbol                     :offset-assert 160)
   (look-at-point                 vector             :inline :offset-assert 176)
   (use-look-at-point             symbol                     :offset-assert 192) ;; guessed by decompiler
   (target-height                 meters                     :offset-assert 196)
   (foot-offset                   meters                     :offset-assert 200)
   (head-offset                   meters                     :offset-assert 204)
   (teleport-on-entity-change     symbol                     :offset-assert 208) ;; symbol
   (entity-name                   string                     :offset-assert 212)
   (cam-slope                     string                     :offset-assert 216)
   (entity-or-mode-changed        symbol                     :offset-assert 220) ;; symbol
   (master-options                cam-master-options         :offset-assert 224)
   (entity-mask                   uint32                     :offset-assert 232)
   (mode-name                     symbol                     :offset-assert 236) ;; guessed by decompiler
   (real-entity-name              string                     :offset-assert 240)
   (cam-mode                      symbol                     :offset-assert 244) ;; guessed by decompiler
   (interp-time                   uint32                     :offset-assert 248)
   (no-intro                      symbol                     :offset-assert 252) ;; guessed by decompiler
   (use-point-of-interest         symbol                     :offset-assert 256) ;; guessed by decompiler
   (point-of-interest             vector             :inline :offset-assert 272)
   (handle-of-interest            handle                     :offset-assert 288) ;; handle
   (mouse-tumble-point            vector             :inline :offset-assert 304)
   (use-mouse-tumble-point        symbol                     :offset-assert 320) ;; guessed by decompiler
   (mouse-input                   symbol                     :offset-assert 324) ;; guessed by decompiler
   (cpad1-skip-buttons            symbol                     :offset-assert 328) ;; guessed by decompiler
   (butt-handle                   handle                     :offset-assert 336) ;; handle
   (butt-angle                    float                      :offset-assert 344)
   (extra-follow-height           float                      :offset-assert 348)
   (interp-time-priority          uint32                     :offset-assert 352)
   (string-max-length-default     symbol                     :offset-assert 356) ;; guessed by decompiler
   (string-min-length-default     symbol                     :offset-assert 360) ;; guessed by decompiler
   (string-max-height-default     symbol                     :offset-assert 364) ;; guessed by decompiler
   (string-min-height-default     symbol                     :offset-assert 368) ;; guessed by decompiler
   (flip-vertical                 symbol                     :offset-assert 372)
   (flip-horizontal               symbol                     :offset-assert 376)
   (unk-float0                    float                      :offset-assert 380)
   (fov-priority                  float                      :offset-assert 384)
   (dummy                         object             98      :offset-assert 388) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x30c
  :flag-assert         #xb0000030c
  ;; field cam-slave-options is likely a value type. field cam-master-options is likely a value type.
  (:methods
    (cam-setting-data-method-9 (_type_ engine engine-pers engine) _type_) ;; 9
    (cam-setting-data-method-10 (_type_ object (pointer process) float int) _type_) ;; 10
    )
  )

(deftype setting-control (basic)
  ((user-current                 user-setting-data :inline :offset-assert 16)
   (user-target                  user-setting-data :inline :offset-assert 928)
   (user-default                 user-setting-data :inline :offset-assert 1840)
   (cam-current                  cam-setting-data  :inline :offset-assert 2752)
   (cam-target                   cam-setting-data  :inline :offset-assert 3536)
   (cam-default                  cam-setting-data  :inline :offset-assert 4320)
   (engine                       engine                    :offset-assert 5100) ;; guessed by decompiler
   (engine-pers                  engine-pers               :offset-assert 5104) ;; guessed by decompiler
   (engine-hi                    engine                    :offset-assert 5108) ;; guessed by decompiler
   (sound-stinger-time           time-frame                :offset-assert 5112) ;; time-frame
   (sound-stinger-change-time    time-frame        4       :offset-assert 5120) ;; guessed by decompiler
   (sound-excitement-change-time time-frame                :offset-assert 5152) ;; time-frame
   (sound-excitement-targ        float                     :offset-assert 5160)
   (sound-excitement-level       uint32                    :offset-assert 5164)
   )
  :method-count-assert 20
  :size-assert         #x1430
  :flag-assert         #x1400001430
  (:methods
    (new (symbol type int) _type_) ;; 0
    (add-setting (_type_ process symbol object object object) none) ;; 9
    (persist-with-delay (_type_ symbol time-frame symbol symbol float int) none) ;; 10
    (set-setting (_type_ process symbol object object object) none) ;; 11
    (remove-setting (_type_ process symbol) none) ;; 12
    (kill-persister (_type_ engine-pers object) none) ;; 13
    (setting-control-method-14 (_type_ object) connectable) ;; 14
    (setting-control-method-15 (_type_ object) connectable) ;; 15
    (remove-setting-by-arg0 (_type_ object) none) ;; 16
    (set-setting-by-param (_type_ symbol object object object) connection) ;; 17
    (apply-settings (_type_) user-setting-data) ;; 18
    (update (_type_) user-setting-data) ;; 19
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; capture                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern gs-set-default-store-image "Set up a gs-store-image-packet for copying VRAM data to RAM." (function gs-store-image-packet int int gs-psm int int int int int))
(define-extern store-image "Take a screenshot!" (function screen-shot-work none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memory-usage-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum mem-usage-id
    :bitfield #f
    :type uint32

    (entity 44)
    (camera 45)

    (bsp-main 59)
    (bsp-misc 60)
    (bsp-node 61)
    (bsp-leaf-vis-self 62)

    (pat 65)


    (joint 68)

    (joint-anim-compressed-control 70)
    (joint-anim-fixed 71)
    (joint-anim-frame 72)

    (art-group 74)
    (art-mesh-anim 75)
    (art-mesh-geo 76)
    (art-joint-geo 77)
    (art-joint-anim 78)

    (texture 83)

    (array 85)

    (eye-anim 112)
    )

(deftype memory-usage-info (structure)
  ((name  string  :offset-assert 0) ;; guessed by decompiler
   (count int32   :offset-assert 4)
   (used  int32   :offset-assert 8)
   (total int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype memory-usage-block (basic)
  ((work-bsp basic                 :offset-assert 4)
   (length   int32                 :offset-assert 8)
   (data     memory-usage-info 113 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x720
  :flag-assert         #xc00000720
  (:methods
    (reset! (_type_) _type_) ;; 9
    (calculate-total (_type_) int) ;; 10
    (print-mem-usage (_type_ level object) _type_) ;; 11
    )
  )

(define-extern *mem-usage* memory-usage-block)
(define-extern *dma-mem-usage* memory-usage-block)
(define-extern *temp-mem-usage* memory-usage-block)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blit-displays-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype blit-displays-work (structure)
  ((adgif-tmpl               dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl              dma-gif-packet :inline :offset-assert 32)
   (contrast-tmpl            dma-gif-packet :inline :offset-assert 64)
   (sprite-slow-tmpl         dma-gif-packet :inline :offset-assert 96)
   (draw-slow-time-tmpl      dma-gif-packet :inline :offset-assert 128)
   (line-tmpl                dma-gif-packet :inline :offset-assert 160)
   (scan-tmpl                dma-gif-packet :inline :offset-assert 192)
   (color                    vector4w       :inline :offset-assert 224)
   (line-color               uint64                 :offset-assert 240)
   (scan-colors              vector4w       15 :inline      :offset-assert 256) ;; guessed by decompiler
   (zoom-blur-pos            vector         :inline :offset-assert 496)
   (zoom-blur-count          int32                  :offset-assert 512)
   (zoom-blur-texels         int32                  :offset-assert 516)
   (zoom-blur-alpha-target   float                  :offset-assert 520)
   (zoom-blur-alpha-current  float                  :offset-assert 524)
   (zoom-blur-2d             basic                  :offset-assert 528)
   (menu-mode                symbol                 :offset-assert 532) ;; guessed by decompiler
   (screen-copied            symbol                 :offset-assert 536) ;; guessed by decompiler
   (vu1-enable-user-menu     vu1-renderer-mask      :offset-assert 544)
   (texture-enable-user-menu uint32                 :offset-assert 552)
   (count-down               uint32                 :offset-assert 556)
   (horizontal-flip-flag     symbol                 :offset-assert 560) ;; guessed by decompiler
   (scan-alpha               float                  :offset-assert 564)
   (scanline                 uint32                 :offset-assert 568)
   (progress-interp          float                  :offset-assert 572)
   (progress-interp-dest     float                  :offset-assert 576)
   (progress-interp-speed    float                  :offset-assert 580)
   (slow-time                float                  :offset-assert 584)
   )
  :method-count-assert 27
  :size-assert         #x24c
  :flag-assert         #x1b0000024c
  (:methods
    (blit-displays-work-method-9 () none) ;; 9
    (blit-displays-work-method-10 () none) ;; 10
    (blit-displays-work-method-11 () none) ;; 11
    (blit-displays-work-method-12 () none) ;; 12
    (blit-displays-work-method-13 () none) ;; 13
    (blit-displays-work-method-14 () none) ;; 14
    (blit-displays-work-method-15 () none) ;; 15
    (blit-displays-work-method-16 () none) ;; 16
    (blit-displays-work-method-17 (_type_ vector int float symbol) none) ;; 17
    (blit-displays-work-method-18 () none) ;; 18
    (blit-displays-work-method-19 () none) ;; 19
    (blit-displays-work-method-20 () none) ;; 20
    (get-menu-mode (_type_) symbol) ;; 21
    (get-screen-copied (_type_) symbol) ;; 22
    (get-horizontal-flip-flag (_type_) symbol) ;; 23
    (set-menu-mode (_type_ symbol) symbol) ;; 24
    (set-screen-copied (_type_ symbol) symbol) ;; 25
    (set-horizontal-flip-flag (_type_ symbol) symbol) ;; 26
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert 0)
   (snapshot2   int32  :offset-assert 4)
   (morph-start float  :offset-assert 8)
   (morph-end   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sky-color-day (structure)
  ((hour sky-color-hour 24 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert 0) ;; guessed by decompiler
   (pos            vector  :inline :offset-assert 0 :overlay-at data)
   (r-sun          float           :offset-assert 16 :overlay-at (-> pos 1 x))
   (r-halo         float           :offset-assert 20 :overlay-at (-> pos 1 y))
   (r-aurora       float           :offset-assert 24  :overlay-at (-> pos 1 z))
   (c-sun-start    rgba            :offset-assert 32  :overlay-at (-> pos 2 x)) ;; guessed by decompiler
   (c-sun-end      rgba            :offset-assert 48  :overlay-at (-> pos 3 x)) ;; guessed by decompiler
   (c-halo-start   rgba            :offset-assert 36 :overlay-at (-> pos 2 y)) ;; guessed by decompiler
   (c-halo-end     rgba            :offset-assert 52 :overlay-at (-> pos 3 y)) ;; guessed by decompiler
   (c-aurora-start rgba            :offset-assert 40 :overlay-at (-> pos 2 z)) ;; guessed by decompiler
   (c-aurora-end   rgba            :offset-assert 56 :overlay-at (-> pos 3 z)) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert 0) ;; guessed by decompiler
   (pos   vector  :inline :offset-assert 0 :overlay-at (-> data 0))
   (scale vector  :inline :offset-assert 16 :overlay-at (-> data 1))
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert 0)
   (tilt      float  :offset-assert 4)
   (rise      float  :offset-assert 8)
   (dist      float  :offset-assert 12)
   (min-halo  float  :offset-assert 16)
   (max-halo  float  :offset-assert 20)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype sky-upload-data (structure)
  ((data     uint128       16      :offset-assert 0) ;; guessed by decompiler
   (sun      sky-sun-data  2 :inline      :offset-assert 0 :overlay-at data) ;; guessed by decompiler
   (moon     sky-moon-data :inline :offset-assert 128 :overlay-at (-> data 8))
   (day-star sky-moon-data :inline :offset-assert 192 :overlay-at (-> data 12))
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype cloud-vertex (structure)
  ((pos  vector :inline :offset-assert 0)
   (stq  vector :inline :offset-assert 16)
   (col  vector :inline :offset-assert 32)
   (nrm  vector :inline :offset-assert 48)
   (stq2 vector :inline :offset-assert 64)
   (col2 vector :inline :offset-assert 80)
   (nrm2 vector :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype cloud-vert-array (structure)
  ((data cloud-vertex 100 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2bc0
  :flag-assert         #x900002bc0
  )

(deftype haze-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (nrm vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype haze-vert-array (structure)
  ((data haze-vertex 36 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x6c0
  :flag-assert         #x9000006c0
  )

(deftype cloud-lights (structure)
  ((sun0-normal      vector :inline :offset-assert 0)
   (sun1-normal      vector :inline :offset-assert 16)
   (moon-normal      vector :inline :offset-assert 32)
   (ambi-color       vector :inline :offset-assert 48)
   (ambi-color-lower vector :inline :offset-assert 64)
   (sun0-color       vector :inline :offset-assert 80)
   (sun1-color       vector :inline :offset-assert 96)
   (moon-color       vector :inline :offset-assert 112)
   (sun0-color-lower vector :inline :offset-assert 128)
   (sun0-scale       float          :offset-assert 144)
   (sun1-scale       float          :offset-assert 148)
   (moon-scale       float          :offset-assert 152)
   )
  :method-count-assert 9
  :size-assert         #x9c
  :flag-assert         #x90000009c
  )

(deftype haze-lights (structure)
  ((sun0-normal vector :inline :offset-assert 0)
   (sun1-normal vector :inline :offset-assert 16)
   (moon-normal vector :inline :offset-assert 32)
   (ambi-color  vector :inline :offset-assert 48)
   (sun0-color  vector :inline :offset-assert 64)
   (sun1-color  vector :inline :offset-assert 80)
   (moon-color  vector :inline :offset-assert 96)
   (sun0-scale  float          :offset-assert 112)
   (sun1-scale  float          :offset-assert 116)
   (moon-scale  float          :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype sky-work (structure)
  ((adgif-tmpl       dma-gif-packet  :inline :offset-assert 0)
   (draw-tmpl        dma-gif-packet  :inline :offset-assert 32)
   (draw-tmpl2       dma-gif-packet  :inline :offset-assert 64)
   (fog-tmpl         dma-gif-packet  :inline :offset-assert 96)
   (blend-tmpl       dma-gif-packet  :inline :offset-assert 128)
   (sprite-tmpl      dma-gif-packet  :inline :offset-assert 160)
   (sprite-tmpl2     dma-gif-packet  :inline :offset-assert 192)
   (sun-coords       vector          2  :inline      :offset-assert 224) ;; guessed by decompiler
   (green-coords     vector          2  :inline      :offset-assert 256) ;; guessed by decompiler
   (moon0-coords     vector          2  :inline     :offset-assert 288) ;; guessed by decompiler
   (moon1-coords     vector          2  :inline     :offset-assert 320) ;; guessed by decompiler
   (moon2-coords     vector          2  :inline      :offset-assert 352) ;; guessed by decompiler
   (day-star-coords  vector         2  :inline      :offset-assert 384)
   (star-coords      vector          2  :inline      :offset-assert 416) ;; guessed by decompiler
   (sun-colors       vector4w        2  :inline      :offset-assert 448) ;; guessed by decompiler
   (green-colors     vector4w        2  :inline      :offset-assert 480) ;; guessed by decompiler
   (moon-colors      vector4w        3  :inline      :offset-assert 512) ;; guessed by decompiler
   (day-star-colors  vector4w         3   :inline    :offset-assert 560)
   (star-colors      vector4w        16 :inline     :offset-assert 608) ;; guessed by decompiler
   (st-coords        vector          2  :inline     :offset-assert 864) ;; guessed by decompiler
   (random           vector4w        8  :inline     :offset-assert 896) ;; guessed by decompiler
   (giftag-base      dma-gif         :inline :offset-assert 1024)
   (giftag-haze      dma-gif         :inline :offset-assert 1040)
   (giftag-roof      dma-gif         :inline :offset-assert 1056)
   (giftag-ocean     dma-gif         :inline :offset-assert 1072)
   (fog              vector          :inline :offset-assert 1088)
   (sky              float           8       :offset-assert 1104) ;; guessed by decompiler
   (time             float                   :offset-assert 1136)
   (off-s            uint16                  :offset-assert 1140)
   (off-t            uint16                  :offset-assert 1142)
   (orbit            sky-orbit       3 :inline      :offset-assert 1144) ;; guessed by decompiler
   (upload-data      sky-upload-data :inline :offset-assert 1248)
   (ambi-color       vector          :inline :offset-assert 1504) ;; vector4w :inline
   (ambi-color-lower vector          :inline :offset-assert 1520) ;; vector4w :inline
   (sun0-color       vector          :inline :offset-assert 1536) ;; vector4w :inline
   (sun1-color       vector          :inline :offset-assert 1552) ;; vector4w :inline
   (moon-color       vector          :inline :offset-assert 1568) ;; vector4w :inline
   (sun0-color-lower vector          :inline :offset-assert 1584) ;; vector4w :inline
   (cam-mat          matrix          :inline :offset-assert 1600)
   (star-mat         matrix          :inline :offset-assert 1664)
   (vec0             vector4w        :inline :offset-assert 1728)
   (vec1             vector4w        :inline :offset-assert 1744)
   (cloud-lights     cloud-lights    :inline :offset-assert 1760)
   (haze-lights      haze-lights     :inline :offset-assert 1920)
   (buf              dma-buffer              :offset-assert 2044) ;; guessed by decompiler
   (draw-vortex      basic                   :offset-assert 2048)
   (day-star-scale   float                   :offset-assert 2052)
   (stars            vector          512 :inline    :offset-assert 2064) ;; guessed by decompiler
   (disable-day-star basic                   :offset-assert 10256)
   )
  :method-count-assert 39
  :size-assert         #x2814
  :flag-assert         #x2700002814
  (:methods
    (sky-work-method-9 () none) ;; 9 ;; (init-sun-data! (_type_ int float float float) none)
    (sky-work-method-10 () none) ;; 10 ;; (init-orbit-settings! (_type_ int float float float float float float) none)
    (sky-work-method-11 () none) ;; 11 ;; (update-colors-for-time (_type_ float) none)
    (sky-work-method-12 () none) ;; 12 ;; (update-time-and-speed (_type_ float float) none)
    (sky-work-method-13 () none) ;; 13 ;; (draw (_type_) none)
    (sky-work-method-14 () none) ;; 14 ;; (update-matrix (_type_ matrix) none)
    (sky-work-method-15 () none) ;; 15 ;; (update-template-colors (_type_) none)
    (sky-work-method-16 () none) ;; 16 ;; (init-regs-for-large-polygon-draw (_type_) none)
    (sky-work-method-17 () none) ;; 17 ;; (init-regs-for-sky-asm (_type_) none)
    (sky-work-method-18 () none) ;; 18 ;; (cloud-vtx-light-update (_type_ vector vector cloud-lights vector vector) none)
    (sky-work-method-19 () none) ;; 19 ;; (cloud-vtx-tex-update (_type_ vector vector vector cloud-lights) none)
    (sky-work-method-20 () none) ;; 20 ;; (adjust-cloud-lighting (_type_) none)
    (sky-work-method-21 () none) ;; 21 ;; (cloud-vtx1-to-sky (_type_ sky-vertex cloud-vertex) none)
    (sky-work-method-22 () none) ;; 22 ;; (cloud-vtx2-to-sky (_type_ sky-vertex cloud-vertex) none)
    (sky-work-method-23 () none) ;; 23 ;; (draw-clouds (_type_ dma-buffer) none)
    (sky-work-method-24 () none) ;; 24 ;; (apply-haze-light (_type_ vector vector haze-lights) none)
    (sky-work-method-25 () none) ;; 25 ;; (adjust-haze-lighting (_type_) none)
    (sky-work-method-26 () none) ;; 26 ;; (haze-vtx-to-sky (_type_ sky-vertex sky-vertex haze-vertex) none)
    (sky-work-method-27 () none) ;; 27 ;; (draw-haze (_type_ dma-buffer) none)
    (sky-work-method-28 () none) ;; 28 ;; (sun-dma (_type_ dma-buffer) none)
    (sky-work-method-29 () none) ;; 29 ;; (green-sun-dma (_type_ dma-buffer) none)
    (sky-work-method-30 () none) ;; 30 ;; (moon-dma (_type_ dma-buffer) none)
    (sky-work-method-31 () none) ;; 31 ;; (setup-stars (_type_ matrix sky-upload-data) none)
    (sky-work-method-32 () none) ;; 32 ;; (stars-transform-asm (_type_) none)
    (sky-work-method-33 () none) ;; 33 ;; (stars-dma (_type_ dma-buffer) none)
    (sky-work-method-34 () none) ;; 34 ;; (draw-roof (_type_ dma-buffer) none)
    (sky-work-method-35 () none) ;; 35 ;; (draw-base (_type_ dma-buffer) none)
    (sky-work-method-36 () none) ;; 36 ;; (draw-fog (_type_ dma-buffer) none)
    (sky-work-method-37 () none) ;; 37
    (sky-work-method-38 () none) ;; 38
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ocean-corner (structure)
  ((bsphere      sphere :inline :offset-assert 0)
   (start-corner vector :inline :offset-assert 16)
   (y-scales     vector :inline :offset-assert 32)
   (alphas       vector :inline :offset-assert 48)
   (colors       uint32 4       :offset-assert 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype ocean-wave-info (structure)
  ((frequency  float  :offset-assert 0)
   (amplitude  float  :offset-assert 4)
   (wave-speed float  :offset-assert 8)
   (angle      float  :offset-assert 12)
   (kx         float  :offset-assert 16)
   (ky         float  :offset-assert 20)
   (w          float  :offset-assert 24)
   (flags      int32  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-spheres (structure)
  ((spheres sphere 36 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-colors (structure)
  ((colors rgba 2548 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x27d0
  :flag-assert         #x9000027d0
  )

(deftype ocean-colors-float (structure)
  ((colors vector 2548 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x9f40
  :flag-assert         #x900009f40
  )

(deftype ocean-mid-mask (structure)
  ((mask  uint8  8 :offset-assert 0) ;; guessed by decompiler
   (dword uint64   :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-mid-indices (basic)
  ((data uint16 36 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ocean-mid-masks (basic)
  ((data (inline-array ocean-mid-mask)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-trans-mask (structure)
  ((mask uint8 4 :offset-assert 0) ;; guessed by decompiler
   (word int32   :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype ocean-trans-index (structure)
  ((parent int16  :offset-assert 0)
   (child  int16  :offset-assert 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype ocean-trans-indices (basic)
  ((data ocean-trans-index 2304 :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2404
  :flag-assert         #x900002404
  )

(deftype ocean-near-index (structure)
  ((data uint16 16 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ocean-near-indices (basic)
  ((data (inline-array ocean-near-index)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype ocean-near-colors (structure)
  ((color0 vector :inline :offset-assert 0)
   (color1 vector :inline :offset-assert 16)
   (color2 vector :inline :offset-assert 32)
   (color3 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype ocean-trans-strip (structure)
  ((verts uint128 10 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype ocean-trans-strip-array (structure)
  ((data ocean-trans-strip 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

(deftype ocean-wave-data (structure)
  ((data uint8 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

(deftype ocean-wave-frames (structure)
  ((frame ocean-wave-data 64 :inline :offset-assert 0) ;; guessed by decompiler
   )
  ;; overflow 16-bit int size bug
  :method-count-assert 9
  :size-assert         #x10000
  ;:flag-assert         #x900010000
  )

(deftype ocean-texture-constants (structure)
  ((giftag    gs-gif-tag    :inline :offset-assert 0) ;;  :inline
   (buffers   vector4w :inline :offset-assert 16)
   (dests     vector4w :inline :offset-assert 32)
   (start     vector   :inline :offset-assert 48)
   (offsets   vector   :inline :offset-assert 64)
   (constants vector   :inline :offset-assert 80)
   (cam-nrm   vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype ocean-mid-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (col vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-mid-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (drw-fan        gs-gif-tag        :inline :offset-assert 96) ;; gs-gif-tag :inline
   (env-fan        gs-gif-tag        :inline :offset-assert 112) ;; gs-gif-tag :inline
   (drw-adgif      gs-gif-tag        :inline :offset-assert 128) ;; gs-gif-tag :inline
   (drw-texture    adgif-shader :inline :offset-assert 144)
   (drw-strip-0    gs-gif-tag        :inline :offset-assert 224) ;; gs-gif-tag :inline
   (drw-strip-1    gs-gif-tag        :inline :offset-assert 240) ;; gs-gif-tag :inline
   (env-adgif      gs-gif-tag        :inline :offset-assert 256) ;; gs-gif-tag :inline
   (env-texture    adgif-shader :inline :offset-assert 272)
   (env-strip      gs-gif-tag        :inline :offset-assert 352) ;; gs-gif-tag :inline
   (env-color      vector       :inline :offset-assert 368)
   (index-table    vector4w     8 :inline       :offset-assert 384) ;; guessed by decompiler
   (pos0           vector       :inline :offset-assert 512)
   (pos1           vector       :inline :offset-assert 528)
   (pos2           vector       :inline :offset-assert 544)
   (pos3           vector       :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype ocean-mid-upload (structure)
  ((rot    matrix  :inline :offset-assert 0)
   (matrix matrix  :inline :offset-assert 64)
   (colors uint128 108     :offset-assert 128) ;; guessed by decompiler
   (masks  uint128 2       :offset-assert 1856) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x760
  :flag-assert         #x900000760
  )

(deftype ocean-mid-upload2 (structure)
  ((rot    matrix   :inline :offset-assert 0)
   (matrix matrix   :inline :offset-assert 64)
   (count  vector4w :inline :offset-assert 128)
   (tex0   vector   :inline :offset-assert 144)
   (tex1   vector   :inline :offset-assert 160)
   (tex2   vector   :inline :offset-assert 176)
   (tex3   vector   :inline :offset-assert 192)
   (clr0   vector   :inline :offset-assert 208)
   (clr1   vector   :inline :offset-assert 224)
   (clr2   vector   :inline :offset-assert 240)
   (clr3   vector   :inline :offset-assert 256)
   (verts  uint128  18      :offset-assert 272) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )

(deftype ocean-mid-work (structure)
  ((env0    vector  :inline :offset-assert 0)
   (env1    vector  :inline :offset-assert 16)
   (env2    vector  :inline :offset-assert 32)
   (hmg0    vector  :inline :offset-assert 48)
   (hmg1    vector  :inline :offset-assert 64)
   (hmg2    vector  :inline :offset-assert 80)
   (indices uint128 16      :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

(deftype ocean-near-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (constants3     vector       :inline :offset-assert 96)
   (constants4     vector       :inline :offset-assert 112)
   (constants5     vector       :inline :offset-assert 128)
   (drw-fan        gs-gif-tag        :inline :offset-assert 144) ;; gs-gif-tag :inline
   (drw2-fan       gs-gif-tag        :inline :offset-assert 160) ;; gs-gif-tag :inline
   (env-fan        gs-gif-tag        :inline :offset-assert 176) ;; gs-gif-tag :inline
   (drw-adgif      gs-gif-tag        :inline :offset-assert 192) ;; gs-gif-tag :inline
   (drw-texture    adgif-shader :inline :offset-assert 208)
   (drw-strip      gs-gif-tag        :inline :offset-assert 288) ;; gs-gif-tag :inline
   (env-adgif      gs-gif-tag        :inline :offset-assert 304) ;; gs-gif-tag :inline
   (env-texture    adgif-shader :inline :offset-assert 320)
   (env-strip      gs-gif-tag        :inline :offset-assert 400) ;; gs-gif-tag :inline
   (env-color      vector       :inline :offset-assert 416)
   (drw2-adgif     gs-gif-tag        :inline :offset-assert 432) ;; gs-gif-tag :inline
   (drw2-tex0      qword        :inline :offset-assert 448)
   (drw2-frame     qword        :inline :offset-assert 464)
   (drw2-strip     gs-gif-tag        :inline :offset-assert 480) ;; gs-gif-tag :inline
   (drw3-adgif     gs-gif-tag        :inline :offset-assert 496) ;; gs-gif-tag :inline
   (drw3-frame     gs-adcmd        :inline :offset-assert 512) ;; gs-adcmd :inline
   (index-table    vector4w     4 :inline      :offset-assert 528) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x250
  :flag-assert         #x900000250
  )

(deftype ocean-near-upload (structure)
  ((rot          matrix            :inline :offset-assert 0)
   (matrix       matrix            :inline :offset-assert 64)
   (masks        uint128           2       :offset-assert 128) ;; guessed by decompiler
   (start-height vector4w          :inline :offset-assert 160)
   (start-st     vector            :inline :offset-assert 176)
   (near-colors  ocean-near-colors :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

(deftype ocean-near-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype ocean-near-work (structure)
  ((verts-ptr vector  :inline :offset-assert 0)
   (indices   uint128 16      :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype ocean-height-array (structure)
  ((data float 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

(deftype ocean-vert-array (structure)
  ((data vector 2048 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8000
  :flag-assert         #x900008000
  )

(deftype ocean-map (structure)
  ((start-corner        vector              :inline :offset-assert 0)
   (far-color           vector              :inline :offset-assert 16)
   (ocean-colors        ocean-colors                :offset-assert 32)
   (ocean-mid-indices   ocean-mid-indices           :offset-assert 36) ;; guessed by decompiler
   (ocean-trans-indices ocean-trans-indices         :offset-assert 40) ;; guessed by decompiler
   (ocean-near-indices  ocean-near-indices          :offset-assert 44) ;; guessed by decompiler
   (ocean-mid-masks     ocean-mid-masks             :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x34
  :flag-assert         #xb00000034
  (:methods
    (set-height! (_type_ float) none) ;; 9
    (get-base-height (_type_) float) ;; 10
    )
  )

(deftype ocean (ocean-map)
  ((off                     symbol                     :offset-assert 52) ;; guessed by decompiler
   (near-off                symbol                     :offset-assert 56) ;; guessed by decompiler
   (mid-off                 symbol                     :offset-assert 60) ;; guessed by decompiler
   (far-on                  symbol                     :offset-assert 64) ;; guessed by decompiler
   (all-on                  basic                      :offset-assert 68)
   (ocean-facing            uint32                     :offset-assert 72)
   (heights                 ocean-height-array         :offset-assert 76)
   (heights2                ocean-height-array         :offset-assert 80)
   (verts                   ocean-vert-array           :offset-assert 84)
   (ocean-near-translucent? symbol                     :offset-assert 88) ;; guessed by decompiler
   (deltas                  vector             :inline :offset-assert 96)
   (map-min                 vector             :inline :offset-assert 112)
   (map-max                 vector             :inline :offset-assert 128)
   (interp                  vector             :inline :offset-assert 144)
   (corner-array            ocean-corner       25 :inline      :offset-assert 160) ;; guessed by decompiler
   (corner-count            int32                      :offset-assert 2160)
   (temp-vecs               vector             4  :inline     :offset-assert 2176) ;; guessed by decompiler
   (mid-mask-ptrs           pointer            36      :offset-assert 2240) ;; guessed by decompiler
   (mid-camera-masks        uint64             36      :offset-assert 2384) ;; guessed by decompiler
   (trans-mask-ptrs         pointer            64      :offset-assert 2672) ;; guessed by decompiler
   (trans-camera-masks      ocean-trans-mask   16      :offset-assert 2928) ;; guessed by decompiler
   (trans-temp-masks        uint32             16      :offset-assert 2992) ;; guessed by decompiler
   (sprite-tmpl             dma-gif-packet     :inline :offset-assert 3056)
   (sprite-tmpl2            dma-gif-packet     :inline :offset-assert 3088)
   (sprite-tmpl3            dma-gif-packet     :inline :offset-assert 3120)
   (adgif-tmpl              dma-gif-packet     :inline :offset-assert 3152)
   (line-tmpl               dma-gif-packet     :inline :offset-assert 3184)
   (sun-tmpl                dma-gif-packet     :inline :offset-assert 3216)
   (erase-tmpl              dma-gif-packet     :inline :offset-assert 3248)
   (haze-tmpl               dma-gif-packet     :inline :offset-assert 3280)
   (cloud-tmpl              dma-gif-packet     :inline :offset-assert 3312)
   (clut-tmpl               dma-gif-packet     :inline :offset-assert 3344)
   (cloud-lights            cloud-lights       :inline :offset-assert 3376)
   (haze-lights             haze-lights        :inline :offset-assert 3536)
   (constant                vector             :inline :offset-assert 3664)
   (sky-color               vector             :inline :offset-assert 3680)
   (haze-verts              vector4w           32 :inline     :offset-assert 3696) ;; guessed by decompiler
   (cloud-verts             vector4w           36 :inline     :offset-assert 4208) ;; guessed by decompiler
   (cloud-nrms              vector             36 :inline     :offset-assert 4784) ;; guessed by decompiler
   (cloud-col0              vector             36 :inline     :offset-assert 5360) ;; guessed by decompiler
   (cloud-col1              vector             36 :inline     :offset-assert 5936) ;; guessed by decompiler
   (cloud-st0               vector             36 :inline     :offset-assert 6512) ;; guessed by decompiler
   (cloud-st1               vector             36 :inline     :offset-assert 7088) ;; guessed by decompiler
   (color80808080           vector4w           :inline :offset-assert 7664)
   (color80808040           vector4w           :inline :offset-assert 7680)
   (color80808000           vector4w           :inline :offset-assert 7696)
   (st0000                  vector             :inline :offset-assert 7712)
   (st0505                  vector             :inline :offset-assert 7728)
   (st1010                  vector             :inline :offset-assert 7744)
   (uv00                    vector4w           :inline :offset-assert 7760)
   (uv44                    vector4w           :inline :offset-assert 7776)
   (uv88                    vector4w           :inline :offset-assert 7792)
   (uv1010                  vector4w           :inline :offset-assert 7808)
   (uv2020                  vector4w           :inline :offset-assert 7824)
   (uv4040                  vector4w           :inline :offset-assert 7840)
   (uv8080                  vector4w           :inline :offset-assert 7856)
   (xy00                    vector4w           :inline :offset-assert 7872)
   (xy88                    vector4w           :inline :offset-assert 7888)
   (xy1010                  vector4w           :inline :offset-assert 7904)
   (xy2020                  vector4w           :inline :offset-assert 7920)
   (xy4040                  vector4w           :inline :offset-assert 7936)
   (xy8080                  vector4w           :inline :offset-assert 7952)
   (cloud-alpha             uint8              36      :offset-assert 7968) ;; guessed by decompiler
   (near-mask-indices       uint16             16      :offset-assert 8004) ;; guessed by decompiler
   (mid-minx                uint8                      :offset-assert 8036)
   (mid-maxx                uint8                      :offset-assert 8037)
   (mid-minz                uint8                      :offset-assert 8038)
   (mid-maxz                uint8                      :offset-assert 8039)
   (near-minx               uint8                      :offset-assert 8040)
   (near-maxx               uint8                      :offset-assert 8041)
   (near-minz               uint8                      :offset-assert 8042)
   (near-maxz               uint8                      :offset-assert 8043)
   (temp-minx               uint8                      :offset-assert 8044)
   (temp-maxx               uint8                      :offset-assert 8045)
   (temp-minz               uint8                      :offset-assert 8046)
   (temp-maxz               uint8                      :offset-assert 8047)
   (tex1                    gs-tex1                     :offset-assert 8048) ;; gs-tex1
   (tex1-near               gs-tex1                     :offset-assert 8056) ;; gs-tex1
   (corner00                float                      :offset-assert 8064)
   (corner01                float                      :offset-assert 8068)
   (corner10                float                      :offset-assert 8072)
   (corner11                float                      :offset-assert 8076)
   (frame-num               float                      :offset-assert 8080)
   (frame-speed             float                      :offset-assert 8084)
   (frame-num2              float                      :offset-assert 8088)
   (frame-speed2            float                      :offset-assert 8092)
   (cloud-interp            float                      :offset 3676)
   (scales                  vector             :inline :offset-assert 8096)
   (mask-hi                 vector4w           :inline :offset-assert 8112)
   (mask-lo                 vector4w           :inline :offset-assert 8128)
   (lights                  vu-lights          :inline :offset-assert 8144)
   (uv-scroll-0             vector4w           :inline :offset-assert 8256)
   (uv-scroll-1             vector4w           :inline :offset-assert 8272)
   (st-scroll               vector2            :inline :offset-assert 8288)
   (wait-to-vu0             uint32                     :offset-assert 8296)
   )
  :method-count-assert 92
  :size-assert         #x206c
  :flag-assert         #x5c0000206c
  (:methods
    (ocean-method-11 () none) ;; 11 ;; (get-height (_type_ vector symbol) float)
    (ocean-method-12 () none) ;; 12 ;; (draw! (_type_) none)
    (ocean-method-13 () none) ;; 13 ;; (update-map (_type_) none)
    (ocean-method-14 () none) ;; 14 ;; (interp-wave (_type_ ocean-wave-info uint float) none)
    (ocean-method-15 () none) ;; 15 ;; (ocean-method-15 (_type_ matrix matrix) none)
    (ocean-method-16 () none) ;; 16 ;; (generate-verts (_type_ ocean-vert-array ocean-height-array) none)
    (ocean-method-17 () none) ;; 17 ;; (add-colors! (_type_ vector ocean-vertex) none)
    (ocean-method-18 () none) ;; 18 ;; (ocean-method-18 (_type_ (pointer ocean-colors) (pointer ocean-colors)) none)
    (ocean-method-19 () none) ;; 19 ;; (init-buffer! (_type_ dma-buffer) none)
    (ocean-method-20 () none) ;; 20 ;; (end-buffer! (_type_ dma-buffer) none)
    (ocean-method-21 () none) ;; 21 ;; (set-corners! (_type_ float float) float)
    (ocean-method-22 () none) ;; 22 ;; (ocean-near-add-call (_type_ dma-buffer int) none)
    (ocean-method-23 () none) ;; 23 ;; (ocean-near-add-call-flush (_type_ dma-buffer int) none)
    (ocean-method-24 () none) ;; 24 ;; (ocean-near-setup-constants (_type_ ocean-near-constants) none)
    (ocean-method-25 () none) ;; 25 ;; (ocean-near-add-constants (_type_ dma-buffer) none)
    (ocean-method-26 () none) ;; 26 ;; (ocean-near-add-heights (_type_ dma-buffer) none)
    (ocean-method-27 () none) ;; 27 ;; (ocean-near-add-matrices (_type_ dma-buffer vector) none)
    (ocean-method-28 () none) ;; 28 ;; (ocean-near-add-upload (_type_ dma-buffer uint uint) none)
    (ocean-method-29 () none) ;; 29 ;; (draw-ocean-near (_type_ dma-buffer) none)
    (ocean-method-30 () none) ;; 30 ;; (ocean-trans-camera-masks-bit? (_type_ uint uint) symbol)
    (ocean-method-31 () none) ;; 31 ;; (ocean-trans-mask-ptrs-bit? (_type_ int int) symbol)
    (ocean-method-32 () none) ;; 32 ;; (ocean-trans-mask-ptrs-set! (_type_ uint uint) symbol)
    (ocean-method-33 () none) ;; 33 ;; (ocean-trans-add-upload-table (_type_ dma-buffer uint uint int int symbol) none)
    (ocean-method-34 () none) ;; 34 ;; (ocean-trans-add-upload-strip (_type_ dma-buffer uint uint int int int) none)
    (ocean-method-35 () none) ;; 35 ;; (ocean-transition-check (_type_ ocean-trans-mask int int vector) none)
    (ocean-method-36 () none) ;; 36 ;; (ocean-make-trans-camera-masks (_type_ uint uint uint uint) none)
    (ocean-method-37 () none) ;; 37 ;; (ocean-trans-add-upload (_type_ dma-buffer uint uint) none)
    (ocean-method-38 () none) ;; 38 ;; (draw-ocean-transition-seams (_type_ dma-buffer) none)
    (ocean-method-39 () none) ;; 39 ;; (ocean-trans-add-constants (_type_ dma-buffer) none)
    (ocean-method-40 () none) ;; 40 ;; (draw-ocean-transition (_type_ dma-buffer) none)
    (ocean-method-41 () none) ;; 41 ;; (ocean-mid-add-call (_type_ dma-buffer int) none)
    (ocean-method-42 () none) ;; 42 ;; (ocean-mid-add-call-flush (_type_ dma-buffer uint) none)
    (ocean-method-43 () none) ;; 43 ;; (ocean-matrix*! (_type_ matrix matrix matrix) matrix)
    (ocean-method-44 () none) ;; 44 ;; (ocean-vector-matrix*! (_type_ vector vector matrix) vector)
    (ocean-method-45 () none) ;; 45 ;; (ocean-mid-add-matrices (_type_ dma-buffer vector) none)
    (ocean-method-46 () none) ;; 46 ;; (ocean-mid-check (_type_ pointer int int vector) symbol)
    (ocean-method-47 () none) ;; 47 ;; (ocean-mid-setup-constants (_type_ ocean-mid-constants) none)
    (ocean-method-48 () none) ;; 48 ;; (ocean-mid-add-constants (_type_ dma-buffer) none)
    (ocean-method-49 () none) ;; 49 ;; (ocean-mid-camera-masks-bit? (_type_ uint uint) symbol)
    (ocean-method-50 () none) ;; 50 ;; (ocean-mid-mask-ptrs-bit? (_type_ uint uint) symbol)
    (ocean-method-51 () none) ;; 51 ;; (ocean-mid-camera-masks-set! (_type_ uint uint) symbol)
    (ocean-method-52 () none) ;; 52 ;; (ocean-mid-add-upload (_type_ dma-buffer int int int int float) none)
    (ocean-method-53 () none) ;; 53 ;; (ocean-mid-add-upload-table (_type_ dma-buffer uint uint (pointer float) int symbol) none)
    (ocean-method-54 () none) ;; 54 ;; (ocean-mid-add-upload-top (_type_ dma-buffer uint uint) none)
    (ocean-method-55 () none) ;; 55 ;; (ocean-mid-add-upload-middle (_type_ dma-buffer uint uint) none)
    (ocean-method-56 () none) ;; 56 ;; (ocean-mid-add-upload-bottom (_type_ dma-buffer uint uint) none)
    (ocean-method-57 () none) ;; 57 ;; (ocean-seams-add-constants (_type_ dma-buffer) none)
    (ocean-method-58 () none) ;; 58 ;; (draw-ocean-mid-seams (_type_ dma-buffer) none)
    (ocean-method-59 () none) ;; 59 ;; (draw-ocean-mid (_type_ dma-buffer) none)
    (ocean-method-60 () none) ;; 60 ;; (ocean-method-60 (_type_ dma-buffer) none)
    (ocean-method-61 () none) ;; 61 ;; (ocean-method-61 (_type_ dma-buffer) none)
    (ocean-method-62 () none) ;; 62 ;; (ocean-method-62 (_type_ dma-buffer) none)
    (ocean-method-63 () none) ;; 63 ;; (ocean-method-63 (_type_ dma-buffer) none)
    (ocean-method-64 () none) ;; 64 ;; (ocean-method-64 (_type_ dma-buffer) none)
    (ocean-method-65 () none) ;; 65 ;; (ocean-method-65 (_type_ dma-buffer) none)
    (ocean-method-66 () none) ;; 66 ;; (ocean-method-66 (_type_ dma-buffer) none)
    (ocean-method-67 () none) ;; 67 ;; (ocean-method-67 (_type_ dma-buffer) none)
    (ocean-method-68 () none) ;; 68 ;; (render-ocean-far (_type_ dma-buffer int) none)
    (ocean-method-69 () none) ;; 69 ;; (draw-ocean-far (_type_ dma-buffer) none)
    (ocean-method-70 () none) ;; 70 ;; (ocean-texture-setup-constants (_type_ ocean-texture-constants) none)
    (ocean-method-71 () none) ;; 71 ;; (ocean-texture-add-constants (_type_ dma-buffer) none)
    (ocean-method-72 () none) ;; 72 ;; (ocean-texture-add-envmap (_type_ dma-buffer) none)
    (ocean-method-73 () none) ;; 73 ;; (ocean-texture-add-verts (_type_ dma-buffer int) none)
    (ocean-method-74 () none) ;; 74 ;; (ocean-texture-add-verts-last (_type_ dma-buffer int int) none)
    (ocean-method-75 () none) ;; 75 ;; (ocean-texture-add-call-start (_type_ dma-buffer) none)
    (ocean-method-76 () none) ;; 76 ;; (ocean-texture-add-call-rest (_type_ dma-buffer) none)
    (ocean-method-77 () none) ;; 77 ;; (ocean-texture-add-call-done (_type_ dma-buffer) none)
    (ocean-method-78 () none) ;; 78 ;; (draw-ocean-texture (_type_ dma-buffer int) none)
    (ocean-method-79 () none) ;; 79 ;; (ocean-method-79 (_type_ dma-buffer) none)
    (ocean-method-80 () none) ;; 80 ;; (ocean-method-80 (_type_ (pointer rgba)) none)
    (ocean-method-81 () none) ;; 81 ;; (ocean-method-81 (_type_ dma-buffer) int)
    (ocean-method-82 () none) ;; 82 ;; (draw-envmap-debug (_type_ dma-buffer) none)
    (ocean-method-83 () none) ;; 83 ;; (ocean-method-83 (_type_ dma-buffer float) none)
    (ocean-method-84 () none) ;; 84 ;; (ocean-method-84 (_type_ dma-buffer sky-upload-data vector4w float) none)
    (ocean-method-85 () none) ;; 85 ;; (ocean-method-85 (_type_ dma-buffer) none)
    (ocean-method-86 () none) ;; 86 ;; (ocean-method-86 (_type_ vector vector vector vector) none)
    (ocean-method-87 () none) ;; 87 ;; (ocean-method-87 (_type_ vector vector vector) none)
    (ocean-method-88 () none) ;; 88 ;; (ocean-method-88 (_type_ dma-buffer) none)
    (ocean-method-89 () none) ;; 89 ;; (ocean-method-89 (_type_ dma-buffer) none)
    (ocean-method-90 () none) ;; 90 ;; (rgba-to-vector! (_type_ vector (pointer rgba)) none)
    (ocean-method-91 () none) ;; 91 ;; (do-tex-scroll! (_type_) none)
    )
  )

(define-extern *ocean-map* ocean-map)
(define-extern *ocean* ocean)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern texture-bpp "Get the bits-per-pixel in the given texture format" (function gs-psm int))
(define-extern texture-qwc "Get the number of quadwords needed for a given texture size and format.
                           Does not consider weird PS2 memory layout stuff."
               (function int int gs-psm int))
(define-extern physical-address "Strip off high 8-bits of a pointer, to bypass the uncached memory mappings.
                                 This gives an address suitable for DMAing from main memory."
               (function pointer pointer))
(define-extern dma-buffer-add-ref-texture "Upload a texture, by reference. Doesn't copy the texture into the DMA buffer - just a reference,
                                           so it is up to the user to make sure the texture is valid during DMA time.
                                           Doesn't set up GIF for receiving textures."
                                           (function dma-buffer pointer int int gs-psm none))

(define-extern gs-find-block "Lookup offset of block in PS2's swizzled VRAM, as a block index."
              (function int int gs-psm int))
(define-extern gs-page-width "Get the width of a page, in pixels, for the given texture format."
               (function gs-psm int))
(define-extern gs-page-height "Get the height of a page, in pixels, for the given texture format."
               (function gs-psm int))
(define-extern gs-block-width "Get the width of a block, in pixels, for the texture format."
               (function gs-psm int))
(define-extern gs-block-height "Get the height of a block, in pixels, for the texture format." (function gs-psm int))
(define-extern gs-largest-block "Get the highest block index used by a texture." (function int int gs-psm int))
(define-extern gs-blocks-used "Get the number of blocks used by a texture.
                              If the texture isn't an even number of pages, the partially completed
                              page will be counted as the largest used block.
                              (gaps in this page are counted as used)"
               (function int int gs-psm int))
(define-extern texture-page-default-allocate
               "Texture allocation function for textures that permanently live in VRAM.
                The texture data is immediately uploaded, then discarded from the heap.
                This should only be called during startup."
               (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-common-allocate
               "Texture allocation function for textures that share the common segment.
                The texture remains in RAM, and is uploaded to VRAM as needed as part
                of the main drawing DMA chain."
               (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-font-allocate
               "Texture allocation function for font. This temporarily stores them in the common segment,
                removes them from RAM. This is a bit of hack. Later font setup code expects the font texture
                to be in common, and they will eventually be moved into the upper 8-bits of the depth buffer."
               (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-common-boot-allocate
               "Allocator function for texture loaded at startup time.
                For jak 3, this seems to always do default-allocate (permanently in vram?)"
                (function texture-pool texture-page kheap int texture-page))
(define-extern upload-vram-data "Add DMA to later upload a texture, by reference. Sets up the GIF for receiving the texture."
                (function dma-buffer int pointer int int none))
(define-extern upload-vram-pages "Add DMA to upload a texture page. Will only upload the portion of data that is not already present in VRAM.
                                  This is the old Jak 1 background texture uploading system, which had this near/far concept
                                  for different mip levels. By jak 2, the background system switched to masks and uses
                                  the -pris variant of this function."
                (function texture-pool texture-pool-segment texture-page tex-upload-mode bucket-id int))
(define-extern update-vram-pages
               "Likely a debug function for checking the logic of upload-vram-pages. Unused"
               (function texture-pool texture-pool-segment texture-page tex-upload-mode int))
(define-extern upload-vram-pages-pris
               "Similar to upload-vram-pages, but skips the near/far mode and instead uses masks.
                The foreground/background renderers will generate masks telling us which textures are used.
                This lets us skip uploading entire textures, or mip levels that won't need.
                (side note: this optimization is what causes many of the texturing issues in pcsx2,
                where the ps2 and pcsx2 disagree on the mip level to use.)"
                (function texture-pool texture-pool-segment texture-page bucket-id (pointer int32) int))
(define-extern texture-page-level-allocate
               "Allocation function for level textures."
               (function texture-pool texture-page kheap int texture-page))
(define-extern texture-page-size-check "Check the size of level textures." (function texture-pool level symbol int))
(define-extern set-skull-gem-masks "Turn on masks for skull gem textures, so they will be uploaded." (function none))
(define-extern upload-textures "Set up DMA for all texture uploads for this frame." (function texture-pool none))
(define-extern *txt-dma-list* dma-buffer)
(define-extern texture-relocate "Move a texture in VRAM." (function dma-buffer texture int gs-psm int dma-buffer))
(define-extern relocate-later
               "Unused in jak 2 and likely unsed in jak 3. Feature to postpone some texture copying until
               a later frame. This is only used in cases when texture data must be memcpy'd in RAM, to patch up a hole left
               by some data that is now permanently in VRAM, and no longer needed.
               Note that Jak2/Jak3 don't have this problem since level textures are now never permanent"
               (function symbol))
(define-extern texture-page-login
               "'Login' (initialize) a texture page with the pool.
                This has a trick - it doesn't actually require you to pass a texture-page object - instead you pass an ID.
                If the texture was loaded at all, it will already be known to the texture pool, and this function will do nothing.
                However, if the texture is not present, it will be loaded through a call to `loado`, for use in development."
                (function texture-id (function texture-pool texture-page kheap int texture-page) kheap texture-page-dir-entry))
(define-extern lookup-texture-by-id "Get a texture by ID, loading it if needed (for debugging only)." (function texture-id texture))
(define-extern lookup-texture-by-id-fast "Get a texture by ID. #f if it does not exist." (function texture-id texture))
(define-extern lookup-texture-by-name "Get a loaded texture by name. Slow." (function string string (pointer texture-page) texture))
(define-extern lookup-texture-id-by-name "Get the ID of a loaded texture by name. Slow." (function string string texture-id))
(define-extern lookup-level-texture-by-name "Get a texture from a given level, by name." (function string level (pointer texture-page) texture))
(define-extern lookup-tex-id-from-texture "Get the texture ID of a given texture. Slow." (function texture texture-id))
(define-extern lookup-level-texture-id-by-name "Get the texture ID of a given texture in a level. Slow." (function string level int texture-id))
(define-extern *shader-list* pair) ;;
(define-extern *edit-shader* texture-id) ;;
(define-extern link-texture-by-id
               "Add this adgif shader to the linked list of shaders associated with the given texture ID.
                Will allocate the link array if it's not already."
               (function texture-id adgif-shader texture-page-dir-entry))
(define-extern adgif-shader<-texture! (function adgif-shader texture adgif-shader))
(define-extern adgif-shader-update! "Update k based on uv-dist" (function adgif-shader texture none))
(define-extern adgif-shader<-texture-with-update! (function adgif-shader texture adgif-shader))
(define-extern hack-texture "adjust some values of a texture, likely for debug." (function texture float))
(define-extern adgif-shader-login "set up an adgif shader with the texture-pool, so it points to the right vram address.
                                   Will remap textures through the level remap table.
                                   If texture is missing, will load it on debug hardware." (function adgif-shader texture))
 (define-extern adgif-shader-login-no-remap
                "Set up an adgif shader with the texture-pool, so it points to the right vram adress.
                 This does not do level tpage remapping, so the texture should be one that's not loaded in a combine level tpage."
                 (function adgif-shader texture))
 (define-extern adgif-shader-login-fast
                "Set up an adgif shader with the texture-pool, so it points to the right vram address.
                 Will remap through the level table, so can be used to refer to textures inside 'squashed'
                 level tpages.
                 Will not load texture if it is missing." (function adgif-shader texture))
(define-extern adgif-shader-login-no-remap-fast
                "Set up an adgif shader with the texture-pool, so it points to the right vram address.
                 Will not remap through the level tpage table.
                 Will not load texture if it is missing." (function adgif-shader texture))
(define-extern adgif-shader<-texture-simple! "Simple adgif-shader to texture, just sets vram address and format stuff.
                                              Intended for use with fancy texture stuff that will later set the other regs."
                                              (function adgif-shader texture adgif-shader))
(define-extern set-dirty-mask! (function level int int int none))
(define-extern texture-page-dir-inspect (function texture-page-dir symbol none))
(define-extern *texture-pool* texture-pool)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type debug-menu-context basic)

;; +++main-h:collide-spec
(defenum collide-spec
  :bitfield #t
  :type uint32
  (backgnd 0)
  (jak 1)
  (bot 2)
  (crate 3)
  (civilian 4)
  (enemy 5)
  (obstacle 6)
  (vehicle-sphere 7)
  (hit-by-player-list 8)
  (hit-by-others-list 9)
  (player-list 10)
  (water 11)
  (collectable 12)
  (blocking-plane 13)
  (projectile 14)
  (jak-vulnerable 15)
  (camera-blocker 16)
  (los-blocker 17)
  (notice-blue-eco-powerup 18)
  (tobot 19)
  (pusher 20)
  (vehicle-mesh 21)
  (bot-targetable 22)
  (jak-vehicle 23)
  (special-obstacle 24)
  (mech-punch 25)
  (obstacle-for-jak 26)
  (vehicle-mesh-probeable 27)
  (impenetrable-obj 28)
  (shield 29)
  (vehicle-mesh-no-block-use 30)
  (vehicle-sphere-no-probe 31)
  )
;; ---main-h:collide-spec

;; +++main-h:strip-lines-controls
(defenum strip-lines-controls
  :type int64
  (none 0)
  ; (strippable 1)
  ; (convertible 2)
  ; (good 3)
  ; (edgeable 4)
  ; (ordinary 8)
  ; (color-mismatch 16)
  ; (shader-mismatch 32)
  ; (uv-mismatch 64)
  ; (too-big 128)
  ; (bad 240)
  ; (all-edges 255)
  ; (strips 256)
  ; (frags 512)
  )
;; ---main-h:strip-lines-controls

;; +++main-h:scene-controls
(defenum scene-controls
  :type int64
  :bitfield #t
  ; (channel)
  ; (anim-name)
  ; (dma-size)
  ; (bounds-spheres)
  ; (actors)
  ; (actor-marks)
  ; (special-fma-spheres)
  ; (scene-controls-7)
  ; (scene-controls-8)
  ; (display-controls)
  )
;; ---main-h:scene-controls

;; +++main-h:bot-marks-controls
(defenum bot-marks-controls
  :type int64
  ; (all-off 0)
  ; (course-spots 1)
  ; (task-spots 2)
  ; (all-on 3)
  ; (bmc04 4)
  ; (bmc05 5)
  ; (bmc06 6)
  ; (bmc07 7)
  ; (bmc08 8)
  ; (bmc09 9)
  ; (bmc10 10)
  ; (bmc11 11)
  ; (bmc12 12)
  ; (bmc13 13)
  ; (bmc14 14)
  ; (bmc15 15)
  ; (bmc16 16)
  )
;; ---main-h:bot-marks-controls

;; +++main-h:race-marks-controls
(defenum race-marks-controls
  :type int64
  ; (all-off 0)
  ; (path0-red 1)
  ; (path1-green 2)
  ; (path2-blue 4)
  ; (path3-yellow 8)
  ; (path4-cyan 16)
  ; (path5-violet 32)
  ; (path6-orange 64)
  ; (path7-black 128)
  ; (all-paths-on 255)
  ; (rmc2040 2040)
  )
;; ---main-h:race-marks-controls

;; +++main-h:race-selection
(defenum race-selection
  :type int64
  ; (kiera-class3 0)
  ; (kiera-class2 1)
  ; (kiera-class1 2)
  ; (errol 3)
  ; (bush-class3 4)
  ; (bush-class2 5)
  ; (bush-class1 6)
  ; (bush-errol 7)
  ; (bush-port 8)
  ; (bush-class3-reverse 9)
  ; (bush-class2-reverse 10)
  ; (bush-class1-reverse 11)
  )
;; ---main-h:race-selection

;; +++main-h:subdivide-setting
(defenum subdivide-setting
  :type int64
  (textured 0)
  (outline 1)
  (gouraud 2)
  (hack 3))
;; ---main-h:subdivide-setting

;; +++main-h:ocean-height-hack
(defenum ocean-height-hack
  :type int64
  ; (zero 1)
  ; (far-below 2)
  ; (sewer-start 3)
  ; (sewer-hi 4)
  ; (sewer-med 5)
  ; (sewer-lo 6)
  )
;; ---main-h:ocean-height-hack

(deftype frame-stats (structure)
  ((field-time time-frame 2 :offset-assert 0) ;; guessed by decompiler
   (field      int32        :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype screen-filter (basic)
  ((draw?          symbol         :offset-assert 4) ;; guessed by decompiler
   (bucket         int32          :offset-assert 8) ;; bucket-id
   (depth          int32          :offset-assert 12)
   (ztest          uint64         :offset-assert 16)
   (color          vector :inline :offset-assert 32)
   (color-src      vector :inline :offset-assert 48)
   (color-dest     vector :inline :offset-assert 64)
   (extra          vector :inline :offset-assert 80)
   (speed          float          :offset-assert 80 :overlay-at (-> extra x))
   (current-interp float          :offset-assert 84 :overlay-at (-> extra y))
   (lock-vsync?    basic          :offset-assert 96)
   )
  :method-count-assert 12
  :size-assert         #x64
  :flag-assert         #xc00000064
  (:methods
    (draw (_type_) none) ;; 9
    (setup (_type_ vector vector float bucket-id) none) ;; 10
    (disable (_type_) none) ;; 11
    )
  )

(deftype col-rend (basic)
  ((draw?               symbol               :offset-assert 4) ;; guessed by decompiler
   (outline?            symbol               :offset-assert 8) ;; guessed by decompiler
   (show-back-faces?    symbol               :offset-assert 12) ;; guessed by decompiler
   (show-normals?       symbol               :offset-assert 16) ;; guessed by decompiler
   (ghost-hidden?       symbol               :offset-assert 20) ;; guessed by decompiler
   (show-only           uint32               :offset-assert 24)
   (cspec               collide-spec         :offset-assert 28) ;; guessed by decompiler
   (track               uint8                :offset-assert 32)
   (bbox-radius         float                :offset-assert 36)
   (bbox-center         vector       :inline :offset-assert 48)
   (camera-to-bbox-dist float                :offset-assert 64)
   )
  :method-count-assert 10
  :size-assert         #x44
  :flag-assert         #xa00000044
  (:methods
    (col-rend-method-9 () none) ;; 9 ;; (col-rend-method-9 (_type_) none)
    )
  )

(define-extern *stats-poly*  symbol)
(define-extern *stats-memory*  symbol)
(define-extern *stats-memory-short*  symbol)
(define-extern *stats-memory-level-index*  int)
(define-extern *stats-collide*  symbol)
(define-extern *stats-bsp*  symbol)
(define-extern *stats-buffer*  symbol)
(define-extern *stats-target*  symbol)
(define-extern *stats-profile-bars* symbol)
(define-extern *stats-perf* symbol)
(define-extern *artist-all-visible* symbol)
(define-extern *artist-flip-visible* symbol)
(define-extern *artist-fix-visible* symbol)
(define-extern *artist-fix-frustum* symbol)
(define-extern *artist-error-spheres* symbol)
(define-extern *artist-use-menu-subdiv* symbol)
(define-extern *display-profile* symbol)
(define-extern *display-sidekick-stats* symbol)
(define-extern *display-quad-stats* symbol)
(define-extern *display-tri-stats* symbol)
(define-extern *display-ground-stats* symbol)
(define-extern *display-collision-marks* symbol)
(define-extern *display-collide-cache* symbol)
(define-extern *display-render-collision* symbol)
(define-extern *display-hipri-collision-marks* symbol)
(define-extern *display-edge-collision-marks* symbol)
(define-extern *display-geo-marks* symbol)
(define-extern *display-target-marks* symbol)
(define-extern *target-rc-board-controls* symbol)
(define-extern *display-collide-history* int)
(define-extern *amy-cam* symbol)
(define-extern *display-xyz-axes* symbol)
(define-extern *display-cam-collide-history* symbol)
(define-extern *record-cam-collide-history* symbol)
(define-extern *display-cam-master-marks* symbol)
(define-extern *display-cam-other* symbol)
(define-extern *display-camera-marks* symbol)
(define-extern *camera-no-mip-correction* symbol)
(define-extern *camera-turbo-free* symbol)
(define-extern *display-cam-los-info* symbol)
(define-extern *display-cam-los-debug* symbol)
(define-extern *display-cam-los-marks* symbol)
(define-extern *display-cam-coll-marks* symbol)
(define-extern *display-camera-info* symbol)
(define-extern *display-camera-old-stats* symbol)
(define-extern *display-camera-last-attacker* symbol)
(define-extern *display-file-info* symbol)
(define-extern *display-actor-marks* symbol)
(define-extern *display-sprite-info* symbol)
(define-extern *display-sprite-marks* symbol)
(define-extern *display-sprite-spheres* symbol)
(define-extern *display-entity-errors* symbol)
(define-extern *display-capture-mode* symbol)
(define-extern *display-instance-info* symbol)
(define-extern *display-deci-count* symbol)
(define-extern *sync-dma* symbol)
(define-extern *display-strip-lines* strip-lines-controls)
(define-extern *display-battle-marks* symbol)
(define-extern *display-joint-axes* symbol)
(define-extern *display-nav-marks* symbol)
(define-extern *display-nav-network* symbol)
(define-extern *display-path-marks* symbol)
(define-extern *display-vol-marks* symbol)
(define-extern *display-water-marks* symbol)
(define-extern *display-nav-mesh* symbol)
(define-extern *display-race-mesh* symbol)
(define-extern *display-actor-pointer* symbol)
(define-extern *display-actor-vis* symbol)
(define-extern *display-actor-graph* symbol)
(define-extern *display-traffic-height-map* symbol)
(define-extern *display-trail-graph* symbol)
(define-extern *display-color-bars* symbol)
(define-extern *display-bug-report* symbol)
(define-extern *display-level-border* symbol)
(define-extern *display-memcard-info* symbol)
(define-extern *display-split-boxes* symbol)
(define-extern *display-split-box-info* symbol)
(define-extern *display-texture-distances* symbol)
(define-extern *display-texture-download* symbol)
(define-extern *display-art-control* symbol)
(define-extern *display-gui-control* symbol)
(define-extern *display-level-spheres* symbol)
(define-extern *time-of-day-fast* symbol)
(define-extern *display-iop-info* symbol)
(define-extern *ambient-sound-class* symbol)
(define-extern *slow-frame-rate* symbol)
(define-extern *display-region-marks* symbol)
(define-extern *execute-regions* symbol)
(define-extern *debug-pause* symbol)
(define-extern *debug-view-anims* symbol)
(define-extern *debug-unkillable* symbol)
(define-extern *debug-player-vehicle-unkillable* symbol)
(define-extern *debug-actor* object)
(define-extern *gun-marks* symbol)
(define-extern *bug-report-output-mode* symbol)
(define-extern *display-scene-control* scene-controls)
(define-extern *display-bot-marks* bot-marks-controls)
(define-extern *display-race-marks* race-marks-controls)
(define-extern *race-record-path* symbol)
(define-extern *select-race* race-selection)
(define-extern *select-race-path* int)
(define-extern *bot-record-path* int)
(define-extern *subdivide-draw-mode* subdivide-setting)
(define-extern *subdivide-scissor-draw-mode* subdivide-setting)
(define-extern *subdivide-foreground-draw-mode* subdivide-setting)
(define-extern *subdivide-ocean-draw-mode* subdivide-setting)
(define-extern *ocean-height-hack* ocean-height-hack)
(define-extern *dproc* process)
(define-extern *run* symbol)
(define-extern *teleport* symbol)
(define-extern *teleport-count* int)
(define-extern *draw-hook* (function none))
(define-extern *debug-hook* pair)
(define-extern *menu-hook* (function debug-menu-context))
(define-extern *progress-hook* (function none))
(define-extern *dma-timeout-hook* (function none))
(define-extern *frame-stats* frame-stats)
(define-extern *col-rend* col-rend)
(define-extern debug-actor? (function object symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mspace-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype joint (basic)
  "A joint from an animated skeleton. This defines the graph of the skeleton, and also the bind pose
   used for the mesh data. The joints are shared between all instances of the same model."
  ((name      basic          :offset-assert 4)
   (number    int32          :offset-assert 8)
   (parent    joint          :offset-assert 12) ;; guessed by decompiler
   (bind-pose matrix :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype bone-cache (structure)
  "Unused type. Existed in Jak 1, but wasn't used there."
  ((bone-matrix   uint32  :offset-assert 0)
   (parent-matrix uint32  :offset-assert 4)
   (dummy         uint32  :offset-assert 8)
   (frame         uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype bone (structure)
  "The location and scale of a bone in an animated skeleton. Each instance of a skeleton
   has its own copy of the bones. This data is used for collision checking or other gameplay math,
   but, despite the name, isn't directly used in rendering."
  ((transform matrix :inline :offset-assert 0)
   (position  vector :inline :offset 48)
   (scale     vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype skeleton (inline-array-class)
  "Skeleton is an array of bones for the entire character. The bones are stored in an inline array so they can be
   easily dma'd to the scratchpad later."
  ((bones bone :inline :dynamic)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype cspace (structure)
  "A cspace describes how to control a bone. It contains a reference to the joint, bone, and a callback function.
   The callback function is used to take the joint transforms out of the joint animation, then update the bone."
  ((parent    cspace                             :offset-assert 0)
   (joint     joint                              :offset-assert 4) ;; guessed by decompiler
   (joint-num int16                              :offset-assert 8)
   (geo       drawable                           :offset-assert 12) ;; guessed by decompiler
   (bone      bone                               :offset-assert 16)
   (param0    (function cspace transformq none)  :offset-assert 20) ;; guessed by decompiler
   (param1    basic                              :offset-assert 24)
   (param2    basic                              :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  ;; field param1 uses ~A with a signed load. field param2 uses ~A with a signed load.
  (:methods
    (new (symbol type drawable) _type_) ;; 0
    (reset-and-assign-geo! (_type_ drawable) _type_) ;; 9
    )
  )

(deftype cspace-array (inline-array-class)
  ((data cspace :dynamic :inline :offset-assert 16 :score 1) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type region-prim-list structure)

(deftype drawable (basic)
  "Base class for `drawable` scene graph system.
   This base class is really abused in many ways, and the meaning of the various methods differ depending
   on the exact type. Not even the ID and bsphere here are always populated.
   This is used for very high level organization of different rendering data types, and also very low-level
   culling/rendering optimizations. It supports both array-of-references and inline-array containers with precise
   control over memory layout for use with DMA."
  ((id      int16          :offset-assert 4)
   (bsphere vector :inline :offset-assert 16)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    (login "Initialize the object after it is loaded." (_type_) _type_);; 9
    (draw "Draw the drawable, and typically its children.
           This usually means adding stuff to a list to be drawn later, rather than expensive drawing here." (_type_) none) ;; 10
    (drawable-method-11 () none) ;; 11 ;; (fill-collide-list-from-box (_type_ int collide-list collide-query) int)
    (drawable-method-12 () none) ;; 12 ;; (fill-collide-list-from-line-sphere (_type_ int collide-list collide-query) int)
    (collect-stats "Collect triangle/perf statistics for rendering.
                    This is only called when viewing stats.
                    The vis-bits and culling registers are loaded during this time." (_type_) none) ;; 13
    (debug-draw "Debug-draw a drawable and its children. Typically uses the debug-draw functions." (_type_) none) ;; 14
    (unpack-vis (_type_ (pointer int8) (pointer int8)) (pointer int8)) ;; 15
    (collect-regions "Fill the region-prim-list with regions that intersect the sphere." (_type_ sphere int region-prim-list) none) ;; 16
    )
  )

(deftype drawable-error (drawable)
  "A drawable which just represents an error. When drawn, it simply displays a sphere with an error message."
  ((name string  :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x24
  :flag-assert         #x1100000024
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-group-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-group (drawable)
  "Base class for an array of references to other drawables.
   These are typically used for very high-level organization of drawable."
  ((length  int16             :offset 6)
   (data    drawable :dynamic :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  (:methods
    (new (symbol type int) _type_) ;; 0
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-inline-array-h        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-inline-array (drawable)
  ((length int16  :offset 6)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; draw-node-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype draw-node (drawable)
  "Node in a bounding volume heirarchy. This is a base class, and there are no children.
   The child is a pointer to the start of inline array of drawables (note: not a drawable-inline-array, literally a bunch of plain drawables)
   The size of this array is child-count. The type is either more draw-nodes, or, some other drawable like tfragment, depending on the flags.
   Different renderers have different restrictions on the tree structure, like max child count, or if all children have the same depth.
   Generally, tfrag/collide use a very rigid equal depth, max 8 children rule, but with shrub, anything goes.
   This is a very awkward data structure to traverse, but it is designed for fast view frustum culling.
   Note that there can be multiple ways to reach drawables in here in some cases - for example you can follow
   this tree, or check one of the depth arrays found in tfrag.
   "
  ((child-count uint8     :offset 6)
   (flags       uint8     :offset 7)
   (child       drawable  :offset 8) ;; guessed by decompiler
   (distance    float     :offset 12)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  ;; field distance is a float printed as hex?
  )

(deftype drawable-inline-array-node (drawable-inline-array)
  "Top level container for a BVH made of draw-nodes."
  ((data draw-node 1 :inline)
   (pad uint32)
   )
  :flag-assert #x1100000044
  )

(deftype draw-node-dma (structure)
  "DMA buffer layout for draw node culling routine, which copies draw-nodes directly to scratchpad in bulk.
   This would not work with the memory layout of shrub."
  ((banka draw-node 32 :inline  :offset-assert 0) ;; guessed by decompiler
   (bankb draw-node 32 :inline  :offset-assert 1024) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x800
  :flag-assert         #x900000800
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-tree-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-tree (drawable-group)
  "A drawable tree is a container of drawables of a specific rendering type.
   Instead of having a single large tree of mixed types, there will be a tree of tfrags, a tree of ties, etc.
   The top-level tfrag tree will have a type that's a child of drawable-tree.
   Generally, the object passed to a large renderer is a drawable-tree."
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-tree-array (drawable-group)
  "Collection of drawable trees. This might have a tfrag tree, tie tree, etc."
  ()
  :flag-assert #x1100000020
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-actor-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-actor (drawable)
  "Wrapper around an entity-actor to put it in the drawable system.
   Note that this is never used to actually draw actors - it is just used as a list of all entity-actors
   for the entity/birth system."
  ((actor entity-actor  :offset 8) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

(deftype drawable-tree-actor (drawable-tree)
  "Adapater for putting the actors in the tree-array."
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-inline-array-actor (drawable-inline-array)
  "Array of drawable-actors."
  ((data drawable-actor 1 :inline)
   (pad uint8 4))
  :flag-assert #x1100000044
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type region-prim-area structure)

(deftype region (structure)
  "A region is a closed volume that you can, enter, exit, and be inside.
   This stores a unique, and script functions for a single region.
   These are stored separately from the actual geometry to allow the geometry to be smaller
   and fit in scratchpad/cache better."
  ((id        uint32  :offset-assert 0)
   (on-enter  pair    :offset-assert 4) ;; guessed by decompiler
   (on-inside pair    :offset-assert 8) ;; guessed by decompiler
   (on-exit   pair    :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  ;; field on-enter uses ~A with a signed load. field on-inside uses ~A with a signed load. field on-exit uses ~A with a signed load.
  (:methods
    (point-in-region-debug! "Debug check to see if point is in region. This is not efficient, since it has to find the parent geometry of this region." (_type_ vector) symbol) ;; 9
    )
  )

(deftype region-array (inline-array-class)
  "Array of region."
  ((data region :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype drawable-region-prim (drawable)
  "Base class for a region + geometry.
   Note that all child classes of this must be 32-bytes."
  ((region region  :offset 8)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    (debug-draw-region (_type_ int) none) ;; 17
    (track-region (_type_ region-prim-area) symbol) ;; 18
    (within-area? "@returns Whether or not the object overlaps with the provided [[region-prim-area]]'s extent" (_type_ region-prim-area) symbol) ;; 19
    )
  )

(deftype drawable-tree-region-prim (drawable-tree)
  "Top-level container for all regions of a level."
  ((name basic :offset 8)
   (data2 drawable-inline-array :dynamic :offset 32 :score 1))
  :method-count-assert 19
  :size-assert         #x20
  :flag-assert         #x1300000020
  (:methods
    (drawable-tree-region-prim-method-17 (_type_ vector) symbol) ;; 17
    (debug-print (_type_ vector object) none) ;; 18
    )
  )

(deftype drawable-inline-array-region-prim (drawable-inline-array)
  "Inline array of drawable-region-prim. This actually stores child classes, but they are
   exactly the same size as the parent, so it's okay."
  ((data drawable-region-prim 1 :inline :offset-assert 32)
   (pad uint8 4))
  :flag-assert #x1100000044
  )

(deftype drawable-region-sphere (drawable-region-prim)
  "Region where the bsphere of the drawable is the volume."
  ()
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-face-data (structure)
  "Data to store a single planar face, as a normal and list of vertices."
  ((normal        vector :inline  :offset-assert 0)
   (normal-offset float           :offset-assert 12 :overlay-at (-> normal w))
   (num-points    uint32          :offset-assert 16)
   (points        vector :dynamic :inline :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype drawable-region-face (drawable-region-prim)
  "A drawable-region which is just a face. Unclear if `on-inside` is used."
  ((data region-face-data  :offset 12)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-face-array (inline-array-class)
  "An array of faces that hopefully make a closed volume."
  ((data drawable-region-face :dynamic :inline :offset 16) ;; guessed by decompiler
   (pad uint32)
   )
  :method-count-assert 14
  :size-assert         #x14
  :flag-assert         #xe00000014
  )

(deftype drawable-region-volume (drawable-region-prim)
  "A drawable-region which is a bunch of faces that represent a closed volume."
  ((faces region-face-array  :offset 12) ;; guessed by decompiler
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-prim-list (structure)
  "A list of drawable-region-prim. This is the return type of queries like `which regions contain this point?`"
  ((num-items int32                    :offset-assert 0)
   (items     drawable-region-prim 320 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x504
  :flag-assert         #x900000504
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type nav-mesh basic)
(declare-type nav-branch structure)

;; +++traffic-h:traffic-spawn-flags
(defenum traffic-spawn-flags
  :type uint32
  :bitfield #t
  (tsf0 0)
  (tsf1 1)
  (tsf2 2)
  (tsf3 3)
  (tsf4 4)
  (tsf5 5)
  (tsf6 6)
  (tsf7 7)
  (tsf8 8)
  (tsf9 9)
  (tsf10 10)
  (tsf11 11)
  (tsf12 12)
  (tsf13 13)
  (tsf14 14)
  (tsf15 15)
  (tsf16 16)
  )
;; ---traffic-h:traffic-spawn-flags

;; +++traffic-h:traffic-type
(defenum traffic-type
  :type uint8
  (tt17 17)
  (tt18 18)
  (tt19 19)
  (tt20 20)
  (tt21 21)
  (tt22 22)
  (tt23 23)
  (tt25 25)
  (tt27 27)
  (tt28 28)
  (invalid #xffffffff)
  )
;; ---traffic-h:traffic-type

(deftype traffic-danger-info (structure)
  ((sphere        sphere :inline :offset-assert 0)
   (velocity      vector :inline :offset-assert 16)
   (handle        handle         :offset-assert 32)
   (notify-radius float          :offset-assert 40)
   (danger-level  float          :offset-assert 44)
   (decay-rate    float          :offset-assert 48)
   (flags         uint8          :offset-assert 52) ;; traffic-danger-flags
   (danger-type   uint8          :offset-assert 53) ;; traffic-danger-type
   )
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )

(deftype traffic-suppression-params (structure)
  ((bbox     bounding-box :inline :offset-assert 0)
   (duration time-frame           :offset-assert 32)
   (id       int8                 :offset-assert 40)
   )
  :method-count-assert 13
  :size-assert         #x29
  :flag-assert         #xd00000029
  (:methods
    (try-creating-new-suppression-box (_type_) symbol) ;; 9
    (create-or-update-suppression-box (_type_) symbol) ;; 10
    (has-valid-id? (_type_) symbol) ;; 11
    (kill-suppression-box (_type_) none) ;; 12
    )
  )

(deftype traffic-object-spawn-params (structure)
  ((object-type   uint8                       :offset-assert 0) ;; traffic-type
   (behavior      uint64                      :offset-assert 8)
   (id            uint32                      :offset-assert 16)
   (nav-mesh      nav-mesh                    :offset-assert 20) ;; guessed by decompiler
   (nav-branch    nav-branch                  :offset-assert 24) ;; guessed by decompiler
   (position      vector              :inline :offset-assert 32)
   (rotation      quaternion          :inline :offset-assert 48)
   (velocity      vector              :inline :offset-assert 64)
   (handle        handle                      :offset-assert 80) ;; handle
   (handle-parent uint64                      :offset-assert 88)
   (guard-type    uint8                       :offset-assert 96)
   (user-data     uint32                      :offset-assert 100)
   (entity        basic                       :offset-assert 104)
   (flags         traffic-spawn-flags         :offset-assert 108) ;; guessed by decompiler
   (proc          process                     :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x74
  :flag-assert         #x900000074
  )

(deftype traffic-info (structure)
  ((ctywide-level                         basic      :offset-assert 0)
   (vehicle-level                         basic      :offset-assert 4)
   (race-vehicle-level                    basic      :offset-assert 8)
   (traffic-object-levels                 level 29 :offset-assert 12)
   (vehicle-levels                        level 44 :offset-assert 128)
   (traffic-object-type-from-vehicle-type traffic-type 44 :offset-assert 304)
   (restore-speech-callback               basic      :offset-assert 348)
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

(declare-type traffic-manager process)
(declare-type vehicle-manager process)
(define-extern *traffic-manager* traffic-manager)
(define-extern *vehicle-manager* vehicle-manager)
(define-extern *traffic-info* traffic-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-task-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++game-task-h:game-task
(defenum game-task
  :type uint8
  :bitfield #f
  (unknown -1)
  (none 0)
  (complete 1)
  (dummy0 2)
  (eco-blue-button 3)
  (eco-yellow-button 4)
  (eco-red-button 5)
  (city-start 6)
  (desert-interceptors 7)
  (desert-vehicle-training-1 8)
  (desert-vehicle-training-2 9)
  (arena-training-1 10)
  (arena-fight-1 11)
  (wascity-chase 12)
  (wascity-pre-game 13)
  (desert-turtle-training 14)
  (desert-course-race 15)
  (desert-artifact-race-1 16)
  (wascity-leaper-race 17)
  (desert-hover 18)
  (arena-fight-2 19)
  (desert-catch-lizards 20)
  (desert-rescue 21)
  (wascity-gungame 22)
  (arena-fight-3 23)
  (nest-eggs 24)
  (temple-climb 25)
  (desert-glide 26)
  (volcano-darkeco 27)
  (temple-oracle 28)
  (desert-oasis-defense 29)
  (temple-tests 30)
  (comb-travel 31)
  (mine-explore 32)
  (mine-blow 33)
  (mine-boss 34)
  (sewer-met-hum 35)
  (city-vehicle-training 36)
  (city-port-fight 37)
  (city-port-attack 38)
  (city-gun-course-1 39)
  (city-sniper-fight 40)
  (sewer-kg-met 41)
  (city-destroy-darkeco 42)
  (forest-kill-plants 43)
  (city-destroy-grid 44)
  (city-hijack-vehicle 45)
  (city-port-assault 46)
  (city-gun-course-2 47)
  (city-blow-barricade 48)
  (city-protect-hq 49)
  (sewer-hum-kg 50)
  (city-power-game 51)
  (desert-artifact-race-2 52)
  (nest-hunt 53)
  (desert-beast-battle 54)
  (desert-jump-mission 55)
  (desert-chase-marauders 56)
  (forest-ring-chase 57)
  (factory-sky-battle 58)
  (factory-assault 59)
  (factory-boss 60)
  (temple-defend 61)
  (wascity-defend 62)
  (forest-turn-on-machine 63)
  (precursor-tour 64)
  (city-blow-tower 65)
  (tower-destroy 66)
  (palace-ruins-patrol 67)
  (palace-ruins-attack 68)
  (comb-wild-ride 69)
  (precursor-destroy-ship 70)
  (desert-final-boss 71)
  (city-win 72)
  (desert-bbush-get-to-1 73)
  (desert-bbush-get-to-2 74)
  (desert-bbush-get-to-3 75)
  (desert-bbush-get-to-4 76)
  (desert-bbush-get-to-5 77)
  (desert-bbush-get-to-6 78)
  (desert-bbush-get-to-7 79)
  (desert-bbush-get-to-8 80)
  (desert-bbush-get-to-9 81)
  (desert-bbush-get-to-11 82)
  (desert-bbush-get-to-12 83)
  (desert-bbush-get-to-14 84)
  (desert-bbush-get-to-16 85)
  (desert-bbush-get-to-17 86)
  (wascity-bbush-get-to-18 87)
  (desert-bbush-get-to-19 88)
  (wascity-bbush-get-to-20 89)
  (wascity-bbush-get-to-21 90)
  (wascity-bbush-get-to-22 91)
  (wascity-bbush-get-to-23 92)
  (wascity-bbush-get-to-24 93)
  (wascity-bbush-get-to-25 94)
  (city-bbush-get-to-26 95)
  (city-bbush-get-to-27 96)
  (city-bbush-get-to-28 97)
  (city-bbush-get-to-29 98)
  (city-bbush-get-to-30 99)
  (city-bbush-get-to-31 100)
  (city-bbush-get-to-32 101)
  (city-bbush-get-to-33 102)
  (city-bbush-get-to-34 103)
  (city-bbush-get-to-35 104)
  (city-bbush-get-to-36 105)
  (city-bbush-get-to-37 106)
  (city-bbush-get-to-38 107)
  (city-bbush-get-to-39 108)
  (city-bbush-get-to-40 109)
  (city-bbush-get-to-41 110)
  (city-bbush-get-to-42 111)
  (city-bbush-get-to-43 112)
  (city-bbush-get-to-44 113)
  (desert-bbush-ring-1 114)
  (desert-bbush-ring-2 115)
  (wascity-bbush-ring-3 116)
  (wascity-bbush-ring-4 117)
  (city-bbush-ring-5 118)
  (city-bbush-ring-6 119)
  (desert-bbush-egg-spider-1 120)
  (desert-bbush-spirit-chase-1 121)
  (wascity-bbush-spirit-chase-2 122)
  (city-bbush-spirit-chase-3 123)
  (desert-bbush-timer-chase-1 124)
  (wascity-bbush-timer-chase-2 125)
  (desert-bbush-air-time 126)
  (desert-bbush-total-air-time 127)
  (desert-bbush-jump-distance 128)
  (desert-bbush-total-jump-distance 129)
  (desert-bbush-roll-count 130)
  (desert-bbush-time-trial-1 131)
  (desert-bbush-rally 132)
  (city-bbush-port-attack 133)
  (desert-rescue-bbush 134)
  (city-gun-course-play-for-fun 135)
  (city-jetboard-bbush 136)
  (desert-bbush-destroy-interceptors 137)
  (max 138)
  )
;; ---game-task-h:game-task

;; +++game-task-h:game-task-node
(defenum game-task-node
  :type uint16
  (none)
  (city-start-start)
  (city-start-introduction)
  (city-start-resolution)
  (desert-interceptors-attack)
  (desert-vehicle-training-1-introduction)
  (desert-vehicle-training-2-introduction)
  (arena-training-1-introduction)
  (arena-training-1-collect)
  (arena-training-1-resolution)
  (arena-fight-1-introduction)
  (arena-fight-1-fight)
  (arena-fight-1-throne)
  (arena-fight-1-resolution)
  (wascity-chase-introduction)
  (wascity-chase-resolution)
  (wascity-pre-game-introduction)
  (wascity-pre-game-wait)
  (wascity-pre-game-resolution)
  (wascity-pre-game-post-game)
  (wascity-pre-game-bronze)
  (wascity-pre-game-silver)
  (wascity-pre-game-gold)
  (desert-turtle-training-introduction)
  (desert-turtle-training-restrict-to-turtle)
  (desert-turtle-training-in-desert)
  (desert-turtle-training-resolution)
  (desert-course-race-introduction)
  (desert-course-race-restrict-to-turtle)
  (desert-course-race-post-intro)
  (desert-course-race-race)
  (desert-course-race-win)
  (desert-course-race-resolution)
  (desert-artifact-race-1-introduction)
  (desert-artifact-race-1-post-intro)
  (desert-artifact-race-1-race)
  (desert-artifact-race-1-resolution)
  (wascity-leaper-race-introduction)
  (wascity-leaper-race-resolution)
  (desert-hover-introduction)
  (desert-hover-resolution)
  (arena-fight-2-introduction)
  (arena-fight-2-gun-training)
  (arena-fight-2-fight)
  (arena-fight-2-resolution)
  (desert-catch-lizards-introduction)
  (desert-catch-lizards-restrict-to-snake)
  (desert-catch-lizards-get-to-corral)
  (desert-catch-lizards-resolution)
  (desert-rescue-introduction)
  (desert-rescue-get-vehicle)
  (desert-rescue-post-intro)
  (desert-rescue-rescue)
  (desert-rescue-dead-wlander-movie)
  (desert-rescue-satellite-fight)
  (desert-rescue-resolution)
  (desert-rescue-hold-doors)
  (wascity-gungame-introduction)
  (wascity-gungame-resolution)
  (wascity-gungame-play-for-fun)
  (wascity-gungame-bronze)
  (wascity-gungame-silver)
  (wascity-gungame-gold)
  (arena-fight-3-introduction)
  (arena-fight-3-training)
  (arena-fight-3-fight)
  (arena-fight-3-resolution)
  (nest-eggs-introduction)
  (nest-eggs-get-to-scorpion)
  (nest-eggs-wall)
  (nest-eggs-tunnel)
  (nest-eggs-resolution)
  (nest-eggs-gas)
  (temple-climb-introduction)
  (temple-climb-resolution)
  (desert-glide-introduction)
  (desert-glide-templetop)
  (desert-glide-resolution)
  (volcano-darkeco-introduction)
  (volcano-darkeco-catch-flut)
  (volcano-darkeco-indax-1-introduction)
  (volcano-darkeco-indax-1)
  (volcano-darkeco-indax-2-introduction)
  (volcano-darkeco-indax-2)
  (volcano-darkeco-resolution)
  (temple-oracle-introduction)
  (temple-oracle-stairs)
  (temple-oracle-watchers-complete)
  (temple-oracle-pre-pole-room)
  (temple-oracle-pole-room)
  (temple-oracle-pole-half)
  (temple-oracle-door-1)
  (temple-oracle-meeting)
  (temple-oracle-powerup)
  (temple-oracle-resolution)
  (desert-oasis-defense-introduction)
  (desert-oasis-defense-meeting)
  (desert-oasis-defense-battle)
  (desert-oasis-defense-resolution)
  (temple-tests-introduction)
  (temple-tests-hover-training)
  (temple-tests-oracle-door-crossed)
  (temple-tests-oracle)
  (temple-tests-training)
  (temple-tests-door-1)
  (temple-tests-door-2)
  (temple-tests-door-3)
  (temple-tests-resolution)
  (comb-travel-introduction)
  (comb-travel-resolution)
  (comb-travel-training)
  (mine-explore-introduction)
  (mine-explore-elevator)
  (mine-explore-armor)
  (mine-explore-resolution)
  (mine-blow-introduction)
  (mine-blow-elevator)
  (mine-blow-resolution)
  (mine-boss-introduction)
  (mine-boss-resolution)
  (sewer-met-hum-introduction)
  (sewer-met-hum-resolution)
  (city-vehicle-training-hover-zone-1)
  (city-vehicle-training-hover-zone-2)
  (city-port-fight-introduction)
  (city-port-fight-resolution)
  (city-port-attack-introduction)
  (city-port-attack-get-on)
  (city-port-attack-mission)
  (city-port-attack-resolution)
  (city-gun-course-1-introduction)
  (city-gun-course-1-post-intro)
  (city-gun-course-1-resolution)
  (city-gun-course-1-tess)
  (city-gun-course-1-bronze)
  (city-gun-course-1-silver)
  (city-gun-course-1-gold)
  (city-sniper-fight-introduction)
  (city-sniper-fight-resolution)
  (sewer-kg-met-introduction)
  (sewer-kg-met-button0-pressed)
  (sewer-kg-met-button1-pressed)
  (sewer-kg-met-resolution)
  (city-destroy-darkeco-introduction)
  (city-destroy-darkeco-orbs)
  (city-destroy-darkeco-dark-punch)
  (city-destroy-darkeco-resolution)
  (forest-kill-plants-introduction)
  (forest-kill-plants-pillars)
  (forest-kill-plants-armor)
  (forest-kill-plants-resolution)
  (city-destroy-grid-introduction)
  (city-destroy-grid-resolution)
  (city-hijack-vehicle-introduction)
  (city-hijack-vehicle-infiltrate)
  (city-hijack-vehicle-escape)
  (city-hijack-vehicle-resolution)
  (city-port-assault-introduction)
  (city-port-assault-force-load-borrows)
  (city-port-assault-resolution)
  (city-gun-course-2-introduction)
  (city-gun-course-2-post-intro)
  (city-gun-course-2-resolution)
  (city-gun-course-2-bronze)
  (city-gun-course-2-silver)
  (city-gun-course-2-gold)
  (city-blow-barricade-introduction)
  (city-blow-barricade-resolution)
  (city-protect-hq-introduction)
  (city-protect-hq-resolution)
  (sewer-hum-kg-introduction)
  (sewer-hum-kg-switch-off)
  (sewer-hum-kg-resolution)
  (city-power-game-introduction)
  (city-power-game-wait)
  (city-power-game-resolution)
  (city-power-game-post-game)
  (city-power-game-bronze)
  (city-power-game-silver)
  (city-power-game-gold)
  (desert-artifact-race-2-introduction)
  (desert-artifact-race-2-post-intro)
  (desert-artifact-race-2-race)
  (desert-artifact-race-2-resolution)
  (nest-hunt-introduction)
  (nest-hunt-sig)
  (nest-hunt-fight)
  (nest-hunt-get-crystal)
  (nest-hunt-resolution)
  (desert-beast-battle-introduction)
  (desert-beast-battle-kill-last-beast)
  (desert-beast-battle-resolution)
  (desert-jump-mission-introduction)
  (desert-jump-mission-post-intro)
  (desert-jump-mission-protect-doors)
  (desert-jump-mission-resolution)
  (desert-chase-marauders-introduction)
  (desert-chase-marauders-get-to-stronghold)
  (desert-chase-marauders-ambush)
  (desert-chase-marauders-chase)
  (desert-chase-marauders-resolution)
  (forest-ring-chase-introduction)
  (forest-ring-chase-statues)
  (forest-ring-chase-statue-1)
  (forest-ring-chase-statue-2)
  (forest-ring-chase-statue-3)
  (forest-ring-chase-statue-4)
  (forest-ring-chase-statue-5)
  (forest-ring-chase-resolution)
  (factory-sky-battle-introduction)
  (factory-sky-battle-hanger)
  (factory-sky-battle-wave1)
  (factory-sky-battle-wave2)
  (factory-sky-battle-tower1)
  (factory-sky-battle-tower2)
  (factory-sky-battle-tower3)
  (factory-sky-battle-tower4)
  (factory-sky-battle-resolution)
  (factory-assault-introduction)
  (factory-assault-indax-1-introduction)
  (factory-assault-indax-1)
  (factory-assault-indax-2-introduction)
  (factory-assault-indax-2)
  (factory-assault-indax-3-introduction)
  (factory-assault-indax-3)
  (factory-assault-indax-4-introduction)
  (factory-assault-indax-4)
  (factory-assault-get-vehicle)
  (factory-assault-broke-ultimate-fence)
  (factory-assault-resolution)
  (factory-boss-introduction)
  (factory-boss-resolution)
  (temple-defend-introduction)
  (temple-defend-talk-box)
  (temple-defend-door-1)
  (temple-defend-door-2)
  (temple-defend-door-3)
  (temple-defend-door-4)
  (temple-defend-oracle)
  (temple-defend-training)
  (temple-defend-resolution)
  (wascity-defend-introduction)
  (wascity-defend-get-to)
  (wascity-defend-resolution)
  (forest-turn-on-machine-introduction)
  (forest-turn-on-machine-spawners)
  (forest-turn-on-machine-resolution)
  (precursor-tour-introduction)
  (precursor-tour-generator-trigger)
  (precursor-tour-resolution)
  (city-blow-tower-introduction)
  (city-blow-tower-phase-1)
  (city-blow-tower-resolution)
  (tower-destroy-introduction)
  (tower-destroy-climb)
  (tower-destroy-resolution)
  (palace-ruins-patrol-introduction)
  (palace-ruins-patrol-stadium)
  (palace-ruins-patrol-resolution)
  (palace-ruins-attack-introduction)
  (palace-ruins-attack-resolution)
  (comb-wild-ride-introduction)
  (comb-wild-ride-resolution)
  (precursor-destroy-ship-introduction)
  (precursor-destroy-ship-escape)
  (precursor-destroy-ship-escape-continue)
  (precursor-destroy-ship-resolution)
  (desert-final-boss-introduction)
  (desert-final-boss-walker)
  (desert-final-boss-climb)
  (desert-final-boss-resolution)
  (city-win-introduction)
  (city-win-resolution)
  (desert-bbush-get-to-1-introduction)
  (desert-bbush-get-to-1-resolution)
  (desert-bbush-get-to-2-introduction)
  (desert-bbush-get-to-2-resolution)
  (desert-bbush-get-to-3-introduction)
  (desert-bbush-get-to-3-resolution)
  (desert-bbush-get-to-4-introduction)
  (desert-bbush-get-to-4-resolution)
  (desert-bbush-get-to-5-introduction)
  (desert-bbush-get-to-5-resolution)
  (desert-bbush-get-to-6-introduction)
  (desert-bbush-get-to-6-resolution)
  (desert-bbush-get-to-7-introduction)
  (desert-bbush-get-to-7-resolution)
  (desert-bbush-get-to-8-introduction)
  (desert-bbush-get-to-8-resolution)
  (desert-bbush-get-to-9-introduction)
  (desert-bbush-get-to-9-resolution)
  (desert-bbush-get-to-11-introduction)
  (desert-bbush-get-to-11-resolution)
  (desert-bbush-get-to-12-introduction)
  (desert-bbush-get-to-12-resolution)
  (desert-bbush-get-to-14-introduction)
  (desert-bbush-get-to-14-resolution)
  (desert-bbush-get-to-16-introduction)
  (desert-bbush-get-to-16-resolution)
  (desert-bbush-get-to-17-introduction)
  (desert-bbush-get-to-17-resolution)
  (wascity-bbush-get-to-18-introduction)
  (wascity-bbush-get-to-18-resolution)
  (wascity-bbush-get-to-19-introduction)
  (wascity-bbush-get-to-19-resolution)
  (wascity-bbush-get-to-20-introduction)
  (wascity-bbush-get-to-20-resolution)
  (wascity-bbush-get-to-21-introduction)
  (wascity-bbush-get-to-21-resolution)
  (wascity-bbush-get-to-22-introduction)
  (wascity-bbush-get-to-22-resolution)
  (wascity-bbush-get-to-23-introduction)
  (wascity-bbush-get-to-23-resolution)
  (wascity-bbush-get-to-24-introduction)
  (wascity-bbush-get-to-24-resolution)
  (wascity-bbush-get-to-25-introduction)
  (wascity-bbush-get-to-25-resolution)
  (city-bbush-get-to-26-introduction)
  (city-bbush-get-to-26-resolution)
  (city-bbush-get-to-27-introduction)
  (city-bbush-get-to-27-resolution)
  (city-bbush-get-to-28-introduction)
  (city-bbush-get-to-28-resolution)
  (city-bbush-get-to-29-introduction)
  (city-bbush-get-to-29-resolution)
  (city-bbush-get-to-30-introduction)
  (city-bbush-get-to-30-resolution)
  (city-bbush-get-to-31-introduction)
  (city-bbush-get-to-31-resolution)
  (city-bbush-get-to-32-introduction)
  (city-bbush-get-to-32-resolution)
  (city-bbush-get-to-33-introduction)
  (city-bbush-get-to-33-resolution)
  (city-bbush-get-to-34-introduction)
  (city-bbush-get-to-34-resolution)
  (city-bbush-get-to-35-introduction)
  (city-bbush-get-to-35-resolution)
  (city-bbush-get-to-36-introduction)
  (city-bbush-get-to-36-resolution)
  (city-bbush-get-to-37-introduction)
  (city-bbush-get-to-37-resolution)
  (city-bbush-get-to-38-introduction)
  (city-bbush-get-to-38-resolution)
  (city-bbush-get-to-39-introduction)
  (city-bbush-get-to-39-resolution)
  (city-bbush-get-to-40-introduction)
  (city-bbush-get-to-40-resolution)
  (city-bbush-get-to-41-introduction)
  (city-bbush-get-to-41-resolution)
  (city-bbush-get-to-42-introduction)
  (city-bbush-get-to-42-resolution)
  (city-bbush-get-to-43-introduction)
  (city-bbush-get-to-43-resolution)
  (city-bbush-get-to-44-introduction)
  (city-bbush-get-to-44-resolution)
  (desert-bbush-ring-1-introduction)
  (desert-bbush-ring-1-resolution)
  (desert-bbush-ring-2-introduction)
  (desert-bbush-ring-2-resolution)
  (wascity-bbush-ring-3-introduction)
  (wascity-bbush-ring-3-resolution)
  (wascity-bbush-ring-4-introduction)
  (wascity-bbush-ring-4-resolution)
  (city-bbush-ring-5-introduction)
  (city-bbush-ring-5-resolution)
  (city-bbush-ring-6-introduction)
  (city-bbush-ring-6-resolution)
  (desert-bbush-egg-spider-1-introduction)
  (desert-bbush-egg-spider-1-resolution)
  (desert-bbush-spirit-chase-1-introduction)
  (desert-bbush-spirit-chase-1-resolution)
  (wascity-bbush-spirit-chase-2-introduction)
  (wascity-bbush-spirit-chase-2-resolution)
  (city-bbush-spirit-chase-3-introduction)
  (city-bbush-spirit-chase-3-resolution)
  (desert-bbush-timer-chase-1-introduction)
  (desert-bbush-timer-chase-1-resolution)
  (wascity-bbush-timer-chase-2-introduction)
  (wascity-bbush-timer-chase-2-resolution)
  (desert-bbush-air-time-introduction)
  (desert-bbush-air-time-resolution)
  (desert-bbush-total-air-time-introduction)
  (desert-bbush-total-air-time-resolution)
  (desert-bbush-jump-distance-introduction)
  (desert-bbush-jump-distance-resolution)
  (desert-bbush-total-jump-distance-introduction)
  (desert-bbush-total-jump-distance-resolution)
  (desert-bbush-roll-count-introduction)
  (desert-bbush-roll-count-resolution)
  (desert-bbush-time-trial-1-introduction)
  (desert-bbush-time-trial-1-resolution)
  (desert-bbush-rally-introduction)
  (desert-bbush-rally-resolution)
  (city-bbush-port-attack-introduction)
  (city-bbush-port-attack-port-attack-load)
  (city-bbush-port-attack-resolution)
  (desert-rescue-bbush-introduction)
  (desert-rescue-bbush-resolution)
  (city-gun-course-play-for-fun-introduction)
  (city-gun-course-play-for-fun-resolution)
  (city-gun-course-play-for-fun-bronze-rnc-1)
  (city-gun-course-play-for-fun-silver-rnc-1)
  (city-gun-course-play-for-fun-gold-rnc-1)
  (city-gun-course-play-for-fun-bronze-rnc-2)
  (city-gun-course-play-for-fun-silver-rnc-2)
  (city-gun-course-play-for-fun-gold-rnc-2)
  (city-jetboard-bbush-introduction)
  (city-jetboard-bbush-resolution)
  (desert-bbush-destroy-interceptors-introduction)
  (desert-bbush-destroy-interceptors-resolution)
  )
;; ---game-task-h:game-task-node

;; +++game-task-h:game-task-action
(defenum game-task-action
  :bitfield #f
  :type uint8
  (hide 0)
  (idle 1)
  (say  2)
  (talk 3)
  (show 4)
  (trade 5)
  (play 6)
  (menu 7)
  )
;; ---game-task-h:game-task-action

;; +++game-task-h:game-task-actor
(defenum game-task-actor
  :type uint8
  (none 0)
  (minimap 1)
  (oracle-oracle 2)
  (daxter 3)
  (damus-arena 4)
  (damus-waspal 5)
  (damus-desert 6)
  (damus-wasdoors 7)
  (damus-wascity 8)
  (damus-ruins 9)
  (kleever-arena 10)
  (kleever-wasdoors 11)
  (kleever-pen 12)
  (seem-wascity 13)
  (seem-temple 14)
  (ashelin-oasis 15)
  (ashelin-talkbox 16)
  (ashelin-freehq 17)
  (veger-cave 18)
  (veger-ruins 19)
  (torn-hiphog 20)
  (torn-hiptable 21)
  (torn-hipbar 22)
  (torn-hipbooth 23)
  (torn-freehq 24)
  (tess-gungame 25)
  (samos-talkbox 26)
  (sig-talkbox 27)
  (sig-wasdoors 28)
  (sig-nest 29)
  (pecker-onintent 30)
  (onin-onintent 31)
  (onin-talkbox 32)
  (keira-garage 33)
  (was-pre-game-wascityb 34)
  (kleever-wascityb 35)
  (seem-wascitya 36)
  (gun-gungame 37)
  (vin-vinroom 38)
  (power-game-vinroom 39)
  (jinx-hiphog 40)
  (samos-genb 41)
  (wascity-turret 42)
  (seem-leaper 44)
  (monk-wascity 43)
  (wascity-leaper 45)
  (was-pre-game-deserte 46)
  (onin-freehq 48)
  (samos-freehq 47)
  (keira-freehq 49)
  (keira-genb 50)
  (monk-mummy 51)
  (pecker 52)
  (samos-onintent 53)
  (unused-slot-8 54)
  (unused-slot-9 55)
  (unused-slot-10 56)
  (unused-slot-11 57)
  (unused-slot-12 58)
  (unused-slot-13 59)
  (unused-slot-14 60)
  (unused-slot-15 61)
  (unused-slot-16 62)
  (unused-slot-17 63)
  (unused-slot-18 64)
  (unused-slot-19 65)
  (unused-slot-20 66)
  (unused-slot-21 67)
  (unused-slot-22 68)
  (unused-slot-23 69)
  (unused-slot-24 70)
  (unused-slot-25 71)
  (unused-slot-26 72)
  (unused-slot-27 73)
  (unused-slot-28 74)
  (unused-slot-29 75)
  (unused-slot-30 76)
  (unused-slot-31 77)
  (burning-bush-slumb 78)
  (burning-bush-gena 79)
  (burning-bush-genc 80)
  (burning-bush-marka 81)
  (burning-bush-sluma 82)
  (burning-bush-slumb-2 83)
  (burning-bush-slumc 84)
  (burning-bush-farma 85)
  (burning-bush-farmb 86)
  (burning-bush-markb 87)
  (burning-bush-markb-2 88)
  (burning-bush-gena-2 89)
  (burning-bush-genb 90)
  (burning-bush-genc-2 91)
  (burning-bush-inda 92)
  (burning-bush-indb 93)
  (burning-bush-port 94)
  (burning-bush-port-2 95)
  (burning-bush-port-3 96)
  (burning-bush-pal 97)
  (burning-bush-stadium 98)
  (burning-bush-pal-2 99)
  (burning-bush-genb-2 100)
  (burning-bush-arena 101)
  (burning-bush-desd 102)
  (burning-bush-desc 103)
  (burning-bush-desa 104)
  (burning-bush-desg 105)
  (burning-bush-desh 106)
  (burning-bush-desc-2 107)
  (burning-bush-dese 108)
  (burning-bush-desb 109)
  (burning-bush-desa-2 110)
  (burning-bush-desc-3 111)
  (burning-bush-desg-2 112)
  (burning-bush-desd-2 113)
  (burning-bush-desg-3 114)
  (burning-bush-dese-2 115)
  (burning-bush-dese-3 116)
  (burning-bush-desd-3 117)
  (burning-bush-desb-2 118)
  (burning-bush-wasa-1 119)
  (burning-bush-wasa-2 120)
  (burning-bush-wasa-3 121)
  (burning-bush-wasa-4 122)
  (burning-bush-wasb-1 123)
  (burning-bush-wasb-2 124)
  (burning-bush-wasb-3 125)
  (burning-bush-wasb-4 126)
  (burning-bush-desg-4 127)
  (burning-bush-wasb-5 128)
  (burning-bush-wasb-6 129)
  (burning-bush-desa-3 130)
  (burning-bush-sluma-1 131)
  (burning-bush-genb-1 132)
  (burning-bush-slumb-1 133)
  (burning-bush-wasa-5 134)
  (burning-bush-desd-4 135)
  (burning-bush-slumb-3 136)
  (burning-bush-desc-4 137)
  (burning-bush-inda-1 138)
  (burning-bush-dese-4 139)
  (burning-bush-desc-5 140)
  (burning-bush-desb-3 141)
  (burning-bush-wasa-6 142)
  (burning-bush-wasb-7 143)
  (burning-bush-indb-1 144)
  (burning-bush-desf 145)
  (burning-bush-port-1 146)
  (burning-bush-genb-3 147)
  (burning-bush-genb-4 148)
  (burning-bush-genb-5 149)
  (burning-bush-slumb-4 150)
  (burning-bush-slumc-1 151)
  (burning-bush-dese-5 152)
  (burning-bush-port-4 153)
  (burning-bush-slumc-2 154)
  (burning-bush-sluma-2 155)
  (burning-bush-sluma-3 156)
  (burning-bush-indb-2 157)
  (burning-bush-indb-3 158)
  (burning-bush-inda-2 159)
  (burning-bush-inda-3 160)
  (burning-bush-inda-4 161)
  (burning-bush-port-5 162)
  (burning-bush-port-6 163)
  (burning-bush-port-7 164)
  (burning-bush-port-8 165)
  (burning-bush-desd-5 166)
  (burning-bush-inda-5 167)
  (burning-bush-desb-4 168)
  )
;; ---game-task-h:game-task-actor

;; +++game-task-h:game-task-node-command
(defenum game-task-node-command
  :type uint8
  (none 0)
  (add-sidekick 1)
  (sub-sidekick 2)
  (add-board 3)
  (sub-board 4)
  (add-gun-red-1 5)
  (add-gun-red-2 6)
  (add-gun-red-3 7)
  (add-gun-red-ammo-1 8)
  (add-gun-red-ammo-2 9)
  (add-gun-yellow-1 10)
  (add-gun-yellow-2 11)
  (add-gun-yellow-3 12)
  (add-gun-yellow-ammo-1 13)
  (add-gun-yellow-ammo-2 14)
  (add-gun-blue-1 15)
  (add-gun-blue-2 16)
  (add-gun-blue-3 17)
  (add-gun-blue-ammo-1 18)
  (add-gun-blue-ammo-2 19)
  (add-gun-dark-1 20)
  (add-gun-dark-2 21)
  (add-gun-dark-3 22)
  (add-gun-dark-ammo-1 23)
  (add-gun-dark-ammo-2 24)
  (add-pass-front-gate 25)
  (add-pass-port-mh 26)
  (add-pass-port-inda 27)
  (add-pass-inda-indb 28)
  (add-pass-indb-sluma 29)
  (add-pass-slumb-genb 30)
  (add-darkeco 31)
  (add-darkjak 32)
  (add-darkjak-smack 33)
  (add-darkjak-bomb0 34)
  (add-darkjak-bomb1 35)
  (add-darkjak-tracking 36)
  (add-darkjak-invinc 37)
  (add-lighteco 38)
  (add-lightjak 39)
  (add-lightjak-regen 40)
  (add-lightjak-freeze 41)
  (add-lightjak-shield 42)
  (add-lightjak-swoop 43)
  (add-board-training 44)
  (add-board-launch 45)
  (add-board-trail 46)
  (add-board-zap 47)
  (sub-board-trail 48)
  (add-artifact-invis 49)
  (add-armor-0 50)
  (add-armor-1 51)
  (add-armor-2 52)
  (add-armor-3 53)
  (add-amulet-1 54)
  (add-amulet-2 55)
  (add-amulet-3 56)
  (add-light-eco-crystal 57)
  (add-dark-eco-crystal 58)
  (add-seal 59)
  (add-cypher-gliph 60)
  (add-star-map 61)
  (add-vehicle-toad 62)
  (add-vehicle-snake 63)
  (add-vehicle-scorpion 64)
  (add-vehicle-turtle 65)
  (add-vehicle-rhino 66)
  (add-av-cube 67)
  (add-av-reflector 68)
  (add-av-prism 69)
  (add-av-generator 70)
  (add-av-map 71)
  (add-jakc 72)
  )
;; ---game-task-h:game-task-node-command

;; +++game-task-h:game-task-node-flag
(defenum game-task-node-flag
  :type uint32 ;; guess
  :bitfield #t
  (closed 0)
  (data 1)
  (auto-close 2)
  (disk-close 3)
  (kiosk-close 4)
  (close-task 5)
  (utility-node 6)
  (abs-task-mask 7)
  (set-task-mask 8)
  (clear-task-mask 9)
  (save-on-life 10)
  (save-on-try 11)
  (reset-on-try 12)
  (no-restart 13)
  (exclusive 14)
  (intro-wait 15)
  (city-wait 16)
  (no-hud-wait 17)
  (no-percent 18)
  (act1 19)
  (act2 20)
  (act3 21)
  (bbush 22)
  )
;; ---game-task-h:game-task-node-flag

;; +++game-task-h:game-task-flags
(defenum game-task-flags
  :bitfield #t
  :type uint8
  (gatflag-00)
  (gatflag-01)
  (gatflag-02)
  )
;; ---game-task-h:game-task-flags

;; +++game-task-h:game-task-icon
(defenum game-task-icon
  :type uint8
  (gaticon-00)
  (gaticon-01)
  (gaticon-02)
  (gaticon-03)
  (gaticon-04)
  (gaticon-05)
  (gaticon-06)
  (gaticon-07)
  (gaticon-08)
  (gaticon-09)
  (gaticon-10)
  (gaticon-11)
  (gaticon-12)
  (gaticon-13)
  (gaticon-14)
  (gaticon-15)
  (gaticon-16)
  (gaticon-17)
  (gaticon-18)
  (gaticon-19)
  (gaticon-20)
  (gaticon-21)
  (gaticon-22)
  (gaticon-23)
  (gaticon-24)
  (gaticon-25)
  (gaticon-26)
  (gaticon-27)
  (gaticon-28)
  (gaticon-29)
  (gaticon-30)
  (gaticon-31)
  (gaticon-32)
  (gaticon-33)
  (gaticon-34)
  (gaticon-35)
  (gaticon-36)
  (gaticon-37)
  (gaticon-38)
  (gaticon-39)
  (gaticon-40)
  (gaticon-41)
  (gaticon-42)
  (gaticon-43)
  (gaticon-44)
  (gaticon-45)
  (gaticon-46)
  (gaticon-47)
  (gaticon-48)
  (gaticon-49)
  (gaticon-50)
  (gaticon-51)
  (gaticon-52)
  (gaticon-53)
  (gaticon-54)
  (gaticon-55)
  (gaticon-56)
  (gaticon-57)
  (gaticon-58)
  (gaticon-59)
  (gaticon-60)
  (gaticon-61)
  (gaticon-62)
  (gaticon-63)
  (gaticon-64)
  (gaticon-65)
  (gaticon-66)
  (gaticon-67)
  (gaticon-68)
  (gaticon-69)
  (gaticon-70)
  (gaticon-71)
  (gaticon-72)
  (gaticon-73)
  (gaticon-74)
  (gaticon-75)
  (gaticon-76)
  (gaticon-77)
  (gaticon-78)
  (gaticon-79)
  (gaticon-80)
  (gaticon-81)
  (gaticon-82)
  (gaticon-83)
  (gaticon-84)
  (gaticon-85)
  (gaticon-86)
  (gaticon-87)
  (gaticon-88)
  (gaticon-89)
  (gaticon-90)
  (gaticon-91)
  (gaticon-92)
  (gaticon-93)
  (gaticon-94)
  (gaticon-95)
  (gaticon-96)
  (gaticon-97)
  (gaticon-98)
  (gaticon-99)
  (gaticon-100)
  (gaticon-101)
  (gaticon-102)
  (gaticon-103)
  (gaticon-104)
  (gaticon-105)
  (gaticon-106)
  (gaticon-107)
  (gaticon-108)
  (gaticon-109)
  (gaticon-110)
  (gaticon-111)
  (gaticon-112)
  (gaticon-113)
  (gaticon-114)
  (gaticon-115)
  (gaticon-116)
  (gaticon-117)
  (gaticon-118)
  (gaticon-119)
  (gaticon-120)
  (gaticon-121)
  (gaticon-122)
  (gaticon-123)
  (gaticon-124)
  (gaticon-125)
  (gaticon-126)
  (gaticon-127)
  (gaticon-128)
  (gaticon-129)
  (gaticon-130)
  (gaticon-131)
  (gaticon-132)
  (gaticon-133)
  (gaticon-134)
  (gaticon-135)
  (gaticon-136)
  (gaticon-137)
  (gaticon-138)
  (gaticon-139)
  (gaticon-140)
  (gaticon-141)
  (gaticon-142)
  (gaticon-143)
  (gaticon-144)
  (gaticon-145)
  (gaticon-146)
  (gaticon-147)
  (gaticon-148)
  (gaticon-149)
  (gaticon-150)
  (gaticon-151)
  (gaticon-152)
  (gaticon-153)
  (gaticon-154)
  (gaticon-155)
  (gaticon-156)
  (gaticon-157)
  (gaticon-158)
  (gaticon-159)
  (gaticon-160)
  (gaticon-161)
  (gaticon-162)
  (gaticon-163)
  (gaticon-164)
  (gaticon-165)
  (gaticon-166)
  (gaticon-167)
  (gaticon-168)
  (gaticon-169)
  (gaticon-170)
  (gaticon-171)
  (gaticon-172)
  (gaticon-173)
  (gaticon-174)
  (gaticon-175)
  (gaticon-176)
  (gaticon-177)
  (gaticon-178)
  (gaticon-179)
  (gaticon-180)
  (gaticon-181)
  (gaticon-182)
  (gaticon-183)
  (gaticon-184)
  (gaticon-185)
  (gaticon-186)
  (gaticon-187)
  (gaticon-188)
  (gaticon-189)
  (gaticon-190)
  (gaticon-191)
  (gaticon-192)
  (gaticon-193)
  (gaticon-194)
  (gaticon-195)
  (gaticon-196)
  (gaticon-197)
  (gaticon-198)
  (gaticon-199)
  )
;; ---game-task-h:game-task-icon

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-control-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype game-task-event (basic)
  ((actor game-task-actor :offset-assert 4)
   (action game-task-action :offset-assert 5)
   (tex game-task-icon :offset-assert 6) ;; added
   (icon uint16 :offset 6 :score -100)
   (flags game-task-flags :offset 7)
   (scene string :offset 8)
   (distance meters :offset-assert 12)
   )
  )

(deftype resetter-spec (structure)
  ((continue   string         :offset-assert 0)
   (node       game-task-node :offset-assert 4)
   (reset-mode symbol         :offset-assert 8)
   (execute    basic          :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  ;; field execute uses ~A with a signed load.
  )

;; +++task-control-h:resetter-message
(defenum resetter-message
  :type uint8
  (mission-fail 0)
  (mission-retry 1)
  (mission-fail-or-retry 2)
  )
;; ---task-control-h:resetter-message

;; +++task-control-h:resetter-flag
(defenum resetter-flag
  :type uint16
  :bitfield #t
  (auto-reset 0)
  (text-message 1)
  (no-audio 2)
  (no-slow-down 3)
  (no-message 4)
  (no-grab 5)
  (no-draw-target 6)
  (stop-sfx 7)
  (no-audio-first 8)
  )
;; ---task-control-h:resetter-flag

(deftype resetter-params (structure)
  ((message      resetter-message      :offset-assert 0)
   (flags        resetter-flag         :offset-assert 2)
   (fail         resetter-spec :inline :offset-assert 4)
   (retry        resetter-spec :inline :offset-assert 20)
   (reset-delay  uint32                :offset-assert 36 :decomp-as time-frame)
   (task         game-task             :offset-assert 40)
   (text-message text-id               :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; +++task-control-h:task-manager-mask
(defenum task-manager-mask
  :type uint32
  :bitfield #t
  (intro-scene)
  (resolution-scene)
  (time-limit)
  (auto-complete)
  )
;; ---task-control-h:task-manager-mask

(deftype task-manager-info (structure)
  ((mask                      task-manager-mask  :offset-assert 0)
   (level                     symbol             :offset-assert 4) ;; guessed by decompiler
   (type-to-spawn             symbol             :offset-assert 8)
   (time-limit                int32              :offset-assert 12)
   (manager                   handle             :offset-assert 16)
   (intro-scene               object             :offset-assert 24) ;; guessed by decompiler
   (resolution-scene          object             :offset-assert 28) ;; guessed by decompiler
   (resolution-scene-continue object             :offset-assert 32) ;; guessed by decompiler
   (final-node                game-task-node     :offset-assert 36) ;; game-task-node
   (vehicle-type              uint8              :offset-assert 38)
   (sphere-count              int8               :offset-assert 39)
   (index                     int8               :offset-assert 40)
   (intro-delay               uint16             :offset-assert 42 :decomp-as time-frame)
   (sphere-array              (inline-array sphere) :offset-assert 44)
   (on-complete               pair               :offset-assert 48) ;; guessed by decompiler
   (on-fail                   pair               :offset-assert 52) ;; guessed by decompiler
   (user-count                int32              :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  ;; field handle is likely a value type. field resolution-scene uses ~A with a signed load. field on-complete uses ~A with a signed load. field on-fail uses ~A with a signed load.
  )

(deftype task-reset-info (structure)
  ((restart-info resetter-params :offset-assert 0)
   (quit-info    resetter-params :offset-assert 4)
   (fail-info    resetter-params :offset-assert 8)
   (death-info   resetter-params :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype game-task-node-info (basic)
  ((level            symbol                                  :offset-assert 4) ;; guessed by decompiler
   (task             game-task                               :offset-assert 8)
   (name             string                                  :offset-assert 12) ;; guessed by decompiler
   (when-open        (array game-task-event)                 :offset-assert 16) ;; guessed by decompiler
   (flags            game-task-node-flag                     :offset-assert 20)
   (parent-node      game-task-node                        4 :offset-assert 24) ;; guessed by decompiler
   (task-mask        task-mask                               :offset-assert 32)
   (on-open          pair                                    :offset-assert 36) ;; guessed by decompiler
   (manager          task-manager-info                       :offset-assert 40)
   (borrow           pair                                    :offset-assert 44) ;; guessed by decompiler
   (open?            (function game-task-node-info symbol)   :offset-assert 48) ;; guessed by decompiler
   (on-close         pair                                    :offset-assert 52) ;; guessed by decompiler
   (close-time       uint32                                  :offset-assert 56) ;; guessed by decompiler
   (reset            task-reset-info                         :offset-assert 60)
   (gem-count        uint16                                  :offset-assert 64)
   (skill-count      uint16                                  :offset-assert 66)
   (death-count      uint8                                   :offset-assert 68) ;; uint16
   (suck-death-count uint8                                   :offset-assert 69)
   (command-index    uint8                                   :offset-assert 70)
   (command-count    uint8                                   :offset-assert 71)
   (description      text-id                                 :offset-assert 72) ;; guessed by decompiler
   (faction-commands pair                                    :offset-assert 76)
   )
  :method-count-assert 14
  :size-assert         #x50
  :flag-assert         #xe00000050
  ;; field on-open uses ~A with a signed load. field on-close uses ~A with a signed load.
  (:methods
    (game-task-node-info-method-9 () none) ;; 9 ;; (close! (_type_ symbol) int)
    (open! (_type_ symbol) int) ;; 10 ;; (open! (_type_ symbol) int)
    (game-task-node-info-method-11 () none) ;; 11 ;; (open? (_type_) symbol)
    (game-task-node-info-method-12 (_type_) symbol) ;; 12 ;; (copy-hooks! (_type_ game-task-node-info) game-task-node-info)
    (game-task-node-info-method-13 () none) ;; 13 ;; (eval-add (_type_) int)
    )
  )

(deftype game-task-info (basic)
  ((name                string         :offset-assert 4) ;; guessed by decompiler
   (text-name           text-id        :offset-assert 8) ;; guessed by decompiler
   (pre-play-node       game-task-node :offset-assert 12) ;; game-task-node
   (kiosk-play-node     game-task-node :offset-assert 14) ;; game-task-node
   (pre-play-continue   string         :offset-assert 16) ;; guessed by decompiler
   (play-node           game-task-node :offset-assert 20) ;; game-task-node
   (play-continue       string         :offset-assert 24) ;; guessed by decompiler
   (kiosk-play-continue object         :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  ;; field kiosk-play-continue uses ~A with a signed load.
  (:methods
    (game-task-info-method-9 (_type_) none) ;; 9
    )
  )

(deftype game-task-control (basic)
  ((counter       uint32          :offset-assert 4)
   (actor         game-task-actor :offset-assert 8)
   (current-node  game-task-node  :offset-assert 10)
   (current-event game-task-event :offset-assert 12)
   )
  (:methods
    (new (symbol type game-task-actor) _type_) ;; 0
    (get-current-task-event (_type_) game-task-event) ;; 9
    )
  )

(deftype task-manager (process)
  ((node-info      game-task-node-info   :offset-assert 128) ;; guessed by decompiler
   (info           task-manager-info     :offset-assert 132)
   (lev-name       symbol                :offset-assert 136) ;; guessed by decompiler
   (fail-on-death? symbol                :offset-assert 140) ;; guessed by decompiler
   (fail-now       symbol                :offset-assert 144) ;; guessed by decompiler
   (restart-now    symbol                :offset-assert 148)
   (allow-fail     symbol                :offset-assert 152) ;; guessed by decompiler
   (state-time     time-frame            :offset-assert 160) ;; time-frame
   (start-time     time-frame            :offset-assert 168) ;; time-frame
   (time-limit     time-frame            :offset-assert 176) ;; time-frame
   (arrow          handle                :offset-assert 184) ;; handle
   (player-vehicle handle                :offset-assert 192)
   (hud            handle              4 :offset-assert 200) ;; guessed by decompiler
   (hud-timer      handle                :offset 200) ;; handle
   (hud-counter    handle                :offset 208) ;; handle
   (intro-time     time-frame            :offset-assert 232) ;; time-frame
   )
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:methods
    (task-manager-method-14 () none) ;; 14 ;; (wait () _type_ :state)
    (task-manager-method-15 () none) ;; 15 ;; (active () _type_ :state)
    (task-manager-method-16 () none) ;; 16 ;; (complete () _type_ :state)
    (task-manager-method-17 () none) ;; 17 ;; (fail () _type_ :state)
    (task-manager-method-18 () none) ;; 18 ;; (retry () _type_ :state)
    (task-manager-method-19 () none) ;; 19 ;; (initialize! (_type_) int)
    (task-manager-method-20 () none) ;; 20 ;; (kill-all-children (_type_) int)
    (task-manager-method-21 () none) ;; 21 ;; (check-time (_type_) int)
    (task-manager-method-22 () none) ;; 22 ;; (task-manager-method-22 (_type_) symbol)
    (task-manager-method-23 () none) ;; 23
    (task-manager-method-24 () none) ;; 24
    (task-manager-method-25 () none) ;; 25
    (task-manager-method-26 () none) ;; 26
    (task-manager-method-27 () none) ;; 27
    (task-manager-method-28 () none) ;; 28
    (task-manager-method-29 () none) ;; 29
    (task-manager-method-30 () none) ;; 30
    (task-manager-method-31 (_type_ symbol) resetter-spec) ;; 31
    )
  )

(deftype ambient-control (structure)
  ((last-ambient-time time-frame :offset-assert 0) ;; time-frame
   (last-ambient      string     :offset-assert 8) ;; guessed by decompiler
   (last-ambient-id   sound-id   :offset-assert 12) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (ambient-control-method-9 () none) ;; 9 ;; (dummy-9 () none)
    (ambient-control-method-10 () none) ;; 10 ;; (dummy-10 () none)
    (ambient-control-method-11 () none) ;; 11 ;; (dummy-11 () none)
    )
  )

(define-extern game-task->string (function game-task string))
(define-extern c-string->game-task (function string game-task))
(define-extern game-task-actor->string (function game-task-actor string))
(define-extern game-task-action->string (function game-task-action string))
(define-extern game-task-node-flag->string (function game-task-node-flag object))
(define-extern game-task-node-command->string (function game-task-node-command string))

;; TODO temporarily set as symbol, change type later
(define-extern *traffic-engine* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gsf-vertex (structure)
  "Vertex used by generic. GSF = generic stripped fragment?"
  ((data uint32    8       :offset-assert 0) ;; guessed by decompiler
   (byte uint8     32      :offset 0) ;; guessed by decompiler
   (quad uint128   2       :offset 0) ;; guessed by decompiler
   (vt   qword     :inline :offset 0)
   (pos  vector3s  :inline :offset 0)
   (tex  vector2uh :inline :offset 12)
   (nrm  vector3s  :inline :offset 16)
   (nc   qword     :inline :offset 16)
   (clr  vector4ub :inline :offset 28)
   (dtex vector2uh :inline :offset 16)
   (dclr vector4ub :inline :offset 20)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype gsf-fx-vertex (structure)
  "Color/texture data only. Possibly used to share with a gsf-vertex with
   the same position/normal."
  ((clr vector4ub :inline :offset-assert 0)
   (tex vector2uh :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype gsf-header (structure)
  "Header for generic data."
  ((num-strips   uint8     :offset-assert 0)
   (num-new-vtxs uint8     :offset-assert 1)
   (num-dps      uint16    :offset-assert 2)
   (num-vtxs     uint16    :offset-assert 4)
   (strip-table  uint8  10 :offset-assert 6) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-ik (structure)
  ((index   uint8  :offset-assert 0)
   (no-kick uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype gsf-info (structure)
  ((ptr-iks   uint32  :offset-assert 0)
   (ptr-verts uint32  :offset-assert 4)
   (ptr-fx    uint32  :offset-assert 8)
   (dummy2    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype gsf-buffer (structure)
  ((data      uint8      8192     :offset-assert 0) ;; guessed by decompiler
   (info      gsf-info   :inline  :offset 0)
   (header    gsf-header :inline  :offset 16)
   (work-area uint8      :dynamic :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype generic-frag (structure)
  ((start-pos uint16  :offset-assert 0)
   (end-pos   uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-strip (structure)
  ((pos uint16  :offset-assert 0)
   (len uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-envmap-saves (structure)
  ((index-mask vector4w :inline :offset-assert 0)
   (verts      uint128  12      :offset-assert 16) ;; guessed by decompiler
   (kicks      uint128  4       :offset-assert 208) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

(deftype generic-interp-job (structure)
  ((job-type uint16  :offset-assert 0)
   (num      uint16  :offset-assert 2)
   (first    uint16  :offset-assert 4)
   (pad      uint16  :offset-assert 6)
   (ptr-data uint32  :offset-assert 8)
   (morph-z  uint16  :offset-assert 12)
   (morph-w  uint16  :offset-assert 14)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-saves (structure)
  ((ptr-dma           uint32                       :offset-assert 0)
   (ptr-vtxs          uint32                       :offset-assert 4)
   (ptr-clrs          uint32                       :offset-assert 8)
   (ptr-texs          uint32                       :offset-assert 12)
   (ptr-env-clrs      uint32                       :offset-assert 16)
   (ptr-env-texs      uint32                       :offset-assert 20)
   (cur-outbuf        uint32                       :offset-assert 24)
   (ptr-fx-buf        uint32                       :offset-assert 28)
   (xor-outbufs       uint32                       :offset-assert 32)
   (num-dps           uint32                       :offset-assert 36)
   (qwc               uint32                       :offset-assert 40)
   (gsf-buf           gsf-buffer                   :offset-assert 44)
   (ptr-shaders       uint32                       :offset-assert 48)
   (ptr-env-shader    uint32                       :offset-assert 52)
   (is-envmap         uint16                       :offset-assert 56)
   (is-translucent    uint16                       :offset-assert 58)
   (basep             uint32                       :offset-assert 60)
   (ptr-interp-job    generic-interp-job           :offset-assert 64)
   (gifbuf-adr        uint32                       :offset-assert 68)
   (inbuf-adr         uint32                       :offset-assert 72)
   (fade-val          uint32                       :offset-assert 76)
   (time-of-day-color rgba                         :offset-assert 80) ;; guessed by decompiler
   (to-vu0-waits      uint32                       :offset-assert 84)
   (to-spr-waits      uint32                       :offset-assert 88)
   (from-spr-waits    uint32                       :offset-assert 92)
   (envmap            generic-envmap-saves :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-gif-tag (structure)
  ((data       uint32          4       :offset-assert 0) ;; guessed by decompiler
   (qword      qword           :inline :offset 0)
   (fan-prim   gif-tag-prim            :offset 0) ;; guessed by decompiler
   (str-prim   gif-tag-prim            :offset 4) ;; guessed by decompiler
   (regs       gif-tag-regs-32         :offset 8) ;; guessed by decompiler
   (num-strips uint32                  :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-envmap-consts (structure)
  ((consts vector          :inline :offset-assert 0)
   (strgif generic-gif-tag :inline :offset-assert 16)
   (colors vector4w        :inline :offset-assert 32)
   (shader adgif-shader    :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-consts (structure)
  ((dma-header        dma-packet            :inline :offset-assert 0)
   (vif-header        uint32                4       :offset-assert 16) ;; guessed by decompiler
   (dma-ref-vtxs      dma-packet            :inline :offset-assert 32)
   (dma-cnt-call      dma-packet            :inline :offset-assert 48)
   (matrix            matrix                :inline :offset-assert 64)
   (base-strgif       generic-gif-tag       :inline :offset-assert 128)
   (alpha-opaque      gs-adcmd              :inline :offset-assert 144)
   (alpha-translucent gs-adcmd              :inline :offset-assert 160)
   (ztest-normal      gs-adcmd              :inline :offset-assert 176)
   (ztest-opaque      gs-adcmd              :inline :offset-assert 192)
   (adcmd-offsets     uint8                 16      :offset-assert 208) ;; guessed by decompiler
   ;(adcmds            UNKNOWN               4       :offset-assert 144)
   (stcycle-tag       uint32                        :offset-assert 224)
   (unpack-vtx-tag    uint32                        :offset-assert 228)
   (unpack-clr-tag    uint32                        :offset-assert 232)
   (unpack-tex-tag    uint32                        :offset-assert 236)
   (mscal-tag         uint32                        :offset-assert 240)
   (flush-tag         uint32                        :offset-assert 244)
   (reset-cycle-tag   uint32                        :offset-assert 248)
   (dummy0            uint32                        :offset-assert 252)
   (dma-tag-cnt       uint64                        :offset-assert 256)
   (envmap            generic-envmap-consts :inline :offset-assert 272)
   (light-consts      vector                :inline :offset-assert 400)
   (texture-offset    uint16                8       :offset-assert 416) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1b0
  :flag-assert         #x9000001b0
  )

(deftype generic-storage (structure)
  ((data uint128 16 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

#|
(deftype gsf-vertex-array (UNKNOWN)
  ((vtx gsf-vertex :dynamic :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype gsf-fx-vertex-array (UNKNOWN)
  ((data gsf-fx-vertex :dynamic :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

(deftype gsf-vertex-array (structure)
  ((vtx gsf-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(deftype gsf-fx-vertex-array (structure)
  ((data gsf-fx-vertex :dynamic :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

(define-extern *gsf-buffer* object) ;; gsf-buffer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-trans-tables             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-left-table* (pointer float))
(define-extern *ocean-right-table* (pointer float))
(define-extern *ocean-up-table* (pointer float))
(define-extern *ocean-down-table* (pointer float))
(define-extern *ocean-down-left-table* (pointer float))
(define-extern *ocean-down-right-table* (pointer float))
(define-extern *ocean-up-right-table* (pointer float))
(define-extern *ocean-up-left-table* (pointer float))
(define-extern *ocean-trans-left-table* (pointer float))
(define-extern *ocean-trans-right-table* (pointer float))
(define-extern *ocean-trans-up-table* (pointer float))
(define-extern *ocean-trans-down-table* (pointer float))
(define-extern *ocean-trans-down-left-table* (pointer float))
(define-extern *ocean-trans-down-right-table* (pointer float))
(define-extern *ocean-trans-up-right-table* (pointer float))
(define-extern *ocean-trans-up-left-table* (pointer float))
(define-extern *ocean-trans-corner-table* (inline-array vector4w-2))
(define-extern *ocean-trans-strip-array* (pointer float))
(define-extern *ocean-trans-st-table* (inline-array vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-tables                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-colors-city* ocean-colors)
(define-extern *ocean-near-indices-city* ocean-near-indices)
(define-extern *ocean-trans-indices-city* ocean-trans-indices)
(define-extern *ocean-mid-indices-city* ocean-mid-indices)
(define-extern *ocean-mid-masks-city* ocean-mid-masks)
(define-extern *ocean-map-city* ocean-map)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-frames                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *ocean-wave-frames* (pointer uint32))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cloth-art-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cloth-pt (structure)
  ((pt vector :inline :offset-assert 0)
   (u  float          :offset-assert 16)
   (v  float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype anchor-transform (structure)
  ((offset           vector :inline :offset-assert 0)
   (joint-name       string         :offset-assert 16)
   (joint            int16          :offset-assert 20)
   (constraint-index int16          :offset-assert 22)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype sphere-transform (structure)
  ((offset     vector :inline :offset-assert 0)
   (joint-name string         :offset-assert 16)
   (radius     float          :offset-assert 20)
   (joint      int16          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1a
  :flag-assert         #x90000001a
  )

(deftype disc-transform (structure)
  ((offset               vector :inline :offset-assert 0)
   (normal               vector :inline :offset-assert 16)
   (joint-name           basic          :offset-assert 32)
   (radius               float          :offset-assert 36)
   (joint                int16          :offset-assert 40)
   (start-particle-index int16          :offset-assert 42)
   (end-particle-index   int16          :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x2e
  :flag-assert         #x90000002e
  )

(deftype anchor-transform-array (inline-array-class)
  ((data anchor-transform :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype sphere-transform-array (inline-array-class)
  ((data sphere-transform :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype disc-transform-array (inline-array-class)
  ((data disc-transform :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype cloth-thickness-array (inline-array-class)
  ((data uint8 :dynamic :offset-assert 16) ;; ??
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

;; +++cloth-art-h:cloth-flag
(defenum cloth-flag
  :type uint64
  :bitfield #t
  (no-gravity 0)
  (use-wind 1)
  (need-reset 2)
  (double-sided 3)
  (suppress-mesh-failure 4)
  (active 5)
  (check-ground 6)
  (flip-normals 7)
  (wraps 8)
  (inited 9)
  (no-draw 10)
  (need-setup 11)
  (use-global-wind 12)
  (autogen-uvs 13)
  (use-momentum 14)
  (use-parent-momentum 15)
  (riding 16)
  (hidden 17)
  (local-space 18)
  (local-space-xyz 19)
  (local-space-y 20)
  (use-old-resets 21)
  (using-alt-tex 22)
  )
;; ---cloth-art-h:cloth-flag

(deftype cloth-params (structure)
  ((mesh                   int16   :offset-assert 0)
   (gravity-constant       meters   :offset-assert 4)
   (wind-constant          float   :offset-assert 8)
   (cloth-width            uint16  :offset-assert 12)
   (num-sphere-constraints uint16  :offset-assert 14)
   (num-disc-constraints   uint16  :offset-assert 16)
   (num-anchor-points      uint16  :offset-assert 18)
   (flags                  cloth-flag  :offset-assert 24)
   (tex-name               string  :offset-assert 32)
   (tex-name2              string  :offset-assert 36)
   (tex-name3              string  :offset-assert 40)
   (alt-tex-name           string  :offset-assert 44)
   (alt-tex-name2          string  :offset-assert 48)
   (alt-tex-name3          string  :offset-assert 52)
   (cloth-thickness        float   :offset-assert 56)
   (initial-xform          int16   :offset-assert 60)
   (drag                   float   :offset-assert 64)
   (ball-collision-radius  meters  :offset-assert 68)
   (num-iterations         int8    :offset-assert 72)
   (timestep-frequency     int8    :offset-assert 73)
   (secret-disable         game-secrets :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype cloth-base (basic)
  ()
  :method-count-assert 11
  :size-assert         #x4
  :flag-assert         #xb00000004
  (:methods
    (init! (_type_) int) ;; 9
    (cloth-base-method-10 (_type_ cloth-params handle) int) ;; 10
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; art-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype joint-anim (basic)
  "Base class for all joint animations. These are animations that store joint transforms."
  ((name   string  :offset-assert 4) ;; guessed by decompiler
   (number int16   :offset-assert 8)
   (length int16   :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-matrix (joint-anim)
  "Joint animation which stores matrices directly. Not used."
  ((data  matrix :inline :dynamic :offset 16))
  :flag-assert #x900000010
  )

(deftype joint-anim-transformq (joint-anim)
  "Joint animation which stores transformq's directly. Not used."
  ((data    transformq :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype joint-anim-drawable (joint-anim)
  "Mysterious unused joint animation type."
  ((data drawable :dynamic :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype joint-anim-frame (structure)
  "Frame containing all joint transforms. Note that there are two special frames: align and prejoint.
   The 'align' frame is used for the complicated animation alignment system, which allows the animation to move
   a character, among other things. The prejoint is just the root of the skeleton.
   The remaining transformq's are the joint transforms you'd expect."
  ((matrices matrix     2  :inline      :offset-assert 0) ;; guessed by decompiler
   (data     transformq :dynamic :inline :offset-assert 128) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int) _type_)
    )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype joint-anim-compressed-hdr (structure)
  "Header for the compressed joint animation format."
  ((control-bits uint32 14 :offset-assert 0) ;; guessed by decompiler
   (num-joints   uint32    :offset-assert 56)
   (matrix-bits  uint32    :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype joint-anim-compressed-fixed (structure)
  ((hdr       joint-anim-compressed-hdr :inline :offset-assert 0)
   (offset-64 uint32                            :offset-assert 64)
   (offset-32 uint32                            :offset-assert 68)
   (offset-16 uint32                            :offset-assert 72)
   (reserved  uint32                            :offset-assert 76)
   (data      vector                    133 :inline    :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8a0
  :flag-assert         #x9000008a0
  )

(deftype joint-anim-compressed-frame (structure)
  ((offset-64 uint32     :offset-assert 0)
   (offset-32 uint32     :offset-assert 4)
   (offset-16 uint32     :offset-assert 8)
   (reserved  uint32     :offset-assert 12)
   (data      vector 133 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x860
  :flag-assert         #x900000860
  )

(deftype joint-anim-compressed-control (structure)
  ((num-frames uint16                               :offset-assert 0)
   (flags      uint16                               :offset-assert 2)
   (fixed-qwc  uint32                               :offset-assert 4)
   (frame-qwc  uint32                               :offset-assert 8)
   (fixed      joint-anim-compressed-fixed          :offset-assert 12)
   (data       joint-anim-compressed-frame :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype art (basic)
  "Base class for anything considered `art`. This is typically foreground model data.
   This can be either an art container containing more arts, or an actual art thing (art-element)."
  ((name   string    :offset 8) ;; guessed by decompiler
   (length int32     :offset-assert 12)
   (extra  res-lump  :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x14
  :flag-assert         #xe00000014
  (:methods
    (login (_type_) _type_) ;; 9
    (art-method-10 (_type_) _type_) ;; 10
    (get-art-by-name-method "Look inside this art for an art with the given name and type. Return #f if not found" (_type_ string type) basic) ;; 11
    (get-art-idx-by-name-method "Look inside this art for an art with the given name and type and return the index of the art. Return #f if not found." (_type_ string type) int) ;; 12
    (contains-art-for-other-group? "Some art groups have placeholder #f's for some art that will be loaded separately as needed.
                                    Does this art group contain art that needs to be added to another group?" (_type_) symbol) ;; 13
    )
  )

(deftype art-element (art)
  "Base class Art which is not a container of more art."
  ((master-art-group-name  string :offset-assert 20)
   (master-art-group-index int32  :offset-assert 24)
   (pad uint8 20)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  )

(deftype art-mesh-anim (art-element)
  "An unused mesh animation."
  ((data basic :dynamic))
  :flag-assert #xe00000030
  )

(declare-type merc-eye-anim-block structure)
(deftype art-joint-anim (art-element)
  "Art for a joint animation. Also contains the eye animation."
  ((eye-anim         merc-eye-anim-block            :offset 28)
   (blend-shape-anim (pointer int8)                 :offset 32) ;; guessed by decompiler
   (frames           joint-anim-compressed-control  :offset 36)
   (speed            float                          :offset 48)
   (artist-base      float                          :offset-assert 52)
   (artist-step      float                          :offset-assert 56)
   )
  :method-count-assert 14
  :size-assert         #x3c
  :flag-assert         #xe0000003c
  ;; field blend-shape-anim uses ~A with a signed load.
  )

(deftype art-group (art)
  "Art which is a list of more art. The -ag files are an art group with all the art needed for a
   actor, like the mesh, animations, shadow mesh, skeleton, etc."
  ((info  file-info    :offset 4)
   (data  art-element  :score -1 :dynamic :offset 32) ;; might just be art?
   )
  :flag-assert #x1000000020
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace) ;; 7
    (link-art-to-master (_type_) art-group)
    (unlink-art-to-master (_type_) int)
    )
  )

(deftype art-mesh-geo (art-element)
  "Unused art format for a mesh. This might have been for the renderer that came before merc."
  ((data  basic  :dynamic :offset-assert 48)
   )
  :flag-assert #xe00000030
  )

(deftype art-joint-geo (art-element)
  "Collection of joints for an actor."
  ((data  joint  :dynamic :offset-assert 48)
   )
  :flag-assert #xe00000030
  )

(deftype art-cloth-geo (art-element)
  ((anchor-transforms anchor-transform-array :offset-assert 48)
   (sphere-transforms sphere-transform-array :offset-assert 52)
   (disc-transforms   disc-transform-array :offset-assert 56)
   (cloth-thickness   cloth-thickness-array :offset-assert 60)
   (thickness-scalar  float            :offset-assert 64)
   (num-points        int32            :offset 12)
   (mesh              cloth-pt :dynamic :inline :offset 80) ;; todo
   )
  :method-count-assert 14
  :size-assert         #x50
  :flag-assert         #xe00000050
  )

(deftype art-joint-anim-manager-slot (structure)
  "Record for an animation which is additionally compressed with LZO compression over the entire animation.
   This is used for short, commonly used animations that always remain in RAM."
  ((anim       art-joint-anim  :offset-assert 0) ;; guessed by decompiler
   (comp-data  uint32          :offset-assert 4)
   (time-stamp uint64          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype art-joint-anim-manager (basic)
  "Cache for LZO decompression of animations."
  ((heap       kheap                       :inline :offset-assert 16)
   (free-index int32                               :offset-assert 32)
   (slot       art-joint-anim-manager-slot 64  :inline    :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x430
  :flag-assert         #xe00000430
  (:methods
    (new (symbol type int) _type_) ;; 0 ;; (new (symbol type int) _type_)
    (decompress "Decompress the given animation and store the decompressed data in this cache." (_type_ art-joint-anim) art-joint-anim) ;; 9
    (mark-anim-in-use "Inform the cache this animation is in used, so it is not evicted." (_type_ art-joint-anim) art-joint-anim) ;; 10
    (unload-from-slot "Remove the given animation from the cache." (_type_ int) art-joint-anim) ;; 11
    (used-bytes-for-slot "Get how many bytes of our heap are used by the given anim slot." (_type_ int) int) ;; 12
    (unload-from-heap "Remove all animations which have their original compressed data in the given heap." (_type_ kheap) none) ;; 13
    )
  )

(deftype skeleton-group (art-group)
  "Unlike other art types, the skeleton-groups are defined in GOAL code.
   This stores settings like the name of the art-group, shadow/level-of-detail settings, etc."
  ((art-group-name     string               :offset-assert 32) ;; guessed by decompiler
   (jgeo               int16                :offset-assert 36) ;; int32
   (janim              int16                :offset-assert 38) ;; int32
   (bounds             vector      :inline  :offset-assert 48)
   (radius             meters               :offset-assert 60 :overlay-at (-> bounds w))
   (mgeo               int16       6        :offset-assert 64) ;; guessed by decompiler
   (max-lod            int32                :offset-assert 76)
   (lod-dist           float       6        :offset-assert 80) ;; guessed by decompiler
   (longest-edge       meters               :offset-assert 104)
   (texture-level      int8                 :offset-assert 108)
   (version            int8                 :offset-assert 109)
   (shadow             int16                :offset-assert 110) ;; int8
   (shadow-joint-index int8                 :offset-assert 112)
   (origin-joint-index int8                 :offset-assert 113)
   (sort               int8                 :offset-assert 114)
   (light-index        uint8                :offset-assert 115)
   (clothing           (array cloth-params) :offset-assert 116)
   (global-effects     uint8                :offset-assert 120)
   )
  :method-count-assert 17
  :size-assert         #x79
  :flag-assert         #x1100000079
  (:methods
    (add-to-loading-level (_type_) skeleton-group) ;; 16
    )
  )

(declare-type merc-ctrl structure)
(deftype lod-group (structure)
  "A single level of detail mesh."
  ((geo  merc-ctrl  :offset-assert 0) ;; guessed by decompiler
   (dist meters     :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype lod-set (structure)
  "All the different level-of-detail meshes for an actor."
  ((lod     lod-group 6 :inline :offset-assert 0) ;; guessed by decompiler
   (max-lod int8        :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x31
  :flag-assert         #xa00000031
  (:methods
    (setup-lods! (_type_ skeleton-group art-group entity) _type_) ;; 9
    )
  )

(declare-type process-drawable process)

(defenum draw-control-status
  :type uint16
  :bitfield #t
  (close-to-screen 0)
  (no-draw 1)
  (no-draw-temp)
  (on-screen)
  (uninited)
  (no-draw-bounds)
  (no-closest-distance)
  (math-skel)
  (force-vu1)
  (no-draw-bounds2)
  (force-fade)
  (warp-cross-fade)
  (lod-set)
  (disable-fog)
  (hud)
  (no-bounds-check)
  )

(defenum draw-control-data-format
  :type uint8
  :bitfield #f
  (pris 0)
  (merc 1)
  )

(defenum draw-control-global-effect
  :type uint8
  :bitfield #t
  (bit-0)
  (bit-1)
  (title-light)
  (disable-envmap)
  (rim-lights)
  (rim-lights2)
  (rim-lights3)
  (no-textures)
  )

(declare-type ripple-control basic)
(declare-type shadow-geo structure)
(declare-type shadow-control structure)
(declare-type cloth-base basic)
(declare-type verlet-particle-system cloth-base)
(declare-type cloth-system verlet-particle-system)
(declare-type joint-control basic)

(deftype draw-control (basic)
  "The draw-control is a collection of all the stuff that the foreground rendering system needs to draw something.
   Each process-drawable has a draw-control."
  ((process              process-drawable                                                    :offset-assert 4) ;; guessed by decompiler
   (status               draw-control-status                                                 :offset-assert 8)
   (data-format          draw-control-data-format                                                               :offset-assert 10) ;; draw-control-data-format
   (global-effect        draw-control-global-effect                                          :offset-assert 11)
   (art-group            art-group                                                           :offset-assert 12) ;; guessed by decompiler
   (jgeo                 art-joint-geo                                                       :offset-assert 16) ;; guessed by decompiler
   (mgeo                 merc-ctrl                                                           :offset-assert 20) ;; guessed by decompiler
   (dma-add-func         (function process-drawable draw-control symbol object none)         :offset-assert 24) ;; guessed by decompiler
   (skeleton             skeleton                                                            :offset-assert 28) ;; guessed by decompiler
   (lod-set              lod-set                                                     :inline :offset-assert 32)
   ;(lod                  UNKNOWN                                                     6       :offset-assert 32)
   (max-lod              int8                                                                :offset 80)
   (force-lod            int8                                                                :offset-assert 81)
   (cur-lod              int8                                                                :offset-assert 82)
   (desired-lod          int8                                                                :offset-assert 83)
   (ripple               ripple-control                                                      :offset-assert 84) ;; guessed by decompiler
   (longest-edge         meters                                                              :offset-assert 88)
   (longest-edge?        uint32                                                              :offset 88)
   (light-index          uint8                                                               :offset-assert 92)
   (shadow-mask          uint8                                                               :offset-assert 93)
   (level-index          uint8                                                               :offset-assert 94)
   (death-draw-overlap   uint8                                                               :offset-assert 95)
   (death-timer          uint8                                                               :offset-assert 96)
   (death-timer-org      uint8                                                               :offset-assert 97)
   (death-vertex-skip    uint16                                                              :offset-assert 98)
   (death-effect         uint32                                                              :offset-assert 100)
   (shadow               shadow-geo                                                          :offset-assert 104) ;; guessed by decompiler
   (shadow-ctrl          shadow-control                                                      :offset-assert 108) ;; guessed by decompiler
   (distance             meters                                                              :offset-assert 112)
   (origin               vector                                                      :inline :offset-assert 128)
   (bounds               vector                                                      :inline :offset-assert 144)
   (radius               meters                                                              :offset 156)
   (color-mult           rgbaf                                                       :inline :offset-assert 160)
   (color-emissive       rgbaf                                                       :inline :offset-assert 176)
   (effect-mask          uint64                                                              :offset-assert 192)
   (seg-mask             uint64                                                              :offset-assert 200)
   (origin-joint-index   uint8                                                               :offset-assert 208)
   (shadow-joint-index   uint8                                                               :offset-assert 209)
   (force-fade           uint8                                                               :offset-assert 210)
   (default-texture-page uint8                                                               :offset-assert 211)
   (shadow-values        uint32                                                              :offset-assert 212)
   (cloth-instances      (array cloth-system)                                                :offset-assert 216)
   )
  :method-count-assert 16
  :size-assert         #xdc
  :flag-assert         #x10000000dc
  ;; field draw-control-status is likely a value type. field draw-control-global-effect is likely a value type.
  (:methods
    (new (symbol type process symbol) _type_) ;; 0
    (get-skeleton-origin (_type_) vector) ;; 9
    (lod-set! (_type_ int) none) ;; 10
    (lods-assign! (_type_ lod-set) none) ;; 11
    (setup-masks (_type_ int int) none) ;; 12
    (setup-cspace-and-add (_type_ art-joint-geo symbol) cspace-array) ;; 13
    (draw-control-method-14 (_type_ cspace-array joint-control) none) ;; 14
    (do-joint-math (_type_ cspace-array joint-control) none) ;; 15
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu1-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pris-mtx (structure)
  "Matrix for merc rendering. Named after the earlier 'pris' renderer.
   Contains a transformation matrix for vertices, one for normals, and a scale.
   This matrix is likely not used by generic VU1, but is used by the merc -> generic converter."
  ((data   float   32      :offset-assert 0) ;; guessed by decompiler
   (vector vector  8       :offset 0) ;; guessed by decompiler
   (t-mtx  matrix  :inline :offset 0)
   (n-mtx  matrix3 :inline :offset 64)
   (scale  vector  :inline :offset 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-pris-mtx-save (structure)
  ((loc-mtx pris-mtx :inline :offset-assert 0)
   (par-mtx pris-mtx :inline :offset-assert 128)
   (dif-mtx pris-mtx :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype generic-constants (structure)
  "Constant data sent to VU1 for generic rendering."
  ((fog         vector :inline :offset-assert 0)
   (adgif       gs-gif-tag  :inline :offset-assert 16) ;;  :inline
   (hvdf-offset vector :inline :offset-assert 32)
   (hmge-scale  vector :inline :offset-assert 48)
   (invh-scale  vector :inline :offset-assert 64)
   (guard       vector :inline :offset-assert 80)
   (flush       qword  :inline :offset-assert 96)
   (stores      qword  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-shrub-constants (structure)
  ((shrub-giftag generic-gif-tag :inline :offset-assert 0)
   (shrub-adnop  qword           :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype gcf-shader (structure)
  ((adgif  uint128      5       :offset-assert 0) ;; guessed by decompiler
   (shader adgif-shader :inline :offset 0)
   (pos    uint32               :offset 12)
   (num    uint32               :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype gcf-control (structure)
  ((matrix      matrix          :inline  :offset-assert 0)
   (giftag      generic-gif-tag :inline  :offset-assert 64)
   (adnops      gs-adcmd        2 :inline        :offset-assert 80) ;; guessed by decompiler
   (num-strips  uint32                   :offset 76)
   (num-dps     uint32                   :offset 92)
   (kick-offset uint32                   :offset 108)
   (shader      gcf-shader    :inline :dynamic :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype gcf-vertex (structure)
  ((tex vector4w       :inline :offset-assert 0)
   (clr gs-packed-rgba :inline :offset-assert 16)
   (pos gs-packed-xyzw :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ripple-merc-query (inline-array-class)
  "Information about which merc vertices to apply the 'ripple' effect to."
  ((start-vertex int32           :offset-assert 16)
   (vertex-skip  int32           :offset-assert 20)
   (vertex-count int32           :offset-assert 24)
   (current-loc  int32           :offset-assert 28)
   (data         vector :inline :dynamic :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  )

(deftype merc-byte-header (structure)
  "Header for a single [[merc-fragment]] uploaded to the VU."
  ((srcdest-off        uint8    :offset-assert 0)
   (rgba-off           uint8    :offset-assert 1)
   (lump-off           uint8    :offset-assert 2)
   (fp-off             uint8    :offset-assert 3)
   (mat1-cnt           uint8    :offset-assert 4)
   (mat2-cnt           uint8    :offset-assert 5)
   (mat3-cnt           uint8    :offset-assert 6)
   (samecopy-cnt       uint8    :offset-assert 7)
   (crosscopy-cnt      uint8    :offset-assert 8)
   (strip-len          uint8    :offset-assert 9)
   (mm-quadword-fp-off uint8    :offset-assert 10)
   (mm-quadword-size   uint8    :offset-assert 11)
   (perc-off           uint8    :offset-assert 12)
   (mat-slot           uint8 10 :offset-assert 13) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

(deftype merc-fragment (structure)
  "A single merc fragment that fits into VU memory."
  ((header merc-byte-header :inline :offset-assert 0)
   (rest   uint8            1       :offset-assert 23) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (login-adgifs (_type_) merc-fragment) ;; 9
    )
  )

(deftype merc-vtx (structure)
  "A packed merc vertex."
  ((mat-0 uint8  :offset-assert 0)
   (mat-1 uint8  :offset-assert 1)
   (nrm-x uint8  :offset-assert 2)
   (pos-x uint8  :offset-assert 3)
   (dst-0 uint8  :offset-assert 4)
   (dst-1 uint8  :offset-assert 5)
   (nrm-y uint8  :offset-assert 6)
   (pos-y uint8  :offset-assert 7)
   (tex-s uint8  :offset-assert 8)
   (tex-t uint8  :offset-assert 9)
   (nrm-z uint8  :offset-assert 10)
   (pos-z uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype merc-fp-header (structure)
  "Merc header for a [[merc-fragment]]'s floating point data."
  ((x-add            float  :offset-assert 0)
   (y-add            float  :offset-assert 4)
   (z-add            float  :offset-assert 8)
   (shader-cnt       uint8  :offset-assert 12)
   (kick-info-offset uint8  :offset-assert 13)
   (kick-info-step   uint8  :offset-assert 14)
   (hword-cnt        uint8  :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-mat-dest (structure)
  "Metadata for a merc matrix upload."
  ((matrix-number uint8  :offset-assert 0)
   (matrix-dest   uint8  :offset-assert 1)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype merc-fragment-control (structure)
  "Data about a [[merc-fragment]] needed for merc DMA generation."
  ((unsigned-four-count uint8                  :offset-assert 0)
   (lump-four-count     uint8                  :offset-assert 1)
   (fp-qwc              uint8                  :offset-assert 2)
   (mat-xfer-count      uint8                  :offset-assert 3)
   (mat-dest-data       merc-mat-dest :dynamic :inline :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype merc-blend-ctrl (structure)
  "Information about the vertices of a model modified by BLERC."
  ((blend-vtx-count     uint8          :offset-assert 0)
   (nonzero-index-count uint8          :offset-assert 1)
   (bt-index            uint8 :dynamic :offset-assert 2) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype mei-envmap-tint (structure)
  "Data for the extra 'envmap tint' effect."
  ((fade0 float  :offset-assert 0)
   (fade1 float  :offset-assert 4)
   (tint  rgba   :offset-assert 8) ;; guessed by decompiler
   (dummy int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-texture-scroll (structure)
  "Data for the extra 'texscroll' effect."
  ((max-dist     float   :offset-assert 0)
   (st-int-scale uint8   :offset-assert 4)
   (time-factor  uint8   :offset-assert 5)
   (scroll-dir   uint8   :offset-assert 6)
   (cached-time  uint8   :offset-assert 7)
   (time-delta   uint8   :offset-assert 8)
   (dummy        uint8 7 :offset-assert 9) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype mei-ripple (structure)
  "Data for the extra 'ripple' effect."
  ((x-base    float  :offset-assert 0)
   (z-base    float  :offset-assert 4)
   (grid-size float  :offset-assert 8)
   (angle     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-extra-info (structure)
  "Info for merc extra effects."
  ((envmap-tint-offset    uint8    :offset-assert 0)
   (shader-offset         uint8    :offset-assert 1)
   (texture-scroll-offset uint8    :offset-assert 2)
   (ripple-offset         uint8    :offset-assert 3)
   (dummy                 uint8 12 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; +++merc-h:effect-bits
(defenum effect-bits
  :type uint8
  :bitfield #t
  (texscroll 0)
  (no-fade-out 1) ;; translucent.
  (ripple 2)
  (emerc 3) ;; envmap??
  (ignore-tod-for-envmap-tint 4) ;; color thing
  (force-mercneric 5) ;; some mercneric-only effect
  (cross-fade 6) ;; WARP?
  (ignore-alpha 7)
  )
;; ---merc-h:effect-bits

;; moved from end of merc-h definitions
(deftype merc-blend-data (structure) ;; was unknown!
  "Packed BLERC data."
  ((int8-data int8 :dynamic :offset-assert 0)
   )
  )

(deftype merc-effect (structure)
  "A collection of [[merc-fragment]]s with data for any extra effects."
  ((frag-geo            merc-fragment          :offset-assert 0)
   (frag-ctrl           merc-fragment-control  :offset-assert 4)
   (blend-data          merc-blend-data        :offset-assert 8)
   (blend-ctrl          merc-blend-ctrl        :offset-assert 12)
   (merc-effect-version uint8                  :offset-assert 16)
   (effect-bits         effect-bits            :offset-assert 17)
   (frag-count          uint16                 :offset-assert 18)
   (blend-frag-count    uint16                 :offset-assert 20)
   (tri-count           uint16                 :offset-assert 22)
   (dvert-count         uint16                 :offset-assert 24)
   (texture-index       uint8                  :offset-assert 26)
   (effect-usage        uint8                  :offset-assert 27)
   (extra-info          merc-extra-info        :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (login-adgifs (_type_) none) ;; 9
    )
  )

(deftype merc-eye-ctrl (structure)
  "Eye info for both eyes of a merc model."
  ((eye-slot           int8                   :offset-assert 0)
   (shader-offset      int8                   :offset-assert 1)
   (shader-count       int8                   :offset-assert 2)
   (eye-ctrl-index     int8                   :offset-assert 3)
   (shader             adgif-shader 6 :inline :offset-assert 16) ;; guessed by decompiler
   (left-iris-shader   adgif-shader   :inline :offset 16)
   (left-pupil-shader  adgif-shader   :inline :offset 96)
   (left-lid-shader    adgif-shader   :inline :offset 176)
   (right-iris-shader  adgif-shader   :inline :offset 256)
   (right-pupil-shader adgif-shader   :inline :offset 336)
   (right-lid-shader   adgif-shader   :inline :offset 416)
   )
  :method-count-assert 9
  :size-assert         #x1f0
  :flag-assert         #x9000001f0
  )

(deftype merc-eye-anim-frame (structure)
  "A single frame of a merc eye animation."
  ((pupil-trans-x int8    :offset-assert 0)
   (pupil-trans-y int8    :offset-assert 1)
   (blink         int8    :offset-assert 2)
   (iris-scale    int8    :offset 4)
   (pupil-scale   int8    :offset 5)
   (lid-scale     int8    :offset 6)
   (dword         uint64  :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-eye-anim-block (structure)
  "A list of eye animation frames."
  ((max-frame int16                                :offset-assert 0)
   (data      merc-eye-anim-frame :inline :dynamic :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype texture-usage-group (structure)
  ((data texture-masks 7 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

(deftype merc-ctrl-header (structure)
  "The header for a [[merc-ctrl]],
   containing metadata about the model used for drawing."
  ((xyz-scale              float                        :offset-assert 0)
   (st-magic               uint32                       :offset-assert 4)
   (st-out-a               uint32                       :offset-assert 8)
   (st-out-b               uint32                       :offset-assert 12)
   (st-vif-add             uint32                       :offset-assert 16)
   (st-int-off             uint16                       :offset-assert 20)
   (st-int-scale           uint16                       :offset-assert 22)
   (effect-count           uint32                       :offset-assert 24)
   (blend-target-count     uint32                       :offset-assert 28)
   (fragment-count         uint16                       :offset-assert 32)
   (tri-count              uint16                       :offset-assert 34)
   (matrix-count           uint8                        :offset-assert 36)
   (shader-count           uint8                        :offset-assert 37)
   (transform-vertex-count uint16                       :offset-assert 38)
   (dvert-count            uint16                       :offset-assert 40)
   (one-mat-count          uint16                       :offset-assert 42)
   (two-mat-count          uint16                       :offset-assert 44)
   (two-mat-reuse-count    uint16                       :offset-assert 46)
   (three-mat-count        uint16                       :offset-assert 48)
   (three-mat-reuse-count  uint16                       :offset-assert 50)
   (shader-upload-count    uint8                        :offset-assert 52)
   (matrix-upload-count    uint8                        :offset-assert 53)
   (same-copy-count        uint16                       :offset-assert 54)
   (cross-copy-count       uint16                       :offset-assert 56)
   (num-verts              uint16                       :offset-assert 58)
   (longest-edge           float                        :offset-assert 60)
   (eye-ctrl               merc-eye-ctrl                :offset-assert 64)
   (pad                    uint32              3        :offset-assert 68) ;; guessed by decompiler
   (masks-padding          texture-masks       :inline  :offset-assert 80)
   (texture-usage-group    texture-usage-group          :offset 80)
   (dummy-bytes            uint8               :dynamic :offset 32) ;; guessed by decompiler
   (envmap-tint            uint32                       :offset 32)
   (query                  basic                        :offset 36)
   (needs-clip             uint8                        :offset 40)
   (use-isometric          uint8                        :offset 41)
   (use-attached-shader    uint8                        :offset 42)
   (display-triangles      uint8                        :offset 43)
   (death-vertex-skip      uint16                       :offset 44)
   (death-start-vertex     uint16                       :offset 46)
   (death-effect           uint32                       :offset 48)
   (use-translucent        uint8                        :offset 52)
   (display-this-fragment  uint8                        :offset 53)
   (use-warp               uint8                        :offset 54)
   (ignore-alpha           uint8                        :offset 55)
   (force-fade             uint8                        :offset 56)
   (disable-fog            uint8                        :offset 57)
   (disable-envmap         uint8                        :offset 58)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  ;; field xyz-scale is a float printed as hex?
  )

(deftype merc-ctrl (art-element)
  "The merc data for a single model as it's stored in an art group.
   Consists of a header and a list of [[merc-effect]]s."
  ((num-joints int32                     :offset 12)
   (seg-table  (array uint64)            :offset 28) ;; guessed by decompiler
   (header     merc-ctrl-header :inline  :offset-assert 48)
   (effect     merc-effect      :dynamic :inline :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #xb0
  :flag-assert         #xe000000b0
  )

(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag :inline :offset-assert 0) ;; gs-gif-tag :inline
   (ad-gif        gs-gif-tag :inline :offset-assert 16) ;; gs-gif-tag :inline
   (hvdf-offset   vector  :inline :offset-assert 32)
   (perspective   uint128 4       :offset-assert 48) ;; guessed by decompiler
   (fog           vector  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype emerc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag :inline :offset-assert 0) ;; gs-gif-tag :inline
   (ad-gif        gs-gif-tag :inline :offset-assert 16) ;; gs-gif-tag :inline
   (hvdf-offset   vector     :inline :offset-assert 32)
   (perspective   vector   4 :inline :offset-assert 48) ;; guessed by decompiler
   (fog           vector     :inline :offset-assert 112)
   (unperspect    vector     :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(deftype texture-login-data (structure)
  ((default-texture-index int32                :offset-assert 0)
   (current-texture-index int32                :offset-assert 4)
   (texture-usage-group   texture-usage-group  :offset-assert 8)
   (merc-ctrl-header      merc-ctrl-header     :offset-assert 12)
   (name                  basic                :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype ripple-wave (structure)
  ((scale float  :offset-assert 0)
   (offs  float  :offset-assert 4)
   (xdiv  int16  :offset-assert 8)
   (zdiv  int16  :offset-assert 10)
   (speed float  :offset-assert 12)
   (xmul  float  :offset-assert 16)
   (zmul  float  :offset-assert 20)
   (delta float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype ripple-wave-set (basic)
  ((count        int32         :offset-assert 4)
   (converted    basic         :offset-assert 8)
   (normal-scale float         :offset-assert 12)
   (wave         ripple-wave 4 :inline :offset-assert 16) ;; guessed by decompiler
   (frame-save   uint64        :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(deftype ripple-control (basic)
  ((global-scale            float              :offset-assert 4)
   (last-frame-scale        float              :offset-assert 8)
   (close-fade-dist         float              :offset-assert 12)
   (far-fade-dist           float              :offset-assert 16)
   (faded-scale             float              :offset-assert 20)
   (individual-normal-scale float              :offset-assert 24)
   (waveform                ripple-wave-set    :offset-assert 28) ;; guessed by decompiler
   (send-query              symbol             :offset-assert 32) ;; guessed by decompiler
   (query                   ripple-merc-query  :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  (:methods
    (new (symbol type) _type_) ;; 0
    )
  )

(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert 4)
   (timer       uint8   :offset-assert 6)
   (overlap     uint8   :offset-assert 7)
   (effect      uint32  :offset-assert 8)
   (sound       symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern merc-fragment-fp-data
  "Get the floating point data of a [[merc-fragment]]."
  (function merc-fragment merc-fp-header))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-merc-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype merc-matrix (structure)
  ((quad   uint128 8 :offset-assert 0) ;; guessed by decompiler
   (vector vector  8 :inline :offset 0 :score 1) ;; guessed by decompiler
   (tag    uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-merc-tag (dma-packet)
  ((next-ptr uint32  :offset 12)
   (size     uint32  :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-merc-ctrl (structure)
  ((tag    generic-merc-tag :inline :offset-assert 0)
   (lights vu-lights        :inline :offset-assert 16)
   (header merc-ctrl-header :inline :offset-assert 128)
   (effect merc-effect      :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data uint128 11 :offset-assert 288) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1d0
  :flag-assert         #x9000001d0
  )

(deftype generic-merc-input (structure)
  ((geo-tag     generic-merc-tag           :inline :offset-assert 0)
   (geo-block   uint8                      1296    :offset-assert 16) ;; guessed by decompiler
   (byte-header merc-byte-header           :inline :offset 16)
   (matrix      merc-matrix                9 :inline :offset-assert 1312) ;; guessed by decompiler
   (control     generic-merc-ctrl-with-sfx :inline :offset-assert 2464)
   (end-tag     generic-merc-tag           :inline :offset-assert 2928)
   (shader      adgif-shader               :inline :offset-assert 2944)
   )
  :method-count-assert 9
  :size-assert         #xbd0
  :flag-assert         #x900000bd0
  )

(deftype generic-merc-output (structure)
  ((info             gsf-info   :inline :offset-assert 0)
   (header           gsf-header :inline :offset-assert 16)
   (index-kick-table uint16     80      :offset-assert 32) ;; guessed by decompiler
   (index-table      uint8      160     :offset 32) ;; guessed by decompiler
   (inverse-table    uint8      256     :offset-assert 192) ;; guessed by decompiler
   (vertex-table     gsf-vertex 72 :inline :offset-assert 448) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xac0
  :flag-assert         #x900000ac0
  )

(deftype generic-merc-dcache (structure)
  ((output-a    generic-merc-output :inline :offset-assert 0)
   (output-b    generic-merc-output :inline :offset-assert 2752)
   (inv-table-1 uint8               544     :offset-assert 5504) ;; guessed by decompiler
   (inv-table-7 uint8               544     :offset-assert 6048) ;; guessed by decompiler
   (inv-safety  uint8               16      :offset-assert 6592) ;; guessed by decompiler
   (effect-data uint8               1584    :offset-assert 6608) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

(deftype gm-shadow (structure)
  ((perspective                matrix              :inline :offset-assert 0)
   (isometric                  matrix              :inline :offset-assert 64)
   (inv-camera-rot             matrix              :inline :offset-assert 128)
   (envmap-shader              adgif-shader        :inline :offset-assert 192)
   (current-chain              uint32                      :offset-assert 272)
   (next-chain                 uint32                      :offset-assert 276)
   (buf-index                  uint32                      :offset-assert 280)
   (fragment-count             uint32                      :offset-assert 284)
   (write-limit                int32                       :offset-assert 288)
   (indexed-input-base         generic-merc-input          :offset-assert 292)
   (other-input-base           generic-merc-input          :offset-assert 296)
   (indexed-output-base        generic-merc-output         :offset-assert 300)
   (other-output-base          generic-merc-output         :offset-assert 304)
   (p-input                    uint32                      :offset-assert 308)
   (gsf-buf                    generic-merc-dcache         :offset-assert 312)
   (p-fheader                  merc-fp-header              :offset-assert 316)
   (curr-chain                 basic                       :offset-assert 320)
   (mercneric-convert          basic                       :offset-assert 324)
   (generic-prepare-dma-single basic                       :offset-assert 328)
   (generic-prepare-dma-double basic                       :offset-assert 332)
   (generic-light-proc         basic                       :offset-assert 336)
   (generic-envmap-proc        basic                       :offset-assert 340)
   (high-speed-reject          basic                       :offset-assert 344)
   (dummy-0                    uint32                      :offset-assert 348)
   (hsr-xmult                  vector              :inline :offset-assert 352)
   (hsr-ymult                  vector              :inline :offset-assert 368)
   (warp-consts                vector              :inline :offset-assert 384)
   )
  :method-count-assert 9
  :size-assert         #x190
  :flag-assert         #x900000190
  )

(deftype generic-merc-work (structure)
  ((input-a generic-merc-input         :inline :offset-assert 0)
   (input-b generic-merc-input         :inline :offset-assert 3024)
   (ctrl    generic-merc-ctrl-with-sfx :inline :offset-assert 6048)
   (shadow  gm-shadow                  :inline :offset-assert 6512)
   (stack   uint128                    16      :offset-assert 6912) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c00
  :flag-assert         #x900001c00
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-tie-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype generic-tie-instance (structure)
  ((matrix-tag  dma-packet :inline :offset-assert 0)
   (matrix-data vector     6 :inline       :offset-assert 16) ;; guessed by decompiler
   (index-tag   dma-packet :inline :offset-assert 112)
   (indices     uint8      224     :offset-assert 128) ;; guessed by decompiler
   (end-tag     dma-packet :inline :offset-assert 352)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-tie-input (structure)
  ((palette-tag dma-packet :inline :offset-assert 0)
   (palette     rgba       128     :offset-assert 16) ;; guessed by decompiler
   (model-tag   dma-packet :inline :offset-assert 528)
   (model       vector     146 :inline     :offset-assert 544) ;; guessed by decompiler
   (matrix-tag  dma-packet :inline :offset-assert 2880)
   (matrix-data vector     6 :inline      :offset-assert 2896) ;; guessed by decompiler
   (index-tag   dma-packet :inline :offset-assert 2992)
   (indices     uint8      224     :offset-assert 3008) ;; guessed by decompiler
   (end-tag     dma-packet :inline :offset-assert 3232)
   )
  :method-count-assert 9
  :size-assert         #xcb0
  :flag-assert         #x900000cb0
  )

(deftype generic-tie-run-control (structure)
  ((skip-bp2    uint8  :offset-assert 0)
   (skip-ips    uint8  :offset-assert 1)
   (gifbuf-skip uint8  :offset-assert 2)
   (strips      uint8  :offset-assert 3)
   (target-bp1  uint8  :offset-assert 4)
   (target-bp2  uint8  :offset-assert 5)
   (target-ip1  uint8  :offset-assert 6)
   (target-ip2  uint8  :offset-assert 7)
   (target-bps  uint8  :offset-assert 8)
   (target-ips  uint8  :offset-assert 9)
   (is-generic  uint8  :offset-assert 10)
   (reserved    uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype generic-tie-base-point (structure)
  ((data uint16  8 :offset-assert 0) ;; guessed by decompiler
   (quad uint128   :offset 0)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset 4)
   (d0   int16     :offset 6)
   (vtx  uint64    :offset 0)
   (u    int16     :offset 8)
   (v    int16     :offset 10)
   (tex  uint32    :offset 8)
   (w    int16     :offset 12)
   (d1   int16     :offset 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-bps (structure)
  ((bp generic-tie-base-point 4 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype generic-tie-interp-point (structure)
  ((data   uint16  12 :offset-assert 0) ;; guessed by decompiler
   ;(quad   uint128    :offset 0) ;; misaligned?
   (x      int16      :offset 0)
   (y      int16      :offset 2)
   (z      int16      :offset 4)
   (d0     int16      :offset 6)
   (vtx0   uint64     :offset 0)
   (dx     int16      :offset 8)
   (dy     int16      :offset 10)
   (dz     int16      :offset 12)
   (unused int16      :offset 14)
   (vtx1   uint64     :offset 8)
   (u      int16      :offset 16)
   (v      int16      :offset 18)
   (tex    uint32     :offset 16)
   (w      int16      :offset 20)
   (d1     int16      :offset 22)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype generic-tie-ips (structure)
  ((ip generic-tie-interp-point 2 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-header (structure)
  ((effect              uint8              :offset-assert 0)
   (interp-table-size   uint8              :offset-assert 1)
   (num-bps             uint8              :offset-assert 2)
   (num-ips             uint8              :offset-assert 3)
   (tint-color          uint32             :offset-assert 4)
   (index-table-offset  uint16             :offset-assert 8)
   (kick-table-offset   uint16             :offset-assert 10)
   (normal-table-offset uint16             :offset-assert 12)
   (interp-table-offset uint16             :offset-assert 14)
   (gsf-header          gsf-header :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype generic-tie-matrix (structure)
  ((matrix matrix :inline :offset-assert 0)
   (morph  vector :inline :offset-assert 64)
   (fog    qword  :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype generic-tie-normal (structure)
  ((x     int8  :offset-assert 0)
   (y     int8  :offset-assert 1)
   (z     int8  :offset-assert 2)
   (dummy int8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-tie-control (structure)
  ((ptr-palette   uint32                   :offset-assert 0)
   (ptr-shaders   uint32                   :offset-assert 4)
   (ptr-runctrl   generic-tie-run-control  :offset-assert 8)
   (ptr-verts     uint32                   :offset-assert 12)
   (ptr-generic   generic-tie-header       :offset-assert 16)
   (ptr-dps       uint32                   :offset-assert 20)
   (ptr-kicks     uint32                   :offset-assert 24)
   (ptr-normals   uint32                   :offset-assert 28)
   (ptr-interp    uint32                   :offset-assert 32)
   (ptr-mtxs      generic-tie-matrix       :offset-assert 36)
   (ptr-cinds     uint32                   :offset-assert 40)
   (next-instance uint32                   :offset-assert 44)
   (next-model    uint32                   :offset-assert 48)
   (next-is-model uint32                   :offset-assert 52)
   (tie-type      uint32                   :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype generic-tie-stats (structure)
  ((num-bps       uint32  :offset-assert 0)
   (num-ips       uint32  :offset-assert 4)
   (num-dps       uint32  :offset-assert 8)
   (num-shaders   uint32  :offset-assert 12)
   (num-models    uint32  :offset-assert 16)
   (num-instances uint32  :offset-assert 20)
   (num-waits     uint32  :offset-assert 24)
   (num-qwc       uint32  :offset-assert 28)
   (max-qwc       uint32  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double basic  :offset-assert 0)
   (generic-envmap-dproc       basic  :offset-assert 4)
   (generic-interp-dproc       basic  :offset-assert 8)
   (generic-no-light-dproc     basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-shadow (structure)
  ((out-buf      gsf-buffer                :offset-assert 0)
   (cur-buf      uint32                    :offset-assert 4)
   (tie-type     int32                     :offset-assert 8)
   (ptr-inst     uint32                    :offset-assert 12)
   (ptr-buf      uint32                    :offset-assert 16)
   (inst-xor     int32                     :offset-assert 20)
   (end-of-chain uint32                    :offset-assert 24)
   (write-limit  uint32                    :offset-assert 28)
   (calls        generic-tie-calls :inline :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-work (structure)
  ((control     generic-tie-control  :inline :offset-assert 0)
   (interp-job  generic-interp-job   :inline :offset-assert 60)
   (shadow      generic-tie-shadow   :inline :offset-assert 76)
   (input-a     generic-tie-input    :inline :offset-assert 128)
   (input-b     generic-tie-input    :inline :offset-assert 3376)
   (inst-buf    generic-tie-instance :inline :offset-assert 6624)
   (palette-buf rgba                 128     :offset-assert 6992) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1d50
  :flag-assert         #x900001d50
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-work-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype generic-input-buffer (structure)
  ((data uint128           473     :offset-assert 0) ;; guessed by decompiler
   (merc generic-merc-work :inline :offset 0)
   (tie  generic-tie-work  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x1d90
  :flag-assert         #x900001d90
  )

(deftype generic-debug (structure)
  ((locks      uint32 4  :offset-assert 0) ;; guessed by decompiler
   (timer      uint32 32 :offset-assert 16) ;; guessed by decompiler
   (count      uint32 32 :offset-assert 144) ;; guessed by decompiler
   (vps        uint32 32 :offset-assert 272) ;; guessed by decompiler
   (buffer     int32     :offset-assert 400)
   (start-addr int32     :offset-assert 404)
   (lock       int32     :offset-assert 408)
   )
  :method-count-assert 9
  :size-assert         #x19c
  :flag-assert         #x90000019c
  )

(deftype generic-vu1-header (structure)
  ((matrix  matrix          :inline :offset-assert 0)
   (strgif  generic-gif-tag :inline :offset-assert 64)
   (adcmds  gs-adcmd        2 :inline :offset-assert 80) ;; guessed by decompiler
   (adnop1  gs-adcmd        :inline :offset 80)
   (adnop2  gs-adcmd        :inline :offset 96)
   (dps     uint16                  :offset 92)
   (kickoff uint16                  :offset 108)
   (strips  uint16                  :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-vu1-texbuf (structure)
  ((header generic-vu1-header :inline  :offset-assert 0)
   (shader uint32             :dynamic :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-texbuf (structure)
  ((tag    dma-packet         :inline  :offset-assert 0)
   (header generic-vu1-header :inline  :offset-assert 16)
   (shader uint32             :dynamic :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-effect-work (structure)
  ((consts   generic-consts  :inline :offset-assert 0)
   (storage  generic-storage :inline :offset-assert 432)
   (storage2 generic-storage :inline :offset-assert 688)
   (lights   vu-lights       :inline :offset-assert 944)
   )
  :method-count-assert 9
  :size-assert         #x420
  :flag-assert         #x900000420
  )

(deftype generic-effect-buffer (structure)
  ((outbuf-0 uint8               3552    :offset-assert 0) ;; guessed by decompiler
   (work     generic-effect-work :inline :offset-assert 3552)
   (outbuf-1 uint8               3552    :offset-assert 4608) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1fe0
  :flag-assert         #x900001fe0
  )

(deftype generic-work (structure)
  ((saves   generic-saves         :inline :offset-assert 0)
   (storage generic-storage       :inline :offset-assert 368)
   (in-buf  generic-input-buffer  :inline :offset-assert 624)
   (fx-buf  generic-effect-buffer :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )

(define-extern *generic-debug* generic-debug)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-cpu-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++shadow-cpu-h:shadow-flags
(defenum shadow-flags
  :bitfield #t
  :type int32
  (shdf00) ;; unused
  (disable-fade)
  (shdf02) ;; only set, never used.
  (shdf03)
  (shdf04) ;; unused
  (disable-draw)
  (shdf06)
  (shdf07)
  (shdf08)
  )
;; ---shadow-cpu-h:shadow-flags

(deftype shadow-settings (structure)
  "Settings used to draw a shadow."
  ((center        vector :inline :offset-assert 0 :score -1)
   (flags         shadow-flags   :offset 12)
   (shadow-dir    vector :inline :offset-assert 16)
   (dist-to-locus float          :offset 28)
   (bot-plane     plane  :inline :offset-assert 32)
   (top-plane     plane  :inline :offset-assert 48)
   (fade-vec      vector :inline :offset 64 :score -1) ;; added
   (fade-dist     float          :offset 64)
   (fade-start    float          :offset 68)
   (dummy-2       int32          :offset 72)
   (shadow-type   int32          :offset 76 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shadow-control (basic)
  ((settings shadow-settings :inline :offset-assert 16)
   )
  :method-count-assert 15
  :size-assert         #x60
  :flag-assert         #xf00000060
  (:methods
    (new (symbol type float float float vector float float) _type_) ;; 0
    (enable-draw (shadow-control) int) ;; 9
    (disable-draw (shadow-control) int) ;; 10
    (set-top-plane-offset (shadow-control float) int) ;; 11
    (set-bottom-plane-offset (shadow-control float) int) ;; 12
    (probe-line-for-shadow (_type_ vector float float float) none) ;; 13
    (shadow-control-method-14 (_type_ vector vector float float float) none) ;; 14
    )
  )

(deftype shadow-data (structure)
  "DMA data for the shadow renderer."
  ((dma-unpack-template dma-packet :inline :offset-assert 0)
   (dma-cnt             dma-tag            :offset-assert 16) ;; dma-tag
   (vif-nop             vif-tag            :offset-assert 24) ;; guessed by decompiler
   (vif-unpack-v4-8     vif-tag            :offset-assert 28) ;; guessed by decompiler
   (pdc                 basic              :offset-assert 32)
   (dist                float              :offset-assert 36)
   (waits               uint32             :offset-assert 40)
   (inside-volume?      uint32             :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype shadow-work (structure)
  ((shadow-data shadow-data :inline :offset-assert 0)
   (inbuf       uint128     600     :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x25b0
  :flag-assert         #x9000025b0
  )

(declare-type shadow-vu1-constants structure)

(deftype shadow-bucket (structure)
  ((first        pointer               :offset-assert 0) ;; guessed by decompiler
   (next         pointer               :offset-assert 4) ;; guessed by decompiler
   (bucket-id    bucket-id             :offset-assert 8)
   (shadow-color rgba                  :offset-assert 12) ;; guessed by decompiler
   (constants    shadow-vu1-constants  :offset-assert 16) ;; guessed by decompiler
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype shadow-globals (structure)
  ((num-buckets uint32                  :offset-assert 0)
   (cur-bucket  uint32                  :offset-assert 4)
   (bucket      shadow-bucket 3 :inline :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(deftype shadow-vertex (structure)
  ((x      float  :offset-assert 0)
   (y      float  :offset-assert 4)
   (z      float  :offset-assert 8)
   (weight float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype shadow-matrix-ref (structure)
  ((joint-0 uint8  :offset-assert 0)
   (joint-1 uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype shadow-edge (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (tri-0 uint8  :offset-assert 2)
   (tri-1 uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype shadow-tri (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (ind-2 uint8  :offset-assert 2)
   (faces uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype shadow-frag-header (structure)
  ((qwc-data         uint32  :offset-assert 0)
   (num-joints       uint32  :offset-assert 4)
   (num-verts        uint16  :offset-assert 8)
   (num-twos         uint16  :offset-assert 10)
   (num-single-tris  uint16  :offset-assert 12)
   (num-single-edges uint16  :offset-assert 14)
   (num-double-tris  uint16  :offset-assert 16)
   (num-double-edges uint16  :offset-assert 18)
   (ofs-verts        uint32  :offset-assert 20)
   (ofs-refs         uint32  :offset-assert 24)
   (ofs-single-tris  uint32  :offset-assert 28)
   (ofs-single-edges uint32  :offset-assert 32)
   (ofs-double-tris  uint32  :offset-assert 36)
   (ofs-double-edges uint32  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype shadow-frag-ref (structure)
  ((header shadow-frag-header  :offset-assert 0)
   (qwc    uint32              :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype shadow-geo (art-element)
  "The low poly model used for drawing the shadow."
  ((version       uint32                   :offset 28)
   (total-size    uint32                   :offset 32)
   (total-qwc     uint32                   :offset-assert 48)
   (num-joints    uint32                   :offset-assert 52)
   (num-fragments uint32                   :offset-assert 56)
   (frags         shadow-frag-ref :inline :dynamic :offset-assert 60) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x3c
  :flag-assert         #xe0000003c
  )

(define-extern *shadow-globals* shadow-globals)
(define-extern *shadow* symbol)
(define-extern *shadow-object* symbol)
(define-extern *shadow-debug* symbol)
(define-extern *shadow-dma-buf* dma-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-vu1-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prim-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern process-drawable-art-error (state string process-drawable))

(deftype prim-vertex (structure)
  "Vertex for the prim renderer. These vertices are generated by
   some special effect code, then sent to the prim renderer to be drawn."
  ((stq    vector :inline :offset-assert 0)
   (nokick uint32         :offset-assert 8 :overlay-at (-> stq z))
   (col    rgba         :offset-assert 12 :overlay-at (-> stq w) :score 1)
   (pos    vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype prim-base (basic)
  "Base class for prim-strip."
  ()
  :method-count-assert 10
  :size-assert         #x4
  :flag-assert         #xa00000004
  (:methods
    (prim-base-method-9 () none) ;; 9
    )
  )

(defenum prim-flags
  :type uint32
  :bitfield #t
  (pf0 0) ;; set by default
  (pf1 1) ;; set by default
  (pf2 2)
  (pf3 3)
  (pf4 4)
  (no-texture-name 5) ;; only has the ID.
  )

(deftype prim-strip (prim-base)
  "A collection of vertices, all with the same texture and draw settings.
   These are owned by the thing submitting to prim, not the prim renderer itself."
  ((flags               prim-flags       :offset-assert 4)
   (tex-name            basic            :offset-assert 8)
   (num-verts           uint16           :offset-assert 12)
   (allocated-num-verts uint16           :offset-assert 14)
   (tex-id              texture-id           :offset-assert 16)
   (adnops              gs-adcmd 2 :inline        :offset-assert 32)
   (data0               gs-test          :offset 32)
   (reg0                gs-reg64         :offset 40)
   (data1               gs-test          :offset 48)
   (reg1                gs-reg64         :offset 56)
   (clamp               gs-clamp           :offset-assert 64)
   (alpha               gs-alpha           :offset-assert 72)
   (bucket              bucket-id          :offset-assert 80)
   (sink                uint32           :offset-assert 84)
   (level               basic            :offset-assert 88)
   (texture-index       uint32           :offset-assert 92)
   (data                prim-vertex :inline :dynamic :offset-assert 96)
   )
  :method-count-assert 11
  :size-assert         #x60
  :flag-assert         #xb00000060
  (:methods
    (new "Allocate a new prim-strip and room for vertices. The texture can be specified by name or ID."
         (symbol type int texture-id string) _type_)
    (prim-strip-method-10 (_type_ draw-control) none) ;; 10
    )
  )

(deftype prim-sink (structure)
  ((vertex-count  uint8  :offset-assert 0)
   (control-count uint8  :offset-assert 1)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

(deftype prim-work (structure)
  ((vertex-tmpl  dma-packet      3  :inline     :offset-assert 0)
   (control-tmpl dma-packet      2  :inline     :offset-assert 48)
   (giftag       generic-gif-tag :inline :offset-assert 80)
   (call-scissor dma-packet      :inline :offset-assert 96)
   (call-noclip  dma-packet      :inline :offset-assert 112)
   (shader       adgif-shader    :inline :offset-assert 128)
   (mask         vector4w        :inline :offset-assert 208)
   (in-verts     int32                   :offset-assert 224)
   (num-verts    int32                   :offset-assert 228)
   (vert-ptr     prim-vertex             :offset-assert 232)
   (sinks        prim-sink         68 :inline     :offset-assert 236)
   )
  :method-count-assert 10
  :size-assert         #x52c
  :flag-assert         #xa0000052c
  (:methods
    (prim-work-method-9 () none) ;; 9
    )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memcard-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mc-handle (int32)
  ()
  )

(deftype mc-file-info (structure)
  "Data stored in a save file."
  ((present               int32      :offset-assert 0)
   (blind-data            float   16 :offset-assert 4) ;; guessed by decompiler
   (blind-data-int8       int8    64 :offset 4) ;; guessed by decompiler
   (level-index           int32      :offset 4)
   (gem-count             float      :offset 8)
   (skill-count           float      :offset 12)
   (completion-percentage float      :offset 16)
   (minute                uint8      :offset 24)
   (hour                  uint8      :offset 25)
   (week                  uint8      :offset 26)
   (day                   uint8      :offset 27)
   (month                 uint8      :offset 28)
   (year                  uint8      :offset 29)
   (language              uint8      :offset 30)
   (game-time0            uint32     :offset 36)
   (game-time1            uint32     :offset 40)
   (purchase-secrets      uint32     :offset 44)
   (secrets               uint32     :offset 52)
   (features              uint32     :offset 60)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype mc-slot-info (structure)
  "Data about a memory card slot."
  ((handle       mc-handle      :offset-assert 0)
   (known        int32          :offset-assert 4)
   (formatted    int32          :offset-assert 8)
   (inited       int32          :offset-assert 12)
   (last-file    int32          :offset-assert 16)
   (mem-required int32          :offset-assert 20)
   (mem-actual   int32          :offset-assert 24)
   (file         mc-file-info 4 :inline :offset-assert 28) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12c
  :flag-assert         #x90000012c
  )

;; +++memcard-h:mc-status-code
(defenum mc-status-code
  :type uint32
  (busy 0)
  (ok 1)
  (bad-handle 2)
  (format-failed 3)
  (internal-error 4)
  (write-error 5)
  (read-error 6)
  (new-game 7)
  (no-memory 8)
  (no-card 9)
  (no-last 10)
  (no-format 11)
  (no-file 12)
  (no-save 13)
  (no-space 14)
  (bad-version 15)
  (no-process 16)
  (no-auto-save 17)
  )
;; ---memcard-h:mc-status-code

(define-extern mc-run (function none))
(define-extern mc-format (function int mc-status-code))
(define-extern mc-unformat (function int mc-status-code))
(define-extern mc-create-file (function int uint mc-status-code))
(define-extern mc-save (function int int pointer int mc-status-code))
(define-extern mc-load (function int int pointer mc-status-code))
(define-extern mc-sync "Synchronize the memory card state." (function int))
(define-extern mc-get-slot-info (function int mc-slot-info none))
(define-extern show-mc-info "Display the memory card debug text." (function dma-buffer none))
(define-extern mc-check-result (function mc-status-code))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-info-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype actor-id (uint32)
  ()
  )

;; +++game-info-h:highscore-flags
(defenum highscore-flags
  :bitfield #t
  :type uint8
  (time)
  (hf1 1)
  (hf2 2)
  (hf3 3)
  (hf4 4)
  (hf5 5)
  (hf6 6)
  (hf7 7)
  )
;; ---game-info-h:highscore-flags

(deftype highscore-info (structure)
  ((flags        highscore-flags   :offset-assert 0)
   (award-scores float 3 :offset-assert 4)
   (bronze-score float   :offset 4)
   (silver-score float   :offset 8)
   (gold-score   float   :offset 12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (get-rank (_type_ float) int) ;; 9
    )
  )

(deftype level-buffer-state (structure)
  ((name          symbol  :offset-assert 0) ;; guessed by decompiler
   (display?      symbol  :offset-assert 4) ;; guessed by decompiler
   (force-vis?    symbol  :offset-assert 8) ;; guessed by decompiler
   (force-inside? symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype level-buffer-state-small (structure)
  ((name     symbol :offset-assert 0)
   (display? symbol :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype load-state (basic)
  ((want            level-buffer-state 10 :inline :offset-assert 4) ;; guessed by decompiler
   (want-exp        level-buffer-state 10 :inline :offset-assert 164)
   (target          level-buffer-state 10 :inline :offset-assert 324)
   (want-sound      sound-bank-state   3  :inline :offset-assert 484) ;; guessed by decompiler
   (want-exp-sound  sound-bank-state   6  :inline :offset-assert 508)
   (target-sound    sound-bank-state   6  :inline :offset-assert 556)
   (vis-nick        symbol                        :offset-assert 604) ;; guessed by decompiler
   (command-list    pair                          :offset-assert 608) ;; guessed by decompiler
   (object-name     string             256        :offset-assert 612) ;; guessed by decompiler
   (object-status   basic              256        :offset-assert 1636) ;; guessed by decompiler
   (update-callback basic                         :offset-assert 2660)
   )
  :method-count-assert 22
  :size-assert         #xa68
  :flag-assert         #x1600000a68
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (load-state-method-9 () none) ;; 9 ;; (reset! (_type_) _type_)
    (load-state-method-10 () none) ;; 10 ;; (update! (_type_) int)
    (load-state-method-11 () none) ;; 11 ;; (want-levels (_type_ (pointer symbol)) int)
    (want-sound-banks (_type_ (pointer symbol)) none) ;; 12
    (load-state-method-13 () none) ;; 13 ;; (want-display-level (_type_ symbol symbol) int)
    (load-state-method-14 () none) ;; 14 ;; (want-vis-level (_type_ symbol) none)
    (load-state-method-15 () none) ;; 15 ;; (want-force-vis (_type_ symbol symbol) int)
    (load-state-method-16 () none) ;; 16 ;; (want-force-inside (_type_ symbol symbol) none)
    (execute-commands-up-to (_type_ float) none) ;; 17
    (backup-load-state-and-set-cmds (_type_ pair) int) ;; 18
    (restore-load-state-and-cleanup (_type_) int) ;; 19
    (restore-load-state (_type_) int) ;; 20
    (load-state-method-21 (_type_) none) ;; 21 ;; (add-borrow-levels (_type_) none)
    )
  )

;; +++game-info-h:continue-flags
;; TODO copied from jak 2
(defenum continue-flags
  :type uint32
  :bitfield #t
  ;(continue-flag-0 0)
  (scene-wait 1)
  (change-continue 2)
  (no-auto 3)
  (no-blackout 4)
  (game-start 5)
  (demo-end 6)
  (warp-gate 7)
  (demo 8)
  (intro 9)
  (hero-mode 10)
  (demo-movie 11)
  (title 12)
  (title-movie 13)
  (continue-flag-14 14)
  (copy-entity-pos 15)
  (continue-flag-16 16)
  (test 17)
  (record-path 18)
  (pilot 19)
  (pilot-dax 20)
  (record-sig 21)
  (indax 22)
  (cf23 23)
  (cf24 24)
  (cf25 25)
  (cf26 26)
  (cf27 27)
  (cf28 28)
  (cf29 29)
  (cf30 30)
  (cf31 31)
  )
;; ---game-info-h:continue-flags

(deftype continue-point (basic)
  ((name         string                     :offset-assert 4) ;; guessed by decompiler
   (level        symbol                     :offset-assert 8) ;; guessed by decompiler
   (flags        continue-flags             :offset-assert 12) ;; guessed by decompiler
   (trans        vector             :inline :offset-assert 16)
   (camera-trans vector             :inline :offset-assert 32)
   (quat         vector4h           :inline :offset-assert 48) ;; vector :inline
   (camera-rot   int16            9         :offset-assert 56) ;; guessed by decompiler
   (on-goto      object                     :offset-assert 76) ;; guessed by decompiler
   (vis-nick     symbol                     :offset-assert 80) ;; guessed by decompiler
   (vehicle-type uint8                      :offset-assert 84)
   (want-count   int8                       :offset-assert 85)
   (want         (inline-array level-buffer-state-small) :offset-assert 88) ;; guessed by decompiler
   (want-sound   symbol           3         :offset-assert 92) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x68
  :flag-assert         #xc00000068
  ;; field on-goto uses ~A with a signed load.
  (:methods
    (debug-draw (_type_) int) ;; 9
    (continue-point-method-10 (_type_ load-state) continue-point) ;; 10
    (move-camera! (_type_) none) ;; 11
    )
  )

;; +++game-info-h:pickup-type
(defenum pickup-type
  :type int32
  (none 0)
  (eco-yellow 1)
  (eco-red 2)
  (eco-blue 3)
  (eco-dark 4)
  (eco-green 5)
  (eco-pill-green 6)
  (eco-pill-dark 7)
  (eco-pill-light 8)
  (eco-pill-random 9)
  (money 10)
  (fuel-cell 11)
  (buzzer 12)
  (darkjak 13)
  (lightjak 14)
  (ammo-yellow 15)
  (ammo-red 16)
  (ammo-blue 17)
  (ammo-dark 18)
  (shield 19)
  (health 20)
  (trick-point 21)
  (trick-judge 22)
  (gem 23)
  (skill 24)
  (karma 25)
  (gun-red-1 26)
  (gun-red-2 27)
  (gun-red-3 28)
  (gun-yellow-1 29)
  (gun-yellow-2 30)
  (gun-yellow-3 31)
  (gun-blue-1 32)
  (gun-blue-2 33)
  (gun-blue-3 34)
  (gun-dark-1 35)
  (gun-dark-2 36)
  (gun-dark-3 37)
  (board 38)
  (pass-red 39)
  (pass-green 40)
  (pass-yellow 41)
  (pass-blue 42)
  (ammo-random 43)
  (health-max 44)
  (light-eco-crystal 45)
  (dark-eco-crystal 46)
  (pass-slumb-genb 47)
  (ammo-light-random 48)
  (ammo-dark-light-random 49)
  (light-random 50)
  )
;; ---game-info-h:pickup-type

;; +++game-info-h:game-items
(defenum game-items
  :type uint64
  :bitfield #t
  (amulet0 0)
  (amulet1 1)
  (amulet2 2)
  (pass-wascity 3)
  (seal-of-mar 4)
  (pass-factory 5)
  (artifact-holocube 6)
  (artifact-quantum-reflector 7)
  (artifact-prism 8)
  (artifact-beam-generator 9)
  (artifact-time-map 10)
  (light-eco-crystal0 11)
  (light-eco-crystal1 12)
  (light-eco-crystal2 13)
  (light-eco-crystal3 14)
  (dark-eco-crystal0 15)
  (dark-eco-crystal1 16)
  (dark-eco-crystal2 17)
  (dark-eco-crystal3 18)
  (item19 19)
  (item20 20)
  (item21 21)
  (item22 22)
  (item23 23)
  (item24 24)
  (item25 25)
  (item26 26)
  (item27 27)
  (item28 28)
  (item29 29)
  (item30 30)
  (item31 31)
  )
;; ---game-info-h:game-items

(declare-type entity-perm-array inline-array-class)
(declare-type game-save basic)
(declare-type entity-perm structure)
(deftype game-info (basic)
  ((mode                   symbol                    :offset-assert 4)
   (save-name              string                    :offset-assert 8)
   (life                   float                     :offset-assert 12)
   (life-max               float                     :offset-assert 16)
   (money                  float                     :offset-assert 20)
   (money-total            float                     :offset-assert 24)
   (money-per-level        uint8             32      :offset-assert 28)
   (deaths-per-level       uint8             32      :offset-assert 60)
   (buzzer-total           float                     :offset-assert 92)
   (fuel                   float                     :offset-assert 96)
   (gem                    float                     :offset-assert 100)
   (gem-total              float                     :offset-assert 104)
   (skill                  float                     :offset-assert 108)
   (skill-total            float                     :offset-assert 112)
   (skill-high-watermark   float                     :offset-assert 116)
   (light-crystal          float                     :offset-assert 120)
   (dark-crystal           float                     :offset-assert 124)
   (karma                  float                     :offset-assert 128)
   (eco-pill-dark          float                     :offset-assert 132)
   (eco-pill-dark-total    float                     :offset-assert 136)
   (eco-pill-light         float                     :offset-assert 140)
   (eco-pill-light-total   float                     :offset-assert 144)
   (features               game-feature              :offset-assert 152)
   (debug-features         game-feature              :offset-assert 160)
   (old-features           game-feature              :offset-assert 168)
   (items                  game-items                :offset-assert 176)
   (debug-items            game-items                :offset-assert 184)
   (old-items              game-items                :offset-assert 192)
   (secrets                game-secrets              :offset-assert 200)
   (purchase-secrets       game-secrets              :offset-assert 208)
   (gun-type               pickup-type               :offset-assert 216)
   (gun-ammo               float             4       :offset-assert 220)
   (shield                 float                     :offset-assert 236)
   (vehicles               game-vehicles             :offset-assert 240)
   (debug-vehicles         game-vehicles             :offset-assert 248)
   (old-vehicles           game-vehicles             :offset-assert 256)
   (score                  float                     :offset-assert 264)
   (score-owner            handle                    :offset-assert 272)
   (timer                  time-frame                :offset-assert 280)
   (timer-owner            handle                    :offset-assert 288)
   (timer-flash            symbol                    :offset-assert 296)
   (counter                float                     :offset-assert 300)
   (counter-flash          symbol                    :offset-assert 304)
   (health-bar             float                     :offset-assert 308)
   (health-bar-owner       handle                    :offset-assert 312)
   (enemies-killed         float                     :offset-assert 320)
   (civilians-killed       float                     :offset-assert 324)
   (marauders-killed       float                     :offset-assert 328)
   (shots-fired            float             4       :offset-assert 332)
   (shots-hit              float             4       :offset-assert 348)
   (crates-opened          float                     :offset-assert 364)
   (health-collected       float                     :offset-assert 368)
   (board-time             time-frame                :offset-assert 376)
   (attack-id              uint32                    :offset-assert 384)
   (perm-list              entity-perm-array         :offset-assert 388)
   (task-perm-list         entity-perm-array         :offset-assert 392)
   (current-continue       continue-point            :offset-assert 396)
   (last-continue          continue-point            :offset-assert 400)
   (play-list              (array game-task-info)    :offset-assert 404)
   (sub-task-list          (array game-task-node-info) :offset-assert 408)
   (mission-list           (array game-task-node-info) :offset-assert 412)
   (task-node-commands     (array uint8)             :offset-assert 416)
   (task-node-exclusive    (array uint16)            :offset-assert 420)
   (task-counter           uint32                    :offset-assert 424)
   (unknown-arr4           (array uint16)            :offset-assert 428)
   (level-opened           uint8             32      :offset-assert 432)
   (total-deaths           int32                     :offset-assert 464)
   (continue-deaths        int32                     :offset-assert 468)
   (task-deaths            int32                     :offset-assert 472)
   (total-trys             int32                     :offset-assert 476)
   (game-start-time        time-frame                :offset-assert 480)
   (continue-time          time-frame                :offset-assert 488)
   (death-time             time-frame                :offset-assert 496)
   (hit-time               time-frame                :offset-assert 504)
   (task-pickup-time       time-frame                :offset-assert 512)
   (task-complete-time     (array time-frame)        :offset-assert 520)
   (task-enter-times       (array time-frame)        :offset-assert 524)
   (task-in-times          (array time-frame)        :offset-assert 528)
   (death-pos              vector-array              :offset-assert 532)
   (stop-watch-start       time-frame                :offset-assert 536)
   (stop-watch-stop        time-frame                :offset-assert 544)
   (blackout-time          time-frame                :offset-assert 552)
   (letterbox-time         time-frame                :offset-assert 560)
   (hint-play-time         time-frame                :offset-assert 568)
   (display-text-time      time-frame                :offset-assert 576)
   (display-text-handle    handle                    :offset-assert 584)
   (death-movie-tick       int32                     :offset-assert 592)
   (want-auto-save         symbol                    :offset-assert 596)
   (auto-save-proc         handle                    :offset-assert 600)
   (auto-save-status       mc-status-code            :offset-assert 608)
   (auto-save-card         int32                     :offset-assert 612)
   (auto-save-which        int32                     :offset-assert 616)
   (auto-save-count        int32                     :offset-assert 620)
   (pov-camera-handle      handle                    :offset-assert 624)
   (other-camera-handle    handle                    :offset-assert 632)
   (controller             handle            2       :offset-assert 640)
   (race-timer             time-frame                :offset-assert 656)
   (race-current-lap-count int32                     :offset-assert 664)
   (race-total-lap-count   int32                     :offset-assert 668)
   (race-position          int32                     :offset-assert 672)
   (race-number-turbos     int32                     :offset-assert 676)
   (bot-health             float             3       :offset-assert 680)
   (demo-state             uint32                    :offset-assert 692)
   (wanted-flash           symbol                    :offset-assert 696)
   (distance               float                     :offset-assert 700)
   (kiosk-timeout          time-frame                :offset-assert 704)
   (pause-start-time       time-frame                :offset-assert 712)
   (game-score             (array float)             :offset-assert 720)
   (goal                   float                     :offset-assert 724)
   (miss                   float                     :offset-assert 728)
   (miss-max               float                     :offset-assert 732)
   (task-start-time        (array time-frame)        :offset-assert 736)
   (live-eco-pill-count    int32                     :offset-assert 740)
   (live-gem-count         int32                     :offset-assert 744)
   (air-supply             float                     :offset-assert 748)
   (homing-beacon          int32                     :offset-assert 752)
   (dark-eco-pickup        int32                     :offset-assert 756)
   (green-eco-pickup       int32                     :offset-assert 760)
   (health-bar-vehicle     float                     :offset-assert 764)
   (dust-storm             handle                    :offset-assert 768)
   (flut-count             int32                     :offset-assert 776)
   (death-resetter         resetter-spec     :inline :offset-assert 780)
   (current-vehicle        uint8                     :offset-assert 796)
   (vehicle-turbo-ready    float                     :offset-assert 800)
   (percent-complete       float                     :offset-assert 804)
   )
  :method-count-assert 35
  :size-assert         #x328
  :flag-assert         #x2300000328
  (:methods
    (initialize! (_type_ symbol game-save string resetter-spec) _type_) ;; 9 ;; (initialize! (_type_ symbol game-save string) _type_)
    (give (_type_ symbol float handle) float) ;; 10
    (task-complete? (_type_ game-task) symbol) ;; 11
    (subtask-index-by-name (_type_ string) int) ;; 12
    (actor-perm (_type_ actor-id) entity-perm) ;; 13 ;; (set-subtask-hook! (_type_ game-task-node int function) function)
    (task-perm-by-index (_type_ int) entity-perm) ;; 14
    (copy-perms-from-level! (_type_ level) int) ;; 15
    (copy-perms-to-level! (_type_ level) int) ;; 16
    (debug-inspect (_type_ symbol) _type_) ;; 17
    (get-current-continue-forced (_type_) continue-point) ;; 18
    (get-continue-by-name (_type_ string) continue-point) ;; 19
    (set-continue! (_type_ basic symbol) continue-point) ;; 20
    (game-info-method-21 (_type_) none) ;; 21
    (save-game (_type_ game-save string) game-save) ;; 22 ;; (game-info-method-22 (_type_) int)
    (load-game (_type_ game-save) game-save) ;; 23
    (you-suck-stage (_type_ symbol int) int) ;; 24
    (you-suck-scale (_type_ symbol int) float) ;; 25
    (get-next-attack-id! (_type_) uint) ;; 26
    (game-info-method-27 (_type_ game-score float) int) ;; 27
    (get-game-score-ref (_type_ int) (pointer float)) ;; 28
    (game-info-method-29 (_type_ int) int) ;; 29
    (get-highscore-rank (_type_ int float) int) ;; 30
    (game-info-method-31 (_type_ int int) float) ;; 31
    (calculate-percentage (_type_) float) ;; 32
    (inc-death-count! (_type_) none) ;; 33
    (get-max-ammo-for-gun (_type_ pickup-type) float) ;; 34
    )
  )

(define-extern *GAME-bank* game-bank)
(define-extern *game-info* game-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gui-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++gui-h:gui-action
(defenum gui-action
  :type uint8
  :bitfield #f
  (none 0)
  (queue 1)
  (play 2)
  (playing 3)
  (stop 4)
  (stopping 5)
  (abort 6)
  (hide 7)
  (hidden 8)
  (fade 9)
  )
;; ---gui-h:gui-action

;; +++gui-h:gui-status
(defenum gui-status
  :type uint8 ;; not sure
  :bitfield #f
  (unknown 0)
  (pending 1)
  (ready 2)
  (active 3)
  (hide 4)
  (stop 5)
  )
;; ---gui-h:gui-status

;; +++gui-h:gui-channel
(defenum gui-channel
  :type uint8
  :bitfield #f
  (none 0)
  (art-load 16)
  (art-load-next 17)
  (background 18)
  (jak 19)
  (daxter 20)
  (sig 21)
  (ashelin 22)
  (beast 23)
  (jak-effect-1 24)
  (pecker 25)
  (jak-effect-2 26)
  (gun 27)
  (hal 28)
  (voicebox 29)
  (guard 30)
  (jak-mode 31)
  (alert 32)
  (citizen 33)
  (bbush 34)
  (rider 35)
  (task 36)
  (voice 47)
  (movie 64)
  (blackout 65)
  (query 66)
  (message 67)
  (notice 68)
  (subtitle 69)
  (supertitle 70)
  (notice-low 71)
  (resetter 72)
  (progress 73)
  (freeze 74)
  (subtitle-pc 78) ;; custom
  (screen 79)
  (hud-upper-right 80)
  (hud-upper-left 81)
  (hud-lower-right 82)
  (hud-lower-left 83)
  (hud-lower-left-1 84)
  (hud-lower-left-2 85)
  (hud-center-right 86)
  (hud-center-left 87)
  (hud-middle-right 88)
  (hud-middle-left 89)
  (hud-upper-center 90)
  (hud-upper-center-2 91)
  (hud-lower-center 92)
  (hud-auto-save 93)
  (hud-auto-save-message 94)
  (hud 95)
  (max 96)
  )
;; ---gui-h:gui-channel

;; +++gui-h:gui-connection-flags
(defenum gui-connection-flags
  :type uint8
  :bitfield #t
  (gcf0 0)
  (gcf1 1)
  (fo-curve 2)
  (fo-min 3)
  (fo-max 4)
  (volume 5)
  )
;; ---gui-h:gui-connection-flags

(deftype gui-connection (connection)
  ((priority   float                :offset 16 :score 1)
   (action     gui-action           :offset 20)
   (channel    gui-channel          :offset 21)
   (anim-part  uint8                :offset 22)
   (flags      gui-connection-flags :offset 23)
   (name       string               :offset 24)
   (id         sound-id             :offset 28)
   (handle     handle               :offset 0)
   (time-stamp time-frame           :offset 8)
   (hold-time  time-frame           :offset-assert 32)
   (fo-min     int16                :offset-assert 40)
   (fo-max     int16                :offset-assert 42)
   (fo-curve   int8                 :offset-assert 44)
   (fade       uint8                :offset-assert 45)
   (volume     int16                :offset-assert 46)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  ;; field param1 uses ~A with a signed load. field param2 uses ~A with a signed load. field param3 uses ~A with a signed load.
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ambient-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++ambient-h:talker-flags
(defenum talker-flags
  :type uint16
  :bitfield #t
  (tf0 0)
  (tf1 1)
  (tf2 2)
  (tf3 3)
  (tf4 4)
  (tf5 5)
  (tf6 6)
  (tf7 7)
  (tf8 8)
  )
;; ---ambient-h:talker-flags

(deftype talker-speech-class (structure)
  "Contains metadata about a voice line or hint text being played/displayed."
  ((name          string       :offset-assert 0)
   (channel       gui-channel  :offset-assert 4)
   (flags         talker-flags :offset-assert 6)
   (speech        uint16       :offset-assert 8)
   (text-duration uint16       :offset-assert 10 :decomp-as time-frame)
   (delay         uint16       :offset-assert 12 :decomp-as time-frame)
   (pos           uint16       :offset-assert 14)
   (neg           uint16       :offset-assert 16)
   (text-message  text-id      :offset-assert 20)
   (on-close      pair         :offset-assert 24)
   (camera        string       :offset-assert 28)
   )
  :pack-me
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  ;; field on-close uses ~A with a signed load.
  (:methods
    (talker-speech-class-method-9 (_type_) symbol) ;; 9
    (play-communicator-speech! (_type_) none) ;; 10
    (talker-speech-class-method-11 (_type_) none) ;; 11
    (talker-speech-class-method-12 (_type_ int) none) ;; 12
    (talker-speech-class-method-13 (_type_ int) none) ;; 13
    )
  )

(deftype talker (process)
  ((trans          vector              :inline :offset-assert 128)
   (message        talker-speech-class         :offset-assert 144)
   (total-time     time-frame                  :offset-assert 152) ;; time-frame
   (total-off-time time-frame                  :offset-assert 160) ;; time-frame
   (start-time     time-frame                  :offset-assert 168) ;; time-frame
   (state-time     time-frame                  :offset-assert 176) ;; time-frame
   (voicebox       handle                      :offset-assert 184) ;; handle
   (voice-id       sound-id                    :offset-assert 192) ;; guessed by decompiler
   (message-id     sound-id                    :offset-assert 196) ;; guessed by decompiler
   (region         region                      :offset-assert 200)
   (interp         float                       :offset-assert 204)
   (save?          symbol                      :offset-assert 208) ;; guessed by decompiler
   (grab?          symbol                      :offset-assert 212)
   )
  :method-count-assert 18
  :size-assert         #xd8
  :flag-assert         #x12006000d8
  (:state-methods
    idle ;; 14
    active ;; 15
    exit ;; 16
    )
  (:methods
    (talker-method-17 (_type_) none) ;; 17
    )
  )

(define-extern *talker-speech* (inline-array talker-speech-class))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; speech-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++speech-h:speech-type-flag
(defenum speech-type-flag
  :type uint8
  :bitfield #t
  (random-order 0)
  (linked-next 1)
  (skip-first-time 2)
  (first-time 3)
  )
;; ---speech-h:speech-type-flag

(deftype speech-type-info (structure)
  ((channel         uint8             :offset-assert 0)
   (flags           speech-type-flag  :offset-assert 1)
   (priority        int8              :offset-assert 2)
   (delay-pre-time  uint16            :offset-assert 4 :decomp-as time-frame)
   (request-timeout uint16            :offset-assert 6 :decomp-as time-frame)
   (min-delay       uint16            :offset-assert 8 :decomp-as time-frame)
   (max-delay       uint16            :offset-assert 10 :decomp-as time-frame)
   (delay           uint16            :offset-assert 12 :decomp-as time-frame)
   (play-index      int16             :offset-assert 14)
   (list            (array string)    :offset-assert 16) ;; guessed by decompiler
   (time            uint64            :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; field speech-type-flag is likely a value type.
  )

;; +++speech-h:speech-type
(defenum speech-type
  :type int8
  (none 0)
  (guard-generic-battle 1)
  (guard-generic-battle-b 2)
  (guard-battle-victory 3)
  (guard-battle-victory-b 4)
  (guard-change-targets 5)
  (guard-change-targets-b 6)
  (guard-go-hostile 7)
  (guard-go-hostile-b 8)
  (guard-hit 9)
  (guard-hit-b 10)
  (guard-witness-death 11)
  (guard-witness-death-b 12)
  (guard-chatter 13)
  (guard-chatter-b 14)
  (guard-chatter-jak 15)
  (guard-chatter-jak-b 16)
  (guard-bumped-by-jak 17)
  (guard-bumped-by-jak-b 18)
  (civ-m-ambient 19)
  (civ-m-alert 20)
  (civ-m-cower 21)
  (civ-m-touched-by-player 22)
  (civ-m-shot-by-player 23)
  (civ-m-avoiding-player-vehicle 24)
  (civ-m-hit-by-player-vehicle 25)
  (civ-m-player-stealing-vehicle 26)
  (civ-f-ambient 27)
  (civ-f-alert 28)
  (civ-f-cower 29)
  (civ-f-touched-by-player 30)
  (civ-f-shot-by-player 31)
  (civ-f-avoiding-player-vehicle 32)
  (civ-f-hit-by-player-vehicle 33)
  (race-jak-start 34)
  (race-jak-lap 35)
  (race-jak-last-lap 36)
  (race-jak-hit 37)
  (race-jak-got-hit 38)
  (race-jak-ambient 39)
  (race-jak-pass 40)
  (race-jak-jump 41)
  (race-jak-win 42)
  (race-daxter-start 43)
  (race-daxter-lap 44)
  (race-daxter-last-lap 45)
  (race-daxter-hit 46)
  (race-daxter-got-hit 47)
  (race-daxter-ambient 48)
  (race-daxter-pass 49)
  (race-daxter-jump 50)
  (race-daxter-win 51)
  (race-errol-start 52)
  (race-errol-last-lap 53)
  (race-errrol-hit 54)
  (race-errol-got-hit 55)
  (race-errol-ambient 56)
  (race-errol-pass 57)
  (race-errol-got-passed 58)
  (race-errol-win 59)
  (race-errol-lose 60)
  )
;; ---speech-h:speech-type

(deftype speech-request (structure)
  ((handle      handle      :offset-assert 0) ;; handle
   (time        time-frame  :offset-assert 8) ;; time-frame
   (priority    float       :offset-assert 16)
   (speech-type speech-type :offset-assert 20) ;; speech-type
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x15
  :flag-assert         #x900000015
  )

;; +++speech-h:speech-channel-flag
(defenum speech-channel-flag
  :type uint8
  :bitfield #t
  (disable 0)
  )
;; ---speech-h:speech-channel-flag

(deftype speech-channel (structure)
  ((flags        speech-channel-flag                :offset-assert 0)
   (gui-channel  gui-channel                        :offset-assert 1) ;; gui-channel
   (delay        uint16                             :offset-assert 2 :decomp-as time-frame)
   (id           sound-id                           :offset-assert 4) ;; guessed by decompiler
   (update-time  time-frame                         :offset-assert 8) ;; time-frame
   (start-time   time-frame                         :offset-assert 16) ;; time-frame
   (end-time     time-frame                         :offset-assert 24) ;; time-frame
   (request      speech-request             :inline :offset-assert 32)
   (last-request speech-request             :inline :offset-assert 56)
   (target-pos   vector                     :inline :offset-assert 80)
   (speech-table (pointer speech-type-info)         :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 15
  :size-assert         #x64
  :flag-assert         #xf00000064
  ;; field speech-channel-flag is likely a value type.
  (:methods
    (speech-channel-method-9 (_type_ process-drawable speech-type) int) ;; 9
    (speech-channel-method-10 (_type_ handle) none) ;; 10
    (speech-channel-method-11 (_type_) none) ;; 11 ;; (speech-channel-method-11 (_type_) none)
    (reset-channel! (_type_) none) ;; 12
    (init! (_type_) none) ;; 13 ;; (speech-channel-method-13 (_type_) none)
    (speech-channel-method-14 (_type_ speech-type float) none) ;; 14
    )
  )

(deftype speech-control (structure)
  ((channel-array speech-channel   2 :inline :offset-assert 0) ;; guessed by decompiler
   (speech-table  speech-type-info 61 :offset-assert 224) ;; guessed by decompiler
   )
  :method-count-assert 18
  :size-assert         #x1d4
  :flag-assert         #x12000001d4
  (:methods
    (speech-table-reset! (_type_) none) ;; 9
    (speech-table-set! (_type_ speech-type speech-type-info) none) ;; 10
    (speech-control-method-11 (_type_) none) ;; 11
    (speech-control-method-12 (_type_ process-drawable speech-type) none) ;; 12
    (speech-control-method-13 (_type_ process-drawable speech-type int) none) ;; 13
    (speech-control-method-14 (_type_ handle) none) ;; 14
    (speech-control-method-15 (_type_) none) ;; 15
    (speech-control-method-16 (_type_) none) ;; 16
    (speech-control-method-17 (_type_ speech-type float) none) ;; 17
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype wind-vector (structure)
  ((wind-pos  vector4w :inline :offset-assert 0)
   (wind-vel  vector4w :inline :offset-assert 16)
   (stiffness float            :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype wind-work (basic)
  ((wind-array    vector 64 :inline :offset-assert 16) ;; guessed by decompiler
   (wind-normal   vector :inline :offset-assert 1040)
   (wind-temp     vector :inline :offset-assert 1056)
   (wind-force    float  64      :offset-assert 1072) ;; guessed by decompiler
   (wind-const    vector :inline :offset-assert 1328)
   (wind-time     uint32         :offset-assert 1344)
   (wait-to-vu0   uint32         :offset-assert 1348)
   (wait-to-spr   uint32         :offset-assert 1352)
   (wait-from-spr uint32         :offset-assert 1356)
   (spr-index     uint32         :offset-assert 1360)
   (count         uint32         :offset-assert 1364)
   (next-count    uint32         :offset-assert 1368)
   (last-count    uint32         :offset-assert 1372)
   (to-spr        uint32         :offset-assert 1376)
   (from-spr      uint32         :offset-assert 1380)
   (next-mem      uint32         :offset-assert 1384)
   (last-mem      uint32         :offset-assert 1388)
   (next-spr      uint32         :offset-assert 1392)
   (last-spr      uint32         :offset-assert 1396)
   (to-ptrs       uint32 3       :offset-assert 1400) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x584
  :flag-assert         #x900000584
  )

(deftype wind-dma (structure)
  ((buffer0 wind-vector 128 :inline :offset-assert 0) ;; guessed by decompiler
   (buffer1 wind-vector 128 :inline :offset-assert 4096) ;; guessed by decompiler
   (buffer2 wind-vector 128 :inline :offset-assert 8192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

(define-extern *wind-scales* (array uint8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prototype-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++prototype-h:prototype-flags
(defenum prototype-flags
  :bitfield #t
  :type uint16
  (disable     0) ;; set from debug menu, for debugging
  (tpage-alpha 2)
  (vanish      3)
  (visible     5) ;; set by prototypes-game-visible-set! to hide things on purpose
  (no-collide  6)
  (tpage-water 7)
  )
;; ---prototype-h:prototype-flags

(deftype prototype-bucket (basic)
  ((name                string           :offset-assert 4) ;; guessed by decompiler
   (flags               prototype-flags  :offset-assert 8) ;; prototype-flags
   (texture-masks-index uint16           :offset-assert 10)
   (in-level            uint16           :offset-assert 12)
   (utextures           uint16           :offset-assert 14)
   (geometry            drawable 4       :offset-assert 16) ;; guessed by decompiler
   (dists               vector   :inline :offset-assert 32)
   (rdists              vector   :inline :offset-assert 48)
   (near-plane          meters           :offset 32)
   (near-stiff          meters           :offset 36)
   (mid-plane           meters           :offset 40)
   (far-plane           meters           :offset 44)
   (rlength-near        float            :offset 48)
   (rlength-stiff       float            :offset 52)
   (rlength-mid         float            :offset 56)
   (stiffness           float            :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype prototype-bucket-shrub (prototype-bucket)
  ((next        uint32     4 :offset-assert 64) ;; guessed by decompiler
   (count       uint16     4 :offset-assert 80) ;; guessed by decompiler
   (mod-count   uint16     4 :offset-assert 88) ;; guessed by decompiler
   (last        dma-packet 4 :offset-assert 96) ;; guessed by decompiler
   (next-clear  uint128      :offset 64)
   (count-clear uint64       :offset 80)
   (last-clear  uint128      :offset 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype prototype-inline-array-shrub (drawable)
  ((length int16                    :offset 6)
   (data   prototype-bucket-shrub 1 :inline :offset 32) ;; guessed by decompiler
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x94
  :flag-assert         #x1100000094
  )

(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub  :offset-assert 4) ;; guessed by decompiler
   (wind-vectors                 uint32                        :offset-assert 8)
   (wind-count                   int32                         :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(declare-type prototype-tie drawable)
(declare-type collide-hash-fragment-array basic)

(deftype prototype-bucket-tie (prototype-bucket)
  ((next                        uint32                      12       :offset-assert 64) ;; guessed by decompiler
   (count                       uint16                      12       :offset-assert 112) ;; guessed by decompiler
   (frag-count                  uint8                       4        :offset-assert 136) ;; guessed by decompiler
   (index-start                 uint8                       4        :offset-assert 140) ;; guessed by decompiler
   (base-qw                     uint16                      4        :offset-assert 144) ;; guessed by decompiler
   (tie-rvanish                 float                                :offset-assert 152)
   (tie-vanish-far              float                                :offset-assert 156)
   (envmap-rfade                float                                :offset-assert 160)
   (envmap-fade-far             float                                :offset-assert 164)
   (envmap-shader               adgif-shader                         :offset-assert 168)
   (tint-color                  uint32                               :offset-assert 172)
   (collide-hash-fragment-array collide-hash-fragment-array          :offset-assert 176) ;; guessed by decompiler
   (tie-colors                  time-of-day-palette                  :offset-assert 180) ;; guessed by decompiler
   (data                        uint32                      :dynamic :offset-assert 184) ;; guessed by decompiler
   (color-index-qwc             uint32                      :dynamic :offset-assert 184) ;; guessed by decompiler
   (scissor-frag-count          uint8                                :offset 136)
   (near-frag-count             uint8                                :offset 137)
   (mid-frag-count              uint8                                :offset 138)
   (far-frag-count              uint8                                :offset 139)
   (scissor-index-start         uint8                                :offset 140)
   (near-index-start            uint8                                :offset 141)
   (mid-index-start             uint8                                :offset 142)
   (far-index-start             uint8                                :offset 143)
   (scissor-base-qw             uint16                               :offset 144)
   (near-base-qw                uint16                               :offset 146)
   (mid-base-qw                 uint16                               :offset 148)
   (far-base-qw                 uint16                               :offset 150)
   (tie-next                    uint32                      4        :offset 64) ;; guessed by decompiler
   (tie-scissor-next            uint32                               :offset 64)
   (tie-near-next               uint32                               :offset 68)
   (tie-mid-next                uint32                               :offset 72)
   (tie-far-next                uint32                               :offset 76)
   (trans-next                  uint32                      4        :offset 64) ;; guessed by decompiler
   (trans-scissor-next          uint32                      4        :offset 64) ;; guessed by decompiler
   (trans-near-next             uint32                               :offset 68)
   (trans-mid-next              uint32                               :offset 72)
   (trans-far-next              uint32                               :offset 76)
   (water-next                  uint32                      4        :offset 64) ;; guessed by decompiler
   (water-scissor-next          uint32                      4        :offset 64) ;; guessed by decompiler
   (water-near-next             uint32                               :offset 68)
   (water-mid-next              uint32                               :offset 72)
   (water-far-next              uint32                               :offset 76)
   (envmap-next                 uint32                      4        :offset 80) ;; guessed by decompiler
   (envmap-scissor-next         uint32                      4        :offset 80) ;; guessed by decompiler
   (envmap-near-next            uint32                               :offset 84)
   (envmap-mid-next             uint32                               :offset 88)
   (envmap-far-next             uint32                               :offset 92)
   (generic-next                uint32                      3        :offset 96) ;; guessed by decompiler
   (generic-near-next           uint32                               :offset 96)
   (generic-mid-next            uint32                               :offset 100)
   (generic-far-next            uint32                               :offset 104)
   (vanish-next                 uint32                               :offset 108)
   (tie-count                   uint16                      4        :offset 112) ;; guessed by decompiler
   (tie-scissor-count           uint16                               :offset 112)
   (tie-near-count              uint16                               :offset 114)
   (tie-mid-count               uint16                               :offset 116)
   (tie-far-count               uint16                               :offset 118)
   (trans-count                 uint16                      4        :offset 112) ;; guessed by decompiler
   (trans-scissor-count         uint16                               :offset 112)
   (trans-near-count            uint16                               :offset 114)
   (trans-mid-count             uint16                               :offset 116)
   (trans-far-count             uint16                               :offset 118)
   (water-count                 uint16                      4        :offset 112) ;; guessed by decompiler
   (water-scissor-count         uint16                               :offset 112)
   (water-near-count            uint16                               :offset 114)
   (water-mid-count             uint16                               :offset 116)
   (water-far-count             uint16                               :offset 118)
   (envmap-count                uint16                      4        :offset 120) ;; guessed by decompiler
   (envmap-scissor-count        uint16                               :offset 120)
   (envmap-near-count           uint16                               :offset 122)
   (envmap-mid-count            uint16                               :offset 124)
   (envmap-far-count            uint16                               :offset 126)
   (generic-count               uint16                      3        :offset 128) ;; guessed by decompiler
   (generic-near-count          uint16                               :offset 128)
   (generic-mid-count           uint16                               :offset 130)
   (generic-far-count           uint16                               :offset 132)
   (vanish-count                uint16                               :offset 134)
   (next-clear                  uint128                     3        :offset 64) ;; guessed by decompiler
   (count-clear                 uint64                      3        :offset 112) ;; guessed by decompiler
   ;; added
   (tie-geom                    prototype-tie       4        :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #xb8
  :flag-assert         #x9000000b8
  )

(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset 16) ;; NOTE - field added, not 100% positive on the type
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (prototype-array-tie-method-9 () none) ;; 9 ;; (login (_type_) none)
    )
  )

(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie  :offset-assert 4) ;; guessed by decompiler
   (wind-vectors        uint32               :offset-assert 8)
   (wind-count          uint16               :offset-assert 12)
   (prototype-max-qwc   uint16               :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; +++prototype-h:instance-flags
(defenum instance-flags
  :type uint16
  :bitfield #t
  (no-collide 0)
  )
;; ---prototype-h:instance-flags

(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (origin       matrix4h :inline :offset-assert 32)
   (flags        instance-flags   :offset 46) ;; instance-flags
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type joint-control basic)

(defenum joint-control-command
  :type uint64
  (push 1)
  (blend 2)
  (four 4)
  (eight 8)
  (push1 19)
  (jcc32 32)
  (stack 36)
  (float 42)
  (stack1 52)
  )

(defenum joint-control-status
  :type uint16
  :bitfield #t

  (sync-math               0) ;; 1
  (spooling                1) ;; 2
  (spooling-not-last-block 2) ;; 4
  (blend-shape             3) ;; 8
  (math-when-off-screen    4) ;; 16
  (valid-spooled-frame     5) ;; 32
  (blend-shape-valid       6) ;; 64
  (eye-anim-valid          7) ;; 128
  (eye-anim                8) ;; 256
  (force-math 9)
  (no-joint-callbacks 10)
  )

(declare-type effect-control basic)

(deftype joint-control-channel (structure)
  "A single animation channel that controls a number of joints.
   Multiple channels are used to blend animations together."
  ((parent           joint-control                                              :offset-assert 0) ;; guessed by decompiler
   (frame-group      art-joint-anim                                             :offset-assert 4) ;; guessed by decompiler
   (frame-num        float                                                      :offset-assert 8)
   (dist             meters                                                     :offset-assert 12)
   (num-func         (function joint-control-channel float float float float)   :offset-assert 16) ;; guessed by decompiler
   (param            float                                                    3 :offset-assert 20) ;; guessed by decompiler
   (frame-interp     float                                                    2 :offset-assert 32) ;; guessed by decompiler
   (inspector-amount uint8                                                      :offset-assert 40)
   (command          joint-control-command                                      :offset-assert 48) ;; joint-control-command
   (group-sub-index  int8                                                       :offset-assert 56)
   (group-size       int8                                                       :offset-assert 57)
   (eval-time        uint32                                                     :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype top-anim-joint-control (basic)
  ((process             (pointer process-drawable)   :offset-assert 4) ;; guessed by decompiler
   (interp-select       uint64                     2 :offset-assert 8) ;; guessed by decompiler
   (base-anim           basic                        :offset-assert 24)
   (base-anim-speed     float                        :offset-assert 28)
   (base-anim-blend     float                        :offset-assert 32)
   (interp              float                        :offset-assert 36)
   (frame-group         art-joint-anim               :offset-assert 40) ;; guessed by decompiler
   (frame-group-push    art-joint-anim               :offset-assert 44) ;; guessed by decompiler
   (frame-num           float                        :offset-assert 48)
   (frame-targ          art-joint-anim               :offset-assert 52) ;; guessed by decompiler
   (frame-speed         float                        :offset-assert 56)
   (frame-blend         float                        :offset-assert 60)
   (frame-cur-blend     float                        :offset-assert 64)
   (frame-start         float                        :offset-assert 68)
   (frame-post-blend    float                        :offset-assert 72)
   (frame-post-end      float                        :offset-assert 76)
   (frame-push-time     time-frame                   :offset-assert 80) ;;
   (frame-post-put-away basic                        :offset-assert 88)
   (update-time         time-frame                   :offset-assert 96) ;; time-frame
   )
  :method-count-assert 13
  :size-assert         #x68
  :flag-assert         #xd00000068
  (:methods
    (new (symbol type process-drawable) _type_) ;; 0
    (reset (_type_) none) ;; 9
    (update (_type_) none) ;; 10
    (get-channel (_type_ int) joint-control-channel) ;; 11
    (push-anim-to-targ (_type_ art-joint-anim float int int float float symbol) none) ;; 12
    )
  )

(deftype joint-control (basic)
  "Every [[process-drawable]] has a [[joint-control]] that handles all the animation channels."
  ((status                  joint-control-status                                             :offset-assert 4)
   (allocated-length        uint8                                                            :offset-assert 6)
   (active-channels         uint8                                                            :offset-assert 7)
   (root-channel            (inline-array joint-control-channel)                             :offset 16) ;; guessed by decompiler
   (blend-index             uint8                                                            :offset-assert 20)
   (active-frame-interp     uint8                                                            :offset-assert 21)
   (float-channels          uint8                                                            :offset-assert 22)
   (generate-frame-function (function joint-anim-frame int joint-control int)                :offset-assert 24) ;; guessed by decompiler
   (prebind-function        (function joint-anim-frame int joint-control int)                :offset-assert 28) ;; guessed by decompiler
   (postbind-function       (function draw-control cspace-array joint-control none)          :offset-assert 32) ;; guessed by decompiler
   (effect                  effect-control                                                   :offset-assert 36) ;; guessed by decompiler
   (interp-select           int64                                                   2        :offset-assert 40) ;; guessed by decompiler
   ;(UNKNOWN                 UNKNOWN                                                          :offset-assert -1) ;; field could not be read.
   (top-anim                top-anim-joint-control                                           :offset-assert 56) ;; guessed by decompiler
   (override                (array float)                                                    :offset-assert 60) ;; guessed by decompiler
   (channel                 joint-control-channel                                   :dynamic :inline :offset-assert 64) ;; guessed by decompiler
   ;(UNKNOWN                 UNKNOWN                                                          :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 13
  :size-assert         #x40
  :flag-assert         #xd00000040
  ;; field joint-control-status is likely a value type.
  (:methods
    (new (symbol type int) _type_) ;; 0
    (current-cycle-distance (_type_) float) ;; 9
    (update-anim-data (_type_) none) ;; 10
    (debug-print-channels "Print the list of joint animations playing in the flattened blend tree." (_type_ symbol) int) ;; 11
    (joint-control-method-12 (_type_ int) joint-control-channel) ;; 12
    )
  )

(deftype matrix-stack (structure)
  ((top  matrix    :offset-assert 0)
   (data matrix 24 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x610
  :flag-assert         #x900000610
  )

(deftype channel-upload-info (structure)
  "Information about an upload of animation data to a single joint channel."
  ((fixed     joint-anim-compressed-fixed  :offset-assert 0)
   (fixed-qwc int32                        :offset-assert 4)
   (frame     joint-anim-compressed-frame  :offset-assert 8)
   (frame-qwc int32                        :offset-assert 12)
   (amount    float                        :offset-assert 16)
   (interp    float                        :offset-assert 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-work (structure)
  ((temp-mtx       matrix                      :inline :offset-assert 0)
   (joint-stack    matrix-stack                :inline :offset-assert 64)
   (fix-jmp-table  (function none)             16      :offset-assert 1616) ;; guessed by decompiler
   (frm-jmp-table  (function none)             16      :offset-assert 1680) ;; guessed by decompiler
   (pair-jmp-table (function none)             16      :offset-assert 1744) ;; guessed by decompiler
   (uploads        channel-upload-info         24 :inline     :offset-assert 1808) ;; guessed by decompiler
   (num-uploads    int32                               :offset-assert 2384)
   (mtx-acc        matrix                      2  :inline     :offset-assert 2400) ;; guessed by decompiler
   (tq-acc         transformq                  100 :inline    :offset-assert 2528) ;; guessed by decompiler
   (jacp-hdr       joint-anim-compressed-hdr   :inline :offset-assert 7328)
   (fixed-data     joint-anim-compressed-fixed :inline :offset-assert 7392)
   (frame-data     joint-anim-compressed-frame 2  :inline     :offset-assert 9600) ;; guessed by decompiler
   (flatten-array  float                       576     :offset 2400) ;; guessed by decompiler
   (flattened      vector                      24 :inline     :offset 2400) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3640
  :flag-assert         #x900003640
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bones-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum bone-calc-flags
  :type uint16
  :bitfield #t
  (write-ripple-data 0)
  (no-cam-rot 1)
  )

(deftype bone-buffer (structure)
  ((joint  matrix   16 :inline :offset-assert 0) ;; guessed by decompiler
   (bone   bone     16 :inline :offset-assert 1024) ;; guessed by decompiler
   (output pris-mtx 16 :inline :offset-assert 2304) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1100
  :flag-assert         #x900001100
  )

(deftype bone-layout (structure)
  ((data   uint16                  8 :offset-assert 0) ;; guessed by decompiler
   (joint  (inline-array matrix)   2 :offset 0) ;; guessed by decompiler
   (bone   (inline-array bone)     2 :offset 8) ;; guessed by decompiler
   (output (inline-array pris-mtx) 2 :offset 16) ;; guessed by decompiler
   (unused uint32                  2 :offset 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype bone-regs (structure)
  ((dma-buf    dma-buffer               :offset-assert 0)
   (wait-count uint32                   :offset-assert 4)
   (in-count   uint32                   :offset-assert 8)
   (sp-size    uint32                   :offset-assert 12)
   (sp-bufnum  uint32                   :offset-assert 16)
   (joint-ptr  (inline-array joint)     :offset-assert 20) ;; guessed by decompiler
   (bone-ptr   (inline-array bone)      :offset-assert 24) ;; guessed by decompiler
   (num-bones  uint32                   :offset-assert 28)
   (mtxs       (inline-array pris-mtx)  :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype bone-work (structure)
  ((layout bone-layout :inline :offset-assert 0)
   (regs   bone-regs   :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype bone-debug (structure)
  ((time-ctr uint32     :offset-assert 0)
   (timing   uint32 360 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x5a4
  :flag-assert         #x9000005a4
  )

(deftype bone-memory (structure)
  ((work   bone-work   :inline :offset-assert 0)
   (buffer bone-buffer 2 :inline      :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2250
  :flag-assert         #x900002250
  )

(deftype bone-calculation (structure)
  ((flags               bone-calc-flags          :offset-assert 0) ;; bone-calc-flags
   (num-bones           uint16                   :offset-assert 2)
   (matrix-area         (inline-array pris-mtx)  :offset-assert 4) ;; guessed by decompiler
   (joints              (inline-array joint)     :offset-assert 8) ;; guessed by decompiler
   (bones               (inline-array bone)      :offset-assert 12) ;; guessed by decompiler
   (ripple-scale        float                    :offset-assert 16)
   (ripple-y-scale      float                    :offset-assert 20)
   (ripple-normal-scale float                    :offset-assert 24)
   (ripple-area         (inline-array vector)    :offset-assert 28) ;; guessed by decompiler
   (ripple-vec          vector :inline         :offset 16) ;; added
   (next                bone-calculation         :offset-assert 32)
   (dummy-1             uint32                   :offset-assert 36)
   (dummy-2             uint32                   :offset-assert 40)
   (dummy-3             uint32                   :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype bone-calculation-list (structure)
  ((first bone-calculation  :offset-assert 0)
   (next  bone-calculation  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; foreground-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type merc-effect structure)

(deftype mercneric-chain (structure)
  "A DMA chain for drawing with mercneric, and metadata needed to append.
   This chain is assumed to run with a specific tpage from a specific level available."
  ((first      uint32                       :offset-assert 0)
   (next       uint32                       :offset-assert 4)
   (state      generic-bucket-state :inline :offset-assert 8)
   (vu1-bucket bucket-id                    :offset-assert 16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype merc-chain (structure)
  "A DMA chain for drawing with merc.
   This chain is assumed to run with a specific tpage from a specific level available."
  ((first      dma-packet  :offset-assert 0)
   (patch      dma-packet  :offset-assert 4)
   (vu1-bucket bucket-id   :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype foreground-bucket (structure)
  "A foreground bucket is merc, emerc, and mercneric chain for a given texture mode."
  ((merc      merc-chain      :inline :offset-assert 0)
   (emerc     merc-chain      :inline :offset-assert 12)
   (mercneric mercneric-chain :inline :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype foreground-level-buckets (structure)
  "Collection of buckets for a single level.
   Each bucket has a different texture. The order is:
   tfrag, pris, shrub, alpha, water, pris, pris2"
  ((data foreground-bucket 7 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

(deftype foreground-bucket-grid (structure)
  "Array of buckets for each level, plus the single warp chain shared between everybody."
  ((level-buckets foreground-level-buckets 11 :inline  :offset-assert 0) ;; guessed by decompiler
   (warp-chain    mercneric-chain          :inline :offset-assert 3696)
   )
  :method-count-assert 9
  :size-assert         #xe84
  :flag-assert         #x900000e84
  )

(deftype foreground-regs (structure)
  "Frequently accessed foreground values. These are in scratchpad for fast access
   during foreground processing."
  ((dist                  float                     :offset-assert 0)
   (merc-used             uint32                    :offset-assert 4)
   (emerc-used            uint32                    :offset-assert 8)
   (mercneric-used        uint32                    :offset-assert 12)
   (use-isometric         uint32                    :offset-assert 16)
   (base-start            dma-packet                :offset-assert 20)
   (joint-ptr             (inline-array joint)      :offset-assert 24) ;; guessed by decompiler
   (bone-ptr              (inline-array bone)       :offset-assert 28) ;; guessed by decompiler
   (num-bones             uint32                    :offset-assert 32)
   (mtxs                  (inline-array pris-mtx)   :offset-assert 36) ;; guessed by decompiler
   (dma-buf               dma-buffer                :offset-assert 40) ;; guessed by decompiler
   (default-texture-index uint32                    :offset-assert 44)
   (mercneric-chain       mercneric-chain           :offset-assert 48)
   (level-buckets         foreground-level-buckets  :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype foreground-work (structure)
  "Memory map for scratchpad during foreground processing.
   This is not used by the renderers, bone matrix, or joint code - just the code
   that assigns stuff to buckets and prepares DMA for merc (or requests for generic merc)."
  ((regs           foreground-regs        :inline :offset-assert 0)
   (draw-index-map uint8                  11      :offset 64) ;; guessed by decompiler
   (grid           foreground-bucket-grid :inline :offset-assert 80)
   (bounds         sphere                 :inline :offset-assert 3808)
   (lights         vu-lights              :inline :offset-assert 3824)
   (distance       vector                 :inline :offset-assert 3936)
   (next-tmpl      dma-packet             :inline :offset-assert 3952)
   )
  :method-count-assert 9
  :size-assert         #xf80
  :flag-assert         #x900000f80
  )

(deftype texscroll-globals (structure)
  "List of all merc-effects that need texscroll applied."
  ((requests int32          :offset-assert 0)
   (effects  merc-effect 32 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype merc-effect-bucket-info (structure)
  "Scratch info computed per-merc-effect by the foreground code, then later read by merc
   DMA generation. This is only for the currently-processing merc model's effects."
  ((color-fade     rgba   :offset-assert 0) ;; guessed by decompiler
   (merc-path      uint8  :offset-assert 4)
   (ignore-alpha   uint8  :offset-assert 5)
   (disable-draw   uint8  :offset-assert 6)
   (disable-envmap uint8  :offset-assert 7)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-bucket-info (structure)
  "Scratch info for the current merc-ctrl. Written by the foreground code, read by merc DMA generation."
  ((light                       vu-lights               :inline :offset-assert 0)
   (needs-clip                  int32                           :offset-assert 112)
   (need-mercprime-if-merc      int32                           :offset-assert 116)
   (must-use-mercneric-for-clip int32                           :offset-assert 120)
   (effect                      merc-effect-bucket-info 64 :inline     :offset-assert 124) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x27c
  :flag-assert         #x90000027c
  )

(deftype foreground-globals (structure)
  "The foreground renderer state: all DMA chains, settings for the current merc-ctrl, texscroll list."
  ((foreground-grid  foreground-bucket-grid :inline :offset-assert 0)
   (merc-bucket-info merc-bucket-info       :inline :offset-assert 3728)
   (texscroll        texscroll-globals      :inline :offset-assert 4368)
   )
  :method-count-assert 9
  :size-assert         #x1194
  :flag-assert         #x900001194
  )

(deftype shadow-dma-packet (structure)
  "DMA tag for submitting shadow data."
  ((tag      generic-merc-tag :inline :offset-assert 0)
   (settings shadow-settings  :inline :offset-assert 16)
   (geo-ref  dma-packet       :inline :offset-assert 96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(define-extern invalidate-cache-line (function pointer int))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; engines                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++engines:part-local-space-flags
(defenum part-local-space-flags
  :type uint32
  :bitfield #t
  (pls0 0)
  (pls1 1)
  )
;; ---engines:part-local-space-flags

(deftype particle-local-space-info (connection)
  ((params   basic  3        :offset 20 :score 1)
   (mat-prev matrix  :inline :offset-assert 32)
   (mat-new  matrix  :inline :offset-assert 96)
   (hand     handle          :offset-assert 160)
   (flags    part-local-space-flags :offset-assert 168)
   (pad      uint32 1        :offset-assert 172)
   )
  :method-count-assert 14
  :size-assert         #xb0
  :flag-assert         #xe000000b0
  ;; field param1 uses ~A with a signed load. field param2 uses ~A with a signed load. field param3 uses ~A with a signed load.
  )

(define-extern *background-draw-engine* engine)
(define-extern *matrix-engine* (array handle))
(define-extern *cloth-engine* (array handle))
(define-extern *part-engine* engine)
(define-extern *cam-post-hook-engine* engine)
(define-extern *part-local-space-engine* engine)
(define-extern *camera-engine* engine)
(define-extern *debug-engine* engine)
(define-extern *pad-engine* engine)
(define-extern *lightning-engine* engine)
(define-extern *hud-engine* engine)
(define-extern *prim-engine* engine)
(define-extern *task-manager-engine* engine)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++lightning-h:lightning-spec-flags
(defenum lightning-spec-flags
  :type uint16
  :bitfield #t
  (lsf0 0)
  (lsf1 1)
  (lsf2 2)
  (lsf3 3)
  (lsf4 4)
  (lsf5 5)
  (lsf6 6)
  (lsf7 7)
  (lsf8 8)
  (lsf9 9)
  (lsf10 10)
  (lsf11 11)
  (lsf12 12)
  (lsf13 13)
  (lsf14 14)
  (lsf15 15)
  )
;; ---lightning-h:lightning-spec-flags

(deftype lightning-spec (basic)
  ((name              string      :offset-assert 4) ;; guessed by decompiler
   (flags             lightning-spec-flags :offset-assert 8)
   (rand-func         uint8       :offset-assert 10)
   (adjust-distance   uint8       :offset-assert 11)
   (start-color       rgba        :offset-assert 12) ;; guessed by decompiler
   (end-color         rgba        :offset-assert 16) ;; guessed by decompiler
   (fade-to-color     rgba        :offset-assert 20) ;; guessed by decompiler
   (fade-start-factor float       :offset-assert 24)
   (fade-time         float       :offset-assert 28)
   (texture           texture-id  :offset-assert 32) ;; guessed by decompiler
   (reduction         float       :offset-assert 36)
   (num-points        int32       :offset-assert 40)
   (box-size          float       :offset-assert 44)
   (merge-factor      float       :offset-assert 48)
   (merge-count       int32       :offset-assert 52)
   (radius            float       :offset-assert 56)
   (duration          float       :offset-assert 60)
   (duration-rand     float       :offset-assert 64)
   (sound             symbol      :offset-assert 68)
   (delay             float       :offset-assert 72)
   (delay-rand        float       :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype lightning-state (structure)
  ((mode           uint8                :offset-assert 0) ;; lightning-mode
   (counter        float                :offset-assert 4)
   (points-to-draw int32                :offset-assert 8)
   (box-size       float                :offset-assert 12)
   (gcf-control    gcf-control  :inline :offset-assert 16)
   (line           vector-array         :offset-assert 128) ;; guessed by decompiler
   (meet           vector-array         :offset-assert 132) ;; guessed by decompiler
   (path           vector-array         :offset-assert 136) ;; guessed by decompiler
   (start-color    rgba                 :offset-assert 140) ;; guessed by decompiler
   (end-color      rgba                 :offset-assert 144) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

;; +++lightning-h:lightning-mode
(defenum lightning-mode
  :type uint8
  (lm-1 -1)
  (lm0 0)
  (lm1 1)
  (lm2 2)
  (lm3 3)
  )
;; ---lightning-h:lightning-mode

(deftype lightning-control (basic)
  ((spec    lightning-spec            :offset-assert 4) ;; guessed by decompiler
   (process (pointer process)         :offset-assert 8) ;; guessed by decompiler
   (state   lightning-state   :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #xa4
  :flag-assert         #xe000000a4
  (:methods
    (new (symbol type lightning-spec process float) _type_) ;; 0
    (change-mode (_type_ lightning-mode) lightning-mode) ;; 9
    (get-mode (_type_) lightning-mode) ;; 10
    (set-point! (_type_ int vector) none) ;; 11
    (set-first-meet-point (_type_ vector) none) ;; 12
    (set-last-meet-point (_type_ vector) none) ;; 13
    )
  )

(deftype lightning-probe-vars (basic)
  ((src-joint-index uint32                          :offset-assert 4)
   (next-spawn-time time-frame                      :offset-assert 8) ;; time-frame
   (last-valid-time time-frame                      :offset-assert 16) ;; time-frame
   (point           vector                2 :inline :offset-assert 32) ;; guessed by decompiler
   (start-pos       vector                  :inline :offset 32)
   (end-pos         vector                  :inline :offset 48)
   (probe-dirs      (inline-array vector)           :offset-assert 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(define-extern lookup-lightning-spec-by-name (function string lightning-spec))
(define-extern *lightning-probe-vars* lightning-probe-vars)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; res-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO confirm, this is just copied from jak1
(deftype res-tag (uint128)
  "Metadata about a property in a [[res-lump]], such as name, element type and element count."
  ((name        symbol  :offset 0)
   (key-frame   float   :offset 32)
   (elt-type    type    :offset 64)
   (data-offset uint16  :offset 96)
   (elt-count   uint32  :offset 112 :size 15)
   (inlined?    uint8   :offset 127 :size 1) ;; guess.
   )
  :flag-assert #x900000010
  )

;; made-up type
(deftype res-tag-pair (uint64)
  "The indices of two [[res-tag]]s. If the specific key-frame time is in between two
   res-tags, this type is used to return the indices of the first res-tag before and after
   the specified time."
  ((lo  int32 :offset 0)
   (hi  int32 :offset 32)
   )
  )

(declare-type nav-mesh basic)
(define-extern nav-mesh type)
(declare-type collide-mesh basic)
(define-extern collide-mesh type)

;; +++res-h:res-lump-flags
(defenum res-lump-flags
  :type uint16
  :bitfield #t
  (sorted 0)
  (rlf1 1)
  )
;; ---res-h:res-lump-flags

(deftype res-lump (basic)
  "A collection of [[res-tag]]s and their data."
  ((length           int32              :offset-assert 4)
   (allocated-length int16              :offset-assert 8) ;; int32
   (flags            res-lump-flags     :offset-assert 10)
   (data-base        pointer            :offset-assert 12) ;; guessed by decompiler
   (data-top         pointer            :offset-assert 16) ;; guessed by decompiler
   (data-size        int32              :offset-assert 20)
   (extra            entity-links       :offset-assert 24) ;; guessed by decompiler
   (tag              (pointer res-tag)  :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field extra uses ~A with a signed load.
  (:methods
    (new (symbol type int int) _type_) ;; 0
    (get-property-data
      "Returns an address to a given property's data at a specific time stamp, or default on error.
       @param name is the name of the property you want, mode is its lookup mode ('interp 'base 'exact), time is the timestamp.
       @param default is the default result returned in the case of an error.
       @param tag-addr is an address to a res-tag. The current base tag is written to this. Ignored if tag-addr is #f
       @param buf-addr is an address to the data buffer used to write interpolated data to. It must have enough space! Only necessary for 'interp mode."
      (_type_ symbol symbol float pointer (pointer res-tag) pointer) pointer :no-virtual) ;; 9
    (get-property-struct
      "Returns a given struct property's value at a specific time stamp, or default on error.
        @param name is the name of the property you want, `mode` is its lookup mode ('interp 'base 'exact), `time` is the timestamp.
        @param default is the default result returned in the case of an error.
        @param tag-addr is an address to a [[res-tag]]. The current base tag is written to this. Ignored if tag-addr is #f.
        @param buf-addr is an address to the data buffer used to write interpolated data to.
        It must have enough space! Only necessary for 'interp mode."
      (_type_ symbol symbol float structure (pointer res-tag) pointer) structure :no-virtual) ;; 10
    (get-property-value
      "Returns a given value property's value at a specific time stamp, or default on error.
       @param name is the name of the property you want, `mode` is its lookup mode ('interp 'base 'exact), `time` is the timestamp.
       @param default is the default result returned in the case of an error.
       @param tag-addr is an address to a res-tag. The current base tag is written to this. Ignored if `tag-addr` is #f.
       @param buf-addr is an address to the data buffer used to write interpolated data to.
       It must have enough space! Only necessary for 'interp mode."
      (_type_ symbol symbol float uint128 (pointer res-tag) pointer) uint128 :no-virtual) ;; 11
    (get-property-value-float (_type_ symbol symbol float float (pointer res-tag) pointer) float) ;; 12
    (get-tag-index-data "Get the data address of the n'th tag." (_type_ int) pointer) ;; 13
    (get-tag-data "Get the data address of the specified tag." (_type_ res-tag) pointer) ;; 14
    (allocate-data-memory-for-tag!
      "Find space for the data described by arg0 in this.
       Returns a tag with data-offset set correctly for this res-lump.
       If the lump already contains memory for the given tag, and it is big enough,
       it will be reused. Alignment will be at least 8 bytes.
       If the input tag has elt-count = 0, it will return a tag for elt-count = 1."
      (_type_ res-tag) res-tag) ;; 15
    (sort! "Sort all tags based on name, then key-frame." (_type_) _type_) ;; 16
    (add-data!
      "Given a tag and a pointer to its data, copy it to this res-lump.
       This doesn't seem to do the right thing if the given tag is a non-inline tag
       with > 1 element."
      (_type_ res-tag pointer) res-lump) ;; 17
    (add-32bit-data! "Add a single 32-bit value using [[add-data!]]." (_type_ res-tag object) res-lump) ;; 18
    (lookup-tag-idx
      "Look up the index of the tag containing with the given name and timestamp.
       Correct lookups return a res-tag-pair, which contains one tag index in the lower 32 bits and one in the upper 32 bits.
       Depending on the mode, they may be the same, or they may be two tags that you should interpolate
       between, if the exact time was not found.

       @param name-sym should be the name of the thing you want.
       @param time is for the timestamp you want.
       If mode = 'base, then both the indices are the same and the timestamp is ignored.
       If mode = 'interp, then it tries to get closest below/closest above (or both the same, if exact match found).
       If mode = 'exact, then it requires an exact timestamp match and both indices are the same.
       If things go wrong, returns a negative number."
      (_type_ symbol symbol float) res-tag-pair :no-virtual) ;; 19
    (make-property-data
       "Returns (a pointer to) the value data of a property with the tag-pair.
        If tag-pair does not represent an exact point in the timeline, then the data is interpolated based on time
        with the result written into buf. buf must have enough space to copy all of the data.
        Otherwise, simply returns an address to the resource binary."
       (_type_ float res-tag-pair pointer) pointer) ;; 20
    (get-curve-data!
      "Read curve data and write it to curve-target. Return #t if both
       control points and knots data was succesfully read, #f otherwise."
      (_type_ curve symbol symbol float) symbol) ;; 21
    )
  )

(define-extern *res-key-string* string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; res                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *res-static-buf* pointer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lights                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *light-hash-work* light-hash-work) ;;
(define-extern light-slerp
  "Linearly interpolate between two [[light]]s
   @param! light-out The resultant
   @param light-a One of the two lights
   @param light-b One of the two lights
   @param alpha Clamped to between `0.0` and `1.0`
   @returns The interpolated [[light]]"
  (function light light light float light))
(define-extern light-group-slerp
  "Linearly interpolate between two [[light-groups]]s by calling [[light-slerp]] on each respective collection of lights
   @param light-group-out The resultant
   @param light-group-a One of the two [[light-group]]s
   @param light-group-b One of the two [[light-group]]s
   @param alpha
   @returns The linearly interpolated [[light-group]]"
  (function light-group light-group light-group float light-group))
(define-extern light-group-process!
  "Unused, needlessly calls [[rotate-y<-vector+vector]] on the two [[vector]]s and calls [[vu-lights<-light-group!]]
   @param vu-lights
   @param light-group
   @param vec1
   @param vec2
   @returns [[none]]"
  (function vu-lights light-group vector vector none))
(define-extern *default-lights* vu-lights) ;;
(define-extern vu-lights-default!
  "Setups up a default [[vu-lights]] instance
   @param! lights
   @returns [[vu-lights]]"
  (function vu-lights vu-lights)) ;;
(define-extern init-light-hash
  "Initializes the global [[*light-hash*]].
   - Bucket array allocates `4096` bytes. (enough for 16,384 entries)
   - Index array allocates `65536` bytes.
   - Light sphere array allocates `16384` bytes. (enough for 256 light spheres)
   @returns [[light-hash]]"
  (function none)) ;;
(define-extern light-hash-count-items (function light-hash light-sphere none)) ;;
(define-extern light-hash-add-items (function light-hash light-sphere integer object)) ;;
(define-extern reset-light-hash
  "Resets the global [[*light-hash*]] back to having `0` lights, indicies, and buckets.
   @returns [[none]]"
  (function none)) ;;
(define-extern update-light-hash (function light-hash none)) ;;
(define-extern lookup-light-sphere-by-name
  "Search through a given [[light-hash]]'s lights to find the one that matches the given name
   @param name The name to look for
   @param hash The hash to search through
   @returns Either the [[light]] or [[#f]]"
  (function string light-hash light-sphere)) ;;
(define-extern light-hash-get-bucket-index (function light-hash vector int)) ;;
(define-extern add-light-sphere-to-light-group (function object object object object object)) ;;
(define-extern light-merge!
  "Given two [[light-group]]'s merge their values and store the results in the first art-group.
   Tons of `(nop!)` in the original implementation, PS2 optimization nonsense.
   @param! out One of the groups and where the merged result is stored
   @param other The other group to merge with
   @returns [[none]]"
  (function light-group light-group none))
(define-extern light-group-scale!
  "Given a [[light-group]], a `pointer` to a [[light-group]] to back it up, and a scale value,
   Scale the light's `extra.x` value
   @param! group The [[light]]s to scale
   @param pointer A location to backup the original [[light]]s
   @param scale The value to scale by
   @returns [[none]]"
  (function light-group (pointer light-group) float none))
(define-extern light-group-madd!
  "Scales the ambient and direction info of one [[light-group]]'s [[light]]s using a scalar value and another [[light-group]]
   @param! group Resultant
   @param backup-ptr where the original `group` is backed up to
   @param other The other [[light-group]] used as part of the operation
   @param scalar An arbitrary scalar value multipled against each field
   @returns [[none]]"
  (function light-group (pointer light-group) light-group float none))
(define-extern light-group-lerp!
  "Linearly interpolates between two [[light-group]]'s.
   @param! group Resultant
   @param backup-ptr where the original `group` is backed up to
   @param other The other [[light-group]] used as part of the operation
   @param scalar An arbitrary scalar value multipled against each field
   @returns [[none]]"
  (function light-group (pointer light-group) light-group float none))
(define-extern shadow-info-copy!
  "Copies `extra.y` from `src` into `dest` for each [[light]]
   @param! dest
   @param src
   @returns [[none]]"
  (function light-group light-group none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dynamics-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype dynamics (basic)
  ((name           symbol         :offset-assert 4) ;; guessed by decompiler
   (gravity-max    meters         :offset-assert 8)
   (gravity-length meters         :offset-assert 12)
   (gravity        vector :inline :offset-assert 16)
   (gravity-normal vector :inline :offset-assert 32)
   (walk-distance  meters         :offset-assert 48)
   (run-distance   meters         :offset-assert 52)
   )
  :method-count-assert 10
  :size-assert         #x38
  :flag-assert         #xa00000038
  (:methods
    (set-gravity-length (_type_ float) none) ;; 9
    )
  )

(define-extern time-to-apex (function float float int))
(define-extern time-to-ground (function float float float int))
(define-extern *standard-dynamics* dynamics)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; surface-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++surface-h:surface-flag
;; TODO copied from jak 2
(defenum surface-flag
  :bitfield #t
  :type uint32

  (look-around         0) ;; 1
  (xz-local            1) ;; 2
  (smooth-collision    2) ;; 4
  (no-turn-around      3) ;; 8
  (turn-to-pad         4) ;; 16
  (turn-to-vel         5) ;; 32
  (no-jump             6) ;; 64
  (no-attack           7) ;; 128
  (no-hands            8) ;; 256
  (no-feet             9) ;; 512
  (check-edge         10) ;; 1024
  (air                11) ;; 2048
  (attack             12) ;; 4096
  (duck               13) ;; 8192
  (momentum           14) ;; 16384
  (turn-when-centered 15) ;; 32768

  (turn-to-alt        16) ;; hi 1
  (spin               17) ;; hi 2
  (super              18) ;; hi 4
  (gun-inactive       19) ;; hi 8
  (gun-hide           20) ;; hi 16
  (gun-off            21) ;; hi 32
  (gun-fast-exit      22) ;; hi 64
  (gun-direct         23) ;; hi 128
  (gun-strafe         24) ;; hi 256
  (gun-no-twist       25) ;; hi 512
  (laser-hide         26) ;; hi 1024
  (no-board           27) ;; hi 2048
  (gun-turn-fast      28) ;; hi 4096
  (sf29 29)
  )
;; ---surface-h:surface-flag

(declare-type collide-shape trsqv)
(declare-type collide-shape-moving collide-shape)
(declare-type control-info collide-shape-moving)
(declare-type target process-focusable)
(deftype surface (basic)
  "Definition of a bunch of parameters for different types of surfaces.
   Parameters include values such as max speed, friction, callback functions that run
   on impact, during touch, on exit, etc."
  ((name                  symbol                                                 :offset-assert 4) ;; guessed by decompiler
   (data                  float                                               30 :offset-assert 8 :score -1) ;; guessed by decompiler
   (turnv                 float                                                  :offset 8)
   (turnvf                float                                                  :offset 100)
   (turnvv                float                                                  :offset 12)
   (turnvvf               float                                                  :offset 104)
   (tiltv                 float                                                  :offset 16)
   (tiltvf                float                                                  :offset 108)
   (tiltvv                float                                                  :offset 20)
   (tiltvvf               float                                                  :offset 112)
   (vel-turn              float                                                  :offset 116)
   (transv-max            float                                                  :offset 24)
   (target-speed          float                                                  :offset 28)
   (seek0                 float                                                  :offset 32)
   (seek90                float                                                  :offset 36)
   (seek180               float                                                  :offset 40)
   (fric                  float                                                  :offset 44)
   (nonlin-fric-dist      float                                                  :offset 48)
   (slip-factor           float                                                  :offset 52)
   (slide-factor          float                                                  :offset 56)
   (slope-up-factor       float                                                  :offset 60)
   (slope-down-factor     float                                                  :offset 64)
   (slope-slip-angle      float                                                  :offset 68)
   (impact-fric           float                                                  :offset 72)
   (bend-factor           float                                                  :offset 76)
   (bend-speed            float                                                  :offset 80)
   (alignv                float                                                  :offset 84)
   (slope-up-traction     float                                                  :offset 88)
   (align-speed           float                                                  :offset 92)
   (slope-change-preserve float                                                  :offset 96)
   (hook                  function                                            5  :offset-assert 128 :score -1)
   (active-hook           (function none)                                        :offset 128)
   (touch-hook            (function none)                                        :offset 132)
   (impact-hook           (function control-info (pointer float) vector none)    :offset 136)
   (mult-hook             (function surface surface surface int none)            :offset 140)
   (exit-hook             function                                               :offset 144)
   (dataw                 uint32                                              2  :offset-assert 148 :score -1)
   (mode                  symbol                                                 :offset 148)
   (flags                 surface-flag                                           :offset 152)
   )
  :method-count-assert 9
  :size-assert         #x9c
  :flag-assert         #x90000009c
  )

(define-extern calc-terminal-vel (function float float float float))
(define-extern calc-terminal2-vel (function float float float float float))
(define-extern calc-terminal4-vel (function float float float float))
(define-extern surface-interp! (function surface surface surface float surface))
(define-extern surface-mult! (function surface surface surface surface))
(define-extern surface-clamp-speed (function surface surface surface int none))
(define-extern *walk-mods* surface)
(define-extern *walk-no-turn-mods* surface)
(define-extern *turn-around-mods* surface)
(define-extern *jump-mods* surface)
(define-extern *double-jump-mods* surface)
(define-extern *smack-jump-mods* surface)
(define-extern *high-jump-mods* surface)
(define-extern *launch-jump-mods* surface)
(define-extern *forward-high-jump-mods* surface)
(define-extern *flip-jump-mods* surface)
(define-extern *forward-jump-mods* surface)
(define-extern *forward-pole-jump-mods* surface)
(define-extern *dark-jump-mods* surface)
(define-extern *roll-mods* surface)
(define-extern *roll-flip-mods* surface)
(define-extern *flop-mods* surface)
(define-extern *flop-land-mods* surface)
(define-extern *wade-mods* surface)
(define-extern *swim-mods* surface)
(define-extern *dive-mods* surface)
(define-extern *dive-bottom-mods* surface)
(define-extern *pole-mods* surface)
(define-extern *grab-mods* surface)
(define-extern *edge-grab-mods* surface)
(define-extern *empty-mods* surface)
(define-extern *empty-mods-allow-gun* surface)
(define-extern *neutral-mods* surface)
(define-extern *stone-surface* surface)
(define-extern *mushroom-surface* surface)
(define-extern *gravel-surface* surface)
(define-extern *edge-surface* surface)
(define-extern *wade-surface* surface)
(define-extern *quicksand-surface* surface)
(define-extern *tar-surface* surface)
(define-extern *ice-surface* surface)
(define-extern *rail-surface* surface)
(define-extern *standard-ground-surface* surface)
(define-extern *swim-surface* surface)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pat-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++pat-h:pat-mode
(defenum pat-mode
  :type uint8
  (ground 0)
  (wall 1)
  (obstacle 2)
  (halfpipe 3)
  )
;; ---pat-h:pat-mode

;; +++pat-h:pat-material
(defenum pat-material
  :type uint8
  (unknown     0)
  (ice         1)
  (quicksand   2)
  (waterbottom 3)
  (tar         4)
  (sand        5)
  (wood        6)
  (grass       7)
  (pcmetal     8)
  (snow        9)
  (deepsnow   10)
  (hotcoals   11)
  (lava       12)
  (crwood     13)
  (gravel     14)
  (dirt       15)
  (metal      16)
  (straw      17)
  (tube       18)
  (swamp      19)
  (stopproj   20)
  (rotate     21)
  (neutral    22)
  (stone      23)
  (crmetal    24)
  (carpet     25)
  (grmetal    26)
  (shmetal    27)
  (hdwood     28)
  (squish     29)
  (mhshroom   30)
  (forest     31)
  (mhswamp    32)
  (dmaker     33)
  )
;; ---pat-h:pat-material

;; +++pat-h:pat-event
(defenum pat-event
  :type uint8
  (none        0)
  (deadly      1)
  (endlessfall 2)
  (burn        3)
  (deadlyup    4)
  (burnup      5)
  (melt        6)
  (slide       7)
  (lip         8)
  (lipramp     9)
  (shock      10)
  (shockup    11)
  (hide       12)
  (rail       13)
  (slippery   14)
  (drag       15)
  (waterfloor 16)
  (hang       17)
  (fry        18)
  (slime      19)
  )
;; ---pat-h:pat-event

(deftype pat-surface (uint32)
  ((skip      uint8        :offset  0 :size 7 :do-not-decompile)
   (mode      pat-mode     :offset  7 :size 3)
   (material  pat-material :offset 10 :size 6)
   (camera    uint8        :offset 16 :size 1 :do-not-decompile) ;; sz = 2??
   (event     pat-event    :offset 18 :size 6)
   (skip2     uint8        :offset 24 :size 5 :do-not-decompile)

   (noentity  uint8        :offset  0 :size 1)
   (nocamera  uint8        :offset  1 :size 1)
   (noedge    uint8        :offset  2 :size 1)
   (nogrind   uint8        :offset  3 :size 1)
   (nojak     uint8        :offset  4 :size 1)
   (noboard   uint8        :offset  5 :size 1)
   (nopilot   uint8        :offset  6 :size 1)

   (probe     uint8        :offset 24 :size 1)
   (nomech    uint8        :offset 25 :size 1)
   (noproj    uint8        :offset 26 :size 1)
   (noendlessfall uint8    :offset 27 :size 1)
   (noprobe   uint8        :offset 28 :size 1)

   (nolineofsight uint8    :offset 16 :size 1)
   (board     uint8        :offset 4 :size 1)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype pat-mode-info (structure)
  ((name         string  :offset-assert 0) ;; guessed by decompiler
   (wall-angle   float   :offset-assert 4)
   (color        rgba    :offset-assert 8) ;; guessed by decompiler
   (hilite-color rgba    :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern pat-material->string (function pat-surface string))
(define-extern pat-mode->string (function pat-surface string))
(define-extern pat-event->string (function pat-surface string))
(define-extern *pat-mode-info* (inline-array pat-mode-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fact-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype fact-bank (basic)
  ((eco-level-max              float    :offset-assert 4)
   (eco-single-inc             float    :offset-assert 8)
   (eco-full-inc               float    :offset-assert 12)
   (eco-single-timeout         seconds  :offset-assert 16)
   (eco-full-timeout           seconds  :offset-assert 24)
   (dummy                      seconds  :offset-assert 32)
   (health-max-default         float    :offset-assert 40)
   (health-max-max             float    :offset-assert 44)
   (health-small-inc           float    :offset-assert 48)
   (health-single-inc          float    :offset-assert 52)
   (health-default-inc         float    :offset-assert 56)
   (health-darkjak-inc         float    :offset-assert 60)
   (health-darkjak-min         float    :offset-assert 64)
   (health-darkjak-error       float    :offset-assert 68)
   (eco-pill-green-max-default float    :offset-assert 72)
   (eco-pill-dark-max-default  float    :offset-assert 76)
   (eco-pill-light-max-default float    :offset-assert 80)
   (eco-green-max-default      float    :offset-assert 84)
   (default-eco-pill-green-inc float    :offset-assert 88)
   (default-eco-pill-dark-inc  float    :offset-assert 92)
   (default-eco-pill-light-inc float    :offset-assert 96)
   (buzzer-max-default         float    :offset-assert 100)
   (buzzer-single-inc          float    :offset-assert 104)
   (suck-bounce-dist           meters   :offset-assert 108)
   (suck-suck-dist             meters   :offset-assert 112)
   (ammo-yellow-max            float    :offset-assert 116)
   (ammo-red-max               float    :offset-assert 120)
   (ammo-blue-max              float    :offset-assert 124)
   (ammo-dark-max              float    :offset-assert 128)
   (ammo-yellow-start          float    :offset-assert 132)
   (ammo-red-start             float    :offset-assert 136)
   (ammo-blue-start            float    :offset-assert 140)
   (ammo-dark-start            float    :offset-assert 144)
   (shield-max                 float    :offset-assert 148)
   (shield-use-speed           float    :offset-assert 152)
   (shield-time-min            seconds  :offset-assert 160)
   (trick-point-max            float    :offset-assert 168)
   (super-skill-inc            float    :offset-assert 172)
   (lightjak-regen-inc         float    :offset-assert 176)
   (lightjak-swoop-inc         float    :offset-assert 180)
   (lightjak-freeze-inc        float    :offset-assert 184)
   (lightjak-freeze-min        float    :offset-assert 188)
   (lightjak-freeze-duration   seconds  :offset-assert 192)
   (lightjak-shield-inc        float    :offset-assert 200)
   (lightjak-shield-hit-inc    float    :offset-assert 204)
   (darkjak-spin-inc           float    :offset-assert 208)
   (darkjak-punch-inc          float    :offset-assert 212)
   (darkjak-flop-inc           float    :offset-assert 216)
   (darkjak-uppercut-inc       float    :offset-assert 220)
   (darkjak-bomb0-inc          float    :offset-assert 224)
   (darkjak-bomb1-inc          float    :offset-assert 228)
   (darkjak-smack-inc          float    :offset-assert 232)
   (darkjak-bomb-min           float    :offset-assert 236)
   (darkjak-button-invis-inc   float    :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #xf4
  :flag-assert         #x9000000f4
  )

;; +++fact-h:actor-option
(defenum actor-option
  :bitfield #t
  :type uint64
  (blocked           0) ;; 1
  (spawns-fuel-cell  1) ;; 2
  (draw-blocker      2) ;; 4
  (loop              3) ;; 8
  (reflect           4) ;; 16
  (wait-for-cue      5) ;; 32
  (auto-pickup       6) ;; 64
  (fuel-cell-no-jump 7) ;; 128
  (suck-in           8) ;; 256
  (fade-out          9) ;; 512
  (big-collision    10) ;; 1024
  (racer-only       11) ;; 2048
  (no-reaction      12) ;; 4096
  (no-shadow        13) ;; 8192
  (wait-for-task-complete 14) ;; 16384
  (respawn-delay    15) ;; 32768

  (no-amb-sound     16) ;; hi 1
  (user17           17) ;; hi 2
  (user18           18) ;; hi 4
  (user19           19) ;; hi 8
  (user20           20) ;; hi 16
  (cond-hide        21) ;; hi 32
  (cond-respawn     22) ;; hi 64
  (fall             23) ;; hi 128
  (mirror           24) ;; hi 256
  (cond-low-ammo             25) ;; hi 512
  (no-distance-check-fadeout 26) ;; 1024
  (no-track                  27) ;; hi 2048
  (dont-override-fact        28)
  )
;; ---fact-h:actor-option

(define-extern process-drawable-art-error (state string process-drawable))
(deftype fact-info (basic)
  ((process             process       :offset-assert 4) ;; guessed by decompiler
   (pickup-type         pickup-type   :offset-assert 8)
   (pickup-amount       float         :offset-assert 12)
   (pickup-spawn-amount float         :offset-assert 16)
   (options             actor-option  :offset-assert 24)
   (fade-time           time-frame    :offset-assert 32) ;; time-frame
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  ;; field actor-option is likely a value type.
  (:methods
    (new (symbol type process pickup-type float) _type_) ;; 0
    (drop-pickup (_type_ symbol process-tree fact-info int symbol) (pointer process)) ;; 9
    (reset! (_type_ symbol) none) ;; 10
    (pickup-collectable! (_type_ pickup-type float handle) float) ;; 11
    )
  )

(declare-type process-focusable process-drawable)
(deftype fact-info-target (fact-info)
  ((process                    target     :override)
   (eco-type                   int32      :offset-assert 40)
   (eco-level                  float      :offset-assert 44)
   (eco-pickup-time            time-frame :offset-assert 48)
   (eco-timeout                seconds    :offset-assert 56)
   (eco-source                 handle     :offset-assert 64)
   (eco-source-time            time-frame :offset-assert 72)
   (health                     float      :offset-assert 80)
   (health-max                 float      :offset-assert 84)
   (health-pickup-time         time-frame :offset-assert 88)
   (buzzer                     float      :offset-assert 96)
   (buzzer-max                 float      :offset-assert 100)
   (eco-pill-green             float      :offset-assert 104)
   (eco-pill-green-max         float      :offset-assert 108)
   (eco-pill-green-pickup-time time-frame :offset-assert 112)
   (eco-pill-dark-pickup-time  time-frame :offset-assert 120)
   (eco-pill-light-pickup-time time-frame :offset-assert 128)
   (money-pickup-time          time-frame :offset-assert 136)
   (buzzer-pickup-time         time-frame :offset-assert 144)
   (task-pickup-time           time-frame :offset-assert 152)
   (stop-time-timeout          time-frame :offset-assert 160)
   (darkjak-start-time         time-frame :offset-assert 168)
   (darkjak-effect-time        time-frame :offset-assert 176)
   (lightjak-start-time        time-frame :offset-assert 184)
   (lightjak-effect-time       time-frame :offset-assert 192)
   (ammo-pickup-time           time-frame :offset-assert 200)
   (shield-pickup-time         time-frame :offset-assert 208)
   (shield-start-time          time-frame :offset-assert 216)
   (shield-use-time            time-frame :offset-assert 224)
   (shield-level               float      :offset-assert 232)
   (shield-attack-id           uint32     :offset-assert 236)
   (trick-point                float      :offset-assert 240)
   (trick-point-pickup-time    time-frame :offset-assert 248)
   (trick-point-start-time     time-frame :offset-assert 256)
   (trick-point-duration       time-frame :offset-assert 264)
   (gem-pickup-time            time-frame :offset-assert 272)
   (skill-pickup-time          time-frame :offset-assert 280)
   (karma-pickup-time          time-frame :offset-assert 288)
   (eco-green                  float      :offset-assert 296)
   (eco-green-max              float      :offset-assert 300)
   (eco-green-pickup-time      time-frame :offset-assert 304)
   )
  :method-count-assert 13
  :size-assert         #x138
  :flag-assert         #xd00000138
  ;; field actor-option is likely a value type.
  (:methods
    (new (symbol type process-drawable pickup-type float) _type_) ;; 0
    (get-gun-ammo (_type_) float) ;; 12
    )
  )

;; +++fact-h:enemy-option
(defenum enemy-option
  :bitfield #t
  :type uint32
  (user0              0) ;; 1
  (user1              1) ;; 2
  (user2              2) ;; 4
  (user3              3) ;; 8
  (user4              4) ;; 16
  (user5              5) ;; 32
  (user6              6) ;; 64
  (user7              7) ;; 128
  (user8              8) ;; 256
  (user9              9) ;; 512
  (user10            10) ;; 1024
  (user11            11) ;; 2048
  (user12            12) ;; 4096
  (user13            13) ;; 8192
  (user14            14) ;; 16k
  (user15            15)

  (dormant           16) ;; hi 1
  (dormant-aware     17) ;; hi 2
  (ambush            18) ;; hi 4
  (spawner           19) ;; hi 8
  (prespawned        20) ;; hi 16
  (multi-focus       21) ;; hi 32
  (has-trigger       22)
  (idle-til-trigger  23) ;; hi 128
  (knocked-into-water 24) ;; hi 256
  (water             25) ;; hi 512
  )
;; ---fact-h:enemy-option

(declare-type actor-group inline-array-class)
(deftype fact-info-enemy (fact-info)
  ((speed               float                   :offset-assert 40)
   (idle-distance       meters                  :offset-assert 44)
   (notice-top          meters                  :offset-assert 48)
   (notice-bottom       meters                  :offset-assert 52)
   (cam-horz            meters                  :offset-assert 56)
   (cam-vert            meters                  :offset-assert 60)
   (cam-notice-dist     meters                  :offset-assert 64)
   (enemy-options       enemy-option            :offset-assert 68)
   (trig-dist           meters                  :offset-assert 72)
   (trig-actor-group    (pointer actor-group)   :offset-assert 76) ;; guessed by decompiler
   (trig-mask-count     int8                    :offset-assert 80)
   (trig-mask           uint8                 2 :offset-assert 81) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x53
  :flag-assert         #xd00000053
  ;; field actor-option is likely a value type.
  (:methods
    (new (symbol type process (pointer float) pickup-type float) _type_) ;; 0
    (clear-mask-bits (_type_ int) none) ;; 12
    )
  )

(deftype fact-info-crate (fact-info)
  ((suck-count          int32         :offset-assert 40)
   )
  :method-count-assert 12
  :size-assert         #x2c
  :flag-assert         #xc0000002c
  ;; field actor-option is likely a value type.
  (:methods
    (new (symbol type process pickup-type float) _type_) ;; 0
    )
  )

(deftype fact-info-enemy-defaults (basic)
  ((idle-distance meters  :offset-assert 4)
   (pickup-type   int32   :offset-assert 8)
   (pickup-amount float   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *FACT-bank* fact-bank)
(define-extern pickup-type->string (function pickup-type string))
(define-extern *fact-info-enemy-defaults* fact-info-enemy-defaults)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; aligner-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++aligner-h:align-flags
(defenum align-flags
  :bitfield #t
  :type uint32
  (disabled) ;; keep object velocity
  (af01)
  (af02)
  (af03)
  (af04)
  (af05)
  )
;; ---aligner-h:align-flags

;; +++aligner-h:align-opts
(defenum align-opts
  :bitfield #t
  :type uint32
  (adjust-x-vel)
  (adjust-y-vel)
  (adjust-xz-vel)
  (keep-other-velocities)
  (adjust-quat) ;; 16
  (alop0)
  (alop1)
  (alop2)
  (alop3)
  (alop4)
  (alop5)
  (no-gravity)
  (ignore-y-if-zero)
  )
;; ---aligner-h:align-opts

(deftype align-control (basic)
  ((flags       align-flags              :offset-assert 4) ;; guessed by decompiler
   (process     process-drawable         :offset-assert 8) ;; guessed by decompiler
   (frame-group art-joint-anim           :offset-assert 12) ;; guessed by decompiler
   (frame-num   float                    :offset-assert 16)
   (matrix      matrix           2 :inline      :offset-assert 32) ;; guessed by decompiler
   (transform   transform        2 :inline      :offset-assert 160) ;; guessed by decompiler
   (delta       transformq       :inline :offset-assert 256)
   (last-speed  meters                   :offset-assert 304)
   (align       transformq       :inline :offset 160)
   )
  :method-count-assert 14
  :size-assert         #x134
  :flag-assert         #xe00000134
  (:methods
    (new (symbol type process) _type_) ;; 0
    (compute-alignment! (_type_) transformq) ;; 9
    (align! (_type_ align-opts float float float) trsqv) ;; 10
    (align-control-method-11 () none) ;; 11 ;; (align-vel-and-quat-only! (_type_ align-opts vector int float float) trsqv)
    (align-control-method-12 () none) ;; 12 ;; (first-transform (_type_) transform)
    (align-control-method-13 () none) ;; 13 ;; (second-transform (_type_) transform)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; penetrate-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++game-h:knocked-type
(defenum knocked-type
  :type uint8
  (knocked-type-0 0)
  (knocked-type-1 1)
  (knocked-type-2 2)
  (knocked-type-3 3)
  (knocked-type-4 4) ;; what the heck is this! (its on gator, and cant trigger it for the life of me)
  (knocked-type-5 5)
  (knocked-type-6 6)
  (knocked-type-7 7)
  (knocked-type-8 8)
  (knocked-type-9 9)
  (knocked-type-10 10)
  )
;; ---game-h:knocked-type

(defenum penetrate
  :type uint64
  :bitfield #t
  (touch 0)
  (generic-attack 1)
  (lunge 2)
  (flop 3)
  (punch 4)
  (spin 5)
  (roll 6)
  (uppercut 7)
  (bonk 8)
  (tube 9)
  (vehicle 10)
  (flut-attack 11)
  (board 12)
  (mech 13)
  (mech-punch 14)
  (mech-bonk 15)
  (dark-skin 16)
  (dark-punch 17)
  (dark-bomb 18)
  (dark-smack 19)
  (flut 20)
  (shield 21)
  (explode 22)
  (jak-yellow-shot 23)
  (jak-red-shot 24)
  (jak-blue-shot 25)
  (jak-dark-shot 26)
  (enemy-yellow-shot 27)
  (enemy-dark-shot 28)
  (eco-yellow 29)
  (eco-red 30)
  (eco-blue 31)
  (eco-green 32)
  (knocked 33)
  (jak-red-shockwave 34)
  (jak-dark-nuke 35)
  (jak-dark-blackhole 36)
  (emp-blast 37)
  )
(define-extern penetrate->string (function penetrate string))
(define-extern penetrate-using->damage (function penetrate float))
(define-extern penetrated-by-all&hit-points->penetrated-by (function penetrate int penetrate))
(define-extern pu->knocked-type (function penetrate knocked-type))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type nav-control structure)
(declare-type path-control basic)
(declare-type vol-control basic)
(declare-type fact-info basic)
(declare-type actor-link-info basic)
(declare-type water-control basic)
(declare-type carry-info basic)
(declare-type rigid-body-control basic)

(defenum state-flags
  :bitfield #t
  :type uint32
  (sf0 0)
  (sf1 1)
  (sf2 2)
  (sf3 3)
  (sf4 4)
  (sf5 5)
  (sf6 6)
  (sf7 7)
  (sf8 8)
  (sf9 9)
  (sf10 10)
  (sf11 11)
  (sf12 12)
  (sf13 13)
  (sf14 14)
  (sf15 15)
  (sf16 16)
  (sf17 17)
  (sf18 18)
  (sf19 19)
  (sf20 20)
  (sf21 21)
  (sf22 22)
  (sf23 23)
  (sf24 24)
  (sf25 25)
  (sf26 26)
  (sf27 27)
  (sf28 28)
  (sf29 29)
  (sf30 30)
  (sf31 31)
  )

(deftype process-drawable (process)
  "This is the main base class for in-game objects.
   This handles drawing, collision, animation, navigation, particles, sounds, physics, etc.
   The actual child classes will add most of the functionality, and this just serves as a common
   container for references to the `-control` objects for this object."
  ((root        trsqv                     :offset-assert 128) ;; guessed by decompiler
   (node-list   cspace-array              :offset-assert 132) ;; guessed by decompiler
   (draw        draw-control              :offset-assert 136) ;; guessed by decompiler
   (skel        joint-control             :offset-assert 140) ;; guessed by decompiler
   (nav         nav-control               :offset-assert 144) ;; guessed by decompiler
   (align       align-control             :offset-assert 148) ;; guessed by decompiler
   (path        path-control              :offset-assert 152) ;; guessed by decompiler
   (vol         vol-control               :offset-assert 156) ;; guessed by decompiler
   (fact        fact-info                 :offset-assert 160) ;; guessed by decompiler
   (link        actor-link-info           :offset-assert 164) ;; guessed by decompiler
   (part        sparticle-launch-control  :offset-assert 168) ;; guessed by decompiler
   (water       water-control             :offset-assert 172) ;; guessed by decompiler
   (sound       ambient-sound             :offset-assert 176) ;; guessed by decompiler
   (carry       carry-info                :offset-assert 180) ;; guessed by decompiler
   (rbody       rigid-body-control        :offset-assert 184) ;; guessed by decompiler
   (state-flags state-flags               :offset-assert 188) ;; guessed by decompiler
   (state-time  time-frame                :offset-assert 192) ;; time-frame
   )
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14005000c8
  (:methods
    (initialize-skeleton (_type_ skeleton-group pair) draw-control) ;; 14
    (initialize-skeleton-by-name (_type_ string) draw-control) ;; 15
    (apply-alignment (_type_ align-opts transformq vector) trsqv) ;; 16
    (cleanup-for-death (_type_) none) ;; 17
    (relocate-nav (_type_ int) none) ;; 18
    (evaluate-joint-control (_type_) none) ;; 19
    )
  (:states
    process-drawable-idle ;; associated process guessed by decompiler, old: (state process-drawable)
    (process-drawable-art-error string) ;; associated process guessed by decompiler, old: (state string process-drawable)
    )
  )

(deftype process-drawable-reserved (process-drawable)
  "A process drawable with a lot of unused method slots.
   GOAL cannot increase the number of methods at runtime, so, for interactive development, it is useful
   to have a type with a large number of slots which can be turned into real methods without needed to reboot the PS2."
  ()
  :method-count-assert 218
  :size-assert         #xc8
  :flag-assert         #xda005000c8
  (:methods
    (process-drawable-reserved-method-20 () none)
    (process-drawable-reserved-method-21 () none)
    (process-drawable-reserved-method-22 () none)
    (process-drawable-reserved-method-23 () none)
    (process-drawable-reserved-method-24 () none)
    (process-drawable-reserved-method-25 () none)
    (process-drawable-reserved-method-26 () none)
    (process-drawable-reserved-method-27 () none)
    (process-drawable-reserved-method-28 () none)
    (process-drawable-reserved-method-29 () none)
    (process-drawable-reserved-method-30 () none)
    (process-drawable-reserved-method-31 () none)
    (process-drawable-reserved-method-32 () none)
    (process-drawable-reserved-method-33 () none)
    (process-drawable-reserved-method-34 () none)
    (process-drawable-reserved-method-35 () none)
    (process-drawable-reserved-method-36 () none)
    (process-drawable-reserved-method-37 () none)
    (process-drawable-reserved-method-38 () none)
    (process-drawable-reserved-method-39 () none)
    (process-drawable-reserved-method-40 () none)
    (process-drawable-reserved-method-41 () none)
    (process-drawable-reserved-method-42 () none)
    (process-drawable-reserved-method-43 () none)
    (process-drawable-reserved-method-44 () none)
    (process-drawable-reserved-method-45 () none)
    (process-drawable-reserved-method-46 () none)
    (process-drawable-reserved-method-47 () none)
    (process-drawable-reserved-method-48 () none)
    (process-drawable-reserved-method-49 () none)
    (process-drawable-reserved-method-50 () none)
    (process-drawable-reserved-method-51 () none)
    (process-drawable-reserved-method-52 () none)
    (process-drawable-reserved-method-53 () none)
    (process-drawable-reserved-method-54 () none)
    (process-drawable-reserved-method-55 () none)
    (process-drawable-reserved-method-56 () none)
    (process-drawable-reserved-method-57 () none)
    (process-drawable-reserved-method-58 () none)
    (process-drawable-reserved-method-59 () none)
    (process-drawable-reserved-method-60 () none)
    (process-drawable-reserved-method-61 () none)
    (process-drawable-reserved-method-62 () none)
    (process-drawable-reserved-method-63 () none)
    (process-drawable-reserved-method-64 () none)
    (process-drawable-reserved-method-65 () none)
    (process-drawable-reserved-method-66 () none)
    (process-drawable-reserved-method-67 () none)
    (process-drawable-reserved-method-68 () none)
    (process-drawable-reserved-method-69 () none)
    (process-drawable-reserved-method-70 () none)
    (process-drawable-reserved-method-71 () none)
    (process-drawable-reserved-method-72 () none)
    (process-drawable-reserved-method-73 () none)
    (process-drawable-reserved-method-74 () none)
    (process-drawable-reserved-method-75 () none)
    (process-drawable-reserved-method-76 () none)
    (process-drawable-reserved-method-77 () none)
    (process-drawable-reserved-method-78 () none)
    (process-drawable-reserved-method-79 () none)
    (process-drawable-reserved-method-80 () none)
    (process-drawable-reserved-method-81 () none)
    (process-drawable-reserved-method-82 () none)
    (process-drawable-reserved-method-83 () none)
    (process-drawable-reserved-method-84 () none)
    (process-drawable-reserved-method-85 () none)
    (process-drawable-reserved-method-86 () none)
    (process-drawable-reserved-method-87 () none)
    (process-drawable-reserved-method-88 () none)
    (process-drawable-reserved-method-89 () none)
    (process-drawable-reserved-method-90 () none)
    (process-drawable-reserved-method-91 () none)
    (process-drawable-reserved-method-92 () none)
    (process-drawable-reserved-method-93 () none)
    (process-drawable-reserved-method-94 () none)
    (process-drawable-reserved-method-95 () none)
    (process-drawable-reserved-method-96 () none)
    (process-drawable-reserved-method-97 () none)
    (process-drawable-reserved-method-98 () none)
    (process-drawable-reserved-method-99 () none)
    (process-drawable-reserved-method-100 () none)
    (process-drawable-reserved-method-101 () none)
    (process-drawable-reserved-method-102 () none)
    (process-drawable-reserved-method-103 () none)
    (process-drawable-reserved-method-104 () none)
    (process-drawable-reserved-method-105 () none)
    (process-drawable-reserved-method-106 () none)
    (process-drawable-reserved-method-107 () none)
    (process-drawable-reserved-method-108 () none)
    (process-drawable-reserved-method-109 () none)
    (process-drawable-reserved-method-110 () none)
    (process-drawable-reserved-method-111 () none)
    (process-drawable-reserved-method-112 () none)
    (process-drawable-reserved-method-113 () none)
    (process-drawable-reserved-method-114 () none)
    (process-drawable-reserved-method-115 () none)
    (process-drawable-reserved-method-116 () none)
    (process-drawable-reserved-method-117 () none)
    (process-drawable-reserved-method-118 () none)
    (process-drawable-reserved-method-119 () none)
    (process-drawable-reserved-method-120 () none)
    (process-drawable-reserved-method-121 () none)
    (process-drawable-reserved-method-122 () none)
    (process-drawable-reserved-method-123 () none)
    (process-drawable-reserved-method-124 () none)
    (process-drawable-reserved-method-125 () none)
    (process-drawable-reserved-method-126 () none)
    (process-drawable-reserved-method-127 () none)
    (process-drawable-reserved-method-128 () none)
    (process-drawable-reserved-method-129 () none)
    (process-drawable-reserved-method-130 () none)
    (process-drawable-reserved-method-131 () none)
    (process-drawable-reserved-method-132 () none)
    (process-drawable-reserved-method-133 () none)
    (process-drawable-reserved-method-134 () none)
    (process-drawable-reserved-method-135 () none)
    (process-drawable-reserved-method-136 () none)
    (process-drawable-reserved-method-137 () none)
    (process-drawable-reserved-method-138 () none)
    (process-drawable-reserved-method-139 () none)
    (process-drawable-reserved-method-140 () none)
    (process-drawable-reserved-method-141 () none)
    (process-drawable-reserved-method-142 () none)
    (process-drawable-reserved-method-143 () none)
    (process-drawable-reserved-method-144 () none)
    (process-drawable-reserved-method-145 () none)
    (process-drawable-reserved-method-146 () none)
    (process-drawable-reserved-method-147 () none)
    (process-drawable-reserved-method-148 () none)
    (process-drawable-reserved-method-149 () none)
    (process-drawable-reserved-method-150 () none)
    (process-drawable-reserved-method-151 () none)
    (process-drawable-reserved-method-152 () none)
    (process-drawable-reserved-method-153 () none)
    (process-drawable-reserved-method-154 () none)
    (process-drawable-reserved-method-155 () none)
    (process-drawable-reserved-method-156 () none)
    (process-drawable-reserved-method-157 () none)
    (process-drawable-reserved-method-158 () none)
    (process-drawable-reserved-method-159 () none)
    (process-drawable-reserved-method-160 () none)
    (process-drawable-reserved-method-161 () none)
    (process-drawable-reserved-method-162 () none)
    (process-drawable-reserved-method-163 () none)
    (process-drawable-reserved-method-164 () none)
    (process-drawable-reserved-method-165 () none)
    (process-drawable-reserved-method-166 () none)
    (process-drawable-reserved-method-167 () none)
    (process-drawable-reserved-method-168 () none)
    (process-drawable-reserved-method-169 () none)
    (process-drawable-reserved-method-170 () none)
    (process-drawable-reserved-method-171 () none)
    (process-drawable-reserved-method-172 () none)
    (process-drawable-reserved-method-173 () none)
    (process-drawable-reserved-method-174 () none)
    (process-drawable-reserved-method-175 () none)
    (process-drawable-reserved-method-176 () none)
    (process-drawable-reserved-method-177 () none)
    (process-drawable-reserved-method-178 () none)
    (process-drawable-reserved-method-179 () none)
    (process-drawable-reserved-method-180 () none)
    (process-drawable-reserved-method-181 () none)
    (process-drawable-reserved-method-182 () none)
    (process-drawable-reserved-method-183 () none)
    (process-drawable-reserved-method-184 () none)
    (process-drawable-reserved-method-185 () none)
    (process-drawable-reserved-method-186 () none)
    (process-drawable-reserved-method-187 () none)
    (process-drawable-reserved-method-188 () none)
    (process-drawable-reserved-method-189 () none)
    (process-drawable-reserved-method-190 () none)
    (process-drawable-reserved-method-191 () none)
    (process-drawable-reserved-method-192 () none)
    (process-drawable-reserved-method-193 () none)
    (process-drawable-reserved-method-194 () none)
    (process-drawable-reserved-method-195 () none)
    (process-drawable-reserved-method-196 () none)
    (process-drawable-reserved-method-197 () none)
    (process-drawable-reserved-method-198 () none)
    (process-drawable-reserved-method-199 () none)
    (process-drawable-reserved-method-200 () none)
    (process-drawable-reserved-method-201 () none)
    (process-drawable-reserved-method-202 () none)
    (process-drawable-reserved-method-203 () none)
    (process-drawable-reserved-method-204 () none)
    (process-drawable-reserved-method-205 () none)
    (process-drawable-reserved-method-206 () none)
    (process-drawable-reserved-method-207 () none)
    (process-drawable-reserved-method-208 () none)
    (process-drawable-reserved-method-209 () none)
    (process-drawable-reserved-method-210 () none)
    (process-drawable-reserved-method-211 () none)
    (process-drawable-reserved-method-212 () none)
    (process-drawable-reserved-method-213 () none)
    (process-drawable-reserved-method-214 () none)
    (process-drawable-reserved-method-215 () none)
    (process-drawable-reserved-method-216 () none)
    (process-drawable-reserved-method-217 () none)
    )
  )

(deftype attack-dir-info (structure)
  "Information about the position/direction of an attack."
  ((dir               vector :inline :offset-assert 0)
   (xz-dir            vector :inline :offset-assert 16)
   (attacker-velocity vector :inline :offset-assert 32)
   (pos               vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(defenum attack-mask
  :bitfield #t
  :type uint32
  (trans        0) ;; 1
  (vector       1) ;; 2
  (intersection 2) ;; 4
  (attacker     3) ;; 8
  (attack-time  4) ;; 16
  (invinc-time  5) ;; 32
  (mode         6) ;; 64
  (shove-back   7) ;; 128
  (shove-up     8) ;; 256
  (speed        9) ;; 512
  (dist        10) ;; 1024
  (control     11) ;; 2048
  (angle       12) ;; 4096
  (rotate-to   13) ;; 8192
  (prev-state  14) ;; 16384
  (id          15) ;; 32768
  (count       16) ;; hi 1
  (penetrate-using 17) ;; hi 2
  (attacker-velocity 18);; hi 4
  (damage      19) ;; hi 8
  (shield-damage 20) ;; hi16
  (vehicle-damage-factor        21) ;; hi 32
  (vehicle-impulse-factor         22) ;; hi 64
  (knock 23)
  (test 24)
  )

(declare-type touching-shapes-entry structure)
(deftype attack-info (structure)
  "Information about an incoming attack."
  ((trans                  vector           :inline :offset-assert 0)
   (vector                 vector           :inline :offset-assert 16)
   (attacker-velocity      vector           :inline :offset-assert 32)
   (intersection           vector           :inline :offset-assert 48)
   (attacker               handle                   :offset-assert 64)
   (attack-time            time-frame               :offset-assert 72) ;; time-frame
   (invinc-time            time-frame               :offset-assert 80) ;; time-frame
   (mask                   attack-mask              :offset-assert 88) ;; attack-mask
   (mode                   symbol                   :offset-assert 92) ;; guessed by decompiler
   (shove-back             meters                   :offset-assert 96)
   (shove-up               meters                   :offset-assert 100)
   (speed                  meters                   :offset-assert 104)
   (dist                   meters                   :offset-assert 108)
   (control                float                    :offset-assert 112)
   (angle                  symbol                   :offset-assert 116) ;; guessed by decompiler
   (rotate-to              degrees                  :offset-assert 120) ;; degrees
   (prev-state             state                    :offset-assert 124) ;; guessed by decompiler
   (id                     uint32                   :offset-assert 128)
   (count                  uint32                   :offset-assert 132)
   (penetrate-using        penetrate                :offset-assert 136) ;; penetrate
   (damage                 float                    :offset-assert 144)
   (shield-damage          float                    :offset-assert 148)
   (vehicle-damage-factor  float                    :offset-assert 152)
   (vehicle-impulse-factor float                    :offset-assert 156)
   (knock                  knocked-type             :offset-assert 160) ;; knocked-type
   (test                   symbol                   :offset-assert 164) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #xa8
  :flag-assert         #xc000000a8
  ;; field handle is likely a value type.
  (:methods
    (attack-info-method-9 (_type_ attack-info process-drawable process-drawable) none) ;; 9
    (compute-intersect-info (_type_ object process-drawable process touching-shapes-entry) attack-info) ;; 10
    (combine! (_type_ attack-info process-drawable) attack-info) ;; 11
    )
  )

(deftype ground-tween-info (structure)
  ((chan  uint8  3 :offset-assert 0) ;; guessed by decompiler
   (blend float  3 :offset-assert 4) ;; guessed by decompiler
   (group uint32 5 :offset-assert 16) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; script-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type script-context structure)
(declare-type load-state structure)
(define-extern *load-state* load-state)

(deftype script-form (structure)
  ((name symbol                            :offset-assert 0) ;; guessed by decompiler
   (spec pair                              :offset-assert 4) ;; guessed by decompiler
   (func (function script-context object)  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (script-form-method-9 () none) ;; 9 ;; (script-form-method-9 () none)
    )
  )

(deftype script-context (structure)
  ((load-state   load-state    :offset-assert 0) ;; guessed by decompiler
   (key          object        :offset-assert 4) ;; guessed by decompiler
   (process      process       :offset-assert 8) ;; guessed by decompiler
   (trans        vector        :offset-assert 12)
   (side-effect? symbol        :offset-assert 16) ;; guessed by decompiler
   (got-error?   symbol        :offset-assert 20) ;; guessed by decompiler
   (expr         pair          :offset-assert 24) ;; guessed by decompiler
   (param-count  int32         :offset-assert 28)
   (param        object     16 :offset-assert 32) ;; guessed by decompiler
   ;(UNKNOWN      UNKNOWN       :offset-assert -1) ;; field could not be read.
   (param-type   object     16 :offset-assert 96) ;; guessed by decompiler
   ;(UNKNOWN      UNKNOWN       :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 12
  :size-assert         #xa0
  :flag-assert         #xc000000a0
  ;; field key uses ~A with a signed load. field expr uses ~A with a signed load.
  (:methods
    (new (symbol type object process vector) _type_) ;; 0
    (eval! (_type_ pair) object) ;; 9
    (script-context-method-10 () none) ;; 10 ;; (script-context-method-10 (_type_ object pair) object)
    (script-context-method-11 () none) ;; 11 ;; (script-context-method-11 (_type_ pair pair symbol) symbol)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type continue-point basic)

(deftype scene-actor (basic)
  ((name                string  :offset-assert 4) ;; guessed by decompiler
   (level               symbol  :offset-assert 8) ;; guessed by decompiler
   (art-group           string  :offset-assert 12) ;; guessed by decompiler
   (prefix              string  :offset-assert 16) ;; guessed by decompiler
   (draw-frames         pair    :offset-assert 20) ;; guessed by decompiler
   (scissor-frames      pair    :offset-assert 24) ;; guessed by decompiler
   (shadow-frames       basic   :offset-assert 28)
   (cloth-reset-frames  basic   :offset-assert 32)
   (cloth-commands      basic   :offset-assert 36)
   (camera              int16   :offset-assert 40)
   (light-index         uint8   :offset-assert 42)
   (shadow-mask         uint8   :offset-assert 43)
   (shadow-values       uint32  :offset-assert 44)
   (flags               uint32  :offset-assert 48)
   (command-list        basic   :offset-assert 52)
   (shadow-flags        int32   :offset-assert 56)
   (shadow-volume-joint basic   :offset-assert 60)
   (draw-seg            uint64  :offset-assert 64)
   (no-draw-seg         uint64  :offset-assert 72)
   (last-frame          float   :offset-assert 80)
   (process             uint64  :offset-assert 88) ;; handle
   )
  :method-count-assert 10
  :size-assert         #x60
  :flag-assert         #xa00000060
  (:methods
    (scene-actor-method-9 () none) ;; 9 ;; (scene-actor-method-9 (_type_ scene-player) (pointer process))
    )
  )

(defenum scene-flags
  :bitfield #t
  :type uint32
  )

(deftype scene (art-group)
  ((scene-flags      scene-flags                  :offset-assert 32)
   (mask-to-clear    process-mask                 :offset-assert 36) ;; guessed by decompiler
   (entity           string                       :offset-assert 40) ;; guessed by decompiler
   (art-group        string                       :offset-assert 44) ;; guessed by decompiler
   (anim             string                       :offset-assert 48) ;; guessed by decompiler
   (parts            int32                        :offset-assert 52)
   (command-list     pair                         :offset-assert 56) ;; guessed by decompiler
   (cut-list         pair                         :offset-assert 60) ;; guessed by decompiler
   (wait-max-time    time-frame                   :offset-assert 64) ;; time-frame
   (wait-air-time    time-frame                   :offset-assert 72) ;; time-frame
   (wait-ground-time time-frame                   :offset-assert 80) ;; time-frame
   (actor            (array scene-actor)          :offset-assert 88) ;; guessed by decompiler
   (load-point       continue-point               :offset-assert 92) ;; guessed by decompiler
   (end-point        continue-point               :offset-assert 96) ;; guessed by decompiler
   (borrow           pair                         :offset-assert 100) ;; guessed by decompiler
   (sfx-volume       float                        :offset-assert 104)
   (ambient-volume   float                        :offset-assert 108)
   (music-volume     float                        :offset-assert 112)
   (music-delay      float                        :offset-assert 116)
   (scene-task       uint16                       :offset-assert 120)
   (on-running       basic                        :offset-assert 124)
   (on-complete      basic                        :offset-assert 128)
   )
  :method-count-assert 18
  :size-assert         #x84
  :flag-assert         #x1200000084
  ;; field on-running uses ~A with a signed load. field on-complete uses ~A with a signed load.
  (:methods
    (scene-method-16 () none) ;; 16 ;; (scene-method-16 (_type_) _type_)
    (scene-method-17 () none) ;; 17
    )
  )

(deftype scene-player (process-drawable)
  ((scene-list           (array scene)         :offset-assert 200) ;; guessed by decompiler
   (scene                scene                 :offset-assert 204) ;; guessed by decompiler
   (scene-index          int32                 :offset-assert 208)
   (anim                 spool-anim            :offset-assert 212) ;; guessed by decompiler
   (next-anim            spool-anim            :offset-assert 216) ;; guessed by decompiler
   (camera               handle                :offset-assert 224) ;; handle
   (main-entity          entity-actor          :offset-assert 232) ;; guessed by decompiler
   (wait                 symbol                :offset-assert 236) ;; guessed by decompiler
   (old-target-pos       transformq    :inline :offset-assert 240)
   (pre-cut-frame        basic                 :offset-assert 288)
   (preload-continue     string                :offset-assert 292) ;; guessed by decompiler
   (preload-sound        basic                 :offset-assert 296)
   (dma-max              uint32                :offset-assert 300)
   (gui-id               sound-id              :offset-assert 304) ;; guessed by decompiler
   (aborted?             symbol                :offset-assert 308) ;; guessed by decompiler
   (scene-start-time     time-frame                :offset-assert 312) ;; time-frame
   (targ-speed           float                 :offset-assert 320)
   (cur-speed            float                 :offset-assert 324)
   (speed-change-time    time-frame                :offset-assert 328) ;; time-frame
   (speed-press-time     time-frame                :offset-assert 336) ;; time-frame
   (speed-change-speed   float                 :offset-assert 344)
   (subtitle-change-time time-frame                :offset-assert 352) ;; time-frame
   (user-sound           sound-id      4       :offset-assert 360) ;; guessed by decompiler
   (last-frame           float                 :offset-assert 376)
   (end-point            basic                 :offset-assert 380)
   (blackout-end         basic                 :offset-assert 384)
   (new-trans-hook       basic                 :offset-assert 388)
   (cur-trans-hook       basic                 :offset-assert 392)
   (user-data            uint64                :offset-assert 400)
   )
  :method-count-assert 26
  :size-assert         #x198
  :flag-assert         #x1a01200198
  ;; field user-data uses ~A with a 64-bit load.
  (:methods
    (scene-player-method-20 () none) ;; 20 ;; (wait (symbol) _type_ :state)
    (scene-player-method-21 () none) ;; 21 ;; (release () _type_ :state)
    (scene-player-method-22 () none) ;; 22 ;; (play-anim () _type_ :state)
    (scene-player-method-23 () none) ;; 23 ;; (scene-player-method-23 (_type_ string symbol) none)
    (scene-player-method-24 () none) ;; 24 ;; (scene-player-method-24 (_type_ basic symbol) scene)
    (scene-player-method-25 () none) ;; 25 ;; (scene-player-method-25 (_type_ float) none)
    )
  )

(define-extern *scene-player* (pointer scene-player))
(define-extern *debug-menu-scene-play* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sync-info-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++sync-info-h:sync-flags
(defenum sync-flags
  :type uint64
  :bitfield #t
  (pong 0)
  )
;; ---sync-info-h:sync-flags

(deftype sync-info-params (structure)
  "Parameters used to set up a [[sync-info]]."
  ((sync-type  symbol  :offset-assert 0) ;; guessed by decompiler
   (sync-flags sync-flags :offset-assert 8) ;; sync-flags
   (entity     entity-actor :offset-assert 16)
   (period     uint32  :offset-assert 20)
   (percent    float   :offset-assert 24)
   (ease-in    float   :offset-assert 28)
   (ease-out   float   :offset-assert 32)
   (pause-in   float   :offset-assert 36)
   (pause-out  float   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sync-info (structure)
  ((sync-flags sync-flags :offset-assert 0)
   (offset     float   :offset-assert 8)
   (period     uint32  :offset-assert 12)
   )
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  (:methods
    (get-current-phase-no-mod (_type_) float) ;; 9
    (get-phase-offset (_type_) float) ;; 10
    (get-norm! (_type_ int) float) ;; 11
    (get-scaled-val! (_type_ float int) float) ;; 12
    (initialize! (_type_ sync-info-params) none) ;; 13
    (get-timeframe-offset! (_type_ time-frame) time-frame) ;; 14
    (sync-now! (_type_ float) none) ;; 15
    )
  )

(deftype sync-linear (sync-info)
  ()
  :pack-me
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  )

(deftype sync-eased (sync-info)
  ((tlo       float  :offset-assert 16)
   (thi       float  :offset-assert 20)
   (ylo       float  :offset-assert 24)
   (m2        float  :offset-assert 28)
   (yend      float  :offset-assert 32)
   (pause-in  float  :offset-assert 36)
   (pause-out float  :offset-assert 40)
   )
  :pack-me
  :method-count-assert 16
  :size-assert         #x2c
  :flag-assert         #x100000002c
  )

(deftype sync-paused (sync-info)
  ((pause-in  float  :offset-assert 16)
   (pause-out float  :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  )

(deftype delayed-rand-float (structure)
  ((min-time   int32   :offset-assert 0)
   (max-time   int32   :offset-assert 4)
   (max-val    float   :offset-assert 8)
   (timer      int32   :offset-assert 12)
   (start-time time-frame :offset-assert 16) ;; time-frame
   (value      float   :offset-assert 24)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x1c
  :flag-assert         #xd0000001c
  (:methods
    (set-params! (_type_ int int float) float) ;; 9
    (reset! (_type_) float) ;; 10
    (update! (_type_) float) ;; 11
    (update-and-clear! (_type_) float) ;; 12
    )
  )

(deftype oscillating-float (structure)
  ((value   float  :offset-assert 0)
   (target  float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (max-vel float  :offset-assert 12)
   (damping float  :offset-assert 16)
   (accel   float  :offset-assert 20)
   )
  :allow-misaligned
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (set-params! (_type_ float float float float) float) ;; 9
    (update! (_type_ float) float) ;; 10
    )
  )

(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert 0)
   (max-value  float                     :offset-assert 24)
   (min-value  float                     :offset-assert 28)
   (elasticity float                     :offset-assert 32)
   (state      int32                     :offset-assert 36)
   )
  :allow-misaligned
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (set-params! (_type_ float float float float float float float) float) ;; 9
    (update! (_type_ float) float) ;; 10
    (at-min? (_type_) symbol) ;; 11
    (at-max? (_type_) symbol) ;; 12
    )
  )

(deftype delayed-rand-vector (structure)
  ((min-time   int32          :offset-assert 0)
   (max-time   int32          :offset-assert 4)
   (xz-max     float          :offset-assert 8)
   (y-max      float          :offset-assert 12)
   (timer      int32          :offset-assert 16)
   (start-time time-frame     :offset-assert 24) ;; time-frame
   (value      vector :inline :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (set-params! (_type_ int int float float) vector) ;; 9
    (update-now! (_type_) vector) ;; 10
    (update-with-delay! (_type_) vector) ;; 11
    (update-with-delay-or-reset! (_type_) vector) ;; 12
    )
  )

(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert 0)
   (target  vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (max-vel float          :offset-assert 48)
   (damping float          :offset-assert 52)
   (accel   float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (set-params! (_type_ vector float float float) vector) ;; 9
    (update! (_type_ vector) vector) ;; 10
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pov-camera-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++pov-camera-h:pov-camera-flag
(defenum pov-camera-flag
  :bitfield #t
  :type int32
  (notify-of-abort 0)
  (allow-abort 1)
  (inherit-orientation 2)
  (pcf3 3)
  )
;; ---pov-camera-h:pov-camera-flag

(deftype pov-camera (process-drawable)
  ((flags               pov-camera-flag :offset-assert 200) ;; pov-camera-flag
   (debounce-start-time time-frame    :offset-assert 208) ;; time-frame
   (notify-handle       handle        :offset-assert 216) ;; handle
   (anim-name           string        :offset-assert 224) ;; guessed by decompiler
   (command-list        pair          :offset-assert 228) ;; guessed by decompiler
   (mask-to-clear       process-mask  :offset-assert 232) ;; guessed by decompiler
   (music-volume-movie  float         :offset-assert 236)
   (sfx-volume-movie    float         :offset-assert 240)
   )
  :method-count-assert 30
  :size-assert         #xf4
  :flag-assert         #x1e008000f4
  (:state-methods
    pov-camera-abort ;; 20
    pov-camera-done-playing ;; 21
    pov-camera-playing ;; 22
    pov-camera-start-playing ;; 23
    pov-camera-startup ;; 24
    )
  (:methods
    (pov-camera-method-25 () none) ;; 25 ;; (abort? (_type_) symbol)
    (pov-camera-method-26 () none) ;; 26 ;; (target-grabbed? (_type_) symbol)
    (pov-camera-method-27 () none) ;; 27 ;; (pov-camera-method-27 () none)
    (pov-camera-method-28 () none) ;; 28 ;; (pov-camera-method-28 () none)
    (pov-camera-method-29 () none) ;; 29 ;; (target-released? (_type_) symbol)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; smush-control-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype smush-control (structure)
  "This holds information about the current state of an object's smush."
  ((start-time  time-frame :offset-assert 0)
   (period      float      :offset-assert 8)
   (duration    float      :offset-assert 12)
   (amp         float      :offset-assert 16)
   (damp-amp    float      :offset-assert 20)
   (damp-period float      :offset-assert 24)
   (ticks       float      :offset-assert 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (set-zero! "Reset this [[smush-control]]." (_type_) _type_) ;; 9
    (update! "Calculate the next smush amplitude and update the smush state." (_type_) float) ;; 10
    (get-no-update "Get the next amplitude, but do not update the smush state." (_type_) float) ;; 11
    (activate! "Start the smush with the given parameters." (_type_ float int int float float clock) _type_) ;; 12
    (nonzero-amplitude? "Is the smush currently active?" (_type_) symbol) ;; 13
    (die-on-next-update! "Set the dampening period so the smush stops on the next update." (_type_) _type_) ;; 14
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pos-history (structure)
  ((points     (inline-array vector)  :offset-assert 0) ;; guessed by decompiler
   (num-points int32                  :offset-assert 4)
   (h-first    int32                  :offset-assert 8)
   (h-last     int32                  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype debug-vertex (structure)
  ((trans  vector4w :inline :offset-assert 0)
   (normal vector3h :inline :offset-assert 16)
   (st     vector2h :inline :offset-assert 22)
   (color  uint32           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype debug-vertex-stats (basic)
  ((length    int32            :offset-assert 4)
   (pos-count int32            :offset-assert 8)
   (vertex    debug-vertex 600 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4b10
  :flag-assert         #x900004b10
  )

(define-extern *debug-vertex-stats* debug-vertex-stats)

(define-extern *color-black* rgba)
(define-extern *color-white* rgba)
(define-extern *color-gray* rgba)
(define-extern *color-red* rgba)
(define-extern *color-green* rgba)
(define-extern *color-blue* rgba)
(define-extern *color-cyan* rgba)
(define-extern *color-magenta* rgba)
(define-extern *color-yellow* rgba)
(define-extern *color-light-red* rgba)
(define-extern *color-light-green* rgba)
(define-extern *color-light-blue* rgba)
(define-extern *color-light-cyan* rgba)
(define-extern *color-light-magenta* rgba)
(define-extern *color-light-yellow* rgba)
(define-extern *color-dark-red* rgba)
(define-extern *color-dark-green* rgba)
(define-extern *color-dark-blue* rgba)
(define-extern *color-dark-cyan* rgba)
(define-extern *color-dark-magenta* rgba)
(define-extern *color-dark-yellow* rgba)
(define-extern *color-orange* rgba)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-mod-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum joint-mod-mode
  :bitfield #t
  :type uint32
  (flex-blend)
  (look-at)
  (world-look-at)
  (rotate)
  (joint-set)
  (joint-set*)
  (rotate2) ;; ??
  (reset)
  (polar-look-at)
  (joint-set*-world)
  (gun-look-at)
  (foot-rot)
  (joint-set-world)
  )

;; +++joint-mod-h:track-mode
(defenum track-mode
  :bitfield #t
  :type uint16
  (track-on       0) ;; 1
  (track-x        1) ;; 2
  (track-y        2) ;; 4
  (lock-on        3) ;; 8
  (no-trans       4) ;; 16
  (no-rotate      5) ;; 32
  (no-scale       6) ;; 64
  )
;; ---joint-mod-h:track-mode

(defenum joint-mod-ik-flags
  :bitfield #t
  :type uint32
  (enable)
  (elbow-trans-neg)
  (elbow-rot-neg)
  )

(deftype joint-mod (basic)
  "Utility to modify a joint transform from code, rather than just getting it from animation.
   This is used to make jak look toward an enemy, for example."
  ((mode            joint-mod-mode           :offset-assert 4) ;; guessed by decompiler
   (process         process-drawable         :offset-assert 8) ;; guessed by decompiler
   (joint           cspace                   :offset-assert 12)
   (target          vector           :inline :offset-assert 16)
   (twist           vector           :inline :offset-assert 32)
   (twist-max       vector           :inline :offset-assert 48)
   (extra-twist     degrees                      :offset-assert 40 :overlay-at (-> twist z)) ;; degrees
   (track-mode      track-mode               :offset-assert 44 :overlay-at (-> twist w))
   (look-at-count   uint16                   :offset 46)
   (twist-range-x   meters                   :offset 56)
   (twist-range-y   meters                   :offset 60)
   (twist-speed-x   float                    :offset-assert 64)
   (twist-speed-y   float                    :offset-assert 68)
   (trans           vector           :inline :offset-assert 80)
   (smushy-old      float                    :offset 80)
   (smushy-off      float                    :offset 84)
   (smushyv         float                    :offset 88)
   (quat            quaternion       :inline :offset-assert 96)
   (scale           vector           :inline :offset-assert 112)
   (notice-time     time-frame                   :offset-assert 128) ;; time-frame
   (flex-blend      float                    :offset-assert 136)
   (blend           float                    :offset-assert 140)
   (old-blend       float                    :offset-assert 144)
   (max-dist        meters                   :offset-assert 148)
   (ignore-angle    degrees                      :offset-assert 152) ;; degrees
   (up              uint8                    :offset-assert 156)
   (nose            uint8                    :offset-assert 157)
   (ear             uint8                    :offset-assert 158)
   (base-joint      uint8                    :offset-assert 159)
   (base-nose       uint8                    :offset-assert 160)
   (shutting-down?  symbol                   :offset-assert 164) ;; guessed by decompiler
   (parented-scale? symbol                   :offset-assert 168) ;; guessed by decompiler
   )
  :method-count-assert 16
  :size-assert         #xac
  :flag-assert         #x10000000ac
  ;; field track-mode is likely a value type.
  (:methods
    (new (symbol type joint-mod-mode process-drawable int) _type_) ;; 0
    (mode-set! "Set the type of joint-mod and install the right callback." (_type_ joint-mod-mode) none) ;; 9
    (target-set! "Set the target position for look-at mode." (_type_ vector) none) ;; 10
    (look-at! "Activate joint mod to look at the process." (_type_ vector symbol process) none) ;; 11
    (reset-blend! "Set the blend to 0." (_type_) _type_) ;; 12
    (twist-set! "Set twist x,y,z. A value of #f will skip the set." (_type_ float float float) vector) ;; 13
    (trs-set! "Set translation, quaternion, scale. A value of #f will skip the set." (_type_ vector quaternion vector) none) ;; 14
    (shut-down "Disable the joint mod, possibly blending out depending on the type" (_type_) none) ;; 15
    )
  )

(deftype try-to-look-at-info (basic)
  ((who  handle  :offset-assert 8)
   (horz float   :offset-assert 16)
   (vert float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype joint-mod-spinner (basic)
  "Control a joint by just spinning it around an axis."
  ((spin-axis vector :inline :offset-assert 16)
   (angle     float          :offset-assert 32)
   (spin-rate float          :offset-assert 36)
   (enable    symbol         :offset-assert 40) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  (:methods
    (new "Create and attach a joint-mod-spinner to a joint." (symbol type process-drawable int vector float) _type_) ;; 0
    )
  )

(defenum joint-mod-base-flags
  :bitfield #t
  :type uint16
  (attached 0)
  (trans 1)
  (quat 2)
  (scale 3)
  )

(deftype joint-mod-base (structure)
  "Base type for most joint-mods"
  ((flags      joint-mod-base-flags  :offset-assert 0)
   (node-index int16   :offset-assert 2)
   (proc       (pointer process-drawable)  :offset-assert 4)
   (callback   (function cspace transformq none)   :offset-assert 8)
   )
  :method-count-assert 12
  :size-assert         #xc
  :flag-assert         #xc0000000c
  (:methods
    (init "Set up this joint-mod to modify the given joint of the given process. Will attach automatically if attached flag is set." (_type_ process-drawable uint joint-mod-base-flags) none) ;; 9
    (attach-callback "Take control of the specified joint by modifying the cspace callback." (_type_) none) ;; 10
    (remove-callback "Remove this callback and set param0 to #f to use the default (animated joint)" (_type_) none) ;; 11
    )
  )

(deftype joint-mod-rotate-local (joint-mod-base)
  ((rotation quaternion :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x20
  :flag-assert         #xc00000020
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol) _type_)
    )
  )

(deftype joint-mod-rotate-world (joint-mod-base)
  "Add an additional rotation to a joint (right multiply)"
  ((rotation quaternion :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x20
  :flag-assert         #xc00000020
  )

(deftype joint-mod-set-local (joint-mod-base)
  "Override the trans, quat, and scale of the joint transform. The component to override is selected by the flag."
  ((transform transformq :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol symbol symbol) _type_)
    )
  )

(deftype joint-mod-add-local (joint-mod-base)
  "Add to the trans, rotate the quat, and multiply the scale of the joint transform. The components can be selected by the flag.
   Unlike jak 2, this actually multiplies the scale, instead of adding."
  ((transform transformq :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol symbol symbol) _type_)
    )
  )

(deftype joint-mod-set-world (joint-mod-base)
  "Directly overwrite the _bone_ transform (ignoring the parent entirely).
   This does not pay attention to the flags."
  ((transform transformq :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol) _type_)
    )
  )

(deftype joint-mod-set-world-no-trans (joint-mod-base)
  "Set the rotation and scale of the _bone_ directly to the values from this transform.
   The translation is kept from the result of the normal parented value."
  ((transform transformq :inline :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

(deftype joint-mod-blend-local (joint-mod-base)
  "Blend the _joint_ transform between this transform and the animated one.
   Then, apply the normal parented transform."
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (blend           float              :offset-assert 112)
   )
  :method-count-assert 12
  :size-assert         #x74
  :flag-assert         #xc00000074
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol) _type_)
    )
  )

;; added - I really have no idea what is going on here

(deftype joint-mod-blend-world-work (structure)
  ((mat1 matrix :inline)
   (mat2 matrix :inline)
   (quat quaternion :inline)
   (vec vector :inline))
   )

(deftype joint-mod-blend-world (joint-mod-base)
  "Blend the _bone_ transform between this one and the animated one."
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (blend           float              :offset-assert 112)
   )
  :method-count-assert 12
  :size-assert         #x74
  :flag-assert         #xc00000074
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable int symbol float) _type_)
    )
  )

(deftype joint-mod-ik (basic)
  ((flags                  joint-mod-ik-flags                                          :offset-assert 4) ;; guessed by decompiler
   (process                process-drawable                                            :offset-assert 8) ;; guessed by decompiler
   (hand-dist              float                                                       :offset-assert 12)
   (handle-pos             vector                                              :inline :offset-assert 16)
   (elbow-pole-vector-axis uint32                                                      :offset-assert 32)
   (elbow-rotation-axis    uint32                                                      :offset-assert 36)
   (user-position          vector                                              :inline :offset-assert 48)
   (user-normal            vector                                              :inline :offset-assert 64)
   (user-blend             float                                                       :offset-assert 80)
   (user-float             float                                                       :offset-assert 84)
   (callback               (function joint-mod-ik matrix matrix vector object)         :offset-assert 88) ;; guessed by decompiler
   (shoulder-matrix-no-ik  matrix                                              :inline :offset-assert 96)
   (elbow-matrix-no-ik     matrix                                              :inline :offset-assert 160)
   (blend                  float                                                       :offset-assert 224)
   (blend-interp           float                                                       :offset-assert 228)
   )
  :method-count-assert 11
  :size-assert         #xe8
  :flag-assert         #xb000000e8
  (:methods
    (new (symbol type process-drawable int float) _type_) ;; 0
    (set-ik-target! (_type_ vector) none) ;; 9
    (enable-set! (_type_ symbol) none) ;; 10
    )
  )

(deftype ik-limb-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(defenum joint-mod-polar-flags
  :type uint32
  :bitfield #t
  (no-z-rot 0)
  (blending-to-zero 1)
  (negate-nose 2)
  (negate-ear 3)
  (negate-up 4)
  )

(deftype joint-mod-polar-look-at (basic)
  ((flags                   joint-mod-polar-flags         :offset-assert 4)
   (ear                     int8           :offset-assert 8)
   (up                      int8           :offset-assert 9)
   (nose                    int8           :offset-assert 10)
   (polar-internal-tilt-max float          :offset-assert 12)
   (polar-internal-radius   float          :offset-assert 16)
   (polar-external-tilt-max float          :offset-assert 20)
   (polar-external-radius   float          :offset-assert 24)
   (upward-tilt             float          :offset-assert 28)
   (downward-tilt           float          :offset-assert 32)
   (forward-twist           float          :offset-assert 36)
   (backward-twist          float          :offset-assert 40)
   (target                  vector :inline :offset-assert 48)
   (blend-duration          time-frame         :offset-assert 64)
   (blend-start-time        time-frame         :offset-assert 72)
   (blend-start-value       float          :offset-assert 80)
   (blend-max               float          :offset-assert 84)
   )
  :method-count-assert 15
  :size-assert         #x58
  :flag-assert         #xf00000058
  (:methods
    (initialize "Attach joint-mod to process and set defaults." (_type_ process-drawable int) none) ;; 9
    (set-target! "Update the target position." (_type_ vector) none) ;; 10
    (set-both-targets! "Update the target position of this mod, and a second one." (_type_ joint-mod-polar-look-at vector) none) ;; 11
    (blend-on! "Start blending this joint mod on." (_type_ time-frame float symbol) none) ;; 12
    (blend-to-off! "Start blending to disable this joint mod." (_type_ time-frame symbol) none) ;; 13
    (get-start-blend! "Determine what blend to use when starting a new one." (_type_) float) ;; 14
    )
  )

(define-extern joint-mod-debug-draw "Debug draw the bone transform for the associated bone of a joint-mod" (function joint-mod none))
(define-extern joint-mod-spinner-callback
               "cspace callback for joint-mod-spinner. Update the cspace's bone from the parent transformq, plus the rotation from this spinner."
               (function cspace transformq none))
(define-extern joint-mod-rotate-local-callback
               "Apply an additional rotation to the transform (left side quaternion multiplication"
               (function cspace transformq none))
(define-extern vector<-cspace2! "Same as vector<-cspace! Convert a bone matrix from a cspace to the origin of the bone frame." (function vector cspace vector))
(define-extern joint-mod-rotate-world-callback "Callback for joint-mod-rotate-world. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-set-local-callback "Callback for joint-mod-rotate-local. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-add-local-callback "Callback for joint-mod-add-local. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-set-world-callback "Callback for joint-mod-set-world. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-set-world-no-trans-callback "Callback for joint-mod-set-world-no-trans. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-blend-local-callback "Callback for joint-mod-blend-local. See comment on that type." (function cspace transformq none))
(define-extern joint-mod-blend-world-callback "Callback for joint-mod-blend-world. See comment on that type." (function cspace transformq none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-func-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-mesh-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-tri-result (structure)
  "A triangle result of a collision."
  ((vertex      vector      3 :inline :offset-assert 0) ;; guessed by decompiler
   (intersect   vector      :inline :offset-assert 48)
   (normal      vector      :inline :offset-assert 64)
   (pat         pat-surface         :offset-assert 80) ;; guessed by decompiler
   (collide-ptr basic               :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype collide-mesh-tri (structure)
  "A triangle for foreground collision meshes."
  ((vertex-index uint8       3 :offset-assert 0) ;; guessed by decompiler
   (unused       uint8         :offset-assert 3)
   (pat          pat-surface   :offset-assert 4) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-mesh (basic)
  "A collision mesh for foreground objects,
   bound to the joint specified by `joint-id`."
  ((joint-id    int32                   :offset-assert 4)
   (num-tris    uint32                  :offset-assert 8)
   (num-verts   uint32                  :offset-assert 12)
   (vertex-data (inline-array vector)   :offset-assert 16) ;; guessed by decompiler
   (tris        collide-mesh-tri      1 :inline :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 16
  :size-assert         #x28
  :flag-assert         #x1000000028
  (:methods
    (collide-mesh-method-9 () none) ;; 9 ;; (debug-draw-tris (_type_ process-drawable int) none)
    (collide-mesh-method-10 () none) ;; 10 ;; (overlap-test (_type_ collide-mesh-cache-tri vector) symbol)
    (collide-mesh-method-11 () none) ;; 11 ;; (should-push-away-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float)
    (collide-mesh-method-12 () none) ;; 12 ;; (sphere-on-platform-test (_type_ collide-mesh-cache-tri collide-tri-result vector float) float)
    (collide-mesh-method-13 () none) ;; 13 ;; (unpack-mesh-to-cache! (_type_ (inline-array collide-mesh-cache-tri) matrix) none)
    (collide-mesh-method-14 () none) ;; 14 ;; (collide-mesh-math-1 (_type_ object object) none)
    (collide-mesh-method-15 () none) ;; 15 ;; (collide-mesh-math-2 (_type_ object object object) none)
    )
  )

(deftype collide-mesh-cache-tri (structure)
  "A triangle stored in the foreground mesh collide cache."
  ((vertex vector         3 :inline :offset-assert 0) ;; guessed by decompiler
   (normal vector         :inline :offset-assert 48)
   (bbox4w bounding-box4w :inline :offset-assert 64)
   (pat    pat-surface            :offset 60) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype collide-mesh-cache-entry (structure)
  "A foreground mesh collide cache entry."
  ((mat  matrix                 :inline  :offset-assert 0)
   (tris collide-mesh-cache-tri :dynamic :offset-assert 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype collide-mesh-cache (basic)
  "A collide cache for foreground meshes."
  ((used-size uint32       :offset-assert 4)
   (max-size  uint32       :offset-assert 8)
   (id        uint32       :offset-assert 12)
   (data      uint8  48000 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #xbb90
  :flag-assert         #xd0000bb90
  (:methods
    (collide-mesh-cache-method-9 () none) ;; 9 ;; (populate-for-prim-mesh (_type_ collide-shape-prim-mesh) collide-mesh-cache-entry)
    (is-id? "Does this cache have the given ID?" (_type_ int) symbol) ;; 10
    (next-id!
      "Reset all used entries in the cache and increment the ID.
       If the id is zero, set it to 1."
      (_type_) uint) ;; 11
    (collide-mesh-cache-method-12 () none) ;; 12 ;; (allocate! (_type_ int) collide-mesh-cache-entry)
    )
  )

(define-extern *collide-mesh-cache* collide-mesh-cache)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type collide-shape-prim basic)

(deftype collide-rider (structure)
  "Something that rides a moving object."
  ((rider-handle    handle                     :offset-assert 0) ;; handle
   (sticky-prim     collide-shape-prim         :offset-assert 8) ;; guessed by decompiler
   (prim-ry         float                      :offset-assert 12)
   (rider-local-pos vector             :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-rider-pool (basic)
  "A pool containing all the riders of an object."
  ((alloc-count int32            :offset-assert 4)
   (riders      collide-rider 20 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x290
  :flag-assert         #xb00000290
  (:methods
    (collide-rider-pool-method-9 () none) ;; 9 ;; (add-rider (_type_ handle) collide-rider)
    (prepare (_type_) none) ;; 10
    )
  )

(deftype pull-rider-info (structure)
  ((rider          collide-rider                :offset-assert 0)
   (rider-cshape   collide-shape-moving         :offset-assert 4) ;; guessed by decompiler
   (rider-delta-ry float                        :offset-assert 8)
   (rider-dest     vector               :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; +++collide-shape-h:overlaps-others-options
(defenum overlaps-others-options
  :type uint32
  :bitfield #t
  (oo0)
  (oo1)
  (oo2)
  (oo3)
  (oo4)
  )
;; ---collide-shape-h:overlaps-others-options

;; +++collide-shape-h:collide-action
(defenum collide-action
  :bitfield #t
  :type uint32
  (solid                  0) ;; 1
  (semi-solid             1) ;; 2
  (rideable               2) ;; 4
  (can-ride               3) ;; 8
  (dont-push-away         4) ;; 16
  (pull-rider-can-collide 5) ;; 32
  (deadly                 6) ;; 64
  (persistent-attack      7) ;; 128
  (no-smack               8) ;; 256
  (no-standon             9) ;; 512
  (block-turn-around     10) ;; 1024
  (check-edge            11) ;; 2048
  (check-stuck           12) ;; 4096
  (stuck-wall-escape     13) ;; 8192
  (no-normal-reset       14) ;; 163884
  (edge-grabbed          15) ;; 32768
  (nav-sphere            16) ;; hi 1
  )
;; ---collide-shape-h:collide-action

(declare-type touching-list structure)

(deftype overlaps-others-params (structure)
  ((options                     overlaps-others-options  :offset-assert 0) ;; guessed by decompiler
   (collide-with-filter         collide-spec             :offset-assert 4) ;; guessed by decompiler
   (tlist                       touching-list            :offset-assert 8) ;; guessed by decompiler
   (filtered-root-collide-with  collide-spec             :offset-assert 12) ;; guessed by decompiler
   (filtered-child-collide-with collide-spec             :offset-assert 16) ;; guessed by decompiler
   (filtered-other-collide-as   collide-spec             :offset-assert 20) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype move-above-ground-params (structure)
  ((gnd-collide-with       collide-spec                   :offset-assert 0) ;; guessed by decompiler
   (popup                  float                          :offset-assert 4)
   (dont-move-if-overlaps? symbol                         :offset-assert 8) ;; guessed by decompiler
   (hover-if-no-ground?    symbol                         :offset-assert 12) ;; guessed by decompiler
   (overlaps-params        overlaps-others-params :inline :offset-assert 16)
   (new-pos                vector                 :inline :offset-assert 48)
   (old-gspot-pos          vector                 :inline :offset-assert 64)
   (old-gspot-normal       vector                 :inline :offset-assert 80)
   (pat                    pat-surface                    :offset-assert 96) ;; guessed by decompiler
   (on-ground?             symbol                         :offset-assert 100) ;; guessed by decompiler
   (do-move?               symbol                         :offset-assert 104) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  )

(deftype collide-prim-core (structure)
  "Collide primitives use this to store their world sphere and their collision flags."
  ((world-sphere vector         :inline :offset-assert 0)
   (collide-as   collide-spec           :offset-assert 16) ;; guessed by decompiler
   (collide-with collide-spec           :offset-assert 20) ;; guessed by decompiler
   (action       collide-action         :offset-assert 24) ;; guessed by decompiler
   (prim-type    int8                   :offset-assert 28) ;; prim-type
   (unused1      uint8          3       :offset-assert 29) ;; guessed by decompiler
   (quad         uint128        2       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-shape-prim (basic)
  "Base class for collide primitives."
  ((cshape          collide-shape             :offset-assert 4) ;; guessed by decompiler
   (prim-id         uint32                    :offset-assert 8)
   (transform-index int8                      :offset-assert 12)
   (unused2         int8              3       :offset-assert 13) ;; guessed by decompiler
   (prim-core       collide-prim-core :inline :offset 16)
   (local-sphere    vector            :inline :offset 48)
   (specific        uint8             16      :offset 64 :score -1) ;; guessed by decompiler
   (world-sphere    vector            :inline :offset 16)
   (collide-as      collide-spec              :offset 32)
   (collide-with    collide-spec              :offset 36)
   (action          collide-action            :offset 40)
   (prim-type       int8                      :offset 44)
   (radius          meters                    :offset 60) ;; float
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  (:methods
    (new (symbol type collide-shape uint int) _type_) ;; 0
    (collide-shape-prim-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (collide-shape-prim-method-10 () none) ;; 10 ;; (add-fg-prim-using-box (_type_ collide-cache) none)
    (collide-shape-prim-method-11 () none) ;; 11 ;; (add-fg-prim-using-line-sphere (_type_ collide-cache object) none)
    (collide-shape-prim-method-12 () none) ;; 12 ;; (overlaps-others-test (_type_ overlaps-others-params collide-shape-prim) symbol)
    (collide-shape-prim-method-13 () none) ;; 13 ;; (overlaps-others-group (_type_ overlaps-others-params collide-shape-prim-group) symbol)
    (collide-shape-prim-method-14 () none) ;; 14 ;; (collide-shape-prim-method-14 () none)
    (collide-shape-prim-method-15 () none) ;; 15 ;; (collide-with-collide-cache-prim-mesh (_type_ collide-query collide-cache-prim) none)
    (collide-shape-prim-method-16 () none) ;; 16 ;; (collide-with-collide-cache-prim-sphere (_type_ collide-query collide-cache-prim) none)
    (collide-shape-prim-method-17 () none) ;; 17 ;; (on-platform-test (_type_ collide-shape-prim collide-query float) none)
    (collide-shape-prim-method-18 () none) ;; 18 ;; (should-push-away-test (_type_ collide-shape-prim collide-query) none)
    (collide-shape-prim-method-19 () none) ;; 19 ;; (should-push-away-a-group-test (_type_ collide-shape-prim-group collide-query) none)
    )
  )

(deftype collide-shape-prim-sphere (collide-shape-prim)
  "A sphere primitive for collide shapes."
  ((pat             pat-surface :offset 64) ;; guessed by decompiler
   (nav-radius      float       :offset 68)
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  (:methods
    (new (symbol type collide-shape uint) _type_) ;; 0
    )
  )

(deftype collide-shape-prim-mesh (collide-shape-prim)
  "A mesh primitive for collide shapes."
  ((mesh             collide-mesh             :offset 64) ;; guessed by decompiler
   (mesh-id          int32                    :offset 68)
   (mesh-cache-id    uint32                   :offset 72)
   (mesh-cache-entry collide-mesh-cache-entry :offset 76)
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  (:methods
    (new (symbol type collide-shape uint uint) _type_) ;; 0
    )
  )

(deftype collide-shape-prim-group (collide-shape-prim)
  "A group of collide primitives."
  ((num-children       uint8                             :offset 64)
   (num-alloc-children uint8                             :offset 65)
   (child              (inline-array collide-shape-prim) :offset 68) ;; guessed by decompiler
   )
  :method-count-assert 20
  :size-assert         #x50
  :flag-assert         #x1400000050
  (:methods
    (new (symbol type collide-shape uint int) _type_) ;; 0
    )
  )

;; +++collide-shape-h:collide-list-enum
(defenum collide-list-enum
  (hit-by-player)
  (usually-hit-by-player)
  (hit-by-others)
  (player)
  )
;; ---collide-shape-h:collide-list-enum

(declare-type collide-query structure)
(deftype collide-shape (trsqv)
  "The parent of all of an object's collide primitives.
   Most [[process-drawable]]s have a [[collide-shape]] that represents their root transform."
  ((actor-hash-index    int16                         :offset 12)
   (process             process-drawable              :offset-assert 140) ;; guessed by decompiler
   (max-iteration-count uint8                         :offset-assert 144)
   (nav-flags           uint8                         :offset-assert 145) ;; nav-flags
   (total-prims         uint8                         :offset-assert 146)
   (num-riders          uint8                         :offset-assert 147)
   (pat-ignore-mask     pat-surface         :offset-assert 148) ;; somehow is missing from inspect??
   (event-self          symbol                        :offset 152) ;; guessed by decompiler
   (event-other         symbol                        :offset-assert 156) ;; guessed by decompiler
   (root-prim           collide-shape-prim            :offset-assert 160) ;; guessed by decompiler
   (riders              (inline-array collide-rider)  :offset-assert 164) ;; guessed by decompiler
   (penetrate-using     penetrate                     :offset-assert 168)
   (penetrated-by       penetrate                     :offset-assert 176)
   (backup-collide-as   collide-spec                  :offset-assert 184) ;; added (enter process-drawable-art-error)
   (backup-collide-with collide-spec                  :offset-assert 188) ;; added (enter process-drawable-art-error)
   (event-priority      uint8                         :offset 192)
   (rider-max-momentum  float                         :offset-assert 196)
   )
  :method-count-assert 55
  :size-assert         #xc8
  :flag-assert         #x37000000c8
  ;; field penetrate is likely a value type. field penetrate is likely a value type.
  (:methods
    (new (symbol type process-drawable collide-list-enum) _type_) ;; 0
    (move-by-vector! (_type_ vector) none) ;; 28
    (move-to-point! (_type_ vector) none) ;; 29
    (collide-shape-method-30 () none) ;; 30 ;; (debug-draw (_type_) none)
    (fill-cache-for-shape (_type_ float collide-query) none) ;; 31
    (fill-cache-integrate-and-collide (_type_ vector collide-query meters) none) ;; 32
    (collide-shape-method-33 () none) ;; 33 ;; (find-prim-by-id (_type_ uint) collide-shape-prim)
    (collide-shape-method-34 () none) ;; 34 ;; (find-prim-by-id-logtest (_type_ uint) collide-shape-prim)
    (detect-riders! (_type_) symbol) ;; 35
    (collide-shape-method-36 () none) ;; 36 ;; (build-bounding-box-for-shape (_type_ bounding-box float collide-spec) symbol)
    (integrate-and-collide! (_type_ vector) none) ;; 37
    (find-collision-meshes (_type_) none) ;; 38
    (collide-shape-method-39 () none) ;; 39 ;; (on-platform (_type_ collide-shape collide-query) symbol)
    (find-overlapping-shapes (_type_ overlaps-others-params) symbol) ;; 40
    (collide-shape-method-41 () none) ;; 41 ;; (shove-to-closest-point-on-path (_type_ attack-info float) vector)
    (collide-shape-method-42 () none) ;; 42 ;; (should-push-away (_type_ collide-shape collide-query) symbol)
    (collide-shape-method-43 () none) ;; 43 ;; (pull-rider! (_type_ pull-rider-info) none)
    (pull-riders! (_type_) symbol) ;; 44
    (do-push-aways (_type_) collide-spec) ;; 45
    (update-transforms (_type_) none) ;; 46
    (set-collide-with! (_type_ collide-spec) none) ;; 47
    (set-collide-as! (_type_ collide-spec) none) ;; 48
    (collide-shape-method-49 () none) ;; 49 ;; (modify-collide-as! (_type_ int collide-spec collide-spec) none)
    (collide-shape-method-50 () none) ;; 50 ;; (send-shoves (_type_ process touching-shapes-entry float float float) symbol)
    (collide-shape-method-51 () none) ;; 51 ;; (above-ground? (_type_ collide-query vector collide-spec float float float) symbol)
    (collide-shape-method-52 () none) ;; 52 ;; (water-info-init! (_type_ water-info collide-action) water-info)
    (collide-shape-method-53 () none) ;; 53 ;; (iterate-prims (_type_ (function collide-shape-prim none)) none)
    (collide-shape-method-54 () none) ;; 54 ;; (pusher-init (_type_) none)
    )
  )

;; +++collide-shape-h:cshape-reaction-flags
(defenum cshape-reaction-flags
  :bitfield #t
  :type uint32
  (csrf00)
  (csrf01)
  (csrf02)
  (csrf03)
  (csrf04)
  (csrf05)
  (csrf06)
  (csrf07)
  (csrf08)
  (csrf09)
  (csrf10)
  (csrf11)
  (csrf12)
  (csrf13)
  (csrf14)
  (csrf15)
  (csrf16)
  (csrf17)
  (csrf18)
  (csrf19)
  (csrf20)
  (csrf21)
  (csrf22)
  (csrf23)
  (csrf24)
  (csrf25)
  (csrf26)
  (csrf27)
  (csrf28)
  (csrf29)
  (csrf30)
  (csrf31)
  )
;; ---collide-shape-h:cshape-reaction-flags

;; +++collide-shape-h:collide-status
(defenum collide-status
  :bitfield #t
  :type uint64
  (on-surface 0)
  (on-ground 1)
  (touch-surface 2)
  (touch-wall 3)
  (touch-ceiling 4)
  (touch-actor 5)
  (on-special-surface 6)
  (touch-edge 7)
  (no-touch 8)
  (blocked 9)
  (on-water 10)
  (impact-surface 11)
  (touch-background 12)
  (stuck 13)
  (touch-ceiling-sticky 14)
  (glance 15)
  (probe-hit 16)
  )
;; ---collide-shape-h:collide-status

(declare-type collide-query structure)
(deftype collide-shape-moving (collide-shape)
  "A [[collide-shape]] for moving objects."
  ((rider-time         time-frame                                                                 :offset-assert 200) ;; time-frame
   (rider-last-move    vector                                                             :inline :offset-assert 208)
   (trans-old          vector                                                             :inline :offset-assert 224)
   (poly-pat           pat-surface                                                                :offset 272) ;; guessed by decompiler
   (cur-pat            pat-surface                                                                :offset-assert 276) ;; guessed by decompiler
   (ground-pat         pat-surface                                                                :offset-assert 280) ;; guessed by decompiler
   (status             collide-status                                                             :offset-assert 288) ;; collide-status
   (old-status         collide-status                                                             :offset-assert 296)
   (prev-status        collide-status                                                             :offset-assert 304)
   (reaction-flag      cshape-reaction-flags                                                      :offset-assert 312)
   (reaction           (function control-info collide-query vector vector collide-status)         :offset 316) ;; guessed by decompiler
   (no-reaction        (function collide-shape-moving collide-query vector vector object)         :offset-assert 320) ;; guessed by decompiler
   (local-normal       vector                                                             :inline :offset-assert 336)
   (surface-normal     vector                                                             :inline :offset-assert 352)
   (poly-normal        vector                                                             :inline :offset-assert 368)
   (ground-poly-normal vector                                                             :inline :offset-assert 384)
   (gspot-pos          vector                                                             :inline :offset-assert 400)
   (gspot-normal       vector                                                             :inline :offset-assert 416)
   (ground-touch-point vector                                                             :inline :offset-assert 432)
   (ground-impact-vel  meters                                                                     :offset-assert 448)
   (surface-angle      float                                                                      :offset-assert 452)
   (poly-angle         float                                                                      :offset-assert 456)
   (touch-angle        float                                                                      :offset-assert 460)
   (coverage           float                                                                      :offset-assert 464)
   (dynam              dynamics                                                                   :offset-assert 468) ;; guessed by decompiler
   (surf               surface                                                                    :offset-assert 472) ;; guessed by decompiler
   )
  :method-count-assert 68
  :size-assert         #x1dc
  :flag-assert         #x44000001dc
  ;; field penetrate is likely a value type. field penetrate is likely a value type.
  (:methods
    (new (symbol type process-drawable collide-list-enum) _type_) ;; 0
    (find-ground (_type_ collide-query collide-spec float float float) symbol) ;; 55
    (react-to-pat! (_type_ pat-surface) cshape-reaction-flags) ;; 56
    (collide-shape-moving-method-57 () none) ;; 57 ;; (integrate-no-collide! (_type_ vector) none)
    (collide-shape-moving-method-58 () none) ;; 58 ;; (integrate-for-enemy-no-mtg (_type_ vector overlaps-others-params) symbol)
    (collide-shape-moving-method-59 () none) ;; 59 ;; (move-above-ground (_type_ vector move-above-ground-params) none)
    (collide-shape-moving-method-60 () none) ;; 60 ;; (move-to-ground (_type_ float float symbol collide-spec) none)
    (collide-shape-moving-method-61 () none) ;; 61 ;; (move-to-ground-point (_type_ vector vector vector) none)
    (compute-acc-due-to-gravity (_type_ vector float) vector) ;; 62
    (collide-shape-moving-method-63 () none) ;; 63 ;; (collide-shape-moving-method-63 (_type_ rigid-body float) none)
    (collide-shape-moving-method-64 () none) ;; 64 ;; (try-snap-to-surface (_type_ vector float float float) symbol)
    (fill-and-try-snap-to-surface (_type_ vector float float float collide-query) symbol) ;; 65
    (collide-shape-moving-method-66 () none) ;; 66 ;; (step-collison! (_type_ vector vector float int) float)
    (collide-shape-moving-method-67 () none) ;; 67 ;; (collide-with-all-collide-cache-prims (_type_ matrix collide-query) none)
    )
  )

(define-extern *collide-hit-by-player-list* engine)
(define-extern *collide-hit-by-others-list* engine)
(define-extern *collide-player-list* engine)
(define-extern *collide-shape-prim-backgnd* collide-shape-prim-mesh)
(define-extern *collide-shape-prim-water* collide-shape-prim-mesh)
(define-extern *collide-rider-pool* collide-rider-pool)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-obs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++generic-obs-h:manipy-options
(defenum manipy-options
  :bitfield #t
  :type uint32
  (mo0 0)
  (mo1 1)
  (mo2 2)
  (mo3 3)
  (mo4 4)
  )
;; ---generic-obs-h:manipy-options

(deftype manipy (process-drawable)
  ((root                 collide-shape                   :override)
   (new-trans-hook       (function none)        :offset-assert 200)
   (cur-trans-hook       (function none)        :offset-assert 204)
   (cur-event-hook       (function none)        :offset-assert 208)
   (new-joint-anim       art-joint-anim         :offset-assert 212)
   (new-joint-anim-blend uint64                 :offset-assert 216)
   (new-joint-anim-frame float                  :offset-assert 224)
   (anim-mode            symbol                 :offset-assert 228)
   (cur-grab-handle      handle                 :offset-assert 232)
   (cur-target-handle    handle                 :offset-assert 240)
   (old-grab-pos         vector        :inline  :offset-assert 256)
   (joint                joint-mod 4            :offset-assert 272)
   (new-post-hook        (function none)        :offset-assert 288)
   (cur-post-hook        (function none)        :offset-assert 292)
   (clone-copy-trans     symbol                 :offset-assert 296)
   (shadow-backup        shadow-geo             :offset-assert 300)
   (draw?                symbol                 :offset-assert 304)
   (userdata             uint64                 :offset-assert 312)
   (prefix               basic                  :offset-assert 320)
   (shadow-volume-joint  int32                  :offset-assert 324)
   (speed                float                  :offset-assert 328)
   (user-uint64          uint64    4            :offset-assert 336)
   (options              manipy-options         :offset-assert 368)
   )
  :flag-assert #x1501000174
  (:state-methods
    idle
    )
  )

(deftype part-spawner (process)
  "A process that spawns a specified particle group."
  ((root          trsqv                                    :offset-assert 128) ;; guessed by decompiler
   (part          sparticle-launch-control                 :offset-assert 132) ;; guessed by decompiler
   (path          path-control                             :offset-assert 136)
   (sound         ambient-sound                            :offset-assert 140) ;; guessed by decompiler
   (sound-extra   ambient-sound                            :offset-assert 144)
   (mode          (pointer sparticle-launch-group)         :offset-assert 148) ;; guessed by decompiler
   (enable        symbol                                   :offset-assert 152) ;; guessed by decompiler
   (path-pos      float                                    :offset-assert 156)
   (path-speed    float                                    :offset-assert 160)
   (last-velocity vector                           :inline :offset-assert 176)
   (radius        meters                                   :offset-assert 192)
   (world-sphere  sphere                           :inline :offset-assert 208)
   )
  :method-count-assert 16
  :size-assert         #xe0
  :flag-assert         #x10006000e0
  (:state-methods
    active
    )
  (:methods
    (is-in-view? (_type_) symbol) ;; 15
    )
  )

(deftype part-tracker (process)
  ((root            trsqv                                  :offset-assert 128) ;; guessed by decompiler
   (mat             matrix                         :inline :offset-assert 144)
   (offset          vector                         :inline :offset-assert 208)
   (userdata        uint64                                 :offset-assert 224)
   (user-time       time-frame                     2       :offset-assert 232) ;; guessed by decompiler
   (user-vector     vector                         :inline :offset-assert 256)
   (user-handle     uint32                         2       :offset 288) ;; guessed by decompiler
   (part            sparticle-launch-control               :offset-assert 296) ;; guessed by decompiler
   (callback        (function part-tracker vector)         :offset-assert 300) ;; guessed by decompiler
   (linger-callback (function part-tracker vector)         :offset-assert 304) ;; guessed by decompiler
   (duration        time-frame                             :offset-assert 312)
   (linger-duration time-frame                             :offset-assert 320)
   (state-time      time-frame                             :offset-assert 328)
   (target          handle                                 :offset-assert 336) ;; handle
   (target-joint    int32                                  :offset-assert 344)
   )
  :method-count-assert 18
  :size-assert         #x15c
  :flag-assert         #x1200e0015c
  ;; field userdata uses ~A with a 64-bit load.
  (:state-methods
    active ;; 14
    linger ;; 15
    die ;; 16
    )
  (:methods
    (notify-parent-of-death (_type_) none) ;; 17
    )
  )

(deftype part-tracker-init-params (structure)
  ((userdata  uint64                         :offset-assert 0)
   (duration  time-frame                     :offset-assert 8)
   (group     sparticle-launch-group         :offset-assert 16)
   (callback  (function part-tracker vector) :offset-assert 20)
   (target    process-drawable               :offset-assert 24)
   (mat-joint object                         :offset-assert 28) ;; can be *launch-matrix* or joint idx
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; field userdata uses ~A with a 64-bit load. field mat-joint uses ~A with a signed load.
  )

(deftype part-tracker-subsampler-init-params (structure)
  ((userdata      uint64  :offset-assert 0)
   (duration      time-frame :offset-assert 8)
   (group         sparticle-launch-group :offset-assert 16)
   (callback      (function part-tracker vector) :offset-assert 20)
   (target        process-drawable :offset-assert 24)
   (mat-joint     object  :offset-assert 28) ;; can be *launch-matrix* or joint idx
   (subsample-num float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  ;; field userdata uses ~A with a 64-bit load. field mat-joint uses ~A with a signed load.
  )

(declare-type sparticle-subsampler basic)

(deftype part-tracker-subsampler (part-tracker)
  ((subsampler sparticle-subsampler :offset-assert 348)
   )
  :method-count-assert 18
  :size-assert         #x160
  :flag-assert         #x1200e00160
  )

(deftype lightning-tracker (process)
  ((root          trsqv                                     :offset-assert 128) ;; guessed by decompiler
   (lightning     lightning-control                         :offset-assert 132) ;; guessed by decompiler
   (callback      (function lightning-tracker none)         :offset-assert 136) ;; guessed by decompiler
   (duration      time-frame                                :offset-assert 144)
   (start-time    time-frame                                :offset-assert 152) ;; time-frame
   (offset0       vector                            :inline :offset-assert 160)
   (offset1       vector                            :inline :offset-assert 176)
   (target0       handle                                    :offset-assert 192) ;; handle
   (target1       handle                                    :offset-assert 200) ;; handle
   (target-joint0 int32                                     :offset-assert 208)
   (target-joint1 int32                                     :offset-assert 212)
   (sound         sound-id                                  :offset-assert 216) ;; guessed by decompiler
   (userdata      uint64                                    :offset-assert 224)
   (user-time     time-frame                        2       :offset-assert 232) ;; guessed by decompiler
   (user-vector   vector                            :inline :offset-assert 256)
   (user-handle   handle                            2       :offset 288) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x130
  :flag-assert         #x1100b00130
  ;; field userdata uses ~A with a 64-bit load.
  (:state-methods
    active ;; 14
    )
  (:methods
    (notify-parent-of-death (_type_) none) ;; 15
    (update (_type_) none) ;; 16
    )
  )

(deftype touch-tracker (process-drawable)
  ((duration     time-frame                     :offset-assert 200) ;; time-frame
   (target       handle                         :offset-assert 208) ;; handle
   (event        symbol                         :offset-assert 216) ;; guessed by decompiler
   (run-function (function object)              :offset-assert 220) ;; guessed by decompiler
   (callback     (function touch-tracker none)  :offset-assert 224) ;; guessed by decompiler
   (event-mode   symbol                         :offset-assert 228)
   )
  :method-count-assert 21
  :size-assert         #xe8
  :flag-assert         #x15007000e8
  (:state-methods
    active ;; 20
    )
  )

(deftype swingpole (process-drawable)
  ((edge-length meters             :offset-assert 200)
   (path-pos    float              :offset-assert 204)
   (joint-track int32              :offset-assert 208)
   (speed       meters             :offset-assert 212)
   (dir         vector     :inline :offset-assert 224)
   (sync        sync-eased :inline :offset-assert 240)
   )
  :method-count-assert 25
  :size-assert         #x11c
  :flag-assert         #x1900a0011c
  (:state-methods
    idle ;; 20
    (active handle) ;; 21
    )
  (:methods
    (swingpole-method-22 (_type_) none) ;; 22 ;; (move-along-path (_type_) none)
    (init-collision! (_type_) none) ;; 23
    (get-trans (_type_) vector) ;; 24
    )
  )

(deftype gui-query (structure)
  ((x-position        int32   :offset-assert 0)
   (y-position        int32   :offset-assert 4)
   (message           string  :offset-assert 8) ;; guessed by decompiler
   (decision          symbol  :offset-assert 12) ;; guessed by decompiler
   (only-allow-cancel symbol  :offset-assert 16) ;; guessed by decompiler
   (no-msg            string  :offset-assert 20) ;; guessed by decompiler
   (message-space     int32   :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (gui-query-method-9 () none) ;; 9 ;; (gui-query-method-9 () none)
    (gui-query-method-10 () none) ;; 10 ;; (gui-query-method-10 () none)
    )
  )

(deftype othercam (process)
  ((hand              handle               :offset-assert 128) ;; handle
   (old-global-mask   process-mask         :offset-assert 136) ;; guessed by decompiler
   (mask-to-clear     process-mask         :offset-assert 140) ;; guessed by decompiler
   (cam-joint-index   int32                :offset-assert 144)
   (old-pos           vector       :inline :offset-assert 160)
   (old-mat-z         vector       :inline :offset-assert 176)
   (had-valid-frame   symbol               :offset-assert 192)
   (border-value      basic                :offset-assert 196)
   (die?              symbol               :offset-assert 200) ;; guessed by decompiler
   (survive-anim-end? symbol               :offset-assert 204) ;; guessed by decompiler
   (spooling?         symbol               :offset-assert 208) ;; guessed by decompiler
   (fov               float                :offset-assert 212)
   )
  :method-count-assert 14
  :size-assert         #xd8
  :flag-assert         #xe006000d8
  (:states
    othercam-running ;; associated process guessed by decompiler, old: (state othercam)
    )
  )

(deftype explosion-init-params (structure)
  ((spawn-point            vector                 :inline :offset-assert 0)
   (spawn-quat             quaternion             :inline :offset-assert 16)
   (radius                 float                          :offset-assert 32)
   (scale                  float                          :offset-assert 36)
   (group                  sparticle-launch-group         :offset-assert 40) ;; guessed by decompiler
   (collide-with           collide-spec                   :offset-assert 44) ;; guessed by decompiler
   (damage                 float                          :offset-assert 48)
   (damage-scale           float                          :offset-assert 52)
   (vehicle-damage-factor  float                          :offset-assert 56)
   (vehicle-impulse-factor float                          :offset-assert 60)
   (ignore-proc            handle                         :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype explosion (process-drawable)
  ((start-time      time-frame                    :offset-assert 200) ;; time-frame
   (duration        uint32                        :offset-assert 208 :decomp-as time-frame)
   (linger-duration uint32                        :offset-assert 212 :decomp-as time-frame)
   (attack-id       uint32                        :offset-assert 216)
   (mat             matrix                :inline :offset-assert 224)
   (params          explosion-init-params :inline :offset-assert 288)
   )
  :method-count-assert 23
  :size-assert         #x168
  :flag-assert         #x1700f00168
  (:state-methods
    explode ;; 20
    )
  (:methods
    (explosion-method-21 () none) ;; 21 ;; (setup-explosion-collision (_type_) none)
    (explosion-method-22 (_type_) none) ;; 22
    )
  )

(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:state-methods
    die ;; 14
    )
  )

(deftype simple-prim (process-drawable)
  ((strip prim-strip :offset-assert 200)
   )
  :method-count-assert 26
  :size-assert         #xcc
  :flag-assert         #x1a005000cc
  (:state-methods
    active ;; 20
    )
  (:methods
    (init-strip! (_type_) none) ;; 21
    (strip-setup (_type_) none) ;; 22
    (get-alpha (_type_) int) ;; 23
    (allocate-trans-and-strip! "Allocate transform and strip." (_type_) prim-strip) ;; 24
    (get-color (_type_) rgba) ;; 25
    )
  )

;; +++generic-obs-h:task-arrow-flags
(defenum task-arrow-flags
  :type uint32
  :bitfield #t
  (taf0 0)
  (taf1 1)
  (taf2 2)
  (taf3 3)
  (taf4 4)
  (taf5 5)
  (taf6 6)
  (taf7 7)
  (taf8 8)
  )
;; ---generic-obs-h:task-arrow-flags

(deftype task-arrow-params (structure)
  ((flags    task-arrow-flags         :offset-assert 0) ;; guessed by decompiler
   (map-icon uint16                   :offset-assert 4)
   (pos      vector           :inline :offset-assert 16)
   (quat     quaternion       :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype external-camera-controller (process)
  ((pause-time time-frame :offset-assert 128)
   (blur       symbol     :offset-assert 136)
   )
  :method-count-assert 15
  :size-assert         #x8c
  :flag-assert         #xf0010008c
  (:state-methods
    active ;; 14
    )
  )

(define-extern *simple-prim-additive* gs-alpha)
(define-extern *simple-prim-alpha-blend* gs-alpha)
(define-extern *simple-prim-subtractive* gs-alpha)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trajectory-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype trajectory (structure)
  ((initial-position vector :inline :offset-assert 0)
   (initial-velocity vector :inline :offset-assert 16)
   (time             float          :offset-assert 32)
   (gravity          meters         :offset-assert 36)
   )
  :method-count-assert 18
  :size-assert         #x28
  :flag-assert         #x1200000028
  (:methods
    (compute-trans-at-time (_type_ float vector) vector) ;; 9
    (compute-transv-at-time (_type_ float vector) vector) ;; 10
    (compute-time-until-apex (_type_) float) ;; 11
    (setup-from-to-duration! (_type_ vector vector float float) none) ;; 12
    (setup-from-to-xz-vel! (_type_ vector vector float float) none) ;; 13
    (setup-from-to-y-vel! (_type_ vector vector float float) none) ;; 14
    (setup-from-to-height! (_type_ vector vector float float) none) ;; 15
    (setup-from-to-duration-and-height! (_type_ vector vector float float) none) ;; 16
    (debug-draw (_type_) none) ;; 17
    )
  )

(deftype impact-control (structure)
  ((process      (pointer process-drawable)         :offset-assert 0) ;; guessed by decompiler
   (radius       meters                             :offset-assert 4) ;; float
   (joint        int32                              :offset-assert 8)
   (collide-with collide-spec                       :offset-assert 12) ;; guessed by decompiler
   (start-time   uint64                             :offset-assert 16) ;; time-frame
   (trans        vector                     2 :inline :offset-assert 32) ;; guessed by decompiler
   (dir          vector                     :inline :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    (new (symbol type process-drawable int float collide-spec) _type_) ;; 0
    (initialize (_type_ process-drawable int float collide-spec) impact-control) ;; 9
    (update-from-cspace (_type_) none) ;; 10
    (impact-control-method-11 (_type_ collide-query process pat-surface) float) ;; 11
    )
  )

(deftype point-tracker (structure)
  ((trans   vector  2 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x20
  :flag-assert         #xc00000020
  (:methods
    (new (symbol type vector vector) _type_) ;; 0
    (initialize (_type_ vector vector) point-tracker) ;; 9
    (point-tracker-method-10 (_type_ vector vector vector float) vector) ;; 10
    (point-tracker-method-11 (_type_ vector vector vector float) vector) ;; 11
    )
  )

(deftype combo-tracker (point-tracker)
  ((target          handle     :offset-assert 32) ;; handle
   (move-start-time time-frame :offset-assert 40) ;; time-frame
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  (:methods
    (combo-tracker-method-12 (_type_ vector vector process time-frame) combo-tracker) ;; 12
    (combo-tracker-method-13 (_type_ handle vector float vector float) process-focusable) ;; 13
    )
  )

(deftype traj2d-params (structure)
  ((x             float  :offset-assert 0)
   (y             float  :offset-assert 4)
   (gravity       float  :offset-assert 8)
   (initial-tilt  float  :offset-assert 12)
   (initial-speed float  :offset-assert 16)
   (time          float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype traj3d-params (structure)
  ((gravity          float          :offset-assert 0)
   (initial-tilt     float          :offset-assert 4)
   (initial-speed    float          :offset-assert 8)
   (time             float          :offset-assert 12)
   (src              vector :inline :offset-assert 16)
   (dest             vector :inline :offset-assert 32)
   (diff             vector :inline :offset-assert 48)
   (initial-velocity vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype cubic-curve (structure)
  ((mat matrix :inline :offset-assert 0)
   (vec vector 4 :inline :offset 0 :score 1) ;; added
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (cubic-curve-method-9 (_type_ vector vector vector vector) none) ;; 9
    (cubic-curve-method-10 (_type_ vector float) vector) ;; 10
    (cubic-curve-method-11 (_type_ vector float) vector) ;; 11
    (cubic-curve-method-12 (_type_ vector float) vector) ;; 12
    (debug-draw-curve (_type_) none) ;; 13
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-target-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype control-info (collide-shape-moving)
  ((unknown-float00                                float                                  :overlay-at ground-impact-vel)
   (unknown-float01                                float                                  :overlay-at surface-angle)
   (unknown-float02                                float                                  :overlay-at poly-angle)
   (unknown-float03                                float                                  :overlay-at touch-angle)
   (transv-ctrl                                    vector                     :inline     :offset 480)
   (target-transv                                  vector                     :inline     :offset 496)
   (bent-gravity-normal                            vector                     :inline     :offset 512)
   (quat-for-control                               quaternion                 :inline     :offset 528)
   (override-quat                                  quaternion                 :inline     :offset 544)
   (override-quat-alpha                            float                                  :offset 560)
   (ctrl-xz-vel                                    float                                  :offset 564)
   (unknown-float003                               float                                  :offset 568)
   (turn-go-the-long-way                           float                                  :offset 572)
   (velocity-after-thrust                          float                                  :offset 576)
   (turn-lockout-end-time                          time-frame                             :offset 584)
   (turn-to-alt-heading                            vector                     :inline     :offset 592)
   (last-transv                                    vector                     :inline     :offset 608)
   (last-quat-for-control                          quaternion                 :inline     :offset 624)
   (trans-log-trans                                vector                     128 :inline :offset 640)
   (trans-log-times                                time-frame                 128         :offset 2688)
   (trans-log-idx                                  int32                                  :offset 3712)
   (draw-offset                                    vector                     :inline     :offset 3728)
   (cspace-offset                                  vector                     :inline     :offset 3744)
   (anim-collide-offset-local                      vector                     :inline     :offset 3760)
   (anim-collide-offset-world                      vector                     :inline     :offset 3776)
   (old-anim-collide-offset-world                  vector                     :inline     :offset 3792)
   (anim-collide-offset-delta-world                vector                     :inline     :offset 3808)
   (standard-dynamics                              dynamics                               :offset 3824)
   (mod-surface                                    surface                                :offset 3828)
   (current-surface                                surface                                :offset 3832)
   (prev-surf                                      surface                                :offset 3836)
   (time-of-last-surface-change                    time-frame                             :offset 3840)
   (cpad                                           cpad-info                              :offset 3848)
   (turn-to-angle                                  float                                  :offset 3852)
   (last-turn-to-angle                             float                                  :offset 3856)
   (turn-to-magnitude                              float                                  :offset 3860)
   (last-turn-to-magnitude                         float                                  :offset 3864)
   (to-target-pt-xz                                vector                     :inline     :offset 3872)
   (last-to-target-pt-xz                           vector                     :inline     :offset 3888)
   (turn-to-target                                 vector                     :inline     :offset 3904)
   (last-turn-to-target                            vector                     :inline     :offset 3920)
   (turn-history-ctrl                              vector                     7 :inline   :offset 3936)
   (pad-xz-dir                                     vector                     :inline     :offset 4064)
   (last-pad-xz-dir                                vector                     :inline     :offset 4080)
   (pad-magnitude                                  float                                  :offset 4096)
   (last-pad-magnitude                             float                                  :offset 4100)
   (time-of-last-pad-read                          time-frame                             :offset 4104)
   (w-R-c                                          matrix                     :inline     :offset 4112)
   (c-R-w                                          matrix                     :inline     :offset 4176)
   (ctrl-orientation                               matrix                     :inline     :offset 4240)
   (pre-collide-local-normal                       vector                     :inline     :offset 4320)
   (camera-pos                                     vector                     :inline     :offset 4336)
   (cam-R-w                                        matrix                     :inline     :offset 4352)
   (update-cam-R-w-start-time                      int64                                  :offset 4416)
   (force-turn-to-direction                        vector                     :inline     :offset 4432)
   (force-turn-to-speed                            float                                  :offset 4448)
   (unknown-floatiujh1bnb2n3i1                     float                                  :offset 4452)
   (force-turn-to-strength                         float                                  :offset 4456)
   (tongue-counter                                 int32                                  :offset 4460)
   (collide-extra-velocity                         vector                     :inline     :offset 4464)
   (additional-decaying-velocity                   vector                     :inline     :offset 4480)
   (additional-decaying-velocity-end-time          time-frame                             :offset 4496)
   (additional-decaying-velocity-decay-start-time  time-frame                             :offset 4504)
   (gravity-normal                                 vector                     :inline     :offset 4512)
   (last-gravity-normal                            vector                     :inline     :offset 4528)
   (last-trans-any-surf                            vector                     :inline     :offset 4544)
   (unknown-float16                                float                                  :overlay-at (-> last-trans-any-surf y))
   (ground-contact-normal                          vector                     :inline     :offset 4560)
   (last-trans-on-ground                           vector                     :inline     :offset 4576)
   (ground-contact-sphere-center                   vector                     :inline     :offset 4592)
   (transv-on-last-impact                          vector                     :inline     :offset 4608)
   (list-time-on-ground                            time-frame                             :offset 4624)
   (ground-local-norm-dot-grav                     float                                  :offset 4632)
   (local-slope-z                                  float                                  :offset 4636)
   (local-slope-x                                  float                                  :offset 4640)
   (surface-slope-z                                float                                  :offset 4644)
   (surface-slope-x                                float                                  :offset 4648)
   (last-time-on-surface                           time-frame                             :offset 4656)
   (normal-impact-vel                              float                                  :offset 4664)
   (last-time-touching-actor                       time-frame                             :offset 4672)
   (wall-contact-pat                               pat-surface                            :offset 4680)
   (wall-contact-pt                                vector                     :inline     :offset 4688)
   (wall-contact-poly-normal                       vector                     :inline     :offset 4704)
   (wall-contact-normal                            vector                     :inline     :offset 4720)
   (actor-contact-pt                               vector                     :inline     :offset 4736)
   (actor-contact-normal                           vector                     :inline     :offset 4752)
   (actor-contact-handle                           handle                                 :offset 4768)
   (gspot-pat-surfce                               pat-surface                            :offset 4776)
   (gspot-slope-z                                  float                                  :offset 4780)
   (gspot-slope-x                                  float                                  :offset 4784)
   (ctrl-slope-heading                             float                                  :offset 4788)
   (ctrl-slope-z                                   float                                  :offset 4792)
   (ctrl-slope-x                                   float                                  :offset 4796)
   (unknown-word000                                int32                                  :offset 4800)
   (unknown-float002                               float                                  :offset 4804)
   (unknown-float-n12iuh3n1                        float                                  :offset 4808)
   (unknown-float-ki1jhbn23hj                      float                                  :offset 4812)
   (time-of-last-lc                                time-frame                             :offset 4816)
   (low-coverage-pat-next1                         pat-surface                            :offset 4828)
   (low-coverage-dist-to-next2                     float                                  :offset 4832)
   (low-coverage-pat-next2                         pat-surface                            :offset 4836)
   (low-coverage-slope-to-next1                    float                                  :offset 4824)
   (low-coverage-norm-of-next1                     vector                     :inline     :offset 4848)
   (low-coverage-norm-of-next2                     vector                     :inline     :offset 4864)
   (low-coverage-overhang-plane-normal             vector                     :inline     :offset 4912)
   (low-coverage-tangent                           vector                     :inline     :offset 4928)
   (low-coverage-tangent-xz                        vector                     :inline     :offset 4944)
   (btransv                                        vector                     :inline     :offset 4976)
   (blocked-factor                                 float                                  :offset 4992)
   (blocked-in-air-factor                          float                                  :offset 4996)
   (time-of-last-clear-wall-in-jump                time-frame                             :offset 5000)
   (time-of-last-lc-touch-edge                     time-frame                             :offset 5008)
   (collision-spheres                              collide-shape-prim-sphere  10          :offset 5016)
   (unknown-word02                                 int32                                  :offset 5064)
   (last-roll-end-time                             time-frame                             :offset 5072)
   (last-running-attack-end-time                   time-frame                             :offset 5080)
   (last-hands-attempt-time                        time-frame                             :offset 5088)
   (last-attack-end-time                           time-frame                             :offset 5096)
   (last-feet-attempt-time                         time-frame                             :offset 5104)
   (unknown-time-frame13                           time-frame                             :offset 5112)
   (last-time-of-stuck                             time-frame                             :offset 5120)
   (bend-amount                                    float                                  :offset 5132)
   (bend-target                                    float                                  :offset 5136)
   (bend-speed                                     float                                  :offset 5140)
   (ctrl-to-head-offset                            vector                     :inline     :offset 5152)
   (lhand-cspace                                   cspace                                 :offset 5168)
   (rhand-cspace                                   cspace                                 :offset 5172)
   (midpoint-of-hands                              vector                     :inline     :offset 5184)
   (ctrl-to-hands-offset                           vector                     :inline     :offset 5200)
   (sidekick-root                                  cspace                     :inline     :offset 5216)
   (collide-mode                                   symbol                                 :offset 5248)
   (collide-mode-transition                        float                                  :offset 5252)
   (duck-gun-tube-transision                       float                                  :offset 5256)
   (transv-history                                 vector                     15 :inline  :offset 5264)
   (average-xz-vel                                 float                                  :offset 5520)
   (idx-of-fastest-xz-vel                          int32                                  :offset 5524)
   (hand-to-edge-dist                              float                                  :offset 5528)
   (unknown-symbol000                              symbol                                 :offset 5532)
   (edge-grab-edge-dir                             vector                     :inline     :offset 5536)
   (unknown-vector35                               vector                     :inline     :offset 5552)
   (edge-grab-across-edge-dir                      vector                     :inline     :offset 5568)
   (last-successful-compute-edge-time              time-frame                             :offset 5584)
   (edge-grab-start-time                           time-frame                             :offset 5592)
   (unknown-handle000                              handle                                 :offset 5600)
   (anim-handle                                    handle                                 :offset 5608)
   (unknown-word04                                 uint32                                 :offset 5616)
   (unknown-spool-anim00                           spool-anim                             :overlay-at unknown-word04)
   (unknown-word05                                 int32                                  :overlay-at unknown-spool-anim00)
   (unknown-symbol01                               symbol                                 :overlay-at unknown-word05)
   (unknown-float34                                float                                  :overlay-at unknown-symbol01)
   (did-move-to-pole-or-max-jump-height            float                                  :offset 5620)
   (unknown-symbol03                               float                                  :offset 5624)
   (unknown-float35                                float                                  :offset 5628)
   (unknown-float36                                float                                  :offset 5632)
   (unknown-float37                                float                                  :offset 5636)
   (unknown-vector37                               vector                     :inline     :offset 5648)
   (unknown-vector38                               vector                     :inline     :offset 5664)
   (unknown-vector39                               vector                     :inline     :offset 5680)
   (unknown-vector40                               vector                     :inline     :offset 5696)
   (sliding-start-time                             time-frame                             :offset 5712)
   (unknown-time-frame18                           time-frame                             :offset 5720)
   (unknown-sound-id00                             sound-id                               :offset 5776)
   (lightjak-sound-id                              sound-id                               :offset 5780)
   (unknown-handle02                               handle                                 :offset 5792)
   (impact-ctrl                                    impact-control             :inline     :offset 5824)
   (unknown-word06                                 int32                                  :offset 5832)
   (unknown-vector41                               vector                     :inline     :offset 5888)
   (last-trans-leaving-surf                        vector                     :inline     :offset 5904)
   (unknown-float38                                float                                  :overlay-at (-> last-trans-leaving-surf y))
   (highest-jump-mark                              vector                     :inline     :offset 5920)
   (unknown-float39                                float                                  :overlay-at (-> highest-jump-mark y))
   (unknown-time-frame19                           time-frame                             :offset 5936)
   (time-of-last-debug-float                       time-frame                             :offset 5944)
   (danger-mode                                    symbol                                 :offset 5984)
   (target-attack-id                               uint32                                 :offset 5988)
   (attacked-by-id                                 int32                                  :offset 5992)
   (bomb-scale                                     float                                  :offset 5996)
   (attack-count                                   uint64                                 :offset 6000)
   (send-attack-dest                               handle                                 :offset 6008)
   (send-attack-time                               time-frame                             :offset 6016)
   (unknown-combo-tracker00                        combo-tracker              :inline     :offset 6032)
   (unknown-time-frame21                           time-frame                             :offset 6072)
   (unknown-dword07                                int64                                  :offset 6096)
   (unknown-dword08                                int64                                  :offset 6104)
   (unknown-dword09                                int64                                  :offset 6112)
   (unknown-dword10                                int64                                  :offset 6120)
   (jump-kind                                      symbol                                 :offset 6144)
   (unknown-quaternion04                           quaternion                 :inline     :offset 6160)
   (unknown-sound-id01                             sound-id                               :offset 6176)
   (unknown-float41                                float                                  :offset 6180)
   (unknown-float42                                float                                  :offset 6184)
   (history-idx                                    uint16                                 :offset 6188)
   (history-length                                 uint16                                 :offset 6190)
   (remaining-ctrl-iterations                      int32                                  :offset 6192)
   (invul1-on-time                                 time-frame                             :offset 6200)
   (invul1-off-time                                time-frame                             :offset 6208)
   (invul2-on-time                                 time-frame                             :offset 6216)
   (invul2-off-time                                time-frame                             :offset 6224)
   (unknown-float43                                float                                  :offset 6232)
   (unknown-float001                               float                                  :offset 6236)
   (board-jump-and-swim-sound                      sound-id                               :offset 6240)
   (bubbles-sound                                  sound-id                               :offset 6244)
   (unknown-time-frame26                           time-frame                             :offset 6248)
   (unknown-time-frame27                           time-frame                             :offset 6256)
   (yellow-eco-last-use-time                       int64                                  :offset 6264)
   (align-xz-vel                                   vector                     :inline     :offset 6272)
   (zx-vel-frac                                    float                                  :offset 6288)
   (unknown-sound-id04                             sound-id                               :offset 6292)
   (unknown-float45                                float                                  :offset 6296)
   (default-collide-as-all                         collide-spec                           :offset 6300)
   (default-collide-as-fgnd                        collide-spec                           :offset 6304)
   (default-collide-with-all                       collide-spec                           :offset 6308)
   (default-collide-with-fgnd                      collide-spec                           :offset 6312)
   (time-of-last-zero-input                        time-frame                             :offset 6320)
   (time-of-last-nonzero-input                     time-frame                             :offset 6328)
   (time-between-zero-inputs                       time-frame                             :offset 6336)
   (time-of-last-debug-heal                        time-frame                             :offset 6368)
   (last-nonzero-input-dir-targ                    quaternion                 :inline     :offset 6384)
   (time-of-last-wall-hide-first-check-pass        time-frame                             :offset 6400)
   (time-of-first-wall-hide-first-check-pass       time-frame                             :offset 6408)
   (pad uint8 4)
   )
  :size-assert #x1914
  :flag-assert #x4400001914
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-touch-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype touching-prim (structure)
  "A collide primitive that's touching another.
   Potentially also stores the triangle that is involved."
  ((cprim    collide-shape-prim         :offset-assert 0) ;; guessed by decompiler
   (has-tri? symbol                     :offset-assert 4) ;; guessed by decompiler
   (tri      collide-tri-result :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(deftype touching-prims-entry (structure)
  "A record of two primitives touching."
  ((next       touching-prims-entry         :offset-assert 0)
   (prev       touching-prims-entry         :offset-assert 4)
   (allocated? symbol                       :offset-assert 8) ;; guessed by decompiler
   (u          float                        :offset-assert 12)
   (prim1      touching-prim        :inline :offset-assert 16)
   (prim2      touching-prim        :inline :offset-assert 128)
   )
  :method-count-assert 13
  :size-assert         #xe8
  :flag-assert         #xd000000e8
  (:methods
    (touching-prims-entry-method-9 () none) ;; 9 ;; (get-middle-of-bsphere-overlap (_type_ vector) vector)
    (touching-prims-entry-method-10 () none) ;; 10 ;; (get-touched-prim (_type_ collide-shape touching-shapes-entry) collide-shape-prim)
    (touching-prims-entry-method-11 () none) ;; 11 ;; (get-touched-tri (_type_ collide-shape touching-shapes-entry) collide-tri-result)
    (touching-prims-entry-method-12 () none) ;; 12
    )
  )

(deftype touching-prims-entry-pool (structure)
  "A pool of up to 64 touching prim records."
  ((head  touching-prims-entry    :offset-assert 0)
   (nodes touching-prims-entry 64 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x3c10
  :flag-assert         #xd00003c10
  (:methods
    (new (symbol type) _type_) ;; 0
    (touching-prims-entry-pool-method-9 () none) ;; 9 ;; (alloc-node (_type_) touching-prims-entry)
    (touching-prims-entry-pool-method-10 () none) ;; 10 ;; (get-free-node-count (_type_) int)
    (init-list! (_type_) none) ;; 11
    (touching-prims-entry-pool-method-12 () none) ;; 12 ;; (free-node (_type_ touching-prims-entry) touching-prims-entry)
    )
  )

(deftype touching-shapes-entry (structure)
  "A record of two collide shapes touching,
   storing a record of the primitives involved."
  ((cshape1   collide-shape         :offset-assert 0) ;; guessed by decompiler
   (cshape2   collide-shape         :offset-assert 4) ;; guessed by decompiler
   (resolve-u int8                  :offset-assert 8)
   (head      touching-prims-entry  :offset-assert 12)
   (handle1   handle                :offset-assert 16) ;; handle
   (handle2   handle                :offset-assert 24) ;; handle
   )
  :pack-me
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (get-head (_type_) touching-prims-entry) ;; 9
    (get-next (_type_ touching-shapes-entry) touching-prims-entry) ;; 10
    (touching-shapes-entry-method-11 () none) ;; 11 ;; (get-touched-shape (_type_ collide-shape) collide-shape)
    (prims-touching? (_type_ collide-shape uint) touching-prims-entry) ;; 12
    (prims-touching-action? (_type_ collide-shape collide-action collide-action) basic) ;; 13
    (touching-shapes-entry-method-14 () none) ;; 14 ;; (free-touching-prims-list (_type_) none)
    )
  )

(deftype touching-list (structure)
  "Contains a record of touching collide shape pairs."
  ((num-touching-shapes int32                    :offset-assert 0)
   (resolve-u           int8                     :offset-assert 4)
   (touching-shapes     touching-shapes-entry 32 :inline :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x408
  :flag-assert         #xe00000408
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (touching-list-method-9 () none) ;; 9 ;; (add-touching-prims (_type_ collide-shape-prim collide-shape-prim float collide-tri-result collide-tri-result) none)
    (touching-list-method-10 () none) ;; 10 ;; (free-nodes (_type_) none)
    (touching-list-method-11 () none) ;; 11 ;; (update-from-step-size (_type_ float) none)
    (touching-list-method-12 () none) ;; 12 ;; (send-events-for-touching-shapes (_type_) none)
    (touching-list-method-13 () none) ;; 13 ;; (get-shapes-entry (_type_ collide-shape collide-shape) touching-shapes-entry)
    )
  )

(define-extern *touching-prims-entry-pool* touching-prims-entry-pool)
(define-extern *touching-list* touching-list)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-edge-grab-h            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pilot-edge-grab-info (structure)
  "Info for edge grabs on zoomers."
  ((local-pos vector :inline :offset-assert 0)
   (local-dir vector :inline :offset-assert 16)
   (handle    handle         :offset-assert 32) ;; handle
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype edge-grab-info (structure)
  ((world-vertex               vector               8 :inline :offset-assert 0) ;; guessed by decompiler
   (local-vertex               vector               8 :inline :offset-assert 128) ;; guessed by decompiler
   (status                     uint64                       :offset-assert 256)
   (actor-cshape-prim-offset   int32                        :offset-assert 264)
   (actor-handle               handle                       :offset-assert 272) ;; handle
   (hanging-matrix             matrix               :inline :offset-assert 288)
   (edge-vertex                vector               2 :inline :offset 0) ;; guessed by decompiler
   (center-hold                vector               :inline :offset 32)
   (tri-vertex                 vector               3 :inline :offset 48) ;; guessed by decompiler
   (adjacent-edge-left-vertex  vector               :inline :offset 96)
   (adjacent-edge-right-vertex vector               :inline :offset 112)
   (left-hand-hold             vector               :inline :offset-assert 352)
   (right-hand-hold            vector               :inline :offset-assert 368)
   (center-hold-old            vector               :inline :offset-assert 384)
   (edge-tri-pat               pat-surface                  :offset-assert 400)
   (found-edge?                symbol                       :offset-assert 404) ;; guessed by decompiler
   (pilot-edge-grab?           symbol                       :offset-assert 408) ;; guessed by decompiler
   (pilot-edge-grab            pilot-edge-grab-info :inline :offset-assert 416)
   (pilot-start-grab-pos       vector               :inline :offset-assert 464)
   (pilot-grab-interp          float                        :offset-assert 480)
   )
  :method-count-assert 11
  :size-assert         #x1e4
  :flag-assert         #xb000001e4
  (:methods
    (edge-grab-info-method-9 (_type_) symbol) ;; 9
    (edge-grab-info-method-10 () none) ;; 10 ;; (debug-draw (_type_) none)
    )
  )

(declare-type collide-cache-tri structure)
(deftype collide-edge-tri (structure)
  "A triangle involved in edge grab collision."
  ((ctri   collide-cache-tri         :offset-assert 0) ;; guessed by decompiler
   (normal vector            :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-edge-edge (structure)
  ((ignore        symbol                        :offset-assert 0)
   (etri          collide-edge-tri              :offset-assert 4)
   (vertex-ptr    (inline-array vector) 2       :offset-assert 8) ;; guessed by decompiler
   (outward       vector                :inline :offset-assert 16)
   (edge-vec-norm vector                :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (collide-edge-edge-method-9 () none) ;; 9 ;; (no-collision-at-edge (_type_ collide-edge-work edge-grab-info) symbol)
    )
  )

(deftype collide-edge-hold-item (structure)
  ((next       collide-edge-hold-item         :offset-assert 0)
   (rating     float                          :offset-assert 4)
   (split      int8                           :offset-assert 8)
   (edge       collide-edge-edge              :offset-assert 12)
   (center-pt  vector                 :inline :offset-assert 16)
   (outward-pt vector                 :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-edge-hold-list (structure)
  ((num-allocs   uint32                    :offset-assert 0)
   (num-attempts uint32                    :offset-assert 4)
   (head         collide-edge-hold-item    :offset-assert 8)
   (items        collide-edge-hold-item 32 :inline :offset-assert 16) ;; guessed by decompiler
   (attempts     qword                  32 :inline :offset-assert 1552) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x810
  :flag-assert         #xb00000810
  (:methods
    (collide-edge-hold-list-method-9 () none) ;; 9 ;; (debug-draw (_type_) object)
    (collide-edge-hold-list-method-10 () none) ;; 10 ;; (add-to-list! (_type_ collide-edge-hold-item) none)
    )
  )

;; +++collide-edge-grab-h:collide-edge-spec-flags
(defenum collide-edge-spec-flags
  :bitfield #t
  :type uint64
  (find-adjacent-edge 0)
  (one 1)
  (two 2)
  (send-event 3)
  )
;; ---collide-edge-grab-h:collide-edge-spec-flags

(deftype collide-edge-spec (structure)
  ((split-dists                  float        2       :offset-assert 0) ;; guessed by decompiler
   (outward-offset               vector       :inline :offset-assert 16)
   (flags                        collide-edge-spec-flags :offset-assert 32) ;; collide-edge-spec-flags
   (ignore-pat                   pat-surface          :offset-assert 40) ;; guessed by decompiler
   (max-dist-sqrd-to-outward-pt  float                :offset-assert 44)
   (max-dir-cosa-delta           float                :offset-assert 48)
   (max-dir-cosa-player          float                :offset-assert 52)
   (touching-segment             symbol               :offset-assert 56) ;; guessed by decompiler
   (local-cache-fill-box         bounding-box :inline :offset-assert 64)
   (local-within-reach-box       bounding-box :inline :offset-assert 96)
   (local-player-spheres         sphere       12 :inline :offset 128) ;; guessed by decompiler
   (local-player-hanging-spheres sphere       6  :inline :offset 128) ;; guessed by decompiler
   (local-player-leap-up-spheres sphere       6  :inline :offset 224) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x140
  :flag-assert         #x900000140
  )

(declare-type collide-cache basic)
(deftype collide-edge-work (structure)
  ((ccache                       collide-cache                      :offset-assert 0) ;; guessed by decompiler
   (cshape                       collide-shape                      :offset-assert 4) ;; guessed by decompiler
   (num-verts                    uint32                             :offset-assert 8)
   (num-edges                    uint32                             :offset-assert 12)
   (num-tris                     uint32                             :offset-assert 16)
   (cache-fill-box               bounding-box               :inline :offset-assert 32)
   (within-reach-box             bounding-box               :inline :offset-assert 64)
   (within-reach-box4w           bounding-box4w             :inline :offset-assert 96)
   (search-pt                    vector                     :inline :offset-assert 128)
   (search-dir-vec               vector                     :inline :offset-assert 144)
   (world-player-spheres         sphere                     12 :inline :offset-assert 160) ;; guessed by decompiler
   (world-player-hanging-spheres sphere                     6 :inline :offset 160) ;; guessed by decompiler
   (world-player-leap-up-spheres sphere                     6 :inline :offset 256) ;; guessed by decompiler
   (spec                         collide-edge-spec          :inline :offset-assert 352)
   (process                      (pointer process-drawable)         :offset-assert 672) ;; guessed by decompiler
   (verts                        vector                     64 :inline :offset-assert 688) ;; guessed by decompiler
   (edges                        collide-edge-edge          96 :inline :offset-assert 1712) ;; guessed by decompiler
   (tris                         collide-edge-tri           48 :inline :offset-assert 6320) ;; guessed by decompiler
   (hold-list                    collide-edge-hold-list     :inline :offset-assert 7856)
   )
  :method-count-assert 21
  :size-assert         #x26c0
  :flag-assert         #x15000026c0
  (:methods
    (collide-edge-work-method-9 () none) ;; 9 ;; (search-for-edges (_type_ collide-edge-hold-list) none)
    (collide-edge-work-method-10 () none) ;; 10 ;; (debug-draw-edges (_type_) object)
    (collide-edge-work-method-11 () none) ;; 11 ;; (debug-draw-tris (_type_) none)
    (collide-edge-work-method-12 () none) ;; 12 ;; (debug-draw-sphere (_type_) none)
    (collide-edge-work-method-13 () none) ;; 13 ;; (find-adjacent-edge (_type_ collide-edge-hold-item edge-grab-info) none)
    (collide-edge-work-method-14 () none) ;; 14 ;; (compute-center-point! (_type_ collide-edge-edge vector) float)
    (collide-edge-work-method-15 () none) ;; 15 ;; (get-best-hand-point (_type_ vector vector int) float)
    (collide-edge-work-method-16 () none) ;; 16 ;; (find-grabbable-edges (_type_) none)
    (collide-edge-work-method-17 () none) ;; 17 ;; (find-grabbable-tris (_type_) none)
    (collide-edge-work-method-18 () none) ;; 18 ;; (should-add-to-list? (_type_ collide-edge-hold-item collide-edge-edge) symbol)
    (collide-edge-work-method-19 () none) ;; 19 ;; (find-best-grab! (_type_ collide-edge-hold-list edge-grab-info) symbol)
    (collide-edge-work-method-20 () none) ;; 20 ;; (check-grab-for-collisions (_type_ collide-edge-hold-item edge-grab-info) symbol)
    )
  )

(define-extern *collide-edge-spec* collide-edge-spec)
(define-extern *collide-edge-work* collide-edge-work)
(define-extern *edge-grab-info* edge-grab-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-drawable-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cspace-by-name-no-fail "Like [[cspace-by-name]], but prints an error if the [[cspace]] was not found and returns the `node-list`." (function process-drawable string cspace))
(define-extern cspace-index-by-name-no-fail "Like [[cspace-index-by-name]], but prints an error if the [[cspace]] was not found and returns 0." (function process-drawable string int))
(define-extern num-func-none (function joint-control-channel float float float float :behavior process))
(define-extern num-func-+! (function joint-control-channel float float float float :behavior process))
(define-extern num-func--! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-loop! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-loop-speedless! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-loop-set! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-seek! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-blend-in! (function joint-control-channel float float float float :behavior process))
(define-extern joint-channel-float-delete! (function joint-control-channel none))
(define-extern num-func-interp-play! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-interp1-play! (function joint-control-channel float float float float :behavior process))
(define-extern num-func-chan (function joint-control-channel float float float float :behavior process))
(define-extern num-func-identity (function joint-control-channel float float float float :behavior process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-focusable              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++process-focusable:search-info-flag
(defenum search-info-flag
  :type uint32
  :bitfield #t
  (abort 0)
  (crate 1)
  (guard 2)
  (attackable 3)
  (enemy 4)
  (attackable-priority 5)
  (high-priority 6)
  (on-screen 7)
  (prefer-dist 8)
  (prefer-angle 9)
  (prefer-xz 10)
  (cull-angle 11)
  (cull-angle-simple 12)
  (cull-xz 13)
  (back-point 14)
  (combo 15)
  (probe 16)
  (probe-camera 17)
  (prefer-center 18)
  )
;; ---process-focusable:search-info-flag

;; +++process-focusable:focus-status
(defenum focus-status
  :type uint64
  :bitfield #t
  (disable 0) ;; if set, all collide checks fail
  (dead 1)    ;; if set, all collide checks fail
  (ignore 2)
  (inactive 3)
  (dangerous 4)
  (in-air 5)
  (hit 6)
  (grabbed 7)
  (in-head 8)
  (touch-water 9)
  (on-water 10)
  (under-water 11)
  (edge-grab 12)
  (pole 13)
  (pilot-riding 14)
  (flut 15)
  (tube 16)
  (light 17)
  (board 18)
  (gun 19)
  (pilot 20) ;; also racer?
  (mech 21)
  (dark 22)
  (rail 23)
  (halfpipe 24)
  (carry 25)
  (super 26)
  (shooting 27)
  (indax 28)
  (arrestable 29)
  (teleporting 30)
  (invulnerable 31)
  (turret 32)
  (no-gravity 33)
  (gun-no-target 34)
  )
;; ---process-focusable:focus-status

(deftype process-focusable (process-drawable)
  ((root         collide-shape :override)
   (focus-status focus-status  :offset-assert 200) ;; focus-status
   )
  :method-count-assert 28
  :size-assert         #xd0
  :flag-assert         #x1c005000d0
  (:methods
    (process-mask->search-info-flag (_type_) search-info-flag) ;; 20
    (get-trans "Get the `trans` for this process." (_type_ int) vector) ;; 21
    (get-quat "Get the quaternion for this process." (_type_ int) quaternion) ;; 22
    (get-transv "Get the `transv` for this process." (_type_) vector) ;; 23
    (time-to-apex-or-ground (_type_ int) int) ;; 24
    (get-water-height (_type_) meters) ;; 25
    (get-notice-time (_type_) time-frame) ;; 26
    (get-inv-mass (_type_) float) ;; 27
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-taskable-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++process-taskable-h:process-taskable-flags
(defenum process-taskable-flags
  :type uint32
  :bitfield #t
  )
;; ---process-taskable-h:process-taskable-flags

(deftype process-taskable (process-focusable)
  "The parent class for NPCs that can be talked to."
  ((flags            process-taskable-flags    :offset-assert 208)
   (task             game-task-control         :offset-assert 212) ;; guessed by decompiler
   (ambient          ambient-control   :inline :offset 216)
   (neck-joint-index int32                     :offset-assert 232)
   (talk-message     text-id                   :offset-assert 236) ;; guessed by decompiler
   (talk-distance    meters                    :offset-assert 240)
   (talk-height      meters                    :offset-assert 244)
   (last-talk        time-frame                :offset-assert 248) ;; time-frame
   (want-to-say      time-frame                :offset-assert 256) ;; time-frame
   (birth-time       time-frame                :offset-assert 264) ;; time-frame
   (slave            handle                    :offset-assert 272) ;; handle
   )
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  (:state-methods
    hide
    idle
    (active game-task-event)
    die
    (play-game game-task-event)
    )
  (:methods
    (process-taskable-method-33 () none) ;; 33 ;; (init-art! (_type_) none)
    (process-taskable-method-34 () none) ;; 34 ;; (process-taskable-method-34 (_type_) symbol)
    (process-taskable-method-35 () none) ;; 35 ;; (get-art-elem (_type_) art-element)
    (process-taskable-method-36 () none) ;; 36 ;; (process-taskable-method-36 (_type_) none)
    (process-taskable-method-37 () none) ;; 37 ;; (process-taskable-method-37 (_type_) none)
    (process-taskable-method-38 () none) ;; 38
    (process-taskable-method-39 () none) ;; 39
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; focus                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype focus (structure)
  "A structure that keeps a handle to a [[process-focusable]]."
  ((handle       handle        :offset-assert 0) ;; handle
   (collide-with collide-spec  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #xc
  :flag-assert         #xd0000000c
  (:methods
    (clear-focused "Reset the focus' handle." (_type_) none) ;; 9
    (collide-check?
      "If the focused process is not dead,
       check that the [[collide-spec]] of the focus and the process match."
      (_type_ process-focusable) object) ;; 10
    (reset-to-collide-spec "Reset this focus with the given [[collide-spec]]." (_type_ collide-spec) none) ;; 11
    (try-update-focus "Try to set the `handle` of this focus to the given process." (_type_ process-focusable) symbol) ;; 12
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; effect-control-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++effect-control-h:effect-control-flag
(defenum effect-control-flag
  :type uint32
  :bitfield #t
  (ecf0 0)
  (ecf1 1)
  (ecf2 2)
  (ecf3 3)
  (ecf4 4)
  (ecf5 5)
  (ecf6 6)
  (ecf7 7)
  (ecf8 8)
  (ecf9 9)
  (ecf10 10)
  (ecf11 11)
  (ecf12 12)
  (ecf13 13)
  (ecf14 14)
  (ecf15 15)
  )
;; ---effect-control-h:effect-control-flag

(deftype effect-control (basic)
  "An effect such as a particle with sound effects that plays during an animation."
  ((process          process-drawable     :offset-assert 4) ;; guessed by decompiler
   (flags            effect-control-flag  :offset-assert 8) ;; guessed by decompiler
   (last-frame-group art-joint-anim       :offset-assert 12) ;; guessed by decompiler
   (last-frame-num   float                :offset-assert 16)
   (channel-offset   int32                :offset-assert 20)
   (res              res-lump             :offset-assert 24) ;; guessed by decompiler
   (name             (pointer res-tag)    :offset-assert 28) ;; guessed by decompiler
   (param            uint32               :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x24
  :flag-assert         #xf00000024
  (:methods
    (new (symbol type process-drawable) _type_) ;; 0
    (effect-control-method-9 (_type_) none) ;; 9
    (do-effect (_type_ symbol float int) none) ;; 10
    (effect-control-method-11 () none) ;; 11 ;; (do-effect-for-surface (_type_ symbol float int basic pat-surface) none)
    (play-effect-sound (_type_ symbol float int basic sound-name) int) ;; 12
    (set-channel-offset! (_type_ int) none) ;; 13
    (effect-control-method-14 () none) ;; 14 ;; (play-effects-from-res-lump (_type_ float float float) none)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-frag-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-frag-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-frag-mesh (basic)
  "Unused Jak 1 background collision mesh fragment."
  ((packed-data     uint32           :offset-assert 4)
   (pat-array       uint32           :offset-assert 8)
   (strip-data-len  uint16           :offset-assert 12)
   (poly-count      uint16           :offset-assert 14)
   (base-trans      vector4w :inline :offset-assert 16)
   (vertex-count    uint8            :offset 28)
   (vertex-data-qwc uint8            :offset 29)
   (total-qwc       uint8            :offset 30)
   (unused          uint8            :offset 31)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype collide-fragment (drawable)
  "Unused Jak 1 background collision drawable tree node."
  ((mesh        collide-frag-mesh  :offset 8) ;; guessed by decompiler
   (collide-new basic              :offset 12)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

(deftype drawable-inline-array-collide-fragment (drawable-inline-array)
  "Unused Jak 1 background collision drawable tree inline-array class."
  ((data collide-fragment 1 :inline :offset-assert 32) ;; guessed by decompiler
   (pad uint32)
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  )

(deftype drawable-tree-collide-fragment (drawable-tree)
  "Unused jak 1 background collision data."
  ()
  :flag-assert #x1100000020
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-hash-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-hash-scratch (structure)
  "Scratchpad memory layout for collide-hash. Bitmask of things that have already been checked"
  ((collidable-bits uint128 128 :offset-assert 0) ;; guessed by decompiler
   (poly-bits       uint64  2   :offset 0) ;; guessed by decompiler
   (id-bits         uint32  512 :offset 0) ;; guessed by decompiler
   (tris            uint32      :offset-assert 2048)
   )
  :method-count-assert 9
  :size-assert         #x804
  :flag-assert         #x900000804
  )

(deftype collide-hash-bucket (structure)
  "A bucket is a reference to a list of items that intersect a grid cell.
   For the broadphase, the items are collide-hash-item (wrapper of collide-hash-fragment).
   For the narrowphase, the items are entries in the index list, which contains poly indices."
  ((index int16  :offset-assert 0)
   (count int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-item (structure)
  "Items that are 'hashed' in the broadphase. Contains unique ID for checking against already-visited-bitmask
   and a pointer to the actual collide-hash-fragment, or possibly a TIE."
  ((id         uint32  :offset-assert 0)
   (collidable basic   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-hash-poly (structure)
  "A polygon in the narrow-phase data. This is just indices into the vertex and PAT tables."
  ((data        uint8  4 :offset-assert 0) ;; guessed by decompiler
   (vert-index0 uint8    :offset 0)
   (vert-index1 uint8    :offset 1)
   (vert-index2 uint8    :offset 2)
   (pat-index   uint8    :offset 3)
   (word        uint32   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment-stats (structure)
  ((num-verts  uint16  :offset-assert 0)
   (num-polys  uint8   :offset-assert 2)
   (poly-count uint8   :offset-assert 3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment (drawable)
  "A mesh fragment for the Jak2/Jak3 collision system. This is a 'hash' of triangles into a grid
   where the 'hash' function is just identity."
  ((num-buckets     uint16                              :offset 4)
   (num-indices     uint16                              :offset 6)
   (pat-array       uint32                              :offset 8)
   (bucket-array    uint32                              :offset 12)
   (grid-step       vector                      :inline :offset-assert 32)
   (bbox            bounding-box                :inline :offset-assert 48)
   (bbox4w          bounding-box4w              :inline :offset-assert 80)
   (axis-scale      vector                      :inline :offset 64)
   (avg-extents     vector                      :inline :offset 80)
   (dimension-array uint32                      4       :offset 44) ;; guessed by decompiler
   (stats           collide-hash-fragment-stats :inline :offset 60)
   (num-verts       uint16                              :offset 60)
   (num-polys       uint8                               :offset 62)
   (poly-count      uint8                               :offset 63)
   (poly-array      uint32                              :offset 76)
   (vert-array      uint32                              :offset 92)
   (index-array     uint32                              :offset 108)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  )

(deftype collide-hash-fragment-array (array)
  "A collection of collide-hash-fragments. These are used by the instanced collision if a single instance
   needs more than 1 collide-hash-fragment worth of triangles."
  ((fragments collide-hash-fragment :dynamic :offset 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-hash (drawable)
  ((num-ids         uint16                                   :offset 4)
   (id-count        uint16                                   :offset 6)
   (num-buckets     uint32                                   :offset 8)
   (qwc-id-bits     uint32                                   :offset 12)
   (grid-step       vector                           :inline :offset 16)
   (bbox            bounding-box                     :inline :offset 32)
   (bbox4w          bounding-box4w                   :inline :offset 64)
   (axis-scale      vector                           :inline :offset 48)
   (avg-extents     vector                           :inline :offset 64)
   (bucket-array    uint32                                   :offset 44)
   (item-array      (inline-array collide-hash-item)         :offset 60) ;; guessed by decompiler
   (dimension-array uint32                           3       :offset 76) ;; guessed by decompiler
   (num-items       uint32                                   :offset 92)
   )
  :method-count-assert 17
  :size-assert         #x60
  :flag-assert         #x1100000060
  )

(define-extern *collide-list-boxes* symbol) ;; object
(define-extern *collide-hash-fragments* int) ;; object
(define-extern *collide-hash-fragments-tfrag* int) ;; object
(define-extern *collide-hash-fragments-instance* int) ;; object
(define-extern *already-printed-exeeded-max-cache-tris* symbol) ;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-info-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++water-info-h:water-flag
(defenum water-flag
  :type uint32
  :bitfield #t
  (active 0)
  (can-wade 1)
  (can-swim 2)
  (swim-ground 3)
  (can-ground 4)
  (use-ocean 5)
  (tar 6)
  (mud 7)
  (deadly 8)
  (use-water-anim 9)
  (no-grab-sound 10)
  (dark-eco 11)
  (lava 12)
  (swamp 13)
  (flow 14)
  (under-water 15)
  (head-under-water 16)
  (bouncing 17)
  (wading 18)
  (swimming 19)
  (touch-water 20)
  (jump-out 21)
  (break-surface 22)
  (spawn-drip 23)
  (part-splash 24)
  (part-drip 25)
  (part-rings 26)
  (part-water 27)
  (event 28)
  (over-water 29)
  (find-water 30)
  (touch-water-good 31)
  )
;; ---water-info-h:water-flag

(deftype water-info (structure)
  ((trans       vector               :inline :offset-assert 0)
   (normal      vector               :inline :offset-assert 16)
   (base-height meters                       :offset-assert 32)
   (depth       meters                       :offset-assert 36)
   (handle      handle                       :offset-assert 40) ;; handle
   (flags       water-flag                   :offset-assert 48) ;; water-flags
   (prim        drawable-region-prim         :offset-assert 52) ;; guessed by decompiler
   (extra-flags uint32                       :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype water-sphere (structure)
  ((sphere sphere     :inline :offset-assert 0)
   (flags  water-flag         :offset-assert 16)
   (user0  int32              :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; chain-physics-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype chain-physics-setup (structure)
  ((joint-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype chain-physics-joint (structure)
  ((position  vector    :inline :offset-assert 0)
   (velocity  vector    :inline :offset-assert 16)
   (old-x     vector    :inline :offset-assert 32)
   (joint-mod joint-mod         :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype chain-physics (basic)
  ((chain-joints          chain-physics-joint 20 :inline     :offset-assert 16) ;; guessed by decompiler
   (num-joints            uint8                       :offset-assert 1296)
   (root-joint-index      uint8                       :offset-assert 1297)
   (joint-length          float                       :offset-assert 1300)
   (gravity               vector              :inline :offset-assert 1312)
   (gravity-target        vector              :inline :offset-assert 1328)
   (stretch-vel           float                       :offset-assert 1344)
   (stretch-vel-parallel  float                       :offset-assert 1348)
   (compress-vel          float                       :offset-assert 1352)
   (compress-vel-parallel float                       :offset-assert 1356)
   (negate-y              symbol                      :offset-assert 1360) ;; guessed by decompiler
   (axial-slop            float                       :offset-assert 1364)
   (maximum-stretch       float                       :offset-assert 1368)
   (turn-off-start        uint64                      :offset-assert 1376) ;; time-frame
   (turn-off-duration     uint64                      :offset-assert 1384) ;; time-frame
   )
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  (:methods
    (chain-physics-method-9 () none) ;; 9 ;; (initialize-chain-joints (_type_) symbol)
    (chain-physics-method-10 () none) ;; 10 ;; (turn-off (_type_ time-frame) none)
    (chain-physics-method-11 () none) ;; 11 ;; (update (_type_ process-drawable) none)
    (chain-physics-method-12 () none) ;; 12 ;; (gravity-update (_type_ process-drawable) none)
    (chain-physics-method-13 () none) ;; 13 ;; (apply-gravity (_type_ vector int process-drawable) none)
    (chain-physics-method-14 () none) ;; 14 ;; (chain-physics-method-14 (_type_ vector int) none)
    (chain-physics-method-15 () none) ;; 15 ;; (clamp-length (_type_ vector vector object process-drawable) vector)
    (chain-physics-method-16 () none) ;; 16 ;; (chain-physics-method-16 (_type_ int) float)
    (chain-physics-method-17 () none) ;; 17 ;; (chain-physics-method-17 (_type_ vector int) none)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ragdoll-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type ragdoll basic)
(declare-type ragdoll-joint structure)
(declare-type ragdoll-proc process)

(deftype ragdoll-edit-info (structure)
  ((editing         symbol      :offset-assert 0)
   (current-func    uint64     :offset-assert 8)
   (analog-func     uint64     :offset-assert 16)
   (affect          uint64     :offset-assert 24)
   (single-step     uint64     :offset-assert 32)
   (collision       symbol      :offset-assert 40)
   (gravity         symbol      :offset-assert 44)
   (skel-visible    uint64     :offset-assert 48)
   (current-joint   int8       :offset-assert 56)
   (auto-setup-now  basic      :offset-assert 60)
   (child-stack     ragdoll-joint 60 :offset-assert 64)
   (child-stack-num int8       :offset-assert 304)
   (last-frame      time-frame :offset-assert 312)
   (last-frame-dur  time-frame :offset-assert 320)
   )
  :method-count-assert 18
  :size-assert         #x148
  :flag-assert         #x1200000148
  (:methods
    (has-joint? (_type_ ragdoll-joint) symbol) ;; 9
    (ragdoll-edit-info-method-10 (_type_ object ragdoll-joint) symbol) ;; 10
    (fill-child-stack! "Fill the `child-stack` with the joints of the given ragdoll." (_type_ ragdoll) none) ;; 11
    (ragdoll-edit-info-method-12 (_type_) none) ;; 12
    (cycle-joints! "Cycle through joints based on controller input." (_type_ ragdoll) none) ;; 13
    (ragdoll-edit-info-method-14 (_type_ matrix vector (inline-array ragdoll-joint) ragdoll process-drawable) vector) ;; 14
    (ragdoll-edit-info-method-15 (_type_) none) ;; 15
    (ragdoll-edit-info-method-16 (_type_ ragdoll process-drawable) none) ;; 16
    (ragdoll-edit-info-method-17 (_type_ ragdoll process-drawable) none) ;; 17
    )
  )

(deftype ragdoll-joint-setup (structure)
  ((joint-index  int32           :offset-assert 0)
   (parent-joint int32           :offset-assert 4)
   (joint-type   uint64          :offset-assert 8)
   (pre-tform    vector  :inline :offset-assert 16)
   (geo-tform    vector  :inline :offset-assert 32)
   (axial-slop   float           :offset-assert 48)
   (max-angle    float           :offset-assert 52)
   (coll-rad     float           :offset-assert 56)
   (hit-sound    sound-name      :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype ragdoll-setup (structure)
  ((orient-tform    vector :inline :offset-assert 0)
   (scale           vector :inline :offset-assert 16)
   (bg-collide-with collide-spec   :offset-assert 32)
   (joint-setup     (array ragdoll-joint-setup) :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; +++ragdoll-h:ragdoll-joint-flag
(defenum ragdoll-joint-flag
  :type uint32
  :bitfield #t
  (rjf0 0)
  (rjf1 1)
  (rjf2 2)
  (rjf3 3)
  (rjf4 4)
  (rjf5 5)
  (rjf6 6)
  (rjf7 7)
  (rjf8 8)
  (rjf9 9)
  (rjf10 10)
  (rjf11 11)
  (rjf12 12)
  (rjf13 13)
  (rjf14 14)
  (rjf15 15)
  )
;; ---ragdoll-h:ragdoll-joint-flag

(deftype ragdoll-joint (structure)
  ((quat                quaternion :inline :offset-assert 0)
   (position            vector     :inline :offset-assert 16)
   (velocity            vector     :inline :offset-assert 32)
   (bounce              vector     :inline :offset-assert 48)
   (old-x               vector     :inline :offset-assert 64)
   (pre-tform           vector     :inline :offset-assert 80)
   (geo-tform           vector     :inline :offset-assert 96)
   (axial-slop          float              :offset-assert 112)
   (max-angle           degrees            :offset-assert 116)
   (joint-length        float              :offset-assert 120)
   (coll-rad            float              :offset-assert 124)
   (ragdoll-joint-flags ragdoll-joint-flag :offset-assert 128)
   (joint-type          uint64             :offset-assert 136)
   (joint-index         int8               :offset-assert 144)
   (parent-joint        int8               :offset-assert 145)
   (parent-index        int8               :offset-assert 146)
   (num-children        int8               :offset-assert 147)
   (old-param0          basic              :offset-assert 148)
   (hit-sound           sound-name         :offset-assert 160)
   (ground-pat          uint32             :offset-assert 176)
   (user0               int32              :offset-assert 180)
   (original-speed      float              :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xbc
  :flag-assert         #x9000000bc
  )

;; +++ragdoll-h:ragdoll-flag
(defenum ragdoll-flag
  :type uint32
  :bitfield #t
  (rf0 0)
  (rf1 1)
  (rf2 2)
  (rf3 3)
  (rf4 4)
  (rf5 5)
  (rf6 6)
  (rf7 7)
  (rf8 8)
  (rf9 9)
  (rf10 10)
  (rf11 11)
  (rf12 12)
  (rf13 13)
  (rf14 14)
  (rf15 15)
  )
;; ---ragdoll-h:ragdoll-flag

(deftype ragdoll (basic)
  ((ragdoll-joints        ragdoll-joint    60  :inline :offset-assert 16)
   (num-joints            uint8              :offset-assert 11536)
   (mirror                matrix     :inline :offset-assert 11552)
   (gravity               vector     :inline :offset-assert 11616)
   (gravity-target        vector     :inline :offset-assert 11632)
   (orient-tform          vector     :inline :offset-assert 11648)
   (scale                 vector     :inline :offset-assert 11664)
   (stretch-vel           float              :offset-assert 11680)
   (stretch-vel-parallel  float              :offset-assert 11684)
   (compress-vel          float              :offset-assert 11688)
   (compress-vel-parallel float              :offset-assert 11692)
   (momentum              float              :offset-assert 11696)
   (maximum-stretch       float              :offset-assert 11700)
   (turn-off-start        time-frame         :offset-assert 11704)
   (turn-off-duration     time-frame         :offset-assert 11712)
   (copy-velocity-start   time-frame         :offset-assert 11720)
   (root-offset           vector     :inline :offset-assert 11728)
   (rotate-vel            quaternion :inline :offset-assert 11744)
   (rotate-adj            quaternion :inline :offset-assert 11760)
   (rotate-adj-count      int8               :offset-assert 11776)
   (ragdoll-flags         ragdoll-flag       :offset-assert 11780)
   (flex-blend            float              :offset-assert 11784)
   (stable-joints         int8               :offset-assert 11788)
   (ragdoll-joint-remap   uint8    100       :offset-assert 11789)
   (allow-destabilize     uint64             :offset-assert 11896)
   (bg-collide-with       uint32             :offset-assert 11904)
   (water-info            water-info :inline :offset-assert 11920)
   )
  :method-count-assert 26
  :size-assert         #x2ecc
  :flag-assert         #x1a00002ecc
  (:methods
    (ragdoll-method-9 (_type_ matrix process-drawable) none) ;; 9
    (ragdoll-method-10 (_type_ process-drawable symbol vector symbol) none) ;; 10
    (turn-off-for-duration! (_type_ time-frame) none) ;; 11
    (get-parent-joint (_type_ (inline-array ragdoll-joint)) ragdoll-joint) ;; 12
    (ragdoll-method-13 (_type_ ragdoll-edit-info) none) ;; 13
    (ragdoll-method-14 (_type_) none) ;; 14
    (ragdoll-method-15 (_type_ process-drawable matrix) none) ;; 15
    (ragdoll-setup! "Set up this ragdoll with the given [[ragdoll-setup]]." (_type_ process-drawable ragdoll-setup) none) ;; 16
    (ragdoll-method-17 (_type_ process-drawable) none) ;; 17
    (ragdoll-method-18 (_type_) none) ;; 18
    (ragdoll-method-19 (_type_ vector int object vector) none) ;; 19
    (ragdoll-method-20 (_type_ vector) none) ;; 20
    (ragdoll-method-21 (_type_ vector vector float) vector) ;; 21
    (get-max-angle-for-joint-idx (_type_ int) degrees) ;; 22
    (ragdoll-method-23 (_type_ vector vector float symbol) none) ;; 23
    (ragdoll-method-24 (_type_ vector int) none) ;; 24
    (ragdoll-method-25 (_type_ process-drawable) none) ;; 25
    )
  )

(deftype ragdoll-proc (process)
  ((parent         (pointer process-drawable) :override)
   (ragdoll        ragdoll :offset-assert 128)
   (last-attack-id uint32  :offset-assert 132)
   )
  :method-count-assert 20
  :size-assert         #x88
  :flag-assert         #x1400100088
  (:state-methods
    idle ;; 14
    )
  (:methods
    (ragdoll-proc-method-15 (_type_ symbol vector symbol) none) ;; 15
    (ragdoll-proc-method-16 (_type_ int) none) ;; 16
    (ragdoll-proc-method-17 (_type_ matrix) none) ;; 17
    (ragdoll-proc-method-18 (_type_ ragdoll-edit-info process) none) ;; 18
    (ragdoll-proc-method-19 (_type_) none) ;; 19
    )
  )

(declare-type wings process-drawable)
(deftype wings-ragdoll-proc (ragdoll-proc)
  ((parent (pointer wings) :override))
  :method-count-assert 20
  :size-assert         #x88
  :flag-assert         #x1400100088
  )

(define-extern *ragdoll-edit-info* ragdoll-edit-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; projectile-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++projectile-h:projectile-options
(defenum projectile-options
  :bitfield #t
  :type uint64
  (po0 0)
  (po1 1)
  (po2 2)
  (po3 3)
  (po4 4)
  (po5 5)
  (po6 6)
  (po7 7)
  (po8 8)
  (po9 9)
  (po10 10)
  (po11 11)
  (po12 12)
  (po13 13)
  (po14 14)
  (po15 15)
  (po16 16)
  (po17 17)
  (po18 18)
  (po19 19)
  (po20 20)
  (po21 21)
  (po22 22)
  (po23 23)
  (po24 24)
  (po25 25)
  (po26 26)
  (po27 27)
  (po28 28)
  (po29 29)
  (po30 30)
  (po31 31)
  )
;; ---projectile-h:projectile-options

(deftype projectile (process-drawable)
  ((parent                 (pointer process-drawable)         :override)
   (root                   collide-shape-moving               :override)
   (starting-pos           vector                     :inline :offset-assert 208)
   (starting-dir           vector                     :inline :offset-assert 224)
   (target-pos             vector                     :inline :offset-assert 240)
   (base-target-pos        vector                     :inline :offset-assert 256)
   (pre-move-transv        vector                     :inline :offset-assert 272)
   (timeout                time-frame                         :offset-assert 288) ;; time-frame
   (spawn-time             time-frame                         :offset-assert 296) ;; time-frame
   (options                projectile-options                 :offset-assert 304) ;; projectile-options
   (last-target            handle                             :offset-assert 312) ;; handle
   (notify-handle          handle                             :offset-assert 320) ;; handle
   (owner-handle           handle                             :offset-assert 328) ;; handle
   (ignore-handle          handle                             :offset-assert 336) ;; handle
   (update-velocity        (function projectile none)         :offset-assert 344) ;; guessed by decompiler
   (move                   (function projectile none)         :offset-assert 348) ;; guessed by decompiler
   (pick-target            (function projectile none)         :offset-assert 352) ;; guessed by decompiler
   (max-speed              float                              :offset-assert 356)
   (old-dist               float                      16      :offset-assert 360) ;; guessed by decompiler
   (old-dist-count         int32                              :offset-assert 424)
   (hits                   int32                              :offset-assert 428)
   (max-hits               int32                              :offset-assert 432)
   (tween                  float                              :offset-assert 436)
   (attack-mode            symbol                             :offset-assert 440) ;; guessed by decompiler
   (attack-id              uint32                             :offset-assert 444)
   (damage                 float                              :offset-assert 448)
   (vehicle-damage-factor  float                              :offset-assert 452)
   (vehicle-impulse-factor float                              :offset-assert 456)
   (charge-level           float                              :offset-assert 460)
   (sound-id               sound-id                           :offset-assert 464) ;; guessed by decompiler
   (stop-speed             meters                             :offset-assert 468)
   (invinc-time            time-frame                         :offset-assert 472) ;; time-frame
   (desired-target         uint64                             :offset-assert 480)
   (desired-target-pos     vector                     :inline :offset-assert 496)
   )
  :method-count-assert 41
  :size-assert         #x200
  :flag-assert         #x2901800200
  (:state-methods
    die ;; 20
    dissipate ;; 21
    impact ;; 22
    moving ;; 23
    )
  (:methods
    (projectile-method-24 (_type_) none) ;; 24 ;; (draw-laser-sight (_type_) none)
    (projectile-method-25 (_type_) none) ;; 25 ;; (spawn-impact-particles (_type_) none)
    (projectile-method-26 (_type_) none) ;; 26 ;; (spawn-shell-particles (_type_) none)
    (projectile-method-27 (_type_) none) ;; 27 ;; (unknown-particles (_type_) none)
    (play-impact-sound (_type_ projectile-options) none) ;; 28
    (projectile-method-29 (_type_) none) ;; 29 ;; (stop-sound! (_type_) none)
    (setup-collision! (_type_) none) ;; 30
    (projectile-method-31 (_type_) none) ;; 31 ;; (init-proj-settings! (_type_) none)
    (projectile-method-32 (_type_) none) ;; 32 ;; (go-moving! (_type_) none)
    (go-impact! (_type_) none) ;; 33 ;; (go-sitting! (_type_) none)
    (projectile-method-34 (_type_) none) ;; 34 ;; (kill-projectile! (_type_) symbol)
    (event-handler! (_type_ process int symbol event-message-block) object) ;; 35
    (handle-proj-hit! (_type_ process event-message-block) object) ;; 36
    (deal-damage! (_type_ process event-message-block) symbol) ;; 37
    (made-impact? (_type_) symbol) ;; 38
    (projectile-method-39 (_type_) none) ;; 39 ;; (play-impact-sound! (_type_) none)
    (projectile-method-40 (_type_) int) ;; 40
    )
  )

(deftype projectile-init-by-other-params (structure)
  ((pos                    vector :inline :offset-assert 0)
   (vel                    vector :inline :offset-assert 16)
   (target-pos             vector :inline :offset-assert 32)
   (target-handle          uint64         :offset-assert 48)
   (ent                    entity         :offset-assert 56) ;; guessed by decompiler
   (charge                 float          :offset-assert 60)
   (attack-id              uint32         :offset-assert 64)
   (options                projectile-options         :offset-assert 72) ;; projectile-options
   (notify-handle          handle         :offset-assert 80) ;; handle
   (owner-handle           handle         :offset-assert 88) ;; handle
   (ignore-handle          handle         :offset-assert 96) ;; handle
   (timeout                time-frame         :offset-assert 104) ;; time-frame
   (damage                 float          :offset-assert 112)
   (vehicle-damage-factor  float          :offset-assert 116)
   (vehicle-impulse-factor float          :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

(deftype projectile-bounce (projectile)
  ((played-bounce-time time-frame             :offset-assert 512) ;; time-frame
   (tumble-quat        quaternion :inline :offset-assert 528)
   (gravity            float              :offset-assert 544)
   )
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  (:state-methods
    sitting ;; 41
    )
  (:methods
    (projectile-bounce-method-42 (_type_) none) ;; 42
    (projectile-bounce-method-43 (_type_) none) ;; 43
    )
  )

(define-extern spawn-projectile "Create a new process for a projectile of the given type." (function type projectile-init-by-other-params process-tree dead-pool (pointer process)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; find-nearest-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++target-h:target-flags
(defenum target-flags
  :type uint32
  :bitfield #t
  (tf0 0)
  (tf1 1)
  (tf2 2)
  (tinvuln1 3)
  (tf4 4)
  (tf5 5)
  (tf6 6)
  (prevent-jump 7)
  (prevent-attack 8)
  (prevent-duck 9)
  (tf10 10)
  (tf11 11)
  (tf12 12)
  (tf13 13)
  (tf14 14)
  (tf15 15)
  (tf16 16)
  (prevent-board 17)
  (prevent-gun 18)
  (lleg-still 19)
  (rleg-still 20)
  (lleg-no-ik 21)
  (rleg-no-ik 22)
  (prevent-double-jump 23)
  (disable-attacks 24)
  (tinvuln2 25)
  (tf26 26)
  (tf27 27)
  (invisible 28)
  (tf29 29)
  (tf30 30)
  (tf31 31)
  )
;; ---target-h:target-flags

;; +++target-h:darkjak-stage
(defenum darkjak-stage
  :bitfield #t
  :type uint32
  (force-on)
  (active)
  (bomb0)
  (bomb1)
  (invinc)
  (giant)
  (no-anim)
  (disable-force-on)
  (ds8 8)
  (ds9 9)
  )
;; ---target-h:darkjak-stage

;; +++target-h:lightjak-stage
(defenum lightjak-stage
  :bitfield #t
  :type uint32
  (ls0 0)
  (ls1 1)
  (ls2 2)
  (regen 3)
  (swoop 4)
  (freeze 5)
  (ls6 6)
  (ls7 7)
  (ls8 8)
  (ls9 9)
  (ls10 10)
  (ls11 11)
  (ls12 12)
  (ls13 13)
  (ls14 14)
  (ls15 15)
  )
;; ---target-h:lightjak-stage

;; +++target-h:target-geo
(defenum target-geo
  :type int32
  (uninitialized -2)
  (none -1)
  (jakb 4) ;; jak 2 model
  (jakb-old 5) ;; weird broken jak 2 model
  (jakc 6) ;; jak 3 model
  )
;; ---target-h:target-geo

;; +++target-h:target-anim
(defenum target-anim
  :type int32
  (uninitialized -2)
  (default 0)
  (board 1)
  (dark 2)
  (light 3)
  )
;; ---target-h:target-anim

(declare-type sidekick process-drawable)
(declare-type racer-info basic)
(declare-type tube-info basic)
(declare-type flut-info basic)
(declare-type board-info basic)
(declare-type pilot-info basic)
(declare-type gun-info basic)
(declare-type mech-info basic)
(declare-type turret-info basic)
(declare-type indax-info basic)
(declare-type ladder-info basic)
(declare-type darkjak-info basic)
(declare-type lightjak-info basic)
(declare-type rigid-body-impact structure)

(deftype target (process-focusable)
  ((control                     control-info                             :offset 128 :score 1) ;; guessed by decompiler
   (fact                        fact-info-target                         :override)
   (skel2                       joint-control                            :offset-assert 208) ;; guessed by decompiler
   (shadow-backup               shadow-geo                               :offset-assert 212) ;; guessed by decompiler
   (target-flags                target-flags                             :offset 188 :score 1)
   (game                        game-info                                :offset-assert 216) ;; guessed by decompiler
   (neck                        joint-mod                                :offset-assert 220) ;; guessed by decompiler
   (head                        joint-mod                                :offset-assert 224) ;; guessed by decompiler
   (upper-body                  joint-mod                                :offset-assert 228) ;; guessed by decompiler
   (horns                       joint-mod                                :offset-assert 232) ;; guessed by decompiler
   (hair                        joint-mod                        2       :offset-assert 236) ;; guessed by decompiler
   (arm-ik                      joint-mod-ik                     2       :offset-assert 244) ;; guessed by decompiler
   (leg-ik                      joint-mod-ik                     2       :offset-assert 252) ;; guessed by decompiler
   (foot                        joint-mod                        2       :offset-assert 260) ;; guessed by decompiler
   (cloth                       symbol                                   :offset-assert 268)
   (init-time                   time-frame                               :offset-assert 272) ;; time-frame
   (teleport-time               time-frame                               :offset-assert 280) ;; time-frame
   (state-hook-time             time-frame                               :offset-assert 288) ;; time-frame
   (state-hook                  (function none :behavior target)         :offset-assert 296) ;; guessed by decompiler
   (cam-user-mode               symbol                                   :offset-assert 300) ;; guessed by decompiler
   (sidekick                    (pointer sidekick)                       :offset-assert 304) ;; guessed by decompiler
   (manipy                      (pointer manipy)                         :offset-assert 308) ;; guessed by decompiler
   (mirror                      (pointer process-drawable)               :offset-assert 312) ;; guessed by decompiler
   (attack-info                 attack-info                      :inline :offset-assert 320)
   (attack-info-rec             attack-info                      :inline :offset-assert 496)
   (attack-info-old             attack-info                      8 :inline :offset-assert 672) ;; guessed by decompiler
   (anim-seed                   uint64                                   :offset-assert 2080)
   (alt-cam-pos                 vector                           :inline :offset-assert 2096)
   (current-level               level                                    :offset-assert 2112) ;; guessed by decompiler
   (saved-pos                   transformq                       :inline :offset-assert 2128)
   (saved-owner                 handle                                   :offset-assert 2176)
   (alt-neck-pos                vector                           :inline :offset-assert 2192)
   (focus-search                (array collide-shape)                    :offset-assert 2208) ;; guessed by decompiler
   (handle-search               (array handle)                           :offset-assert 2212)
   (excitement                  float                                    :offset-assert 2216)
   (shock-effect-time           time-frame                               :offset-assert 2224) ;; time-frame
   (beard?                      symbol                                   :offset-assert 2232) ;; guessed by decompiler
   (spool-anim                  spool-anim                               :offset-assert 2236) ;; guessed by decompiler
   (ambient-time                time-frame                               :offset-assert 2240) ;; time-frame
   (fp-hud                      handle                                   :offset-assert 2248) ;; handle
   (no-load-wait                uint64                                   :offset-assert 2256)
   (no-look-around-wait         uint64                                   :offset-assert 2264)
   (burn-proc                   handle                                   :offset-assert 2272) ;; handle
   (pre-joint-hook              (function none :behavior target)         :offset-assert 2280) ;; guessed by decompiler
   (notify                      handle                                   :offset-assert 2288) ;; handle
   (death-resetter              resetter-spec                    :inline :offset-assert 2296)
   (mode-cache                  basic                                    :offset-assert 2312)
   (mode-param1                 handle                                   :offset-assert 2320) ;; handle
   (mode-param2                 uint64                                   :offset-assert 2328)
   (mode-param3                 uint64                                   :offset-assert 2336)
   (major-mode-exit-hook        basic                                    :offset-assert 2344)
   (major-mode-event-hook       basic                                    :offset-assert 2348)
   (sub-mode-exit-hook          basic                                    :offset-assert 2352)
   (ext-geo-control             external-art-buffer                      :offset-assert 2356)
   (pending-ext-geo             target-geo                               :offset-assert 2360)
   (ext-geo                     target-geo                               :offset-assert 2364)
   (ext-anim-control            external-art-buffer                      :offset-assert 2368)
   (pending-ext-anim            target-anim                              :offset-assert 2372)
   (ext-anim                    target-anim                              :offset-assert 2376)
   (tobot-state                 state                                    :offset-assert 2380) ;; guessed by decompiler
   (tobot?                      symbol                                   :offset-assert 2384) ;; guessed by decompiler
   (tobot-recorder              basic                                    :offset-assert 2388)
   (target-effect               uint64                                   :offset-assert 2392)
   (color-effect                basic                                    :offset-assert 2400)
   (color-effect-start-time     time-frame                               :offset-assert 2408) ;; time-frame
   (color-effect-duration       time-frame                               :offset-assert 2416)
   (racer                       racer-info                               :offset-assert 2424) ;; guessed by decompiler
   (tube                        tube-info                                :offset-assert 2428) ;; guessed by decompiler
   (flut                        flut-info                                :offset-assert 2432) ;; guessed by decompiler
   (board                       board-info                               :offset-assert 2436) ;; guessed by decompiler
   (pilot                       pilot-info                               :offset-assert 2440) ;; guessed by decompiler
   (gun                         gun-info                                 :offset-assert 2444) ;; guessed by decompiler
   (mech                        mech-info                                :offset-assert 2448) ;; guessed by decompiler
   (turret                      turret-info                              :offset-assert 2452) ;; guessed by decompiler
   (indax                       indax-info                               :offset-assert 2456) ;; guessed by decompiler
   (ladder                      ladder-info                              :offset-assert 2460)
   (darkjak-interp              float                                    :offset-assert 2464)
   (darkjak-interp-old          float                                    :offset-assert 2468)
   (darkjak-giant-interp        float                                    :offset-assert 2472)
   (darkjak                     darkjak-info                             :offset-assert 2476) ;; guessed by decompiler
   (lightjak-interp             float                                    :offset-assert 2480)
   (lightjak-interp-old         float                                    :offset-assert 2484)
   (lightjak                    lightjak-info                            :offset-assert 2488)
   (scarf-interp-targ           float                                    :offset-assert 2492)
   (scarf-interp                float                                    :offset-assert 2496)
   (scarf-interp-old            float                                    :offset-assert 2500)
   (goggles-interp-targ         float                                    :offset-assert 2504)
   (goggles-interp              float                                    :offset-assert 2508)
   (goggles-interp-old          float                                    :offset-assert 2512)
   (invisible-interp            float                                    :offset-assert 2516)
   (invisible-start-time        time-frame                               :offset-assert 2520)
   (invisible-duration          time-frame                               :offset-assert 2528)
   (invisible-shadow-dir-backup vector                           :inline :offset-assert 2544)
   )
  :method-count-assert 30
  :size-assert         #xa00
  :flag-assert         #x1e09800a00
  ;; field mode-param2 uses ~A with a 64-bit load. field mode-param3 uses ~A with a 64-bit load.
  (:methods
    (target-method-28 (_type_ collide-cache collide-edge-spec) none) ;; 28
    (target-init! (_type_ continue-point symbol) none) ;; 29
    )
  (:states
    ;; leftovers/undefined
    target-ice-stance ;; jak 1
    target-ice-walk ;; jak 1
    target-yellow-jump-blast ;; jak 1
    target-carry-pickup ;; not defined
    target-demo ;; not defined
    ;; special states
    target-startup
    target-title ;; associated process guessed by decompiler, old: (state symbol target)
    (target-credits int)
    target-load-wait
    target-hide
    target-float
    (target-grab symbol)
    (target-play-anim string handle) ;; associated process guessed by decompiler, old: (state string handle target)
    (target-clone-anim handle) ;; associated process guessed by decompiler, old: (state handle target)
    (target-continue continue-point) ;; associated process guessed by decompiler, old: (state continue-point target)
    (target-blast-recover rigid-body-impact)
    (target-warp-in vector vector) ;; associated process guessed by decompiler, old: (state vector vector target target)
    target-warp-out ;; associated process guessed by decompiler, old: (state vector vector target target)
    target-launch-dir
    (target-death symbol) ;; associated process guessed by decompiler, old: (state symbol target)
    ;; general states
    target-stance
    target-stance-ambient
    target-stance-look-around
    target-look-around
    target-walk
    target-attack
    target-running-attack
    (target-attack-air symbol)
    (target-attack-uppercut float float) ;; associated process guessed by decompiler, old: (state float float target)
    (target-attack-uppercut-jump float float) ;; associated process guessed by decompiler, old: (state float float target)
    target-roll
    (target-roll-flip float float)
    target-turn-around
    (target-jump float float surface)
    (target-jump-forward float float)
    (target-high-jump float float object)
    (target-double-jump float float)
    (target-falling symbol)
    target-slide-down
    (target-flop float float float object)
    (target-hit-ground symbol)
    (target-flop-hit-ground symbol)
    (target-hit-ground-hard float)
    (target-duck-stance symbol)
    (target-duck-walk symbol)
    (target-duck-high-jump float float symbol)
    (target-duck-high-jump-jump float float symbol)
    (target-hit symbol attack-info) ;; associated process guessed by decompiler, old: (state symbol attack-info target)
    target-slide-down-to-ground
    ;; gun
    target-gun-stance
    target-gun-walk
    ;; darkjak/lightjak
    target-powerjak-get-on
    ;; darkjak
    (target-darkjak-get-on darkjak-stage)
    target-darkjak-get-off
    target-darkjak-running-attack
    target-darkjak-smack-charge
    target-darkjak-smack
    target-darkjak-bomb1 ;; associated process guessed by decompiler, old: (state float float target)
    target-darkjak-bomb0
    (target-invisible-get-on handle time-frame)
    ;; lightjak
    (target-eco-powerup int float)
    (target-lightjak-get-on lightjak-stage)
    target-lightjak-get-off
    (target-lightjak-regen int)
    target-lightjak-freeze
    target-lightjak-shield
    (target-lightjak-swoop float)
    (target-lightjak-swoop-again float)
    (target-lightjak-swoop-falling symbol)
    ;; board
    (target-board-start handle)
    target-board-get-on
    (target-board-get-off handle symbol)
    target-board-stance
    (target-board-turn-to vector time-frame)
    target-board-turn-around
    (target-board-jump meters meters symbol)
    target-board-jump-kick
    (target-board-wall-kick vector float)
    (target-board-hold float float symbol)
    (target-board-ride-edge symbol)
    (target-board-flip float float symbol)
    target-board-duck-stance
    (target-board-hit symbol attack-info)
    target-board-hit-ground
    target-board-falling
    (target-board-grab symbol)
    (target-board-trickx float float symbol)
    (target-board-tricky float float symbol)
    target-board-halfpipe
    (target-board-grenade handle)
    (target-board-clone-anim handle)
    ;; flut
    (target-flut-start handle symbol int)
    target-flut-get-on
    target-flut-get-off
    target-flut-get-off-jump
    target-flut-eject
    target-flut-grab
    target-flut-stance
    target-flut-walk
    target-flut-jump
    target-flut-double-jump
    target-flut-running-attack
    target-flut-air-attack
    target-flut-air-attack-hit-ground
    target-flut-hit
    target-flut-hit-ground
    target-flut-falling
    target-flut-kanga-catch
    target-flut-death
    target-flut-clone-anim
    ;; mech
    (target-mech-start handle float symbol)
    target-mech-get-on ;; associated process guessed by decompiler, old: (state handle target)
    target-mech-get-off
    target-mech-get-up
    target-mech-grab
    target-mech-stance
    target-mech-walk
    target-mech-jump ;; associated process guessed by decompiler, old: (state float float surface target)
    target-mech-punch
    target-mech-shield
    target-mech-hit ;; associated process guessed by decompiler, old: (state symbol attack-info target)
    target-mech-hit-ground ;; associated process guessed by decompiler, old: (state symbol target)
    target-mech-falling ;; associated process guessed by decompiler, old: (state symbol target)
    target-mech-carry-pickup
    target-mech-carry-stance
    target-mech-carry-walk
    target-mech-carry-jump ;; associated process guessed by decompiler, old: (state float float symbol target)
    target-mech-carry-drag
    target-mech-carry-drop
    target-mech-carry-throw
    target-mech-carry-hit-ground ;; associated process guessed by decompiler, old: (state symbol target)
    target-mech-carry-falling
    target-mech-death ;; associated process guessed by decompiler, old: (state symbol target)
    target-mech-clone-anim ;; associated process guessed by decompiler, old: (state handle target)
    ;; pilot
    (target-racing-start handle)
    (target-grab-ride handle)
    (target-pilot-edge-grab pilot-edge-grab-info) ;; associated process guessed by decompiler, old: (state pilot-edge-grab-info target)
    (target-pilot-start handle symbol symbol)
    target-pilot-get-on
    target-pilot-get-off
    target-pilot-stance
    target-pilot-grab
    target-pilot-impact
    target-pilot-hit ;; associated process guessed by decompiler, old: (state symbol attack-info target)
    target-pilot-death ;; associated process guessed by decompiler, old: (state symbol target)
    target-pilot-clone-anim ;; associated process guessed by decompiler, old: (state handle target)
    target-pilot-daxter-perch
    ;; indax
    (target-indax-start handle object) ;; associated process guessed by decompiler, old: (state handle target)
    target-indax-get-off
    target-indax-stance
    target-indax-walk
    target-indax-attack
    target-indax-running-attack
    target-indax-jump ;; associated process guessed by decompiler, old: (state float float surface target)
    target-indax-double-jump ;; associated process guessed by decompiler, old: (state float float target)
    target-indax-attack-air ;; associated process guessed by decompiler, old: (state symbol target)
    target-indax-hang
    target-indax-falling ;; associated process guessed by decompiler, old: (state symbol target)
    target-indax-hit ;; associated process guessed by decompiler, old: (state symbol attack-info target)
    target-indax-hit-ground ;; associated process guessed by decompiler, old: (state symbol target)
    target-indax-trip
    target-indax-grab
    target-indax-death ;; associated process guessed by decompiler, old: (state symbol target)
    ;; swim
    target-wade-walk
    target-wade-stance
    target-swim-stance
    target-swim
    target-swim-walk
    target-swim-down
    target-swim-up
    (target-swim-jump float float)
    (target-swim-jump-jump float float surface)
    ;; pole
    (target-pole-cycle handle)
    (target-pole-flip-up float float float)
    (target-pole-flip-up-jump float float)
    (target-pole-flip-forward float float float)
    (target-pole-flip-forward-jump float float)
    (target-launch float symbol vector int)
    ;; turret
    (target-turret-get-on handle)
    target-turret-get-off
    (target-turret-stance handle)
    target-turret-stance-fire
    ;; edge grab
    target-edge-grab
    (target-edge-grab-jump float float symbol)
    target-edge-grab-off
    ;; ladder
    (target-ladder-start handle)
    target-ladder
    ;; tube
    (target-tube-start handle)
    target-tube
    ;; tobot
    tobot-stance
    )
  )

(deftype sidekick (process-drawable)
  ((parent              (pointer target)                   :override)
   (control             control-info                       :offset 128 :score 1) ;; guessed by decompiler
   (anim-seed           uint64                             :offset 208)
   (shadow-in-movie?    symbol                             :offset-assert 216) ;; guessed by decompiler
   (special-anim-time   time-frame                         :offset-assert 224) ;; time-frame
   (special-anim-interp float                              :offset-assert 232)
   (special-anim-frame  float                              :offset-assert 236)
   (offset              transformq                 :inline :offset-assert 240)
   (mirror              (pointer process-drawable)         :offset-assert 288) ;; guessed by decompiler
   (ear                 joint-mod                  2       :offset-assert 292)
   (flap                joint-mod                  2       :offset-assert 300)
   )
  :method-count-assert 20
  :size-assert         #x134
  :flag-assert         #x1400c00134
  (:states
    sidekick-clone ;; associated process guessed by decompiler, old: (state sidekick)
    )
  )

(define-extern *target* target)
(define-extern *sidekick* sidekick)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stats-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tr-stat (structure)
  "triangle stats for a renderer. This can apply to a lot of different renderer types."
  ((groups    uint16  :offset-assert 0)
   (fragments uint16  :offset-assert 2)
   (tris      uint32  :offset-assert 4)
   (dverts    uint32  :offset-assert 8)
   (instances uint16  :offset-assert 12)
   (pad       uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype merc-global-stats (structure)
  "Triangle stats for all merc renderers."
  ((merc      tr-stat :inline :offset-assert 0)
   (emerc     tr-stat :inline :offset-assert 16)
   (mercneric tr-stat :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype perf-stat (structure)
  "Performance statistics for a single 'bucket' or category. Unlike the more general profile-bars,
   this records statistics like cache hits/instruction counts."
  ((frame-number   uint32  :offset-assert 0)
   (count          uint32  :offset-assert 4)
   (cycles         uint32  :offset-assert 8)
   (instructions   uint32  :offset-assert 12)
   (icache         uint32  :offset-assert 16)
   (dcache         uint32  :offset-assert 20)
   (select         uint32  :offset-assert 24)
   (ctrl           uint32  :offset-assert 28)
   (accum0         uint32  :offset-assert 32)
   (accum1         uint32  :offset-assert 36)
   (to-vu0-waits   uint32  :offset-assert 40)
   (to-spr-waits   uint32  :offset-assert 44)
   (from-spr-waits uint32  :offset-assert 48)
   )
  :pack-me
  :method-count-assert 14
  :size-assert         #x34
  :flag-assert         #xe00000034
  (:methods
    (perf-stat-method-9 () none) ;; 9 ;; (perf-stat-method-9 () none)
    (print-to-stream (_type_ string basic) none) ;; 10
    (start-profiling! (_type_) none) ;; 11
    (stop-profiling! (_type_) none) ;; 12
    (update-wait-stats (_type_ uint uint uint) none) ;; 13
    )
  )

(deftype perf-stat-array (inline-array-class)
  "Array of all stats for all buckets."
  ((data perf-stat :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(defenum perf-stat-bucket
  :type uint32 ;; guess
  (all-code)
  (spatial-hash-build)
  (spatial-hash-search)
  (collide)
  (collide-list)
  (collide-fill)
  (actor-hash)
  (nav)
  (nav-dma-all)
  (nav-dma-read)
  (nav-dma-write)
  (nav-dma-work)
  (nav-part1)
  (nav-part2)
  (nav-part3)
  (nav-part4)
  (nav-part5)
  (nav-part6)
  (nav-part7)
  (nav-part8)
  (nav-part9)
  (nav-part10)
  (add-to-translation)
  (update-current-poly)
  (clamp-vector-to-mesh)
  (ray-step)
  (update-spheres)
  (travel-around-spheres)
  (avoid-spheres)
  (check-vector-collision-with-nav-spheres)
  (find-nearest-poly)
  (find-containing-poly)
  (generate-velocity)
  (apply-rotation)
  (apply-velocity)
  (travel-post)
  (common-post)
  (misc)
  (mercneric)
  (tie-generic)
  (background)
  (drawable)
  (tfrag)
  (tfrag-scissor)
  (inst-shrub)
  (proto-shrub)
  (inst-tie)
  (proto-tie)
  (bones)
  (camera)
  (foreground)
  (hover-path)
  (hover-spheres)
  (hover-update)
  (hover-move)
  (hover-find-closest)
  (update-los)
)

(define-extern perf-stat-bucket->string (function perf-stat-bucket string))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bsp-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum texture-page-flag
  :type uint16
  :bitfield #t
  (alpha-enable 0)
  )

(declare-type entity-camera entity)

(deftype bsp-node (structure)
  "A node in the 'BSP' tree. This is really a bounding volume tree, where each volume is an axis-aligned box, containing 2 child boxes.
   This is used for precomputed visibility, based on the camera position. This is not used for collision."
  ((front         int16            :offset-assert 0)
   (back          int16            :offset-assert 2)
   (front-box-min vector4b :inline :offset-assert 4)
   (front-box-max vector4b :inline :offset-assert 8)
   (back-box-min  vector4b :inline :offset-assert 12)
   (back-box-max  vector4b :inline :offset-assert 16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype bsp-header (drawable)
  "The bsp-header is really an entire level.
   This probably started as a very simple structure, but now it is extremely complicated."
  ((info file-info                                               :offset 4)
   (all-visible-list         (pointer uint16)     :offset 32) ;; guessed by decompiler
   (visible-list-length      int16                :offset 36)
   (drawable-trees           drawable-tree-array  :offset 40) ;; guessed by decompiler
   (pat                      pointer              :offset 44) ;; guessed by decompiler
   (pat-length               int32                :offset 48)
   ;; jak2: unlikely to match jak 3 exactly!!
   (texture-remap-table      (pointer uint64)            :offset-assert 52)
   (texture-remap-table-len  int32                       :offset-assert 56)
   (texture-ids              (pointer texture-id)        :offset-assert 60)
   (texture-page-count       int32                       :offset-assert 64)
   (unknown-basic            basic                       :offset-assert 68) ;; seems to be 0 everywhere.
   ; (name                     symbol                      :offset-assert 72)
   ; (nickname                 symbol                      :offset-assert 76)
   ; (vis-info                 level-vis-info 8            :offset-assert 80)
   (actors                   drawable-inline-array-actor :offset 112)
   (cameras                  (array entity-camera)       :offset-assert 116)
   (nodes           (inline-array bsp-node)             :offset 120)

   ;; jak2: unlikely to match jak 3 exactly!!
   (level                    level                       :offset-assert 124)
   (current-leaf-idx         uint16                      :offset-assert 128)
   (texture-flags            texture-page-flag 10        :offset 130)
   (cam-outside-bsp          uint8                       :offset        152)
   (cam-using-back           uint8                       :offset-assert 153)
   (cam-box-idx              uint16                      :offset-assert 154)
   ; (ambients                 symbol                      :offset-assert 156) ;; now just #t?
   ; (subdivide-close          float                       :offset-assert 160)
   ; (subdivide-far            float                       :offset-assert 164)
   ; (race-meshes              (array entity-race-mesh)    :offset-assert 168)
   (actor-birth-order        (pointer uint32)            :offset 172)
   ; (light-hash               light-hash                  :offset-assert 176)
   ; (nav-meshes               (array entity-nav-mesh)     :offset-assert 180)
   ; (actor-groups             (array actor-group)         :offset-assert 184)
   (region-trees             (array drawable-tree-region-prim) :offset 188)
   ; (region-array             region-array                :offset-assert 192)
   (collide-hash             collide-hash                :offset 196)
   ; ;; 200 is some array
   ; (wind-array uint32 :offset 200)
   ; ;; 204 is maybe that array's length
   ; (wind-array-length int32 :offset 204)
   ; (city-level-info          city-level-info                    :offset 208)
   (vis-spheres              vector-array                       :offset 216)
   (vis-spheres-length       uint32                             :offset 248)
   ; (region-tree              drawable-tree-region-prim          :offset 252)

   (tfrag-masks              texture-masks-array         :offset 256)
   (tfrag-closest            (pointer float)             :offset-assert 260)
   (tfrag-mask-count         uint32                      :offset        260)

   (shrub-masks              texture-masks-array         :offset-assert 264)
   (shrub-closest            (pointer float)             :offset-assert 268)
   (shrub-mask-count         uint32                      :offset        268)

   (alpha-masks              texture-masks-array         :offset-assert 272)
   (alpha-closest            (pointer float)             :offset-assert 276)
   (alpha-mask-count         uint32                      :offset        276)

   (water-masks              texture-masks-array         :offset-assert 280)
   (water-closest            (pointer float)             :offset-assert 284)
   (water-mask-count         uint32                      :offset        284)

   (bsp-scale                vector :inline              :offset 288)
   (bsp-offset               vector :inline              :offset-assert 304)

   (unk-drawable drawable :offset 320)


   (end uint8 :offset #x18f)
   )
  :method-count-assert 19
  :size-assert         #x190
  :flag-assert         #x1300000190
  (:methods
    (birth (_type_) none) ;; 17
    (deactivate-entities (_type_) none) ;; 18
    )
  )

(deftype game-level (basic)
  "Unused in Jak 1, 2, and 3!"
  ((master-bsp basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype view-frustum (structure)
  "A view frustum, expressed as corners.
   This representation is not very useful, and is used in only one spot to generate camera planes
   in a very inefficient way."
  ((hither-top-left     vector :inline :offset-assert 0)
   (hither-top-right    vector :inline :offset-assert 16)
   (hither-bottom-left  vector :inline :offset-assert 32)
   (hither-bottom-right vector :inline :offset-assert 48)
   (yon-top-left        vector :inline :offset-assert 64)
   (yon-top-right       vector :inline :offset-assert 80)
   (yon-bottom-left     vector :inline :offset-assert 96)
   (yon-bottom-right    vector :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype collide-stats (structure)
  "Very strange collide stats type. It has been somewhat broken in all versions of the game.
   The final stopwatch is cut off. For jak 3, I just fixed it."
  ((calls             uint32            :offset-assert 0)
   (spheres           uint32            :offset-assert 4)
   (nodes             uint32            :offset-assert 8)
   (frags             uint32            :offset-assert 12)
   (tris              uint32            :offset-assert 16)
   (output            uint32            :offset-assert 20)
   (junk (pointer uint32) 24)
   ; (total-target      stopwatch :inline :offset-assert 28) ;; uint32 8
   ; (target-cache-fill stopwatch :inline :offset-assert 60) ;; uint32 8
   ; (target-ray-poly   stopwatch :inline :offset-assert 92) ;; uint32 6
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )

(define-extern inspect-bsp-tree "Attempt to print a bsp-tree, but it is actually broken since the jak 2 bsp format change" (function bsp-header bsp-node none))
(define-extern map-bsp-tree "Attempt to call a function on all bsp-tree nodes, but it is actually broken since the jak 2 bsp format" (function (function bsp-node none) bsp-header bsp-node none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-cache-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type collide-cache-prim structure)
(declare-type collide-using-spheres-params structure)
(declare-type instance-tie structure)

(deftype collide-puss-sphere (structure)
  "A query sphere from the user for the porbe-using-spheres query.
   This is used internally by the collide-cache implementation."
  ((bsphere sphere         :inline :offset-assert 0)
   (bbox4w  bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype collide-puss-work (structure)
  "Scratchpad memory map for probe-using-spheres query."
  ((closest-pt     vector              :inline :offset-assert 0)
   (tri-normal     vector              :inline :offset-assert 16)
   (tri-bbox4w     bounding-box4w      :inline :offset-assert 32)
   (spheres-bbox4w bounding-box4w      :inline :offset-assert 64)
   (spheres        collide-puss-sphere 64 :inline     :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #xc60
  :flag-assert         #xb00000c60
  (:methods
    (check-mesh-prim-against-spheres "Check a single mesh prim against the spheres in this type." (_type_ collide-cache-prim collide-using-spheres-params) symbol) ;; 9
    (check-sphere-prim-against-spheres "Check a single sphere prim against the spheres in this type." (_type_ collide-cache-prim collide-using-spheres-params) symbol) ;; 10
    )
  )

(deftype collide-cache-tri (structure)
  "A single triangle inside the collision cache.
   Contains a reference back to the source object (like a collide-shape or water-control), and the prim itself."
  ((vertex      vector      3 :inline  :offset-assert 0) ;; guessed by decompiler
   (extra-quad  uint8       16 :offset-assert 48) ;; guessed by decompiler
   (pat         pat-surface    :offset 48) ;; guessed by decompiler
   (collide-ptr basic          :offset 52)
   (prim-index  uint16         :offset 56)
   (user16      uint16         :offset 58)
   (user32      uint32         :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(defenum prim-type
  :type int8
  (prim   -2)
  (sphere -1)
  (group  0)
  (mesh 1)
  (fake-prim 2)
  )

(deftype collide-cache-prim (structure)
  "A primitive inside the collide-cache.
   This can represent a sphere, a triangle mesh, or a group of other primitives within a bounding sphere."
  ((prim-core    collide-prim-core  :inline :offset-assert 0)
   (extra-quad   uint8              16      :offset-assert 32) ;; guessed by decompiler
   (ccache       collide-cache              :offset 32) ;; guessed by decompiler
   (prim         collide-shape-prim         :offset 36) ;; guessed by decompiler
   (first-tri    uint16                     :offset 40)
   (num-tris     uint16                     :offset 42)
   (unused       uint8              4       :offset 44) ;; guessed by decompiler
   (world-sphere vector             :inline :offset 0)
   (collide-as   collide-spec               :offset 16) ;; guessed by decompiler
   (action       collide-action             :offset 24) ;; guessed by decompiler
   (prim-type    prim-type                  :offset 28) ;; prim-type
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (collide-cache-prim-method-9 () none) ;; 9 ;; (resolve-moving-sphere-tri (_type_ collide-tri-result collide-prim-core vector float collide-action) float)
    (collide-cache-prim-method-10 () none) ;; 10 ;; (resolve-moving-sphere-sphere (_type_ collide-tri-result collide-prim-core vector float collide-action) float)
    )
  )

(deftype collide-cache (basic)
  "The collide-cache is a structure to accelerate collision queries.
   In particular, it helps with queries where you don't know what you might hit.
   It can detect collision with the background geometry, foreground dynamic collision shapes (spheres and meshes), and water.
   To use it, it must first be 'filled' with geometry. Then you can manually inspect the geometry, or use one of the queries.
   The supported queries are 'line-sphere' (raycast) and 'spheres' (check if intersecting anything).
   It is not useful for ollision queries against a specific foreground object, like 'am I on top of platform X right now?'."
  ((num-tris         int32                      :offset-assert 4)
   (num-prims        int32                      :offset-assert 8)
   (ignore-mask      pat-surface                :offset-assert 12) ;; guessed by decompiler
   (ignore-processes process            2       :offset-assert 16) ;; guessed by decompiler
   (collide-box      bounding-box       :inline :offset-assert 32)
   (collide-box4w    bounding-box4w     :inline :offset-assert 64)
   (collide-with     collide-spec               :offset-assert 96) ;; guessed by decompiler
   (unused           uint32                     :offset-assert 100)
   (prims            collide-cache-prim 100  :inline   :offset-assert 112) ;; guessed by decompiler
   (tris             collide-cache-tri  461  :inline   :offset-assert 4912) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x8670
  :flag-assert         #x1a00008670
  (:methods
    (collide-cache-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (fill-and-probe-using-line-sphere (_type_ collide-query) float) ;; 10
    (fill-and-probe-using-spheres (_type_ collide-query) symbol) ;; 11
    (collide-cache-method-12 () none) ;; 12 ;; (fill-using-bounding-box (_type_ collide-query) none)
    (fill-using-line-sphere (_type_ collide-query) none) ;; 13
    (collide-cache-method-14 () none) ;; 14 ;; (fill-using-spheres (_type_ collide-query) none)
    (collide-cache-method-15 () none) ;; 15 ;; (reset (_type_) none)
    (probe-using-line-sphere (_type_ collide-query) float) ;; 16
    (collide-cache-method-17 () none) ;; 17 ;; (probe-using-spheres (_type_ collide-query) symbol)
    (collide-cache-method-18 () none) ;; 18 ;; (fill-from-bg (_type_ (function collide-hash int collide-list collide-query int) (function collide-cache collide-list collide-query none) collide-query) none)
    (collide-cache-method-19 () none) ;; 19 ;; (fill-from-fg-boxes (_type_) none)
    (collide-cache-method-20 () none) ;; 20 ;; (fill-from-fg-line-sphere (_type_ collide-query) none)
    (collide-cache-method-21 () none) ;; 21 ;; (fill-from-water (_type_ water-control) none)
    (collide-cache-method-22 () none) ;; 22 ;; (collide-cache-method-22 () none)
    (collide-cache-method-23 () none) ;; 23 ;; (collide-cache-method-23 () none)
    (collide-cache-method-24 () none) ;; 24 ;; (collide-cache-method-24 () none)
    (collide-cache-method-25 () none) ;; 25 ;; (collide-cache-method-25 () none)
    )
  )

(deftype collide-list-item (structure)
  "Entry on the broad-phase collision list.
   Can represent instanced collision, as a TIE instance, or a single non-instanced mesh fragment."
  ((mesh instance-tie  :offset-assert 0) ;; guessed by decompiler
   (inst basic         :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-list (structure)
  "List of items returned by the broad-phase collision query."
  ((num-items int32                 :offset-assert 0)
   (items     collide-list-item 256 :inline :offset 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x810
  :flag-assert         #x900000810
  )

(define-extern *collide-cache* collide-cache)
(define-extern *collide-list* collide-list)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype collide-query (structure)
  "Very general collision-query structure. The meaning is different depending on where it used.
   This has both inputs from the user, and collision results."
  ((best-other-tri   collide-tri-result    :inline :offset-assert 0)
   (best-my-tri      collide-tri-result    :inline :offset 0)
   (ignore-processes process-tree          2       :offset-assert 88) ;; guessed by decompiler
   (ignore-process0  process-tree                  :offset 88) ;; guessed by decompiler
   (ignore-process1  process-tree                  :offset 92) ;; guessed by decompiler
   (ignore-pat       pat-surface                   :offset-assert 96) ;; guessed by decompiler
   (collide-with     collide-spec                  :offset-assert 100) ;; guessed by decompiler
   (overlay-params   uint32                3       :offset 112) ;; guessed by decompiler
   (bbox             bounding-box          :inline :offset-assert 128)
   (bbox4w           bounding-box4w        :inline :offset-assert 160)
   (bsphere          sphere                :inline :offset-assert 192)
   (start-pos        vector                :inline :offset-assert 208)
   (move-dist        vector                :inline :offset-assert 224)
   (rlength          vector                :inline :offset-assert 240)
   (exit-planes      plane                 2 :inline :offset-assert 256) ;; guessed by decompiler
   (radius           float                         :offset 268)
   (inv-mat          matrix                :inline :offset 288)
   (spheres          (inline-array sphere)         :offset 112 :score 1) ;; guessed by decompiler
   (num-spheres      uint32                        :offset 116)
   (solid-only       symbol                        :offset 120) ;; guessed by decompiler
   (best-dist        float                         :offset 112)
   (best-other-prim  collide-shape-prim            :offset 116 :score 1) ;; guessed by decompiler
   (best-my-prim     collide-shape-prim            :offset 120 :score 1) ;; guessed by decompiler
   (move-vec         vector                :inline :offset 224)
   (best-u           float                         :offset 112 :score -1)
   (action-mask      collide-action                :offset 352) ;; guessed by decompiler
   (local-box4w      bounding-box4w        :inline :offset-assert 368)
   (search-box       bounding-box4w        :inline :offset-assert 400)
   (search-vector    vector4w              :inline :offset-assert 432)
   (instance-mat     matrix                :inline :offset-assert 448)
   (instance-ptr     basic                         :offset-assert 512)
   (x-addr           uint32                        :offset-assert 516)
   (x-step           uint32                        :offset-assert 520)
   (y-addr           uint32                        :offset-assert 524)
   (y-step           uint32                        :offset-assert 528)
   (z-addr           uint32                        :offset-assert 532)
   (z-step           uint32                        :offset-assert 536)
   )
  :method-count-assert 9
  :size-assert         #x21c
  :flag-assert         #x90000021c
  )

(define-extern *collide-test-flag* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrubbery-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype billboard (drawable)
  "A billboard for shrubbery in the distance. This is simple a quad that faces the camera.
   The only data needed is the texture/mode. The location is determined by bsphere."
  ((flat adgif-shader :inline :offset-assert 32)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  )

(deftype shrub-view-data (structure)
  "Camera and general settings for shrubbery VU1 program."
  ((data           uint128 3       :offset-assert 0) ;; guessed by decompiler
   (texture-giftag gs-gif-tag   :inline :offset 0) ;; :inline
   (consts         vector  :inline :offset 16)
   (fog-clamp      vector  :inline :offset 32)
   (tex-start-ptr  int32           :offset 16)
   (gifbufsum      float           :offset 16)
   (mtx-buf-ptr    int32           :offset 20)
   (exp23          float           :offset 20)
   (fog-0          float           :offset 24)
   (fog-1          float           :offset 28)
   (fog-min        float           :offset 32)
   (fog-max        float           :offset 36)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype shrubbery (drawable)
  "Prototype (mesh/geometry) for a shrub. not _really_ a drawable in any way, as it
   overwrites all the normal drawable fields."
  ((textures (inline-array adgif-shader)  :offset 4) ;; guessed by decompiler
   (header   qword                        :offset 8)
   (obj-qwc  uint8                        :offset 12)
   (vtx-qwc  uint8                        :offset 13)
   (col-qwc  uint8                        :offset 14)
   (stq-qwc  uint8                        :offset 15)
   (obj      uint32                       :offset 16)
   (vtx      uint32                       :offset 20)
   (col      uint32                       :offset 24)
   (stq      uint32                       :offset 28)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

(deftype instance-shrubbery (instance)
  "Instance of a shrub."
  ((flat-normal vector :inline :offset-assert 64)
   (flat-hwidth float          :offset 76)
   (color       uint32         :offset 8)
   )
  :method-count-assert 17
  :size-assert         #x50
  :flag-assert         #x1100000050
  )

(deftype drawable-inline-array-instance-shrub (drawable-inline-array)
  "Array of shrub instances stored in the level data."
  ((data instance-shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :flag-assert #x1100000074
  )

(deftype drawable-tree-instance-shrub (drawable-tree)
  "Drawable-tree for the shrubs."
  ((info prototype-array-shrub-info :offset 8)
   (colors-added time-of-day-palette :offset 12) ;; added
   )
  :flag-assert #x1100000020
  )

(deftype generic-shrub-fragment (drawable)
  "Shrub data, converted into the format for generic.
   The shrub renderer doesn't support clipping, so it falls back to generic.
   This requires storing the data for all shrubs prototype twice!"
  ((textures (inline-array adgif-shader)  :offset 4) ;; guessed by decompiler
   (vtx-cnt  uint32                       :offset 8)
   (cnt-qwc  uint8                        :offset 12)
   (vtx-qwc  uint8                        :offset 13)
   (col-qwc  uint8                        :offset 14)
   (stq-qwc  uint8                        :offset 15)
   (cnt      uint32                       :offset 16)
   (vtx      uint32                       :offset 20)
   (col      uint32                       :offset 24)
   (stq      uint32                       :offset 28)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

(deftype prototype-shrubbery (drawable-inline-array)
  "Array of shrub prototypes."
  ((data shrubbery 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :flag-assert #x1100000044
  )

(deftype prototype-trans-shrubbery (prototype-shrubbery)
  "Array of transparent shrub prototypes."
  ()
  :flag-assert #x1100000044
  )

(deftype prototype-generic-shrub (drawable-group)
  ()
  :flag-assert #x1100000020
  )

(deftype shrubbery-matrix (structure)
  "Instance matrix for a shrub, contains interpolated color."
  ((mat   matrix :inline :offset-assert 0)
   (color qword  :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype shrub-near-packet (structure)
  "DMA templates for generic rendering of shrubs."
  ((matrix-tmpl dma-packet :inline :offset-assert 0)
   (header-tmpl dma-packet :inline :offset-assert 16)
   (stq-tmpl    dma-packet :inline :offset-assert 32)
   (color-tmpl  dma-packet :inline :offset-assert 48)
   (vertex-tmpl dma-packet :inline :offset-assert 64)
   (mscal-tmpl  dma-packet :inline :offset-assert 80)
   (init-tmpl   dma-packet :inline :offset-assert 96)
   (init-data   qword      8       :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(deftype instance-shrub-work (structure)
  "Scratchpad layout for generating shrub DMA."
  ((dummy                           qword             3 :inline      :offset-assert 0) ;; guessed by decompiler
   (chaina                          qword             8 :inline        :offset-assert 48) ;; guessed by decompiler
   (chainb                          qword             8 :inline        :offset-assert 176) ;; guessed by decompiler
   (colors                          rgba              1024    :offset-assert 304) ;; guessed by decompiler
   (matrix-tmpl                     qword             20  :inline      :offset-assert 4400) ;; guessed by decompiler
   (count-tmpl                      vector4w          20  :inline      :offset-assert 4720) ;; guessed by decompiler
   (mscalf-tmpl                     dma-packet        :inline :offset-assert 5040)
   (mscalf-ret-tmpl                 dma-packet        :inline :offset-assert 5056)
   (adgif-tmpl                      dma-gif-packet    :inline :offset-assert 5072)
   (billboard-tmpl                  dma-gif-packet    :inline :offset-assert 5104)
   (billboard-const                 vector            :inline :offset-assert 5136)
   (shrub-near-packets              shrub-near-packet 6  :inline       :offset-assert 5152) ;; guessed by decompiler
   (dma-ref                         dma-packet        :inline :offset-assert 6016)
   (dma-end                         dma-packet        :inline :offset-assert 6032)
   (wind-const                      vector            :inline :offset-assert 6048)
   (constants                       vector            :inline :offset-assert 6064)
   (color-constant                  vector4w          :inline :offset-assert 6080)
   (hmge-d                          vector            :inline :offset-assert 6096)
   (hvdf-offset                     vector            :inline :offset-assert 6112)
   (wind-force                      vector            :inline :offset-assert 6128)
   (color                           vector            :inline :offset-assert 6144)
   (bb-color                        vector            :inline :offset-assert 6160)
   (min-dist                        vector            :inline :offset-assert 6176)
   (temp-vec                        vector            :inline :offset-assert 6192)
   (guard-plane                     plane             4  :inline       :offset-assert 6208) ;; guessed by decompiler
   (plane                           plane             4  :inline       :offset-assert 6272) ;; guessed by decompiler
   (last                            uint32            4       :offset-assert 6336) ;; guessed by decompiler
   (next                            uint32            4       :offset-assert 6352) ;; guessed by decompiler
   (count                           uint16            4       :offset-assert 6368) ;; guessed by decompiler
   (mod-count                       uint16            4       :offset-assert 6376) ;; guessed by decompiler
   (wind-vectors                    uint32                    :offset-assert 6384)
   (instance-ptr                    uint32                    :offset-assert 6388)
   (chain-ptr                       uint32                    :offset-assert 6392)
   (chain-ptr-next                  uint32                    :offset-assert 6396)
   (stack-ptr                       uint32                    :offset-assert 6400)
   (bucket-ptr                      uint32                    :offset-assert 6404)
   (src-ptr                         uint32                    :offset-assert 6408)
   (to-spr                          uint32                    :offset-assert 6412)
   (from-spr                        uint32                    :offset-assert 6416)
   (shrub-count                     uint32                    :offset-assert 6420)
   (stack-ptr2                      uint32                    :offset 6400)
   (node                            uint32            6       :offset 6428) ;; guessed by decompiler
   (length                          uint32            6       :offset-assert 6452) ;; guessed by decompiler
   (prototypes                      uint32                    :offset-assert 6476)
   (bucket-ptr2                      uint32                    :offset 6404)
   (start-bank                      uint8             20      :offset 6484) ;; guessed by decompiler
   (buffer-index                    uint32                    :offset-assert 6504)
   (current-spr                     uint32                    :offset-assert 6508)
   (current-mem                     uint32                    :offset-assert 6512)
   (current-shrub-near-packet       uint32                    :offset-assert 6516)
   (current-shrub-near-trans-packet uint32                    :offset-assert 6520)
   (to-spr2                          uint32                    :offset 6412)
   (dma-buffer                      basic                     :offset 6528)
   (near-last                       uint32                    :offset-assert 6532)
   (near-next                       uint32                    :offset-assert 6536)
   (near-count                      uint32                    :offset-assert 6540)
   (near-trans-last                 uint32                    :offset-assert 6544)
   (near-trans-next                 uint32                    :offset-assert 6548)
   (near-trans-count                uint32                    :offset-assert 6552)
   (last-shrubs                     uint32                    :offset-assert 6556)
   (chains                          uint32                    :offset-assert 6560)
   (flags                           uint32                    :offset-assert 6564)
   (node-count                      uint32                    :offset-assert 6568)
   (inst-count                      uint32                    :offset-assert 6572)
   (wait-from-spr                   uint32                    :offset-assert 6576)
   (wait-to-spr                     uint32                    :offset-assert 6580)
   (texture-dists                   uint32                    :offset-assert 6584)
   )
  :method-count-assert 9
  :size-assert         #x19bc
  :flag-assert         #x9000019bc
  )

(deftype instance-shrub-dma (structure)
  ((instancea uint128 325 :offset-assert 0) ;; guessed by decompiler
   (instanceb uint128 325 :offset-assert 5200) ;; guessed by decompiler
   (outa      uint128 128 :offset-assert 10400) ;; guessed by decompiler
   (outb      uint128 128 :offset-assert 12448) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

(define-extern shrubbery-login-post-texture "Do some weird fix-up to the shrubbery textures. this is likely to present normal-looking adgifs to the texture system, but then we scramble them up for easier consumption by VU1." (function shrubbery none))
(define-extern *shrub-state* int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tie-fragment-debug (structure)
  "Optional debug information about a tie-fragment."
  ((num-tris    uint16                :offset-assert 0)
   (num-dverts  uint16                :offset-assert 2)
   (debug-lines (array vector-array)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype tie-fragment (drawable)
  "A mesh fragment of a TIE. This is a chunk of mesh that is rendered by VU1, stored as DMA chains."
  ((gif-ref       (inline-array adgif-shader)  :offset 4) ;; guessed by decompiler
   (point-ref     uint32                       :offset 8)
   (color-index   uint16                       :offset 12)
   (base-colors   uint8                        :offset 14)
   (tex-count     uint16                       :offset 32)
   (gif-count     uint16                       :offset 34)
   (vertex-count  uint16                       :offset 36)
   (color-count   uint16                       :offset-assert 38)
   (dp-ref        uint32                       :offset-assert 40)
   (dp-qwc        uint32                       :offset-assert 44)
   (generic-ref   uint32                       :offset-assert 48)
   (generic-count uint16                       :offset-assert 52)
   (normal-count  uint16                       :offset-assert 54)
   (normal-ref    uint32                       :offset-assert 56)
   (debug         tie-fragment-debug           :offset-assert 60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

(deftype instance-tie (instance)
  "A TIE model instance."
  ((color-indices uint32                :offset 8)
   (bucket-ptr    prototype-bucket-tie  :offset 12) ;; guessed by decompiler
   (max-scale     uint16                :offset 38)
   (rmin-scale    uint16                :offset 54)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  "Array of tie instances stored in the level."
  ((data instance-tie 1 :inline :offset-assert 32)  ;; not sure on type here
   (pad uint32)
   )
  :flag-assert #x1100000064
  )

(deftype drawable-tree-instance-tie (drawable-tree)
  "Top-level drawable-tree for TIEs"
  ((prototypes proxy-prototype-array-tie          :offset 8) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

(deftype prototype-tie (drawable-inline-array)
  "Prototype for a TIE: just an array of fragments."
  ((data tie-fragment 1 :inline :offset-assert 32)
   (pad uint32)
   )
  :flag-assert #x1100000064
  )

(deftype tie-matrix (structure)
  "Per-instance matrix for TIE VU1 rendering."
  ((mat          matrix :inline :offset-assert 0)
   (morph        qword  :inline :offset-assert 64)
   (fog          qword  :inline :offset-assert 80)
   (envmap-flag  uint32         :offset 80)
   (guard-flag   uint32         :offset 84)
   (vertex-alpha float          :offset 88)
   (fog-value    float          :offset 92)
   (fixed-alpha  float          :offset 68)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype instance-tie-work (structure)
  "workspace for TIE instance DMA generation"
  ((wind-const                     vector     :inline :offset-assert 0)
   (hmge-d                         vector     :inline :offset-assert 16)
   (hvdf-offset                    vector     :inline :offset-assert 32)
   (wind-force                     vector     :inline :offset-assert 48)
   (constant                       vector     :inline :offset-assert 64)
   (far-morph                      vector     :inline :offset-assert 80)
   (dist-test                      vector     :inline :offset-assert 96)
   (min-dist                       vector     :inline :offset-assert 112)
   (guard-plane                    plane      4 :inline      :offset-assert 128) ;; guessed by decompiler
   (upload-color-0                 dma-packet :inline :offset-assert 192)
   (upload-color-1                 dma-packet :inline :offset-assert 208)
   (upload-color-2                 dma-packet :inline :offset-assert 224)
   (upload-color-ret               dma-packet :inline :offset-assert 240)
   (upload-color-temp              dma-packet :inline :offset-assert 256)
   (generic-color-0                dma-packet :inline :offset-assert 272)
   (generic-color-1                dma-packet :inline :offset-assert 288)
   (generic-color-end              dma-packet :inline :offset-assert 304)
   (envmap-color-0                 dma-packet :inline :offset-assert 320)
   (envmap-color-1                 dma-packet :inline :offset-assert 336)
   (tie-scissor-perspective-matrix matrix     :inline :offset-assert 352)
   (tod-env-color                  vector     :inline :offset-assert 416)
   (morph-temp                     vector     :inline :offset-assert 432)
   (fog-temp                       vector     :inline :offset-assert 448)
   (fade-temp                      float              :offset-assert 464)
   (wind-vectors                   uint32             :offset-assert 468)
   (test-id                        uint32             :offset-assert 472)
   (test-id2                       uint32             :offset-assert 476)
   (dma-buffer                     basic              :offset-assert 480)
   (to-spr                         uint32             :offset-assert 484)
   (from-spr                       uint32             :offset-assert 488)
   (wind-work                      uint32             :offset-assert 492)
   (cur-vis-bits                   uint32             :offset-assert 496)
   (end-vis-bits                   uint32             :offset-assert 500)
   (refl-fade-fac                  float              :offset-assert 504)
   (refl-fade-end                  float              :offset-assert 508)
   (flags                          uint32             :offset-assert 512)
   (vanish-flag                    uint32             :offset-assert 516)
   (translucent-flag               uint32             :offset-assert 520)
   (wait-from-spr                  uint32             :offset-assert 524)
   (wait-to-spr                    uint32             :offset-assert 528)
   (use-etie                       symbol             :offset-assert 532) ;; guessed by decompiler
   (buffer-start                   uint32             :offset-assert 536)
   (buffer-end                     uint32             :offset-assert 540)
   (tfrag-dists                    uint32             :offset-assert 544)
   (alpha-dists                    uint32             :offset-assert 548)
   (water-dists                    uint32             :offset-assert 552)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )

(deftype instance-tie-dma (structure)
  "Scratchpad memory layout for TIE instance DMA generation."
  ((banka instance-tie      32 :inline :offset-assert 0) ;; guessed by decompiler
   (bankb instance-tie      32 :inline :offset-assert 2048) ;; guessed by decompiler
   (outa  uint128           256 :offset-assert 4096) ;; guessed by decompiler
   (outb  uint128           256 :offset-assert 8192) ;; guessed by decompiler
   ;; this is outside the type????
   (work  instance-tie-work :dynamic  :offset-assert 12288)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

(deftype prototype-tie-work (structure)
  "workspace for TIE protype DMA generation."
  ((upload-flushe              dma-packet   :inline :offset-assert 0)
   (upload-palette             dma-packet   :inline :offset-assert 16)
   (upload-model-0             dma-packet   :inline :offset-assert 32)
   (upload-model-1             dma-packet   :inline :offset-assert 48)
   (upload-model-2             dma-packet   :inline :offset-assert 64)
   (upload-model-3             dma-packet   :inline :offset-assert 80)
   (upload-model-near-0        dma-packet   :inline :offset-assert 96)
   (upload-model-near-1        dma-packet   :inline :offset-assert 112)
   (upload-model-near-2        dma-packet   :inline :offset-assert 128)
   (upload-model-near-3        dma-packet   :inline :offset-assert 144)
   (upload-model-near-4        dma-packet   :inline :offset-assert 160)
   (envmap-palette             dma-packet   :inline :offset-assert 176)
   (envmap-shader              dma-packet   :inline :offset-assert 192)
   (upload-envmap-0            dma-packet   :inline :offset-assert 208)
   (upload-envmap-1            dma-packet   :inline :offset-assert 224)
   (upload-envmap-2            dma-packet   :inline :offset-assert 240)
   (upload-envmap-3            dma-packet   :inline :offset-assert 256)
   (upload-envmap-4            dma-packet   :inline :offset-assert 272)
   (upload-envmap-scissor-4    dma-packet   :inline :offset-assert 288)
   (generic-palette            dma-packet   :inline :offset-assert 304)
   (generic-model-0            dma-packet   :inline :offset-assert 320)
   (generic-model-1            dma-packet   :inline :offset-assert 336)
   (generic-model-2            dma-packet   :inline :offset-assert 352)
   (model-next                 dma-packet   :inline :offset-assert 368)
   (clamp                      uint64               :offset-assert 384)
   (prototype-array            basic                :offset-assert 392)
   (wait-from-spr              uint32               :offset-assert 396)
   (wait-to-spr                uint32               :offset-assert 400)
   (mood                       mood-context         :offset-assert 404)
   (last                       uint32       16      :offset 416) ;; guessed by decompiler
   (next                       uint32       16      :offset-assert 480) ;; guessed by decompiler
   (count                      uint16       16      :offset-assert 544) ;; guessed by decompiler
   (tie-last                   uint32               :offset 416)
   (tie-next                   uint32               :offset 480)
   (tie-count                  uint16               :offset 544)
   (trans-last                 uint32               :offset 420)
   (trans-next                 uint32               :offset 484)
   (trans-count                uint16               :offset 546)
   (water-last                 uint32               :offset 424)
   (water-next                 uint32               :offset 488)
   (water-count                uint16               :offset 548)
   (scissor-last               uint32               :offset 428)
   (scissor-next               uint32               :offset 492)
   (scissor-count              uint16               :offset 550)
   (scissor-trans-last         uint32               :offset 432)
   (scissor-trans-next         uint32               :offset 496)
   (scissor-trans-count        uint16               :offset 552)
   (scissor-water-last         uint32               :offset 436)
   (scissor-water-next         uint32               :offset 500)
   (scissor-water-count        uint16               :offset 554)
   (envmap-last                uint32               :offset 440)
   (envmap-next                uint32               :offset 504)
   (envmap-count               uint16               :offset 556)
   (envmap-trans-last          uint32               :offset 444)
   (envmap-trans-next          uint32               :offset 508)
   (envmap-trans-count         uint16               :offset 558)
   (envmap-water-last          uint32               :offset 448)
   (envmap-water-next          uint32               :offset 512)
   (envmap-water-count         uint16               :offset 560)
   (envmap-scissor-last        uint32               :offset 452)
   (envmap-scissor-next        uint32               :offset 516)
   (envmap-scissor-count       uint16               :offset 562)
   (envmap-scissor-trans-last  uint32               :offset 456)
   (envmap-scissor-trans-next  uint32               :offset 520)
   (envmap-scissor-trans-count uint16               :offset 564)
   (envmap-scissor-water-last  uint32               :offset 460)
   (envmap-scissor-water-next  uint32               :offset 524)
   (envmap-scissor-water-count uint16               :offset 566)
   (generic-last               uint32               :offset 464)
   (generic-next               uint32               :offset 528)
   (generic-count              uint16               :offset 568)
   (generic-trans-last         uint32               :offset 468)
   (generic-trans-next         uint32               :offset 532)
   (generic-trans-count        uint16               :offset 570)
   (generic-water-last         uint32               :offset 472)
   (generic-water-next         uint32               :offset 536)
   (generic-water-count        uint16               :offset 572)
   (vanish-last                uint32               :offset 476)
   (vanish-next                uint32               :offset 540)
   (vanish-count               uint16               :offset 574)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

(deftype prototype-tie-dma (structure)
  ((colora               rgba    256 :offset-assert 0) ;; guessed by decompiler
   (colorb               rgba    256 :offset-assert 1024) ;; guessed by decompiler
   (outa                 uint128 256 :offset-assert 2048) ;; guessed by decompiler
   (outb                 uint128 256 :offset-assert 6144) ;; guessed by decompiler
   (geometry             uint32  4   :offset-assert 10240) ;; guessed by decompiler
   (next                 uint32  12  :offset-assert 10256) ;; guessed by decompiler
   (count                uint16  12  :offset-assert 10304) ;; guessed by decompiler
   (counts               uint32  4   :offset-assert 10328) ;; guessed by decompiler
   (palette-ptr          uint32      :offset 10336)
   (model-ptr            uint32      :offset 10340)
   (ret-ptr              uint32      :offset-assert 10344)
   (length               uint32      :offset-assert 10348)
   (flags                uint32      :offset-assert 10352)
   (dma-buffer           basic       :offset-assert 10356)
   (this-frag-count      uint32      :offset-assert 10360)
   (frag-count           uint8   4   :offset-assert 10364) ;; guessed by decompiler
   (from-spr             uint32      :offset-assert 10368)
   (to-spr               uint32      :offset-assert 10372)
   (spr-out              uint32      :offset-assert 10376)
   (this-count           uint32      :offset-assert 10380)
   (scissor-geometry     uint32      :offset 10240)
   (near-geometry        uint32      :offset 10244)
   (mid-geometry         uint32      :offset 10248)
   (far-geometry         uint32      :offset 10252)
   (scissor-frag-count   uint8       :offset 10364)
   (near-frag-count      uint8       :offset 10365)
   (mid-frag-count       uint8       :offset 10366)
   (far-frag-count       uint8       :offset 10367)
   (tie-scissor-next     uint32      :offset 10256)
   (tie-near-next        uint32      :offset 10260)
   (tie-mid-next         uint32      :offset 10264)
   (tie-far-next         uint32      :offset 10268)
   (trans-scissor-next   uint32  4   :offset 10256) ;; guessed by decompiler
   (trans-near-next      uint32      :offset 10260)
   (trans-mid-next       uint32      :offset 10264)
   (trans-far-next       uint32      :offset 10268)
   (water-scissor-next   uint32  4   :offset 10256) ;; guessed by decompiler
   (water-near-next      uint32      :offset 10260)
   (water-mid-next       uint32      :offset 10264)
   (water-far-next       uint32      :offset 10268)
   (envmap-scissor-next  uint32  4   :offset 10272) ;; guessed by decompiler
   (envmap-near-next     uint32      :offset 10276)
   (envmap-mid-next      uint32      :offset 10280)
   (envmap-far-next      uint32      :offset 10284)
   (generic-near-next    uint32      :offset 10288)
   (generic-mid-next     uint32      :offset 10292)
   (generic-far-next     uint32      :offset 10296)
   (vanish-next          uint32      :offset 10300)
   (tie-count            uint16      :offset 10304)
   (tie-scissor-count    uint16      :offset 10304)
   (tie-near-count       uint16      :offset 10306)
   (tie-mid-count        uint16      :offset 10308)
   (tie-far-count        uint16      :offset 10310)
   (trans-count          uint16      :offset 10304)
   (trans-scissor-count  uint16      :offset 10304)
   (trans-near-count     uint16      :offset 10306)
   (trans-mid-count      uint16      :offset 10308)
   (trans-far-count      uint16      :offset 10310)
   (water-count          uint16      :offset 10304)
   (water-scissor-count  uint16      :offset 10304)
   (water-near-count     uint16      :offset 10306)
   (water-mid-count      uint16      :offset 10308)
   (water-far-count      uint16      :offset 10310)
   (envmap-count         uint16      :offset 10312)
   (envmap-scissor-count uint16      :offset 10312)
   (envmap-near-count    uint16      :offset 10314)
   (envmap-mid-count     uint16      :offset 10316)
   (envmap-far-count     uint16      :offset 10318)
   (generic-count        uint16      :offset 10320)
   (generic-near-count   uint16      :offset 10320)
   (generic-mid-count    uint16      :offset 10322)
   (generic-far-count    uint16      :offset 10324)
   (vanish-count         uint16      :offset 10326)
   (next-clear           uint32  3   :offset 10256) ;; guessed by decompiler
   (count-clear          uint16  3   :offset 10304) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2890
  :flag-assert         #x900002890
  )

(define-extern *instance-tie-work-copy* instance-tie-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype tfragment-stats (structure)
  "Triangle and vertex stats for a single tfragment."
  ((num-tris   uint16 4 :offset-assert 0) ;; guessed by decompiler
   (num-dverts uint16 4 :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype tfragment-debug-data (structure)
  "Optional debug information (stats, lines) for a tfragment."
  ((stats       tfragment-stats      :inline :offset-assert 0)
   (debug-lines (array vector-array)         :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype generic-tfragment (structure)
  "Unused. Could have been a way to render tfrag's through generic."
  ((dummy int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype tfragment (drawable)
  "A tfrag mesh fragment. This is just references to DMA data, plus some metadata."
  ((color-index         uint16                        :offset 6)
   (debug-data          tfragment-debug-data          :offset 8)
   (color-indices       uint32                        :offset 12)
   (colors              uint32                        :offset 12)
   (dma-chain           uint32                      3 :offset 32) ;; guessed by decompiler
   (dma-common          uint32                        :offset 32)
   (dma-level-0         uint32                        :offset 32)
   (dma-base            uint32                        :offset 36)
   (dma-level-1         uint32                        :offset 40)
   (dma-qwc             uint8                       4 :offset 44) ;; guessed by decompiler
   (shader              (inline-array adgif-shader)   :offset 48) ;; guessed by decompiler
   (num-shaders         uint8                         :offset 52)
   (num-base-colors     uint8                         :offset 53)
   (num-level0-colors   uint8                         :offset 54)
   (num-level1-colors   uint8                         :offset 55)
   (color-offset        uint8                         :offset 56)
   (color-count         uint8                         :offset 57)
   (texture-masks-index uint16                        :offset 58)
   (generic             generic-tfragment             :offset 60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

(deftype drawable-inline-array-tfrag (drawable-inline-array)
  "Array of tfragments"
  ((data tfragment 1 :inline :offset-assert 32)
   (pad uint32))
  :flag-assert #x1100000064
  )

(deftype drawable-inline-array-tfrag-trans (drawable-inline-array-tfrag)
  ;; note: this is probably a bug in the type layout, copied from jak 1.
  ;; this data2 is not used.
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2 uint32))
  :flag-assert #x11000000b4
  )

(deftype drawable-inline-array-tfrag-water (drawable-inline-array-tfrag)
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2 uint32))
  :flag-assert #x11000000b4
  )

(deftype drawable-tree-tfrag (drawable-tree)
  "top level tfrag tree."
  ((time-of-day-pal time-of-day-palette :offset 12)
   (arrays    drawable-inline-array :dynamic :offset 32 :score 100) ;; either drawable-inline-array-node or drawable-inline-array-tfrag
   )
  :flag-assert #x1100000020
  )

(deftype drawable-tree-tfrag-trans (drawable-tree-tfrag)
  ()
  :flag-assert #x1100000020
  )

(deftype drawable-tree-tfrag-water (drawable-tree-tfrag-trans)
  ()
  :flag-assert #x1100000020
  )

(deftype tfrag-dists (structure)
  "Distances for mesh level-of-detail blending for use on VU1."
  ((data   uint32 16 :offset-assert 0) ;; guessed by decompiler
   (vector vector 4  :offset 0) ;; guessed by decompiler
   (k0s    vector 2  :offset 0) ;; guessed by decompiler
   (k1s    vector 2  :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype tfrag-data (structure)
  "Constants for VU1 data memory for tfrag rendering."
  ((data        uint32      56      :offset-assert 0) ;; guessed by decompiler
   (vector      vector      14      :offset 0) ;; guessed by decompiler
   (fog         vector      :inline :offset 0)
   (val         vector      :inline :offset 16)
   (strgif      gs-gif-tag       :inline :offset 32) ;; gs-gif-tag :inline
   (fangif      gs-gif-tag       :inline :offset 48) ;; gs-gif-tag :inline
   (adgif       gs-gif-tag       :inline :offset 64) ;; gs-gif-tag :inline
   (hvdf-offset vector      :inline :offset 80)
   (hmge-scale  vector      :inline :offset 96)
   (invh-scale  vector      :inline :offset 112)
   (ambient     vector      :inline :offset 128)
   (guard       vector      :inline :offset 144)
   (dists       tfrag-dists :inline :offset 160)
   (k0s         uint128     2       :offset 160) ;; guessed by decompiler
   (k1s         uint128     2       :offset 192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype tfrag-control (structure)
  "VU1 'control' data containing address and counters."
  ((num-base-points           uint32  :offset-assert 0)
   (num-shared-base-points    uint32  :offset-assert 4)
   (num-level0-points         uint32  :offset-assert 8)
   (num-shared-level0-points  uint32  :offset-assert 12)
   (num-level1-points         uint32  :offset-assert 16)
   (num-shared-level1-points  uint32  :offset-assert 20)
   (ptr-vtxdata               uint32  :offset-assert 24)
   (ptr-base-points           uint32  :offset-assert 28)
   (ptr-shared-base-points    uint32  :offset-assert 32)
   (ptr-level0-points         uint32  :offset-assert 36)
   (ptr-shared-level0-points  uint32  :offset-assert 40)
   (ptr-level1-points         uint32  :offset-assert 44)
   (ptr-shared-level1-points  uint32  :offset-assert 48)
   (ptr-draw-points           uint32  :offset-assert 52)
   (ptr-interpolated-0        uint32  :offset-assert 56)
   (ptr-shared-interpolated-0 uint32  :offset-assert 60)
   (ptr-interpolated1         uint32  :offset-assert 64)
   (ptr-shared-interpolated1  uint32  :offset-assert 68)
   (ptr-strip-data            uint32  :offset-assert 72)
   (ptr-texture-data          uint32  :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype tfrag-stats (structure)
  "TFRAG statistics computed on EE."
  ((from         int32  :offset-assert 0)
   (to           int32  :offset-assert 4)
   (cnt          int32  :offset-assert 8)
   (tris         int32  :offset-assert 12)
   (tfaces       int32  :offset-assert 16)
   (tfrags       int32  :offset-assert 20)
   (dtris        int32  :offset-assert 24)
   (base-verts   int32  :offset-assert 28)
   (level0-verts int32  :offset-assert 32)
   (level1-verts int32  :offset-assert 36)
   (dma-cnt      int32  :offset-assert 40)
   (dma-dta      int32  :offset-assert 44)
   (dma-tex      int32  :offset-assert 48)
   (strips       int32  :offset-assert 52)
   (drawpoints   int32  :offset-assert 56)
   (vif          int32  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype tfrag-packet (structure)
  ((tag uint128 2 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tfrag-work (structure)
  "Scratch space for generating TFRAG DMA."
  ((base-tmpl                dma-packet :inline :offset-assert 0)
   (level-0-tmpl             dma-packet :inline :offset-assert 16)
   (common-tmpl              dma-packet :inline :offset-assert 32)
   (level-1-tmpl             dma-packet :inline :offset-assert 48)
   (color-tmpl               dma-packet :inline :offset-assert 64)
   (frag-dists               vector     :inline :offset-assert 80)
   (min-dist                 vector     :inline :offset-assert 96)
   (color-ptr                vector4w   :inline :offset-assert 112)
   (tr-stat-tfrag            tr-stat            :offset-assert 128)
   (tr-stat-tfrag-scissor    tr-stat            :offset-assert 132)
   (vu1-enable-tfrag         int32              :offset-assert 136)
   (vu1-enable-tfrag-scissor int32              :offset-assert 140)
   (cur-vis-bits             uint32             :offset-assert 144)
   (end-vis-bits             uint32             :offset-assert 148)
   (src-ptr                  uint32             :offset-assert 152)
   (last-call                uint32             :offset-assert 156)
   (dma-buffer               basic              :offset-assert 160)
   (test-id                  uint32             :offset-assert 164)
   (wait-from-spr            uint32             :offset-assert 168)
   (wait-to-spr              uint32             :offset-assert 172)
   (near-wait-from-spr       uint32             :offset-assert 176)
   (near-wait-to-spr         uint32             :offset-assert 180)
   (max-fragment             uint16             :offset-assert 184)
   (min-fragment             uint16             :offset-assert 186)
   (texture-dists            uint32             :offset-assert 188)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype tfrag-dma (structure)
  "Memory layout for to/from scratchpad for tfrag."
  ((banka  tfragment 16 :inline  :offset-assert 0) ;; guessed by decompiler
   (bankb  tfragment 16 :inline  :offset-assert 1024) ;; guessed by decompiler
   (outa   uint128   128  :offset-assert 2048) ;; guessed by decompiler
   (outb   uint128   128  :offset-assert 4096) ;; guessed by decompiler
   ;; another weird bug with size here...
   (colors rgba      2047 :offset-assert 6144) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x37fc
  :flag-assert         #x9000037fc
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; adgif-shader-array is already defined!

(deftype hfrag-montage (structure)
  ((data uint16 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hfrag-bucket (structure)
  ((next                 uint32  :offset-assert 0)
   (count                uint16  :offset-assert 4)
   (vertex-count         uint16  :offset-assert 6)
   (next-scissor         uint32  :offset-assert 8)
   (count-scissor        uint16  :offset-assert 12)
   (vertex-count-scissor uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype hfrag-packed-index (uint16)
  ()
  :flag-assert #x900000002
  )

(deftype hfrag-vertex (structure)
  ((height       uint16  :offset-assert 0)
   (packed-index hfrag-packed-index  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype hfrag-vert-index (structure)
  ((pos    vector2ub :inline :offset-assert 0)
   (index0 uint16            :offset 2)
   (index1 uint16            :offset 4)
   (index2 uint16            :offset 6)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; note: the poly vert-index stuff is a total guess!

(deftype hfrag-poly4 (structure)
  ((data hfrag-vert-index 4 :inline  :offset-assert 0) ;; field could not be read.
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hfrag-poly9 (structure)
  ((data hfrag-vert-index 9 :inline  :offset-assert 0) ;; field could not be read.
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

(deftype hfrag-poly25 (structure)
  ((data hfrag-vert-index 25 :inline  :offset-assert 0) ;; field could not be read.
   )
  :method-count-assert 9
  :size-assert         #xc8
  :flag-assert         #x9000000c8
  )

(deftype hfrag-poly4-chain (structure)
  ((tag   dma-packet :inline :offset-assert 0)
   (verts vector4w-3    4  :inline     :offset-assert 16)
   (next  dma-packet :inline :offset 208)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype hfrag-poly9-chain (structure)
  ((tag   dma-packet :inline :offset-assert 0)
   (verts vector4w-3    12 :inline     :offset-assert 16)
   (next  dma-packet :inline :offset 592)
   )
  :method-count-assert 9
  :size-assert         #x260
  :flag-assert         #x900000260
  )

(deftype hfrag-poly25-chain (structure)
  ((tag   dma-packet :inline :offset-assert 0)
   (verts vector4w-3    40 :inline     :offset-assert 16)
   (next  dma-packet :inline :offset-assert 1936)
   )
  :method-count-assert 9
  :size-assert         #x7a0
  :flag-assert         #x9000007a0
  )

(deftype hfrag-cache-vertex (structure)
  ((color vector4w :inline :offset-assert 0)
   (pos   vector   :inline :offset-assert 16)
   (clip  uint32           :offset 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hfrag-cache-line (structure)
  ((data hfrag-cache-vertex 9 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

(deftype hfrag-visbits (structure)
  ((data uint8 128 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype hfrag-gcf-control (structure)
  ((matrix      matrix          :inline :offset-assert 0)
   (giftag      generic-gif-tag :inline :offset-assert 64)
   (adnops      gs-adcmd         2  :inline     :offset-assert 80)
   (num-strips  uint32                  :offset 76)
   (num-dps     uint32                  :offset 92)
   (kick-offset uint32                  :offset 108)
   (shader      gcf-shader      :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype hfrag-gcf-ctrl (structure)
  ((tag     dma-packet        :inline :offset-assert 0)
   (control hfrag-gcf-control :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype hfrag-init-packet (structure)
  ((init-tmpl dma-packet :inline :offset-assert 0)
   (init-data uint32    8       :offset-assert 16)
   ;(quad      UNKNOWN    3       :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype hfrag-sprite-coord (structure)
  ((pos0 vector4w :inline :offset-assert 0)
   (pos1 vector4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hfrag-montage-coord (structure)
  ((stq0 vector4 :inline :offset-assert 0)
   (stq1 vector4 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hfrag-sprite-packet (structure)
  ((sprite-tmpl dma-gif-packet :inline :offset-assert 0)
   (color       vector4w       :inline :offset-assert 32)
   (tex0        vector         :inline :offset-assert 48)
   (pos0        vector4w       :inline :offset-assert 64)
   (tex1        vector         :inline :offset-assert 80)
   (pos1        vector4w       :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype hfrag-tex-data (structure)
  ((quad     qword 3 :inline :offset-assert 0)
   (prims    uint64 6 :offset 0)
   (reg-0    uint8     :offset 8)
   (reg-1    uint8     :offset 24)
   (reg-2    uint8     :offset 40)
   (tex0     uint64    :offset 0)
   (tex1     uint64    :offset 16)
   (texflush uint64    :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype hfrag-mip-packet (structure)
  ((mip-tmpl dma-gif-packet :inline :offset-assert 0)
   (tex0-1   vector         :inline :offset-assert 32)
   (tex1-1   vector         :inline :offset-assert 48)
   (texflush vector         :inline :offset-assert 64)
   (color    vector4w       :inline :offset-assert 80)
   (tex0     vector         :inline :offset-assert 96)
   (pos0     vector         :inline :offset-assert 112)
   (tex1     vector         :inline :offset-assert 128)
   (pos1     vector         :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype hfrag-adgif-packet (structure)
  ((adgif-tmpl dma-gif-packet :inline :offset-assert 0)
   (adgif-data adgif-shader   :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype hfrag-adgif-packet2 (structure)
  ((adgif-tmpl dma-gif-packet :inline :offset-assert 0)
   (adgif-data adgif-shader   :inline :offset-assert 32)
   (texflush   uint128                :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype hfrag-frame (structure)
  ((quad     qword 4 :inline :offset 0)
   (prims    uint64 8 :offset 0)
   (reg-0    uint8     :offset 8)
   (reg-1    uint8     :offset 24)
   (reg-2    uint8     :offset 40)
   (reg-3    uint8     :offset 56)
   (frame    uint64    :offset 0)
   (scissor  uint64    :offset 16)
   (xyoffset uint64    :offset 32)
   (test     uint64    :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype hfrag-frame-packet (structure)
  ((frame-tmpl dma-gif-packet :inline :offset-assert 0)
   (frame-data hfrag-frame    :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype hfragment (drawable)
  ((start-corner     vector :inline :offset-assert 32)
   (spheres          uint32         :offset-assert 48)
   (visids           uint32         :offset-assert 52)
   (shaders          (inline-array adgif-shader)         :offset-assert 56)
   (colors           basic          :offset-assert 60)
   (montage          uint32         :offset-assert 64)
   (buckets-far      uint32         :offset-assert 68)
   (buckets-mid      uint32         :offset-assert 72)
   (buckets-near     uint32         :offset-assert 76)
   (verts            uint32         :offset-assert 80)
   (pat-array        uint32         :offset-assert 84)
   (pat-length       uint16         :offset-assert 88)
   (num-buckets-far  uint16         :offset-assert 90)
   (num-buckets-mid  uint16         :offset-assert 92)
   (num-buckets-near uint16         :offset-assert 94)
   (size             uint32         :offset 44)
   )
  :method-count-assert 22
  :size-assert         #x60
  :flag-assert         #x1600000060
  (:methods
    (hfragment-method-17 () none) ;; 17
    (hfragment-method-18 () none) ;; 18
    (hfragment-method-19 () none) ;; 19
    (hfragment-method-20 () none) ;; 20
    (hfragment-method-21 () none) ;; 21
    )
  )

(deftype hfrag-dma (structure)
  ((banka  uint32 340  :offset-assert 0)
   (bankb  uint32 340  :offset-assert 1360)
   (outa   uint128 227  :offset-assert 2720)
   (outb   uint128 227  :offset-assert 6352)
   (cache  hfrag-cache-line 8 :inline    :offset-assert 9984)
   (colors rgba 1024 :offset-assert 12288)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

(deftype hfrag-work (structure)
  ((far-chaina             dma-packet            6 :inline      :offset-assert 0)
   (far-chainb             dma-packet            6 :inline      :offset-assert 96)
   (mid-chaina             dma-packet            10 :inline     :offset-assert 192)
   (mid-chainb             dma-packet            10 :inline     :offset-assert 352)
   (near-chaina            dma-packet            18 :inline     :offset-assert 512)
   (near-chainb            dma-packet            18 :inline     :offset-assert 800)
   (poly4-tmpl             dma-packet            3  :inline     :offset-assert 1088)
   (poly9-tmpl             dma-packet            3  :inline       :offset-assert 1136)
   (poly25-tmpl            dma-packet            3  :inline       :offset-assert 1184)
   (init-tmpl              dma-packet            3  :inline       :offset-assert 1232) ;; ??
   (control-tmpl           dma-packet            2  :inline       :offset 1376)
   (heights4-tmpl          dma-packet            2  :inline       :offset-assert 1408)
   (colors4-tmpl           dma-packet            2  :inline       :offset-assert 1440)
   (heights9-tmpl          dma-packet            2  :inline       :offset-assert 1472)
   (colors9-tmpl           dma-packet            2  :inline       :offset-assert 1504)
   (heights25-tmpl         dma-packet            2  :inline       :offset-assert 1536)
   (colors25-tmpl          dma-packet            2  :inline       :offset-assert 1568)
   (init-vu1-tmpl          dma-packet            2  :inline       :offset-assert 1600) ;; ??
   (next-tmpl              dma-packet         :inline :offset 1696)
   (call-tmpl              dma-packet         :inline :offset-assert 1712)
   (ret-tmpl               dma-packet         :inline :offset-assert 1728)
   (next-scissor-tmpl      dma-packet         :inline :offset-assert 1744)
   (ret-scissor-tmpl       dma-packet         :inline :offset-assert 1760)
   (frame-tmpl             dma-gif-packet     :inline :offset-assert 1776)
   (frames                 hfrag-frame            5 :inline       :offset-assert 1808)
   (adgif-tmpl             dma-gif-packet     :inline :offset-assert 2128)
   (adgif-tmpl2            dma-gif-packet     :inline :offset-assert 2160)
   (sprite-tmpl            dma-gif-packet     :inline :offset-assert 2192)
   (mip-tmpl               dma-gif-packet     :inline :offset-assert 2224)
   (color                  uint128            6       :offset-assert 2256)
   (far-data               hfrag-sprite-coord :inline :offset-assert 2352)
   (near-data              vector4w-2            16 :inline      :offset-assert 2384)
   (mip-data               vector4w-3            7 :inline       :offset 2896)
   (tex-data               hfrag-tex-data            5       :offset 3120)
   (tex                    uint128            6       :offset 3360)
   (montage-tex-coords     uint128            128     :offset 3456)
   (giftag                 generic-gif-tag    :inline :offset 7552)
   (call-abort             dma-packet         :inline :offset-assert 7568)
   (call-abort-vu1         dma-packet         :inline :offset-assert 7584)
   (shader-far             adgif-shader       :inline :offset-assert 7600)
   (shader-mid             adgif-shader       :inline :offset-assert 7680)
   (shader-near            adgif-shader       :inline :offset-assert 7760)
   (stq                    uint128            9       :offset-assert 7840)
   (shader                 adgif-shader       :inline :offset-assert 7984)
   (constants              vector             :inline :offset-assert 8064)
   (pos-temp               vector4w           :inline :offset-assert 8080)
   (trans-temp             vector             :inline :offset 8080)
   (dists                  vector             :inline :offset-assert 8096)
   (rdists                 vector             :inline :offset-assert 8112)
   (call-poly4-near        uint32                     :offset-assert 8128)
   (call-poly9-mid         uint32                     :offset-assert 8132)
   (call-poly9-near        uint32                     :offset-assert 8136)
   (call-poly25-far        uint32                     :offset-assert 8140)
   (call-poly25-mid        uint32                     :offset-assert 8144)
   (dma-buffer             basic                      :offset-assert 8148)
   (base                   uint32                     :offset-assert 8152)
   (wait-to-spr            uint32                     :offset-assert 8156)
   (wait-from-spr          uint32                     :offset-assert 8160)
   (buffer-end             uint32                     :offset-assert 8164)
   (subdiv-index           uint32                     :offset-assert 8168)
   (scissor                basic                      :offset-assert 8172)
   (chain-ptr              uint32                     :offset-assert 8176)
   (chain-ptr-next         uint32                     :offset-assert 8180)
   (near-dist              float                      :offset-assert 8184)
   (far-dist               float                      :offset-assert 8188)
   (to-spr                 uint32                     :offset-assert 8192)
   (from-spr               uint32                     :offset-assert 8196)
   (lowres-flag            basic                      :offset-assert 8200)
   (hfrag                  hfragment          :inline :offset-assert 8208)
   (next-far               int16                      :offset-assert 8304)
   (next-far-mid           int16                      :offset-assert 8306)
   (next-mid               int16                      :offset-assert 8308)
   (next-near-mid          int16                      :offset-assert 8310)
   (next-near              int16                      :offset-assert 8312)
   (next-far-scissor       int16                      :offset-assert 8314)
   (next-near-mid-scissor  int16                      :offset-assert 8316)
   (next-near-scissor      int16                      :offset-assert 8318)
   (count-far              int16                      :offset-assert 8320)
   (count-far-mid          int16                      :offset-assert 8322)
   (count-mid              int16                      :offset-assert 8324)
   (count-near-mid         int16                      :offset-assert 8326)
   (count-near             int16                      :offset-assert 8328)
   (count-far-scissor      int16                      :offset-assert 8330)
   (count-near-mid-scissor int16                      :offset-assert 8332)
   (count-near-scissor     int16                      :offset-assert 8334)
   (size-far               int32                      :offset-assert 8336)
   (size-far-mid           int32                      :offset-assert 8340)
   (size-mid               int32                      :offset-assert 8344)
   (size-near-mid          int32                      :offset-assert 8348)
   (size-near              int32                      :offset-assert 8352)
   (size-far-scissor       int32                      :offset-assert 8356)
   (size-near-mid-scissor  int32                      :offset-assert 8360)
   (size-near-scissor      int32                      :offset-assert 8364)
   (size-texture           int32                      :offset-assert 8368)
   (poly-far               hfrag-poly25               :offset-assert 8372)
   (poly-mid25             uint32                     :offset-assert 8376)
   (poly-mid               uint32                     :offset-assert 8380)
   (poly-near              uint32                     :offset-assert 8384)
   (far-texture            uint32                     :offset-assert 8388)
   (near-textures          uint16            16      :offset-assert 8392)
   (draw-table             uint16            1024    :offset 8456)
   (corners                uint128            1024    :offset-assert 10512)
   )
  :method-count-assert 36
  :size-assert         #x6910
  :flag-assert         #x2400006910
  (:methods
    (hfrag-work-method-9 () none) ;; 9
    (hfrag-work-method-10 () none) ;; 10
    (hfrag-work-method-11 () none) ;; 11
    (hfrag-work-method-12 () none) ;; 12
    (hfrag-work-method-13 () none) ;; 13
    (hfrag-work-method-14 () none) ;; 14
    (hfrag-work-method-15 () none) ;; 15
    (hfrag-work-method-16 () none) ;; 16
    (hfrag-work-method-17 () none) ;; 17
    (hfrag-work-method-18 () none) ;; 18
    (hfrag-work-method-19 () none) ;; 19
    (hfrag-work-method-20 () none) ;; 20
    (hfrag-work-method-21 () none) ;; 21
    (hfrag-work-method-22 () none) ;; 22
    (hfrag-work-method-23 () none) ;; 23
    (hfrag-work-method-24 () none) ;; 24
    (hfrag-work-method-25 () none) ;; 25
    (hfrag-work-method-26 () none) ;; 26
    (hfrag-work-method-27 () none) ;; 27
    (hfrag-work-method-28 () none) ;; 28
    (hfrag-work-method-29 () none) ;; 29
    (hfrag-work-method-30 () none) ;; 30
    (hfrag-work-method-31 () none) ;; 31
    (hfrag-work-method-32 () none) ;; 32
    (hfrag-work-method-33 () none) ;; 33
    (hfrag-work-method-34 () none) ;; 34
    (hfrag-work-method-35 () none) ;; 35
    )
  )

(deftype hfrag-mip-packet-array (structure)
  ((data hfrag-mip-packet 6 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x3c0
  :flag-assert         #x9000003c0
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; background-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype background-work (basic)
  "List of all things for the background renderer to draw."
  ((tfrag-tree-count       int32                           :offset-assert 4)
   (tfrag-trees            drawable-tree-tfrag          11 :offset-assert 8) ;; guessed by decompiler
   (tfrag-levels           level                        11 :offset-assert 52) ;; guessed by decompiler
   (tfrag-trans-tree-count int32                           :offset-assert 96)
   (tfrag-trans-trees      drawable-tree-tfrag-trans    11 :offset-assert 100) ;; guessed by decompiler
   (tfrag-trans-levels     level                        11 :offset-assert 144) ;; guessed by decompiler
   (tfrag-water-tree-count int32                           :offset-assert 188)
   (tfrag-water-trees      drawable-tree-tfrag-water    11 :offset-assert 192) ;; guessed by decompiler
   (tfrag-water-levels     level                        11 :offset-assert 236) ;; guessed by decompiler
   (shrub-tree-count       int32                           :offset-assert 280)
   (shrub-trees            drawable-tree-instance-shrub 11 :offset-assert 284) ;; guessed by decompiler
   (shrub-levels           level                        11 :offset-assert 328) ;; guessed by decompiler
   (tie-tree-count         int32                           :offset-assert 372)
   (tie-trees              drawable-tree-instance-tie   11 :offset-assert 376) ;; guessed by decompiler
   (tie-levels             level                        11 :offset-assert 420) ;; guessed by decompiler
   (tie-generic            basic                        11 :offset-assert 464) ;; guessed by decompiler
   (tie-generic-trans      basic                        11 :offset-assert 508) ;; guessed by decompiler
   (wait-to-vu0            uint32                          :offset-assert 552)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; subdivide-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype subdivide-settings (basic)
  "Input settings for distances for switching mesh level of details.
   These are set by the level code and read by rendering code."
  ((dist   float 5  :offset-assert 4) ;; guessed by decompiler
   (meters float 5  :offset-assert 24) ;; guessed by decompiler
   (close  float 12 :offset-assert 44) ;; guessed by decompiler
   (far    float 12 :offset-assert 92) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type float float) _type_)
    )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )

(deftype subdivide-dists (structure)
  "Unused subdivide distances. Internally, tfrag/tie figure these out instead."
  ((data   uint32  32 :offset 0) ;; guessed by decompiler
   (vector vector  8  :offset 0) ;; guessed by decompiler
   (k0s    uint128 4  :offset 0) ;; guessed by decompiler
   (k1s    uint128 4  :offset 64) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype terrain-stats (structure)
  "Desptie the name `terrain-stats`, these are more general triangle stats for all renderers."
  ((pris                     tr-stat :inline :offset-assert 0)
   (tie-generic              tr-stat :inline :offset-assert 16)
   (tie-vanish               tr-stat :inline :offset-assert 32)
   (tie                      tr-stat :inline :offset-assert 48)
   (tie-scissor              tr-stat :inline :offset-assert 64)
   (tie-envmap               tr-stat :inline :offset-assert 80)
   (tie-envmap-scissor       tr-stat :inline :offset-assert 96)
   (tie-trans                tr-stat :inline :offset-assert 112)
   (tie-scissor-trans        tr-stat :inline :offset-assert 128)
   (tie-envmap-trans         tr-stat :inline :offset-assert 144)
   (tie-envmap-scissor-trans tr-stat :inline :offset-assert 160)
   (tie-water                tr-stat :inline :offset-assert 176)
   (tie-scissor-water        tr-stat :inline :offset-assert 192)
   (tie-envmap-water         tr-stat :inline :offset-assert 208)
   (tie-envmap-scissor-water tr-stat :inline :offset-assert 224)
   (shrub-near               tr-stat :inline :offset-assert 240)
   (shrub                    tr-stat :inline :offset-assert 256)
   (tfrag-scissor            tr-stat :inline :offset-assert 272)
   (tfrag                    tr-stat :inline :offset-assert 288)
   (billboard                tr-stat :inline :offset-assert 304)
   (tfrag-trans              tr-stat :inline :offset-assert 320)
   (tfrag-scissor-trans      tr-stat :inline :offset-assert 336)
   (tfrag-water              tr-stat :inline :offset-assert 352)
   (tfrag-scissor-water      tr-stat :inline :offset-assert 368)
   (trans-pris               tr-stat :inline :offset-assert 384)
   (trans-shrub              tr-stat :inline :offset-assert 400)
   (ocean-mid                tr-stat :inline :offset-assert 416)
   (ocean-near               tr-stat :inline :offset-assert 432)
   (shadow                   tr-stat :inline :offset-assert 448)
   (hfrag                    tr-stat :inline :offset-assert 464)
   (total                    tr-stat :inline :offset-assert 480)
   )
  :method-count-assert 9
  :size-assert         #x1f0
  :flag-assert         #x9000001f0
  )

(deftype background-area (structure)
  "Scratchpad memory layout for most background rendering
   This uses the full scratchpad so it should only be used when the stack isn't on the scratchpad (rendering code).
   Interestingly, dma-area went from a union of all the -dma types to a plain array of bytes in jak 3."
  ((dma-area uint8 14336 :offset-assert 0) ;; guessed by decompiler
   (vis-list uint8    2048  :offset-assert 14336) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

(deftype foreground-area (structure)
  "Scratchpad memory layout for most foreground rendering."
  ((generic-work    generic-work    :inline :offset 0)
   (foreground-work foreground-work :inline :offset 0)
   (joint-work      joint-work      :inline :offset 0)
   (bone-mem        bone-memory     :inline :offset 0)
   (shadow-work     shadow-work     :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )

(deftype region-prim-area (structure)
  "Scratchpad memory layout for regions."
  ((region-prim-list        region-prim-list       :inline :offset-assert 0)
   (pos                     vector                 :inline :offset-assert 1296)
   (exit-pos                vector                 :inline :offset-assert 1312) ;; added
   (ray                     vector                 :inline :offset-assert 1328)
   (exit-ray                vector                 :inline :offset-assert 1344) ;; added
   (region-enter-count      int32                          :offset-assert 1360)
   (region-enter-list       region                 320     :offset-assert 1364) ;; guessed by decompiler
   (region-enter-prim-list  drawable-region-sphere 320     :offset-assert 2644) ;; guessed by decompiler
   (region-exit-count       int32                          :offset-assert 3924)
   (region-exit-list        region                 320     :offset-assert 3928) ;; guessed by decompiler
   (region-exit-prim-list   drawable-region-sphere 320     :offset-assert 5208) ;; guessed by decompiler
   (region-inside-count     int32                          :offset-assert 6488)
   (region-inside-list      region                 320     :offset-assert 6492) ;; guessed by decompiler
   (region-inside-prim-list drawable-region-sphere 320     :offset-assert 7772) ;; guessed by decompiler
   (region-start-count      int32                          :offset-assert 9052)
   (region-start-list       region                 320     :offset-assert 9056) ;; guessed by decompiler
   (region-start-prim-list  drawable-region-sphere 320     :offset-assert 10336) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x2d60
  :flag-assert         #xd00002d60
  (:methods
    (track-entered-region! (_type_ drawable-region-sphere) int) ;; 9
    (track-exited-region! (_type_ drawable-region-sphere) int) ;; 10
    (track-inside-region! (_type_ drawable-region-sphere) int) ;; 11
    (track-start-region! (_type_ drawable-region-sphere) int) ;; 12
    )
  )

(deftype sprite-area (structure)
  "Scratchpad memory layout for sprites."
  ((clock-data vector 22  :inline     :offset-assert 0) ;; guessed by decompiler
   (buffer     uint8  :dynamic :offset-assert 352) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

(deftype work-area (structure)
  "All scratchpad memory layouts."
  ((background  background-area  :inline :offset 0)
   (foreground  foreground-area  :inline :offset 0)
   (region-prim region-prim-area :inline :offset 0)
   (sprite      sprite-area      :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

(deftype terrain-context (structure)
  "Useless wrapper around work-area. (this added some stuff in jak 1)"
  ((work work-area :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

(define-extern *terrain-stats* terrain-stats)
(define-extern *collide-stats* collide-stats)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++entity-h:entity-perm-status
(defenum entity-perm-status
  :bitfield #t
  :type uint16
  (bit-0 0) ;; blocks birth
  (error 1)
  (dead 2)
  (no-kill 3)
  (bit-4 4)
  (bit-5 5)
  (subtask-complete 6)
  (bit-7 7)
  (complete 8)
  (bit-9 9)
  (bit-10 10)
  (save 11)
  (bit-12 12)
  (bit-13 13)
  (bit-14 14)
  (bit-15 15)
  )
;; ---entity-h:entity-perm-status

(deftype entity-perm (structure)
  "Entity information that gets persisted in the save file."
  ((user-object object   2 :offset-assert 0) ;; guessed by decompiler
   (user-uint64 uint64     :offset 0)
   (user-float  float    2 :offset 0) ;; guessed by decompiler
   (user-int32  int32    2 :offset 0) ;; guessed by decompiler
   (user-uint32 uint32   2 :offset 0) ;; guessed by decompiler
   (user-int16  int16    4 :offset 0) ;; guessed by decompiler
   (user-uint16 uint16   4 :offset 0) ;; guessed by decompiler
   (user-int8   int8     8 :offset 0) ;; guessed by decompiler
   (user-uint8  uint8    8 :offset 0) ;; guessed by decompiler
   (status      entity-perm-status :offset-assert 8) ;; entity-perm-status
   (dummy       uint8    1 :offset-assert 10) ;; guessed by decompiler
   (task        game-task  :offset-assert 11) ;; game-task
   (aid         actor-id   :offset-assert 12) ;; guessed by decompiler
   (quad        uint128    :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (update (_type_ symbol entity-perm-status) _type_) ;; 9
    )
  )

(deftype entity-links (structure)
  "A linked list of entities with some extra data about their current status."
  ((prev-link entity-links         :offset-assert 0)
   (next-link entity-links         :offset-assert 4)
   (entity    entity               :offset-assert 8) ;; guessed by decompiler
   (process   process              :offset-assert 12) ;; guessed by decompiler
   (level     level                :offset-assert 16) ;; guessed by decompiler
   (vis-id    int32                :offset-assert 20)
   (kill-mask task-mask            :offset-assert 24)
   (vis-dist  meters               :offset-assert 28)
   (trans     vector       :inline :offset-assert 32)
   (perm      entity-perm  :inline :offset-assert 48)
   (status    entity-perm-status   :offset 56)
   (aid       uint32               :offset 60)
   (task      game-task            :offset 59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (entity-links-method-9 () none) ;; 9 ;; (birth? (_type_ vector) symbol)
    )
  )

(deftype entity-perm-array (inline-array-class)
  ((data entity-perm :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype entity-links-array (inline-array-class)
  "An array of [[entity-links]].
   Levels store a reference to this which holds all the entities in the level."
  ((data entity-links :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype entity (res-lump)
  "Entities are mainly used to place objects in a level.

   As a child of [[res-lump]], they store various types of metadata
   in [[res-tag]]s (such as name, curve data, volume data, etc.)
   that gets accessed by the accompanying process."
  ((trans vector :inline :offset-assert 32)
   (aid uint32 :offset-assert 48)
   )
  :method-count-assert 27
  :size-assert         #x34
  :flag-assert         #x1b00000034
  (:methods
    (birth! (_type_) _type_) ;; 22
    (kill! (_type_) _type_) ;; 23
    (add-to-level! (_type_ level-group level actor-id) none) ;; 24
    (remove-from-level! (_type_ level-group) _type_) ;; 25
    (get-level (_type_) level) ;; 26
    )
  )

(deftype entity-camera (entity)
  ((connect connectable :inline :offset-assert 64)
   )
  :flag-assert #x1b00000050
  )

(declare-type nav-mesh basic)
(deftype entity-nav-mesh (entity)
  ((nav-mesh nav-mesh  :offset-assert  52))
  :method-count-assert 29
  :size-assert         #x38
  :flag-assert         #x1d00000038
  (:methods
    (initialize-nav-mesh! "Initialize the nav-mesh in this entity." (_type_) none) ;; 27
    (debug-draw (_type_) none) ;; 28
    )
  )

(declare-type race-mesh basic)
(deftype entity-race-mesh (entity)
  ((race-mesh race-mesh)
   )
  :flag-assert #x1d00000038
  (:methods
    (entity-race-mesh-method-27 () none) ;; 27
    (entity-race-mesh-method-28 () none) ;; 28
    )
  )

(define-extern entity-actor type)
(declare-type nav-poly structure)
(deftype entity-actor (entity)
  "Child class of [[entity]] used to spawn [[process-drawable]] actors."
  ((etype type :offset 56)
   (task  game-task :offset-assert 60)
   (kill-mask task-mask :offset 52)
   (vis-id int16 :offset-assert 62)
   (quat quaternion :inline :offset-assert 64)
   )
  :method-count-assert 33
  :size-assert         #x50
  :flag-assert         #x2100000050
  ;; Failed to read fields.
  (:methods
    (next-actor (_type_) entity-actor) ;; 27
    (prev-actor (_type_) entity-actor) ;; 28
    (debug-print (_type_ symbol type) none) ;; 29
    (toggle-status (_type_ entity-perm-status symbol) none) ;; 30
    (get-simple-travel-vector (_type_ vector vector vector object float) nav-mesh) ;; 31
    (project-point-to-nav-mesh (_type_ vector vector nav-poly float) nav-poly) ;; 32
    )
  )

(deftype actor-reference (structure)
  ((actor entity  :offset-assert 0) ;; guessed by decompiler
   (id    uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype actor-group (inline-array-class)
  ((data actor-reference :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype entity-info (basic)
  ((ptype     type    :offset-assert 4) ;; guessed by decompiler
   (pool      symbol  :offset-assert 8) ;; guessed by decompiler
   (heap-size int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype actor-bank (basic)
  ((pause-dist float  :offset-assert 4) ;; meters
   (birth-dist float  :offset-assert 8) ;; meters
   (birth-max  int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern *generate-actor-vis* symbol)
(define-extern *generate-actor-vis-start* symbol)
(define-extern *generate-actor-vis-output* symbol)
(define-extern *ACTOR-bank* actor-bank)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-vec-data-2d (structure)
  "Per-particle data needed for rendering. This is sent to VU1."
  ((x-y-z-sx    vector   :inline :offset-assert 0)
   (flag-rot-sy vector   :inline :offset-assert 16)
   (r-g-b-a     vector   :inline :offset-assert 32)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (rot         float            :offset 24)
   (flag        int32            :offset 16)
   (matrix      int32            :offset 20)
   (warp-turns  int32            :offset 16)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0) ;; guessed by decompiler
   (data64      uint64   6       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-2d (basic)
  "Array of sprite data for all 2D sprites. There are two groups: normal and HUD."
  ((num-sprites int32                       2 :offset-assert 4) ;; guessed by decompiler
   (num-valid   int32                       2 :offset-assert 12) ;; guessed by decompiler
   (vec-data    pointer                       :offset-assert 20) ;; guessed by decompiler
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24) ;; guessed by decompiler
   (pad         uint128                     4 :offset-assert 32) ;; guessed by decompiler
   (data        uint128                     1 :offset-assert 96) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int int) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype sprite-vec-data-3d (structure)
  "Per-particle data needed for rendering. This is sent to VU1."
  ((x-y-z-sx    vector   :inline :offset-assert 0)
   (qx-qy-qz-sy vector   :inline :offset-assert 16)
   (r-g-b-a     vector   :inline :offset-assert 32)
   (x           float            :offset 0)
   (y           float            :offset 4)
   (z           float            :offset 8)
   (sx          float            :offset 12)
   (sy          float            :offset 28)
   (qx          float            :offset 16)
   (qy          float            :offset 20)
   (qz          float            :offset 24)
   (r           float            :offset 32)
   (g           float            :offset 36)
   (b           float            :offset 40)
   (a           float            :offset 44)
   (trans       vector3s :inline :offset 0)
   (rot         vector3s :inline :offset 16)
   (color       rgbaf    :inline :offset 32)
   (data        uint128  1       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-3d (basic)
  "Array of sprite data for all 3D sprites. There are two groups, but only the first is used."
  ((num-sprites int32                       2 :offset-assert 4) ;; guessed by decompiler
   (num-valid   int32                       2 :offset-assert 12) ;; guessed by decompiler
   (vec-data    pointer                       :offset-assert 20) ;; guessed by decompiler
   (adgif-data  (inline-array adgif-shader)   :offset-assert 24) ;; guessed by decompiler
   (data        uint128                     1 :offset-assert 32) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type int int) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-sprite-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-glow-data (structure)
  ((position   vector     :inline :offset-assert 0)
   (size-x     float              :offset 12)
   (size-probe float              :offset 16)
   (z-offset   float              :offset-assert 20)
   (rot-angle  float              :offset-assert 24)
   (size-y     float              :offset-assert 28)
   (color      rgbaf      :inline :offset-assert 32)
   (fade-a     float              :offset-assert 48)
   (fade-b     float              :offset-assert 52)
   (tex-id     texture-id         :offset-assert 56) ;; guessed by decompiler
   (dummy      uint32             :offset-assert 60)
   (quads      vector 4 :inline :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (set-trans (_type_ vector) none) ;; 9
    )
  )

(deftype simple-sprite-system (structure)
  ((count     int16                            :offset-assert 0)
   (max-count int16                            :offset-assert 2)
   (data      (inline-array sprite-glow-data)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (add! "Add a sprite to the list, to be drawn later." (_type_ sprite-glow-data) none) ;; 9
    (draw-all-sprites! "Submit all sprites to the sprite-glow renderer" (_type_ dma-buffer) none) ;; 10
    (clear! "Reset the list." (_type_) none) ;; 11
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; eye-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype eye (structure)
  "Data for a single eye."
  ((data         vector  2 :inline :offset-assert 0 :score -1) ;; guessed by decompiler
   (x            float     :offset 0)
   (y            float     :offset 4)
   (lid          float     :offset 8)
   (iris-scale   float     :offset 16)
   (pupil-scale  float     :offset 20)
   (lid-scale    float     :offset 24)
   (shader-count uint32    :offset 32)
   (shader       adgif-shader 8 :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

(deftype eye-control (structure)
  "Information about the state of both eyes of a [[process-drawable]]."
  ((process     handle                              :offset-assert 0) ;; handle
   (random-time uint16                              :offset-assert 8 :decomp-as time-frame)
   (bucket      uint16                              :offset-assert 10 :decomp-as bucket-id)
   (blink       float                               :offset-assert 12)
   (shaders     (inline-array adgif-shader)         :offset-assert 16) ;; guessed by decompiler
   (eyes        eye                       2 :inline :offset-assert 32)
   (left        eye                         :inline :offset 32)
   (right       eye                         :inline :offset 112)
   (level-index int16                               :offset-assert 192)
   (high-res?   symbol                              :offset-assert 196)
   (eye-slot    uint8                               :offset-assert 200)
   (art-group-name uint8 64                         :offset 201) ;; field could not be read.
   )
  :method-count-assert 9
  :size-assert         #x109
  :flag-assert         #x900000109
  )

(deftype eye-control-array (basic)
  "An array of [[eye-control]]s."
  ((data eye-control 32 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2210
  :flag-assert         #x900002210
  )

(deftype eye-work (structure)
  "Eye renderer DMA data."
  ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
   (blink-table  float          10      :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(define-extern *eye-control-array* eye-control-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++camera-h:cam-index-options
(defenum cam-index-options
  :type uint32
  :bitfield #t
  (SPHERICAL)
  (RADIAL)
  )
;; ---camera-h:cam-index-options

;; +++camera-h:slave-los-state
(defenum slave-los-state
  :type uint32
  (none 0)
  (cw 1)
  (ccw 2)
  (between 3)
  )
;; ---camera-h:slave-los-state

(deftype cam-index (structure)
  ((flags cam-index-options           :offset-assert 0) ;; guessed by decompiler
   (vec   vector            2 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (cam-index-method-9 (_type_ symbol entity vector curve) symbol) ;; 9
    (cam-index-method-10 (_type_ vector) float) ;; 10
    )
  )

(deftype tracking-point (structure)
  ((position    vector :inline :offset-assert 0)
   (direction   vector :inline :offset-assert 16)
   (tp-length   float          :offset-assert 32)
   (next        int32          :offset-assert 36)
   (incarnation int32          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype tracking-spline-sampler (structure)
  ((cur-pt     int32  :offset-assert 0)
   (partial-pt float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype tracking-spline (structure)
  ((point              tracking-point 32 :inline :offset-assert 0) ;; guessed by decompiler
   (summed-len         float                  :offset-assert 1536)
   (free-point         int32                  :offset-assert 1540)
   (used-point         int32                  :offset-assert 1544)
   (partial-point      float                  :offset-assert 1548)
   (end-point          int32                  :offset-assert 1552)
   (next-to-last-point int32                  :offset-assert 1556)
   (max-move           float                  :offset-assert 1560)
   (sample-len         float                  :offset-assert 1564)
   (used-count         int32                  :offset-assert 1568)
   (old-position       vector         :inline :offset-assert 1584)
   (debug-old-position vector         :inline :offset-assert 1600)
   (debug-out-position vector         :inline :offset-assert 1616)
   (debug-last-point   int32                  :offset-assert 1632)
   )
  :method-count-assert 24
  :size-assert         #x664
  :flag-assert         #x1800000664
  (:methods
    (tracking-spline-method-9 (_type_) none) ;; 9
    (tracking-spline-method-10 (_type_ vector) none) ;; 10
    (debug-point-info (_type_ int) none) ;; 11
    (debug-all-points (_type_) none) ;; 12
    (tracking-spline-method-13 (_type_ int) none) ;; 13
    (tracking-spline-method-14 (_type_ tracking-spline-sampler) none) ;; 14
    (tracking-spline-method-15 (_type_) none) ;; 15
    (tracking-spline-method-16 (_type_ float) none) ;; 16
    (tracking-spline-method-17 (_type_ vector float float symbol) int) ;; 17
    (tracking-spline-method-18 (_type_ float vector vector tracking-spline-sampler) vector) ;; 18
    (tracking-spline-method-19 (_type_ float vector vector tracking-spline-sampler) vector) ;; 19
    (tracking-spline-method-20 (_type_ vector int) none) ;; 20
    (tracking-spline-method-21 (_type_ vector float float float float vector) vector) ;; 21
    (tracking-spline-method-22 (_type_ float) symbol) ;; 22
    (debug-draw-spline (_type_) none) ;; 23
    )
  )

(deftype cam-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x18
  :flag-assert         #xd00000018
  (:methods
    (init (_type_ float float float float) none) ;; 9
    (copy-to (_type_ _type_) none) ;; 10
    (update! (_type_ float) none) ;; 11
    (jump-to-target! (_type_ float) float) ;; 12
    )
  )

(deftype cam-vector-seeker (structure)
  ((target      vector :inline :offset-assert 0)
   (value       vector :inline :offset-assert 16)
   (vel         vector :inline :offset-assert 32)
   (accel       float          :offset-assert 48)
   (max-vel     float          :offset-assert 52)
   (max-partial float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (init (_type_ vector float float float) none) ;; 9
    (update! (_type_ vector) none) ;; 10
    )
  )

(deftype cam-rotation-tracker (structure)
  ((inv-mat                 matrix           :inline :offset-assert 0)
   (no-follow               basic                    :offset-assert 64)
   (follow-pt               vector           :inline :offset-assert 80)
   (follow-off              vector           :inline :offset-assert 96)
   (follow-blend            float                    :offset-assert 112)
   (tilt-adjust             cam-float-seeker :inline :offset-assert 116)
   (point-of-interest-blend cam-float-seeker :inline :offset-assert 140)
   (underwater-blend        cam-float-seeker :inline :offset-assert 164)
   (looking-at              vector           :inline :offset-assert 192)
   (looking-interesting     vector           :inline :offset-assert 208)
   (old-cam-trans           vector           :inline :offset-assert 224)
   (follow-height-extra     cam-float-seeker :inline :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x108
  :flag-assert         #x900000108
  )

(deftype camera-combiner (process)
  ((trans             vector               :inline :offset-assert 128)
   (inv-camera-rot    matrix               :inline :offset-assert 144)
   (fov               float                        :offset-assert 208)
   (interp-val        float                        :offset-assert 212)
   (interp-step       float                        :offset-assert 216)
   (dist-from-src     float                        :offset-assert 220)
   (dist-from-dest    float                        :offset-assert 224)
   (flip-control-axis vector               :inline :offset-assert 240)
   (velocity          vector               :inline :offset-assert 256)
   (tracking-status   uint64                       :offset-assert 272)
   (tracking-options  int32                        :offset-assert 280)
   (tracking          cam-rotation-tracker :inline :offset-assert 288)
   (fast-rot          basic                        :offset-assert 552)
   )
  :method-count-assert 14
  :size-assert         #x22c
  :flag-assert         #xe01b0022c
  (:states
    cam-combiner-active
    )
  )

;; +++camera-h:camera-blend-to-type
(defenum camera-blend-to-type
  :type uint64
  (unknown-0 0)
  (unknown-1 1)
  (unknown-2 2)
  )
;; ---camera-h:camera-blend-to-type

;; +++camera-h:camera-blend-from-type
(defenum camera-blend-from-type
  :type uint64
  (unknown-0 0)
  (unknown-1 1)
  (unknown-2 2)
  )
;; ---camera-h:camera-blend-from-type

;; +++camera-h:cam-slave-options-u32
(defenum cam-slave-options-u32
  :type uint32
  :bitfield #t
  :copy-entries cam-slave-options
  )
;; ---camera-h:cam-slave-options-u32

;; +++camera-h:cam-master-options-u32
(defenum cam-master-options-u32
  :type uint32
  :bitfield #t
  :copy-entries cam-master-options
  )
;; ---camera-h:cam-master-options-u32

(deftype camera-slave (process)
  ((trans                         vector                :inline :offset-assert 128)
   (fov                           float                         :offset-assert 144)
   (fov0                          float                         :offset-assert 148)
   (fov1                          float                         :offset-assert 152)
   (fov-index                     cam-index             :inline :offset-assert 160)
   (tracking                      cam-rotation-tracker  :inline :offset-assert 208)
   (view-off-param                float                         :offset-assert 472)
   (view-off                      vector                :inline :offset-assert 480)
   (joystick-saved-view-off       vector                :inline :offset-assert 496)
   (min-z-override                float                         :offset-assert 512)
   (view-flat                     vector                :inline :offset-assert 528)
   (string-vel-dir                uint32                        :offset-assert 544)
   (string-trans                  vector                :inline :offset-assert 560)
   (position-spline               tracking-spline       :inline :offset-assert 576)
   (pivot-pt                      vector                :inline :offset-assert 2224)
   (pivot-rad                     float                         :offset-assert 2240)
   (circular-follow               vector                :inline :offset-assert 2256)
   (max-angle-offset              float                         :offset-assert 2272)
   (max-angle-curr                float                         :offset-assert 2276)
   (options                       cam-slave-options-u32         :offset-assert 2280) ;; guessed by decompiler
   (cam-entity                    entity                        :offset-assert 2284) ;; guessed by decompiler
   (butt-timer                    time-frame                    :offset-assert 2288)
   (butt-seek                     basic                         :offset-assert 2296)
   (butt-vector                   vector                :inline :offset-assert 2304)
   (velocity                      vector                :inline :offset-assert 2320)
   (desired-pos                   vector                :inline :offset-assert 2336)
   (time-dist-too-far             uint32                        :offset-assert 2352)
   (los-state                     slave-los-state               :offset-assert 2356) ;; guessed by decompiler
   (good-point                    vector                :inline :offset-assert 2368)
   (los-tgt-spline-pt             int32                         :offset-assert 2384)
   (los-tgt-spline-pt-incarnation int32                         :offset-assert 2388)
   (los-last-pos                  vector                :inline :offset-assert 2400)
   (intro-curve                   curve                 :inline :offset-assert 2416)
   (intro-offset                  vector                :inline :offset-assert 2448)
   (intro-t                       float                         :offset-assert 2464)
   (intro-t-step                  float                         :offset-assert 2468)
   (outro-exit-value              float                         :offset-assert 2472)
   (spline-exists                 symbol                        :offset-assert 2476)
   (spline-curve                  curve                 :inline :offset-assert 2480)
   (spline-offset                 vector                :inline :offset-assert 2512)
   (index                         cam-index             :inline :offset-assert 2528)
   (saved-pt                      vector                :inline :offset-assert 2576)
   (spline-tt                     float                         :offset-assert 2592)
   (spline-follow-dist            float                         :offset-assert 2596)
   (enter-has-run                 symbol                        :offset-assert 2600) ;; guessed by decompiler
   (blend-from-type               camera-blend-from-type        :offset-assert 2608)
   (blend-to-type                 camera-blend-to-type          :offset-assert 2616) ;; camera-blend-to-type
   (have-phony-joystick           basic                         :offset-assert 2624)
   (phony-joystick-x              float                         :offset-assert 2628)
   (phony-joystick-y              float                         :offset-assert 2632)
   (string-min-val                vector                :inline :offset-assert 2640)
   (string-max-val                vector                :inline :offset-assert 2656)
   (string-val-locked             basic                         :offset-assert 2672)
   (relative-position             vector                :inline :offset-assert 2688)
   (string-relative               basic                         :offset-assert 2704)
   (slope-adjust                  cam-float-seeker      :inline :offset-assert 2708)
   (slope-quat                    quaternion            :inline :offset-assert 2736)
   )
  :method-count-assert 14
  :size-assert         #xac0
  :flag-assert         #xe0a400ac0
  (:states
    cam-no-trans
    cam-really-fixed
    cam-fixed
    cam-fixed-read-entity
    cam-pov
    cam-pov180
    cam-pov-track
    cam-eye
    cam-standoff
    cam-standoff-read-entity
    cam-tube-sled
    cam-spline
    cam-decel
    cam-endlessfall
    cam-circular
    cam-lookat
    cam-string
    cam-stick
    cam-bike
    cam-point-watch
    cam-free-floating
    cam-launcher-shortfall
    cam-launcher-longfall
    cam-remote
    cam-turret
    cam-scorpion-gun
    cam-bt-gun
    cam-power-game
    )
  )

(deftype camera-master (process)
  ((master-options      cam-master-options-u32           :offset-assert 128) ;; guessed by decompiler
   (settings            cam-setting-data                 :offset-assert 132)
   (slave               (pointer camera-slave)           :offset-assert 136) ;; guessed by decompiler
   (decel               (pointer camera-slave)           :offset-assert 140) ;; guessed by decompiler
   (slave-options       cam-slave-options-u32            :offset-assert 144)
   (view-off-param-save float                            :offset-assert 148)
   (changer             uint32                           :offset-assert 152)
   (string-min          cam-vector-seeker        :inline :offset-assert 160)
   (string-max          cam-vector-seeker        :inline :offset-assert 224)
   (string-push-z       float                            :offset-assert 284)
   (local-down          vector                   :inline :offset-assert 288)
   (focus               focus                    :inline :offset-assert 304)
   (being-attacked      symbol                           :offset-assert 316) ;; guessed by decompiler
   (attack-start        time-frame                       :offset-assert 320) ;; time-frame
   (on-ground           symbol                           :offset-assert 328) ;; guessed by decompiler
   (under-water         int32                            :offset-assert 332)
   (on-pole             symbol                           :offset-assert 336) ;; guessed by decompiler
   (tgt-rot-mat         matrix                   :inline :offset-assert 352)
   (tgt-face-mat        matrix                   :inline :offset-assert 416)
   (tpos-old            vector                   :inline :offset-assert 480)
   (tpos-curr           vector                   :inline :offset-assert 496)
   (tpos-old-adj        vector                   :inline :offset-assert 512)
   (tpos-curr-adj       vector                   :inline :offset-assert 528)
   (tpos-tgt            vector                   :inline :offset-assert 544)
   (upspeed             float                            :offset-assert 560)
   (pitch-off           vector                   :inline :offset-assert 576)
   (target-spline       tracking-spline          :inline :offset-assert 592)
   (ease-from           vector                   :inline :offset-assert 2240)
   (ease-t              float                            :offset-assert 2256)
   (ease-step           float                            :offset-assert 2260)
   (ease-to             vector                   :inline :offset-assert 2272)
   (outro-curve         curve                    :inline :offset-assert 2288)
   (outro-t             float                            :offset-assert 2308)
   (outro-t-step        float                            :offset-assert 2312)
   (outro-exit-value    float                            :offset-assert 2316)
   (water-drip-time     time-frame                       :offset-assert 2320) ;; time-frame
   (water-drip          sparticle-launch-control         :offset-assert 2328) ;; guessed by decompiler
   (water-drip-mult     float                            :offset-assert 2332)
   (water-drip-speed    float                            :offset-assert 2336)
   (interest-dist       float                            :offset-assert 2340)
   )
  :method-count-assert 17
  :size-assert         #x928
  :flag-assert         #x1108b00928
  (:methods
    (camera-master-method-14 (_type_ vector) vector) ;; 14
    (camera-master-method-15 (_type_ vector) vector) ;; 15
    (camera-master-method-16 (_type_ symbol) int) ;; 16
    )
  (:states
    cam-master-active
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-interface-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *camera-init-mat* matrix)
(define-extern *camera* camera-master)
(define-extern *camera-combiner* camera-combiner)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-launcher-h           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type sprite-vec-data-3d structure)
(declare-type sparticle-cpuinfo structure)
(declare-type sparticle-system structure)

;; +++sparticle-launcher-h:sp-field-id
(defenum sp-field-id
  :type uint16
  ;; todo copied from jak 2
  (misc-fields-start 0)
  (spt-texture 1)
  (spt-anim 2)
  (spt-anim-speed 3)
  (spt-birth-func 4)
  (spt-joint/refpoint 5)
  (spt-num 6)
  (spt-sound 7)
  (misc-fields-end 8)

  (sprite-fields-start 9)
  (spt-x 10)
  (spt-y 11)
  (spt-z 12)
  (spt-scale-x 13)
  (spt-rot-x 14)
  (spt-rot-y 15)
  (spt-rot-z 16)
  (spt-scale-y 17)
  (spt-r 18)
  (spt-g 19)
  (spt-b 20)
  (spt-a 21)
  (sprite-fields-end 22)

  (cpu-fields-start 23)
  (spt-omega 24)
  (spt-vel-x 25)
  (spt-vel-y 26)
  (spt-vel-z 27)
  (spt-scalevel-x 28)
  (spt-rotvel-x 29)
  (spt-rotvel-y 30)
  (spt-rotvel-z 31)
  (spt-scalevel-y 32)
  (spt-fade-r 33)
  (spt-fade-g 34)
  (spt-fade-b 35)
  (spt-fade-a 36)
  (spt-accel-x 37)
  (spt-accel-y 38)
  (spt-accel-z 39)
  (spt-dummy 40)
  (spt-quat-x 41)
  (spt-quat-y 42)
  (spt-quat-z 43)
  (spt-quad-w 44)
  (spt-friction 45)
  (spt-timer 46)
  (spt-flags 47)
  (spt-userdata 48)
  (spt-func 49)
  (spt-next-time 50)
  (spt-next-launcher 51)
  (cpu-fields-end 52)

  (launch-fields-start 53)
  (spt-launchrot-x 54)
  (spt-launchrot-y 55)
  (spt-launchrot-z 56)
  (spt-launchrot-w 57)
  (spt-conerot-x 58)
  (spt-conerot-y 59)
  (spt-conerot-z 60)
  (spt-conerot-w 61)
  (spt-rotate-x 62)
  (spt-rotate-y 63)
  (spt-rotate-z 64)

  (spt-conerot-radius 65)
  (spt-mat-scale-x 66)
  (spt-mat-scale-y 67)
  (spt-mat-scale-z 68)
  (launch-fields-end 69)

  (spt-scale 70)
  (spt-scalevel 71)
  (spt-end 72)
  )
;; ---sparticle-launcher-h:sp-field-id

;; +++sparticle-launcher-h:sp-flag
(defenum sp-flag
  :type uint16
  ;; todo copied from jak 2
  (int 0) ;; int
  (float 1) ;; float
  (float-int-rand 2) ;; float with int rand
  (copy-from-other 3) ;; copy
  (object 4) ;; label
  (symbol 5) ;; symbol
  (launcher 6) ;; launcher from id
  (float-store 7) ;; float and store result in *sp-temp*
  )
;; ---sparticle-launcher-h:sp-flag

;; +++sparticle-launcher-h:sp-group-item-flag
(defenum sp-group-item-flag
  :bitfield #t
  :type uint16
  (is-3d)
  (sp1)
  (sp2)
  (sp3)
  (sp4)
  (sp5)
  (sp6)
  (sp7)
  (sp8)
  (sp9)
  (sp10)
  (sp11)
  (sp12)
  (sp13)
  (sp14)
  (sp15)
  )
;; ---sparticle-launcher-h:sp-group-item-flag

;; +++sparticle-launcher-h:sp-launch-state-flags
(defenum sp-launch-state-flags
  :bitfield #t
  :type uint16
  (sp0)
  (sp1)
  (sp2)
  )
;; ---sparticle-launcher-h:sp-launch-state-flags

;; +++sparticle-launcher-h:sp-group-flag
(defenum sp-group-flag
  :bitfield #t
  :type uint16
  (sp0)
  (sp1)
  (sp2)
  (sp3)
  (sp4)
  (sp5)
  (sp6)
  (sp7)
  (sp8)
  (sp9)
  (sp10)
  (sp11)
  (sp12)
  (sp13)
  (sp14)
  (sp15)
  )
;; ---sparticle-launcher-h:sp-group-flag

(deftype sparticle-birthinfo (structure)
  "Used internally by the sparticle code."
  ((sprite       uint32   :offset-assert 0)
   (anim         int32    :offset-assert 4)
   (anim-speed   float    :offset-assert 8)
   (birth-func   basic    :offset-assert 12)
   (joint-ppoint int32    :offset-assert 16)
   (num-to-birth float    :offset-assert 20)
   (sound        basic    :offset-assert 24)
   (dataf        float  1 :offset 0) ;; guessed by decompiler
   (data         uint32 1 :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype sp-field-init-spec (structure)
  "Part of a particle definition - how to initialize a field of a particle."
  ((field          sp-field-id      :offset-assert 0) ;;
   (flags          sp-flag      :offset-assert 2) ;;
   (initial-valuef float       :offset-assert 4)
   (random-rangef  float       :offset-assert 8)
   (random-multf   float       :offset-assert 12)
   (initial-value  int32       :offset 4)
   (random-range   int32       :offset 8)
   (random-mult    int32       :offset 12)
   (func           symbol      :offset 4) ;; guessed by decompiler
   (tex            texture-id  :offset 4) ;; guessed by decompiler
   (pntr           pointer     :offset 4) ;; guessed by decompiler
   (object         basic       :offset 4)
   (sym            symbol      :offset 4) ;; guessed by decompiler
   (sound          sound-spec  :offset 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  ;; field object uses ~A with a signed load.
  )

(deftype sparticle-launcher (basic)
  "A definition of a single particle, as a list of init specs."
  ((birthaccum float                              :offset-assert 4)
   (soundaccum float                              :offset-assert 8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (get-field-spec-by-id "Look up a field's init spec by ID number." (_type_ sp-field-id) sp-field-init-spec) ;; 9
    (setup-special-textures "Set the particle's texture to the texture with the given name, and convert userdata strings to textures." (_type_ string) none) ;; 10
    )
  )

(deftype sparticle-group-item (structure)
  "A reference to a single sparticle-launcher (by ID) and some parameters for using it."
  ((launcher   uint32  :offset-assert 0)
   (fade-after meters  :offset-assert 4)
   (falloff-to meters  :offset-assert 8)
   (flags      sp-group-item-flag  :offset-assert 12) ;; sp-group-item-flag
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     int16   :offset-assert 18)
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype sparticle-launch-state (structure)
  "The state associated with a launcher of a given sparticle."
  ((group-item sparticle-group-item      :offset-assert 0)
   (flags      sp-launch-state-flags     :offset-assert 4) ;;
   (randomize  uint16                    :offset-assert 6)
   (center     vector                    :offset-assert 8)
   (sprite3d   sprite-vec-data-3d        :offset-assert 12)
   (sprite     sparticle-cpuinfo         :offset-assert 16) ;; guessed by decompiler
   (offset     uint32                    :offset-assert 20)
   (accum      float                     :offset-assert 24)
   (spawn-time uint32                    :offset-assert 28)
   (control    sparticle-launch-control  :offset-assert 32) ;; guessed by decompiler
   (swarm      basic                     :offset 20)
   (seed       uint32                    :offset 24)
   (time       uint32                    :offset 28)
   (spec       basic                     :offset 16)
   (id         uint32                    :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype sparticle-launch-group (basic)
  "Definition of multiple a particle-group, which is a collection of particle effects."
  ((length          int16                                       :offset-assert 4)
   (duration        uint16                                      :offset-assert 6)
   (linger-duration uint16                                      :offset-assert 8)
   (flags           sp-group-flag                                      :offset-assert 10) ;;
   (name            string                                      :offset-assert 12) ;; guessed by decompiler
   (launcher        (inline-array sparticle-group-item)         :offset-assert 16) ;; guessed by decompiler
   (rotate-x        degrees                                         :offset-assert 20) ;; degrees
   (rotate-y        degrees                                         :offset-assert 24) ;; degrees
   (rotate-z        degrees                                         :offset-assert 28) ;; degrees
   (scale-x         float                                       :offset-assert 32)
   (scale-y         float                                       :offset-assert 36)
   (scale-z         float                                       :offset-assert 40)
   (bounds          sphere                              :inline :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control) ;; 9
    )
  )

(deftype sparticle-launch-control (inline-array-class)
  "Top-level type containing all the state needed to launch a particle group.
   These are typically owned by a process, and allocated on the process heap.
   These refer to static particle definitions, and then spawn particles that are tracked by the
   particle system itself. This type just holds the launching-related state."
  ((group               sparticle-launch-group             :offset-assert 16) ;; guessed by decompiler
   (proc                process-drawable                   :offset-assert 20) ;; guessed by decompiler
   (local-clock         int32                              :offset-assert 24)
   (fade                float                              :offset-assert 28)
   (matrix              int8                               :offset-assert 32)
   (state-mode          uint8                     3        :offset-assert 33) ;; guessed by decompiler
   (state-counter       uint32                             :offset-assert 36)
   (local-space-binding particle-local-space-info          :offset 28)
   (last-spawn-frame    int32                              :offset-assert 40)
   (last-spawn-time     int32                              :offset-assert 44)
   (origin              matrix                    :inline  :offset-assert 48)
   (center              vector                    :inline  :offset 96)
   (data                sparticle-launch-state    :dynamic :inline :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 21
  :size-assert         #x70
  :flag-assert         #x1500000070
  (:methods
    (sparticle-launch-control-method-14 () none) ;; 14 ;; (kill-and-free-particles (_type_) none)
    (sparticle-launch-control-method-15 () none) ;; 15 ;; (kill-particles (_type_) none)
    (spawn (_type_ vector) object) ;; 16
    (sparticle-launch-control-method-17 (_type_ matrix) none) ;; 17
    (sparticle-launch-control-method-18 (_type_ cspace) none) ;; 18
    (kill-particles (_type_) none) ;; 19
    (sparticle-launch-control-method-20 (_type_ float) none) ;; 20
    )
  )

(deftype sparticle-subsampler (basic)
  ((spt-num     float          :offset-assert 4)
   (sp-system   sparticle-system          :offset-assert 8)
   (sp-launcher sparticle-launcher          :offset-assert 12)
   (spawn-mat   matrix :inline :offset-assert 16)
   (inited?     symbol         :offset-assert 80)
   )
  :method-count-assert 11
  :size-assert         #x54
  :flag-assert         #xb00000054
  (:methods
    (new (symbol type sparticle-system sparticle-launcher float) _type_)
    (sparticle-subsampler-method-9 () none) ;; 9
    (sparticle-subsampler-method-10 (_type_ matrix) none) ;; 10
    )
  )

(define-extern *launch-matrix* matrix)
(define-extern compute-rot-in-screenspace "Unclear what this does, but I'm not actually sure it makes sense. Unused" (function vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type sprite-vec-data-2d structure)

;; +++sparticle-h:sp-cpuinfo-flag
(defenum sp-cpuinfo-flag
  :bitfield #t
  :type uint32
  ;; todo copied from jak 2
  (sp-cpuinfo-flag-0 0)
  (sp-cpuinfo-flag-1 1)
  (sp-cpuinfo-flag-2 2)     ;; cleared after an aux has its func set to add-to-sprite-aux-lst
  (sp-cpuinfo-flag-3 3)
  (sp-cpuinfo-flag-4 4)
  (sp-cpuinfo-flag-5 5)
  (ready-to-launch 6) ;; maybe just just death?
  (distort 7) ;; distort sprite
  (aux-list 8)     ;; prevents relaunch, adds to aux
  (sp-cpuinfo-flag-9 9)
  (level0 10)
  (level1 11)
  (sp-cpuinfo-flag-12 12)   ;; required to relaunch
  (sp-cpuinfo-flag-13 13)
  (sp-cpuinfo-flag-14 14)
  (glow 15) ;; glow sprite
  (use-global-acc 16)
  (launch-along-z 17)
  (left-multiply-quat 18)
  (right-multiply-quat 19)
  (set-conerot 20)
  (sp-cpuinfo-flag-21 21)
  )
;; ---sparticle-h:sp-cpuinfo-flag

(deftype sparticle-cpuinfo (structure)
  "The per-particle information. This stays on the CPU, and isn't uploaded to the VU."
  ((sprite        sprite-vec-data-2d                                                                 :offset-assert 0)
   (adgif         adgif-shader                                                                       :offset-assert 4)
   (radius        float                                                                              :offset-assert 8)
   (omega         float                                                                              :offset-assert 12)
   (vel-sxvel     vector                                                                     :inline :offset-assert 16)
   (rot-syvel     vector                                                                     :inline :offset-assert 32)
   (fade          rgbaf                                                                      :inline :offset-assert 48)
   (acc           vector                                                                     :inline :offset-assert 64)
   (rotvel3d      quaternion                                                                 :inline :offset-assert 80)
   (vel           vector3s                                                                   :inline :offset 16) ;; vector :inline
   (accel         vector3s                                                                   :inline :offset 64) ;; vector :inline
   (scalevelx     float                                                                              :offset 28)
   (scalevely     float                                                                              :offset 44)
   (friction      float                                                                              :offset-assert 96)
   (timer         int32                                                                              :offset-assert 100)
   (flags         sp-cpuinfo-flag                                                                    :offset-assert 104) ;; guessed by decompiler
   (user-int32    int32                                                                              :offset-assert 108)
   (user-uint32   uint32                                                                             :offset 108)
   (user-float    float                                                                              :offset 108 :score 1)
   (user-pntr     uint32                                                                             :offset 108)
   (user-object   basic                                                                              :offset 108)
   (user-sprite   sprite-vec-data-2d                                                                 :offset 108)
   (sp-func       (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none)         :offset-assert 112) ;; guessed by decompiler
   (next-time     uint32                                                                             :offset-assert 116)
   (next-launcher basic                                                                              :offset-assert 120)
   (cache-alpha   float                                                                              :offset-assert 124)
   (valid         uint8                                                                              :offset-assert 128)
   (clock-index   uint8                                                                              :offset-assert 129)
   (user1-int16   uint16                                                                             :offset-assert 130)
   (key           sparticle-launch-control                                                           :offset-assert 132) ;; guessed by decompiler
   (binding       sparticle-launch-state                                                             :offset-assert 136)
   (data          uint32                                                                     1       :offset 12) ;; guessed by decompiler
   (datab         int8                                                                       4       :offset 12) ;; guessed by decompiler
   (dataf         float                                                                      1       :offset 12) ;; guessed by decompiler
   (datac         uint8                                                                      1       :offset 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  ;; field user-object uses ~A with a signed load. field key uses ~A with a signed load.
  )

(deftype sparticle-launchinfo (structure)
  "Settings for launching a particle. These are a temporary thing consumed by the assembly particle code, and modified by particle callbacks."
  ((launchrot  vector :inline :offset-assert 0)
   (conerot    vector :inline :offset-assert 16)
   (rotate-x   float          :offset-assert 32)
   (rotate-y   float          :offset-assert 36)
   (rotate-z   float          :offset-assert 40)
   (coneradius float          :offset-assert 44)
   (rotate     vector :inline :offset 32)
   (scale-x    float          :offset-assert 48)
   (scale-y    float          :offset-assert 52)
   (scale-z    float          :offset-assert 56)
   (dummy      float          :offset-assert 60)
   (scale      vector :inline :offset 48)
   (data       uint8  1       :offset 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sparticle-system (basic)
  "An entire particle 'system', which is a pipeline for spawning, updating, and generating sprite-renderer DMA data.
   There are separate systems for different modes of sprite rendering: 2D/billboard, full 3D, and screen-space (HUD)"
  ((blocks          int32                            2 :offset-assert 4) ;; guessed by decompiler
   (length          int32                            2 :offset-assert 12) ;; guessed by decompiler
   (num-alloc       int32                            2 :offset-assert 20) ;; guessed by decompiler
   (is-3d           basic                              :offset-assert 28)
   (flags           uint32                             :offset-assert 32)
   (alloc-table     (pointer uint64)                   :offset-assert 36) ;; guessed by decompiler
   (cpuinfo-table   (inline-array sparticle-cpuinfo)   :offset-assert 40) ;; guessed by decompiler
   (vecdata-table   pointer                            :offset-assert 44) ;; guessed by decompiler
   (adgifdata-table (inline-array adgif-shader)        :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(define-extern *sp-60-hz* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-link-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype actor-link-info (basic)
  "A linked list of actors.

   Actors allocate this on their process heap if they have a
   `next-actor` or `prev-actor` defined in their lump
   and use it for entity lookups."
  ((process process       :offset-assert 4) ;; guessed by decompiler
   (next    entity-actor  :offset-assert 8) ;; guessed by decompiler
   (prev    entity-actor  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 26
  :size-assert         #x10
  :flag-assert         #x1a00000010
  (:methods
    (new
      "Set up an actor-link-info for the given process.
       The entity of this process should be the entity-actor
       that will get this actor-link-info."
      (symbol type process symbol) _type_) ;; 0
    (get-matching-actor-type-mask
      "Iterate through _all_ actors that are part of this actor list.
       If the nth actor is type matching-type, then set the nth bit of the result."
      (_type_ type) int) ;; 9
    (actor-count-before "Get the number of actors before this actor in the list." (_type_) int) ;; 10
    (link-to-next-and-prev-actor
      "Redo the linking in the constructor by looking up the next/prev actor."
      (_type_) actor-link-info) ;; 11
    (get-next (_type_) entity-actor) ;; 12
    (get-prev (_type_) entity-actor) ;; 13
    (get-next-process "Get the process for the next, if it exists." (_type_) process) ;; 14
    (get-prev-process "Get the process for the prev, if it exists." (_type_) process) ;; 15
    (apply-function-forward
      "Iterate forward through actors, and apply this function. Starts at (-> this next)
       If the function returns truthy, stop iterating."
      (_type_ (function entity-actor object object) object) int) ;; 16
    (apply-function-reverse
      "Iterate backward through actors and apply function.
       If the function returns truth, stop iterating."
      (_type_ (function entity-actor object object) object) int) ;; 17
    (apply-all
      "Apply to all entities.  Starts at the back and hits everyone, including this object."
      (_type_ (function entity-actor object object) object) int) ;; 18
    (send-to-all (_type_ symbol) none) ;; 19
    (send-to-all-after "Send an event to all processes after this link with no parameters." (_type_ symbol) object) ;; 20
    (send-to-all-before "Send an event to all processes before this link with no parameters." (_type_ symbol) object) ;; 21
    (send-to-next-and-prev "Send an event to both next and prev with no params." (_type_ symbol) none) ;; 22
    (send-to-next "Send event arg0 to the next actor's process." (_type_ symbol) none) ;; 23
    (send-to-prev "Send event arg1 to the next actor's process." (_type_ symbol) none) ;; 24
    (actor-count "Count the number of actors in the entire list." (_type_) int) ;; 25
    )
  )

(define-extern entity-actor-lookup
  "Given an entity (the res-lump), look up a reference to another entity and return that entity."
  (function res-lump symbol int entity-actor))
(define-extern entity-actor-count
  "Get the number of entities that this res references under the name.
   This works on more than just next/prev."
  (function res-lump symbol int))
(define-extern actor-link-subtask-complete-hook
  "Sets arg1 if the thing is complete. Does not continue the apply if the complete perm is set."
  (function entity-actor (pointer symbol) symbol))
(define-extern actor-link-subtask-incomplete-count-hook (function entity-actor (pointer uint64) symbol))
(define-extern actor-link-dead-hook
  "Sets arg1 if the thing is dead. Does not continue the apply if the dead perm is set."
  (function entity-actor (pointer symbol) symbol))
(define-extern alt-actor-list-subtask-incomplete-count
  "Get the number of alt-actors which do not have the complete bit set in their perm."
  (function process-drawable int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-debug-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *redline-table* (pointer float))
(define-extern *redline-index* int)
(define-extern float-save-redline (function float none))
(define-extern float-lookup-redline (function float float))
(define-extern *blueline-table* (pointer float))
(define-extern *blueline-index* int)
(define-extern float-save-blueline (function float none))
(define-extern float-lookup-blueline (function float float))
(define-extern *greenline-table* (pointer float))
(define-extern *greenline-index* int)
(define-extern float-save-greenline (function float none))
(define-extern float-lookup-greenline (function float float))
(define-extern *yellowline-table* (pointer float))
(define-extern *yellowline-index* int)
(define-extern float-save-yellowline (function float none))
(define-extern float-lookup-yellowline (function float float))
(define-extern *timeplot-table* (pointer float))
(define-extern *timeplot-index* int)
(define-extern float-save-timeplot (function float none))
(define-extern float-lookup-timeplot (function float float))
(define-extern *cam-layout* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-update-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++cam-update-h:external-cam-option
(defenum external-cam-option
  :bitfield #t
  (allow-z 0)
  )
;; ---cam-update-h:external-cam-option

(define-extern *external-cam-options* external-cam-option)
(define-extern *external-cam-mode* symbol)
(define-extern *camera-look-through-other* int)
(define-extern *camera-other-fov* bfloat)
(define-extern *camera-other-trans* vector)
(define-extern *camera-other-matrix* matrix)
(define-extern *camera-smush-control* smush-control)
(define-extern *camera-smush-control-horizontal* smush-control)
(define-extern *camera-smush-control-into* smush-control)
(define-extern *camera-other-root* vector)
(define-extern *fix-visible-level-mask* int)
(define-extern *manual-sample-point* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype hud-string (structure)
  ((text  string             :offset-assert 0) ;; guessed by decompiler
   (scale float              :offset-assert 4)
   (color font-color         :offset-assert 8) ;; guessed by decompiler
   (flags font-flags         :offset-assert 12) ;; guessed by decompiler
   (pos   vector4w   :inline :offset-assert 16) ;; int32 4
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype hud-sprite (structure)
  ((pos      vector4w :inline :offset-assert 0)
   (offset-x float            :offset 0)
   (offset-y float            :offset 4)
   (color    vector4w :inline :offset-assert 16)
   (flags    uint32           :offset-assert 32)
   (scale-x  float            :offset-assert 36)
   (scale-y  float            :offset-assert 40)
   (angle    float            :offset-assert 44)
   (tex      texture          :offset-assert 48) ;; guessed by decompiler
   (tid      uint32           :offset 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  (:methods
    (draw (_type_ dma-buffer level) none) ;; 9
    (hud-sprite-method-10 () none) ;; 10 ;; (hud-sprite-method-10 (_type_ dma-buffer level int int int int) object)
    (hud-sprite-method-11 () none) ;; 11
    )
  )

(deftype hud-box (structure)
  ((box   bounding-box2 :inline :offset-assert 0)
   (min   vector2       :inline :offset 0)
   (max   vector2       :inline :offset 8)
   (color vector4w      :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (hud-box-method-9 () none) ;; 9 ;; (draw-box-prim-only (_type_ dma-buffer) none)
    (hud-box-method-10 () none) ;; 10 ;; (draw-box-alpha-1 (_type_ dma-buffer) none)
    (hud-box-method-11 () none) ;; 11 ;; (draw-box-alpha-2 (_type_ dma-buffer) none)
    (hud-box-method-12 () none) ;; 12 ;; (draw-box-alpha-3 (_type_ dma-buffer) none)
    (hud-box-method-13 () none) ;; 13 ;; (draw-scan-and-line (_type_ dma-buffer float) int)
    )
  )

(deftype hud-icon (structure)
  ((icon    (pointer manipy)         :offset-assert 0) ;; guessed by decompiler
   (pos     vector4w         :inline :offset-assert 16) ;; int32 4
   (scale-x float                    :offset-assert 32)
   (scale-y float                    :offset-assert 36)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype hud-value (structure)
  ((current  int32   :offset-assert 0)
   (target   int32   :offset-assert 4)
   (flags    uint16  :offset-assert 8)
   (inc-unit uint16  :offset-assert 10)
   (inc-time uint16  :offset-assert 12)
   (counter  uint16  :offset-assert 14)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; +++hud-h:hud-flags
(defenum hud-flags
  :type uint32
  :bitfield #t
  (disable 0)
  (should-die 1)
  (show 2)
  )
;; ---hud-h:hud-flags

(deftype hud (process)
  ((trigger-time   time-frame    :offset-assert 128) ;; time-frame
   (last-hide-time time-frame    :offset-assert 136) ;; time-frame
   (offset         float         :offset-assert 144)
   (flags          hud-flags     :offset-assert 148) ;; guessed by decompiler
   (values         hud-value  8  :inline :offset-assert 152) ;; guessed by decompiler
   (strings        hud-string 14 :inline :offset-assert 288) ;; guessed by decompiler
   (sprites        hud-sprite 30 :inline :offset-assert 736) ;; guessed by decompiler
   (icons          hud-icon   2  :inline :offset-assert 2656) ;; guessed by decompiler
   (gui-id         sound-id      :offset-assert 2752) ;; guessed by decompiler
   )
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  (:methods
    (hud-method-14 () none) ;; 14 ;; (hidden? (_type_) symbol)
    (hud-method-15 () none) ;; 15 ;; (draw (_type_) none)
    (hud-method-16 () none) ;; 16 ;; (update-values (_type_) none)
    (hud-method-17 () none) ;; 17 ;; (init-callback (_type_) none)
    (hud-method-18 () none) ;; 18 ;; (event-callback (_type_ process int symbol event-message-block) symbol)
    (hud-method-19 () none) ;; 19 ;; (hud-method-19 (_type_) none)
    (hud-method-20 () none) ;; 20 ;; (hud-method-20 (_type_) none)
    (hud-method-21 () none) ;; 21 ;; (hud-method-21 (_type_) none)
    (hud-method-22 () none) ;; 22 ;; (hud-method-22 (_type_) none)
    (hud-method-23 () none) ;; 23 ;; (hud-method-23 (_type_) none)
    (hud-method-24 () none) ;; 24 ;; (check-ready-and-maybe-show (_type_ symbol) symbol)
    (hud-method-25 () none) ;; 25 ;; (update-value-callback (_type_ int int) none)
    (hud-method-26 () none) ;; 26 ;; (alloc-string-if-needed (_type_ int) none)
    )
  (:states
    hud-leaving ;; associated process guessed by decompiler, old: (state float hud)
    hud-in ;; associated process guessed by decompiler, old: (state hud)
    hud-arriving ;; associated process guessed by decompiler, old: (state hud)
    hud-hidden ;; associated process guessed by decompiler, old: (state hud)
    )
  )

(deftype hud-ashelin (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-cargo (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-citizen (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-cpanel (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-dig-clasp (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-gun (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-helldog (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-lurker (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-map (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-moneybag (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-plasmite (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-dig-button (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-predator (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-heatmeter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-nest-cocoons (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-neo-spawners (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-desert-lizards (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-fac-manager (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-progress (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-rocketsensor (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-ruffians (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-score (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-sig (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-skill (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-skullgem (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-timer (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-turret (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-for-turret-health (hud)
  ((unknown-float0 float  :offset 2800)
   )
  :method-count-assert 27
  :size-assert         #xaf4
  :flag-assert         #x1b0a800af4
  )

(deftype hud-squid (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-gunturret (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-gruntegg (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-crimsonhover (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-metalkor (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-big-score (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-goal (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-miss (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-samos-old (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-lurker-button (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-widow (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-race-final-stats (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-mech-air-tank (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-homing-beacon (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-dark-eco-pickup (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-green-eco-pickup (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-mh-centipede (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-arena-tokens (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-kanga-lizard (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-marauder (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-prebot (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

(deftype hud-glider-altitude (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype progress-list (basic)
  ()
  :method-count-assert 10
  :size-assert         #x4
  :flag-assert         #xa00000004
  (:methods
    (progress-list-method-9 () none) ;; 9
    )
  )

(deftype progress-list-level (progress-list)
  ((act  int32  :offset-assert 4)
   (mode symbol :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  )

(deftype progress-box (structure)
  ((aspect4x3  hud-box :inline :offset-assert 0)
   (aspect16x9 hud-box :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(declare-type menu-option-list basic)
(deftype progress (process-drawable)
  ((scissor-stack           vector           8 :inline :offset-assert 208)
   (scissor-count           int32                    :offset-assert 336)
   (current-options         menu-option-list         :offset-assert 340) ;; guessed by decompiler
   (menu-transition         float                    :offset-assert 344)
   (option-index            int32                    :offset-assert 348)
   (current-index           int32                    :offset-assert 352)
   (want-option-index       int32                    :offset-assert 356)
   (next-option-index       int32                    :offset-assert 360)
   (graphic-index           int32                    :offset-assert 364)
   (selected-option         symbol                   :offset-assert 368) ;; guessed by decompiler
   (current                 symbol                   :offset-assert 372) ;; guessed by decompiler
   (next                    symbol                   :offset-assert 376) ;; guessed by decompiler
   (ring-angle              float                    :offset-assert 380)
   (ring-want-angle         float                    :offset-assert 384)
   (init-quat               quaternion       :inline :offset-assert 400)
   (pos-transition          float                    :offset-assert 416)
   (anim-frame              float                    :offset-assert 420)
   (swing                   float                    :offset-assert 424)
   (main-menu               symbol                   :offset-assert 428) ;; guessed by decompiler
   (state-array             symbol           8       :offset-assert 432)
   (option-index-stack      int32            8       :offset-assert 464) ;; guessed by decompiler
   (state-pos               int32                    :offset-assert 496)
   (secret-buying           basic                    :offset-assert 500)
   (secret-buy-choice       basic                    :offset-assert 504)
   (scanlines-alpha         float                    :offset-assert 508)
   (start-time              time-frame               :offset-assert 512)
   (which-slot              int32                    :offset-assert 520)
   (starting-state          basic                    :offset-assert 524)
   (yes-no-choice           basic                    :offset-assert 528)
   (time-out                time-frame               :offset-assert 536)
   (last-sound              time-frame               :offset-assert 544)
   (last-move               time-frame               :offset-assert 552)
   (center-x-backup         int32                    :offset-assert 560)
   (center-y-backup         int32                    :offset-assert 564)
   (flip-horizontal         basic                    :offset-assert 568)
   (flip-vertical           basic                    :offset-assert 572)
   (progressive-scan        basic                    :offset-assert 576)
   (aspect-ratio            basic                    :offset-assert 580)
   (video-mode              basic                    :offset-assert 584)
   (stereo-mode-backup      int32                    :offset-assert 588)
   (vibrations              basic                    :offset-assert 592)
   (subtitles               basic                    :offset-assert 596)
   (languages               int32            3       :offset-assert 600)
   (subtitle-language-index int32                    :offset 600)
   (language-index          int32                    :offset 604)
   (audio-language-index    int32                    :offset 608)
   (current-task-index      int32                    :offset-assert 612)
   (current-line-index      int32                    :offset-assert 616)
   (first-closed-line-index int32                    :offset-assert 620)
   (extra-text-state        int32                    :offset-assert 624)
   (current-task            game-task                :offset-assert 628)
   (num-open-tasks-found    int32                    :offset-assert 632)
   (num-closed-tasks-found  int32                    :offset-assert 636)
   (num-unlocked-secrets    int32                    :offset-assert 640)
   (total-num-tasks         int32                    :offset-assert 644)
   (missions-total-spacing  float                    :offset-assert 648)
   (clear-screen            symbol                   :offset-assert 652)
   (progress-id             uint32                   :offset-assert 656)
   (lock-tick-count         int32                    :offset-assert 660)
   )
  :method-count-assert 54
  :size-assert         #x298
  :flag-assert         #x3602200298
  (:methods
    (progress-method-20 () none) ;; 20 ;; (come-in () _type_ :state)
    (progress-method-21 () none) ;; 21 ;; (idle () _type_ :state)
    (progress-method-22 () none) ;; 22 ;; (go-away () _type_ :state)
    (progress-method-23 () none) ;; 23 ;; (gone () _type_ :state)
    (progress-method-24 () none) ;; 24 ;; (init-defaults (_type_) object)
    (progress-method-25 () none) ;; 25 ;; (respond-to-cpad (_type_) none)
    (progress-method-26 () none) ;; 26 ;; (gone? (_type_) object)
    (progress-method-27 () none) ;; 27 ;; (can-go-back? (_type_) symbol)
    (progress-method-28 () none) ;; 28 ;; (get-state-check-card (_type_ symbol) symbol)
    (progress-method-29 () none) ;; 29 ;; (push-state (_type_) int)
    (progress-method-30 () none) ;; 30 ;; (pop-state (_type_) int)
    (progress-method-31 () none) ;; 31 ;; (set-next-state (_type_ symbol int) int)
    (progress-method-32 () none) ;; 32 ;; (set-menu-options (_type_ symbol) int)
    (progress-method-33 () none) ;; 33
    (progress-method-34 () none) ;; 34
    (progress-method-35 () none) ;; 35
    (progress-method-36 () none) ;; 36
    (progress-method-37 () none) ;; 37
    (progress-method-38 () none) ;; 38
    (progress-method-39 () none) ;; 39
    (progress-method-40 () none) ;; 40
    (progress-method-41 () none) ;; 41
    (progress-method-42 () none) ;; 42
    (progress-method-43 () none) ;; 43
    (progress-method-44 () none) ;; 44
    (progress-method-45 () none) ;; 45
    (progress-method-46 () none) ;; 46
    (progress-method-47 () none) ;; 47
    (progress-method-48 () none) ;; 48
    (progress-method-49 () none) ;; 49
    (progress-method-50 () none) ;; 50
    (progress-method-51 () none) ;; 51
    (progress-method-52 () none) ;; 52
    (progress-method-53 () none) ;; 53
    )
  )

(deftype progress-work (structure)
  ((full-screen      progress-box :inline :offset-assert 0)
   (small-screen     progress-box :inline :offset-assert 64)
   (header           progress-box :inline :offset-assert 128)
   (body             progress-box :inline :offset-assert 192)
   (body-footer      progress-box :inline :offset-assert 256)
   (footer           progress-box :inline :offset-assert 320)
   (sub-header       progress-box :inline :offset-assert 384)
   (sub-body         progress-box :inline :offset-assert 448)
   (sub-body-footer  progress-box :inline :offset-assert 512)
   (highscore-0      progress-box :inline :offset-assert 576)
   (highscore-1      progress-box :inline :offset-assert 640)
   (highscore-body   progress-box :inline :offset-assert 704)
   (load-save-0a     progress-box :inline :offset-assert 768)
   (load-save-0b     progress-box :inline :offset-assert 832)
   (load-save-1a     progress-box :inline :offset-assert 896)
   (load-save-1b     progress-box :inline :offset-assert 960)
   (load-save-2a     progress-box :inline :offset-assert 1024)
   (load-save-2b     progress-box :inline :offset-assert 1088)
   (load-save-3a     progress-box :inline :offset-assert 1152)
   (load-save-3b     progress-box :inline :offset-assert 1216)
   (last-slot-saved  int32                :offset-assert 1280)
   (selected-num     int32                :offset-assert 1284)
   (secrets-unlocked basic                :offset-assert 1288)
   (hero-mode-save   symbol               :offset-assert 1292)
   )
  :method-count-assert 9
  :size-assert         #x510
  :flag-assert         #x900000510
  )

;; +++progress-h:progress-icon-flags
(defenum progress-icon-flags
  :type uint32
  :bitfield #t
  (pi0 0)
  (pi1 1)
  (pi2 2)
  (pi3 3)
  (pi4 4)
  (pi5 5)
  (pi6 6)
  (pi7 7)
  (pi8 8)
  (pi9 9)
  (pi10 10)
  (pi11 11)
  (pi12 12)
  (pi13 13)
  (pi14 14)
  (pi15 15)
  (pi16 16)
  (pi17 17)
  (pi18 18)
  (pi19 19)
  (pi20 20)
  (pi21 21)
  (pi22 22)
  (pi23 23)
  (pi24 24)
  (pi25 25)
  (pi26 26)
  (pi27 27)
  (pi28 28)
  (pi29 29)
  (pi30 30)
  (pi31 31)
  )
;; ---progress-h:progress-icon-flags

(deftype progress-icon-part (structure)
  ((offset vector2w :inline :offset-assert 0)
   (tex-id texture-id          :offset-assert 8)
   (bucket bucket-id           :offset-assert 12)
   (flags  progress-icon-flags :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype progress-icon-array (array)
  ((icons progress-icon-part :dynamic :offset 16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (progress-icon-array-method-9 () none) ;; 9
    )
  )

(deftype menu-option (basic)
  ((name             text-id   :offset-assert 4) ;; guessed by decompiler
   (menu-option-type uint32    :offset-assert 8)
   (offset-y         float     :offset-assert 12)
   (box              hud-box 1 :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (menu-option-method-9 () none) ;; 9 ;; (respond-progress (_type_ progress symbol) int)
    (menu-option-method-10 () none) ;; 10 ;; (draw-option (_type_ progress font-context int symbol) none)
    (menu-option-method-11 () none) ;; 11 ;; (menu-option-method-11 () none)
    )
  )

(deftype menu-slider-option (menu-option)
  ((setting-offset uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-sound-slider-option (menu-slider-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-picture-slider-option (menu-slider-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-sub-menu-option (menu-option)
  ((next-state symbol  :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-stereo-mode-sound-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-unlocked-sub-menu-option (menu-sub-menu-option)
  ((mask  uint64  :offset-assert 56)
   (value int32   :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

(deftype menu-save-sub-menu-option (menu-sub-menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-main-menu-option (menu-option)
  ((next-state symbol  :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-memcard-slot-option (menu-option)
  ((sprites hud-sprite 5 :inline :offset-assert 48)
   (pad uint8 32)
   )
  :method-count-assert 12
  :size-assert         #x190
  :flag-assert         #xc00000190
  )

(deftype menu-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-insufficient-space-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-secrets-insufficient-space-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-hero-mode-message-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-insert-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-error-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-error-auto-saving-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-card-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-error-disc-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-error-reading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-icon-info-option (menu-option)
  ((sprites hud-sprite 2 :inline :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #xb0
  :flag-assert         #xc000000b0
  )

(deftype menu-format-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-already-exists-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-create-game-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-video-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-video-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-progressive-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-progressive-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-select-start-option (menu-option)
  ((current-index  float  :offset-assert 48)
   (target-index   float  :offset-assert 52)
   (selected-index int32  :offset-assert 56)
   (scroll-speed   float  :offset-assert 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

(deftype menu-select-scene-option (menu-option)
  ((current-index  float  :offset-assert 48)
   (target-index   float  :offset-assert 52)
   (selected-index int32  :offset-assert 56)
   (scroll-speed   float  :offset-assert 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

(deftype menu-bigmap-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype paged-menu-option (menu-option)
  ((page-index      int32  :offset-assert 48)
   (prev-page-index int32  :offset-assert 52)
   (num-pages       int32  :offset-assert 56)
   (slide-dir       float  :offset-assert 60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

(deftype menu-missions-option (paged-menu-option)
  ((current-index float  :offset-assert 64)
   (target-index  float  :offset-assert 68)
   (scroll-speed  float  :offset-assert 72)
   (on-screen     basic  :offset-assert 76)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  )

(deftype highscore-page-info (structure)
  ((text         text-id :offset-assert 0)
   (secret       game-secrets :offset-assert 8)
   (game-score   uint8   :offset-assert 16)
   (icon         uint32  :offset-assert 20)
   (icon-scalex  float   :offset-assert 24)
   (icon-scaley  float   :offset-assert 28)
   (icon-offsetx float   :offset-assert 32)
   (icon-offsety float   :offset-assert 36)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (highscore-page-info-method-9 () none) ;; 9
    (highscore-page-info-method-10 () none) ;; 10
    (highscore-page-info-method-11 () none) ;; 11
    (highscore-page-info-method-12 () none) ;; 12
    )
  )

(deftype menu-highscores-option (menu-option)
  ((current-index float      :offset-assert 48)
   (target-index  float      :offset-assert 52)
   (num-pages     int32      :offset-assert 56)
   (pages         highscore-page-info 16 :offset-assert 60)
   (info          basic      :offset-assert 124)
   )
  :method-count-assert 13
  :size-assert         #x80
  :flag-assert         #xd00000080
  (:methods
    (menu-highscores-option-method-12 () none) ;; 12
    )
  )

(deftype controls-string-info (structure)
  ((button  text-id       :offset-assert 0)
   (action  text-id       :offset-assert 4)
   (feature game-feature  :offset-assert 8)
   (secret  game-secrets  :offset-assert 16)
   (vehicle game-vehicles :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (controls-string-info-method-9 () none) ;; 9
    )
  )

(deftype controls-page-info (structure)
  ((title         text-id      :offset-assert 0)
   (feature       game-feature :offset-assert 8)
   (secret        game-secrets :offset-assert 16)
   (vehicle       game-vehicles :offset-assert 24)
   (current-index float     :offset-assert 32)
   (target-index  float     :offset-assert 36)
   (num-text      int32     :offset-assert 40)
   (on-screen     basic     :offset-assert 44)
   (text          text-id 9 :offset-assert 48)
   (strings       (array controls-string-info) :offset-assert 84)
   )
  :method-count-assert 12
  :size-assert         #x58
  :flag-assert         #xc00000058
  (:methods
    (controls-page-info-method-9 () none) ;; 9
    (controls-page-info-method-10 () none) ;; 10
    (controls-page-info-method-11 () none) ;; 11
    )
  )

(deftype menu-controls-option (paged-menu-option)
  ((current-index float     :offset-assert 64)
   (target-index  float     :offset-assert 68)
   (pages         controls-page-info 7 :offset 76)
   (info          basic     :offset-assert 104)
   )
  :method-count-assert 13
  :size-assert         #x6c
  :flag-assert         #xd0000006c
  (:methods
    (menu-controls-option-method-12 () none) ;; 12
    )
  )

;; +++progress-h:secret-item-option-flags
(defenum secret-item-option-flags
  :type uint8
  :bitfield #t
  (sf0)
  (sf1)
  (sf2)
  (sf3)
  (sf4)
  (sf5)
  (sf6)
  (sf7)
  )
;; ---progress-h:secret-item-option-flags

(deftype secret-item-option (menu-option)
  ((cost             int32   :offset-assert 48)
   (secret           game-secrets  :offset-assert 56)
   (avail-after      game-task-node :offset-assert 64) ;; game-task-node
   (required-secrets game-secrets  :offset-assert 72)
   (mask-secrets     game-secrets  :offset-assert 80)
   (flags            secret-item-option-flags :offset-assert 88)
   )
  :method-count-assert 14
  :size-assert         #x59
  :flag-assert         #xe00000059
  (:methods
    (secret-item-option-method-12 () none) ;; 12
    (secret-item-option-method-13 () none) ;; 13
    )
  )

(deftype menu-secret-option (menu-option)
  ((current-index   float  :offset-assert 48)
   (target-index    float  :offset-assert 52)
   (selected-index  int32  :offset-assert 56)
   (buy-menu        symbol :offset-assert 60)
   (available-title symbol :offset-assert 64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

(deftype menu-option-list (basic)
  ((y-center int32                :offset-assert 4)
   (y-space  int32                :offset-assert 8)
   (scale    float                :offset-assert 12)
   (options  (array menu-option)  :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype menu-qr-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-restart-mission-qr-option (menu-qr-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-quit-qr-option (menu-qr-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-graphic-option (menu-option)
  ((setting-offset uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-on-off-progressive-scan-graphic-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-aspect-ratio-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-center-screen-graphic-option (menu-graphic-option)
  ((next-state symbol  :offset-assert 52) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x38
  :flag-assert         #xc00000038
  )

(deftype menu-video-mode-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-camera-option (menu-option)
  ((setting-offset uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-game-option (menu-option)
  ((setting-offset uint32  :offset-assert 48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-language-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

(deftype menu-on-off-game-vibrations-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-on-off-game-subtitles-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

(deftype menu-language-game-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; +++progress-h:inventory-icon
(defenum inventory-icon
  :type uint32
  (icon0 0)
  (icon1 1)
  (icon2 2)
  (icon3 3)
  (icon4 4)
  (icon5 5)
  (icon6 6)
  (icon7 7)
  (icon8 8)
  (icon9 9)
  (icon10 10)
  (icon11 11)
  (icon12 12)
  (icon13 13)
  (icon14 14)
  (icon15 15)
  (v-turtle 16)
  (v-snake 17)
  (v-toad 18)
  (v-scorpion 19)
  (v-rhino 20)
  (v-fox 21)
  (v-mirage 22)
  (v-x-ride 23)
  (armor3 24)
  (armor0 25)
  (armor1 26)
  (armor2 27)
  (darkjak-bomb0 28)
  (darkjak-bomb1 29)
  (artifact-invis 30)
  (darkjak-smack 31)
  (lightjak-swoop 32)
  (lightjak-regen 33)
  (lightjak-shield 34)
  (lightjak-freeze 35)
  (gun-red-1 36)
  (gun-red-2 37)
  (gun-red-3 38)
  (gun-yellow-1 39)
  (gun-yellow-2 40)
  (gun-yellow-3 41)
  (gun-blue-1 42)
  (gun-blue-2 43)
  (gun-blue-3 44)
  (gun-dark-1 45)
  (gun-dark-2 46)
  (gun-dark-3 47)
  (pass-wascity 48)
  (amulet2 49)
  (amulet0 50)
  (amulet1 51)
  (seal-of-mar 52)
  (board 53)
  (pass-factory 54)
  (artifact-holocube 55)
  (artifact-beam-generator 56)
  (artifact-prism 57)
  (artifact-quantum-reflector 58)
  (artifact-time-map 59)
  (light-eco-crystal 60)
  (dark-eco-crystal 61)
  (eco-sphere 62)
  (icon63 63)
  )
;; ---progress-h:inventory-icon

(deftype inventory-item (structure)
  ((icon       inventory-icon :offset-assert 0)
   (icon-scale float    :offset-assert 4)
   (offset     vector2  :offset 16)
   (feature    game-feature :offset-assert 24)
   (vehicle    game-vehicles :offset-assert 32)
   (item       game-items   :offset-assert 40)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (inventory-item-method-9 () none) ;; 9
    (inventory-item-method-10 () none) ;; 10
    )
  )

(deftype inventory-item-group (structure)
  ((name        text-id :offset-assert 0)
   (index-left  uint8   :offset-assert 4)
   (index-right uint8   :offset-assert 5)
   (index-up    uint8   :offset-assert 6)
   (index-down  uint8   :offset-assert 7)
   (items       (array inventory-item) :offset-assert 8)
   )
  :method-count-assert 11
  :size-assert         #xc
  :flag-assert         #xb0000000c
  (:methods
    (inventory-item-group-method-9 () none) ;; 9
    (inventory-item-group-method-10 () none) ;; 10
    )
  )

(deftype inventory-screen (structure)
  ((name          text-id :offset-assert 0)
   (current-index uint8   :offset-assert 4)
   (groups        (array inventory-item-group) :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (inventory-screen-method-9 () none) ;; 9
    )
  )

(deftype menu-inventory (menu-option)
  ((current-index float  :offset-assert 48)
   (target-index  float  :offset-assert 52)
   (screens       (array inventory-screen) :offset-assert 56)
   )
  :method-count-assert 12
  :size-assert         #x3c
  :flag-assert         #xc0000003c
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rpc-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern rpc-busy? (function int uint))
(define-extern rpc-call (function int uint uint uint int uint int uint))

(deftype rpc-buffer (basic)
  "Buffer for storing input/output data for a remote procedure call to the overlord driver on the IOP."
  ((elt-size  uint32           :offset-assert 4)
   (elt-count uint32           :offset-assert 8)
   (elt-used  uint32           :offset-assert 12)
   (busy      symbol           :offset-assert 16)
   (base      pointer          :offset-assert 20) ;; guessed by decompiler
   (data      uint8   :dynamic :offset 32) ;; guessed by decompiler
   )
  (:methods
    (new (symbol type uint uint) _type_) ;; 0
    )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype rpc-buffer-pair (basic)
  "A double buffer of RPC buffers. This is used to let the game queue up data in one buffer while
   the other is being read/written by overlord."
  ((buffer           rpc-buffer 2 :offset-assert 4) ;; guessed by decompiler
   (current          rpc-buffer   :offset-assert 12) ;; guessed by decompiler
   (last-recv-buffer pointer      :offset-assert 16) ;; guessed by decompiler
   (rpc-port         int32        :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (new (symbol type uint uint int) rpc-buffer-pair) ;; 0
    (call "Start an async RPC call. If there is already one in progress, stall and wait for it to finish." (rpc-buffer-pair uint pointer uint) int) ;; 9
    (add-element "Add an element. If the buffer is full, flush it!" (rpc-buffer-pair) pointer) ;; 10
    (decrement-elt-used "Remove the most recently queued element." (rpc-buffer-pair) int) ;; 11
    (sync "Wait for an in-progress rpc to finish." (rpc-buffer-pair symbol) int) ;; 12
    (check-busy "Check to see if an rpc is in progress." (rpc-buffer-pair) symbol) ;; 13
    (pop-last-received "Pop the response from the most recently completed rpc call." (rpc-buffer-pair) pointer) ;; 14
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; path-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defenum path-control-flag
  :bitfield #t
  :type uint32
  (display 0)
  (draw-line 1) ;; TODO - only seen it used to control debug drawing so far
  (draw-point 2) ;; TODO - only seen it used to control debug drawing so far
  (draw-text 3) ;; TODO - only seen it used to control debug drawing so far
  (not-found 4)
  )

(deftype path-control (basic)
  "The path-control is a reference a path data, which is just a list of points.
   Although it contains a `curve`, the knot part is not populated, so it's just treated as
   a bunch of line segments from the control points.
   The child class curve-control does fill out the knot data and is a proper b-spline.
   These path-controls are typically allocated on a process heap."
  ((flags      path-control-flag         :offset-assert 4) ;; guessed by decompiler
   (name       symbol                    :offset-assert 8) ;; guessed by decompiler
   (process    process-drawable          :offset-assert 12) ;; guessed by decompiler
   (curve      curve             :inline :offset-assert 16)
   (num-cverts int32                     :offset 20)
   (cverts     uint32                    :offset 16)
   )
  :method-count-assert 32
  :size-assert         #x24
  :flag-assert         #x2000000024
  (:methods
    (new "Allocate a new path-control, set up the curve to point to the specified lump data." (symbol type process symbol float entity symbol) _type_) ;; 0
    (path-control-method-9 (_type_) none) ;; 9 ;; (debug-draw (_type_) none)
    (path-control-method-10 () none) ;; 10 ;; (get-point-in-path! (_type_ vector float symbol) vector)
    (path-control-method-11 () none) ;; 11 ;; (get-random-point (_type_ vector) vector)
    (path-control-method-12 () none) ;; 12 ;; (displacement-between-two-points-copy! (_type_ vector float float) vector)
    (path-control-method-13 () none) ;; 13 ;; (displacement-between-two-points-normalized! (_type_ vector float) vector)
    (get-point-at-percent-along-path! (_type_ vector float symbol) vector) ;; 14
    (path-control-method-15 () none) ;; 15 ;; (displacement-between-points-at-percent-scaled! (_type_ vector float float) vector)
    (displacement-between-points-at-percent-normalized! (_type_ vector float) vector) ;; 16
    (get-num-segments (_type_) float) ;; 17
    (path-control-method-18 () none) ;; 18 ;; (total-distance (_type_) float)
    (get-num-verts (_type_) int) ;; 19
    (segement-duration->path-duration (_type_ float) float) ;; 20
    (path-duration->segment-duration (_type_ float) float) ;; 21
    (path-control-method-22 () none) ;; 22 ;; (get-furthest-point-on-path (_type_ vector) float)
    (path-control-method-23 () none) ;; 23 ;; (get-path-percentage-at-furthest-point (_type_ vector) float)
    (path-control-method-24 () none) ;; 24 ;; (path-control-method-24 (_type_ vector) vector)
    (path-control-method-25 (_type_ vector) float) ;; 25
    (path-control-method-26 () none) ;; 26 ;; (displacement-between-two-points! (_type_ vector float float) vector)
    (path-control-method-27 () none) ;; 27
    (path-control-method-28 () none) ;; 28
    (path-control-method-29 () none) ;; 29
    (should-display-marks? (_type_) symbol) ;; 30
    (path-control-method-31 () none) ;; 31
    )
  )

(deftype curve-control (path-control)
  "A curve-control is like a path control, but it has both control points and knot points."
  ()
  :method-count-assert 32
  :size-assert         #x24
  :flag-assert         #x2000000024
  (:methods
    (new (symbol type process symbol float) _type_) ;; 0
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type grid-hash structure)
(declare-type sphere-hash structure)

(defenum nav-mesh-flag
  :type uint8
  :bitfield #t
  (water 0)
  (dummy 1)
  )

(deftype nav-mesh-work-debug (structure)
  "Debug outputs for the nav-mesh assembly functions"
  ((debug-vec1   vector :inline :offset-assert 0)
   (debug-vec2   vector :inline :offset-assert 16)
   (debug-vec3   vector :inline :offset-assert 32)
   (debug-vec4   vector :inline :offset-assert 48)
   (debug-vec5   vector :inline :offset-assert 64)
   (debug-vec6   vector :inline :offset-assert 80)
   (debug-vec7   vector :inline :offset-assert 96)
   (debug-vec8   vector :inline :offset-assert 112)
   (debug-vec9   vector :inline :offset-assert 128)
   (debug-vec10  vector :inline :offset-assert 144)
   (debug-vec11  vector :inline :offset-assert 160)
   (debug-vec12  vector :inline :offset-assert 176)
   (sphere-array sphere 16 :inline      :offset-assert 192) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

(deftype nav-mesh-work (structure)
  "Workspace for nav-mesh processing functions."
  ((vert0-table            int8                4  :offset-assert 0) ;; guessed by decompiler
   (vert1-table            int8                4  :offset-assert 4) ;; guessed by decompiler
   (edge-mask-table        uint8               3  :offset-assert 8) ;; guessed by decompiler
   (pad0                   uint32                 :offset-assert 12)
   (deg-to-rad             float                  :offset-assert 16)
   (rad-to-deg             float                  :offset-assert 20)
   (nav-poly-min-dist      float                  :offset-assert 24)
   (nav-poly-epsilon       float                  :offset-assert 28)
   (sphere-array           sphere              16 :inline :offset-assert 32) ;; guessed by decompiler
   (debug                  nav-mesh-work-debug    :offset-assert 288)
   (work-struct-in-scratch int8                   :offset-assert 292)
   (mesh-struct-in-scratch int8                   :offset-assert 293)
   (polys-in-scratch       int8                   :offset-assert 294)
   (mesh                   nav-mesh               :offset-assert 296) ;; guessed by decompiler
   (nav                    basic                  :offset-assert 300)
   (poly0                  nav-poly               :offset-assert 304) ;; guessed by decompiler
   (poly1                  nav-poly               :offset-assert 308) ;; guessed by decompiler
   (poly-id                int32                  :offset-assert 312)
   )
  :method-count-assert 9
  :size-assert         #x13c
  :flag-assert         #x90000013c
  )

(deftype nav-mesh-link (structure)
  "Link between two different meshes"
  ((id                  uint32    :offset-assert 0)
   (dest-mesh-id        uint32    :offset-assert 4)
   (src-link-poly-id    uint8     :offset-assert 8)
   (src-switch-poly-id  uint8     :offset-assert 9)
   (dest-link-poly-id   uint8     :offset-assert 10)
   (dest-switch-poly-id uint8     :offset-assert 11)
   (dest-mesh           nav-mesh  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-poly (structure)
  "Polygon within a nav-mesh. Can be a tri or quad.
   Based on the implementation of point-poly-intersection?, these should likely be convex."
  ((data         uint8  64      :offset 0 :score -1) ;; guessed by decompiler
   (vertex       vector 4 :inline      :offset 0) ;; guessed by decompiler
   (vertex0      vector :inline :offset 0)
   (vertex1      vector :inline :offset 16)
   (vertex2      vector :inline :offset 32)
   (vertex3      vector :inline :offset 48)
   (id           uint8          :offset 12)
   (pat          uint8          :offset 13)
   (vertex-count uint8          :offset 14)
   (link         uint8          :offset 15)
   (adj-poly     uint8  4       :offset 28) ;; guessed by decompiler
   (adj-poly0    uint8          :offset 28)
   (adj-poly1    uint8          :offset 29)
   (adj-poly2    uint8          :offset 30)
   (adj-poly3    uint8          :offset 31)
   (min-y        float          :offset 44)
   (max-y        float          :offset 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype nav-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-sphere (structure)
  ((trans sphere :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype nav-ray (structure)
  ((current-pos  vector   :inline :offset-assert 0)
   (dir          vector   :inline :offset-assert 16)
   (dest-pos     vector   :inline :offset-assert 32)
   (current-poly nav-poly         :offset-assert 48)
   (next-poly    nav-poly         :offset-assert 52)
   (len          meters           :offset-assert 56)
   (last-edge    int8             :offset-assert 60)
   (ignore       uint8            :offset-assert 61)
   (terminated   symbol           :offset-assert 64) ;; guessed by decompiler
   (reached-dest symbol           :offset-assert 68) ;; guessed by decompiler
   (hit-boundary symbol           :offset-assert 72) ;; guessed by decompiler
   (hit-gap      symbol           :offset-assert 76) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype nav-route-portal (structure)
  ((vertex     nav-vertex 2 :inline :offset-assert 0) ;; guessed by decompiler
   (next-poly  nav-poly     :offset-assert 32)
   (edge-index int8         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x25
  :flag-assert         #x900000025
  )

(deftype nav-find-poly-parms (structure)
  ((point         vector   :inline :offset-assert 0)
   (y-threshold   float            :offset-assert 16)
   (ignore        uint8            :offset-assert 20)
   (poly          nav-poly         :offset-assert 24)
   (dist          float            :offset-assert 28)
   (point-inside? symbol           :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype clamp-travel-vector-to-mesh-return-info (structure)
  ((found-boundary  symbol           :offset-assert 0) ;; guessed by decompiler
   (intersection    vector   :inline :offset-assert 16)
   (boundary-normal vector   :inline :offset-assert 32)
   (prev-normal     vector   :inline :offset-assert 48)
   (next-normal     vector   :inline :offset-assert 64)
   (poly            nav-poly         :offset-assert 80)
   (gap-poly        nav-poly         :offset-assert 84)
   (edge            int8             :offset-assert 88)
   (ignore          uint8            :offset-assert 89)
   (vert-prev       vector   :inline :offset-assert 96)
   (vert-0          vector   :inline :offset-assert 112)
   (vert-1          vector   :inline :offset-assert 128)
   (vert-next       vector   :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

(deftype nav-mesh (basic)
  "Mesh used for creature/enemy navigation."
  ((work                  nav-mesh-work                        :offset-assert 4)
   (poly-array            (inline-array nav-poly)              :offset-assert 8) ;; guessed by decompiler
   (static-sphere-count   uint8                                :offset-assert 12)
   (poly-count            uint8                                :offset-assert 13)
   (nav-control-count     uint8                                :offset-assert 14)
   (max-nav-control-count uint8                                :offset-assert 15)
   (route                 (pointer uint8)                      :offset-assert 16) ;; guessed by decompiler
   (poly-hash             grid-hash                            :offset-assert 20) ;; guessed by decompiler
   (nav-control-array     (inline-array nav-control)           :offset-assert 24) ;; guessed by decompiler
   (sphere-hash           sphere-hash                          :offset-assert 28) ;; guessed by decompiler
   (static-sphere         (inline-array sphere)                :offset-assert 32) ;; guessed by decompiler
   (user-list             engine                               :offset-assert 36) ;; guessed by decompiler
   (next-nav-mesh         surface                              :offset-assert 40) ;; guessed by decompiler
   (prev-nav-mesh         surface                              :offset-assert 44) ;; guessed by decompiler
   (bounds                sphere                       :inline :offset-assert 48) ;; vector :inline
   (origin                vector                       :inline :offset 48)
   (entity                entity                               :offset-assert 64) ;; guessed by decompiler
   (link-array            (inline-array nav-mesh-link)         :offset-assert 68) ;; guessed by decompiler
   (link-count            uint8                                :offset-assert 72)
   (flags                 nav-mesh-flag                        :offset-assert 73)
   (pad1                  uint8                        2       :offset-assert 74) ;; guessed by decompiler
   (nearest-y-threshold   meters                               :offset-assert 76)
   (water-max-height      meters                               :offset-assert 80)
   (pad2                  uint32                       7       :offset-assert 84) ;; guessed by decompiler
   )
  :method-count-assert 50
  :size-assert         #x70
  :flag-assert         #x3200000070
  ;; field nav-mesh-flag is likely a value type.
  (:methods
    (nav-mesh-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (nav-mesh-method-10 () none) ;; 10 ;; (nav-mesh-method-10 (_type_ vector vector nav-poly) nav-poly)
    (nav-mesh-method-11 () none) ;; 11 ;; (poly-centroid (_type_ nav-poly vector) vector)
    (nav-mesh-method-12 () none) ;; 12 ;; (poly-centroid-local (_type_ nav-poly vector) vector)
    (nav-mesh-method-13 () none) ;; 13 ;; (lookup-poly-on-route-to-target (_type_ nav-poly nav-poly) nav-poly)
    (nav-mesh-method-14 () none) ;; 14 ;; (get-route-portal (_type_ nav-poly nav-poly nav-route-portal) (inline-array nav-vertex))
    (nav-mesh-method-15 () none) ;; 15 ;; (initialize-mesh! (_type_) none)
    (nav-mesh-method-16 () none) ;; 16
    (nav-mesh-method-17 () none) ;; 17 ;; (try-move-along-ray (_type_ nav-poly vector vector float) meters)
    (advance-ray-to-nearest-poly-edge-or-dest! (_type_ nav-ray) none) ;; 18 ;; (clamp-vector-to-mesh-cross-gaps (_type_ vector nav-poly vector float symbol clamp-travel-vector-to-mesh-return-info) none)
    (nav-mesh-method-19 () none) ;; 19 ;; (clamp-vector-to-mesh-no-gaps (_type_ vector nav-poly vector clamp-travel-vector-to-mesh-return-info) none)
    (nav-mesh-method-20 () none) ;; 20 ;; (set-normals-from-adjacent-bounds (_type_ clamp-travel-vector-to-mesh-return-info) none)
    (nav-mesh-method-21 () none) ;; 21 ;; (find-adjacent-bounds-one (_type_ vector nav-poly int int) none)
    (nav-mesh-method-22 () none) ;; 22 ;; (compute-bounding-box-from-vertices (_type_ vector vector) none)
    (nav-mesh-method-23 () none) ;; 23 ;; (init-from-entity (_type_ entity-nav-mesh) none)
    (nav-mesh-method-24 () none) ;; 24 ;; (handle-birth (_type_) none)
    (nav-mesh-method-25 () none) ;; 25 ;; (handle-kill (_type_) none)
    (nav-mesh-method-26 () none) ;; 26 ;; (update-navigation (_type_) none)
    (nav-mesh-method-27 () none) ;; 27 ;; (new-nav-control (_type_ process-drawable) nav-control)
    (nav-mesh-method-28 () none) ;; 28 ;; (remove-nav-control (_type_ nav-control) none)
    (nav-mesh-method-29 () none) ;; 29 ;; (add-process-drawable-to-navmesh (_type_ process-drawable symbol) none)
    (nav-mesh-method-30 () none) ;; 30 ;; (remove-process-drawable (_type_ process-drawable) none)
    (nav-mesh-method-31 () none) ;; 31 ;; (change-to (_type_ process-drawable) none)
    (nav-mesh-method-32 () none) ;; 32 ;; (link-by-id (_type_ uint) symbol)
    (nav-mesh-method-33 () none) ;; 33 ;; (unlink-by-id (_type_ uint) symbol)
    (nav-mesh-method-34 () none) ;; 34 ;; (nav-mesh-method-34 (_type_ vector vector float) float)
    (nav-mesh-method-35 () none) ;; 35 ;; (nav-mesh-method-35 (_type_ vector vector float) float)
    (nav-mesh-method-36 () none) ;; 36 ;; (debug-draw-poly (_type_ nav-poly rgba) none)
    (nav-mesh-method-37 () none) ;; 37 ;
    (nav-mesh-method-38 () none) ;; 38 ;; (nav-mesh-method-38 (_type_ nav-poly vector vector vector (pointer nav-poly)) vector)
    (nav-mesh-method-39 () none) ;; 39
    (point-in-poly? "Check if a point is inside a poly of this mesh" (_type_ nav-poly vector) symbol) ;; 40 ;; (project-point-onto-plane-of-poly-local (_type_ nav-poly vector vector vector) none)
    (nav-mesh-method-41 () none) ;; 41
    (closest-point-on-boundary "Find the point on the polygon edge that is closest to the query point." (_type_ nav-poly vector vector) vector) ;; 42 ;; (find-poly-containing-point-local (_type_ nav-find-poly-parms) nav-poly)
    (nav-mesh-method-43 () none) ;; 43 ;; (find-nearest-poly-to-point-local (_type_ nav-find-poly-parms) nav-find-poly-parms)
    (project-point-into-poly-2d "Find the point in the polygon closest to the query point." (_type_ nav-poly vector vector) vector) ;; 44 ;; (is-in-mesh-local? (_type_ vector float float) symbol)
    (nav-mesh-method-45 () none) ;; 45 ;; (link-to-other-mesh (_type_ nav-mesh-link) symbol)
    (nav-mesh-method-46 () none) ;; 46 ;; (unlink-mesh (_type_ nav-mesh-link) none)
    (nav-mesh-method-47 () none) ;; 47
    (nav-mesh-method-48 () none) ;; 48
    (nav-mesh-method-49 () none) ;; 49
    )
  )

(define-extern vector-normalize-unity! "Normalize a vector (xyz only) in place." (function vector vector))
(define-extern vector-normalize-unity-copy! "Normalize a vector (xyz only)" (function vector vector vector))
(define-extern debug-validate-current-poly "Not implemented." (function symbol))
(define-extern init-ray "Set up a nav-ray. Assumes that dest-pos and current-pos are set." (function nav-ray none))
(define-extern point-poly-intersection? "Check if a point is inside a poly." (function nav-mesh vector int (inline-array vector) symbol))
(define-extern nav-sphere-from-cam "Print out a SPHEREM from the current camera position, possibly used by their level-building tool." (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-control-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum nav-state-flag
  :type uint32
  :bitfield #t
  (display-marks      0)
  (recovery-mode      1)
  (initialized        2)
  (debug              3)
  (directional-mode   4)
  (trapped-by-sphere  5)
  (target-poly-dirty  6)
  (blocked            7)
  (in-target-poly     8)
  (at-target          9)
  (target-inside     10)
  (in-mesh           11)
  (avoiding-sphere   12)
  (touching-sphere   13)
  (at-gap            14)
  (use-position 15)
  )

(defenum nav-control-flag
  :type uint32
  :bitfield #t
  (display-marks        0) ;; 1
  (debug                1) ;; 2
  (no-redirect-in-clamp 2) ;; 4
  (limit-rotation-rate  3) ;; 8
  (update-heading-from-facing 4) ;; 16
  (use-momentum        5) ;; 32
  (momentum-ignore-heading 6) ;; 64
  (output-sphere-hash  7) ;; 128
  (kernel-run          8) ;; 256
  )

(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert 0)
   (intersect vector :inline :offset-assert 16)
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert 0)
   (poly nav-poly         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype nav-avoid-spheres-params (structure)
  ((current-pos          vector :inline :offset-assert 0)
   (travel               vector :inline :offset-assert 16)
   (pref-dir             vector :inline :offset-assert 32)
   (out-travel           vector 2 :inline      :offset-assert 48) ;; guessed by decompiler
   (closest-sphere-dist2 float          :offset-assert 80)
   (avoiding-sphere?     symbol         :offset-assert 84) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype nav-callback-info (structure)
  ((callback-count int32                                 :offset-assert 0)
   (callback-array (function object nav-control none) 10 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype nav-state (structure)
  ((flags                     nav-state-flag         :offset-assert 0)
   (nav                       nav-control            :offset-assert 4) ;; guessed by decompiler
   (user-poly                 nav-poly               :offset-assert 8)
   (mesh                      nav-mesh               :offset-assert 12) ;; guessed by decompiler
   (current-poly              nav-poly               :offset-assert 16)
   (virtual-current-poly      nav-poly               :offset-assert 20)
   (next-poly                 nav-poly               :offset-assert 24)
   (target-poly               nav-poly               :offset-assert 28)
   (rotation-rate             float                  :offset-assert 32)
   (speed                     meters                 :offset-assert 36)
   (prev-speed                meters                 :offset-assert 40)
   (pad0                      uint32         1       :offset-assert 44) ;; guessed by decompiler
   (travel                    vector         :inline :offset-assert 48)
   (target-pos                vector         :inline :offset-assert 64)
   (current-pos               vector         :inline :offset-assert 80)
   (current-pos-local         vector         :inline :offset-assert 96)
   (virtual-current-pos-local vector         :inline :offset-assert 112)
   (velocity                  vector         :inline :offset-assert 128)
   (heading                   vector         :inline :offset-assert 144)
   (target-dir                vector         :inline :offset-assert 160)
   (accel                     vector         :inline :offset 160)
   (user-position             vector         :inline :offset 112)
   )
  :method-count-assert 56
  :size-assert         #xb0
  :flag-assert         #x38000000b0
  (:methods
    (nav-state-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (nav-state-method-10 () none) ;; 10 ;; (nav-state-method-10 (_type_) none)
    (nav-state-method-11 () none) ;; 11 ;; (plan-over-pat1-polys-using-route (_type_ nav-gap-info) symbol)
    (nav-state-method-12 () none) ;; 12 ;; (get-velocity (_type_ vector) vector)
    (nav-state-method-13 () none) ;; 13 ;; (get-travel (_type_ vector) vector)
    (nav-state-method-14 () none) ;; 14 ;; (get-heading (_type_ vector) vector)
    (nav-state-method-15 () none) ;; 15 ;; (get-target-post (_type_ vector) vector)
    (nav-state-method-16 () none) ;; 16 ;; (get-speed (_type_) meters)
    (nav-state-method-17 () none) ;; 17 ;; (get-rotation-rate (_type_) float)
    (nav-state-method-18 () none) ;; 18 ;; (try-projecting-to-current-poly (_type_ vector object vector) symbol)
    (nav-state-method-19 () none) ;; 19 ;; (get-current-poly (_type_) nav-poly)
    (nav-state-method-20 () none) ;; 20 ;; (copy-nav-state! (_type_ (pointer nav-state)) none)
    (nav-state-method-21 () none) ;; 21 ;; (nav-state-method-21 () none)
    (nav-state-method-22 () none) ;; 22 ;; (nav-state-method-22 () none)
    (nav-state-method-23 () none) ;; 23 ;; (nav-state-method-23 () none)
    (nav-state-method-24 () none) ;; 24 ;; (turn-and-navigate-to-destination (_type_) none)
    (nav-state-method-25 () none) ;; 25 ;; (navigate-using-route-portals-wrapper (_type_) none)
    (nav-state-method-26 () none) ;; 26 ;; (navigate-using-best-dir-recompute-avoid-spheres-1-wrapper (_type_) none)
    (nav-state-method-27 () none) ;; 27 ;; (navigate-within-poly-wrapper (_type_) none)
    (nav-state-method-28 () none) ;; 28 ;; (compute-travel-speed (_type_) none)
    (nav-state-method-29 () none) ;; 29 ;; (nav-state-method-29 (_type_) none)
    (nav-state-method-30 () none) ;; 30 ;; (nav-state-method-30 (_type_) none)
    (nav-state-method-31 () none) ;; 31 ;; (navigate-using-best-dir-recompute-avoid-spheres-2 (_type_) none)
    (nav-state-method-32 () none) ;; 32 ;; (update-travel-dir-from-spheres (_type_) none)
    (nav-state-method-33 () none) ;; 33 ;; (compute-speed-simple (_type_) none)
    (nav-state-method-34 () none) ;; 34 ;; (navigate-v1! (_type_) none)
    (nav-state-method-35 () none) ;; 35 ;; (reset-target! (_type_) none)
    (nav-state-method-36 () none) ;; 36 ;; (add-offset-to-target! (_type_ vector) none)
    (nav-state-method-37 () none) ;; 37 ;; (navigate-v2! (_type_) none)
    (nav-state-method-38 () none) ;; 38 ;; (set-current-poly! (_type_ nav-poly) none)
    (nav-state-method-39 () none) ;; 39 ;; (nav-state-method-39 (_type_) symbol)
    (nav-state-method-40 () none) ;; 40 ;; (do-navigation-to-destination (_type_ vector) none)
    (nav-state-method-41 () none) ;; 41 ;; (clamp-vector-to-mesh-cross-gaps (_type_ vector) symbol)
    (nav-state-method-42 () none) ;; 42 ;; (set-target-post! (_type_ vector) none)
    (nav-state-method-43 () none) ;; 43 ;; (set-travel! (_type_ vector) none)
    (nav-state-method-44 () none) ;; 44 ;; (set-velocity! (_type_ vector) none)
    (nav-state-method-45 () none) ;; 45 ;; (set-heading! (_type_ vector) none)
    (nav-state-method-46 () none) ;; 46 ;; (set-speed! (_type_ meters) none)
    (nav-state-method-47 () none) ;; 47 ;; (reset! (_type_ nav-control) none)
    (nav-state-method-48 () none) ;; 48 ;; (nav-state-method-48 () none)
    (nav-state-method-49 () none) ;; 49 ;; (navigate-using-best-dir-use-existing-avoid-spheres (_type_ nav-avoid-spheres-params) none)
    (nav-state-method-50 () none) ;; 50 ;; (nav-state-method-50 (_type_) none)
    (nav-state-method-51 () none) ;; 51 ;; (navigate-using-route-portals (_type_) none)
    (nav-state-method-52 () none) ;; 52 ;; (navigate-using-best-dir-recompute-avoid-spheres-1 (_type_) none)
    (nav-state-method-53 () none) ;; 53 ;; (navigate-within-poly (_type_) none)
    (nav-state-method-54 () none) ;; 54 ;; (clamp-travel-vector (_type_) none)
    (nav-state-method-55 () none) ;; 55
    )
  )

(deftype nav-control (structure)
  ((flags                nav-control-flag              :offset-assert 0)
   (callback-info        nav-callback-info             :offset-assert 4)
   (process              process                       :offset-assert 8) ;; guessed by decompiler
   (pad0                 uint32                        :offset-assert 12)
   (shape                collide-shape                 :offset-assert 16) ;; guessed by decompiler
   (nearest-y-threshold  meters                        :offset-assert 20)
   (nav-cull-radius      meters                        :offset-assert 24)
   (sec-per-frame        float                         :offset-assert 28)
   (target-speed         meters                        :offset-assert 32)
   (acceleration         meters                        :offset-assert 36)
   (turning-acceleration meters                        :offset-assert 40)
   (max-rotation-rate    float                         :offset-assert 44)
   (speed-scale          float                         :offset-assert 48)
   (sphere-count         int32                         :offset-assert 52)
   (sphere-array         (inline-array sphere)         :offset-assert 56) ;; guessed by decompiler
   (root-sphere-id       uint8                         :offset-assert 60)
   (sphere-mask          uint8                         :offset-assert 61)
   (pad1                 uint8                 2       :offset-assert 62) ;; guessed by decompiler
   (sphere-id-array      uint8                 16      :offset-assert 64) ;; guessed by decompiler
   ;(UNKNOWN              UNKNOWN                       :offset-assert -1) ;; field could not be read.
   (extra-nav-sphere     vector                :inline :offset-assert 80)
   (root-nav-sphere      vector                :inline :offset-assert 96)
   (state                nav-state             :inline :offset-assert 112)
   (mesh                 basic                         :offset 124)
   )
  :method-count-assert 47
  :size-assert         #x120
  :flag-assert         #x2f00000120
  (:methods
    (nav-control-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (nav-control-method-10 () none) ;; 10 ;; (point-in-bsphere? (_type_ vector) symbol)
    (find-poly-containing-point-1 (_type_ vector) nav-poly) ;; 11
    (nav-control-method-12 () none) ;; 12 ;; (cloest-point-on-mesh (_type_ vector vector nav-poly) nav-poly)
    (nav-control-method-13 () none) ;; 13 ;; (find-nearest-poly-to-point (_type_ vector) nav-poly)
    (nav-control-method-14 () none) ;; 14 ;; (project-point-onto-plane-of-poly (_type_ nav-poly vector vector vector) none)
    (nav-control-method-15 () none) ;; 15 ;; (find-poly-containing-point-2 (_type_ vector) nav-poly)
    (nav-control-method-16 () none) ;; 16 ;; (is-above-poly-max-height? (_type_ vector float) symbol)
    (nav-control-method-17 () none) ;; 17 ;; (is-in-mesh? (_type_ vector float) symbol)
    (nav-control-method-18 () none) ;; 18 ;; (avoid-spheres-1! (_type_ nav-avoid-spheres-params) symbol)
    (nav-control-method-19 () none) ;; 19 ;; (avoid-spheres-2! (_type_ nav-avoid-spheres-params) symbol)
    (nav-control-method-20 () none) ;; 20 ;; (clamp-vector-to-mesh-cross-gaps (_type_ vector nav-poly vector float symbol clamp-travel-vector-to-mesh-return-info) none)
    (nav-control-method-21 () none) ;; 21 ;; (clamp-vector-to-mesh-no-gaps (_type_ vector nav-poly vector clamp-travel-vector-to-mesh-return-info) none)
    (nav-control-method-22 () none) ;; 22 ;; (find-first-sphere-and-update-avoid-params (_type_ vector nav-avoid-spheres-params) float)
    (nav-control-method-23 () none) ;; 23 ;; (set-spheres-from-nav-ids (_type_) none)
    (nav-control-method-24 () none) ;; 24 ;; (add-root-sphere-to-hash! (_type_ vector int) symbol)
    (nav-control-method-25 () none) ;; 25 ;; (get-max-rotation-rate (_type_) float)
    (nav-control-method-26 () none) ;; 26 ;; (get-sphere-mask (_type_) uint)
    (nav-control-method-27 () none) ;; 27 ;; (get-target-speed (_type_) meters)
    (nav-control-method-28 () none) ;; 28 ;; (enable-extra-sphere! (_type_) none)
    (nav-control-method-29 () none) ;; 29 ;; (disable-extra-sphere! (_type_) none)
    (nav-control-method-30 () none) ;; 30 ;; (copy-extra-nav-sphere! (_type_ sphere) none)
    (nav-control-method-31 () none) ;; 31 ;; (set-extra-nav-sphere-xyz! (_type_ sphere) none)
    (nav-control-method-32 () none) ;; 32 ;; (set-extra-nav-sphere-radius! (_type_ float) none)
    (nav-control-method-33 () none) ;; 33 ;; (set-nearest-y-thres! (_type_ float) none)
    (nav-control-method-34 () none) ;; 34 ;; (set-nav-cull-radius! (_type_ meters) none)
    (nav-control-method-35 () none) ;; 35 ;; (set-speed-scale! (_type_ float) none)
    (nav-control-method-36 () none) ;; 36 ;; (set-target-speed! (_type_ meters) none)
    (nav-control-method-37 () none) ;; 37 ;; (set-acceleration! (_type_ meters) none)
    (nav-control-method-38 () none) ;; 38 ;; (set-turning-acceleration! (_type_ meters) none)
    (nav-control-method-39 () none) ;; 39 ;; (set-max-rotation-rate! (_type_ float) none)
    (nav-control-method-40 () none) ;; 40 ;; (set-sphere-mask! (_type_ uint) none)
    (nav-control-method-41 () none) ;; 41 ;; (remove! (_type_) none)
    (nav-control-method-42 () none) ;; 42 ;; (init! (_type_ collide-shape) none)
    (nav-control-method-43 () none) ;; 43 ;; (display-marks? (_type_) symbol)
    (nav-control-method-44 () none) ;; 44 ;; (nav-control-method-44 () none)
    (nav-control-method-45 () none) ;; 45 ;; (find-first-sphere-intersecting-ray (_type_ vector vector vector) sphere)
    (nav-control-method-46 () none) ;; 46 ;; (find-sphere-ids-from-sphere-hash (_type_ symbol) none)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spatial-hash-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type grid-hash-work structure)

(deftype grid-hash-word (uint8)
  ()
  :flag-assert #x900000001
  )

(deftype grid-hash-box (structure)
  "Integer coordinate box for the spatial hash grid."
  ((min int8 3 :offset-assert 0) ;; guessed by decompiler
   (max int8 3 :offset-assert 3) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype grid-hash (basic)
  "The grid-hash is the basic 3D grid used in the spatial-hash, which is used for runtime
   actor collision dectection by hashing actor spheres into grid cells, and avoiding the typical
   O(n^2) 'check everybody against everybody' collision loop."
  ((work                grid-hash-work                   :offset-assert 4) ;; guessed by decompiler
   (search-box          grid-hash-box            :inline :offset-assert 8)
   (bucket-size         int16                            :offset-assert 14)
   (axis-scale          float                    3       :offset-assert 16) ;; guessed by decompiler
   (dimension-array     int8                     3       :offset-assert 28) ;; guessed by decompiler
   (vertical-cell-count int8                             :offset-assert 31)
   (bucket-array        (pointer grid-hash-word)         :offset-assert 32) ;; guessed by decompiler
   (box-min             float                    3       :offset-assert 36) ;; guessed by decompiler
   (box-max             float                    3       :offset-assert 48) ;; guessed by decompiler
   (object-count        int16                            :offset-assert 60)
   (bucket-count        int16                            :offset-assert 62)
   (min-cell-size       float                            :offset-assert 64)
   (bucket-memory-size  int32                            :offset-assert 68)
   (mem-bucket-array    (pointer grid-hash-word)         :offset-assert 72) ;; guessed by decompiler
   (spr-bucket-array    (pointer grid-hash-word)         :offset-assert 76) ;; guessed by decompiler
   (debug-draw          symbol                           :offset-assert 80) ;; guessed by decompiler
   (use-scratch-ram     symbol                           :offset-assert 84) ;; guessed by decompiler
   )
  :method-count-assert 25
  :size-assert         #x58
  :flag-assert         #x1900000058
  (:methods
    (new (symbol type int) _type_) ;; 0
    (update-grid-for-objects-in-box (_type_ int vector vector) none) ;; 9
    (clear-bucket-array (_type_) none) ;; 10
    (setup-search-box (_type_ int vector vector vector) none) ;; 11
    (search-for-point (_type_ vector) (pointer uint8)) ;; 12
    (search-for-sphere (_type_ vector float) (pointer uint8)) ;; 13
    (draw (_type_ rgba) none) ;; 14
    (dump-grid-info (_type_) none) ;; 15
    (verify-bits-in-bucket (_type_ grid-hash-box grid-hash-box) none) ;; 16
    (box-of-everything (_type_ object grid-hash-box) none) ;; 17
    (grid-hash-method-18 (_type_ grid-hash-box int) none) ;; 18
    (grid-hash-method-19 (_type_ grid-hash-box int) none) ;; 19
    (do-search! (_type_ grid-hash-box (pointer uint8)) none) ;; 20
    (set-up-box (_type_ grid-hash-box vector vector) none) ;; 21
    (sphere-to-grid-box (_type_ grid-hash-box sphere) none) ;; 22
    (line-sphere-to-grid-box (_type_ grid-hash-box vector vector float) none) ;; 23
    (update-grid (_type_) none) ;; 24
    )
  )

(deftype find-nav-sphere-ids-params (structure)
  ((bsphere     sphere          :inline :offset-assert 0)
   (y-threshold float                   :offset-assert 16)
   (len         int16                   :offset-assert 20)
   (max-len     int16                   :offset-assert 22)
   (mask        uint8                   :offset-assert 24)
   (array       (pointer uint8)         :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sphere-hash (grid-hash)
  "An extension of grid hash that holds spheres inside of the grid."
  ((sphere-array     (inline-array sphere)  :offset-assert 88) ;; guessed by decompiler
   (max-object-count int16                  :offset-assert 92)
   (pad              int16                  :offset-assert 94)
   (mem-sphere-array uint32                 :offset-assert 96)
   (spr-sphere-array uint32                 :offset-assert 100)
   )
  :method-count-assert 33
  :size-assert         #x68
  :flag-assert         #x2100000068
  (:methods
    (new (symbol type int int) _type_) ;; 0
    (clear-objects! (_type_) none) ;; 25
    (add-a-sphere (_type_ vector) int) ;; 26
    (add-a-sphere-with-flag (_type_ vector int) int) ;; 27
    (update-from-spheres (_type_) none) ;; 28
    (sphere-hash-method-29 (_type_ find-nav-sphere-ids-params int int int) none) ;; 29
    (find-nav-sphere-ids (_type_ find-nav-sphere-ids-params) none) ;; 30
    (add-sphere-with-mask-and-id (_type_ vector int int) symbol) ;; 31
    (sphere-hash-method-32 (_type_ sphere int) symbol) ;; 32
    )
  )

(deftype hash-object-info (structure)
  ((object basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype spatial-hash (sphere-hash)
  "An extension of sphere-hash that associates an object with each sphere."
  ((object-array     (inline-array hash-object-info)  :offset-assert 104) ;; guessed by decompiler
   (mem-object-array (inline-array hash-object-info)  :offset-assert 108) ;; guessed by decompiler
   (spr-object-array (inline-array hash-object-info)  :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 40
  :size-assert         #x74
  :flag-assert         #x2800000074
  (:methods
    (new (symbol type int int) _type_) ;; 0
    (spatial-hash-method-33 () none) ;; 33
    (add-an-object (_type_ vector hash-object-info) int) ;; 34
    (fill-actor-list-for-box (_type_ bounding-box (pointer collide-shape) int) int) ;; 35
    (fill-actor-list-for-sphere (_type_ sphere (pointer collide-shape) int) int) ;; 36
    (fill-actor-list-for-line-sphere (_type_ vector vector float (pointer collide-shape) int int) int) ;; 37
    (fill-actor-list-for-vec+r (_type_ vector (pointer collide-shape) int) int) ;; 38
    (spatial-hash-method-39 (_type_ object hash-object-info) int) ;; 39
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-hash-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *actor-list* (pointer collide-shape))
(define-extern *actor-list-length* int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++rigid-body-h:rigid-body-flag
(defenum rigid-body-flag
  :bitfield #t
  :type uint32
  (display-marks 0)
  (enable-physics 1)
  (enable-collision 2)
  (active 3)
  (debug 4)
  (blocker 5)
  )
;; ---rigid-body-h:rigid-body-flag

;; +++rigid-body-h:rigid-body-object-flag
(defenum rigid-body-object-flag
  :bitfield #t
  :type uint64
  (enable-collision 0)
  (disturbed 1)
  (damaged 2)
  (dead 3)
  (player-touching 4)
  (player-edge-grabbing 5)
  (player-standing-on 6)
  (player-impulse-force 7)
  (player-contact-force 8)
  (persistent 9)
  (in-air 10)
  (on-ground 11)
  (on-flight-level 12)
  (riding 13)
  (player-driving 14)
  (waiting-for-player 15)
  (ignition 16)
  (turbo-boost 17)
  (reverse-gear 18)
  (slide 19)
  (hard-turn 20)
  (jump 21)
  (jump-sound 22)
  (ai-driving 23)
  (traffic-managed 24)
  (flight-level-transition 25)
  (flight-level-transition-ending 26)
  (camera-bike-mode 27)
  (camera-rapid-track-mode 28)
  (camera 29)
  (alert 30)
  (in-pursuit 31)
  (target-in-sight 32)
  (rammed-target 33)
  (draw-marks 34)
  (hack-edit-graph-mode 35)
  (measure-control-parameters 36)
  (lights-on 37)
  (lights-update 38)
  (lights-dead 39)
  (no-hijack 40)
  (player-grabbed 41)
  (nav-spheres 42)
  (idle-sound 43)
  )
;; ---rigid-body-h:rigid-body-object-flag

(deftype rigid-body-info (structure)
  ((mass                float          :offset-assert 0)
   (inv-mass            float          :offset-assert 4)
   (linear-damping      float          :offset-assert 8)
   (angular-damping     float          :offset-assert 12)
   (bounce-factor       float          :offset-assert 16)
   (friction-factor     float          :offset-assert 20)
   (bounce-mult-factor  float          :offset-assert 24)
   (cm-offset-joint     vector :inline :offset-assert 32)
   (inv-inertial-tensor matrix :inline :offset-assert 48)
   (inertial-tensor     matrix :inline :offset-assert 112)
   (inertial-tensor-box meters 3       :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #xbc
  :flag-assert         #xa000000bc
  (:methods
    (rigid-body-info-method-9 () none) ;; 9 ;; (rigid-body-info-method-9 (_type_) none)
    )
  )

(deftype rigid-body-object-extra-info (structure)
  ((max-time-step      float   :offset-assert 0)
   (gravity            meters  :offset-assert 4)
   (idle-distance      meters  :offset-assert 8)
   (attack-force-scale float   :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rigid-body-object-constants (structure)
  ((info               rigid-body-info              :inline :offset-assert 0)
   (mass               float                                :offset 0)
   (inv-mass           float                                :offset 4)
   (cm-joint-x         meters                               :offset 32)
   (cm-joint-y         meters                               :offset 36)
   (cm-joint-z         meters                               :offset 40)
   (linear-damping     float                                :offset 8)
   (angular-damping    float                                :offset 12)
   (bounce-factor      float                                :offset 16)
   (friction-factor    float                                :offset 20)
   (inertial-tensor-x  meters                               :offset 176)
   (inertial-tensor-y  meters                               :offset 180)
   (inertial-tensor-z  meters                               :offset 184)
   (extra              rigid-body-object-extra-info :inline :offset-assert 188)
   (max-time-step      float                                :offset 188)
   (gravity            meters                               :offset 192)
   (idle-distance      meters                               :offset 196)
   (attack-force-scale float                                :offset 200)
   (name               symbol                               :offset-assert 204) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype rigid-body-impact (structure)
  ((point    vector      :inline :offset-assert 0)
   (normal   vector      :inline :offset-assert 16)
   (velocity vector      :inline :offset-assert 32)
   (impulse  float               :offset-assert 48)
   (pat      pat-surface         :offset-assert 52) ;; guessed by decompiler
   (process  basic               :offset-assert 56)
   (prim-id  uint32              :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype rigid-body-control (basic)
  ((flags           rigid-body-flag         :offset-assert 4)
   (info            rigid-body-info         :offset-assert 8)
   (force-callback  basic                   :offset-assert 12)
   (process         process                 :offset-assert 16) ;; guessed by decompiler
   (blocked-by      basic                   :offset-assert 20)
   (time-remaining  float                   :offset-assert 24)
   (step-count      int16                   :offset-assert 28)
   (linear-damping  float                   :offset-assert 32)
   (angular-damping float                   :offset-assert 36)
   (bounce-factor   float                   :offset-assert 40)
   (friction-factor float                   :offset-assert 44)
   (position        vector          :inline :offset-assert 48)
   (rot             vector          :inline :offset-assert 64)
   (rotation        quaternion      :inline :offset 64)
   (lin-momentum    vector          :inline :offset-assert 80)
   (ang-momentum    vector          :inline :offset-assert 96)
   (force           vector          :inline :offset-assert 112)
   (torque          vector          :inline :offset-assert 128)
   (lin-velocity    vector          :inline :offset-assert 144)
   (ang-velocity    vector          :inline :offset-assert 160)
   (matrix          matrix          :inline :offset-assert 176)
   (inv-i-world     matrix          :inline :offset-assert 240)
   )
  :method-count-assert 34
  :size-assert         #x130
  :flag-assert         #x2200000130
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process) _type_)
    (rigid-body-control-method-9 () none) ;; 9 ;; (rigid-body-control-method-9 (_type_ collide-shape-moving float) none)
    (rigid-body-control-method-10 () none) ;; 10 ;; (rigid-body-control-method-10 (_type_ rigid-body-object float float) object)
    (rigid-body-control-method-11 () none) ;; 11 ;; (rigid-body-control-method-11 (_type_ collide-shape-moving) none)
    (rigid-body-control-method-12 () none) ;; 12 ;; (rigid-body-control-method-12 (_type_ float) none)
    (rigid-body-control-method-13 () none) ;; 13 ;; (rigid-body-control-method-13 (_type_) none)
    (rigid-body-control-method-14 () none) ;; 14 ;; (rigid-body-control-method-14 (_type_ float) none)
    (rigid-body-control-method-15 () none) ;; 15 ;; (clear-force-torque! (_type_) none)
    (rigid-body-control-method-16 () none) ;; 16 ;; (clear-momentum! (_type_) none)
    (rigid-body-control-method-17 () none) ;; 17 ;; (rigid-body-control-method-17 (_type_ vector vector) none)
    (rigid-body-control-method-18 () none) ;; 18 ;; (rigid-body-control-method-18 (_type_ vector vector) none)
    (rigid-body-control-method-19 () none) ;; 19 ;; (rigid-body-control-method-19 (_type_ vector) none)
    (rigid-body-control-method-20 () none) ;; 20 ;; (rigid-body-control-method-20 (_type_ vector vector float) none)
    (rigid-body-control-method-21 () none) ;; 21 ;; (rigid-body-control-method-21 (_type_ vector vector) vector)
    (rigid-body-control-method-22 () none) ;; 22 ;; (rigid-body-control-method-22 (_type_ vector) vector)
    (rigid-body-control-method-23 () none) ;; 23 ;; (rigid-body-control-method-23 (_type_) none)
    (rigid-body-control-method-24 () none) ;; 24 ;; (rigid-body-control-method-24 (_type_ rigid-body-info vector quaternion basic) none)
    (rigid-body-control-method-25 () none) ;; 25 ;; (rigid-body-control-method-25 (_type_ vector quaternion) none)
    (rigid-body-control-method-26 () none) ;; 26
    (rigid-body-control-method-27 () none) ;; 27
    (rigid-body-control-method-28 () none) ;; 28
    (rigid-body-control-method-29 () none) ;; 29
    (rigid-body-control-method-30 () none) ;; 30
    (rigid-body-control-method-31 () none) ;; 31
    (rigid-body-control-method-32 () none) ;; 32
    (rigid-body-control-method-33 () none) ;; 33
    )
  )

(deftype rigid-body-object (process-focusable)
  ((info                  rigid-body-object-constants         :offset-assert 208)
   (flags                 rigid-body-object-flag              :offset-assert 216)
   (max-time-step         float                               :offset-assert 224)
   (incoming-attack-id    uint32                              :offset-assert 228)
   (player-touch-time     time-frame                          :offset-assert 232) ;;
   (disturbed-time        time-frame                          :offset-assert 240) ;; time-frame
   (player-force-position vector                      :inline :offset-assert 256)
   (player-force          vector                      :inline :offset-assert 272)
   )
  :method-count-assert 56
  :size-assert         #x120
  :flag-assert         #x3800a00120
  ;; field rigid-body-object-flag is likely a value type.
  (:methods
    (rigid-body-object-method-28 () none) ;; 28 ;; (active () _type_ :state)
    (rigid-body-object-method-29 () none) ;; 29 ;; (rigid-body-object-method-29 (_type_ float) none)
    (rigid-body-object-method-30 () none) ;; 30 ;; (rigid-body-object-method-30 (_type_) none)
    (rigid-body-object-method-31 () none) ;; 31 ;; (alloc-and-init-rigid-body-control (_type_ rigid-body-object-constants) none)
    (rigid-body-object-method-32 () none) ;; 32 ;; (allocate-and-init-cshape (_type_) none)
    (rigid-body-object-method-33 () none) ;; 33 ;; (init-skel-and-rigid-body (_type_) none)
    (rigid-body-object-method-34 () none) ;; 34 ;; (rigid-body-object-method-34 (_type_) none)
    (rigid-body-object-method-35 () none) ;; 35 ;; (rigid-body-object-method-35 (_type_) none)
    (rigid-body-object-method-36 () none) ;; 36 ;; (do-engine-sounds (_type_) none)
    (rigid-body-object-method-37 () none) ;; 37 ;; (rigid-body-object-method-37 (_type_) none)
    (rigid-body-object-method-38 () none) ;; 38 ;; (rigid-body-object-method-38 (_type_) none)
    (rigid-body-object-method-39 () none) ;; 39 ;; (rigid-body-object-method-39 (_type_) none)
    (rigid-body-object-method-40 () none) ;; 40 ;; (rigid-body-object-method-40 (_type_) none)
    (rigid-body-object-method-41 () none) ;; 41 ;; (rigid-body-object-method-41 (_type_) none)
    (rigid-body-object-method-42 () none) ;; 42 ;; (rigid-body-object-method-42 (_type_) none)
    (rigid-body-object-method-43 () none) ;; 43 ;; (rigid-body-object-method-43 (_type_) none)
    (rigid-body-object-method-44 () none) ;; 44 ;; (apply-damage (_type_ float rigid-body-impact) none)
    (rigid-body-object-method-45 () none) ;; 45 ;; (rigid-body-object-method-45 (_type_ rigid-body-impact) none)
    (rigid-body-object-method-46 () none) ;; 46 ;; (rigid-body-object-method-46 (_type_ process-drawable int symbol event-message-block) object)
    (rigid-body-object-method-47 () none) ;; 47 ;; (rigid-body-object-method-47 (_type_ process-drawable attack-info touching-shapes-entry penetrate) symbol)
    (rigid-body-object-method-48 () none) ;; 48 ;; (rigid-body-object-method-48 (_type_ process-focusable touching-shapes-entry) symbol)
    (rigid-body-object-method-49 () none) ;; 49 ;; (rigid-body-object-method-49 (_type_ rigid-body-impact touching-shapes-entry) none)
    (rigid-body-object-method-50 () none) ;; 50 ;; (rigid-body-object-method-50 (_type_ float) none)
    (rigid-body-object-method-51 () none) ;; 51 ;; (rigid-body-object-method-51 (_type_) none)
    (rigid-body-object-method-52 () none) ;; 52 ;; (rigid-body-object-method-52 (_type_) none)
    (rigid-body-object-method-53 () none) ;; 53
    (rigid-body-object-method-54 () none) ;; 54
    (rigid-body-object-method-55 () none) ;; 55
    )
  )

(deftype rigid-body-queue (structure)
  ((count   int8       :offset-assert 0)
   (manager uint64     :offset-assert 8)
   (array   handle 128 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 17
  :size-assert         #x410
  :flag-assert         #x1100000410
  (:methods
    (rigid-body-queue-method-9 () none) ;; 9 ;; (rigid-body-queue-method-9 (_type_) none)
    (rigid-body-queue-method-10 () none) ;; 10 ;; (rigid-body-queue-method-10 (_type_) none)
    (rigid-body-queue-method-11 () none) ;; 11 ;; (rigid-body-queue-method-11 (_type_ rigid-body-object) none)
    (rigid-body-queue-method-12 () none) ;; 12 ;; (rigid-body-queue-method-12 (_type_ int int) none)
    (rigid-body-queue-method-13 () none) ;; 13 ;; (rigid-body-queue-method-13 (_type_ int rigid-body-object) none)
    (rigid-body-queue-method-14 () none) ;; 14 ;; (rigid-body-queue-method-14 (_type_ int) none)
    (rigid-body-queue-method-15 () none) ;; 15 ;; (rigid-body-queue-method-15 (_type_ rigid-body-object) none)
    (rigid-body-queue-method-16 () none) ;; 16 ;; (validate (_type_) symbol)
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load-dgo                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defenum load-msg-result
  :type uint16
  :bitfield #f
  (done 0)
  (error 1)
  (more 2)
  (aborted 3)
  (invalid 666)
  )

(deftype load-dgo-msg (structure)
  "IOP RPC message for loading a dgo."
  ((rsvd    uint16   :offset-assert 0)
   (result  load-msg-result   :offset-assert 2) ;;
   (b1      pointer  :offset-assert 4) ;; guessed by decompiler
   (b2      pointer  :offset-assert 8) ;; guessed by decompiler
   (bt      pointer  :offset-assert 12) ;; guessed by decompiler
   (name    uint128  :offset-assert 16)
   (address uint32   :offset 4)
   (id      uint128  :offset-assert 32)
   (pad     uint32 7) ;; ??
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype load-chunk-msg (structure)
  "IOP RPC message for loading a chunk of a chunked animation"
  ((rsvd     uint16                    :offset-assert 0)
   (result   load-msg-result           :offset-assert 2) ;;
   (address  pointer                   :offset-assert 4) ;; guessed by decompiler
   (section  uint32                    :offset-assert 8)
   (maxlen   uint32                    :offset-assert 12)
   (dummy    uint32            4       :offset-assert 16) ;; guessed by decompiler
   (basename sound-stream-name :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype play-chunk-msg (structure)
  "IOP RPC message for playing some streamed audio."
  ((rsvd     uint16              :offset-assert 0)
   (result   uint16              :offset-assert 2)
   (address  pointer             :offset-assert 4) ;; guessed by decompiler
   (section  uint32              :offset-assert 8)
   (volume   int32               :offset 8)
   (maxlen   uint32              :offset-assert 12)
   (group    uint8               :offset 12)
   (id       uint32            4 :offset-assert 16) ;; guessed by decompiler
   (basename sound-stream-name 4 :inline :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(define-extern *load-dgo-rpc* rpc-buffer-pair)
(define-extern *load-str-rpc* rpc-buffer-pair)
(define-extern *play-str-rpc* rpc-buffer-pair)
(define-extern *load-str-lock* symbol) ;;
(define-extern *que-str-lock* symbol) ;
(define-extern *dgo-name* string)
(define-extern str-load "Send a message to the IOP to start loading a chunk of a .STR file to the EE." (function string int pointer int symbol))
(define-extern str-load-status "Get the status of the most recent load.
                                Return 'busy if in progress, 'error if failed, or 'complete.
                                If 'complete, returns the maxlen value from the IOP." (function (pointer int32) symbol))
(define-extern str-load-cancel "Cancel a streaming load. Note that this does not actually stop the transfer, so the IOP may continue writing to the buffer."
               (function none))
(define-extern str-play-async  "Start playing a streaming audio." (function string sound-id int int none))
(define-extern str-play-stop "Stop playing streaming audio." (function string sound-id none))
(define-extern str-play-queue "Queue up streaming data, allowing it to start playing without delay." (function string string string string (pointer uint32) pointer none))
(define-extern str-ambient-play "Start playing ambient (unused?)." (function string none))
(define-extern str-ambient-stop "Stop playing ambient (unused?)." (function string none))
(define-extern str-play-kick "Do an empty RPC on play so the IOP code runs and can update buffers." (function none))
(define-extern *dgo-time* time-frame)
(define-extern dgo-load-begin "Start a DGO load!" (function string uint128 pointer pointer pointer load-dgo-msg))
(define-extern dgo-load-get-next "Get the address of the most recently loaded object. #f is there is none. Returns if this is the last by arg0." (function (pointer symbol) pointer))
(define-extern dgo-load-continue "Inform the IOP that it is safe to start loading the next object." (function pointer pointer pointer load-dgo-msg))
(define-extern dgo-load-cancel "Abort a DGO load." (function int none))
(define-extern find-temp-buffer "Unused function to find some temporary leftover space in DMA buffer.
                                 Unused since jak 1, and checks the same buffer twice??" (function int pointer))
(define-extern dgo-load-link "Start the async linker on a GOAL object file that was just loaded." (function dgo-header kheap uint symbol symbol symbol))
(define-extern destroy-mem "Overwrite memory with #xffffffff for debugging." (function (pointer uint32) (pointer uint32) none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ramdisk                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype ramdisk-rpc-fill (structure)
  "Unused RAMDISK rpc to load files from DVD to the IOP RAM."
  ((rsvd1    int32     :offset-assert 0)
   (ee-id    int32     :offset-assert 4)
   (rsvd2    int32   2 :offset-assert 8) ;; guessed by decompiler
   (filename uint128   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype ramdisk-rpc-load (structure)
  "Unused RAMDISK rpc to load files from DVD to the IOP RAM."
  ((rsvd   int32   :offset-assert 0)
   (ee-id  int32   :offset-assert 4)
   (offset uint32  :offset-assert 8)
   (length uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype ramdisk-rpc-load-to-ee (structure)
  "Unused RAMDISK rpc to load files from DVD to the IOP RAM."
  ((rsvd     int32    :offset-assert 0)
   (addr     int32    :offset-assert 4)
   (offset   int32    :offset-assert 8)
   (length   int32    :offset-assert 12)
   (filename uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern *ramdisk-rpc* rpc-buffer-pair)
(define-extern *current-ramdisk-id* int)
(define-extern ramdisk-load (function int uint uint pointer int))
(define-extern ramdisk-sync (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gsound                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype engine-sound-pers (engine-pers)
  ()
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  )

(deftype sound-iop-info (structure)
  ((frame           uint32               :offset-assert 0)
   (strpos          int32                :offset-assert 4)
   (str-id          uint32               :offset-assert 8)
   (str-id-sign     int32                :offset 8)
   (freemem         uint32               :offset-assert 12)
   (chinfo          uint8             48 :offset-assert 16) ;; guessed by decompiler
   (freemem2        uint32               :offset-assert 64)
   (nocd            uint32               :offset-assert 68)
   (dirtycd         uint32               :offset-assert 72)
   (diskspeed       uint32            2  :offset-assert 76) ;; guessed by decompiler
   (lastspeed       uint32               :offset-assert 84)
   (dupseg          int32                :offset-assert 88)
   (times           int32             41 :offset-assert 92) ;; guessed by decompiler
   (times-seq       uint32               :offset-assert 256)
   (iop-ticks       uint32               :offset-assert 260)
   (stream-position uint32            4  :offset 272) ;; guessed by decompiler
   ; (UNKNOWN         UNKNOWN              :offset-assert -1) ;; field could not be read.
   (stream-status   stream-status     4  :offset-assert 288) ;; guessed by decompiler
   ; (UNKNOWN         UNKNOWN              :offset-assert -1) ;; field could not be read.
   (stream-name     sound-stream-name 4 :inline  :offset-assert 304) ;; guessed by decompiler
   ; (UNKNOWN         UNKNOWN              :offset-assert -1) ;; field could not be read.
   (stream-id       sound-id          4  :offset-assert 496) ;; guessed by decompiler
   (stream-id-signed int32          4  :offset 496) ;; guessed by decompiler
   (music-register  uint8             17 :offset 512) ;; guessed by decompiler
   (music-excite    int8                 :offset 528)
   (ramdisk-name uint8 16  :offset-assert 529)
   (sound-bank0 uint8 16  :offset 592)
   (sound-bank1 uint8 16)
   (sound-bank2 uint8 16)
   (sound-bank3 uint8 16)
   (sound-bank4 uint8 16)
   (sound-bank5 uint8 16)
   (sound-bank6 uint8 16)
   (sound-bank7 uint8 16)
   )
  :method-count-assert 9
  :size-assert         #x2d0
  :flag-assert         #x9000002d0
  )

(define-extern *sound-loop-engine* engine-sound-pers)
(define-extern *sound-player-rpc* rpc-buffer-pair)
(define-extern *sound-loader-rpc* rpc-buffer-pair)
(define-extern sound-name= "Are two sound names the same?" (function sound-name sound-name symbol))
(define-extern *sound-iop-info* sound-iop-info)
(define-extern str-is-playing? "Is any streaming audio playing?" (function symbol))
(define-extern str-id-is-playing? "Is any streaming audio with the given ID playing?" (function sound-id symbol))
(define-extern current-str-pos "Get the current stream position of the given sound ID, or -1 if it is not playing." (function sound-id int))
(define-extern current-str-status "Get the status of the stream playing the given sound, or 0 if it is not playing." (function sound-id stream-status))
(define-extern is-ramdisk-loaded? "Check if the ramdisk-name is set to this (unused)." (function symbol symbol))
(define-extern is-cd-in? "Is the CD/DVD in the ps2?" (function symbol))
(define-extern new-sound-id "Allocate a new sound ID, used to identify a unique playback of a sound." (function sound-id))
(define-extern check-irx-version "Confirm OVERLORD version is correct and set up the sound-iop-info address so the OVERLORD can report back to the EE." (function int))
(define-extern sound-bank-iop-store "Send a iop-store RPC to loader with the given name" (function sound-name sound-id))
(define-extern sound-bank-iop-free "Send a iop-free RPC to loader with the given name" (function sound-name sound-id))
(define-extern sound-bank-load "Send RPC to load a sound bank." (function sound-name int int sound-id))
(define-extern sound-bank-load-from-iop "Send load-bank-from-iop rpc to loader" (function sound-name sound-id))
(define-extern sound-bank-load-from-ee "Send load-bank-from-ee rpc to loader" (function sound-name pointer sound-id))
(define-extern sound-bank-unload "Send unload-bank rpc to loader" (function sound-name int))
(define-extern sound-music-load "Send load-music rpc to loader" (function sound-name int))
(define-extern sound-music-unload "Send unload-music rpc to loader." (function int))
(define-extern set-language "Send set-language rpc to loader. Note this is only for sound, no game text is changed." (function language-enum int))
(define-extern sound-set-stereo-mode "Send set-stereo-mode rpc to loader." (function int none))
(define-extern list-sounds "Send list-sounds rpc to loader." (function none))
(define-extern sound-command->string "Convert sound-command enum to string." (function sound-command string))
(define-extern sound-buffer-dump "Print out all sound-commands in the buffer." (function int))
(define-extern *sound-player-enable* symbol)
(define-extern swap-sound-buffers "Per-frame update of sound system - update loop-engine, update ear trans, send player RPC, check for missing/dirty CD." (function vector vector vector vector vector float int))
(define-extern get-sound-buffer-entry "Allocate a new entry in the player RPC queue, to be flushed on the next frame." (function pointer))
(define-extern free-last-sound-buffer-entry "Remove the last thing added with get-sound-buffer-entry." (function none))
(define-extern sound-basic-cb "Unknown and unused callback." (function int (pointer int32) none))
(define-extern sound-trans-convert "Convert a GOAL translation (meters) to integer format for the IOP" (function (pointer int32) vector int))
(define-extern sound-unit-vector-convert "Convert a GOAL unit-vector (float) to integer format for the IOP" (function (pointer int32) vector none))
(define-extern sound-angle-convert "Convert a GOAL angle to integer format for the iop" (function float int))
(define-extern string->sound-name "Create a sound-name from a string" (function string sound-name))
(define-extern sound-name->string "Create a string from a sound-name. Returns pointer to a single shared static string." (function sound-name string))
(define-extern sound-set-volume  "Send set-master-volume rpc." (function sound-group float int))
(define-extern sound-set-reverb "Send set-reverb rpc" (function int float float uint int))
(define-extern sound-set-ear-trans "Send set-ear-trans rpc" (function vector vector vector vector vector float int))
(define-extern sound-play-by-name "Send play rpc to play a sound!" (function sound-name sound-id int int int sound-group object sound-id :behavior process-drawable)) ;
(define-extern sound-play-by-spec "Send play rpc to play a sound!" (function sound-spec sound-id vector sound-id :behavior process-drawable))
(define-extern sound-pause "Send pause-sound rpc to pause by id" (function sound-id int))
(define-extern sound-stop "Send stop-sound rpc to stop by id" (function sound-id int))
(define-extern sound-continue "Send continue-sound rpc to continue by id" (function sound-id int))
(define-extern sound-group-pause "Send pause-group rpc" (function sound-group int))
(define-extern sound-group-stop "Send stop-group rpc" (function sound-group int))
(define-extern sound-group-continue "Send continue-group rpc" (function sound-group int))
(define-extern sound-set-flava "Send set-flava rpc" (function uint uint int))
(define-extern sound-set-midi-reg "Send set-midi-reg rpc" (function int int int))
(define-extern sound-set-fps "Send set-fps rpc" (function int int))
(define-extern sound-volume-off "Adjust settings to turn all sound volume off" (function int))
(define-extern *ambient-spec* sound-spec)
(define-extern show-iop-info "Display iop info on screen." (function dma-buffer int))
(define-extern show-iop-memory "Display iop memory stats on screen" (function dma-buffer int))
(define-extern ear-trans "Get the current location of the ear. Use 1 for the settings ear-handle, or 0 for the camera." (function int vector))
(define-extern make-sqrt-table "Generate integer square-root table used in the IOP." (function none))
(define-extern loader-test-command "Send a command to loader by ID." (function sound-command uint none))
(define-extern doppler-pitch-shift "Compute pitch shift for the doppler effect. This is done assuming the listener is *target* and has *target*'s velocity." (function vector vector float))
(define-extern sound-bank-reload "Start a background process to unload all sound banks, then load them again." (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; transformq                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern transformq-copy! "Set arg0 = arg1." (function transformq transformq transformq))
(define-extern matrix<-transformq! "Convert to 4x4 affine transform." (function matrix transformq matrix))
(define-extern matrix<-no-trans-transformq! "Create 4x4 affine transform with no translation." (function matrix transformq matrix))
(define-extern matrix<-transformq+trans!
  "Convert to affine transform with an additional translation (in the local frame)."
  (function matrix transformq vector matrix))
(define-extern matrix<-transformq+world-trans!
  "Convert to affine transform with an additional translation in the world frame (not rotated)."
  (function matrix transformq vector matrix))
(define-extern matrix<-parented-transformq!
  "Unused. Seems like the parented thing means there's an inverse scale in arg2."
  (function matrix transformq vector matrix))
(define-extern matrix<-transformq+rot-offset!
  "Affine transform for a point offset in the destination frame of the transformq (rather than just
   adding an offset at the end)."
  (function matrix transformq vector matrix))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-func                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern raw-ray-sphere-intersect function)
(define-extern ray-sphere-intersect (function vector vector vector float float))
(define-extern ray-circle-intersect (function vector vector vector float float))
(define-extern ray-cylinder-intersect (function vector vector vector vector float float vector float))
(define-extern ray-plane-intersect (function vector vector vector vector vector vector vector float))
; (define-extern ray-triangle-intersect function)
; (define-extern collide-do-primitives function)
(define-extern moving-sphere-triangle-intersect (function vector vector float collide-cache-tri vector vector float))
; (define-extern moving-sphere-sphere-intersect function)
; (define-extern moving-sphere-moving-sphere-intersect function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype art-group (art)
  ((info    file-info            :offset-assert 0) ;; guessed by decompiler
   (length  int32                :offset-assert 8)
   (name    string               :offset-assert 4) ;; guessed by decompiler
   (extra   res-lump             :offset-assert 12) ;; guessed by decompiler
   (data    art-element :dynamic :offset-assert 28) ;; guessed by decompiler
   (UNKNOWN UNKNOWN              :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 16
  :size-assert         #x20
  :flag-assert         #x1000000020
  (:methods
    (art-group-method-14 () none) ;; 14 ;; (unlink-art! (_type_) int)
    (art-group-method-15 () none) ;; 15
    )
  )
|#

(define-extern joint-anim-login "Login a joint-anim-drawable by calling login on all drawables" (function joint-anim-drawable joint-anim-drawable))
(define-extern joint-anim-inspect-elt "Inspect an uncompressed anim (unused)" (function joint-anim float joint-anim))
(define-extern jacc-mem-usage "Compute memory usage stats for a compressed joint anim." (function joint-anim-compressed-control memory-usage-block int joint-anim-compressed-control))
(define-extern joint-control-cleanup "Remove all animations that are stored on the given heap and return those slots to a safe default." (function joint-control kheap art-joint-anim none))
(define-extern joint-control-channel-eval "Run the num-func to produce the current frame for this channel." (function joint-control-channel float :behavior process))
(define-extern joint-control-channel-eval! "Update the num-func for this channel and evaluate it." (function joint-control-channel (function joint-control-channel float float float float) float :behavior process))
(define-extern joint-control-channel-group-eval! (function joint-control-channel art-joint-anim (function joint-control-channel float float float float) int))
(define-extern joint-control-channel-group! (function joint-control-channel art-joint-anim (function joint-control-channel float float float float) int))
(define-extern joint-control-copy! "Copy all settings and channels from one joint-control to another." (function joint-control joint-control joint-control))
(define-extern joint-control-remap!
               "Map animation from parent to child using the given animation mapping.
                This is used to animate daxter based on the animation of jak."
               (function joint-control art-group art-group pair int string symbol))
(define-extern flatten-joint-control-to-spr "Walk the blend tree and compute interpolation weights, prepare animation upload info." (function joint-control int))
(define-extern matrix-from-joint-anim-frame "Get a matrix from a joint-animation at a given (integer) frame.
                                             This only works on the first two joints, since those are the only ones that store matrices."(function joint-anim-compressed-control int int matrix))
(define-extern matrix-from-control-channel! "Get a matrix for a joint (must be 0 or 1) for the animation specified by the channel.
                                            Will interpolate if we are in between animation frames.
                                            This does not apply any frame-interp blending." (function matrix joint joint-control-channel matrix))
(define-extern matrix-from-control-pair! "Modify the matrix to add in a blended animation for the given channel."
               (function matrix joint-control-channel joint int matrix))
(define-extern matrix-from-control!
               "Compute a matrix for a given joint (must be 0 or 1) given the entire joint-control.
                This walks the blend tree."
               (function matrix-stack joint joint-control symbol matrix))
(define-extern cspace<-cspace! "Set one cspace's bone from another" (function cspace cspace matrix))
(define-extern cspace<-cspace-normalized! "Set one cspace's bone from another, and normalize the rows of the matrix." (function cspace cspace matrix))
(define-extern cspace<-parent-joint! "Set one cspace's bone to another from the given process-drawable" (function cspace (pointer process-drawable) int matrix))
(define-extern cspace<-rot-yxy! "Set one cspace's bone to a yxy rotation and scale." (function cspace transform matrix))
(define-extern cspace<-transform-yxy! "Set one cspace's bone to yxy rotation, translation, and scale" (function cspace transform matrix))
(define-extern cspace<-transformq! "Set one cspace's from a transformq" (function cspace transformq matrix))
(define-extern cspace<-transformq+trans! "Set one cspace from a transformq and an additional local translation." (function cspace transformq vector matrix))
(define-extern cspace<-transformq+world-trans! "Set one cspace from a transformq and an additional world translation." (function cspace transformq vector matrix))
(define-extern cspace<-transformq+rot-offset! "Set one cspace from a transformq and an additional rotate." (function cspace transformq vector matrix))
(define-extern cspace-calc-total-matrix! "Combine the bone matrix and camera matrix.
                                          This is not actually a useful matrix since it does not include the inverse bind pose, but
                                          is close to the rendering matrices computed by bones.gc"
                                          (function cspace matrix matrix))
(define-extern cspace<-matrix-no-push-joint! "Compute animated matrix, using the special 'no-push mode." (function cspace joint-control matrix))
(define-extern cspace<-matrix-joint! "Set the cspace from a matrix." (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-joint!
                "Compute the bone matrix of a cspace from combining the transform of the parent bone and the given joint matrix.
                 This computes world-space bones from a tree of bones (skeleton)"
                (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-mirror!
               "Mirror the provided matrix (using cspace param1,2 as the normal/tangent dirs) as the joint matrix
                This is similar to cspace<-parented-matrix-joint!, but essentially mirrors the joint."
               (function cspace matrix matrix))
(define-extern cspace<-parented-matrix-joint-flip-z!
               "Compute the bone matrix from the parent bone and joint, but flip the z-axis of the joint frame."
               (function cspace matrix matrix))
(define-extern cspace<-matrix-joint-flip-z!
               "Set the bone matrix directly from the joint matrix, flipping z."
               (function cspace matrix none))
(define-extern cspace<-parented-transformq-joint!
               "Main function for doing skeletal animation from decompressed transformq's.
                Sets the cspace bone to the parent bone, plus the transformq."
               (function cspace transformq none))
(define-extern cspace<-parented-transformq-joint-flip-z! "Unused, but would flip the z-axis of the transformq and do a normal parented joint transform." (function cspace transformq none))
;; (define-extern clear-frame-accumulator function)
;; (define-extern normalize-frame-quaternions function)
;; (define-extern decompress-fixed-data-to-accumulator function) ;; function
;; (define-extern decompress-frame-data-to-accumulator function) ;; function
;; (define-extern decompress-frame-data-pair-to-accumulator function) ;; function
(define-extern make-joint-jump-tables (function int))
(define-extern calc-animation-from-spr (function joint-anim-frame int none))
(define-extern create-interpolated-joint-animation-frame (function joint-anim-frame int joint-control int))
(define-extern create-interpolated2-joint-animation-frame (function joint-anim-frame int joint-control int))
(define-extern *anim-manager* art-joint-anim-manager)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-mod                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern joint-mod-ik-callback "Inverse kinematics joint mod callback.
                                      Despite the arm-related names, can be used on legs too." (function cspace transformq none :behavior process))
(define-extern real-joint-mod-gun-look-at-handler "Joint mod callback for pointing the gun (implementation)." (function cspace transformq none :behavior process))
(define-extern joint-mod-gun-look-at-handler "Joint mod callback for pointing the gun (wrapper)." (function cspace transformq none :behavior process))
(define-extern joint-mod-foot-rot-handler "Joint mod callback to pitch the foot to match the ground." (function cspace transformq none :behavior process))
(define-extern last-try-to-look-at-data try-to-look-at-info)
(define-extern joint-mod-look-at-handler "Callback for look-at joint mod." (function cspace transformq none :behavior process))
(define-extern joint-mod-world-look-at-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-rotate-handler "Callback for rotate joint mod." (function cspace transformq none :behavior process))
(define-extern joint-mod-scale-handler "Callback for scale joint mod." (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set-handler "Callback for set joint mod." (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set-world-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set*-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-joint-set*-world-handler (function cspace transformq none :behavior process))
(define-extern joint-mod-polar-look-at-callback (function cspace transformq none :behavior process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind-work                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *wind-work* wind-work) ;; wind-work

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wind                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern update-wind "Update the wind force for this frame.
                            This value will be used by level-update-wind to update tie/shrub wind values." (function wind-work (array uint8) none))
(define-extern wind-get-hashed-index "Unused function, likely a leftover from Jak 1's different wind system." (function vector wind-work int))
;; (define-extern level-update-wind function) ;; (function wind-work none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bsp                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern mem-usage-bsp-tree "Recursively compute memory usage of bsp-tree." (function bsp-header bsp-node memory-usage-block int none))
(define-extern *test-shrub* int)
(define-extern bsp-camera-asm "Determine which 'bsp' leaf cell the camera is in, for precomputed vis.
                               The result is stored in the bsp itself." (function bsp-header vector none))
(define-extern print-collide-stats (function none))
(define-extern level-remap-texture "Level tpages combine the tpages of many individual actors.
                                    Given a texture ID for a texture in an individual actor,
                                    determine the texture ID for this texture in the level's
                                    combined page." (function texture-id texture-id))
(define-extern build-masks "Allocate and assign texture masks, and closest object arrays.
                            These are used at runtime to only upload the texture chunks and
                            mip levels that are actually needed." (function bsp-header none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; subdivide                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *merc-global-stats* merc-global-stats)
(define-extern clear-tr-stat "Reset all statistics to 0." (function tr-stat none))
(define-extern *stat-string-tfrag*  string)
(define-extern *stat-string-tfrag-scissor*  string)
(define-extern *stat-string-total*  string)
(define-extern print-tr-stat "Print a single tr-stat to the screen." (function tr-stat string string none))
(define-extern print-terrain-stats "Print all tr-stats for renderers to the screen." (function none))
(define-extern update-subdivide-settings! "Update the subdivide settings from the far/close settings
                                           This caches the settings in subdivide-settings itself,
                                           as well as in tfrag-work, used by EE tfrag code." (function subdivide-settings math-camera int none))
(define-extern *subdivide-settings*  subdivide-settings)
(define-extern set-tfrag-dists! "Update the subdivide settings used in tfrag VU1 code.
                                 This must be called after update-subdivide-settings!" (function tfrag-dists none))
(define-extern *terrain-context*  terrain-context)
(define-extern GSH_ENABLE symbol)
(define-extern GSH_BUCKET bucket-id)
(define-extern GSH_WHICH_STAT int)
(define-extern GSH_MAX_DISPLAY basic)
(define-extern GSH_TIME int)
(define-extern *perf-stats* perf-stat-array)
(define-extern *gomi-stats-hack* (inline-array perf-stat))
(define-extern start-perf-stat-collection "Start the per-frame performance stats.
                                           This automatically cycles through various stats/categories,
                                           collecting and aggregating the latest data.
                                           The `gomi-stats-hack` likely refers to how the stat being
                                           collected" (function none))
(define-extern end-perf-stat-collection "End the per-frame performance stats" (function none))
(define-extern print-perf-stats (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-header (structure)
  "Header for the data sent to VU1 renderer."
  ((header      qword 1 :inline :offset-assert 0) ;; guessed by decompiler
   (num-sprites int32   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-hvdf-data (structure)
  "Table of HVDF offsets. The first one is the normal one produced by math-camera.
   The remaining 75 can be allocated by the user.
   This is only used by Jak 1's weird HUD drawing system, to position HUD elements."
  ((data qword 76 :inline :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c0
  :flag-assert         #x9000004c0
  )

(deftype sprite-hvdf-control (structure)
  "Table of flags indicating if the HVDF control is allocated or not."
  ((alloc int8 76 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(defenum sprite-aux-type
  :bitfield #f
  :type uint32
  (distort 0)
  (glow 1)
  )

(deftype sprite-aux-elem (structure)
  "Entry for a sprite which should be drawn by a renderer other than the usual sprite."
  ((aux-type sprite-aux-type      :offset-assert 0) ;; guessed by decompiler
   (data     vector             3 :offset-assert 4 :score -1) ;; guessed by decompiler
   (vec-data sprite-vec-data-2d   :offset 4)
   (gif-data adgif-shader         :offset 8)
   (aux-data sparticle-cpuinfo    :offset 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sprite-aux-list (basic)
  "List of sprites that can't be drawn by the normal sprite renderer.
   The glow and distort renderers will pull sprites from here."
  ((num-entries int32    :offset-assert 4)
   (entry       int32    :offset-assert 8)
   (data        sprite-aux-elem :dynamic :inline :offset-assert 12)
   )
  (:methods
    (new (symbol type int) _type_)
    )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sprite-frame-data (structure)
  "Data sent to VU1 which is constant over a frame, like giftag templates, camera/fog constants..."
  (;;(data               UNKNOWN      42      :offset-assert 0)
   (cdata              vector       16 :inline  :offset-assert 0) ;; guessed by decompiler
   ;(fdata              UNKNOWN      26      :offset-assert 256)
   (xy-array           vector       8  :inline     :offset 0) ;; guessed by decompiler
   (st-array           vector       4  :inline     :offset 128) ;; guessed by decompiler
   (xyz-array          vector       4  :inline     :offset 192) ;; guessed by decompiler
   (hmge-scale         vector       :inline :offset 256)
   (consts             vector       :inline :offset 272)
   (pfog0              float                :offset 272)
   (deg-to-rad         float                :offset 276)
   (min-scale          float                :offset 280)
   (inv-area           float                :offset 284)
   (adgif-giftag       gs-gif-tag        :inline :offset-assert 288) ;; gs-gif-tag :inline
   (sprite-2d-giftag   gs-gif-tag        :inline :offset-assert 304) ;; gs-gif-tag :inline
   (sprite-2d-giftag-2 gs-gif-tag        :inline :offset-assert 320) ;; gs-gif-tag :inline
   (sincos-01          vector       :inline :offset-assert 336)
   (sincos-23          vector       :inline :offset-assert 352)
   (sincos-45          vector       :inline :offset-assert 368)
   (sincos-67          vector       :inline :offset-assert 384)
   (sincos-89          vector       :inline :offset-assert 400)
   (basis-x            vector       :inline :offset-assert 416)
   (basis-y            vector       :inline :offset-assert 432)
   (sprite-3d-giftag   gs-gif-tag        :inline :offset-assert 448) ;; gs-gif-tag :inline
   (sprite-3d-giftag-2 gs-gif-tag        :inline :offset-assert 464) ;; gs-gif-tag :inline
   (screen-shader      adgif-shader :inline :offset-assert 480)
   (inv-hmge-scale     vector       :inline :offset 576)
   (stq-offset         vector       :inline :offset-assert 592)
   (stq-scale          vector       :inline :offset-assert 608)
   (rgba-plain         qword        :inline :offset-assert 624)
   (warp-giftag        gs-gif-tag        :inline :offset-assert 640) ;; gs-gif-tag :inline
   (fog-clamp          vector       :inline :offset-assert 656)
   (fog-min            float                :offset 656 :score 1)
   (fog-max            float                :offset 660 :score 1)
   (max-scale          float                :offset 664 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x2a0
  :flag-assert         #x9000002a0
  )

(define-extern sprite-setup-header
               "Initialize VU1 data header with number of sprites."
               (function sprite-header int none))
(define-extern clear-sprite-aux-list
               "Reset all pending sprites in the aux-list."
               (function none))
(define-extern add-to-sprite-aux-list (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none))
(define-extern sprite-setup-frame-data (function sprite-frame-data uint none))
(define-extern sprite-vu1-block vu-function)
(define-extern sprite-set-3d-quaternion!
               "Set the quaternion of the vec-data."
               (function sprite-vec-data-3d quaternion quaternion))
(define-extern sprite-get-3d-quaternion!
               "Get the quaternion from the vec data."
               (function quaternion sprite-vec-data-3d quaternion))
(define-extern sprite-add-matrix-data
               "Set up matrix data DMA to VU1.
                This changes per sprite mode, but remains constant for all sprites in that mode."
               (function dma-buffer uint none))
(define-extern sprite-add-frame-data
               "Set up frame data DMA to VU1."
               (function dma-buffer uint none))
(define-extern sprite-add-2d-chunk
               "Set up DMA for a single chunk of 2D sprites."
               (function sprite-array-2d int int dma-buffer int none))
(define-extern sprite-add-2d-all
               "Generate DMA for all chunks."
               (function sprite-array-2d dma-buffer int none))
(define-extern sprite-add-3d-chunk
               "Generate DMA for a single chunk of 3D sprites."
               (function sprite-array-3d int int dma-buffer none))
(define-extern sprite-add-3d-all
               "Generate DMA for all chunks of 3D sprites."
               (function sprite-array-3d dma-buffer int none))
(define-extern sprite-draw
               "Top-level sprite DMA generation function.
                Takes the sprites from sparticle, and draws them with
                normal sprite, sprite-distort, sprite-glow, and simple-sprite-system"
               (function display none))
(define-extern sprite-allocate-user-hvdf
               "Allocate an HVDF entry. Returns the index in the hvdf-data array."
               (function int))
(define-extern sprite-release-user-hvdf
               "Free an HVDF entry."
               (function int none))
(define-extern sprite-get-user-hvdf
               "Get the HVDF vector."
               (function int vector))
(define-extern *sprite-hvdf-data* sprite-hvdf-data)
(define-extern *sprite-hvdf-control* sprite-hvdf-control)
(define-extern *sprite-aux-list* sprite-aux-list)
(define-extern *sprite-array-2d* sprite-array-2d)
(define-extern *sprite-array-3d* sprite-array-3d)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-distort                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-distorter-sine-tables (basic)
  "Table of precomputed sine data for the sprite distorter renderer."
  ((aspx   float          :offset-assert 4)
   (aspy   float          :offset-assert 8)
   (entry  vector 128 :inline    :offset-assert 16) ;; guessed by decompiler
   (ientry qword  9   :inline    :offset-assert 2064) ;; guessed by decompiler
   (giftag gs-gif-tag  :inline :offset-assert 2208) ;; :inline
   (color  qword  :inline :offset-assert 2224)
   )
  :method-count-assert 9
  :size-assert         #x8c0
  :flag-assert         #x9000008c0
  )

(define-extern *sprite-distorter-sine-tables* sprite-distorter-sine-tables)
(define-extern sprite-distorter-generate-tables "Regenerate the sprite-distorter-sine-tables for the current camera settings." (function none))
(define-extern sprite-distort-vu1-block vu-function)
(define-extern sprite-init-distorter "Generate DMA to initialize the distort renderer." (function dma-buffer none))
(define-extern sprite-draw-distorters "Generate DMA to draw all distort sprites." (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sprite-glow                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype sprite-glow-template (structure)
  "Sprite glow GS data templates sent to VU1."
  ((clear-init-giftag   gs-gif-tag     :inline :offset-assert 0)
   (clear-init-adcmds   gs-adcmd       5 :inline       :offset-assert 16) ;; guessed by decompiler
   (clear-draw-giftag   gs-gif-tag     :inline :offset-assert 96)
   (clear-draw-clr-0    gs-packed-rgba :inline :offset-assert 112)
   (clear-draw-xyz-0    gs-packed-xyzw 2 :inline       :offset-assert 128) ;; guessed by decompiler
   (clear-draw-clr-1    gs-packed-rgba :inline :offset-assert 160)
   (clear-draw-xyz-1    vector         2 :inline       :offset-assert 176) ;; guessed by decompiler
   (offscr-setup-giftag gs-gif-tag     :inline :offset-assert 208)
   (offscr-setup-adcmds gs-adcmd       8 :inline       :offset-assert 224) ;; guessed by decompiler
   (offscr-first-giftag gs-gif-tag     :inline :offset-assert 352)
   (offscr-first-clr    gs-packed-rgba :inline :offset-assert 368)
   (offscr-first-uv-0   gs-packed-uv   :inline :offset-assert 384)
   (offscr-first-xyzw-0 gs-packed-xyzw :inline :offset-assert 400)
   (offscr-first-uv-1   gs-packed-uv   :inline :offset-assert 416)
   (offscr-first-xyzw-1 gs-packed-xyzw :inline :offset-assert 432)
   (repeat-draw-giftag  gs-gif-tag     :inline :offset-assert 448)
   (repeat-draw-adcmds  gs-adcmd       29 :inline      :offset-assert 464) ;; guessed by decompiler
   (flare-alpha-giftag  gs-gif-tag     :inline :offset-assert 928)
   (flare-alpha-clr     gs-packed-rgba :inline :offset-assert 944)
   (flare-alpha-uv      gs-packed-uv   :inline :offset-assert 960)
   (flare-alpha-xyzw-0  gs-packed-xyzw :inline :offset-assert 976)
   (flare-alpha-xyzw-1  gs-packed-xyzw :inline :offset-assert 992)
   (flare-alpha-xyzw-2  gs-packed-xyzw :inline :offset-assert 1008)
   (flare-alpha-xyzw-3  gs-packed-xyzw :inline :offset-assert 1024)
   (flare-init-giftag   gs-gif-tag     :inline :offset-assert 1040)
   (flare-init-adcmds   gs-adcmd       8 :inline       :offset-assert 1056) ;; guessed by decompiler
   (flare-draw-giftag   gs-gif-tag     :inline :offset-assert 1184)
   (flare-draw-clr      gs-packed-rgba :inline :offset-assert 1200)
   (flare-draw-stq-0    gs-packed-stq  :inline :offset-assert 1216)
   (flare-draw-xyzw-0   gs-packed-xyzw :inline :offset-assert 1232)
   (flare-draw-stq-1    gs-packed-stq  :inline :offset-assert 1248)
   (flare-draw-xyzw-1   gs-packed-xyzw :inline :offset-assert 1264)
   (flare-draw-stq-2    gs-packed-stq  :inline :offset-assert 1280)
   (flare-draw-xyzw-2   gs-packed-xyzw :inline :offset-assert 1296)
   (flare-draw-stq-3    gs-packed-stq  :inline :offset-assert 1312)
   (flare-draw-xyzw-3   gs-packed-xyzw :inline :offset-assert 1328)
   )
  :method-count-assert 9
  :size-assert         #x540
  :flag-assert         #x900000540
  )

(deftype sprite-glow-consts (structure)
  "Per-frame constants for sprite-glow VU1."
  ((camera      matrix :inline :offset-assert 0)
   (perspective matrix :inline :offset-assert 64)
   (hvdf-offset vector :inline :offset-assert 128)
   (hmge-scale  vector :inline :offset-assert 144)
   (consts      vector :inline :offset-assert 160)
   (pfog0       float          :offset 160)
   (deg-to-rad  float          :offset 164)
   (min-scale   float          :offset 168)
   (inv-area    float          :offset 172)
   (sincos-01   vector :inline :offset-assert 176)
   (sincos-23   vector :inline :offset-assert 192)
   (sincos-45   vector :inline :offset-assert 208)
   (sincos-67   vector :inline :offset-assert 224)
   (sincos-89   vector :inline :offset-assert 240)
   (basis-x     vector :inline :offset-assert 256)
   (basis-y     vector :inline :offset-assert 272)
   (xy-array    vector 4 :inline      :offset-assert 288) ;; guessed by decompiler
   (clamp-min   vector :inline :offset-assert 352)
   (clamp-max   vector :inline :offset-assert 368)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

(deftype sprite-glow-dma-packet-data (structure)
  "DMA templates for generating DMA to VU1."
  ((control-packet    dma-packet :inline :offset-assert 0)
   (vecdata-packet    dma-packet :inline :offset-assert 16)
   (shader-cnt-packet dma-packet :inline :offset-assert 32)
   (shader-ref-packet dma-packet :inline :offset-assert 48)
   (mscal-packet      dma-packet :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sprite-glow-cnt-template (structure)
  "DMA layout for sending a sprite to VU1, with inline shader."
  ((control-packet dma-packet       :inline :offset-assert 0)
   (num-sprites    uint32                   :offset-assert 16)
   (dummys         uint32           3       :offset-assert 20) ;; guessed by decompiler
   (vecdata-packet dma-packet       :inline :offset-assert 32)
   (vecdata        sprite-glow-data :inline :offset-assert 48)
   (shader-packet  dma-packet       :inline :offset-assert 112)
   (shader         adgif-shader     :inline :offset-assert 128)
   (mscal-packet   dma-packet       :inline :offset-assert 208)
   (quads          vector 10 :inline :offset 0 :score -1)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

(deftype sprite-glow-ref-template (structure)
  "DMA layout for sending a sprite to VU1, with reference to shader."
  ((control-packet dma-packet       :inline :offset-assert 0)
   (num-sprites    uint32                   :offset-assert 16)
   (dummys         uint32           3       :offset-assert 20) ;; guessed by decompiler
   (num-sprites-quad uint128                :offset 16)
   (vecdata-packet dma-packet       :inline :offset-assert 32)
   (vecdata        sprite-glow-data :inline :offset-assert 48)
   (shader-packet  dma-packet       :inline :offset-assert 112)
   (shader-packet-ptr pointer               :offset 116) ;; pointer to adgif shader to upload.
   (mscal-packet   dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

(define-extern *sprite-glow-template* sprite-glow-template)
(define-extern sprite-glow-vu1-block vu-function)
(define-extern sprite-glow-init-consts "Fill out sprite-glow-consts to be sent to VU1." (function sprite-glow-consts none))
(define-extern sprite-glow-init-engine "Generate DMA to initialize sprite-glow VU1." (function dma-buffer none))
(define-extern *sprite-glow-dma-packet-data* sprite-glow-dma-packet-data)
(define-extern sprite-glow-add-sprite "Generate DMA to draw a single sprite from the aux-list." (function dma-buffer sprite-vec-data-2d float float float adgif-shader none))
(define-extern sprite-glow-add-simple-sprite "Generate DMA to draw a single sprite from the simple sprite system." (function dma-buffer sprite-glow-dma-packet-data sprite-glow-data pointer none))
(define-extern sprite-glow-draw "Generate DMA for all glow sprites in the aux-list (from sparticle system)" (function dma-buffer none))
(define-extern add-shader-to-dma (function dma-buffer adgif-shader))
(define-extern *simple-sprite-system* simple-sprite-system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-sphere                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern make-debug-sphere-table "Create a table of lines on a sphere." (function vector-array float float vector-array))
(define-extern *debug-sphere-table* (array vector-array))
(define-extern add-debug-sphere-from-table "Draw a sphere out of debug lines, using the precomputed table of lines." (function bucket-id vector meters rgba int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype debug-line (structure)
  ((flags  int32          :offset-assert 0)
   (bucket bucket-id      :offset-assert 4) ;;
   (v1     vector :inline :offset-assert 16)
   (v2     vector :inline :offset-assert 32)
   (color  rgba           :offset-assert 48) ;; guessed by decompiler
   (mode   symbol         :offset-assert 52) ;; guessed by decompiler
   (color2 rgba           :offset-assert 56) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype debug-text-3d (structure)
  ((flags  int32              :offset-assert 0)
   (bucket bucket-id          :offset-assert 4) ;;
   (pos    vector     :inline :offset-assert 16)
   (color  font-color         :offset-assert 32) ;; guessed by decompiler
   (offset vector2h   :inline :offset-assert 36)
   (str    string             :offset-assert 40) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype debug-tracking-thang (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; debug-vertex-stats is already defined!

(define-extern transform-float-point
               "Transform a point, using the cached matrix in VU0 registers, set from init-for-transform.
                The argument order is backward - be careful!
                After transformation, point is constrained to be within some region, but this is not proper clipping,
                so you should do this yourself."
               (function vector vector4w vector4w))
(define-extern add-debug-point "Draw a point." (function symbol bucket-id vector symbol))
(define-extern debug-line-clip? (function vector vector vector vector symbol))
(define-extern internal-draw-debug-line "Implementation of line drawing DMA." (function bucket-id vector vector rgba symbol rgba symbol))
(define-extern internal-draw-debug-text-3d "Implementation of 3D text drawing." (function bucket-id string vector font-color vector2h pointer))
(define-extern add-debug-outline-triangle "Draw a wireframe triangle." (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-triangle-normal "Draw the normal of a triangle." (function symbol bucket-id vector vector vector rgba symbol))
(define-extern add-debug-flat-triangle "Draw a shaded triangle." (function symbol bucket-id vector vector vector rgba symbol))
(define-extern *debug-lines* (inline-array debug-line))
(define-extern *debug-lines-trk* debug-tracking-thang)
(define-extern *debug-text-3ds* (inline-array debug-text-3d))
(define-extern *debug-text-3d-trk* debug-tracking-thang)
(define-extern get-debug-line "Allocate a record for a debug line.
                              This is used to persist debug drawing for paused objects."
                              (function debug-line))
(define-extern get-debug-text-3d "Allocate a record for a debug 3d text.
                              This is used to persist debug drawing for paused objects." (function debug-text-3d))
(define-extern debug-reset-buffers
               "Reset buffered debug drawing."
               (function symbol))
(define-extern debug-draw-buffers
               "Draw all buffered debug drawing."
               (function symbol))
(define-extern add-debug-line
               "Draw a line."
               (function symbol bucket-id vector vector rgba symbol rgba symbol))
(define-extern add-debug-line2d
               "Draw a screen-space line."
               (function symbol bucket-id vector4w vector4w vector4w symbol))
(define-extern add-debug-box
               "Draw an axis-aligned box."
               (function symbol bucket-id vector vector rgba symbol))
(define-extern add-debug-box-with-transform
               "Draw a box with arbitrary transform."
               (function symbol bucket-id bounding-box matrix rgba symbol))
(define-extern add-debug-x "Draw an X." (function symbol bucket-id vector rgba symbol))
(define-extern add-debug-cross "Draw a cross." (function symbol bucket-id vector float symbol))
(define-extern add-debug-text-3d "Draw debug text." (function symbol bucket-id string vector font-color vector2h symbol))
(define-extern add-debug-sphere-with-transform "Draw a debug sphere, applying a transform to the given point first." (function symbol bucket-id vector meters matrix rgba symbol))
(define-extern add-debug-sphere "Draw a debug sphere." (function symbol bucket-id vector meters rgba symbol))
(define-extern add-debug-text-sphere "Draw a debug sphere with a text label." (function symbol bucket-id vector meters string rgba symbol))
(define-extern add-debug-spheres "Draw from an array of spheres. The radius is stored in w." (function symbol bucket-id (inline-array vector) int rgba symbol))
(define-extern add-debug-line-sphere "Draw a capsule as a cylinder." (function symbol bucket-id vector vector float rgba none))
(define-extern add-debug-circle "Draw a circle." (function symbol bucket-id vector float rgba matrix symbol))
(define-extern add-debug-vector "Draw a vector." (function symbol bucket-id vector vector meters rgba symbol))
(define-extern add-debug-matrix "Draw a matrix as a coordinate frame." (function symbol bucket-id matrix meters matrix))
(define-extern add-debug-rot-matrix "Draw a matrix as a coordinate frame, but use the given origin instead of the trans from the matrix." (function symbol bucket-id matrix vector matrix))
(define-extern add-debug-quaternion "Draw a quaternion as a coordinate frame." (function symbol bucket-id vector quaternion none))
(define-extern add-debug-cspace "Draw a cspace as a matrix." (function symbol bucket-id cspace cspace))
(define-extern add-debug-yrot-vector (function symbol bucket-id vector float float rgba symbol))
(define-extern add-debug-arc (function symbol bucket-id vector float float float rgba matrix symbol))
(define-extern add-debug-curve (function symbol bucket-id (inline-array vector) int (pointer float) int rgba symbol))
(define-extern add-debug-curve2 (function symbol bucket-id curve rgba symbol symbol))
(define-extern add-debug-points (function symbol bucket-id (inline-array vector) int rgba float int symbol))
(define-extern debug-percent-bar (function symbol bucket-id int int float rgba int int symbol))
(define-extern debug-pad-display (function cpad-info symbol))
(define-extern add-debug-light (function symbol bucket-id light vector string symbol))
(define-extern add-debug-lights (function symbol bucket-id (inline-array light) vector symbol))
(define-extern drawable-frag-count (function drawable int))

(define-extern drawable-tri-count (function drawable int)) ;; NOTE - defined in kernel?
(define-extern drawable-vertex-ratio (function drawable debug-vertex-stats int)) ;; NOTE - defined in kernel?

(define-extern history-init (function pos-history int pos-history))
(define-extern history-draw-and-update (function pos-history symbol vector symbol))
(define-extern dma-timeout-cam (function vector))
(define-extern display-file-info (function int))
(define-extern add-debug-cursor (function symbol bucket-id int int mouse-buttons int))
(define-extern *boundary-polygon* (inline-array sky-vertex))
(define-extern init-boundary-regs (function none))
(define-extern add-boundary-shader (function texture-id dma-buffer none))
;; (define-extern draw-boundary-polygon function)
;; (define-extern render-boundary-quad function)
(define-extern render-boundary-tri (function sky-vertex dma-buffer none))
(define-extern add-debug-bound-internal (function dma-buffer (inline-array vector) int rgba rgba int none))
(define-extern add-debug-bound (function bucket-id (inline-array vector) int rgba rgba int none))
;; (define-extern cpu-delay function) ;; (function int none)
(define-extern qword-read-time (function (array uint128) int int))
(define-extern bugfix? (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; history                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++history:history-channel
(defenum history-channel
  :type uint8
  (trans 0)
  (transv 1)
  (transv-in 2)
  (transv-out 3)
  (intersect 4)
  (local-normal 5)
  (surface-normal 6)
  (collide-status 7)
  (pat 8)
  (time 9)
  (friction 10)
  )
;; ---history:history-channel

(deftype history-elt (structure)
  ((record-tag-bytes      uint8       4       :offset-assert 0) ;; guessed by decompiler
   (record-tag            uint32              :offset 0)
   (record-id             uint16              :offset 0)
   (owner                 uint8               :offset 2)
   (channel               history-channel     :offset 4) ;; history-channel
   (timestamp             time-frame          :offset-assert 8) ;; time-frame
   (origin                vector      :inline :offset-assert 16)
   (bytes                 uint8       16      :offset-assert 32) ;; guessed by decompiler
   (vector                vector      :inline :offset 32 :score 1)
   (float                 float               :offset 32)
   (collide-status        collide-status      :offset 32) ;; collide-status
   (collide-reaction-flag uint32              :offset 40)
   (pat                   pat-surface         :offset 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype history-iterator (basic)
  ((max-age      uint32   :offset-assert 4)
   (owner        uint8    :offset-assert 8)
   (proc         process  :offset-assert 12) ;; guessed by decompiler
   (out          object   :offset-assert 16) ;; guessed by decompiler
   (channel-mask uint64   :offset-assert 24)
   (index        int32    :offset-assert 32)
   (done?        symbol   :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  ;; field out uses ~A with a signed load.
  (:methods
    (new (symbol type uint) _type_) ;; 0
    (frame-counter-delta (_type_ history-elt) time-frame) ;; 9
    (update-entries! (_type_) history-elt) ;; 10
    (get-age (_type_ history-elt) float) ;; 11
    )
  )

(deftype history (basic)
  ((alloc-index      int32                :offset-assert 4)
   (allocated-length int32                :offset-assert 8)
   (elts             history-elt :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (new (symbol type int) _type_) ;; 0
    (clear-record-tags! (_type_ history-channel uint uint) history-elt) ;; 9
    (clear-history-entries! (_type_) none) ;; 10
    )
  )

(define-extern history-channel->string (function history-channel string))
(define-extern *history* history)
(define-extern history-print (function history-iterator none))
(define-extern history-draw (function history-iterator none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-vu1                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern merc-vu1-block vu-function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emerc-vu1                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern emerc-vu1-block vu-function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-blend-shape               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert 0)
   (vtx-count uint32                   :offset-assert 16)
   (overlap   uint32                   :offset-assert 20)
   (lump-dest uint32                   :offset-assert 24)
   (lump-qwc  uint32                   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype blerc-block (structure)
  ((output uint8              848     :offset-assert 0) ;; guessed by decompiler
   (header blerc-block-header :inline :offset-assert 848)
   )
  :method-count-assert 9
  :size-assert         #x370
  :flag-assert         #x900000370
  )
|#

#|
(deftype blerc-dcache (structure)
  ((repl-mult vector 40 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )
|#

#|
(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert 0)
   (next             uint32  :offset-assert 4)
   (min-val          int16   :offset-assert 8)
   (max-val          int16   :offset-assert 10)
   (fragment-count   int32   :offset-assert 12)
   (vtx-count        int32   :offset-assert 16)
   (target-vtx-count int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype blerc-context (structure)
  ((block-a blerc-block :inline :offset-assert 0)
   (dummy   uint8       7312    :offset-assert 880) ;; guessed by decompiler
   (block-b blerc-block :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x2370
  :flag-assert         #x900002370
  )
|#

;; (define-extern *stats-blerc* object) ;; symbol
;; (define-extern *blerc-globals* object) ;; blerc-globals
;; (define-extern blerc-stats-init function) ;; (function none)
;; (define-extern blerc-init function) ;; (function none)
;; (define-extern blerc-a-fragment function)
;; (define-extern dma-from-spr function)
;; (define-extern merc-dma-chain-to-spr function)
;; (define-extern blerc-execute function) ;; (function none)
(define-extern merc-blend-shape (function process-drawable object))
;; (define-extern setup-blerc-chains-for-one-fragment function) ;; (function object object object object object object object)
;; (define-extern setup-blerc-chains function) ;; (function merc-ctrl (pointer int16) dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; merc-fragment-control is already defined!

;; merc-ctrl is already defined!

(define-extern *texture-login-data* texture-login-data)
(define-extern texture-usage-init (function merc-ctrl symbol))
(define-extern texture-usage-update (function texture symbol))
(define-extern merc-stats-display (function merc-ctrl none))
(define-extern merc-stats (function none))
(define-extern merc-edge-stats (function none))
(define-extern merc-vu1-add-vu-function (function dma-packet vu-function int dma-gif-packet))
(define-extern merc-vu1-initialize-chain (function dma-gif-packet int dma-packet))
(define-extern merc-vu1-init-buffer (function bucket-id int symbol int))
(define-extern merc-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emerc                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern emerc-vu1-initialize-chain (function dma-gif-packet dma-packet))
(define-extern emerc-vu1-init-buffer (function bucket-id gs-test int none))
(define-extern emerc-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ripple                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ripple-request (structure)
  ((waveform ripple-wave  :offset-assert 0) ;; guessed by decompiler
   (effect   merc-effect  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype ripple-globals (structure)
  ((count    int32             :offset-assert 0)
   (requests ripple-request 16 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )
|#

;; (define-extern *ripple-globals* object) ;; ripple-globals
(define-extern ripple-make-request (function ripple-wave merc-effect none))
;; (define-extern ripple-update-waveform-offs function) ;; (function ripple-wave-set clock none)
;; (define-extern ripple-execute-init function) ;; (function none)
;; (define-extern ripple-create-wave-table function) ;; (function ripple-wave-set int)
;; (define-extern ripple-apply-wave-table function) ;; (function merc-effect symbol)
;; (define-extern ripple-execute function) ;; (function none)
;; (define-extern ripple-matrix-scale function) ;; function
;; (define-extern ripple-add-debug-sphere function) ;; (function process-drawable vector float float none)
;; (define-extern ripple-slow-add-sine-waves function) ;; (function ripple-wave-set float float float)
;; (define-extern ripple-find-height function) ;; (function process-drawable int vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bones                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *bone-calculation-list* bone-calculation-list)
(define-extern bone-list-init "Initialize the linked list of bone-calculations." (function none))
(define-extern bones-vu0-block vu-function)
(define-extern bones-set-sqwc "Set the SQWC register for bones joint DMA." (function none))
(define-extern bones-reset-sqwc "Reset the SQWC register for normal DMA." (function none))
(define-extern bones-init "Initialize scratchpad for bones." (function dma-buffer none))
(define-extern bones-mtx-calc (function (inline-array pris-mtx) (inline-array joint) (inline-array bone) uint object none))
(define-extern bones-mtx-calc-execute "Compute skinning matrices" (function none))
(define-extern dump-qword "Print out a qword to stdout." (function qword none))
(define-extern dump-mem "Print memory to stdout as hex and float." (function pointer int none))
(define-extern bones-debug "Empty." (function none))
(define-extern dump-bone-mem "Dump scratchpad memory for joints, bones, and output." (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-foreground               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern diag-frag-print (function merc-effect int none))
;; (define-extern debug-merc-highres-runtime function)
;; (define-extern debug-merc-size-runtime function)
;; (define-extern debug-merc-fade-runtime function)
;; (define-extern foreground-check-longest-edge function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; foreground                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++foreground:merc-mode
(defenum merc-mode
  :type int32
  (merc 0)
  (emerc 1)
  (mercneric 2)
  (texture 3)
  (mercneric2 4)
  (mm5 5)
  )
;; ---foreground:merc-mode

(define-extern foreground-vu0-block vu-function)
(define-extern *bucket-map* (pointer bucket-id-16))
(define-extern vu1-bucket-map "Map from level, texture, mode to bucket-id." (function int int merc-mode bucket-id))
(define-extern generic-bucket-state-init "Initialize generic-bucket-state for the first thing to draw in the bucket." (function generic-bucket-state none))
(define-extern mercneric-chain-init "Initialize mercneric-chain" (function mercneric-chain bucket-id none))
(define-extern foreground-init "Initialize scratchpad and VU0 for foreground. Start foreground DMA chains." (function none))
(define-extern texscroll-make-request "Set up a texscroll, which will adjust texture coordinates of the given merc-effect during the next texscroll-execute." (function merc-effect none))
(define-extern texscroll-execute "Run pending texscroll requests." (function none))
(define-extern vu-lights<-light-group! "Convert light-group format lights to vu-lights for the renderers." (function vu-lights light-group none)) ;;
(define-extern foreground-add-mtx-calc "Request skinning matrix calculation." (function bone-calculation (inline-array pris-mtx) bone-calc-flags bone-calculation))
(define-extern foreground-wrapup "Finish foreground DMA chains." (function none))
(define-extern *default-shadow-settings* shadow-settings)
(define-extern foreground-shadow "Generate DMA for shadow drawing." (function draw-control (inline-array pris-mtx) pointer pointer))
(define-extern foreground-generic-merc-death "Stash death effect values in the merc-fragment so generic merc can run the death effect." (function draw-control generic-merc-ctrl none))
(define-extern foreground-generic-merc-add-fragments "Add merc fragments to a generic merc chain." (function merc-effect pointer mercneric-chain pointer))
(define-extern foreground-generic-merc (function draw-control pointer int pointer))
(define-extern foreground-merc (function draw-control (inline-array pris-mtx) pointer int int object pointer))
(define-extern foreground-emerc  (function draw-control (inline-array pris-mtx) pointer object int int pointer))
(define-extern foreground-check-longest-edge-asm (function draw-control float symbol))
(define-extern foreground-ripple (function draw-control merc-ctrl pointer int pointer))
(define-extern foreground-draw (function draw-control dma-buffer float none))
;; (define-extern foreground-draw-hud function) ;; (function draw-control dma-buffer float none)
(define-extern *foreground* foreground-globals)
(define-extern *foreground-draw-engine* engine)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu0                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern generic-vu0-block vu-function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-vu1                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern generic-vu1-block vu-function)
(define-extern generic-setup-constants (function generic-constants none))
(define-extern generic-add-constants (function dma-buffer none))
(define-extern generic-setup-shrub-constants (function generic-shrub-constants int int int none))
(define-extern generic-add-shrub-constants (function dma-buffer int int int none))
(define-extern generic-init-buf (function dma-buffer gs-zbuf none))
(define-extern generic-vu1-init-buf (function bucket-id gs-zbuf none))
(define-extern generic-vu1-init-buf-special (function bucket-id gs-zbuf none))
(define-extern generic-vu1-init-buffers (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-effect                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *target-lock* object) ;; object
;; (define-extern *generic-consts* object) ;; generic-consts
;; (define-extern generic-work-init function) ;; (function generic-bucket-state none)
;; (define-extern generic-upload-vu0 function) ;; (function none)
;; (define-extern upload-vu0-program function) ;; (function vu-function pointer none)
;; (define-extern generic-initialize-without-sync function) ;; (function matrix vu-lights none)
;; (define-extern generic-initialize function) ;; (function generic-bucket-state matrix vu-lights none)
;; (define-extern generic-wrapup function) ;; (function generic-bucket-state none)
;; (define-extern generic-dma-from-spr function)
;; (define-extern generic-light-proc function)
;; (define-extern generic-envmap-proc function)
;; (define-extern generic-prepare-dma-double function)
;; (define-extern generic-prepare-dma-single function)
;; (define-extern generic-envmap-dproc function)
;; (define-extern generic-interp-dproc function)
;; (define-extern generic-no-light-proc function)
;; (define-extern generic-no-light-dproc-only function)
;; (define-extern generic-no-light-dproc function)
;; (define-extern generic-no-light+envmap function)
;; (define-extern generic-no-light function)
;; (define-extern generic-envmap-only-proc function)
;; (define-extern generic-light function)
;; (define-extern generic-copy-vtx-dclr-dtex function)
;; (define-extern generic-none function)
;; (define-extern generic-none-dma-wait function)
;; (define-extern *warp-data* object) ;; object
;; (define-extern generic-warp-source-proc function) ;; (function none)
;; (define-extern generic-warp-source function) ;; (function gsf-buffer none)
;; (define-extern generic-warp-dest-proc function)
;; (define-extern generic-warp-dest function)
;; (define-extern generic-warp-envmap-dest function)
;; (define-extern generic-debug-light-proc function)
;; (define-extern generic-post-debug function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-merc                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype invinitdata (structure)
  ((count     uint8   :offset-assert 0)
   (init-data uint8   :offset-assert 1)
   (init-addr uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern mercneric-vu0-block object) ;; vu-function
;; (define-extern *inv-init-table* object) ;; (inline-array invinitdata)
;; (define-extern generic-merc-init-asm function) ;; (function none)
;; (define-extern mercneric-matrix-asm function)
;; (define-extern mercneric-shader-asm function)
;; (define-extern mercneric-bittable-asm function)
;; (define-extern mercneric-convert function)
;; (define-extern high-speed-reject function)
;; (define-extern generic-translucent function) ;; (function gsf-buffer none)
;; (define-extern generic-merc-query function)
;; (define-extern generic-merc-death function)
;; (define-extern generic-merc-execute-asm function)
;; (define-extern generic-merc-do-chain function) ;; (function mercneric-chain dma-buffer pointer)
;; (define-extern generic-merc-execute-all function) ;; (function dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-tie                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; gsf-vertex is already defined!

;; (define-extern generic-tie-dma-to-spad function)
;; (define-extern generic-tie-dma-to-spad-sync function)
;; (define-extern *generic-tie* object)
;; (define-extern generic-tie-decompress function)
;; (define-extern generic-tie-upload-next function)
;; (define-extern generic-tie-convert-proc function)
;; (define-extern generic-tie-convert function)
;; (define-extern generic-tie-display-stats function)
;; (define-extern generic-tie-debug function)
;; (define-extern generic-tie-execute function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-cpu                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shadow-stats (structure)
  ((num-single-tris  uint32  :offset-assert 0)
   (num-double-tris  uint32  :offset-assert 4)
   (num-single-edges uint32  :offset-assert 8)
   (num-double-edges uint32  :offset-assert 12)
   (num-fragments    uint16  :offset-assert 16)
   (num-objects      uint16  :offset-assert 18)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype shadow-dcache (structure)
  ((vtx-table              uint32                :offset-assert 0)
   (single-edge-table      uint32                :offset-assert 4)
   (double-edge-table      uint32                :offset-assert 8)
   (double-tri-table       uint32                :offset-assert 12)
   (dcache-top             uint32                :offset-assert 16)
   (num-facing-single-tris uint32                :offset-assert 20)
   (num-single-edges       uint32                :offset-assert 24)
   (num-double-edges       uint32                :offset-assert 28)
   (single-tri-list        uint32                :offset-assert 32)
   (single-edge-list       uint32                :offset-assert 36)
   (double-edge-list       uint32                :offset-assert 40)
   (ptr-dual-verts         uint32                :offset-assert 44)
   (stats                  shadow-stats :inline  :offset-assert 48)
   (frag-qwc               uint32                :offset-assert 68)
   (center                 vector       :inline  :offset-assert 80)
   (plane                  vector       :inline  :offset-assert 96)
   (top-plane              vector       :inline  :offset-assert 112)
   (near-plane             vector       :inline  :offset-assert 128)
   (light-dir              vector       :inline  :offset-assert 144)
   (vtx-min                vector       :inline  :offset-assert 160)
   (data                   uint8        :dynamic :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern *shadow-data* object) ;; shadow-data
;; (define-extern shadow-invert-z-buf function) ;; (function dma-buffer none)
;; (define-extern shadow-make-invert-buf function) ;; (function none)
;; (define-extern *shadow-dma-invert-call* object) ;; pointer
;; (define-extern shadow-dma-init function) ;; (function dma-buffer none)
;; (define-extern shadow-dma-end function) ;; (function dma-buffer gs-rgbaq symbol int none)
;; (define-extern shadow-vu0-block object) ;; vu-function
;; (define-extern shadow-xform-verts function) ;; function
;; (define-extern shadow-calc-dual-verts function) ;; function
;; (define-extern shadow-scissor-edges function) ;; function
;; (define-extern shadow-scissor-top function) ;; function
;; (define-extern shadow-init-vars function) ;; function
;; (define-extern shadow-find-facing-single-tris function) ;; function
;; (define-extern shadow-find-single-edges function) ;; function
;; (define-extern shadow-find-facing-double-tris function) ;; function
;; (define-extern shadow-find-double-edges function) ;; function
;; (define-extern shadow-add-verts function) ;; function
;; (define-extern shadow-add-facing-single-tris function) ;; function
;; (define-extern shadow-add-single-edges function) ;; function
;; (define-extern shadow-add-single-tris function) ;; function
;; (define-extern shadow-add-double-tris function) ;; function
;; (define-extern shadow-add-double-edges function) ;; function
;; (define-extern debug-draw-settings function) ;; (function shadow-settings symbol)
;; (define-extern shadow-execute function) ;; (function shadow-dma-packet pointer pointer)
;; (define-extern shadow-vu0-upload function) ;; (function none)
;; (define-extern shadow-execute-all function) ;; (function dma-buffer none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shadow-vu1                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shadow-vu1-constants (structure)
  ((hmgescale vector     :inline :offset-assert 0)
   (invhscale vector     :inline :offset-assert 16)
   (texoffset vector     :inline :offset-assert 32)
   (texscale  vector     :inline :offset-assert 48)
   (hvdfoff   vector     :inline :offset-assert 64)
   (fog       vector     :inline :offset-assert 80)
   (clrs      vector     2       :offset-assert 96) ;; guessed by decompiler
   (adgif     gs-gif-tag :inline :offset-assert 128)
   (texflush  gs-adcmd   :inline :offset-assert 144)
   (flush     gs-adcmd   :inline :offset-assert 160)
   (trigif    gs-gif-tag :inline :offset-assert 176)
   (quadgif   gs-gif-tag :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )
|#

#|
(deftype shadow-vu1-data (structure)
  ((adgif     gs-gif-tag :inline :offset-assert 0)
   (ad        gs-adcmd   :inline :offset-assert 16)
   (flush     gs-adcmd   :inline :offset-assert 32)
   (trigif    gs-gif-tag :inline :offset-assert 48)
   (quadgif   gs-gif-tag :inline :offset-assert 64)
   (texoffset vector     :inline :offset-assert 80)
   (texscale  vector     :inline :offset-assert 96)
   (clrs      qword      2       :offset-assert 112) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

;; (define-extern *shadow-vu1-data* object) ;; shadow-vu1-data
;; (define-extern shadow-vu1-block object) ;; vu-function
;; (define-extern shadow-vu1-add-constants function) ;; (function dma-buffer int none)
;; (define-extern shadow-vu1-patch-consts function) ;; (function symbol int none)
;; (define-extern shadow-vu1-add-matrix function) ;; (function dma-buffer math-camera none)
;; (define-extern shadow-vu1-init-buffer function) ;; (function dma-buffer int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; warp                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern fx-copy-buf (function dma-buffer none))
;; (define-extern *warp-shader* object) ;; adgif-shader
;; (define-extern create-blanket function) ;; (function symbol)
;; (define-extern *warp* object) ;; symbol
;; (define-extern warp-test function) ;; (function object object int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *texture-anim-work* object) ;; texture-anim-work
;; (define-extern texture-anim-layer-interp function) ;; (function texture-anim-layer float none)
;; (define-extern texture-anim-layer-add-shader function) ;; (function dma-buffer texture-anim-layer int none)
;; (define-extern texture-anim-layer-add-clut-shader function) ;; (function dma-buffer texture-anim-layer int none)
;; (define-extern texture-anim-layer-draw function) ;; (function dma-buffer int int texture-anim-layer none)
;; (define-extern default-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern blend-clut-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern add-clut-texture-anim-layer-func function)
;; (define-extern dest-blend-clut-texture-anim-layer-func function)
;; (define-extern move-rg-to-ba-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern fill-rgb-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern texture-anim-draw-mip-shader function)
;; (define-extern clear-texture-ids function)
;; (define-extern texture-anim-draw-mips function)
(define-extern update-texture-anim (function bucket-id texture-anim-array none))
;; (define-extern no-alpha-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern copy-alpha-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern copy-clut-alpha-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern set-alpha-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern set-clut-alpha-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern dest-texture-init function) ;; (function texture-anim none)
;; (define-extern src-texture-init function) ;; (function texture-anim-layer none)
;; (define-extern src-texture-init-mt8 function) ;; (function texture-anim-layer none)
;; (define-extern make-noise-texture function) ;; (function pointer int int int none)
;; (define-extern make-cloud-clut function) ;; (function (pointer uint32) float float none)
;; (define-extern texture-anim-cloud-clut-upload function) ;; (function dma-buffer texture-anim none)
;; (define-extern texture-anim-cloud-clut-init function) ;; (function texture-anim none)
;; (define-extern make-slime-clut function) ;; (function (pointer uint32) none)
;; (define-extern texture-anim-slime-clut-upload function) ;; (function dma-buffer texture-anim none)
;; (define-extern texture-anim-slime-clut-init function) ;; (function texture-anim none)
;; (define-extern make-ramp-clut function) ;; (function (pointer uint32) pointer object none)
;; (define-extern make-alpha-ramp-clut function) ;; (function (pointer uint32) none)
;; (define-extern noise-texture-init function) ;; (function texture-anim-layer none)
;; (define-extern texture-anim-alpha-ramp-clut-upload function) ;; (function dma-buffer texture-anim none)
;; (define-extern texture-anim-alpha-ramp-clut-init function) ;; (function texture-anim none)
;; (define-extern texture-anim-overide-size-init function) ;; (function texture-anim none)
;; (define-extern texture-anim-change-mt8h-init function) ;; (function texture-anim none)
;; (define-extern *texture-anim-pages-table* object)
;; (define-extern *texture-anim-mip-array* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-funcs             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern noise-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern cloud-texture-anim-layer-func function) ;; (function dma-buffer uint int int texture-anim-layer float int)
;; (define-extern cloud-texture-anim-func function) ;; (function dma-buffer texture-anim int)
;; (define-extern fog-texture-anim-init function) ;; (function texture-anim int)
(define-extern *fog-texture-work* fog-texture-work)
;; (define-extern real-fog-texture-anim-func function) ;; (function dma-buffer texture-anim int)
;; (define-extern fog-texture-anim-func function) ;; (function dma-buffer texture-anim int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-anim-tables            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sky-texture-anim-array* texture-anim-array) ;; (texture-anim-array texture-anim)
;; (define-extern set-fog-height! function) ;; (function float none)
;; (define-extern set-cloud-minmax! function) ;; (function float float none)
;; (define-extern *darkjak-texture-anim-array* texture-anim-array) ;; (texture-anim-array texture-anim)
;; (define-extern set-darkjak-texture-morph! function) ;; (function float none)
;; (define-extern *darkjak-highres-texture-anim-array* texture-anim-array)
;; (define-extern set-darkjak-highres-texture-morph! function) ;; (function float symbol)
(define-extern *skull-gem-texture-anim-array* (texture-anim-array texture-anim))
;; (define-extern *default-water-texture-anim-array* texture-anim-array)
;; (define-extern *default-warp-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blit-displays                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *blit-displays-work* blit-displays-work)
;; (define-extern draw-color-bars function) ;; (function none)
;; (define-extern draw-raw-image function) ;; (function bucket-id art-group int int level int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font-data                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *font12-table* object) ;; (inline-array vector)
;; (define-extern *font24-table* object) ;; (inline-array vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype draw-string-result (uint64)
  ((length float :offset 0)
   (b float :offset 32))
  )

;; (define-extern draw-string-asm function) ;; (function string dma-buffer font-context draw-string-result)
(define-extern draw-string (function string dma-buffer font-context draw-string-result))
;; (define-extern get-string-length function) ;; (function string font-context draw-string-result)
(define-extern draw-string-xy (function string dma-buffer int int font-color font-flags draw-string-result))
;; (define-extern draw-string-adv function) ;; (function string dma-buffer font-context none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; decomp                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype huf-dictionary-node (structure)
  ((zero uint16  :offset-assert 0)
   (one  uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern unpack-comp-rle function) ;; (function (pointer int8) (pointer int8) (pointer int8))
;; (define-extern unpack-comp-huf function) ;; (function (pointer uint8) (pointer uint8) uint huf-dictionary-node none)
(define-extern unpack-comp-lzo (function (pointer uint8) (pointer uint8) none))
;; (define-extern pack-comp-rle function) ;; (function (pointer uint8) (pointer uint8) int int (pointer uint8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; background                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *background-work* object) ;; background-work
;; (define-extern background-vu0-block object) ;; vu-function
;; (define-extern background-upload-vu0 function) ;; (function none)
;; (define-extern init-background function) ;; (function none)
;; (define-extern upload-vis-bits function) ;; (function level level bsp-header none)
;; (define-extern set-background-regs! function) ;; (function level none)
;; (define-extern set-tie-quard-planes! function) ;; (function level none)
;; (define-extern set-shrub-quard-planes! function) ;; (function level none)
;; (define-extern set-subdivide-settings! function)
;; (define-extern finish-background function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; draw-node                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drawable-inline-array-node (drawable-inline-array)
  ((length  int16              :offset-assert 2)
   (data    draw-node :dynamic :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN            :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  )
|#

;; (define-extern draw-node-cull function) ;; (function pointer pointer (inline-array draw-node) int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrubbery                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dma-test (structure)
  ((data qword 101 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x650
  :flag-assert         #x900000650
  )
|#

#|
(deftype dma-test-work (structure)
  ((upload dma-packet :inline :offset-assert 0)
   (end    dma-packet :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype prototype-shrubbery (drawable-inline-array)
  ((length  int16              :offset-assert 2)
   (data    shrubbery :dynamic :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN            :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  )
|#

;; (define-extern mem-usage-shrub-walk function) ;; (function draw-node int memory-usage-block int draw-node)
;; (define-extern highres-shrub-login function)
;; (define-extern shrub-vu1-block object) ;; vu-function
;; (define-extern shrub-num-tris function) ;; (function shrubbery uint)
(define-extern shrub-make-perspective-matrix (function matrix matrix matrix))
;; (define-extern shrub-init-view-data function) ;; (function shrub-view-data symbol)
;; (define-extern shrub-upload-view-data function) ;; (function dma-buffer symbol)
;; (define-extern shrub-time function) ;; (function int int int int int int)
;; (define-extern shrub-do-init-frame function) ;; (function dma-buffer symbol)
;; (define-extern shrub-init-frame function) ;; (function dma-buffer gs-test symbol)
;; (define-extern shrub-upload-model function) ;; (function shrubbery dma-buffer int symbol)
;; (define-extern draw-inline-array-instance-shrub function) ;; (function dma-buffer drawable int (inline-array prototype-bucket-shrub) none)
;; (define-extern draw-prototype-inline-array-shrub function) ;; (function int (inline-array prototype-bucket-shrub) pointer)
;; (define-extern draw-drawable-tree-instance-shrub function) ;; (function drawable-tree-instance-shrub level none)
;; (define-extern *dma-test* object) ;; dma-test
;; (define-extern *dma-test-work* object) ;; dma-test-work
;; (define-extern init-dma-test function) ;; (function none)
;; (define-extern dma-test-func function) ;; (function none)
;; (define-extern move-test-func function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shrub-work                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *instance-shrub-work* instance-shrub-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-near                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern tnear-vu1-block object) ;; vu-function
;; (define-extern tfrag-details function) ;; (function tfragment none)
;; (define-extern clip-restore function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((length  int16              :offset-assert 2)
   (data    tfragment :dynamic :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN            :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )
|#

;; (define-extern *tfrag-display-stats* object) ;; symbol
;; (define-extern tfrag-vu1-block object) ;; vu-function
;; (define-extern tfrag-data-setup function) ;; (function tfrag-data int int none)
;; (define-extern add-tfrag-mtx-0 function) ;; (function dma-buffer symbol none)
;; (define-extern add-tfrag-mtx-1 function) ;; (function dma-buffer symbol none)
;; (define-extern add-tfrag-data function) ;; (function dma-buffer int int none)
;; (define-extern t-stat object) ;; tfrag-stats
;; (define-extern tfrag-print-stats function) ;; (function symbol none)
;; (define-extern tfrag-init-buffer function) ;; (function dma-buffer gs-test int symbol none)
;; (define-extern tfrag-end-buffer function) ;; (function dma-buffer int none)
;; (define-extern draw-inline-array-tfrag function) ;; (function pointer drawable-inline-array int dma-buffer none)
;; (define-extern tfrag-scissor-init-buffer function) ;; (function dma-buffer gs-test int symbol none)
;; (define-extern tfrag-scissor-end-buffer function) ;; (function dma-buffer uint none)
;; (define-extern draw-inline-array-tfrag-scissor function) ;; (function pointer drawable-inline-array int dma-buffer none)
;; (define-extern stats-tfrag-asm function) ;; (function tfragment none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-methods                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tfrag-init-data (structure)
  ((tfrag-bucket               int32  :offset-assert 0) ;; bucket-id
   (tfrag-scissor-bucket       int32  :offset-assert 4) ;; bucket-id
   (tfrag-trans-bucket         int32  :offset-assert 8) ;; bucket-id
   (tfrag-scissor-trans-bucket int32  :offset-assert 12) ;; bucket-id
   (tfrag-water-bucket         int32  :offset-assert 16) ;; bucket-id
   (tfrag-water-scissor-bucket int32  :offset-assert 20) ;; bucket-id
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern edge-debug-lines function) ;; (function (array vector-array) none)
;; (define-extern draw-drawable-tree-tfrag function) ;; (function drawable-tree-tfrag none)
;; (define-extern draw-drawable-tree-tfrag-trans function) ;; (function drawable-tree-tfrag none)
;; (define-extern draw-drawable-tree-tfrag-water function) ;; (function drawable-tree-tfrag none)
;; (define-extern tfrag-vu1-init-buf function) ;; (function bucket-id gs-test int uint symbol none)
;; (define-extern tfrag-scissor-vu1-init-buf function) ;; (function bucket-id gs-test int uint symbol none)
;; (define-extern *tfrag-init-table* object) ;; (inline-array tfrag-init-data)
;; (define-extern tfrag-vu1-init-buffers function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tfrag-work                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *tfrag-work* tfrag-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tie-consts (structure)
  ((data      uint32   40      :offset-assert 0) ;; guessed by decompiler
   (vector    vector   10      :offset-assert 0) ;; guessed by decompiler
   (quads     uint128  10      :offset-assert 0) ;; guessed by decompiler
   (adgif     qword    :inline :offset-assert 0) ;; gs-gif-tag :inline
   (strgif    qword    :inline :offset-assert 16) ;; gs-gif-tag :inline
   (extra     qword    :inline :offset-assert 32) ;; vector :inline
   (gifbufs   qword    :inline :offset-assert 48) ;; vector :inline
   (clrbufs   qword    :inline :offset-assert 64)
   (misc      qword    :inline :offset-assert 80)
   (atestgif  qword    :inline :offset-assert 96) ;; gs-gif-tag :inline
   (alpha     qword    :inline :offset-assert 112) ;; gs-adcmd :inline
   (atest     gs-adcmd 2       :offset-assert 128) ;; guessed by decompiler
   (atest-tra gs-adcmd :inline :offset-assert 128)
   (atest-def gs-adcmd :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

#|
(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((length  int16                 :offset-assert 2)
   (data    instance-tie :dynamic :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN               :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )
|#

#|
(deftype prototype-tie (drawable-inline-array)
  ((length  int16                 :offset-assert 2)
   (data    tie-fragment :dynamic :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN               :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )
|#

;; (define-extern tie-vu1-block object) ;; vu-function
;; (define-extern tie-init-consts function) ;; (function tie-consts gs-alpha gs-test gs-test none)
;; (define-extern tie-init-engine function) ;; (function dma-buffer gs-alpha gs-test gs-test none)
;; (define-extern tie-end-buffer function) ;; (function dma-buffer none)
;; (define-extern tie-int-reg function) ;; (function int string)
;; (define-extern tie-float-reg function) ;; (function int string)
;; (define-extern tie-ints function) ;; (function none)
;; (define-extern tie-floats function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; etie-vu1                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype etie-consts (structure)
  ((gifbufs qword        :inline :offset-assert 0)
   (adgif   qword        :inline :offset-assert 16) ;; gs-gif-tag :inline
   (alpha   qword        :inline :offset-assert 32)
   (strgif  qword        :inline :offset-assert 48) ;; gs-gif-tag :inline
   (envgif  qword        :inline :offset-assert 64) ;; gs-gif-tag :inline
   (envmap  adgif-shader :inline :offset-assert 80)
   (pers0   vector       :inline :offset-assert 160)
   (pers1   vector       :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )
|#

#|
(deftype etie-matrix (structure)
  ((rmtx  matrix  :inline :offset-assert 0)
   (nmtx  matrix3 :inline :offset-assert 64)
   (morph float           :offset-assert 76)
   (fog   float           :offset-assert 92)
   (fade  uint32          :offset-assert 108)
   (tint  qword   :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

;; (define-extern etie-vu1-block object) ;; vu-function
;; (define-extern etie-magic function) ;; (function int int)
;; (define-extern etie-init-consts function) ;; (function etie-consts gs-alpha none)
;; (define-extern etie-init-engine function) ;; (function dma-buffer gs-alpha gs-test none)
;; (define-extern etie-end-buffer function) ;; (function dma-buffer none)
;; (define-extern etie-float-reg-bp function)
;; (define-extern etie-float-reg function)
;; (define-extern etie-floats function)
;; (define-extern etie-int-reg function)
;; (define-extern etie-ints function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; etie-near-vu1                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype etn-consts (structure)
  ((gifbufs qword           :inline :offset-assert 0)
   (adgif   qword           :inline :offset-assert 16)
   (alpha   qword           :inline :offset-assert 32)
   (strgif  generic-gif-tag :inline :offset-assert 48)
   (envgif  generic-gif-tag :inline :offset-assert 64)
   (envmap  adgif-shader    :inline :offset-assert 80)
   (pers0   vector          :inline :offset-assert 160)
   (pers1   vector          :inline :offset-assert 176)
   (hvdf    vector          :inline :offset-assert 192)
   (invh    vector          :inline :offset-assert 208)
   (guard   vector          :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )
|#

#|
(deftype etn-matrix (structure)
  ((rmtx  matrix  :inline :offset-assert 0)
   (nmtx  matrix3 :inline :offset-assert 64)
   (morph float           :offset-assert 76)
   (fog   float           :offset-assert 92)
   (fade  uint32          :offset-assert 108)
   (tint  qword   :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

#|
(deftype etn-vtx (structure)
  ((pos vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (tex vector :inline :offset-assert 32)
   (tx2 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype etn-plane (structure)
  ((point   uint32          :offset-assert 0)
   (prev    uint32          :offset-assert 4)
   (outfunc uint32          :offset-assert 8)
   (flags   uint32          :offset-assert 12)
   (out     etn-vtx :inline :offset-assert 16)
   (in      etn-vtx :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

;; (define-extern etn-vu1-block object)
;; (define-extern etn-magic function)
;; (define-extern etn-init-consts function)
;; (define-extern etn-init-engine function) ;; (function dma-buffer none)
;; (define-extern etn-end-buffer function) ;; (function dma-buffer none)
;; (define-extern etn-float-reg-calc function)
;; (define-extern etn-float-reg function)
;; (define-extern etn-floats function)
;; (define-extern etn-int-reg-draw function)
;; (define-extern etn-int-reg function)
;; (define-extern etn-ints function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-near                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tie-near-consts (structure)
  ((extra     qword    :inline :offset-assert 0)
   (gifbufs   qword    :inline :offset-assert 16)
   (clrbufs   qword    :inline :offset-assert 32)
   (adgif     qword    :inline :offset-assert 48)
   (strgif    qword    :inline :offset-assert 64)
   (fangif    qword    :inline :offset-assert 80)
   (hvdfoffs  vector   :inline :offset-assert 96)
   (invhscale vector   :inline :offset-assert 112)
   (guard     vector   :inline :offset-assert 128)
   (atest     UNKNOWN  2       :offset-assert 144)
   (atest-tra gs-adcmd :inline :offset-assert 144)
   (atest-def gs-adcmd :inline :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern tie-near-vu1-block object)
;; (define-extern tie-near-init-consts function)
;; (define-extern tie-near-init-engine function) ;; (function dma-buffer gs-test int none)
;; (define-extern tie-near-end-buffer function) ;; (function dma-buffer none)
;; (define-extern tie-scissor-make-perspective-matrix function) ;; (function matrix matrix none)
;; (define-extern tie-near-int-reg function)
;; (define-extern tie-near-float-reg function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-work                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *instance-tie-work* instance-tie-work)
(define-extern *prototype-tie-work* prototype-tie-work)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tie-methods                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tie-debug (structure)
  ((max-instance  uint32  :offset-assert 0)
   (min-instance  uint32  :offset-assert 4)
   (test-fragment uint32  :offset-assert 8)
   (frag-count    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype tie-init-data (structure)
  ((tie-bucket                      int32  :offset-assert 0) ;; bucket-id
   (tie-scissor-bucket              int32  :offset-assert 4) ;; bucket-id
   (tie-envmap-bucket               int32  :offset-assert 8) ;; bucket-id
   (tie-envmap-scissor-bucket       int32  :offset-assert 12) ;; bucket-id
   (tie-vanish-bucket               int32  :offset-assert 16) ;; bucket-id
   (tie-trans-bucket                int32  :offset-assert 20) ;; bucket-id
   (tie-scissor-trans-bucket        int32  :offset-assert 24) ;; bucket-id
   (tie-envmap-trans-bucket         int32  :offset-assert 28) ;; bucket-id
   (tie-envmap-scissor-trans-bucket int32  :offset-assert 32) ;; bucket-id
   (tie-water-bucket                int32  :offset-assert 36) ;; bucket-id
   (tie-scissor-water-bucket        int32  :offset-assert 40) ;; bucket-id
   (tie-envmap-water-bucket         int32  :offset-assert 44) ;; bucket-id
   (tie-envmap-scissor-water-bucket int32  :offset-assert 48) ;; bucket-id
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

;; (define-extern *tie* object) ;; tie-debug
;; (define-extern tie-debug-between function) ;; (function uint uint uint)
;; (define-extern tie-debug-one function) ;; (function uint uint uint)
;; (define-extern tie-debug-frag-between function) ;; (function uint uint uint)
;; (define-extern tie-debug-frag-one function) ;; (function uint uint uint)
;; (define-extern walk-tie-generic-prototypes function) ;; (function none)
;; (define-extern *pke-hack* object) ;; vector
;; (define-extern draw-inline-array-instance-tie function) ;; (function pointer (inline-array instance-tie) int dma-buffer none)
;; (define-extern draw-inline-array-prototype-tie-asm function) ;; (function dma-buffer int prototype-array-tie none)
;; (define-extern instance-tie-patch-buckets function) ;; (function dma-buffer level object)
;; (define-extern draw-drawable-tree-instance-tie function) ;; (function drawable-tree-instance-tie level none)
;; (define-extern tie-init-scissor-buf function) ;; (function bucket-id gs-alpha gs-test gs-test none)
;; (define-extern tie-init-buf function) ;; (function bucket-id gs-alpha gs-test gs-test none)
;; (define-extern tie-init-envmap-buf function) ;; (function bucket-id gs-alpha gs-test none)
;; (define-extern tie-init-envmap-scissor-buf function) ;; (function bucket-id gs-alpha int int none)
;; (define-extern *tie-init-table* object) ;; (inline-array tie-init-data)
;; (define-extern tie-vu1-init-buffers function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prim                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *prim-work* object)
;; (define-extern prim-engine-execute function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sync-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trajectory                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern traj2d-calc-initial-speed-using-tilt (function traj2d-params symbol))
(define-extern traj3d-calc-initial-velocity-using-tilt (function traj3d-params symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle-launcher             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system           :offset-assert 0) ;; guessed by decompiler
   (sp-launcher sparticle-launcher         :offset-assert 4) ;; guessed by decompiler
   (pos         vector             :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype sp-launch-queue (basic)
  ((in-use int32                          :offset-assert 4)
   (queue  sp-queued-launch-particles 256 :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x2010
  :flag-assert         #x900002010
  )
|#

#|
(deftype particle-adgif-cache (basic)
  ((used    int32           :offset-assert 4)
   (last    uint16          :offset-assert 8)
   (lastgif adgif-shader    :offset-assert 12)
   (tidhash uint16       80 :offset-assert 16) ;; guessed by decompiler
   (spadgif adgif-shader 80 :offset-assert 176) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )
|#

#|
(deftype sp-launch-stack (structure)
  ((ra         basic                       :offset-assert 0)
   (dummy0     basic                       :offset-assert 4)
   (dummy1     basic                       :offset-assert 8)
   (b-spfic    basic                       :offset-assert 12)
   (r16        uint128                     :offset-assert 16)
   (r17        uint128                     :offset-assert 32)
   (r18        uint128                     :offset-assert 48)
   (pos        uint128                     :offset-assert 64)
   (matrix     matrix              :inline :offset-assert 80)
   (l-spfic    basic                       :offset-assert 144)
   (birth-info sparticle-birthinfo :inline :offset-assert 160)
   (sprite     sprite-vec-data-2d  :inline :offset-assert 192)
   (r19        uint128                     :offset-assert 240)
   (r20        uint128                     :offset-assert 256)
   (r21        uint128                     :offset-assert 272)
   (r22        uint128                     :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x130
  :flag-assert         #x900000130
  ;; field ra uses ~A with a signed load. field dummy0 uses ~A with a signed load. field dummy1 uses ~A with a signed load. field b-spfic uses ~A with a signed load. field l-spfic uses ~A with a signed load.
  )
|#

;; sparticle-launcher is already defined!

(define-extern *part-id-table* (array sparticle-launcher))
(define-extern *part-group-id-table* (array sparticle-launch-group))
;; (define-extern *sp-temp* object) ;; float
;; (define-extern lookup-part-group-by-name function) ;; (function string sparticle-launch-group)
(define-extern lookup-part-group-pointer-by-name (function string (pointer object)))
(define-extern part-group-pointer? (function pointer symbol))
;; (define-extern unlink-part-group-by-heap function) ;; (function kheap int)
;; (define-extern sp-init-fields! function) ;; (function (pointer float) (inline-array sp-field-init-spec) sp-field-id sp-field-id symbol (inline-array sp-field-init-spec))
;; (define-extern *sp-launcher-lock* object) ;; symbol
;; (define-extern *sp-launch-queue* object) ;; sp-launch-queue
;; (define-extern *sp-launcher-enable* object) ;; symbol
;; (define-extern particle-setup-adgif function) ;; (function adgif-shader int none)
;; (define-extern *particle-adgif-cache* object) ;; particle-adgif-cache
;; (define-extern particle-adgif-cache-flush function) ;; (function none)
;; (define-extern particle-adgif function) ;; (function adgif-shader texture-id none)
;; (define-extern particle-adgif-callback function) ;; (function adgif-shader texture-id none)
;; (define-extern sp-queue-launch function) ;; (function sparticle-system sparticle-launcher matrix int)
;; (define-extern sp-adjust-launch function) ;; (function sparticle-launchinfo sparticle-cpuinfo (inline-array sp-field-init-spec) matrix symbol none)
;; (define-extern sp-euler-convert function) ;; (function sparticle-launchinfo sparticle-cpuinfo none)
;; (define-extern sp-rotate-system function) ;; (function sparticle-launchinfo sparticle-cpuinfo transformq none)
(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none))
;; (define-extern *death-adgif* object) ;; adgif-shader
;; (define-extern sp-launch-particles-death function) ;; (function sparticle-system sparticle-launcher vector none)
;; (define-extern sp-clear-queue function) ;; (function none)
;; (define-extern sp-relaunch-setup-fields function) ;; (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)
;; (define-extern sp-relaunch-particle-2d function) ;; (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)
;; (define-extern sp-relaunch-particle-3d function) ;; (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none)
;; (define-extern execute-particle-local-space-engine function)
;; (define-extern local-space-camera function)
(define-extern local-space-proc-joint (function particle-local-space-info none))
;; (define-extern execute-part-engine function) ;; (function none)
;; (define-extern sparticle-track-root function) ;; (function object sparticle-cpuinfo vector none)
;; (define-extern sparticle-track-root-prim function) ;; (function object sparticle-cpuinfo vector none)
;; (define-extern sparticle-track-joint function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-turn-to-vel function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d none)
;; (define-extern sparticle-rotate-to-vel-3d function)
;; (define-extern birth-func-clean function)
;; (define-extern birth-func-process-clock function)
;; (define-extern birth-func-copy-rot-color function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern *global-toggle* object) ;; int
;; (define-extern birth-func-copy2-rot-color function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern birth-func-copy-omega-to-z function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern birth-func-random-next-time function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern sparticle-respawn-heights function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-respawn-timer function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-texture-animate function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-texture-day-night function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-2d none)
;; (define-extern sparticle-mode-animate function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-2d none)
;; (define-extern sparticle-motion-blur function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-motion-blur-old function) ;; (function object sparticle-cpuinfo sprite-vec-data-3d object)
;; (define-extern sparticle-set-conerot function) ;; (function sparticle-launcher vector none)
;; (define-extern sparticle-next-on-mode-1 function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo float)
;; (define-extern check-ground-bounce function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo float)
;; (define-extern check-drop-group-center function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern check-bubble-height function)
;; (define-extern check-raise-group-center function)
;; (define-extern birth-func-y->userdata function) ;; (function sparticle-system sparticle-cpuinfo matrix none)
;; (define-extern birth-func-ocean-height function) ;; (function sparticle-system sparticle-cpuinfo matrix none)
;; (define-extern birth-func-camera-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-set-parent-pntr function)
;; (define-extern birth-func-get-parent-quat function)
;; (define-extern spt-func-camera-facing-orbiter function)
(define-extern *particle-quat* quaternion)
;; (define-extern birth-func-set-quat function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
(define-extern *particle-vel* vector)
;; (define-extern birth-func-set-vel function) ;; (function object sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-texture-group function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern rot-to-particle function)
;; (define-extern birth-func-flip-based-on-scale function)
;; (define-extern sparticle-2d-spline-align function)
;; (define-extern sparticle-2d-spline-align-instant function)
;; (define-extern birth-func-inherit-size function)
;; (define-extern birth-func-texture-group-2d function)
;; (define-extern birth-func-set-vel-2d function)
;; (define-extern sparticle-3d-rotate-xz-to-camera function)
;; (define-extern spt-func-relative-pos function)
;; (define-extern spt-func-turn-to-vel-radial function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sparticle                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sp-particle-copy! function) ;; (function sparticle-cpuinfo sparticle-cpuinfo none)
(define-extern *sp-particle-system-2d* sparticle-system)
(define-extern *sp-particle-system-3d* sparticle-system)
;; (define-extern sp-get-block-size function) ;; (function sparticle-system int int)
;; (define-extern sp-get-approx-alloc-size function) ;; (function sparticle-system int int)
;; (define-extern sp-free-particle function) ;; (function sparticle-system int sparticle-cpuinfo sprite-vec-data-2d none)
;; (define-extern sp-get-particle function) ;; (function sparticle-system int sparticle-launch-state sparticle-cpuinfo)
;; (define-extern sp-kill-particle function) ;; (function sparticle-system sparticle-cpuinfo symbol)
;; (define-extern sp-orbiter function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sp-process-block-2d function) ;; (function sparticle-system int int int int symbol none)
;; (define-extern sp-process-block-3d function) ;; (function sparticle-system int int int int symbol none)
;; (define-extern sp-copy-to-spr function) ;; (function int pointer int none)
;; (define-extern sp-copy-from-spr function) ;; (function int pointer int none)
;; (define-extern memcpy function) ;; function
;; (define-extern sp-process-block function) ;; (function sparticle-system int sprite-array-2d int none)
;; (define-extern sp-process-particle-system function) ;; (function sparticle-system int sprite-array-2d none)
;; (define-extern *particles-flag* object) ;; symbol
;; (define-extern forall-particles-with-key-runner function) ;; (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) sparticle-system none)
;; (define-extern forall-particles-with-key function) ;; (function sparticle-launch-control (function sparticle-system sparticle-cpuinfo none) symbol symbol none)
;; (define-extern sparticle-kill-it function) ;; (function sparticle-system sparticle-cpuinfo none)
;; (define-extern *sparticle-kill-it-level* object)
;; (define-extern sparticle-kill-it-level function)
;; (define-extern sparticle-60-to-50 function) ;; (function sparticle-system sparticle-cpuinfo pointer none)
;; (define-extern sparticle-50-to-60 function) ;; (function sparticle-system sparticle-cpuinfo pointer none)
(define-extern kill-all-particles-with-key (function sparticle-launch-control none))
;; (define-extern forall-particles-runner function) ;; (function (function sparticle-system sparticle-cpuinfo pointer none) sparticle-system none)
;; (define-extern forall-particles function) ;; (function function symbol symbol none)
;; (define-extern kill-all-particles-in-level function) ;; (function level int)
;; (define-extern all-particles-50-to-60 function) ;; (function none)
;; (define-extern all-particles-60-to-50 function) ;; (function none)
;; (define-extern remap-particle function) ;; (function sparticle-system sparticle-cpuinfo pointer none)
;; (define-extern remap-all-particles function) ;; (function none)
;; (define-extern process-particles function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity-table                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *entity-info* (array entity-info))
(define-extern entity-info-lookup (function type entity-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; loader                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++loader:spooler-flags
(defenum spooler-flags
  :bitfield #t
  :type uint32
  (blackout-on-stall)
  )
;; ---loader:spooler-flags

(deftype spooler-block (basic)
  ((anim             spool-anim                          :offset-assert 4) ;; guessed by decompiler
   (idle             art-joint-anim                      :offset-assert 8) ;; guessed by decompiler
   (exit             art-joint-anim                      :offset-assert 12) ;; guessed by decompiler
   (break-func       (function process-drawable object)  :offset-assert 16) ;; guessed by decompiler
   (flags            spooler-flags                       :offset-assert 20)
   (part             int32                               :offset-assert 24)
   (part-audio-start float                               :offset-assert 28)
   (old-status       uint16                              :offset-assert 32)
   (old-pos          int32                               :offset-assert 36)
   (good-time        time-frame                          :offset-assert 40) ;; time-frame
   (old-time         time-frame                          :offset-assert 48) ;; time-frame
   (good-count       int32                               :offset-assert 56)
   (sid              sound-id                            :offset-assert 60) ;; guessed by decompiler
   (real-start-time  time-frame                          :offset-assert 64) ;; time-frame
   (paused?          symbol                              :offset-assert 72) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype load-dir (basic)
  ;; copied from jak1.
  ((lev level :offset-assert 4)
   (string-array (array string) :offset-assert 8) ;; these are the names
   (data-array (array basic) :score -50 :offset-assert 12) ;; this is the file data.
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  ;; Failed to read some fields.
  (:methods
    (new (symbol type int level) _type_) ;; 0
    (load-to-heap-by-name (_type_ string symbol kheap int) art-group) ;; 9
    (set-loaded-art (_type_ art-group) art-group) ;; 10
    )
  )

(deftype gui-control (basic)
  ((engine  engine   :offset-assert 4) ;; guessed by decompiler
   (update-time  time-frame  :offset-assert 8)
   (connections gui-connection 32 :inline :offset-assert 16)
   (spool-connections gui-connection 4 :inline :offset-assert 1552)
   (ids sound-id 96 :offset-assert 1744)
   (times time-frame 96 :offset-assert 2128)
   (cmd pair 96 :offset-assert 2896)
   (group sound-group 96 :offset-assert 3280)
   )
  :method-count-assert 26
  :size-assert         #xd30
  :flag-assert         #x1a00000d30
  (:methods
    (new (symbol type int) _type_) ;; 0
    (add-process (_type_ process gui-channel gui-action string float time-frame) sound-id) ;; 9
    (remove-process (_type_ process gui-channel) int) ;; 10
    (stop-str (_type_ gui-connection) int) ;; 11
    (gui-control-method-12 (_type_ process gui-channel gui-action string int float sound-id) sound-id) ;; 12
    (update (_type_ symbol) int) ;; 13
    (lookup-gui-connection-id (_type_ string gui-channel gui-action) sound-id) ;; 14
    (lookup-gui-connection (_type_ process gui-channel string sound-id) gui-connection) ;; 15
    (set-action! (_type_ gui-action sound-id gui-channel gui-action string (function gui-connection symbol) process) int) ;; 16
    (get-status (_type_ sound-id) gui-status) ;; 17 ;; (get-status (_type_ sound-id) gui-status)
    (gui-control-method-18 (_type_ gui-channel) symbol) ;; 18
    (handle-command-list (_type_ gui-channel gui-connection) symbol) ;; 19
    (sound-params-set! (_type_ sound-id symbol int int int float) gui-connection) ;; 20
    (gui-control-method-21 (_type_ gui-connection) int) ;; 21
    (gui-control-method-22 (_type_ gui-connection vector) int) ;; 22
    (update-connection (_type_ gui-connection process symbol) none) ;; 23
    (handle-command (_type_ gui-channel gui-channel symbol gui-connection) symbol) ;; 24
    (channel-id-set! (_type_ gui-connection sound-id) int) ;; 25
    )
  )

(define-extern drawable-load (function drawable kheap drawable))
(define-extern art-load (function string kheap art))
(define-extern art-group-load-check (function string kheap int art-group))
(define-extern external-art-buffer-init (function external-art-buffer int))
(define-extern *preload-spool-anims* symbol)
(define-extern ja-play-spooled-anim (function spool-anim art-joint-anim art-joint-anim (function process-drawable symbol) spooler-flags int :behavior process-drawable))
(define-extern ja-abort-spooled-anim (function spool-anim art-joint-anim int int :behavior process-drawable))
(define-extern *gui-control* gui-control)
(define-extern *art-control* external-art-control)
(define-extern *stack-top* pointer)
(define-extern *kernel-sp* pointer)
(define-extern loado (function string kheap object))
(define-extern link (function pointer pointer int kheap int pointer))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *default-continue* continue-point)
(define-extern task-level->string (function int string))
(define-extern level-name->task-level (function symbol int))
(define-extern trsq->continue-point (function trsq int))
(define-extern position->stream (function string symbol symbol none))
(define-extern bug-report-display (function symbol int))
(define-extern print-continues (function int))
(define-extern *highscore-info-array* (array highscore-info))
(define-extern *user* symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-task                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; game-save                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++game-save:game-save-elt
(defenum game-save-elt
  :type uint16
  (name 100)
  (base-time 101)
  (real-time 102)
  (game-time 103)
  (frame-time 104)
  (real-frame-time 105)
  (session-time 106)
  (bg-time 107)
  (total-game-time 108)

  (continue 200)
  (life 201)
  (money 202)
  (money-total 203)
  (money-per-level 204)
  (buzzer-total 205)
  (fuel-cell 206)
  (death-movie-tick 207)
  (skill 208)
  (skill-total 209)
  (karma 210)
  (eco-pill-dark 211)
  (eco-pill-dark-total 212)
  (shield 213)
  (features 214)
  (gun-type 215)
  (gun-ammo 216)
  (gem 218)
  (gem-total 219)
  (secrets 220)
  (scores 221)
  (purchase-secrets 222)
  (eco-pill-light 223)
  (eco-pill-light-total 224)
  (vehicles 225)
  (vehicle 226)
  (resetter-node 227)
  (items 228)
  (skill-high-watermark 229)

  (task-list 300)
  (perm-list 301)
  (level-open-list 305)
  (task-node-list 306)
  (talker-state 307)
  (bigmap-data 308)
  (bigmap-offsets 309)

  (total-deaths 400)
  (continue-deaths 401)
  (task-deaths 402)
  (game-start-time 403)
  (death-time 405)
  (hit-time 406)
  (task-pickup-time 407)
  (continue-time 408)
  (task-complete-time 409)
  (enter-level-time 410)
  (deaths-per-level 411)
  (death-pos 412)
  (auto-save-count 413)
  (in-level-time 414)
  (task-start-time 415)
  (node-death-count 416)
  (node-gem-count 417)
  (node-skill-count 418)
  (node-close-time 419)
  (node-name 420)
  (total-trys 421)
  (enemies-killed 422)
  (civilians-killed 423)
  (marauders-killed 424)
  (shot-info 425)
  (crates-opened 426)
  (health-collected 427)
  (board-time 428)

  (sfx-volume 500)
  (music-volume 501)
  (dialog-volume 502)
  (language 503)
  (screenx 504)
  (screeny 505)
  (vibration 506)
  (play-hints 507)
  (video-mode 508)
  (aspect-ratio 509)
  (camera-stick-dir 510)
  (subtitle 511)
  (subtitle-language 512)
  (stereo-mode 513)
  (audio-language 516)
  (brightness 514)
  (contrast 515)
  (flip-horizontal 517)
  (flip-vertical 518)

  (disk-tester 600)
  )
;; ---game-save:game-save-elt

(deftype game-save-tag (structure)
  ((user-object object 2 :offset-assert 0) ;; guessed by decompiler
   (user-uint64 uint64   :offset 0)
   (user-float0 float    :offset 0)
   (user-float  float  2 :offset 0) ;; guessed by decompiler
   (user-int32  int32  2 :offset 0) ;; guessed by decompiler
   (user-uint32 uint32 2 :offset 0) ;; guessed by decompiler
   (user-int16  int16  4 :offset 0) ;; guessed by decompiler
   (user-uint16 uint16 4 :offset 0) ;; guessed by decompiler
   (user-int8   int8   8 :offset 0) ;; guessed by decompiler
   (user-int80  int8     :offset 0)
   (user-int81  int8     :offset 1)
   (user-uint8  uint8  8 :offset 0) ;; guessed by decompiler
   (elt-count   int32    :offset-assert 8)
   (elt-size    uint16   :offset-assert 12)
   (elt-type    game-save-elt :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype game-save (basic)
  ((version               int32                  :offset-assert 4)
   (allocated-length      int32                  :offset-assert 8)
   (length                int32                  :offset-assert 12)
   (info-int32            int32         16       :offset-assert 16) ;; guessed by decompiler
   (info-int8             int8          64       :overlay-at info-int32) ;; guessed by decompiler
   (level-index           int32                  :offset 16)
   (gem-count             float                  :offset 20)
   (skill-count           float                  :offset 24)
   (completion-percentage float                  :offset 28)
   (minute                uint8                  :offset 36)
   (hour                  uint8                  :offset 37)
   (week                  uint8                  :offset 38)
   (day                   uint8                  :offset 39)
   (month                 uint8                  :offset 40)
   (year                  uint8                  :offset 41)
   (language              language-enum          :offset 42)
   (new-game              int32                  :offset 44)
   (game-time             time-frame             :offset 48)
   (secrets               uint32        2        :offset 56)
   (purchase-secrets      uint32        2        :offset 64)
   (features              uint32        2        :offset 72)
   (tag                   game-save-tag :inline :dynamic :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  (:methods
    (new (symbol type int) _type_) ;; 0
    (save-to-file (_type_ string) _type_) ;; 9
    (load-from-file (_type_ string) _type_) ;; 10
    (debug-inspect (_type_ symbol) _type_) ;; 11
    )
  )

(deftype auto-save (process)
  ((card                      int32                  :offset-assert 128)
   (slot                      int32                  :offset-assert 132)
   (which                     int32                  :offset-assert 136)
   (buffer                    kheap                  :offset-assert 140)
   (mode                      symbol                 :offset-assert 144) ;; guessed by decompiler
   (starting-auto-save-status basic                  :offset-assert 148)
   (result                    mc-status-code         :offset-assert 152) ;; guessed by decompiler
   (save                      game-save              :offset-assert 156) ;; guessed by decompiler
   (info                      mc-slot-info   :inline :offset-assert 160)
   (notify                    handle                 :offset-assert 464) ;; handle
   (force                     symbol                 :offset-assert 472) ;; guessed by decompiler
   (state-time                time-frame             :offset-assert 480) ;; time-frame
   (icon                      hud-sprite     :inline :offset-assert 496)
   (icon-gui-id               uint32                 :offset-assert 548)
   (message-gui-id            uint32                 :offset-assert 552)
   )
  :method-count-assert 23
  :size-assert         #x22c
  :flag-assert         #x1701b0022c
  (:state-methods
    get-heap ;; 14
    get-card ;; 15
    format-card ;; 16
    unformat-card ;; 17
    create-file ;; 18
    save ;; 19
    restore ;; 20
    (error mc-status-code) ;; 21
    done ;; 22
    )
  )

(define-extern game-save-elt->string (function game-save-elt string))
(define-extern *auto-save-info* mc-slot-info)
(define-extern auto-save-post (function pointer :behavior auto-save))
(define-extern auto-save-init-by-other (function symbol process int int symbol object :behavior auto-save))
(define-extern auto-save-command (function symbol int int process-tree symbol (pointer auto-save)))
(define-extern auto-save-check (function int))
(define-extern auto-save-user (function (pointer auto-save)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern scf-get-volume "Defined in the kernel" (function int))
(define-extern scf-get-language "Defined in the kernel" (function language-enum))
(define-extern scf-get-aspect "Defined in the kernel" (function uint))
(define-extern *boot-video-mode* "Defined in the kernel" int)

(define-extern get-current-language (function language-enum))
(define-extern *setting-control* setting-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-tables                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *no-cloud-haze-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-clear-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-smog-mood-fog-table* mood-fog-table)
(define-extern *overcast-fog-mood-fog-table* mood-fog-table)
(define-extern *overcast-clear-mood-fog-table* mood-fog-table)
(define-extern *overcast-rain-mood-fog-table* mood-fog-table)
(define-extern *storm-fog-mood-fog-table* mood-fog-table)
(define-extern *storm-clear-mood-fog-table* mood-fog-table)
(define-extern *storm-rain-mood-fog-table* mood-fog-table)
(define-extern *desert-mood-fog-table* mood-fog-table)
(define-extern *sandstorm-start-mood-fog-table* mood-fog-table)
(define-extern *sandstorm-end-mood-fog-table* mood-fog-table)
(define-extern *no-cloud-mood-color-table* mood-color-table)
(define-extern *overcast-mood-color-table* mood-color-table)
(define-extern *storm-mood-color-table* mood-color-table)
(define-extern *desert-mood-color-table* mood-color-table)
(define-extern *sandstorm-start-mood-color-table* mood-color-table)
(define-extern *sandstorm-end-mood-color-table* mood-color-table)
(define-extern *no-cloud-mood-channel-group* mood-channel-group) ;; mood-channel-group
(define-extern *overcast-mood-channel-group* mood-channel-group) ;; mood-channel-group
(define-extern *stormy-mood-channel-group* mood-channel-group) ;; mood-channel-group
(define-extern *clouds-000* mood-clouds)
(define-extern *clouds-125* mood-clouds)
(define-extern *clouds-250* mood-clouds)
(define-extern *clouds-375* mood-clouds)
(define-extern *clouds-500* mood-clouds)
(define-extern *clouds-625* mood-clouds)
(define-extern *clouds-750* mood-clouds)
(define-extern *clouds-875* mood-clouds)
(define-extern *clouds-1000* mood-clouds)
(define-extern *mood-direction-table* mood-direction-table) ;; mood-direction-table
(define-extern *mood-sky-table* mood-sky-table) ;; mood-sky-table
(define-extern *mood-interp-table* sky-color-day) ;; sky-color-day
(define-extern init-mood-control
  "Given a [[mood-control]] initialize and set it up with default settings
   @param! ctrl The [[mood-control]]
   @returns [[none]]"
  (function mood-control none))
(define-extern *mood-control* "The global [[mood-control]] which governs things like clouds, fog and weather (to some degree)" mood-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-tables2                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *overide-mood-color-table* mood-color-table) ;;
(define-extern *overide-mood-fog-table* mood-fog-table) ;;
(define-extern init-overide-table
  "Similar to the beginning of [[init-mood-control]], does the bare minimum to setup the given [[mood-table]]
   @param! table The table to initialize
   @returns [[none]]"
  (function mood-table none)) ;;
(define-extern *overide-table* mood-table) ;; mood-table
(define-extern print-mood-tables "Generates the GOAL code for defining the current state of [[*overide-table*]]" (function none)) ;; (
(define-extern desaturate-mood-colors
  "Unused - Generate GOAL code for a new [[*overide-mood-color-table*]] definition that desaturates the color
   Apply said overrides to the [[*overide-table*]]"
  (function float float float none))
(define-extern desaturate-mood-fog
  "Unused - Generate GOAL code for a new [[*overide-mood-fog-table*]] definition that desaturates the fog color
   Apply said overrides to the [[*overide-table*]]"
  (function (pointer mood-fog-table) float float none))
(define-extern *debug-mood-color-table* mood-color-table)
(define-extern *debug-mood-fog-table* mood-fog-table)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype lava-state (structure)
  ((lava float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern palette-select-special (function mood-context-core3 symbol))
(define-extern clear-mood-times (function mood-context symbol)) ;;
;; (define-extern update-mood-itimes function) ;; (function mood-context none)
;; (define-extern update-mood-direction function) ;; (function mood-context-core3 mood-table float float)
;; (define-extern update-mood-exterior function) ;; (function mood-context-core3 mood-table float int object)
;; (define-extern copy-mood-exterior function) ;; (function mood-context symbol)
;; (define-extern copy-mood-exterior-ambi function) ;; (function mood-context symbol none)
;; (define-extern clear-mood-context function) ;; (function mood-context symbol)
;; (define-extern update-mood-interior function) ;; (function mood-context float)
;; (define-extern update-mood-interior-ambient function)
;; (define-extern update-mood-flames function) ;; (function mood-context int int int float float float float :behavior time-of-day-proc)
(define-extern *flash0* (array float))
(define-extern *flash1* (array float))
(define-extern *flash2* (array float))
(define-extern *flash3* (array float))
(define-extern *flash4* (array float))
(define-extern *flash5* (array float))
(define-extern *flash6* (array float))
(define-extern *flash7* (array float))
;; (define-extern update-mood-light function) ;; (function mood-context int int float float float float float float)
;; (define-extern update-mood-lava function) ;; (function mood-context int int float float float float float float)
;; (define-extern update-mood-flicker function) ;; (function mood-context int int none)
;; (define-extern update-mood-florescent function) ;; (function mood-context int int float)
;; (define-extern update-mood-electricity function) ;; (function mood-context int int float float none)
;; (define-extern update-mood-pulse function) ;; (function mood-context int int float float float float none)
;; (define-extern update-mood-strobe function) ;; (function mood-context int int int float float)
;; (define-extern update-mood-caustics function) ;; (function mood-context int float float float float float)
;; (define-extern overide-mood-fog function)
;; (define-extern overide-mood-color function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-funcs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctywide-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

#|
(deftype ctysluma-states (structure)
  ((light   light-state        :inline :offset-assert 0)
   (flame   flames-state       :inline :offset-assert 8)
   (spec-0  sp-field-init-spec         :offset-assert 16)
   (spec-1  sp-field-init-spec         :offset-assert 20)
   (flicker float                      :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype ctyslumb-states (structure)
  ((light   light-state        :inline :offset-assert 0)
   (spec-0  sp-field-init-spec         :offset-assert 8)
   (spec-1  sp-field-init-spec         :offset-assert 12)
   (flicker float                      :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype ctyslumc-states (structure)
  ((light   light-state        :inline :offset-assert 0)
   (spec-0  sp-field-init-spec         :offset-assert 8)
   (spec-1  sp-field-init-spec         :offset-assert 12)
   (flicker float                      :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype ctygenb-states (structure)
  ((light        light-state        :inline :offset-assert 0)
   (flame        flames-state       :inline :offset-assert 8)
   (flicker      flicker-state      :inline :offset-assert 15)
   (spec-0       sp-field-init-spec         :offset-assert 20)
   (spec-1       sp-field-init-spec         :offset-assert 24)
   (spec-2       sp-field-init-spec         :offset-assert 28)
   (spec-3       sp-field-init-spec         :offset-assert 32)
   (next-flicker float                      :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype mhcitya-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype mhcityb-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype ctyport-states (structure)
  ((light           light-state        :inline :offset-assert 0)
   (spec-0          sp-field-init-spec         :offset-assert 8)
   (neon-min-bright float                      :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype ctymarka-states (structure)
  ((light light-state :inline :offset-assert 0)
   (blink float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype mountain-states (structure)
  ((light0 light-state        :inline :offset-assert 0)
   (light1 light-state        :inline :offset-assert 8)
   (spec-0 sp-field-init-spec         :offset-assert 16)
   (spec-1 sp-field-init-spec         :offset-assert 20)
   (spec-2 sp-field-init-spec         :offset-assert 24)
   (spec-3 sp-field-init-spec         :offset-assert 28)
   (spec-4 sp-field-init-spec         :offset-assert 32)
   (spec-5 sp-field-init-spec         :offset-assert 36)
   (spec-6 sp-field-init-spec         :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype ctyinda-states (structure)
  ((light light-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype ctyindb-states (structure)
  ((light   light-state :inline :offset-assert 0)
   (flicker float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype atoll-states (structure)
  ((light     light-state :inline :offset-assert 0)
   (explosion float               :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern update-mood-default function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern update-mood-copy-parent function)
;; (define-extern get-sphere-interp function) ;; (function sphere vector float float float)
;; (define-extern update-mood-ctywide function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern update-mood-copy-ctywide function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-ctysluma function) ;; (function mood-context float)
;; (define-extern update-mood-ctysluma function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-ctyslumb function) ;; (function mood-context uint)
;; (define-extern update-mood-ctyslumb function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-ctyslumc function) ;; (function mood-context none)
;; (define-extern update-mood-ctyslumc function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-ctygenb function)
;; (define-extern update-mood-ctygenb function)
;; (define-extern *mhcity-mood-fog-table* object)
;; (define-extern overide-mhcity-fog function)
;; (define-extern init-mood-mhcitya function)
;; (define-extern update-mood-mhcitya function)
;; (define-extern init-mood-mhcityb function)
;; (define-extern update-mood-mhcityb function)
;; (define-extern calc-lmhcity-palettes function)
;; (define-extern update-mood-lmhcitya function)
;; (define-extern update-mood-lmhcityb function)
;; (define-extern *ctyport-level* object)
;; (define-extern update-mood-ctyport function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern reset-marquee-color! function)
;; (define-extern add-marquee-color! function)
;; (define-extern update-mood-ctymarka function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-mountain function) ;; (function mood-context uint)
;; (define-extern update-mood-mountain function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern update-mood-ctyinda function)
;; (define-extern update-mood-ctyindb function)
;; (define-extern init-mood-atoll function) ;; (function mood-context float)
;; (define-extern update-mood-atoll function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern set-atoll-explosion! function) ;; (function float float)
;; (define-extern update-mood-atollext function) ;; (function mood-context float int none :behavior time-of-day-proc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mood-funcs2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vinroom-states (structure)
  ((main     float  :offset-assert 0)
   (flicker1 float  :offset-assert 4)
   (flicker2 float  :offset-assert 8)
   (warp     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype hideout-states (structure)
  ((flame0 flames-state :inline :offset-assert 0)
   (flame1 flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

#|
(deftype hiphog-states (structure)
  ((door                entity  :offset-assert 0) ;; guessed by decompiler
   (door-current-interp float   :offset-assert 4)
   (door-target-interp  float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype onintent-states (structure)
  ((flame0      flames-state :inline :offset-assert 0)
   (flame1      flames-state :inline :offset-assert 8)
   (flame2      flames-state :inline :offset-assert 16)
   (green-flame flames-state :inline :offset-assert 24)
   (totem0      flames-state :inline :offset-assert 32)
   (totem1      flames-state :inline :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2f
  :flag-assert         #x90000002f
  )
|#

#|
(deftype oracle-states (structure)
  ((flame0       flames-state :inline :offset-assert 0)
   (flame1       flames-state :inline :offset-assert 8)
   (flame2       flames-state :inline :offset-assert 16)
   (blue-flame   flames-state :inline :offset-assert 24)
   (door-entity  entity               :offset-assert 32) ;; guessed by decompiler
   (door-current float                :offset-assert 36)
   (door-target  float                :offset-assert 40)
   (purple-flag  symbol               :offset-assert 44) ;; guessed by decompiler
   (purple       float                :offset-assert 48)
   (purple-noise float                :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

#|
(deftype gungame-states (structure)
  ((florescent florescent-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype freehq-states (structure)
  ((flicker float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype default-interior-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

#|
(deftype garage-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern update-mood-default-interior function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern update-mood-default-interior-ambient function)
;; (define-extern update-vinroom-lights function) ;; (function mood-context none)
;; (define-extern update-mood-vinroom function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern update-hideout-lights function) ;; (function mood-context none)
;; (define-extern update-mood-hideout function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern init-mood-hiphog function) ;; (function mood-context none)
;; (define-extern update-hiphog-lights function) ;; (function mood-context none)
;; (define-extern update-mood-hiphog function) ;; (function mood-context float none :behavior time-of-day-proc)
;; (define-extern update-onintent-lights function) ;; (function mood-context none)
;; (define-extern update-mood-onintent function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern init-mood-oracle function) ;; (function mood-context symbol)
;; (define-extern update-mood-oracle function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern set-oracle-purple-flag! function) ;; (function symbol symbol)
;; (define-extern update-gungame-lights function) ;; (function mood-context none)
;; (define-extern update-mood-gungame function) ;; (function mood-context none :behavior time-of-day-proc)
;; (define-extern init-mood-garage function) ;; (function mood-context symbol)
;; (define-extern update-garage-lights function) ;; (function mood-context none)
;; (define-extern update-mood-garage function) ;; (function mood-context object int none :behavior time-of-day-proc)
;; (define-extern update-mood-freehq function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; weather-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern group-rain-screend-drop sparticle-launch-group)
;; (define-extern update-snow function) ;; (function float vector vector none)
;; (define-extern birth-func-omega-normal-orient function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern birth-func-rain function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern check-drop-level-rain function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-drop-level-rain2 function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-drop-level-splash function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern update-rain function) ;; (function float vector vector none)
(define-extern cam-master-effect (function none :behavior camera-master))
;; (define-extern sparticle-track-sun function) ;; (function int sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; time-of-day                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern time-of-day-effect object) ;; (function none)
;; (define-extern time-of-day-update function) ;; (function none :behavior time-of-day-proc)
;; (define-extern update-counters function) ;; (function float :behavior time-of-day-proc)
;; (define-extern time-of-day-tick state) ;; (state time-of-day-proc)
;; (define-extern init-time-of-day function) ;; (function object :behavior time-of-day-proc)
;; (define-extern start-time-of-day function) ;; (function (pointer process))
;; (define-extern time-of-day-setup function) ;; (function symbol symbol)
;; (define-extern time-of-day-interp-colors function) ;; (function (pointer rgba) uint mood-context none)
;; (define-extern time-of-day-interp-colors-scratch function) ;; (function (pointer rgba) time-of-day-palette mood-context none)
;; (define-extern init-time-of-day-context function) ;; (function time-of-day-context symbol)
;; (define-extern set-filter-color! function) ;; (function float float float none)
;; (define-extern tod-madd! function) ;; (function vector vector vector float)
;; (define-extern update-environment-colors function) ;; (function time-of-day-context vector)
;; (define-extern update-time-of-day function) ;; (function time-of-day-context none)
;; (define-extern calc-fade-from-fog function) ;; (function vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-data                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *sky-work* sky-work)
;; (define-extern sky-base-polygons object) ;; (inline-array sky-vertex)
;; (define-extern sky-roof-polygons object) ;; (inline-array sky-vertex)
;; (define-extern *cloud-vert-array* object) ;; cloud-vert-array
;; (define-extern *cloud-poly* object) ;; (inline-array sky-vertex)
;; (define-extern init-cloud-vert-array function) ;; (function symbol)
;; (define-extern *haze-vert-array* object) ;; haze-vert-array
;; (define-extern *haze-poly* object) ;; (inline-array sky-vertex)
;; (define-extern init-haze-vert-array function) ;; (function symbol)
;; (define-extern sky-make-sun-data function) ;; (function sky-work int float none)
;; (define-extern sky-make-moon-data function) ;; (function sky-work float none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sky-tng                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern set-tex-offset function) ;; (function int int none)
;; (define-extern draw-large-polygon function)
;; (define-extern clip-polygon-against-positive-hyperplane function)
;; (define-extern clip-polygon-against-negative-hyperplane function)
;; (define-extern render-sky-quad function) ;; (function (inline-array sky-vertex) dma-buffer none)
;; (define-extern render-sky-tri function) ;; (function (inline-array sky-vertex) dma-buffer none)
(define-extern close-sky-buffer (function dma-buffer none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load-state                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern level-base-level-name function)
;; (define-extern *borrow-city-expansion-list* object)
;; (define-extern *borrow-city-status-list* object)
;; (define-extern borrow-city-expansion function)
;; (define-extern add-want-level function)
;; (define-extern *display-load-commands* object) ;; symbol
;; (define-extern *backup-load-state* object) ;; load-state
;; (define-extern *load-state* object) ;; load-state

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level-info                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *task-level* (array symbol))
(define-extern default-level level-load-info)
(define-extern intro level-load-info)
(define-extern title level-load-info)
(define-extern vinroom level-load-info)
(define-extern ljkdxvin level-load-info)
(define-extern lvincst level-load-info)
(define-extern powergd level-load-info)
(define-extern ctywide level-load-info)
(define-extern ctywide-ff level-load-info)
(define-extern ctywide-ff-kg level-load-info)
(define-extern ctywide-ff-mh level-load-info)
(define-extern ctywide-kg level-load-info)
(define-extern ctywide-mh level-load-info)
(define-extern ctywide-mh-kg level-load-info)
(define-extern citycast level-load-info)
(define-extern gridcst level-load-info)
(define-extern ctycara level-load-info)
(define-extern ctycarkg level-load-info)
(define-extern ctycarb level-load-info)
(define-extern ctycarc level-load-info)
(define-extern ctypepa level-load-info)
(define-extern lpatkcs level-load-info)
(define-extern lblowtmh level-load-info)
(define-extern lblowtkg level-load-info)
(define-extern ctypepb level-load-info)
(define-extern lblowcst level-load-info)
(define-extern ctypepc level-load-info)
(define-extern ctypesa level-load-info)
(define-extern ctypesb level-load-info)
(define-extern ctypesc level-load-info)
(define-extern intpfall level-load-info)
(define-extern ctygenb level-load-info)
(define-extern ctysluma level-load-info)
(define-extern ctyslumb level-load-info)
(define-extern slumbset level-load-info)
(define-extern ctyslumc level-load-info)
(define-extern ctyport level-load-info)
(define-extern ctyfarma level-load-info)
(define-extern ctyfarmb level-load-info)
(define-extern ctyinda level-load-info)
(define-extern ctyindb level-load-info)
(define-extern stadium level-load-info)
(define-extern stadiuma level-load-info)
(define-extern lppatrol level-load-info)
(define-extern lpattack level-load-info)
(define-extern stadiumb level-load-info)
(define-extern towera level-load-info)
(define-extern towerb level-load-info)
(define-extern towerc level-load-info)
(define-extern towercst level-load-info)
(define-extern ltowera level-load-info)
(define-extern ltowcity level-load-info)
(define-extern ltowerb level-load-info)
(define-extern rubblea level-load-info)
(define-extern rubblea2 level-load-info)
(define-extern rubbleb level-load-info)
(define-extern rubblec level-load-info)
(define-extern rublcst level-load-info)
(define-extern lbombbot level-load-info)
(define-extern ljinx level-load-info)
(define-extern lctypatk level-load-info)
(define-extern lctyhijk level-load-info)
(define-extern lctypalt level-load-info)
(define-extern lctyass level-load-info)
(define-extern lctydest level-load-info)
(define-extern lctyprot level-load-info)
(define-extern lctyblow level-load-info)
(define-extern lctysnpr level-load-info)
(define-extern onintent level-load-info)
(define-extern lbbush level-load-info)
(define-extern hiphog level-load-info)
(define-extern ltnjxhip level-load-info)
(define-extern gungame level-load-info)
(define-extern gungame1 level-load-info)
(define-extern gungame2 level-load-info)
(define-extern citylow level-load-info)
(define-extern freehq level-load-info)
(define-extern freecast level-load-info)
(define-extern lfreeout level-load-info)
(define-extern mhctycst level-load-info)
(define-extern mhcitya level-load-info)
(define-extern mhcityb level-load-info)
(define-extern lmhcitya level-load-info)
(define-extern lmhcityb level-load-info)
(define-extern comba level-load-info)
(define-extern combb level-load-info)
(define-extern combc level-load-info)
(define-extern combd level-load-info)
(define-extern combe level-load-info)
(define-extern combm level-load-info)
(define-extern combn level-load-info)
(define-extern combx level-load-info)
(define-extern raila level-load-info)
(define-extern railb level-load-info)
(define-extern railb2 level-load-info)
(define-extern railc level-load-info)
(define-extern raild level-load-info)
(define-extern raile level-load-info)
(define-extern railf level-load-info)
(define-extern railx level-load-info)
(define-extern lcitysml level-load-info)
(define-extern railcst level-load-info)
(define-extern minea level-load-info)
(define-extern lpeckfly level-load-info)
(define-extern mineb level-load-info)
(define-extern minec level-load-info)
(define-extern mined level-load-info)
(define-extern minee level-load-info)
(define-extern sewa level-load-info)
(define-extern sewb level-load-info)
(define-extern sewc level-load-info)
(define-extern sewd level-load-info)
(define-extern sewe level-load-info)
(define-extern sewf level-load-info)
(define-extern sewg level-load-info)
(define-extern sewh level-load-info)
(define-extern sewi level-load-info)
(define-extern sewj level-load-info)
(define-extern sewk level-load-info)
(define-extern sewl level-load-info)
(define-extern sewm level-load-info)
(define-extern sewn level-load-info)
(define-extern sewo level-load-info)
(define-extern forestx level-load-info)
(define-extern foresta level-load-info)
(define-extern lforplnt level-load-info)
(define-extern lforring level-load-info)
(define-extern lformach level-load-info)
(define-extern forestb level-load-info)
(define-extern wasintro level-load-info)
(define-extern introcst level-load-info)
(define-extern intpalrf level-load-info)
(define-extern inttitle level-load-info)
(define-extern wasall level-load-info)
(define-extern waswide level-load-info)
(define-extern wascitya level-load-info)
(define-extern lseemwca level-load-info)
(define-extern wascityb level-load-info)
(define-extern wascast level-load-info)
(define-extern wasseem level-load-info)
(define-extern waspgame level-load-info)
(define-extern wasdefen level-load-info)
(define-extern wcaseem level-load-info)
(define-extern wasleapr level-load-info)
(define-extern wasdoors level-load-info)
(define-extern outrocst level-load-info)
(define-extern outcast3 level-load-info)
(define-extern loutro level-load-info)
(define-extern loutro2 level-load-info)
(define-extern loutro3 level-load-info)
(define-extern wasstada level-load-info)
(define-extern wasstadb level-load-info)
(define-extern wasstadc level-load-info)
(define-extern arenacst level-load-info)
(define-extern museum level-load-info)
(define-extern museum2 level-load-info)
(define-extern museum3 level-load-info)
(define-extern museum3b level-load-info)
(define-extern museum4 level-load-info)
(define-extern museum4b level-load-info)
(define-extern temp level-load-info)
(define-extern ldampeck level-load-info)
(define-extern ldmpckgn level-load-info)
(define-extern ldamsig level-load-info)
(define-extern ldampksm level-load-info)
(define-extern lkleever level-load-info)
(define-extern lsig level-load-info)
(define-extern lsigklv level-load-info)
(define-extern lsigjakc level-load-info)
(define-extern loninsim level-load-info)
(define-extern ljakc level-load-info)
(define-extern ljakndax level-load-info)
(define-extern lsamos level-load-info)
(define-extern ljakcklv level-load-info)
(define-extern ljkcdmkl level-load-info)
(define-extern ldamklev level-load-info)
(define-extern lashelin level-load-info)
(define-extern ljak level-load-info)
(define-extern ljakklev level-load-info)
(define-extern ljaksig level-load-info)
(define-extern ljkdmpk level-load-info)
(define-extern ljndklev level-load-info)
(define-extern ltorn level-load-info)
(define-extern lerrol level-load-info)
(define-extern ltornsam level-load-info)
(define-extern ltornjnx level-load-info)
(define-extern ltnfxhip level-load-info)
(define-extern lwlandm level-load-info)
(define-extern ltrtwhls level-load-info)
(define-extern lsnkwhls level-load-info)
(define-extern lbiped level-load-info)
(define-extern lmech level-load-info)
(define-extern lprenme level-load-info)
(define-extern lgunnorm level-load-info)
(define-extern lgunrnc level-load-info)
(define-extern waschase level-load-info)
(define-extern waspala level-load-info)
(define-extern lwstdpck level-load-info)
(define-extern ljkfeet level-load-info)
(define-extern desert level-load-info)
(define-extern warpcast level-load-info)
(define-extern deserta level-load-info)
(define-extern desbcst level-load-info)
(define-extern deserrol level-load-info)
(define-extern desertb level-load-info)
(define-extern desertc level-load-info)
(define-extern desertd level-load-info)
(define-extern deserte level-load-info)
(define-extern desertf level-load-info)
(define-extern desertg level-load-info)
(define-extern ldesgcst level-load-info)
(define-extern deserth level-load-info)
(define-extern deswalk level-load-info)
(define-extern desert-game level-load-info)
(define-extern desrace1 level-load-info)
(define-extern desboss1 level-load-info)
(define-extern desboss2 level-load-info)
(define-extern desinter level-load-info)
(define-extern destrack level-load-info)
(define-extern desrally level-load-info)
(define-extern deshover level-load-info)
(define-extern deshunt level-load-info)
(define-extern desliz level-load-info)
(define-extern desresc level-load-info)
(define-extern desrescc level-load-info)
(define-extern desrescg level-load-info)
(define-extern desoasis level-load-info)
(define-extern oasiscst level-load-info)
(define-extern desjump level-load-info)
(define-extern deschase level-load-info)
(define-extern desbattl level-load-info)
(define-extern lwassig level-load-info)
(define-extern lwasbbv level-load-info)
(define-extern lnstcst level-load-info)
(define-extern lbbring1 level-load-info)
(define-extern lbbring2 level-load-info)
(define-extern lbbring3 level-load-info)
(define-extern lbbring4 level-load-info)
(define-extern lbbring5 level-load-info)
(define-extern lbbring6 level-load-info)
(define-extern lbbring7 level-load-info)
(define-extern lbbtcha1 level-load-info)
(define-extern lbbtcha2 level-load-info)
(define-extern lbbtcha3 level-load-info)
(define-extern lbbspid level-load-info)
(define-extern lbbspirt level-load-info)
(define-extern lbbsprt2 level-load-info)
(define-extern lbbsprt3 level-load-info)
(define-extern lbbsdrp1 level-load-info)
(define-extern lbbsdrp2 level-load-info)
(define-extern lbbsdrp3 level-load-info)
(define-extern nsta level-load-info)
(define-extern nstb level-load-info)
(define-extern lnstoba level-load-info)
(define-extern lnstobb level-load-info)
(define-extern lnstobc level-load-info)
(define-extern templex level-load-info)
(define-extern templea level-load-info)
(define-extern templeb level-load-info)
(define-extern templec level-load-info)
(define-extern templed level-load-info)
(define-extern templee level-load-info)
(define-extern hanga level-load-info)
(define-extern hangb level-load-info)
(define-extern volcanox level-load-info)
(define-extern volcanoa level-load-info)
(define-extern factorya level-load-info)
(define-extern lfactory level-load-info)
(define-extern lfaccar level-load-info)
(define-extern lfacrm1 level-load-info)
(define-extern lfacrm2 level-load-info)
(define-extern lfaccity level-load-info)
(define-extern lfacctyb level-load-info)
(define-extern factoryb level-load-info)
(define-extern factoryc level-load-info)
(define-extern factoryd level-load-info)
(define-extern lfacout level-load-info)
(define-extern warinta level-load-info)
(define-extern precura level-load-info)
(define-extern precurb level-load-info)
(define-extern precurc level-load-info)
(define-extern lprecurc level-load-info)
(define-extern precurd level-load-info)
(define-extern bikearena level-load-info)
(define-extern halfpipe level-load-info)
(define-extern sndtest level-load-info)
(define-extern vistest level-load-info)
(define-extern bsbs level-load-info)
(define-extern tobytest level-load-info)
(define-extern hermtest level-load-info)
(define-extern chartest level-load-info)
(define-extern ctyfence level-load-info)
(define-extern testisle level-load-info)
(define-extern gregtest level-load-info)
(define-extern 4amy level-load-info)
(define-extern *level-load-list* pair)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; level                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern level-memory-mode->string (function level-memory-mode string))
(define-extern lookup-level-info (function symbol level-load-info))
;; (define-extern remap-level-name function) ;; (function level-load-info symbol)
;; (define-extern add-bsp-drawable function) ;; (function bsp-header level symbol display-frame none)
;; (define-extern *login-state* object) ;; login-state
(define-extern *print-login* symbol)
;; (define-extern load-buffer-resize function) ;; (function level dgo-header none)
;; (define-extern level-find-borrow-slot function)
;; (define-extern level-update-after-load function) ;; (function level login-state level)
;; (define-extern bg function) ;; (function symbol none)
;; (define-extern play function) ;; (function symbol symbol int)
;; (define-extern play-boot function) ;; (function none)
;; (define-extern sound-bank-name->mode function)
;; (define-extern update-sound-banks function) ;; (function int)
;; (define-extern show-level function) ;; (function symbol int)
(define-extern *default-level* level)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; game-text-info is already defined!

;; (define-extern *expand-buf-number* object) ;; int
;; (define-extern *game-text-word* object) ;; string
;; (define-extern *game-text-line* object) ;; string
;; (define-extern *expanded-text-line0* object) ;; string
;; (define-extern *expanded-text-line1* object) ;; string
;; (define-extern *level-text-file-load-flag* object) ;; symbol
;; (define-extern convert-korean-text function) ;; (function string string)
;; (define-extern text-is-loading object) ;; symbol
;; (define-extern load-game-text-info function) ;; (function string (pointer object) kheap int)
;; (define-extern load-level-text-files function) ;; (function int none)
;; (define-extern draw-debug-text-box function) ;; (function font-context none)
;; (define-extern print-game-text-scaled function) ;; (function string float font-context bucket-id none)
(define-extern print-game-text (function string font-context symbol int bucket-id float))
;; (define-extern disable-level-text-file-loading function) ;; (function none)
;; (define-extern enable-level-text-file-loading function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-hash                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern add-collide-debug-box function) ;; (function vector rgba none)
;; (define-extern print-collide-cache-tri-count function) ;; (function none)
;; (define-extern print-exceeded-max-cache-tris function) ;; (function none)
;; (define-extern fill-bg-using-box-new function) ;; (function collide-cache object collide-query none)
;; (define-extern fill-bg-using-line-sphere-new function) ;; (function collide-cache object collide-query none)
;; (define-extern collide-list-fill-bg-using-box function) ;; (function collide-cache collide-list collide-query none)
;; (define-extern collide-list-fill-bg-using-line-sphere function) ;; (function collide-cache collide-list collide-query none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-probe                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collide-probe-stack-elem (structure)
  ((child uint32  :offset-assert 0)
   (count uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype collide-probe-stack (structure)
  ((data collide-probe-stack-elem 1024 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )
|#

;; (define-extern creates-new-method? function) ;; (function type int symbol)
;; (define-extern overrides-parent-method? function) ;; (function type int symbol)
;; (define-extern describe-methods function) ;; (function type symbol)
;; (define-extern indent-to function) ;; (function int none)
;; (define-extern probe-traverse-draw-node function) ;; (function draw-node int none)
;; (define-extern probe-traverse-inline-array-node function) ;; (function drawable-inline-array-node int none)
;; (define-extern probe-traverse-collide-fragment function) ;; (function drawable-tree-collide-fragment int none)
;; (define-extern *collide-probe-stack* object) ;; collide-probe-stack
;; (define-extern collide-vu0-block object) ;; vu-function
;; (define-extern collide-probe-node function) ;; (function (inline-array draw-node) int collide-list int)
;; (define-extern print-out function) ;; (function int object)
;; (define-extern collide-probe-instance-tie-collide-frags function) ;; (function none)
;; (define-extern collide-probe-instance-tie function) ;; (function object int collide-list int int)
;; (define-extern collide-probe-collide-fragment-tree-make-list function) ;; (function drawable-tree-collide-fragment collide-list none)
;; (define-extern collide-probe-instance-tie-tree-make-list function) ;; (function drawable-tree-instance-tie collide-list int)
;; (define-extern collide-upload-vu0 function) ;; (function none)
;; (define-extern collide-probe-make-list function) ;; (function level collide-list none)
;; (define-extern distc function) ;; (function vector vector float)
;; (define-extern interpolate function) ;; (function float float float float float float)
;; (define-extern misty-ambush-height function) ;; (function vector float)
;; (define-extern misty-ambush-height-probe function) ;; (function vector float float)
;; (define-extern pke-collide-test function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-frag                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-mesh                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sopt-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype spat-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype oot-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-touch                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype add-prims-touching-work (structure)
  ((tri1 collide-tri-result  :offset-assert 0)
   (tri2 collide-tri-result  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

(define-extern get-intersect-point (function vector touching-prims-entry collide-shape touching-shapes-entry vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-edge-grab              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pbhp-stack-vars (structure)
  ((edge        collide-edge-edge         :offset-assert 0)
   (allocated   basic                     :offset-assert 4)
   (neg-hold-pt vector            :inline :offset-assert 16)
   (split-vec   vector            :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype faei-stack-vars (structure)
  ((hold-edge-vec-norm vector :inline :offset-assert 0)
   (adj-edge-vec-norm  vector :inline :offset-assert 16)
   (found-left?        symbol         :offset-assert 32) ;; guessed by decompiler
   (left-dot           float          :offset-assert 36)
   (found-right?       symbol         :offset-assert 40) ;; guessed by decompiler
   (right-dot          float          :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern *no-walk-surface* surface) ;; surface

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern find-ground-point function) ;; (function control-info vector float float vector)
;; (define-extern target-attack-up function) ;; (function target symbol symbol none)
(define-extern collide-shape-moving-angle-set! (function collide-shape-moving vector vector none))
(define-extern cshape-reaction-update-state (function control-info collide-query vector none))
(define-extern cshape-reaction-default (function control-info collide-query vector vector collide-status))
;; (define-extern cshape-reaction-just-move function) ;; (function control-info collide-query vector collide-status)
;; (define-extern collide-shape-draw-debug-marks function) ;; (function none)
;; (define-extern *col-timer* object) ;; stopwatch
;; (define-extern *frame-timer* object) ;; stopwatch
;; (define-extern *col-timer-enable* object) ;; symbol
;; (define-extern debug-report-col-stats function) ;; (function int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-shape-rider            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *collide-vif0-init* array) ;; (array uint32)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-planes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern collide-planes-intersect function)
;; (define-extern collide-planes-test0 function)
;; (define-extern collide-planes-test1 function)
;; (define-extern collide-planes function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spatial-hash                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grid-hash-work (basic)
  ((result-words      uint8  32      :offset-assert 16) ;; guessed by decompiler
   (result-bits       uint8  32      :offset-assert 16) ;; guessed by decompiler
   (object-id         int32          :offset-assert 48)
   (temp-box-min      vector :inline :offset-assert 64)
   (temp-box-max      vector :inline :offset-assert 80)
   (visit-count       int32          :offset-assert 96)
   (temp-time         uint32         :offset-assert 100)
   (queue-object-time uint32         :offset-assert 104)
   (make-hash-time    uint32         :offset-assert 108)
   (search-time       uint32         :offset-assert 112)
   (add-object-time   uint32         :offset-assert 116)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )
|#

;; (define-extern *grid-hash-work* grid-hash-work) ;; grid-hash-work
;; (define-extern validate-bucket-bits function) ;; (function grid-hash (pointer grid-hash-word) symbol)
;; (define-extern draw-grid function) ;; (function vector vector (pointer int8) rgba none)
;; (define-extern draw-sphere-box function) ;; (function sphere rgba none)
;; (define-extern draw-line-sphere function) ;; (function vector vector float rgba none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; actor-hash                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype actor-cshape-ptr (structure)
  ((cshape collide-shape  :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype actor-hash-bucket (structure)
  ((length     int16                            :offset-assert 0)
   (max-length int16                            :offset-assert 2)
   (data       (inline-array actor-cshape-ptr)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (actor-hash-bucket-method-9 () none) ;; 9 ;; (add-actor-cshape (_type_ collide-shape) none)
    )
  )
|#

#|
(deftype actor-hash-buckets (structure)
  ((hash spatial-hash              :offset-assert 0) ;; guessed by decompiler
   (list engine                    :offset-assert 4) ;; guessed by decompiler
   (data actor-hash-bucket 4       :offset-assert 8) ;; guessed by decompiler
   (tpos vector            :inline :offset-assert 80)
   )
  :method-count-assert 10
  :size-assert         #x60
  :flag-assert         #xa00000060
  (:methods
    (actor-hash-buckets-method-9 () none) ;; 9 ;; (hash-actors (_type_) none)
    )
  )
|#

(define-extern *actor-hash* spatial-hash)
;; (define-extern *actor-hash-buckets* object) ;; actor-hash-buckets
;; (define-extern update-actor-hash function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; merc-death                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *merc-death-globals* object) ;; vector
;; (define-extern birth-func-death-sparks function) ;; (function none)
;; (define-extern death-seed death-info) ;; death-info
;; (define-extern start-seed-effect function) ;; (function process-drawable vector cspace none)
;; (define-extern death-default death-info) ;; death-info
;; (define-extern death-warp-in death-info) ;; death-info
;; (define-extern death-warp-out death-info) ;; death-info
;; (define-extern sparticle-texture-glow-soft function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern merc-death-spawn function) ;; (function int vector vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype water-control (basic)
  ((flags             water-flag            :offset-assert 4) ;; water-flags
   (process           target                :offset-assert 8) ;; guessed by decompiler
   (joint-index       int32                 :offset-assert 12)
   (top-y-offset      float                 :offset-assert 16)
   (attack-id         uint32                :offset-assert 20)
   (enter-water-time  time-frame            :offset-assert 24) ;; time-frame
   (wade-time         time-frame            :offset-assert 32) ;; time-frame
   (on-water-time     time-frame            :offset-assert 40) ;; time-frame
   (enter-swim-time   time-frame            :offset-assert 48) ;; time-frame
   (swim-time         time-frame            :offset-assert 56) ;; time-frame
   (base-height       meters                :offset-assert 64)
   (wade-height       meters                :offset-assert 68)
   (swim-height       meters                :offset-assert 72)
   (surface-height    meters                :offset-assert 76)
   (bottom-height     meters                :offset-assert 80)
   (collide-height    meters                :offset-assert 84)
   (height            meters                :offset-assert 88)
   (height-offset     float         4       :offset-assert 92) ;; guessed by decompiler
   (base-ocean-offset meters                :offset 92)
   (real-ocean-offset meters                :offset 92)
   (ocean-offset      meters                :offset 96)
   (bob-offset        meters                :offset 100)
   (align-offset      meters                :offset 104)
   (swim-depth        meters                :offset 108)
   (bob               smush-control :inline :offset-assert 112)
   (ripple            handle                :offset-assert 144) ;; handle
   (ripple-size       meters                :offset-assert 152)
   (wake-size         meters                :offset-assert 156)
   (bottom            vector        2 :inline :offset-assert 160) ;; guessed by decompiler
   (top               vector        2 :inline :offset-assert 192) ;; guessed by decompiler
   (enter-water-pos   vector        :inline :offset-assert 224)
   (drip-old-pos      vector        :inline :offset-assert 240)
   (drip-joint-index  int32                 :offset-assert 256)
   (drip-wetness      float                 :offset-assert 260)
   (drip-time         time-frame            :offset-assert 264) ;; time-frame
   (drip-speed        float                 :offset-assert 272)
   (drip-height       meters                :offset-assert 276)
   (drip-mult         float                 :offset-assert 280)
   (distort-time      time-frame            :offset-assert 288) ;; time-frame
   (enter-water-sound sound-name            :offset-assert 304)
   (normal            vector        :inline :offset-assert 320)
   )
  :method-count-assert 18
  :size-assert         #x150
  :flag-assert         #x1200000150
  (:methods
    (new (symbol type process int float float float) _type_) ;; 0
    (water-control-method-9 () none) ;; 9 ;; (water-control-method-9 (_type_) none)
    (water-control-method-10 () none) ;; 10 ;; (water-control-method-10 (_type_) none)
    (start-bobbing! (_type_ float int int) none) ;; 11
    (distance-from-surface (_type_) float) ;; 12
    (spawn-ripples (_type_ float vector int vector symbol) none) ;; 13
    (display-water-marks? (_type_) symbol) ;; 14
    (water-control-method-15 () none) ;; 15 ;; (enter-water (_type_) none)
    (water-control-method-16 () none) ;; 16 ;; (water-control-method-16 (_type_) none)
    (water-control-method-17 () none) ;; 17
    )
  )

(deftype water-vol (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; camera                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cam-slave-get-vector-with-offset (function entity-actor vector symbol symbol))
(define-extern cam-slave-get-flags (function entity symbol uint))
(define-extern cam-slave-get-float (function entity symbol float float))
(define-extern cam-slave-get-fov (function entity float))
(define-extern cam-slave-get-intro-step (function entity float))
(define-extern cam-slave-get-interp-time (function entity float))
(define-extern cam-slave-get-rot (function entity-actor matrix matrix))
(define-extern cam-state-from-entity (function entity (state camera-slave)))
(define-extern parameter-ease-none (function object object))
(define-extern parameter-ease-clamp (function float float))
(define-extern parameter-ease-lerp-clamp (function float float))
(define-extern parameter-ease-sqrt-clamp (function float float))
(define-extern fourth-power (function float float))
(define-extern third-power (function float float))
(define-extern parameter-ease-sqr-clamp (function float float))
(define-extern parameter-ease-cube-clamp (function float float))
(define-extern parameter-ease-sin-clamp (function float float))
(define-extern *cam-res-string* string)
(define-extern cam-slave-init-vars (function none :behavior camera-slave))
(define-extern cam-slave-go (function (state camera-slave) none :behavior camera-slave))
(define-extern cam-slave-init (function (state camera-slave) entity none :behavior camera-slave))
(define-extern cam-standard-event-handler (function process int symbol event-message-block object :behavior camera-slave))
(define-extern cam-curve-pos (function vector vector curve symbol vector :behavior camera-slave))
(define-extern cam-curve-setup (function vector none :behavior camera-slave))
(define-extern cam-calc-follow! (function cam-rotation-tracker vector symbol vector))
(define-extern mat-remove-z-rot (function matrix vector matrix))
(define-extern slave-matrix-blend-2 (function matrix cam-slave-options-u32 vector matrix matrix))
(define-extern vector-into-frustum-nosmooth! (function matrix vector float vector))
(define-extern slave-set-rotation! (function cam-rotation-tracker vector cam-slave-options-u32 float symbol none))
(define-extern v-slrp2! (function vector vector vector float vector float vector))
(define-extern v-slrp3! (function vector vector vector vector float vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-interface                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern position-in-front-of-camera! (function vector float float vector))
(define-extern position-in-front-of-screen! (function vector float vector vector))
(define-extern matrix-local->world (function symbol symbol matrix))
(define-extern matrix-world->local (function symbol object matrix))
(define-extern *camera-dummy-vector* vector)
(define-extern camera-pos (function vector))
(define-extern math-camera-pos (function vector))
(define-extern camera-matrix (function matrix))
(define-extern math-camera-matrix (function matrix))
(define-extern camera-angle (function float))
(define-extern camera-teleport-to-entity (function entity-actor symbol :behavior process))
(define-extern camera-teleport-to-entity-named (function string none))
(define-extern camera-teleport-to-location (function float float float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-master                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern reset-follow (function symbol object :behavior camera-master))
(define-extern reset-target-tracking (function object :behavior camera-master))
(define-extern master-track-target (function object :behavior camera-master))
(define-extern setup-slave-for-hopefull (function camera-slave none))
(define-extern master-is-hopeful-better? (function camera-slave camera-slave symbol :behavior camera-master))
(define-extern master-choose-entity (function cam-setting-data symbol :behavior camera-master))
(define-extern cam-master-set-entity (function cam-setting-data none))
(define-extern cam-master-activate-slave (function symbol none))
(define-extern cam-master-init (function none :behavior camera-master))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-eye-bank (basic)
  ((rot-speed   float  :offset-assert 4)
   (max-degrees float  :offset-assert 8)
   (max-fov     float  :offset-assert 12)
   (min-fov     float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-string-bank (basic)
  ((los-coll-rad  meters  :offset-assert 4)
   (los-coll-rad2 meters  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype los-dist (structure)
  ((par-dist  float  :offset-assert 0)
   (lat-dist  float  :offset-assert 4)
   (vert-dist float  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype collide-los-dist-info (structure)
  ((min-par float  :offset-assert 0)
   (max-par float  :offset-assert 4)
   (min-lat float  :offset-assert 8)
   (max-lat float  :offset-assert 12)
   (min-vp  float  :offset-assert 16)
   (max-vp  float  :offset-assert 20)
   (min-vn  float  :offset-assert 24)
   (max-vn  float  :offset-assert 28)
   (count   int32  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype collide-los-result (structure)
  ((lateral       vector                :inline :offset-assert 0)
   (cw            collide-los-dist-info :inline :offset-assert 16)
   (ccw           collide-los-dist-info :inline :offset-assert 64)
   (straddle      collide-los-dist-info :inline :offset-assert 112)
   (lateral-valid symbol                        :offset-assert 148) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

(deftype cam-stick-bank (basic)
  ((max-z meters  :offset-assert 4)
   (min-z meters  :offset-assert 8)
   (max-y meters  :offset-assert 12)
   (min-y meters  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype cam-bike-bank (basic)
  ((min-z meters  :offset-assert 4)
   (max-z meters  :offset-assert 8)
   (min-y meters  :offset-assert 12)
   (max-y meters  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(define-extern cam-standoff-calc-trans (function vector :behavior camera-slave))
(define-extern *CAM_EYE-bank* cam-eye-bank)
(define-extern cam-curve-closest-point (function curve vector float float int float))
(define-extern cam-circular-position-into-max-angle (function vector vector float vector :behavior camera-slave))
(define-extern cam-circular-position (function symbol vector :behavior camera-slave))
(define-extern cam-circular-code (function float :behavior camera-slave))
(define-extern *CAM_STRING-bank* cam-string-bank)
(define-extern cam-string-find-position-rel! (function vector symbol))
(define-extern cam-string-set-position-rel! (function vector cam-slave-options :behavior camera-slave))
(define-extern string-push-help (function float))
(define-extern cam-draw-collide-cache (function collide-cache none))
(define-extern dist-info-init (function collide-los-dist-info none))
(define-extern dist-info-valid? (function collide-los-dist-info symbol))
(define-extern dist-info-append (function collide-los-dist-info vector none))
(define-extern dist-info-print (function collide-los-dist-info string object))
(define-extern los-cw-ccw (function (inline-array collide-cache-tri) vector vector float collide-los-result vector float symbol :behavior camera-slave))
(define-extern cam-los-spline-collide (function vector vector pat-surface float))
(define-extern cam-los-setup-lateral (function collide-los-result vector vector symbol :behavior camera-slave))
(define-extern cam-los-collide (function vector vector collide-los-result pat-surface symbol :behavior camera-slave))
(define-extern cam-string-follow (function object :behavior camera-slave))
(define-extern cam-string-line-of-sight (function vector :behavior camera-slave))
(define-extern cam-dist-analog-input (function int float float))
(define-extern cam-string-joystick (function float :behavior camera-slave))
(define-extern cam-string-find-hidden (function none :behavior camera-slave))
(define-extern cam-string-move (function object :behavior camera-slave))
(define-extern cam-string-code (function object :behavior camera-slave))
(define-extern set-string-params (function vector :behavior camera-slave))
(define-extern *CAM_STICK-bank* cam-stick-bank)
(define-extern cam-stick-code (function none :behavior camera-slave))
(define-extern *CAM_BIKE-bank* cam-bike-bank)
(define-extern cam-calc-bike-follow! (function cam-rotation-tracker vector symbol vector :behavior camera-slave))
(define-extern cam-bike-code (function none :behavior camera-slave))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-states-dbg                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-point-watch-bank (basic)
  ((speed     float   :offset-assert 4)
   (rot-speed degrees :offset-assert 8) ;; degrees
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype cam-free-bank (basic)
  ((speed     float   :offset-assert 4)
   (rot-speed degrees :offset-assert 8) ;; degrees
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype camera-free-floating-move-info (structure)
  ((rv vector :inline :offset-assert 0)
   (tv vector :inline :offset-assert 16)
   (up vector :inline :offset-assert 32)
   (tm matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(define-extern *CAM_POINT_WATCH-bank* cam-point-watch-bank)
(define-extern *CAM_FREE-bank* cam-free-bank)
(define-extern cam-mouse-input (function matrix vector vector object))
(define-extern cam-free-floating-input (function matrix vector vector int int vector))
(define-extern cam-free-floating-move (function matrix vector vector int vector))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-combiner                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cam-helper-temp (function (pointer camera-slave) (pointer camera-slave) float matrix :behavior camera-combiner))
(define-extern cam-combiner-init (function none :behavior camera-combiner))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-update                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern plane-from-points (function (inline-array plane) vector vector vector int float))
(define-extern set-point (function vector float float float float))
(define-extern update-view-planes (function math-camera (inline-array plane) float matrix float))
(define-extern *update-leaf-when-outside-bsp* symbol)
(define-extern update-visible (function math-camera symbol))
(define-extern *save-camera-inv-rot* matrix)
(define-extern move-camera-from-pad (function math-camera math-camera))
(define-extern external-cam-reset! (function none))
(define-extern *start-timer* int)
(define-extern *timer-value* int)
(define-extern *start-pos* vector)
(define-extern update-camera (function symbol))
(define-extern move-level-by-name (function symbol float float float vector))
(define-extern execute-cam-post-hook-engine (function int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vol-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype plane-volume (structure)
  ((volume-type  symbol                :offset-assert 0) ;; guessed by decompiler
   (point-count  int16                 :offset-assert 4)
   (normal-count int16                 :offset-assert 6)
   (first-point  (pointer vector)      :offset-assert 8) ;; (pointer vector)
   (first-normal (pointer vector)      :offset-assert 12) ;; (pointer vector)
   (num-planes   int32                 :offset-assert 16)
   (plane        (inline-array plane)  :offset-assert 20) ;; guessed by decompiler
   )
  :pack-me
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (plane-volume-method-9 (_type_ symbol vector-array vector-array) plane-volume) ;; 9
    (debug-draw (_type_) none) ;; 10
    (point-in-vol? (_type_ vector float) symbol) ;; 11
    )
  )

;; +++vol-h:vol-flags
(defenum vol-flags
  :bitfield #t
  :type uint32
  (display?)
  (vol-flags-1)
  )
;; ---vol-h:vol-flags

(deftype vol-control (basic)
  ((flags         vol-flags           :offset-assert 4) ;; guessed by decompiler
   (process       process-drawable    :offset-assert 8) ;; guessed by decompiler
   (pos-vol-count int32               :offset-assert 12)
   (pos-vol       plane-volume     32 :inline :offset-assert 16) ;; guessed by decompiler
   (neg-vol-count int32               :offset-assert 784)
   (neg-vol       plane-volume     32 :inline :offset-assert 788) ;; guessed by decompiler
   (debug-point   vector-array        :offset-assert 1556) ;; guessed by decompiler
   (debug-normal  vector-array        :offset-assert 1560) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x61c
  :flag-assert         #xc0000061c
  (:methods
    (new (symbol type process-drawable) _type_) ;; 0
    (debug-draw (_type_) none) ;; 9
    (vol-control-method-10 (_type_ plane) symbol) ;; 10
    (should-display? (_type_) symbol) ;; 11
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-layout                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cam-layout-bank (basic)
  ((spline-t    float  :offset-assert 4)
   (spline-step float  :offset-assert 8)
   (intro-t     float  :offset-assert 12)
   (intro-step  float  :offset-assert 16)
   (debug-t     float  :offset-assert 20)
   (debug-step  float  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype clm-basic (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; +++cam-layout:clm-item-action-options
(defenum clm-item-action-options
  :type uint64
  :bitfield #t
  (clm0 0)
  (clm1 1)
  (clm2 2)
  (clm3 3)
  (clm4 4)
  (clm5 5)
  (clm6 6)
  (clm7 7)
  )
;; ---cam-layout:clm-item-action-options

;; +++cam-layout:pad-buttons-u64
(defenum pad-buttons-u64
  :type uint64
  :bitfield #t
  :copy-entries pad-buttons
  )
;; ---cam-layout:pad-buttons-u64

(deftype clm-item-action (structure)
  ((button  pad-buttons-u64 :offset-assert 0)
   (options clm-item-action-options :offset-assert 8)
   (func    symbol  :offset-assert 16) ;; guessed by decompiler
   (parm0   int32   :offset-assert 20) ;; guessed by decompiler
   (parm0-sym symbol :offset 20)
   (parm1   symbol  :offset-assert 24) ;; guessed by decompiler
   (parm1-basic basic :offset 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  ;; field parm0 uses ~A with a signed load. field parm1 uses ~A with a signed load.
  )

(deftype clm-item (clm-basic)
  ((description   string                  :offset-assert 4) ;; guessed by decompiler
   (button-symbol symbol                  :offset-assert 8) ;; guessed by decompiler
   (action        clm-item-action :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype clm-list-item (basic)
  ((description string                   :offset-assert 4) ;; guessed by decompiler
   (track-val   symbol                   :offset-assert 8) ;; guessed by decompiler
   (val-func    symbol                   :offset-assert 12) ;; guessed by decompiler
   (val-parm0   int32                    :offset-assert 16) ;; guessed by decompiler
   (val-parm0-sym symbol                 :offset 16)
   (val-parm1   symbol                   :offset-assert 20) ;; guessed by decompiler
   (actions     (array clm-item-action)  :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  ;; field track-val uses ~A with a signed load. field val-parm0 uses ~A with a signed load. field val-parm1 uses ~A with a signed load.
  )

(deftype clm-list (clm-basic)
  ((tracker       symbol                 :offset-assert 4) ;; guessed by decompiler
   (cur-list-item int32                  :offset-assert 8)
   (items         (array clm-list-item)  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype clm (basic)
  ((title string             :offset-assert 4) ;; guessed by decompiler
   (items (array clm-basic)  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype volume-descriptor-array (inline-array-class)
  ((data plane-volume :dynamic :inline :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype cam-layout (process)
  ((cam-entity      entity-camera  :offset-assert 128) ;; guessed by decompiler
   (num-entities    int32          :offset-assert 132)
   (cur-entity      int32          :offset-assert 136)
   (num-volumes     int32          :offset-assert 140)
   (cur-volume      int32          :offset-assert 144)
   (first-pvol      int32          :offset-assert 148)
   (first-cutoutvol int32          :offset-assert 152)
   (res-key         float          :offset-assert 156)
   )
  :method-count-assert 14
  :size-assert         #xa0
  :flag-assert         #xe002000a0
  (:states
    cam-layout-active
    )
  )

(deftype interp-test-info (structure)
  ((from   vector   :inline :offset-assert 0)
   (to     vector   :inline :offset-assert 16)
   (origin vector   :inline :offset-assert 32)
   (color  vector4w         :offset-assert 48)
   (axis   vector           :offset-assert 52)
   (disp   string           :offset-assert 56) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype clmf-cam-flag-toggle-info (structure)
  ((key       float  :offset-assert 0)
   (force-on  int32  :offset-assert 4)
   (force-off int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(define-extern *camera-layout-blink* symbol)
(define-extern *CAM_LAYOUT-bank* cam-layout-bank)
(define-extern *camera-layout-message-ypos* int)
(define-extern *volume-point-current* int)
(define-extern *volume-point* vector-array)
(define-extern *volume-normal-current* int)
(define-extern *volume-normal* vector-array)
(define-extern *volume-descriptor-current* int)
(define-extern *volume-descriptor* vol-control)
(define-extern cam-layout-print (function int int string pointer))
(define-extern cam-layout-intersect-dist (function vector vector vector float))
(define-extern cam-layout-entity-volume-info-create (function entity-camera symbol symbol :behavior cam-layout))
(define-extern cam-layout-entity-volume-info (function symbol :behavior cam-layout))
(define-extern v-slrp! (function vector vector vector float vector))
(define-extern interp-test (function (function vector vector vector float vector float none) interp-test-info none))
(define-extern interp-test-deg (function (function vector vector vector vector float none) interp-test-info none))
(define-extern cam-layout-entity-info (function entity-actor none))
(define-extern clmf-button-test (function symbol))
(define-extern clmf-bna (function symbol))
(define-extern clmf-implement (function symbol))
(define-extern clmf-input (function vector vector int vector))
(define-extern clmf-pos-rot (function symbol symbol symbol :behavior cam-layout))
(define-extern clmf-next-volume (function int symbol :behavior cam-layout))
(define-extern clmf-next-vol-dpad (function symbol))
(define-extern clmf-to-edit-cam (function symbol))
(define-extern *last-cur-entity* int)
(define-extern clmf-next-entity (function int symbol :behavior cam-layout))
(define-extern clmf-to-spline-attr (function symbol))
(define-extern clmf-to-intro-attr (function symbol))
(define-extern clmf-to-index-attr (function symbol))
(define-extern clmf-to-focalpull-attr (function symbol))
(define-extern clmf-to-edit (function symbol :behavior cam-layout))
(define-extern clmf-to-select (function symbol))
(define-extern clmf-look-through (function symbol :behavior cam-layout))
(define-extern fov->maya (function float float))
(define-extern cam-layout-save-cam-rot (function symbol string entity-actor none))
(define-extern cam-layout-save-cam-trans (function symbol string entity-actor none))
(define-extern cam-layout-save-pivot (function symbol string entity-actor none))
(define-extern cam-layout-save-align (function symbol string entity-actor none))
(define-extern cam-layout-save-interesting (function symbol string entity-actor none))
(define-extern cam-layout-save-fov (function symbol string entity-actor none))
(define-extern cam-layout-save-focalpull (function symbol string entity-actor none))
(define-extern cam-layout-save-flags (function symbol string entity-actor none))
(define-extern cam-layout-save-focalpull-flags (function symbol string entity-actor none))
(define-extern cam-layout-save-campoints-flags (function symbol string entity-actor none))
(define-extern cam-layout-save-introsplinetime (function symbol string entity-actor none))
(define-extern cam-layout-save-introsplineexitval (function symbol string entity-actor none))
(define-extern cam-layout-save-interptime (function symbol string entity-actor none))
(define-extern cam-layout-save-splineoffset (function symbol string entity-actor none))
(define-extern cam-layout-save-spline-follow-dist-offset (function symbol string entity-actor none))
(define-extern cam-layout-save-campointsoffset (function symbol string entity-actor none))
(define-extern cam-layout-save-tiltAdjust (function symbol string entity-actor none))
(define-extern cam-layout-save-stringMinLength (function symbol string entity-actor none))
(define-extern cam-layout-save-stringMaxLength (function symbol string entity-actor none))
(define-extern cam-layout-save-stringMinHeight (function symbol string entity-actor none))
(define-extern cam-layout-save-stringMaxHeight (function symbol string entity-actor none))
(define-extern cam-layout-save-stringCliffHeight (function symbol string entity-actor none))
(define-extern cam-layout-save-maxAngle (function symbol string entity-actor none))
(define-extern clmf-save-single (function entity-camera symbol symbol file-stream :behavior cam-layout))
(define-extern clmf-save-one (function symbol symbol :behavior cam-layout))
(define-extern clmf-save-all (function symbol symbol :behavior cam-layout))
(define-extern clmf-cam-flag-toggle (function int int symbol :behavior cam-layout))
(define-extern clmf-cam-flag (function string uint uint symbol :behavior cam-layout))
(define-extern clmf-cam-float-adjust (function symbol (pointer float) symbol :behavior cam-layout))
(define-extern clmf-cam-meters (function meters symbol symbol :behavior cam-layout))
(define-extern clmf-cam-fov (function degrees symbol symbol :behavior cam-layout))
(define-extern clmf-cam-deg (function degrees symbol symbol :behavior cam-layout))
(define-extern clmf-cam-intro-time (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-interp-time (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-float (function float symbol symbol :behavior cam-layout))
(define-extern clmf-cam-string (function string symbol symbol :behavior cam-layout))
(define-extern *clm-focalpull-attr* clm)
(define-extern *clm-index-attr* clm)
(define-extern *clm-intro-attr* clm)
(define-extern *clm-spline-attr* clm)
(define-extern *clm-cam-attr* clm)
(define-extern *clm-cam-lookthrough* clm)
(define-extern *clm-edit* clm)
(define-extern *clm-save-all* clm)
(define-extern *clm-save-one* clm)
(define-extern *clm-select* clm)
(define-extern *clm* clm)
(define-extern cam-layout-do-action (function clm-item-action object :behavior cam-layout))
(define-extern cam-layout-function-call (function symbol string int basic symbol :behavior cam-layout))
(define-extern cam-layout-do-menu (function clm symbol :behavior cam-layout))
(define-extern cam-layout-init (function object :behavior cam-layout))
(define-extern cam-layout-stop (function symbol))
(define-extern cam-layout-start (function symbol))
(define-extern cam-layout-restart (function symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-debug                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cam-dbg-scratch (structure)
  ((linevec4w      vector :inline :offset-assert 0) ;; vector4w 2 :inline
   (color          vector :inline :offset-assert 32) ;; vector4w :inline
   (plotvec        vector :inline :offset-assert 48) ;; vector4w 2 :inline
   (linevec        vector :inline :offset-assert 80) ;; vector4w 2 :inline
   (rel-vec        vector :inline :offset-assert 112)
   (sphere-v-start vector :inline :offset-assert 128)
   (sphere-v-end   vector :inline :offset-assert 144)
   (sphere-v-down  vector :inline :offset-assert 160)
   (sphere-vec     vector :inline :offset-assert 176)
   (crossvec       vector :inline :offset-assert 192)
   (bboxvec        vector :inline :offset-assert 240)
   (fov-vv         vector :inline :offset-assert 336)
   (fov-src        vector :inline :offset-assert 400)
   (fov-dest       vector :inline :offset-assert 416)
   (fov-vert       vector :inline :offset-assert 432)
   (fov-horz       vector :inline :offset-assert 448)
   )
  :method-count-assert 9
  :size-assert         #x1d0
  :flag-assert         #x9000001d0
  )
|#

#|
(deftype cam-debug-tri (structure)
  ((vertex    vector   3       :offset-assert 0) ;; guessed by decompiler
   (intersect vector   :inline :offset-assert 48)
   (color     vector4w         :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype cam-collision-record (structure)
  ((pos            vector :inline :offset-assert 0)
   (vel            vector :inline :offset-assert 16)
   (desired-pos    vector :inline :offset-assert 32)
   (cam-tpos-cur   vector :inline :offset-assert 48)
   (cam-tpos-old   vector :inline :offset-assert 64)
   (view-flat      vector :inline :offset-assert 80)
   (string-min-val vector :inline :offset-assert 96)
   (string-max-val vector :inline :offset-assert 112)
   (view-off       vector :inline :offset-assert 128)
   (min-z-override float          :offset-assert 144)
   (string-push-z  float          :offset-assert 148)
   (view-off-param float          :offset-assert 152)
   (frame          int32          :offset-assert 156)
   (iteration      int32          :offset-assert 160)
   (move-type      symbol         :offset-assert 164) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )
|#

#|
(deftype cam-collision-record-array (inline-array-class)
  ((data cam-collision-record :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

;; (define-extern *camera-old-cpu* object) ;; int
;; (define-extern *camera-old-vu* object) ;; int
;; (define-extern *camera-old-tfrag-bytes* object) ;; int
;; (define-extern *camera-old-level* object) ;; string
;; (define-extern *camera-old-stat-string-tfrag* object) ;; string
;; (define-extern *camera-old-stat-string-tfrag-near* object) ;; string
;; (define-extern *camera-old-stat-string-total* object) ;; string
(define-extern cam-slave-options->string (function cam-slave-options object string))
(define-extern cam-index-options->string (function cam-index-options object string))
(define-extern slave-los-state->string (function slave-los-state string))
;; (define-extern cam-line-dma function) ;; (function pointer)
;; (define-extern camera-line2d function) ;; (function vector4w vector4w pointer)
;; (define-extern camera-plot-float-func function) ;; (function float float float float (function float float) vector4w none)
(define-extern camera-line-setup (function vector4w none))
(define-extern camera-line-draw (function vector vector none))
(define-extern camera-line (function vector vector vector4w none))
(define-extern camera-line-rel (function vector vector vector4w none))
(define-extern camera-line-rel-len (function vector vector float vector4w none))
;; (define-extern camera-sphere function) ;; (function vector float vector4w none)
(define-extern camera-cross (function vector vector vector vector4w meters none))
;; (define-extern camera-bounding-box-draw function) ;; (function bounding-box basic rgba none)
;; (define-extern *cam-debug-los-tri-current* object) ;; int
;; (define-extern *cam-debug-los-tri* object) ;; (inline-array cam-debug-tri)
;; (define-extern *cam-debug-coll-tri-current* object) ;; int
;; (define-extern *cam-debug-coll-tri* object) ;; (inline-array cam-debug-tri)
(define-extern cam-debug-reset-coll-tri (function none))
(define-extern cam-debug-add-los-tri (function (inline-array collide-cache-tri) vector vector none))
;; (define-extern cam-debug-add-coll-tri function) ;; (function cam-debug-tri vector cam-debug-tri none)
;; (define-extern cam-debug-draw-tris function) ;; (function symbol)
;; (define-extern camera-fov-draw function) ;; (function int int vector float float vector4w none)
(define-extern camera-fov-frame (function matrix vector float float float vector4w symbol))
;; (define-extern debug-euler function) ;; (function cam-dbg-scratch object)
;; (define-extern bike-cam-limit function) ;; (function float float)
(define-extern camera-slave-debug (function camera-slave none))
;; (define-extern master-draw-coordinates function) ;; (function vector none)
;; (define-extern *cam-collision-record-first* object) ;; int
;; (define-extern *cam-collision-record-last* object) ;; int
;; (define-extern *cam-collision-record-show* object) ;; int
;; (define-extern *cam-collision-record* object) ;; cam-collision-record-array
(define-extern cam-collision-record-save (function vector vector int symbol camera-slave none))
;; (define-extern cam-collision-record-step function) ;; (function int none)
;; (define-extern cam-collision-record-draw function) ;; (function none)
(define-extern camera-master-debug (function camera-master none))
(define-extern debug-set-camera-pos-rot! (function vector matrix vector))
;; (define-extern cam-restore function) ;; (function none)
;; (define-extern cam-restore-generic-bug function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cam-start                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cam-stop (function symbol))
(define-extern cam-start (function symbol none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cloth-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype stick-constraint (structure)
  ((constraint-length-half               float   :offset-assert 0)
   (one-over-two-times-constraint-length float   :offset-assert 4)
   (constraint-length-sqd                float   :offset-assert 8)
   (particle0                            uint16  :offset-assert 12)
   (particle1                            uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype verlet-particle (structure)
  ((pos        vector :inline :offset-assert 0)
   (prev-pos   vector :inline :offset-assert 16)
   (mass-scale float          :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype disc-constraint (structure)
  ((normal               vector :inline :offset-assert 0)
   (origin               vector :inline :offset-assert 16)
   (radius               float          :offset-assert 32)
   (start-particle-index int16          :offset-assert 36)
   (end-particle-index   int16          :offset-assert 38)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype cylinder-constraint (structure)
  ((c0     vector :inline :offset-assert 0)
   (norm   vector :inline :offset-assert 16)
   (length float          :offset-assert 32)
   (radius float          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype particle-anchor-point (structure)
  ((anchor-pos     vector :inline :offset-assert 0)
   (particle-index uint16         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

(deftype particle-array (inline-array-class)
  ((data verlet-particle :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype float-array (inline-array-class)
  ((data float :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype stick-constraint-array (inline-array-class)
  ((data stick-constraint :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype collision-sphere-array (inline-array-class)
  ((data sphere :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype collision-disc-array (inline-array-class)
  ((data disc-constraint :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype collision-cylinder-array (inline-array-class)
  ((data cylinder-constraint :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype anchor-point-array (inline-array-class)
  ((data particle-anchor-point :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype verlet-particle-system (cloth-base)
  ((particles               particle-array :offset-assert 4)
   (drag                    float          :offset-assert 8)
   (accum-force             vector :inline :offset-assert 16)
   (timestep-frequency      int8           :offset-assert 32)
   (last-simulate-remaining int8           :offset-assert 33)
   (momentum                vector :inline :offset-assert 48)
   )
  :method-count-assert 16
  :size-assert         #x40
  :flag-assert         #x1000000040
  (:methods
    (calculate-wind!
      "If this cloth system has the wind flag, calculate the wind force."
      (_type_) none) ;; 11
    (verlet-particle-system-method-12 (_type_ float) none) ;; 12
    (verlet-particle-system-method-13 (_type_) none) ;; 13
    (verlet-particle-system-method-14 (_type_) none) ;; 14
    (debug-draw (_type_) none) ;; 15
    )
  )

(deftype current-position-info (structure)
  ((current-vert-index      uint16            :offset-assert 0)
   (last-2-x-index          uint16            :offset-assert 2)
   (last-2-y-index          uint16            :offset-assert 4)
   (last-x-index            uint16            :offset-assert 6)
   (last-y-index            uint16            :offset-assert 8)
   (lights                  vu-lights :inline :offset-assert 16)
   (scale                   vector    :inline :offset-assert 128)
   (clamp-col               vector    :inline :offset-assert 144)
   (last-normal             vector    :inline :offset-assert 160)
   (face-normal-needs-flip? symbol            :offset-assert 176)
   (cross-index0            int8              :offset-assert 180)
   (cross-index1            int8              :offset-assert 181)
   (backside-normal         vector    :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

(deftype cloth-system (verlet-particle-system)
  ((ground-constraint          float                :offset-assert 64)
   (disc-collision-constraints collision-disc-array :offset-assert 68)
   (collision-constraints      collision-sphere-array :offset-assert 72)
   (stick-constraints          stick-constraint-array :offset-assert 76)
   (anchor-points              anchor-point-array   :offset-assert 80)
   (constraint-strengths       int32        3       :offset-assert 84)
   (num-xy-constraints         int16                :offset-assert 96)
   (num-diagonal-constraints   int16                :offset-assert 98)
   (cloth-width                int32                :offset-assert 100)
   (cloth-height               int32                :offset-assert 104)
   (strip                      prim-strip           :offset-assert 108)
   (strip2                     prim-strip           :offset-assert 112)
   (strip3                     prim-strip           :offset-assert 116)
   (mesh                       art-cloth-geo        :offset-assert 120)
   (gravity-constant           float                :offset-assert 124)
   (wind-constant              float                :offset-assert 128)
   (flags                      cloth-flag           :offset-assert 136)
   (thickness-scalar           float                :offset-assert 144)
   (ball-collision-radius      float                :offset-assert 148)
   (face-normal-scalar         float                :offset-assert 152)
   (reset-count                int8                 :offset-assert 156)
   (num-iterations             int8                 :offset-assert 157)
   (secret-disable             game-secrets         :offset-assert 160)
   (params                     cloth-params         :offset-assert 168)
   )
  :method-count-assert 38
  :size-assert         #xac
  :flag-assert         #x26000000ac
  ;; field cloth-flag is likely a value type.
  (:methods
    (initialize-cloth-system!
      "Set up this cloth system with the given [[cloth-params]]."
      (_type_ cloth-params) none) ;; 16
    (debug-draw-spheres (_type_) none) ;; 17
    (cloth-system-method-18 (_type_) int) ;; 18
    (cloth-system-method-19 (_type_) none) ;; 19
    (cloth-system-method-20 (_type_) none) ;; 20
    (cloth-system-method-21 (_type_) none) ;; 21
    (cloth-system-method-22 (_type_) none) ;; 22
    (cloth-system-method-23 (_type_) none) ;; 23
    (cloth-system-method-24 (_type_) int) ;; 24
    (cloth-system-method-25 (_type_) int) ;; 25
    (cloth-system-method-26 (_type_) none) ;; 26
    (cloth-system-method-27 (_type_ vector int int current-position-info) vector) ;; 27
    (cloth-system-method-28 (_type_ int int current-position-info) none) ;; 28
    (cloth-system-method-29 (_type_ int int current-position-info int) uint) ;; 29
    (cloth-system-method-30 (_type_ int int current-position-info int) none) ;; 30
    (cloth-system-method-31 (_type_ current-position-info) none) ;; 31
    (cloth-system-method-32 (_type_ vector int int current-position-info) none) ;; 32
    (cloth-system-method-33 (_type_ vu-lights) none) ;; 33
    (cloth-system-method-34 (_type_) none) ;; 34
    (cloth-system-method-35 (_type_) none) ;; 35
    (cloth-system-method-36 (_type_) none) ;; 36
    (cloth-system-cmd-handler (_type_ pair) none) ;; 37
    )
  )

(deftype cloth-on-skeleton (cloth-system)
  ((base-transform-index int16          :offset-assert 172)
   (owner                handle         :offset-assert 176)
   (last-owner-pos       vector :inline :offset-assert 192)
   (last-owner-mat       matrix :inline :offset-assert 208)
   )
  :method-count-assert 38
  :size-assert         #x110
  :flag-assert         #x2600000110
  ;; field cloth-flag is likely a value type.
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cloth                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern get-neighboring-faces (function vector int int int int int))
(define-extern *normal-array* (pointer vector))
(define-extern light-vertex (function current-position-info vector rgba))
(define-extern *once* symbol)
(define-extern *cloth-fade-alpha* gs-alpha)
(define-extern symbol->cloth-flags (function symbol cloth-flag))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-drawable               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern fuel-cell type)
(declare-type fuel-cell basic)

(define-extern cspace-by-name "Get a process' [[cspace]] by name." (function process-drawable string cspace))
(define-extern cspace-index-by-name "Get the index of a process' [[cspace]] by name." (function process-drawable string int))
(define-extern vector<-cspace! (function vector cspace vector))
(define-extern vector<-matrix! (function vector matrix vector))
(define-extern vector<-cspace+vector! (function vector cspace vector vector))
(define-extern cspace-children (function process-drawable int pair))
(define-extern cspace-inspect-tree (function process-drawable cspace int int object process-drawable))
(define-extern execute-math-engine (function int))
(define-extern execute-cloth-engine (function int))
(define-extern draw-joint-axes (function process-drawable none))
(define-extern draw-root (function process-drawable none))
(define-extern empty-state (state process))
(define-extern process-drawable-error-print (function process-drawable string none))
(define-extern skeleton-group->draw-control (function process-drawable skeleton-group (pointer cspace-array) draw-control))
(define-extern ja-group-in-array? (function (array int32) art-joint-anim :behavior process-drawable))
(define-extern ja-done? (function int symbol :behavior process-drawable))
(define-extern ja-min? (function int symbol :behavior process-drawable))
(define-extern ja-max? (function int symbol :behavior process-drawable))
(define-extern ja-num-frames (function int int :behavior process-drawable))
(define-extern ja-frame-num (function int float :behavior process-drawable))
(define-extern ja-aframe-num (function int float :behavior process-drawable))
(define-extern ja-aframe (function float int float :behavior process-drawable))
(define-extern ja-speed (function int float :behavior process-drawable))
(define-extern ja-step (function int float :behavior process-drawable))
(define-extern ja-rate (function int float :behavior process-drawable))
(define-extern ja-linear-vel (function int vector :behavior process-drawable))
(define-extern ja-channel-set! (function int int :behavior process-drawable))
(define-extern ja-channel-push! (function int time-frame int :behavior process-drawable))
(define-extern ja-channel-float! (function art-joint-anim float float float joint-control-channel :behavior process-drawable))
(define-extern joint-control-reset! (function joint-control joint-control-channel none :behavior process-drawable))
(define-extern ja-group-size (function int :behavior process-drawable))
(define-extern ja-eval (function int :behavior process-drawable))
(define-extern ja-blend-eval (function int :behavior process-drawable))
(define-extern cloth-post (function none :behavior process-drawable))
(define-extern ja-post (function none :behavior process-drawable))
(define-extern sleep-code (function symbol :behavior process))
(define-extern transform-and-sleep (function none :behavior process-drawable))
(define-extern transform-and-sleep-code (function none :behavior process-drawable))
(define-extern transform-post (function int :behavior process-drawable))
(define-extern rider-trans (function none :behavior process-drawable))
(define-extern rider-post (function none :behavior process-drawable))
(define-extern pusher-post (function int :behavior process-drawable))
(define-extern process-drawable-delay-player (function time-frame int :behavior process-drawable))
(define-extern process-drawable-fuel-cell-handler (function process int symbol event-message-block none :behavior process-drawable))
(define-extern process-drawable-birth-fuel-cell (function entity vector symbol none :behavior process-drawable))
(define-extern find-offending-process-focusable (function process-tree attack-info process-focusable :behavior process-drawable))
(define-extern *valid-con* string)
(define-extern process-drawable-valid? (function process-drawable symbol))
(define-extern process-drawable-reset-all-cloth (function process-drawable none))
(define-extern process-drawable-set-riding (function process-drawable symbol none))
(define-extern process-drawable-set-cloth-ground-height (function process-drawable float none))
(define-extern process-drawable-set-wind-strength (function process-drawable float none))
(define-extern process-drawable-show-all-cloth (function process-drawable symbol none))
(define-extern process-drawable-slow-mo-cloth (function process-drawable symbol none))
(define-extern process-drawable-cloth-command (function process-drawable pair none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; curves                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype float-pair (structure)
  ((first  float  :offset-assert 0)
   (second float  :offset-assert 4)
   (x      float  :offset 0)
   (y      float  :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype float-pair-array (inline-array-class)
  ((data float-pair :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype curve2d (basic)
  ()
  :method-count-assert 10
  :size-assert         #x4
  :flag-assert         #xa00000004
  (:methods
    (curve2d-method-9 (_type_ float int) float) ;; 9
    )
  )

(deftype curve-color (basic)
  ()
  :method-count-assert 10
  :size-assert         #x4
  :flag-assert         #xa00000004
  (:methods
    (curve-color-method-9 (_type_ float rgbaf int) rgbaf) ;; 9
    )
  )

(deftype curve2d-piecewise (curve2d)
  ((pts                   float-pair-array :offset-assert 4)
   (default-loop-behavior uint64  :offset-assert 8)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (curve2d-piecewise-method-10 (_type_ int symbol uint) none) ;; 10
    (curve2d-piecewise-method-11 (_type_) none) ;; 11
    )
  )

(deftype curve2d-fast (curve2d)
  ((xs                vector :inline :offset-assert 16)
   (ys                vector :inline :offset-assert 32)
   (one-over-x-deltas vector :inline :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  )

(deftype curve-color-fast (curve-color)
  ((xs                vector  :inline :offset-assert 16)
   (ys                vector 4 :inline :offset-assert 32)
   (one-over-x-deltas vector  :inline :offset-assert 96)
   )
  :method-count-assert 10
  :size-assert         #x70
  :flag-assert         #xa00000070
  )

(deftype color-pair (structure)
  ((first  float         :offset-assert 0)
   (second rgbaf :inline :offset-assert 16)
   (x      float         :offset 0)
   (y      rgbaf :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype color-pair-array (inline-array-class)
  ((data color-pair :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype curve-color-piecewise (curve-color)
  ((pts                   color-pair-array :offset-assert 4)
   (default-loop-behavior uint64  :offset-assert 8)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (curve-color-piecewise-method-10 (_type_ int symbol uint) none) ;; 10
    )
  )

(define-extern rgbaf-lerp! (function rgbaf rgbaf rgbaf float rgbaf))
(define-extern evaluate-curve-fast (function curve2d-fast rgbaf rgbaf float))
(define-extern evaluate-color-curve-fast (function curve-color-fast rgbaf rgbaf rgbaf))
(define-extern rgba<-rgbaf (function rgba rgbaf int))
(define-extern *curve-unity* curve2d-fast)
(define-extern *curve-linear-up* curve2d-fast)
(define-extern *curve-linear-down* curve2d-fast)
(define-extern *curve-linear-up-hold* curve2d-piecewise)
(define-extern *curve-linear-up-down* curve2d-fast)
(define-extern *trail-color-curve-white* curve-color-fast)
(define-extern particle-color-curve-white* curve-color-fast)
(define-extern *trail-color-curve-red* curve-color-fast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ambient                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern can-display-query? (function process string float symbol))
(define-extern talker-surpress! (function int))
(define-extern talker-displayed? (function symbol))
(define-extern kill-current-talker (function pair pair symbol none))
(define-extern string->talker-speech (function string talker-speech-class))
(define-extern talker-spawn-func (function talker-speech-class process-tree vector region sound-id))
(define-extern talker-init (function talker-speech-class vector region none :behavior talker))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; speech                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern speech-type->string (function speech-type string))
(define-extern gui-status->string (function gui-status string))
(define-extern *speech-control* speech-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern region-tree-execute (function symbol vector vector none))
(define-extern region-execute (function none))
(define-extern region-prim-lookup-by-id (function int symbol int drawable-region-prim))
(define-extern region-lookup-by-id (function int region))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fma-sphere                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fma-sphere-params (structure)
  ((mode        uint32               :offset-assert 0)
   (proc        basic                :offset-assert 4)
   (track-joint int32                :offset-assert 8)
   (duration    uint64               :offset-assert 16)
   (sphere      sphere               :offset-assert 24)
   (danger      traffic-danger-info  :offset-assert 28)
   (nav-mesh-id uint32               :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype fma-sphere (process-drawable)
  ((first-time?  symbol                      :offset-assert 200) ;; guessed by decompiler
   (mode         fma-sphere-mode             :offset-assert 204) ;; guessed by decompiler
   (track-handle uint64                      :offset-assert 208) ;; handle
   (track-joint  int32                       :offset-assert 216)
   (attack-id    uint32                      :offset-assert 220)
   (duration     uint64                      :offset-assert 224) ;; time-frame
   (sphere       sphere              :inline :offset-assert 240)
   (danger       traffic-danger-info :inline :offset-assert 256)
   )
  :method-count-assert 21
  :size-assert         #x136
  :flag-assert         #x1500c00136
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern fma-sphere-init-by-other function) ;; (function fma-sphere-mode process-drawable int time-frame vector vector none :behavior fma-sphere)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prim-beam-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prim-beam-settings (structure)
  ((width     float   :offset-assert 0)
   (color     uint32  :offset-assert 4)
   (alpha     float   :offset-assert 8)
   (tex-id    uint32  :offset-assert 12)
   (num-tiles float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype prim-beam-params (structure)
  ((appearance prim-beam-settings  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype prim-beam-tracker-params (prim-beam-params)
  ((track-obj1   uint64  :offset-assert 8)
   (track-obj2   uint64  :offset-assert 16)
   (track-joint1 int32   :offset-assert 24)
   (track-joint2 int32   :offset-assert 28)
   (pos0         vector  :offset-assert 32)
   (pos1         vector  :offset-assert 36)
   (duration     uint64  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; script                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern command-get-int (function object int int))
(define-extern command-get-float (function object float float))
;; (define-extern command-get-time function) ;; (function object int time-frame)
(define-extern command-get-param (function object object object))
;; (define-extern command-get-quoted-param function) ;; (function object object object)
(define-extern command-get-process (function object process process))
;; (define-extern command-get-entity function) ;; (function object entity entity)
;; (define-extern command-get-trans function) ;; (function object vector vector)
;; (define-extern key-assoc function) ;; (function object pair vector4w pair)
;; (define-extern *script-form* object) ;; (inline-array script-form)
;; (define-extern level-from-heap function) ;; (function int level)
;; (define-extern *syntax-context* object) ;; script-context
;; (define-extern *script-context* object) ;; script-context

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generic-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mystery-cquery-type0 (structure)
  "(event explode explosion)"
  ((cquery          collide-query :inline)
   (explosion-trans vector        :inline)
   (proc-trans      vector        :inline)
   (probe           float)
   (dist            float)
   )
  )

(deftype target-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

(deftype camera-start (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

(deftype cam-slope (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

(deftype med-res-level (process-drawable)
  ((level-name symbol :offset-assert 200)
   (part-mode  symbol :offset-assert 204)
   (index      int32  :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:state-methods
    idle ;; 20
    )
  )

(deftype launcher (process-drawable)
  ((spring-height   meters           :offset-assert 200)
   (camera          state            :offset-assert 204) ;; guessed by decompiler
   (active-distance float            :offset-assert 208)
   (seek-time       time-frame       :offset-assert 216) ;; time-frame
   (dest            vector   :inline :offset-assert 224)
   (sound-id        sound-id         :offset-assert 240) ;; guessed by decompiler
   )
  :method-count-assert 23
  :size-assert         #xf4
  :flag-assert         #x17008000f4
  (:state-methods
    idle ;; 20
    active ;; 21
    deactivated ;; 22
    )
  )

;; simple-prim is already defined!

(deftype simple-prim-zbuf-mask (simple-prim)
  ()
  :method-count-assert 26
  :size-assert         #xcc
  :flag-assert         #x1a005000cc
  )

(deftype simple-prim-particle-binding (simple-prim)
  ((color      rgba       :offset-assert 204)
   (lifetime   time-frame :offset-assert 208)
   )
  :method-count-assert 28
  :size-assert         #xd8
  :flag-assert         #x1c006000d8
  (:state-methods
    die ;; 26
    )
  (:methods
    (setup! "Set up this prim with the given particle info." (_type_ int sparticle-cpuinfo sparticle-launchinfo) none) ;; 27
    )
  )

(deftype part-controller (process)
  ((actor-group        (pointer actor-group) :offset-assert 128)
   (actor-group-count  int32    :offset-assert 132)
   (spawn-delay        time-frame :offset-assert 136)
   (current-part-index uint16   :offset-assert 144)
   (state-time         time-frame :offset-assert 152)
   (next-reset-time    time-frame :offset-assert 160)
   (reset-interval-min time-frame :offset-assert 168)
   (reset-interval-max time-frame :offset-assert 176)
   (particle-launchers (array (pointer sparticle-launch-group)) :offset-assert 184)
   (spawn-sound        sound-name :offset-assert 192)
   )
  :method-count-assert 15
  :size-assert         #xd0
  :flag-assert         #xf005000d0
  (:state-methods
    active ;; 14
    )
  )

(deftype sound-controller (process)
  ((spawn-sound sound-name          :offset-assert 128)
   (sync        sync-linear :inline :offset-assert 144)
   (prev-val    float               :offset-assert 160)
   (pos         vector      :inline :offset-assert 176)
   )
  :method-count-assert 16
  :size-assert         #xc0
  :flag-assert         #x10004000c0
  (:state-methods
    active ;; 14
    die ;; 15
    )
  )

(deftype sound-on-path (process-drawable)
  "An [[ambient-sound]] that is being moved along a path."
  ((spawn-sound  sound-name :offset-assert 208)
   (loop-sound   uint32   :offset 228)
   (amb-sound    ambient-sound :offset-assert 232)
   (is-spooling? symbol   :offset-assert 236)
   )
  :method-count-assert 23
  :size-assert         #xf0
  :flag-assert         #x17007000f0
  (:state-methods
    active ;; 20
    die ;; 21
    no-play ;; 22
    )
  )

(deftype level-exit (process-drawable)
  ((minimap      connection-minimap  :offset-assert 200)
   (task-counter uint32              :offset-assert 204)
   (ent          basic               :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:state-methods
    active ;; 20
    )
  )

(define-extern *part-tracker-params-default* part-tracker-init-params)
(define-extern *part-tracker-subsampler-params-default* part-tracker-subsampler-init-params)
(define-extern entity-lookup-part-group (function entity-actor (pointer string) symbol (pointer sparticle-launch-group)))
(define-extern clone-anim-once (function handle symbol string none :behavior process-drawable))
(define-extern clone-anim (function handle symbol string none :behavior process-drawable))
(define-extern swingpole-init (function int object :behavior swingpole))
(define-extern manipy-post (function none :behavior manipy))
(define-extern manipy-init (function vector entity-actor skeleton-group vector manipy-options none :behavior manipy))
(define-extern part-tracker-init-base (function sparticle-launch-group time-frame (function part-tracker vector) uint process-drawable object none :behavior part-tracker))
(define-extern part-tracker-subsampler-init (function part-tracker-subsampler-init-params object :behavior part-tracker-subsampler))
(define-extern part-tracker-init (function part-tracker-init-params object :behavior part-tracker))
(define-extern part-tracker-track-root (function sparticle-system sparticle-cpuinfo vector none))
(define-extern part-tracker-move-to-target (function part-tracker vector))
(define-extern part-tracker-track-target (function part-tracker vector))
(define-extern lightning-tracker-init (function lightning-spec time-frame symbol process-drawable vector vector none :behavior lightning-tracker))
(define-extern process-grab? (function process symbol symbol :behavior process))
(define-extern process-release? (function process symbol :behavior process))
(define-extern camera-look-at (function pair uint process))
(define-extern ja-anim-done? (function process symbol))
(define-extern camera-pov-from (function pair uint process))
(define-extern cam-launcher-joystick (function vector :behavior camera-slave))
(define-extern cam-launcher-long-joystick (function vector :behavior camera-slave))
(define-extern launcher-init-by-other (function vector float int float none :behavior launcher))
(define-extern touch-tracker-init (function vector float time-frame none :behavior touch-tracker))
(define-extern explosion-init-by-other (function explosion-init-params object :behavior explosion))
(define-extern explosion-spawn-legacy-version (function process-drawable type explosion-init-params (pointer process)))
(define-extern explosion-spawn (function process-drawable type explosion-init-params none))
(define-extern find-closest-solid-sphere-prim (function collide-shape vector collide-spec collide-shape-prim))
(define-extern *explosion-debug-sphere* sphere)
(define-extern process-drawable-random-point! (function process-drawable vector vector))
(define-extern process-drawable-pair-random-point! (function process-drawable process-drawable vector float vector))
(define-extern simple-prim-init-by-other (function vector vector texture-id object :behavior simple-prim))
(define-extern birth-func-simple-prim (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern external-camera-controller-init-by-other (function entity time-frame symbol object :behavior external-camera-controller))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype lightning-globals (structure)
  ((gcf-buf uint16  :offset-assert 0)
   (vtx-buf uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern *lightning-spec-id-table* (array lightning-spec))
(define-extern *lightning-gcf* gcf-control)
(define-extern lightning-fractal-gen (function (inline-array vector) int int float lightning-spec none))
(define-extern lightning-uniform-gen (function (inline-array vector) int int float lightning-spec none))
(define-extern lightning-trail-uniform-gen (function (inline-array vector) (inline-array vector) float int symbol))
(define-extern lightning-trail-fractal-gen (function (inline-array vector) (inline-array vector) int int float lightning-spec none))
(define-extern gs-packed-rgba-lerp! (function gs-packed-rgba rgba rgba float gs-packed-rgba))
(define-extern lightning-fade (function lightning-control int :behavior process))
(define-extern lightning-update (function lightning-control symbol))
(define-extern lightning-draw (function dma-buffer lightning-control lightning-globals symbol))
(define-extern lightning-start (function float float (pointer process)))
(define-extern *lightning-globals* lightning-globals)
(define-extern *lightning* symbol)
(define-extern lightning-draw-all (function none))
(define-extern unlink-lightning-spec-by-heap (function kheap none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; light-trails-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype color-array (inline-array-class)
  ((data rgbaf :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype light-trail-composition (structure)
  ((color-mode        uint64         :offset-assert 0)
   (color-curve       curve-color-fast    :offset-assert 8)
   (color-repeat-dist float          :offset-assert 12)
   (alpha-1-mode      uint64         :offset-assert 16)
   (alpha-2-mode      uint64         :offset-assert 24)
   (base-alpha        float          :offset-assert 32)
   (alpha-curve-1     curve-color-fast          :offset-assert 36)
   (alpha-curve-2     curve-color-fast          :offset-assert 40)
   (alpha-repeat-dist float          :offset-assert 44)
   (width-mode        uint64         :offset-assert 48)
   (base-width        float          :offset-assert 56)
   (width-curve       curve-color-fast          :offset-assert 60)
   (width-repeat-dist float          :offset-assert 64)
   (uv-mode           uint64         :offset-assert 72)
   (uv-repeat-dist    float          :offset-assert 80)
   (max-age           time-frame     :offset-assert 88)
   (tex-id            uint32         :offset-assert 96)
   (lie-mode          uint64         :offset-assert 104)
   (lie-vector        vector :inline :offset-assert 112)
   (zbuffer?          symbol         :offset-assert 128)
   (use-tape-mode?    symbol         :offset-assert 132)
   (blend-mode        uint64         :offset-assert 136)
   (frame-stagger     uint8          :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #x91
  :flag-assert         #x900000091
  )

(deftype light-trail-breadcrumb (structure)
  ((pos        vector :inline :offset-assert 0)
   (birth-time uint32         :offset 12 :decomp-as time-frame)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype breadcrumb-array (inline-array-class)
  ((data light-trail-breadcrumb :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )

(deftype light-trail (basic)
  ((crumb-array             breadcrumb-array          :offset-assert 4)
   (crumb-size              uint8                     :offset-assert 8)
   (crumb-count             int16                     :offset-assert 10)
   (max-crumb-count         int16                     :offset-assert 12)
   (appearance              light-trail-composition   :offset-assert 16)
   (start-marker            uint64                    :offset-assert 24)
   (end-marker              uint64                    :offset-assert 32)
   (decision                uint64                    :offset-assert 40)
   (total-distance-traveled float                     :offset-assert 48)
   (strip                   prim-strip                :offset-assert 52)
   (strip2                  prim-strip                :offset-assert 56)
   (cache-vector            vector          4 :inline :offset-assert 64)
   )
  :method-count-assert 22
  :size-assert         #x80
  :flag-assert         #x1600000080
  (:methods
    (light-trail-method-9 (_type_ light-trail-composition int) none) ;; 9
    (light-trail-method-10 (_type_) none) ;; 10
    (light-trail-method-11 (_type_ vector int) none) ;; 11
    (light-trail-method-12 (_type_) none) ;; 12
    (light-trail-method-13 (_type_) int) ;; 13
    (light-trail-method-14 (_type_) none) ;; 14
    (light-trail-method-15 (_type_) none) ;; 15
    (light-trail-method-16 (_type_) none) ;; 16
    (light-trail-method-17 (_type_ vector float float int float) none) ;; 17
    (light-trail-method-18 (_type_ vector vector vector vector) none) ;; 18
    (light-trail-method-19 (_type_) none) ;; 19
    (reset-crumbs! (_type_) none) ;; 20
    (light-trail-method-21 (_type_) none) ;; 21
    )
  )

(deftype weapon-trail-crumb (light-trail-breadcrumb)
  ((offset vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype weapon-trail (light-trail)
  ()
  :method-count-assert 24
  :size-assert         #x80
  :flag-assert         #x1800000080
  (:methods
    (weapon-trail-method-22 (_type_) none) ;; 22
    (weapon-trail-method-23 (_type_) none) ;; 23
    )
  )

(deftype tread-trail-crumb (light-trail-breadcrumb)
  ((normal vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype tread-trail (light-trail)
  ()
  :method-count-assert 24
  :size-assert         #x80
  :flag-assert         #x1800000080
  (:methods
    (tread-trail-method-22 (_type_) none) ;; 22
    (tread-trail-method-23 (_type_) none) ;; 23
    )
  )

(deftype light-trail-tracker-spawn-params (structure)
  ((appearance         light-trail-composition  :offset-assert 0)
   (max-num-crumbs     int32                    :offset-assert 4)
   (tracked-obj        handle                   :offset-assert 8)
   (track-immediately? symbol                   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype weapon-trail-tracker-spawn-params (light-trail-tracker-spawn-params)
  ((joint0 int16  :offset-assert 20)
   (joint1 int16  :offset-assert 22)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype light-trail-tracker (process)
  ((trail                light-trail :offset-assert 128)
   (tracked-object       handle  :offset-assert 136)
   (offscreen?           symbol  :offset-assert 144)
   (offscreen-start-time time-frame :offset-assert 152)
   (next-line-check-time time-frame :offset-assert 160)
   (last-add-frame-val   uint32  :offset-assert 168)
   )
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  (:state-methods
    tracking ;; 14
    die ;; 15
    )
  (:methods
    (light-trail-tracker-method-16 (_type_ process-focusable vector) vector) ;; 16
    (light-trail-tracker-method-17 (_type_ process-focusable) symbol) ;; 17
    (light-trail-tracker-method-18 (_type_ process-focusable) none) ;; 18
    (light-trail-tracker-method-19 (_type_) none) ;; 19
    (light-trail-tracker-method-20 (_type_ vector) none) ;; 20
    )
  )

(deftype weapon-trail-tracker (light-trail-tracker)
  ((trail      weapon-trail :override)
   (joint0     int16   :offset-assert 172)
   (joint1     int16   :offset-assert 174)
   (state-time time-frame :offset-assert 176)
   )
  :method-count-assert 22
  :size-assert         #xb8
  :flag-assert         #x16004000b8
  (:state-methods
    hang-on ;; 21
    )
  )

(deftype tread-trail-tracker (light-trail-tracker)
  ((trail tread-trail :override)
   )
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )

(deftype light-trail-tracker-water (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )

(deftype light-trail-tracker-projectile (light-trail-tracker)
  ((state-time time-frame :offset-assert 176)
   )
  :method-count-assert 22
  :size-assert         #xb8
  :flag-assert         #x16004000b8
  (:state-methods
    hang-on ;; 21
    )
  )

(define-extern light-trail-tracker-init-by-other (function light-trail-tracker-spawn-params object :behavior light-trail-tracker))
(define-extern weapon-trail-tracker-init-by-other (function weapon-trail-tracker-spawn-params object :behavior weapon-trail-tracker))
(define-extern tread-trail-tracker-init-by-other (function light-trail-tracker-spawn-params object :behavior tread-trail-tracker))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning-new-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype lightning-appearance (structure)
  ((base-alpha            float   :offset-assert 0)
   (width-range-start     float   :offset-assert 4)
   (width-range-end       float   :offset-assert 8)
   (tex-id                uint32  :offset-assert 12)
   (blend-mode            uint64  :offset-assert 16)
   (fade-time             uint64  :offset-assert 24)
   (regenerate-time-start uint64  :offset-assert 32)
   (regenerate-time-end   uint64  :offset-assert 40)
   (alpha-1-curve         basic   :offset-assert 48)
   (alpha-1-mode          uint64  :offset-assert 56)
   (alpha-1-repeat-dist   float   :offset-assert 64)
   (alpha-2-curve         basic   :offset-assert 68)
   (alpha-2-mode          uint64  :offset-assert 72)
   (alpha-2-repeat-dist   float   :offset-assert 80)
   (width-curve           basic   :offset-assert 84)
   (width-mode            uint64  :offset-assert 88)
   (width-repeat-dist     float   :offset-assert 96)
   (uv-repeat-dist        float   :offset-assert 100)
   (uv-shift?             basic   :offset-assert 104)
   (uv-shift-speed        uint64  :offset-assert 112)
   (fade-time             uint64  :offset-assert 24)
   (use-sprite-bucket?    basic   :offset-assert 128)
   (use-accurate-interp?  basic   :offset-assert 132)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )
|#

#|
(deftype lightning-span-internal (structure)
  ((index            int16  :offset-assert 0)
   (span-flags       uint8  :offset-assert 2)
   (num-inner-points int8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype lightning-span (structure)
  ((random-offset-size-start float  :offset-assert 0)
   (inner-random-offset-size float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype lightning-spans-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype lightning-spans-internal-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype tex-u-holder (structure)
  ((uu        float  :offset-assert 0)
   (last-dist float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype lightning-bolt (basic)
  ((current-points                basic                  :offset-assert 4)
   (desired-points                basic                  :offset-assert 8)
   (span-pts-start                basic                  :offset-assert 12)
   (spans                         basic                  :offset-assert 16)
   (spans-internal                basic                  :offset-assert 20)
   (strip1                        basic                  :offset-assert 24)
   (strip2                        basic                  :offset-assert 28)
   (inner-point-travel-time       uint64                 :offset-assert 32)
   (start-fade-time               uint64                 :offset-assert 40)
   (new-inner-point-generate-time uint64                 :offset-assert 48)
   (last-generate-time            uint64                 :offset-assert 56)
   (base-width                    float                  :offset-assert 64)
   (current-uv-shift              float                  :offset-assert 68)
   (current-fade-scalar           float                  :offset-assert 72)
   (fractal-reduction             float                  :offset-assert 76)
   (appearance                    lightning-appearance   :offset-assert 80)
   (fade-mode                     uint64                 :offset-assert 88)
   (generate-mode                 uint64                 :offset-assert 96)
   (snap-inner-points?            basic                  :offset-assert 104)
   (span-data                     UNKNOWN              2 :offset-assert 108)
   (num-active-spans              int8                   :offset-assert 108)
   (num-spans                     int8                   :offset-assert 109)
   (base-color                    uint32                 :offset-assert 112)
   )
  :method-count-assert 23
  :size-assert         #x74
  :flag-assert         #x1700000074
  (:methods
    (lightning-bolt-method-9 () none) ;; 9
    (lightning-bolt-method-10 () none) ;; 10
    (lightning-bolt-method-11 () none) ;; 11
    (lightning-bolt-method-12 () none) ;; 12
    (lightning-bolt-method-13 () none) ;; 13
    (lightning-bolt-method-14 () none) ;; 14
    (lightning-bolt-method-15 () none) ;; 15
    (lightning-bolt-method-16 () none) ;; 16
    (lightning-bolt-method-17 () none) ;; 17
    (lightning-bolt-method-18 () none) ;; 18
    (lightning-bolt-method-19 () none) ;; 19
    (lightning-bolt-method-20 () none) ;; 20
    (lightning-bolt-method-21 () none) ;; 21
    (lightning-bolt-method-22 () none) ;; 22
    )
  )
|#

#|
(deftype lightning-new-tracker (process)
  ((bolt       basic   :offset-assert 128)
   (lifetime   uint64  :offset-assert 136)
   (state-time uint64  :offset-assert 144)
   )
  :method-count-assert 16
  :size-assert         #x98
  :flag-assert         #x1000200098
  (:methods
    (lightning-new-tracker-method-14 () none) ;; 14
    (lightning-new-tracker-method-15 () none) ;; 15
    )
  )
|#

#|
(deftype lightning-tracker-init-params (structure)
  ((appearance               lightning-appearance         :offset-assert 0)
   (start-pt                 vector               :inline :offset-assert 16)
   (end-pt                   vector               :inline :offset-assert 32)
   (lifetime                 uint64                       :offset-assert 48)
   (num-inner-points         int8                         :offset-assert 56)
   (inner-random-offset-size float                        :offset-assert 60)
   (random-offset-size-start float                        :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; particle-curves                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype particle-curve-settings (structure)
  ((color-start     basic   :offset-assert 0)
   (alpha-start     basic   :offset-assert 4)
   (scale-x-start   basic   :offset-assert 8)
   (scale-y-start   basic   :offset-assert 12)
   (r-scalar        basic   :offset-assert 16)
   (g-scalar        basic   :offset-assert 20)
   (b-scalar        basic   :offset-assert 24)
   (a-scalar        basic   :offset-assert 28)
   (scale-x-scalar  basic   :offset-assert 32)
   (scale-y-scalar  basic   :offset-assert 36)
   (lifetime-base   uint64  :offset-assert 40)
   (lifetime-offset uint64  :offset-assert 48)
   (flags           uint64  :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

;; (define-extern birth-func-curve function)
;; (define-extern live-func-curve function)
;; (define-extern *alpha-fast* curve2d-fast)
;; (define-extern *unity-fast* curve2d-fast)
;; (define-extern *ccro* curve-color-fast)
;; (define-extern *scale-curve* curve2d-fast)
;; (define-extern *scale-range* curve2d-fast)
;; (define-extern *part-function-curve-test-curve-settings* object)
;; (define-extern ptest function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; light-trails                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern compute-trail-scaled-t (function uint float float float float float vector float))
(define-extern *dist-cache-array* (pointer float))
(define-extern *total-length* float)
(define-extern light-trail-tracker-common-post (function object :behavior light-trail-tracker))
(define-extern estimate-light-trail-mem-usage (function light-trail none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightning-new                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lightning-alpha-additive* object)
;; (define-extern *lightning-alpha-blend* object)
;; (define-extern *lightning-alpha-subtractive* object)
;; (define-extern matrix<-vector-yz2! function)
;; (define-extern choose-nice-perp function)
;; (define-extern lightning-new-tracker-init-by-other function)
;; (define-extern create-lightning-tracker-new function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; carry-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++carry-h:carry-mode
(defenum carry-mode
  :type uint8
  :bitfield #t
  (carry 0)
  (mech-carry 1)
  (mech-drag 2)
  (cm3)
  (cm4)
  (cm5)
  (cm6)
  (cm7)
  )
;; ---carry-h:carry-mode

(deftype carry-info (basic)
  ((process          (pointer target)         :offset-assert 4) ;; guessed by decompiler
   (pickup-time      time-frame               :offset-assert 8) ;; time-frame
   (other-value      float                    :offset-assert 16)
   (other            handle                   :offset-assert 24) ;; handle
   (point            vector           :inline :offset-assert 32)
   (normal           vector           :inline :offset-assert 48)
   (max-angle        degrees                  :offset-assert 64) ;; degrees
   (max-distance     meters                   :offset-assert 68)
   (max-pull         meters                   :offset-assert 72)
   (min-pull         meters                   :offset-assert 76)
   (grab-trans-blend float                    :offset-assert 80)
   (carry-radius     meters                   :offset-assert 84)
   (backup-radius    meters                   :offset-assert 88)
   (joint            int8                     :offset-assert 92)
   (mode             carry-mode               :offset-assert 93)
   (face-dir         int8                     :offset-assert 94)
   (local-point      vector           :inline :offset-assert 96)
   (local-normal     vector           :inline :offset-assert 112)
   (grab-quat        quaternion       :inline :offset-assert 128) ;; quaternion :inline
   (grab-trans       vector           :inline :offset-assert 144)
   (hold-trans       vector           :inline :offset-assert 160)
   )
  :method-count-assert 17
  :size-assert         #xb0
  :flag-assert         #x11000000b0
  ;; field carry-mode is likely a value type.
  (:methods
    (new (symbol type process-drawable int vector vector float) _type_) ;; 0
    (carry-info-method-9 (_type_) none) ;; 9
    (distance-from-destination (_type_ carry-info) float) ;; 10
    (drag! (_type_ carry-info) none) ;; 11
    (drop-impl! (_type_ carry-info) none) ;; 12
    (carry-info-method-13 (_type_) symbol) ;; 13
    (carry! (_type_ carry-info vector vector) none) ;; 14
    (drop! (_type_ carry-info) none) ;; 15
    (translate! (_type_) symbol) ;; 16
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++pilot-h:vehicle-controls-flag
(defenum vehicle-controls-flag
  :type uint8
  :bitfield #t
  (vcf0 0)
  (vcf1 1)
  (vcf2 2)
  (vcf3 3)
  (vcf4 4)
  (vcf5 5)
  (vcf6 6)
  (vcf7 7)
  )
;; ---pilot-h:vehicle-controls-flag

(deftype vehicle-controls (structure)
  ((steering   float     :offset-assert 0)
   (throttle   float     :offset-assert 4)
   (brake      float     :offset-assert 8)
   (lean-z     float     :offset-assert 12)
   (handbrake  float     :offset-assert 16)
   (flags      vehicle-controls-flag :offset-assert 20)
   (prev-flags vehicle-controls-flag :offset-assert 21)
   (pad0       uint8   2 :offset-assert 22)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype pilot-info (basic)
  ((entity                  entity                   :offset-assert 4)
   (vehicle                 handle                   :offset-assert 8) ;; handle
   (left-right-bias         float                    :offset-assert 16)
   (left-right-min          float                    :offset-assert 20)
   (left-right-max          float                    :offset-assert 24)
   (left-right-interp       float                    :offset-assert 28)
   (front-back-interp       float                    :offset-assert 32)
   (up-down-interp          float                    :offset-assert 36)
   (up-down-accel-factor    float                    :offset-assert 40)
   (front-back-accel-factor float                    :offset-assert 44)
   (left-right-accel-factor float                    :offset-assert 48)
   (stance                  uint8                    :offset-assert 52)
   (seat-index              int8                     :offset-assert 53)
   (backup-nav-radius       float                    :offset-assert 56)
   (cam-side-shift          float                    :offset-assert 60)
   (enable-cam-side-shift   symbol                   :offset-assert 64) ;; guessed by decompiler
   (gun?                    symbol                   :offset-assert 68) ;; guessed by decompiler
   (controls                vehicle-controls :inline :offset-assert 72)
   (accel-array             vector         8 :inline :offset-assert 96)
   (local-accel             vector           :inline :offset-assert 224)
   (pilot-trans             vector           :inline :offset-assert 240)
   (pilot-quat              vector           :inline :offset-assert 256)
   (pilot-scale             vector           :inline :offset-assert 272)
   (underwater-time         time-frame               :offset-assert 288)
   (as-daxter?              symbol                   :offset-assert 296) ;; guessed by decompiler
   (art-group-backup        art-group                :offset-assert 300)
   (hud-health              handle                   :offset-assert 304)
   (hud-turbo               handle                   :offset-assert 312)
   (jumping?                symbol                   :offset-assert 320)
   )
  :method-count-assert 9
  :size-assert         #x144
  :flag-assert         #x900000144
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightjak-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype wings (process-drawable)
  ((parent        (pointer target) :override)
   (shadow-backup shadow-geo      :offset 208)
   (ragdoll-proc  handle          :offset-assert 216)
   (lock?         symbol          :offset-assert 224)
   (wing-part     sparticle-launch-control 2 :offset-assert 228)
   )
  :method-count-assert 24
  :size-assert         #xec
  :flag-assert         #x18007000ec
  (:state-methods
    (idle symbol)
    use
    hidden
    close
    )
  )

(deftype lightjak-shield (process-drawable)
  ((parent (pointer target) :override)
   (fade float   :offset-assert 200)
   (tone rgba    :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:state-methods
    open
    close
    hit
    )
  )

(deftype lightjak-info (basic)
  ((process                  (pointer target)  :offset-assert 4)
   (wings                    (pointer wings)   :offset-assert 8)
   (get-off-lock             symbol      :offset-assert 12)
   (latch-out-time           time-frame  :offset-assert 16)
   (start-time               time-frame  :offset-assert 24)
   (attack-id                uint32      :offset-assert 32)
   (lightjak-before-powerjak symbol      :offset-assert 36)
   (attack-time              time-frame  :offset-assert 40)
   (attack-count             time-frame  :offset-assert 48)
   (stage                    lightjak-stage :offset-assert 56)
   (want-stage               lightjak-stage :offset-assert 60)
   (get-on-latch             uint32      :offset-assert 64)
   (tone                     uint32      :offset-assert 68)
   (on-off                   uint32      :offset-assert 72)
   (mode-sound-bank          connection  :offset-assert 76)
   (swoop-count              int32       :offset-assert 80)
   (freeze-control           handle      :offset-assert 88)
   (freeze-screen            handle      :offset-assert 96)
   (freeze-sound             sound-id    :offset-assert 104)
   (shield                   (pointer lightjak-shield) :offset-assert 108)
   (shield-start-time        time-frame  :offset-assert 112)
   (shield-count-time        time-frame  :offset-assert 120)
   (regen-start-time         time-frame  :offset-assert 128)
   (regen-time               time-frame  :offset-assert 136)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gun (process-drawable)
  ((parent        (pointer target) :override)
   (control       control-info   :offset 128) ;; guessed by decompiler
   (shadow-backup shadow-geo     :offset 208) ;; guessed by decompiler
   (read-scale    symbol         :offset-assert 212)
   (gun-type      pickup-type    :offset-assert 216) ;; pickup-type
   (barrel        joint-mod    2 :offset-assert 220) ;; guessed by decompiler
   (mag           joint-mod    4 :offset-assert 228) ;; guessed by decompiler
   (mag-scale     float        4 :offset-assert 244) ;; guessed by decompiler
   (extra         handle         :offset-assert 264)
   )
  :method-count-assert 24
  :size-assert         #x110
  :flag-assert         #x1800900110
  (:state-methods
    idle ;; 20
    (use symbol) ;; 21
    hidden ;; 22
    die ;; 23
    )
  )

;; +++gun-h:gun-track-flags
(defenum gun-track-flags
  :bitfield #t
  :type uint16
  (gutflags-0)
  (gutflags-1)
  (gutflags-2)
  (gutflags-3)
  (gutflags-4)
  )
;; ---gun-h:gun-track-flags

(deftype gun-info (basic)
  ((process                (pointer target)         :offset-assert 4) ;; guessed by decompiler
   (gun                    (pointer gun)            :offset-assert 8) ;; guessed by decompiler
   (gun-pos                transformq       :inline :offset-assert 16)
   (gun-trans              vector           :inline :offset 16)
   (gun-quat               quaternion       :inline :offset 32) ;; quaternion :inline
   (gun-scale              vector           :inline :offset 48)
   (gun-type               pickup-type              :offset-assert 64)
   (using-gun-type         pickup-type              :offset-assert 68)
   (active?                symbol                   :offset-assert 72) ;; guessed by decompiler
   (latch?                 symbol                   :offset-assert 76) ;; guessed by decompiler
   (put-away?              symbol                   :offset-assert 80) ;; guessed by decompiler
   (surpress-time          time-frame               :offset-assert 88) ;; time-frame
   (fire-time              time-frame               :offset-assert 96) ;; time-frame
   (gun-delay-fire         float                    :offset-assert 104)
   (gun-time               time-frame               :offset-assert 112) ;; time-frame
   (gun-get-on-time        time-frame               :offset-assert 120) ;; time-frame
   (active-time            time-frame               :offset-assert 128) ;; time-frame
   (fire-delay             uint32                   :offset-assert 136)
   (gun-control            uint32                   :offset-assert 140)
   (gun-target             (pointer process-focusable) :offset-assert 144)
   (gun-daxter             float                    :offset-assert 148)
   (gun-select-time        time-frame       4       :offset-assert 152)
   (gun-roty-rel           degrees                  :offset-assert 184) ;; degrees
   (gun-roty               degrees                  :offset-assert 188) ;; degrees
   (gun-roty-targ          degrees                  :offset-assert 192) ;; degrees
   (hips                   joint-mod                :offset-assert 196) ;; guessed by decompiler
   (upper-body             joint-mod                :offset-assert 200) ;; guessed by decompiler
   (chest                  joint-mod                :offset-assert 204) ;; guessed by decompiler
   (strip                  prim-strip               :offset-assert 208)
   (uv-slide               float                    :offset-assert 212)
   (fire-dir-rot           degrees                  :offset-assert 216) ;; degrees
   (fire-dir               vector           :inline :offset-assert 224)
   (unk-vec                vector           :inline :offset-assert 240)
   (fire-point             vector           :inline :offset 256)
   (fire-dir-backup        vector           :inline :offset-assert 272)
   (fire-dir-out           vector           :inline :offset-assert 288)
   (fire-pending           int32                    :offset-assert 304)
   (fire-pending-time      time-frame               :offset-assert 312) ;; time-frame
   (fire-start-time        time-frame               :offset-assert 320) ;; time-frame
   (fire-charge            float                    :offset-assert 328)
   (fire-spin              degrees                  :offset-assert 332) ;; degrees
   (fire-spinv             degrees                  :offset-assert 336) ;; degrees
   (fire-chamber           int32                    :offset-assert 340)
   (fire-range             meters                   :offset-assert 344)
   (laser-active?          symbol                   :offset-assert 348) ;; guessed by decompiler
   (laser-point            vector           :inline :offset-assert 352)
   (laser-dir              vector           :inline :offset-assert 368)
   (unk-vec00              vector           :inline :offset-assert 384)
   (laser-hit-point        vector           :inline :offset 400)
   (track?                 gun-track-flags          :offset-assert 416) ;; gun-track-flags
   (track-tilt             degrees                  :offset-assert 420) ;; degrees
   (track-turn             degrees                  :offset-assert 424) ;; degrees
   (track-find-range       meters                   :offset-assert 428)
   (track-turnv-range      meters                   :offset-assert 432)
   (track-tilt-range       meters                   :offset-assert 436)
   (track-turn-range       meters                   :offset-assert 440)
   (track-tilt-max         degrees                  :offset-assert 444) ;; degrees
   (track-turn-max         degrees                  :offset-assert 448) ;; degrees
   (track-angle-mult       float                    :offset-assert 452)
   (track-beam-size        float                    :offset-assert 456)
   (track-auto-fire        symbol                   :offset-assert 460) ;; guessed by decompiler
   (track-require          uint32                   :offset-assert 464)
   (track-target-hold-time time-frame               :offset-assert 472) ;; time-frame
   (track-start-time       time-frame               :offset-assert 480) ;; time-frame
   (track-press-start-time time-frame               :offset-assert 488) ;; time-frame
   (track-target           focus            2 :inline :offset-assert 496) ;; guessed by decompiler
   (track-trans            vector           :inline :offset-assert 528)
   (track-dir              vector           :inline :offset-assert 544)
   (turn-fast-hold-time    time-frame               :offset-assert 560) ;; time-frame
   (blue-whine-sound-id    sound-id                 :offset-assert 568) ;; guessed by decompiler
   (blue-whine-volume      float                    :offset-assert 572)
   (mode-sound-bank        connection               :offset-assert 576)
   (top-anim-twist         vector           :inline :offset-assert 592)
   (top-anim-twist-targ    vector           :inline :offset-assert 608)
   (top-anim-look-at       vector           :inline :offset-assert 624)
   (top-anim-twist-reset   uint64                   :offset-assert 640)
   (top-anim-gun-height    meters                   :offset-assert 648)
   (top-anim-blue-cycle    float                    :offset-assert 652)
   (top-anim-low-high      float                    :offset-assert 656)
   (top-anim-extra-twistv  degrees                  :offset-assert 660) ;; degrees
   (top-anim-tilt-up       degrees                  :offset-assert 664) ;; degrees
   (attack-combo           combo-tracker    :inline :offset-assert 672)
   (combo-window-start     time-frame               :offset-assert 720) ;; time-frame
   (combo-window-state     symbol                   :offset-assert 728) ;; guessed by decompiler
   (combo-fire-delay       uint32                   :offset-assert 732)
   (charge-ammo            float                    :offset-assert 736)
   (charge-start-time      time-frame               :offset-assert 744) ;; time-frame
   (charge-inc-time        time-frame               :offset-assert 752) ;; time-frame
   (charge-active?         handle                   :offset-assert 760) ;; handle
   (part                   sparticle-launch-control :offset-assert 768)
   (ammo-required          float                    :offset-assert 772)
   )
  :method-count-assert 10
  :size-assert         #x308
  :flag-assert         #xa00000308
  (:methods
    (gun-info-method-9 (_type_) vector) ;; 9
    )
  )

(deftype beam-info (structure)
  ((y-scale float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(define-extern using-gun? (function target symbol))
(define-extern enabled-gun? (function target symbol))
(define-extern gun->ammo (function pickup-type pickup-type))
(define-extern gun->eco (function pickup-type pickup-type))
(define-extern *gun-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype board (process-drawable)
  ((parent        (pointer target) :override)
   (control       control-info  :offset 128) ;; guessed by decompiler
   (shadow-backup shadow-geo    :offset 208) ;; guessed by decompiler
   (main          joint-mod     :offset-assert 212) ;; guessed by decompiler
   (in-head-time  time-frame    :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  (:state-methods
    (idle symbol)
    use
    hidden
    )
  )

;; +++board-h:board-tricks
(defenum board-tricks
  :type uint32
  :bitfield #f
  (none 0)
  (board-spin 1)
  (board-boost 2)
  (board-flip 3)
  (board-rail 4)
  (board-rail-jump 5)
  (board-nosegrab 6)
  (board-board-spin 7)
  (board-board-flip 8)
  (board-noseflip 9)
  (board-kickflip 10)
  (board-kickspin 11)
  (board-method 12)
  (board-method-cross 13)
  (board-backgrab 14)
  (board-airwalk 15)
  (board-jump 16)
  (board-duck-jump 17)
  (board-quick-jump 18)
  (darkjak 19)
  (darkjak-bomb0 20)
  (darkjak-bomb1 21)
  (darkjak-smack 22)
  (darkjak-tracking 23)
  (lightjak 24)
  (lightjak-regen 25)
  (lightjak-swoop 26)
  (lightjak-freeze 27)
  (lightjak-shield 28)
  )
;; ---board-h:board-tricks

(deftype board-info (basic)
  ((board                  (pointer board)           :offset-assert 4)
   (camera-interp          float                     :offset-assert 8)
   (process                (pointer target)          :offset-assert 12)
   (board-trans            vector            :inline :offset-assert 16)
   (board-quat             vector            :inline :offset-assert 32)
   (board-scale            vector            :inline :offset-assert 48)
   (main                   joint-mod                 :offset-assert 64)
   (upper-body             joint-mod                 :offset-assert 68)
   (mode-sound-bank        connection                :offset-assert 72)
   (sound-bank-knob        float                     :offset-assert 76)
   (sound-air-knob         float                     :offset-assert 80)
   (wind-sound-id          sound-id                  :offset-assert 84)
   (wind-sound-pitch       float                     :offset-assert 88)
   (wind-sound-volume      float                     :offset-assert 92)
   (engine-sound-id        sound-id                  :offset-assert 96)
   (engine-sound-pitch     float                     :offset-assert 100)
   (engine-sound-volume    float                     :offset-assert 104)
   (bank-sound-id          sound-id                  :offset-assert 108)
   (bank-sound-pitch       float                     :offset-assert 112)
   (bank-sound-volume      float                     :offset-assert 116)
   (ride-sound-id          sound-id                  :offset-assert 120)
   (spin-sound-id          sound-id                  :offset-assert 124)
   (spin-sound-volume      float                     :offset-assert 128)
   (spin-sound-pitch       float                     :offset-assert 132)
   (turn-sound-id          sound-id                  :offset-assert 136)
   (trick-sound-id         sound-id                  :offset-assert 140)
   (jump-sound-id          sound-id                  :offset-assert 144)
   (eco-sound-id           sound-id                  :offset-assert 148)
   (eco-sound-volume       float                     :offset-assert 152)
   (charge-sound-id        sound-id                  :offset-assert 156)
   (adjust-time            time-frame                :offset-assert 160)
   (up-vector              vector          2 :inline :offset-assert 176)
   (slow-transv            vector            :inline :offset-assert 208)
   (board-time             time-frame                :offset-assert 224)
   (board-get-on-time      time-frame                :offset-assert 232)
   (in-air-time            time-frame                :offset-assert 240)
   (last-jump-time         time-frame                :offset-assert 248)
   (jump-end-time          time-frame                :offset-assert 256)
   (unk-time-frame01       time-frame                :offset-assert 264)
   (stick-lock             symbol                    :offset-assert 272)
   (stick-off              symbol                    :offset-assert 276)
   (stance-info            ground-tween-info :inline :offset-assert 280)
   (mods-backup            surface                   :offset-assert 316)
   (attack-id              uint32                    :offset-assert 320)
   (latch?                 symbol                    :offset-assert 324)
   (probe-intersect        vector            :inline :offset-assert 336)
   (probe-normal           vector            :inline :offset-assert 352)
   (probe-pat              pat-surface               :offset-assert 368)
   (probe                  symbol                    :offset-assert 372)
   (unstuck-time           time-frame                :offset-assert 376)
   (stuck-count            int32                     :offset-assert 384)
   (thrust-scale           float                     :offset-assert 388)
   (flip-time              time-frame                :offset-assert 392)
   (transv-max             meters                    :offset-assert 400)
   (turn-anim-tilt?        symbol                    :offset-assert 404)
   (turn-anim-mag          float                     :offset-assert 408)
   (turn-anim-targ         float                     :offset-assert 412)
   (turn-anim-frame        float                     :offset-assert 416)
   (unk-float000           float                     :offset-assert 420)
   (unk-float001           float                     :offset-assert 424)
   (turn-anim-vel          float                     :offset-assert 428)
   (turn-anim-duck         float                     :offset-assert 432)
   (turn-anim-duck-vel     float                     :offset-assert 436)
   (tilt-anim-frame        vector            :inline :offset-assert 448)
   (tilt-anim-targ         vector            :inline :offset-assert 464)
   (smack-surface-time     time-frame                :offset-assert 480)
   (smack-speed            meters                    :offset-assert 488)
   (smack-normal           vector            :inline :offset-assert 496)
   (glance-time            time-frame                :offset-assert 512)
   (glance-speed           meters                    :offset-assert 520)
   (glance-in-transv       vector            :inline :offset-assert 528)
   (glance-out-transv      vector            :inline :offset-assert 544)
   (glance-normal          vector            :inline :offset-assert 560)
   (on-flat-time           time-frame                :offset-assert 576)
   (jump-land-time         time-frame                :offset-assert 584)
   (slip-factor            float                     :offset-assert 592)
   (ground-on-dir          vector            :inline :offset-assert 608)
   (ride-time              time-frame                :offset-assert 624)
   (ride-start-time        time-frame                :offset-assert 632)
   (ride-button-time       time-frame                :offset-assert 640)
   (ride-lean-targ         float                     :offset-assert 648)
   (ride-lean              float                     :offset-assert 652)
   (ride-leanv             float                     :offset-assert 656)
   (ride-lean-mag          float                     :offset-assert 660)
   (ride-tilt-targ         float                     :offset-assert 664)
   (ride-tilt              float                     :offset-assert 668)
   (ride-tiltv             float                     :offset-assert 672)
   (ride-tilt-mag          float                     :offset-assert 676)
   (ride-lock              symbol                    :offset-assert 680)
   (ride-lock-on           symbol                    :offset-assert 684)
   (ride-speed             meters                    :offset-assert 688)
   (ride-mode              uint32                    :offset-assert 692)
   (ride-rot               degrees                   :offset-assert 696)
   (ride-rot-old           degrees                   :offset-assert 700)
   (ride-rot-abs           degrees           2       :offset-assert 704)
   (ride-rotv-abs          degrees                   :offset-assert 712)
   (ride-touch-segment     vector            2 :inline :offset-assert 720)
   (ride-dir               vector            :inline :offset-assert 752)
   (ride-vertex-length     int16                     :offset-assert 768)
   (ride-vertex-length-old int16                     :offset-assert 770)
   (ride-vertex-base       int16                     :offset-assert 772)
   (ride-vertex-base2      int16                     :offset-assert 774)
   (ride-vertex-index      float                     :offset-assert 776)
   (ride-vertex-index2     float                     :offset-assert 780)
   (ride-vertex-index-old  float                     :offset-assert 784)
   (ride-vertex            vector            3 :inline :offset-assert 800)
   (ride-segment           vector            :inline :offset-assert 848)
   (ride-dir-lean          vector            :inline :offset-assert 864)
   (ride-pad-vector        vector            1 :inline :offset-assert 880)
   (ride-vertex-old        vector            3 :inline :offset-assert 896)
   (ride-segment-old       vector            :inline :offset-assert 944)
   (ride-vertex-trail      vector            128 :inline :offset-assert 960)
   (halfpipe-side-time     time-frame                :offset-assert 3008)
   (halfpipe-jump-time     time-frame                :offset-assert 3016)
   (halfpipe-lip-time      time-frame                :offset-assert 3024)
   (halfpipe-time          time-frame                :offset-assert 3032)
   (halfpipe-gspot-time    time-frame                :offset-assert 3040)
   (halfpipe-lip-event     symbol                    :offset-assert 3048)
   (spin-check-time        time-frame                :offset-assert 3056)
   (spin-time              time-frame                :offset-assert 3064)
   (spin-start-time        time-frame                :offset-assert 3072)
   (spin-start-dir         vector            :inline :offset-assert 3088)
   (spin-control           float                     :offset-assert 3104)
   (spin-ground-start-time time-frame                :offset-assert 3112)
   (spin-ground-time       time-frame                :offset-assert 3120)
   (spin-ground-press-time time-frame                :offset-assert 3128)
   (flip-control           float                     :offset-assert 3136)
   (flip-count             int32                     :offset-assert 3140)
   (unk-time000            time-frame                :offset 3152)
   (tricky-time            time-frame                :offset-assert 3160)
   (tricky-exit-time       time-frame                :offset-assert 3168)
   (duck-start-time        time-frame                :offset-assert 3176)
   (unk-float005           float                     :offset-assert 3184)
   (unk-float006           float                     :offset-assert 3188)
   (unk-float007           float                     :offset-assert 3192)
   (trickx-count           int32                     :offset-assert 3196)
   (unk-time001            time-frame                :offset 3208)
   (hold-start-time        time-frame                :offset-assert 3216)
   (hold-exit-time         time-frame                :offset-assert 3224)
   (l2-start-time          time-frame                :offset-assert 3232)
   (rotyv-max              degrees                   :offset-assert 3240)
   (rotyv                  degrees                   :offset-assert 3244)
   (roty                   degrees                   :offset-assert 3248)
   (roty-cum               degrees                   :offset-assert 3252)
   (unk-deg00              degrees                   :offset-assert 3256)
   (upper-body-rotyv-max   degrees                   :offset 3260)
   (upper-body-rotyv       degrees                   :offset-assert 3264)
   (upper-body-roty        degrees                   :offset-assert 3268)
   (cushion-base           meters                    :offset-assert 3272)
   (cushion-offset         meters                    :offset-assert 3276)
   (shock-offset           meters                    :offset-assert 3280)
   (shock-offsetv          meters                    :offset-assert 3284)
   (shock-rotx             meters                    :offset-assert 3288)
   (effect-part            sparticle-launch-control  :offset-assert 3292)
   (charge-part            sparticle-launch-control  :offset-assert 3296)
   (trick-count            int32                     :offset-assert 3300)
   (trick-array            board-tricks 16           :offset-assert 3304)
   (trick-points-array     float 16                  :offset 3368)
   (trick-list             board-tricks 16           :offset 3432)
   (charge-start-time      time-frame                :offset 3496)
   (charge-time            time-frame                :offset-assert 3504)
   (charge-progress        float                     :offset-assert 3512)
   (zap-start-time         time-frame                :offset 3520)
   )
  :method-count-assert 11
  :size-assert         #xdc8
  :flag-assert         #xb00000dc8
  (:methods
    (add-to-trick-list (_type_ board-tricks float) none) ;; 9
    (flush-trick-list (_type_) none) ;; 10
    )
  )

(deftype target-board-bank (basic)
  ((jump-height-min        meters   :offset-assert 4)
   (jump-height-max        meters   :offset-assert 8)
   (duck-jump-height-min   meters   :offset-assert 12)
   (duck-jump-height-max   meters   :offset-assert 16)
   (turn-frames            float    :offset-assert 20)
   (wall-kick-window       time-frame :offset-assert 24)
   (cushion                meters   :offset-assert 32)
   (trickx-jump-height-min meters   :offset-assert 36)
   (trickx-jump-height-max meters   :offset-assert 40)
   (tricky-jump-height-min meters   :offset-assert 44)
   (tricky-jump-height-max meters   :offset-assert 48)
   (trickz-jump-height-min meters   :offset-assert 52)
   (trickz-jump-height-max meters   :offset-assert 56)
   (charge-jump-time       time-frame :offset-assert 64)
   (charge-jump-fade-time  time-frame :offset-assert 72)
   (charge-jump-height     meters   :offset-assert 80)
   (zap-duration           time-frame :offset-assert 88)
   (zap-reset-time         time-frame :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

(define-extern *TARGET_BOARD-bank* target-board-bank)
(define-extern want-to-board? (function symbol :behavior target))
(define-extern *board-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; darkjak-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype darkjak-info (basic)
  ((process         (pointer target)   :offset-assert 4) ;; guessed by decompiler
   (latch-out-time  time-frame         :offset-assert 8)
   (attack-id       uint32             :offset-assert 16)
   (start-time      time-frame         :offset-assert 24) ;; time-frame
   (attack-time     time-frame         :offset-assert 32) ;; time-frame
   (attack-count    uint64             :offset-assert 40)
   (lightning-count int32              :offset-assert 48)
   (charge-effect   handle             :offset-assert 56)
   (stage           darkjak-stage      :offset-assert 64) ;; guessed by decompiler
   (want-stage      darkjak-stage      :offset-assert 68) ;; guessed by decompiler
   (clock-pos       float              :offset-assert 72)
   (clock-vel       float              :offset-assert 76)
   (clock-on        symbol             :offset-assert 80) ;; guessed by decompiler
   (hud             handle           1 :offset-assert 88) ;; guessed by decompiler
   (tone            sound-id           :offset-assert 96) ;; guessed by decompiler
   (bomb            uint32             :offset-assert 100)
   (mode-sound-bank connection         :offset-assert 104)
   )
  :method-count-assert 10
  :size-assert         #x6c
  :flag-assert         #xa0000006c
  (:methods
    (darkjak-info-method-9 () none) ;; 9 ;; (update-clock! (_type_ int) none)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; indax-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype indax-info (basic)
  ((indax-start-time      time-frame :offset-assert 8) ;; time-frame
   (indax-time            time-frame :offset-assert 16) ;; time-frame
   (indax-hang-start-time time-frame :offset-assert 24)
   (art-group-backup      art-group  :offset-assert 32) ;; guessed by decompiler
   (pad object) ;; added
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flut-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype flut-info (basic)
  ((entity           entity-actor       :offset-assert 4)
   (flut-trans       vector     :inline :offset-assert 16)
   (flut-quat        vector     :inline :offset-assert 32)
   (flut-scale       vector     :inline :offset-assert 48)
   (prev-quat        quaternion :inline :offset-assert 64)
   (stick-lock       symbol             :offset-assert 80)
   (flap-sound-id    uint32             :offset-assert 84)
   (mode-sound-bank  connection         :offset-assert 88)
   (mode             basic              :offset-assert 92)
   (color-index      int32              :offset-assert 96)
   (as-daxter?       symbol             :offset-assert 100)
   (art-group-backup art-group          :offset-assert 104)
   (flut-start-time  time-frame         :offset-assert 112)
   (wild-turn-time   time-frame         :offset-assert 120)
   (wild-turn-rate   degrees            :offset-assert 128)
   (attack-id        uint32             :offset-assert 132)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

;; +++flut-h:flut-flag
(defenum flut-flag
  :type uint64
  :bitfield #t
  )
;; ---flut-h:flut-flag

(deftype flut (process-focusable)
  ((extra-trans       vector             :inline :offset-assert 208)
   (condition         int32                      :offset-assert 224)
   (shadow-backup     shadow-geo                 :offset-assert 228)
   (rider             handle                     :offset-assert 232)
   (nav-sphere-handle handle                     :offset-assert 240)
   (probe-time        time-frame                 :offset-assert 248)
   (count-lock        basic                      :offset-assert 256)
   (flags             flut-flag                  :offset-assert 264)
   (mode              basic                      :offset-assert 272)
   (color-index       int32                      :offset-assert 276)
   (minimap           connection-minimap         :offset-assert 280)
   )
  :method-count-assert 35
  :size-assert         #x11c
  :flag-assert         #x2300a0011c
  (:methods
    (flut-method-28 () none) ;; 28
    (flut-method-29 () none) ;; 29
    (flut-method-30 () none) ;; 30
    (flut-method-31 () none) ;; 31
    (flut-method-32 () none) ;; 32
    (flut-method-33 () none) ;; 33
    (flut-method-34 () none) ;; 34
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-util                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype target-bank (basic)
  ((jump-collide-offset              meters          :offset-assert 4)
   (jump-height-min                  meters          :offset-assert 8)
   (jump-height-max                  meters          :offset-assert 12)
   (double-jump-height-min           meters          :offset-assert 16)
   (double-jump-height-max           meters          :offset-assert 20)
   (flip-jump-height-min             meters          :offset-assert 24)
   (flip-jump-height-max             meters          :offset-assert 28)
   (duck-jump-height-min             meters          :offset-assert 32)
   (duck-jump-height-max             meters          :offset-assert 36)
   (flop-jump-height-min             meters          :offset-assert 40)
   (flop-jump-height-max             meters          :offset-assert 44)
   (attack-jump-height-min           meters          :offset-assert 48)
   (attack-jump-height-max           meters          :offset-assert 52)
   (edge-grab-jump-height-min        meters          :offset-assert 56)
   (edge-grab-jump-height-max        meters          :offset-assert 60)
   (swim-jump-height-min             meters          :offset-assert 64)
   (swim-jump-height-max             meters          :offset-assert 68)
   (tube-jump-height-min             meters          :offset-assert 72)
   (tube-jump-height-max             meters          :offset-assert 76)
   (carry-jump-height-min            meters          :offset-assert 80)
   (carry-jump-height-max            meters          :offset-assert 84)
   (mech-jump-height-min             meters          :offset-assert 88)
   (mech-jump-height-max             meters          :offset-assert 92)
   (mech-carry-jump-height-min       meters          :offset-assert 96)
   (mech-carry-jump-height-max       meters          :offset-assert 100)
   (indax-jump-height-min            meters          :offset-assert 104)
   (indax-jump-height-max            meters          :offset-assert 108)
   (indax-double-jump-height-min     meters          :offset-assert 112)
   (indax-double-jump-height-max     meters          :offset-assert 116)
   (roll-duration                    time-frame      :offset-assert 120)
   (roll-jump-pre-window             time-frame      :offset-assert 128)
   (roll-jump-post-window            time-frame      :offset-assert 136)
   (roll-timeout                     time-frame      :offset-assert 144)
   (roll-speed-min                   meters          :offset-assert 152)
   (roll-speed-inc                   meters          :offset-assert 156)
   (roll-flip-duration               time-frame      :offset-assert 160)
   (roll-flip-height                 meters          :offset-assert 168)
   (roll-flip-dist                   meters          :offset-assert 172)
   (roll-flip-art-height             meters          :offset-assert 176)
   (roll-flip-art-dist               meters          :offset-assert 180)
   (duck-slide-distance              meters          :offset-assert 184)
   (fall-far                         meters          :offset-assert 188)
   (fall-far-inc                     meters          :offset-assert 192)
   (attack-timeout                   time-frame      :offset-assert 200)
   (ground-timeout                   time-frame      :offset-assert 208)
   (slide-down-timeout               time-frame      :offset-assert 216)
   (fall-timeout                     time-frame      :offset-assert 224)
   (fall-stumble-threshold           meters          :offset-assert 232)
   (yellow-projectile-speed          meters          :offset-assert 236)
   (hit-invulnerable-timeout         time-frame      :offset-assert 240)
   (same-attack-invulnerable-timeout time-frame      :offset-assert 248)
   (run-cycle-length                 float           :offset-assert 256)
   (walk-cycle-dist                  meters          :offset-assert 260)
   (walk-up-cycle-dist               meters          :offset-assert 264)
   (walk-down-cycle-dist             meters          :offset-assert 268)
   (walk-side-cycle-dist             meters          :offset-assert 272)
   (run-cycle-dist                   meters          :offset-assert 276)
   (run-up-cycle-dist                meters          :offset-assert 280)
   (run-down-cycle-dist              meters          :offset-assert 284)
   (run-side-cycle-dist              meters          :offset-assert 288)
   (run-wall-cycle-dist              meters          :offset-assert 292)
   (duck-walk-cycle-dist             meters          :offset-assert 296)
   (wade-shallow-walk-cycle-dist     meters          :offset-assert 300)
   (wade-deep-walk-cycle-dist        meters          :offset-assert 304)
   (mech-walk-cycle-dist             meters          :offset-assert 308)
   (mech-run-cycle-dist              meters          :offset-assert 312)
   (smack-surface-dist               meters          :offset-assert 316)
   (smack-surface-height             meters          :offset-assert 320)
   (min-dive-depth                   meters          :offset-assert 324)
   (root-radius                      meters          :offset-assert 328)
   (root-offset                      vector  :inline :offset-assert 336)
   (body-radius                      meters          :offset-assert 352)
   (edge-radius                      meters          :offset-assert 356)
   (edge-offset                      vector  :inline :offset-assert 368)
   (edge-grab-height-off-ground      meters          :offset-assert 384)
   (head-radius                      meters          :offset-assert 388)
   (head-height                      meters          :offset-assert 392)
   (head-offset                      vector  :inline :offset-assert 400)
   (spin-radius                      meters          :offset-assert 416)
   (spin-offset                      vector  :inline :offset-assert 432)
   (duck-spin-radius                 meters          :offset-assert 448)
   (duck-spin-offset                 vector  :inline :offset-assert 464)
   (punch-radius                     meters          :offset-assert 480)
   (punch-offset                     vector  :inline :offset-assert 496)
   (uppercut-radius                  meters          :offset-assert 512)
   (uppercut0-offset                 vector  :inline :offset-assert 528)
   (uppercut1-offset                 vector  :inline :offset-assert 544)
   (flop-radius                      meters          :offset-assert 560)
   (flop0-offset                     vector  :inline :offset-assert 576)
   (flop1-offset                     vector  :inline :offset-assert 592)
   (stuck-time                       seconds         :offset-assert 608)
   (stuck-timeout                    seconds         :offset-assert 616)
   (stuck-distance                   meters          :offset-assert 624)
   (tongue-pull-speed-min            float           :offset-assert 628)
   (tongue-pull-speed-max            float           :offset-assert 632)
   (yellow-attack-timeout            time-frame      :offset-assert 640)
   (fall-height                      meters          :offset-assert 648)
   (mech-jump-thrust-fuel            float           :offset-assert 652)
   (strafe-jump-pre-window           time-frame      :offset-assert 656)
   (strafe-jump                      basic           :offset-assert 664)
   (strafe-duck-jump                 basic           :offset-assert 668)
   (dark-jump-height-min             meters          :offset-assert 672)
   (dark-jump-height-max             meters          :offset-assert 676)
   (ladder-walk-up-speed             meters          :offset-assert 680)
   (ladder-walk-down-speed           meters          :offset-assert 684)
   (ladder-slide-speed               meters          :offset-assert 688)
   (invisible-duration               time-frame      :offset-assert 696)
   (mech-walk-carry-cycle-dist       meters          :offset-assert 704)
   )
  :method-count-assert 9
  :size-assert         #x2c4
  :flag-assert         #x9000002c4
  )

(define-extern *target-shadow-control* shadow-control)
(define-extern *TARGET-bank* target-bank)
(define-extern target-start-attack (function none :behavior target))
(define-extern target-danger-set! (function symbol symbol none :behavior target))
(define-extern target-collide-set! (function symbol float int :behavior target))
(define-extern target-skel-group (function skeleton-group))
(define-extern debounce-speed (function float float vector vector float :behavior target))
(define-extern target-align-vel-z-adjust (function float float :behavior target))
(define-extern average-turn-angle (function target float))
(define-extern can-play-stance-amibent? (function symbol :behavior target))
(define-extern target-height-above-ground (function float :behavior target))
(define-extern find-collision-below (function vector vector float symbol))
(define-extern can-jump? (function symbol symbol :behavior target))
(define-extern target-jump-go (function none :behavior target))
(define-extern move-legs? (function symbol :behavior target))
(define-extern jump-hit-ground-stuck? (function symbol :behavior target))
(define-extern target-time-to-ground (function time-frame :behavior target))
(define-extern fall-test (function (state symbol target) float none :behavior target))
(define-extern slide-down-test (function none :behavior target))
(define-extern smack-surface? (function symbol symbol :behavior target))
(define-extern can-roll? (function symbol :behavior target))
(define-extern can-duck? (function symbol :behavior target))
(define-extern can-exit-duck? (function target symbol))
(define-extern can-hands? (function symbol symbol :behavior target))
(define-extern can-feet? (function symbol symbol :behavior target))
(define-extern are-still? (function symbol :behavior target))
(define-extern vector-local+! (function vector vector vector :behavior target))
(define-extern move-forward (function float vector :behavior target))
(define-extern set-forward-vel (function float vector :behavior target))
(define-extern delete-back-vel (function none :behavior target))
(define-extern set-side-vel (function float vector :behavior target))
(define-extern target-timed-invulnerable (function time-frame target int none))
(define-extern target-timed-invulnerable-off (function target int none))
(define-extern target-log-attack (function attack-info symbol symbol :behavior target))
(define-extern ground-tween-initialize (function ground-tween-info uint uint uint uint uint uint float ground-tween-info :behavior target))
(define-extern ground-tween-update (function ground-tween-info float float float none :behavior target))
(define-extern target-pos (function int vector))
(define-extern target-cam-pos (function vector))
(define-extern target-rot (function quaternion))
(define-extern external-target-spawn (function vector quaternion process symbol manipy-options (pointer process)))
(define-extern target-reset-on-task-finish (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-part-droppings-for function)
;; (define-extern birth-func-copy-target-y-rot function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-ground-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-target-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-vector-orient function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern birth-func-set-alpha-from-userdata function) ;; (function int sparticle-cpuinfo sparticle-launchinfo float)
;; (define-extern part-tracker-track-target-joint function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern spt-birth-func-part-land-droppings-for function)
;; (define-extern spt-birth-func-part-droppings-for function)
;; (define-extern spt-birth-func-part-slide-droppings-for function)
;; (define-extern spt-birth-func-part-jump-droppings-for function)
(define-extern process-drawable-burn-effect (function time-frame rgbaf :behavior target))
(define-extern lightning-probe-callback (function lightning-tracker none))
;; (define-extern process-drawable-shock-effect-replace function)
(define-extern process-drawable-shock-effect (function process-drawable lightning-spec (function lightning-tracker none) sparticle-launcher int int float object))
;; (define-extern process-drawable-shock-wall-effect function) ;; (function process-drawable lightning-spec (function lightning-tracker none) sparticle-launcher symbol)
(define-extern process-drawable2-shock-effect (function process-drawable process-drawable lightning-spec (function lightning-tracker none) sparticle-launcher none))
;; (define-extern process-drawable-shock-skel-effect function) ;; (function process-drawable lightning-spec (function lightning-tracker none) sparticle-launcher float int int none)
(define-extern *lightning-darkjak-pill* lightning-spec)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-part                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-track-gun-joint function)
;; (define-extern *red-shot-colors* object) ;; (pointer rgba)
;; (define-extern *range-explo-dust-color* curve-color-fast)
;; (define-extern *range-explo-dust-alpha* curve2d-fast)
;; (define-extern *range-explo-dust-scale-x* curve2d-fast)
;; (define-extern *range-explo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-explo-dust-alpha* curve2d-fast)
;; (define-extern *curve-explo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-explo-dust-scale-y* curve2d-fast)
;; (define-extern *part-gun-red3-explosion-dust-in-curve-settings* object)
;; (define-extern *range-explo-color* curve-color-fast)
;; (define-extern *range-explo-alpha* curve2d-fast)
;; (define-extern *range-explo-scale-x* curve2d-fast)
;; (define-extern *range-explo-scale-y* curve2d-fast)
;; (define-extern *curve-explo-alpha* curve2d-fast)
;; (define-extern *curve-explo-scale-x* curve2d-fast)
;; (define-extern *curve-explo-scale-y* curve2d-fast)
;; (define-extern *part-gun-red3-explosion-texture-curve-settings* object)
;; (define-extern *curve-linear-up-red* object)
;; (define-extern *red-shot-3-trail* object)
;; (define-extern *curve-yellow2-shot-alpha* object)
;; (define-extern *curve-yellow2-shot-color* curve-color-fast)
;; (define-extern *curve-linear-down-long* curve2d-fast)
;; (define-extern *yellow-shot-2-trail* object)
;; (define-extern check-shell-level1 function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-shell-level2 function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-dark-shot-lightning function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-track-gun-joint-3d function)
;; (define-extern sparticle-track-gun-joint-player-y function)
;; (define-extern *last-player-pos* object)
;; (define-extern birth-func-converge function)
;; (define-extern sparticle-red-2-converge function)
;; (define-extern sparticle-red-2-glow-trail-halt function)
;; (define-extern *gun-dark-3-nuke-fade-time* object)
;; (define-extern *gun-dark-3-nuke-fade-curve* object)
;; (define-extern *gun-dark-3-nuke-blur-segs* object)
;; (define-extern *gun-dark-3-nuke-blur-time* object)
;; (define-extern *gun-dark-3-nuke-blur-curve* object)
;; (define-extern *gun-dark-3-mushroom-speed* object)
;; (define-extern *gun-dark-3-mushroom-size-time* object)
;; (define-extern *gun-dark-3-nuke-mushroom-size-curve-x* object)
;; (define-extern *gun-dark-3-nuke-mushroom-size-curve-y* object)
;; (define-extern *gun-dark-3-nuke-fade-time-small* object)
;; (define-extern *gun-dark-3-nuke-fade-curve-small* object)
;; (define-extern *gun-dark-3-nuke-blur-segs-small* object)
;; (define-extern *gun-dark-3-nuke-blur-time-small* object)
;; (define-extern *gun-dark-3-nuke-blur-curve-small* object)
;; (define-extern spt-func-part-gun-dark-1-upgrade-shot-edges function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-reaction-target        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern poly-find-nearest-edge (function nav-poly (inline-array vector) vector vector nav-poly))
(define-extern target-collision-low-coverage (function control-info collide-query vector (pointer cshape-reaction-flags) (pointer collide-status) (pointer symbol) none))
(define-extern target-collision-reaction (function control-info collide-query vector vector collide-status :behavior target))
(define-extern target-collision-no-reaction (function control-info collide-query vector vector none))
(define-extern *collide-edge-board-spec* collide-edge-spec)
(define-extern rail-surface-touch (function none :behavior target))
(define-extern gravel-surface-touch (function none :behavior target))
(define-extern mushroom-surface-touch (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; logic-target                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern build-conversions (function vector vector :behavior target))
(define-extern vector-turn-to (function vector vector :behavior target))
(define-extern reverse-conversions (function vector none :behavior target))
(define-extern draw-history (function control-info none))
(define-extern target-history-print (function history-iterator symbol))
(define-extern target-print-stats (function target symbol symbol))
(define-extern read-pad (function vector vector :behavior target))
(define-extern set-pad (function vector vector :behavior target))
(define-extern warp-vector-into-surface! (function vector vector vector matrix vector))
(define-extern vector<-pad-in-surface! (function vector symbol vector :behavior target))
(define-extern vector<-pad-in-matrix! (function vector cpad-info matrix none))
(define-extern local-pad-angle (function float :behavior target))
(define-extern turn-around? (function symbol :behavior target))
(define-extern wall-hide? (function symbol :behavior target))
(define-extern target-log-trans (function none :behavior target))
(define-extern target-move-dist (function time-frame float :behavior target))
(define-extern turn-to-vector (function vector float symbol :behavior target))
(define-extern target-bend-vel-turn (function vector vector :behavior target))
(define-extern target-add-slide-factor (function vector vector :behavior target))
(define-extern add-thrust (function symbol :behavior target))
(define-extern add-gravity (function vector :behavior target))
(define-extern target-compute-slopes (function vector int :behavior target))
(define-extern do-rotations1 (function quaternion :behavior target))
(define-extern *strafe-mode* symbol)
(define-extern do-rotations2 (function int :behavior target))
(define-extern leg-ik-callback (function joint-mod-ik object object vector none))
(define-extern target-update-ik (function none :behavior target))
(define-extern pre-collide-setup (function none :behavior target))
(define-extern level-setup (function none :behavior target))
(define-extern flag-setup (function none :behavior target))
(define-extern post-flag-setup (function none :behavior target))
(define-extern bend-gravity (function symbol :behavior target))
(define-extern target-compute-edge (function none :behavior target))
(define-extern target-compute-edge-rider (function none :behavior target))
(define-extern target-compute-pole (function none :behavior target))
(define-extern target-calc-camera-pos (function none :behavior target))
(define-extern joint-points (function none :behavior target))
(define-extern do-target-gspot (function none :behavior target))
(define-extern target-real-post (function none :behavior target))
(define-extern target-post (function none :behavior target))
(define-extern target-swim-post (function none :behavior target))
(define-extern target-no-stick-post (function none :behavior target))
(define-extern target-no-move-post (function none :behavior target))
(define-extern target-no-ja-move-post (function none :behavior target))
(define-extern reset-target-state (function symbol target :behavior target))
(define-extern target-init (function continue-point none :behavior target))
(define-extern tobot-init (function symbol none :behavior target))
(define-extern stop (function symbol int))
(define-extern start (function symbol continue-point target))
(define-extern tobot-start (function symbol target))
(define-extern tobot-stance (state target))
(define-extern tobot-stop (function int))
(define-extern *target-geo-control* external-art-buffer)
(define-extern *target-anim-control* external-art-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sidekick                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *sidekick-remap* pair)
(define-extern cspace<-cspace+transformq! (function cspace cspace transformq matrix))
(define-extern target-sidekick-setup (function symbol none :behavior target))
(define-extern init-sidekick (function object :behavior sidekick))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; voicebox                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype camera-remote (camera-slave)
  ()
  :method-count-assert 14
  :size-assert         #xac0
  :flag-assert         #xe0a400ac0
  )

(deftype remote (process-drawable)
  ((parent        (pointer camera-slave)   :override)
   (base-trans    vector           :inline :offset-assert 208)
   (focus         focus            :inline :offset-assert 224)
   (seeker        cam-float-seeker :inline :offset-assert 236)
   (start-time    time-frame               :offset-assert 264) ;; time-frame
   (blend         float                    :offset-assert 272)
   (twist         float                    :offset-assert 276)
   (speak-effect? symbol                   :offset-assert 280)
   )
  :method-count-assert 26
  :size-assert         #x11c
  :flag-assert         #x1a00a0011c
  (:state-methods
    enter ;; 20, old: (enter () _type_ :state)
    idle ;; 21, old: (idle () _type_ :state)
    exit ;; 22, old: (exit () _type_ :state)
    )
  (:methods
    (init (_type_) none) ;; 23
    (get-track-pt-and-scale (_type_ vector) float) ;; 24
    (post-common (_type_) none) ;; 25
    )
  )

(deftype voicebox (remote)
  ((hint handle  :offset-assert 288) ;; handle
   )
  :method-count-assert 26
  :size-assert         #x128
  :flag-assert         #x1a00b00128
  (:state-methods
    exit ;; 22
    )
  )

(deftype judge (remote)
  ((root       collide-shape :override)
   (total-time time-frame :offset-assert 288) ;; time-frame
   (beep-time  time-frame :offset-assert 296) ;; time-frame
   (hud-timer  handle  :offset-assert 304) ;; handle
   (score      uint8   :offset-assert 312)
   (timer?     symbol  :offset-assert 316)
   )
  :method-count-assert 28
  :size-assert         #x140
  :flag-assert         #x1c00c00140
  (:state-methods
    enter ;; 20
    idle ;; 21
    wait ;; 26, old: (wait () _type_ :state)
    )
  (:methods
    (setup-collision! (_type_) none) ;; 27
    )
  )

(define-extern remote-track (function none :behavior remote))
(define-extern voicebox-init-by-other (function vector handle none :behavior voicebox))
(define-extern voicebox-spawn (function process-drawable vector (pointer process)))
(define-extern judge-init-by-other (function vector uint symbol object :behavior judge))
(define-extern judge-spawn (function process-tree vector uint object (pointer judge)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collectables-part              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern eco-fadeout function) ;; (function sparticle-system sparticle-cpuinfo none)
;; (define-extern eco-track-root-prim-fadeout function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern sparticle-3d-rotate-xz-to-camera-eco-shaft function)
;; (define-extern spt-func-part-vent-eco-dark-shaft function)
;; (define-extern spt-func-part-vent-eco-dark-touched-specs function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debug-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-track-root-money function) ;; (function sparticle-system sparticle-cpuinfo vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; find-nearest                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype search-info (structure)
  ((point        vector           :inline :offset-assert 0)
   (best-point   vector           :inline :offset-assert 16)
   (match-handle handle                   :offset-assert 32) ;; handle
   (match        process-focusable        :offset-assert 40)
   (best         float                    :offset-assert 44)
   (radius       float                    :offset-assert 48)
   (rating       search-info-flag         :offset-assert 52)
   (require      search-info-flag         :offset-assert 56)
   (mask         search-info-flag         :offset-assert 60)
   (rot-base     vector           :inline :offset-assert 64)
   (back-point   vector           :inline :offset-assert 80)
   (rot-range    float                    :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )

(define-extern *search-info* search-info)
(define-extern find-nearest-focusable (function (array collide-shape) vector float search-info-flag search-info-flag vector vector float process-focusable))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-arrow                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype cquery-with-vec (structure)
  "task-arrow::23"
  ((cquery collide-query :inline)
   (vec0   vector        :inline)
   (vec1   vector        :inline)
   )
  )

(deftype task-arrow (process-drawable)
  ((pos              vector             :inline :offset-assert 208)
   (theta            float                      :offset-assert 224)
   (phi              float                      :offset-assert 228)
   (dist             float                      :offset-assert 232)
   (smoothed-dist    float                      :offset-assert 236)
   (max-dist         float                      :offset-assert 240)
   (flags            task-arrow-flags           :offset-assert 244) ;; guessed by decompiler
   (map-icon         uint16                     :offset-assert 248)
   (minimap          connection-minimap         :offset-assert 252)
   (hud-dist         handle                     :offset-assert 256) ;; handle
   (base-quat        quaternion         :inline :offset-assert 272)
   (base-scale       float                      :offset-assert 288)
   (rod-of-god-scale float                      :offset-assert 292)
   (moving           symbol                     :offset-assert 296) ;; guessed by decompiler
   (death-pending?   symbol                     :offset-assert 300)
   (alpha            float                      :offset-assert 304)
   (choir-sound      ambient-sound              :offset-assert 308)
   (draw-back        basic                      :offset-assert 312)
   )
  :method-count-assert 25
  :size-assert         #x13c
  :flag-assert         #x1900c0013c
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    die ;; 21, old: (die () _type_ :state)
    leave ;; 22, old: (leave () _type_ :state)
    )
  (:methods
    (task-arrow-method-23 (_type_ vector) none) ;; 23
    (draw-arrow (_type_) none) ;; 24
    )
  )

(define-extern task-arrow-init-by-other (function task-arrow-params object :behavior task-arrow))
(define-extern task-arrow-spawn (function task-arrow-params process-tree process))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; projectile                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern cshape-reaction-projectile (function control-info collide-query vector vector collide-status))
(define-extern projectile-event-handler (function process int symbol event-message-block projectile :behavior projectile))
(define-extern projectile-move-fill-all-dirs (function projectile none))
(define-extern projectile-move-fill-line-sphere (function projectile none))
(define-extern projectile-update-velocity-add-gravity (function projectile none))
(define-extern projectile-update-velocity-space-wars (function projectile none))
(define-extern projectile-init-by-other (function projectile-init-by-other-params object :behavior projectile))
(define-extern projectile-bounce-update-velocity (function projectile-bounce none :behavior projectile))
(define-extern projectile-bounce-falling-post (function none :behavior projectile-bounce))
(define-extern projectile-bounce-move (function projectile-bounce none))
(define-extern projectile-bounce-reaction (function control-info collide-query vector vector collide-status))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ragdoll                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern ragdoll-matrix-interp function)
(define-extern ragdoll-joint-callback function)
(define-extern ragdoll-other-joint-callback function)
(define-extern ragdoll-reflect-matrix (function matrix vector vector vector))
(define-extern ragdoll-proc-init-by-other (function ragdoll-setup object :behavior ragdoll-proc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ragdoll-edit                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern matrix->axis-angle (function vector matrix float))
(define-extern show-maya-skeleton (function process-drawable int int none))
(define-extern ragdoll-print-default-joints (function process-drawable none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lightjak-wings                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype wings-ragdoll (ragdoll)
  ((which-chain int8  :offset-assert 11980)
   (chain-pos   int8  :offset-assert 11981)
   )
  :method-count-assert 26
  :size-assert         #x2ece
  :flag-assert         #x1a00002ece
  )

(define-extern *jchar-wings-ragdoll-setup* ragdoll-setup)
(define-extern wings-post (function none :behavior wings))
(define-extern wings-init (function symbol none :behavior wings))
(define-extern wings-ragdoll-proc-init-by-other (function ragdoll-proc object :behavior wings-ragdoll-proc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-handler                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern target-shoved (function meters meters process (state object object target) object :behavior target))
(define-extern attack-mode-is-invinc (function symbol symbol symbol))
(define-extern target-attacked (function symbol attack-info process touching-shapes-entry (state symbol attack-info target) object :behavior target))
(define-extern target-got-impact-impulse (function rigid-body-impact symbol :behavior target))
(define-extern target-darkjak-effect-trans (function handle (pointer process-drawable) (pointer time-frame) time-frame none :behavior target))
(define-extern target-send-attack (function process symbol touching-shapes-entry int int penetrate symbol :behavior target))
(define-extern target-generic-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-standard-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-dangerous-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-bonk-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-jump-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-walk-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-exit (function none :behavior target))
(define-extern target-state-hook-exit (function none :behavior target))
(define-extern target-effect-exit (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-anim                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern target-land-anim (function art-element :behavior target))
(define-extern target-stance-anim (function none :behavior target))
(define-extern target-stance-push (function int none :behavior target))
(define-extern target-falling-anim (function int time-frame symbol :behavior target))
(define-extern target-falling-anim-trans (function none :behavior target))
(define-extern target-walk-anim (function int none :behavior target))
(define-extern target-hit-ground-flop-anim (function symbol symbol none :behavior target))
(define-extern target-hit-ground-anim (function symbol symbol none :behavior target))
(define-extern target-attack-air-anim (function none :behavior target))
(define-extern target-edge-grab-anim (function float none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern target-falling-trans (function symbol time-frame symbol none :behavior target))
(define-extern *slide-down-mods* surface)
(define-extern *slide-jump-mods* surface)
(define-extern init-var-jump (function float float symbol symbol vector float vector :behavior target))
(define-extern mod-var-jump (function symbol symbol symbol vector vector :behavior target))
(define-extern *duck-mods* surface)
(define-extern target-jump-top-anim (function none :behavior target))
(define-extern *attack-mods* surface)
(define-extern *attack-end-mods* surface)
(define-extern *attack-find-mods* surface)
(define-extern *run-attack-mods* surface)
(define-extern *jump-attack-mods* surface)
(define-extern *uppercut-mods* surface)
(define-extern *uppercut-jump-mods* surface)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target2                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *trip-mods* surface)
(define-extern *look-around-mods* surface)
(define-extern *hit-ground-hard-mods* surface)
(define-extern *hide-mods* surface)
(define-extern *float-mods* surface)
(define-extern *blast-recover-mods* surface)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-swim                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern target-swim-tilt (function float float float float float :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-darkjak                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype darkjak-ball (projectile)
  ((impact?            symbol          :offset-assert 512)
   (fire-point         vector  :inline :offset-assert 528)
   (explode-sound      uint32          :offset-assert 544)
   (bolts              basic           :offset-assert 548)
   (ball-pos           vector 2 :inline :offset-assert 560)
   (trail              light-trail      :offset-assert 592)
   (ball1              sparticle-launch-control :offset-assert 596)
   (last-ground-height float           :offset-assert 600)
   (fire-sound         sound-id        :offset-assert 604)
   )
  :method-count-assert 42
  :size-assert         #x260
  :flag-assert         #x2a01e00260
  (:state-methods
    impact ;; 22
    )
  (:methods
    (darkjak-ball-method-41 () none) ;; 41
    )
  )

(define-extern darkjak-ball-slide-reaction (function none :behavior darkjak-ball))
(define-extern darkjak-ball-move (function none :behavior darkjak-ball))
(define-extern *darkjak-ball-lightning* lightning-spec)
(define-extern *darkjak-ball-lightning-colors* (array rgba))
(define-extern sparticle-track-hadouken (function none))
(define-extern target-darkjak-setup (function symbol none :behavior target))
(define-extern want-to-darkjak? (function symbol :behavior target))
(define-extern *darkjak-trans-mods* surface)
(define-extern target-darkjak-end-mode (function symbol none :behavior target))
(define-extern target-darkjak-process (function none :behavior target))
(define-extern target-darkjak-bomb-collide (function float float none :behavior target))
(define-extern target-bomb1-fire-shot (function (pointer handle) int int int none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-lightjak                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype freeze-screen (process-drawable)
  ((anim-frame float   :offset-assert 200)
   (transition float   :offset-assert 204)
   (gui-id-1   sound-id :offset-assert 208)
   (gui-id-2   sound-id :offset-assert 212)
   )
  :method-count-assert 25
  :size-assert         #xd8
  :flag-assert         #x19006000d8
  (:state-methods
    idle ;; 20
    active ;; 21
    (deactive symbol) ;; 22
    die ;; 23
    )
  (:methods
    (freeze-screen-method-24 (_type_) none) ;; 24
    )
  )

(deftype freeze-control (process)
  ((clock-pos     float      :offset-assert 128)
   (freeze-screen handle     :offset-assert 136)
   (sound-id      sound-id   :offset-assert 144)
   (tick-time     time-frame :offset-assert 152)
   (abort?        symbol     :offset-assert 160)
   (freeze-id     sound-id   :offset-assert 164)
   )
  :method-count-assert 15
  :size-assert         #xa8
  :flag-assert         #xf003000a8
  (:state-methods
    idle ;; 14
    )
  )

(deftype freeze-watcher (process)
  ((old-clock clock :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:state-methods
    (active clock) ;; 14
    )
  )

(define-extern point-off-screen (function vector vector))
(define-extern *lightjak-trans-mods* surface)
(define-extern want-to-powerjak? (function symbol :behavior target))
(define-extern target-lightjak-setup (function symbol none :behavior target))
(define-extern want-to-lightjak? (function symbol :behavior target))
(define-extern target-lightjak-end-mode (function symbol none :behavior target))
(define-extern target-lightjak-do-effect (function none :behavior target))
(define-extern target-lightjak-process (function none :behavior target))
(define-extern *lightjak-swoop-mods* surface)
(define-extern freeze-screen-init (function vector quaternion entity object :behavior freeze-screen))
(define-extern freeze-control-init (function sound-id object :behavior freeze-control))
(define-extern freeze-watcher-init (function clock object :behavior freeze-watcher))
(define-extern freeze-hit-begin (function none :behavior process))
(define-extern freeze-hit-end (function none :behavior process))
(define-extern *heal-mods* surface)
(define-extern lightjak-shield-init (function none :behavior lightjak-shield))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-invisible               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype invis-particle-joint (structure)
  ((joint    int16  :offset-assert 0)
   (distance float  :offset-assert 4)
   (size     float  :offset-assert 8)
   (spawn?   symbol :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dark-maker-idol (process-drawable)
  ((root collide-shape :override)
   (humming-sound ambient-sound  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    idle ;; 20
    active ;; 21
    )
  )

(define-extern target-invisible-start (function time-frame none :behavior target))
(define-extern target-invisible-stop (function none :behavior target))
(define-extern *invis-joint-list* (array invis-particle-joint))
(define-extern target-invisible-process (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-launch                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-death                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern warp-gate type)
(define-extern htorpedo type)
(define-extern target-turret type)
(define-extern scorpion-gun-manager type)
(define-extern bt-gun-manager type)

(deftype kill-nearby-enemies-info (basic)
  ((dist float          :offset-assert 4)
   (pos  vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(define-extern *auto-continue* symbol)
(define-extern next-continue (function continue-point continue-point))
(define-extern arrive-at-continue (function continue-point none :behavior target))
(define-extern apply-pos-from-entity (function continue-point none :behavior target))
(define-extern target-continue-init-art (function none :behavior target))
(define-extern *smack-mods* surface)
(define-extern *smack-up-mods* surface)
(define-extern velocity-set-to-target! (function vector float attack-info vector :behavior target))
(define-extern target-hit-effect (function attack-info none :behavior target))
(define-extern target-hit-push (function vector matrix float float attack-info symbol :behavior target))
(define-extern target-hit-orient (function attack-info vector symbol :behavior target))
(define-extern target-hit-setup-anim (function attack-info none :behavior target))
(define-extern target-hit-move (function attack-info symbol (function none :behavior target) float none :behavior target))
(define-extern *death-spool-array* (array spool-anim))
(define-extern death-movie-remap (function int int int))
(define-extern *kill-nearby-enemies-info* kill-nearby-enemies-info)
(define-extern kill-nearby-enemies (function vector float object))
(define-extern target-death-anim-trans (function none :behavior target))
(define-extern target-death-anim (function spool-anim none :behavior target))
(define-extern target-death-main (function symbol none :behavior target))
(define-extern target-death-reset (function symbol symbol none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-gun                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *gun-walk-mods* surface)
(define-extern want-to-gun? (function target symbol symbol :behavior process))
(define-extern target-gun-event-handler (function process int symbol event-message-block object :behavior target))
(define-extern target-gun-setup (function symbol none :behavior target))
(define-extern target-gun-init (function pickup-type none :behavior target))
(define-extern target-gun-exit (function symbol))
(define-extern target-gun-end-mode (function symbol symbol :behavior target))
(define-extern quat<-gun! (function quaternion quaternion quaternion))
(define-extern target-gun-ammo-out-pick (function int :behavior target))
(define-extern target-gun-type-set! (function pickup-type none :behavior target))
(define-extern target-gun-marking-menu (function target none))
(define-extern target-gun-build-track-list (function none :behavior target))
(define-extern target-gun-find-track (function none :behavior target))
(define-extern target-top-anim-base-mode (function int none :behavior target))
(define-extern target-gun-combo-start (function int time-frame none :behavior target))
(define-extern target-gun-joint-pre0 (function none :behavior target))
(define-extern target-gun-joint-pre (function none :behavior target))
(define-extern target-gun-compute-pos (function matrix :behavior target))
(define-extern target-gun-joint-points (function none :behavior target))
(define-extern target-gun-fire (function pickup-type none :behavior target))
(define-extern target-gun-check (function none :behavior target))
(define-extern camera-rotate-to-vector (function vector vector none))
(define-extern target-gun-real-post (function none :behavior target))
(define-extern target-gun-post (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-util                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype gun-eject (projectile-bounce)
  ()
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  )

(deftype gun-mag-yellow (projectile-bounce)
  ()
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  )

(deftype gun-mag-red (projectile-bounce)
  ()
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  )

(deftype gun-mag-blue (projectile-bounce)
  ()
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  )

(deftype gun-mag-dark (projectile-bounce)
  ()
  :method-count-assert 44
  :size-assert         #x224
  :flag-assert         #x2c01b00224
  )

(deftype last-gun-fire-time (structure)
  ((last-fire-times time-frame 12 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(define-extern *beam-info* beam-info)
(define-extern birth-func-setup-beam (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern birth-func-laser-pointer (function int sparticle-cpuinfo sparticle-launchinfo none))
(define-extern draw-beam (function sparticle-launcher vector vector symbol none))
(define-extern gun-post (function none :behavior gun))
(define-extern gun-init (function none :behavior gun))
(define-extern do-fire-backcheck (function vector vector symbol))
(define-extern get-remaining-player-ammo (function pickup-type float))
(define-extern adjust-player-ammo (function int pickup-type float))
(define-extern adjust-player-ammo-over-time (function int float pickup-type float float))
(define-extern truncate-player-ammo (function pickup-type none))
(define-extern *last-gun-fire-time* last-gun-fire-time)
(define-extern compute-gun-fire-time-index (function int int))
(define-extern get-last-fire-time (function int time-frame))
(define-extern set-last-fire-time (function int none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-blue-shot                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-blue-shot-3 (projectile)
  ((hit-actor?             basic          :offset-assert 512)
   (start-pos              vector :inline :offset-assert 528)
   (track-mode             uint64         :offset-assert 544)
   (random-travel-distance float          :offset-assert 552)
   )
  :method-count-assert 41
  :size-assert         #x22c
  :flag-assert         #x2901b0022c
  (:state-methods
    impact ;; 22
    dissipate ;; 21
    )
  )
|#

#|
(deftype dist-dot-val (structure)
  ((dot             float          :offset-assert 0)
   (dist            float          :offset-assert 4)
   (current-dir-vec vector :inline :offset-assert 16)
   (vec-to-target   vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype light-trail-tracker-blue-3 (light-trail-tracker-projectile)
  ()
  :method-count-assert 22
  :size-assert         #xb8
  :flag-assert         #x16004000b8
  )
|#

#|
(deftype target-quality-info (structure)
  ((targ  uint64  :offset-assert 0)
   (value float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype timeframe-wrapper (structure)
  ((time uint64  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype gun-blue-2-lightning-info (structure)
  ((pts                          UNKNOWN 32      :offset-assert 0)
   (num-pts                      int8            :offset-assert 512)
   (should-draw-terminal-sparks? basic           :offset-assert 516)
   (terminal-spark-pos           vector  :inline :offset-assert 528)
   (should-draw-extension?       basic           :offset-assert 544)
   (extension-end-point          vector  :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )
|#

#|
(deftype gun-blue-lightning-command (structure)
  ((msg            uint64                            :offset-assert 0)
   (lightning-info gun-blue-2-lightning-info :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x250
  :flag-assert         #x900000250
  )
|#

#|
(deftype gun-blue-2-lightning-tracker (process-drawable)
  ((lt-array                basic          :offset-assert 200)
   (should-draw-this-frame? basic          :offset-assert 204)
   (last-spark-time         uint64         :offset-assert 216)
   (spark-time-interval     uint64         :offset-assert 224)
   (last-deduct-ammo-time   uint64         :offset-assert 232)
   (snd-lightning           uint32         :offset-assert 240)
   (active-enter-time       uint64         :offset-assert 248)
   (revolve-angle           float          :offset-assert 256)
   (sway-angle              float          :offset-assert 260)
   (snd-spin                uint32         :offset-assert 264)
   (spin-intensity          float          :offset-assert 268)
   (prev-targ-pos           vector :inline :offset-assert 272)
   (last-probe-index        int16          :offset-assert 288)
   )
  :method-count-assert 27
  :size-assert         #x122
  :flag-assert         #x1b00b00122
  (:methods
    (gun-blue-2-lightning-tracker-method-24 () none) ;; 24
    (gun-blue-2-lightning-tracker-method-25 () none) ;; 25
    (gun-blue-2-lightning-tracker-method-26 () none) ;; 26
    )
  (:state-methods
    test ;; 23
    active ;; 20
    inactive ;; 21
    die ;; 22
    )
  )
|#

#|
(deftype gun-blue-2-target-info (structure)
  ((target     uint64  :offset-assert 0)
   (start-time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype constraint-knot (structure)
  ((pt     vector :inline :offset-assert 0)
   (dir    vector :inline :offset-assert 16)
   (length float          :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype rope-constraint (structure)
  ((constraints UNKNOWN 12 :offset-assert 0)
   (num-knots   uint8      :offset-assert 576)
   )
  :method-count-assert 10
  :size-assert         #x241
  :flag-assert         #xa00000241
  (:methods
    (rope-constraint-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype gun-blue-2-lightning-init-params (structure)
  ((num-beams int8  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )
|#

#|
(deftype gun-blue-shot (projectile)
  ((init-pos       vector :inline :offset-assert 512)
   (init-dir       vector :inline :offset-assert 528)
   (collide-normal vector :inline :offset-assert 544)
   )
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  )
|#

#|
(deftype gun-blue-shot-2 (gun-blue-shot)
  ()
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  )
|#

;; (define-extern sparticle-fade-alpha-dist function)
;; (define-extern gun-fire-blue-1 function)
;; (define-extern fmod-2 function)
;; (define-extern get-dist-and-dot function)
;; (define-extern gun-blue-shot-3-move function)
;; (define-extern *blue-shot-trail* object)
;; (define-extern gun-fire-blue-3 function)
;; (define-extern draw-beam-segment function)
;; (define-extern *found-objects* object)
;; (define-extern *gun-blue-2-last-attack-id* object)
;; (define-extern *gun-blue-2-last-attack-id-time* object)
;; (define-extern fire-projectile-if-necessary function)
;; (define-extern *gun-blue-2-targets* object)
;; (define-extern *blue-2-lightning-shape* object)
;; (define-extern *uv-loop-curve* object)
;; (define-extern *blue-light-test* object)
;; (define-extern *blue-light-test-end* object)
;; (define-extern *blue-light-test-big* object)
;; (define-extern *blue-light-test-big-intense* object)
;; (define-extern *blue-light-test-small-fade* object)
;; (define-extern gun-blue-2-lightning-init-by-other function)
;; (define-extern create-lightning-tracker-if-necessary function)
;; (define-extern is-valid-blue-2-target function)
;; (define-extern find-gun-blue-2-target function)
;; (define-extern find-gun-blue-2-target-old function)
;; (define-extern *lightning-pts-cache* object)
;; (define-extern gun-fire-blue-2 function)
;; (define-extern gun-fire-blue-2-old function)
(define-extern target-gun-can-fire-blue? (function pickup-type symbol :behavior target))
;; (define-extern *last-fire-blue-time* object)
(define-extern target-gun-fire-blue (function pickup-type (pointer process) :behavior target))
;; (define-extern gun-blue-shot-move function) ;; (function gun-blue-shot none)
;; (define-extern cshape-reaction-blue-shot function) ;; (function control-info collide-query vector vector collide-status)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-yellow-shot                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-yellow-shot (projectile)
  ((hit-actor?        symbol         :offset-assert 512) ;; guessed by decompiler
   (tail-pos          vector :inline :offset-assert 528)
   (hit-pos           vector :inline :offset-assert 544)
   (last-hit-time     uint64         :offset-assert 560)
   (snd-whoosh        uint32         :offset-assert 568)
   (muzzle-flash-part basic          :offset-assert 572)
   (main-shot-part    basic          :offset-assert 576)
   (shot-aim-part     basic          :offset-assert 580)
   (shot-ring-part    basic          :offset-assert 584)
   )
  :method-count-assert 44
  :size-assert         #x24c
  :flag-assert         #x2c01d0024c
  (:methods
    (gun-yellow-shot-method-41 () none) ;; 41
    (gun-yellow-shot-method-42 () none) ;; 42
    (gun-yellow-shot-method-43 () none) ;; 43
    )
  )
|#

#|
(deftype gun-yellow-2-proc-ignore (structure)
  ((hand uint64  :offset-assert 0)
   (time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype gun-yellow-shot-2 (gun-yellow-shot)
  ((last-collide-time       uint64          :offset-assert 592)
   (snd-trail               uint32          :offset-assert 600)
   (hit-yet?                basic           :offset-assert 604)
   (actor-deflect?          basic           :offset-assert 608)
   (max-actor-deflect-count int32           :offset-assert 612)
   (last-hit-enemy          uint64          :offset-assert 616)
   (delay-attack            uint64          :offset-assert 624)
   (delay-norm              vector  :inline :offset-assert 640)
   (enemy-hit-count         int32           :offset-assert 656)
   (ignore-list             UNKNOWN 6       :offset-assert 664)
   (last-attack-time        uint64          :offset-assert 760)
   )
  :method-count-assert 48
  :size-assert         #x300
  :flag-assert         #x3002800300
  (:methods
    (gun-yellow-shot-2-method-44 () none) ;; 44
    (gun-yellow-shot-2-method-45 () none) ;; 45
    (gun-yellow-shot-2-method-46 () none) ;; 46
    (gun-yellow-shot-2-method-47 () none) ;; 47
    )
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype gun-yellow-shot-3 (gun-yellow-shot)
  ()
  :method-count-assert 44
  :size-assert         #x24c
  :flag-assert         #x2c01d0024c
  )
|#

#|
(deftype gun-yellow-3-saucer (projectile-bounce)
  ((total-float-time       uint64         :offset-assert 552)
   (state-time             uint64         :offset-assert 192)
   (firing?                basic          :offset-assert 568)
   (asleep?                basic          :offset-assert 572)
   (first-fire-time        uint64         :offset-assert 576)
   (activated?             basic          :offset-assert 584)
   (collided-with-surface? basic          :offset-assert 588)
   (last-deflect-time      uint64         :offset-assert 592)
   (last-fire-time         uint64         :offset-assert 600)
   (spawn-part             basic          :offset-assert 608)
   (last-blink-time        uint64         :offset-assert 616)
   (finished?              basic          :offset-assert 624)
   (initial-fire-dir       vector :inline :offset-assert 640)
   (initial-fire-pos       vector :inline :offset-assert 656)
   (last-deduct-ammo-time  uint64         :offset-assert 672)
   (total-ammo-drained     float          :offset-assert 680)
   (total-ammo-to-drain    float          :offset-assert 684)
   (total-fire-time        uint64         :offset-assert 688)
   (snd-hum                uint32         :offset-assert 696)
   (snd-shoot              uint32         :offset-assert 700)
   )
  :method-count-assert 54
  :size-assert         #x2c0
  :flag-assert         #x36024002c0
  (:methods
    (gun-yellow-3-saucer-method-44 () none) ;; 44
    (gun-yellow-3-saucer-method-50 () none) ;; 50
    (gun-yellow-3-saucer-method-51 () none) ;; 51
    (gun-yellow-3-saucer-method-52 () none) ;; 52
    (gun-yellow-3-saucer-method-53 () none) ;; 53
    )
  (:state-methods
    spinning ;; 46
    navigating ;; 45
    impact-explode ;; 47
    falling-down ;; 48
    moving ;; 23
    burnt-husk ;; 49
    sitting ;; 41
    )
  (:states
    gun-yellow-3-saucer-base-state
    )
  )
|#

#|
(deftype target-quality-info-saucer (structure)
  ((targ  uint64  :offset-assert 0)
   (value float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype gun-yellow-3-event-msg (structure)
  ((activated? basic  :offset-assert 0)
   (finished?  basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern saucer-land-move function)
;; (define-extern gun-fire-yellow-3 function)
;; (define-extern gun-fire-yellow-2 function)
;; (define-extern gun-fire-yellow-1 function)
(define-extern target-gun-can-fire-yellow? (function pickup-type symbol :behavior target))
(define-extern target-gun-fire-yellow (function pickup-type (pointer process) :behavior target))
;; (define-extern someone-fire-yellow function) ;; (function process-drawable vector vector (pointer process))
;; (define-extern gun-yellow-shot-move function) ;; (function gun-yellow-shot none)
;; (define-extern *last-hit-deflect-target-handle* object)
;; (define-extern gun-yellow-shot-do-deflect function)
;; (define-extern gun-yellow-deflect-reaction function)
;; (define-extern gun-yellow-shot-2-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-red-shot                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-red-shot (process-drawable)
  ((probe-count int32          :offset-assert 200)
   (probe-mask  uint32         :offset-assert 204)
   (actor-count int32          :offset-assert 208)
   (attack-id   uint32         :offset-assert 212)
   (start-pos   vector :inline :offset-assert 224)
   (start-dir   vector :inline :offset-assert 240)
   (start-rot   vector :inline :offset-assert 256)
   (probe-dir   vector 19      :offset-assert 272) ;; guessed by decompiler
   )
  :method-count-assert 30
  :size-assert         #x240
  :flag-assert         #x1e01c00240
  (:methods
    (gun-red-shot-method-23 () none) ;; 23 ;; (init-probes! (_type_ collide-shape) none)
    (gun-red-shot-method-24 () none) ;; 24 ;; (gun-red-shot-method-24 (_type_) symbol)
    (gun-red-shot-method-25 () none) ;; 25 ;; (noop (_type_) none)
    (gun-red-shot-method-26 () none) ;; 26 ;; (gun-red-shot-method-26 (_type_) none)
    (gun-red-shot-method-27 () none) ;; 27 ;; (gun-red-shot-method-27 (_type_) none)
    (gun-red-shot-method-28 () none) ;; 28 ;; (gun-red-shot-method-28 (_type_ vector) sound-id)
    (gun-red-shot-method-29 () none) ;; 29 ;; (fire! (_type_ process-drawable int) object)
    )
  (:state-methods
    idle ;; 22, old: (idle () _type_ :state)
    blocked ;; 20, old: (blocked () _type_ :state)
    debug-idle ;; 21, old: (debug-idle () _type_ :state)
    )
  )
|#

#|
(deftype gun-red-3-grenade (projectile-bounce)
  ((blast-radius          float   :offset-assert 548)
   (should-explode-soon?  basic   :offset-assert 552)
   (explode-tick-time     uint64  :offset-assert 560)
   (birth-time            uint64  :offset-assert 568)
   (immediate-detonation? basic   :offset-assert 576)
   (attack-id             uint32  :offset-assert 444)
   (explode-delay-time    uint64  :offset-assert 584)
   )
  :method-count-assert 48
  :size-assert         #x250
  :flag-assert         #x3001d00250
  (:methods
    (gun-red-3-grenade-method-45 () none) ;; 45
    (gun-red-3-grenade-method-46 () none) ;; 46
    (gun-red-3-grenade-method-47 () none) ;; 47
    )
  (:state-methods
    impact ;; 22
    impact-tiny ;; 44
    sitting ;; 41
    moving ;; 23
    )
  )
|#

#|
(deftype shockwave-collision-pt (structure)
  ((collision-pt vector :inline :offset-assert 0)
   (normal       vector :inline :offset-assert 16)
   (found?       basic          :offset-assert 32)
   (angle        float          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype gun-red-2-shockwave (process)
  ((origin                          vector  :inline :offset-assert 128)
   (max-radius                      float           :offset-assert 144)
   (strength                        float           :offset-assert 148)
   (current-radius                  float           :offset-assert 152)
   (current-intensity               float           :offset-assert 156)
   (state-time                      uint64          :offset-assert 160)
   (alpha-scalar                    float           :offset-assert 168)
   (base-damage                     float           :offset-assert 172)
   (snd-charge                      uint32          :offset-assert 176)
   (min-charge-radius               float           :offset-assert 180)
   (max-charge-radius               float           :offset-assert 184)
   (total-charge-time               uint64          :offset-assert 192)
   (total-explode-time              uint64          :offset-assert 200)
   (ring-expansion-time             uint64          :offset-assert 208)
   (burst-expansion-time            uint64          :offset-assert 216)
   (warp-expansion-time             uint64          :offset-assert 224)
   (previously-attacked-targets     UNKNOWN 64      :offset-assert 232)
   (num-previously-attacked-targets int8            :offset-assert 744)
   (start-pilot?                    basic           :offset-assert 748)
   (explosion-0                     uint64          :offset-assert 752)
   (explosion-1                     uint64          :offset-assert 760)
   (generate-order-array            UNKNOWN 127     :offset-assert 768)
   (current-stage-t                 float           :offset-assert 896)
   (ammo-drained                    float           :offset-assert 900)
   (eventual-collision-points       UNKNOWN 128     :offset-assert 912)
   (next-computed-collision-point   int8            :offset-assert 7056)
   (num-collision-pts-to-generate   int8            :offset-assert 7057)
   (show-scorch-marks?              basic           :offset-assert 7060)
   (height-off-ground               float           :offset-assert 7064)
   (max-ground-radius               float           :offset-assert 7068)
   (current-ring-radius             float           :offset-assert 7072)
   (current-ring-alpha              float           :offset-assert 7076)
   (current-warp-radius             float           :offset-assert 7080)
   (current-warp-alpha              float           :offset-assert 7084)
   (current-burst-radius            float           :offset-assert 7088)
   (current-burst-alpha             float           :offset-assert 7092)
   (generating-marks?               basic           :offset-assert 7096)
   (generated-particles?            basic           :offset-assert 7100)
   (charge-part-tracker             uint64          :offset-assert 7104)
   )
  :method-count-assert 28
  :size-assert         #x1bc8
  :flag-assert         #x1c1b501bc8
  (:methods
    (gun-red-2-shockwave-method-17 () none) ;; 17
    (gun-red-2-shockwave-method-18 () none) ;; 18
    (gun-red-2-shockwave-method-19 () none) ;; 19
    (gun-red-2-shockwave-method-20 () none) ;; 20
    (gun-red-2-shockwave-method-21 () none) ;; 21
    (gun-red-2-shockwave-method-22 () none) ;; 22
    (gun-red-2-shockwave-method-23 () none) ;; 23
    (gun-red-2-shockwave-method-24 () none) ;; 24
    (gun-red-2-shockwave-method-25 () none) ;; 25
    (gun-red-2-shockwave-method-26 () none) ;; 26
    (gun-red-2-shockwave-method-27 () none) ;; 27
    )
  (:state-methods
    explode ;; 15
    die ;; 16
    charging ;; 14
    )
  )
|#

#|
(deftype gun-red-2-shockwave-init-params (structure)
  ((pos        vector :inline :offset-assert 0)
   (max-radius float          :offset-assert 16)
   (strength   float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype gun-red-2-explosion (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (gun-red-2-explosion-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype red-2-ring (process-drawable)
  ((current-alpha float  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (red-2-ring-method-21 () none) ;; 21
    (red-2-ring-method-22 () none) ;; 22
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype red-2-ring-init-params (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype red-3-sphere (process-drawable)
  ((current-alpha float  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (red-3-sphere-method-21 () none) ;; 21
    (red-3-sphere-method-22 () none) ;; 22
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype red-3-sphere-init-params (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern part-tracker-move-to-target-gun function)
;; (define-extern gun-red-2-shockwave-init-by-other function)
;; (define-extern generate-shockwave-scorch-marks-3 function)
;; (define-extern generate-shockwave-scorch-marks-2 function)
;; (define-extern red-2-ring-event-handler function)
;; (define-extern red-2-ring-init-by-other function)
;; (define-extern *impact-blur* object)
;; (define-extern *shockwave-blur-red-2* object)
;; (define-extern gun-fire-red-2 function)
;; (define-extern red-3-sphere-init-by-other function)
;; (define-extern gun-fire-red-3 function)
;; (define-extern gun-fire-red-1 function)
(define-extern target-gun-can-fire-red? (function pickup-type symbol :behavior target))
(define-extern target-gun-fire-red (function pickup-type (pointer process) :behavior target))
;; (define-extern gun-red-shot-event-handler function) ;; (function process-drawable int symbol event-message-block object :behavior gun-red-shot)
;; (define-extern gun-red-shot-init-by-other function) ;; (function vector vector gun-red-shot :behavior gun-red-shot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dark-shot                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-dark-shot (projectile)
  ((blast-radius  float            :offset-assert 512)
   (core-position vector   :inline :offset-assert 528)
   (core-velocity vector   :inline :offset-assert 544)
   (spin-vector   vector   :inline :offset-assert 560)
   (track-target  uint64           :offset-assert 576) ;; handle
   (size-t        float            :offset-assert 584)
   (result-array  handle   16      :offset-assert 592) ;; guessed by decompiler
   (result-count  int8             :offset-assert 720)
   (charge-sound  sound-id         :offset-assert 724) ;; guessed by decompiler
   (fire-sound    sound-id         :offset-assert 728) ;; guessed by decompiler
   (trail-sound   sound-id         :offset-assert 732) ;; guessed by decompiler
   (explode-sound sound-id         :offset-assert 736) ;; guessed by decompiler
   (start-pilot?  basic            :offset-assert 740)
   (spread-timer  uint64           :offset-assert 744)
   )
  :method-count-assert 43
  :size-assert         #x2f0
  :flag-assert         #x2b027002f0
  (:state-methods
    impact ;; 22
    fizzle ;; 42
    moving ;; 23
    startup ;; 41, old: (fizzle () _type_ :state)
    )
  )
|#

#|
(deftype gun-dark-3-sphere (process-drawable)
  ((alpha-val float  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype gun-dark-3-sphere-init-params (structure)
  ((pos       vector :inline :offset-assert 0)
   (size-x    float          :offset-assert 16)
   (size-y    float          :offset-assert 20)
   (alpha-val float          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype last-active-nuke-info (structure)
  ((last-active-nuke uint64  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype gun-dark-3-nuke (projectile)
  ((flash-time                 uint64          :offset-assert 512)
   (blur-time                  uint64          :offset-assert 520)
   (spawned-mushroom-cloud?    basic           :offset-assert 528)
   (strip                      basic           :offset-assert 532)
   (mushroom-top-pos           vector  :inline :offset-assert 544)
   (warp                       uint64          :offset-assert 560)
   (initial-velocity           vector  :inline :offset-assert 576)
   (start-y                    float           :offset-assert 592)
   (y-vel-adjust               float           :offset-assert 596)
   (launch-speed               float           :offset-assert 600)
   (launch-sin-region-start    float           :offset-assert 604)
   (launch-sin-region-end      float           :offset-assert 608)
   (launch-stay-state-time     uint64          :offset-assert 616)
   (launch-next-state          basic           :offset-assert 624)
   (launch-impact-state        basic           :offset-assert 628)
   (launch-y-scale             float           :offset-assert 632)
   (launch-height-t            float           :offset-assert 636)
   (expected-height            float           :offset-assert 640)
   (total-fly-time             uint64          :offset-assert 648)
   (num-dying-vehicles         uint8           :offset-assert 656)
   (num-dying-guards           uint8           :offset-assert 657)
   (num-dying-civilians        uint8           :offset-assert 658)
   (last-death-sound-play-time uint64          :offset-assert 664)
   (blur-curve                 basic           :offset-assert 672)
   (fade-curve                 basic           :offset-assert 676)
   (num-blur-segments          uint8           :offset-assert 680)
   (shook-camera?              basic           :offset-assert 684)
   (hit-wall?                  basic           :offset-assert 688)
   (killed-everything?         basic           :offset-assert 696)
   (explode-sound              uint32          :offset-assert 700)
   (explode-wall-sound         uint32          :offset-assert 704)
   (played-trail?              basic           :offset-assert 708)
   (smoke-trail                basic           :offset-assert 712)
   (killed-objects             UNKNOWN 64      :offset-assert 720)
   (num-killed-objects         int32           :offset-assert 1232)
   (last-kill-time             uint64          :offset-assert 1240)
   )
  :method-count-assert 60
  :size-assert         #x4e0
  :flag-assert         #x3c046004e0
  (:methods
    (gun-dark-3-nuke-method-41 () none) ;; 41
    (gun-dark-3-nuke-method-51 () none) ;; 51
    (gun-dark-3-nuke-method-52 () none) ;; 52
    (gun-dark-3-nuke-method-53 () none) ;; 53
    (gun-dark-3-nuke-method-54 () none) ;; 54
    (gun-dark-3-nuke-method-55 () none) ;; 55
    (gun-dark-3-nuke-method-56 () none) ;; 56
    (gun-dark-3-nuke-method-57 () none) ;; 57
    (gun-dark-3-nuke-method-58 () none) ;; 58
    (gun-dark-3-nuke-method-59 () none) ;; 59
    )
  (:state-methods
    wait-for-alive ;; 50
    impact-small ;; 47
    impact-embedded ;; 49
    impact ;; 22
    impact-dud ;; 48
    launch-3 ;; 46
    launch-2 ;; 45
    launch-1 ;; 44
    launch-0 ;; 43
    launching-base-state ;; 42
    )
  )
|#

#|
(deftype gravity-spinner (process)
  ((cached-damage          float          :offset-assert 128)
   (end-time               uint64         :offset-assert 136)
   (time-subtract          uint64         :offset-assert 144)
   (parent-hand            uint64         :offset-assert 152)
   (rotation-accel         vector :inline :offset-assert 160)
   (original-sphere-offset sphere :inline :offset-assert 176)
   (obj-radius             float          :offset-assert 192)
   (was-hit-previously?    basic          :offset-assert 196)
   (ground-height          float          :offset-assert 200)
   (next-ground-probe-time uint64         :offset-assert 208)
   )
  :method-count-assert 25
  :size-assert         #xd8
  :flag-assert         #x19006000d8
  (:methods
    (gravity-spinner-method-16 () none) ;; 16
    (gravity-spinner-method-17 () none) ;; 17
    (gravity-spinner-method-18 () none) ;; 18
    (gravity-spinner-method-19 () none) ;; 19
    (gravity-spinner-method-20 () none) ;; 20
    (gravity-spinner-method-21 () none) ;; 21
    (gravity-spinner-method-22 () none) ;; 22
    (gravity-spinner-method-23 () none) ;; 23
    (gravity-spinner-method-24 () none) ;; 24
    )
  (:state-methods
    zero-g ;; 14
    zero-g-vehicle ;; 15
    )
  )
|#

#|
(deftype gravity-ring (process-drawable)
  ((start-pos      vector              :inline :offset-assert 208)
   (jmod-outer     joint-mod-add-local :inline :offset-assert 224)
   (jmod-inner     joint-mod-add-local :inline :offset-assert 288)
   (ring-scale-t   float                       :offset-assert 352)
   (current-radius float                       :offset-assert 356)
   (max-radius     float                       :offset-assert 360)
   (reverse?       basic                       :offset-assert 364)
   (total-time     float                       :offset-assert 368)
   (ring-width     float                       :offset-assert 372)
   (stop-time      uint64                      :offset-assert 376)
   )
  :method-count-assert 22
  :size-assert         #x180
  :flag-assert         #x1601000180
  (:methods
    (gravity-ring-method-21 () none) ;; 21
    )
  (:state-methods
    expand ;; 20
    )
  )
|#

#|
(deftype gun-gravity (process-drawable)
  ((current-radius float          :offset-assert 200)
   (max-radius     float          :offset-assert 204)
   (lowest-y       float          :offset-assert 208)
   (start-pos      vector :inline :offset-assert 224)
   (total-time     float          :offset-assert 240)
   (ring-closest   uint64         :offset-assert 248)
   (ring-furthest  uint64         :offset-assert 256)
   (gravity-sound  uint32         :offset-assert 264)
   )
  :method-count-assert 25
  :size-assert         #x10c
  :flag-assert         #x190090010c
  (:methods
    (gun-gravity-method-21 () none) ;; 21
    (gun-gravity-method-22 () none) ;; 22
    (gun-gravity-method-23 () none) ;; 23
    (gun-gravity-method-24 () none) ;; 24
    )
  (:state-methods
    expand ;; 20
    )
  )
|#

;; (define-extern sparticle-lightning-2d-spline-align-plus-rotz function)
;; (define-extern gun-fire-dark-1 function)
;; (define-extern gun-dark-3-sphere-init-by-other function)
;; (define-extern *last-active-nuke* object)
;; (define-extern gun-dark-reaction function)
;; (define-extern nuke-move function)
(define-extern target-gun-can-fire-dark? (function pickup-type symbol :behavior target))
;; (define-extern gun-fire-dark-3 function)
;; (define-extern process-drawable-shock-effect-bullseye function) ;; (function process-focusable process-focusable matrix int sparticle-launcher sparticle-launcher sparticle-launcher none)
;; (define-extern gun-dark-shot-init-fizzle function) ;; (function vector none :behavior gun-dark-shot)
;; (define-extern *gravity-origin-pos* object)
;; (define-extern gravity-spinner-init-by-other function)
;; (define-extern zero-g-wait-for-land function)
;; (define-extern *zero-g-fake-attack-vec* object)
;; (define-extern *gun-gravity-shadow-control* shadow-control)
;; (define-extern gravity-ring-init-by-other function)
;; (define-extern gun-gravity-init-by-other function)
;; (define-extern gun-fire-dark-2 function)
(define-extern target-gun-fire-dark (function pickup-type (pointer process) :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-util                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern board-post (function none :behavior board))
(define-extern board-init (function object :behavior board))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-board                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *board-walk-mods* surface)
(define-extern *board-duck-mods* surface)
(define-extern *board-air-mods* surface)
(define-extern *board-jump-mods* surface)
(define-extern *board-ride-jump-mods* surface)
(define-extern *board-duck-jump-mods* surface)
(define-extern *board-spin-mods* surface)
(define-extern *board-spin-post-mods* surface)
(define-extern *board-flip-mods* surface)
(define-extern *board-wall-kick-mods* surface)
(define-extern *board-halfpipe-mods* surface)
(define-extern *board-turn-to-mods* surface)
(define-extern *board-ride-mods* surface)
(define-extern *collide-edge-board-halfpipe-spec* collide-edge-spec)
(define-extern target-board-green-eco-attack (function symbol none :behavior target))
(define-extern target-board-green-eco-use (function float none :behavior target))
(define-extern target-board-handler (function process int symbol event-message-block object :behavior target))
(define-extern board-turn-around? (function symbol :behavior target))
(define-extern target-board-setup (function symbol none :behavior target))
(define-extern target-board-init (function none :behavior target))
(define-extern target-board-exit (function none :behavior target))
(define-extern target-board-falling-anim-trans (function none :behavior target))
(define-extern board-on-ground? (function symbol :behavior target))
(define-extern target-board-smack-surface? (function symbol :behavior target))
(define-extern board-add-thrust (function none :behavior target))
(define-extern segment-array-vector->index (function (inline-array vector) int float float float))
(define-extern segment-array-index->vector (function (inline-array vector) int float vector int))
(define-extern target-board-exit-check (function none :behavior target))
(define-extern target-board-trail (function none :behavior target))
(define-extern target-board-effect (function none :behavior target))
(define-extern target-board-physics (function vector none :behavior target))
(define-extern target-board-collision (function none :behavior target))
(define-extern target-board-joint-points (function none :behavior target))
(define-extern target-board-pre-move (function none :behavior target))
(define-extern target-board-real-post (function none :behavior target))
(define-extern probe-test (function control-info vector pat-surface symbol))
(define-extern target-board-compute-edge (function time-frame :behavior target))
(define-extern board-ride-add-thrust (function vector float none :behavior target))
(define-extern target-board-ride-post (function none :behavior target))
(define-extern target-board-post (function none :behavior target))
(define-extern target-board-center-anim (function none :behavior target))
(define-extern target-board-turn-anim (function int none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern board-charge-track function)
;; (define-extern board-zap-track function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; board-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern grenade type)

(define-extern vector-vector-angle (function vector vector float))
(define-extern target-board-anim-trans (function none :behavior target))
(define-extern target-board-spin-check (function none :behavior target))
(define-extern target-board-halfpipe-trans (function none :behavior target))
(define-extern target-board-resolve-points (function none :behavior target))
(define-extern target-board-ground-check (function none :behavior target))
(define-extern target-board-halfpipe-check (function collide-action :behavior target))
(define-extern target-board-jump-trans (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype mech-info (basic)
  ((entity                entity-actor               :offset-assert 4)
   (hud                   handle             1       :offset-assert 8) ;; guessed by decompiler
   (mech-trans            vector             :inline :offset-assert 16)
   (mech-quat             vector             :inline :offset-assert 32)
   (mech-scale            vector             :inline :offset-assert 48)
   (engine-sound-id       sound-id                   :offset-assert 64) ;; guessed by decompiler
   (engine-sound-volume   float                      :offset-assert 68)
   (engine-sound-pitch    float                      :offset-assert 72)
   (thrust-sound-id       sound-id                   :offset-assert 76) ;; guessed by decompiler
   (drag-sound-id         sound-id                   :offset-assert 80) ;; guessed by decompiler
   (whine-sound-id        sound-id                   :offset-assert 84) ;; guessed by decompiler
   (shield-sound-id       sound-id                   :offset-assert 88)
   (mech-start-time       time-frame                 :offset-assert 96) ;; time-frame
   (mech-time             time-frame                 :offset-assert 104) ;; time-frame
   (no-get-off-time       time-frame                 :offset-assert 112) ;; time-frame
   (stick-lock            basic                      :offset-assert 120)
   (stick-off             basic                      :offset-assert 124)
   (forward-vel           meters                     :offset-assert 128)
   (jump-thrust           meters                     :offset-assert 132)
   (jump-thrust-fuel      float                      :offset-assert 136)
   (unstuck-time          time-frame                 :offset-assert 144) ;; time-frame
   (stuck-count           int32                      :offset-assert 152)
   (back-touch-point      vector             :inline :offset-assert 160)
   (back-touch-trans      vector             :inline :offset-assert 176)
   (back-touch-time       time-frame                 :offset-assert 192) ;; time-frame
   (attack-id             uint32                     :offset-assert 200)
   (shield-value          float                      :offset-assert 204)
   (shield-max            float                      :offset-assert 208)
   (shield-handle         handle                     :offset-assert 216)
   (walk-anim-leg         int32                      :offset-assert 224)
   (state-impact?         symbol             1       :offset-assert 228) ;; guessed by decompiler
   (state-impact          impact-control     1 :inline :offset-assert 240) ;; guessed by decompiler
   (thruster-flame-width  meters                     :offset-assert 320)
   (thruster-flame-length meters                     :offset-assert 324)
   (thruster-local-pos    vector             2 :inline :offset-assert 336) ;; guessed by decompiler
   (exhaust-local-pos     vector             2 :inline :offset-assert 368) ;; guessed by decompiler
   (exhaust-local-dir     vector             2 :inline :offset-assert 400) ;; guessed by decompiler
   (smoke-local-pos       vector             2 :inline :offset-assert 432) ;; guessed by decompiler
   (smoke-local-vel       vector             2 :inline :offset-assert 464) ;; guessed by decompiler
   (particle-system-2d    basic                      :offset-assert 496)
   (particle-system-3d    basic                      :offset-assert 500)
   (part-thruster         sparticle-launch-control   :offset-assert 504)
   (part-thruster-scale-x sp-field-init-spec         :offset-assert 508)
   (part-thruster-scale-y sp-field-init-spec         :offset-assert 512)
   (part-quat             quaternion                 :offset-assert 516)
   (part-vel              vector                     :offset-assert 520)
   )
  :method-count-assert 9
  :size-assert         #x20c
  :flag-assert         #x90000020c
  )

(define-extern *mech-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; menu                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype debug-menu-context (basic)
  ((is-active     symbol                      :offset-assert 4) ;; guessed by decompiler
   (sel-length    int32                       :offset-assert 8)
   (sel-menu      debug-menu                8 :offset-assert 12) ;; guessed by decompiler
   (root-menu     debug-menu                  :offset-assert 44) ;; guessed by decompiler
   (joypad-func   (function basic int none)   :offset-assert 48) ;; guessed by decompiler
   (joypad-item   basic                       :offset-assert 52)
   (font          font-context                :offset-assert 56) ;; guessed by decompiler
   (is-hidden     symbol                      :offset-assert 60) ;; guessed by decompiler
   (joypad-number int32                       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype debug-menu-node (basic)
  ((name          string      :offset-assert 4) ;; guessed by decompiler
   (parent        debug-menu  :offset-assert 8) ;; guessed by decompiler
   (refresh-delay int32       :offset-assert 12)
   (refresh-ctr   int32       :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype debug-menu (debug-menu-node)
  ((context       debug-menu-context  :offset-assert 20) ;; guessed by decompiler
   (selected-item debug-menu-item     :offset-assert 24) ;; guessed by decompiler
   (pix-width     int32               :offset-assert 28)
   (pix-height    int32               :offset-assert 32)
   (items         pair                :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype debug-menu-item (debug-menu-node)
  ((id int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype debug-menu-item-submenu (debug-menu-item)
  ((submenu debug-menu  :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype debug-menu-item-function (debug-menu-item)
  ((activate-func (function object object)  :offset-assert 24) ;; guessed by decompiler
   (hilite-timer  int8                      :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x1d
  :flag-assert         #x90000001d
  )
|#

#|
(deftype debug-menu-item-flag (debug-menu-item)
  ((activate-func (function object debug-menu-msg object)  :offset-assert 24) ;; guessed by decompiler
   (is-on         object                                   :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype debug-menu-item-var (debug-menu-item)
  ((display-str      string                                           :offset-assert 24) ;; guessed by decompiler
   (grabbed-joypad-p symbol                                           :offset-assert 28) ;; guessed by decompiler
   (float-p          symbol                                           :offset-assert 32) ;; guessed by decompiler
   (range-p          symbol                                           :offset-assert 36) ;; guessed by decompiler
   (show-len         int32                                            :offset-assert 40)
   (inc-delay        int32                                            :offset-assert 44)
   (inc-delay-ctr    int32                                            :offset-assert 48)
   (step-delay-ctr   int32                                            :offset-assert 52)
   (inc-dir          int32                                            :offset-assert 56)
   (fval             float                                            :offset-assert 60)
   (fundo-val        float                                            :offset-assert 64)
   (frange-min       float                                            :offset-assert 68)
   (frange-max       float                                            :offset-assert 72)
   (fstart-inc       float                                            :offset-assert 76)
   (fstep            float                                            :offset-assert 80)
   (fprecision       int32                                            :offset-assert 84)
   (factivate-func   (function int debug-menu-msg float float float)  :offset-assert 88) ;; guessed by decompiler
   (ival             int32                                            :offset-assert 60)
   (iundo-val        int32                                            :offset-assert 64)
   (irange-min       int32                                            :offset-assert 68)
   (irange-max       int32                                            :offset-assert 72)
   (istart-inc       int32                                            :offset-assert 76)
   (istep            int32                                            :offset-assert 80)
   (ihex-p           symbol                                           :offset-assert 92) ;; guessed by decompiler
   (iactivate-func   (function int debug-menu-msg int int int)        :offset-assert 88) ;; guessed by decompiler
   (ifloat-p         symbol                                           :offset-assert 96) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

;; (define-extern debug-menu-item-var-update-display-str function) ;; (function debug-menu-item-var debug-menu-item-var)
;; (define-extern debug-menu-item-var-make-int function) ;; (function debug-menu-item-var (function int debug-menu-msg int int int) int symbol int int symbol debug-menu-item-var)
;; (define-extern debug-menu-item-var-make-float function) ;; (function debug-menu-item-var (function int debug-menu-msg float float float) float symbol float float int debug-menu-item-var)
;; (define-extern debug-menu-context-grab-joypad function) ;; (function debug-menu-context basic (function basic int none) symbol)
;; (define-extern debug-menu-context-release-joypad function) ;; (function debug-menu-context symbol)
;; (define-extern debug-menu-item-get-max-width function) ;; (function debug-menu-item debug-menu int)
;; (define-extern debug-menu-context-default-selection function) ;; (function debug-menu-context symbol debug-menu-context)
;; (define-extern debug-menu-rebuild function) ;; (function debug-menu debug-menu)
;; (define-extern debug-menu-context-set-root-menu function) ;; (function debug-menu-context debug-menu debug-menu-context)
;; (define-extern debug-menu-append-item function) ;; (function debug-menu debug-menu-node debug-menu-node)
;; (define-extern debug-menu-remove-all-items function) ;; (function debug-menu debug-menu)
;; (define-extern debug-menu-func-decode function) ;; (function object function)
;; (define-extern debug-menu-make-from-template function) ;; (function debug-menu-context pair debug-menu-node)
;; (define-extern debug-menu-find-from-template function) ;; (function debug-menu-context pair debug-menu)
;; (define-extern debug-menu-item-submenu-render function) ;; (function debug-menu-item-submenu int int int symbol debug-menu-item-submenu)
;; (define-extern debug-menu-item-function-render function) ;; (function debug-menu-item-function int int int symbol debug-menu-item-function)
;; (define-extern debug-menu-item-flag-render function) ;; (function debug-menu-item-flag int int int symbol debug-menu-item-flag)
;; (define-extern debug-menu-item-var-render function) ;; (function debug-menu-item-var int int int symbol debug-menu-item-var)
;; (define-extern debug-menu-item-render function) ;; (function debug-menu-item int int int symbol debug-menu-item)
;; (define-extern debug-menu-render function) ;; (function debug-menu int int debug-menu-node int debug-menu)
;; (define-extern debug-menu-context-render function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern debug-menu-context-select-next-or-prev-item function) ;; (function debug-menu-context int debug-menu-context)
;; (define-extern debug-menu-context-select-new-item function) ;; (function debug-menu-context int debug-menu-context)
;; (define-extern debug-menu-context-open-submenu function) ;; (function debug-menu-context debug-menu basic)
;; (define-extern debug-menu-context-close-submenu function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern debug-menu-item-submenu-msg function) ;; (function debug-menu-item-submenu debug-menu-msg debug-menu-item-submenu)
;; (define-extern debug-menu-item-function-msg function) ;; (function debug-menu-item-function debug-menu-msg debug-menu-item-function)
;; (define-extern debug-menu-item-flag-msg function) ;; (function debug-menu-item-flag debug-menu-msg debug-menu-item-flag)
;; (define-extern debug-menu-item-var-joypad-handler function) ;; (function debug-menu-item-var int debug-menu-item-var)
;; (define-extern debug-menu-item-var-msg function) ;; (function debug-menu-item-var debug-menu-msg debug-menu-item-var)
;; (define-extern debug-menu-item-send-msg function) ;; (function debug-menu-item debug-menu-msg debug-menu-item)
;; (define-extern debug-menu-send-msg function) ;; (function debug-menu debug-menu-msg symbol debug-menu)
;; (define-extern debug-menu-context-send-msg function) ;; (function debug-menu-context debug-menu-msg debug-menu-dest debug-menu-context)
;; (define-extern debug-menu-context-activate-selection function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern debug-menus-default-joypad-func function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern debug-menus-active function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern debug-menus-handler function) ;; (function debug-menu-context debug-menu-context)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sphere-cull function) ;; (function vector symbol)
;; (define-extern guard-band-cull function) ;; (function vector symbol)
(define-extern sphere-in-view-frustum? (function sphere symbol))
(define-extern line-in-view-frustum? (function vector vector symbol))
;; (define-extern vis-cull function) ;; (function int symbol)
;; (define-extern vis-cull-debug function) ;; (function work-area int symbol)
;; (define-extern error-sphere function) ;; (function drawable-error string none)
;; (define-extern *edit-instance* object) ;; string
;; (define-extern *instance-mem-usage* object) ;; memory-usage-block
;; (define-extern find-instance-by-name-level function) ;; (function string level prototype-bucket)
;; (define-extern find-instance-by-name function) ;; (function string prototype-bucket)
;; (define-extern prototypes-game-visible-set! function) ;; (function pair symbol int)
;; (define-extern find-instance-by-index function) ;; (function type int bsp-header prototype-bucket)
;; (define-extern prototype-bucket-type function) ;; (function prototype-bucket type)
;; (define-extern prototype-bucket-recalc-fields function) ;; (function prototype-bucket prototype-bucket)
;; (define-extern print-prototype-list function) ;; (function none)
;; (define-extern draw-instance-info function) ;; (function string none)
;; (define-extern set-shadow-by-name function) ;; (function string int int none)
;; (define-extern get-shadow-by-name function) ;; (function string none)
;; (define-extern teleport-camera-by-name function) ;; (function string none)
;; (define-extern teleport-camera-by-pos function)
;; (define-extern calc-vu1-shadow function)
;; (define-extern calc-shadow-masks function)
;; (define-extern calc-realtime-lights function)
(define-extern calc-vu1-lights (function vu-lights draw-control uint none))
(define-extern dma-add-process-drawable (function process-drawable draw-control symbol dma-buffer none))
;; (define-extern *hud-lights* object) ;; vu-lights
;; (define-extern dma-add-process-drawable-hud function) ;; (function process-drawable draw-control float dma-buffer none)
(define-extern add-process-drawable (function process-drawable draw-control symbol dma-buffer none))
;; (define-extern foreground-engine-execute function) ;; (function engine display-frame none)
;; (define-extern main-debug-hook function) ;; (function none)
;; (define-extern *debug-hook* object) ;; pair
;; (define-extern *add-sphere* object) ;; symbol
;; (define-extern *generic-effect-mode* object) ;; int
;; (define-extern foreground-initialize-engines function) ;; (function none)
;; (define-extern foreground-execute-cpu-vu0-engines function) ;; (function none)
;; (define-extern real-main-draw-hook function) ;; (function none)
;; (define-extern main-draw-hook function) ;; (function none)
;; (define-extern *draw-hook* object) ;; (function none)
;; (define-extern default-init-buffer function) ;; (function bucket-id gs-zbuf gs-test none)
;; (define-extern default-end-buffer function) ;; (function bucket-id gs-zbuf gs-test none)
;; (define-extern screen-shot-scale function) ;; (function int string none)
;; (define-extern screen-shot function) ;; (function none)
;; (define-extern display-frame-start function) ;; (function display int float none)
;; (define-extern display-frame-finish function) ;; (function display display)
;; (define-extern determine-pause-mode function) ;; (function int)
;; (define-extern calc-ratio function)
;; (define-extern display-sync function) ;; (function display none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-group                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-inline-array          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-tree                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prototype                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main-collide                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern drawable-sphere-box-intersect? function) ;; (function drawable bounding-box4w symbol)
;; (define-extern instance-sphere-box-intersect? function) ;; (function drawable instance-tie bounding-box4w symbol)
;; (define-extern instance-tfragment-add-debug-sphere function) ;; (function drawable instance-tie symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; video                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-video-mode (function symbol none))
(define-extern get-video-mode (function symbol))
(define-extern set-aspect-ratio (function symbol none))
;; (define-extern get-aspect-ratio function) ;; (function symbol)
;; (define-extern set-progressive-scan function) ;; (function symbol none)
;; (define-extern get-progressive-scan function) ;; (function symbol)
;; (define-extern set-graphics-mode function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern set-letterbox-frames (function time-frame none))
(define-extern letterbox (function none))
(define-extern set-blackout-frames (function time-frame none))
(define-extern blackout (function none))
(define-extern add-blackout (function time-frame int int int int int))
(define-extern paused? (function symbol))
(define-extern movie? (function symbol))
;; (define-extern scene-select? function)
(define-extern demo? (function symbol))
(define-extern kiosk? (function symbol))
;; (define-extern *last-master-mode* object) ;; symbol
(define-extern set-master-mode (function symbol none))
;; (define-extern pause-allowed? function) ;; (function symbol)
;; (define-extern toggle-pause function) ;; (function int)
(define-extern *screen-filter* screen-filter)
;; (define-extern *cheat-temp* object) ;; (pointer int32)
(define-extern *master-exit* symbol)
;; (define-extern *progress-cheat* object) ;; symbol
;; (define-extern *first-boot* object) ;; symbol
;; (define-extern main-timeouts function)
;; (define-extern main-cheats function) ;; (function int)
;; (define-extern end-display function) ;; (function display none)
;; (define-extern display-loop-main function) ;; (function display none)
;; (define-extern display-loop function) ;; (function int :behavior process)
;; (define-extern on function) ;; (function symbol process)
;; (define-extern off function) ;; (function int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-cache                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collide-puls-work (structure)
  ((ignore-pat pat-surface         :offset-assert 0) ;; guessed by decompiler
   (bsphere    sphere      :inline :offset-assert 16)
   (move-dist  vector      :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype lsmi-work (structure)
  ((best-u      float                 :offset-assert 0)
   (orig-best-u float                 :offset-assert 4)
   (action      uint32                :offset-assert 8)
   (cquery      collide-query :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )
|#

;; (define-extern test-closest-pt-in-triangle function) ;; (function collide-cache symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collide-debug                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype col-rend-filter (structure)
  ((show-pat-set   pat-surface  :offset-assert 0) ;; guessed by decompiler
   (show-pat-clear pat-surface  :offset-assert 4) ;; guessed by decompiler
   (event-mask     uint32       :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern col-rend-draw function) ;; (function col-rend col-rend-filter none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; relocate                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memory-usage                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; memory-usage-block is already defined!

(define-extern mem-size (function basic symbol int int))
;; (define-extern *max-dma* object) ;; int

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; entity                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype debug-actor-info (basic)
  ((name    string  :offset-assert 4)
   (handle  handle  :offset-assert 8) ;; handle
   (process process :offset-assert 16)
   (pid     int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define-extern *spawn-actors* symbol)
;; (define-extern *compact-actors* object) ;; symbol
;; (define-extern *vis-actors* object) ;; symbol
(define-extern entity-by-name (function string entity))
;; (define-extern entity-by-type function) ;; (function type entity-actor)
(define-extern entity-by-aid (function uint entity))
;; (define-extern entity-actor-from-level-name function) ;; (function symbol entity-actor)
;; (define-extern entity-nav-mesh-by-aid function) ;; (function actor-id entity-nav-mesh)
;; (define-extern nav-mesh-from-res-tag function) ;; (function entity symbol int nav-mesh)
;; (define-extern entity-by-meters function) ;; (function float float float entity-actor)
;; (define-extern process-by-ename function) ;; (function string process)
;; (define-extern entity-process-count function) ;; (function symbol int)
;; (define-extern entity-count function) ;; (function int)
;; (define-extern entity-remap-names function) ;; (function pair none)
;; (define-extern process-status-bits function) ;; (function process symbol none)
(define-extern process-entity-set! (function process entity entity))
(define-extern process-task-mask (function process task-mask))
;; (define-extern update-actor-vis-box function) ;; (function process-drawable vector vector none)
;; (define-extern expand-bounding-box function) ;; (function vector vector vector vector none)
;; (define-extern expand-bounding-box-from-nav-meshes function)
;; (define-extern expand-vis-box-with-point function) ;; (function entity vector none)
;; (define-extern *debug-actor-info* debug-actor-info) ;; debug-actor-info
;; (define-extern *pid-string* object) ;; string
;; (define-extern debug-actor function) ;; (function string none)
;; (define-extern debug-actor-process function)
;; (define-extern draw-actor-marks function) ;; (function process none)
(define-extern init-entity (function process entity-actor type none))
;; (define-extern entity-deactivate-handler function) ;; (function process entity-actor none)
;; (define-extern check-for-rougue-process function) ;; (function process int int level none)
;; (define-extern process-drawable-scale-from-entity! function) ;; (function process-drawable entity none)
(define-extern process-drawable-from-entity! (function process-drawable entity-actor none))
(define-extern reset-actors (function symbol none))
;; (define-extern reset-cameras function) ;; (function none)
(define-extern entity-birth-no-kill (function entity process))
;; (define-extern entity-task-complete-on function) ;; (function entity none)
;; (define-extern entity-task-complete-off function) ;; (function entity none)
(define-extern process-entity-status! (function process entity-perm-status symbol entity-perm-status))
(define-extern find-nearest-entity (function vector type entity))
;; (define-extern entity-speed-test function) ;; (function string entity)
;; (define-extern dump-entity-remap function) ;; (function object object none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; path                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vol                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern plane-volume-intersect-dist (function vector vector vector float))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-engine                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-engine-spr-buffer (structure)
  ((mem-addr  (pointer nav-mesh)          :offset-assert 0) ;; guessed by decompiler
   (mem-nav   uint32                      :offset-assert 0)
   (spr-addr  (inline-array nav-control)  :offset-assert 4) ;; guessed by decompiler
   (spr-nav   uint32                      :offset-assert 4)
   (q-size    uint32                      :offset-assert 8)
   (i-nav     uint8                       :offset-assert 12)
   (done      int8                        :offset-assert 13)
   (nav-count int8                        :offset-assert 14)
   (i-pass    int8                        :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype nav-engine (structure)
  ((spr-addr              uint32                    :offset-assert 0)
   (nav-work-addr         uint32                    :offset-assert 4)
   (nav-mesh-addr         nav-mesh                  :offset-assert 8) ;; guessed by decompiler
   (poly-array-addr       uint32                    :offset-assert 12)
   (hash-sphere-addr      uint32                    :offset-assert 16)
   (hash-buckets-addr     uint32                    :offset-assert 20)
   (buf-nav-control-count int8                      :offset-assert 24)
   (max-pass-count        int8                      :offset-assert 25)
   (output-sphere-hash    uint8                     :offset-assert 26)
   (work-buf-array        nav-engine-spr-buffer   3 :offset-assert 28) ;; guessed by decompiler
   (spr-work              nav-mesh-work             :offset-assert 4)
   (mem-work              nav-mesh-work             :offset-assert 76)
   (spr-mesh              nav-mesh                  :offset-assert 8) ;; guessed by decompiler
   (mem-mesh              nav-mesh                  :offset-assert 80) ;; guessed by decompiler
   (spr-poly-array        uint32                    :offset-assert 12)
   (mem-poly-array        (inline-array nav-poly)   :offset-assert 84) ;; guessed by decompiler
   (hash-sphere-list      uint32                    :offset-assert 16)
   (hash-buckets          uint32                    :offset-assert 20)
   (to-spr-wait           uint32                    :offset-assert 88)
   (from-spr-wait         uint32                    :offset-assert 92)
   )
  :method-count-assert 22
  :size-assert         #x60
  :flag-assert         #x1600000060
  (:methods
    (nav-engine-method-9 () none) ;; 9 ;; (inc-spr-addr! (_type_ uint) uint)
    (nav-engine-method-10 () none) ;; 10 ;; (lay-out-spad-memory (_type_ nav-mesh) none)
    (nav-engine-method-11 () none) ;; 11 ;; (set-up-mem-work (_type_) none)
    (nav-engine-method-12 () none) ;; 12 ;; (add-spheres-from-mesh-user-list (_type_ sphere-hash nav-mesh) none)
    (nav-engine-method-13 () none) ;; 13 ;; (add-all-spheres (_type_) none)
    (nav-engine-method-14 () none) ;; 14 ;; (do-sphere-lookups (_type_) none)
    (nav-engine-method-15 () none) ;; 15 ;; (update-nav-controls-pipelined-in-spr (_type_) none)
    (nav-engine-method-16 () none) ;; 16 ;; (update-nav-controls-in-spr (_type_) none)
    (nav-engine-method-17 () none) ;; 17 ;; (upload-nav-to-spr (_type_ nav-engine-spr-buffer) none)
    (nav-engine-method-18 () none) ;; 18 ;; (download-nav-from-spr (_type_ nav-engine-spr-buffer) none)
    (nav-engine-method-19 () none) ;; 19 ;; (do-callbacks (_type_ nav-engine-spr-buffer) none)
    (nav-engine-method-20 () none) ;; 20 ;; (reloc-ptrs-to-spad (_type_ nav-engine-spr-buffer) none)
    (nav-engine-method-21 () none) ;; 21 ;; (reloc-ptrs-to-mem (_type_ nav-engine-spr-buffer) none)
    )
  )
|#

;; (define-extern nav-dma-send-to-spr-no-flush function) ;; (function pointer pointer int none)
;; (define-extern nav-dma-send-from-spr-no-flush function) ;; (function pointer pointer int none)
;; (define-extern inc-mod3 function) ;; (function int int)
;; (define-extern nav-state-patch-pointers function) ;; (function nav-state int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-find-clear-spot-work (structure)
  ((id-array     UNKNOWN 16 :offset-assert 0)
   (sphere-array UNKNOWN 16 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )
|#

;; (define-extern *debug-nav-control-output* object) ;; symbol
;; (define-extern *debug-nav-control* object) ;; symbol
;; (define-extern *debug-nav-mesh-output* object) ;; symbol
;; (define-extern *debug-nav-ray* object) ;; nav-ray
;; (define-extern *debug-ray-offset* object) ;; vector
;; (define-extern *debug-offset* object) ;; vector
;; (define-extern *nav-mesh-work* object) ;; nav-mesh-work
;; (define-extern *default-nav-mesh* nav-mesh) ;; nav-mesh
(define-extern nav-mesh-connect-from-ent (function process-drawable symbol))
;; (define-extern connection-validate function) ;; (function connection none)
;; (define-extern connection-list-validate function) ;; (function (inline-array connection) symbol)
;; (define-extern nav-control-validate function) ;; (function process-drawable none)
;; (define-extern debug-validate-nav-poly function) ;; (function nav-mesh-link nav-poly none)
;; (define-extern vu-point-triangle-intersection? function) ;; (function vector vector vector vector symbol)
;; (define-extern poly-in-height-range? function) ;; (function nav-poly float float symbol)
;; (define-extern init-ray-local function) ;; (function nav-ray nav-poly vector vector none)
;; (define-extern init-ray-dir-local function) ;; (function nav-ray nav-poly vector vector float none)
;; (define-extern nav-ray-test function) ;; (function nav-mesh nav-poly vector vector meters)
;; (define-extern point-poly-distance-min function) ;; (function nav-mesh-work nav-poly float nav-poly float)
;; (define-extern nav-mesh-route-table-bit-index function) ;; (function nav-mesh uint int int)
;; (define-extern ray-ccw-line-segment-intersection? function) ;; (function vector vector vector vector symbol)
;; (define-extern ray-line-segment-intersection? function) ;; (function vector vector vector vector symbol)
;; (define-extern plane-height-at-xz-point function) ;; (function plane vector float)
;; (define-extern nav-normal-from-3-points function) ;; (function vector vector vector vector none)
;; (define-extern get-nav-mesh function) ;; (function actor-id nav-mesh)
;; (define-extern find-nearest-nav-mesh function) ;; (function vector float nav-mesh)
;; (define-extern point-to-poly-boundary function) ;; (function nav-poly vector vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-control                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-control-cfs-work (structure)
  ((in-dir              vector  :inline :offset-assert 0)
   (right-dir           vector  :inline :offset-assert 16)
   (best-dir            vector  2       :offset-assert 32) ;; guessed by decompiler
   (temp-dir            vector  2       :offset-assert 64) ;; guessed by decompiler
   (away-dir            vector  :inline :offset-assert 96)
   (best-dir-angle      degrees 2       :offset-assert 112) ;; guessed by decompiler
   (ignore-mask         uint64          :offset-assert 120)
   (initial-ignore-mask uint64          :offset-assert 128)
   (i-sphere            int32           :offset-assert 136)
   (i-first-sphere      int32           :offset-assert 140)
   (i-inside-sphere     int32           :offset-assert 144)
   (inside-sphere-dist  float           :offset-assert 148)
   (sign                float           :offset-assert 152)
   (travel-len          float           :offset-assert 156)
   (dist2               float           :offset-assert 160)
   (inside-dist         float           :offset-assert 164)
   (rand-angle          float           :offset-assert 168)
   (dir-update          basic           :offset-assert 172)
   (debug-offset        vector  :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )
|#

;; (define-extern *nav-triangle-test-count* object) ;; int
;; (define-extern *nav-last-triangle-test-count* object) ;; int
;; (define-extern debug-nav-validate-current-poly function) ;; (function nav-mesh nav-poly vector symbol)
;; (define-extern debug-report-nav-stats function) ;; (function none)
;; (define-extern get-nav-control function) ;; (function process-drawable nav-mesh none)
;; (define-extern add-nav-sphere function) ;; (function nav-control sphere int none)
;; (define-extern add-collide-shape-spheres function) ;; (function nav-control collide-shape sphere none)
;; (define-extern circle-tangent-directions function) ;; (function vector vector vector vector vector)
;; (define-extern circle-ray-intersection? function) ;; (function vector vector float vector symbol)
;; (define-extern find-closest-circle-ray-intersection function) ;; (function vector vector float int (inline-array vector) int int)
;; (define-extern compute-dir-parm function) ;; (function vector vector vector float)
;; (define-extern vector-rotate-y-sincos! function) ;; (function vector vector float float float)
;; (define-extern test-xz-point-on-line-segment? function) ;; (function vector vector vector float symbol)
;; (define-extern *null-nav-callback-info* object)
;; (define-extern *default-nav-callback-info* object)
;; (define-extern *physics-nav-callback-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; aligner                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; effect-control                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *footstep-surface* object) ;; pat-surface
(define-extern *debug-effect-control* symbol)
;; (define-extern sound-name-with-material function) ;; (function string pat-surface string sound-name)
(define-extern effect-param->sound-spec (function sound-spec (pointer float) int process-focusable sound-spec))
(define-extern target-land-effect (function none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-wsplash-color* curve-color-fast)
;; (define-extern *range-wsplash-alpha* curve2d-fast)
;; (define-extern *range-wsplash-scale-x* curve2d-fast)
;; (define-extern *range-wsplash-scale-y* curve2d-fast)
;; (define-extern *curve-wsplash-alpha* curve2d-fast)
;; (define-extern *curve-wsplash-scale-x* curve2d-fast)
;; (define-extern *curve-wsplash-scale-y* curve2d-fast)
;; (define-extern *part-water-splash-curve-settings* object)
;; (define-extern *range-splash-color* curve-color-fast)
;; (define-extern *range-splash-alpha* curve2d-fast)
;; (define-extern *range-splash-scale-x* curve2d-fast)
;; (define-extern *range-splash-scale-y* curve2d-fast)
;; (define-extern *curve-splash-alpha* curve2d-fast)
;; (define-extern *curve-splash-scale-x* curve2d-fast)
;; (define-extern *curve-splash-scale-y* curve2d-fast)
;; (define-extern *part-water-splash-center-curve-settings* object)
;; (define-extern *curve-wsplash-small-scale-x* curve2d-fast)
;; (define-extern *curve-wsplash-small-scale-y* curve2d-fast)
;; (define-extern *part-water-splash-small-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-water-level-drop function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-and-die function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-and-die-motion function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-above-and-die function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern check-water-level-drop-motion function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern *water-simple-alpha-curve-in* object)
;; (define-extern *growing-curve* object)
;; (define-extern *water-simple-alpha-curve-fade-out* object)
;; (define-extern *color-curve-tan-brown* object)
;; (define-extern *water-wake-trail* object)
;; (define-extern part-water-splash-callback function) ;; (function part-tracker none)
;; (define-extern splash-spawn function) ;; (function float vector int none)
;; (define-extern rings-water-spawn function) ;; (function float vector vector float float none)
(define-extern water-info<-region (function water-info drawable-region-prim collide-shape collide-action water-info))
(define-extern find-water-1 (function water-sphere water-info water-info symbol))
(define-extern find-water-2 (function (inline-array water-sphere) int water-info water-info symbol))
(define-extern find-water-with-spheres (function (inline-array water-sphere) int water-info object))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-flow                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flow-section (structure)
  ((start      vector :inline :offset-assert 0)
   (trailing   plane  :inline :offset-assert 16)
   (pull-dir   vector :inline :offset-assert 32)
   (radial-dir vector :inline :offset-assert 48)
   (speed      float          :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype flow-section-array (inline-array-class)
  ((data flow-section :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype flow-control (basic)
  ((path           path-control               :offset-assert 4) ;; guessed by decompiler
   (speed          float                      :offset-assert 8)
   (belt-radius    float                      :offset-assert 12)
   (sections       flow-section-array         :offset-assert 16) ;; guessed by decompiler
   (leading        plane              :inline :offset-assert 32)
   (collide-bounds sphere             :inline :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process-drawable res-lump) _type_)
    (flow-control-method-9 () none) ;; 9 ;; (draw-path (_type_) none)
    (flow-control-method-10 () none) ;; 10 ;; (setup (_type_) none)
    (flow-control-method-11 () none) ;; 11 ;; (push-process (_type_ process-focusable) none)
    (flow-control-method-12 () none) ;; 12 ;; (find-and-push-things (_type_) none)
    (flow-control-method-13 () none) ;; 13
    )
  )
|#

#|
(deftype water-flow (process)
  ((root basic  :offset-assert 128)
   (flow basic  :offset-assert 132)
   )
  :method-count-assert 15
  :size-assert         #x88
  :flag-assert         #xf00100088
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern ray-plane-equation-intersect function) ;; (function vector vector vector vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gem-pool                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern get-gem-pool-size (function int float))
(define-extern compare-gems (function int (pointer float) symbol))
(define-extern gems-available? (function int symbol))
(define-extern notify-gem-pickup (function uint symbol))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collectables                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; +++collectables:collectable-flag
(defenum collectable-flag
  :type uint32
  :bitfield #t
  (bounce      0) ;; 1
  (fadeout     1) ;; 2
  (pickup      2) ;; 4
  (do-fadeout  3)  ;; 8
  (suck-in     4) ;; 16
  (no-eco-blue 5) ;; 32
  (no-bob      6) ;; 64
  (no-distance-check-fadeout 7) ;; 128
  )
;; ---collectables:collectable-flag

(deftype collectable (process-drawable)
  ((root            collide-shape-moving     :override)
   (pickup-type     pickup-type              :offset-assert 200) ;; pickup-type
   (pickup-amount   float                    :offset-assert 204)
   (notify          handle                   :offset-assert 208) ;; handle
   (old-base        vector           :inline :offset-assert 224)
   (base            vector           :inline :offset-assert 240)
   (extra-trans     vector           :inline :offset-assert 256)
   (jump-pos        vector           :inline :offset-assert 272)
   (flags           collectable-flag         :offset-assert 288)
   (birth-time      time-frame               :offset-assert 296) ;; seconds
   (collect-timeout time-frame               :offset-assert 304) ;; seconds
   (fadeout-timeout time-frame               :offset-assert 312) ;; seconds
   (bob-offset      uint64                   :offset-assert 320) ;; seconds
   (bob-amount      float                    :offset-assert 328)
   (pickup-handle   handle                   :offset-assert 336) ;; handle
   (actor-pause     symbol                   :offset-assert 344) ;; guessed by decompiler
   (collect-effect  sparticle-launch-group   :offset-assert 348)
   (collect-effect2 sparticle-launch-group   :offset-assert 352)
   (target          handle                   :offset-assert 360) ;; handle
   (suck-time       time-frame               :offset-assert 368) ;; seconds
   (suck-y-offset   float                    :offset-assert 376)
   (speed           vector           :inline :offset-assert 384)
   (movie-pos-index int32                    :offset-assert 400)
   )
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  (:state-methods
    blocked ;; 20
    wait ;; 21
    deploy ;; 22
    (suck handle) ;; 23
    jump ;; 24
    fade ;; 25
    (pickup symbol handle) ;; 26
    die ;; 27
    (notice-blue handle) ;; 28
    )
  (:methods
    (init-common (_type_ entity-actor pickup-type float) none) ;; 29
    (initialize-effects (_type_ pickup-type) none) ;; 30
    (go-to-initial-state (_type_) object) ;; 31
    (initialize-options (_type_ int float fact-info) collectable) ;; 32
    (initialize-allocations (_type_) none) ;; 33
    (common-post (_type_) none) ;; 34
    (do-pickup (_type_ handle) none) ;; 35
    )
  )

(deftype eco (collectable)
  ((respawn-delay time-frame :offset-assert 408)
   )
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )

(deftype eco-yellow (eco)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )

(deftype eco-red (eco)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )

(deftype eco-blue (eco)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )

(deftype eco-green (eco)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )

(deftype health (collectable)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )

(deftype eco-pill (collectable)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  (:state-methods
    wait ;; 21
    )
  )

(deftype money (collectable)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )

(deftype gem (money)
  ((roty-speed  degrees    :offset-assert 404) ;; degrees
   (bounce-time time-frame :offset-assert 408) ;; seconds
   (gem-pool    uint8      :offset-assert 416)
   )
  :method-count-assert 36
  :size-assert         #x1a1
  :flag-assert         #x24013001a1
  )

(deftype skill (money)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )


(deftype fuel-cell (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

(deftype trick-point (collectable)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )

(deftype skate-point (trick-point)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )

(deftype ammo-collectable (collectable)
  ((ammo-effect basic  :offset-assert 404)
   )
  :method-count-assert 36
  :size-assert         #x198
  :flag-assert         #x2401200198
  (:state-methods
    die ;; 27
    )
  )

(deftype ammo (ammo-collectable)
  ()
  :method-count-assert 36
  :size-assert         #x198
  :flag-assert         #x2401200198
  )

(deftype shield (ammo-collectable)
  ()
  :method-count-assert 36
  :size-assert         #x198
  :flag-assert         #x2401200198
  )

(deftype upgrade-collectable (ammo-collectable)
  ()
  :method-count-assert 36
  :size-assert         #x198
  :flag-assert         #x2401200198
  )

(define-extern initialize-eco-by-other (function vector vector fact-info object :behavior eco))
(define-extern add-blue-shake (function vector vector vector vector))
(define-extern check-blue-suck (function process-drawable symbol :behavior eco))
(define-extern add-blue-motion (function symbol symbol symbol symbol symbol :behavior eco))
(define-extern collectable-standard-event-handler (function process int symbol event-message-block object :behavior collectable))
(define-extern money-init-by-other (function vector vector fact-info entity-actor time-frame object :behavior money))
(define-extern money-init-by-other-no-bob (function vector vector fact-info float entity-actor object :behavior money))
(define-extern *collectable-dummy-shadow-control* shadow-control)
(define-extern initialize-ammo-by-other (function vector vector fact-info object :behavior ammo))
(define-extern initialize-upgrade-by-other (function vector vector fact-info entity-actor object :behavior upgrade-collectable))
(define-extern verify-pickup-type (function pickup-type pickup-type))
(define-extern birth-pickup-at-point (function vector pickup-type float symbol process-tree fact-info (pointer process) :behavior process))
(define-extern pickup-dark-set! (function fact-info (pointer pickup-type) (pointer float) int pickup-type))
(define-extern pickup-light-set! (function fact-info (pointer pickup-type) (pointer float) int pickup-type))
(define-extern pickup-ammo-set! (function fact-info (pointer pickup-type) (pointer float) int pickup-type))
(define-extern gun-pickup-type->game-feature (function pickup-type game-feature))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vent                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vent (process-drawable)
  ((root                collide-shape :override)
   (show-particles      symbol  :offset-assert 200)
   (collect-effect      sparticle-launch-group :offset-assert 204)
   (collect-effect2     sparticle-launch-group :offset-assert 208)
   (collect-effect-time time-frame :offset-assert 216)
   (blocker             entity-actor :offset-assert 224)
   (block-func          (function vent symbol) :offset-assert 228)
   (pickup-handle       handle  :offset-assert 232)
   )
  :method-count-assert 21
  :size-assert         #xf0
  :flag-assert         #x15007000f0
  (:methods
    (init! (_type_ entity-actor int) object) ;; 20
    )
  (:states
    vent-wait-for-touch
    vent-blocked
    (vent-pickup handle)
    )
  )

(deftype ecovent (vent)
  ()
  :method-count-assert 21
  :size-assert         #xf0
  :flag-assert         #x15007000f0
  )

(deftype light-eco-vent (process-drawable)
  ((part2       sparticle-launch-control :offset-assert 200)
   (pickup-time time-frame :offset-assert 208)
   (touch-time  time-frame :offset-assert 216)
   )
  :method-count-assert 22
  :size-assert         #xe0
  :flag-assert         #x16006000e0
  (:state-methods
    (open symbol) ;; 20
    (close symbol) ;; 21
    )
  )

(deftype dark-eco-vent (process-drawable)
  ((part2       sparticle-launch-control :offset-assert 200)
   (pickup-time time-frame :offset-assert 208)
   (touch-time  time-frame :offset-assert 216)
   )
  :method-count-assert 22
  :size-assert         #xe0
  :flag-assert         #x16006000e0
  (:state-methods
    (open symbol) ;; 20
    (close symbol) ;; 21
    )
  )

(define-extern vent-standard-event-handler (function process int symbol event-message-block object :behavior vent))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; task-control                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype resetter-control (basic)
  ((process          uint64  :offset-assert 8)
   (handle-init-hack basic   :offset-assert 8)
   )
  :method-count-assert 13
  :size-assert         #x10
  :flag-assert         #xd00000010
  (:methods
    (resetter-control-method-9 () none) ;; 9
    (resetter-control-method-10 () none) ;; 10
    (resetter-control-method-11 () none) ;; 11
    (resetter-control-method-12 () none) ;; 12
    )
  )
|#

#|
(deftype resetter (process)
  ((params           resetter-params :inline :offset-assert 128)
   (message          uint8                   :offset-assert 128)
   (flags            uint16                  :offset-assert 130)
   (reset-delay      uint32                  :offset-assert 164)
   (task             uint8                   :offset-assert 168)
   (text-message     uint32                  :offset-assert 172)
   (retry            resetter-spec   :inline :offset-assert 148)
   (retry-continue   basic                   :offset-assert 148)
   (retry-node       uint16                  :offset-assert 152)
   (retry-reset-mode basic                   :offset-assert 156)
   (fail             resetter-spec   :inline :offset-assert 132)
   (fail-continue    basic                   :offset-assert 132)
   (fail-node        uint16                  :offset-assert 136)
   (fail-reset-mode  basic                   :offset-assert 140)
   (resetter-id      uint32                  :offset-assert 176)
   (grabbed-player?  basic                   :offset-assert 180)
   (grabbed-time     uint64                  :offset-assert 184)
   (dead-player?     basic                   :offset-assert 192)
   (retry?           basic                   :offset-assert 196)
   (message-id       uint32                  :offset-assert 200)
   (stinger          uint32                  :offset-assert 204)
   (start-time       uint64                  :offset-assert 208)
   )
  :method-count-assert 17
  :size-assert         #xd8
  :flag-assert         #x11006000d8
  (:methods
    (resetter-method-16 () none) ;; 16
    )
  (:state-methods
    resetting ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *resetter-control* resetter-control)
(define-extern game-task-node->string (function game-task-node string))
;; (define-extern reset-city-squad-control function)
;; (define-extern city-task-faction-commands function)
;; (define-extern evaluate-faction-commands function)
(define-extern update-task-masks (function symbol int))
;; (define-extern play-clean function) ;; (function symbol int)
;; (define-extern play-task function) ;; (function game-task symbol symbol string)
;; (define-extern restart-mission function) ;; (function int)
;; (define-extern fail-mission function) ;; type
;; (define-extern task-node-by-name function) ;; (function string game-task-node-info)
(define-extern task-node-index-by-name (function string int))
(define-extern task-resolution-close! (function game-task symbol))
(define-extern task-close! (function string symbol))
;; (define-extern task-closed? function) ;; (function string symbol)
;; (define-extern open-task-nodes function) ;; (function (array game-task-node-info) (array game-task-node-info))
(define-extern task-node-closed? (function game-task-node symbol))
;; (define-extern task-node-close! function) ;; (function game-task-node int)
;; (define-extern task-open? function)
;; (define-extern task-node-open? function) ;; (function game-task-node symbol)
(define-extern task-node-open! (function game-task-node symbol int))
;; (define-extern task-node-close-upwards function)
(define-extern task-node-reset (function symbol int))
;; (define-extern task-node-dump function) ;; (function symbol symbol)
;; (define-extern resetter-init-by-other function)
;; (define-extern task-manager-init-by-other function) ;; (function game-task-node-info symbol object :behavior task-manager)
;; (define-extern task-manager-event-handler function) ;; (function process int symbol event-message-block object :behavior task-manager)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype scene-stage (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype subtitle-work (structure)
  ((draw-tmpl dma-gif-packet :inline :offset-assert 0)
   (color0    vector4w       :inline :offset-assert 32)
   (color1    vector4w       :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

;; (define-extern scene-decode-continue function) ;; (function basic continue-point)
;; (define-extern scene-lookup function) ;; (function basic scene)
;; (define-extern *subtitle-work* object) ;; subtitle-work
;; (define-extern draw-subtitle-image function) ;; (function subtitle-image font-context none)
;; (define-extern process-drawable-draw-subtitles function) ;; (function none :behavior process-drawable)
;; (define-extern scene-player-init function) ;; (function object symbol string none :behavior scene-player)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pov-camera                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern pov-camera-play-and-reposition function) ;; (function art-joint-anim vector float none :behavior pov-camera)
(define-extern pov-camera-init-by-other (function vector skeleton-group string pov-camera-flag process-drawable pair none :behavior pov-camera))
;; (define-extern othercam-calc function) ;; (function float float)
(define-extern othercam-init-by-other (function pov-camera int symbol symbol none :behavior othercam))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; powerups                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern cloud-track function) ;; (function process-tree process-tree (function vector none) time-frame time-frame time-frame none :behavior process)
(define-extern eco-blue-glow (function vector none))
;; (define-extern target-eco-process function) ;; (function none :behavior target)
;; (define-extern target-color-effect-process function) ;; (function none :behavior target)
(define-extern target-update-segs (function process-drawable none))
;; (define-extern target-draw-process function)
(define-extern target-powerup-process (function none :behavior target))
(define-extern target-powerup-effect (function symbol none :behavior target))
(define-extern process-contact-action (function process none :behavior target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; crates                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype crate-bank (basic)
  ((COLLIDE_YOFF           float  :offset-assert 4)
   (COLLIDE_RADIUS         float  :offset-assert 8)
   (DARKECO_EXPLODE_RADIUS float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype crate (process-focusable)
  ((root               collide-shape-moving :override)
   (fact               fact-info-crate      :override)
   (smush              smush-control :inline :offset-assert 208)
   (base               vector        :inline :offset-assert 240)
   (look               symbol                :offset-assert 256) ;; guessed by decompiler
   (defense            symbol                :offset-assert 260) ;; guessed by decompiler
   (incoming-attack-id uint32                :offset-assert 264)
   (target             handle                :offset-assert 272) ;; handle
   (child-count        int32                 :offset-assert 280)
   (victory-anim       spool-anim            :offset-assert 284) ;; guessed by decompiler
   )
  :method-count-assert 43
  :size-assert         #x120
  :flag-assert         #x2b00a00120
  (:state-methods
    hide ;; 28
    idle ;; 29
    (die symbol int) ;; 30
    special-contents-die ;; 31
    bounce-on ;; 32
    (notice-blue handle) ;; 33
    carry ;; 34
    fall ;; 35
    )
  (:methods
    (init! (_type_ entity-actor) none) ;; 36
    (init-skel! (_type_) none) ;; 37
    (init-collision! (_type_) none) ;; 38
    (params-set! (_type_ symbol symbol) none) ;; 39
    (go-initial-state (_type_) none) ;; 40
    (smush-update! (_type_) none) ;; 41
    (should-hide? (_type_) symbol) ;; 42
    )
  )

(deftype pickup-spawner (crate)
  ((blocker entity-actor  :offset-assert 288) ;; guessed by decompiler
   )
  :method-count-assert 43
  :size-assert         #x124
  :flag-assert         #x2b00b00124
  (:state-methods
    idle ;; 29
    )
  )

(deftype urn-a (crate)
  ()
  :method-count-assert 43
  :size-assert         #x120
  :flag-assert         #x2b00a00120
  )

(deftype urn-b (crate)
  ()
  :method-count-assert 43
  :size-assert         #x120
  :flag-assert         #x2b00a00120
  )

(deftype urn-c (crate)
  ()
  :method-count-assert 43
  :size-assert         #x120
  :flag-assert         #x2b00a00120
  )

(define-extern collectable type)

(define-extern *CRATE-bank* crate-bank)
(define-extern collectable-count (function process-tree int :behavior crate))
(define-extern crate-post (function none :behavior crate))
(define-extern crate-standard-event-handler (function process int symbol event-message-block object :behavior crate))
(define-extern crate-init-by-other (function entity vector symbol fact-info-crate object :behavior crate))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-sprite-work (structure)
  ((adgif-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl dma-gif-packet :inline :offset-assert 32)
   (draw-tmpl   dma-gif-packet :inline :offset-assert 64)
   (box-tmpl    dma-gif-packet :inline :offset-assert 96)
   (box2-tmpl   dma-gif-packet :inline :offset-assert 128)
   (mask-tmpl   dma-gif-packet :inline :offset-assert 160)
   (line-tmpl   dma-gif-packet :inline :offset-assert 192)
   (scan-tmpl   dma-gif-packet :inline :offset-assert 224)
   (line-color  uint64                 :offset-assert 256) ;; gs-rgbaq
   (scan-colors vector4w       32      :offset-assert 272) ;; guessed by decompiler
   (scanline    uint32                 :offset-assert 784)
   )
  :method-count-assert 9
  :size-assert         #x314
  :flag-assert         #x900000314
  )
|#

;; (define-extern *hud-sprite-work* object) ;; hud-sprite-work
;; (define-extern hud-create-icon function) ;; (function hud int int (pointer manipy))
;; (define-extern hud-hidden-event-handler function)
(define-extern hud-init-by-other (function object :behavior hud))
(define-extern hide-hud (function symbol none))
;; (define-extern enable-hud function) ;; (function none)
;; (define-extern hide-hud-quick function) ;; (function symbol none)
(define-extern show-hud (function object none))
(define-extern ready-hud (function symbol int none))
;; (define-extern hud-hidden? function) ;; (function symbol)
;; (define-extern set-hud-piece-position! function) ;; (function hud-sprite int int none)
;; (define-extern set-as-offset-from! function) ;; (function hud-sprite vector4w int int none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud-classes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hud-skullgem* object) ;; (pointer hud-skullgem)
;; (define-extern *gun-arrow-table* object)
(define-extern activate-hud (function target none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; secrets-menu                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *menu-secrets-array* (array secret-item-option))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-static                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype hud-scene-info (basic)
  ((name     string   :offset-assert 4) ;; guessed by decompiler
   (continue string   :offset-assert 8) ;; guessed by decompiler
   (info     object   :offset-assert 12) ;; guessed by decompiler
   (text     text-id  :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  ;; field info uses ~A with a signed load.
  )

(define-extern *main-options* menu-option-list)
(define-extern *main-options-debug* menu-option-list)
(define-extern *main-kiosk-options* menu-option-list)
(define-extern *main-demo-options* menu-option-list)
(define-extern *main-demo-shared-options* menu-option-list)
(define-extern *title* menu-option-list)
(define-extern *title-secret* menu-option-list)
(define-extern *unlocked-secrets* menu-option-list)
(define-extern *options-options* menu-option-list)
(define-extern *language-options* menu-option-list)
(define-extern *game-options* menu-option-list)
(define-extern *game-options-demo* menu-option-list)
(define-extern *graphic-options* menu-option-list)
(define-extern *graphic-title-options-pal* menu-option-list)
(define-extern *sound-options* menu-option-list)
(define-extern *picture-options* menu-option-list)
(define-extern *camera-options* menu-option-list)
(define-extern *quit-restart-options* menu-option-list)
(define-extern *load-save-options* menu-option-list)
(define-extern *save-options-title* menu-option-list)
(define-extern *loading-options* menu-option-list)
(define-extern *insufficient-space-options* menu-option-list)
(define-extern *hero-mode-message-options* menu-option-list)
(define-extern *secrets-insufficient-space-options* menu-option-list)
(define-extern *insert-card-options* menu-option-list)
(define-extern *error-loading-options* menu-option-list)
(define-extern *error-auto-saving-options* menu-option-list)
(define-extern *card-removed-options* menu-option-list)
(define-extern *error-disc-removed-options* menu-option-list)
(define-extern *error-reading-options* menu-option-list)
(define-extern *icon-info-options* menu-option-list)
(define-extern *format-card-options* menu-option-list)
(define-extern *already-exists-options* menu-option-list)
(define-extern *create-game-options* menu-option-list)
(define-extern *video-mode-warning-options* menu-option-list)
(define-extern *video-mode-ok-options* menu-option-list)
(define-extern *progressive-mode-warning-options* menu-option-list)
(define-extern *progressive-mode-ok-options* menu-option-list)
(define-extern *select-start-options* menu-option-list)
(define-extern *select-scene-options* menu-option-list)
(define-extern *bigmap-options* menu-option-list)
(define-extern *missions-options* menu-option-list)
(define-extern *highscores-options* menu-option-list)
(define-extern *controls-options* menu-option-list)
(define-extern *secret-options* menu-option-list)
(define-extern *language-name-remap* (array text-id))
(define-extern *audio-language-remap* (array uint8))
(define-extern *stereo-mode-name-remap* (array text-id))
(define-extern *hud-ring-graphic-remap* (array uint64))
(define-extern *hud-ring-kiosk-graphic-remap* (array uint64))
(define-extern *hud-ring-demo-graphic-remap* (array uint64))
(define-extern *hud-ring-demo-shared-graphic-remap* array)
(define-extern *hud-select-scene-act1* (array hud-scene-info))
(define-extern *hud-select-scene-act2* (array hud-scene-info))
(define-extern *hud-select-scene-act3* (array hud-scene-info))
(define-extern *hud-select-scene-commentary* (array hud-scene-info))
(define-extern *progress-icon-arrays* (array progress-icon-array))
(define-extern *inventory* menu-option-list)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-ring-cell (process-drawable)
  ((joint-idx     int32  :offset-assert 200)
   (init-angle    float  :offset-assert 204) ;; degrees
   (graphic-index int32  :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern *progress-stack* object) ;; (pointer uint8)
(define-extern *progress-process* (pointer progress))
;; (define-extern *progress-save-info* object) ;; mc-slot-info
(define-extern *progress-work* progress-work)
;; (define-extern min-max-wrap-around function) ;; (function int int int int)
;; (define-extern progress-intro-start function) ;; (function symbol int)
;; (define-extern hud-ring-cell-remap function)
;; (define-extern hud-ring-cell-init-by-other function) ;; (function int float int object :behavior hud-ring-cell)
;; (define-extern progress-init-by-other function) ;; (function symbol object :behavior progress)
;; (define-extern set-ring-position function) ;; (function progress float)
(define-extern activate-progress (function process symbol none))
;; (define-extern deactivate-progress function) ;; (function none)
;; (define-extern hide-progress-screen function) ;; (function none)
(define-extern progress-allowed? (function symbol))
;; (define-extern progress-trans function) ;; (function none :behavior progress)
;; (define-extern begin-scan function) ;; (function hud-box progress int)
;; (define-extern end-scan function) ;; (function hud-box float int)
;; (define-extern progress-post function) ;; (function none :behavior progress)
(define-extern *last-powerup-collect-amount* int)
(define-extern spawn-secret-notify-message (function int none))
;; (define-extern menu-secrets-notify-task-node-close function)
(define-extern menu-secrets-notify-powerup-collect (function int))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; progress-draw                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *progress-list-level* object)
;; (define-extern sort-task-node-result function) ;; (function int none)
;; (define-extern find-mission-text-at-index function) ;; (function int game-task-node-info)
;; (define-extern unlocked-secret-menu? function) ;; (function game-secrets symbol)
;; (define-extern memcard-unlocked-secrets? function) ;; (function symbol game-secrets)
;; (define-extern num-unlocked-secret? function) ;; (function game-secrets int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern init-ocean-far-regs function) ;; (function none)
;; (define-extern draw-large-polygon-ocean function) ;; (function none)
;; (define-extern render-ocean-quad function) ;; (function (inline-array ocean-vertex) dma-buffer symbol)
;; (define-extern test-seq-read function)
;; (define-extern test-worst-read function)
;; (define-extern test-seq-write function)
;; (define-extern test-worst-write function)
;; (define-extern test-to-spr function)
;; (define-extern test-from-spr function)
;; (define-extern test-to-from-spr function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-vu0                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-vu0-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-texture                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-texture-vu1-block object) ;; vu-function
;; (define-extern check-normals function) ;; (function symbol)
;; (define-extern generate-cloud-verts function) ;; (function int float symbol)
;; (define-extern generate-cloud-nrms function) ;; (function int float symbol)
;; (define-extern set-ocean-lk function) ;; (function int int none)
;; (define-extern set-ocean-normal-scale function) ;; (function float vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-mid                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-mid-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-transition               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ocean-near                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern ocean-near-block object) ;; vu-function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; minimap                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype minimap-texture-name-array (structure)
  ((data string 35 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )
|#

#|
(deftype minimap-corner-array (structure)
  ((data vector 35 :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )
|#

;; engine-minimap is already defined!

;; (define-extern *minimap-texture-name-array* object) ;; minimap-texture-name-array
;; (define-extern *minimap-corner-array* object) ;; minimap-corner-array
(define-extern *minimap* minimap)
;; (define-extern *minimap-class-list* object) ;; (inline-array minimap-class-node)
;; (define-extern lookup-minimap-texture-by-name function) ;; (function string string (pointer texture-page) texture)
;; (define-extern *minimap-table-entry-array* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bigmap                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *bigmap-info-array* object) ;; bigmap-info-array
(define-extern *bigmap* bigmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; eye                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *eye-work* eye-work)
(define-extern find-free-eye-index (function int string int int))
(define-extern free-eye-index (function int int))
(define-extern render-eyes-32 (function dma-buffer eye-control int pointer))
(define-extern render-eyes-64 (function dma-buffer eye-control int pointer))
(define-extern debug-eyes (function dma-buffer none))
(define-extern update-eyes (function none))
(define-extern get-eye-block (function int int int))
(define-extern convert-eye-data (function eye uint float))
(define-extern merc-eye-anim (function process-drawable none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glist-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype glst-node (structure)
  ((next glst-node  :offset-assert 0)
   (prev glst-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype glst-named-node (glst-node)
  ((privname string  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype glst-list (structure)
  ((head     glst-node  :offset-assert 0)
   (tail     glst-node  :offset-assert 4)
   (tailpred glst-node  :offset-assert 8)
   (numelem  int32      :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern glst-next function) ;; (function glst-node glst-node)
;; (define-extern glst-prev function) ;; (function glst-node glst-node)
;; (define-extern glst-head function) ;; (function glst-list glst-node)
;; (define-extern glst-tail function) ;; (function glst-list glst-node)
;; (define-extern glst-end-of-list? function) ;; (function glst-node symbol)
;; (define-extern glst-start-of-list? function) ;; (function glst-node symbol)
;; (define-extern glst-empty? function) ;; (function glst-list symbol)
;; (define-extern glst-node-name function) ;; (function glst-named-node string)
;; (define-extern glst-set-name! function) ;; (function glst-named-node string string)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glist                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern glst-num-elements function) ;; (function glst-list int)
;; (define-extern glst-remove function) ;; (function glst-list glst-node glst-node)
;; (define-extern glst-remove-tail function) ;; (function glst-list glst-node)
;; (define-extern glst-remove-head function) ;; (function glst-list glst-node)
;; (define-extern glst-insert-before function) ;; (function glst-list glst-node glst-node glst-node)
;; (define-extern glst-insert-after function) ;; (function glst-list glst-node glst-node glst-node)
;; (define-extern glst-add-tail function) ;; (function glst-list glst-node glst-node)
;; (define-extern glst-add-head function) ;; (function glst-list glst-node glst-node)
;; (define-extern glst-init-list! function) ;; (function glst-list glst-list)
;; (define-extern glst-find-node-by-name function) ;; (function glst-list string glst-node)
;; (define-extern glst-get-node-by-index function) ;; (function glst-list int glst-node)
;; (define-extern glst-length-of-longest-name function) ;; (function glst-list int)
;; (define-extern glst-get-node-index function) ;; (function glst-list glst-node int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; anim-tester                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype list-control (structure)
  ((listfunc            (function int list-control symbol)  :offset-assert 0) ;; guessed by decompiler
   (list-owner          uint32                              :offset-assert 4)
   (top                 int32                               :offset-assert 8)
   (left                int32                               :offset-assert 12)
   (list                glst-list                           :offset-assert 16)
   (the-node            glst-node                           :offset-assert 20)
   (top-index           int32                               :offset-assert 24)
   (the-index           int32                               :offset-assert 28)
   (the-disp-line       int32                               :offset-assert 32)
   (highlight-index     int32                               :offset-assert 36)
   (current-index       int32                               :offset-assert 40)
   (numlines            int32                               :offset-assert 44)
   (lines-to-disp       int32                               :offset-assert 48)
   (charswide           int32                               :offset-assert 52)
   (highlight-disp-line int32                               :offset-assert 56)
   (field-id            int32                               :offset-assert 60)
   (xpos                int32                               :offset-assert 64)
   (ypos                int32                               :offset-assert 68)
   (user-info           int32                               :offset-assert 72)
   (return-int          int32                               :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
|#

#|
(deftype list-field (structure)
  ((left  int32  :offset-assert 0)
   (width int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype DISP_LIST-bank (basic)
  ((V_SPACING     int32  :offset-assert 4)
   (BORDER_WIDTH  int32  :offset-assert 8)
   (BORDER_HEIGHT int32  :offset-assert 12)
   (MAX_LINES     int32  :offset-assert 16)
   (CHAR_WIDTH    int32  :offset-assert 20)
   (INC_DELAY     int32  :offset-assert 24)
   (BORDER_LINES  int32  :offset-assert 28)
   (CXOFF         int32  :offset-assert 32)
   (CYOFF         int32  :offset-assert 36)
   (BXOFF         int32  :offset-assert 40)
   (BYOFF         int32  :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype anim-tester-bank (basic)
  ((ANIM_SPEED            float  :offset-assert 4)
   (BLEND                 float  :offset-assert 8)
   (OBJECT_LIST_X         int32  :offset-assert 12)
   (OBJECT_LIST_Y         int32  :offset-assert 16)
   (OBJECT_LIST_MIN_WIDTH int32  :offset-assert 20)
   (ANIM_LIST_X           int32  :offset-assert 24)
   (ANIM_LIST_Y           int32  :offset-assert 28)
   (ANIM_LIST_MIN_WIDTH   int32  :offset-assert 32)
   (PICK_LIST_X           int32  :offset-assert 36)
   (PICK_LIST_Y           int32  :offset-assert 40)
   (PICK_LIST_MIN_WIDTH   int32  :offset-assert 44)
   (EDIT_LIST_X           int32  :offset-assert 48)
   (EDIT_LIST_Y           int32  :offset-assert 52)
   (EDIT_STATS_X          int32  :offset-assert 56)
   (EDIT_LIST_MIN_WIDTH   int32  :offset-assert 60)
   (EDIT_PICK_X           int32  :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

;; anim-tester is already defined!

#|
(deftype anim-test-obj (glst-named-node)
  ((obj-art-group basic                :offset-assert 12)
   (seq-list      glst-list    :inline :offset-assert 16)
   (flags         int32                :offset-assert 32)
   (mesh-geo      basic                :offset-assert 36)
   (joint-geo     basic                :offset-assert 40)
   (list-con      list-control :inline :offset-assert 44)
   (parent        uint32               :offset-assert 124)
   (anim-index    int32                :offset-assert 128)
   (anim-hindex   int32                :offset-assert 132)
   (seq-index     int32                :offset-assert 136)
   (seq-hindex    int32                :offset-assert 140)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

#|
(deftype anim-test-sequence (glst-named-node)
  ((item-list    glst-list     :inline :offset-assert 12)
   (playing-item int32                 :offset-assert 28)
   (flags        int32                 :offset-assert 32)
   (list-con     list-control  :inline :offset-assert 36)
   (parent       anim-test-obj         :offset-assert 116)
   )
  :method-count-assert 9
  :size-assert         #x78
  :flag-assert         #x900000078
  )
|#

#|
(deftype anim-test-seq-item (glst-named-node)
  ((speed       int32               :offset-assert 12)
   (blend       int32               :offset-assert 16)
   (first-frame float               :offset-assert 20)
   (last-frame  float               :offset-assert 24)
   (num-frames  float               :offset-assert 28)
   (artist-base float               :offset-assert 32)
   (flags       int32               :offset-assert 36)
   (parent      anim-test-sequence  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

;; (define-extern *DISP_LIST-bank* DISP_LIST-bank)
;; (define-extern display-list-control function)
;; (define-extern *ANIM_TESTER-bank* anim-tester-bank)
;; (define-extern anim-tester-num-print function)
;; (define-extern *anim-tester* object) ;; (pointer anim-tester)
;; (define-extern anim-test-obj-init function)
;; (define-extern anim-test-sequence-init function)
;; (define-extern anim-test-seq-item-copy! function)
;; (define-extern anim-test-obj-item-valid? function)
;; (define-extern anim-test-obj-remove-invalid function)
;; (define-extern anim-tester-real-post function)
;; (define-extern anim-tester-post function)
;; (define-extern anim-tester-update-anim-info function)
;; (define-extern anim-tester-reset function)
;; (define-extern anim-tester-disp-frame-num function)
;; (define-extern anim-tester-standard-event-handler function)
;; (define-extern anim-test-obj-list-handler function)
;; (define-extern anim-test-anim-list-handler function)
;; (define-extern anim-test-sequence-list-handler function)
;; (define-extern anim-test-field-highlight-lw object)
;; (define-extern anim-tester-adjust-frame function)
;; (define-extern anim-tester-pick-item-setup function)
;; (define-extern anim-test-seq-mark-as-edited function)
;; (define-extern anim-test-edit-seq-insert-item function)
;; (define-extern anim-test-edit-sequence-list-handler function)
;; (define-extern anim-tester-interface function)
;; (define-extern anim-tester-get-playing-item function)
;; (define-extern initialize-anim-tester function)
;; (define-extern anim-tester-string-get-frame!! function)
;; (define-extern anim-tester-load-object-seqs function)
;; (define-extern anim-tester-save-object-seqs function)
;; (define-extern anim-tester-save-all-objects function)
;; (define-extern anim-tester-add-newobj function)
;; (define-extern anim-tester-stop function)
;; (define-extern anim-tester-start function) ;; (function symbol)
;; (define-extern anim-tester-add-object function) ;; (function string none)
;; (define-extern anim-tester-set-name function)
;; (define-extern anim-tester-add-sequence function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; viewer                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype viewer (process-drawable)
  ((janim art-joint-anim  :offset-assert 200) ;; guessed by decompiler
   )
  :method-count-assert 20
  :size-assert         #xcc
  :flag-assert         #x14005000cc
  (:states
    viewer-process ;; associated process guessed by decompiler, old: (state viewer)
    )
  )

(define-extern *viewer* viewer)
(define-extern *viewer-sg* skeleton-group)
(define-extern viewer-string string)
(define-extern viewer-ja-name string)
(define-extern viewer-geo-name string)
(define-extern actor-get-arg! (function string string string symbol))
(define-extern art-part-name (function string string))
(define-extern init-viewer (function string string object :behavior viewer))
(define-extern init-viewer-for-other (function string vector entity-actor object :behavior viewer))
(define-extern add-a-bunch (function string int int float process-tree entity-actor symbol))
(define-extern birth-viewer (function process entity-actor object))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; part-tester                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype part-tester (process)
  ((root      trsqv                     :offset-assert 128) ;; guessed by decompiler
   (part      sparticle-launch-control  :offset-assert 132) ;; guessed by decompiler
   (old-group sparticle-launch-group    :offset-assert 136) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x8c
  :flag-assert         #xe0010008c
  (:states
    part-tester-idle ;; associated process guessed by decompiler, old: (state part-tester)
    )
  )
|#

;; (define-extern *part-tester-name* object) ;; string
;; (define-extern part-tester-init-by-other function) ;; (function vector none :behavior process-drawable)
;; (define-extern *debug-part-dead-pool* object) ;; dead-pool
;; (define-extern start-part function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; manipulator                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype manipulator (structure)
  ((action             uint32               :offset-assert 0)
   (mode               uint32               :offset-assert 4)
   (dragging?          basic                :offset-assert 8)
   (position           vector       :inline :offset-assert 16)
   (speed              vector       :inline :offset-assert 32)
   (drag-ref-position  vector       :inline :offset-assert 48)
   (mouse-ref-position vector       :inline :offset-assert 64)
   (mat                matrix       :inline :offset-assert 80)
   (rotate-ref         int32                :offset-assert 144)
   (angles             euler-angles :inline :offset-assert 160)
   )
  :method-count-assert 15
  :size-assert         #xb0
  :flag-assert         #xf000000b0
  (:methods
    (manipulator-method-9 () none) ;; 9
    (manipulator-method-10 () none) ;; 10
    (manipulator-method-11 () none) ;; 11
    (manipulator-method-12 () none) ;; 12
    (manipulator-method-13 () none) ;; 13
    (manipulator-method-14 () none) ;; 14
    )
  )
|#

;; (define-extern draw-axis function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype editable-region (basic)
  ((changed   symbol           :offset-assert 4) ;; guessed by decompiler
   (locked    symbol           :offset-assert 8) ;; guessed by decompiler
   (id        uint64           :offset-assert 16)
   (filter    editable-filter  :offset-assert 24) ;; guessed by decompiler
   (tree      symbol           :offset-assert 28) ;; guessed by decompiler
   (level     string           :offset-assert 32) ;; guessed by decompiler
   (on-enter  string           :offset-assert 36) ;; guessed by decompiler
   (on-inside string           :offset-assert 40) ;; guessed by decompiler
   (on-exit   string           :offset-assert 44) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  ;; field on-enter uses ~A with a signed load. field on-inside uses ~A with a signed load. field on-exit uses ~A with a signed load.
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (editable-region-method-9 () none) ;; 9 ;; (editable-region-method-9 (_type_ editable-array int int) symbol)
    (editable-region-method-10 () none) ;; 10 ;; (editable-region-method-10 (_type_ int) symbol)
    (editable-region-method-11 () none) ;; 11 ;; (editable-region-method-11 (_type_ vector int) none)
    (editable-region-method-12 () none) ;; 12 ;; (editable-region-method-12 (_type_) editable-filter)
    )
  )
|#

#|
(deftype editable (basic)
  ((flags  editable-flag    :offset-assert 4)
   (name   string           :offset-assert 8) ;; guessed by decompiler
   (id     uint32           :offset-assert 12)
   (region editable-region  :offset-assert 16) ;; guessed by decompiler
   (owner  pair             :offset-assert 20) ;; guessed by decompiler
   (prefix basic            :offset-assert 24)
   )
  :method-count-assert 36
  :size-assert         #x1c
  :flag-assert         #x240000001c
  (:methods
    (editable-method-9 () none) ;; 9 ;; (get-color (_type_ int) rgba)
    (editable-method-10 () none) ;; 10 ;; (editable-method-10 (_type_) none)
    (editable-method-11 () none) ;; 11 ;; (editable-method-11 (_type_ vector) symbol)
    (editable-method-12 () none) ;; 12 ;; (select-editable! (_type_ symbol) none)
    (editable-method-13 () none) ;; 13 ;; (edit-get-distance (_type_ vector) float)
    (editable-method-14 () none) ;; 14 ;; (edit-get-trans (_type_) vector)
    (editable-method-15 () none) ;; 15 ;; (editable-method-15 (_type_ vector int) none)
    (editable-method-16 () none) ;; 16 ;; (edit-coord! (_type_ vector editable-flag) none)
    (editable-method-17 () none) ;; 17 ;; (editable-method-17 (_type_ vector) none)
    (editable-method-18 () none) ;; 18 ;; (editable-method-18 (_type_ vector matrix) none)
    (editable-method-19 () none) ;; 19 ;; (editable-method-19 (_type_ vector) none)
    (editable-method-20 () none) ;; 20 ;; (editable-method-20 (_type_ vector vector vector vector) none)
    (editable-method-21 () none) ;; 21 ;; (editable-method-21 (_type_ editable-region) none)
    (editable-method-22 () none) ;; 22 ;; (editable-method-22 (_type_ editable-array int int) symbol)
    (editable-method-23 () none) ;; 23 ;; (editable-method-23 (_type_) symbol)
    (editable-method-24 () none) ;; 24 ;; (editable-method-24 (_type_) none)
    (editable-method-25 () none) ;; 25 ;; (editable-method-25 (_type_ editable-array) none)
    (editable-method-26 () none) ;; 26 ;; (editable-method-26 (_type_ editable editable-array) none)
    (editable-method-27 () none) ;; 27 ;; (editable-method-27 (_type_ editable-array) editable)
    (editable-method-28 () none) ;; 28 ;; (editable-method-28 (_type_ editable-filter) none)
    (editable-method-29 () none) ;; 29 ;; (editable-method-29 (_type_ editable-filter) symbol)
    (editable-method-30 () none) ;; 30
    (editable-method-31 () none) ;; 31
    (editable-method-32 () none) ;; 32
    (editable-method-33 () none) ;; 33
    (editable-method-34 () none) ;; 34
    (editable-method-35 () none) ;; 35
    )
  )
|#

#|
(deftype editable-array (basic)
  ((allocated-length  int32                     :offset-assert 4)
   (length            int32                     :offset-assert 8)
   (region            editable-region           :offset-assert 12) ;; guessed by decompiler
   (backup-region     editable-region           :offset-assert 16) ;; guessed by decompiler
   (region-lock?      symbol                    :offset-assert 20) ;; guessed by decompiler
   (move-lock?        symbol                    :offset-assert 24) ;; guessed by decompiler
   (move-speed        float                     :offset-assert 28)
   (selection         (array editable)          :offset-assert 32) ;; guessed by decompiler
   (filter            editable-filter  2        :offset-assert 36) ;; guessed by decompiler
   (target            editable                  :offset-assert 44) ;; guessed by decompiler
   (target-mode       editable-command          :offset-assert 48) ;; guessed by decompiler
   (target-command    editable-command          :offset-assert 52) ;; guessed by decompiler
   (target-message    string                    :offset-assert 56) ;; guessed by decompiler
   (edit-plane        editable-plane            :offset-assert 60) ;; guessed by decompiler
   (edit-plane-center vector           :inline  :offset-assert 64)
   (edit-plane-normal vector           :inline  :offset-assert 80)
   (level-offset      vector           :inline  :offset-assert 96)
   (level-info-id     uint32                    :offset-assert 112)
   (level             uint32                    :offset-assert 116) ;; guessed by decompiler
   (edit-param0       float                     :offset-assert 120)
   (data              editable         :dynamic :offset-assert 124) ;; guessed by decompiler
   (UNKNOWN           UNKNOWN                   :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 20
  :size-assert         #x7c
  :flag-assert         #x140000007c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type int) _type_)
    (editable-array-method-9 () none) ;; 9 ;; (editable-array-method-9 (_type_ editable-command mouse-info) symbol)
    (editable-array-method-10 () none) ;; 10 ;; (editable-array-method-10 (_type_ vector int) editable)
    (editable-array-method-11 () none) ;; 11 ;; (editable-array-method-11 (_type_) int)
    (editable-array-method-12 () none) ;; 12 ;; (editable-array-method-12 (_type_ editable-array) none)
    (editable-array-method-13 () none) ;; 13 ;; (editable-array-method-13 (_type_ editable-command editable-command string) none)
    (editable-array-method-14 () none) ;; 14 ;; (editable-array-method-14 (_type_ (function editable editable-region symbol) editable-region) (array editable))
    (editable-array-method-15 () none) ;; 15 ;; (editable-array-method-15 (_type_ editable) none)
    (editable-array-method-16 () none) ;; 16 ;; (editable-array-method-16 (_type_) none)
    (editable-array-method-17 () none) ;; 17 ;; (editable-array-method-17 (_type_ vector vector) vector)
    (editable-array-method-18 () none) ;; 18
    (editable-array-method-19 () none) ;; 19
    )
  )
|#

#|
(deftype editable-point (editable)
  ((flags  editable-flag           :offset-assert 0)
   (name   string                  :offset-assert 4) ;; guessed by decompiler
   (id     uint32                  :offset-assert 8)
   (region editable-region         :offset-assert 12) ;; guessed by decompiler
   (owner  pair                    :offset-assert 16) ;; guessed by decompiler
   (prefix basic                   :offset-assert 20)
   (radius meters                  :offset-assert 24) ;; float
   (trans  vector          :inline :offset-assert 28)
   )
  :method-count-assert 36
  :size-assert         #x30
  :flag-assert         #x2400000030
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type vector editable-region) _type_)
    )
  )
|#

#|
(deftype editable-sphere (editable-point)
  ()
  :method-count-assert 36
  :size-assert         #x30
  :flag-assert         #x2400000030
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type vector float editable-region) _type_)
    )
  )
|#

#|
(deftype editable-sample (editable-point)
  ()
  :method-count-assert 36
  :size-assert         #x30
  :flag-assert         #x2400000030
  )
|#

#|
(deftype editable-light (editable-sphere)
  ((direction           vector  :inline :offset-assert 44)
   (color               vector  :inline :offset-assert 60)
   (decay-start         float           :offset-assert 76)
   (ambient-point-ratio float           :offset-assert 80)
   (brightness          float           :offset-assert 84)
   (shadow              uint32          :offset-assert 44)
   (shadows             UNKNOWN 5       :offset-assert 88)
   (shadow-ambi         float           :offset-assert 88)
   (shadow-dir0         float           :offset-assert 92)
   (shadow-dir1         float           :offset-assert 96)
   (shadow-dir2         float           :offset-assert 100)
   (shadow-dir3         float           :offset-assert 104)
   )
  :method-count-assert 36
  :size-assert         #x70
  :flag-assert         #x2400000070
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type vector float editable-region) _type_)
    )
  )
|#

#|
(deftype editable-entity (editable-point)
  ((angles euler-angles :inline :offset-assert 44)
   (idx    int32                :offset-assert 60)
   )
  :method-count-assert 37
  :size-assert         #x44
  :flag-assert         #x2500000044
  (:methods
    (editable-entity-method-36 () none) ;; 36
    )
  )
|#

#|
(deftype editable-face (editable)
  ((flags   editable-flag           :offset-assert 0)
   (name    string                  :offset-assert 4) ;; guessed by decompiler
   (id      uint32                  :offset-assert 8)
   (region  editable-region         :offset-assert 12) ;; guessed by decompiler
   (owner   pair                    :offset-assert 16) ;; guessed by decompiler
   (prefix  basic                   :offset-assert 20)
   (length  int32                   :offset-assert 24)
   (normal  vector          :inline :offset-assert 28)
   (center  vector          :inline :offset-assert 44)
   (vertex  editable-point  6       :offset-assert 60) ;; guessed by decompiler
   (UNKNOWN UNKNOWN                 :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 38
  :size-assert         #x58
  :flag-assert         #x2600000058
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type editable-region) _type_)
    (editable-face-method-36 () none) ;; 36
    (editable-face-method-37 () none) ;; 37
    )
  )
|#

#|
(deftype editable-plane (editable)
  ((flags   editable-flag     :offset-assert 0)
   (name    string            :offset-assert 4) ;; guessed by decompiler
   (id      uint32            :offset-assert 8)
   (region  editable-region   :offset-assert 12) ;; guessed by decompiler
   (owner   pair              :offset-assert 16) ;; guessed by decompiler
   (prefix  basic             :offset-assert 20)
   (length  int32             :offset-assert 24)
   (radius  meters            :offset-assert 28) ;; float
   (vertex  editable-point  2 :offset-assert 32) ;; guessed by decompiler
   (UNKNOWN UNKNOWN           :offset-assert -1) ;; field could not be read.
   )
  :method-count-assert 38
  :size-assert         #x2c
  :flag-assert         #x260000002c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type editable-region) _type_)
    (editable-plane-method-36 () none) ;; 36
    (editable-plane-method-37 () none) ;; 37
    )
  )
|#

#|
(deftype editable-player (process-drawable)
  ((current           editable-array           :offset-assert 200) ;; guessed by decompiler
   (current-command   uint32                   :offset-assert 204)
   (select-command    function                 :offset-assert 208) ;; guessed by decompiler
   (drag-command      uint32                   :offset-assert 212)
   (extra-command     function                 :offset-assert 216) ;; guessed by decompiler
   (left-handed       basic                    :offset-assert 220)
   (light-names       basic                    :offset-assert 224)
   (external-cam-mode symbol                   :offset-assert 228) ;; guessed by decompiler
   (command           editable-command 6       :offset-assert 232) ;; guessed by decompiler
   (close-menu-time   uint64                   :offset-assert 256) ;; time-frame
   (mouse-pos         vector           :inline :offset-assert 272)
   (mouse-end         vector           :inline :offset-assert 288)
   (manipulator       manipulator      :inline :offset-assert 304)
   (mouse-box         UNKNOWN          2       :offset-assert 480)
   (mouse-hit         vector           :inline :offset-assert 512)
   (mouse-normal      vector           :inline :offset-assert 528)
   (float-variable    float                    :offset-assert 544)
   (float-step        float                    :offset-assert 548)
   (float-max         float                    :offset-assert 552)
   (float-min         float                    :offset-assert 556)
   (float-id          uint32                   :offset-assert 560)
   )
  :method-count-assert 24
  :size-assert         #x234
  :flag-assert         #x1801c00234
  (:methods
    (editable-player-method-20 () none) ;; 20 ;; (idle () _type_ :state)
    (editable-player-method-21 () none) ;; 21 ;; (editable-player-method-21 (_type_) none)
    (editable-player-method-22 () none) ;; 22
    (editable-player-method-23 () none) ;; 23
    )
  )
|#

#|
(deftype editable-work (basic)
  ((num-found  int16        :offset-assert 4)
   (last-found int16        :offset-assert 6)
   (last-x     float        :offset-assert 8)
   (last-y     float        :offset-assert 12)
   (hide       basic        :offset-assert 16)
   (found      editable 256 :offset-assert 20) ;; guessed by decompiler
   (dists      uint32   256 :offset-assert 1044) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x814
  :flag-assert         #x900000814
  )
|#

;; (define-extern *editable-temp-id* object) ;; int
;; (define-extern *editable-default-name* object)
;; (define-extern editable-command->string function) ;; (function editable-command string)
;; (define-extern editable-filter->string function) ;; (function editable-filter basic string)
;; (define-extern *editable-work* object) ;; editable-work
;; (define-extern *editable* object) ;; (pointer editable-player)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern common-owner function)
;; (define-extern update-light-sphere-from-editable-light function) ;; (function editable-light none)
;; (define-extern load-editable-lights function)
;; (define-extern *editable-sample-region* object) ;; editable-region
;; (define-extern *editable-light-region* object) ;; editable-region
;; (define-extern *editable-entity-region* object) ;; editable-region

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editable-player                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern cleanup-selection function) ;; (function editable-array none)
;; (define-extern insert-box function) ;; (function editable-array vector none)
;; (define-extern insert-wall function)
;; (define-extern update-manipulator-position function)
;; (define-extern execute-select function) ;; (function editable-array editable-command mouse-info symbol)
;; (define-extern execute-mouse-move function) ;; (function editable-array editable-command mouse-info symbol)
;; (define-extern execute-move function) ;; (function editable-array editable-command mouse-info symbol)
;; (define-extern get-light-value function)
;; (define-extern set-light-value function)
;; (define-extern keybd-set-time-of-day! function)
;; (define-extern editable-player-init function) ;; (function symbol none :behavior editable-player)
;; (define-extern set-editable-name function)
;; (define-extern select-editable-by-name function)
;; (define-extern *editable-menu-context* object) ;; debug-menu-context
;; (define-extern editable-menu-command function) ;; (function int none)
;; (define-extern editable-menu-command-no-close function) ;; (function int none)
;; (define-extern dm-region-tree-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-editable-flag-pick-func function) ;; (function editable-flag debug-menu-msg symbol)
;; (define-extern dm-editable-filter0-pick-func function) ;; (function editable-filter debug-menu-msg symbol)
;; (define-extern dm-editable-filter1-pick-func function) ;; (function editable-filter debug-menu-msg symbol)
;; (define-extern dm-editable-light-float-func function) ;; (function int debug-menu-msg float float float)
;; (define-extern dm-cam-externalize2 function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-editable-boolean-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern editable-menu-context-make-menus function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern insert-sample-camera function) ;; (function symbol none)
;; (define-extern *debug-hook* object) ;; pair

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mysql-nav-graph                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mysql-nav-node (structure)
  ((mysql-save-flag  mysql-save-flag                       :offset-assert 0) ;; guessed by decompiler
   (runtime-id       uint32                                :offset-assert 4)
   (temp-edge-list   (inline-array mysql-nav-edge)         :offset-assert 8) ;; guessed by decompiler
   (level-node-index int32                                 :offset-assert 12)
   (cam-dist         float                                 :offset-assert 16)
   (visible          symbol                                :offset-assert 20) ;; guessed by decompiler
   (nav_node_id      uint32                                :offset-assert 24)
   (nav_graph_id     uint32                                :offset-assert 28)
   (position         vector                        :inline :offset-assert 32)
   (level_name       symbol                                :offset-assert 48) ;; guessed by decompiler
   (angle            float                                 :offset-assert 52)
   (radius           float                                 :offset-assert 56)
   (nav_node_flag    nav-node-flag                         :offset-assert 60) ;; guessed by decompiler
   (nav_mesh_id      uint32                                :offset-assert 64)
   (data_int_0       uint32                                :offset-assert 68)
   (data_int_1       uint32                                :offset-assert 72)
   )
  :method-count-assert 11
  :size-assert         #x4c
  :flag-assert         #xb0000004c
  (:methods
    (mysql-nav-node-method-9 () none) ;; 9 ;; (exec-sql! (_type_) symbol)
    (mysql-nav-node-method-10 () none) ;; 10 ;; (temp-edge-size (_type_) int)
    )
  )
|#

#|
(deftype mysql-nav-node-array (inline-array-class)
  ((data mysql-nav-node :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype mysql-nav-edge (structure)
  ((mysql-save-flag    mysql-save-flag     :offset-assert 0) ;; guessed by decompiler
   (runtime-id         uint32              :offset-assert 4)
   (runtime-node-id-1  int32               :offset-assert 8)
   (runtime-node-id-2  int32               :offset-assert 12)
   (temp-next-edge     mysql-nav-edge      :offset-assert 16)
   (nav_edge_id        uint32              :offset-assert 20)
   (nav_graph_id       uint32              :offset-assert 24)
   (nav_node_id_1      uint32              :offset-assert 28)
   (nav_node_id_2      uint32              :offset-assert 32)
   (directionality     nav-directionality  :offset-assert 36) ;; guessed by decompiler
   (speed_limit        float               :offset-assert 40)
   (density            float               :offset-assert 44)
   (traffic_edge_flag  int32               :offset-assert 48)
   (nav_clock_mask     nav-clock-mask      :offset-assert 52) ;; guessed by decompiler
   (nav_clock_type     nav-clock-type      :offset-assert 56) ;; guessed by decompiler
   (nav_territory_type uint32              :offset-assert 60)
   (exclusive_data     uint32              :offset-assert 64)
   (width              float               :offset-assert 68)
   (minimap_edge_flag  int32               :offset-assert 72) ;; nav-minimap-edge-flag
   )
  :method-count-assert 10
  :size-assert         #x4c
  :flag-assert         #xa0000004c
  (:methods
    (mysql-nav-edge-method-9 () none) ;; 9 ;; (exec-sql! (_type_) symbol)
    )
  )
|#

#|
(deftype mysql-nav-edge-array (inline-array-class)
  ((data mysql-nav-edge :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype mysql-nav-visnode (structure)
  ((mysql-save-flag mysql-save-flag  :offset-assert 0) ;; guessed by decompiler
   (runtime-node-id int32            :offset-assert 4)
   (runtime-edge-id int32            :offset-assert 8)
   (nav_visnode_id  uint32           :offset-assert 12)
   (nav_graph_id    uint32           :offset-assert 16)
   (nav_node_id     uint32           :offset-assert 20)
   (nav_edge_id     uint32           :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x1c
  :flag-assert         #xa0000001c
  (:methods
    (mysql-nav-visnode-method-9 () none) ;; 9 ;; (exec-sql! (_type_) symbol)
    )
  )
|#

#|
(deftype mysql-nav-visnode-array (inline-array-class)
  ((data mysql-nav-visnode :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype mysql-nav-pov-conn (structure)
  ((runtime-node-id-1 int32  :offset-assert 0)
   (runtime-node-id-2 int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype mysql-nav-graph-level-info (structure)
  ((level         symbol  :offset-assert 0) ;; guessed by decompiler
   (level-id      uint32  :offset-assert 4)
   (node-count    int32   :offset-assert 8)
   (branch-count  int32   :offset-assert 12)
   (to-link-count int32   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype mysql-nav-graph (basic)
  ((nav_graph_id            uint32                        :offset-assert 4)
   (graph-type              basic                         :offset-assert 8)
   (node-array              mysql-nav-node-array          :offset-assert 12) ;; guessed by decompiler
   (edge-array              mysql-nav-edge-array          :offset-assert 16) ;; guessed by decompiler
   (visnode-array           mysql-nav-visnode-array       :offset-assert 20) ;; guessed by decompiler
   (pov-conn-array          uint32                        :offset-assert 24)
   (pov-conn-array-length   int32                         :offset-assert 28)
   (level-info-array-length int32                         :offset-assert 32)
   (level-info-last-lookup  int32                         :offset-assert 36)
   (level-info-array        mysql-nav-graph-level-info 32 :offset-assert 40) ;; guessed by decompiler
   )
  :method-count-assert 24
  :size-assert         #x428
  :flag-assert         #x1800000428
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type string) _type_)
    (mysql-nav-graph-method-9 () none) ;; 9 ;; (init-from-sql! (_type_ string string) symbol)
    (mysql-nav-graph-method-10 () none) ;; 10 ;; (exec-sql! (_type_) symbol)
    (mysql-nav-graph-method-11 () none) ;; 11 ;; (indexof-nav-node (_type_ int) int)
    (mysql-nav-graph-method-12 () none) ;; 12 ;; (indexof-nav-edge (_type_ int) int)
    (mysql-nav-graph-method-13 () none) ;; 13 ;; (alloc-new-node! (_type_) int)
    (mysql-nav-graph-method-14 () none) ;; 14 ;; (alloc-new-edge! (_type_) int)
    (mysql-nav-graph-method-15 () none) ;; 15 ;; (indexof-visnode (_type_ int int) int)
    (mysql-nav-graph-method-16 () none) ;; 16 ;; (alloc-new-visnode! (_type_ int int) int)
    (mysql-nav-graph-method-17 () none) ;; 17 ;; (mysql-nav-graph-method-17 (_type_) none)
    (mysql-nav-graph-method-18 () none) ;; 18 ;; (lookup-level-info2 (_type_ mysql-nav-node symbol) mysql-nav-graph-level-info)
    (mysql-nav-graph-method-19 () none) ;; 19 ;; (mysql-nav-graph-method-19 (_type_) none)
    (mysql-nav-graph-method-20 () none) ;; 20 ;; (mysql-nav-graph-method-20 (_type_) none)
    (mysql-nav-graph-method-21 () none) ;; 21
    (mysql-nav-graph-method-22 () none) ;; 22
    (mysql-nav-graph-method-23 () none) ;; 23
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph-editor               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-graph-command (structure)
  ((com-type uint32         :offset-assert 0)
   (id       int32          :offset-assert 4)
   (index    int32          :offset-assert 8)
   (move-vec vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype nav-graph-command-array (inline-array-class)
  ((data nav-graph-command :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-graph-editor (process)
  ((nav-graph           mysql-nav-graph                 :offset-assert 128) ;; guessed by decompiler
   (mode                symbol                          :offset-assert 132) ;; guessed by decompiler
   (command-id          int32                           :offset-assert 136)
   (max-command         int32                           :offset-assert 140)
   (selected-index      int32                           :offset-assert 144)
   (selected-dist       float                           :offset-assert 148)
   (selected-node-edge? symbol                          :offset-assert 152) ;; guessed by decompiler
   (closest-node        int32                           :offset-assert 156)
   (dist-closest-node   float                           :offset-assert 160)
   (closest-edge        int32                           :offset-assert 164)
   (dist-closest-edge   float                           :offset-assert 168)
   (mouse-pos           vector                  :inline :offset-assert 176)
   (mouse-hit           vector                  :inline :offset-assert 192)
   (mouse-hit-pick      vector                  :inline :offset-assert 208)
   (mouse-normal        vector                  :inline :offset-assert 224)
   (mouse-spos-hold     vector                  :inline :offset-assert 240)
   (edge-src            int32                           :offset-assert 256)
   (edge-dst            int32                           :offset-assert 260)
   (edge-visibility     int32                           :offset-assert 264)
   (vehicle-edit-mode   symbol                          :offset-assert 268) ;; guessed by decompiler
   (hover-edit-mode     symbol                          :offset-assert 272) ;; guessed by decompiler
   (plane-height        float                           :offset-assert 276)
   (plane-height-hold   float                           :offset-assert 280)
   (minimap-make-mode   uint8                           :offset-assert 284)
   (clipping-dist       float                           :offset-assert 288)
   (default-node        mysql-nav-node          :inline :offset-assert 304)
   (default-edge        mysql-nav-edge          :inline :offset-assert 380)
   (command-array       nav-graph-command-array         :offset-assert 456) ;; guessed by decompiler
   )
  :method-count-assert 68
  :size-assert         #x1cc
  :flag-assert         #x44015001cc
  (:methods
    (nav-graph-editor-method-29 () none) ;; 29 ;; (nav-graph-editor-method-29 (_type_ string string string) none)
    (nav-graph-editor-method-30 () none) ;; 30 ;; (nav-graph-editor-method-30 (_type_ int) symbol)
    (nav-graph-editor-method-31 () none) ;; 31 ;; (nav-graph-editor-method-31 (_type_ int) symbol)
    (nav-graph-editor-method-32 () none) ;; 32 ;; (nav-graph-editor-method-32 (_type_ symbol int) none)
    (nav-graph-editor-method-33 () none) ;; 33 ;; (nav-graph-editor-method-33 (_type_ int) none)
    (nav-graph-editor-method-34 () none) ;; 34 ;; (nav-graph-editor-method-34 (_type_) object)
    (nav-graph-editor-method-35 () none) ;; 35 ;; (nav-graph-editor-method-35 (_type_) none)
    (nav-graph-editor-method-36 () none) ;; 36 ;; (nav-graph-editor-method-36 (_type_) none)
    (nav-graph-editor-method-37 () none) ;; 37 ;; (nav-graph-editor-method-37 (_type_) none)
    (nav-graph-editor-method-38 () none) ;; 38 ;; (nav-graph-editor-method-38 (_type_) none)
    (nav-graph-editor-method-39 () none) ;; 39 ;; (nav-graph-editor-method-39 (_type_) none)
    (nav-graph-editor-method-40 () none) ;; 40 ;; (nav-graph-editor-method-40 (_type_) none)
    (nav-graph-editor-method-41 () none) ;; 41 ;; (nav-graph-editor-method-41 (_type_) none)
    (nav-graph-editor-method-42 () none) ;; 42 ;; (nav-graph-editor-method-42 (_type_) symbol)
    (nav-graph-editor-method-43 () none) ;; 43 ;; (nav-graph-editor-method-43 (_type_) none)
    (nav-graph-editor-method-44 () none) ;; 44 ;; (nav-graph-editor-method-44 (_type_) symbol)
    (nav-graph-editor-method-45 () none) ;; 45 ;; (nav-graph-editor-method-45 (_type_) none)
    (nav-graph-editor-method-46 () none) ;; 46 ;; (nav-graph-editor-method-46 (_type_) pad-buttons)
    (nav-graph-editor-method-47 () none) ;; 47 ;; (nav-graph-editor-method-47 (_type_) none)
    (nav-graph-editor-method-48 () none) ;; 48 ;; (nav-graph-editor-method-48 (_type_ uint) nav-graph-command)
    (nav-graph-editor-method-49 () none) ;; 49 ;; (nav-graph-editor-method-49 (_type_) nav-graph-command)
    (nav-graph-editor-method-50 () none) ;; 50 ;; (nav-graph-editor-method-50 (_type_) none)
    (nav-graph-editor-method-51 () none) ;; 51 ;; (nav-graph-editor-method-51 (_type_) none)
    (nav-graph-editor-method-52 () none) ;; 52 ;; (nav-graph-editor-method-52 (_type_) uint)
    (nav-graph-editor-method-53 () none) ;; 53 ;; (nav-graph-editor-method-53 (_type_ int int) none)
    (nav-graph-editor-method-54 () none) ;; 54 ;; (nav-graph-editor-method-54 (_type_ int) none)
    (nav-graph-editor-method-55 () none) ;; 55 ;; (nav-graph-editor-method-55 (_type_ int) none)
    (nav-graph-editor-method-56 () none) ;; 56 ;; (nav-graph-editor-method-56 (_type_ int) none)
    (nav-graph-editor-method-57 () none) ;; 57 ;; (nav-graph-editor-method-57 (_type_ int int) int)
    (nav-graph-editor-method-58 () none) ;; 58 ;; (nav-graph-editor-method-58 (_type_) symbol)
    (nav-graph-editor-method-59 () none) ;; 59 ;; (nav-graph-editor-method-59 (_type_) pad-buttons)
    (nav-graph-editor-method-60 () none) ;; 60 ;; (nav-graph-editor-method-60 (_type_) none)
    (nav-graph-editor-method-61 () none) ;; 61 ;; (nav-graph-editor-method-61 (_type_) none)
    (nav-graph-editor-method-62 () none) ;; 62 ;; (nav-graph-editor-method-62 (_type_ symbol symbol) none)
    (nav-graph-editor-method-63 () none) ;; 63 ;; (nav-graph-editor-method-63 (_type_) none)
    (nav-graph-editor-method-64 () none) ;; 64
    (nav-graph-editor-method-65 () none) ;; 65
    (nav-graph-editor-method-66 () none) ;; 66
    (nav-graph-editor-method-67 () none) ;; 67
    )
  (:state-methods
    create-pov ;; 28, old: (nav-graph-editor-method-28 (_type_) none)
    create ;; 16, old: (create () _type_ :state)
    move-node ;; 14, old: (move-node () _type_ :state)
    draw-closest-minimap ;; 27, old: (draw-closest-minimap () _type_ :state)
    adjust-plane ;; 19, old: (adjust-plane () _type_ :state)
    move-plane ;; 15, old: (move-plane () _type_ :state)
    create-edge ;; 18, old: (create-edge () _type_ :state)
    edit-edge ;; 17, old: (edit-edge () _type_ :state)
    adjust-edge-visibility ;; 24, old: (adjust-edge-visibility () _type_ :state)
    adjust-node-angle ;; 22, old: (adjust-node-angle () _type_ :state)
    adjust-node-radius ;; 23, old: (adjust-node-radius () _type_ :state)
    adjust-edge-width ;; 25, old: (adjust-edge-width () _type_ :state)
    adjust-edge-density ;; 26, old: (adjust-edge-density () _type_ :state)
    adjust-it ;; 20, old: (adjust-it () _type_ :state)
    adjust-minimap ;; 21, old: (adjust-minimap () _type_ :state)
    )
  )
|#

;; (define-extern *nav-graph-editor* object) ;; (pointer nav-graph-editor)
;; (define-extern get-node-draw-position function)
;; (define-extern nav-graph-editor-init-by-other function) ;; (function string none :behavior nav-graph-editor)
;; (define-extern run-nav-graph-editor function) ;; (function symbol (pointer process))
;; (define-extern get-nav-graph-editor function) ;; (function nav-graph-editor)
;; (define-extern exit-nav-graph-editor function) ;; (function none)
;; (define-extern nav-graph-set-level function)
;; (define-extern set-minimap-edge-flag function) ;; (function nav-minimap-edge-flag uint)
;; (define-extern set-vehicle-edit-mode function) ;; (function symbol none)
;; (define-extern translate-nav-graph function) ;; (function float float float symbol)
;; (define-extern update-nav-meshes function) ;; (function symbol)
;; (define-extern delete-node-nav-mesh function)
;; (define-extern smooth-nav-graph function) ;; (function string symbol)
;; (define-extern update-height function) ;; (function string symbol)
;; (define-extern update-width function) ;; (function string symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh-editor-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; vector-array is already defined!

#|
(deftype int16-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-mesh-poly (structure)
  ((poly-id    uint32  :offset-assert 0)
   (flags      uint32  :offset-assert 4)
   (index      basic   :offset-assert 8)
   (insert-pos uint32  :offset-assert 12)
   )
  :method-count-assert 15
  :size-assert         #x10
  :flag-assert         #xf00000010
  (:methods
    (nav-mesh-poly-method-9 () none) ;; 9
    (nav-mesh-poly-method-10 () none) ;; 10
    (nav-mesh-poly-method-11 () none) ;; 11
    (nav-mesh-poly-method-12 () none) ;; 12
    (nav-mesh-poly-method-13 () none) ;; 13
    (nav-mesh-poly-method-14 () none) ;; 14
    )
  )
|#

#|
(deftype nav-mesh-poly-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-mesh-tri-quad (structure)
  ((indices UNKNOWN 4 :offset-assert 0)
   (poly    uint32    :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype nav-mesh-tri-quad-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-mesh-editable (structure)
  ((flags         uint32  :offset-assert 0)
   (verts         basic   :offset-assert 4)
   (tris          basic   :offset-assert 8)
   (quads         basic   :offset-assert 12)
   (navmesh-id    uint32  :offset-assert 16)
   (idx           uint32  :offset-assert 20)
   (level-name    basic   :offset-assert 24)
   (level-id      uint32  :offset-assert 28)
   (polys         basic   :offset-assert 32)
   (selected-poly uint32  :offset-assert 36)
   )
  :method-count-assert 19
  :size-assert         #x28
  :flag-assert         #x1300000028
  (:methods
    (nav-mesh-editable-method-9 () none) ;; 9
    (nav-mesh-editable-method-10 () none) ;; 10
    (nav-mesh-editable-method-11 () none) ;; 11
    (nav-mesh-editable-method-12 () none) ;; 12
    (nav-mesh-editable-method-13 () none) ;; 13
    (nav-mesh-editable-method-14 () none) ;; 14
    (nav-mesh-editable-method-15 () none) ;; 15
    (nav-mesh-editable-method-16 () none) ;; 16
    (nav-mesh-editable-method-17 () none) ;; 17
    (nav-mesh-editable-method-18 () none) ;; 18
    )
  )
|#

#|
(deftype nav-mesh-editable-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-mesh-editor-undo (structure)
  ((current-nav-mesh nav-mesh-editable  :offset-assert 0)
   (selected-poly    uint32             :offset-assert 4)
   (index            basic              :offset-assert 8)
   (insert-pos       uint32             :offset-assert 12)
   (verts            basic              :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x14
  :flag-assert         #xa00000014
  (:methods
    (nav-mesh-editor-undo-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype nav-mesh-editor-undo-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-mesh-editor (process-drawable)
  ((close-menu-time      uint64                    :offset-assert 200)
   (external-cam-mode    basic                     :offset-assert 208)
   (mouse-pressed        uint64                    :offset-assert 216)
   (mouse-screen-pos     vector            :inline :offset-assert 224)
   (mouse-pos            vector            :inline :offset-assert 240)
   (mouse-end            vector            :inline :offset-assert 256)
   (mouse-hit            vector            :inline :offset-assert 272)
   (mouse-hit-pick       vector            :inline :offset-assert 288)
   (mouse-snap           vector            :inline :offset-assert 304)
   (mouse-normal         vector            :inline :offset-assert 320)
   (mouse-collide        basic                     :offset-assert 336)
   (mouse-tumble-dist    float                     :offset-assert 340)
   (mouse-tumble         vector            :inline :offset-assert 352)
   (manipulator-pos      vector            :inline :offset-assert 368)
   (manipulator-back-pos vector            :inline :offset-assert 384)
   (lock-action          basic                     :offset-assert 400)
   (mouse-action         uint32                    :offset-assert 404)
   (mouse-action-pos-ref vector            :inline :offset-assert 416)
   (nav-meshes           basic                     :offset-assert 432)
   (current-nav-mesh     nav-mesh-editable         :offset-assert 436)
   (manipulator          manipulator       :inline :offset-assert 448)
   (level-name           basic                     :offset-assert 624)
   (level-id             uint32                    :offset-assert 628)
   (undo-min             uint32                    :offset-assert 632)
   (undo-id              uint32                    :offset-assert 636)
   (undo-max             uint32                    :offset-assert 640)
   (undos                basic                     :offset-assert 644)
   (hide-unselected      basic                     :offset-assert 648)
   (allow-snap           basic                     :offset-assert 652)
   )
  :method-count-assert 28
  :size-assert         #x290
  :flag-assert         #x1c02100290
  (:methods
    (nav-mesh-editor-method-20 () none) ;; 20
    (nav-mesh-editor-method-21 () none) ;; 21
    (nav-mesh-editor-method-22 () none) ;; 22
    (nav-mesh-editor-method-23 () none) ;; 23
    (nav-mesh-editor-method-24 () none) ;; 24
    (nav-mesh-editor-method-25 () none) ;; 25
    (nav-mesh-editor-method-26 () none) ;; 26
    (nav-mesh-editor-method-27 () none) ;; 27
    )
  )
|#

;; (define-extern *nav-mesh-editor* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-mesh-editor                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype triangulation-vert (structure)
  ((index uint32  :offset-assert 0)
   (ear?  basic   :offset-assert 4)
   (score float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern snap-level-navmesh function)
;; (define-extern mouse-intersect-triangle function)
;; (define-extern *clean-vertex-array* object)
;; (define-extern *clean-index-array* object)
;; (define-extern poly-flag-to-string function)
;; (define-extern point-in-cone function)
;; (define-extern segment-in-cone function)
;; (define-extern point-in-triangle function)
;; (define-extern segments-intersect function)
;; (define-extern is-diagonal function)
;; (define-extern *verts-buf-1* object)
;; (define-extern *verts-buf-2* object)
;; (define-extern draw-square-point function)
;; (define-extern get-level-id function)
;; (define-extern nav-mesh-editor-new function)
;; (define-extern nav-delete function)
;; (define-extern nav-mesh-editor-translate function)
;; (define-extern nav-mesh-editor-rotate-y function)
;; (define-extern nav-mesh-editor-load function)
;; (define-extern nav-mesh-editor-set-level function)
;; (define-extern nav-set-lev function)
;; (define-extern nav-set-flag function)
;; (define-extern nav-mesh-editor-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bug-report                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bug-report (process)
  ((bug-number UNKNOWN 5 :offset-assert 128)
   (digit      uint32    :offset-assert 148)
   (state-time uint64    :offset-assert 152)
   (next-down  uint64    :offset-assert 160)
   )
  :method-count-assert 17
  :size-assert         #xa8
  :flag-assert         #x11003000a8
  (:methods
    (bug-report-method-15 () none) ;; 15
    (bug-report-method-16 () none) ;; 16
    )
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern *continue-bug-report* continue-point)
;; (define-extern *bug-report* object)
;; (define-extern bug-report-init function)
;; (define-extern bug-report-stop function)
;; (define-extern bug-report-start function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sampler                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sampler-mem* object) ;; pointer
;; (define-extern *sampler-compare* object) ;; uint
;; (define-extern *sampler-count* object) ;; int
;; (define-extern timer0-handler function) ;; (function none)
;; (define-extern sampler-start function) ;; (function none)
;; (define-extern sampler-stop function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; default-menu                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *debug-menu-context* object) ;; debug-menu-context
;; (define-extern *dm-cam-mode-interpolation* object) ;; int
;; (define-extern dm-cam-mode-func function) ;; (function (state camera-slave) debug-menu-msg object)
;; (define-extern dm-cam-mode-default function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-cam-settings-default function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-cam-settings-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-cam-settings-func-int function) ;; (function int debug-menu-msg int int int)
;; (define-extern dm-cam-externalize function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-cam-setting-float function) ;; (function float debug-menu-msg float float float)
;; (define-extern dm-cam-render-float function) ;; (function int debug-menu-msg float float float)
;; (define-extern dm-subdiv-float function) ;; (function symbol debug-menu-msg float float float)
;; (define-extern dm-subdiv-int function) ;; (function symbol debug-menu-msg int int int)
;; (define-extern dm-select-race-path function) ;; (function object debug-menu-msg int int)
;; (define-extern dm-setting-language function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-setting-subtitle-language function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-setting-audio-language function)
;; (define-extern dm-setting-stereo-mode function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-current-continue function) ;; (function string debug-menu-msg symbol)
;; (define-extern dm-subdiv-draw-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-scissor-subdiv-draw-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-foreground-subdiv-draw-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-col-rend-on-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-col-rend-outline-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-col-rend-back-face-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-col-rend-normals-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-col-rend-ghost-hidden-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-col-rend-track-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-col-rend-show-only-toggle-func function) ;; (function uint debug-menu-msg symbol)
;; (define-extern dm-col-rend-show-only-set-func function) ;; (function uint debug-menu-msg symbol)
;; (define-extern dm-col-rend-cspec-toggle function) ;; (function uint debug-menu-msg symbol)
;; (define-extern dm-col-rend-size function) ;; (function object debug-menu-msg float float)
;; (define-extern dm-col-rend-cam-dist function) ;; (function object debug-menu-msg float float)
;; (define-extern dm-ocean-height-func function) ;; (function ocean-height-hack debug-menu-msg symbol)
;; (define-extern dm-ocean-subdiv-draw-func function) ;; (function object debug-menu-msg symbol)
;; (define-extern dm-time-of-day-func function) ;; (function dm-time-of-day-setting debug-menu-msg symbol)
;; (define-extern dm-time-of-day-func2 function) ;; (function symbol debug-menu-msg object)
;; (define-extern dm-time-of-day-palette-func function) ;; (function dm-time-of-day-palette-settings debug-menu-msg symbol)
;; (define-extern dm-boolean-toggle-pick-func function) ;; (function symbol debug-menu-msg object)
;; (define-extern dm-time-of-day-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-stats-memory-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-actor-marks-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-debug-actor-lod-dist function)
;; (define-extern dm-select-race-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-compact-actor-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-actor-vis-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-game-mode-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-game-feature-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-game-vehicle-toggle-pick-func function)
;; (define-extern dm-game-secret-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern display-scene-control-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern display-scene-control-set-pick-func function) ;; (function scene-controls debug-menu-msg symbol)
;; (define-extern display-bot-marks-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern display-bot-marks-set-pick-func function) ;; (function bot-marks-controls debug-menu-msg symbol)
;; (define-extern display-race-marks-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern display-race-marks-set-pick-func function) ;; (function race-marks-controls debug-menu-msg symbol)
;; (define-extern dm-vu1-user-toggle-pick-func function) ;; (function vu1-renderer-mask debug-menu-msg symbol)
;; (define-extern dm-vu1-user-all-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-vu1-user-none-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-texture-user-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-texture-user-set-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-strip-lines-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-strip-lines-set-pick-func function) ;; (function strip-lines-controls debug-menu-msg symbol)
;; (define-extern dm-edit-instance-toggle-pick-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern all-texture-tweak-adjust function) ;; (function texture-page-dir float none)
;; (define-extern dm-float-field-tie-rvanish-func function) ;; (function symbol debug-menu-msg float float float)
;; (define-extern dm-float-field-tie-vanish-far-func function) ;; (function symbol debug-menu-msg float float float)
;; (define-extern dm-bug-report-output-pick-func function) ;; (function symbol debug-menu-msg symbol)
;; (define-extern dm-bug-report-report-pick-func function) ;; (function symbol debug-menu-msg none)
;; (define-extern debug-menu-node<? function) ;; (function debug-menu-node debug-menu-node symbol)
;; (define-extern dm-shader-pick-func function) ;; (function texture-id debug-menu-msg symbol)
;; (define-extern *shader-pick-menu* object) ;; debug-menu
;; (define-extern build-shader-list function) ;; (function none)
;; (define-extern dm-instance-pick-func function) ;; (function string debug-menu-msg basic)
;; (define-extern dm-enable-instance-func function) ;; (function string debug-menu-msg symbol)
;; (define-extern *instance-shrub-menu* object) ;; debug-menu
;; (define-extern *instance-tie-menu* object) ;; debug-menu
;; (define-extern *enable-instance-shrub-menu* object) ;; debug-menu
;; (define-extern *enable-instance-tie-menu* object) ;; debug-menu
;; (define-extern build-instance-list function) ;; (function object none)
;; (define-extern dm-scene-load-pick-func function) ;; (function pair debug-menu-msg symbol)
;; (define-extern debug-create-cam-restore function) ;; (function none)
;; (define-extern debug-menu-make-camera-mode-menu function) ;; (function debug-menu debug-menu debug-menu-node)
;; (define-extern debug-menu-make-camera-menu function) ;; (function debug-menu-context debug-menu-item-submenu)
;; (define-extern debug-menu-make-shader-menu function) ;; (function debug-menu-context debug-menu-item-submenu)
;; (define-extern debug-menu-make-instance-menu function) ;; (function debug-menu-context debug-menu-item-submenu)
;; (define-extern dm-task-menu-pick-func function) ;; (function game-task debug-menu-msg symbol)
;; (define-extern debug-menu-make-continue-sub-menu function) ;; (function game-info symbol pair)
;; (define-extern debug-menu-make-task-sub-menu function) ;; (function symbol pair)
;; (define-extern debug-menu-make-task-menu function) ;; (function debug-menu-context debug-menu-item-submenu)
;; (define-extern dm-play-task-with-continue function) ;; (function game-task string none)
;; (define-extern dm-play-task function) ;; (function game-task none)
;; (define-extern dm-play-race function) ;; (function race-selection symbol none)
;; (define-extern debug-menu-make-play-menu function) ;; (function debug-menu-context debug-menu-node)
;; (define-extern dm-anim-tester-flag-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-anim-tester-func function) ;; (function int debug-menu-msg symbol)
;; (define-extern dm-pilot-mode function) ;; (function object none)
;; (define-extern stop-watch-display function) ;; (function object object symbol)
;; (define-extern debug-menu-context-make-default-menus function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern *popup-menu-context* object) ;; debug-menu-context
;; (define-extern popup-menu-context-make-default-menus function) ;; (function debug-menu-context debug-menu-context)
;; (define-extern menu-respond-to-pause function) ;; (function symbol)
;; (define-extern *menu-hook* function) ;; (function debug-menu-context)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; visvol-edit                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype visvol-edit-info (structure)
  ((editing      basic   :offset-assert 0)
   (current-func uint64  :offset-assert 8)
   (analog-func  uint64  :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (visvol-edit-info-method-9 () none) ;; 9
    (visvol-edit-info-method-10 () none) ;; 10
    (visvol-edit-info-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype visvol-editor (process)
  ((proc uint64  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x88
  :flag-assert         #xf00100088
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern *visvol-edit-info* object)
;; (define-extern visvol-editor-init-by-other function)
;; (define-extern stop-visvol-edit function)
;; (define-extern visvol-edit function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; collision-editor               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype collision-editor-default-proc (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype collision-editor-edited-proc (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype collision-editor (process)
  ((proc uint64  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x88
  :flag-assert         #xf00100088
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype collision-edit-info (structure)
  ((editing      basic   :offset-assert 0)
   (current-func uint64  :offset-assert 8)
   (analog-func  uint64  :offset-assert 16)
   (current-prim int32   :offset-assert 24)
   )
  :method-count-assert 12
  :size-assert         #x1c
  :flag-assert         #xc0000001c
  (:methods
    (collision-edit-info-method-9 () none) ;; 9
    (collision-edit-info-method-10 () none) ;; 10
    (collision-edit-info-method-11 () none) ;; 11
    )
  )
|#

;; (define-extern collision-editor-default-proc-init-by-other function)
;; (define-extern collision-editor-edited-proc-init-by-other function)
;; (define-extern *collision-editor-mesh-names* array)
;; (define-extern *collision-editor-art-group-name* string)
;; (define-extern collision-editor-add-mesh-to-ccache function)
;; (define-extern print-default-collision function)
;; (define-extern print-actual-collision function)
;; (define-extern collision-edit-get-max-prim function)
;; (define-extern collision-edit-get-prim function)
;; (define-extern *collision-edit-info* object)
;; (define-extern collision-editor-init-by-other function)
;; (define-extern stop-collision-edit function)
;; (define-extern collision-edit function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; speech-manager                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype speech-instance (structure)
  ((speech         uint16  :offset-assert 0)
   (num-play-times int8    :offset-assert 2)
   (probability    float   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype speech-info (structure)
  ((speeches  basic   :offset-assert 0)
   (flags     uint64  :offset-assert 8)
   (play-time uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern mark-speech-played function)
;; (define-extern speech-play function)
;; (define-extern speeches-reset function)
;; (define-extern speeches-debug-reset function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-upload                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *generic-envmap-texture* object) ;; texture
;; (define-extern *default-envmap-shader* object) ;; adgif-shader

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; texture-finish                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; los-control-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype los-control (structure)
  ((src-proc            uint64                     :offset-assert 0) ;; handle
   (dst-proc            uint64                     :offset-assert 8) ;; handle
   (last-lost-los       uint64                     :offset-assert 16)
   (last-gained-los     uint64                     :offset-assert 24)
   (check-interval      uint64                     :offset-assert 32) ;; time-frame
   (max-check-distance  float                      :offset-assert 40)
   (last-check-time     uint64                     :offset-assert 48) ;; time-frame
   (last-collide-result collide-tri-result :inline :offset-assert 64)
   (collide-with        collide-spec               :offset-assert 160) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #xa4
  :flag-assert         #xe000000a4
  (:methods
    (los-control-method-9 () none) ;; 9 ;; (los-control-method-9 (_type_ process-focusable vector float) none)
    (los-control-method-10 () none) ;; 10 ;; (check-los? (_type_ time-frame) symbol)
    (los-control-method-11 () none) ;; 11 ;; (skip-check-los? (_type_ int) symbol)
    (los-control-method-12 () none) ;; 12 ;; (set-dst-proc! (_type_ handle) none)
    (los-control-method-13 () none) ;; 13 ;; (new-source! (_type_ process time-frame collide-spec) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; airlock                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype com-airlock (process-drawable)
  ((level-name             pair         :offset-assert 196) ;; guessed by decompiler
   (open-test              pair         :offset-assert 200) ;; guessed by decompiler
   (on-running             basic        :offset-assert 204)
   (were-behind?           symbol       :offset-assert 208) ;; guessed by decompiler
   (inner?                 symbol       :offset-assert 212) ;; guessed by decompiler
   (sound-behind?          symbol       :offset-assert 216) ;; guessed by decompiler
   (visible-move?          symbol       :offset-assert 220) ;; guessed by decompiler
   (saw-pilot?             uint64       :offset-assert 228) ;; handle
   (last-distance          meters       :offset-assert 236)
   (y-height               vector       :offset-assert 240) ;; guessed by decompiler
   (pre-open-speed         float        :offset-assert 244)
   (open?                  basic        :offset-assert 248)
   (latch-closed-time      uint64       :offset-assert 252) ;; time-frame
   (latch-open-time        uint64       :offset-assert 260) ;; time-frame
   (gear                   joint-mod    :offset-assert 268) ;; guessed by decompiler
   (gear-rot               deg          :offset-assert 272) ;; degrees
   (gear-rotv              deg          :offset-assert 276) ;; degrees
   (gear-start-frame       float        :offset-assert 280)
   (gear-stop-frame        float        :offset-assert 284)
   (gear-play-time         uint64       :offset-assert 292)
   (open-frame             float        :offset-assert 300)
   (pre-open-frame         float        :offset-assert 304)
   (lock-frame             float        :offset-assert 308)
   (close-speed-multiplier float        :offset-assert 312)
   (open-distance          meters     2 :offset-assert 316) ;; guessed by decompiler
   (UNKNOWN                UNKNOWN      :offset-assert -1) ;; field could not be read.
   (active-distance        meters     2 :offset-assert 324) ;; guessed by decompiler
   (UNKNOWN                UNKNOWN      :offset-assert -1) ;; field could not be read.
   (sound-id               sound-id     :offset-assert 332) ;; guessed by decompiler
   (gear-sound-id          sound-id     :offset-assert 336) ;; guessed by decompiler
   (sound-gear             sound-spec   :offset-assert 340) ;; guessed by decompiler
   (sound-pre-open         sound-spec   :offset-assert 344) ;; guessed by decompiler
   (sound-pre-open-stop    sound-spec   :offset-assert 348) ;; guessed by decompiler
   (sound-lock-loop        sound-spec   :offset-assert 352) ;; guessed by decompiler
   (sound-lock-stop        sound-spec   :offset-assert 356) ;; guessed by decompiler
   (sound-open             sound-spec   :offset-assert 360) ;; guessed by decompiler
   (sound-open-loop        sound-spec   :offset-assert 364) ;; guessed by decompiler
   (sound-open-stop        sound-spec   :offset-assert 368) ;; guessed by decompiler
   (sound-close            sound-spec   :offset-assert 372) ;; guessed by decompiler
   (sound-close-loop       sound-spec   :offset-assert 376) ;; guessed by decompiler
   (sound-close-stop       sound-spec   :offset-assert 380) ;; guessed by decompiler
   (sound-post-close       sound-spec   :offset-assert 384) ;; guessed by decompiler
   (sound-post-close-stop  sound-spec   :offset-assert 388) ;; guessed by decompiler
   (spool-sound-time       uint64       :offset-assert 396) ;; time-frame
   (start-open-time        uint64       :offset-assert 404)
   (door-radius            meters       :offset-assert 412)
   (allow-pilot?           basic        :offset-assert 416)
   (allow-flut?            basic        :offset-assert 420)
   (blocking-plane?        basic        :offset-assert 424)
   )
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  ;; field level-name uses ~A with a signed load. field open-test uses ~A with a signed load. field on-running uses ~A with a signed load.
  (:methods
    (com-airlock-method-22 () none) ;; 22 ;; (init-airlock! (_type_) _type_)
    (com-airlock-method-23 () none) ;; 23 ;; (want-cross-airlock? (_type_) symbol)
    (com-airlock-method-24 () none) ;; 24 ;; (destination-loaded? (_type_ symbol) symbol)
    (com-airlock-method-25 () none) ;; 25 ;; (check-crossing-distance (_type_ vector symbol) float)
    (com-airlock-method-26 () none) ;; 26 ;; (rotate-gear! (_type_ float) degrees)
    (com-airlock-method-27 () none) ;; 27 ;; (play-city-voice-sound (_type_ symbol) none)
    (com-airlock-method-28 () none) ;; 28
    (com-airlock-method-29 () none) ;; 29
    )
  (:state-methods
    open ;; 20, old: (open (symbol) _type_ :state)
    close ;; 21, old: (close (symbol) _type_ :state)
    )
  )
|#

#|
(deftype com-airlock-outer (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype com-airlock-inner (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype cty-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype vin-door-ctyinda (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype com-airlock-outer-mhcity (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype hip-door-a (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

;; (define-extern airlock-stop-part-trackers function)
;; (define-extern airlock-command-lookup function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; water-anim                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim (process-drawable)
  ((water-height        meters        :offset-assert 200)
   (wade-height         meters        :offset-assert 204)
   (swim-height         meters        :offset-assert 208)
   (bottom-height       meters        :offset-assert 212)
   (attack-event        symbol        :offset-assert 216) ;; guessed by decompiler
   (attack-id           uint32        :offset-assert 220)
   (flow                flow-control  :offset-assert 224) ;; guessed by decompiler
   (target              uint64        :offset-assert 232) ;; handle
   (flags               water-flags   :offset-assert 240) ;; guessed by decompiler
   (look                int32         :offset-assert 244)
   (play-ambient-sound? symbol        :offset-assert 248) ;; guessed by decompiler
   (visible             symbol        :offset-assert 252) ;; guessed by decompiler
   )
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    (water-anim-method-20 () none) ;; 20 ;; (water-anim-state-20 () _type_ :state)
    (water-anim-method-22 () none) ;; 22 ;; (move-to-point! (_type_ vector) int)
    (water-anim-method-23 () none) ;; 23 ;; (get-ripple-height (_type_ vector) float)
    (water-anim-method-24 () none) ;; 24 ;; (init-water! (_type_) none)
    (water-anim-method-25 () none) ;; 25 ;; (reset-root! (_type_) trsqv)
    (water-anim-method-26 () none) ;; 26 ;; (water-anim-init! (_type_) none)
    (water-anim-method-27 () none) ;; 27 ;; (water-anim-method-27 (_type_) none)
    (water-anim-method-28 () none) ;; 28 ;; (offset! (_type_) none)
    )
  (:state-methods
    idle ;; 21, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype water-anim-look (structure)
  ((skel-group         string      :offset-assert 0) ;; guessed by decompiler
   (anim               int32       :offset-assert 4)
   (ambient-sound-spec sound-spec  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern *water-anim-look* array) ;; (array water-anim-look)
;; (define-extern water-anim-event-handler function) ;; (function process int symbol event-message-block object :behavior water-anim)
;; (define-extern water-anim-init-by-other function) ;; (function entity-actor none :behavior water-anim)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blocking-plane                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blocking-plane (process-drawable)
  ((current-attack-mode basic  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (blocking-plane-method-21 () none) ;; 21 ;; (init! (_type_ (inline-array vector) float) none)
    )
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern blocking-plane-init-by-other function) ;; (function (inline-array vector) float none :behavior blocking-plane)
;; (define-extern blocking-plane-spawn function) ;; (function curve-control (inline-array vector) float none :behavior process)
;; (define-extern blocking-plane-destroy function) ;; (function none :behavior blocking-plane)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; idle-control                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype idle-control-frame (structure)
  ((command uint8   :offset-assert 0)
   (anim    uint32  :offset-assert 4)
   (param0  int32   :offset-assert 8)
   (param1  int32   :offset-assert 12)
   (param2  basic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  ;; field param2 uses ~A with a signed load.
  )
|#

#|
(deftype idle-control (structure)
  ((anim          (pointer idle-control-frame)  :offset-assert 0) ;; guessed by decompiler
   (anim-speed    float                         :offset-assert 4)
   (current-index int32                         :offset-assert 8)
   (counter       int32                         :offset-assert 12)
   (target        int32                         :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x14
  :flag-assert         #xb00000014
  (:methods
    (idle-control-method-9 () none) ;; 9 ;; (idle-control-method-9 (_type_ (pointer idle-control-frame)) none)
    (idle-control-method-10 () none) ;; 10 ;; (idle-control-method-10 (_type_ process-drawable) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; proc-focusable-spawner         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype proc-focusable-spawn-record (structure)
  ((proc      uint64  :offset-assert 0)
   (index     int16   :offset-assert 8)
   (dead-time uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype proc-focusable-spawn-record-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype proc-focusable-spawner (basic)
  ((records     basic  :offset-assert 4)
   (unused-list basic  :offset-assert 8)
   )
  :method-count-assert 17
  :size-assert         #xc
  :flag-assert         #x110000000c
  (:methods
    (proc-focusable-spawner-method-9 () none) ;; 9
    (proc-focusable-spawner-method-10 () none) ;; 10
    (proc-focusable-spawner-method-11 () none) ;; 11
    (proc-focusable-spawner-method-12 () none) ;; 12
    (proc-focusable-spawner-method-13 () none) ;; 13
    (proc-focusable-spawner-method-14 () none) ;; 14
    (proc-focusable-spawner-method-15 () none) ;; 15
    (proc-focusable-spawner-method-16 () none) ;; 16
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype enemy-focus (focus)
  ((aware uint64  :offset-assert 16) ;; enemy-aware
   (flags uint64  :offset-assert 24) ;; enemy-flag
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (enemy-focus-method-13 () none) ;; 13 ;; (enemy-focus-method-13 (_type_ process-focusable enemy-aware) symbol)
    )
  )
|#

#|
(deftype enemy-info (basic)
  ((fact-defaults                       fact-info-enemy-defaults             :offset-assert 4) ;; guessed by decompiler
   (use-die-falling                     symbol                               :offset-assert 8) ;; guessed by decompiler
   (use-victory                         symbol                               :offset-assert 12) ;; guessed by decompiler
   (use-jump-blocked                    symbol                               :offset-assert 16) ;; guessed by decompiler
   (debug-draw-neck                     symbol                               :offset-assert 20) ;; guessed by decompiler
   (jump-debug-draw                     symbol                               :offset-assert 24) ;; guessed by decompiler
   (move-to-ground                      symbol                               :offset-assert 28) ;; guessed by decompiler
   (hover-if-no-ground                  symbol                               :offset-assert 32) ;; guessed by decompiler
   (idle-anim-script                    (pointer idle-control-frame)         :offset-assert 36) ;; guessed by decompiler
   (idle-anim                           int32                                :offset-assert 40)
   (notice-anim                         int32                                :offset-assert 44)
   (hostile-anim                        int32                                :offset-assert 48)
   (hit-anim                            int32                                :offset-assert 52)
   (knocked-anim                        int32                                :offset-assert 56)
   (knocked-land-anim                   int32                                :offset-assert 60)
   (die-anim                            int32                                :offset-assert 64)
   (die-falling-anim                    int32                                :offset-assert 68)
   (victory-anim                        int32                                :offset-assert 72)
   (jump-wind-up-anim                   int32                                :offset-assert 76)
   (jump-in-air-anim                    int32                                :offset-assert 80)
   (jump-land-anim                      int32                                :offset-assert 84)
   (neck-joint                          int32                                :offset-assert 88)
   (look-at-joint                       int32                                :offset-assert 92)
   (bullseye-joint                      int32                                :offset-assert 96)
   (sound-hit                           uint128                              :offset-assert 112) ;; sound-name
   (sound-die                           uint128                              :offset-assert 128) ;; sound-name
   (notice-distance                     meters                               :offset-assert 144)
   (notice-distance-delta               meters                               :offset-assert 148)
   (proximity-notice-distance           meters                               :offset-assert 152)
   (default-hit-points                  float                                :offset-assert 156) ;; int32
   (gnd-collide-with                    collide-spec                         :offset-assert 160) ;; guessed by decompiler
   (overlaps-others-collide-with-filter collide-spec                         :offset-assert 164) ;; guessed by decompiler
   (penetrate-flinch                    uint64                               :offset-assert 168) ;; penetrate
   (penetrate-knocked                   uint64                               :offset-assert 176) ;; penetrate
   (movement-gravity                    meters                               :offset-assert 184)
   (friction                            float                                :offset-assert 188)
   (slip-factor                         float                                :offset-assert 192)
   (attack-shove-back                   meters                               :offset-assert 196)
   (attack-shove-up                     meters                               :offset-assert 200)
   (attack-mode                         symbol                               :offset-assert 204) ;; guessed by decompiler
   (attack-damage                       int32                                :offset-assert 208)
   (recover-gnd-collide-with            collide-spec                         :offset-assert 212) ;; guessed by decompiler
   (knocked-can-land-timeout            uint64                               :offset-assert 216)
   (knocked-recover-timeout             uint64                               :offset-assert 224)
   (ragdoll-blend-out-time              uint64                               :offset-assert 232)
   (ragdoll-rotate-velocity-mult        float                                :offset-assert 240)
   (jump-height-min                     meters                               :offset-assert 244)
   (jump-height-factor                  float                                :offset-assert 248)
   (knocked-seek-ry-clamp               float                                :offset-assert 252)
   (knocked-soft-vxz-lo                 float                                :offset-assert 256)
   (knocked-soft-vxz-hi                 float                                :offset-assert 260)
   (knocked-soft-vy-lo                  float                                :offset-assert 264)
   (knocked-soft-vy-hi                  float                                :offset-assert 268)
   (knocked-medium-vxz-lo               float                                :offset-assert 272)
   (knocked-medium-vxz-hi               float                                :offset-assert 276)
   (knocked-medium-vy-lo                float                                :offset-assert 280)
   (knocked-medium-vy-hi                float                                :offset-assert 284)
   (knocked-hard-vxz-lo                 float                                :offset-assert 288)
   (knocked-hard-vxz-hi                 float                                :offset-assert 292)
   (knocked-hard-vy-lo                  float                                :offset-assert 296)
   (knocked-hard-vy-hi                  float                                :offset-assert 300)
   (knocked-huge-vxz-lo                 float                                :offset-assert 304)
   (knocked-huge-vxz-hi                 float                                :offset-assert 308)
   (knocked-huge-vy-lo                  float                                :offset-assert 312)
   (knocked-huge-vy-hi                  float                                :offset-assert 316)
   (knocked-yellow-vxz-lo               float                                :offset-assert 320)
   (knocked-yellow-vxz-hi               float                                :offset-assert 324)
   (knocked-yellow-vy-lo                float                                :offset-assert 328)
   (knocked-yellow-vy-hi                float                                :offset-assert 332)
   (knocked-red-vxz-lo                  float                                :offset-assert 336)
   (knocked-red-vxz-hi                  float                                :offset-assert 340)
   (knocked-red-vy-lo                   float                                :offset-assert 344)
   (knocked-red-vy-hi                   float                                :offset-assert 348)
   (knocked-blue-vxz-lo                 float                                :offset-assert 352)
   (knocked-blue-vxz-hi                 float                                :offset-assert 356)
   (knocked-blue-vy-lo                  float                                :offset-assert 360)
   (knocked-blue-vy-hi                  float                                :offset-assert 364)
   (ragdoll-info                        ragdoll-setup                        :offset-assert 368)
   (shadow-size                         meters                               :offset-assert 372)
   (shadow-max-y                        meters                               :offset-assert 376)
   (shadow-min-y                        meters                               :offset-assert 380)
   (shadow-locus-dist                   meters                               :offset-assert 384)
   (gem-joint                           int32                                :offset-assert 388)
   (gem-seg                             uint32                               :offset-assert 392)
   (gem-no-seg                          uint32                               :offset-assert 396)
   (gem-offset                          sphere                       :inline :offset-assert 400)
   (knocked-off                         basic                                :offset-assert 416)
   )
  :method-count-assert 10
  :size-assert         #x1a4
  :flag-assert         #xa000001a4
  (:methods
    (enemy-info-method-9 () none) ;; 9 ;; (copy-enemy-info! (_type_ _type_) none)
    )
  )
|#

#|
(deftype enemy-knocked-info (structure)
  ((anim-speed         float   :offset-assert 0)
   (on-surface-count   int32   :offset-assert 4)
   (move-count         int32   :offset-assert 8)
   (land-can-land-time uint64  :offset-assert 16) ;; time-frame
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype enemy-jump-info (structure)
  ((flags      uint8              :offset-assert 0) ;; enemy-jump-flags
   (anim-speed float              :offset-assert 4)
   (hang-time  uint64             :offset-assert 8) ;; time-frame
   (start-pos  vector     :inline :offset-assert 16)
   (dest-pos   vector     :inline :offset-assert 32)
   (traj       trajectory :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype enemy-init-by-other-params (structure)
  ((trans                      vector     :inline :offset-assert 0)
   (quat                       quaternion :inline :offset-assert 16)
   (entity                     entity             :offset-assert 32) ;; guessed by decompiler
   (directed?                  symbol             :offset-assert 36) ;; guessed by decompiler
   (no-initial-move-to-ground? symbol             :offset-assert 40) ;; guessed by decompiler
   (art-level                  basic              :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype enemy-attack-info (structure)
  ((attack-id         uint32         :offset-assert 0)
   (knocked-type      uint8          :offset-assert 4) ;; knocked-type
   (blue-juggle-count uint8          :offset-assert 5)
   (attacker-handle   uint64         :offset-assert 8) ;; handle
   (attack-time       uint64         :offset-assert 16) ;; time-frame
   (penetrate-using   uint64         :offset-assert 24) ;; penetrate
   (attacker-pos      vector :inline :offset-assert 32)
   (attack-direction  vector :inline :offset-assert 48)
   (attack-position   vector :inline :offset-assert 64)
   (intensity         float          :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

#|
(deftype enemy-best-focus (structure)
  ((proc   process  :offset-assert 0) ;; guessed by decompiler
   (rating float    :offset-assert 4)
   (aware  uint64   :offset-assert 8) ;; enemy-aware
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype enemy (process-focusable)
  ((enemy-flags               enemy-flag                    :offset-assert 208)
   (enemy-info                enemy-info                    :offset-assert 216) ;; guessed by decompiler
   (hit-points                float                         :offset-assert 220) ;; int32
   (gnd-collide-with          uint32                        :offset-assert 224)
   (attack-id                 uint32                        :offset-assert 228)
   (persistent-attack-id      uint32                        :offset-assert 232)
   (water-max-height          float                         :offset-assert 236) ;; meters
   (water-surface-height      float                         :offset-assert 240) ;; meters
   (desired-angle             float                         :offset-assert 244) ;; degrees
   (jump-why                  uint64                        :offset-assert 248)
   (penetrated-by-all         uint64                        :offset-assert 256) ;; penetrate
   (penetrate-flinch          uint64                        :offset-assert 264)
   (penetrate-knocked         uint64                        :offset-assert 272)
   (ragdoll-proc              uint64                        :offset-assert 280)
   (reaction-time             uint64                        :offset-assert 288) ;; time-frame
   (notice-time               uint64                        :offset-assert 296) ;; time-frame
   (state-timeout             uint64                        :offset-assert 304) ;; time-frame
   (auto-reset-penetrate-time uint64                        :offset-assert 312) ;; time-frame
   (hit-focus-time            uint64                        :offset-assert 320) ;; time-frame
   (last-draw-time            uint64                        :offset-assert 328) ;; time-frame
   (starting-time             uint64                        :offset-assert 336) ;; time-frame
   (fated-time                uint64                        :offset-assert 344) ;; time-frame
   (focus-pos                 vector                :inline :offset-assert 352)
   (event-param-point         vector                :inline :offset-assert 368)
   (jump-dest                 vector                :inline :offset-assert 368)
   (focus                     enemy-focus           :inline :offset-assert 384)
   (incoming                  enemy-attack-info     :inline :offset-assert 416)
   (actor-group               (pointer actor-group)         :offset-assert 500) ;; guessed by decompiler
   (actor-group-count         int32                         :offset-assert 504)
   (neck                      joint-mod                     :offset-assert 508) ;; guessed by decompiler
   (on-notice                 pair                          :offset-assert 512) ;; guessed by decompiler
   (on-active                 pair                          :offset-assert 516) ;; guessed by decompiler
   (on-hostile                pair                          :offset-assert 520) ;; guessed by decompiler
   (on-death                  pair                          :offset-assert 524) ;; guessed by decompiler
   (idle-anim-player          idle-control          :inline :offset-assert 528)
   (rand-gen                  symbol                        :offset-assert 548) ;; guessed by decompiler
   )
  :method-count-assert 155
  :size-assert         #x228
  :flag-assert         #x9b01b00228
  ;; field enemy-flag is likely a value type. field on-notice uses ~A with a signed load. field on-active uses ~A with a signed load. field on-hostile uses ~A with a signed load. field on-death uses ~A with a signed load.
  (:methods
    (enemy-method-28 () none) ;; 28 ;; (dormant-aware () _type_ :state)
    (enemy-method-29 () none) ;; 29 ;; (hit () _type_ :state)
    (enemy-method-30 () none) ;; 30 ;; (knocked () _type_ :state)
    (enemy-method-31 () none) ;; 31 ;; (idle () _type_ :state)
    (enemy-method-32 () none) ;; 32 ;; (active () _type_ :state)
    (enemy-method-33 () none) ;; 33 ;; (notice () _type_ :state)
    (enemy-method-34 () none) ;; 34 ;; (flee () _type_ :state)
    (enemy-method-35 () none) ;; 35 ;; (stare () _type_ :state)
    (enemy-method-36 () none) ;; 36 ;; (hostile () _type_ :state)
    (enemy-method-37 () none) ;; 37 ;; (victory () _type_ :state)
    (enemy-method-38 () none) ;; 38 ;; (die () _type_ :state)
    (enemy-method-39 () none) ;; 39 ;; (die-falling () _type_ :state)
    (enemy-method-40 () none) ;; 40 ;; (die-fast () _type_ :state)
    (enemy-method-41 () none) ;; 41 ;; (directed () _type_ :state)
    (enemy-method-42 () none) ;; 42 ;; (jump () _type_ :state)
    (enemy-method-43 () none) ;; 43 ;; (jump-blocked () _type_ :state)
    (enemy-method-44 () none) ;; 44 ;; (ambush () _type_ :state)
    (enemy-method-45 () none) ;; 45 ;; (view-anims () _type_ :state)
    (enemy-method-46 () none) ;; 46 ;; (enemy-method-46 (_type_ int) none)
    (enemy-method-47 () none) ;; 47 ;; (enemy-method-47 (_type_ vector) float)
    (enemy-method-48 () none) ;; 48 ;; (take-damage-from-attack (_type_ process event-message-block) int)
    (enemy-method-49 () none) ;; 49 ;; (enemy-method-49 (_type_) time-frame)
    (enemy-method-50 () none) ;; 50 ;; (enemy-method-50 (_type_ vector) vector)
    (enemy-method-51 () none) ;; 51 ;; (enemy-method-51 (_type_) float)
    (enemy-method-52 () none) ;; 52 ;; (enemy-method-52 (_type_ vector) none)
    (enemy-method-53 () none) ;; 53 ;; (enemy-method-53 (_type_ process-focusable) symbol)
    (enemy-method-54 () none) ;; 54 ;; (enemy-method-54 (_type_) enemy-flag)
    (enemy-method-55 () none) ;; 55 ;; (common-post (_type_) none)
    (enemy-method-56 () none) ;; 56 ;; (damage-amount-from-attack (_type_ process event-message-block) int)
    (enemy-method-57 () none) ;; 57 ;; (update-target-awareness! (_type_ process-focusable enemy-best-focus) enemy-aware)
    (enemy-method-58 () none) ;; 58 ;; (enemy-method-58 (_type_ process event-message-block) symbol)
    (enemy-method-59 () none) ;; 59 ;; (get-penetrate-info (_type_) penetrate)
    (enemy-method-60 () none) ;; 60 ;; (coin-flip? (_type_) symbol)
    (enemy-method-61 () none) ;; 61 ;; (enemy-method-61 (_type_ int) int)
    (enemy-method-62 () none) ;; 62 ;; (enemy-method-62 (_type_) none)
    (enemy-method-63 () none) ;; 63 ;; (enemy-method-63 (_type_ process-focusable enemy-aware) symbol)
    (enemy-method-64 () none) ;; 64 ;; (go-dormant (_type_) object)
    (enemy-method-65 () none) ;; 65 ;; (go-dormant-aware (_type_) object)
    (enemy-method-66 () none) ;; 66 ;; (go-ambush (_type_) object)
    (enemy-method-67 () none) ;; 67 ;; (go-stare (_type_) object)
    (enemy-method-68 () none) ;; 68 ;; (go-stare2 (_type_) object)
    (enemy-method-69 () none) ;; 69 ;; (go-directed (_type_) object)
    (enemy-method-70 () none) ;; 70 ;; (go-hostile (_type_) object)
    (enemy-method-71 () none) ;; 71 ;; (go-flee (_type_) object)
    (enemy-method-72 () none) ;; 72 ;; (react-to-focus (_type_) object)
    (enemy-method-73 () none) ;; 73 ;; (kill-prefer-falling (_type_) object)
    (enemy-method-74 () none) ;; 74 ;; (general-event-handler (_type_ process int symbol event-message-block) object)
    (enemy-method-75 () none) ;; 75 ;; (enemy-method-75 (_type_ process event-message-block) object)
    (enemy-method-76 () none) ;; 76 ;; (enemy-method-76 (_type_ process event-message-block) symbol)
    (enemy-method-77 () none) ;; 77 ;; (enemy-method-77 (_type_ enemy-knocked-info) symbol)
    (enemy-method-78 () none) ;; 78 ;; (enemy-method-78 (_type_ enemy-knocked-info) symbol)
    (enemy-method-79 () none) ;; 79 ;; (enemy-method-79 (_type_ int enemy-knocked-info) symbol)
    (enemy-method-80 () none) ;; 80 ;; (enemy-method-80 (_type_ enemy-knocked-info) symbol)
    (enemy-method-81 () none) ;; 81 ;; (enemy-method-81 (_type_) symbol)
    (enemy-method-82 () none) ;; 82 ;; (enemy-method-82 (_type_ enemy-jump-info) symbol)
    (enemy-method-83 () none) ;; 83 ;; (enemy-method-83 (_type_ enemy-jump-info) none)
    (enemy-method-84 () none) ;; 84 ;; (enemy-method-84 (_type_ enemy-jump-info) none)
    (enemy-method-85 () none) ;; 85 ;; (enemy-method-85 (_type_) float)
    (enemy-method-86 () none) ;; 86 ;; (enemy-method-86 (_type_) symbol)
    (enemy-method-87 () none) ;; 87 ;; (enemy-method-87 (_type_ enemy-jump-info) symbol)
    (enemy-method-88 () none) ;; 88 ;; (enemy-method-88 (_type_ enemy-jump-info) symbol)
    (enemy-method-89 () none) ;; 89 ;; (enemy-method-89 (_type_ enemy-jump-info) symbol)
    (enemy-method-90 () none) ;; 90 ;; (enemy-method-90 (_type_ int enemy-jump-info) symbol)
    (enemy-method-91 () none) ;; 91 ;; (enemy-method-91 (_type_ int enemy-jump-info) none)
    (enemy-method-92 () none) ;; 92 ;; (enemy-method-92 (_type_ int enemy-jump-info) none)
    (enemy-method-93 () none) ;; 93 ;; (enemy-method-93 (_type_) none)
    (enemy-method-94 () none) ;; 94 ;; (enemy-method-94 (_type_ vector float) symbol)
    (enemy-method-95 () none) ;; 95 ;; (enemy-method-95 (_type_ vector float) symbol)
    (enemy-method-96 () none) ;; 96 ;; (enemy-method-96 (_type_ float symbol) symbol)
    (enemy-method-97 () none) ;; 97 ;; (enemy-method-97 (_type_) process)
    (enemy-method-98 () none) ;; 98 ;; (in-aggro-range? (_type_ process-focusable vector) symbol)
    (enemy-method-99 () none) ;; 99 ;; (enemy-method-99 (_type_ process-focusable) symbol)
    (enemy-method-100 () none) ;; 100 ;; (enemy-method-100 (_type_) symbol)
    (enemy-method-101 () none) ;; 101 ;; (enemy-method-101 (_type_) none)
    (enemy-method-102 () none) ;; 102 ;; (enemy-method-102 (_type_) symbol)
    (enemy-method-103 () none) ;; 103 ;; (enemy-method-103 (_type_) collide-spec)
    (enemy-method-104 () none) ;; 104 ;; (enemy-method-104 (_type_ process touching-shapes-entry uint) symbol)
    (enemy-method-105 () none) ;; 105 ;; (enemy-method-105 (_type_ process) enemy-flag)
    (enemy-method-106 () none) ;; 106 ;; (set-incoming-attack-info (_type_ process object penetrate attack-info) none)
    (enemy-method-107 () none) ;; 107 ;; (get-enemy-target (_type_) process-focusable)
    (enemy-method-108 () none) ;; 108 ;; (enemy-method-108 (_type_ process-drawable event-message-block) int)
    (enemy-method-109 () none) ;; 109 ;; (look-at-target! (_type_ enemy-flag) none)
    (enemy-method-110 () none) ;; 110 ;; (stop-looking-at-target! (_type_) none)
    (enemy-method-111 () none) ;; 111 ;; (enemy-method-111 (_type_) none)
    (enemy-method-112 () none) ;; 112 ;; (set-enemy-info! (_type_ enemy-info) none)
    (enemy-method-113 () none) ;; 113 ;; (init-enemy-behaviour-and-stats! (_type_ enemy-info) none)
    (enemy-method-114 () none) ;; 114 ;; (init-enemy-collision! (_type_) none)
    (enemy-method-115 () none) ;; 115 ;; (init-enemy! (_type_) none)
    (enemy-method-116 () none) ;; 116 ;; (go-idle (_type_) none)
    (enemy-method-117 () none) ;; 117 ;; (rnd-float (_type_) float)
    (enemy-method-118 () none) ;; 118 ;; (rnd-float-range (_type_ float float) float)
    (enemy-method-119 () none) ;; 119 ;; (rnd-int-count (_type_ int) int)
    (enemy-method-120 () none) ;; 120 ;; (rnd-bit (_type_ int int) int)
    (enemy-method-121 () none) ;; 121 ;; (rnd-int-range (_type_ int int) int)
    (enemy-method-122 () none) ;; 122 ;; (rnd-percent? (_type_ float) symbol)
    (enemy-method-123 () none) ;; 123 ;; (rnd-go-idle? (_type_ float) symbol)
    (enemy-method-124 () none) ;; 124 ;; (enemy-method-124 (_type_) collide-spec)
    (enemy-method-125 () none) ;; 125 ;; (ground-pat-set! (_type_ collide-query collide-spec float float float) pat-surface)
    (enemy-method-126 () none) ;; 126 ;; (enemy-above-ground? (_type_ collide-query vector collide-spec float float float) symbol)
    (enemy-method-127 () none) ;; 127 ;; (enemy-method-127 (_type_ float float symbol collide-spec) symbol)
    (enemy-method-128 () none) ;; 128 ;; (enemy-method-128 (_type_ vector move-above-ground-params) none)
    (enemy-method-129 () none) ;; 129 ;; (enemy-method-129 (_type_) none)
    (enemy-method-130 () none) ;; 130 ;; (enemy-method-130 (_type_ float) symbol)
    (enemy-method-131 () none) ;; 131 ;; (penetrate-using->knocked (_type_ penetrate) knocked-type)
    (enemy-method-132 () none) ;; 132 ;; (dying (_type_) none)
    (enemy-method-133 () none) ;; 133 ;; (enemy-method-133 (_type_) symbol)
    (enemy-method-134 () none) ;; 134 ;; (get-attacker (_type_ process attack-info) process-focusable)
    (enemy-method-135 () none) ;; 135 ;; (enemy-method-135 (_type_ int) sound-id)
    (enemy-method-136 () none) ;; 136 ;; (enemy-method-136 (_type_) enemy-flag)
    (enemy-method-137 () none) ;; 137
    (enemy-method-138 () none) ;; 138
    (enemy-method-139 () none) ;; 139
    (enemy-method-140 () none) ;; 140
    (enemy-method-141 () none) ;; 141
    (enemy-method-142 () none) ;; 142
    (enemy-method-143 () none) ;; 143
    (enemy-method-144 () none) ;; 144
    (enemy-method-145 () none) ;; 145
    (enemy-method-146 () none) ;; 146
    (enemy-method-147 () none) ;; 147
    (enemy-method-148 () none) ;; 148
    (enemy-method-149 () none) ;; 149
    (enemy-method-150 () none) ;; 150
    (enemy-method-151 () none) ;; 151
    (enemy-method-152 () none) ;; 152
    (enemy-method-153 () none) ;; 153
    (enemy-method-154 () none) ;; 154
    )
  )
|#

#|
(deftype anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-enemy-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-enemy-info (enemy-info)
  ((callback-info             nav-callback-info  :offset-assert 420)
   (use-momentum              symbol             :offset-assert 424) ;; guessed by decompiler
   (use-frustration           symbol             :offset-assert 428) ;; guessed by decompiler
   (use-stop-chase            symbol             :offset-assert 432) ;; guessed by decompiler
   (use-circling              symbol             :offset-assert 436) ;; guessed by decompiler
   (use-pacing                symbol             :offset-assert 440) ;; guessed by decompiler
   (walk-anim                 int32              :offset-assert 444)
   (turn-anim                 int32              :offset-assert 448)
   (run-anim                  int32              :offset-assert 452)
   (taunt-anim                int32              :offset-assert 456)
   (run-travel-speed          meters             :offset-assert 460)
   (run-acceleration          meters             :offset-assert 464)
   (run-turning-acceleration  meters             :offset-assert 468)
   (walk-travel-speed         meters             :offset-assert 472)
   (walk-acceleration         meters             :offset-assert 476)
   (walk-turning-acceleration meters             :offset-assert 480)
   (maximum-rotation-rate     deg                :offset-assert 484) ;; degrees
   (notice-nav-radius         meters             :offset-assert 488)
   (frustration-distance      meters             :offset-assert 492)
   (frustration-time          uint64             :offset-assert 496) ;; time-frame
   (blocked-time              uint64             :offset-assert 504) ;; time-frame
   (circle-dist-lo            float              :offset-assert 512)
   (circle-dist-hi            float              :offset-assert 516)
   (nav-mesh                  nav-mesh           :offset-assert 520) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #x20c
  :flag-assert         #xb0000020c
  (:methods
    (nav-enemy-info-method-10 () none) ;; 10 ;; (copy-nav-enemy-info! (_type_ nav-enemy-info) none)
    )
  )
|#

#|
(deftype nav-enemy (enemy)
  ((frustration-point       vector :inline :offset-assert 560)
   (move-dest               vector :inline :offset-assert 576)
   (frustration-time        uint64         :offset-assert 592) ;; time-frame
   (blocked-start-time      uint64         :offset-assert 600) ;; time-frame
   (restore-nav-radius-time uint64         :offset-assert 608) ;; time-frame
   (nav-radius-backup       float          :offset-assert 616)
   (circle-radial-dist      float          :offset-assert 244)
   )
  :method-count-assert 190
  :size-assert         #x26c
  :flag-assert         #xbe01f0026c
  (:methods
    (nav-enemy-method-155 () none) ;; 155 ;; (nav-enemy-method-155 (_type_) none)
    (nav-enemy-method-156 () none) ;; 156 ;; (nav-enemy-method-156 (_type_) none)
    (nav-enemy-method-157 () none) ;; 157 ;; (nav-enemy-method-157 (_type_ vector) nav-poly)
    (nav-enemy-method-158 () none) ;; 158 ;; (nav-enemy-method-158 (_type_ vector) object)
    (nav-enemy-method-159 () none) ;; 159 ;; (nav-enemy-method-159 (_type_ vector) symbol)
    (nav-enemy-method-160 () none) ;; 160 ;; (nav-enemy-method-160 (_type_) none)
    (nav-enemy-method-161 () none) ;; 161 ;; (nav-enemy-method-161 (_type_) none)
    (nav-enemy-method-162 () none) ;; 162 ;; (nav-enemy-method-162 (_type_) none)
    (nav-enemy-method-163 () none) ;; 163 ;; (nav-enemy-method-163 (_type_) symbol)
    (nav-enemy-method-164 () none) ;; 164 ;; (nav-enemy-method-164 (_type_) none)
    (nav-enemy-method-165 () none) ;; 165 ;; (nav-enemy-method-165 (_type_) none)
    (nav-enemy-method-166 () none) ;; 166 ;; (nav-enemy-method-166 (_type_) none)
    (nav-enemy-method-167 () none) ;; 167 ;; (nav-enemy-method-167 (_type_) none)
    (nav-enemy-method-168 () none) ;; 168 ;; (nav-enemy-method-168 (_type_) float)
    (nav-enemy-method-169 () none) ;; 169 ;; (nav-enemy-method-169 (_type_ float symbol) float)
    (nav-enemy-method-170 () none) ;; 170 ;; (nav-enemy-method-170 (_type_) none)
    (nav-enemy-method-171 () none) ;; 171 ;; (nav-enemy-method-171 (_type_) none)
    (nav-enemy-method-172 () none) ;; 172 ;; (nav-enemy-method-172 (_type_) none)
    (nav-enemy-method-173 () none) ;; 173 ;; (nav-enemy-method-173 (_type_) none)
    (nav-enemy-method-174 () none) ;; 174 ;; (nav-enemy-method-174 (_type_) symbol)
    (nav-enemy-method-175 () none) ;; 175 ;; (nav-enemy-method-175 (_type_) symbol)
    (nav-enemy-method-176 () none) ;; 176 ;; (nav-enemy-method-176 (_type_) none)
    (nav-enemy-method-177 () none) ;; 177 ;; (nav-enemy-method-177 (_type_) none)
    (nav-enemy-method-178 () none) ;; 178
    (nav-enemy-method-179 () none) ;; 179
    (nav-enemy-method-180 () none) ;; 180
    (nav-enemy-method-181 () none) ;; 181
    (nav-enemy-method-182 () none) ;; 182
    (nav-enemy-method-183 () none) ;; 183
    (nav-enemy-method-184 () none) ;; 184
    (nav-enemy-method-185 () none) ;; 185
    (nav-enemy-method-186 () none) ;; 186
    (nav-enemy-method-187 () none) ;; 187
    (nav-enemy-method-188 () none) ;; 188
    (nav-enemy-method-189 () none) ;; 189
    )
  )
|#

#|
(deftype nav-enemy-debug-control-info (basic)
  ((enable   basic  :offset-assert 4)
   (steering float  :offset-assert 8)
   (throttle float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *enemy-dummy-shadow-control* shadow-control) ;; shadow-control
;; (define-extern get-penetrate-using-from-attack-event function) ;; (function process-drawable event-message-block penetrate)
;; (define-extern enemy-setup-gem function)
;; (define-extern enemy-init-by-other function) ;; (function process-drawable enemy-init-by-other-params none :behavior enemy)
;; (define-extern enemy-event-handler function) ;; (function process int symbol event-message-block object :behavior enemy)
;; (define-extern enemy-simple-post function) ;; (function none :behavior enemy)
;; (define-extern enemy-falling-post function) ;; (function none :behavior enemy)
;; (define-extern enemy-die-falling-post function) ;; (function none :behavior enemy)
;; (define-extern *shockwave-knock-scalar* curve2d-fast)
;; (define-extern ja-group-index? function) ;; (function int symbol :behavior enemy)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern gun-dark-2-anim-code function)
;; (define-extern gun-dark-2-ragdoll-start function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-enemy                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *nav-enemy-dummy-shadow-control* shadow-control) ;; shadow-control
;; (define-extern nav-enemy-simple-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-die-falling-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-travel-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-patrol-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-chase-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-flee-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-face-focus-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-stare-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-falling-post function) ;; (function none :behavior nav-enemy)
;; (define-extern nav-enemy-turn-to-face-dir function) ;; (function vector float none :behavior nav-enemy)
;; (define-extern nav-enemy-turn-to-face-point function) ;; (function vector float none :behavior nav-enemy)
;; (define-extern *nav-enemy-debug-control-info* nav-enemy-debug-control-info) ;; nav-enemy-debug-control-info
;; (define-extern nav-enemy-debug-control-post function) ;; (function none :behavior nav-enemy)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; base-plat                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype base-plat (process-focusable)
  ((smush        smush-control :inline :offset-assert 208)
   (basetrans    vector        :inline :offset-assert 240)
   (bounce-time  uint64                :offset-assert 256) ;; time-frame
   (bouncing     symbol                :offset-assert 264) ;; guessed by decompiler
   (bounce-scale meters                :offset-assert 268)
   )
  :method-count-assert 35
  :size-assert         #x110
  :flag-assert         #x2300900110
  (:methods
    (base-plat-method-28 () none) ;; 28 ;; (stop-bouncing! (_type_) none)
    (base-plat-method-29 () none) ;; 29 ;; (start-bouncing! (_type_) none)
    (base-plat-method-30 () none) ;; 30 ;; (get-art-group (_type_) art-group)
    (base-plat-method-31 () none) ;; 31 ;; (init-plat-collision! (_type_) none)
    (base-plat-method-32 () none) ;; 32 ;; (base-plat-method-32 (_type_) none)
    (base-plat-method-33 () none) ;; 33 ;; (init-plat! (_type_) none)
    (base-plat-method-34 () none) ;; 34
    )
  )
|#

#|
(deftype eco-door (process-drawable)
  ((speed          float                :offset-assert 200)
   (open-distance  float                :offset-assert 204)
   (close-distance float                :offset-assert 208)
   (out-dir        vector       :inline :offset-assert 224)
   (open-sound     uint128              :offset-assert 240) ;; sound-name
   (close-sound    uint128              :offset-assert 256) ;; sound-name
   (state-actor    entity-actor         :offset-assert 272) ;; guessed by decompiler
   (flags          int32                :offset-assert 276) ;; eco-door-flags
   (locked         symbol               :offset-assert 280) ;; guessed by decompiler
   (auto-close     symbol               :offset-assert 284) ;; guessed by decompiler
   (one-way        symbol               :offset-assert 288) ;; guessed by decompiler
   )
  :method-count-assert 27
  :size-assert         #x124
  :flag-assert         #x1b00b00124
  (:methods
    (eco-door-method-24 () none) ;; 24 ;; (lock-according-to-task! (_type_) none)
    (eco-door-method-25 () none) ;; 25 ;; (eco-door-method-25 (_type_) none)
    (eco-door-method-26 () none) ;; 26 ;; (stub (_type_) none)
    )
  (:state-methods
    door-closing ;; 23, old: (door-closing () _type_ :state)
    door-open ;; 22, old: (door-open () _type_ :state)
    door-opening ;; 21, old: (door-opening () _type_ :state)
    door-closed ;; 20, old: (door-closed () _type_ :state)
    )
  )
|#

;; (define-extern plat-code function) ;; (function none :behavior base-plat)
;; (define-extern plat-trans function) ;; (function none :behavior base-plat)
;; (define-extern plat-post function) ;; (function none :behavior base-plat)
;; (define-extern plat-event function) ;; (function process int symbol event-message-block object :behavior base-plat)
;; (define-extern eco-door-event-handler function) ;; (function process int symbol event-message-block object :behavior eco-door)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; plat                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype plat (base-plat)
  ((path-pos float              :offset-assert 272)
   (sound-id sound-id           :offset-assert 276) ;; guessed by decompiler
   (sync     sync-eased :inline :offset-assert 280)
   )
  :method-count-assert 38
  :size-assert         #x144
  :flag-assert         #x2600d00144
  (:methods
    (plat-method-37 () none) ;; 37
    )
  (:state-methods
    plat-path-active ;; 36, old: (plat-path-sync (_type_) object)
    plat-idle ;; 35, old: (plat-path-active () _type_ :state)
    )
  )
|#

#|
(deftype drop-plat (base-plat)
  ((art-name        string             :offset-assert 272) ;; guessed by decompiler
   (anim            spool-anim         :offset-assert 276) ;; guessed by decompiler
   (break-anim-name string             :offset-assert 280) ;; guessed by decompiler
   (safe-time       uint64             :offset-assert 288) ;; time-frame
   (hit-point       vector     :inline :offset-assert 304)
   )
  :method-count-assert 37
  :size-assert         #x140
  :flag-assert         #x2500c00140
  (:state-methods
    fall ;; 36
    idle ;; 35, old: (fall (symbol) _type_ :state)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bouncer                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bouncer (process-drawable)
  ((spring-height       meters  :offset-assert 200)
   (smush               float   :offset-assert 204)
   (mods                basic   :offset-assert 208)
   (use-alternate-jump? basic   :offset-assert 212)
   )
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  (:methods
    (bouncer-method-23 () none) ;; 23 ;; (init-skeleton! (_type_) none)
    (bouncer-method-24 () none) ;; 24 ;; (bouncer-method-24 (_type_) none)
    (bouncer-method-25 () none) ;; 25
    (bouncer-method-26 () none) ;; 26
    )
  (:state-methods
    fire ;; 21, old: (fire () _type_ :state)
    smush ;; 22, old: (smush () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; elevator                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype elevator-params (structure)
  ((xz-threshold float   :offset-assert 0)
   (y-threshold  float   :offset-assert 4)
   (start-pos    float   :offset-assert 8)
   (move-rate    float   :offset-assert 12)
   (flags        uint64  :offset-assert 16) ;; elevator-flags
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype path-step (structure)
  ((next-pos float  :offset-assert 0)
   (dist     float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype path-step-inline-array (inline-array-class)
  ((data path-step :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype elevator (base-plat)
  ((params                       elevator-params        :inline :offset-assert 272)
   (path-seq                     path-step-inline-array         :offset-assert 296) ;; guessed by decompiler
   (path-dest                    float                          :offset-assert 300)
   (bottom-top                   float                  2       :offset-assert 304) ;; guessed by decompiler
   (move-pos                     float                  2       :offset-assert 312) ;; guessed by decompiler
   (move-dist                    float                          :offset-assert 320)
   (path-pos                     float                          :offset-assert 324)
   (path-eased-pos               float                          :offset-assert 328)
   (ride-timer                   uint64                         :offset-assert 336) ;; time-frame
   (sticky-player-last-ride-time uint64                         :offset-assert 344) ;; time-frame
   (elevator-status              uint64                         :offset-assert 352) ;; elevator-status
   (on-activate                  pair                           :offset-assert 360) ;; guessed by decompiler
   (on-deactivate                pair                           :offset-assert 364) ;; guessed by decompiler
   (on-up                        basic                          :offset-assert 368)
   (on-down                      basic                          :offset-assert 372)
   (on-running                   basic                          :offset-assert 376)
   (on-notice                    basic                          :offset-assert 380)
   (on-wait                      basic                          :offset-assert 384)
   (sound-id                     uint32                         :offset-assert 388)
   (sound-running-loop           basic                          :offset-assert 392)
   (sound-arrived                basic                          :offset-assert 396)
   (fence-prim-index             uint32                         :offset-assert 400)
   (speed                        float                          :offset-assert 404)
   (sound-start                  basic                          :offset-assert 408)
   (activate-test                basic                          :offset-assert 412)
   )
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  ;; field on-activate uses ~A with a signed load. field on-deactivate uses ~A with a signed load. field on-up uses ~A with a signed load. field on-down uses ~A with a signed load. field on-running uses ~A with a signed load. field on-notice uses ~A with a signed load. field on-wait uses ~A with a signed load. field activate-test uses ~A with a signed load.
  (:methods
    (elevator-method-39 () none) ;; 39 ;; (calc-dist-between-points! (_type_ int int) none)
    (elevator-method-41 () none) ;; 41 ;; (init-defaults! (_type_) none)
    (elevator-method-42 () none) ;; 42 ;; (set-ambient-sound! (_type_) none)
    (elevator-method-43 () none) ;; 43 ;; (move-between-points (_type_ vector float float) symbol)
    (elevator-method-44 () none) ;; 44 ;; (elevator-method-44 (_type_) symbol)
    (elevator-method-45 () none) ;; 45 ;; (commited-to-ride? (_type_) symbol)
    (elevator-method-46 () none) ;; 46 ;; (move-to-next-point! (_type_) none)
    (elevator-method-47 () none) ;; 47 ;; (find-closest-point-in-path! (_type_ vector (pointer float) symbol symbol) symbol)
    (elevator-method-48 () none) ;; 48 ;; (elevator-method-48 (_type_) none)
    (elevator-method-49 () none) ;; 49
    (elevator-method-50 () none) ;; 50
    (elevator-method-51 () none) ;; 51
    )
  (:state-methods
    die ;; 40, old: (activate-elevator (_type_) object)
    arrived ;; 38, old: (elevator-method-38 (_type_) none)
    running ;; 37, old: (arrived () _type_ :state)
    waiting ;; 36, old: (running () _type_ :state)
    dormant ;; 35, old: (waiting () _type_ :state)
    )
  )
|#

;; (define-extern ease-value-in-out function) ;; (function float float float)
;; (define-extern elevator-event function) ;; (function process int symbol event-message-block object :behavior elevator)
;; (define-extern move-post function) ;; (function none :behavior elevator)
;; (define-extern teleport-check function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rigid-body-work (structure)
  ((max-ang-momentum float  :offset-assert 0)
   (max-ang-velocity float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype rigid-body-move-work (structure)
  ((cquery          collide-query     :inline :offset-assert 0)
   (mat             matrix            :inline :offset-assert 544)
   (impact-info     rigid-body-impact :inline :offset-assert 608)
   (impact-info2    rigid-body-impact :inline :offset-assert 672)
   (orig-position   vector            :inline :offset-assert 736)
   (orig-rotation   quaternion        :inline :offset-assert 752)
   (force           vector            :inline :offset-assert 768)
   (vel             vector            :inline :offset-assert 784)
   (p-body          vector            :inline :offset-assert 800)
   (tmp             vector            :inline :offset-assert 816)
   (tangent-dir     vector            :inline :offset-assert 832)
   (proc2           basic                     :offset-assert 848)
   (rbody2          basic                     :offset-assert 852)
   (vel-dot-norm    float                     :offset-assert 856)
   (denom           float                     :offset-assert 860)
   (denom2          float                     :offset-assert 864)
   (time-step       float                     :offset-assert 868)
   (time-step-scale float                     :offset-assert 872)
   (step-count      int8                      :offset-assert 876)
   )
  :method-count-assert 9
  :size-assert         #x36d
  :flag-assert         #x90000036d
  )
|#

;; (define-extern *rigid-body-work* object) ;; rigid-body-work
;; (define-extern matrix-3x3-triple-transpose-product function) ;; (function matrix matrix matrix matrix)
;; (define-extern damping-time-adjust function) ;; (function float float float)
;; (define-extern transform-rigid-body-prims function) ;; (function collide-shape-prim matrix symbol)
;; (define-extern *rigid-body-object-constants* object) ;; rigid-body-object-constants
;; (define-extern rigid-body-object-event-handler function) ;; (function process int symbol event-message-block object :behavior rigid-body-object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-queue               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rigid-body-queue-manager (process)
  ((queue rigid-body-queue  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:state-methods
    idle ;; 14, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern *rigid-body-queue-manager* object)
;; (define-extern rigid-body-queue-manager-init-by-other function) ;; (function rigid-body-queue object :behavior rigid-body-queue-manager)
;; (define-extern rigid-body-queue-manager-spawn function) ;; (function rigid-body-queue process-tree process)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; joint-exploder                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype joint-exploder-tuning (structure)
  ((explosion                   uint64         :offset-assert 0)
   (duration                    uint64         :offset-assert 8) ;; time-frame
   (gravity                     float          :offset-assert 16)
   (rot-speed                   float          :offset-assert 20)
   (bounds-inflate              float          :offset-assert 24)
   (max-probes                  uint8          :offset-assert 28)
   (max-probe-width             float          :offset-assert 32)
   (max-probe-height            float          :offset-assert 36)
   (max-probe-depth             float          :offset-assert 40)
   (friction                    float          :offset-assert 44)
   (fountain-rand-transv-lo     vector :inline :offset-assert 48)
   (fountain-rand-transv-hi     vector :inline :offset-assert 64)
   (away-from-focal-pt          vector :inline :offset-assert 48)
   (away-from-rand-transv-xz-lo float          :offset-assert 64)
   (away-from-rand-transv-xz-hi float          :offset-assert 68)
   (away-from-rand-transv-y-lo  float          :offset-assert 72)
   (away-from-rand-transv-y-hi  float          :offset-assert 76)
   (hit-xz-reaction             float          :offset-assert 80)
   (hit-y-reaction              float          :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype joint-exploder-static-joint-params (structure)
  ((joint-index        int16  :offset-assert 0)
   (parent-joint-index int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype joint-exploder-static-params (basic)
  ((joints                 (array joint-exploder-static-joint-params)  :offset-assert 4) ;; guessed by decompiler
   (collide-spec           uint32                                      :offset-assert 8)
   (art-level              symbol                                      :offset-assert 12) ;; guessed by decompiler
   (collide-sound          uint128                                     :offset-assert 16)
   (collide-sound-interval uint64                                      :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype joint-exploder-joint (structure)
  ((next        int16          :offset-assert 0)
   (prev        int16          :offset-assert 2)
   (joint-index int16          :offset-assert 4)
   (mat         matrix :inline :offset-assert 16)
   (rmat        matrix :inline :offset-assert 80)
   (update-rmat matrix :inline :offset-assert 144)
   (transv      vector :inline :offset-assert 208)
   (prev-pos    vector :inline :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )
|#

#|
(deftype joint-exploder-joints (basic)
  ((num-joints int32                         :offset-assert 4)
   (joint      joint-exploder-joint :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype joint-exploder-list (structure)
  ((head        int32                :offset-assert 0)
   (pre-moved?  symbol               :offset-assert 4) ;; guessed by decompiler
   (bbox-valid? symbol               :offset-assert 8) ;; guessed by decompiler
   (probeless?  symbol               :offset-assert 12) ;; guessed by decompiler
   (bbox        bounding-box :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype joint-exploder-list-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype joint-exploder (process-drawable)
  ((die-if-below-y             float                                :offset-assert 200)
   (die-if-beyond-xz-dist-sqrd float                                :offset-assert 204)
   (joints                     joint-exploder-joints                :offset-assert 208) ;; guessed by decompiler
   (static-params              joint-exploder-static-params         :offset-assert 212) ;; guessed by decompiler
   (anim                       art-joint-anim                       :offset-assert 216) ;; guessed by decompiler
   (scale-vector               vector                       :inline :offset-assert 224)
   (tuning                     joint-exploder-tuning        :inline :offset-assert 240)
   (lists                      joint-exploder-list                  :offset-assert 328) ;; guessed by decompiler
   (last-colsound-time         uint64                               :offset-assert 336)
   )
  :method-count-assert 30
  :size-assert         #x158
  :flag-assert         #x1e00e00158
  (:methods
    (joint-exploder-method-20 () none) ;; 20 ;; (add-joint-to-list (_type_ joint-exploder-list int) int)
    (joint-exploder-method-21 () none) ;; 21 ;; (update-bbox-for-joint (_type_ joint-exploder-list joint-exploder-joint) none)
    (joint-exploder-method-22 () none) ;; 22 ;; (do-collision-response (_type_ joint-exploder-list) none)
    (joint-exploder-method-23 () none) ;; 23 ;; (init-joint-list (_type_) none)
    (joint-exploder-method-24 () none) ;; 24 ;; (remove-from-list-and-reset (_type_ joint-exploder-list int) int)
    (joint-exploder-method-25 () none) ;; 25 ;; (final-adjust (_type_ joint-exploder-list int) int)
    (joint-exploder-method-26 () none) ;; 26 ;; (integrate-and-kill (_type_ joint-exploder-list) none)
    (joint-exploder-method-27 () none) ;; 27 ;; (remove-joint-from-list (_type_ joint-exploder-list int) int)
    (joint-exploder-method-28 () none) ;; 28 ;; (adjust-bbox-for-limits-along-axis (_type_ joint-exploder-list int) joint-exploder-list)
    (joint-exploder-method-29 () none) ;; 29 ;; (adjust-bbox-for-limits (_type_ joint-exploder-list) none)
    )
  (:states
    joint-exploder-shatter ;; associated process guessed by decompiler, old: (state joint-exploder)
    )
  )
|#

;; (define-extern joint-exploder-joint-callback function) ;; (function draw-control cspace-array joint-control none)
;; (define-extern joint-exploder-init-by-other function) ;; (function skeleton-group int joint-exploder-tuning joint-exploder-static-params none :behavior joint-exploder)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-nav-sphere              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype simple-nav-sphere (process-drawable)
  ((first-time? symbol  :offset-assert 200) ;; guessed by decompiler
   (track-joint int32   :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:state-methods
    active ;; 21, old: (active () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern simple-nav-sphere-event-handler function) ;; (function process int symbol event-message-block object :behavior simple-nav-sphere)
;; (define-extern simple-nav-sphere-init-by-other function) ;; (function float vector nav-mesh int none :behavior simple-nav-sphere)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; process-taskable               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern process-taskable-anim-loop function) ;; (function (function process-taskable object) none :behavior process-taskable)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scene-actor                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype pecker-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype veger-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype ashelin-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype damus-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype torn-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype samos-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype sig-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype kleever-npc (process-taskable)
  ((cloth basic  :offset-assert 280)
   )
  :method-count-assert 40
  :size-assert         #x11c
  :flag-assert         #x2800a0011c
  )

(deftype seem-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype onin-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype jinx-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype gun-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype tess-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype vin-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(deftype keira-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )

(define-extern pre-intro-play (function none))
(define-extern intro-play (function none))
(define-extern outro-play (function none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; warp-gate                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype warp-gate (process-drawable)
  ((level-name  uint32                 :offset-assert 200) ;; guessed by decompiler
   (on-notice   pair                   :offset-assert 204) ;; guessed by decompiler
   (on-activate pair                   :offset-assert 208) ;; guessed by decompiler
   (on-close    pair                   :offset-assert 212) ;; guessed by decompiler
   (wait-for    pair                   :offset-assert 216) ;; guessed by decompiler
   (continue    continue-point         :offset-assert 220) ;; guessed by decompiler
   (distance    meters                 :offset-assert 224)
   (anim-speed  float                  :offset-assert 228)
   (test-time   uint64                 :offset-assert 232) ;; time-frame
   (center      vector         :inline :offset-assert 240)
   )
  :method-count-assert 26
  :size-assert         #x100
  :flag-assert         #x1a00800100
  ;; field on-notice uses ~A with a signed load. field on-activate uses ~A with a signed load. field on-close uses ~A with a signed load.
  (:methods
    (warp-gate-method-23 () none) ;; 23 ;; (init-skel-and-collide (_type_) none)
    (warp-gate-method-24 () none) ;; 24 ;; (setup-fields (_type_) none)
    (warp-gate-method-25 () none) ;; 25 ;; (handle-notice (_type_) continue-point)
    )
  (:state-methods
    use ;; 21, old: (use (continue-point) _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    hidden ;; 22, old: (hidden () _type_ :state)
    )
  )
|#

#|
(deftype air-train (warp-gate)
  ((part-exhaust-left  sparticle-launch-control         :offset-assert 256) ;; guessed by decompiler
   (part-exhaust-right sparticle-launch-control         :offset-assert 260) ;; guessed by decompiler
   (part-dust          sparticle-launch-control         :offset-assert 264) ;; guessed by decompiler
   (dust-y             float                            :offset-assert 268)
   (hover-sound        sound-id                         :offset-assert 272) ;; guessed by decompiler
   (base-pos           vector                   :inline :offset-assert 288)
   )
  :method-count-assert 26
  :size-assert         #x130
  :flag-assert         #x1a00b00130
  (:state-methods
    use ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern warp-gate-init function) ;; (function entity-actor vector none :behavior warp-gate)
;; (define-extern *warp-jump-mods* surface) ;; surface
;; (define-extern *range-warp-dust-color* curve-color-fast)
;; (define-extern *range-warp-dust-alpha* curve2d-fast)
;; (define-extern *range-warp-dust-scale-x* curve2d-fast)
;; (define-extern *range-warp-dust-scale-y* curve2d-fast)
;; (define-extern *curve-warp-dust-alpha* curve2d-fast)
;; (define-extern *curve-warp-dust-scale-x* curve2d-fast)
;; (define-extern *curve-warp-dust-scale-y* curve2d-fast)
;; (define-extern *part-warp-fma-dust-takeoff-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-projectile               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guard-shot (projectile)
  ((hit-actor? symbol         :offset-assert 512) ;; guessed by decompiler
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern guard-shot-move function) ;; (function guard-shot none)
;; (define-extern spawn-guard-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-projectile           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-shot (projectile)
  ((tail-pos vector :inline :offset-assert 512)
   )
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype metalhead-grenade-shot (projectile)
  ((tumble-quat  quaternion :inline :offset-assert 512)
   (blast-radius float              :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x214
  :flag-assert         #x2901a00214
  (:state-methods
    dissipate ;; 21
    impact ;; 22
    )
  )
|#

;; (define-extern metalhead-shot-move function) ;; (function metalhead-shot none)
;; (define-extern spawn-metalhead-projectile function) ;; (function metalhead-shot vector vector float (pointer metalhead-shot))
;; (define-extern gren-canister-move function) ;; (function metalhead-grenade-shot none)
;; (define-extern gren-cshape-reaction-canister function) ;; (function collide-shape-moving metalhead-grenade-shot none)
;; (define-extern spawn-metalhead-grenade function) ;; (function metalhead-grenade-shot vector vector float (pointer metalhead-grenade-shot))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; los-control                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *los-time-offset* object) ;; time-frame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enemy-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ragdoll-test                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ragdoll-test (process-focusable)
  ((ragdoll-proc uint64  :offset-assert 208)
   )
  :method-count-assert 33
  :size-assert         #xd8
  :flag-assert         #x21006000d8
  (:state-methods
    idle ;; 32
    freefall ;; 31
    freefall-reform ;; 30
    tweak ;; 29
    reform ;; 28
    )
  )
|#

;; (define-extern *ragdoll-test-ragdoll-setup* object)
;; (define-extern ragdoll-test-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; debris                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype debris-static-joint-params (structure)
  ((parent-joint-index int16   :offset-assert 0)
   (group              basic   :offset-assert 4)
   (offset             vector  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype debris-static-params (basic)
  ((joints       basic    :offset-assert 4)
   (collide-spec uint32   :offset-assert 8)
   (sound-hit    uint128  :offset-assert 16)
   (art-level    basic    :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype debris (basic)
  ((root            transformq :inline :offset-assert 16)
   (node-list       basic              :offset-assert 64)
   (draw            basic              :offset-assert 68)
   (duration        float              :offset-assert 72)
   (hit-xz-reaction float              :offset-assert 76)
   (hit-y-reaction  float              :offset-assert 80)
   (prev-pos        vector     :inline :offset-assert 96)
   (gravity         float              :offset-assert 112)
   (rot-axis        vector     :inline :offset-assert 128)
   (rot-angle       float              :offset-assert 144)
   (transv          vector     :inline :offset-assert 160)
   (time-fade-out   uint64             :offset-assert 176)
   (params          basic              :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xbc
  :flag-assert         #x9000000bc
  )
|#

#|
(deftype debris-box (structure)
  ((start uint32               :offset-assert 0)
   (num   uint32               :offset-assert 4)
   (bbox  bounding-box :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype debris-group (process)
  ((dead-debris-num int32      :offset-assert 128)
   (debris-num      int32      :offset-assert 132)
   (debris          basic      :offset-assert 136)
   (max-probe-width float      :offset-assert 140)
   (state-time      uint64     :offset-assert 144)
   (num-boxes       uint32     :offset-assert 152)
   (boxes           UNKNOWN 16 :offset-assert 160)
   )
  :method-count-assert 17
  :size-assert         #x3a0
  :flag-assert         #x11032003a0
  (:methods
    (debris-group-method-15 () none) ;; 15
    (debris-group-method-16 () none) ;; 16
    )
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype debris-tuning (structure)
  ((explosion                   uint64         :offset-assert 0)
   (duration                    uint64         :offset-assert 8)
   (gravity                     float          :offset-assert 16)
   (rot-speed                   float          :offset-assert 20)
   (bounds-inflate              float          :offset-assert 24)
   (max-probe-width             float          :offset-assert 28)
   (max-probe-height            float          :offset-assert 32)
   (max-probe-depth             float          :offset-assert 36)
   (fountain-rand-transv-lo     vector :inline :offset-assert 48)
   (fountain-rand-transv-hi     vector :inline :offset-assert 64)
   (away-from-focal-pt          vector :inline :offset-assert 48)
   (away-from-rand-transv-xz-lo float          :offset-assert 64)
   (away-from-rand-transv-xz-hi float          :offset-assert 68)
   (away-from-rand-transv-y-lo  float          :offset-assert 72)
   (away-from-rand-transv-y-hi  float          :offset-assert 76)
   (hit-xz-reaction             float          :offset-assert 80)
   (hit-y-reaction              float          :offset-assert 84)
   (scale-rand-lo               float          :offset-assert 88)
   (scale-rand-hi               float          :offset-assert 92)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

;; (define-extern debris-group-init-by-other function)
;; (define-extern debris-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shield-sphere                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shield-sphere-heat (structure)
  ((current-heat-value float   :offset-assert 0)
   (damage-scalar      float   :offset-assert 4)
   (last-heat-time     uint64  :offset-assert 8)
   (distort-handle     uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype shield-sphere-toggle (structure)
  ((enable-time  uint64  :offset-assert 0)
   (disable-time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype shield-sphere (process-focusable)
  ((owner                uint64                       :offset-assert 208)
   (sphere-size          float                        :offset-assert 216)
   (offset-vec           vector               :inline :offset-assert 224)
   (enabled?             basic                        :offset-assert 240)
   (shield-type          uint8                        :offset-assert 244)
   (track-joint          int32                        :offset-assert 248)
   (heat-info            shield-sphere-heat   :inline :offset-assert 256)
   (toggle-info          shield-sphere-toggle :inline :offset-assert 256)
   (last-attack-time     uint64                       :offset-assert 280)
   (last-attack-id       uint32                       :offset-assert 288)
   (persistent-attack-id uint32                       :offset-assert 292)
   )
  :method-count-assert 43
  :size-assert         #x128
  :flag-assert         #x2b00b00128
  (:methods
    (shield-sphere-method-32 () none) ;; 32
    (shield-sphere-method-33 () none) ;; 33
    (shield-sphere-method-34 () none) ;; 34
    (shield-sphere-method-35 () none) ;; 35
    (shield-sphere-method-36 () none) ;; 36
    (shield-sphere-method-37 () none) ;; 37
    (shield-sphere-method-38 () none) ;; 38
    (shield-sphere-method-39 () none) ;; 39
    (shield-sphere-method-40 () none) ;; 40
    (shield-sphere-method-41 () none) ;; 41
    (shield-sphere-method-42 () none) ;; 42
    )
  (:state-methods
    die ;; 31
    explode ;; 30
    shield-disabled ;; 29
    shield-enabled ;; 28
    )
  )
|#

#|
(deftype shield-sphere-spawn-params (structure)
  ((offset-vec      vector :inline :offset-assert 0)
   (owner           uint64         :offset-assert 16)
   (sphere-size     float          :offset-assert 24)
   (shield-type     uint8          :offset-assert 28)
   (track-joint     int32          :offset-assert 32)
   (enable-time     uint64         :offset-assert 40)
   (disable-time    uint64         :offset-assert 48)
   (shield-strength int8           :offset-assert 56)
   (pad             int16          :offset-assert 58)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )
|#

#|
(deftype shield-sphere-distort (process-drawable)
  ((owner       uint64  :offset-assert 200)
   (sphere-size float   :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xd4
  :flag-assert         #x17006000d4
  (:state-methods
    inactive ;; 20
    distort ;; 21
    die ;; 22
    )
  )
|#

#|
(deftype shield-sphere-distort-spawn-params (structure)
  ((owner       uint64  :offset-assert 0)
   (sphere-size float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

;; (define-extern shield-sphere-distort-init-by-other function)
;; (define-extern *shield-sphere-exploder-params* joint-exploder-static-params)
;; (define-extern shield-sphere-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-bush-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *bb-ring-alpha* object)
;; (define-extern spt-func-bb-ring-fader function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-bush                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-desert-bbush-ring (task-manager)
  ((actor-group       uint32  :offset-assert 236)
   (actor-group-count int32   :offset-assert 240)
   (current-ring      int32   :offset-assert 244)
   )
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  (:methods
    (task-manager-desert-bbush-ring-method-32 () none) ;; 32
    (task-manager-desert-bbush-ring-method-33 () none) ;; 33
    )
  (:state-methods
    fail ;; 18
    active ;; 15
    resolution ;; 17
    )
  )
|#

#|
(deftype task-manager-desert-bbush-ring-2 (task-manager-desert-bbush-ring)
  ()
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  )
|#

#|
(deftype task-manager-desert-bbush-ring-3 (task-manager-desert-bbush-ring)
  ()
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  )
|#

#|
(deftype task-manager-desert-bbush-ring-4 (task-manager-desert-bbush-ring)
  ()
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  )
|#

#|
(deftype task-manager-desert-bbush-ring-5 (task-manager-desert-bbush-ring)
  ()
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  )
|#

#|
(deftype task-manager-desert-bbush-ring-6 (task-manager-desert-bbush-ring)
  ()
  :method-count-assert 34
  :size-assert         #xfc
  :flag-assert         #x22008000fc
  )
|#

#|
(deftype desert-chase-ring (process-drawable)
  ((mat          matrix             :inline :offset-assert 208)
   (taskman      uint64                     :offset-assert 272)
   (turbo-handle uint64                     :offset-assert 280)
   (alt-actor    basic                      :offset-assert 288)
   (ring-radius  float                      :offset-assert 292)
   (minimap      connection-minimap         :offset-assert 296)
   (is-final?    basic                      :offset-assert 300)
   (part-final   basic                      :offset-assert 304)
   )
  :method-count-assert 24
  :size-assert         #x134
  :flag-assert         #x1800c00134
  (:methods
    (desert-chase-ring-method-23 () none) ;; 23
    )
  (:state-methods
    die ;; 22
    idle ;; 21
    dormant ;; 20
    )
  )
|#

#|
(deftype spirit (process-drawable)
  ((part-subsampler  basic   :offset-assert 200)
   (sound-id         uint32  :offset-assert 204)
   (sound-id-2       uint32  :offset-assert 208)
   (play-pixie?      basic   :offset-assert 212)
   (goal-part        basic   :offset-assert 216)
   (draw-start-goal? basic   :offset-assert 220)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  (:state-methods
    idle ;; 20
    dormant ;; 21
    explode ;; 22
    )
  )
|#

#|
(deftype hud-spider-killed (hud-goal)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-bbush-egg-spider (task-manager)
  ((actor-group       uint32  :offset-assert 236)
   (actor-group-count int32   :offset-assert 240)
   (goal-score        uint32  :offset-assert 244)
   (hud-score         uint64  :offset-assert 252)
   (hud-goal          uint64  :offset-assert 260)
   )
  :method-count-assert 33
  :size-assert         #x110
  :flag-assert         #x2100900110
  (:methods
    (task-manager-bbush-egg-spider-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    resolution ;; 17
    )
  )
|#

#|
(deftype task-manager-bbush-spirit-chase (task-manager)
  ((actor-group            uint32         :offset-assert 236)
   (actor-group-count      int32          :offset-assert 240)
   (path-pos               float          :offset-assert 244)
   (trans                  vector :inline :offset-assert 252)
   (touched                basic          :offset-assert 268)
   (spirit                 uint64         :offset-assert 276)
   (current-curve-distance float          :offset-assert 284)
   (current-curve-length   float          :offset-assert 288)
   (min-spirit-vel         float          :offset-assert 292)
   (current-spirit-vel     float          :offset-assert 296)
   (high-spirit-vel        float          :offset-assert 300)
   (fail-radius            float          :offset-assert 304)
   (chase-distance         float          :offset-assert 308)
   (start-offset-vel       float          :offset-assert 312)
   (sound-id               uint32         :offset-assert 316)
   )
  :method-count-assert 36
  :size-assert         #x144
  :flag-assert         #x2400d00144
  (:methods
    (task-manager-bbush-spirit-chase-method-32 () none) ;; 32
    (task-manager-bbush-spirit-chase-method-33 () none) ;; 33
    (task-manager-bbush-spirit-chase-method-34 () none) ;; 34
    (task-manager-bbush-spirit-chase-method-35 () none) ;; 35
    )
  (:state-methods
    active ;; 15
    resolution ;; 17
    )
  )
|#

#|
(deftype task-manager-bbush-spirit-chase-2 (task-manager-bbush-spirit-chase)
  ()
  :method-count-assert 36
  :size-assert         #x144
  :flag-assert         #x2400d00144
  )
|#

#|
(deftype task-manager-bbush-spirit-chase-3 (task-manager-bbush-spirit-chase)
  ()
  :method-count-assert 36
  :size-assert         #x144
  :flag-assert         #x2400d00144
  )
|#

#|
(deftype bb-score-a-pickup (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype bb-score-b-pickup (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype bb-score-c-pickup (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype score-drop (process-drawable)
  ((src                 vector     :inline :offset-assert 208)
   (dst                 vector     :inline :offset-assert 224)
   (pickup-radius       float              :offset-assert 240)
   (score               uint32             :offset-assert 244)
   (score-pickup-radius float              :offset-assert 248)
   (bb-score-type       uint8              :offset-assert 252)
   (traj                trajectory :inline :offset-assert 256)
   )
  :method-count-assert 23
  :size-assert         #x128
  :flag-assert         #x1700b00128
  (:state-methods
    die ;; 22
    idle ;; 20
    dormant ;; 21
    )
  )
|#

#|
(deftype task-manager-bbush-spirit-drop (task-manager)
  ((actor-group                  uint32          :offset-assert 236)
   (actor-group-count            int32           :offset-assert 240)
   (path-pos                     float           :offset-assert 244)
   (trans                        vector  :inline :offset-assert 252)
   (touched                      basic           :offset-assert 268)
   (spirit                       uint64          :offset-assert 276)
   (score-drop-handles           UNKNOWN 64      :offset-assert 284)
   (score-drop-num               int32           :offset-assert 796)
   (current-curve-distance       float           :offset-assert 800)
   (current-curve-length         float           :offset-assert 804)
   (goal-score                   uint32          :offset-assert 808)
   (current-score                uint32          :offset-assert 812)
   (score-drop-activation-radius float           :offset-assert 816)
   (min-spirit-vel               float           :offset-assert 820)
   (high-spirit-vel              float           :offset-assert 824)
   (current-spirit-vel           float           :offset-assert 828)
   (fail-radius                  float           :offset-assert 832)
   (hud-score                    uint64          :offset-assert 836)
   (hud-goal                     uint64          :offset-assert 844)
   )
  :method-count-assert 39
  :size-assert         #x358
  :flag-assert         #x2702e00358
  (:methods
    (task-manager-bbush-spirit-drop-method-32 () none) ;; 32
    (task-manager-bbush-spirit-drop-method-33 () none) ;; 33
    (task-manager-bbush-spirit-drop-method-34 () none) ;; 34
    (task-manager-bbush-spirit-drop-method-35 () none) ;; 35
    (task-manager-bbush-spirit-drop-method-36 () none) ;; 36
    (task-manager-bbush-spirit-drop-method-37 () none) ;; 37
    (task-manager-bbush-spirit-drop-method-38 () none) ;; 38
    )
  (:state-methods
    active ;; 15
    resolution ;; 17
    )
  )
|#

;; (define-extern *tex-level-list* array)
;; (define-extern find-level-name function)
;; (define-extern set-ring-particle-texture function)
;; (define-extern *des-ring-times* array)
;; (define-extern *bb-fail* object)
;; (define-extern *bbush-ring-6-kg-squad-member-settings* object)
;; (define-extern desert-chase-ring-cleared? function)
;; (define-extern spirit-init-by-other function)
;; (define-extern bb-score-type->string function)
;; (define-extern score-drop-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; grunt                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype grunt-anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype grunt-global-info (basic)
  ((patrol-anim grunt-anim-info 4 :offset-assert 4) ;; guessed by decompiler
   (charge-anim grunt-anim-info 3 :offset-assert 36) ;; guessed by decompiler
   (attack-anim grunt-anim-info 2 :offset-assert 60) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )
|#

#|
(deftype grunt (nav-enemy)
  ((patrol-anim            grunt-anim-info            :offset-assert 620)
   (charge-anim            grunt-anim-info            :offset-assert 624)
   (attack-anim            grunt-anim-info            :offset-assert 628)
   (intro-path             path-control               :offset-assert 632) ;; guessed by decompiler
   (use-charge-anim-index  int8                       :offset-assert 640)
   (jumping-ambush-path-pt int8                       :offset-assert 641)
   (grunt-flags            uint8                      :offset-assert 642)
   (state-timeout2         uint64                     :offset-assert 648)
   (next-warn-time         uint64                     :offset-assert 656) ;; time-frame
   (dest                   vector             :inline :offset-assert 672)
   (focus-pos              vector             :inline :offset-assert 352)
   (minimap                connection-minimap         :offset-assert 704)
   )
  :method-count-assert 198
  :size-assert         #x2c4
  :flag-assert         #xc6025002c4
  (:methods
    (grunt-method-196 () none) ;; 196
    (grunt-method-197 () none) ;; 197
    )
  (:state-methods
    knocked-recover ;; 32
    stop-chase ;; 158
    circling ;; 157
    pacing ;; 156
    spin-attack ;; 195
    wait-for-focus ;; 194
    hostile ;; 38
    attack ;; 190
    active ;; 34
    jumping-ambush-cont ;; 193
    jumping-ambush ;; 192
    falling-ambush ;; 191
    )
  )
|#

;; (define-extern *grunt-global-info* grunt-global-info) ;; grunt-global-info
;; (define-extern *grunt-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; battle                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype battle-info (basic)
  ((id                                int8          :offset-assert 4)
   (notice-spec                       uint64        :offset-assert 8)
   (pick-logic                        int8          :offset-assert 16)
   (notice-distance                   float         :offset-assert 20)
   (dont-spawn-initial-until-notice?  symbol        :offset-assert 24) ;; guessed by decompiler
   (play-battle-music                 symbol        :offset-assert 28) ;; guessed by decompiler
   (min-battle-spawn-delay            uint32        :offset-assert 32)
   (max-battle-spawn-delay            uint32        :offset-assert 36)
   (min-spawner-notice-attack-delay   uint32        :offset-assert 40)
   (max-spawner-notice-attack-delay   uint32        :offset-assert 44)
   (spawner-blocked-by-player-xz      float         :offset-assert 48)
   (spawner-blocked-by-collide-radius float         :offset-assert 52)
   (pick-spawner-max-dist             float         :offset-assert 56)
   (max-count                         uint32        :offset-assert 60)
   (desired-alive-count               uint8         :offset-assert 64)
   (spawner-collide-with              collide-spec  :offset-assert 68) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )
|#

#|
(deftype battle-ally (structure)
  ((entity entity-actor  :offset-assert 0) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype battle-ally-array (inline-array-class)
  ((data battle-ally :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype battle-breed (structure)
  ((breed-type type   :offset-assert 0) ;; guessed by decompiler
   (percent    float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype battle-breed-array (inline-array-class)
  ((data battle-breed :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype battle-spawner (structure)
  ((flags               uint64                     :offset-assert 0) ;; battle-spawner-flags
   (entity              entity-actor               :offset-assert 8) ;; guessed by decompiler
   (breeds              battle-breed-array         :offset-assert 12) ;; guessed by decompiler
   (creature-index      int8                       :offset-assert 16)
   (ready-index         int8                       :offset-assert 17)
   (attack-index        int8                       :offset-assert 18)
   (mode                uint8                      :offset-assert 19)
   (intro-path          path-control               :offset-assert 20) ;; guessed by decompiler
   (notice-attack-delay uint32                     :offset-assert 24)
   (creature            uint64                     :offset-assert 32) ;; handle
   (last-spawn-time     uint64                     :offset-assert 40) ;; time-frame
   (noticed-attack-time uint64                     :offset-assert 48) ;; time-frame
   (attack-pos          vector             :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
|#

#|
(deftype battle-spawner-array (inline-array-class)
  ((data battle-spawner :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype battle (process-drawable)
  ((info                     battle-info           :offset-assert 200) ;; guessed by decompiler
   (flags                    uint8                 :offset-assert 204) ;; battle-flags
   (spawn-initial-creatures? symbol                :offset-assert 208) ;; guessed by decompiler
   (next-spawn-delay         uint32                :offset-assert 212)
   (on-notice                basic                 :offset-assert 216)
   (on-hostile               basic                 :offset-assert 220)
   (on-beaten                basic                 :offset-assert 224)
   (max-count                uint32                :offset-assert 228)
   (count                    uint32                :offset-assert 232)
   (die-count                uint32                :offset-assert 236)
   (stat-child-count         uint16                :offset-assert 240)
   (cant-spawn-time          uint64                :offset-assert 248) ;; time-frame
   (jammed-starting-time     uint64                :offset-assert 256) ;; time-frame
   (spawners                 battle-spawner-array  :offset-assert 264) ;; guessed by decompiler
   (allies                   battle-ally-array     :offset-assert 268) ;; guessed by decompiler
   )
  :method-count-assert 53
  :size-assert         #x110
  :flag-assert         #x3500900110
  ;; field on-notice uses ~A with a signed load. field on-hostile uses ~A with a signed load. field on-beaten uses ~A with a signed load.
  (:methods
    (battle-method-21 () none) ;; 21 ;; (battle-state-21 () _type_ :state)
    (battle-method-25 () none) ;; 25 ;; (spawner-blocked? (_type_ battle-spawner) symbol)
    (battle-method-26 () none) ;; 26 ;; (spawner-blocked-by-collide? (_type_ battle-spawner) symbol)
    (battle-method-27 () none) ;; 27 ;; (draw-battle-marks (_type_) none)
    (battle-method-28 () none) ;; 28 ;; (initialize-enemy-lists (_type_) none)
    (battle-method-29 () none) ;; 29 ;; (initialize-spawner-breeds (_type_ battle-spawner entity-actor) none)
    (battle-method-30 () none) ;; 30 ;; (get-spawner-for-enemy (_type_ process) battle-spawner)
    (battle-method-31 () none) ;; 31 ;; (initialize-ally (_type_ battle-ally entity-actor) none)
    (battle-method-32 () none) ;; 32 ;; (initialize-spawner (_type_ battle-spawner entity-actor) none)
    (battle-method-33 () none) ;; 33 ;; (initialize-battle (_type_) none)
    (battle-method-34 () none) ;; 34 ;; (init-go (_type_) int)
    (battle-method-35 () none) ;; 35 ;; (get-spawn-delay (_type_) int)
    (battle-method-36 () none) ;; 36 ;; (get-best-spawner (_type_) battle-spawner)
    (battle-method-37 () none) ;; 37 ;; (spawner-free? (_type_ battle-spawner) symbol)
    (battle-method-38 () none) ;; 38 ;; (spawn-from-breed (_type_ battle-breed enemy-init-by-other-params) handle)
    (battle-method-39 () none) ;; 39 ;; (spawn-from-spawner (_type_ battle-spawner symbol) none)
    (battle-method-40 () none) ;; 40 ;; (spawn-initial-creatures (_type_) none)
    (battle-method-41 () none) ;; 41 ;; (get-random-breed (_type_ battle-spawner) battle-breed)
    (battle-method-42 () none) ;; 42 ;; (spawner-hit (_type_ battle-spawner process) symbol)
    (battle-method-43 () none) ;; 43 ;; (spawner-try-jump (_type_ battle-spawner enemy) symbol)
    (battle-method-44 () none) ;; 44 ;; (spawner-do-jump (_type_ battle-spawner) int)
    (battle-method-45 () none) ;; 45 ;; (spawner-hittable? (_type_ battle-spawner) symbol)
    (battle-method-46 () none) ;; 46 ;; (spawner-in-intro? (_type_ battle-spawner) symbol)
    (battle-method-47 () none) ;; 47 ;; (set-battle-music (_type_) none)
    (battle-method-48 () none) ;; 48 ;; (unset-battle-music (_type_) none)
    (battle-method-49 () none) ;; 49 ;; (update-allies-list (_type_) int)
    (battle-method-50 () none) ;; 50 ;; (beaten? (_type_) symbol)
    (battle-method-51 () none) ;; 51 ;; (spawner-active? (_type_ battle-spawner symbol) symbol)
    (battle-method-52 () none) ;; 52 ;; (spawner-active-count (_type_) int)
    )
  (:state-methods
    beaten ;; 24, old: (beaten () _type_ :state)
    hostile ;; 23, old: (hostile () _type_ :state)
    notice ;; 22, old: (notice () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern *battles* array) ;; (array battle-info)
;; (define-extern battle-event-handler function) ;; (function process int symbol event-message-block object :behavior battle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-formation-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype form-search-info (structure)
  ((form           uint32                   :offset-assert 0) ;; guessed by decompiler
   (count          int32                    :offset-assert 4)
   (pos-table      (inline-array vector)    :offset-assert 8) ;; guessed by decompiler
   (actor-position vector                16 :offset-assert 16) ;; guessed by decompiler
   (actor-valid?   symbol                16 :offset-assert 272) ;; guessed by decompiler
   (index-table    uint32                16 :offset-assert 336) ;; guessed by decompiler
   (dest-pos-table vector                16 :offset-assert 400) ;; guessed by decompiler
   (best-mapping   uint32                16 :offset-assert 656) ;; guessed by decompiler
   (best-cost      float                    :offset-assert 720)
   )
  :method-count-assert 9
  :size-assert         #x2d4
  :flag-assert         #x9000002d4
  )
|#

#|
(deftype hover-actor (structure)
  ((handle uint64         :offset-assert 0) ;; handle
   (offset vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype hover-formation-control (basic)
  ((search-info    form-search-info :inline :offset-assert 16)
   (entity         entity                   :offset-assert 740) ;; guessed by decompiler
   (anchor-proc    uint64                   :offset-assert 744) ;; handle
   (actor-table    handle           16      :offset-assert 752) ;; guessed by decompiler
   (flags          uint16                   :offset-assert 880)
   (formation-type uint64                   :offset-assert 888) ;; formation-type
   (center         vector           :inline :offset-assert 896)
   (zone-to-world  matrix           :inline :offset-assert 912)
   (world-to-zone  matrix           :inline :offset-assert 976)
   (offset         vector           2       :offset-assert 1040) ;; guessed by decompiler
   (focus-quat     quaternion       :inline :offset-assert 1072)
   (notice-dist    float                    :offset-assert 1088) ;; meters
   (rotation-inc   float                    :offset-assert 1092)
   (sub-graph-mask int32                    :offset-assert 1096)
   )
  :method-count-assert 21
  :size-assert         #x44c
  :flag-assert         #x150000044c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type object entity float vector float handle) _type_)
    (hover-formation-control-method-9 () none) ;; 9 ;; (set-anchor-proc (_type_ handle) int)
    (hover-formation-control-method-10 () none) ;; 10 ;; (hover-formation-control-method-10 (_type_ vector vector float) symbol)
    (hover-formation-control-method-11 () none) ;; 11 ;; (hover-formation-control-method-11 (_type_) int)
    (hover-formation-control-method-12 () none) ;; 12 ;; (is-formation-type-in-range (_type_) symbol)
    (hover-formation-control-method-13 () none) ;; 13 ;; (hover-formation-control-method-13 (_type_ vector) vector)
    (hover-formation-control-method-14 () none) ;; 14 ;; (hover-formation-control-method-14 (_type_) none)
    (hover-formation-control-method-15 () none) ;; 15 ;; (hover-formation-control-method-15 (_type_ vector vector) vector)
    (hover-formation-control-method-16 () none) ;; 16 ;; (hover-formation-control-method-16 (_type_) object)
    (hover-formation-control-method-17 () none) ;; 17 ;; (hover-formation-control-method-17 (_type_ process) int)
    (hover-formation-control-method-18 () none) ;; 18 ;; (hover-formation-control-method-18 (_type_ process) int)
    (hover-formation-control-method-19 () none) ;; 19 ;; (try-update-formation-type (_type_ formation-type) int)
    (hover-formation-control-method-20 () none) ;; 20 ;; (hover-formation-control-method-20 (_type_ object object) none)
    )
  )
|#

#|
(deftype hover-formation (process)
  ((formation       hover-formation-control  :offset-assert 128) ;; guessed by decompiler
   (path            path-control             :offset-assert 132) ;; guessed by decompiler
   (formation-timer uint64                   :offset-assert 136)
   )
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  (:methods
    (hover-formation-method-14 () none) ;; 14 ;; (idle () _type_ :state)
    (hover-formation-method-15 () none) ;; 15 ;; (hover-formation-method-15 (_type_ vector vector) int)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-control-h            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-network-adjacency (structure)
  ((index int32  :offset-assert 0)
   (dist  float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype nav-network-adjacency-array (inline-array-class)
  ((data nav-network-adjacency :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype list-node (structure)
  ((next list-node  :offset-assert 0)
   (prev list-node  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype nav-network-path-node (list-node)
  ((row-index     int32                  :offset-assert 8)
   (status        net-path-node-status   :offset-assert 12)
   (parent        nav-network-path-node  :offset-assert 16)
   (cost-to-start float                  :offset-assert 20)
   (cost-to-end   float                  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  ;; field net-path-node-status is likely a value type.
  )
|#

#|
(deftype nav-network-info (structure)
  ((path-node nav-network-path-node                :inline :offset-assert 0)
   (pos       vector                               :inline :offset-assert 32)
   (index     int32                                        :offset-assert 48)
   (sub-graph int32                                        :offset-assert 52)
   (count     int32                                        :offset-assert 56)
   (adjacency (inline-array nav-network-adjacency)         :offset-assert 60) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype nav-network-info-array (inline-array-class)
  ((data nav-network-info :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-network-edge (structure)
  ((start-index int32  :offset-assert 0)
   (end-index   int32  :offset-assert 4)
   (radius      float  :offset-assert 8)
   (sub-graph   int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype hover-nav-sphere (list-node)
  ((sphere sphere :inline :offset-assert 16)
   (handle uint64         :offset-assert 32) ;; handle
   (timer  uint64         :offset-assert 40) ;; time-frame
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype hover-nav-path-segment (list-node)
  ((curve-matrix matrix :inline :offset-assert 16)
   (pos-index    float  2       :offset-assert 80) ;; guessed by decompiler
   (dist         float          :offset-assert 88)
   (du           float          :offset-assert 92)
   )
  :method-count-assert 10
  :size-assert         #x60
  :flag-assert         #xa00000060
  (:methods
    (hover-nav-path-segment-method-9 () none) ;; 9 ;; (hover-nav-path-segment-method-9 (_type_ float) none)
    )
  )
|#

#|
(deftype hover-nav-path-info (structure)
  ((segment-list hover-nav-path-segment  :offset-assert 0)
   (tail-segment hover-nav-path-segment  :offset-assert 4)
   (curr-segment hover-nav-path-segment  :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (hover-nav-path-info-method-9 () none) ;; 9 ;; (hover-nav-path-info-method-9 (_type_) none)
    )
  )
|#

#|
(deftype nav-network-data (structure)
  ((node-array basic  :offset-assert 0)
   (edge-array basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype path-index-array (inline-array-class)
  ((data hover-nav-path-info :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype nav-network (basic)
  ((network           (array nav-network-info)           :offset-assert 4) ;; guessed by decompiler
   (edge              basic                              :offset-assert 8)
   (control-handle    uint64                             :offset-assert 16) ;; handle
   (list-table        list-node                        5 :offset-assert 32) ;; guessed by decompiler
   (open-list         nav-network-path-node              :offset-assert 32)
   (closed-list       nav-network-path-node              :offset-assert 36)
   (sphere-list       hover-nav-sphere                   :offset-assert 44)
   (free-segment-list hover-nav-path-segment             :offset-assert 40)
   (free-sphere-list  hover-nav-sphere                   :offset-assert 48)
   (segment-pool      (pointer hover-nav-path-segment)   :offset-assert 52) ;; guessed by decompiler
   (sphere-pool       (pointer hover-nav-sphere)         :offset-assert 56) ;; guessed by decompiler
   )
  :method-count-assert 38
  :size-assert         #x3c
  :flag-assert         #x260000003c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (nav-network-method-9 () none) ;; 9 ;; (nav-network-method-9 (_type_) none)
    (nav-network-method-10 () none) ;; 10 ;; (nav-network-method-10 (_type_ level (array nav-network-info)) none)
    (nav-network-method-11 () none) ;; 11 ;; (nav-network-method-11 (_type_) none)
    (nav-network-method-12 () none) ;; 12 ;; (nav-network-method-12 (_type_) none)
    (nav-network-method-13 () none) ;; 13 ;; (nav-network-method-13 (_type_ int nav-network-path-node) none)
    (nav-network-method-14 () none) ;; 14 ;; (nav-network-method-14 (_type_ int nav-network-path-node) object)
    (nav-network-method-15 () none) ;; 15 ;; (nav-network-method-15 (_type_ nav-network-path-node) object)
    (nav-network-method-16 () none) ;; 16 ;; (nav-network-method-16 (_type_ nav-network-path-node) none)
    (nav-network-method-17 () none) ;; 17 ;; (nav-network-method-17 (_type_) nav-network-path-node)
    (nav-network-method-18 () none) ;; 18 ;; (nav-network-method-18 (_type_ nav-network-path-node) none)
    (nav-network-method-19 () none) ;; 19 ;; (nav-network-method-19 (_type_ nav-network-path-node) none)
    (nav-network-method-20 () none) ;; 20 ;; (nav-network-method-20 (_type_ nav-network-path-node vector) none)
    (nav-network-method-21 () none) ;; 21 ;; (nav-network-method-21 (_type_ object int int) none)
    (nav-network-method-22 () none) ;; 22 ;; (nav-network-method-22 (_type_ hover-nav-path-info vector vector int int) hover-nav-path-segment)
    (nav-network-method-23 () none) ;; 23 ;; (nav-network-method-23 (_type_ hover-nav-path-info) none)
    (nav-network-method-24 () none) ;; 24 ;; (nav-network-method-24 (_type_ hover-nav-path-info int int int) symbol)
    (nav-network-method-25 () none) ;; 25 ;; (nav-network-method-25 (_type_ process collide-prim-core) none)
    (nav-network-method-26 () none) ;; 26 ;; (nav-network-method-26 (_type_ vector process vector vector float) vector)
    (nav-network-method-27 () none) ;; 27 ;; (nav-network-method-27 (_type_) none)
    (nav-network-method-28 () none) ;; 28 ;; (nav-network-method-28 (_type_) none)
    (nav-network-method-29 () none) ;; 29 ;; (nav-network-method-29 (_type_) symbol)
    (nav-network-method-30 () none) ;; 30 ;; (get-network (_type_) (array nav-network-info))
    (nav-network-method-31 () none) ;; 31 ;; (nav-network-method-31 (_type_ bounding-box) none)
    (nav-network-method-32 () none) ;; 32 ;; (nav-network-method-32 (_type_ string) none)
    (nav-network-method-33 () none) ;; 33
    (nav-network-method-34 () none) ;; 34
    (nav-network-method-35 () none) ;; 35
    (nav-network-method-36 () none) ;; 36
    (nav-network-method-37 () none) ;; 37
    )
  )
|#

#|
(deftype hover-nav-params (structure)
  ((max-speed              float  :offset-assert 0)
   (max-acceleration       float  :offset-assert 4)
   (max-rotation-rate      float  :offset-assert 8)
   (friction               float  :offset-assert 12)
   (nav-collide-prim-index int32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype hover-fixed-path-info (structure)
  ((path          basic  :offset-assert 0)
   (start-index   int32  :offset-assert 4)
   (end-index     int32  :offset-assert 8)
   (current-index int32  :offset-assert 12)
   (step          int32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype hover-nav-control (basic)
  ((root                        collide-shape-moving          :offset-assert 4) ;; guessed by decompiler
   (fixed-path-info             hover-fixed-path-info :inline :offset-assert 8)
   (path-info                   hover-nav-path-info   :inline :offset-assert 28)
   (transvv                     vector                :inline :offset-assert 48)
   (dest-pos                    vector                :inline :offset-assert 64)
   (dest-vel                    vector                :inline :offset-assert 80)
   (dest-move-dir               vector                :inline :offset-assert 96)
   (dest-offset                 vector                :inline :offset-assert 112)
   (move-dir                    vector                :inline :offset-assert 128)
   (nav-collide-impulse         vector                :inline :offset-assert 144)
   (nav                         nav-network                   :offset-assert 160) ;; guessed by decompiler
   (flags                       uint16                        :offset-assert 164) ;; hover-nav-flags
   (params                      hover-nav-params              :offset-assert 168)
   (path-timer                  uint64                        :offset-assert 176) ;; time-frame
   (sub-graph                   int32                         :offset-assert 184)
   (nav-collide-impulse-len     float                         :offset-assert 188)
   (dest-speed                  float                         :offset-assert 192)
   (local-dist                  float                         :offset-assert 196)
   (speed                       float                         :offset-assert 200)
   (max-los-speed               float                         :offset-assert 204)
   (target-speed                float                         :offset-assert 208)
   (target-acceleration         float                         :offset-assert 212)
   (u-param                     float                         :offset-assert 216)
   (speed-dest                  float                         :offset-assert 220)
   (curr-dest-pt                int32                         :offset-assert 224)
   (max-speed-multiplier        float                         :offset-assert 228)
   (max-acceleration-multiplier float                         :offset-assert 232)
   )
  :method-count-assert 35
  :size-assert         #xec
  :flag-assert         #x23000000ec
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type process collide-shape-moving hover-nav-params) _type_)
    (hover-nav-control-method-9 () none) ;; 9 ;; (hover-nav-control-method-9 (_type_) none)
    (hover-nav-control-method-10 () none) ;; 10 ;; (hover-nav-control-method-10 (_type_ vector vector vector) none)
    (hover-nav-control-method-11 () none) ;; 11 ;; (hover-nav-control-method-11 (_type_ vector) none)
    (hover-nav-control-method-12 () none) ;; 12 ;; (hover-nav-control-method-12 (_type_) none)
    (hover-nav-control-method-13 () none) ;; 13 ;; (hover-nav-control-method-13 (_type_) none)
    (hover-nav-control-method-14 () none) ;; 14 ;; (hover-nav-control-method-14 (_type_ float float) none)
    (hover-nav-control-method-15 () none) ;; 15 ;; (hover-nav-control-method-15 (_type_ vector) none)
    (hover-nav-control-method-16 () none) ;; 16 ;; (hover-nav-control-method-16 (_type_ vector) vector)
    (hover-nav-control-method-17 () none) ;; 17 ;; (hover-nav-control-method-17 (_type_) collide-prim-core)
    (hover-nav-control-method-18 () none) ;; 18 ;; (hover-nav-control-method-18 (_type_ path-control int int) none)
    (hover-nav-control-method-19 () none) ;; 19 ;; (hover-nav-control-method-19 (_type_ (inline-array vector) int) none)
    (hover-nav-control-method-20 () none) ;; 20 ;; (hover-nav-control-method-20 (_type_) none)
    (hover-nav-control-method-21 () none) ;; 21 ;; (hover-nav-control-method-21 (_type_) none)
    (hover-nav-control-method-22 () none) ;; 22 ;; (hover-nav-control-method-22 (_type_) hover-nav-path-segment)
    (hover-nav-control-method-23 () none) ;; 23 ;; (hover-nav-control-method-23 (_type_) object)
    (hover-nav-control-method-24 () none) ;; 24 ;; (hover-nav-control-method-24 (_type_) none)
    (hover-nav-control-method-25 () none) ;; 25 ;; (hover-nav-control-method-25 (_type_) none)
    (hover-nav-control-method-26 () none) ;; 26 ;; (hover-nav-control-method-26 (_type_ vector vector float) symbol)
    (hover-nav-control-method-27 () none) ;; 27 ;; (hover-nav-control-method-27 (_type_ vector vector) int)
    (hover-nav-control-method-28 () none) ;; 28 ;; (hover-nav-control-method-28 (_type_ vector vector) none)
    (hover-nav-control-method-29 () none) ;; 29 ;; (hover-nav-control-method-29 (_type_ vector) none)
    (hover-nav-control-method-30 () none) ;; 30 ;; (hover-nav-control-method-30 (_type_) float)
    (hover-nav-control-method-31 () none) ;; 31 ;; (hover-nav-control-method-31 (_type_) float)
    (hover-nav-control-method-32 () none) ;; 32
    (hover-nav-control-method-33 () none) ;; 33
    (hover-nav-control-method-34 () none) ;; 34
    )
  )
|#

;; (define-extern *debug-hover* object) ;; symbol
;; (define-extern *dummy-adjacency* object)
;; (define-extern *hover-nav-time-offset* object) ;; int

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-enemy-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hover-enemy-info (structure)
  ((fly-forward-anim    int32  :offset-assert 0)
   (fly-backward-anim   int32  :offset-assert 4)
   (fly-left-anim       int32  :offset-assert 8)
   (fly-right-anim      int32  :offset-assert 12)
   (shoot-anim          int32  :offset-assert 16)
   (main-joint          int32  :offset-assert 20)
   (gun-base            int32  :offset-assert 24)
   (engine-left         int32  :offset-assert 28)
   (engine-right        int32  :offset-assert 32)
   (thrust-rotate-left  float  :offset-assert 36)
   (thrust-rotate-right float  :offset-assert 40)
   (hover-y-offset      float  :offset-assert 44)
   (hover-xz-offset     float  :offset-assert 48)
   (use-flying-death    basic  :offset-assert 52)
   (fly-x-anim-seek     float  :offset-assert 56)
   (fly-z-anim-seek     float  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype hover-enemy (enemy)
  ((los                        los-control       :inline :offset-assert 560)
   (main-joint-movement        UNKNOWN           3       :offset-assert 736)
   (rotation-vec               vector            :inline :offset-assert 784)
   (dest-pos                   vector            :inline :offset-assert 800)
   (offset                     vector            :inline :offset-assert 816)
   (surface-normal             vector            :inline :offset-assert 832)
   (local-dir                  vector            :inline :offset-assert 848)
   (hover                      hover-nav-control         :offset-assert 864) ;; guessed by decompiler
   (hover-info                 hover-enemy-info          :offset-assert 868)
   (formation-entity           entity                    :offset-assert 872) ;; guessed by decompiler
   (fly-anim-speed             float                     :offset-assert 876)
   (restart-fly-anims          symbol                    :offset-assert 880) ;; guessed by decompiler
   (thrust                     float             2       :offset-assert 884) ;; guessed by decompiler
   (scale                      float                     :offset-assert 892)
   (scale-timer                uint64                    :offset-assert 896)
   (hover-id                   int32                     :offset-assert 904)
   (hit-surface?               symbol                    :offset-assert 908) ;; guessed by decompiler
   (knocked-start-level        float                     :offset-assert 912)
   (knocked-fall-dist          float                     :offset-assert 916)
   (flying-death-anim          int32                     :offset-assert 920)
   (flying-death-transv        vector            :inline :offset-assert 928)
   (flying-death-engine        int32                     :offset-assert 944)
   (flying-death-thrust-rotate float                     :offset-assert 948)
   (flying-death-spin          float                     :offset-assert 952)
   (flying-death-spin-dest     float                     :offset-assert 956)
   (flying-death-spin-axis     vector            :inline :offset-assert 960)
   )
  :method-count-assert 177
  :size-assert         #x3d0
  :flag-assert         #xb1035003d0
  (:methods
    (hover-enemy-method-155 () none) ;; 155 ;; (hover-enemy-method-155 (_type_) none)
    (hover-enemy-method-156 () none) ;; 156
    (hover-enemy-method-157 () none) ;; 157
    (hover-enemy-method-158 () none) ;; 158
    (hover-enemy-method-159 () none) ;; 159
    (hover-enemy-method-160 () none) ;; 160
    (hover-enemy-method-161 () none) ;; 161
    (hover-enemy-method-162 () none) ;; 162
    (hover-enemy-method-163 () none) ;; 163
    (hover-enemy-method-164 () none) ;; 164
    (hover-enemy-method-165 () none) ;; 165
    (hover-enemy-method-166 () none) ;; 166
    (hover-enemy-method-167 () none) ;; 167
    (hover-enemy-method-168 () none) ;; 168
    (hover-enemy-method-169 () none) ;; 169
    (hover-enemy-method-170 () none) ;; 170
    (hover-enemy-method-171 () none) ;; 171
    (hover-enemy-method-172 () none) ;; 172
    (hover-enemy-method-173 () none) ;; 173
    (hover-enemy-method-174 () none) ;; 174
    (hover-enemy-method-175 () none) ;; 175
    (hover-enemy-method-176 () none) ;; 176
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-control              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-network-control (process)
  ((nav-network nav-network  :offset-assert 128) ;; guessed by decompiler
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:state-methods
    idle ;; 14, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern nav-network-control-init-by-other function) ;; (function nav-network level none :behavior nav-network-control)
;; (define-extern detect-loop function)
;; (define-extern list-contains function)
;; (define-extern *nav-network* object) ;; nav-network
;; (define-extern hover-bounce-reaction function) ;; (function control-info collide-query vector vector collide-status)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-enemy                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *current-hover-id* object)
;; (define-extern hover-enemy-dest-post function) ;; (function none :behavior hover-enemy)
;; (define-extern hover-enemy-hostile-post function) ;; (function none :behavior hover-enemy)
;; (define-extern hover-enemy-fly-code function) ;; (function none :behavior hover-enemy)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-formation                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gen-perms-context (structure)
  ((num           int32   :offset-assert 0)
   (table         uint32  :offset-assert 4)
   (iterate-count int32   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype flying-formation (hover-formation)
  ()
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000100090
  )
|#

;; (define-extern gen-perms function) ;; (function int (function int int form-search-info uint) (function form-search-info float) form-search-info symbol)
;; (define-extern test-gen-perms function) ;; (function int object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-edit                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hover-nav-bsp-point (list-node)
  ((index int32          :offset-assert 8)
   (pos   vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype hover-nav-bsp-node (structure)
  ((split-plane vector              :inline :offset-assert 0)
   (point-list  hover-nav-bsp-point         :offset-assert 16)
   (left        hover-nav-bsp-node          :offset-assert 20)
   (right       hover-nav-bsp-node          :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (hover-nav-bsp-node-method-9 () none) ;; 9 ;; (hover-nav-bsp-node-method-9 (_type_) none)
    (hover-nav-bsp-node-method-10 () none) ;; 10 ;; (hover-nav-bsp-node-method-10 (_type_ int) none)
    )
  )
|#

#|
(deftype hover-nav-bsp (structure)
  ((root hover-nav-bsp-node  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern probe-for-clear-collision? function) ;; (function vector vector symbol)
;; (define-extern hover-nav-graph-process-points function) ;; (function none)
;; (define-extern hover-nav-graph-output function) ;; (function symbol)
;; (define-extern *axes-table* array) ;; (array vector)
;; (define-extern *hover-bsp* object) ;; hover-nav-bsp
;; (define-extern hover-nav-graph-output-bsp function) ;; (function hover-nav-bsp)
;; (define-extern hover-nav-network-build-bsp function) ;; (function (array hover-nav-bsp-point) hover-nav-bsp)
;; (define-extern hover-nav-bsp-output function) ;; (function hover-nav-bsp none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dp-bipedal-part                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dp-bipedal-shot                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dp-bipedal-grenade-shot (projectile-bounce)
  ((blast-radius float  :offset-assert 548)
   )
  :method-count-assert 44
  :size-assert         #x228
  :flag-assert         #x2c01b00228
  (:state-methods
    dissipate ;; 21
    impact ;; 22
    )
  )
|#

;; (define-extern spawn-dp-bipedal-grenade function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dp-bipedal                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dp-bipedal-shield (shield-sphere)
  ()
  :method-count-assert 43
  :size-assert         #x128
  :flag-assert         #x2b00b00128
  )
|#

#|
(deftype dp-bipedal-invis-particle-joint (structure)
  ((joint    int16  :offset-assert 0)
   (distance float  :offset-assert 4)
   (size     float  :offset-assert 8)
   (spawn?   basic  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype dp-bipedal (nav-enemy)
  ((los                       los-control        :inline :offset-assert 620)
   (rotation-matrix           matrix             :inline :offset-assert 796)
   (focus-dir                 vector             :inline :offset-assert 860)
   (focus-close-attack-pos    vector             :inline :offset-assert 876)
   (focus-throw-attack-pos    vector             :inline :offset-assert 892)
   (focus-bullseye            vector             :inline :offset-assert 908)
   (los-source                vector             :inline :offset-assert 924)
   (formation-position        vector             :inline :offset-assert 940)
   (focus-formation-source    vector             :inline :offset-assert 956)
   (dest-quat                 quaternion         :inline :offset-assert 972)
   (minimap                   connection-minimap         :offset-assert 988)
   (part-ambush               basic                      :offset-assert 992)
   (effect-rate               float                      :offset-assert 996)
   (effect-timer              uint64                     :offset-assert 1004)
   (scared-timer              uint64                     :offset-assert 1012)
   (close-attack-timer        uint64                     :offset-assert 1020)
   (can-attack-throw?         basic                      :offset-assert 1028)
   (shield-handle             uint64                     :offset-assert 1036)
   (shield-timer              uint64                     :offset-assert 1044)
   (shield-sound-id           uint32                     :offset-assert 1052)
   (fade-level                float                      :offset-assert 1056)
   (turret-entity             basic                      :offset-assert 1060)
   (actor-group               uint32                     :offset-assert 496)
   (actor-group-count         int32                      :offset-assert 500)
   (on-screen-timer           uint64                     :offset-assert 1076)
   (valid-ground-timer        uint64                     :offset-assert 1084)
   (knocked-focus-reset-timer uint64                     :offset-assert 1092)
   )
  :method-count-assert 212
  :size-assert         #x450
  :flag-assert         #xd403d00450
  (:methods
    (dp-bipedal-method-204 () none) ;; 204
    (dp-bipedal-method-205 () none) ;; 205
    (dp-bipedal-method-206 () none) ;; 206
    (dp-bipedal-method-207 () none) ;; 207
    (dp-bipedal-method-208 () none) ;; 208
    (dp-bipedal-method-209 () none) ;; 209
    (dp-bipedal-method-210 () none) ;; 210
    (dp-bipedal-method-211 () none) ;; 211
    )
  (:state-methods
    turret-get-off ;; 201
    turret-getting-off ;; 200
    turret-get-on ;; 199
    turret-seek ;; 198
    die ;; 40
    active ;; 34
    knocked-recover ;; 32
    turret-active ;; 202
    dormant ;; 28
    shield-explode ;; 197
    turret-active-shoot ;; 203
    dormant-aware ;; 29
    de-ambush ;; 190
    hostile ;; 38
    shield-out ;; 194
    hostile-stand ;; 191
    shield-idle ;; 195
    shield-in ;; 196
    ambush ;; 47
    attack-close ;; 192
    attack-throw ;; 193
    knocked ;; 31
    )
  )
|#

#|
(deftype dp-bipedal-spawner (process)
  ((spawn-pos        vector :inline :offset-assert 128)
   (spawn-timer      uint64         :offset-assert 144)
   (enemies-spawned  int32          :offset-assert 152)
   (enemies-to-spawn int32          :offset-assert 156)
   )
  :method-count-assert 16
  :size-assert         #xa0
  :flag-assert         #x10002000a0
  (:state-methods
    die ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *dp-bipedal-formation-table* array)
;; (define-extern *dp-bipedal-invis-joint-list* array)
;; (define-extern *fact-info-dp-bipedal-defaults* fact-info-enemy-defaults)
;; (define-extern *dp-bipedal-nav-enemy-info* nav-enemy-info)
;; (define-extern region-check-has-los function)
;; (define-extern dp-bipedal-formation-post function)
;; (define-extern dp-bipedal-hostile-post function)
;; (define-extern dp-bipedal-attack-close-post function)
;; (define-extern dp-bipedal-consider-attacks function)
;; (define-extern dp-bipedal-turret-post function)
;; (define-extern dp-bipedal-turret-code function)
;; (define-extern trajectory-prediction function)
;; (define-extern dp-bipedal-spawner-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-templea              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *templea-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temple-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-temple-big-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-temple-big-torch-flame* curve2d-fast)
;; (define-extern *range-scale-temple-big-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-temple-big-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-temple-big-torch-flame* curve2d-fast)
;; (define-extern *g-curve-temple-big-torch-flame* curve2d-fast)
;; (define-extern *b-curve-temple-big-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-temple-big-torch-flame* curve2d-fast)
;; (define-extern *curve-temple-big-torch-flame-x* curve2d-fast)
;; (define-extern *curve-temple-big-torch-flame-y* curve2d-fast)
;; (define-extern *part-temple-big-torch-flame-curve-settings* object)
;; (define-extern *range-color-temple-small-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-temple-small-torch-flame* curve2d-fast)
;; (define-extern *range-scale-temple-small-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-temple-small-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-temple-small-torch-flame* curve2d-fast)
;; (define-extern *g-curve-temple-small-torch-flame* curve2d-fast)
;; (define-extern *b-curve-temple-small-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-temple-small-torch-flame* curve2d-fast)
;; (define-extern *curve-temple-small-torch-flame-x* curve2d-fast)
;; (define-extern *curve-temple-small-torch-flame-y* curve2d-fast)
;; (define-extern *part-temple-small-torch-flame-curve-settings* object)
;; (define-extern *range-color-templea-small-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-templea-small-torch-flame* curve2d-fast)
;; (define-extern *range-scale-templea-small-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-templea-small-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-templea-small-torch-flame* curve2d-fast)
;; (define-extern *g-curve-templea-small-torch-flame* curve2d-fast)
;; (define-extern *b-curve-templea-small-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-templea-small-torch-flame* curve2d-fast)
;; (define-extern *curve-templea-small-torch-flame-x* curve2d-fast)
;; (define-extern *curve-templea-small-torch-flame-y* curve2d-fast)
;; (define-extern *part-templea-small-torch-flame-curve-settings* object)
;; (define-extern *range-color-templea-medium-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-templea-medium-torch-flame* curve2d-fast)
;; (define-extern *range-scale-templea-medium-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-templea-medium-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-templea-medium-torch-flame* curve2d-fast)
;; (define-extern *g-curve-templea-medium-torch-flame* curve2d-fast)
;; (define-extern *b-curve-templea-medium-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-templea-medium-torch-flame* curve2d-fast)
;; (define-extern *curve-templea-medium-torch-flame-x* curve2d-fast)
;; (define-extern *curve-templea-medium-torch-flame-y* curve2d-fast)
;; (define-extern *part-templea-medium-torch-flame-curve-settings* object)
;; (define-extern birth-func-temple-shaft-camera-orient function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temple-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpl-bouncer (bouncer)
  ()
  :method-count-assert 28
  :size-assert         #xd8
  :flag-assert         #x1c006000d8
  (:state-methods
    broken ;; 27
    fire ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-outer-airlock-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype tpl-mardoor (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype task-manager-temple-defend (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

#|
(deftype task-manager-temple-oracle (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-temple-oracle-powerup (task-manager)
  ((arrow-h uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-lightjak-training (task-manager)
  ((gui-id uint32  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-lightjak-training-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-lightjak-training-freeze (task-manager-lightjak-training)
  ()
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-lightjak-training-swoop (task-manager-lightjak-training)
  ((learned-to-flap? basic  :offset-assert 244)
   (flap-count       int32  :offset-assert 248)
   )
  :method-count-assert 33
  :size-assert         #xfc
  :flag-assert         #x21008000fc
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype tpl-holo-eye (process-drawable)
  ((eyeball-jmod       joint-mod-set-world-no-trans :inline :offset-assert 204)
   (other-eyeball-jmod joint-mod-set-world          :inline :offset-assert 268)
   (next-blink-time    uint64                               :offset-assert 332)
   (trigger-radius     float                                :offset-assert 340)
   (idle-clock         uint64                               :offset-assert 348)
   (actor-group        uint32                               :offset-assert 356)
   (actor-group-count  int32                                :offset-assert 360)
   (triggered?         basic                                :offset-assert 364)
   (untriggered?       basic                                :offset-assert 368)
   (kill-quat          quaternion                   :inline :offset-assert 380)
   (kill-angle         float                                :offset-assert 396)
   (kill-speed         float                                :offset-assert 400)
   (init-trans         vector                       :inline :offset-assert 412)
   (perm-part          uint64                               :offset-assert 428)
   )
  :method-count-assert 25
  :size-assert         #x1b8
  :flag-assert         #x19014001b8
  (:methods
    (tpl-holo-eye-method-24 () none) ;; 24
    )
  (:state-methods
    die-fast ;; 23
    die ;; 22
    alert ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-spike-trap (process-drawable)
  ((was-up             basic   :offset-assert 200)
   (no-collision-timer uint64  :offset-assert 208)
   (attack-id          int32   :offset-assert 216)
   )
  :method-count-assert 22
  :size-assert         #xdc
  :flag-assert         #x16006000dc
  (:state-methods
    idle-up ;; 21
    idle-down ;; 20
    )
  )
|#

#|
(deftype tpl-elec-swing-pole (swingpole)
  ((y-start   float     :offset-assert 284)
   (y-end     float     :offset-assert 288)
   (electrify basic     :offset-assert 292)
   (lightning UNKNOWN 4 :offset-assert 296)
   (y-disable float     :offset-assert 312)
   (sound-id  uint32    :offset-assert 316)
   )
  :method-count-assert 26
  :size-assert         #x140
  :flag-assert         #x1a00c00140
  (:state-methods
    active ;; 21
    goup ;; 25
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-spindle (process-drawable)
  ((init-quat     quaternion :inline :offset-assert 208)
   (init-quat2    quaternion :inline :offset-assert 224)
   (rot-angle     float              :offset-assert 240)
   (shudder-angle float              :offset-assert 244)
   (cycle-time    float              :offset-assert 248)
   (cycle-offset  float              :offset-assert 252)
   )
  :method-count-assert 22
  :size-assert         #x100
  :flag-assert         #x1600800100
  (:state-methods
    idle-slow ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-fan-two (process-drawable)
  ((quat         quaternion :inline :offset-assert 208)
   (cycle-time   float              :offset-assert 224)
   (cycle-offset float              :offset-assert 228)
   (start-timef  float              :offset-assert 232)
   (next-sound   float              :offset-assert 236)
   (last-sound   float              :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #xf4
  :flag-assert         #x15008000f4
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-fan-three (process-drawable)
  ((quat         quaternion :inline :offset-assert 208)
   (cycle-time   float              :offset-assert 224)
   (cycle-offset float              :offset-assert 228)
   (start-timef  float              :offset-assert 232)
   (next-sound   float              :offset-assert 236)
   (last-sound   float              :offset-assert 240)
   )
  :method-count-assert 21
  :size-assert         #xf4
  :flag-assert         #x15008000f4
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-break-alcove (process-drawable)
  ((alt-actor    basic   :offset-assert 200)
   (extra-id     uint32  :offset-assert 204)
   (perm         uint32  :offset-assert 208)
   (part-explode basic   :offset-assert 212)
   (spawn-part   basic   :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    die-fast ;; 22
    closed ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-break-door-a (process-drawable)
  ((alt-actor    basic   :offset-assert 200)
   (extra-id     uint32  :offset-assert 204)
   (perm         uint32  :offset-assert 208)
   (part-explode basic   :offset-assert 212)
   (spawn-part   basic   :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    die-fast ;; 22
    closed ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern templea-login function)
;; (define-extern templea-logout function)
;; (define-extern templea-activate function)
;; (define-extern sparticle-holo-halo0 function)
;; (define-extern sparticle-holo-halo1 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temple-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern temple-lightjak-do-effect function)
;; (define-extern temple-lightjak-wings-do-effect function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temple-obs2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpl-gate (process-drawable)
  ((alt-actor basic   :offset-assert 200)
   (extra-id  uint32  :offset-assert 204)
   (perm      uint32  :offset-assert 208)
   )
  :method-count-assert 26
  :size-assert         #xd4
  :flag-assert         #x1a006000d4
  (:state-methods
    die ;; 25
    opened ;; 24
    closed ;; 23
    close ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-watcher-manager (process)
  ((actor-group         uint32         :offset-assert 124)
   (actor-group-count   int32          :offset-assert 128)
   (within-outer-ring   basic          :offset-assert 132)
   (within-inner-ring   basic          :offset-assert 136)
   (ouched              basic          :offset-assert 140)
   (bound-cam           basic          :offset-assert 144)
   (trans               vector :inline :offset-assert 156)
   (state-time          uint64         :offset-assert 172)
   (jak-in-hint-region  basic          :offset-assert 180)
   (watchers-vulnerable basic          :offset-assert 184)
   )
  :method-count-assert 17
  :size-assert         #xc0
  :flag-assert         #x11004000c0
  (:state-methods
    until-watchers-dead ;; 16
    waiting ;; 15
    idle ;; 14
    )
  )
|#

#|
(deftype tpl-watcher (process-focusable)
  ((manager         basic               :offset-assert 208)
   (bob-clock       uint64              :offset-assert 216)
   (period-a        int32               :offset-assert 224)
   (period-b        int32               :offset-assert 228)
   (laser-sight     basic               :offset-assert 232)
   (laser-charge-fx basic               :offset-assert 236)
   (los             los-control :inline :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #x194
  :flag-assert         #x2101200194
  (:methods
    (tpl-watcher-method-32 () none) ;; 32
    )
  (:state-methods
    standing-down ;; 31
    die ;; 30
    firing ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype tpl-door-switch (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    down ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-door-a (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype tpl-door-b (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype tpl-spinning-plat (process-drawable)
  ((last-ridden        uint64         :offset-assert 200)
   (basal-trans        vector :inline :offset-assert 208)
   (no-collision-timer uint64         :offset-assert 224)
   (attack-id          int32          :offset-assert 232)
   (my-sound           uint32         :offset-assert 236)
   (pitch-mod-hack     float          :offset-assert 240)
   )
  :method-count-assert 25
  :size-assert         #xf4
  :flag-assert         #x19008000f4
  (:methods
    (tpl-spinning-plat-method-24 () none) ;; 24
    )
  (:state-methods
    underfoot ;; 23
    wait ;; 22
    desync ;; 20
    flip ;; 21
    )
  )
|#

#|
(deftype tpl-oracle-eye (process-drawable)
  ((leye-sparta basic  :offset-assert 200)
   (reye-sparta basic  :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:state-methods
    open ;; 20
    )
  )
|#

#|
(deftype tpl-banner-b (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  (:state-methods
    running ;; 37
    )
  )
|#

#|
(deftype tpl-banner (process-drawable)
  ((sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern shoot-at-jak function)
;; (define-extern tpl-watcher-manager-ehandler function)
;; (define-extern watcher-man-trans function)
;; (define-extern has-jak-visibility? function)
;; (define-extern *tpl-watcher-exploder-params* joint-exploder-static-params)
;; (define-extern watcher-bob-trans function)
;; (define-extern already-down state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; temple-mood                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype templea-states (structure)
  ((flame flames-state :inline :offset-assert 0)
   (rot   float                :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype templed-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

;; (define-extern init-mood-templea function)
;; (define-extern update-templea-lights function)
;; (define-extern update-mood-templea function)
;; (define-extern update-templed-lights function)
;; (define-extern init-mood-templed function)
;; (define-extern update-mood-templed function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templea-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *templea-water-texture-anim-array* texture-anim-array)
;; (define-extern *templea-warp-texture-anim-array* texture-anim-array)
;; (define-extern templea-warp-texture-anim-func function)
;; (define-extern *templeb-warp-texture-anim-array* texture-anim-array)
;; (define-extern templeb-warp-texture-anim-func function)
;; (define-extern *templec-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-training                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-hover (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype tpl-token (process-focusable)
  ((part-trail        basic                      :offset-assert 208)
   (actor-group       uint32                     :offset-assert 212)
   (actor-group-count int32                      :offset-assert 216)
   (part-subsampler   basic                      :offset-assert 220)
   (path-pos          float                      :offset-assert 224)
   (speed             float                      :offset-assert 228)
   (velocity          vector             :inline :offset-assert 240)
   (group-num         uint32                     :offset-assert 256)
   (camera-done?      uint32                     :offset-assert 260)
   (dest              vector             :inline :offset-assert 272)
   (sound-id          uint32                     :offset-assert 288)
   (minimap           connection-minimap         :offset-assert 292)
   )
  :method-count-assert 31
  :size-assert         #x128
  :flag-assert         #x1f00b00128
  (:state-methods
    go-door ;; 29
    die-fast ;; 30
    idle ;; 28
    )
  )
|#

#|
(deftype hover-training-manager (process)
  ((actor-group       uint32  :offset-assert 124)
   (actor-group-count int32   :offset-assert 128)
   (gui-id            uint32  :offset-assert 132)
   (text              basic   :offset-assert 136)
   (hud-counter       uint64  :offset-assert 140)
   (text-id           uint32  :offset-assert 148)
   )
  :method-count-assert 19
  :size-assert         #x9c
  :flag-assert         #x130020009c
  (:methods
    (hover-training-manager-method-18 () none) ;; 18
    )
  (:state-methods
    display-text ;; 17
    die-fast ;; 16
    done ;; 15
    idle ;; 14
    )
  )
|#

#|
(deftype tpl-symbol (process-drawable)
  ((flash-time   uint64  :offset-assert 200)
   (part-touched basic   :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tomb-baby-spider               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tomb-baby-spider (nav-enemy)
  ()
  :method-count-assert 192
  :size-assert         #x26c
  :flag-assert         #xc001f0026c
  (:state-methods
    hostile ;; 38
    attack-stop ;; 191
    notice ;; 35
    attack ;; 190
    active ;; 34
    )
  )
|#

#|
(deftype dig-spider (tomb-baby-spider)
  ()
  :method-count-assert 192
  :size-assert         #x26c
  :flag-assert         #xc001f0026c
  )
|#

;; (define-extern *tomb-baby-fact-info-enemy* fact-info-enemy-defaults)
;; (define-extern *tomb-baby-spider-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flamer-hover                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flamer-hover (hover-enemy)
  ((shot-trajectory trajectory          :inline :offset-assert 976)
   (last-fire-time  uint64                      :offset-assert 1016)
   (sync-off        uint32                      :offset-assert 1024)
   (flit-joint      joint-mod-set-local :inline :offset-assert 1040)
   (flit-angle      float                       :offset-assert 1104)
   (flit-timer      uint64                      :offset-assert 1112)
   (sound-volume    float                       :offset-assert 1120)
   (path-u          float                       :offset-assert 1124)
   )
  :method-count-assert 178
  :size-assert         #x468
  :flag-assert         #xb203f00468
  (:state-methods
    flying-death-explode ;; 158
    knocked-recover ;; 32
    hostile ;; 38
    attack ;; 177
    ambush ;; 47
    )
  )
|#

;; (define-extern *flamer-hover-exploder-params* joint-exploder-static-params)
;; (define-extern *flamer-hover-enemy-info* enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-burning-bush               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bbush-menu-item (structure)
  ((text uint32  :offset-assert 0)
   (node uint16  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype bbush-menu (structure)
  ((title-text uint32     :offset-assert 0)
   (req-text   uint32     :offset-assert 4)
   (req-check  basic      :offset-assert 8)
   (item-count int8       :offset-assert 12)
   (items      UNKNOWN 10 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

#|
(deftype des-burning-bush (process-focusable)
  ((task              basic        :offset-assert 208)
   (part-off          basic        :offset-assert 212)
   (angle             float        :offset-assert 216)
   (time              float        :offset-assert 220)
   (rotmin            float        :offset-assert 224)
   (rotmax            float        :offset-assert 228)
   (bb-perm           entity-perm  :offset-assert 232)
   (menu              bbush-menu   :offset-assert 236)
   (menu-node         basic        :offset-assert 240)
   (menu-exit?        basic        :offset-assert 244)
   (menu-have-req?    basic        :offset-assert 248)
   (message-id        uint32       :offset-assert 252)
   (required-vehicles uint64       :offset-assert 256)
   )
  :method-count-assert 39
  :size-assert         #x108
  :flag-assert         #x2700900108
  (:methods
    (des-burning-bush-method-32 () none) ;; 32
    (des-burning-bush-method-33 () none) ;; 33
    (des-burning-bush-method-34 () none) ;; 34
    (des-burning-bush-method-35 () none) ;; 35
    (des-burning-bush-method-36 () none) ;; 36
    (des-burning-bush-method-37 () none) ;; 37
    (des-burning-bush-method-38 () none) ;; 38
    )
  (:state-methods
    menu ;; 30
    talking ;; 29
    collect-gems ;; 31
    idle ;; 28
    )
  )
|#

#|
(deftype burning-bush-get-on-info (structure)
  ((trans        vector     :inline :offset-assert 0)
   (quat         quaternion :inline :offset-assert 16)
   (camera-trans vector     :inline :offset-assert 32)
   (camera-rot   float      9       :offset-assert 48) ;; guessed by decompiler
   (time         float              :offset-assert 84)
   (fov          float              :offset-assert 88)
   )
  :method-count-assert 9
  :size-assert         #x5c
  :flag-assert         #x90000005c
  )
|#

#|
(deftype task-manager-desert-bbush-get-to (task-manager)
  ((skill       uint64  :offset-assert 240)
   (update-fov? basic   :offset-assert 248)
   )
  :method-count-assert 33
  :size-assert         #xfc
  :flag-assert         #x21008000fc
  (:methods
    (task-manager-desert-bbush-get-to-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype wascity-burning-bush (des-burning-bush)
  ()
  :method-count-assert 39
  :size-assert         #x108
  :flag-assert         #x2700900108
  )
|#

#|
(deftype city-des-burning-bush (des-burning-bush)
  ()
  :method-count-assert 39
  :size-assert         #x108
  :flag-assert         #x2700900108
  )
|#

;; (define-extern *bbush-menu* object)
;; (define-extern *burning-bush-get-on-info* array) ;; (array burning-bush-get-on-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctysluma-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-rubble-flame* curve-color-fast)
;; (define-extern *range-alpha-rubble-flame* curve2d-fast)
;; (define-extern *range-scale-rubble-flame-x* curve2d-fast)
;; (define-extern *range-scale-rubble-flame-y* curve2d-fast)
;; (define-extern *r-curve-rubble-flame* curve2d-fast)
;; (define-extern *g-curve-rubble-flame* curve2d-fast)
;; (define-extern *b-curve-rubble-flame* curve2d-fast)
;; (define-extern *curve-alpha-rubble-flame* curve2d-fast)
;; (define-extern *curve-scale-rubble-flame-x* curve2d-fast)
;; (define-extern *curve-scale-rubble-flame-y* curve2d-fast)
;; (define-extern *part-ctyslum-rubble-fire-flame-curve-settings* object)
;; (define-extern check-drop-level-ctysluma-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neon-baron-part                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype neon-baron (process)
  ((flags         uint64                           :offset-assert 128) ;; int64
   (master-enable uint64                           :offset-assert 136) ;; int64
   (mode          uint64                           :offset-assert 144) ;; int64
   (sign          (array object)                   :offset-assert 152) ;; guessed by decompiler
   (parts         sparticle-launch-control 1       :offset-assert 156) ;; guessed by decompiler
   (state-time    uint64                           :offset-assert 160) ;; time-frame
   (mat           matrix                   :inline :offset-assert 176)
   )
  :method-count-assert 17
  :size-assert         #xf0
  :flag-assert         #x11007000f0
  (:methods
    (neon-baron-method-15 () none) ;; 15 ;; (spawn-parts (_type_) none)
    (neon-baron-method-16 () none) ;; 16 ;; (update-mode (_type_) none)
    )
  (:state-methods
    idle ;; 14, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern *baron-neon-skull* array) ;; (array object)
;; (define-extern *city-baron-group-ids* array) ;; (array int32)
;; (define-extern *neon-baron-flashing-acc* object) ;; (pointer uint32)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; chain-physics                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern chain-physics-initialize function) ;; (function process-drawable chain-physics int float (array chain-physics-setup) int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jump-pad                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jump-pad (bouncer)
  ((fan-quat          quaternion :inline :offset-assert 224)
   (rot-vel           float              :offset-assert 240)
   (fan-loop-sound-id uint32             :offset-assert 244)
   (fan-loop-sound    basic              :offset-assert 248)
   (jump-sound        basic              :offset-assert 252)
   )
  :method-count-assert 30
  :size-assert         #x100
  :flag-assert         #x1e00800100
  (:methods
    (jump-pad-method-27 () none) ;; 27
    (jump-pad-method-28 () none) ;; 28
    (jump-pad-method-29 () none) ;; 29
    )
  (:state-methods
    fire ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern jump-pad-joint-fan function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; roboguard                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype roboguard (nav-enemy)
  ((los                    los-control :inline :offset-assert 624)
   (rotation-matrix        matrix      :inline :offset-assert 800)
   (upper-rotation-matrix  matrix      :inline :offset-assert 864)
   (fire-at-pos            vector      :inline :offset-assert 928)
   (formation-position     vector      :inline :offset-assert 944)
   (focus-formation-source vector      :inline :offset-assert 960)
   (me-to-focus-dir        vector      :inline :offset-assert 976)
   (me-to-focus-angle      float               :offset-assert 992)
   (flags                  uint16              :offset-assert 996)
   (torso-aim-blend        float               :offset-assert 1000)
   (torso-angle            float               :offset-assert 1004)
   (torso-seek-speed       float               :offset-assert 1008)
   (torso-to-focus-angle   float               :offset-assert 1012)
   (last-torso-frame-num   float               :offset-assert 1016)
   (stand-angle-threshold  float               :offset-assert 1020)
   (arm-rot-mult           UNKNOWN     2       :offset-assert 1024)
   (arm-rot                UNKNOWN     2       :offset-assert 1032)
   (fire-time              uint64              :offset-assert 1040)
   (fire-count             uint32              :offset-assert 1048)
   (last-attack-time       uint64              :offset-assert 1056)
   (update-focus-pos       basic               :offset-assert 1064)
   (formation-angle-sign   float               :offset-assert 1068)
   (last-hit-points        int32               :offset-assert 1072)
   )
  :method-count-assert 197
  :size-assert         #x434
  :flag-assert         #xc503c00434
  (:methods
    (roboguard-method-194 () none) ;; 194
    (roboguard-method-195 () none) ;; 195
    (roboguard-method-196 () none) ;; 196
    )
  (:state-methods
    die ;; 40
    knocked-recover ;; 32
    knocked ;; 31
    shoot-attack ;; 192
    hostile-stand ;; 190
    hostile ;; 38
    explode ;; 193
    stare ;; 37
    close-attack ;; 191
    notice ;; 35
    idle ;; 33
    )
  )
|#

;; (define-extern *roboguard-exploder-params* joint-exploder-static-params)
;; (define-extern *roboguard-explode-joints* array)
;; (define-extern *roboguard-debris-array-params* array)
;; (define-extern *fact-info-roboguard-defaults* fact-info-enemy-defaults)
;; (define-extern *roboguard-nav-enemy-info* nav-enemy-info)
;; (define-extern roboguard-turn-torso-post function)
;; (define-extern roboguard-turret-code function)
;; (define-extern *roboguard-formation-table* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; robo-hover                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype robo-hover-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

#|
(deftype robo-hover (hover-enemy)
  ((wrist-quat            UNKNOWN 2       :offset-assert 976)
   (aim-position          vector  :inline :offset-assert 1008)
   (entity-group          basic           :offset-assert 1024)
   (smoke-part            basic           :offset-assert 1028)
   (engine-part           basic           :offset-assert 1032)
   (next-fire-time        uint64          :offset-assert 1040)
   (gun-blend             float           :offset-assert 1048)
   (path-u                float           :offset-assert 1052)
   (path-du               float           :offset-assert 1056)
   (path-du-final         float           :offset-assert 1060)
   (path-dest             float           :offset-assert 1064)
   (sound-id              uint32          :offset-assert 1068)
   (knocked-recover-anim  int32           :offset-assert 1072)
   (attack-wait-min       float           :offset-assert 1076)
   (attack-wait-max       float           :offset-assert 1080)
   (attack-miss-dist-min  float           :offset-assert 1084)
   (attack-miss-dist-max  float           :offset-assert 1088)
   (attack-miss-dist-curr float           :offset-assert 1092)
   (shots-fired           int32           :offset-assert 1096)
   )
  :method-count-assert 184
  :size-assert         #x44c
  :flag-assert         #xb803d0044c
  (:methods
    (robo-hover-method-182 () none) ;; 182
    (robo-hover-method-183 () none) ;; 183
    )
  (:state-methods
    knocked-recover ;; 32
    knocked ;; 31
    attack ;; 180
    kick-attack ;; 179
    explode ;; 181
    hostile ;; 38
    notice ;; 35
    ambush-attack ;; 178
    ambush-fly ;; 177
    ambush ;; 47
    )
  )
|#

;; (define-extern *fact-info-robo-hover-defaults* fact-info-enemy-defaults)
;; (define-extern *robo-hover-enemy-info* enemy-info)
;; (define-extern *robo-hover-debris-params* debris-static-params)
;; (define-extern exit-ambush? function)
;; (define-extern robo-hover-arm-jmod function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-grunt                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kg-grunt-anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype kg-grunt-global-info (basic)
  ((prev-knocked-anim-index    int32     :offset-assert 4)
   (prev-yellow-hit-anim-index int32     :offset-assert 8)
   (prev-blue-hit-anim-index   int32     :offset-assert 12)
   (patrol-anim                UNKNOWN 4 :offset-assert 16)
   (charge-anim                UNKNOWN 3 :offset-assert 48)
   (attack-anim                UNKNOWN 2 :offset-assert 72)
   (knocked-anim               UNKNOWN 4 :offset-assert 88)
   (knocked-land-anim          UNKNOWN 4 :offset-assert 120)
   (yellow-hit-anim            UNKNOWN 4 :offset-assert 152)
   (blue-hit-anim              UNKNOWN 6 :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xe8
  :flag-assert         #x9000000e8
  )
|#

#|
(deftype kg-grunt (nav-enemy)
  ((patrol-anim            kg-grunt-anim-info         :offset-assert 620)
   (charge-anim            kg-grunt-anim-info         :offset-assert 624)
   (attack-anim            kg-grunt-anim-info         :offset-assert 628)
   (knocked-anim           kg-grunt-anim-info         :offset-assert 632)
   (yellow-hit-anim        kg-grunt-anim-info         :offset-assert 636)
   (blue-hit-anim          kg-grunt-anim-info         :offset-assert 640)
   (intro-path             basic                      :offset-assert 644)
   (use-charge-anim-index  int8                       :offset-assert 652)
   (knocked-anim-index     int8                       :offset-assert 653)
   (jumping-ambush-path-pt int8                       :offset-assert 654)
   (kg-grunt-flags         uint8                      :offset-assert 655)
   (state-timeout2         uint64                     :offset-assert 656)
   (next-warn-time         uint64                     :offset-assert 664)
   (dest                   vector             :inline :offset-assert 672)
   (focus-pos              vector             :inline :offset-assert 352)
   (minimap                connection-minimap         :offset-assert 704)
   (debris-count           uint32                     :offset-assert 708)
   (debris-mask            uint32                     :offset-assert 712)
   )
  :method-count-assert 199
  :size-assert         #x2cc
  :flag-assert         #xc7025002cc
  (:methods
    (kg-grunt-method-197 () none) ;; 197
    (kg-grunt-method-198 () none) ;; 198
    )
  (:state-methods
    stop-chase ;; 158
    pacing ;; 156
    spin-attack ;; 195
    wait-for-focus ;; 194
    hostile ;; 38
    attack ;; 190
    active ;; 34
    jumping-ambush-cont ;; 193
    jumping-ambush ;; 192
    falling-ambush ;; 191
    circling ;; 157
    explode ;; 196
    )
  )
|#

;; (define-extern *kg-grunt-debris-params* debris-static-params)
;; (define-extern *kg-grunt-debris-elbow-shoulder-params* debris-static-params)
;; (define-extern *kg-grunt-debris-array-params* array)
;; (define-extern *kg-grunt-debris-knee-hip-params* debris-static-params)
;; (define-extern *kg-grunt-global-info* kg-grunt-global-info)
;; (define-extern *fact-info-kg-grunt-defaults* fact-info-enemy-defaults)
;; (define-extern *kg-grunt-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-sewb                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewb-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-sewg                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewg-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-sewl                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewl-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-sewo                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewo-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-sewj                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewj-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-sewer-gas* curve-color-fast)
;; (define-extern *range-alpha-sewer-gas* curve2d-fast)
;; (define-extern *range-scale-sewer-gas-x* curve2d-fast)
;; (define-extern *range-scale-sewer-gas-y* curve2d-fast)
;; (define-extern *r-curve-sewer-gas* curve2d-fast)
;; (define-extern *g-curve-sewer-gas* curve2d-fast)
;; (define-extern *b-curve-sewer-gas* curve2d-fast)
;; (define-extern *curve-alpha-sewer-gas* curve2d-fast)
;; (define-extern *curve-sewer-gas-x* curve2d-fast)
;; (define-extern *curve-sewer-gas-y* curve2d-fast)
;; (define-extern *part-sewer-steam-puff-curve-settings* object)
;; (define-extern *steam-particle-list* array)
;; (define-extern birth-func-texture-group-steam function)
;; (define-extern spt-func-birth-on-bubble-pop function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-mood                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sewb-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype sewc-states (structure)
  ((pulse       pulse-state       :inline :offset-assert 0)
   (electricity electricity-state :inline :offset-assert 16)
   (rot         float                     :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype sewd-states (structure)
  ((pulse       pulse-state       :inline :offset-assert 0)
   (electricity electricity-state :inline :offset-assert 16)
   (rot         float                     :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype sewg-states (structure)
  ((electricity UNKNOWN 2 :offset-assert 0)
   (rot         float     :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype sewh-states (structure)
  ((electricity  UNKNOWN 5 :offset-assert 0)
   (turret-value float     :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

#|
(deftype sewj-states (structure)
  ((rot float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype sewa-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern update-sewer-lights function) ;; (function mood-context none)
;; (define-extern update-mood-sewa function)
;; (define-extern init-mood-sewb function)
;; (define-extern update-mood-sewb function)
;; (define-extern init-mood-sewc function)
;; (define-extern update-mood-sewc function)
;; (define-extern init-mood-sewd function)
;; (define-extern update-mood-sewd function)
;; (define-extern set-sewd-light! function)
;; (define-extern init-mood-sewg function)
;; (define-extern update-mood-sewg function)
;; (define-extern set-sewg-electricity-scale! function)
;; (define-extern init-mood-sewh function)
;; (define-extern update-mood-sewh function)
;; (define-extern set-sewh-electricity-scale! function)
;; (define-extern set-sewh-turret-flash! function)
;; (define-extern update-mood-sewj function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sew-laser-guard                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-turret-params (structure)
  ((normal-sg    skeleton-group   :offset-assert 0) ;; guessed by decompiler
   (explode-sg   skeleton-group   :offset-assert 4) ;; guessed by decompiler
   (enemy-info   enemy-info       :offset-assert 8) ;; guessed by decompiler
   (idle-anim    int32            :offset-assert 12)
   (shoot-anim   int32            :offset-assert 16)
   (track-joint  int32            :offset-assert 20)
   (barrel-joint int32            :offset-assert 24)
   (gun-joint    int32            :offset-assert 28)
   (hole-joints  int32          8 :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype sew-laser-guard (enemy)
  ((params                        gun-turret-params         :offset-assert 552)
   (aim-pos                       vector            :inline :offset-assert 560)
   (smoke-part                    basic                     :offset-assert 576)
   (casing-part                   basic                     :offset-assert 580)
   (sync-orient                   sync-linear       :inline :offset-assert 584)
   (start-orient                  quaternion        :inline :offset-assert 608)
   (end-orient                    quaternion        :inline :offset-assert 624)
   (last-play-sweep-dir-positive? basic                     :offset-assert 640)
   (last-play-sweep-sync          float                     :offset-assert 644)
   (sound-hum                     uint32                    :offset-assert 648)
   (sound-scorch                  uint32                    :offset-assert 652)
   )
  :method-count-assert 157
  :size-assert         #x290
  :flag-assert         #x9d02100290
  (:methods
    (sew-laser-guard-method-155 () none) ;; 155
    (sew-laser-guard-method-156 () none) ;; 156
    )
  (:state-methods
    hit ;; 30
    die ;; 40
    stare ;; 37
    hostile ;; 38
    )
  )
|#

#|
(deftype sew-laser-shot (projectile)
  ()
  :method-count-assert 41
  :size-assert         #x200
  :flag-assert         #x2901800200
  (:state-methods
    dissipate ;; 21
    )
  )
|#

;; (define-extern sew-laser-shot-move function)
;; (define-extern *sew-laser-guard-enemy-info* enemy-info)
;; (define-extern fire-laser! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-curved-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype sew-floating-plat (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#

#|
(deftype sew-cam-sequencer (process)
  ((activate-script basic   :offset-assert 132)
   (enter-script    basic   :offset-assert 136)
   (exit-script     basic   :offset-assert 140)
   (timeout         uint64  :offset-assert 144)
   (offset          uint64  :offset-assert 152)
   )
  :method-count-assert 15
  :size-assert         #xa0
  :flag-assert         #xf002000a0
  ;; field activate-script uses ~A with a signed load. field enter-script uses ~A with a signed load. field exit-script uses ~A with a signed load.
  (:state-methods
    active ;; 14
    )
  )
|#

#|
(deftype sew-floor-switch (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:state-methods
    idle-down ;; 22
    going-down ;; 21
    idle-up ;; 20
    )
  )
|#

#|
(deftype sew-jump-pad (jump-pad)
  ()
  :method-count-assert 30
  :size-assert         #x100
  :flag-assert         #x1e00800100
  )
|#

#|
(deftype sew-fan (enemy)
  ((activate-distance float              :offset-assert 552)
   (path-pos          float              :offset-assert 556)
   (sweep-dir         int8               :offset-assert 560)
   (travel-dir        int8               :offset-assert 561)
   (float-quat        quaternion :inline :offset-assert 576)
   (base-trans-y      float              :offset-assert 592)
   (base-quat         quaternion :inline :offset-assert 608)
   (dest-quat         quaternion :inline :offset-assert 624)
   (fan-rot           float              :offset-assert 640)
   (fan-rot-vel       float              :offset-assert 644)
   (hostile-part      basic              :offset-assert 648)
   (gust-part         basic              :offset-assert 652)
   (sound-fan-loop-id uint32             :offset-assert 656)
   )
  :method-count-assert 155
  :size-assert         #x294
  :flag-assert         #x9b02200294
  (:state-methods
    die ;; 40
    hostile ;; 38
    active ;; 34
    notice ;; 35
    idle ;; 33
    )
  )
|#

#|
(deftype sew-elevator (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (sew-elevator-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype sew-gate (process-drawable)
  ((play-time     uint64  :offset-assert 200)
   (sound-played1 basic   :offset-assert 208)
   (sound-played2 basic   :offset-assert 212)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:state-methods
    opened ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-wall-switch (process-drawable)
  ((actor-group       uint32              :offset-assert 196)
   (actor-group-count int32               :offset-assert 200)
   (minimap           connection-minimap  :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd4
  :flag-assert         #x17006000d4
  (:state-methods
    opened ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-fence-gate (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:state-methods
    closing ;; 23
    opening ;; 22
    open ;; 21
    closed ;; 20
    )
  )
|#

#|
(deftype sew-vent (process-drawable)
  ((sync          sync-linear :inline :offset-assert 200)
   (attack-id     int32               :offset-assert 216)
   (last-sync-val float               :offset-assert 220)
   (vent-sound    uint32              :offset-assert 224)
   )
  :method-count-assert 21
  :size-assert         #xe4
  :flag-assert         #x15007000e4
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype sew-power-switch (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    turned-off ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-gas-step (base-plat)
  ((sound-id      uint32              :offset-assert 272)
   (sync          sync-linear :inline :offset-assert 280)
   (last-sync-val float               :offset-assert 296)
   (gas-time      uint64              :offset-assert 304)
   (attack-id     int32               :offset-assert 312)
   )
  :method-count-assert 36
  :size-assert         #x13c
  :flag-assert         #x2400c0013c
  (:state-methods
    idle ;; 35
    )
  )
|#

;; (define-extern sewer-login function)
;; (define-extern sewer-logout function)
;; (define-extern sewb-activate function)
;; (define-extern sewc-activate function)
;; (define-extern sewg-activate function)
;; (define-extern sewl-activate function)
;; (define-extern sewo-activate function)
;; (define-extern sewj-activate function)
;; (define-extern sew-cam-sequencer-init-by-other function)
;; (define-extern sew-cam-eval-script function)
;; (define-extern *sew-fan-enemy-info* enemy-info)
;; (define-extern *sew-fan-exploder-params* joint-exploder-static-params)
;; (define-extern update-surface-float function)
;; (define-extern update-idle function)
;; (define-extern update-hostile function)
;; (define-extern sew-fan-joint-fan function)
;; (define-extern sew-fan-joint-floor function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-obs2                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-laser-beam (process-drawable)
  ((sync     sync-linear :inline :offset-assert 200)
   (sound-id uint32              :offset-assert 216)
   )
  :method-count-assert 21
  :size-assert         #xdc
  :flag-assert         #x15006000dc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype sew-m-gate (process-drawable)
  ((actor-group       uint32  :offset-assert 196)
   (actor-group-count int32   :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:state-methods
    raised ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-pipe (process-drawable)
  ((actor-group       uint32  :offset-assert 196)
   (actor-group-count int32   :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:state-methods
    down ;; 22
    lower ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-grate-plat (process-drawable)
  ((test-pos vector :inline :offset-assert 208)
   (closed-x float          :offset-assert 224)
   (opened-x float          :offset-assert 228)
   )
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:state-methods
    close ;; 23
    opened ;; 22
    open ;; 21
    closed ;; 20
    )
  )
|#

;; (define-extern fire-sew-laser-beam! function)
;; (define-extern *sew-laser-beam-shadow-control* shadow-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-move-turret              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-move-turret (process-drawable)
  ((sound-id     uint32  :offset-assert 200)
   (use-doppler? basic   :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    (sew-move-turret-method-22 () none) ;; 22
    )
  (:state-methods
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-move-turret-shot (guard-shot)
  ((doppler-sound uint32  :offset-assert 544)
   (use-doppler?  basic   :offset-assert 548)
   )
  :method-count-assert 41
  :size-assert         #x228
  :flag-assert         #x2901b00228
  )
|#

;; (define-extern sew-turret-shot-move function)
;; (define-extern spawn-sew-move-turret-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-jsplash-color* curve-color-fast)
;; (define-extern *range-jsplash-alpha* curve2d-fast)
;; (define-extern *range-jsplash-scale-x* curve2d-fast)
;; (define-extern *range-jsplash-scale-y* curve2d-fast)
;; (define-extern *curve-jsplash-alpha* curve2d-fast)
;; (define-extern *curve-jsplash-scale-x* curve2d-fast)
;; (define-extern *curve-jsplash-scale-y* curve2d-fast)
;; (define-extern *part-sewer-water-splash-jak-curve-settings* object)
;; (define-extern *range-dsplash-color* curve-color-fast)
;; (define-extern *range-dsplash-alpha* curve2d-fast)
;; (define-extern *range-dsplash-scale-x* curve2d-fast)
;; (define-extern *range-dsplash-scale-y* curve2d-fast)
;; (define-extern *curve-dsplash-alpha* curve2d-fast)
;; (define-extern *curve-dsplash-scale-x* curve2d-fast)
;; (define-extern *curve-dsplash-scale-y* curve2d-fast)
;; (define-extern *part-sewer-water-splash-daxter-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sew-laser-turret               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; gun-turret-params is already defined!

#|
(deftype sew-laser-turret (enemy)
  ((params           gun-turret-params         :offset-assert 552)
   (aim-pos          vector            :inline :offset-assert 560)
   (smoke-part       basic                     :offset-assert 576)
   (casing-part      basic                     :offset-assert 580)
   (flash-state      basic                     :offset-assert 584)
   (can-shoot        basic                     :offset-assert 588)
   (last-active-time uint64                    :offset-assert 592)
   (target-distance  float                     :offset-assert 600)
   (target-on-ground basic                     :offset-assert 604)
   (was-hit          basic                     :offset-assert 608)
   (awareness-radius float                     :offset-assert 612)
   (ring-rate        uint64                    :offset-assert 616)
   (max-num-rings    int32                     :offset-assert 624)
   (last-spawn-index int32                     :offset-assert 628)
   (spin-sound-id    uint32                    :offset-assert 632)
   (last-play-time   uint64                    :offset-assert 640)
   (strip            basic                     :offset-assert 648)
   )
  :method-count-assert 164
  :size-assert         #x28c
  :flag-assert         #xa40210028c
  (:methods
    (sew-laser-turret-method-159 () none) ;; 159
    (sew-laser-turret-method-160 () none) ;; 160
    (sew-laser-turret-method-161 () none) ;; 161
    (sew-laser-turret-method-162 () none) ;; 162
    (sew-laser-turret-method-163 () none) ;; 163
    )
  (:state-methods
    turn-off ;; 158
    hostile ;; 38
    alert ;; 155
    die ;; 40
    spinning-down ;; 157
    spinning-up ;; 156
    )
  )
|#

;; (define-extern *sew-laser-turret-enemy-info* enemy-info)
;; (define-extern do-spin function)
;; (define-extern compute-ring-period function)
;; (define-extern compute-ring-position function)
;; (define-extern compute-num-rings-to-draw function)
;; (define-extern compute-ring-size function)
;; (define-extern check-enemy function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sew-platforms                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-plat-updown (base-plat)
  ((sync     sync-eased :inline :offset-assert 272)
   (path-pos float              :offset-assert 316)
   )
  :method-count-assert 38
  :size-assert         #x140
  :flag-assert         #x2600c00140
  (:methods
    (sew-plat-updown-method-37 () none) ;; 37
    )
  (:state-methods
    active ;; 36
    idle ;; 35
    )
  )
|#

#|
(deftype sew-slide-step (sew-plat-updown)
  ((last-played-start? basic  :offset-assert 320)
   )
  :method-count-assert 38
  :size-assert         #x144
  :flag-assert         #x2600d00144
  (:state-methods
    active ;; 36
    )
  )
|#

#|
(deftype sew-moving-step-a (sew-plat-updown)
  ((last-played-start? basic  :offset-assert 320)
   (last-val           float  :offset-assert 324)
   )
  :method-count-assert 38
  :size-assert         #x148
  :flag-assert         #x2600d00148
  (:state-methods
    active ;; 36
    )
  )
|#

#|
(deftype sew-moving-step-b (process-drawable)
  ((sync           sync-linear :inline :offset-assert 200)
   (num-steps      int8                :offset-assert 216)
   (step-delay     uint64              :offset-assert 224)
   (start-step-pos vector      :inline :offset-assert 240)
   (end-step-pos   vector      :inline :offset-assert 256)
   (last-sync-val  float               :offset-assert 272)
   (sound-idle     uint32              :offset-assert 276)
   )
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00a00118
  (:methods
    (sew-moving-step-b-method-22 () none) ;; 22
    (sew-moving-step-b-method-23 () none) ;; 23
    (sew-moving-step-b-method-24 () none) ;; 24
    (sew-moving-step-b-method-25 () none) ;; 25
    (sew-moving-step-b-method-26 () none) ;; 26
    )
  (:state-methods
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype sew-moving-step-b-step (base-plat)
  ((start-pos      vector      :inline :offset-assert 272)
   (end-pos        vector      :inline :offset-assert 288)
   (start-path-pos vector      :inline :offset-assert 304)
   (end-path-pos   vector      :inline :offset-assert 320)
   (sync           sync-linear :inline :offset-assert 336)
   (path-pos       float               :offset-assert 352)
   (last-t-val     float               :offset-assert 356)
   )
  :method-count-assert 37
  :size-assert         #x168
  :flag-assert         #x2500f00168
  (:state-methods
    active ;; 35
    die ;; 36
    )
  )
|#

#|
(deftype sew-moving-step-b-step-param (structure)
  ((start-pos vector :inline :offset-assert 0)
   (end-pos   vector :inline :offset-assert 16)
   (ent       basic          :offset-assert 32)
   (period    uint64         :offset-assert 40)
   (offset    float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype sew-rove-plat (sew-plat-updown)
  ((sound-id uint32  :offset-assert 320)
   )
  :method-count-assert 38
  :size-assert         #x144
  :flag-assert         #x2600d00144
  (:state-methods
    active ;; 36
    )
  )
|#

#|
(deftype sew-move-plat (base-plat)
  ((sound-id          uint32    :offset-assert 272)
   (positions         UNKNOWN 2 :offset-assert 288)
   (current-pos-index int8      :offset-assert 320)
   (dest-pos-index    int8      :offset-assert 321)
   (speed             float     :offset-assert 324)
   )
  :method-count-assert 38
  :size-assert         #x148
  :flag-assert         #x2600d00148
  (:methods
    (sew-move-plat-method-37 () none) ;; 37
    )
  (:state-methods
    active ;; 36
    waiting ;; 35
    )
  )
|#

;; (define-extern sew-moving-step-b-step-init-by-other function)
;; (define-extern fmod function)
;; (define-extern spawn-moving-step-b-step function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sew-whirlpool                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sew-whirlpool (process-drawable)
  ((spool-sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; saberfish                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype saberfish-jump-info (structure)
  ((windup-anim uint32  :offset-assert 0)
   (air-anim    uint32  :offset-assert 4)
   (land-anim   uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype saberfish-init-by-other-params (enemy-init-by-other-params)
  ((spawn-parent  uint64             :offset-assert 48)
   (message       basic              :offset-assert 56)
   (pos           vector     :inline :offset-assert 64)
   (orient        quaternion :inline :offset-assert 80)
   (initial-state basic              :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype saberfish-spawner-query-msg (structure)
  ((query-type             uint64         :offset-assert 0)
   (closest-nav-mesh-index int8           :offset-assert 8)
   (pos                    vector :inline :offset-assert 16)
   (behavior               uint64         :offset-assert 32)
   (nav-mesh-index         int8           :offset-assert 8)
   (mesh                   basic          :offset-assert 16)
   (in-water?              basic          :offset-assert 40)
   (can-go-to-ground?      basic          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype saberfish (nav-enemy)
  ((initial-y-angle                float                       :offset-assert 620)
   (last-attack-time               uint64                      :offset-assert 624)
   (in-pursuit?                    basic                       :offset-assert 632)
   (flee-to-readjust?              basic                       :offset-assert 636)
   (use-stored-flee-point?         basic                       :offset-assert 640)
   (scare-start-time               uint64                      :offset-assert 648)
   (scare-time                     uint64                      :offset-assert 656)
   (jump-point-start               vector              :inline :offset-assert 672)
   (jump-point-end                 vector              :inline :offset-assert 688)
   (align                          basic                       :offset-assert 148)
   (jump                           saberfish-jump-info :inline :offset-assert 708)
   (flee-point-temp                vector              :inline :offset-assert 720)
   (last-land-check-time           uint64                      :offset-assert 736)
   (last-target-check-time         uint64                      :offset-assert 744)
   (is-submerged?                  basic                       :offset-assert 752)
   (current-nav-mesh-index         int8                        :offset-assert 756)
   (dest-nav-mesh-index            int8                        :offset-assert 757)
   (desired-dest-nav-point         vector              :inline :offset-assert 768)
   (desired-dest-mesh-index        int8                        :offset-assert 784)
   (flee-point                     vector              :inline :offset-assert 800)
   (spawn-parent                   uint64                      :offset-assert 816)
   (pos-start                      vector              :inline :offset-assert 832)
   (quat-start                     quaternion          :inline :offset-assert 848)
   (move-to-ground?                basic                       :offset-assert 864)
   (swim-final-rotate-deg          float                       :offset-assert 868)
   (swim-travel-anim               int8                        :offset-assert 872)
   (swim-speed                     float                       :offset-assert 876)
   (swim-rotate-last-dot           float                       :offset-assert 880)
   (swim-anim-last-dot             float                       :offset-assert 884)
   (last-swim-flip-time            uint64                      :offset-assert 888)
   (saberfish-y-rotate             float                       :offset-assert 896)
   (doing-180-spin?                basic                       :offset-assert 900)
   (adjusted-y-yet?                basic                       :offset-assert 904)
   (attack-dir                     vector              :inline :offset-assert 912)
   (rotate-anim-quat               quaternion          :inline :offset-assert 928)
   (post-spinflip-expected-heading vector              :inline :offset-assert 944)
   (nav-velocity                   vector              :inline :offset-assert 960)
   (nav-dir                        vector              :inline :offset-assert 976)
   (initial-state                  basic                       :offset-assert 992)
   (knocked-under-water?           basic                       :offset-assert 996)
   (ground-state                   uint8                       :offset-assert 1000)
   (jump-start-ground-state        uint8                       :offset-assert 1001)
   (ground-only?                   basic                       :offset-assert 1004)
   )
  :method-count-assert 245
  :size-assert         #x3f0
  :flag-assert         #xf5037003f0
  (:methods
    (saberfish-method-195 () none) ;; 195
    (saberfish-method-199 () none) ;; 199
    (saberfish-method-201 () none) ;; 201
    (saberfish-method-202 () none) ;; 202
    (saberfish-method-210 () none) ;; 210
    (saberfish-method-214 () none) ;; 214
    (saberfish-method-215 () none) ;; 215
    (saberfish-method-216 () none) ;; 216
    (saberfish-method-217 () none) ;; 217
    (saberfish-method-218 () none) ;; 218
    (saberfish-method-219 () none) ;; 219
    (saberfish-method-220 () none) ;; 220
    (saberfish-method-221 () none) ;; 221
    (saberfish-method-222 () none) ;; 222
    (saberfish-method-223 () none) ;; 223
    (saberfish-method-224 () none) ;; 224
    (saberfish-method-225 () none) ;; 225
    (saberfish-method-226 () none) ;; 226
    (saberfish-method-227 () none) ;; 227
    (saberfish-method-228 () none) ;; 228
    (saberfish-method-229 () none) ;; 229
    (saberfish-method-230 () none) ;; 230
    (saberfish-method-231 () none) ;; 231
    (saberfish-method-232 () none) ;; 232
    (saberfish-method-233 () none) ;; 233
    (saberfish-method-234 () none) ;; 234
    (saberfish-method-235 () none) ;; 235
    (saberfish-method-236 () none) ;; 236
    (saberfish-method-237 () none) ;; 237
    (saberfish-method-238 () none) ;; 238
    (saberfish-method-239 () none) ;; 239
    (saberfish-method-240 () none) ;; 240
    (saberfish-method-241 () none) ;; 241
    (saberfish-method-242 () none) ;; 242
    (saberfish-method-243 () none) ;; 243
    (saberfish-method-244 () none) ;; 244
    )
  (:state-methods
    saberfish-swimming ;; 213
    saberfish-crawl-out-of-tube ;; 209
    notice ;; 35
    command-mode ;; 206
    knocked-recover ;; 32
    flee ;; 36
    transition-terrain-move-towards-initial-jump ;; 196
    transition-terrain-orient-towards-initial-jump ;; 197
    transition-terrain-jump ;; 198
    knocked ;; 31
    water-impact ;; 205
    base-saberfish-state ;; 203
    attack ;; 190
    diving-into-water ;; 204
    hit ;; 30
    knocked-recover-water ;; 212
    hostile ;; 38
    stare-idle ;; 194
    idle ;; 33
    swim-180-spin ;; 207
    hostile-orient ;; 191
    saberfish-sitting-on-land ;; 211
    stare ;; 37
    spin-attack ;; 193
    water-land ;; 200
    active ;; 34
    swimming-base ;; 208
    swimming-hostile ;; 192
    )
  )
|#

;; (define-extern find-behavior<-in-water? function)
;; (define-extern in-water<-find-behavior function)
;; (define-extern *saberfish-nav-enemy-info* nav-enemy-info)
;; (define-extern get-spawn-parent function)
;; (define-extern saberfish-water-post function)
;; (define-extern saberfish-chase-post function)
;; (define-extern saberfish-orient-code-setup function)
;; (define-extern saberfish-orient-code-single-pass function)
;; (define-extern saberfish-orient-code function)
;; (define-extern saberfish-swim-code function)
;; (define-extern saberfish-swim-travel-trans function)
;; (define-extern swimming-base-exit function)
;; (define-extern transition-terrain-jump-from-water state)
;; (define-extern jump-from-land-dive-anim function)
;; (define-extern transition-terrain-jump-from-land state)
;; (define-extern transition-pursue-behavior function)
;; (define-extern turbo-swim function)
;; (define-extern saberfish-command-event-handler function)
;; (define-extern saberfish-init-by-other function)
;; (define-extern find-ground-for-obj function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; saberfish-spawner              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; path-index-array is already defined!

#|
(deftype nav-mesh-jump (structure)
  ((mesh      basic  :offset-assert 0)
   (paths     basic  :offset-assert 4)
   (in-water? basic  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype nav-mesh-jump-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype saberfish-spawner-command (structure)
  ((command       basic   :offset-assert 0)
   (message       basic   :offset-assert 4)
   (initial-state basic   :offset-assert 8)
   (parent        uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype saberfish-spawn-query (structure)
  ((alive-count int16  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )
|#

#|
(deftype saberfish-spawner (process-drawable)
  ((jump-paths            basic       :offset-assert 200)
   (nav-mesh-jumps        basic       :offset-assert 204)
   (live-count            int8        :offset-assert 208)
   (last-spawned-process  uint64      :offset-assert 216)
   (mgr-parent            uint64      :offset-assert 224)
   (spawned-saberfish     UNKNOWN 128 :offset-assert 232)
   (num-spawned-saberfish int32       :offset-assert 1256)
   )
  :method-count-assert 27
  :size-assert         #x4ec
  :flag-assert         #x1b047004ec
  (:methods
    (saberfish-spawner-method-21 () none) ;; 21
    (saberfish-spawner-method-22 () none) ;; 22
    (saberfish-spawner-method-23 () none) ;; 23
    (saberfish-spawner-method-24 () none) ;; 24
    (saberfish-spawner-method-25 () none) ;; 25
    (saberfish-spawner-method-26 () none) ;; 26
    )
  (:state-methods
    saberfish-spawner-base-state ;; 20
    )
  )
|#

#|
(deftype saberfish-spawn-manager-base (process)
  ((actor-group           uint32  :offset-assert 124)
   (actor-group-count     int32   :offset-assert 128)
   (total-num-spawned     int32   :offset-assert 132)
   (total-alive           int32   :offset-assert 136)
   (spawn-timer           uint64  :offset-assert 140)
   (state-time            uint64  :offset-assert 148)
   (allowed-on-land-count int8    :offset-assert 156)
   )
  :method-count-assert 19
  :size-assert         #xa1
  :flag-assert         #x13003000a1
  (:methods
    (saberfish-spawn-manager-base-method-16 () none) ;; 16
    (saberfish-spawn-manager-base-method-17 () none) ;; 17
    (saberfish-spawn-manager-base-method-18 () none) ;; 18
    )
  (:state-methods
    idle ;; 15
    active ;; 14
    )
  )
|#

#|
(deftype saberfish-mgr-room1 (saberfish-spawn-manager-base)
  ()
  :method-count-assert 19
  :size-assert         #xa1
  :flag-assert         #x13003000a1
  (:state-methods
    active ;; 14
    )
  )
|#

#|
(deftype saberfish-mgr-room2 (saberfish-spawn-manager-base)
  ()
  :method-count-assert 22
  :size-assert         #xa1
  :flag-assert         #x16003000a1
  (:state-methods
    stage-2 ;; 21
    stage-1 ;; 20
    stage-0 ;; 19
    )
  )
|#

;; (define-extern *temporary-closest-nav-mesh-indices* object)
;; (define-extern *temporary-num-paths-per-nav-mesh-count* object)
;; (define-extern saberfish-mgr-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; needle-fish                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype needle-fish-shot (projectile-bounce)
  ((scale float  :offset-assert 548)
   )
  :method-count-assert 44
  :size-assert         #x228
  :flag-assert         #x2c01b00228
  )
|#

#|
(deftype needle-fish-chain-physics (chain-physics)
  ()
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  )
|#

#|
(deftype needle-fish (nav-enemy)
  ((scared-timer     uint64  :offset-assert 624)
   (tail             basic   :offset-assert 632)
   (tail-initialized basic   :offset-assert 636)
   (tail-clock       float   :offset-assert 640)
   (tail-blend       float   :offset-assert 644)
   )
  :method-count-assert 192
  :size-assert         #x288
  :flag-assert         #xc002100288
  (:state-methods
    hostile ;; 38
    stare ;; 37
    explode ;; 191
    notice ;; 35
    attack ;; 190
    active ;; 34
    )
  )
|#

#|
(deftype sew-needle-fish (needle-fish)
  ()
  :method-count-assert 192
  :size-assert         #x288
  :flag-assert         #xc002100288
  )
|#

;; (define-extern spawn-needle-fish-projectile function)
;; (define-extern *needle-fish-spike-tbl* array)
;; (define-extern *needle-fish-chain-setup* array)
;; (define-extern *fact-info-needle-fish-defaults* fact-info-enemy-defaults)
;; (define-extern *needle-fish-nav-enemy-info* nav-enemy-info)
;; (define-extern needle-fish-joint-mod-tail function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-frog                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sewer-frog (nav-enemy)
  ((scared-timer uint64  :offset-assert 624)
   )
  :method-count-assert 193
  :size-assert         #x278
  :flag-assert         #xc102000278
  (:methods
    (sewer-frog-method-192 () none) ;; 192
    )
  (:state-methods
    knocked ;; 31
    flee ;; 36
    hostile ;; 38
    stare ;; 37
    attack ;; 190
    active ;; 34
    turn-to-face-focus ;; 191
    )
  )
|#

;; (define-extern *fact-info-sewer-frog-defaults* fact-info-enemy-defaults)
;; (define-extern *sewer-frog-nav-enemy-info* nav-enemy-info)
;; (define-extern sewer-frog-hop function)
;; (define-extern sewer-frog-turn-to-face function)
;; (define-extern sewer-frog-check-hop function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spydroid-orig                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spydroid-orig (nav-enemy)
  ((old-y-deg    float     :offset-assert 620)
   (diff-angle   float     :offset-assert 624)
   (flags        uint64    :offset-assert 632)
   (lightning    UNKNOWN 4 :offset-assert 640)
   (floor        float     :offset-assert 656)
   (explode-part basic     :offset-assert 660)
   )
  :method-count-assert 192
  :size-assert         #x298
  :flag-assert         #xc002200298
  (:state-methods
    stare ;; 37
    pacing ;; 156
    circling ;; 157
    hostile ;; 38
    attack ;; 190
    die-falling ;; 41
    notice ;; 35
    explode ;; 191
    )
  )
|#

;; (define-extern *spydroid-orig-exploder-params* joint-exploder-static-params)
;; (define-extern *fact-info-spydroid-orig-defaults* fact-info-enemy-defaults)
;; (define-extern *spydroid-orig-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flyingsaw                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flyingsaw-node (structure)
  ((position   vector :inline :offset-assert 0)
   (spark      vector :inline :offset-assert 16)
   (make-spark basic          :offset-assert 32)
   (pos-x      float          :offset-assert 0)
   (pos-y      float          :offset-assert 4)
   (pos-z      float          :offset-assert 8)
   (spark-x    float          :offset-assert 16)
   (spark-y    float          :offset-assert 20)
   (spark-z    float          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype flyingsaw-graph (structure)
  ((node-count uint16  :offset-assert 0)
   (node       uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype flyingsaw (process-drawable)
  ((no-collision-timer uint64                      :offset-assert 200)
   (graph              flyingsaw-graph             :offset-assert 208)
   (current-node       uint16                      :offset-assert 212)
   (hip-angle          float                       :offset-assert 216)
   (blade-angle        float                       :offset-assert 220)
   (spin-1             basic                       :offset-assert 224)
   (spin-2             basic                       :offset-assert 228)
   (spin-3             basic                       :offset-assert 232)
   (spin-4             basic                       :offset-assert 236)
   (base-quat          quaternion          :inline :offset-assert 240)
   (wobble-target      delayed-rand-vector :inline :offset-assert 256)
   (wobble             oscillating-vector  :inline :offset-assert 304)
   (fly-sound          uint32                      :offset-assert 364)
   (fly-sound-playing  basic                       :offset-assert 368)
   (spark-timer        uint64                      :offset-assert 376)
   (spark-mat          matrix              :inline :offset-assert 384)
   )
  :method-count-assert 21
  :size-assert         #x1c0
  :flag-assert         #x15014001c0
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *flyingsaw_2-graph* object)
;; (define-extern *flyingsaw_3-graph* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sewer-texture                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *sewc-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewd-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewe-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewg-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewh-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewi-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewj-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewl-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewm-water-texture-anim-array* texture-anim-array)
;; (define-extern *sewn-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-hopper                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kg-hopper (nav-enemy)
  ((speed-y               float                      :offset-assert 620)
   (accel-y               float                      :offset-assert 624)
   (next-jump-time        int32                      :offset-assert 628)
   (path-intro            basic                      :offset-assert 632)
   (can-go-knocked?       basic                      :offset-assert 636)
   (land-anim-index       int32                      :offset-assert 640)
   (step-num              int32                      :offset-assert 644)
   (best-point            vector             :inline :offset-assert 656)
   (best-score            float                      :offset-assert 672)
   (origin                vector             :inline :offset-assert 688)
   (direction             vector             :inline :offset-assert 704)
   (jump-dist             float                      :offset-assert 720)
   (side                  float                      :offset-assert 724)
   (jump-start-anim       uint32                     :offset-assert 728)
   (jump-air-anim         uint32                     :offset-assert 732)
   (jump-land-anim        uint32                     :offset-assert 736)
   (jump-height-min       float                      :offset-assert 740)
   (jump-anim-start-frame float                      :offset-assert 744)
   (minimap               connection-minimap         :offset-assert 748)
   )
  :method-count-assert 194
  :size-assert         #x2f0
  :flag-assert         #xc2027002f0
  (:methods
    (kg-hopper-method-191 () none) ;; 191
    (kg-hopper-method-192 () none) ;; 192
    (kg-hopper-method-193 () none) ;; 193
    )
  (:state-methods
    notice ;; 35
    hostile ;; 38
    stare ;; 37
    jump ;; 44
    ambush ;; 47
    active ;; 34
    explode ;; 190
    )
  )
|#

#|
(deftype kg-hopper-anim-info (structure)
  ((hit-anim-index  int32  :offset-assert 0)
   (land-anim-index int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype kg-hopper-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (yellow-hit-anim UNKNOWN 3 :offset-assert 8)
   (blue-hit-anim   UNKNOWN 3 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

;; (define-extern *kg-hopper-debris-params* debris-static-params)
;; (define-extern *kg-hopper-global-info* kg-hopper-global-info)
;; (define-extern *kg-hopper-nav-enemy-info* nav-enemy-info)
;; (define-extern *kg-hopper-next-jump-time* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-grenadier                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bank-info (structure)
  ((circle      sphere :inline :offset-assert 0)
   (tangent-pos vector :inline :offset-assert 16)
   (final-pos   vector :inline :offset-assert 32)
   (final-dir   vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype neo-grenadier (nav-enemy)
  ((shot-trajectory           trajectory            :inline :offset-assert 624)
   (hostile-path              basic                         :offset-assert 664)
   (bank                      bank-info             :inline :offset-assert 672)
   (joint                     joint-mod-blend-world         :offset-assert 736)
   (heading                   basic                         :offset-assert 740)
   (move-pos                  vector                :inline :offset-assert 752)
   (move-angle                float                         :offset-assert 768)
   (status-flags              uint64                        :offset-assert 776)
   (suppress-knockaside-timer uint64                        :offset-assert 784)
   )
  :method-count-assert 196
  :size-assert         #x318
  :flag-assert         #xc402a00318
  (:methods
    (neo-grenadier-method-193 () none) ;; 193
    (neo-grenadier-method-194 () none) ;; 194
    (neo-grenadier-method-195 () none) ;; 195
    )
  (:state-methods
    victory ;; 39
    hit ;; 30
    spin-kick ;; 192
    hostile ;; 38
    backup ;; 191
    notice ;; 35
    attack ;; 190
    active ;; 34
    )
  )
|#

;; (define-extern *fact-info-neo-grenadier-defaults* fact-info-enemy-defaults)
;; (define-extern *neo-grenadier-nav-enemy-info* nav-enemy-info)
;; (define-extern pos-rotate-y<-vector+vector function) ;; (function vector vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-juicer                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype neo-juicer-shot (projectile)
  ((lightning UNKNOWN 5 :offset-assert 512)
   (victim    uint64    :offset-assert 536)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    dissipate ;; 21
    )
  )
|#

#|
(deftype neo-juicer-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype neo-juicer-global-info (basic)
  ((prev-yellow-hit int8      :offset-assert 4)
   (prev-blue-hit   int8      :offset-assert 5)
   (idle-anim       UNKNOWN 3 :offset-assert 8)
   (patrol-anim     UNKNOWN 2 :offset-assert 20)
   (notice-anim     UNKNOWN 2 :offset-assert 28)
   (charge-anim     UNKNOWN 2 :offset-assert 36)
   (knocked-anim    UNKNOWN 2 :offset-assert 44)
   (celebrate-anim  UNKNOWN 2 :offset-assert 52)
   (yellow-hit-anim UNKNOWN 4 :offset-assert 60)
   (blue-hit-anim   UNKNOWN 6 :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype neo-juicer (nav-enemy)
  ((los                los-control :inline :offset-assert 624)
   (intro-path         basic               :offset-assert 788)
   (joint              basic               :offset-assert 792)
   (joint-enable       basic               :offset-assert 796)
   (joint-blend        float               :offset-assert 800)
   (last-fire-time     uint64              :offset-assert 808)
   (heading            basic               :offset-assert 816)
   (move-angle         float               :offset-assert 820)
   (torso-track-player basic               :offset-assert 824)
   (circle-backward?   basic               :offset-assert 832)
   (using-turn-anim    basic               :offset-assert 836)
   (hit-focus          basic               :offset-assert 840)
   (ambush-path-pt     int8                :offset-assert 844)
   (charge-index       int8                :offset-assert 845)
   (hostile-dest       vector      :inline :offset-assert 848)
   (current-projectile uint64              :offset-assert 864)
   )
  :method-count-assert 197
  :size-assert         #x368
  :flag-assert         #xc502f00368
  (:methods
    (neo-juicer-method-192 () none) ;; 192
    (neo-juicer-method-193 () none) ;; 193
    (neo-juicer-method-194 () none) ;; 194
    (neo-juicer-method-195 () none) ;; 195
    (neo-juicer-method-196 () none) ;; 196
    )
  (:state-methods
    stare ;; 37
    hit ;; 30
    circling ;; 157
    taunt ;; 155
    hostile ;; 38
    victory ;; 39
    attack ;; 191
    notice ;; 35
    ambush-cont ;; 190
    ambush ;; 47
    active ;; 34
    )
  )
|#

;; (define-extern neo-juicer-proj-move function)
;; (define-extern *neo-juicer-global-info* neo-juicer-global-info)
;; (define-extern *fact-info-neo-juicer-defaults* fact-info-enemy-defaults)
;; (define-extern *neo-juicer-nav-enemy-info* nav-enemy-info)
;; (define-extern neo-juicer-face-player-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-wasp-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-wasp                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-wasp-shot (metalhead-shot)
  ()
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype mh-wasp (hover-enemy)
  ((gun-jmod              joint-mod-rotate-local :inline :offset-assert 976)
   (entity-group          basic                          :offset-assert 1008)
   (smoke-part            basic                          :offset-assert 1012)
   (engine-part           basic                          :offset-assert 1016)
   (old-gravity           float                          :offset-assert 1024)
   (knocked-anim          int32                          :offset-assert 1028)
   (knocked-recover-anim  int32                          :offset-assert 1032)
   (last-fire-time        uint64                         :offset-assert 1040)
   (bridge-index          int32                          :offset-assert 1048)
   (gun-x-angle           float                          :offset-assert 1052)
   (gun-x-angle-final     float                          :offset-assert 1056)
   (path-u                float                          :offset-assert 1060)
   (path-du               float                          :offset-assert 1064)
   (path-du-final         float                          :offset-assert 1068)
   (path-dest             float                          :offset-assert 1072)
   (sound-id              uint32                         :offset-assert 1076)
   (attack-wait-min       float                          :offset-assert 1080)
   (attack-wait-max       float                          :offset-assert 1084)
   (attack-miss-dist-min  float                          :offset-assert 1088)
   (attack-miss-dist-max  float                          :offset-assert 1092)
   (attack-miss-dist-curr float                          :offset-assert 1096)
   )
  :method-count-assert 181
  :size-assert         #x44c
  :flag-assert         #xb503d0044c
  (:methods
    (mh-wasp-method-180 () none) ;; 180
    )
  (:state-methods
    die-explode ;; 179
    knocked-recover ;; 32
    hostile ;; 38
    die-now ;; 178
    notice ;; 35
    attack ;; 177
    ambush ;; 47
    )
  )
|#

;; (define-extern *mh-wasp-exploder-params* joint-exploder-static-params)
;; (define-extern *fact-info-mh-wasp-defaults* fact-info-enemy-defaults)
;; (define-extern *mh-wasp-enemy-info* enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bombbot-node (structure)
  ((position    vector :inline :offset-assert 0)
   (nav-mesh-id uint32         :offset-assert 16)
   (pos-x       float          :offset-assert 0)
   (pos-y       float          :offset-assert 4)
   (pos-z       float          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype bombbot-path (structure)
  ((node-count uint16                       :offset-assert 0)
   (node       (inline-array bombbot-node)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot-path                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *bombbot-path-1* object) ;; bombbot-path
;; (define-extern *bombbot-path-2* object) ;; bombbot-path
;; (define-extern *bombbot-path-3* object) ;; bombbot-path

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bombbot                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bombbot-hud (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype bombbot-bomb (process-focusable)
  ((explode-part        basic          :offset-assert 208)
   (rot-axis            vector :inline :offset-assert 224)
   (rot-angle           float          :offset-assert 240)
   (warning-glow-part   basic          :offset-assert 244)
   (next-countdown-tick uint64         :offset-assert 248)
   (fizzle-timer        uint64         :offset-assert 256)
   )
  :method-count-assert 34
  :size-assert         #x108
  :flag-assert         #x2200900108
  (:methods
    (bombbot-bomb-method-32 () none) ;; 32
    (bombbot-bomb-method-33 () none) ;; 33
    )
  (:state-methods
    idle ;; 28
    smoke ;; 29
    explode ;; 30
    back ;; 31
    )
  )
|#

#|
(deftype bombbot-foot (structure)
  ((pos-offset    vector :inline :offset-assert 0)
   (joint-index   uint32         :offset-assert 16)
   (offset        float          :offset-assert 20)
   (position      vector :inline :offset-assert 32)
   (next-position vector :inline :offset-assert 48)
   (real-position vector :inline :offset-assert 64)
   (speed         vector :inline :offset-assert 80)
   (moving        symbol         :offset-assert 96) ;; guessed by decompiler
   (main-y        float          :offset-assert 100)
   (delta-y       float          :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  )
|#

#|
(deftype bombbot (nav-enemy)
  ((joint-ik               joint-mod-ik                4       :offset-assert 620) ;; guessed by decompiler
   (feet                   bombbot-foot                4       :offset-assert 640) ;; guessed by decompiler
   (legs-strength          float                       4       :offset-assert 1088) ;; guessed by decompiler
   (last-trans             vector                      :inline :offset-assert 1104)
   (linear-speed           vector                      :inline :offset-assert 1120)
   (last-quat              quaternion                  :inline :offset-assert 1136)
   (y-angular-velocity     float                               :offset-assert 1152)
   (main-quat              quaternion                  :inline :offset-assert 1168)
   (main-spd-y             float                               :offset-assert 1184)
   (main-pos-y             float                               :offset-assert 1188)
   (main-pos               vector                      :inline :offset-assert 1200)
   (city-path              bombbot-path                        :offset-assert 1216)
   (current-node           uint32                              :offset-assert 1220)
   (shot-count             uint32                              :offset-assert 1224)
   (next-shoot             uint64                              :offset-assert 1232)
   (stop-shoot             uint64                              :offset-assert 1240)
   (next-target            uint64                              :offset-assert 1248)
   (start-target           uint64                              :offset-assert 1256)
   (beep-time              uint64                              :offset-assert 1264) ;; time-frame
   (target-pos             vector                      :inline :offset-assert 1280)
   (start-target-pos       vector                      :inline :offset-assert 1296)
   (start-target-vel       vector                      :inline :offset-assert 1312)
   (target-delta           vector                      :inline :offset-assert 1328)
   (top-quat               quaternion                  :inline :offset-assert 1344)
   (gun-swivel-quat        quaternion                  :inline :offset-assert 1360)
   (gun-quat               quaternion                  :inline :offset-assert 1376)
   (angle-turret           float                               :offset-assert 1392)
   (angle-gun              float                               :offset-assert 1396)
   (extra-angle-gun        float                               :offset-assert 1400)
   (drop-angle             float                               :offset-assert 1404)
   (drop-num               uint32                              :offset-assert 1408)
   (hit-axis               vector                      :inline :offset-assert 1424)
   (rigidbody              rigid-body-control                  :offset-assert 1440) ;; guessed by decompiler
   (info                   rigid-body-object-constants         :offset-assert 1444)
   (explosing              symbol                              :offset-assert 1448) ;; guessed by decompiler
   (minimap                connection-minimap                  :offset-assert 1452)
   (head-sound             sound-id                            :offset-assert 1456) ;; guessed by decompiler
   (cannon-sound           sound-id                            :offset-assert 1460) ;; guessed by decompiler
   (last-head-roty-speed   float                               :offset-assert 1464)
   (head-roty-speed        float                               :offset-assert 1468)
   (last-cannon-roty-speed float                               :offset-assert 1472)
   (cannon-roty-speed      float                               :offset-assert 1476)
   (shoot-duration         float                               :offset-assert 1480)
   (y-angle                float                               :offset-assert 1484)
   (gun-rotation-speed     float                               :offset-assert 1488)
   (gun-type               uint32                              :offset-assert 1492)
   (drop-mask              uint32                              :offset-assert 1496)
   (attacker-info          city-attacker-info                  :offset-assert 1500)
   (mission-squad          basic                               :offset-assert 1504)
   (max-hit-points         float                               :offset-assert 1508)
   )
  :method-count-assert 209
  :size-assert         #x5e8
  :flag-assert         #xd1057005e8
  (:methods
    (bombbot-method-192 () none) ;; 192
    (bombbot-method-194 () none) ;; 194
    (bombbot-method-195 () none) ;; 195
    (bombbot-method-196 () none) ;; 196
    (bombbot-method-197 () none) ;; 197
    (bombbot-method-198 () none) ;; 198
    (bombbot-method-199 () none) ;; 199
    (bombbot-method-200 () none) ;; 200
    (bombbot-method-201 () none) ;; 201
    (bombbot-method-202 () none) ;; 202
    (bombbot-method-203 () none) ;; 203
    (bombbot-method-204 () none) ;; 204
    (bombbot-method-205 () none) ;; 205
    (bombbot-method-206 () none) ;; 206
    (bombbot-method-207 () none) ;; 207
    (bombbot-method-208 () none) ;; 208
    )
  (:state-methods
    explode ;; 190
    die ;; 40
    drop-bombs ;; 193
    hostile ;; 38
    blow-wall ;; 191
    notice ;; 35
    )
  )
|#

#|
(deftype bombbot-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype spring-setup (structure)
  ((bpos1 vector  :offset-assert 0)
   (wpos2 vector  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype bombbot-spawn-params (structure)
  ((position    vector       :inline :offset-assert 0)
   (quat        quaternion   :inline :offset-assert 16)
   (nav-mesh    basic                :offset-assert 32)
   (path        bombbot-path         :offset-assert 36)
   (first-node  uint32               :offset-assert 40)
   (stop-offset float                :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype bomb-bot (bombbot)
  ()
  :method-count-assert 209
  :size-assert         #x5e8
  :flag-assert         #xd1057005e8
  (:state-methods
    hostile ;; 38
    )
  )
|#

#|
(deftype bombbot-player (bombbot)
  ((camera-x-angle float   :offset-assert 1512)
   (hold-fire      basic   :offset-assert 1516)
   (hold-fire-time uint64  :offset-assert 1520)
   (health-hud     uint64  :offset-assert 1528)
   )
  :method-count-assert 210
  :size-assert         #x600
  :flag-assert         #xd205800600
  (:state-methods
    done ;; 209
    explode ;; 190
    hostile ;; 38
    )
  )
|#

#|
(deftype task-manager-blow-barricade (task-manager)
  ((check-timer       uint64                     :offset-assert 236)
   (bombbot-h         uint64                     :offset-assert 244)
   (actor-group       uint32                     :offset-assert 252)
   (actor-group-count int32                      :offset-assert 256)
   (done?             int32                      :offset-assert 260)
   (minimap           connection-minimap         :offset-assert 264)
   (wall-h            uint64                     :offset-assert 268)
   (start-point       vector             :inline :offset-assert 284)
   )
  :method-count-assert 33
  :size-assert         #x130
  :flag-assert         #x2100b00130
  (:methods
    (task-manager-blow-barricade-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-port-fight (task-manager)
  ((check-timer        uint64               :offset-assert 236)
   (bombbot-h          UNKNOWN            4 :offset-assert 244)
   (actor-group        uint32               :offset-assert 276)
   (actor-group-count  int32                :offset-assert 280)
   (done?              int32                :offset-assert 284)
   (minimap            connection-minimap   :offset-assert 288)
   (min-time           uint32               :offset-assert 292)
   (hud-timer          uint64               :offset-assert 196)
   (intro-state        int32                :offset-assert 308)
   (intro-time         uint64               :offset-assert 228)
   (target-far-enough? basic                :offset-assert 324)
   )
  :method-count-assert 34
  :size-assert         #x14c
  :flag-assert         #x2200d0014c
  (:methods
    (task-manager-port-fight-method-33 () none) ;; 33
    )
  (:state-methods
    wait ;; 14
    fail-screen ;; 32
    active ;; 15
    )
  )
|#

;; (define-extern *bombbot-hint* object)
;; (define-extern *bombbot-hint-time* object)
;; (define-extern *bombbot-body-constants* object) ;; rigid-body-object-constants
;; (define-extern bombbot-bomb-handler function)
;; (define-extern *daxter-speech* object)
;; (define-extern bombbot-bomb-reaction function)
;; (define-extern bombbot-bomb-init-by-other function)
;; (define-extern *bombbot-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern *bombbot-ik-limb-setup* array)
;; (define-extern bombbot-do-spline function) ;; (function vector vector vector vector vector float vector)
;; (define-extern spawn-bombbot-projectile function)
;; (define-extern *bombbot-debris-params* debris-static-params)
;; (define-extern bombbot-callback function) ;; (function cspace transformq none)
;; (define-extern bombbot-head-callback function) ;; (function cspace transformq none)
;; (define-extern bombbot-gun-swivel-callback function) ;; (function cspace transformq none)
;; (define-extern bombbot-gun-callback function) ;; (function cspace transformq none)
;; (define-extern *bombbot-spring-setup* array) ;; (array spring-setup)
;; (define-extern bombbot-init-by-other function) ;; (function bombbot-spawn-params none :behavior bombbot)
;; (define-extern bombbot-player-init-by-other function)
;; (define-extern *blow-barricade-kg-squad-member-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasdoors-init                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wasdoors-manager (process)
  ((name             basic                 :offset-assert 0)
   (mask             process-mask          :offset-assert 4)
   (clock            basic                 :offset-assert 8)
   (parent           uint32                :offset-assert 12)
   (brother          uint32                :offset-assert 16)
   (child            uint32                :offset-assert 20)
   (ppointer         uint32                :offset-assert 24)
   (self             basic                 :offset-assert 28)
   (pool             basic                 :offset-assert 32)
   (status           basic                 :offset-assert 36)
   (pid              int32                 :offset-assert 40)
   (main-thread      basic                 :offset-assert 44)
   (top-thread       basic                 :offset-assert 48)
   (entity           basic                 :offset-assert 52)
   (level            basic                 :offset-assert 56)
   (state            basic                 :offset-assert 60)
   (prev-state       basic                 :offset-assert 64)
   (next-state       basic                 :offset-assert 68)
   (state-stack      basic                 :offset-assert 72)
   (trans-hook       basic                 :offset-assert 76)
   (post-hook        basic                 :offset-assert 80)
   (event-hook       basic                 :offset-assert 84)
   (allocated-length int32                 :offset-assert 88)
   (heap-base        uint32                :offset-assert 92)
   (heap-top         uint32                :offset-assert 96)
   (heap-cur         uint32                :offset-assert 100)
   (stack-frame-top  basic                 :offset-assert 104)
   (heap             kheap        :inline  :offset-assert 92)
   (connection-list  connectable  :inline  :offset-assert 108)
   (stack            UNKNOWN      :dynamic :offset-assert 124)
   )
  :method-count-assert 16
  :size-assert         #x80
  :flag-assert         #x1000000080
  (:methods
    (wasdoors-manager-method-15 () none) ;; 15
    )
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern wasdoors-point-inside? function)
;; (define-extern wasdoors-cleanup function)
;; (define-extern wasdoors-manager-init-by-other function)
;; (define-extern *wasdoors-manager* object)
;; (define-extern wasdoors-manager-start function)
;; (define-extern wasdoors-manager-kill function)
;; (define-extern wasdoors-activate function)
;; (define-extern wasdoors-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasdoors-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern do-stuff function)
;; (define-extern spt-birth-func-brightness-buggy-wasdoors-dirt function)
;; (define-extern spt-birth-func-part-wasdoors-buggy-skid-bits function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; h-torpedo                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype htorpedo (h-bike-c)
  ((speed                 float              :offset-assert 1296)
   (target-speed          float              :offset-assert 1300)
   (pitch                 float              :offset-assert 1304)
   (target-pitch          float              :offset-assert 1308)
   (max-pitch             float              :offset-assert 1312)
   (roll                  float              :offset-assert 1316)
   (target-roll           float              :offset-assert 1320)
   (turn-rate             float              :offset-assert 1324)
   (target-turn-rate      float              :offset-assert 1328)
   (ground-height         float              :offset-assert 1332)
   (ground-offset         float              :offset-assert 1336)
   (down-force            float              :offset-assert 1340)
   (want-jump?            basic              :offset-assert 1344)
   (UNKNOWN               UNKNOWN            :offset-assert -1) ;; field could not be read.
   (jump-state            uint8              :offset-assert 1360)
   (on-water?             basic              :offset-assert 1364)
   (cam-pitch             float              :offset-assert 1368)
   (cam-roll              float              :offset-assert 1372)
   (target-cam-roll       float              :offset-assert 1376)
   (based-cam-roll        float              :offset-assert 1380)
   (last-quat             quaternion :inline :offset-assert 1392)
   (override-camera?      basic              :offset-assert 1408)
   (under-water?          basic              :offset-assert 1412)
   (next-bob-cam-time     uint64             :offset-assert 1416)
   (thrust-sound          uint32             :offset-assert 1424)
   (ground-sound          uint32             :offset-assert 1428)
   (reverb-dest           float              :offset-assert 1432)
   (pitch-current         float              :offset-assert 1436)
   (ground-vol-current    float              :offset-assert 1440)
   (last-slice-val        float              :offset-assert 1444)
   (evasive-sound         uint32             :offset-assert 1448)
   (evasive-volume        float              :offset-assert 1452)
   (stopping-evasive?     basic              :offset-assert 1456)
   (spawn-splash?         basic              :offset-assert 1460)
   (wake-sound            uint32             :offset-assert 1464)
   (heat-haze             basic              :offset-assert 1468)
   (last-land-speech-time uint64             :offset-assert 1472)
   (last-jump-speech-time uint64             :offset-assert 1480)
   )
  :method-count-assert 171
  :size-assert         #x5d0
  :flag-assert         #xab055005d0
  (:methods
    (htorpedo-method-162 () none) ;; 162
    (htorpedo-method-164 () none) ;; 164
    (htorpedo-method-165 () none) ;; 165
    (htorpedo-method-166 () none) ;; 166
    (htorpedo-method-167 () none) ;; 167
    (htorpedo-method-168 () none) ;; 168
    (htorpedo-method-169 () none) ;; 169
    (htorpedo-method-170 () none) ;; 170
    )
  (:state-methods
    explode ;; 60
    player-control ;; 58
    hide ;; 163
    waiting ;; 57
    )
  )
|#

#|
(deftype light-trail-tracker-torpedo (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )
|#

;; (define-extern *growing-curve-torpedo* object)
;; (define-extern *water-simple-alpha-curve-fade-out-torpedo* object)
;; (define-extern *color-curve-tan-brown-torpedo* object)
;; (define-extern *water-simple-alpha-curve-in-torpedo* object)
;; (define-extern *torpedo-wake-trail* object)
;; (define-extern spt-func-nuke-water-splash function)
;; (define-extern *range-torp-explo-color* curve-color-fast)
;; (define-extern *range-torp-explo-alpha* curve2d-fast)
;; (define-extern *range-torp-explo-scale-x* curve2d-fast)
;; (define-extern *range-torp-explo-scale-y* curve2d-fast)
;; (define-extern *curve-torp-explo-alpha* curve2d-fast)
;; (define-extern *curve-torp-explo-scale-x* curve2d-fast)
;; (define-extern *curve-torp-explo-scale-y* curve2d-fast)
;; (define-extern *part-torpedo-explosion-texture-curve-settings* object)
;; (define-extern PHYSICS_SCALAR object)
;; (define-extern *torpedo-speech-list* object)
;; (define-extern *torpedo-jump-speech* array)
;; (define-extern *torpedo-land-speech* array)
;; (define-extern *h-torpedo-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-attack                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype port-attack-speech-instance (speech-instance)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype ctyport-mine-layout (structure)
  ((mine-type           uint64         :offset-assert 0)
   (num-mines           int8           :offset-assert 8)
   (inout?              basic          :offset-assert 12)
   (spin?               basic          :offset-assert 16)
   (active?             basic          :offset-assert 20)
   (checked-this-frame? basic          :offset-assert 24)
   (origin              vector :inline :offset-assert 32)
   (secondary-pos       vector :inline :offset-assert 48)
   (initial-angle       float          :offset-assert 64)
   (spacing             float          :offset-assert 68)
   (spinrate            float          :offset-assert 72)
   (period              float          :offset-assert 76)
   (offset              float          :offset-assert 80)
   (stored-handles      uint32         :offset-assert 84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )
|#

#|
(deftype ctyport-attack-package-info (structure)
  ((pos       vector :inline :offset-assert 0)
   (locked?   basic          :offset-assert 16)
   (on-water? basic          :offset-assert 20)
   (probe?    basic          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype ctyport-attack-hud (hud)
  ((pos-tt     float   :offset-assert 2756)
   (tt-current float   :offset-assert 2760)
   (tt-prev    float   :offset-assert 2764)
   (tt-next    float   :offset-assert 2768)
   (spike-time uint64  :offset-assert 2776)
   )
  :method-count-assert 27
  :size-assert         #xae0
  :flag-assert         #x1b0a600ae0
  )
|#

#|
(deftype ctyport-attack-manager (task-manager)
  ((active-torpedo           uint64  :offset-assert 240)
   (inactive-mine-list       basic   :offset-assert 248)
   (mine-clock               uint64  :offset-assert 256)
   (current-package-index    int16   :offset-assert 264)
   (rod-of-god               uint64  :offset-assert 272)
   (wall-h                   uint64  :offset-assert 280)
   (passed-cutscene-trigger? basic   :offset-assert 288)
   (finish-type              basic   :offset-assert 292)
   (mine-layout              basic   :offset-assert 296)
   (package-positions        basic   :offset-assert 300)
   (h-hud                    uint64  :offset-assert 304)
   )
  :method-count-assert 52
  :size-assert         #x138
  :flag-assert         #x3400c00138
  (:methods
    (ctyport-attack-manager-method-34 () none) ;; 34
    (ctyport-attack-manager-method-42 () none) ;; 42
    (ctyport-attack-manager-method-43 () none) ;; 43
    (ctyport-attack-manager-method-44 () none) ;; 44
    (ctyport-attack-manager-method-45 () none) ;; 45
    (ctyport-attack-manager-method-46 () none) ;; 46
    (ctyport-attack-manager-method-47 () none) ;; 47
    (ctyport-attack-manager-method-48 () none) ;; 48
    (ctyport-attack-manager-method-49 () none) ;; 49
    (ctyport-attack-manager-method-50 () none) ;; 50
    (ctyport-attack-manager-method-51 () none) ;; 51
    )
  (:state-methods
    play-get-on-movie ;; 41
    get-on-nuke ;; 39
    start-mission ;; 38
    pickup-nukes ;; 32
    head-to-wall ;; 33
    watch-approach ;; 35
    nuke-wall ;; 36
    wait-for-cleanup ;; 37
    exit-naughty-ottsel ;; 40
    wait ;; 14
    )
  )
|#

#|
(deftype ctyport-mine (process-drawable)
  ((bob-scalar     float   :offset-assert 200)
   (last-play-time uint64  :offset-assert 208)
   )
  :method-count-assert 24
  :size-assert         #xd8
  :flag-assert         #x18006000d8
  (:methods
    (ctyport-mine-method-23 () none) ;; 23 ;; (ctyport-mine-method-23 (_type_) none)
    )
  (:state-methods
    menacing ;; 22, old: (fall () _type_ :state)
    idle ;; 21, old: (die () _type_ :state)
    hidden ;; 20, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype ctyport-attack-package (process-drawable)
  ((hum-sound uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype cty-dax-missile-launcher (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *ctyport-attack-speech-list* object)
;; (define-extern *port-attack-speech* array)
;; (define-extern *port-attack-dead-pool* object)
;; (define-extern ctyport-attack-manager-event-handler function)
;; (define-extern classify-mine-layout function)
;; (define-extern *recorded-pos* object)
;; (define-extern *recorded-length* object)
;; (define-extern record-pos function)
;; (define-extern print-record-pos function)
;; (define-extern *ctyport-mine-positions* array)
;; (define-extern *ctyport-package-positions* array)
;; (define-extern *ctyport-barrier-pos* object)
;; (define-extern get-ctyport-attack-death-count function)
;; (define-extern ctyport-mine-init-by-other function) ;; (function city-port-run-mine-info none :behavior ctyport-mine)
;; (define-extern ctyport-attack-package-init-by-other function)
;; (define-extern ctyport-attack-setup function)
;; (define-extern *cutscene-trigger-plane-normal* object)
;; (define-extern *cutscene-trigger-plane-pt* object)
;; (define-extern *approach-camera-pt* object)
;; (define-extern *approach-camera-matrix* object)
;; (define-extern *port-attack-fail-sphere* object)
;; (define-extern *port-attack-fail-radius* object)
;; (define-extern copy-record-pos function)
;; (define-extern print-record-pos-2 function)
;; (define-extern lctypatk-login function)
;; (define-extern lctypatk-logout function)
;; (define-extern *hud-boost-curve* curve2d-fast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-attack-bbush           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyport-attack-manager-bbush (ctyport-attack-manager)
  ((actor-group       uint32  :offset-assert 308)
   (actor-group-count int32   :offset-assert 312)
   (clock-speed       float   :offset-assert 316)
   (hud-timer         uint64  :offset-assert 196)
   (countdown-timer   uint64  :offset-assert 332)
   )
  :method-count-assert 53
  :size-assert         #x158
  :flag-assert         #x3500e00158
  (:state-methods
    wait-award ;; 52
    head-to-wall ;; 33
    pickup-nukes ;; 32
    wait ;; 14
    )
  )
|#

;; (define-extern *ctyport-attack-bbush-positions* object)
;; (define-extern *ctyport-bbush-mine-positions* array)
;; (define-extern *port-attack-bbush-fail-sphere* object)
;; (define-extern *port-attack-bbush-fail-radius* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-turret-shot             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turret-shot (guard-shot)
  ((hit-pos vector :inline :offset-assert 544)
   )
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  (:state-methods
    impact ;; 22
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-turret                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype target-turret-params (structure)
  ((fire-interval uint64  :offset-assert 0)
   (max-health    float   :offset-assert 8)
   (roty-accel    float   :offset-assert 12)
   (roty-friction float   :offset-assert 16)
   (rotyv-max     float   :offset-assert 20)
   (rotx-accel    float   :offset-assert 24)
   (rotx-friction float   :offset-assert 28)
   (rotxv-max     float   :offset-assert 32)
   (rotx-min      float   :offset-assert 36)
   (rotx-max      float   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype turret-info (basic)
  ((process     (pointer process)             :offset-assert 4) ;; guessed by decompiler
   (handle      uint64                        :offset-assert 8) ;; handle
   (turret      (pointer base-turret)         :offset-assert 16) ;; guessed by decompiler
   (grabbed?    symbol                        :offset-assert 20) ;; guessed by decompiler
   (turret-type basic                         :offset-assert 24)
   (exit?       basic                         :offset-assert 28)
   (quat        quaternion            :inline :offset-assert 32)
   (trans       vector                :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype target-turret-info (structure)
  ((idle-anim      int32  :offset-assert 0)
   (camera-joint   int32  :offset-assert 4)
   (explode-sg     basic  :offset-assert 8)
   (explode-params basic  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype target-turret (process-focusable)
  ((params             target-turret-params         :offset-assert 208)
   (info               target-turret-info           :offset-assert 212)
   (hud                uint64                       :offset-assert 216)
   (shadow-backup      basic                        :offset-assert 224)
   (rider              uint64                       :offset-assert 232)
   (smush-control      smush-control        :inline :offset-assert 240)
   (fire-recoil        smush-control        :inline :offset-assert 272)
   (sound-id           UNKNOWN              3       :offset-assert 304)
   (sound-playing      UNKNOWN              3       :offset-assert 316)
   (cam-string-vector  vector               :inline :offset-assert 336)
   (pause-proc         basic                        :offset-assert 352)
   (shot-timeout       uint64                       :offset-assert 360)
   (fire-time          uint64                       :offset-assert 368)
   (fire-time-interval uint64                       :offset-assert 376)
   (focus-ignore-timer uint64                       :offset-assert 384)
   (enable-controls    basic                        :offset-assert 392)
   (roty               deg                          :offset-assert 396)
   (rotyv              deg                          :offset-assert 400)
   (rotyvv             deg                          :offset-assert 404)
   (roty-min           deg                          :offset-assert 408)
   (roty-max           deg                          :offset-assert 412)
   (rotx               deg                          :offset-assert 416)
   (rotxv              deg                          :offset-assert 420)
   (rotxvv             deg                          :offset-assert 424)
   (rotx-min           deg                          :offset-assert 428)
   (rotx-max           deg                          :offset-assert 432)
   (dest-roty          deg                          :offset-assert 436)
   (dest-rotx          deg                          :offset-assert 440)
   (target-quat        quaternion           :inline :offset-assert 448)
   (init-trans         vector               :inline :offset-assert 464)
   (init-quat          quaternion           :inline :offset-assert 480)
   (health             float                        :offset-assert 496)
   (track-handle       uint64                       :offset-assert 504)
   (heat               float                        :offset-assert 512)
   (heat-target        float                        :offset-assert 516)
   (arrow-angle        float                        :offset-assert 520)
   (arrow-alpha        float                        :offset-assert 524)
   (arrow-red          float                        :offset-assert 528)
   (red-filter-timer   uint64                       :offset-assert 536)
   (ride-height        float                        :offset-assert 544)
   )
  :method-count-assert 59
  :size-assert         #x224
  :flag-assert         #x3b01b00224
  ;; field pause-proc uses ~A with a signed load.
  (:methods
    (target-turret-method-34 () none) ;; 34
    (target-turret-method-35 () none) ;; 35
    (target-turret-method-36 () none) ;; 36
    (target-turret-method-37 () none) ;; 37
    (target-turret-method-38 () none) ;; 38
    (target-turret-method-39 () none) ;; 39
    (target-turret-method-40 () none) ;; 40
    (target-turret-method-41 () none) ;; 41
    (target-turret-method-42 () none) ;; 42
    (target-turret-method-43 () none) ;; 43
    (target-turret-method-44 () none) ;; 44
    (target-turret-method-45 () none) ;; 45
    (target-turret-method-46 () none) ;; 46
    (target-turret-method-47 () none) ;; 47
    (target-turret-method-48 () none) ;; 48
    (target-turret-method-49 () none) ;; 49
    (target-turret-method-50 () none) ;; 50
    (target-turret-method-51 () none) ;; 51
    (target-turret-method-52 () none) ;; 52
    (target-turret-method-53 () none) ;; 53
    (target-turret-method-54 () none) ;; 54
    (target-turret-method-55 () none) ;; 55
    (target-turret-method-56 () none) ;; 56
    (target-turret-method-57 () none) ;; 57
    (target-turret-method-58 () none) ;; 58
    )
  (:state-methods
    die ;; 33
    dormant ;; 32
    shutdown ;; 31
    active ;; 30
    setup ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern *turret-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params
;; (define-extern *target-turret-params* object)
;; (define-extern target-turret-active-post function)
;; (define-extern turret-handler function) ;; (function process int symbol event-message-block object :behavior base-turret)
;; (define-extern target-turret-blend-mat function)
;; (define-extern target-turret-get-on-play function)
;; (define-extern target-for-turret-get-on-play function)
;; (define-extern target-turret-get-off-play function)
;; (define-extern target-for-turret-get-off-play function)
;; (define-extern target-turret-exit-turret? function)
;; (define-extern target-turret-stance-play function)
;; (define-extern target-for-turret-stance-play function)
;; (define-extern target-turret-stance-fire-play function)
;; (define-extern target-for-turret-stance-fire-play function)
;; (define-extern target-turret-stance-end function)
;; (define-extern target-for-turret-stance-end function)
;; (define-extern target-turret-post function) ;; (function none :behavior target)
;; (define-extern target-turret-stance-handler function)
;; (define-extern *turret-get-on-mods* object) ;; surface

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasgun-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype maker-info (structure)
  ((pos        vector :inline :offset-assert 0)
   (hit-points float          :offset-assert 16)
   (targeted   basic          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype hud-wasgun (hud)
  ((offscreen  uint8           :offset-assert 2756)
   (numscores  uint8           :offset-assert 2757)
   (head-idx   uint8           :offset-assert 2758)
   (tail-idx   uint8           :offset-assert 2759)
   (maker-idx  uint8           :offset-assert 2760)
   (shoot-pos  vector  :inline :offset-assert 2768)
   (minfo      UNKNOWN 15      :offset-assert 2784)
   (reticle    UNKNOWN 20      :offset-assert 3264)
   (position   UNKNOWN 14      :offset-assert 4544)
   (vel        UNKNOWN 14      :offset-assert 4768)
   (scores     UNKNOWN 14      :offset-assert 4824)
   (multiplier UNKNOWN 14      :offset-assert 4880)
   (scoretimes UNKNOWN 14      :offset-assert 4896)
   )
  :method-count-assert 29
  :size-assert         #x1390
  :flag-assert         #x1d13101390
  (:methods
    (hud-wasgun-method-27 () none) ;; 27
    (hud-wasgun-method-28 () none) ;; 28
    )
  )
|#

#|
(deftype maker-grenade (projectile-bounce)
  ((minimap      connection-minimap  :offset-assert 548)
   (blast-radius float               :offset-assert 552)
   (initial-dist float               :offset-assert 556)
   )
  :method-count-assert 45
  :size-assert         #x230
  :flag-assert         #x2d01b00230
  (:methods
    (maker-grenade-method-44 () none) ;; 44
    )
  )
|#

#|
(deftype wascity-turret-hud-position (structure)
  ((x float  :offset-assert 0)
   (y float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype wascity-turret (target-turret)
  ((recoil               UNKNOWN 2       :offset-assert 548)
   (lerp                 float           :offset-assert 556)
   (lerp2                float           :offset-assert 560)
   (reticle-part         basic           :offset-assert 564)
   (my-fire-time         UNKNOWN 2       :offset-assert 568)
   (ready-to-go-active   basic           :offset-assert 584)
   (move-start           uint64          :offset-assert 592)
   (facing-ocean         basic           :offset-assert 600)
   (facing-city          basic           :offset-assert 604)
   (reset-facing         basic           :offset-assert 608)
   (fire-delay           basic           :offset-assert 612)
   (left?                basic           :offset-assert 616)
   (fire-idx             uint8           :offset-assert 620)
   (speed-mult           float           :offset-assert 624)
   (radar-object-counter uint16          :offset-assert 628)
   (radar-object         UNKNOWN 64      :offset-assert 632)
   (aim-dir              vector  :inline :offset-assert 1664)
   (reticle-dir          vector  :inline :offset-assert 1680)
   (target-handle        uint64          :offset-assert 1696)
   )
  :method-count-assert 63
  :size-assert         #x6a8
  :flag-assert         #x3f063006a8
  (:methods
    (wascity-turret-method-59 () none) ;; 59
    (wascity-turret-method-60 () none) ;; 60
    (wascity-turret-method-61 () none) ;; 61
    (wascity-turret-method-62 () none) ;; 62
    )
  )
|#

#|
(deftype skeet (rigid-body-object)
  ((forw                 vector             :inline :offset-assert 288)
   (ppos                 vector             :inline :offset-assert 304)
   (pvel                 vector             :inline :offset-assert 320)
   (pacc                 vector             :inline :offset-assert 336)
   (angle                float                      :offset-assert 352)
   (disappear            basic                      :offset-assert 356)
   (rot-vel              float                      :offset-assert 360)
   (rot-acc              float                      :offset-assert 364)
   (initial-y            float                      :offset-assert 368)
   (time-to-live         uint64                     :offset-assert 376)
   (birth-time           uint64                     :offset-assert 384)
   (mult                 uint8                      :offset-assert 392)
   (score                uint16                     :offset-assert 394)
   (minimap              connection-minimap         :offset-assert 396)
   (skeet-type           uint8                      :offset-assert 400)
   (skeet-sound          uint32                     :offset-assert 404)
   (skeet-sound-playing? basic                      :offset-assert 408)
   (mgr                  uint64                     :offset-assert 416)
   (mode                 uint8                      :offset-assert 424)
   )
  :method-count-assert 63
  :size-assert         #x1a9
  :flag-assert         #x3f013001a9
  (:methods
    (skeet-method-56 () none) ;; 56
    (skeet-method-57 () none) ;; 57
    (skeet-method-58 () none) ;; 58
    (skeet-method-59 () none) ;; 59
    (skeet-method-60 () none) ;; 60
    (skeet-method-61 () none) ;; 61
    (skeet-method-62 () none) ;; 62
    )
  )
|#

#|
(deftype hud-wasdef-damage (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; skeet-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-skeet-dust-color* curve-color-fast)
;; (define-extern *range-skeet-dust-alpha* curve2d-fast)
;; (define-extern *range-skeet-dust-scale-x* curve2d-fast)
;; (define-extern *range-skeet-dust-scale-y* curve2d-fast)
;; (define-extern *curve-skeet-dust-alpha* curve2d-fast)
;; (define-extern *curve-skeet-dust-scale-x* curve2d-fast)
;; (define-extern *curve-skeet-dust-scale-y* curve2d-fast)
;; (define-extern *part-skeet-explosion-dust-in-curve-settings* object)
;; (define-extern *range-skeet-color* curve-color-fast)
;; (define-extern *range-skeet-alpha* curve2d-fast)
;; (define-extern *range-skeet-scale-x* curve2d-fast)
;; (define-extern *range-skeet-scale-y* curve2d-fast)
;; (define-extern *curve-skeet-alpha* curve2d-fast)
;; (define-extern *curve-skeet-scale-x* curve2d-fast)
;; (define-extern *curve-skeet-scale-y* curve2d-fast)
;; (define-extern *part-skeet-explosion-texture-curve-settings* object)
;; (define-extern *range-skeet-splash-color* curve-color-fast)
;; (define-extern *range-skeet-splash-alpha* curve2d-fast)
;; (define-extern *range-skeet-splash-scale-x* curve2d-fast)
;; (define-extern *range-skeet-splash-scale-y* curve2d-fast)
;; (define-extern *curve-skeet-splash-alpha* curve2d-fast)
;; (define-extern *curve-skeet-splash-scale-x* curve2d-fast)
;; (define-extern *curve-skeet-splash-scale-y* curve2d-fast)
;; (define-extern *part-skeet-splash-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maker-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-dm-robot-splash-color* curve-color-fast)
;; (define-extern *range-dm-robot-splash-alpha* curve2d-fast)
;; (define-extern *range-dm-robot-splash-scale-x* curve2d-fast)
;; (define-extern *range-dm-robot-splash-scale-y* curve2d-fast)
;; (define-extern *curve-dm-robot-splash-alpha* curve2d-fast)
;; (define-extern *curve-dm-robot-splash-scale-x* curve2d-fast)
;; (define-extern *curve-dm-robot-splash-scale-y* curve2d-fast)
;; (define-extern *part-dm-robot-splash-curve-settings* object)
;; (define-extern *range-dm-final-explo-color* curve-color-fast)
;; (define-extern *range-dm-final-explo-alpha* curve2d-fast)
;; (define-extern *range-dm-final-explo-scale-x* curve2d-fast)
;; (define-extern *range-dm-final-explo-scale-y* curve2d-fast)
;; (define-extern *curve-dm-final-explo-alpha* curve2d-fast)
;; (define-extern *curve-dm-final-explo-scale-x* curve2d-fast)
;; (define-extern *curve-dm-final-explo-scale-y* curve2d-fast)
;; (define-extern *part-dm-final-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dm-flyer                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dm-flyer-shot (projectile)
  ((tail-pos          vector             :inline :offset-assert 512)
   (hit-pos           vector             :inline :offset-assert 528)
   (turn-quat         quaternion         :inline :offset-assert 544)
   (minimap           connection-minimap         :offset-assert 560)
   (hit-actor?        basic                      :offset-assert 564)
   (last-hit-time     uint64                     :offset-assert 568)
   (muzzle-flash-part basic                      :offset-assert 576)
   (particle-trail    basic                      :offset-assert 580)
   (swirl             float                      :offset-assert 584)
   (swirlvel          float                      :offset-assert 588)
   )
  :method-count-assert 41
  :size-assert         #x250
  :flag-assert         #x2901d00250
  (:state-methods
    dissipate ;; 21
    impact ;; 22
    )
  )
|#

;; (define-extern *dm-flyer-curve-linear-up-red* object)
;; (define-extern *dm-flyer-trail-color-curve-missile* curve-color-fast)
;; (define-extern *dm-flyer-curve-missile-linear-trail* curve2d-fast)
;; (define-extern *dm-flyer-missile-trail* object)
;; (define-extern dm-flyer-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wascity-turret-shot            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-turret-shot (guard-shot)
  ((hit-pos        vector :inline :offset-assert 544)
   (prev-smoke-pos vector :inline :offset-assert 560)
   (smoke-part     basic          :offset-assert 576)
   (hit-water?     basic          :offset-assert 580)
   (rotangle       float          :offset-assert 584)
   (rotrad         float          :offset-assert 588)
   (right          vector :inline :offset-assert 592)
   (up             vector :inline :offset-assert 608)
   (polarity       basic          :offset-assert 624)
   )
  :method-count-assert 42
  :size-assert         #x274
  :flag-assert         #x2a02000274
  (:methods
    (wascity-turret-shot-method-41 () none) ;; 41
    )
  (:state-methods
    moving ;; 23
    impact ;; 22
    )
  )
|#

;; (define-extern *range-skeet-shot-splash-color* curve-color-fast)
;; (define-extern *range-skeet-shot-splash-alpha* curve2d-fast)
;; (define-extern *range-skeet-shot-splash-scale-x* curve2d-fast)
;; (define-extern *range-skeet-shot-splash-scale-y* curve2d-fast)
;; (define-extern *curve-skeet-shot-splash-alpha* curve2d-fast)
;; (define-extern *curve-skeet-shot-splash-scale-x* curve2d-fast)
;; (define-extern *curve-skeet-shot-splash-scale-y* curve2d-fast)
;; (define-extern *part-wascity-turret-shot-hit-splash-curve-settings* object)
;; (define-extern wascity-turret-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wascity-turret                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *wascity-turret-speech-list* object)
;; (define-extern *wascity-turret-params* object)
;; (define-extern *wascity-turret* object)
;; (define-extern *wascity-turret-exploder-params* joint-exploder-static-params)
;; (define-extern *wascity-display-offset* object)
;; (define-extern *debug-control-params* object)
;; (define-extern wct-show-flut function)
;; (define-extern *wascity-turret-got-out-time* object)
;; (define-extern joint-mod-recoil function)
;; (define-extern wascity-turret-get-fire-pos function)
;; (define-extern wascity-turret-get-reticle-fire-pos function)
;; (define-extern *wascity-reticle-normal-color* object)
;; (define-extern *wascity-reticle-locked-color* object)
;; (define-extern wascity-turret-get-reticle-color function)
;; (define-extern wascity-turret-gun-pos function)
;; (define-extern wascity-turret-gun-aim function)
;; (define-extern wascity-turret-add-radar function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasgun-manager                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-wascity-gungame (task-manager)
  ((wascity-gungame-entity basic   :offset-assert 236)
   (check-timer            uint64  :offset-assert 244)
   (actor-group            uint32  :offset-assert 252)
   (actor-group-count      int32   :offset-assert 256)
   (cur-group              int8    :offset-assert 260)
   (halfway-up?            basic   :offset-assert 264)
   (nskeet                 int16   :offset-assert 268)
   (hopped-out             uint64  :offset-assert 276)
   (miss-count             int16   :offset-assert 284)
   (last-miss-count        int16   :offset-assert 286)
   (launch-time            uint64  :offset-assert 292)
   (win-time               uint64  :offset-assert 300)
   (lose-time              uint64  :offset-assert 308)
   (last-hit-time          uint64  :offset-assert 316)
   (added-points-time      uint64  :offset-assert 324)
   (point-queue            int16   :offset-assert 332)
   (skeet-hit              int16   :offset-assert 334)
   (shot-count-at-last-hit int16   :offset-assert 336)
   (bonus-mult             int16   :offset-assert 338)
   (numshots               int16   :offset-assert 340)
   (queue-time             int32   :offset-assert 344)
   (event-length           uint64  :offset-assert 348)
   (event-time             uint64  :offset-assert 356)
   (shot-timer             uint64  :offset-assert 364)
   (wct                    uint64  :offset-assert 372)
   (wave                   int32   :offset-assert 380)
   (event                  int32   :offset-assert 384)
   (goal-amount            int8    :offset-assert 388)
   (score                  int32   :offset-assert 392)
   (hud-score              uint64  :offset-assert 396)
   (hud-goal               uint64  :offset-assert 404)
   (hud-miss               uint64  :offset-assert 412)
   (hud-reticle            uint64  :offset-assert 420)
   (hud-active?            basic   :offset-assert 428)
   (been-out-of-turret?    basic   :offset-assert 432)
   (won?                   basic   :offset-assert 436)
   (lost?                  basic   :offset-assert 440)
   (game-score             uint8   :offset-assert 444)
   (task-gold              uint16  :offset-assert 446)
   (task-silver            uint16  :offset-assert 448)
   (task-bronze            uint16  :offset-assert 450)
   (score-bronze           int32   :offset-assert 452)
   (score-silver           int32   :offset-assert 456)
   (score-gold             int32   :offset-assert 460)
   (score-high             int32   :offset-assert 464)
   (sound-id               uint32  :offset-assert 468)
   )
  :method-count-assert 42
  :size-assert         #x1dc
  :flag-assert         #x2a016001dc
  (:methods
    (task-manager-wascity-gungame-method-32 () none) ;; 32
    (task-manager-wascity-gungame-method-33 () none) ;; 33
    (task-manager-wascity-gungame-method-34 () none) ;; 34
    (task-manager-wascity-gungame-method-35 () none) ;; 35
    (task-manager-wascity-gungame-method-36 () none) ;; 36
    (task-manager-wascity-gungame-method-37 () none) ;; 37
    (task-manager-wascity-gungame-method-38 () none) ;; 38
    (task-manager-wascity-gungame-method-39 () none) ;; 39
    (task-manager-wascity-gungame-method-40 () none) ;; 40
    (task-manager-wascity-gungame-method-41 () none) ;; 41
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype hip-skeet-event (structure)
  ((min-time uint32  :offset-assert 0)
   (max-time uint32  :offset-assert 4)
   (mode     uint8   :offset-assert 8)
   (angle    float   :offset-assert 12)
   (speed    float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern *wasgun-speedmult* object)
;; (define-extern *skeet-exploder-params* joint-exploder-static-params)
;; (define-extern *skeet-b-exploder-params* joint-exploder-static-params)
;; (define-extern *skeet-c-exploder-params* joint-exploder-static-params)
;; (define-extern *skeet-data* array)
;; (define-extern *skeet-rigid-body-constants* object)
;; (define-extern wasgun-manager-shot-missed function)
;; (define-extern skeet-standard-event-handler function)
;; (define-extern *skeet-focus-pos* object)
;; (define-extern skeet-init-by-other function)
;; (define-extern spawn-skeet function)
;; (define-extern *skeet-offset-table* array)
;; (define-extern def-launch-circle function)
;; (define-extern spawn-skeet-enum function)
;; (define-extern wasgun-standard-event-handler function)
;; (define-extern *skeet-launcher-pos* object)
;; (define-extern *skeet-target-pos* object)
;; (define-extern print-and-spawn-skeet function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maker-projectile               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *curve-maker-linear-up-red* object)
;; (define-extern *trail-color-curve-maker-grenade* curve-color-fast)
;; (define-extern *curve-maker-grenade-linear-trail* curve2d-fast)
;; (define-extern *maker-grenade-trail* object)
;; (define-extern *range-maker-grenade-explo-dust-color* curve-color-fast)
;; (define-extern *range-maker-grenade-explo-dust-alpha* curve2d-fast)
;; (define-extern *range-maker-grenade-explo-dust-scale-x* curve2d-fast)
;; (define-extern *range-maker-grenade-explo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-dust-alpha* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-dust-scale-y* curve2d-fast)
;; (define-extern *part-maker-grenade-explosion-dust-in-curve-settings* object)
;; (define-extern *range-maker-grenade-explo-color* curve-color-fast)
;; (define-extern *range-maker-grenade-explo-alpha* curve2d-fast)
;; (define-extern *range-maker-grenade-explo-scale-x* curve2d-fast)
;; (define-extern *range-maker-grenade-explo-scale-y* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-alpha* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-scale-x* curve2d-fast)
;; (define-extern *curve-maker-grenade-explo-scale-y* curve2d-fast)
;; (define-extern *part-maker-grenade-explosion-texture-curve-settings* object)
;; (define-extern maker-projectile-bounce-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasdef-manager                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-wascity-defend (task-manager)
  ((wascity-defend-entity  basic   :offset-assert 236)
   (check-timer            uint64  :offset-assert 244)
   (actor-group            uint32  :offset-assert 252)
   (actor-group-count      int32   :offset-assert 256)
   (cur-group              int8    :offset-assert 260)
   (facing-city?           basic   :offset-assert 264)
   (failed                 basic   :offset-assert 268)
   (completed              basic   :offset-assert 272)
   (miss-count             int16   :offset-assert 276)
   (last-miss-count        int16   :offset-assert 278)
   (launch-time            uint64  :offset-assert 284)
   (win-time               uint64  :offset-assert 292)
   (last-hit-time          uint64  :offset-assert 300)
   (added-points-time      uint64  :offset-assert 308)
   (point-queue            int16   :offset-assert 316)
   (skeet-hit              int16   :offset-assert 318)
   (shot-count-at-last-hit int16   :offset-assert 320)
   (bonus-mult             int16   :offset-assert 322)
   (numshots               int16   :offset-assert 324)
   (queue-time             int32   :offset-assert 328)
   (event-length           uint64  :offset-assert 332)
   (event-time             uint64  :offset-assert 340)
   (wave                   int32   :offset-assert 348)
   (event                  int32   :offset-assert 352)
   (wct                    uint64  :offset-assert 356)
   (score                  int32   :offset-assert 364)
   (hud-score              uint64  :offset-assert 372)
   (hud-goal               uint64  :offset-assert 380)
   (hud-miss               uint64  :offset-assert 388)
   (hud-reticle            uint64  :offset-assert 396)
   (hud-damage             uint64  :offset-assert 404)
   (hud-active?            basic   :offset-assert 412)
   (out-of-turret?         basic   :offset-assert 416)
   (sent-event-complete?   basic   :offset-assert 420)
   (time-out-of-turret     uint64  :offset-assert 428)
   (start-time             uint64  :offset-assert 164)
   (alarm                  uint32  :offset-assert 444)
   )
  :method-count-assert 36
  :size-assert         #x1c4
  :flag-assert         #x24015001c4
  (:methods
    (task-manager-wascity-defend-method-32 () none) ;; 32
    (task-manager-wascity-defend-method-33 () none) ;; 33
    (task-manager-wascity-defend-method-34 () none) ;; 34
    (task-manager-wascity-defend-method-35 () none) ;; 35
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype hip-maker-event (structure)
  ((event-length uint32  :offset-assert 0)
   (path-idx     uint32  :offset-assert 4)
   (mode         uint8   :offset-assert 8)
   (angle        float   :offset-assert 12)
   (speed        float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype maker-damage (structure)
  ((part    basic          :offset-assert 0)
   (pos     vector :inline :offset-assert 16)
   (jnt     uint8          :offset-assert 32)
   (active  basic          :offset-assert 36)
   (counter uint8          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x29
  :flag-assert         #x900000029
  )
|#

#|
(deftype maker (process-focusable)
  ((forw                 vector             :inline :offset-assert 208)
   (ppos                 vector             :inline :offset-assert 224)
   (pvel                 vector             :inline :offset-assert 240)
   (pacc                 vector             :inline :offset-assert 256)
   (speed-mod            float                      :offset-assert 272)
   (tentacle-speed       float                      :offset-assert 276)
   (rot-vel              float                      :offset-assert 280)
   (rot-acc              float                      :offset-assert 284)
   (visible-explode-time uint64                     :offset-assert 288)
   (birth-time           uint64                     :offset-assert 296)
   (footstep-time        uint64                     :offset-assert 304)
   (last-hit-time        uint64                     :offset-assert 312)
   (last-fire-time       uint64                     :offset-assert 320)
   (last-laser-fire-time uint64                     :offset-assert 328)
   (audible-explode-time uint64                     :offset-assert 336)
   (exploded-time        uint64                     :offset-assert 344)
   (mult                 uint8                      :offset-assert 352)
   (score                uint16                     :offset-assert 354)
   (minimap              connection-minimap         :offset-assert 356)
   (maker-sound          uint32                     :offset-assert 360)
   (maker-sound-playing? basic                      :offset-assert 364)
   (explosion-sound-id   uint32                     :offset-assert 368)
   (made-splash?         basic                      :offset-assert 372)
   (head-rot             quaternion         :inline :offset-assert 384)
   (head-jm              basic                      :offset-assert 400)
   (head-tilt            float                      :offset-assert 404)
   (head-tilt-vel        float                      :offset-assert 408)
   (head-tilt-err        float                      :offset-assert 412)
   (head-yaw             float                      :offset-assert 416)
   (head-yaw-vel         float                      :offset-assert 420)
   (head-yaw-err         float                      :offset-assert 424)
   (walk-idle-blend      float                      :offset-assert 428)
   (idle-ball-blend      float                      :offset-assert 432)
   (hit-points           float                      :offset-assert 436)
   (num-shots            int8                       :offset-assert 440)
   (damage-idx           int8                       :offset-assert 441)
   (wait-time            uint32                     :offset-assert 444)
   (reticle-on?          basic                      :offset-assert 448)
   (kick-your-ass-count  uint8                      :offset-assert 452)
   (kick-your-ass-string uint8                      :offset-assert 453)
   (prim-targeted        int8                       :offset-assert 454)
   (damage-info          UNKNOWN            5       :offset-assert 464)
   (path-idx             int16                      :offset-assert 704)
   (path-pt              int16                      :offset-assert 706)
   (path-len             int16                      :offset-assert 708)
   (seek-pos             vector             :inline :offset-assert 720)
   (mode                 uint8                      :offset-assert 736)
   (trail-handle         uint64                     :offset-assert 744)
   )
  :method-count-assert 43
  :size-assert         #x2f0
  :flag-assert         #x2b027002f0
  (:methods
    (maker-method-32 () none) ;; 32
    (maker-method-33 () none) ;; 33
    (maker-method-34 () none) ;; 34
    (maker-method-35 () none) ;; 35
    (maker-method-36 () none) ;; 36
    (maker-method-37 () none) ;; 37
    (maker-method-38 () none) ;; 38
    (maker-method-39 () none) ;; 39
    (maker-method-40 () none) ;; 40
    (maker-method-41 () none) ;; 41
    (maker-method-42 () none) ;; 42
    )
  (:state-methods
    explode ;; 29
    flying ;; 28
    walking ;; 30
    standup ;; 31
    )
  )
|#

;; (define-extern *maker-num-alive* object)
;; (define-extern *maker-num-visible* object)
;; (define-extern *maker-num-grenades* object)
;; (define-extern *maker-last-shot-time* object)
;; (define-extern *maker-first-hit* object)
;; (define-extern *maker-first-kill* object)
;; (define-extern *maker-first-missile* object)
;; (define-extern *maker-last-vocalization* object)
;; (define-extern *wascity-alarm-pos1* object)
;; (define-extern *wascity-alarm-pos2* object)
;; (define-extern *wascity-defend-speech-list* object)
;; (define-extern *maker-debris-params* debris-static-params)
;; (define-extern *curve-maker-entry-linear-up-red* object)
;; (define-extern *trail-color-curve-maker-entry* curve-color-fast)
;; (define-extern *curve-maker-entry-linear-trail* curve2d-fast)
;; (define-extern *maker-entry-trail* object)
;; (define-extern *maker-data* array)
;; (define-extern *maker-rigid-body-constants* object)
;; (define-extern *maker-damage-joint-array* array)
;; (define-extern *maker-joint-array* array)
;; (define-extern maker-world-to-local-vec! function)
;; (define-extern *say-iteration-counter* object)
;; (define-extern *say-timestamp* object)
;; (define-extern wasdef-voiceover function)
;; (define-extern maker-standard-event-handler function)
;; (define-extern get-ocean-floor-height function)
;; (define-extern *maker-close* object)
;; (define-extern *maker-close-count* object)
;; (define-extern *maker-traverse-paths* array)
;; (define-extern maker-init-by-other function)
;; (define-extern spawn-maker function)
;; (define-extern *maker-avoid-spheres* array)
;; (define-extern spawn-maker-enum function)
;; (define-extern jak-out-of-turret function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasdef-hud                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasgun-hud                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-branch (structure)
  ((node                nav-node 2 :offset-assert 0) ;; guessed by decompiler
   (src-node            nav-node   :offset-assert 0) ;; guessed by decompiler
   (dest-node           nav-node   :offset-assert 4) ;; guessed by decompiler
   (temp-dest-node-id   int32      :offset-assert 4)
   (speed-limit         uint8      :offset-assert 8)
   (density             uint8      :offset-assert 9)
   (clock-type          uint8      :offset-assert 10) ;; nav-branch-clock-type
   (clock-mask          uint8      :offset-assert 11) ;; nav-branch-clock-mask
   (territory           uint8      :offset-assert 10)
   (exclusive-branch-id uint8      :offset-assert 11)
   (max-user-count      uint8      :offset-assert 12)
   (user-count          uint8      :offset-assert 13)
   (width               uint8      :offset-assert 14)
   (flags               uint8      :offset-assert 15) ;; nav-branch-flags
   )
  :method-count-assert 21
  :size-assert         #x10
  :flag-assert         #x1500000010
  (:methods
    (nav-branch-method-9 () none) ;; 9 ;; (set-default-density-speed-and-width (_type_) none)
    (nav-branch-method-10 () none) ;; 10 ;; (debug-print (_type_ object int) none)
    (nav-branch-method-11 () none) ;; 11 ;; (get-density (_type_) float)
    (nav-branch-method-12 () none) ;; 12 ;; (get-speed-limit (_type_) float)
    (nav-branch-method-13 () none) ;; 13 ;; (get-width (_type_) float)
    (nav-branch-method-14 () none) ;; 14 ;; (user-limit-reached? (_type_) symbol)
    (nav-branch-method-15 () none) ;; 15 ;; (dest-node-id-at-max? (_type_) symbol)
    (nav-branch-method-16 () none) ;; 16 ;; (set-density (_type_ float) none)
    (nav-branch-method-17 () none) ;; 17 ;; (set-speed-limit (_type_ float) none)
    (nav-branch-method-18 () none) ;; 18 ;; (set-width (_type_ float) none)
    (nav-branch-method-19 () none) ;; 19 ;; (set-src-node (_type_ nav-node) none)
    (nav-branch-method-20 () none) ;; 20 ;; (set-dst-node (_type_ nav-node) none)
    )
  )
|#

#|
(deftype nav-node (structure)
  ((data         uint32                    32      :offset-assert 0) ;; guessed by decompiler
   (position     vector                    :inline :offset-assert 0)
   (pos-x        float                             :offset-assert 0)
   (pos-y        float                             :offset-assert 4)
   (pos-z        float                             :offset-assert 8)
   (angle        uint16                            :offset-assert 12)
   (id           uint16                            :offset-assert 14)
   (radius       uint8                             :offset-assert 16)
   (branch-count int8                              :offset-assert 17)
   (flags        nav-node-flag                     :offset-assert 18) ;; nav-node-flag-byte
   (pad0         int8                      1       :offset-assert 19) ;; guessed by decompiler
   (branch-array (inline-array nav-branch)         :offset-assert 20) ;; guessed by decompiler
   (nav-mesh-id  uint32                            :offset-assert 24)
   (level        symbol                            :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field nav-node-flag is likely a value type.
  (:methods
    (nav-node-method-9 () none) ;; 9 ;; (debug-draw (_type_) none)
    (nav-node-method-10 () none) ;; 10 ;; (debug-print (_type_ symbol string) none)
    (nav-node-method-11 () none) ;; 11 ;; (remove-branch-by-idx (_type_ int) none)
    (nav-node-method-12 () none) ;; 12 ;; (init-from-pt-and-heading (_type_ vector vector) none)
    (nav-node-method-13 () none) ;; 13 ;; (set-pos-xyz (_type_ vector) none)
    (nav-node-method-14 () none) ;; 14 ;; (set-angle-from-heading (_type_ vector) none)
    (nav-node-method-15 () none) ;; 15 ;; (set-id-and-link-branches-back (_type_ uint) none)
    (nav-node-method-16 () none) ;; 16 ;; (set-radius (_type_ float) none)
    (nav-node-method-17 () none) ;; 17 ;; (set-angle (_type_ float) none)
    (nav-node-method-18 () none) ;; 18 ;; (get-position (_type_ vector) vector)
    (nav-node-method-19 () none) ;; 19 ;; (calc-sine-and-cosine! (_type_ vector) vector)
    (nav-node-method-20 () none) ;; 20 ;; (get-angle (_type_) float)
    (nav-node-method-21 () none) ;; 21 ;; (get-radius (_type_) float)
    )
  )
|#

#|
(deftype nav-graph-link (structure)
  ((id            uint32           :offset-assert 0)
   (dest-graph-id uint32           :offset-assert 4)
   (src-branch-id uint16           :offset-assert 8)
   (dest-node-id  uint16           :offset-assert 10)
   (dest-graph    basic            :offset-assert 12)
   (dummy-node    nav-node :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype nav-graph (basic)
  ((node-count   int16                           :offset-assert 4)
   (branch-count int16                           :offset-assert 6)
   (node-array   (inline-array nav-node)         :offset-assert 8) ;; guessed by decompiler
   (branch-array (inline-array nav-branch)       :offset-assert 12) ;; guessed by decompiler
   (link-count   int16                           :offset-assert 16)
   (pad2         uint16                          :offset-assert 18)
   (link-array   (inline-array nav-graph-link)   :offset-assert 20) ;; guessed by decompiler
   (first-node   int16                           :offset-assert 24)
   (pad0         uint16                          :offset-assert 26)
   (patched      symbol                          :offset-assert 28) ;; guessed by decompiler
   (id           uint32                          :offset-assert 32)
   (pad1         uint32                        6 :offset-assert 36) ;; guessed by decompiler
   )
  :method-count-assert 45
  :size-assert         #x3c
  :flag-assert         #x2d0000003c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type int int int uint) _type_)
    (nav-graph-method-9 () none) ;; 9 ;; (debug-draw-nodes (_type_) none)
    (nav-graph-method-10 () none) ;; 10 ;; (nav-graph-method-10 (_type_ vector int) none)
    (nav-graph-method-11 () none) ;; 11 ;; (nav-graph-method-11 (_type_) none)
    (nav-graph-method-12 () none) ;; 12 ;; (nav-graph-method-12 (_type_) none)
    (nav-graph-method-13 () none) ;; 13 ;; (nav-graph-method-13 (_type_ int int) none)
    (nav-graph-method-14 () none) ;; 14 ;; (nav-graph-method-14 (_type_ int int) none)
    (nav-graph-method-15 () none) ;; 15 ;; (debug-reset (_type_) none)
    (nav-graph-method-16 () none) ;; 16 ;; (debug-add-node (_type_ int) nav-node)
    (nav-graph-method-17 () none) ;; 17 ;; (debug-link-node-to-graph (_type_ nav-node) none)
    (nav-graph-method-18 () none) ;; 18 ;; (debug-reset-branch-array (_type_ nav-node int) none)
    (nav-graph-method-19 () none) ;; 19 ;; (nav-graph-method-19 (_type_ int int int int int int) none)
    (nav-graph-method-20 () none) ;; 20 ;; (nav-graph-method-20 (_type_ int int) none)
    (nav-graph-method-21 () none) ;; 21 ;; (move-selected-to-height-map-height (_type_) none)
    (nav-graph-method-22 () none) ;; 22 ;; (select-nodes-in-range (_type_ int int) none)
    (nav-graph-method-23 () none) ;; 23 ;; (deselect-nodes-in-range (_type_ int int) none)
    (nav-graph-method-24 () none) ;; 24 ;; (toggle-select-nodes-in-range (_type_ int int) none)
    (nav-graph-method-25 () none) ;; 25 ;; (select-nodes-in-level (_type_ symbol symbol) none)
    (nav-graph-method-26 () none) ;; 26 ;; (select-nodes-by-nav-mesh-id (_type_ int symbol) none)
    (nav-graph-method-27 () none) ;; 27 ;; (select-nodes-by-flags (_type_ nav-node-flag-byte nav-node-flag-byte symbol) none)
    (nav-graph-method-28 () none) ;; 28 ;; (print-selected-nodes (_type_) none)
    (nav-graph-method-29 () none) ;; 29 ;; (assign-selected-nodes-to-level (_type_ symbol) none)
    (nav-graph-method-30 () none) ;; 30 ;; (assign-selected-nodes-to-nav-mesh (_type_ uint) none)
    (nav-graph-method-31 () none) ;; 31 ;; (set-radius-of-selected-nodes (_type_ float) none)
    (nav-graph-method-32 () none) ;; 32 ;; (set-speed-limit-of-selected (_type_ float) none)
    (nav-graph-method-33 () none) ;; 33 ;; (set-density-of-selected (_type_ float) none)
    (nav-graph-method-34 () none) ;; 34 ;; (set-width-of-selected (_type_ float) none)
    (nav-graph-method-35 () none) ;; 35 ;; (or-flags-of-selected-nodes (_type_ nav-node-flag-byte) none)
    (nav-graph-method-36 () none) ;; 36 ;; (and-flags-of-selected-nodes (_type_ nav-node-flag-byte) none)
    (nav-graph-method-37 () none) ;; 37 ;; (offset-pos-of-selected (_type_ vector) none)
    (nav-graph-method-38 () none) ;; 38 ;; (nav-graph-method-38 (_type_) none)
    (nav-graph-method-39 () none) ;; 39 ;; (nav-graph-method-39 (_type_) none)
    (nav-graph-method-40 () none) ;; 40 ;; (nav-graph-method-40 (_type_ int) int)
    (nav-graph-method-41 () none) ;; 41 ;; (node-at-idx (_type_ int) nav-node)
    (nav-graph-method-42 () none) ;; 42 ;; (patch-nodes (_type_) none)
    (nav-graph-method-43 () none) ;; 43 ;; (copy-to-mysql-graph (_type_ mysql-nav-graph string) none)
    (nav-graph-method-44 () none) ;; 44 ;; (from-editor (_type_ mysql-nav-graph symbol) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-borrow-manager-h           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype borrow-level-hold-info (structure)
  ((name                  basic   :offset-assert 0)
   (mode                  uint8   :offset-assert 4)
   (expiring?             basic   :offset-assert 8)
   (expire-start-time     uint64  :offset-assert 16)
   (expire-wait-time      uint64  :offset-assert 24)
   (num-remaining-objects uint16  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x22
  :flag-assert         #x900000022
  )
|#

#|
(deftype borrow-level-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype cty-borrow-manager (basic)
  ((borrow-holds basic  :offset-assert 4)
   )
  :method-count-assert 19
  :size-assert         #x8
  :flag-assert         #x1300000008
  (:methods
    (cty-borrow-manager-method-9 () none) ;; 9
    (cty-borrow-manager-method-10 () none) ;; 10
    (cty-borrow-manager-method-11 () none) ;; 11
    (cty-borrow-manager-method-12 () none) ;; 12
    (cty-borrow-manager-method-13 () none) ;; 13
    (cty-borrow-manager-method-14 () none) ;; 14
    (cty-borrow-manager-method-15 () none) ;; 15
    (cty-borrow-manager-method-16 () none) ;; 16
    (cty-borrow-manager-method-17 () none) ;; 17
    (cty-borrow-manager-method-18 () none) ;; 18
    )
  )
|#

;; (define-extern *city-borrow-manager* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-faction-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-faction-info (structure)
  ((data     UNKNOWN 6 :offset-assert 0)
   (ff-guard int8      :offset-assert 0)
   (ff-ped   int8      :offset-assert 1)
   (kg-guard int8      :offset-assert 2)
   (kg-ped   int8      :offset-assert 3)
   (mh-guard int8      :offset-assert 4)
   (mh-ped   int8      :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype cty-faction-strength (structure)
  ((data        UNKNOWN 3 :offset-assert 0)
   (ff-strength int8      :offset-assert 0)
   (kg-strength int8      :offset-assert 1)
   (mh-strength int8      :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )
|#

#|
(deftype territory-faction-mode (structure)
  ((data    UNKNOWN 3 :offset-assert 0)
   (ff-mode uint8     :offset-assert 0)
   (kg-mode uint8     :offset-assert 1)
   (mh-mode uint8     :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )
|#

#|
(deftype territory-faction-flag (structure)
  ((data    UNKNOWN 3 :offset-assert 0)
   (ff-mode uint8     :offset-assert 0)
   (kg-mode uint8     :offset-assert 1)
   (mh-mode uint8     :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )
|#

#|
(deftype faction-spawn-info (structure)
  ((faction-type    uint8  :offset-assert 0)
   (current-level   uint8  :offset-assert 1)
   (requested-level uint8  :offset-assert 2)
   (flags           uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype cty-faction-manager (basic)
  ((faction-array                  UNKNOWN                30      :offset-assert 4)
   (faction-mod-array              UNKNOWN                30      :offset-assert 124)
   (global-faction-strength-mod    cty-faction-strength   :inline :offset-assert 604)
   (territory-faction-strength-mod UNKNOWN                4       :offset-assert 607)
   (permission-cache               UNKNOWN                30      :offset-assert 671)
   (last-requested-level           basic                          :offset-assert 704)
   (territory-faction-modes        UNKNOWN                30      :offset-assert 708)
   (territory-flags                UNKNOWN                30      :offset-assert 1188)
   (last-active-territories        uint32                         :offset-assert 1220)
   (update-flags                   uint8                          :offset-assert 1224)
   (target-exclusive-branch-index  uint8                          :offset-assert 1225)
   (territory-faction-flags        territory-faction-flag :inline :offset-assert 1226)
   (faction-spawn                  UNKNOWN                7       :offset-assert 1229)
   (last-change-music-time         uint64                         :offset-assert 1344)
   (start-fight-music-time         uint64                         :offset-assert 1352)
   )
  :method-count-assert 26
  :size-assert         #x550
  :flag-assert         #x1a00000550
  (:methods
    (cty-faction-manager-method-9 () none) ;; 9
    (cty-faction-manager-method-10 () none) ;; 10
    (cty-faction-manager-method-11 () none) ;; 11
    (cty-faction-manager-method-12 () none) ;; 12
    (cty-faction-manager-method-13 () none) ;; 13
    (cty-faction-manager-method-14 () none) ;; 14
    (cty-faction-manager-method-15 () none) ;; 15
    (cty-faction-manager-method-16 () none) ;; 16
    (cty-faction-manager-method-17 () none) ;; 17
    (cty-faction-manager-method-18 () none) ;; 18
    (cty-faction-manager-method-19 () none) ;; 19
    (cty-faction-manager-method-20 () none) ;; 20
    (cty-faction-manager-method-21 () none) ;; 21
    (cty-faction-manager-method-22 () none) ;; 22
    (cty-faction-manager-method-23 () none) ;; 23
    (cty-faction-manager-method-24 () none) ;; 24
    (cty-faction-manager-method-25 () none) ;; 25
    )
  )
|#

;; (define-extern *cty-faction-manager* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-engine-h               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nav-segment (structure)
  ((vertex        vector     2 :offset-assert 0) ;; guessed by decompiler
   (length        float        :offset-assert 12)
   (spawn-spacing float        :offset-assert 28)
   (branch        nav-branch   :offset-assert 32)
   (nav-mesh-id   uint32       :offset-assert 36)
   (id            uint16       :offset-assert 40)
   (cell-id       uint16       :offset-assert 42)
   (from-cell-id  uint16       :offset-assert 44)
   (tracker-id    int8         :offset-assert 46)
   (pad0          int8         :offset-assert 47)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype vis-cell (structure)
  ((sphere                 sphere                     :inline :offset-assert 0)
   (segment-array          (inline-array nav-segment)         :offset-assert 16) ;; guessed by decompiler
   (vis-id                 uint16                             :offset-assert 20)
   (id                     uint16                             :offset-assert 22)
   (incoming-segment-count int8                               :offset-assert 24)
   (segment-count          int8                               :offset-assert 25)
   (flags                  vis-cell-flag                      :offset-assert 26)
   (prev-flags             vis-cell-flag                      :offset-assert 27)
   (alloc-segment-count    int8                               :offset-assert 26)
   (nav-territories        uint32                             :offset-assert 28)
   )
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  ;; field vis-cell-flag is likely a value type. field vis-cell-flag is likely a value type.
  (:methods
    (vis-cell-method-9 () none) ;; 9 ;; (reset-segment-counts (_type_) none)
    (vis-cell-method-10 () none) ;; 10 ;; (debug-draw (_type_) none)
    )
  )
|#

#|
(deftype vis-grid-pos (structure)
  ((data int8 3 :offset-assert 0) ;; guessed by decompiler
   (x    int8   :offset-assert 0)
   (y    int8   :offset-assert 1)
   (z    int8   :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )
|#

#|
(deftype vis-grid-box (structure)
  ((min vis-grid-pos :inline :offset-assert 0)
   (max vis-grid-pos :inline :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype vis-ray (structure)
  ((pos      vector       :inline :offset-assert 0)
   (dir      vector       :inline :offset-assert 16)
   (dest-pos vector       :inline :offset-assert 32)
   (plane    plane        :inline :offset-assert 48)
   (grid-pos vis-grid-pos :inline :offset-assert 64)
   (len      float                :offset-assert 68)
   (cell     vis-cell             :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )
|#

#|
(deftype grid-info (structure)
  ((axis-scale      float        3       :offset-assert 0) ;; guessed by decompiler
   (dimension-array int8         3       :offset-assert 12) ;; guessed by decompiler
   (pad0            uint8        1       :offset-assert 15) ;; guessed by decompiler
   (box             bounding-box :inline :offset-assert 16)
   (cell-size       vector       :inline :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (grid-info-method-9 () none) ;; 9 ;; (setup-grid-from-bounding-box (_type_ (pointer bounding-box) int int) none)
    (grid-info-method-10 () none) ;; 10 ;; (lookup-cell-for-point (_type_ vis-grid-pos vector) none)
    (grid-info-method-11 () none) ;; 11 ;; (lookup-box-for-sphere (_type_ vis-grid-box vector) none)
    (grid-info-method-12 () none) ;; 12 ;; (debug-draw-grid (_type_ rgba) none)
    (grid-info-method-13 () none) ;; 13 ;; (debug-draw-cell (_type_ vis-grid-pos rgba) none)
    )
  )
|#

#|
(deftype city-level-info (structure)
  ((grid-info      grid-info                  :inline :offset-assert 0)
   (cell-array     (inline-array vis-cell)            :offset-assert 64) ;; guessed by decompiler
   (segment-count  int16                              :offset-assert 68)
   (cell-count     uint16                             :offset-assert 70)
   (segment-array  (inline-array nav-segment)         :offset-assert 72) ;; guessed by decompiler
   (nav-graph      nav-graph                          :offset-assert 76) ;; guessed by decompiler
   (camera-ceiling meters                             :offset-assert 80)
   (pad-array      int8                       56      :offset-assert 84) ;; guessed by decompiler
   )
  :method-count-assert 19
  :size-assert         #x8c
  :flag-assert         #x130000008c
  (:methods
    (city-level-info-method-9 () none) ;; 9 ;; (city-level-info-method-9 (_type_) symbol)
    (city-level-info-method-10 () none) ;; 10 ;; (init-vis-ray (_type_ vis-ray vector vector) none)
    (city-level-info-method-11 () none) ;; 11 ;; (city-level-info-method-11 (_type_ vis-ray) none)
    (city-level-info-method-12 () none) ;; 12 ;; (city-level-info-method-12 (_type_ vector nav-branch vector) vector)
    (city-level-info-method-13 () none) ;; 13 ;; (lookup-cell-by-position (_type_ vector) vis-cell)
    (city-level-info-method-14 () none) ;; 14 ;; (get-first-cell-in-box (_type_ vis-grid-box) vis-cell)
    (city-level-info-method-15 () none) ;; 15 ;; (sphere-in-grid? (_type_ vector int) symbol)
    (city-level-info-method-16 () none) ;; 16 ;; (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (city-level-info-method-17 () none) ;; 17 ;; (update-suppressions-from-traffic-engine (_type_ traffic-engine) none)
    (city-level-info-method-18 () none) ;; 18 ;; (city-level-info-method-18 (_type_) none)
    )
  )
|#

#|
(deftype traffic-level-data (structure)
  ((city-info               city-level-info         :offset-assert 0)
   (active-cell-count       uint8                   :offset-assert 4)
   (newly-active-cell-count uint8                   :offset-assert 5)
   (active-cell-list        vis-cell        255     :offset-assert 8) ;; guessed by decompiler
   (newly-active-cell-list  vis-cell        255     :offset-assert 1028) ;; guessed by decompiler
   (active-cell-box         bounding-box    :inline :offset-assert 2048)
   )
  :method-count-assert 15
  :size-assert         #x820
  :flag-assert         #xf00000820
  (:methods
    (traffic-level-data-method-9 () none) ;; 9 ;; (reset (_type_) none)
    (traffic-level-data-method-10 () none) ;; 10 ;; (add-active-cell (_type_ vis-cell) none)
    (traffic-level-data-method-11 () none) ;; 11 ;; (remove-active-cell (_type_ int) none)
    (traffic-level-data-method-12 () none) ;; 12 ;; (add-newly-active-cell (_type_ vis-cell) none)
    (traffic-level-data-method-13 () none) ;; 13 ;; (per-frame-cell-update (_type_) none)
    (traffic-level-data-method-14 () none) ;; 14 ;; (debug-draw (_type_) none)
    )
  )
|#

#|
(deftype traffic-suppression-box (structure)
  ((data     uint8        32      :offset-assert 0) ;; guessed by decompiler
   (bbox     bounding-box :inline :offset-assert 0)
   (flags    uint8                :offset-assert 12) ;; traffic-suppression-box-flags
   (duration uint32               :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype traffic-object-type-info (structure)
  ((flags                uint8              :offset-assert 0) ;; traffic-type-flags
   (active-count         int8               :offset-assert 1)
   (inactive-count       int8               :offset-assert 2)
   (reserve-count        uint16             :offset-assert 4)
   (killed-count         uint16             :offset-assert 6)
   (want-count           int8               :offset-assert 8)
   (tracker-index        uint8              :offset-assert 9)
   (parking-spot-prob    uint8              :offset-assert 10)
   (guard-type           uint8              :offset-assert 11)
   (array                (pointer handle)   :offset-assert 12) ;; guessed by decompiler
   (level                symbol             :offset-assert 16) ;; guessed by decompiler
   (target-counts        UNKNOWN          3 :offset-assert 20)
   (target-count         int8               :offset-assert 20)
   (target-count-war     int8               :offset-assert 21)
   (target-count-mission int8               :offset-assert 22)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )
|#

#|
(deftype traffic-suppressor (structure)
  ((flags uint8                           :offset-assert 0) ;; traffic-suppression-flags
   (bbox  bounding-box            :inline :offset-assert 16)
   (array traffic-suppression-box 16      :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x230
  :flag-assert         #xe00000230
  (:methods
    (traffic-suppressor-method-9 () none) ;; 9 ;; (reset-boxes (_type_) none)
    (traffic-suppressor-method-10 () none) ;; 10 ;; (add-new-supression-box (_type_ traffic-suppression-params) none)
    (traffic-suppressor-method-11 () none) ;; 11 ;; (remove-box-by-id (_type_ int) none)
    (traffic-suppressor-method-12 () none) ;; 12 ;; (update-box-from-params (_type_ traffic-suppression-params) none)
    (traffic-suppressor-method-13 () none) ;; 13 ;; (debug-draw (_type_) none)
    )
  )
|#

#|
(deftype traffic-tracker (structure)
  ((traffic                 traffic-engine     :offset-assert 0) ;; guessed by decompiler
   (object-hash             spatial-hash       :offset-assert 4) ;; guessed by decompiler
   (rand                    float              :offset-assert 8)
   (id                      uint8              :offset-assert 12)
   (active-object-count     uint8              :offset-assert 13)
   (inactive-object-count   int8               :offset-assert 14)
   (active-object-list      handle         126 :offset-assert 16) ;; guessed by decompiler
   (active-object-type-list traffic-type   126 :offset-assert 1024) ;; guessed by decompiler
   )
  :method-count-assert 27
  :size-assert         #x47e
  :flag-assert         #x1b0000047e
  (:methods
    (traffic-tracker-method-9 () none) ;; 9 ;; (traffic-tracker-method-9 (_type_) none)
    (traffic-tracker-method-10 () none) ;; 10 ;; (traffic-tracker-method-10 (_type_) none)
    (traffic-tracker-method-11 () none) ;; 11 ;; (traffic-tracker-method-11 (_type_) none)
    (traffic-tracker-method-12 () none) ;; 12 ;; (add-active-process (_type_ traffic-type handle) none)
    (traffic-tracker-method-13 () none) ;; 13 ;; (remove-active-process (_type_ int) handle)
    (traffic-tracker-method-14 () none) ;; 14 ;; (add-reserved-process (_type_ traffic-type handle) none)
    (traffic-tracker-method-15 () none) ;; 15 ;; (get-from-inactive-by-type (_type_ traffic-type) handle)
    (traffic-tracker-method-16 () none) ;; 16 ;; (get-from-inactive-by-handle (_type_ traffic-type handle) handle)
    (traffic-tracker-method-17 () none) ;; 17 ;; (deactivate-object (_type_ int symbol) none)
    (traffic-tracker-method-18 () none) ;; 18 ;; (set-process-to-killed (_type_ process) none)
    (traffic-tracker-method-19 () none) ;; 19 ;; (deactivate-all (_type_ symbol) none)
    (traffic-tracker-method-20 () none) ;; 20 ;; (deactivate-all-of-type (_type_ traffic-type symbol) none)
    (traffic-tracker-method-21 () none) ;; 21 ;; (activate-from-params (_type_ traffic-object-spawn-params) none)
    (traffic-tracker-method-22 () none) ;; 22 ;; (activate-by-type (_type_ traffic-type nav-segment float) none)
    (traffic-tracker-method-23 () none) ;; 23 ;; (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (traffic-tracker-method-24 () none) ;; 24 ;; (reset (_type_ uint traffic-engine) none)
    (traffic-tracker-method-25 () none) ;; 25 ;; (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (traffic-tracker-method-26 () none) ;; 26 ;; (for-all-active-processes-of-type (_type_ traffic-type (function process-focusable traffic-object-type-info none)) none)
    )
  )
|#

#|
(deftype traffic-engine (basic)
  ((object-hash            spatial-hash                     :offset-assert 4) ;; guessed by decompiler
   (manager                uint64                           :offset-assert 8) ;; handle
   (inv-density-factor     float                            :offset-assert 16)
   (sync-clock             uint8                            :offset-assert 20)
   (sync-mask-8            uint8                            :offset-assert 21)
   (sync-mask-16           uint16                           :offset-assert 22)
   (sync-mask-32           uint32                           :offset-assert 24)
   (sync-array             uint8                    4       :offset-assert 28) ;; guessed by decompiler
   (flags                  uint8                            :offset-assert 32)
   (squad-control-array    UNKNOWN                  4       :offset-assert 36)
   (level-data-array       traffic-level-data       2       :offset-assert 64) ;; guessed by decompiler
   (object-type-info-array traffic-object-type-info 29      :offset-assert 4224) ;; guessed by decompiler
   (tracker-array          traffic-tracker          2       :offset-assert 5152) ;; guessed by decompiler
   (inactive-object-array  handle                   580     :offset-assert 7456) ;; guessed by decompiler
   (suppressor             traffic-suppressor       :inline :offset-assert 12096)
   (danger-sphere-count    int8                             :offset-assert 12656)
   (danger-sphere-array    traffic-danger-info      4       :offset-assert 12672) ;; guessed by decompiler
   (allow-spawning?        basic                            :offset-assert 12928)
   )
  :method-count-assert 58
  :size-assert         #x3284
  :flag-assert         #x3a00003284
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type) _type_)
    (traffic-engine-method-9 () none) ;; 9 ;; (update-traffic (_type_) none)
    (traffic-engine-method-10 () none) ;; 10 ;; (reset-and-init-from-manager (_type_ process) none)
    (traffic-engine-method-11 () none) ;; 11 ;; (stop-alarm-sound (_type_) none)
    (traffic-engine-method-12 () none) ;; 12 ;; (debug-unused (_type_) none)
    (traffic-engine-method-13 () none) ;; 13 ;; (add-object (_type_ traffic-type process) none)
    (traffic-engine-method-14 () none) ;; 14 ;; (sphere-in-loaded-city-infos? (_type_ vector int) symbol)
    (traffic-engine-method-15 () none) ;; 15 ;; (activate-one-citizen (_type_ nav-segment float) none)
    (traffic-engine-method-16 () none) ;; 16 ;; (activate-one-vehicle (_type_ nav-segment float) none)
    (traffic-engine-method-17 () none) ;; 17 ;; (can-dest-be-used? (_type_ nav-branch) symbol)
    (traffic-engine-method-18 () none) ;; 18 ;; (child-killed (_type_ process) none)
    (traffic-engine-method-19 () none) ;; 19 ;; (deactivate-all-from-level (_type_ symbol) none)
    (traffic-engine-method-20 () none) ;; 20 ;; (find-best-segment (_type_ vector vector int) nav-segment)
    (traffic-engine-method-21 () none) ;; 21 ;; (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (traffic-engine-method-22 () none) ;; 22 ;; (add-danger (_type_ traffic-danger-info) none)
    (traffic-engine-method-23 () none) ;; 23 ;; (guard-count (_type_) int)
    (traffic-engine-method-24 () none) ;; 24 ;; (set-target-level (_type_ float) none)
    (traffic-engine-method-25 () none) ;; 25 ;; (set-guard-target-level (_type_ float) none)
    (traffic-engine-method-26 () none) ;; 26 ;; (deactivate-all (_type_) none)
    (traffic-engine-method-27 () none) ;; 27 ;; (deactivate-by-type (_type_ traffic-type) none)
    (traffic-engine-method-28 () none) ;; 28 ;; (maybe-increase-guard-aim-count (_type_) symbol)
    (traffic-engine-method-29 () none) ;; 29 ;; (restore-default-settings (_type_) none)
    (traffic-engine-method-30 () none) ;; 30 ;; (increase-alert-level (_type_ int target) none)
    (traffic-engine-method-31 () none) ;; 31 ;; (decrease-alert-level (_type_ int) none)
    (traffic-engine-method-32 () none) ;; 32 ;; (set-alert-level (_type_ int) none)
    (traffic-engine-method-33 () none) ;; 33 ;; (set-max-alert-level (_type_ int) none)
    (traffic-engine-method-34 () none) ;; 34 ;; (set-alert-duration (_type_ time-frame) none)
    (traffic-engine-method-35 () none) ;; 35 ;; (get-alert-level (_type_) int)
    (traffic-engine-method-36 () none) ;; 36 ;; (get-target (_type_) target)
    (traffic-engine-method-37 () none) ;; 37 ;; (set-object-target-level (_type_ int float) none)
    (traffic-engine-method-38 () none) ;; 38 ;; (set-object-target-count (_type_ int int) none)
    (traffic-engine-method-39 () none) ;; 39 ;; (set-object-reserve-count (_type_ int uint) none)
    (traffic-engine-method-40 () none) ;; 40 ;; (get-object-reserve-count (_type_ int) int)
    (traffic-engine-method-41 () none) ;; 41 ;; (get-object-remaining-count (_type_ int) int)
    (traffic-engine-method-42 () none) ;; 42 ;; (activate-object (_type_ traffic-object-spawn-params) none)
    (traffic-engine-method-43 () none) ;; 43 ;; (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (traffic-engine-method-44 () none) ;; 44 ;; (set-parking-spot-prob (_type_ int float) none)
    (traffic-engine-method-45 () none) ;; 45 ;; (get-random-parking-spot-type (_type_) traffic-type)
    (traffic-engine-method-46 () none) ;; 46 ;; (new-suppression-box (_type_ traffic-suppression-params) none)
    (traffic-engine-method-47 () none) ;; 47 ;; (remove-suppression-box (_type_ traffic-suppression-params) none)
    (traffic-engine-method-48 () none) ;; 48 ;; (update-suppression-box (_type_ traffic-suppression-params) none)
    (traffic-engine-method-49 () none) ;; 49 ;; (traffic-engine-method-49 (_type_ vector int traffic-target-status) traffic-target-status)
    (traffic-engine-method-50 () none) ;; 50 ;; (find-closest-to-with-collide-lists (_type_ process-drawable collide-spec) process-focusable)
    (traffic-engine-method-51 () none) ;; 51 ;; (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (traffic-engine-method-52 () none) ;; 52 ;; (send-alert-events (_type_) none)
    (traffic-engine-method-53 () none) ;; 53 ;; (end-pursuit-by-type (_type_ traffic-type) none)
    (traffic-engine-method-54 () none) ;; 54 ;; (get-traffic-guard-type-settings (_type_ int) traffic-guard-type-settings)
    (traffic-engine-method-55 () none) ;; 55 ;; (get-guard-type-for-traffic-obj (_type_ int) uint)
    (traffic-engine-method-56 () none) ;; 56 ;; (get-traffic-guard-change-to-type (_type_ int) uint)
    (traffic-engine-method-57 () none) ;; 57 ;; (set-guard-target-count-range (_type_ int int int) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; height-map-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype xz-height-map (structure)
  ((offset        float          3 :offset-assert 0) ;; guessed by decompiler
   (x-offset      float            :offset-assert 0)
   (y-offset      float            :offset-assert 4)
   (z-offset      float            :offset-assert 8)
   (x-inv-spacing float            :offset-assert 12)
   (z-inv-spacing float            :offset-assert 16)
   (y-scale       float            :offset-assert 20)
   (dim           int16          2 :offset-assert 24) ;; guessed by decompiler
   (x-dim         int16            :offset-assert 24)
   (z-dim         int16            :offset-assert 26)
   (data          (pointer int8)   :offset-assert 28) ;; guessed by decompiler
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (xz-height-map-method-9 () none) ;; 9 ;; (get-height-at-point (_type_ vector) float)
    (xz-height-map-method-10 () none) ;; 10 ;; (debug-draw-mesh (_type_ vector) none)
    (xz-height-map-method-11 () none) ;; 11 ;; (debug-print (_type_) none)
    (xz-height-map-method-12 () none) ;; 12 ;; (debug-draw-at-point (_type_ vector) none)
    (xz-height-map-method-13 () none) ;; 13 ;; (debug-draw (_type_ vector) none)
    (xz-height-map-method-14 () none) ;; 14 ;; (debug-add-offset (_type_ vector int) none)
    )
  )
|#

;; (define-extern get-traffic-height function) ;; (function vector float)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-control                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-controller (structure)
  ((flags                  vehicle-controller-flag                                  :offset-assert 0)
   (traffic                traffic-engine                                           :offset-assert 4) ;; guessed by decompiler
   (branch                 nav-branch                                               :offset-assert 8)
   (target-speed-offset    meters                                                   :offset-assert 12)
   (target-speed           meters                                                   :offset-assert 16)
   (choose-branch-callback (function vehicle-controller vehicle nav-branch)         :offset-assert 20) ;; guessed by decompiler
   (turn-accel             meters                                                   :offset-assert 24)
   (max-turn-speed         meters                                                   :offset-assert 28)
   (path-prev-point        vector                                           :inline :offset-assert 32)
   (turn-enter-point       vector                                           :inline :offset-assert 48)
   (turn-exit-point        vector                                           :inline :offset-assert 64)
   (path-dest-point        vector                                           :inline :offset-assert 64)
   (turn-enter-dir         vector                                           :inline :offset-assert 80)
   (turn-exit-dir          vector                                           :inline :offset-assert 96)
   (dest-circle            vector                                           :inline :offset-assert 112)
   (target-point           vector                                           :inline :offset-assert 128)
   )
  :method-count-assert 22
  :size-assert         #x90
  :flag-assert         #x1600000090
  (:methods
    (vehicle-controller-method-9 () none) ;; 9 ;; (vehicle-controller-method-9 (_type_) none)
    (vehicle-controller-method-10 () none) ;; 10 ;; (vehicle-controller-method-10 (_type_ traffic-tracker) none)
    (vehicle-controller-method-11 () none) ;; 11 ;; (vehicle-controller-method-11 (_type_) none)
    (vehicle-controller-method-12 () none) ;; 12 ;; (vehicle-controller-method-12 (_type_ rigid-body-vehicle-constants vector float int float) none)
    (vehicle-controller-method-13 () none) ;; 13 ;; (vehicle-controller-method-13 (_type_ nav-branch vector) none)
    (vehicle-controller-method-14 () none) ;; 14 ;; (vehicle-controller-method-14 (_type_ vehicle) nav-branch)
    (vehicle-controller-method-15 () none) ;; 15 ;; (vehicle-controller-method-15 (_type_) nav-branch)
    (vehicle-controller-method-16 () none) ;; 16 ;; (vehicle-controller-method-16 (_type_ vector vector) none)
    (vehicle-controller-method-17 () none) ;; 17 ;; (draw-debug-info (_type_) none)
    (vehicle-controller-method-18 () none) ;; 18 ;; (vehicle-controller-method-18 (_type_ vector vector vehicle float) none)
    (vehicle-controller-method-19 () none) ;; 19 ;; (vehicle-controller-method-19 (_type_ vector object vector vector) none)
    (vehicle-controller-method-20 () none) ;; 20 ;; (vehicle-controller-method-20 (_type_ object float) none)
    (vehicle-controller-method-21 () none) ;; 21 ;; (vehicle-controller-method-21 (_type_) none)
    )
  )
|#

;; (define-extern *vehicle-control-debug-obj* object) ;; object

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nav-graph                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern make-nav-graph function) ;; (function mysql-nav-graph symbol none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mission-squad-control-h        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-attacker-info (structure)
  ((proc                    uint64  :offset-assert 0)
   (enemy                   uint64  :offset-assert 8)
   (next-update-target-time uint64  :offset-assert 16)
   (flags                   uint16  :offset-assert 24)
   (num-current-attackers   uint8   :offset-assert 26)
   (max-num-attackers       uint8   :offset-assert 27)
   (self-type               int16   :offset-assert 28)
   (enemy-type              int16   :offset-assert 30)
   (self-index              int16   :offset-assert 32)
   (enemy-index             int16   :offset-assert 34)
   (callback                basic   :offset-assert 36)
   (hatred-map-callback     basic   :offset-assert 40)
   )
  :method-count-assert 11
  :size-assert         #x2c
  :flag-assert         #xb0000002c
  (:methods
    (city-attacker-info-method-9 () none) ;; 9
    (city-attacker-info-method-10 () none) ;; 10
    )
  )
|#

#|
(deftype city-attacker-cache (structure)
  ((pos         vector  :offset-assert 0)
   (proc        basic   :offset-assert 4)
   (attackable? basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype city-hatred-info (structure)
  ((hatred            float   :offset-assert 0)
   (max-consider-dist float   :offset-assert 4)
   (hatred-dist       float   :offset-assert 8)
   (dist-scale        float   :offset-assert 12)
   (attacker-scale    float   :offset-assert 16)
   (flags             uint16  :offset-assert 20)
   (index             uint8   :offset-assert 22)
   (pad               uint8   :offset-assert 23)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype city-attacker-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype city-hatred-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype city-attacker-cache-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype mission-squad-control (basic)
  ((attackers            basic               :offset-assert 4)
   (unused-list          basic               :offset-assert 8)
   (hatred-vals          basic               :offset-assert 12)
   (hatred-indices       basic               :offset-assert 16)
   (attacker-cache       basic               :offset-assert 20)
   (target-attacker      city-attacker-info  :offset-assert 24)
   (max-num-object-types int32               :offset-assert 28)
   )
  :method-count-assert 24
  :size-assert         #x20
  :flag-assert         #x1800000020
  (:methods
    (mission-squad-control-method-9 () none) ;; 9
    (mission-squad-control-method-10 () none) ;; 10
    (mission-squad-control-method-11 () none) ;; 11
    (mission-squad-control-method-12 () none) ;; 12
    (mission-squad-control-method-13 () none) ;; 13
    (mission-squad-control-method-14 () none) ;; 14
    (mission-squad-control-method-15 () none) ;; 15
    (mission-squad-control-method-16 () none) ;; 16
    (mission-squad-control-method-17 () none) ;; 17
    (mission-squad-control-method-18 () none) ;; 18
    (mission-squad-control-method-19 () none) ;; 19
    (mission-squad-control-method-20 () none) ;; 20
    (mission-squad-control-method-21 () none) ;; 21
    (mission-squad-control-method-22 () none) ;; 22
    (mission-squad-control-method-23 () none) ;; 23
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen (nav-enemy)
  ((flags                   citizen-flag               :offset-assert 616)
   (traffic-id              int8                       :offset-assert 618)
   (hit-by-player-count     int8                       :offset-assert 619)
   (gnd-height              float                      :offset-assert 620)
   (speed-scale             float                      :offset-assert 624)
   (controller              vehicle-controller :inline :offset-assert 636)
   (squad                   basic                      :offset-assert 780)
   (danger-pos              sphere             :inline :offset-assert 796)
   (dest-point              vector             :inline :offset-assert 700)
   (vehicle                 uint64                     :offset-assert 812) ;; handle
   (formation               uint64                     :offset-assert 812)
   (formation-index         int8                       :offset-assert 820)
   (anim-shuffle            int32                      :offset-assert 824)
   (dist-walk-anim          float                      :offset-assert 828)
   (speed-walk              float                      :offset-assert 832)
   (anim-walk               int32                      :offset-assert 836)
   (dist-run-anim           float                      :offset-assert 840)
   (speed-run               float                      :offset-assert 844)
   (anim-run                int32                      :offset-assert 848)
   (travel-anim-scale-speed float                      :offset-assert 852)
   (water-anim              int32                      :offset-assert 856)
   (interp                  float                      :offset-assert 860)
   (last-danger-time        uint64                     :offset-assert 868) ;; time-frame
   (next-time-look-at       uint64                     :offset-assert 876) ;; time-frame
   (stop-time-look-at       uint64                     :offset-assert 884) ;; time-frame
   (wait-return-state       (state citizen)            :offset-assert 892) ;; guessed by decompiler
   (wait-time               uint64                     :offset-assert 900) ;; time-frame
   (shield-handle           uint64                     :offset-assert 908)
   (cp-valid?               symbol                     :offset-assert 916) ;; guessed by decompiler
   (cp-sphere               sphere             :inline :offset-assert 924)
   (cp-vec                  vector             :inline :offset-assert 940)
   (cp-next-time            uint64                     :offset-assert 956) ;; time-frame
   (cp-exit-time            uint64                     :offset-assert 964) ;; time-frame
   (cp-force                vector             :inline :offset-assert 972)
   (cp-plane                plane              :inline :offset-assert 988)
   (cp-factor               float                      :offset-assert 1004)
   (faction-mode            uint8                      :offset-assert 1008)
   (attacker-info           city-attacker-info         :offset-assert 1012)
   (mission-squad           basic                      :offset-assert 1016)
   (probe-counter           uint32                     :offset-assert 1020)
   )
  :method-count-assert 216
  :size-assert         #x404
  :flag-assert         #xd803900404
  ;; field citizen-flag is likely a value type.
  (:methods
    (citizen-method-190 () none) ;; 190 ;; (citizen-method-190 (_type_ vector) none)
    (citizen-method-191 () none) ;; 191 ;; (gen-clear-path (_type_) nav-segment)
    (citizen-method-192 () none) ;; 192 ;; (citizen-method-192 (_type_) none)
    (citizen-method-193 () none) ;; 193 ;; (throw-off-vehicle (_type_) none)
    (citizen-method-194 () none) ;; 194 ;; (gen-new-dir (_type_ vector float) nav-segment)
    (citizen-method-195 () none) ;; 195 ;; (citizen-method-195 (_type_ vector) symbol)
    (citizen-method-196 () none) ;; 196 ;; (get-run-anim (_type_) int)
    (citizen-method-197 () none) ;; 197 ;; (trigger-alert (_type_ int target) none)
    (citizen-method-198 () none) ;; 198 ;; (decrease-alert (_type_ object) none)
    (citizen-method-199 () none) ;; 199 ;; (set-behavior! (_type_ traffic-object-spawn-params) none)
    (citizen-method-200 () none) ;; 200 ;; (citizen-method-200 (_type_) none)
    (citizen-method-201 () none) ;; 201
    (citizen-method-202 () none) ;; 202
    (citizen-method-203 () none) ;; 203
    (citizen-method-204 () none) ;; 204
    (citizen-method-205 () none) ;; 205
    (citizen-method-206 () none) ;; 206
    (citizen-method-207 () none) ;; 207
    (citizen-method-208 () none) ;; 208
    (citizen-method-209 () none) ;; 209
    (citizen-method-210 () none) ;; 210
    (citizen-method-211 () none) ;; 211
    (citizen-method-212 () none) ;; 212
    (citizen-method-213 () none) ;; 213
    (citizen-method-214 () none) ;; 214
    (citizen-method-215 () none) ;; 215
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squad-control-city-h           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype squad-control-city (squad-control)
  ((sync-clock             uint8                     :offset-assert 4)
   (sync-mask-8            uint8                     :offset-assert 5)
   (sync-mask-16           uint16                    :offset-assert 6)
   (sync-mask-32           uint32                    :offset-assert 8)
   (alert-state            squad-alert-state :inline :offset-assert 16)
   (primary-target-history UNKNOWN           16      :offset-assert 304)
   (traffic                basic                     :offset-assert 816)
   (city-mode              uint32                    :offset-assert 820)
   )
  :method-count-assert 45
  :size-assert         #x338
  :flag-assert         #x2d00000338
  (:methods
    (squad-control-city-method-34 () none) ;; 34
    (squad-control-city-method-35 () none) ;; 35
    (squad-control-city-method-36 () none) ;; 36
    (squad-control-city-method-37 () none) ;; 37
    (squad-control-city-method-38 () none) ;; 38
    (squad-control-city-method-39 () none) ;; 39
    (squad-control-city-method-40 () none) ;; 40
    (squad-control-city-method-41 () none) ;; 41
    (squad-control-city-method-42 () none) ;; 42
    (squad-control-city-method-43 () none) ;; 43
    (squad-control-city-method-44 () none) ;; 44
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squad-control-city             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-squad-control-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype handle-array (inline-array-class-uint64)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype kg-squad-member-settings (structure)
  ((object-type              uint8  :offset-assert 0)
   (max-target-count         int8   :offset-assert 1)
   (min-target-count         int8   :offset-assert 2)
   (target-count             int8   :offset-assert 3)
   (enemy-type               uint8  :offset-assert 4)
   (toggle-shield-percentage float  :offset-assert 8)
   (heat-shield-percentage   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype kg-squad-settings (structure)
  ((roboguard-settings       kg-squad-member-settings :inline :offset-assert 0)
   (roboguard-giant-settings kg-squad-member-settings :inline :offset-assert 16)
   (flying-turret-settings   kg-squad-member-settings :inline :offset-assert 32)
   (spydroid-settings        kg-squad-member-settings :inline :offset-assert 48)
   (kg-enemy-settings        UNKNOWN                  4       :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype kg-squad-control (squad-control-city)
  ((guard-to-traffic-mapping       UNKNOWN           10      :offset-assert 824)
   (guard-to-squad-setting-mapping UNKNOWN           10      :offset-assert 834)
   (used-guard-types               uint32                    :offset-assert 844)
   (active-squad-member-list       basic                     :offset-assert 852)
   (enemy-type-seek-to-list        UNKNOWN           3       :offset-assert 856)
   (enemy-type-seek-from-list      UNKNOWN           3       :offset-assert 859)
   (enemy-type-seek-to             uint8                     :offset-assert 856)
   (enemy-type-seek-from           uint8                     :offset-assert 859)
   (enemy-type-seek-to-war         uint8                     :offset-assert 857)
   (enemy-type-seek-from-war       uint8                     :offset-assert 860)
   (enemy-type-seek-to-mission     uint8                     :offset-assert 858)
   (enemy-type-seek-from-mission   uint8                     :offset-assert 861)
   (alert-level                    int8                      :offset-assert 862)
   (squad-settings                 UNKNOWN           3       :offset-assert 864)
   (squad-normal-settings          kg-squad-settings :inline :offset-assert 864)
   (squad-war-settings             kg-squad-settings :inline :offset-assert 928)
   (squad-mission-settings         kg-squad-settings :inline :offset-assert 992)
   (current-target-attackers       int8                      :offset-assert 1056)
   )
  :method-count-assert 55
  :size-assert         #x421
  :flag-assert         #x3700000421
  (:methods
    (kg-squad-control-method-45 () none) ;; 45
    (kg-squad-control-method-46 () none) ;; 46
    (kg-squad-control-method-47 () none) ;; 47
    (kg-squad-control-method-48 () none) ;; 48
    (kg-squad-control-method-49 () none) ;; 49
    (kg-squad-control-method-50 () none) ;; 50
    (kg-squad-control-method-51 () none) ;; 51
    (kg-squad-control-method-52 () none) ;; 52
    (kg-squad-control-method-53 () none) ;; 53
    (kg-squad-control-method-54 () none) ;; 54
    )
  )
|#

;; (define-extern *kg-squad-control* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ff-squad-control-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype traffic-guard-type-info (structure)
  ((object-type      uint8  :offset-assert 0) ;; traffic-type
   (max-target-count int8   :offset-assert 1)
   (min-target-count int8   :offset-assert 2)
   (target-count     int8   :offset-assert 3)
   (count            int8   :offset-assert 4)
   (change-to-type   uint8  :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )
|#

#|
(deftype traffic-guard-type-array (structure)
  ((data               UNKNOWN                 3       :offset-assert 0)
   (guard-info-normal  traffic-guard-type-info :inline :offset-assert 0)
   (guard-info-war     traffic-guard-type-info :inline :offset-assert 16)
   (guard-info-mission traffic-guard-type-info :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype squad-alert-state-settings (structure)
  ((guard-settings-array UNKNOWN             10      :offset-assert 0)
   (ped-tazer            squad-unit-settings :inline :offset-assert 0)
   (ped-rifle            squad-unit-settings :inline :offset-assert 32)
   (ped-grenade          squad-unit-settings :inline :offset-assert 64)
   (ped-waster           squad-unit-settings :inline :offset-assert 96)
   (bike-turret          squad-unit-settings :inline :offset-assert 128)
   (hellcat-turret       squad-unit-settings :inline :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #x140
  :flag-assert         #x900000140
  )
|#

#|
(deftype traffic-target-formation (structure)
  ((circle-range UNKNOWN 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype ff-squad-control (squad-control-city)
  ((squad-settings                   UNKNOWN                    3       :offset-assert 824)
   (settings                         squad-alert-state-settings :inline :offset-assert 824)
   (settings-war                     squad-alert-state-settings :inline :offset-assert 1144)
   (settings-mission                 squad-alert-state-settings :inline :offset-assert 1464)
   (guard-type-info-array            UNKNOWN                    10      :offset-assert 1784)
   (guard-type-mask-from-object-type UNKNOWN                    29      :offset-assert 2264)
   (target-formation-array           UNKNOWN                    3       :offset-assert 2380)
   )
  :method-count-assert 57
  :size-assert         #xa0c
  :flag-assert         #x3900000a0c
  (:methods
    (ff-squad-control-method-45 () none) ;; 45
    (ff-squad-control-method-46 () none) ;; 46
    (ff-squad-control-method-47 () none) ;; 47
    (ff-squad-control-method-48 () none) ;; 48
    (ff-squad-control-method-49 () none) ;; 49
    (ff-squad-control-method-50 () none) ;; 50
    (ff-squad-control-method-51 () none) ;; 51
    (ff-squad-control-method-52 () none) ;; 52
    (ff-squad-control-method-53 () none) ;; 53
    (ff-squad-control-method-54 () none) ;; 54
    (ff-squad-control-method-55 () none) ;; 55
    (ff-squad-control-method-56 () none) ;; 56
    )
  )
|#

;; (define-extern *ff-squad-control* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-squad-control-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-squad-member-settings (structure)
  ((object-type              uint8  :offset-assert 0)
   (max-target-count         int8   :offset-assert 1)
   (min-target-count         int8   :offset-assert 2)
   (target-count             int8   :offset-assert 3)
   (toggle-shield-percentage float  :offset-assert 4)
   (heat-shield-percentage   float  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype mh-squad-settings (structure)
  ((mh-enemy-settings UNKNOWN                  3       :offset-assert 0)
   (grunt-settings    mh-squad-member-settings :inline :offset-assert 0)
   (flitter-settings  mh-squad-member-settings :inline :offset-assert 16)
   (predator-settings mh-squad-member-settings :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype mh-squad-control (squad-control-city)
  ((active-squad-member-list         basic                     :offset-assert 828)
   (squad-settings                   UNKNOWN           3       :offset-assert 832)
   (squad-normal-settings            mh-squad-settings :inline :offset-assert 832)
   (squad-war-settings               mh-squad-settings :inline :offset-assert 880)
   (squad-mission-settings           mh-squad-settings :inline :offset-assert 928)
   (alert-level                      int8                      :offset-assert 976)
   (map-traffic-object-type-to-squad UNKNOWN           29      :offset-assert 977)
   (current-target-attackers         int8                      :offset-assert 1006)
   )
  :method-count-assert 49
  :size-assert         #x3ef
  :flag-assert         #x31000003ef
  (:methods
    (mh-squad-control-method-45 () none) ;; 45
    (mh-squad-control-method-46 () none) ;; 46
    (mh-squad-control-method-47 () none) ;; 47
    (mh-squad-control-method-48 () none) ;; 48
    )
  )
|#

;; (define-extern *mh-squad-control* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-faction                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype exclusive-nav-mesh-info (structure)
  ((aid            uint32  :offset-assert 0)
   (exclusive-mask uint8   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )
|#

;; (define-extern *territory-list* array)
;; (define-extern *default-faction-info* array)
;; (define-extern *default-faction-mod* object)
;; (define-extern *default-faction-strength-mod* object)
;; (define-extern setup-city-task-faction function)
;; (define-extern *exclusive-nav-mesh-list* array)
;; (define-extern map-symbol-to-nav-territory-type function)
;; (define-extern cty-faction-evaluate-commands function)
;; (define-extern is-faction-level-loaded? function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; formations                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype formation-info (structure)
  ((composition basic  :offset-assert 0)
   (layout      basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype formation-layout (basic)
  ((formation-points     UNKNOWN 10 :offset-assert 16)
   (num-formation-points int8       :offset-assert 176)
   (leader-index         int8       :offset-assert 177)
   (__pad                int16      :offset-assert 178)
   (scale-factor         float      :offset-assert 180)
   (estimated-radius     float      :offset-assert 184)
   (composition          basic      :offset-assert 188)
   )
  :method-count-assert 10
  :size-assert         #xc0
  :flag-assert         #xa000000c0
  (:methods
    (formation-layout-method-9 () none) ;; 9
    )
  )
|#

;; (define-extern *formation-layout-cross* array)
;; (define-extern *formation-composition-cross* array)
;; (define-extern *formation-layout-wedge* array)
;; (define-extern *formation-composition-wedge* array)
;; (define-extern *formation-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; formation-object               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; handle-array is already defined!

#|
(deftype formation-object (process-focusable)
  ((object-list         basic                      :offset-assert 208)
   (num-objects         int8                       :offset-assert 212)
   (formation           basic                      :offset-assert 216)
   (flags               uint8                      :offset-assert 220)
   (controller          vehicle-controller :inline :offset-assert 224)
   (alert-time-offset   uint64                     :offset-assert 368)
   (dest-position       vector             :inline :offset-assert 384)
   (formation-transform matrix             :inline :offset-assert 400)
   )
  :method-count-assert 48
  :size-assert         #x1d0
  :flag-assert         #x30015001d0
  (:methods
    (formation-object-method-30 () none) ;; 30
    (formation-object-method-31 () none) ;; 31
    (formation-object-method-32 () none) ;; 32
    (formation-object-method-33 () none) ;; 33
    (formation-object-method-34 () none) ;; 34
    (formation-object-method-35 () none) ;; 35
    (formation-object-method-36 () none) ;; 36
    (formation-object-method-37 () none) ;; 37
    (formation-object-method-38 () none) ;; 38
    (formation-object-method-39 () none) ;; 39
    (formation-object-method-40 () none) ;; 40
    (formation-object-method-41 () none) ;; 41
    (formation-object-method-42 () none) ;; 42
    (formation-object-method-43 () none) ;; 43
    (formation-object-method-44 () none) ;; 44
    (formation-object-method-45 () none) ;; 45
    (formation-object-method-46 () none) ;; 46
    (formation-object-method-47 () none) ;; 47
    )
  (:state-methods
    active ;; 28
    inactive ;; 29
    )
  )
|#

#|
(deftype msg-get-num-inactive (structure)
  ((obj-type         uint8  :offset-assert 0)
   (num-inactive-out int32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype msg-get-inactive-objects (structure)
  ((object-type-info-array uint32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern formation-init-by-other function)
;; (define-extern foo-hack object)
;; (define-extern formation-object-event-handler function)
;; (define-extern random-var object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-obs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype city-race-ring-info (structure)
  ((pos   vector :inline :offset-assert 0)
   (angle float          :offset-assert 12)
   (boost float          :offset-assert 16)
   (dist  float          :offset-assert 20)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (city-race-ring-info-method-9 () none) ;; 9 ;; (city-race-ring-info-method-9 (_type_ symbol) none)
    )
  )
|#

#|
(deftype city-ambush-spot (structure)
  ((pos      vector :inline :offset-assert 0)
   (obj-type uint8          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x11
  :flag-assert         #x900000011
  )
|#

#|
(deftype city-ambush-info (structure)
  ((count int16                            :offset-assert 0)
   (array (inline-array city-ambush-spot)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (city-ambush-info-method-9 () none) ;; 9 ;; (city-ambush-info-method-9 (_type_ traffic-object-spawn-params) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mission-squad-control          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-attack-controller          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-attack-controller (mission-squad-control)
  ((guard-angry-hatred-info-index int8  :offset-assert 32)
   )
  :method-count-assert 24
  :size-assert         #x21
  :flag-assert         #x1800000021
  )
|#

;; (define-extern city-target-type->cty-faction function)
;; (define-extern city-target-type->traffic-object-type function)
;; (define-extern symbol->city-target-type function)
;; (define-extern *cty-attack-controller* object)
;; (define-extern initialize-cty-attack-controller function)
;; (define-extern cty-attack-reset function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flee-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flee-info (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype iter-seg (structure)
  ((self        citizen             :offset-assert 0) ;; guessed by decompiler
   (score       float               :offset-assert 4)
   (seg         nav-segment         :offset-assert 8)
   (cp-plane    plane       :inline :offset-assert 16)
   (desired-dir vector      :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern *citizen-debug* object) ;; symbol
;; (define-extern citizen-init-by-other function) ;; (function traffic-object-spawn-params none :behavior citizen)
;; (define-extern citizen-travel-anim function) ;; (function int int symbol :behavior citizen)
;; (define-extern iter-seg-clear-path function) ;; (function iter-seg nav-segment symbol)
;; (define-extern iter-seg-new-dir function) ;; (function iter-seg nav-segment none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; civilian                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype civilian-anim-info (structure)
  ((anim-index       int32 2 :offset-assert 0) ;; guessed by decompiler
   (anim-index-front int32   :offset-assert 0)
   (anim-index-back  int32   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype civilian-global-info (basic)
  ((prev-yellow-hit                int8                 :offset-assert 4)
   (prev-blue-hit                  int8                 :offset-assert 5)
   (knocked                        int32              2 :offset-assert 8) ;; guessed by decompiler
   (anim-knocked-front             int32                :offset-assert 8)
   (anim-knocked-back              int32                :offset-assert 12)
   (knocked-land                   int32              2 :offset-assert 16) ;; guessed by decompiler
   (anim-knocked-front-land        int32                :offset-assert 16)
   (anim-knocked-back-land         int32                :offset-assert 20)
   (yellow-hit-anim                civilian-anim-info 1 :offset-assert 24) ;; guessed by decompiler
   (blue-hit-anim                  civilian-anim-info 3 :offset-assert 32) ;; guessed by decompiler
   (anim-cover-head-start          int32                :offset-assert 56)
   (anim-cover-head-loop           int32                :offset-assert 60)
   (anim-cover-head-end            int32                :offset-assert 64)
   (car-stance-anim                int32                :offset-assert 68)
   (bike-stance-anim               int32                :offset-assert 72)
   (get-in-car-anim                int32                :offset-assert 76)
   (get-on-bike-anim               int32                :offset-assert 80)
   (seat-flag                      uint8                :offset-assert 84)
   (speech-ambient                 int8                 :offset-assert 85)
   (speech-alert                   int8                 :offset-assert 86)
   (speech-cower                   int8                 :offset-assert 87)
   (speech-touched-by-player       int8                 :offset-assert 88)
   (speech-shot-by-player          int8                 :offset-assert 89)
   (speech-avoiding-player-vehicle int8                 :offset-assert 90)
   (speech-hit-by-player-vehicle   int8                 :offset-assert 91)
   (speech-player-stealing-vehicle int8                 :offset-assert 92)
   )
  :method-count-assert 9
  :size-assert         #x5d
  :flag-assert         #x90000005d
  )
|#

#|
(deftype civilian (citizen)
  ((info              civilian-global-info         :offset-assert 1028) ;; guessed by decompiler
   (anim-panic-run    int32                        :offset-assert 1032)
   (anim-on-ground    int32                        :offset-assert 1036)
   (anim-dive         int32                        :offset-assert 1040)
   (anim-get-up-front int32                        :offset-assert 1044)
   (anim-get-up-back  int32                        :offset-assert 1048)
   (last-second-pos   vector               :inline :offset-assert 1056)
   (last-distance     float                        :offset-assert 1072)
   (next-time         uint64                       :offset-assert 1080) ;; time-frame
   (dive-target-point vector               :inline :offset-assert 1088)
   (dive-reaction     float                        :offset-assert 1104)
   (allow-dive        symbol                       :offset-assert 1108) ;; guessed by decompiler
   (dive-finished?    symbol                       :offset-assert 1112) ;; guessed by decompiler
   (hit-face          uint32                       :offset-assert 1116)
   (seat              int32                        :offset-assert 1120)
   )
  :method-count-assert 234
  :size-assert         #x464
  :flag-assert         #xea03f00464
  (:methods
    (civilian-method-229 () none) ;; 229
    (civilian-method-230 () none) ;; 230
    (civilian-method-231 () none) ;; 231
    (civilian-method-232 () none) ;; 232
    (civilian-method-233 () none) ;; 233
    )
  (:state-methods
    wait-at-dest ;; 228
    exit-vehicle ;; 227
    ride ;; 226
    board-vehicle ;; 225
    avoid-danger ;; 216, old: (go-dive (_type_) none)
    flee ;; 36
    on-ground ;; 218
    clear-path ;; 217, old: (civilian-method-217 (_type_ vector) symbol)
    wait ;; 190
    dive ;; 219
    cower-ground ;; 222
    knocked-recover ;; 32
    get-up-front ;; 220
    get-up-back ;; 221
    knocked ;; 31
    wait-for-ride ;; 223
    move-to-vehicle ;; 224
    )
  )
|#

;; (define-extern civilian-flee-post function) ;; (function none :behavior civilian)
;; (define-extern civilian-avoid-danger-post function) ;; (function none :behavior civilian)
;; (define-extern civilian-avoid-danger-post2 function) ;; (function none :behavior civilian)
;; (define-extern civilian-clear-path-post function) ;; (function none :behavior civilian)
;; (define-extern civilian-clear-path-post2 function) ;; (function none :behavior civilian)
;; (define-extern civilian-falling-post function) ;; (function none :behavior civilian)
;; (define-extern do-spline2 function) ;; (function vector vector vector vector vector float vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-h                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guard-anim-info (structure)
  ((anim-index       int32 2 :offset-assert 0) ;; guessed by decompiler
   (anim-index-front int32   :offset-assert 0)
   (anim-index-back  int32   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype guard-global-info (basic)
  ((prev-yellow-hit         int8              :offset-assert 4)
   (prev-blue-hit           int8              :offset-assert 5)
   (knocked                 int32           2 :offset-assert 8) ;; guessed by decompiler
   (knocked-land            int32           2 :offset-assert 16) ;; guessed by decompiler
   (anim-knocked-front      int32             :offset-assert 8)
   (anim-knocked-back       int32             :offset-assert 12)
   (anim-knocked-front-land int32             :offset-assert 16)
   (anim-knocked-back-land  int32             :offset-assert 20)
   (yellow-hit-anim         guard-anim-info 2 :offset-assert 24) ;; guessed by decompiler
   (yellow-land-anim        guard-anim-info 2 :offset-assert 40) ;; guessed by decompiler
   (blue-hit-anim           int32           1 :offset-assert 56) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype guard-shoot-info (structure)
  ((anim-index int32  :offset-assert 0)
   (start      float  :offset-assert 4)
   (end        float  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype range (structure)
  ((start float  :offset-assert 0)
   (end   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype crimson-guard-collide-shape (collide-shape-moving)
  ()
  :method-count-assert 68
  :size-assert         #x1dc
  :flag-assert         #x44000001dc
  ;; field penetrate is likely a value type. field penetrate is likely a value type.
  )
|#

#|
(deftype crimson-guard (citizen)
  ((info                            guard-global-info           :offset-assert 1028) ;; guessed by decompiler
   (hit-face                        uint32                      :offset-assert 1032)
   (anim-get-up-front               int32                       :offset-assert 1036)
   (anim-get-up-back                int32                       :offset-assert 1040)
   (small-hit                       int32                       :offset-assert 1044)
   (yellow-anim                     uint32                      :offset-assert 1048)
   (guard-type                      uint8                       :offset-assert 1052)
   (settings                        squad-unit-settings         :offset-assert 1056) ;; traffic-guard-type-settings
   (next-time                       uint64                      :offset-assert 1064) ;; time-frame
   (last-time-see-target            uint64                      :offset-assert 1072) ;; time-frame
   (joint                           joint-mod                   :offset-assert 1080) ;; guessed by decompiler
   (joint-enable                    symbol                      :offset-assert 1084) ;; guessed by decompiler
   (already-shot                    symbol                      :offset-assert 1088) ;; guessed by decompiler
   (miss-amount                     float                       :offset-assert 1092)
   (l-control                       lightning-control           :offset-assert 1096) ;; guessed by decompiler
   (next-shot                       uint64                      :offset-assert 1104) ;; int64
   (anim-shoot                      guard-shoot-info    3       :offset-assert 1112) ;; guessed by decompiler
   (transport                       uint64                      :offset-assert 1152) ;; handle
   (transport-side                  uint32                      :offset-assert 1160)
   (target-flags                    uint8                       :offset-assert 1164)
   (target-pos                      vector              :inline :offset-assert 1168)
   (target-pos-predict              vector              :inline :offset-assert 1184)
   (target-pos-predict-miss         vector              :inline :offset-assert 1200)
   (los-status                      uint64                      :offset-assert 1216)
   (target-vel-vec                  vector              :inline :offset-assert 1232)
   (target-vel                      float                       :offset-assert 1248)
   (target-self                     vector              :inline :offset-assert 1264)
   (target-self-xz                  vector              :inline :offset-assert 1280)
   (target-self-dist                float                       :offset-assert 1296)
   (target-self-xz-dist             float                       :offset-assert 1300)
   (grenade-guard-min-player-dist   float                       :offset-assert 1304)
   (flee-behavior                   flee-info           :inline :offset-assert 1308)
   (last-check-player-time          uint64                      :offset-assert 1312)
   (num-times-reloading-interrupted int32                       :offset-assert 1320)
   (total-flee-time                 uint64                      :offset-assert 1328)
   (last-fire-time                  uint64                      :offset-assert 1336)
   (ammo-count                      int8                        :offset-assert 1344)
   (urgent-fire                     basic                       :offset-assert 1348)
   (last-onscreen-time              uint64                      :offset-assert 1352)
   (target-y-angle                  float                       :offset-assert 1360) ;; degrees
   (rand-state-time                 uint64                      :offset-assert 1368)
   (pursuit-start-time              uint64                      :offset-assert 1376)
   (last-visible-target-pos         vector              :inline :offset-assert 1392)
   (lazer-sound                     sound-id                    :offset-assert 1408) ;; guessed by decompiler
   (move-position                   vector              :inline :offset-assert 1424)
   (move-index                      int32                       :offset-assert 1440)
   (reloading-ammo                  uint64                      :offset-assert 1448)
   (guard-riot-shield               uint64                      :offset-assert 1456)
   (guard-shield-rotate-y-degrees   float                       :offset-assert 1464)
   (attack-hit-shield-type          uint64                      :offset-assert 1472)
   (current-shield-logic            uint64                      :offset-assert 1480)
   (target-status                   squad-target-status :inline :offset-assert 1488)
   (minimap                         connection-minimap          :offset-assert 1556)
   (other-side                      symbol                      :offset-assert 1560) ;; guessed by decompiler
   (last-choose-new-enemy-time      uint64                      :offset-assert 1568)
   (last-quick-target-spot-angle    float                       :offset-assert 1576)
   (next-update-target-time         uint64                      :offset-assert 1584)
   (last-player-attack-time         uint64                      :offset-assert 1592)
   (player-attack-count             int32                       :offset-assert 1600)
   )
  :method-count-assert 291
  :size-assert         #x644
  :flag-assert         #x12305d00644
  (:methods
    (crimson-guard-method-216 () none) ;; 216 ;; (crimson-guard-method-216 (_type_) symbol)
    (crimson-guard-method-217 () none) ;; 217 ;; (crimson-guard-method-217 (_type_ vector vector vector) int)
    (crimson-guard-method-218 () none) ;; 218 ;; (crimson-guard-method-218 (_type_ vector) none)
    (crimson-guard-method-219 () none) ;; 219 ;; (crimson-guard-method-219 (_type_) none)
    (crimson-guard-method-220 () none) ;; 220 ;; (crimson-guard-method-220 (_type_) none)
    (crimson-guard-method-221 () none) ;; 221 ;; (crimson-guard-method-221 (_type_) none)
    (crimson-guard-method-222 () none) ;; 222 ;; (crimson-guard-method-222 (_type_) none)
    (crimson-guard-method-223 () none) ;; 223 ;; (crimson-guard-method-223 (_type_ float) none)
    (crimson-guard-method-224 () none) ;; 224 ;; (crimson-guard-method-224 (_type_ vector) float)
    (crimson-guard-method-225 () none) ;; 225 ;; (crimson-guard-method-225 (_type_ uint symbol) none)
    (crimson-guard-method-226 () none) ;; 226 ;; (crimson-guard-method-226 (_type_) none)
    (crimson-guard-method-227 () none) ;; 227
    (crimson-guard-method-228 () none) ;; 228
    (crimson-guard-method-229 () none) ;; 229
    (crimson-guard-method-230 () none) ;; 230
    (crimson-guard-method-231 () none) ;; 231
    (crimson-guard-method-232 () none) ;; 232
    (crimson-guard-method-233 () none) ;; 233
    (crimson-guard-method-234 () none) ;; 234
    (crimson-guard-method-235 () none) ;; 235
    (crimson-guard-method-236 () none) ;; 236
    (crimson-guard-method-237 () none) ;; 237
    (crimson-guard-method-238 () none) ;; 238
    (crimson-guard-method-239 () none) ;; 239
    (crimson-guard-method-240 () none) ;; 240
    (crimson-guard-method-241 () none) ;; 241
    (crimson-guard-method-242 () none) ;; 242
    (crimson-guard-method-243 () none) ;; 243
    (crimson-guard-method-244 () none) ;; 244
    (crimson-guard-method-245 () none) ;; 245
    (crimson-guard-method-246 () none) ;; 246
    (crimson-guard-method-247 () none) ;; 247
    (crimson-guard-method-248 () none) ;; 248
    (crimson-guard-method-249 () none) ;; 249
    (crimson-guard-method-250 () none) ;; 250
    (crimson-guard-method-251 () none) ;; 251
    (crimson-guard-method-252 () none) ;; 252
    (crimson-guard-method-253 () none) ;; 253
    (crimson-guard-method-254 () none) ;; 254
    (crimson-guard-method-255 () none) ;; 255
    (crimson-guard-method-256 () none) ;; 256
    (crimson-guard-method-257 () none) ;; 257
    (crimson-guard-method-258 () none) ;; 258
    (crimson-guard-method-259 () none) ;; 259
    (crimson-guard-method-260 () none) ;; 260
    (crimson-guard-method-261 () none) ;; 261
    (crimson-guard-method-262 () none) ;; 262
    (crimson-guard-method-263 () none) ;; 263
    (crimson-guard-method-264 () none) ;; 264
    (crimson-guard-method-265 () none) ;; 265
    (crimson-guard-method-266 () none) ;; 266
    (crimson-guard-method-267 () none) ;; 267
    (crimson-guard-method-268 () none) ;; 268
    (crimson-guard-method-269 () none) ;; 269
    (crimson-guard-method-270 () none) ;; 270
    (crimson-guard-method-271 () none) ;; 271
    (crimson-guard-method-272 () none) ;; 272
    (crimson-guard-method-273 () none) ;; 273
    (crimson-guard-method-274 () none) ;; 274
    (crimson-guard-method-275 () none) ;; 275
    (crimson-guard-method-276 () none) ;; 276
    (crimson-guard-method-277 () none) ;; 277
    (crimson-guard-method-278 () none) ;; 278
    (crimson-guard-method-279 () none) ;; 279
    (crimson-guard-method-280 () none) ;; 280
    (crimson-guard-method-281 () none) ;; 281
    (crimson-guard-method-282 () none) ;; 282
    (crimson-guard-method-283 () none) ;; 283
    (crimson-guard-method-284 () none) ;; 284
    (crimson-guard-method-285 () none) ;; 285
    (crimson-guard-method-286 () none) ;; 286
    (crimson-guard-method-287 () none) ;; 287
    (crimson-guard-method-288 () none) ;; 288
    (crimson-guard-method-289 () none) ;; 289
    (crimson-guard-method-290 () none) ;; 290
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-util                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern add-debug-line-arrow function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-engine                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype traffic-find-segment-struct (structure)
  ((best-seg    nav-segment         :offset-assert 0)
   (best-rating float               :offset-assert 4)
   (dir         vector      :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

;; (define-extern *traffic-suppress-activation* object) ;; symbol
;; (define-extern get-level-nav-graph-by-id function) ;; (function int nav-graph)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-manager                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(declare-type traffic-engine structure)
(deftype traffic-manager (process)
  ((traffic-engine   traffic-engine                      :offset-assert 128) ;; guessed by decompiler
   (fast-spawn       symbol                              :offset-assert 132) ;; guessed by decompiler
   (dark-guard-ratio int32                               :offset-assert 136)
   (spawn-params     traffic-object-spawn-params :inline :offset-assert 144)
   )
  :method-count-assert 23
  :size-assert         #x104
  :flag-assert         #x1700900104
  (:methods
    (traffic-manager-method-16 () none) ;; 16 ;; (update (_type_) none)
    (traffic-manager-method-17 () none) ;; 17 ;; (spawn-all (_type_) none)
    (traffic-manager-method-18 () none) ;; 18 ;; (kill-excess-once (_type_) none)
    (traffic-manager-method-19 () none) ;; 19 ;; (kill-all-inactive (_type_) none)
    (traffic-manager-method-20 () none) ;; 20 ;; (reset-and-init (_type_) none)
    (traffic-manager-method-21 () none) ;; 21 ;; (init-params (_type_) none)
    (traffic-manager-method-22 () none) ;; 22
    )
  (:state-methods
    active ;; 15, old: (active () _type_ :state)
    idle ;; 14, old: (idle () _type_ :state)
    )
  )

#|
(deftype want-count-binding (structure)
  ((obj-type uint8  :offset-assert 0)
   (count    uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )
|#

#|
(deftype want-count-group (structure)
  ((bindings basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype want-count-level-group (structure)
  ((want-groups basic  :offset-assert 0)
   (level       uint8  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )
|#

;; (define-extern *traffic-engine* object) ;; traffic-engine
;; (define-extern *traffic-fast-spawn* object) ;; symbol
;; (define-extern draw-city-info function) ;; (function city-level-info vis-grid-pos none)
;; (define-extern formation-spawn function)
;; (define-extern type-from-traffic-object-type function)
;; (define-extern citizen-spawn function) ;; (function process type traffic-object-spawn-params process-drawable)
;; (define-extern traffic-object-spawn function) ;; (function process traffic-object-spawn-params process-drawable)
;; (define-extern *traffic-vehicle-level-borrow-list* object)
;; (define-extern *traffic-vehicle-level-sound-list* object)
;; (define-extern traffic-manager-event-handler function) ;; (function process int symbol event-message-block object :behavior traffic-manager)
;; (define-extern traffic-manager-init-by-other function) ;; (function none :behavior traffic-manager)
;; (define-extern traffic-start function) ;; (function none)
;; (define-extern traffic-kill function) ;; (function none)
;; (define-extern ctywide-entity-hack function) ;; (function none)
;; (define-extern traffic-entity-hack function)
;; (define-extern riders-on function) ;; (function none)
;; (define-extern riders-off function) ;; (function none)
;; (define-extern *want-count-levels* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desresc-path                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desert-transport-node (structure)
  ((pos      vector :inline :offset-assert 0)
   (is-stop? basic          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern *desresc-transport-path-0* array)
;; (define-extern *desresc-transport-path-1* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desresc-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *desresc-warp-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-rescue                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rescue-speech-instance (speech-instance)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype desert-rescue-transport-init-params (structure)
  ((pos          vector     :inline :offset-assert 0)
   (quat         quaternion :inline :offset-assert 16)
   (path-pts     uint32             :offset-assert 32)
   (num-pts      int32              :offset-assert 36)
   (desresc-path basic              :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype desert-passenger-info (structure)
  ((passenger-pos       vector :inline :offset-assert 0)
   (beacon-pos          vector :inline :offset-assert 16)
   (transport-angle     float          :offset-assert 32)
   (is-final?           basic          :offset-assert 36)
   (total-time          uint64         :offset-assert 40)
   (num-marauders       int8           :offset-assert 48)
   (sandstorm-intensity float          :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

#|
(deftype task-manager-desert-rescue (task-manager)
  ((current-passenger-index int8    :offset-assert 240)
   (current-passenger       uint64  :offset-assert 248)
   (current-task-arrow      uint64  :offset-assert 256)
   (current-transport       uint64  :offset-assert 264)
   (taxi-timer              uint64  :offset-assert 272)
   (num-enemies-remaining   int8    :offset-assert 288)
   (current-enemy           uint64  :offset-assert 296)
   (jak-vehicle             uint64  :offset-assert 304)
   (dust-storm              uint64  :offset-assert 312)
   (passenger-pos           basic   :offset-assert 320)
   (desresc-path            basic   :offset-assert 324)
   )
  :method-count-assert 50
  :size-assert         #x148
  :flag-assert         #x3200d00148
  (:methods
    (task-manager-desert-rescue-method-42 () none) ;; 42
    (task-manager-desert-rescue-method-43 () none) ;; 43
    (task-manager-desert-rescue-method-44 () none) ;; 44
    (task-manager-desert-rescue-method-45 () none) ;; 45
    (task-manager-desert-rescue-method-46 () none) ;; 46
    (task-manager-desert-rescue-method-47 () none) ;; 47
    (task-manager-desert-rescue-method-48 () none) ;; 48
    (task-manager-desert-rescue-method-49 () none) ;; 49
    )
  (:state-methods
    finish-task ;; 34
    drop-off-passenger ;; 33
    pickup-passenger ;; 32
    fight ;; 35
    wait-for-vehicle-return ;; 39
    play-dead-wlander-movie ;; 38
    race-home ;; 36
    rescue-start ;; 37
    fail-delay ;; 41
    active ;; 15
    investigate-dead-wlander ;; 40
    wait ;; 14
    )
  )
|#

#|
(deftype transport-path-control (path-control)
  ()
  :method-count-assert 32
  :size-assert         #x24
  :flag-assert         #x2000000024
  )
|#

#|
(deftype desert-rescue-transport (process-focusable)
  ((pitch                   float   :offset-assert 208)
   (target-pitch            float   :offset-assert 212)
   (down-force              float   :offset-assert 216)
   (ground-offset           float   :offset-assert 220)
   (offset-dist             float   :offset-assert 224)
   (angular-speed           float   :offset-assert 228)
   (path-t                  float   :offset-assert 232)
   (current-node-index      int16   :offset-assert 236)
   (current-stop-node-index int16   :offset-assert 238)
   (move-speed              float   :offset-assert 240)
   (target-move-speed       float   :offset-assert 244)
   (has-passenger?          basic   :offset-assert 248)
   (seek-speed              float   :offset-assert 252)
   (is-braking?             basic   :offset-assert 256)
   (teleport-when-ready?    basic   :offset-assert 260)
   (die-when-ready?         basic   :offset-assert 264)
   (is-last-passenger?      basic   :offset-assert 268)
   (tread1                  uint64  :offset-assert 272)
   (tread2                  uint64  :offset-assert 280)
   (tread-frequency         uint8   :offset-assert 288)
   (tread-last-spawn-index  uint8   :offset-assert 289)
   (desresc-path            basic   :offset-assert 292)
   (can-board?              basic   :offset-assert 296)
   )
  :method-count-assert 46
  :size-assert         #x12c
  :flag-assert         #x2e00b0012c
  (:methods
    (desert-rescue-transport-method-28 () none) ;; 28
    (desert-rescue-transport-method-30 () none) ;; 30
    (desert-rescue-transport-method-34 () none) ;; 34
    (desert-rescue-transport-method-35 () none) ;; 35
    (desert-rescue-transport-method-36 () none) ;; 36
    (desert-rescue-transport-method-37 () none) ;; 37
    (desert-rescue-transport-method-38 () none) ;; 38
    (desert-rescue-transport-method-39 () none) ;; 39
    (desert-rescue-transport-method-40 () none) ;; 40
    (desert-rescue-transport-method-41 () none) ;; 41
    (desert-rescue-transport-method-42 () none) ;; 42
    (desert-rescue-transport-method-43 () none) ;; 43
    (desert-rescue-transport-method-44 () none) ;; 44
    (desert-rescue-transport-method-45 () none) ;; 45
    )
  (:state-methods
    following-path ;; 31
    waiting-for-passenger ;; 32
    preparing-for-launch ;; 33
    die ;; 29
    )
  )
|#

;; (define-extern *desert-rescue-speech-list* object)
;; (define-extern *rescue-speech* array)
;; (define-extern *rescue-speech-1* array)
;; (define-extern *rescue-speech-2* array)
;; (define-extern *rescue-speech-array* array)
;; (define-extern *duststorm-gate-pos* object)
;; (define-extern *duststorm-wind-angle* object)
;; (define-extern *home-pos* object)
;; (define-extern *snake-start-pos* object)
;; (define-extern *snake-start-angle* object)
;; (define-extern *passenger-pos* array)
;; (define-extern *__transport-path__* object)
;; (define-extern *transport-tread-settings* object)
;; (define-extern *replace-last* object)
;; (define-extern *frequency* object)
;; (define-extern desert-transport-event-handler function)
;; (define-extern desert-rescue-transport-init-by-other function)
;; (define-extern *transport-move-speed* object)
;; (define-extern idle-hidden state)
;; (define-extern hidden-idle state)
;; (define-extern *nav-mesh-aid* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-rescue-bbush            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-desert-rescue-bbush (task-manager-desert-rescue)
  ((actor-group       uint32  :offset-assert 324)
   (actor-group-count int32   :offset-assert 328)
   (final-timeout     uint64  :offset-assert 332)
   )
  :method-count-assert 52
  :size-assert         #x158
  :flag-assert         #x3400e00158
  (:state-methods
    pickup-passenger ;; 32
    finish-bbush ;; 51
    show-finish ;; 50
    drop-off-passenger ;; 33
    active ;; 15
    )
  )
|#

;; (define-extern *bbush-passenger-pos* object)
;; (define-extern *__bbush-transport-path__* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wland-passenger                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wland-passenger (citizen)
  ((task-arrow        uint64             :offset-assert 1032)
   (start-pos         vector     :inline :offset-assert 1040)
   (seat              int32              :offset-assert 1056)
   (transport         uint64             :offset-assert 1064)
   (is-dead?          basic              :offset-assert 1072)
   (align             basic              :offset-assert 148)
   (front-back-interp float              :offset-assert 1080)
   (left-right-interp float              :offset-assert 1084)
   (up-down-interp    float              :offset-assert 1088)
   (original-trans    vector     :inline :offset-assert 1104)
   (desired-pos       vector     :inline :offset-assert 1120)
   (dest-quat         quaternion :inline :offset-assert 1136)
   (original-quat     quaternion :inline :offset-assert 1152)
   (backup-nav-mask   uint32             :offset-assert 1168)
   (task-man          uint64             :offset-assert 1176)
   (nav-sphere-handle uint64             :offset-assert 1184)
   )
  :method-count-assert 232
  :size-assert         #x4a8
  :flag-assert         #xe8043004a8
  (:methods
    (wland-passenger-method-226 () none) ;; 226
    (wland-passenger-method-227 () none) ;; 227
    (wland-passenger-method-228 () none) ;; 228
    (wland-passenger-method-229 () none) ;; 229
    (wland-passenger-method-230 () none) ;; 230
    (wland-passenger-method-231 () none) ;; 231
    )
  (:state-methods
    lying-prone ;; 223
    ride-start ;; 224
    ride ;; 219
    exit-vehicle ;; 220
    board-vehicle ;; 218
    active ;; 34
    boarding ;; 216
    inactive ;; 191
    returning ;; 217
    approaching-transport ;; 221
    wait-for-transport-to-open ;; 225
    entering-transport ;; 222
    )
  )
|#

#|
(deftype wland-passenger-init-by-other-params (traffic-object-spawn-params)
  ((nav-branch nav-branch  :offset-assert 24)
   (is-dead?   basic       :offset-assert 116)
   (parent     uint64      :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )
|#

;; (define-extern probe-for-transport-ground function)
;; (define-extern compute-y-height function)
;; (define-extern compute-transport-approach-pt function)
;; (define-extern update-nav-sphere function)
;; (define-extern do-spline3 function)
;; (define-extern *progress* object)
;; (define-extern wland-passenger-wcar-anim-loop function)
;; (define-extern wland-passenger-init-by-other function)
;; (define-extern *wland-passenger-nav-enemy-info* nav-enemy-info)
;; (define-extern spawn-wlander function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rope-system-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rope-knot (structure)
  ((pos      vector :inline :offset-assert 0)
   (prev-pos vector :inline :offset-assert 16)
   (force    vector :inline :offset-assert 32)
   (mass     float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype rope-knot-constraint (structure)
  ((dir                    vector :inline :offset-assert 0)
   (length                 float          :offset-assert 16)
   (max-angle              float          :offset-assert 20)
   (rest-seek-rate         float          :offset-assert 24)
   (constrained-angle-time uint64         :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype rope-knot-constraint-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype rope-knot-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype rope-system (basic)
  ((knots                  basic          :offset-assert 4)
   (knot-constraints       basic          :offset-assert 8)
   (accum-force            vector :inline :offset-assert 16)
   (gravity                float          :offset-assert 32)
   (gravity-dir            vector :inline :offset-assert 48)
   (drag                   float          :offset-assert 64)
   (flags                  uint64         :offset-assert 72)
   (angular-mass-seek-rate float          :offset-assert 80)
   )
  :method-count-assert 24
  :size-assert         #x54
  :flag-assert         #x1800000054
  (:methods
    (rope-system-method-9 () none) ;; 9
    (rope-system-method-10 () none) ;; 10
    (rope-system-method-11 () none) ;; 11
    (rope-system-method-12 () none) ;; 12
    (rope-system-method-13 () none) ;; 13
    (rope-system-method-14 () none) ;; 14
    (rope-system-method-15 () none) ;; 15
    (rope-system-method-16 () none) ;; 16
    (rope-system-method-17 () none) ;; 17
    (rope-system-method-18 () none) ;; 18
    (rope-system-method-19 () none) ;; 19
    (rope-system-method-20 () none) ;; 20
    (rope-system-method-21 () none) ;; 21
    (rope-system-method-22 () none) ;; 22
    (rope-system-method-23 () none) ;; 23
    )
  )
|#

#|
(deftype rope-joint-info (structure)
  ((joint-index int16  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )
|#

#|
(deftype rope-joint-system-info (structure)
  ((joint-info-array basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype joint-mod-world-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rope-system                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rope-prim-system-h             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rope-joint-system (rope-system)
  ((info       rope-joint-system-info  :offset-assert 84)
   (joint-mods basic                   :offset-assert 88)
   (proc       uint64                  :offset-assert 96)
   )
  :method-count-assert 25
  :size-assert         #x68
  :flag-assert         #x1900000068
  (:methods
    (rope-joint-system-method-24 () none) ;; 24
    )
  )
|#

#|
(deftype rope-prim-system (rope-system)
  ((strip1         basic  :offset-assert 84)
   (strip2         basic  :offset-assert 88)
   (width          float  :offset-assert 92)
   (alpha          float  :offset-assert 96)
   (uv-repeat-dist float  :offset-assert 100)
   )
  :method-count-assert 25
  :size-assert         #x68
  :flag-assert         #x1900000068
  (:methods
    (rope-prim-system-method-24 () none) ;; 24
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rope-prim-system               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *rope-prim-alpha-blend* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-satellite                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype neo-sat-laser-info (structure)
  ((joint      int16  :offset-assert 0)
   (rope-index int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype neo-sat-hash-index (structure)
  ((h0 float  :offset-assert 0)
   (h1 float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype rope-neo-sat-whip (rope-prim-system)
  ((parent-handle uint64  :offset-assert 104)
   )
  :method-count-assert 25
  :size-assert         #x70
  :flag-assert         #x1900000070
  )
|#

#|
(deftype neo-sat-yellow-ammo-pos (structure)
  ((angle float  :offset-assert 0)
   (dist  float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype neo-sat (nav-enemy)
  ((nav-vector                 vector                 :inline :offset-assert 624)
   (y-movement                 float                          :offset-assert 640)
   (ground-offset              float                          :offset-assert 644)
   (desired-y-height           float                          :offset-assert 648)
   (xz-vel                     float                          :offset-assert 652)
   (x-vel                      float                          :offset-assert 656)
   (z-vel                      float                          :offset-assert 660)
   (offset-angle               float                          :offset-assert 664)
   (last-thrust-vec            vector                 :inline :offset-assert 672)
   (disc-joint                 joint-mod-rotate-local :inline :offset-assert 688)
   (laser-rotate-angle         float                          :offset-assert 720)
   (wander-generate-time       uint64                         :offset-assert 728)
   (hit-player?                basic                          :offset-assert 736)
   (desired-float-height       float                          :offset-assert 740)
   (bob-speed-scalar           float                          :offset-assert 744)
   (on-ground?                 basic                          :offset-assert 748)
   (current-shockwave-radius   float                          :offset-assert 752)
   (active-laser-index         int8                           :offset-assert 756)
   (current-stage              int8                           :offset-assert 757)
   (fly-speed-scalar           float                          :offset-assert 760)
   (last-shockwave-radius      float                          :offset-assert 764)
   (ropes                      basic                          :offset-assert 768)
   (max-speed                  float                          :offset-assert 772)
   (spin-current               float                          :offset-assert 776)
   (spin-dest                  float                          :offset-assert 780)
   (spin-speed                 float                          :offset-assert 784)
   (hashed-heights             UNKNOWN                1225    :offset-assert 788)
   (shockwave-origin           vector                 :inline :offset-assert 5696)
   (current-height-probe-index int16                          :offset-assert 5712)
   (last-spawned-ring-index    int16                          :offset-assert 5714)
   (global-neo-sat-index       uint8                          :offset-assert 5716)
   (yellow-ammo-pos            UNKNOWN                4       :offset-assert 5720)
   (num-yellow-ammo            int8                           :offset-assert 5784)
   (start-thrust-pos           vector                 :inline :offset-assert 5792)
   (was-player-inside-cone?    basic                          :offset-assert 5808)
   (was-doing-cone-check?      basic                          :offset-assert 5812)
   (damage-part1               basic                          :offset-assert 5816)
   (damage-part2               basic                          :offset-assert 5820)
   (damage-part3               basic                          :offset-assert 5824)
   (burst-dust-part            basic                          :offset-assert 5828)
   (warp-handle                uint64                         :offset-assert 5832)
   (spine-joint-mods           UNKNOWN                6       :offset-assert 5840)
   (actual-laser-rotate-angle  float                          :offset-assert 6032)
   (last-particle-rotate       float                          :offset-assert 6036)
   (trunk-joint                joint-mod-rotate-local :inline :offset-assert 6048)
   (ground-height              float                          :offset-assert 6080)
   (tentacle                   basic                          :offset-assert 6084)
   (anim-loop?                 basic                          :offset-assert 6088)
   (play-anim?                 basic                          :offset-assert 6092)
   (anim-speed                 float                          :offset-assert 6096)
   (should-rise?               basic                          :offset-assert 6100)
   (last-play-laser-time       uint64                         :offset-assert 6104)
   (snd-laser-burn             uint32                         :offset-assert 6112)
   (snd-whips-loop             UNKNOWN                3       :offset-assert 6116)
   (sound-last-snap-time       UNKNOWN                3       :offset-assert 6128)
   (sound-next-play-time       UNKNOWN                3       :offset-assert 6152)
   (new-spin-time              uint64                         :offset-assert 6176)
   (snd-arms-chatter           uint32                         :offset-assert 6184)
   (was-spinning?              basic                          :offset-assert 6188)
   (snd-hover                  uint32                         :offset-assert 6192)
   (snd-spool-explosion        uint32                         :offset-assert 6196)
   (antenna-explode-part       basic                          :offset-assert 6200)
   (next-lightning-time        uint64                         :offset-assert 6208)
   )
  :method-count-assert 234
  :size-assert         #x1848
  :flag-assert         #xea17d01848
  (:methods
    (neo-sat-method-198 () none) ;; 198
    (neo-sat-method-199 () none) ;; 199
    (neo-sat-method-200 () none) ;; 200
    (neo-sat-method-201 () none) ;; 201
    (neo-sat-method-202 () none) ;; 202
    (neo-sat-method-203 () none) ;; 203
    (neo-sat-method-204 () none) ;; 204
    (neo-sat-method-205 () none) ;; 205
    (neo-sat-method-206 () none) ;; 206
    (neo-sat-method-207 () none) ;; 207
    (neo-sat-method-208 () none) ;; 208
    (neo-sat-method-209 () none) ;; 209
    (neo-sat-method-210 () none) ;; 210
    (neo-sat-method-211 () none) ;; 211
    (neo-sat-method-212 () none) ;; 212
    (neo-sat-method-213 () none) ;; 213
    (neo-sat-method-214 () none) ;; 214
    (neo-sat-method-215 () none) ;; 215
    (neo-sat-method-216 () none) ;; 216
    (neo-sat-method-217 () none) ;; 217
    (neo-sat-method-218 () none) ;; 218
    (neo-sat-method-219 () none) ;; 219
    (neo-sat-method-220 () none) ;; 220
    (neo-sat-method-221 () none) ;; 221
    (neo-sat-method-222 () none) ;; 222
    (neo-sat-method-223 () none) ;; 223
    (neo-sat-method-224 () none) ;; 224
    (neo-sat-method-225 () none) ;; 225
    (neo-sat-method-226 () none) ;; 226
    (neo-sat-method-227 () none) ;; 227
    (neo-sat-method-228 () none) ;; 228
    (neo-sat-method-229 () none) ;; 229
    (neo-sat-method-230 () none) ;; 230
    (neo-sat-method-231 () none) ;; 231
    (neo-sat-method-232 () none) ;; 232
    (neo-sat-method-233 () none) ;; 233
    )
  (:state-methods
    sat-idle ;; 190
    ground-burst ;; 197
    hostile ;; 38
    neo-sat-laser-attack ;; 194
    neo-sat-drill-attack ;; 191
    neo-sat-drill-impact ;; 195
    die ;; 40
    neo-sat-sit-and-spin ;; 196
    neo-sat-drill-prepare ;; 192
    neo-sat-drill-returning ;; 193
    )
  (:states
    neo-sat-drill-halting
    )
  )
|#

#|
(deftype neo-sat-init-params (structure)
  ((pos  vector     :inline :offset-assert 0)
   (quat quaternion :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype neo-sat-shield (process-drawable)
  ()
  :method-count-assert 26
  :size-assert         #xc8
  :flag-assert         #x1a005000c8
  (:methods
    (neo-sat-shield-method-25 () none) ;; 25
    )
  (:state-methods
    active ;; 20
    disabled ;; 24
    turning-on ;; 21
    turning-off ;; 22
    hit ;; 23
    )
  )
|#

;; (define-extern spt-birth-func-brightness-sat-shockwave function)
;; (define-extern spt-birth-func-part-sat-shockwave function)
;; (define-extern spt-birth-func-brightness-scorch-bits function)
;; (define-extern spt-birth-func-part-scorch-bits function)
;; (define-extern spt-birth-func-part-ground-impact function)
;; (define-extern spt-birth-func-part-ground-emerge function)
;; (define-extern *range-sat-explo-color* curve-color-fast)
;; (define-extern *range-sat-explo-alpha* curve2d-fast)
;; (define-extern *range-sat-explo-scale-x* curve2d-fast)
;; (define-extern *range-sat-explo-scale-y* curve2d-fast)
;; (define-extern *curve-sat-explo-alpha* curve2d-fast)
;; (define-extern *curve-sat-explo-scale-x* curve2d-fast)
;; (define-extern *curve-sat-explo-scale-y* curve2d-fast)
;; (define-extern *part-neo-satellite-explosion-texture-curve-settings* object)
;; (define-extern *neo-sat-laser-array* array)
;; (define-extern *neo-sat-focus-pos* object)
;; (define-extern *alive-neo-sats* array)
;; (define-extern *neo-sat-nav-enemy-info* nav-enemy-info)
;; (define-extern *neo-sat-rope-tentacle* object)
;; (define-extern *neo-satellite-nav-mesh* object)
;; (define-extern neo-sat-init-by-other function)
;; (define-extern *h0* object)
;; (define-extern *h1* object)
;; (define-extern *hs* object)
;; (define-extern *m0* object)
;; (define-extern *m1* object)
;; (define-extern *ms* object)
;; (define-extern *move-offset* object)
;; (define-extern *maxh* object)
;; (define-extern *minh* object)
;; (define-extern *maxl* object)
;; (define-extern *minl* object)
;; (define-extern sparticle-height-set function)
;; (define-extern spt-func-part-neo-sat-shockwave-hot function)
;; (define-extern sparticle-shockwave-set function)
;; (define-extern spawn-neo-sat function)
;; (define-extern compute-xz-pos function)
;; (define-extern neo-sat-inside-cone? function)
;; (define-extern neo-sat-shield-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; railx-mood                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype railx-states (structure)
  ((pulses    UNKNOWN     6       :offset-assert 0)
   (blue      pulse-state :inline :offset-assert 0)
   (yellow    pulse-state :inline :offset-assert 16)
   (warp      pulse-state :inline :offset-assert 32)
   (spill     pulse-state :inline :offset-assert 48)
   (egg       pulse-state :inline :offset-assert 64)
   (transform pulse-state :inline :offset-assert 80)
   (flicker   float               :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

;; (define-extern init-mood-railx function)
;; (define-extern update-railx-lights function)
;; (define-extern update-mood-railx function)
;; (define-extern set-railx-light-brightness! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; railx-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rail-warp-gate (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern spt-birth-func-capsulescreen function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; railx-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern railx-death-precursor death-info)
;; (define-extern start-railx-precursor-effect function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyslumb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-drop-level-ctyslumb-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern *ctyslumb-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern mech-spawn-thruster function) ;; (function mech-info vector vector float float none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mech (process-drawable)
  ((extra-trans       vector :inline :offset-assert 208)
   (condition         int32          :offset-assert 224)
   (shadow-backup     basic          :offset-assert 228)
   (rider             uint64         :offset-assert 232)
   (shield-value      float          :offset-assert 240)
   (nav-sphere-handle uint64         :offset-assert 248)
   (probe-time        uint64         :offset-assert 256) ;; time-frame
   )
  :method-count-assert 25
  :size-assert         #x108
  :flag-assert         #x1900900108
  (:methods
    (mech-method-24 () none) ;; 24 ;; (mech-method-24 (_type_) none)
    )
  (:state-methods
    wait-for-return ;; 23, old: (wait-for-return () _type_ :state)
    pickup ;; 22, old: (pickup ((state mech)) _type_ :state)
    idle ;; 21, old: (idle () _type_ :state)
    wait-for-start ;; 20, old: (wait-for-start () _type_ :state)
    )
  )
|#

#|
(deftype mech-target (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    active ;; 21, old: (active () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern mech-init function) ;; (function entity-actor matrix3 handle float none :behavior mech)
;; (define-extern mech-target-init function) ;; (function vector quaternion entity-actor none :behavior mech)
;; (define-extern mech-target-spawn function) ;; (function vector process quaternion entity-actor (pointer mech-target))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-mech                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mech-shield (shield-sphere)
  ()
  :method-count-assert 43
  :size-assert         #x128
  :flag-assert         #x2b00b00128
  (:state-methods
    shield-disabled ;; 29
    )
  )
|#

;; (define-extern mech-shield-init-by-other function)
;; (define-extern *mech-stance-mods* surface) ;; surface
;; (define-extern *mech-walk-mods* surface) ;; surface
;; (define-extern *mech-jump-mods* surface) ;; surface
;; (define-extern *mech-punch-mods* surface) ;; surface
;; (define-extern *mech-pickup-mods* surface) ;; surface
;; (define-extern *mech-carry-walk-mods* surface) ;; surface
;; (define-extern *mech-carry-drag-mods* surface) ;; surface
;; (define-extern *mech-carry-jump-mods* surface) ;; surface
;; (define-extern target-mech-falling-anim-trans function) ;; (function none :behavior target)
;; (define-extern target-mech-mech-effect function) ;; (function target none :behavior mech)
;; (define-extern mech-on-ground? function) ;; (function symbol :behavior target)
;; (define-extern target-mech-get-off? function) ;; (function symbol :behavior target)
;; (define-extern target-mech-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-mech-bonk-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern mech-leg-ik-callback function) ;; (function joint-mod-ik matrix matrix vector object :behavior target)
;; (define-extern mech-update-ik function) ;; (function none :behavior target)
;; (define-extern target-mech-init function) ;; (function handle float symbol none :behavior target)
;; (define-extern target-mech-exit function) ;; (function none :behavior target)
;; (define-extern target-mech-effect function) ;; (function none :behavior target)
;; (define-extern target-mech-add-thrust function) ;; (function none :behavior target)
;; (define-extern target-mech-collision function) ;; (function none :behavior target)
;; (define-extern target-mech-real-post function) ;; (function none :behavior target)
;; (define-extern target-mech-post function) ;; (function none :behavior target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mech-states                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *mech-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params
;; (define-extern check-turn-on-shield function)
;; (define-extern mech-can-throw? function)
;; (define-extern target-mech-punch-pick function) ;; (function symbol int :behavior target)
;; (define-extern target-mech-carry-update function) ;; (function none :behavior target)
;; (define-extern target-mech-carry-post function) ;; (function none :behavior target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nstb-texture                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *nstb-quicksand-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-mood                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nsta-states (structure)
  ((poison-interp float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype nstb-states (structure)
  ((poison-interp float     :offset-assert 0)
   (pulse         UNKNOWN 5 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

;; (define-extern update-nst-lights function)
;; (define-extern update-mood-nsta function)
;; (define-extern init-mood-nstb function)
;; (define-extern update-mood-nstb function)
;; (define-extern *nstb-light-mode* object)
;; (define-extern set-nstb-lights! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-part                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-ceiling-dust* curve-color-fast)
;; (define-extern *range-alpha-ceiling-dust* curve2d-fast)
;; (define-extern *range-scale-ceiling-dust-x* curve2d-fast)
;; (define-extern *range-scale-ceiling-dust-y* curve2d-fast)
;; (define-extern *curve-alpha-ceiling-dust* curve2d-fast)
;; (define-extern *curve-ceiling-dust-x* curve2d-fast)
;; (define-extern *curve-ceiling-dust-y* curve2d-fast)
;; (define-extern *part-nest-ceiling-dust-curve-settings* object)
;; (define-extern birth-func-find-ground function)
;; (define-extern spt-func-check-hit-ground function)
;; (define-extern *range-color-ground-impact-dust* curve-color-fast)
;; (define-extern *range-alpha-ground-impact-dust* curve2d-fast)
;; (define-extern *range-scale-ground-impact-dust-x* curve2d-fast)
;; (define-extern *range-scale-ground-impact-dust-y* curve2d-fast)
;; (define-extern *curve-alpha-ground-impact-dust* curve2d-fast)
;; (define-extern *curve-ground-impact-dust-x* curve2d-fast)
;; (define-extern *curve-ground-impact-dust-y* curve2d-fast)
;; (define-extern *part-nest-ground-impact-dust-curve-settings* object)
;; (define-extern part-nest-bat1-path function)
;; (define-extern part-nest-bat2-path function)
;; (define-extern part-nest-bat3-path function)
;; (define-extern part-nest-bat4-path function)
;; (define-extern part-nest-bat5-path function)
;; (define-extern part-nest-bat6-path function)
;; (define-extern part-nest-bat7-path function)
;; (define-extern part-nest-bat8-path function)
;; (define-extern part-nest-bat9-path function)
;; (define-extern part-nest-bat10-path function)
;; (define-extern *range-nst-splash-color* curve-color-fast)
;; (define-extern *range-nst-splash-alpha* curve2d-fast)
;; (define-extern *range-nst-splash-scale-x* curve2d-fast)
;; (define-extern *range-nst-splash-scale-y* curve2d-fast)
;; (define-extern *curve-nst-splash-alpha* curve2d-fast)
;; (define-extern *curve-nst-splash-scale-x* curve2d-fast)
;; (define-extern *curve-nst-splash-scale-y* curve2d-fast)
;; (define-extern *part-bridge-break-splash-curve-settings* object)
;; (define-extern birth-func-nstb-set-height-and-curve function)
;; (define-extern birth-func-nstb-set-height function)
;; (define-extern birth-func-nstb-set-height-and-texture-group function)
;; (define-extern *range-color-cocoon-poison-gas* curve-color-fast)
;; (define-extern *range-alpha-cocoon-poison-gas* curve2d-fast)
;; (define-extern *range-scale-cocoon-poison-gas-x* curve2d-fast)
;; (define-extern *range-scale-cocoon-poison-gas-y* curve2d-fast)
;; (define-extern *r-curve-cocoon-poison-gas* curve2d-fast)
;; (define-extern *g-curve-cocoon-poison-gas* curve2d-fast)
;; (define-extern *b-curve-cocoon-poison-gas* curve2d-fast)
;; (define-extern *curve-alpha-cocoon-poison-gas* curve2d-fast)
;; (define-extern *curve-cocoon-poison-gas-x* curve2d-fast)
;; (define-extern *curve-cocoon-poison-gas-y* curve2d-fast)
;; (define-extern *part-cocoon-poison-gas-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-obs                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nst-water-anim (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype nst-metalhead-eggs (process-focusable)
  ((actor-group  basic  :offset-assert 208)
   (notify-actor basic  :offset-assert 212)
   )
  :method-count-assert 33
  :size-assert         #xd8
  :flag-assert         #x21006000d8
  (:methods
    (nst-metalhead-eggs-method-31 () none) ;; 31
    (nst-metalhead-eggs-method-32 () none) ;; 32
    )
  (:state-methods
    die-fast ;; 30
    die ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype nst-metalhead-eggs-a (nst-metalhead-eggs)
  ()
  :method-count-assert 33
  :size-assert         #xd8
  :flag-assert         #x21006000d8
  )
|#

#|
(deftype nst-metalhead-eggs-b (nst-metalhead-eggs)
  ()
  :method-count-assert 33
  :size-assert         #xd8
  :flag-assert         #x21006000d8
  )
|#

#|
(deftype nst-metalhead-eggs-c (nst-metalhead-eggs)
  ()
  :method-count-assert 33
  :size-assert         #xd8
  :flag-assert         #x21006000d8
  )
|#

#|
(deftype nst-bridge-base (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (nst-bridge-base-method-21 () none) ;; 21
    (nst-bridge-base-method-22 () none) ;; 22
    )
  (:state-methods
    nst-bridge-base-state ;; 20
    )
  )
|#

#|
(deftype nst-falling-stone-bridge-goo (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype nst-falling-stone-bridge (nst-bridge-base)
  ((fall-anim         int32               :offset-assert 200)
   (goo               uint32              :offset-assert 204)
   (actor-group       basic               :offset-assert 208)
   (egg-threshold     uint8               :offset-assert 212)
   (stop-bridge-sound basic               :offset-assert 216)
   (bridge-sound      uint32              :offset-assert 220)
   (minimap           connection-minimap  :offset-assert 224)
   )
  :method-count-assert 27
  :size-assert         #xe4
  :flag-assert         #x1b007000e4
  (:state-methods
    grounded ;; 26
    falling ;; 25
    explode-dispatch ;; 24
    idle ;; 23
    )
  )
|#

#|
(deftype nst-collapsing-stone-bridge (nst-bridge-base)
  ((anim              basic   :offset-assert 200)
   (exit-anim         int32   :offset-assert 204)
   (bridge-type       uint64  :offset-assert 208)
   (stop-bridge-sound basic   :offset-assert 216)
   (bridge-sound      uint32  :offset-assert 220)
   )
  :method-count-assert 27
  :size-assert         #xe0
  :flag-assert         #x1b006000e0
  (:state-methods
    collapse-fast ;; 26
    collapsed ;; 25
    collapsing ;; 24
    idle ;; 23
    )
  )
|#

#|
(deftype cocoon-grenade-shot (metalhead-grenade-shot)
  ()
  :method-count-assert 41
  :size-assert         #x214
  :flag-assert         #x2901a00214
  )
|#

#|
(deftype nst-cocoon-a (enemy)
  ((alt-actor            basic                       :offset-assert 552)
   (activate-distance    float                       :offset-assert 556)
   (can-shoot?           basic                       :offset-assert 560)
   (last-attack-time     uint64                      :offset-assert 568)
   (turret               joint-mod-set-world :inline :offset-assert 576)
   (dest-quat            quaternion          :inline :offset-assert 640)
   (cycling?             basic                       :offset-assert 656)
   (cycle-rot            float                       :offset-assert 660)
   (shots-left           uint8                       :offset-assert 664)
   (cocoon-part          basic                       :offset-assert 668)
   (charge-down-part     basic                       :offset-assert 672)
   (charge-up-part       basic                       :offset-assert 676)
   (sound-turret-loop-id uint32                      :offset-assert 680)
   (sound-turret-loop    basic                       :offset-assert 684)
   (palette-id           int32                       :offset-assert 688)
   (minimap              connection-minimap          :offset-assert 692)
   )
  :method-count-assert 156
  :size-assert         #x2b8
  :flag-assert         #x9c024002b8
  (:methods
    (nst-cocoon-a-method-155 () none) ;; 155
    )
  (:state-methods
    die ;; 40
    hit ;; 30
    stare ;; 37
    hostile ;; 38
    notice ;; 35
    )
  )
|#

#|
(deftype nst-cocoon-b (process-drawable)
  ((sound-amb-loop-id uint32  :offset-assert 200)
   (sound-amb-loop    basic   :offset-assert 204)
   (gas-sound-id      uint32  :offset-assert 208)
   )
  :method-count-assert 25
  :size-assert         #xd4
  :flag-assert         #x19006000d4
  (:state-methods
    retracted ;; 24
    releasing-poison ;; 23
    wait-for-cocoons ;; 22
    retracting ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype nst-light-barrier (process-focusable)
  ((pass               int32          :offset-assert 208)
   (incoming-attack-id uint32         :offset-assert 212)
   (next-message-time  uint64         :offset-assert 216)
   (message            int32          :offset-assert 224)
   (plane              plane  :inline :offset-assert 240)
   (color              vector :inline :offset-assert 256)
   (target-pos         vector :inline :offset-assert 272)
   )
  :method-count-assert 31
  :size-assert         #x120
  :flag-assert         #x1f00a00120
  (:methods
    (nst-light-barrier-method-29 () none) ;; 29
    (nst-light-barrier-method-30 () none) ;; 30
    )
  (:state-methods
    idle ;; 28
    )
  )
|#

;; (define-extern ripple-for-nst-water-anim ripple-wave-set)
;; (define-extern *nst-metalhead-eggs-last-sound-time* object)
;; (define-extern *nst-falling-stone-bridge-goo-exploder-params* joint-exploder-static-params)
;; (define-extern nst-falling-stone-bridge-goo-init-by-other function)
;; (define-extern *nst-falling-stone-bridge-part-nodes* array)
;; (define-extern sound-exit function)
;; (define-extern *nst-bridge-break-anims* array)
;; (define-extern *nst-bridge-break-exit-anims* array)
;; (define-extern *nst-cocoon-a-enemy-info* enemy-info)
;; (define-extern *nst-cocoon-a-goop-joints* array)
;; (define-extern *nst-cocoon-a-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-bat                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-bat (enemy)
  ((rotation-matrix      matrix      :inline :offset-assert 560)
   (move-curve           cubic-curve :inline :offset-assert 624)
   (start-pos            vector      :inline :offset-assert 688)
   (up-vector            vector      :inline :offset-assert 704)
   (focus-bullseye-pos   vector      :inline :offset-assert 720)
   (focus-xz-dir         vector      :inline :offset-assert 752)
   (target-velocity      vector      :inline :offset-assert 768)
   (target-speed         float               :offset-assert 784)
   (y-offset             float               :offset-assert 788)
   (max-time-step        float               :offset-assert 792)
   (orbit-angle          float               :offset-assert 796)
   (orbit-angular-speed  float               :offset-assert 800)
   (orbit-distance       float               :offset-assert 804)
   (bank-angle           float               :offset-assert 808)
   (pitch-angle          float               :offset-assert 812)
   (anim-speed           float               :offset-assert 816)
   (last-off-screen-time uint64              :offset-assert 824)
   (nav-mesh             basic               :offset-assert 832)
   (flap-interp          float               :offset-assert 836)
   (shadow-id            int32               :offset-assert 840)
   (move-dest            vector      :inline :offset-assert 368)
   )
  :method-count-assert 162
  :size-assert         #x34c
  :flag-assert         #xa202d0034c
  (:methods
    (mh-bat-method-158 () none) ;; 158
    (mh-bat-method-159 () none) ;; 159
    (mh-bat-method-160 () none) ;; 160
    (mh-bat-method-161 () none) ;; 161
    )
  (:state-methods
    knocked-recover ;; 32
    attack-1 ;; 157
    attack-0 ;; 156
    stare ;; 37
    hostile ;; 38
    retreat ;; 155
    ambush ;; 47
    dormant-aware ;; 29
    )
  )
|#

;; (define-extern *fact-info-mh-bat-defaults* fact-info-enemy-defaults)
;; (define-extern *mh-bat-enemy-info* enemy-info)
;; (define-extern mh-bat-fly-code function)
;; (define-extern mh-bat-fly-post function)
;; (define-extern mh-bat-chase-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; egg-spider                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype egg-spider-shot (metalhead-grenade-shot)
  ()
  :method-count-assert 41
  :size-assert         #x214
  :flag-assert         #x2901a00214
  )
|#

#|
(deftype egg-spider (nav-enemy)
  ((base-height       float              :offset-assert 620)
   (target-pos        vector     :inline :offset-assert 624)
   (offset-target-pos vector     :inline :offset-assert 640)
   (change-dir-time   uint64             :offset-assert 656)
   (last-change-dir   uint64             :offset-assert 664)
   (onscreen-time     uint64             :offset-assert 672)
   (next-explosion    uint64             :offset-assert 680)
   (move-angle        float              :offset-assert 688)
   (heading           basic              :offset-assert 692)
   (size              float              :offset-assert 696)
   (angle-spot        float              :offset-assert 700)
   (trackable?        basic              :offset-assert 704)
   (vehicle-attack?   basic              :offset-assert 708)
   (seat-index        int32              :offset-assert 712)
   (wvehicle          uint64             :offset-assert 720)
   (vec-up            vector     :inline :offset-assert 736)
   (vec-up-speed      vector     :inline :offset-assert 752)
   (traj              trajectory :inline :offset-assert 768)
   (init-pos          vector     :inline :offset-assert 816)
   (jump-pos          float              :offset-assert 832)
   )
  :method-count-assert 197
  :size-assert         #x344
  :flag-assert         #xc502d00344
  (:methods
    (egg-spider-method-190 () none) ;; 190
    (egg-spider-method-194 () none) ;; 194
    (egg-spider-method-195 () none) ;; 195
    (egg-spider-method-196 () none) ;; 196
    )
  (:state-methods
    ambush ;; 47
    knocked ;; 31
    hostile ;; 38
    on-vehicle ;; 192
    jump-on-vehicle ;; 193
    attack ;; 191
    idle ;; 33
    )
  )
|#

#|
(deftype spider-manager (process-drawable)
  ((count-alive       int32          :offset-assert 196)
   (next-spawn-time   uint64         :offset-assert 204)
   (min-spawn-delay   int32          :offset-assert 212)
   (max-spawn-delay   int32          :offset-assert 216)
   (next-spot-time    uint64         :offset-assert 220)
   (min-spot-delay    int32          :offset-assert 228)
   (max-spot-delay    int32          :offset-assert 232)
   (actor-group       uint32         :offset-assert 236)
   (actor-group-count int32          :offset-assert 240)
   (spawn-pos         vector :inline :offset-assert 252)
   (nav-id            uint32         :offset-assert 268)
   (can-rid           uint64         :offset-assert 276)
   (next-explosion    uint64         :offset-assert 284)
   (num-nav-mesh      int32          :offset-assert 292)
   (count-max         int32          :offset-assert 296)
   (max-spawn-size    float          :offset-assert 300)
   (count-death       uint32         :offset-assert 304)
   )
  :method-count-assert 26
  :size-assert         #x138
  :flag-assert         #x1a00c00138
  (:methods
    (spider-manager-method-21 () none) ;; 21
    (spider-manager-method-22 () none) ;; 22
    (spider-manager-method-23 () none) ;; 23
    (spider-manager-method-24 () none) ;; 24
    (spider-manager-method-25 () none) ;; 25
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *egg-spider-always-trackable?* object)
;; (define-extern check-drop-level-egg-spider-dirt-rubble function)
;; (define-extern spt-birth-func-brightness-egg-spider function)
;; (define-extern spt-birth-func-part-egg-spider-clumps function)
;; (define-extern spt-func-part-egg-spider-clumps function)
;; (define-extern spt-birth-func-part-egg-spider-clumps-mass function)
;; (define-extern spt-func-part-egg-spider-clumps-mass function)
;; (define-extern spt-birth-func-part-egg-spider-clumps-pop function)
;; (define-extern spt-func-part-egg-spider-clumps-pop function)
;; (define-extern spt-birth-func-part-egg-spider-clumps-stays function)
;; (define-extern spt-func-part-egg-spider-clumps-stays function)
;; (define-extern *egg-spider-nav-enemy-info* nav-enemy-info)
;; (define-extern *egg-spider-next-knocked-vehicle* object)
;; (define-extern egg-spider-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nest-scenes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; timer-path                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype timer-chase-node (structure)
  ((pos       vector :inline :offset-assert 0)
   (is-spawn? basic          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern *timer-chase-path-0* array)
;; (define-extern *timer-chase-path-1* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-bush-time-chase            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype trail-effect (process-drawable)
  ((trail     uint64  :offset-assert 200)
   (goal-part basic   :offset-assert 208)
   )
  :method-count-assert 22
  :size-assert         #xd4
  :flag-assert         #x16006000d4
  (:state-methods
    dormant ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype timer-chase-trail (light-trail-tracker-projectile)
  ((time-offset     uint64  :offset-assert 192)
   (start-tracking? basic   :offset-assert 200)
   )
  :method-count-assert 24
  :size-assert         #xcc
  :flag-assert         #x18005000cc
  (:methods
    (timer-chase-trail-method-23 () none) ;; 23
    )
  (:state-methods
    fadeout ;; 22
    tracking ;; 14
    )
  )
|#

#|
(deftype bb-goal (process-drawable)
  ((activate-radius float   :offset-assert 200)
   (sound-id        uint32  :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype bb-freeze (process-drawable)
  ((launch-pos           vector :inline :offset-assert 208)
   (activate-radius      float          :offset-assert 224)
   (freeze-time          float          :offset-assert 228)
   (freeze-pickup-radius float          :offset-assert 232)
   (bb-pickup-type       uint8          :offset-assert 236)
   )
  :method-count-assert 23
  :size-assert         #xed
  :flag-assert         #x17007000ed
  (:state-methods
    die ;; 22
    idle ;; 20
    dormant ;; 21
    )
  )
|#

#|
(deftype a-bb-freeze (bb-freeze)
  ()
  :method-count-assert 23
  :size-assert         #xed
  :flag-assert         #x17007000ed
  )
|#

#|
(deftype b-bb-freeze (bb-freeze)
  ()
  :method-count-assert 23
  :size-assert         #xed
  :flag-assert         #x17007000ed
  )
|#

#|
(deftype freeze-time-hud (hud-goal)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-bbush-timer-chase (task-manager)
  ((actor-group              uint32         :offset-assert 236)
   (actor-group-count        int32          :offset-assert 240)
   (freeze-time              float          :offset-assert 244)
   (path-pos                 float          :offset-assert 248)
   (trail-effect             uint64         :offset-assert 252)
   (trans                    vector :inline :offset-assert 268)
   (freeze-activation-radius float          :offset-assert 284)
   (goal-activation-radius   float          :offset-assert 288)
   (total-time               float          :offset-assert 292)
   (touched                  basic          :offset-assert 296)
   (freeze-time              float          :offset-assert 244)
   (freeze-time-1            float          :offset-assert 304)
   (freeze-time-2            float          :offset-assert 308)
   (freeze-time-3            float          :offset-assert 312)
   (freeze-pickup-radius     float          :offset-assert 316)
   (freeze-time-hud          uint64         :offset-assert 324)
   (sound-id                 uint32         :offset-assert 332)
   (color-flash-time         uint64         :offset-assert 340)
   )
  :method-count-assert 35
  :size-assert         #x160
  :flag-assert         #x2300e00160
  (:methods
    (task-manager-bbush-timer-chase-method-32 () none) ;; 32
    (task-manager-bbush-timer-chase-method-33 () none) ;; 33
    (task-manager-bbush-timer-chase-method-34 () none) ;; 34
    )
  (:state-methods
    active ;; 15
    resolution ;; 17
    )
  )
|#

#|
(deftype task-manager-bbush-timer-chase-2 (task-manager-bbush-timer-chase)
  ()
  :method-count-assert 35
  :size-assert         #x160
  :flag-assert         #x2300e00160
  )
|#

#|
(deftype task-manager-bbush-timer-chase-3 (task-manager-bbush-timer-chase)
  ()
  :method-count-assert 35
  :size-assert         #x160
  :flag-assert         #x2300e00160
  )
|#

;; (define-extern *tex-time-chase-level-list* array)
;; (define-extern find-time-chase-level-name function)
;; (define-extern *bb-alpha* object)
;; (define-extern spt-func-bb-fader function)
;; (define-extern *bb-timer-chase-trail* object)
;; (define-extern trail-effect-init-by-other function)
;; (define-extern bb-goal-init-by-other function)
;; (define-extern bb-pickup-type->string function)
;; (define-extern set-time-chase-particle-texture function)
;; (define-extern bb-freeze-init-by-other function)
;; (define-extern a-bb-freeze-init-by-other function)
;; (define-extern b-bb-freeze-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyslumc-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyslumc-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#

#|
(deftype ctyslumc-flag (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *ctyslumc-water-texture-anim-array* texture-anim-array)
;; (define-extern ctyslumc-flag-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pecker-ingame                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pecker-ingame (process-drawable)
  ((path-u float  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:state-methods
    die ;; 22
    active ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern pecker-ingame-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; combx-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype combx-elevator (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (combx-elevator-method-21 () none) ;; 21
    (combx-elevator-method-22 () none) ;; 22
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype combx-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern init-mood-combx function)
;; (define-extern update-mood-combx function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; combx-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; artifact-race                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype artifact-info (structure)
  ((pos           vector :inline :offset-assert 0)
   (time          uint32         :offset-assert 16)
   (artifact-type uint8          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x15
  :flag-assert         #x900000015
  )
|#

#|
(deftype was-artifact (process-drawable)
  ((pos  vector :inline :offset-assert 208)
   (angs vector :inline :offset-assert 224)
   )
  :method-count-assert 26
  :size-assert         #xf0
  :flag-assert         #x1a007000f0
  (:methods
    (was-artifact-method-23 () none) ;; 23
    (was-artifact-method-24 () none) ;; 24
    (was-artifact-method-25 () none) ;; 25
    )
  (:state-methods
    die ;; 22
    sink ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-desert-artifact-race (task-manager)
  ((count              int8            :offset-assert 240)
   (max-count          int8            :offset-assert 241)
   (death-count        uint8           :offset-assert 242)
   (target-count       int8            :offset-assert 243)
   (target-speed       float           :offset-assert 244)
   (slave              uint64          :offset-assert 248)
   (speech-time        uint64          :offset-assert 256)
   (final-time         uint32          :offset-assert 264)
   (suck-factor        float           :offset-assert 268)
   (extra-suck-time    float           :offset-assert 272)
   (hit-point-scale    float           :offset-assert 276)
   (dust-begin         float           :offset-assert 280)
   (dust-last-artifact float           :offset-assert 284)
   (dust-end           float           :offset-assert 288)
   (ent                basic           :offset-assert 292)
   (speech-callback    basic           :offset-assert 296)
   (begin-pos          vector  :inline :offset-assert 304)
   (end-pos            vector  :inline :offset-assert 320)
   (door-plane         vector  :inline :offset-assert 336)
   (objs               UNKNOWN 32      :offset-assert 352)
   )
  :method-count-assert 35
  :size-assert         #x560
  :flag-assert         #x2304e00560
  (:methods
    (task-manager-desert-artifact-race-method-32 () none) ;; 32
    (task-manager-desert-artifact-race-method-33 () none) ;; 33
    (task-manager-desert-artifact-race-method-34 () none) ;; 34
    )
  (:state-methods
    fail ;; 18
    complete ;; 16
    active ;; 15
    )
  )
|#

;; (define-extern was-artifact-init-by-other function)
;; (define-extern was-artifact-spawn function)
;; (define-extern *artifact-race-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-torch-spline-align function)
;; (define-extern spt-func-fact-torch function)
;; (define-extern spt-birth-func-fact-torch function)
;; (define-extern *range-color-fact-big-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-fact-big-torch-flame* curve2d-fast)
;; (define-extern *range-scale-fact-big-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-fact-big-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-fact-big-torch-flame* curve2d-fast)
;; (define-extern *g-curve-fact-big-torch-flame* curve2d-fast)
;; (define-extern *b-curve-fact-big-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-fact-big-torch-flame* curve2d-fast)
;; (define-extern *curve-fact-big-torch-flame-x* curve2d-fast)
;; (define-extern *curve-fact-big-torch-flame-y* curve2d-fast)
;; (define-extern *part-fact-big-torch-flame-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryc-mood                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype factoryc-states (structure)
  ((electricity UNKNOWN      2       :offset-assert 0)
   (flame       flames-state :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x27
  :flag-assert         #x900000027
  )
|#

;; (define-extern update-mood-factoryc function)
;; (define-extern set-factoryc-light! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryc-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *factoryc-alpha-texture-anim-array* texture-anim-array)
;; (define-extern set-facc-conveyor-speed! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; conveyor                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype conveyor-section (structure)
  ((start      vector :inline :offset-assert 0)
   (trailing   plane  :inline :offset-assert 16)
   (pull-dir   vector :inline :offset-assert 32)
   (radial-dir vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype conveyor-section-array (inline-array-class)
  ((data conveyor-section :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype conveyor (process-drawable)
  ((speed                float                          :offset-assert 200)
   (belt-radius          float                          :offset-assert 204)
   (pull-y-threshold     float                          :offset-assert 208)
   (speed-mult-array     (array float)                  :offset-assert 212) ;; guessed by decompiler
   (speed-mult-array-len int8                           :offset-assert 216)
   (sections             conveyor-section-array         :offset-assert 220) ;; guessed by decompiler
   (leading              plane                  :inline :offset-assert 224)
   (collide-bounds       sphere                 :inline :offset-assert 240)
   )
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:methods
    (conveyor-method-21 () none) ;; 21 ;; (conveyor-method-21 (_type_) float)
    (conveyor-method-22 () none) ;; 22 ;; (get-art-group (_type_) art-group)
    (conveyor-method-23 () none) ;; 23 ;; (reset-root! (_type_) none)
    (conveyor-method-24 () none) ;; 24 ;; (init! (_type_) none)
    (conveyor-method-25 () none) ;; 25 ;; (set-and-get-ambient-sound! (_type_) ambient-sound)
    (conveyor-method-26 () none) ;; 26 ;; (conveyor-method-26 (_type_ process-focusable) symbol)
    (conveyor-method-27 () none) ;; 27 ;; (conveyor-method-27 (_type_) symbol)
    (conveyor-method-28 () none) ;; 28
    )
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-factoryc             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *factoryc-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryc-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype generic-spot-shadow-effect (process-drawable)
  ((focal-length    float                       :offset-assert 200)
   (near-clip       float                       :offset-assert 204)
   (far-clip        float                       :offset-assert 208)
   (color           uint32                      :offset-assert 212)
   (pre-flicker-pos vector              :inline :offset-assert 224)
   (jmod-outer      joint-mod-add-local :inline :offset-assert 240)
   (jmod-inner      joint-mod-add-local :inline :offset-assert 304)
   )
  :method-count-assert 24
  :size-assert         #x170
  :flag-assert         #x1800f00170
  (:methods
    (generic-spot-shadow-effect-method-22 () none) ;; 22
    (generic-spot-shadow-effect-method-23 () none) ;; 23
    )
  (:state-methods
    inactive ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype fac-zapper (process)
  ((on-duration  uint64  :offset-assert 128)
   (off-duration uint64  :offset-assert 136)
   (phase-offset uint64  :offset-assert 144)
   (beam-is-on   basic   :offset-assert 152)
   (bzzt-sound   uint32  :offset-assert 156)
   (path         basic   :offset-assert 160)
   (lightning    basic   :offset-assert 164)
   (hilite       uint64  :offset-assert 168)
   )
  :method-count-assert 15
  :size-assert         #xb0
  :flag-assert         #xf003000b0
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype fac-fire-torch (process-drawable)
  ((on-duration   uint64             :offset-assert 200)
   (off-duration  uint64             :offset-assert 208)
   (phase-offset  uint64             :offset-assert 216)
   (fire-is-on    basic              :offset-assert 224)
   (sync          sync-eased :inline :offset-assert 232)
   (path-pos      float              :offset-assert 276)
   (looping-sound uint32             :offset-assert 280)
   (particle-hack matrix     :inline :offset-assert 288)
   )
  :method-count-assert 21
  :size-assert         #x160
  :flag-assert         #x1500e00160
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype fac-robopod (process-focusable)
  ((my-baby           UNKNOWN 3 :offset-assert 208)
   (num-babies        uint32    :offset-assert 232)
   (subtask-countdown int32     :offset-assert 236)
   (suppressed        basic     :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf4
  :flag-assert         #x20008000f4
  (:state-methods
    already-dead ;; 31
    die ;; 30
    generate ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype factory-elec-gate (process)
  ((path-l            basic     :offset-assert 124)
   (path-r            basic     :offset-assert 128)
   (beams             UNKNOWN 4 :offset-assert 132)
   (beams-on          UNKNOWN 4 :offset-assert 148)
   (bzzt-sound        uint32    :offset-assert 164)
   (blocking-plane    uint64    :offset-assert 172)
   (actor-group       uint32    :offset-assert 180)
   (actor-group-count int32     :offset-assert 184)
   )
  :method-count-assert 16
  :size-assert         #xc0
  :flag-assert         #x10004000c0
  (:state-methods
    flickering ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern factoryc-activate function)
;; (define-extern factoryc-login function)
;; (define-extern factoryc-logout function)
;; (define-extern generic-spot-shadow-effect-init-by-other function)
;; (define-extern generic-spot-shadow-effect-handler function)
;; (define-extern *fac-robopod-pool-count* object)
;; (define-extern *fac-robopod-exploder-params* joint-exploder-static-params)
;; (define-extern fac-robopod-add-hoverbot function)
;; (define-extern fac-robopod-invalidate-hoverbot function)
;; (define-extern fac-robopod-base-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryc-obs2                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-break-floor (process-drawable)
  ((notify-actor basic  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype fac-break-fence (process-focusable)
  ((notify-actor basic  :offset-assert 208)
   )
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e006000d4
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype fac-break-fence-a (fac-break-fence)
  ()
  :method-count-assert 30
  :size-assert         #xd8
  :flag-assert         #x1e006000d8
  (:state-methods
    die ;; 29
    )
  )
|#

#|
(deftype fac-break-fence-b (fac-break-fence)
  ()
  :method-count-assert 30
  :size-assert         #xd8
  :flag-assert         #x1e006000d8
  (:state-methods
    die ;; 29
    )
  )
|#

#|
(deftype fac-break-fence-c (fac-break-fence)
  ()
  :method-count-assert 30
  :size-assert         #xd8
  :flag-assert         #x1e006000d8
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype fac-switch (process-drawable)
  ((actor-group       uint32                         :offset-assert 196)
   (actor-group-count int32                          :offset-assert 200)
   (lever-jmod        joint-mod-rotate-local :inline :offset-assert 204)
   (part-red          basic                          :offset-assert 164)
   (part-green        basic                          :offset-assert 236)
   (minimap           connection-minimap             :offset-assert 240)
   )
  :method-count-assert 23
  :size-assert         #xf8
  :flag-assert         #x17008000f8
  (:methods
    (fac-switch-method-22 () none) ;; 22
    )
  (:state-methods
    done ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype fac-move-plat-a (plat)
  ((dead-set-time float  :offset-assert 324)
   )
  :method-count-assert 40
  :size-assert         #x148
  :flag-assert         #x2800d00148
  (:methods
    (fac-move-plat-a-method-39 () none) ;; 39
    )
  (:state-methods
    locking-down ;; 38
    plat-path-active ;; 36
    plat-idle ;; 35
    )
  )
|#

#|
(deftype fac-move-plat-b (plat)
  ()
  :method-count-assert 38
  :size-assert         #x144
  :flag-assert         #x2600d00144
  (:state-methods
    plat-path-active ;; 36
    plat-idle ;; 35
    )
  )
|#

#|
(deftype fac-rotfan (process-drawable)
  ((motor-noise        uint32  :offset-assert 200)
   (effect-opacity     float   :offset-assert 204)
   (no-collision-timer uint64  :offset-assert 208)
   (attack-id          int32   :offset-assert 216)
   )
  :method-count-assert 24
  :size-assert         #xdc
  :flag-assert         #x18006000dc
  (:methods
    (fac-rotfan-method-23 () none) ;; 23
    )
  (:state-methods
    out ;; 22
    spindown ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype fac-robot-ass-manager (process)
  ((name             basic                 :offset-assert 0)
   (mask             process-mask          :offset-assert 4)
   (clock            basic                 :offset-assert 8)
   (parent           uint32                :offset-assert 12)
   (brother          uint32                :offset-assert 16)
   (child            uint32                :offset-assert 20)
   (ppointer         uint32                :offset-assert 24)
   (self             basic                 :offset-assert 28)
   (pool             basic                 :offset-assert 32)
   (status           basic                 :offset-assert 36)
   (pid              int32                 :offset-assert 40)
   (main-thread      basic                 :offset-assert 44)
   (top-thread       basic                 :offset-assert 48)
   (entity           basic                 :offset-assert 52)
   (level            basic                 :offset-assert 56)
   (state            basic                 :offset-assert 60)
   (prev-state       basic                 :offset-assert 64)
   (next-state       basic                 :offset-assert 68)
   (state-stack      basic                 :offset-assert 72)
   (trans-hook       basic                 :offset-assert 76)
   (post-hook        basic                 :offset-assert 80)
   (event-hook       basic                 :offset-assert 84)
   (allocated-length int32                 :offset-assert 88)
   (heap-base        uint32                :offset-assert 92)
   (heap-top         uint32                :offset-assert 96)
   (heap-cur         uint32                :offset-assert 100)
   (stack-frame-top  basic                 :offset-assert 104)
   (heap             kheap        :inline  :offset-assert 92)
   (connection-list  connectable  :inline  :offset-assert 108)
   (stack            UNKNOWN      :dynamic :offset-assert 124)
   )
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype factory-conveyor (conveyor)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype fac-punch-wall (process-drawable)
  ((notify-actor   basic   :offset-assert 200)
   (spool-sound-id uint32  :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern *fac-break-floor-exploder-params* joint-exploder-static-params)
;; (define-extern *fac-break-fence-a-exploder-params* joint-exploder-static-params)
;; (define-extern *fac-break-fence-b-exploder-params* joint-exploder-static-params)
;; (define-extern *fac-break-fence-c-exploder-params* joint-exploder-static-params)
;; (define-extern fac-rotfan-part-trans function)
;; (define-extern perish-immediately state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-indax                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *indax-walk-mods* object) ;; surface
;; (define-extern *indax-jump-mods* object) ;; surface
;; (define-extern *indax-double-jump-mods* object) ;; surface
;; (define-extern *indax-bounce-mods* object) ;; surface
;; (define-extern target-indax-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-indax-dangerous-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-indax-jump-event-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-indax-reset function)
;; (define-extern target-indax-init function) ;; (function none :behavior target)
;; (define-extern target-indax-exit function) ;; (function none :behavior target)
;; (define-extern target-indax-real-post function) ;; (function none :behavior target)
;; (define-extern target-indax-post function) ;; (function none :behavior target)
;; (define-extern target-indax-hit-setup-anim function) ;; (function attack-info none :behavior target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-indax-hang              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *indax-hang-walk-mods* surface)
;; (define-extern *indax-hang-dodge-mods* surface)
;; (define-extern *indax-hang-attack-mods* object)
;; (define-extern target-indax-hang-stance object)
;; (define-extern target-indax-hang-walk object)
;; (define-extern target-indax-hang-dodge object)
;; (define-extern target-indax-hang-attack object)
;; (define-extern target-indax-hang-turn-around object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; roboguard-city                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype roboguard-city (kg-squad-member)
  ((los                            los-control         :inline :offset-assert 1136)
   (rotation-matrix                matrix              :inline :offset-assert 1312)
   (me-to-focus-dir                vector              :inline :offset-assert 1376)
   (me-to-focus-angle              float                       :offset-assert 1392)
   (robo-flags                     uint16                      :offset-assert 1396)
   (torso-aim-blend                float                       :offset-assert 1400)
   (torso-angle                    float                       :offset-assert 1404)
   (torso-seek-speed               float                       :offset-assert 1408)
   (torso-to-focus-angle           float                       :offset-assert 1412)
   (last-torso-frame-num           float                       :offset-assert 1416)
   (stand-angle-threshold          float                       :offset-assert 1420)
   (attack-distance                float                       :offset-assert 1424)
   (attack-dist-scalar             float                       :offset-assert 1428)
   (fire-time                      uint64                      :offset-assert 1432)
   (last-attack-time               uint64                      :offset-assert 1440)
   (fired-this-time?               basic                       :offset-assert 1448)
   (last-roll-time                 uint64                      :offset-assert 1456)
   (cannot-reach-target?           basic                       :offset-assert 1464)
   (cannot-reach-target-start-time uint64                      :offset-assert 1472)
   (frustrate-roll-time            uint64                      :offset-assert 1480)
   (target-status                  squad-target-status :inline :offset-assert 1488)
   (last-update-chase-pos-time     uint64                      :offset-assert 1560)
   (random-offset-search           float                       :offset-assert 1568)
   (pursuit-start-time             uint64                      :offset-assert 1576)
   (dizzy-start-time               uint64                      :offset-assert 1584)
   (roll-sound                     uint32                      :offset-assert 1592)
   )
  :method-count-assert 241
  :size-assert         #x63c
  :flag-assert         #xf105c0063c
  (:methods
    (roboguard-city-method-233 () none) ;; 233
    (roboguard-city-method-234 () none) ;; 234
    (roboguard-city-method-235 () none) ;; 235
    (roboguard-city-method-236 () none) ;; 236
    (roboguard-city-method-237 () none) ;; 237
    (roboguard-city-method-238 () none) ;; 238
    (roboguard-city-method-239 () none) ;; 239
    (roboguard-city-method-240 () none) ;; 240
    )
  (:state-methods
    exit-transport ;; 231
    explode ;; 225
    die ;; 40
    knocked-recover ;; 32
    knocked ;; 31
    shoot-attack ;; 224
    wait ;; 190
    active ;; 34
    reposition ;; 229
    idle ;; 33
    roll-chase ;; 228
    stare ;; 37
    giant-hostile ;; 232
    dizzy ;; 230
    roll-enter ;; 226
    roll-exit ;; 227
    hostile ;; 38
    hostile-stand ;; 222
    close-attack ;; 223
    )
  )
|#

#|
(deftype roboguard-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern *roboguard-city-debris-params* debris-static-params)
;; (define-extern *roboguard-city-nav-enemy-info* nav-enemy-info)
;; (define-extern roboguard-city-turn-torso-post function)
;; (define-extern roboguard-city-turret-code function)
;; (define-extern roboguard-city-idle-code function)
;; (define-extern spawn-roboguard-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spydroid                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sensor-light-info (structure)
  ((joint      int16          :offset-assert 0)
   (part-index int16          :offset-assert 2)
   (offset     vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype spydroid (kg-squad-member)
  ((old-y-deg              float                      :offset-assert 1124)
   (diff-angle             float                      :offset-assert 1128)
   (desire-turn            symbol                     :offset-assert 1132) ;; guessed by decompiler
   (hit-target             basic                      :offset-assert 1136)
   (floor                  float                      :offset-assert 1140)
   (explode-part           sparticle-launch-control   :offset-assert 1144) ;; guessed by decompiler
   (alert-level            uint8                      :offset-assert 1148)
   (next-check-player-time uint64                     :offset-assert 1152)
   (part-ids               UNKNOWN                  9 :offset-assert 1160)
   (sensor-lights          UNKNOWN                  3 :offset-assert 1184)
   (last-sensor-time       uint64                     :offset-assert 1280)
   (exiting-wait?          basic                      :offset-assert 1288)
   )
  :method-count-assert 238
  :size-assert         #x50c
  :flag-assert         #xee0490050c
  (:methods
    (spydroid-method-226 () none) ;; 226
    (spydroid-method-231 () none) ;; 231
    (spydroid-method-232 () none) ;; 232
    (spydroid-method-233 () none) ;; 233
    (spydroid-method-234 () none) ;; 234
    (spydroid-method-235 () none) ;; 235
    (spydroid-method-236 () none) ;; 236
    (spydroid-method-237 () none) ;; 237
    )
  (:state-methods
    exit-transport ;; 230
    hunting ;; 224
    spydroid-notice ;; 227
    scan ;; 225
    attack ;; 222
    flip ;; 228
    hostile ;; 38
    active ;; 34
    wait ;; 190
    wait-for-vulnerable ;; 229
    search ;; 223
    die-falling ;; 41
    knocked ;; 31
    )
  )
|#

;; (define-extern *spydroid-debris-params* debris-static-params)
;; (define-extern *spydroid-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern wait-for-vulnerable-close state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flying-turret                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ft-gun-info (structure)
  ((gun-position float  :offset-assert 0)
   (fire?        basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype flying-turret (kg-squad-member)
  ((thrust-dir                vector     :inline :offset-assert 1136)
   (speed                     float              :offset-assert 1152)
   (speed-target              float              :offset-assert 1156)
   (ground-height             float              :offset-assert 1160)
   (last-heading-quat         quaternion :inline :offset-assert 1168)
   (last-roll-quat            quaternion :inline :offset-assert 1184)
   (thrust-mode               uint8              :offset-assert 1200)
   (pursuit-start-time        uint64             :offset-assert 1208)
   (chase-mode                uint8              :offset-assert 1216)
   (last-check-chase-pos-time uint64             :offset-assert 1224)
   (circle-angle              float              :offset-assert 1232)
   (last-fire-time            uint64             :offset-assert 1240)
   (num-shots-fired           int8               :offset-assert 1248)
   (ground-point              vector     :inline :offset-assert 1264)
   (guns                      UNKNOWN    2       :offset-assert 1280)
   (turret-aim-blend          float              :offset-assert 1312)
   (hit-player?               basic              :offset-assert 1316)
   (desired-height-offset     float              :offset-assert 1320)
   (float-height              float              :offset-assert 1324)
   (bob-velocity              float              :offset-assert 1328)
   (bouncing?                 basic              :offset-assert 1332)
   (bounce-start-time         uint64             :offset-assert 1336)
   (changed-targets?          basic              :offset-assert 1344)
   (thruster-intensity        float              :offset-assert 1348)
   (up-bobbing?               basic              :offset-assert 1352)
   (bob-scale-factor          float              :offset-assert 1356)
   (bob-scale-target          float              :offset-assert 1360)
   (bob-t                     float              :offset-assert 1364)
   (thruster-intensity-scalar float              :offset-assert 1368)
   (engine-sound              uint32             :offset-assert 1372)
   (tilt-sound                uint32             :offset-assert 1376)
   (roll-sound-amount         float              :offset-assert 1380)
   )
  :method-count-assert 231
  :size-assert         #x568
  :flag-assert         #xe704f00568
  (:methods
    (flying-turret-method-225 () none) ;; 225
    (flying-turret-method-226 () none) ;; 226
    (flying-turret-method-227 () none) ;; 227
    (flying-turret-method-228 () none) ;; 228
    (flying-turret-method-229 () none) ;; 229
    (flying-turret-method-230 () none) ;; 230
    )
  (:state-methods
    exit-transport ;; 224
    knocked ;; 31
    hostile ;; 38
    fire ;; 223
    active ;; 34
    flying-turret-base-state ;; 222
    )
  )
|#

#|
(deftype flying-turret-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern *flying-turret-nav-enemy-info* nav-enemy-info)
;; (define-extern *flying-turret-debris-params* debris-static-params)
;; (define-extern flying-turret-gun-aim-func function)
;; (define-extern flying-turret-gun-recoil-jmod-func function)
;; (define-extern spawn-turret-projectile function)
;; (define-extern update-ft-gun function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-bbush-tasks                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-wasbbv-goal (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-wasbbv-score (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-wasbbv-counter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype wasbbv-hud-info (structure)
  ((goal                float   :offset-assert 0)
   (score               float   :offset-assert 4)
   (current             float   :offset-assert 8)
   (goal-cup            uint8   :offset-assert 12)
   (goal-text           uint32  :offset-assert 16)
   (score-text          uint32  :offset-assert 20)
   (decimal-place-count int8    :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x19
  :flag-assert         #x900000019
  )
|#

#|
(deftype task-manager-vehicle-bbush (task-manager)
  ((ground-pos        vector :inline :offset-assert 240)
   (ground-time       uint64         :offset-assert 256)
   (pre-start-time    uint64         :offset-assert 264)
   (display-units     float          :offset-assert 272)
   (max-distance      float          :offset-assert 276)
   (distance          float          :offset-assert 280)
   (total-distance    float          :offset-assert 284)
   (max-air-time      float          :offset-assert 288)
   (air-time          float          :offset-assert 292)
   (total-air-time    float          :offset-assert 296)
   (goal              float          :offset-assert 300)
   (score             float          :offset-assert 304)
   (current           float          :offset-assert 308)
   (hud-score         uint64         :offset-assert 312)
   (hud-goal          uint64         :offset-assert 320)
   (squad-manager     uint64         :offset-assert 336)
   (game-score        uint8          :offset-assert 344)
   (last-cup          uint8          :offset-assert 345)
   (goal-cup          uint8          :offset-assert 346)
   (new-high-score    basic          :offset-assert 348)
   (want-current-hud? basic          :offset-assert 352)
   )
  :method-count-assert 37
  :size-assert         #x164
  :flag-assert         #x2500f00164
  (:methods
    (task-manager-vehicle-bbush-method-33 () none) ;; 33
    (task-manager-vehicle-bbush-method-34 () none) ;; 34
    (task-manager-vehicle-bbush-method-35 () none) ;; 35
    (task-manager-vehicle-bbush-method-36 () none) ;; 36
    )
  (:state-methods
    report ;; 32
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-bbush-air-time (task-manager-vehicle-bbush)
  ()
  :method-count-assert 37
  :size-assert         #x164
  :flag-assert         #x2500f00164
  )
|#

#|
(deftype task-manager-bbush-total-air-time (task-manager-vehicle-bbush)
  ()
  :method-count-assert 37
  :size-assert         #x164
  :flag-assert         #x2500f00164
  )
|#

#|
(deftype task-manager-bbush-jump-distance (task-manager-vehicle-bbush)
  ()
  :method-count-assert 37
  :size-assert         #x188
  :flag-assert         #x2501100188
  )
|#

#|
(deftype task-manager-bbush-total-jump-distance (task-manager-vehicle-bbush)
  ()
  :method-count-assert 37
  :size-assert         #x164
  :flag-assert         #x2500f00164
  )
|#

#|
(deftype task-manager-bbush-roll-count (task-manager-vehicle-bbush)
  ((roll-count float  :offset-assert 356)
   (y-proj     float  :offset-assert 360)
   )
  :method-count-assert 37
  :size-assert         #x16c
  :flag-assert         #x2500f0016c
  )
|#

#|
(deftype task-manager-bbush-destroy-interceptors (task-manager-vehicle-bbush)
  ((max-reserve-count int32  :offset-assert 356)
   )
  :method-count-assert 37
  :size-assert         #x168
  :flag-assert         #x2500f00168
  )
|#

;; (define-extern *wasbbv-hud-info* object)
;; (define-extern *bbv-fail-time-expired* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-vu1-h                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hfrag-vu1-poly4-packet (structure)
  ((height-tag dma-packet :inline :offset-assert 0)
   (base       vector     :inline :offset-assert 16)
   (heights    UNKNOWN    4       :offset-assert 32)
   (color-tag  dma-packet :inline :offset-assert 48)
   (colors     UNKNOWN    4       :offset-assert 64)
   (next       dma-packet :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

#|
(deftype hfrag-vu1-poly9-packet (structure)
  ((height-tag dma-packet :inline :offset-assert 0)
   (base       vector3    :inline :offset-assert 16)
   (heights    UNKNOWN    9       :offset-assert 28)
   (color-tag  dma-packet :inline :offset-assert 64)
   (colors     UNKNOWN    12      :offset-assert 80)
   (next       dma-packet :inline :offset-assert 128)
   (jump-index int32              :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

#|
(deftype hfrag-vu1-poly25-packet (structure)
  ((height-tag dma-packet :inline :offset-assert 0)
   (base       vector3    :inline :offset-assert 16)
   (heights    UNKNOWN    25      :offset-assert 28)
   (color-tag  dma-packet :inline :offset-assert 128)
   (colors     UNKNOWN    28      :offset-assert 144)
   (next       dma-packet :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )
|#

#|
(deftype hfrag-vu1-vertex (structure)
  ((tex vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype hfrag-vu1-poly4 (structure)
  ((giftag vector  :inline :offset-assert 0)
   (verts  UNKNOWN 4       :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )
|#

#|
(deftype hfrag-vu1-poly9 (structure)
  ((giftag0 vector  :inline :offset-assert 0)
   (verts0  UNKNOWN 6       :offset-assert 16)
   (giftag1 vector  :inline :offset-assert 304)
   (verts1  UNKNOWN 6       :offset-assert 320)
   )
  :method-count-assert 9
  :size-assert         #x260
  :flag-assert         #x900000260
  )
|#

#|
(deftype hfrag-vu1-poly25 (structure)
  ((giftag0 vector  :inline :offset-assert 0)
   (verts0  UNKNOWN 10      :offset-assert 16)
   (giftag1 vector  :inline :offset-assert 496)
   (verts1  UNKNOWN 10      :offset-assert 512)
   (giftag2 vector  :inline :offset-assert 992)
   (verts2  UNKNOWN 10      :offset-assert 1008)
   (giftag3 vector  :inline :offset-assert 1488)
   (verts3  UNKNOWN 10      :offset-assert 1504)
   )
  :method-count-assert 9
  :size-assert         #x7c0
  :flag-assert         #x9000007c0
  )
|#

#|
(deftype hfrag-vu1-constants-base (structure)
  ((far-verts   UNKNOWN 25 :offset-assert 0)
   (mid-verts9  UNKNOWN 9  :offset-assert 400)
   (mid-verts25 UNKNOWN 25 :offset-assert 544)
   (near-verts4 UNKNOWN 4  :offset-assert 944)
   (near-verts9 UNKNOWN 9  :offset-assert 1008)
   (sts         UNKNOWN 9  :offset-assert 1152)
   (data        UNKNOWN 81 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x510
  :flag-assert         #x900000510
  )
|#

#|
(deftype hfrag-vu1-constants (structure)
  ((base          hfrag-vu1-constants-base :inline :offset-assert 0)
   (far-verts     UNKNOWN                  25      :offset-assert 0)
   (mid-verts9    UNKNOWN                  9       :offset-assert 400)
   (mid-verts25   UNKNOWN                  25      :offset-assert 544)
   (near-verts4   UNKNOWN                  4       :offset-assert 944)
   (near-verts9   UNKNOWN                  9       :offset-assert 1008)
   (sts           UNKNOWN                  9       :offset-assert 1152)
   (drw-strip4    qword                    :inline :offset-assert 1296)
   (drw-strip9-0  qword                    :inline :offset-assert 1312)
   (drw-strip9-1  qword                    :inline :offset-assert 1328)
   (drw-strip25-0 qword                    :inline :offset-assert 1344)
   (drw-strip25-1 qword                    :inline :offset-assert 1360)
   (matrix        matrix                   :inline :offset-assert 1376)
   (hvdf-offset   vector                   :inline :offset-assert 1440)
   (hmge-scale    vector                   :inline :offset-assert 1456)
   (fog           vector                   :inline :offset-assert 1472)
   (stores        qword                    :inline :offset-assert 1488)
   )
  :method-count-assert 9
  :size-assert         #x5e0
  :flag-assert         #x9000005e0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-common                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-vu1                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern hfrag-vu1-block object)
;; (define-extern hfrag-setup-constants function)
;; (define-extern hfrag-add-constants function)
;; (define-extern hfrag-vu1-end-buffer function)
;; (define-extern hfrag-vu1-init-buf function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hfrag-debug* object)
;; (define-extern hfrag-vert-print function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-work                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hfrag-work* object)
;; (define-extern *hfrag-vu1-constants-base* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hfrag-texture-anim             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern wang-texture-anim-init function)
;; (define-extern real-wang-texture-anim-func function)
;; (define-extern wang-texture-anim-func function)
;; (define-extern *hfrag-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-mood                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desert-states (structure)
  ((light    light-state  :inline :offset-assert 0)
   (flame    flames-state :inline :offset-assert 8)
   (bsphere0 vector       :inline :offset-assert 16)
   (bsphere1 vector       :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype desertg-states (structure)
  ((light   light-state  :inline :offset-assert 0)
   (flame   flames-state :inline :offset-assert 8)
   (bsphere vector       :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype deswalk-states (structure)
  ((light    light-state  :inline :offset-assert 0)
   (flame    flames-state :inline :offset-assert 8)
   (bsphere0 vector       :inline :offset-assert 16)
   (bsphere1 vector       :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern update-mood-desert function)
;; (define-extern init-mood-desertg function)
;; (define-extern update-mood-desertg function)
;; (define-extern update-mood-deswalk function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-ocean                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-colors-desert* object)
;; (define-extern *ocean-near-indices-desert* ocean-near-indices)
;; (define-extern *ocean-trans-indices-desert* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-desert* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-desert* ocean-mid-masks)
;; (define-extern *ocean-map-desert* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-desert-hanging-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-hanging-fire-flame* curve2d-fast)
;; (define-extern *range-scale-desert-hanging-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-hanging-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-hanging-fire-flame* curve2d-fast)
;; (define-extern *g-curve-desert-hanging-fire-flame* curve2d-fast)
;; (define-extern *b-curve-desert-hanging-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-hanging-fire-flame* curve2d-fast)
;; (define-extern *curve-desert-hanging-fire-flame-x* curve2d-fast)
;; (define-extern *curve-desert-hanging-fire-flame-y* curve2d-fast)
;; (define-extern *part-desert-hanging-fire-flame-curve-settings* object)
;; (define-extern *range-color-desert-bowl-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-bowl-fire-flame* curve2d-fast)
;; (define-extern *range-scale-desert-bowl-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-bowl-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-bowl-fire-flame* curve2d-fast)
;; (define-extern *g-curve-desert-bowl-fire-flame* curve2d-fast)
;; (define-extern *b-curve-desert-bowl-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-bowl-fire-flame* curve2d-fast)
;; (define-extern *curve-desert-bowl-fire-flame-x* curve2d-fast)
;; (define-extern *curve-desert-bowl-fire-flame-y* curve2d-fast)
;; (define-extern *part-desert-bowl-fire-flame-curve-settings* object)
;; (define-extern *range-color-desert-small-bowl-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-small-bowl-fire-flame* curve2d-fast)
;; (define-extern *range-scale-desert-small-bowl-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-small-bowl-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-small-bowl-fire-flame* curve2d-fast)
;; (define-extern *g-curve-desert-small-bowl-fire-flame* curve2d-fast)
;; (define-extern *b-curve-desert-small-bowl-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-small-bowl-fire-flame* curve2d-fast)
;; (define-extern *curve-desert-small-bowl-fire-flame-x* curve2d-fast)
;; (define-extern *curve-desert-small-bowl-fire-flame-y* curve2d-fast)
;; (define-extern *part-desert-small-bowl-fire-flame-curve-settings* object)
;; (define-extern *scenecamera-fog-update?* object)
;; (define-extern scenecamera-fog-update function)
;; (define-extern *range-color-desert-palace-fire-beacon-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *range-scale-desert-palace-fire-beacon-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-palace-fire-beacon-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *g-curve-desert-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *b-curve-desert-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *curve-desert-palace-fire-beacon-flame-x* curve2d-fast)
;; (define-extern *curve-desert-palace-fire-beacon-flame-y* curve2d-fast)
;; (define-extern *part-desert-palace-fire-beacon-flame-curve-settings* object)
;; (define-extern birth-func-desert-beacon-set-accel function)
;; (define-extern *range-color-desert-totem-head-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-totem-head-fire-flame* curve2d-fast)
;; (define-extern *range-scale-desert-totem-head-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-totem-head-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-totem-head-fire-flame* curve2d-fast)
;; (define-extern *g-curve-desert-totem-head-fire-flame* curve2d-fast)
;; (define-extern *b-curve-desert-totem-head-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-totem-head-fire-flame* curve2d-fast)
;; (define-extern *curve-desert-totem-head-fire-flame-x* curve2d-fast)
;; (define-extern *curve-desert-totem-head-fire-flame-y* curve2d-fast)
;; (define-extern *part-desert-totem-head-fire-flame-curve-settings* object)
;; (define-extern *range-color-firepit-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-firepit-fire-flame* curve2d-fast)
;; (define-extern *range-scale-firepit-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-firepit-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-firepit-fire-flame* curve2d-fast)
;; (define-extern *g-curve-firepit-fire-flame* curve2d-fast)
;; (define-extern *b-curve-firepit-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-firepit-fire-flame* curve2d-fast)
;; (define-extern *curve-firepit-fire-flame-x* curve2d-fast)
;; (define-extern *curve-firepit-fire-flame-y* curve2d-fast)
;; (define-extern *part-firepit-fire-flame-curve-settings* object)
;; (define-extern *stronghold-range-color-flame* curve-color-fast)
;; (define-extern *stronghold-range-alpha-flame* curve2d-fast)
;; (define-extern *stronghold-range-scale-flame-x* curve2d-fast)
;; (define-extern *stronghold-range-scale-flame-y* curve2d-fast)
;; (define-extern *r-stronghold-curve-flame* curve2d-fast)
;; (define-extern *g-stronghold-curve-flame* curve2d-fast)
;; (define-extern *b-stronghold-curve-flame* curve2d-fast)
;; (define-extern *stronghold-curve-alpha-flame* curve2d-fast)
;; (define-extern *stronghold-curve-flame-x* curve2d-fast)
;; (define-extern *stronghold-curve-flame-y* curve2d-fast)
;; (define-extern *part-stronghold-torchfire-flame-curve-settings* object)
;; (define-extern *range-color-desert-bollard-fire-flame* curve-color-fast)
;; (define-extern *range-alpha-desert-bollard-fire-flame* curve2d-fast)
;; (define-extern *range-scale-desert-bollard-fire-flame-x* curve2d-fast)
;; (define-extern *range-scale-desert-bollard-fire-flame-y* curve2d-fast)
;; (define-extern *r-curve-desert-bollard-fire-flame* curve2d-fast)
;; (define-extern *g-curve-desert-bollard-fire-flame* curve2d-fast)
;; (define-extern *b-curve-desert-bollard-fire-flame* curve2d-fast)
;; (define-extern *curve-alpha-desert-bollard-fire-flame* curve2d-fast)
;; (define-extern *curve-desert-bollard-fire-flame-x* curve2d-fast)
;; (define-extern *curve-desert-bollard-fire-flame-y* curve2d-fast)
;; (define-extern *part-desert-bollard-fire-flame-curve-settings* object)
;; (define-extern *range-dessplash-color* curve-color-fast)
;; (define-extern *range-dessplash-alpha* curve2d-fast)
;; (define-extern *range-dessplash-scale-x* curve2d-fast)
;; (define-extern *range-dessplash-scale-y* curve2d-fast)
;; (define-extern *curve-dessplash-alpha* curve2d-fast)
;; (define-extern *curve-dessplash-scale-x* curve2d-fast)
;; (define-extern *curve-dessplash-scale-y* curve2d-fast)
;; (define-extern *part-desert-water-rocks-splash-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-func-part-desert-shot-edges function)
;; (define-extern spt-func-spt-func-part-desert-barrier-puffs function)
;; (define-extern spt-func-spt-func-part-desert-barrier-sparks function)
;; (define-extern *nest-hunt-res-point* array)
;; (define-extern *nest-hunt-res-index* object)
;; (define-extern spt-birth-func-brightness-buggy-fly function)
;; (define-extern spt-birth-func-part-buggy-fly function)
;; (define-extern *range-oasis-hellcat-dust-color* curve-color-fast)
;; (define-extern *range-oasis-hellcat-dust-alpha* curve2d-fast)
;; (define-extern *range-oasis-hellcat-dust-scale-x* curve2d-fast)
;; (define-extern *range-oasis-hellcat-dust-scale-y* curve2d-fast)
;; (define-extern *curve-oasis-hellcat-dust-alpha* curve2d-fast)
;; (define-extern *curve-oasis-hellcat-dust-scale-x* curve2d-fast)
;; (define-extern *curve-oasis-hellcat-dust-scale-y* curve2d-fast)
;; (define-extern *part-oasis-hellcat-dust-trail-curve-settings* object)
;; (define-extern spt-birth-func-brightness-t-foot-impact-dust function)
;; (define-extern *range-terraformer-fma-explo-color* curve-color-fast)
;; (define-extern *range-terraformer-fma-explo-alpha* curve2d-fast)
;; (define-extern *range-terraformer-fma-explo-scale-x* curve2d-fast)
;; (define-extern *range-terraformer-fma-explo-scale-y* curve2d-fast)
;; (define-extern *curve-terraformer-fma-explo-alpha* curve2d-fast)
;; (define-extern *curve-terraformer-fma-explo-scale-x* curve2d-fast)
;; (define-extern *curve-terraformer-fma-explo-scale-y* curve2d-fast)
;; (define-extern *part-terraformer-fma-explosion-texture-curve-settings* object)
;; (define-extern spt-birth-func-brightness-buggy-skid function)
;; (define-extern spt-birth-func-part-buggy-skid function)
;; (define-extern spt-birth-func-brightness-daxter-impact-dust function)
;; (define-extern spt-birth-func-brightness-daxter-run-dust function)
;; (define-extern *range-color-desert-scenes-impact-dust* curve-color-fast)
;; (define-extern *range-alpha-desert-scenes-impact-dust* curve2d-fast)
;; (define-extern *range-scale-desert-scenes-impact-dust-x* curve2d-fast)
;; (define-extern *range-scale-desert-scenes-impact-dust-y* curve2d-fast)
;; (define-extern *curve-alpha-desert-scenes-impact-dust* curve2d-fast)
;; (define-extern *curve-desert-scenes-impact-dust-x* curve2d-fast)
;; (define-extern *curve-desert-scenes-impact-dust-y* curve2d-fast)
;; (define-extern *part-desert-scenes-impact-dust-curve-settings* object)
;; (define-extern spt-birth-func-part-desert-scenes-bits function)
;; (define-extern *range-terexplo-color* curve-color-fast)
;; (define-extern *range-terexplo-alpha* curve2d-fast)
;; (define-extern *range-terexplo-scale-x* curve2d-fast)
;; (define-extern *range-terexplo-scale-y* curve2d-fast)
;; (define-extern *curve-terexplo-alpha* curve2d-fast)
;; (define-extern *curve-terexplo-scale-x* curve2d-fast)
;; (define-extern *curve-terexplo-scale-y* curve2d-fast)
;; (define-extern *part-terraformer-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squad-control-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype squad-unit-settings (structure)
  ((target-count     int8    :offset-assert 0)
   (shot-count       int8    :offset-assert 1)
   (rand-shot-count  int8    :offset-assert 2)
   (inaccuracy       float   :offset-assert 4)
   (acquire-delay    uint16  :offset-assert 8)
   (shot-delay       uint16  :offset-assert 10)
   (burst-delay      uint16  :offset-assert 12)
   (rand-burst-delay uint16  :offset-assert 14)
   (rand-shot-delay  uint16  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )
|#

#|
(deftype squad-target-status (structure)
  ((flags          squad-target-flag         :offset-assert 0)
   (handle         uint64                    :offset-assert 8)
   (last-seen-time uint64                    :offset-assert 16)
   (position       vector            :inline :offset-assert 32)
   (velocity       vector            :inline :offset-assert 48)
   (threat-level   float                     :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  ;; field squad-target-flag is likely a value type.
  )
|#

#|
(deftype squad-alert-state (structure)
  ((flags                     squad-alert-flag            :offset-assert 0)
   (level                     uint8                       :offset-assert 1)
   (max-level                 uint8                       :offset-assert 2)
   (guards-in-sight-of-target int8                        :offset-assert 3)
   (guard-aim-count           int8                        :offset-assert 4)
   (guard-inaccuracy-factor   float                       :offset-assert 8)
   (guard-target-level        float                       :offset-assert 12)
   (duration                  uint32                      :offset-assert 16)
   (start-time                uint64                      :offset-assert 24)
   (notify-time               uint64                      :offset-assert 32)
   (alarm-sound-id            uint32                      :offset-assert 40)
   (target-status-array       UNKNOWN             3       :offset-assert 48)
   (target-status             squad-target-status :inline :offset-assert 48)
   )
  :method-count-assert 10
  :size-assert         #x120
  :flag-assert         #xa00000120
  ;; field squad-alert-flag is likely a value type.
  (:methods
    (squad-alert-state-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype primary-target-pos-vel (structure)
  ((position vector :inline :offset-assert 0)
   (velocity vector :inline :offset-assert 16)
   (time     uint32         :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype squad-control (basic)
  ((sync-clock             uint8                     :offset-assert 4)
   (sync-mask-8            uint8                     :offset-assert 5)
   (sync-mask-16           uint16                    :offset-assert 6)
   (sync-mask-32           uint32                    :offset-assert 8)
   (alert-state            squad-alert-state :inline :offset-assert 16)
   (primary-target-history UNKNOWN           16      :offset-assert 304)
   )
  :method-count-assert 34
  :size-assert         #x330
  :flag-assert         #x2200000330
  (:methods
    (squad-control-method-9 () none) ;; 9
    (squad-control-method-10 () none) ;; 10
    (squad-control-method-11 () none) ;; 11
    (squad-control-method-12 () none) ;; 12
    (squad-control-method-13 () none) ;; 13
    (squad-control-method-14 () none) ;; 14
    (squad-control-method-15 () none) ;; 15
    (squad-control-method-16 () none) ;; 16
    (squad-control-method-17 () none) ;; 17
    (squad-control-method-18 () none) ;; 18
    (squad-control-method-19 () none) ;; 19
    (squad-control-method-20 () none) ;; 20
    (squad-control-method-21 () none) ;; 21
    (squad-control-method-22 () none) ;; 22
    (squad-control-method-23 () none) ;; 23
    (squad-control-method-24 () none) ;; 24
    (squad-control-method-25 () none) ;; 25
    (squad-control-method-26 () none) ;; 26
    (squad-control-method-27 () none) ;; 27
    (squad-control-method-28 () none) ;; 28
    (squad-control-method-29 () none) ;; 29
    (squad-control-method-30 () none) ;; 30
    (squad-control-method-31 () none) ;; 31
    (squad-control-method-32 () none) ;; 32
    (squad-control-method-33 () none) ;; 33
    )
  )
|#

;; (define-extern *waswide-squad-control* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; squad-control                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-info (structure)
  ((handle-by-vehicle-type UNKNOWN 44 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )
|#

#|
(deftype vehicle-lookup-info (structure)
  ((turn-radius       meters  :offset-assert 0)
   (throttle-turning  float   :offset-assert 4)
   (throttle-straight float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype vehicle-control-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (normal    vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype vehicle-attach-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (rot       vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype vehicle-wheel-info (structure)
  ((local-pos          vector :inline :offset-assert 0)
   (flags              uint64         :offset-assert 16)
   (callback           basic          :offset-assert 24)
   (inertia            float          :offset-assert 28)
   (radius             float          :offset-assert 32)
   (susp-arm-length    float          :offset-assert 36)
   (steer-arm-length   float          :offset-assert 40)
   (scale              float          :offset-assert 44)
   (travel             float          :offset-assert 48)
   (probe-y-offset     float          :offset-assert 52)
   (width              float          :offset-assert 56)
   (suspension-spring  float          :offset-assert 60)
   (suspension-damping float          :offset-assert 64)
   (forward-grip       float          :offset-assert 68)
   (side-grip          float          :offset-assert 72)
   (max-brake-torque   float          :offset-assert 76)
   (camber             float          :offset-assert 80)
   (settle-pos         float          :offset-assert 84)
   (probe-radius       float          :offset-assert 88)
   (tread-texture      basic          :offset-assert 92)
   (tread-tid          uint32         :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype vehicle-engine-info (structure)
  ((max-torque          float  :offset-assert 0)
   (inertia             float  :offset-assert 4)
   (drag                float  :offset-assert 8)
   (idle-rpm            float  :offset-assert 12)
   (clutch-min-rpm      float  :offset-assert 16)
   (clutch-max-rpm      float  :offset-assert 20)
   (min-rpm             float  :offset-assert 24)
   (max-rpm             float  :offset-assert 28)
   (peak-torque-rpm     float  :offset-assert 32)
   (powerband-width-rpm float  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype vehicle-transmission-info (structure)
  ((inertia           float     :offset-assert 0)
   (upshift-rpm       float     :offset-assert 4)
   (downshift-rpm     float     :offset-assert 8)
   (final-drive-ratio float     :offset-assert 12)
   (gear-ratio-array  UNKNOWN 8 :offset-assert 16)
   (gear-count        int8      :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x31
  :flag-assert         #x900000031
  )
|#

#|
(deftype vehicle-handling-info (structure)
  ((max-engine-thrust                 meters  :offset-assert 0)
   (inv-max-engine-thrust             float   :offset-assert 4)
   (engine-response-rate              float   :offset-assert 8)
   (engine-intake-factor              float   :offset-assert 12)
   (brake-factor                      float   :offset-assert 16)
   (turbo-boost-factor                float   :offset-assert 20)
   (turbo-boost-duration              uint16  :offset-assert 24)
   (max-xz-speed                      meters  :offset-assert 28)
   (player-turn-anim-bias             float   :offset-assert 32)
   (player-turn-anim-min              float   :offset-assert 36)
   (player-turn-anim-max              float   :offset-assert 40)
   (pilot-x-accel-factor              float   :offset-assert 44)
   (pilot-y-accel-factor              float   :offset-assert 48)
   (pilot-z-accel-factor              float   :offset-assert 52)
   (ground-probe-distance             meters  :offset-assert 56)
   (ground-probe-offset               meters  :offset-assert 60)
   (cos-ground-effect-angle           float   :offset-assert 64)
   (spring-lift-factor                float   :offset-assert 68)
   (air-steering-factor               float   :offset-assert 72)
   (air-drag-factor                   float   :offset-assert 76)
   (steering-fin-angle                float   :offset-assert 80)
   (steering-thruster-factor          float   :offset-assert 84)
   (steering-thruster-max-gain        float   :offset-assert 88)
   (steering-thruster-half-gain-speed meters  :offset-assert 92)
   (tire-steering-angle               float   :offset-assert 96)
   (tire-steering-speed-factor        float   :offset-assert 100)
   (tire-steering-speed-bias          float   :offset-assert 104)
   (ackermann-factor                  float   :offset-assert 108)
   (tire-friction-factor              float   :offset-assert 112)
   (tire-static-friction              float   :offset-assert 116)
   (tire-static-friction-speed        meters  :offset-assert 120)
   (tire-dynamic-friction             float   :offset-assert 124)
   (tire-dynamic-friction-speed       meters  :offset-assert 128)
   (tire-inv-max-friction-speed       float   :offset-assert 132)
   (airfoil-factor                    float   :offset-assert 136)
   (drag-force-factor                 float   :offset-assert 140)
   (rolling-resistance                float   :offset-assert 144)
   (speed-scrubbing-drag              float   :offset-assert 148)
   (speed-limiting-drag               float   :offset-assert 152)
   (pitch-control-factor              float   :offset-assert 156)
   (roll-control-factor               float   :offset-assert 160)
   (roll-angle                        float   :offset-assert 164)
   (jump-thrust-factor                float   :offset-assert 168)
   (buoyancy-factor                   float   :offset-assert 172)
   (water-drag-factor                 float   :offset-assert 176)
   (player-weight                     float   :offset-assert 180)
   (player-shift-x                    meters  :offset-assert 184)
   (player-shift-z                    meters  :offset-assert 188)
   (air-roll-torque                   float   :offset-assert 192)
   (air-pitch-torque                  float   :offset-assert 196)
   (air-angular-damping               float   :offset-assert 200)
   (hop-turn-torque                   float   :offset-assert 204)
   (ground-torque-scale               float   :offset-assert 208)
   (ai-steering-factor                float   :offset-assert 212)
   (ai-throttle-factor                float   :offset-assert 216)
   )
  :method-count-assert 9
  :size-assert         #xdc
  :flag-assert         #x9000000dc
  )
|#

#|
(deftype vehicle-physics-model-info (structure)
  ((lift-thruster-count     int8                       :offset-assert 0)
   (roll-thruster-count     int8                       :offset-assert 1)
   (stabilizer-count        int8                       :offset-assert 2)
   (inv-lift-thruster-count float                      :offset-assert 4)
   (lift-thruster-array     UNKNOWN            4       :offset-assert 16)
   (roll-thruster-array     UNKNOWN            2       :offset-assert 144)
   (stabilizer-array        UNKNOWN            6       :offset-assert 208)
   (engine-thrust-local-pos vector             :inline :offset-assert 400)
   (brake-local-pos         vector             :inline :offset-assert 416)
   (wheel-count             int8                       :offset-assert 432)
   (drive-wheel-count       int8                       :offset-assert 433)
   (front-wheel             vehicle-wheel-info :inline :offset-assert 448)
   (rear-wheel              vehicle-wheel-info :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x294
  :flag-assert         #x900000294
  )
|#

#|
(deftype vehicle-camera-info (structure)
  ((string-min-height       meters          :offset-assert 0)
   (string-max-height       meters          :offset-assert 4)
   (string-min-length       meters          :offset-assert 8)
   (string-max-length       meters          :offset-assert 12)
   (min-fov                 float           :offset-assert 16)
   (max-fov                 float           :offset-assert 20)
   (head-offset             float           :offset-assert 24)
   (foot-offset             float           :offset-assert 28)
   (normal-max-angle-offset float           :offset-assert 32)
   (air-max-angle-offset    float           :offset-assert 36)
   (max-lookaround-speed    float           :offset-assert 40)
   (look-pos-array          UNKNOWN 4       :offset-assert 48)
   (look-front              vector  :inline :offset-assert 48)
   (look-left               vector  :inline :offset-assert 64)
   (look-right              vector  :inline :offset-assert 80)
   (look-rear               vector  :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

#|
(deftype vehicle-sound-loop-info (structure)
  ((sound        uint128  :offset-assert 0)
   (speed        float    :offset-assert 16)
   (min-speed    float    :offset-assert 20)
   (max-speed    float    :offset-assert 24)
   (pitch-offset float    :offset-assert 28)
   (pitch-scale  float    :offset-assert 32)
   (min-pitch    float    :offset-assert 36)
   (max-pitch    float    :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype vehicle-sound-info (structure)
  ((engine-pitch-scale     float                           :offset-assert 0)
   (engine-pitch-offset    float                           :offset-assert 4)
   (engine-pitch-mod-amp   float                           :offset-assert 8)
   (engine-sound-select    int8                            :offset-assert 12)
   (thrust-sound           uint8                   16      :offset-assert 16) ;; field uses ~g print with a quadword load!
   (scrape-sound           uint8                   16      :offset-assert 32) ;; field uses ~g print with a quadword load!
   (glance-sound           uint8                   16      :offset-assert 48) ;; field uses ~g print with a quadword load!
   (impact-sound           uint8                   16      :offset-assert 64) ;; field uses ~g print with a quadword load!
   (impact2-sound          uint8                   16      :offset-assert 80) ;; field uses ~g print with a quadword load!
   (explode-sound          uint8                   16      :offset-assert 96) ;; field uses ~g print with a quadword load!
   (explode2-sound         uint8                   16      :offset-assert 112) ;; field uses ~g print with a quadword load!
   (extra-sound            uint8                   16      :offset-assert 128) ;; field uses ~g print with a quadword load!
   (water-sound            uint8                   16      :offset-assert 144) ;; field uses ~g print with a quadword load!
   (jump-sound             uint8                   16      :offset-assert 160) ;; field uses ~g print with a quadword load!
   (turbo-sound            uint8                   16      :offset-assert 176) ;; field uses ~g print with a quadword load!
   (damage-sound           uint8                   16      :offset-assert 192) ;; field uses ~g print with a quadword load!
   (bank-replace           basic                           :offset-assert 208)
   (idle-rpm               float                           :offset-assert 212)
   (idle-pitch-scale       float                           :offset-assert 216)
   (idle-crossover-rpm     float                           :offset-assert 220)
   (engine-rpm             float                           :offset-assert 224)
   (engine-crossover-rpm   float                           :offset-assert 228)
   (start-sound            uint8                   16      :offset-assert 240) ;; field uses ~g print with a quadword load!
   (stop-sound             uint8                   16      :offset-assert 256) ;; field uses ~g print with a quadword load!
   (idle-sound             uint8                   16      :offset-assert 272) ;; field uses ~g print with a quadword load!
   (engine-sound           uint8                   16      :offset-assert 288) ;; field uses ~g print with a quadword load!
   (engine-load-sound      uint8                   16      :offset-assert 304) ;; field uses ~g print with a quadword load!
   (susp-creak-sound       uint8                   16      :offset-assert 320) ;; field uses ~g print with a quadword load!
   (susp-bottom-out-sound  uint8                   16      :offset-assert 336) ;; field uses ~g print with a quadword load!
   (susp-speed-threshold   float                           :offset-assert 352)
   (tire-roll-sounds       UNKNOWN                 4       :offset-assert 368)
   (tire-slide-sounds      UNKNOWN                 2       :offset-assert 560)
   (tire-roll-hum-sound    vehicle-sound-loop-info :inline :offset-assert 368)
   (tire-roll-dirt-sound   vehicle-sound-loop-info :inline :offset-assert 416)
   (tire-roll-sand-sound   vehicle-sound-loop-info :inline :offset-assert 464)
   (tire-roll-knobby-sound vehicle-sound-loop-info :inline :offset-assert 512)
   (tire-slide-road-sound  vehicle-sound-loop-info :inline :offset-assert 560)
   (tire-slide-dirt-sound  vehicle-sound-loop-info :inline :offset-assert 608)
   )
  :method-count-assert 9
  :size-assert         #x290
  :flag-assert         #x900000290
  )
|#

#|
(deftype vehicle-particle-info (structure)
  ((headlight-count       int8      :offset-assert 0)
   (taillight-count       int8      :offset-assert 1)
   (thruster-flame-width  meters    :offset-assert 4)
   (thruster-flame-length meters    :offset-assert 8)
   (thruster-local-pos    UNKNOWN 2 :offset-assert 16)
   (exhaust-local-pos     UNKNOWN 2 :offset-assert 48)
   (exhaust-local-dir     UNKNOWN 2 :offset-assert 80)
   (smoke-local-pos       UNKNOWN 2 :offset-assert 112)
   (smoke-local-vel       UNKNOWN 2 :offset-assert 144)
   (headlight-local-pos   UNKNOWN 3 :offset-assert 176)
   (taillight-local-pos   UNKNOWN 2 :offset-assert 224)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )
|#

#|
(deftype vehicle-section-info (structure)
  ((damage-seg-array uint64 3 :offset-assert 0) ;; guessed by decompiler
   (damage-seg-count int8     :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x19
  :flag-assert         #x900000019
  )
|#

#|
(deftype vehicle-damage-info (structure)
  ((inv-toughness-factor    float                        :offset-assert 0)
   (hit-points              float                        :offset-assert 4)
   (inv-hit-points          float                        :offset-assert 8)
   (hit-threshold           float                        :offset-assert 12)
   (hit-small               float                        :offset-assert 16)
   (hit-big                 float                        :offset-assert 20)
   (hit-deadly              float                        :offset-assert 24)
   (impact-damage-factor    float                        :offset-assert 28)
   (section-count           int8                         :offset-assert 32)
   (section-array           UNKNOWN              4       :offset-assert 40)
   (section-bike-front      vehicle-section-info :inline :offset-assert 40)
   (section-bike-rear       vehicle-section-info :inline :offset-assert 72)
   (section-car-front-left  vehicle-section-info :inline :offset-assert 40)
   (section-car-rear-left   vehicle-section-info :inline :offset-assert 72)
   (section-car-front-right vehicle-section-info :inline :offset-assert 104)
   (section-car-rear-right  vehicle-section-info :inline :offset-assert 136)
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )
|#

#|
(deftype vehicle-setup-info (structure)
  ((settle-height       float  :offset-assert 0)
   (settle-rot-x        float  :offset-assert 4)
   (shadow-bot-clip     float  :offset-assert 8)
   (shadow-locus-dist   float  :offset-assert 12)
   (look-select         uint8  :offset-assert 16)
   (color-option-count  int8   :offset-assert 17)
   (color-option-select int8   :offset-assert 18)
   (gun-yaw-min         float  :offset-assert 24)
   (gun-yaw-max         float  :offset-assert 28)
   (gun-pitch-min       float  :offset-assert 32)
   (gun-pitch-max       float  :offset-assert 36)
   (gun-z-offset        float  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype vehicle-seat-info (structure)
  ((data     uint8  16      :offset-assert 0) ;; guessed by decompiler
   (position vector :inline :offset-assert 0)
   (pos-x    float          :offset-assert 0)
   (pos-y    float          :offset-assert 4)
   (pos-z    float          :offset-assert 8)
   (angle    int16          :offset-assert 12)
   (flags    uint8          :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype vehicle-grab-rail-info (structure)
  ((local-pos vector 2       :offset-assert 0) ;; guessed by decompiler
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype vehicle-rider-info (structure)
  ((seat-count         int8      :offset-assert 0)
   (rider-stance       uint8     :offset-assert 1)
   (grab-rail-count    int8      :offset-assert 2)
   (attach-point-count int8      :offset-assert 3)
   (grab-rail-array    uint32    :offset-assert 4)
   (seat-array         UNKNOWN 4 :offset-assert 16)
   (rider-hand-offset  UNKNOWN 2 :offset-assert 80)
   (attach-point-array uint32    :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x74
  :flag-assert         #x900000074
  )
|#

#|
(deftype vehicle-explosion-info (joint-exploder-static-params)
  ((skel      skeleton-group  :offset-assert 40) ;; guessed by decompiler
   (skel-name string          :offset-assert 44) ;; guessed by decompiler
   (anim      int32           :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype vehicle-particle-common-info (structure)
  ((headlight-glow-template sprite-glow-data  :offset-assert 28)
   (taillight-glow-template sprite-glow-data  :offset-assert 32)
   (thruster-glow-template  sprite-glow-data  :offset-assert 36)
   )
  :method-count-assert 10
  :size-assert         #x28
  :flag-assert         #xa00000028
  (:methods
    (vehicle-particle-common-info-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype rigid-body-vehicle-constants (rigid-body-object-constants)
  ((flags               uint32                               :offset-assert 208)
   (object-type         uint8                                :offset-assert 212)
   (guard-type          uint8                                :offset-assert 213)
   (vehicle-type        uint8                                :offset-assert 214)
   (engine              vehicle-engine-info          :inline :offset-assert 216)
   (transmission        vehicle-transmission-info    :inline :offset-assert 256)
   (handling            vehicle-handling-info        :inline :offset-assert 308)
   (target-speed-offset meters                               :offset-assert 528)
   (turning-accel       meters                               :offset-assert 532)
   (camera              vehicle-camera-info          :inline :offset-assert 544)
   (sound               vehicle-sound-info           :inline :offset-assert 656)
   (particles           vehicle-particle-info        :inline :offset-assert 1312)
   (damage              vehicle-damage-info          :inline :offset-assert 1568)
   (physics-model       vehicle-physics-model-info   :inline :offset-assert 1744)
   (setup               vehicle-setup-info           :inline :offset-assert 2404)
   (rider               vehicle-rider-info           :inline :offset-assert 2448)
   (explosion           vehicle-explosion-info               :offset-assert 2564) ;; guessed by decompiler
   (explosion-part      int32                                :offset-assert 2568)
   (debris              basic                                :offset-assert 2572)
   (name-text           uint32                               :offset-assert 2576)
   (particle-common     vehicle-particle-common-info         :offset-assert 2580)
   )
  :method-count-assert 10
  :size-assert         #xa18
  :flag-assert         #xa00000a18
  (:methods
    (rigid-body-vehicle-constants-method-9 () none) ;; 9 ;; (rigid-body-vehicle-constants-method-9 (_type_) none)
    )
  )
|#

#|
(deftype vehicle-section (structure)
  ((damage float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype vehicle (rigid-body-object)
  ((flags                    vehicle-flag             :offset-assert 212) ;; rigid-body-object-flag
   (squad                    basic                    :offset-assert 300)
   (control-hook             basic                    :offset-assert 304)
   (controls                 vehicle-controls :inline :offset-assert 308)
   (prev-controls            vehicle-controls :inline :offset-assert 332)
   (engine-power-factor      float                    :offset-assert 356)
   (force-scale              float                    :offset-assert 360)
   (target-distance2         meters                   :offset-assert 364)
   (water-flags              uint32                   :offset-assert 368)
   (target-acceleration      vector           :inline :offset-assert 380)
   (impact-pos               vector           :inline :offset-assert 396)
   (impact-local-pos         vector           :inline :offset-assert 412)
   (lin-acceleration         vector           :inline :offset-assert 428)
   (hit-points               float                    :offset-assert 444)
   (damage-factor            float                    :offset-assert 448)
   (crash-level              int8                     :offset-assert 452)
   (force-level              int8                     :offset-assert 453)
   (traffic-hash-id          int8                     :offset-assert 454)
   (traffic-priority-id      int8                     :offset-assert 455)
   (power-fluctuation-factor float                    :offset-assert 456)
   (power-level              float                    :offset-assert 460)
   (overlap-player-counter   uint8                    :offset-assert 464)
   (physics-counter          uint8                    :offset-assert 465)
   (cam-view                 int8                     :offset-assert 466)
   (brake-factor             float                    :offset-assert 468)
   (cam-speed-interp         float                    :offset-assert 472)
   (camera-dist2             float                    :offset-assert 476)
   (player-dist2             float                    :offset-assert 480)
   (bound-radius             float                    :offset-assert 484)
   (rider-array              handle           4       :offset-assert 492) ;; guessed by decompiler
   (impact-proc              uint64                   :offset-assert 524)
   (impact-pat               uint32                   :offset-assert 532)
   (impact-time              uint32                   :offset-assert 536)
   (prev-impact-time         uint32                   :offset-assert 540)
   (sent-attack-time         time-frame               :offset-assert 544) ;; guessed by decompiler
   (air-time                 time-frame               :offset-assert 548) ;; guessed by decompiler
   (water-time               uint32                   :offset-assert 552)
   (offscreen-time           uint32                   :offset-assert 556)
   (crash-time               time-frame               :offset-assert 560) ;; guessed by decompiler
   (turbo-boost-time         time-frame               :offset-assert 564) ;; guessed by decompiler
   (player-dismount-time     uint32                   :offset-assert 568)
   (crash-duration           uint16                   :offset-assert 572)
   (turbo-boost-duration     uint16                   :offset-assert 574)
   (turbo-boost-factor       float                    :offset-assert 576)
   (crash-impulse            float                    :offset-assert 580)
   (water-height             float                    :offset-assert 584)
   (lights-factor            float                    :offset-assert 588)
   (outgoing-attack-id       uint32                   :offset-assert 592)
   (fog-fade                 float                    :offset-assert 596)
   (scrape-sound-id          sound-id                 :offset-assert 600) ;; guessed by decompiler
   (damage-zap-sound-id      sound-id                 :offset-assert 604) ;; guessed by decompiler
   (scrape-sound-envelope    float                    :offset-assert 608)
   (exhaust-part-accum       basic            2       :offset-assert 612) ;; guessed by decompiler
   (smoke-part-accum         basic            2       :offset-assert 620) ;; guessed by decompiler
   (section-array            vehicle-section  4       :offset-assert 628) ;; guessed by decompiler
   )
  :method-count-assert 152
  :size-assert         #x2b8
  :flag-assert         #x98024002b8
  ;; field vehicle-flag is likely a value type.
  (:methods
    (vehicle-method-56 () none) ;; 56 ;; (vehicle-state-56 () _type_ :state)
    (vehicle-method-57 () none) ;; 57 ;; (player-control () _type_ :state)
    (vehicle-method-58 () none) ;; 58 ;; (crash () _type_ :state)
    (vehicle-method-59 () none) ;; 59 ;; (explode () _type_ :state)
    (vehicle-method-60 () none) ;; 60 ;; (die () _type_ :state)
    (vehicle-method-61 () none) ;; 61 ;; (measure-control-parameters () _type_ :state)
    (vehicle-method-62 () none) ;; 62 ;; (vehicle-method-62 (_type_ float) none)
    (vehicle-method-63 () none) ;; 63 ;; (vehicle-method-63 (_type_ float) none)
    (vehicle-method-64 () none) ;; 64 ;; (vehicle-method-64 () none)
    (vehicle-method-65 () none) ;; 65 ;; (start-jump (_type_) none)
    (vehicle-method-66 () none) ;; 66 ;; (vehicle-method-66 (_type_) none)
    (vehicle-method-67 () none) ;; 67 ;; (get-seat-count (_type_) int)
    (vehicle-method-68 () none) ;; 68 ;; (compute-seat-position (_type_ vector int) none)
    (vehicle-method-69 () none) ;; 69 ;; (get-rider-in-seat (_type_ int) process)
    (vehicle-method-70 () none) ;; 70 ;; (vehicle-method-70 (_type_) process)
    (vehicle-method-71 () none) ;; 71 ;; (put-rider-in-seat (_type_ int process-focusable) none)
    (vehicle-method-72 () none) ;; 72 ;; (vehicle-method-72 (_type_) uint)
    (vehicle-method-73 () none) ;; 73 ;; (get-best-seat-for-vehicle (_type_ vector int int) int)
    (vehicle-method-74 () none) ;; 74 ;; (remove-rider (_type_ process) none)
    (vehicle-method-75 () none) ;; 75 ;; (vehicle-method-75 (_type_) float)
    (vehicle-method-76 () none) ;; 76 ;; (vehicle-method-76 (_type_ int uint) none)
    (vehicle-method-77 () none) ;; 77 ;; (vehicle-method-77 (_type_) none)
    (vehicle-method-78 () none) ;; 78 ;; (vehicle-method-78 (_type_ int) none)
    (vehicle-method-79 () none) ;; 79 ;; (vehicle-method-79 (_type_) none)
    (vehicle-method-80 () none) ;; 80 ;; (vehicle-method-80 (_type_) none)
    (vehicle-method-81 () none) ;; 81 ;; (vehicle-method-81 (_type_) none)
    (vehicle-method-82 () none) ;; 82 ;; (vehicle-method-82 (_type_) none)
    (vehicle-method-83 () none) ;; 83 ;; (vehicle-method-83 (_type_) none)
    (vehicle-method-84 () none) ;; 84 ;; (draw-thruster (_type_ vector vector float float) none)
    (vehicle-method-85 () none) ;; 85 ;; (draw-thrusters (_type_) none)
    (vehicle-method-86 () none) ;; 86 ;; (update-joint-mods (_type_) none)
    (vehicle-method-87 () none) ;; 87 ;; (vehicle-method-87 (_type_) none)
    (vehicle-method-88 () none) ;; 88 ;; (vehicle-method-88 (_type_) none)
    (vehicle-method-89 () none) ;; 89 ;; (vehicle-method-89 (_type_) none)
    (vehicle-method-90 () none) ;; 90 ;; (vehicle-method-90 (_type_) none)
    (vehicle-method-91 () none) ;; 91 ;; (vehicle-method-91 (_type_) none)
    (vehicle-method-92 () none) ;; 92 ;; (vehicle-method-92 (_type_) none)
    (vehicle-method-93 () none) ;; 93 ;; (vehicle-method-93 (_type_) none)
    (vehicle-method-94 () none) ;; 94 ;; (vehicle-method-94 (_type_) none)
    (vehicle-method-95 () none) ;; 95 ;; (vehicle-method-95 (_type_ vector) none)
    (vehicle-method-96 () none) ;; 96 ;; (vehicle-method-96 (_type_) none)
    (vehicle-method-97 () none) ;; 97 ;; (vehicle-method-97 (_type_) none)
    (vehicle-method-98 () none) ;; 98 ;; (vehicle-method-98 (_type_ float) none)
    (vehicle-method-99 () none) ;; 99 ;; (vehicle-method-99 (_type_ float) none)
    (vehicle-method-100 () none) ;; 100 ;; (vehicle-method-100 (_type_ float vehicle-physics-work) none)
    (vehicle-method-101 () none) ;; 101 ;; (vehicle-method-101 (_type_) none)
    (vehicle-method-102 () none) ;; 102 ;; (shadow-enable (_type_) none)
    (vehicle-method-103 () none) ;; 103 ;; (shadow-disable (_type_) none)
    (vehicle-method-104 () none) ;; 104 ;; (vehicle-method-104 (_type_) none)
    (vehicle-method-105 () none) ;; 105 ;; (vehicle-method-105 (_type_) symbol)
    (vehicle-method-106 () none) ;; 106 ;; (vehicle-method-106 (_type_) none)
    (vehicle-method-107 () none) ;; 107 ;; (vehicle-method-107 (_type_) none)
    (vehicle-method-108 () none) ;; 108 ;; (vehicle-method-108 (_type_) none)
    (vehicle-method-109 () none) ;; 109 ;; (vehicle-method-109 (_type_) none)
    (vehicle-method-110 () none) ;; 110 ;; (vehicle-method-110 (_type_) none)
    (vehicle-method-111 () none) ;; 111 ;; (vehicle-method-111 (_type_ object target) none)
    (vehicle-method-112 () none) ;; 112 ;; (decrease-traffic-alert-level (_type_ int) int)
    (vehicle-method-113 () none) ;; 113 ;; (vehicle-method-113 (_type_) none)
    (vehicle-method-114 () none) ;; 114 ;; (vehicle-method-114 (_type_) none)
    (vehicle-method-115 () none) ;; 115 ;; (vehicle-method-115 (_type_ vector) none)
    (vehicle-method-116 () none) ;; 116 ;; (vehicle-method-116 (_type_ (pointer vehicle-controls)) none)
    (vehicle-method-117 () none) ;; 117 ;; (vehicle-method-117 (_type_ vector int int) none)
    (vehicle-method-118 () none) ;; 118 ;; (vehicle-method-118 (_type_ int) none)
    (vehicle-method-119 () none) ;; 119 ;; (vehicle-method-119 (_type_) none)
    (vehicle-method-120 () none) ;; 120 ;; (vehicle-method-120 (_type_) none)
    (vehicle-method-121 () none) ;; 121 ;; (vehicle-method-121 (_type_) none)
    (vehicle-method-122 () none) ;; 122 ;; (vehicle-method-122 (_type_) none)
    (vehicle-method-123 () none) ;; 123 ;; (vehicle-method-123 (_type_) none)
    (vehicle-method-124 () none) ;; 124 ;; (vehicle-method-124 (_type_) none)
    (vehicle-method-125 () none) ;; 125 ;; (vehicle-method-125 (_type_ float) none)
    (vehicle-method-126 () none) ;; 126 ;; (vehicle-method-126 (_type_ float) none)
    (vehicle-method-127 () none) ;; 127 ;; (vehicle-method-127 (_type_) none)
    (vehicle-method-128 () none) ;; 128 ;; (vehicle-method-128 (_type_) none)
    (vehicle-method-129 () none) ;; 129 ;; (vehicle-method-129 (_type_) none)
    (vehicle-method-130 () none) ;; 130 ;; (vehicle-method-130 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-131 () none) ;; 131 ;; (vehicle-method-131 (_type_) none)
    (vehicle-method-132 () none) ;; 132 ;; (vehicle-method-132 (_type_) none)
    (vehicle-method-133 () none) ;; 133 ;; (check-player-get-on (_type_) none)
    (vehicle-method-134 () none) ;; 134 ;; (vehicle-method-134 (_type_ process) none)
    (vehicle-method-135 () none) ;; 135 ;; (vehicle-method-135 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-136 () none) ;; 136 ;; (vehicle-method-136 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-137 () none) ;; 137 ;; (vehicle-method-137 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-138 () none) ;; 138 ;; (vehicle-method-138 (_type_) none)
    (vehicle-method-139 () none) ;; 139 ;; (vehicle-method-139 (_type_) none)
    (vehicle-method-140 () none) ;; 140 ;; (vehicle-method-140 (_type_) none)
    (vehicle-method-141 () none) ;; 141 ;; (vehicle-method-141 (_type_) none)
    (vehicle-method-142 () none) ;; 142 ;; (vehicle-method-142 (_type_) none)
    (vehicle-method-143 () none) ;; 143 ;; (vehicle-method-143 (_type_) none)
    (vehicle-method-144 () none) ;; 144
    (vehicle-method-145 () none) ;; 145
    (vehicle-method-146 () none) ;; 146
    (vehicle-method-147 () none) ;; 147
    (vehicle-method-148 () none) ;; 148
    (vehicle-method-149 () none) ;; 149
    (vehicle-method-150 () none) ;; 150
    (vehicle-method-151 () none) ;; 151
    )
  )
|#

#|
(deftype vehicle-probe-work (structure)
  ((local-pos     vector :inline :offset-assert 0)
   (local-normal  vector :inline :offset-assert 16)
   (world-pos     vector :inline :offset-assert 32)
   (world-normal  vector :inline :offset-assert 48)
   (probe-pos     vector :inline :offset-assert 64)
   (ground-pos    vector :inline :offset-assert 80)
   (ground-normal vector :inline :offset-assert 96)
   (velocity      vector :inline :offset-assert 112)
   (tire-force    vector :inline :offset-assert 128)
   (wheel-axis    vector :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )
|#

#|
(deftype vehicle-physics-work (structure)
  ((mat              matrix             :inline :offset-assert 0)
   (force            vector             :inline :offset-assert 64)
   (velocity         vector             :inline :offset-assert 80)
   (world-pos        vector             :inline :offset-assert 96)
   (world-normal     vector             :inline :offset-assert 112)
   (local-pos        vector             :inline :offset-assert 128)
   (steering-axis    vector             :inline :offset-assert 144)
   (lift-dir         vector             :inline :offset-assert 160)
   (normal           vector             :inline :offset-assert 176)
   (tmp              vector             :inline :offset-assert 192)
   (p-body           vector             :inline :offset-assert 208)
   (axis             vector             :inline :offset-assert 224)
   (dir              vector             :inline :offset-assert 240)
   (ground-normal    vector             :inline :offset-assert 256)
   (impulse          float                      :offset-assert 272)
   (vel-dot-norm     float                      :offset-assert 276)
   (friction-coef    float                      :offset-assert 280)
   (speed-factor     float                      :offset-assert 284)
   (probe-work-array vehicle-probe-work 4       :offset-assert 288) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x3a0
  :flag-assert         #x9000003a0
  )
|#

#|
(deftype vehicle-draw-thruster-params (structure)
  ((quat     quaternion :inline :offset-assert 0)
   (trans    vector     :inline :offset-assert 16)
   (thrust   float              :offset-assert 32)
   (width    float              :offset-assert 36)
   (length   float              :offset-assert 40)
   (fog-fade float              :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (deftype debug-vehicle-work (basic)
;;   ()
;;   :flag-assert #x900000070
;;   )

;; (define-extern meters-per-sec->mph function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-effects                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern calc-fade-vals function) ;; (function float none)
;; (define-extern *vehicle-headlight-glow-template* object) ;; sprite-glow-data
;; (define-extern *vehicle-taillight-glow-template* object) ;; sprite-glow-data
;; (define-extern *vehicle-thruster-glow-template* object) ;; sprite-glow-data
;; (define-extern *vehicle-particle-common-info* object)
;; (define-extern vehicle-draw-thruster function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *debug-vehicle-work* debug-vehicle-work) ;; debug-vehicle-work
;; (define-extern *vehicle-shadow-control* shadow-control) ;; shadow-control
;; (define-extern *vehicle-shadow-control-disabled* shadow-control) ;; shadow-control
;; (define-extern vehicle-event-handler function) ;; (function process int symbol event-message-block object :behavior vehicle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-util                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-hud-request (structure)
  ((handle           uint64  :offset-assert 0) ;; handle
   (hack-handle-init basic   :offset-assert 0)
   (priority         float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype vehicle-hud-requests (structure)
  ((time     uint64                :offset-assert 0) ;; time-frame
   (requests vehicle-hud-request 4 :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x48
  :flag-assert         #xc00000048
  (:methods
    (vehicle-hud-requests-method-9 () none) ;; 9 ;; (vehicle-hud-requests-method-9 (_type_) none)
    (vehicle-hud-requests-method-10 () none) ;; 10 ;; (vehicle-hud-requests-method-10 (_type_) vehicle-hud-request)
    (vehicle-hud-requests-method-11 () none) ;; 11 ;; (vehicle-hud-requests-method-11 (_type_) vehicle-hud-request)
    )
  )
|#

#|
(deftype vehicle-hud-chooser (structure)
  ((cur  vehicle-hud-requests :inline :offset-assert 0)
   (last vehicle-hud-requests :inline :offset-assert 72)
   )
  :method-count-assert 10
  :size-assert         #x90
  :flag-assert         #xa00000090
  (:methods
    (vehicle-hud-chooser-method-9 () none) ;; 9 ;; (vehicle-hud-chooser-method-9 (_type_ handle float) symbol)
    )
  )
|#

;; (define-extern *vehicle-hud-chooser* object) ;; vehicle-hud-chooser
;; (define-extern *pilot-edge-grab-info* object) ;; pilot-edge-grab-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-physics                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-states                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern vehicle-explode-post function) ;; (function none :behavior vehicle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-manager                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype vehicle-manager (process)
  ()
  :method-count-assert 18
  :size-assert         #x80
  :flag-assert         #x1200000080
  (:methods
    (vehicle-manager-method-16 () none) ;; 16
    (vehicle-manager-method-17 () none) ;; 17
    )
  (:state-methods
    active ;; 15
    idle ;; 14
    )
  )

;; (define-extern *vehicle-rigid-body-queue* object)
;; (define-extern *vehicle-info* object)
;; (define-extern vehicle-entity-hack function)
;; (define-extern vehicle-manager-event-handler function)
;; (define-extern vehicle-manager-init-by-other function)
;; (define-extern vehicle-manager-start function)
;; (define-extern vehicle-manager-kill function)
;; (define-extern vehicle-init-by-other function) ;; (function traffic-object-spawn-params none :behavior vehicle)
;; (define-extern vehicle-spawn-hack function)
(define-extern vehicle-spawn (function process type traffic-object-spawn-params process-drawable))
;; (define-extern type-from-vehicle-type function) ;; (function vehicle-type type)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-hud                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-vehicle-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

;; (define-extern hud-vehicle-health-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; turret-control                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turret-barrel-info (structure)
  ((local-pos vector :inline :offset-assert 0)
   (local-dir vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype turret-control-info (structure)
  ((shot-type              basic                      :offset-assert 0)
   (joint-index            int8                       :offset-assert 4)
   (barrel-count           int8                       :offset-assert 5)
   (shot-speed             float                      :offset-assert 8)
   (attack-range           float                      :offset-assert 12)
   (damage                 float                      :offset-assert 16)
   (vehicle-damage-factor  float                      :offset-assert 20)
   (vehicle-impulse-factor float                      :offset-assert 24)
   (rot-min                float              2       :offset-assert 28) ;; guessed by decompiler
   (rot-max                float              2       :offset-assert 36) ;; guessed by decompiler
   (rot-x-min              float                      :offset-assert 28)
   (rot-x-max              float                      :offset-assert 36)
   (rot-y-min              float                      :offset-assert 32)
   (rot-y-max              float                      :offset-assert 40)
   (local-pos              vector             :inline :offset-assert 48)
   (local-dir              vector             :inline :offset-assert 64)
   (barrel-array           turret-barrel-info 4       :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )
|#

#|
(deftype turret-control (structure)
  ((info                 turret-control-info   :offset-assert 0)
   (guard-settings       squad-unit-settings   :offset-assert 4) ;; traffic-guard-type-settings
   (flags                turret-flag           :offset-assert 8)
   (shot-count           int8                  :offset-assert 9)
   (burst-count          int16                 :offset-assert 10)
   (shot-delay           uint16                :offset-assert 12)
   (burst-delay          uint16                :offset-assert 14)
   (target-dist          float                 :offset-assert 16)
   (inaccuracy           float                 :offset-assert 20)
   (burst-delay-factor   float                 :offset-assert 24)
   (aim-offset-angle     float                 :offset-assert 28) ;; degrees
   (aim-rot              float               2 :offset-assert 32) ;; guessed by decompiler
   (aim-rot-vel          float               2 :offset-assert 40) ;; guessed by decompiler
   (aim-rot-offset       float               2 :offset-assert 48) ;; guessed by decompiler
   (aim-rot-x            float                 :offset-assert 32)
   (aim-rot-y            float                 :offset-assert 36)
   (aim-rot-vel-x        float                 :offset-assert 40)
   (aim-rot-vel-y        float                 :offset-assert 44)
   (target-in-sight-time uint64                :offset-assert 56) ;; time-frame
   (aim-acquire-time     uint64                :offset-assert 64) ;; time-frame
   (shoot-time           uint64                :offset-assert 72) ;; time-frame
   (owner-handle         uint64                :offset-assert 80) ;; handle
   (ignore-handle        uint64                :offset-assert 88)
   )
  :method-count-assert 18
  :size-assert         #x60
  :flag-assert         #x1200000060
  ;; field turret-flag is likely a value type.
  (:methods
    (turret-control-method-9 () none) ;; 9 ;; (turret-control-method-9 (_type_ vehicle vector vector) none)
    (turret-control-method-10 () none) ;; 10 ;; (turret-control-method-10 (_type_ vehicle) none)
    (turret-control-method-11 () none) ;; 11 ;; (turret-control-method-11 (_type_ object object vector) none)
    (turret-control-method-12 () none) ;; 12 ;; (update-joint-mod (_type_ joint-mod-rotate-local) none)
    (turret-control-method-13 () none) ;; 13 ;; (turret-control-method-13 (_type_) none)
    (turret-control-method-14 () none) ;; 14 ;; (turret-control-method-14 (_type_) none)
    (turret-control-method-15 () none) ;; 15 ;; (set-info (_type_ turret-control-info) none)
    (turret-control-method-16 () none) ;; 16 ;; (turret-control-method-16 (_type_ float float) none)
    (turret-control-method-17 () none) ;; 17 ;; (turret-control-method-17 (_type_ vehicle) none)
    )
  )
|#

;; (define-extern vehicle-los-clear? function) ;; (function vector vector symbol)
;; (define-extern vehicle-draw-beam function) ;; (function sparticle-launcher vector vector object symbol none)
;; (define-extern vehicle-draw-laser-spot function) ;; (function vector vector symbol none)
;; (define-extern vehicle-draw-laser function) ;; (function vector vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-pilot                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *pilot-mods* surface) ;; surface
;; (define-extern target-pilot-handler function) ;; (function process int symbol event-message-block object :behavior target)
;; (define-extern target-pilot-pidax-enter function) ;; (function object :behavior target)
;; (define-extern target-pilot-pidax-exit function) ;; (function object :behavior target)
;; (define-extern target-pilot-exit function) ;; (function object :behavior target)
;; (define-extern target-pilot-init function) ;; (function handle symbol object :behavior target)
;; (define-extern pilot-on-ground? function) ;; (function symbol :behavior target)
;; (define-extern target-pilot-post function) ;; (function none :behavior target)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern target-pilot-bike-anim-loop function) ;; (function none :behavior target)
;; (define-extern target-pilot-car-anim-loop function) ;; (function none :behavior target)
;; (define-extern target-pilot-wcar-anim-loop function)
;; (define-extern target-pilot-glider-anim-loop function)
;; (define-extern target-daxter-pilot-car-anim-loop function) ;; (function none :behavior target)
;; (define-extern target-pilot-trans function) ;; (function none :behavior target)
;; (define-extern target-pilot-signal-ready function) ;; (function object :behavior target)
;; (define-extern *pilot-get-on-mods* object) ;; surface
;; (define-extern *pilot-get-off-mods* object) ;; surface

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; height-map                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern point-in-bbox? function) ;; (function bounding-box vector symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; traffic-height-map             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *traffic-height-map* object) ;; xz-height-map

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hvehicle-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hvehicle (vehicle)
  ((flight-level-index      int8                       :offset-assert 696)
   (flight-level-index-prev int8                       :offset-assert 697)
   (flight-level            float                      :offset-assert 700)
   (jump-time               float                      :offset-assert 704)
   (jump-thrust             float                      :offset-assert 708)
   (engine-thrust           float                      :offset-assert 712)
   (lift-thrust             UNKNOWN            4       :offset-assert 716)
   (roll-thrust             UNKNOWN            2       :offset-assert 732)
   (engine-sound-id         uint32                     :offset-assert 740)
   (thrust-sound-id         uint32                     :offset-assert 744)
   (roll-sound-id           uint32                     :offset-assert 748)
   (damage-pop-sound-id     uint32                     :offset-assert 752)
   (extra-sound-id          uint32                     :offset-assert 756)
   (engine-sound-envelope   float                      :offset-assert 760)
   (engine-sound-factor     float                      :offset-assert 764)
   (sputter-sound-envelope  float                      :offset-assert 768)
   (transition-time         uint64                     :offset-assert 776)
   (transition-end-time     uint64                     :offset-assert 784)
   (controller              vehicle-controller :inline :offset-assert 800)
   )
  :method-count-assert 162
  :size-assert         #x3b0
  :flag-assert         #xa2033003b0
  (:methods
    (hvehicle-method-152 () none) ;; 152
    (hvehicle-method-153 () none) ;; 153
    (hvehicle-method-154 () none) ;; 154
    (hvehicle-method-155 () none) ;; 155
    (hvehicle-method-156 () none) ;; 156
    (hvehicle-method-157 () none) ;; 157
    (hvehicle-method-158 () none) ;; 158
    (hvehicle-method-159 () none) ;; 159
    (hvehicle-method-160 () none) ;; 160
    (hvehicle-method-161 () none) ;; 161
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vehicle-rider                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-rider (process-focusable)
  ((squad       basic  :offset-assert 208)
   (flags       uint8  :offset-assert 212)
   (riding-anim int32  :offset-assert 216)
   (anim-t      float  :offset-assert 220)
   (anim-speed  float  :offset-assert 224)
   (seat-index  int8   :offset-assert 228)
   )
  :method-count-assert 37
  :size-assert         #xe5
  :flag-assert         #x25007000e5
  (:methods
    (vehicle-rider-method-32 () none) ;; 32 ;; (vehicle-rider-method-32 (_type_ traffic-object-spawn-params) none)
    (vehicle-rider-method-33 () none) ;; 33 ;; (vehicle-rider-method-33 (_type_) none)
    (vehicle-rider-method-34 () none) ;; 34 ;; (vehicle-rider-method-34 (_type_) none)
    (vehicle-rider-method-35 () none) ;; 35 ;; (vehicle-rider-method-35 (_type_) none)
    (vehicle-rider-method-36 () none) ;; 36
    )
  (:state-methods
    inactive ;; 28, old: (active () _type_ :state)
    got-passed ;; 31, old: (initialize-collision (_type_) none)
    taunt ;; 30, old: (got-passed () _type_ :state)
    active ;; 29, old: (taunt () _type_ :state)
    )
  )
|#

#|
(deftype citizen-norm-rider (vehicle-rider)
  ()
  :method-count-assert 37
  :size-assert         #xe5
  :flag-assert         #x25007000e5
  )
|#

;; (define-extern vehicle-rider-event-handler function) ;; (function process int symbol event-message-block object :behavior vehicle-rider)
;; (define-extern vehicle-rider-init-by-other function) ;; (function traffic-object-spawn-params none :behavior vehicle-rider)
;; (define-extern vehicle-rider-spawn function) ;; (function vehicle type traffic-object-spawn-params process)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hvehicle                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hvehicle-util                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hvehicle-effects               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hvehicle-physics               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glider-h                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype glider-thermal-info (structure)
  ((pos          vector :inline :offset-assert 0)
   (r            float          :offset-assert 12)
   (hheight      float          :offset-assert 16)
   (windspeed    float          :offset-assert 20)
   (curpos       float          :offset-assert 24)
   (thermal-time uint64         :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x28
  :flag-assert         #xa00000028
  (:methods
    (glider-thermal-info-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype glider-ring-info (structure)
  ((pos        vector :inline :offset-assert 0)
   (forw       vector :inline :offset-assert 16)
   (boost      float          :offset-assert 32)
   (dist       float          :offset-assert 36)
   (xdist      float          :offset-assert 40)
   (ydist      float          :offset-assert 44)
   (toff       uint64         :offset-assert 48)
   (speedmod   float          :offset-assert 56)
   (shootable  basic          :offset-assert 60)
   (lastring   basic          :offset-assert 64)
   (checkpoint uint8          :offset-assert 68)
   )
  :method-count-assert 10
  :size-assert         #x45
  :flag-assert         #xa00000045
  (:methods
    (glider-ring-info-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype h-glider (hvehicle)
  ((minalt                  float                          :offset-assert 944)
   (curalt                  float                          :offset-assert 948)
   (maxalt                  float                          :offset-assert 952)
   (rollerr                 float                          :offset-assert 956)
   (pitcherr                float                          :offset-assert 960)
   (alterr                  float                          :offset-assert 964)
   (rolling                 basic                          :offset-assert 968)
   (speed                   float                          :offset-assert 972)
   (poierr                  float                          :offset-assert 976)
   (poipos                  float                          :offset-assert 980)
   (poivel                  float                          :offset-assert 984)
   (deathspin               basic                          :offset-assert 988)
   (in-thermal              basic                          :offset-assert 992)
   (in-thermal-time         uint64                         :offset-assert 1000)
   (min-thermal-time        uint64                         :offset-assert 1008)
   (thermal-start-time      uint64                         :offset-assert 1016)
   (thermal-strength        float                          :offset-assert 1024)
   (deathrot                vector                 :inline :offset-assert 1040)
   (last-ring-pos           vector                 :inline :offset-assert 1056)
   (progression-plane       vector                 :inline :offset-assert 1072)
   (birth                   uint64                         :offset-assert 1088)
   (stop-time               uint64                         :offset-assert 1096)
   (pitch-down-time         uint64                         :offset-assert 1104)
   (pitch-side-time         uint64                         :offset-assert 1112)
   (ambient-wind-sound-time uint64                         :offset-assert 1120)
   (thermal-sound-time      uint64                         :offset-assert 1128)
   (updraft-vel             float                          :offset-assert 1136)
   (updraft-acc             float                          :offset-assert 1140)
   (updraft-err             float                          :offset-assert 1144)
   (rel-up-vel              float                          :offset-assert 1148)
   (flap-pos                float                          :offset-assert 1152)
   (amb-sound               uint32                         :offset-assert 1156)
   (amb-sound-playing       basic                          :offset-assert 1160)
   (full-speed-boost?       basic                          :offset-assert 1164)
   (lost-lift?              basic                          :offset-assert 1168)
   (lost-lift-time          uint64                         :offset-assert 1176)
   (right-rudder            joint-mod-rotate-local :inline :offset-assert 1184)
   (left-rudder             joint-mod-rotate-local :inline :offset-assert 1216)
   (right-alerone           joint-mod-rotate-local :inline :offset-assert 1248)
   (left-alerone            joint-mod-rotate-local :inline :offset-assert 1280)
   (flap                    UNKNOWN                6       :offset-assert 1312)
   )
  :method-count-assert 163
  :size-assert         #x6a0
  :flag-assert         #xa3062006a0
  (:methods
    (h-glider-method-162 () none) ;; 162
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glider-ring-part               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *hanga-sprite-texture-anim-array* texture-anim-array)
;; (define-extern cloud-shadow-find-ground function)
;; (define-extern birth-func-fader function)
;; (define-extern sparticle-fader function)
;; (define-extern sparticle-cloud-update function)
;; (define-extern sparticle-shadow-update function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glider-ring                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype light-trail-tracker-glider-ring (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )
|#

#|
(deftype glider-prim (simple-prim)
  ((far? basic  :offset-assert 204)
   )
  :method-count-assert 26
  :size-assert         #xd0
  :flag-assert         #x1a005000d0
  )
|#

#|
(deftype glider-ring (process-drawable)
  ((touch-time   uint64                     :offset-assert 200)
   (ring-prim    uint64                     :offset-assert 208)
   (minimap      connection-minimap         :offset-assert 216)
   (player-got   basic                      :offset-assert 220)
   (persistent   basic                      :offset-assert 224)
   (id           int8                       :offset-assert 228)
   (boost        float                      :offset-assert 232)
   (plane        vector             :inline :offset-assert 240)
   (save-pos     vector             :inline :offset-assert 256)
   (up           vector             :inline :offset-assert 272)
   (right        vector             :inline :offset-assert 288)
   (part-track   uint64                     :offset-assert 304)
   (mat          matrix             :inline :offset-assert 320)
   (xdist        float                      :offset-assert 384)
   (ydist        float                      :offset-assert 388)
   (toff         uint64                     :offset-assert 392)
   (speedmod     float                      :offset-assert 400)
   (shootable    basic                      :offset-assert 404)
   (lastring     basic                      :offset-assert 408)
   (shot         basic                      :offset-assert 412)
   (checkpoint   uint8                      :offset-assert 416)
   (distant-part basic                      :offset-assert 420)
   (blinky-part  basic                      :offset-assert 424)
   (blinky-gone? basic                      :offset-assert 428)
   (do-trails?   basic                      :offset-assert 432)
   (trails       UNKNOWN            5       :offset-assert 440)
   (trail-joint  UNKNOWN            5       :offset-assert 480)
   (center-joint uint8                      :offset-assert 485)
   )
  :method-count-assert 26
  :size-assert         #x1e6
  :flag-assert         #x1a017001e6
  (:methods
    (glider-ring-method-22 () none) ;; 22
    (glider-ring-method-23 () none) ;; 23
    (glider-ring-method-24 () none) ;; 24
    (glider-ring-method-25 () none) ;; 25
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype glider-thermal (process-drawable)
  ((id         int8           :offset-assert 200)
   (part-track uint64         :offset-assert 208)
   (mat        matrix :inline :offset-assert 224)
   )
  :method-count-assert 22
  :size-assert         #x120
  :flag-assert         #x1600a00120
  (:methods
    (glider-thermal-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *curve-glider-ring-linear-up-red* object)
;; (define-extern *trail-color-curve-glider-ring* curve-color-fast)
;; (define-extern *curve-glider-ring-linear-trail* curve2d-fast)
;; (define-extern *glider-ring-trail* object)
;; (define-extern sparticle-track-joint-glider function)
;; (define-extern glider-part-single-birth function)
;; (define-extern glider-ring-standard-event-handler function)
;; (define-extern *near-thermal-dist-squared* object)
;; (define-extern glider-ring-near-thermal-dist-squared function)
;; (define-extern glider-ring-init-by-other function)
;; (define-extern glider-ring-spawn function)
;; (define-extern glider-thermal-init-by-other function)
;; (define-extern glider-thermal-spawn function)
;; (define-extern glider-launch-mist-particle function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; h-glider                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype glider-asc (structure)
  ((asc float  :offset-assert 0)
   (des float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *h-glider-constants* object)
;; (define-extern glider-impact-reduction function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glider-manager                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-desert-glide (task-manager)
  ((desert-glide-entity   basic   :offset-assert 236)
   (check-timer           uint64  :offset-assert 244)
   (start-time            uint64  :offset-assert 164)
   (thermal-start-time    uint64  :offset-assert 260)
   (actor-group           uint32  :offset-assert 268)
   (actor-group-count     int32   :offset-assert 272)
   (cur-group             int8    :offset-assert 276)
   (sound-id              uint32  :offset-assert 280)
   (count                 int32   :offset-assert 284)
   (max-count             int32   :offset-assert 288)
   (pre-populated-clouds? basic   :offset-assert 292)
   (creating-thermal?     basic   :offset-assert 296)
   (hud-altitude          uint64  :offset-assert 300)
   (hud-active?           basic   :offset-assert 308)
   (editing?              basic   :offset-assert 312)
   (did-want-load?        basic   :offset-assert 316)
   (reset-too-low?        basic   :offset-assert 320)
   (last-active-thermal   int16   :offset-assert 324)
   (whistle-sound         uint32  :offset-assert 328)
   )
  :method-count-assert 40
  :size-assert         #x150
  :flag-assert         #x2800d00150
  (:methods
    (task-manager-desert-glide-method-32 () none) ;; 32
    (task-manager-desert-glide-method-33 () none) ;; 33
    (task-manager-desert-glide-method-34 () none) ;; 34
    (task-manager-desert-glide-method-35 () none) ;; 35
    (task-manager-desert-glide-method-36 () none) ;; 36
    (task-manager-desert-glide-method-37 () none) ;; 37
    (task-manager-desert-glide-method-38 () none) ;; 38
    (task-manager-desert-glide-method-39 () none) ;; 39
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype tpl-glider (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *cloud-cube* object)
;; (define-extern pre-populate-clouds function)
;; (define-extern *ring-spawn-id* object)
;; (define-extern *desert-glide-num-rings* object)
;; (define-extern *desert-glide-rings-tmp* object)
;; (define-extern *desert-glide-thermal-effects* object)
;; (define-extern *desert-glide-rings* array)
;; (define-extern *glider-cache-index* object)
;; (define-extern *desert-glide-thermals* array)
;; (define-extern *desert-glide-finish-sphere* object)
;; (define-extern glider-too-low? function)
;; (define-extern *thermal-spawn-id* object)
;; (define-extern *desert-glide-num-thermals* object)
;; (define-extern *desert-glide-thermals-tmp* object)
;; (define-extern glider-thermal-updraft-velocity function)
;; (define-extern desert-glide-task-done function)
;; (define-extern inside-cloudbox? function)
;; (define-extern inside-cloudbox-xz? function)
;; (define-extern move-pos-inside-cloudbox! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; glider-hud                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hanga-init                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern hanga-login function)
;; (define-extern hanga-activate function)
;; (define-extern hanga-deactivate function)
;; (define-extern *hanga-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; elec-gate                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype elec-gate-params (structure)
  ((bolt-spec       lightning-spec  :offset-assert 0) ;; guessed by decompiler
   (ring-spec       lightning-spec  :offset-assert 4) ;; guessed by decompiler
   (ring-radius-min float           :offset-assert 8)
   (ring-radius-max float           :offset-assert 12)
   (speed-mult      float           :offset-assert 16)
   (min-dist        float           :offset-assert 20)
   (max-dist        float           :offset-assert 24)
   (plane-expand-xz float           :offset-assert 28)
   (plane-expand-y  float           :offset-assert 32)
   (plane-shift-z   float           :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype elec-gate-bolt (structure)
  ((ring        lightning-control 2 :offset-assert 0) ;; guessed by decompiler
   (bolt        lightning-control   :offset-assert 8) ;; guessed by decompiler
   (ring-radius float               :offset-assert 12)
   (pos         float               :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype elec-wall (structure)
  ((pos vector :inline :offset-assert 0)
   (dir vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype elec-gate (process-drawable)
  ((params             elec-gate-params                 :offset-assert 200)
   (path-l             path-control                     :offset-assert 152) ;; guessed by decompiler
   (path-r             path-control                     :offset-assert 204) ;; guessed by decompiler
   (l-bolt             elec-gate-bolt           5       :offset-assert 208) ;; guessed by decompiler
   (part-on            sparticle-launch-control         :offset-assert 168) ;; guessed by decompiler
   (part-off           sparticle-launch-control         :offset-assert 368) ;; guessed by decompiler
   (part-spawner-left  part-spawner                     :offset-assert 372) ;; guessed by decompiler
   (part-spawner-right part-spawner                     :offset-assert 376) ;; guessed by decompiler
   (on-start           pair                             :offset-assert 380) ;; guessed by decompiler
   (on-stop            pair                             :offset-assert 384) ;; guessed by decompiler
   (on-shutdown        basic                            :offset-assert 388)
   (on-trigger         basic                            :offset-assert 392)
   (dividing-wall      elec-wall                :inline :offset-assert 400)
   (plane              elec-wall                2       :offset-assert 432) ;; guessed by decompiler
   (wall-y             float                            :offset-assert 496)
   (wall-xz            float                            :offset-assert 500)
   (lightning-quality  float                            :offset-assert 504)
   (quality-enabled?   symbol                           :offset-assert 508) ;; guessed by decompiler
   )
  :method-count-assert 31
  :size-assert         #x200
  :flag-assert         #x1f01800200
  ;; field on-start uses ~A with a signed load. field on-stop uses ~A with a signed load. field on-shutdown uses ~A with a signed load. field on-trigger uses ~A with a signed load.
  (:methods
    (elec-gate-method-24 () none) ;; 24 ;; (elec-gate-method-24 (_type_) none)
    (elec-gate-method-25 () none) ;; 25 ;; (set-palette! (_type_) none)
    (elec-gate-method-26 () none) ;; 26 ;; (set-state! (_type_) none)
    (elec-gate-method-27 () none) ;; 27 ;; (spawn-particles (_type_ sparticle-launch-control) none)
    (elec-gate-method-28 () none) ;; 28 ;; (set-elec-scale-if-close! (_type_ float) none)
    (elec-gate-method-29 () none) ;; 29 ;; (set-elec-scale! (_type_ float) none)
    (elec-gate-method-30 () none) ;; 30
    )
  (:state-methods
    shutdown ;; 23, old: (get-params (_type_) elec-gate-params)
    shutdown-camera ;; 22, old: (shutdown () _type_ :state)
    active ;; 21, old: (active () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype sewer-elec-gate (elec-gate)
  ((gate-index int32  :offset-assert 512)
   )
  :method-count-assert 31
  :size-assert         #x204
  :flag-assert         #x1f01900204
  )
|#

;; (define-extern *default-elec-gate-params* object) ;; elec-gate-params
;; (define-extern elec-gate-post function) ;; (function none :behavior elec-gate)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-intro-dust-color* curve-color-fast)
;; (define-extern *range-intro-dust-alpha* curve2d-fast)
;; (define-extern *range-intro-dust-scale-x* curve2d-fast)
;; (define-extern *range-intro-dust-scale-y* curve2d-fast)
;; (define-extern *curve-intro-dust-alpha* curve2d-fast)
;; (define-extern *curve-intro-dust-scale-x* curve2d-fast)
;; (define-extern *curve-intro-dust-scale-y* curve2d-fast)
;; (define-extern *part-drop-dust-trail-curve-settings* object)
;; (define-extern *part-drop-dust-landing-curve-settings* object)
;; (define-extern *part-drop-dust-takeoff-curve-settings* object)
;; (define-extern *curve-intro-dust-cloud-alpha* curve2d-fast)
;; (define-extern *curve-intro-dust-cloud-scale-x* curve2d-fast)
;; (define-extern *curve-intro-dust-cloud-scale-y* curve2d-fast)
;; (define-extern *part-drop-dust-cloud-curve-settings* object)
;; (define-extern *range-intro-pecker-dust-scale-x* curve2d-fast)
;; (define-extern *range-intro-pecker-dust-scale-y* curve2d-fast)
;; (define-extern *curve-intro-pecker-dust-scale-x* curve2d-fast)
;; (define-extern *curve-intro-pecker-dust-scale-y* curve2d-fast)
;; (define-extern *part-drop-pecker-dustoff-curve-settings* object)
;; (define-extern birth-func-dust-inherit-scaler function)
;; (define-extern *range-color-desert-impact-dust* curve-color-fast)
;; (define-extern *range-alpha-desert-impact-dust* curve2d-fast)
;; (define-extern *range-scale-desert-impact-dust-x* curve2d-fast)
;; (define-extern *range-scale-desert-impact-dust-y* curve2d-fast)
;; (define-extern *curve-alpha-desert-impact-dust* curve2d-fast)
;; (define-extern *curve-desert-impact-dust-x* curve2d-fast)
;; (define-extern *curve-desert-impact-dust-y* curve2d-fast)
;; (define-extern *part-desert-impact-dust-curve-settings* object)
;; (define-extern *range-alpha-desert-impact-dust-blow* curve2d-fast)
;; (define-extern *range-scale-desert-impact-dust-blow-x* curve2d-fast)
;; (define-extern *range-scale-desert-impact-dust-blow-y* curve2d-fast)
;; (define-extern *curve-alpha-desert-impact-dust-blow* curve2d-fast)
;; (define-extern *curve-desert-impact-dust-blow-x* curve2d-fast)
;; (define-extern *curve-desert-impact-dust-blow-y* curve2d-fast)
;; (define-extern *part-desert-impact-dust-blow-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-catapult                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype catapult-shot-sphere (process-drawable)
  ((current-alpha float  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15006000d8
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype catapult-shot-sphere-init-params (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype v-catapult-shot (metalhead-grenade-shot)
  ((trail-part basic  :offset-assert 532)
   )
  :method-count-assert 41
  :size-assert         #x218
  :flag-assert         #x2901a00218
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype v-catapult (wcar-base)
  ((jmod-axles         UNKNOWN                4       :offset-assert 2752)
   (jmod-gun-x         joint-mod-rotate-local :inline :offset-assert 2880)
   (jmod-gun-y         joint-mod-rotate-local :inline :offset-assert 2912)
   (turret-control     turret-control         :inline :offset-assert 2944)
   (sub-state-time     uint32                         :offset-assert 3040)
   (sub-state          int8                           :offset-assert 3044)
   (launch-projectile? basic                          :offset-assert 3048)
   (targ-pos           vector                 :inline :offset-assert 3056)
   (notify-handle      uint64                         :offset-assert 3072)
   (spawn-part?        basic                          :offset-assert 3080)
   (charge-time        uint64                         :offset-assert 3088)
   (exploding?         basic                          :offset-assert 3096)
   )
  :method-count-assert 205
  :size-assert         #xc1c
  :flag-assert         #xcd0ba00c1c
  (:methods
    (v-catapult-method-203 () none) ;; 203
    (v-catapult-method-204 () none) ;; 204
    )
  (:state-methods
    die ;; 61
    hostile ;; 152
    explode ;; 60
    )
  )
|#

;; (define-extern *v-catapult-turret-control-info* object)
;; (define-extern *v-catapult-turret-guard-settings* object)
;; (define-extern *v-catapult-debris-longspike-params* debris-static-params)
;; (define-extern *v-catapult-debris-bar-params* debris-static-params)
;; (define-extern *v-catapult-debris-lpanel-params* debris-static-params)
;; (define-extern *v-catapult-debris-rpanel-params* debris-static-params)
;; (define-extern *v-catapult-debris-lbumperspikes-params* debris-static-params)
;; (define-extern *v-catapult-debris-rbumperspikes-params* debris-static-params)
;; (define-extern *v-catapult-debris-lfspike-params* debris-static-params)
;; (define-extern *v-catapult-debris-rfspike-params* debris-static-params)
;; (define-extern *v-catapult-debris-ltopspike-params* debris-static-params)
;; (define-extern *v-catapult-debris-rtopspike-params* debris-static-params)
;; (define-extern *v-catapult-debris-lsidespikea-params* debris-static-params)
;; (define-extern *v-catapult-debris-lsidespikeb-params* debris-static-params)
;; (define-extern *v-catapult-debris-lsidespikec-params* debris-static-params)
;; (define-extern *v-catapult-debris-lsidespiked-params* debris-static-params)
;; (define-extern *v-catapult-debris-lsidespikee-params* debris-static-params)
;; (define-extern *v-catapult-debris-rsidespikea-params* debris-static-params)
;; (define-extern *v-catapult-debris-rsidespikeb-params* debris-static-params)
;; (define-extern *v-catapult-debris-rsidespikec-params* debris-static-params)
;; (define-extern *v-catapult-debris-rsidespiked-params* debris-static-params)
;; (define-extern *v-catapult-debris-rsidespikee-params* debris-static-params)
;; (define-extern *v-catapult-debris-lfpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-rfpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-lfpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-rfpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-lfpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-rfpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-lfpaneld-params* debris-static-params)
;; (define-extern *v-catapult-debris-rfpaneld-params* debris-static-params)
;; (define-extern *v-catapult-debris-lmpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-rmpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-lmpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-rmpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-lmpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-rmpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-lmpaneld-params* debris-static-params)
;; (define-extern *v-catapult-debris-rmpaneld-params* debris-static-params)
;; (define-extern *v-catapult-debris-lrpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-rrpanela-params* debris-static-params)
;; (define-extern *v-catapult-debris-lrpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-rrpanelb-params* debris-static-params)
;; (define-extern *v-catapult-debris-lrpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-rrpanelc-params* debris-static-params)
;; (define-extern *v-catapult-debris-lrpaneld-params* debris-static-params)
;; (define-extern *v-catapult-debris-rrpaneld-params* debris-static-params)
;; (define-extern *range-ftexplo-dust-color* curve-color-fast)
;; (define-extern *range-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-v-catapult-shot-explosion-dust-in-curve-settings* object)
;; (define-extern *range-ftexplo-color* curve-color-fast)
;; (define-extern *range-ftexplo-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-y* curve2d-fast)
;; (define-extern *part-v-catapult-shot-explosion-texture-curve-settings* object)
;; (define-extern catapult-shot-sphere-init-by-other function)
;; (define-extern *v-catapult-shot-impact-blur* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-jump                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-airlock-debris (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (wascity-airlock-debris-method-22 () none) ;; 22
    )
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype beam-generator (process-drawable)
  ((arrow uint64         :offset-assert 200)
   (pos   vector :inline :offset-assert 208)
   (angs  vector :inline :offset-assert 224)
   )
  :method-count-assert 24
  :size-assert         #xf0
  :flag-assert         #x18007000f0
  (:methods
    (beam-generator-method-22 () none) ;; 22
    (beam-generator-method-23 () none) ;; 23
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype hud-wasdoors-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-desert-catapult-count (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype desjump-point (structure)
  ((pos  vector     :inline :offset-assert 0)
   (quat quaternion :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype desjump-vehicle (structure)
  ((handle     uint64  :offset-assert 0)
   (path-type  uint8   :offset-assert 8)
   (path-pos   uint8   :offset-assert 9)
   (ready?     basic   :offset-assert 12)
   (kamikaze?  basic   :offset-assert 16)
   (wait-timer uint64  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype desert-jump-manager (task-manager)
  ((nav-mesh            basic           :offset-assert 240)
   (vehicle             UNKNOWN 2       :offset-assert 248)
   (vehicle-count       uint8           :offset-assert 312)
   (v-free-list         basic           :offset-assert 316)
   (total-veh-spawned   uint8           :offset-assert 320)
   (check-timer         uint64          :offset-assert 328)
   (hud-wasdoors-health uint64          :offset-assert 216)
   (generator           uint64          :offset-assert 336)
   (interceptor         UNKNOWN 4       :offset-assert 344)
   (interceptor-count   uint8           :offset-assert 472)
   (i-free-list         basic           :offset-assert 476)
   (interceptor-timer   uint64          :offset-assert 480)
   (plane               vector  :inline :offset-assert 496)
   (last-catapult-pos   vector  :inline :offset-assert 512)
   (player-can-win?     basic           :offset-assert 528)
   )
  :method-count-assert 35
  :size-assert         #x214
  :flag-assert         #x2301a00214
  (:methods
    (desert-jump-manager-method-32 () none) ;; 32
    (desert-jump-manager-method-33 () none) ;; 33
    (desert-jump-manager-method-34 () none) ;; 34
    )
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *wascity-airlock-exploder-params* joint-exploder-static-params)
;; (define-extern beam-generator-init-by-other function)
;; (define-extern *desjump-wasdoors-pos* object)
;; (define-extern *desjump-vehicle-path* array)
;; (define-extern part-tracker-check-parent function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desertg-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desert-elec-gate (elec-gate)
  ()
  :method-count-assert 31
  :size-assert         #x200
  :flag-assert         #x1f01800200
  )
|#

#|
(deftype desert-eggwall (process-drawable)
  ((task-node uint16  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xca
  :flag-assert         #x17005000ca
  (:methods
    (desert-eggwall-method-22 () none) ;; 22
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype des-cactus-obstacle (process-focusable)
  ((explode-time uint64  :offset-assert 208)
   )
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:state-methods
    idle ;; 28
    )
  )
|#

;; (define-extern *desert-elec-gate-params* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; terraformer-drone              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype terraformer-drone (nav-enemy)
  ((trail-part           basic                      :offset-assert 620)
   (spinner-jm           basic                      :offset-assert 624)
   (spinner-angle        float                      :offset-assert 628)
   (minimap              connection-minimap         :offset-assert 632)
   (zigzag-counter       int8                       :offset-assert 636)
   (zigzag-timer         uint64                     :offset-assert 640)
   (zigzag-target        vector             :inline :offset-assert 656)
   (floor                float                      :offset-assert 672)
   (engine-sound         uint32                     :offset-assert 676)
   (engine-sound-playing basic                      :offset-assert 680)
   )
  :method-count-assert 192
  :size-assert         #x2ac
  :flag-assert         #xc0023002ac
  (:state-methods
    hostile ;; 38
    attack ;; 190
    stare ;; 37
    jump ;; 44
    notice ;; 35
    explode ;; 191
    )
  )
|#

#|
(deftype terraformer-drone-small (terraformer-drone)
  ()
  :method-count-assert 192
  :size-assert         #x2ac
  :flag-assert         #xc0023002ac
  )
|#

;; (define-extern *range-terraformer-drone-explo-color* curve-color-fast)
;; (define-extern *range-terraformer-drone-explo-alpha* curve2d-fast)
;; (define-extern *range-terraformer-drone-explo-scale-x* curve2d-fast)
;; (define-extern *range-terraformer-drone-explo-scale-y* curve2d-fast)
;; (define-extern *curve-terraformer-drone-explo-alpha* curve2d-fast)
;; (define-extern *curve-terraformer-drone-explo-scale-x* curve2d-fast)
;; (define-extern *curve-terraformer-drone-explo-scale-y* curve2d-fast)
;; (define-extern *part-terraformer-drone-explosion-texture-curve-settings* object)
;; (define-extern *terraformer-drone-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prebot-eco-creature            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prebot-large-eco-creature (nav-enemy)
  ((old-y-deg         float              :offset-assert 620)
   (diff-angle        float              :offset-assert 624)
   (attack-anims      basic              :offset-assert 628)
   (victory-anims     basic              :offset-assert 632)
   (turn-left-anim    int32              :offset-assert 636)
   (turn-right-anim   int32              :offset-assert 640)
   (split-type        basic              :offset-assert 644)
   (attack-stop-frame float              :offset-assert 648)
   (traj              trajectory :inline :offset-assert 656)
   (which-trajectory  int8               :offset-assert 696)
   (x-rotate          float              :offset-assert 700)
   (y-rotate          float              :offset-assert 704)
   (launch-pos        vector     :inline :offset-assert 720)
   (launch            vector     :inline :offset-assert 736)
   (spin-jm           basic              :offset-assert 752)
   (trail-part        basic              :offset-assert 756)
   (trail-sound       uint32             :offset-assert 760)
   (flags             uint64             :offset-assert 768)
   )
  :method-count-assert 196
  :size-assert         #x308
  :flag-assert         #xc402900308
  (:methods
    (prebot-large-eco-creature-method-194 () none) ;; 194
    (prebot-large-eco-creature-method-195 () none) ;; 195
    )
  (:state-methods
    unfold ;; 190
    victory ;; 39
    pacing ;; 156
    circling ;; 157
    hostile ;; 38
    fly-to-dest ;; 191
    notice ;; 35
    attack ;; 192
    stare ;; 37
    wait-for-children ;; 193
    knocked ;; 31
    )
  )
|#

#|
(deftype prebot-medium-eco-creature (prebot-large-eco-creature)
  ((is-top        basic  :offset-assert 776)
   (is-bottom     basic  :offset-assert 780)
   (initial-scale float  :offset-assert 784)
   (final-scale   float  :offset-assert 788)
   )
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  (:methods
    (prebot-medium-eco-creature-method-196 () none) ;; 196
    (prebot-medium-eco-creature-method-197 () none) ;; 197
    )
  (:state-methods
    knocked-recover ;; 32
    )
  )
|#

#|
(deftype prebot-small-eco-creature (prebot-medium-eco-creature)
  ()
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  )
|#

#|
(deftype medium-eco-creature-launched (prebot-medium-eco-creature)
  ()
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  )
|#

#|
(deftype small-eco-creature-launched (prebot-small-eco-creature)
  ()
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  )
|#

#|
(deftype large-eco-creature (prebot-large-eco-creature)
  ()
  :method-count-assert 196
  :size-assert         #x308
  :flag-assert         #xc402900308
  )
|#

#|
(deftype medium-eco-creature (prebot-medium-eco-creature)
  ()
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  )
|#

#|
(deftype small-eco-creature (prebot-small-eco-creature)
  ()
  :method-count-assert 198
  :size-assert         #x318
  :flag-assert         #xc602a00318
  )
|#

;; (define-extern *prebot-large-eco-creature-nav-enemy-info* nav-enemy-info)
;; (define-extern large-eco-creature-split function)
;; (define-extern *prebot-medium-eco-creature-nav-enemy-info* nav-enemy-info)
;; (define-extern prebot-eco-creature-joint-callback function)
;; (define-extern adjust-split-joints function)
;; (define-extern *prebot-small-eco-creature-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deswalk-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deswalk-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dm-urchin (process-drawable)
  ((hit-points         float   :offset-assert 200)
   (incoming-attack-id uint32  :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:state-methods
    idle ;; 21
    die ;; 20
    )
  )
|#

#|
(deftype desw-eco-tank (process-drawable)
  ((hit-points         float   :offset-assert 200)
   (incoming-attack-id uint32  :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd0
  :flag-assert         #x16005000d0
  (:state-methods
    idle ;; 21
    die ;; 20
    )
  )
|#

#|
(deftype dm-tentacle-spores (process-focusable)
  ((hit-points         float   :offset-assert 208)
   (incoming-attack-id uint32  :offset-assert 212)
   (attack-timer       uint64  :offset-assert 216)
   )
  :method-count-assert 29
  :size-assert         #xe0
  :flag-assert         #x1d006000e0
  (:state-methods
    idle ;; 28
    )
  )
|#

#|
(deftype dm-tentacle-ragdoll (ragdoll)
  ((chain-pos  int8    :offset-assert 11980)
   (start-time uint64  :offset-assert 11984)
   (mode       uint64  :offset-assert 11992)
   )
  :method-count-assert 26
  :size-assert         #x2ee0
  :flag-assert         #x1a00002ee0
  )
|#

#|
(deftype dm-tentacle-ragdoll-proc (ragdoll-proc)
  ((last-frame-time uint64  :offset-assert 136)
   )
  :method-count-assert 20
  :size-assert         #x90
  :flag-assert         #x1400100090
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype dm-tentacle (process-focusable)
  ((hit-points         float          :offset-assert 208)
   (incoming-attack-id uint32         :offset-assert 212)
   (collision-timer    uint64         :offset-assert 216)
   (ragdoll-proc       uint64         :offset-assert 224)
   (flags              uint32         :offset-assert 232)
   (attack-timer       uint64         :offset-assert 240)
   (initial-position   vector :inline :offset-assert 256)
   )
  :method-count-assert 37
  :size-assert         #x110
  :flag-assert         #x2500900110
  (:methods
    (dm-tentacle-method-36 () none) ;; 36
    )
  (:state-methods
    idle ;; 35
    extend ;; 34
    retract ;; 33
    spit ;; 32
    whip ;; 31
    sweep ;; 30
    strike ;; 29
    die ;; 28
    )
  )
|#

#|
(deftype dm-tentacle-attack (structure)
  ((attack-type uint64  :offset-assert 0)
   (probability float   :offset-assert 8)
   (possible    basic   :offset-assert 12)
   (min-dist    float   :offset-assert 16)
   (max-dist    float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype hud-deswalk (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-deswalk (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

#|
(deftype desw-snake-stump (process-drawable)
  ((actor-group       uint32  :offset-assert 196)
   (actor-group-count int32   :offset-assert 200)
   (up-timer          uint64  :offset-assert 204)
   )
  :method-count-assert 24
  :size-assert         #xd8
  :flag-assert         #x18006000d8
  (:methods
    (desw-snake-stump-method-21 () none) ;; 21
    )
  (:state-methods
    moving ;; 23
    down ;; 22
    up ;; 20
    )
  )
|#

;; (define-extern *dm-urchin-exploder-params* joint-exploder-static-params)
;; (define-extern *desw-eco-tank-exploder-params* joint-exploder-static-params)
;; (define-extern dm-tentacle-spores-init-by-other function)
;; (define-extern *dm-tentacle-exploder-params* joint-exploder-static-params)
;; (define-extern *dm-tentacle-ragdoll-setup* object)
;; (define-extern dm-tentacle-ragdoll-proc-init-by-other function)
;; (define-extern dm-tentacle-adjust-collision function)
;; (define-extern dm-tentacle-handler function)
;; (define-extern *dm-tentacle-attacks* array)
;; (define-extern dm-tentacle-start-ragdoll function)
;; (define-extern desw-snake-stump-should-be-active? function)
;; (define-extern desw-snake-stump-should-be-up? function)
;; (define-extern desw-snake-stump-handler function)
;; (define-extern partway-up state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palroof-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-drop-level-palroof-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; palcab-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern palcab-bird-bob-func function) ;; (function sparticle-system sparticle-cpuinfo matrix none :behavior palcab-part)
;; (define-extern sparticle-palcab-bird-moon function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; intro-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctypal-ctyfarma (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; searchlight                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype searchlight (process-drawable)
  ((sync sync-eased :inline :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xf4
  :flag-assert         #x15008000f4
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; billiards                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype billiard-ball (structure)
  ((pos      vector :inline :offset-assert 0)
   (prev-pos vector :inline :offset-assert 16)
   (size     float          :offset-assert 32)
   (flags    uint32         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype billiard-ball-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype billiard-table (basic)
  ((billiards            basic           :offset-assert 4)
   (accum-force          vector  :inline :offset-assert 16)
   (drag                 float           :offset-assert 32)
   (bounds               UNKNOWN 2       :offset-assert 48)
   (min-xyz              vector  :inline :offset-assert 48)
   (max-xyz              vector  :inline :offset-assert 64)
   (bounce-wall-friction float           :offset-assert 80)
   (ball-friction        float           :offset-assert 84)
   )
  :method-count-assert 16
  :size-assert         #x58
  :flag-assert         #x1000000058
  (:methods
    (billiard-table-method-9 () none) ;; 9
    (billiard-table-method-10 () none) ;; 10
    (billiard-table-method-11 () none) ;; 11
    (billiard-table-method-12 () none) ;; 12
    (billiard-table-method-13 () none) ;; 13
    (billiard-table-method-14 () none) ;; 14
    (billiard-table-method-15 () none) ;; 15
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guide-arrow                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype guide-arrow (process-drawable)
  ((bob-dir  vector :inline :offset-assert 208)
   (base-pos vector :inline :offset-assert 224)
   )
  :method-count-assert 23
  :size-assert         #xf8
  :flag-assert         #x17008000f8
  (:methods
    (guide-arrow-method-22 () none) ;; 22
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype guide-arrow-init-params (structure)
  ((pos    vector :inline :offset-assert 0)
   (facing vector :inline :offset-assert 16)
   (twist  float          :offset-assert 32)
   (xz?    basic          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

;; (define-extern guide-arrow-init-by-other function)
;; (define-extern spawn-guide-arrow function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-vehicles                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pickup-sled-sim (billiard-table)
  ((mat            matrix :inline :offset-assert 96)
   (external-force vector :inline :offset-assert 160)
   )
  :method-count-assert 16
  :size-assert         #xb0
  :flag-assert         #x10000000b0
  )
|#

#|
(deftype h-kg-pickup (h-car-base)
  ((fin-fr                joint-mod-rotate-local :inline :offset-assert 960)
   (fin-fl                joint-mod-rotate-local :inline :offset-assert 992)
   (fin-r                 joint-mod-rotate-local :inline :offset-assert 1024)
   (fin-l                 joint-mod-rotate-local :inline :offset-assert 1056)
   (rudder-l              joint-mod-rotate-local :inline :offset-assert 1088)
   (rudder-r              joint-mod-rotate-local :inline :offset-assert 1120)
   (turn-rate             float                          :offset-assert 1152)
   (target-turn-rate      float                          :offset-assert 1156)
   (camera-override?      basic                          :offset-assert 1160)
   (initial-creation-time uint64                         :offset-assert 1168)
   (auto-boost?           basic                          :offset-assert 1176)
   (steering-val          float                          :offset-assert 1180)
   (sled                  basic                          :offset-assert 1184)
   (barrels               basic                          :offset-assert 1188)
   (taskman               uint64                         :offset-assert 1192)
   (last-jitter-time      uint64                         :offset-assert 1200)
   (last-slide-time       uint64                         :offset-assert 1208)
   )
  :method-count-assert 162
  :size-assert         #x4c0
  :flag-assert         #xa2044004c0
  )
|#

#|
(deftype dark-barrel (process-focusable)
  ()
  :method-count-assert 29
  :size-assert         #xd0
  :flag-assert         #x1d005000d0
  (:state-methods
    idle ;; 28
    )
  )
|#

;; (define-extern *hijack-suck-curve* object)
;; (define-extern compute-suck-speed-scalar function)
;; (define-extern *h-kg-pickup-constants* object)
;; (define-extern dark-barrel-init-by-other function)
;; (define-extern spawn-pickup function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-hijack-missile             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-hijack-missile-init-params (structure)
  ((pos        vector     :inline :offset-assert 0)
   (quat       quaternion :inline :offset-assert 16)
   (track-obj  uint64             :offset-assert 32)
   (is-leader? basic              :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype evasive-compare-params (structure)
  ((data             UNKNOWN 3 :offset-assert 0)
   (y-val            float     :offset-assert 0)
   (angular-velocity float     :offset-assert 4)
   (speed            float     :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype evasive-action-info (structure)
  ((start-values evasive-compare-params :inline :offset-assert 0)
   (max-values   evasive-compare-params :inline :offset-assert 12)
   (difficulty   float                          :offset-assert 24)
   (evaded?      basic                          :offset-assert 28)
   )
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  (:methods
    (evasive-action-info-method-9 () none) ;; 9
    (evasive-action-info-method-10 () none) ;; 10
    )
  )
|#

#|
(deftype hijack-missile-bobber (structure)
  ((start-val           float   :offset-assert 0)
   (current-val         float   :offset-assert 4)
   (total-time          uint64  :offset-assert 8)
   (current-time        uint64  :offset-assert 16)
   (current-size-scalar float   :offset-assert 24)
   (dir                 float   :offset-assert 28)
   (num-iterations      float   :offset-assert 32)
   (time-scalar         float   :offset-assert 36)
   (start-time-scalar   float   :offset-assert 40)
   (desired-time-scalar float   :offset-assert 44)
   (scale-min           float   :offset-assert 48)
   (scale-max           float   :offset-assert 52)
   (time-min            float   :offset-assert 56)
   (time-max            float   :offset-assert 60)
   (base-time           float   :offset-assert 64)
   (current-speed       float   :offset-assert 68)
   (output-scale        float   :offset-assert 72)
   (output-val          float   :offset-assert 76)
   (charge-time         uint64  :offset-assert 80)
   (wait-time           uint64  :offset-assert 88)
   (turning?            basic   :offset-assert 96)
   )
  :method-count-assert 12
  :size-assert         #x64
  :flag-assert         #xc00000064
  (:methods
    (hijack-missile-bobber-method-9 () none) ;; 9
    (hijack-missile-bobber-method-10 () none) ;; 10
    (hijack-missile-bobber-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype cty-hijack-missile (process-focusable)
  ((tracked-player-positions basic                         :offset-assert 208)
   (current-track-index      uint32                        :offset-assert 212)
   (last-record-time         uint64                        :offset-assert 216)
   (track-obj                uint64                        :offset-assert 224)
   (current-speed            float                         :offset-assert 232)
   (target-speed             float                         :offset-assert 236)
   (lunge-speed              float                         :offset-assert 240)
   (temp-vec                 vector                :inline :offset-assert 256)
   (evasive-info             evasive-action-info   :inline :offset-assert 272)
   (target-pos               vector                :inline :offset-assert 304)
   (flee-vec                 vector                :inline :offset-assert 320)
   (is-leader?               basic                         :offset-assert 336)
   (offset-dist              float                         :offset-assert 340)
   (vel-factor               float                         :offset-assert 344)
   (original-quat            quaternion            :inline :offset-assert 352)
   (rotate-deg               float                         :offset-assert 368)
   (basetrans                vector                :inline :offset-assert 384)
   (lisa                     lissajous-interp      :inline :offset-assert 400)
   (next-lisa-time           uint64                        :offset-assert 488)
   (lisa-pt                  vector                :inline :offset-assert 496)
   (circle-mag               float                         :offset-assert 512)
   (last-trans               vector                :inline :offset-assert 528)
   (min-chase-speed          float                         :offset-assert 544)
   (min-targ-chase-speed     float                         :offset-assert 548)
   (max-chase-speed          float                         :offset-assert 552)
   (targ-scale-factor        float                         :offset-assert 556)
   (scale-factor             float                         :offset-assert 560)
   (missile-dist             float                         :offset-assert 564)
   (stage                    int8                          :offset-assert 568)
   (particle-trail           basic                         :offset-assert 572)
   (particle-trail-thrust    basic                         :offset-assert 576)
   (peel-off-sound           uint32                        :offset-assert 580)
   (bobber                   hijack-missile-bobber :inline :offset-assert 584)
   )
  :method-count-assert 54
  :size-assert         #x2ac
  :flag-assert         #x36023002ac
  (:methods
    (cty-hijack-missile-method-29 () none) ;; 29
    (cty-hijack-missile-method-32 () none) ;; 32
    (cty-hijack-missile-method-33 () none) ;; 33
    (cty-hijack-missile-method-34 () none) ;; 34
    (cty-hijack-missile-method-43 () none) ;; 43
    (cty-hijack-missile-method-44 () none) ;; 44
    (cty-hijack-missile-method-45 () none) ;; 45
    (cty-hijack-missile-method-46 () none) ;; 46
    (cty-hijack-missile-method-47 () none) ;; 47
    (cty-hijack-missile-method-48 () none) ;; 48
    (cty-hijack-missile-method-49 () none) ;; 49
    (cty-hijack-missile-method-50 () none) ;; 50
    (cty-hijack-missile-method-51 () none) ;; 51
    (cty-hijack-missile-method-52 () none) ;; 52
    (cty-hijack-missile-method-53 () none) ;; 53
    )
  (:state-methods
    chasing ;; 30
    chasing-2 ;; 38
    fake-chase ;; 42
    lure ;; 36
    lure-die ;; 37
    lunge-prepare ;; 35
    explode ;; 31
    explode-tiny ;; 40
    die ;; 39
    initial-launch ;; 41
    idle ;; 28
    )
  )
|#

;; (define-extern *missile-dist-near* object)
;; (define-extern *missile-dist-far* object)
;; (define-extern cty-hijack-missile-init-by-other function)
;; (define-extern compute-target-speed function)
;; (define-extern cty-hijack-missile-chase-event-handler function)
;; (define-extern *k0* object)
;; (define-extern *k1* object)
;; (define-extern *missile-dist-start* object)
;; (define-extern *accel-scalar* object)
;; (define-extern *use-lunging* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-hijack                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-hijack-manager (task-manager)
  ((hpickup                     uint64  :offset-assert 240)
   (missiles                    basic   :offset-assert 248)
   (current-leader-missile      int8    :offset-assert 252)
   (task-arrow                  uint64  :offset-assert 256)
   (alert-expire-time           uint64  :offset-assert 264)
   (lure-hit-time               uint64  :offset-assert 280)
   (naughty-ottsel-lure         uint64  :offset-assert 288)
   (missile-sound               uint32  :offset-assert 296)
   (vehicle-is-visible?         basic   :offset-assert 300)
   (last-check-vehicle-vis-time uint64  :offset-assert 304)
   )
  :method-count-assert 41
  :size-assert         #x138
  :flag-assert         #x2900c00138
  (:methods
    (cty-hijack-manager-method-35 () none) ;; 35
    (cty-hijack-manager-method-36 () none) ;; 36
    (cty-hijack-manager-method-37 () none) ;; 37
    (cty-hijack-manager-method-38 () none) ;; 38
    (cty-hijack-manager-method-39 () none) ;; 39
    (cty-hijack-manager-method-40 () none) ;; 40
    )
  (:state-methods
    player-riding ;; 32
    show-missile-launch ;; 34
    decoy-stage ;; 33
    active ;; 15
    wait ;; 14
    fail ;; 18
    )
  )
|#

#|
(deftype hijack-speech-instance (speech-instance)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype hijack-speech-info (structure)
  ((speeches  basic   :offset-assert 0)
   (flags     uint64  :offset-assert 8)
   (play-time uint64  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype cty-missile-lure-init-params (structure)
  ((pos                vector     :inline :offset-assert 0)
   (orient             quaternion :inline :offset-assert 16)
   (is-naughty-ottsel? basic              :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype cty-missile-lure (process-focusable)
  ((state-time         uint64              :offset-assert 192)
   (minimap            connection-minimap  :offset-assert 216)
   (is-naughty-ottsel? basic               :offset-assert 220)
   (lock-open?         basic               :offset-assert 224)
   (hum-sound          uint32              :offset-assert 228)
   (sirens2            basic               :offset-assert 232)
   (raise-sound        uint32              :offset-assert 236)
   )
  :method-count-assert 37
  :size-assert         #xf0
  :flag-assert         #x25007000f0
  (:methods
    (cty-missile-lure-method-35 () none) ;; 35
    (cty-missile-lure-method-36 () none) ;; 36
    )
  (:state-methods
    active ;; 29
    closing ;; 31
    opening ;; 32
    complete ;; 30
    idle ;; 28
    naughty-ottsel-wait ;; 33
    naughty-ottsel-lure ;; 34
    )
  )
|#

#|
(deftype cty-lure-info (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype cty-missile-launcher (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    idle ;; 20
    recoil ;; 21
    )
  )
|#

#|
(deftype guide-arrow-info (structure)
  ((pos    vector :inline :offset-assert 0)
   (facing vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

;; (define-extern *cty-hijack-speech-list* object)
;; (define-extern *pickup-start-pos* object)
;; (define-extern *pickup-start-angle* object)
;; (define-extern *hijack-speech* array)
;; (define-extern debug-reset-hijack-speech function)
;; (define-extern cty-missile-lure-init-by-other function)
;; (define-extern *cty-hijack-lure-positions* array)
;; (define-extern *naughty-ottsel-pos* object)
;; (define-extern *ctyport-hijack-fail* object)
;; (define-extern *pre-hijack-kg-squad-member-settings* object)
;; (define-extern *post-hijack-kg-squad-member-settings* object)
;; (define-extern *missile-fire-order* array)
;; (define-extern *missile-fire-frames* array)
;; (define-extern *missile-closer-chase-normal* object)
;; (define-extern *missile-closer-chase-pos* object)
;; (define-extern *guide-arrow-list* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; for-turret-shot                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype for-turret-shot (projectile)
  ((tail-pos vector :inline :offset-assert 512)
   )
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

;; (define-extern for-turret-shot-move function)
;; (define-extern spawn-for-turret-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; for-turret                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; hud-for-turret-health is already defined!

#|
(deftype for-turret-blocker (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype for-turret (target-turret)
  ((aim-pos              vector             :inline :offset-assert 556)
   (muzzle-pos           vector             :inline :offset-assert 572)
   (battle-entity        basic                      :offset-assert 588)
   (focus-handle         uint64                     :offset-assert 596)
   (task-node-id         int32                      :offset-assert 604)
   (fire-timer           uint64                     :offset-assert 612)
   (nav-mesh             basic                      :offset-assert 620)
   (flash-palette-index  int32                      :offset-assert 624)
   (flash-palette-level  basic                      :offset-assert 628)
   (blocker              uint64                     :offset-assert 636)
   (actor-group          uint32                     :offset-assert 644)
   (actor-group-count    int32                      :offset-assert 648)
   (last-speed0          float                      :offset-assert 652)
   (minimap              connection-minimap         :offset-assert 656)
   (current-barrel       int32                      :offset-assert 660)
   (barrel-recoil-offset UNKNOWN            2       :offset-assert 664)
   )
  :method-count-assert 61
  :size-assert         #x2a4
  :flag-assert         #x3d023002a4
  (:state-methods
    shutdown ;; 31
    active ;; 30
    gunner-active ;; 60
    die ;; 33
    gunner-setup ;; 59
    setup ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern for-turret-blocker-init-by-other function)
;; (define-extern *for-turret-params* object)
;; (define-extern *for-turret-exploder-params* joint-exploder-static-params)
;; (define-extern *for-turret-offset-table* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-wasp-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-wasp                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype neo-wasp-shot (metalhead-shot)
  ()
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype neo-wasp (hover-enemy)
  ((gun-jmod              joint-mod-rotate-local :inline :offset-assert 976)
   (entity-group          basic                          :offset-assert 1008)
   (smoke-part            basic                          :offset-assert 1012)
   (engine-part           basic                          :offset-assert 1016)
   (minimap               connection-minimap             :offset-assert 1020)
   (old-gravity           float                          :offset-assert 1028)
   (knocked-anim          int32                          :offset-assert 1032)
   (knocked-recover-anim  int32                          :offset-assert 1036)
   (last-fire-time        uint64                         :offset-assert 1040)
   (bridge-index          int32                          :offset-assert 1048)
   (gun-x-angle           float                          :offset-assert 1052)
   (gun-x-angle-final     float                          :offset-assert 1056)
   (path-u                float                          :offset-assert 1060)
   (path-du               float                          :offset-assert 1064)
   (path-du-final         float                          :offset-assert 1068)
   (path-dest             float                          :offset-assert 1072)
   (plat-pos              vector                 :inline :offset-assert 1088)
   (sound-id              uint32                         :offset-assert 1104)
   (on-screen-timer       uint64                         :offset-assert 1112)
   (attack-wait-min       float                          :offset-assert 1120)
   (attack-wait-max       float                          :offset-assert 1124)
   (attack-miss-dist-min  float                          :offset-assert 1128)
   (attack-miss-dist-max  float                          :offset-assert 1132)
   (attack-miss-dist-curr float                          :offset-assert 1136)
   (mech-flame-texture-id uint32                         :offset-assert 1140)
   )
  :method-count-assert 185
  :size-assert         #x478
  :flag-assert         #xb904000478
  (:methods
    (neo-wasp-method-182 () none) ;; 182
    (neo-wasp-method-183 () none) ;; 183
    (neo-wasp-method-184 () none) ;; 184
    )
  (:state-methods
    die-now ;; 180
    knocked-recover ;; 32
    attack ;; 179
    die-explode ;; 181
    hostile ;; 38
    ambush-attack ;; 178
    notice ;; 35
    ambush-flying ;; 177
    ambush ;; 47
    )
  )
|#

#|
(deftype neo-wasp-spawner (process)
  ((spawn-pos        vector :inline :offset-assert 128)
   (spawn-timer      uint64         :offset-assert 144)
   (enemies-spawned  int32          :offset-assert 152)
   (enemies-to-spawn int32          :offset-assert 156)
   )
  :method-count-assert 16
  :size-assert         #xa0
  :flag-assert         #x10002000a0
  (:state-methods
    die ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *neo-wasp-debris-params* debris-static-params)
;; (define-extern *fact-info-neo-wasp-defaults* fact-info-enemy-defaults)
;; (define-extern *neo-wasp-enemy-info* enemy-info)
;; (define-extern neo-wasp-spawner-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-foresta              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *foresta-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; neo-spawner                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-neo-spawner-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype neo-spawner-manager (process)
  ((actor-group       uint32  :offset-assert 124)
   (actor-group-count int32   :offset-assert 128)
   (total-spawned     int32   :offset-assert 132)
   (max-spawned       int32   :offset-assert 136)
   (suppress-spawn    basic   :offset-assert 140)
   )
  :method-count-assert 15
  :size-assert         #x94
  :flag-assert         #xf00200094
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype neo-spawner-type (structure)
  ((spawn-type basic   :offset-assert 0)
   (count      uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype neo-spawner (process-focusable)
  ((info               basic               :offset-assert 208)
   (actor-group        uint32              :offset-assert 212)
   (actor-group-count  int32               :offset-assert 216)
   (manager-entity     basic               :offset-assert 220)
   (turret-entity      basic               :offset-assert 224)
   (minimap            connection-minimap  :offset-assert 228)
   (incoming-attack-id int32               :offset-assert 232)
   (health             float               :offset-assert 236)
   (health-hud-timer   float               :offset-assert 240)
   (open-time          uint64              :offset-assert 248)
   (triggered?         basic               :offset-assert 256)
   (hud-health         uint64              :offset-assert 264)
   (lightning-time     uint64              :offset-assert 272)
   (dead-part          basic               :offset-assert 280)
   (last-spawn-time    uint64              :offset-assert 288)
   (state-time         uint64              :offset-assert 192)
   )
  :method-count-assert 37
  :size-assert         #x130
  :flag-assert         #x2500b00130
  (:methods
    (neo-spawner-method-35 () none) ;; 35
    (neo-spawner-method-36 () none) ;; 36
    )
  (:state-methods
    dead ;; 34
    die ;; 33
    vulnerable ;; 32
    spawn-enemy ;; 31
    open ;; 30
    opening ;; 29
    closed ;; 28
    )
  )
|#

;; (define-extern foresta-login function)
;; (define-extern foresta-logout function)
;; (define-extern foresta-activate function)
;; (define-extern *neo-spawner-info* array)
;; (define-extern *neo-spawner-debris-params* debris-static-params)
;; (define-extern neo-spawner-handler function)
;; (define-extern neo-spawner-active-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-h                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-turbo-pad (structure)
  ((position vector :inline :offset-assert 0)
   (handle   uint64         :offset-assert 16) ;; handle
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype race-decision-point (structure)
  ((pos           float  :offset-assert 0)
   (decision-type uint8  :offset-assert 4)
   (shortcuts     uint8  :offset-assert 5)
   (safe-paths    uint8  :offset-assert 6)
   )
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )
|#

#|
(deftype race-racer-info (structure)
  ((rider       uint8  :offset-assert 0)
   (vehicle     uint8  :offset-assert 1)
   (flags       uint8  :offset-assert 2) ;; racer-info-flags
   (seek-offset int8   :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-info (basic)
  ((race-mesh-name           string                                     :offset-assert 4) ;; guessed by decompiler
   (path-group-name          string                                     :offset-assert 8) ;; guessed by decompiler
   (task-node                uint16                                     :offset-assert 12) ;; game-task-node
   (mesh                     race-mesh                                  :offset-assert 16) ;; guessed by decompiler
   (ai-min-speed-factor      float                                      :offset-assert 20)
   (ai-max-speed-factor      float                                      :offset-assert 24)
   (ai-spread-factor         float                                      :offset-assert 28)
   (start-sphere             sphere                             :inline :offset-assert 32)
   (start-dir                vector                             :inline :offset-assert 48)
   (finish-sphere            sphere                             :inline :offset-assert 64)
   (finish-dir               vector                             :inline :offset-assert 80)
   (player-intro-pos         vector                             :inline :offset-assert 96)
   (flags                    uint8                                      :offset-assert 112) ;; race-info-flags
   (score                    uint8                                      :offset-assert 113)
   (lap-count                int8                                       :offset-assert 114)
   (racer-count              int8                                       :offset-assert 115)
   (turbo-pad-count          int8                                       :offset-assert 116)
   (map-index                int8                                       :offset-assert 117)
   (decision-point-count     int8                                       :offset-assert 118)
   (safe-paths               uint8                                      :offset-assert 119)
   (turbo-pad-array          (inline-array race-turbo-pad)              :offset-assert 120) ;; guessed by decompiler
   (racer-array              (inline-array race-racer-info)             :offset-assert 124) ;; guessed by decompiler
   (decision-point-array     (inline-array race-decision-point)         :offset-assert 128) ;; guessed by decompiler
   (level                    symbol                                     :offset-assert 132) ;; guessed by decompiler
   (borrow-level             symbol                                     :offset-assert 136) ;; guessed by decompiler
   (borrow                   pair                                       :offset-assert 140) ;; guessed by decompiler
   (manager                  uint64                                     :offset-assert 144) ;; handle
   (manager-handle-init-hack basic                                      :offset-assert 144)
   (hatch-actor-name         string                                     :offset-assert 152) ;; guessed by decompiler
   (countdown-scene          string                                     :offset-assert 156) ;; guessed by decompiler
   (complete-continue        string                                     :offset-assert 160) ;; guessed by decompiler
   (start-camera             string                                     :offset-assert 164) ;; guessed by decompiler
   (go-speech                uint16                                     :offset-assert 168)
   )
  :method-count-assert 10
  :size-assert         #xaa
  :flag-assert         #xa000000aa
  ;; field borrow uses ~A with a signed load.
  (:methods
    (race-info-method-9 () none) ;; 9 ;; (initialize-mesh (_type_) none)
    )
  )
|#

#|
(deftype racer-state (structure)
  ((position          vector :inline :offset-assert 0)
   (racer             uint64         :offset-assert 16) ;; handle
   (flags             uint8          :offset-assert 24) ;; racer-flags
   (rank              int8           :offset-assert 25)
   (finish-count      int8           :offset-assert 26)
   (lap-count         int8           :offset-assert 27)
   (lap-quadrant      int8           :offset-assert 28)
   (rider             uint8          :offset-assert 29)
   (lap-distance      float          :offset-assert 32)
   (lap-distance-prev float          :offset-assert 36)
   (pos               float          :offset-assert 40)
   (target-pos-offset float          :offset-assert 44)
   (speed-factor      float          :offset-assert 48)
   (finish-time       uint32         :offset-assert 52)
   (lap-start         uint32         :offset-assert 56)
   (best-lap-time     uint32         :offset-assert 60)
   (lap-time-array    float  5       :offset-assert 64) ;; guessed by decompiler
   (start-position    vector :inline :offset-assert 96)
   )
  :method-count-assert 14
  :size-assert         #x70
  :flag-assert         #xe00000070
  (:methods
    (racer-state-method-9 () none) ;; 9 ;; (update-lap-distance (_type_ race-state) none)
    (racer-state-method-10 () none) ;; 10 ;; (begin-lap (_type_ race-state) none)
    (racer-state-method-11 () none) ;; 11 ;; (end-lap (_type_ race-state) none)
    (racer-state-method-12 () none) ;; 12 ;; (print-laps (_type_ race-state string) none)
    (racer-state-method-13 () none) ;; 13 ;; (init-racer! (_type_ process-drawable) none)
    )
  )
|#

#|
(deftype race-state (structure)
  ((info                 race-info           :offset-assert 0) ;; guessed by decompiler
   (flags                uint8               :offset-assert 4) ;; race-flags
   (state                uint8               :offset-assert 5) ;; race-state-enum
   (racer-count          int8                :offset-assert 6)
   (finished-count       int8                :offset-assert 7)
   (i-player             int8                :offset-assert 8)
   (i-countdown          int8                :offset-assert 9)
   (manager              uint64              :offset-assert 16) ;; handle
   (scene-player         uint64              :offset-assert 24) ;; handle
   (race-signal          uint64              :offset-assert 32) ;; handle
   (arrow                uint64              :offset-assert 40) ;; handle
   (hud-timer            uint64              :offset-assert 48) ;; handle
   (hud-lap-counter      uint64              :offset-assert 56) ;; handle
   (hud-turbo-counter    uint64              :offset-assert 64) ;; handle
   (hud-position         uint64              :offset-assert 72) ;; handle
   (current-time         uint32              :offset-assert 80)
   (countdown-start-time uint32              :offset-assert 84)
   (race-start-time      uint32              :offset-assert 88)
   (rankings             int8        10      :offset-assert 92) ;; guessed by decompiler
   (target-pos           float               :offset-assert 104)
   (suck-factor          float               :offset-assert 108)
   (player-win?          basic               :offset-assert 112)
   (new-score?           basic               :offset-assert 116)
   (racer-array          racer-state 10      :offset-assert 128) ;; guessed by decompiler
   (player-intro-curve   cubic-curve :inline :offset-assert 1248)
   )
  :method-count-assert 21
  :size-assert         #x520
  :flag-assert         #x1500000520
  (:methods
    (race-state-method-9 () none) ;; 9 ;; (init-racers! (_type_ process-drawable) none)
    (race-state-method-10 () none) ;; 10 ;; (begin-race (_type_) none)
    (race-state-method-11 () none) ;; 11 ;; (update (_type_) none)
    (race-state-method-12 () none) ;; 12 ;; (update-rankings (_type_) none)
    (race-state-method-13 () none) ;; 13 ;; (debug-print-rankings (_type_) none)
    (race-state-method-14 () none) ;; 14 ;; (update-racers (_type_) none)
    (race-state-method-15 () none) ;; 15 ;; (spawn-race-signal (_type_) none)
    (race-state-method-16 () none) ;; 16 ;; (initialize (_type_ process race-info) none)
    (race-state-method-17 () none) ;; 17 ;; (set-speech-tables! (_type_) none)
    (race-state-method-18 () none) ;; 18 ;; (setup-race (_type_) none)
    (race-state-method-19 () none) ;; 19
    (race-state-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype race-manager (process)
  ((race-state           race-state  :offset-assert 128)
   (state-time           uint64      :offset-assert 136) ;; time-frame
   (player-on-track-time uint64      :offset-assert 144) ;; time-frame
   (message-id           sound-id    :offset-assert 152) ;; guessed by decompiler
   (finish-sound-id      sound-id    :offset-assert 156) ;; guessed by decompiler
   (show-stats?          basic       :offset-assert 160)
   )
  :method-count-assert 28
  :size-assert         #xa4
  :flag-assert         #x1c003000a4
  (:methods
    (race-manager-method-14 () none) ;; 14 ;; (idle () _type_ :state)
    (race-manager-method-15 () none) ;; 15 ;; (active () _type_ :state)
    (race-manager-method-16 () none) ;; 16 ;; (fail () _type_ :state)
    (race-manager-method-17 () none) ;; 17 ;; (win () _type_ :state)
    (race-manager-method-18 () none) ;; 18 ;; (lose () _type_ :state)
    (race-manager-method-19 () none) ;; 19 ;; (die () _type_ :state)
    (race-manager-method-20 () none) ;; 20 ;; (update (_type_) int)
    (race-manager-method-21 () none) ;; 21 ;; (initialize-state (_type_) none)
    (race-manager-method-22 () none) ;; 22 ;; (race-manager-method-22 (_type_) none)
    (race-manager-method-23 () none) ;; 23 ;; (initialize-race-state (_type_) none)
    (race-manager-method-24 () none) ;; 24 ;; (draw-message-continue (_type_) none)
    (race-manager-method-25 () none) ;; 25 ;; (draw-message-retry (_type_) none)
    (race-manager-method-26 () none) ;; 26 ;; (save-score (_type_ float) none)
    (race-manager-method-27 () none) ;; 27 ;; (stop-speech (_type_) none)
    )
  )
|#

#|
(deftype hud-race-timer (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-race-lap-counter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-race-turbo-counter (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-race-position (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

;; (define-extern *race-manager* object) ;; (pointer race-manager)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-mesh                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-mesh-hash-search (structure)
  ((best-dist             float                  :offset-assert 0)
   (debug-cells-searched  int32                  :offset-assert 4)
   (debug-slices-searched int32                  :offset-assert 8)
   (bounds                bounding-box4w :inline :offset-assert 16)
   (cell-quads            vector         2       :offset-assert 48) ;; guessed by decompiler
   (slice-quads           vector         4       :offset-assert 80) ;; guessed by decompiler
   (cell-bits             vector16ub     2       :offset-assert 48) ;; guessed by decompiler
   (slice-bits            vector16ub     2       :offset-assert 80) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

#|
(deftype race-mesh-slice-query (structure)
  ((slice-id      int16          :offset-assert 0)
   (lap-dist      float          :offset-assert 4)
   (pt-on-slice   vector :inline :offset-assert 16)
   (slice-corners vector 4       :offset-assert 32) ;; guessed by decompiler
   (search-sphere sphere :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

#|
(deftype race-path-edge-info (structure)
  ((sample-t float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-path-sample (structure)
  ((bytes    uint8      32      :offset-assert 0) ;; guessed by decompiler
   (pos      vector     :inline :offset-assert 0)
   (quat     quaternion :inline :offset-assert 16)
   (stick-x  int8               :offset-assert 12)
   (stick-y  int8               :offset-assert 13)
   (throttle uint8              :offset-assert 14)
   (flags    uint8              :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-path (structure)
  ((sample-count uint16                              :offset-assert 0)
   (record-id    int8                                :offset-assert 2)
   (pad          uint8                               :offset-assert 3)
   (samples      (inline-array race-path-sample)     :offset-assert 4) ;; guessed by decompiler
   (edge-infos   (inline-array race-path-edge-info)  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 13
  :size-assert         #xc
  :flag-assert         #xd0000000c
  (:methods
    (race-path-method-9 () none) ;; 9 ;; (draw-path-debug (_type_ rgba rgba) none)
    (race-path-method-10 () none) ;; 10 ;; (race-path-method-10 (_type_ vector float float) none)
    (race-path-method-11 () none) ;; 11 ;; (race-path-method-11 (_type_ race-path-sample vector float) none)
    (race-path-method-12 () none) ;; 12 ;; (race-path-method-12 (_type_ vector float float) float)
    )
  )
|#

#|
(deftype race-path-group (structure)
  ((name       string                     :offset-assert 0) ;; guessed by decompiler
   (path-count int8                       :offset-assert 4)
   (pad        uint8                    3 :offset-assert 5) ;; guessed by decompiler
   (paths      (inline-array race-path)   :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype race-mesh-edge (structure)
  ((left     vector :inline :offset-assert 0)
   (right    vector :inline :offset-assert 16)
   (lap-dist float          :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-mesh-slice (structure)
  ((edge-index-array uint16 2 :offset-assert 0) ;; guessed by decompiler
   (start-edge       int16    :offset-assert 0)
   (end-edge         int16    :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-mesh-hash-cell (structure)
  ((first-slice int16  :offset-assert 0)
   (slice-count uint8  :offset-assert 2)
   (pad         uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype race-mesh-hash (structure)
  ((cells-wide  int8                                       :offset-assert 0)
   (cells-tall  int8                                       :offset-assert 1)
   (cell-length float                                      :offset-assert 4)
   (cells       (inline-array race-mesh-hash-cell)         :offset-assert 8) ;; guessed by decompiler
   (slice-table (inline-array race-mesh-slice)             :offset-assert 12) ;; guessed by decompiler
   (origin      vector                             :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype race-mesh (basic)
  ((version          uint8                            :offset-assert 4)
   (path-group-count uint8                            :offset-assert 5)
   (flags            uint8                            :offset-assert 6) ;; race-mesh-flags
   (pad              uint8                          1 :offset-assert 7) ;; guessed by decompiler
   (slice-count      int16                            :offset-assert 8)
   (edge-count       int16                            :offset-assert 10)
   (slices           (inline-array race-mesh-slice)   :offset-assert 12) ;; guessed by decompiler
   (edges            (inline-array race-mesh-edge)    :offset-assert 16) ;; guessed by decompiler
   (hash             race-mesh-hash                   :offset-assert 20)
   (path-groups      (inline-array race-path-group)   :offset-assert 24) ;; guessed by decompiler
   )
  :method-count-assert 20
  :size-assert         #x1c
  :flag-assert         #x140000001c
  (:methods
    (race-mesh-method-9 () none) ;; 9 ;; (debug-draw-path (_type_ int int rgba rgba) none)
    (race-mesh-method-10 () none) ;; 10 ;; (debug-draw-path-from-history (_type_ int int) symbol)
    (race-mesh-method-11 () none) ;; 11 ;; (debug-draw-slice (_type_ int) none)
    (race-mesh-method-12 () none) ;; 12 ;; (debug-draw-edges (_type_) none)
    (race-mesh-method-13 () none) ;; 13 ;; (race-mesh-method-13 (_type_ race-mesh-slice-query) none)
    (race-mesh-method-14 () none) ;; 14 ;; (race-mesh-method-14 (_type_ race-mesh-slice-query) none)
    (race-mesh-method-15 () none) ;; 15 ;; (race-mesh-method-15 (_type_ int race-mesh-slice-query) none)
    (race-mesh-method-16 () none) ;; 16 ;; (race-mesh-method-16 (_type_ race-mesh-slice-query) none)
    (race-mesh-method-17 () none) ;; 17 ;; (race-mesh-method-17 (_type_ race-mesh-slice-query) symbol)
    (race-mesh-method-18 () none) ;; 18 ;; (race-mesh-method-18 (_type_ race-mesh-hash-search int int race-mesh-slice-query) none)
    (race-mesh-method-19 () none) ;; 19 ;; (race-mesh-method-19 (_type_ int race-mesh-slice-query) symbol)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-control                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype race-control (structure)
  ((state        race-state               :offset-assert 0)
   (mesh         race-mesh                :offset-assert 4) ;; guessed by decompiler
   (path-select  int8                     :offset-assert 8)
   (path-group   race-path-group          :offset-assert 12)
   (path         race-path                :offset-assert 16)
   (path-t       float                    :offset-assert 20)
   (racer-state  racer-state              :offset-assert 24)
   (path-sample  race-path-sample :inline :offset-assert 32)
   (lin-velocity vector           :inline :offset-assert 64)
   (ang-velocity vector           :inline :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x60
  :flag-assert         #xd00000060
  (:methods
    (race-control-method-9 () none) ;; 9 ;; (race-control-method-9 (_type_ int vector) none)
    (race-control-method-10 () none) ;; 10 ;; (race-control-method-10 (_type_ race-state racer-state) none)
    (race-control-method-11 () none) ;; 11 ;; (race-control-method-11 (_type_ float) none)
    (race-control-method-12 () none) ;; 12 ;; (race-control-method-12 (_type_ vector) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-info                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *race-info-array* array) ;; (array race-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-manager                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern race-find-ground function) ;; (function vector vector symbol)
;; (define-extern *race-state* object) ;; race-state
;; (define-extern *race-rigid-body-queue* object) ;; rigid-body-queue
;; (define-extern race-manager-event-handler function) ;; (function process int symbol event-message-block object :behavior race-manager)
;; (define-extern race-manager-init-by-other function) ;; (function race-info symbol none :behavior race-manager)
;; (define-extern race-start function) ;; (function int process symbol process)
;; (define-extern race-kill function) ;; (function none)
;; (define-extern race-vehicle-entity-hack function) ;; (function none)
;; (define-extern race-level-activate function) ;; (function level none)
;; (define-extern race-level-deactivate function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; race-hud                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pilot-recorder                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pilrec-sample (structure)
  ((sample-time uint64             :offset-assert 0) ;; time-frame
   (pos         vector     :inline :offset-assert 16)
   (quat        quaternion :inline :offset-assert 32)
   (stick-x     float              :offset-assert 48)
   (stick-y     float              :offset-assert 52)
   (throttle    float              :offset-assert 56)
   (flags       uint8              :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x3d
  :flag-assert         #x90000003d
  )
|#

#|
(deftype pilot-recorder-samples (basic)
  ((samples (inline-array pilrec-sample)  :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype pilot-recorder (process)
  ((info                 race-info                      :offset-assert 128) ;; guessed by decompiler
   (mesh                 race-mesh                      :offset-assert 132) ;; guessed by decompiler
   (select-race          uint64                         :offset-assert 136)
   (path-num             int32                          :offset-assert 144)
   (sample-count         int32                          :offset-assert 148)
   (samples              pilot-recorder-samples         :offset-assert 152) ;; guessed by decompiler
   (state-time           uint64                         :offset-assert 160) ;; time-frame
   (start-time           uint64                         :offset-assert 168) ;; time-frame
   (start-record-plane   plane                  :inline :offset-assert 176)
   (start-record-center  vector                 :inline :offset-assert 192)
   (finish-record-plane  plane                  :inline :offset-assert 208)
   (finish-record-center vector                 :inline :offset-assert 224)
   (prev-pos             vector                 :inline :offset-assert 240)
   )
  :method-count-assert 31
  :size-assert         #x100
  :flag-assert         #x1f00800100
  (:methods
    (pilot-recorder-method-22 () none) ;; 22 ;; (pilot-recorder-method-22 () none)
    (pilot-recorder-method-23 () none) ;; 23 ;; (pilot-recorder-method-23 () none)
    (pilot-recorder-method-24 () none) ;; 24 ;; (pilot-recorder-method-24 () none)
    (pilot-recorder-method-25 () none) ;; 25 ;; (pilot-recorder-method-25 () none)
    (pilot-recorder-method-26 () none) ;; 26 ;; (pilot-recorder-method-26 () none)
    (pilot-recorder-method-27 () none) ;; 27 ;; (pilot-recorder-method-27 () none)
    (pilot-recorder-method-28 () none) ;; 28 ;; (pilot-recorder-method-28 () none)
    (pilot-recorder-method-29 () none) ;; 29 ;; (pilot-recorder-method-29 () none)
    (pilot-recorder-method-30 () none) ;; 30 ;; (pilot-recorder-method-30 () none)
    )
  (:state-methods
    die-fast ;; 14, old: (die-fast () _type_ :state)
    fail-full ;; 18, old: (fail-full () _type_ :state)
    fail-save ;; 21, old: (fail-save () _type_ :state)
    save ;; 20, old: (save () _type_ :state)
    finished ;; 19, old: (finished () _type_ :state)
    recording ;; 17, old: (recording () _type_ :state)
    active ;; 16, old: (active () _type_ :state)
    idle ;; 15, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern *pilot-recorder-samples* object)
;; (define-extern delete-race-path function)
;; (define-extern *pilot-recorder* object)
;; (define-extern pilot-recorder-init-by-other function)
;; (define-extern start-pilot-recorder function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; was-leaper-race-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flut-racer                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flut-racer (nav-enemy)
  ((current-ring      uint8                      :offset-assert 620)
   (taskman           uint64                     :offset-assert 624)
   (minimap           connection-minimap         :offset-assert 632)
   (probe             vector             :inline :offset-assert 640)
   (last-speed-update uint64                     :offset-assert 656)
   )
  :method-count-assert 193
  :size-assert         #x298
  :flag-assert         #xc102200298
  (:state-methods
    halt ;; 192
    jump ;; 44
    race ;; 191
    wait ;; 190
    )
  )
|#

;; (define-extern *flut-racer-enemy-info* nav-enemy-info)
;; (define-extern ring-hit-logic function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; was-leaper-race                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-race-ring (process-drawable)
  ((active?      basic                      :offset-assert 200)
   (mat          matrix             :inline :offset-assert 208)
   (taskman      uint64                     :offset-assert 272)
   (player-part  basic                      :offset-assert 280)
   (player-ring? basic                      :offset-assert 284)
   (minimap      connection-minimap         :offset-assert 288)
   (is-final?    basic                      :offset-assert 292)
   (part-final   basic                      :offset-assert 296)
   )
  :method-count-assert 24
  :size-assert         #x12c
  :flag-assert         #x1800b0012c
  (:methods
    (wascity-race-ring-method-22 () none) ;; 22
    (wascity-race-ring-method-23 () none) ;; 23
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-wascity-leaper-race (task-manager)
  ((ring-manager-entity     basic     :offset-assert 236)
   (actor-group             uint32    :offset-assert 240)
   (actor-group-count       int32     :offset-assert 244)
   (current-ring            uint8     :offset-assert 248)
   (challenger-current-ring UNKNOWN 3 :offset-assert 249)
   (check-timer             uint64    :offset-assert 252)
   (hud-position            uint64    :offset-assert 212)
   (hint-timer              uint64    :offset-assert 260)
   (played-speeches         uint32    :offset-assert 268)
   )
  :method-count-assert 35
  :size-assert         #x114
  :flag-assert         #x2300a00114
  (:methods
    (task-manager-wascity-leaper-race-method-32 () none) ;; 32
    (task-manager-wascity-leaper-race-method-33 () none) ;; 33
    (task-manager-wascity-leaper-race-method-34 () none) ;; 34
    )
  (:state-methods
    fail ;; 18
    active ;; 15
    )
  )
|#

;; (define-extern wascity-race-ring-cleared? function)
;; (define-extern *was-leaper-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-boss-part              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-factory-boss-shot-explo-color* curve-color-fast)
;; (define-extern *range-factory-boss-shot-explo-alpha* curve2d-fast)
;; (define-extern *range-factory-boss-shot-explo-scale-x* curve2d-fast)
;; (define-extern *range-factory-boss-shot-explo-scale-y* curve2d-fast)
;; (define-extern *curve-factory-boss-shot-explo-alpha* curve2d-fast)
;; (define-extern *curve-factory-boss-shot-explo-scale-x* curve2d-fast)
;; (define-extern *curve-factory-boss-shot-explo-scale-y* curve2d-fast)
;; (define-extern *part-factory-boss-shot-explosion-texture-curve-settings* object)
;; (define-extern *part-factory-boss-machine-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-boss-setup             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype factory-boss-speech-instance (structure)
  ((speech      basic   :offset-assert 0)
   (probability float   :offset-assert 4)
   (flags       uint64  :offset-assert 8)
   (play-count  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype factory-boss-speech-info (structure)
  ((speeches         basic   :offset-assert 0)
   (play-time        uint64  :offset-assert 8)
   (current-random   uint64  :offset-assert 16)
   (minimum-interval uint64  :offset-assert 24)
   (random-interval  uint64  :offset-assert 32)
   (last-played      int8    :offset-assert 40)
   (flags            uint8   :offset-assert 41)
   )
  :method-count-assert 9
  :size-assert         #x2a
  :flag-assert         #x90000002a
  )
|#

#|
(deftype factory-boss-speech-group (structure)
  ((play-time uint64  :offset-assert 0)
   (info      basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype factory-boss-reticle-info (structure)
  ((reticle            basic   :offset-assert 0)
   (reticle-corner-0   basic   :offset-assert 4)
   (reticle-corner-1   basic   :offset-assert 8)
   (reticle-corner-2   basic   :offset-assert 12)
   (reticle-corner-3   basic   :offset-assert 16)
   (reticle-dot        basic   :offset-assert 20)
   (reticle-arrow      basic   :offset-assert 24)
   (reticle-super      basic   :offset-assert 28)
   (reticle-super-ring basic   :offset-assert 32)
   (lock-time          uint64  :offset-assert 40)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (factory-boss-reticle-info-method-9 () none) ;; 9
    (factory-boss-reticle-info-method-10 () none) ;; 10
    (factory-boss-reticle-info-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype factory-boss-shot (projectile)
  ((trail-part            basic              :offset-assert 512)
   (traj                  trajectory :inline :offset-assert 528)
   (traj-time             uint64             :offset-assert 568)
   (shot-dest             vector     :inline :offset-assert 576)
   (impact-played         basic              :offset-assert 592)
   (reticle-sound         uint32             :offset-assert 596)
   (reticle-sound-playing basic              :offset-assert 600)
   )
  :method-count-assert 42
  :size-assert         #x25c
  :flag-assert         #x2a01e0025c
  (:methods
    (factory-boss-shot-method-41 () none) ;; 41
    )
  (:state-methods
    impact ;; 22
    moving ;; 23
    )
  )
|#

#|
(deftype factory-boss-shockwave-bomb (factory-boss-shot)
  ()
  :method-count-assert 42
  :size-assert         #x25c
  :flag-assert         #x2a01e0025c
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype shockwave-bomb-explosion (explosion)
  ()
  :method-count-assert 23
  :size-assert         #x168
  :flag-assert         #x1700f00168
  )
|#

#|
(deftype factory-boss-floorbuster-bomb (factory-boss-shot)
  ((targetted-group int8  :offset-assert 604)
   )
  :method-count-assert 42
  :size-assert         #x25d
  :flag-assert         #x2a01e0025d
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype floorbuster-bomb-explosion (explosion)
  ((targetted-group int8  :offset-assert 360)
   )
  :method-count-assert 23
  :size-assert         #x169
  :flag-assert         #x1700f00169
  )
|#

#|
(deftype fac-drop-plat-nocollide (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype fac-drop-plat (process-drawable)
  ((x-rotation-speed float  :offset-assert 200)
   (y-rotation-speed float  :offset-assert 204)
   (boss             basic  :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xd4
  :flag-assert         #x17006000d4
  (:state-methods
    done-falling ;; 22
    fall-away ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype factory-boss-critter-tracker (structure)
  ((handle uint64         :offset-assert 0)
   (flags  uint32         :offset-assert 8)
   (dest   vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype factory-boss-machine-state (structure)
  ((damaged-low-smoke-part   basic   :offset-assert 0)
   (damaged-high-smoke-part  basic   :offset-assert 4)
   (damaged-left-spark-part  basic   :offset-assert 8)
   (damaged-right-spark-part basic   :offset-assert 12)
   (ring-part                basic   :offset-assert 16)
   (lightning                basic   :offset-assert 20)
   (machine-sound            uint32  :offset-assert 24)
   (state                    int8    :offset-assert 28)
   (flags                    uint8   :offset-assert 29)
   (left-spark-timer         uint64  :offset-assert 32)
   (right-spark-timer        uint64  :offset-assert 40)
   (ring-timer               uint64  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

#|
(deftype factory-boss-lightning-gate (structure)
  ((center         vector  :inline :offset-assert 0)
   (x-off          float           :offset-assert 16)
   (z-off          float           :offset-assert 20)
   (blocking-plane uint64          :offset-assert 24)
   (lightning      UNKNOWN 4       :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (factory-boss-lightning-gate-method-9 () none) ;; 9
    (factory-boss-lightning-gate-method-10 () none) ;; 10
    (factory-boss-lightning-gate-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype factory-boss (process-drawable)
  ((center                vector                      :inline :offset-assert 204)
   (shot-timer            uint64                              :offset-assert 220)
   (critter               UNKNOWN                     8       :offset-assert 236)
   (ammo                  UNKNOWN                     10      :offset-assert 492)
   (catwalk-angle         float                               :offset-assert 572)
   (catwalk-vel           float                               :offset-assert 576)
   (bombs-to-drop         int8                                :offset-assert 580)
   (bomb-type             uint64                              :offset-assert 588)
   (root-angle            float                               :offset-assert 596)
   (machine-state         UNKNOWN                     4       :offset-assert 604)
   (chosen-machine        int8                                :offset-assert 860)
   (command-index         int8                                :offset-assert 861)
   (command-timer         uint64                              :offset-assert 868)
   (current-round         int32                               :offset-assert 876)
   (hits-taken            int8                                :offset-assert 880)
   (camera-timer          uint64                              :offset-assert 884)
   (reticle-info          factory-boss-reticle-info   :inline :offset-assert 892)
   (actor-group           uint32                              :offset-assert 940)
   (actor-group-count     int32                               :offset-assert 944)
   (launching-group       basic                               :offset-assert 948)
   (floor-targets         UNKNOWN                     7       :offset-assert 952)
   (num-floor-targets     int8                                :offset-assert 959)
   (reticle-sound         uint32                              :offset-assert 960)
   (reticle-sound-playing basic                               :offset-assert 964)
   (warp-blocker          factory-boss-lightning-gate :inline :offset-assert 972)
   (entry-blocker         factory-boss-lightning-gate :inline :offset-assert 1020)
   )
  :method-count-assert 31
  :size-assert         #x430
  :flag-assert         #x1f03b00430
  (:methods
    (factory-boss-method-20 () none) ;; 20
    (factory-boss-method-21 () none) ;; 21
    (factory-boss-method-22 () none) ;; 22
    (factory-boss-method-23 () none) ;; 23
    (factory-boss-method-24 () none) ;; 24
    (factory-boss-method-25 () none) ;; 25
    (factory-boss-method-26 () none) ;; 26
    (factory-boss-method-27 () none) ;; 27
    (factory-boss-method-28 () none) ;; 28
    (factory-boss-method-29 () none) ;; 29
    (factory-boss-method-30 () none) ;; 30
    )
  )
|#

#|
(deftype hud-factory-boss (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-factory-boss (task-manager)
  ((button-up basic  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-factory-boss-method-32 () none) ;; 32
    )
  )
|#

#|
(deftype fac-warp-effect (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *factory-boss-dead-pool* object)
;; (define-extern *factory-boss-speech* object)
;; (define-extern reset-factory-boss-speeches function)
;; (define-extern factory-boss-play-speech function)
;; (define-extern fac-drop-plat-nocollide-init-by-other function)
;; (define-extern fac-drop-plat-setup-rots function)
;; (define-extern fac-drop-plat-rot-once function)
;; (define-extern fac-drop-plat-init-by-other function)
;; (define-extern factoryd-login function)
;; (define-extern factoryd-logout function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; missile-bot                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype missile-bot (nav-enemy)
  ((traj                    trajectory          :inline :offset-assert 624)
   (initial-y               float                       :offset-assert 664)
   (top-spin-jm             basic                       :offset-assert 668)
   (top-angle               float                       :offset-assert 672)
   (main-jm                 basic                       :offset-assert 676)
   (height-bob              bouncing-float      :inline :offset-assert 680)
   (height-bob-rand         delayed-rand-float  :inline :offset-assert 720)
   (main-wobble             oscillating-vector  :inline :offset-assert 752)
   (main-wobble-rand        delayed-rand-vector :inline :offset-assert 816)
   (thruster-part           basic                       :offset-assert 864)
   (lightning               UNKNOWN             6       :offset-assert 868)
   (lightning-wobble        UNKNOWN             3       :offset-assert 896)
   (lightning-wobble-rand   UNKNOWN             3       :offset-assert 1088)
   (lightning-mode          uint64                      :offset-assert 1232)
   (lightning-timer         uint64                      :offset-assert 1240)
   (lightning-sound         uint32                      :offset-assert 1248)
   (lightning-sound-playing basic                       :offset-assert 1252)
   (glows-on                basic                       :offset-assert 1256)
   (spin                    float                       :offset-assert 1260)
   (engine-sound            uint32                      :offset-assert 1264)
   (engine-sound-playing    basic                       :offset-assert 1268)
   (explosion-sound-index   int8                        :offset-assert 1272)
   (spin-whoosh-timer       uint64                      :offset-assert 1280)
   (will-hit-errol          basic                       :offset-assert 1288)
   (spark-part              basic                       :offset-assert 1292)
   (spark-part-on           basic                       :offset-assert 1296)
   (spark-timer             uint64                      :offset-assert 1304)
   )
  :method-count-assert 195
  :size-assert         #x520
  :flag-assert         #xc304a00520
  (:methods
    (missile-bot-method-194 () none) ;; 194
    )
  (:state-methods
    explode ;; 193
    lift-off ;; 192
    fizzle ;; 190
    die ;; 40
    hostile ;; 38
    kicked ;; 191
    notice ;; 35
    knocked ;; 31
    jump ;; 44
    )
  )
|#

;; (define-extern *missile-bot-nav-enemy-info* nav-enemy-info)
;; (define-extern stunned? function)
;; (define-extern missile-bot-get-kick-time function)
;; (define-extern missile-bot-find-dest function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-boss-states            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype factory-boss-command (structure)
  ((action uint64  :offset-assert 0)
   (suck   float   :offset-assert 8)
   (random float   :offset-assert 12)
   (round  int8    :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x11
  :flag-assert         #x900000011
  )
|#

;; (define-extern factory-boss-angle-sub function)
;; (define-extern factory-boss-target-pos function)
;; (define-extern factory-boss-move function)
;; (define-extern factory-boss-pick-machine function)
;; (define-extern factory-boss-pick-camera function)
;; (define-extern factory-boss-pick-pers-camera function)
;; (define-extern factory-boss-machine-angle function)
;; (define-extern factory-boss-approaching? function)
;; (define-extern factory-boss-move-to-dest-angle function)
;; (define-extern factory-boss-time-until-angle function)
;; (define-extern factory-boss-get-particle-spawn-points function)
;; (define-extern factory-boss-drop-bomb function)
;; (define-extern factory-boss-check-bomb-timer function)
;; (define-extern factory-boss-end-cutscene function)
;; (define-extern factory-boss-spawn-ring function)
;; (define-extern factory-boss-always function)
;; (define-extern factory-boss-always-handler function)
;; (define-extern factory-boss-handler function)
;; (define-extern *factory-boss-swarm-0* array)
;; (define-extern *factory-boss-swarm-1* array)
;; (define-extern *factory-boss-swarm-2* array)
;; (define-extern *factory-boss-swarm-3* array)
;; (define-extern *factory-boss-swarm-4* array)
;; (define-extern factory-boss-launch-critter-handler function)
;; (define-extern factory-boss-advance-launch-script function)
;; (define-extern factory-boss-check-launch-script function)
;; (define-extern factory-boss-launch-critter function)
;; (define-extern factory-boss-launch-critter-pick-anim function)
;; (define-extern factory-boss-pick-floor-targets function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-boss-scenes            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-fbme-dust-color* curve-color-fast)
;; (define-extern *range-fbme-dust-alpha* curve2d-fast)
;; (define-extern *range-fbme-dust-scale-x* curve2d-fast)
;; (define-extern *range-fbme-dust-scale-y* curve2d-fast)
;; (define-extern *curve-fbme-dust-alpha* curve2d-fast)
;; (define-extern *curve-fbme-dust-scale-x* curve2d-fast)
;; (define-extern *curve-fbme-dust-scale-y* curve2d-fast)
;; (define-extern *part-fac-boss-missile-explosion-dust-in-curve-settings* object)
;; (define-extern *range-fbme-color* curve-color-fast)
;; (define-extern *range-fbme-alpha* curve2d-fast)
;; (define-extern *range-fbme-scale-x* curve2d-fast)
;; (define-extern *range-fbme-scale-y* curve2d-fast)
;; (define-extern *curve-fbme-alpha* curve2d-fast)
;; (define-extern *curve-fbme-scale-x* curve2d-fast)
;; (define-extern *curve-fbme-scale-y* curve2d-fast)
;; (define-extern *part-fac-boss-missile-explosion-texture-curve-settings* object)
;; (define-extern spt-birth-func-part-factory-debris-trails function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-eggs-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *nest-eggs-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sig-rider                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype sig-rider (process-focusable)
  ((front-back-interp float   :offset-assert 208)
   (left-right-interp float   :offset-assert 212)
   (up-down-interp    float   :offset-assert 216)
   (complain-time     uint64  :offset-assert 224)
   (complain-speech   int32   :offset-assert 232)
   (last-moved-time   uint64  :offset-assert 240)
   )
  :method-count-assert 30
  :size-assert         #xf8
  :flag-assert         #x1e008000f8
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern sig-pilot-trans function)
;; (define-extern sig-pilot-wcar-anim-loop function)
;; (define-extern sig-rider-init-by-other function)
;; (define-extern sig-rider-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-gas                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-nest-cocoon-gas (task-manager)
  ((vehicle-handle        uint64              :offset-assert 240)
   (poison-cloud-timer    uint64              :offset-assert 248)
   (poison-level          float               :offset-assert 256)
   (played-damus-talkbox? basic               :offset-assert 260)
   (minimap               connection-minimap  :offset-assert 264)
   (complain-time         uint64              :offset-assert 272)
   (played-gas-warning    basic               :offset-assert 280)
   (part                  basic               :offset-assert 284)
   )
  :method-count-assert 33
  :size-assert         #x120
  :flag-assert         #x2100a00120
  (:state-methods
    paused ;; 32
    active ;; 15
    )
  )
|#

;; (define-extern *nest-poison-center* object)
;; (define-extern *garage-center* object)
;; (define-extern set-nst-poison! function)
;; (define-extern birth-func-set-fog-num function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nst-tasks                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-nest-cocoons (task-manager)
  ((vehicle-handle        uint64              :offset-assert 236)
   (cocoon-manager-entity basic               :offset-assert 244)
   (cocoon-count          int32               :offset-assert 248)
   (kill-cocoon-speech    int32               :offset-assert 252)
   (minimap               connection-minimap  :offset-assert 256)
   (actor-group           uint32              :offset-assert 260)
   (actor-group-count     int32               :offset-assert 264)
   (tunnel                basic               :offset-assert 268)
   )
  :method-count-assert 36
  :size-assert         #x114
  :flag-assert         #x2400a00114
  (:methods
    (task-manager-nest-cocoons-method-32 () none) ;; 32
    (task-manager-nest-cocoons-method-33 () none) ;; 33
    (task-manager-nest-cocoons-method-34 () none) ;; 34
    (task-manager-nest-cocoons-method-35 () none) ;; 35
    )
  (:state-methods
    resolution ;; 17
    active ;; 15
    )
  )
|#

;; (define-extern setup-scorpion function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-cactus                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype des-plant (process-focusable)
  ((exploder-params    basic           :offset-assert 208)
   (exploder-skel      basic           :offset-assert 212)
   (exploder-anim      uint32          :offset-assert 216)
   (hit-points         float           :offset-assert 220)
   (incoming-attack-id int32           :offset-assert 224)
   (exploder           uint64          :offset-assert 232)
   (attack-vel         vector  :inline :offset-assert 240)
   (spring-pos         vector  :inline :offset-assert 256)
   (spring-vel         vector  :inline :offset-assert 272)
   (jmods              UNKNOWN 4       :offset-assert 288)
   )
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  (:methods
    (des-plant-method-30 () none) ;; 30
    (des-plant-method-31 () none) ;; 31
    (des-plant-method-32 () none) ;; 32
    (des-plant-method-33 () none) ;; 33
    (des-plant-method-34 () none) ;; 34
    (des-plant-method-35 () none) ;; 35
    )
  (:state-methods
    explode ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype des-cactus-a (des-plant)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )
|#

#|
(deftype des-cactus-b (des-plant)
  ()
  :method-count-assert 36
  :size-assert         #x1a0
  :flag-assert         #x24012001a0
  )
|#

;; (define-extern *des-cactus-a-explode-params* joint-exploder-static-params)
;; (define-extern *des-cactus-b-explode-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desertd-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desertd-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *desertd-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarm-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype farm-marrow (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype farm-beetree (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype farm-cabbage (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype farm-small-cabbage (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype farm-chilirots (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype farm-sprinkler-barrels (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern check-farm-piece-ground function) ;; (function sparticle-system sparticle-cpuinfo matrix none)
;; (define-extern farm-activate function) ;; (function level none)
;; (define-extern birth-func-ctyfarma-drip function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern check-drop-level-ctyfarma-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo matrix none)
;; (define-extern birth-func-ctyfarmb-drip function) ;; (function int sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern check-drop-level-ctyfarmb-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarma-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyfarmb-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-factoryd             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *factoryd-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-part                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-ffexplo-dust-color* curve-color-fast)
;; (define-extern *range-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-fac-fighter-explosion-dust-in-curve-settings* object)
;; (define-extern *range-ffexplo-color* curve-color-fast)
;; (define-extern *range-ffexplo-alpha* curve2d-fast)
;; (define-extern *range-ffexplo-scale-x* curve2d-fast)
;; (define-extern *range-ffexplo-scale-y* curve2d-fast)
;; (define-extern *curve-ffexplo-alpha* curve2d-fast)
;; (define-extern *curve-ffexplo-scale-x* curve2d-fast)
;; (define-extern *curve-ffexplo-scale-y* curve2d-fast)
;; (define-extern *part-fac-fighter-explosion-texture-curve-settings* object)
;; (define-extern *range-fgtexplo-color* curve-color-fast)
;; (define-extern *range-fgtexplo-alpha* curve2d-fast)
;; (define-extern *range-fgtexplo-scale-x* curve2d-fast)
;; (define-extern *range-fgtexplo-scale-y* curve2d-fast)
;; (define-extern *curve-fgtexplo-alpha* curve2d-fast)
;; (define-extern *curve-fgtexplo-scale-x* curve2d-fast)
;; (define-extern *curve-fgtexplo-scale-y* curve2d-fast)
;; (define-extern *part-fac-tower-explosion-texture-curve-settings* object)
;; (define-extern *range-ftexplo-dust-color* curve-color-fast)
;; (define-extern *range-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-fac-tank-explosion-dust-in-curve-settings* object)
;; (define-extern *range-ftexplo-color* curve-color-fast)
;; (define-extern *range-ftexplo-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-y* curve2d-fast)
;; (define-extern *part-fac-tank-explosion-texture-curve-settings* object)
;; (define-extern *range-gthoexplo-color* curve-color-fast)
;; (define-extern *range-gthoexplo-alpha* curve2d-fast)
;; (define-extern *range-gthoexplo-scale-x* curve2d-fast)
;; (define-extern *range-gthoexplo-scale-y* curve2d-fast)
;; (define-extern *curve-gthoexplo-alpha* curve2d-fast)
;; (define-extern *curve-gthoexplo-scale-x* curve2d-fast)
;; (define-extern *curve-gthoexplo-scale-y* curve2d-fast)
;; (define-extern *part-gun-tower-hit-object-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype factory-states (structure)
  ((light  light-state :inline :offset-assert 0)
   (blink0 float               :offset-assert 8)
   (blink1 float               :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype factoryd-states (structure)
  ((electricity electricity-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern update-mood-factory function)
;; (define-extern update-mood-factoryd function)
;; (define-extern set-factoryd-light! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *war-factory-vehicle-mask* object)
;; (define-extern *war-factory-effects-mask* object)
;; (define-extern *range-fac-dust-color* curve-color-fast)
;; (define-extern *range-fac-dust-alpha* curve2d-fast)
;; (define-extern *range-fac-dust-scale-x* curve2d-fast)
;; (define-extern *range-fac-dust-scale-y* curve2d-fast)
;; (define-extern *curve-fac-dust-alpha* curve2d-fast)
;; (define-extern *curve-fac-dust-scale-x* curve2d-fast)
;; (define-extern *curve-fac-dust-scale-y* curve2d-fast)
;; (define-extern *part-hellcat-dust-landing-fac-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryc-manager               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-factory-assault (task-manager)
  ((explode-car-time uint64  :offset-assert 240)
   (daxter-done      basic   :offset-assert 248)
   (region-hack      basic   :offset-assert 252)
   )
  :method-count-assert 32
  :size-assert         #x100
  :flag-assert         #x2000800100
  )
|#

;; (define-extern factoryd-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; was-squad-control              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype was-squad-control (squad-control)
  ((manager             uint64     :offset-assert 816)
   (target-count        int8       :offset-assert 824)
   (process-count       int8       :offset-assert 825)
   (active-count        int8       :offset-assert 826)
   (reserve-count       int16      :offset-assert 828)
   (spawnable-time      uint32     :offset-assert 832)
   (spawn-time          uint32     :offset-assert 836)
   (spawn-delay         uint32     :offset-assert 840)
   (min-spawn-delay     uint32     :offset-assert 844)
   (max-spawn-delay     uint32     :offset-assert 848)
   (inaccuracy-factor   float      :offset-assert 852)
   (attack-delay-factor float      :offset-assert 856)
   (target-speed        float      :offset-assert 860)
   (nav-mesh            basic      :offset-assert 864)
   (units               UNKNOWN 10 :offset-assert 872)
   )
  :method-count-assert 37
  :size-assert         #x3b8
  :flag-assert         #x25000003b8
  (:methods
    (was-squad-control-method-34 () none) ;; 34
    (was-squad-control-method-35 () none) ;; 35
    (was-squad-control-method-36 () none) ;; 36
    )
  )
|#

#|
(deftype was-squad-manager (process)
  ((squad basic  :offset-assert 128)
   )
  :method-count-assert 17
  :size-assert         #x84
  :flag-assert         #x1100100084
  (:methods
    (was-squad-manager-method-15 () none) ;; 15
    (was-squad-manager-method-16 () none) ;; 16
    )
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern *was-squad-control* was-squad-control)
;; (define-extern *was-squad-manager* object)
;; (define-extern was-squad-manager-event-handler function)
;; (define-extern was-squad-manager-init-by-other function)
;; (define-extern was-squad-manager-start function)
;; (define-extern was-squad-manager-kill function)
;; (define-extern wvh function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wvehicle-sound-loop-state (structure)
  ((id    uint32  :offset-assert 0)
   (vol   float   :offset-assert 4)
   (pitch float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype vehicle-wheel-surface (structure)
  ((flags            vehicle-wheel-surface-flag   :offset-assert 0)
   (surface-type     uint8                        :offset-assert 1)
   (friction         float                        :offset-assert 4)
   (drag             float                        :offset-assert 8)
   (depth            float                        :offset-assert 12)
   (damage           float                        :offset-assert 16)
   (tire-roll-mix    UNKNOWN                    4 :offset-assert 20)
   (tire-roll-hum    float                        :offset-assert 20)
   (tire-roll-dirt   float                        :offset-assert 24)
   (tire-roll-sand   float                        :offset-assert 28)
   (tire-roll-knobby float                        :offset-assert 32)
   (tire-slide-mix   UNKNOWN                    2 :offset-assert 36)
   (tire-slide-road  float                        :offset-assert 36)
   (tire-slide-dirt  float                        :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  ;; field vehicle-wheel-surface-flag is likely a value type.
  )
|#

#|
(deftype vehicle-wheel-state (structure)
  ((info             vehicle-wheel-info            :offset-assert 0)
   (flags            uint8                         :offset-assert 4)
   (prev-flags       uint8                         :offset-assert 5)
   (handle           uint64                        :offset-assert 8)
   (probe-local-pos  vector                :inline :offset-assert 16)
   (probe-local-dir  vector                :inline :offset-assert 32)
   (local-axis       vector                :inline :offset-assert 48)
   (surface-pos      vector                :inline :offset-assert 64)
   (ground-pos       vector                :inline :offset-assert 80)
   (ground-normal    vector                :inline :offset-assert 96)
   (trans            vector                :inline :offset-assert 112)
   (quat             quaternion            :inline :offset-assert 128)
   (trail-pos        UNKNOWN               2       :offset-assert 144)
   (surface          vehicle-wheel-surface         :offset-assert 176)
   (pos              float                         :offset-assert 180)
   (pos2             float                         :offset-assert 184)
   (inertia          float                         :offset-assert 188)
   (steer-angle      float                         :offset-assert 192)
   (angle            float                         :offset-assert 196)
   (rev              float                         :offset-assert 200)
   (x-scale          float                         :offset-assert 204)
   (torque           float                         :offset-assert 208)
   (braking-torque   float                         :offset-assert 212)
   (up-force         float                         :offset-assert 216)
   (drive-diff       float                         :offset-assert 220)
   (side-vel         float                         :offset-assert 224)
   (up-vel           float                         :offset-assert 228)
   (forward-vel      float                         :offset-assert 232)
   (forward-slip-vel float                         :offset-assert 236)
   (friction-coef    float                         :offset-assert 240)
   (sink-depth       float                         :offset-assert 244)
   (sin-susp-ang     float                         :offset-assert 248)
   (cos-susp-ang     float                         :offset-assert 252)
   (part-birth-accum UNKNOWN               4       :offset-assert 256)
   (tread-time       uint32                        :offset-assert 272)
   (tread-tracker    uint64                        :offset-assert 280)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )
|#

#|
(deftype wvehicle-probe-work (structure)
  ((local-pos    vector :inline :offset-assert 0)
   (local-normal vector :inline :offset-assert 16)
   (world-pos    vector :inline :offset-assert 32)
   (world-normal vector :inline :offset-assert 48)
   (wheel-axis   vector :inline :offset-assert 64)
   (side-dir     vector :inline :offset-assert 80)
   (forward-dir  vector :inline :offset-assert 96)
   (velocity     vector :inline :offset-assert 112)
   (probe-uu     float          :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )
|#

#|
(deftype wvehicle-physics-work (structure)
  ((mat                   matrix        :inline :offset-assert 0)
   (force                 vector        :inline :offset-assert 64)
   (velocity              vector        :inline :offset-assert 80)
   (world-pos             vector        :inline :offset-assert 96)
   (world-normal          vector        :inline :offset-assert 112)
   (local-pos             vector        :inline :offset-assert 128)
   (steering-axis         vector        :inline :offset-assert 144)
   (probe-dir             vector        :inline :offset-assert 160)
   (tmp                   vector        :inline :offset-assert 176)
   (p-body                vector        :inline :offset-assert 192)
   (axis                  vector        :inline :offset-assert 208)
   (dir                   vector        :inline :offset-assert 224)
   (ground-normal-sum     vector        :inline :offset-assert 240)
   (ground-pos            vector        :inline :offset-assert 256)
   (forward-dir           vector        :inline :offset-assert 272)
   (side-dir              vector        :inline :offset-assert 288)
   (wheel-axis            vector        :inline :offset-assert 304)
   (wsphere               sphere        :inline :offset-assert 320)
   (friction-coef         float                 :offset-assert 336)
   (wheel-radius          float                 :offset-assert 340)
   (side-force            float                 :offset-assert 344)
   (forward-force         float                 :offset-assert 348)
   (max-forward-tire-grip float                 :offset-assert 352)
   (max-side-tire-grip    float                 :offset-assert 356)
   (inertia-eff           float                 :offset-assert 360)
   (ground-torque         float                 :offset-assert 364)
   (braking-torque        float                 :offset-assert 368)
   (total-torque          float                 :offset-assert 372)
   (limit-braking-torque  float                 :offset-assert 376)
   (max-braking-torque    float                 :offset-assert 380)
   (surface-drag          float                 :offset-assert 384)
   (water-y               float                 :offset-assert 388)
   (cur-time              uint32                :offset-assert 392)
   (surface-type          uint8                 :offset-assert 396)
   (surface-depth         float                 :offset-assert 400)
   (material              uint64                :offset-assert 408)
   (probe-work-array      UNKNOWN       4       :offset-assert 416)
   (cquery                collide-query :inline :offset-assert 992)
   )
  :method-count-assert 9
  :size-assert         #x5fc
  :flag-assert         #x9000005fc
  )
|#

#|
(deftype wvehicle (vehicle)
  ((race                    race-control        :inline :offset-assert 704)
   (target-status           squad-target-status :inline :offset-assert 800)
   (ai-controls             vehicle-controls    :inline :offset-assert 868)
   (minimap                 connection-minimap          :offset-assert 892)
   (net                     basic                       :offset-assert 896)
   (engine-rev              float                       :offset-assert 900)
   (engine-inertia          float                       :offset-assert 904)
   (engine-torque           float                       :offset-assert 908)
   (engine-max-torque       float                       :offset-assert 912)
   (engine-rpm              float                       :offset-assert 916)
   (sound-engine-rpm        float                       :offset-assert 920)
   (wheel-rev               float                       :offset-assert 924)
   (wheel-inertia           float                       :offset-assert 928)
   (wheel-torque            float                       :offset-assert 932)
   (wheel-braking-torque    float                       :offset-assert 936)
   (wheel-ground-torque     float                       :offset-assert 940)
   (clutch-grab             float                       :offset-assert 944)
   (gear-ratio              float                       :offset-assert 948)
   (final-drive-ratio       float                       :offset-assert 952)
   (total-gear-ratio        float                       :offset-assert 956)
   (inv-total-gear-ratio    float                       :offset-assert 960)
   (avg-drive-wheel-radius  float                       :offset-assert 964)
   (drive-wheel-inertia     float                       :offset-assert 968)
   (clutch-inertia          float                       :offset-assert 972)
   (idle-throttle           float                       :offset-assert 976)
   (susp-spring-control     float                       :offset-assert 980)
   (jump-control            float                       :offset-assert 984)
   (ai-min-speed            float                       :offset-assert 988)
   (ai-max-speed            float                       :offset-assert 992)
   (shortcut-speed-factor   float                       :offset-assert 996)
   (path-deviation          float                       :offset-assert 1000)
   (turbo-supply            float                       :offset-assert 1004)
   (turbo-ready             float                       :offset-assert 1008)
   (ai-state                uint8                       :offset-assert 1012)
   (return-ai-state         uint8                       :offset-assert 1013)
   (i-barrel                int8                        :offset-assert 1014)
   (shift-state             uint8                       :offset-assert 1015)
   (gear-select             int8                        :offset-assert 1016)
   (next-gear-select        int8                        :offset-assert 1017)
   (shift-time              uint32                      :offset-assert 1020)
   (impact                  rigid-body-impact   :inline :offset-assert 1024)
   (wheel                   UNKNOWN             4       :offset-assert 1088)
   (gravity-dir             vector              :inline :offset-assert 2240)
   (ai-target-point         vector              :inline :offset-assert 2256)
   (surface-velocity        vector              :inline :offset-assert 2272)
   (turret-local-pos        vector              :inline :offset-assert 2288)
   (gun-local-pos           vector              :inline :offset-assert 2304)
   (gun-local-dir           vector              :inline :offset-assert 2320)
   (gun-aim-yaw             float                       :offset-assert 2336)
   (gun-aim-yaw-vel         float                       :offset-assert 2340)
   (gun-targ-yaw            float                       :offset-assert 2344)
   (gun-targ-pitch          float                       :offset-assert 2348)
   (gun-yaw                 float                       :offset-assert 2352)
   (gun-pitch               float                       :offset-assert 2356)
   (gun-yaw-vel             float                       :offset-assert 2360)
   (gun-pitch-vel           float                       :offset-assert 2364)
   (gun-kick                float                       :offset-assert 2368)
   (lock-turret             basic                       :offset-assert 2372)
   (tire-roll-loop-state    UNKNOWN             4       :offset-assert 2376)
   (tire-slide-loop-state   UNKNOWN             2       :offset-assert 2440)
   (engine1-sound-id        uint32                      :offset-assert 2472)
   (engine2-sound-id        uint32                      :offset-assert 2476)
   (engine3-sound-id        uint32                      :offset-assert 2480)
   (damage-sound-id         uint32                      :offset-assert 2484)
   (water-sound-id          uint32                      :offset-assert 2488)
   (turbo-sound-id          uint32                      :offset-assert 2492)
   (shortcut-time           uint32                      :offset-assert 2496)
   (overturned-time         uint32                      :offset-assert 2500)
   (splash-time             uint32                      :offset-assert 2504)
   (knobby-time             uint32                      :offset-assert 2508)
   (susp-creak-time         uint32                      :offset-assert 2512)
   (shoot-time              uint32                      :offset-assert 2516)
   (shoot-delay             uint32                      :offset-assert 2520)
   (jump-time               uint32                      :offset-assert 2524)
   (ground-time             uint32                      :offset-assert 2528)
   (ram-time                uint32                      :offset-assert 2532)
   (attached-array          UNKNOWN             16      :offset-assert 2536)
   (eng1-vol                float                       :offset-assert 2664)
   (eng2-vol                float                       :offset-assert 2668)
   (eng3-vol                float                       :offset-assert 2672)
   (eng-pitch-variance      float                       :offset-assert 2676)
   (eng-pitch-variance-seek float                       :offset-assert 2680)
   (eng-vol-variance        float                       :offset-assert 2684)
   (eng-vol-variance-seek   float                       :offset-assert 2688)
   (eng-pitch-offset        float                       :offset-assert 2692)
   (eng-flutter-envelope    float                       :offset-assert 2696)
   (water-sound-envelope    float                       :offset-assert 2700)
   (other-proc              uint64                      :offset-assert 2704)
   (other-pos               vector              :inline :offset-assert 2720)
   )
  :method-count-assert 203
  :size-assert         #xab0
  :flag-assert         #xcb0a300ab0
  (:methods
    (wvehicle-method-152 () none) ;; 152
    (wvehicle-method-153 () none) ;; 153
    (wvehicle-method-154 () none) ;; 154
    (wvehicle-method-155 () none) ;; 155
    (wvehicle-method-156 () none) ;; 156
    (wvehicle-method-157 () none) ;; 157
    (wvehicle-method-158 () none) ;; 158
    (wvehicle-method-159 () none) ;; 159
    (wvehicle-method-160 () none) ;; 160
    (wvehicle-method-161 () none) ;; 161
    (wvehicle-method-162 () none) ;; 162
    (wvehicle-method-163 () none) ;; 163
    (wvehicle-method-164 () none) ;; 164
    (wvehicle-method-165 () none) ;; 165
    (wvehicle-method-166 () none) ;; 166
    (wvehicle-method-167 () none) ;; 167
    (wvehicle-method-168 () none) ;; 168
    (wvehicle-method-169 () none) ;; 169
    (wvehicle-method-170 () none) ;; 170
    (wvehicle-method-171 () none) ;; 171
    (wvehicle-method-172 () none) ;; 172
    (wvehicle-method-173 () none) ;; 173
    (wvehicle-method-174 () none) ;; 174
    (wvehicle-method-175 () none) ;; 175
    (wvehicle-method-176 () none) ;; 176
    (wvehicle-method-177 () none) ;; 177
    (wvehicle-method-178 () none) ;; 178
    (wvehicle-method-179 () none) ;; 179
    (wvehicle-method-180 () none) ;; 180
    (wvehicle-method-181 () none) ;; 181
    (wvehicle-method-182 () none) ;; 182
    (wvehicle-method-183 () none) ;; 183
    (wvehicle-method-184 () none) ;; 184
    (wvehicle-method-185 () none) ;; 185
    (wvehicle-method-186 () none) ;; 186
    (wvehicle-method-187 () none) ;; 187
    (wvehicle-method-188 () none) ;; 188
    (wvehicle-method-189 () none) ;; 189
    (wvehicle-method-190 () none) ;; 190
    (wvehicle-method-191 () none) ;; 191
    (wvehicle-method-192 () none) ;; 192
    (wvehicle-method-193 () none) ;; 193
    (wvehicle-method-194 () none) ;; 194
    (wvehicle-method-195 () none) ;; 195
    (wvehicle-method-196 () none) ;; 196
    (wvehicle-method-197 () none) ;; 197
    (wvehicle-method-198 () none) ;; 198
    (wvehicle-method-199 () none) ;; 199
    (wvehicle-method-200 () none) ;; 200
    (wvehicle-method-201 () none) ;; 201
    (wvehicle-method-202 () none) ;; 202
    )
  )
|#

#|
(deftype wvehicle-ai-drop-off-params (structure)
  ((dest vector :inline :offset-assert 0)
   (proc basic          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern rpm->radians-per-sec function)
;; (define-extern radians-per-sec->rpm function)
;; (define-extern wvehicle-surface-type-from-material function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-motion-blur-dirt function)
;; (define-extern spt-birth-func-brightness-buggy-rocks function)
;; (define-extern spt-birth-func-part-buggy-rocks function)
;; (define-extern spt-birth-func-part-dbuggy-debris function)
;; (define-extern *range-wv-wsplash-color* curve-color-fast)
;; (define-extern *range-wv-wsplash-alpha* curve2d-fast)
;; (define-extern *range-wv-wsplash-scale-x* curve2d-fast)
;; (define-extern *range-wv-wsplash-scale-y* curve2d-fast)
;; (define-extern *curve-wv-wsplash-alpha* curve2d-fast)
;; (define-extern *curve-wv-wsplash-scale-x* curve2d-fast)
;; (define-extern *curve-wv-wsplash-scale-y* curve2d-fast)
;; (define-extern *part-wv-water-splash-curve-settings* object)
;; (define-extern *range-wv-splash-color* curve-color-fast)
;; (define-extern *range-wv-splash-alpha* curve2d-fast)
;; (define-extern *range-wv-splash-scale-x* curve2d-fast)
;; (define-extern *range-wv-splash-scale-y* curve2d-fast)
;; (define-extern *curve-wv-splash-alpha* curve2d-fast)
;; (define-extern *curve-wv-splash-scale-x* curve2d-fast)
;; (define-extern *curve-wv-splash-scale-y* curve2d-fast)
;; (define-extern *part-wv-water-splash-center-curve-settings* object)
;; (define-extern check-scorp-shell-level1 function)
;; (define-extern check-scorp-shell-level2 function)
;; (define-extern *curve-toad-linear-up-red* object)
;; (define-extern *trail-color-curve-toad-grenade* curve-color-fast)
;; (define-extern *curve-grenade-linear-toad-trail* curve2d-fast)
;; (define-extern *toad-grenade-trail* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype turbo-pickup (process-drawable)
  ((available  symbol  :offset-assert 200) ;; guessed by decompiler
   (persistent basic   :offset-assert 204)
   (birth-time uint64  :offset-assert 208)
   (collector  uint64  :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  (:methods
    (turbo-pickup-method-22 () none) ;; 22 ;; (find-ground (_type_) symbol)
    )
  (:state-methods
    die ;; 21, old: (die () _type_ :state)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern turbo-pickup-init-by-other function) ;; (function vector none :behavior turbo-pickup)
;; (define-extern race-turbo-pickup-spawn function)
;; (define-extern turbo-pickup-spawn function) ;; (function process vector turbo-pickup :behavior turbo-pickup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-wheel                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-wheel-init-params (structure)
  ((skel                 basic              :offset-assert 0)
   (skel-blur            basic              :offset-assert 4)
   (level                basic              :offset-assert 8)
   (radius               float              :offset-assert 12)
   (collision-mesh-index int8               :offset-assert 16)
   (position             vector     :inline :offset-assert 32)
   (rotation             quaternion :inline :offset-assert 48)
   (scale                vector     :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
|#

#|
(deftype vehicle-wheel (rigid-body-object)
  ((collision-enable? basic           :offset-assert 288)
   (normal-look       lod-set :inline :offset-assert 292)
   (blur-look         lod-set :inline :offset-assert 344)
   )
  :method-count-assert 59
  :size-assert         #x189
  :flag-assert         #x3b01100189
  (:state-methods
    die ;; 58
    fade-out ;; 57
    explode ;; 56
    idle ;; 28
    )
  )
|#

;; (define-extern *vehicle-wheel-constants* object)
;; (define-extern vehicle-wheel-init-by-other function)
;; (define-extern vehicle-wheel-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-effects               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wvehicle-wheel-launcher-spec (structure)
  ((mat             matrix              :offset-assert 0)
   (particle-system basic               :offset-assert 4)
   (launcher        basic               :offset-assert 8)
   (num-spec        sp-field-init-spec  :offset-assert 12)
   (r-spec          sp-field-init-spec  :offset-assert 16)
   (g-spec          sp-field-init-spec  :offset-assert 20)
   (b-spec          sp-field-init-spec  :offset-assert 24)
   (a-spec          sp-field-init-spec  :offset-assert 28)
   (scale-x-spec    sp-field-init-spec  :offset-assert 32)
   (scale-y-spec    sp-field-init-spec  :offset-assert 36)
   (fade-a-spec     sp-field-init-spec  :offset-assert 40)
   (ptr-birth-accum uint32              :offset-assert 44)
   (i-birth-accum   int8                :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x31
  :flag-assert         #x900000031
  )
|#

#|
(deftype wvehicle-part-work (structure)
  ((local-mat       matrix                       :inline :offset-assert 0)
   (world-mat       matrix                       :inline :offset-assert 64)
   (velocity        vector                       :inline :offset-assert 128)
   (side-dir        vector                       :inline :offset-assert 144)
   (up-dir          vector                       :inline :offset-assert 160)
   (forward-dir     vector                       :inline :offset-assert 176)
   (wheel-axis      vector                       :inline :offset-assert 192)
   (surface-pos     vector                       :inline :offset-assert 208)
   (part-vel        vector                       :inline :offset-assert 224)
   (pos-l           vector                       :inline :offset-assert 240)
   (pos-r           vector                       :inline :offset-assert 256)
   (offset          vector                       :inline :offset-assert 272)
   (zero-offset     vector                       :inline :offset-assert 288)
   (prev-pos        vector                       :inline :offset-assert 304)
   (surface-type    uint8                                :offset-assert 320)
   (wheel-rev-speed float                                :offset-assert 324)
   (wheel-speed     float                                :offset-assert 328)
   (wheel-radius    float                                :offset-assert 332)
   (wheel-width     float                                :offset-assert 336)
   (part-num        float                                :offset-assert 340)
   (rand-val        float                                :offset-assert 344)
   (scale           float                                :offset-assert 348)
   (slip            float                                :offset-assert 352)
   (up-force        float                                :offset-assert 356)
   (alpha           float                                :offset-assert 360)
   (alpha-range     float                                :offset-assert 364)
   (vel-scale       float                                :offset-assert 368)
   (cur-time        uint32                               :offset-assert 372)
   (ups             float                                :offset-assert 376)
   (dirt-launcher   wvehicle-wheel-launcher-spec :inline :offset-assert 380)
   (dust-launcher   wvehicle-wheel-launcher-spec :inline :offset-assert 432)
   (spray-launcher  wvehicle-wheel-launcher-spec :inline :offset-assert 484)
   (ripple-launcher wvehicle-wheel-launcher-spec :inline :offset-assert 536)
   (dummy-spec      sp-field-init-spec           :inline :offset-assert 588)
   )
  :method-count-assert 9
  :size-assert         #x25c
  :flag-assert         #x90000025c
  )
|#

#|
(deftype tire-trail-crumb (light-trail-breadcrumb)
  ((offset vector :inline :offset-assert 16)
   (uu     float          :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype tire-trail (light-trail)
  ()
  :method-count-assert 24
  :size-assert         #x80
  :flag-assert         #x1800000080
  (:methods
    (tire-trail-method-22 () none) ;; 22
    (tire-trail-method-23 () none) ;; 23
    )
  )
|#

#|
(deftype tire-trail-tracker (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  (:state-methods
    tracking ;; 14
    )
  )
|#

#|
(deftype wvehicle-sound-loop-params (structure)
  ((speed  float  :offset-assert 0)
   (weight float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype wvehicle-sound-work (structure)
  ((roll-basis-params  UNKNOWN 4 :offset-assert 0)
   (slide-basis-params UNKNOWN 2 :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

;; (define-extern *wheel-trail-info* object)
;; (define-extern tire-trail-tracker-init-by-other function)
;; (define-extern spawn-tire-trail-tracker function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-util                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kill-player-process (process)
  ((player uint64  :offset-assert 128)
   (mode   basic   :offset-assert 136)
   )
  :method-count-assert 16
  :size-assert         #x8c
  :flag-assert         #x100010008c
  (:state-methods
    die ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern have-earned-vehicle-v-type? function)
(define-extern have-vehicle-v-type? (function int symbol))
;; (define-extern kill-player-process-init-by-other function)
;; (define-extern kill-player-process-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-ai                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-race                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-states                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-physics               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *wvehicle-surfaces* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wvehicle-hud                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-vehicle-turbo (hud)
  ((tex-rim basic  :offset-assert 2756)
   (tex-on  basic  :offset-assert 2760)
   (tex-off basic  :offset-assert 2764)
   )
  :method-count-assert 27
  :size-assert         #xad0
  :flag-assert         #x1b0a500ad0
  )
|#

;; (define-extern hud-vehicle-turbo-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-projectiles               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-scorp-shot (projectile)
  ((init-pos       vector :inline :offset-assert 512)
   (init-dir       vector :inline :offset-assert 528)
   (collide-normal vector :inline :offset-assert 544)
   )
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  )
|#

#|
(deftype v-snake-shot (v-scorp-shot)
  ()
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  )
|#

#|
(deftype v-rhino-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

#|
(deftype v-toad-shot (projectile)
  ((trail-tracker uint64  :offset-assert 512)
   (blast-radius  float   :offset-assert 520)
   )
  :method-count-assert 42
  :size-assert         #x20c
  :flag-assert         #x2a0190020c
  (:methods
    (v-toad-shot-method-41 () none) ;; 41
    )
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype v-marauder-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern v-scorp-shot-move function)
;; (define-extern cshape-reaction-scorp-shot function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wcar-base (wvehicle)
  ((rider-hand-joint-array UNKNOWN 2 :offset-assert 2736)
   )
  :method-count-assert 203
  :size-assert         #xab2
  :flag-assert         #xcb0a400ab2
  )
|#

#|
(deftype wcar-snake-base (wcar-base)
  ((local-gun-pos   UNKNOWN 2 :offset-assert 2752)
   (jmod-axles      UNKNOWN 4 :offset-assert 2784)
   (jmod-shock-tops UNKNOWN 4 :offset-assert 2912)
   (jmod-shock-mids UNKNOWN 4 :offset-assert 3040)
   (jmod-guns       UNKNOWN 2 :offset-assert 3296)
   )
  :method-count-assert 203
  :size-assert         #xd60
  :flag-assert         #xcb0ce00d60
  )
|#

;; (define-extern *v-turtle-constants* object)
;; (define-extern *v-snake-constants* object)
;; (define-extern *v-scorpion-constants* object)
;; (define-extern *v-toad-constants* object)
;; (define-extern *v-fox-constants* object)
;; (define-extern *v-rhino-constants* object)
;; (define-extern *v-mirage-constants* object)
;; (define-extern *v-x-ride-constants* object)
;; (define-extern *v-marauder-constants* object)
;; (define-extern *v-faccar-constants* object)
;; (define-extern *v-catapult-constants* object)
;; (define-extern *wcar-explosion-info* vehicle-explosion-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-turtle                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-turtle (wcar-base)
  ((jmod-axles      UNKNOWN 4       :offset-assert 2752)
   (jmod-shock-tops UNKNOWN 4       :offset-assert 2880)
   (jmod-shock-mids UNKNOWN 4       :offset-assert 3008)
   (jmod-antenna    UNKNOWN 4       :offset-assert 3264)
   (ant-tip-vel     vector  :inline :offset-assert 3392)
   (spring-pos      vector  :inline :offset-assert 3408)
   (spring-vel      vector  :inline :offset-assert 3424)
   )
  :method-count-assert 203
  :size-assert         #xd70
  :flag-assert         #xcb0cf00d70
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-snake                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-snake (wcar-snake-base)
  ()
  :method-count-assert 203
  :size-assert         #xd60
  :flag-assert         #xcb0ce00d60
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-scorpion                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-scorpion (wcar-base)
  ((jmod-axles      UNKNOWN                4       :offset-assert 2752)
   (jmod-shock-tops UNKNOWN                4       :offset-assert 2880)
   (jmod-shock-mids UNKNOWN                4       :offset-assert 3008)
   (jmod-shock-bots UNKNOWN                4       :offset-assert 3264)
   (jmod-gun-kick   joint-mod-add-local    :inline :offset-assert 3520)
   (jmod-gun-tilt   joint-mod-add-local    :inline :offset-assert 3584)
   (jmod-gun-turn   joint-mod-rotate-local :inline :offset-assert 3648)
   )
  :method-count-assert 203
  :size-assert         #xe60
  :flag-assert         #xcb0de00e60
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-toad                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-toad (wcar-base)
  ((jmod-axles      UNKNOWN 4 :offset-assert 2752)
   (jmod-shock-tops UNKNOWN 2 :offset-assert 2880)
   (jmod-shock-bots UNKNOWN 2 :offset-assert 2944)
   )
  :method-count-assert 204
  :size-assert         #xc00
  :flag-assert         #xcc0b800c00
  (:methods
    (v-toad-method-203 () none) ;; 203
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-fox                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-fox (wcar-snake-base)
  ()
  :method-count-assert 203
  :size-assert         #xd60
  :flag-assert         #xcb0ce00d60
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-rhino                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-rhino (wcar-base)
  ((jmod-axles    UNKNOWN                4       :offset-assert 2752)
   (jmod-gun-kick joint-mod-add-local    :inline :offset-assert 2880)
   (jmod-gun-turn joint-mod-rotate-local :inline :offset-assert 2944)
   )
  :method-count-assert 203
  :size-assert         #xba0
  :flag-assert         #xcb0b200ba0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-mirage                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-mirage (wcar-snake-base)
  ()
  :method-count-assert 203
  :size-assert         #xd60
  :flag-assert         #xcb0ce00d60
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-x-ride                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-x-ride (wcar-snake-base)
  ()
  :method-count-assert 203
  :size-assert         #xd60
  :flag-assert         #xcb0ce00d60
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-marauder                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-marauder (wcar-base)
  ((jmod-axles        UNKNOWN                4       :offset-assert 2752)
   (jmod-gun-x        joint-mod-rotate-local :inline :offset-assert 2880)
   (jmod-gun-y        joint-mod-rotate-local :inline :offset-assert 2912)
   (jmod-hatch        joint-mod-rotate-local :inline :offset-assert 2944)
   (turret-control    turret-control         :inline :offset-assert 2976)
   (inaccuracy-factor float                          :offset-assert 3072)
   (sub-state-time    uint32                         :offset-assert 3076)
   (sub-state         int8                           :offset-assert 3080)
   )
  :method-count-assert 204
  :size-assert         #xc09
  :flag-assert         #xcc0b900c09
  (:methods
    (v-marauder-method-203 () none) ;; 203
    )
  (:state-methods
    explode ;; 60
    )
  )
|#

;; (define-extern *v-marauder-turret-control-info* object)
;; (define-extern *v-marauder-turret-guard-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; w-parking-spot                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype w-parking-spot (process-drawable)
  ((vehicle         uint64                     :offset-assert 200)
   (should-spawn?   basic                      :offset-assert 208)
   (should-cleanup? basic                      :offset-assert 212)
   (v-type          uint8                      :offset-assert 216)
   (minimap         connection-minimap         :offset-assert 220)
   (test-sphere     sphere             :inline :offset-assert 224)
   (arrow           uint64                     :offset-assert 240)
   )
  :method-count-assert 27
  :size-assert         #xf8
  :flag-assert         #x1b008000f8
  (:methods
    (w-parking-spot-method-21 () none) ;; 21
    (w-parking-spot-method-22 () none) ;; 22
    (w-parking-spot-method-23 () none) ;; 23
    (w-parking-spot-method-24 () none) ;; 24
    (w-parking-spot-method-25 () none) ;; 25
    (w-parking-spot-method-26 () none) ;; 26
    )
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; king-rider                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype king-rider (process-focusable)
  ((front-back-interp float   :offset-assert 208)
   (left-right-interp float   :offset-assert 212)
   (up-down-interp    float   :offset-assert 216)
   (complain-time     uint64  :offset-assert 224)
   (complain-speech   int32   :offset-assert 232)
   (last-moved-time   uint64  :offset-assert 240)
   )
  :method-count-assert 30
  :size-assert         #xf8
  :flag-assert         #x1e008000f8
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern king-pilot-trans function)
;; (define-extern king-pilot-wcar-anim-loop function)
;; (define-extern king-rider-init-by-other function)
;; (define-extern king-rider-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rubble-attack                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rub-missile (metalhead-grenade-shot)
  ()
  :method-count-assert 41
  :size-assert         #x214
  :flag-assert         #x2901a00214
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype dm-missile-target (process-drawable)
  ((ring-jmod       UNKNOWN 2 :offset-assert 200)
   (ring-timer      uint64    :offset-assert 208)
   (blink-timer     uint64    :offset-assert 216)
   (target-sound-id uint32    :offset-assert 224)
   (warn-sound-id   uint32    :offset-assert 228)
   )
  :method-count-assert 22
  :size-assert         #xe8
  :flag-assert         #x16007000e8
  (:state-methods
    lock ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype rubble-attack-manager (task-manager)
  ((missile-spawners  basic   :offset-assert 240)
   (missile           uint64  :offset-assert 248)
   (missile-target    uint64  :offset-assert 256)
   (missile-timer     uint64  :offset-assert 264)
   (vehicle-handle    uint64  :offset-assert 272)
   (king-rider        uint64  :offset-assert 280)
   (talk-timer        uint64  :offset-assert 288)
   (played-speeches   uint32  :offset-assert 296)
   (first-dp-noticed? basic   :offset-assert 300)
   )
  :method-count-assert 35
  :size-assert         #x130
  :flag-assert         #x2300b00130
  (:methods
    (rubble-attack-manager-method-32 () none) ;; 32
    (rubble-attack-manager-method-33 () none) ;; 33
    (rubble-attack-manager-method-34 () none) ;; 34
    )
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern dm-missile-target-post function)
;; (define-extern dm-missile-target-handler function)
;; (define-extern *dm-missile-target-shadow-control* shadow-control)
;; (define-extern dm-missile-target-init-by-other function)
;; (define-extern *missile-spawners-all* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ai-task-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ai-task (basic)
  ((next      ai-task         :offset-assert 4) ;; guessed by decompiler
   (prev      ai-task         :offset-assert 8) ;; guessed by decompiler
   (pool      ai-task-pool    :offset-assert 12) ;; guessed by decompiler
   (unique-id uint32          :offset-assert 16)
   (bytes     int8         16 :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (ai-task-method-9 () none) ;; 9 ;; (reset-task! (_type_) none)
    (ai-task-method-10 () none) ;; 10 ;; (ai-task-method-10 (_type_ bot) none)
    (ai-task-method-11 () none) ;; 11 ;; (ai-task-method-11 (_type_ bot) none)
    )
  )
|#

#|
(deftype ai-task-pool (basic)
  ((anchor       ai-task           :offset-assert 4) ;; guessed by decompiler
   (tasks        (pointer uint32)  :offset-assert 8) ;; guessed by decompiler
   (tasks-length uint32            :offset-assert 12)
   (unique-id    uint32            :offset-assert 16)
   )
  :method-count-assert 12
  :size-assert         #x14
  :flag-assert         #xc00000014
  (:methods
    (ai-task-pool-method-9 () none) ;; 9 ;; (assign-ids! (_type_ type) ai-task)
    (ai-task-pool-method-10 () none) ;; 10 ;; (set-next-task! (_type_ ai-task) none)
    (ai-task-pool-method-11 () none) ;; 11 ;; (ai-task-pool-method-11 (_type_) ai-task)
    )
  )
|#

#|
(deftype ai-task-control (basic)
  ((anchor ai-task       :offset-assert 4) ;; guessed by decompiler
   (pool   ai-task-pool  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 18
  :size-assert         #xc
  :flag-assert         #x120000000c
  (:methods
    (new (symbol type) _type_) ;; 0 ;; (new (symbol type ai-task-pool) _type_)
    (ai-task-control-method-9 () none) ;; 9 ;; (ai-task-control-method-9 (_type_) none)
    (ai-task-control-method-10 () none) ;; 10 ;; (ai-task-control-method-10 (_type_ bot) none)
    (ai-task-control-method-11 () none) ;; 11 ;; (get-task-by-type (_type_ type bot) ai-task)
    (ai-task-control-method-12 () none) ;; 12 ;; (ai-task-control-method-12 (_type_ bot) symbol)
    (ai-task-control-method-13 () none) ;; 13 ;; (ai-task-control-method-13 (_type_ ai-task bot) ai-task)
    (ai-task-control-method-14 () none) ;; 14 ;; (ai-task-control-method-14 (_type_ ai-task bot) none)
    (ai-task-control-method-15 () none) ;; 15 ;; (init-task! (_type_ type bot) ai-task)
    (ai-task-control-method-16 () none) ;; 16 ;; (set-next-task-for-pool! (_type_ ai-task) none)
    (ai-task-control-method-17 () none) ;; 17 ;; (set-next-task! (_type_ ai-task) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; simple-focus                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype simple-focus (process-focusable)
  ((first-time? symbol  :offset-assert 208) ;; guessed by decompiler
   )
  :method-count-assert 29
  :size-assert         #xd4
  :flag-assert         #x1d006000d4
  (:state-methods
    idle ;; 28
    )
  )
|#

;; (define-extern simple-focus-init-by-other function) ;; (function none :behavior simple-focus)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bot-focus-info (structure)
  ((max-los-dist     float                     :offset-assert 0)
   (fproc            process-focusable         :offset-assert 4) ;; guessed by decompiler
   (bullseye-xz-dist float                     :offset-assert 8)
   (ry-diff          float                     :offset-assert 12)
   (my-facing-ry     float                     :offset-assert 16)
   (bullseye-ry      float                     :offset-assert 20)
   (los              int8                      :offset-assert 24)
   (update-time      uint64                    :offset-assert 32) ;; time-frame
   (bullseye         vector            :inline :offset-assert 48)
   (pos              vector            :inline :offset-assert 64)
   (my-facing-xz-dir vector            :inline :offset-assert 80)
   (bullseye-xz-dir  vector            :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )
|#

#|
(deftype bot-turn-info (structure)
  ((facing-ry          float              :offset-assert 0)
   (targ-ry            float              :offset-assert 4)
   (ry-diff            float              :offset-assert 8)
   (predicted-ry-diff  float              :offset-assert 12)
   (predicted-targ-ry  float              :offset-assert 16)
   (facing-dir         vector     :inline :offset-assert 32)
   (targ-pos           vector     :inline :offset-assert 48)
   (predicted-targ-pos vector     :inline :offset-assert 64)
   (src-quat           quaternion :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

#|
(deftype bot-speech-tuning (structure)
  ((fo-min   int32   :offset-assert 0)
   (fo-max   int32   :offset-assert 4)
   (fo-curve int8    :offset-assert 8)
   (trans?   symbol  :offset-assert 12) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype bot-speech-info (structure)
  ((flags     uint16  :offset-assert 0) ;; speech-flags
   (hold-time uint16  :offset-assert 2)
   (slave-id  int8    :offset-assert 4)
   (tuning-id int8    :offset-assert 5)
   (name      string  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype bot-spot (structure)
  ((center          vector :inline :offset-assert 0)
   (center-x        float          :offset-assert 0)
   (center-y        float          :offset-assert 4)
   (center-z        float          :offset-assert 8)
   (inside-xz-dist  float          :offset-assert 12)
   (blocked-xz-dist float          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype bot-waypoint (basic)
  ((waypoint-id      int16                :offset-assert 4)
   (nav-mesh-index   int8                 :offset-assert 6)
   (skip-to          int8                 :offset-assert 7)
   (on-set           (function bot none)  :offset-assert 8) ;; guessed by decompiler
   (on-update        (function bot none)  :offset-assert 12) ;; guessed by decompiler
   (on-skipping-here (function bot none)  :offset-assert 16) ;; guessed by decompiler
   (check-too-far    symbol               :offset-assert 20) ;; guessed by decompiler
   (warn-dist        float                :offset-assert 24)
   (fail-dist-delta  float                :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  ;; field check-too-far uses ~A with a signed load.
  )
|#

#|
(deftype bot-course (basic)
  ((course-id              uint8                             :offset-assert 4)
   (speech-count           uint16                            :offset-assert 6)
   (spot-count             uint16                            :offset-assert 8)
   (retry-cookie           uint8                             :offset-assert 10)
   (too-far-warn-speeches  bot-speech-list-shuffle           :offset-assert 12) ;; guessed by decompiler
   (too-far-fail-speeches  bot-speech-list                   :offset-assert 16) ;; guessed by decompiler
   (attack-player-speeches bot-speech-list                   :offset-assert 20) ;; guessed by decompiler
   (default-check-too-far  symbol                            :offset-assert 24) ;; guessed by decompiler
   (waypoints              (array bot-waypoint)              :offset-assert 28) ;; guessed by decompiler
   (speeches               (inline-array bot-speech-info)    :offset-assert 32) ;; guessed by decompiler
   (speech-tunings         (inline-array bot-speech-tuning)  :offset-assert 36) ;; guessed by decompiler
   (dirs                   (inline-array vector)             :offset-assert 40) ;; guessed by decompiler
   (spots                  (inline-array bot-spot)           :offset-assert 44) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  ;; field default-check-too-far uses ~A with a signed load.
  )
|#

#|
(deftype bot (nav-enemy)
  ((bot-flags                       bot-flags                      :offset-assert 620) ;; guessed by decompiler
   (min-speed                       float                          :offset-assert 624)
   (max-speed                       float                          :offset-assert 628)
   (follow-offset                   float                          :offset-assert 632)
   (too-far-warn-dist               float                          :offset-assert 636)
   (too-far-fail-dist-delta         float                          :offset-assert 640)
   (too-far-warn-dist-default       float                          :offset-assert 644)
   (too-far-fail-dist-delta-default float                          :offset-assert 648)
   (travel-prev-ry                  float                          :offset-assert 652)
   (travel-prev-ry1                 float                          :offset-assert 656)
   (player-blocking                 float                          :offset-assert 660)
   (ai-ctrl                         ai-task-control                :offset-assert 664) ;; guessed by decompiler
   (course                          bot-course                     :offset-assert 668) ;; guessed by decompiler
   (waypoint                        bot-waypoint                   :offset-assert 672) ;; guessed by decompiler
   (waypoint-bits                   waypoint-bits                  :offset-assert 676) ;; guessed by decompiler
   (waypoint-int32a                 int32                          :offset-assert 680)
   (bot-task-bits                   bot-task-bits                  :offset-assert 684) ;; guessed by decompiler
   (hit-invuln-ignore-me-delay      uint32                         :offset-assert 688)
   (hit-invuln-focus-disable-delay  uint32                         :offset-assert 692)
   (warn-to-fail-timeout            uint32                         :offset-assert 696)
   (warn-min-delay                  uint32                         :offset-assert 700)
   (warn-max-delay                  uint32                         :offset-assert 704)
   (spot-color                      uint32                         :offset-assert 708)
   (waypoint-request                int16                          :offset-assert 712)
   (hit-by-enemy-count              uint16                         :offset-assert 714)
   (hit-by-player-count             uint16                         :offset-assert 716)
   (notice-enemy-dist               float                          :offset-assert 720)
   (channel                         uint8                          :offset-assert 724) ;; gui-channel
   (focus-mode                      int8                           :offset-assert 725)
   (nav-mesh-index                  int8                           :offset-assert 726)
   (delay-too-far-check             int8                           :offset-assert 727)
   (slave-id                        int8                           :offset-assert 728)
   (vehicle-seat-index              int8                           :offset-assert 729)
   (bot-health-index                int8                           :offset-assert 730)
   (task                            game-task-control              :offset-assert 732) ;; guessed by decompiler
   (task-node                       basic                          :offset-assert 736)
   (swivel-joint-mod                joint-mod                      :offset-assert 740) ;; guessed by decompiler
   (health-handle                   uint64                         :offset-assert 744) ;; handle
   (poi-handle                      uint64                         :offset-assert 752) ;; handle
   (my-simple-focus                 (pointer simple-focus)         :offset-assert 760) ;; guessed by decompiler
   (attacker-handle                 uint64                         :offset-assert 768) ;; handle
   (scene-player-handle             uint64                         :offset-assert 776) ;; handle
   (master-handle                   uint64                         :offset-assert 784) ;; handle
   (vehicle-handle                  uint64                         :offset-assert 792) ;; handle
   (hit-invuln-starting-time        uint64                         :offset-assert 800) ;; time-frame
   (danger-time                     uint64                         :offset-assert 808) ;; time-frame
   (attacker-time                   uint64                         :offset-assert 816) ;; time-frame
   (started-warning-time            uint64                         :offset-assert 824) ;; time-frame
   (waypoint-time0                  uint64                         :offset-assert 832) ;; time-frame
   (next-too-far-warn-time          uint64                         :offset-assert 840) ;; time-frame
   (spot                            bot-spot               :inline :offset-assert 848)
   (follow-dir                      vector                 :inline :offset-assert 880)
   (focus-info                      bot-focus-info         :inline :offset-assert 896)
   )
  :method-count-assert 237
  :size-assert         #x3f0
  :flag-assert         #xed037003f0
  (:methods
    (bot-method-190 () none) ;; 190 ;; (bot-method-190 (_type_) symbol)
    (bot-method-191 () none) ;; 191 ;; (bot-method-191 (_type_) none)
    (bot-method-192 () none) ;; 192 ;; (bot-method-192 (_type_) none)
    (bot-method-193 () none) ;; 193 ;; (bot-method-193 (_type_) symbol)
    (bot-method-194 () none) ;; 194 ;; (outside-spot-radius? (_type_ bot-spot vector symbol) symbol)
    (bot-method-195 () none) ;; 195 ;; (attacked-by-player? (_type_ process-focusable) symbol)
    (bot-method-196 () none) ;; 196 ;; (bot-method-196 (_type_) none)
    (bot-method-197 () none) ;; 197 ;; (fail-mission! (_type_) none)
    (bot-method-198 () none) ;; 198 ;; (set-cam-height! (_type_ vector) meters)
    (bot-method-199 () none) ;; 199 ;; (cam-move-to-bot (_type_) none)
    (bot-method-200 () none) ;; 200 ;; (fail-falling (_type_) none)
    (bot-method-201 () none) ;; 201 ;; (set-next-focus! (_type_ enemy enemy-best-focus) none)
    (bot-method-202 () none) ;; 202 ;; (choose-spot (_type_ int (pointer uint)) int)
    (bot-method-203 () none) ;; 203 ;; (play-attacked-speech (_type_) none)
    (bot-method-204 () none) ;; 204 ;; (play-too-far-warn-speech (_type_) symbol)
    (bot-method-205 () none) ;; 205 ;; (scene-play (_type_ string symbol) symbol)
    (bot-method-206 () none) ;; 206 ;; (play-speech (_type_ int) none)
    (bot-method-207 () none) ;; 207 ;; (play-death-sound (_type_ string) none)
    (bot-method-208 () none) ;; 208 ;; (bot-method-208 (_type_) symbol)
    (bot-method-209 () none) ;; 209 ;; (channel-active? (_type_ gui-channel) symbol)
    (bot-method-210 () none) ;; 210 ;; (init! (_type_) none)
    (bot-method-211 () none) ;; 211 ;; (clear-speech-flags! (_type_) none)
    (bot-method-212 () none) ;; 212 ;; (reset-warn-time! (_type_) none)
    (bot-method-213 () none) ;; 213 ;; (go-to-waypoint! (_type_ int symbol) object)
    (bot-method-214 () none) ;; 214 ;; (bot-method-214 (_type_) symbol)
    (bot-method-215 () none) ;; 215 ;; (skip-waypoint (_type_) object)
    (bot-method-216 () none) ;; 216 ;; (bot-method-216 (_type_) none)
    (bot-method-217 () none) ;; 217 ;; (speech-ended? (_type_ int) symbol)
    (bot-method-218 () none) ;; 218 ;; (speech-playing? (_type_ int) symbol)
    (bot-method-219 () none) ;; 219 ;; (player-blocking-spot? (_type_ bot-spot) symbol)
    (bot-method-220 () none) ;; 220 ;; (stop-speech (_type_ uint symbol) none)
    (bot-method-221 () none) ;; 221 ;; (bot-method-221 (_type_) quaternion)
    (bot-method-222 () none) ;; 222 ;; (bot-method-222 (_type_ vector) none)
    (bot-method-223 () none) ;; 223 ;; (bot-method-223 (_type_ symbol) none)
    (bot-method-224 () none) ;; 224 ;; (bot-check-too-far (_type_) symbol)
    (bot-method-225 () none) ;; 225
    (bot-method-226 () none) ;; 226
    (bot-method-227 () none) ;; 227
    (bot-method-228 () none) ;; 228
    (bot-method-229 () none) ;; 229
    (bot-method-230 () none) ;; 230
    (bot-method-231 () none) ;; 231
    (bot-method-232 () none) ;; 232
    (bot-method-233 () none) ;; 233
    (bot-method-234 () none) ;; 234
    (bot-method-235 () none) ;; 235
    (bot-method-236 () none) ;; 236
    )
  )
|#

#|
(deftype bot-speech-list (basic)
  ((flags            uint8          :offset-assert 4)
   (retry-cookie     uint8          :offset-assert 5)
   (last-local-index int16          :offset-assert 6)
   (speech-indexes   (array int16)  :offset-assert 8) ;; guessed by decompiler
   )
  :method-count-assert 11
  :size-assert         #xc
  :flag-assert         #xb0000000c
  (:methods
    (bot-speech-list-method-9 () none) ;; 9 ;; (bot-speech-list-method-9 (_type_ bot (inline-array bot-speech-info) speech-flags) int)
    (bot-speech-list-method-10 () none) ;; 10 ;; (reset-index (_type_ symbol) none)
    )
  )
|#

#|
(deftype bot-speech-list-shuffle (bot-speech-list)
  ((history-mask      uint64  :offset-assert 16)
   (history-mask-full uint64  :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  )
|#

#|
(deftype bot-course-table (basic)
  ((course bot-course 1 :offset-assert 4) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *bot-task-pool* ai-task-pool) ;; ai-task-pool
;; (define-extern *bot-course-table* bot-course-table) ;; bot-course-table

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern bot-simple-check-too-far function) ;; (function bot int)
;; (define-extern bot-check-too-far-always-okay function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bot-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-h                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-course (bot-course)
  ((ouch-speeches    bot-speech-list-shuffle  :offset-assert 48) ;; guessed by decompiler
   (victory-speeches bot-speech-list-shuffle  :offset-assert 52) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  ;; field default-check-too-far uses ~A with a signed load.
  )
|#

#|
(deftype ashelin (bot)
  ((knocked-anim        art-joint-anim         :offset-assert 1008) ;; guessed by decompiler
   (travel-anim-interp  float                  :offset-assert 1012)
   (fired-gun-count     uint32                 :offset-assert 1016)
   (last-fire-time      uint64                 :offset-assert 1024) ;; time-frame
   (victory-speech-time uint64                 :offset-assert 1032) ;; time-frame
   (frontline           plane          :inline :offset-assert 1040)
   )
  :method-count-assert 262
  :size-assert         #x420
  :flag-assert         #x10603a00420
  (:methods
    (ashelin-method-237 () none) ;; 237 ;; (fire-projectile (_type_ vector) none)
    (ashelin-method-238 () none) ;; 238 ;; (ashelin-method-238 (_type_ symbol symbol) symbol)
    (ashelin-method-239 () none) ;; 239 ;; (ashelin-method-239 (_type_) none)
    (ashelin-method-240 () none) ;; 240 ;; (ashelin-method-240 (_type_ int) none)
    (ashelin-method-241 () none) ;; 241 ;; (ashelin-method-241 (_type_) int)
    (ashelin-method-242 () none) ;; 242 ;; (ashelin-method-242 (_type_) int)
    (ashelin-method-243 () none) ;; 243 ;; (ashelin-method-243 (_type_ float) int)
    (ashelin-method-244 () none) ;; 244 ;; (ashelin-method-244 (_type_) none)
    (ashelin-method-245 () none) ;; 245 ;; (ashelin-method-245 (_type_) none)
    (ashelin-method-246 () none) ;; 246 ;; (ashelin-method-246 (_type_) int)
    (ashelin-method-247 () none) ;; 247 ;; (ashelin-method-247 (_type_) symbol)
    (ashelin-method-248 () none) ;; 248 ;; (ashelin-method-248 (_type_) symbol)
    (ashelin-method-249 () none) ;; 249 ;; (ashelin-method-249 (_type_) none)
    (ashelin-method-250 () none) ;; 250 ;; (ashelin-method-250 (_type_ symbol) none)
    (ashelin-method-251 () none) ;; 251
    (ashelin-method-252 () none) ;; 252
    (ashelin-method-253 () none) ;; 253
    (ashelin-method-254 () none) ;; 254
    (ashelin-method-255 () none) ;; 255
    (ashelin-method-256 () none) ;; 256
    (ashelin-method-257 () none) ;; 257
    (ashelin-method-258 () none) ;; 258
    (ashelin-method-259 () none) ;; 259
    (ashelin-method-260 () none) ;; 260
    (ashelin-method-261 () none) ;; 261
    )
  )
|#

#|
(deftype asht-wait-spot (ai-task)
  ((check-done   (function asht-wait-spot ashelin symbol)   :offset-assert 32) ;; guessed by decompiler
   (which-spot   int8                                       :offset-assert 36)
   (num-spots    uint8                                      :offset-assert 37)
   (spot-indexes uint8                                    6 :offset-assert 38) ;; guessed by decompiler
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )
|#

#|
(deftype asht-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-task                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-shot                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-shot (projectile)
  ((tail-pos vector :inline :offset-assert 512)
   (hit-pos  vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern ashelin-shot-move function) ;; (function ashelin-shot none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-anim-info (structure)
  ((anim-index int32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype ashelin-global-info (basic)
  ((prev-blue-hit      int8    :offset-assert 4)
   (blue-hit-anim      int32 6 :offset-assert 8) ;; guessed by decompiler
   (blue-hit-land-anim int32 6 :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

;; (define-extern *ashelin-global-info* ashelin-global-info) ;; ashelin-global-info
;; (define-extern *ashelin-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-states                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; marauder                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype marauder (nav-enemy)
  ((los                   los-control     :inline :offset-assert 624)
   (target-pos            vector          :inline :offset-assert 800)
   (jump-attack           basic                   :offset-assert 816)
   (jump-info             enemy-jump-info :inline :offset-assert 832)
   (save                  basic                   :offset-assert 920)
   (save-pos              vector          :inline :offset-assert 928)
   (ambush?               basic                   :offset-assert 944)
   (knocked-back?         basic                   :offset-assert 948)
   (run-anim              int32                   :offset-assert 952)
   (gun?                  basic                   :offset-assert 956)
   (target-last-attacker? basic                   :offset-assert 960)
   (visible-last          uint64                  :offset-assert 968)
   (traj                  trajectory      :inline :offset-assert 976)
   (skip-jump             basic                   :offset-assert 1016)
   )
  :method-count-assert 199
  :size-assert         #x3fc
  :flag-assert         #xc7038003fc
  (:methods
    (marauder-method-196 () none) ;; 196
    (marauder-method-197 () none) ;; 197
    (marauder-method-198 () none) ;; 198
    )
  (:state-methods
    attack-run ;; 190
    ambush ;; 47
    lava-die ;; 193
    stare ;; 37
    idle ;; 33
    victory ;; 39
    jump-out ;; 195
    knocked ;; 31
    jump ;; 44
    gun-shoot ;; 194
    hostile ;; 38
    save-wait ;; 192
    save ;; 191
    )
  )
|#

#|
(deftype marauder-init-by-other-params (enemy-init-by-other-params)
  ((multi-focus basic  :offset-assert 48)
   (skip-jump   basic  :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

;; (define-extern *fact-info-marauder-defaults* fact-info-enemy-defaults)
;; (define-extern *marauder-nav-enemy-info* nav-enemy-info)
;; (define-extern marauder-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; oasis-defense                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype oasis-point (structure)
  ((pos  vector     :inline :offset-assert 0)
   (quat quaternion :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype oasis-vehicle (structure)
  ((handle            uint64  :offset-assert 0)
   (path-type         int8    :offset-assert 8)
   (path-pos          int8    :offset-assert 9)
   (spawned-marauder? basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype oasis-marauder (structure)
  ((handle       uint64  :offset-assert 0)
   (initialized? basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype task-manager-desert-oasis-defense (task-manager)
  ((nav-mesh          basic     :offset-assert 240)
   (vehicle           UNKNOWN 3 :offset-assert 248)
   (vehicle-count     uint8     :offset-assert 296)
   (v-free-list       basic     :offset-assert 300)
   (marauder          UNKNOWN 7 :offset-assert 304)
   (m-free-list       basic     :offset-assert 416)
   (marauder-count    uint8     :offset-assert 420)
   (total-spawned     uint8     :offset-assert 421)
   (total-veh-spawned uint8     :offset-assert 422)
   (check-timer       uint64    :offset-assert 424)
   (trans-timer       uint64    :offset-assert 432)
   (veh-fx            UNKNOWN 2 :offset-assert 440)
   (veh-fx-timer      uint64    :offset-assert 456)
   (ash-entity        basic     :offset-assert 464)
   (marauder-entity   basic     :offset-assert 468)
   (last-kill-time    uint64    :offset-assert 472)
   )
  :method-count-assert 36
  :size-assert         #x1e0
  :flag-assert         #x24016001e0
  (:methods
    (task-manager-desert-oasis-defense-method-32 () none) ;; 32
    (task-manager-desert-oasis-defense-method-33 () none) ;; 33
    (task-manager-desert-oasis-defense-method-34 () none) ;; 34
    (task-manager-desert-oasis-defense-method-35 () none) ;; 35
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype desoasis-hellcat (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *oasis-marauder-start* array)
;; (define-extern *oasis-vehicle-start* array)
;; (define-extern *oasis-vehicle-path* array)
;; (define-extern *oasis-vehicle-fx-path* array)
;; (define-extern *oasis-marauder-spawn-point* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ash-oasis-course               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ashelin-oasis (ashelin)
  ((player-in-bounds-time uint64                     :offset-assert 1056)
   (last-speech-time      uint64                     :offset-assert 1064)
   (last-speech-id        int32                      :offset-assert 1072)
   (last-sound-trans      vector             :inline :offset-assert 1088)
   (last-sound-id         uint32                     :offset-assert 1104)
   (minimap               connection-minimap         :offset-assert 1108)
   )
  :method-count-assert 264
  :size-assert         #x458
  :flag-assert         #x10803e00458
  (:methods
    (ashelin-oasis-method-262 () none) ;; 262
    (ashelin-oasis-method-263 () none) ;; 263
    )
  (:state-methods
    knocked ;; 31
    traveling ;; 241
    )
  )
|#

;; (define-extern *ash-oasis-course* ashelin-course)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyindb-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ctyindb-steam-b-particle-list* array)
;; (define-extern birth-func-texture-group-steam-b-ctyindb function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyindb-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype industrialb-board-vent (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; basebutton                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype basebutton (process-focusable)
  ((button-status     uint16                        :offset-assert 208) ;; button-status
   (notify-actor      entity                        :offset-assert 212) ;; guessed by decompiler
   (actor-group       (pointer actor-group)         :offset-assert 216) ;; guessed by decompiler
   (actor-group-count int32                         :offset-assert 220)
   (timeout           float                         :offset-assert 224)
   (button-id         int32                         :offset-assert 228)
   (event-going-down  symbol                        :offset-assert 232) ;; guessed by decompiler
   (event-down        symbol                        :offset-assert 236) ;; guessed by decompiler
   (event-going-up    symbol                        :offset-assert 240) ;; guessed by decompiler
   (event-up          symbol                        :offset-assert 244) ;; guessed by decompiler
   (anim-speed        float                         :offset-assert 248)
   (move-to-pos       vector                :inline :offset-assert 256)
   (move-to-quat      quaternion            :inline :offset-assert 272)
   )
  :method-count-assert 40
  :size-assert         #x120
  :flag-assert         #x2800a00120
  (:methods
    (basebutton-method-32 () none) ;; 32 ;; (idle-state-transition (_type_) object)
    (basebutton-method-33 () none) ;; 33 ;; (basebutton-method-33 (_type_) none)
    (basebutton-method-34 () none) ;; 34 ;; (basebutton-method-34 (_type_) none)
    (basebutton-method-35 () none) ;; 35 ;; (prepare-trigger-event! (_type_) none)
    (basebutton-method-36 () none) ;; 36 ;; (send-event! (_type_ symbol) none)
    (basebutton-method-37 () none) ;; 37 ;; (move-to! (_type_ vector quaternion) none)
    (basebutton-method-38 () none) ;; 38 ;; (press! (_type_ symbol) entity-perm-status)
    (basebutton-method-39 () none) ;; 39
    )
  (:state-methods
    going-up ;; 30, old: (up-idle () _type_ :state)
    down-idle ;; 28, old: (going-down () _type_ :state)
    going-down ;; 29, old: (going-up () _type_ :state)
    up-idle ;; 31, old: (reset! (_type_) none)
    )
  )
|#

;; (define-extern basebutton-init-by-other function) ;; (function entity-actor vector quaternion entity-actor symbol float none :behavior basebutton)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-obs-h                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-explo-dust-color* curve-color-fast)
;; (define-extern *range-explo-dust-alpha* curve2d-fast)
;; (define-extern *range-explo-dust-scale-x* curve2d-fast)
;; (define-extern *range-explo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-explo-dust-alpha* curve2d-fast)
;; (define-extern *curve-explo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-explo-dust-scale-y* curve2d-fast)
;; (define-extern *part-bomb-train-explosion-dust-in-curve-settings* object)
;; (define-extern *range-explo-color* curve-color-fast)
;; (define-extern *range-explo-alpha* curve2d-fast)
;; (define-extern *range-explo-scale-x* curve2d-fast)
;; (define-extern *range-explo-scale-y* curve2d-fast)
;; (define-extern *curve-explo-alpha* curve2d-fast)
;; (define-extern *curve-explo-scale-x* curve2d-fast)
;; (define-extern *curve-explo-scale-y* curve2d-fast)
;; (define-extern *part-bomb-train-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-mood                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mineb-light-state (structure)
  ((current float  :offset-assert 0)
   (target  float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype mineb-states (structure)
  ((lights UNKNOWN 3 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype minec-states (structure)
  ((light       light-state       :inline :offset-assert 0)
   (electricity electricity-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern init-mood-minea function)
;; (define-extern update-mood-minea function)
;; (define-extern init-mood-mineb function)
;; (define-extern update-mood-mineb function)
;; (define-extern set-mineb-lights! function)
;; (define-extern init-mood-minec function)
;; (define-extern update-mood-minec function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-platforms                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mine-platform-base (base-plat)
  ()
  :method-count-assert 38
  :size-assert         #x110
  :flag-assert         #x2600900110
  (:methods
    (mine-platform-base-method-36 () none) ;; 36
    (mine-platform-base-method-37 () none) ;; 37
    )
  (:state-methods
    plat-base-state ;; 35
    )
  )
|#

#|
(deftype min-moving-plat-spooler (process-drawable)
  ((spool-sound uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (min-moving-plat-spooler-method-21 () none) ;; 21
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype min-moving-plat (mine-platform-base)
  ((animation-speed   float               :offset-assert 272)
   (sync              sync-linear :inline :offset-assert 280)
   (min-frame-num     float               :offset-assert 296)
   (max-frame-num     float               :offset-assert 300)
   (sound-drill-spool uint32              :offset-assert 304)
   (sound-loop        uint32              :offset-assert 308)
   (sound-bit         uint32              :offset-assert 312)
   (sound-gear        uint32              :offset-assert 316)
   (last-frame        float               :offset-assert 320)
   (spooler           uint64              :offset-assert 328)
   (sync-offset       float               :offset-assert 336)
   )
  :method-count-assert 40
  :size-assert         #x154
  :flag-assert         #x2800e00154
  (:state-methods
    active ;; 39
    idle ;; 38
    )
  )
|#

#|
(deftype min-rotating-plat (mine-platform-base)
  ((animation-speed float               :offset-assert 272)
   (sync            sync-linear :inline :offset-assert 280)
   (sound-loop-id   uint32              :offset-assert 296)
   )
  :method-count-assert 40
  :size-assert         #x12c
  :flag-assert         #x2800b0012c
  (:state-methods
    active ;; 39
    idle ;; 38
    )
  )
|#

#|
(deftype min-falling-elevator (elevator)
  ((wheel-angle float  :offset-assert 416)
   (stop-sound  basic  :offset-assert 420)
   )
  :method-count-assert 55
  :size-assert         #x1ac
  :flag-assert         #x37013001ac
  (:state-methods
    resetting ;; 54
    falling ;; 53
    unstable ;; 52
    arrived ;; 38
    running ;; 37
    )
  )
|#

#|
(deftype min-falling-step (mine-platform-base)
  ((should-fall       basic   :offset-assert 268)
   (actor-group       uint32  :offset-assert 272)
   (actor-group-count int32   :offset-assert 276)
   )
  :method-count-assert 41
  :size-assert         #x11c
  :flag-assert         #x2900a0011c
  (:state-methods
    lowered ;; 40
    lowering ;; 39
    idle ;; 38
    )
  )
|#

#|
(deftype min-elev-track (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#

#|
(deftype min-folding-plat (process-drawable)
  ((stop-sound basic   :offset-assert 200)
   (sound-id   uint32  :offset-assert 204)
   )
  :method-count-assert 24
  :size-assert         #xd0
  :flag-assert         #x18005000d0
  (:methods
    (min-folding-plat-method-23 () none) ;; 23
    )
  (:state-methods
    extended ;; 22
    extend ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype min-ramp (process-drawable)
  ((angle            float   :offset-assert 200)
   (play-anim?       basic   :offset-assert 204)
   (play-ramp-sound? basic   :offset-assert 208)
   (stop-ramp-sound  basic   :offset-assert 212)
   (ramp-sound       uint32  :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    rotated ;; 22
    rotating ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype min-bridge (process-drawable)
  ((stop-bridge-sound basic   :offset-assert 200)
   (bridge-sound      uint32  :offset-assert 204)
   )
  :method-count-assert 24
  :size-assert         #xd0
  :flag-assert         #x18005000d0
  (:methods
    (min-bridge-method-23 () none) ;; 23
    )
  (:state-methods
    extended ;; 22
    extend ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype min-plat-updown (base-plat)
  ((sync     sync-eased :inline :offset-assert 272)
   (path-pos float              :offset-assert 316)
   )
  :method-count-assert 38
  :size-assert         #x140
  :flag-assert         #x2600c00140
  (:methods
    (min-plat-updown-method-37 () none) ;; 37
    )
  (:state-methods
    active ;; 36
    idle ;; 35
    )
  )
|#

#|
(deftype min-moving-step (min-plat-updown)
  ((holding? basic  :offset-assert 320)
   )
  :method-count-assert 39
  :size-assert         #x144
  :flag-assert         #x2700d00144
  (:state-methods
    active ;; 36
    dormant ;; 38
    )
  )
|#

#|
(deftype min-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  (:state-methods
    running ;; 37
    )
  )
|#

;; (define-extern min-moving-plat-spooler-init-by-other function)
;; (define-extern *drill-loop-mid-curve* object)
;; (define-extern min-falling-elevator-callback function)
;; (define-extern min-ramp-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rat-light-manager (process)
  ((actor-group       uint32  :offset-assert 124)
   (actor-group-count int32   :offset-assert 128)
   )
  :method-count-assert 17
  :size-assert         #x88
  :flag-assert         #x1100100088
  (:methods
    (rat-light-manager-method-15 () none) ;; 15
    (rat-light-manager-method-16 () none) ;; 16
    )
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype min-rat-engine (process-drawable)
  ((init-quat          quaternion :inline :offset-assert 204)
   (force-pos          vector     :inline :offset-assert 220)
   (actor-group        uint32             :offset-assert 236)
   (actor-group-count  int32              :offset-assert 240)
   (rot-speed          float              :offset-assert 244)
   (ang-momentum       float              :offset-assert 248)
   (rat-timer          uint64             :offset-assert 252)
   (notify-actor       basic              :offset-assert 260)
   (sound-id           uint32             :offset-assert 264)
   (rat-sound-id       uint32             :offset-assert 268)
   (rat-wheel-sound-id uint32             :offset-assert 272)
   (light-index        uint32             :offset-assert 276)
   (light-target       float              :offset-assert 280)
   (wheel-angle        float              :offset-assert 284)
   (wheel-sound-volume float              :offset-assert 288)
   (last-turn-time     uint64             :offset-assert 292)
   (rat-count          uint32             :offset-assert 300)
   )
  :method-count-assert 29
  :size-assert         #x134
  :flag-assert         #x1d00c00134
  (:methods
    (min-rat-engine-method-24 () none) ;; 24
    (min-rat-engine-method-25 () none) ;; 25
    (min-rat-engine-method-26 () none) ;; 26
    (min-rat-engine-method-27 () none) ;; 27
    (min-rat-engine-method-28 () none) ;; 28
    )
  (:state-methods
    shutdown ;; 23
    running ;; 22
    active ;; 21
    inactive ;; 20
    )
  )
|#

#|
(deftype min-crane (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (min-crane-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype min-target-sign (mine-platform-base)
  ((off-part       basic          :offset-assert 272)
   (on-part        basic          :offset-assert 276)
   (track-pos      vector :inline :offset-assert 288)
   (alt-actor      basic          :offset-assert 304)
   (touched-train? basic          :offset-assert 308)
   )
  :method-count-assert 43
  :size-assert         #x138
  :flag-assert         #x2b00c00138
  (:methods
    (min-target-sign-method-42 () none) ;; 42
    )
  (:state-methods
    idle-down ;; 41
    lowering ;; 40
    idle ;; 39
    dormant ;; 38
    )
  )
|#

#|
(deftype min-bomb-elevator (elevator)
  ((alt-actor         basic  :offset-assert 416)
   (bomb-train-offset float  :offset-assert 420)
   (wheel-angle       float  :offset-assert 424)
   )
  :method-count-assert 52
  :size-assert         #x1ac
  :flag-assert         #x34013001ac
  (:state-methods
    arrived ;; 38
    running ;; 37
    waiting ;; 36
    )
  )
|#

#|
(deftype min-elev-doors (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:methods
    (min-elev-doors-method-23 () none) ;; 23
    )
  (:state-methods
    opened ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype min-crane-switch (basebutton)
  ((rog uint64  :offset-assert 288)
   )
  :method-count-assert 40
  :size-assert         #x128
  :flag-assert         #x2800b00128
  (:state-methods
    up-idle ;; 31
    down-idle ;; 28
    )
  )
|#

#|
(deftype min-door (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:methods
    (min-door-method-22 () none) ;; 22
    (min-door-method-23 () none) ;; 23
    )
  (:state-methods
    exploded ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype min-elec-gate (elec-gate)
  ()
  :method-count-assert 31
  :size-assert         #x200
  :flag-assert         #x1f01800200
  )
|#

#|
(deftype min-boss-elev (elevator)
  ((going-down?         basic  :offset-assert 416)
   (sound-rotating-loop basic  :offset-assert 420)
   )
  :method-count-assert 52
  :size-assert         #x1a8
  :flag-assert         #x34013001a8
  (:state-methods
    running ;; 37
    dormant ;; 35
    )
  )
|#

#|
(deftype min-airlock-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype mine-music-manager (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

;; (define-extern mineb-activate function)
;; (define-extern min-rat-engine-handler function)
;; (define-extern min-rat-engine-post function)
;; (define-extern joint-mod-rat-engine-callback function)
;; (define-extern target-sign-event-handler function)
;; (define-extern min-bomb-elevator-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-train                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype min-bomb-train (process-focusable)
  ((path-pos          float   :offset-assert 208)
   (path-length       float   :offset-assert 212)
   (speed             float   :offset-assert 216)
   (fall-travel-time  float   :offset-assert 220)
   (actor-group       uint32  :offset-assert 224)
   (actor-group-count int32   :offset-assert 228)
   (wheel-angle       float   :offset-assert 232)
   (sound-loop-id     uint32  :offset-assert 236)
   (attack-id         uint32  :offset-assert 240)
   (spark-part        basic   :offset-assert 244)
   (smoke-part        basic   :offset-assert 248)
   (light-part        basic   :offset-assert 252)
   (doors-exploded?   basic   :offset-assert 256)
   (taskman           uint64  :offset-assert 264)
   (current-rail      uint8   :offset-assert 272)
   (suck-level        float   :offset-assert 276)
   (minimap           basic   :offset-assert 280)
   )
  :method-count-assert 41
  :size-assert         #x11c
  :flag-assert         #x2900a0011c
  (:methods
    (min-bomb-train-method-35 () none) ;; 35
    (min-bomb-train-method-36 () none) ;; 36
    (min-bomb-train-method-37 () none) ;; 37
    (min-bomb-train-method-38 () none) ;; 38
    (min-bomb-train-method-39 () none) ;; 39
    (min-bomb-train-method-40 () none) ;; 40
    )
  (:state-methods
    explode-doors ;; 34
    explode ;; 31
    fall ;; 32
    die ;; 33
    active ;; 30
    wait ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern *min-bomb-train-times* array)
;; (define-extern *min-bomb-train-debris-params* debris-static-params)
;; (define-extern min-bomb-train-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-scenes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype leggings (process-drawable)
  ((alt-actor basic  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern *range-explo-door-dust-color* curve-color-fast)
;; (define-extern *range-explo-door-dust-alpha* curve2d-fast)
;; (define-extern *range-explo-door-dust-scale-x* curve2d-fast)
;; (define-extern *range-explo-door-dust-scale-y* curve2d-fast)
;; (define-extern *curve-explo-door-dust-alpha* curve2d-fast)
;; (define-extern *curve-explo-door-dust-scale-x* curve2d-fast)
;; (define-extern *curve-explo-door-dust-scale-y* curve2d-fast)
;; (define-extern *part-bomb-door-explosion-dust-in-curve-settings* object)
;; (define-extern *range-explo-door-color* curve-color-fast)
;; (define-extern *range-explo-door-alpha* curve2d-fast)
;; (define-extern *range-explo-door-scale-x* curve2d-fast)
;; (define-extern *range-explo-door-scale-y* curve2d-fast)
;; (define-extern *curve-explo-door-alpha* curve2d-fast)
;; (define-extern *curve-explo-door-scale-x* curve2d-fast)
;; (define-extern *curve-explo-door-scale-y* curve2d-fast)
;; (define-extern *part-bomb-door-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mine-ocean                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-colors-mine* object)
;; (define-extern *ocean-near-indices-mine* ocean-near-indices)
;; (define-extern *ocean-trans-indices-mine* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-mine* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-mine* ocean-mid-masks)
;; (define-extern *ocean-map-mine* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; manta                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype manta (nav-enemy)
  ((info                     rigid-body-object-constants         :offset-assert 616)
   (move-matrix              matrix                      :inline :offset-assert 620)
   (curve-matrix             matrix                      :inline :offset-assert 684)
   (move-vel                 vector                      :inline :offset-assert 748)
   (move-u                   float                               :offset-assert 764)
   (move-du                  float                               :offset-assert 768)
   (move-force               float                               :offset-assert 772)
   (flags                    uint16                              :offset-assert 776)
   (go-enable                basic                               :offset-assert 780)
   (orbit-speed              float                               :offset-assert 784)
   (max-time-step            float                               :offset-assert 788)
   (gravity                  float                               :offset-assert 792)
   (landed-pos               vector                      :inline :offset-assert 796)
   (dest-pos                 vector                      :inline :offset-assert 812)
   (attack-pos               vector                      :inline :offset-assert 828)
   (up-dir                   vector                      :inline :offset-assert 844)
   (forward-dir              vector                      :inline :offset-assert 860)
   (knocked-force            vector                      :inline :offset-assert 876)
   (knocked-force-mult       float                               :offset-assert 892)
   (default-y-offset         float                               :offset-assert 896)
   (y-offset                 float                               :offset-assert 900)
   (last-attack-time         uint64                              :offset-assert 908)
   (attack-y-offset          float                               :offset-assert 916)
   (attack-path-blocked-time uint64                              :offset-assert 924)
   (track-timer              uint64                              :offset-assert 932)
   (angle-to-player          float                               :offset-assert 940)
   (offset-difference        float                               :offset-assert 944)
   (sound-volume             float                               :offset-assert 948)
   (restart-fly-anims        basic                               :offset-assert 952)
   (fly-anim-speed           float                               :offset-assert 956)
   (hit-ground-count         uint32                              :offset-assert 960)
   (fade-level               float                               :offset-assert 964)
   (actor-group              uint32                              :offset-assert 496)
   (actor-group-count        int32                               :offset-assert 500)
   )
  :method-count-assert 209
  :size-assert         #x3d4
  :flag-assert         #xd1036003d4
  (:methods
    (manta-method-195 () none) ;; 195
    (manta-method-196 () none) ;; 196
    (manta-method-197 () none) ;; 197
    (manta-method-198 () none) ;; 198
    (manta-method-199 () none) ;; 199
    (manta-method-200 () none) ;; 200
    (manta-method-201 () none) ;; 201
    (manta-method-202 () none) ;; 202
    (manta-method-203 () none) ;; 203
    (manta-method-204 () none) ;; 204
    (manta-method-205 () none) ;; 205
    (manta-method-206 () none) ;; 206
    (manta-method-207 () none) ;; 207
    (manta-method-208 () none) ;; 208
    )
  (:state-methods
    knocked-recover ;; 32
    knocked ;; 31
    attack-end ;; 194
    hostile ;; 38
    attack ;; 193
    stare ;; 37
    notice-to-fly ;; 192
    land ;; 191
    ambush ;; 47
    active ;; 34
    land-approach ;; 190
    idle ;; 33
    )
  )
|#

;; (define-extern *manta-rigid-body-constants* object)
;; (define-extern *fact-info-manta-defaults* fact-info-enemy-defaults)
;; (define-extern *manta-nav-enemy-info* nav-enemy-info)
;; (define-extern manta-hostile-post function)
;; (define-extern manta-attack-post function)
;; (define-extern manta-fly-code function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gekko                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gekko-foot-info (structure)
  ((ground-pos     vector     :inline :offset-assert 0)
   (ground-normal  vector     :inline :offset-assert 16)
   (foot-transform transformq :inline :offset-assert 32)
   (leg-ik         basic              :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )
|#

#|
(deftype gekko-ik-setup (structure)
  ((elbow-index    int32  :offset-assert 0)
   (hand-index     int32  :offset-assert 4)
   (effector-index int32  :offset-assert 8)
   (hand-dist      float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype gekko-shadow-spot (structure)
  ((position vector :inline :offset-assert 0)
   (normal   vector :inline :offset-assert 16)
   (valid?   basic          :offset-assert 32)
   (pat      uint32         :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype gekko (nav-enemy)
  ((shadow-spot     gekko-shadow-spot :inline :offset-assert 620)
   (foot            UNKNOWN           4       :offset-assert 668)
   (rot-matrix      matrix            :inline :offset-assert 1052)
   (gspot-normal    vector            :inline :offset-assert 1116)
   (tilt-quat       quaternion        :inline :offset-assert 1132)
   (dest-to-me-dir  vector            :inline :offset-assert 1148)
   (turn-face-point vector            :inline :offset-assert 1164)
   (flags           gekko-flag                :offset-assert 1180)
   (attack-time     uint64                    :offset-assert 1188)
   (last-turn-time  uint64                    :offset-assert 1196)
   (fade            float                     :offset-assert 1204)
   (rot-mult        float                     :offset-assert 1208)
   (move-speed      float                     :offset-assert 1212)
   (move-decel      float                     :offset-assert 1216)
   (turn-next-state basic                     :offset-assert 1220)
   (path-wall       basic                     :offset-assert 1224)
   (scared-timer    uint64                    :offset-assert 1228)
   (scale           float                     :offset-assert 1236)
   (probe-len       float                     :offset-assert 1240)
   )
  :method-count-assert 209
  :size-assert         #x4e0
  :flag-assert         #xd1046004e0
  ;; field gekko-flag is likely a value type.
  (:methods
    (gekko-method-202 () none) ;; 202
    (gekko-method-203 () none) ;; 203
    (gekko-method-204 () none) ;; 204
    (gekko-method-205 () none) ;; 205
    (gekko-method-206 () none) ;; 206
    (gekko-method-207 () none) ;; 207
    (gekko-method-208 () none) ;; 208
    )
  (:state-methods
    knocked-recover ;; 32
    knocked ;; 31
    jump ;; 44
    turn-quick ;; 201
    turn ;; 200
    attack ;; 199
    pre-attack ;; 198
    hostile ;; 38
    idle ;; 33
    active-wall ;; 190
    active ;; 34
    notice ;; 35
    hostile-wall ;; 191
    turn-wall ;; 192
    flee ;; 36
    attack-wall ;; 193
    stare ;; 37
    knocked-wall ;; 194
    jump-off-wall ;; 195
    jump-off-wall-falling ;; 196
    jump-off-wall-recover ;; 197
    )
  )
|#

#|
(deftype gecko (gekko)
  ()
  :method-count-assert 209
  :size-assert         #x4e0
  :flag-assert         #xd1046004e0
  )
|#

;; (define-extern *gekko-ik-setup* object)
;; (define-extern *gekko-foot-offset* array)
;; (define-extern *fact-info-gekko-defaults* fact-info-enemy-defaults)
;; (define-extern *gekko-nav-enemy-info* nav-enemy-info)
;; (define-extern hostile-wall-trans function)
;; (define-extern gekko-stare-code function)
;; (define-extern gekko-foot-rot-handler function)
;; (define-extern gekko-postbind function)
;; (define-extern gekko-postbind-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rat                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rat (nav-enemy)
  ((init-quat           quaternion :inline :offset-assert 624)
   (roll-transform      transformq :inline :offset-assert 640)
   (face-dir            vector     :inline :offset-assert 688)
   (flee-focus-pos      vector     :inline :offset-assert 704)
   (wheel-actor         basic              :offset-assert 720)
   (permanently-scared  basic              :offset-assert 724)
   (slide-sound-id      uint32             :offset-assert 728)
   (scared-timer        uint64             :offset-assert 736)
   (scared-interval     uint64             :offset-assert 744)
   (return-to-nav-mesh? basic              :offset-assert 752)
   )
  :method-count-assert 198
  :size-assert         #x2f4
  :flag-assert         #xc6028002f4
  (:methods
    (rat-method-195 () none) ;; 195
    )
  (:state-methods
    wheel-die ;; 197
    running-in-wheel ;; 196
    knocked-recover ;; 32
    idle ;; 33
    active ;; 34
    wait-by-wheel-seek ;; 190
    ambush ;; 47
    active-turn ;; 192
    flee ;; 36
    notice ;; 35
    wait-by-wheel-wait ;; 191
    hostile ;; 38
    flee-stare ;; 194
    attack ;; 193
    stare ;; 37
    knocked ;; 31
    )
  )
|#

#|
(deftype rat-spawner (process)
  ((rats-spawned      uint32  :offset-assert 124)
   (wheel-entity      basic   :offset-assert 128)
   (state-time        uint64  :offset-assert 132)
   (active?           basic   :offset-assert 140)
   (rats-to-spawn     uint32  :offset-assert 144)
   (actor-group       uint32  :offset-assert 148)
   (actor-group-count int32   :offset-assert 152)
   )
  :method-count-assert 16
  :size-assert         #xa0
  :flag-assert         #x10002000a0
  (:state-methods
    die ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *fact-info-rat-defaults* fact-info-enemy-defaults)
;; (define-extern *rat-nav-enemy-info* nav-enemy-info)
;; (define-extern rat-run-code function)
;; (define-extern rat-falling-post function)
;; (define-extern rat-joint-mod-roll function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; monster-frog                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype monster-frog (nav-enemy)
  ()
  :method-count-assert 193
  :size-assert         #x26c
  :flag-assert         #xc101f0026c
  (:state-methods
    turn ;; 192
    hostile ;; 38
    stare ;; 37
    circling ;; 157
    pacing ;; 156
    attack-recover ;; 191
    notice ;; 35
    attack ;; 190
    active ;; 34
    ambush ;; 47
    )
  )
|#

;; (define-extern *fact-info-monster-frog-defaults* fact-info-enemy-defaults)
;; (define-extern *monster-frog-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern monster-frog-hop-slow-code function) ;; (function symbol :behavior monster-frog)
;; (define-extern monster-frog-hop-fast-code function) ;; (function symbol :behavior monster-frog)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mhcityb-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lmhcityb-tfrag-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rublcst-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desbeast-path-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desbeast-node (structure)
  ((position    vector :inline :offset-assert 0)
   (nav-mesh-id uint32         :offset-assert 16)
   (pos-x       float          :offset-assert 0)
   (pos-y       float          :offset-assert 4)
   (pos-z       float          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype desbeast-path (structure)
  ((node-count uint16  :offset-assert 0)
   (node       uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desbeast-path                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *desbeast-path-table* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-beast                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype beast-grenade (projectile-bounce)
  ((blast-radius float  :offset-assert 548)
   )
  :method-count-assert 45
  :size-assert         #x228
  :flag-assert         #x2d01b00228
  (:methods
    (beast-grenade-method-44 () none) ;; 44
    )
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype beast-rider (enemy)
  ()
  :method-count-assert 155
  :size-assert         #x228
  :flag-assert         #x9b01b00228
  (:state-methods
    idle ;; 33
    )
  )
|#

#|
(deftype des-beast (enemy)
  ((path-pos               float                      :offset-assert 552)
   (path-pos-speed         float                      :offset-assert 556)
   (speed-factor           float                      :offset-assert 560)
   (main-speed-factor      float                      :offset-assert 564)
   (main-speed-factor-dest float                      :offset-assert 568)
   (des-path               desbeast-path              :offset-assert 572)
   (angle-turret           float                      :offset-assert 580)
   (angle-gun              float                      :offset-assert 584)
   (run-start-frame        float                      :offset-assert 588)
   (can-turn?              basic                      :offset-assert 592)
   (behind-time            uint64                     :offset-assert 600)
   (target-gun-pos         vector             :inline :offset-assert 608)
   (incoming-attack-id     uint32                     :offset-assert 624)
   (hit-points2            float                      :offset-assert 632)
   (angry                  float                      :offset-assert 636)
   (attack-next?           basic                      :offset-assert 640)
   (minimap                connection-minimap         :offset-assert 644)
   (s-clock                float                      :offset-assert 648)
   (attack-id-time         uint64                     :offset-assert 656)
   (oomass                 float                      :offset-assert 664)
   (jitter                 float                      :offset-assert 668)
   (next-shoot             uint64                     :offset-assert 672)
   (shoot-delay            uint64                     :offset-assert 680)
   (manager                uint64                     :offset-assert 688)
   (hit-part               basic                      :offset-assert 696)
   )
  :method-count-assert 168
  :size-assert         #x2bc
  :flag-assert         #xa8024002bc
  (:methods
    (des-beast-method-160 () none) ;; 160
    (des-beast-method-161 () none) ;; 161
    (des-beast-method-162 () none) ;; 162
    (des-beast-method-163 () none) ;; 163
    (des-beast-method-164 () none) ;; 164
    (des-beast-method-165 () none) ;; 165
    (des-beast-method-166 () none) ;; 166
    (des-beast-method-167 () none) ;; 167
    )
  (:state-methods
    get-up ;; 158
    die ;; 40
    down ;; 157
    die-run ;; 159
    falling ;; 156
    turn-back ;; 155
    idle ;; 33
    )
  )
|#

;; (define-extern *curve-beast-linear-up-red* object)
;; (define-extern *trail-color-curve-grenade* curve-color-fast)
;; (define-extern *curve-grenade-linear-trail* curve2d-fast)
;; (define-extern *beast-grenade-trail* object)
;; (define-extern spt-birth-func-brightness-grenade-bits function)
;; (define-extern spt-birth-func-part-grenade-explosion-bits function)
;; (define-extern *range-grenade-explo-dust-color* curve-color-fast)
;; (define-extern *range-grenade-explo-dust-alpha* curve2d-fast)
;; (define-extern *range-grenade-explo-dust-scale-x* curve2d-fast)
;; (define-extern *range-grenade-explo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-grenade-explo-dust-alpha* curve2d-fast)
;; (define-extern *curve-grenade-explo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-grenade-explo-dust-scale-y* curve2d-fast)
;; (define-extern *part-grenade-explosion-dust-in-curve-settings* object)
;; (define-extern *range-grenade-explo-color* curve-color-fast)
;; (define-extern *range-grenade-explo-alpha* curve2d-fast)
;; (define-extern *range-grenade-explo-scale-x* curve2d-fast)
;; (define-extern *range-grenade-explo-scale-y* curve2d-fast)
;; (define-extern *curve-grenade-explo-alpha* curve2d-fast)
;; (define-extern *curve-grenade-explo-scale-x* curve2d-fast)
;; (define-extern *curve-grenade-explo-scale-y* curve2d-fast)
;; (define-extern *part-grenade-explosion-texture-curve-settings* object)
;; (define-extern spt-birth-func-part-beast-fall-bits function)
;; (define-extern spt-birth-func-part-beast-foot-bits function)
;; (define-extern *beast-rider-enemy-info* enemy-info)
;; (define-extern *des-beast-enemy-info* enemy-info)
;; (define-extern beast-rider-init-by-other function)
;; (define-extern *beast-camera-slow-motion* object)
;; (define-extern des-beast-active-post function)
;; (define-extern des-beast-gun-swivel-callback function)
;; (define-extern des-beast-gun-callback function)
;; (define-extern des-beast-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-flyer                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-flyer-shot (projectile)
  ((tail-pos          vector             :inline :offset-assert 512)
   (hit-pos           vector             :inline :offset-assert 528)
   (turn-quat         quaternion         :inline :offset-assert 544)
   (minimap           connection-minimap         :offset-assert 560)
   (hit-actor?        basic                      :offset-assert 564)
   (last-hit-time     uint64                     :offset-assert 568)
   (snd-whoosh        uint32                     :offset-assert 576)
   (muzzle-flash-part basic                      :offset-assert 580)
   (particle-trail    basic                      :offset-assert 584)
   )
  :method-count-assert 41
  :size-assert         #x24c
  :flag-assert         #x2901d0024c
  (:state-methods
    dissipate ;; 21
    impact ;; 22
    )
  )
|#

#|
(deftype mh-flyer (enemy)
  ((rotation-matrix     matrix             :inline :offset-assert 560)
   (move-curve          cubic-curve        :inline :offset-assert 624)
   (init-pos            vector             :inline :offset-assert 688)
   (move-dest           vector             :inline :offset-assert 704)
   (target-velocity     vector             :inline :offset-assert 720)
   (focus-bullseye-pos  vector             :inline :offset-assert 736)
   (focus-xz-dir        vector             :inline :offset-assert 752)
   (minimap             connection-minimap         :offset-assert 768)
   (des-path            desbeast-path              :offset-assert 772)
   (manager             uint64                     :offset-assert 776)
   (path-pos            uint32                     :offset-assert 784)
   (bank-angle          float                      :offset-assert 788)
   (pitch-angle         float                      :offset-assert 792)
   (missiles-fired      int32                      :offset-assert 796)
   (last-fire-time      uint64                     :offset-assert 800)
   (last-player-screech uint64                     :offset-assert 808)
   (jitter              float                      :offset-assert 816)
   )
  :method-count-assert 159
  :size-assert         #x334
  :flag-assert         #x9f02c00334
  (:methods
    (mh-flyer-method-157 () none) ;; 157
    (mh-flyer-method-158 () none) ;; 158
    )
  (:state-methods
    die ;; 40
    on-path ;; 156
    orbiting ;; 155
    )
  )
|#

;; (define-extern *mh-flyer-curve-linear-up-red* object)
;; (define-extern *mh-flyer-trail-color-curve-missile* curve-color-fast)
;; (define-extern *mh-flyer-curve-missile-linear-trail* curve2d-fast)
;; (define-extern *mh-flyer-missile-trail* object)
;; (define-extern mh-flyer-shot-move function)
;; (define-extern *mh-flyer-shadow-control* shadow-control)
;; (define-extern *mh-flyer-enemy-info* enemy-info)
;; (define-extern mh-flyer-fly-post function)
;; (define-extern get-interp-mod-time function)
;; (define-extern mh-flyer-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; des-beast-2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype quantum-reflector (process-focusable)
  ((rod     uint64              :offset-assert 208)
   (minimap connection-minimap  :offset-assert 216)
   )
  :method-count-assert 31
  :size-assert         #xdc
  :flag-assert         #x1f006000dc
  (:state-methods
    die ;; 30
    idle ;; 29
    hidden ;; 28
    )
  )
|#

#|
(deftype beast-grenade-2 (projectile-bounce)
  ((minimap      connection-minimap  :offset-assert 548)
   (blast-damage basic               :offset-assert 552)
   (blast-radius float               :offset-assert 556)
   )
  :method-count-assert 45
  :size-assert         #x230
  :flag-assert         #x2d01b00230
  (:methods
    (beast-grenade-2-method-44 () none) ;; 44
    )
  (:state-methods
    dissipate ;; 21
    impact ;; 22
    moving ;; 23
    )
  )
|#

#|
(deftype des-beast-2 (des-beast)
  ((focus-vel       vector :inline :offset-assert 704)
   (shot-velocity   vector :inline :offset-assert 720)
   (vehicle-handle  uint64         :offset-assert 736)
   (pickup-handle   uint64         :offset-assert 744)
   (shot-count      uint32         :offset-assert 752)
   (follow-distance float          :offset-assert 756)
   (anim-interp     float          :offset-assert 760)
   (last-beast      basic          :offset-assert 764)
   )
  :method-count-assert 168
  :size-assert         #x300
  :flag-assert         #xa802800300
  (:state-methods
    die ;; 40
    die-run ;; 159
    hostile ;; 38
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; beast-battle-path              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *desbeast-battle-path-table* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; scorpion-gun                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype speecher (structure)
  ((speech-array basic   :offset-assert 0)
   (next-index   uint32  :offset-assert 4)
   )
  :method-count-assert 11
  :size-assert         #x8
  :flag-assert         #xb00000008
  (:methods
    (speecher-method-9 () none) ;; 9
    (speecher-method-10 () none) ;; 10
    )
  )
|#

#|
(deftype hud-scorpion-gun (hud)
  ((offscreen uint8     :offset-assert 2756)
   (alpha     UNKNOWN 2 :offset-assert 2760)
   )
  :method-count-assert 27
  :size-assert         #xad0
  :flag-assert         #x1b0a500ad0
  )
|#

#|
(deftype scorpion-gun-aim (process)
  ((hud-aim    hud-sprite :inline :offset-assert 128)
   (screen-pos vector     :inline :offset-assert 192)
   (color      uint32             :offset-assert 208)
   (draw?      basic              :offset-assert 212)
   )
  :method-count-assert 15
  :size-assert         #xd8
  :flag-assert         #xf006000d8
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype scorpion-gun-shot (projectile)
  ((init-pos       vector :inline :offset-assert 512)
   (init-dir       vector :inline :offset-assert 528)
   (collide-normal vector :inline :offset-assert 544)
   )
  :method-count-assert 41
  :size-assert         #x230
  :flag-assert         #x2901b00230
  )
|#

#|
(deftype scorpion-gun (process-drawable)
  ((aim-dir                vector     :inline :offset-assert 208)
   (scorp-quat             quaternion :inline :offset-assert 224)
   (scorp-smooth-quat      quaternion :inline :offset-assert 240)
   (scorp                  uint64             :offset-assert 256)
   (manager                uint64             :offset-assert 264)
   (hud-aim                uint64             :offset-assert 272)
   (barrel-spin-angle      float              :offset-assert 280)
   (barrel-spin-rate       float              :offset-assert 284)
   (barrel-kick            float              :offset-assert 288)
   (last-fire-time         uint64             :offset-assert 296)
   (valid-target-time      uint64             :offset-assert 304)
   (valid-target-anim-time uint64             :offset-assert 312)
   (target-handle          uint64             :offset-assert 320)
   (rotx                   float              :offset-assert 328)
   (rotxv                  float              :offset-assert 332)
   (rotxvv                 float              :offset-assert 336)
   (roty                   float              :offset-assert 340)
   (rotyv                  float              :offset-assert 344)
   (rotyvv                 float              :offset-assert 348)
   )
  :method-count-assert 26
  :size-assert         #x160
  :flag-assert         #x1a00e00160
  (:methods
    (scorpion-gun-method-24 () none) ;; 24
    (scorpion-gun-method-25 () none) ;; 25
    )
  (:state-methods
    die ;; 23
    firing ;; 22
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype scorpion-gun-spawn-info (structure)
  ((enemy-to-spawn  basic  :offset-assert 0)
   (spawn-u         float  :offset-assert 4)
   (use-path-index  int32  :offset-assert 8)
   (follow-distance float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype scorpion-gun-manager-path (structure)
  ((path     desbeast-path  :offset-assert 0)
   (curr-pos float          :offset-assert 4)
   (next-pos int32          :offset-assert 8)
   (prev-pos int32          :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype scorpion-gun-manager (process)
  ((trans                       vector                    :inline :offset-assert 128)
   (quat                        quaternion                :inline :offset-assert 144)
   (speecher-on-start           speecher                  :inline :offset-assert 160)
   (speecher-on-beast-death     speecher                  :inline :offset-assert 168)
   (speecher-on-damage          speecher                  :inline :offset-assert 176)
   (speecher-on-beast-triggered speecher                  :inline :offset-assert 184)
   (speecher-on-flyer-triggered speecher                  :inline :offset-assert 192)
   (state-time                  uint64                            :offset-assert 200)
   (path-info                   scorpion-gun-manager-path :inline :offset-assert 208)
   (enemy                       UNKNOWN                   36      :offset-assert 224)
   (last-beast                  uint64                            :offset-assert 512)
   (gun                         uint64                            :offset-assert 520)
   (scorp                       uint64                            :offset-assert 528)
   (hud-health                  uint64                            :offset-assert 536)
   (hud-arrows                  uint64                            :offset-assert 544)
   (use-camera                  basic                             :offset-assert 552)
   (last-scorpion-hit-points    float                             :offset-assert 556)
   )
  :method-count-assert 23
  :size-assert         #x230
  :flag-assert         #x1701b00230
  (:methods
    (scorpion-gun-manager-method-21 () none) ;; 21
    (scorpion-gun-manager-method-22 () none) ;; 22
    )
  (:state-methods
    die-fast ;; 20
    restart ;; 19
    fail ;; 18
    shutdown ;; 17
    active ;; 16
    setup ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *desert-beast-speech-list* object)
;; (define-extern scorpion-gun-aim-init-by-other function)
;; (define-extern scorpion-gun-shot-move function)
;; (define-extern scorpion-gun-handler function)
;; (define-extern quaternion-seek-by-angle! function)
;; (define-extern control-post function)
;; (define-extern aim-post function)
;; (define-extern scorpion-gun-init-by-other function)
;; (define-extern *scorpion-beast-spawn-info* array)
;; (define-extern scorpion-gun-manager-handler function)
;; (define-extern beast-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templed-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpl-break-bridge-panel-info (structure)
  ((start-time                uint64         :offset-assert 0)
   (grace                     uint64         :offset-assert 8)
   (fall-rate                 float          :offset-assert 16)
   (fall-rate-realtime        float          :offset-assert 20)
   (time-to-terminal-velocity uint64         :offset-assert 24)
   (tumble-axis               vector :inline :offset-assert 32)
   (tumble-rate-norm          float          :offset-assert 48)
   (tumble-rate-slow          float          :offset-assert 52)
   (detonate-altitude         float          :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )
|#

#|
(deftype tpl-break-bridge (process-drawable)
  ((panel-jmods          UNKNOWN 21 :offset-assert 208)
   (had-particle-spawned UNKNOWN 21 :offset-assert 1552)
   (panel-quashed        UNKNOWN 21 :offset-assert 1636)
   (spool-sound-id       uint32     :offset-assert 1720)
   )
  :method-count-assert 26
  :size-assert         #x6bc
  :flag-assert         #x1a064006bc
  (:methods
    (tpl-break-bridge-method-23 () none) ;; 23
    (tpl-break-bridge-method-24 () none) ;; 24
    (tpl-break-bridge-method-25 () none) ;; 25
    )
  (:state-methods
    done ;; 22
    collapsing ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-temple-tests-stupid-bridge (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

;; (define-extern *tpl-bbridge-array* array)
;; (define-extern *tpl-bridge-debris-params-arr* array)
;; (define-extern spt-birth-func-brightness-part-temple-bridge-break-dust function)
;; (define-extern tpl-bbridge-panel function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lfacrm2-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-elevator-a (elevator)
  ((mysound uint32  :offset-assert 416)
   )
  :method-count-assert 52
  :size-assert         #x1a4
  :flag-assert         #x34013001a4
  (:state-methods
    dormant ;; 35
    waiting ;; 36
    arrived ;; 38
    running ;; 37
    )
  )
|#

#|
(deftype lfacrm2-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern update-mood-lfacrm2 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; was-pre-game                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype was-pre-game-wave (structure)
  ((event-count-min  int16   :offset-assert 0)
   (event-count-max  int16   :offset-assert 2)
   (bubble-count-min int16   :offset-assert 4)
   (bubble-count-max int16   :offset-assert 6)
   (event-interval   uint16  :offset-assert 8)
   (delay            uint16  :offset-assert 10)
   (gravity-min      meters  :offset-assert 12)
   (gravity-max      meters  :offset-assert 16)
   (beam-offset-max  float   :offset-assert 20)
   (beam-size-min    float   :offset-assert 24)
   (beam-size-max    float   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype was-pre-game-game (structure)
  ((point-win float   :offset-assert 0)
   (miss-max  float   :offset-assert 4)
   (wave      uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype was-pre-beam-info (structure)
  ((index     int32   :offset-assert 0)
   (min       float   :offset-assert 4)
   (size      float   :offset-assert 8)
   (fire-time uint64  :offset-assert 16)
   (beam      uint64  :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (was-pre-beam-info-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype was-pre-beam (process-drawable)
  ((index int32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    attack ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype was-pre-heart (process-drawable)
  ((cur-level int32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype was-pre-game (process-drawable)
  ((task             basic                     :offset-assert 200)
   (hud-score        uint64                    :offset-assert 208)
   (hud-goal         uint64                    :offset-assert 216)
   (hud-miss         uint64                    :offset-assert 224)
   (score            float                     :offset-assert 232)
   (score-time       uint64                    :offset-assert 240)
   (miss-max         int32                     :offset-assert 248)
   (miss-count       int32                     :offset-assert 252)
   (miss-time        uint64                    :offset-assert 256)
   (point-win        float                     :offset-assert 264)
   (game             was-pre-game-game         :offset-assert 268)
   (game-start-time  uint64                    :offset-assert 272)
   (wave-start-time  uint64                    :offset-assert 280)
   (event-start-time uint64                    :offset-assert 288)
   (wave-index       int32                     :offset-assert 296)
   (event-index      int32                     :offset-assert 300)
   (event-count      int32                     :offset-assert 304)
   (beam-clock       float                     :offset-assert 308)
   (speech-time      uint64                    :offset-assert 312)
   (speech-count     int32                     :offset-assert 320)
   (speech-last      UNKNOWN           4       :offset-assert 324)
   (screen-matrix    matrix            :inline :offset-assert 352)
   (screen-scale     vector            :inline :offset-assert 416)
   (spawn-time       uint64                    :offset-assert 432)
   (beam             UNKNOWN           4       :offset-assert 440)
   (heart            uint64                    :offset-assert 568)
   )
  :method-count-assert 34
  :size-assert         #x240
  :flag-assert         #x2201c00240
  (:methods
    (was-pre-game-method-26 () none) ;; 26
    (was-pre-game-method-27 () none) ;; 27
    (was-pre-game-method-28 () none) ;; 28
    (was-pre-game-method-29 () none) ;; 29
    (was-pre-game-method-30 () none) ;; 30
    (was-pre-game-method-31 () none) ;; 31
    (was-pre-game-method-32 () none) ;; 32
    (was-pre-game-method-33 () none) ;; 33
    )
  (:state-methods
    win ;; 25
    lose ;; 24
    active ;; 23
    wait-for-start ;; 22
    idle ;; 20
    hide ;; 21
    )
  )
|#

#|
(deftype pre-game-bubble (process-drawable)
  ((screen-pos        vector :inline :offset-assert 208)
   (bubble-type       int32          :offset-assert 224)
   (bubble-start-time uint64         :offset-assert 232)
   (start-delay       uint64         :offset-assert 240)
   (gravity           meters         :offset-assert 248)
   (dead?             basic          :offset-assert 252)
   )
  :method-count-assert 22
  :size-assert         #x100
  :flag-assert         #x1600800100
  (:state-methods
    fall ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern birth-func-pre-bubble-pop function)
;; (define-extern birth-func-pre-bubble-birth-pop function)
;; (define-extern *pre-game* object)
;; (define-extern *pre-game-fun* object)
;; (define-extern pre-game-bubble-init function)
;; (define-extern was-pre-beam-init function)
;; (define-extern was-pre-heart-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-grunt                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-grunt-anim-info (structure)
  ((anim-index   int32   :offset-assert 0)
   (travel-speed meters  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype mh-grunt-global-info (basic)
  ((patrol-anim UNKNOWN 2 :offset-assert 4)
   (charge-anim UNKNOWN 1 :offset-assert 20)
   (attack-anim UNKNOWN 1 :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype metalhead-grunt (mh-squad-member)
  ((patrol-anim            mh-grunt-anim-info         :offset-assert 1080) ;; grunt-anim-info
   (charge-anim            mh-grunt-anim-info         :offset-assert 1084) ;; grunt-anim-info
   (attack-anim            mh-grunt-anim-info         :offset-assert 1088) ;; grunt-anim-info
   (intro-path             path-control               :offset-assert 1092) ;; guessed by decompiler
   (circle-radial-dist     float                      :offset-assert 244)
   (use-charge-anim-index  int8                       :offset-assert 1100)
   (jumping-ambush-path-pt int8                       :offset-assert 1101)
   (mh-grunt-flags         uint8                      :offset-assert 1102)
   (state-timeout2         uint64                     :offset-assert 1104)
   (next-warn-time         uint64                     :offset-assert 1112) ;; time-frame
   (dest                   vector             :inline :offset-assert 1120)
   (focus-pos              vector             :inline :offset-assert 352)
   )
  :method-count-assert 231
  :size-assert         #x480
  :flag-assert         #xe704000480
  (:methods
    (metalhead-grunt-method-228 () none) ;; 228
    (metalhead-grunt-method-229 () none) ;; 229
    (metalhead-grunt-method-230 () none) ;; 230
    )
  (:state-methods
    in-ditch ;; 192
    wait-for-focus ;; 226
    knocked-recover ;; 32
    spin-attack ;; 227
    attack ;; 222
    hostile ;; 38
    active ;; 34
    jumping-ambush-cont ;; 225
    die-fast ;; 42
    jumping-ambush ;; 224
    stop-chase ;; 158
    falling-ambush ;; 223
    )
  )
|#

;; (define-extern *fact-info-mh-grunt-defaults* fact-info-enemy-defaults)
;; (define-extern *metalhead-grunt-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern *mh-grunt-global-info* mh-grunt-global-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-predator             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-predator-shot (metalhead-shot)
  ()
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype metalhead-predator (mh-squad-member)
  ((los               los-control :inline :offset-assert 1088)
   (want-stop         symbol              :offset-assert 1252) ;; guessed by decompiler
   (target-pos        vector      :inline :offset-assert 1264)
   (curr-node         int32               :offset-assert 1280)
   (hide-pos          vector      :inline :offset-assert 1296)
   (next-change       uint64              :offset-assert 1312) ;; int64
   (shoot-angle       float               :offset-assert 1320) ;; degrees
   (miss-amount       float               :offset-assert 1324)
   (ambient-sound-id  sound-id            :offset-assert 1328) ;; guessed by decompiler
   (shock-effect-time uint64              :offset-assert 1336) ;; time-frame
   (shock-effect-end  uint64              :offset-assert 1344) ;; int64
   (fade              float               :offset-assert 1352)
   (dest-fade         float               :offset-assert 1356)
   )
  :method-count-assert 228
  :size-assert         #x550
  :flag-assert         #xe404d00550
  (:methods
    (metalhead-predator-method-224 () none) ;; 224
    (metalhead-predator-method-225 () none) ;; 225
    (metalhead-predator-method-226 () none) ;; 226
    (metalhead-predator-method-227 () none) ;; 227
    )
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    close-attack ;; 223
    fire ;; 222
    hostile ;; 38
    active ;; 34
    )
  )
|#

;; (define-extern *metalhead-predator-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; terraformer-part               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-ter-wsplash-color* curve-color-fast)
;; (define-extern *range-ter-wsplash-alpha* curve2d-fast)
;; (define-extern *range-ter-wsplash-scale-x* curve2d-fast)
;; (define-extern *range-ter-wsplash-scale-y* curve2d-fast)
;; (define-extern *curve-ter-wsplash-alpha* curve2d-fast)
;; (define-extern *curve-ter-wsplash-scale-x* curve2d-fast)
;; (define-extern *curve-ter-wsplash-scale-y* curve2d-fast)
;; (define-extern *part-ter-water-splash-curve-settings* object)
;; (define-extern *range-ter-splash-color* curve-color-fast)
;; (define-extern *range-ter-splash-alpha* curve2d-fast)
;; (define-extern *range-ter-splash-scale-x* curve2d-fast)
;; (define-extern *range-ter-splash-scale-y* curve2d-fast)
;; (define-extern *curve-ter-splash-alpha* curve2d-fast)
;; (define-extern *curve-ter-splash-scale-x* curve2d-fast)
;; (define-extern *curve-ter-splash-scale-y* curve2d-fast)
;; (define-extern *part-ter-water-splash-center-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; terraformer-setup              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype terraformer-foot-mark-pt (structure)
  ((collision-pt vector :inline :offset-assert 0)
   (normal       vector :inline :offset-assert 16)
   (found?       basic          :offset-assert 32)
   (angle        float          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype terraformer-foot-mark-pt-array (basic)
  ((points        UNKNOWN 20      :offset-assert 16)
   (origin        vector  :inline :offset-assert 976)
   (radius        float           :offset-assert 992)
   (current-point int32           :offset-assert 996)
   )
  :method-count-assert 12
  :size-assert         #x3e8
  :flag-assert         #xc000003e8
  (:methods
    (terraformer-foot-mark-pt-array-method-9 () none) ;; 9
    (terraformer-foot-mark-pt-array-method-10 () none) ;; 10
    (terraformer-foot-mark-pt-array-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype terraformer-node (structure)
  ((position   vector :inline :offset-assert 0)
   (edge-index int16          :offset-assert 16)
   (edge-count int16          :offset-assert 18)
   (pos-x      float          :offset-assert 0)
   (pos-y      float          :offset-assert 4)
   (pos-z      float          :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype terraformer-edge (structure)
  ((dest-node-id uint16  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )
|#

#|
(deftype terraformer-graph (structure)
  ((node-count uint16  :offset-assert 0)
   (edge-count uint16  :offset-assert 2)
   (node       uint32  :offset-assert 4)
   (edge       uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype terraformer-ik-setup (structure)
  ((elbow-index int32  :offset-assert 0)
   (hand-dist   float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype terraformer-foot-lock (structure)
  ((lock         cam-float-seeker :inline :offset-assert 0)
   (old-position vector           :inline :offset-assert 32)
   (old-normal   vector           :inline :offset-assert 48)
   (initialized  basic                    :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype terraformer (process-drawable)
  ((graph                   terraformer-graph         :offset-assert 200)
   (current-node            uint16                    :offset-assert 204)
   (legs                    UNKNOWN           6       :offset-assert 208)
   (mine-timer              uint64                    :offset-assert 256)
   (mines-to-launch         int8                      :offset-assert 264)
   (launch-drones           basic                     :offset-assert 268)
   (old-target-pos          vector            :inline :offset-assert 272)
   (old-target-time         uint64                    :offset-assert 288)
   (older-target-pos        vector            :inline :offset-assert 304)
   (older-target-time       uint64                    :offset-assert 320)
   (anim-speed              float                     :offset-assert 328)
   (spooled-anim            basic                     :offset-assert 332)
   (desired-nav-mesh-index  int8                      :offset-assert 336)
   (current-nav-mesh-index  int8                      :offset-assert 337)
   (mines                   UNKNOWN           10      :offset-assert 344)
   (jumper                  uint64                    :offset-assert 424)
   (drone                   uint64                    :offset-assert 432)
   (drone-time              uint64                    :offset-assert 440)
   (jump-dest               vector            :inline :offset-assert 448)
   (target-rot              matrix            :inline :offset-assert 464)
   (mine-rounds-till-drones int8                      :offset-assert 528)
   )
  :method-count-assert 26
  :size-assert         #x211
  :flag-assert         #x1a01a00211
  (:state-methods
    stand-still-laddie! ;; 22
    idle ;; 23
    scrub-anim ;; 24
    walk ;; 25
    frozen ;; 21
    dormant ;; 20
    )
  )
|#

#|
(deftype terraformer-mine (process-focusable)
  ((src-pos               vector     :inline :offset-assert 208)
   (dest-pos              vector     :inline :offset-assert 224)
   (traj                  trajectory :inline :offset-assert 240)
   (which-trajectory      int8               :offset-assert 280)
   (x-rotate              float              :offset-assert 284)
   (y-rotate              float              :offset-assert 288)
   (trail-part            basic              :offset-assert 292)
   (incoming-sound-played basic              :offset-assert 296)
   (expand-sound-played   basic              :offset-assert 300)
   (exploded              basic              :offset-assert 304)
   )
  :method-count-assert 30
  :size-assert         #x134
  :flag-assert         #x1e00c00134
  (:state-methods
    fly-to-dest ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype terraformer-target (process-focusable)
  ()
  :method-count-assert 29
  :size-assert         #xd0
  :flag-assert         #x1d005000d0
  (:state-methods
    idle ;; 28
    )
  )
|#

#|
(deftype terraformer-leg-minimap-dot (process-drawable)
  ((minimap connection-minimap  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype terraformer-foot-water-splash (structure)
  ((frame float  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype terraformer-leg (process-drawable)
  ((prefix                  basic                         :offset-assert 200)
   (kind                    int8                          :offset-assert 204)
   (side                    int8                          :offset-assert 205)
   (targets                 UNKNOWN               6       :offset-assert 208)
   (mm-handle               uint64                        :offset-assert 256)
   (joint-ik                basic                         :offset-assert 264)
   (foot-lock               terraformer-foot-lock :inline :offset-assert 272)
   (foot-marks              basic                         :offset-assert 340)
   (collision-disable-timer uint64                        :offset-assert 344)
   (foot-up-frame           float                         :offset-assert 352)
   (last-effect             int8                          :offset-assert 356)
   (sand-drop-part          basic                         :offset-assert 360)
   (water-drop-part         basic                         :offset-assert 364)
   (splash-list             basic                         :offset-assert 368)
   (splash-list-index       int8                          :offset-assert 372)
   (stepped-in-water        basic                         :offset-assert 376)
   )
  :method-count-assert 21
  :size-assert         #x17c
  :flag-assert         #x150100017c
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype hud-terraformer (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-terraformer (task-manager)
  ((pilot-mode? basic  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-terraformer-method-32 () none) ;; 32
    )
  )
|#

;; (define-extern *terraformer-shadow-control* shadow-control)
;; (define-extern *terraformer-walk-graph* object)
;; (define-extern *terraformer-ik-setup* object)
;; (define-extern *terraformer-lf-water-splash-list* array)
;; (define-extern *terraformer-lm-water-splash-list* array)
;; (define-extern *terraformer-lr-water-splash-list* array)
;; (define-extern *terraformer-rf-water-splash-list* array)
;; (define-extern *terraformer-rm-water-splash-list* array)
;; (define-extern *terraformer-rr-water-splash-list* array)
;; (define-extern terraformer-leg-minimap-dot-init-by-other function)
;; (define-extern terraformer-mine-init-by-other function)
;; (define-extern terraformer-mine-explode function)
;; (define-extern terraformer-mine-handler function)
;; (define-extern terraformer-target-init-by-other function)
;; (define-extern terraformer-leg-frames-since-lift function)
;; (define-extern terraformer-leg-frames-till-down function)
;; (define-extern terraformer-leg-frames-till-up function)
;; (define-extern terraformer-leg-should-be-up? function)
;; (define-extern terraformer-leg-init-by-other function)
;; (define-extern foot-impact function)
;; (define-extern ik-adjust function) ;; (function float :behavior metalkor-legs)
;; (define-extern terraformer-leg-deadly? function)
;; (define-extern terraformer-leg-update-ik function)
;; (define-extern terraformer-always function)
;; (define-extern find-mine-dest function)
;; (define-extern launch-mine function)
;; (define-extern terraformer-init-mine-vars function)
;; (define-extern terraformer-update-mine-vars function)
;; (define-extern terraformer-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; freehq-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern part-freehq-sphere-vert-line-flicker function)
;; (define-extern birth-func-freehq-sphere function)
;; (define-extern sparticle-kill-at-scale-eqline function)
;; (define-extern sparticle-kill-at-scale-mediumb function)
;; (define-extern sparticle-kill-at-scale function)
;; (define-extern sparticle-kill-at-scale-squares function)
;; (define-extern *range-landscape-scale-x* curve2d-fast)
;; (define-extern *range-landscape-scale-y* curve2d-fast)
;; (define-extern *curve-landscape-scale-x-temp* curve2d-fast)
;; (define-extern *curve-landscape-scale-x* curve2d-fast)
;; (define-extern *curve-landscape-scale-y* curve2d-fast)
;; (define-extern *part-freehq-giant-landscape-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; freehq-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype freehq-sml-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-towera               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *towera-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tower-part                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tower-mood                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tower-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype ltowerb-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern update-mood-ltowerb function)
;; (define-extern init-mood-tower function)
;; (define-extern update-tower-lights function)
;; (define-extern update-mood-tower function)
;; (define-extern *towerb-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tower-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-dark-tower-explo-color* curve-color-fast)
;; (define-extern *range-dark-tower-explo-alpha* curve2d-fast)
;; (define-extern *range-dark-tower-explo-scale-x* curve2d-fast)
;; (define-extern *range-dark-tower-explo-scale-y* curve2d-fast)
;; (define-extern *curve-dark-tower-explo-alpha* curve2d-fast)
;; (define-extern *curve-dark-tower-explo-scale-x* curve2d-fast)
;; (define-extern *curve-dark-tower-explo-scale-y* curve2d-fast)
;; (define-extern *part-dark-tower-explosion-texture-curve-settings* object)
;; (define-extern *range-tower-dust-color* curve-color-fast)
;; (define-extern *range-tower-dust-alpha* curve2d-fast)
;; (define-extern *range-tower-dust-scale-x* curve2d-fast)
;; (define-extern *range-tower-dust-scale-y* curve2d-fast)
;; (define-extern *curve-tower-dust-alpha* curve2d-fast)
;; (define-extern *curve-tower-dust-scale-x* curve2d-fast)
;; (define-extern *curve-tower-dust-scale-y* curve2d-fast)
;; (define-extern *part-hellcat-tower-dust-landing-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tower-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype actor-group-watcher (process)
  ((actor-group       uint32  :offset-assert 124)
   (actor-group-count int32   :offset-assert 128)
   (notify-actor      basic   :offset-assert 132)
   )
  :method-count-assert 16
  :size-assert         #x8c
  :flag-assert         #x100010008c
  (:state-methods
    active ;; 15
    idle ;; 14
    )
  )
|#

#|
(deftype tow-large-plat (process-drawable)
  ((actor-group       uint32  :offset-assert 196)
   (actor-group-count int32   :offset-assert 200)
   (final-y           float   :offset-assert 204)
   (fade-level        float   :offset-assert 208)
   (sound-id          uint32  :offset-assert 212)
   )
  :method-count-assert 26
  :size-assert         #xdc
  :flag-assert         #x1a006000dc
  (:state-methods
    die ;; 25
    trigger-movie ;; 24
    wait-to-trigger-movie ;; 23
    lowered ;; 22
    lower ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tow-energy-bridge (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:state-methods
    active ;; 22
    extending ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tow-spawner (process-drawable)
  ((spawn-time        uint64  :offset-assert 200)
   (spawn-count       int32   :offset-assert 208)
   (spawn-count-final int32   :offset-assert 212)
   (nav-mesh          basic   :offset-assert 216)
   )
  :method-count-assert 27
  :size-assert         #xdc
  :flag-assert         #x1b006000dc
  (:methods
    (tow-spawner-method-25 () none) ;; 25
    (tow-spawner-method-26 () none) ;; 26
    )
  (:state-methods
    done ;; 24
    wait-for-children ;; 23
    spawning ;; 22
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tow-tentacle (process-drawable)
  ((attack-id          int32   :offset-assert 200)
   (no-collision-timer uint64  :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xd8
  :flag-assert         #x15006000d8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-tower-destroy (task-manager)
  ((creak-sound-id       uint32         :offset-assert 240)
   (creak-sound-timer    uint64         :offset-assert 248)
   (creak-sound-duration uint64         :offset-assert 256)
   (goo-sound-id         uint32         :offset-assert 264)
   (goo-sound-timer      uint64         :offset-assert 272)
   (goo-sound-duration   uint64         :offset-assert 280)
   (goo-sound-playing    basic          :offset-assert 288)
   (goo-sound-location   vector :inline :offset-assert 304)
   )
  :method-count-assert 32
  :size-assert         #x140
  :flag-assert         #x2000c00140
  )
|#

;; (define-extern towera-login function)
;; (define-extern towera-logout function)
;; (define-extern towera-activate function)
;; (define-extern wait-for-battle state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-destroy-grid               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype jinx-hud (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype jinx (civilian)
  ((min-speed          float                      :offset-assert 1124)
   (max-speed          float                      :offset-assert 1128)
   (follow-offset      float                      :offset-assert 1132)
   (travel-anim-interp float                      :offset-assert 1136)
   (travel-prev-ry     float                      :offset-assert 1140)
   (travel-prev-ry1    float                      :offset-assert 1144)
   (player-blocking    float                      :offset-assert 1148)
   (follow-dir         vector             :inline :offset-assert 1152)
   (destination        vector             :inline :offset-assert 1168)
   (nav-mesh-aid       uint32                     :offset-assert 1184)
   (health-handle      uint64                     :offset-assert 1192) ;; handle
   (box-time           float                      :offset-assert 1200)
   (attacker-info      city-attacker-info         :offset-assert 1016)
   (mission-squad      basic                      :offset-assert 1020)
   (jinx-flags         uint32                     :offset-assert 1212)
   )
  :method-count-assert 246
  :size-assert         #x4c0
  :flag-assert         #xf6044004c0
  (:methods
    (jinx-method-237 () none) ;; 237
    (jinx-method-240 () none) ;; 240
    (jinx-method-241 () none) ;; 241
    (jinx-method-242 () none) ;; 242
    (jinx-method-243 () none) ;; 243
    (jinx-method-244 () none) ;; 244
    (jinx-method-245 () none) ;; 245
    )
  (:state-methods
    traveling-blocked ;; 234
    do-power-box ;; 239
    die ;; 40
    traveling ;; 235
    exit-vehicle ;; 227
    knocked-recover ;; 32
    go-power-box ;; 238
    board-vehicle ;; 225
    die-fast ;; 42
    move-to-vehicle ;; 224
    waiting-idle ;; 236
    wait-for-ride ;; 223
    )
  )
|#

#|
(deftype task-manager-city-destroy-grid (task-manager)
  ((jinx              uint64         :offset-assert 236)
   (actor-group       uint32         :offset-assert 244)
   (actor-group-count int32          :offset-assert 248)
   (next-box          uint32         :offset-assert 252)
   (arrow-h           uint64         :offset-assert 260)
   (goal-pos          vector :inline :offset-assert 268)
   (goal-pos-front    vector :inline :offset-assert 284)
   (sub-state         uint32         :offset-assert 300)
   (vehicle           uint64         :offset-assert 308)
   (wall-h            uint64         :offset-assert 316)
   (sound-name        basic          :offset-assert 324)
   (id                uint32         :offset-assert 328)
   (delay             uint64         :offset-assert 332)
   (delay-start       uint64         :offset-assert 340)
   (start-time        uint64         :offset-assert 164)
   (end-time          uint64         :offset-assert 356)
   (intro-play?       basic          :offset-assert 364)
   )
  :method-count-assert 34
  :size-assert         #x174
  :flag-assert         #x2201000174
  (:methods
    (task-manager-city-destroy-grid-method-32 () none) ;; 32
    (task-manager-city-destroy-grid-method-33 () none) ;; 33
    )
  (:state-methods
    active ;; 15
    wait ;; 14
    )
  )
|#

#|
(deftype com-power-box (process-drawable)
  ((sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern *jinx-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern *citizen-jinx-global-info* civilian-global-info)
;; (define-extern board-vehicle-get-in-car-jump function)
;; (define-extern board-vehicle-get-in-car-land function)
;; (define-extern board-vehicle-get-in-car-sit function)
;; (define-extern board-vehicle-get-in-car-end function)
;; (define-extern *cty-destroy-grid-kg-squad-member-settings* object)
;; (define-extern *cty-destroy-grid-mh-squad-member-settings* object)
;; (define-extern *jinx-exit-vehicle-speech-index* object)
;; (define-extern *jinx-board-vehicle-speech-index* object)
;; (define-extern *jinx-exit-vehicle-speech* array)
;; (define-extern *jinx-board-vehicle-speech* array)
;; (define-extern *combox-debris-params* debris-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prim-beam                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prim-beam (process-drawable)
  ((strip      basic                      :offset-assert 200)
   (pos0       vector             :inline :offset-assert 208)
   (pos1       vector             :inline :offset-assert 224)
   (appearance prim-beam-settings :inline :offset-assert 240)
   (duration   uint64                     :offset-assert 272)
   )
  :method-count-assert 26
  :size-assert         #x118
  :flag-assert         #x1a00a00118
  (:methods
    (prim-beam-method-22 () none) ;; 22
    (prim-beam-method-23 () none) ;; 23
    (prim-beam-method-24 () none) ;; 24
    (prim-beam-method-25 () none) ;; 25
    )
  (:state-methods
    hidden ;; 21
    active ;; 20
    )
  )
|#

#|
(deftype prim-beam-tracker (prim-beam)
  ((track-obj1   uint64  :offset-assert 280)
   (track-obj2   uint64  :offset-assert 288)
   (track-joint1 int32   :offset-assert 296)
   (track-joint2 int32   :offset-assert 300)
   )
  :method-count-assert 26
  :size-assert         #x130
  :flag-assert         #x1a00b00130
  )
|#

;; (define-extern *default-prim-beam-appearance* object)
;; (define-extern prim-beam-tracker-init-by-other function)
;; (define-extern spawn-prim-beam-tracker function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurd-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype pre-tformer (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype wall-window-big (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype precurd-door-a (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype precur-bridge-path-break (process-drawable)
  ((triggered?        basic          :offset-assert 196)
   (idx               uint8          :offset-assert 200)
   (l-origin          matrix :inline :offset-assert 204)
   (actor-group       uint32         :offset-assert 268)
   (actor-group-count int32          :offset-assert 272)
   (anim-1-time       uint64         :offset-assert 276)
   (delay-time        uint64         :offset-assert 284)
   (debris-handle     uint64         :offset-assert 292)
   )
  :method-count-assert 28
  :size-assert         #x130
  :flag-assert         #x1c00b00130
  (:methods
    (precur-bridge-path-break-method-21 () none) ;; 21
    (precur-bridge-path-break-method-22 () none) ;; 22
    (precur-bridge-path-break-method-23 () none) ;; 23
    (precur-bridge-path-break-method-24 () none) ;; 24
    (precur-bridge-path-break-method-25 () none) ;; 25
    (precur-bridge-path-break-method-26 () none) ;; 26
    (precur-bridge-path-break-method-27 () none) ;; 27
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype precur-bridge-blocks-break (process-drawable)
  ((triggered? basic     :offset-assert 200)
   (idx        uint8     :offset-assert 204)
   (snds       UNKNOWN 5 :offset-assert 208)
   (toe-up?    UNKNOWN 5 :offset-assert 228)
   )
  :method-count-assert 26
  :size-assert         #xf8
  :flag-assert         #x1a008000f8
  (:methods
    (precur-bridge-blocks-break-method-21 () none) ;; 21
    (precur-bridge-blocks-break-method-22 () none) ;; 22
    (precur-bridge-blocks-break-method-23 () none) ;; 23
    (precur-bridge-blocks-break-method-24 () none) ;; 24
    (precur-bridge-blocks-break-method-25 () none) ;; 25
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern pre-tformer-spawn-leg-a function)
;; (define-extern pre-tformer-spawn-leg-b function)
;; (define-extern pre-tformer-spawn-leg-c function)
;; (define-extern pre-tformer-spawn-spike function)
;; (define-extern *precurd-obs-shake-time* object)
;; (define-extern wall-window-big-init-by-other function)
;; (define-extern *precur-blocks-trigger-points* array)
;; (define-extern *precur-path-trigger-points* array)
;; (define-extern *precur-path-2nd-trigger-points* array)
;; (define-extern *precur-trigger-idx* object)
;; (define-extern precur-bridge-reset function)
;; (define-extern precur-bridge-path-trigger function)
;; (define-extern precur-bridge-path-2nd-trigger function)
;; (define-extern precur-bridge-blocks-trigger function)
;; (define-extern precur-trigger-update function)
;; (define-extern *precur-path-delay-time* array)
;; (define-extern *precurd-blow-snd-id* object)
;; (define-extern precur-play-blow-sound function)
;; (define-extern precur-stop-blow-sound function)
;; (define-extern *precurd-panel-tear-off-time* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurd-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype precurd-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern *beam-appearance-1* object)
;; (define-extern *beam-appearance-2* object)
;; (define-extern *beam-appearance-3* object)
;; (define-extern *beam-appearance-4* object)
;; (define-extern *beam-appearance-5* object)
;; (define-extern *beam-appearance-6* object)
;; (define-extern init-mood-precurd function)
;; (define-extern update-mood-precurd function)
;; (define-extern precurd-lightjak-do-effect function)
;; (define-extern precurd-lightjak-stop-effect function)
;; (define-extern *range-precursor-explo-color* curve-color-fast)
;; (define-extern *range-precursor-explo-alpha* curve2d-fast)
;; (define-extern *range-precursor-explo-scale-x* curve2d-fast)
;; (define-extern *range-precursor-explo-scale-y* curve2d-fast)
;; (define-extern *curve-precursor-explo-alpha* curve2d-fast)
;; (define-extern *curve-precursor-explo-scale-x* curve2d-fast)
;; (define-extern *curve-precursor-explo-scale-y* curve2d-fast)
;; (define-extern *part-precursor-ship-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurd-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-precura              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *precura-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precura-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype precura-states (structure)
  ((pulse         pulse-state :inline :offset-assert 0)
   (generator     pulse-state :inline :offset-assert 16)
   (main          float               :offset-assert 32)
   (target-laser  UNKNOWN     2       :offset-assert 36)
   (current-laser UNKNOWN     2       :offset-assert 44)
   (speed-laser   float               :offset-assert 52)
   (target-bomb   float               :offset-assert 56)
   (current-bomb  float               :offset-assert 60)
   (speed-bomb    float               :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )
|#

#|
(deftype precurb-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   (main  float               :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype lprecurc-loader (process)
  ((name             basic                 :offset-assert 0)
   (mask             process-mask          :offset-assert 4)
   (clock            basic                 :offset-assert 8)
   (parent           uint32                :offset-assert 12)
   (brother          uint32                :offset-assert 16)
   (child            uint32                :offset-assert 20)
   (ppointer         uint32                :offset-assert 24)
   (self             basic                 :offset-assert 28)
   (pool             basic                 :offset-assert 32)
   (status           basic                 :offset-assert 36)
   (pid              int32                 :offset-assert 40)
   (main-thread      basic                 :offset-assert 44)
   (top-thread       basic                 :offset-assert 48)
   (entity           basic                 :offset-assert 52)
   (level            basic                 :offset-assert 56)
   (state            basic                 :offset-assert 60)
   (prev-state       basic                 :offset-assert 64)
   (next-state       basic                 :offset-assert 68)
   (state-stack      basic                 :offset-assert 72)
   (trans-hook       basic                 :offset-assert 76)
   (post-hook        basic                 :offset-assert 80)
   (event-hook       basic                 :offset-assert 84)
   (allocated-length int32                 :offset-assert 88)
   (heap-base        uint32                :offset-assert 92)
   (heap-top         uint32                :offset-assert 96)
   (heap-cur         uint32                :offset-assert 100)
   (stack-frame-top  basic                 :offset-assert 104)
   (heap             kheap        :inline  :offset-assert 92)
   (connection-list  connectable  :inline  :offset-assert 108)
   (stack            UNKNOWN      :dynamic :offset-assert 124)
   )
  :method-count-assert 16
  :size-assert         #x80
  :flag-assert         #x1000000080
  (:state-methods
    die ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern init-mood-precura function)
;; (define-extern update-precura-lights function)
;; (define-extern update-mood-precura function)
;; (define-extern set-precura-generator-light! function)
;; (define-extern set-precura-laser-light! function)
;; (define-extern set-precura-bomb-light! function)
;; (define-extern init-mood-precurb function)
;; (define-extern update-mood-precurb function)
;; (define-extern lprecurc-loader-init-by-other function)
;; (define-extern precura-login function)
;; (define-extern precura-activate function)
;; (define-extern precura-deactivate function)
;; (define-extern precura-logout function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precura-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern sparticle-track-joint-xz function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precura-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype precur-switch (process-drawable)
  ((alt-actor basic  :offset-assert 200)
   )
  :method-count-assert 24
  :size-assert         #xcc
  :flag-assert         #x18005000cc
  (:state-methods
    idle-down ;; 23
    going-up ;; 22
    going-down ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-jump-plate (process-drawable)
  ((start-quat quaternion :inline :offset-assert 208)
   (turn-start uint64             :offset-assert 224)
   (angle      float              :offset-assert 232)
   (first?     basic              :offset-assert 236)
   (idx        uint8              :offset-assert 240)
   (sound-id   uint32             :offset-assert 244)
   )
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:state-methods
    turn ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator (process-drawable)
  ((attack-id           uint32  :offset-assert 200)
   (shove-id            uint32  :offset-assert 204)
   (sound-id            uint32  :offset-assert 208)
   (next-lightning-time uint32  :offset-assert 212)
   (shock-distance      float   :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:methods
    (precur-generator-method-22 () none) ;; 22
    )
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator-a (precur-generator)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator-b (precur-generator)
  ()
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator-c (process-drawable)
  ((actor-group         uint32  :offset-assert 196)
   (actor-group-count   int32   :offset-assert 200)
   (next-lightning-time uint32  :offset-assert 204)
   (sound-id            uint32  :offset-assert 208)
   )
  :method-count-assert 22
  :size-assert         #xd8
  :flag-assert         #x16006000d8
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator-d-gem (process-drawable)
  ((ang-vel    float          :offset-assert 200)
   (offset-vec vector :inline :offset-assert 208)
   (init-pos   vector :inline :offset-assert 224)
   (sound-id   uint32         :offset-assert 240)
   )
  :method-count-assert 24
  :size-assert         #xf4
  :flag-assert         #x18008000f4
  (:state-methods
    explode ;; 23
    smoking ;; 22
    orbit-gen ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-generator-d (process-drawable)
  ((actor-group         uint32    :offset-assert 196)
   (actor-group-count   int32     :offset-assert 200)
   (next-lightning-time uint32    :offset-assert 204)
   (proc-handle         UNKNOWN 3 :offset-assert 212)
   (animation-speed     float     :offset-assert 236)
   (sound-id            uint32    :offset-assert 240)
   )
  :method-count-assert 24
  :size-assert         #xf8
  :flag-assert         #x18008000f8
  (:methods
    (precur-generator-d-method-23 () none) ;; 23
    )
  (:state-methods
    explosions ;; 22
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-platform-round (process-drawable)
  ((start-quat       quaternion :inline :offset-assert 208)
   (start-height     float              :offset-assert 224)
   (sound-id         uint32             :offset-assert 228)
   (start-dip-time   float              :offset-assert 232)
   (last-ridden-time float              :offset-assert 236)
   )
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  (:methods
    (precur-platform-round-method-24 () none) ;; 24
    )
  (:state-methods
    rotate-plat ;; 22
    fade-in ;; 23
    hidden-state ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-door-d (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-door-c (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:methods
    (precur-door-c-method-22 () none) ;; 22
    (precur-door-c-method-23 () none) ;; 23
    )
  (:state-methods
    idle ;; 20
    explode ;; 21
    )
  )
|#

#|
(deftype task-manager-precur-tour (task-manager)
  ((hint-type uint8  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf1
  :flag-assert         #x20008000f1
  )
|#

#|
(deftype precura-door-a (process-drawable)
  ((open-test    basic   :offset-assert 200)
   (open-started uint64  :offset-assert 208)
   (do-camera?   basic   :offset-assert 216)
   (open-frame   float   :offset-assert 220)
   (precur-tour? basic   :offset-assert 224)
   )
  :method-count-assert 23
  :size-assert         #xe4
  :flag-assert         #x17007000e4
  ;; field open-test uses ~A with a signed load.
  (:methods
    (precura-door-a-method-22 () none) ;; 22
    )
  (:state-methods
    open ;; 20
    close ;; 21
    )
  )
|#

;; (define-extern spawn-mech-shock-effect function)
;; (define-extern *precur-generator-a-exploder-params* joint-exploder-static-params)
;; (define-extern *precur-generator-b-exploder-params* joint-exploder-static-params)
;; (define-extern *precur-generator-c-exploder-params* joint-exploder-static-params)
;; (define-extern precur-generator-d-gem-init-by-other function)
;; (define-extern *precur-generator-d-exploder-params* joint-exploder-static-params)
;; (define-extern rotate-platform-behavior function)
;; (define-extern *precur-door-d-exploder-params* joint-exploder-static-params)
;; (define-extern precur-door-d-init-by-other function)
;; (define-extern *precur-door-c-exploder-params* joint-exploder-static-params)
;; (define-extern precur-door-c-handler function)
;; (define-extern hint-type->string function)
;; (define-extern precura-do-blur-if-more-than-dist-away function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precura-obs2                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mechblock (process-focusable)
  ((origin         vector :inline :offset-assert 208)
   (drop-point     vector :inline :offset-assert 256)
   (allow-drag?    symbol         :offset-assert 272) ;; guessed by decompiler
   (reset-on-land? symbol         :offset-assert 276) ;; guessed by decompiler
   (nav-mesh       basic          :offset-assert 280)
   (hit-something? symbol         :offset-assert 284) ;; guessed by decompiler
   (attack-id      uint32         :offset-assert 288)
   (next-entity    entity         :offset-assert 292) ;; guessed by decompiler
   )
  :method-count-assert 34
  :size-assert         #x128
  :flag-assert         #x2200b00128
  (:methods
    (mechblock-method-33 () none) ;; 33
    )
  (:state-methods
    fall ;; 31
    drag-object ;; 30
    carry ;; 29
    wait ;; 32
    idle ;; 28
    )
  )
|#

#|
(deftype precur-bomb (mechblock)
  ((bomb-timer             uint32             :offset-assert 296)
   (blink-timer            uint32             :offset-assert 300)
   (blink-rate             float              :offset-assert 304)
   (blink                  basic              :offset-assert 308)
   (collide-timer          uint32             :offset-assert 312)
   (spin-quat              quaternion :inline :offset-assert 320)
   (default-emissive-color vector     :inline :offset-assert 336)
   (hint?                  basic              :offset-assert 352)
   (sound-id               uint32             :offset-assert 356)
   )
  :method-count-assert 39
  :size-assert         #x168
  :flag-assert         #x2700f00168
  (:methods
    (precur-bomb-method-38 () none) ;; 38
    )
  (:state-methods
    explode ;; 35
    fall ;; 31
    carry ;; 29
    spawn-up ;; 36
    pre-spawn-up ;; 37
    idle ;; 28
    ready ;; 34
    )
  )
|#

#|
(deftype precur-box (mechblock)
  ((taskman uint64  :offset-assert 296)
   )
  :method-count-assert 34
  :size-assert         #x130
  :flag-assert         #x2200b00130
  (:state-methods
    idle ;; 28
    )
  )
|#

#|
(deftype precur-bomb-spawner (process-drawable)
  ((proc-handle uint64  :offset-assert 200)
   (hint-mode   uint8   :offset-assert 208)
   )
  :method-count-assert 22
  :size-assert         #xd1
  :flag-assert         #x16006000d1
  (:methods
    (precur-bomb-spawner-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype precur-laser-beam (process-drawable)
  ((laser-dir         vector     :inline :offset-assert 204)
   (attack-id         uint32             :offset-assert 220)
   (org-laser-quat    quaternion :inline :offset-assert 236)
   (on-duration       float              :offset-assert 252)
   (off-duration      float              :offset-assert 256)
   (current-angle     int8               :offset-assert 260)
   (last-attack-time  uint32             :offset-assert 264)
   (counter           uint8              :offset-assert 268)
   (sound-id          uint32             :offset-assert 272)
   (actor-group       uint32             :offset-assert 276)
   (actor-group-count int32              :offset-assert 280)
   )
  :method-count-assert 26
  :size-assert         #x120
  :flag-assert         #x1a00a00120
  (:methods
    (precur-laser-beam-method-24 () none) ;; 24
    (precur-laser-beam-method-25 () none) ;; 25
    )
  (:state-methods
    hide ;; 22
    active ;; 20
    dormant ;; 23
    telegraph ;; 21
    )
  )
|#

#|
(deftype task-manager-precura (task-manager)
  ((part-doom     basic   :offset-assert 240)
   (doom-time     uint64  :offset-assert 248)
   (extra-time    uint64  :offset-assert 256)
   (doom-counter  uint8   :offset-assert 264)
   (faded         uint8   :offset-assert 265)
   (movie-played? basic   :offset-assert 268)
   )
  :method-count-assert 32
  :size-assert         #x110
  :flag-assert         #x2000900110
  )
|#

#|
(deftype precur-spot-shadow-effect (process-drawable)
  ((focal-length    float                       :offset-assert 200)
   (near-clip       float                       :offset-assert 204)
   (far-clip        float                       :offset-assert 208)
   (color           uint32                      :offset-assert 212)
   (pre-flicker-pos vector              :inline :offset-assert 224)
   (jmod-outer      joint-mod-add-local :inline :offset-assert 240)
   (jmod-inner      joint-mod-add-local :inline :offset-assert 304)
   )
  :method-count-assert 24
  :size-assert         #x170
  :flag-assert         #x1800f00170
  (:methods
    (precur-spot-shadow-effect-method-22 () none) ;; 22
    (precur-spot-shadow-effect-method-23 () none) ;; 23
    )
  (:state-methods
    inactive ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-path (process-drawable)
  ((pathb               basic   :offset-assert 200)
   (last-attack-time    uint32  :offset-assert 204)
   (attack-id           uint32  :offset-assert 208)
   (bolt                basic   :offset-assert 212)
   (shock-part-time     uint32  :offset-assert 216)
   (shock-shadow-handle uint64  :offset-assert 224)
   )
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    (precur-path-method-22 () none) ;; 22
    (precur-path-method-23 () none) ;; 23
    )
  (:state-methods
    dormant ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype precur-door-b (com-airlock)
  ((open-test basic  :offset-assert 204)
   )
  :method-count-assert 30
  :size-assert         #x1b4
  :flag-assert         #x1e014001b4
  ;; field open-test uses ~A with a signed load.
  (:state-methods
    open ;; 20
    )
  )
|#

;; (define-extern precur-bomb-bounce-reaction function)
;; (define-extern precur-bomb-handler function)
;; (define-extern precur-bomb-init-by-other function)
;; (define-extern hint-mode->string function)
;; (define-extern *laser-angles-array* array)
;; (define-extern elec-mech function)
;; (define-extern *precura-continue-sphere* object)
;; (define-extern *precura-continue2-sphere* object)
;; (define-extern *pca-sph1* object)
;; (define-extern *pca-sph2* object)
;; (define-extern process-drawable-shock-wave-effect function)
;; (define-extern precur-spot-shadow-effect-init-by-other function)
;; (define-extern precur-spot-shadow-effect-handler function)
;; (define-extern *precur-tour-lightning* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wascitya-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-stad-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype waspala-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desertf-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype des-jump-bridge (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:state-methods
    up ;; 22
    raise ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype des-draw-bridge (process-drawable)
  ((plane vector :inline :offset-assert 208)
   )
  :method-count-assert 26
  :size-assert         #xe0
  :flag-assert         #x1a006000e0
  (:methods
    (des-draw-bridge-method-25 () none) ;; 25
    )
  (:state-methods
    raise ;; 24
    down ;; 23
    lower ;; 22
    dormant ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype des-garage-door (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:state-methods
    closing ;; 23
    opening ;; 22
    open ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern des-garage-door-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; destroy-dark-eco               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-eco-egg (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype lightning-bolt-tower (lightning-bolt)
  ()
  :method-count-assert 23
  :size-assert         #x74
  :flag-assert         #x1700000074
  )
|#

#|
(deftype tower-lightning-disc (structure)
  ((bolt            basic              :offset-assert 0)
   (orient          quaternion :inline :offset-assert 16)
   (cur-state       basic              :offset-assert 32)
   (last-spawn-time uint64             :offset-assert 40)
   (pts             UNKNOWN    8       :offset-assert 48)
   (last-rot-angle  float              :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #xb4
  :flag-assert         #x9000000b4
  )
|#

#|
(deftype dark-eco-orb (process-focusable)
  ((last-attack-id   uint32               :offset-assert 208)
   (hit-points       float                :offset-assert 212)
   (alt-actor        basic                :offset-assert 216)
   (movie?           basic                :offset-assert 220)
   (minimap          connection-minimap   :offset-assert 224)
   (discs            UNKNOWN            2 :offset-assert 240)
   (shock-sound      uint32               :offset-assert 624)
   (plasma-sound     uint32               :offset-assert 628)
   (shock-spawn-time uint64               :offset-assert 632)
   )
  :method-count-assert 32
  :size-assert         #x280
  :flag-assert         #x2002000280
  (:state-methods
    hit ;; 29
    active ;; 28
    die ;; 30
    die-movie ;; 31
    )
  )
|#

#|
(deftype dark-eco-tower (process-drawable)
  ((puffer?     basic   :offset-assert 200)
   (puffer-h    uint64  :offset-assert 208)
   (jump-y      float   :offset-assert 216)
   (jump-z      float   :offset-assert 220)
   (creak-sound basic   :offset-assert 224)
   )
  :method-count-assert 21
  :size-assert         #xe4
  :flag-assert         #x15007000e4
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype tower-wave (structure)
  ((start float  :offset-assert 0)
   (end   float  :offset-assert 4)
   (freq  float  :offset-assert 8)
   (amp   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype task-manager-destroy-darkeco (task-manager)
  ((actor-group       uint32     :offset-assert 236)
   (actor-group-count int32      :offset-assert 240)
   (handles           UNKNOWN 64 :offset-assert 244)
   (orb-handles       UNKNOWN 8  :offset-assert 756)
   (orb-status        UNKNOWN 8  :offset-assert 820)
   (counter           uint32     :offset-assert 852)
   (initial-orb       uint64     :offset-assert 860)
   )
  :method-count-assert 32
  :size-assert         #x368
  :flag-assert         #x2002f00368
  )
|#

#|
(deftype task-manager-dark-punch-training (task-manager)
  ((gui-id uint32  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-dark-punch-training-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype grind-electricity (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *initial-orb-pos* object)
;; (define-extern dark-eco-orb-event-handler function)
;; (define-extern spawn-shock-effect function)
;; (define-extern *dark-lightning-width* curve2d-fast)
;; (define-extern *dark-tower-lightning* object)
;; (define-extern dark-eco-orb-init-by-other function)
;; (define-extern dark-eco-orb-init-by-other-pos-scale function)
;; (define-extern *dark-eco-tower-waves* array)
;; (define-extern dark-eco-tower-callback function)
;; (define-extern dark-eco-tower-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-mood                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype comb-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern init-mood-comb function)
;; (define-extern update-mood-comb function)
;; (define-extern *comb-field-texture-anim-array* texture-anim-array)
;; (define-extern set-comb-field-color! function)
;; (define-extern set-comb-field-flash! function)
;; (define-extern set-comb-field-texture-masks! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-obs                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype comb-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#

#|
(deftype comb-pillar (process-focusable)
  ((center-pos         vector :inline :offset-assert 208)
   (attack-vel         vector :inline :offset-assert 224)
   (exploder-params    basic          :offset-assert 240)
   (exploder-skel      basic          :offset-assert 244)
   (exploder-anim      uint32         :offset-assert 248)
   (hit-points         float          :offset-assert 252)
   (incoming-attack-id int32          :offset-assert 256)
   )
  :method-count-assert 36
  :size-assert         #x104
  :flag-assert         #x2400900104
  (:methods
    (comb-pillar-method-30 () none) ;; 30
    (comb-pillar-method-31 () none) ;; 31
    (comb-pillar-method-32 () none) ;; 32
    (comb-pillar-method-33 () none) ;; 33
    (comb-pillar-method-34 () none) ;; 34
    (comb-pillar-method-35 () none) ;; 35
    )
  (:state-methods
    explode ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype comb-block (process-focusable)
  ((attack-vel         vector  :inline :offset-assert 208)
   (exploder-params    basic           :offset-assert 224)
   (exploder-skel      basic           :offset-assert 228)
   (exploder-anim      uint32          :offset-assert 232)
   (hit-points         float           :offset-assert 236)
   (incoming-attack-id int32           :offset-assert 240)
   (parts              UNKNOWN 4       :offset-assert 244)
   )
  :method-count-assert 36
  :size-assert         #x104
  :flag-assert         #x2400900104
  (:methods
    (comb-block-method-30 () none) ;; 30
    (comb-block-method-31 () none) ;; 31
    (comb-block-method-32 () none) ;; 32
    (comb-block-method-33 () none) ;; 33
    (comb-block-method-34 () none) ;; 34
    (comb-block-method-35 () none) ;; 35
    )
  (:state-methods
    explode ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype comb-energy-ring (process-focusable)
  ((speed          float   :offset-assert 208)
   (hum-id         uint32  :offset-assert 212)
   (bolt           basic   :offset-assert 216)
   (shocked-player basic   :offset-assert 220)
   )
  :method-count-assert 34
  :size-assert         #xe0
  :flag-assert         #x22006000e0
  (:methods
    (comb-energy-ring-method-29 () none) ;; 29
    (comb-energy-ring-method-30 () none) ;; 30
    (comb-energy-ring-method-31 () none) ;; 31
    (comb-energy-ring-method-32 () none) ;; 32
    (comb-energy-ring-method-33 () none) ;; 33
    )
  (:state-methods
    idle ;; 28
    )
  )
|#

#|
(deftype comb-turbo (process-drawable)
  ((touch-time uint64         :offset-assert 200)
   (player-got basic          :offset-assert 208)
   (boost      float          :offset-assert 212)
   (plane      vector :inline :offset-assert 224)
   (mat        matrix :inline :offset-assert 240)
   )
  :method-count-assert 25
  :size-assert         #x130
  :flag-assert         #x1900b00130
  (:methods
    (comb-turbo-method-22 () none) ;; 22
    (comb-turbo-method-23 () none) ;; 23
    (comb-turbo-method-24 () none) ;; 24
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-lightjak-training-shield (task-manager)
  ((gui-id uint32  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-lightjak-training-shield-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *comb-pillar-explode-params* joint-exploder-static-params)
;; (define-extern *comb-block-explode-params* joint-exploder-static-params)
;; (define-extern *comb-energy-ring-lightning-width* curve2d-fast)
;; (define-extern *comb-energy-ring-lightning* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-sentry                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype comb-sentry-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

#|
(deftype comb-sentry (process-focusable)
  ((target-pos         vector :inline :offset-assert 208)
   (up-dir             vector :inline :offset-assert 224)
   (attack-vel         vector :inline :offset-assert 240)
   (exploder-params    basic          :offset-assert 256)
   (exploder-skel      basic          :offset-assert 260)
   (exploder-anim      uint32         :offset-assert 264)
   (target-dist        float          :offset-assert 268)
   (path-t             float          :offset-assert 272)
   (path-dt            float          :offset-assert 276)
   (hit-points         float          :offset-assert 280)
   (incoming-attack-id int32          :offset-assert 284)
   (angle              float          :offset-assert 288)
   (spin               float          :offset-assert 292)
   (shooting           basic          :offset-assert 296)
   (should-attack      basic          :offset-assert 300)
   (i-barrel           int8           :offset-assert 304)
   (hum-id             uint32         :offset-assert 308)
   (shot-time          uint64         :offset-assert 312)
   (attack-time        uint64         :offset-assert 320)
   (in-range-time      uint64         :offset-assert 328)
   (player-vehicle     uint64         :offset-assert 336)
   )
  :method-count-assert 40
  :size-assert         #x158
  :flag-assert         #x2800e00158
  (:methods
    (comb-sentry-method-31 () none) ;; 31
    (comb-sentry-method-32 () none) ;; 32
    (comb-sentry-method-33 () none) ;; 33
    (comb-sentry-method-34 () none) ;; 34
    (comb-sentry-method-35 () none) ;; 35
    (comb-sentry-method-36 () none) ;; 36
    (comb-sentry-method-37 () none) ;; 37
    (comb-sentry-method-38 () none) ;; 38
    (comb-sentry-method-39 () none) ;; 39
    )
  (:state-methods
    explode ;; 30
    path-follow ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype comb-sentinel (comb-sentry)
  ()
  :method-count-assert 40
  :size-assert         #x158
  :flag-assert         #x2800e00158
  )
|#

#|
(deftype rail-sentinel (comb-sentry)
  ()
  :method-count-assert 40
  :size-assert         #x158
  :flag-assert         #x2800e00158
  )
|#

;; (define-extern *comb-sentry-explode-params* joint-exploder-static-params)
;; (define-extern *comb-sentry-glow-template* object)
;; (define-extern *comb-sentry-glow-ring-template* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-field                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype comb-field (process-drawable)
  ((pass               int32          :offset-assert 200)
   (incoming-attack-id uint32         :offset-assert 204)
   (next-message-time  uint64         :offset-assert 208)
   (message            int32          :offset-assert 216)
   (plane              plane  :inline :offset-assert 224)
   (color              vector :inline :offset-assert 240)
   (target-pos         vector :inline :offset-assert 256)
   (hum-sound-id       uint32         :offset-assert 272)
   (flash              float          :offset-assert 276)
   (touch-count        int32          :offset-assert 280)
   (touch-time         uint64         :offset-assert 288)
   (breach             basic          :offset-assert 296)
   )
  :method-count-assert 24
  :size-assert         #x12c
  :flag-assert         #x1800b0012c
  (:methods
    (comb-field-method-21 () none) ;; 21
    (comb-field-method-22 () none) ;; 22
    (comb-field-method-23 () none) ;; 23
    )
  (:state-methods
    idle-close ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-scenes                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern comb-lightjak-do-effect function)
;; (define-extern death-precursor death-info) ;; death-info
;; (define-extern start-precursor-effect function) ;; (function manipy none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; h-sled                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-sled-health (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype pre-sled (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14005000c8
  )
|#

#|
(deftype sled-shot (projectile)
  ((tail-pos vector :inline :offset-assert 512)
   )
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype h-sled-probe-work (structure)
  ((local-pos     vector :inline :offset-assert 0)
   (local-normal  vector :inline :offset-assert 16)
   (world-pos     vector :inline :offset-assert 32)
   (world-normal  vector :inline :offset-assert 48)
   (probe-pos     vector :inline :offset-assert 64)
   (ground-pos    vector :inline :offset-assert 80)
   (ground-normal vector :inline :offset-assert 96)
   (velocity      vector :inline :offset-assert 112)
   (u-dir         vector :inline :offset-assert 128)
   (probe-uu      float          :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )
|#

#|
(deftype h-sled-physics-work (structure)
  ((mat              matrix  :inline :offset-assert 0)
   (force            vector  :inline :offset-assert 64)
   (velocity         vector  :inline :offset-assert 80)
   (world-pos        vector  :inline :offset-assert 96)
   (world-normal     vector  :inline :offset-assert 112)
   (local-pos        vector  :inline :offset-assert 128)
   (steering-axis    vector  :inline :offset-assert 144)
   (lift-dir         vector  :inline :offset-assert 160)
   (normal           vector  :inline :offset-assert 176)
   (tmp              vector  :inline :offset-assert 192)
   (p-body           vector  :inline :offset-assert 208)
   (axis             vector  :inline :offset-assert 224)
   (dir              vector  :inline :offset-assert 240)
   (ground-normal    vector  :inline :offset-assert 256)
   (edges            UNKNOWN 3       :offset-assert 272)
   (edge-dirs        UNKNOWN 3       :offset-assert 320)
   (impulse          float           :offset-assert 368)
   (vel-dot-norm     float           :offset-assert 372)
   (friction-coef    float           :offset-assert 376)
   (speed-factor     float           :offset-assert 380)
   (best-len         float           :offset-assert 384)
   (len              float           :offset-assert 388)
   (i-longest        int8            :offset-assert 392)
   (probe-work-array UNKNOWN 4       :offset-assert 400)
   )
  :method-count-assert 9
  :size-assert         #x410
  :flag-assert         #x900000410
  )
|#

#|
(deftype h-sled (vehicle)
  ((health-hud             uint64          :offset-assert 696)
   (overturned-time        uint64          :offset-assert 704)
   (shoot-time             uint64          :offset-assert 712)
   (shoot-delay            uint16          :offset-assert 720)
   (rider-hand-joint-array UNKNOWN 2       :offset-assert 722)
   (i-barrel               int8            :offset-assert 724)
   (ai-target-speed        float           :offset-assert 728)
   (engine-thrust          float           :offset-assert 732)
   (engine-sound-envelope  float           :offset-assert 736)
   (engine-sound-id        uint32          :offset-assert 740)
   (steer-sound-id         uint32          :offset-assert 744)
   (turbo-sound-id         uint32          :offset-assert 748)
   (engine-sound-envelope  float           :offset-assert 736)
   (in-tunnel              basic           :offset-assert 756)
   (whoosh-time            uint64          :offset-assert 760)
   (parts                  UNKNOWN 4       :offset-assert 768)
   (gravity-dir            vector  :inline :offset-assert 784)
   (path-pos               vector  :inline :offset-assert 800)
   (path-dir               vector  :inline :offset-assert 816)
   (tunnel-dir             vector  :inline :offset-assert 832)
   (prev-tunnel-dir        vector  :inline :offset-assert 848)
   (sum-ground-normal      vector  :inline :offset-assert 864)
   (normal-dir             vector  :inline :offset-assert 880)
   (impact-normal          vector  :inline :offset-assert 896)
   (side-dir               vector  :inline :offset-assert 912)
   (ai-target-pos          vector  :inline :offset-assert 928)
   (whoosh-pos             vector  :inline :offset-assert 944)
   (ground-pos-array       UNKNOWN 4       :offset-assert 960)
   )
  :method-count-assert 153
  :size-assert         #x400
  :flag-assert         #x9903800400
  (:methods
    (h-sled-method-152 () none) ;; 152
    )
  (:state-methods
    player-control ;; 58
    explode ;; 60
    )
  )
|#

;; (define-extern hud-sled-health-spawn function)
;; (define-extern sled-find-mesh-dir function)
;; (define-extern sled-shot-move function)
;; (define-extern sled-shot-reaction function)
;; (define-extern *h-sled-explosion-info* vehicle-explosion-info)
;; (define-extern *h-sled-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comb-travel                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-tube-ride (task-manager)
  ((suck-factor    float          :offset-assert 240)
   (hp-scale       float          :offset-assert 244)
   (intro-sequence basic          :offset-assert 248)
   (outro-sequence basic          :offset-assert 252)
   (no-shoot-time  uint64         :offset-assert 256)
   (end-sphere     sphere :inline :offset-assert 272)
   (end-plane      vector :inline :offset-assert 288)
   (intro-sphere   sphere :inline :offset-assert 304)
   (outro-sphere   sphere :inline :offset-assert 320)
   (intro-target   vector :inline :offset-assert 336)
   (outro-target   vector :inline :offset-assert 352)
   (outro-plane2   vector :inline :offset-assert 368)
   (outro-target2  vector :inline :offset-assert 384)
   )
  :method-count-assert 33
  :size-assert         #x190
  :flag-assert         #x2101100190
  (:methods
    (task-manager-tube-ride-method-32 () none) ;; 32
    )
  (:state-methods
    complete ;; 16
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-comb-travel (task-manager-tube-ride)
  ()
  :method-count-assert 33
  :size-assert         #x190
  :flag-assert         #x2101100190
  (:state-methods
    complete ;; 16
    )
  )
|#

#|
(deftype task-manager-comb-wild-ride (task-manager-tube-ride)
  ()
  :method-count-assert 33
  :size-assert         #x190
  :flag-assert         #x2101100190
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; comba-init                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern comba-login function)
;; (define-extern comba-activate function)
;; (define-extern comba-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-dust-storm              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desert-dust-storm (process)
  ((intensity                float          :offset-assert 128)
   (intensity-rate           float          :offset-assert 132)
   (intensity-target         float          :offset-assert 136)
   (origin                   vector :inline :offset-assert 144)
   (current-wind-angle-speed float          :offset-assert 160)
   (current-wind-angle       float          :offset-assert 164)
   (dest-wind-angle          float          :offset-assert 168)
   (wind-speed               float          :offset-assert 172)
   (dest-wind-speed          float          :offset-assert 176)
   (stretch-val              float          :offset-assert 180)
   (last-hold-time           uint64         :offset-assert 184)
   (wind-intensity           float          :offset-assert 192)
   (new-generate-time        uint64         :offset-assert 200)
   (state-time               uint64         :offset-assert 208)
   (fog-plane-origin         vector :inline :offset-assert 224)
   (fog-plane-dir            vector :inline :offset-assert 240)
   (is-intro?                basic          :offset-assert 256)
   (wind-sound               uint32         :offset-assert 260)
   (enabled-screen-filter?   basic          :offset-assert 264)
   (dust-storm-clock-scalar  float          :offset-assert 268)
   )
  :method-count-assert 21
  :size-assert         #x110
  :flag-assert         #x1500900110
  (:methods
    (desert-dust-storm-method-17 () none) ;; 17
    (desert-dust-storm-method-18 () none) ;; 18
    (desert-dust-storm-method-19 () none) ;; 19
    (desert-dust-storm-method-20 () none) ;; 20
    )
  (:state-methods
    die ;; 16
    hold-pos ;; 15
    track ;; 14
    )
  )
|#

#|
(deftype dust-storm-bank (basic)
  ((spawn-radius      meters  :offset-assert 4)
   (spawn-rand-xz-min meters  :offset-assert 8)
   (spawn-rand-xz-max meters  :offset-assert 12)
   (spawn-rand-y-min  meters  :offset-assert 16)
   (spawn-rand-y-max  meters  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern *duststorm-wind-vec* object)
;; (define-extern *duststorm-wind-vel* object)
;; (define-extern *duststorm-intensity* object)
;; (define-extern *duststorm-stationary?* object)
;; (define-extern *fog-intensity-scalar* object)
;; (define-extern desert-dust-storm-init-by-other function)
;; (define-extern *DUST_STORM-bank* dust-storm-bank)
;; (define-extern sparticle-duststorm-birth-func function)
;; (define-extern sparticle-duststorm-move function)
;; (define-extern compute-wind-angle function)
;; (define-extern create-dust-storm function)
;; (define-extern desert-activate function)
;; (define-extern desert-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; credits-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *credits-ids* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; credits                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; title-obs                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype title-control (process)
  ((selected    int32                       :offset-assert 124)
   (sprites     hud-sprite          2       :offset-assert 140) ;; guessed by decompiler
   (sprite-pos  vector              :inline :offset-assert 268)
   (sprite-draw uint32                      :offset-assert 284)
   (buffer      external-art-buffer 2       :offset-assert 288) ;; guessed by decompiler
   (want        int32               2       :offset-assert 296) ;; guessed by decompiler
   (want-name   string              2       :offset-assert 304) ;; guessed by decompiler
   (have        int32               2       :offset-assert 312) ;; guessed by decompiler
   (draw        int32                       :offset-assert 320)
   (draw-name   string                      :offset-assert 324) ;; guessed by decompiler
   (active      symbol                      :offset-assert 328) ;; guessed by decompiler
   (spark-time  uint64                      :offset-assert 332) ;; time-frame
   (gui-id      sound-id                    :offset-assert 340) ;; guessed by decompiler
   (logo        uint32                      :offset-assert 344)
   )
  :method-count-assert 19
  :size-assert         #x160
  :flag-assert         #x1300e00160
  (:state-methods
    control-spec ;; 18
    scrap-book ;; 17, old: (scrap-book (int) _type_ :state)
    idle ;; 16, old: (idle () _type_ :state)
    wait ;; 15, old: (wait () _type_ :state)
    startup ;; 14, old: (startup () _type_ :state)
    )
  )
|#

#|
(deftype museum-char (structure)
  ((skel                    basic   :offset-assert 0)
   (anim                    uint32  :offset-assert 4)
   (height-min              float   :offset-assert 8)
   (height-max              float   :offset-assert 12)
   (zoom-min                float   :offset-assert 16)
   (zoom-max                float   :offset-assert 20)
   (scale                   float   :offset-assert 24)
   (text-id                 uint32  :offset-assert 28)
   (cloth-reset-time        uint64  :offset-assert 32)
   (use-orient-cloth-reset? basic   :offset-assert 40)
   (outtake-num             uint32  :offset-assert 44)
   (outtake                 basic   :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype hirez-viewer (process-drawable)
  ((angley                  float        :offset-assert 200)
   (anglex                  float        :offset-assert 204)
   (updown                  float        :offset-assert 208)
   (zoom                    float        :offset-assert 212)
   (char                    museum-char  :offset-assert 216)
   (pos-x                   float        :offset-assert 220)
   (dest-pos-x              float        :offset-assert 224)
   (alpha                   float        :offset-assert 228)
   (cloth-reset-time        uint64       :offset-assert 232)
   (use-orient-cloth-reset? basic        :offset-assert 240)
   (id                      uint32       :offset-assert 244)
   (credits                 basic        :offset-assert 248)
   )
  :method-count-assert 21
  :size-assert         #xfc
  :flag-assert         #x15008000fc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype highres-viewer-manager (process)
  ((current    int32   :offset-assert 128)
   (next       int32   :offset-assert 132)
   (handle     uint64  :offset-assert 136)
   (left-right basic   :offset-assert 144)
   (museum     basic   :offset-assert 148)
   (next-time  uint64  :offset-assert 152)
   )
  :method-count-assert 16
  :size-assert         #xa0
  :flag-assert         #x10002000a0
  (:state-methods
    credits ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern title-screen-change function) ;; (function string int string int symbol symbol none :behavior title-control)
;; (define-extern wait-for-press function) ;; (function time-frame time-frame symbol symbol)
;; (define-extern direction-press function)
;; (define-extern title-menu function) ;; (function object :behavior title-control)
;; (define-extern title-fade-out function) ;; (function float none)
;; (define-extern title-progress function) ;; (function symbol none)
;; (define-extern *scrap-book-1* array)
;; (define-extern *scrap-book-2* array)
;; (define-extern title-control-init function) ;; (function none :behavior title-control)
;; (define-extern hirez-viewer-init-by-other function)
;; (define-extern spawn-hirez-viewer function)
;; (define-extern *museum-1* array)
;; (define-extern *museum-2* array)
;; (define-extern *museum-3* array)
;; (define-extern hvm-init-by-other function)
;; (define-extern spawn-hirez-viewer-manager function)
;; (define-extern draw-end-credits function) ;; (function level float symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lfaccar-init                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern lfaccar-activate function)
;; (define-extern lfaccar-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-faccar                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-faccar (wcar-base)
  ((jmod-axles      UNKNOWN 4 :offset-assert 2752)
   (jmod-shock-tops UNKNOWN 4 :offset-assert 2880)
   (jmod-shock-mids UNKNOWN 4 :offset-assert 3008)
   (jmod-antenna    UNKNOWN 4 :offset-assert 3264)
   )
  :method-count-assert 204
  :size-assert         #xd40
  :flag-assert         #xcc0cc00d40
  (:methods
    (v-faccar-method-203 () none) ;; 203
    )
  )
|#

#|
(deftype faccar (w-parking-spot)
  ()
  :method-count-assert 27
  :size-assert         #xf8
  :flag-assert         #x1b008000f8
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onintent-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-bubble-surface-onintent function) ;; (function sparticle-system sparticle-cpuinfo matrix symbol)
;; (define-extern check-onintent-bugs function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onintent-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stadium-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

;; (define-extern update-mood-stadium function) ;; (function mood-context float int none :behavior time-of-day-proc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; arena-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstad-ocean                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-colors-wasstad* object)
;; (define-extern *ocean-near-indices-wasstad* ocean-near-indices)
;; (define-extern *ocean-trans-indices-wasstad* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-wasstad* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-wasstad* ocean-mid-masks)
;; (define-extern *ocean-map-wasstad* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstada-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wstd-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype wstd-arena-plat (base-plat)
  ((sync               sync-paused :inline :offset-assert 272)
   (flags              uint64              :offset-assert 296)
   (ride-timer         uint64              :offset-assert 304)
   (current-pos        float               :offset-assert 312)
   (dest-pos           float               :offset-assert 316)
   (speed              float               :offset-assert 320)
   (y-pos              float               :offset-assert 324)
   (ambient-sound-id   uint32              :offset-assert 328)
   (on-activate        basic               :offset-assert 332)
   (go-pos             float               :offset-assert 336)
   (sound-id           uint32              :offset-assert 340)
   (sound-running-loop basic               :offset-assert 344)
   )
  :method-count-assert 45
  :size-assert         #x15c
  :flag-assert         #x2d00e0015c
  ;; field on-activate uses ~A with a signed load.
  (:methods
    (wstd-arena-plat-method-43 () none) ;; 43
    (wstd-arena-plat-method-44 () none) ;; 44
    )
  (:state-methods
    show ;; 40
    wait-show ;; 41
    go-down ;; 42
    wait ;; 38
    run ;; 39
    active ;; 37
    idle ;; 36
    plat-base-state ;; 35
    )
  )
|#

#|
(deftype wstd-flag-a (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype wstd-blocker (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype crowd-manager (process)
  ((crowd-intensity float          :offset-assert 128)
   (snd-id-1        uint32         :offset-assert 132)
   (snd-id-2        uint32         :offset-assert 136)
   (next-sound      uint64         :offset-assert 144)
   (channel         uint32         :offset-assert 152)
   (dur-sound       uint64         :offset-assert 160)
   (volume-1        float          :offset-assert 168)
   (volume-2        float          :offset-assert 172)
   (trans-1         vector :inline :offset-assert 176)
   (trans-2         vector :inline :offset-assert 192)
   (crowd-int-red   float          :offset-assert 208)
   (trans           vector :inline :offset-assert 224)
   (training?       basic          :offset-assert 240)
   (darkjak?        basic          :offset-assert 244)
   (sid             uint32         :offset-assert 248)
   (volume          float          :offset-assert 252)
   (snd-count       uint32         :offset-assert 256)
   (start-sound     basic          :offset-assert 260)
   )
  :method-count-assert 15
  :size-assert         #x108
  :flag-assert         #xf00900108
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern *range-color-lava-flame* curve-color-fast)
;; (define-extern *range-alpha-lava-flame* curve2d-fast)
;; (define-extern *range-scale-lava-flame-x* curve2d-fast)
;; (define-extern *range-scale-lava-flame-y* curve2d-fast)
;; (define-extern *r-curve-lava-flame* curve2d-fast)
;; (define-extern *g-curve-lava-flame* curve2d-fast)
;; (define-extern *b-curve-lava-flame* curve2d-fast)
;; (define-extern *curve-alpha-lava-flame* curve2d-fast)
;; (define-extern *curve-scale-lava-flame-x* curve2d-fast)
;; (define-extern *curve-scale-lava-flame-y* curve2d-fast)
;; (define-extern *part-wasstada-lava-flame-curve-settings* object)
;; (define-extern *crowd-manager* object)
;; (define-extern *crowd-positions* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstada-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spectator-info (structure)
  ((flags     int32   :offset-assert 0)
   (textures  basic   :offset-assert 4)
   (y-pos     float   :offset-assert 8)
   (delta-y   float   :offset-assert 12)
   (angle     float   :offset-assert 16)
   (hola-time uint64  :offset-assert 24)
   (offset    uint32  :offset-assert 32)
   (speed     uint32  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  ;; field textures uses ~A with a signed load.
  )
|#

#|
(deftype wasstada-crowd (process-drawable)
  ((mat        matrix  :inline :offset-assert 208)
   (spectators UNKNOWN 15      :offset-assert 272)
   (hola       float           :offset-assert 992)
   )
  :method-count-assert 21
  :size-assert         #x3e4
  :flag-assert         #x15037003e4
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *range-color-lava-geyser-flame* curve-color-fast)
;; (define-extern *range-alpha-lava-geyser-flame* curve2d-fast)
;; (define-extern *range-scale-lava-geyser-flame-x* curve2d-fast)
;; (define-extern *range-scale-lava-geyser-flame-y* curve2d-fast)
;; (define-extern *r-curve-lava-geyser-flame* curve2d-fast)
;; (define-extern *g-curve-lava-geyser-flame* curve2d-fast)
;; (define-extern *b-curve-lava-geyser-flame* curve2d-fast)
;; (define-extern *curve-alpha-lava-geyser-flame* curve2d-fast)
;; (define-extern *curve-scale-lava-geyser-flame-x* curve2d-fast)
;; (define-extern *curve-scale-lava-geyser-flame-y* curve2d-fast)
;; (define-extern *part-wasstada-lava-geyser-flame-curve-settings* object)
;; (define-extern *range-color-wasstada-crucible-flame* curve-color-fast)
;; (define-extern *range-alpha-wasstada-crucible-flame* curve2d-fast)
;; (define-extern *range-scale-wasstada-crucible-flame-x* curve2d-fast)
;; (define-extern *range-scale-wasstada-crucible-flame-y* curve2d-fast)
;; (define-extern *r-curve-wasstada-crucible-flame* curve2d-fast)
;; (define-extern *g-curve-wasstada-crucible-flame* curve2d-fast)
;; (define-extern *b-curve-wasstada-crucible-flame* curve2d-fast)
;; (define-extern *curve-alpha-wasstada-crucible-flame* curve2d-fast)
;; (define-extern *curve-wasstada-crucible-flame-x* curve2d-fast)
;; (define-extern *curve-wasstada-crucible-flame-y* curve2d-fast)
;; (define-extern *part-wasstada-crucible-flame-curve-settings* object)
;; (define-extern *range-color-wasstada-bowl-flame* curve-color-fast)
;; (define-extern *range-alpha-wasstada-bowl-flame* curve2d-fast)
;; (define-extern *range-scale-wasstada-bowl-flame-x* curve2d-fast)
;; (define-extern *range-scale-wasstada-bowl-flame-y* curve2d-fast)
;; (define-extern *r-curve-wasstada-bowl-flame* curve2d-fast)
;; (define-extern *g-curve-wasstada-bowl-flame* curve2d-fast)
;; (define-extern *b-curve-wasstada-bowl-flame* curve2d-fast)
;; (define-extern *curve-alpha-wasstada-bowl-flame* curve2d-fast)
;; (define-extern *curve-wasstada-bowl-flame-x* curve2d-fast)
;; (define-extern *curve-wasstada-bowl-flame-y* curve2d-fast)
;; (define-extern *part-wasstada-bowl-flame-curve-settings* object)
;; (define-extern part-wasstada-bird1-path function)
;; (define-extern part-wasstada-bird2-path function)
;; (define-extern part-wasstada-bird3-path function)
;; (define-extern part-wasstada-bird4-path function)
;; (define-extern part-wasstada-bird5-path function)
;; (define-extern *crowd-dudes-position* array)
;; (define-extern *crowd-dudes-textures* array)
;; (define-extern crowd-dude-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstada-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *wasstada-alpha-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstada-mood                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wasstada-states (structure)
  ((flame0 flames-state :inline :offset-assert 0)
   (flame1 flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

;; (define-extern *wasstada-mood-color-table* object)
;; (define-extern *wasstada-mood-fog-table* object)
;; (define-extern update-mood-wasstada function)
;; (define-extern update-mood-copy-wasstada function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factorya-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *factoryb-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factoryb-init                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern factoryb-activate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mhcitya-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lmhcitya-tfrag-texture-anim-array* texture-anim-array)
;; (define-extern *mhcitya-pris-texture-anim-array* texture-anim-array)
;; (define-extern set-mhcity-de-door-skin! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyinda-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ctyinda-steam-particle-list* array)
;; (define-extern birth-func-texture-group-steam-ctyinda function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyinda-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ctyinda-vingate (elec-gate)
  ()
  :method-count-assert 31
  :size-assert         #x200
  :flag-assert         #x1f01800200
  )
|#

#|
(deftype industrial-board-vent (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  )
|#

#|
(deftype ctyinda-evil-streetlamp (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *vingate-elec-gate-params* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kanga-lizard                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype waschase-speech-instance (structure)
  ((speech      uint16  :offset-assert 0)
   (probability float   :offset-assert 4)
   (flags       uint64  :offset-assert 8)
   (play-count  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype waschase-speech-info (structure)
  ((speeches         basic   :offset-assert 0)
   (play-time        uint64  :offset-assert 8)
   (current-random   uint64  :offset-assert 16)
   (minimum-interval uint64  :offset-assert 24)
   (random-interval  uint64  :offset-assert 32)
   (last-played      int8    :offset-assert 40)
   (flags            uint8   :offset-assert 41)
   )
  :method-count-assert 9
  :size-assert         #x2a
  :flag-assert         #x90000002a
  )
|#

#|
(deftype waschase-speech-group (structure)
  ((play-time uint64  :offset-assert 0)
   (info      basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype kanga-lizard (nav-enemy)
  ((minimap            connection-minimap  :offset-assert 620)
   (last-focus-ping    uint64              :offset-assert 624)
   (total-flee-time    uint64              :offset-assert 632)
   (current-flee-start uint64              :offset-assert 640)
   (being-attacked     basic               :offset-assert 648)
   )
  :method-count-assert 193
  :size-assert         #x28c
  :flag-assert         #xc10210028c
  (:state-methods
    knocked ;; 31
    hidden ;; 190
    reinit-if-find-nav-mesh ;; 191
    die-eaten ;; 192
    flee ;; 36
    )
  )
|#

#|
(deftype task-manager-kanga-lizard (task-manager)
  ((manager-entity    basic   :offset-assert 236)
   (check-timer       uint64  :offset-assert 244)
   (main-timer        uint64  :offset-assert 252)
   (actor-group       uint32  :offset-assert 260)
   (actor-group-count int32   :offset-assert 264)
   (dead-mask         uint32  :offset-assert 268)
   (last-eaten-talk   int8    :offset-assert 272)
   (last-die-talk     int8    :offset-assert 273)
   (been-on-flut      basic   :offset-assert 276)
   )
  :method-count-assert 33
  :size-assert         #x11c
  :flag-assert         #x2100a0011c
  (:methods
    (task-manager-kanga-lizard-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *kanga-lizard-speech-list* object)
;; (define-extern *waschase-speech* object)
;; (define-extern reset-waschase-speeches function)
;; (define-extern waschase-play-speech function)
;; (define-extern *kanga-lizard-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hover-nav-lpattack             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lpattack-adjacency* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadiuma-mood                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stadiumb-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

#|
(deftype stadiuma-states (structure)
  ((light       light-state :inline :offset-assert 0)
   (electricity UNKNOWN     2       :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

;; (define-extern update-mood-stadiumb function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern init-mood-stadiuma function)
;; (define-extern update-mood-stadiuma function)
;; (define-extern set-stadiuma-electricity-scale! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype stadium-flag-base (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (stadium-flag-base-method-21 () none) ;; 21
    (stadium-flag-base-method-22 () none) ;; 22
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype stadium-sails-left (stadium-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype stadium-sails-right (stadium-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype rub-dark-jak-door (process-drawable)
  ((played-hint? basic  :offset-assert 200)
   (block?       basic  :offset-assert 204)
   )
  :method-count-assert 23
  :size-assert         #xd0
  :flag-assert         #x17005000d0
  (:methods
    (rub-dark-jak-door-method-22 () none) ;; 22
    )
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype rub-falling-step (process-drawable)
  ((mat matrix :inline :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #x110
  :flag-assert         #x1700900110
  (:state-methods
    fade-in ;; 22
    drop ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype rub-rhino-door (process-focusable)
  ()
  :method-count-assert 34
  :size-assert         #xd0
  :flag-assert         #x22005000d0
  (:methods
    (rub-rhino-door-method-30 () none) ;; 30
    (rub-rhino-door-method-31 () none) ;; 31
    (rub-rhino-door-method-32 () none) ;; 32
    (rub-rhino-door-method-33 () none) ;; 33
    )
  (:state-methods
    explode ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype mh-tower-smoke-stda (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *rub-rhino-door-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadium-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-buggy-door function)
;; (define-extern spt-birth-func-part-buggy-door function)
;; (define-extern *range-sat-explo-fma-color* curve-color-fast)
;; (define-extern *range-sat-explo-fma-alpha* curve2d-fast)
;; (define-extern *range-sat-explo-fma-scale-x* curve2d-fast)
;; (define-extern *range-sat-explo-fma-scale-y* curve2d-fast)
;; (define-extern *curve-sat-explo-fma-alpha* curve2d-fast)
;; (define-extern *curve-sat-explo-fma-scale-x* curve2d-fast)
;; (define-extern *curve-sat-explo-fma-scale-y* curve2d-fast)
;; (define-extern *part-fma-neo-satellite-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rubblea-init                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern rubblea-login function)
;; (define-extern rubblea-activate function)
;; (define-extern rubblea-deactivate function)
;; (define-extern lpattack-login function)
;; (define-extern lpattack-logout function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rubble-texture                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *rubblea-water-texture-anim-array* texture-anim-array)
;; (define-extern *rubblea2-water-texture-anim-array* texture-anim-array)
;; (define-extern *rubbleb-water-texture-anim-array* texture-anim-array)
;; (define-extern *rubblec-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stadiuma-part                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-part-rubble-break-dust function)
;; (define-extern spt-birth-func-brightness-part-rubble-break-dust-trail function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rubble-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-func-match-part-def function)
;; (define-extern spt-func-part-rub-elec-gate function)
;; (define-extern rub-elec-gate-adjust-particles function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rubble-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rub-tower (process-focusable)
  ((last-attack-time   uint64  :offset-assert 208)
   (collision-updated? basic   :offset-assert 216)
   )
  :method-count-assert 35
  :size-assert         #xdc
  :flag-assert         #x23006000dc
  (:methods
    (rub-tower-method-32 () none) ;; 32
    (rub-tower-method-33 () none) ;; 33
    (rub-tower-method-34 () none) ;; 34
    )
  (:state-methods
    fallen ;; 31
    fall ;; 30
    unstable ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype rub-electric-gate-switch (process-focusable)
  ((part-sparks basic  :offset-assert 208)
   )
  :method-count-assert 35
  :size-assert         #xd4
  :flag-assert         #x23006000d4
  (:methods
    (rub-electric-gate-switch-method-31 () none) ;; 31
    (rub-electric-gate-switch-method-32 () none) ;; 32
    (rub-electric-gate-switch-method-33 () none) ;; 33
    (rub-electric-gate-switch-method-34 () none) ;; 34
    )
  (:state-methods
    exploded ;; 30
    explode ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype rub-elec-gate (process-drawable)
  ((path-l             basic   :offset-assert 148)
   (path-r             basic   :offset-assert 196)
   (actor-group        uint32  :offset-assert 200)
   (actor-group-count  int32   :offset-assert 204)
   (width              float   :offset-assert 208)
   (height             float   :offset-assert 212)
   (active?            basic   :offset-assert 216)
   (switch-status      uint8   :offset-assert 220)
   (palette-id         int8    :offset-assert 221)
   (hit-sound-id       uint32  :offset-assert 224)
   (shutoff-delay-time uint64  :offset-assert 228)
   )
  :method-count-assert 23
  :size-assert         #xf0
  :flag-assert         #x17007000f0
  (:methods
    (rub-elec-gate-method-22 () none) ;; 22
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype rub-electric-gate-panel (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (rub-electric-gate-panel-method-21 () none) ;; 21
    (rub-electric-gate-panel-method-22 () none) ;; 22
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype rub-electric-gate-panel-a (rub-electric-gate-panel)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype rub-electric-gate-panel-b (rub-electric-gate-panel)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype rub-electric-gate-panel-c (rub-electric-gate-panel)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype rub-electric-gate-panel-d (rub-electric-gate-panel)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

;; (define-extern rub-tower-event-handler function)
;; (define-extern *rub-electric-gate-switch-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spyder                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spyder-shot (metalhead-shot)
  ()
  :method-count-assert 41
  :size-assert         #x210
  :flag-assert         #x2901900210
  )
|#

#|
(deftype spyder (nav-enemy)
  ((los               los-control           :inline :offset-assert 624)
   (joint             joint-mod-blend-world :inline :offset-assert 800) ;; joint-mod
   (start-pos         vector                :inline :offset-assert 928)
   (focus-pos         vector                :inline :offset-assert 352)
   (face-pos          vector                :inline :offset-assert 960)
   (my-up-vector      vector                :inline :offset-assert 976)
   (status-flags      uint64                        :offset-assert 992) ;; spyder-flags
   (change-dir-timer  uint64                        :offset-assert 1000) ;; time-frame
   (fire-info         vector                2       :offset-assert 1008) ;; guessed by decompiler
   (joint-ik          joint-mod-ik          4       :offset-assert 1040) ;; guessed by decompiler
   (delta-y-ik        float                 4       :offset-assert 1056) ;; guessed by decompiler
   (predator-effect?  symbol                        :offset-assert 1072) ;; guessed by decompiler
   (shock-effect-time uint64                        :offset-assert 1080) ;; time-frame
   (shock-effect-end  uint64                        :offset-assert 1088) ;; time-frame
   (fade              float                         :offset-assert 1096)
   (dest-fade         float                         :offset-assert 1100)
   )
  :method-count-assert 198
  :size-assert         #x450
  :flag-assert         #xc603d00450
  (:methods
    (spyder-method-192 () none) ;; 192
    (spyder-method-193 () none) ;; 193
    (spyder-method-194 () none) ;; 194
    (spyder-method-195 () none) ;; 195
    (spyder-method-196 () none) ;; 196
    (spyder-method-197 () none) ;; 197
    )
  (:state-methods
    victory ;; 39
    knocked ;; 31
    hostile ;; 38
    attack ;; 190
    active ;; 34
    backup ;; 191
    notice ;; 35
    )
  )
|#

;; (define-extern *spyder-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern spyder-travel-post function) ;; (function none :behavior spyder)
;; (define-extern spyder-face-player-post function) ;; (function none :behavior spyder)
;; (define-extern *spyder-ik-limb-setup* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rapid-gunner                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rapid-gunner (nav-enemy)
  ((dest-quat    quaternion :inline :offset-assert 624)
   (turret-pos   vector     :inline :offset-assert 640)
   (turret-actor basic              :offset-assert 656)
   (scared-timer uint64             :offset-assert 664)
   )
  :method-count-assert 197
  :size-assert         #x2a0
  :flag-assert         #xc5022002a0
  (:state-methods
    knocked-recover ;; 32
    attack ;; 196
    turret-get-off ;; 195
    hostile ;; 38
    turret-getting-off ;; 194
    turret-active-shoot ;; 193
    turret-active ;; 192
    turret-get-on ;; 191
    turret-seek ;; 190
    )
  )
|#

;; (define-extern *rapid-gunner-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern rapid-gunner-turret-post function)
;; (define-extern rapid-gunner-turret-code function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dm-mine-spider                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dm-mine-spider (nav-enemy)
  ((change-dir-time uint64  :offset-assert 624)
   (last-change-dir uint64  :offset-assert 632)
   (move-angle      float   :offset-assert 640)
   (heading         basic   :offset-assert 644)
   (size            float   :offset-assert 648)
   (angle-spot      float   :offset-assert 652)
   (trackable?      basic   :offset-assert 656)
   )
  :method-count-assert 194
  :size-assert         #x294
  :flag-assert         #xc202200294
  (:methods
    (dm-mine-spider-method-192 () none) ;; 192
    (dm-mine-spider-method-193 () none) ;; 193
    )
  (:state-methods
    knocked ;; 31
    hostile ;; 38
    ambush ;; 47
    run-stop ;; 190
    attack ;; 191
    )
  )
|#

#|
(deftype dm-mine-spider-spawner (process-focusable)
  ((count-alive     int32   :offset-assert 208)
   (attack-id       uint32  :offset-assert 212)
   (next-spawn-time uint64  :offset-assert 216)
   (alt-actor       basic   :offset-assert 224)
   (nav-id          uint32  :offset-assert 228)
   (num-nav-mesh    int32   :offset-assert 232)
   (count-max       int32   :offset-assert 236)
   (hit-points      int32   :offset-assert 240)
   (nav-sphere      uint64  :offset-assert 248)
   )
  :method-count-assert 34
  :size-assert         #x100
  :flag-assert         #x2200800100
  (:methods
    (dm-mine-spider-spawner-method-30 () none) ;; 30
    (dm-mine-spider-spawner-method-31 () none) ;; 31
    (dm-mine-spider-spawner-method-32 () none) ;; 32
    (dm-mine-spider-spawner-method-33 () none) ;; 33
    )
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern check-drop-level-dm-mine-spider-dirt-rubble function)
;; (define-extern spt-birth-func-brightness-dm-mine-spider function)
;; (define-extern spt-birth-func-part-dm-mine-spider-clumps function)
;; (define-extern spt-func-part-dm-mine-spider-clumps function)
;; (define-extern spt-birth-func-part-dm-mine-spider-clumps-mass function)
;; (define-extern spt-func-part-dm-mine-spider-clumps-mass function)
;; (define-extern spt-birth-func-part-dm-mine-spider-clumps-pop function)
;; (define-extern spt-func-part-dm-mine-spider-clumps-pop function)
;; (define-extern spt-birth-func-part-dm-mine-spider-clumps-stays function)
;; (define-extern spt-func-part-dm-mine-spider-clumps-stays function)
;; (define-extern *dm-mine-spider-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mantis                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mantis-jump-info (structure)
  ((distance    float          :offset-assert 0)
   (search-step uint32         :offset-assert 4)
   (destination vector :inline :offset-assert 16)
   (direction   uint16         :offset-assert 32)
   (start-anim  uint32         :offset-assert 36)
   (air-anim    uint32         :offset-assert 40)
   (land-anim   uint32         :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype mantis (nav-enemy)
  ((base-height  float                    :offset-assert 616)
   (flags        mantis-flag              :offset-assert 620)
   (attack-timer uint64                   :offset-assert 628) ;; time-frame
   (track-timer  uint64                   :offset-assert 636) ;; time-frame
   (gspot-timer  uint64                   :offset-assert 644) ;; time-frame
   (gspot-normal vector           :inline :offset-assert 652)
   (my-up-vector vector           :inline :offset-assert 668)
   (jump         mantis-jump-info :inline :offset-assert 684)
   )
  :method-count-assert 207
  :size-assert         #x2e0
  :flag-assert         #xcf026002e0
  ;; field mantis-flag is likely a value type.
  (:methods
    (mantis-method-195 () none) ;; 195
    (mantis-method-199 () none) ;; 199
    (mantis-method-200 () none) ;; 200
    (mantis-method-201 () none) ;; 201
    (mantis-method-202 () none) ;; 202
    (mantis-method-203 () none) ;; 203
    (mantis-method-204 () none) ;; 204
    (mantis-method-205 () none) ;; 205
    (mantis-method-206 () none) ;; 206
    )
  (:state-methods
    hop-away ;; 198
    roll-left ;; 197
    roll-right ;; 196
    attack1 ;; 192, old: (mantis-method-192 (_type_ vector vector) none)
    attack0 ;; 191, old: (mantis-method-191 (_type_ vector vector) int)
    hostile ;; 38
    ambush-jumping ;; 194, old: (mantis-method-194 (_type_) symbol)
    ambush-crawling ;; 193, old: (mantis-method-193 (_type_ vector) none)
    crawl ;; 190, old: (mantis-method-190 (_type_ vector vector) none)
    ambush ;; 47
    active ;; 34
    )
  )
|#

;; (define-extern *fact-info-mantis-defaults* fact-info-enemy-defaults)
;; (define-extern *mantis-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern mantis-roll-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstadc-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-throne-rog (task-manager)
  ((arrow-h uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype wstd-fight-plat-box (base-plat)
  ((crate-h        uint64  :offset-assert 272)
   (next-lava-part uint64  :offset-assert 280)
   )
  :method-count-assert 41
  :size-assert         #x120
  :flag-assert         #x2900a00120
  (:methods
    (wstd-fight-plat-box-method-37 () none) ;; 37
    (wstd-fight-plat-box-method-38 () none) ;; 38
    (wstd-fight-plat-box-method-39 () none) ;; 39
    (wstd-fight-plat-box-method-40 () none) ;; 40
    )
  (:state-methods
    active ;; 35
    open ;; 36
    )
  )
|#

#|
(deftype wstd-fight-house-a (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    active ;; 20
    open ;; 21
    )
  )
|#

#|
(deftype wstd-fight-plat (base-plat)
  ((basepos          vector  :inline :offset-assert 272)
   (box              UNKNOWN 4       :offset-assert 288)
   (door             UNKNOWN 4       :offset-assert 320)
   (next-crate-spawn uint64          :offset-assert 352)
   (next-box-spawn   int32           :offset-assert 360)
   (delta-y          float           :offset-assert 364)
   (spawn-lava?      basic           :offset-assert 368)
   (next-lava-part   uint64          :offset-assert 376)
   (part-lava-pos    vector  :inline :offset-assert 384)
   (attack-pos       UNKNOWN 8       :offset-assert 400)
   (attack-ang       UNKNOWN 8       :offset-assert 528)
   (cur-point        int32           :offset-assert 560)
   (ambient-sound-id uint32          :offset-assert 564)
   (depth            float           :offset-assert 568)
   (go-up            basic           :offset-assert 572)
   (translate        float           :offset-assert 576)
   (next-lava-sound  uint64          :offset-assert 584)
   (next-alarm-sound uint64          :offset-assert 592)
   (y-offset-box     float           :offset-assert 600)
   )
  :method-count-assert 41
  :size-assert         #x25c
  :flag-assert         #x2901e0025c
  (:methods
    (wstd-fight-plat-method-36 () none) ;; 36
    (wstd-fight-plat-method-39 () none) ;; 39
    (wstd-fight-plat-method-40 () none) ;; 40
    )
  (:state-methods
    go-down ;; 38
    active ;; 37
    plat-base-state ;; 35
    )
  )
|#

#|
(deftype wstd-fight-plat-smlplat (base-plat)
  ((basepos          vector :inline :offset-assert 272)
   (box              uint64         :offset-assert 288)
   (next-crate-spawn uint64         :offset-assert 296)
   (next-box-spawn   int32          :offset-assert 304)
   (delta-y          float          :offset-assert 308)
   (spawn-lava?      basic          :offset-assert 312)
   (next-lava-part   uint64         :offset-assert 320)
   (part-lava-pos    vector :inline :offset-assert 336)
   (ambient-sound-id uint32         :offset-assert 352)
   (depth            float          :offset-assert 356)
   (translate        float          :offset-assert 360)
   (angle-move       float          :offset-assert 364)
   (ride-timer       uint64         :offset-assert 368)
   (lock             basic          :offset-assert 376)
   )
  :method-count-assert 43
  :size-assert         #x17c
  :flag-assert         #x2b0100017c
  (:methods
    (wstd-fight-plat-smlplat-method-36 () none) ;; 36
    (wstd-fight-plat-smlplat-method-41 () none) ;; 41
    (wstd-fight-plat-smlplat-method-42 () none) ;; 42
    )
  (:state-methods
    go-up-fma ;; 40
    go-up ;; 39
    go-down ;; 38
    active ;; 37
    plat-base-state ;; 35
    )
  )
|#

#|
(deftype wstd-fight-plat-large (base-plat)
  ((basepos          vector  :inline :offset-assert 272)
   (box              UNKNOWN 4       :offset-assert 288)
   (door             UNKNOWN 8       :offset-assert 320)
   (next-crate-spawn uint64          :offset-assert 384)
   (next-box-spawn   int32           :offset-assert 392)
   (delta-y          float           :offset-assert 396)
   (spawn-lava?      basic           :offset-assert 400)
   (next-lava-part   uint64          :offset-assert 408)
   (part-lava-pos    vector  :inline :offset-assert 416)
   (attack-pos       UNKNOWN 8       :offset-assert 432)
   (attack-ang       UNKNOWN 8       :offset-assert 560)
   (cur-point        int32           :offset-assert 592)
   (ambient-sound-id uint32          :offset-assert 596)
   (depth            float           :offset-assert 600)
   (go-up            basic           :offset-assert 604)
   (translate        float           :offset-assert 608)
   (next-lava-sound  uint64          :offset-assert 616)
   (next-alarm-sound uint64          :offset-assert 624)
   )
  :method-count-assert 43
  :size-assert         #x278
  :flag-assert         #x2b02000278
  (:methods
    (wstd-fight-plat-large-method-36 () none) ;; 36
    (wstd-fight-plat-large-method-40 () none) ;; 40
    (wstd-fight-plat-large-method-41 () none) ;; 41
    (wstd-fight-plat-large-method-42 () none) ;; 42
    )
  (:state-methods
    end ;; 39
    go-down ;; 38
    active ;; 37
    plat-base-state ;; 35
    )
  )
|#

#|
(deftype house-info (structure)
  ((joint-index uint32  :offset-assert 0)
   (y-angle     float   :offset-assert 4)
   (x-offset    float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype marauder-info (structure)
  ((handle    uint64  :offset-assert 0)
   (vis-point int32   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype task-manager-arena-fight-base (task-manager)
  ((marauder          UNKNOWN 16 :offset-assert 236)
   (last-count        uint32     :offset-assert 492)
   (count-alive       uint32     :offset-assert 496)
   (entity            basic      :offset-assert 52)
   (check-timer       uint64     :offset-assert 508)
   (next-spawn        uint64     :offset-assert 516)
   (count             uint32     :offset-assert 524)
   (angle             uint32     :offset-assert 528)
   (dark              basic      :offset-assert 532)
   (arrow-h           uint64     :offset-assert 540)
   (snd-id            uint32     :offset-assert 548)
   (crowd-intensity   float      :offset-assert 552)
   (next-go-down      uint64     :offset-assert 556)
   (actor-group       uint32     :offset-assert 564)
   (actor-group-count int32      :offset-assert 568)
   (platform          UNKNOWN 4  :offset-assert 572)
   (gui-id            uint32     :offset-assert 604)
   (crate-h           UNKNOWN 3  :offset-assert 612)
   (darkbomb          basic      :offset-assert 636)
   )
  :method-count-assert 37
  :size-assert         #x284
  :flag-assert         #x2502100284
  (:methods
    (task-manager-arena-fight-base-method-32 () none) ;; 32
    (task-manager-arena-fight-base-method-33 () none) ;; 33
    (task-manager-arena-fight-base-method-34 () none) ;; 34
    (task-manager-arena-fight-base-method-35 () none) ;; 35
    (task-manager-arena-fight-base-method-36 () none) ;; 36
    )
  )
|#

#|
(deftype task-manager-arena-gun-training (task-manager)
  ((gui-id  uint32  :offset-assert 240)
   (text-id uint32  :offset-assert 244)
   )
  :method-count-assert 33
  :size-assert         #xf8
  :flag-assert         #x21008000f8
  (:methods
    (task-manager-arena-gun-training-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-arena-gun-training-blue (task-manager-arena-gun-training)
  ()
  :method-count-assert 33
  :size-assert         #x100
  :flag-assert         #x2100800100
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-arena-fight (task-manager-arena-fight-base)
  ((display-fire basic  :offset-assert 644)
   )
  :method-count-assert 40
  :size-assert         #x288
  :flag-assert         #x2802100288
  (:methods
    (task-manager-arena-fight-method-39 () none) ;; 39
    )
  (:state-methods
    throne ;; 38
    go-down ;; 37
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-arena-fight-2 (task-manager-arena-fight-base)
  ((play-hint     basic   :offset-assert 644)
   (hint-time     uint64  :offset-assert 648)
   (dj-train-time uint64  :offset-assert 656)
   (dj-train      uint32  :offset-assert 664)
   )
  :method-count-assert 40
  :size-assert         #x29c
  :flag-assert         #x280220029c
  (:state-methods
    done ;; 38
    go-down ;; 37
    wait-start ;; 39
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-arena-fight-3 (task-manager-arena-fight-2)
  ()
  :method-count-assert 40
  :size-assert         #x29c
  :flag-assert         #x280220029c
  (:state-methods
    wait-start ;; 39
    done ;; 38
    )
  )
|#

;; (define-extern wstd-fight-plat-box-init-by-other function)
;; (define-extern wstd-fight-house-a-init-by-other function)
;; (define-extern *fight-plat-lava-pos* array)
;; (define-extern wstd-fight-plat-init-by-other function)
;; (define-extern wstd-fight-plat-smlplat-init-by-other function)
;; (define-extern wasstadc-tl function)
;; (define-extern wstd-fight-plat-large-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-ladder                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ladder-info (basic)
  ((ladder    uint64         :offset-assert 8)
   (flip      deg            :offset-assert 16)
   (interp    float          :offset-assert 20)
   (start-mat matrix :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )
|#

;; (define-extern *ladder-mods* object)
;; (define-extern target-ladder-stance object)
;; (define-extern target-ladder-walk-up object)
;; (define-extern target-ladder-walk-down object)
;; (define-extern target-ladder-slide-down object)
;; (define-extern target-ladder-switch object)
;; (define-extern target-ladder-jump-off object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ladder                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ladder (process-drawable)
  ((rider-unit      float   :offset-assert 200)
   (rider-time      uint64  :offset-assert 208)
   (art-height      meters  :offset-assert 216)
   (set-height      meters  :offset-assert 220)
   (meters-per-unit meters  :offset-assert 224)
   (meters-per-rung meters  :offset-assert 228)
   (options         uint32  :offset-assert 232)
   )
  :method-count-assert 27
  :size-assert         #xec
  :flag-assert         #x1b007000ec
  (:methods
    (ladder-method-22 () none) ;; 22
    (ladder-method-23 () none) ;; 23
    (ladder-method-24 () none) ;; 24
    (ladder-method-25 () none) ;; 25
    (ladder-method-26 () none) ;; 26
    )
  (:state-methods
    active ;; 21
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lfaccity-mood                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype lfaccity-states (structure)
  ((light     light-state :inline :offset-assert 0)
   (roty      float               :offset-assert 8)
   (rotz      float               :offset-assert 12)
   (rot-bob   float               :offset-assert 16)
   (wobble    float               :offset-assert 20)
   (bob       float               :offset-assert 24)
   (zero-test int32               :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype faccity-pparticle-info (structure)
  ((original-pos vector :inline :offset-assert 0)
   (inited?      basic          :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype faccity-pparticle-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype lfaccity-pparticle-mover (process-drawable)
  ((actor-group       uint32  :offset-assert 196)
   (actor-group-count int32   :offset-assert 200)
   (particles         basic   :offset-assert 204)
   )
  :method-count-assert 22
  :size-assert         #xd4
  :flag-assert         #x16006000d4
  (:methods
    (lfaccity-pparticle-mover-method-21 () none) ;; 21
    )
  (:state-methods
    active ;; 20
    )
  )
|#

;; (define-extern *faccity-part-updater* object)
;; (define-extern update-mood-lfaccity function)
;; (define-extern lfaccity-pparticle-mover-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-sniper-battery             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cty-sniper-button-top (process-drawable)
  ((is-up     basic   :offset-assert 200)
   (colormode uint64  :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:state-methods
    going-down ;; 22
    going-up ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype cty-sniper-button (process-drawable)
  ((stay-down-time uint64  :offset-assert 200)
   (lid            uint64  :offset-assert 208)
   )
  :method-count-assert 26
  :size-assert         #xd8
  :flag-assert         #x1a006000d8
  (:methods
    (cty-sniper-button-method-25 () none) ;; 25
    )
  (:state-methods
    moribund ;; 24
    bail-up ;; 23
    idle-down ;; 22
    going-down ;; 21
    idle-up ;; 20
    )
  )
|#

#|
(deftype cty-sniper-battery (process-focusable)
  ((incoming-attack-id          uint32  :offset-assert 208)
   (actor-group                 uint32  :offset-assert 212)
   (actor-group-count           int32   :offset-assert 216)
   (known-vulnerable-this-frame basic   :offset-assert 220)
   (during-movement-sound       uint32  :offset-assert 224)
   (run-once                    basic   :offset-assert 228)
   (halted                      basic   :offset-assert 232)
   )
  :method-count-assert 33
  :size-assert         #xec
  :flag-assert         #x21007000ec
  (:methods
    (cty-sniper-battery-method-32 () none) ;; 32
    )
  (:state-methods
    explode ;; 31
    die ;; 30
    vulnerable ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern cty-sniper-button-top-handler function)
;; (define-extern cty-sniper-button-top-genpost function)
;; (define-extern cty-sniper-button-top-init-by-other function)
;; (define-extern *cty-sniper-battery-exploder-params* joint-exploder-static-params)
;; (define-extern cty-sniper-battery-handler function)
;; (define-extern cty-sniper-battery-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-sniper-turret              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-city-sniper-fight (task-manager)
  ((sniper-turrets-marker-entity          basic               :offset-assert 236)
   (check-timer                           uint64              :offset-assert 244)
   (actor-group                           uint32              :offset-assert 252)
   (actor-group-count                     int32               :offset-assert 256)
   (cur-group                             int8                :offset-assert 260)
   (win-time                              uint64              :offset-assert 268)
   (music-started                         basic               :offset-assert 276)
   (torn-said-turret-rising               basic               :offset-assert 280)
   (torn-said-dodge                       basic               :offset-assert 284)
   (torn-said-battery-retract             basic               :offset-assert 288)
   (torn-speech-one-down                  basic               :offset-assert 292)
   (dax-said-bop-the-core                 basic               :offset-assert 296)
   (last-torn-speech-time                 uint64              :offset-assert 300)
   (battery-retractions-since-last-kaboom int32               :offset-assert 308)
   (minimap                               connection-minimap  :offset-assert 312)
   )
  :method-count-assert 33
  :size-assert         #x140
  :flag-assert         #x2100c00140
  (:methods
    (task-manager-city-sniper-fight-method-32 () none) ;; 32
    )
  (:state-methods
    wait ;; 14
    active ;; 15
    )
  )
|#

#|
(deftype hud-cty-sniper-fight (hud)
  ((buttons     uint32  :offset-assert 2756)
   (num-buttons int8    :offset-assert 2760)
   )
  :method-count-assert 28
  :size-assert         #xac9
  :flag-assert         #x1c0a500ac9
  (:methods
    (hud-cty-sniper-fight-method-27 () none) ;; 27
    )
  )
|#

#|
(deftype cty-sniper-turret-shot (projectile)
  ((hit-actor? basic          :offset-assert 512)
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype cty-sniper-turret (process-focusable)
  ((los                          los-control            :inline :offset-assert 208)
   (reticle                      uint64                         :offset-assert 376)
   (tank-quat                    quaternion             :inline :offset-assert 384)
   (rotate-quat                  quaternion             :inline :offset-assert 400)
   (rotate-rate                  float                          :offset-assert 416)
   (rotate-mult                  float                          :offset-assert 420)
   (shot-range                   float                          :offset-assert 424)
   (fov-mult                     float                          :offset-assert 428)
   (offset                       vector                 :inline :offset-assert 432)
   (sight-pos                    vector                 :inline :offset-assert 448)
   (firing-sight-pos             vector                 :inline :offset-assert 464)
   (gun-timer                    uint64                         :offset-assert 480)
   (gun-elev-jmod                joint-mod-rotate-world :inline :offset-assert 496)
   (gun-elev-joint-index         int32                          :offset-assert 528)
   (gun-elev-desired-rotation    quaternion             :inline :offset-assert 544)
   (gun-azimuth-jmod             joint-mod-rotate-world :inline :offset-assert 560)
   (gun-azimuth-joint-index      int32                          :offset-assert 592)
   (gun-azimuth-desired-rotation quaternion             :inline :offset-assert 608)
   (gun-elev                     float                          :offset-assert 624)
   (gun-elev-cam                 float                          :offset-assert 628)
   (gun-aims-from-joint          int32                          :offset-assert 632)
   (gun-spread                   float                          :offset-assert 636)
   (gun-current-aim-location     vector                 :inline :offset-assert 640)
   (gun-elbow-jmod               joint-mod-rotate-local :inline :offset-assert 656)
   (gun-shoulder-jmod            joint-mod-rotate-local :inline :offset-assert 688)
   (pos-cam-offset               vector                 :inline :offset-assert 720)
   (flags                        uint16                         :offset-assert 736)
   (turn-sound-id                uint32                         :offset-assert 740)
   (h-reticle-strip              uint64                         :offset-assert 744)
   (minimap                      connection-minimap             :offset-assert 752)
   (actor-group                  uint32                         :offset-assert 756)
   (actor-group-count            int32                          :offset-assert 760)
   (hud-buttons                  uint64                         :offset-assert 768)
   )
  :method-count-assert 42
  :size-assert         #x308
  :flag-assert         #x2a02900308
  (:methods
    (cty-sniper-turret-method-35 () none) ;; 35
    (cty-sniper-turret-method-36 () none) ;; 36
    (cty-sniper-turret-method-37 () none) ;; 37
    (cty-sniper-turret-method-38 () none) ;; 38
    (cty-sniper-turret-method-39 () none) ;; 39
    (cty-sniper-turret-method-40 () none) ;; 40
    (cty-sniper-turret-method-41 () none) ;; 41
    )
  (:state-methods
    explode ;; 34
    die ;; 33
    fire ;; 31
    ready ;; 30
    locked-on ;; 32
    asleep ;; 29
    waiting-for-batteries ;; 28
    )
  )
|#

#|
(deftype simple-prim-turret-reticle (simple-prim)
  ((h-parent-turret uint64  :offset-assert 208)
   )
  :method-count-assert 26
  :size-assert         #xd8
  :flag-assert         #x1a006000d8
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype cty-sniper-turret-reticle (process)
  ((ring-inner               basic     :offset-assert 128)
   (ring-middle              basic     :offset-assert 132)
   (ring-outer               basic     :offset-assert 136)
   (ring-inner-radius        float     :offset-assert 140)
   (ring-middle-radius       float     :offset-assert 144)
   (ring-outer-radius        float     :offset-assert 148)
   (h-parent-turret          uint64    :offset-assert 152)
   (root                     basic     :offset-assert 160)
   (wander-offset            UNKNOWN 2 :offset-assert 176)
   (wander-offset-reset-time uint64    :offset-assert 208)
   (inner-ring-offset        float     :offset-assert 216)
   (middle-ring-offset       float     :offset-assert 220)
   (outer-ring-offset        float     :offset-assert 224)
   (ring-scale-multiplier    float     :offset-assert 228)
   (reticle-looping-sound    uint32    :offset-assert 232)
   (reticle-lockon-sound     uint32    :offset-assert 236)
   (current-color            uint32    :offset-assert 240)
   (current-alpha            uint8     :offset-assert 244)
   (lockon-start-time        uint64    :offset-assert 248)
   (flags                    uint8     :offset-assert 256)
   )
  :method-count-assert 21
  :size-assert         #x101
  :flag-assert         #x1500900101
  (:methods
    (cty-sniper-turret-reticle-method-16 () none) ;; 16
    (cty-sniper-turret-reticle-method-17 () none) ;; 17
    (cty-sniper-turret-reticle-method-18 () none) ;; 18
    (cty-sniper-turret-reticle-method-19 () none) ;; 19
    (cty-sniper-turret-reticle-method-20 () none) ;; 20
    )
  (:state-methods
    lock ;; 15
    idle ;; 14
    )
  )
|#

;; (define-extern *cty-sniper-fight-kg-squad-member-settings* object)
;; (define-extern *range-ftexplo-dust-color* curve-color-fast)
;; (define-extern *range-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-sniper-turret-explosion-dust-in-curve-settings* object)
;; (define-extern *range-ftexplo-color* curve-color-fast)
;; (define-extern *range-ftexplo-alpha* curve2d-fast)
;; (define-extern *range-ftexplo-scale-x* curve2d-fast)
;; (define-extern *range-ftexplo-scale-y* curve2d-fast)
;; (define-extern *curve-ftexplo-alpha* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-x* curve2d-fast)
;; (define-extern *curve-ftexplo-scale-y* curve2d-fast)
;; (define-extern *part-sniper-turret-explosion-texture-curve-settings* object)
;; (define-extern cty-sniper-turret-shot-move function)
;; (define-extern spawn-cty-sniper-turret-projectile function)
;; (define-extern cty-sniper-turret-reticle-init-by-other function)
;; (define-extern sloppy-lead-player-location function)
;; (define-extern cty-sniper-turret-reticle-post function)
;; (define-extern cty-sniper-turret-reticle-handler function)
;; (define-extern *cty-sniper-turret-exploder-params* joint-exploder-static-params)
;; (define-extern citysniper-draw-2d-hud function)
;; (define-extern sniper-turret-post function)
;; (define-extern cty-sniper-turret-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-obs-h                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype shaker (structure)
  ((axis         vector :inline :offset-assert 0)
   (start-time   uint64         :offset-assert 16) ;; time-frame
   (decay-time   float          :offset-assert 24)
   (amplitude    float          :offset-assert 28)
   (freq         float          :offset-assert 32)
   (y-decay-time float          :offset-assert 36)
   (y-amplitude  float          :offset-assert 40)
   (y-freq       float          :offset-assert 44)
   (shake        float          :offset-assert 48)
   (y-shake      float          :offset-assert 52)
   )
  :method-count-assert 10
  :size-assert         #x38
  :flag-assert         #xa00000038
  (:methods
    (shaker-method-9 () none) ;; 9 ;; (shaker-method-9 (_type_) none)
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; eco-green-collider             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype eco-green-collider (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (eco-green-collider-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern eco-green-collider-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-part-neo-spawner-explode-juice function)
;; (define-extern spt-birth-func-brightness-part-forest-leaf-fall function)
;; (define-extern spt-birth-func-part-forest-leaf-fall function)
;; (define-extern spt-forest-check-ground-lie-flat function)
;; (define-extern spt-birth-func-part-forest-leaf-fall-water function)
;; (define-extern spt-check-water-lie-flat function)
;; (define-extern spt-birth-func-brightness-mh-plant-rebirth-dust function)
;; (define-extern spt-birth-func-brightness-mh-plant-rebirth-rocks function)
;; (define-extern spt-birth-func-brightness-mh-plant-rebirth-dirt function)
;; (define-extern spt-birth-func-part-mh-plant-rebirth-dirt function)
;; (define-extern spt-birth-func-part-mh-plant-rebirth-rocks function)
;; (define-extern spt-func-part-mh-plant-rebirth-rocks function)
;; (define-extern spt-func-birth-on-stop function)
;; (define-extern spt-birth-func-brightness-mh-plant-die-juice function)
;; (define-extern spt-birth-func-brightness-for-bridge-bits function)
;; (define-extern spt-birth-func-part-for-bridge-bits function)
;; (define-extern *range-ffexplo-dust-color* curve-color-fast)
;; (define-extern *range-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-for-ring-finder-explosion-dust-in-curve-settings* object)
;; (define-extern *range-ffexplo-color* curve-color-fast)
;; (define-extern *range-ffexplo-alpha* curve2d-fast)
;; (define-extern *range-ffexplo-scale-x* curve2d-fast)
;; (define-extern *range-ffexplo-scale-y* curve2d-fast)
;; (define-extern *curve-ffexplo-alpha* curve2d-fast)
;; (define-extern *curve-ffexplo-scale-x* curve2d-fast)
;; (define-extern *curve-ffexplo-scale-y* curve2d-fast)
;; (define-extern *part-for-ring-finder-explosion-texture-curve-settings* object)
;; (define-extern birth-func-for-ground-dirt-bounce function)
;; (define-extern spt-func-for-ground-dirt-bounce1 function)
;; (define-extern spt-func-for-ground-dirt-bounce2 function)
;; (define-extern spt-birth-func-brightness-for-statue-rocks function)
;; (define-extern spt-birth-func-brightness-for-statue-dirt function)
;; (define-extern spt-birth-func-part-for-statue-rise-dirt function)
;; (define-extern spt-birth-func-part-for-statue-rise-rocks function)
;; (define-extern spt-func-part-for-statue-rise-rocks function)
;; (define-extern spt-birth-func-part-for-statue-rise-rocks-bounce1 function)
;; (define-extern spt-func-part-for-statue-rise-rocks-bounce1 function)
;; (define-extern spt-func-for-ground-dirt-bounce3 function)
;; (define-extern spt-birth-func-part-for-statue-rise-rocks-bounce2 function)
;; (define-extern *range-sat-explo-color* curve-color-fast)
;; (define-extern *range-sat-explo-alpha* curve2d-fast)
;; (define-extern *range-sat-explo-scale-x* curve2d-fast)
;; (define-extern *range-sat-explo-scale-y* curve2d-fast)
;; (define-extern *curve-sat-explo-alpha* curve2d-fast)
;; (define-extern *curve-sat-explo-scale-x* curve2d-fast)
;; (define-extern *curve-sat-explo-scale-y* curve2d-fast)
;; (define-extern *part-for-statue-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-mood                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype forest-states (structure)
  ((light      light-state :inline :offset-assert 0)
   (gun-values UNKNOWN     3       :offset-assert 8)
   (fog-interp float               :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern update-forest-lights function)
;; (define-extern update-mood-forest function) ;; (function mood-context float int none :behavior time-of-day-proc)
;; (define-extern set-forest-gun-flash! function)
;; (define-extern set-forest-fog-interp! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; foresta-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim-for (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-a (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-b (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-c (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-d (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-e (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype water-anim-for-f (water-anim-for)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype for-log (process-drawable)
  ((shakers          UNKNOWN 4 :offset-assert 208)
   (last-ridden-time uint64    :offset-assert 464)
   (water-anim       basic     :offset-assert 472)
   )
  :method-count-assert 25
  :size-assert         #x1dc
  :flag-assert         #x19016001dc
  (:methods
    (for-log-method-22 () none) ;; 22
    (for-log-method-23 () none) ;; 23
    (for-log-method-24 () none) ;; 24
    )
  (:state-methods
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype for-jump-pad (jump-pad)
  ()
  :method-count-assert 30
  :size-assert         #x100
  :flag-assert         #x1e00800100
  )
|#

#|
(deftype for-pillar (process-drawable)
  ((extend-height  meters  :offset-assert 200)
   (id             int32   :offset-assert 204)
   (sound-id       uint32  :offset-assert 208)
   (last-ride-time uint64  :offset-assert 216)
   (ridden?        basic   :offset-assert 224)
   )
  :method-count-assert 25
  :size-assert         #xe4
  :flag-assert         #x19007000e4
  (:methods
    (for-pillar-method-23 () none) ;; 23
    (for-pillar-method-24 () none) ;; 24
    )
  (:state-methods
    complete ;; 22
    rise ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype for-telescope (process-drawable)
  ((sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (for-telescope-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype for-tower (for-pillar)
  ((telescope uint64  :offset-assert 232)
   )
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  (:state-methods
    complete ;; 22
    )
  )
|#

#|
(deftype shoulder-plates (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern ripple-for-water-anim-for ripple-wave-set)
;; (define-extern for-log-callback function)
;; (define-extern for-log-event-handler function)
;; (define-extern for-pillar-event-handler function)
;; (define-extern for-telescope-init-by-other function)
;; (define-extern shoulder-plates-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-bridges                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype for-break-bridge-board (process-drawable)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  (:methods
    (for-break-bridge-board-method-22 () none) ;; 22
    (for-break-bridge-board-method-23 () none) ;; 23
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype for-break-bridge-board-a (for-break-bridge-board)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  )
|#

#|
(deftype for-break-bridge-board-b (for-break-bridge-board)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  )
|#

#|
(deftype for-break-bridge-board-c (for-break-bridge-board)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  )
|#

#|
(deftype for-break-bridge-board-d (for-break-bridge-board)
  ()
  :method-count-assert 24
  :size-assert         #xc8
  :flag-assert         #x18005000c8
  )
|#

;; (define-extern *for-break-bridge-board-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-plant                       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype eco-green-board-hint (process)
  ((state-time uint64  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x88
  :flag-assert         #xf00100088
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype mh-plant (process-focusable)
  ((attack-id      uint32  :offset-assert 208)
   (sound-id       uint32  :offset-assert 212)
   (sub-state      uint32  :offset-assert 216)
   (sub-state-time uint64  :offset-assert 224)
   )
  :method-count-assert 37
  :size-assert         #xe8
  :flag-assert         #x25007000e8
  (:methods
    (mh-plant-method-32 () none) ;; 32
    (mh-plant-method-33 () none) ;; 33
    (mh-plant-method-34 () none) ;; 34
    (mh-plant-method-35 () none) ;; 35
    (mh-plant-method-36 () none) ;; 36
    )
  (:state-methods
    die ;; 31
    repopulate ;; 30
    idle ;; 29
    pop-up ;; 28
    )
  )
|#

;; (define-extern eco-green-board-hint-init-by-other function)
;; (define-extern mh-plant-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-kill-plants             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-forest-plants (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-green-eco-gauge (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype eco-green-trail-tracker (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )
|#

#|
(deftype task-manager-forest-plants (task-manager)
  ((plant-manager-entity basic   :offset-assert 236)
   (actor-group          uint32  :offset-assert 240)
   (actor-group-count    int32   :offset-assert 244)
   (plants               basic   :offset-assert 248)
   (check-timer          uint64  :offset-assert 252)
   (displayed-hint?      basic   :offset-assert 260)
   (trail-handle         uint64  :offset-assert 268)
   (hud-green-eco        uint64  :offset-assert 212)
   (updated-minimap?     basic   :offset-assert 276)
   (cam-setting-timer    uint64  :offset-assert 284)
   )
  :method-count-assert 33
  :size-assert         #x128
  :flag-assert         #x2100b00128
  (:methods
    (task-manager-forest-plants-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *eco-width-curve* curve2d-fast)
;; (define-extern *eco-alpha-curve* curve2d-fast)
;; (define-extern *eco-color-curve-green* curve-color-fast)
;; (define-extern *eco-green-trail* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-texture                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *foresta-water-texture-anim-array* texture-anim-array)
;; (define-extern *forestb-water-texture-anim-array* texture-anim-array)
;; (define-extern *lforplnt-pris-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-ring-chase              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype for-race-ring-finder (process-drawable)
  ((path-pos          float   :offset-assert 200)
   (sound-id          uint32  :offset-assert 204)
   (ring-finder-speed float   :offset-assert 208)
   (part-subsampler   basic   :offset-assert 212)
   )
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (for-race-ring-finder-method-22 () none) ;; 22
    )
  (:state-methods
    die ;; 21
    find ;; 20
    )
  )
|#

#|
(deftype for-race-ring (process-drawable)
  ((mat        matrix :inline :offset-assert 208)
   (taskman    uint64         :offset-assert 272)
   (is-final?  basic          :offset-assert 280)
   (part-final basic          :offset-assert 284)
   )
  :method-count-assert 24
  :size-assert         #x120
  :flag-assert         #x1800a00120
  (:methods
    (for-race-ring-method-23 () none) ;; 23
    )
  (:state-methods
    die ;; 22
    idle ;; 21
    dormant ;; 20
    )
  )
|#

#|
(deftype for-statue (process-drawable)
  ((id        int32   :offset-assert 200)
   (sound-id  uint32  :offset-assert 204)
   (part-eyes basic   :offset-assert 208)
   (alpha     float   :offset-assert 212)
   )
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:methods
    (for-statue-method-27 () none) ;; 27
    (for-statue-method-28 () none) ;; 28
    )
  (:state-methods
    explode ;; 26
    complete ;; 25
    open-eyes ;; 24
    active ;; 23
    rise ;; 22
    idle ;; 21
    dormant ;; 20
    )
  )
|#

#|
(deftype hud-forest-ring-chase (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype forest-path-points-static (structure)
  ((points uint32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype forest-path-array-static (structure)
  ((paths basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype forest-ring-path-control (path-control)
  ()
  :method-count-assert 32
  :size-assert         #x24
  :flag-assert         #x2000000024
  )
|#

#|
(deftype forest-path-array (structure)
  ((paths basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype task-manager-forest-ring-chase (task-manager)
  ((ring-manager-entity basic     :offset-assert 236)
   (actor-group         uint32    :offset-assert 240)
   (actor-group-count   int32     :offset-assert 244)
   (current-statue      uint8     :offset-assert 248)
   (current-ring        uint8     :offset-assert 249)
   (check-timer         uint64    :offset-assert 252)
   (use-camera?         basic     :offset-assert 260)
   (path-ctrl           UNKNOWN 5 :offset-assert 264)
   (ring-finder         uint64    :offset-assert 348)
   (found-ring?         basic     :offset-assert 356)
   (cam-timer           uint64    :offset-assert 364)
   (cam-timer-set?      basic     :offset-assert 372)
   )
  :method-count-assert 33
  :size-assert         #x17c
  :flag-assert         #x210100017c
  (:methods
    (task-manager-forest-ring-chase-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-forest-ring-resolution (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern print-ring-positions function)
;; (define-extern for-race-ring-finder-init-by-other function)
;; (define-extern for-race-ring-cleared? function)
;; (define-extern *for-statue-played-hint?* object)
;; (define-extern *for-statue-debris-params* debris-static-params)
;; (define-extern *for-ring-times* array)
;; (define-extern *forest-path-array-lengths* array)
;; (define-extern *forest-path-point-lengths* array)
;; (define-extern *forest-ring-paths* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; forest-tasks                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-forest-machine (task-manager)
  ((manager-entity          basic   :offset-assert 236)
   (actor-group             uint32  :offset-assert 240)
   (actor-group-count       int32   :offset-assert 244)
   (max-neo-spawned-enemies int32   :offset-assert 248)
   )
  :method-count-assert 34
  :size-assert         #x100
  :flag-assert         #x2200800100
  (:methods
    (task-manager-forest-machine-method-32 () none) ;; 32
    (task-manager-forest-machine-method-33 () none) ;; 33
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-forest-machine-resolution (task-manager)
  ((manager-entity    basic   :offset-assert 236)
   (actor-group       uint32  :offset-assert 240)
   (actor-group-count int32   :offset-assert 244)
   )
  :method-count-assert 32
  :size-assert         #xfc
  :flag-assert         #x20008000fc
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype railx-states-fora (structure)
  ((pulses UNKNOWN     4       :offset-assert 0)
   (blue   pulse-state :inline :offset-assert 0)
   (yellow pulse-state :inline :offset-assert 16)
   (warp   pulse-state :inline :offset-assert 32)
   (spill  pulse-state :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

;; (define-extern set-railx-light-brightness-fora! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hiphog-mirror-wf-pt (structure)
  ((x float  :offset-assert 0)
   (y float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern part-hiphog-sphere-vert-line-flicker function)
;; (define-extern birth-func-hiphog-sphere function)
;; (define-extern birth-func-rotate-minute function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern birth-func-rotate-hour function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern birth-func-rotate-second function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern *hiphog-mirror-sheen-waveform* object) ;; (inline-array ripple-wave)
;; (define-extern hiphog-mirror-sheen-func function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hiphog-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hip-door-b (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype hip-mirror (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern hiphog-activate function) ;; (function vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ltnfxhip-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ltnfxhip-texture-anim-array* texture-anim-array)
;; (define-extern ltnfxhip-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctygenb-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; turtle-training                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype des-train-bollard (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype des-train-barrier (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype des-train-stones (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype turtle-training-goal (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype task-manager-desert-turtle-training (task-manager)
  ((goal-array      UNKNOWN          7       :offset-assert 240)
   (door-plane      vector           :inline :offset-assert 352)
   (start-pos       vector           :inline :offset-assert 368)
   (goal-pos        vector           :inline :offset-assert 384)
   (player-pos      vector           :inline :offset-assert 400)
   (player-vel      vector           :inline :offset-assert 416)
   (player-controls vehicle-controls :inline :offset-assert 432)
   (test-time       uint64                   :offset-assert 456)
   (max-count       int16                    :offset-assert 464)
   (show-message?   basic                    :offset-assert 468)
   )
  :method-count-assert 33
  :size-assert         #x1d8
  :flag-assert         #x21016001d8
  (:methods
    (task-manager-desert-turtle-training-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kleever-rider                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype kleever-rider (process-focusable)
  ((vehicle           uint64         :offset-assert 208)
   (speech-time       uint64         :offset-assert 216)
   (accel             vector :inline :offset-assert 224)
   (accel-factor      vector :inline :offset-assert 240)
   (front-back-interp float          :offset-assert 256)
   (left-right-interp float          :offset-assert 260)
   (up-down-interp    float          :offset-assert 264)
   )
  :method-count-assert 30
  :size-assert         #x10c
  :flag-assert         #x1e0090010c
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype wland-driver (process-focusable)
  ((vehicle           uint64         :offset-assert 208)
   (accel             vector :inline :offset-assert 224)
   (accel-factor      vector :inline :offset-assert 240)
   (front-back-interp float          :offset-assert 256)
   (left-right-interp float          :offset-assert 260)
   (up-down-interp    float          :offset-assert 264)
   )
  :method-count-assert 30
  :size-assert         #x10c
  :flag-assert         #x1e0090010c
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern kleever-pilot-trans function)
;; (define-extern kleever-pilot-wcar-anim-loop function)
;; (define-extern kleever-rider-init-by-other function)
;; (define-extern kleever-rider-spawn function)
;; (define-extern wland-driver-pilot-trans function)
;; (define-extern wland-driver-pilot-wcar-anim-loop function)
;; (define-extern wland-driver-init-by-other function)
;; (define-extern wland-driver-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; course-race                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-race (task-manager)
  ((start-pos      vector :inline :offset-assert 240)
   (start-continue basic          :offset-assert 256)
   (scene-player   uint64         :offset-assert 264)
   (race-started?  basic          :offset-assert 272)
   (player-won?    basic          :offset-assert 276)
   )
  :method-count-assert 39
  :size-assert         #x118
  :flag-assert         #x2700a00118
  (:methods
    (task-manager-race-method-33 () none) ;; 33
    (task-manager-race-method-34 () none) ;; 34
    (task-manager-race-method-35 () none) ;; 35
    (task-manager-race-method-36 () none) ;; 36
    (task-manager-race-method-37 () none) ;; 37
    (task-manager-race-method-38 () none) ;; 38
    )
  (:state-methods
    complete ;; 16
    finished ;; 32
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-desert-course-race (task-manager-race)
  ((fail-plane vector :inline :offset-assert 288)
   )
  :method-count-assert 39
  :size-assert         #x130
  :flag-assert         #x2700b00130
  (:state-methods
    finished ;; 32
    active ;; 15
    )
  )
|#

#|
(deftype bbush-time-trial-hud-info (structure)
  ((goal     float  :offset-assert 0)
   (goal-cup uint8  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )
|#

#|
(deftype hud-wasbbv-goal-time (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-bbush-time-trial-1 (task-manager-race)
  ((game-score uint8   :offset-assert 280)
   (hud-goal   uint64  :offset-assert 288)
   )
  :method-count-assert 39
  :size-assert         #x128
  :flag-assert         #x2700b00128
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype des-rally-bollard (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-bbush-rally (task-manager-race)
  ((game-score uint8   :offset-assert 280)
   (hud-goal   uint64  :offset-assert 288)
   )
  :method-count-assert 39
  :size-assert         #x128
  :flag-assert         #x2700b00128
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *v-snake-racer-constants* object)
;; (define-extern *v-mirage-racer-constants* object)
;; (define-extern *v-fox-racer-constants* object)
;; (define-extern *v-x-ride-racer-constants* object)
;; (define-extern *v-marauder-racer-constants* object)
;; (define-extern task-manager-race-pre-race-sequence function)
;; (define-extern task-manager-desert-course-race-pre-race-sequence function)
;; (define-extern *bbush-time-trial-hud-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flut-part                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flut                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *flut-shadow-control* shadow-control)
;; (define-extern *flut-color-table* array)
;; (define-extern flut-color-from-index function)
;; (define-extern flut-random-color-index function)
;; (define-extern flut-init function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-flut                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flut-bank (basic)
  ((jump-height-min        meters  :offset-assert 4)
   (jump-height-max        meters  :offset-assert 8)
   (double-jump-height-min meters  :offset-assert 12)
   (double-jump-height-max meters  :offset-assert 16)
   (air-attack-speed       meters  :offset-assert 20)
   (ground-timeout         uint64  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

;; (define-extern *FLUT-bank* flut-bank)
;; (define-extern *flut-walk-mods* surface)
;; (define-extern *flut-run-racer-mods* surface)
;; (define-extern *flut-run-wild-mods* surface)
;; (define-extern *flut-jump-wild-mods* surface)
;; (define-extern *flut-jump-mods* surface)
;; (define-extern *flut-jump-racer-mods* surface)
;; (define-extern *flut-double-jump-mods* surface)
;; (define-extern *flut-double-jump-racer-mods* surface)
;; (define-extern *flut-run-attack-mods* surface)
;; (define-extern *flut-air-attack-mods* surface)
;; (define-extern flut-leg-ik-callback function)
;; (define-extern flut-update-ik function)
;; (define-extern target-flut-get-off? function)
;; (define-extern target-flut-post-post function)
;; (define-extern target-flut-wild-post function)
;; (define-extern target-flut-post function)
;; (define-extern target-flut-falling-anim-trans function)
;; (define-extern target-flut-hit-ground-anim function)
;; (define-extern target-flut-standard-event-handler function)
;; (define-extern target-flut-dangerous-event-handler function)
;; (define-extern target-fldax-enter function)
;; (define-extern target-fldax-exit function)
;; (define-extern target-flut-run-wild object)
;; (define-extern *flut-get-off-mods* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctymark-obs-h                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype market-object (crate)
  ((sound-explode  basic          :offset-assert 288)
   (part-explode   basic          :offset-assert 292)
   (explode-matrix matrix :inline :offset-assert 304)
   )
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  (:state-methods
    die ;; 30
    idle ;; 29
    )
  )
|#

#|
(deftype market-basket-a (market-object)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype market-basket-b (market-object)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype market-crate (market-object)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype market-sack-a (market-object)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype market-sack-b (market-object)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype fruit-stand (process-focusable)
  ((incoming-attack-id uint32   :offset-assert 208)
   (hack-counter       uint32   :offset-assert 212)
   (count-sparts       uint32   :offset-assert 216)
   (first-sparts       uint32   :offset-assert 220)
   (num-sparts         uint32   :offset-assert 224)
   (sparts-index       uint32 4 :offset-assert 228) ;; guessed by decompiler
   (sparts-pos         vector 4 :offset-assert 256) ;; guessed by decompiler
   (parts-alive?       basic    :offset-assert 320)
   )
  :method-count-assert 31
  :size-assert         #x144
  :flag-assert         #x1f00d00144
  (:methods
    (fruit-stand-method-28 () none) ;; 28 ;; (fruit-stand-method-28 (_type_) none)
    (fruit-stand-method-29 () none) ;; 29 ;; (fruit-stand-method-29 (_type_) none)
    (fruit-stand-method-30 () none) ;; 30
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctymark-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern check-market-piece-ground function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo none)
;; (define-extern market-activate function) ;; (function level none)
;; (define-extern *fruit-check-ground-counter* object) ;; int
;; (define-extern fruit-check-ground-bounce function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo matrix float)
;; (define-extern fruit-sparticle-next-on-mode-1 function) ;; (function sparticle-system sparticle-cpuinfo sparticle-launchinfo float)
;; (define-extern fruit-stand-event-handler function) ;; (function process int symbol event-message-block object :behavior fruit-stand)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasteland-scenes               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wlander-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wlander-anim-info (structure)
  ((anim-index       UNKNOWN 2 :offset-assert 0)
   (anim-index-front int32     :offset-assert 0)
   (anim-index-back  int32     :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype wlander-global-info (basic)
  ((prev-yellow-hit         int8      :offset-assert 4)
   (prev-blue-hit           int8      :offset-assert 5)
   (knocked                 UNKNOWN 2 :offset-assert 8)
   (knocked-land            UNKNOWN 2 :offset-assert 16)
   (anim-knocked-front      int32     :offset-assert 8)
   (anim-knocked-back       int32     :offset-assert 12)
   (anim-knocked-front-land int32     :offset-assert 16)
   (anim-knocked-back-land  int32     :offset-assert 20)
   (yellow-hit-anim         UNKNOWN 2 :offset-assert 24)
   (yellow-land-anim        UNKNOWN 2 :offset-assert 40)
   (blue-hit-anim           UNKNOWN 1 :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wlander-male                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wlander (civilian)
  ((mad-level           float               :offset-assert 1128)
   (los                 los-control :inline :offset-assert 1136)
   (target-pos          vector      :inline :offset-assert 1312)
   (gun-joint           int32               :offset-assert 1328)
   (gun-axis            int32               :offset-assert 1332)
   (gun-length          float               :offset-assert 1336)
   (shoot-time          uint64              :offset-assert 1344)
   (last-time-far       uint64              :offset-assert 1352)
   (last-time-los       uint64              :offset-assert 1360)
   (shot-sound          int32               :offset-assert 1368)
   (knocked-collide     basic               :offset-assert 1372)
   (knocked-speed-scale float               :offset-assert 1384)
   (male                basic               :offset-assert 1388)
   )
  :method-count-assert 243
  :size-assert         #x570
  :flag-assert         #xf304f00570
  (:methods
    (wlander-method-238 () none) ;; 238
    (wlander-method-239 () none) ;; 239
    (wlander-method-240 () none) ;; 240
    (wlander-method-241 () none) ;; 241
    (wlander-method-242 () none) ;; 242
    )
  (:state-methods
    gun-shoot ;; 234
    close-attack ;; 235
    panic ;; 237
    hostile ;; 38
    active ;; 34
    standing ;; 236
    knocked ;; 31
    knocked-recover ;; 32
    )
  )
|#

#|
(deftype wlander-male (wlander)
  ()
  :method-count-assert 243
  :size-assert         #x570
  :flag-assert         #xf304f00570
  (:state-methods
    close-attack ;; 235
    standing ;; 236
    gun-shoot ;; 234
    )
  )
|#

#|
(deftype wlander-female (wlander)
  ((gunout basic  :offset-assert 1392)
   )
  :method-count-assert 243
  :size-assert         #x574
  :flag-assert         #xf305000574
  (:state-methods
    gun-shoot ;; 234
    close-attack ;; 235
    wait ;; 190
    )
  )
|#

;; (define-extern wlander-travel-anim function)
;; (define-extern *wlander-male-nav-enemy-info* nav-enemy-info)
;; (define-extern wlander-male-joint-callback function)
;; (define-extern *wlander-female-nav-enemy-info* nav-enemy-info)
;; (define-extern wlander-female-joint-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wlander-female                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype waster-b (civilian)
  ()
  :method-count-assert 234
  :size-assert         #x464
  :flag-assert         #xea03f00464
  (:state-methods
    wait ;; 190
    get-up-back ;; 221
    get-up-front ;; 220
    knocked ;; 31
    )
  )
|#

;; (define-extern *waster-b-global-info* civilian-global-info)
;; (define-extern *waster-b-nav-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waswide-init                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern restore-wascity-speeches function)
;; (define-extern waswide-login function)
;; (define-extern waswide-activate function)
;; (define-extern waswide-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waswide-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-sat-scrape-dirt function)
;; (define-extern spt-birth-func-part-sat-scrape-dirt function)
;; (define-extern spt-birth-func-part-sat-scrape-rocks function)
;; (define-extern *range-sat-explo-scene-color* curve-color-fast)
;; (define-extern *range-sat-explo-scene-alpha* curve2d-fast)
;; (define-extern *range-sat-explo-scene-scale-x* curve2d-fast)
;; (define-extern *range-sat-explo-scene-scale-y* curve2d-fast)
;; (define-extern *curve-sat-explo-scene-alpha* curve2d-fast)
;; (define-extern *curve-sat-explo-scene-scale-x* curve2d-fast)
;; (define-extern *curve-sat-explo-scene-scale-y* curve2d-fast)
;; (define-extern *part-neo-satellite-explosion-texture-scene-curve-settings* object)
;; (define-extern *range-color-wascity-palace-fire-beacon-flame* curve-color-fast)
;; (define-extern *range-alpha-wascity-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *range-scale-wascity-palace-fire-beacon-flame-x* curve2d-fast)
;; (define-extern *range-scale-wascity-palace-fire-beacon-flame-y* curve2d-fast)
;; (define-extern *r-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *g-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *b-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *curve-alpha-wascity-palace-fire-beacon-flame* curve2d-fast)
;; (define-extern *curve-wascity-palace-fire-beacon-flame-x* curve2d-fast)
;; (define-extern *curve-wascity-palace-fire-beacon-flame-y* curve2d-fast)
;; (define-extern *part-wascity-palace-fire-beacon-flame-curve-settings* object)
;; (define-extern *range-wrsplash-color* curve-color-fast)
;; (define-extern *range-wrsplash-alpha* curve2d-fast)
;; (define-extern *range-wrsplash-scale-x* curve2d-fast)
;; (define-extern *range-wrsplash-scale-y* curve2d-fast)
;; (define-extern *curve-wrsplash-alpha* curve2d-fast)
;; (define-extern *curve-wrsplash-scale-x* curve2d-fast)
;; (define-extern *curve-wrsplash-scale-y* curve2d-fast)
;; (define-extern *part-water-rocks-splash-curve-settings* object)
;; (define-extern part-wascityb-bird1-path function)
;; (define-extern part-wascityb-bird2-path function)
;; (define-extern part-wascityb-bird3-path function)
;; (define-extern part-wascityb-bird4-path function)
;; (define-extern part-wascityb-bird5-path function)
;; (define-extern part-wascityb-bird6-path function)
;; (define-extern part-wascityb-bird7-path function)
;; (define-extern part-wascityb-bird8-path function)
;; (define-extern part-wascityb-bird9-path function)
;; (define-extern part-wascityb-bird10-path function)
;; (define-extern part-wascitya-fly1-path function)
;; (define-extern part-wascitya-fly2-path function)
;; (define-extern part-wascitya-fly3-path function)
;; (define-extern *range-color-flame* curve-color-fast)
;; (define-extern *range-alpha-flame* curve2d-fast)
;; (define-extern *range-scale-flame-x* curve2d-fast)
;; (define-extern *range-scale-flame-y* curve2d-fast)
;; (define-extern *r-curve-flame* curve2d-fast)
;; (define-extern *g-curve-flame* curve2d-fast)
;; (define-extern *b-curve-flame* curve2d-fast)
;; (define-extern *curve-alpha-flame* curve2d-fast)
;; (define-extern *curve-flame-x* curve2d-fast)
;; (define-extern *curve-flame-y* curve2d-fast)
;; (define-extern *part-gas-lamp-flame-curve-settings* object)
;; (define-extern *part-talltorch-flame-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waswide-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-windmill (process-drawable)
  ((quat quaternion :inline :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :flag-assert         #x15006000e0
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype wascity-flag-base (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (wascity-flag-base-method-21 () none) ;; 21
    (wascity-flag-base-method-22 () none) ;; 22
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype wascity-flag-a (wascity-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype wascity-flag-b (wascity-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype wascity-flag-c (wascity-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype wascity-flag-d (wascity-flag-base)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  )
|#

#|
(deftype wascity-wind-fan (process-drawable)
  ((quat quaternion :inline :offset-assert 208)
   )
  :method-count-assert 21
  :size-assert         #xe0
  :flag-assert         #x15006000e0
  (:state-methods
    idle ;; 20
    )
  )
|#

;; shaker is already defined!

#|
(deftype wascity-cactus (process-focusable)
  ((shakers              UNKNOWN 6 :offset-assert 208)
   (incoming-attack-id   uint32    :offset-assert 592)
   (incoming-attack-time uint64    :offset-assert 600)
   (hit-points           float     :offset-assert 608)
   )
  :method-count-assert 32
  :size-assert         #x264
  :flag-assert         #x2001f00264
  (:methods
    (wascity-cactus-method-30 () none) ;; 30
    (wascity-cactus-method-31 () none) ;; 31
    )
  (:state-methods
    idle ;; 28
    die ;; 29
    )
  )
|#

#|
(deftype wascity-market-crate (market-crate)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype wascity-market-basket-a (market-basket-a)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype wascity-market-basket-b (market-basket-b)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype wascity-market-sack-a (market-sack-a)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype wascity-market-sack-b (market-sack-b)
  ()
  :method-count-assert 43
  :size-assert         #x170
  :flag-assert         #x2b00f00170
  )
|#

#|
(deftype wascity-fruit-stand (fruit-stand)
  ()
  :method-count-assert 31
  :size-assert         #x144
  :flag-assert         #x1f00d00144
  )
|#

#|
(deftype wascity-water-pump (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype wascity-awning-a (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  )
|#

#|
(deftype wascity-awning-b (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  )
|#

#|
(deftype monk-npc (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )
|#

;; (define-extern wascity-windmill-callback function)
;; (define-extern *wascity-cactus-exploder-params* joint-exploder-static-params)
;; (define-extern wascity-cactus-callback function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wascity-ocean                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ocean-colors-wascity* object)
;; (define-extern *ocean-near-indices-wascity* ocean-near-indices)
;; (define-extern *ocean-trans-indices-wascity* ocean-trans-indices)
;; (define-extern *ocean-mid-indices-wascity* ocean-mid-indices)
;; (define-extern *ocean-mid-masks-wascity* ocean-mid-masks)
;; (define-extern *ocean-map-wascity* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tizard                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tizard (process-focusable)
  ((rotation-matrix matrix  :inline :offset-assert 208)
   (ground-normal   UNKNOWN 2       :offset-assert 272)
   (path-dir        vector  :inline :offset-assert 304)
   (path-base-u     float           :offset-assert 320)
   (path-u          float           :offset-assert 324)
   (path-du         float           :offset-assert 328)
   (first-run?      basic           :offset-assert 332)
   )
  :method-count-assert 36
  :size-assert         #x150
  :flag-assert         #x2400d00150
  (:methods
    (tizard-method-33 () none) ;; 33
    (tizard-method-34 () none) ;; 34
    (tizard-method-35 () none) ;; 35
    )
  (:state-methods
    die ;; 32
    turning ;; 31
    turn ;; 30
    walk ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern tizard-event-handler function)
;; (define-extern tizard-tilt-jmod-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dogat                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dogat (nav-enemy)
  ((rotation-matrix matrix :inline :offset-assert 624)
   (scared-timer    uint64         :offset-assert 688)
   )
  :method-count-assert 192
  :size-assert         #x2b8
  :flag-assert         #xc0024002b8
  (:methods
    (dogat-method-191 () none) ;; 191
    )
  (:state-methods
    flee ;; 36
    notice ;; 35
    active ;; 34
    sit-idle ;; 190
    idle ;; 33
    )
  )
|#

;; (define-extern *dogat-nav-enemy-info* nav-enemy-info)
;; (define-extern dogat-travel-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-shared              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blow-tower-node-info (structure)
  ((speed-scalar          float  :offset-assert 0)
   (accum-dist            float  :offset-assert 4)
   (accum-time            float  :offset-assert 8)
   (accum-time-percentage float  :offset-assert 12)
   (event-id              int32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype blow-tower-path (structure)
  ((total-time uint64  :offset-assert 0)
   (index      int16   :offset-assert 8)
   (pts        uint32  :offset-assert 12)
   (node-info  uint32  :offset-assert 16)
   (num-nodes  int16   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x16
  :flag-assert         #x900000016
  )
|#

#|
(deftype surround-spot (structure)
  ((y-rot       float          :offset-assert 0)
   (x-rot       float          :offset-assert 4)
   (offset-dir  vector :inline :offset-assert 16)
   (turret-pos  vector :inline :offset-assert 32)
   (rider-index int16          :offset-assert 48)
   (owner       uint64         :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype blow-tower-path-cursor (structure)
  ((curve              cubic-curve     :inline :offset-assert 0)
   (pos                vector          :inline :offset-assert 64)
   (norm               vector          :inline :offset-assert 80)
   (current-time       uint64                  :offset-assert 96)
   (speed              float                   :offset-assert 104)
   (path               blow-tower-path         :offset-assert 108)
   (current-tt         float                   :offset-assert 112)
   (interp-tt          float                   :offset-assert 116)
   (current-node-index int16                   :offset-assert 120)
   (event-id           uint32                  :offset-assert 124)
   )
  :method-count-assert 13
  :size-assert         #x80
  :flag-assert         #xd00000080
  (:methods
    (blow-tower-path-cursor-method-9 () none) ;; 9
    (blow-tower-path-cursor-method-10 () none) ;; 10
    (blow-tower-path-cursor-method-11 () none) ;; 11
    (blow-tower-path-cursor-method-12 () none) ;; 12
    )
  )
|#

#|
(deftype xform (structure)
  ((root transformq :inline :offset-assert 0)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (xform-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype blow-tower-clock (structure)
  ((elapsed-clock-time uint64  :offset-assert 0)
   (debug?             basic   :offset-assert 8)
   (debug-lock-view?   basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype blow-tower-global-target-info (structure)
  ((target-handles          UNKNOWN 2 :offset-assert 0)
   (hellcat                 uint64    :offset-assert 0)
   (pickup                  uint64    :offset-assert 8)
   (mission-time            uint64    :offset-assert 16)
   (debug?                  basic     :offset-assert 24)
   (difficulty-scalar       float     :offset-assert 28)
   (last-player-attack-time uint64    :offset-assert 32)
   (clock-scalar            float     :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )
|#

#|
(deftype blow-tower-speech-instance (speech-instance)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern find-event-id-index function)
;; (define-extern find-path-event-id-index function)
;; (define-extern initialize-hermite-from-path function)
;; (define-extern process-xform-list function)
;; (define-extern *blow-tower-targets* object)
;; (define-extern *blow-tower-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-data                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *blow-tower-paths* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-speech              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern symbol->blow-tower-speech function)
;; (define-extern *blow-tower-speech* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-script              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype blow-tower-cmd (structure)
  ((cmd-type      uint8    :offset-assert 0)
   (spawn-type    uint8    :offset-assert 1)
   (entity-name   basic    :offset-assert 4)
   (rotate-amount float    :offset-assert 8)
   (lock-min      float    :offset-assert 12)
   (lock-max      float    :offset-assert 16)
   (target        uint8    :offset-assert 20)
   (path-height   float    :offset-assert 24)
   (event-id      uint32   :offset-assert 28)
   (time-offset   float    :offset-assert 32)
   (clock-scalar  float    :offset-assert 36)
   (entity-name2  basic    :offset-assert 40)
   (snap-view?    basic    :offset-assert 44)
   (snd-name      uint128  :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )
|#

#|
(deftype tower-event-group (structure)
  ((event-id     int32  :offset-assert 0)
   (command-list basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern get-blow-tower-target function)
;; (define-extern parse-blow-tower-command function)
;; (define-extern *blow-tower-script* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-part                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-bt-roboguard-dust-scale-x* curve2d-fast)
;; (define-extern *range-bt-roboguard-dust-scale-y* curve2d-fast)
;; (define-extern *part-bt-roboguard-explosion-dust-in-curve-settings* object)
;; (define-extern *bt-grunt-ragdoll-info* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-obs                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tower-enemy-init-params (structure)
  ((pos            vector :inline :offset-assert 0)
   (entity-name    basic          :offset-assert 16)
   (target         uint64         :offset-assert 24)
   (time-offset    float          :offset-assert 32)
   (activate-time  uint64         :offset-assert 40)
   (bool-userdata? basic          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype blow-tower-enemy (process-focusable)
  ((hit-points      float          :offset-assert 208)
   (last-attack-id  uint32         :offset-assert 212)
   (last-attack-dir vector :inline :offset-assert 224)
   (last-attack-pos vector :inline :offset-assert 240)
   )
  :method-count-assert 38
  :size-assert         #x100
  :flag-assert         #x2600800100
  (:methods
    (blow-tower-enemy-method-30 () none) ;; 30
    (blow-tower-enemy-method-31 () none) ;; 31
    (blow-tower-enemy-method-32 () none) ;; 32
    (blow-tower-enemy-method-33 () none) ;; 33
    (blow-tower-enemy-method-34 () none) ;; 34
    (blow-tower-enemy-method-35 () none) ;; 35
    (blow-tower-enemy-method-36 () none) ;; 36
    (blow-tower-enemy-method-37 () none) ;; 37
    )
  (:state-methods
    dormant ;; 29
    idle ;; 28
    )
  )
|#

#|
(deftype tower-flyer-bobber (structure)
  ((start-val           float   :offset-assert 0)
   (current-val         float   :offset-assert 4)
   (total-time          uint64  :offset-assert 8)
   (current-time        uint64  :offset-assert 16)
   (current-size-scalar float   :offset-assert 24)
   (dir                 float   :offset-assert 28)
   (num-iterations      float   :offset-assert 32)
   (time-scalar         float   :offset-assert 36)
   (start-time-scalar   float   :offset-assert 40)
   (desired-time-scalar float   :offset-assert 44)
   (scale-min           float   :offset-assert 48)
   (scale-max           float   :offset-assert 52)
   (time-min            float   :offset-assert 56)
   (time-max            float   :offset-assert 60)
   (base-time           float   :offset-assert 64)
   (current-speed       float   :offset-assert 68)
   (output-scale        float   :offset-assert 72)
   (output-val          float   :offset-assert 76)
   (charge-time         uint64  :offset-assert 80)
   (wait-time           uint64  :offset-assert 88)
   )
  :method-count-assert 12
  :size-assert         #x60
  :flag-assert         #xc00000060
  (:methods
    (tower-flyer-bobber-method-9 () none) ;; 9
    (tower-flyer-bobber-method-10 () none) ;; 10
    (tower-flyer-bobber-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype tower-flyer (blow-tower-enemy)
  ((focus               uint64          :offset-assert 256)
   (local-offset        vector  :inline :offset-assert 272)
   (basetrans           vector  :inline :offset-assert 288)
   (surround-spot       int32           :offset-assert 304)
   (desired-z-dist      float           :offset-assert 308)
   (current-z-dist      float           :offset-assert 312)
   (use-z-dist          float           :offset-assert 316)
   (bobbers             UNKNOWN 3       :offset-assert 320)
   (spot-base-pos       vector  :inline :offset-assert 608)
   (hover-end-time      uint64          :offset-assert 624)
   (total-charge-time   uint64          :offset-assert 624)
   (charge-part         basic           :offset-assert 632)
   (charge-t            float           :offset-assert 636)
   (last-wall-clip-time uint64          :offset-assert 640)
   (spawn-path-time     uint64          :offset-assert 648)
   (bob-vec             vector  :inline :offset-assert 656)
   (bob-y-scalar        float           :offset-assert 672)
   (entity-pos          vector          :offset-assert 676)
   (buzz-sound          uint32          :offset-assert 680)
   (charge-sound        uint32          :offset-assert 684)
   )
  :method-count-assert 50
  :size-assert         #x2b0
  :flag-assert         #x32023002b0
  (:methods
    (tower-flyer-method-42 () none) ;; 42
    (tower-flyer-method-43 () none) ;; 43
    (tower-flyer-method-44 () none) ;; 44
    (tower-flyer-method-45 () none) ;; 45
    (tower-flyer-method-46 () none) ;; 46
    (tower-flyer-method-47 () none) ;; 47
    (tower-flyer-method-48 () none) ;; 48
    (tower-flyer-method-49 () none) ;; 49
    )
  (:state-methods
    firing ;; 40
    charging ;; 39
    hovering ;; 38
    fleeing ;; 41
    idle ;; 28
    )
  )
|#

#|
(deftype flyer-projectile-params (structure)
  ((total-travel-time uint64  :offset-assert 0)
   (target            uint64  :offset-assert 8)
   (damage            float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype flyer-projectile (process-drawable)
  ((original-offset-vec vector                  :inline :offset-assert 208)
   (params              flyer-projectile-params :inline :offset-assert 224)
   (size-t              float                           :offset-assert 244)
   )
  :method-count-assert 22
  :size-assert         #xf8
  :flag-assert         #x16008000f8
  (:methods
    (flyer-projectile-method-21 () none) ;; 21
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype cast-rider (process-focusable)
  ((anim-index int16          :offset-assert 208)
   (track-obj  uint64         :offset-assert 216)
   (neck       basic          :offset-assert 224)
   (track-pos  vector :inline :offset-assert 240)
   )
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  (:state-methods
    riding ;; 28
    )
  )
|#

#|
(deftype bt-barrel (blow-tower-enemy)
  ((nearby-barrels     UNKNOWN 16      :offset-assert 256)
   (nearby-barrel-pos  UNKNOWN 16      :offset-assert 384)
   (nearby-barrel-dist UNKNOWN 16      :offset-assert 640)
   (num-nearby-barrels int32           :offset-assert 704)
   (barrel-send-index  int32           :offset-assert 708)
   (barrel-live-mask   uint32          :offset-assert 712)
   (rot-vec            vector  :inline :offset-assert 720)
   (rot-speed          float           :offset-assert 736)
   )
  :method-count-assert 44
  :size-assert         #x2e4
  :flag-assert         #x2c027002e4
  (:methods
    (bt-barrel-method-40 () none) ;; 40
    (bt-barrel-method-41 () none) ;; 41
    (bt-barrel-method-42 () none) ;; 42
    (bt-barrel-method-43 () none) ;; 43
    )
  (:state-methods
    fly-up ;; 39
    explode ;; 38
    idle ;; 28
    )
  )
|#

#|
(deftype bt-barrel-stack (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    idle ;; 20
    barrel-spawning ;; 21
    )
  )
|#

#|
(deftype bt-pickup-barrel (process-drawable)
  ((index int32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    riding ;; 20
    )
  )
|#

;; (define-extern blow-tower-enemy-handler function)
;; (define-extern tower-flyer-init-by-other function)
;; (define-extern *current-color* object)
;; (define-extern tower-fly-quick-raycast function)
;; (define-extern compute-tower-flyer-lerp-point function)
;; (define-extern flyer-projectile-init-by-other function)
;; (define-extern cast-rider-init-by-other function)
;; (define-extern bt-barrel-init-by-other function)
;; (define-extern barrel-stack-init-by-other function)
;; (define-extern bt-barrel-ground-probe function)
;; (define-extern setup-bt-barrels function)
;; (define-extern attempt-barrel-spawn function)
;; (define-extern bt-pickup-barrel-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-obs2                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bt-roboguard (blow-tower-enemy)
  ((focus-pos             vector :inline :offset-assert 256)
   (focus                 uint64         :offset-assert 272)
   (rotation-matrix       matrix :inline :offset-assert 288)
   (me-to-focus-dir       vector :inline :offset-assert 352)
   (me-to-focus-angle     float          :offset-assert 368)
   (torso-aim-blend       float          :offset-assert 372)
   (torso-angle           float          :offset-assert 376)
   (torso-seek-speed      float          :offset-assert 380)
   (torso-to-focus-angle  float          :offset-assert 384)
   (last-torso-frame-num  float          :offset-assert 388)
   (stand-angle-threshold float          :offset-assert 392)
   (fire-time             uint64         :offset-assert 400)
   (fire-count            int8           :offset-assert 408)
   (fire-delay            uint64         :offset-assert 416)
   (path-clock-time       uint64         :offset-assert 424)
   (difficulty            float          :offset-assert 432)
   (active-clock-time     uint64         :offset-assert 440)
   )
  :method-count-assert 47
  :size-assert         #x1c0
  :flag-assert         #x2f014001c0
  (:methods
    (bt-roboguard-method-40 () none) ;; 40
    (bt-roboguard-method-41 () none) ;; 41
    (bt-roboguard-method-42 () none) ;; 42
    (bt-roboguard-method-43 () none) ;; 43
    (bt-roboguard-method-44 () none) ;; 44
    (bt-roboguard-method-45 () none) ;; 45
    (bt-roboguard-method-46 () none) ;; 46
    )
  (:state-methods
    shoot-attack ;; 39
    hostile-stand ;; 38
    idle ;; 28
    )
  )
|#

#|
(deftype bt-roboguard-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

#|
(deftype kg-flyer (tower-flyer)
  ()
  :method-count-assert 50
  :size-assert         #x2b0
  :flag-assert         #x32023002b0
  (:state-methods
    firing ;; 40
    charging ;; 39
    )
  )
|#

#|
(deftype bt-mh-flyer (tower-flyer)
  ((rotation-vec        vector  :inline :offset-assert 688)
   (xz-dir              vector  :inline :offset-assert 704)
   (main-joint-movement UNKNOWN 3       :offset-assert 720)
   (thrust              UNKNOWN 2       :offset-assert 768)
   (engine-part         basic           :offset-assert 776)
   )
  :method-count-assert 53
  :size-assert         #x30c
  :flag-assert         #x350290030c
  (:methods
    (bt-mh-flyer-method-50 () none) ;; 50
    (bt-mh-flyer-method-51 () none) ;; 51
    (bt-mh-flyer-method-52 () none) ;; 52
    )
  (:state-methods
    firing ;; 40
    fleeing ;; 41
    charging ;; 39
    hovering ;; 38
    )
  )
|#

#|
(deftype bt-grunt (blow-tower-enemy)
  ((target                       uint64                         :offset-assert 256)
   (last-parent-xform            matrix                 :inline :offset-assert 272)
   (idle-time                    uint64                         :offset-assert 336)
   (rider-index                  int16                          :offset-assert 344)
   (start-pos                    vector                 :inline :offset-assert 352)
   (jump-cursor                  blow-tower-path-cursor :inline :offset-assert 368)
   (jump-start-pos               vector                 :inline :offset-assert 496)
   (jump-start-quat              quaternion             :inline :offset-assert 512)
   (jump-end-pos                 vector                 :inline :offset-assert 528)
   (jump-end-quat                quaternion             :inline :offset-assert 544)
   (apex-height                  float                          :offset-assert 560)
   (total-jump-time              uint64                         :offset-assert 568)
   (jump-start-time              uint64                         :offset-assert 576)
   (jump-height-percentage-start float                          :offset-assert 584)
   (jump-height-percentage-end   float                          :offset-assert 588)
   (jump-time-offset             float                          :offset-assert 592)
   (ragdoll-proc                 uint64                         :offset-assert 600)
   (no-real-rider?               basic                          :offset-assert 608)
   (jump-time-scalar             float                          :offset-assert 612)
   (start-ride-time              uint64                         :offset-assert 616)
   (hit-sound                    uint32                         :offset-assert 624)
   (breathe-sound                uint32                         :offset-assert 628)
   (landed-on-player?            basic                          :offset-assert 632)
   )
  :method-count-assert 55
  :size-assert         #x27c
  :flag-assert         #x370200027c
  (:methods
    (bt-grunt-method-46 () none) ;; 46
    (bt-grunt-method-47 () none) ;; 47
    (bt-grunt-method-48 () none) ;; 48
    (bt-grunt-method-49 () none) ;; 49
    (bt-grunt-method-50 () none) ;; 50
    (bt-grunt-method-51 () none) ;; 51
    (bt-grunt-method-52 () none) ;; 52
    (bt-grunt-method-53 () none) ;; 53
    (bt-grunt-method-54 () none) ;; 54
    )
  (:state-methods
    ragdolled ;; 45
    riding-idle ;; 40
    riding-idle-ship ;; 44
    riding-land ;; 39
    dormant ;; 29
    jumping ;; 42
    jumping-start ;; 43
    waiting-to-jump ;; 38
    riding-attack ;; 41
    idle ;; 28
    )
  )
|#

#|
(deftype bt-missile (blow-tower-enemy)
  ((xforms                  UNKNOWN    4       :offset-assert 256)
   (parent-xform            xform      :inline :offset-assert 256)
   (last-parent-quat        quaternion :inline :offset-assert 448)
   (local-xform             xform      :inline :offset-assert 304)
   (base-y                  float              :offset-assert 464)
   (bob-xform               xform      :inline :offset-assert 352)
   (bob-orient              xform      :inline :offset-assert 400)
   (bobbers                 UNKNOWN    3       :offset-assert 472)
   (target                  uint64             :offset-assert 760)
   (chase-start-time        uint64             :offset-assert 768)
   (chase-end-time          uint64             :offset-assert 776)
   (chase-start-dist        float              :offset-assert 784)
   (preferred-height-offset float              :offset-assert 788)
   (particle-trail          basic              :offset-assert 792)
   (travel-sound            uint32             :offset-assert 796)
   (dumb-fire?              basic              :offset-assert 800)
   (dumb-speed              float              :offset-assert 804)
   (dumb-start              vector     :inline :offset-assert 816)
   (dumb-dest               vector     :inline :offset-assert 832)
   )
  :method-count-assert 41
  :size-assert         #x350
  :flag-assert         #x2902d00350
  (:methods
    (bt-missile-method-40 () none) ;; 40
    )
  (:state-methods
    explode ;; 39
    chasing ;; 38
    idle ;; 28
    )
  )
|#

#|
(deftype kg-bombbot (bombbot)
  ((start-time uint64  :offset-assert 1512)
   )
  :method-count-assert 209
  :size-assert         #x5f0
  :flag-assert         #xd1057005f0
  (:state-methods
    die ;; 40
    hostile ;; 38
    )
  )
|#

;; (define-extern bt-roboguard-init-by-other function)
;; (define-extern bt-roboguard-turret-code function)
;; (define-extern bt-roboguard-turn-torso-post function)
;; (define-extern spawn-bt-roboguard-projectile function)
;; (define-extern bt-roboguard-fire-backcheck function)
;; (define-extern bt-mh-flyer-flight-code function)
;; (define-extern bt-grunt-init-by-other function)
;; (define-extern bt-grunt-idle-code function)
;; (define-extern *grunt-jump-curve* object)
;; (define-extern *grunt-dists* object)
;; (define-extern grunt-part-callback function)
;; (define-extern *grunt-idle-shift* curve2d-fast)
;; (define-extern bt-missile-init-by-other function)
;; (define-extern kg-bombbot-find-nearest-nav-mesh function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; blow-tower-extra               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-pickup (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-hellcat (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-pickup-arrows (hud)
  ((offscreen uint8     :offset-assert 2756)
   (alpha     UNKNOWN 2 :offset-assert 2760)
   )
  :method-count-assert 27
  :size-assert         #xad0
  :flag-assert         #x1b0a500ad0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-blow-tower                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bombbot-spawn-record (structure)
  ((hand     uint64  :offset-assert 0)
   (ent-name basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype task-manager-blow-tower (task-manager)
  ((dest-pos                vector                 :inline :offset-assert 240)
   (target-handles          UNKNOWN                2       :offset-assert 256)
   (hellcat                 uint64                         :offset-assert 256)
   (pickup                  uint64                         :offset-assert 264)
   (hellcat-turret          uint64                         :offset-assert 272)
   (mission-elapsed-clock   uint64                         :offset-assert 280)
   (debug-lock-viewport?    basic                          :offset-assert 288)
   (debug-run-events?       basic                          :offset-assert 292)
   (script                  basic                          :offset-assert 296)
   (script-index            int16                          :offset-assert 300)
   (cmd                     blow-tower-cmd         :inline :offset-assert 304)
   (event-cursor            blow-tower-path-cursor :inline :offset-assert 368)
   (last-missile-spawn-time uint64                         :offset-assert 496)
   (dest-clock-scalar       float                          :offset-assert 504)
   (clock-scalar            float                          :offset-assert 508)
   (bombbot-path-index      int8                           :offset-assert 512)
   (hud-arrows              uint64                         :offset-assert 520)
   (hud-arrow-state         uint32                         :offset-assert 528)
   (left-arrow-last-time    uint64                         :offset-assert 536)
   (right-arrow-last-time   uint64                         :offset-assert 544)
   (show-skill-time         uint64                         :offset-assert 552)
   (bombbot-records         UNKNOWN                3       :offset-assert 560)
   (bombbot-record-index    int32                          :offset-assert 608)
   (last-missile-ent        basic                          :offset-assert 612)
   (missile-dir-vec         vector                 :inline :offset-assert 624)
   )
  :method-count-assert 40
  :size-assert         #x280
  :flag-assert         #x2802000280
  (:methods
    (task-manager-blow-tower-method-37 () none) ;; 37
    (task-manager-blow-tower-method-38 () none) ;; 38
    (task-manager-blow-tower-method-39 () none) ;; 39
    )
  (:state-methods
    wait-fail ;; 35
    wind-down-mission ;; 36
    active ;; 15
    wait-for-exit ;; 34
    mission-play ;; 32
    mission-debug ;; 33
    )
  )
|#

#|
(deftype bt-gun-manager-target (structure)
  ((hand              uint64           :offset-assert 0)
   (transformed-pos   vector4w :inline :offset-assert 16)
   (size              float            :offset-assert 32)
   (hit?              basic            :offset-assert 36)
   (alpha             float            :offset-assert 40)
   (target-pers-index int32            :offset-assert 44)
   (num-overlap       int32            :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype bt-hud-target-pers (structure)
  ((hand            uint64  :offset-assert 0)
   (rotate          float   :offset-assert 8)
   (alpha           float   :offset-assert 12)
   (size-scalar     float   :offset-assert 16)
   (outer-alpha     float   :offset-assert 20)
   (outer-rotate    float   :offset-assert 24)
   (hold-start-time uint64  :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype bt-gun-manager (process)
  ((root                   basic                          :offset-assert 128)
   (parent-vehicle         uint64                         :offset-assert 136)
   (params                 target-turret-params           :offset-assert 144)
   (roty                   deg                            :offset-assert 148)
   (rotyv                  deg                            :offset-assert 152)
   (rotyvv                 deg                            :offset-assert 156)
   (roty-min               deg                            :offset-assert 160)
   (roty-max               deg                            :offset-assert 164)
   (rotx                   deg                            :offset-assert 168)
   (rotxv                  deg                            :offset-assert 172)
   (rotxvv                 deg                            :offset-assert 176)
   (rotx-min               deg                            :offset-assert 180)
   (rotx-max               deg                            :offset-assert 184)
   (dest-roty              deg                            :offset-assert 188)
   (dest-rotx              deg                            :offset-assert 192)
   (aim-quat               quaternion             :inline :offset-assert 208)
   (parent-quat            quaternion             :inline :offset-assert 224)
   (last-parent-xform      matrix                 :inline :offset-assert 240)
   (hit-pos                vector                 :inline :offset-assert 304)
   (aim-dir                vector                 :inline :offset-assert 320)
   (found-target?          basic                          :offset-assert 336)
   (target-hand            uint64                         :offset-assert 344)
   (target-start-find-time uint64                         :offset-assert 352)
   (hud-aim                hud-sprite             :inline :offset-assert 368)
   (hud-target             hud-sprite             :inline :offset-assert 432)
   (hud-target-inner       hud-sprite             :inline :offset-assert 496)
   (rot-y-shift            float                          :offset-assert 548)
   (dest-rot-y-shift       float                          :offset-assert 552)
   (enable-controls?       basic                          :offset-assert 556)
   (lock-control-time      uint64                         :offset-assert 560)
   (fire-index             uint32                         :offset-assert 568)
   (last-fire-time         uint64                         :offset-assert 576)
   (can-exit?              basic                          :offset-assert 584)
   (is-snapping?           basic                          :offset-assert 588)
   (onscreen-targets       UNKNOWN                32      :offset-assert 592)
   (num-onscreen-targets   int32                          :offset-assert 2640)
   (hud-pers               UNKNOWN                32      :offset-assert 2648)
   (rot-y-seek-rate        float                          :offset-assert 4184)
   (cam-quat               quaternion             :inline :offset-assert 4192)
   (dest-roty-max          float                          :offset-assert 4208)
   (dest-roty-min          float                          :offset-assert 4212)
   (use-roty-min           float                          :offset-assert 4216)
   (use-roty-max           float                          :offset-assert 4220)
   (x-boost-scalar         float                          :offset-assert 4224)
   (y-boost-scalar         float                          :offset-assert 4228)
   (servo-sound            uint32                         :offset-assert 4232)
   (servo-sound-state      uint64                         :offset-assert 4240)
   (servo-state-time       uint64                         :offset-assert 4248)
   (aim-pos                vector                 :inline :offset-assert 4256)
   (aim-dir                vector                 :inline :offset-assert 320)
   (look-cursor            blow-tower-path-cursor :inline :offset-assert 4288)
   (look-time-offset       uint64                         :offset-assert 4416)
   (look-time-scalar       float                          :offset-assert 4424)
   (look-mode              uint8                          :offset-assert 4428)
   (look-ent               basic                          :offset-assert 4432)
   (look-proc              uint64                         :offset-assert 4440)
   (last-beep-time         uint64                         :offset-assert 4448)
   )
  :method-count-assert 25
  :size-assert         #x1168
  :flag-assert         #x1910f01168
  (:methods
    (bt-gun-manager-method-17 () none) ;; 17
    (bt-gun-manager-method-18 () none) ;; 18
    (bt-gun-manager-method-19 () none) ;; 19
    (bt-gun-manager-method-20 () none) ;; 20
    (bt-gun-manager-method-21 () none) ;; 21
    (bt-gun-manager-method-22 () none) ;; 22
    (bt-gun-manager-method-23 () none) ;; 23
    (bt-gun-manager-method-24 () none) ;; 24
    )
  (:state-methods
    setup ;; 15
    active ;; 16
    idle ;; 14
    )
  )
|#

#|
(deftype bt-obj-init-params (structure)
  ((pos      vector          :inline :offset-assert 0)
   (quat     quaternion      :inline :offset-assert 16)
   (path     blow-tower-path         :offset-assert 32)
   (task-man uint64                  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype cast-rider-spot (structure)
  ((rider      uint64         :offset-assert 0)
   (offset-pos vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype cast-rider-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype bt-bouncer (structure)
  ((mag-scalar  float   :offset-assert 0)
   (duration    uint64  :offset-assert 8)
   (num-bounces float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype bt-vehicle-damage-info (structure)
  ((segd          uint64  :offset-assert 0)
   (seg0          uint64  :offset-assert 8)
   (seg1          uint64  :offset-assert 16)
   (hp-threshold0 float   :offset-assert 24)
   (hp-threshold1 float   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype bt-vehicle (process-focusable)
  ((path-cursor              blow-tower-path-cursor :inline :offset-assert 208)
   (task-man                 uint64                         :offset-assert 336)
   (max-hit-points           float                          :offset-assert 344)
   (hit-points               float                          :offset-assert 348)
   (last-attack-id           uint32                         :offset-assert 352)
   (path-height-offset       float                          :offset-assert 356)
   (start-path-height-offset float                          :offset-assert 360)
   (dest-path-height-offset  float                          :offset-assert 364)
   (path-height-start        uint64                         :offset-assert 368)
   (path-height-end          uint64                         :offset-assert 376)
   (path-pos                 vector                 :inline :offset-assert 384)
   (rider-spots              basic                          :offset-assert 400)
   (hud-health               uint64                         :offset-assert 408)
   (path-height-vel          float                          :offset-assert 416)
   (inited?                  basic                          :offset-assert 420)
   (pre-bounce-pos           vector                 :inline :offset-assert 432)
   (bouncers                 UNKNOWN                3       :offset-assert 448)
   (bounce-start-time        uint64                         :offset-assert 544)
   (barrel-roll-amount       float                          :offset-assert 552)
   (barrel-roll-quat         quaternion             :inline :offset-assert 560)
   (barrel-roll-rate-scalar  float                          :offset-assert 576)
   (last-speed               float                          :offset-assert 580)
   (last-vel                 vector                 :inline :offset-assert 592)
   (damage-info              basic                          :offset-assert 608)
   (damage-state             UNKNOWN                4       :offset-assert 612)
   (mission-fail?            basic                          :offset-assert 628)
   (whoosh-sound             uint32                         :offset-assert 632)
   (boost-thruster?          basic                          :offset-assert 636)
   (sound-play-end           uint64                         :offset-assert 640)
   )
  :method-count-assert 44
  :size-assert         #x288
  :flag-assert         #x2c02100288
  (:methods
    (bt-vehicle-method-29 () none) ;; 29
    (bt-vehicle-method-30 () none) ;; 30
    (bt-vehicle-method-31 () none) ;; 31
    (bt-vehicle-method-32 () none) ;; 32
    (bt-vehicle-method-33 () none) ;; 33
    (bt-vehicle-method-34 () none) ;; 34
    (bt-vehicle-method-35 () none) ;; 35
    (bt-vehicle-method-36 () none) ;; 36
    (bt-vehicle-method-37 () none) ;; 37
    (bt-vehicle-method-38 () none) ;; 38
    (bt-vehicle-method-39 () none) ;; 39
    (bt-vehicle-method-40 () none) ;; 40
    (bt-vehicle-method-41 () none) ;; 41
    (bt-vehicle-method-42 () none) ;; 42
    (bt-vehicle-method-43 () none) ;; 43
    )
  (:state-methods
    die ;; 28
    )
  )
|#

#|
(deftype bt-pickup (bt-vehicle)
  ((spots                   UNKNOWN    4       :offset-assert 656)
   (riders                  UNKNOWN    2       :offset-assert 912)
   (quat-before-roll        quaternion :inline :offset-assert 928)
   (start-hit-time          uint64             :offset-assert 944)
   (roboguard-attackers     UNKNOWN    2       :offset-assert 952)
   (desired-thruster-length float              :offset-assert 968)
   (pickup-barrels          UNKNOWN    2       :offset-assert 976)
   )
  :method-count-assert 51
  :size-assert         #x3e0
  :flag-assert         #x33036003e0
  (:methods
    (bt-pickup-method-46 () none) ;; 46
    (bt-pickup-method-47 () none) ;; 47
    (bt-pickup-method-48 () none) ;; 48
    (bt-pickup-method-49 () none) ;; 49
    (bt-pickup-method-50 () none) ;; 50
    )
  (:state-methods
    die ;; 28
    path-follow ;; 45
    wait-for-player ;; 44
    )
  )
|#

#|
(deftype bt-hellcat (bt-vehicle)
  ((jmod-turret-guns      joint-mod-rotate-world :inline :offset-assert 656)
   (child-turret          uint64                         :offset-assert 688)
   (spots                 UNKNOWN                12      :offset-assert 704)
   (assigned-spots        UNKNOWN                2       :offset-assert 1472)
   (grunt-rider           uint64                         :offset-assert 1488)
   (grunt-rider-boarded?  uint64                         :offset-assert 1496)
   (rider-pitch           float                          :offset-assert 1504)
   (pitch-quat            quaternion             :inline :offset-assert 1520)
   (roll-amount           float                          :offset-assert 1536)
   (dest-roll-amount      float                          :offset-assert 1540)
   (roll-amount-seek-rate float                          :offset-assert 1544)
   (quat-before-bounce    quaternion             :inline :offset-assert 1552)
   (quat-grunt-tilt       quaternion             :inline :offset-assert 1568)
   (jmod-lgun             joint-mod-rotate-local :inline :offset-assert 1584)
   (jmod-rgun             joint-mod-rotate-local :inline :offset-assert 1616)
   (jmod-barrels          UNKNOWN                4       :offset-assert 1648)
   (barrel-fire-state     UNKNOWN                4       :offset-assert 1904)
   (engine-sound          uint32                         :offset-assert 1920)
   (thrust-sound          uint32                         :offset-assert 1924)
   (land-grunt-offset     float                          :offset-assert 1928)
   )
  :method-count-assert 52
  :size-assert         #x78c
  :flag-assert         #x340710078c
  (:methods
    (bt-hellcat-method-46 () none) ;; 46
    (bt-hellcat-method-47 () none) ;; 47
    (bt-hellcat-method-48 () none) ;; 48
    (bt-hellcat-method-49 () none) ;; 49
    (bt-hellcat-method-50 () none) ;; 50
    (bt-hellcat-method-51 () none) ;; 51
    )
  (:state-methods
    player-riding ;; 45
    wait-for-player ;; 44
    )
  )
|#

;; (define-extern *blow-tower-bombbat-path-cache* array)
;; (define-extern bt-vehicle-handler function)
;; (define-extern *bt-height-adjust* object)
;; (define-extern *bt-pickup-damage-info* array)
;; (define-extern *bt-hellcat-gun-nodes* array)
;; (define-extern *bt-hellcat-damage-info* array)
;; (define-extern *bt-turret-params* object)
;; (define-extern bt-gun-manager-init-by-other function)
;; (define-extern bt-gun-manager-handler function)
;; (define-extern *fov-to-use* object)
;; (define-extern *bt-clamp-curve-x* object)
;; (define-extern *bt-accel-curve* object)
;; (define-extern bt-hellcat-init-by-other function)
;; (define-extern draw-path-blow-curve function)
;; (define-extern bt-pickup-init-by-other function)
;; (define-extern bt-force-show-hud function)
;; (define-extern *blow-tower-kg-squad-member-settings* object)
;; (define-extern clamp-to-ground function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lfacrm1-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype lfacrm1-states (structure)
  ((door-current-interp float  :offset-assert 0)
   (door-target-interp  float  :offset-assert 4)
   (blink               float  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype lfac-hanger-door (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern update-lfacrm1-lights function)
;; (define-extern update-mood-lfacrm1 function)
;; (define-extern set-lfacrm1-door! function)
;; (define-extern lfac-hanger-door-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dummy-part                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-func-ground-spark-bounce function)
;; (define-extern spt-func-part-dummy-explode-spider-bomb function)
;; (define-extern check-gungame-piece-ground function) ;; (function sparticle-system sparticle-cpuinfo matrix none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dummy-art                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *gun-kg-robo-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-kg-bomb-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-kg-b-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-kg-c-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-kg-big-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-kg-bonus-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rc-three-eyes-bonus-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rc-two-eyes-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rc-three-eyes-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rc-one-eye-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rc-four-eyes-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-rachet-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-clank-exploder-params* joint-exploder-static-params)
;; (define-extern *gun-cit-a-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params
;; (define-extern *gun-cit-b-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params
;; (define-extern *gun-cit-c-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params
;; (define-extern *gun-cit-d-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gun-dummy                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpath-control-frame (structure)
  ((time      float  :offset-assert 0)
   (path-pos  uint8  :offset-assert 4)
   (command   uint8  :offset-assert 5) ;; tpath-command
   (move-type uint8  :offset-assert 6)
   (path-num  uint8  :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype tpath-info (structure)
  ((s-time       float                                :offset-assert 0)
   (num          uint16                               :offset-assert 4)
   (ref-time-num int16                                :offset-assert 6)
   (score        int16                                :offset-assert 8)
   (flags        uint16                               :offset-assert 10) ;; tpath-flags
   (num-anims    uint8                                :offset-assert 12)
   (bonus-time   float                                :offset-assert 16)
   (list         (array int32)                        :offset-assert 20) ;; guessed by decompiler
   (anims        (inline-array tpath-control-frame) 3 :offset-assert 24) ;; guessed by decompiler
   (anim1        (inline-array tpath-control-frame)   :offset-assert 24) ;; guessed by decompiler
   (anim2        (inline-array tpath-control-frame)   :offset-assert 28) ;; guessed by decompiler
   (anim3        (inline-array tpath-control-frame)   :offset-assert 32) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )
|#

#|
(deftype gun-dummy-gun-info (structure)
  ((gun-state              uint8              :offset-assert 0)
   (joint-index            int16              :offset-assert 2)
   (trans                  vector     :inline :offset-assert 16)
   (quat                   quaternion :inline :offset-assert 32)
   (next-fire-time         uint64             :offset-assert 48)
   (total-rotation         float              :offset-assert 56)
   (current-rotation       float              :offset-assert 60)
   (last-track-player-time uint64             :offset-assert 64)
   (last-known-player-pos  vector     :inline :offset-assert 80)
   (fire-speed-scalar      float              :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x64
  :flag-assert         #x900000064
  )
|#

#|
(deftype gun-dummy (process-focusable)
  ((incoming-attack-id       uint32                      :offset-assert 208)
   (incoming-attack-id-time  uint64                      :offset-assert 216)
   (train-man                uint64                      :offset-assert 224) ;; handle
   (info                     tpath-info                  :offset-assert 232)
   (y-offset                 float                       :offset-assert 236)
   (rot-y-offset             float                       :offset-assert 240)
   (quat                     quaternion          :inline :offset-assert 256)
   (hit-points               int32                       :offset-assert 272)
   (score                    float                       :offset-assert 276)
   (path-num                 uint32                      :offset-assert 280)
   (next-spark               uint64                      :offset-assert 288) ;; int64
   (inout-percent            float                       :offset-assert 296)
   (quat-ground              quaternion          :inline :offset-assert 304)
   (path-pos                 float                       :offset-assert 320)
   (score-speed              float                       :offset-assert 324)
   (first-time-command       symbol                      :offset-assert 328) ;; guessed by decompiler
   (current                  tpath-control-frame         :offset-assert 332) ;; (inline-array tpath-control-frame)
   (impact                   vector              :inline :offset-assert 336)
   (done?                    symbol                      :offset-assert 352) ;; guessed by decompiler
   (move-sound               sound-id                    :offset-assert 356) ;; guessed by decompiler
   (turn-sound               sound-id                    :offset-assert 360) ;; guessed by decompiler
   (spin-sound               sound-id                    :offset-assert 364) ;; guessed by decompiler
   (last-combo-time          uint64                      :offset-assert 368) ;; time-frame
   (gun-info                 gun-dummy-gun-info  :inline :offset-assert 384)
   (joint-exploder           basic                       :offset-assert 484)
   (joint-explode-skel-group basic                       :offset-assert 488)
   (joint-explode-anim-index int16                       :offset-assert 492)
   (hum-sound                uint32                      :offset-assert 496)
   (explode-part-group       basic                       :offset-assert 500)
   )
  :method-count-assert 38
  :size-assert         #x1f8
  :flag-assert         #x26018001f8
  (:methods
    (gun-dummy-method-29 () none) ;; 29 ;; (path-playing? (_type_) symbol)
    (gun-dummy-method-30 () none) ;; 30 ;; (path-time-elapsed (_type_) float)
    (gun-dummy-method-31 () none) ;; 31 ;; (init-tpath-info! (_type_ tpath-info) none)
    (gun-dummy-method-32 () none) ;; 32 ;; (break-dummy (_type_) none)
    (gun-dummy-method-33 () none) ;; 33
    (gun-dummy-method-34 () none) ;; 34
    (gun-dummy-method-35 () none) ;; 35
    (gun-dummy-method-36 () none) ;; 36
    (gun-dummy-method-37 () none) ;; 37
    )
  (:state-methods
    idle ;; 28, old: (init-dummy-collison! (_type_) none)
    )
  )
|#

#|
(deftype gun-dummy-gun (gun-dummy)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  (:methods
    (gun-dummy-gun-method-38 () none) ;; 38
    )
  )
|#

#|
(deftype gun-dummy-base (gun-dummy)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  (:methods
    (gun-dummy-base-method-38 () none) ;; 38
    )
  )
|#

#|
(deftype gun-dummy-explode (gun-dummy)
  ((arm-start-time     uint64  :offset-assert 504)
   (explode-start-time uint64  :offset-assert 504)
   (explode-delay      uint64  :offset-assert 512)
   (exploded?          basic   :offset-assert 520)
   (last-flash-val     float   :offset-assert 524)
   )
  :method-count-assert 39
  :size-assert         #x210
  :flag-assert         #x2701900210
  (:state-methods
    explode ;; 38
    idle ;; 28
    )
  )
|#

#|
(deftype gun-dummy-shot (guard-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

#|
(deftype gun-dummy-kg-b (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-rc-two-eyes (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-rc-one-eye (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-rc-three-eyes (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-kg-c (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-kg-big (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-rc-four-eyes (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-kg-bonus (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-rc-three-eyes-bonus (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-a (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-b (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-c (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-d (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-ratchet (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

#|
(deftype gun-dummy-cit-clank (gun-dummy-base)
  ()
  :method-count-assert 39
  :size-assert         #x1f8
  :flag-assert         #x27018001f8
  )
|#

;; (define-extern *gungame-level* object)
;; (define-extern *tpath-rand* object) ;; uint
;; (define-extern generate-next-fire-time function)
;; (define-extern gun-dummy-event-handler function)
;; (define-extern gun-dummy-gun-aim-jmod-func function)
;; (define-extern gun-dummy-gun-init-by-other function)
;; (define-extern gun-dummy-base-init-by-other function)
;; (define-extern gun-dummy-explode-init-by-other function)
;; (define-extern *dummy-flash-counters* array)
;; (define-extern spawn-dummy-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-data                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gungame-crate (structure)
  ((pos   vector :inline :offset-assert 0)
   (pos-x float          :offset-assert 0)
   (pos-y float          :offset-assert 4)
   (pos-z float          :offset-assert 8)
   (angle float          :offset-assert 12)
   (ammo  int32          :offset-assert 16) ;; pickup-type
   (num   uint32         :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern *entrance-gungame-crates-pos* array) ;; (array gungame-crate)
;; (define-extern *gungame-red-crates-pos* array) ;; (array gungame-crate)
;; (define-extern *gungame-yellow-crates-pos* array) ;; (array gungame-crate)
;; (define-extern *gungame-blue-crates-pos* array) ;; (array gungame-crate)
;; (define-extern *gungame-peace-crates-pos* array) ;; (array gungame-crate)
;; (define-extern *course1-path-global-info* array)
;; (define-extern *course2-path-global-info* array)
;; (define-extern *course3-path-global-info* array)
;; (define-extern *course4-path-global-info* array)
;; (define-extern *yellow-training-path-global-info* array) ;; (array tpath-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-manager                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gun-course-info (structure)
  ((course        uint64  :offset-assert 0)
   (start-door    int8    :offset-assert 8)
   (end-door      int8    :offset-assert 9)
   (text          uint32  :offset-assert 12)
   (etype         basic   :offset-assert 16)
   (task-bronze   uint16  :offset-assert 20)
   (task-silver   uint16  :offset-assert 22)
   (task-gold     uint16  :offset-assert 24)
   (game-score    uint8   :offset-assert 26)
   (pass-speech   uint16  :offset-assert 28)
   (training-goal float   :offset-assert 32)
   (allowed-guns  uint64  :offset-assert 40)
   (start-gun     int32   :offset-assert 48)
   (ammo-type     int32   :offset-assert 52)
   (training-task uint16  :offset-assert 56)
   (play-text     uint32  :offset-assert 60)
   (play-button   uint64  :offset-assert 64)
   (give-eggs?    basic   :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )
|#

#|
(deftype gungame-task-manager (task-manager)
  ((actor-group         uint32           :offset-assert 236)
   (actor-group-count   int32            :offset-assert 240)
   (course-list         basic            :offset-assert 244)
   (activated-course    gun-course-info  :offset-assert 248)
   (activated-course-id uint64           :offset-assert 252)
   )
  :method-count-assert 36
  :size-assert         #x108
  :flag-assert         #x2400900108
  (:methods
    (gungame-task-manager-method-34 () none) ;; 34
    (gungame-task-manager-method-35 () none) ;; 35
    )
  (:state-methods
    waiting ;; 33
    active-door-opening ;; 32
    active ;; 15
    )
  )
|#

#|
(deftype gungame-manager (process)
  ((actor-group            uint32     :offset-assert 124)
   (actor-group-count      int32      :offset-assert 128)
   (score                  int32      :offset-assert 132)
   (course                 basic      :offset-assert 136)
   (course-crates          UNKNOWN 32 :offset-assert 140)
   (course-type            uint64     :offset-assert 396)
   (hud-score              uint64     :offset-assert 404)
   (hud-goal               uint64     :offset-assert 412)
   (task-gold              uint16     :offset-assert 420)
   (task-silver            uint16     :offset-assert 422)
   (task-bronze            uint16     :offset-assert 424)
   (end-door               uint8      :offset-assert 426)
   (start-door             uint8      :offset-assert 427)
   (game-score             uint8      :offset-assert 428)
   (training-goal          float      :offset-assert 432)
   (training?              basic      :offset-assert 436)
   (state-time             uint64     :offset-assert 444)
   (start-time             uint64     :offset-assert 452)
   (parent-taskmgr         uint64     :offset-assert 460)
   (goal-amount            int8       :offset-assert 468)
   (egg-amount             int8       :offset-assert 469)
   (pass-speech            uint16     :offset-assert 470)
   (primary-target-history UNKNOWN 16 :offset-assert 476)
   (score-gold             int32      :offset-assert 988)
   (score-silver           int32      :offset-assert 992)
   (score-bronze           int32      :offset-assert 996)
   (score-high             int32      :offset-assert 1000)
   )
  :method-count-assert 32
  :size-assert         #x3f0
  :flag-assert         #x20037003f0
  (:methods
    (gungame-manager-method-18 () none) ;; 18
    (gungame-manager-method-19 () none) ;; 19
    (gungame-manager-method-20 () none) ;; 20
    (gungame-manager-method-21 () none) ;; 21
    (gungame-manager-method-22 () none) ;; 22
    (gungame-manager-method-23 () none) ;; 23
    (gungame-manager-method-24 () none) ;; 24
    (gungame-manager-method-25 () none) ;; 25
    (gungame-manager-method-26 () none) ;; 26
    (gungame-manager-method-27 () none) ;; 27
    (gungame-manager-method-28 () none) ;; 28
    (gungame-manager-method-29 () none) ;; 29
    (gungame-manager-method-30 () none) ;; 30
    (gungame-manager-method-31 () none) ;; 31
    )
  (:state-methods
    wait-start ;; 14
    end-course ;; 16
    end-course-open-door ;; 17
    course ;; 15
    )
  )
|#

#|
(deftype training-path (process-drawable)
  ((num uint32  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype gungame-mgr-1 (gungame-manager)
  ()
  :method-count-assert 33
  :size-assert         #x3f0
  :flag-assert         #x21037003f0
  (:state-methods
    wait-load ;; 32
    )
  )
|#

#|
(deftype gungame-mgr-2 (gungame-manager)
  ()
  :method-count-assert 33
  :size-assert         #x3f0
  :flag-assert         #x21037003f0
  (:state-methods
    wait-load ;; 32
    )
  )
|#

#|
(deftype gungame-mgr-rnc (gungame-manager)
  ()
  :method-count-assert 33
  :size-assert         #x3f0
  :flag-assert         #x21037003f0
  (:state-methods
    wait-load ;; 32
    )
  )
|#

#|
(deftype gungame-mgr-3 (gungame-mgr-rnc)
  ()
  :method-count-assert 33
  :size-assert         #x3f0
  :flag-assert         #x21037003f0
  )
|#

#|
(deftype gungame-mgr-4 (gungame-mgr-rnc)
  ()
  :method-count-assert 33
  :size-assert         #x3f0
  :flag-assert         #x21037003f0
  (:state-methods
    wait-load ;; 32
    )
  )
|#

#|
(deftype training-manager (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

;; (define-extern gungame-manager-init-by-other function)
;; (define-extern exit-course state)
;; (define-extern *jak3-training-path-info* array)
;; (define-extern *gun-course-info* array)
;; (define-extern *gungame-test-crates-pos* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *lgunnorm-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gungame-door (process-drawable)
  ((front?      basic     :offset-assert 200)
   (close-sound sound-id  :offset-assert 204) ;; guessed by decompiler
   (train       uint64    :offset-assert 208) ;; handle
   (other-door  uint64    :offset-assert 216)
   (want-close? basic     :offset-assert 224)
   )
  :method-count-assert 28
  :size-assert         #xe4
  :flag-assert         #x1c007000e4
  (:methods
    (gungame-door-method-25 () none) ;; 25
    (gungame-door-method-26 () none) ;; 26
    (gungame-door-method-27 () none) ;; 27
    )
  (:state-methods
    close ;; 22, old: (close () _type_ :state)
    open ;; 21, old: (open () _type_ :state)
    opened ;; 24, old: (gungame-door-method-24 (_type_) symbol)
    force-close ;; 23, old: (gungame-door-method-23 (_type_) symbol)
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern gungame-door-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gungame-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-part-fma-daxter-guncourse-slide-dust function)
;; (define-extern spt-birth-func-brightness-part-fma-daxter-guncourse-land-dust function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vinroom-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vinroom-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-vinroom-sphere function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; power-game                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype power-game-cell (structure)
  ((up    uint8  :offset-assert 0)
   (right uint8  :offset-assert 1)
   (down  uint8  :offset-assert 2)
   (left  uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype power-game-cam-info (structure)
  ((cam-pos           vector :inline :offset-assert 0)
   (cam-pos-x-angle   deg            :offset-assert 16)
   (cam-dist          meters         :offset-assert 20)
   (cam-x-angle       deg            :offset-assert 24)
   (cam-y-angle       deg            :offset-assert 28)
   (cam-y-angle-dest  deg            :offset-assert 32)
   (cam-y-angle-speed deg            :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype power-game (process-drawable)
  ((task            basic                       :offset-assert 200)
   (lentity         basic                       :offset-assert 204)
   (hud-score       uint64                      :offset-assert 208)
   (hud-goal        uint64                      :offset-assert 216)
   (base-score      float                       :offset-assert 224)
   (score           float                       :offset-assert 228)
   (score-time      uint64                      :offset-assert 232)
   (score-met       basic                       :offset-assert 240)
   (game            uint32                      :offset-assert 244)
   (blockers        basic                       :offset-assert 248)
   (dots            basic                       :offset-assert 252)
   (miss-max        int32                       :offset-assert 256)
   (miss-count      int32                       :offset-assert 260)
   (miss-time       uint64                      :offset-assert 264)
   (point-win       float                       :offset-assert 272)
   (game-start-time uint64                      :offset-assert 280)
   (wave-start-time uint64                      :offset-assert 288)
   (wave-index      int32                       :offset-assert 296)
   (difficulty      int32                       :offset-assert 300)
   (speech-time     uint64                      :offset-assert 304)
   (speech-count    int32                       :offset-assert 312)
   (speech-last     UNKNOWN             8       :offset-assert 316)
   (spawn-time      uint64                      :offset-assert 352)
   (center          vector              :inline :offset-assert 368)
   (corner          UNKNOWN             2       :offset-assert 384)
   (cam-targ        power-game-cam-info :inline :offset-assert 416)
   (cam-cur         power-game-cam-info :inline :offset-assert 464)
   (player          uint64                      :offset-assert 504)
   (chaser          uint64                      :offset-assert 512)
   (zapper          UNKNOWN             5       :offset-assert 520)
   (switcher        uint64                      :offset-assert 560)
   (switcher-time   uint64                      :offset-assert 568)
   (glyph           uint64                      :offset-assert 576)
   (score-part      UNKNOWN             1       :offset-assert 584)
   )
  :method-count-assert 46
  :size-assert         #x24c
  :flag-assert         #x2e01d0024c
  (:methods
    (power-game-method-26 () none) ;; 26
    (power-game-method-27 () none) ;; 27
    (power-game-method-28 () none) ;; 28
    (power-game-method-29 () none) ;; 29
    (power-game-method-30 () none) ;; 30
    (power-game-method-31 () none) ;; 31
    (power-game-method-32 () none) ;; 32
    (power-game-method-33 () none) ;; 33
    (power-game-method-34 () none) ;; 34
    (power-game-method-35 () none) ;; 35
    (power-game-method-36 () none) ;; 36
    (power-game-method-37 () none) ;; 37
    (power-game-method-38 () none) ;; 38
    (power-game-method-39 () none) ;; 39
    (power-game-method-40 () none) ;; 40
    (power-game-method-41 () none) ;; 41
    (power-game-method-42 () none) ;; 42
    (power-game-method-43 () none) ;; 43
    (power-game-method-44 () none) ;; 44
    (power-game-method-45 () none) ;; 45
    )
  (:state-methods
    win ;; 25
    lose ;; 24
    active ;; 23
    wait-for-start ;; 22
    idle ;; 20
    hide ;; 21
    )
  )
|#

#|
(deftype power-game-object (process-focusable)
  ((local       vector :inline :offset-assert 208)
   (dir         int8           :offset-assert 224)
   (next-dir    int8           :offset-assert 225)
   (slide-dir   int8           :offset-assert 226)
   (speed       float          :offset-assert 228)
   (slide-dist  int32          :offset-assert 232)
   (slide-speed float          :offset-assert 236)
   (slide-count int32          :offset-assert 240)
   (slide-lock  basic          :offset-assert 244)
   (slide-dest  vector :inline :offset-assert 256)
   (turn-pos    vector :inline :offset-assert 272)
   (target      uint64         :offset-assert 288)
   (start-time  uint64         :offset-assert 296)
   )
  :method-count-assert 32
  :size-assert         #x130
  :flag-assert         #x2000b00130
  (:methods
    (power-game-object-method-30 () none) ;; 30
    (power-game-object-method-31 () none) ;; 31
    )
  (:state-methods
    die ;; 29
    active ;; 28
    )
  )
|#

#|
(deftype power-game-player (power-game-object)
  ((slide-rel-dir int32  :offset-assert 304)
   )
  :method-count-assert 32
  :size-assert         #x134
  :flag-assert         #x2000c00134
  (:state-methods
    die ;; 29
    active ;; 28
    )
  )
|#

#|
(deftype power-game-chaser (power-game-object)
  ((targ-dist float  :offset-assert 304)
   )
  :method-count-assert 32
  :size-assert         #x134
  :flag-assert         #x2000c00134
  (:state-methods
    active ;; 28
    )
  )
|#

#|
(deftype power-game-switcher (power-game-object)
  ((targ-dist float   :offset-assert 304)
   (turn-time uint64  :offset-assert 312)
   )
  :method-count-assert 33
  :size-assert         #x140
  :flag-assert         #x2100c00140
  (:state-methods
    die ;; 29
    active ;; 28
    idle ;; 32
    )
  )
|#

#|
(deftype power-game-zapper (power-game-object)
  ((change-time     uint64  :offset-assert 304)
   (close-time      uint64  :offset-assert 312)
   (switch-duration uint64  :offset-assert 320)
   (lane-time       uint64  :offset-assert 328)
   (lane-target     int32   :offset-assert 336)
   (lane-target-old int32   :offset-assert 340)
   (lane-old        int32   :offset-assert 344)
   (rings           uint32  :offset-assert 348)
   )
  :method-count-assert 32
  :size-assert         #x160
  :flag-assert         #x2000e00160
  (:state-methods
    die ;; 29
    active ;; 28
    )
  )
|#

#|
(deftype power-game-glyph (power-game-object)
  ((pickup-type int32  :offset-assert 304)
   (angle       deg    :offset-assert 308)
   )
  :method-count-assert 33
  :size-assert         #x138
  :flag-assert         #x2100c00138
  (:methods
    (power-game-glyph-method-32 () none) ;; 32
    )
  (:state-methods
    die ;; 29
    active ;; 28
    )
  )
|#

;; (define-extern birth-func-power-score function)
;; (define-extern *power-game-track* object)
;; (define-extern *power-game* object)
;; (define-extern *power-game-speech-list* object)
;; (define-extern power-game-player-post function)
;; (define-extern power-game-player-init function)
;; (define-extern power-game-chaser-post function)
;; (define-extern power-game-chaser-init function)
;; (define-extern power-game-switcher-post function)
;; (define-extern power-game-switcher-init function)
;; (define-extern power-game-zapper-post function)
;; (define-extern power-game-zapper-init function)
;; (define-extern power-game-glyph-post function)
;; (define-extern power-game-glyph-init function)
;; (define-extern cam-power-game-update function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ljkdxvin-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *ljkdxvin-texture-anim-array* texture-anim-array)
;; (define-extern ljkdxvin-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; target-tube                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tube-info (basic)
  ((entity           basic            :offset-assert 4)
   (tube             uint64           :offset-assert 8) ;; handle
   (downhill         vector   :inline :offset-assert 16)
   (centertube       vector   :inline :offset-assert 32)
   (downtube         vector   :inline :offset-assert 48)
   (sidetube         vector   :inline :offset-assert 64)
   (foretube         vector   :inline :offset-assert 80)
   (old-transv       vector   :inline :offset-assert 96)
   (mod-x            float            :offset-assert 112)
   (mod-y            float            :offset-assert 116)
   (start-time       uint64           :offset-assert 120) ;; time-frame
   (turn-anim-targ   float            :offset-assert 128)
   (turn-anim-frame  float            :offset-assert 132)
   (turn-anim-vel    float            :offset-assert 136)
   (tube-sound-id    sound-id         :offset-assert 140) ;; guessed by decompiler
   (tube-sound-vol   float            :offset-assert 144)
   (tube-sound-pitch float            :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )
|#

#|
(deftype tube-bank (basic)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

#|
(deftype slide-control (process-drawable)
  ((target uint64         :offset-assert 200) ;; handle
   (pos    float          :offset-assert 208)
   (trans  vector :inline :offset-assert 224)
   (rot    vector :inline :offset-assert 240)
   (side   vector :inline :offset-assert 256)
   )
  :method-count-assert 22
  :size-assert         #x110
  :flag-assert         #x1600900110
  (:state-methods
    slide-control-ride ;; 21, old: (slide-control-ride () _type_ :state)
    slide-control-watch ;; 20, old: (slide-control-watch () _type_ :state)
    )
  )
|#

;; (define-extern *tube-mods* surface) ;; surface
;; (define-extern *tube-jump-mods* surface) ;; surface
;; (define-extern *tube-hit-mods* surface) ;; surface
;; (define-extern *tube-surface* surface) ;; surface
;; (define-extern *TUBE-bank* tube-bank) ;; tube-bank
;; (define-extern tube-sounds function) ;; (function sound-id :behavior target)
;; (define-extern tube-thrust function) ;; (function float float none :behavior target)
;; (define-extern target-tube-post function) ;; (function none :behavior target)
;; (define-extern target-tube-turn-anim function) ;; (function none :behavior target)
;; (define-extern target-tube-walk object)
;; (define-extern target-tube-jump object) ;; (state float float target)
;; (define-extern target-tube-hit object) ;; (state symbol attack-info target)
;; (define-extern target-tube-death object) ;; (state symbol target)
;; (define-extern distance-from-tangent function) ;; (function path-control float vector vector vector vector float)
;; (define-extern find-target-point function) ;; (function vector float :behavior slide-control)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurc-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurc-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype precurc-states (structure)
  ((pulse pulse-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

;; (define-extern init-mood-precurc function)
;; (define-extern update-precurc-lights function)
;; (define-extern update-mood-precurc function)
;; (define-extern precurc-activate function)
;; (define-extern precur-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; precurc-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype precur-elevator (elevator)
  ()
  :method-count-assert 52
  :size-assert         #x1a0
  :flag-assert         #x34012001a0
  )
|#

#|
(deftype precur-door-a (process-drawable)
  ((open-test    basic   :offset-assert 200)
   (open-started uint64  :offset-assert 208)
   (do-camera?   basic   :offset-assert 216)
   (open-frame   float   :offset-assert 220)
   )
  :method-count-assert 23
  :size-assert         #xe0
  :flag-assert         #x17006000e0
  ;; field open-test uses ~A with a signed load.
  (:methods
    (precur-door-a-method-22 () none) ;; 22
    )
  (:state-methods
    open ;; 20
    close ;; 21
    )
  )
|#

#|
(deftype precur-swingpole-pop (swingpole)
  ((moving?         basic   :offset-assert 284)
   (player-grabbed? basic   :offset-assert 288)
   (halfway?        basic   :offset-assert 292)
   (stopped-time    uint64  :offset-assert 296)
   (movedist        float   :offset-assert 304)
   (tt              float   :offset-assert 308)
   (paused-time     uint64  :offset-assert 312)
   (direction       uint8   :offset-assert 320)
   )
  :method-count-assert 25
  :size-assert         #x141
  :flag-assert         #x1900d00141
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; external-player-control        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype player-controller-init-params (structure)
  ((mode        basic          :offset-assert 0)
   (flags       uint32         :offset-assert 4)
   (targ-pos    vector :inline :offset-assert 16)
   (notify-proc uint64         :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype player-controller (process-focusable)
  ((params   player-controller-init-params :inline :offset-assert 208)
   (targ-pos vector                        :inline :offset-assert 256)
   )
  :method-count-assert 36
  :size-assert         #x110
  :flag-assert         #x2400900110
  (:methods
    (player-controller-method-32 () none) ;; 32
    (player-controller-method-33 () none) ;; 33
    (player-controller-method-34 () none) ;; 34
    (player-controller-method-35 () none) ;; 35
    )
  (:state-methods
    active ;; 29
    lock ;; 31
    clip-to-nav-mesh ;; 30
    idle ;; 28
    )
  )
|#

;; (define-extern *target-controller-pad* cpad-info)
;; (define-extern setup-control-pad function)
;; (define-extern set-pad-world-dir function)
(define-extern override-player-controls (function int))
;; (define-extern player-controller-init-by-other function)
;; (define-extern player-controller-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wcar-marauder-b                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype v-marauder-b (wcar-base)
  ((jmod-axles     UNKNOWN                4       :offset-assert 2752)
   (jmod-gun-x     joint-mod-rotate-local :inline :offset-assert 2880)
   (jmod-gun-y     joint-mod-rotate-local :inline :offset-assert 2912)
   (turret-control turret-control         :inline :offset-assert 2944)
   )
  :method-count-assert 203
  :size-assert         #xbe0
  :flag-assert         #xcb0b600be0
  (:state-methods
    explode ;; 60
    )
  )
|#

;; (define-extern *v-marauder-b-turret-control-info* object)
;; (define-extern *v-marauder-b-turret-guard-settings* object)
;; (define-extern *v-marauder-b-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-chase-path-h            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype deschase-node (structure)
  ((position  vector :inline :offset-assert 0)
   (pos-x     float          :offset-assert 0)
   (pos-y     float          :offset-assert 4)
   (pos-z     float          :offset-assert 8)
   (speed     float          :offset-assert 16)
   (next-node int32          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype deschase-path (structure)
  ((node-count uint16  :offset-assert 0)
   (node       uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-chase-path              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *desert-chase-marauder-path* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-chase                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype deschase-point (structure)
  ((pos    vector     :inline :offset-assert 0)
   (quat   quaternion :inline :offset-assert 16)
   (i-node int8               :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype v-catapult-shot-embers (metalhead-grenade-shot)
  ((ptracker-proc uint64  :offset-assert 536)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype catapult-target (process-drawable)
  ((alpha float  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:methods
    (catapult-target-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype deschase-vehicle (structure)
  ((handle      uint64  :offset-assert 0)
   (wait-timer  uint64  :offset-assert 8)
   (shot-fired? basic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype desert-chase-ambush-manager (task-manager)
  ((marauder-nav-mesh   basic     :offset-assert 240)
   (marauder            UNKNOWN 5 :offset-assert 248)
   (m-free-list         basic     :offset-assert 288)
   (marauder-count      uint8     :offset-assert 292)
   (total-spawned       uint8     :offset-assert 293)
   (check-timer         uint64    :offset-assert 296)
   (marauder-entity     basic     :offset-assert 304)
   (h-player-controller uint64    :offset-assert 312)
   (player-moved?       basic     :offset-assert 320)
   (vehicle-nav-mesh    basic     :offset-assert 324)
   (vehicle             UNKNOWN 4 :offset-assert 328)
   (vehicle-count       uint8     :offset-assert 456)
   (v-free-list         basic     :offset-assert 460)
   (total-veh-spawned   uint8     :offset-assert 464)
   (target-point        UNKNOWN 4 :offset-assert 480)
   (last-shot-time      uint64    :offset-assert 544)
   )
  :method-count-assert 36
  :size-assert         #x228
  :flag-assert         #x2401b00228
  (:methods
    (desert-chase-ambush-manager-method-32 () none) ;; 32
    (desert-chase-ambush-manager-method-33 () none) ;; 33
    (desert-chase-ambush-manager-method-34 () none) ;; 34
    (desert-chase-ambush-manager-method-35 () none) ;; 35
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype deschase-artifact (process-drawable)
  ((arrow uint64         :offset-assert 200)
   (pos   vector :inline :offset-assert 208)
   (angs  vector :inline :offset-assert 224)
   )
  :method-count-assert 23
  :size-assert         #xf0
  :flag-assert         #x17007000f0
  (:methods
    (deschase-artifact-method-21 () none) ;; 21
    (deschase-artifact-method-22 () none) ;; 22
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype hud-desert-chase-marauders (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype deschase-vehicle-control (structure)
  ((vehicle      uint64         :offset-assert 0)
   (target       uint64         :offset-assert 8)
   (path         deschase-path  :offset-assert 16)
   (speed        float          :offset-assert 20)
   (i-node       int32          :offset-assert 24)
   (max-dist     float          :offset-assert 28)
   (speed-factor float          :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x24
  :flag-assert         #xd00000024
  (:methods
    (deschase-vehicle-control-method-9 () none) ;; 9
    (deschase-vehicle-control-method-10 () none) ;; 10
    (deschase-vehicle-control-method-11 () none) ;; 11
    (deschase-vehicle-control-method-12 () none) ;; 12
    )
  )
|#

#|
(deftype desert-chase-chase-manager (task-manager)
  ((h-player-controller uint64               :offset-assert 240)
   (check-timer         uint64               :offset-assert 248)
   (speech-time         uint64               :offset-assert 256)
   (last-speech         int8                 :offset-assert 264)
   (death-count         int16                :offset-assert 266)
   (max-dist            float                :offset-assert 268)
   (suck-factor         float                :offset-assert 272)
   (player-moved?       basic                :offset-assert 276)
   (control-array       UNKNOWN            4 :offset-assert 280)
   (minimap             connection-minimap   :offset-assert 472)
   (artifact            uint64               :offset-assert 480)
   )
  :method-count-assert 34
  :size-assert         #x1e8
  :flag-assert         #x22017001e8
  (:methods
    (desert-chase-chase-manager-method-32 () none) ;; 32
    (desert-chase-chase-manager-method-33 () none) ;; 33
    )
  (:state-methods
    complete ;; 16
    active ;; 15
    )
  )
|#

;; (define-extern *stronghold-inside-point* object)
;; (define-extern *stronghold-vehicle-stop-point* object)
;; (define-extern *stronghold-player-goto-point* object)
;; (define-extern *stronghold-marauder-start* array)
;; (define-extern *deschase-catapult-spawn-point* array)
;; (define-extern catapult-target-handler function)
;; (define-extern catapult-target-init-by-other function)
;; (define-extern desert-chase-ambush-intro-sequence function)
;; (define-extern deschase-artifact-init-by-other function)
;; (define-extern deschase-artifact-spawn function)
;; (define-extern *stronghold-vehicle-start* array)
;; (define-extern *desert-chase-vehicle-start* array)
;; (define-extern desert-chase-chase-intro-sequence function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hiphog-exterior-marquee (process-drawable)
  ((rot           vector                   :inline :offset-assert 208)
   (master-enable uint32                           :offset-assert 224)
   (mode          uint32                           :offset-assert 240)
   (counter       int32                            :offset-assert 244)
   (parts         sparticle-launch-control 1       :offset-assert 248) ;; guessed by decompiler
   )
  :method-count-assert 22
  :size-assert         #xfc
  :flag-assert         #x16008000fc
  (:methods
    (hiphog-exterior-marquee-method-21 () none) ;; 21 ;; (hiphog-exterior-marquee-method-21 (_type_) none)
    )
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype farthy (process-drawable)
  ((new-trans-hook basic  :offset-assert 200)
   (cur-trans-hook basic  :offset-assert 204)
   )
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15005000d0
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

;; (define-extern check-drop-level-ctyport-drop-userdata function) ;; (function sparticle-system sparticle-cpuinfo matrix none)
;; (define-extern *hiphog-exterior-marquee* array) ;; (array object)
;; (define-extern ctyport-sparticle-mode-animate function)
;; (define-extern *hiphog-exterior-marquee-group-ids* array) ;; (array int32)
;; (define-extern *hiphog-exterior-marquee-daxter-group-ids* array) ;; (array int32)
;; (define-extern *range-color-rubble-flame* curve-color-fast)
;; (define-extern *range-alpha-rubble-flame* curve2d-fast)
;; (define-extern *range-scale-rubble-flame-x* curve2d-fast)
;; (define-extern *range-scale-rubble-flame-y* curve2d-fast)
;; (define-extern *r-curve-rubble-flame* curve2d-fast)
;; (define-extern *g-curve-rubble-flame* curve2d-fast)
;; (define-extern *b-curve-rubble-flame* curve2d-fast)
;; (define-extern *curve-alpha-rubble-flame* curve2d-fast)
;; (define-extern *curve-scale-rubble-flame-x* curve2d-fast)
;; (define-extern *curve-scale-rubble-flame-y* curve2d-fast)
;; (define-extern *part-ctyport-rubble-fire-flame-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype port-board-vent (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  )
|#

;; (define-extern spt-birth-func-brightness-daxter-crush-dust function)
;; (define-extern *range-dax-sign-explo-dust-color* curve-color-fast)
;; (define-extern *range-dax-sign-explo-dust-alpha* curve2d-fast)
;; (define-extern *range-dax-sign-explo-dust-scale-x* curve2d-fast)
;; (define-extern *range-dax-sign-explo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-dust-alpha* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-dust-scale-y* curve2d-fast)
;; (define-extern *part-daxter-sign-explosion-dust-in-curve-settings* object)
;; (define-extern *range-dax-sign-explo-color* curve-color-fast)
;; (define-extern *range-dax-sign-explo-alpha* curve2d-fast)
;; (define-extern *range-dax-sign-explo-scale-x* curve2d-fast)
;; (define-extern *range-dax-sign-explo-scale-y* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-alpha* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-scale-x* curve2d-fast)
;; (define-extern *curve-dax-sign-explo-scale-y* curve2d-fast)
;; (define-extern *part-daxter-sign-explosion-texture-curve-settings* object)
;; (define-extern *range-fma-barrier-explo-big-color* curve-color-fast)
;; (define-extern *range-fma-barrier-explo-big-alpha* curve2d-fast)
;; (define-extern *range-fma-barrier-explo-big-scale-x* curve2d-fast)
;; (define-extern *range-fma-barrier-explo-big-scale-y* curve2d-fast)
;; (define-extern *curve-fma-barrier-explo-big-alpha* curve2d-fast)
;; (define-extern *curve-fma-barrier-explo-big-scale-x* curve2d-fast)
;; (define-extern *curve-fma-barrier-explo-big-scale-y* curve2d-fast)
;; (define-extern *part-fma-barrier-explosion-big-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-guard-projectile           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vehicle-grenade (projectile-bounce)
  ((blast-radius float  :offset-assert 548)
   )
  :method-count-assert 45
  :size-assert         #x228
  :flag-assert         #x2d01b00228
  (:methods
    (vehicle-grenade-method-44 () none) ;; 44
    )
  (:state-methods
    sitting ;; 41
    impact ;; 22
    )
  )
|#

#|
(deftype vehicle-grenade-deflect (vehicle-grenade)
  ((has-been-deflected basic  :offset-assert 552)
   (has-hit-ground     basic  :offset-assert 556)
   )
  :method-count-assert 45
  :size-assert         #x230
  :flag-assert         #x2d01b00230
  (:state-methods
    moving ;; 23
    )
  )
|#

#|
(deftype guard-lazer-shot (projectile)
  ()
  :method-count-assert 41
  :size-assert         #x200
  :flag-assert         #x2901800200
  (:state-methods
    dissipate ;; 21
    )
  )
|#

;; (define-extern guard-lazer-shot-move function) ;; (function guard-lazer-shot none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail-graph                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *trail-graph* trail-graph) ;; trail-graph

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bike                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype h-bike-base (hvehicle)
  ()
  :method-count-assert 162
  :size-assert         #x3b0
  :flag-assert         #xa2033003b0
  )
|#

#|
(deftype h-bike-a (h-bike-base)
  ((fin-fl  joint-mod-rotate-local :inline :offset-assert 944)
   (fin-fr  joint-mod-rotate-local :inline :offset-assert 976)
   (fin-rl  joint-mod-rotate-local :inline :offset-assert 1008)
   (fin-rr  joint-mod-rotate-local :inline :offset-assert 1040)
   (rudder  joint-mod-rotate-local :inline :offset-assert 1072)
   (brake-l joint-mod-rotate-local :inline :offset-assert 1104)
   (brake-r joint-mod-rotate-local :inline :offset-assert 1136)
   )
  :method-count-assert 162
  :size-assert         #x490
  :flag-assert         #xa204100490
  )
|#

#|
(deftype h-bike-b (h-bike-base)
  ((fin-rl   joint-mod-rotate-local :inline :offset-assert 944)
   (fin-rr   joint-mod-rotate-local :inline :offset-assert 976)
   (rudder   joint-mod-rotate-local :inline :offset-assert 1008)
   (rudder-f joint-mod-rotate-local :inline :offset-assert 1040)
   (brake-l  joint-mod-rotate-local :inline :offset-assert 1072)
   (brake-r  joint-mod-rotate-local :inline :offset-assert 1104)
   (flap-l   joint-mod-rotate-local :inline :offset-assert 1136)
   (flap-r   joint-mod-rotate-local :inline :offset-assert 1168)
   )
  :method-count-assert 162
  :size-assert         #x4b0
  :flag-assert         #xa2043004b0
  )
|#

#|
(deftype h-bike-c (h-bike-base)
  ((fin-fl    joint-mod-rotate-local :inline :offset-assert 944)
   (fin-fr    joint-mod-rotate-local :inline :offset-assert 976)
   (fin-rl    joint-mod-rotate-local :inline :offset-assert 1008)
   (fin-rr    joint-mod-rotate-local :inline :offset-assert 1040)
   (fin2-fl   joint-mod-rotate-local :inline :offset-assert 1072)
   (fin2-fr   joint-mod-rotate-local :inline :offset-assert 1104)
   (rudder    joint-mod-rotate-local :inline :offset-assert 1136)
   (brake-l   joint-mod-rotate-local :inline :offset-assert 1168)
   (brake-r   joint-mod-rotate-local :inline :offset-assert 1200)
   (spoiler-l joint-mod-rotate-local :inline :offset-assert 1232)
   (spoiler-r joint-mod-rotate-local :inline :offset-assert 1264)
   )
  :method-count-assert 162
  :size-assert         #x510
  :flag-assert         #xa204900510
  )
|#

#|
(deftype h-bike-d (h-bike-a)
  ()
  :method-count-assert 162
  :size-assert         #x490
  :flag-assert         #xa204100490
  )
|#

;; (define-extern *h-bike-explosion-info* vehicle-explosion-info)
;; (define-extern *h-bike-a-constants* object)
;; (define-extern *h-bike-b-constants* object)
;; (define-extern *h-bike-c-constants* object)
;; (define-extern *h-bike-d-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; car                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype h-car-base (hvehicle)
  ((rider-hand-joint-array UNKNOWN 2 :offset-assert 944)
   )
  :method-count-assert 162
  :size-assert         #x3b2
  :flag-assert         #xa2034003b2
  )
|#

#|
(deftype h-car-a (h-car-base)
  ((steering-wheel-l joint-mod-rotate-local :inline :offset-assert 960)
   (steering-wheel-r joint-mod-rotate-local :inline :offset-assert 992)
   (fin-fl           joint-mod-rotate-local :inline :offset-assert 1024)
   (fin-fr           joint-mod-rotate-local :inline :offset-assert 1056)
   (fin-rl           joint-mod-rotate-local :inline :offset-assert 1088)
   (fin-rr           joint-mod-rotate-local :inline :offset-assert 1120)
   (rudder-l         joint-mod-rotate-local :inline :offset-assert 1152)
   (rudder-r         joint-mod-rotate-local :inline :offset-assert 1184)
   (rudder           joint-mod-rotate-local :inline :offset-assert 1216)
   )
  :method-count-assert 162
  :size-assert         #x4e0
  :flag-assert         #xa2046004e0
  )
|#

#|
(deftype h-car-b (h-car-base)
  ((steering-wheel-l joint-mod-rotate-local :inline :offset-assert 960)
   (steering-wheel-r joint-mod-rotate-local :inline :offset-assert 992)
   (fin-fl           joint-mod-rotate-local :inline :offset-assert 1024)
   (fin-fr           joint-mod-rotate-local :inline :offset-assert 1056)
   (fin-rl           joint-mod-rotate-local :inline :offset-assert 1088)
   (fin-rr           joint-mod-rotate-local :inline :offset-assert 1120)
   )
  :method-count-assert 162
  :size-assert         #x480
  :flag-assert         #xa204000480
  )
|#

#|
(deftype h-car-c (h-car-base)
  ((steering-wheel joint-mod-rotate-local :inline :offset-assert 960)
   (fin-fl         joint-mod-rotate-local :inline :offset-assert 992)
   (fin-fr         joint-mod-rotate-local :inline :offset-assert 1024)
   (fin-rl         joint-mod-rotate-local :inline :offset-assert 1056)
   (fin-rr         joint-mod-rotate-local :inline :offset-assert 1088)
   (fin2-rl        joint-mod-rotate-local :inline :offset-assert 1120)
   (fin2-rr        joint-mod-rotate-local :inline :offset-assert 1152)
   )
  :method-count-assert 162
  :size-assert         #x4a0
  :flag-assert         #xa2042004a0
  )
|#

;; (define-extern *h-car-explosion-info* vehicle-explosion-info)
;; (define-extern *h-car-a-constants* object)
;; (define-extern *h-car-b-constants* object)
;; (define-extern *h-car-c-constants* object)
;; (define-extern *h-hellcat-constants* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; test-bike                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype test-bike (h-bike-c)
  ()
  :method-count-assert 162
  :size-assert         #x510
  :flag-assert         #xa204900510
  )
|#

#|
(deftype evan-test-bike (h-bike-a)
  ()
  :method-count-assert 162
  :size-assert         #x490
  :flag-assert         #xa204100490
  )
|#

;; (define-extern *test-bike-constants* object) ;; rigid-body-vehicle-constants
;; (define-extern *evan-test-bike-constants* object) ;; rigid-body-vehicle-constants

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-enemy                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-enemy (citizen)
  ((next-update-target uint64              :offset-assert 1032) ;; time-frame
   (minimap            connection-minimap  :offset-assert 1040)
   )
  :method-count-assert 218
  :size-assert         #x414
  :flag-assert         #xda03a00414
  (:methods
    (citizen-enemy-method-216 () none) ;; 216
    (citizen-enemy-method-217 () none) ;; 217
    )
  (:state-methods
    inactive ;; 191
    active ;; 34
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-squad-member-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hatred-instance-info (structure)
  ((hated-target uint64  :offset-assert 0)
   (hatred-value float   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype kg-squad-member (citizen)
  ((hatred-memory               UNKNOWN            3 :offset-assert 1032)
   (last-choose-new-enemy-time  uint64               :offset-assert 1080)
   (current-enemy               uint64               :offset-assert 1088)
   (kg-type                     uint8                :offset-assert 1096)
   (choose-new-enemy-delay-time uint64               :offset-assert 1104)
   (next-update-target-time     uint64               :offset-assert 1112)
   (minimap                     connection-minimap   :offset-assert 1120)
   )
  :method-count-assert 222
  :size-assert         #x464
  :flag-assert         #xde03f00464
  (:methods
    (kg-squad-member-method-216 () none) ;; 216
    (kg-squad-member-method-217 () none) ;; 217
    (kg-squad-member-method-218 () none) ;; 218
    (kg-squad-member-method-219 () none) ;; 219
    (kg-squad-member-method-220 () none) ;; 220
    (kg-squad-member-method-221 () none) ;; 221
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-squad-member-h              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mh-squad-member (citizen-enemy)
  ((last-choose-new-enemy-time  uint64  :offset-assert 1048)
   (current-enemy               uint64  :offset-assert 1056)
   (choose-new-enemy-delay-time uint64  :offset-assert 1064)
   (next-update-target-time     uint64  :offset-assert 1072)
   )
  :method-count-assert 222
  :size-assert         #x438
  :flag-assert         #xde03c00438
  (:methods
    (mh-squad-member-method-218 () none) ;; 218
    (mh-squad-member-method-219 () none) ;; 219
    (mh-squad-member-method-220 () none) ;; 220
    (mh-squad-member-method-221 () none) ;; 221
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *guard-died-recently?* object)
;; (define-extern *crimson-guard-global-info* guard-global-info) ;; guard-global-info
;; (define-extern *crimson-guard-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern *guard-min-id-hack* object) ;; int
;; (define-extern do-spline function) ;; (function vector vector vector vector vector float vector)
;; (define-extern guard-type->city-target-type function)
;; (define-extern orient-towards-code function)
;; (define-extern go-active-if-necessary function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-grenade                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype reload-grenade-spawn-params (structure)
  ((owner       uint64  :offset-assert 0)
   (joint-index uint16  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )
|#

#|
(deftype reload-grenade (process-drawable)
  ((owner       uint64  :offset-assert 200)
   (joint-index uint16  :offset-assert 208)
   )
  :method-count-assert 25
  :size-assert         #xd2
  :flag-assert         #x19006000d2
  (:methods
    (reload-grenade-method-24 () none) ;; 24
    )
  (:state-methods
    die ;; 23
    shrinking ;; 22
    visible ;; 21
    dormant ;; 20
    )
  )
|#

;; (define-extern reload-grenade-init-by-other function)
;; (define-extern reload-grenade-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-tazer                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spread-lightning-lazer function) ;; (function lightning-control vector vector vector none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-rifle                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; guard-states                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern debug-active function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-norm                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-norm (civilian)
  ()
  :method-count-assert 235
  :size-assert         #x464
  :flag-assert         #xeb03f00464
  (:state-methods
    wait ;; 190
    knocked-off-vehicle ;; 234
    get-up-back ;; 221
    get-up-front ;; 220
    knocked ;; 31
    )
  )
|#

;; (define-extern *citizen-norm-global-info* civilian-global-info) ;; civilian-global-info
;; (define-extern *citizen-norm-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-fat                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-fat (civilian)
  ()
  :method-count-assert 234
  :size-assert         #x464
  :flag-assert         #xea03f00464
  (:state-methods
    wait ;; 190
    get-up-back ;; 221
    get-up-front ;; 220
    knocked ;; 31
    )
  )
|#

;; (define-extern *citizen-fat-global-info* civilian-global-info) ;; civilian-global-info
;; (define-extern *citizen-fat-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; citizen-chick                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype citizen-chick (civilian)
  ()
  :method-count-assert 234
  :size-assert         #x464
  :flag-assert         #xea03f00464
  (:state-methods
    wait ;; 190
    get-up-back ;; 221
    get-up-front ;; 220
    knocked ;; 31
    )
  )
|#

;; (define-extern *citizen-chick-global-info* civilian-global-info) ;; civilian-global-info
;; (define-extern *citizen-chick-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-squad-member                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-squad-member                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; metalhead-flitter              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype metalhead-flitter (mh-squad-member)
  ((move-angle       float          :offset-assert 1080)
   (heading          symbol         :offset-assert 1084) ;; guessed by decompiler
   (change-dir-time  uint64         :offset-assert 1088) ;; time-frame
   (last-change-dir  uint64         :offset-assert 1096)
   (off-screen-timer uint64         :offset-assert 1104)
   (amb-sound-timer  uint64         :offset-assert 1112)
   (attack-time      uint64         :offset-assert 1120) ;; time-frame
   (target-pos       vector :inline :offset-assert 1136)
   (attack-pos       vector :inline :offset-assert 1152)
   (base-height      float          :offset-assert 1168)
   )
  :method-count-assert 229
  :size-assert         #x494
  :flag-assert         #xe504200494
  (:methods
    (metalhead-flitter-method-224 () none) ;; 224
    (metalhead-flitter-method-225 () none) ;; 225
    (metalhead-flitter-method-226 () none) ;; 226
    (metalhead-flitter-method-227 () none) ;; 227
    (metalhead-flitter-method-228 () none) ;; 228
    )
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    victory ;; 39
    circling ;; 157
    attack ;; 222
    die ;; 40
    hostile ;; 38
    stare ;; 37
    ambush-jumping ;; 223
    active ;; 34
    ambush ;; 47
    )
  )
|#

;; (define-extern *fact-info-mh-flitter-defaults* fact-info-enemy-defaults)
;; (define-extern *metalhead-flitter-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern metalhead-flitter-fall-and-play-death-anim function) ;; (function int float time-frame none :behavior metalhead-flitter)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; kg-squad-control               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *default-kg-squad-member-settings* object)
;; (define-extern *alert-kg-squad-member-settings* object)
;; (define-extern *war-kg-squad-member-settings* object)
(define-extern set-kg-primary-target (function handle float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ff-squad-control               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *alert-level-settings* object) ;; (inline-array traffic-alert-state-settings)
;; (define-extern *ff-war-alert-state-settings* object)
;; (define-extern *ff-guard-type-mask* object)
(define-extern set-ff-primary-target (function handle float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-squad-control               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *default-mh-squad-member-settings* object)
;; (define-extern *war-mh-squad-member-settings* object)
(define-extern set-mh-primary-target (function handle float none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-borrow-manager             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern cty-borrow-manager-borrow-update function)
;; (define-extern *cty-borrow-manager-list* object)
;; (define-extern get-borrow-slot function)
;; (define-extern parent-also-loaded? function)
;; (define-extern *faction-sound-list* object)
;; (define-extern level->sound-bank-name function)
;; (define-extern insert-into-sound-list function)
;; (define-extern update-sound-info function)
;; (define-extern mark-permanent-holds function)
;; (define-extern city-sound-exists? function)
;; (define-extern sound-bank-mode->use-count function)
;; (define-extern add-city-sound-bank-if-possible function)
;; (define-extern city-sound-expand-want-list function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-init                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dummy-alloc (structure)
  ((val uint32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )
|#

;; (define-extern update-level-info function)
;; (define-extern ctywide-login function) ;; (function none)
;; (define-extern ctywide-activate function) ;; (function level symbol none)
;; (define-extern ctywide-deactivate function) ;; (function none)
;; (define-extern ctywide-logout function)
;; (define-extern *traffic-alert-level-force* object) ;; symbol
;; (define-extern lwide-activate function) ;; (function level symbol none)
;; (define-extern lwide-deactivate function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *security-texture-anim-array* texture-anim-array) ;; (texture-anim-array texture-anim)
;; (define-extern set-security-color! function) ;; (function vector vector)
;; (define-extern set-security-flash! function) ;; (function vector vector)
;; (define-extern set-security-texture-masks! function) ;; (function vector symbol)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-ctywide-baron-propoganda-ticker-rotate function) ;; (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d sparticle-launcher sparticle-launch-state none)
;; (define-extern *range-color-gas-flame* curve-color-fast)
;; (define-extern *range-alpha-gas-flame* curve2d-fast)
;; (define-extern *range-scale-gas-flame-x* curve2d-fast)
;; (define-extern *range-scale-gas-flame-y* curve2d-fast)
;; (define-extern *r-curve-gas-flame* curve2d-fast)
;; (define-extern *g-curve-gas-flame* curve2d-fast)
;; (define-extern *b-curve-gas-flame* curve2d-fast)
;; (define-extern *curve-alpha-gas-flame* curve2d-fast)
;; (define-extern *curve-gas-flame-x* curve2d-fast)
;; (define-extern *curve-gas-flame-y* curve2d-fast)
;; (define-extern *part-ctyind-hot-gas-curve-settings* object)
;; (define-extern *range-kgpickup-dust-color* curve-color-fast)
;; (define-extern *range-kgpickup-dust-alpha* curve2d-fast)
;; (define-extern *range-kgpickup-dust-scale-x* curve2d-fast)
;; (define-extern *range-kgpickup-dust-scale-y* curve2d-fast)
;; (define-extern *curve-kgpickup-dust-alpha* curve2d-fast)
;; (define-extern *curve-kgpickup-dust-scale-x* curve2d-fast)
;; (define-extern *curve-kgpickup-dust-scale-y* curve2d-fast)
;; (define-extern *part-hijack-kgpickup-explosion-dust-in-curve-settings* object)
;; (define-extern *range-kgpickup-color* curve-color-fast)
;; (define-extern *range-kgpickup-alpha* curve2d-fast)
;; (define-extern *range-kgpickup-scale-x* curve2d-fast)
;; (define-extern *range-kgpickup-scale-y* curve2d-fast)
;; (define-extern *curve-kgpickup-alpha* curve2d-fast)
;; (define-extern *curve-kgpickup-scale-x* curve2d-fast)
;; (define-extern *curve-kgpickup-scale-y* curve2d-fast)
;; (define-extern *part-hijack-kgpickup-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype security-wall (process-drawable)
  ((pass               int32          :offset-assert 200)
   (incoming-attack-id uint32         :offset-assert 204)
   (next-message-time  uint64         :offset-assert 208) ;; int64
   (message            int32          :offset-assert 216)
   (plane              plane  :inline :offset-assert 224)
   (color              vector :inline :offset-assert 240)
   (target-pos         vector :inline :offset-assert 256)
   (flash              float          :offset-assert 272)
   (touch-count        int32          :offset-assert 276)
   (breach             symbol         :offset-assert 280) ;; guessed by decompiler
   )
  :method-count-assert 25
  :size-assert         #x11c
  :flag-assert         #x1900a0011c
  (:methods
    (security-wall-method-22 () none) ;; 22 ;; (security-wall-method-22 (_type_ path-control float) vector)
    (security-wall-method-23 () none) ;; 23 ;; (security-wall-method-23 (_type_) none)
    (security-wall-method-24 () none) ;; 24 ;; (security-wall-method-24 (_type_) none)
    )
  (:state-methods
    idle-open ;; 20, old: (idle-open () _type_ :state)
    idle-close ;; 21, old: (idle-close () _type_ :state)
    )
  )
|#

#|
(deftype security-wall-child (security-wall)
  ((hidden? basic  :offset-assert 284)
   )
  :method-count-assert 26
  :size-assert         #x120
  :flag-assert         #x1a00a00120
  (:state-methods
    hide-wall ;; 25
    idle-close ;; 21
    )
  )
|#

#|
(deftype parking-spot (process-drawable)
  ((vehicle          uint64                     :offset-assert 200) ;; handle
   (spawned          symbol                     :offset-assert 208) ;; guessed by decompiler
   (minimap          connection-minimap         :offset-assert 212)
   (test-sphere      sphere             :inline :offset-assert 224)
   (expire-time      uint64                     :offset-assert 240)
   (last-update-time uint64                     :offset-assert 248)
   )
  :method-count-assert 27
  :size-assert         #x100
  :flag-assert         #x1b00800100
  (:methods
    (parking-spot-method-21 () none) ;; 21 ;; (parking-spot-method-21 (_type_) none)
    (parking-spot-method-22 () none) ;; 22 ;; (parking-spot-method-22 (_type_) none)
    (parking-spot-method-23 () none) ;; 23 ;; (parking-spot-method-23 (_type_ uint) none)
    (parking-spot-method-24 () none) ;; 24 ;; (parking-spot-method-24 (_type_) none)
    (parking-spot-method-25 () none) ;; 25
    (parking-spot-method-26 () none) ;; 26
    )
  (:state-methods
    idle ;; 20, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype propa (process-focusable)
  ((sound-id           sound-id  :offset-assert 208) ;; guessed by decompiler
   (sound-index        uint32    :offset-assert 212)
   (handle             uint64    :offset-assert 216) ;; handle
   (y-rot              float     :offset-assert 224)
   (hit-points         int32     :offset-assert 228)
   (incoming-attack-id uint32    :offset-assert 232)
   )
  :method-count-assert 33
  :size-assert         #xec
  :flag-assert         #x21007000ec
  (:methods
    (propa-method-30 () none) ;; 30 ;; (propa-method-30 (_type_) none)
    (propa-method-31 () none) ;; 31 ;; (propa-method-31 (_type_ vector) none)
    (propa-method-32 () none) ;; 32
    )
  (:state-methods
    idle ;; 28, old: (broken () _type_ :state)
    broken ;; 29, old: (propa-method-29 (_type_) none)
    )
  )
|#

#|
(deftype burning-bush (process-focusable)
  ((task       game-task-control         :offset-assert 208) ;; guessed by decompiler
   (part-off   sparticle-launch-control  :offset-assert 212) ;; guessed by decompiler
   (part-alert sparticle-launch-control  :offset-assert 216) ;; guessed by decompiler
   (angle      float                     :offset-assert 220) ;; degrees
   (time       float                     :offset-assert 224)
   (rotmin     float                     :offset-assert 228)
   (rotmax     float                     :offset-assert 232)
   (bb-perm    entity-perm               :offset-assert 236)
   )
  :method-count-assert 35
  :size-assert         #xf0
  :flag-assert         #x23007000f0
  (:methods
    (burning-bush-method-32 () none) ;; 32 ;; (burning-bush-method-32 (_type_) object)
    (burning-bush-method-33 () none) ;; 33
    (burning-bush-method-34 () none) ;; 34
    )
  (:state-methods
    menu ;; 30, old: (burning-bush-method-30 (_type_) none)
    talking ;; 29, old: (menu () _type_ :state)
    idle ;; 28, old: (talking () _type_ :state)
    collect-gems ;; 31, old: (burning-bush-method-31 (_type_) none)
    )
  )
|#

#|
(deftype city-burning-bush-get-on-info (structure)
  ((trans        vector     :inline :offset-assert 0)
   (quat         quaternion :inline :offset-assert 16)
   (camera-trans vector     :inline :offset-assert 32)
   (camera-rot   UNKNOWN    9       :offset-assert 48)
   (time         float              :offset-assert 84)
   (fov          float              :offset-assert 88)
   )
  :method-count-assert 9
  :size-assert         #x5c
  :flag-assert         #x90000005c
  )
|#

#|
(deftype task-manager-ctywide-bbush-get-to (task-manager)
  ((skill uint64  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf8
  :flag-assert         #x21008000f8
  (:methods
    (task-manager-ctywide-bbush-get-to-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype ctyn-lamp (process-focusable)
  ()
  :method-count-assert 32
  :size-assert         #xd0
  :flag-assert         #x20005000d0
  (:methods
    (ctyn-lamp-method-30 () none) ;; 30 ;; (ctyn-lamp-method-30 (_type_) none)
    (ctyn-lamp-method-31 () none) ;; 31
    )
  (:state-methods
    die ;; 29, old: (ctyn-lamp-method-29 (_type_) none)
    idle ;; 28, old: (die () _type_ :state)
    )
  )
|#

#|
(deftype fac-lowrez-move (structure)
  ((light   light-state :inline :offset-assert 0)
   (roty    float               :offset-assert 8)
   (rotz    float               :offset-assert 12)
   (rot-bob float               :offset-assert 16)
   (wobble  float               :offset-assert 20)
   (bob     float               :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype fac-lorez (process-drawable)
  ((move-info fac-lowrez-move :inline :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xe4
  :flag-assert         #x15007000e4
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype flitter-spawner (process-drawable)
  ((root                basic   :offset-assert 124)
   (actor-group         uint32  :offset-assert 200)
   (actor-group-count   int32   :offset-assert 204)
   (spawner             basic   :offset-assert 208)
   (desired-spawn-count int32   :offset-assert 212)
   (spawn-times         basic   :offset-assert 216)
   (last-seen-times     basic   :offset-assert 220)
   )
  :method-count-assert 22
  :size-assert         #xe4
  :flag-assert         #x16007000e4
  (:methods
    (flitter-spawner-method-21 () none) ;; 21
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype flitter-point (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype board-score-hud (hud-goal)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-bbush-board (task-manager)
  ((score           float   :offset-assert 240)
   (challenge-done  basic   :offset-assert 244)
   (hud-score       uint64  :offset-assert 248)
   (hud-goal        uint64  :offset-assert 256)
   (game-score      uint8   :offset-assert 264)
   (new-high-score  basic   :offset-assert 268)
   (goal-cup        uint8   :offset-assert 272)
   (last-cup        uint8   :offset-assert 273)
   (roll-back-task? basic   :offset-assert 276)
   )
  :method-count-assert 35
  :size-assert         #x118
  :flag-assert         #x2300a00118
  (:methods
    (task-manager-bbush-board-method-32 () none) ;; 32
    (task-manager-bbush-board-method-33 () none) ;; 33
    (task-manager-bbush-board-method-34 () none) ;; 34
    )
  (:state-methods
    resolution ;; 17
    active ;; 15
    )
  )
|#

#|
(deftype mh-tower-smoke-cty (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern security-wall-child-init-by-other function)
;; (define-extern spawn-security-wall function)
;; (define-extern parking-spot-spawn function)
;; (define-extern *propa-sounds* array) ;; (array string)
;; (define-extern *propa-sounds-class-3* array) ;; (array string)
;; (define-extern *propa-sounds-class-2* array) ;; (array string)
;; (define-extern *propa-sounds-class-1* array) ;; (array string)
;; (define-extern *propa-sounds-metalheads* array) ;; (array string)
;; (define-extern *propa-sounds-baron-construction* array) ;; (array string)
;; (define-extern propa-pu->knocked-type function) ;; (function penetrate knocked-type)
;; (define-extern *city-burning-bush-get-on-info* array)
;; (define-extern *ctyn-lamp-exploder-params* joint-exploder-static-params) ;; joint-exploder-static-params

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-tasks                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-city-vehicle-training-hover-zone-1 (task-manager)
  ((speech-id uint32  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf4
  :flag-assert         #x20008000f4
  (:state-methods
    complete ;; 16
    fail ;; 18
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-city-vehicle-training-hover-zone-2 (task-manager)
  ((speech-id uint32  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf4
  :flag-assert         #x20008000f4
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype cty-hijack-intro (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-force-load-borrows (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-blackout (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern wait-for-speech-end function) ;; (function sound-id none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-part-fma-dark-eco-steam function)
;; (define-extern *range-fma-city-barrier-explo-big-color* curve-color-fast)
;; (define-extern *range-fma-city-barrier-explo-big-alpha* curve2d-fast)
;; (define-extern *range-fma-city-barrier-explo-big-scale-x* curve2d-fast)
;; (define-extern *range-fma-city-barrier-explo-big-scale-y* curve2d-fast)
;; (define-extern *curve-fma-city-barrier-explo-big-alpha* curve2d-fast)
;; (define-extern *curve-fma-city-barrier-explo-big-scale-x* curve2d-fast)
;; (define-extern *curve-fma-city-barrier-explo-big-scale-y* curve2d-fast)
;; (define-extern *part-fma-city-barrier-explosion-big-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctywide-speech                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern restore-city-speeches function) ;; (function none)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ctyport-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype boat-manager (process)
  ((mesh        basic          :offset-assert 128)
   (paths       path-control 4 :offset-assert 132) ;; guessed by decompiler
   (boats-stop? basic          :offset-assert 148)
   )
  :method-count-assert 17
  :size-assert         #x98
  :flag-assert         #x1100200098
  (:methods
    (boat-manager-method-15 () none) ;; 15 ;; (boat-manager-method-15 (_type_) none)
    (boat-manager-method-16 () none) ;; 16
    )
  (:state-methods
    idle ;; 14, old: (idle () _type_ :state)
    )
  )
|#

#|
(deftype boat-base (vehicle)
  ((manager    uint64  :offset-assert 696)
   (angle      float   :offset-assert 704)
   (y-rot      float   :offset-assert 708)
   (path-num   uint32  :offset-assert 712)
   (path-index float   :offset-assert 716)
   )
  :method-count-assert 152
  :size-assert         #x2d0
  :flag-assert         #x98025002d0
  (:state-methods
    idle ;; 28
    inactive ;; 56
    waiting ;; 57
    )
  )
|#

#|
(deftype barge (boat-base)
  ((engine   sound-id  :offset-assert 720) ;; guessed by decompiler
   (bow-wash sound-id  :offset-assert 724) ;; guessed by decompiler
   )
  :method-count-assert 152
  :size-assert         #x2d8
  :flag-assert         #x98026002d8
  )
|#

;; (define-extern *barge-constants* object) ;; rigid-body-vehicle-constants

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mhcity-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype bubbles-path (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    active ;; 20
    die ;; 21
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mhcity-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mhcity-dark-eco-door (process-focusable)
  ((should-break? basic   :offset-assert 208)
   (broken-door   uint64  :offset-assert 216)
   )
  :method-count-assert 33
  :size-assert         #xe0
  :flag-assert         #x21006000e0
  (:state-methods
    broken ;; 31
    cracked-idle ;; 30
    cracked ;; 29
    idle ;; 28
    broken-idle ;; 32
    )
  )
|#

#|
(deftype mhcity-dark-eco-door-broken (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    shatter ;; 21
    crack ;; 20
    )
  )
|#

#|
(deftype mhcity-lump (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype mhcity-dark-eco-nodule (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:state-methods
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype mhcity-ambient-killable (process-focusable)
  ((hit-points     float   :offset-assert 208)
   (drop-type      int32   :offset-assert 212)
   (drop-amount    float   :offset-assert 216)
   (sphere-size    float   :offset-assert 220)
   (last-attack-id uint32  :offset-assert 224)
   )
  :method-count-assert 31
  :size-assert         #xe4
  :flag-assert         #x1f007000e4
  (:methods
    (mhcity-ambient-killable-method-29 () none) ;; 29
    (mhcity-ambient-killable-method-30 () none) ;; 30
    )
  (:state-methods
    die-hidden ;; 28
    )
  )
|#

#|
(deftype mhcity-vein-writhing-large (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-vein-writhing-small (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-claw-finger-small (mhcity-ambient-killable)
  ((twitch-speed         float              :offset-assert 228)
   (twitch-angle-current float              :offset-assert 232)
   (twitch-angle-dest    float              :offset-assert 236)
   (base-quat            quaternion :inline :offset-assert 240)
   (jitter-count         int8               :offset-assert 256)
   )
  :method-count-assert 32
  :size-assert         #x101
  :flag-assert         #x2000900101
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-twitch-blade (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype mhcity-vine-wriggler (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-vine-wriggler-big (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-de-tower-undervines (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-grunt-egg-c (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-grunt-egg-b (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-grunt-egg-d (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype mhcity-grunt-egg-a (mhcity-ambient-killable)
  ()
  :method-count-assert 32
  :size-assert         #xe4
  :flag-assert         #x20007000e4
  (:state-methods
    idle ;; 31
    )
  )
|#

#|
(deftype curve-bubbles-Shape (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )
|#

#|
(deftype mhcity-tower-door (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern mhcity-dark-eco-door-broken-init-by-other function)
;; (define-extern *darkeco-nodule-task-nodes* array)
;; (define-extern mhcity-ambient-killable-event-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mhcity-obs2                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mhcity-puffer (process-focusable)
  ((state-time uint64             :offset-assert 192)
   (period     uint64             :offset-assert 216)
   (duration   uint64             :offset-assert 224)
   (offset     uint64             :offset-assert 232)
   (is-jump?   basic              :offset-assert 240)
   (jump-y     float              :offset-assert 244)
   (jump-z     float              :offset-assert 248)
   (traj       trajectory :inline :offset-assert 256)
   )
  :method-count-assert 35
  :size-assert         #x128
  :flag-assert         #x2300b00128
  (:methods
    (mhcity-puffer-method-32 () none) ;; 32
    (mhcity-puffer-method-33 () none) ;; 33
    (mhcity-puffer-method-34 () none) ;; 34
    )
  (:state-methods
    active ;; 28
    blowing ;; 29
    blowing-prep ;; 30
    puffer-active-base-state ;; 31
    )
  )
|#

#|
(deftype puffer-init-by-other-params (structure)
  ((pos      vector     :inline :offset-assert 0)
   (orient   quaternion :inline :offset-assert 16)
   (scale    float              :offset-assert 32)
   (period   uint64             :offset-assert 40)
   (duration uint64             :offset-assert 48)
   (offset   uint64             :offset-assert 56)
   (jump-y   float              :offset-assert 64)
   (jump-z   float              :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )
|#

#|
(deftype mhcity-puffer-large (mhcity-puffer)
  ()
  :method-count-assert 35
  :size-assert         #x128
  :flag-assert         #x2300b00128
  (:state-methods
    active ;; 28
    blowing ;; 29
    blowing-prep ;; 30
    )
  )
|#

;; (define-extern puffer-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; krimson-wall                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype krimson-wall-break (process-drawable)
  ((art-name   basic     :offset-assert 200)
   (anim       basic     :offset-assert 204)
   (pillar     UNKNOWN 2 :offset-assert 208)
   (level-name basic     :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:state-methods
    done ;; 22
    explode ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype krimson-wall (process-focusable)
  ((alt-actor      UNKNOWN 2 :offset-assert 208)
   (collision-part int32     :offset-assert 216)
   (width          float     :offset-assert 220)
   )
  :method-count-assert 31
  :size-assert         #xe0
  :flag-assert         #x1f006000e0
  (:methods
    (krimson-wall-method-30 () none) ;; 30
    )
  (:state-methods
    die ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern krimson-wall-break-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trail                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype trail-vis-work (structure)
  ((best-count    uint32         :offset-assert 0)
   (best-dist     float          :offset-assert 4)
   (start-conn-id uint32         :offset-assert 8)
   (p0            vector :inline :offset-assert 16)
   (p1            vector :inline :offset-assert 32)
   (best-node-id  uint16 64      :offset-assert 48) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )
|#

;; (define-extern *trail-graph* object) ;; trail-graph

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; minee-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype minee-elevator (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-shared                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype assault-cam-info (structure)
  ((pos vector :inline :offset-assert 0)
   (mat matrix :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
|#

#|
(deftype triangle-dists (structure)
  ((dist0 float  :offset-assert 0)
   (dist1 float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype assault-room-collision (structure)
  ((cam-matrix    matrix         :inline :offset-assert 0)
   (cam-pos       vector         :inline :offset-assert 64)
   (clip-dists    triangle-dists :inline :offset-assert 80)
   (hoz-clip-dist float                  :offset-assert 88)
   )
  :method-count-assert 9
  :size-assert         #x5c
  :flag-assert         #x90000005c
  )
|#

#|
(deftype assault-room (structure)
  ((center-pos     vector                 :inline :offset-assert 0)
   (cam-info       assault-cam-info               :offset-assert 16)
   (collision      assault-room-collision         :offset-assert 20)
   (node-positions basic                          :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )
|#

#|
(deftype assault-speech-instance (speech-instance)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *assault-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-cams                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *assault-cams* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-path                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *assault-rooms* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-enemies                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype assault-object-spawn-params (traffic-object-spawn-params)
  ((nav-branch nav-branch  :offset-assert 24)
   (lev        basic       :offset-assert 116)
   (suck-level int32       :offset-assert 120)
   (flee-time  uint64      :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )
|#

#|
(deftype assault-metalhead-grunt (metalhead-grunt)
  ()
  :method-count-assert 232
  :size-assert         #x480
  :flag-assert         #xe804000480
  (:state-methods
    exit-transport ;; 231
    )
  )
|#

#|
(deftype assault-metalhead-flitter (metalhead-flitter)
  ()
  :method-count-assert 230
  :size-assert         #x494
  :flag-assert         #xe604200494
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    exit-transport ;; 229
    )
  )
|#

#|
(deftype assault-metalhead-predator (metalhead-predator)
  ()
  :method-count-assert 228
  :size-assert         #x550
  :flag-assert         #xe404d00550
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    )
  )
|#

#|
(deftype assault-roboguard (roboguard-city)
  ((shoot-wait-time uint64  :offset-assert 1600)
   )
  :method-count-assert 242
  :size-assert         #x648
  :flag-assert         #xf205d00648
  (:state-methods
    in-ditch ;; 192
    roll-initial ;; 241
    die-fast ;; 42
    shoot-attack ;; 224
    hostile-stand ;; 222
    )
  )
|#

#|
(deftype assault-spydroid (spydroid)
  ()
  :method-count-assert 238
  :size-assert         #x50c
  :flag-assert         #xee0490050c
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    )
  )
|#

#|
(deftype assault-flying-turret (flying-turret)
  ()
  :method-count-assert 231
  :size-assert         #x568
  :flag-assert         #xe704f00568
  (:state-methods
    die-fast ;; 42
    in-ditch ;; 192
    )
  )
|#

#|
(deftype assault-crimson-guard (crimson-guard)
  ((center-pos vector :inline :offset-assert 1616)
   )
  :method-count-assert 292
  :size-assert         #x660
  :flag-assert         #x12405e00660
  (:state-methods
    wait-for-enemies ;; 291
    active ;; 34
    die-fast ;; 42
    in-ditch ;; 192
    )
  )
|#

#|
(deftype assault-citizen-norm (citizen-norm)
  ((center-pos    vector :inline :offset-assert 1136)
   (min-flee-time uint64         :offset-assert 1152)
   )
  :method-count-assert 237
  :size-assert         #x488
  :flag-assert         #xed04100488
  (:state-methods
    cower-ground ;; 222
    flee-madly ;; 235
    flee-to-center ;; 236
    knocked-recover ;; 32
    )
  )
|#

#|
(deftype assault-cleanup (process)
  ((offscreen-time uint64  :offset-assert 128)
   (parent-hand    uint64  :offset-assert 136)
   )
  :method-count-assert 15
  :size-assert         #x90
  :flag-assert         #xf00100090
  (:state-methods
    tracking ;; 14
    )
  )
|#

#|
(deftype special-health (health)
  ()
  :method-count-assert 36
  :size-assert         #x194
  :flag-assert         #x2401200194
  )
|#

#|
(deftype ammo-special-pickup (process-focusable)
  ((ammo-type      int32  :offset-assert 208)
   (gun-type       int32  :offset-assert 212)
   (collect-effect basic  :offset-assert 216)
   (ammo-effect    basic  :offset-assert 220)
   (anim-index     int32  :offset-assert 224)
   )
  :method-count-assert 31
  :size-assert         #xe4
  :flag-assert         #x1f007000e4
  (:methods
    (ammo-special-pickup-method-30 () none) ;; 30
    )
  (:state-methods
    pickup ;; 29
    wait ;; 28
    )
  )
|#

#|
(deftype assault-bombbot (bombbot)
  ((next-node                int32   :offset-assert 1512)
   (new-point-choose-time    uint64  :offset-assert 1520)
   (max-hp                   float   :offset-assert 1532)
   (is-final?                basic   :offset-assert 1536)
   (last-charge-player-count uint32  :offset-assert 1540)
   (suck-level               int32   :offset-assert 1544)
   )
  :method-count-assert 210
  :size-assert         #x60c
  :flag-assert         #xd20590060c
  (:methods
    (assault-bombbot-method-209 () none) ;; 209
    )
  (:state-methods
    hostile ;; 38
    drop-bombs ;; 193
    explode ;; 190
    )
  )
|#

#|
(deftype assault-bombbot-spawn-params (bombbot-spawn-params)
  ((is-final?  basic  :offset-assert 48)
   (suck-level int32  :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

#|
(deftype assault-bombbot-shot (bombbot-shot)
  ()
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern assault-enemy-init-by-other function)
;; (define-extern assault-type->type function)
;; (define-extern assault-cleanup-init-by-other function)
;; (define-extern *assault-levels* array)
;; (define-extern spawn-assault-enemy function)
;; (define-extern special-health-init-by-other function)
;; (define-extern ammo-special-pickup-init-by-other function)
;; (define-extern assault-bombbot-init-by-other function)
;; (define-extern *curve-assault-bombbot-shot-color-blue* curve-color-fast)
;; (define-extern *curve-assault-bombbot-shot-width* curve2d-fast)
;; (define-extern *assault-bombbot-trail* object)
;; (define-extern *assault-bombbot-trail-2* object)
;; (define-extern *bombbot-bomb-hp-thresholds* array)
;; (define-extern *look-time* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-script                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype assault-spawn-cmd (structure)
  ((spawn-delay     uint64  :offset-assert 0)
   (command         uint8   :offset-assert 8)
   (spawn-type      uint16  :offset-assert 10)
   (count           int8    :offset-assert 12)
   (spawner-index   int8    :offset-assert 13)
   (wait-type       uint8   :offset-assert 10)
   (faction-type    uint8   :offset-assert 13)
   (wait-time       uint64  :offset-assert 0)
   (msg             basic   :offset-assert 16)
   (path-id         int32   :offset-assert 20)
   (event0          int32   :offset-assert 24)
   (event1          int32   :offset-assert 28)
   (event2          int32   :offset-assert 32)
   (speech-type     uint64  :offset-assert 40)
   (gun-pickup-type int32   :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype room-powerup-percentage (structure)
  ((avg-spawn-rate uint64     :offset-assert 0)
   (percentages    UNKNOWN 51 :offset-assert 8)
   (red2           float      :offset-assert 116)
   (red3           float      :offset-assert 120)
   (yellow2        float      :offset-assert 128)
   (yellow3        float      :offset-assert 132)
   (blue1          float      :offset-assert 136)
   (blue2          float      :offset-assert 140)
   (blue3          float      :offset-assert 144)
   (darkjak        float      :offset-assert 36)
   (lightjak       float      :offset-assert 64)
   (health         float      :offset-assert 88)
   )
  :method-count-assert 9
  :size-assert         #xd4
  :flag-assert         #x9000000d4
  )
|#

#|
(deftype assault-cmd-context (structure)
  ((start-time      uint64                    :offset-assert 0)
   (state-time      uint64                    :offset-assert 8)
   (current-command assault-spawn-cmd :inline :offset-assert 16)
   (script          basic                     :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )
|#

;; (define-extern *port-assault-speech* array)
;; (define-extern *assault-object-count* array)
;; (define-extern *assault-fade-dist* array)
;; (define-extern *assault-graph-classification* array)
;; (define-extern *assault-faction-lookup* array)
;; (define-extern *assault-guard-count* array)
;; (define-extern *assault-citizen-count* array)
;; (define-extern symbol->assault-target-type function)
;; (define-extern symbol->speech-type function)
;; (define-extern symbol->faction-type function)
;; (define-extern symbol->gun-pickup-type function)
;; (define-extern parse-assault-command function)
;; (define-extern *assault-bombbot-paths* array)
;; (define-extern *assault-scripts* array)
;; (define-extern *room-goal* array)
;; (define-extern *room-powerups* array)
;; (define-extern *room0-script* object)
;; (define-extern *room1-script* object)
;; (define-extern *room2-script* object)
;; (define-extern *room3-script* object)
;; (define-extern *room4-script* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; assault-task                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ammo-special-info (structure)
  ((ammo-type     int32   :offset-assert 0)
   (gun-type      int32   :offset-assert 4)
   (end-lock-time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype task-manager-city-port-assault (task-manager)
  ((script-command          assault-cmd-context :inline :offset-assert 240)
   (door-handle             uint64                      :offset-assert 312)
   (current-room            assault-room                :offset-assert 320)
   (current-room-index      int8                        :offset-assert 324)
   (h-player-controller     uint64                      :offset-assert 328)
   (spawners                UNKNOWN             12      :offset-assert 336)
   (original-cam-point      vector              :inline :offset-assert 1296)
   (original-cam-quat       quaternion          :inline :offset-assert 1312)
   (ammo-special            ammo-special-info   :inline :offset-assert 1328)
   (torn-h                  uint64                      :offset-assert 1344)
   (next-powerup-spawn-time uint64                      :offset-assert 1352)
   (final-bombbot?          basic                       :offset-assert 1360)
   (room-override-index     int8                        :offset-assert 1364)
   (bombbot-dead?           basic                       :offset-assert 1368)
   (cam-pan-sound           uint32                      :offset-assert 1372)
   )
  :method-count-assert 53
  :size-assert         #x560
  :flag-assert         #x3504e00560
  (:methods
    (task-manager-city-port-assault-method-36 () none) ;; 36
    (task-manager-city-port-assault-method-37 () none) ;; 37
    (task-manager-city-port-assault-method-38 () none) ;; 38
    (task-manager-city-port-assault-method-39 () none) ;; 39
    (task-manager-city-port-assault-method-40 () none) ;; 40
    (task-manager-city-port-assault-method-41 () none) ;; 41
    (task-manager-city-port-assault-method-42 () none) ;; 42
    (task-manager-city-port-assault-method-43 () none) ;; 43
    (task-manager-city-port-assault-method-44 () none) ;; 44
    (task-manager-city-port-assault-method-45 () none) ;; 45
    (task-manager-city-port-assault-method-46 () none) ;; 46
    (task-manager-city-port-assault-method-47 () none) ;; 47
    (task-manager-city-port-assault-method-48 () none) ;; 48
    (task-manager-city-port-assault-method-49 () none) ;; 49
    (task-manager-city-port-assault-method-50 () none) ;; 50
    (task-manager-city-port-assault-method-51 () none) ;; 51
    (task-manager-city-port-assault-method-52 () none) ;; 52
    )
  (:state-methods
    wait ;; 14
    active ;; 15
    combat ;; 33
    player-entrance ;; 34
    player-quickstart ;; 35
    transition ;; 32
    )
  )
|#

#|
(deftype assault-player-controller (player-controller)
  ((collision assault-room-collision  :offset-assert 272)
   )
  :method-count-assert 37
  :size-assert         #x114
  :flag-assert         #x2500a00114
  (:methods
    (assault-player-controller-method-36 () none) ;; 36
    )
  (:state-methods
    clip-to-nav-mesh ;; 30
    )
  )
|#

#|
(deftype assault-squad-control (basic)
  ((door-index       int16          :offset-assert 4)
   (spawn-records    basic          :offset-assert 8)
   (next-spawn-index int16          :offset-assert 12)
   (door-pos         vector :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (assault-squad-control-method-9 () none) ;; 9
    (assault-squad-control-method-10 () none) ;; 10
    (assault-squad-control-method-11 () none) ;; 11
    (assault-squad-control-method-12 () none) ;; 12
    (assault-squad-control-method-13 () none) ;; 13
    )
  )
|#

;; (define-extern *port-assault-blur-curve* object)
;; (define-extern compute-player-ammo function)
;; (define-extern lctypalt-login function)
;; (define-extern lctypalt-logout function)
;; (define-extern skip-to-room function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-centipede-part              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-ground-dirt-bounce function)
;; (define-extern spt-func-ground-dirt-bounce1 function)
;; (define-extern spt-func-ground-dirt-bounce2 function)
;; (define-extern spt-birth-func-brightness-mh-centipede-rocks function)
;; (define-extern spt-birth-func-brightness-mh-centipede-dirt function)
;; (define-extern spt-birth-func-brightness-mh-centipede-dust function)
;; (define-extern spt-birth-func-part-mh-centipede-before-breach-rocks function)
;; (define-extern spt-func-part-mh-centipede-before-breach-rocks function)
;; (define-extern spt-birth-func-part-mh-centipede-breach-dirt function)
;; (define-extern spt-birth-func-part-mh-centipede-breach-rocks function)
;; (define-extern spt-func-part-mh-centipede-breach-rocks function)
;; (define-extern spt-birth-func-part-mh-centipede-breach-rocks-bounce1 function)
;; (define-extern spt-func-part-mh-centipede-breach-rocks-bounce1 function)
;; (define-extern spt-func-ground-dirt-bounce3 function)
;; (define-extern spt-birth-func-part-mh-centipede-breach-rocks-bounce2 function)
;; (define-extern spt-birth-func-part-mh-centipede-impact-dirt function)
;; (define-extern spt-birth-func-part-mh-centipede-impact-rocks function)
;; (define-extern spt-func-part-mh-centipede-impact-rocks function)
;; (define-extern spt-birth-func-part-mh-centipede-impact-rocks-bounce1 function)
;; (define-extern spt-func-part-mh-centipede-impact-rocks-bounce1 function)
;; (define-extern spt-birth-func-brightness-mh-centipede-blood function)
;; (define-extern spt-birth-func-part-mh-centipede-explosion-lots function)
;; (define-extern spt-birth-func-part-mh-centipede-explosion function)
;; (define-extern *range-mhcent-splash-color* curve-color-fast)
;; (define-extern *range-mhcent-splash-alpha* curve2d-fast)
;; (define-extern *range-mhcent-splash-scale-x* curve2d-fast)
;; (define-extern *range-mhcent-splash-scale-y* curve2d-fast)
;; (define-extern *curve-mhcent-splash-alpha* curve2d-fast)
;; (define-extern *curve-mhcent-splash-scale-x* curve2d-fast)
;; (define-extern *curve-mhcent-splash-scale-y* curve2d-fast)
;; (define-extern *part-mh-centipede-splash-curve-settings* object)
;; (define-extern check-mh-centipede-explosion-level function)
;; (define-extern spt-birth-func-part-mh-centipede-shot-explosion-dirt function)
;; (define-extern spt-birth-func-part-mh-centipede-shot-explosion-dust function)
;; (define-extern spt-birth-func-part-mh-centipede-shot-explosion-bits function)
;; (define-extern *range-mh-centipede-shot-explo-color* curve-color-fast)
;; (define-extern *range-mh-centipede-shot-explo-alpha* curve2d-fast)
;; (define-extern *range-mh-centipede-shot-explo-scale-x* curve2d-fast)
;; (define-extern *range-mh-centipede-shot-explo-scale-y* curve2d-fast)
;; (define-extern *curve-mh-centipede-shot-explo-alpha* curve2d-fast)
;; (define-extern *curve-mh-centipede-shot-explo-scale-x* curve2d-fast)
;; (define-extern *curve-mh-centipede-shot-explo-scale-y* curve2d-fast)
;; (define-extern *part-mh-centipede-shot-explosion-texture-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mh-centipede                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype nest-hunt-speech-instance (structure)
  ((speech      uint16  :offset-assert 0)
   (probability float   :offset-assert 4)
   (flags       uint64  :offset-assert 8)
   (play-count  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype nest-hunt-speech-info (structure)
  ((speeches         basic   :offset-assert 0)
   (play-time        uint64  :offset-assert 8)
   (current-random   uint64  :offset-assert 16)
   (minimum-interval uint64  :offset-assert 24)
   (random-interval  uint64  :offset-assert 32)
   (last-played      int8    :offset-assert 40)
   (flags            uint8   :offset-assert 41)
   )
  :method-count-assert 9
  :size-assert         #x2a
  :flag-assert         #x90000002a
  )
|#

#|
(deftype nest-hunt-speech-group (structure)
  ((play-time         uint64  :offset-assert 0)
   (game-counter-last float   :offset-assert 8)
   (info              basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype rod-spawner (process-drawable)
  ((rod     uint64              :offset-assert 200)
   (minimap connection-minimap  :offset-assert 208)
   )
  :method-count-assert 23
  :size-assert         #xd4
  :flag-assert         #x17006000d4
  (:state-methods
    hidden ;; 22
    idle ;; 20
    wait-for-children ;; 21
    )
  )
|#

#|
(deftype mh-centipede-shot (projectile)
  ((trail-part basic  :offset-assert 512)
   )
  :method-count-assert 41
  :size-assert         #x204
  :flag-assert         #x2901900204
  (:state-methods
    impact ;; 22
    moving ;; 23
    )
  )
|#

#|
(deftype mh-centipede-crater-pt (structure)
  ((collision-pt vector :inline :offset-assert 0)
   (normal       vector :inline :offset-assert 16)
   (found?       basic          :offset-assert 32)
   (angle        float          :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype mh-centipede-crater-pt-array (structure)
  ((points        UNKNOWN 20      :offset-assert 0)
   (origin        vector  :inline :offset-assert 960)
   (radius        float           :offset-assert 976)
   (current-point int32           :offset-assert 980)
   )
  :method-count-assert 12
  :size-assert         #x3d8
  :flag-assert         #xc000003d8
  (:methods
    (mh-centipede-crater-pt-array-method-9 () none) ;; 9
    (mh-centipede-crater-pt-array-method-10 () none) ;; 10
    (mh-centipede-crater-pt-array-method-11 () none) ;; 11
    )
  )
|#

#|
(deftype mh-centipede-anim (structure)
  ((anim             int32  :offset-assert 0)
   (speed            float  :offset-assert 4)
   (radius           float  :offset-assert 8)
   (vulnerable-start float  :offset-assert 12)
   (vulnerable-end   float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype mh-centipede (process-focusable)
  ((launch-position         vector                       :inline :offset-assert 208)
   (landing-position        vector                       :inline :offset-assert 224)
   (flags                   uint32                               :offset-assert 240)
   (incoming-attack-id      uint32                               :offset-assert 244)
   (hit-points              float                                :offset-assert 248)
   (appearance-order        int8                                 :offset-assert 252)
   (before-breach-part      basic                                :offset-assert 256)
   (breach-part             basic                                :offset-assert 260)
   (dirt-fall-part          basic                                :offset-assert 264)
   (impact-part             basic                                :offset-assert 268)
   (impact-dust-part        basic                                :offset-assert 272)
   (out-of-ground-crater    mh-centipede-crater-pt-array :inline :offset-assert 288)
   (into-ground-crater      mh-centipede-crater-pt-array :inline :offset-assert 1280)
   (wait-time               uint64                               :offset-assert 2264)
   (pre-breach-time         uint64                               :offset-assert 2272)
   (breach-anims            basic                                :offset-assert 2280)
   (shoot-anims             basic                                :offset-assert 2284)
   (current-anim            mh-centipede-anim                    :offset-assert 2288)
   (nose-smack-time         uint64                               :offset-assert 2296)
   (tail-smack-time         uint64                               :offset-assert 2304)
   (timeout                 uint64                               :offset-assert 2312)
   (prev-anim-frame         float                                :offset-assert 2320)
   (current-target-position vector                       :inline :offset-assert 2336)
   (prev-target-position    vector                       :inline :offset-assert 2352)
   (prev-time               uint64                               :offset-assert 2368)
   (rumble-sound            uint32                               :offset-assert 2376)
   (rumble-sound-playing    basic                                :offset-assert 2380)
   (ground-sound            uint32                               :offset-assert 2384)
   (ground-sound-playing    basic                                :offset-assert 2388)
   (legs-sound              uint32                               :offset-assert 2392)
   (legs-sound-playing      basic                                :offset-assert 2396)
   (minimap                 connection-minimap                   :offset-assert 2400)
   (mm-handle               uint64                               :offset-assert 2408)
   (effect-sphere           sphere                               :offset-assert 2416)
   )
  :method-count-assert 43
  :size-assert         #x974
  :flag-assert         #x2b09000974
  (:methods
    (mh-centipede-method-36 () none) ;; 36
    (mh-centipede-method-37 () none) ;; 37
    (mh-centipede-method-38 () none) ;; 38
    (mh-centipede-method-39 () none) ;; 39
    (mh-centipede-method-40 () none) ;; 40
    (mh-centipede-method-41 () none) ;; 41
    (mh-centipede-method-42 () none) ;; 42
    )
  (:state-methods
    test ;; 35
    die ;; 34
    shooting ;; 33
    breach ;; 32
    pre-breach ;; 31
    wait-off-minimap ;; 30
    wait-on-minimap ;; 29
    hidden ;; 28
    )
  )
|#

#|
(deftype mh-centipede-minimap-dot (process-drawable)
  ((minimap connection-minimap  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-mh-centipede (task-manager)
  ((vehicle-handle          uint64         :offset-assert 236)
   (manager-entity          basic          :offset-assert 244)
   (check-timer             uint64         :offset-assert 252)
   (actor-group             uint32         :offset-assert 260)
   (actor-group-count       int32          :offset-assert 264)
   (last-centipede-position vector :inline :offset-assert 268)
   (last-target-position    vector :inline :offset-assert 284)
   )
  :method-count-assert 33
  :size-assert         #x130
  :flag-assert         #x2100b00130
  (:methods
    (task-manager-mh-centipede-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-nstb-crystal (task-manager)
  ((vehicle-handle uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern *mh-centipede-sphere-1* object)
;; (define-extern *mh-centipede-sphere-2* object)
;; (define-extern nest-hunt-find-sphere function)
;; (define-extern nest-hunt-same-sphere function)
;; (define-extern nest-hunt-volume function)
;; (define-extern nest-hunt-shake-amp function)
;; (define-extern *nest-hunt-speech-list* object)
;; (define-extern *nest-hunt-speech* object)
;; (define-extern reset-nest-hunt-speeches function)
;; (define-extern nest-hunt-play-speech function)
;; (define-extern *mh-centipede-shadow-control* shadow-control)
;; (define-extern *mh-centipede-exploder-params* joint-exploder-static-params)
;; (define-extern mh-centipede-minimap-dot-init-by-other function)
;; (define-extern mh-centipede-active-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-lizard-h                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *catch-lizards-speech-list* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-lizard-task             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype lizard-graph-edge (structure)
  ((index UNKNOWN 2 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype lizard-graph (structure)
  ((point-count int32   :offset-assert 0)
   (point       uint32  :offset-assert 4)
   (edge-count  int32   :offset-assert 8)
   (edge        uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype task-manager-desert-catch-lizards (task-manager)
  ((corral-pos          sphere :inline :offset-assert 236)
   (actor-group         uint32         :offset-assert 252)
   (actor-group-count   int32          :offset-assert 256)
   (manager-entity      basic          :offset-assert 260)
   (lizard-count        int32          :offset-assert 264)
   (lizards-left        int32          :offset-assert 268)
   (sound-id            uint32         :offset-assert 272)
   (restart-time        uint64         :offset-assert 276)
   (vehicle-handle      uint64         :offset-assert 284)
   (vehicle-hit-points  float          :offset-assert 292)
   (vehicle-turbo-count float          :offset-assert 296)
   (lizard-in-corral    basic          :offset-assert 300)
   (daxter-comment-time uint64         :offset-assert 308)
   (hint-time           uint64         :offset-assert 316)
   (arrow-handle        uint64         :offset-assert 324)
   )
  :method-count-assert 35
  :size-assert         #x150
  :flag-assert         #x2300d00150
  (:methods
    (task-manager-desert-catch-lizards-method-33 () none) ;; 33
    (task-manager-desert-catch-lizards-method-34 () none) ;; 34
    )
  (:state-methods
    resolution ;; 17
    paused ;; 32
    active ;; 15
    )
  )
|#

#|
(deftype kleever-catch-lizards (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype toad-catch-lizards (w-parking-spot)
  ()
  :method-count-assert 27
  :size-assert         #xf8
  :flag-assert         #x1b008000f8
  )
|#

;; (define-extern *desertg-lizard-graph* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-lizard                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype desert-lizard (nav-enemy)
  ((graph        lizard-graph        :offset-assert 620)
   (minimap      connection-minimap  :offset-assert 624)
   (catch-timer  uint64              :offset-assert 632)
   (closest-dist float               :offset-assert 640)
   (color-index  int32               :offset-assert 644)
   (talker-id    uint32              :offset-assert 648)
   )
  :method-count-assert 193
  :size-assert         #x28c
  :flag-assert         #xc10210028c
  (:methods
    (desert-lizard-method-192 () none) ;; 192
    )
  (:state-methods
    catching-daxter ;; 190
    flee ;; 36
    disappear ;; 191
    notice ;; 35
    )
  )
|#

#|
(deftype desert-lizard-spawner (process)
  ((state-time          uint64  :offset-assert 128)
   (death-time          uint64  :offset-assert 136)
   (lizard              uint64  :offset-assert 144)
   (suppress-spawn-time uint64  :offset-assert 152)
   )
  :method-count-assert 15
  :size-assert         #xa0
  :flag-assert         #xf002000a0
  (:state-methods
    idle ;; 14
    )
  )
|#

;; (define-extern *desert-lizard-almost-there-timer* object)
;; (define-extern *desert-lizard-fact-info* fact-info-enemy-defaults)
;; (define-extern *desert-lizard-enemy-info* nav-enemy-info)
;; (define-extern desert-lizard-flee-post function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waspala-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype water-anim-waspala (water-anim)
  ()
  :method-count-assert 29
  :size-assert         #x100
  :flag-assert         #x1d00800100
  )
|#

#|
(deftype waspala-paddle-wheel (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (waspala-paddle-wheel-method-21 () none) ;; 21
    )
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype waspala-paddle-wheel-a (waspala-paddle-wheel)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  )
|#

#|
(deftype waspala-paddle-wheel-b (waspala-paddle-wheel)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  )
|#

#|
(deftype waspala-windmill (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-throne-gun-training (task-manager)
  ((gui-id uint32  :offset-assert 240)
   )
  :method-count-assert 33
  :size-assert         #xf4
  :flag-assert         #x21008000f4
  (:methods
    (task-manager-throne-gun-training-method-32 () none) ;; 32
    )
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype waspala-blocker (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern ripple-for-water-anim-waspala ripple-wave-set)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waspala-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-waspala-wallfire-flame* curve-color-fast)
;; (define-extern *range-alpha-waspala-wallfire-flame* curve2d-fast)
;; (define-extern *range-scale-waspala-wallfire-flame-x* curve2d-fast)
;; (define-extern *range-scale-waspala-wallfire-flame-y* curve2d-fast)
;; (define-extern *r-curve-waspala-wallfire-flame* curve2d-fast)
;; (define-extern *g-curve-waspala-wallfire-flame* curve2d-fast)
;; (define-extern *b-curve-waspala-wallfire-flame* curve2d-fast)
;; (define-extern *curve-alpha-waspala-wallfire-flame* curve2d-fast)
;; (define-extern *curve-waspala-wallfire-flame-x* curve2d-fast)
;; (define-extern *curve-waspala-wallfire-flame-y* curve2d-fast)
;; (define-extern *part-waspala-wallfire-flame-curve-settings* object)
;; (define-extern *range-color-waspala-hanging-flame* curve-color-fast)
;; (define-extern *range-alpha-waspala-hanging-flame* curve2d-fast)
;; (define-extern *range-scale-waspala-hanging-flame-x* curve2d-fast)
;; (define-extern *range-scale-waspala-hanging-flame-y* curve2d-fast)
;; (define-extern *r-curve-waspala-hanging-flame* curve2d-fast)
;; (define-extern *g-curve-waspala-hanging-flame* curve2d-fast)
;; (define-extern *b-curve-waspala-hanging-flame* curve2d-fast)
;; (define-extern *curve-alpha-waspala-hanging-flame* curve2d-fast)
;; (define-extern *curve-waspala-hanging-flame-x* curve2d-fast)
;; (define-extern *curve-waspala-hanging-flame-y* curve2d-fast)
;; (define-extern *part-waspala-hanging-flame-curve-settings* object)
;; (define-extern *range-color-waspala-crucible-flame* curve-color-fast)
;; (define-extern *range-alpha-waspala-crucible-flame* curve2d-fast)
;; (define-extern *range-scale-waspala-crucible-flame-x* curve2d-fast)
;; (define-extern *range-scale-waspala-crucible-flame-y* curve2d-fast)
;; (define-extern *r-curve-waspala-crucible-flame* curve2d-fast)
;; (define-extern *g-curve-waspala-crucible-flame* curve2d-fast)
;; (define-extern *b-curve-waspala-crucible-flame* curve2d-fast)
;; (define-extern *curve-alpha-waspala-crucible-flame* curve2d-fast)
;; (define-extern *curve-waspala-crucible-flame-x* curve2d-fast)
;; (define-extern *curve-waspala-crucible-flame-y* curve2d-fast)
;; (define-extern *part-waspala-crucible-flame-curve-settings* object)
;; (define-extern *range-intro-waspala-squeeze-color* curve-color-fast)
;; (define-extern *range-intro-waspala-squeeze-alpha* curve2d-fast)
;; (define-extern *range-intro-waspala-squeeze-scale-x* curve2d-fast)
;; (define-extern *range-intro-waspala-squeeze-scale-y* curve2d-fast)
;; (define-extern *curve-intro-waspala-squeeze-alpha* curve2d-fast)
;; (define-extern *curve-intro-waspala-squeeze-scale-x* curve2d-fast)
;; (define-extern *curve-intro-waspala-squeeze-scale-y* curve2d-fast)
;; (define-extern *part-waspala-squeeze-water-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waspal-mood                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype waspala-states (structure)
  ((flame0 flames-state :inline :offset-assert 0)
   (flame1 flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

;; (define-extern calc-waspala-lights function)
;; (define-extern update-mood-waspala function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waspal-texture                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *waspal-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; throne-scenes                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wastrail-graph                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *trail-graph* trail-graph) ;; trail-graph

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasall-init                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *wasall-reserve* object)
;; (define-extern wasall-login function)
;; (define-extern wasall-logout function)
;; (define-extern wasall-activate function)
;; (define-extern wasall-deactivate function)
;; (define-extern desert-game-activate function)
;; (define-extern desert-race-level-activate function)
;; (define-extern desert-race-level-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasall-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-birth-func-brightness-buggy-dirt-bits function)
;; (define-extern spt-birth-func-part-buggy-dirt-bits function)
;; (define-extern spt-birth-func-part-buggy-skid-bits function)
;; (define-extern *wasdoors-range-color-flame* curve-color-fast)
;; (define-extern *wasdoors-range-alpha-flame* curve2d-fast)
;; (define-extern *wasdoors-range-scale-flame-x* curve2d-fast)
;; (define-extern *wasdoors-range-scale-flame-y* curve2d-fast)
;; (define-extern *r-wasdoors-curve-flame* curve2d-fast)
;; (define-extern *g-wasdoors-curve-flame* curve2d-fast)
;; (define-extern *b-wasdoors-curve-flame* curve2d-fast)
;; (define-extern *wasdoors-curve-alpha-flame* curve2d-fast)
;; (define-extern *wasdoors-curve-flame-x* curve2d-fast)
;; (define-extern *wasdoors-curve-flame-y* curve2d-fast)
;; (define-extern *part-wasdoors-gas-lamp-flame-curve-settings* object)
;; (define-extern spt-birth-func-brightness-part-desert-boss-slide-dust function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasall-obs                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-airlock (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype wascity-airlock-small (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

#|
(deftype wascity-elevator-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  (:state-methods
    open ;; 20
    )
  )
|#

#|
(deftype tentacle (process-drawable)
  ((init-pos        vector :inline :offset-assert 208)
   (focus-pos       vector :inline :offset-assert 224)
   (nav-mesh        basic          :offset-assert 240)
   (active-timer    uint64         :offset-assert 248)
   (fade-level      float          :offset-assert 256)
   (sound-id-loop   uint32         :offset-assert 260)
   (sound-id-attack uint32         :offset-assert 264)
   )
  :method-count-assert 26
  :size-assert         #x10c
  :flag-assert         #x1a0090010c
  (:state-methods
    wait ;; 25
    kill-player ;; 24
    attacking-1 ;; 23
    attacking-0 ;; 22
    un-dive-player ;; 21
    dormant ;; 20
    )
  )
|#

;; (define-extern tentacle-follow-post function)
;; (define-extern tentacle-attack-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasall-tasks                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype dust-storm-randomizer (process)
  ((name             basic                 :offset-assert 0)
   (mask             process-mask          :offset-assert 4)
   (clock            basic                 :offset-assert 8)
   (parent           uint32                :offset-assert 12)
   (brother          uint32                :offset-assert 16)
   (child            uint32                :offset-assert 20)
   (ppointer         uint32                :offset-assert 24)
   (self             basic                 :offset-assert 28)
   (pool             basic                 :offset-assert 32)
   (status           basic                 :offset-assert 36)
   (pid              int32                 :offset-assert 40)
   (main-thread      basic                 :offset-assert 44)
   (top-thread       basic                 :offset-assert 48)
   (entity           basic                 :offset-assert 52)
   (level            basic                 :offset-assert 56)
   (state            basic                 :offset-assert 60)
   (prev-state       basic                 :offset-assert 64)
   (next-state       basic                 :offset-assert 68)
   (state-stack      basic                 :offset-assert 72)
   (trans-hook       basic                 :offset-assert 76)
   (post-hook        basic                 :offset-assert 80)
   (event-hook       basic                 :offset-assert 84)
   (allocated-length int32                 :offset-assert 88)
   (heap-base        uint32                :offset-assert 92)
   (heap-top         uint32                :offset-assert 96)
   (heap-cur         uint32                :offset-assert 100)
   (stack-frame-top  basic                 :offset-assert 104)
   (heap             kheap        :inline  :offset-assert 92)
   (connection-list  connectable  :inline  :offset-assert 108)
   (stack            UNKNOWN      :dynamic :offset-assert 124)
   )
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype task-manager-temple (task-manager)
  ((rod-of-god     uint64              :offset-assert 240)
   (vehicle        uint64              :offset-assert 248)
   (minimap        connection-minimap  :offset-assert 256)
   (minimap-temple connection-minimap  :offset-assert 260)
   )
  :method-count-assert 34
  :size-assert         #x108
  :flag-assert         #x2200900108
  (:methods
    (task-manager-temple-method-32 () none) ;; 32
    (task-manager-temple-method-33 () none) ;; 33
    )
  )
|#

#|
(deftype task-manager-temple-climb (task-manager-temple)
  ()
  :method-count-assert 34
  :size-assert         #x108
  :flag-assert         #x2200900108
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-temple-tests (task-manager-temple)
  ()
  :method-count-assert 34
  :size-assert         #x108
  :flag-assert         #x2200900108
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-desert-interceptors-attack (task-manager)
  ((target-set-time uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  (:state-methods
    fail ;; 18
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-vehicle-training-1 (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-vehicle-training-2 (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-highlight-vehicle (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

#|
(deftype oasis-defense-intro-manager (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-highlight-vehicle-wait (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-vehicle-wait (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-lock-wasdoors (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  (:state-methods
    active ;; 15
    )
  )
|#

#|
(deftype task-manager-get-to-corral (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

#|
(deftype task-manager-desert-beast-battle-intro (task-manager)
  ((sig-rider-handle uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  )
|#

#|
(deftype task-manager-desert-beast-battle (task-manager)
  ((sig-rider-handle uint64  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf8
  :flag-assert         #x20008000f8
  )
|#

#|
(deftype task-manager-desert-beast-battle-end (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

#|
(deftype task-manager-nest-hunt (task-manager)
  ((vehicle-handle     uint64              :offset-assert 240)
   (sig-handle         uint64              :offset-assert 248)
   (minimap-connection connection-minimap  :offset-assert 256)
   (showing-desert     basic               :offset-assert 260)
   )
  :method-count-assert 32
  :size-assert         #x108
  :flag-assert         #x2000900108
  )
|#

;; (define-extern wasall-kill-duplicate-vehicle function)
;; (define-extern dust-storm-randomizer-init-by-other function)
;; (define-extern spawn-dust-storm-randomizer function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; waswide-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype wascity-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

#|
(deftype wascitya-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

#|
(deftype wascityb-states (structure)
  ((light        light-state  :inline :offset-assert 0)
   (flame        flames-state :inline :offset-assert 8)
   (turret-value float                :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

;; (define-extern update-mood-wascity function)
;; (define-extern update-mood-wascitya function)
;; (define-extern update-mood-wascityb function)
;; (define-extern set-wascityb-turret-flash! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-h                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-edge-list (basic)
  ((edge UNKNOWN 4 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype factory-inout (structure)
  ((lpath int16  :offset-assert 0)
   (lpos  float  :offset-assert 4)
   (flags uint8  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x9
  :flag-assert         #x900000009
  )
|#

#|
(deftype factory-pathlist (structure)
  ((path   UNKNOWN 200 :offset-assert 0)
   (inout  UNKNOWN 200 :offset-assert 800)
   (loops  UNKNOWN 200 :offset-assert 4000)
   (npath  int8        :offset-assert 4400)
   (nloop  int8        :offset-assert 4401)
   (curidx int8        :offset-assert 4402)
   )
  :method-count-assert 9
  :size-assert         #x1133
  :flag-assert         #x900001133
  )
|#

#|
(deftype factory-manager (process)
  ((nfighters-spawned uint8                    :offset-assert 128)
   (nfighters-total   uint8                    :offset-assert 129)
   (ntanks-spawned    uint8                    :offset-assert 130)
   (player-born       uint64                   :offset-assert 136)
   (player-died       uint64                   :offset-assert 144)
   (fighter-spawned   uint64                   :offset-assert 152)
   (fighter-killed    uint64                   :offset-assert 160)
   (tank-spawned      uint64                   :offset-assert 168)
   (tank-killed       uint64                   :offset-assert 176)
   (fpath             factory-pathlist :inline :offset-assert 184)
   (tpath             factory-pathlist :inline :offset-assert 4588)
   (cur-wave          uint8                    :offset-assert 8991)
   )
  :method-count-assert 17
  :size-assert         #x2320
  :flag-assert         #x1122a02320
  (:methods
    (factory-manager-method-14 () none) ;; 14
    (factory-manager-method-15 () none) ;; 15
    (factory-manager-method-16 () none) ;; 16
    )
  )
|#

#|
(deftype factory-fighter (rigid-body-object)
  ((first-time?           basic          :offset-assert 288)
   (path-pos              float          :offset-assert 292)
   (forw                  vector :inline :offset-assert 304)
   (upvc                  vector :inline :offset-assert 320)
   (ppos                  vector :inline :offset-assert 336)
   (pvel                  vector :inline :offset-assert 352)
   (pacc                  vector :inline :offset-assert 368)
   (blendpath             float          :offset-assert 384)
   (newpath               int8           :offset-assert 388)
   (path-idx              int8           :offset-assert 389)
   (last-hit-time         uint64         :offset-assert 392)
   (disappear             basic          :offset-assert 400)
   (last-fire             uint64         :offset-assert 408)
   (turret-gun            int8           :offset-assert 416)
   (light-trail           uint64         :offset-assert 424)
   (rot-vel               float          :offset-assert 432)
   (rot-acc               float          :offset-assert 436)
   (engine-sound          uint32         :offset-assert 440)
   (engine-sound-playing? basic          :offset-assert 444)
   (last-snd-cmd          uint64         :offset-assert 448)
   (red-tip-change-time   uint64         :offset-assert 456)
   (red-tip-on            basic          :offset-assert 464)
   )
  :method-count-assert 63
  :size-assert         #x1d4
  :flag-assert         #x3f016001d4
  (:methods
    (factory-fighter-method-56 () none) ;; 56
    (factory-fighter-method-57 () none) ;; 57
    (factory-fighter-method-58 () none) ;; 58
    (factory-fighter-method-59 () none) ;; 59
    (factory-fighter-method-60 () none) ;; 60
    (factory-fighter-method-61 () none) ;; 61
    (factory-fighter-method-62 () none) ;; 62
    )
  )
|#

#|
(deftype fac-target (process-focusable)
  ((sync     sync-paused        :inline :offset-assert 208)
   (minimap  connection-minimap         :offset-assert 232)
   (light-jm basic                      :offset-assert 236)
   )
  :method-count-assert 35
  :size-assert         #xf0
  :flag-assert         #x23007000f0
  (:methods
    (fac-target-method-28 () none) ;; 28
    (fac-target-method-29 () none) ;; 29
    (fac-target-method-30 () none) ;; 30
    (fac-target-method-31 () none) ;; 31
    (fac-target-method-32 () none) ;; 32
    (fac-target-method-33 () none) ;; 33
    (fac-target-method-34 () none) ;; 34
    )
  )
|#

#|
(deftype fac-gun-tower (process-focusable)
  ((yaw                  float               :offset-assert 208)
   (yawvel               float               :offset-assert 212)
   (pitch                float               :offset-assert 216)
   (pitchvel             float               :offset-assert 220)
   (dyaw                 float               :offset-assert 224)
   (dpitch               float               :offset-assert 228)
   (last-fire            uint64              :offset-assert 232)
   (last-hit-time        uint64              :offset-assert 240)
   (gunrot               int8                :offset-assert 248)
   (muzzle               int8                :offset-assert 249)
   (gun-idx              int8                :offset-assert 250)
   (attack-id            int32               :offset-assert 252)
   (gun-tilt-jm          basic               :offset-assert 256)
   (hit-points           float               :offset-assert 260)
   (invincable           basic               :offset-assert 264)
   (rotate-sound         uint32              :offset-assert 268)
   (rotate-sound-playing basic               :offset-assert 272)
   (blade-sound          uint32              :offset-assert 276)
   (blade-sound-playing  basic               :offset-assert 280)
   (snd-cmd-time         uint64              :offset-assert 288)
   (minimap              connection-minimap  :offset-assert 296)
   )
  :method-count-assert 38
  :size-assert         #x12c
  :flag-assert         #x2600b0012c
  (:methods
    (fac-gun-tower-method-28 () none) ;; 28
    (fac-gun-tower-method-29 () none) ;; 29
    (fac-gun-tower-method-30 () none) ;; 30
    (fac-gun-tower-method-31 () none) ;; 31
    (fac-gun-tower-method-32 () none) ;; 32
    (fac-gun-tower-method-33 () none) ;; 33
    (fac-gun-tower-method-34 () none) ;; 34
    (fac-gun-tower-method-35 () none) ;; 35
    (fac-gun-tower-method-36 () none) ;; 36
    (fac-gun-tower-method-37 () none) ;; 37
    )
  )
|#

#|
(deftype fac-gun-tower-break (process-drawable)
  ()
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (fac-gun-tower-break-method-20 () none) ;; 20
    (fac-gun-tower-break-method-21 () none) ;; 21
    )
  )
|#

#|
(deftype fac-gun-tower-base-broken (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (fac-gun-tower-base-broken-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype hud-factory-damage (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ffight-projectile              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ffight-shot (projectile)
  ((hit-actor? basic          :offset-assert 512)
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

;; (define-extern ffight-shot-move function)
;; (define-extern spawn-ffight-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ftank-projectile               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype ftank-shot (projectile)
  ((hit-actor? basic          :offset-assert 512)
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

;; (define-extern ftank-shot-move function)
;; (define-extern spawn-ftank-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fturret-projectile             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fturret-shot (projectile)
  ((hit-actor? basic          :offset-assert 512)
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  )
|#

;; (define-extern fturret-shot-move function)
;; (define-extern spawn-fturret-projectile function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; warf-projectile                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype warf-explosion-sphere (process-drawable)
  ((current-alpha float  :offset-assert 200)
   (expanding?    basic  :offset-assert 216)
   )
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:methods
    (warf-explosion-sphere-method-21 () none) ;; 21
    (warf-explosion-sphere-method-22 () none) ;; 22
    )
  (:state-methods
    active ;; 20
    )
  )
|#

#|
(deftype warf-explosion-sphere-init-params (structure)
  ((pos vector :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
|#

#|
(deftype warf-projectile (projectile)
  ((hit-actor?        basic          :offset-assert 512)
   (tail-pos          vector :inline :offset-assert 528)
   (hit-pos           vector :inline :offset-assert 544)
   (last-hit-time     uint64         :offset-assert 560)
   (snd-whoosh        uint32         :offset-assert 568)
   (muzzle-flash-part basic          :offset-assert 576)
   )
  :method-count-assert 46
  :size-assert         #x244
  :flag-assert         #x2e01d00244
  (:methods
    (warf-projectile-method-41 () none) ;; 41
    (warf-projectile-method-42 () none) ;; 42
    (warf-projectile-method-43 () none) ;; 43
    (warf-projectile-method-44 () none) ;; 44
    (warf-projectile-method-45 () none) ;; 45
    )
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype fac-gun-tower-projectile (projectile)
  ((hit-actor? basic          :offset-assert 512)
   (tail-pos   vector :inline :offset-assert 528)
   )
  :method-count-assert 41
  :size-assert         #x220
  :flag-assert         #x2901a00220
  (:state-methods
    impact ;; 22
    )
  )
|#

#|
(deftype gun-warf-shot (projectile)
  ((hit-actor?        basic          :offset-assert 512)
   (tail-pos          vector :inline :offset-assert 528)
   (hit-pos           vector :inline :offset-assert 544)
   (last-hit-time     uint64         :offset-assert 560)
   (snd-whoosh        uint32         :offset-assert 568)
   (muzzle-flash-part basic          :offset-assert 572)
   (main-shot-part    basic          :offset-assert 576)
   (shot-aim-part     basic          :offset-assert 580)
   )
  :method-count-assert 44
  :size-assert         #x248
  :flag-assert         #x2c01d00248
  (:methods
    (gun-warf-shot-method-41 () none) ;; 41
    (gun-warf-shot-method-42 () none) ;; 42
    (gun-warf-shot-method-43 () none) ;; 43
    )
  )
|#

;; (define-extern warf-explosion-sphere-init-by-other function)
;; (define-extern warf-explosion-sphere-event-handler function)
;; (define-extern spawn-warf-projectile function)
;; (define-extern spawn-fac-gun-tower-projectile function)
;; (define-extern warf-projectile-move function)
;; (define-extern spt-func-factory-move function)
;; (define-extern spt-func-part-crystal-torpedo-in function)
;; (define-extern spt-func-part-crystal-torpedo-out function)
;; (define-extern fac-gun-tower-projectile-move function)
;; (define-extern gun-warf-shot-move function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; h-warf                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype h-warf (hvehicle)
  ((minalt               float           :offset-assert 944)
   (curalt               float           :offset-assert 948)
   (maxalt               float           :offset-assert 952)
   (forward              vector  :inline :offset-assert 960)
   (langvel              vector  :inline :offset-assert 976)
   (rollerr              float           :offset-assert 992)
   (pitcherr             float           :offset-assert 996)
   (straighterr          float           :offset-assert 1000)
   (alterr               float           :offset-assert 1004)
   (rolling              basic           :offset-assert 1008)
   (speed                float           :offset-assert 1012)
   (poierr               float           :offset-assert 1016)
   (poipos               float           :offset-assert 1020)
   (poivel               float           :offset-assert 1024)
   (bigshotcount         int8            :offset-assert 1028)
   (deathspin            basic           :offset-assert 1032)
   (deathrot             vector  :inline :offset-assert 1040)
   (birth                uint64          :offset-assert 1056)
   (stop-time            uint64          :offset-assert 1064)
   (bounce-state?        basic           :offset-assert 1072)
   (bounce-angle         float           :offset-assert 1076)
   (fire-time            UNKNOWN 4       :offset-assert 1080)
   (l1-fire-time         uint64          :offset-assert 1112)
   (l1-recharge-time     uint64          :offset-assert 1120)
   (snd-cmd-time         uint64          :offset-assert 1128)
   (damage-loop          uint32          :offset-assert 1136)
   (damage-loop-playing? basic           :offset-assert 1140)
   (damage-loop-index    uint8           :offset-assert 1144)
   (engine-sound         uint32          :offset-assert 1148)
   (engine-boost-sound   uint32          :offset-assert 1152)
   (wind-noise-sound     uint32          :offset-assert 1156)
   (wind-noise-playing?  basic           :offset-assert 1160)
   (track-obj            uint64          :offset-assert 1168)
   (track-joint          int8            :offset-assert 1176)
   (wind                 float           :offset-assert 1180)
   )
  :method-count-assert 165
  :size-assert         #x4a0
  :flag-assert         #xa5042004a0
  (:methods
    (h-warf-method-162 () none) ;; 162
    (h-warf-method-163 () none) ;; 163
    (h-warf-method-164 () none) ;; 164
    )
  )
|#

#|
(deftype warf-asc (structure)
  ((asc float  :offset-assert 0)
   (des float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

;; (define-extern *h-warf-center-of-level* object)
;; (define-extern *h-warf-constants* object)
;; (define-extern impact-reduction function)
;; (define-extern steer-attenuation function)
;; (define-extern ascention-atten! function)
;; (define-extern world-to-local-vec! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-gunturret                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-gun-tower-turret-params (structure)
  ((normal-sg          basic  :offset-assert 0)
   (explode-sg         basic  :offset-assert 4)
   (enemy-info         basic  :offset-assert 8)
   (idle-anim          int32  :offset-assert 12)
   (shoot-anim         int32  :offset-assert 16)
   (track-joint        int32  :offset-assert 20)
   (left-barrel-joint  int32  :offset-assert 24)
   (right-barrel-joint int32  :offset-assert 28)
   (left-gun-joint     int32  :offset-assert 32)
   (right-gun-joint    int32  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

#|
(deftype fac-gunturret (enemy)
  ((left-gun-tilt-jm     basic                               :offset-assert 552)
   (right-gun-tilt-jm    basic                               :offset-assert 556)
   (params               fac-gun-tower-turret-params         :offset-assert 560)
   (aim-pos              vector                      :inline :offset-assert 576)
   (gun-twist            float                               :offset-assert 592)
   (gun-tilt             float                               :offset-assert 596)
   (desired-twist        float                               :offset-assert 600)
   (desired-tilt         float                               :offset-assert 604)
   (los-clear            basic                               :offset-assert 608)
   (smoke-part           basic                               :offset-assert 612)
   (casing-part          basic                               :offset-assert 616)
   (flash-state          basic                               :offset-assert 620)
   (can-shoot            basic                               :offset-assert 624)
   (last-hit-time        uint64                              :offset-assert 632)
   (init-mat             matrix                      :inline :offset-assert 640)
   (activate-distance    float                               :offset-assert 704)
   (aim-offset           vector                      :inline :offset-assert 720)
   (use-alt-barrel       basic                               :offset-assert 736)
   (rotate-sound         uint32                              :offset-assert 740)
   (rotate-sound-playing basic                               :offset-assert 744)
   (snd-cmd-time         uint64                              :offset-assert 752)
   )
  :method-count-assert 161
  :size-assert         #x2f8
  :flag-assert         #xa1028002f8
  (:methods
    (fac-gunturret-method-155 () none) ;; 155
    (fac-gunturret-method-156 () none) ;; 156
    (fac-gunturret-method-157 () none) ;; 157
    (fac-gunturret-method-158 () none) ;; 158
    (fac-gunturret-method-159 () none) ;; 159
    (fac-gunturret-method-160 () none) ;; 160
    )
  (:state-methods
    die ;; 40
    stare ;; 37
    hostile ;; 38
    )
  )
|#

#|
(deftype fac-gun-tower-turret (fac-gunturret)
  ()
  :method-count-assert 161
  :size-assert         #x2f8
  :flag-assert         #xa1028002f8
  )
|#

;; (define-extern *fac-gunturret-exploder-params* joint-exploder-static-params)
;; (define-extern *fac-gunturret-enemy-info* enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-robotank-h                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-robotank-turret            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-robotank-turret (process-focusable)
  ((los                 los-control :inline :offset-assert 208)
   (tank-quat           quaternion  :inline :offset-assert 384)
   (tank-quat-vibe-only quaternion  :inline :offset-assert 400)
   (rotate-quat         quaternion  :inline :offset-assert 416)
   (rotate-rate         float               :offset-assert 432)
   (rotate-mult         float               :offset-assert 436)
   (shot-range          float               :offset-assert 440)
   (fov-mult            float               :offset-assert 444)
   (offset              vector      :inline :offset-assert 448)
   (sight-pos           vector      :inline :offset-assert 464)
   (firing-sight-pos    vector      :inline :offset-assert 480)
   (aim-pos             UNKNOWN     3       :offset-assert 496)
   (gun-timer           uint64              :offset-assert 544)
   (gun-elev-jmod       basic               :offset-assert 552)
   (gun-elev            float               :offset-assert 556)
   (gun-elev-cam        float               :offset-assert 560)
   (gun-joint-l         UNKNOWN     2       :offset-assert 564)
   (gun-joint-r         UNKNOWN     2       :offset-assert 572)
   (gun-spread          float               :offset-assert 580)
   (gun-index           int32               :offset-assert 584)
   (flags               uint16              :offset-assert 588)
   (turn-sound-id       uint32              :offset-assert 592)
   )
  :method-count-assert 35
  :size-assert         #x254
  :flag-assert         #x2301e00254
  (:methods
    (fac-robotank-turret-method-31 () none) ;; 31
    (fac-robotank-turret-method-32 () none) ;; 32
    (fac-robotank-turret-method-33 () none) ;; 33
    (fac-robotank-turret-method-34 () none) ;; 34
    )
  (:state-methods
    die ;; 30
    fire ;; 29
    ready ;; 28
    )
  )
|#

#|
(deftype fac-robotank-reticle (process-drawable)
  ((shadow-jmod  joint-mod-set-local         :offset-assert 200)
   (sight-jmod   joint-mod-set-local         :offset-assert 204)
   (ring-jmod    UNKNOWN             3       :offset-assert 208)
   (ring-timer   uint64                      :offset-assert 224)
   (sight-scale  vector              :inline :offset-assert 240)
   (collide-dist float                       :offset-assert 256)
   )
  :method-count-assert 22
  :size-assert         #x104
  :flag-assert         #x1600900104
  (:methods
    (fac-robotank-reticle-method-20 () none) ;; 20
    (fac-robotank-reticle-method-21 () none) ;; 21
    )
  )
|#

;; (define-extern fac-robotank-reticle-post function)
;; (define-extern fac-robotank-reticle-handler function)
;; (define-extern draw-2d-hud function) ;; (function vector symbol)
;; (define-extern turret-post function) ;; (function none :behavior fort-robotank-turret)
;; (define-extern robotank-turret-handler function) ;; (function process int symbol event-message-block object :behavior fort-robotank-turret)
;; (define-extern fac-robotank-turret-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-robotank                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-robotank-segment-event (structure)
  ((source     uint64  :offset-assert 0)
   (event-type basic   :offset-assert 8)
   (actor      basic   :offset-assert 12)
   (pos-norm   float   :offset-assert 16)
   (param      basic   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  ;; field param uses ~A with a signed load.
  )
|#

#|
(deftype fac-robotank-segment (structure)
  ((flags              uint16  :offset-assert 0)
   (max-speed          float   :offset-assert 4)
   (next-segment       int32   :offset-assert 8)
   (next-segment-start float   :offset-assert 12)
   (event-count        int32   :offset-assert 16)
   (event-tbl          uint32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

#|
(deftype fac-robotank-path-info (structure)
  ((dir           vector :inline :offset-assert 0)
   (u             float          :offset-assert 16)
   (du            float          :offset-assert 20)
   (du-final      float          :offset-assert 24)
   (prev-u        float          :offset-assert 28)
   (max-speed     float          :offset-assert 32)
   (dist          float          :offset-assert 36)
   (dir-y-angle   float          :offset-assert 40)
   (start-y-angle float          :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype fac-robotank-path-info-array (inline-array-class)
  ((data UNKNOWN :dynamic :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype fac-robotank-wheel-info (structure)
  ((jmod   basic  :offset-assert 0)
   (radius float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype fac-robotank-tread-info (structure)
  ((wheel         UNKNOWN      7       :offset-assert 0)
   (texture       texture-anim         :offset-assert 112)
   (locator-joint int32                :offset-assert 116)
   (pos           vector       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
|#

#|
(deftype fac-robotank (process-focusable)
  ((barrel-part          basic                         :offset-assert 208)
   (vibe-jmod            joint-mod-blend-local :inline :offset-assert 224)
   (tread                UNKNOWN               2       :offset-assert 352)
   (path-info            basic                         :offset-assert 640)
   (flags                uint16                        :offset-assert 644)
   (mgr                  uint64                        :offset-assert 648)
   (pov-cam-offset       UNKNOWN               2       :offset-assert 656)
   (explode-sg           basic                         :offset-assert 688)
   (turret               uint64                        :offset-assert 696)
   (no-collision-timer   uint64                        :offset-assert 704)
   (buzz-timer           uint64                        :offset-assert 712)
   (engine-vibe-rate     float                         :offset-assert 720)
   (engine-vibe-amp      float                         :offset-assert 724)
   (attack-id            uint32                        :offset-assert 728)
   (path-index           int32                         :offset-assert 732)
   (path-count           int32                         :offset-assert 736)
   (continue-index       int32                         :offset-assert 740)
   (hit-points           float                         :offset-assert 744)
   (engine-sound         uint32                        :offset-assert 748)
   (engine-sound-playing basic                         :offset-assert 752)
   (snd-cmd-time         uint64                        :offset-assert 760)
   )
  :method-count-assert 35
  :size-assert         #x300
  :flag-assert         #x2302800300
  (:methods
    (fac-robotank-method-32 () none) ;; 32
    (fac-robotank-method-33 () none) ;; 33
    (fac-robotank-method-34 () none) ;; 34
    )
  (:state-methods
    die ;; 31
    pause ;; 30
    moving ;; 29
    turning ;; 28
    )
  )
|#

;; (define-extern *fac-robotank-exploder-params* joint-exploder-static-params)
;; (define-extern fac-robotank-post function)
;; (define-extern fac-robotank-handler function)
;; (define-extern fac-robotank-birth-path function)
;; (define-extern fac-robotank-init-by-other function)
;; (define-extern fac-robotank-spawn function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; fac-tower                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fac-gun-tower-base (process-focusable)
  ()
  :method-count-assert 30
  :size-assert         #xd0
  :flag-assert         #x1e005000d0
  (:state-methods
    idle ;; 28
    explode ;; 29
    )
  )
|#

#|
(deftype gun-tower-base (fac-gun-tower-base)
  ()
  :method-count-assert 30
  :size-assert         #xd0
  :flag-assert         #x1e005000d0
  )
|#

;; (define-extern *fac-tower-impact-pos* object)
;; (define-extern *fac-gun-tower-break-anim-idx* object)
;; (define-extern fac-gun-tower-base-broken-init-by-other function)
;; (define-extern fac-gun-tower-break-init-by-other function)
;; (define-extern start-destroyed-fac-gun-tower-base function)
;; (define-extern start-destroyed-fac-gun-tower function)
;; (define-extern fac-gun-tower-standard-event-handler function)
;; (define-extern fac-deg-delta function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-manager                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-factory-sky-battle (task-manager)
  ((factory-sky-battle-entity basic   :offset-assert 236)
   (check-timer               uint64  :offset-assert 244)
   (ended-timer               uint64  :offset-assert 252)
   (mission-complete-time     uint64  :offset-assert 260)
   (actor-group               uint32  :offset-assert 268)
   (actor-group-count         int32   :offset-assert 272)
   (cur-group                 int8    :offset-assert 276)
   (hud-delay                 uint64  :offset-assert 284)
   (sound-id                  uint32  :offset-assert 292)
   (hud-damage                uint64  :offset-assert 300)
   (hint-given                basic   :offset-assert 308)
   )
  :method-count-assert 33
  :size-assert         #x13c
  :flag-assert         #x2100c0013c
  (:methods
    (task-manager-factory-sky-battle-method-32 () none) ;; 32
    )
  (:state-methods
    resolution ;; 17
    )
  )
|#

#|
(deftype light-trail-tracker-vehicle (light-trail-tracker)
  ()
  :method-count-assert 21
  :size-assert         #xac
  :flag-assert         #x15003000ac
  )
|#

#|
(deftype factory-fighter-path (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14005000c8
  )
|#

#|
(deftype factory-tanks-path (process-drawable)
  ()
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14005000c8
  )
|#

;; (define-extern *fac-task-manager* object)
;; (define-extern *fac-fighter-fired* object)
;; (define-extern *fac-wave* object)
;; (define-extern *fac-shotsleft* object)
;; (define-extern *factory-fighter-trail* object)
;; (define-extern fac-count-curves function)
;; (define-extern *fac-tmp-str* object)
;; (define-extern factory-manager-init-by-other function)
;; (define-extern factory-manager-start function)
;; (define-extern *fac-fighter-rigid-body-constants* object)
;; (define-extern *fac-fighter-exploder-params* joint-exploder-static-params)
;; (define-extern fighter-best-birth-path function)
;; (define-extern fighter-birth-path function)
;; (define-extern factory-fighter-standard-event-handler function)
;; (define-extern factory-fighter-init-by-other function)
;; (define-extern factory-fighter-spawn function)
;; (define-extern *fac-target-exploder-params* joint-exploder-static-params)
;; (define-extern hack-wave function)
;; (define-extern fac-target-standard-event-handler function)
;; (define-extern factory-shotsleft function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factory-hud                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; factorya-init                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern factorya-login function)
;; (define-extern factorya-activate function)
;; (define-extern factorya-deactivate function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mined-mood                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype mined-states (structure)
  ((filter UNKNOWN 2 :offset-assert 0)
   (light  UNKNOWN 2 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )
|#

;; (define-extern set-mined-filter-light! function)
;; (define-extern init-mood-mined function)
;; (define-extern update-mood-mined function)
;; (define-extern set-mined-filter! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mined-texture                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *mined-tfrag-texture-anim-array* texture-anim-array)
;; (define-extern set-mined-pillar-texture! function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prebot-part                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern birth-func-pillar-rocks-bounce function)
;; (define-extern spt-func-pillar-rocks-bounce1 function)
;; (define-extern spt-func-pillar-rocks-bounce2 function)
;; (define-extern spt-func-pillar-rocks-bounce3 function)
;; (define-extern spt-birth-func-brightness-prebot-eco-pillar-rocks function)
;; (define-extern spt-birth-func-brightness-prebot-eco-pillar-rocks2 function)
;; (define-extern spt-birth-func-brightness-prebot-eco-pillar-rocks3 function)
;; (define-extern spt-birth-func-part-prebot-eco-pillar-rocks function)
;; (define-extern spt-func-part-prebot-eco-pillar-rocks function)
;; (define-extern spt-birth-func-part-prebot-eco-pillar-rocks-bounce1 function)
;; (define-extern spt-func-part-prebot-eco-pillar-rocks-bounce1 function)
;; (define-extern spt-birth-func-part-prebot-eco-pillar-rocks-bounce2 function)
;; (define-extern *range-mine-boss-stuck-flame-color* curve-color-fast)
;; (define-extern *range-mine-boss-stuck-flame-alpha* curve2d-fast)
;; (define-extern *range-mine-boss-stuck-flame-scale-x* curve2d-fast)
;; (define-extern *range-mine-boss-stuck-flame-scale-y* curve2d-fast)
;; (define-extern *r-curve-mine-boss-stuck-flame* curve2d-fast)
;; (define-extern *g-curve-mine-boss-stuck-flame* curve2d-fast)
;; (define-extern *b-curve-mine-boss-stuck-flame* curve2d-fast)
;; (define-extern *curve-mine-boss-stuck-flame-alpha* curve2d-fast)
;; (define-extern *curve-mine-boss-stuck-flame-scale-x* curve2d-fast)
;; (define-extern *curve-mine-boss-stuck-flame-scale-y* curve2d-fast)
;; (define-extern *part-prebot-stuck-flame-curve-settings* object)
;; (define-extern *range-mine-boss-explo-color* curve-color-fast)
;; (define-extern *range-mine-boss-explo-alpha* curve2d-fast)
;; (define-extern *range-mine-boss-explo-scale-x* curve2d-fast)
;; (define-extern *range-mine-boss-explo-scale-y* curve2d-fast)
;; (define-extern *curve-mine-boss-explo-alpha* curve2d-fast)
;; (define-extern *curve-mine-boss-explo-scale-x* curve2d-fast)
;; (define-extern *curve-mine-boss-explo-scale-y* curve2d-fast)
;; (define-extern *part-prebot-chasm-explosion-texture-curve-settings* object)
;; (define-extern *range-final-mine-boss-explo-color* curve-color-fast)
;; (define-extern *range-final-mine-boss-explo-alpha* curve2d-fast)
;; (define-extern *range-final-mine-boss-explo-scale-x* curve2d-fast)
;; (define-extern *range-final-mine-boss-explo-scale-y* curve2d-fast)
;; (define-extern *curve-final-mine-boss-explo-alpha* curve2d-fast)
;; (define-extern *curve-final-mine-boss-explo-scale-x* curve2d-fast)
;; (define-extern *curve-final-mine-boss-explo-scale-y* curve2d-fast)
;; (define-extern *part-final-prebot-chasm-explosion-texture-curve-settings* object)
;; (define-extern spt-birth-func-brightness-prebot-pillar-shatter-rocks function)
;; (define-extern spt-birth-func-part-prebot-eco-pillar-shatter function)
;; (define-extern spt-func-part-prebot-eco-pillar-shatter function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prebot-setup                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype prebot-eco-pillar-launch-spec (structure)
  ((offset vector  :offset-assert 0)
   (height float   :offset-assert 4)
   (style  int8    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x9
  :flag-assert         #x900000009
  )
|#

#|
(deftype prebot-eco-pillar (process-drawable)
  ((vulnerable basic  :offset-assert 200)
   (hot        basic  :offset-assert 204)
   (start-y    float  :offset-assert 208)
   (end-y      float  :offset-assert 212)
   (heat-part  basic  :offset-assert 216)
   (cool-part  basic  :offset-assert 220)
   )
  :method-count-assert 26
  :size-assert         #xe0
  :flag-assert         #x1a006000e0
  (:methods
    (prebot-eco-pillar-method-20 () none) ;; 20
    (prebot-eco-pillar-method-21 () none) ;; 21
    (prebot-eco-pillar-method-22 () none) ;; 22
    (prebot-eco-pillar-method-23 () none) ;; 23
    (prebot-eco-pillar-method-24 () none) ;; 24
    (prebot-eco-pillar-method-25 () none) ;; 25
    )
  )
|#

#|
(deftype cav-railblocker (process-focusable)
  ((incoming-attack-id  uint32  :offset-assert 208)
   (hit-points          float   :offset-assert 212)
   (notify-on-die       basic   :offset-assert 216)
   (notify-on-die-2     basic   :offset-assert 220)
   (trackable           basic   :offset-assert 224)
   (red-tip-change-time uint64  :offset-assert 232)
   (alt-red-tip-on      basic   :offset-assert 240)
   )
  :method-count-assert 31
  :size-assert         #xf4
  :flag-assert         #x1f008000f4
  (:methods
    (cav-railblocker-method-28 () none) ;; 28
    (cav-railblocker-method-29 () none) ;; 29
    (cav-railblocker-method-30 () none) ;; 30
    )
  )
|#

#|
(deftype cav-minecar (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (cav-minecar-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype prebot-sword (process-drawable)
  ((prefix              basic                    :offset-assert 200)
   (blade-scale         cam-float-seeker :inline :offset-assert 204)
   (blade-jm            basic                    :offset-assert 228)
   (sword-sound         uint32                   :offset-assert 232)
   (sword-sound-playing basic                    :offset-assert 236)
   (prev-position       vector           :inline :offset-assert 240)
   (use-pos-pitch       basic                    :offset-assert 256)
   (old-target-dist     float                    :offset-assert 260)
   (alternate-sound     basic                    :offset-assert 264)
   (whoosh-lead         float                    :offset-assert 268)
   (allow-whoosh        basic                    :offset-assert 272)
   (current-volume      float                    :offset-assert 276)
   )
  :method-count-assert 21
  :size-assert         #x118
  :flag-assert         #x1500a00118
  (:methods
    (prebot-sword-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype prebot-shockwave (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:methods
    (prebot-shockwave-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype prebot-gun (process-drawable)
  ((prefix basic  :offset-assert 200)
   )
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (prebot-gun-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype prebot-tentacle (process-drawable)
  ((prefix              basic   :offset-assert 200)
   (aim-jm              basic   :offset-assert 204)
   (half-aim-jm         basic   :offset-assert 208)
   (laser-sound         uint32  :offset-assert 212)
   (laser-sound-playing basic   :offset-assert 216)
   )
  :method-count-assert 21
  :size-assert         #xdc
  :flag-assert         #x15006000dc
  (:methods
    (prebot-tentacle-method-20 () none) ;; 20
    )
  )
|#

#|
(deftype prebot-ammo-tracker (structure)
  ((handle          uint64         :offset-assert 0)
   (where           vector :inline :offset-assert 16)
   (birth-next-time basic          :offset-assert 32)
   (timer           uint64         :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype prebot (process-focusable)
  ((critters            UNKNOWN             28      :offset-assert 208)
   (critters-to-launch  int8                        :offset-assert 432)
   (gun                 uint64                      :offset-assert 440)
   (swords              UNKNOWN             2       :offset-assert 448)
   (tentacles           UNKNOWN             5       :offset-assert 464)
   (beam-projectile     uint64                      :offset-assert 504)
   (pillars             UNKNOWN             5       :offset-assert 512)
   (original-position   vector              :inline :offset-assert 560)
   (position            cam-vector-seeker   :inline :offset-assert 576)
   (stage               int8                        :offset-assert 636)
   (stage-hit-points    float                       :offset-assert 640)
   (last-attack-id      uint32                      :offset-assert 644)
   (neck-angle          cam-float-seeker    :inline :offset-assert 648)
   (no-collision-timer  uint64                      :offset-assert 672)
   (num-attacks         uint8                       :offset-assert 680)
   (shoulder-aim-jm     basic                       :offset-assert 684)
   (shot-extra-y        float                       :offset-assert 688)
   (shot-extra-xz       float                       :offset-assert 692)
   (which-movie         int8                        :offset-assert 696)
   (light-flash         cam-vector-seeker   :inline :offset-assert 704)
   (light-pulse         oscillating-vector  :inline :offset-assert 768)
   (light-pulse-flicker delayed-rand-vector :inline :offset-assert 832)
   (laugh-played        basic                       :offset-assert 880)
   (grunt-played        basic                       :offset-assert 884)
   (trythis-played      basic                       :offset-assert 888)
   (laugh-timer         uint64                      :offset-assert 896)
   (blocker             uint64                      :offset-assert 904)
   (flags               uint32                      :offset-assert 912)
   (pillar-hint-timer   uint64                      :offset-assert 920)
   (minecar-hint-timer  uint64                      :offset-assert 928)
   (ammo                UNKNOWN             20      :offset-assert 944)
   )
  :method-count-assert 47
  :size-assert         #x770
  :flag-assert         #x2f06f00770
  (:methods
    (prebot-method-28 () none) ;; 28
    (prebot-method-29 () none) ;; 29
    (prebot-method-30 () none) ;; 30
    (prebot-method-31 () none) ;; 31
    (prebot-method-32 () none) ;; 32
    (prebot-method-33 () none) ;; 33
    (prebot-method-34 () none) ;; 34
    (prebot-method-35 () none) ;; 35
    (prebot-method-36 () none) ;; 36
    (prebot-method-37 () none) ;; 37
    (prebot-method-38 () none) ;; 38
    (prebot-method-39 () none) ;; 39
    (prebot-method-40 () none) ;; 40
    (prebot-method-41 () none) ;; 41
    (prebot-method-42 () none) ;; 42
    (prebot-method-43 () none) ;; 43
    (prebot-method-44 () none) ;; 44
    (prebot-method-45 () none) ;; 45
    (prebot-method-46 () none) ;; 46
    )
  )
|#

;; (define-extern *cav-railblocker-exploder-params* joint-exploder-static-params)
;; (define-extern prebot-eco-pillar-init-by-other function)
;; (define-extern *prebot-sword-color-curve* object)
;; (define-extern *prebot-sword-white-red-curve* object)
;; (define-extern *prebot-sword-width-curve* curve2d-fast)
;; (define-extern *prebot-sword-color-array* object)
;; (define-extern prebot-sword-init-by-other function)
;; (define-extern prebot-shockwave-init-by-other function)
;; (define-extern prebot-gun-init-by-other function)
;; (define-extern prebot-tentacle-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prebot-states                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-prebot (task-manager)
  ((manager-entity basic   :offset-assert 240)
   (check-timer    uint64  :offset-assert 248)
   )
  :method-count-assert 32
  :size-assert         #x100
  :flag-assert         #x2000800100
  (:state-methods
    active ;; 15
    )
  )
|#

;; (define-extern prebot-neck-callback function)
;; (define-extern prebot-light-pulse-off function)
;; (define-extern prebot-light-pulse-on function)
;; (define-extern prebot-light-flash function)
;; (define-extern prebot-prespool function)
;; (define-extern prebot-common function)
;; (define-extern prebot-go-next-stage function)
;; (define-extern prebot-handler function)
;; (define-extern prebot-set-cam-slave-fov function)
;; (define-extern prebot-setup-shot-offsets function)
;; (define-extern prebot-fire-tentacle function)
;; (define-extern prebot-launch-critter function)
;; (define-extern prebot-spawn-shockwave function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; prebot-extras                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cav-break-bridge (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype prebot-shockwave-joint-position (structure)
  ((joint-index int8           :offset-assert 0)
   (position    vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype prebot-gun-shot (projectile)
  ((whoosh-sound uint32  :offset-assert 512)
   )
  :method-count-assert 41
  :size-assert         #x204
  :flag-assert         #x2901900204
  (:state-methods
    impact ;; 22
    moving ;; 23
    )
  )
|#

#|
(deftype cav-exit-door (process-drawable)
  ((initial-y float  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    idle ;; 20
    rise ;; 21
    )
  )
|#

;; (define-extern *prebot-eco-pillar-debris-params* debris-static-params)
;; (define-extern prebot-eco-pillar-handler function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mined-scenes                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype cav-airlock-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#

;; (define-extern prebot-darken function)
;; (define-extern scene-prebot-gun-spawn function)
;; (define-extern spt-birth-func-brightness-mine-boss-fma-dust-trailer function)
;; (define-extern spt-birth-func-brightness-mine-boss-fma-dust function)
;; (define-extern spt-birth-func-part-mine-boss-fma-dust function)
;; (define-extern spt-birth-func-part-mine-boss-fma-rocks function)
;; (define-extern spt-birth-func-part-mine-boss-fma-dust2 function)
;; (define-extern spt-birth-func-part-mine-boss-fma-rocks2 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcanox-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *volcanox-warp-texture-anim-array* texture-anim-array)
;; (define-extern volcanox-warp-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcanox-mood                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype volcanox-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *volcanox-mood-color-table* object)
;; (define-extern *volcanox-mood-fog-table* object)
;; (define-extern update-mood-volcanox function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcanox-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vol-holo-eye (process-drawable)
  ((eyeball-jmod       joint-mod-set-world-no-trans :inline :offset-assert 204)
   (other-eyeball-jmod joint-mod-set-world          :inline :offset-assert 268)
   (next-blink-time    uint64                               :offset-assert 332)
   (trigger-radius     float                                :offset-assert 340)
   (idle-clock         uint64                               :offset-assert 348)
   (actor-group        uint32                               :offset-assert 356)
   (actor-group-count  int32                                :offset-assert 360)
   (triggered?         basic                                :offset-assert 364)
   (untriggered?       basic                                :offset-assert 368)
   (kill-quat          quaternion                   :inline :offset-assert 380)
   (kill-angle         float                                :offset-assert 396)
   (kill-speed         float                                :offset-assert 400)
   (init-trans         vector                       :inline :offset-assert 412)
   (perm-part          uint64                               :offset-assert 428)
   )
  :method-count-assert 26
  :size-assert         #x1b8
  :flag-assert         #x1a014001b8
  (:methods
    (vol-holo-eye-method-25 () none) ;; 25
    )
  (:state-methods
    die-fast ;; 24
    die ;; 23
    close ;; 22
    alert ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype tpl-glider-broken (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype dm-spines (process-drawable)
  ((alt-actor basic  :offset-assert 200)
   )
  :method-count-assert 23
  :size-assert         #xcc
  :flag-assert         #x17005000cc
  (:state-methods
    opening ;; 22
    closed ;; 21
    open ;; 20
    )
  )
|#

;; (define-extern sparticle-vol-holo-halo0 function)
;; (define-extern sparticle-vol-holo-halo1 function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcanox-scenes                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype monk-mummy (process-taskable)
  ()
  :method-count-assert 40
  :size-assert         #x118
  :flag-assert         #x2800a00118
  )
|#

;; (define-extern spt-birth-func-brightness-volcano-glider-dust function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flitter                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flitter (nav-enemy)
  ((move-angle       float                      :offset-assert 620)
   (heading          basic                      :offset-assert 624)
   (change-dir-time  uint64                     :offset-assert 632) ;; time-frame
   (last-change-dir  uint64                     :offset-assert 640)
   (off-screen-timer uint64                     :offset-assert 648)
   (amb-sound-timer  uint64                     :offset-assert 656)
   (attack-time      uint64                     :offset-assert 664) ;; time-frame
   (target-pos       vector             :inline :offset-assert 672)
   (attack-pos       vector             :inline :offset-assert 688)
   (base-height      float                      :offset-assert 704)
   (minimap          connection-minimap         :offset-assert 708)
   )
  :method-count-assert 196
  :size-assert         #x2c8
  :flag-assert         #xc4025002c8
  (:methods
    (flitter-method-192 () none) ;; 192
    (flitter-method-193 () none) ;; 193
    (flitter-method-194 () none) ;; 194
    (flitter-method-195 () none) ;; 195
    )
  (:state-methods
    victory ;; 39
    hostile ;; 38
    die ;; 40
    circling ;; 157
    stare ;; 37
    ambush-jumping ;; 191
    attack ;; 190
    active ;; 34
    ambush ;; 47
    )
  )
|#

;; (define-extern check-drop-level-flitter-dirt-rubble function) ;; (function sparticle-system sparticle-cpuinfo vector none)
;; (define-extern *flitter-nav-enemy-info* nav-enemy-info) ;; nav-enemy-info
;; (define-extern flitter-fall-and-play-death-anim function) ;; (function art-joint-anim float time-frame none :behavior flitter)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templex-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *range-color-templex-big-torch-flame* curve-color-fast)
;; (define-extern *range-alpha-templex-big-torch-flame* curve2d-fast)
;; (define-extern *range-scale-templex-big-torch-flame-x* curve2d-fast)
;; (define-extern *range-scale-templex-big-torch-flame-y* curve2d-fast)
;; (define-extern *r-curve-templex-big-torch-flame* curve2d-fast)
;; (define-extern *g-curve-templex-big-torch-flame* curve2d-fast)
;; (define-extern *b-curve-templex-big-torch-flame* curve2d-fast)
;; (define-extern *curve-alpha-templex-big-torch-flame* curve2d-fast)
;; (define-extern *curve-templex-big-torch-flame-x* curve2d-fast)
;; (define-extern *curve-templex-big-torch-flame-y* curve2d-fast)
;; (define-extern *part-templex-big-torch-flame-curve-settings* object)
;; (define-extern *range-color-templex-fire-vase-flame* curve-color-fast)
;; (define-extern *range-alpha-templex-fire-vase-flame* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-flame-x* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-flame-y* curve2d-fast)
;; (define-extern *r-curve-templex-fire-vase-flame* curve2d-fast)
;; (define-extern *g-curve-templex-fire-vase-flame* curve2d-fast)
;; (define-extern *b-curve-templex-fire-vase-flame* curve2d-fast)
;; (define-extern *curve-alpha-templex-fire-vase-flame* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-flame-x* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-flame-y* curve2d-fast)
;; (define-extern *part-templex-fire-vase-flame-curve-settings* object)
;; (define-extern *range-color-templex-fire-vase-large-flame* curve-color-fast)
;; (define-extern *range-alpha-templex-fire-vase-large-flame* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-large-flame-x* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-large-flame-y* curve2d-fast)
;; (define-extern *r-curve-templex-fire-vase-large-flame* curve2d-fast)
;; (define-extern *g-curve-templex-fire-vase-large-flame* curve2d-fast)
;; (define-extern *b-curve-templex-fire-vase-large-flame* curve2d-fast)
;; (define-extern *curve-alpha-templex-fire-vase-large-flame* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-large-flame-x* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-large-flame-y* curve2d-fast)
;; (define-extern *part-templex-fire-vase-large-flame-curve-settings* object)
;; (define-extern *range-color-templex-fire-vase-small-flame* curve-color-fast)
;; (define-extern *range-alpha-templex-fire-vase-small-flame* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-small-flame-x* curve2d-fast)
;; (define-extern *range-scale-templex-fire-vase-small-flame-y* curve2d-fast)
;; (define-extern *r-curve-templex-fire-vase-small-flame* curve2d-fast)
;; (define-extern *g-curve-templex-fire-vase-small-flame* curve2d-fast)
;; (define-extern *b-curve-templex-fire-vase-small-flame* curve2d-fast)
;; (define-extern *curve-alpha-templex-fire-vase-small-flame* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-small-flame-x* curve2d-fast)
;; (define-extern *curve-templex-fire-vase-small-flame-y* curve2d-fast)
;; (define-extern *part-templex-fire-vase-small-flame-curve-settings* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templex-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype templex-states (structure)
  ((light light-state  :inline :offset-assert 0)
   (flame flames-state :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xf
  :flag-assert         #x90000000f
  )
|#

;; (define-extern update-templex-lights function)
;; (define-extern update-mood-templex function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templex-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *templex-water-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templex-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpl-inner-airlock-door (com-airlock)
  ()
  :method-count-assert 30
  :size-assert         #x1b0
  :flag-assert         #x1e013001b0
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; templex-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype tpl-stone-break (process-drawable)
  ((spool-sound-id uint32  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    drop ;; 21
    idle ;; 20
    )
  )
|#

;; (define-extern spt-birth-func-brightness-part-temple-break-dust function)
;; (define-extern spt-birth-func-brightness-part-temple-break-dust-trail function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-part                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern spt-func-part-volcano-embers function)
;; (define-extern spt-func-birth-on-pop function)
;; (define-extern *lava-particle-list* array)
;; (define-extern birth-func-texture-group-lava function)
;; (define-extern spt-func-part-lava-ball-spout-puff function)
;; (define-extern spt-birth-func-brightness-part-volcano-leaf-fall function)
;; (define-extern spt-birth-func-part-volcano-leaf-fall function)
;; (define-extern spt-volcano-check-ground-lie-flat function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-scenes                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *vol-invis-joint-list* array)
;; (define-extern spt-birth-func-brightness-part-volcano-rock-break-dust function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; rigid-body-plat                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype rigid-body-platform-constants (rigid-body-object-constants)
  ((drag-factor           float   :offset-assert 208)
   (buoyancy-factor       float   :offset-assert 212)
   (max-buoyancy-depth    meters  :offset-assert 216)
   (player-weight         meters  :offset-assert 220)
   (player-bonk-factor    float   :offset-assert 224)
   (player-dive-factor    float   :offset-assert 228)
   (player-force-distance meters  :offset-assert 232)
   (player-force-clamp    meters  :offset-assert 236)
   (player-force-timeout  uint64  :offset-assert 240)
   (explosion-force       meters  :offset-assert 248)
   (control-point-count   int32   :offset-assert 252)
   (platform              symbol  :offset-assert 256) ;; guessed by decompiler
   (sound-name            string  :offset-assert 260) ;; guessed by decompiler
   )
  :method-count-assert 9
  :size-assert         #x108
  :flag-assert         #x900000108
  )
|#

#|
(deftype rigid-body-control-point (structure)
  ((local-pos vector :inline :offset-assert 0)
   (world-pos vector :inline :offset-assert 16)
   (velocity  vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype rigid-body-control-point-inline-array (inline-array-class)
  ((data rigid-body-control-point :dynamic :offset-assert 16) ;; guessed by decompiler
   )
  :method-count-assert 14
  :size-assert         #x10
  :flag-assert         #xe00000010
  )
|#

#|
(deftype rigid-body-platform (rigid-body-object)
  ((control-point-array rigid-body-control-point-inline-array  :offset-assert 288) ;; guessed by decompiler
   (float-height-offset float                                  :offset-assert 292)
   (player-bonk-timeout uint64                                 :offset-assert 296)
   (water-anim          water-anim                             :offset-assert 304) ;; guessed by decompiler
   )
  :method-count-assert 60
  :size-assert         #x134
  :flag-assert         #x3c00c00134
  (:methods
    (rigid-body-platform-method-56 () none) ;; 56 ;; (rigid-body-platform-method-56 (_type_ vector) none)
    (rigid-body-platform-method-57 () none) ;; 57
    (rigid-body-platform-method-58 () none) ;; 58
    (rigid-body-platform-method-59 () none) ;; 59
    )
  )
|#

;; (define-extern *rigid-body-platform-constants* object) ;; rigid-body-platform-constants

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-obs                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vol-rising-step (process-drawable)
  ((sync      sync-paused :inline :offset-assert 200)
   (idle-anim int32               :offset-assert 224)
   (amplitude float               :offset-assert 228)
   (init-y    float               :offset-assert 232)
   (sound-id  uint32              :offset-assert 236)
   )
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  (:methods
    (vol-rising-step-method-23 () none) ;; 23
    (vol-rising-step-method-24 () none) ;; 24
    )
  (:state-methods
    active ;; 22
    pre-active ;; 21
    inactive ;; 20
    )
  )
|#

#|
(deftype vol-rising-step-a (vol-rising-step)
  ()
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  )
|#

#|
(deftype vol-rising-step-b (vol-rising-step)
  ()
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  )
|#

#|
(deftype vol-rising-step-c (vol-rising-step)
  ()
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  )
|#

#|
(deftype vol-rising-step-d (vol-rising-step)
  ()
  :method-count-assert 25
  :size-assert         #xf0
  :flag-assert         #x19007000f0
  )
|#

#|
(deftype lava-shoot (process-drawable)
  ((sync               sync-paused :inline :offset-assert 200)
   (attack-id          uint32              :offset-assert 224)
   (sound-id           uint32              :offset-assert 228)
   (no-collision-timer uint64              :offset-assert 232)
   )
  :method-count-assert 21
  :size-assert         #xf0
  :flag-assert         #x15007000f0
  (:state-methods
    idle ;; 20
    )
  )
|#

#|
(deftype vol-balance-plat-chain-physics (chain-physics)
  ()
  :method-count-assert 18
  :size-assert         #x570
  :flag-assert         #x1200000570
  )
|#

#|
(deftype vol-balance-plat (rigid-body-object)
  ((pivot-transform  transformq :inline :offset-assert 288)
   (init-pos         vector     :inline :offset-assert 336)
   (force-pos        vector     :inline :offset-assert 352)
   (rope             basic              :offset-assert 368)
   (rope-initialized basic              :offset-assert 372)
   )
  :method-count-assert 56
  :size-assert         #x178
  :flag-assert         #x3801000178
  )
|#

#|
(deftype vol-steam-explosion (process-drawable)
  ((sync               sync-paused :inline :offset-assert 200)
   (notify-actor       basic               :offset-assert 224)
   (attack-id          uint32              :offset-assert 228)
   (lid-y              float               :offset-assert 232)
   (extra-id           int32               :offset-assert 236)
   (y-speed            float               :offset-assert 240)
   (sound-id           uint32              :offset-assert 244)
   (stopped-up-by      uint64              :offset-assert 248)
   (no-collision-timer uint64              :offset-assert 256)
   (trigger-count      int32               :offset-assert 264)
   )
  :method-count-assert 24
  :size-assert         #x10c
  :flag-assert         #x180090010c
  (:methods
    (vol-steam-explosion-method-23 () none) ;; 23
    )
  (:state-methods
    active ;; 22
    stopped-up ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype spinning-hole (vol-steam-explosion)
  ()
  :method-count-assert 24
  :size-assert         #x10c
  :flag-assert         #x180090010c
  )
|#

#|
(deftype vol-bouncer (bouncer)
  ()
  :method-count-assert 27
  :size-assert         #xd8
  :flag-assert         #x1b006000d8
  (:state-methods
    fire ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype vol-lava-ball (process-drawable)
  ((y-initial          float   :offset-assert 200)
   (y-velocity         float   :offset-assert 204)
   (y-acc              float   :offset-assert 208)
   (attack-id          uint32  :offset-assert 212)
   (no-collision-timer uint64  :offset-assert 216)
   )
  :method-count-assert 22
  :size-assert         #xe0
  :flag-assert         #x16006000e0
  (:state-methods
    done ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype vol-lava-ball-spout (process-drawable)
  ((sync         sync-paused :inline :offset-assert 200)
   (ball         uint64              :offset-assert 224)
   (ball-height  float               :offset-assert 232)
   (sound-id     uint32              :offset-assert 236)
   (explode-time uint64              :offset-assert 240)
   )
  :method-count-assert 23
  :size-assert         #xf8
  :flag-assert         #x17008000f8
  (:state-methods
    active ;; 22
    going-active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype vol-collapsing-rock (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:state-methods
    falling ;; 22
    idle ;; 21
    inactive ;; 20
    )
  )
|#

;; (define-extern *vol-balance-plat-chain-setup* array)
;; (define-extern *vol-balance-plat-rigid-body-constants* object)
;; (define-extern vol-lava-ball-post function)
;; (define-extern vol-lava-ball-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-obs2                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype vol-lava-plat (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 320)
   (path-u       float          :offset-assert 336)
   )
  :method-count-assert 60
  :size-assert         #x154
  :flag-assert         #x3c00e00154
  (:state-methods
    active ;; 29
    )
  )
|#

#|
(deftype vol-lava-plat-spawner (process)
  ((path basic  :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x84
  :flag-assert         #xf00100084
  (:state-methods
    idle ;; 14
    )
  )
|#

#|
(deftype vol-break-ground (process-drawable)
  ((ridden     basic   :offset-assert 200)
   (ride-timer uint64  :offset-assert 208)
   )
  :method-count-assert 24
  :size-assert         #xd8
  :flag-assert         #x18006000d8
  (:methods
    (vol-break-ground-method-23 () none) ;; 23
    )
  (:state-methods
    collapse ;; 22
    active ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype vol-stone-lid (rigid-body-object)
  ((to-hole-vec    vector :inline :offset-assert 288)
   (hole           basic          :offset-assert 304)
   (hole-dist-xz   float          :offset-assert 308)
   (hole-dist-y    float          :offset-assert 312)
   (hole-sync-norm float          :offset-assert 316)
   (lava-timer     uint64         :offset-assert 320)
   (stop-timer     uint64         :offset-assert 328)
   )
  :method-count-assert 58
  :size-assert         #x150
  :flag-assert         #x3a00d00150
  (:state-methods
    die-and-respawn ;; 57
    stopped ;; 56
    active ;; 29
    idle ;; 28
    )
  )
|#

;; (define-extern *vol-lava-plat-platform-constants* object)
;; (define-extern vol-lava-plat-init-by-other function)
;; (define-extern *vol-stone-lid-rigid-body-constants* object)
;; (define-extern vol-stone-lid-init-by-other function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-mood                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype volcano-states (UNKNOWN)
  ()
  :method-count-assert 0
  :size-assert         #x0
  :flag-assert         #x0
  )
|#

;; (define-extern *volcano-mood-color-table* object)
;; (define-extern *volcano-mood-fog-table* object)
;; (define-extern update-mood-volcano function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volcano-texture                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *volcanoa-alpha-texture-anim-array* texture-anim-array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; spiky-frog                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype spiky-frog (nav-enemy)
  ((eye-jmod       UNKNOWN    2       :offset-assert 620)
   (roll-transform transformq :inline :offset-assert 640)
   (time-out       uint64             :offset-assert 688)
   (sound-id       uint32             :offset-assert 696)
   )
  :method-count-assert 199
  :size-assert         #x2bc
  :flag-assert         #xc7024002bc
  (:methods
    (spiky-frog-method-196 () none) ;; 196
    (spiky-frog-method-197 () none) ;; 197
    (spiky-frog-method-198 () none) ;; 198
    )
  (:state-methods
    knocked-recover ;; 32
    notice ;; 35
    rolling ;; 191
    active ;; 34
    rolling-start ;; 190
    pacing ;; 156
    turn ;; 195
    circling ;; 157
    stare ;; 37
    attack ;; 193
    hostile ;; 38
    attack-recover ;; 194
    rolling-stop ;; 192
    knocked ;; 31
    )
  )
|#

;; (define-extern *fact-info-spiky-frog-defaults* fact-info-enemy-defaults)
;; (define-extern *spiky-frog-nav-enemy-info* nav-enemy-info)
;; (define-extern spiky-frog-hop-slow-code function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flut-wild                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype flut-wild (nav-enemy)
  ((minimap            connection-minimap  :offset-assert 620)
   (focus-ignore-timer uint64              :offset-assert 624)
   (color-index        int32               :offset-assert 632)
   (first-notice?      basic               :offset-assert 636)
   )
  :method-count-assert 192
  :size-assert         #x280
  :flag-assert         #xc002000280
  (:state-methods
    knocked ;; 31
    flee-path ;; 190
    disappear ;; 191
    notice ;; 35
    idle ;; 33
    )
  )
|#

#|
(deftype task-manager-catch-flut (task-manager)
  ((flut-entity basic  :offset-assert 240)
   )
  :method-count-assert 32
  :size-assert         #xf4
  :flag-assert         #x20008000f4
  )
|#

#|
(deftype task-manager-restrict-to-flut (task-manager)
  ()
  :method-count-assert 32
  :size-assert         #xf0
  :flag-assert         #x20007000f0
  )
|#

;; (define-extern *flut-wild-enemy-info* nav-enemy-info)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flamer-lava                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; flying-formation is already defined!

#|
(deftype flamer-lava (nav-enemy)
  ((shot-trajectory   trajectory          :inline :offset-assert 624)
   (last-fire-time    uint64                      :offset-assert 664)
   (sync-off          uint32                      :offset-assert 672)
   (base-pos          vector              :inline :offset-assert 688)
   (idle-pos          vector              :inline :offset-assert 704)
   (offset            vector              :inline :offset-assert 720)
   (dest-pos          vector              :inline :offset-assert 736)
   (zone-to-world     matrix              :inline :offset-assert 752)
   (world-to-zone     matrix              :inline :offset-assert 816)
   (formation-entity  basic                       :offset-assert 880)
   (flit-joint        joint-mod-set-local :inline :offset-assert 896)
   (flit-angle        float                       :offset-assert 960)
   (flit-timer        uint64                      :offset-assert 968)
   (path-pos          float                       :offset-assert 976)
   (sound-volume      float                       :offset-assert 980)
   (scale             float                       :offset-assert 984)
   (hit-surface?      basic                       :offset-assert 988)
   (ground-mode       int8                        :offset-assert 992)
   (init-quat         quaternion          :inline :offset-assert 1008)
   (surface-normal    vector              :inline :offset-assert 1024)
   (main-joint-pos    vector              :inline :offset-assert 1040)
   (main-joint-vel    vector              :inline :offset-assert 1056)
   (main-joint-acc    vector              :inline :offset-assert 1072)
   (main-acceleration float                       :offset-assert 1088)
   (fly-dir           vector              :inline :offset-assert 1104)
   )
  :method-count-assert 205
  :size-assert         #x460
  :flag-assert         #xcd03e00460
  (:methods
    (flamer-lava-method-194 () none) ;; 194
    (flamer-lava-method-195 () none) ;; 195
    (flamer-lava-method-196 () none) ;; 196
    (flamer-lava-method-197 () none) ;; 197
    (flamer-lava-method-198 () none) ;; 198
    (flamer-lava-method-199 () none) ;; 199
    (flamer-lava-method-200 () none) ;; 200
    (flamer-lava-method-201 () none) ;; 201
    (flamer-lava-method-202 () none) ;; 202
    (flamer-lava-method-203 () none) ;; 203
    (flamer-lava-method-204 () none) ;; 204
    )
  (:state-methods
    knocked ;; 31
    hostile ;; 38
    exit-ambush-path ;; 193
    exit-ambush ;; 192
    attack ;; 190
    ambush ;; 47
    active ;; 34
    idle ;; 33
    dormant-aware ;; 29
    die-falling ;; 41
    dormant ;; 28
    notice ;; 35
    wait-for-formation ;; 191
    )
  )
|#

#|
(deftype flaming-lava (flamer-lava)
  ()
  :method-count-assert 205
  :size-assert         #x460
  :flag-assert         #xcd03e00460
  )
|#

;; (define-extern *flamer-lava-exploder-params* joint-exploder-static-params)
;; (define-extern *flamer-lava-fact-defaults* fact-info-enemy-defaults)
;; (define-extern *flamer-lava-nav-enemy-info* nav-enemy-info)
;; (define-extern flamer-lava-attack-post function)
;; (define-extern flamer-lava-flit-post function)
;; (define-extern flamer-lava-fly-code function)
;; (define-extern vector-square! function) ;; (function vector vector vector)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wasstadb-obs                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype arena-state (structure)
  ((time uint64  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )
|#

#|
(deftype hud-timer-training (hud-timer)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype hud-arena-final-stats (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype arena-token (process-drawable)
  ((trans-y  float          :offset-assert 200)
   (offset   float          :offset-assert 204)
   (gspot    vector :inline :offset-assert 208)
   (shadow-h uint64         :offset-assert 224)
   )
  :method-count-assert 25
  :size-assert         #xe8
  :flag-assert         #x19007000e8
  (:methods
    (arena-token-method-23 () none) ;; 23
    (arena-token-method-24 () none) ;; 24
    )
  (:state-methods
    hide ;; 22
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype wstd-training-dummy (process-drawable)
  ()
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (wstd-training-dummy-method-22 () none) ;; 22
    )
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype task-manager-arena-training (task-manager)
  ((judge-h           uint64  :offset-assert 236)
   (arrow-h           uint64  :offset-assert 244)
   (hud-stat          uint64  :offset-assert 252)
   (check-timer       uint64  :offset-assert 260)
   (actor-group       uint32  :offset-assert 268)
   (actor-group-count int32   :offset-assert 272)
   (checkpoint-timer  float   :offset-assert 276)
   (checkpoint-tokens uint64  :offset-assert 284)
   (message-id        uint32  :offset-assert 292)
   )
  :method-count-assert 38
  :size-assert         #x12c
  :flag-assert         #x2600b0012c
  (:methods
    (task-manager-arena-training-method-36 () none) ;; 36
    (task-manager-arena-training-method-37 () none) ;; 37
    )
  (:state-methods
    active ;; 15
    done ;; 35
    idle ;; 34
    wait-more ;; 33
    wait-touch ;; 32
    )
  )
|#

#|
(deftype wstd-trapdoor (process-drawable)
  ((notify-actor basic  :offset-assert 200)
   )
  :method-count-assert 22
  :size-assert         #xcc
  :flag-assert         #x16005000cc
  (:state-methods
    die ;; 21
    idle ;; 20
    )
  )
|#

#|
(deftype wstd-flag (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    idle ;; 20
    )
  )
|#

;; (define-extern *arena-state* object)
;; (define-extern *wstd-training-dummy-exploder-params* joint-exploder-static-params)
;; (define-extern *arena-trainer-checkpoint-valid* object)
;; (define-extern *arena-trainer-checkpoint-time* object)
;; (define-extern *arena-trainer-checkpoint-tokens* object)
;; (define-extern *training-fail* object)
;; (define-extern *wstd-trapdoor-exploder-params* joint-exploder-static-params)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; protect-script                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype gunship-cmd (structure)
  ((command        uint8   :offset-assert 0)
   (spawn-type     uint16  :offset-assert 2)
   (count          int8    :offset-assert 4)
   (wait-type      uint8   :offset-assert 2)
   (difficulty     float   :offset-assert 8)
   (wait-time      uint64  :offset-assert 16)
   (timeout-period uint64  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype gunship-cmd-context (structure)
  ((start-time        uint64              :offset-assert 0)
   (current-command   gunship-cmd :inline :offset-assert 8)
   (script            basic               :offset-assert 40)
   (script-jump-point basic               :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

;; (define-extern parse-protect-command function)
;; (define-extern *gunship-0-script* object)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; protect-path                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *protect-path* array)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; protect-gunship                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype fire-missile-state (structure)
  ((missile-dest-positions  UNKNOWN 16 :offset-assert 0)
   (missile-handles         UNKNOWN 16 :offset-assert 256)
   (beacon-handles          UNKNOWN 16 :offset-assert 384)
   (last-fire-missile-time  uint64     :offset-assert 512)
   (last-probe-missile-time uint64     :offset-assert 520)
   (launcher-rotate-time    uint64     :offset-assert 528)
   (num-missiles            int8       :offset-assert 536)
   (missile-launch-index    int8       :offset-assert 537)
   (missile-probe-index     int8       :offset-assert 538)
   (missile-shoot-index     int8       :offset-assert 539)
   (current-probe-angle     float      :offset-assert 540)
   (probe-angle-shift       float      :offset-assert 544)
   (difficulty-scalar       float      :offset-assert 548)
   )
  :method-count-assert 10
  :size-assert         #x228
  :flag-assert         #xa00000228
  (:methods
    (fire-missile-state-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype gunship-info (structure)
  ((proc        uint64  :offset-assert 0)
   (want-target uint8   :offset-assert 8)
   (cur-state   basic   :offset-assert 12)
   (difficulty  float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype gunship-movement-state (structure)
  ((state-time       uint64         :offset-assert 0)
   (next-update-time uint64         :offset-assert 8)
   (cur-mode         uint8          :offset-assert 16)
   (dest-mode        uint8          :offset-assert 17)
   (dest-pos         vector :inline :offset-assert 32)
   (completed?       basic          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )
|#

#|
(deftype gunship-spawn-info (structure)
  ((counts          UNKNOWN 17 :offset-assert 0)
   (next-spawn-time uint64     :offset-assert 24)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (gunship-spawn-info-method-9 () none) ;; 9
    )
  )
|#

#|
(deftype protect-gunship (process-focusable)
  ((task-man                   uint64                         :offset-assert 208)
   (missile-info               fire-missile-state     :inline :offset-assert 224)
   (stage-index                int8                           :offset-assert 776)
   (num-stages                 int8                           :offset-assert 777)
   (hit-points                 float                          :offset-assert 780)
   (last-attack-id             uint32                         :offset-assert 784)
   (minimap                    connection-minimap             :offset-assert 788)
   (ground-pt                  vector                 :inline :offset-assert 800)
   (basetrans                  vector                 :inline :offset-assert 816)
   (move-state                 gunship-movement-state :inline :offset-assert 832)
   (reaction-time              uint64                         :offset-assert 888)
   (choose-new-point-time      uint64                         :offset-assert 896)
   (chosen-point               vector                 :inline :offset-assert 912)
   (last-repo-pos              vector                 :inline :offset-assert 928)
   (suppress-times             UNKNOWN                8       :offset-assert 944)
   (want                       uint8                          :offset-assert 1008)
   (target                     uint8                          :offset-assert 1009)
   (spawn-info                 gunship-spawn-info     :inline :offset-assert 1016)
   (next-fire-missile-time     uint64                         :offset-assert 1048)
   (next-spin-laser-time       uint64                         :offset-assert 1056)
   (next-spawn-time            uint64                         :offset-assert 1064)
   (last-land-time             uint64                         :offset-assert 1072)
   (last-thrust-vec            vector                 :inline :offset-assert 1088)
   (roll-quat                  quaternion             :inline :offset-assert 1104)
   (difficulty                 float                          :offset-assert 1120)
   (base-difficulty            float                          :offset-assert 1124)
   (land-start-hp              float                          :offset-assert 1128)
   (jmod-turret-twist          joint-mod-rotate-local :inline :offset-assert 1136)
   (jmod-turret-pitch          joint-mod-rotate-local :inline :offset-assert 1168)
   (jmod-doors                 UNKNOWN                4       :offset-assert 1200)
   (open-doors                 uint8                          :offset-assert 1328)
   (num-open-doors             uint8                          :offset-assert 1329)
   (last-door-index            uint8                          :offset-assert 1330)
   (engines                    UNKNOWN                4       :offset-assert 1336)
   (rotate-start-time          uint64                         :offset-assert 1368)
   (rotate-total-time          uint64                         :offset-assert 1376)
   (rotate-rate                float                          :offset-assert 1384)
   (laser-rotate-speed         float                          :offset-assert 1388)
   (current-laser-rotate-speed float                          :offset-assert 1392)
   (base-laser-dir             vector                 :inline :offset-assert 1408)
   (next-new-laser-rot-time    uint64                         :offset-assert 1424)
   (laser-y                    float                          :offset-assert 1432)
   (jmod-laser-descend         joint-mod-add-local    :inline :offset-assert 1440)
   (num-hp-per-stage           float                          :offset-assert 1504)
   (self-index                 int8                           :offset-assert 1508)
   (other-ship-index           int8                           :offset-assert 1509)
   (attacker-info              city-attacker-info             :offset-assert 1512)
   (difficulty-scalar          float                          :offset-assert 1516)
   (sound-engine-loop          uint32                         :offset-assert 1520)
   (sound-lock-on              uint32                         :offset-assert 1524)
   (sound-lock-on-hi           uint32                         :offset-assert 1528)
   (alive-engines              uint8                          :offset-assert 1532)
   (last-engine?               basic                          :offset-assert 1536)
   (desired-thruster-length    float                          :offset-assert 1540)
   (last-thrust                vector                 :inline :offset-assert 1552)
   (smoke-parts                UNKNOWN                4       :offset-assert 1568)
   )
  :method-count-assert 58
  :size-assert         #x630
  :flag-assert         #x3a05b00630
  (:methods
    (protect-gunship-method-36 () none) ;; 36
    (protect-gunship-method-37 () none) ;; 37
    (protect-gunship-method-38 () none) ;; 38
    (protect-gunship-method-39 () none) ;; 39
    (protect-gunship-method-40 () none) ;; 40
    (protect-gunship-method-41 () none) ;; 41
    (protect-gunship-method-42 () none) ;; 42
    (protect-gunship-method-43 () none) ;; 43
    (protect-gunship-method-44 () none) ;; 44
    (protect-gunship-method-45 () none) ;; 45
    (protect-gunship-method-46 () none) ;; 46
    (protect-gunship-method-47 () none) ;; 47
    (protect-gunship-method-48 () none) ;; 48
    (protect-gunship-method-49 () none) ;; 49
    (protect-gunship-method-50 () none) ;; 50
    (protect-gunship-method-51 () none) ;; 51
    (protect-gunship-method-52 () none) ;; 52
    (protect-gunship-method-53 () none) ;; 53
    (protect-gunship-method-54 () none) ;; 54
    (protect-gunship-method-55 () none) ;; 55
    (protect-gunship-method-56 () none) ;; 56
    (protect-gunship-method-57 () none) ;; 57
    )
  (:state-methods
    lowering ;; 32
    raising ;; 31
    landed ;; 30
    hover ;; 29
    spinning-laser ;; 34
    enemy-spawning ;; 33
    protect-gunship-base-state ;; 28
    die ;; 35
    )
  )
|#

#|
(deftype gunship-engine (process-focusable)
  ((hit-points     float               :offset-assert 208)
   (child-index    int16               :offset-assert 212)
   (last-attack-id uint32              :offset-assert 216)
   (attacker-info  city-attacker-info  :offset-assert 220)
   (bolt           basic               :offset-assert 224)
   (hit-recently?  basic               :offset-assert 228)
   (last-hit-time  uint64              :offset-assert 232)
   )
  :method-count-assert 31
  :size-assert         #xf0
  :flag-assert         #x1f007000f0
  (:methods
    (gunship-engine-method-30 () none) ;; 30
    )
  (:state-methods
    idle ;; 28
    explode ;; 29
    )
  )
|#

#|
(deftype protect-gunship-init-params (structure)
  ((pos               vector     :inline :offset-assert 0)
   (quat              quaternion :inline :offset-assert 16)
   (task-man          uint64             :offset-assert 32)
   (script            basic              :offset-assert 40)
   (num-stages        int8               :offset-assert 44)
   (self-index        int8               :offset-assert 45)
   (difficulty        float              :offset-assert 48)
   (difficulty-scalar float              :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )
|#

#|
(deftype protect-gunship-enemy-spawn-params (structure)
  ((pos        vector     :inline :offset-assert 0)
   (quat       quaternion :inline :offset-assert 16)
   (spawn-type uint16             :offset-assert 32)
   (parent     uint64             :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype gunship-exploder (process-drawable)
  ()
  :method-count-assert 21
  :size-assert         #xc8
  :flag-assert         #x15005000c8
  (:state-methods
    explode ;; 20
    )
  )
|#

#|
(deftype gunship-missile (process-focusable)
  ((dest-pos       vector :inline :offset-assert 208)
   (launch-dir     vector :inline :offset-assert 224)
   (particle-trail basic          :offset-assert 240)
   (travel-speed   float          :offset-assert 244)
   (attack-time    float          :offset-assert 248)
   (attack-id      uint32         :offset-assert 252)
   (index          int16          :offset-assert 256)
   (swoosh-sound   uint32         :offset-assert 260)
   )
  :method-count-assert 33
  :size-assert         #x108
  :flag-assert         #x2100900108
  (:methods
    (gunship-missile-method-31 () none) ;; 31
    (gunship-missile-method-32 () none) ;; 32
    )
  (:state-methods
    explode ;; 30
    attack-targ ;; 29
    launch ;; 28
    )
  )
|#

#|
(deftype gunship-missile-init-params (structure)
  ((pos          vector :inline :offset-assert 0)
   (dest-pos     vector :inline :offset-assert 16)
   (launch-dir   vector :inline :offset-assert 32)
   (time-to-targ float          :offset-assert 48)
   (index        int16          :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )
|#

;; (define-extern *gunship-nav-mesh* object)
;; (define-extern *range-ffexplo-dust-color* curve-color-fast)
;; (define-extern *range-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *range-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-alpha* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-x* curve2d-fast)
;; (define-extern *curve-ffexplo-dust-scale-y* curve2d-fast)
;; (define-extern *part-grp-gunship-explosion-dust-in-curve-settings* object)
;; (define-extern *range-gunship-explo-color* curve-color-fast)
;; (define-extern *range-gunship-explo-alpha* curve2d-fast)
;; (define-extern *range-gunship-explo-scale-x* curve2d-fast)
;; (define-extern *range-gunship-explo-scale-y* curve2d-fast)
;; (define-extern *curve-gunship-explo-alpha* curve2d-fast)
;; (define-extern *curve-gunship-explo-scale-x* curve2d-fast)
;; (define-extern *curve-gunship-explo-scale-y* curve2d-fast)
;; (define-extern *part-grp-gunship-explosion-texture-curve-settings* object)
;; (define-extern *active-gunships* object)
;; (define-extern *gunship-door-joints* array)
;; (define-extern *gunship-engine-segs-undamaged* array)
;; (define-extern *gunship-engine-segs-damaged* array)
;; (define-extern *gunship-engine-lightning* object)
;; (define-extern gunship-engine-init-by-other function)
;; (define-extern find-nearest-nav-mesh-protect function)
;; (define-extern gunship-event-handler function)
;; (define-extern *gunship-shadow-control* shadow-control)
;; (define-extern protect-gunship-init-by-other function)
;; (define-extern gunship-exploder-init-by-other function)
;; (define-extern gunship-missile-init-by-other function)
;; (define-extern *rand-missile-sound-list* array)
;; (define-extern *missile-launch-locations* array)
;; (define-extern find-reposition-pt function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cty-protect                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype task-manager-protect-hq (task-manager)
  ((gunships      UNKNOWN 2 :offset-assert 240)
   (spawn-records basic     :offset-assert 256)
   (spawn-index   int8      :offset-assert 260)
   (death-count   int8      :offset-assert 261)
   )
  :method-count-assert 38
  :size-assert         #x106
  :flag-assert         #x2600900106
  (:methods
    (task-manager-protect-hq-method-35 () none) ;; 35
    (task-manager-protect-hq-method-36 () none) ;; 36
    (task-manager-protect-hq-method-37 () none) ;; 37
    )
  (:state-methods
    fail ;; 18
    fight-gunship-2 ;; 33
    wait-finish ;; 34
    fight-gunship ;; 32
    active ;; 15
    wait ;; 14
    )
  )
|#

#|
(deftype prot-crate (process-drawable)
  ((h-crate   uint64  :offset-assert 208)
   (dummy-ent basic   :offset-assert 216)
   )
  :method-count-assert 22
  :size-assert         #xdc
  :flag-assert         #x16006000dc
  (:methods
    (prot-crate-method-21 () none) ;; 21
    )
  (:state-methods
    active ;; 20
    )
  )
|#

;; (define-extern *protect-object-count* array)
;; (define-extern protect-type->type function)
;; (define-extern *protect-levels* array)
;; (define-extern spawn-protect-enemy function)
;; (define-extern *gunship-start-positions* array)
;; (define-extern *fountain-center-pos* object)
;; (define-extern get-protect-suck-t function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; desert-hover                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype hud-beast (hud)
  ()
  :method-count-assert 27
  :size-assert         #xac4
  :flag-assert         #x1b0a500ac4
  )
|#

#|
(deftype task-manager-desert-hover (task-manager)
  ((vehicle-h         uint64  :offset-assert 236)
   (actor-group       uint32  :offset-assert 244)
   (actor-group-count int32   :offset-assert 248)
   (end-time          uint64  :offset-assert 252)
   (hud-counter       uint64  :offset-assert 204)
   )
  :method-count-assert 32
  :size-assert         #x110
  :flag-assert         #x2000900110
  (:state-methods
    active ;; 15
    )
  )
|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deshover-texture               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define-extern *deshover-texture-anim-array* texture-anim-array)
;; (define-extern deshover-texture-anim-func function)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; terraformer-head               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
(deftype terraformer-head-speech-instance (structure)
  ((speech      basic   :offset-assert 0)
   (probability float   :offset-assert 4)
   (flags       uint64  :offset-assert 8)
   (play-count  uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
|#

#|
(deftype terraformer-head-speech-info (structure)
  ((speeches         basic   :offset-assert 0)
   (play-time        uint64  :offset-assert 8)
   (current-random   uint64  :offset-assert 16)
   (minimum-interval uint64  :offset-assert 24)
   (random-interval  uint64  :offset-assert 32)
   (last-played      int8    :offset-assert 40)
   (flags            uint8   :offset-assert 41)
   )
  :method-count-assert 9
  :size-assert         #x2a
  :flag-assert         #x90000002a
  )
|#

#|
(deftype terraformer-head-speech-group (structure)
  ((play-time uint64  :offset-assert 0)
   (info      basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )
|#

#|
(deftype joint-mod-disc-look-at (basic)
  ((flags             uint32         :offset-assert 4)
   (up                int8           :offset-assert 8)
   (nose              int8           :offset-assert 9)
   (target            vector :inline :offset-assert 16)
   (blend-duration    uint64         :offset-assert 32)
   (blend-start-time  uint64         :offset-assert 40)
   (blend-start-value float          :offset-assert 48)
   (blend-max         float          :offset-assert 52)
   )
  :method-count-assert 14
  :size-assert         #x38
  :flag-assert         #xe00000038
  (:methods
    (joint-mod-disc-look-at-method-9 () none) ;; 9
    (joint-mod-disc-look-at-method-10 () none) ;; 10
    (joint-mod-disc-look-at-method-11 () none) ;; 11
    (joint-mod-disc-look-at-method-12 () none) ;; 12
    (joint-mod-disc-look-at-method-13 () none) ;; 13
    )
  )
|#

#|
(deftype terraformer-head-target (process-focusable)
  ((been-hit basic  :offset-assert 208)
   )
  :method-count-assert 29
  :size-assert         #xd4
  :flag-assert         #x1d006000d4
  (:state-methods
    idle ;; 28
    )
  )
|#

#|
(deftype terraformer-head-laser-projectile (projectile)
  ()
  :method-count-assert 41
  :size-assert         #x200
  :flag-assert         #x2901800200
  (:state-methods
    moving ;; 23
    )
  )
|#

#|
(deftype terraformer-head-critter-tracker (structure)
  ((handle uint64         :offset-assert 0)
   (flags  uint32         :offset-assert 8)
   (dest   vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )
|#

#|
(deftype terraformer-head-ammo-tracker (structure)
  ((handle          uint64         :offset-assert 0)
   (where           vector :inline :offset-assert 16)
   (birth-next-time basic          :offset-assert 32)
   (timer           uint64         :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )
|#

#|
(deftype terraformer-head (process-focusable)
  ((head-aim-jm             basic                     :offset-assert 208)
   (neck-aim-jm             basic                     :offset-assert 212)
   (target-spline           tracking-spline   :inline :offset-assert 224)
   (target-position         vector            :inline :offset-assert 1872)
   (beam-projectile         uint64                    :offset-assert 1888)
   (hit-points              float                     :offset-assert 1896)
   (stage                   uint8                     :offset-assert 1900)
   (incoming-attack-id      uint32                    :offset-assert 1904)
   (flags                   uint64                    :offset-assert 1912)
   (initial-position        vector            :inline :offset-assert 1920)
   (position-seeker         cam-vector-seeker :inline :offset-assert 1936)
   (actor-group             uint32                    :offset-assert 1996)
   (actor-group-count       int32                     :offset-assert 2000)
   (vulnerable-timer        uint64                    :offset-assert 2008)
   (very-vulnerable-timer   uint64                    :offset-assert 2016)
   (num-attacks             int8                      :offset-assert 2024)
   (current-round           int8                      :offset-assert 2025)
   (command-index           int8                      :offset-assert 2026)
   (command-timer           uint64                    :offset-assert 2032)
   (critter                 UNKNOWN           8       :offset-assert 2048)
   (terraformer-head-target uint64                    :offset-assert 2304)
   (light-vent-timer        uint64                    :offset-assert 2312)
   (light-vent-connection   connection                :offset-assert 2320)
   (dark-vent-timer         uint64                    :offset-assert 2328)
   (dark-vent-connection    connection                :offset-assert 2336)
   (ammo                    UNKNOWN           20      :offset-assert 2352)
   (laser-sound-id          uint32                    :offset-assert 3312)
   (warmup-sound-id         uint32                    :offset-assert 3316)
   )
  :method-count-assert 33
  :size-assert         #xcf8
  :flag-assert         #x210c800cf8
  (:state-methods
    initial-state ;; 32
    slam ;; 31
    swing-laser ;; 30
    take-hit ;; 29
    run-script ;; 28
    )
  )
|#

#|
(deftype terraformer-head-command (structure)
  ((action uint64  :offset-assert 0)
   (suck   float   :offset-assert 8)
   (random float   :offset-assert 12)
   (round  int8    :offset-assert 16)
   (num    float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )
|#

;; (define-extern *terraformer-head-speech* object)
;; (define-extern reset-terraformer-head-speeches function)
;; (define-extern terraformer-head-play-speech function)
;; (define-extern joint-mod-disc-look-at-callback function)
;; (define-extern terraformer-head-target-init-by-other function)
;; (define-extern *terraformer-head-shadow-control* shadow-control)
;; (define-extern terraformer-head-get-actor-group function)
;; (define-extern terraformer-head-send-group-event function)
;; (define-extern terraformer-head-fire-beam function)
;; (define-extern terraformer-head-connect-tank-glows function)
;; (define-extern terraformer-head-always function)
;; (define-extern terraformer-head-always-handler function)
;; (define-extern terraformer-head-handler function)
;; (define-extern *terraformer-head-swarm-0* array)
;; (define-extern *terraformer-head-swarm-1* array)
;; (define-extern *terraformer-head-swarm-2* array)
;; (define-extern terraformer-head-point-occupied? function)
;; (define-extern terraformer-head-get-spawn-point function)
;; (define-extern terraformer-head-launch-critter function)
;; (define-extern terraformer-head-advance-launch-script function)
;; (define-extern terraformer-head-check-launch-script function)
;; (define-extern terraformer-head-target-enable function)


