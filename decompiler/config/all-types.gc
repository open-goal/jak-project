;; all-types.gc

;; This contains all type information and should be compatible with both the compiler and decompiler

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TYPES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; to move
(define-extern name= (function basic basic symbol)) ;; gstring
(define-extern stop (function int)) ;; logic-target
(define-extern set-blackout-frames (function int int))




;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; BUILT-IN / C TYPES  ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

;; built-in
(define-extern symbol type)
(define-extern object type)
(define-extern #f symbol)
(define-extern #t symbol)
(define-extern integer type)
(define-extern structure type)
(define-extern pair type)
(define-extern number type)
(define-extern binteger type)
(define-extern function type)
(define-extern array type)
(define-extern basic type)
(define-extern type type)
(define-extern string type)
(define-extern uint8 type)
(define-extern int8 type)
(define-extern int16 type)
(define-extern uint32 type)
(define-extern int32 type)
(define-extern float type)
(define-extern nothing (function none)) 


;; C
(define-extern dgo-load (function string kheap int int none))
(define-extern *kernel-boot-message* symbol)
(define-extern *debug-segment* symbol)

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; GCOMMON             ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

(define-extern identity (function object object))
(define-extern 1/ (function float float))
(define-extern + (function int int int))
(define-extern - (function int int int))
(define-extern * (function int int int))
(define-extern / (function int int int))
(define-extern ash (function int int int))
(define-extern mod (function int int int))
(define-extern rem (function int int int))
(define-extern abs (function int int))
(define-extern min (function int int int))
(define-extern max (function int int int))
(define-extern logior (function int int int))
(define-extern logand (function int int int))
(define-extern lognor (function int int int))
(define-extern logxor (function int int int))
(define-extern lognot (function int int))
(define-extern false-func (function symbol))
(define-extern true-func (function symbol))
(define-extern format (function _varargs_ object))
;; TODO - vec4s (or just forget it)

(deftype bfloat (basic)
  ((data float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern basic-type? (function basic type symbol))
(define-extern type-type? (function type type symbol))
(define-extern find-parent-method (function type int function))
(define-extern ref (function object int object))
(define-extern last (function object object))
(define-extern member (function object object object))
(define-extern nmember (function basic object object))
(define-extern assoc (function object object object))
(define-extern assoce (function object object object))
(define-extern nassoc (function string object object))
(define-extern nassoce (function string object object))
(define-extern append! (function object object object))
(define-extern delete! (function object object pair))
(define-extern delete-car! (function object object object))
(define-extern insert-cons! (function object object pair))
(define-extern sort (function object (function object object object) object))

(deftype inline-array-class (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   (data             uint8  :dynamic :offset-assert 12) ;; might not be here...
   (_pad             uint8 4) ;; ???
   )
  
  (:methods (new (symbol type int) _type_ 0))
    
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(define-extern mem-copy! (function pointer pointer int pointer))
(define-extern qmem-copy<-! (function pointer pointer int pointer))
(define-extern qmem-copy->! (function pointer pointer int pointer))
(define-extern mem-set32! (function pointer int int pointer))
(define-extern mem-or! (function pointer pointer int pointer))
;; quad-copy!
(define-extern fact (function int int))
(define-extern *print-column* binteger)
(define-extern print (function object object))
(define-extern printl (function object object))
(define-extern inspect (function object object))
(define-extern mem-print (function pointer int symbol))
(define-extern *trace-list* pair)
(define-extern print-tree-bitmask (function int int symbol))
(define-extern valid? (function object type basic basic object symbol))

;; has issues:
(define-extern breakpoint-range-set! function)

; ;; gcommon
; (deftype array (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  too many basic blocks
;   )

; ;; gcommon
; (deftype vec4s (uint128)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;; likely a bitfield type
;   )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; GSTRING-H           ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

;; nothing!

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; GKERNEL-H           ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

;; gkernel-h
(deftype kernel-context (basic)
  ((prevent-from-run   uint32  :offset-assert 4)
   (require-for-run    uint32  :offset-assert 8)
   (allow-to-run       uint32  :offset-assert 12)
   (next-pid           int32   :offset-assert 16)
   (fast-stack-top     pointer  :offset-assert 20)
   (current-process    basic   :offset-assert 24)
   (relocating-process basic   :offset-assert 28)
   (relocating-min     int32   :offset-assert 32)
   (relocating-max     int32   :offset-assert 36)
   (relocating-offset  int32   :offset-assert 40)
   (low-memory-message basic   :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(declare-type process basic)
(declare-type stack-frame basic)
(declare-type cpu-thread basic)
(declare-type state basic)

;; gkernel-h
(deftype thread (basic)
  ((name         basic   :offset-assert 4)
   (process      process :offset-assert 8)
   (previous     thread  :offset-assert 12)
   (suspend-hook (function cpu-thread none)   :offset-assert 16)
   (resume-hook  (function cpu-thread none)   :offset-assert 20)
   (pc           pointer :offset-assert 24)
   (sp           pointer :offset-assert 28)
   (stack-top    pointer :offset-assert 32)
   (stack-size   int32   :offset-assert 36)
   )
    
  (:methods
    (stack-size-set! ((this thread) (stack-size int)) none 9)
    (thread-suspend ((this _type_)) none 10)
    (thread-resume  ((to-resume _type_)) none 11)
    )
  
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  )

;; gkernel-h
(deftype cpu-thread (thread)
  ((rreg  uint64 8       :offset-assert 40)
   (freg  float 6        :offset-assert 104)
   (stack uint8 :dynamic :offset-assert 128)
   )
  
  (:methods
    (new ((allocation symbol) (type-to-make type) (parent-process process) (name symbol) (stack-size int) (stack-top pointer)) _type_ 0)
    (thread-suspend ((this _type_)) none 10)
    (thread-resume  ((to-resume _type_)) none 11)
    )
    
  :method-count-assert 12
  :size-assert         #x80
  :flag-assert         #xc00000080
  )

;; gkernel-h
(deftype process-tree (basic)
  ((name basic :offset-assert 4)
   (mask uint32 :offset-assert 8)
   (parent (pointer process-tree) :offset-assert 12)
   (brother (pointer process-tree) :offset-assert 16)
   (child (pointer process-tree) :offset-assert 20)
   (ppointer (pointer process-tree) :offset-assert 24)
   (self process-tree :offset-assert 28)
   )
  
  (:methods
    (new ((allocation symbol) (type-to-make type) (name basic)) _type_ 0)
    (activate ((obj _type_) (dest process-tree) (name basic) (stack-top pointer)) basic 9)
    (deactivate  ((obj _type_)) basic 10)
    (dummy-method-11 () none 11)
    (run-logic? ((obj _type_)) symbol 12)
    (dummy-method () none 13)
    )  
  
  :size-assert #x20
  :method-count-assert 14
  :no-runtime-type
  )

;; gkernel
(deftype process (process-tree)
  ((pool basic :offset-assert #x20)
   (status basic :offset-assert #x24)
   (pid int32 :offset-assert #x28)
   (main-thread cpu-thread :offset-assert #x2c)
   (top-thread thread :offset-assert #x30)
   (entity basic :offset-assert #x34)
   (state state :offset-assert #x38)
   (trans-hook function :offset-assert #x3c)
   (post-hook function :offset-assert #x40)
   (event-hook function :offset-assert #x44)
   (allocated-length int32 :offset-assert #x48)
   (next-state basic :offset-assert #x4c)
   (heap-base pointer :offset-assert #x50)
   (heap-top pointer :offset-assert #x54)
   (heap-cur pointer :offset-assert #x58)
   (stack-frame-top stack-frame :offset-assert #x5c)
   (connection-list connectable :inline :offset-assert #x60)
   (stack uint8 :dynamic :offset-assert #x70)
   )
  
  (:methods
    (new ((allocation symbol) (type-to-make type) (name basic) (stack-size int)) _type_ 0)
    (activate ((obj process) (dest process-tree) (name basic) (stack-top pointer)) basic 9)
    (deactivate  ((obj process)) basic 10)
    (dummy-method-11 () none 11)
    (run-logic? ((obj process)) symbol 12)
    (dummy-method () none 13)
    )  
  
  :size-assert #x70
  :method-count-assert 14
  :no-runtime-type ;; already defined by kscheme. Don't do it again.
  )

;; gkernel-h
(deftype dead-pool (process-tree)
  (
   ;; nothing new!
   )
  (:methods
    (new ((allocation symbol) (type-to-make type) (count int) (stack-size int) (name basic)) _type_ 0)
    (get-process ((pool _type_) (type-to-make type) (stack-size int)) process 14)
    (return-process ((pool _type_) (proc process)) none 15)
    )
  :size-assert #x20
  :method-count-assert 16
  :flag-assert #x1000000020
  )

;; gkernel-h
(deftype dead-pool-heap-rec (structure)
  ((process process             :offset-assert 0)
   (prev    dead-pool-heap-rec  :offset-assert 4)
   (next    dead-pool-heap-rec  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; gkernel-h
(deftype dead-pool-heap (dead-pool)
  ((allocated-length   int32                       :offset-assert 32)
   (compact-time       uint32                      :offset-assert 36)
   (compact-count-targ uint32                      :offset-assert 40)
   (compact-count      uint32                      :offset-assert 44)
   (fill-percent       float                       :offset-assert 48)
   (first-gap          dead-pool-heap-rec          :offset-assert 52)
   (first-shrink       dead-pool-heap-rec          :offset-assert 56)
   (heap               kheap              :inline  :offset-assert 64)
   (alive-list         dead-pool-heap-rec :inline  :offset-assert 80)
   (last               dead-pool-heap-rec :offset #x54  :offset-assert 84)
   (dead-list          dead-pool-heap-rec :inline  :offset-assert 92)
   (process-list       dead-pool-heap-rec :inline :dynamic :offset-assert 104)
   )
  
  (:methods
    (new ((allocation symbol) (type-to-make type) (name basic) (allocated-length int) (heap-size int)) _type_ 0)
    (compact ((this dead-pool-heap) (count int)) none 16)
    (shrink-heap ((this dead-pool-heap) (proc process)) dead-pool-heap 17)
    (churn ((this dead-pool-heap) (count int)) none 18)
    (memory-used ((this dead-pool-heap)) int 19)
    (memory-total ((this dead-pool-heap)) int 20)
    (gap-size ((this dead-pool-heap) (rec dead-pool-heap-rec)) int 21)
    (gap-location ((this dead-pool-heap) (rec dead-pool-heap-rec)) pointer 22)
    (find-gap ((this dead-pool-heap) (rec dead-pool-heap-rec)) dead-pool-heap-rec 23)
    (find-gap-by-size ((this dead-pool-heap) (size int)) dead-pool-heap-rec 24)
    (memory-free ((this dead-pool-heap)) int 25)
    (compact-time ((this dead-pool-heap)) uint 26)
    )
  
  :method-count-assert 27
  :size-assert         #x68
  :flag-assert         #x1b00000068
  )

(deftype stack-frame (basic)
  ((name basic :offset 4)
   (next stack-frame :offset 8) ;; which way does this point?
   )
  
  :size-assert #xc
  :method-count-assert 9
  :flag-assert #x90000000c
  )

(deftype catch-frame (stack-frame)
  ((sp   int32     :offset-assert 12)
   (ra   int32     :offset-assert 16)
   (freg float 6 :offset-assert 20) 
   (rreg uint128 8 :offset-assert 48) 
   )
  
  (:methods
    (new ((allocation symbol) (type-to-make type) (name symbol) (func function) (params (pointer uint64))) object 0)
    )
  
  :method-count-assert 9
  :size-assert         #xb0
  :flag-assert         #x9000000b0
  )

(deftype protect-frame (stack-frame)
  ((exit function  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; gkernel-h
;; todo
; (deftype handle (uint64)
;   ()
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   ;; likely a bitfield type
;   )

;; gkernel-h
(deftype state (protect-frame)
  ((code  function  :offset-assert 16)
   (trans function  :offset-assert 20)
   (post  function  :offset-assert 24)
   (enter function  :offset-assert 28)
   (event basic     :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; gkernel-h
(deftype event-message-block (structure)
  ((to         basic     :offset-assert 0)
   (from       basic     :offset-assert 4)
   (num-params int32     :offset-assert 8)
   (message    basic     :offset-assert 12)
   (param      uint64 7  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; GKERNEL             ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

(define-extern *kernel-version* binteger)
(define-extern *irx-version* binteger)
(define-extern *kernel-boot-mode* symbol)
(define-extern *kernel-boot-level* symbol)
(define-extern *deci-count* int)
(define-extern *last-loado-length* int)
(define-extern *last-loado-global-usage* int)
(define-extern *last-loado-debug-usage* int)
(define-extern *kernel-packages* pair)
(define-extern load-package (function string kheap pair))
(define-extern unload-package (function string pair))
(define-extern *kernel-context* kernel-context)
(define-extern *dram-stack* (pointer uint8))
(define-extern *null-kernel-context* kernel-context)

(define-extern remove-exit (function stack-frame))
(define-extern stream<-process-mask (function object int object))
(define-extern *master-mode* symbol)
(define-extern *pause-lock* symbol)
(define-extern inspect-process-heap (function process symbol))
(define-extern *kernel-sp* pointer)
(define-extern return-from-thread (function none))
(define-extern return-from-thread-dead (function none))
(define-extern reset-and-call (function thread function object))

(define-extern *debug-dead-pool* dead-pool-heap)
(define-extern *null-process* process)
(define-extern *vis-boot* basic)
(define-extern *stdcon* basic) ;; todo, more specific

(define-extern *global-search-name* basic)
(define-extern *global-search-count* int)
(define-extern process-by-name (function object process-tree process))
(define-extern process-not-name (function object process-tree process))
(define-extern process-count (function process-tree int))
(define-extern kill-by-name (function object process-tree symbol))
(define-extern kill-by-type (function object process-tree symbol))
(define-extern kill-not-name (function object process-tree symbol))
(define-extern kill-not-type (function object process-tree symbol))

(define-extern iterate-process-tree (function process-tree (function object object) kernel-context object))
(define-extern search-process-tree (function process-tree (function process-tree object) process))
(define-extern execute-process-tree (function process-tree (function object object) kernel-context object))

(define-extern change-parent (function process-tree process-tree process-tree))

(define-extern *active-pool* process-tree)
(define-extern kernel-dispatcher (function (function object)))
(define-extern inspect-process-tree (function process-tree int int symbol process-tree))


;;(define-extern stack-frame object) ;; unknown type
(define-extern state type)
;;(define-extern dead-pool-heap-rec object) ;; unknown type
;;(define-extern dead-pool object) ;; unknown type
;;(define-extern catch-frame object) ;; unknown type
;;(define-extern thread object) ;; unknown type
;;(define-extern handle object) ;; unknown type
;;(define-extern cpu-thread object) ;; unknown type
;;(define-extern dead-pool-heap object) ;; unknown type
(define-extern kernel-context type)
;;(define-extern protect-frame object) ;; unknown type
;;(define-extern event-message-block object) ;; unknown type
;;(define-extern process-tree object) ;; unknown type
;;(define-extern *listener-process* object) ;; unknown type
;;(define-extern *entity-pool* object) ;; unknown type
;;(define-extern *default-pool* object) ;; unknown type
;;(define-extern malloc object) ;; unknown type
;;(define-extern ready object) ;; unknown type
;;(define-extern *camera-pool* object) ;; unknown type
(define-extern throw-dispatch function)
;;(define-extern game object) ;; unknown type
(define-extern run-function-in-process function)
(define-extern throw function)
;;(define-extern *nk-dead-pool* object) ;; unknown type
(define-extern change-to-last-brother function)
;;(define-extern *pickup-dead-pool* object) ;; unknown type
;;(define-extern *camera-master-dead-pool* object) ;; unknown type
(define-extern set-to-run function)
;;(define-extern default-pool object) ;; unknown type
;;(define-extern listener object) ;; unknown type
;;(define-extern target-pool object) ;; unknown type
(define-extern set-to-run-bootstrap function)
;;(define-extern *camera-dead-pool* object) ;; unknown type
;;(define-extern process object) ;; unknown type
(define-extern previous-brother function)
;;(define-extern dead-state object) ;; unknown type
;;(define-extern debug object) ;; unknown type
;;(define-extern *16k-dead-pool* object) ;; unknown type
(define-extern entity-deactivate-handler function)
;;(define-extern *target-pool* object) ;; unknown type
;;(define-extern entity-pool object) ;; unknown type
;;(define-extern main object) ;; unknown type
(define-extern change-brother function)
;;(define-extern *active-pool* object) ;; unknown type
;;(define-extern display-pool object) ;; unknown type
;;(define-extern *target-dead-pool* object) ;; unknown type
;;(define-extern *4k-dead-pool* object) ;; unknown type
;;(define-extern *default-dead-pool* object) ;; unknown type
;;(define-extern *8k-dead-pool* object) ;; unknown type
;;(define-extern *display-pool* object) ;; unknown type
;;(define-extern active-pool object) ;; unknown type
;;(define-extern *dead-pool-list* object) ;; unknown type
;;(define-extern camera-pool object) ;; unknown type
;;(define-extern suspended object) ;; unknown type
;;(define-extern dgo-load object) ;; unknown type
;;(define-extern initialize-dead object) ;; unknown type
;;(define-extern #f object) ;; unknown type
;;(define-extern waiting-to-run object) ;; unknown type
;;(define-extern *stdcon0* object) ;; unknown type
;;(define-extern initialize-go object) ;; unknown type
;;(define-extern trans object) ;; unknown type
;;(define-extern code object) ;; unknown type
;;(define-extern *listener-function* object) ;; unknown type
;;(define-extern *stdcon1* object) ;; unknown type
;;(define-extern initialize object) ;; unknown type
(define-extern process-disconnect function)
;;(define-extern *debug-draw-pauseable* object) ;; unknown type
;;(define-extern _empty_ object) ;; unknown type
;;(define-extern running object) ;; unknown type
;;(define-extern *enable-method-set* object) ;; unknown type
;;(define-extern post object) ;; unknown type
;;(define-extern dead object) ;; unknown type

;; pskernel
(deftype lowmemmap (structure)
  ((irq-info-stack  uint32   :offset-assert 0)
   (irq2-info-stack uint32   :offset-assert 4)
   (kernel-copy-fn  uint32   :offset-assert 8)
   (kernel-write-fn uint32   :offset-assert 12)
   (r1-save         uint128  :offset-assert 16)
   (last-time       uint32   :offset-assert 32)
   (high-time       uint32   :offset-assert 36)
   (dma-status      uint32   :offset-assert 40)
   (dma-qnext       uint32   :offset-assert 44)
   (dma-qwc         uint32   :offset-assert 48)
   (dma-tnext       uint32   :offset-assert 52)
   (dma-stack0      uint32   :offset-assert 56)
   (dma-stack1      uint32   :offset-assert 60)
   (kernel-read-fn  uint32   :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; DGO-H               ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

;; dgo-h
(deftype dgo-entry (structure)
  ((offset uint32  :offset-assert 0)
   (length uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; dgo-h
(deftype dgo-file (basic)
  ((num-go-files uint32           :offset-assert 4)
   (total-length uint32           :offset-assert 8)
   (rsvd         uint32           :offset-assert 12)
   (data         uint8 :dynamic   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; MATH             ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

;; math
(deftype random-generator (basic)
  ((seed uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern truncate (function float float))
(define-extern integral? (function float symbol))
(define-extern fractional-part (function float float))
(define-extern log2 (function int int))
(define-extern seek (function float float float float))
(define-extern lerp (function float float float float))
(define-extern lerp-scale (function float float float float float float))

; ;;(define-extern xyzwh object) ;; unknown type
; (define-extern rand-vu-init function)
; (define-extern rand-vu-nostep function)
; (define-extern rand-vu function)
; (define-extern lerp function)
; (define-extern lerp-scale function)
; (define-extern rand-vu-int-range function)
; (define-extern lerp-clamp function)
; ;;(define-extern random-generator object) ;; unknown type
; (define-extern integral? function)
; (define-extern rand-uint31-gen function)
; (define-extern rand-vu-int-count function)
; (define-extern fractional-part function)
; (define-extern seek function)
; ;;(define-extern xyzw object) ;; unknown type
; (define-extern rand-vu-percent? function)
; ;;(define-extern *random-generator* object) ;; unknown type
; (define-extern rand-vu-float-range function)
; ;;(define-extern rgba object) ;; unknown type
; (define-extern seekl function)

; ;; vector-h
(deftype vector (structure)
  ((data float 4 :offset-assert 0)
   (x float :offset 0)
   (y float :offset 4)
   (z float :offset 8)
   (w float :offset 12)
   (quad uint128 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; vector-h
(deftype bit-array (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   (_pad uint8)
   )
  :method-count-assert 13
  :size-assert         #xd
  :flag-assert         #xd0000000d
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

(deftype vector4ub (structure)
  ((data uint8 4 :offset-assert 0)
   (x    uint8     :offset 0)
   (y    uint8     :offset 1)
   (z    uint8     :offset 2)
   (w    uint8     :offset 3)
   (clr  uint32    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector4b (structure)
  ((data int8 4 :offset-assert 0)
   (x    int8      :offset 0)
   (y    int8      :offset 1)
   (z    int8      :offset 2)
   (w    int8      :offset 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2h (structure)
  ((data int16 2 :offset-assert 0)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector2uh (structure)
  ((data uint16 2 :offset-assert 0)
   (x    uint16    :offset 0)
   (y    uint16    :offset 2)
   (val  uint32    :offset 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype vector3h (structure)
  ((data int16 2 :offset-assert 0) ;; probably a bug, should be 3.
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype vector2w (structure)
  ((data int32 2 :offset-assert 0)
   (x    int32     :offset 0)
   (y    int32     :offset 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector3w (structure)
  ((data int32 3 :offset-assert 0)
   (x    int32     :offset 0)
   (y    int32     :offset 4)
   (z    int32     :offset 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype vector4w (structure)
  ((data  int32 4 :offset-assert 0)
   (x     int32     :offset 0)
   (y     int32     :offset 4)
   (z     int32     :offset 8)
   (w     int32     :offset 12)
   (dword uint64 2 :offset 0)
   (quad  uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector4w-2 (structure)
  ((data   int32 8 :offset-assert 0)
   (quad   uint128 2 :offset 0)
   (vector vector4w 2 :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype vector4w-3 (structure)
  ((data   int32 12 :offset-assert 0)
   (quad   uint128 3  :offset 0)
   (vector vector4w 3  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector4w-4 (structure)
  ((data   int32 16 :offset-assert 0)
   (quad   uint128 4  :offset 0)
   (vector vector4w 4  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vector4h (structure)
  ((data int16 4 :offset-assert 0)
   (x    int16     :offset 0)
   (y    int16     :offset 2)
   (z    int16     :offset 4)
   (w    int16     :offset 6)
   (long uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype vector8h (structure)
  ((data int16 8 :offset-assert 0)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector16b (structure)
  ((data int8 8 :offset-assert 0)
   (quad uint128   :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; what's the s here?
(deftype vector4s-3 (structure)
  ((data   float 12 :offset-assert 0) ;; guess
   (quad   uint128 3  :offset 0)
   (vector vector4w 3  :offset 0)     ;; guess
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype vector-array (inline-array-class)
  (
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype rgbaf (vector)
  ((r    float     :offset 0)
   (g    float     :offset 4)
   (b    float     :offset 8)
   (a    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype plane (vector)
  ((a    float     :offset 0)
   (b    float     :offset 4)
   (c    float     :offset 8)
   (d    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sphere (vector)
  ((r    float     :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype box8s (structure)
  ((data   float 8       :offset-assert 0)
   (quad   uint128 2       :offset 0)
   (vector vector 2       :offset 0)
   (min    vector  :inline :offset 0)
   (max    vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype box8s-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype cylinder (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

(deftype cylinder-flat (structure)
  ((origin vector :inline :offset-assert 0)
   (axis   vector :inline :offset-assert 16)
   (radius float          :offset-assert 32)
   (length float          :offset-assert 36)
   )
  :method-count-assert 11
  :size-assert         #x28
  :flag-assert         #xb00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; vector-h
(deftype vertical-planes (structure)
  ((data uint128 4 :offset-assert 0) ;; probably wrong
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype vertical-planes-array (basic)
  ((length uint32           :offset-assert 4)
   (data   vertical-planes :dynamic :offset 16) ;; todo, why is this here?
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; the signs on these are a guess
(deftype qword (structure)
  ((data     uint32  4       :offset-assert 0)
   (byte     uint8  16      :offset 0)
   (hword    uint16  8       :offset 0)
   (word     uint32  4       :offset 0)
   (dword    uint64  2       :offset 0)
   (quad     uint128          :offset 0)
   (vector   vector   :inline :offset 0)
   (vector4w vector4w :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype vector3s (structure)
  ((data float 3 :offset-assert 0)
   (x    float     :offset 0)
   (y    float     :offset 4)
   (z    float     :offset 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )


;; bounding-box-h
(deftype bounding-box (structure)
  ((min vector :inline :offset-assert 0)
   (max vector :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x20
  :flag-assert         #x1000000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; bounding-box-h
(deftype bounding-box4w (structure)
  ((min vector4w :inline :offset-assert 0)
   (max vector4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; bounding-box-h
(deftype bounding-box-both (structure)
  ((box   bounding-box   :inline :offset-assert 0)
   (box4w bounding-box4w :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; matrix-h
(deftype matrix (structure)
  ((data   float 16 :offset-assert 0)
   (vector vector 4  :offset 0)
   (quad   uint128 4  :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (dummy-9 () none 9)
    )
  )

(deftype matrix3 (structure)
  ((data   float 12 :offset-assert 0)
   (vector vector 3  :offset 0)
   (quad   uint128 3  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; guess on signs here
(deftype matrix4h (structure)
  ((data     int16 16 :offset-assert 0)
   (vector4h vector4h 4  :offset 0)
   (long     int64 4  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype quaternion (structure)
  ((data float 4       :offset-assert 0)
   (x    float           :offset 0)
   (y    float           :offset 4)
   (z    float           :offset 8)
   (w    float           :offset 12)
   (vec  vector  :inline :offset 0)
   (quad uint128         :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; euler-h
(deftype euler-angles (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; transform-h
(deftype transform (structure)
  ((trans vector :inline :offset-assert 0)
   (rot   vector :inline :offset-assert 16)
   (scale vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; transform-h
(deftype trs (basic)
  ((trans vector :inline :offset-assert 16)
   (rot   vector :inline :offset-assert 32)
   (scale vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; geometry-h
(deftype curve (structure)
  ((cverts     uint32  :offset-assert 0)
   (num-cverts int32   :offset-assert 4)
   (knots      uint32  :offset-assert 8)
   (num-knots  int32   :offset-assert 12)
   (length     float   :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; geometry-h
(deftype border-plane (basic)
  ((name   basic          :offset-assert 4)
   (action basic          :offset-assert 8)
   (slot   int8           :offset-assert 12)
   (trans  vector :inline :offset-assert 16)
   (normal vector :inline :offset-assert 32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

; ;; transformq-h
(deftype transformq (transform)
  ((quat  quaternion :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype trsq (trs)
  ((quat  quaternion :inline :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


;; transformq-h
(deftype trsqv (trsq)
  ((pause-adjust-distance float             :offset 4) ;; todo meters
   (nav-radius            float             :offset 8) ;; todo meters
   (transv                vector     :inline :offset-assert 64)
   (rotv                  vector     :inline :offset-assert 80)
   (scalev                vector     :inline :offset-assert 96)
   (dir-targ              quaternion :inline :offset-assert 112)
   (angle-change-time     uint64             :offset-assert 128)
   (old-y-angle-diff      float              :offset-assert 136)
   )
  :method-count-assert 28
  :size-assert         #x8c
  :flag-assert         #x1c0000008c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    )
  )

(deftype sound-rpc-cmd (structure)
  ((rsvd1   uint16  :offset-assert 0)
   (command uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-play-parms (structure)
  ((mask      uint16    :offset-assert 0)
   (pitch-mod int16     :offset-assert 2)
   (bend      int16     :offset-assert 4)
   (fo-min    int16     :offset-assert 6)
   (fo-max    int16     :offset-assert 8)
   (fo-curve  int8      :offset-assert 10)
   (priority  int8      :offset-assert 11)
   (volume    int32     :offset-assert 12)
   (trans     float 3 :offset-assert 16) ;; guess on type here
   (group     uint8     :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1d
  :flag-assert         #x90000001d
  )

(deftype sound-rpc-bank-cmd (sound-rpc-cmd)
  ((bank-name uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-sound-cmd (sound-rpc-cmd)
  ((id      uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-group-cmd (sound-rpc-cmd)
  ((group   uint8   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-load-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-load-music (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-unload-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-play (sound-rpc-sound-cmd)
  ((name    uint128                  :offset-assert 16)
   (parms   sound-play-parms :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x3d
  :flag-assert         #x90000003d
  )

(deftype sound-rpc-pause-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-param (sound-rpc-sound-cmd)
  ((parms     sound-play-parms :inline :offset-assert 8)
   (auto-time int32                    :offset-assert 40)
   (auto-from int32                    :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-set-master-volume (sound-rpc-group-cmd)
  ((volume  int32   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-pause-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-stop-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-continue-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-get-irx-version (sound-rpc-cmd)
  ((major   uint32  :offset-assert 4)
   (minor   uint32  :offset-assert 8)
   (ee-addr uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-language (sound-rpc-cmd)
  ((lang    uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-falloff-curve (sound-rpc-cmd)
  ((curve   int32   :offset-assert 4)
   (falloff int32   :offset-assert 8)
   (ease    int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-sound-falloff (sound-rpc-cmd)
  ((name    uint128  :offset-assert 16)
   (curve   int32    :offset-assert 32)
   (min     int32    :offset-assert 36)
   (max     int32    :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sound-rpc-reload-info (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-reverb (sound-rpc-cmd)
  ((core    uint8   :offset-assert 4)
   (reverb  int32   :offset-assert 8)
   (left    uint32  :offset-assert 12)
   (right   uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype sound-rpc-set-ear-trans (sound-rpc-cmd)
  ((ear-trans float 3 :offset-assert 4) ;; guess on float, may be fixed point
   (cam-trans float 3 :offset-assert 16)
   (cam-angle int32     :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-set-flava (sound-rpc-cmd)
  ((flava   uint8   :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-shutdown (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-list-sounds (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-unload-music (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-union (structure)
  ((data              uint32                     20 :offset-assert 0)
   (load-bank         sound-rpc-load-bank            :offset 0)
   (unload-bank       sound-rpc-unload-bank          :offset 0)
   (play              sound-rpc-play                 :offset 0)
   (pause-sound       sound-rpc-pause-sound          :offset 0)
   (stop-sound        sound-rpc-stop-sound           :offset 0)
   (continue-sound    sound-rpc-continue-sound       :offset 0)
   (set-param         sound-rpc-set-param            :offset 0)
   (set-master-volume sound-rpc-set-master-volume    :offset 0)
   (pause-group       sound-rpc-pause-group          :offset 0)
   (stop-group        sound-rpc-stop-group           :offset 0)
   (continue-group    sound-rpc-continue-group       :offset 0)
   (get-irx-version   sound-rpc-get-irx-version      :offset 0)
   (set-falloff-curve sound-rpc-set-falloff-curve    :offset 0)
   (set-sound-falloff sound-rpc-set-sound-falloff    :offset 0)
   (reload-info       sound-rpc-reload-info          :offset 0)
   (set-language      sound-rpc-set-language         :offset 0)
   (set-reverb        sound-rpc-set-reverb           :offset 0)
   (set-ear-trans     sound-rpc-set-ear-trans        :offset 0)
   (set-flava         sound-rpc-set-flava            :offset 0)
   (shutdown          sound-rpc-shutdown             :offset 0)
   (list-sounds       sound-rpc-list-sounds          :offset 0)
   (unload-music      sound-rpc-unload-music         :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sound-spec (basic)
  ((mask            uint16     :offset-assert 4)
   (num             float      :offset-assert 8)
   (group           uint8      :offset-assert 12)
   (sound-name-char uint8 16 :offset 16)
   (sound-name      uint128    :offset 16)
   (trans           float 4  :offset-assert 32) ;; guess
   (volume          int32      :offset-assert 48)
   (pitch-mod       int32      :offset-assert 52)
   (bend            int32      :offset-assert 56)
   (fo-min          int16      :offset-assert 60)
   (fo-max          int16      :offset-assert 62)
   (fo-curve        int8       :offset-assert 64)
   (priority        int8       :offset-assert 65)
   (auto-time       int32      :offset-assert 68)
   (auto-from       int32      :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(deftype ambient-sound (basic)
  ((spec         basic           :offset-assert 4)
   (playing-id   uint32          :offset-assert 8)
   (trans        vector  :inline :offset-assert 16)
   (name         uint128         :offset-assert 32)
   (play-time    uint64          :offset-assert 48)
   (time-base    uint64          :offset-assert 56)
   (time-random  uint64          :offset-assert 64)
   (volume       int32           :offset-assert 72)
   (pitch        int32           :offset-assert 76)
   (falloff-near int32           :offset-assert 80)
   (falloff-far  int32           :offset-assert 84)
   (falloff-mode int32           :offset-assert 88)
   (params       uint32          :offset-assert 92)
   (param-count  int32           :offset-assert 96)
   (entity       basic           :offset-assert 100)
   (sound-count  int32           :offset-assert 104)
   )
  :method-count-assert 14
  :size-assert         #x6c
  :flag-assert         #xe0000006c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

;;;;;;;;;;;;;
;; timer-h
;;;;;;;;;;;;;

(deftype timer-bank (structure)
  ((count uint32  :offset-assert 0)
   (mode  uint32  :offset 16) ;; not sure why these are so widely spaced. match hw?
   (comp  uint32  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype timer-hold-bank (timer-bank)
  ((hold  uint32  :offset 48) ;; not sure why so widely spaced
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype stopwatch (basic)
  ((prev-time-elapsed uint64  :offset-assert 8)
   (start-time        uint64  :offset-assert 16)
   (begin-level       int32   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(deftype profile-frame (structure)
  ((name       basic   :offset-assert 0)
   (time-stamp uint32  :offset-assert 4)
   (color      uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype profile-bar (basic)
  ((profile-frame-count int32        :offset-assert 4)
   (cache-time          uint64       :offset-assert 8)
   (data                profile-frame 1024 :inline :offset-assert 16)
   )
  :method-count-assert 14
  :size-assert         #x4010
  :flag-assert         #xe00004010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

;;;;;;;;;;;;;
;; vif-h
;;;;;;;;;;;;;

; ;; vif-h
; (deftype vif-stat (uint32)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;; likely a bitfield type
;   )

;; vif-h
(deftype vif-bank (structure)
  ((stat   uint32  :offset-assert 0)
   (fbrst  uint32  :offset 16)
   (err    uint32  :offset 32)
   (mark   uint32  :offset 48)
   (cycle  uint32  :offset 64)
   (mode   uint32  :offset 80)
   (num    uint32  :offset 96)
   (mask   uint32  :offset 112)
   (code   uint32  :offset 128)
   (itops  uint32  :offset 144)
   (base   uint32  :offset 160)
   (offset uint32  :offset 176)
   (tops   uint32  :offset 192)
   (itop   uint32  :offset 208)
   (top    uint32  :offset 224)
   (r0     uint32  :offset 256)
   (r1     uint32  :offset 272)
   (r2     uint32  :offset 288)
   (r3     uint32  :offset 304)
   (c0     uint32  :offset 320)
   (c1     uint32  :offset 336)
   (c2     uint32  :offset 352)
   (c3     uint32  :offset 368)
   )
  :method-count-assert 9
  :size-assert         #x174
  :flag-assert         #x900000174
  )
; ;; dma-h
; (deftype dma-chcr (uint32)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;; likely a bitfield type
;   )

(deftype dma-bank (structure)
  ((chcr uint32  :offset 0)
   (madr uint32  :offset 16)
   (qwc  uint32  :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype dma-bank-source (dma-bank)
  ((tadr uint32  :offset 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

(deftype dma-bank-vif (dma-bank-source)
  ((as0  uint32  :offset 64)
   (as1  uint32  :offset 80)
   )
  :method-count-assert 9
  :size-assert         #x54
  :flag-assert         #x900000054
  )

(deftype dma-bank-spr (dma-bank-source)
  ((sadr uint32  :offset 128)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype dma-bank-control (structure)
  ((ctrl    uint32  :offset 0)
   (stat    uint32  :offset 16)
   (pcr     uint32  :offset 32)
   (sqwc    uint32  :offset 48)
   (rbsr    uint32  :offset 64)
   (rbor    uint32  :offset 80)
   (stadr   uint32  :offset 96)
   (enabler uint32  :offset 5408)
   (enablew uint32  :offset 5520)
   )
  :method-count-assert 9
  :size-assert         #x1594
  :flag-assert         #x900001594
  )

(deftype vu-code-block (basic)
  ((name         basic   :offset-assert 4)
   (code         uint32  :offset-assert 8)
   (size         int32   :offset-assert 12)
   (dest-address uint32  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; dma-h
; (deftype dma-tag (uint64)
;   ()
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   ;; likely a bitfield type
;   )

; ;; dma-h
(deftype dma-bucket (structure)
  ((tag   uint64  :offset-assert 0)
   (last  uint32  :offset-assert 8)
   (dummy uint32  :offset-assert 12)
   (next  uint32  :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
; ;; dma-h
; (deftype vif-tag (uint32)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;; likely a bitfield type
;   )

; ;; video-h
(deftype video-parms (structure)
  ((set-video-mode              basic  :offset-assert 0)
   (reset-video-mode            basic  :offset-assert 4)
   (screen-sy                   int32  :offset-assert 8)
   (screen-hy                   int32  :offset-assert 12)
   (screen-miny                 int32  :offset-assert 16)
   (screen-maxy                 int32  :offset-assert 20)
   (screen-masky                int32  :offset-assert 24)
   (display-dx                  int32  :offset-assert 28)
   (display-dy                  int32  :offset-assert 32)
   (screen-pages-high           int32  :offset-assert 36)
   (_pad                        int64)
   (relative-x-scale            float  :offset-assert 48)
   (relative-y-scale            float  :offset-assert 52)
   (_pad2                       int64)
   (relative-x-scale-reciprical float  :offset-assert 64)
   (relative-y-scale-reciprical float  :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; vu1-user-h
(deftype dma-foreground-sink (basic)
  ((bucket                   int32  :offset-assert 4)
   (foreground-texture-page  int8   :offset-assert 8)
   (foreground-texture-level int8   :offset-assert 9)
   (foreground-output-bucket int8   :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xb
  :flag-assert         #x90000000b
  )

(deftype generic-bucket-state (structure)
  ((gifbuf-adr uint32  :offset-assert 0)
   (inbuf-adr  uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype generic-dma-foreground-sink (dma-foreground-sink)
  ((state                    generic-bucket-state :inline :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype dma-foreground-sink-group (basic)
  ((sink         basic 3 :offset-assert 4)
   (merc-sink    basic     :offset 4)
   (generic-sink basic     :offset 8)
   (level        basic     :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;;;;;;;;;;;;;;;
;; dma-buffer
;;;;;;;;;;;;;;;

(deftype dma-packet (structure)
  ((dma  uint64   :offset-assert 0)
   (vif0 uint32   :offset-assert 8)
   (vif1 uint32   :offset-assert 12)
   (quad uint128  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-packet-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype dma-gif-packet (structure)
  ((dma-vif dma-packet :inline :offset-assert 0)
   (gif     uint64    2       :offset-assert 16) ;; guess
   (quad    uint128    2       :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype dma-buffer (basic)
  ((allocated-length int32     :offset-assert 4)
   (base             uint32    :offset-assert 8)
   (end              uint32    :offset-assert 12)
   (data             uint64 1 :offset-assert 16) ;; hmmm, seems wrong
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;;;;;;;;;;;;;;;
;; dma-disasm
;;;;;;;;;;;;;;;

(deftype vif-disasm-element (structure)
  ((mask    uint32  :offset-assert 0)
   (tag     uint32  :offset-assert 4)
   (val     uint32  :offset-assert 8)
   (print   uint32  :offset-assert 12)
   (string1 basic   :offset-assert 16)
   (string2 basic   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;;;;;;;;;;;;;;;
;; pad
;;;;;;;;;;;;;;;

(deftype hw-cpad (basic)
  ((valid   uint8      :offset-assert 4)
   (status  uint8      :offset-assert 5)
   (button0 uint16     :offset-assert 6)
   (rightx  uint8      :offset-assert 8)
   (righty  uint8      :offset-assert 9)
   (leftx   uint8      :offset-assert 10)
   (lefty   uint8      :offset-assert 11)
   (abutton uint8 12 :offset-assert 12)
   (dummy   uint8 12 :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype cpad-info (hw-cpad)
  ((number             int32      :offset-assert 36)
   (cpad-file          int32      :offset-assert 40)
   (button0-abs        int32 3  :offset-assert 44) ;; guess
   (button0-shadow-abs int32 1  :offset-assert 56) ;; guess
   (button0-rel        int32 3  :offset-assert 60) ;; guess
   (stick0-dir         float      :offset-assert 72)
   (stick0-speed       float      :offset-assert 76)
   (new-pad            int32      :offset-assert 80)
   (state              int32      :offset-assert 84)
   (align              uint8 6  :offset-assert 88)
   (direct             uint8 6  :offset-assert 94)
   (buzz-val           uint16 2  :offset-assert 100)
   (buzz-time          uint64 2  :offset-assert 104)
   (buzz               basic      :offset-assert 120)
   (buzz-act           int32      :offset-assert 124)
   (change-time        uint64     :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

(deftype cpad-list (basic)
  ((num-cpads int32     :offset-assert 4)
   (cpads     int32 2 :offset-assert 8) ;; guess
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;;;;;;;;;;;;;;;
;; gs
;;;;;;;;;;;;;;;

(deftype gs-bank (structure)
  ((pmode    uint64  :offset-assert 0)
   (smode2   uint64  :offset 32)
   (dspfb1   uint64  :offset 112)
   (display1 uint64  :offset 128)
   (dspfb2   uint64  :offset 144)
   (display2 uint64  :offset 160)
   (extbuf   uint64  :offset 176)
   (extdata  uint64  :offset 192)
   (extwrite uint64  :offset 208)
   (bgcolor  uint64  :offset 224)
   (csr      uint64  :offset 4096)
   (imr      uint64  :offset 4112)
   (busdir   uint64  :offset 4160)
   )
  :method-count-assert 9
  :size-assert         #x1048
  :flag-assert         #x900001048
  )

; ;; gs
; (deftype gs-alpha (uint64)
;   ()
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   ;; likely a bitfield type
;   )

; ;; gs
; (deftype gs-fog (uint64)
;   ()
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   ;; likely a bitfield type
;   )

; ;; gs
; (deftype gs-fogcol (uint64)
;   ()
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   ;; likely a bitfield type
;   )

(deftype gif-bank (structure)
  ((ctrl  uint32  :offset 0)
   (mode  uint32  :offset 16)
   (stat  uint32  :offset 32)
   (tag0  uint32  :offset 64)
   (tag1  uint32  :offset 80)
   (tag2  uint32  :offset 96)
   (tag3  uint32  :offset 112)
   (cnt   uint32  :offset 128)
   (p3cnt uint32  :offset 144)
   (p3tag uint32  :offset 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

(deftype gs-gif-tag (structure)
  ((qword uint128   :offset-assert 0) ;; is "qword" and inline? in game
   (dword uint64 2       :offset 0)
   (word  uint32 4       :offset 0)
   (tag   uint64          :offset 0)
   (regs  uint64          :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; gs
; (deftype gif-tag (uint128)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;; bad type dec string: [~8x] gif-tag~%
;   )

(deftype gif-packet (basic)
  ((reg-count int32     :offset-assert 4)
   (gif-tag0  uint128   :offset-assert 16)
   (args      uint64 1 :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-context (basic)
  ((orgx   int32     :offset-assert 4)
   (orgy   int32     :offset-assert 8)
   (orgz   int32     :offset-assert 12)
   (width  int32     :offset-assert 16)
   (height int32     :offset-assert 20)
   (color  int32 4 :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;;;;;;;;;;;;;;;
;; display-h
;;;;;;;;;;;;;;;

(deftype display-env (structure)
  ((pmode   uint64  :offset-assert 0)
   (smode2  uint64  :offset-assert 8)
   (dspfb   uint64  :offset-assert 16)
   (display uint64  :offset-assert 24)
   (bgcolor uint64  :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-env (structure)
  ((frame1         uint64  :offset-assert 0)
   (frame1addr     uint64  :offset-assert 8)
   (zbuf1          uint64  :offset-assert 16)
   (zbuf1addr      uint64  :offset-assert 24)
   (xyoffset1      uint64  :offset-assert 32)
   (xyoffset1addr  uint64  :offset-assert 40)
   (scissor1       uint64  :offset-assert 48)
   (scissor1addr   uint64  :offset-assert 56)
   (prmodecont     uint64  :offset-assert 64)
   (prmodecontaddr uint64  :offset-assert 72)
   (colclamp       uint64  :offset-assert 80)
   (colclampaddr   uint64  :offset-assert 88)
   (dthe           uint64  :offset-assert 96)
   (dtheaddr       uint64  :offset-assert 104)
   (test1          uint64  :offset-assert 112)
   (test1addr      uint64  :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype display-frame (basic)
  ((buffer       int32    11 :offset-assert 4) ;; no idea
   (calc-buf     basic         :offset 8)
   (vu1-buf      basic         :offset 8)
   (debug-buf    basic         :offset 36)
   (global-buf   basic         :offset 40)
   (bucket-group dma-bucket    :offset 44)
   (profile-bar  basic    2  :offset 48)
   (run-time     uint64        :offset 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype virtual-frame (structure)
  ((display      display-env  :offset-assert 0)
   (display-last display-env  :offset-assert 4)
   (gif          uint32       :offset-assert 8)
   (draw         draw-env     :offset-assert 12)
   (frame        basic        :offset-assert 16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; display-h
(deftype display (basic)
  ((display-env0                    display-env :inline :offset-assert 8)
   (display-env1                    display-env :inline :offset-assert 48)
   (display-env2                    display-env :inline :offset-assert 88)
   (gif-tag0                        uint128             :offset-assert 128)
   (draw0                           draw-env    :inline :offset-assert 144)
   (gif-tag1                        uint128             :offset-assert 272)
   (draw1                           draw-env    :inline :offset-assert 288)
   (gif-tag2                        uint128             :offset-assert 416)
   (draw2                           draw-env    :inline :offset-assert 432)
   (on-screen                       int32               :offset-assert 560)
   (last-screen                     int32               :offset-assert 564)
   ;(frames                          UNKNOWN     6       :offset-assert 568)
   (_frames-pad uint8 196)
   ;(bg-clear-color                  UNKNOWN     4       :offset-assert 760)
   (_bg-clear-color-pad uint8 8)
   (real-frame-counter              uint64              :offset-assert 776)
   (base-frame-counter              uint64              :offset-assert 784)
   (game-frame-counter              uint64              :offset-assert 792)
   (integral-frame-counter          uint64              :offset-assert 800)
   (real-integral-frame-counter     uint64              :offset-assert 808)
   (actual-frame-counter            uint64              :offset-assert 816)
   (real-actual-frame-counter       uint64              :offset-assert 824)
   (part-frame-counter              uint64              :offset-assert 832)
   (old-real-frame-counter          uint64              :offset-assert 840)
   (old-base-frame-counter          uint64              :offset-assert 848)
   (old-game-frame-counter          uint64              :offset-assert 856)
   (old-integral-frame-counter      uint64              :offset-assert 864)
   (old-real-integral-frame-counter uint64              :offset-assert 872)
   (old-actual-frame-counter        uint64              :offset-assert 880)
   (old-real-actual-frame-counter   uint64              :offset-assert 888)
   (old-part-frame-counter          uint64              :offset-assert 896)
   (time-ratio                      float               :offset-assert 904)
   (seconds-per-frame               float               :offset-assert 908)
   (frames-per-second               float               :offset-assert 912)
   (time-factor                     float               :offset-assert 916)
   (time-adjust-ratio               float               :offset-assert 920)
   )
  :method-count-assert 10
  :size-assert         #x39c
  :flag-assert         #xa0000039c
  (:methods
    (dummy-9 () none 9)
    )
  )

(define-extern *display* display)

;;;;;;;;;;;;;;;
;; file-io
;;;;;;;;;;;;;;;

;; todo
; (deftype file-stream (basic)
;   ((flags uint32  :offset-assert 4)
;    (mode  basic   :offset-assert 8)
;    (name  basic   :offset-assert 12)
;    (file  uint32  :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

(deftype file-info (basic)
  ((file-type      basic   :offset-assert 4)
   (file-name      basic   :offset-assert 8)
   (major-version  uint32  :offset-assert 12)
   (minor-version  uint32  :offset-assert 16)
   (maya-file-name basic   :offset-assert 20)
   (tool-debug     basic   :offset-assert 24)
   (mdb-file-name  basic   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;;;;;;;;;;;;;;;
;; loader-h
;;;;;;;;;;;;;;;

(deftype external-art-buffer (basic)
  ((index                      int32          :offset-assert 4)
   (other                      basic          :offset-assert 8)
   (status                     basic          :offset-assert 12)
   (locked?                    basic          :offset-assert 16)
   (frame-lock                 basic          :offset-assert 20)
   (heap                       kheap  :inline :offset-assert 32)
   (pending-load-file          basic          :offset-assert 48)
   (pending-load-file-part     int32          :offset-assert 52)
   (pending-load-file-owner    uint64         :offset-assert 56)
   (pending-load-file-priority float          :offset-assert 64)
   (load-file                  basic          :offset-assert 68)
   (load-file-part             int32          :offset-assert 72)
   (load-file-owner            uint64         :offset-assert 80)
   (load-file-priority         float          :offset-assert 88)
   (buf                        uint32         :offset-assert 92)
   (len                        int32          :offset-assert 96)
   (art-group                  basic          :offset-assert 100)
   )
  :method-count-assert 16
  :size-assert         #x68
  :flag-assert         #x1000000068
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; loader-h
(deftype spool-anim (basic)
  ((name         basic   :offset 16) ;; why?
   (index        int32   :offset-assert 20)
   (parts        int32   :offset-assert 24)
   (priority     float   :offset-assert 28)
   (owner        uint64  :offset-assert 32)
   (command-list basic   :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; loader-h
;; todo inline basics
; (deftype external-art-control (basic)
;   ((buffer               basic    2       :offset-assert 4)
;    ;(rec                  UNKNOWN    3       :offset-assert 20)
;    (_rec-pad uint8 142)
;    (spool-lock           uint64             :offset-assert 160)
;    (reserve-buffer       basic              :offset-assert 168)
;    (reserve-buffer-count int32              :offset-assert 172)
;    (active-stream        basic              :offset-assert 176)
;    (preload-stream       spool-anim :inline :offset-assert 188)
;    (last-preload-stream  spool-anim :inline :offset-assert 236)
;    )
;   :method-count-assert 17
;   :size-assert         #x118
;   :flag-assert         #x1100000118
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     )
;   )

;;;;;;;;;;;;;;
;; texture-h
;;;;;;;;;;;;;;

; ;; texture-h
; (deftype texture-id (uint32)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;; likely a bitfield type
;   )

(deftype texture-pool-segment (structure)
  ((dest uint32  :offset-assert 0)
   (size uint32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; texture-h
(deftype texture-pool (basic)
  ((top              int32                        :offset-assert 4)
   (cur              int32                        :offset-assert 8)
   (allocate-func    basic                        :offset-assert 12)
   (font-palette     int32                        :offset-assert 16)
   (segment          texture-pool-segment 4 :inline :offset-assert 20)
   (segment-near     texture-pool-segment :inline :offset 20)
   (segment-common   texture-pool-segment :inline :offset 28)
   (common-page      int32              32      :offset-assert 52)
   (common-page-mask int32                        :offset-assert 180)
   (ids              int32              126     :offset-assert 184)
   )
  :method-count-assert 23
  :size-assert         #x2b0
  :flag-assert         #x17000002b0
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    )
  )

;; texture-h
(deftype texture (basic)
  ((w            int16     :offset-assert 4)
   (h            int16     :offset-assert 6)
   (num-mips     uint8     :offset-assert 8)
   (tex1-control uint8     :offset-assert 9)
   (psm          uint8     :offset-assert 10)
   (mip-shift    uint8     :offset-assert 11)
   (clutpsm      uint16    :offset-assert 12)
   (dest         uint16 7 :offset-assert 14)
   (clutdest     uint16    :offset-assert 28)
   (width        uint8 7 :offset-assert 30)
   (name         basic     :offset-assert 40)
   (size         uint32    :offset-assert 44)
   (uv-dist      float     :offset-assert 48)
   (masks        uint32 3 :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; texture-h
(deftype texture-page-segment (structure)
  ((block-data pointer :offset-assert 0)
   (size       uint32  :offset-assert 4)
   (dest       uint32  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; texture-h
(deftype texture-page (basic)
  ((info      basic            :offset-assert 4)
   (name      basic            :offset-assert 8)
   (id        uint32           :offset-assert 12)
   (length    int32            :offset-assert 16)
   (mip0-size uint32           :offset-assert 20)
   (size      uint32           :offset-assert 24)
   (segment   texture-page-segment 3 :inline :offset-assert 28)
   (pad       uint32 16       :offset-assert 64)
   (data      uint8 :dynamic :offset-assert 128)
   )
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    )
  )

;; texture-h
(deftype texture-link (structure)
  ((next uint32  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; texture-h
(deftype texture-page-dir-entry (structure)
  ((length int16   :offset-assert 0)
   (status uint16  :offset-assert 2)
   (page   basic   :offset-assert 4)
   (link   uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; texture-h
(deftype texture-relocate-later (basic)
  ((memcpy basic                   :offset-assert 4)
   (dest   uint32                  :offset-assert 8)
   (source uint32                  :offset-assert 12)
   (move   uint32                  :offset-assert 16)
   (entry  texture-page-dir-entry  :offset-assert 20)
   (page   basic                   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; texture-h
(deftype adgif-shader (structure)
  (
   ;;(quad       UNKNOWN 5  :offset-assert 0)
   ;;(prims      UNKNOWN 10 :offset-assert 0)
   (tex0       uint64     :offset-assert 0)
   (tex1       uint64     :offset 16)
   (miptbp1    uint64     :offset 32)
   (clamp      uint64     :offset 48)
   (clamp-reg  uint64     :offset 56)
   (alpha      uint64     :offset 64)
   (link-test  uint32     :offset 8)
   (texture-id uint32     :offset 24)
   (next       uint32     :offset 40)
   (_pad uint64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; texture-h
(deftype adgif-shader-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
;;;;;;;;;;;;;;
;; level-h
;;;;;;;;;;;;;;

;; level-h
(deftype level-vis-info (basic)
  ((level              basic            :offset-assert 4)
   (from-level         basic            :offset-assert 8)
   (from-bsp           basic            :offset-assert 12)
   (flags              uint32           :offset-assert 16)
   (length             uint32           :offset-assert 20)
   (allocated-length   uint32           :offset-assert 24)
   (dictionary-length  uint32           :offset-assert 28)
   (dictionary         uint32           :offset-assert 32)
   (string-block       uint32           :offset-assert 36)
   (ramdisk            uint32           :offset-assert 40)
   (vis-bits           uint32           :offset-assert 44)
   (current-vis-string uint32           :offset-assert 48)
   (vis-string         uint8 :dynamic :offset-assert 52)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; level-h
(deftype level-load-info (basic)
  ((name-list         basic 3 :offset-assert 4)
   (index             int32     :offset-assert 16)
   (name              basic     :offset 4)
   (visname           basic     :offset 8)
   (nickname          basic     :offset 12)
   (packages          basic     :offset-assert 20)
   (sound-banks       basic     :offset-assert 24)
   (music-bank        basic     :offset-assert 28)
   (ambient-sounds    basic     :offset-assert 32)
   (mood              basic     :offset-assert 36)
   (mood-func         basic     :offset-assert 40)
   (ocean             basic     :offset-assert 44)
   (sky               basic     :offset-assert 48)
   (sun-fade          float     :offset-assert 52)
   (continues         basic     :offset-assert 56)
   (tasks             basic     :offset-assert 60)
   (priority          int32     :offset-assert 64)
   (load-commands     basic     :offset-assert 68)
   (alt-load-commands basic     :offset-assert 72)
   (bsp-mask          uint64    :offset-assert 80)
   (bsphere           sphere    :offset-assert 88)
   (buzzer            int32     :offset-assert 92)
   (bottom-height     float    :offset-assert 96) ;; meters
   (run-packages      basic     :offset-assert 100)
   (prev-level        basic     :offset-assert 104)
   (next-level        basic     :offset-assert 108)
   (wait-for-load     basic     :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x74
  :flag-assert         #x900000074
  )

;; level-h
(deftype login-state (basic)
  ((state int32      :offset-assert 4)
   (pos   uint32     :offset-assert 8)
   (elts  uint32     :offset-assert 12)
   (elt   uint32 16 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )
;; level-h
(deftype level (basic)
  ((name                      basic           :offset-assert 4)
   (load-name                 basic           :offset-assert 8)
   (nickname                  basic           :offset-assert 12)
   (index                     int32           :offset-assert 16)
   (status                    basic           :offset-assert 20)
   (other                     basic           :offset-assert 24)
   (heap                      kheap   :inline :offset-assert 32)
   (bsp                       basic           :offset-assert 48)
   (art-group                 basic           :offset-assert 52)
   (info                      basic           :offset-assert 56)
   (texture-page              basic 9       :offset-assert 60)
   (loaded-texture-page       basic 16      :offset-assert 96)
   (loaded-texture-page-count int32           :offset-assert 160)
   (foreground-sink-group     dma-foreground-sink-group 3 :inline :offset-assert 176) ;; inline basic
   (foreground-draw-engine    basic 3       :offset-assert 272)
   (entity                    basic           :offset-assert 284)
   (ambient                   basic           :offset-assert 288)
   (closest-object            basic 9       :offset-assert 292)
   (upload-size               uint32 9       :offset-assert 328)
   (level-distance            float          :offset-assert 364) ; meters
   (inside-sphere?            basic           :offset-assert 368)
   (inside-boxes?             basic           :offset-assert 372)
   (display?                  basic           :offset-assert 376)
   (meta-inside?              basic           :offset-assert 380)
   (mood                      basic           :offset-assert 384)
   (mood-func                 basic           :offset-assert 388)
   (vis-bits                  uint32          :offset-assert 392)
   (all-visible?              basic           :offset-assert 396)
   (force-all-visible?        basic           :offset-assert 400)
   (linking                   basic           :offset-assert 404)
   (vis-info                  level-vis-info 8       :offset-assert 408)
   (vis-self-index            int32           :offset-assert 440)
   (vis-adj-index             int32           :offset-assert 444)
   (vis-buffer                uint8 2048    :offset-assert 448)
   (mem-usage-block           basic           :offset-assert 2496)
   (mem-usage                 int32           :offset-assert 2500)
   (code-memory-start         uint32          :offset-assert 2504)
   (code-memory-end           uint32          :offset-assert 2508)
   (texture-mask              uint32 9       :offset-assert 2512)
   (force-inside?             basic           :offset-assert 2548)
   (pad                       uint8 56)
   )
  :method-count-assert 29
  :size-assert         #xa30
  :flag-assert         #x1d00000a30
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )




(declare-type entity-links structure)
;; level-h
(deftype level-group (basic)
  ((length          int32                :offset-assert 4)
   (entity-link     entity-links         :offset 16) ;; not sure what's going on here
   (border?         basic                :offset-assert 20)
   (vis?            basic                :offset-assert 24)
   (want-level      basic                :offset-assert 28)
   (receiving-level basic                :offset-assert 32)
   (load-commands   basic                :offset-assert 36)
   (play?           basic                :offset-assert 40)
   ; (level           UNKNOWN      3       :offset-assert 100)
   ; (data            UNKNOWN      3       :offset-assert 100)
   (level0          level        :inline :offset 96) ;; inline basic
   (level1          level        :inline :offset-assert 2704) ;; inline basic
   (level-default   level        :inline :offset-assert 5312) ;; inline basic
   (pad uint32)
   )
  :method-count-assert 27
  :size-assert         #x1ef4
  :flag-assert         #x1b00001ef4
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    )
  )

(define-extern *level* level-group)

;;;;;;;;;;;;;;;;;;
;; math-camera-h
;;;;;;;;;;;;;;;;;;

(deftype vis-gif-tag (structure)
  ((fog0  uint32  :offset-assert 0)
   (strip uint32  :offset-assert 4)
   (regs  uint32  :offset-assert 8)
   (fan   uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; math-camera-h
(deftype cull-info (structure)
  ((x-fact      float  :offset-assert 0)
   (y-fact      float  :offset-assert 4)
   (z-fact      float  :offset-assert 8)
   (cam-radius  float  :offset-assert 12)
   (cam-x       float  :offset-assert 16)
   (cam-y       float  :offset-assert 20)
   (xz-dir-ax   float  :offset-assert 24)
   (xz-dir-az   float  :offset-assert 28)
   (xz-dir-bx   float  :offset-assert 32)
   (xz-dir-bz   float  :offset-assert 36)
   (xz-cross-ab float  :offset-assert 40)
   (yz-dir-ay   float  :offset-assert 44)
   (yz-dir-az   float  :offset-assert 48)
   (yz-dir-by   float  :offset-assert 52)
   (yz-dir-bz   float  :offset-assert 56)
   (yz-cross-ab float  :offset-assert 60)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype math-camera (basic)
  ((d                          float             :offset-assert 4) ;; meters
   (f                          float             :offset-assert 8) ;; meters
   (fov                        float                :offset-assert 12) ;; deg
   (x-ratio                    float              :offset-assert 16)
   (y-ratio                    float              :offset-assert 20)
   (x-pix                      float              :offset-assert 24)
   (x-clip                     float              :offset-assert 28)
   (x-clip-ratio-in            float              :offset-assert 32)
   (x-clip-ratio-over          float              :offset-assert 36)
   (y-pix                      float              :offset-assert 40)
   (y-clip                     float              :offset-assert 44)
   (y-clip-ratio-in            float              :offset-assert 48)
   (y-clip-ratio-over          float              :offset-assert 52)
   (cull-info                  cull-info  :inline :offset-assert 56)
   (fog-start                  float             :offset-assert 120) ;; meters
   (fog-end                    float             :offset-assert 124) ;; meters
   (fog-max                    float              :offset-assert 128)
   (fog-min                    float              :offset-assert 132)
   (reset                      int32              :offset-assert 136)
   (smooth-step                float              :offset-assert 140)
   (smooth-t                   float              :offset-assert 144)
   (perspective                matrix     :inline :offset-assert 160)
   (isometric                  matrix     :inline :offset-assert 224)
   (sprite-2d                  matrix     :inline :offset-assert 288)
   (sprite-2d-hvdf             vector     :inline :offset-assert 352)
   (camera-rot                 matrix     :inline :offset-assert 368)
   (inv-camera-rot             matrix     :inline :offset-assert 432)
   (inv-camera-rot-smooth      matrix     :inline :offset-assert 496)
   (inv-camera-rot-smooth-from quaternion :inline :offset-assert 560)
   (camera-temp                matrix     :inline :offset-assert 576)
   (prev-camera-temp           matrix     :inline :offset-assert 640)
   (hmge-scale                 vector     :inline :offset-assert 704)
   (inv-hmge-scale             vector     :inline :offset-assert 720)
   (hvdf-off                   vector     :inline :offset-assert 736)
   (guard                      vector     :inline :offset-assert 752)
   (vis-gifs                   uint128    4       :offset-assert 768)
   (giftex                     uint128            :offset 768)
   (gifgr                      uint128            :offset 784)
   (giftex-trans               uint128            :offset 800)
   (gifgr-trans                uint128            :offset 816)
   (pfog0                      float              :offset-assert 832)
   (pfog1                      float              :offset-assert 836)
   (trans                      vector     :inline :offset-assert 848)
   (plane                      uint128    4       :offset-assert 864)
   (guard-plane                uint128    4       :offset-assert 928)
   (shrub-mat                  matrix     :inline :offset-assert 992)
   (fov-correction-factor      float              :offset-assert 1056)
   )
  :method-count-assert 9
  :size-assert         #x424
  :flag-assert         #x900000424
  )

(deftype fog-corrector (structure)
  ((fog-end   float  :offset-assert 0)
   (fog-start float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;;;;;;;;;;;
;; font-h
;;;;;;;;;;;

(deftype char-verts (structure)
  ((pos    uint128 4 :offset-assert 0)
   (color  uint128 4 :offset-assert 64)
   (tex-st uint128 4 :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

(deftype char-color (structure)
  ((color uint32 4 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype font-context (basic)
  ((origin     vector :inline :offset-assert 16)
   (strip-gif  vector :inline :offset-assert 32)
   (width      float          :offset-assert 48)
   (height     float          :offset-assert 52)
   (projection float          :offset-assert 56)
   (color      uint64         :offset-assert 64)
   (flags      uint32         :offset-assert 72)
   (mat        matrix         :offset-assert 76)
   (start-line uint32         :offset-assert 80)
   (scale      float          :offset-assert 84)
   )
  :method-count-assert 20
  :size-assert         #x58
  :flag-assert         #x1400000058
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    )
  )

(deftype font-work (structure)
  ((font-tmpl          dma-gif-packet :inline :offset-assert 0)
   (char-tmpl          dma-gif-packet :inline :offset-assert 32)
   (tex1-tmpl          uint64        2       :offset-assert 64)
   (small-font-lo-tmpl uint64        2       :offset-assert 80)
   (small-font-hi-tmpl uint64        2       :offset-assert 96)
   (large-font-lo-tmpl uint64        2       :offset-assert 112)
   (large-font-hi-tmpl uint64        2       :offset-assert 128)
   (size1-small        vector         :inline :offset-assert 144)
   (size2-small        vector         :inline :offset-assert 160)
   (size3-small        vector         :inline :offset-assert 176)
   (size1-large        vector         :inline :offset-assert 192)
   (size2-large        vector         :inline :offset-assert 208)
   (size3-large        vector         :inline :offset-assert 224)
   (size-st1           vector         :inline :offset-assert 240)
   (size-st2           vector         :inline :offset-assert 256)
   (size-st3           vector         :inline :offset-assert 272)
   (save               vector         :inline :offset-assert 288)
   (save-color         uint128        4       :offset-assert 304)
   (current-verts      char-verts     :inline :offset-assert 368)
   (src-verts          char-verts     :inline :offset-assert 560)
   (dest-verts         char-verts     :inline :offset-assert 752)
   (justify            uint128        64      :offset-assert 944)
   (color-shadow       vector4w       :inline :offset-assert 1968)
   (color-table        uint128        64      :offset-assert 1984)
   (last-color         uint64                 :offset-assert 3008)
   (save-last-color    uint64                 :offset-assert 3016)
   (buf                basic                  :offset-assert 3024)
   (str-ptr            uint32                 :offset-assert 3028)
   (flags              uint32                 :offset-assert 3032)
   (reg-save           uint32        5       :offset-assert 3036)
   )
  :method-count-assert 9
  :size-assert         #xbf0
  :flag-assert         #x900000bf0
  )

;;;;;;;;;;;;;
;; decomp-h
;;;;;;;;;;;;;

(deftype decomp-work (structure)
  ((buffer0      uint8 2048 :offset-assert 0)
   (buffer1      uint8 2048 :offset-assert 2048)
   (indices      uint16 2048 :offset-assert 4096)
   (temp-indices uint16 2048 :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

;;;;;;;;;;;;;
;; connect
;;;;;;;;;;;;;

(deftype connectable (structure)
  ((next0 connectable  :offset-assert 0)
   (prev0 connectable  :offset-assert 4)
   (next1 connectable  :offset-assert 8)
   (prev1 connectable  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype connection (connectable)
  ((param0 basic         :offset-assert 16)
   (param1 basic         :offset-assert 20)
   (param2 basic         :offset-assert 24)
   (param3 basic         :offset-assert 28)
   (quad   uint128     2 :offset 0)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  ;; field param1 is a basic loaded with a signed load field param2 is a basic loaded with a signed load field param3 is a basic loaded with a signed load 
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

; ;; connect
; (deftype engine (basic)
;   ()
;   :method-count-assert 24
;   :size-assert         #x80
;   :flag-assert         #x1800000080
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

;;;;;;;;;;;;;;;;
;; text-h
;;;;;;;;;;;;;;;;

(deftype game-text (structure)
  ((id   uint32  :offset-assert 0)
   (text string  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype game-text-info (basic)
  ((length      int32            :offset-assert 4)
   (language-id int32            :offset-assert 8)
   (group-name  string           :offset-assert 12)
   (data        game-text :dynamic :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;;;;;;;;;;;;;;;;
;; settings-h
;;;;;;;;;;;;;;;;

;; settings-h
;; was manually done
(deftype setting-data (structure)
  ((border-mode basic :offset-assert 0)
   (sfx-volume  float :offset-assert 4)
   (music-volume float :offset-assert 8)
   (dialog-volume float :offset-assert 12)
   (process-mask uint32 :offset-assert 16)
   (common-page int32 :offset-assert 20)
   (language int64 :offset-assert 24)
   (screenx int32 :offset-assert 32)
   (screeny int32 :offset-assert 36)
   (vibration basic :offset-assert 40)
   (play-hints basic :offset-assert 44)
   (movie basic :offset-assert 48) ;; special print
   (talking basic :offset-assert 52) ;; special print
   (spooling basic :offset-assert 56) ;; special print
   (hint basic :offset-assert 60) ;; special print
   (ambient basic :offset-assert 64) ;; special print
   (video-mode basic :offset-assert 68)
   (aspect-ratio basic :offset-assert 72)
   (sound-flava uint8 :offset-assert 76)
   (auto-save basic :offset-assert 80)
   (music-volume-movie float :offset-assert 84)
   (sfx-volume-movie float :offset-assert 88)
   (music basic :offset-assert 92)
   (bg-r float :offset-assert 96)
   (bg-g float :offset-assert 100)
   (bg-b float :offset-assert 104)
   (bg-a float :offset-assert 108)
   (bg-a-speed float :offset-assert 112)
   (bg-a-force float :offset-assert 116)
   (allow-progress basic :offset-assert 120)
   (allow-pause basic :offset-assert 124)
   (sound-flava-priority float :offset-assert 128)
   (ocean-off basic :offset-assert 132)
   (allow-look-around basic :offset-assert 136)
   (ambient-volume float :offset-assert 140)
   (ambient-volume-movie float :offset-assert 144)
   (dialog-volume-hint float :offset-assert 148)
   (dummy uint32 11 :offset-assert 152)
   
   )
  :method-count-assert 10
  :size-assert         #xc4
  :flag-assert         #xa000000c4
  (:methods
    (dummy-9 () none 9)
    )
  )

;; settings-h
(deftype setting-control (basic)
  ((current setting-data :inline :offset-assert 16)
   (target  setting-data :inline :offset-assert 224)
   (default setting-data :inline :offset-assert 432)
   (engine  basic                :offset-assert 628)
   )
  :method-count-assert 14
  :size-assert         #x278
  :flag-assert         #xe00000278
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

(deftype scf-time (structure)
  ((stat   uint8  :offset-assert 0)
   (second uint8  :offset-assert 1)
   (minute uint8  :offset-assert 2)
   (hour   uint8  :offset-assert 3)
   (week   uint8  :offset-assert 4)
   (day    uint8  :offset-assert 5)
   (month  uint8  :offset-assert 6)
   (year   uint8  :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(define-extern *setting-control* setting-control)

;;;;;;;;;;;;;;;;;
;; capture
;;;;;;;;;;;;;;;;;

(deftype gs-store-image-packet (structure)
  ((vifcode        uint32 4 :offset-assert 0)
   (giftag         uint128   :offset-assert 16)
   (bitbltbuf      uint64    :offset-assert 32)
   (bitbltbuf-addr uint64    :offset-assert 40)
   (trxpos         uint64    :offset-assert 48)
   (trxpos-addr    uint64    :offset-assert 56)
   (trxreg         uint64    :offset-assert 64)
   (trxreg-addr    uint64    :offset-assert 72)
   (finish         uint64    :offset-assert 80)
   (finish-addr    uint64    :offset-assert 88)
   (trxdir         uint64    :offset-assert 96)
   (trxdir-addr    uint64    :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;;;;;;;;;;;;;;;;;;
;; memory-usage-h
;;;;;;;;;;;;;;;;;;

(deftype memory-usage-info (structure)
  ((name  basic  :offset-assert 0)
   (count int32  :offset-assert 4)
   (used  int32  :offset-assert 8)
   (total int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype memory-usage-block (basic)
  ((work-bsp basic       :offset-assert 4)
   (length   int32       :offset-assert 8)
   (data     memory-usage-info 109 :inline :offset-assert 16) ;; guess
   )
  :method-count-assert 12
  :size-assert         #x6e0
  :flag-assert         #xc000006e0
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;;;;;;;;;;;;;;
;; texture
;;;;;;;;;;;;;;

; ;; texture
; (deftype texture-page-dir (basic)
;   ()
;   :method-count-assert 10
;   :size-assert         #x14
;   :flag-assert         #xa00000014
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

;;;;;;;;;;;;;;
;; main-h
;;;;;;;;;;;;;;

(deftype frame-stats (structure)
  ((field-time uint64 2 :offset-assert 0)
   (field      int32     :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype screen-filter (basic)
  ((draw? basic   :offset-assert 4)
   (color uint32  :offset-assert 8)
   )
  :method-count-assert 10
  :size-assert         #xc
  :flag-assert         #xa0000000c
  (:methods
    (dummy-9 () none 9)
    )
  )

(define-extern *dproc* process)

;;;;;;;;;;;;;;
;; mspace-h
;;;;;;;;;;;;;;

(deftype joint (basic)
  ((name      basic          :offset-assert 4)
   (number    int32          :offset-assert 8)
   (parent    basic          :offset-assert 12)
   (bind-pose matrix :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; mspace-h
(deftype bone-cache (structure)
  ((bone-matrix   uint32  :offset-assert 0)
   (parent-matrix uint32  :offset-assert 4)
   (dummy         uint32  :offset-assert 8)
   (frame         uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; mspace-h
(deftype bone (structure)
  ((transform matrix     :inline :offset-assert 0)
   (position  vector     :inline :offset 48) ;; overlays the matrix
   (scale     vector     :inline :offset-assert 64)
   (cache     bone-cache :inline :offset-assert 80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; mspace-h
(deftype skeleton (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; mspace-h
(deftype cspace (structure)
  ((parent    cspace  :offset-assert 0)
   (joint     basic   :offset-assert 4)
   (joint-num int16   :offset-assert 8)
   (geo       basic   :offset-assert 12)
   (bone      bone    :offset-assert 16)
   (param0    basic   :offset-assert 20)
   (param1    basic   :offset-assert 24)
   (param2    basic   :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  ;; field param1 is a basic loaded with a signed load field param2 is a basic loaded with a signed load 
  (:methods
    (dummy-9 () none 9)
    )
  )

;; mspace-h
(deftype cspace-array (inline-array-class)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;;;;;;;;;;;;;;;
;; drawable-h
;;;;;;;;;;;;;;;

;; drawable-h
(deftype drawable (basic)
  ((id      int16          :offset-assert 4)
   (bsphere vector :inline :offset-assert 16)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; drawable-h
(deftype drawable-error (drawable)
  ((name    basic          :offset-assert 32)
   )
  :method-count-assert 18
  :size-assert         #x24
  :flag-assert         #x1200000024
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawable-inline-array-h
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-inline-array (drawable)
  ((length  int16          :offset 6) ;; this is kinda weird.
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;;;;;;;;;;;;;;;
;; draw-node-h
;;;;;;;;;;;;;;;

(deftype draw-node (drawable)
  ((child-count uint8          :offset 6)
   (flags       uint8          :offset 7)
   (child       uint32         :offset 8)
   (distance    float          :offset 12)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  ;; field distance is a float printed as hex? 
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

; ;; draw-node-h
; (deftype draw-node-dma (structure)
;   ((banka UNKNOWN 32 :offset-assert 4)
;    (bankb UNKNOWN 32 :offset-assert 1028)
;    )
;   :method-count-assert 9
;   :size-assert         #x800
;   :flag-assert         #x900000800
;   )

;;;;;;;;;;;;;;;;;;;;;
;; drawable-actor-h
;;;;;;;;;;;;;;;;;;;;;

(deftype drawable-actor (drawable)
  ((actor   basic          :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;;;;;;;;;;;;;;;;;;;;;;
;; drawable-ambient-h
;;;;;;;;;;;;;;;;;;;;;;

;; drawable-ambient-h
(deftype drawable-ambient (drawable)
  ((ambient basic          :offset 8)
   )
  :method-count-assert 19
  :size-assert         #x20
  :flag-assert         #x1300000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    )
  )

;; drawable-ambient-h
(deftype level-hint (process)
  ((text-id-to-display uint32  :offset-assert 112)
   (sound-to-play      basic   :offset-assert 116)
   (trans              vector  :offset-assert 120)
   (sound-id           uint32  :offset-assert 124)
   (mode               basic   :offset-assert 128)
   (total-time         uint64  :offset-assert 136)
   (total-off-time     uint64  :offset-assert 144)
   (last-time          uint64  :offset-assert 152)
   (voicebox           uint64  :offset-assert 160)
   )
  :heap-base #x40
  :method-count-assert 16
  :size-assert         #xa8
  :flag-assert         #x10004000a8
  ;; inherited inpspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )


; ;; drawable-ambient-h
(deftype ambient-list (structure)
  ((num-items int32        :offset-assert 0)
   (items     uint32 2048 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2004
  :flag-assert         #x900002004
  )

;;;;;;;;;;;;;;;;;;
;; hint-control-h
;;;;;;;;;;;;;;;;;;

;; hint-control-h
(deftype level-hint-control (structure)
  ((delay-before-playing        uint64  :offset-assert 0)
   (id                          uint32  :offset-assert 8)
   (num-attempts-before-playing int8    :offset-assert 12)
   (num-success-before-killing  int8    :offset-assert 13)
   (num-attempts                int8    :offset-assert 14)
   (num-success                 int8    :offset-assert 15)
   (start-time                  uint64  :offset-assert 16)
   (last-time-called            uint64  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; hint-control-h
(deftype task-hint-control (structure)
  ((task  uint8   :offset-assert 0)
   (delay uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; hint-control-h
(deftype task-hint-control-group (structure)
  ((tasks basic  :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


;;;;;;;;;;;;;;;;
;; generic-h
;;;;;;;;;;;;;;;;

;; todo
(deftype gsf-vertex (structure)
  ((data uint32   8       :offset-assert 0)
   (byte uint8   32      :offset 0)
   (quad uint128   2       :offset 0)
   (vt   qword     :inline :offset 0)
   (pos  vector3s  :inline :offset 0)
   (tex  vector2uh :inline :offset 12)
   (nrm  vector3s  :inline :offset 16)
   (nc   qword     :inline :offset 16)
   (clr  vector4ub :inline :offset 28)
   (dtex vector2uh :inline :offset 16)
   (dclr vector4ub :inline :offset 20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; generic-h
; (deftype gsf-vertex-array (UNKNOWN)
;   ((vtx UNKNOWN :dynamic :offset-assert 0)
;    )
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   )

; ;; generic-h
(deftype gsf-fx-vertex (structure)
  ((clr vector4ub :inline :offset-assert 0)
   (tex vector2uh :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


; ;; generic-h
; (deftype gsf-fx-vertex-array (UNKNOWN)
;   ((data UNKNOWN :dynamic :offset-assert 0)
;    )
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   )

; ;; generic-h
(deftype gsf-header (structure)
  ((num-strips  uint8      :offset-assert 0)
   (expanded    uint8      :offset-assert 1)
   (num-dps     uint16     :offset-assert 2)
   (num-vtxs    uint16     :offset-assert 4)
   (strip-table uint8 10 :offset-assert 6)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-h
(deftype gsf-ik (structure)
  ((index   uint8  :offset-assert 0)
   (no-kick uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; generic-h
(deftype gsf-info (structure)
  ((ptr-iks   uint32  :offset-assert 0)
   (ptr-verts uint32  :offset-assert 4)
   (ptr-fx    uint32  :offset-assert 8)
   (dummy2    uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-h
(deftype gsf-buffer (structure)
  ((data      uint8    8192     :offset-assert 0)
   (info      gsf-info   :inline  :offset 0)
   (header    gsf-header :inline  :offset 16)
   (work-area uint8    :dynamic :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x2000
  :flag-assert         #x900002000
  )

;; generic-h
(deftype generic-frag (structure)
  ((start-pos uint16  :offset-assert 0)
   (end-pos   uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; generic-h
(deftype generic-strip (structure)
  ((pos uint16  :offset-assert 0)
   (len uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; generic-h
(deftype generic-envmap-saves (structure)
  ((index-mask vector4w :inline :offset-assert 0)
   (verts      uint128  12     :offset-assert 16)
   (kicks      uint128  4       :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;; generic-h
(deftype generic-interp-job (structure)
  ((job-type uint16  :offset-assert 0)
   (num      uint16  :offset-assert 2)
   (first    uint16  :offset-assert 4)
   (pad      uint16  :offset-assert 6)
   (ptr-data uint32  :offset-assert 8)
   (morph-z  uint16  :offset-assert 12)
   (morph-w  uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-h
(deftype generic-saves (structure)
  ((ptr-dma           uint32                       :offset-assert 0)
   (ptr-vtxs          uint32                       :offset-assert 4)
   (ptr-clrs          uint32                       :offset-assert 8)
   (ptr-texs          uint32                       :offset-assert 12)
   (ptr-env-clrs      uint32                       :offset-assert 16)
   (ptr-env-texs      uint32                       :offset-assert 20)
   (cur-outbuf        uint32                       :offset-assert 24)
   (ptr-fx-buf        uint32                       :offset-assert 28)
   (xor-outbufs       uint32                       :offset-assert 32)
   (num-dps           uint32                       :offset-assert 36)
   (qwc               uint32                       :offset-assert 40)
   (gsf-buf           gsf-buffer                   :offset-assert 44)
   (ptr-shaders       uint32                       :offset-assert 48)
   (ptr-env-shader    uint32                       :offset-assert 52)
   (is-envmap         uint32                       :offset-assert 56)
   (basep             uint32                       :offset-assert 60)
   (ptr-interp-job    generic-interp-job           :offset-assert 64)
   (gifbuf-adr        uint32                       :offset-assert 68)
   (inbuf-adr         uint32                       :offset-assert 72)
   (fade-val          uint32                       :offset-assert 76)
   (time-of-day-color uint32                       :offset-assert 80)
   (to-vu0-waits      uint32                       :offset-assert 84)
   (to-spr-waits      uint32                       :offset-assert 88)
   (from-spr-waits    uint32                       :offset-assert 92)
   (envmap            generic-envmap-saves :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

;; generic-h
(deftype generic-gif-tag (structure)
  ((data       uint32 4       :offset-assert 0)
   (qword      qword   :inline :offset 0)
   (fan-prim   uint32          :offset 0)
   (str-prim   uint32          :offset 4)
   (regs       uint32          :offset 8)
   (num-strips uint32          :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-h
(deftype ad-cmd (structure)
  ((word uint32 4 :offset-assert 0)
   (quad uint128   :offset 0)
   (data uint64    :offset 0)
   (cmds uint64    :offset 8)
   (cmd  uint8     :offset 8)
   (x    uint32    :offset 0)
   (y    uint32    :offset 4)
   (z    uint32    :offset 8)
   (w    uint32    :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-h
(deftype generic-envmap-consts (structure)
  ((consts vector          :inline :offset-assert 0)
   (strgif generic-gif-tag :inline :offset-assert 16)
   (colors vector4w        :inline :offset-assert 32)
   (shader adgif-shader    :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; generic-h
(deftype generic-consts (structure)
  ((dma-header        dma-packet            :inline :offset-assert 0)
   (vif-header        uint32               4       :offset-assert 16)
   (dma-ref-vtxs      dma-packet            :inline :offset-assert 32)
   (dma-cnt-call      dma-packet            :inline :offset-assert 48)
   (matrix            matrix                :inline :offset-assert 64)
   (base-strgif       generic-gif-tag       :inline :offset-assert 128)
   (alpha-opaque      ad-cmd                :inline :offset-assert 144)
   (alpha-translucent ad-cmd                :inline :offset-assert 160)
   (ztest-normal      ad-cmd                :inline :offset-assert 176)
   (ztest-opaque      ad-cmd                :inline :offset-assert 192)
   (adcmd-offsets     uint8               16      :offset-assert 208)
   ;;(adcmds            UNKNOWN               4       :offset-assert 144)
   (stcycle-tag       uint32                        :offset-assert 224)
   (unpack-vtx-tag    uint32                        :offset-assert 228)
   (unpack-clr-tag    uint32                        :offset-assert 232)
   (unpack-tex-tag    uint32                        :offset-assert 236)
   (mscal-tag         uint32                        :offset-assert 240)
   (flush-tag         uint32                        :offset-assert 244)
   (reset-cycle-tag   uint32                        :offset-assert 248)
   (dummy0            uint32                        :offset-assert 252)
   (dma-tag-cnt       uint64                        :offset-assert 256)
   (envmap            generic-envmap-consts :inline :offset-assert 272)
   (light-consts      vector                :inline :offset-assert 400)
   (texture-offset    uint16               8       :offset-assert 416)
   )
  :method-count-assert 9
  :size-assert         #x1b0
  :flag-assert         #x9000001b0
  )

;; generic-h
(deftype generic-storage (structure)
  ((data uint128 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;;;;;;;;;;;;;
;; lights-h
;;;;;;;;;;;;;

;; lights-h
(deftype vu-lights (structure)
  ((direction uint128 3       :offset-assert 0)
   (color     uint128 3       :offset-assert 48)
   (ambient   vector  :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; lights-h
(deftype light (structure)
  ((direction  vector :inline :offset-assert 0)
   (color      rgbaf  :inline :offset-assert 16)
   (levels     vector :inline :offset-assert 32)
   (level      float          :offset 32)
   (sort-level float          :offset 36)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; lights-h
(deftype light-ellipse (structure)
  ((matrix              matrix :inline :offset-assert 0)
   (color               rgbaf  :inline :offset-assert 64)
   (name                basic          :offset 12)
   (decay-start         float          :offset 28)
   (ambient-point-ratio float          :offset 44)
   (level               float          :offset 60)
   (func-symbol         basic          :offset 76)
   (func                basic          :offset 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; lights-h
(deftype light-array (array)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; lights-h
(deftype light-volume (basic)
  ((light-array basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; lights-h
(deftype light-volume-sphere (light-volume)
  ((bsphere     sphere :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; lights-h
(deftype light-volume-planes (light-volume)
  ((planes      vertical-planes  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; todo
; (deftype light-volume-array (array)
;   ((type             basic  :offset-assert 0)
;    (length           int32  :offset-assert 4)
;    (allocated-length int32  :offset-assert 8)
;    (content-type     basic  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

;; lights-h
(deftype light-group (structure)
  ((dir0 light :inline :offset-assert 0)
   (dir1 light :inline :offset-assert 48)
   (dir2 light :inline :offset-assert 96)
   (ambi light :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

;;;;;;;;;;;
;; ocean-h
;;;;;;;;;;;

;; ocean-h
(deftype ocean-corner (structure)
  ((bsphere      sphere  :inline :offset-assert 0)
   (start-corner vector  :inline :offset-assert 16)
   (y-scales     vector  :inline :offset-assert 32)
   (alphas       vector  :inline :offset-assert 48)
   (colors       uint32 4       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; ocean-h
(deftype ocean-wave-info (structure)
  ((frequency  float  :offset-assert 0)
   (amplitude  float  :offset-assert 4)
   (wave-speed float  :offset-assert 8)
   (angle      float  :offset-assert 12)
   (kx         float  :offset-assert 16)
   (ky         float  :offset-assert 20)
   (w          float  :offset-assert 24)
   (flags      int32  :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; ocean-h
(deftype ocean-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; ocean-h
(deftype ocean-spheres (structure)
  ((spheres uint128 36 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; ocean-h
(deftype ocean-colors (structure)
  ((colors uint32 2548 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x27d0
  :flag-assert         #x9000027d0
  )

;; ocean-h
(deftype ocean-mid-mask (structure)
  ((mask  uint8 8 :offset-assert 0)
   (dword uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; ocean-h
(deftype ocean-mid-indices (basic)
  ((data uint16 36 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; ocean-h
(deftype ocean-mid-masks (basic)
  ((data uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; ocean-h
(deftype ocean-trans-mask (structure)
  ((mask uint16 4 :offset-assert 0)
   (word uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; ocean-h
(deftype ocean-trans-index (structure)
  ((parent int16  :offset-assert 0)
   (child  int16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; ocean-h
(deftype ocean-trans-indices (basic)
  ((data uint32 2304 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x2404
  :flag-assert         #x900002404
  )

;; ocean-h
(deftype ocean-near-index (structure)
  ((data uint16 16 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; ocean-h
(deftype ocean-near-indices (basic)
  ((data uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; ocean-h
(deftype ocean-near-colors (structure)
  ((color0 vector :inline :offset-assert 0)
   (color1 vector :inline :offset-assert 16)
   (color2 vector :inline :offset-assert 32)
   (color3 vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; ocean-h
(deftype ocean-map (basic)
  ((start-corner        vector        :inline :offset-assert 16)
   (far-color           vector        :inline :offset-assert 32)
   (ocean-spheres       ocean-spheres         :offset-assert 48)
   (ocean-colors        ocean-colors          :offset-assert 52)
   (ocean-mid-indices   basic                 :offset-assert 56)
   (ocean-trans-indices basic                 :offset-assert 60)
   (ocean-near-indices  basic                 :offset-assert 64)
   (ocean-mid-masks     basic                 :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; ocean-h
(deftype ocean-trans-strip (structure)
  ((verts uint128 10 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; ocean-h
(deftype ocean-trans-strip-array (structure)
  ((data ocean-trans-strip 4 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

;; ocean-h
(deftype ocean-wave-data (structure)
  ((data uint8 1024 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

; ;; ocean-h
; (deftype ocean-wave-frames (structure)
;   ((frame UNKNOWN 64 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x0
;   :flag-assert         #x900010000
;   )

; ;; ocean-h
; (deftype ocean-work (basic)
;   ((deltas             vector  :inline :offset-assert 16)
;    (map-min            vector  :inline :offset-assert 32)
;    (map-max            vector  :inline :offset-assert 48)
;    (interp             vector  :inline :offset-assert 64)
;    (corner-array       UNKNOWN 25      :offset-assert 80)
;    (corner-count       int32           :offset-assert 2080)
;    (temp-vecs          UNKNOWN 4       :offset-assert 2096)
;    (mid-mask-ptrs      UNKNOWN 36      :offset-assert 2160)
;    (mid-camera-masks   UNKNOWN 36      :offset-assert 2304)
;    (trans-mask-ptrs    UNKNOWN 64      :offset-assert 2592)
;    (trans-camera-masks UNKNOWN 16      :offset-assert 2848)
;    (trans-temp-masks   UNKNOWN 16      :offset-assert 2976)
;    (near-mask-indices  UNKNOWN 16      :offset-assert 3104)
;    (mid-minx           uint8           :offset-assert 3136)
;    (mid-maxx           uint8           :offset-assert 3137)
;    (mid-minz           uint8           :offset-assert 3138)
;    (mid-maxz           uint8           :offset-assert 3139)
;    (near-minx          uint8           :offset-assert 3140)
;    (near-maxx          uint8           :offset-assert 3141)
;    (near-minz          uint8           :offset-assert 3142)
;    (near-maxz          uint8           :offset-assert 3143)
;    (temp-minx          uint8           :offset-assert 3144)
;    (temp-maxx          uint8           :offset-assert 3145)
;    (temp-minz          uint8           :offset-assert 3146)
;    (temp-maxz          uint8           :offset-assert 3147)
;    )
;   :method-count-assert 9
;   :size-assert         #xc4c
;   :flag-assert         #x900000c4c
;   )

;; ocean-h
(deftype ocean-vu0-work (structure)
  ((scales      vector    :inline :offset-assert 0)
   (mask-hi     vector4w  :inline :offset-assert 16)
   (mask-lo     vector4w  :inline :offset-assert 32)
   (lights      vu-lights :inline :offset-assert 48)
   (wait-to-vu0 uint32            :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xa4
  :flag-assert         #x9000000a4
  )

;; ocean-h
(deftype ocean-texture-constants (structure)
  ((giftag    qword    :inline :offset-assert 0)
   (buffers   vector4w :inline :offset-assert 16)
   (dests     vector4w :inline :offset-assert 32)
   (start     vector   :inline :offset-assert 48)
   (offsets   vector   :inline :offset-assert 64)
   (constants vector   :inline :offset-assert 80)
   (cam-nrm   vector   :inline :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; ocean-h
(deftype ocean-texture-work (structure)
  ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
   (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
   (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; ocean-h
(deftype ocean-mid-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (col vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; ocean-h
(deftype ocean-mid-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (drw-fan        qword        :inline :offset-assert 96)
   (env-fan        qword        :inline :offset-assert 112)
   (drw-adgif      qword        :inline :offset-assert 128)
   (drw-texture    adgif-shader :inline :offset-assert 144)
   (drw-strip-0    qword        :inline :offset-assert 224)
   (drw-strip-1    qword        :inline :offset-assert 240)
   (env-adgif      qword        :inline :offset-assert 256)
   (env-texture    adgif-shader :inline :offset-assert 272)
   (env-strip      qword        :inline :offset-assert 352)
   (env-color      vector       :inline :offset-assert 368)
   (index-table    uint128      8       :offset-assert 384)
   (pos0           vector       :inline :offset-assert 512)
   (pos1           vector       :inline :offset-assert 528)
   (pos2           vector       :inline :offset-assert 544)
   (pos3           vector       :inline :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; ocean-h
(deftype ocean-mid-upload (structure)
  ((rot    matrix  :inline :offset-assert 0)
   (matrix matrix  :inline :offset-assert 64)
   (colors uint128 108     :offset-assert 128)
   (masks  uint128 2       :offset-assert 1856)
   )
  :method-count-assert 9
  :size-assert         #x760
  :flag-assert         #x900000760
  )

;; ocean-h
(deftype ocean-mid-upload2 (structure)
  ((rot    matrix   :inline :offset-assert 0)
   (matrix matrix   :inline :offset-assert 64)
   (count  vector4w :inline :offset-assert 128)
   (tex0   vector   :inline :offset-assert 144)
   (tex1   vector   :inline :offset-assert 160)
   (tex2   vector   :inline :offset-assert 176)
   (tex3   vector   :inline :offset-assert 192)
   (clr0   vector   :inline :offset-assert 208)
   (clr1   vector   :inline :offset-assert 224)
   (clr2   vector   :inline :offset-assert 240)
   (clr3   vector   :inline :offset-assert 256)
   (verts  uint128  18      :offset-assert 272)
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )

;; ocean-h
(deftype ocean-mid-work (structure)
  ((env0    vector  :inline :offset-assert 0)
   (env1    vector  :inline :offset-assert 16)
   (env2    vector  :inline :offset-assert 32)
   (hmg0    vector  :inline :offset-assert 48)
   (hmg1    vector  :inline :offset-assert 64)
   (hmg2    vector  :inline :offset-assert 80)
   (indices uint128 16      :offset-assert 96)
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

;; ocean-h
(deftype ocean-near-constants (structure)
  ((hmge-scale     vector       :inline :offset-assert 0)
   (inv-hmge-scale vector       :inline :offset-assert 16)
   (hvdf-offset    vector       :inline :offset-assert 32)
   (fog            vector       :inline :offset-assert 48)
   (constants      vector       :inline :offset-assert 64)
   (constants2     vector       :inline :offset-assert 80)
   (constants3     vector       :inline :offset-assert 96)
   (constants4     vector       :inline :offset-assert 112)
   (drw-fan        qword        :inline :offset-assert 128)
   (drw2-fan       qword        :inline :offset-assert 144)
   (env-fan        qword        :inline :offset-assert 160)
   (drw-adgif      qword        :inline :offset-assert 176)
   (drw-texture    adgif-shader :inline :offset-assert 192)
   (drw-strip      qword        :inline :offset-assert 272)
   (env-adgif      qword        :inline :offset-assert 288)
   (env-texture    adgif-shader :inline :offset-assert 304)
   (env-strip      qword        :inline :offset-assert 384)
   (env-color      vector       :inline :offset-assert 400)
   (drw2-adgif     qword        :inline :offset-assert 416)
   (drw2-tex0      qword        :inline :offset-assert 432)
   (drw2-frame     qword        :inline :offset-assert 448)
   (drw2-strip     qword        :inline :offset-assert 464)
   (drw3-adgif     qword        :inline :offset-assert 480)
   (drw3-frame     qword        :inline :offset-assert 496)
   (index-table    uint128      4       :offset-assert 512)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; ocean-h
(deftype ocean-near-upload (structure)
  ((rot          matrix            :inline :offset-assert 0)
   (matrix       matrix            :inline :offset-assert 64)
   (masks        uint128           2       :offset-assert 128)
   (start-height vector4w          :inline :offset-assert 160)
   (start-st     vector            :inline :offset-assert 176)
   (near-colors  ocean-near-colors :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; ocean-h
(deftype ocean-near-vertex (structure)
  ((stq vector :inline :offset-assert 0)
   (clr vector :inline :offset-assert 16)
   (pos vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; ocean-h
(deftype ocean-near-work (structure)
  ((verts-ptr vector  :inline :offset-assert 0)
   (indices   uint128 16      :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;;;;;;;;;;
;; sky-h
;;;;;;;;;;

;; sky-h
(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert 0)
   (snapshot2   int32  :offset-assert 4)
   (morph-start float  :offset-assert 8)
   (morph-end   float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sky-h
(deftype sky-color-day (structure)
  ((hour uint128 24 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; sky-h
(deftype sky-circle-data (structure)
  ((data uint128 17 :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;; sky-h
(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert 0)
   (pos            vector  :inline :offset 0)
   (r-sun          float           :offset 16)
   (r-halo         float           :offset 20)
   (r-aurora       float           :offset 24)
   (c-sun-start    uint32          :offset 32)
   (c-sun-end      uint32          :offset 48)
   (c-halo-start   uint32          :offset 36)
   (c-halo-end     uint32          :offset 52)
   (c-aurora-start uint32          :offset 40)
   (c-aurora-end   uint32          :offset 56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; sky-h
(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert 0)
   (pos   vector  :inline :offset 0)
   (scale vector  :inline :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; sky-h
(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert 0)
   (tilt      float  :offset-assert 4)
   (rise      float  :offset-assert 8)
   (dist      float  :offset-assert 12)
   (min-halo  float  :offset-assert 16)
   (max-halo  float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; sky-h
(deftype sky-upload-data (basic)
  (
   ;(data   UNKNOWN         27      :offset-assert 16)
   (circle sky-circle-data :inline :offset-assert 16)
   (sun    sky-sun-data 2 :inline       :offset-assert 288)
   (moon   sky-moon-data   :inline :offset-assert 416)
   (data   uint128         27      :offset 16)
   )
  :method-count-assert 9
  :size-assert         #x1c0
  :flag-assert         #x9000001c0
  )

; ;; sky-h
; (deftype sky-parms (basic)
;   ((orbit             UNKNOWN         3       :offset-assert 4)
;    (upload-data       sky-upload-data :inline :offset-assert 116)
;    (sun-lights        light-group     :inline :offset-assert 560)
;    (moon-lights       light-group     :inline :offset-assert 752)
;    (default-lights    light-group     :inline :offset-assert 944)
;    (default-vu-lights vu-lights       :inline :offset-assert 1136)
;    )
;   :method-count-assert 9
;   :size-assert         #x4e0
;   :flag-assert         #x9000004e0
;   )

;; sky-h
(deftype sky-tng-data (basic)
  ((giftag-base  qword   :inline :offset-assert 16)
   (giftag-roof  qword   :inline :offset-assert 32)
   (giftag-ocean qword   :inline :offset-assert 48)
   (fog          vector  :inline :offset-assert 64)
   (sky          uint32 8       :offset-assert 80)
   (time         float           :offset-assert 112)
   (off-s-0      uint16          :offset-assert 116)
   (off-t-0      uint16          :offset-assert 118)
   (off-s-1      uint16          :offset-assert 120)
   (off-t-1      uint16          :offset-assert 122)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

;; sky-h
(deftype sky-work (structure)
  ((adgif-tmpl dma-gif-packet :inline :offset-assert 0)
   (draw-tmpl  dma-gif-packet :inline :offset-assert 32)
   (blend-tmpl dma-gif-packet :inline :offset-assert 64)
   (sky-data   uint128        5       :offset-assert 96)
   (cloud-data uint128        5       :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; sky-h
(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert 0)
   (stq vector :inline :offset-assert 16)
   (col vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; mood-h
(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert 0)
   (fog-dists   vector :inline :offset-assert 16)
   (fog-start   float         :offset 16) ;; meters
   (fog-end     float         :offset 20) ;;meters
   (fog-max     float          :offset 24)
   (fog-min     float          :offset 28)
   (erase-color vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

; ;; mood-h
; (deftype mood-fog-table (structure)
;   ((data UNKNOWN 8 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

;; mood-h
(deftype mood-lights (structure)
  ((direction vector :inline :offset-assert 0)
   (lgt-color vector :inline :offset-assert 16)
   (prt-color vector :inline :offset-assert 32)
   (amb-color vector :inline :offset-assert 48)
   (shadow    vector :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; mood-h
; (deftype mood-lights-table (structure)
;   ((data UNKNOWN 8 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x280
;   :flag-assert         #x900000280
;   )

;; mood-h
(deftype mood-sun (structure)
  ((sun-color vector :inline :offset-assert 0)
   (env-color vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; mood-h
; (deftype mood-sun-table (structure)
;   ((data UNKNOWN 8 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x100
;   :flag-assert         #x900000100
;   )

; ;; mood-h
; (deftype mood-context (basic)
;   ((mood-fog-table       mood-fog-table            :offset-assert 4)
;    (mood-lights-table    mood-lights-table         :offset-assert 8)
;    (mood-sun-table       mood-sun-table            :offset-assert 12)
;    (fog-interp           sky-color-day             :offset-assert 16)
;    (palette-interp       sky-color-day             :offset-assert 20)
;    (sky-texture-interp   sky-color-day             :offset-assert 24)
;    (current-fog          mood-fog          :inline :offset-assert 32)
;    (current-sun          mood-sun          :inline :offset-assert 80)
;    (current-prt-color    vector            :inline :offset-assert 112)
;    (current-shadow       vector            :inline :offset-assert 128)
;    (current-shadow-color vector            :inline :offset-assert 144)
;    (light-group          UNKNOWN           8       :offset-assert 160)
;    (times                UNKNOWN           8       :offset-assert 1696)
;    (sky-times            UNKNOWN           8       :offset-assert 1824)
;    (itimes               UNKNOWN           4       :offset-assert 1856)
;    (state                UNKNOWN           16      :offset-assert 1920)
;    (num-stars            float                     :offset-assert 1936)
;    )
;   :method-count-assert 9
;   :size-assert         #x794
;   :flag-assert         #x900000794
;   )

;; time-of-day-h
(deftype palette-fade-control (structure)
  ((trans      vector :inline :offset-assert 0)
   (fade       float          :offset-assert 16)
   (actor-dist float          :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

; ;; time-of-day-h
; (deftype palette-fade-controls (basic)
;   ((control UNKNOWN 8 :offset-assert 16)
;    )
;   :method-count-assert 11
;   :size-assert         #x110
;   :flag-assert         #xb00000110
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

;; time-of-day-h
(deftype time-of-day-proc (process)
  ((year            int32  :offset-assert 112)
   (month           int32  :offset-assert 116)
   (week            int32  :offset-assert 120)
   (day             int32  :offset-assert 124)
   (hour            int32  :offset-assert 128)
   (minute          int32  :offset-assert 132)
   (second          int32  :offset-assert 136)
   (frame           int32  :offset-assert 140)
   (time-of-day     float  :offset-assert 144)
   (time-ratio      float  :offset-assert 148)
   (star-count      int32  :offset-assert 152)
   (stars           basic  :offset-assert 156)
   (sun-count       int32  :offset-assert 160)
   (sun             basic  :offset-assert 164)
   (green-sun-count int32  :offset-assert 168)
   (green-sun       basic  :offset-assert 172)
   (moon-count      int32  :offset-assert 176)
   (moon            basic  :offset-assert 180)
   )
  :heap-base #x50
  :method-count-assert 14
  :size-assert         #xb8
  :flag-assert         #xe005000b8
  ;; inherited inpspect of process
  )

(define-extern *time-of-day-proc* time-of-day-proc)

;; time-of-day-h
(deftype time-of-day-palette (basic)
  ((width  int32     :offset-assert 4)
   (height int32     :offset-assert 8)
   (pad    int32     :offset-assert 12)
   (data   int32 1 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; time-of-day-h
; (deftype time-of-day-context (basic)
;   ((active-count         uint32              :offset-assert 4)
;    (interp               float               :offset-assert 8)
;    (current-interp       float               :offset-assert 12)
;    (moods                UNKNOWN     2       :offset-assert 16)
;    (current-fog          mood-fog    :inline :offset-assert 32)
;    (current-sun          mood-sun    :inline :offset-assert 80)
;    (current-prt-color    vector      :inline :offset-assert 112)
;    (current-shadow       vector      :inline :offset-assert 128)
;    (current-shadow-color vector      :inline :offset-assert 144)
;    (light-group          UNKNOWN     9       :offset-assert 160)
;    (title-light-group    light-group :inline :offset-assert 1888)
;    (time                 float               :offset-assert 2080)
;    (target-interp        float               :offset-assert 2084)
;    (erase-color          uint32              :offset-assert 2088)
;    (num-stars            float               :offset-assert 2092)
;    (light-masks-0        UNKNOWN     2       :offset-assert 2096)
;    (light-masks-1        UNKNOWN     2       :offset-assert 2098)
;    (light-interp         UNKNOWN     2       :offset-assert 2100)
;    (sky                  basic               :offset-assert 2108)
;    (sun-fade             float               :offset-assert 2112)
;    (title-updated        basic               :offset-assert 2116)
;    )
;   :method-count-assert 9
;   :size-assert         #x848
;   :flag-assert         #x900000848
;   )

; ;; time-of-day-h
; (deftype time-of-day-dma (structure)
;   ((outa  UNKNOWN 256 :offset-assert 0)
;    (outb  UNKNOWN 256 :offset-assert 1024)
;    (banka UNKNOWN 256 :offset-assert 2048)
;    (bankb UNKNOWN 256 :offset-assert 3072)
;    )
;   :method-count-assert 9
;   :size-assert         #x1000
;   :flag-assert         #x900001000
;   )

;; art-h
(deftype joint-anim (basic)
  ((name   basic  :offset-assert 4)
   (number int16  :offset-assert 8)
   (length int16  :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; art-h
; (deftype joint-anim-drawable (joint-anim)
;   ((name   basic            :offset-assert 4)
;    (number int16            :offset-assert 8)
;    (length int16            :offset-assert 10)
;    (data   UNKNOWN :dynamic :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

;; art-h
(deftype joint-anim-compressed (joint-anim)
  ()
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; art-h
; (deftype joint-anim-frame (structure)
;   ((matrices UNKNOWN 2        :offset-assert 0)
;    (data     UNKNOWN :dynamic :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; art-h
; (deftype joint-anim-compressed-hdr (structure)
;   ((control-bits UNKNOWN 14 :offset-assert 0)
;    (num-joints   uint32     :offset-assert 56)
;    (matrix-bits  uint32     :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; art-h
; (deftype joint-anim-compressed-fixed (structure)
;   ((hdr       joint-anim-compressed-hdr :inline :offset-assert 0)
;    (offset-64 uint32                            :offset-assert 64)
;    (offset-32 uint32                            :offset-assert 68)
;    (offset-16 uint32                            :offset-assert 72)
;    (reserved  uint32                            :offset-assert 76)
;    (data      UNKNOWN                   133     :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x8a0
;   :flag-assert         #x9000008a0
;   )

; ;; art-h
; (deftype joint-anim-compressed-frame (structure)
;   ((offset-64 uint32      :offset-assert 0)
;    (offset-32 uint32      :offset-assert 4)
;    (offset-16 uint32      :offset-assert 8)
;    (reserved  uint32      :offset-assert 12)
;    (data      UNKNOWN 133 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x860
;   :flag-assert         #x900000860
;   )

; ;; art-h
; (deftype joint-anim-compressed-control (structure)
;   ((num-frames uint32                        :offset-assert 0)
;    (fixed-qwc  uint32                        :offset-assert 4)
;    (frame-qwc  uint32                        :offset-assert 8)
;    (fixed      joint-anim-compressed-fixed   :offset-assert 12)
;    (data       UNKNOWN                     1 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

;; art-h
(deftype art (basic)
  ((name   basic  :offset 8)
   (length int32  :offset-assert 12)
   (extra  basic  :offset-assert 16)
   )
  :method-count-assert 13
  :size-assert         #x14
  :flag-assert         #xd00000014
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; art-h
(deftype art-element (art)
  ((pad uint8 12))
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

; ;; art-h
; (deftype skeleton-group (basic)
;   ((art-group-name basic           :offset-assert 4)
;    (jgeo           int32           :offset-assert 8)
;    (janim          int32           :offset-assert 12)
;    (bounds         vector  :inline :offset-assert 16)
;    (radius         meters          :offset-assert 28)
;    (mgeo           UNKNOWN 4       :offset-assert 32)
;    (max-lod        int32           :offset-assert 40)
;    (lod-dist       UNKNOWN 4       :offset-assert 44)
;    (longest-edge   meters          :offset-assert 60)
;    (texture-level  int8            :offset-assert 64)
;    (version        int8            :offset-assert 65)
;    (shadow         int8            :offset-assert 66)
;    (sort           int8            :offset-assert 67)
;    )
;   :method-count-assert 9
;   :size-assert         #x48
;   :flag-assert         #x900000048
;   )

;; art-h
(deftype lod-group (structure)
  ((geo  basic   :offset-assert 0)
   (dist float  :offset-assert 4) ;; meters
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; art-h
; (deftype lod-set (structure)
;   ((lod     UNKNOWN 4 :offset-assert 0)
;    (max-lod int8      :offset-assert 32)
;    )
;   :method-count-assert 10
;   :size-assert         #x21
;   :flag-assert         #xa00000021
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; art-h
; (deftype draw-control (basic)
;   ((status                   uint8           :offset-assert 4)
;    (matrix-type              uint8           :offset-assert 5)
;    (data-format              uint8           :offset-assert 6)
;    (global-effect            uint8           :offset-assert 7)
;    (art-group                basic           :offset-assert 8)
;    (jgeo                     basic           :offset-assert 12)
;    (mgeo                     basic           :offset-assert 16)
;    (dma-add-func             basic           :offset-assert 20)
;    (skeleton                 basic           :offset-assert 24)
;    (lod-set                  lod-set :inline :offset-assert 28)
;    (lod                      UNKNOWN 4       :offset-assert 28)
;    (max-lod                  int8            :offset-assert 60)
;    (force-lod                int8            :offset-assert 61)
;    (cur-lod                  int8            :offset-assert 62)
;    (desired-lod              int8            :offset-assert 63)
;    (ripple                   basic           :offset-assert 64)
;    (longest-edge             meters          :offset-assert 68)
;    (longest-edge?            uint32          :offset-assert 68)
;    (light-index              uint8           :offset-assert 72)
;    (dummy                    UNKNOWN 2       :offset-assert 73)
;    (death-draw-overlap       uint8           :offset-assert 75)
;    (death-timer              uint8           :offset-assert 76)
;    (death-timer-org          uint8           :offset-assert 77)
;    (death-vertex-skip        uint16          :offset-assert 78)
;    (death-effect             uint32          :offset-assert 80)
;    (sink-group               basic           :offset-assert 84)
;    (process                  basic           :offset-assert 88)
;    (shadow                   basic           :offset-assert 92)
;    (shadow-ctrl              basic           :offset-assert 96)
;    (origin                   vector  :inline :offset-assert 112)
;    (bounds                   vector  :inline :offset-assert 128)
;    (radius                   meters          :offset-assert 140)
;    (color-mult               rgbaf   :inline :offset-assert 144)
;    (color-emissive           rgbaf   :inline :offset-assert 160)
;    (secondary-interp         float           :offset-assert 176)
;    (current-secondary-interp float           :offset-assert 180)
;    (shadow-mask              uint8           :offset-assert 184)
;    (level-index              uint8           :offset-assert 185)
;    (origin-joint-index       uint8           :offset-assert 186)
;    (shadow-joint-index       uint8           :offset-assert 187)
;    )
;   :method-count-assert 12
;   :size-assert         #xbc
;   :flag-assert         #xc000000bc
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; generic-vu1-h
; (deftype pris-mtx (structure)
;   ((data   UNKNOWN 32      :offset-assert 0)
;    (vector UNKNOWN 8       :offset-assert 0)
;    (t-mtx  matrix  :inline :offset-assert 0)
;    (n-mtx  matrix3 :inline :offset-assert 64)
;    (scale  vector  :inline :offset-assert 112)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; generic-vu1-h
; (deftype generic-pris-mtx-save (structure)
;   ((loc-mtx pris-mtx :inline :offset-assert 0)
;    (par-mtx pris-mtx :inline :offset-assert 128)
;    (dif-mtx pris-mtx :inline :offset-assert 256)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

;; generic-vu1-h
(deftype generic-constants (structure)
  ((fog         vector :inline :offset-assert 0)
   (adgif       qword  :inline :offset-assert 16)
   (giftag      qword  :inline :offset-assert 32)
   (hvdf-offset vector :inline :offset-assert 48)
   (hmge-scale  vector :inline :offset-assert 64)
   (invh-scale  vector :inline :offset-assert 80)
   (guard       vector :inline :offset-assert 96)
   (adnop       qword  :inline :offset-assert 112)
   (flush       qword  :inline :offset-assert 128)
   (stores      qword  :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )


;; merc-h
(deftype ripple-merc-query (inline-array-class)
  ((start-vertex     int32            :offset-assert 16)
   (vertex-skip      int32            :offset-assert 20)
   (vertex-count     int32            :offset-assert 24)
   (current-loc      int32            :offset-assert 28)
   (data2             uint8 :dynamic :offset-assert 32) ;; renamed from data. suspect inline-array has some magic.
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; merc-h
(deftype merc-byte-header (structure)
  ((srcdest-off        uint8      :offset-assert 0)
   (rgba-off           uint8      :offset-assert 1)
   (lump-off           uint8      :offset-assert 2)
   (fp-off             uint8      :offset-assert 3)
   (mat1-cnt           uint8      :offset-assert 4)
   (mat2-cnt           uint8      :offset-assert 5)
   (mat3-cnt           uint8      :offset-assert 6)
   (samecopy-cnt       uint8      :offset-assert 7)
   (crosscopy-cnt      uint8      :offset-assert 8)
   (strip-len          uint8      :offset-assert 9)
   (mm-quadword-fp-off uint8      :offset-assert 10)
   (mm-quadword-size   uint8      :offset-assert 11)
   (perc-off           uint8      :offset-assert 12)
   (mat-slot           uint8 10 :offset-assert 13)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

;; merc-h
(deftype merc-fragment (structure)
  ((header merc-byte-header :inline :offset-assert 0)
   (rest   uint8          1       :offset-assert 23)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (dummy-9 () none 9)
    )
  )

;; merc-h
(deftype merc-vtx (structure)
  ((mat-0 uint8  :offset-assert 0)
   (mat-1 uint8  :offset-assert 1)
   (nrm-x uint8  :offset-assert 2)
   (pos-x uint8  :offset-assert 3)
   (dst-0 uint8  :offset-assert 4)
   (dst-1 uint8  :offset-assert 5)
   (nrm-y uint8  :offset-assert 6)
   (pos-y uint8  :offset-assert 7)
   (tex-s uint8  :offset-assert 8)
   (tex-t uint8  :offset-assert 9)
   (nrm-z uint8  :offset-assert 10)
   (pos-z uint8  :offset-assert 11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; merc-h
(deftype merc-fp-header (structure)
  ((x-add            float  :offset-assert 0)
   (y-add            float  :offset-assert 4)
   (z-add            float  :offset-assert 8)
   (shader-cnt       uint8  :offset-assert 12)
   (kick-info-offset uint8  :offset-assert 13)
   (kick-info-step   uint8  :offset-assert 14)
   (hword-cnt        uint8  :offset-assert 15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype merc-mat-dest (structure)
  ((matrix-number uint8  :offset-assert 0)
   (matrix-dest   uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; merc-h
(deftype merc-fragment-control (structure)
  ((unsigned-four-count uint8            :offset-assert 0)
   (lump-four-count     uint8            :offset-assert 1)
   (fp-qwc              uint8            :offset-assert 2)
   (mat-xfer-count      uint8            :offset-assert 3)
   (mat-dest-data       uint8 :dynamic :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; merc-h
(deftype merc-blend-data (structure) ;; was unknown!
  ((int8-data int8 :dynamic :offset-assert 0)
   )
  )

;; merc-h
(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count     uint8            :offset-assert 0)
   (nonzero-index-count uint8            :offset-assert 1)
   (bt-index            uint8 :dynamic :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; merc-h
(deftype mei-envmap-tint (structure)
  ((fade0 float   :offset-assert 0)
   (fade1 float   :offset-assert 4)
   (tint  uint32  :offset-assert 8)
   (dummy int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype mei-texture-scroll (structure)
  ((max-dist     float     :offset-assert 0)
   (st-int-scale uint8     :offset-assert 4)
   (time-factor  uint8     :offset-assert 5)
   (scroll-dir   uint8     :offset-assert 6)
   (cached-time  uint8     :offset-assert 7)
   (time-delta   uint8     :offset-assert 8)
   (dummy        uint8 7 :offset-assert 9)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype mei-ripple (structure)
  ((x-base    float  :offset-assert 0)
   (z-base    float  :offset-assert 4)
   (grid-size float  :offset-assert 8)
   (angle     float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; merc-h
(deftype merc-extra-info (structure)
  ((envmap-tint-offset    uint8      :offset-assert 0)
   (shader-offset         uint8      :offset-assert 1)
   (texture-scroll-offset uint8      :offset-assert 2)
   (ripple-offset         uint8      :offset-assert 3)
   (dummy                 uint8 12 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; merc-h
(deftype merc-effect (structure)
  ((frag-geo         merc-fragment          :offset-assert 0)
   (frag-ctrl        merc-fragment-control  :offset-assert 4)
   (blend-data       merc-blend-data        :offset-assert 8)
   (blend-ctrl       merc-blend-ctrl        :offset-assert 12)
   (dummy0           uint8                  :offset-assert 16)
   (effect-bits      uint8                  :offset-assert 17)
   (frag-count       uint16                 :offset-assert 18)
   (blend-frag-count uint16                 :offset-assert 20)
   (tri-count        uint16                 :offset-assert 22)
   (dvert-count      uint16                 :offset-assert 24)
   (dummy1           uint8                  :offset-assert 26)
   (envmap-usage     uint8                  :offset-assert 27)
   (extra-info       merc-extra-info        :offset-assert 28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (dummy-9 () none 9)
    )
  )

;; merc-h
(deftype merc-eye-ctrl (structure)
  ((eye-slot      int8                 :offset-assert 0)
   (shader-offset int8                 :offset-assert 1)
   (shader-count  int8                 :offset-assert 2)
   ;(shader        UNKNOWN      3       :offset-assert 16)
   (iris-shader   adgif-shader :inline :offset-assert 16)
   (pupil-shader  adgif-shader :inline :offset-assert 96)
   (lid-shader    adgif-shader :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; merc-h
(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x int8    :offset-assert 0)
   (pupil-trans-y int8    :offset-assert 1)
   (blink         int8    :offset-assert 2)
   (iris-scale    int8    :offset 4)
   (pupil-scale   int8    :offset-assert 5)
   (lid-scale     int8    :offset-assert 6)
   (dword         uint64  :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; merc-h
(deftype merc-eye-anim-block (structure)
  ((max-frame int16            :offset-assert 0)
   (data      uint8 :dynamic :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; merc-h
(deftype merc-ctrl-header (structure)
  ((xyz-scale              float            :offset-assert 0)
   (st-magic               uint32           :offset-assert 4)
   (st-out-a               uint32           :offset-assert 8)
   (st-out-b               uint32           :offset-assert 12)
   (st-vif-add             uint32           :offset-assert 16)
   (st-int-off             uint16           :offset-assert 20)
   (st-int-scale           uint16           :offset-assert 22)
   (effect-count           uint32           :offset-assert 24)
   (blend-target-count     uint32           :offset-assert 28)
   (fragment-count         uint16           :offset-assert 32)
   (tri-count              uint16           :offset-assert 34)
   (matrix-count           uint8            :offset-assert 36)
   (shader-count           uint8            :offset-assert 37)
   (transform-vertex-count uint16           :offset-assert 38)
   (dvert-count            uint16           :offset-assert 40)
   (one-mat-count          uint16           :offset-assert 42)
   (two-mat-count          uint16           :offset-assert 44)
   (two-mat-reuse-count    uint16           :offset-assert 46)
   (three-mat-count        uint16           :offset-assert 48)
   (three-mat-reuse-count  uint16           :offset-assert 50)
   (shader-upload-count    uint8            :offset-assert 52)
   (matrix-upload-count    uint8            :offset-assert 53)
   (same-copy-count        uint16           :offset-assert 54)
   (cross-copy-count       uint16           :offset-assert 56)
   (num-verts              uint16           :offset-assert 58)
   (longest-edge           float            :offset-assert 60)
   (eye-ctrl               merc-eye-ctrl    :offset-assert 64)
   (masks                  uint32       3  :offset-assert 68)
   (dummy-bytes            uint8       48 :offset 32)
   (envmap-tint            uint32           :offset 32)
   (query                  basic            :offset 36)
   (needs-clip             uint8            :offset 40)
   (use-isometric          uint8            :offset 41)
   (use-attached-shader    uint8            :offset 42)
   (display-triangles      uint8            :offset 43)
   (death-vertex-skip      uint16           :offset 44)
   (death-start-vertex     uint16           :offset 46)
   (death-effect           uint32           :offset 48)
   (use-translucent        uint8            :offset 52)
   (display-this-fragment  uint8            :offset 53)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  ;; field xyz-scale is a float printed as hex? 
  )

;; merc-h
(deftype merc-ctrl (art-element)
  ((num-joints int32                     :offset 20)
   (header     merc-ctrl-header :inline  :offset-assert 32)
   (effect     uint8          :dynamic :offset-assert 112)
   )
  :method-count-assert 13
  :size-assert         #x70
  :flag-assert         #xd00000070
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; merc-h
(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif qword   :inline :offset-assert 0)
   (ad-gif        qword   :inline :offset-assert 16)
   (hvdf-offset   vector  :inline :offset-assert 32)
   (perspective   uint128 4       :offset-assert 48)
   (fog           vector  :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; merc-h
(deftype ripple-wave (structure)
  ((scale float  :offset-assert 0)
   (offs  float  :offset-assert 4)
   (xdiv  int16  :offset-assert 8)
   (zdiv  int16  :offset-assert 10)
   (speed float  :offset-assert 12)
   (xmul  float  :offset-assert 16)
   (zmul  float  :offset-assert 20)
   (delta float  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; merc-h
(deftype ripple-wave-set (basic)
  ((count        int32     :offset-assert 4)
   (converted    basic     :offset-assert 8)
   (frame-save   uint32    :offset-assert 12)
   (normal-scale float     :offset-assert 16)
   (wave         ripple-wave 4 :inline :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

;; merc-h
(deftype ripple-control (basic)
  ((global-scale            float  :offset-assert 4)
   (last-frame-scale        float  :offset-assert 8)
   (close-fade-dist         float  :offset-assert 12)
   (far-fade-dist           float  :offset-assert 16)
   (faded-scale             float  :offset-assert 20)
   (individual-normal-scale float  :offset-assert 24)
   (waveform                basic  :offset-assert 28)
   (send-query              basic  :offset-assert 32)
   (query                   basic  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; generic-merc-h
(deftype merc-matrix (structure)
  ((quad   uint128 8 :offset-assert 0)
   (vector vector 8 :inline :offset 0)
   (tag    uint64    :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; generic-merc-h
(deftype generic-merc-tag (dma-packet)
  ((next-ptr uint32   :offset 12)
   (size     uint32   :offset 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; generic-merc-h
(deftype generic-merc-ctrl (structure)
  ((tag    generic-merc-tag :inline :offset-assert 0)
   (lights vu-lights        :inline :offset-assert 16)
   (header merc-ctrl-header :inline :offset-assert 128)
   (effect merc-effect      :inline :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xf0
  :flag-assert         #x9000000f0
  )

;; generic-merc-h
(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data uint128          11      :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x1a0
  :flag-assert         #x9000001a0
  )

;; generic-merc-h
; (deftype generic-merc-input (structure)
;   ((geo-tag     generic-merc-tag           :inline :offset-assert 0)
;    (geo-block   UNKNOWN                    1296    :offset-assert 16)
;    (byte-header merc-byte-header           :inline :offset-assert 16)
;    (matrix      UNKNOWN                    9       :offset-assert 1312)
;    (control     generic-merc-ctrl-with-sfx :inline :offset-assert 2464)
;    (end-tag     generic-merc-tag           :inline :offset-assert 2880)
;    (shader      adgif-shader               :inline :offset-assert 2896)
;    )
;   :method-count-assert 9
;   :size-assert         #xba0
;   :flag-assert         #x900000ba0
;   )

; ;; generic-merc-h
; (deftype generic-merc-output (structure)
;   ((info             gsf-info   :inline :offset-assert 0)
;    (header           gsf-header :inline :offset-assert 16)
;    (index-kick-table UNKNOWN    80      :offset-assert 32)
;    (index-table      UNKNOWN    160     :offset-assert 32)
;    (inverse-table    UNKNOWN    256     :offset-assert 192)
;    (vertex-table     UNKNOWN    72      :offset-assert 448)
;    )
;   :method-count-assert 9
;   :size-assert         #xac0
;   :flag-assert         #x900000ac0
;   )

; ;; generic-merc-h
; (deftype generic-merc-dcache (structure)
;   ((output-a    generic-merc-output :inline :offset-assert 0)
;    (output-b    generic-merc-output :inline :offset-assert 2752)
;    (inv-table-1 UNKNOWN             544     :offset-assert 5504)
;    (inv-table-7 UNKNOWN             544     :offset-assert 6048)
;    (inv-safety  UNKNOWN             16      :offset-assert 6592)
;    (effect-data UNKNOWN             1584    :offset-assert 6608)
;    )
;   :method-count-assert 9
;   :size-assert         #x2000
;   :flag-assert         #x900002000
;   )

; ;; generic-merc-h
; (deftype gm-shadow (structure)
;   ((perspective                matrix              :inline :offset-assert 0)
;    (isometric                  matrix              :inline :offset-assert 64)
;    (inv-camera-rot             matrix              :inline :offset-assert 128)
;    (envmap-shader              adgif-shader        :inline :offset-assert 192)
;    (current-chain              uint32                      :offset-assert 272)
;    (next-chain                 uint32                      :offset-assert 276)
;    (buf-index                  uint32                      :offset-assert 280)
;    (fragment-count             uint32                      :offset-assert 284)
;    (write-limit                int32                       :offset-assert 288)
;    (indexed-input-base         generic-merc-input          :offset-assert 292)
;    (other-input-base           generic-merc-input          :offset-assert 296)
;    (indexed-output-base        generic-merc-output         :offset-assert 300)
;    (other-output-base          generic-merc-output         :offset-assert 304)
;    (p-input                    uint32                      :offset-assert 308)
;    (gsf-buf                    generic-merc-dcache         :offset-assert 312)
;    (p-fheader                  merc-fp-header              :offset-assert 316)
;    (mercneric-convert          basic                       :offset-assert 320)
;    (generic-prepare-dma-single basic                       :offset-assert 324)
;    (generic-prepare-dma-double basic                       :offset-assert 328)
;    (generic-light-proc         basic                       :offset-assert 332)
;    (generic-envmap-proc        basic                       :offset-assert 336)
;    (high-speed-reject          basic                       :offset-assert 340)
;    (hsr-xmult                  vector              :inline :offset-assert 352)
;    (hsr-ymult                  vector              :inline :offset-assert 368)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

; ;; generic-merc-h
; (deftype generic-merc-work (structure)
;   ((input-a generic-merc-input         :inline :offset-assert 0)
;    (input-b generic-merc-input         :inline :offset-assert 2976)
;    (ctrl    generic-merc-ctrl-with-sfx :inline :offset-assert 5952)
;    (shadow  gm-shadow                  :inline :offset-assert 6368)
;    (stack   UNKNOWN                    16      :offset-assert 6752)
;    )
;   :method-count-assert 9
;   :size-assert         #x1b60
;   :flag-assert         #x900001b60
;   )

; ;; generic-tie-h
; (deftype generic-tie-instance (structure)
;   ((matrix-tag  dma-packet :inline :offset-assert 0)
;    (matrix-data UNKNOWN    6       :offset-assert 16)
;    (index-tag   dma-packet :inline :offset-assert 112)
;    (indices     UNKNOWN    224     :offset-assert 128)
;    (end-tag     dma-packet :inline :offset-assert 352)
;    )
;   :method-count-assert 9
;   :size-assert         #x170
;   :flag-assert         #x900000170
;   )

; ;; generic-tie-h
; (deftype generic-tie-input (structure)
;   ((palette-tag dma-packet :inline :offset-assert 0)
;    (palette     UNKNOWN    128     :offset-assert 16)
;    (model-tag   dma-packet :inline :offset-assert 528)
;    (model       UNKNOWN    146     :offset-assert 544)
;    (matrix-tag  dma-packet :inline :offset-assert 2880)
;    (matrix-data UNKNOWN    6       :offset-assert 2896)
;    (index-tag   dma-packet :inline :offset-assert 2992)
;    (indices     UNKNOWN    224     :offset-assert 3008)
;    (end-tag     dma-packet :inline :offset-assert 3232)
;    )
;   :method-count-assert 9
;   :size-assert         #xcb0
;   :flag-assert         #x900000cb0
;   )

; ;; generic-tie-h
; (deftype generic-tie-run-control (structure)
;   ((skip-bp2    uint8  :offset-assert 0)
;    (skip-ips    uint8  :offset-assert 1)
;    (gifbuf-skip uint8  :offset-assert 2)
;    (strips      uint8  :offset-assert 3)
;    (target-bp1  uint8  :offset-assert 4)
;    (target-bp2  uint8  :offset-assert 5)
;    (target-ip1  uint8  :offset-assert 6)
;    (target-ip2  uint8  :offset-assert 7)
;    (target-bps  uint8  :offset-assert 8)
;    (target-ips  uint8  :offset-assert 9)
;    (is-generic  uint8  :offset-assert 10)
;    (reserved    uint8  :offset-assert 11)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; generic-tie-h
; (deftype generic-tie-base-point (structure)
;   ((data UNKNOWN 8 :offset-assert 0)
;    (quad uint128   :offset-assert 0)
;    (x    int16     :offset-assert 0)
;    (y    int16     :offset-assert 2)
;    (z    int16     :offset-assert 4)
;    (d0   int16     :offset-assert 6)
;    (vtx  uint64    :offset-assert 0)
;    (u    int16     :offset-assert 8)
;    (v    int16     :offset-assert 10)
;    (tex  uint32    :offset-assert 8)
;    (w    int16     :offset-assert 12)
;    (d1   int16     :offset-assert 14)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-tie-h
; (deftype generic-tie-bps (structure)
;   ((bp UNKNOWN 4 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; generic-tie-h
; (deftype generic-tie-interp-point (structure)
;   ((data   UNKNOWN 12 :offset-assert 0)
;    (quad   uint128    :offset-assert 0)
;    (x      int16      :offset-assert 0)
;    (y      int16      :offset-assert 2)
;    (z      int16      :offset-assert 4)
;    (d0     int16      :offset-assert 6)
;    (vtx0   uint64     :offset-assert 0)
;    (dx     int16      :offset-assert 8)
;    (dy     int16      :offset-assert 10)
;    (dz     int16      :offset-assert 12)
;    (unused int16      :offset-assert 14)
;    (vtx1   uint64     :offset-assert 8)
;    (u      int16      :offset-assert 16)
;    (v      int16      :offset-assert 18)
;    (tex    uint32     :offset-assert 16)
;    (w      int16      :offset-assert 20)
;    (d1     int16      :offset-assert 22)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; generic-tie-h
; (deftype generic-tie-ips (structure)
;   ((ip UNKNOWN 2 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; generic-tie-h
; (deftype generic-tie-header (structure)
;   ((effect              uint8              :offset-assert 0)
;    (interp-table-size   uint8              :offset-assert 1)
;    (num-bps             uint8              :offset-assert 2)
;    (num-ips             uint8              :offset-assert 3)
;    (tint-color          uint32             :offset-assert 4)
;    (index-table-offset  uint16             :offset-assert 8)
;    (kick-table-offset   uint16             :offset-assert 10)
;    (normal-table-offset uint16             :offset-assert 12)
;    (interp-table-offset uint16             :offset-assert 14)
;    (gsf-header          gsf-header :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; generic-tie-h
; (deftype generic-tie-matrix (structure)
;   ((matrix matrix :inline :offset-assert 0)
;    (morph  vector :inline :offset-assert 64)
;    (fog    qword  :inline :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

; ;; generic-tie-h
; (deftype generic-tie-normal (structure)
;   ((x     int8  :offset-assert 0)
;    (y     int8  :offset-assert 1)
;    (z     int8  :offset-assert 2)
;    (dummy int8  :offset-assert 3)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; generic-tie-h
; (deftype generic-tie-control (structure)
;   ((ptr-palette   uint32                   :offset-assert 0)
;    (ptr-shaders   uint32                   :offset-assert 4)
;    (ptr-runctrl   generic-tie-run-control  :offset-assert 8)
;    (ptr-verts     uint32                   :offset-assert 12)
;    (ptr-generic   generic-tie-header       :offset-assert 16)
;    (ptr-dps       uint32                   :offset-assert 20)
;    (ptr-kicks     uint32                   :offset-assert 24)
;    (ptr-normals   uint32                   :offset-assert 28)
;    (ptr-interp    uint32                   :offset-assert 32)
;    (ptr-mtxs      generic-tie-matrix       :offset-assert 36)
;    (ptr-cinds     uint32                   :offset-assert 40)
;    (next-instance uint32                   :offset-assert 44)
;    (next-model    uint32                   :offset-assert 48)
;    (next-is-model uint32                   :offset-assert 52)
;    (tie-type      uint32                   :offset-assert 56)
;    )
;   :method-count-assert 9
;   :size-assert         #x3c
;   :flag-assert         #x90000003c
;   )

; ;; generic-tie-h
; (deftype generic-tie-stats (structure)
;   ((num-bps       uint32  :offset-assert 0)
;    (num-ips       uint32  :offset-assert 4)
;    (num-dps       uint32  :offset-assert 8)
;    (num-shaders   uint32  :offset-assert 12)
;    (num-models    uint32  :offset-assert 16)
;    (num-instances uint32  :offset-assert 20)
;    (num-waits     uint32  :offset-assert 24)
;    (num-qwc       uint32  :offset-assert 28)
;    (max-qwc       uint32  :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x24
;   :flag-assert         #x900000024
;   )

; ;; generic-tie-h
; (deftype generic-tie-calls (structure)
;   ((generic-prepare-dma-double basic  :offset-assert 0)
;    (generic-envmap-dproc       basic  :offset-assert 4)
;    (generic-interp-dproc       basic  :offset-assert 8)
;    (generic-no-light-dproc     basic  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-tie-h
; (deftype generic-tie-shadow (structure)
;   ((out-buf      gsf-buffer                :offset-assert 0)
;    (cur-buf      uint32                    :offset-assert 4)
;    (tie-type     int32                     :offset-assert 8)
;    (ptr-inst     uint32                    :offset-assert 12)
;    (ptr-buf      uint32                    :offset-assert 16)
;    (inst-xor     int32                     :offset-assert 20)
;    (end-of-chain uint32                    :offset-assert 24)
;    (write-limit  uint32                    :offset-assert 28)
;    (calls        generic-tie-calls :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; generic-tie-h
; (deftype generic-tie-work (structure)
;   ((control     generic-tie-control  :inline :offset-assert 0)
;    (interp-job  generic-interp-job   :inline :offset-assert 60)
;    (shadow      generic-tie-shadow   :inline :offset-assert 76)
;    (input-a     generic-tie-input    :inline :offset-assert 128)
;    (input-b     generic-tie-input    :inline :offset-assert 3376)
;    (inst-buf    generic-tie-instance :inline :offset-assert 6624)
;    (palette-buf UNKNOWN              128     :offset-assert 6992)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d50
;   :flag-assert         #x900001d50
;   )

; ;; generic-work-h
; (deftype generic-input-buffer (structure)
;   ((data UNKNOWN           472     :offset-assert 0)
;    (merc generic-merc-work :inline :offset-assert 0)
;    (tie  generic-tie-work  :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d80
;   :flag-assert         #x900001d80
;   )

; ;; generic-work-h
; (deftype generic-debug (structure)
;   ((locks      UNKNOWN 4  :offset-assert 0)
;    (timer      UNKNOWN 32 :offset-assert 16)
;    (count      UNKNOWN 32 :offset-assert 144)
;    (vps        UNKNOWN 32 :offset-assert 272)
;    (buffer     int32      :offset-assert 400)
;    (start-addr int32      :offset-assert 404)
;    (lock       int32      :offset-assert 408)
;    )
;   :method-count-assert 9
;   :size-assert         #x19c
;   :flag-assert         #x90000019c
;   )

; ;; generic-work-h
; (deftype generic-vu1-header (structure)
;   ((matrix  matrix          :inline :offset-assert 0)
;    (strgif  generic-gif-tag :inline :offset-assert 64)
;    (adcmds  UNKNOWN         2       :offset-assert 80)
;    (adnop1  ad-cmd          :inline :offset-assert 80)
;    (adnop2  ad-cmd          :inline :offset-assert 96)
;    (dps     uint16                  :offset-assert 92)
;    (kickoff uint16                  :offset-assert 108)
;    (strips  uint16                  :offset-assert 76)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; generic-work-h
; (deftype generic-vu1-texbuf (structure)
;   ((header generic-vu1-header :inline  :offset-assert 0)
;    (shader UNKNOWN            :dynamic :offset-assert 112)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; generic-work-h
; (deftype generic-texbuf (structure)
;   ((tag    dma-packet         :inline  :offset-assert 0)
;    (header generic-vu1-header :inline  :offset-assert 16)
;    (shader UNKNOWN            :dynamic :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; generic-work-h
; (deftype generic-effect-work (structure)
;   ((consts   generic-consts  :inline :offset-assert 0)
;    (storage  generic-storage :inline :offset-assert 432)
;    (storage2 generic-storage :inline :offset-assert 688)
;    (lights   vu-lights       :inline :offset-assert 944)
;    )
;   :method-count-assert 9
;   :size-assert         #x420
;   :flag-assert         #x900000420
;   )

; ;; generic-work-h
; (deftype generic-effect-buffer (structure)
;   ((outbuf-0 UNKNOWN             3552    :offset-assert 0)
;    (work     generic-effect-work :inline :offset-assert 3552)
;    (outbuf-1 UNKNOWN             3552    :offset-assert 4608)
;    )
;   :method-count-assert 9
;   :size-assert         #x1fe0
;   :flag-assert         #x900001fe0
;   )

; ;; generic-work-h
; (deftype generic-work (structure)
;   ((saves   generic-saves         :inline :offset-assert 0)
;    (storage generic-storage       :inline :offset-assert 368)
;    (in-buf  generic-input-buffer  :inline :offset-assert 624)
;    (fx-buf  generic-effect-buffer :inline :offset-assert 8176)
;    )
;   :method-count-assert 9
;   :size-assert         #x3fd0
;   :flag-assert         #x900003fd0
;   )

; ;; shadow-cpu-h
(deftype shadow-settings (structure)
  ((center        vector :inline :offset-assert 0)
   (flags         int32          :offset 12)
   (shadow-dir    vector :inline :offset-assert 16)
   (dist-to-locus float          :offset 28)
   (bot-plane     plane  :inline :offset-assert 32)
   (top-plane     plane  :inline :offset-assert 48)
   (fade-dist     float          :offset-assert 64)
   (fade-start    float          :offset-assert 68)
   (dummy-2       int32          :offset-assert 72)
   (dummy-3       int32          :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; shadow-cpu-h
(deftype shadow-control (basic)
  ((settings shadow-settings :inline :offset-assert 16)
   )
  :method-count-assert 16
  :size-assert         #x60
  :flag-assert         #x1000000060
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; shadow-cpu-h
(deftype shadow-data (structure)
  ((texoffset           vector     :inline :offset-assert 0)
   (texscale            vector     :inline :offset-assert 16)
   (clrs                uint128    2       :offset-assert 32)
   (dma-unpack-template dma-packet :inline :offset-assert 64)
   (dma-cnt             uint64             :offset-assert 80)
   (vif-nop             uint32             :offset-assert 88)
   (vif-unpack-v4-8     uint32             :offset-assert 92)
   (pdc                 basic              :offset-assert 96)
   (dist                float              :offset-assert 100)
   (oddeven             uint8              :offset-assert 104)
   (waits               uint32             :offset-assert 108)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; shadow-cpu-h
(deftype shadow-work (structure)
  ((shadow-data shadow-data :inline :offset-assert 0)
   (inbuf       uint128     600     :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x25f0
  :flag-assert         #x9000025f0
  )

;; shadow-cpu-h
(deftype shadow-run (structure)
  ((first uint32  :offset-assert 0)
   (next  uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; shadow-cpu-h
; (deftype shadow-queue (structure)
;   ((num-runs uint32     :offset-assert 0)
;    (cur-run  uint32     :offset-assert 4)
;    (run      UNKNOWN 15 :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xf8
;   :flag-assert         #x9000000f8
;   )

;; shadow-cpu-h
(deftype shadow-vertex (structure)
  ((x      float  :offset-assert 0)
   (y      float  :offset-assert 4)
   (z      float  :offset-assert 8)
   (weight float  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; shadow-cpu-h
(deftype shadow-matrix-ref (structure)
  ((joint-0 uint8  :offset-assert 0)
   (joint-1 uint8  :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; shadow-cpu-h
; (deftype shadow-edge (structure)
;   ((ind-0 uint16  :offset-assert 0)
;    (ind-1 uint16  :offset-assert 2)
;    (tri-0 uint16  :offset-assert 4)
;    (tri-1 uint16  :offset-assert 6)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

;; shadow-cpu-h
(deftype shadow-tri (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (ind-2 uint8  :offset-assert 2)
   (faces uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; shadow-cpu-h
(deftype shadow-edge (structure)
  ((ind-0 uint8  :offset-assert 0)
   (ind-1 uint8  :offset-assert 1)
   (tri-0 uint8  :offset-assert 2)
   (tri-1 uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; shadow-cpu-h
(deftype shadow-header (structure)
  ((qwc-data         uint32  :offset-assert 0)
   (num-joints       uint32  :offset-assert 4)
   (num-verts        uint16  :offset-assert 8)
   (num-twos         uint16  :offset-assert 10)
   (num-single-tris  uint16  :offset-assert 12)
   (num-single-edges uint16  :offset-assert 14)
   (num-double-tris  uint16  :offset-assert 16)
   (num-double-edges uint16  :offset-assert 18)
   (ofs-verts        uint32  :offset-assert 20)
   (ofs-refs         uint32  :offset-assert 24)
   (ofs-single-tris  uint32  :offset-assert 28)
   (ofs-single-edges uint32  :offset-assert 32)
   (ofs-double-tris  uint32  :offset-assert 36)
   (ofs-double-edges uint32  :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; shadow-cpu-h
(deftype shadow-geo (art-element)
  ((total-size uint32                 :offset-assert 32)
   (header     shadow-header :inline  :offset 32)
   (rest       uint64       :dynamic :offset-assert 80)
   )
  :method-count-assert 13
  :size-assert         #x50
  :flag-assert         #xd00000050
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; memcard-h
(deftype mc-file-info (structure)
  ((present               int32      :offset-assert 0)
   (blind-data            float 16 :offset-assert 4)
   (blind-data-int8       int8 64 :offset 4)
   (level-index           int32      :offset 4)
   (fuel-cell-count       float      :offset 8)
   (money-count           float      :offset 12)
   (buzzer-count          float      :offset 16)
   (completion-percentage float      :offset 20)
   (minute                uint8      :offset 24)
   (hour                  uint8      :offset 25)
   (week                  uint8      :offset 26)
   (day                   uint8      :offset 27)
   (month                 uint8      :offset 28)
   (year                  uint8      :offset 29)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

;; memcard-h
(deftype mc-slot-info (structure)
  ((handle       int32     :offset-assert 0)
   (known        int32     :offset-assert 4)
   (formatted    int32     :offset-assert 8)
   (inited       int32     :offset-assert 12)
   (last-file    int32     :offset-assert 16)
   (mem-required int32     :offset-assert 20)
   (mem-actual   int32     :offset-assert 24)
   (file         mc-file-info 4 :inline :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12c
  :flag-assert         #x90000012c
  )

;; game-info-h
(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; game-info-h
(deftype level-buffer-state (structure)
  ((name          basic  :offset-assert 0)
   (display?      basic  :offset-assert 4)
   (force-vis?    basic  :offset-assert 8)
   (force-inside? basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; game-info-h
(deftype load-state (basic)
  ((want          level-buffer-state  2 :inline  :offset-assert 4)
   (vis-nick      basic       :offset-assert 36)
   (command-list  basic       :offset-assert 40)
   (object-name   basic 256 :offset-assert 44)
   (object-status basic 256 :offset-assert 1068)
   )
  :method-count-assert 21
  :size-assert         #x82c
  :flag-assert         #x150000082c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    )
  )

(define-extern *load-state* load-state)

;; game-info-h
(deftype continue-point (basic)
  ((name          basic           :offset-assert 4)
   (level         basic           :offset-assert 8)
   (flags         uint32          :offset-assert 12)
   (trans         vector  :inline :offset-assert 16)
   (quat          vector  :inline :offset-assert 32)
   (camera-trans  vector  :inline :offset-assert 48)
   (camera-rot    float 9       :offset-assert 64)
   (load-commands basic           :offset-assert 100)
   (vis-nick      basic           :offset-assert 104)
   (lev0          basic           :offset-assert 108)
   (disp0         basic           :offset-assert 112)
   (lev1          basic           :offset-assert 116)
   (disp1         basic           :offset-assert 120)
   )
  :method-count-assert 10
  :size-assert         #x7c
  :flag-assert         #xa0000007c
  (:methods
    (dummy-9 () none 9)
    )
  )

;; game-info-h
(deftype game-info (basic)
  ((mode                  basic      :offset-assert 4)
   (save-name             basic      :offset-assert 8)
   (life                  float      :offset-assert 12)
   (life-max              float      :offset-assert 16)
   (money                 float      :offset-assert 20)
   (money-total           float      :offset-assert 24)
   (money-per-level       uint8 32 :offset-assert 28)
   (deaths-per-level      uint8 32 :offset-assert 60)
   (buzzer-total          float      :offset-assert 92)
   (fuel                  float      :offset-assert 96)
   (perm-list             basic      :offset-assert 100)
   (task-perm-list        basic      :offset-assert 104)
   (current-continue      basic      :offset-assert 108)
   (text-ids-seen         basic      :offset-assert 112)
   (level-opened          uint8 32 :offset-assert 116)
   (hint-control          basic      :offset-assert 148)
   (task-hint-control     basic      :offset-assert 152)
   (total-deaths          int32      :offset-assert 156)
   (continue-deaths       int32      :offset-assert 160)
   (fuel-cell-deaths      int32      :offset-assert 164)
   (game-start-time       uint64     :offset-assert 168)
   (continue-time         uint64     :offset-assert 176)
   (death-time            uint64     :offset-assert 184)
   (hit-time              uint64     :offset-assert 192)
   (fuel-cell-pickup-time uint64     :offset-assert 200)
   (fuel-cell-time        basic      :offset-assert 208)
   (enter-level-time      basic      :offset-assert 212)
   (in-level-time         basic      :offset-assert 216)
   (blackout-time         uint64     :offset-assert 224)
   (letterbox-time        uint64     :offset-assert 232)
   (hint-play-time        uint64     :offset-assert 240)
   (display-text-time     uint64     :offset-assert 248)
   (display-text-handle   uint64     :offset-assert 256)
   (death-movie-tick      int32      :offset-assert 264)
   (want-auto-save        basic      :offset-assert 268)
   (auto-save-proc        uint64     :offset-assert 272)
   (auto-save-status      uint32     :offset-assert 280)
   (auto-save-card        int32      :offset-assert 284)
   (auto-save-which       int32      :offset-assert 288)
   (pov-camera-handle     uint64     :offset-assert 296)
   (other-camera-handle   uint64     :offset-assert 304)
   (death-pos             basic      :offset-assert 312)
   (dummy                 basic      :offset-assert 316)
   (auto-save-count       int32      :offset-assert 320)
   )
  :method-count-assert 29
  :size-assert         #x144
  :flag-assert         #x1d00000144
  ;; field dummy is a basic loaded with a signed load 
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

(define-extern *game-info* game-info)

;; wind-h
(deftype wind-vector (structure)
  ((wind-pos vector2w :inline :offset-assert 0)
   (wind-vel vector2w :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; wind-h
; (deftype wind-work (basic)
;   ((wind-array  UNKNOWN 64      :offset-assert 16)
;    (wind-normal vector  :inline :offset-assert 1040)
;    (wind-temp   vector  :inline :offset-assert 1056)
;    (wind-force  UNKNOWN 64      :offset-assert 1072)
;    (wind-time   uint32          :offset-assert 1328)
;    )
;   :method-count-assert 9
;   :size-assert         #x534
;   :flag-assert         #x900000534
;   )

; ;; prototype-h
; (deftype prototype-bucket (basic)
;   ((name          basic           :offset-assert 4)
;    (flags         uint32          :offset-assert 8)
;    (in-level      uint16          :offset-assert 12)
;    (utextures     uint16          :offset-assert 14)
;    (geometry      UNKNOWN 4       :offset-assert 16)
;    (dists         vector  :inline :offset-assert 32)
;    (rdists        vector  :inline :offset-assert 48)
;    (next          UNKNOWN 4       :offset-assert 64)
;    (count         UNKNOWN 4       :offset-assert 80)
;    (near-plane    meters          :offset-assert 32)
;    (near-stiff    meters          :offset-assert 36)
;    (mid-plane     meters          :offset-assert 40)
;    (far-plane     meters          :offset-assert 44)
;    (rlength-near  float           :offset-assert 48)
;    (rlength-stiff float           :offset-assert 52)
;    (rlength-mid   float           :offset-assert 56)
;    (stiffness     float           :offset-assert 60)
;    (next-clear    uint128         :offset-assert 64)
;    (count-clear   uint64          :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x58
;   :flag-assert         #x900000058
;   )

; ;; prototype-h
; (deftype prototype-bucket-shrub (prototype-bucket)
;   ((name          basic           :offset-assert 4)
;    (flags         uint32          :offset-assert 8)
;    (in-level      uint16          :offset-assert 12)
;    (utextures     uint16          :offset-assert 14)
;    (geometry      UNKNOWN 4       :offset-assert 16)
;    (dists         vector  :inline :offset-assert 32)
;    (rdists        vector  :inline :offset-assert 48)
;    (next          UNKNOWN 4       :offset-assert 64)
;    (count         UNKNOWN 4       :offset-assert 80)
;    (near-plane    meters          :offset-assert 32)
;    (near-stiff    meters          :offset-assert 36)
;    (mid-plane     meters          :offset-assert 40)
;    (far-plane     meters          :offset-assert 44)
;    (rlength-near  float           :offset-assert 48)
;    (rlength-stiff float           :offset-assert 52)
;    (rlength-mid   float           :offset-assert 56)
;    (stiffness     float           :offset-assert 60)
;    (next-clear    uint128         :offset-assert 64)
;    (count-clear   uint64          :offset-assert 80)
;    (mod-count     UNKNOWN 4       :offset-assert 88)
;    (last          UNKNOWN 4       :offset-assert 96)
;    (last-clear    uint128         :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; prototype-h
; (deftype prototype-inline-array-shrub (drawable)
;   ((id      int16           :offset-assert 4)
;    (bsphere vector  :inline :offset-assert 16)
;    (length  int16           :offset-assert 6)
;    (data    UNKNOWN 1       :offset-assert 36)
;    )
;   :method-count-assert 18
;   :size-assert         #x94
;   :flag-assert         #x1200000094
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

;; prototype-h
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub basic   :offset-assert 4)
   (wind-vectors                 uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; prototype-h
; (deftype prototype-bucket-tie (prototype-bucket)
;   ((name                basic                 :offset-assert 4)
;    (flags               uint32                :offset-assert 8)
;    (in-level            uint16                :offset-assert 12)
;    (utextures           uint16                :offset-assert 14)
;    (geometry            UNKNOWN      4        :offset-assert 16)
;    (dists               vector       :inline  :offset-assert 32)
;    (rdists              vector       :inline  :offset-assert 48)
;    (next                UNKNOWN      4        :offset-assert 64)
;    (count               UNKNOWN      4        :offset-assert 80)
;    (near-plane          meters                :offset-assert 32)
;    (near-stiff          meters                :offset-assert 36)
;    (mid-plane           meters                :offset-assert 40)
;    (far-plane           meters                :offset-assert 44)
;    (rlength-near        float                 :offset-assert 48)
;    (rlength-stiff       float                 :offset-assert 52)
;    (rlength-mid         float                 :offset-assert 56)
;    (stiffness           float                 :offset-assert 60)
;    (next-clear          uint128               :offset-assert 64)
;    (count-clear         uint64                :offset-assert 80)
;    (generic-count       UNKNOWN      4        :offset-assert 88)
;    (generic-next        UNKNOWN      4        :offset-assert 96)
;    (frag-count          UNKNOWN      4        :offset-assert 112)
;    (index-start         UNKNOWN      4        :offset-assert 116)
;    (base-qw             UNKNOWN      4        :offset-assert 120)
;    (envmap-rfade        float                 :offset-assert 128)
;    (envmap-fade-far     float                 :offset-assert 132)
;    (envmap-shader       adgif-shader          :offset-assert 136)
;    (collide-frag        basic                 :offset-assert 140)
;    (tie-colors          basic                 :offset-assert 144)
;    (data                UNKNOWN      :dynamic :offset-assert 148)
;    (color-index-qwc     UNKNOWN      :dynamic :offset-assert 148)
;    (generic-next-clear  uint128               :offset-assert 96)
;    (generic-count-clear uint128               :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x94
;   :flag-assert         #x900000094
;   )

;; prototype-h
(deftype prototype-array-tie (array)
  ()
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;; prototype-h
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie basic   :offset-assert 4)
   (wind-vectors        uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; prototype-h
(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (origin       matrix4h :inline :offset-assert 32)
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

; ;; joint-h
; (deftype joint-control-channel (structure)
;   ((parent           basic     :offset-assert 0)
;    (command          basic     :offset-assert 4)
;    (frame-interp     float     :offset-assert 8)
;    (frame-group      basic     :offset-assert 12)
;    (frame-num        float     :offset-assert 16)
;    (num-func         basic     :offset-assert 20)
;    (param            UNKNOWN 2 :offset-assert 24)
;    (group-sub-index  int16     :offset-assert 32)
;    (group-size       int16     :offset-assert 34)
;    (dist             meters    :offset-assert 36)
;    (eval-time        uint32    :offset-assert 40)
;    (inspector-amount float     :offset-assert 44)
;    )
;   :method-count-assert 10
;   :size-assert         #x30
;   :flag-assert         #xa00000030
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; joint-h
; (deftype joint-control (basic)
;   ((status                  uint16           :offset-assert 4)
;    (allocated-length        int16            :offset-assert 6)
;    (root-channel            uint32           :offset-assert 16)
;    (blend-index             int32            :offset-assert 20)
;    (active-channels         int32            :offset-assert 24)
;    (generate-frame-function basic            :offset-assert 28)
;    (prebind-function        basic            :offset-assert 32)
;    (postbind-function       basic            :offset-assert 36)
;    (effect                  basic            :offset-assert 40)
;    (channel                 UNKNOWN :dynamic :offset-assert 48)
;    (frame-group0            basic            :offset-assert 60)
;    (frame-num0              float            :offset-assert 64)
;    (frame-interp0           float            :offset-assert 56)
;    (frame-group1            basic            :offset-assert 108)
;    (frame-num1              float            :offset-assert 112)
;    (frame-interp1           float            :offset-assert 104)
;    (frame-group2            basic            :offset-assert 156)
;    (frame-num2              float            :offset-assert 160)
;    (frame-interp2           float            :offset-assert 152)
;    )
;   :method-count-assert 11
;   :size-assert         #xc0
;   :flag-assert         #xb000000c0
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; joint-h
; (deftype matrix-stack (structure)
;   ((top  matrix     :offset-assert 0)
;    (data UNKNOWN 24 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x610
;   :flag-assert         #x900000610
;   )

; ;; joint-h
; (deftype channel-upload-info (structure)
;   ((fixed     joint-anim-compressed-fixed  :offset-assert 0)
;    (fixed-qwc int32                        :offset-assert 4)
;    (frame     joint-anim-compressed-frame  :offset-assert 8)
;    (frame-qwc int32                        :offset-assert 12)
;    (amount    float                        :offset-assert 16)
;    (interp    float                        :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; joint-h
; (deftype joint-work (structure)
;   ((temp-mtx       matrix                      :inline :offset-assert 0)
;    (joint-stack    matrix-stack                :inline :offset-assert 64)
;    (fix-jmp-table  UNKNOWN                     16      :offset-assert 1616)
;    (frm-jmp-table  UNKNOWN                     16      :offset-assert 1680)
;    (pair-jmp-table UNKNOWN                     16      :offset-assert 1744)
;    (uploads        UNKNOWN                     24      :offset-assert 1808)
;    (num-uploads    int32                               :offset-assert 2384)
;    (mtx-acc        UNKNOWN                     2       :offset-assert 2400)
;    (tq-acc         UNKNOWN                     100     :offset-assert 2528)
;    (jacp-hdr       joint-anim-compressed-hdr   :inline :offset-assert 7328)
;    (fixed-data     joint-anim-compressed-fixed :inline :offset-assert 7392)
;    (frame-data     UNKNOWN                     2       :offset-assert 9600)
;    (flatten-array  UNKNOWN                     576     :offset-assert 2400)
;    (flattened      UNKNOWN                     24      :offset-assert 2400)
;    )
;   :method-count-assert 9
;   :size-assert         #x3640
;   :flag-assert         #x900003640
;   )

; ;; bones-h
; (deftype bone-buffer (structure)
;   ((joint  UNKNOWN 16 :offset-assert 0)
;    (bone   UNKNOWN 16 :offset-assert 1024)
;    (output UNKNOWN 16 :offset-assert 2560)
;    )
;   :method-count-assert 9
;   :size-assert         #x1200
;   :flag-assert         #x900001200
;   )

; ;; bones-h
; (deftype bone-layout (structure)
;   ((data   UNKNOWN 8 :offset-assert 0)
;    (joint  UNKNOWN 2 :offset-assert 0)
;    (bone   UNKNOWN 2 :offset-assert 8)
;    (output UNKNOWN 2 :offset-assert 16)
;    (cache  UNKNOWN 2 :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; bones-h
(deftype bone-regs (structure)
  ((joint-ptr uint32  :offset-assert 0)
   (bone-ptr  uint32  :offset-assert 4)
   (num-bones uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; bones-h
; (deftype bone-work (structure)
;   ((layout     bone-layout :inline :offset-assert 0)
;    (bounds     sphere      :inline :offset-assert 32)
;    (lights     vu-lights   :inline :offset-assert 48)
;    (distance   vector      :inline :offset-assert 160)
;    (next-tag   dma-packet  :inline :offset-assert 176)
;    (dma-buf    basic               :offset-assert 192)
;    (sink-group basic               :offset-assert 196)
;    (next-pris  dma-packet          :offset-assert 200)
;    (next-merc  dma-packet          :offset-assert 204)
;    (wait-count uint32              :offset-assert 208)
;    (in-count   uint32              :offset-assert 212)
;    (sp-size    uint32              :offset-assert 216)
;    (sp-bufnum  uint32              :offset-assert 220)
;    (regs       bone-regs   :inline :offset-assert 224)
;    )
;   :method-count-assert 9
;   :size-assert         #xec
;   :flag-assert         #x9000000ec
;   )

; ;; bones-h
; (deftype bone-debug (structure)
;   ((time-ctr uint32      :offset-assert 0)
;    (timing   UNKNOWN 360 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x5a4
;   :flag-assert         #x9000005a4
;   )

; ;; bones-h
; (deftype bone-memory (structure)
;   ((work     bone-work  :inline :offset-assert 0)
;    (buffer   UNKNOWN    2       :offset-assert 240)
;    (dma-list dma-packet :inline :offset-assert 240)
;    )
;   :method-count-assert 9
;   :size-assert         #x24f0
;   :flag-assert         #x9000024f0
;   )

;; bones-h
(deftype merc-globals (structure)
  ((first uint32  :offset-assert 0)
   (next  uint32  :offset-assert 4)
   (sink  basic   :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; bones-h
; (deftype merc-global-array (structure)
;   ((count   uint32    :offset-assert 0)
;    (globals UNKNOWN 8 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

;; bones-h
(deftype shadow-dma-packet (structure)
  ((tag      generic-merc-tag :inline :offset-assert 0)
   (settings shadow-settings  :inline :offset-assert 16)
   (geo-ref  dma-packet       :inline :offset-assert 96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;; res-h
(deftype res-lump (basic)
  ((length           int32   :offset-assert 4)
   (allocated-length int32   :offset-assert 8)
   (data-base        uint32  :offset-assert 12)
   (data-top         uint32  :offset-assert 16)
   (data-size        int32   :offset-assert 20)
   (extra            basic   :offset-assert 24)
   (tag              uint32  :offset-assert 28)
   )
  :method-count-assert 22
  :size-assert         #x20
  :flag-assert         #x1600000020
  ;; field extra is a basic loaded with a signed load 
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    )
  )

; ;; res
; (deftype res-lump (basic)
;   ()
;   :method-count-assert 22
;   :size-assert         #x20
;   :flag-assert         #x1600000020
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

;; dynamics-h
(deftype dynamics (basic)
  ((name           basic          :offset-assert 4)
   (gravity-max    float         :offset-assert 8) ;; meters
   (gravity-length float         :offset-assert 12) ;; meters
   (gravity        vector :inline :offset-assert 16)
   (gravity-normal vector :inline :offset-assert 32)
   (walk-distance  float         :offset-assert 48)  ;meters
   (run-distance   float         :offset-assert 52) ; meters
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

;; surface-h
(deftype surface (basic)
  ((name              basic      :offset-assert 4)
   ;(data              UNKNOWN 30 :offset-assert 8)
   (turnv             float      :offset-assert 8)
   (turnvv            float      :offset-assert 12)
   (tiltv             float      :offset-assert 16)
   (tiltvv            float      :offset-assert 20)
   (transv-max        float      :offset-assert 24)
   (target-speed      float      :offset-assert 28)
   (seek0             float      :offset-assert 32)
   (seek90            float      :offset-assert 36)
   (seek180           float      :offset-assert 40)
   (fric              float      :offset-assert 44)
   (nonlin-fric-dist  float      :offset-assert 48)
   (slip-factor       float      :offset-assert 52)
   (slide-factor      float      :offset-assert 56)
   (slope-up-factor   float      :offset-assert 60)
   (slope-down-factor float      :offset-assert 64)
   (slope-slip-angle  float      :offset-assert 68)
   (impact-fric       float      :offset-assert 72)
   (bend-factor       float      :offset-assert 76)
   (bend-speed        float      :offset-assert 80)
   (alignv            float      :offset-assert 84)
   (slope-up-traction float      :offset-assert 88)
   (align-speed       float      :offset-assert 92)
   ;(hook              UNKNOWN 4  :offset-assert 128)
   (active-hook       basic      :offset 128)
   (touch-hook        basic      :offset-assert 132)
   (impact-hook       basic      :offset-assert 136)
   (mult-hook         basic      :offset-assert 140)
   ;(dataw             UNKNOWN 2  :offset-assert 144)
   (mode              basic      :offset-assert 144)
   (flags             uint32     :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

; ;; pat-h
; (deftype pat-surface (uint32)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;; likely a bitfield type
;   )

;; pat-h
(deftype pat-mode-info (structure)
  ((name         basic   :offset-assert 0)
   (wall-angle   float   :offset-assert 4)
   (color        uint32  :offset-assert 8)
   (hilite-color uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; fact-h
(deftype fact-bank (basic)
  ((eco-level-max        float     :offset-assert 4)
   (eco-single-inc       float     :offset-assert 8)
   (eco-full-inc         float     :offset-assert 12)
   (eco-single-timeout   uint64  :offset-assert 16) ; usec
   (eco-full-timeout     uint64  :offset-assert 24) ; usec
   (dummy                uint64  :offset-assert 32) ; usec
   (health-max-default   float     :offset-assert 40)
   (health-single-inc    float     :offset-assert 44)
   (eco-pill-max-default float     :offset-assert 48)
   (health-small-inc     float     :offset-assert 52)
   (buzzer-max-default   float     :offset-assert 56)
   (buzzer-single-inc    float     :offset-assert 60)
   (suck-bounce-dist     float    :offset-assert 64) ; meters
   (suck-suck-dist       float    :offset-assert 68) ; meters
   (default-pill-inc     float     :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; fact-h
(deftype fact-info (basic)
  ((process             basic   :offset-assert 4)
   (pickup-type         int32   :offset-assert 8)
   (pickup-amount       float   :offset-assert 12)
   (pickup-spawn-amount float   :offset-assert 16)
   (options             uint64  :offset-assert 24)
   (fade-time           uint64  :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; fact-h
(deftype fact-info-target (fact-info)
  ((eco-type              int32     :offset-assert 40)
   (eco-level             float     :offset-assert 44)
   (eco-pickup-time       uint64    :offset-assert 48)
   (eco-timeout           uint64  :offset-assert 56) ;; usec
   (health                float     :offset-assert 64)
   (health-max            float     :offset-assert 68)
   (buzzer                float     :offset-assert 72)
   (buzzer-max            float     :offset-assert 76)
   (eco-pill              float     :offset-assert 80)
   (eco-pill-max          float     :offset-assert 84)
   (health-pickup-time    uint64    :offset-assert 88)
   (eco-source            uint64    :offset-assert 96)
   (eco-source-time       uint64    :offset-assert 104)
   (money-pickup-time     uint64    :offset-assert 112)
   (buzzer-pickup-time    uint64    :offset-assert 120)
   (fuel-cell-pickup-time uint64    :offset-assert 128)
   (eco-pill-pickup-time  uint64    :offset-assert 136)
   )
  :method-count-assert 12
  :size-assert         #x90
  :flag-assert         #xc00000090
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; fact-h
(deftype fact-info-enemy (fact-info)
  ((speed               float   :offset-assert 40)
   (idle-distance       float  :offset-assert 44) ; meters 
   (notice-top          float  :offset-assert 48) ; meters 
   (notice-bottom       float  :offset-assert 52) ; meters 
   (cam-horz            float  :offset-assert 56) ; meters 
   (cam-vert            float  :offset-assert 60) ; meters 
   (cam-notice-dist     float  :offset-assert 64) ; meters 
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

; ;; aligner-h
; (deftype align-control (basic)
;   ((flags       uint32             :offset-assert 4)
;    (process     basic              :offset-assert 8)
;    (frame-group basic              :offset-assert 12)
;    (frame-num   float              :offset-assert 16)
;    (matrix      UNKNOWN    2       :offset-assert 32)
;    (transform   UNKNOWN    2       :offset-assert 160)
;    (delta       transformq :inline :offset-assert 256)
;    (last-speed  meters             :offset-assert 304)
;    (align       transformq :inline :offset-assert 160)
;    )
;   :method-count-assert 14
;   :size-assert         #x134
;   :flag-assert         #xe00000134
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

;; game-h
(deftype process-drawable (process)
  ((root        basic   :offset-assert 112)
   (node-list   basic   :offset-assert 116)
   (draw        basic   :offset-assert 120)
   (skel        basic   :offset-assert 124)
   (nav         basic   :offset-assert 128)
   (align       basic   :offset-assert 132)
   (path        basic   :offset-assert 136)
   (vol         basic   :offset-assert 140)
   (fact        basic   :offset-assert 144)
   (link        basic   :offset-assert 148)
   (part        basic   :offset-assert 152)
   (water       basic   :offset-assert 156)
   (sound       basic   :offset-assert 160)
   (state-flags uint32  :offset-assert 164)
   (state-time  uint64  :offset-assert 168)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  ;; inherited inpspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    )
  )

; ;; game-h
; (deftype process-drawable-reserved (process-drawable)
;   ()
;   :method-count-assert 63
;   :size-assert         #xb0
;   :flag-assert         #x3f004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     )
;   )

;; game-h
(deftype attack-info (structure)
  ((trans        vector :inline :offset-assert 0)
   (vector       vector :inline :offset-assert 16)
   (intersection vector :inline :offset-assert 32)
   (attacker     uint64         :offset-assert 48) ;; handle
   (invinc-time  uint64         :offset-assert 56)
   (mask         uint32         :offset-assert 64)
   (mode         basic          :offset-assert 68)
   (shove-back   float         :offset-assert 72) ;; meters
   (shove-up     float         :offset-assert 76) ;; meters
   (speed        float         :offset-assert 80) ;; meters
   (dist         float         :offset-assert 84) ;; meters
   (control      float          :offset-assert 88)
   (angle        basic          :offset-assert 92)
   (rotate-to    float            :offset-assert 96) ;; deg
   (prev-state   basic          :offset-assert 100)
   )
  :method-count-assert 10
  :size-assert         #x68
  :flag-assert         #xa00000068
  ;; field handle is likely a value type
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; game-h
; (deftype ground-tween-info (structure)
;   ((chan  UNKNOWN 3 :offset-assert 0)
;    (blend UNKNOWN 3 :offset-assert 4)
;    (group UNKNOWN 5 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x24
;   :flag-assert         #x900000024
;   )

; ;; generic-obs-h
; (deftype manipy (process-drawable)
;   ((~Tnew-trans-hook       basic           :offset-assert 176)
;    (~Tcur-trans-hook       basic           :offset-assert 180)
;    (~Tcur-event-hook       basic           :offset-assert 184)
;    (~Tnew-joint-anim       basic           :offset-assert 188)
;    (~Tnew-joint-anim-blend uint64          :offset-assert 192)
;    (~Tanim-mode            basic           :offset-assert 200)
;    (~Tcur-grab-handle      uint64          :offset-assert 208)
;    (~Tcur-target-handle    uint64          :offset-assert 216)
;    (~Told-grab-pos         vector  :inline :offset-assert 224)
;    (~Tjoint                UNKNOWN 4       :offset-assert 240)
;    (~Tnew-post-hook        basic           :offset-assert 256)
;    (~Tcur-post-hook        basic           :offset-assert 260)
;    (~Tclone-copy-trans     basic           :offset-assert 264)
;    (~Tshadow-backup        basic           :offset-assert 268)
;    (~Tdraw?                basic           :offset-assert 272)
;    )
;   :method-count-assert 20
;   :size-assert         #x114
;   :flag-assert         #x1400b00114
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

;; generic-obs-h
(deftype part-spawner (process-drawable)
  ((~Tmode         uint32         :offset-assert 176)
   (~Tenable       basic          :offset-assert 180)
   (~Tradius       float         :offset-assert 184) ; meters
   (~Tworld-sphere sphere :inline :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15006000d0
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    )
  )

; ;; generic-obs-h
; (deftype part-tracker (process)
;   ()
;   :method-count-assert 14
;   :size-assert         #xf8
;   :flag-assert         #xe009000f8
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

;; generic-obs-h
(deftype camera-tracker (process)
  (
   ;(~Tname            basic   :offset-assert 4)
   (~Tgrab-target     uint64  :offset 120)
   (~Tgrab-event      basic   :offset-assert 128)
   (~Trelease-event   basic   :offset-assert 132)
   (~Told-global-mask uint32  :offset-assert 136)
   (~Told-self-mask   uint32  :offset-assert 140)
   (~Told-parent-mask uint32  :offset-assert 144)
   (~Tlook-at-target  uint64  :offset-assert 152)
   (~Tpov-target      uint64  :offset-assert 160)
   (~Twork-process    uint64  :offset-assert 168)
   (~Tanim-process    uint64  :offset-assert 176)
   (~Tstart-time      uint64  :offset-assert 184)
   (~Tcallback        basic   :offset-assert 192)
   (~Tuserdata        basic   :offset-assert 196)
   (~Tmessage         basic   :offset-assert 200)
   (~Tborder-value    basic   :offset-assert 204)
   (~Tmask-to-clear   uint32  :offset-assert 208)
   (~Tscript          basic   :offset-assert 212)
   (~Tscript-line     basic   :offset-assert 216)
   (~Tscript-func     basic   :offset-assert 220)
   )
  :heap-base #x70
  :method-count-assert 15
  :size-assert         #xe0
  :flag-assert         #xf007000e0
  ;; inherited inpspect of processfield ~Tuserdata is a basic loaded with a signed load 
  (:methods
    (dummy-14 () none 14)
    )
  )

;; generic-obs-h
(deftype touch-tracker (process-drawable)
  ((~Tduration     uint64  :offset-assert 176)
   (~Ttarget       uint64  :offset-assert 184)
   (~Tevent        basic   :offset-assert 192)
   (~Trun-function basic   :offset-assert 196)
   (~Tcallback     basic   :offset-assert 200)
   (~Tevent-mode   basic   :offset-assert 204)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14006000d0
  ;; inherited inpspect of process-drawable
  )

;; generic-obs-h
(deftype swingpole (process)
  ((~Troot        basic          :offset-assert 112)
   (~Tdir         vector :inline :offset-assert 128)
   (~Trange       float         :offset-assert 144) ;; meters
   (~Tedge-length float         :offset-assert 148) ;; meters
   )
  :heap-base #x30
  :method-count-assert 14
  :size-assert         #x98
  :flag-assert         #xe00300098
  ;; inherited inpspect of process
  )

;; generic-obs-h
(deftype gui-query (structure)
  ((x-position        int32  :offset-assert 0)
   (y-position        int32  :offset-assert 4)
   (message           basic  :offset-assert 8)
   (decision          basic  :offset-assert 12)
   (only-allow-cancel basic  :offset-assert 16)
   (no-msg            basic  :offset-assert 20)
   (message-space     int32  :offset-assert 24)
   )
  :pack-me
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; generic-obs-h
(deftype othercam (process)
  ((~Thand              uint64         :offset-assert 112)
   (~Told-global-mask   uint32         :offset-assert 120)
   (~Tmask-to-clear     uint32         :offset-assert 124)
   (~Tcam-joint-index   int32          :offset-assert 128)
   (~Told-pos           vector :inline :offset-assert 144)
   (~Told-mat-z         vector :inline :offset-assert 160)
   (~Thad-valid-frame   basic          :offset-assert 176)
   (~Tborder-value      basic          :offset-assert 180)
   (~Tdie?              basic          :offset-assert 184)
   (~Tsurvive-anim-end? basic          :offset-assert 188)
   (~Tspooling?         basic          :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 14
  :size-assert         #xc4
  :flag-assert         #xe006000c4
  ;; inherited inpspect of process
  )

;; generic-obs-h
(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  (:methods
    (dummy-14 () none 14)
    )
  )

;; pov-camera-h
(deftype pov-camera (process-drawable)
  ((~Tflags               int32   :offset-assert 176)
   (~Tdebounce-start-time uint64  :offset-assert 184)
   (~Tnotify-handle       uint64  :offset-assert 192)
   (~Tanim-name           basic   :offset-assert 200)
   (~Tcommand-list        basic   :offset-assert 204)
   (~Tmask-to-clear       uint32  :offset-assert 208)
   (~Tmusic-volume-movie  float   :offset-assert 212)
   (~Tsfx-volume-movie    float   :offset-assert 216)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

;; sync-info-h
(deftype sync-info (structure)
  ((offset float   :offset-assert 0)
   (period uint32  :offset-assert 4)
   )
  :method-count-assert 18
  :size-assert         #x8
  :flag-assert         #x1200000008
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; sync-info-h
(deftype sync-info-eased (sync-info)
  ((tlo    float   :offset-assert 8)
   (thi    float   :offset-assert 12)
   (ylo    float   :offset-assert 16)
   (m2     float   :offset-assert 20)
   (yend   float   :offset-assert 24)
   )
  :method-count-assert 18
  :size-assert         #x1c
  :flag-assert         #x120000001c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; sync-info-h
(deftype sync-info-paused (sync-info)
  ((pause-after-out float   :offset-assert 8)
   (pause-after-in  float   :offset-assert 12)
   )
  :method-count-assert 18
  :size-assert         #x10
  :flag-assert         #x1200000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; sync-info-h
(deftype delayed-rand-float (structure)
  ((min-time   int32   :offset-assert 0)
   (max-time   int32   :offset-assert 4)
   (max-val    float   :offset-assert 8)
   (timer      int32   :offset-assert 12)
   (start-time uint64  :offset-assert 16)
   (value      float   :offset-assert 24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; sync-info-h
(deftype oscillating-float (structure)
  ((value   float  :offset-assert 0)
   (target  float  :offset-assert 4)
   (vel     float  :offset-assert 8)
   (max-vel float  :offset-assert 12)
   (damping float  :offset-assert 16)
   (accel   float  :offset-assert 20)
   )
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; sync-info-h
(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert 0)
   (max-value  float                     :offset-assert 24)
   (min-value  float                     :offset-assert 28)
   (elasticity float                     :offset-assert 32)
   (state      int32                     :offset-assert 36)
   )
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; sync-info-h
(deftype delayed-rand-vector (structure)
  ((min-time   int32          :offset-assert 0)
   (max-time   int32          :offset-assert 4)
   (xz-max     float          :offset-assert 8)
   (y-max      float          :offset-assert 12)
   (timer      int32          :offset-assert 16)
   (start-time uint64         :offset-assert 24)
   (value      vector :inline :offset-assert 32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; sync-info-h
(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert 0)
   (target  vector :inline :offset-assert 16)
   (vel     vector :inline :offset-assert 32)
   (max-vel float          :offset-assert 48)
   (damping float          :offset-assert 52)
   (accel   float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; smush-control-h
(deftype smush-control (structure)
  ((start-time  uint64  :offset-assert 0)
   (period      float   :offset-assert 8)
   (duration    float   :offset-assert 12)
   (amp         float   :offset-assert 16)
   (damp-amp    float   :offset-assert 20)
   (damp-period float   :offset-assert 24)
   (ticks       float   :offset-assert 28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    )
  )

  ;; trajectory-h
  (deftype trajectory (structure)
    ((initial-position vector :inline :offset-assert 0)
     (initial-velocity vector :inline :offset-assert 16)
     (time             float          :offset-assert 32)
     (gravity          float          :offset-assert 36) ;; meters
     )
    :method-count-assert 16
    :size-assert         #x28
    :flag-assert         #x1000000028
    (:methods
      (dummy-9 () none 9)
      (dummy-10 () none 10)
      (dummy-11 () none 11)
      (dummy-12 () none 12)
      (dummy-13 () none 13)
      (dummy-14 () none 14)
      (dummy-15 () none 15)
      )
    )

;; debug-h
(deftype pos-history (structure)
  ((points     uint32  :offset-assert 0)
   (num-points int32   :offset-assert 4)
   (h-first    int32   :offset-assert 8)
   (h-last     int32   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; debug-h
(deftype debug-vertex (structure)
  ((trans  vector4w :inline :offset-assert 0)
   (normal vector3h :inline :offset-assert 16)
   (st     vector2h :inline :offset-assert 22)
   (color  uint32           :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; debug-h
; (deftype debug-vertex-stats (basic)
;   ((length    int32       :offset-assert 4)
;    (pos-count int32       :offset-assert 8)
;    (vertex    UNKNOWN 600 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x4b10
;   :flag-assert         #x900004b10
;   )

;; joint-mod-h
(deftype joint-mod (basic)
  ((mode            uint32             :offset-assert 4)
   (process         basic              :offset-assert 8)
   (joint           cspace             :offset-assert 12)
   (target          vector     :inline :offset-assert 16)
   (twist           vector     :inline :offset-assert 32)
   (twist-max       vector     :inline :offset-assert 48)
   (trans           vector     :inline :offset-assert 64)
   (quat            quaternion :inline :offset-assert 80)
   (scale           vector     :inline :offset-assert 96)
   (notice-time     uint64             :offset-assert 112)
   (flex-blend      float              :offset-assert 120)
   (blend           float              :offset-assert 124)
   (max-dist        float             :offset-assert 128) ;; meters
   (ignore-angle    float                :offset-assert 132) ;; deg
   (up              uint8              :offset-assert 136)
   (nose            uint8              :offset-assert 137)
   (ear             uint8              :offset-assert 138)
   (shutting-down?  basic              :offset-assert 140)
   (parented-scale? basic              :offset 128)
   )
  :method-count-assert 16
  :size-assert         #x90
  :flag-assert         #x1000000090
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; joint-mod-h
(deftype try-to-look-at-info (basic)
  ((who  uint64  :offset-assert 8)
   (horz float   :offset-assert 16)
   (vert float   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; joint-mod-h
(deftype joint-mod-wheel (basic)
  ((last-position vector :inline :offset-assert 16)
   (angle         float          :offset-assert 32)
   (process       basic          :offset-assert 36)
   (wheel-radius  float          :offset-assert 40)
   (wheel-axis    int8           :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x2d
  :flag-assert         #x90000002d
  )

;; joint-mod-h
(deftype joint-mod-set-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (set-rotation    basic              :offset-assert 64)
   (set-scale       basic              :offset-assert 68)
   (set-translation basic              :offset-assert 72)
   (enable          basic              :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; joint-mod-h
(deftype joint-mod-set-world (basic)
  ((transform  transformq :inline :offset-assert 16)
   (node-index int32              :offset-assert 64)
   (enable     basic              :offset-assert 68)
   )
  :method-count-assert 9
  :size-assert         #x48
  :flag-assert         #x900000048
  )

;; joint-mod-h
(deftype joint-mod-blend-local (basic)
  ((transform       transformq :inline :offset-assert 16)
   (blend-transform transformq :inline :offset-assert 64)
   (node-index      int32              :offset-assert 112)
   (blend           float              :offset-assert 116)
   (enable          basic              :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

;; joint-mod-h
(deftype joint-mod-spinner (basic)
  ((spin-axis vector :inline :offset-assert 16)
   (angle     float          :offset-assert 32)
   (spin-rate float          :offset-assert 36)
   (enable    basic          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

; ;; collide-mesh-h
; (deftype collide-tri-result (structure)
;   ((vertex    UNKNOWN 3       :offset-assert 0)
;    (intersect vector  :inline :offset-assert 48)
;    (normal    vector  :inline :offset-assert 64)
;    (pat       uint32          :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x54
;   :flag-assert         #x900000054
;   )

; ;; collide-mesh-h
; (deftype collide-mesh-tri (structure)
;   ((vertex-index UNKNOWN 3 :offset-assert 0)
;    (unused       uint8     :offset-assert 3)
;    (pat          uint32    :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; collide-mesh-h
; (deftype collide-mesh (basic)
;   ((joint-id    int32     :offset-assert 4)
;    (num-tris    uint32    :offset-assert 8)
;    (num-verts   uint32    :offset-assert 12)
;    (vertex-data uint32    :offset-assert 16)
;    (tris        UNKNOWN 1 :offset-assert 32)
;    )
;   :method-count-assert 16
;   :size-assert         #x28
;   :flag-assert         #x1000000028
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     )
;   )

; ;; collide-mesh-h
; (deftype collide-mesh-cache (basic)
;   ((used-size uint32        :offset-assert 4)
;    (max-size  uint32        :offset-assert 8)
;    (id        uint64        :offset-assert 16)
;    (data      UNKNOWN 40960 :offset-assert 32)
;    )
;   :method-count-assert 12
;   :size-assert         #xa020
;   :flag-assert         #xc0000a020
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; collide-mesh-h
; (deftype collide-mesh-cache-tri (structure)
;   ((vertex UNKNOWN        3       :offset-assert 0)
;    (normal vector         :inline :offset-assert 48)
;    (bbox4w bounding-box4w :inline :offset-assert 64)
;    (pat    uint32                 :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

;; collide-shape-h
(deftype collide-sticky-rider (structure)
  ((rider-handle    uint64         :offset-assert 0)
   (sticky-prim     basic          :offset-assert 8)
   (prim-ry         float          :offset-assert 12)
   (rider-local-pos vector :inline :offset-assert 16)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; collide-shape-h
; (deftype collide-sticky-rider-group (basic)
;   ((num-riders       int32     :offset-assert 4)
;    (allocated-riders int32     :offset-assert 8)
;    (rider            UNKNOWN 1 :offset-assert 16)
;    )
;   :method-count-assert 11
;   :size-assert         #x30
;   :flag-assert         #xb00000030
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

;; collide-shape-h
(deftype pull-rider-info (structure)
  ((rider          collide-sticky-rider         :offset-assert 0)
   (rider-cshape   basic                        :offset-assert 4)
   (rider-delta-ry float                        :offset-assert 8)
   (rider-dest     vector               :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; collide-shape-h
; (deftype collide-shape-intersect (basic)
;   ((move-vec       vector             :inline :offset-assert 16)
;    (best-u         float                      :offset-assert 32)
;    (best-tri       collide-tri-result :inline :offset-assert 48)
;    (best-from-prim basic                      :offset-assert 132)
;    (best-to-prim   basic                      :offset-assert 136)
;    )
;   :method-count-assert 10
;   :size-assert         #x8c
;   :flag-assert         #xa0000008c
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-overlap-result (structure)
;   ((best-dist      float                      :offset-assert 0)
;    (best-from-prim basic                      :offset-assert 4)
;    (best-to-prim   basic                      :offset-assert 8)
;    (best-from-tri  collide-tri-result :inline :offset-assert 16)
;    )
;   :method-count-assert 10
;   :size-assert         #x64
;   :flag-assert         #xa00000064
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; collide-shape-h
; (deftype overlaps-others-params (structure)
;   ((options uint32  :offset-assert 0)
;    (tlist   basic   :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; collide-shape-h
; (deftype collide-prim-core (structure)
;   ((world-sphere vector  :inline :offset-assert 0)
;    (collide-as   uint64          :offset-assert 16)
;    (action       uint32          :offset-assert 24)
;    (offense      int8            :offset-assert 28)
;    (prim-type    int8            :offset-assert 29)
;    (extra        UNKNOWN 2       :offset-assert 30)
;    (quad         UNKNOWN 2       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; collide-shape-h
; (deftype collide-shape-prim (basic)
;   ((cshape          basic                     :offset-assert 4)
;    (prim-id         uint32                    :offset-assert 8)
;    (transform-index int8                      :offset-assert 12)
;    (prim-core       collide-prim-core :inline :offset-assert 16)
;    (local-sphere    vector            :inline :offset-assert 48)
;    (collide-with    uint64                    :offset-assert 64)
;    (world-sphere    vector            :inline :offset-assert 16)
;    (collide-as      uint64                    :offset-assert 32)
;    (action          uint32                    :offset-assert 40)
;    (offense         int8                      :offset-assert 44)
;    (prim-type       int8                      :offset-assert 45)
;    (radius          meters                    :offset-assert 60)
;    )
;   :method-count-assert 28
;   :size-assert         #x48
;   :flag-assert         #x1c00000048
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-shape-prim-sphere (collide-shape-prim)
;   ((cshape          basic                     :offset-assert 4)
;    (prim-id         uint32                    :offset-assert 8)
;    (transform-index int8                      :offset-assert 12)
;    (prim-core       collide-prim-core :inline :offset-assert 16)
;    (local-sphere    vector            :inline :offset-assert 48)
;    (collide-with    uint64                    :offset-assert 64)
;    (world-sphere    vector            :inline :offset-assert 16)
;    (collide-as      uint64                    :offset-assert 32)
;    (action          uint32                    :offset-assert 40)
;    (offense         int8                      :offset-assert 44)
;    (prim-type       int8                      :offset-assert 45)
;    (radius          meters                    :offset-assert 60)
;    (pat             uint32                    :offset-assert 72)
;    )
;   :method-count-assert 28
;   :size-assert         #x4c
;   :flag-assert         #x1c0000004c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-shape-prim-mesh (collide-shape-prim)
;   ((cshape          basic                     :offset-assert 4)
;    (prim-id         uint32                    :offset-assert 8)
;    (transform-index int8                      :offset-assert 12)
;    (prim-core       collide-prim-core :inline :offset-assert 16)
;    (local-sphere    vector            :inline :offset-assert 48)
;    (collide-with    uint64                    :offset-assert 64)
;    (world-sphere    vector            :inline :offset-assert 16)
;    (collide-as      uint64                    :offset-assert 32)
;    (action          uint32                    :offset-assert 40)
;    (offense         int8                      :offset-assert 44)
;    (prim-type       int8                      :offset-assert 45)
;    (radius          meters                    :offset-assert 60)
;    (mesh            basic                     :offset-assert 72)
;    (mesh-id         int32                     :offset-assert 76)
;    (mesh-cache-id   uint64                    :offset-assert 80)
;    (mesh-cache-tris uint32                    :offset-assert 88)
;    )
;   :method-count-assert 29
;   :size-assert         #x5c
;   :flag-assert         #x1d0000005c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-shape-prim-group (collide-shape-prim)
;   ((cshape          basic                     :offset-assert 4)
;    (prim-id         uint32                    :offset-assert 8)
;    (transform-index int8                      :offset-assert 12)
;    (prim-core       collide-prim-core :inline :offset-assert 16)
;    (local-sphere    vector            :inline :offset-assert 48)
;    (collide-with    uint64                    :offset-assert 64)
;    (world-sphere    vector            :inline :offset-assert 16)
;    (collide-as      uint64                    :offset-assert 32)
;    (action          uint32                    :offset-assert 40)
;    (offense         int8                      :offset-assert 44)
;    (prim-type       int8                      :offset-assert 45)
;    (radius          meters                    :offset-assert 60)
;    (num-prims       int32                     :offset-assert 72)
;    (allocated-prims int32                     :offset-assert 76)
;    (prim            UNKNOWN           1       :offset-assert 80)
;    )
;   :method-count-assert 30
;   :size-assert         #x54
;   :flag-assert         #x1e00000054
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-shape (trsqv)
;   ((trans                 vector     :inline :offset-assert 16)
;    (rot                   vector     :inline :offset-assert 32)
;    (scale                 vector     :inline :offset-assert 48)
;    (quat                  quaternion :inline :offset-assert 32)
;    (pause-adjust-distance meters             :offset-assert 4)
;    (nav-radius            meters             :offset-assert 8)
;    (transv                vector     :inline :offset-assert 64)
;    (rotv                  vector     :inline :offset-assert 80)
;    (scalev                vector     :inline :offset-assert 96)
;    (dir-targ              quaternion :inline :offset-assert 112)
;    (angle-change-time     uint64             :offset-assert 128)
;    (old-y-angle-diff      float              :offset-assert 136)
;    (process               basic              :offset-assert 140)
;    (max-iteration-count   uint8              :offset-assert 144)
;    (nav-flags             uint8              :offset-assert 145)
;    (pad-byte              UNKNOWN    2       :offset-assert 146)
;    (pat-ignore-mask       uint32             :offset-assert 148)
;    (event-self            basic              :offset-assert 152)
;    (event-other           basic              :offset-assert 156)
;    (root-prim             basic              :offset-assert 160)
;    (riders                basic              :offset-assert 164)
;    (backup-collide-as     uint64             :offset-assert 168)
;    (backup-collide-with   uint64             :offset-assert 176)
;    )
;   :method-count-assert 56
;   :size-assert         #xb8
;   :flag-assert         #x38000000b8
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     )
;   )

; ;; collide-shape-h
; (deftype collide-shape-moving (collide-shape)
;   ((trans                 vector     :inline :offset-assert 16)
;    (rot                   vector     :inline :offset-assert 32)
;    (scale                 vector     :inline :offset-assert 48)
;    (quat                  quaternion :inline :offset-assert 32)
;    (pause-adjust-distance meters             :offset-assert 4)
;    (nav-radius            meters             :offset-assert 8)
;    (transv                vector     :inline :offset-assert 64)
;    (rotv                  vector     :inline :offset-assert 80)
;    (scalev                vector     :inline :offset-assert 96)
;    (dir-targ              quaternion :inline :offset-assert 112)
;    (angle-change-time     uint64             :offset-assert 128)
;    (old-y-angle-diff      float              :offset-assert 136)
;    (process               basic              :offset-assert 140)
;    (max-iteration-count   uint8              :offset-assert 144)
;    (nav-flags             uint8              :offset-assert 145)
;    (pad-byte              UNKNOWN    2       :offset-assert 146)
;    (pat-ignore-mask       uint32             :offset-assert 148)
;    (event-self            basic              :offset-assert 152)
;    (event-other           basic              :offset-assert 156)
;    (root-prim             basic              :offset-assert 160)
;    (riders                basic              :offset-assert 164)
;    (backup-collide-as     uint64             :offset-assert 168)
;    (backup-collide-with   uint64             :offset-assert 176)
;    (rider-time            uint64             :offset-assert 184)
;    (rider-last-move       vector     :inline :offset-assert 192)
;    (trans-old             UNKNOWN    3       :offset-assert 208)
;    (poly-pat              uint32             :offset-assert 256)
;    (cur-pat               uint32             :offset-assert 260)
;    (ground-pat            uint32             :offset-assert 264)
;    (status                uint64             :offset-assert 272)
;    (old-status            uint64             :offset-assert 280)
;    (prev-status           uint64             :offset-assert 288)
;    (reaction-flag         uint32             :offset-assert 296)
;    (reaction              basic              :offset-assert 300)
;    (no-reaction           basic              :offset-assert 304)
;    (local-normal          vector     :inline :offset-assert 320)
;    (surface-normal        vector     :inline :offset-assert 336)
;    (poly-normal           vector     :inline :offset-assert 352)
;    (ground-poly-normal    vector     :inline :offset-assert 368)
;    (ground-touch-point    vector     :inline :offset-assert 384)
;    (shadow-pos            vector     :inline :offset-assert 400)
;    (ground-impact-vel     meters             :offset-assert 416)
;    (surface-angle         float              :offset-assert 420)
;    (poly-angle            float              :offset-assert 424)
;    (touch-angle           float              :offset-assert 428)
;    (coverage              float              :offset-assert 432)
;    (dynam                 basic              :offset-assert 436)
;    (surf                  basic              :offset-assert 440)
;    )
;   :method-count-assert 65
;   :size-assert         #x1bc
;   :flag-assert         #x41000001bc
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     )
;   )

;; collide-target-h
(deftype collide-history (structure)
  ((intersect      vector :inline :offset-assert 0)
   (trans          vector :inline :offset-assert 16)
   (transv         vector :inline :offset-assert 32)
   (transv-out     vector :inline :offset-assert 48)
   (local-normal   vector :inline :offset-assert 64)
   (surface-normal vector :inline :offset-assert 80)
   (time           uint64         :offset-assert 96)
   (status         uint64         :offset-assert 104)
   (pat            uint32         :offset-assert 112)
   (reaction-flag  uint32         :offset-assert 116)
   )
  :method-count-assert 10
  :size-assert         #x78
  :flag-assert         #xa00000078
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; collide-touch-h
; (deftype touching-prim (structure)
;   ((cprim    basic                      :offset-assert 0)
;    (has-tri? basic                      :offset-assert 4)
;    (tri      collide-tri-result :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x64
;   :flag-assert         #x900000064
;   )

; ;; collide-touch-h
; (deftype touching-prims-entry (structure)
;   ((next       touching-prims-entry         :offset-assert 0)
;    (prev       touching-prims-entry         :offset-assert 4)
;    (allocated? basic                        :offset-assert 8)
;    (u          float                        :offset-assert 12)
;    (prim1      touching-prim        :inline :offset-assert 16)
;    (prim2      touching-prim        :inline :offset-assert 128)
;    )
;   :method-count-assert 13
;   :size-assert         #xe4
;   :flag-assert         #xd000000e4
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; collide-touch-h
; (deftype touching-prims-entry-pool (structure)
;   ((head  touching-prims-entry    :offset-assert 0)
;    (nodes UNKNOWN              64 :offset-assert 16)
;    )
;   :method-count-assert 13
;   :size-assert         #x3c10
;   :flag-assert         #xd00003c10
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; collide-touch-h
; (deftype touching-shapes-entry (structure)
;   ((cshape1   basic                 :offset-assert 0)
;    (cshape2   basic                 :offset-assert 4)
;    (resolve-u int8                  :offset-assert 8)
;    (head      touching-prims-entry  :offset-assert 12)
;    )
;   :method-count-assert 18
;   :size-assert         #x10
;   :flag-assert         #x1200000010
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; collide-touch-h
; (deftype touching-list (structure)
;   ((num-touching-shapes int32      :offset-assert 0)
;    (resolve-u           int8       :offset-assert 4)
;    (touching-shapes     UNKNOWN 32 :offset-assert 8)
;    )
;   :method-count-assert 15
;   :size-assert         #x208
;   :flag-assert         #xf00000208
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; collide-edge-grab-h
; (deftype edge-grab-info (structure)
;   ((world-vertex             UNKNOWN 6       :offset-assert 0)
;    (local-vertex             UNKNOWN 6       :offset-assert 96)
;    (actor-cshape-prim-offset int32           :offset-assert 192)
;    (actor-handle             uint64          :offset-assert 200)
;    (hanging-matrix           matrix  :inline :offset-assert 208)
;    (edge-vertex              UNKNOWN 2       :offset-assert 0)
;    (center-hold              vector  :inline :offset-assert 32)
;    (tri-vertex               UNKNOWN 3       :offset-assert 48)
;    (left-hand-hold           vector  :inline :offset-assert 272)
;    (right-hand-hold          vector  :inline :offset-assert 288)
;    (center-hold-old          vector  :inline :offset-assert 304)
;    (edge-tri-pat             uint32          :offset-assert 320)
;    )
;   :method-count-assert 11
;   :size-assert         #x144
;   :flag-assert         #xb00000144
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; collide-edge-grab-h
; (deftype collide-edge-tri (structure)
;   ((ctri   collide-cache-tri         :offset-assert 0)
;    (normal vector            :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; collide-edge-grab-h
; (deftype collide-edge-edge (structure)
;   ((ignore        basic                    :offset-assert 0)
;    (etri          collide-edge-tri         :offset-assert 4)
;    (vertex-ptr    UNKNOWN          2       :offset-assert 8)
;    (outward       vector           :inline :offset-assert 16)
;    (edge-vec-norm vector           :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; collide-edge-grab-h
; (deftype collide-edge-hold-item (structure)
;   ((next       collide-edge-hold-item         :offset-assert 0)
;    (rating     float                          :offset-assert 4)
;    (split      int8                           :offset-assert 8)
;    (edge       collide-edge-edge              :offset-assert 12)
;    (center-pt  vector                 :inline :offset-assert 16)
;    (outward-pt vector                 :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; collide-edge-grab-h
; (deftype collide-edge-hold-list (structure)
;   ((num-allocs   uint32                    :offset-assert 0)
;    (num-attempts uint32                    :offset-assert 4)
;    (head         collide-edge-hold-item    :offset-assert 8)
;    (items        UNKNOWN                32 :offset-assert 16)
;    (attempts     UNKNOWN                32 :offset-assert 1552)
;    )
;   :method-count-assert 11
;   :size-assert         #x810
;   :flag-assert         #xb00000810
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; collide-edge-grab-h
; (deftype collide-edge-work (structure)
;   ((ccache                       basic                          :offset-assert 0)
;    (cshape                       basic                          :offset-assert 4)
;    (num-verts                    uint32                         :offset-assert 8)
;    (num-edges                    uint32                         :offset-assert 12)
;    (num-tris                     uint32                         :offset-assert 16)
;    (cache-fill-box               bounding-box           :inline :offset-assert 32)
;    (within-reach-box             bounding-box           :inline :offset-assert 64)
;    (within-reach-box4w           bounding-box4w         :inline :offset-assert 96)
;    (search-pt                    vector                 :inline :offset-assert 128)
;    (search-dir-vec               vector                 :inline :offset-assert 144)
;    (max-dist-sqrd-to-outward-pt  float                          :offset-assert 160)
;    (max-dir-cosa-delta           float                          :offset-assert 164)
;    (split-dists                  UNKNOWN                2       :offset-assert 168)
;    (outward-offset               vector                 :inline :offset-assert 176)
;    (local-cache-fill-box         bounding-box           :inline :offset-assert 192)
;    (local-within-reach-box       bounding-box           :inline :offset-assert 224)
;    (local-player-spheres         UNKNOWN                12      :offset-assert 256)
;    (world-player-spheres         UNKNOWN                12      :offset-assert 448)
;    (local-player-hanging-spheres UNKNOWN                6       :offset-assert 256)
;    (world-player-hanging-spheres UNKNOWN                6       :offset-assert 448)
;    (local-player-leap-up-spheres UNKNOWN                6       :offset-assert 352)
;    (world-player-leap-up-spheres UNKNOWN                6       :offset-assert 544)
;    (verts                        UNKNOWN                64      :offset-assert 640)
;    (edges                        UNKNOWN                96      :offset-assert 1664)
;    (tris                         UNKNOWN                48      :offset-assert 6272)
;    (hold-list                    collide-edge-hold-list :inline :offset-assert 7808)
;    )
;   :method-count-assert 20
;   :size-assert         #x2690
;   :flag-assert         #x1400002690
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; effect-control-h
; (deftype effect-control (basic)
;   ((process          basic   :offset-assert 4)
;    (flags            uint32  :offset-assert 8)
;    (last-frame-group basic   :offset-assert 12)
;    (last-frame-num   float   :offset-assert 16)
;    (channel-offset   int32   :offset-assert 20)
;    (res              basic   :offset-assert 24)
;    (name             uint32  :offset-assert 28)
;    (param            uint32  :offset-assert 32)
;    )
;   :method-count-assert 15
;   :size-assert         #x24
;   :flag-assert         #xf00000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; collide-frag-h
; (deftype collide-frag-vertex (vector)
;   ((data UNKNOWN 4 :offset-assert 0)
;    (x    float     :offset-assert 0)
;    (y    float     :offset-assert 4)
;    (z    float     :offset-assert 8)
;    (w    float     :offset-assert 12)
;    (quad uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; collide-frag-h
; (deftype collide-frag-mesh (basic)
;   ((packed-data     uint32         :offset-assert 4)
;    (pat-array       uint32         :offset-assert 8)
;    (strip-data-len  uint16         :offset-assert 12)
;    (poly-count      uint16         :offset-assert 14)
;    (base-trans      vector :inline :offset-assert 16)
;    (vertex-count    uint8          :offset-assert 28)
;    (vertex-data-qwc uint8          :offset-assert 29)
;    (total-qwc       uint8          :offset-assert 30)
;    (unused          uint8          :offset-assert 31)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; collide-frag-h
; (deftype collide-fragment (drawable)
;   ((id      int16          :offset-assert 4)
;    (bsphere vector :inline :offset-assert 16)
;    (mesh    basic          :offset-assert 8)
;    )
;   :method-count-assert 18
;   :size-assert         #x20
;   :flag-assert         #x1200000020
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; collide-frag-h
; (deftype drawable-inline-array-collide-fragment (drawable-inline-array)
;   ((id      int16           :offset-assert 4)
;    (bsphere vector  :inline :offset-assert 16)
;    (length  int16           :offset-assert 6)
;    (data    UNKNOWN 1       :offset-assert 36)
;    )
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

;; projectiles-h
(deftype projectile (process-drawable)
  ((~Tbase-trans      vector  :inline :offset-assert 176)
   (~Ttarget          vector  :inline :offset-assert 192)
   (~Ttarget-base     vector  :inline :offset-assert 208)
   (~Tparent-base     vector  :inline :offset-assert 224)
   (~Tparent-quat     vector  :inline :offset-assert 240)
   (~Tbase-vector     vector  :inline :offset-assert 256)
   (~Ttimeout         uint64          :offset-assert 272)
   (~Toptions         uint64          :offset-assert 280)
   (~Tlast-target     uint64          :offset-assert 288)
   (~Tnotify-handle   uint64          :offset-assert 296)
   (~Tmax-speed       float           :offset-assert 304)
   (~Tmax-turn        float           :offset-assert 308)
   (~Told-dist        float 16      :offset-assert 312)
   (~Told-dist-count  int32           :offset-assert 376)
   (~Thits            int32           :offset-assert 380)
   (~Tmax-hits        int32           :offset-assert 384)
   (~Ttween           float           :offset-assert 388)
   (~Tattack-mode     basic           :offset-assert 392)
   (~Tupdate-velocity basic           :offset-assert 396)
   (~Tcounter         int32           :offset-assert 400)
   (~Ttarget-count    int32           :offset-assert 404)
   (~Tsound-id        uint32          :offset-assert 408)
   )
  :heap-base #x130
  :method-count-assert 29
  :size-assert         #x19c
  :flag-assert         #x1d0130019c
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

;; projectiles-h
(deftype projectile-yellow (projectile)
  ((~Tmode  int32  :offset-assert 412)
   (~Tangle float  :offset-assert 416)
   )
  :heap-base #x140
  :method-count-assert 29
  :size-assert         #x1a4
  :flag-assert         #x1d014001a4
  ;; inherited inpspect of projectile
  )

; ;; projectiles-h
; (deftype projectile-blue (projectile)
;   ((~Tmode      int32  :offset-assert 412)
;    (~Tjoint-num int32  :offset-assert 416)
;    )
;   :method-count-assert 29
;   :size-assert         #x1a4
;   :flag-assert         #x1d014001a4
;   ;; inherited inpspect of projectile
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

;; target-h
(deftype target (process-drawable)
  ((control             basic               :offset 112)
   (skel2               basic               :offset-assert 176)
   (racer               basic               :offset-assert 180)
   (game                basic               :offset-assert 184)
   (neck                basic               :offset-assert 188)
   (state-hook-time     uint64              :offset-assert 192)
   (state-hook          basic               :offset-assert 200)
   (cam-user-mode       basic               :offset-assert 204)
   (sidekick            uint32              :offset-assert 208)
   (manipy              uint32              :offset-assert 212)
   (attack-info         attack-info :inline :offset-assert 224)
   (attack-info-rec     attack-info :inline :offset-assert 336)
   (anim-seed           uint64              :offset-assert 440)
   (alt-cam-pos         vector      :inline :offset-assert 448)
   (snowball            basic               :offset-assert 464)
   (tube                basic               :offset-assert 468)
   (flut                basic               :offset-assert 472)
   (current-level       basic               :offset-assert 476)
   (saved-pos           transformq  :inline :offset-assert 480)
   (saved-owner         uint64              :offset-assert 528)
   (alt-neck-pos        vector      :inline :offset-assert 544)
   (fp-hud              uint64              :offset-assert 560)
   (no-load-wait        uint64              :offset-assert 568)
   (no-look-around-wait uint64              :offset-assert 576)
   )
  :heap-base #x1e0
  :method-count-assert 21
  :size-assert         #x248
  :flag-assert         #x1501e00248
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    )
  )

(define-extern *target* target)

;; target-h
(deftype sidekick (process-drawable)
  ((~Tcontrol          basic   :offset 112)
   (~Tstate-time       uint64  :offset 168)
   (~Tstate-flags      uint32  :offset 164)
   (~Tanim-seed        uint64  :offset 192)
   (~Tshadow-in-movie? basic   :offset-assert 200)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xcc
  :flag-assert         #x14006000cc
  ;; inherited inpspect of process-drawable
  )

;; depth-cue-h
(deftype depth-cue-data (structure)
  ((data      vector :inline :offset-assert 0)
   (sharpness float          :offset 0)
   (alpha     float          :offset 4)
   (distance  float          :offset 8)
   (w         float          :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; depth-cue-h
(deftype depth-cue-work (structure)
  ((texture-strip-tmpl dma-gif-packet :inline :offset-assert 0)
   (temp-strip-tmpl    dma-gif-packet :inline :offset-assert 32)
   (stencil-tmpl       dma-gif-packet :inline :offset-assert 64)
   (clear-color        vector4w       :inline :offset-assert 96)
   (set-color          vector4w       :inline :offset-assert 112)
   (draw-color         vector4w       :inline :offset-assert 128)
   (depth              depth-cue-data         :offset-assert 144)
   (front              depth-cue-data         :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

;; stats-h
(deftype tr-stat (structure)
  ((groups    uint16  :offset-assert 0)
   (fragments uint16  :offset-assert 2)
   (tris      uint32  :offset-assert 4)
   (dverts    uint32  :offset-assert 8)
   (instances uint16  :offset-assert 12)
   (pad       uint16  :offset-assert 14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; stats-h
(deftype merc-global-stats (structure)
  ((merc      tr-stat :inline :offset-assert 0)
   (mercneric tr-stat :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; stats-h
(deftype perf-stat (structure)
  ((frame-number   uint32  :offset-assert 0)
   (count          uint32  :offset-assert 4)
   (cycles         uint32  :offset-assert 8)
   (instructions   uint32  :offset-assert 12)
   (icache         uint32  :offset-assert 16)
   (dcache         uint32  :offset-assert 20)
   (select         uint32  :offset-assert 24)
   (ctrl           uint32  :offset-assert 28)
   (accum0         uint32  :offset-assert 32)
   (accum1         uint32  :offset-assert 36)
   (to-vu0-waits   uint32  :offset-assert 40)
   (to-spr-waits   uint32  :offset-assert 44)
   (from-spr-waits uint32  :offset-assert 48)
   )
  :method-count-assert 14
  :size-assert         #x34
  :flag-assert         #xe00000034
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

; ;; stats-h
; (deftype perf-stat-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

;; bsp-h
(deftype bsp-node (structure)
  ((front       int32          :offset-assert 0)
   (back        int32          :offset-assert 4)
   (front-flags uint32         :offset-assert 8)
   (back-flags  uint32         :offset-assert 12)
   (plane       vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; bsp-h
(deftype game-level (basic)
  ((master-bsp basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; bsp-h
(deftype view-frustum (structure)
  ((hither-top-left     vector :inline :offset-assert 0)
   (hither-top-right    vector :inline :offset-assert 16)
   (hither-bottom-left  vector :inline :offset-assert 32)
   (hither-bottom-right vector :inline :offset-assert 48)
   (yon-top-left        vector :inline :offset-assert 64)
   (yon-top-right       vector :inline :offset-assert 80)
   (yon-bottom-left     vector :inline :offset-assert 96)
   (yon-bottom-right    vector :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

; ;; bsp-h
; (deftype bsp-header (drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #x190
;   :flag-assert         #x1400000190
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

;; bsp-h
(deftype cl-stat (structure)
  ((fragments uint32  :offset-assert 0)
   (tris      uint32  :offset-assert 4)
   (output    uint32  :offset-assert 8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; bsp-h
; (deftype collide-stats (structure)
;   ((other             cl-stat   :inline :offset-assert 0)
;    (total             cl-stat   :inline :offset-assert 12)
;    (nodes             uint32            :offset-assert 24)
;    (calls             uint32            :offset-assert 28)
;    (total-target      stopwatch :inline :offset-assert 36)
;    (target-cache-fill stopwatch :inline :offset-assert 68)
;    (target-ray-poly   stopwatch :inline :offset-assert 100)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

;; collide-cache-h
(deftype collide-using-spheres-params (structure)
  ((spheres      uint32  :offset-assert 0)
   (num-spheres  uint32  :offset-assert 4)
   (collide-with uint64  :offset-assert 8)
   (proc         basic   :offset-assert 16)
   (ignore-pat   uint32  :offset-assert 20)
   (solid-only   basic   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; collide-cache-h
(deftype collide-puss-sphere (structure)
  ((bsphere sphere         :inline :offset-assert 0)
   (bbox4w  bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-cache-h
(deftype collide-puss-work (structure)
  ((closest-pt     vector         :inline :offset-assert 0)
   (tri-normal     vector         :inline :offset-assert 16)
   (tri-bbox4w     bounding-box4w :inline :offset-assert 32)
   (spheres-bbox4w bounding-box4w :inline :offset-assert 64)
   (spheres        collide-puss-sphere 64 :inline    :offset-assert 96)
   )
  :method-count-assert 11
  :size-assert         #xc60
  :flag-assert         #xb00000c60
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

; ;; collide-cache-h
; (deftype collide-puyp-work (structure)
;   ((best-u     float                      :offset-assert 0)
;    (ignore-pat uint32                     :offset-assert 4)
;    (tri-out    collide-tri-result         :offset-assert 8)
;    (start-pos  vector             :inline :offset-assert 16)
;    (move-dist  vector             :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; collide-cache-h
; (deftype collide-cache-tri (structure)
;   ((vertex     UNKNOWN 3  :offset-assert 0)
;    (extra-quad UNKNOWN 16 :offset-assert 48)
;    (pat        uint32     :offset-assert 48)
;    (prim-index uint16     :offset-assert 52)
;    (user16     uint16     :offset-assert 54)
;    (user32     UNKNOWN 2  :offset-assert 56)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; collide-cache-h
; (deftype collide-cache-prim (structure)
;   ((prim-core    collide-prim-core :inline :offset-assert 0)
;    (extra-quad   UNKNOWN           16      :offset-assert 32)
;    (ccache       basic                     :offset-assert 32)
;    (prim         basic                     :offset-assert 36)
;    (first-tri    uint16                    :offset-assert 40)
;    (num-tris     uint16                    :offset-assert 42)
;    (unused       UNKNOWN           4       :offset-assert 44)
;    (world-sphere vector            :inline :offset-assert 0)
;    (collide-as   uint64                    :offset-assert 16)
;    (action       uint32                    :offset-assert 24)
;    (offense      int8                      :offset-assert 28)
;    (prim-type    int8                      :offset-assert 29)
;    )
;   :method-count-assert 11
;   :size-assert         #x30
;   :flag-assert         #xb00000030
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; collide-cache-h
; (deftype collide-cache (basic)
;   ((num-tris      int32                  :offset-assert 4)
;    (num-prims     int32                  :offset-assert 8)
;    (ignore-mask   uint32                 :offset-assert 12)
;    (proc          basic                  :offset-assert 16)
;    (collide-box   bounding-box   :inline :offset-assert 32)
;    (collide-box4w bounding-box4w :inline :offset-assert 64)
;    (collide-with  uint64                 :offset-assert 96)
;    (prims         UNKNOWN        100     :offset-assert 112)
;    (tris          UNKNOWN        461     :offset-assert 4912)
;    )
;   :method-count-assert 33
;   :size-assert         #x8670
;   :flag-assert         #x2100008670
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

;; collide-cache-h
(deftype collide-list-item (structure)
  ((mesh basic  :offset-assert 0)
   (inst basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-cache-h
(deftype collide-list (structure)
  ((num-items int32       :offset-assert 0)
   (items     collide-list-item 256 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x1010
  :flag-assert         #x900001010
  )

;; collide-cache-h
(deftype collide-work (structure)
  ((collide-sphere-neg-r sphere         :inline :offset-assert 0)
   (collide-box4w        bounding-box4w :inline :offset-assert 16)
   (inv-mat              matrix         :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; shrubbery-h
(deftype billboard (drawable)
  ((flat    adgif-shader :inline :offset-assert 32)
   )
  :method-count-assert 18
  :size-assert         #x70
  :flag-assert         #x1200000070
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

; ;; shrubbery-h
; (deftype shrub-view-data (structure)
;   ((data           UNKNOWN 3       :offset-assert 0)
;    (texture-giftag qword   :inline :offset-assert 0)
;    (consts         vector  :inline :offset-assert 16)
;    (fog-clamp      vector  :inline :offset-assert 32)
;    (tex-start-ptr  int32           :offset-assert 16)
;    (gifbufsum      float           :offset-assert 16)
;    (mtx-buf-ptr    int32           :offset-assert 20)
;    (exp23          float           :offset-assert 20)
;    (fog-0          float           :offset-assert 24)
;    (fog-1          float           :offset-assert 28)
;    (fog-min        float           :offset-assert 32)
;    (fog-max        float           :offset-assert 36)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; shrubbery-h
(deftype shrubbery (drawable)
  ((textures uint32         :offset 4)
   (header   qword          :offset 8)
   (obj-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   (obj      uint32         :offset 16)
   (vtx      uint32         :offset 20)
   (col      uint32         :offset 24)
   (stq      uint32         :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype instance-shrubbery (instance)
  ((flat-normal  vector   :inline :offset-assert 64)
   (flat-hwidth  float            :offset 76)
   (color        uint32           :offset 8)
   )
  :method-count-assert 18
  :size-assert         #x50
  :flag-assert         #x1200000050
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype generic-shrub-fragment (drawable)
  ((textures uint32         :offset 4)
   (vtx-cnt  uint32         :offset 8)
   (cnt-qwc  uint8          :offset 12)
   (vtx-qwc  uint8          :offset 13)
   (col-qwc  uint8          :offset 14)
   (stq-qwc  uint8          :offset 15)
   (cnt      uint32         :offset 16)
   (vtx      uint32         :offset 20)
   (col      uint32         :offset 24)
   (stq      uint32         :offset 28)
   )
  :method-count-assert 18
  :size-assert         #x20
  :flag-assert         #x1200000020
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    )
  )

;; shrubbery-h
(deftype shrubbery-matrix (structure)
  ((mat   matrix :inline :offset-assert 0)
   (color qword  :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; shrubbery-h
; (deftype shrub-near-packet (structure)
;   ((matrix-tmpl dma-packet :inline :offset-assert 0)
;    (header-tmpl dma-packet :inline :offset-assert 16)
;    (stq-tmpl    dma-packet :inline :offset-assert 32)
;    (color-tmpl  dma-packet :inline :offset-assert 48)
;    (vertex-tmpl dma-packet :inline :offset-assert 64)
;    (mscal-tmpl  dma-packet :inline :offset-assert 80)
;    (init-tmpl   dma-packet :inline :offset-assert 96)
;    (init-data   UNKNOWN    8       :offset-assert 112)
;    )
;   :method-count-assert 9
;   :size-assert         #x90
;   :flag-assert         #x900000090
;   )

; ;; shrubbery-h
; (deftype instance-shrub-work (structure)
;   ((dummy                     UNKNOWN        3       :offset-assert 0)
;    (chaina                    UNKNOWN        8       :offset-assert 48)
;    (chainb                    UNKNOWN        8       :offset-assert 176)
;    (colors                    UNKNOWN        1024    :offset-assert 304)
;    (matrix-tmpl               UNKNOWN        20      :offset-assert 4400)
;    (count-tmpl                UNKNOWN        20      :offset-assert 4720)
;    (mscalf-tmpl               dma-packet     :inline :offset-assert 5040)
;    (mscalf-ret-tmpl           dma-packet     :inline :offset-assert 5056)
;    (adgif-tmpl                dma-gif-packet :inline :offset-assert 5072)
;    (billboard-tmpl            dma-gif-packet :inline :offset-assert 5104)
;    (billboard-const           vector         :inline :offset-assert 5136)
;    (shrub-near-packets        UNKNOWN        6       :offset-assert 5152)
;    (dma-ref                   dma-packet     :inline :offset-assert 6016)
;    (dma-end                   dma-packet     :inline :offset-assert 6032)
;    (wind-const                vector         :inline :offset-assert 6048)
;    (constants                 vector         :inline :offset-assert 6064)
;    (color-constant            vector4w       :inline :offset-assert 6080)
;    (hmge-d                    vector         :inline :offset-assert 6096)
;    (hvdf-offset               vector         :inline :offset-assert 6112)
;    (wind-force                vector         :inline :offset-assert 6128)
;    (color                     vector         :inline :offset-assert 6144)
;    (bb-color                  vector         :inline :offset-assert 6160)
;    (min-dist                  vector         :inline :offset-assert 6176)
;    (temp-vec                  vector         :inline :offset-assert 6192)
;    (guard-plane               UNKNOWN        4       :offset-assert 6208)
;    (plane                     UNKNOWN        4       :offset-assert 6272)
;    (last                      UNKNOWN        4       :offset-assert 6336)
;    (next                      UNKNOWN        4       :offset-assert 6352)
;    (count                     UNKNOWN        4       :offset-assert 6368)
;    (mod-count                 UNKNOWN        4       :offset-assert 6376)
;    (wind-vectors              uint32                 :offset-assert 6384)
;    (instance-ptr              uint32                 :offset-assert 6388)
;    (chain-ptr                 uint32                 :offset-assert 6392)
;    (chain-ptr-next            uint32                 :offset-assert 6396)
;    (stack-ptr                 uint32                 :offset-assert 6400)
;    (bucket-ptr                uint32                 :offset-assert 6404)
;    (src-ptr                   uint32                 :offset-assert 6408)
;    (to-spr                    uint32                 :offset-assert 6412)
;    (from-spr                  uint32                 :offset-assert 6416)
;    (shrub-count               uint32                 :offset-assert 6420)
;    (stack-ptr                 uint32                 :offset-assert 6400)
;    (node                      UNKNOWN        6       :offset-assert 6428)
;    (length                    UNKNOWN        6       :offset-assert 6452)
;    (prototypes                uint32                 :offset-assert 6476)
;    (bucket-ptr                uint32                 :offset-assert 6404)
;    (start-bank                UNKNOWN        20      :offset-assert 6484)
;    (buffer-index              uint32                 :offset-assert 6504)
;    (current-spr               uint32                 :offset-assert 6508)
;    (current-mem               uint32                 :offset-assert 6512)
;    (current-shrub-near-packet uint32                 :offset-assert 6516)
;    (to-spr                    uint32                 :offset-assert 6412)
;    (dma-buffer                basic                  :offset-assert 6524)
;    (near-last                 uint32                 :offset-assert 6528)
;    (near-next                 uint32                 :offset-assert 6532)
;    (near-count                uint32                 :offset-assert 6536)
;    (last-shrubs               uint32                 :offset-assert 6540)
;    (chains                    uint32                 :offset-assert 6544)
;    (flags                     uint32                 :offset-assert 6548)
;    (paused                    basic                  :offset-assert 6552)
;    (node-count                uint32                 :offset-assert 6556)
;    (inst-count                uint32                 :offset-assert 6560)
;    (wait-from-spr             uint32                 :offset-assert 6564)
;    (wait-to-spr               uint32                 :offset-assert 6568)
;    )
;   :method-count-assert 9
;   :size-assert         #x19ac
;   :flag-assert         #x9000019ac
;   )

; ;; shrubbery-h
; (deftype instance-shrub-dma (structure)
;   ((instancea UNKNOWN 325 :offset-assert 0)
;    (instanceb UNKNOWN 325 :offset-assert 5200)
;    (outa      UNKNOWN 128 :offset-assert 10400)
;    (outb      UNKNOWN 128 :offset-assert 12448)
;    )
;   :method-count-assert 9
;   :size-assert         #x38a0
;   :flag-assert         #x9000038a0
;   )

; ;; tie-h
; (deftype tie-fragment (drawable)
;   ((id            int16          :offset-assert 4)
;    (bsphere       vector :inline :offset-assert 16)
;    (gif-ref       uint32         :offset-assert 4)
;    (point-ref     uint32         :offset-assert 8)
;    (color-index   uint16         :offset-assert 12)
;    (base-colors   uint8          :offset-assert 14)
;    (tex-count     uint16         :offset-assert 32)
;    (gif-count     uint16         :offset-assert 34)
;    (vertex-count  uint16         :offset-assert 36)
;    (color-count   uint16         :offset-assert 38)
;    (num-tris      uint16         :offset-assert 40)
;    (num-dverts    uint16         :offset-assert 42)
;    (dp-ref        uint32         :offset-assert 44)
;    (dp-qwc        uint32         :offset-assert 48)
;    (generic-ref   uint32         :offset-assert 52)
;    (generic-count uint32         :offset-assert 56)
;    (debug-lines   basic          :offset-assert 60)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype instance-tie (instance)
;   ((id            int16            :offset-assert 4)
;    (bsphere       vector   :inline :offset-assert 16)
;    (bucket-index  uint16           :offset-assert 6)
;    (origin        matrix4h :inline :offset-assert 32)
;    (wind-index    uint16           :offset-assert 62)
;    (color-indices uint32           :offset-assert 8)
;    (bucket-ptr    basic            :offset-assert 12)
;    (max-scale     uint16           :offset-assert 38)
;    (flags         uint16           :offset-assert 46)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype drawable-tree-instance-tie (drawable-tree)
;   ((id         int16           :offset-assert 4)
;    (bsphere    vector  :inline :offset-assert 16)
;    (length     int16           :offset-assert 6)
;    (data       UNKNOWN 1       :offset-assert 32)
;    (prototypes basic           :offset-assert 8)
;    )
;   :method-count-assert 18
;   :size-assert         #x24
;   :flag-assert         #x1200000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie-h
; (deftype tie-matrix (structure)
;   ((mat   matrix :inline :offset-assert 0)
;    (morph qword  :inline :offset-assert 64)
;    (fog   qword  :inline :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

; ;; tie-h
; (deftype instance-tie-work (structure)
;   ((wind-const                  vector     :inline :offset-assert 0)
;    (hmge-d                      vector     :inline :offset-assert 16)
;    (hvdf-offset                 vector     :inline :offset-assert 32)
;    (wind-force                  vector     :inline :offset-assert 48)
;    (constant                    vector     :inline :offset-assert 64)
;    (far-morph                   vector     :inline :offset-assert 80)
;    (dist-test                   vector     :inline :offset-assert 96)
;    (min-dist                    vector     :inline :offset-assert 112)
;    (guard-plane                 UNKNOWN    4       :offset-assert 128)
;    (upload-color-0              dma-packet :inline :offset-assert 192)
;    (upload-color-1              dma-packet :inline :offset-assert 208)
;    (upload-color-2              dma-packet :inline :offset-assert 224)
;    (upload-color-ret            dma-packet :inline :offset-assert 240)
;    (upload-color-temp           dma-packet :inline :offset-assert 256)
;    (generic-color-0             dma-packet :inline :offset-assert 272)
;    (generic-color-1             dma-packet :inline :offset-assert 288)
;    (generic-color-end           dma-packet :inline :offset-assert 304)
;    (tie-near-perspective-matrix matrix     :inline :offset-assert 320)
;    (wind-vectors                uint32             :offset-assert 384)
;    (test-id                     uint32             :offset-assert 388)
;    (test-id2                    uint32             :offset-assert 392)
;    (dma-buffer                  basic              :offset-assert 396)
;    (to-spr                      uint32             :offset-assert 400)
;    (from-spr                    uint32             :offset-assert 404)
;    (wind-work                   uint32             :offset-assert 408)
;    (cur-vis-bits                uint32             :offset-assert 412)
;    (end-vis-bits                uint32             :offset-assert 416)
;    (first-generic-prototype     uint32             :offset-assert 420)
;    (refl-fade-fac               float              :offset-assert 424)
;    (refl-fade-end               float              :offset-assert 428)
;    (flags                       uint32             :offset-assert 432)
;    (paused                      basic              :offset-assert 436)
;    (wait-from-spr               uint32             :offset-assert 440)
;    (wait-to-spr                 uint32             :offset-assert 444)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c0
;   :flag-assert         #x9000001c0
;   )

; ;; tie-h
; (deftype instance-tie-dma (structure)
;   ((banka UNKNOWN           32  :offset-assert 4)
;    (bankb UNKNOWN           32  :offset-assert 2052)
;    (outa  UNKNOWN           256 :offset-assert 4096)
;    (outb  UNKNOWN           256 :offset-assert 8192)
;    (work  instance-tie-work     :offset-assert 12288)
;    )
;   :method-count-assert 9
;   :size-assert         #x3000
;   :flag-assert         #x900003000
;   )

; ;; tie-h
; (deftype prototype-tie-work (structure)
;   ((upload-palette-0      dma-packet :inline :offset-assert 0)
;    (upload-palette-1      dma-packet :inline :offset-assert 16)
;    (upload-model-0        dma-packet :inline :offset-assert 32)
;    (upload-model-1        dma-packet :inline :offset-assert 48)
;    (upload-model-2        dma-packet :inline :offset-assert 64)
;    (upload-model-3        dma-packet :inline :offset-assert 80)
;    (upload-model-near-0   dma-packet :inline :offset-assert 96)
;    (upload-model-near-1   dma-packet :inline :offset-assert 112)
;    (upload-model-near-2   dma-packet :inline :offset-assert 128)
;    (upload-model-near-3   dma-packet :inline :offset-assert 144)
;    (upload-model-near-4   dma-packet :inline :offset-assert 160)
;    (generic-envmap-shader dma-packet :inline :offset-assert 176)
;    (generic-palette       dma-packet :inline :offset-assert 192)
;    (generic-model-0       dma-packet :inline :offset-assert 208)
;    (generic-model-1       dma-packet :inline :offset-assert 224)
;    (generic-model-2       dma-packet :inline :offset-assert 240)
;    (generic-model-next    dma-packet :inline :offset-assert 256)
;    (clamp                 uint64             :offset-assert 272)
;    (prototype-array       basic              :offset-assert 280)
;    (generic-wait-from-spr uint32             :offset-assert 284)
;    (generic-wait-to-spr   uint32             :offset-assert 288)
;    (wait-from-spr         uint32             :offset-assert 292)
;    (wait-to-spr           uint32             :offset-assert 296)
;    (near-wait-from-spr    uint32             :offset-assert 300)
;    (near-wait-to-spr      uint32             :offset-assert 304)
;    )
;   :method-count-assert 9
;   :size-assert         #x134
;   :flag-assert         #x900000134
;   )

; ;; tie-h
; (deftype prototype-tie-dma (structure)
;   ((colora          UNKNOWN 256 :offset-assert 0)
;    (colorb          UNKNOWN 256 :offset-assert 1024)
;    (outa            UNKNOWN 256 :offset-assert 2048)
;    (outb            UNKNOWN 256 :offset-assert 6144)
;    (length          uint32      :offset-assert 10240)
;    (dma-buffer      basic       :offset-assert 10244)
;    (this-frag-count uint32      :offset-assert 10248)
;    (next            UNKNOWN 4   :offset-assert 10256)
;    (geometry        UNKNOWN 4   :offset-assert 10272)
;    (frag-count      UNKNOWN 4   :offset-assert 10288)
;    )
;   :method-count-assert 9
;   :size-assert         #x2834
;   :flag-assert         #x900002834
;   )

; ;; tfrag-h
; (deftype tfragment-stats (structure)
;   ((num-tris   UNKNOWN 4 :offset-assert 0)
;    (num-dverts UNKNOWN 4 :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; tfrag-h
; (deftype tfragment-debug-data (structure)
;   ((stats       tfragment-stats :inline :offset-assert 0)
;    (debug-lines basic                   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; tfrag-h
; (deftype generic-tfragment (structure)
;   ((dummy int32  :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; tfrag-h
; (deftype tfragment (drawable)
;   ((id                int16                        :offset-assert 4)
;    (bsphere           vector               :inline :offset-assert 16)
;    (color-index       uint16                       :offset-assert 6)
;    (debug-data        tfragment-debug-data         :offset-assert 8)
;    (color-indices     uint32                       :offset-assert 12)
;    (colors            uint32                       :offset-assert 12)
;    (dma-chain         UNKNOWN              3       :offset-assert 32)
;    (dma-common        uint32                       :offset-assert 32)
;    (dma-level-0       uint32                       :offset-assert 32)
;    (dma-base          uint32                       :offset-assert 36)
;    (dma-level-1       uint32                       :offset-assert 40)
;    (dma-qwc           UNKNOWN              4       :offset-assert 44)
;    (shader            uint32                       :offset-assert 48)
;    (num-shaders       uint8                        :offset-assert 52)
;    (num-base-colors   uint8                        :offset-assert 53)
;    (num-level0-colors uint8                        :offset-assert 54)
;    (num-level1-colors uint8                        :offset-assert 55)
;    (color-offset      uint8                        :offset-assert 56)
;    (color-count       uint8                        :offset-assert 57)
;    (pad0              uint8                        :offset-assert 58)
;    (pad1              uint8                        :offset-assert 59)
;    (generic           generic-tfragment            :offset-assert 60)
;    )
;   :method-count-assert 18
;   :size-assert         #x40
;   :flag-assert         #x1200000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tfrag-h
; (deftype tfrag-dists (structure)
;   ((data   UNKNOWN 16 :offset-assert 0)
;    (vector UNKNOWN 4  :offset-assert 0)
;    (k0s    UNKNOWN 2  :offset-assert 0)
;    (k1s    UNKNOWN 2  :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; tfrag-h
; (deftype tfrag-data (structure)
;   ((data        UNKNOWN     56      :offset-assert 0)
;    (vector      UNKNOWN     14      :offset-assert 0)
;    (fog         vector      :inline :offset-assert 0)
;    (val         vector      :inline :offset-assert 16)
;    (strgif      qword       :inline :offset-assert 32)
;    (fangif      qword       :inline :offset-assert 48)
;    (adgif       qword       :inline :offset-assert 64)
;    (hvdf-offset vector      :inline :offset-assert 80)
;    (hmge-scale  vector      :inline :offset-assert 96)
;    (invh-scale  vector      :inline :offset-assert 112)
;    (ambient     vector      :inline :offset-assert 128)
;    (guard       vector      :inline :offset-assert 144)
;    (dists       tfrag-dists :inline :offset-assert 160)
;    (k0s         UNKNOWN     2       :offset-assert 160)
;    (k1s         UNKNOWN     2       :offset-assert 192)
;    )
;   :method-count-assert 9
;   :size-assert         #xe0
;   :flag-assert         #x9000000e0
;   )

;; tfrag-h
(deftype tfrag-control (structure)
  ((num-base-points           uint32  :offset-assert 0)
   (num-shared-base-points    uint32  :offset-assert 4)
   (num-level0-points         uint32  :offset-assert 8)
   (num-shared-level0-points  uint32  :offset-assert 12)
   (num-level1-points         uint32  :offset-assert 16)
   (num-shared-level1-points  uint32  :offset-assert 20)
   (ptr-vtxdata               uint32  :offset-assert 24)
   (ptr-base-points           uint32  :offset-assert 28)
   (ptr-shared-base-points    uint32  :offset-assert 32)
   (ptr-level0-points         uint32  :offset-assert 36)
   (ptr-shared-level0-points  uint32  :offset-assert 40)
   (ptr-level1-points         uint32  :offset-assert 44)
   (ptr-shared-level1-points  uint32  :offset-assert 48)
   (ptr-draw-points           uint32  :offset-assert 52)
   (ptr-interpolated-0        uint32  :offset-assert 56)
   (ptr-shared-interpolated-0 uint32  :offset-assert 60)
   (ptr-interpolated1         uint32  :offset-assert 64)
   (ptr-shared-interpolated1  uint32  :offset-assert 68)
   (ptr-strip-data            uint32  :offset-assert 72)
   (ptr-texture-data          uint32  :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; tfrag-h
(deftype tfrag-stats (structure)
  ((from         int32  :offset-assert 0)
   (to           int32  :offset-assert 4)
   (cnt          int32  :offset-assert 8)
   (tris         int32  :offset-assert 12)
   (tfaces       int32  :offset-assert 16)
   (tfrags       int32  :offset-assert 20)
   (dtris        int32  :offset-assert 24)
   (base-verts   int32  :offset-assert 28)
   (level0-verts int32  :offset-assert 32)
   (level1-verts int32  :offset-assert 36)
   (dma-cnt      int32  :offset-assert 40)
   (dma-dta      int32  :offset-assert 44)
   (dma-tex      int32  :offset-assert 48)
   (strips       int32  :offset-assert 52)
   (drawpoints   int32  :offset-assert 56)
   (vif          int32  :offset-assert 60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

; ;; tfrag-h
; (deftype tfrag-packet (structure)
;   ((tag UNKNOWN 2 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; tfrag-h
(deftype tfrag-work (structure)
  ((base-tmpl             dma-packet :inline :offset-assert 0)
   (level-0-tmpl          dma-packet :inline :offset-assert 16)
   (common-tmpl           dma-packet :inline :offset-assert 32)
   (level-1-tmpl          dma-packet :inline :offset-assert 48)
   (color-tmpl            dma-packet :inline :offset-assert 64)
   (frag-dists            vector     :inline :offset-assert 80)
   (max-dist              vector     :inline :offset-assert 96)
   (min-dist              vector     :inline :offset-assert 112)
   (color-ptr             vector4w   :inline :offset-assert 128)
   (tr-stat-tfrag         tr-stat            :offset-assert 144)
   (tr-stat-tfrag-near    tr-stat            :offset-assert 148)
   (vu1-enable-tfrag      int32              :offset-assert 152)
   (vu1-enable-tfrag-near int32              :offset-assert 156)
   (cur-vis-bits          uint32             :offset-assert 160)
   (end-vis-bits          uint32             :offset-assert 164)
   (src-ptr               uint32             :offset-assert 168)
   (last-call             uint32             :offset-assert 172)
   (dma-buffer            basic              :offset-assert 176)
   (test-id               uint32             :offset-assert 180)
   (wait-from-spr         uint32             :offset-assert 184)
   (wait-to-spr           uint32             :offset-assert 188)
   (near-wait-from-spr    uint32             :offset-assert 192)
   (near-wait-to-spr      uint32             :offset-assert 196)
   )
  :method-count-assert 9
  :size-assert         #xc8
  :flag-assert         #x9000000c8
  )

; ;; tfrag-h
; (deftype tfrag-dma (structure)
;   ((banka  UNKNOWN 16   :offset-assert 4)
;    (bankb  UNKNOWN 16   :offset-assert 1028)
;    (outa   UNKNOWN 128  :offset-assert 2048)
;    (outb   UNKNOWN 128  :offset-assert 4096)
;    (colors UNKNOWN 2048 :offset-assert 6144)
;    )
;   :method-count-assert 9
;   :size-assert         #x37fc
;   :flag-assert         #x9000037fc
;   )

; ;; background-h
; (deftype background-work (basic)
;   ((tfrag-tree-count              int32     :offset-assert 4)
;    (tfrag-trees                   UNKNOWN 8 :offset-assert 8)
;    (tfrag-levels                  UNKNOWN 8 :offset-assert 40)
;    (trans-tfrag-tree-count        int32     :offset-assert 72)
;    (trans-tfrag-trees             UNKNOWN 8 :offset-assert 76)
;    (trans-tfrag-levels            UNKNOWN 8 :offset-assert 108)
;    (dirt-tfrag-tree-count         int32     :offset-assert 140)
;    (dirt-tfrag-trees              UNKNOWN 8 :offset-assert 144)
;    (dirt-tfrag-levels             UNKNOWN 8 :offset-assert 176)
;    (ice-tfrag-tree-count          int32     :offset-assert 208)
;    (ice-tfrag-trees               UNKNOWN 8 :offset-assert 212)
;    (ice-tfrag-levels              UNKNOWN 8 :offset-assert 244)
;    (lowres-tfrag-tree-count       int32     :offset-assert 276)
;    (lowres-tfrag-trees            UNKNOWN 8 :offset-assert 280)
;    (lowres-tfrag-levels           UNKNOWN 8 :offset-assert 312)
;    (lowres-trans-tfrag-tree-count int32     :offset-assert 344)
;    (lowres-trans-tfrag-trees      UNKNOWN 8 :offset-assert 348)
;    (lowres-trans-tfrag-levels     UNKNOWN 8 :offset-assert 380)
;    (shrub-tree-count              int32     :offset-assert 412)
;    (shrub-trees                   UNKNOWN 8 :offset-assert 416)
;    (shrub-levels                  UNKNOWN 8 :offset-assert 448)
;    (tie-tree-count                int32     :offset-assert 480)
;    (tie-trees                     UNKNOWN 8 :offset-assert 484)
;    (tie-levels                    UNKNOWN 8 :offset-assert 516)
;    (tie-generic                   UNKNOWN 8 :offset-assert 548)
;    (wait-to-vu0                   uint32    :offset-assert 580)
;    )
;   :method-count-assert 9
;   :size-assert         #x248
;   :flag-assert         #x900000248
;   )

; ;; subdivide-h
; (deftype subdivide-settings (basic)
;   ((dist   UNKNOWN 5 :offset-assert 4)
;    (meters UNKNOWN 5 :offset-assert 24)
;    (close  UNKNOWN 4 :offset-assert 44)
;    (far    UNKNOWN 4 :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c
;   :flag-assert         #x90000004c
;   )

; ;; subdivide-h
; (deftype subdivide-dists (structure)
;   ((data   UNKNOWN 32 :offset-assert 0)
;    (vector UNKNOWN 8  :offset-assert 0)
;    (k0s    UNKNOWN 4  :offset-assert 0)
;    (k1s    UNKNOWN 4  :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; subdivide-h
; (deftype gs-packed-rgba (structure)
;   ((data  UNKNOWN 4 :offset-assert 0)
;    (red   int32     :offset-assert 0)
;    (green int32     :offset-assert 4)
;    (blue  int32     :offset-assert 8)
;    (alpha int32     :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-xyzw (structure)
;   ((data UNKNOWN 4 :offset-assert 0)
;    (x    int32     :offset-assert 0)
;    (y    int32     :offset-assert 4)
;    (z    int32     :offset-assert 8)
;    (w    int32     :offset-assert 12)
;    (quad uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-stq (structure)
;   ((data  UNKNOWN 4 :offset-assert 0)
;    (tex-s float     :offset-assert 0)
;    (tex-t float     :offset-assert 4)
;    (tex-q float     :offset-assert 8)
;    (quad  uint128   :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; subdivide-h
; (deftype gs-packed-gt (structure)
;   ((stq  gs-packed-stq  :inline :offset-assert 0)
;    (rgba gs-packed-rgba :inline :offset-assert 16)
;    (xyzw gs-packed-xyzw :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; subdivide-h
; (deftype gs-packed-gt4 (structure)
;   ((data UNKNOWN 4 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #xc0
;   :flag-assert         #x9000000c0
;   )

;; subdivide-h
(deftype terrain-bsp (structure)
  ((lev-index int32  :offset-assert 0)
   (mood      basic  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; subdivide-h
(deftype terrain-stats (structure)
  ((pris             tr-stat :inline :offset-assert 0)
   (tie-generic      tr-stat :inline :offset-assert 16)
   (tie              tr-stat :inline :offset-assert 32)
   (tie-near         tr-stat :inline :offset-assert 48)
   (shrub-near       tr-stat :inline :offset-assert 64)
   (shrub            tr-stat :inline :offset-assert 80)
   (tfrag-near       tr-stat :inline :offset-assert 96)
   (tfrag            tr-stat :inline :offset-assert 112)
   (billboard        tr-stat :inline :offset-assert 128)
   (trans-tfrag      tr-stat :inline :offset-assert 144)
   (trans-tfrag-near tr-stat :inline :offset-assert 160)
   (trans-pris       tr-stat :inline :offset-assert 176)
   (trans-shrub      tr-stat :inline :offset-assert 192)
   (ocean-mid        tr-stat :inline :offset-assert 208)
   (ocean-near       tr-stat :inline :offset-assert 224)
   (total            tr-stat :inline :offset-assert 240)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

; ;; subdivide-h
; (deftype dma-area (structure)
;   ((draw-node-dma      draw-node-dma      :inline :offset-assert 0)
;    (tfrag-dma          tfrag-dma          :inline :offset-assert 0)
;    (instance-shrub-dma instance-shrub-dma :inline :offset-assert 0)
;    (instance-tie-dma   instance-tie-dma   :inline :offset-assert 0)
;    (prototype-tie-dma  prototype-tie-dma  :inline :offset-assert 0)
;    (time-of-day-dma    time-of-day-dma    :inline :offset-assert 0)
;    (decomp-work        decomp-work        :inline :offset-assert 0)
;    (ocean-vertex       UNKNOWN            4       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x38a0
;   :flag-assert         #x9000038a0
;   )

; ;; subdivide-h
; (deftype background-area (structure)
;   ((dma-area dma-area :inline :offset-assert 0)
;    (vis-list UNKNOWN  2048    :offset-assert 14496)
;    )
;   :method-count-assert 9
;   :size-assert         #x40a0
;   :flag-assert         #x9000040a0
;   )

; ;; subdivide-h
; (deftype foreground-area (structure)
;   ((joint-work   joint-work   :inline :offset-assert 0)
;    (generic-work generic-work :inline :offset-assert 0)
;    (bone-mem     bone-memory  :inline :offset-assert 0)
;    (shadow-work  shadow-work  :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x3fd0
;   :flag-assert         #x900003fd0
;   )

; ;; subdivide-h
; (deftype ambient-area (structure)
;   ((ambient-list ambient-list :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x2004
;   :flag-assert         #x900002004
;   )

; ;; subdivide-h
; (deftype work-area (structure)
;   ((background background-area :inline :offset-assert 0)
;    (foreground foreground-area :inline :offset-assert 0)
;    (ambient    ambient-area    :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x40a0
;   :flag-assert         #x9000040a0
;   )

; ;; subdivide-h
; (deftype terrain-context (structure)
;   ((bsp  terrain-bsp :inline :offset-assert 0)
;    (work work-area   :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x40b0
;   :flag-assert         #x9000040b0
;   )

;; entity-h
(deftype entity-perm (structure)
  ((user-object object 2 :offset-assert 0)
   (user-uint64 uint64    :offset 0)
   (user-float  float 2 :offset 0)
   (user-int32  int32 2 :offset 0)
   (user-uint32 uint32 2 :offset 0)
   (user-int16  int16 4 :offset 0)
   (user-uint16 uint16 4 :offset 0)
   (user-int8   int8 8 :offset 0)
   (user-uint8  uint8 8 :offset 0)
   (status      uint16    :offset-assert 8)
   (dummy       uint8 1 :offset-assert 10)
   (task        uint8     :offset-assert 11)
   (aid         uint32    :offset-assert 12)
   (quad        uint128   :offset 0)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;; entity-h
(deftype entity-links (structure)
  ((prev-link entity-links         :offset-assert 0)
   (next-link entity-links         :offset-assert 4)
   (entity    basic                :offset-assert 8)
   (process   basic                :offset-assert 12)
   (level     basic                :offset-assert 16)
   (vis-id    int32                :offset-assert 20)
   (trans     vector       :inline :offset-assert 32)
   (perm      entity-perm  :inline :offset-assert 48)
   (status    uint16               :offset 56) ;; overlays
   (aid       uint32               :offset 60)
   (task      uint8                :offset 59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; entity-h
; (deftype entity-perm-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-links-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-ambient-data (structure)
;   ((user-object UNKNOWN 3  :offset-assert 0)
;    (function    basic      :offset-assert 12)
;    (quad        uint128    :offset-assert 0)
;    (user-uint64 UNKNOWN 1  :offset-assert 0)
;    (user-float  UNKNOWN 3  :offset-assert 0)
;    (user-int32  UNKNOWN 3  :offset-assert 0)
;    (user-uint32 UNKNOWN 3  :offset-assert 0)
;    (user-int16  UNKNOWN 6  :offset-assert 0)
;    (user-uint16 UNKNOWN 6  :offset-assert 0)
;    (user-int8   UNKNOWN 12 :offset-assert 0)
;    (user-uint8  UNKNOWN 12 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; entity-h
; (deftype entity-ambient-data-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

;; entity-h
(deftype entity-info (basic)
  ((ptype     basic  :offset-assert 4)
   (package   basic  :offset-assert 8)
   (art-group basic  :offset-assert 12)
   (pool      basic  :offset-assert 16)
   (heap-size int32  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; entity-h
(deftype actor-bank (basic)
  ((pause-dist float  :offset-assert 4)
   (birth-dist float  :offset-assert 8)
   (birth-max  int32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; sprite-h
; (deftype sprite-vec-data-2d (structure)
;   ((x-y-z-sx    vector   :inline :offset-assert 0)
;    (flag-rot-sy vector   :inline :offset-assert 16)
;    (r-g-b-a     vector   :inline :offset-assert 32)
;    (x           float            :offset-assert 0)
;    (y           float            :offset-assert 4)
;    (z           float            :offset-assert 8)
;    (sx          float            :offset-assert 12)
;    (sy          float            :offset-assert 28)
;    (rot         float            :offset-assert 24)
;    (flag        int32            :offset-assert 16)
;    (matrix      int32            :offset-assert 20)
;    (warp-turns  int32            :offset-assert 16)
;    (r           float            :offset-assert 32)
;    (g           float            :offset-assert 36)
;    (b           float            :offset-assert 40)
;    (a           float            :offset-assert 44)
;    (trans       vector3s :inline :offset-assert 0)
;    (color       rgbaf    :inline :offset-assert 32)
;    (data        UNKNOWN  1       :offset-assert 0)
;    (data64      UNKNOWN  6       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; sprite-h
; (deftype sprite-array-2d (basic)
;   ((num-sprites UNKNOWN 2 :offset-assert 4)
;    (num-valid   UNKNOWN 2 :offset-assert 12)
;    (vec-data    uint32    :offset-assert 20)
;    (adgif-data  uint32    :offset-assert 24)
;    (pad         UNKNOWN 4 :offset-assert 32)
;    (data        UNKNOWN 1 :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; sprite-h
; (deftype sprite-vec-data-3d (structure)
;   ((x-y-z-sx    vector   :inline :offset-assert 0)
;    (qx-qy-qz-sy vector   :inline :offset-assert 16)
;    (r-g-b-a     vector   :inline :offset-assert 32)
;    (x           float            :offset-assert 0)
;    (y           float            :offset-assert 4)
;    (z           float            :offset-assert 8)
;    (sx          float            :offset-assert 12)
;    (sy          float            :offset-assert 28)
;    (qx          float            :offset-assert 16)
;    (qy          float            :offset-assert 20)
;    (qz          float            :offset-assert 24)
;    (r           float            :offset-assert 32)
;    (g           float            :offset-assert 36)
;    (b           float            :offset-assert 40)
;    (a           float            :offset-assert 44)
;    (trans       vector3s :inline :offset-assert 0)
;    (rot         vector3s :inline :offset-assert 16)
;    (color       rgbaf    :inline :offset-assert 32)
;    (data        UNKNOWN  1       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; sprite-h
; (deftype sprite-array-3d (basic)
;   ((num-sprites UNKNOWN 2 :offset-assert 4)
;    (num-valid   UNKNOWN 2 :offset-assert 12)
;    (vec-data    uint32    :offset-assert 20)
;    (adgif-data  uint32    :offset-assert 24)
;    (data        UNKNOWN 1 :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; shadow-h
(deftype fake-shadow (structure)
  ((px    float  :offset-assert 0)
   (py    float  :offset-assert 4)
   (pz    float  :offset-assert 8)
   (scale float  :offset-assert 12)
   (qx    float  :offset-assert 16)
   (qy    float  :offset-assert 20)
   (qz    float  :offset-assert 24)
   (flags int32  :offset-assert 28)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; shadow-h
(deftype fake-shadow-buffer (basic)
  ((num-shadows int32      :offset-assert 4)
   (data fake-shadow 32 :inline :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x408
  :flag-assert         #x900000408
  )

;; eye-h
(deftype eye (structure)
  ((data        uint128 2 :offset-assert 0)
   (x           float     :offset 0)
   (y           float     :offset 4)
   (lid         float     :offset 8)
   (iris-scale  float     :offset 16)
   (pupil-scale float     :offset 20)
   (lid-scale   float     :offset 24)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; eye-h
(deftype eye-control (structure)
  ((process     uint64         :offset-assert 0)
   (random-time uint16         :offset-assert 8)
   (level       uint16         :offset-assert 10)
   (blink       float          :offset-assert 12)
   (shaders     uint32         :offset-assert 16)
   (left        eye    :inline :offset-assert 32)
   (right       eye    :inline :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; eye-h
(deftype eye-control-array (basic)
  ((data eye-control 11 :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x430
  :flag-assert         #x900000430
  )

; ;; eye-h
; (deftype eye-work (structure)
;   ((sprite-tmpl  dma-gif-packet :inline :offset-assert 0)
;    (sprite-tmpl2 dma-gif-packet :inline :offset-assert 32)
;    (adgif-tmpl   dma-gif-packet :inline :offset-assert 64)
;    (blink-table  UNKNOWN        10      :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x88
;   :flag-assert         #x900000088
;   )

;; sparticle-launcher-h
(deftype sp-field-init-spec (structure)
  ((field          uint16  :offset-assert 0)
   (flags          uint16  :offset-assert 2)
   (initial-valuef float   :offset-assert 4)
   (random-rangef  float   :offset-assert 8)
   (random-multf   float   :offset-assert 12)
   (initial-value  int32   :offset 4)
   (random-range   int32   :offset 8)
   (random-mult    int32   :offset 12)
   (func           basic   :offset 4)
   (tex            uint32  :offset 4)
   (pntr           uint32  :offset 4)
   (sym            basic   :offset 4)
   (sound          basic   :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sparticle-launcher-h
(deftype sparticle-launcher (basic)
  ((birthaccum float   :offset-assert 4)
   (soundaccum float   :offset-assert 8)
   (init-specs uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; sparticle-launcher-h
(deftype sparticle-group-item (structure)
  ((launcher   uint32  :offset-assert 0)
   (fade-after float  :offset-assert 4) ;; meters
   (falloff-to float  :offset-assert 8) ;; meters
   (flags      uint16  :offset-assert 12)
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     uint16  :offset-assert 18)
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

; ;; sparticle-launcher-h
; (deftype sparticle-launch-state (structure)
;   ((group-item sparticle-group-item  :offset-assert 0)
;    (flags      uint16                :offset-assert 4)
;    (randomize  uint16                :offset-assert 6)
;    (origin     vector                :offset-assert 8)
;    (sprite3d   sprite-vec-data-3d    :offset-assert 12)
;    (sprite     basic                 :offset-assert 16)
;    (offset     uint32                :offset-assert 20)
;    (accum      float                 :offset-assert 24)
;    (spawn-time uint32                :offset-assert 28)
;    (swarm      basic                 :offset-assert 20)
;    (seed       uint32                :offset-assert 24)
;    (time       uint32                :offset-assert 28)
;    (spec       basic                 :offset-assert 16)
;    (id         uint32                :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; sparticle-launcher-h
(deftype sparticle-launch-group (basic)
  ((length          int16          :offset-assert 4)
   (duration        uint16         :offset-assert 6)
   (linger-duration uint16         :offset-assert 8)
   (flags           uint16         :offset-assert 10)
   (name            basic          :offset-assert 12)
   (launcher        uint32         :offset-assert 16)
   (bounds          sphere :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (dummy-9 () none 9)
    )
  )

; ;; sparticle-launcher-h
; (deftype sparticle-launch-control (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (group            basic            :offset-assert 16)
;    (proc             basic            :offset-assert 20)
;    (local-clock      int32            :offset-assert 24)
;    (fade             float            :offset-assert 28)
;    (matrix           int32            :offset-assert 32)
;    (last-spawn-frame int32            :offset-assert 36)
;    (last-spawn-time  int32            :offset-assert 40)
;    (center           vector  :inline  :offset-assert 48)
;    (data             UNKNOWN :dynamic :offset-assert 64)
;    )
;   :method-count-assert 14
;   :size-assert         #x40
;   :flag-assert         #xe00000040
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; sparticle-h
; (deftype sparticle-cpuinfo (structure)
;   ((sprite        sprite-vec-data-2d             :offset-assert 0)
;    (adgif         adgif-shader                   :offset-assert 4)
;    (radius        float                          :offset-assert 8)
;    (omega         float                          :offset-assert 12)
;    (vel-sxvel     vector                 :inline :offset-assert 16)
;    (rot-syvel     vector                 :inline :offset-assert 32)
;    (fade          rgbaf                  :inline :offset-assert 48)
;    (acc           vector                 :inline :offset-assert 64)
;    (rotvel3d      quaternion             :inline :offset-assert 80)
;    (vel           vector3s               :inline :offset-assert 16)
;    (accel         vector3s               :inline :offset-assert 64)
;    (scalevelx     float                          :offset-assert 28)
;    (scalevely     float                          :offset-assert 44)
;    (friction      float                          :offset-assert 96)
;    (timer         int32                          :offset-assert 100)
;    (flags         uint32                         :offset-assert 104)
;    (user-int32    int32                          :offset-assert 108)
;    (user-uint32   uint32                         :offset-assert 108)
;    (user-float    float                          :offset-assert 108)
;    (user-pntr     uint32                         :offset-assert 108)
;    (user-sprite   sprite-vec-data-2d             :offset-assert 108)
;    (func          basic                          :offset-assert 112)
;    (next-time     uint32                         :offset-assert 116)
;    (next-launcher basic                          :offset-assert 120)
;    (cache-alpha   float                          :offset-assert 124)
;    (valid         basic                          :offset-assert 128)
;    (key           basic                          :offset-assert 132)
;    (binding       sparticle-launch-state         :offset-assert 136)
;    (data          UNKNOWN                1       :offset-assert 12)
;    (dataf         UNKNOWN                1       :offset-assert 12)
;    (datac         UNKNOWN                1       :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x8c
;   :flag-assert         #x90000008c
;   ;; field key is a basic loaded with a signed load 
;   )

; ;; sparticle-h
; (deftype sparticle-launchinfo (structure)
;   ((launchrot  vector  :inline :offset-assert 0)
;    (conerot    vector  :inline :offset-assert 16)
;    (coneradius float           :offset-assert 32)
;    (rotate-y   float           :offset-assert 36)
;    (data       UNKNOWN 1       :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x28
;   :flag-assert         #x900000028
;   )

; ;; sparticle-h
; (deftype sparticle-system (basic)
;   ((blocks          UNKNOWN 2 :offset-assert 4)
;    (length          UNKNOWN 2 :offset-assert 12)
;    (num-alloc       UNKNOWN 2 :offset-assert 20)
;    (is-3d           basic     :offset-assert 28)
;    (flags           uint32    :offset-assert 32)
;    (alloc-table     uint32    :offset-assert 36)
;    (cpuinfo-table   uint32    :offset-assert 40)
;    (vecdata-table   uint32    :offset-assert 44)
;    (adgifdata-table uint32    :offset-assert 48)
;    )
;   :method-count-assert 9
;   :size-assert         #x34
;   :flag-assert         #x900000034
;   )

;; actor-link-h
(deftype actor-link-info (basic)
  ((process basic  :offset-assert 4)
   (next    basic  :offset-assert 8)
   (prev    basic  :offset-assert 12)
   )
  :method-count-assert 26
  :size-assert         #x10
  :flag-assert         #x1a00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    )
  )

; ;; camera-h
; (deftype camera-bank (basic)
;   ((collide-move-rad        float   :offset-assert 4)
;    (joypad                  uint32  :offset-assert 8)
;    (min-detectable-velocity float   :offset-assert 12)
;    (attack-timeout          uint64  :offset-assert 16)
;    (default-string-max-y    meters  :offset-assert 24)
;    (default-string-min-y    meters  :offset-assert 28)
;    (default-string-max-z    meters  :offset-assert 32)
;    (default-string-min-z    meters  :offset-assert 36)
;    (default-string-push-z   meters  :offset-assert 40)
;    (default-tilt-adjust     deg     :offset-assert 44)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; camera-h
(deftype cam-index (structure)
  ((flags uint32    :offset-assert 0)
   (vec   uint128 2 :offset-assert 16)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; camera-h
(deftype tracking-point (structure)
  ((position    vector :inline :offset-assert 0)
   (direction   vector :inline :offset-assert 16)
   (tp-length   float          :offset-assert 32)
   (next        int32          :offset-assert 36)
   (incarnation int32          :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; camera-h
(deftype tracking-spline-sampler (structure)
  ((cur-pt     int32  :offset-assert 0)
   (partial-pt float  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; camera-h
(deftype tracking-spline (structure)
  ((point tracking-point 32 :inline     :offset-assert 0)
   (summed-len         float           :offset-assert 1536)
   (free-point         int32           :offset-assert 1540)
   (used-point         int32           :offset-assert 1544)
   (partial-point      float           :offset-assert 1548)
   (end-point          int32           :offset-assert 1552)
   (next-to-last-point int32           :offset-assert 1556)
   (max-move           float           :offset-assert 1560)
   (sample-len         float           :offset-assert 1564)
   (used-count         int32           :offset-assert 1568)
   (old-position       vector  :inline :offset-assert 1584)
   (debug-old-position vector  :inline :offset-assert 1600)
   (debug-out-position vector  :inline :offset-assert 1616)
   (debug-last-point   int32           :offset-assert 1632)
   )
  :method-count-assert 24
  :size-assert         #x664
  :flag-assert         #x1800000664
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    )
  )

;; camera-h
(deftype cam-float-seeker (structure)
  ((target      float  :offset-assert 0)
   (value       float  :offset-assert 4)
   (vel         float  :offset-assert 8)
   (accel       float  :offset-assert 12)
   (max-vel     float  :offset-assert 16)
   (max-partial float  :offset-assert 20)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x18
  :flag-assert         #xd00000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    )
  )

;; camera-h
(deftype cam-vector-seeker (structure)
  ((target      vector :inline :offset-assert 0)
   (value       vector :inline :offset-assert 16)
   (vel         vector :inline :offset-assert 32)
   (accel       float          :offset-assert 48)
   (max-vel     float          :offset-assert 52)
   (max-partial float          :offset-assert 56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; camera-h
(deftype cam-rotation-tracker (structure)
  ((inv-mat                 matrix           :inline :offset-assert 0)
   (no-follow               basic                    :offset-assert 64)
   (follow-pt               vector           :inline :offset-assert 80)
   (follow-off              vector           :inline :offset-assert 96)
   (follow-blend            float                    :offset-assert 112)
   (tilt-adjust             cam-float-seeker :inline :offset-assert 116)
   (use-point-of-interest   basic                    :offset-assert 140)
   (point-of-interest       vector           :inline :offset-assert 144)
   (point-of-interest-blend cam-float-seeker :inline :offset-assert 160)
   (underwater-blend        cam-float-seeker :inline :offset-assert 184)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

;; camera-h
(deftype camera-combiner (process)
  ((~Ttrans             vector               :inline :offset-assert 112)
   (~Tinv-camera-rot    matrix               :inline :offset-assert 128)
   (~Tfov               float                        :offset-assert 192)
   (~Tinterp-val        float                        :offset-assert 196)
   (~Tinterp-step       float                        :offset-assert 200)
   (~Tdist-from-src     float                        :offset-assert 204)
   (~Tdist-from-dest    float                        :offset-assert 208)
   (~Tflip-control-axis vector               :inline :offset-assert 224)
   (~Tvelocity          vector               :inline :offset-assert 240)
   (~Ttracking-status   uint64                       :offset-assert 256)
   (~Ttracking-options  int32                        :offset-assert 264)
   (~Ttracking          cam-rotation-tracker :inline :offset-assert 272)
   )
  :heap-base #x170
  :method-count-assert 14
  :size-assert         #x1e0
  :flag-assert         #xe017001e0
  ;; inherited inpspect of process
  )

;; camera-h
(deftype camera-slave (process)
  ((~Ttrans                         vector               :inline :offset-assert 112)
   (~Tfov                           float                        :offset-assert 128)
   (~Tfov0                          float                        :offset-assert 132)
   (~Tfov1                          float                        :offset-assert 136)
   (~Tfov-index                     cam-index            :inline :offset-assert 144)
   (~Ttracking                      cam-rotation-tracker :inline :offset-assert 192)
   (~Tview-off-param                float                        :offset-assert 400)
   (~Tview-off                      vector               :inline :offset-assert 416)
   (~Tmin-z-override                float                        :offset-assert 432)
   (~Tview-flat                     vector               :inline :offset-assert 448)
   (~Tstring-vel-dir                uint32                       :offset-assert 464)
   (~Tstring-trans                  vector               :inline :offset-assert 480)
   (~Tposition-spline               tracking-spline      :inline :offset-assert 496)
   (~Tpivot-pt                      vector               :inline :offset-assert 2144)
   (~Tpivot-rad                     float                        :offset-assert 2160)
   (~Tcircular-follow               vector               :inline :offset-assert 2176)
   (~Tmax-angle-offset              float                        :offset-assert 2192)
   (~Tmax-angle-curr                float                        :offset-assert 2196)
   (~Toptions                       uint32                       :offset-assert 2200)
   (~Tcam-entity                    basic                        :offset-assert 2204)
   (~Tvelocity                      vector               :inline :offset-assert 2208)
   (~Tdesired-pos                   vector               :inline :offset-assert 2224)
   (~Ttime-dist-too-far             uint32                       :offset-assert 2240)
   (~Tlos-state                     uint32                       :offset-assert 2244)
   (~Tgood-point                    vector               :inline :offset-assert 2256)
   (~Tlos-tgt-spline-pt             int32                        :offset-assert 2272)
   (~Tlos-tgt-spline-pt-incarnation int32                        :offset-assert 2276)
   (~Tlos-last-pos                  vector               :inline :offset-assert 2288)
   (~Tintro-curve                   curve                :inline :offset-assert 2304)
   (~Tintro-offset                  vector               :inline :offset-assert 2336)
   (~Tintro-t                       float                        :offset-assert 2352)
   (~Tintro-t-step                  float                        :offset-assert 2356)
   (~Toutro-exit-value              float                        :offset-assert 2360)
   (~Tspline-exists                 basic                        :offset-assert 2364)
   (~Tspline-curve                  curve                :inline :offset-assert 2368)
   (~Tspline-offset                 vector               :inline :offset-assert 2400)
   (~Tindex                         cam-index            :inline :offset-assert 2416)
   (~Tsaved-pt                      vector               :inline :offset-assert 2464)
   (~Tspline-tt                     float                        :offset-assert 2480)
   (~Tspline-follow-dist            float                        :offset-assert 2484)
   (~Tchange-event-from             uint32                       :offset-assert 2488)
   (~Tenter-has-run                 basic                        :offset-assert 2492)
   (~Tblend-from-type               uint64                       :offset-assert 2496)
   (~Tblend-to-type                 uint64                       :offset-assert 2504)
   (~Thave-phony-joystick           basic                        :offset-assert 2512)
   (~Tphony-joystick-x              float                        :offset-assert 2516)
   (~Tphony-joystick-y              float                        :offset-assert 2520)
   (~Tstring-min-val                vector               :inline :offset-assert 2528)
   (~Tstring-max-val                vector               :inline :offset-assert 2544)
   (~Tstring-val-locked             basic                        :offset-assert 2560)
   )
  :heap-base #x9a0
  :method-count-assert 14
  :size-assert         #xa04
  :flag-assert         #xe09a00a04
  ;; inherited inpspect of process
  )

;; camera-h
(deftype camera-master (process)
  ((~Tmaster-options      uint32                    :offset-assert 112)
   (~Tnum-slaves          int32                     :offset-assert 116)
   (~Tslave               basic           2       :offset-assert 120)
   (~Tslave-options       uint32                    :offset-assert 128)
   (~Tview-off-param-save float                     :offset-assert 132)
   (~Tchanger             uint32                    :offset-assert 136)
   (~Tcam-entity          basic                     :offset-assert 140)
   (~TstringMinLength     float                     :offset-assert 144)
   (~TstringMaxLength     float                     :offset-assert 148)
   (~TstringMinHeight     float                     :offset-assert 152)
   (~TstringMaxHeight     float                     :offset-assert 156)
   (~Tstring-min          cam-vector-seeker :inline :offset-assert 160)
   (~Tstring-max          cam-vector-seeker :inline :offset-assert 224)
   (~Tstring-push-z       float                     :offset-assert 284)
   (~TstringCliffHeight   float                     :offset-assert 288)
   (~Tno-intro            uint32                    :offset-assert 292)
   (~Tforce-blend         uint32                    :offset-assert 296)
   (~Tforce-blend-time    uint32                    :offset-assert 300)
   (~Tlocal-down          vector            :inline :offset-assert 304)
   (~Tdrawable-target     uint64                    :offset-assert 320)
   (~Twhich-bone          int32                     :offset-assert 328)
   (~Tpov-handle          uint64                    :offset-assert 336)
   (~Tpov-bone            int32                     :offset-assert 344)
   (~Tbeing-attacked      basic                     :offset-assert 348)
   (~Tattack-start        uint64                    :offset-assert 352)
   (~Ton-ground           basic                     :offset-assert 360)
   (~Tunder-water         int32                     :offset-assert 364)
   (~Ton-pole             basic                     :offset-assert 368)
   (~Ttgt-rot-mat         matrix            :inline :offset-assert 384)
   (~Ttgt-face-mat        matrix            :inline :offset-assert 448)
   (~Ttpos-old            vector            :inline :offset-assert 512)
   (~Ttpos-curr           vector            :inline :offset-assert 528)
   (~Ttarget-height       float                     :offset-assert 544)
   (~Ttpos-old-adj        vector            :inline :offset-assert 560)
   (~Ttpos-curr-adj       vector            :inline :offset-assert 576)
   (~Ttpos-tgt            vector            :inline :offset-assert 592)
   (~Tupspeed             float                     :offset-assert 608)
   (~Tpitch-off           vector            :inline :offset-assert 624)
   (~Tfoot-offset         float                     :offset-assert 640)
   (~Thead-offset         float                     :offset-assert 644)
   (~Ttarget-spline       tracking-spline   :inline :offset-assert 656)
   (~Tease-from           vector            :inline :offset-assert 2304)
   (~Tease-t              float                     :offset-assert 2320)
   (~Tease-step           float                     :offset-assert 2324)
   (~Tease-to             vector            :inline :offset-assert 2336)
   (~Toutro-curve         curve             :inline :offset-assert 2352)
   (~Toutro-t             float                     :offset-assert 2372)
   (~Toutro-t-step        float                     :offset-assert 2376)
   (~Toutro-exit-value    float                     :offset-assert 2380)
   (~Twater-drip-time     uint64                    :offset-assert 2384)
   (~Twater-drip          basic                     :offset-assert 2392)
   (~Twater-drip-mult     float                     :offset-assert 2396)
   (~Twater-drip-speed    float                     :offset-assert 2400)
   )
  :heap-base #x900
  :method-count-assert 14
  :size-assert         #x964
  :flag-assert         #xe09000964
  ;; inherited inpspect of process
  )

;; assert-h
(deftype __assert-info-private-struct (structure)
  ((filename   basic   :offset-assert 0)
   (line-num   uint16  :offset-assert 4)
   (column-num uint16  :offset-assert 6)
   )
  :method-count-assert 11
  :size-assert         #x8
  :flag-assert         #xb00000008
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    )
  )

;; hud-h
(deftype hud-icon (basic)
  ((icon    uint32  :offset-assert 4)
   (icon-y  int32   :offset-assert 8)
   (icon-x  int32   :offset-assert 12)
   (icon-z  int32   :offset-assert 16)
   (scale-x float   :offset-assert 20)
   (scale-y float   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; hud-h
(deftype hud-particle (basic)
  ((part     basic          :offset-assert 4)
   (init-pos vector :inline :offset-assert 16)
   (pos      vector :inline :offset-assert 32)
   (prev-pos vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; hud-h
(deftype hud (process)
  ((~Tvalue                  int32     :offset-assert 112)
   (~Tvalue2                 int32     :offset-assert 116)
   (~Ttarget-value           int32     :offset-assert 120)
   (~Tlast-increment-time    uint64    :offset-assert 128)
   (~Tlast-target-equal-time uint64    :offset-assert 136)
   (~Toffset                 int32     :offset-assert 144)
   (~Ty-offset               int32     :offset-assert 148)
   (~Tnext-y-offset          int32     :offset-assert 152)
   (~Tx-sgn                  int32     :offset-assert 156)
   (~Ty-sgn                  int32     :offset-assert 160)
   (~Ttext-x                 int32     :offset-assert 164)
   (~Ttext-y                 int32     :offset-assert 168)
   (~Tfriend                 int32     :offset-assert 172)
   (~Tfirst-init             basic     :offset-assert 176)
   (~Tincrement-on-event     basic     :offset-assert 180)
   (~Tskip-particle          int32     :offset-assert 184)
   (~Tdisable                basic     :offset-assert 188)
   (~Tforce-on-screen        basic     :offset-assert 192)
   (~Tdeactivate-when-hidden basic     :offset-assert 196)
   (~Ttrigger-time           uint64    :offset-assert 200)
   (~Tlast-hide-time         uint64    :offset-assert 208)
   (~Tnb-of-icons            int32     :offset-assert 216)
   (~Ticons                  hud-icon 6 :offset-assert 220)
   (~Tmax-nb-of-particles    int32     :offset-assert 244)
   (~Tnb-of-particles        int32     :offset-assert 248)
   (~Tparticles              hud-particle 7 :offset-assert 252)
   )
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  ;; inherited inpspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    )
  )

;; hud-h
(deftype hud-parts (structure)
  (
   ;(data       UNKNOWN 9 :offset-assert 0)
   (pickups    uint32    :offset-assert 0)
   (money      uint32    :offset-assert 4)
   (fuel-cell  uint32    :offset-assert 8)
   (health     uint32    :offset-assert 12)
   (buzzers    uint32    :offset-assert 16)
   (power      uint32    :offset-assert 20)
   (bike-speed uint32    :offset-assert 24)
   (bike-heat  uint32    :offset-assert 28)
   (money-all  uint32    :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; progress-h
(deftype count-info (structure)
  ((money-count  int32  :offset-assert 0)
   (buzzer-count int32  :offset-assert 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; progress-h
(deftype game-count-info (basic)
  ((length int32            :offset-assert 4)
   (data   count-info :inline :dynamic :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; progress-h
; (deftype task-info-data (basic)
;   ((task-id                  uint8     :offset-assert 4)
;    (task-name                UNKNOWN 4 :offset-assert 8)
;    (text-index-when-resolved int32     :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; progress-h
; (deftype level-tasks-info (basic)
;   ((level-name-id     uint32    :offset-assert 4)
;    (text-group-index  int32     :offset-assert 8)
;    (nb-of-tasks       int32     :offset-assert 12)
;    (buzzer-task-index int32     :offset-assert 16)
;    (task-info         UNKNOWN 8 :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x34
;   :flag-assert         #x900000034
;   )

;; progress-h
(deftype game-option (basic)
  ((option-type     uint64  :offset-assert 8)
   (name            uint32  :offset-assert 16)
   (scale           basic   :offset-assert 20)
   (param1          float   :offset-assert 24)
   (param2          float   :offset-assert 28)
   (param3          int32   :offset-assert 32)
   (value-to-modify uint32  :offset-assert 36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

; ;; progress-h
; (deftype progress (process)
;   ((~Tcurrent-debug-string         int32           :offset-assert 112)
;    (~Tcurrent-debug-language       int32           :offset-assert 116)
;    (~Tcurrent-debug-group          int32           :offset-assert 120)
;    (~Tin-out-position              int32           :offset-assert 124)
;    (~Tdisplay-state                uint64          :offset-assert 128)
;    (~Tnext-display-state           uint64          :offset-assert 136)
;    (~Toption-index                 int32           :offset-assert 144)
;    (~Tselected-option              basic           :offset-assert 148)
;    (~Tcompletion-percentage        float           :offset-assert 152)
;    (~Tready-to-run                 basic           :offset-assert 156)
;    (~Tdisplay-level-index          int32           :offset-assert 160)
;    (~Tnext-level-index             int32           :offset-assert 164)
;    (~Ttask-index                   int32           :offset-assert 168)
;    (~Tin-transition                basic           :offset-assert 172)
;    (~Tlast-in-transition           basic           :offset-assert 176)
;    (~Tforce-transition             basic           :offset-assert 180)
;    (~Tstat-transition              basic           :offset-assert 184)
;    (~Tlevel-transition             int32           :offset-assert 188)
;    (~Tlanguage-selection           uint64          :offset-assert 192)
;    (~Tlanguage-direction           basic           :offset-assert 200)
;    (~Tlanguage-transition          basic           :offset-assert 204)
;    (~Tlanguage-x-offset            int32           :offset-assert 208)
;    (~Tsides-x-scale                float           :offset-assert 212)
;    (~Tsides-y-scale                float           :offset-assert 216)
;    (~Tleft-x-offset                int32           :offset-assert 220)
;    (~Tright-x-offset               int32           :offset-assert 224)
;    (~Tbutton-scale                 float           :offset-assert 228)
;    (~Tslot-scale                   float           :offset-assert 232)
;    (~Tleft-side-x-scale            float           :offset-assert 236)
;    (~Tleft-side-y-scale            float           :offset-assert 240)
;    (~Tright-side-x-scale           float           :offset-assert 244)
;    (~Tright-side-y-scale           float           :offset-assert 248)
;    (~Tsmall-orb-y-offset           int32           :offset-assert 252)
;    (~Tbig-orb-y-offset             int32           :offset-assert 256)
;    (~Ttransition-offset            int32           :offset-assert 260)
;    (~Ttransition-offset-invert     int32           :offset-assert 264)
;    (~Ttransition-percentage        float           :offset-assert 268)
;    (~Ttransition-percentage-invert float           :offset-assert 272)
;    (~Ttransition-speed             float           :offset-assert 276)
;    (~Ttotal-nb-of-power-cells      int32           :offset-assert 280)
;    (~Ttotal-nb-of-orbs             int32           :offset-assert 284)
;    (~Ttotal-nb-of-buzzers          int32           :offset-assert 288)
;    (~Tcard-info                    mc-slot-info    :offset-assert 292)
;    (~Tlast-option-index-change     uint64          :offset-assert 296)
;    (~Tvideo-mode-timeout           uint64          :offset-assert 304)
;    (~Tdisplay-state-stack          UNKNOWN      5  :offset-assert 312)
;    (~Toption-index-stack           UNKNOWN      5  :offset-assert 352)
;    (~Tdisplay-state-pos            int32           :offset-assert 372)
;    (~Tnb-of-icons                  int32           :offset-assert 376)
;    (~Ticons                        UNKNOWN      6  :offset-assert 380)
;    (~Tmax-nb-of-particles          int32           :offset-assert 404)
;    (~Tnb-of-particles              int32           :offset-assert 408)
;    (~Tparticles                    UNKNOWN      40 :offset-assert 412)
;    (~Tparticle-state               UNKNOWN      40 :offset-assert 572)
;    )
;   :method-count-assert 59
;   :size-assert         #x2dc
;   :flag-assert         #x3b027002dc
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     )
;   )

;; rpc-h
(deftype rpc-buffer (basic)
  ((elt-size  uint32           :offset-assert 4)
   (elt-count uint32           :offset-assert 8)
   (elt-used  uint32           :offset-assert 12)
   (busy      basic            :offset-assert 16)
   (base      pointer          :offset-assert 20)
   (data      uint8   :dynamic :offset 32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  (:methods
    (new (symbol type uint uint) rpc-buffer 0)
    )
  )

;; rpc-h
(deftype rpc-buffer-pair (basic)
  ((buffer           rpc-buffer 2 :offset-assert 4)
   (current          rpc-buffer   :offset-assert 12)
   (last-recv-buffer pointer      :offset-assert 16)
   (rpc-port         int32     :offset-assert 20)
   )
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (new (symbol type uint uint int) rpc-buffer-pair 0)
    (call (rpc-buffer-pair uint pointer uint) int 9)
    (add-element (rpc-buffer-pair) pointer 10)
    (decrement-elt-used (rpc-buffer-pair) int 11)
    (sync (rpc-buffer-pair symbol) int 12)
    (check-busy (rpc-buffer-pair) symbol 13)
    (pop-last-received (rpc-buffer-pair) pointer 14)
    )
  )

; ;; path-h
; (deftype path-control (basic)
;   ((flags      uint32         :offset-assert 4)
;    (name       basic          :offset-assert 8)
;    (process    basic          :offset-assert 12)
;    (curve      curve  :inline :offset-assert 16)
;    (num-cverts int32          :offset-assert 20)
;    (cverts     uint32         :offset-assert 16)
;    )
;   :method-count-assert 21
;   :size-assert         #x24
;   :flag-assert         #x1500000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; path-h
; (deftype curve-control (path-control)
;   ((flags      uint32         :offset-assert 4)
;    (name       basic          :offset-assert 8)
;    (process    basic          :offset-assert 12)
;    (curve      curve  :inline :offset-assert 16)
;    (num-cverts int32          :offset-assert 20)
;    (cverts     uint32         :offset-assert 16)
;    )
;   :method-count-assert 21
;   :size-assert         #x24
;   :flag-assert         #x1500000024
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

;; navigate-h
(deftype nav-poly (structure)
  ((id       uint8     :offset-assert 0)
   (vertex   uint8 3 :offset-assert 1)
   (adj-poly uint8 3 :offset-assert 4)
   (pat      uint8     :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; navigate-h
(deftype nav-vertex (vector)
  ()
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; navigate-h
(deftype nav-sphere (structure)
  ((trans sphere :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; navigate-h
(deftype nav-ray (structure)
  ((current-pos  vector   :inline :offset-assert 0)
   (dir          vector   :inline :offset-assert 16)
   (dest-pos     vector   :inline :offset-assert 32)
   (current-poly nav-poly         :offset-assert 48)
   (next-poly    nav-poly         :offset-assert 52)
   (len          float           :offset-assert 56) ;; meters
   (last-edge    int8             :offset-assert 60)
   (terminated   basic            :offset-assert 64)
   (reached-dest basic            :offset-assert 68)
   (hit-boundary basic            :offset-assert 72)
   (hit-gap      basic            :offset-assert 76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

; ;; navigate-h
; (deftype nav-route-portal (structure)
;   ((next-poly  nav-poly   :offset-assert 0)
;    (vertex     UNKNOWN  2 :offset-assert 4)
;    (edge-index int8       :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #xd
;   :flag-assert         #x90000000d
;   )

;; navigate-h
(deftype clip-travel-vector-to-mesh-return-info (structure)
  ((found-boundary  basic            :offset-assert 0)
   (intersection    vector   :inline :offset-assert 16)
   (boundary-normal vector   :inline :offset-assert 32)
   (prev-normal     vector   :inline :offset-assert 48)
   (next-normal     vector   :inline :offset-assert 64)
   (poly            nav-poly         :offset-assert 80)
   (gap-poly        nav-poly         :offset-assert 84)
   (edge            int32            :offset-assert 88)
   (vert-prev       vector   :inline :offset-assert 96)
   (vert-0          vector   :inline :offset-assert 112)
   (vert-1          vector   :inline :offset-assert 128)
   (vert-next       vector   :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

; ;; navigate-h
; (deftype nav-node (structure)
;   ((center-x      float           :offset-assert 0)
;    (center-y      float           :offset-assert 4)
;    (center-z      float           :offset-assert 8)
;    (type          uint16          :offset-assert 12)
;    (parent-offset uint16          :offset-assert 14)
;    (center        vector  :inline :offset-assert 0)
;    (radius-x      float           :offset-assert 16)
;    (radius-y      float           :offset-assert 20)
;    (radius-z      float           :offset-assert 24)
;    (left-offset   uint16          :offset-assert 28)
;    (right-offset  uint16          :offset-assert 30)
;    (num-tris      uint32          :offset-assert 28)
;    (radius        vector  :inline :offset-assert 16)
;    (scale-x       float           :offset-assert 32)
;    (first-tris    UNKNOWN 4       :offset-assert 36)
;    (scale-z       float           :offset-assert 40)
;    (last-tris     UNKNOWN 4       :offset-assert 44)
;    (scale         vector  :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; navigate-h
(deftype nav-lookup-elem (structure)
  ((vec         vector :inline :offset-assert 0)
   (y-thresh    float          :offset 12)
   (time        uint32         :offset-assert 16)
   (node-offset uint32         :offset-assert 20)
   (lookup-type uint8          :offset-assert 24)
   (poly-ind    uint8          :offset-assert 25)
   (dummy0      uint16         :offset-assert 26)
   (dummy       uint32         :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; navigate-h
; (deftype nav-mesh (basic)
;   ((user-list           basic           :offset-assert 4)
;    (poly-lookup-history UNKNOWN 2       :offset-assert 8)
;    (debug-time          uint8           :offset-assert 10)
;    (static-sphere-count uint8           :offset-assert 11)
;    (static-sphere       uint32          :offset-assert 12)
;    (bounds              sphere  :inline :offset-assert 16)
;    (origin              vector  :inline :offset-assert 32)
;    (cache               UNKNOWN 4       :offset-assert 48)
;    (node-count          int32           :offset-assert 176)
;    (nodes               uint32          :offset-assert 180)
;    (vertex-count        int32           :offset-assert 184)
;    (vertex              uint32          :offset-assert 188)
;    (poly-count          int32           :offset-assert 192)
;    (poly                uint32          :offset-assert 196)
;    (route               uint32          :offset-assert 200)
;    )
;   :method-count-assert 30
;   :size-assert         #xcc
;   :flag-assert         #x1e000000cc
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

;; navigate-h
(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert 0)
   (intersect vector :inline :offset-assert 16)
   (normal    vector :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; navigate-h
(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert 0)
   (poly nav-poly         :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; navigate-h
; (deftype nav-control (basic)
;   ((flags               uint32            :offset-assert 4)
;    (process             basic             :offset-assert 8)
;    (shape               basic             :offset-assert 12)
;    (mesh                basic             :offset-assert 16)
;    (gap-event           basic             :offset-assert 20)
;    (block-event         basic             :offset-assert 24)
;    (current-poly        nav-poly          :offset-assert 28)
;    (next-poly           nav-poly          :offset-assert 32)
;    (target-poly         nav-poly          :offset-assert 36)
;    (portal              UNKNOWN  2        :offset-assert 40)
;    (nearest-y-threshold meters            :offset-assert 48)
;    (event-temp          vector   :inline  :offset-assert 64)
;    (old-travel          vector   :inline  :offset-assert 80)
;    (blocked-travel      vector   :inline  :offset-assert 96)
;    (prev-pos            vector   :inline  :offset-assert 112)
;    (extra-nav-sphere    vector   :inline  :offset-assert 128)
;    (travel              vector   :inline  :offset-assert 144)
;    (target-pos          vector   :inline  :offset-assert 160)
;    (destination-pos     vector   :inline  :offset-assert 176)
;    (block-time          uint64            :offset-assert 192)
;    (block-count         float             :offset-assert 200)
;    (user-poly           nav-poly          :offset-assert 204)
;    (nav-cull-radius     float             :offset-assert 208)
;    (num-spheres         int16             :offset-assert 212)
;    (max-spheres         int16             :offset-assert 214)
;    (sphere              UNKNOWN  :dynamic :offset-assert 224)
;    )
;   :method-count-assert 36
;   :size-assert         #xe0
;   :flag-assert         #x24000000e0
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     )
;   )

;; load-dgo
(deftype load-dgo-msg (structure)
  ((rsvd    uint16   :offset-assert 0)
   (result  uint16   :offset-assert 2)
   (b1      uint32   :offset-assert 4)
   (b2      uint32   :offset-assert 8)
   (bt      uint32   :offset-assert 12)
   ;(name    uint128  :offset-assert 16)
   (name uint8 16 :offset-assert 16)
   (address uint32   :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; load-dgo
(deftype load-chunk-msg (structure)
  ((rsvd     uint16     :offset-assert 0)
   (result   uint16     :offset-assert 2)
   (address  pointer    :offset-assert 4)
   (section  uint32     :offset-assert 8)
   (maxlen   uint32     :offset-assert 12)
   (id       uint32     :offset 4)
   (basename uint8 48 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; load-dgo
(deftype dgo-header (structure)
  ((length   uint32     :offset-assert 0)
   (rootname uint8 60 :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

; ;; ramdisk
; (deftype ramdisk-rpc-fill (structure)
;   ((rsvd1    int32     :offset-assert 0)
;    (ee-id    int32     :offset-assert 4)
;    (rsvd2    UNKNOWN 2 :offset-assert 8)
;    (filename uint128   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

;; ramdisk
(deftype ramdisk-rpc-load (structure)
  ((rsvd   int32   :offset-assert 0)
   (ee-id  int32   :offset-assert 4)
   (offset uint32  :offset-assert 8)
   (length uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; ramdisk
(deftype ramdisk-rpc-load-to-ee (structure)
  ((rsvd     int32    :offset-assert 0)
   (addr     int32    :offset-assert 4)
   (offset   int32    :offset-assert 8)
   (length   int32    :offset-assert 12)
   (filename uint128  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; gsound
; (deftype sound-iop-info (basic)
;   ((frame       uint32     :offset-assert 16)
;    (strpos      int32      :offset-assert 20)
;    (str-id      uint32     :offset-assert 24)
;    (str-id-sign int32      :offset-assert 24)
;    (freemem     uint32     :offset-assert 28)
;    (chinfo      UNKNOWN 48 :offset-assert 32)
;    (freemem2    uint32     :offset-assert 80)
;    (nocd        uint32     :offset-assert 84)
;    (dirtycd     uint32     :offset-assert 88)
;    (diskspeed   UNKNOWN 2  :offset-assert 92)
;    (lastspeed   uint32     :offset-assert 100)
;    (dupseg      int32      :offset-assert 104)
;    (times       UNKNOWN 41 :offset-assert 108)
;    (times-seq   uint32     :offset-assert 272)
;    )
;   :method-count-assert 9
;   :size-assert         #x114
;   :flag-assert         #x900000114
;   )

; ;; gsound
; (deftype flava-table-row (structure)
;   ((music basic      :offset-assert 0)
;    (flava UNKNOWN 50 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x36
;   :flag-assert         #x900000036
;   )

; ;; gsound
; (deftype flava-table (basic)
;   ((row   UNKNOWN 20 :offset-assert 4)
;    (count int32      :offset-assert 1284)
;    )
;   :method-count-assert 9
;   :size-assert         #x508
;   :flag-assert         #x900000508
;   )

;; joint
; (deftype joint-anim-matrix (joint-anim)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; joint
; (deftype joint-anim-transformq (joint-anim)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

; ;; joint
; (deftype art-joint-anim (art-element)
;   ()
;   :method-count-assert 13
;   :size-assert         #x30
;   :flag-assert         #xd00000030
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; joint
; (deftype art-group (art)
;   ()
;   :method-count-assert 15
;   :size-assert         #x20
;   :flag-assert         #xf00000020
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; cylinder
; (deftype cylinder-verts (structure)
;   ((vert UNKNOWN 24 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x180
;   :flag-assert         #x900000180
;   )

; ;; cylinder
; (deftype cylinder-flat-verts (structure)
;   ((vert UNKNOWN 10 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #xa0
;   :flag-assert         #x9000000a0
;   )

; ;; sprite
; (deftype sprite-header (structure)
;   ((header      UNKNOWN 1 :offset-assert 0)
;    (num-sprites int32     :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; sprite
; (deftype sprite-hvdf-data (structure)
;   ((data UNKNOWN 76 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c0
;   :flag-assert         #x9000004c0
;   )

; ;; sprite
; (deftype sprite-hvdf-control (structure)
;   ((alloc UNKNOWN 76 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c
;   :flag-assert         #x90000004c
;   )

; ;; sprite
; (deftype sprite-aux-list (basic)
;   ((num-entries int32     :offset-assert 4)
;    (entry       int32     :offset-assert 8)
;    (data        UNKNOWN 1 :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; sprite
; (deftype sprite-aux-list (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

; ;; sprite
; (deftype sprite-frame-data (structure)
;   ((data               UNKNOWN      41      :offset-assert 0)
;    (cdata              UNKNOWN      16      :offset-assert 0)
;    (fdata              UNKNOWN      25      :offset-assert 256)
;    (xy-array           UNKNOWN      8       :offset-assert 0)
;    (st-array           UNKNOWN      4       :offset-assert 128)
;    (xyz-array          UNKNOWN      4       :offset-assert 192)
;    (hmge-scale         vector       :inline :offset-assert 256)
;    (consts             vector       :inline :offset-assert 272)
;    (pfog0              float                :offset-assert 272)
;    (deg-to-rad         float                :offset-assert 276)
;    (min-scale          float                :offset-assert 280)
;    (inv-area           float                :offset-assert 284)
;    (adgif-giftag       qword        :inline :offset-assert 288)
;    (sprite-2d-giftag   qword        :inline :offset-assert 304)
;    (sprite-2d-giftag-2 qword        :inline :offset-assert 320)
;    (sincos-01          vector       :inline :offset-assert 336)
;    (sincos-23          vector       :inline :offset-assert 352)
;    (sincos-45          vector       :inline :offset-assert 368)
;    (sincos-67          vector       :inline :offset-assert 384)
;    (sincos-89          vector       :inline :offset-assert 400)
;    (basis-x            vector       :inline :offset-assert 416)
;    (basis-y            vector       :inline :offset-assert 432)
;    (sprite-3d-giftag   qword        :inline :offset-assert 448)
;    (screen-shader      adgif-shader :inline :offset-assert 464)
;    (clipped-giftag     qword        :inline :offset-assert 544)
;    (inv-hmge-scale     vector       :inline :offset-assert 560)
;    (stq-offset         vector       :inline :offset-assert 576)
;    (stq-scale          vector       :inline :offset-assert 592)
;    (rgba-plain         qword        :inline :offset-assert 608)
;    (warp-giftag        qword        :inline :offset-assert 624)
;    (fog-clamp          vector       :inline :offset-assert 640)
;    (fog-min            float                :offset-assert 640)
;    (fog-max            float                :offset-assert 644)
;    (max-scale          float                :offset-assert 648)
;    )
;   :method-count-assert 9
;   :size-assert         #x290
;   :flag-assert         #x900000290
;   )

; ;; sprite-distort
; (deftype sprite-distorter-sine-tables (basic)
;   ((aspx   float           :offset-assert 4)
;    (aspy   float           :offset-assert 8)
;    (entry  UNKNOWN 128     :offset-assert 16)
;    (ientry UNKNOWN 9       :offset-assert 2064)
;    (giftag qword   :inline :offset-assert 2208)
;    (color  qword   :inline :offset-assert 2224)
;    )
;   :method-count-assert 9
;   :size-assert         #x8c0
;   :flag-assert         #x9000008c0
;   )

; ;; debug-sphere
; (deftype debug-sphere-table (basic)
;   ((point UNKNOWN 300 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x12d0
;   :flag-assert         #x9000012d0
;   )

;; debug
(deftype debug-line (structure)
  ((flags  int32          :offset-assert 0)
   (bucket int32          :offset-assert 4)
   (v1     vector :inline :offset-assert 16)
   (v2     vector :inline :offset-assert 32)
   (color  uint32         :offset-assert 48)
   (mode   basic          :offset-assert 52)
   (color2 uint32         :offset-assert 56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

;; debug
(deftype debug-text-3d (structure)
  ((flags  int32            :offset-assert 0)
   (bucket int32            :offset-assert 4)
   (pos    vector   :inline :offset-assert 16)
   (color  uint64           :offset-assert 32)
   (offset vector2h :inline :offset-assert 40)
   (str    basic            :offset-assert 44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; debug
(deftype debug-tracking-thang (basic)
  ((length           int32  :offset-assert 4)
   (allocated-length int32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; debug
; (deftype debug-vertex-stats (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4b10
;   :flag-assert         #x900004b10
;   ;;  too many basic blocks
;   )

;; merc-blend-shape
(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert 0)
   (vtx-count uint32                   :offset-assert 16)
   (overlap   uint32                   :offset-assert 20)
   (lump-dest uint32                   :offset-assert 24)
   (lump-qwc  uint32                   :offset-assert 28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; merc-blend-shape
; (deftype blerc-block (structure)
;   ((output UNKNOWN            848     :offset-assert 0)
;    (header blerc-block-header :inline :offset-assert 848)
;    )
;   :method-count-assert 9
;   :size-assert         #x370
;   :flag-assert         #x900000370
;   )

; ;; merc-blend-shape
; (deftype blerc-dcache (structure)
;   ((repl-mult UNKNOWN 40 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x280
;   :flag-assert         #x900000280
;   )

;; merc-blend-shape
(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert 0)
   (next             uint32  :offset-assert 4)
   (min-val          int16   :offset-assert 8)
   (max-val          int16   :offset-assert 10)
   (fragment-count   int32   :offset-assert 12)
   (vtx-count        int32   :offset-assert 16)
   (target-vtx-count int32   :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

; ;; merc-blend-shape
; (deftype blerc-context (structure)
;   ((block-a blerc-block :inline :offset-assert 0)
;    (dummy   UNKNOWN     7312    :offset-assert 880)
;    (block-b blerc-block :inline :offset-assert 8192)
;    )
;   :method-count-assert 9
;   :size-assert         #x2370
;   :flag-assert         #x900002370
;   )

; ;; merc
; (deftype merc-fragment-control (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   ;;  too many basic blocks
;   )

; ;; merc
; (deftype merc-ctrl (art-element)
;   ()
;   :method-count-assert 13
;   :size-assert         #x70
;   :flag-assert         #xd00000070
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; ripple
; (deftype ripple-request (structure)
;   ((waveform basic        :offset-assert 0)
;    (effect   merc-effect  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; ripple
; (deftype ripple-globals (structure)
;   ((count    int32      :offset-assert 0)
;    (requests UNKNOWN 16 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

; ;; bones
; (deftype bone-calculation (structure)
;   ((flags               uint16            :offset-assert 0)
;    (num-bones           uint16            :offset-assert 2)
;    (matrix-area         uint32            :offset-assert 4)
;    (joints              uint32            :offset-assert 8)
;    (bones               uint32            :offset-assert 12)
;    (ripple-scale        float             :offset-assert 16)
;    (ripple-y-scale      float             :offset-assert 20)
;    (ripple-normal-scale float             :offset-assert 24)
;    (ripple-area         uint32            :offset-assert 28)
;    (next                bone-calculation  :offset-assert 32)
;    (dummy-1             uint32            :offset-assert 36)
;    (dummy-2             uint32            :offset-assert 40)
;    (dummy-3             uint32            :offset-assert 44)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; bones
; (deftype bone-calculation-list (structure)
;   ((first bone-calculation  :offset-assert 0)
;    (next  bone-calculation  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; bones
; (deftype texscroll-globals (structure)
;   ((requests int32      :offset-assert 0)
;    (effects  UNKNOWN 32 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x84
;   :flag-assert         #x900000084
;   )

;; bones
(deftype merc-effect-bucket-info (structure)
  ((color-fade    uint32  :offset-assert 0)
   (use-mercneric uint8   :offset-assert 4)
   (ignore-alpha  uint8   :offset-assert 5)
   (pad0          uint8   :offset-assert 6)
   (pad1          uint8   :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; bones
; (deftype merc-bucket-info (structure)
;   ((light                       vu-lights :inline :offset-assert 0)
;    (needs-clip                  int32             :offset-assert 112)
;    (need-mercprime-if-merc      int32             :offset-assert 116)
;    (must-use-mercneric-for-clip int32             :offset-assert 120)
;    (effect                      UNKNOWN   16      :offset-assert 124)
;    )
;   :method-count-assert 9
;   :size-assert         #xfc
;   :flag-assert         #x9000000fc
;   )

;; generic-merc
(deftype invinitdata (structure)
  ((count     uint8   :offset-assert 0)
   (init-data uint8   :offset-assert 1)
   (init-addr uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

; ;; generic-tie
; (deftype gsf-vertex (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   ;; bad type dec string: [~8x] gsf-vertex~%
;   )

;; shadow-cpu
(deftype shadow-stats (structure)
  ((num-single-tris  uint32  :offset-assert 0)
   (num-double-tris  uint32  :offset-assert 4)
   (num-single-edges uint32  :offset-assert 8)
   (num-double-edges uint32  :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; shadow-cpu
(deftype shadow-dcache (structure)
  ((vtx-table              uint32                :offset-assert 0)
   (single-edge-table      uint32                :offset-assert 4)
   (double-edge-table      uint32                :offset-assert 8)
   (double-tri-table       uint32                :offset-assert 12)
   (dcache-top             uint32                :offset-assert 16)
   (num-facing-single-tris uint32                :offset-assert 20)
   (num-single-edges       uint32                :offset-assert 24)
   (num-double-edges       uint32                :offset-assert 28)
   (single-tri-list        uint32                :offset-assert 32)
   (single-edge-list       uint32                :offset-assert 36)
   (double-edge-list       uint32                :offset-assert 40)
   (ptr-dual-verts         uint32                :offset-assert 44)
   (stats                  shadow-stats :inline  :offset-assert 48)
   (center                 vector       :inline  :offset-assert 64)
   (plane                  vector       :inline  :offset-assert 80)
   (top-plane              vector       :inline  :offset-assert 96)
   (near-plane             vector       :inline  :offset-assert 112)
   (light-dir              vector       :inline  :offset-assert 128)
   (vtx-min                vector       :inline  :offset-assert 144)
   (data                   uint8      :dynamic :offset-assert 160)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

; ;; shadow-vu1
; (deftype shadow-vu1-constants (structure)
;   ((hmgescale vector     :inline :offset-assert 0)
;    (invhscale vector     :inline :offset-assert 16)
;    (texoffset vector     :inline :offset-assert 32)
;    (texscale  vector     :inline :offset-assert 48)
;    (hvdfoff   vector     :inline :offset-assert 64)
;    (fog       vector     :inline :offset-assert 80)
;    (clrs      UNKNOWN    2       :offset-assert 96)
;    (adgif     gs-gif-tag :inline :offset-assert 128)
;    (texflush  ad-cmd     :inline :offset-assert 144)
;    (flush     ad-cmd     :inline :offset-assert 160)
;    (trigif    gs-gif-tag :inline :offset-assert 176)
;    (quadgif   gs-gif-tag :inline :offset-assert 192)
;    )
;   :method-count-assert 9
;   :size-assert         #xd0
;   :flag-assert         #x9000000d0
;   )

; ;; shadow-vu1
; (deftype shadow-vu1-gifbuf-template (structure)
;   ((adgif   gs-gif-tag :inline :offset-assert 0)
;    (ad      ad-cmd     :inline :offset-assert 16)
;    (flush   ad-cmd     :inline :offset-assert 32)
;    (trigif  gs-gif-tag :inline :offset-assert 48)
;    (quadgif gs-gif-tag :inline :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x50
;   :flag-assert         #x900000050
;   )

;; decomp
(deftype huf-dictionary-node (structure)
  ((zero uint16  :offset-assert 0)
   (one  uint16  :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

; ;; draw-node
; (deftype drawable-inline-array-node (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; shrubbery
; (deftype prototype-shrubbery (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x44
;   :flag-assert         #x1200000044
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tfrag
; (deftype drawable-inline-array-tfrag (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype drawable-inline-array-instance-tie (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype prototype-tie (drawable-inline-array)
;   ()
;   :method-count-assert 18
;   :size-assert         #x64
;   :flag-assert         #x1200000064
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; tie
; (deftype tie-consts (structure)
;   ((data      UNKNOWN 24      :offset-assert 0)
;    (vector    UNKNOWN 6       :offset-assert 0)
;    (quads     UNKNOWN 6       :offset-assert 0)
;    (adgif     qword   :inline :offset-assert 0)
;    (strgif    qword   :inline :offset-assert 16)
;    (extra     qword   :inline :offset-assert 32)
;    (gifbufs   qword   :inline :offset-assert 48)
;    (clrbufs   qword   :inline :offset-assert 64)
;    (misc      qword   :inline :offset-assert 80)
;    (atestgif  qword   :inline :offset-assert 96)
;    (atest     UNKNOWN 2       :offset-assert 112)
;    (atest-tra ad-cmd  :inline :offset-assert 112)
;    (atest-def ad-cmd  :inline :offset-assert 128)
;    )
;   :method-count-assert 9
;   :size-assert         #x90
;   :flag-assert         #x900000090
;   )

; ;; tie-near
; (deftype tie-near-consts (structure)
;   ((extra     qword   :inline :offset-assert 0)
;    (gifbufs   qword   :inline :offset-assert 16)
;    (clrbufs   qword   :inline :offset-assert 32)
;    (adgif     qword   :inline :offset-assert 48)
;    (strgif    qword   :inline :offset-assert 64)
;    (fangif    qword   :inline :offset-assert 80)
;    (hvdfoffs  vector  :inline :offset-assert 96)
;    (invhscale vector  :inline :offset-assert 112)
;    (guard     vector  :inline :offset-assert 128)
;    (atest     UNKNOWN 2       :offset-assert 144)
;    (atest-tra ad-cmd  :inline :offset-assert 144)
;    (atest-def ad-cmd  :inline :offset-assert 160)
;    )
;   :method-count-assert 9
;   :size-assert         #xb0
;   :flag-assert         #x9000000b0
;   )

;; tie-methods
(deftype tie-instance-debug (structure)
  ((max-instance uint32  :offset-assert 0)
   (min-instance uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

; ;; sparticle-launcher
; (deftype sparticle-birthinfo (structure)
;   ((sprite       uint32    :offset-assert 0)
;    (anim         int32     :offset-assert 4)
;    (anim-speed   float     :offset-assert 8)
;    (birth-func   basic     :offset-assert 12)
;    (joint-ppoint int32     :offset-assert 16)
;    (num-to-birth float     :offset-assert 20)
;    (sound        basic     :offset-assert 24)
;    (dataf        UNKNOWN 1 :offset-assert 0)
;    (data         UNKNOWN 1 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; sparticle-launcher
; (deftype sparticle-launcher (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   ;;  too many basic blocks
;   )

;; sparticle-launcher
(deftype sp-queued-launch-particles (structure)
  ((sp-system   basic          :offset-assert 0)
   (sp-launcher basic          :offset-assert 4)
   (pos         vector :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

; ;; sparticle-launcher
; (deftype sp-launch-queue (basic)
;   ((in-use int32      :offset-assert 4)
;    (queue  UNKNOWN 32 :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x410
;   :flag-assert         #x900000410
;   )

; ;; sparticle-launcher
; (deftype particle-adgif-cache (basic)
;   ((used    int32           :offset-assert 4)
;    (last    uint16          :offset-assert 8)
;    (lastgif adgif-shader    :offset-assert 12)
;    (tidhash UNKNOWN      80 :offset-assert 16)
;    (spadgif UNKNOWN      80 :offset-assert 176)
;    )
;   :method-count-assert 9
;   :size-assert         #x19b0
;   :flag-assert         #x9000019b0
;   )

; ;; loader
; (deftype load-dir (basic)
;   ()
;   :method-count-assert 11
;   :size-assert         #x10
;   :flag-assert         #xb00000010
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

;; task-control-h
(deftype task-cstage (structure)
  ((game-task uint8   :offset-assert 0)
   (status    uint64  :offset-assert 8)
   (flags     uint8   :offset-assert 16)
   (condition basic   :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; task-control-h
(deftype task-control (basic)
  ((current-stage int16  :offset-assert 4)
   (stage         basic  :offset-assert 8)
   )
  :method-count-assert 19
  :size-assert         #xc
  :flag-assert         #x130000000c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    )
  )

;; task-control-h
(deftype ambient-control (structure)
  ((last-ambient-time uint64  :offset-assert 0)
   (last-ambient      basic   :offset-assert 8)
   (last-ambient-id   uint32  :offset-assert 12)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; task-control-h
(deftype process-taskable (process-drawable)
  ((~Ttasks                basic                   :offset-assert 176)
   (~Tquery                gui-query       :inline :offset-assert 180)
   (~Told-target-pos       transformq      :inline :offset-assert 208)
   (~Tcell-for-task        uint8                   :offset-assert 256)
   (~Tcell-x               uint64                  :offset-assert 264)
   (~Tcam-joint-index      int32                   :offset-assert 272)
   (~Tskippable            basic                   :offset-assert 276)
   (~Tblend-on-exit        basic                   :offset-assert 280)
   (~Tcamera               uint64                  :offset-assert 288)
   (~Twill-talk            basic                   :offset-assert 296)
   (~Ttalk-message         uint32                  :offset-assert 300)
   (~Tlast-talk            uint64                  :offset-assert 304)
   (~Tbounce-away          basic                   :offset-assert 312)
   (~Tambient              ambient-control :inline :offset-assert 320)
   (~Tcenter-joint-index   int32                   :offset-assert 336)
   (~Tdraw-bounds-y-offset float                   :offset-assert 340)
   (~Tneck-joint-index     int32                   :offset-assert 344)
   (~Tfuel-cell-anim       basic                   :offset-assert 348)
   (~Tsound-flava          uint8                   :offset-assert 352)
   (~Thave-flava           basic                   :offset-assert 356)
   (~Tmusic                basic                   :offset-assert 360)
   (~Thave-music           basic                   :offset-assert 364)
   (~Tbeen-kicked          basic                   :offset-assert 368)
   (~Tcur-trans-hook       basic                   :offset-assert 372)
   (~Tshadow-backup        basic                   :offset-assert 376)
   )
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    )
  )

; ;; game-save
; (deftype game-save-tag (structure)
;   ((user-object UNKNOWN 2 :offset-assert 0)
;    (user-uint64 uint64    :offset-assert 0)
;    (user-float0 float     :offset-assert 0)
;    (user-float  UNKNOWN 2 :offset-assert 0)
;    (user-int32  UNKNOWN 2 :offset-assert 0)
;    (user-uint32 UNKNOWN 2 :offset-assert 0)
;    (user-int16  UNKNOWN 4 :offset-assert 0)
;    (user-uint16 UNKNOWN 4 :offset-assert 0)
;    (user-int8   UNKNOWN 8 :offset-assert 0)
;    (user-int80  int8      :offset-assert 0)
;    (user-int81  int8      :offset-assert 1)
;    (user-uint8  UNKNOWN 8 :offset-assert 0)
;    (elt-count   int32     :offset-assert 8)
;    (elt-size    uint16    :offset-assert 12)
;    (elt-type    uint16    :offset-assert 14)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; game-save
; (deftype game-save (basic)
;   ((version               int32            :offset-assert 4)
;    (allocated-length      int32            :offset-assert 8)
;    (length                int32            :offset-assert 12)
;    (info-int32            UNKNOWN 16       :offset-assert 16)
;    (info-int8             UNKNOWN 64       :offset-assert 16)
;    (level-index           int32            :offset-assert 16)
;    (fuel-cell-count       float            :offset-assert 20)
;    (money-count           float            :offset-assert 24)
;    (buzzer-count          float            :offset-assert 28)
;    (completion-percentage float            :offset-assert 32)
;    (minute                uint8            :offset-assert 36)
;    (hour                  uint8            :offset-assert 37)
;    (week                  uint8            :offset-assert 38)
;    (day                   uint8            :offset-assert 39)
;    (month                 uint8            :offset-assert 40)
;    (year                  uint8            :offset-assert 41)
;    (new-game              int32            :offset-assert 44)
;    (tag                   UNKNOWN :dynamic :offset-assert 80)
;    )
;   :method-count-assert 12
;   :size-assert         #x50
;   :flag-assert         #xc00000050
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; game-save
; (deftype game-save (basic)
;   ()
;   :method-count-assert 12
;   :size-assert         #x50
;   :flag-assert         #xc00000050
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

;; game-save
(deftype auto-save (process)
  ((~Tcard       int32                :offset-assert 112)
   (~Tslot       int32                :offset-assert 116)
   (~Twhich      int32                :offset-assert 120)
   (~Tbuffer     kheap                :offset-assert 124)
   (~Tmode       basic                :offset-assert 128)
   (~Tresult     uint32               :offset-assert 132)
   (~Tsave       basic                :offset-assert 136)
   (~Tinfo       mc-slot-info :inline :offset-assert 140)
   (~Tnotify     uint64               :offset-assert 440)
   (~Tstate-time uint64               :offset-assert 448)
   (~Tpart       basic                :offset-assert 456)
   )
  :heap-base #x160
  :method-count-assert 23
  :size-assert         #x1cc
  :flag-assert         #x17016001cc
  ;; inherited inpspect of process
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    )
  )

;; mood
(deftype flames-state (structure)
  ((index  uint8  :offset-assert 0)
   (time   uint8  :offset-assert 1)
   (length uint8  :offset-assert 2)
   (height uint8  :offset-assert 3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype lightning-state (structure)
  ((val uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype light-time-state (structure)
  ((time uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype light-state (structure)
  ((fade uint8  :offset-assert 0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; mood
(deftype lava-state (structure)
  ((scale      float 4 :offset-assert 0)
   (time       uint8     :offset-assert 16)
   (last-index uint8     :offset-assert 17)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

;; mood
(deftype misty-states (structure)
  ((flames flames-state     :inline :offset-assert 0)
   (light0 light-state      :inline :offset-assert 4)
   (light1 light-state      :inline :offset-assert 5)
   (time0  light-time-state :inline :offset-assert 6)
   (time1  light-time-state :inline :offset-assert 7)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; mood
(deftype swamp-village2-states (structure)
  ((flames    flames-state    :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

;; mood
(deftype village1-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype jungle-states (structure)
  ((light    light-state      :inline :offset-assert 0)
   (time     light-time-state :inline :offset-assert 1)
   (one-shot uint8                    :offset-assert 2)
   )
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )

;; mood
(deftype sunken-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; mood
(deftype rolling-states (structure)
  ((light0    light-state      :inline :offset-assert 0)
   (light1    light-state      :inline :offset-assert 1)
   (light2    light-state      :inline :offset-assert 2)
   (light3    light-state      :inline :offset-assert 3)
   (time      light-time-state :inline :offset-assert 4)
   (lightning lightning-state  :inline :offset-assert 5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

;; mood
(deftype firecanyon-states (structure)
  ((lava lava-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x12
  :flag-assert         #x900000012
  )

;; mood
(deftype training-states (structure)
  ((light light-state      :inline :offset-assert 0)
   (time  light-time-state :inline :offset-assert 1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; mood
(deftype maincave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype robocave-states (structure)
  ((flames flames-state :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; mood
(deftype snow-states (structure)
  ((flames   flames-state     :inline :offset-assert 0)
   (light    light-state      :inline :offset-assert 4)
   (time     light-time-state :inline :offset-assert 5)
   (one-shot uint8                    :offset-assert 6)
   (interp   float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; mood
(deftype village3-states (structure)
  ((flames    flames-state :inline :offset-assert 0)
   (scale     float                :offset-assert 4)
   (lava      lava-state   :inline :offset-assert 8)
   (lava-time float                :offset-assert 28)
   (time      uint8                :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x21
  :flag-assert         #x900000021
  )

;; mood
(deftype lavatube-states (structure)
  ((lava  lava-state       :inline :offset-assert 0)
   (light light-state      :inline :offset-assert 18)
   (time  light-time-state :inline :offset-assert 19)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; mood
(deftype ogre-states (structure)
  ((lava      lava-state      :inline :offset-assert 0)
   (lightning lightning-state :inline :offset-assert 18)
   (lava-time float                   :offset-assert 20)
   (lava-fade float                   :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; mood
(deftype finalboss-states (structure)
  ((start-time  uint64  :offset-assert 0)
   (secret-time uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; mood
(deftype citadel-states (structure)
  ((flames      flames-state     :inline :offset-assert 0)
   (light       light-state      :inline :offset-assert 4)
   (time        light-time-state :inline :offset-assert 5)
   (flicker-off uint8                    :offset-assert 6)
   (flicker-on  uint8                    :offset-assert 7)
   (shield-fade float                    :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

; ;; sky
; (deftype sky-frame-data (structure)
;   ((data              UNKNOWN 18      :offset-assert 0)
;    (world-homo-matrix matrix  :inline :offset-assert 0)
;    (hmge-scale        vector  :inline :offset-assert 64)
;    (hvdf-offset       vector  :inline :offset-assert 80)
;    (consts            vector  :inline :offset-assert 96)
;    (pfog0             float           :offset-assert 96)
;    (radius            float           :offset-assert 100)
;    (nokick            float           :offset-assert 108)
;    (strip-giftag      qword   :inline :offset-assert 112)
;    (col-adgif         qword   :inline :offset-assert 128)
;    (save              UNKNOWN 5       :offset-assert 144)
;    (sun-fan-giftag    qword   :inline :offset-assert 224)
;    (sun-strip-giftag  qword   :inline :offset-assert 240)
;    (sun-alpha         qword   :inline :offset-assert 256)
;    (sun-alpha-giftag  qword   :inline :offset-assert 272)
;    )
;   :method-count-assert 9
;   :size-assert         #x120
;   :flag-assert         #x900000120
;   )

; ;; sky-tng
; (deftype sky-vertex (structure)
;   ()
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   ;; bad type dec string: sky-vertex [~X]:~%
;   )

;; load-boundary-h
(deftype lbvtx (structure)
  ((x    float           :offset-assert 0)
   (y    float           :offset-assert 4)
   (z    float           :offset-assert 8)
   (v0   uint8           :offset-assert 12)
   (v1   uint8           :offset-assert 13)
   (v2   uint8           :offset-assert 14)
   (ix   uint8           :offset-assert 15)
   (quad uint128         :offset 0)
   (v    vector  :inline :offset 0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; load-boundary-h
(deftype load-boundary-crossing-command (structure)
  ((cmd        uint8     :offset-assert 0)
   (bparm      uint8 3 :offset-assert 1)
   ;(parm       UNKNOWN 2 :offset-assert 4)
   (lev0       basic     :offset-assert 4)
   (lev1       basic     :offset-assert 8)
   (displev    basic     :offset 4)
   (dispcmd    basic     :offset 8)
   (nick       basic     :offset 4)
   (forcelev   basic     :offset 4)
   (forceonoff basic     :offset 8)
   (checkname  basic     :offset 4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; load-boundary-h
(deftype load-boundary (basic)
  ((num-points uint16                                 :offset-assert 4)
   (flags      uint8                                  :offset-assert 6)
   (top-plane  float                                  :offset-assert 8)
   (bot-plane  float                                  :offset-assert 12)
   (tri-cnt    int32                                  :offset-assert 16)
   (next       basic                                  :offset-assert 20)
   (cmd-fwd    load-boundary-crossing-command :inline :offset-assert 24)
   (cmd-bwd    load-boundary-crossing-command :inline :offset-assert 36)
   (rejector   vector                         :inline :offset-assert 48)
   (data       uint128                        1       :offset-assert 64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; load-boundary
(deftype lb-editor-parms (basic)
  ((boundary basic  :offset-assert 4)
   (vertex   int32  :offset-assert 8)
   (x-origin float  :offset-assert 12)
   (z-origin float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

; ;; text
; (deftype game-text-info (basic)
;   ()
;   :method-count-assert 10
;   :size-assert         #x10
;   :flag-assert         #xa00000010
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

;; collide-probe
(deftype collide-probe-stack-elem (structure)
  ((child uint32  :offset-assert 0)
   (count uint32  :offset-assert 4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; collide-probe
(deftype collide-probe-stack (structure)
  ((data collide-probe-stack-elem 1024 :inline :offset-assert 0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

;; collide-mesh
(deftype sopt-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-mesh
(deftype spat-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; collide-mesh
(deftype oot-work (structure)
  ((intersect     vector         :inline :offset-assert 0)
   (sphere-bbox4w bounding-box4w :inline :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

; ;; collide-touch
; (deftype add-prims-touching-work (structure)
;   ((tri1 collide-tri-result  :offset-assert 0)
;    (tri2 collide-tri-result  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; collide-edge-grab
; (deftype pbhp-stack-vars (structure)
;   ((edge        collide-edge-edge         :offset-assert 0)
;    (allocated   basic                     :offset-assert 4)
;    (neg-hold-pt vector            :inline :offset-assert 16)
;    (split-vec   vector            :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

;; merc-death
(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert 4)
   (timer       uint8   :offset-assert 6)
   (overlap     uint8   :offset-assert 7)
   (effect      uint32  :offset-assert 8)
   (sound       basic   :offset-assert 12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

; ;; water-h
; (deftype water-control (basic)
;   ((flags             uint32                :offset-assert 4)
;    (process           basic                 :offset-assert 8)
;    (joint-index       int32                 :offset-assert 12)
;    (top-y-offset      float                 :offset-assert 16)
;    (ripple-size       meters                :offset-assert 20)
;    (enter-water-time  uint64                :offset-assert 24)
;    (wade-time         uint64                :offset-assert 32)
;    (on-water-time     uint64                :offset-assert 40)
;    (enter-swim-time   uint64                :offset-assert 48)
;    (swim-time         uint64                :offset-assert 56)
;    (base-height       meters                :offset-assert 64)
;    (wade-height       meters                :offset-assert 68)
;    (swim-height       meters                :offset-assert 72)
;    (surface-height    meters                :offset-assert 76)
;    (bottom-height     meters                :offset-assert 80)
;    (height            meters                :offset-assert 84)
;    (height-offset     UNKNOWN       4       :offset-assert 88)
;    (real-ocean-offset meters                :offset-assert 88)
;    (ocean-offset      meters                :offset-assert 92)
;    (bob-offset        meters                :offset-assert 96)
;    (align-offset      meters                :offset-assert 100)
;    (swim-depth        meters                :offset-assert 104)
;    (bob               smush-control :inline :offset-assert 112)
;    (volume            uint64                :offset-assert 144)
;    (bottom            UNKNOWN       2       :offset-assert 160)
;    (top               UNKNOWN       2       :offset-assert 192)
;    (enter-water-pos   vector        :inline :offset-assert 224)
;    (drip-old-pos      vector        :inline :offset-assert 240)
;    (drip-joint-index  int32                 :offset-assert 256)
;    (drip-wetness      float                 :offset-assert 260)
;    (drip-time         uint64                :offset-assert 264)
;    (drip-speed        float                 :offset-assert 272)
;    (drip-height       meters                :offset-assert 276)
;    (drip-mult         float                 :offset-assert 280)
;    )
;   :method-count-assert 17
;   :size-assert         #x11c
;   :flag-assert         #x110000011c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     )
;   )

;; water-h
(deftype water-vol (process-drawable)
  ((~Twater-height  float  :offset-assert 176) ;; meters
   (~Twade-height   float  :offset-assert 180) ;; meters
   (~Tswim-height   float  :offset-assert 184) ;; meters
   (~Tbottom-height float  :offset-assert 188) ;; meters
   (~Tattack-event  basic   :offset-assert 192)
   (~Ttarget        uint64  :offset-assert 200)
   (~Tflags         uint32  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )

;; cam-master
(deftype camera-master-bank (basic)
  ((onscreen-head-height            float  :offset-assert 4) ;; meters
   (onscreen-foot-height            float  :offset-assert 8) ;; meters
   (target-height                   float  :offset-assert 12) ;; meters
   (up-move-to-pitch-ratio-in-air   float   :offset-assert 16)
   (down-move-to-pitch-ratio-in-air float   :offset-assert 20)
   (up-move-to-pitch-on-ground      float   :offset-assert 24)
   (down-move-to-pitch-on-ground    float   :offset-assert 28)
   (pitch-off-blend                 float   :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; cam-master
(deftype list-keeper (process)
  ((~Tdummy float  :offset-assert 112)
   )
  :heap-base #x10
  :method-count-assert 14
  :size-assert         #x74
  :flag-assert         #xe00100074
  ;; inherited inpspect of process
  )

; ;; cam-states
; (deftype cam-eye-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-billy-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-string-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype los-dist (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype collide-los-dist-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype collide-los-result (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-stick-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-states
; (deftype cam-bike-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

;; cam-states-dbg
(deftype cam-point-watch-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed float    :offset-assert 8) ;; deg
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; cam-states-dbg
(deftype cam-free-bank (basic)
  ((speed     float  :offset-assert 4)
   (rot-speed float    :offset-assert 8) ;; deg
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; cam-states-dbg
(deftype camera-free-floating-move-info (structure)
  ((rv vector :inline :offset-assert 0)
   (tv vector :inline :offset-assert 16)
   (up vector :inline :offset-assert 32)
   (tm matrix :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; cam-states-dbg
(deftype camera-orbit-info (structure)
  ((radius      float          :offset-assert 0)
   (rot         float          :offset-assert 4)
   (target-off  vector :inline :offset-assert 16)
   (orbit-off   vector :inline :offset-assert 32)
   (radius-lerp float          :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; cam-states-dbg
(deftype CAM_ORBIT-bank (basic)
  ((RADIUS_MAX        float  :offset-assert 4)
   (RADIUS_MIN        float  :offset-assert 8)
   (TARGET_OFF_ADJUST float  :offset-assert 12)
   (ORBIT_OFF_ADJUST  float  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; vol-h
(deftype plane-volume (structure)
  ((volume-type  basic   :offset-assert 0)
   (point-count  int16   :offset-assert 4)
   (normal-count int16   :offset-assert 6)
   (first-point  vector  :offset-assert 8)
   (first-normal vector  :offset-assert 12)
   (num-planes   int32   :offset-assert 16)
   (plane        uint32  :offset-assert 20)
   )
  :method-count-assert 12
  :size-assert         #x18
  :flag-assert         #xc00000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

; ;; vol-h
; (deftype vol-control (basic)
;   ((flags         uint32     :offset-assert 4)
;    (process       basic      :offset-assert 8)
;    (pos-vol-count int32      :offset-assert 12)
;    (pos-vol       UNKNOWN 32 :offset-assert 16)
;    (neg-vol-count int32      :offset-assert 784)
;    (neg-vol       UNKNOWN 32 :offset-assert 788)
;    (debug-point   basic      :offset-assert 1556)
;    (debug-normal  basic      :offset-assert 1560)
;    )
;   :method-count-assert 12
;   :size-assert         #x61c
;   :flag-assert         #xc0000061c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; cam-layout
; (deftype cam-layout-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-basic (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-item-action (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-item (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-list-item (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm-list (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clm (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype volume-descriptor-array (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype cam-layout (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process) parent was UNKNOWN
;   )

; ;; cam-layout
; (deftype interp-test-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-layout
; (deftype clmf-cam-flag-toggle-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; cam-debug
; (deftype cam-dbg-scratch (structure)
;   ((linevec4w      UNKNOWN 2       :offset-assert 0)
;    (color          vector  :inline :offset-assert 32)
;    (plotvec        UNKNOWN 2       :offset-assert 48)
;    (linevec        UNKNOWN 2       :offset-assert 80)
;    (rel-vec        vector  :inline :offset-assert 112)
;    (sphere-v-start vector  :inline :offset-assert 128)
;    (sphere-v-end   vector  :inline :offset-assert 144)
;    (sphere-v-down  vector  :inline :offset-assert 160)
;    (sphere-vec     vector  :inline :offset-assert 176)
;    (crossvec       UNKNOWN 3       :offset-assert 192)
;    (bboxvec        UNKNOWN 6       :offset-assert 240)
;    (fov-vv         UNKNOWN 4       :offset-assert 336)
;    (fov-src        vector  :inline :offset-assert 400)
;    (fov-dest       vector  :inline :offset-assert 416)
;    (fov-vert       vector  :inline :offset-assert 432)
;    (fov-horz       vector  :inline :offset-assert 448)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d0
;   :flag-assert         #x9000001d0
;   )

; ;; cam-debug
; (deftype cam-debug-tri (structure)
;   ((vertex    UNKNOWN  3       :offset-assert 0)
;    (intersect vector   :inline :offset-assert 48)
;    (color     vector4w         :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x44
;   :flag-assert         #x900000044
;   )

;; cam-debug
(deftype cam-collision-record (structure)
  ((pos            vector :inline :offset-assert 0)
   (vel            vector :inline :offset-assert 16)
   (desired-pos    vector :inline :offset-assert 32)
   (cam-tpos-cur   vector :inline :offset-assert 48)
   (cam-tpos-old   vector :inline :offset-assert 64)
   (view-flat      vector :inline :offset-assert 80)
   (string-min-val vector :inline :offset-assert 96)
   (string-max-val vector :inline :offset-assert 112)
   (view-off       vector :inline :offset-assert 128)
   (min-z-override float          :offset-assert 144)
   (string-push-z  float          :offset-assert 148)
   (view-off-param float          :offset-assert 152)
   (frame          int32          :offset-assert 156)
   (iteration      int32          :offset-assert 160)
   (move-type      basic          :offset-assert 164)
   )
  :method-count-assert 9
  :size-assert         #xa8
  :flag-assert         #x9000000a8
  )

; ;; cam-debug
; (deftype cam-collision-record-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; generic-obs
; (deftype target-start (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; generic-obs
; (deftype camera-start (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; generic-obs
; (deftype med-res-level (process-drawable)
;   ((~Tlevel     basic  :offset-assert 176)
;    (~Tpart-mode basic  :offset-assert 180)
;    (~Tindex     int32  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; generic-obs
; (deftype launcher (process-drawable)
;   ((~Tspring-height   meters         :offset-assert 176)
;    (~Tcamera          basic          :offset-assert 180)
;    (~Tactive-distance float          :offset-assert 184)
;    (~Tseek-time       uint64         :offset-assert 192)
;    (~Tdest            vector :inline :offset-assert 208)
;    (~Tsound-id        uint32         :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xe4
;   :flag-assert         #x14008000e4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; target-util
; (deftype target-bank (basic)
;   ((jump-collide-offset          meters           :offset-assert 4)
;    (jump-height-min              meters           :offset-assert 8)
;    (jump-height-max              meters           :offset-assert 12)
;    (double-jump-height-min       meters           :offset-assert 16)
;    (double-jump-height-max       meters           :offset-assert 20)
;    (flip-jump-height-min         meters           :offset-assert 24)
;    (flip-jump-height-max         meters           :offset-assert 28)
;    (duck-jump-height-min         meters           :offset-assert 32)
;    (duck-jump-height-max         meters           :offset-assert 36)
;    (flop-jump-height-min         meters           :offset-assert 40)
;    (flop-jump-height-max         meters           :offset-assert 44)
;    (attack-jump-height-min       meters           :offset-assert 48)
;    (attack-jump-height-max       meters           :offset-assert 52)
;    (edge-grab-jump-height-min    meters           :offset-assert 56)
;    (edge-grab-jump-height-max    meters           :offset-assert 60)
;    (swim-jump-height-min         meters           :offset-assert 64)
;    (swim-jump-height-max         meters           :offset-assert 68)
;    (tube-jump-height-min         meters           :offset-assert 72)
;    (tube-jump-height-max         meters           :offset-assert 76)
;    (wheel-duration               uint64           :offset-assert 80)
;    (wheel-jump-pre-window        uint64           :offset-assert 88)
;    (wheel-jump-post-window       uint64           :offset-assert 96)
;    (wheel-timeout                uint64           :offset-assert 104)
;    (wheel-speed-min              meters           :offset-assert 112)
;    (wheel-speed-inc              meters           :offset-assert 116)
;    (wheel-flip-duration          uint64           :offset-assert 120)
;    (wheel-flip-height            meters           :offset-assert 128)
;    (wheel-flip-dist              meters           :offset-assert 132)
;    (wheel-flip-art-height        meters           :offset-assert 136)
;    (wheel-flip-art-dist          meters           :offset-assert 140)
;    (duck-slide-distance          meters           :offset-assert 144)
;    (fall-far                     meters           :offset-assert 148)
;    (fall-far-inc                 meters           :offset-assert 152)
;    (attack-timeout               uint64           :offset-assert 160)
;    (ground-timeout               uint64           :offset-assert 168)
;    (slide-down-timeout           uint64           :offset-assert 176)
;    (fall-timeout                 uint64           :offset-assert 184)
;    (fall-stumble-threshold       meters           :offset-assert 192)
;    (yellow-projectile-speed      meters           :offset-assert 196)
;    (hit-invulnerable-timeout     uint64           :offset-assert 200)
;    (run-cycle-length             float            :offset-assert 208)
;    (walk-cycle-dist              meters           :offset-assert 212)
;    (walk-up-cycle-dist           meters           :offset-assert 216)
;    (walk-down-cycle-dist         meters           :offset-assert 220)
;    (walk-side-cycle-dist         meters           :offset-assert 224)
;    (run-cycle-dist               meters           :offset-assert 228)
;    (run-up-cycle-dist            meters           :offset-assert 232)
;    (run-down-cycle-dist          meters           :offset-assert 236)
;    (run-side-cycle-dist          meters           :offset-assert 240)
;    (run-wall-cycle-dist          meters           :offset-assert 244)
;    (duck-walk-cycle-dist         meters           :offset-assert 248)
;    (wade-shallow-walk-cycle-dist meters           :offset-assert 252)
;    (wade-deep-walk-cycle-dist    meters           :offset-assert 256)
;    (smack-surface-dist           meters           :offset-assert 260)
;    (smack-surface-height         meters           :offset-assert 264)
;    (min-dive-depth               meters           :offset-assert 268)
;    (root-radius                  meters           :offset-assert 272)
;    (root-offset                  vector   :inline :offset-assert 288)
;    (body-radius                  meters           :offset-assert 304)
;    (edge-radius                  meters           :offset-assert 308)
;    (edge-offset                  vector   :inline :offset-assert 320)
;    (head-radius                  meters           :offset-assert 336)
;    (head-height                  meters           :offset-assert 340)
;    (head-offset                  vector   :inline :offset-assert 352)
;    (spin-radius                  meters           :offset-assert 368)
;    (spin-offset                  vector   :inline :offset-assert 384)
;    (duck-spin-radius             meters           :offset-assert 400)
;    (duck-spin-offset             vector   :inline :offset-assert 416)
;    (punch-radius                 meters           :offset-assert 432)
;    (punch-offset                 vector   :inline :offset-assert 448)
;    (uppercut-radius              meters           :offset-assert 464)
;    (uppercut0-offset             vector   :inline :offset-assert 480)
;    (uppercut1-offset             vector   :inline :offset-assert 496)
;    (flop-radius                  meters           :offset-assert 512)
;    (flop0-offset                 vector   :inline :offset-assert 528)
;    (flop1-offset                 vector   :inline :offset-assert 544)
;    (stuck-time                   useconds         :offset-assert 560)
;    (stuck-timeout                useconds         :offset-assert 568)
;    (stuck-distance               meters           :offset-assert 576)
;    (tongue-pull-speed-min        float            :offset-assert 580)
;    (tongue-pull-speed-max        float            :offset-assert 584)
;    (yellow-attack-timeout        uint64           :offset-assert 592)
;    )
;   :method-count-assert 9
;   :size-assert         #x258
;   :flag-assert         #x900000258
;   )

; ;; voicebox
; (deftype camera-voicebox (camera-slave)
;   ()
;   :method-count-assert 14
;   :size-assert         #xa04
;   :flag-assert         #xe09a00a04
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; voicebox
; (deftype voicebox (process-drawable)
;   ((~Tbase-trans vector           :inline :offset-assert 176)
;    (~Tseeker     cam-float-seeker :inline :offset-assert 192)
;    (~Tblend      float                    :offset-assert 216)
;    (~Ttwist      float                    :offset-assert 220)
;    (~Thint       uint64                   :offset-assert 224)
;    )
;   :method-count-assert 23
;   :size-assert         #xe8
;   :flag-assert         #x17008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; target2
; (deftype first-person-hud (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process) parent was UNKNOWN
;   )

; ;; menu
; (deftype debug-menu-context (basic)
;   ((is-active   basic     :offset-assert 4)
;    (sel-length  int32     :offset-assert 8)
;    (sel-menu    UNKNOWN 8 :offset-assert 12)
;    (root-menu   basic     :offset-assert 44)
;    (joypad-func basic     :offset-assert 48)
;    (joypad-item basic     :offset-assert 52)
;    (font        basic     :offset-assert 56)
;    (is-hidden   basic     :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; menu
; (deftype debug-menu-node (basic)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; menu
; (deftype debug-menu (debug-menu-node)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (context       basic  :offset-assert 20)
;    (selected-item basic  :offset-assert 24)
;    (pix-width     int32  :offset-assert 28)
;    (pix-height    int32  :offset-assert 32)
;    (items         basic  :offset-assert 36)
;    )
;   :method-count-assert 9
;   :size-assert         #x28
;   :flag-assert         #x900000028
;   )

; ;; menu
; (deftype debug-menu-item (debug-menu-node)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; menu
; (deftype debug-menu-item-submenu (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (submenu       basic  :offset-assert 24)
;    )
;   :method-count-assert 9
;   :size-assert         #x1c
;   :flag-assert         #x90000001c
;   )

; ;; menu
; (deftype debug-menu-item-function (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (activate-func basic  :offset-assert 24)
;    (hilite-timer  int8   :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x1d
;   :flag-assert         #x90000001d
;   )

; ;; menu
; (deftype debug-menu-item-flag (debug-menu-item)
;   ((name          basic  :offset-assert 4)
;    (parent        basic  :offset-assert 8)
;    (refresh-delay int32  :offset-assert 12)
;    (refresh-ctr   int32  :offset-assert 16)
;    (id            int32  :offset-assert 20)
;    (activate-func basic  :offset-assert 24)
;    (is-on         basic  :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; menu
; (deftype debug-menu-item-var (debug-menu-item)
;   ((name             basic  :offset-assert 4)
;    (parent           basic  :offset-assert 8)
;    (refresh-delay    int32  :offset-assert 12)
;    (refresh-ctr      int32  :offset-assert 16)
;    (id               int32  :offset-assert 20)
;    (display-str      basic  :offset-assert 24)
;    (grabbed-joypad-p basic  :offset-assert 28)
;    (float-p          basic  :offset-assert 32)
;    (range-p          basic  :offset-assert 36)
;    (show-len         int32  :offset-assert 40)
;    (inc-delay        int32  :offset-assert 44)
;    (inc-delay-ctr    int32  :offset-assert 48)
;    (step-delay-ctr   int32  :offset-assert 52)
;    (inc-dir          int32  :offset-assert 56)
;    (fval             float  :offset-assert 60)
;    (fundo-val        float  :offset-assert 64)
;    (frange-min       float  :offset-assert 68)
;    (frange-max       float  :offset-assert 72)
;    (fstart-inc       float  :offset-assert 76)
;    (fstep            float  :offset-assert 80)
;    (fprecision       int32  :offset-assert 84)
;    (factivate-func   basic  :offset-assert 88)
;    (ival             int32  :offset-assert 60)
;    (iundo-val        int32  :offset-assert 64)
;    (irange-min       int32  :offset-assert 68)
;    (irange-max       int32  :offset-assert 72)
;    (istart-inc       int32  :offset-assert 76)
;    (istep            int32  :offset-assert 80)
;    (ihex-p           basic  :offset-assert 92)
;    (iactivate-func   basic  :offset-assert 88)
;    (ifloat-p         basic  :offset-assert 96)
;    )
;   :method-count-assert 9
;   :size-assert         #x64
;   :flag-assert         #x900000064
;   )

; ;; drawable-group
; (deftype drawable-group (drawable)
;   ()
;   :method-count-assert 18
;   :size-assert         #x24
;   :flag-assert         #x1200000024
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     )
;   )

; ;; collide-cache
; (deftype collide-puls-work (structure)
;   ((ignore-pat uint32                     :offset-assert 0)
;    (tri-out    collide-tri-result         :offset-assert 4)
;    (bsphere    sphere             :inline :offset-assert 16)
;    (move-dist  vector             :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; collide-cache
; (deftype lsmi-work (structure)
;   ((best-u      float                      :offset-assert 0)
;    (orig-best-u float                      :offset-assert 4)
;    (action      uint32                     :offset-assert 8)
;    (tri-out     collide-tri-result :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x64
;   :flag-assert         #x900000064
;   )

; ;; memory-usage
; (deftype memory-usage-block (basic)
;   ()
;   :method-count-assert 12
;   :size-assert         #x6e0
;   :flag-assert         #xc000006e0
;   ;;  too many basic blocks
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

; ;; entity
; (deftype entity (res-lump)
;   ()
;   :method-count-assert 27
;   :size-assert         #x34
;   :flag-assert         #x1b00000034
;   ;; unrecognized get op: (set! t9 find-parent-method) parent was res-lump
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; entity
; (deftype entity-actor (entity)
;   ()
;   :method-count-assert 31
;   :size-assert         #x50
;   :flag-assert         #x1f00000050
;   ;; unrecognized get op: (set! t9 find-parent-method) parent was entity
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     )
;   )

; ;; navigate
; (deftype cfs-travel-vec (structure)
;   ((dir         vector :inline :offset-assert 0)
;    (delta-angle float          :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; navigate
; (deftype cfs-work (structure)
;   ((desired-travel-dist float           :offset-assert 0)
;    (desired-angle       float           :offset-assert 4)
;    (max-dist            float           :offset-assert 8)
;    (old-angle           float           :offset-assert 12)
;    (modified            int32           :offset-assert 16)
;    (blocked-mask        uint64          :offset-assert 24)
;    (travel              vector  :inline :offset-assert 32)
;    (current             vector  :inline :offset-assert 48)
;    (new-travel          UNKNOWN 2       :offset-assert 64)
;    (temp-travel         UNKNOWN 2       :offset-assert 128)
;    (prev-dir            vector  :inline :offset-assert 192)
;    (attempt-dir         vector  :inline :offset-assert 208)
;    (tangent             UNKNOWN 2       :offset-assert 224)
;    )
;   :method-count-assert 9
;   :size-assert         #x100
;   :flag-assert         #x900000100
;   )

; ;; navigate
; (deftype nav-control-cfs-work (structure)
;   ((in-dir              vector  :inline :offset-assert 0)
;    (right-dir           vector  :inline :offset-assert 16)
;    (best-dir            UNKNOWN 2       :offset-assert 32)
;    (temp-dir            UNKNOWN 2       :offset-assert 64)
;    (away-dir            vector  :inline :offset-assert 96)
;    (best-dir-angle      UNKNOWN 2       :offset-assert 112)
;    (ignore-mask         uint64          :offset-assert 120)
;    (initial-ignore-mask uint64          :offset-assert 128)
;    (i-sphere            int32           :offset-assert 136)
;    (i-first-sphere      int32           :offset-assert 140)
;    (i-inside-sphere     int32           :offset-assert 144)
;    (inside-sphere-dist  float           :offset-assert 148)
;    (sign                float           :offset-assert 152)
;    (travel-len          float           :offset-assert 156)
;    (dist2               float           :offset-assert 160)
;    (inside-dist         float           :offset-assert 164)
;    (rand-angle          float           :offset-assert 168)
;    (dir-update          basic           :offset-assert 172)
;    (debug-offset        vector  :inline :offset-assert 176)
;    )
;   :method-count-assert 9
;   :size-assert         #xc0
;   :flag-assert         #x9000000c0
;   )

; ;; collectables
; (deftype collectable (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype eco-collectable (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype eco (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-yellow (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-red (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-blue (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype health (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype eco-pill (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype money (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype fuel-cell (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 eco-collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype buzzer (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 eco-collectable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype ecovalve (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype vent (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; collectables
; (deftype ventyellow (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ventred (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ventblue (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; collectables
; (deftype ecovent (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; crates
; (deftype crate-bank (basic)
;   ((COLLIDE_YOFF           float  :offset-assert 4)
;    (COLLIDE_RADIUS         float  :offset-assert 8)
;    (DARKECO_EXPLODE_RADIUS float  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; crates
; (deftype crate (process-drawable)
;   ((~Tsmush               smush-control :inline :offset-assert 176)
;    (~Tbase                vector        :inline :offset-assert 208)
;    (~Tlook                basic                 :offset-assert 224)
;    (~Tdefense             basic                 :offset-assert 228)
;    (~Tincomming-attack-id uint64                :offset-assert 232)
;    (~Ttarget              uint64                :offset-assert 240)
;    (~Tchild-count         int32                 :offset-assert 248)
;    (~Tvictory-anim        basic                 :offset-assert 252)
;    )
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype barrel (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype bucket (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype crate-buzzer (crate)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; crates
; (deftype pickup-spawner (crate)
;   ((~Tblocker basic  :offset-assert 256)
;    )
;   :method-count-assert 30
;   :size-assert         #x104
;   :flag-assert         #x1e00a00104
;   ;; inherited inpspect of crate
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; hud-classes
; (deftype hud-pickups (hud)
;   ()
;   :method-count-assert 27
;   :size-assert         #x118
;   :flag-assert         #x1b00b00118
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-health (hud)
;   ((~Tscale float  :offset-assert 280)
;    )
;   :method-count-assert 27
;   :size-assert         #x11c
;   :flag-assert         #x1b00b0011c
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-money-all (hud)
;   ((~Tx-scale     float   :offset-assert 280)
;    (~Ty-scale     float   :offset-assert 284)
;    (~Ty-pos       int32   :offset-assert 288)
;    (~Ttotal-orbs  int32   :offset-assert 292)
;    (~Tlevel-index int32   :offset-assert 296)
;    (~Tstart-time  uint64  :offset-assert 304)
;    )
;   :method-count-assert 27
;   :size-assert         #x138
;   :flag-assert         #x1b00d00138
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-money (hud)
;   ((~Tx-scale float  :offset-assert 280)
;    (~Ty-scale float  :offset-assert 284)
;    (~Ty-pos   int32  :offset-assert 288)
;    )
;   :method-count-assert 27
;   :size-assert         #x124
;   :flag-assert         #x1b00c00124
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-fuel-cell (hud)
;   ((~Tscale-starburst-3-x float  :offset-assert 280)
;    (~Tscale-starburst-3-y float  :offset-assert 284)
;    (~Tscale-starburst-4-x float  :offset-assert 288)
;    (~Tscale-starburst-4-y float  :offset-assert 292)
;    (~Tscale-icon          float  :offset-assert 296)
;    (~Tscale-center        float  :offset-assert 300)
;    (~Ticon-pos-y          int32  :offset-assert 304)
;    )
;   :method-count-assert 27
;   :size-assert         #x134
;   :flag-assert         #x1b00d00134
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-buzzers (hud)
;   ((~Tscale         float  :offset-assert 280)
;    (~Ttext-y-offset int32  :offset-assert 284)
;    )
;   :method-count-assert 27
;   :size-assert         #x120
;   :flag-assert         #x1b00b00120
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; hud-classes
; (deftype hud-power (hud)
;   ((~Tscale-timer   float  :offset-assert 280)
;    (~Tscale-backing float  :offset-assert 284)
;    (~Tscale-blue    float  :offset-assert 288)
;    )
;   :method-count-assert 27
;   :size-assert         #x124
;   :flag-assert         #x1b00c00124
;   ;; inherited inpspect of hud
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; progress
; (deftype progress-global-state (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; projectiles
; (deftype search-info (structure)
;   ((point        vector :inline :offset-assert 0)
;    (best-point   vector :inline :offset-assert 16)
;    (match-handle uint64         :offset-assert 32)
;    (match        basic          :offset-assert 40)
;    (best         float          :offset-assert 44)
;    (radius       float          :offset-assert 48)
;    (rating       uint32         :offset-assert 52)
;    (require      uint32         :offset-assert 56)
;    (mask         uint32         :offset-assert 60)
;    (rot-base     vector :inline :offset-assert 64)
;    (rot-range    float          :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x54
;   :flag-assert         #x900000054
;   )

; ;; glist-h
; (deftype glst-node (structure)
;   ((next glst-node  :offset-assert 0)
;    (prev glst-node  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; glist-h
; (deftype glst-named-node (glst-node)
;   ((next     glst-node  :offset-assert 0)
;    (prev     glst-node  :offset-assert 4)
;    (privname basic      :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; glist-h
; (deftype glst-list (structure)
;   ((head     glst-node  :offset-assert 0)
;    (tail     glst-node  :offset-assert 4)
;    (tailpred glst-node  :offset-assert 8)
;    (numelem  int32      :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; anim-tester
; (deftype list-control (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype list-field (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype DISP_LIST-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype anim-tester-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype anim-tester (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; anim-tester
; (deftype anim-test-obj (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype anim-test-sequence (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype anim-test-seq-item (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; anim-tester
; (deftype anim-tester (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  too many basic blocks
;   )

; ;; viewer
; (deftype viewer (process-drawable)
;   ((~Tjanim basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; part-tester
; (deftype part-tester (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process) parent was UNKNOWN
;   )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; COMMON TYPES     ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

; ;; rigid-body-h
; (deftype rigid-body (structure)
;   ((mass                        float              :offset-assert 0)
;    (inv-mass                    float              :offset-assert 4)
;    (lin-momentum-damping-factor float              :offset-assert 8)
;    (ang-momentum-damping-factor float              :offset-assert 12)
;    (inertial-tensor             matrix     :inline :offset-assert 16)
;    (inv-inertial-tensor         matrix     :inline :offset-assert 80)
;    (cm-offset-joint             vector     :inline :offset-assert 144)
;    (position                    vector     :inline :offset-assert 160)
;    (rotation                    quaternion :inline :offset-assert 176)
;    (lin-momentum                vector     :inline :offset-assert 192)
;    (ang-momentum                vector     :inline :offset-assert 208)
;    (lin-velocity                vector     :inline :offset-assert 224)
;    (ang-velocity                vector     :inline :offset-assert 240)
;    (inv-i-world                 matrix     :inline :offset-assert 256)
;    (matrix                      matrix     :inline :offset-assert 320)
;    (force                       vector     :inline :offset-assert 384)
;    (torque                      vector     :inline :offset-assert 400)
;    (max-ang-momentum            float              :offset-assert 416)
;    (max-ang-velocity            float              :offset-assert 420)
;    )
;   :method-count-assert 23
;   :size-assert         #x1a8
;   :flag-assert         #x17000001a8
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; rigid-body-h
; (deftype rigid-body-control-point (structure)
;   ((local-pos vector :inline :offset-assert 0)
;    (world-pos vector :inline :offset-assert 16)
;    (velocity  vector :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; water-anim
; (deftype water-anim (water-vol)
;   ((~Tlook                int32  :offset-assert 212)
;    (~Tplay-ambient-sound? basic  :offset-assert 216)
;    )
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;; inherited inpspect of water-vol
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; water-anim
; (deftype water-anim-look (structure)
;   ((skel-group         basic  :offset-assert 0)
;    (anim               int32  :offset-assert 4)
;    (ambient-sound-spec basic  :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; dark-eco-pool
; (deftype dark-eco-pool (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; rigid-body
; (deftype rigid-body-platform-constants (structure)
;   ((drag-factor           float   :offset-assert 0)
;    (buoyancy-factor       float   :offset-assert 4)
;    (max-buoyancy-depth    meters  :offset-assert 8)
;    (gravity-factor        float   :offset-assert 12)
;    (gravity               meters  :offset-assert 16)
;    (player-weight         meters  :offset-assert 20)
;    (player-bonk-factor    float   :offset-assert 24)
;    (player-dive-factor    float   :offset-assert 28)
;    (player-force-distance meters  :offset-assert 32)
;    (player-force-clamp    meters  :offset-assert 36)
;    (player-force-timeout  uint64  :offset-assert 40)
;    (explosion-force       meters  :offset-assert 48)
;    (linear-damping        float   :offset-assert 52)
;    (angular-damping       float   :offset-assert 56)
;    (control-point-count   int32   :offset-assert 60)
;    (mass                  float   :offset-assert 64)
;    (inertial-tensor-x     meters  :offset-assert 68)
;    (inertial-tensor-y     meters  :offset-assert 72)
;    (inertial-tensor-z     meters  :offset-assert 76)
;    (cm-joint-x            meters  :offset-assert 80)
;    (cm-joint-y            meters  :offset-assert 84)
;    (cm-joint-z            meters  :offset-assert 88)
;    (idle-distance         meters  :offset-assert 92)
;    (platform              basic   :offset-assert 96)
;    (sound-name            basic   :offset-assert 100)
;    )
;   :method-count-assert 9
;   :size-assert         #x68
;   :flag-assert         #x900000068
;   )

; ;; rigid-body
; (deftype rigid-body-control-point-inline-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; rigid-body
; (deftype rigid-body-platform (process-drawable)
;   ((~Tinfo                  rigid-body-platform-constants         :offset-assert 176)
;    (~Trbody                 rigid-body                    :inline :offset-assert 192)
;    (~Tcontrol-point-array   basic                                 :offset-assert 616)
;    (~Tplayer-velocity       vector                        :inline :offset-assert 624)
;    (~Tplayer-velocity-prev  vector                        :inline :offset-assert 640)
;    (~Tplayer-force-position vector                        :inline :offset-assert 656)
;    (~Tplayer-force          vector                        :inline :offset-assert 672)
;    (~Tsim-time-remaining    float                                 :offset-assert 688)
;    (~Tfloat-height-offset   float                                 :offset-assert 692)
;    (~Tplayer-attack-id      int32                                 :offset-assert 696)
;    (~Tplayer-bonk-timeout   uint64                                :offset-assert 704)
;    (~Twater-anim            basic                                 :offset-assert 712)
;    (~Tplayer-contact        basic                                 :offset-assert 716)
;    (~Tplayer-impulse        basic                                 :offset-assert 720)
;    )
;   :method-count-assert 35
;   :size-assert         #x2d4
;   :flag-assert         #x23027002d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; nav-enemy-h
; (deftype nav-enemy-info (basic)
;   ((idle-anim                 int32     :offset-assert 4)
;    (walk-anim                 int32     :offset-assert 8)
;    (turn-anim                 int32     :offset-assert 12)
;    (notice-anim               int32     :offset-assert 16)
;    (run-anim                  int32     :offset-assert 20)
;    (jump-anim                 int32     :offset-assert 24)
;    (jump-land-anim            int32     :offset-assert 28)
;    (victory-anim              int32     :offset-assert 32)
;    (taunt-anim                int32     :offset-assert 36)
;    (die-anim                  int32     :offset-assert 40)
;    (neck-joint                int32     :offset-assert 44)
;    (player-look-at-joint      int32     :offset-assert 48)
;    (run-travel-speed          meters    :offset-assert 52)
;    (run-rotate-speed          deg       :offset-assert 56)
;    (run-acceleration          meters    :offset-assert 60)
;    (run-turn-time             useconds  :offset-assert 64)
;    (walk-travel-speed         meters    :offset-assert 72)
;    (walk-rotate-speed         deg       :offset-assert 76)
;    (walk-acceleration         meters    :offset-assert 80)
;    (walk-turn-time            useconds  :offset-assert 88)
;    (attack-shove-back         meters    :offset-assert 96)
;    (attack-shove-up           meters    :offset-assert 100)
;    (shadow-size               meters    :offset-assert 104)
;    (notice-nav-radius         meters    :offset-assert 108)
;    (nav-nearest-y-threshold   meters    :offset-assert 112)
;    (notice-distance           meters    :offset-assert 116)
;    (proximity-notice-distance meters    :offset-assert 120)
;    (stop-chase-distance       meters    :offset-assert 124)
;    (frustration-distance      meters    :offset-assert 128)
;    (frustration-time          uint64    :offset-assert 136)
;    (die-anim-hold-frame       float     :offset-assert 144)
;    (jump-anim-start-frame     float     :offset-assert 148)
;    (jump-land-anim-end-frame  float     :offset-assert 152)
;    (jump-height-min           meters    :offset-assert 156)
;    (jump-height-factor        float     :offset-assert 160)
;    (jump-start-anim-speed     float     :offset-assert 164)
;    (shadow-max-y              meters    :offset-assert 168)
;    (shadow-min-y              meters    :offset-assert 172)
;    (shadow-locus-dist         meters    :offset-assert 176)
;    (use-align                 basic     :offset-assert 180)
;    (draw-shadow               basic     :offset-assert 184)
;    (move-to-ground            basic     :offset-assert 188)
;    (hover-if-no-ground        basic     :offset-assert 192)
;    (use-momentum              basic     :offset-assert 196)
;    (use-flee                  basic     :offset-assert 200)
;    (use-proximity-notice      basic     :offset-assert 204)
;    (use-jump-blocked          basic     :offset-assert 208)
;    (use-jump-patrol           basic     :offset-assert 212)
;    (gnd-collide-with          uint64    :offset-assert 216)
;    (debug-draw-neck           basic     :offset-assert 224)
;    (debug-draw-jump           basic     :offset-assert 228)
;    )
;   :method-count-assert 9
;   :size-assert         #xe8
;   :flag-assert         #x9000000e8
;   )

; ;; nav-enemy-h
; (deftype nav-enemy (process-drawable)
;   ((~Thit-from-dir        vector     :inline :offset-assert 176)
;    (~Tevent-param-point   vector     :inline :offset-assert 192)
;    (~Tfrustration-point   vector     :inline :offset-assert 208)
;    (~Tjump-dest           vector     :inline :offset-assert 224)
;    (~Tjump-trajectory     trajectory :inline :offset-assert 240)
;    (~Tjump-time           uint64             :offset-assert 280)
;    (~Tnav-info            basic              :offset-assert 288)
;    (~Ttarget-speed        float              :offset-assert 292)
;    (~Tmomentum-speed      float              :offset-assert 296)
;    (~Tacceleration        float              :offset-assert 300)
;    (~Trotate-speed        float              :offset-assert 304)
;    (~Tturn-time           uint64             :offset-assert 312)
;    (~Tfrustration-time    uint64             :offset-assert 320)
;    (~Tspeed-scale         float              :offset-assert 328)
;    (~Tneck                basic              :offset-assert 332)
;    (~Treaction-time       uint64             :offset-assert 336)
;    (~Tnotice-time         uint64             :offset-assert 344)
;    (~Tstate-timeout       uint64             :offset-assert 352)
;    (~Tfree-time           uint64             :offset-assert 360)
;    (~Ttouch-time          uint64             :offset-assert 368)
;    (~Tnav-enemy-flags     uint32             :offset-assert 376)
;    (~Tincomming-attack-id uint64             :offset-assert 384)
;    (~Tjump-return-state   basic              :offset-assert 392)
;    (~Trand-gen            basic              :offset-assert 396)
;    )
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; baseplat
; (deftype baseplat (process-drawable)
;   ((~Tsmush     smush-control :inline :offset-assert 176)
;    (~Tbasetrans vector        :inline :offset-assert 208)
;    (~Tbouncing  basic                 :offset-assert 224)
;    )
;   :method-count-assert 27
;   :size-assert         #xe4
;   :flag-assert         #x1b008000e4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; baseplat
; (deftype eco-door (process-drawable)
;   ((~Tspeed          float           :offset-assert 176)
;    (~Topen-distance  float           :offset-assert 180)
;    (~Tclose-distance float           :offset-assert 184)
;    (~Tout-dir        vector  :inline :offset-assert 192)
;    (~Topen-sound     uint128         :offset-assert 208)
;    (~Tclose-sound    uint128         :offset-assert 224)
;    (~Tstate-actor    basic           :offset-assert 240)
;    (~Tflags          int32           :offset-assert 244)
;    (~Tlocked         basic           :offset-assert 248)
;    (~Tauto-close     basic           :offset-assert 252)
;    (~Tone-way        basic           :offset-assert 256)
;    )
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; basebutton
; (deftype basebutton (process-drawable)
;   ((~Tdown?             basic              :offset-assert 176)
;    (~Tspawned-by-other? basic              :offset-assert 180)
;    (~Tmove-to?          basic              :offset-assert 184)
;    (~Tnotify-actor      basic              :offset-assert 188)
;    (~Ttimeout           float              :offset-assert 192)
;    (~Tbutton-id         int32              :offset-assert 196)
;    (~Tevent-going-down  basic              :offset-assert 200)
;    (~Tevent-down        basic              :offset-assert 204)
;    (~Tevent-going-up    basic              :offset-assert 208)
;    (~Tevent-up          basic              :offset-assert 212)
;    (~Tanim-speed        float              :offset-assert 216)
;    (~Tmove-to-pos       vector     :inline :offset-assert 224)
;    (~Tmove-to-quat      quaternion :inline :offset-assert 240)
;    )
;   :method-count-assert 32
;   :size-assert         #x100
;   :flag-assert         #x2000900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; basebutton
; (deftype warp-gate (process-drawable)
;   ((~Tlevel      basic  :offset-assert 176)
;    (~Tlevel-slot int32  :offset-assert 180)
;    (~Tmin-slot   int32  :offset-assert 184)
;    (~Tmax-slot   int32  :offset-assert 188)
;    )
;   :method-count-assert 24
;   :size-assert         #xc0
;   :flag-assert         #x18005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; tippy
; (deftype tippy (structure)
;   ((axis       vector     :inline :offset-assert 0)
;    (angle      float              :offset-assert 16)
;    (orig       quaternion :inline :offset-assert 32)
;    (dist-ratio float              :offset-assert 48)
;    (damping    float              :offset-assert 52)
;    (1-damping  float              :offset-assert 56)
;    )
;   :method-count-assert 11
;   :size-assert         #x3c
;   :flag-assert         #xb0000003c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; joint-exploder
; (deftype joint-exploder-tuning (structure)
;   ((explosion                   uint64         :offset-assert 0)
;    (duration                    uint64         :offset-assert 8)
;    (gravity                     float          :offset-assert 16)
;    (rot-speed                   float          :offset-assert 20)
;    (fountain-rand-transv-lo     vector :inline :offset-assert 32)
;    (fountain-rand-transv-hi     vector :inline :offset-assert 48)
;    (away-from-focal-pt          vector :inline :offset-assert 32)
;    (away-from-rand-transv-xz-lo float          :offset-assert 48)
;    (away-from-rand-transv-xz-hi float          :offset-assert 52)
;    (away-from-rand-transv-y-lo  float          :offset-assert 56)
;    (away-from-rand-transv-y-hi  float          :offset-assert 60)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; joint-exploder
; (deftype joint-exploder-static-joint-params (structure)
;   ((joint-index        int16  :offset-assert 0)
;    (parent-joint-index int16  :offset-assert 2)
;    )
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; joint-exploder
; (deftype joint-exploder-static-params (basic)
;   ((joints basic  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; joint-exploder
; (deftype joint-exploder-joint (structure)
;   ((next        int16          :offset-assert 0)
;    (prev        int16          :offset-assert 2)
;    (joint-index int16          :offset-assert 4)
;    (rspeed      float          :offset-assert 8)
;    (mat         matrix :inline :offset-assert 16)
;    (rmat        matrix :inline :offset-assert 80)
;    (transv      vector :inline :offset-assert 144)
;    (prev-pos    vector :inline :offset-assert 160)
;    )
;   :method-count-assert 9
;   :size-assert         #xb0
;   :flag-assert         #x9000000b0
;   )

; ;; joint-exploder
; (deftype joint-exploder-joints (basic)
;   ((num-joints int32            :offset-assert 4)
;    (joint      UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; joint-exploder
; (deftype joint-exploder-list (structure)
;   ((head        int32                :offset-assert 0)
;    (pre-moved?  basic                :offset-assert 4)
;    (bbox-valid? basic                :offset-assert 8)
;    (bbox        bounding-box :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; joint-exploder
; (deftype joint-exploder (process-drawable)
;   ((~Tdie-if-below-y             float                         :offset-assert 176)
;    (~Tdie-if-beyond-xz-dist-sqrd float                         :offset-assert 180)
;    (~Tjoints                     basic                         :offset-assert 184)
;    (~Tstatic-params              basic                         :offset-assert 188)
;    (~Tanim                       basic                         :offset-assert 192)
;    (~Tscale-vector               vector                :inline :offset-assert 208)
;    (~Ttuning                     joint-exploder-tuning :inline :offset-assert 224)
;    (~Tlists                      UNKNOWN               5       :offset-assert 288)
;    )
;   :method-count-assert 29
;   :size-assert         #x210
;   :flag-assert         #x1d01a00210
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; babak
; (deftype babak (nav-enemy)
;   ()
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; sharkey
; (deftype sharkey (nav-enemy)
;   ((~Tdir               vector :inline :offset-assert 400)
;    (~Tspawn-point       vector :inline :offset-assert 416)
;    (~Tscale             float          :offset-assert 432)
;    (~Tanim-speed        float          :offset-assert 436)
;    (~Ty-max             meters         :offset-assert 440)
;    (~Ty-min             meters         :offset-assert 444)
;    (~Tattack-time       float          :offset-assert 448)
;    (~Tplayer-water-time uint64         :offset-assert 456)
;    (~Tplayer-in-water   basic          :offset-assert 464)
;    (~Tlast-y            float          :offset-assert 468)
;    (~Tspawn-distance    meters         :offset-assert 472)
;    (~Tchase-speed       meters         :offset-assert 476)
;    (~Ty-speed           meters         :offset-assert 480)
;    (~Tsound-id          uint32         :offset-assert 484)
;    (~Tenable-patrol     basic          :offset-assert 488)
;    )
;   :method-count-assert 76
;   :size-assert         #x1ec
;   :flag-assert         #x4c018001ec
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; orb-cache
; (deftype orb-cache-top (baseplat)
;   ((~Tactive-distance   float      :offset-assert 228)
;    (~Tinactive-distance float      :offset-assert 232)
;    (~Tmoney-list        UNKNOWN 60 :offset-assert 240)
;    (~Tmoney-pos-list    UNKNOWN 60 :offset-assert 720)
;    (~Tmoney-pos-actual  UNKNOWN 60 :offset-assert 960)
;    (~Tplatform-pos      float      :offset-assert 1200)
;    (~Troot-pos          float      :offset-assert 1204)
;    (~Tmoney             int32      :offset-assert 1208)
;    (~Tactivated         basic      :offset-assert 1212)
;    )
;   :method-count-assert 29
;   :size-assert         #x4c0
;   :flag-assert         #x1d045004c0
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; plat
; (deftype plat (baseplat)
;   ((~Tpath-pos float                   :offset-assert 228)
;    (~Tsync     sync-info-eased :inline :offset-assert 232)
;    (~Tsound-id uint32                  :offset-assert 260)
;    )
;   :method-count-assert 33
;   :size-assert         #x108
;   :flag-assert         #x2100a00108
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; plat-button
; (deftype plat-button (process-drawable)
;   ((~Tgo-back-if-lost-player? basic          :offset-assert 176)
;    (~Tgrab-player?            basic          :offset-assert 180)
;    (~Tshould-grab-player?     basic          :offset-assert 184)
;    (~Tpath-pos                float          :offset-assert 188)
;    (~Tbidirectional?          basic          :offset-assert 192)
;    (~Tallow-auto-kill         basic          :offset-assert 196)
;    (~Tsound-id                uint32         :offset-assert 200)
;    (~Ttrans-off               vector :inline :offset-assert 208)
;    (~Tspawn-pos               vector :inline :offset-assert 224)
;    )
;   :method-count-assert 33
;   :size-assert         #xf0
;   :flag-assert         #x21008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; plat-eco
; (deftype plat-eco (plat)
;   ((~Tnotice-dist      float           :offset-assert 264)
;    (~Tsync-offset-dest float           :offset-assert 268)
;    (~Tsync-offset-faux float           :offset-assert 272)
;    (~Tsync-linear-val  float           :offset-assert 276)
;    (~Ttarget           uint64          :offset-assert 280)
;    (~Tunlit-look       lod-set :inline :offset-assert 288)
;    (~Tlit-look         lod-set :inline :offset-assert 324)
;    )
;   :method-count-assert 33
;   :size-assert         #x165
;   :flag-assert         #x2101000165
;   ;; inherited inpspect of plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; ropebridge
; (deftype ropebridge-tuning (structure)
;   ((num-springs             int32   :offset-assert 0)
;    (num-spring-points       int32   :offset-assert 4)
;    (col-mesh-indexes        uint32  :offset-assert 8)
;    (view-frustum-radius     float   :offset-assert 12)
;    (root-prim-radius        float   :offset-assert 16)
;    (desired-spring-len      float   :offset-assert 20)
;    (gravity                 float   :offset-assert 24)
;    (spring-coefficient      float   :offset-assert 28)
;    (spring-mass             float   :offset-assert 32)
;    (friction                float   :offset-assert 36)
;    (max-influence-dist      float   :offset-assert 40)
;    (rider-max-gravity       float   :offset-assert 44)
;    (max-bonk-influence-dist float   :offset-assert 48)
;    (rider-bonk-force        float   :offset-assert 52)
;    (rider-bonk-min          float   :offset-assert 56)
;    (rider-bonk-max          float   :offset-assert 60)
;    (normal-board-len        float   :offset-assert 64)
;    (bridge-end-to-end-len   float   :offset-assert 68)
;    (rest-state              basic   :offset-assert 72)
;    )
;   :method-count-assert 9
;   :size-assert         #x4c
;   :flag-assert         #x90000004c
;   )

; ;; ropebridge
; (deftype ropebridge-spring-point (structure)
;   ((local-pos   vector :inline :offset-assert 0)
;    (vel         vector :inline :offset-assert 16)
;    (extra-force vector :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; ropebridge
; (deftype ropebridge (process-drawable)
;   ((~Tsubtype                uint64                    :offset-assert 176)
;    (~Tsubtype-name           basic                     :offset-assert 184)
;    (~Tagitated-time-stamp    uint64                    :offset-assert 192)
;    (~Tbonk-time-stamp        uint64                    :offset-assert 200)
;    (~Tattack-flop-time-stamp uint64                    :offset-assert 208)
;    (~Tplayer-attack-id       uint64                    :offset-assert 216)
;    (~Tsleep-dist             float                     :offset-assert 224)
;    (~Tdo-physics?            basic                     :offset-assert 228)
;    (~Ttuning                 ropebridge-tuning         :offset-assert 232)
;    (~Tworld-matrix           matrix            :inline :offset-assert 240)
;    (~Tinv-world-matrix       matrix            :inline :offset-assert 304)
;    (~Textra-trans            vector            :inline :offset-assert 368)
;    (~Tspring-point           UNKNOWN           36      :offset-assert 384)
;    )
;   :method-count-assert 29
;   :size-assert         #x840
;   :flag-assert         #x1d07d00840
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; ticky
; (deftype ticky (structure)
;   ((delay-til-ramp    uint64  :offset-assert 0)
;    (delay-til-timeout uint64  :offset-assert 8)
;    (starting-time     uint64  :offset-assert 16)
;    (last-tick-time    uint64  :offset-assert 24)
;    )
;   :method-count-assert 12
;   :size-assert         #x20
;   :flag-assert         #xc00000020
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     )
;   )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; BEA TYPES     ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

; ;; mistycannon
; (deftype angle-tracker (structure)
;   ((value float  :offset-assert 0)
;    (min   float  :offset-assert 4)
;    (range float  :offset-assert 8)
;    (speed float  :offset-assert 12)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; mistycannon
; (deftype mistycannon-missile (process-drawable)
;   ((~Tmuzzle-time  float              :offset-assert 176)
;    (~Ttumble-quat  quaternion :inline :offset-assert 192)
;    (~Tblast-radius float              :offset-assert 208)
;    (~Twater-height float              :offset-assert 212)
;    (~Tsfx          uint32             :offset-assert 216)
;    (~Tpart2        basic              :offset-assert 220)
;    (~Tground-time  uint64             :offset-assert 224)
;    )
;   :method-count-assert 21
;   :size-assert         #xe8
;   :flag-assert         #x15008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; mistycannon
; (deftype mistycannon-init-data (structure)
;   ((pos          vector  :offset-assert 0)
;    (vel          vector  :offset-assert 4)
;    (rotate       float   :offset-assert 8)
;    (flight-time  float   :offset-assert 12)
;    (muzzle-time  float   :offset-assert 16)
;    (blast-radius float   :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; mistycannon
; (deftype mistycannon (process-drawable)
;   ((~Trotate                 angle-tracker :inline :offset-assert 176)
;    (~Ttilt                   angle-tracker :inline :offset-assert 192)
;    (~Tfront-wheel            float                 :offset-assert 208)
;    (~Trear-wheel             float                 :offset-assert 212)
;    (~Tlast-known-rotation    float                 :offset-assert 216)
;    (~Tpart-timer             uint64                :offset-assert 224)
;    (~Thellmouth              vector        :inline :offset-assert 240)
;    (~Tpostbindinfo-ok        basic                 :offset-assert 256)
;    (~Tlaunch-origin          vector        :inline :offset-assert 272)
;    (~Tgoggles                vector        :inline :offset-assert 288)
;    (~Tavoid-entity           basic                 :offset-assert 304)
;    (~Tcenter-point           vector        :inline :offset-assert 320)
;    (~Tat-point               vector        :inline :offset-assert 336)
;    (~Taccuracy-range         float                 :offset-assert 352)
;    (~Ttarget-theta           float                 :offset-assert 356)
;    (~Tsound-id               uint32                :offset-assert 360)
;    (~Taim-sound-id           uint32                :offset-assert 364)
;    (~Tplayer-touching-grips? basic                 :offset-assert 368)
;    )
;   :method-count-assert 24
;   :size-assert         #x174
;   :flag-assert         #x1801100174
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; mistycannon
; (deftype quadratic-solution (structure)
;   ((s1 float  :offset-assert 0)
;    (s2 float  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; mistycannon
; (deftype trajectory-params (structure)
;   ((x       float  :offset-assert 0)
;    (y       float  :offset-assert 4)
;    (gravity float  :offset-assert 8)
;    (theta   float  :offset-assert 12)
;    (speed   float  :offset-assert 16)
;    (time    float  :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; babak-with-cannon
; (deftype babak-with-cannon (babak)
;   ((~Tcannon-ent basic  :offset-assert 400)
;    (~Tdistance   float  :offset-assert 404)
;    )
;   :method-count-assert 76
;   :size-assert         #x198
;   :flag-assert         #x4c01300198
;   ;; inherited inpspect of babak
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; air-h
; (deftype air-box (structure)
;   ((vecs         UNKNOWN 2 :offset-assert 0)
;    (x-pos        float     :offset-assert 0)
;    (height-level float     :offset-assert 4)
;    (z-pos        float     :offset-assert 8)
;    (cos-angle    float     :offset-assert 12)
;    (x-length     float     :offset-assert 16)
;    (z-length     float     :offset-assert 24)
;    (sin-angle    float     :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; wobbler
; (deftype wobbler (basic)
;   ((posx    float  :offset-assert 4)
;    (posy    float  :offset-assert 8)
;    (velx    float  :offset-assert 12)
;    (vely    float  :offset-assert 16)
;    (spring  float  :offset-assert 20)
;    (damping float  :offset-assert 24)
;    (height  float  :offset-assert 28)
;    )
;   :method-count-assert 13
;   :size-assert         #x20
;   :flag-assert         #xd00000020
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; twister
; (deftype twist-joint (structure)
;   ((ry      float  :offset-assert 0)
;    (max-dry float  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; twister
; (deftype twister (basic)
;   ((num-joints   int32            :offset-assert 4)
;    (first-joint  int32            :offset-assert 8)
;    (last-joint   int32            :offset-assert 12)
;    (max-speed    float            :offset-assert 16)
;    (smoothing    float            :offset-assert 20)
;    (min-dist     float            :offset-assert 24)
;    (target       float            :offset-assert 28)
;    (ry           float            :offset-assert 32)
;    (max-speed-ry float            :offset-assert 36)
;    (data         UNKNOWN :dynamic :offset-assert 40)
;    )
;   :method-count-assert 13
;   :size-assert         #x28
;   :flag-assert         #xd00000028
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; beach-obs
; (deftype windmill-one (process-drawable)
;   ((~Tsound-id uint32  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype grottopole (process-drawable)
;   ((~Tspeed               meters  :offset-assert 176)
;    (~Tdistance            meters  :offset-assert 180)
;    (~Tposition            int32   :offset-assert 184)
;    (~Tmax-position        int32   :offset-assert 188)
;    (~Tincomming-attack-id uint64  :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xc8
;   :flag-assert         #x14006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype ecoventrock (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype flying-rock (process-drawable)
;   ((~Ttumble quaternion :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xc0
;   :flag-assert         #x14005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype bladeassm (process-drawable)
;   ((~Tangle float  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype flutflutegg (process-drawable)
;   ((~Tfall-dist           meters                  :offset-assert 176)
;    (~Tstart               vector          :inline :offset-assert 192)
;    (~Tdir                 vector          :inline :offset-assert 208)
;    (~Tpos                 float                   :offset-assert 224)
;    (~Tvel                 float                   :offset-assert 228)
;    (~Twobbler             basic                   :offset-assert 232)
;    (~Tlast-impulse-time   int32                   :offset-assert 236)
;    (~Tincomming-attack-id uint64                  :offset-assert 240)
;    (~Tambients-played     int32                   :offset-assert 248)
;    (~Tambient             ambient-control :inline :offset-assert 256)
;    )
;   :method-count-assert 21
;   :size-assert         #x110
;   :flag-assert         #x1500a00110
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; beach-obs
; (deftype harvester (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; beach-obs
; (deftype beachcam (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; bird-lady
; (deftype bird-lady (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; bird-lady-beach
; (deftype bird-lady-beach (process-taskable)
;   ((~Tflutflut uint64  :offset-assert 384)
;    (~Tegg      uint64  :offset-assert 392)
;    )
;   :method-count-assert 53
;   :size-assert         #x190
;   :flag-assert         #x3501200190
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; mayor
; (deftype mayor (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sculptor
; (deftype sculptor (process-taskable)
;   ((~Tmuse uint64  :offset-assert 384)
;    )
;   :method-count-assert 53
;   :size-assert         #x188
;   :flag-assert         #x3501200188
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; pelican
; (deftype pelican-bank (basic)
;   ((circle-speed        meters    :offset-assert 4)
;    (dive-time           useconds  :offset-assert 8)
;    (to-nest0-time       useconds  :offset-assert 16)
;    (to-nest1-time       useconds  :offset-assert 24)
;    (land-time           useconds  :offset-assert 32)
;    (from-nest-time      useconds  :offset-assert 40)
;    (spit-time           useconds  :offset-assert 48)
;    (pre-spit-wait-time  useconds  :offset-assert 56)
;    (post-spit-wait-time useconds  :offset-assert 64)
;    (run-away-time       useconds  :offset-assert 72)
;    )
;   :method-count-assert 9
;   :size-assert         #x50
;   :flag-assert         #x900000050
;   )

; ;; pelican
; (deftype pelican (process-drawable)
;   ((~Tquery           gui-query :inline :offset-assert 176)
;    (~Tfuel-cell       uint64            :offset-assert 208)
;    (~Tcam-tracker     uint64            :offset-assert 216)
;    (~Tpath-data       UNKNOWN   8       :offset-assert 224)
;    (~Tpath-circle     basic             :offset-assert 224)
;    (~Tpath-dive0      basic             :offset-assert 228)
;    (~Tpath-to-nest0   basic             :offset-assert 232)
;    (~Tpath-from-nest0 basic             :offset-assert 236)
;    (~Tpath-spit0      basic             :offset-assert 240)
;    (~Tpath-dive1      basic             :offset-assert 244)
;    (~Tpath-to-nest1   basic             :offset-assert 248)
;    (~Tpath-to-nest2   basic             :offset-assert 252)
;    (~Tpath-cache      basic             :offset-assert 256)
;    (~Ttime-cache      uint64            :offset-assert 264)
;    (~Tpath-pos        float             :offset-assert 272)
;    (~Tpath-speed      float             :offset-assert 276)
;    (~Tpath-max        float             :offset-assert 280)
;    (~Tpath-vector     vector    :inline :offset-assert 288)
;    (~Tstate-vector    vector    :inline :offset-assert 304)
;    (~Tstate-vector1   vector    :inline :offset-assert 320)
;    (~Tstate-float     UNKNOWN   2       :offset-assert 336)
;    (~Tstate-object    basic             :offset-assert 344)
;    (~Tneck            basic             :offset-assert 348)
;    )
;   :method-count-assert 20
;   :size-assert         #x160
;   :flag-assert         #x1400f00160
;   ;; inherited inpspect of process-drawablefield ~Tstate-object is a basic loaded with a signed load 
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lurkerworm
; (deftype lurkerworm (process-drawable)
;   ((~Ttwister      basic  :offset-assert 176)
;    (~Thead-tilt    float  :offset-assert 180)
;    (~Tstrike-count int32  :offset-assert 184)
;    (~Tangle        float  :offset-assert 188)
;    (~Tvulnerable   basic  :offset-assert 192)
;    (~Tpart2        basic  :offset-assert 196)
;    )
;   :method-count-assert 22
;   :size-assert         #xc8
;   :flag-assert         #x16006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; lurkercrab
; (deftype lurkercrab (nav-enemy)
;   ((~Torient basic  :offset-assert 400)
;    )
;   :method-count-assert 76
;   :size-assert         #x194
;   :flag-assert         #x4c01300194
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; lurkerpuppy
; (deftype lurkerpuppy (nav-enemy)
;   ()
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; beach-rocks
; (deftype beach-rock (process-drawable)
;   ((~Ttrigger      basic   :offset-assert 176)
;    (~Tmovie-start  uint64  :offset-assert 184)
;    (~Tpart-falling basic   :offset-assert 192)
;    (~Tpart-landing basic   :offset-assert 196)
;    (~Tprev-frame   float   :offset-assert 200)
;    )
;   :method-count-assert 24
;   :size-assert         #xcc
;   :flag-assert         #x18006000cc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; beach-rocks
; (deftype lrocklrg (beach-rock)
;   ()
;   :method-count-assert 24
;   :size-assert         #xcc
;   :flag-assert         #x18006000cc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; seagull
; (deftype seagull (process-drawable)
;   ((~Tindex             int32   :offset-assert 176)
;    (~Tflock             uint32  :offset-assert 180)
;    (~Theading           float   :offset-assert 184)
;    (~Ttilt              float   :offset-assert 188)
;    (~Tmax-tilt          float   :offset-assert 192)
;    (~Tangletan          float   :offset-assert 196)
;    (~Ttarget-dist       float   :offset-assert 200)
;    (~Tscared            int32   :offset-assert 204)
;    (~Ttemp-heading      float   :offset-assert 208)
;    (~Ttemp-heading-time int32   :offset-assert 212)
;    (~Tpart-time         uint64  :offset-assert 216)
;    (~Tthrust            float   :offset-assert 224)
;    (~Tteleport          basic   :offset-assert 228)
;    )
;   :method-count-assert 28
;   :size-assert         #xe8
;   :flag-assert         #x1c008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; seagull
; (deftype seagullflock (process)
;   ((~Tpath               basic           :offset-assert 112)
;    (~Ttrans              vector  :inline :offset-assert 128)
;    (~Tbird               UNKNOWN 64      :offset-assert 144)
;    (~Tbirds              int32           :offset-assert 400)
;    (~Tlink               basic           :offset-assert 404)
;    (~Tbird-at-waterfall  uint64          :offset-assert 408)
;    (~Tbirds-at-waterfall int32           :offset-assert 416)
;    (~Ttarget             vector  :inline :offset-assert 432)
;    (~Ttargetnum          int32           :offset-assert 448)
;    (~Talert-time         uint64          :offset-assert 456)
;    (~Tteleport-frames    int32           :offset-assert 464)
;    (~Tcam-tracker        uint64          :offset-assert 472)
;    (~Tstate-time         uint64          :offset-assert 480)
;    (~Tsquall             basic           :offset-assert 488)
;    (~Tmax-lift           float           :offset-assert 492)
;    )
;   :method-count-assert 17
;   :size-assert         #x1f0
;   :flag-assert         #x11018001f0
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     )
;   )

; ;; beach-part
; (deftype beach-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; CIT TYPES     ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

; ;; villagep-obs
; (deftype warpgate (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; villagep-obs
; (deftype warp-gate-switch (basebutton)
;   ((~Twarp uint64  :offset-assert 256)
;    )
;   :method-count-assert 33
;   :size-assert         #x108
;   :flag-assert         #x2100a00108
;   ;; inherited inpspect of basebutton
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; villagep-obs
; (deftype village-cam (process)
;   ((~Troot       basic   :offset-assert 112)
;    (~Trange      meters  :offset-assert 116)
;    (~Tindex      int32   :offset-assert 120)
;    (~Tstate-time uint64  :offset-assert 128)
;    )
;   :method-count-assert 15
;   :size-assert         #x88
;   :flag-assert         #xf00200088
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; oracle
; (deftype oracle (process-taskable)
;   ((~Tfirst-task     uint8   :offset-assert 380)
;    (~Tsecond-task    uint8   :offset-assert 381)
;    (~Tleft-eye-cell  uint64  :offset-assert 384)
;    (~Tright-eye-cell uint64  :offset-assert 392)
;    )
;   :method-count-assert 53
;   :size-assert         #x190
;   :flag-assert         #x3501200190
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; battlecontroller
; (deftype battlecontroller-spawner (structure)
;   ((path          basic   :offset-assert 0)
;    (creature      uint64  :offset-assert 8)
;    (trigger-actor basic   :offset-assert 16)
;    (blocker-actor basic   :offset-assert 20)
;    (state         int8    :offset-assert 24)
;    (enabled       basic   :offset-assert 28)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; battlecontroller
; (deftype battlecontroller-creature-type (structure)
;   ((type2            basic  :offset-assert 0)
;    (percent          float  :offset-assert 4)
;    (pickup-percent   float  :offset-assert 8)
;    (pickup-type      int32  :offset-assert 12)
;    (max-pickup-count int8   :offset-assert 16)
;    (pickup-count     int8   :offset-assert 17)
;    )
;   :method-count-assert 9
;   :size-assert         #x12
;   :flag-assert         #x900000012
;   )

; ;; battlecontroller
; (deftype battlecontroller (process-drawable)
;   ((~Tfinal-pickup-spawn-point    vector  :inline :offset-assert 176)
;    (~Tactivate-distance           float           :offset-assert 192)
;    (~Tmax-spawn-count             int16           :offset-assert 196)
;    (~Tspawn-count                 int16           :offset-assert 198)
;    (~Tdie-count                   int16           :offset-assert 200)
;    (~Ttarget-count                int8            :offset-assert 202)
;    (~Tspawner-count               int8            :offset-assert 203)
;    (~Tcreature-type-count         int8            :offset-assert 204)
;    (~Tspawner-array               UNKNOWN 8       :offset-assert 208)
;    (~Tspawn-period                uint64          :offset-assert 464)
;    (~Tpath-spawn                  basic           :offset-assert 472)
;    (~Tcreature-type-array         UNKNOWN 4       :offset-assert 476)
;    (~Tfinal-pickup-type           int32           :offset-assert 604)
;    (~Tprespawn                    basic           :offset-assert 608)
;    (~Tnoticed-player              basic           :offset-assert 612)
;    (~Tcamera-on                   basic           :offset-assert 616)
;    (~Tmisty-ambush-collision-hack basic           :offset-assert 620)
;    (~Tdisable-ocean               basic           :offset-assert 624)
;    (~Tdisable-near-ocean          basic           :offset-assert 628)
;    (~Tdisable-mid-ocean           basic           :offset-assert 632)
;    )
;   :method-count-assert 29
;   :size-assert         #x27c
;   :flag-assert         #x1d0210027c
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; citadel-part
; (deftype citb-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; citadel-obs
; (deftype citb-arm-section (process-drawable)
;   ((~Tsync           sync-info :inline :offset-assert 176)
;    (~Tcull-dir-local vector    :inline :offset-assert 192)
;    (~Tcull-dot       float             :offset-assert 208)
;    (~Trot-scale      float             :offset-assert 212)
;    (~Ty-angle        float             :offset-assert 216)
;    )
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm (citb-arm-section)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-shoulder (citb-arm-section)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-a (citb-arm)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-b (citb-arm)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-c (citb-arm)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-d (citb-arm)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-shoulder-a (citb-arm-shoulder)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-arm-shoulder-b (citb-arm-shoulder)
;   ()
;   :method-count-assert 23
;   :size-assert         #xdc
;   :flag-assert         #x17007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; citadel-obs
; (deftype citb-disc (process-drawable)
;   ((~Tsync      sync-info :inline :offset-assert 176)
;    (~Trot-scale float             :offset-assert 184)
;    )
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citb-disc-a (citb-disc)
;   ()
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citb-disc-b (citb-disc)
;   ()
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citb-disc-c (citb-disc)
;   ()
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citb-disc-d (citb-disc)
;   ()
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citb-iris-door (eco-door)
;   ()
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; citadel-obs
; (deftype citb-button (basebutton)
;   ()
;   :method-count-assert 32
;   :size-assert         #x100
;   :flag-assert         #x2000900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; citadel-obs
; (deftype citb-launcher (plat)
;   ((~Tlauncher uint32  :offset-assert 264)
;    )
;   :method-count-assert 33
;   :size-assert         #x10c
;   :flag-assert         #x2100a0010c
;   ;; inherited inpspect of plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; citadel-obs
; (deftype citb-robotboss (process-drawable)
;   ((~Tshield-on basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citadel-obs
; (deftype citb-coil (process-drawable)
;   ((~Tpart-off basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citadel-obs
; (deftype citb-hose (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citadel-obs
; (deftype citb-chains (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; citadel-obs
; (deftype citb-generator (process-drawable)
;   ((~Tnormal-look     lod-set :inline :offset-assert 176)
;    (~Tbroken-look     lod-set :inline :offset-assert 212)
;    (~Tmushroom-pos    vector  :inline :offset-assert 256)
;    (~Tmushroom        basic           :offset-assert 272)
;    (~Tbirth-fuel-cell basic           :offset-assert 276)
;    (~Ttrigger-others  basic           :offset-assert 280)
;    (~Tpart-broken     basic           :offset-assert 284)
;    (~Tpart-mushroom   basic           :offset-assert 288)
;    )
;   :method-count-assert 22
;   :size-assert         #x124
;   :flag-assert         #x1600c00124
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-obs
; (deftype citadelcam (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citadel-obs
; (deftype citb-battlecontroller (battlecontroller)
;   ()
;   :method-count-assert 29
;   :size-assert         #x27c
;   :flag-assert         #x1d0210027c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; citb-plat
; (deftype citb-base-plat (process-drawable)
;   ((~Tidle-distance float  :offset-assert 176)
;    )
;   :method-count-assert 25
;   :size-assert         #xb4
;   :flag-assert         #x19005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; citb-plat
; (deftype citb-plat-eco (plat-eco)
;   ()
;   :method-count-assert 33
;   :size-assert         #x165
;   :flag-assert         #x2101000165
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; citb-plat
; (deftype citb-plat (plat)
;   ((~Ttrans-offset vector :inline :offset-assert 272)
;    )
;   :method-count-assert 33
;   :size-assert         #x120
;   :flag-assert         #x2100b00120
;   ;; inherited inpspect of plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; citb-plat
; (deftype citb-stair-plat (citb-base-plat)
;   ((~Tidle-height float   :offset-assert 180)
;    (~Trise-height float   :offset-assert 184)
;    (~Tdelay       uint64  :offset-assert 192)
;    (~Trise        basic   :offset-assert 200)
;    )
;   :method-count-assert 25
;   :size-assert         #xcc
;   :flag-assert         #x19006000cc
;   ;; inherited inpspect of citb-base-plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; citb-plat
; (deftype citb-chain-plat (rigid-body-platform)
;   ((~Torig-trans   vector     :inline :offset-assert 736)
;    (~Torig-quat    quaternion :inline :offset-assert 752)
;    (~Tbeam-end     vector     :inline :offset-assert 768)
;    (~Tfloat-offset float              :offset-assert 784)
;    (~Tidle-offset  float              :offset-assert 788)
;    )
;   :method-count-assert 35
;   :size-assert         #x318
;   :flag-assert         #x2302b00318
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; citb-plat
; (deftype citb-rotatebox (citb-base-plat)
;   ()
;   :method-count-assert 25
;   :size-assert         #xb4
;   :flag-assert         #x19005000b4
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; citb-plat
; (deftype citb-donut (citb-base-plat)
;   ((~Tsync sync-info :inline :offset-assert 180)
;    )
;   :method-count-assert 25
;   :size-assert         #xbc
;   :flag-assert         #x19005000bc
;   ;; inherited inpspect of citb-base-plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; citb-plat
; (deftype citb-stopbox (plat)
;   ()
;   :method-count-assert 33
;   :size-assert         #x108
;   :flag-assert         #x2100a00108
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; citb-plat
; (deftype citb-firehose (process-drawable)
;   ((~Tidle-distance float             :offset-assert 176)
;    (~Tsync          sync-info :inline :offset-assert 180)
;    (~Tlast-sync     float             :offset-assert 188)
;    (~Tblast-pos     vector    :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citb-plat
; (deftype citb-exit-plat (plat-button)
;   ((~Tidle-height float  :offset-assert 240)
;    (~Trise-height float  :offset-assert 244)
;    (~Tactivated   basic  :offset-assert 248)
;    )
;   :method-count-assert 33
;   :size-assert         #xfc
;   :flag-assert         #x21009000fc
;   ;; inherited inpspect of plat-button
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; citadel-sages
; (deftype citb-sagecage (process-drawable)
;   ((~Tbar-array    UNKNOWN 12 :offset-assert 176)
;    (~Tangle-offset float      :offset-assert 368)
;    (~Tbars-on      basic      :offset-assert 372)
;    (~Tcloning      basic      :offset-assert 376)
;    )
;   :method-count-assert 22
;   :size-assert         #x17c
;   :flag-assert         #x160110017c
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citadel-sages
; (deftype citb-sage (process-taskable)
;   ((~Tspawn-pos         vector :inline :offset-assert 384)
;    (~Ttarget-pos        vector :inline :offset-assert 400)
;    (~Tdir               vector :inline :offset-assert 416)
;    (~Trot-y             float          :offset-assert 432)
;    (~Trot-x             float          :offset-assert 436)
;    (~Tidle-anim         int32          :offset-assert 440)
;    (~Tattack-start-anim int32          :offset-assert 444)
;    (~Tattack-anim       int32          :offset-assert 448)
;    (~Tbeam-joint        int32          :offset-assert 452)
;    (~Tcage              uint64         :offset-assert 456)
;    (~Tpart-impact       basic          :offset-assert 464)
;    (~Tbeam-on           basic          :offset-assert 468)
;    (~Tresolution-anim   basic          :offset-assert 472)
;    (~Tsound-name        basic          :offset-assert 476)
;    (~Tsound-id          uint32         :offset-assert 480)
;    (~Talt-actor         basic          :offset-assert 484)
;    )
;   :method-count-assert 53
;   :size-assert         #x1e8
;   :flag-assert         #x35018001e8
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; citadel-sages
; (deftype red-sagecage (citb-sage)
;   ()
;   :method-count-assert 53
;   :size-assert         #x1e8
;   :flag-assert         #x35018001e8
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; citadel-sages
; (deftype blue-sagecage (citb-sage)
;   ()
;   :method-count-assert 53
;   :size-assert         #x1e8
;   :flag-assert         #x35018001e8
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; citadel-sages
; (deftype yellow-sagecage (citb-sage)
;   ()
;   :method-count-assert 53
;   :size-assert         #x1e8
;   :flag-assert         #x35018001e8
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; citadel-sages
; (deftype green-sagecage (citb-sage)
;   ((~Twhich-movie int32   :offset-assert 488)
;    (~Tevilbro     uint64  :offset-assert 496)
;    (~Tevilsis     uint64  :offset-assert 504)
;    (~Trobotboss   uint64  :offset-assert 512)
;    (~Texitplat    uint64  :offset-assert 520)
;    )
;   :method-count-assert 53
;   :size-assert         #x210
;   :flag-assert         #x3501a00210
;   ;; inherited inpspect of citb-sage
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; snow-bunny
; (deftype snow-bunny (nav-enemy)
;   ((~Tpatrol-rand-distraction int32          :offset-assert 400)
;    (~Tbase-hop-dist           float          :offset-assert 404)
;    (~Thalfway-dist            float          :offset-assert 408)
;    (~Tretreat-timeout         float          :offset-assert 412)
;    (~Tgnd-popup               float          :offset-assert 416)
;    (~Tjump-height-min         float          :offset-assert 420)
;    (~Tjump-height-factor      float          :offset-assert 424)
;    (~Tjump-anim-start-frame   float          :offset-assert 428)
;    (~Tdefense                 uint64         :offset-assert 432)
;    (~Tretreat-timeout-time    uint64         :offset-assert 440)
;    (~Tlast-nondangerous-time  uint64         :offset-assert 448)
;    (~Tpatrol-hop-failed?      basic          :offset-assert 456)
;    (~Tshould-retreat?         basic          :offset-assert 460)
;    (~Tgot-jump-event?         basic          :offset-assert 464)
;    (~Tusing-jump-event?       basic          :offset-assert 468)
;    (~Tjump-anim               int8           :offset-assert 472)
;    (~Tnotice-land-anim        int8           :offset-assert 473)
;    (~Tattack-anim             int8           :offset-assert 474)
;    (~Tfinal-dest              vector :inline :offset-assert 480)
;    (~Tjump-event-dest         vector :inline :offset-assert 496)
;    )
;   :method-count-assert 77
;   :size-assert         #x200
;   :flag-assert         #x4d01900200
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     (dummy-76 () none 76)
;     )
;   )

; ;; snow-bunny
; (deftype snow-bunny-retreat-work (structure)
;   ((found-best        basic          :offset-assert 0)
;    (using-jump-event? basic          :offset-assert 4)
;    (best-travel-dist  float          :offset-assert 8)
;    (best-dest         vector :inline :offset-assert 16)
;    (away-vec          vector :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; citb-bunny
; (deftype citb-bunny (snow-bunny)
;   ()
;   :method-count-assert 77
;   :size-assert         #x200
;   :flag-assert         #x4d01900200
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     (dummy-76 () none 76)
;     )
;   )

; ;; citb-drop-plat-CIT
; (deftype drop-plat (process-drawable)
;   ((~Tspin-axis  vector :inline :offset-assert 176)
;    (~Tspin-angle float          :offset-assert 192)
;    (~Tspin-speed float          :offset-assert 196)
;    (~Tinterp     float          :offset-assert 200)
;    (~Tduration   uint64         :offset-assert 208)
;    (~Tdelay      uint64         :offset-assert 216)
;    (~Tcolor      int8           :offset-assert 224)
;    )
;   :method-count-assert 22
;   :size-assert         #xe1
;   :flag-assert         #x16008000e1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citb-drop-plat-CIT
; (deftype handle-inline-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; citb-drop-plat-CIT
; (deftype citb-drop-plat (process-drawable)
;   ((~Tx-count           int32          :offset-assert 176)
;    (~Tz-count           int32          :offset-assert 180)
;    (~Tchild-count       int32          :offset-assert 184)
;    (~Tchild-array       basic          :offset-assert 188)
;    (~Tchild-color-array uint32         :offset-assert 192)
;    (~Tx-dir             vector :inline :offset-assert 208)
;    (~Tz-dir             vector :inline :offset-assert 224)
;    (~Torigin            vector :inline :offset-assert 240)
;    (~Tx-spacing         float          :offset-assert 256)
;    (~Tz-spacing         float          :offset-assert 260)
;    (~Tidle-distance     float          :offset-assert 264)
;    (~Tduration          uint64         :offset-assert 272)
;    (~Tdrop-time         uint64         :offset-assert 280)
;    )
;   :method-count-assert 20
;   :size-assert         #x120
;   :flag-assert         #x1400b00120
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; citb-drop-plat-L1
; (deftype drop-plat (process-drawable)
;   ((~Tspin-axis  vector :inline :offset-assert 176)
;    (~Tspin-angle float          :offset-assert 192)
;    (~Tspin-speed float          :offset-assert 196)
;    (~Tinterp     float          :offset-assert 200)
;    (~Tduration   uint64         :offset-assert 208)
;    (~Tdelay      uint64         :offset-assert 216)
;    (~Tcolor      int8           :offset-assert 224)
;    )
;   :method-count-assert 22
;   :size-assert         #xe1
;   :flag-assert         #x16008000e1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; citb-drop-plat-L1
; (deftype handle-inline-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; citb-drop-plat-L1
; (deftype citb-drop-plat (process-drawable)
;   ((~Tx-count           int32          :offset-assert 176)
;    (~Tz-count           int32          :offset-assert 180)
;    (~Tchild-count       int32          :offset-assert 184)
;    (~Tchild-array       basic          :offset-assert 188)
;    (~Tchild-color-array uint32         :offset-assert 192)
;    (~Tx-dir             vector :inline :offset-assert 208)
;    (~Tz-dir             vector :inline :offset-assert 224)
;    (~Torigin            vector :inline :offset-assert 240)
;    (~Tx-spacing         float          :offset-assert 256)
;    (~Tz-spacing         float          :offset-assert 260)
;    (~Tidle-distance     float          :offset-assert 264)
;    (~Tduration          uint64         :offset-assert 272)
;    (~Tdrop-time         uint64         :offset-assert 280)
;    )
;   :method-count-assert 20
;   :size-assert         #x120
;   :flag-assert         #x1400b00120
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; assistant-citadel
; (deftype assistant-lavatube-end (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; DAR TYPES     ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

; ;; darkcave-obs
; (deftype cavecrystal (process-drawable)
;   ((~Tis-master?                 basic          :offset-assert 176)
;    (~Tcrystal-id                 int32          :offset-assert 180)
;    (~Tglow-u                     float          :offset-assert 184)
;    (~Tglow-wf-period             int32          :offset-assert 188)
;    (~Tglow-wf-offset             int32          :offset-assert 192)
;    (~Tprev-compute-glow-time     uint64         :offset-assert 200)
;    (~Tstart-fade-time            uint64         :offset-assert 208)
;    (~Tend-fade-time              uint64         :offset-assert 216)
;    (~Tactivated-time             uint64         :offset-assert 224)
;    (~Tlast-updated-user-lighting uint64         :offset-assert 232)
;    (~Tplayer-attack-id           uint64         :offset-assert 240)
;    (~Ton-color-mult              vector :inline :offset-assert 256)
;    (~Ton-color-emissive          vector :inline :offset-assert 272)
;    (~Toff-color-mult             vector :inline :offset-assert 288)
;    (~Toff-color-emissive         vector :inline :offset-assert 304)
;    )
;   :method-count-assert 22
;   :size-assert         #x140
;   :flag-assert         #x1600d00140
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; static-screen
; (deftype static-screen (process)
;   ((~Tpart       UNKNOWN 1 :offset-assert 112)
;    (~Tstate-time uint64    :offset-assert 120)
;    )
;   :method-count-assert 15
;   :size-assert         #x80
;   :flag-assert         #xf00100080
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; robotboss-h
; (deftype robotboss-dda (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; robotboss-h
; (deftype robotboss (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; light-eco
; (deftype light-eco-child (process-drawable)
;   ((~Tangle-bit          int32              :offset-assert 176)
;    (~Tground-y           float              :offset-assert 180)
;    (~Tfalling-start-time uint64             :offset-assert 184)
;    (~Tlast-update-time   uint64             :offset-assert 192)
;    (~Trot                vector     :inline :offset-assert 208)
;    (~Trotv               vector     :inline :offset-assert 224)
;    (~Ttraj               trajectory :inline :offset-assert 240)
;    )
;   :method-count-assert 21
;   :size-assert         #x118
;   :flag-assert         #x1500b00118
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; light-eco
; (deftype light-eco-mother (process-drawable)
;   ((~Tplayer-got-eco?   basic   :offset-assert 176)
;    (~Tangle-mask        uint64  :offset-assert 184)
;    (~Tdelay-til-spawn   int32   :offset-assert 192)
;    (~Tpart2             basic   :offset-assert 196)
;    (~Tlast-update-time  uint64  :offset-assert 200)
;    (~Tlast-spawned-time uint64  :offset-assert 208)
;    )
;   :method-count-assert 22
;   :size-assert         #xd8
;   :flag-assert         #x16007000d8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; robotboss-weapon
; (deftype torus (structure)
;   ((origin           vector :inline :offset-assert 0)
;    (axis             vector :inline :offset-assert 16)
;    (radius-primary   float          :offset-assert 32)
;    (radius-secondary float          :offset-assert 36)
;    )
;   :method-count-assert 13
;   :size-assert         #x28
;   :flag-assert         #xd00000028
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     )
;   )

; ;; robotboss-weapon
; (deftype torus-verts (structure)
;   ((vert UNKNOWN 8 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x80
;   :flag-assert         #x900000080
;   )

; ;; robotboss-weapon
; (deftype arcing-shot (process-drawable)
;   ((~Ty-vel float          :offset-assert 176)
;    (~Tgrav  float          :offset-assert 180)
;    (~Tfrom  vector :inline :offset-assert 192)
;    (~Tto    vector :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xe0
;   :flag-assert         #x14007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-weapon
; (deftype darkecobomb (arcing-shot)
;   ((~Tflight-time    uint64  :offset-assert 224)
;    (~Tcountdown-time float   :offset-assert 232)
;    (~Tanim-speed     float   :offset-assert 236)
;    (~Tnext-tick      float   :offset-assert 240)
;    )
;   :method-count-assert 20
;   :size-assert         #xf4
;   :flag-assert         #x14009000f4
;   ;; inherited inpspect of arcing-shot
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-weapon
; (deftype greenshot (arcing-shot)
;   ((~Tflight-time uint64  :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xe8
;   :flag-assert         #x14008000e8
;   ;; inherited inpspect of arcing-shot
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-weapon
; (deftype redshot (arcing-shot)
;   ((~Tflight-time     uint64         :offset-assert 224)
;    (~Tstall-time      uint64         :offset-assert 232)
;    (~Tring            torus  :inline :offset-assert 240)
;    (~Trotation-offset uint64         :offset-assert 280)
;    (~Tpart-track      uint64         :offset-assert 288)
;    (~Tshot-particle   basic          :offset-assert 296)
;    (~Ttest-particle   basic          :offset-assert 300)
;    )
;   :method-count-assert 20
;   :size-assert         #x130
;   :flag-assert         #x1400c00130
;   ;; inherited inpspect of arcing-shot
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-weapon
; (deftype yellowshot (arcing-shot)
;   ((~Tflight-time uint64  :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xe8
;   :flag-assert         #x14008000e8
;   ;; inherited inpspect of arcing-shot
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-misc
; (deftype ecoclaw-part-info (structure)
;   ((tracker uint64         :offset-assert 0)
;    (kind    basic          :offset-assert 8)
;    (trans   vector :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; robotboss-misc
; (deftype ecoclaw (process-drawable)
;   ((~Tparticles UNKNOWN 3 :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #x110
;   :flag-assert         #x1400a00110
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss-misc
; (deftype silodoor (process-drawable)
;   ((~Tpart-opened float  :offset-assert 176)
;    )
;   :method-count-assert 22
;   :size-assert         #xb4
;   :flag-assert         #x16005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; robotboss-misc
; (deftype finalbosscam (process-taskable)
;   ((~Trobotboss uint64  :offset-assert 384)
;    )
;   :method-count-assert 53
;   :size-assert         #x188
;   :flag-assert         #x3501200188
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; green-eco-lurker
; (deftype green-eco-lurker (nav-enemy)
;   ((~Tplayed-sound? basic              :offset-assert 400)
;    (~Tsound-delay   int32              :offset-assert 404)
;    (~Tappear-dest   vector     :inline :offset-assert 416)
;    (~Ttraj          trajectory :inline :offset-assert 432)
;    )
;   :method-count-assert 76
;   :size-assert         #x1d8
;   :flag-assert         #x4c017001d8
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; green-eco-lurker
; (deftype green-eco-lurker-gen (process-drawable)
;   ((~Tnum-to-spawn int32  :offset-assert 176)
;    (~Tnum-spawned  int32  :offset-assert 180)
;    (~Tnum-alive    int32  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robotboss
; (deftype redshot-launch-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; robotboss
; (deftype redshot-launch-array (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; final-door
; (deftype fin-door (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; final-door
; (deftype final-door (process-drawable)
;   ()
;   :method-count-assert 23
;   :size-assert         #xb0
;   :flag-assert         #x17004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; final-door
; (deftype power-left (final-door)
;   ()
;   :method-count-assert 23
;   :size-assert         #xb0
;   :flag-assert         #x17004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; final-door
; (deftype power-right (final-door)
;   ()
;   :method-count-assert 23
;   :size-assert         #xb0
;   :flag-assert         #x17004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; final-door
; (deftype powercellalt (process-drawable)
;   ((~Tjump-pos vector :inline :offset-assert 176)
;    (~Tbase     vector :inline :offset-assert 192)
;    (~Tindex    int32          :offset-assert 208)
;    )
;   :method-count-assert 23
;   :size-assert         #xd4
;   :flag-assert         #x17007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; sage-finalboss-FIN
; (deftype plat-eco-finalboss (plat-eco)
;   ((~Tforce-dest float   :offset-assert 360)
;    (~Ttarg-dest  float   :offset-assert 364)
;    (~Tdest       float   :offset-assert 368)
;    (~Tspeed      float   :offset-assert 372)
;    (~Ttouch-time uint64  :offset-assert 376)
;    )
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;; inherited inpspect of plat-eco
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; sage-finalboss-FIN
; (deftype sage-finalboss-particle (structure)
;   ((part   basic  :offset-assert 0)
;    (active basic  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; sage-finalboss-FIN
; (deftype sage-finalboss (process-taskable)
;   ((~Tredsage           uint64    :offset-assert 384)
;    (~Tbluesage          uint64    :offset-assert 392)
;    (~Tyellowsage        uint64    :offset-assert 400)
;    (~Tassistant         uint64    :offset-assert 408)
;    (~Trobotplat         uint64    :offset-assert 416)
;    (~Trobotboss         uint64    :offset-assert 424)
;    (~Tsilodoor          uint64    :offset-assert 432)
;    (~Tjak-white         uint64    :offset-assert 440)
;    (~Tleft-door         basic     :offset-assert 448)
;    (~Tright-door        basic     :offset-assert 452)
;    (~Tkick-in-the-door  basic     :offset-assert 456)
;    (~Tkick-the-credits  basic     :offset-assert 460)
;    (~Tcredit-fade       float     :offset-assert 464)
;    (~Tpalette-val       float     :offset-assert 468)
;    (~Tparticle          UNKNOWN 9 :offset-assert 472)
;    (~Tparticle-whiteout basic     :offset-assert 616)
;    (~Tcredits-played    basic     :offset-assert 620)
;    )
;   :method-count-assert 53
;   :size-assert         #x270
;   :flag-assert         #x3502000270
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sage-finalboss-L1
; (deftype plat-eco-finalboss (plat-eco)
;   ((~Tforce-dest float   :offset-assert 360)
;    (~Ttarg-dest  float   :offset-assert 364)
;    (~Tdest       float   :offset-assert 368)
;    (~Tspeed      float   :offset-assert 372)
;    (~Ttouch-time uint64  :offset-assert 376)
;    )
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;; inherited inpspect of plat-eco
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; sage-finalboss-L1
; (deftype sage-finalboss-particle (structure)
;   ((part   basic  :offset-assert 0)
;    (active basic  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; sage-finalboss-L1
; (deftype sage-finalboss (process-taskable)
;   ((~Tredsage           uint64    :offset-assert 384)
;    (~Tbluesage          uint64    :offset-assert 392)
;    (~Tyellowsage        uint64    :offset-assert 400)
;    (~Tassistant         uint64    :offset-assert 408)
;    (~Trobotplat         uint64    :offset-assert 416)
;    (~Trobotboss         uint64    :offset-assert 424)
;    (~Tsilodoor          uint64    :offset-assert 432)
;    (~Tjak-white         uint64    :offset-assert 440)
;    (~Tleft-door         basic     :offset-assert 448)
;    (~Tright-door        basic     :offset-assert 452)
;    (~Tkick-in-the-door  basic     :offset-assert 456)
;    (~Tkick-the-credits  basic     :offset-assert 460)
;    (~Tcredit-fade       float     :offset-assert 464)
;    (~Tpalette-val       float     :offset-assert 468)
;    (~Tparticle          UNKNOWN 9 :offset-assert 472)
;    (~Tparticle-whiteout basic     :offset-assert 616)
;    (~Tcredits-played    basic     :offset-assert 620)
;    )
;   :method-count-assert 53
;   :size-assert         #x270
;   :flag-assert         #x3502000270
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; evilbro
; (deftype evilbro (process-taskable)
;   ((~Tevilsis basic  :offset-assert 380)
;    )
;   :method-count-assert 53
;   :size-assert         #x180
;   :flag-assert         #x3501100180
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; evilbro
; (deftype evilsis (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; jungleb-obs
; (deftype eggtop (process-drawable)
;   ((~Tcam-tracker uint64  :offset-assert 176)
;    (~Tsound-id    uint32  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungleb-obs
; (deftype jng-iris-door (eco-door)
;   ()
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; plat-flip
; (deftype plat-flip (process-drawable)
;   ((~Tpath-pos              float                 :offset-assert 176)
;    (~Tbefore-turn-down-time float                 :offset-assert 180)
;    (~Tturn-down-time        float                 :offset-assert 184)
;    (~Tbefore-turn-up-time   float                 :offset-assert 188)
;    (~Tturn-up-time          float                 :offset-assert 192)
;    (~Ttotal-time            float                 :offset-assert 196)
;    (~Tsync                  sync-info     :inline :offset-assert 200)
;    (~Tbase-pos              vector        :inline :offset-assert 208)
;    (~Tsmush                 smush-control :inline :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #x100
;   :flag-assert         #x1400900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; aphid
; (deftype aphid (nav-enemy)
;   ((~Ttry int32  :offset-assert 400)
;    )
;   :method-count-assert 76
;   :size-assert         #x194
;   :flag-assert         #x4c01300194
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; plant-boss
; (deftype plant-boss (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; plant-boss
; (deftype plant-boss-arm (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; plant-boss
; (deftype plant-boss-leaf (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; jungle-elevator
; (deftype jungle-elevator (plat-button)
;   ((~Tbottom-height       float  :offset-assert 240)
;    (~Tteleport-if-below-y float  :offset-assert 244)
;    (~Tteleport-if-above-y float  :offset-assert 248)
;    )
;   :method-count-assert 33
;   :size-assert         #xfc
;   :flag-assert         #x21009000fc
;   ;; inherited inpspect of plat-button
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; bouncer
; (deftype springbox (process-drawable)
;   ((~Tspring-height meters  :offset-assert 176)
;    (~Tsmush         float   :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; hopper
; (deftype hopper (nav-enemy)
;   ((~Tjump-length  float  :offset-assert 400)
;    (~Tshadow-min-y float  :offset-assert 404)
;    )
;   :method-count-assert 76
;   :size-assert         #x198
;   :flag-assert         #x4c01300198
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; junglesnake
; (deftype junglesnake-twist-joint (structure)
;   ((joint-index   int32  :offset-assert 0)
;    (ry            float  :offset-assert 4)
;    (drag-delta-ry float  :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; junglesnake
; (deftype junglesnake-tilt-joint (structure)
;   ((joint-index int32  :offset-assert 0)
;    (flip-it     basic  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; junglesnake
; (deftype junglesnake (process-drawable)
;   ((~Tstate-time        uint64     :offset-assert 168)
;    (~Thit-player        basic      :offset-assert 184)
;    (~Tis-lethal?        basic      :offset-assert 188)
;    (~Trefractory-delay  int32      :offset-assert 192)
;    (~Try                float      :offset-assert 196)
;    (~Tdes-ry            float      :offset-assert 200)
;    (~Ttilt              float      :offset-assert 204)
;    (~Tdes-tilt          float      :offset-assert 208)
;    (~Ttrack-player-ry   basic      :offset-assert 212)
;    (~Ttrack-player-tilt basic      :offset-assert 216)
;    (~Ttwist-joints      UNKNOWN 24 :offset-assert 220)
;    (~Ttilt-joints       UNKNOWN 3  :offset-assert 604)
;    )
;   :method-count-assert 25
;   :size-assert         #x28c
;   :flag-assert         #x190220028c
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; darkvine
; (deftype darkvine (process-drawable)
;   ((~Tspeed            float   :offset-assert 176)
;    (~Ttip-index        int8    :offset-assert 180)
;    (~Tdangerous        basic   :offset-assert 184)
;    (~Tvulnerable       basic   :offset-assert 188)
;    (~Thit-player       basic   :offset-assert 192)
;    (~Ttouch-time       uint64  :offset-assert 200)
;    (~Tplayer-attack-id int32   :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd4
;   :flag-assert         #x14007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype logtrap (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; jungle-obs
; (deftype towertop (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype lurkerm-tall-sail (process-drawable)
;   ((~Tspeed     float  :offset-assert 176)
;    (~Talt-actor basic  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype lurkerm-short-sail (process-drawable)
;   ((~Tspeed     float  :offset-assert 176)
;    (~Talt-actor basic  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype lurkerm-piston (process-drawable)
;   ((~Tsync      sync-info :inline :offset-assert 176)
;    (~Tbase      vector    :inline :offset-assert 192)
;    (~Theight    vector    :inline :offset-assert 208)
;    (~Tspeed     float             :offset-assert 224)
;    (~Talt-actor basic             :offset-assert 228)
;    )
;   :method-count-assert 20
;   :size-assert         #xe8
;   :flag-assert         #x14008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype accordian (process-drawable)
;   ((~Tspeed     float  :offset-assert 176)
;    (~Talt-actor basic  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype junglecam (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; jungle-obs
; (deftype precurbridgecam (pov-camera)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; jungle-obs
; (deftype precurbridge-span (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   )

; ;; jungle-obs
; (deftype precurbridge (process-drawable)
;   ((~Tsmush            smush-control :inline :offset-assert 176)
;    (~Tbase             vector        :inline :offset-assert 208)
;    (~Tactivation-point vector        :inline :offset-assert 224)
;    (~Tspan-array       UNKNOWN       8       :offset-assert 240)
;    )
;   :method-count-assert 20
;   :size-assert         #x110
;   :flag-assert         #x1400a00110
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype maindoor (process-drawable)
;   ((~Tthresh vector :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xc0
;   :flag-assert         #x14005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype sidedoor (eco-door)
;   ()
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; jungle-obs
; (deftype jngpusher (process-drawable)
;   ((~Tsync      sync-info :inline :offset-assert 176)
;    (~Tback-prim basic             :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-obs
; (deftype jungle-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; jungle-mirrors
; (deftype periscope (process-drawable)
;   ((~Ty-offset               meters         :offset-assert 176)
;    (~Ty-offset-grips         meters         :offset-assert 180)
;    (~Theight                 meters         :offset-assert 184)
;    (~Tturn                   deg            :offset-assert 188)
;    (~Ttilt                   deg            :offset-assert 192)
;    (~Ttarget-turn            deg            :offset-assert 196)
;    (~Ttarget-tilt            deg            :offset-assert 200)
;    (~Tbase                   vector :inline :offset-assert 208)
;    (~Treflector-trans        vector :inline :offset-assert 224)
;    (~Tnext-reflector-trans   vector :inline :offset-assert 240)
;    (~Tprev-reflector-trans   vector :inline :offset-assert 256)
;    (~Told-camera-matrix      matrix :inline :offset-assert 272)
;    (~Treflector              uint32         :offset-assert 336)
;    (~Tgauge-rot              deg            :offset-assert 340)
;    (~Tlock-time              uint64         :offset-assert 344)
;    (~Taligned?               basic          :offset-assert 352)
;    (~Traised?                basic          :offset-assert 356)
;    (~Tplayer-touching-grips? basic          :offset-assert 360)
;    (~Tgrips-moving?          basic          :offset-assert 364)
;    (~Tsound-id               uint32         :offset-assert 368)
;    (~Trise-sound-id          uint32         :offset-assert 372)
;    (~Tgrips-sound-id         uint32         :offset-assert 376)
;    (~Tgrips                  basic          :offset-assert 380)
;    (~Tpart-aligned           basic          :offset-assert 384)
;    )
;   :method-count-assert 20
;   :size-assert         #x184
;   :flag-assert         #x1401200184
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-mirrors
; (deftype reflector (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-mirrors
; (deftype reflector-origin (process-drawable)
;   ((~Treflector-trans      vector :inline :offset-assert 176)
;    (~Tnext-reflector-trans vector :inline :offset-assert 192)
;    (~Treflector            uint32         :offset-assert 208)
;    (~Tnext                 basic          :offset-assert 212)
;    (~Tblocker              basic          :offset-assert 216)
;    )
;   :method-count-assert 20
;   :size-assert         #xdc
;   :flag-assert         #x14007000dc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-mirrors
; (deftype reflector-mirror (process-drawable)
;   ((~Tbeam-end vector :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xc0
;   :flag-assert         #x14005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; junglefish
; (deftype junglefish (nav-enemy)
;   ()
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; fisher-JUN
; (deftype fisher-bank (basic)
;   ((width      meters  :offset-assert 4)
;    (net-radius meters  :offset-assert 8)
;    (max-caught int32   :offset-assert 12)
;    (max-missed int32   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; fisher-JUN
; (deftype fisher-params (structure)
;   ((timeout         uint64  :offset-assert 0)
;    (vel             float   :offset-assert 8)
;    (swing-min       uint64  :offset-assert 16)
;    (swing-max       uint64  :offset-assert 24)
;    (period          uint64  :offset-assert 32)
;    (fish-vel        float   :offset-assert 40)
;    (bad-percent     float   :offset-assert 44)
;    (deadly-percent  float   :offset-assert 48)
;    (powerup-percent float   :offset-assert 52)
;    )
;   :method-count-assert 9
;   :size-assert         #x38
;   :flag-assert         #x900000038
;   )

; ;; fisher-JUN
; (deftype fisher (process-taskable)
;   ((~Tpaddle-end      UNKNOWN       2       :offset-assert 384)
;    (~Tpaddle-pos      vector        :inline :offset-assert 416)
;    (~Tpaddle          float                 :offset-assert 432)
;    (~Tpaddle-vel      float                 :offset-assert 436)
;    (~Tspawner         float                 :offset-assert 440)
;    (~Tspawner-last    float                 :offset-assert 444)
;    (~Tspawn-time      uint64                :offset-assert 448)
;    (~Tturn-time       uint64                :offset-assert 456)
;    (~Tswing-time      uint64                :offset-assert 464)
;    (~Tblock-time      uint64                :offset-assert 472)
;    (~Tblock           int32                 :offset-assert 480)
;    (~Tcaught          int32                 :offset-assert 484)
;    (~Tmissed          int32                 :offset-assert 488)
;    (~Tdifficulty      int32                 :offset-assert 492)
;    (~Tstart-time      uint64                :offset-assert 496)
;    (~Tambient-big-one uint64                :offset-assert 504)
;    (~Tambient-steady  uint64                :offset-assert 512)
;    (~Tambient-sagging uint64                :offset-assert 520)
;    (~Tambient-almost  uint64                :offset-assert 528)
;    (~Tcheat-temp      int32                 :offset-assert 536)
;    (~Thard            basic                 :offset-assert 540)
;    (~Ttraining        basic                 :offset-assert 544)
;    (~Tparams          fisher-params :inline :offset-assert 552)
;    )
;   :method-count-assert 53
;   :size-assert         #x260
;   :flag-assert         #x3501f00260
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; fisher-JUN
; (deftype fisher-fish (process-drawable)
;   ((~Tdir    vector :inline :offset-assert 176)
;    (~Toffset float          :offset-assert 192)
;    (~Tpos    float          :offset-assert 196)
;    (~Tvel    float          :offset-assert 200)
;    (~Tmode   basic          :offset-assert 204)
;    (~Tsize   meters         :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd4
;   :flag-assert         #x14007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; fisher-JUNGLE-L1
; (deftype fisher-bank (basic)
;   ((width      meters  :offset-assert 4)
;    (net-radius meters  :offset-assert 8)
;    (max-caught int32   :offset-assert 12)
;    (max-missed int32   :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; fisher-JUNGLE-L1
; (deftype fisher-params (structure)
;   ((timeout         uint64  :offset-assert 0)
;    (vel             float   :offset-assert 8)
;    (swing-min       uint64  :offset-assert 16)
;    (swing-max       uint64  :offset-assert 24)
;    (period          uint64  :offset-assert 32)
;    (fish-vel        float   :offset-assert 40)
;    (bad-percent     float   :offset-assert 44)
;    (deadly-percent  float   :offset-assert 48)
;    (powerup-percent float   :offset-assert 52)
;    )
;   :method-count-assert 9
;   :size-assert         #x38
;   :flag-assert         #x900000038
;   )

; ;; fisher-JUNGLE-L1
; (deftype fisher (process-taskable)
;   ((~Tpaddle-end      UNKNOWN       2       :offset-assert 384)
;    (~Tpaddle-pos      vector        :inline :offset-assert 416)
;    (~Tpaddle          float                 :offset-assert 432)
;    (~Tpaddle-vel      float                 :offset-assert 436)
;    (~Tspawner         float                 :offset-assert 440)
;    (~Tspawner-last    float                 :offset-assert 444)
;    (~Tspawn-time      uint64                :offset-assert 448)
;    (~Tturn-time       uint64                :offset-assert 456)
;    (~Tswing-time      uint64                :offset-assert 464)
;    (~Tblock-time      uint64                :offset-assert 472)
;    (~Tblock           int32                 :offset-assert 480)
;    (~Tcaught          int32                 :offset-assert 484)
;    (~Tmissed          int32                 :offset-assert 488)
;    (~Tdifficulty      int32                 :offset-assert 492)
;    (~Tstart-time      uint64                :offset-assert 496)
;    (~Tambient-big-one uint64                :offset-assert 504)
;    (~Tambient-steady  uint64                :offset-assert 512)
;    (~Tambient-sagging uint64                :offset-assert 520)
;    (~Tambient-almost  uint64                :offset-assert 528)
;    (~Tcheat-temp      int32                 :offset-assert 536)
;    (~Thard            basic                 :offset-assert 540)
;    (~Ttraining        basic                 :offset-assert 544)
;    (~Tparams          fisher-params :inline :offset-assert 552)
;    )
;   :method-count-assert 53
;   :size-assert         #x260
;   :flag-assert         #x3501f00260
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; fisher-JUNGLE-L1
; (deftype fisher-fish (process-drawable)
;   ((~Tdir    vector :inline :offset-assert 176)
;    (~Toffset float          :offset-assert 192)
;    (~Tpos    float          :offset-assert 196)
;    (~Tvel    float          :offset-assert 200)
;    (~Tmode   basic          :offset-assert 204)
;    (~Tsize   meters         :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd4
;   :flag-assert         #x14007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; jungle-part
; (deftype jungle-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; launcherdoor
; (deftype launcherdoor (process-drawable)
;   ((~Tnotify-player-passed-thru? basic  :offset-assert 176)
;    (~Tthresh-y                   float  :offset-assert 180)
;    (~Topen-speed                 float  :offset-assert 184)
;    (~Tclose-speed                float  :offset-assert 188)
;    (~Tload-mode                  basic  :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xc4
;   :flag-assert         #x14006000c4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; target-racer-h-L1-RACERP
; (deftype racer-info (basic)
;   ((entity              basic                 :offset-assert 4)
;    (bike-trans          vector        :inline :offset-assert 16)
;    (bike-quat           vector        :inline :offset-assert 32)
;    (bike-scale          vector        :inline :offset-assert 48)
;    (mod-x               float                 :offset-assert 64)
;    (rot                 vector        :inline :offset-assert 80)
;    (rot-old             vector        :inline :offset-assert 96)
;    (rotv                vector        :inline :offset-assert 112)
;    (lean-rotx           deg                   :offset-assert 128)
;    (change-roty         deg                   :offset-assert 132)
;    (change-roty-old     deg                   :offset-assert 136)
;    (quat                vector        :inline :offset-assert 144)
;    (surface-y           meters                :offset-assert 160)
;    (surface-vy          meters                :offset-assert 164)
;    (surface-quat        vector        :inline :offset-assert 176)
;    (surface-quat-smooth vector        :inline :offset-assert 192)
;    (cushion-base        meters                :offset-assert 208)
;    (cushion-offset      meters                :offset-assert 212)
;    (cushion-bob         meters                :offset-assert 216)
;    (cushion-bob-old     meters                :offset-assert 220)
;    (cushion-smush       smush-control :inline :offset-assert 224)
;    (shock-offset        meters                :offset-assert 256)
;    (shock-offsetv       meters                :offset-assert 260)
;    (shock-rotx          meters                :offset-assert 264)
;    (hill-value          float                 :offset-assert 268)
;    (hill-ground-value   float                 :offset-assert 272)
;    (hill-offset         meters                :offset-assert 276)
;    (hill-rotx           deg                   :offset-assert 280)
;    (hill-boost          meters                :offset-assert 284)
;    (bob-timer           float                 :offset-assert 288)
;    (bob-meta-timer      float                 :offset-assert 292)
;    (bob-meta-meta-timer float                 :offset-assert 296)
;    (bob-mult-rot        float                 :offset-assert 300)
;    (bob-mult-trans      float                 :offset-assert 304)
;    (bob-period          float                 :offset-assert 308)
;    (bob-meta-time       uint64                :offset-assert 312)
;    (bob-hit-ground-time uint64                :offset-assert 320)
;    (cur-rotx            deg                   :offset-assert 328)
;    (targ-rotx           deg                   :offset-assert 332)
;    (speed-rotx          float                 :offset-assert 336)
;    (mult-rotx           deg                   :offset-assert 340)
;    (front-blade         basic                 :offset-assert 344)
;    (front-rot           deg                   :offset-assert 348)
;    (front-rotv          deg                   :offset-assert 352)
;    (bottom-blade        basic                 :offset-assert 356)
;    (bottom-rot          deg                   :offset-assert 360)
;    (front               basic                 :offset-assert 364)
;    (front-turn          deg                   :offset-assert 368)
;    (tail                basic                 :offset-assert 372)
;    (tail-tilt           deg                   :offset-assert 376)
;    (transv-max          meters                :offset-assert 380)
;    (slide-down-time     UNKNOWN       2       :offset-assert 384)
;    (slide-enter-time    uint64                :offset-assert 400)
;    (slide-mode          int32                 :offset-assert 408)
;    (slide-amp           float                 :offset-assert 412)
;    (slide-grip-mult     float                 :offset-assert 416)
;    (slide-shift-x       float                 :offset-assert 420)
;    (slide-interp        float                 :offset-assert 424)
;    (heat                float                 :offset-assert 428)
;    (boost-time          uint64                :offset-assert 432)
;    (boost-duration      uint64                :offset-assert 440)
;    (boost-curve         float                 :offset-assert 448)
;    (boost-level         float                 :offset-assert 452)
;    (boost-target        float                 :offset-assert 456)
;    (boost-output        float                 :offset-assert 460)
;    (hop?                basic                 :offset-assert 464)
;    (hop-start-y         float                 :offset-assert 468)
;    (bounce              int32                 :offset-assert 472)
;    (bounce-hit          float                 :offset-assert 476)
;    (engine-sound-id     uint32                :offset-assert 480)
;    (boost-sound-id      uint32                :offset-assert 484)
;    (engine-sound-pitch  float                 :offset-assert 488)
;    (turn-anim-targ      float                 :offset-assert 492)
;    (turn-anim-frame     float                 :offset-assert 496)
;    (turn-anim-vel       float                 :offset-assert 500)
;    (tail-anim-vel       float                 :offset-assert 504)
;    (tail-anim-frame     float                 :offset-assert 508)
;    (rudd-anim-vel       float                 :offset-assert 512)
;    (rudd-anim-frame     float                 :offset-assert 516)
;    (racing-time         uint64                :offset-assert 520)
;    (stick-lock          basic                 :offset-assert 528)
;    (stick-off           basic                 :offset-assert 532)
;    (heavy               basic                 :offset-assert 536)
;    (scrape-sound-id     uint32                :offset-assert 540)
;    (heat-sound-time     uint64                :offset-assert 544)
;    )
;   :method-count-assert 9
;   :size-assert         #x238
;   :flag-assert         #x900000238
;   )

; ;; target-racer-h-L1-RACERP
; (deftype racer-bank (basic)
;   ((slide-hold-time            useconds  :offset-assert 8)
;    (heat-max                   float     :offset-assert 16)
;    (hotcoals-heat-inc          float     :offset-assert 20)
;    (lava-heat-inc              float     :offset-assert 24)
;    (lava-air-heat-inc          float     :offset-assert 28)
;    (surface-heat-inc           float     :offset-assert 32)
;    (jump-heat-inc              float     :offset-assert 36)
;    (lavatube-hotcoals-heat-inc float     :offset-assert 40)
;    (lavatube-lava-heat-inc     float     :offset-assert 44)
;    (lavatube-lava-air-heat-inc float     :offset-assert 48)
;    (lavatube-surface-heat-inc  float     :offset-assert 52)
;    (lavatube-jump-heat-inc     float     :offset-assert 56)
;    (boost-curve-max            meters    :offset-assert 60)
;    (boost-level-max            meters    :offset-assert 64)
;    (boost-level-inc            meters    :offset-assert 68)
;    (boost-duration             useconds  :offset-assert 72)
;    (default-front-blade        deg       :offset-assert 80)
;    (yellow-projectile-speed    meters    :offset-assert 84)
;    )
;   :method-count-assert 9
;   :size-assert         #x58
;   :flag-assert         #x900000058
;   )

; ;; target-racer-h-FIC-LAV-MIS-OGR-ROL
; (deftype racer-info (basic)
;   ((entity              basic                 :offset-assert 4)
;    (bike-trans          vector        :inline :offset-assert 16)
;    (bike-quat           vector        :inline :offset-assert 32)
;    (bike-scale          vector        :inline :offset-assert 48)
;    (mod-x               float                 :offset-assert 64)
;    (rot                 vector        :inline :offset-assert 80)
;    (rot-old             vector        :inline :offset-assert 96)
;    (rotv                vector        :inline :offset-assert 112)
;    (lean-rotx           deg                   :offset-assert 128)
;    (change-roty         deg                   :offset-assert 132)
;    (change-roty-old     deg                   :offset-assert 136)
;    (quat                vector        :inline :offset-assert 144)
;    (surface-y           meters                :offset-assert 160)
;    (surface-vy          meters                :offset-assert 164)
;    (surface-quat        vector        :inline :offset-assert 176)
;    (surface-quat-smooth vector        :inline :offset-assert 192)
;    (cushion-base        meters                :offset-assert 208)
;    (cushion-offset      meters                :offset-assert 212)
;    (cushion-bob         meters                :offset-assert 216)
;    (cushion-bob-old     meters                :offset-assert 220)
;    (cushion-smush       smush-control :inline :offset-assert 224)
;    (shock-offset        meters                :offset-assert 256)
;    (shock-offsetv       meters                :offset-assert 260)
;    (shock-rotx          meters                :offset-assert 264)
;    (hill-value          float                 :offset-assert 268)
;    (hill-ground-value   float                 :offset-assert 272)
;    (hill-offset         meters                :offset-assert 276)
;    (hill-rotx           deg                   :offset-assert 280)
;    (hill-boost          meters                :offset-assert 284)
;    (bob-timer           float                 :offset-assert 288)
;    (bob-meta-timer      float                 :offset-assert 292)
;    (bob-meta-meta-timer float                 :offset-assert 296)
;    (bob-mult-rot        float                 :offset-assert 300)
;    (bob-mult-trans      float                 :offset-assert 304)
;    (bob-period          float                 :offset-assert 308)
;    (bob-meta-time       uint64                :offset-assert 312)
;    (bob-hit-ground-time uint64                :offset-assert 320)
;    (cur-rotx            deg                   :offset-assert 328)
;    (targ-rotx           deg                   :offset-assert 332)
;    (speed-rotx          float                 :offset-assert 336)
;    (mult-rotx           deg                   :offset-assert 340)
;    (front-blade         basic                 :offset-assert 344)
;    (front-rot           deg                   :offset-assert 348)
;    (front-rotv          deg                   :offset-assert 352)
;    (bottom-blade        basic                 :offset-assert 356)
;    (bottom-rot          deg                   :offset-assert 360)
;    (front               basic                 :offset-assert 364)
;    (front-turn          deg                   :offset-assert 368)
;    (tail                basic                 :offset-assert 372)
;    (tail-tilt           deg                   :offset-assert 376)
;    (transv-max          meters                :offset-assert 380)
;    (slide-down-time     UNKNOWN       2       :offset-assert 384)
;    (slide-enter-time    uint64                :offset-assert 400)
;    (slide-mode          int32                 :offset-assert 408)
;    (slide-amp           float                 :offset-assert 412)
;    (slide-grip-mult     float                 :offset-assert 416)
;    (slide-shift-x       float                 :offset-assert 420)
;    (slide-interp        float                 :offset-assert 424)
;    (heat                float                 :offset-assert 428)
;    (boost-time          uint64                :offset-assert 432)
;    (boost-duration      uint64                :offset-assert 440)
;    (boost-curve         float                 :offset-assert 448)
;    (boost-level         float                 :offset-assert 452)
;    (boost-target        float                 :offset-assert 456)
;    (boost-output        float                 :offset-assert 460)
;    (hop?                basic                 :offset-assert 464)
;    (hop-start-y         float                 :offset-assert 468)
;    (bounce              int32                 :offset-assert 472)
;    (bounce-hit          float                 :offset-assert 476)
;    (engine-sound-id     uint32                :offset-assert 480)
;    (boost-sound-id      uint32                :offset-assert 484)
;    (engine-sound-pitch  float                 :offset-assert 488)
;    (turn-anim-targ      float                 :offset-assert 492)
;    (turn-anim-frame     float                 :offset-assert 496)
;    (turn-anim-vel       float                 :offset-assert 500)
;    (tail-anim-vel       float                 :offset-assert 504)
;    (tail-anim-frame     float                 :offset-assert 508)
;    (rudd-anim-vel       float                 :offset-assert 512)
;    (rudd-anim-frame     float                 :offset-assert 516)
;    (racing-time         uint64                :offset-assert 520)
;    (stick-lock          basic                 :offset-assert 528)
;    (stick-off           basic                 :offset-assert 532)
;    (heavy               basic                 :offset-assert 536)
;    (unstuck-time        uint64                :offset-assert 544)
;    (stuck-count         int32                 :offset-assert 552)
;    (scrape-sound-id     uint32                :offset-assert 556)
;    (heat-sound-time     uint64                :offset-assert 560)
;    )
;   :method-count-assert 9
;   :size-assert         #x238
;   :flag-assert         #x900000238
;   )

; ;; target-racer-h-FIC-LAV-MIS-OGR-ROL
; (deftype racer-bank (basic)
;   ((slide-hold-time            useconds  :offset-assert 8)
;    (heat-max                   float     :offset-assert 16)
;    (hotcoals-heat-inc          float     :offset-assert 20)
;    (lava-heat-inc              float     :offset-assert 24)
;    (lava-air-heat-inc          float     :offset-assert 28)
;    (surface-heat-inc           float     :offset-assert 32)
;    (jump-heat-inc              float     :offset-assert 36)
;    (lavatube-hotcoals-heat-inc float     :offset-assert 40)
;    (lavatube-lava-heat-inc     float     :offset-assert 44)
;    (lavatube-lava-air-heat-inc float     :offset-assert 48)
;    (lavatube-surface-heat-inc  float     :offset-assert 52)
;    (lavatube-jump-heat-inc     float     :offset-assert 56)
;    (boost-curve-max            meters    :offset-assert 60)
;    (boost-level-max            meters    :offset-assert 64)
;    (boost-level-inc            meters    :offset-assert 68)
;    (boost-duration             useconds  :offset-assert 72)
;    (default-front-blade        deg       :offset-assert 80)
;    (yellow-projectile-speed    meters    :offset-assert 84)
;    )
;   :method-count-assert 9
;   :size-assert         #x58
;   :flag-assert         #x900000058
;   )

; ;; racer-part
; (deftype hud-bike-heat (hud)
;   ()
;   :method-count-assert 27
;   :size-assert         #x118
;   :flag-assert         #x1b00b00118
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; racer-part
; (deftype hud-bike-speed (hud)
;   ()
;   :method-count-assert 27
;   :size-assert         #x118
;   :flag-assert         #x1b00b00118
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; racer
; (deftype racer (process-drawable)
;   ((~Textra-trans   vector  :inline :offset-assert 176)
;    (~Tcondition     int32           :offset-assert 192)
;    (~Tcell          uint64          :offset-assert 200)
;    (~Tpath-data     UNKNOWN 2       :offset-assert 208)
;    (~Tpath-target   basic           :offset-assert 208)
;    (~Tpath-racer    basic           :offset-assert 212)
;    (~Tauto-get-off  basic           :offset-assert 216)
;    (~Tshadow-backup basic           :offset-assert 220)
;    )
;   :method-count-assert 24
;   :size-assert         #xe0
;   :flag-assert         #x18007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; blocking-plane
; (deftype blocking-plane (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; flutflut
; (deftype flutflut (process-drawable)
;   ((~Textra-trans  vector  :inline :offset-assert 176)
;    (~Tcondition    int32           :offset-assert 192)
;    (~Tauto-get-off basic           :offset-assert 196)
;    (~Tcell         uint64          :offset-assert 200)
;    (~Tpath-data    UNKNOWN 2       :offset-assert 208)
;    (~Tpath-target  basic           :offset-assert 208)
;    (~Tpath-flut    basic           :offset-assert 212)
;    (~Ttouch-time   uint64          :offset-assert 216)
;    )
;   :method-count-assert 24
;   :size-assert         #xe0
;   :flag-assert         #x18007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     )
;   )

; ;; target-flut
; (deftype flut-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; target-flut
; (deftype flut-bank (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; farmer
; (deftype farmer (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; explorer
; (deftype explorer (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; assistant
; (deftype assistant (process-taskable)
;   ((~Tsound-id uint32  :offset-assert 380)
;    )
;   :method-count-assert 53
;   :size-assert         #x180
;   :flag-assert         #x3501100180
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sage
; (deftype sage (process-taskable)
;   ((~Treminder-played basic   :offset-assert 380)
;    (~Tassistant       uint64  :offset-assert 384)
;    )
;   :method-count-assert 53
;   :size-assert         #x188
;   :flag-assert         #x3501200188
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; yakow
; (deftype yakow-bank (basic)
;   ((walk-cycle-frame-count float   :offset-assert 4)
;    (run-cycle-frame-count  float   :offset-assert 8)
;    (walk-speed             meters  :offset-assert 12)
;    (run-speed              meters  :offset-assert 16)
;    (walk-anim-speed        float   :offset-assert 20)
;    (run-anim-speed         float   :offset-assert 24)
;    (walk-away-dist         meters  :offset-assert 28)
;    (run-away-dist          meters  :offset-assert 32)
;    (walk-rotate-speed      float   :offset-assert 36)
;    (run-rotate-speed       float   :offset-assert 40)
;    (walk-turn-time         uint64  :offset-assert 48)
;    (run-turn-time          uint64  :offset-assert 56)
;    (max-walk-speed         float   :offset-assert 64)
;    (min-run-speed          float   :offset-assert 68)
;    (walk-run-blend-rate    float   :offset-assert 72)
;    (walk-turn-blend-rate   float   :offset-assert 76)
;    (max-run-speed          float   :offset-assert 80)
;    (acceleration           meters  :offset-assert 84)
;    (default-patrol-time    uint64  :offset-assert 88)
;    (default-idle-distance  meters  :offset-assert 96)
;    (safe-distance          meters  :offset-assert 100)
;    (min-run-anim-speed     float   :offset-assert 104)
;    (max-run-anim-speed     float   :offset-assert 108)
;    (min-walk-anim-speed    float   :offset-assert 112)
;    (speed-boost-impulse    meters  :offset-assert 116)
;    )
;   :method-count-assert 9
;   :size-assert         #x78
;   :flag-assert         #x900000078
;   )

; ;; yakow
; (deftype yakow (process-drawable)
;   ((~Tplayer-attack-id   int32          :offset-assert 176)
;    (~Twalk-run-blend     float          :offset-assert 180)
;    (~Twalk-turn-blend    float          :offset-assert 184)
;    (~Trun-mode           basic          :offset-assert 188)
;    (~Ttravel-speed       meters         :offset-assert 192)
;    (~Tfinal-speed        meters         :offset-assert 196)
;    (~Trotate-speed       float          :offset-assert 200)
;    (~Tturn-time          uint64         :offset-assert 208)
;    (~Tvulnerable         basic          :offset-assert 216)
;    (~Tgrazing            basic          :offset-assert 220)
;    (~Tpush-velocity      vector :inline :offset-assert 224)
;    (~Thome-base          vector :inline :offset-assert 240)
;    (~Tdest-base          vector :inline :offset-assert 256)
;    (~Tdest-rot           deg            :offset-assert 272)
;    (~Tenable-turn-around basic          :offset-assert 276)
;    (~Trotating           basic          :offset-assert 280)
;    (~Tin-pen             basic          :offset-assert 284)
;    )
;   :method-count-assert 20
;   :size-assert         #x120
;   :flag-assert         #x1400b00120
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype windmill-sail (process-drawable)
;   ((~Tsync         sync-info  :inline :offset-assert 176)
;    (~Tblade-normal vector     :inline :offset-assert 192)
;    (~Torig-quat    quaternion :inline :offset-assert 208)
;    (~Talt-actor    basic              :offset-assert 224)
;    (~Tpart2        basic              :offset-assert 228)
;    )
;   :method-count-assert 20
;   :size-assert         #xe8
;   :flag-assert         #x14008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype sagesail (process-drawable)
;   ((~Tsync         sync-info  :inline :offset-assert 176)
;    (~Tblade-normal vector     :inline :offset-assert 192)
;    (~Torig-quat    quaternion :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xe0
;   :flag-assert         #x14007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype windspinner (process-drawable)
;   ((~Tblade-normal vector     :inline :offset-assert 176)
;    (~Torig-quat    quaternion :inline :offset-assert 192)
;    (~Tangle        float              :offset-assert 208)
;    (~Tangle-vel    float              :offset-assert 212)
;    )
;   :method-count-assert 20
;   :size-assert         #xd8
;   :flag-assert         #x14007000d8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype mayorgears (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype reflector-middle (process-drawable)
;   ((~Treflector-trans      vector :inline :offset-assert 176)
;    (~Tnext-reflector-trans vector :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype reflector-end (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype villa-starfish (process-drawable)
;   ((~Tchild-count int8  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype starfish (nav-enemy)
;   ()
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; village-obs-L1
; (deftype village-fish (process-drawable)
;   ((~Tchild-count int8  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype villa-fisha (village-fish)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype villa-fishb (village-fish)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype cyclegen (structure)
;   ((output float  :offset-assert 0)
;    (inc    float  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; village-obs-L1
; (deftype hutlamp (process-drawable)
;   ((~Tpivot basic            :offset-assert 176)
;    (~Tclock cyclegen :inline :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-L1
; (deftype revcycleprop (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village-obs-L1
; (deftype revcycle (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village-obs-L1
; (deftype villagea-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; village-obs-VI1
; (deftype windmill-sail (process-drawable)
;   ((~Tsync         sync-info  :inline :offset-assert 176)
;    (~Tblade-normal vector     :inline :offset-assert 192)
;    (~Torig-quat    quaternion :inline :offset-assert 208)
;    (~Talt-actor    basic              :offset-assert 224)
;    (~Tpart2        basic              :offset-assert 228)
;    )
;   :method-count-assert 20
;   :size-assert         #xe8
;   :flag-assert         #x14008000e8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype sagesail (process-drawable)
;   ((~Tsync         sync-info  :inline :offset-assert 176)
;    (~Tblade-normal vector     :inline :offset-assert 192)
;    (~Torig-quat    quaternion :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xe0
;   :flag-assert         #x14007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype windspinner (process-drawable)
;   ((~Tblade-normal vector     :inline :offset-assert 176)
;    (~Torig-quat    quaternion :inline :offset-assert 192)
;    (~Tangle        float              :offset-assert 208)
;    (~Tangle-vel    float              :offset-assert 212)
;    )
;   :method-count-assert 20
;   :size-assert         #xd8
;   :flag-assert         #x14007000d8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype mayorgears (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype reflector-middle (process-drawable)
;   ((~Treflector-trans      vector :inline :offset-assert 176)
;    (~Tnext-reflector-trans vector :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype reflector-end (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype villa-starfish (process-drawable)
;   ((~Tchild-count int8  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype starfish (nav-enemy)
;   ()
;   :method-count-assert 76
;   :size-assert         #x190
;   :flag-assert         #x4c01200190
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; village-obs-VI1
; (deftype village-fish (process-drawable)
;   ((~Tchild-count int8  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype villa-fisha (village-fish)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype villa-fishb (village-fish)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype cyclegen (structure)
;   ((output float  :offset-assert 0)
;    (inc    float  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; village-obs-VI1
; (deftype hutlamp (process-drawable)
;   ((~Tpivot basic            :offset-assert 176)
;    (~Tclock cyclegen :inline :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village-obs-VI1
; (deftype revcycleprop (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village-obs-VI1
; (deftype revcycle (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village-obs-VI1
; (deftype villagea-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; fishermans-boat
; (deftype boat-stabilizer (structure)
;   ((local-pos vector :inline :offset-assert 0)
;    (normal    vector :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; fishermans-boat
; (deftype vehicle-path (structure)
;   ((point-array UNKNOWN 10 :offset-assert 0)
;    (point-count int32      :offset-assert 160)
;    )
;   :method-count-assert 14
;   :size-assert         #xa4
;   :flag-assert         #xe000000a4
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; fishermans-boat
; (deftype vehicle-controller (structure)
;   ((path                   vehicle-path         :offset-assert 0)
;    (turning-radius-table   uint32               :offset-assert 4)
;    (throttle-control-table uint32               :offset-assert 8)
;    (table-step             float                :offset-assert 12)
;    (table-length           int32                :offset-assert 16)
;    (circle-radius          float                :offset-assert 20)
;    (throttle               float                :offset-assert 24)
;    (steering               float                :offset-assert 28)
;    (path-dest-index        int8                 :offset-assert 32)
;    (left-circle            int8                 :offset-assert 33)
;    (path-dest-point        vector       :inline :offset-assert 48)
;    (path-dest-velocity     vector       :inline :offset-assert 64)
;    (dest-circle            vector       :inline :offset-assert 80)
;    (target-point           vector       :inline :offset-assert 96)
;    (sample-dir             vector       :inline :offset-assert 112)
;    (sample-time            uint64               :offset-assert 128)
;    (sample-index           int32                :offset-assert 136)
;    )
;   :method-count-assert 17
;   :size-assert         #x8c
;   :flag-assert         #x110000008c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     )
;   )

; ;; fishermans-boat
; (deftype fishermans-boat (rigid-body-platform)
;   ((~Tstabilizer-array        UNKNOWN            2       :offset-assert 736)
;    (~Tengine-thrust-local-pos vector             :inline :offset-assert 800)
;    (~Tignition                basic                      :offset-assert 816)
;    (~Tengine-thrust           float                      :offset-assert 820)
;    (~Tpropeller               basic                      :offset-assert 824)
;    (~Tdock-point              vector             :inline :offset-assert 832)
;    (~Tdest-dir                vector             :inline :offset-assert 848)
;    (~Tdock-point-index        int8                       :offset-assert 864)
;    (~Tauto-pilot              basic                      :offset-assert 868)
;    (~Tanchored                basic                      :offset-assert 872)
;    (~Twaiting-for-player      basic                      :offset-assert 876)
;    (~Tplayer-riding           basic                      :offset-assert 880)
;    (~Tboat-path               vehicle-path       :inline :offset-assert 896)
;    (~Tcam-tracker             uint64                     :offset-assert 1064)
;    (~Tplayer-attack-id        int32                      :offset-assert 696)
;    (~Tkill-player             basic                      :offset-assert 1076)
;    (~Tengine-sound-id         uint32                     :offset-assert 1080)
;    (~Tengine-sound-envelope   float                      :offset-assert 1084)
;    (~Tdebug-draw              basic                      :offset-assert 1088)
;    (~Tdebug-path-record       basic                      :offset-assert 1092)
;    (~Tdebug-path-playback     basic                      :offset-assert 1096)
;    (~Tmeasure-parameters      basic                      :offset-assert 1100)
;    (~Tcontroller              vehicle-controller :inline :offset-assert 1104)
;    (~Tanim                    basic                      :offset-assert 1244)
;    (~Told-target-pos          transformq         :inline :offset-assert 1248)
;    (~Tevilbro                 uint64                     :offset-assert 1296)
;    (~Tevilsis                 uint64                     :offset-assert 1304)
;    )
;   :method-count-assert 35
;   :size-assert         #x520
;   :flag-assert         #x2304b00520
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; village1-part
; (deftype villagea-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; sequence-a-village1
; (deftype sequenceA-village1 (process-taskable)
;   ((~Tboat uint64  :offset-assert 384)
;    (~Tside uint64  :offset-assert 392)
;    )
;   :method-count-assert 53
;   :size-assert         #x190
;   :flag-assert         #x3501200190
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; training-obs
; (deftype training-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; training-obs
; (deftype training-cam (process)
;   ((~Troot       basic   :offset-assert 112)
;    (~Trange      meters  :offset-assert 116)
;    (~Tindex      int32   :offset-assert 120)
;    (~Tstate-time uint64  :offset-assert 128)
;    )
;   :method-count-assert 15
;   :size-assert         #x88
;   :flag-assert         #xf00200088
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; training-obs
; (deftype tra-pontoon (rigid-body-platform)
;   ((~Tanchor-point vector :inline :offset-assert 736)
;    )
;   :method-count-assert 35
;   :size-assert         #x2f0
;   :flag-assert         #x23028002f0
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; training-obs
; (deftype tra-iris-door (eco-door)
;   ()
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; training-obs
; (deftype scarecrow-a (process-drawable)
;   ((~Tincomming-attack-id uint64         :offset-assert 176)
;    (~Tintersection        vector :inline :offset-assert 192)
;    )
;   :method-count-assert 22
;   :size-assert         #xd0
;   :flag-assert         #x16006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; training-obs
; (deftype scarecrow-b (process-drawable)
;   ((~Tincomming-attack-id uint64         :offset-assert 176)
;    (~Tintersection        vector :inline :offset-assert 192)
;    )
;   :method-count-assert 22
;   :size-assert         #xd0
;   :flag-assert         #x16006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; training-part
; (deftype training-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; misty-obs
; (deftype boatpaddle (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-obs
; (deftype windturbine (process-drawable)
;   ((~Tspawn-particle-enable basic  :offset-assert 176)
;    (~Tangle-speed           float  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-obs
; (deftype mis-bone-bridge (process-drawable)
;   ((~Tparticle-group   basic  :offset-assert 176)
;    (~Tplayer-attack-id int32  :offset-assert 180)
;    (~Tfall-anim-index  int32  :offset-assert 184)
;    (~Thit-points       int8   :offset-assert 188)
;    )
;   :method-count-assert 20
;   :size-assert         #xbd
;   :flag-assert         #x14005000bd
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-obs
; (deftype breakaway (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; misty-obs
; (deftype breakaway-right (breakaway)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; misty-obs
; (deftype breakaway-mid (breakaway)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; misty-obs
; (deftype breakaway-left (breakaway)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; misty-obs
; (deftype bone-platform (rigid-body-platform)
;   ((~Tanchor-point vector :inline :offset-assert 736)
;    )
;   :method-count-assert 35
;   :size-assert         #x2f0
;   :flag-assert         #x23028002f0
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; misty-obs
; (deftype mistycam (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; misty-obs
; (deftype misty-battlecontroller (battlecontroller)
;   ()
;   :method-count-assert 29
;   :size-assert         #x27c
;   :flag-assert         #x1d0210027c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; misty-obs
; (deftype boat-fuelcell (process-drawable)
;   ((~Tplay-cutscene? basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-warehouse
; (deftype silostep (process-drawable)
;   ((~Tanim-limit  float   :offset-assert 176)
;    (~Tcam-tracker uint64  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xc0
;   :flag-assert         #x14005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-warehouse
; (deftype rounddoor (eco-door)
;   ()
;   :method-count-assert 27
;   :size-assert         #x104
;   :flag-assert         #x1b00a00104
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; misty-conveyor
; (deftype keg-conveyor (process-drawable)
;   ((~Tpivot basic              :offset-assert 176)
;    (~Tquat  quaternion :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-conveyor
; (deftype keg-conveyor-paddle (process-drawable)
;   ((~Tobject-on-paddle uint32            :offset-assert 176)
;    (~Tsync             sync-info :inline :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-conveyor
; (deftype keg (process-drawable)
;   ((~Tsync-offset         float                 :offset-assert 176)
;    (~Tkeg-behavior        int8                  :offset-assert 180)
;    (~Tpath-position       vector        :inline :offset-assert 192)
;    (~Tshadow-enable-plane vector        :inline :offset-assert 208)
;    (~Tsmush               smush-control :inline :offset-assert 224)
;    (~Tsound-id            uint32                :offset-assert 256)
;    )
;   :method-count-assert 20
;   :size-assert         #x104
;   :flag-assert         #x1400a00104
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; mud
; (deftype mud (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; muse
; (deftype muse (nav-enemy)
;   ((~Tcurrent-path-index float              :offset-assert 400)
;    (~Tprev-path-index    float              :offset-assert 404)
;    (~Tdest-path-index    float              :offset-assert 408)
;    (~Tplayer-path-index  float              :offset-assert 412)
;    (~Tmax-path-index     float              :offset-assert 416)
;    (~Tsprint-distance    float              :offset-assert 420)
;    (~Tdest-point         vector     :inline :offset-assert 432)
;    (~Tanim               basic              :offset-assert 448)
;    (~Tvictory-anim       basic              :offset-assert 452)
;    (~Told-target-pos     transformq :inline :offset-assert 464)
;    )
;   :method-count-assert 76
;   :size-assert         #x200
;   :flag-assert         #x4c01900200
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; muse
; (deftype point-on-path-segment-info (structure)
;   ((point               vector  :inline :offset-assert 0)
;    (segment             UNKNOWN 2       :offset-assert 16)
;    (dir                 vector  :inline :offset-assert 48)
;    (nearest-point       vector  :inline :offset-assert 64)
;    (segment-length      float           :offset-assert 80)
;    (distance-to-segment float           :offset-assert 84)
;    (parametric-index    float           :offset-assert 88)
;    )
;   :method-count-assert 9
;   :size-assert         #x5c
;   :flag-assert         #x90000005c
;   )

; ;; bonelurker
; (deftype bonelurker (nav-enemy)
;   ((~Tbump-player-time uint64  :offset-assert 400)
;    )
;   :method-count-assert 76
;   :size-assert         #x198
;   :flag-assert         #x4c01300198
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; quicksandlurker
; (deftype quicksandlurker-missile (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; quicksandlurker
; (deftype quicksandlurker-missile-init-data (structure)
;   ((position vector  :offset-assert 0)
;    (velocity vector  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; quicksandlurker
; (deftype quicksandlurker (process-drawable)
;   ((~Toriginal-position vector :inline :offset-assert 176)
;    (~Ty-offset          float          :offset-assert 192)
;    (~Ttheta-angle       float          :offset-assert 196)
;    (~Tradial-offset     float          :offset-assert 200)
;    (~Tbob-angle         float          :offset-assert 204)
;    (~Tmud-entity        basic          :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd4
;   :flag-assert         #x14007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; misty-teetertotter
; (deftype teetertotter (process-drawable)
;   ((~Tlaunched-player   basic  :offset-assert 176)
;    (~Tin-launch-window  basic  :offset-assert 180)
;    (~Trock-is-dangerous basic  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xbc
;   :flag-assert         #x14005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; balloonlurker
; (deftype balloonlurker-bank (basic)
;   ((buoyancy-depth-offset       meters  :offset-assert 4)
;    (player-mass                 float   :offset-assert 8)
;    (rudder-factor               float   :offset-assert 12)
;    (max-engine-thrust           float   :offset-assert 16)
;    (max-rudder-deflection-angle float   :offset-assert 20)
;    (throttle-factor             float   :offset-assert 24)
;    (throttle-distance           float   :offset-assert 28)
;    (throttle-close-distance     float   :offset-assert 32)
;    (explosion-force             float   :offset-assert 36)
;    (mine-weight                 float   :offset-assert 40)
;    )
;   :method-count-assert 9
;   :size-assert         #x2c
;   :flag-assert         #x90000002c
;   )

; ;; balloonlurker
; (deftype balloonlurker (rigid-body-platform)
;   ((~Texplosion-force-position vector  :inline :offset-assert 736)
;    (~Texplosion-force          vector  :inline :offset-assert 752)
;    (~Texplosion                basic           :offset-assert 768)
;    (~Texplosion-joint-index    UNKNOWN 2       :offset-assert 772)
;    (~Tvulnerable               basic           :offset-assert 776)
;    (~Twater-y                  float           :offset-assert 780)
;    (~Tpropeller                basic           :offset-assert 784)
;    (~Trudder                   basic           :offset-assert 788)
;    (~Tmine                     UNKNOWN 2       :offset-assert 792)
;    (~Tbuoyancy-factor          float           :offset-assert 800)
;    (~Trudder-control           float           :offset-assert 804)
;    (~Tthrottle-control         float           :offset-assert 808)
;    (~Tengine-thrust            float           :offset-assert 812)
;    (~Tdest-point               vector  :inline :offset-assert 816)
;    (~Tdest-point-old           vector  :inline :offset-assert 832)
;    (~Tdest-index               int8            :offset-assert 848)
;    (~Tauto-pilot               basic           :offset-assert 852)
;    (~Tdead                     basic           :offset-assert 856)
;    (~Tanim-frame               float           :offset-assert 860)
;    (~Tengine-sound-id          uint32          :offset-assert 864)
;    (~Tpedal-sound-id           uint32          :offset-assert 868)
;    (~Tframe-count              int8            :offset-assert 872)
;    )
;   :method-count-assert 35
;   :size-assert         #x369
;   :flag-assert         #x2303000369
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; balloonlurker
; (deftype balloonlurker-pilot (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; misty-part
; (deftype misty-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; sidekick-human
; (deftype sequenceA (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; sidekick-human
; (deftype sequenceB (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-taskable) parent was UNKNOWN
;   )

; ;; sidekick-human
; (deftype sequenceC (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-taskable) parent was UNKNOWN
;   )

; ;; sidekick-human
; (deftype army-info (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; firecanyon-part
; (deftype firecanyon-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; assistant-firecanyon
; (deftype assistant-firecanyon (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; village2-part
; (deftype villageb-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; village2-obs
; (deftype village2cam (pov-camera)
;   ((~Tseq uint64  :offset-assert 224)
;    )
;   :method-count-assert 30
;   :size-assert         #xe8
;   :flag-assert         #x1e008000e8
;   ;; inherited inpspect of pov-camera
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; village2-obs
; (deftype pontoon (rigid-body-platform)
;   ((~Tanchor-point vector :inline :offset-assert 736)
;    (~Ttask         uint8          :offset-assert 752)
;    (~Talt-task     uint8          :offset-assert 753)
;    )
;   :method-count-assert 35
;   :size-assert         #x2f2
;   :flag-assert         #x23029002f2
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; village2-obs
; (deftype pontoonfive (pontoon)
;   ()
;   :method-count-assert 35
;   :size-assert         #x2f2
;   :flag-assert         #x23029002f2
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; village2-obs
; (deftype pontoonten (pontoon)
;   ()
;   :method-count-assert 35
;   :size-assert         #x2f2
;   :flag-assert         #x23029002f2
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; village2-obs
; (deftype allpontoons (process-drawable)
;   ((~Ttask uint8  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb1
;   :flag-assert         #x14005000b1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village2-obs
; (deftype fireboulder (process-drawable)
;   ((~Ttracker uint64  :offset-assert 176)
;    (~Ttask    uint8   :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xb9
;   :flag-assert         #x14005000b9
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village2-obs
; (deftype ceilingflag (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village2-obs
; (deftype exit-chamber-dummy (process-drawable)
;   ((~Torig-trans   vector :inline :offset-assert 176)
;    (~Tfcell-handle uint64         :offset-assert 192)
;    )
;   :method-count-assert 21
;   :size-assert         #xc8
;   :flag-assert         #x15006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village2-obs
; (deftype ogreboss-village2 (process-drawable)
;   ((~Tboulder uint64  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village2-obs
; (deftype villageb-ogreboss (ogreboss-village2)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; village2-obs
; (deftype villageb-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; gambler
; (deftype gambler (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; warrior
; (deftype warrior (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; geologist
; (deftype geologist (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-blimp-bank (basic)
;   ((arm-index                 int32  :offset-assert 4)
;    (pause-before-dropping-arm int32  :offset-assert 8)
;    (rise-per-break            float  :offset-assert 12)
;    (arm-sink-wait             float  :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; swamp-blimp
; (deftype tetherrock-info (structure)
;   ((rock-camera       basic  :offset-assert 0)
;    (arm-camera        basic  :offset-assert 4)
;    (blimp-rp          int32  :offset-assert 8)
;    (other-rp          int32  :offset-assert 12)
;    (connected-to-rock basic  :offset-assert 16)
;    (damping           float  :offset-assert 20)
;    )
;   :method-count-assert 9
;   :size-assert         #x18
;   :flag-assert         #x900000018
;   )

; ;; swamp-blimp
; (deftype swamp-rope-rand-float (structure)
;   ((min-time int32  :offset-assert 0)
;    (max-time int32  :offset-assert 4)
;    (max-val  float  :offset-assert 8)
;    (timer    int32  :offset-assert 12)
;    (value    float  :offset-assert 16)
;    )
;   :method-count-assert 11
;   :size-assert         #x14
;   :flag-assert         #xb00000014
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-rope-oscillator (structure)
;   ((target  float  :offset-assert 0)
;    (value   float  :offset-assert 4)
;    (vel     float  :offset-assert 8)
;    (accel   float  :offset-assert 12)
;    (max-vel float  :offset-assert 16)
;    (damping float  :offset-assert 20)
;    )
;   :method-count-assert 11
;   :size-assert         #x18
;   :flag-assert         #xb00000018
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-blimp-rand-vector (structure)
;   ((min-time int32          :offset-assert 0)
;    (max-time int32          :offset-assert 4)
;    (xz-max   float          :offset-assert 8)
;    (y-max    float          :offset-assert 12)
;    (timer    int32          :offset-assert 16)
;    (value    vector :inline :offset-assert 32)
;    )
;   :method-count-assert 11
;   :size-assert         #x30
;   :flag-assert         #xb00000030
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-blimp-oscillator (structure)
;   ((target  vector :inline :offset-assert 0)
;    (value   vector :inline :offset-assert 16)
;    (vel     vector :inline :offset-assert 32)
;    (accel   float          :offset-assert 48)
;    (max-vel float          :offset-assert 52)
;    (damping float          :offset-assert 56)
;    )
;   :method-count-assert 11
;   :size-assert         #x3c
;   :flag-assert         #xb0000003c
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-tetherrock (process-drawable)
;   ((~Ttension     float              :offset-assert 176)
;    (~Ttension-pt  vector     :inline :offset-assert 192)
;    (~Tblimp       basic              :offset-assert 208)
;    (~Trot-at-init quaternion :inline :offset-assert 224)
;    (~Thits        int32              :offset-assert 240)
;    )
;   :method-count-assert 20
;   :size-assert         #xf4
;   :flag-assert         #x14009000f4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-blimp
; (deftype precursor-arm (process-drawable)
;   ((~Ty-init    float          :offset-assert 176)
;    (~Ty-offset  float          :offset-assert 180)
;    (~Trot-speed float          :offset-assert 184)
;    (~Trot-dist  float          :offset-assert 188)
;    (~Trot-base  float          :offset-assert 192)
;    (~Trot-t     float          :offset-assert 196)
;    (~Tinit-mat  matrix :inline :offset-assert 208)
;    (~Ttension   float          :offset-assert 272)
;    )
;   :method-count-assert 20
;   :size-assert         #x114
;   :flag-assert         #x1400b00114
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-rope (process-drawable)
;   ((~Tparent-rp    int32                         :offset-assert 176)
;    (~Tother-entity basic                         :offset-assert 180)
;    (~Tother-rp     int32                         :offset-assert 184)
;    (~Told-scale    float                         :offset-assert 188)
;    (~Tframe        swamp-rope-oscillator :inline :offset-assert 192)
;    (~Tother-pos    vector                :inline :offset-assert 224)
;    (~Tscale-base   float                         :offset-assert 240)
;    (~Tbase-vec     vector                :inline :offset-assert 256)
;    (~Tscale-t      float                         :offset-assert 272)
;    (~Tx-t          float                         :offset-assert 276)
;    (~Tz-t          float                         :offset-assert 280)
;    (~Trot-speed    float                         :offset-assert 284)
;    )
;   :method-count-assert 21
;   :size-assert         #x120
;   :flag-assert         #x1500b00120
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; swamp-blimp
; (deftype swamp-blimp (process-drawable)
;   ((~Tthe-ropes               UNKNOWN                 5       :offset-assert 176)
;    (~Tarm-timer               int32                           :offset-assert 216)
;    (~Ttrans-at-init           vector                  :inline :offset-assert 224)
;    (~Trot-at-init             quaternion              :inline :offset-assert 240)
;    (~Ty-vel                   float                           :offset-assert 256)
;    (~Ty-offset                float                           :offset-assert 260)
;    (~Ty-offset-target         float                           :offset-assert 264)
;    (~Tmain-tilt-rand          swamp-blimp-rand-vector :inline :offset-assert 272)
;    (~Tmain-tilt-oscillator    swamp-blimp-oscillator  :inline :offset-assert 320)
;    (~Tgondola-tilt-oscillator swamp-blimp-oscillator  :inline :offset-assert 384)
;    (~Tpos-rand                swamp-blimp-rand-vector :inline :offset-assert 448)
;    (~Tpos-oscillator          swamp-blimp-oscillator  :inline :offset-assert 496)
;    (~Tscale-rand              swamp-rope-rand-float   :inline :offset-assert 556)
;    (~Tscale-oscillator        swamp-rope-oscillator   :inline :offset-assert 576)
;    (~Tgondola                 basic                           :offset-assert 600)
;    (~Tbag                     basic                           :offset-assert 604)
;    )
;   :method-count-assert 20
;   :size-assert         #x260
;   :flag-assert         #x1401f00260
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; sage-bluehut
; (deftype assistant-bluehut (process-taskable)
;   ((~Tsound-id   uint32  :offset-assert 380)
;    (~Tjaws       uint64  :offset-assert 384)
;    (~Tsage       basic   :offset-assert 392)
;    (~Tim-talking basic   :offset-assert 396)
;    )
;   :method-count-assert 53
;   :size-assert         #x190
;   :flag-assert         #x3501200190
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sage-bluehut
; (deftype sage-bluehut (process-taskable)
;   ((~Treminder-played basic  :offset-assert 380)
;    (~Tassistant       basic  :offset-assert 384)
;    )
;   :method-count-assert 53
;   :size-assert         #x184
;   :flag-assert         #x3501200184
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; flutflut-bluehut
; (deftype flutflut-bluehut (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; assistant-village2
; (deftype assistant-levitator (process-taskable)
;   ((~Tboulder  basic     :offset-assert 380)
;    (~Tparticle UNKNOWN 4 :offset-assert 384)
;    )
;   :method-count-assert 53
;   :size-assert         #x190
;   :flag-assert         #x3501200190
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sunken-elevator
; (deftype sunken-elevator (plat-button)
;   ((~Tplay-at-top-going-up-camera? basic  :offset-assert 240)
;    (~Tteleport-if-below-y          float  :offset-assert 244)
;    (~Tteleport-if-above-y          float  :offset-assert 248)
;    )
;   :method-count-assert 33
;   :size-assert         #xfc
;   :flag-assert         #x21009000fc
;   ;; inherited inpspect of plat-button
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; swamp-obs
; (deftype swamp-spike (process-drawable)
;   ((~Tsync      sync-info :inline :offset-assert 176)
;    (~Topen-gate basic             :offset-assert 184)
;    (~Tdangerous basic             :offset-assert 188)
;    )
;   :method-count-assert 21
;   :size-assert         #xc0
;   :flag-assert         #x15005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; swamp-obs
; (deftype swampgate (swamp-spike)
;   ()
;   :method-count-assert 21
;   :size-assert         #xc0
;   :flag-assert         #x15005000c0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; swamp-obs
; (deftype balance-plat (process-drawable)
;   ((~Ty-travel float  :offset-assert 176)
;    (~Ty-init   float  :offset-assert 180)
;    (~Ty-offset float  :offset-assert 184)
;    (~Ty-vel    float  :offset-assert 188)
;    (~Ty-accel  float  :offset-assert 192)
;    (~Tgot-grow basic  :offset-assert 196)
;    )
;   :method-count-assert 20
;   :size-assert         #xc8
;   :flag-assert         #x14006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-obs
; (deftype swamp-rock (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-obs
; (deftype tar-plat (rigid-body-platform)
;   ((~Tanchor-point vector :inline :offset-assert 736)
;    (~Tfloat-height float          :offset-assert 752)
;    )
;   :method-count-assert 35
;   :size-assert         #x2f4
;   :flag-assert         #x23029002f4
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; swamp-obs
; (deftype swamp-barrel (barrel)
;   ()
;   :method-count-assert 30
;   :size-assert         #x100
;   :flag-assert         #x1e00900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; swamp-obs
; (deftype swampcam (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; swamp-obs
; (deftype swamp-battlecontroller (battlecontroller)
;   ()
;   :method-count-assert 29
;   :size-assert         #x27c
;   :flag-assert         #x1d0210027c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; swamp-bat
; (deftype swamp-bat-idle-path (structure)
;   ((origin vector :inline :offset-assert 0)
;    (x-axis vector :inline :offset-assert 16)
;    (y-axis vector :inline :offset-assert 32)
;    )
;   :method-count-assert 10
;   :size-assert         #x30
;   :flag-assert         #xa00000030
;   (:methods
;     (dummy-9 () none 9)
;     )
;   )

; ;; swamp-bat
; (deftype swamp-bat (process-drawable)
;   ((~Tpath-origin         vector  :inline :offset-assert 176)
;    (~Tidle-position-angle UNKNOWN 8       :offset-assert 192)
;    (~Tpath-select-plane   UNKNOWN 2       :offset-assert 224)
;    (~Tpath-list           UNKNOWN 2       :offset-assert 256)
;    (~Tpath-select         int8            :offset-assert 264)
;    (~Tslave-count         int8            :offset-assert 265)
;    (~Tpath-count          int8            :offset-assert 266)
;    )
;   :method-count-assert 20
;   :size-assert         #x10b
;   :flag-assert         #x1400a0010b
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-bat
; (deftype swamp-bat-slave (process-drawable)
;   ((~Tsync                sync-info           :inline :offset-assert 176)
;    (~Tidle-anim-speed     float                       :offset-assert 184)
;    (~Tstrafe-envelope     float                       :offset-assert 188)
;    (~Tstrafe-distance     float                       :offset-assert 192)
;    (~Tpath-point-count    float                       :offset-assert 196)
;    (~Tidle-path           swamp-bat-idle-path :inline :offset-assert 208)
;    (~Tidle-position       vector              :inline :offset-assert 256)
;    (~Tidle-position-index int8                        :offset-assert 272)
;    (~Tpath-select         int8                        :offset-assert 273)
;    (~Tlaunch-ready        basic                       :offset-assert 276)
;    )
;   :method-count-assert 21
;   :size-assert         #x118
;   :flag-assert         #x1500b00118
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; swamp-rat
; (deftype swamp-rat (nav-enemy)
;   ((~Tup-vector          vector :inline :offset-assert 400)
;    (~Tstate-float        float          :offset-assert 416)
;    (~Tstate-vector       vector :inline :offset-assert 432)
;    (~Tfree-time          uint64         :offset-assert 360)
;    (~Twiggle-time        uint64         :offset-assert 456)
;    (~Twiggle-angle       float          :offset-assert 464)
;    (~Tdelta-wiggle-angle float          :offset-assert 468)
;    (~Twiggle-factor      float          :offset-assert 472)
;    (~Tmin-height         float          :offset-assert 476)
;    (~Tchase-rest-time    uint64         :offset-assert 480)
;    (~Ttarget-nav-time    uint64         :offset-assert 488)
;    )
;   :method-count-assert 76
;   :size-assert         #x1f0
;   :flag-assert         #x4c018001f0
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; swamp-rat-nest
; (deftype swamp-rat-nest (process-drawable)
;   ((~Tdummy               uint32  :offset-assert 176)
;    (~Tdamaged             basic   :offset-assert 180)
;    (~Tdummy-type          int8    :offset-assert 184)
;    (~Trat-count           int8    :offset-assert 185)
;    (~Thit-points          int8    :offset-assert 186)
;    (~Tdefensive-rat-count int8    :offset-assert 187)
;    (~Tspawn-period        float   :offset-assert 188)
;    (~Tspawn-period-scale  float   :offset-assert 192)
;    (~Ttest-interval       uint64  :offset-assert 200)
;    (~Tplayer-attack-id    int32   :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd4
;   :flag-assert         #x14007000d4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; swamp-rat-nest
; (deftype swamp-rat-nest-dummy (process-drawable)
;   ((~Ttop-sphere           sphere  :inline :offset-assert 176)
;    (~Tdeath-part           basic           :offset-assert 192)
;    (~Tspawn-joint-array    UNKNOWN 6       :offset-assert 196)
;    (~Tspawn-joint-count    int8            :offset-assert 202)
;    (~Tparticle-spawn-joint int8            :offset-assert 203)
;    )
;   :method-count-assert 22
;   :size-assert         #xcc
;   :flag-assert         #x16006000cc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; swamp-rat-nest
; (deftype swamp-rat-nest-dummy-a (swamp-rat-nest-dummy)
;   ()
;   :method-count-assert 22
;   :size-assert         #xcc
;   :flag-assert         #x16006000cc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; swamp-rat-nest
; (deftype swamp-rat-nest-dummy-b (swamp-rat-nest-dummy)
;   ()
;   :method-count-assert 22
;   :size-assert         #xcc
;   :flag-assert         #x16006000cc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; swamp-rat-nest
; (deftype swamp-rat-nest-dummy-c (swamp-rat-nest-dummy)
;   ()
;   :method-count-assert 22
;   :size-assert         #xcc
;   :flag-assert         #x16006000cc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; kermit
; (deftype joint-mod-tracker (basic)
;   ((target-pos               vector :inline :offset-assert 16)
;    (target-pos-func          basic          :offset-assert 32)
;    (inv-forward-scale-factor float          :offset-assert 36)
;    (forward-scale-control    float          :offset-assert 40)
;    (forward-scale-max        float          :offset-assert 44)
;    (process                  basic          :offset-assert 48)
;    (enable                   basic          :offset-assert 52)
;    (up-axis                  int8           :offset-assert 56)
;    (forward-axis             int8           :offset-assert 57)
;    )
;   :method-count-assert 9
;   :size-assert         #x3a
;   :flag-assert         #x90000003a
;   )

; ;; kermit
; (deftype kermit-pulse (process-drawable)
;   ((~Tsound-id uint32  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; kermit
; (deftype kermit (nav-enemy)
;   ((~Trotate-dir       vector :inline :offset-assert 400)
;    (~Tcharging-part    basic          :offset-assert 416)
;    (~Tairborne         basic          :offset-assert 420)
;    (~Ttongue-control   basic          :offset-assert 424)
;    (~Ttongue-pulse-pos float          :offset-assert 428)
;    (~Tmiss-count       int8           :offset-assert 432)
;    (~Tcharged-up       basic          :offset-assert 436)
;    (~Tsound-id         uint32         :offset-assert 440)
;    )
;   :method-count-assert 76
;   :size-assert         #x1bc
;   :flag-assert         #x4c015001bc
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; swamp-part
; (deftype swamp-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; billy
; (deftype billy (process-taskable)
;   ((~Tfarthy            uint64    :offset-assert 384)
;    (~Tpath-data         UNKNOWN 3 :offset-assert 392)
;    (~Tpath-snacks       basic     :offset-assert 392)
;    (~Tpath-starts       basic     :offset-assert 396)
;    (~Tpath-waypts       basic     :offset-assert 400)
;    (~Tpassed-last-stage basic     :offset-assert 404)
;    (~Tspawn-rats        basic     :offset-assert 408)
;    (~Tcurrent-wave      int32     :offset-assert 412)
;    (~Twave-start-time   uint64    :offset-assert 416)
;    (~Tnum-snacks        int32     :offset-assert 424)
;    (~Tnum-rats          int32     :offset-assert 428)
;    (~Tmax-rats          int32     :offset-assert 432)
;    (~Trat-speed         float     :offset-assert 436)
;    (~Toffending-rat     uint64    :offset-assert 440)
;    )
;   :method-count-assert 53
;   :size-assert         #x1c0
;   :flag-assert         #x35015001c0
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; billy
; (deftype billy-snack (process-drawable)
;   ((~Tnum-rats int32  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; billy
; (deftype billy-rat (swamp-rat)
;   ((~Tdest-type   uint64         :offset-assert 496)
;    (~Tsnack       uint64         :offset-assert 504)
;    (~Tdestination vector :inline :offset-assert 512)
;    (~Tbilly       uint32         :offset-assert 528)
;    )
;   :method-count-assert 76
;   :size-assert         #x214
;   :flag-assert         #x4c01b00214
;   ;; inherited inpspect of swamp-rat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; cavecrystal-light
; (deftype cavecrystal-light (structure)
;   ((next           cavecrystal-light         :offset-assert 0)
;    (crystal-id     int32                     :offset-assert 4)
;    (intensity      float                     :offset-assert 8)
;    (fade-start     float                     :offset-assert 12)
;    (fade-end       float                     :offset-assert 16)
;    (crystal-handle uint64                    :offset-assert 24)
;    (trans          vector            :inline :offset-assert 32)
;    )
;   :method-count-assert 9
;   :size-assert         #x30
;   :flag-assert         #x900000030
;   )

; ;; cavecrystal-light
; (deftype cavecrystal-light-control (basic)
;   ((active-count          int32               :offset-assert 4)
;    (head                  cavecrystal-light   :offset-assert 8)
;    (last-known-valid-time uint64              :offset-assert 16)
;    (crystal               UNKNOWN           7 :offset-assert 32)
;    )
;   :method-count-assert 15
;   :size-assert         #x170
;   :flag-assert         #xf00000170
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; maincave-obs
; (deftype maincavecam (pov-camera)
;   ((~Tseq uint64  :offset-assert 224)
;    )
;   :method-count-assert 30
;   :size-assert         #xe8
;   :flag-assert         #x1e008000e8
;   ;; inherited inpspect of pov-camera
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; maincave-obs
; (deftype cave-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; maincave-obs
; (deftype cavecrusher (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; maincave-obs
; (deftype cavetrapdoor (process-drawable)
;   ((~Tdelay-before-wiggle int32  :offset-assert 176)
;    )
;   :method-count-assert 22
;   :size-assert         #xb4
;   :flag-assert         #x16005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; maincave-obs
; (deftype caveflamepots (process-drawable)
;   ((~Tshove-up           float     :offset-assert 176)
;    (~Tcycle-speed        int32     :offset-assert 180)
;    (~Tcycle-pause        int32     :offset-assert 184)
;    (~Tcycle-offset       uint32    :offset-assert 188)
;    (~Twas-deadly?        basic     :offset-assert 192)
;    (~Tshould-play-sound? basic     :offset-assert 196)
;    (~Tlaunch-pos         UNKNOWN 2 :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xf0
;   :flag-assert         #x14008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; maincave-obs
; (deftype cavespatula (process-drawable)
;   ((~Tsync sync-info :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; maincave-obs
; (deftype cavespatulatwo (process-drawable)
;   ((~Tsync sync-info :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; maincave-obs
; (deftype caveelevator (process-drawable)
;   ((~Telev-mode               uint64                :offset-assert 176)
;    (~Telev-type               int32                 :offset-assert 184)
;    (~Tprev-frame-num          float                 :offset-assert 188)
;    (~Tlast-update-bounce-time uint64                :offset-assert 192)
;    (~Torig-trans              vector        :inline :offset-assert 208)
;    (~Tsync                    sync-info     :inline :offset-assert 224)
;    (~Tsmush                   smush-control :inline :offset-assert 232)
;    (~Tanim                    UNKNOWN       2       :offset-assert 264)
;    (~Twheel-ry-mat            matrix        :inline :offset-assert 272)
;    )
;   :method-count-assert 22
;   :size-assert         #x150
;   :flag-assert         #x1600e00150
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; maincave-part
; (deftype maincave-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; maincave-part
; (deftype darkcave-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; spiderwebs
; (deftype spiderwebs (process-drawable)
;   ((~Tspring-height meters  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; dark-crystal
; (deftype dark-crystal (process-drawable)
;   ((~Tcrystal-num           int32          :offset-assert 176)
;    (~Tunderwater?           basic          :offset-assert 180)
;    (~Texplode-danger-radius float          :offset-assert 184)
;    (~Tlit-color-mult        vector :inline :offset-assert 192)
;    (~Tlit-color-emissive    vector :inline :offset-assert 208)
;    (~Tunlit-color-mult      vector :inline :offset-assert 224)
;    (~Tunlit-color-emissive  vector :inline :offset-assert 240)
;    )
;   :method-count-assert 22
;   :size-assert         #x100
;   :flag-assert         #x1600900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; baby-spider
; (deftype baby-spider-spawn-params (structure)
;   ((hatched?                          basic   :offset-assert 0)
;    (fast-start?                       basic   :offset-assert 4)
;    (hack-move-above-ground?           basic   :offset-assert 8)
;    (die-if-not-visible?               basic   :offset-assert 12)
;    (pickup                            int32   :offset-assert 16)
;    (pickup-amount                     int32   :offset-assert 20)
;    (event-death                       basic   :offset-assert 24)
;    (delay-before-dying-if-not-visible uint64  :offset-assert 32)
;    )
;   :method-count-assert 11
;   :size-assert         #x28
;   :flag-assert         #xb00000028
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     )
;   )

; ;; baby-spider
; (deftype baby-spider (nav-enemy)
;   ((~Tdie-if-not-visible?               basic          :offset-assert 400)
;    (~Thack-move-above-ground?           basic          :offset-assert 404)
;    (~Tstate-float                       float          :offset-assert 408)
;    (~Twiggle-angle                      float          :offset-assert 412)
;    (~Tdelta-wiggle-angle                float          :offset-assert 416)
;    (~Twiggle-factor                     float          :offset-assert 420)
;    (~Tevent-death                       basic          :offset-assert 424)
;    (~Tdelay-before-dying-if-not-visible uint64         :offset-assert 432)
;    (~Tchase-rest-time                   uint64         :offset-assert 440)
;    (~Ttarget-nav-time                   uint64         :offset-assert 448)
;    (~Tfree-time                         uint64         :offset-assert 360)
;    (~Twiggle-time                       uint64         :offset-assert 464)
;    (~Tlast-visible-time                 uint64         :offset-assert 472)
;    (~Tup-vector                         vector :inline :offset-assert 480)
;    (~Tstate-vector                      vector :inline :offset-assert 496)
;    )
;   :method-count-assert 76
;   :size-assert         #x200
;   :flag-assert         #x4c01900200
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; mother-spider-h
; (deftype mother-spider-leg (process-drawable)
;   ((~Tgravity     float          :offset-assert 176)
;    (~Ttransv      vector :inline :offset-assert 192)
;    (~Tfacing-rot  vector :inline :offset-assert 208)
;    (~Tfacing-rotv vector :inline :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xf0
;   :flag-assert         #x14008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; mother-spider-h
; (deftype mother-spider-thread (structure)
;   ((joint-index int32  :offset-assert 0)
;    (trans-u     float  :offset-assert 4)
;    (swing-arc-u float  :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; mother-spider-h
; (deftype mother-spider-leg-info (structure)
;   ((joint-index0 int32  :offset-assert 0)
;    (joint-index1 int32  :offset-assert 4)
;    (cprim-index  int32  :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; mother-spider-h
; (deftype mother-spider-history (structure)
;   ((trans vector :inline :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; mother-spider-h
; (deftype mother-spider-history-array (inline-array-class)
;   ((length           int32            :offset-assert 4)
;    (allocated-length int32            :offset-assert 8)
;    (data             UNKNOWN :dynamic :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; mother-spider-h
; (deftype mother-spider (process-drawable)
;   ((~Tmode                           uint64          :offset-assert 176)
;    (~Tdamage                         int32           :offset-assert 184)
;    (~Tbaby-count                     int32           :offset-assert 188)
;    (~Tmax-baby-count                 int32           :offset-assert 192)
;    (~Tbirthing-counter               int32           :offset-assert 196)
;    (~Tspit-counter                   int32           :offset-assert 200)
;    (~Tleg-socket-part-mask           int32           :offset-assert 204)
;    (~Tdist-from-anchor               float           :offset-assert 208)
;    (~Ttarg-dist-from-anchor          float           :offset-assert 212)
;    (~Tidle-dist-from-anchor          float           :offset-assert 216)
;    (~Tplayer-sticky-dist-from-anchor float           :offset-assert 220)
;    (~Tmax-dist-from-anchor           float           :offset-assert 224)
;    (~Tactivate-xz-dist               float           :offset-assert 228)
;    (~Tdeactivate-xz-dist             float           :offset-assert 232)
;    (~Tmax-spit-xz-dist               float           :offset-assert 236)
;    (~Tmax-swing-radius               float           :offset-assert 240)
;    (~Tspin-vel                       float           :offset-assert 244)
;    (~Tthread-speed                   float           :offset-assert 248)
;    (~Tthread-vel                     float           :offset-assert 252)
;    (~Thistory                        basic           :offset-assert 256)
;    (~Thistory-len                    int32           :offset-assert 260)
;    (~Thistory-next-index             int32           :offset-assert 264)
;    (~Thit?                           basic           :offset-assert 268)
;    (~Tgoing-up?                      basic           :offset-assert 272)
;    (~Tcheck-z-thresh?                basic           :offset-assert 276)
;    (~Tactivate-z-thresh              float           :offset-assert 280)
;    (~Tdeactivate-z-thresh            float           :offset-assert 284)
;    (~Tspawned-time                   uint64          :offset-assert 288)
;    (~Tlast-update-time               uint64          :offset-assert 296)
;    (~Tspin-time                      uint64          :offset-assert 304)
;    (~Tlast-spit-time                 uint64          :offset-assert 312)
;    (~Tlast-player-in-air-time        uint64          :offset-assert 320)
;    (~Tstarted-birthing-time          uint64          :offset-assert 328)
;    (~Tneck                           basic           :offset-assert 336)
;    (~Tplayer-attack-id               uint64          :offset-assert 344)
;    (~Tleg-socket-part-time           UNKNOWN 6       :offset-assert 352)
;    (~Torient-rot                     vector  :inline :offset-assert 400)
;    (~Tanchor-trans                   vector  :inline :offset-assert 416)
;    (~Tthread-min-trans               vector  :inline :offset-assert 432)
;    (~Tswing-pos                      vector  :inline :offset-assert 448)
;    (~Tswing-base-pos                 vector  :inline :offset-assert 464)
;    (~Tswing-vel                      vector  :inline :offset-assert 480)
;    )
;   :method-count-assert 32
;   :size-assert         #x1f0
;   :flag-assert         #x20018001f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; mother-spider-egg
; (deftype mother-spider-egg (process-drawable)
;   ((~Tanim-speed         float              :offset-assert 176)
;    (~Tpart2              basic              :offset-assert 180)
;    (~Tfalling-start-time uint64             :offset-assert 184)
;    (~Tfall-dest          vector     :inline :offset-assert 192)
;    (~Tfall-dest-normal   vector     :inline :offset-assert 208)
;    (~Tbroken-look        lod-set    :inline :offset-assert 224)
;    (~Ttraj               trajectory :inline :offset-assert 272)
;    (~Tshadow-pos         vector     :inline :offset-assert 320)
;    )
;   :method-count-assert 22
;   :size-assert         #x150
;   :flag-assert         #x1600e00150
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; mother-spider-proj
; (deftype mother-spider-proj (projectile)
;   ((~Tfacing-dir vector :inline :offset-assert 416)
;    )
;   :method-count-assert 29
;   :size-assert         #x1b0
;   :flag-assert         #x1d014001b0
;   ;; inherited inpspect of projectile
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; gnawer
; (deftype gnawer-falling-segment (process-drawable)
;   ((~Ttransv      vector :inline :offset-assert 176)
;    (~Tfacing-rot  vector :inline :offset-assert 192)
;    (~Tfacing-rotv vector :inline :offset-assert 208)
;    )
;   :method-count-assert 21
;   :size-assert         #xe0
;   :flag-assert         #x15007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; gnawer
; (deftype gnawer-segment-info (structure)
;   ((num-joints  int32     :offset-assert 0)
;    (joint-index UNKNOWN 8 :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #xc
;   :flag-assert         #x90000000c
;   )

; ;; gnawer
; (deftype gnawer-segment (structure)
;   ((place                      int32          :offset-assert 0)
;    (world-pos                  vector :inline :offset-assert 16)
;    (anim-to-local-trans-offset vector :inline :offset-assert 32)
;    (orient-mat                 matrix :inline :offset-assert 48)
;    )
;   :method-count-assert 9
;   :size-assert         #x70
;   :flag-assert         #x900000070
;   )

; ;; gnawer
; (deftype gnawer-route (structure)
;   ((src-pt-index      int32          :offset-assert 0)
;    (dest-pt-index     int32          :offset-assert 4)
;    (total-travel-time uint64         :offset-assert 8)
;    (src-ang           float          :offset-assert 16)
;    (dest-ang          float          :offset-assert 20)
;    (delta-ang         float          :offset-assert 24)
;    (surface-dist      float          :offset-assert 28)
;    (total-dist        float          :offset-assert 32)
;    (src-pt-offset     vector :inline :offset-assert 48)
;    (dest-pt-offset    vector :inline :offset-assert 64)
;    (surface-dir       vector :inline :offset-assert 80)
;    )
;   :method-count-assert 9
;   :size-assert         #x60
;   :flag-assert         #x900000060
;   )

; ;; gnawer
; (deftype gnawer (process-drawable)
;   ((~Thit-points     int32                :offset-assert 176)
;    (~Tgnawer-id      int32                :offset-assert 180)
;    (~Ttotal-money    int32                :offset-assert 184)
;    (~Tmoney-mask     uint32               :offset-assert 188)
;    (~Teco-green-mask uint32               :offset-assert 192)
;    (~Thidden?        basic                :offset-assert 196)
;    (~Tshow-damage?   basic                :offset-assert 200)
;    (~Troute-dist     float                :offset-assert 204)
;    (~Tspeed          float                :offset-assert 208)
;    (~Tanim-speed     float                :offset-assert 212)
;    (~Tpart2          basic                :offset-assert 216)
;    (~Tsound2         basic                :offset-assert 220)
;    (~Tlast-hit-time  uint64               :offset-assert 224)
;    (~Tpost-trans     vector       :inline :offset-assert 240)
;    (~Tfall-trans     vector       :inline :offset-assert 256)
;    (~Troute          gnawer-route :inline :offset-assert 272)
;    (~Tsegments       UNKNOWN      10      :offset-assert 368)
;    )
;   :method-count-assert 31
;   :size-assert         #x5d0
;   :flag-assert         #x1f056005d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     )
;   )

; ;; driller-lurker
; (deftype driller-lurker (process-drawable)
;   ((~Thit-player?             basic   :offset-assert 176)
;    (~Tplayed-drill-sound?     basic   :offset-assert 180)
;    (~Tmode                    uint64  :offset-assert 184)
;    (~Tpath-u                  float   :offset-assert 192)
;    (~Tpath-units-per-meter    float   :offset-assert 196)
;    (~Tpath-speed              float   :offset-assert 200)
;    (~Ttarg-path-speed         float   :offset-assert 204)
;    (~Tpath-dir                float   :offset-assert 208)
;    (~Tpath-ry                 float   :offset-assert 212)
;    (~Tfacing-ry               float   :offset-assert 216)
;    (~Tdrill-rz                float   :offset-assert 220)
;    (~Tdrill-speed             float   :offset-assert 224)
;    (~Tup-blend                float   :offset-assert 228)
;    (~Tplayer-path-u           float   :offset-assert 232)
;    (~Tambient-drilling-u      float   :offset-assert 236)
;    (~Ttimeout                 int32   :offset-assert 240)
;    (~Tneck                    basic   :offset-assert 244)
;    (~Tdrill                   basic   :offset-assert 248)
;    (~Tsound2                  basic   :offset-assert 252)
;    (~Tlast-update-time        uint64  :offset-assert 256)
;    (~Tlast-player-path-u-time uint64  :offset-assert 264)
;    (~Tstarted-chasing-time    uint64  :offset-assert 272)
;    (~Thit-player-time         uint64  :offset-assert 280)
;    (~Tplayer-attack-id        uint64  :offset-assert 288)
;    )
;   :method-count-assert 28
;   :size-assert         #x128
;   :flag-assert         #x1c00c00128
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; sunken-part
; (deftype sunken-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; target-tube
; (deftype tube-info (basic)
;   ((entity          basic          :offset-assert 4)
;    (tube            uint64         :offset-assert 8)
;    (downhill        vector :inline :offset-assert 16)
;    (centertube      vector :inline :offset-assert 32)
;    (downtube        vector :inline :offset-assert 48)
;    (sidetube        vector :inline :offset-assert 64)
;    (foretube        vector :inline :offset-assert 80)
;    (old-transv      vector :inline :offset-assert 96)
;    (mod-x           float          :offset-assert 112)
;    (mod-y           float          :offset-assert 116)
;    (start-time      uint64         :offset-assert 120)
;    (turn-anim-targ  float          :offset-assert 128)
;    (turn-anim-frame float          :offset-assert 132)
;    (turn-anim-vel   float          :offset-assert 136)
;    (tube-sound-id   uint32         :offset-assert 140)
;    (tube-sound-vol  float          :offset-assert 144)
;    )
;   :method-count-assert 9
;   :size-assert         #x94
;   :flag-assert         #x900000094
;   )

; ;; target-tube
; (deftype tube-bank (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; target-tube
; (deftype slide-control (process-drawable)
;   ((~Ttarget uint64         :offset-assert 176)
;    (~Tpos    float          :offset-assert 184)
;    (~Ttrans  vector :inline :offset-assert 192)
;    (~Trot    vector :inline :offset-assert 208)
;    (~Tside   vector :inline :offset-assert 224)
;    )
;   :method-count-assert 22
;   :size-assert         #xf0
;   :flag-assert         #x16008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; sunken-obs
; (deftype water-vol-deadly (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; sunken-obs
; (deftype side-to-side-plat (plat)
;   ((~Tpart-ry float  :offset-assert 264)
;    )
;   :method-count-assert 33
;   :size-assert         #x10c
;   :flag-assert         #x2100a0010c
;   ;; inherited inpspect of plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; sunken-obs
; (deftype sunkencam (pov-camera)
;   ((~Tseq uint64  :offset-assert 224)
;    )
;   :method-count-assert 30
;   :size-assert         #xe8
;   :flag-assert         #x1e008000e8
;   ;; inherited inpspect of pov-camera
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; sunken-obs
; (deftype seaweed (process-drawable)
;   ((~Tanim-speed float  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; shover
; (deftype shover (process-drawable)
;   ((~Tshove-up float  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; square-platform
; (deftype square-platform (baseplat)
;   ((~Tplat-id           int32          :offset-assert 228)
;    (~Tpos-u             float          :offset-assert 232)
;    (~Twater-entity      basic          :offset-assert 236)
;    (~Tsplash-counter    int32          :offset-assert 240)
;    (~Tstart-splash-time uint64         :offset-assert 248)
;    (~Tpart2             basic          :offset-assert 256)
;    (~Tpart3             basic          :offset-assert 260)
;    (~Tpart4             basic          :offset-assert 264)
;    (~Tup-pos            vector :inline :offset-assert 272)
;    (~Tdown-pos          vector :inline :offset-assert 288)
;    )
;   :method-count-assert 28
;   :size-assert         #x130
;   :flag-assert         #x1c00c00130
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; square-platform
; (deftype square-platform-button (basebutton)
;   ()
;   :method-count-assert 32
;   :size-assert         #x100
;   :flag-assert         #x2000900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; square-platform
; (deftype square-platform-master (process-drawable)
;   ((~Tbutton-id                int32          :offset-assert 176)
;    (~Tplat-id                  int32          :offset-assert 180)
;    (~Tplat-mask                uint32         :offset-assert 184)
;    (~Tplat-id-dir              int32          :offset-assert 188)
;    (~Twiggled?                 basic          :offset-assert 192)
;    (~Ttimeout                  uint64         :offset-assert 200)
;    (~Tlast-plat-activated-time uint64         :offset-assert 208)
;    (~Tdelay-til-wiggle         uint64         :offset-assert 216)
;    (~Tticker                   ticky  :inline :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #x100
;   :flag-assert         #x1400900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; sun-iris-door
; (deftype sun-iris-door (process-drawable)
;   ((~Ttimeout                float              :offset-assert 176)
;    (~Tproximity?             basic              :offset-assert 180)
;    (~Tdirectional-proximity? basic              :offset-assert 184)
;    (~Tmove-to?               basic              :offset-assert 188)
;    (~Tlocked-by-task?        basic              :offset-assert 192)
;    (~Tclose-dist             float              :offset-assert 196)
;    (~Topen-dist              float              :offset-assert 200)
;    (~Tmove-to-pos            vector     :inline :offset-assert 208)
;    (~Toutward-vec            vector     :inline :offset-assert 224)
;    (~Tmove-to-quat           quaternion :inline :offset-assert 240)
;    )
;   :method-count-assert 22
;   :size-assert         #x100
;   :flag-assert         #x1600900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; orbit-plat
; (deftype orbit-plat-bottom (process-drawable)
;   ((~Tpart2 basic  :offset-assert 176)
;    )
;   :method-count-assert 21
;   :size-assert         #xb4
;   :flag-assert         #x15005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; orbit-plat
; (deftype orbit-plat (baseplat)
;   ((~Tother        basic          :offset-assert 228)
;    (~Trot-dir      float          :offset-assert 232)
;    (~Treset-trans  vector :inline :offset-assert 240)
;    (~Tis-reset?    basic          :offset-assert 256)
;    (~Treset-length float          :offset-assert 260)
;    (~Ttimeout      float          :offset-assert 264)
;    (~Tplat-status  uint64         :offset-assert 272)
;    )
;   :method-count-assert 29
;   :size-assert         #x118
;   :flag-assert         #x1d00b00118
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; wedge-plats
; (deftype wedge-plat-master (process)
;   ((~Tcenter       vector :inline :offset-assert 112)
;    (~Trotspeed     float          :offset-assert 128)
;    (~Trotate-inner float          :offset-assert 132)
;    (~Trotate-outer float          :offset-assert 136)
;    )
;   :method-count-assert 14
;   :size-assert         #x8c
;   :flag-assert         #xe0020008c
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     )
;   )

; ;; wedge-plats
; (deftype wedge-plat (baseplat)
;   ((~Tmaster   basic  :offset-assert 228)
;    (~Tdistance float  :offset-assert 232)
;    (~Toffset   float  :offset-assert 236)
;    )
;   :method-count-assert 28
;   :size-assert         #xf0
;   :flag-assert         #x1c008000f0
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; wedge-plats
; (deftype wedge-plat-outer (wedge-plat)
;   ()
;   :method-count-assert 28
;   :size-assert         #xf0
;   :flag-assert         #x1c008000f0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; wall-plat
; (deftype wall-plat (process-drawable)
;   ((~Tuse-sync?       basic                    :offset-assert 176)
;    (~Textended-amount float                    :offset-assert 180)
;    (~Tin-trans        vector           :inline :offset-assert 192)
;    (~Tout-trans       vector           :inline :offset-assert 208)
;    (~Tsync            sync-info-paused :inline :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xf0
;   :flag-assert         #x14008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; qbert-plat
; (deftype qbert-plat-on (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; qbert-plat
; (deftype qbert-plat (rigid-body-platform)
;   ((~Tanchor-point      vector :inline :offset-assert 736)
;    (~Tplat-id           int32          :offset-assert 752)
;    (~Ton?               basic          :offset-assert 756)
;    (~Tplayer-is-riding? basic          :offset-assert 760)
;    (~Tmaster            basic          :offset-assert 764)
;    )
;   :method-count-assert 35
;   :size-assert         #x300
;   :flag-assert         #x2302900300
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; qbert-plat
; (deftype qbert-plat-master (process-drawable)
;   ((~Tlast-plat-triggered             int32          :offset-assert 176)
;    (~Tplat-states                     uint32         :offset-assert 180)
;    (~Tplat-states-needed-to-open-door uint32         :offset-assert 184)
;    (~Tplayer-in-bounds?               basic          :offset-assert 188)
;    (~Tplayer-in-water?                basic          :offset-assert 192)
;    (~Tplay-door-cam?                  basic          :offset-assert 196)
;    (~Tpuzzle-beaten?                  basic          :offset-assert 200)
;    (~Tdoor                            basic          :offset-assert 204)
;    (~Tdoor-plat                       basic          :offset-assert 208)
;    (~Tbounds-start                    vector :inline :offset-assert 224)
;    (~Tbounds-end                      vector :inline :offset-assert 240)
;    )
;   :method-count-assert 21
;   :size-assert         #x100
;   :flag-assert         #x1500900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; steam-cap
; (deftype steam-cap-control-pt (structure)
;   ((trans  vector :inline :offset-assert 0)
;    (transv vector :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; steam-cap
; (deftype steam-cap (process-drawable)
;   ((~Tdo-burst?         basic             :offset-assert 176)
;    (~Tdo-falling-sound? basic             :offset-assert 180)
;    (~Tdo-landing-sound? basic             :offset-assert 184)
;    (~Tbegin-travel-up   float             :offset-assert 188)
;    (~Tbegin-travel-down float             :offset-assert 192)
;    (~Tsync              sync-info :inline :offset-assert 196)
;    (~Tpart2             basic             :offset-assert 204)
;    (~Tpart3             basic             :offset-assert 208)
;    (~Tdown              vector    :inline :offset-assert 224)
;    (~Tup                vector    :inline :offset-assert 240)
;    (~Tcontrol-pt        UNKNOWN   3       :offset-assert 256)
;    )
;   :method-count-assert 22
;   :size-assert         #x160
;   :flag-assert         #x1600f00160
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; sun-exit-chamber
; (deftype blue-eco-charger-orb (process-drawable)
;   ((~Torbit-rot       vector :inline :offset-assert 176)
;    (~Torbit-rotv      vector :inline :offset-assert 192)
;    (~Ttarg-orbit-rotv vector :inline :offset-assert 208)
;    (~Trest-pos        vector :inline :offset-assert 224)
;    )
;   :method-count-assert 21
;   :size-assert         #xf0
;   :flag-assert         #x15008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; sun-exit-chamber
; (deftype blue-eco-charger (process-drawable)
;   ((~Tcharger-id int32  :offset-assert 176)
;    (~Topen-level float  :offset-assert 180)
;    (~Tmaster     basic  :offset-assert 184)
;    )
;   :method-count-assert 22
;   :size-assert         #xbc
;   :flag-assert         #x16005000bc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; sun-exit-chamber
; (deftype exit-chamber-items (structure)
;   ((door-pos    vector     :inline :offset-assert 0)
;    (door-quat   quaternion :inline :offset-assert 16)
;    (button-pos  vector     :inline :offset-assert 32)
;    (button-quat quaternion :inline :offset-assert 48)
;    (fcell-pos   vector     :inline :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x50
;   :flag-assert         #x900000050
;   )

; ;; sun-exit-chamber
; (deftype exit-chamber (process-drawable)
;   ((~Tchargers-active         uint32         :offset-assert 176)
;    (~Tmove-player?            basic          :offset-assert 180)
;    (~Tmove-fcell?             basic          :offset-assert 184)
;    (~Tplay-assistant-message? basic          :offset-assert 188)
;    (~Twave-scale              float          :offset-assert 192)
;    (~Tbutton                  uint32         :offset-assert 196)
;    (~Tdoor                    uint32         :offset-assert 200)
;    (~Tfcell-handle            uint64         :offset-assert 208)
;    (~Torig-trans              vector :inline :offset-assert 224)
;    (~Tlast-pos                vector :inline :offset-assert 240)
;    )
;   :method-count-assert 25
;   :size-assert         #x100
;   :flag-assert         #x1900900100
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     )
;   )

; ;; sun-exit-chamber
; (deftype exit-chamber-button (basebutton)
;   ()
;   :method-count-assert 32
;   :size-assert         #x100
;   :flag-assert         #x2000900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; floating-launcher
; (deftype floating-launcher (baseplat)
;   ((~Ttrigger-height float   :offset-assert 228)
;    (~Tlauncher       uint32  :offset-assert 232)
;    )
;   :method-count-assert 27
;   :size-assert         #xec
;   :flag-assert         #x1b008000ec
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; sunken-water
; (deftype sunken-water (water-anim)
;   ((~Tuse-sync?             basic             :offset-assert 220)
;    (~Tplaying-deadly-sound? basic             :offset-assert 224)
;    (~Tdeadly-time           float             :offset-assert 228)
;    (~Tdeadly-fade           float             :offset-assert 232)
;    (~Tsync                  sync-info :inline :offset-assert 236)
;    (~Tsafe-color-mult       vector    :inline :offset-assert 256)
;    (~Tsafe-color-emissive   vector    :inline :offset-assert 272)
;    (~Tdeadly-color-mult     vector    :inline :offset-assert 288)
;    (~Tdeadly-color-emissive vector    :inline :offset-assert 304)
;    )
;   :method-count-assert 31
;   :size-assert         #x140
;   :flag-assert         #x1f00d00140
;   ;; inherited inpspect of water-anim
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     )
;   )

; ;; whirlpool
; (deftype whirlpool (process-drawable)
;   ((~Tspin-ry          float                    :offset-assert 176)
;    (~Tspin-speed-idle  float                    :offset-assert 180)
;    (~Tspin-speed-delta float                    :offset-assert 184)
;    (~Tsync             sync-info-paused :inline :offset-assert 188)
;    )
;   :method-count-assert 21
;   :size-assert         #xcc
;   :flag-assert         #x15006000cc
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; sunken-pipegame
; (deftype sunken-pipegame-button (basebutton)
;   ()
;   :method-count-assert 32
;   :size-assert         #x100
;   :flag-assert         #x2000900100
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; sunken-pipegame
; (deftype sunken-pipegame-prize (structure)
;   ((puzzle-delay            uint64         :offset-assert 0)
;    (pipe-travel-time-to-far uint64         :offset-assert 8)
;    (pipe-travel-time-to-jar uint64         :offset-assert 16)
;    (actor-handle            uint64         :offset-assert 24)
;    (jar-pos                 vector :inline :offset-assert 32)
;    (far-pos                 vector :inline :offset-assert 48)
;    (sucked-up-jar-part-pos  vector :inline :offset-assert 64)
;    (sucked-up-far-part-pos  vector :inline :offset-assert 80)
;    (blown-out-jar-part-pos  vector :inline :offset-assert 96)
;    (blown-out-far-part-pos  vector :inline :offset-assert 112)
;    (sucked-up-part          basic          :offset-assert 128)
;    (blown-out-part          basic          :offset-assert 132)
;    )
;   :method-count-assert 9
;   :size-assert         #x88
;   :flag-assert         #x900000088
;   )

; ;; sunken-pipegame
; (deftype sunken-pipegame (process-drawable)
;   ((~Tabort-audio-if-beaten? basic           :offset-assert 176)
;    (~Tchallenges-mask        uint32          :offset-assert 180)
;    (~Tchallenge              int32           :offset-assert 184)
;    (~Tticker                 ticky   :inline :offset-assert 192)
;    (~Tbutton                 UNKNOWN 3       :offset-assert 224)
;    (~Tprize                  UNKNOWN 3       :offset-assert 240)
;    )
;   :method-count-assert 23
;   :size-assert         #x2a0
;   :flag-assert         #x17023002a0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; bully
; (deftype bully-broken-cage (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; bully
; (deftype bully (process-drawable)
;   ((~Thit-player?     basic   :offset-assert 176)
;    (~Tbounced?        basic   :offset-assert 180)
;    (~Tbounce-volume   int32   :offset-assert 184)
;    (~Tfacing-ry       float   :offset-assert 188)
;    (~Ttravel-ry       float   :offset-assert 192)
;    (~Tspeed-u         float   :offset-assert 196)
;    (~Tspin-vel        float   :offset-assert 200)
;    (~Ttravel-speed    float   :offset-assert 204)
;    (~Treaction-delay  uint64  :offset-assert 208)
;    (~Tstart-spin-time uint64  :offset-assert 216)
;    (~Tslow-down       uint64  :offset-assert 224)
;    (~Thit-player-time uint64  :offset-assert 232)
;    (~Tneck            basic   :offset-assert 240)
;    )
;   :method-count-assert 21
;   :size-assert         #xf4
;   :flag-assert         #x15009000f4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; double-lurker
; (deftype double-lurker-top (nav-enemy)
;   ((~Tfall-dest vector :inline :offset-assert 400)
;    )
;   :method-count-assert 76
;   :size-assert         #x1a0
;   :flag-assert         #x4c013001a0
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; double-lurker
; (deftype double-lurker (nav-enemy)
;   ((~Tknocked-back-speed  float   :offset-assert 400)
;    (~Tbuddy-on-shoulders? basic   :offset-assert 404)
;    (~Tdead?               basic   :offset-assert 408)
;    (~Tbuddy-dead?         basic   :offset-assert 412)
;    (~Tbuddy-handle        uint64  :offset-assert 416)
;    )
;   :method-count-assert 76
;   :size-assert         #x1a8
;   :flag-assert         #x4c014001a8
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; helix-water
; (deftype helix-slide-door (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; helix-water
; (deftype helix-button (process-drawable)
;   ((~Tmy-water     basic          :offset-assert 176)
;    (~Tmy-door      basic          :offset-assert 180)
;    (~Tfcell-handle uint64         :offset-assert 184)
;    (~Tdown-y       float          :offset-assert 192)
;    (~Tspawn-trans  vector :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xe0
;   :flag-assert         #x14007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; helix-water
; (deftype helix-dark-eco (dark-eco-pool)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; helix-water
; (deftype helix-water (process-drawable)
;   ((~Tlast-alt-actor-consumed int32   :offset-assert 176)
;    (~Talt-actors              basic   :offset-assert 180)
;    (~Ttransv-y                float   :offset-assert 184)
;    (~Tstart-y                 float   :offset-assert 188)
;    (~Tend-y                   float   :offset-assert 192)
;    (~Tdark-eco                uint32  :offset-assert 196)
;    )
;   :method-count-assert 22
;   :size-assert         #xc8
;   :flag-assert         #x16006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; puffer
; (deftype puffer (process-drawable)
;   ((~Tpath-index           int32             :offset-assert 176)
;    (~Tfacing-ry            float             :offset-assert 180)
;    (~Ttravel-ry            float             :offset-assert 184)
;    (~Ttravel-speed         float             :offset-assert 188)
;    (~Tattack-bottom-y      float             :offset-assert 192)
;    (~Tpatrol-bottom-y      float             :offset-assert 196)
;    (~Ttop-y                float             :offset-assert 200)
;    (~Ttarg-trans-y         float             :offset-assert 204)
;    (~Tacc-y                float             :offset-assert 208)
;    (~Ttravel-turn-speed    float             :offset-assert 212)
;    (~Tnotice-dist          float             :offset-assert 216)
;    (~Tgive-up-dist         float             :offset-assert 220)
;    (~Tattacking?           basic             :offset-assert 224)
;    (~Thit-player?          basic             :offset-assert 228)
;    (~Tlook-mean?           basic             :offset-assert 232)
;    (~Tcprims-type          uint64            :offset-assert 240)
;    (~Tneck                 basic             :offset-assert 248)
;    (~Thit-player-time      uint64            :offset-assert 256)
;    (~Treaction-delay       uint64            :offset-assert 264)
;    (~Tpicked-point-time    uint64            :offset-assert 272)
;    (~Tpick-new-point-delay uint64            :offset-assert 280)
;    (~Tlast-on-screen-time  uint64            :offset-assert 288)
;    (~Tbuddy                basic             :offset-assert 296)
;    (~Tnice-look            lod-set   :inline :offset-assert 300)
;    (~Tmean-look            lod-set   :inline :offset-assert 336)
;    (~Tdest-pos             vector    :inline :offset-assert 384)
;    (~Tsync                 sync-info :inline :offset-assert 400)
;    )
;   :method-count-assert 32
;   :size-assert         #x198
;   :flag-assert         #x2001300198
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     )
;   )

; ;; puffer
; (deftype pick-patrol-point-away-from-buddy-work (structure)
;   ((best-path-index int32          :offset-assert 0)
;    (best-rating     float          :offset-assert 4)
;    (best-dest       vector :inline :offset-assert 16)
;    (pt-dir          vector :inline :offset-assert 32)
;    (buddy-dir       vector :inline :offset-assert 48)
;    (dest            vector :inline :offset-assert 64)
;    )
;   :method-count-assert 9
;   :size-assert         #x50
;   :flag-assert         #x900000050
;   )

; ;; sunken-fish
; (deftype sunkenfisha (process-drawable)
;   ((~Tpath-u                 float          :offset-assert 176)
;    (~Tpath-speed             float          :offset-assert 180)
;    (~Tpath-speed-seek-speed  float          :offset-assert 184)
;    (~Ttarg-path-speed        float          :offset-assert 188)
;    (~Tpath-normal-speed-lo   float          :offset-assert 192)
;    (~Tpath-normal-speed-hi   float          :offset-assert 196)
;    (~Tpath-dir               float          :offset-assert 200)
;    (~Tchange-path-dir-time   uint64         :offset-assert 208)
;    (~Tlocal-path-offset      vector :inline :offset-assert 224)
;    (~Ttarg-local-path-offset vector :inline :offset-assert 240)
;    (~Tlocal-path-offset-dir  vector :inline :offset-assert 256)
;    (~Tmax-local-path-offset  vector :inline :offset-assert 272)
;    (~Tfacing-rot             vector :inline :offset-assert 288)
;    (~Tpath-trans-offset      vector :inline :offset-assert 304)
;    )
;   :method-count-assert 28
;   :size-assert         #x140
;   :flag-assert         #x1c00d00140
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )

; ;; rolling-obs
; (deftype rolling-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; rolling-obs
; (deftype rollingcam (process-hidden)
;   ((name             basic                 :offset-assert 4)
;    (mask             uint32                :offset-assert 8)
;    (parent           uint32                :offset-assert 12)
;    (brother          uint32                :offset-assert 16)
;    (child            uint32                :offset-assert 20)
;    (ppointer         uint32                :offset-assert 24)
;    (self             basic                 :offset-assert 28)
;    (pool             basic                 :offset-assert 32)
;    (status           basic                 :offset-assert 36)
;    (pid              int32                 :offset-assert 40)
;    (main-thread      basic                 :offset-assert 44)
;    (top-thread       basic                 :offset-assert 48)
;    (entity           basic                 :offset-assert 52)
;    (state            basic                 :offset-assert 56)
;    (trans-hook       basic                 :offset-assert 60)
;    (post-hook        basic                 :offset-assert 64)
;    (event-hook       basic                 :offset-assert 68)
;    (allocated-length int32                 :offset-assert 72)
;    (next-state       basic                 :offset-assert 76)
;    (heap-base        uint32                :offset-assert 80)
;    (heap-top         uint32                :offset-assert 84)
;    (heap-cur         uint32                :offset-assert 88)
;    (stack-frame-top  basic                 :offset-assert 92)
;    (heap             kheap        :inline  :offset-assert 80)
;    (connection-list  'connectable :inline  :offset-assert 96)
;    (stack            UNKNOWN      :dynamic :offset-assert 112)
;    )
;   :method-count-assert 15
;   :size-assert         #x70
;   :flag-assert         #xf00000070
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     )
;   )

; ;; rolling-obs
; (deftype pusher-base (process-drawable)
;   ((~Tmax-frame float  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype pusher (pusher-base)
;   ((~Tsync sync-info-paused :inline :offset-assert 180)
;    (~Tcyl  cylinder         :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xf8
;   :flag-assert         #x14009000f8
;   ;; inherited inpspect of pusher-base
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype gorge-pusher (pusher-base)
;   ((~Tmin-frame float  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of pusher-base
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype dark-plant (process-drawable)
;   ((~Tnum-alts int32     :offset-assert 176)
;    (~Talts     UNKNOWN 4 :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xc4
;   :flag-assert         #x14006000c4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype happy-plant (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype race-time (structure)
;   ((digit UNKNOWN 5 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x5
;   :flag-assert         #x900000005
;   )

; ;; rolling-obs
; (deftype rolling-start (process-drawable)
;   ((~Twhole-look  lod-set :inline :offset-assert 176)
;    (~Tbroken-look lod-set :inline :offset-assert 212)
;    )
;   :method-count-assert 20
;   :size-assert         #xf5
;   :flag-assert         #x14009000f5
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype gorge (process-drawable)
;   ((~Tcoord     matrix :inline :offset-assert 176)
;    (~Tradius    float          :offset-assert 240)
;    (~Tthickness float          :offset-assert 244)
;    )
;   :method-count-assert 20
;   :size-assert         #xf8
;   :flag-assert         #x14009000f8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype gorge-start (gorge)
;   ((~Ttasks            basic             :offset-assert 248)
;    (~Trecord-time      race-time :inline :offset-assert 252)
;    (~Tthis-time        race-time :inline :offset-assert 257)
;    (~Tstart-banner     uint64            :offset-assert 264)
;    (~Tend-banner       uint64            :offset-assert 272)
;    (~Ttimer-pos-offset int32             :offset-assert 280)
;    (~Tticker           ticky     :inline :offset-assert 288)
;    )
;   :method-count-assert 20
;   :size-assert         #x140
;   :flag-assert         #x1400d00140
;   ;; inherited inpspect of gorge
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype gorge-finish (gorge)
;   ((~Talt-actor basic  :offset-assert 248)
;    )
;   :method-count-assert 20
;   :size-assert         #xfc
;   :flag-assert         #x14009000fc
;   ;; inherited inpspect of gorge
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype gorge-abort (gorge)
;   ()
;   :method-count-assert 20
;   :size-assert         #xf8
;   :flag-assert         #x14009000f8
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-obs
; (deftype rolling-water (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; rolling-lightning-mole
; (deftype fleeing-nav-enemy-info (structure)
;   ((min-reflect-angle       float  :offset-assert 0)
;    (max-reflect-angle       float  :offset-assert 4)
;    (max-boundary-deflection float  :offset-assert 8)
;    (deflection-min-dist     float  :offset-assert 12)
;    (deflection-max-dist     float  :offset-assert 16)
;    (reflection-time         int32  :offset-assert 20)
;    (travel-rotate-speed     float  :offset-assert 24)
;    (blend_interp_angle      float  :offset-assert 28)
;    (min-speed-adjust        float  :offset-assert 32)
;    (max-speed-adjust        float  :offset-assert 36)
;    (speed-adjust-center     float  :offset-assert 40)
;    (speed-adjust-range      float  :offset-assert 44)
;    (abort-notice-distance   float  :offset-assert 48)
;    (min-notice-dist         float  :offset-assert 52)
;    (max-notice-dist         float  :offset-assert 56)
;    (min-stop-chase-dist     float  :offset-assert 60)
;    (max-stop-chase-dist     float  :offset-assert 64)
;    (max-flee-rotation       float  :offset-assert 68)
;    )
;   :method-count-assert 9
;   :size-assert         #x48
;   :flag-assert         #x900000048
;   )

; ;; rolling-lightning-mole
; (deftype fleeing-nav-enemy (nav-enemy)
;   ((~Tlast-reflection-time uint64                         :offset-assert 400)
;    (~Trun-blend-interp     float                          :offset-assert 408)
;    (~Tdesired-travel       vector                 :inline :offset-assert 416)
;    (~Tsaved-travel         vector                 :inline :offset-assert 432)
;    (~Tspeed-adjust         float                          :offset-assert 448)
;    (~Tflee-info            fleeing-nav-enemy-info :inline :offset-assert 452)
;    )
;   :method-count-assert 76
;   :size-assert         #x20c
;   :flag-assert         #x4c01a0020c
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; rolling-lightning-mole
; (deftype lightning-mole (fleeing-nav-enemy)
;   ((~Tdebug-vector vector :inline :offset-assert 528)
;    (~Talt-actor    basic          :offset-assert 544)
;    )
;   :method-count-assert 76
;   :size-assert         #x224
;   :flag-assert         #x4c01c00224
;   ;; inherited inpspect of fleeing-nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; rolling-lightning-mole
; (deftype peeper (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-robber
; (deftype robber (process-drawable)
;   ((~Tcurve-position       float          :offset-assert 176)
;    (~Tspeed                float          :offset-assert 180)
;    (~Tfacing               vector :inline :offset-assert 192)
;    (~Ttangent              vector :inline :offset-assert 208)
;    (~Trun-blend-interp     float          :offset-assert 224)
;    (~Tnear-timer           int32          :offset-assert 228)
;    (~Tfar-time             uint64         :offset-assert 232)
;    (~Ty-offset             float          :offset-assert 240)
;    (~Ty-offset-desired     float          :offset-assert 244)
;    (~Ty-vel                float          :offset-assert 248)
;    (~Twater-height         float          :offset-assert 252)
;    (~Ttimeout              uint64         :offset-assert 256)
;    (~Tlast-ambient-time    uint64         :offset-assert 264)
;    (~Ttime-to-next-ambient uint64         :offset-assert 272)
;    )
;   :method-count-assert 20
;   :size-assert         #x118
;   :flag-assert         #x1400b00118
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; rolling-race-ring
; (deftype race-ring (process-drawable)
;   ((~Trot-y                 float                 :offset-assert 176)
;    (~Tface-vec              vector        :inline :offset-assert 192)
;    (~Tpart-track            uint64                :offset-assert 208)
;    (~Tkeep-part-track-alive basic                 :offset-assert 216)
;    (~Ttimeout               uint64                :offset-assert 224)
;    (~Talt-actor             basic                 :offset-assert 232)
;    (~Talt-task              uint8                 :offset-assert 236)
;    (~Tcyl                   cylinder-flat :inline :offset-assert 240)
;    (~Told-hips              vector        :inline :offset-assert 288)
;    )
;   :method-count-assert 20
;   :size-assert         #x130
;   :flag-assert         #x1400c00130
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; firecanyon-obs
; (deftype balloon (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; firecanyon-obs
; (deftype spike (process-drawable)
;   ((~Tnum-alts int32  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; firecanyon-obs
; (deftype crate-darkeco-cluster (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; ogre-part
; (deftype ogre-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; ogreboss
; (deftype ogreboss-missile (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; ogreboss
; (deftype ogreboss-missile-init-data (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; bad get label
;   )

; ;; ogreboss
; (deftype ogreboss-super-boulder (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; ogreboss
; (deftype ogreboss-bounce-boulder (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; ogreboss
; (deftype ogreboss (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;; unrecognized get op: (set! v1 process-drawable) parent was UNKNOWN
;   )

; ;; ogre-obs
; (deftype tntbarrel (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-plat (rigid-body-platform)
;   ((~Tanchor-point   vector :inline :offset-assert 736)
;    (~Tidle-y-offset  float          :offset-assert 752)
;    (~Tfloat-y-offset float          :offset-assert 756)
;    (~Tdelay          uint64         :offset-assert 760)
;    (~Tactive         basic          :offset-assert 768)
;    (~Ttriggered      basic          :offset-assert 772)
;    )
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;; inherited inpspect of rigid-body-platform
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-step (ogre-plat)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-step-a (ogre-step)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-step-b (ogre-step)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-step-c (ogre-step)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-step-d (ogre-step)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-isle (ogre-plat)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-isle-b (ogre-isle)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-isle-c (ogre-isle)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-isle-d (ogre-isle)
;   ()
;   :method-count-assert 35
;   :size-assert         #x308
;   :flag-assert         #x2302a00308
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-bridge (process-drawable)
;   ((~Tjoint-mod-array  UNKNOWN 8 :offset-assert 176)
;    (~Tdead-joint-count int8      :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xd1
;   :flag-assert         #x14007000d1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-bridgeend (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; ogre-obs
; (deftype ogre-lava (water-anim)
;   ((~Tidle-anim int32  :offset-assert 220)
;    (~Tanim      int32  :offset-assert 224)
;    )
;   :method-count-assert 30
;   :size-assert         #xe4
;   :flag-assert         #x1e008000e4
;   ;; inherited inpspect of water-anim
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; ogre-obs
; (deftype shortcut-boulder (process-drawable)
;   ((~Tbroken-look lod-set :inline :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xd1
;   :flag-assert         #x14007000d1
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; flying-lurker
; (deftype plunger-lurker (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    (~Tgot-hit   basic  :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; flying-lurker
; (deftype flying-lurker (process-drawable)
;   ((~Tcurve-position    float          :offset-assert 176)
;    (~Tspeed             float          :offset-assert 180)
;    (~Ttangent           vector :inline :offset-assert 192)
;    (~Tanim-blend        float          :offset-assert 208)
;    (~Ty-offset          float          :offset-assert 212)
;    (~Ty-offset-desired  float          :offset-assert 216)
;    (~Ty-vel             float          :offset-assert 220)
;    (~Tlast-look-time    uint64         :offset-assert 224)
;    (~Ttime-to-next-look uint64         :offset-assert 232)
;    (~Ttake-off          basic          :offset-assert 240)
;    (~Trace-seconds      float          :offset-assert 244)
;    (~Trace-start-time   uint64         :offset-assert 248)
;    (~Trank              int32          :offset-assert 256)
;    (~Talt-actor         basic          :offset-assert 260)
;    (~Talt-trans         vector         :offset-assert 264)
;    (~Tshadow-backup     basic          :offset-assert 268)
;    (~Ttry-count         uint8          :offset-assert 272)
;    (~Ttry-counted       basic          :offset-assert 276)
;    (~Tdefault-bounds    vector :inline :offset-assert 288)
;    )
;   :method-count-assert 21
;   :size-assert         #x130
;   :flag-assert         #x1500c00130
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; village3-part
; (deftype villagec-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; village3-obs
; (deftype villagec-lava (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; village3-obs
; (deftype gondola (process-drawable)
;   ((~Tanim           basic              :offset-assert 176)
;    (~Told-target-pos transformq :inline :offset-assert 192)
;    )
;   :method-count-assert 23
;   :size-assert         #xf0
;   :flag-assert         #x17008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; village3-obs
; (deftype pistons (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; village3-obs
; (deftype gondolacables (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; minecart
; (deftype minecartsteel (process-drawable)
;   ((~Tindex int32             :offset-assert 176)
;    (~Tanim  basic             :offset-assert 180)
;    (~Tsync  sync-info :inline :offset-assert 184)
;    )
;   :method-count-assert 21
;   :size-assert         #xc0
;   :flag-assert         #x15005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; miners
; (deftype minertall (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; miners
; (deftype minershort (process-taskable)
;   ((~Tother-miner basic  :offset-assert 380)
;    )
;   :method-count-assert 53
;   :size-assert         #x180
;   :flag-assert         #x3501100180
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; miners
; (deftype cavegem (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; assistant-village3
; (deftype assistant-villagec (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; sage-village3
; (deftype sage-villagec (process-taskable)
;   ((~Tevilbro   uint64  :offset-assert 384)
;    (~Tevilsis   uint64  :offset-assert 392)
;    (~Tassistant basic   :offset-assert 400)
;    )
;   :method-count-assert 53
;   :size-assert         #x194
;   :flag-assert         #x3501300194
;   ;; inherited inpspect of process-taskable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

; ;; cave-trap
; (deftype cave-trap (process-drawable)
;   ((~Tspider-count    int32          :offset-assert 176)
;    (~Talt-actors      basic          :offset-assert 180)
;    (~Tspawn-delay     uint64         :offset-assert 184)
;    (~Tlast-spawn-time uint64         :offset-assert 192)
;    (~Tdebug-targ-pos  vector :inline :offset-assert 208)
;    )
;   :method-count-assert 21
;   :size-assert         #xe0
;   :flag-assert         #x15007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; cave-trap
; (deftype spider-vent (process-drawable)
;   ((~Tlast-spawn-time uint64  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb8
;   :flag-assert         #x14005000b8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; cave-trap
; (deftype spawn-baby-spider-best (structure)
;   ((index int32  :offset-assert 0)
;    (dist  float  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; cave-trap
; (deftype spawn-baby-spider-work (structure)
;   ((best UNKNOWN 4 :offset-assert 0)
;    )
;   :method-count-assert 9
;   :size-assert         #x40
;   :flag-assert         #x900000040
;   )

; ;; spider-egg
; (deftype spider-egg (process-drawable)
;   ((~Tnotify-actor basic           :offset-assert 176)
;    (~Tbroken-look  lod-set :inline :offset-assert 180)
;    )
;   :method-count-assert 20
;   :size-assert         #xd5
;   :flag-assert         #x14007000d5
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; robocave-part
; (deftype robocave-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; target-snowball
; (deftype snowball-info (basic)
;   ((entity basic  :offset-assert 4)
;    )
;   :method-count-assert 9
;   :size-assert         #x8
;   :flag-assert         #x900000008
;   )

; ;; target-snowball
; (deftype snowball-bank (basic)
;   ()
;   :method-count-assert 9
;   :size-assert         #x4
;   :flag-assert         #x900000004
;   )

; ;; ice-cube
; (deftype ice-cube (nav-enemy)
;   ((~Tpart2                  basic          :offset-assert 400)
;    (~Tpart3                  basic          :offset-assert 404)
;    (~Tpart4                  basic          :offset-assert 408)
;    (~Ttrack-target?          basic          :offset-assert 412)
;    (~Tslow-down?             basic          :offset-assert 416)
;    (~Ttracking-player?       basic          :offset-assert 420)
;    (~Tforce-spawn-pt         int32          :offset-assert 424)
;    (~Tspeed                  float          :offset-assert 428)
;    (~Tanim-blend             float          :offset-assert 432)
;    (~Tprev-charge-angle-diff float          :offset-assert 436)
;    (~Tcharge-angle           float          :offset-assert 440)
;    (~Tground-y               float          :offset-assert 444)
;    (~Tcprims-type            uint64         :offset-assert 448)
;    (~Tnext-skid-sound-time   uint64         :offset-assert 456)
;    (~Tstarting-pos           vector :inline :offset-assert 464)
;    (~Ttarget-pt              vector :inline :offset-assert 480)
;    )
;   :method-count-assert 76
;   :size-assert         #x1f0
;   :flag-assert         #x4c018001f0
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; snow-ball
; (deftype snow-ball-shadow (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-ball
; (deftype snow-ball-junction (structure)
;   ((enter-time uint64  :offset-assert 0)
;    (exit-time  uint64  :offset-assert 8)
;    )
;   :method-count-assert 9
;   :size-assert         #x10
;   :flag-assert         #x900000010
;   )

; ;; snow-ball
; (deftype snow-ball-path-info (structure)
;   ((hug-path? basic          :offset-assert 0)
;    (path-pos  vector :inline :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x20
;   :flag-assert         #x900000020
;   )

; ;; snow-ball
; (deftype snow-ball-roller (process-drawable)
;   ((~Twhich-path             int32                       :offset-assert 176)
;    (~Tpath-u                 float                       :offset-assert 180)
;    (~Tpath-speed             float                       :offset-assert 184)
;    (~Tpath-length            float                       :offset-assert 188)
;    (~Tpath-fall-u            float                       :offset-assert 192)
;    (~Tpath-coming-out-u      float                       :offset-assert 196)
;    (~Tpath-faded-up-u        float                       :offset-assert 200)
;    (~Tdelay-til-bounce       int32                       :offset-assert 204)
;    (~Trolling-sound-id       uint32                      :offset-assert 208)
;    (~Trolling-sound-enabled? basic                       :offset-assert 212)
;    (~Tlast-bounce-time       uint64                      :offset-assert 216)
;    (~Thit-player-time        uint64                      :offset-assert 224)
;    (~Tpath-info              snow-ball-path-info :inline :offset-assert 240)
;    (~Tjunctions              UNKNOWN             4       :offset-assert 272)
;    )
;   :method-count-assert 23
;   :size-assert         #x150
;   :flag-assert         #x1700e00150
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; snow-ball
; (deftype snow-ball (process)
;   ((~Tstate-time             uint64    :offset-assert 112)
;    (~Tlast-path-picked       int32     :offset-assert 120)
;    (~Tsame-path-picked-count int32     :offset-assert 124)
;    (~Tdelay-til-next         int32     :offset-assert 128)
;    (~Tpath                   UNKNOWN 2 :offset-assert 132)
;    )
;   :method-count-assert 16
;   :size-assert         #x8c
;   :flag-assert         #x100020008c
;   ;; inherited inpspect of process
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     )
;   )

; ;; snow-obs
; (deftype snowcam (pov-camera)
;   ((~Tseq uint64  :offset-assert 224)
;    )
;   :method-count-assert 30
;   :size-assert         #xe8
;   :flag-assert         #x1e008000e8
;   ;; inherited inpspect of pov-camera
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; snow-obs
; (deftype snow-eggtop (process-drawable)
;   ((~Tspawn-trans vector :inline :offset-assert 176)
;    (~Tplay-sound? basic          :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xc4
;   :flag-assert         #x14006000c4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-obs
; (deftype snowpusher (process-drawable)
;   ((~Tmax-frame   float                    :offset-assert 176)
;    (~Topen-sound  uint128                  :offset-assert 192)
;    (~Tclose-sound uint128                  :offset-assert 208)
;    (~Tsync        sync-info-paused :inline :offset-assert 224)
;    )
;   :method-count-assert 20
;   :size-assert         #xf0
;   :flag-assert         #x14008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-obs
; (deftype snow-spatula (baseplat)
;   ((~Tsync     sync-info :inline :offset-assert 228)
;    (~Tstartmat matrix    :inline :offset-assert 240)
;    )
;   :method-count-assert 27
;   :size-assert         #x130
;   :flag-assert         #x1b00c00130
;   ;; inherited inpspect of baseplat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     )
;   )

; ;; snow-obs
; (deftype snow-fort-gate (process-drawable)
;   ((~Tpart2        basic          :offset-assert 176)
;    (~Tpart3        basic          :offset-assert 180)
;    (~Topen-trans   vector :inline :offset-assert 192)
;    (~Tclosed-trans vector :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xe0
;   :flag-assert         #x14007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-obs
; (deftype snow-gears (process-drawable)
;   ()
;   :method-count-assert 21
;   :size-assert         #xb0
;   :flag-assert         #x15004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; snow-obs
; (deftype snow-switch (process-drawable)
;   ((~Tpressed?     basic          :offset-assert 176)
;    (~Tfcell-handle uint64         :offset-assert 184)
;    (~Torig-trans   vector :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-obs
; (deftype snow-log (process-drawable)
;   ((~Tmaster basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-obs
; (deftype snow-log-button (process-drawable)
;   ((~Tlog        basic          :offset-assert 176)
;    (~Torig-trans vector :inline :offset-assert 192)
;    )
;   :method-count-assert 20
;   :size-assert         #xd0
;   :flag-assert         #x14006000d0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-flutflut-obs
; (deftype flutflut-plat (plat)
;   ((~Thas-path?           basic              :offset-assert 264)
;    (~Tplat-type           int32              :offset-assert 268)
;    (~Trise-time           int32              :offset-assert 272)
;    (~Tfall-time           int32              :offset-assert 276)
;    (~Tpart-ry             float              :offset-assert 280)
;    (~Tsync-starting-val   float              :offset-assert 284)
;    (~Tflutflut-button     basic              :offset-assert 288)
;    (~Tappear-trans-top    vector     :inline :offset-assert 304)
;    (~Tappear-trans-bottom vector     :inline :offset-assert 320)
;    (~Tappear-quat-top     quaternion :inline :offset-assert 336)
;    (~Tappear-quat-bottom  quaternion :inline :offset-assert 352)
;    (~Tstart-trans         vector     :inline :offset-assert 368)
;    )
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;; inherited inpspect of plat
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; snow-flutflut-obs
; (deftype snow-button (process-drawable)
;   ((~Twiggled?         basic          :offset-assert 176)
;    (~Ttimeout          uint64         :offset-assert 184)
;    (~Tdelay-til-wiggle uint64         :offset-assert 192)
;    (~Tprev-button      basic          :offset-assert 200)
;    (~Tticker           ticky  :inline :offset-assert 208)
;    )
;   :method-count-assert 20
;   :size-assert         #xf0
;   :flag-assert         #x14008000f0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; snow-flutflut-obs
; (deftype flutflut-plat-small (flutflut-plat)
;   ()
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; snow-flutflut-obs
; (deftype flutflut-plat-med (flutflut-plat)
;   ()
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; snow-flutflut-obs
; (deftype flutflut-plat-large (flutflut-plat)
;   ()
;   :method-count-assert 33
;   :size-assert         #x180
;   :flag-assert         #x2101100180
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     )
;   )

; ;; snow-bumper
; (deftype snow-bumper (process-drawable)
;   ((~Tbumper-id               int32   :offset-assert 176)
;    (~Tbase-shove-ry           float   :offset-assert 180)
;    (~Tmax-shove-diff-ry       float   :offset-assert 184)
;    (~Tpart2                   basic   :offset-assert 188)
;    (~Tlast-shoved-player-time uint64  :offset-assert 192)
;    )
;   :method-count-assert 22
;   :size-assert         #xc8
;   :flag-assert         #x16006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; snow-ram-h
; (deftype ram (process-drawable)
;   ((~Tram-id              int32          :offset-assert 176)
;    (~Tgive-fuel-cell?     basic          :offset-assert 180)
;    (~Tgive-fuel-cell-anim basic          :offset-assert 184)
;    (~Tpart2               basic          :offset-assert 188)
;    (~Torient-ry           float          :offset-assert 192)
;    (~Tfuel-cell-dest-pos  vector :inline :offset-assert 208)
;    )
;   :method-count-assert 23
;   :size-assert         #xe0
;   :flag-assert         #x17007000e0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     )
;   )

; ;; snow-ram-boss
; (deftype ram-boss-proj (projectile)
;   ((~Tpart2           basic          :offset-assert 412)
;    (~Tlaunched?       basic          :offset-assert 416)
;    (~Tgrowth          float          :offset-assert 420)
;    (~Tcharge-sound-id uint32         :offset-assert 424)
;    (~Tlaunch-time     uint64         :offset-assert 432)
;    (~Tfacing-dir      vector :inline :offset-assert 448)
;    )
;   :method-count-assert 29
;   :size-assert         #x1d0
;   :flag-assert         #x1d016001d0
;   ;; inherited inpspect of projectile
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     )
;   )

; ;; snow-ram-boss
; (deftype ram-boss (nav-enemy)
;   ((~Tfacing-y                 float          :offset-assert 400)
;    (~Tplayer-dir-y             float          :offset-assert 404)
;    (~Tlast-turn-speed          float          :offset-assert 408)
;    (~Tfrustration              int32          :offset-assert 412)
;    (~Tdead?                    basic          :offset-assert 416)
;    (~Thas-shield?              basic          :offset-assert 420)
;    (~Tproj-stoked              basic          :offset-assert 424)
;    (~Tproj-status              uint64         :offset-assert 432)
;    (~Tpart2                    basic          :offset-assert 440)
;    (~Tproj-last-thrown-time    uint64         :offset-assert 448)
;    (~Tnav-enemy-patrol-timeout uint64         :offset-assert 456)
;    (~Tproj-launch-vec          vector :inline :offset-assert 464)
;    (~Tlocal-throw-point        vector :inline :offset-assert 480)
;    (~Tshield-jmod              basic          :offset-assert 496)
;    )
;   :method-count-assert 76
;   :size-assert         #x1f4
;   :flag-assert         #x4c019001f4
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; snow-part
; (deftype snow-part (part-spawner)
;   ()
;   :method-count-assert 21
;   :size-assert         #xd0
;   :flag-assert         #x15006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     )
;   )

; ;; yeti
; (deftype yeti-slave (nav-enemy)
;   ((~Tground-y float  :offset-assert 400)
;    (~Tpart2    basic  :offset-assert 404)
;    )
;   :method-count-assert 76
;   :size-assert         #x198
;   :flag-assert         #x4c01300198
;   ;; inherited inpspect of nav-enemy
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     (dummy-53 () none 53)
;     (dummy-54 () none 54)
;     (dummy-55 () none 55)
;     (dummy-56 () none 56)
;     (dummy-57 () none 57)
;     (dummy-58 () none 58)
;     (dummy-59 () none 59)
;     (dummy-60 () none 60)
;     (dummy-61 () none 61)
;     (dummy-62 () none 62)
;     (dummy-63 () none 63)
;     (dummy-64 () none 64)
;     (dummy-65 () none 65)
;     (dummy-66 () none 66)
;     (dummy-67 () none 67)
;     (dummy-68 () none 68)
;     (dummy-69 () none 69)
;     (dummy-70 () none 70)
;     (dummy-71 () none 71)
;     (dummy-72 () none 72)
;     (dummy-73 () none 73)
;     (dummy-74 () none 74)
;     (dummy-75 () none 75)
;     )
;   )

; ;; yeti
; (deftype yeti (process-drawable)
;   ((~Tdesired-num-children  int32   :offset-assert 176)
;    (~Tspawn-delay           int32   :offset-assert 180)
;    (~Tfirst-time-spawn-dist float   :offset-assert 184)
;    (~Tstate-time            uint64  :offset-assert 168)
;    )
;   :method-count-assert 22
;   :size-assert         #xc8
;   :flag-assert         #x16006000c8
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; lavatube-obs
; (deftype lavabase (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype lavafall (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype lavashortcut (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype darkecobarrel-leak (structure)
;   ((offset      vector :inline :offset-assert 0)
;    (first-frame basic          :offset-assert 16)
;    )
;   :method-count-assert 9
;   :size-assert         #x14
;   :flag-assert         #x900000014
;   )

; ;; lavatube-obs
; (deftype darkecobarrel-base (process-drawable)
;   ((~Tspeed float   :offset-assert 176)
;    (~Tsync  uint64  :offset-assert 184)
;    )
;   :method-count-assert 20
;   :size-assert         #xc0
;   :flag-assert         #x14005000c0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype darkecobarrel-mover (darkecobarrel-base)
;   ((~Tstart-time   uint64                      :offset-assert 192)
;    (~Thits         int32                       :offset-assert 200)
;    (~Tleak         UNKNOWN             1       :offset-assert 208)
;    (~Ty-offset     bouncing-float      :inline :offset-assert 240)
;    (~Ty-offset-tgt delayed-rand-float  :inline :offset-assert 280)
;    (~Tdown         oscillating-vector  :inline :offset-assert 320)
;    (~Tdown-tgt     delayed-rand-vector :inline :offset-assert 384)
;    )
;   :method-count-assert 20
;   :size-assert         #x1b0
;   :flag-assert         #x14014001b0
;   ;; inherited inpspect of darkecobarrel-base
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype darkecobarrel (darkecobarrel-base)
;   ((~Tspawn-array basic  :offset-assert 192)
;    (~Tcur-spawn   int32  :offset-assert 196)
;    )
;   :method-count-assert 20
;   :size-assert         #xc8
;   :flag-assert         #x14006000c8
;   ;; inherited inpspect of darkecobarrel-base
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype lavafallsewera (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype lavafallsewerb (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-obs
; (deftype chainmine (process-drawable)
;   ()
;   :method-count-assert 22
;   :size-assert         #xb0
;   :flag-assert         #x16004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; lavatube-obs
; (deftype lavaballoon (process-drawable)
;   ((~Tmove-per-tick float  :offset-assert 176)
;    )
;   :method-count-assert 22
;   :size-assert         #xb4
;   :flag-assert         #x16005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     )
;   )

; ;; lavatube-obs
; (deftype lavatube-lava (water-anim)
;   ()
;   :method-count-assert 30
;   :size-assert         #xdc
;   :flag-assert         #x1e007000dc
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     )
;   )

; ;; lavatube-obs
; (deftype lavayellowtarp (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energydoor (process-drawable)
;   ((~Talt-actor basic  :offset-assert 176)
;    )
;   :method-count-assert 20
;   :size-assert         #xb4
;   :flag-assert         #x14005000b4
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energybase (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energyhub (process-drawable)
;   ((~Talts                  UNKNOWN            3       :offset-assert 176)
;    (~Tarm                   UNKNOWN            5       :offset-assert 192)
;    (~Trot-mat               matrix             :inline :offset-assert 240)
;    (~Trot-mat-init          matrix             :inline :offset-assert 304)
;    (~Trotation-speed        oscillating-float  :inline :offset-assert 368)
;    (~Trotation-speed-offset delayed-rand-float :inline :offset-assert 392)
;    (~Ty-rotation            float                      :offset-assert 420)
;    (~Tx-rotation            float                      :offset-assert 424)
;    (~Tpalette-val           float                      :offset-assert 428)
;    )
;   :method-count-assert 20
;   :size-assert         #x1b0
;   :flag-assert         #x14014001b0
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energyarm (process-drawable)
;   ((~Toffset             vector             :inline :offset-assert 176)
;    (~Ty-rotation         float                      :offset-assert 192)
;    (~Ty-chatter-rotation bouncing-float     :inline :offset-assert 196)
;    (~Ty-chatter-min      delayed-rand-float :inline :offset-assert 240)
;    (~Tx-rotation         bouncing-float     :inline :offset-assert 268)
;    (~Tx-fall-rotation    bouncing-float     :inline :offset-assert 308)
;    (~Trot-mat            matrix             :inline :offset-assert 352)
;    (~Tball               uint64                     :offset-assert 416)
;    (~Tx-correction       float                      :offset-assert 424)
;    )
;   :method-count-assert 20
;   :size-assert         #x1ac
;   :flag-assert         #x14014001ac
;   ;; inherited inpspect of process-drawable
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energyball (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-energy
; (deftype energylava (process-drawable)
;   ()
;   :method-count-assert 20
;   :size-assert         #xb0
;   :flag-assert         #x14004000b0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     )
;   )

; ;; lavatube-part
; (deftype lavatube-part (UNKNOWN)
;   ()
;   :method-count-assert 0
;   :size-assert         #x0
;   :flag-assert         #x0
;   ;;  not enough basic ops
;   )

; ;; assistant-lavatube
; (deftype assistant-lavatube-start (process-taskable)
;   ()
;   :method-count-assert 53
;   :size-assert         #x17c
;   :flag-assert         #x350110017c
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     (dummy-28 () none 28)
;     (dummy-29 () none 29)
;     (dummy-30 () none 30)
;     (dummy-31 () none 31)
;     (dummy-32 () none 32)
;     (dummy-33 () none 33)
;     (dummy-34 () none 34)
;     (dummy-35 () none 35)
;     (dummy-36 () none 36)
;     (dummy-37 () none 37)
;     (dummy-38 () none 38)
;     (dummy-39 () none 39)
;     (dummy-40 () none 40)
;     (dummy-41 () none 41)
;     (dummy-42 () none 42)
;     (dummy-43 () none 43)
;     (dummy-44 () none 44)
;     (dummy-45 () none 45)
;     (dummy-46 () none 46)
;     (dummy-47 () none 47)
;     (dummy-48 () none 48)
;     (dummy-49 () none 49)
;     (dummy-50 () none 50)
;     (dummy-51 () none 51)
;     (dummy-52 () none 52)
;     )
;   )

;; title-obs
(deftype logo (process-drawable)
  ((~Tcamera      uint64  :offset-assert 176)
   (~Tcamera-anim uint64  :offset-assert 184)
   (~Tvolumes     uint64  :offset-assert 192)
   (~Tblack       uint64  :offset-assert 200)
   (~Ttarget      uint64  :offset-assert 208)
   (~Tsidekick    uint64  :offset-assert 216)
   (~Tmain-joint  basic   :offset-assert 224)
   (~Tanim        basic   :offset-assert 228)
   (~Tnext-anim   basic   :offset-assert 232)
   (~Tdone?       basic   :offset-assert 236)
   )
  :heap-base #x80
  :method-count-assert 24
  :size-assert         #xf0
  :flag-assert         #x18008000f0
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    )
  )

;; title-obs
(deftype logo-slave (process-drawable)
  ((~Tmain-joint basic  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xb4
  :flag-assert         #x15005000b4
  ;; inherited inpspect of process-drawable
  (:methods
    (dummy-20 () none 20)
    )
  )

; ;; lava
; (deftype lava (water-anim)
;   ()
;   :method-count-assert 28
;   :size-assert         #xd0
;   :flag-assert         #x1c006000d0
;   ;;  not enough basic ops
;   (:methods
;     (dummy-9 () none 9)
;     (dummy-10 () none 10)
;     (dummy-11 () none 11)
;     (dummy-12 () none 12)
;     (dummy-13 () none 13)
;     (dummy-14 () none 14)
;     (dummy-15 () none 15)
;     (dummy-16 () none 16)
;     (dummy-17 () none 17)
;     (dummy-18 () none 18)
;     (dummy-19 () none 19)
;     (dummy-20 () none 20)
;     (dummy-21 () none 21)
;     (dummy-22 () none 22)
;     (dummy-23 () none 23)
;     (dummy-24 () none 24)
;     (dummy-25 () none 25)
;     (dummy-26 () none 26)
;     (dummy-27 () none 27)
;     )
;   )





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SYMBOLS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; KERNEL


(define-extern install-default-debug-handler function)
(define-extern return-from-exception function)
;;(define-extern lowmemmap object) ;; unknown type
(define-extern kernel-write function)
(define-extern kernel-read function)
(define-extern deinstall-debug-handlers function)
(define-extern kernel-set-exception-vector function)
(define-extern kernel-copy-function function)
(define-extern kernel-check-hardwired-addresses function)
(define-extern kernel-set-level2-vector function)
(define-extern kernel-set-interrupt-vector function)
(define-extern kernel-read-function function)
(define-extern kernel-copy-to-kernel-ram function)
(define-extern kernel-write-function function)
(define-extern resend-exception function)
(define-extern deinstall-debug-handler function)
;;(define-extern install-debug-handler object) ;; unknown type
(define-extern copyn-string<-charp function)
(define-extern string<-charp function)
(define-extern string-get-arg!! function)
(define-extern string-get-float!! function)
(define-extern append-character-to-string function)
(define-extern string-get-int32!! function)
(define-extern charp-basename function)
(define-extern copy-charp<-charp function)
(define-extern string-skip-whitespace function)
(define-extern string-strip-whitespace! function)
(define-extern string<? function)
(define-extern string-get-flag!! function)
(define-extern charp<-string (function (pointer uint8) string int))
(define-extern string>=? function)
(define-extern string-charp= function)
(define-extern string->float function)
(define-extern cat-string<-string_to_charp function)
(define-extern string->int function)
(define-extern string<=? function)
(define-extern cat-string<-string function)
(define-extern clear function)
(define-extern string= function)
;;(define-extern *temp-string* object) ;; unknown type
(define-extern string-strip-leading-whitespace! function)
(define-extern catn-string<-charp function)
;;(define-extern *string-tmp-str* object) ;; unknown type
(define-extern string-suck-up! function)
(define-extern copy-string<-string (function string string symbol))
(define-extern string-skip-to-char function)
(define-extern string-strip-trailing-whitespace! function)
(define-extern string>? function)
(define-extern string-cat-to-last-char function)
;;(define-extern dgo-entry object) ;; unknown type
;;(define-extern dgo-file object) ;; unknown type
(define-extern enter-state function)
(define-extern send-event-function function)
(define-extern looping-code function)
(define-extern inherit-state function)
;;(define-extern time-frame object) ;; unknown type
;;(define-extern part-id object) ;; unknown type

;;(define-extern vector2h object) ;; unknown type
;;(define-extern vector4s-3 object) ;; unknown type
;;(define-extern *identity-vector* object) ;; unknown type
;;(define-extern vector4ub object) ;; unknown type
;;(define-extern vector2w object) ;; unknown type
;;(define-extern isphere object) ;; unknown type
(define-extern vector-dot-vu (function vector vector float))
;;(define-extern vertical-planes object) ;; unknown type
;;(define-extern cylinder object) ;; unknown type
;;(define-extern *x-vector* object) ;; unknown type
;;(define-extern *y-vector* object) ;; unknown type
;;(define-extern *z-vector* object) ;; unknown type
(define-extern vector-zero! function)
;;(define-extern bit-array object) ;; unknown type
(define-extern vector-! function)
;;(define-extern vector16b object) ;; unknown type
;;(define-extern vector-array object) ;; unknown type
;;(define-extern rgbaf object) ;; unknown type
;;(define-extern cylinder-flat object) ;; unknown type
;;(define-extern plane object) ;; unknown type
;;(define-extern vector3s object) ;; unknown type
(define-extern vector-dot (function vector vector float))
;;(define-extern *zero-vector* object) ;; unknown type
;;(define-extern vector4h object) ;; unknown type
;;(define-extern vector4w object) ;; unknown type
(define-extern box8s-array type)
;;(define-extern *null-vector* object) ;; unknown type
;;(define-extern qword object) ;; unknown type
;;(define-extern *up-vector* object) ;; unknown type
;;(define-extern vector4b object) ;; unknown type
;;(define-extern vector4w-4 object) ;; unknown type
;;(define-extern vertical-planes-array object) ;; unknown type
(define-extern vector4-dot (function vector vector float))
;;(define-extern vector2uh object) ;; unknown type
;;(define-extern sphere object) ;; unknown type
;;(define-extern vector3h object) ;; unknown type
;;(define-extern vector4w-3 object) ;; unknown type
(define-extern vector+! function)
(define-extern vector4-dot-vu (function vector vector float))
;;(define-extern box8s object) ;; unknown type
;;(define-extern vector3w object) ;; unknown type
(define-extern vector-reset! function)
;;(define-extern vector4w-2 object) ;; unknown type
;;(define-extern vector8h object) ;; unknown type
(define-extern vector-copy! function)
(define-extern vector type)
;;(define-extern bounding-box object) ;; unknown type
;;(define-extern bounding-box4w object) ;; unknown type
;;(define-extern bounding-box-both object) ;; unknown type
;;(define-extern matrix4h object) ;; unknown type
; (define-extern matrix-copy! function)
;;(define-extern matrix3 object) ;; unknown type
;;(define-extern matrix object) ;; unknown type
;;(define-extern *unity-quaternion* object) ;; unknown type
;;(define-extern quaternion object) ;; unknown type
;;(define-extern euler-angles object) ;; unknown type
;;(define-extern EulNext object) ;; unknown type
;;(define-extern EulSafe object) ;; unknown type
;;(define-extern transform object) ;; unknown type
;;(define-extern trs object) ;; unknown type
;;(define-extern border-plane object) ;; unknown type
;;(define-extern curve object) ;; unknown type
;;(define-extern transformq object) ;; unknown type
;;(define-extern trsqv object) ;; unknown type
;;(define-extern trsq object) ;; unknown type
(define-extern deg-diff function)
(define-extern vector-y-angle function)
(define-extern box-vector-inside? function)
(define-extern box-vector-enside? function)
(define-extern vector3s-rotate*! function)
(define-extern matrix-inverse-of-rot-trans! function)
(define-extern matrix-3x3-determinant function)
(define-extern matrix-3x3-inverse-transpose! function)
(define-extern vector-matrix*! function)
(define-extern matrix-scale! function)
(define-extern column-scale-matrix! function)
(define-extern matrix-rotate-yx! function)
(define-extern matrix-y-angle function)
(define-extern matrix-3x3-inverse! function)
(define-extern matrix-rotate-z! function)
;;(define-extern *identity-matrix* object) ;; unknown type
(define-extern matrix-axis-angle! function)
(define-extern matrix-rotate-zyx! function)
(define-extern matrix-rotate-x! function)
(define-extern matrix+! function)
(define-extern matrix-rotate-yxy! function)
(define-extern matrix-identity! function)
(define-extern vector3s-matrix*! function)
(define-extern matrix-4x4-determinant function)
(define-extern matrix-inv-scale! function)
(define-extern matrix-rotate-yzx! function)
(define-extern matrix-axis-sin-cos! function)
(define-extern matrix-lerp! function)
(define-extern matrix-rotate-y! function)
(define-extern matrix*! function)
(define-extern matrix-rotate-xyz! function)
(define-extern scale-matrix! function)
(define-extern matrix-rotate-yxz! function)
(define-extern matrix-rotate-zxy! function)
(define-extern vector-rotate*! function)
(define-extern matrix3-determinant function)
(define-extern matrix3-inverse-transpose! function)
(define-extern matrix-translate+! function)
(define-extern matrix-transpose! function)
(define-extern matrix-4x4-inverse-transpose! function)
(define-extern matrixp*! function)
(define-extern matrix-axis-sin-cos-vu! function)
(define-extern matrix-translate! function)
(define-extern matrix-4x4-inverse! function)
(define-extern matrix-! function)
(define-extern atan function)
(define-extern vector-sincos! function)
(define-extern cos function)
(define-extern sin function)
(define-extern trs-matrix-calc! function)
(define-extern transform-matrix-parent-calc! function)
(define-extern transform-matrix-calc! function)
(define-extern vector-identity! function)
(define-extern quaternion-zero! function)
(define-extern quaternion-set! function)
(define-extern matrix->quaternion function)
(define-extern quaternion-exp! function)
(define-extern quaternion-axis-angle! function)
(define-extern quaternion-rotate-x! function)
(define-extern quaternion-validate function)
(define-extern quaternion-dot function)
(define-extern quaternion-normalize! function)
(define-extern vector-x-angle function)
(define-extern quaternion-k! function)
(define-extern quaternion-vector-len function)
(define-extern quaternion-rotate-local-x! function)
(define-extern matrix-with-scale->quaternion function)
(define-extern quaternion-rotate-y! function)
(define-extern vector-x-quaternion! function)
(define-extern quaternion-xz-angle function)
(define-extern quaternion-j! function)
(define-extern quaternion*! function)
(define-extern quaternion-right-mult-matrix! function)
(define-extern quaternion-left-mult-matrix! function)
(define-extern quaternion-negate! function)
(define-extern quaternion+! function)
(define-extern quaternion-norm function)
(define-extern quaternion-log! function)
(define-extern quaternion-rotate-local-z! function)
(define-extern quaternion-float*! function)
(define-extern quaternion-float/! function)
(define-extern quaternion-inverse! function)
(define-extern quaternion-pseudo-slerp! function)
(define-extern quaternion-vector-angle! function)
(define-extern quaterion<-rotate-y-vector function)
(define-extern quaternion-rotate-y-to-vector! function)
(define-extern quaternion-! function)
(define-extern vector-z-quaternion! function)
(define-extern quaternion-rotate-z! function)
(define-extern quaternion-slerp! function)
(define-extern quaternion->matrix function)
(define-extern quaternion-zxy! function)
(define-extern quaternion-delta-y function)
(define-extern vector-angle<-quaternion! function)
(define-extern quaternion-rotate-local-y! function)
(define-extern quaternion-norm2 function)
(define-extern quaternion-identity! function)
(define-extern quaternion-y-angle function)
(define-extern quaternion-vector-y-angle function)
(define-extern quaternion-copy! function)
(define-extern quaternion-conjugate! function)
(define-extern vector-y-quaternion! function)
(define-extern vector-rotate-y! function)
(define-extern quaternion-i! function)
(define-extern sincos-rad! function)
(define-extern vector-sincos-rad! function)
(define-extern vector-xz-normalize! function)
(define-extern atan-series-rad function)
(define-extern atan2-rad function)
(define-extern quaternion-from-two-vectors-max-angle! function)
(define-extern vector-length function)
(define-extern vector-rad<-vector-deg/2! function)
(define-extern vector-sin-rad! function)
(define-extern acos-rad function)
(define-extern vector-xz-length function)
(define-extern acos function)
(define-extern quat->eul function)
(define-extern set-eul! function)
(define-extern eul->matrix function)
(define-extern eul->quat function)
(define-extern matrix->eul function)
(define-extern vector-reflect-flat! function)
(define-extern forward-down->inv-matrix function)
(define-extern circle-test function)
(define-extern vector-line-distance-point! function)
(define-extern curve-evaluate! function)
(define-extern vector-reflect! function)
(define-extern matrix-from-two-vectors! function)
(define-extern matrix-from-two-vectors-partial-linear! function)
(define-extern forward-up->quaternion function)
(define-extern find-knot-span function)
(define-extern vector-vector-deg-slerp! function)
(define-extern matrix-from-two-vectors-max-angle! function)
(define-extern curve-length function)
(define-extern matrix-from-two-vectors-max-angle-partial! function)
(define-extern vector-deg-slerp function)
(define-extern vector-segment-distance-point! function)
(define-extern forward-up-nopitch->inv-matrix function)
(define-extern normal-of-plane function)
(define-extern vector-line-distance function)
(define-extern calculate-basis-functions-vector! function)
(define-extern vector-deg-seek function)
(define-extern point-in-plane-<-point+normal! function)
(define-extern matrix-rot-diff! function)
(define-extern point-in-triangle-cross function)
(define-extern matrix-remove-z-rot function)
(define-extern quaternion-seek function)
(define-extern vector-3pt-cross! function)
(define-extern vector-circle-tangent function)
(define-extern circle-circle-xz-intersect function)
(define-extern vector-plane-distance function)
(define-extern quaternion-from-two-vectors! function)
(define-extern closest-pt-in-triangle function)
(define-extern vector-flatten! function)
(define-extern vector-orient-by-quat! function)
(define-extern vector-reflect-true-flat! function)
(define-extern forward-up-nopitch->quaternion function)
(define-extern curve-copy! function)
(define-extern curve-get-pos! function)
(define-extern curve-closest-point function)
(define-extern forward-down-nopitch->inv-matrix function)
(define-extern vector-reflect-flat-above! function)
(define-extern vector-circle-tangent-new function)
(define-extern vector-vector-distance-squared function)
(define-extern vector-cross! function)
(define-extern vector+float*! function)
(define-extern vector-normalize! function)
(define-extern vector-negate! function)
(define-extern vector-vector-distance function)
(define-extern vector-normalize-ret-len! function)
(define-extern vector-normalize-copy! function)
(define-extern vector-float*! function)
(define-extern coserp function)
(define-extern sinerp-clamp function)
;;(define-extern exp-slead object) ;; unknown type
(define-extern coserp180-clamp function)
;;(define-extern *sin-poly-vec2* object) ;; unknown type
(define-extern exp function)
(define-extern deg-lerp-clamp function)
(define-extern deg- function)
(define-extern atan-rad function)
(define-extern deg-seek function)
(define-extern coserp180 function)
(define-extern sign function)
(define-extern sinerp function)
;;(define-extern *sin-poly-vec* object) ;; unknown type
(define-extern ease-in-out function)
(define-extern cos-rad function)
(define-extern atan0 function)
(define-extern asin function)
(define-extern vector-cos-rad! function)
;;(define-extern sincos-table object) ;; unknown type
;;(define-extern exp-strail object) ;; unknown type
(define-extern tan-rad function)
(define-extern coserp-clamp function)
(define-extern tan function)
(define-extern sin-rad function)
;;(define-extern float-type object) ;; unknown type
(define-extern deg-seek-smooth function)
;;(define-extern binary-table object) ;; unknown type
;;(define-extern *cos-poly-vec* object) ;; unknown type
(define-extern sincos! function)
(define-extern vector-rad<-vector-deg! function)
(define-extern radmod function)
;;(define-extern sound-rpc-set-falloff-curve object) ;; unknown type
;;(define-extern *sound-bank-2* object) ;; unknown type
;;(define-extern sound-rpc-reload-info object) ;; unknown type
;;(define-extern sound-rpc-stop-sound object) ;; unknown type
;;(define-extern sound-rpc-list-sounds object) ;; unknown type
;;(define-extern *current-sound-id* object) ;; unknown type
;;(define-extern sound-bank-id object) ;; unknown type
;;(define-extern sound-rpc-get-irx-version object) ;; unknown type
;;(define-extern sound-rpc-load-music object) ;; unknown type
;;(define-extern sound-rpc-set-ear-trans object) ;; unknown type
;;(define-extern ambient-sound object) ;; unknown type
;;(define-extern sound-rpc-pause-group object) ;; unknown type
;;(define-extern sound-rpc-shutdown object) ;; unknown type
;;(define-extern sound-rpc-unload-bank object) ;; unknown type
;;(define-extern sound-rpc-pause-sound object) ;; unknown type
;;(define-extern sound-id object) ;; unknown type
;;(define-extern sound-play-parms object) ;; unknown type
;;(define-extern sound-rpc-load-bank object) ;; unknown type
;;(define-extern sound-rpc-set-master-volume object) ;; unknown type
;;(define-extern sound-rpc-set-param object) ;; unknown type
;;(define-extern *sound-bank-1* object) ;; unknown type
;;(define-extern sound-rpc-stop-group object) ;; unknown type
;;(define-extern sound-rpc-play object) ;; unknown type
;;(define-extern sound-rpc-cmd object) ;; unknown type
(define-extern sound-spec type)
;;(define-extern sound-rpc-set-sound-falloff object) ;; unknown type
;;(define-extern sound-rpc-union object) ;; unknown type
;;(define-extern sound-rpc-unload-music object) ;; unknown type
;;(define-extern sound-rpc-set-language object) ;; unknown type
;;(define-extern sound-rpc-set-reverb object) ;; unknown type
;;(define-extern sound-rpc-sound-cmd object) ;; unknown type
;;(define-extern sound-rpc-group-cmd object) ;; unknown type
;;(define-extern sound-rpc-bank-cmd object) ;; unknown type
;;(define-extern sound-rpc-continue-sound object) ;; unknown type
;;(define-extern sound-rpc-set-flava object) ;; unknown type
;;(define-extern sound-name object) ;; unknown type
;;(define-extern sound-rpc-continue-group object) ;; unknown type
;;(define-extern timer-mode object) ;; unknown type
;;(define-extern timer-hold-bank object) ;; unknown type
;;(define-extern stopwatch object) ;; unknown type
;;(define-extern *ticks-per-frame* object) ;; unknown type
;;(define-extern profile-bar object) ;; unknown type
(define-extern timer-init function)
;;(define-extern timer-bank object) ;; unknown type
;;(define-extern profile-frame object) ;; unknown type
(define-extern stopwatch-init function)
(define-extern stopwatch-elapsed-seconds function)
(define-extern stopwatch-begin function)
(define-extern stopwatch-elapsed-ticks function)
(define-extern disable-irq function)
(define-extern timer-reset function)
(define-extern enable-irq function)
(define-extern stopwatch-start function)
(define-extern timer-count function)
(define-extern stopwatch-end function)
(define-extern stopwatch-stop function)
(define-extern stopwatch-reset function)
;;(define-extern vif-stat object) ;; unknown type
;;(define-extern vif-fbrst object) ;; unknown type
;;(define-extern vif-err object) ;; unknown type
;;(define-extern vif-bank object) ;; unknown type
(define-extern dma-count-until-done function)
;;(define-extern vif-tag object) ;; unknown type
(define-extern dma-send-no-scratch function)
;;(define-extern dma-tag object) ;; unknown type
;;(define-extern dma-chcr object) ;; unknown type
;;(define-extern dma-bank-spr object) ;; unknown type
;;(define-extern dma-bucket object) ;; unknown type
(define-extern dma-sync-with-count function)
;;(define-extern vu-code-block object) ;; unknown type
(define-extern dma-sync-fast function)
;;(define-extern vif-mask object) ;; unknown type
;;(define-extern dma-bank-control object) ;; unknown type
;;(define-extern vif-unpack-imm object) ;; unknown type
;;(define-extern dma-ctrl object) ;; unknown type
;;(define-extern dma-enable object) ;; unknown type
;;(define-extern vu-stat object) ;; unknown type
;;(define-extern dma-bank-source object) ;; unknown type
;;(define-extern dma-bank-vif object) ;; unknown type
;;(define-extern dma-sqwc object) ;; unknown type
;;(define-extern vif-stcycl-imm object) ;; unknown type
;;(define-extern dma-bank object) ;; unknown type
;;(define-extern flush-cache object) ;; unknown type
;;(define-extern *video-parms* object) ;; unknown type
;;(define-extern video-parms object) ;; unknown type
;;(define-extern generic-bucket-state object) ;; unknown type
;;(define-extern *vu1-enable-user-menu* object) ;; unknown type
(define-extern dma-foreground-sink type)
(define-extern dma-foreground-sink-group type)
;;(define-extern *vu1-enable-user* object) ;; unknown type
(define-extern generic-dma-foreground-sink type)
(define-extern reset-vif1-path function)
(define-extern dump-vu1-range function)
(define-extern symlink3 function)
(define-extern dma-sync-crash function)
(define-extern clear-vu0-mem function)
(define-extern dump-vu1-mem function)
(define-extern dma-send-from-spr function)
(define-extern dma-send-to-spr function)
(define-extern dma-sync-hang function)
(define-extern symlink2 function)
(define-extern ultimate-memcpy function)
(define-extern dma-send-to-spr-no-flush function)
(define-extern dma-initialize function)
(define-extern dma-send function)
(define-extern dma-send-chain-no-flush function)
(define-extern clear-vu1-mem function)
(define-extern dma-send-from-spr-no-flush function)
;;(define-extern *video-reset-parm* object) ;; unknown type
(define-extern dma-send-chain function)
(define-extern dma-send-chain-no-tte function)
;;(define-extern reset-path object) ;; unknown type
;;(define-extern reset-graph object) ;; unknown type
;;(define-extern dma-sync object) ;; unknown type
;;(define-extern dma-packet-array object) ;; unknown type
(define-extern dma-buffer-inplace-new function)
(define-extern dma-buffer-length function)
;;(define-extern dma-gif-packet object) ;; unknown type
(define-extern dma-buffer-free function)
(define-extern dma-buffer-add-vu-function function)
;;(define-extern dma-packet object) ;; unknown type
;;(define-extern dma-buffer object) ;; unknown type
(define-extern dma-buffer-send-chain function)
(define-extern dma-buffer-send function)
(define-extern dma-bucket-insert-tag function)
(define-extern dma-buffer-add-buckets function)
(define-extern dma-buffer-patch-buckets function)
;;(define-extern *vif-disasm-table* object) ;; unknown type
(define-extern disasm-vif-tag function)
(define-extern disasm-dma-tag function)
(define-extern disasm-vif-details function)
(define-extern vif-disasm-element type)
;;(define-extern *dma-disasm* object) ;; unknown type
(define-extern disasm-dma-list function)
;;(define-extern error object) ;; unknown type
;;(define-extern details object) ;; unknown type
(define-extern cpad-set-buzz! function)
;;(define-extern *cpad-debug* object) ;; unknown type
(define-extern analog-input function)
(define-extern buzz-stop! function)
;;(define-extern cpad-info object) ;; unknown type
;;(define-extern hw-cpad object) ;; unknown type
(define-extern cpad-invalid! function)
;;(define-extern cpad-list object) ;; unknown type
;;(define-extern *cheat-mode* object) ;; unknown type
;;(define-extern *cpad-list* object) ;; unknown type
(define-extern service-cpads function)
(define-extern get-integral-current-time function)
(define-extern get-current-time function)
;;(define-extern cpad-get-data object) ;; unknown type
;;(define-extern cpad-open object) ;; unknown type
(define-extern psm->string function)
;;(define-extern gs-trxreg object) ;; unknown type
;;(define-extern gif-packet object) ;; unknown type
;;(define-extern gs-fogcol object) ;; unknown type
;;(define-extern gs-zbuf object) ;; unknown type
;;(define-extern gif-bank object) ;; unknown type
;;(define-extern *fog-color* object) ;; unknown type
;;(define-extern gs-trxpos object) ;; unknown type
;;(define-extern gs-xy-offset object) ;; unknown type
;;(define-extern gs-tex1 object) ;; unknown type
;;(define-extern gs-prim object) ;; unknown type
;;(define-extern gif-tag object) ;; unknown type
;;(define-extern gs-display object) ;; unknown type
;;(define-extern gs-prmode-cont object) ;; unknown type
;;(define-extern gs-scissor object) ;; unknown type
;;(define-extern gs-st object) ;; unknown type
;;(define-extern gs-smode2 object) ;; unknown type
(define-extern add-reg-gif-packet function)
;;(define-extern draw-context object) ;; unknown type
;;(define-extern gs-texclut object) ;; unknown type
;;(define-extern gs-bgcolor object) ;; unknown type
(define-extern open-gif-packet function)
;;(define-extern gif-tag-count object) ;; unknown type
;;(define-extern gs-test object) ;; unknown type
;;(define-extern gs-tex0 object) ;; unknown type
;;(define-extern gif-tag64 object) ;; unknown type
;;(define-extern gs-alpha object) ;; unknown type
;;(define-extern gs-miptbp object) ;; unknown type
;;(define-extern gs-color-clamp object) ;; unknown type
;;(define-extern gif-p3cnt object) ;; unknown type
;;(define-extern gs-clamp object) ;; unknown type
;;(define-extern gs-uv object) ;; unknown type
;;(define-extern gif-stat object) ;; unknown type
(define-extern psm-page-height function)
;;(define-extern gif-mode object) ;; unknown type
(define-extern psm-size function)
;;(define-extern gs-trxdir object) ;; unknown type
;;(define-extern gs-xyzf object) ;; unknown type
;;(define-extern gs-csr object) ;; unknown type
(define-extern draw-context-set-xy function)
;;(define-extern *default-regs-buffer* object) ;; unknown type
;;(define-extern gs-frame object) ;; unknown type
;;(define-extern gs-texa object) ;; unknown type
;;(define-extern gs-bank object) ;; unknown type
;;(define-extern gif-cnt object) ;; unknown type
;;(define-extern gif-ctrl object) ;; unknown type
;;(define-extern gs-gif-tag object) ;; unknown type
;;(define-extern gs-pmode object) ;; unknown type
;;(define-extern gs-dthe object) ;; unknown type
;;(define-extern gs-fog object) ;; unknown type
;;(define-extern gs-xyz object) ;; unknown type
(define-extern default-buffer-init function)
;;(define-extern gif-tag-prim object) ;; unknown type
;;(define-extern gif-p3tag object) ;; unknown type
(define-extern close-gif-packet function)
;;(define-extern gs-display-fb object) ;; unknown type
;;(define-extern gs-bitbltbuf object) ;; unknown type
;;(define-extern gs-rgbaq object) ;; unknown type
;;(define-extern display-env object) ;; unknown type
;;(define-extern display-frame object) ;; unknown type
;;(define-extern display object) ;; unknown type
;;(define-extern *post-draw-hook* object) ;; unknown type
;;(define-extern virtual-frame object) ;; unknown type
(define-extern put-draw-env function)
;;(define-extern draw-env object) ;; unknown type
;;(define-extern *pre-draw-hook* object) ;; unknown type
(define-extern set-display function)
(define-extern vector4-lerp! function)
(define-extern rotate-y<-vector+vector function)
(define-extern rot-zxy-from-vector! function)
(define-extern vector3s-copy! function)
(define-extern vector-seek-2d-yz-smooth! function)
(define-extern vector-from-ups! function)
(define-extern vector-seek-2d-xz-smooth! function)
(define-extern vector/! function)
(define-extern rand-vu-sphere-point! function)
(define-extern vector-vector-xz-distance function)
(define-extern vector-v*float+! function)
(define-extern vector-length-max! function)
(define-extern vector*! function)
(define-extern vector+*! function)
(define-extern vector-deg-lerp-clamp! function)
(define-extern vector-negate-in-place! function)
(define-extern vector--float*! function)
(define-extern rot-zyx-from-vector! function)
(define-extern vector4-lerp-clamp! function)
(define-extern vector-seconds! function)
(define-extern vector-degmod function)
(define-extern vector-v*float++! function)
(define-extern vector-degi function)
(define-extern sphere<-vector+r! function)
(define-extern vector-xz-length-max! function)
(define-extern vector3s-! function)
(define-extern vector3s+! function)
(define-extern vector-average! function)
(define-extern vector-cvt.w.s! function)
(define-extern vector-v! function)
(define-extern vector-degf function)
(define-extern vector-vector-xz-distance-squared function)
(define-extern vector-xz-length-squared function)
(define-extern vector-lerp-clamp! function)
(define-extern vector-cvt.s.w! function)
(define-extern vector-to-ups! function)
(define-extern vector-seek! function)
(define-extern vector-seconds function)
(define-extern vector-deg-diff function)
(define-extern vector-delta function)
(define-extern vector+float! function)
(define-extern vector-v+! function)
(define-extern vector3s*float! function)
(define-extern spheres-overlap? function)
(define-extern vector-length-squared function)
(define-extern vector-lerp! function)
(define-extern vector-rotate-around-y! function)
(define-extern vector-*! function)
(define-extern seek-with-smooth function)
(define-extern vector-v*float! function)
(define-extern vector-v++! function)
(define-extern vector-seek-3d-smooth! function)
(define-extern sphere<-vector! function)
(define-extern vector-float/! function)
(define-extern vector= function)
;;(define-extern *display* object) ;; unknown type
(define-extern make-vfile-name function)
;;(define-extern file-stream object) ;; unknown type
(define-extern file-info type)
(define-extern make-file-name function)
(define-extern file-info-correct-version? function)
;;(define-extern *file-temp-string* object) ;; unknown type
(define-extern file-stream-read-string function)
;;(define-extern file-stream-length object) ;; unknown type
;;(define-extern file-stream-read object) ;; unknown type
;;(define-extern file-stream-open object) ;; unknown type
;;(define-extern load-dir object) ;; unknown type
;;(define-extern external-art-buffer object) ;; unknown type
;;(define-extern load-dir-art-group object) ;; unknown type
(define-extern spool-anim type)
;;(define-extern external-art-control object) ;; unknown type
(define-extern art-group type)
;;(define-extern texture-page-segment object) ;; unknown type
;;(define-extern *sky-base-block* object) ;; unknown type
;;(define-extern *depth-cue-base-block* object) ;; unknown type
;;(define-extern *depth-cue-base-vram-word* object) ;; unknown type
;;(define-extern *eyes-base-block* object) ;; unknown type
;;(define-extern *ocean-base-page* object) ;; unknown type
(define-extern adgif-shader-array type)
;;(define-extern adgif-shader object) ;; unknown type
(define-extern texture type)
;;(define-extern *texture-enable-user* object) ;; unknown type
;;(define-extern texture-page-dir-entry object) ;; unknown type
;;(define-extern texture-pool object) ;; unknown type
;;(define-extern *ocean-base-block* object) ;; unknown type
;;(define-extern *texture-page-dir* object) ;; unknown type
;;(define-extern *ocean-base-vram-word* object) ;; unknown type
;;(define-extern *texture-enable-user-menu* object) ;; unknown type
(define-extern texture-page type)
;;(define-extern *depth-cue-base-page* object) ;; unknown type
;;(define-extern texture-pool-segment object) ;; unknown type
;;(define-extern *texture-relocate-later* object) ;; unknown type
;;(define-extern *sky-base-vram-word* object) ;; unknown type
;;(define-extern texture-id object) ;; unknown type
;;(define-extern *sky-base-page* object) ;; unknown type
(define-extern texture-page-dir type)
;;(define-extern texture-relocate-later object) ;; unknown type
;;(define-extern texture-link object) ;; unknown type
(define-extern texture-mip->segment function)
;;(define-extern shader-ptr object) ;; unknown type
;;(define-extern *eyes-base-vram-word* object) ;; unknown type
;;(define-extern *eyes-base-page* object) ;; unknown type
;;(define-extern login-state object) ;; unknown type
(define-extern level-vis-info type)
(define-extern level-load-info type)
;;(define-extern *level* object) ;; unknown type
(define-extern level-group type)
(define-extern level type)
;;(define-extern reserved object) ;; unknown type
;;(define-extern default object) ;; unknown type
;;(define-extern inactive object) ;; unknown type
;;(define-extern cull-info object) ;; unknown type
;;(define-extern math-camera object) ;; unknown type
;;(define-extern vis-gif-tag object) ;; unknown type
;;(define-extern *math-camera* object) ;; unknown type
;;(define-extern *math-camera-fog-correction* object) ;; unknown type
(define-extern init-for-transform function)
(define-extern move-target-from-pad function)
(define-extern transform-point-vector! function)
(define-extern fog-corrector-setup function)
;;(define-extern fog-corrector object) ;; unknown type
(define-extern math-cam-start-smoothing function)
(define-extern update-math-camera function)
(define-extern transform-point-qword! function)
(define-extern transform-point-vector-scale! function)
(define-extern sprite-distorter-generate-tables function)
;;(define-extern ntsc object) ;; unknown type
;;(define-extern aspect4x3 object) ;; unknown type
;;(define-extern font-work object) ;; unknown type
(define-extern font-set-tex0 function)
;;(define-extern *font-default-matrix* object) ;; unknown type
;;(define-extern char-verts object) ;; unknown type
;;(define-extern char-color object) ;; unknown type
;;(define-extern font-context object) ;; unknown type
;;(define-extern *font-work* object) ;; unknown type
;;(define-extern decomp-work object) ;; unknown type
;;(define-extern install-handler object) ;; unknown type
;;(define-extern *oddeven* object) ;; unknown type
;;(define-extern *profile-y* object) ;; unknown type
(define-extern vif1-handler function)
;;(define-extern *pause-context* object) ;; unknown type
;;(define-extern *profile-h* object) ;; unknown type
;;(define-extern *profile-x* object) ;; unknown type
(define-extern set-draw-env-offset function)
;;(define-extern *vblank-counter* object) ;; unknown type
;;(define-extern *vu0-dma-list* object) ;; unknown type
;;(define-extern *profile-w* object) ;; unknown type
(define-extern set-display-gs-state function)
(define-extern draw-quad2d function)
(define-extern put-display-alpha-env function)
(define-extern set-display-gs-state-offset function)
(define-extern screen-gradient function)
(define-extern draw-sprite2d-xy function)
(define-extern set-draw-env function)
(define-extern reset-display-gs-state function)
(define-extern vblank-handler function)
;;(define-extern *profile-ticks* object) ;; unknown type
;;(define-extern *font-context* object) ;; unknown type
(define-extern vif1-handler-debug function)
(define-extern set-display-env function)
(define-extern set-display2 function)
(define-extern allocate-dma-buffers function)
(define-extern draw-string-xy function)
;;(define-extern end-draw object) ;; unknown type
(define-extern start function)
;;(define-extern pal object) ;; unknown type
(define-extern get-video-mode function)
;;(define-extern end-calc object) ;; unknown type
;;(define-extern engine object) ;; unknown type
;;(define-extern connectable object) ;; unknown type
(define-extern connection-process-apply function)
;;(define-extern connection object) ;; unknown type
;;(define-extern *common-text* object) ;; unknown type
;;(define-extern *common-text-heap* object) ;; unknown type
;;(define-extern kheap object) ;; unknown type
;;(define-extern *text-group-names* object) ;; unknown type
;;(define-extern game-text-info object) ;; unknown type
;;(define-extern game-text object) ;; unknown type
;;(define-extern scf-time object) ;; unknown type
;;(define-extern setting-data object) ;; unknown type
;;(define-extern setting-control object) ;; unknown type
(define-extern store-image function)
;;(define-extern gs-store-image-packet object) ;; unknown type
(define-extern gs-set-default-store-image function)
;;(define-extern file-stream-close object) ;; unknown type
;;(define-extern file-stream-write object) ;; unknown type
;;(define-extern write object) ;; unknown type
;;(define-extern gs-store-image object) ;; unknown type
;;(define-extern sync-path object) ;; unknown type
;;(define-extern *temp-mem-usage* object) ;; unknown type
;;(define-extern *mem-usage* object) ;; unknown type
;;(define-extern memory-usage-block object) ;; unknown type
;;(define-extern *dma-mem-usage* object) ;; unknown type
;;(define-extern memory-usage-info object) ;; unknown type
(define-extern upload-vram-pages function)
;;(define-extern *shader-list* object) ;; unknown type
(define-extern adgif-shader-login-no-remap-fast function)
;;(define-extern mt8-block-table object) ;; unknown type
(define-extern texture-bpp function)
(define-extern gs-blocks-used function)
(define-extern relocate-later function)
(define-extern gs-page-width function)
(define-extern upload-vram-pages-pris function)
;;(define-extern ct16s-block-table object) ;; unknown type
;;(define-extern *txt-dma-list* object) ;; unknown type
(define-extern adgif-shader-login-fast function)
(define-extern gs-page-height function)
;;(define-extern mz16s-block-table object) ;; unknown type
(define-extern lookup-texture-by-id function)
;;(define-extern *texture-pool* object) ;; unknown type
(define-extern dma-buffer-add-ref-texture function)
(define-extern link-texture-by-id function)
;;(define-extern mt4-block-table object) ;; unknown type
;;(define-extern *edit-shader* object) ;; unknown type
(define-extern adgif-shader-update! function)
;;(define-extern ct16-block-table object) ;; unknown type
(define-extern texture-page-common-boot-allocate function)
(define-extern gs-find-block function)
(define-extern texture-page-level-allocate function)
(define-extern texture-page-common-allocate function)
(define-extern texture-page-login function)
(define-extern texture-page-dir-inspect function)
(define-extern texture-qwc function)
(define-extern adgif-shader-login function)
(define-extern adgif-shader-login-no-remap function)
;;(define-extern mz16-block-table object) ;; unknown type
(define-extern gs-largest-block function)
;;(define-extern ct32-24-block-table object) ;; unknown type
(define-extern gs-block-width function)
(define-extern adgif-shader<-texture-simple! function)
(define-extern texture-relocate function)
(define-extern adgif-shader<-texture! function)
(define-extern update-vram-pages function)
(define-extern texture-page-near-allocate-0 function)
;;(define-extern mz32-24-block-table object) ;; unknown type
(define-extern texture-page-default-allocate function)
(define-extern texture-page-size-check function)
(define-extern gs-block-height function)
(define-extern physical-address function)
(define-extern upload-vram-data function)
(define-extern texture-page-near-allocate-1 function)
;;(define-extern *font-texture* object) ;; unknown type
(define-extern adgif-shader<-texture-with-update! function)
;;(define-extern full object) ;; unknown type
;;(define-extern active object) ;; unknown type
;;(define-extern loado object) ;; unknown type
(define-extern movie? function)
(define-extern level-remap-texture function)
;;(define-extern loading-level object) ;; unknown type
;;(define-extern *display-split-boxes* object) ;; unknown type
;;(define-extern frame-stats object) ;; unknown type
;;(define-extern *artist-fix-visible* object) ;; unknown type
;;(define-extern *ambient-sound-class* object) ;; unknown type
;;(define-extern *display-art-control* object) ;; unknown type
;;(define-extern *display-camera-info* object) ;; unknown type
;;(define-extern *display-profile* object) ;; unknown type
;;(define-extern *display-ambient-poi-marks* object) ;; unknown type
;;(define-extern *artist-all-visible* object) ;; unknown type
;;(define-extern *display-edge-collision-marks* object) ;; unknown type
;;(define-extern *stats-poly* object) ;; unknown type
;;(define-extern *dproc* object) ;; unknown type
;;(define-extern *display-ambient-light-marks* object) ;; unknown type
;;(define-extern *display-cam-other* object) ;; unknown type
;;(define-extern *frame-stats* object) ;; unknown type
;;(define-extern *display-lights* object) ;; unknown type
;;(define-extern *display-instance-info* object) ;; unknown type
;;(define-extern *stats-memory* object) ;; unknown type
;;(define-extern *display-ambient-music-marks* object) ;; unknown type
;;(define-extern *weather-off* object) ;; unknown type
;;(define-extern *debug-pause* object) ;; unknown type
;;(define-extern *progress-hook* object) ;; unknown type
;;(define-extern *display-ambient-dark-marks* object) ;; unknown type
;;(define-extern *time-of-day-effects* object) ;; unknown type
;;(define-extern *display-file-info* object) ;; unknown type
;;(define-extern *display-iop-info* object) ;; unknown type
;;(define-extern *display-geo-marks* object) ;; unknown type
;;(define-extern *ocean-subdivide-draw-mode* object) ;; unknown type
(define-extern screen-filter type)
;;(define-extern *time-of-day-fast* object) ;; unknown type
;;(define-extern *stats-dma-test* object) ;; unknown type
;;(define-extern *subdivide-draw-mode* object) ;; unknown type
;;(define-extern *display-split-box-info* object) ;; unknown type
;;(define-extern *display-ground-stats* object) ;; unknown type
;;(define-extern *teleport-count* object) ;; unknown type
;;(define-extern *stats-target* object) ;; unknown type
;;(define-extern *sync-dma* object) ;; unknown type
;;(define-extern *stats-memory-short* object) ;; unknown type
;;(define-extern *display-entity-errors* object) ;; unknown type
;;(define-extern *display-collide-history* object) ;; unknown type
;;(define-extern *display-sidekick-stats* object) ;; unknown type
;;(define-extern *display-nav-marks* object) ;; unknown type
;;(define-extern *display-camera-old-stats* object) ;; unknown type
;;(define-extern *display-perf-stats* object) ;; unknown type
;;(define-extern *draw-hook* object) ;; unknown type
;;(define-extern *stats-collide* object) ;; unknown type
;;(define-extern *display-cam-collide-history* object) ;; unknown type
;;(define-extern *debug-hook* object) ;; unknown type
;;(define-extern *artist-error-spheres* object) ;; unknown type
;;(define-extern *display-quad-stats* object) ;; unknown type
;;(define-extern *display-cam-los-info* object) ;; unknown type
;;(define-extern *display-camera-last-attacker* object) ;; unknown type
;;(define-extern *display-collide-cache* object) ;; unknown type
;;(define-extern *display-collision-marks* object) ;; unknown type
;;(define-extern *display-actor-anim* object) ;; unknown type
;;(define-extern *display-tri-stats* object) ;; unknown type
;;(define-extern *run* object) ;; unknown type
;;(define-extern *display-cam-coll-marks* object) ;; unknown type
;;(define-extern *display-ambient-hint-marks* object) ;; unknown type
;;(define-extern *display-cam-los-debug* object) ;; unknown type
;;(define-extern *display-strip-lines* object) ;; unknown type
;;(define-extern *display-process-anim* object) ;; unknown type
;;(define-extern *display-actor-marks* object) ;; unknown type
(define-extern *menu-hook* function)
;;(define-extern *display-load-boundaries* object) ;; unknown type
;;(define-extern *display-water-marks* object) ;; unknown type
;;(define-extern *artist-flip-visible* object) ;; unknown type
;;(define-extern *display-level-spheres* object) ;; unknown type
;;(define-extern *teleport* object) ;; unknown type
;;(define-extern *display-cam-master-marks* object) ;; unknown type
;;(define-extern *display-ambient-sound-marks* object) ;; unknown type
;;(define-extern *artist-fix-frustum* object) ;; unknown type
;;(define-extern *display-ambient-weather-off-marks* object) ;; unknown type
;;(define-extern *display-cam-los-marks* object) ;; unknown type
;;(define-extern *stats-bsp* object) ;; unknown type
;;(define-extern *display-ambient-ocean-near-off-marks* object) ;; unknown type
;;(define-extern *display-texture-download* object) ;; unknown type
;;(define-extern *artist-use-menu-subdiv* object) ;; unknown type
;;(define-extern *display-xyz-axes* object) ;; unknown type
;;(define-extern *record-cam-collide-history* object) ;; unknown type
;;(define-extern *display-deci-count* object) ;; unknown type
;;(define-extern *display-memcard-info* object) ;; unknown type
;;(define-extern *slow-frame-rate* object) ;; unknown type
;;(define-extern *display-ambient-ocean-off-marks* object) ;; unknown type
;;(define-extern *display-target-marks* object) ;; unknown type
;;(define-extern *camera-no-mip-correction* object) ;; unknown type
;;(define-extern *display-path-marks* object) ;; unknown type
;;(define-extern *dma-timeout-hook* object) ;; unknown type
;;(define-extern *display-camera-marks* object) ;; unknown type
;;(define-extern *display-level-border* object) ;; unknown type
;;(define-extern *display-hipri-collision-marks* object) ;; unknown type
;;(define-extern *display-sprite-info* object) ;; unknown type
;;(define-extern *display-actor-graph* object) ;; unknown type
;;(define-extern *stats-buffer* object) ;; unknown type
;;(define-extern *display-vol-marks* object) ;; unknown type
;;(define-extern *display-actor-vis* object) ;; unknown type
;;(define-extern *display-render-collision* object) ;; unknown type
;;(define-extern cspace object) ;; unknown type
;;(define-extern bone object) ;; unknown type
;;(define-extern cspace-array object) ;; unknown type
;;(define-extern bone-cache object) ;; unknown type
(define-extern joint type)
;;(define-extern skeleton object) ;; unknown type
;;(define-extern drawable-error object) ;; unknown type
;;(define-extern drawable object) ;; unknown type
;;(define-extern *collide-nodes* object) ;; unknown type
;;(define-extern drawable-group object) ;; unknown type
;;(define-extern drawable-inline-array object) ;; unknown type
;;(define-extern draw-node-dma object) ;; unknown type
(define-extern draw-node type)
(define-extern drawable-inline-array-node type)
(define-extern drawable-tree-array type)
;;(define-extern drawable-tree object) ;; unknown type
(define-extern drawable-actor type)
(define-extern drawable-tree-actor type)
(define-extern drawable-inline-array-actor type)
(define-extern drawable-ambient type)
;;(define-extern level-hint object) ;; unknown type
(define-extern drawable-inline-array-ambient type)
(define-extern drawable-tree-ambient type)
;;(define-extern ambient-list object) ;; unknown type
(define-extern level-hint-control type)
(define-extern task-hint-control type)
(define-extern task-hint-control-group type)
;;(define-extern generic-interp-job object) ;; unknown type
;;(define-extern ad-cmd object) ;; unknown type
;;(define-extern generic-strip object) ;; unknown type
;;(define-extern gsf-vertex object) ;; unknown type
;;(define-extern gsf-ik object) ;; unknown type
;;(define-extern generic-gif-tag object) ;; unknown type
;;(define-extern kmalloc object) ;; unknown type
;;(define-extern gsf-fx-vertex-array object) ;; unknown type
;;(define-extern generic-envmap-saves object) ;; unknown type
;;(define-extern generic-storage object) ;; unknown type
;;(define-extern gsf-vertex-array object) ;; unknown type
;;(define-extern gsf-info object) ;; unknown type
;;(define-extern gsf-buffer object) ;; unknown type
;;(define-extern generic-frag object) ;; unknown type
;;(define-extern generic-saves object) ;; unknown type
;;(define-extern gsf-header object) ;; unknown type
;;(define-extern gsf-fx-vertex object) ;; unknown type
;;(define-extern *gsf-buffer* object) ;; unknown type
;;(define-extern generic-consts object) ;; unknown type
;;(define-extern generic-envmap-consts object) ;; unknown type
;;(define-extern vu-lights object) ;; unknown type
;;(define-extern light-ellipse object) ;; unknown type
;;(define-extern light-array object) ;; unknown type
;;(define-extern light-volume-array object) ;; unknown type
;;(define-extern light-volume object) ;; unknown type
;;(define-extern light-group object) ;; unknown type
;;(define-extern light object) ;; unknown type
;;(define-extern light-volume-sphere object) ;; unknown type
;;(define-extern light-volume-planes object) ;; unknown type
(define-extern ocean-trans-indices type)
(define-extern ocean-work type)
;;(define-extern ocean-mid-upload object) ;; unknown type
;;(define-extern ocean-vertex object) ;; unknown type
;;(define-extern ocean-mid-mask object) ;; unknown type
;;(define-extern *ocean-facing* object) ;; unknown type
(define-extern ocean-mid-masks type)
;;(define-extern ocean-mid-vertex object) ;; unknown type
;;(define-extern *ocean-mid-off* object) ;; unknown type
;;(define-extern *ocean-verts* object) ;; unknown type
;;(define-extern ocean-trans-strip object) ;; unknown type
;;(define-extern *ocean-heights* object) ;; unknown type
;;(define-extern ocean-colors object) ;; unknown type
;;(define-extern ocean-vu0-work object) ;; unknown type
;;(define-extern ocean-corner object) ;; unknown type
;;(define-extern ocean-trans-index object) ;; unknown type
;;(define-extern ocean-texture-constants object) ;; unknown type
(define-extern ocean-map type)
;;(define-extern *ocean-near-off* object) ;; unknown type
(define-extern ocean-mid-indices type)
;;(define-extern ocean-trans-strip-array object) ;; unknown type
;;(define-extern ocean-mid-upload2 object) ;; unknown type
;;(define-extern ocean-near-upload object) ;; unknown type
;;(define-extern ocean-near-colors object) ;; unknown type
;;(define-extern ocean-texture-work object) ;; unknown type
;;(define-extern ocean-near-constants object) ;; unknown type
;;(define-extern ocean-near-index object) ;; unknown type
;;(define-extern ocean-wave-info object) ;; unknown type
;;(define-extern ocean-mid-work object) ;; unknown type
;;(define-extern *ocean-off* object) ;; unknown type
;;(define-extern ocean-near-work object) ;; unknown type
;;(define-extern *ocean-work* object) ;; unknown type
;;(define-extern ocean-wave-data object) ;; unknown type
(define-extern ocean-near-indices type)
;;(define-extern ocean-wave-frames object) ;; unknown type
;;(define-extern ocean-spheres object) ;; unknown type
;;(define-extern ocean-trans-mask object) ;; unknown type
;;(define-extern ocean-mid-constants object) ;; unknown type
;;(define-extern ocean-near-vertex object) ;; unknown type
;;(define-extern *ocean-trans-down-left-table* object) ;; unknown type
;;(define-extern *ocean-up-table* object) ;; unknown type
;;(define-extern *ocean-up-left-table* object) ;; unknown type
;;(define-extern *ocean-trans-up-left-table* object) ;; unknown type
;;(define-extern *ocean-trans-st-table* object) ;; unknown type
;;(define-extern *ocean-down-left-table* object) ;; unknown type
;;(define-extern *ocean-trans-down-table* object) ;; unknown type
;;(define-extern *ocean-trans-right-table* object) ;; unknown type
;;(define-extern *ocean-trans-down-right-table* object) ;; unknown type
;;(define-extern *ocean-trans-left-table* object) ;; unknown type
;;(define-extern *ocean-down-right-table* object) ;; unknown type
;;(define-extern *ocean-trans-up-right-table* object) ;; unknown type
;;(define-extern *ocean-trans-strip-array* object) ;; unknown type
;;(define-extern *ocean-left-table* object) ;; unknown type
;;(define-extern *ocean-trans-up-table* object) ;; unknown type
;;(define-extern *ocean-up-right-table* object) ;; unknown type
;;(define-extern *ocean-trans-corner-table* object) ;; unknown type
;;(define-extern *ocean-right-table* object) ;; unknown type
;;(define-extern *ocean-down-table* object) ;; unknown type
;;(define-extern *ocean-trans-indices-village2* object) ;; unknown type
;;(define-extern *ocean-trans-indices-village1* object) ;; unknown type
;;(define-extern *ocean-near-indices-village2* object) ;; unknown type
;;(define-extern *ocean-colors-village1* object) ;; unknown type
;;(define-extern *ocean-map-village2* object) ;; unknown type
;;(define-extern *ocean-trans-indices-sunken* object) ;; unknown type
;;(define-extern *ocean-map-sunken* object) ;; unknown type
;;(define-extern *ocean-mid-indices-sunken* object) ;; unknown type
;;(define-extern *ocean-mid-masks-village2* object) ;; unknown type
;;(define-extern *ocean-mid-indices-village1* object) ;; unknown type
;;(define-extern *ocean-near-indices-village1* object) ;; unknown type
;;(define-extern *ocean-spheres-village2* object) ;; unknown type
;;(define-extern *ocean-colors-village2* object) ;; unknown type
;;(define-extern *ocean-mid-masks-village1* object) ;; unknown type
;;(define-extern *ocean-near-indices-sunken* object) ;; unknown type
;;(define-extern *ocean-mid-indices-village2* object) ;; unknown type
;;(define-extern *ocean-mid-masks-sunken* object) ;; unknown type
;;(define-extern *ocean-map-village1* object) ;; unknown type
;;(define-extern *ocean-spheres-village1* object) ;; unknown type
;;(define-extern *ocean-wave-frames* object) ;; unknown type
;;(define-extern sky-color-hour object) ;; unknown type
;;(define-extern sky-circle-data object) ;; unknown type
;;(define-extern *sky-drawn* object) ;; unknown type
;;(define-extern sky-vertex object) ;; unknown type
;;(define-extern sky-sun-data object) ;; unknown type
;;(define-extern sky-color-day object) ;; unknown type
;;(define-extern *cloud-drawn* object) ;; unknown type
;;(define-extern sky-tng-data object) ;; unknown type
;;(define-extern sky-orbit object) ;; unknown type
;;(define-extern sky-upload-data object) ;; unknown type
;;(define-extern *sky-parms* object) ;; unknown type
;;(define-extern sky-moon-data object) ;; unknown type
;;(define-extern *sky-upload-data* object) ;; unknown type
;;(define-extern sky-work object) ;; unknown type
;;(define-extern sky-parms object) ;; unknown type
;;(define-extern mood-fog object) ;; unknown type
;;(define-extern mood-lights-table object) ;; unknown type
;;(define-extern mood-fog-table object) ;; unknown type
;;(define-extern mood-context object) ;; unknown type
;;(define-extern mood-sun-table object) ;; unknown type
;;(define-extern mood-lights object) ;; unknown type
;;(define-extern mood-sun object) ;; unknown type
(define-extern time-of-day-context type)
;;(define-extern *time-of-day-context* object) ;; unknown type
;;(define-extern palette-fade-control object) ;; unknown type
;;(define-extern *time-of-day-mode* object) ;; unknown type
;;(define-extern time-of-day-dma object) ;; unknown type
;;(define-extern palette-fade-controls object) ;; unknown type
;;(define-extern *palette-fade-controls* object) ;; unknown type
(define-extern time-of-day-palette type)
;;(define-extern time-of-day-proc object) ;; unknown type
(define-extern skeleton-group type)
(define-extern art-joint-anim type)
;;(define-extern joint-anim-compressed-control object) ;; unknown type
;;(define-extern joint-anim-matrix object) ;; unknown type
;;(define-extern art-mesh-geo object) ;; unknown type
;;(define-extern joint-anim-compressed-hdr object) ;; unknown type
;;(define-extern art-mesh-anim object) ;; unknown type
(define-extern joint-anim-compressed type)
;;(define-extern joint-anim-compressed-fixed object) ;; unknown type
;;(define-extern art-element object) ;; unknown type
;;(define-extern draw-control object) ;; unknown type
;;(define-extern joint-anim-compressed-frame object) ;; unknown type
;;(define-extern joint-anim-drawable object) ;; unknown type
;;(define-extern joint-anim object) ;; unknown type
(define-extern art-joint-geo type)
;;(define-extern art object) ;; unknown type
;;(define-extern lod-group object) ;; unknown type
;;(define-extern joint-anim-frame object) ;; unknown type
;;(define-extern joint-anim-transformq object) ;; unknown type
;;(define-extern lod-set object) ;; unknown type
;;(define-extern new-dynamic-structure object) ;; unknown type
;;(define-extern generic-pris-mtx-save object) ;; unknown type
;;(define-extern generic-constants object) ;; unknown type
;;(define-extern pris-mtx object) ;; unknown type
;;(define-extern merc-blend-data object) ;; unknown type
;;(define-extern mei-texture-scroll object) ;; unknown type
;;(define-extern merc-extra-info object) ;; unknown type
;;(define-extern merc-vu1-low-mem object) ;; unknown type
;;(define-extern merc-byte-header object) ;; unknown type
;;(define-extern merc-blend-ctrl object) ;; unknown type
;;(define-extern ripple-merc-query object) ;; unknown type
;;(define-extern merc-fragment-control object) ;; unknown type
;;(define-extern mei-ripple object) ;; unknown type
;;(define-extern merc-eye-ctrl object) ;; unknown type
;;(define-extern merc-effect object) ;; unknown type
;;(define-extern ripple-wave object) ;; unknown type
;;(define-extern merc-mat-dest object) ;; unknown type
(define-extern merc-fragment-fp-data function)
(define-extern ripple-wave-set type)
;;(define-extern merc-fragment object) ;; unknown type
;;(define-extern merc-vtx object) ;; unknown type
;;(define-extern merc-eye-anim-block object) ;; unknown type
;;(define-extern merc-fp-header object) ;; unknown type
;;(define-extern merc-ctrl-header object) ;; unknown type
;;(define-extern mei-envmap-tint object) ;; unknown type
(define-extern merc-ctrl type)
;;(define-extern ripple-control object) ;; unknown type
;;(define-extern merc-eye-anim-frame object) ;; unknown type
;;(define-extern merc-matrix object) ;; unknown type
;;(define-extern generic-merc-ctrl object) ;; unknown type
;;(define-extern generic-merc-tag object) ;; unknown type
;;(define-extern generic-merc-output object) ;; unknown type
;;(define-extern generic-merc-input object) ;; unknown type
;;(define-extern generic-merc-work object) ;; unknown type
;;(define-extern generic-merc-dcache object) ;; unknown type
;;(define-extern gm-shadow object) ;; unknown type
;;(define-extern generic-merc-ctrl-with-sfx object) ;; unknown type
;;(define-extern generic-tie-stats object) ;; unknown type
;;(define-extern generic-tie-run-control object) ;; unknown type
;;(define-extern generic-tie-matrix object) ;; unknown type
;;(define-extern generic-tie-interp-point object) ;; unknown type
;;(define-extern generic-tie-input object) ;; unknown type
;;(define-extern generic-tie-control object) ;; unknown type
;;(define-extern generic-tie-bps object) ;; unknown type
;;(define-extern generic-tie-shadow object) ;; unknown type
;;(define-extern generic-tie-work object) ;; unknown type
;;(define-extern generic-tie-instance object) ;; unknown type
;;(define-extern generic-tie-base-point object) ;; unknown type
;;(define-extern generic-tie-header object) ;; unknown type
;;(define-extern generic-tie-ips object) ;; unknown type
;;(define-extern generic-tie-normal object) ;; unknown type
;;(define-extern generic-tie-calls object) ;; unknown type
;;(define-extern generic-texbuf object) ;; unknown type
;;(define-extern generic-debug object) ;; unknown type
;;(define-extern generic-effect-work object) ;; unknown type
;;(define-extern generic-work object) ;; unknown type
;;(define-extern generic-vu1-header object) ;; unknown type
;;(define-extern generic-input-buffer object) ;; unknown type
;;(define-extern generic-effect-buffer object) ;; unknown type
;;(define-extern generic-vu1-texbuf object) ;; unknown type
;;(define-extern *generic-debug* object) ;; unknown type
(define-extern shadow-queue-append function)
;;(define-extern shadow-work object) ;; unknown type
;;(define-extern shadow-queue object) ;; unknown type
;;(define-extern *shadow-queue* object) ;; unknown type
;;(define-extern *shadow* object) ;; unknown type
;;(define-extern shadow-settings object) ;; unknown type
;;(define-extern *shadow-object* object) ;; unknown type
(define-extern shadow-queue-reset function)
;;(define-extern shadow-matrix-ref object) ;; unknown type
;;(define-extern *shadow-debug* object) ;; unknown type
(define-extern shadow-geo type)
;;(define-extern shadow-data object) ;; unknown type
;;(define-extern shadow-vertex object) ;; unknown type
;;(define-extern shadow-tri object) ;; unknown type
;;(define-extern shadow-header object) ;; unknown type
;;(define-extern shadow-run object) ;; unknown type
;;(define-extern shadow-edge object) ;; unknown type
(define-extern shadow-control type)
;;(define-extern mc-file-info object) ;; unknown type
(define-extern show-mc-info function)
;;(define-extern mc-handle object) ;; unknown type
;;(define-extern mc-slot-info object) ;; unknown type
(define-extern mc-sync function)
;;(define-extern mc-run object) ;; unknown type
;;(define-extern mc-get-slot-info object) ;; unknown type
;;(define-extern mc-check-result object) ;; unknown type
(define-extern game-bank type)
;;(define-extern load-state object) ;; unknown type
(define-extern continue-point type)
;;(define-extern *game-info* object) ;; unknown type
(define-extern game-info type)
;;(define-extern level-buffer-state object) ;; unknown type
;;(define-extern actor-id object) ;; unknown type
;;(define-extern *GAME-bank* object) ;; unknown type
;;(define-extern wind-work object) ;; unknown type
(define-extern wind-get-hashed-index function)
;;(define-extern *wind-scales* object) ;; unknown type
;;(define-extern wind-vector object) ;; unknown type
;;(define-extern *wind-work* object) ;; unknown type
(define-extern prototype-bucket-shrub type)
(define-extern prototype-bucket-tie type)
;;(define-extern instance object) ;; unknown type
;;(define-extern prototype-bucket object) ;; unknown type
(define-extern proxy-prototype-array-tie type)
(define-extern prototype-array-tie type)
(define-extern prototype-inline-array-shrub type)
(define-extern prototype-array-shrub-info type)
;;(define-extern joint-control object) ;; unknown type
;;(define-extern channel-upload-info object) ;; unknown type
;;(define-extern joint-control-channel object) ;; unknown type
;;(define-extern matrix-stack object) ;; unknown type
;;(define-extern joint-work object) ;; unknown type
(define-extern invalidate-cache-line function)
;;(define-extern merc-globals object) ;; unknown type
;;(define-extern bone-memory object) ;; unknown type
;;(define-extern bone-work object) ;; unknown type
;;(define-extern shadow-dma-packet object) ;; unknown type
;;(define-extern bone-layout object) ;; unknown type
;;(define-extern bone-debug object) ;; unknown type
;;(define-extern bone-regs object) ;; unknown type
;;(define-extern bone-buffer object) ;; unknown type
;;(define-extern merc-global-array object) ;; unknown type
;;(define-extern *merc-globals* object) ;; unknown type
;;(define-extern *matrix-engine* object) ;; unknown type
;;(define-extern camera-eng object) ;; unknown type
;;(define-extern *camera-engine* object) ;; unknown type
;;(define-extern *background-draw-engine* object) ;; unknown type
;;(define-extern draw object) ;; unknown type
;;(define-extern *debug-engine* object) ;; unknown type
;;(define-extern res-tag object) ;; unknown type
;;(define-extern *res-key-string* object) ;; unknown type
(define-extern res-lump type)
;;(define-extern *res-static-buf* object) ;; unknown type
(define-extern part-group-pointer? function)
(define-extern nav-mesh type)
(define-extern collide-mesh type)
;;(define-extern sinteger object) ;; unknown type
;;(define-extern uinteger object) ;; unknown type
;;(define-extern id object) ;; unknown type
;;(define-extern aid object) ;; unknown type
;;(define-extern interp object) ;; unknown type
;;(define-extern exact object) ;; unknown type
;;(define-extern process-type object) ;; unknown type
;;(define-extern task object) ;; unknown type
;;(define-extern base object) ;; unknown type
;;(define-extern rot object) ;; unknown type
(define-extern vu-lights-default! function)
(define-extern light-group-slerp function)
(define-extern light-slerp function)
(define-extern light-group-process! function)
;;(define-extern *default-lights* object) ;; unknown type
(define-extern vu-lights<-light-group! function)
(define-extern time-to-apex function)
(define-extern time-to-ground function)
;;(define-extern *standard-dynamics* object) ;; unknown type
(define-extern dynamics type)
;;(define-extern standard object) ;; unknown type
;;(define-extern *edge-surface* object) ;; unknown type
;;(define-extern *uppercut-jump-mods* object) ;; unknown type
;;(define-extern *forward-pole-jump-mods* object) ;; unknown type
;;(define-extern *flip-jump-mods* object) ;; unknown type
(define-extern surface-clamp-speed function)
;;(define-extern *flop-mods* object) ;; unknown type
(define-extern surface type)
;;(define-extern *smack-jump-mods* object) ;; unknown type
;;(define-extern *dive-mods* object) ;; unknown type
;;(define-extern *swim-surface* object) ;; unknown type
(define-extern calc-terminal2-vel function)
;;(define-extern *wade-surface* object) ;; unknown type
;;(define-extern *jump-mods* object) ;; unknown type
;;(define-extern *turn-around-mods* object) ;; unknown type
;;(define-extern *jump-attack-mods* object) ;; unknown type
;;(define-extern *grass-surface* object) ;; unknown type
;;(define-extern *dive-bottom-mods* object) ;; unknown type
;;(define-extern *tread-surface* object) ;; unknown type
(define-extern surface-mult! function)
;;(define-extern *forward-high-jump-mods* object) ;; unknown type
;;(define-extern *double-jump-mods* object) ;; unknown type
;;(define-extern edge-grab object) ;; unknown type
;;(define-extern *high-jump-mods* object) ;; unknown type
;;(define-extern *ice-surface* object) ;; unknown type
;;(define-extern *grab-mods* object) ;; unknown type
;;(define-extern *run-attack-mods* object) ;; unknown type
;;(define-extern *quicksand-surface* object) ;; unknown type
;;(define-extern *walk-no-turn-mods* object) ;; unknown type
(define-extern calc-terminal-vel function)
;;(define-extern *duck-mods* object) ;; unknown type
;;(define-extern *duck-attack-mods* object) ;; unknown type
;;(define-extern *slope-surface* object) ;; unknown type
(define-extern calc-terminal4-vel function)
;;(define-extern *edge-grab-mods* object) ;; unknown type
;;(define-extern *standard-ground-surface* object) ;; unknown type
;;(define-extern *flop-land-mods* object) ;; unknown type
;;(define-extern *wheel-mods* object) ;; unknown type
;;(define-extern *swim-mods* object) ;; unknown type
(define-extern surface-interp! function)
;;(define-extern *walk-mods* object) ;; unknown type
;;(define-extern *attack-mods* object) ;; unknown type
;;(define-extern *neutral-mods* object) ;; unknown type
;;(define-extern grab object) ;; unknown type
;;(define-extern *wade-mods* object) ;; unknown type
;;(define-extern *forward-jump-mods* object) ;; unknown type
;;(define-extern *stone-surface* object) ;; unknown type
;;(define-extern *launch-jump-mods* object) ;; unknown type
;;(define-extern *empty-mods* object) ;; unknown type
;;(define-extern *tar-surface* object) ;; unknown type
;;(define-extern *wheel-flip-mods* object) ;; unknown type
;;(define-extern *pole-mods* object) ;; unknown type
;;(define-extern pole object) ;; unknown type
;;(define-extern wheel-flip object) ;; unknown type
;;(define-extern swim-bottom object) ;; unknown type
;;(define-extern empty object) ;; unknown type
;;(define-extern duck object) ;; unknown type
(define-extern wheel type)
;;(define-extern air object) ;; unknown type
;;(define-extern dive object) ;; unknown type
;;(define-extern uppercut object) ;; unknown type
;;(define-extern high-jump object) ;; unknown type
;;(define-extern jump-double object) ;; unknown type
;;(define-extern jump object) ;; unknown type
;;(define-extern swim object) ;; unknown type
;;(define-extern walk object) ;; unknown type
;;(define-extern wade object) ;; unknown type
;;(define-extern attack object) ;; unknown type
;;(define-extern flop object) ;; unknown type
;;(define-extern launch-jump object) ;; unknown type
;;(define-extern run object) ;; unknown type
(define-extern pat-event->string function)
(define-extern pat-material->string function)
;;(define-extern pat-surface object) ;; unknown type
;;(define-extern pat-mode-info object) ;; unknown type
(define-extern pat-mode->string function)
;;(define-extern *pat-mode-info* object) ;; unknown type
;;(define-extern fact-info-target object) ;; unknown type
(define-extern pickup-type->string function)
(define-extern fact-bank type)
(define-extern fact-info type)
;;(define-extern fact-info-enemy object) ;; unknown type
;;(define-extern *FACT-bank* object) ;; unknown type
;;(define-extern cam-vert object) ;; unknown type
;;(define-extern idle-distance object) ;; unknown type
;;(define-extern options object) ;; unknown type
;;(define-extern notice-top object) ;; unknown type
;;(define-extern speed object) ;; unknown type
;;(define-extern cam-notice-dist object) ;; unknown type
;;(define-extern process-drawable-art-error object) ;; unknown type
;;(define-extern notice-bottom object) ;; unknown type
;;(define-extern eco-info object) ;; unknown type
;;(define-extern cam-horz object) ;; unknown type
;;(define-extern timeout object) ;; unknown type
;;(define-extern align-control object) ;; unknown type
;;(define-extern attack-info object) ;; unknown type
;;(define-extern process-drawable object) ;; unknown type
;;(define-extern *global-attack-id* object) ;; unknown type
;;(define-extern ground-tween-info object) ;; unknown type
;;(define-extern process-drawable-reserved object) ;; unknown type
;;(define-extern othercam object) ;; unknown type
;;(define-extern process-hidden object) ;; unknown type
;;(define-extern gui-query object) ;; unknown type
;;(define-extern manipy object) ;; unknown type
;;(define-extern camera-tracker object) ;; unknown type
(define-extern swingpole type)
;;(define-extern part-spawner object) ;; unknown type
;;(define-extern touch-tracker object) ;; unknown type
;;(define-extern part-tracker object) ;; unknown type
;;(define-extern pov-camera object) ;; unknown type
;;(define-extern delayed-rand-float object) ;; unknown type
;;(define-extern sync-info-paused object) ;; unknown type
;;(define-extern bouncing-float object) ;; unknown type
;;(define-extern delayed-rand-vector object) ;; unknown type
;;(define-extern sync-info object) ;; unknown type
;;(define-extern oscillating-vector object) ;; unknown type
;;(define-extern sync-info-eased object) ;; unknown type
;;(define-extern oscillating-float object) ;; unknown type
;;(define-extern smush-control object) ;; unknown type
;;(define-extern trajectory object) ;; unknown type
;;(define-extern debug-vertex-stats object) ;; unknown type
;;(define-extern debug-vertex object) ;; unknown type
;;(define-extern pos-history object) ;; unknown type
;;(define-extern joint-mod-wheel object) ;; unknown type
;;(define-extern joint-mod object) ;; unknown type
;;(define-extern joint-mod-set-local object) ;; unknown type
(define-extern joint-mod-set-local-callback function)
(define-extern joint-mod-blend-local-callback function)
;;(define-extern try-to-look-at-info object) ;; unknown type
(define-extern joint-mod-look-at-handler function)
(define-extern joint-mod-set-world-callback function)
;;(define-extern last-try-to-look-at-data object) ;; unknown type
;;(define-extern *joint-axis-vectors* object) ;; unknown type
;;(define-extern joint-mod-set-world object) ;; unknown type
(define-extern joint-mod-wheel-callback function)
(define-extern joint-mod-spinner-callback function)
(define-extern joint-mod-joint-set-handler function)
;;(define-extern joint-mod-spinner object) ;; unknown type
(define-extern joint-mod-debug-draw function)
;;(define-extern joint-mod-blend-local object) ;; unknown type
(define-extern joint-mod-world-look-at-handler function)
(define-extern joint-mod-rotate-handler function)
(define-extern joint-mod-joint-set*-handler function)
(define-extern add-debug-matrix function)
(define-extern vector<-cspace! function)
(define-extern cspace<-transformq! function)
(define-extern add-debug-text-sphere function)
;;(define-extern attacking object) ;; unknown type
;;(define-extern force object) ;; unknown type
(define-extern cspace<-parented-transformq-joint! function)
;;(define-extern target object) ;; unknown type
;;(define-extern collide-mesh-tri object) ;; unknown type
;;(define-extern *collide-mesh-cache* object) ;; unknown type
;;(define-extern collide-mesh-cache-tri object) ;; unknown type
;;(define-extern collide-mesh-cache object) ;; unknown type
;;(define-extern collide-tri-result object) ;; unknown type
;;(define-extern collide-player-list object) ;; unknown type
;;(define-extern collide-shape-moving object) ;; unknown type
;;(define-extern collide-shape-prim object) ;; unknown type
;;(define-extern *collide-usually-hit-by-player-list* object) ;; unknown type
(define-extern collide-shape-prim-mesh type)
;;(define-extern collide-shape-intersect object) ;; unknown type
;;(define-extern collide-hit-by-others-list object) ;; unknown type
;;(define-extern *collide-shape-prim-water* object) ;; unknown type
;;(define-extern *collide-player-list* object) ;; unknown type
;;(define-extern collide-shape-prim-sphere object) ;; unknown type
;;(define-extern collide-sticky-rider-group object) ;; unknown type
;;(define-extern collide-sticky-rider object) ;; unknown type
;;(define-extern *collide-shape-prim-backgnd* object) ;; unknown type
;;(define-extern collide-usually-hit-by-player-list object) ;; unknown type
;;(define-extern collide-prim-core object) ;; unknown type
;;(define-extern collide-shape-prim-group object) ;; unknown type
;;(define-extern pull-rider-info object) ;; unknown type
;;(define-extern collide-hit-by-player-list object) ;; unknown type
;;(define-extern collide-overlap-result object) ;; unknown type
;;(define-extern *collide-hit-by-others-list* object) ;; unknown type
;;(define-extern *collide-hit-by-player-list* object) ;; unknown type
;;(define-extern collide-shape object) ;; unknown type
;;(define-extern overlaps-others-params object) ;; unknown type
;;(define-extern camera object) ;; unknown type
;;(define-extern control-info object) ;; unknown type
;;(define-extern collide-history object) ;; unknown type
;;(define-extern touching-list object) ;; unknown type
;;(define-extern touching-shapes-entry object) ;; unknown type
;;(define-extern *touching-prims-entry-pool* object) ;; unknown type
;;(define-extern touching-prims-entry object) ;; unknown type
;;(define-extern touching-prims-entry-pool object) ;; unknown type
;;(define-extern *touching-list* object) ;; unknown type
;;(define-extern touching-prim object) ;; unknown type
;;(define-extern collide-edge-tri object) ;; unknown type
;;(define-extern *edge-grab-info* object) ;; unknown type
;;(define-extern collide-edge-edge object) ;; unknown type
;;(define-extern edge-grab-info object) ;; unknown type
;;(define-extern collide-edge-hold-list object) ;; unknown type
;;(define-extern collide-edge-work object) ;; unknown type
;;(define-extern *collide-edge-work* object) ;; unknown type
;;(define-extern collide-edge-hold-item object) ;; unknown type
(define-extern num-func-seek! function)
(define-extern cspace-index-by-name-no-fail function)
(define-extern num-func-blend-in! function)
(define-extern num-func-chan function)
(define-extern num-func-none function)
(define-extern num-func--! function)
(define-extern cspace-by-name-no-fail function)
(define-extern num-func-identity function)
(define-extern num-func-+! function)
(define-extern num-func-loop! function)
(define-extern cspace-by-name function)
(define-extern cspace-index-by-name function)
(define-extern joint-control-reset! function)
;;(define-extern effect-control object) ;; unknown type
;;(define-extern effect-name object) ;; unknown type
(define-extern drawable-inline-array-collide-fragment type)
(define-extern collide-frag-mesh type)
(define-extern collide-fragment type)
;;(define-extern collide-frag-vertex object) ;; unknown type
(define-extern drawable-tree-collide-fragment type)
;;(define-extern projectile-blue object) ;; unknown type
;;(define-extern projectile-yellow object) ;; unknown type
;;(define-extern projectile object) ;; unknown type
;;(define-extern *sidekick* object) ;; unknown type
;;(define-extern *target* object) ;; unknown type
;;(define-extern sidekick object) ;; unknown type
;;(define-extern depth-cue-work object) ;; unknown type
;;(define-extern depth-cue-data object) ;; unknown type
;;(define-extern perf-stat-array object) ;; unknown type
;;(define-extern perf-stat object) ;; unknown type
;;(define-extern tr-stat object) ;; unknown type
;;(define-extern merc-global-stats object) ;; unknown type
(define-extern bsp-header type)
;;(define-extern game-level object) ;; unknown type
(define-extern inspect-bsp-tree function)
(define-extern map-bsp-tree function)
;;(define-extern cl-stat object) ;; unknown type
;;(define-extern bsp-node object) ;; unknown type
;;(define-extern view-frustum object) ;; unknown type
;;(define-extern collide-stats object) ;; unknown type
;;(define-extern collide-cache-tri object) ;; unknown type
;;(define-extern *collide-cache* object) ;; unknown type
;;(define-extern collide-list-item object) ;; unknown type
;;(define-extern *collide-work* object) ;; unknown type
;;(define-extern collide-using-spheres-params object) ;; unknown type
;;(define-extern collide-puss-work object) ;; unknown type
;;(define-extern collide-puss-sphere object) ;; unknown type
;;(define-extern collide-puyp-work object) ;; unknown type
;;(define-extern *collide-list* object) ;; unknown type
;;(define-extern collide-work object) ;; unknown type
;;(define-extern collide-cache-prim object) ;; unknown type
;;(define-extern collide-list object) ;; unknown type
;;(define-extern collide-cache object) ;; unknown type
;;(define-extern *collide-test-flag* object) ;; unknown type
;;(define-extern *shrub-state* object) ;; unknown type
(define-extern generic-shrub-fragment type)
(define-extern instance-shrubbery type)
(define-extern shrubbery-login-post-texture function)
(define-extern shrubbery type)
(define-extern drawable-inline-array-instance-shrub type)
;;(define-extern instance-shrub-dma object) ;; unknown type
(define-extern drawable-tree-instance-shrub type)
;;(define-extern shrub-near-packet object) ;; unknown type
(define-extern billboard type)
(define-extern prototype-generic-shrub type)
;;(define-extern instance-shrub-work object) ;; unknown type
(define-extern prototype-trans-shrubbery type)
(define-extern prototype-shrubbery type)
;;(define-extern shrub-view-data object) ;; unknown type
;;(define-extern shrubbery-matrix object) ;; unknown type
(define-extern drawable-tree-instance-tie type)
(define-extern prototype-tie type)
;;(define-extern prototype-tie-work object) ;; unknown type
;;(define-extern prototype-tie-dma object) ;; unknown type
(define-extern drawable-inline-array-instance-tie type)
(define-extern tie-fragment type)
;;(define-extern instance-tie-dma object) ;; unknown type
;;(define-extern tie-matrix object) ;; unknown type
(define-extern instance-tie type)
;;(define-extern instance-tie-work object) ;; unknown type
;;(define-extern *instance-tie-work-copy* object) ;; unknown type
(define-extern drawable-tree-dirt-tfrag type)
(define-extern drawable-inline-array-trans-tfrag type)
(define-extern drawable-tree-ice-tfrag type)
;;(define-extern generic-tfragment object) ;; unknown type
(define-extern drawable-tree-lowres-tfrag type)
(define-extern drawable-tree-tfrag type)
(define-extern tfragment type)
;;(define-extern drawable-tree-lowres-trans-tfrag object) ;; unknown type
(define-extern drawable-tree-trans-tfrag type)
;;(define-extern tfragment-stats object) ;; unknown type
;;(define-extern tfrag-control object) ;; unknown type
;;(define-extern tfrag-stats object) ;; unknown type
(define-extern drawable-inline-array-tfrag type)
;;(define-extern tfrag-packet object) ;; unknown type
;;(define-extern tfrag-work object) ;; unknown type
;;(define-extern tfrag-dma object) ;; unknown type
;;(define-extern tfrag-data object) ;; unknown type
;;(define-extern tfragment-debug-data object) ;; unknown type
;;(define-extern tfrag-dists object) ;; unknown type
;;(define-extern background-work object) ;; unknown type
;;(define-extern subdivide-dists object) ;; unknown type
;;(define-extern work-area object) ;; unknown type
;;(define-extern subdivide-settings object) ;; unknown type
;;(define-extern terrain-bsp object) ;; unknown type
;;(define-extern gs-packed-stq object) ;; unknown type
;;(define-extern terrain-context object) ;; unknown type
;;(define-extern foreground-area object) ;; unknown type
;;(define-extern gs-packed-xyzw object) ;; unknown type
;;(define-extern gs-packed-gt4 object) ;; unknown type
;;(define-extern dma-area object) ;; unknown type
;;(define-extern background-area object) ;; unknown type
;;(define-extern *collide-stats* object) ;; unknown type
;;(define-extern ambient-area object) ;; unknown type
;;(define-extern terrain-stats object) ;; unknown type
;;(define-extern *terrain-stats* object) ;; unknown type
;;(define-extern gs-packed-rgba object) ;; unknown type
;;(define-extern gs-packed-gt object) ;; unknown type
;;(define-extern *generate-actor-vis-start* object) ;; unknown type
;;(define-extern *ACTOR-bank* object) ;; unknown type
(define-extern entity-actor type)
(define-extern entity-camera type)
;;(define-extern entity-perm-array object) ;; unknown type
;;(define-extern entity-links-array object) ;; unknown type
(define-extern entity-nav-login function)
(define-extern entity-ambient type)
;;(define-extern *generate-actor-vis-output* object) ;; unknown type
;;(define-extern entity-links object) ;; unknown type
;;(define-extern *generate-actor-vis* object) ;; unknown type
(define-extern entity-info type)
;;(define-extern entity object) ;; unknown type
;;(define-extern entity-perm object) ;; unknown type
;;(define-extern entity-ambient-data-array object) ;; unknown type
;;(define-extern entity-ambient-data object) ;; unknown type
(define-extern actor-bank type)
;;(define-extern sprite-array-3d object) ;; unknown type
;;(define-extern sprite-array-2d object) ;; unknown type
;;(define-extern sprite-vec-data-3d object) ;; unknown type
;;(define-extern sprite-vec-data-2d object) ;; unknown type
;;(define-extern fake-shadow-buffer object) ;; unknown type
;;(define-extern fake-shadow object) ;; unknown type
;;(define-extern *fake-shadow-buffer-1* object) ;; unknown type
;;(define-extern *fake-shadow-buffer* object) ;; unknown type
;;(define-extern *fake-shadow-buffer-2* object) ;; unknown type
(define-extern eye-control-array type)
;;(define-extern *eye-control-array* object) ;; unknown type
;;(define-extern eye object) ;; unknown type
;;(define-extern eye-work object) ;; unknown type
;;(define-extern eye-control object) ;; unknown type
;;(define-extern sp-field-init-spec object) ;; unknown type
(define-extern sparticle-launcher type)
(define-extern sparticle-launch-group type)
;;(define-extern sparticle-group-item object) ;; unknown type
;;(define-extern sparticle-launch-control object) ;; unknown type
;;(define-extern sparticle-launch-state object) ;; unknown type
;;(define-extern sparticle-system object) ;; unknown type
;;(define-extern *sp-60-hz* object) ;; unknown type
;;(define-extern *sp-frame-time* object) ;; unknown type
;;(define-extern sparticle-cpuinfo object) ;; unknown type
;;(define-extern sparticle-launchinfo object) ;; unknown type
(define-extern actor-link-subtask-complete-hook function)
(define-extern actor-link-dead-hook function)
(define-extern entity-actor-count function)
(define-extern alt-actor-list-subtask-incomplete-count function)
(define-extern entity-actor-lookup function)
;;(define-extern actor-link-info object) ;; unknown type
;;(define-extern next-actor object) ;; unknown type
;;(define-extern alt-actor object) ;; unknown type
(define-extern entity-by-name function)
(define-extern entity-by-aid function)
;;(define-extern prev-actor object) ;; unknown type
;;(define-extern cam-index object) ;; unknown type
;;(define-extern cam-vector-seeker object) ;; unknown type
;;(define-extern tracking-point object) ;; unknown type
;;(define-extern cam-float-seeker object) ;; unknown type
;;(define-extern camera-master object) ;; unknown type
;;(define-extern tracking-spline object) ;; unknown type
;;(define-extern camera-combiner object) ;; unknown type
;;(define-extern camera-slave object) ;; unknown type
(define-extern camera-bank type)
;;(define-extern tracking-spline-sampler object) ;; unknown type
;;(define-extern cam-rotation-tracker object) ;; unknown type
;;(define-extern *CAMERA-bank* object) ;; unknown type
;;(define-extern *greenline-table* object) ;; unknown type
;;(define-extern *timeplot-index* object) ;; unknown type
(define-extern float-lookup-greenline function)
;;(define-extern *greenline-index* object) ;; unknown type
(define-extern float-lookup-yellowline function)
(define-extern float-save-redline function)
(define-extern float-lookup-redline function)
;;(define-extern *blueline-table* object) ;; unknown type
;;(define-extern *timeplot-table* object) ;; unknown type
(define-extern float-save-greenline function)
(define-extern float-lookup-blueline function)
(define-extern float-save-blueline function)
(define-extern float-lookup-timeplot function)
;;(define-extern *redline-index* object) ;; unknown type
;;(define-extern *cam-layout* object) ;; unknown type
;;(define-extern *blueline-index* object) ;; unknown type
;;(define-extern *yellowline-table* object) ;; unknown type
(define-extern float-save-yellowline function)
;;(define-extern *yellowline-index* object) ;; unknown type
(define-extern float-save-timeplot function)
;;(define-extern *redline-table* object) ;; unknown type
;;(define-extern *camera-init-mat* object) ;; unknown type
;;(define-extern *camera-orbit-target* object) ;; unknown type
;;(define-extern *camera-combiner* object) ;; unknown type
;;(define-extern *camera-read-analog* object) ;; unknown type
;;(define-extern *camera* object) ;; unknown type
;;(define-extern *camera-read-buttons* object) ;; unknown type
;;(define-extern *cam-free-move-along-z* object) ;; unknown type
;;(define-extern *camera-other-trans* object) ;; unknown type
;;(define-extern *camera-other-root* object) ;; unknown type
;;(define-extern *camera-look-through-other* object) ;; unknown type
;;(define-extern *camera-other-fov* object) ;; unknown type
;;(define-extern *camera-other-matrix* object) ;; unknown type
;;(define-extern *camera-smush-control* object) ;; unknown type
;;(define-extern *external-cam-options* object) ;; unknown type
;;(define-extern *external-cam-mode* object) ;; unknown type
;;(define-extern __assert-info-private-struct object) ;; unknown type
;;(define-extern *__private-assert-info* object) ;; unknown type
(define-extern hud-icon type)
(define-extern hud-particle type)
;;(define-extern hud-parts object) ;; unknown type
;;(define-extern hud object) ;; unknown type
;;(define-extern *hud-parts* object) ;; unknown type
(define-extern game-option type)
;;(define-extern progress object) ;; unknown type
;;(define-extern *progress-process* object) ;; unknown type
;;(define-extern count-info object) ;; unknown type
(define-extern task-info-data type)
(define-extern game-count-info type)
;;(define-extern *progress-last-task-index* object) ;; unknown type
(define-extern level-tasks-info type)
;;(define-extern rpc-buffer object) ;; unknown type
;;(define-extern rpc-buffer-pair object) ;; unknown type
;;(define-extern rpc-busy? object) ;; unknown type
;;(define-extern rpc-call object) ;; unknown type
;;(define-extern curve-control object) ;; unknown type
;;(define-extern path-control object) ;; unknown type
;;(define-extern path-k object) ;; unknown type
;;(define-extern path-actor object) ;; unknown type
;;(define-extern path object) ;; unknown type
;;(define-extern string->symbol object) ;; unknown type
;;(define-extern nav-ray object) ;; unknown type
(define-extern nav-mesh-connect function)
;;(define-extern nav-poly object) ;; unknown type
;;(define-extern check-vector-collision-with-nav-spheres-info object) ;; unknown type
;;(define-extern nav-control object) ;; unknown type
;;(define-extern nav-gap-info object) ;; unknown type
;;(define-extern nav-node object) ;; unknown type
;;(define-extern nav-vertex object) ;; unknown type
;;(define-extern clip-travel-vector-to-mesh-return-info object) ;; unknown type
;;(define-extern nav-route-portal object) ;; unknown type
(define-extern has-nav-mesh? function)
;;(define-extern nav-sphere object) ;; unknown type
;;(define-extern nav-lookup-elem object) ;; unknown type
;;(define-extern nav-mesh-actor object) ;; unknown type
;;(define-extern *default-nav-mesh* object) ;; unknown type
;;(define-extern process-level-heap object) ;; unknown type
;;(define-extern nav-max-users object) ;; unknown type
;;(define-extern nav-engine object) ;; unknown type
;;(define-extern nearest-y-threshold object) ;; unknown type
(define-extern dgo-load-begin function)
(define-extern dgo-load-continue function)
(define-extern destroy-mem function)
(define-extern str-load (function string int pointer int symbol))
;;(define-extern *load-str-rpc* object) ;; unknown type
;;(define-extern load-chunk-msg object) ;; unknown type
;;(define-extern *dgo-name* object) ;; unknown type
(define-extern str-ambient-play function)
;;(define-extern *load-str-lock* object) ;; unknown type
(define-extern str-load-status (function (pointer int32) symbol))
(define-extern str-load-cancel function)
(define-extern str-play-queue function)
(define-extern str-ambient-stop function)
(define-extern dgo-load-get-next function)
(define-extern find-temp-buffer function)
(define-extern str-play-kick function)
;;(define-extern load-dgo-msg object) ;; unknown type
;;(define-extern *load-dgo-rpc* object) ;; unknown type
;;(define-extern *que-str-lock* object) ;; unknown type
(define-extern dgo-load-cancel function)
(define-extern dgo-load-link function)
;;(define-extern *dgo-time* object) ;; unknown type
;;(define-extern dgo-header object) ;; unknown type
(define-extern str-play-async function)
(define-extern str-play-stop function)
;;(define-extern *play-str-rpc* object) ;; unknown type
(define-extern string->sound-name function)
;;(define-extern complete object) ;; unknown type
;;(define-extern busy object) ;; unknown type
;;(define-extern link-begin object) ;; unknown type
;;(define-extern *current-ramdisk-id* object) ;; unknown type
;;(define-extern ramdisk-rpc-load object) ;; unknown type
(define-extern ramdisk-load function)
;;(define-extern ramdisk-rpc-load-to-ee object) ;; unknown type
;;(define-extern *ramdisk-rpc* object) ;; unknown type
(define-extern ramdisk-sync function)
;;(define-extern ramdisk-rpc-fill object) ;; unknown type
(define-extern swap-sound-buffers function)
;;(define-extern misty object) ;; unknown type
(define-extern sound-group-stop function)
(define-extern sound-set-ear-trans function)
(define-extern sound-pause function)
(define-extern is-cd-in? function)
(define-extern sound-play-by-spec function)
;;(define-extern *sound-iop-info* object) ;; unknown type
(define-extern check-irx-version function)
(define-extern str-is-playing? function)
(define-extern free-last-sound-buffer-entry function)
(define-extern sound-volume-off function)
;;(define-extern *sound-player-rpc* object) ;; unknown type
;;(define-extern *sound-loader-rpc* object) ;; unknown type
;;(define-extern *flava-table* object) ;; unknown type
(define-extern sound-basic-cb function)
;;(define-extern sound-iop-info object) ;; unknown type
;;(define-extern beach object) ;; unknown type
;;(define-extern flava-table object) ;; unknown type
;;(define-extern empty2 object) ;; unknown type
(define-extern sound-bank-unload function)
(define-extern sound-stop function)
(define-extern get-sound-buffer-entry function)
(define-extern current-str-pos function)
(define-extern sound-play-by-name function)
;;(define-extern jungleb object) ;; unknown type
;;(define-extern snow object) ;; unknown type
;;(define-extern rolling object) ;; unknown type
(define-extern sound-set-falloff-curve function)
;;(define-extern jungle object) ;; unknown type
(define-extern sound-name= function)
(define-extern new-sound-id function)
(define-extern sound-set-reverb function)
(define-extern list-sounds function)
(define-extern show-iop-info function)
(define-extern sound-music-load function)
;;(define-extern finalboss object) ;; unknown type
(define-extern sound-trans-convert function)
(define-extern sound-set-sound-falloff function)
;;(define-extern flava-table-row object) ;; unknown type
;;(define-extern swamp object) ;; unknown type
;;(define-extern village1 object) ;; unknown type
(define-extern sound-group-continue function)
;;(define-extern village2 object) ;; unknown type
(define-extern sound-continue function)
;;(define-extern empty1 object) ;; unknown type
;;(define-extern village3 object) ;; unknown type
;;(define-extern *sound-player-enable* object) ;; unknown type
;;(define-extern firecanyon object) ;; unknown type
;;(define-extern citadel object) ;; unknown type
(define-extern show-iop-memory function)
(define-extern sound-set-volume function)
(define-extern sound-command->string function)
(define-extern make-sqrt-table function)
(define-extern flava-lookup function)
(define-extern sound-music-unload function)
;;(define-extern *ambient-spec* object) ;; unknown type
(define-extern sound-angle-convert function)
(define-extern ear-trans function)
;;(define-extern ogre object) ;; unknown type
;;(define-extern maincave object) ;; unknown type
;;(define-extern credits object) ;; unknown type
(define-extern sound-bank-load function)
;;(define-extern lavatube object) ;; unknown type
(define-extern sound-group-pause function)
(define-extern current-str-id function)
(define-extern sound-set-flava function)
(define-extern sound-buffer-dump function)
(define-extern sound-reload-info function)
(define-extern set-language function)
;;(define-extern *debug-effect-control* object) ;; unknown type
(define-extern math-camera-pos function)
;;(define-extern kset-language object) ;; unknown type
;;(define-extern effect-param object) ;; unknown type
;;(define-extern cycle-speed object) ;; unknown type
;;(define-extern *setting-control* object) ;; unknown type
(define-extern effect-param->sound-spec function)
;;(define-extern sfx-volume object) ;; unknown type
(define-extern target-pos function)
;;(define-extern music-volume object) ;; unknown type
(define-extern activate-progress function)
(define-extern camera-pos function)
;;(define-extern ambient-volume object) ;; unknown type
(define-extern matrix<-transformq+trans! function)
(define-extern matrix<-transformq+world-trans! function)
(define-extern matrix<-no-trans-transformq! function)
(define-extern transformq-copy! function)
(define-extern matrix<-parented-transformq! function)
(define-extern matrix<-transformq! function)
(define-extern moving-sphere-triangle-intersect function)
(define-extern ray-circle-intersect function)
(define-extern moving-sphere-moving-sphere-intersect function)
(define-extern ray-sphere-intersect function)
(define-extern raw-ray-sphere-intersect function)
(define-extern collide-do-primitives function)
(define-extern ray-triangle-intersect function)
(define-extern ray-plane-intersect function)
(define-extern ray-cylinder-intersect function)
(define-extern moving-sphere-sphere-intersect function)
(define-extern joint-control-channel-eval function)
(define-extern cspace<-transform-yxy! function)
(define-extern decompress-frame-data-to-accumulator function)
(define-extern matrix-from-joint-anim-frame function)
(define-extern matrix-from-control-pair! function)
(define-extern cspace<-cspace! function)
(define-extern cspace<-matrix-no-push-joint! function)
(define-extern jacc-mem-usage function)
(define-extern normalize-frame-quaternions function)
(define-extern joint-control-channel-eval! function)
(define-extern joint-anim-login function)
(define-extern joint-control-copy! function)
(define-extern matrix-from-control! function)
(define-extern cspace<-rot-yxy! function)
(define-extern cspace<-transformq+trans! function)
(define-extern joint-control-channel-group! function)
(define-extern joint-control-remap! function)
(define-extern cspace<-matrix-joint! function)
(define-extern calc-animation-from-spr function)
(define-extern decompress-fixed-data-to-accumulator function)
(define-extern cspace<-transformq+world-trans! function)
(define-extern cspace-calc-total-matrix! function)
(define-extern create-interpolated-joint-animation-frame function)
(define-extern matrix-from-control-channel! function)
(define-extern joint-anim-inspect-elt function)
(define-extern clear-frame-accumulator function)
(define-extern joint-control-channel-group-eval! function)
(define-extern flatten-joint-control-to-spr function)
(define-extern cspace<-parented-matrix-joint! function)
(define-extern make-joint-jump-tables function)
(define-extern decompress-frame-data-pair-to-accumulator function)
;;(define-extern stack object) ;; unknown type
;;(define-extern push1 object) ;; unknown type
(define-extern mem-size function)
;;(define-extern blend object) ;; unknown type
;;(define-extern push object) ;; unknown type
;;(define-extern stack1 object) ;; unknown type
;;(define-extern no-push object) ;; unknown type
;;(define-extern cylinder-verts object) ;; unknown type
;;(define-extern cylinder-flat-verts object) ;; unknown type
(define-extern ray-arbitrary-circle-intersect function)
(define-extern camera-line function)
(define-extern update-wind function)
(define-extern print-collide-stats function)
(define-extern mem-usage-bsp-tree function)
;;(define-extern *test-shrub* object) ;; unknown type
(define-extern clear-cl-stat function)
(define-extern bsp-camera-asm function)
(define-extern print-cl-stat function)
(define-extern update-subdivide-settings! function)
(define-extern foreground-engine-execute function)
;;(define-extern *subdivide-settings* object) ;; unknown type
;;(define-extern *stat-string-tfrag-near* object) ;; unknown type
(define-extern print-tr-stat function)
;;(define-extern *stat-string-total* object) ;; unknown type
;;(define-extern *perf-stats* object) ;; unknown type
(define-extern perf-stat-bucket->string function)
;;(define-extern GSH_ENABLE object) ;; unknown type
(define-extern print-terrain-stats function)
(define-extern start-perf-stat-collection function)
;;(define-extern GSH_WHICH_STAT object) ;; unknown type
;;(define-extern *merc-global-stats* object) ;; unknown type
;;(define-extern GSH_TIME object) ;; unknown type
(define-extern print-perf-stats function)
;;(define-extern *gomi-stats-hack* object) ;; unknown type
(define-extern clear-tr-stat function)
;;(define-extern GSH_MAX_DISPLAY object) ;; unknown type
;;(define-extern *terrain-context* object) ;; unknown type
;;(define-extern GSH_BUCKET object) ;; unknown type
(define-extern end-perf-stat-collection function)
;;(define-extern *stat-string-tfrag* object) ;; unknown type
(define-extern set-tfrag-dists! function)
;;(define-extern *tfrag-work* object) ;; unknown type
(define-extern sprite-add-frame-data function)
;;(define-extern *sprite-hvdf-control* object) ;; unknown type
;;(define-extern *sprite-aux-list* object) ;; unknown type
;;(define-extern sprite-aux-list object) ;; unknown type
(define-extern clear-sprite-aux-list function)
;;(define-extern sprite-hvdf-data object) ;; unknown type
(define-extern sprite-draw function)
(define-extern add-to-sprite-aux-list function)
;;(define-extern sprite-hvdf-control object) ;; unknown type
;;(define-extern sprite-vu1-block object) ;; unknown type
(define-extern sprite-add-2d-all function)
(define-extern sprite-add-2d-chunk function)
(define-extern sprite-setup-header function)
;;(define-extern *sprite-hvdf-data* object) ;; unknown type
(define-extern sprite-release-user-hvdf function)
;;(define-extern *sprite-array-3d* object) ;; unknown type
;;(define-extern sprite-frame-data object) ;; unknown type
(define-extern sprite-add-matrix-data function)
(define-extern sprite-get-user-hvdf function)
(define-extern sprite-add-3d-all function)
(define-extern sprite-get-3d-quaternion! function)
(define-extern sprite-set-3d-quaternion! function)
(define-extern sprite-add-shadow-all function)
(define-extern sprite-add-3d-chunk function)
;;(define-extern sprite-header object) ;; unknown type
(define-extern sprite-add-shadow-chunk function)
(define-extern sprite-setup-frame-data function)
;;(define-extern *sprite-array-2d* object) ;; unknown type
(define-extern sprite-allocate-user-hvdf function)
(define-extern sprite-draw-distorters function)
;;(define-extern *shadow-middot-texture* object) ;; unknown type
(define-extern sprite-init-distorter function)
;;(define-extern sprite-distorter-sine-tables object) ;; unknown type
;;(define-extern *sprite-distorter-sine-tables* object) ;; unknown type
;;(define-extern sprite-distort-vu1-block object) ;; unknown type
(define-extern make-debug-sphere-table function)
;;(define-extern *debug-sphere-table* object) ;; unknown type
(define-extern add-debug-sphere-from-table function)
(define-extern debug-sphere-table type)
(define-extern add-debug-line function)
(define-extern internal-draw-debug-text-3d function)
;;(define-extern debug-tracking-thang object) ;; unknown type
(define-extern add-debug-curve2 function)
(define-extern history-init function)
(define-extern debug-draw-buffers function)
(define-extern display-file-info function)
(define-extern add-debug-sphere function)
(define-extern add-debug-outline-triangle function)
(define-extern add-debug-x function)
(define-extern add-debug-points function)
(define-extern add-debug-text-3d function)
(define-extern add-debug-vector function)
(define-extern transform-float-point function)
(define-extern add-debug-curve function)
;;(define-extern debug-line object) ;; unknown type
;;(define-extern *debug-lines* object) ;; unknown type
;;(define-extern *debug-lines-trk* object) ;; unknown type
(define-extern add-debug-spheres function)
(define-extern debug-percent-bar function)
(define-extern history-draw-and-update function)
(define-extern add-debug-light function)
(define-extern add-debug-point function)
(define-extern debug-reset-buffers function)
(define-extern debug-pad-display function)
;;(define-extern *debug-text-3ds* object) ;; unknown type
(define-extern internal-draw-debug-line function)
;;(define-extern debug-text-3d object) ;; unknown type
(define-extern add-debug-circle function)
(define-extern add-debug-sphere-with-transform function)
;;(define-extern *debug-text-3d-trk* object) ;; unknown type
(define-extern add-debug-rot-matrix function)
(define-extern add-debug-lights function)
(define-extern drawable-frag-count function)
(define-extern get-debug-text-3d function)
(define-extern add-debug-arc function)
(define-extern add-debug-triangle-normal function)
(define-extern add-debug-yrot-vector function)
(define-extern dma-timeout-cam function)
(define-extern add-debug-box function)
(define-extern add-debug-flat-triangle function)
(define-extern get-debug-line function)
(define-extern add-debug-line2d function)
;;(define-extern menu object) ;; unknown type
;;(define-extern fade-depth object) ;; unknown type
;;(define-extern fade object) ;; unknown type
(define-extern draw-string function)
(define-extern debug-set-camera-pos-rot! function)
;;(define-extern merc-vu1-block object) ;; unknown type
(define-extern setup-blerc-chains-for-one-fragment function)
(define-extern dma-from-spr function)
;;(define-extern blerc-block object) ;; unknown type
(define-extern blerc-a-fragment function)
(define-extern merc-blend-shape function)
(define-extern setup-blerc-chains function)
(define-extern blerc-execute function)
;;(define-extern *stats-blerc* object) ;; unknown type
(define-extern blerc-stats-init function)
;;(define-extern blerc-globals object) ;; unknown type
(define-extern merc-dma-chain-to-spr function)
(define-extern blerc-init function)
;;(define-extern blerc-block-header object) ;; unknown type
;;(define-extern blerc-dcache object) ;; unknown type
;;(define-extern blerc-context object) ;; unknown type
;;(define-extern *blerc-globals* object) ;; unknown type
(define-extern merc-edge-stats function)
;;(define-extern *merc-ctrl-header* object) ;; unknown type
(define-extern merc-vu1-initialize-chain function)
(define-extern merc-vu1-add-vu-function function)
(define-extern merc-vu1-init-buffers function)
(define-extern merc-vu1-init-buffer function)
(define-extern merc-stats function)
(define-extern merc-stats-display function)
(define-extern get-eye-block function)
(define-extern ripple-execute-init function)
;;(define-extern *ripple-globals* object) ;; unknown type
(define-extern ripple-slow-add-sine-waves function)
;;(define-extern ripple-request object) ;; unknown type
(define-extern ripple-apply-wave-table function)
(define-extern ripple-find-height function)
(define-extern ripple-matrix-scale function)
(define-extern ripple-add-debug-sphere function)
(define-extern ripple-execute function)
(define-extern ripple-update-waveform-offs function)
(define-extern ripple-create-wave-table function)
(define-extern ripple-make-request function)
;;(define-extern ripple-globals object) ;; unknown type
(define-extern dump-qword function)
(define-extern bones-reset-sqwc function)
;;(define-extern bone-calculation-list object) ;; unknown type
;;(define-extern *use-generic* object) ;; unknown type
(define-extern bone-list-init function)
(define-extern draw-bones-check-longest-edge function)
(define-extern texscroll-execute function)
(define-extern bones-init function)
;;(define-extern merc-effect-bucket-info object) ;; unknown type
;;(define-extern *default-shadow-settings* object) ;; unknown type
;;(define-extern *merc-bucket-info* object) ;; unknown type
;;(define-extern *bone-calculation-list* object) ;; unknown type
(define-extern bones-set-sqwc function)
;;(define-extern *bones-first* object) ;; unknown type
(define-extern draw-bones-mtx-calc function)
(define-extern draw-bones-generic-merc function)
(define-extern draw-bones function)
;;(define-extern merc-bucket-info object) ;; unknown type
;;(define-extern *merc-global-array* object) ;; unknown type
(define-extern draw-bones-merc function)
;;(define-extern bones-vu0-block object) ;; unknown type
(define-extern texscroll-make-request function)
(define-extern draw-bones-check-longest-edge-asm function)
(define-extern bones-mtx-calc-execute function)
;;(define-extern *texscroll-globals* object) ;; unknown type
(define-extern bones-mtx-calc function)
(define-extern bones-debug function)
(define-extern dump-bone-mem function)
(define-extern draw-bones-hud function)
(define-extern bones-wrapup function)
;;(define-extern bone-calculation object) ;; unknown type
(define-extern draw-bones-shadow function)
;;(define-extern texscroll-globals object) ;; unknown type
(define-extern dump-mem function)
(define-extern paused? function)
;;(define-extern death-end object) ;; unknown type
;;(define-extern generic-vu0-block object) ;; unknown type
(define-extern generic-sink function)
;;(define-extern *generic-foreground-sinks* object) ;; unknown type
(define-extern generic-dma-foreground-sink-init function)
(define-extern generic-init-buffers function)
(define-extern generic-init-buf function)
(define-extern generic-reset-buffers function)
(define-extern generic-setup-constants function)
(define-extern generic-add-constants function)
;;(define-extern generic-vu1-block object) ;; unknown type
(define-extern generic-envmap-dproc function)
;;(define-extern *generic-consts* object) ;; unknown type
(define-extern generic-post-debug function)
(define-extern generic-light-proc function)
(define-extern generic-envmap-only-proc function)
(define-extern generic-envmap-proc function)
(define-extern generic-no-light-dproc function)
(define-extern generic-initialize-without-sink function)
(define-extern generic-debug-light-proc function)
(define-extern generic-dma-from-spr function)
(define-extern generic-wrapup function)
(define-extern generic-prepare-dma-single function)
(define-extern generic-no-light-proc function)
(define-extern generic-initialize function)
(define-extern generic-none-dma-wait function)
(define-extern generic-none function)
(define-extern generic-no-light function)
(define-extern upload-vu0-program function)
(define-extern generic-no-light-dproc-only function)
(define-extern generic-light function)
(define-extern generic-no-light+envmap function)
(define-extern generic-copy-vtx-dclr-dtex function)
(define-extern generic-interp-dproc function)
;;(define-extern *target-lock* object) ;; unknown type
(define-extern generic-prepare-dma-double function)
(define-extern generic-upload-vu0 function)
(define-extern generic-work-init function)
;;(define-extern *generic-envmap-texture* object) ;; unknown type
(define-extern mercneric-shader-asm function)
;;(define-extern *inv-init-table* object) ;; unknown type
(define-extern mercneric-bittable-asm function)
(define-extern high-speed-reject function)
(define-extern generic-merc-execute-asm function)
(define-extern generic-merc-execute-all function)
(define-extern generic-merc-add-to-cue function)
;;(define-extern mercneric-vu0-block object) ;; unknown type
;;(define-extern invinitdata object) ;; unknown type
(define-extern generic-merc-init-asm function)
(define-extern mercneric-matrix-asm function)
(define-extern mercneric-convert function)
(define-extern merc-death-spawn function)
(define-extern generic-tie-decompress function)
(define-extern generic-tie-dma-to-spad-sync function)
(define-extern generic-tie-display-stats function)
(define-extern generic-tie-execute function)
(define-extern generic-tie-convert-proc function)
(define-extern generic-tie-convert function)
(define-extern generic-tie-debug function)
(define-extern generic-tie-upload-next function)
(define-extern generic-tie-dma-to-spad function)
;;(define-extern *generic-tie* object) ;; unknown type
;;(define-extern shadow-vu0-block object) ;; unknown type
(define-extern shadow-init-vars function)
(define-extern shadow-add-double-edges function)
(define-extern shadow-calc-dual-verts function)
(define-extern shadow-add-double-tris function)
(define-extern shadow-execute-all function)
(define-extern shadow-find-facing-double-tris function)
(define-extern shadow-find-single-edges function)
;;(define-extern *shadow-data* object) ;; unknown type
;;(define-extern shadow-dcache object) ;; unknown type
(define-extern shadow-dma-end function)
(define-extern shadow-find-facing-single-tris function)
(define-extern shadow-execute function)
(define-extern shadow-vu0-upload function)
(define-extern shadow-add-single-edges function)
(define-extern shadow-dma-init function)
(define-extern shadow-scissor-edges function)
(define-extern shadow-add-verts function)
(define-extern shadow-xform-verts function)
;;(define-extern shadow-stats object) ;; unknown type
(define-extern shadow-find-double-edges function)
(define-extern shadow-scissor-top function)
(define-extern shadow-add-facing-single-tris function)
(define-extern shadow-vu1-init-buffer function)
;;(define-extern *shadow-vu1-tri-template* object) ;; unknown type
;;(define-extern shadow-vu1-constants object) ;; unknown type
;;(define-extern shadow-vu1-gifbuf-template object) ;; unknown type
(define-extern shadow-vu1-add-constants function)
(define-extern shadow-vu1-add-matrix function)
;;(define-extern shadow-vu1-block object) ;; unknown type
(define-extern depth-cue-draw-depth function)
(define-extern depth-cue-calc-z function)
(define-extern depth-cue-draw-front function)
;;(define-extern *depth-cue-work* object) ;; unknown type
(define-extern depth-cue function)
(define-extern depth-cue-set-stencil function)
(define-extern draw-string-adv function)
(define-extern get-string-length function)
;;(define-extern *font24-table* object) ;; unknown type
;;(define-extern *font12-table* object) ;; unknown type
;;(define-extern huf-dictionary-node object) ;; unknown type
(define-extern unpack-comp-huf function)
(define-extern unpack-comp-rle function)
;;(define-extern loading object) ;; unknown type
(define-extern upload-vis-bits function)
;;(define-extern background-vu0-block object) ;; unknown type
;;(define-extern *background-work* object) ;; unknown type
(define-extern background-upload-vu0 function)
(define-extern init-background function)
(define-extern finish-background function)
(define-extern draw-drawable-tree-ice-tfrag function)
(define-extern tie-near-make-perspective-matrix function)
(define-extern draw-drawable-tree-tfrag function)
;;(define-extern *instance-tie-work* object) ;; unknown type
(define-extern draw-drawable-tree-instance-shrub function)
(define-extern draw-drawable-tree-dirt-tfrag function)
(define-extern time-of-day-interp-colors-scratch function)
(define-extern draw-drawable-tree-instance-tie function)
;;(define-extern *instance-shrub-work* object) ;; unknown type
(define-extern time-of-day-interp-colors function)
(define-extern draw-drawable-tree-trans-tfrag function)
(define-extern draw-node-cull function)
(define-extern collide-cache-using-y-probe-test function)
(define-extern collide-cache-using-line-sphere-test function)
(define-extern collide-cache-using-box-test function)
(define-extern shrub-init-view-data function)
(define-extern shrub-upload-view-data function)
(define-extern mem-usage-shrub-walk function)
(define-extern shrub-upload-model function)
(define-extern shrub-make-perspective-matrix function)
(define-extern draw-prototype-inline-array-shrub function)
(define-extern shrub-time function)
;;(define-extern shrub-vu1-block object) ;; unknown type
(define-extern shrub-do-init-frame function)
(define-extern shrub-num-tris function)
(define-extern draw-inline-array-instance-shrub function)
(define-extern test-func function)
(define-extern shrub-upload-test function)
(define-extern shrub-init-frame function)
(define-extern upload-generic-shrub function)
(define-extern tfrag-details function)
(define-extern clip-restore function)
;;(define-extern tnear-vu1-block object) ;; unknown type
(define-extern draw-inline-array-tfrag-near function)
(define-extern tfrag-end-buffer function)
(define-extern tfrag-near-end-buffer function)
(define-extern add-tfrag-mtx-0 function)
(define-extern tfrag-init-buffer function)
(define-extern draw-inline-array-tfrag function)
;;(define-extern t-stat object) ;; unknown type
(define-extern tfrag-data-setup function)
(define-extern tfrag-near-init-buffer function)
;;(define-extern tfrag-vu1-block object) ;; unknown type
(define-extern tfrag-print-stats function)
(define-extern stats-tfrag-asm function)
(define-extern add-tfrag-data function)
;;(define-extern *tfrag-display-stats* object) ;; unknown type
(define-extern add-tfrag-mtx-1 function)
(define-extern edge-debug-lines function)
(define-extern vis-cull function)
;;(define-extern tie-vu1-block object) ;; unknown type
(define-extern tie-end-buffer function)
(define-extern tie-init-consts function)
(define-extern tie-float-reg function)
(define-extern tie-int-reg function)
(define-extern tie-ints function)
(define-extern tie-floats function)
;;(define-extern tie-consts object) ;; unknown type
(define-extern tie-init-engine function)
(define-extern tie-near-end-buffer function)
(define-extern tie-near-int-reg function)
;;(define-extern tie-near-vu1-block object) ;; unknown type
;;(define-extern tie-near-consts object) ;; unknown type
(define-extern tie-near-init-consts function)
(define-extern tie-near-init-engine function)
(define-extern tie-near-float-reg function)
;;(define-extern *prototype-tie-work* object) ;; unknown type
(define-extern draw-inline-array-prototype-tie-near-asm function)
(define-extern tie-test-cam-restore function)
(define-extern tie-debug-between function)
(define-extern tie-init-buffers function)
;;(define-extern *tie* object) ;; unknown type
;;(define-extern *pke-hack* object) ;; unknown type
(define-extern draw-inline-array-instance-tie function)
(define-extern draw-inline-array-prototype-tie-generic-asm function)
(define-extern tie-debug-one function)
(define-extern draw-inline-array-prototype-tie-asm function)
(define-extern walk-tie-generic-prototypes function)
;;(define-extern tie-instance-debug object) ;; unknown type
;;(define-extern set-fov object) ;; unknown type
;;(define-extern sync object) ;; unknown type
;;(define-extern *part-group-id-table* object) ;; unknown type
(define-extern lookup-part-group-pointer-by-name function)
(define-extern sp-rotate-system function)
(define-extern sp-launch-particles-death function)
;;(define-extern *sp-launch-queue* object) ;; unknown type
;;(define-extern *death-adgif* object) ;; unknown type
;;(define-extern sp-queued-launch-particles object) ;; unknown type
(define-extern unlink-part-group-by-heap function)
(define-extern sp-adjust-launch function)
(define-extern sp-clear-queue function)
(define-extern sp-queue-launch function)
(define-extern sp-relaunch-setup-fields function)
(define-extern sp-relaunch-particle-2d function)
(define-extern birth-func-copy-omega-to-z function)
(define-extern sparticle-track-root-prim function)
(define-extern particle-setup-adgif function)
;;(define-extern *sp-launcher-lock* object) ;; unknown type
(define-extern birth-func-copy-rot-color function)
;;(define-extern *part-id-table* object) ;; unknown type
;;(define-extern *particle-adgif-cache* object) ;; unknown type
;;(define-extern *global-toggle* object) ;; unknown type
(define-extern sp-launch-particles-var function)
;;(define-extern sparticle-birthinfo object) ;; unknown type
;;(define-extern *sp-launcher-enable* object) ;; unknown type
;;(define-extern particle-adgif-cache object) ;; unknown type
(define-extern birth-func-random-next-time function)
;;(define-extern *particle-300hz-timer* object) ;; unknown type
;;(define-extern sp-launch-queue object) ;; unknown type
(define-extern sp-euler-convert function)
(define-extern lookup-part-group-by-name function)
(define-extern particle-adgif function)
(define-extern sp-relaunch-particle-3d function)
(define-extern birth-func-copy2-rot-color function)
(define-extern sp-init-fields! function)
(define-extern sparticle-track-root function)
(define-extern sp-get-particle function)
;;(define-extern *sp-particle-system-2d* object) ;; unknown type
;;(define-extern *sp-particle-system-3d* object) ;; unknown type
(define-extern sphere-in-view-frustum? function)
(define-extern kill-all-particles-with-key function)
;;(define-extern *time-of-day-proc* object) ;; unknown type
(define-extern forall-particles-runner function)
(define-extern sp-process-block-2d function)
(define-extern sp-process-block-3d function)
(define-extern sp-copy-to-spr function)
(define-extern forall-particles function)
(define-extern sp-process-particle-system function)
(define-extern sparticle-kill-it-level1 function)
(define-extern sp-particle-copy! function)
(define-extern sp-copy-from-spr function)
(define-extern sp-get-approx-alloc-size function)
(define-extern forall-particles-with-key function)
(define-extern sparticle-kill-it-level0 function)
(define-extern sparticle-60-to-50 function)
(define-extern sp-get-block-size function)
(define-extern set-particle-frame-time function)
(define-extern all-particles-60-to-50 function)
(define-extern forall-particles-with-key-runner function)
(define-extern sparticle-kill-it function)
(define-extern kill-all-particles-in-level function)
(define-extern process-particles function)
(define-extern sparticle-50-to-60 function)
(define-extern sp-orbiter function)
(define-extern sp-free-particle function)
(define-extern memcpy function)
;;(define-extern *particles-flag* object) ;; unknown type
(define-extern all-particles-50-to-60 function)
(define-extern sp-kill-particle function)
(define-extern sp-process-block function)
(define-extern entity-info-lookup function)
;;(define-extern *entity-info* object) ;; unknown type
(define-extern crate type)
(define-extern bucket type)
(define-extern money type)
(define-extern springbox type)
(define-extern assistant-levitator type)
(define-extern buzzer type)
(define-extern fuel-cell type)
(define-extern ecovent type)
(define-extern water-vol type)
(define-extern sage-finalboss type)
(define-extern babak type)
(define-extern orb-cache-top type)
(define-extern target-start type)
(define-extern racer type)
(define-extern robotboss type)
(define-extern launcher type)
(define-extern eco type)
(define-extern pickup-spawner type)
(define-extern barrel type)
(define-extern ja-abort-spooled-anim function)
(define-extern art-group-load-check function)
(define-extern art-load function)
;;(define-extern *art-control* object) ;; unknown type
(define-extern ja-play-spooled-anim function)
;;(define-extern *preload-spool-anims* object) ;; unknown type
(define-extern drawable-load function)
;;(define-extern spooling object) ;; unknown type
(define-extern ja-channel-set! function)
(define-extern ja-channel-push! function)
;;(define-extern die object) ;; unknown type
;;(define-extern pending object) ;; unknown type
(define-extern kill-current-level-hint function)
;;(define-extern loaded object) ;; unknown type
;;(define-extern *stack-top* object) ;; unknown type
(define-extern ja-aframe-num function)
;;(define-extern locked object) ;; unknown type
;;(define-extern *load-state* object) ;; unknown type
(define-extern level-hint-surpress! function)
;;(define-extern link object) ;; unknown type
(define-extern task-cstage type)
;;(define-extern ambient-control object) ;; unknown type
;;(define-extern process-taskable object) ;; unknown type
(define-extern task-control type)
;;(define-extern *default-continue* object) ;; unknown type
(define-extern game-task->string function)
(define-extern trsq->continue-point function)
;;(define-extern load object) ;; unknown type
;;(define-extern game-task object) ;; unknown type
;;(define-extern allow-pause object) ;; unknown type
;;(define-extern reset-collide object) ;; unknown type
(define-extern get-game-count function)
;;(define-extern powerup object) ;; unknown type
;;(define-extern eco-blue object) ;; unknown type
;;(define-extern try object) ;; unknown type
;;(define-extern effect object) ;; unknown type
;;(define-extern vent object) ;; unknown type
(define-extern level-hint-spawn function)
(define-extern reset-all-hint-controls function)
;;(define-extern query object) ;; unknown type
;;(define-extern *level-task-data-remap* object) ;; unknown type
;;(define-extern exit object) ;; unknown type
(define-extern close-specific-task! function)
(define-extern touch-tracker-init function)
(define-extern position-in-front-of-camera! function)
;;(define-extern reset object) ;; unknown type
;;(define-extern *level-load-list* object) ;; unknown type
;;(define-extern life object) ;; unknown type
;;(define-extern *spawn-actors* object) ;; unknown type
;;(define-extern eco-pill object) ;; unknown type
(define-extern activate-orb-all function)
;;(define-extern eval object) ;; unknown type
;;(define-extern event object) ;; unknown type
;;(define-extern health object) ;; unknown type
(define-extern set-master-mode function)
;;(define-extern allow-progress object) ;; unknown type
; (define-extern set-blackout-frames function)
(define-extern reset-actors function)
(define-extern get-task-control function)
;;(define-extern *kernel-boot-message* object) ;; unknown type
(define-extern play (function none))
(define-extern auto-save-check function)
;;(define-extern auto-save object) ;; unknown type
;;(define-extern game-save-tag object) ;; unknown type
(define-extern game-save-elt->string function)
(define-extern auto-save-command function)
;;(define-extern *auto-save-info* object) ;; unknown type
(define-extern auto-save-init-by-other function)
;;(define-extern game-save object) ;; unknown type
(define-extern auto-save-post function)
(define-extern progress-level-index->string function)
;;(define-extern read object) ;; unknown type
;;(define-extern mc-load object) ;; unknown type
;;(define-extern set object) ;; unknown type
;;(define-extern save object) ;; unknown type
;;(define-extern restore object) ;; unknown type
;;(define-extern mc-unformat object) ;; unknown type
(define-extern lookup-level-info function)
;;(define-extern done object) ;; unknown type
(define-extern get-aspect-ratio function)
(define-extern progress-allowed? function)
;;(define-extern *level-task-data* object) ;; unknown type
;;(define-extern format-card object) ;; unknown type
;;(define-extern training object) ;; unknown type
;;(define-extern mc-format object) ;; unknown type
(define-extern get-task-status function)
;;(define-extern create-file object) ;; unknown type
;;(define-extern process-mask object) ;; unknown type
;;(define-extern notify object) ;; unknown type
;;(define-extern unformat-card object) ;; unknown type
;;(define-extern mc-create-file object) ;; unknown type
;;(define-extern get-heap object) ;; unknown type
;;(define-extern mc-save object) ;; unknown type
(define-extern print-game-text function)
;;(define-extern scf-get-time object) ;; unknown type
(define-extern calculate-completion function)
;;(define-extern save-last object) ;; unknown type
;;(define-extern aspect16x9 object) ;; unknown type
;;(define-extern get-card object) ;; unknown type
;;(define-extern scf-get-language object) ;; unknown type
;;(define-extern scf-get-aspect object) ;; unknown type
;;(define-extern *boot-video-mode* object) ;; unknown type
;;(define-extern scf-get-volume object) ;; unknown type
;;(define-extern language object) ;; unknown type
;;(define-extern talking object) ;; unknown type
;;(define-extern hint object) ;; unknown type
(define-extern set-video-mode function)
;;(define-extern bg-a object) ;; unknown type
;;(define-extern bg-b object) ;; unknown type
;;(define-extern near object) ;; unknown type
;;(define-extern mid object) ;; unknown type
;;(define-extern rel object) ;; unknown type
;;(define-extern music object) ;; unknown type
;;(define-extern allow-look-around object) ;; unknown type
;;(define-extern sfx-volume-movie object) ;; unknown type
;;(define-extern bg-a-speed object) ;; unknown type
;;(define-extern sound-flava object) ;; unknown type
;;(define-extern ocean-off object) ;; unknown type
;;(define-extern common-page object) ;; unknown type
;;(define-extern ambient-volume-movie object) ;; unknown type
;;(define-extern dialog-volume-hint object) ;; unknown type
;;(define-extern movie object) ;; unknown type
;;(define-extern bg-a-force object) ;; unknown type
;;(define-extern bg-g object) ;; unknown type
;;(define-extern border-mode object) ;; unknown type
;;(define-extern bg-r object) ;; unknown type
;;(define-extern vibration object) ;; unknown type
;;(define-extern dialog-volume object) ;; unknown type
;;(define-extern ambient object) ;; unknown type
;;(define-extern play-hints object) ;; unknown type
;;(define-extern music-volume-movie object) ;; unknown type
(define-extern set-aspect-ratio function)
;;(define-extern *rolling-mood* object) ;; unknown type
;;(define-extern *misty-mood* object) ;; unknown type
;;(define-extern *ogre-mood-fog-table* object) ;; unknown type
;;(define-extern *citadel-mood-sun-table* object) ;; unknown type
;;(define-extern *lavatube-mood-lights-table* object) ;; unknown type
;;(define-extern *citadel-mood* object) ;; unknown type
;;(define-extern *swamp-mood-fog-table* object) ;; unknown type
;;(define-extern *firecanyon-mood-lights-table* object) ;; unknown type
;;(define-extern *sunken-mood-lights-table* object) ;; unknown type
;;(define-extern *training-mood-fog-table* object) ;; unknown type
;;(define-extern *ogre3-mood-fog-table* object) ;; unknown type
;;(define-extern *swamp-mood-sun-table* object) ;; unknown type
;;(define-extern *ogre2-mood-lights-table* object) ;; unknown type
;;(define-extern *finalboss-interp-table* object) ;; unknown type
;;(define-extern *firecanyon-mood-sun-table* object) ;; unknown type
;;(define-extern *firecanyon-mood-fog-table* object) ;; unknown type
;;(define-extern *darkcave-mood-fog-table* object) ;; unknown type
;;(define-extern *village1-mood* object) ;; unknown type
;;(define-extern *maincave-mood-fog-table* object) ;; unknown type
;;(define-extern *jungleb-mood-sun-table* object) ;; unknown type
;;(define-extern *village1-mood-sun-table* object) ;; unknown type
;;(define-extern *lavatube-mood-sun-table* object) ;; unknown type
;;(define-extern *village3-mood-fog-table* object) ;; unknown type
;;(define-extern *village1-mood-lights-table* object) ;; unknown type
;;(define-extern *rolling-mood-sun-table* object) ;; unknown type
;;(define-extern *ogre2-mood* object) ;; unknown type
;;(define-extern *lavatube-mood* object) ;; unknown type
;;(define-extern *misty-mood-fog-table* object) ;; unknown type
;;(define-extern *darkcave-mood-lights-table* object) ;; unknown type
;;(define-extern *maincave-mood-lights-table* object) ;; unknown type
(define-extern make-rolling-light-kit function)
;;(define-extern *jungleb-mood* object) ;; unknown type
;;(define-extern *default-interp-table* object) ;; unknown type
;;(define-extern *misty-mood-sun-table* object) ;; unknown type
;;(define-extern *village1-mood-fog-table* object) ;; unknown type
;;(define-extern *village1-palette-interp-table* object) ;; unknown type
;;(define-extern *robocave-mood* object) ;; unknown type
(define-extern make-village3-light-kit function)
;;(define-extern *sunken-mood-sun-table* object) ;; unknown type
;;(define-extern *village2-sky-texture-table* object) ;; unknown type
;;(define-extern *default-mood* object) ;; unknown type
;;(define-extern *snow-mood* object) ;; unknown type
;;(define-extern *sunkenb-mood* object) ;; unknown type
;;(define-extern *sunken-mood* object) ;; unknown type
;;(define-extern *jungle-mood* object) ;; unknown type
(define-extern update-mood-erase-color function)
(define-extern make-village1-light-kit function)
;;(define-extern *snow-mood-sun-table* object) ;; unknown type
;;(define-extern *citadel-mood-lights-table* object) ;; unknown type
;;(define-extern *finalboss-mood* object) ;; unknown type
;;(define-extern *firecanyon-palette-interp-table* object) ;; unknown type
(define-extern update-mood-erase-color2 function)
;;(define-extern *snow-mood-lights-table* object) ;; unknown type
;;(define-extern *maincave-mood* object) ;; unknown type
;;(define-extern *village2-mood* object) ;; unknown type
;;(define-extern *darkcave-mood* object) ;; unknown type
;;(define-extern *village3-mood* object) ;; unknown type
;;(define-extern *swamp-mood-lights-table* object) ;; unknown type
;;(define-extern *village2-mood-lights-table* object) ;; unknown type
;;(define-extern *village2-mood-sun-table* object) ;; unknown type
;;(define-extern *village3-mood-lights-table* object) ;; unknown type
;;(define-extern *ogre3-mood-lights-table* object) ;; unknown type
;;(define-extern *rolling-mood-lights-table* object) ;; unknown type
;;(define-extern *finalboss2-mood* object) ;; unknown type
;;(define-extern *rolling-palette-interp-table* object) ;; unknown type
;;(define-extern *beach-mood* object) ;; unknown type
;;(define-extern *ogre-mood* object) ;; unknown type
(define-extern update-mood-shadow-direction function)
(define-extern make-light-kit function)
;;(define-extern *jungleb-mood-lights-table* object) ;; unknown type
;;(define-extern *village2-mood-fog-table* object) ;; unknown type
;;(define-extern *swamp-mood* object) ;; unknown type
;;(define-extern *firecanyon-mood* object) ;; unknown type
;;(define-extern *lavatube-mood-fog-table* object) ;; unknown type
;;(define-extern *ogre-mood-lights-table* object) ;; unknown type
(define-extern make-village2-light-kit function)
;;(define-extern *misty-mood-lights-table* object) ;; unknown type
;;(define-extern *ogre3-mood* object) ;; unknown type
;;(define-extern *citadel-mood-fog-table* object) ;; unknown type
;;(define-extern *sunken-mood-fog-table* object) ;; unknown type
(define-extern make-misty-light-kit function)
;;(define-extern *snow-mood-fog-table* object) ;; unknown type
;;(define-extern *jungleb-mood-fog-table* object) ;; unknown type
;;(define-extern *misty-palette-interp-table* object) ;; unknown type
;;(define-extern *rolling-mood-fog-table* object) ;; unknown type
;;(define-extern *training-mood* object) ;; unknown type
;;(define-extern *finalboss-mood-fog-table* object) ;; unknown type
;;(define-extern *darkcave-mood-sun-table* object) ;; unknown type
;;(define-extern *maincave-mood-sun-table* object) ;; unknown type
;;(define-extern *robocave-mood-fog-table* object) ;; unknown type
;;(define-extern *finalboss-mood-sun-table* object) ;; unknown type
;;(define-extern *flash0* object) ;; unknown type
;;(define-extern *lava-time* object) ;; unknown type
;;(define-extern ogre-states object) ;; unknown type
(define-extern update-mood-robocave function)
(define-extern update-mood-maincave function)
(define-extern update-mood-citadel function)
;;(define-extern flames-state object) ;; unknown type
(define-extern update-mood-fog function)
;;(define-extern rolling-states object) ;; unknown type
(define-extern update-mood-prt-color function)
;;(define-extern *flash4* object) ;; unknown type
;;(define-extern robocave-states object) ;; unknown type
;;(define-extern lavatube-states object) ;; unknown type
(define-extern update-mood-rolling function)
;;(define-extern *rolling-spheres-on* object) ;; unknown type
(define-extern update-mood-village1 function)
;;(define-extern lightning-state object) ;; unknown type
;;(define-extern *flash3* object) ;; unknown type
;;(define-extern *rolling-spheres-light0* object) ;; unknown type
;;(define-extern *lightning-index* object) ;; unknown type
;;(define-extern finalboss-states object) ;; unknown type
(define-extern update-mood-village3 function)
;;(define-extern citadel-states object) ;; unknown type
(define-extern update-mood-snow function)
;;(define-extern maincave-states object) ;; unknown type
(define-extern update-mood-flames function)
(define-extern update-mood-default function)
(define-extern update-light-kit function)
(define-extern clear-mood-times function)
(define-extern update-mood-misty function)
;;(define-extern *rolling-spheres-light4* object) ;; unknown type
;;(define-extern *rolling-spheres-light3* object) ;; unknown type
(define-extern update-mood-ogre function)
;;(define-extern *thunder-id* object) ;; unknown type
(define-extern update-mood-lavatube function)
(define-extern update-mood-firecanyon function)
(define-extern update-mood-itimes function)
;;(define-extern *flash7* object) ;; unknown type
;;(define-extern *thunder-id1* object) ;; unknown type
;;(define-extern *lightning-frame-done* object) ;; unknown type
(define-extern update-mood-lightning function)
;;(define-extern *flash2* object) ;; unknown type
(define-extern update-mood-jungleb-blue function)
(define-extern update-mood-darkcave function)
;;(define-extern snow-states object) ;; unknown type
(define-extern update-mood-jungle function)
;;(define-extern lava-state object) ;; unknown type
(define-extern update-mood-sky-texture function)
(define-extern update-mood-training function)
(define-extern update-mood-palette function)
;;(define-extern training-states object) ;; unknown type
(define-extern update-mood-swamp function)
(define-extern update-mood-lava function)
(define-extern update-mood-jungleb function)
(define-extern update-mood-light function)
;;(define-extern light-time-state object) ;; unknown type
(define-extern update-mood-sunken function)
;;(define-extern *lightning-time* object) ;; unknown type
;;(define-extern *lightning-realtime-done* object) ;; unknown type
;;(define-extern *flash6* object) ;; unknown type
(define-extern update-mood-village2 function)
;;(define-extern *thunder-id0* object) ;; unknown type
;;(define-extern *rolling-spheres-light1* object) ;; unknown type
;;(define-extern *thunder-count* object) ;; unknown type
;;(define-extern *flash1* object) ;; unknown type
;;(define-extern swamp-village2-states object) ;; unknown type
;;(define-extern *lightning-time2* object) ;; unknown type
(define-extern update-mood-caustics function)
;;(define-extern sunken-states object) ;; unknown type
;;(define-extern firecanyon-states object) ;; unknown type
(define-extern update-mood-interp function)
;;(define-extern village1-states object) ;; unknown type
(define-extern set-target-light-index function)
;;(define-extern village3-states object) ;; unknown type
(define-extern update-mood-finalboss function)
;;(define-extern misty-states object) ;; unknown type
;;(define-extern *thunder-id2* object) ;; unknown type
;;(define-extern light-state object) ;; unknown type
(define-extern update-mood-quick function)
;;(define-extern jungle-states object) ;; unknown type
;;(define-extern *rolling-spheres-light2* object) ;; unknown type
;;(define-extern *flash5* object) ;; unknown type
(define-extern target-joint-pos function)
;;(define-extern target-continue object) ;; unknown type
(define-extern update-snow function)
;;(define-extern group-rain-screend-drop object) ;; unknown type
(define-extern check-drop-level-rain function)
(define-extern cam-master-effect function)
(define-extern update-rain function)
(define-extern sparticle-track-sun function)
;;(define-extern part-water-drip object) ;; unknown type
(define-extern matrix-local->world function)
;;(define-extern time-of-day-effect object) ;; unknown type
(define-extern init-time-of-day function)
(define-extern init-time-of-day-context function)
;;(define-extern time-of-day-tick object) ;; unknown type
(define-extern set-time-of-day function)
(define-extern update-time-of-day function)
(define-extern start-time-of-day function)
(define-extern time-of-day-setup function)
(define-extern time-of-day-update function)
(define-extern update-sky-tng-data function)
;;(define-extern sky-base-polygons object) ;; unknown type
(define-extern make-sky-textures function)
;;(define-extern sunken object) ;; unknown type
(define-extern sky-set-orbit function)
(define-extern sky-set-sun-colors-sun function)
(define-extern sky-set-sun-colors-halo function)
(define-extern sky-set-sun-radii function)
(define-extern sky-set-sun-colors function)
(define-extern sky-set-sun-colors-aurora function)
(define-extern sky-make-sun-data function)
;;(define-extern sky-frame-data object) ;; unknown type
;;(define-extern sky-vu1-block object) ;; unknown type
(define-extern sky-init-upload-data function)
(define-extern sky-upload function)
(define-extern sky-draw function)
(define-extern sky-add-frame-data function)
(define-extern sky-make-light function)
(define-extern sky-make-moon-data function)
(define-extern clip-polygon-against-negative-hyperplane function)
(define-extern render-sky-tng function)
(define-extern init-sky-tng-data function)
;;(define-extern sky-cloud-polygons object) ;; unknown type
(define-extern sky-tng-setup-cloud-layer function)
(define-extern copy-cloud-texture function)
;;(define-extern sky-cloud-polygon-indices object) ;; unknown type
(define-extern clip-polygon-against-positive-hyperplane function)
(define-extern sky-duplicate-polys function)
(define-extern sky-tng-setup-clouds function)
(define-extern init-sky-regs function)
;;(define-extern sky-roof-polygons object) ;; unknown type
(define-extern render-sky-tri function)
;;(define-extern *sky-work* object) ;; unknown type
(define-extern copy-sky-texture function)
(define-extern close-sky-buffer function)
(define-extern set-tex-offset function)
(define-extern draw-large-polygon function)
;;(define-extern *sky-tng-data* object) ;; unknown type
(define-extern render-sky-quad function)
;;(define-extern load-boundary object) ;; unknown type
;;(define-extern lbvtx object) ;; unknown type
;;(define-extern *load-boundary-list* object) ;; unknown type
;;(define-extern load-boundary-crossing-command object) ;; unknown type
;;(define-extern *load-boundary-target* object) ;; unknown type
(define-extern edit-load-boundaries function)
(define-extern fix-boundary-normals function)
(define-extern lb-set-player function)
(define-extern save-boundary-cmd function)
(define-extern command-get-int function)
(define-extern check-boundary function)
(define-extern load-state-want-vis function)
(define-extern add-boundary-shader function)
(define-extern load-state-want-levels function)
(define-extern lb-add-vtx-before function)
(define-extern draw-boundary-polygon function)
(define-extern load-boundary-from-template function)
(define-extern ---lb-save function)
(define-extern command-get-time function)
(define-extern format-boundary-cmd function)
(define-extern command-get-quoted-param function)
(define-extern copy-load-command! function)
(define-extern lb-add-load-plane function)
(define-extern triangulate-boundary function)
(define-extern render-boundaries function)
(define-extern replace-load-boundary function)
;;(define-extern *boundary-polygon* object) ;; unknown type
(define-extern command-get-float function)
(define-extern lb-set-camera function)
(define-extern draw-boundary-cap function)
(define-extern lb-add function)
(define-extern load-state-want-display-level function)
(define-extern render-boundary function)
(define-extern init-boundary-regs function)
(define-extern lb-del function)
(define-extern render-boundary-quad function)
(define-extern lb-flip function)
;;(define-extern lb-editor-parms object) ;; unknown type
;;(define-extern *triangulation-buffer* object) ;; unknown type
(define-extern check-open-boundary function)
(define-extern point-in-polygon function)
;;(define-extern *display-load-commands* object) ;; unknown type
(define-extern copy-load-boundary! function)
(define-extern render-boundary-tri function)
(define-extern command-list-get-process function)
(define-extern lb-del-vtx function)
(define-extern lb-add-load function)
(define-extern try-corner function)
(define-extern lb-add-plane function)
;;(define-extern *lb-editor-parms* object) ;; unknown type
(define-extern find-bounding-circle function)
(define-extern check-closed-boundary function)
(define-extern command-get-param function)
(define-extern draw-boundary-side function)
(define-extern lb-add-vtx-after function)
;;(define-extern *backup-load-state* object) ;; unknown type
(define-extern load-state-want-force-vis function)
(define-extern boundary-set-color function)
(define-extern split-monotone-polygon function)
(define-extern lb-copy function)
(define-extern ambient-hint-spawn function)
;;(define-extern shadow object) ;; unknown type
;;(define-extern special object) ;; unknown type
;;(define-extern want-force-inside object) ;; unknown type
;;(define-extern alive object) ;; unknown type
;;(define-extern self object) ;; unknown type
(define-extern process-by-ename function)
;;(define-extern set! object) ;; unknown type
;;(define-extern quote object) ;; unknown type
;;(define-extern teleport object) ;; unknown type
;;(define-extern deg object) ;; unknown type
;;(define-extern want-force-vis object) ;; unknown type
;;(define-extern static-vectorm object) ;; unknown type
(define-extern blackout function)
;;(define-extern setting-unset object) ;; unknown type
;;(define-extern parent object) ;; unknown type
;;(define-extern send-event object) ;; unknown type
;;(define-extern display-level object) ;; unknown type
;;(define-extern seconds object) ;; unknown type
;;(define-extern want-levels object) ;; unknown type
;;(define-extern kill object) ;; unknown type
(define-extern part-tracker-init function)
;;(define-extern time-of-day object) ;; unknown type
;;(define-extern want-vis object) ;; unknown type
;;(define-extern setting-reset object) ;; unknown type
;;(define-extern meters object) ;; unknown type
(define-extern entity-birth-no-kill function)
;;(define-extern *static-load-boundary-list* object) ;; unknown type
;;(define-extern swa object) ;; unknown type
;;(define-extern jub object) ;; unknown type
;;(define-extern fic object) ;; unknown type
;;(define-extern rob object) ;; unknown type
;;(define-extern sno object) ;; unknown type
;;(define-extern sub object) ;; unknown type
;;(define-extern dar object) ;; unknown type
;;(define-extern vi1 object) ;; unknown type
;;(define-extern ogr object) ;; unknown type
;;(define-extern vi2 object) ;; unknown type
;;(define-extern rol object) ;; unknown type
;;(define-extern cit object) ;; unknown type
;;(define-extern darkcave object) ;; unknown type
;;(define-extern bea object) ;; unknown type
;;(define-extern vi3 object) ;; unknown type
;;(define-extern fin object) ;; unknown type
;;(define-extern display-no-wait object) ;; unknown type
;;(define-extern sunkenb object) ;; unknown type
;;(define-extern jun object) ;; unknown type
;;(define-extern special-vis object) ;; unknown type
;;(define-extern robocave object) ;; unknown type
;;(define-extern mai object) ;; unknown type
;;(define-extern lav object) ;; unknown type
;;(define-extern sun object) ;; unknown type
;;(define-extern title object) ;; unknown type
;;(define-extern demo object) ;; unknown type
;;(define-extern default-level object) ;; unknown type
;;(define-extern intro object) ;; unknown type
;;(define-extern halfpipe object) ;; unknown type
;;(define-extern none object) ;; unknown type
;;(define-extern robocave-vis object) ;; unknown type
;;(define-extern tra object) ;; unknown type
;;(define-extern default-level-vis object) ;; unknown type
;;(define-extern lavatube-vis object) ;; unknown type
;;(define-extern maincave-vis object) ;; unknown type
;;(define-extern beach-vis object) ;; unknown type
;;(define-extern jungleb-vis object) ;; unknown type
;;(define-extern sunkenb-vis object) ;; unknown type
;;(define-extern mis object) ;; unknown type
;;(define-extern halfpipe-vis object) ;; unknown type
;;(define-extern ogre-vis object) ;; unknown type
;;(define-extern village3-vis object) ;; unknown type
;;(define-extern int object) ;; unknown type
;;(define-extern swamp-vis object) ;; unknown type
;;(define-extern tit object) ;; unknown type
;;(define-extern rolling-vis object) ;; unknown type
;;(define-extern firecanyon-vis object) ;; unknown type
;;(define-extern snow-vis object) ;; unknown type
;;(define-extern village2-vis object) ;; unknown type
;;(define-extern citadel-vis object) ;; unknown type
;;(define-extern misty-vis object) ;; unknown type
;;(define-extern dem object) ;; unknown type
;;(define-extern jungle-vis object) ;; unknown type
;;(define-extern sunken-vis object) ;; unknown type
;;(define-extern village1-vis object) ;; unknown type
;;(define-extern darkcave-vis object) ;; unknown type
;;(define-extern demo-vis object) ;; unknown type
;;(define-extern finalboss-vis object) ;; unknown type
;;(define-extern intro-vis object) ;; unknown type
;;(define-extern title-vis object) ;; unknown type
;;(define-extern training-vis object) ;; unknown type
(define-extern show-level function)
(define-extern bg function)
;;(define-extern *login-state* object) ;; unknown type
(define-extern load-vis-info function)
(define-extern level-update-after-load function)
(define-extern update-sound-banks function)
(define-extern remap-level-name function)
(define-extern add-bsp-drawable function)
;;(define-extern *print-login* object) ;; unknown type
;;(define-extern link-resume object) ;; unknown type
;;(define-extern display-self object) ;; unknown type
;;(define-extern loading-done object) ;; unknown type
;;(define-extern login object) ;; unknown type
;;(define-extern loading-bt object) ;; unknown type
;;(define-extern level-activate object) ;; unknown type
;;(define-extern unload object) ;; unknown type
;;(define-extern debug-boot object) ;; unknown type
(define-extern on function)
;;(define-extern level-deactivate object) ;; unknown type
(define-extern enable-level-text-file-loading function)
;;(define-extern text-is-loading object) ;; unknown type
(define-extern load-game-text-info function)
(define-extern load-level-text-files function)
(define-extern disable-level-text-file-loading function)
;;(define-extern *level-text-file-load-flag* object) ;; unknown type
;;(define-extern *game-text-word* object) ;; unknown type
(define-extern print-game-text-scaled function)
(define-extern set-font-color-alpha function)
;;(define-extern *game-text-line* object) ;; unknown type
(define-extern draw-debug-text-box function)
;;(define-extern scf-get-territory object) ;; unknown type
(define-extern probe-traverse-inline-array-node function)
(define-extern collide-upload-vu0 function)
(define-extern collide-probe-instance-tie-collide-frags function)
(define-extern misty-ambush-height-probe function)
(define-extern indent-to function)
(define-extern interpolate function)
(define-extern probe-traverse-collide-fragment function)
(define-extern pke-collide-test function)
;;(define-extern *collide-probe-stack* object) ;; unknown type
(define-extern misty-ambush-height function)
(define-extern collide-probe-make-list function)
(define-extern probe-traverse-draw-node function)
(define-extern collide-probe-collide-fragment-tree-make-list function)
(define-extern creates-new-method? function)
(define-extern collide-probe-instance-tie-tree-make-list function)
(define-extern collide-probe-instance-tie function)
(define-extern describe-methods function)
;;(define-extern collide-probe-stack-elem object) ;; unknown type
(define-extern collide-probe-node function)
;;(define-extern collide-probe-stack object) ;; unknown type
(define-extern print-out function)
(define-extern distc function)
(define-extern overrides-parent-method? function)
;;(define-extern collide-vu0-block object) ;; unknown type
(define-extern sphere-cull function)
;;(define-extern oot-work object) ;; unknown type
;;(define-extern spat-work object) ;; unknown type
;;(define-extern sopt-work object) ;; unknown type
;;(define-extern add-prims-touching-work object) ;; unknown type
;;(define-extern pbhp-stack-vars object) ;; unknown type
;;(define-extern *rotate-surface* object) ;; unknown type
;;(define-extern *no-walk-surface* object) ;; unknown type
;;(define-extern edge-grabbed object) ;; unknown type
;;(define-extern target-edge-grab-jump object) ;; unknown type
(define-extern target-attack-up function)
(define-extern debug-report-col-stats function)
(define-extern find-ground-point function)
;;(define-extern *frame-timer* object) ;; unknown type
;;(define-extern *col-timer-enable* object) ;; unknown type
(define-extern collide-shape-draw-debug-marks function)
;;(define-extern *col-timer* object) ;; unknown type
(define-extern simple-collision-reaction function)
(define-extern default-collision-reaction function)
;;(define-extern shove object) ;; unknown type
;;(define-extern collide-mesh-group object) ;; unknown type
;;(define-extern *race-track-surface* object) ;; unknown type
;;(define-extern attack-invinc object) ;; unknown type
;;(define-extern burnup object) ;; unknown type
;;(define-extern deadlyup object) ;; unknown type
;;(define-extern up object) ;; unknown type
;;(define-extern attack-or-shove object) ;; unknown type
;;(define-extern endlessfall object) ;; unknown type
;;(define-extern burn object) ;; unknown type
;;(define-extern deadly object) ;; unknown type
;;(define-extern melt object) ;; unknown type
;;(define-extern ridden object) ;; unknown type
;;(define-extern rotate-y-angle object) ;; unknown type
;;(define-extern *collide-vif0-init* object) ;; unknown type
(define-extern collide-planes-intersect function)
(define-extern collide-planes-test1 function)
(define-extern collide-planes-test0 function)
(define-extern collide-planes function)
(define-extern camera-bounding-box-draw function)
(define-extern camera-cross function)
;;(define-extern death-warp-in object) ;; unknown type
(define-extern death-info type)
;;(define-extern death-warp-out object) ;; unknown type
(define-extern birth-func-death-sparks function)
;;(define-extern death-default object) ;; unknown type
;;(define-extern death-beach-puppy object) ;; unknown type
;;(define-extern *merc-death-globals* object) ;; unknown type
;;(define-extern death-jungle-snake object) ;; unknown type
;;(define-extern warpgate-tele object) ;; unknown type
;;(define-extern temp-enemy-die object) ;; unknown type
;;(define-extern water-control object) ;; unknown type
(define-extern cam-state-from-entity function)
(define-extern parameter-ease-sqrt-clamp function)
(define-extern third-power function)
(define-extern parameter-ease-clamp function)
(define-extern cam-slave-get-float function)
(define-extern fourth-power function)
(define-extern cam-slave-init function)
(define-extern cam-standard-event-handler function)
(define-extern cam-slave-get-vector-with-offset function)
(define-extern vector-into-frustum-nosmooth! function)
(define-extern cam-slave-get-interp-time function)
(define-extern parameter-ease-none function)
(define-extern parameter-ease-sqr-clamp function)
(define-extern cam-curve-pos function)
(define-extern parameter-ease-sin-clamp function)
(define-extern slave-set-rotation! function)
(define-extern cam-slave-get-rot function)
(define-extern slave-matrix-blend-2 function)
(define-extern mat-remove-z-rot function)
(define-extern cam-slave-get-fov function)
(define-extern cam-calc-follow! function)
(define-extern v-slrp3! function)
(define-extern cam-slave-get-intro-step function)
(define-extern cam-curve-setup function)
(define-extern cam-slave-get-flags function)
(define-extern cam-slave-init-vars function)
(define-extern v-slrp2! function)
;;(define-extern *cam-res-string* object) ;; unknown type
(define-extern cam-slave-go function)
(define-extern parameter-ease-lerp-clamp function)
;;(define-extern cam-standoff-read-entity object) ;; unknown type
;;(define-extern -offset object) ;; unknown type
;;(define-extern cam-spline object) ;; unknown type
;;(define-extern change-state-no-go object) ;; unknown type
;;(define-extern slave-option? object) ;; unknown type
;;(define-extern pivot object) ;; unknown type
;;(define-extern target-swim-up object) ;; unknown type
;;(define-extern campoints object) ;; unknown type
;;(define-extern *camera-base-mode* object) ;; unknown type
;;(define-extern slave-activated object) ;; unknown type
;;(define-extern campath object) ;; unknown type
;;(define-extern cam-circular object) ;; unknown type
;;(define-extern point-of-interest object) ;; unknown type
;;(define-extern -off object) ;; unknown type
(define-extern camera-slave-debug function)
;;(define-extern cam-fixed-read-entity object) ;; unknown type
;;(define-extern interpTime object) ;; unknown type
;;(define-extern cam-voicebox object) ;; unknown type
;;(define-extern campath-k object) ;; unknown type
;;(define-extern change-state object) ;; unknown type
;;(define-extern intro-exitValue object) ;; unknown type
;;(define-extern intro-k object) ;; unknown type
;;(define-extern fov object) ;; unknown type
;;(define-extern -on object) ;; unknown type
;;(define-extern stringMaxLength object) ;; unknown type
;;(define-extern align object) ;; unknown type
(define-extern camera-line-rel-len function)
;;(define-extern intro-time object) ;; unknown type
;;(define-extern go object) ;; unknown type
(define-extern camera-teleport-to-entity function)
;;(define-extern *camera-dummy-vector* object) ;; unknown type
(define-extern matrix-world->local function)
(define-extern camera-angle function)
;;(define-extern teleport-to-transformq object) ;; unknown type
(define-extern master-track-target function)
(define-extern in-cam-entity-volume? function)
(define-extern master-switch-to-entity function)
(define-extern cam-master-init function)
(define-extern reset-target-tracking function)
(define-extern master-unset-region function)
(define-extern reset-drawable-tracking function)
(define-extern master-is-hopeful-better? function)
;;(define-extern list-keeper object) ;; unknown type
;;(define-extern cam-master-active object) ;; unknown type
(define-extern reset-follow function)
(define-extern master-check-regions function)
(define-extern master-base-region function)
(define-extern list-keeper-init function)
;;(define-extern list-keeper-active object) ;; unknown type
(define-extern camera-master-bank type)
(define-extern setup-slave-for-hopefull function)
;;(define-extern *CAMERA_MASTER-bank* object) ;; unknown type
(define-extern reset-drawable-follow function)
;;(define-extern cam-fixed object) ;; unknown type
;;(define-extern flags object) ;; unknown type
;;(define-extern query-state object) ;; unknown type
;;(define-extern stringCliffHeight object) ;; unknown type
;;(define-extern teleport-to-other-start-string object) ;; unknown type
;;(define-extern teleport-to-vector-start-string object) ;; unknown type
;;(define-extern yes-follow object) ;; unknown type
;;(define-extern cam-eye object) ;; unknown type
;;(define-extern toggle-slave-option object) ;; unknown type
;;(define-extern copy-tracking object) ;; unknown type
;;(define-extern damp-up object) ;; unknown type
;;(define-extern no-follow object) ;; unknown type
;;(define-extern set-slave-option object) ;; unknown type
;;(define-extern query-fov object) ;; unknown type
;;(define-extern intro-done? object) ;; unknown type
;;(define-extern pvol object) ;; unknown type
;;(define-extern reset-root object) ;; unknown type
;;(define-extern stringMaxHeight object) ;; unknown type
;;(define-extern start-tracking object) ;; unknown type
;;(define-extern no-intro object) ;; unknown type
;;(define-extern stringMinHeight object) ;; unknown type
;;(define-extern cam-string object) ;; unknown type
;;(define-extern cutoutvol object) ;; unknown type
;;(define-extern change-target-bone object) ;; unknown type
(define-extern target-cam-pos function)
;;(define-extern set-interpolation object) ;; unknown type
;;(define-extern force-blend object) ;; unknown type
;;(define-extern stop-tracking object) ;; unknown type
;;(define-extern cam-stick object) ;; unknown type
;;(define-extern clear-entity object) ;; unknown type
;;(define-extern alternates object) ;; unknown type
;;(define-extern tiltAdjust object) ;; unknown type
;;(define-extern blend-from-as-fixed object) ;; unknown type
;;(define-extern change-pov object) ;; unknown type
;;(define-extern dist-from-interp-dest object) ;; unknown type
;;(define-extern change-target object) ;; unknown type
;;(define-extern cam-free-floating object) ;; unknown type
;;(define-extern change-to-entity-by-name object) ;; unknown type
;;(define-extern cam-decel object) ;; unknown type
;;(define-extern vol object) ;; unknown type
;;(define-extern ease-in object) ;; unknown type
;;(define-extern name object) ;; unknown type
;;(define-extern interesting object) ;; unknown type
;;(define-extern clear-slave-option object) ;; unknown type
(define-extern camera-master-debug function)
;;(define-extern stringMinLength object) ;; unknown type
;;(define-extern dist-from-interp-src object) ;; unknown type
(define-extern cam-dist-analog-input function)
(define-extern cam-draw-collide-cache function)
(define-extern cam-calc-bike-follow! function)
(define-extern cam-circular-position function)
(define-extern dist-info-append function)
(define-extern cam-string-bank type)
(define-extern string-push-help function)
;;(define-extern cam-endlessfall object) ;; unknown type
(define-extern cam-string-find-hidden function)
;;(define-extern *CAM_BIKE-bank* object) ;; unknown type
(define-extern cam-string-joystick function)
(define-extern cam-stick-bank type)
(define-extern cam-stick-code function)
;;(define-extern cam-lookat object) ;; unknown type
(define-extern cam-string-line-of-sight function)
(define-extern dist-info-init function)
(define-extern cam-string-move function)
(define-extern cam-billy-bank type)
;;(define-extern *CAM_STICK-bank* object) ;; unknown type
(define-extern cam-bike-code function)
(define-extern dist-info-print function)
(define-extern cam-los-setup-lateral function)
;;(define-extern *CAM_BILLY-bank* object) ;; unknown type
(define-extern set-string-parms function)
;;(define-extern los-dist object) ;; unknown type
;;(define-extern cam-standoff object) ;; unknown type
(define-extern dist-info-valid? function)
(define-extern cam-string-follow function)
;;(define-extern collide-los-dist-info object) ;; unknown type
;;(define-extern cam-bike object) ;; unknown type
;;(define-extern cam-pov-track object) ;; unknown type
;;(define-extern cam-billy object) ;; unknown type
;;(define-extern cam-pov object) ;; unknown type
(define-extern cam-circular-position-into-max-angle function)
(define-extern cam-string-find-position-rel! function)
(define-extern cam-bike-bank type)
(define-extern cam-string-set-position-rel! function)
;;(define-extern *CAM_EYE-bank* object) ;; unknown type
;;(define-extern *CAM_STRING-bank* object) ;; unknown type
;;(define-extern collide-los-result object) ;; unknown type
(define-extern los-cw-ccw function)
(define-extern cam-string-code function)
(define-extern cam-circular-code function)
(define-extern cam-los-spline-collide function)
(define-extern cam-los-collide function)
(define-extern cam-standoff-calc-trans function)
(define-extern cam-eye-bank type)
;;(define-extern cam-pov180 object) ;; unknown type
;;(define-extern focalPull object) ;; unknown type
;;(define-extern focalpull object) ;; unknown type
;;(define-extern set-dist object) ;; unknown type
(define-extern cam-debug-reset-coll-tri function)
;;(define-extern normal object) ;; unknown type
(define-extern cam-debug-add-los-tri function)
(define-extern slave-los-state->string function)
;;(define-extern end-mode object) ;; unknown type
;;(define-extern outro-done object) ;; unknown type
;;(define-extern blocked-side? object) ;; unknown type
;;(define-extern spline-offset object) ;; unknown type
;;(define-extern spline-follow-dist object) ;; unknown type
;;(define-extern joystick object) ;; unknown type
;;(define-extern set-standoff-dist object) ;; unknown type
;;(define-extern maxAngle object) ;; unknown type
;;(define-extern set-standoff-height object) ;; unknown type
(define-extern cam-collision-record-save function)
;;(define-extern no-hit object) ;; unknown type
(define-extern CAM_ORBIT-bank type)
;;(define-extern camera-orbit-info object) ;; unknown type
;;(define-extern camera-free-floating-move-info object) ;; unknown type
;;(define-extern *CAM_ORBIT-bank* object) ;; unknown type
;;(define-extern cam-point-watch object) ;; unknown type
;;(define-extern *CAM_FREE-bank* object) ;; unknown type
;;(define-extern cam-orbit object) ;; unknown type
(define-extern cam-point-watch-bank type)
;;(define-extern *CAM_POINT_WATCH-bank* object) ;; unknown type
(define-extern cam-free-floating-move function)
(define-extern cam-free-bank type)
(define-extern cam-free-floating-input function)
;;(define-extern *camera-orbit-info* object) ;; unknown type
(define-extern cam-combiner-init function)
;;(define-extern cam-combiner-active object) ;; unknown type
;;(define-extern *timer-value* object) ;; unknown type
;;(define-extern *start-timer* object) ;; unknown type
;;(define-extern *save-camera-inv-rot* object) ;; unknown type
(define-extern plane-from-points function)
(define-extern update-camera function)
(define-extern update-view-planes function)
(define-extern set-point function)
(define-extern move-camera-from-pad function)
;;(define-extern *start-pos* object) ;; unknown type
;;(define-extern *update-leaf-when-outside-bsp* object) ;; unknown type
(define-extern update-visible function)
;;(define-extern pause object) ;; unknown type
;;(define-extern pad-1 object) ;; unknown type
;;(define-extern pad-0 object) ;; unknown type
;;(define-extern vol-control object) ;; unknown type
;;(define-extern plane-volume object) ;; unknown type
(define-extern cam-layout-do-menu function)
;;(define-extern *clm-intro-attr* object) ;; unknown type
;;(define-extern *volume-descriptor* object) ;; unknown type
;;(define-extern *volume-normal-current* object) ;; unknown type
(define-extern cam-layout-save-fov function)
(define-extern clmf-save-one function)
(define-extern cam-layout-init function)
;;(define-extern *clm* object) ;; unknown type
(define-extern clmf-cam-deg function)
(define-extern clmf-cam-fov function)
(define-extern cam-layout-entity-volume-info function)
(define-extern clm-item type)
(define-extern clmf-to-focalpull-attr function)
(define-extern cam-layout-save-align function)
(define-extern clm-list-item type)
(define-extern cam-layout-bank type)
(define-extern v-slrp! function)
;;(define-extern *volume-point* object) ;; unknown type
(define-extern clmf-to-edit-cam function)
(define-extern clmf-look-through function)
;;(define-extern *volume-point-current* object) ;; unknown type
(define-extern clmf-save-all function)
(define-extern cam-layout-save-interptime function)
(define-extern cam-layout-start function)
(define-extern cam-layout-save-tiltAdjust function)
(define-extern clmf-to-index-attr function)
(define-extern clmf-cam-float-adjust function)
;;(define-extern clmf-cam-flag-toggle-info object) ;; unknown type
;;(define-extern *clm-cam-lookthrough* object) ;; unknown type
;;(define-extern *camera-layout-blink* object) ;; unknown type
(define-extern cam-layout-save-splineoffset function)
(define-extern clmf-cam-string function)
;;(define-extern *clm-edit* object) ;; unknown type
(define-extern cam-layout-function-call function)
;;(define-extern cam-layout object) ;; unknown type
(define-extern clmf-to-select function)
;;(define-extern *clm-focalpull-attr* object) ;; unknown type
(define-extern clmf-cam-intro-time function)
(define-extern clm-basic type)
(define-extern clmf-save-single function)
(define-extern cam-layout-entity-volume-info-create function)
(define-extern clmf-cam-flag function)
(define-extern cam-layout-restart function)
(define-extern clmf-next-vol-dpad function)
;;(define-extern *clm-cam-attr* object) ;; unknown type
(define-extern cam-layout-save-interesting function)
(define-extern cam-layout-save-stringMinLength function)
(define-extern cam-layout-do-action function)
;;(define-extern *clm-vol-attr* object) ;; unknown type
(define-extern clmf-implement function)
(define-extern cam-layout-intersect-dist function)
(define-extern fov->maya function)
;;(define-extern *volume-normal* object) ;; unknown type
(define-extern clmf-cam-float function)
(define-extern cam-layout-save-flags function)
;;(define-extern cam-layout-active object) ;; unknown type
(define-extern cam-layout-save-introsplinetime function)
(define-extern cam-layout-save-focalpull function)
;;(define-extern *camera-layout-message-ypos* object) ;; unknown type
(define-extern cam-layout-save-focalpull-flags function)
(define-extern cam-layout-save-stringCliffHeight function)
(define-extern clmf-to-spline-attr function)
;;(define-extern *clm-spline-attr* object) ;; unknown type
(define-extern clmf-bna function)
;;(define-extern volume-descriptor-array object) ;; unknown type
(define-extern clmf-input function)
;;(define-extern *clm-select* object) ;; unknown type
(define-extern cam-layout-save-stringMinHeight function)
(define-extern cam-layout-save-cam-rot function)
(define-extern clmf-cam-interp-time function)
(define-extern clmf-to-intro-attr function)
(define-extern cam-layout-save-campoints-flags function)
(define-extern clmf-to-vol-attr function)
(define-extern cam-layout-stop function)
(define-extern cam-layout-save-pivot function)
;;(define-extern *clm-save-one* object) ;; unknown type
(define-extern cam-layout-save-stringMaxHeight function)
(define-extern cam-layout-save-campointsoffset function)
(define-extern clm type)
(define-extern cam-layout-save-introsplineexitval function)
(define-extern interp-test-deg function)
;;(define-extern *clm-save-all* object) ;; unknown type
(define-extern cam-layout-save-maxAngle function)
;;(define-extern *CAM_LAYOUT-bank* object) ;; unknown type
(define-extern clmf-to-edit function)
;;(define-extern *clm-index-attr* object) ;; unknown type
(define-extern cam-layout-save-stringMaxLength function)
(define-extern clmf-cam-flag-toggle function)
(define-extern cam-layout-save-cam-trans function)
(define-extern clmf-next-volume function)
(define-extern clmf-button-test function)
(define-extern cam-layout-save-spline-follow-dist-offset function)
(define-extern clmf-pos-rot function)
(define-extern cam-layout-entity-info function)
(define-extern cam-layout-print function)
;;(define-extern *volume-descriptor-current* object) ;; unknown type
(define-extern clm-item-action type)
(define-extern clmf-cam-meters function)
(define-extern clm-list type)
;;(define-extern interp-test-info object) ;; unknown type
;;(define-extern *last-cur-entity* object) ;; unknown type
(define-extern clmf-next-entity function)
(define-extern interp-test function)
;;(define-extern index object) ;; unknown type
;;(define-extern interpTime-offset object) ;; unknown type
;;(define-extern campoints-offset object) ;; unknown type
;;(define-extern interesting-offset object) ;; unknown type
;;(define-extern stringCliffHeight-offset object) ;; unknown type
(define-extern camera-line-draw function)
;;(define-extern volume object) ;; unknown type
(define-extern camera-fov-frame function)
;;(define-extern cutoutvol-flags object) ;; unknown type
;;(define-extern spline object) ;; unknown type
;;(define-extern stringMinLength-offset object) ;; unknown type
;;(define-extern translation_info object) ;; unknown type
(define-extern camera-line-setup function)
;;(define-extern rot-offset object) ;; unknown type
(define-extern cam-slave-options->string function)
;;(define-extern x object) ;; unknown type
;;(define-extern stringMinHeight-offset object) ;; unknown type
;;(define-extern vol-flags object) ;; unknown type
;;(define-extern spline-follow-dist-offset object) ;; unknown type
;;(define-extern circle object) ;; unknown type
;;(define-extern intro-time-offset object) ;; unknown type
;;(define-extern fov-offset object) ;; unknown type
;;(define-extern right object) ;; unknown type
;;(define-extern triangle object) ;; unknown type
;;(define-extern focalpull-flags object) ;; unknown type
;;(define-extern intro-exitValue-offset object) ;; unknown type
;;(define-extern pivot-offset object) ;; unknown type
;;(define-extern campoints-flags object) ;; unknown type
;;(define-extern tiltAdjust-offset object) ;; unknown type
;;(define-extern l2 object) ;; unknown type
;;(define-extern r2 object) ;; unknown type
(define-extern cam-index-options->string function)
;;(define-extern down object) ;; unknown type
;;(define-extern square object) ;; unknown type
;;(define-extern trans-offset object) ;; unknown type
;;(define-extern align-offset object) ;; unknown type
;;(define-extern left object) ;; unknown type
;;(define-extern stringMaxHeight-offset object) ;; unknown type
;;(define-extern stringMaxLength-offset object) ;; unknown type
;;(define-extern pvol-flags object) ;; unknown type
;;(define-extern maxAngle-offset object) ;; unknown type
;;(define-extern focalPull-offset object) ;; unknown type
(define-extern cam-debug-draw-tris function)
(define-extern bike-cam-limit function)
;;(define-extern *cam-debug-los-tri* object) ;; unknown type
;;(define-extern *camera-old-vu* object) ;; unknown type
;;(define-extern *camera-old-level* object) ;; unknown type
;;(define-extern cam-collision-record-array object) ;; unknown type
(define-extern cam-collision-record-draw function)
;;(define-extern *cam-debug-coll-tri-current* object) ;; unknown type
;;(define-extern *camera-old-cpu* object) ;; unknown type
(define-extern camera-sphere function)
;;(define-extern *cam-collision-record* object) ;; unknown type
;;(define-extern *cam-debug-coll-tri* object) ;; unknown type
;;(define-extern *cam-collision-record-last* object) ;; unknown type
(define-extern cam-line-dma function)
(define-extern cam-collision-record-step function)
(define-extern camera-plot-float-func function)
(define-extern external-cam-reset! function)
(define-extern camera-fov-draw function)
;;(define-extern cam-debug-tri object) ;; unknown type
(define-extern debug-euler function)
;;(define-extern *camera-old-stat-string-tfrag-near* object) ;; unknown type
;;(define-extern *cam-debug-los-tri-current* object) ;; unknown type
(define-extern camera-line-rel function)
;;(define-extern cam-dbg-scratch object) ;; unknown type
;;(define-extern *camera-old-stat-string-total* object) ;; unknown type
;;(define-extern *camera-old-stat-string-tfrag* object) ;; unknown type
(define-extern master-draw-coordinates function)
;;(define-extern *cam-collision-record-show* object) ;; unknown type
(define-extern cam-debug-add-coll-tri function)
;;(define-extern cam-collision-record object) ;; unknown type
;;(define-extern *camera-old-tfrag-bytes* object) ;; unknown type
(define-extern camera-line2d function)
;;(define-extern *cam-collision-record-first* object) ;; unknown type
(define-extern cam-stop function)
(define-extern cam-start function)
(define-extern reset-cameras function)
(define-extern process-drawable-valid? function)
(define-extern anim-loop function)
(define-extern fill-skeleton-cache function)
(define-extern ja-post function)
;;(define-extern *valid-con* object) ;; unknown type
(define-extern ja-max? function)
(define-extern ja-frame-num function)
(define-extern ja-done? function)
(define-extern process-drawable-birth-fuel-cell function)
(define-extern make-nodes-from-jg function)
(define-extern ja-blend-eval function)
(define-extern draw-joint-spheres function)
;;(define-extern process-drawable-idle object) ;; unknown type
(define-extern ja-aframe function)
(define-extern rider-trans function)
(define-extern cspace-children function)
(define-extern cspace-inspect-tree function)
(define-extern rider-post function)
(define-extern ja-num-frames function)
(define-extern process-drawable-delay-player function)
(define-extern ja-group-size function)
(define-extern pusher-post function)
(define-extern execute-math-engine function)
;;(define-extern *default-skel-template* object) ;; unknown type
(define-extern ja-eval function)
(define-extern vector<-cspace+vector! function)
(define-extern process-drawable-fuel-cell-handler function)
(define-extern ja-speed function)
(define-extern ja-min? function)
(define-extern ja-step function)
(define-extern transform-post function)
;;(define-extern *debug-vertex-stats* object) ;; unknown type
;;(define-extern drawable-vertex-ratio object) ;; unknown type
;;(define-extern drawable-tri-count object) ;; unknown type
;;(define-extern mesh object) ;; unknown type
;;(define-extern pickup object) ;; unknown type
(define-extern dma-add-process-drawable function)
;;(define-extern shadow-mask object) ;; unknown type
;;(define-extern texture-bucket object) ;; unknown type
;;(define-extern vis-dist object) ;; unknown type
;;(define-extern root object) ;; unknown type
(define-extern add-process-drawable function)
(define-extern process-release? function)
(define-extern merc-eye-anim function)
;;(define-extern joint-channel object) ;; unknown type
(define-extern process-grab? function)
;;(define-extern prejoint object) ;; unknown type
;;(define-extern lod-dist object) ;; unknown type
(define-extern process-entity-status! function)
(define-extern birth-pickup-at-point function)
;;(define-extern light-index object) ;; unknown type
(define-extern can-hint-be-played? function)
(define-extern update-task-hints function)
(define-extern increment-success-for-hint function)
(define-extern start-hint-timer function)
(define-extern find-hint-control-index function)
;;(define-extern *hint-semaphore* object) ;; unknown type
(define-extern ambient-type-sound function)
(define-extern level-hint-init-by-other function)
(define-extern ambient-inspect function)
(define-extern ambient-type-ocean-off function)
(define-extern ambient-type-sound-loop function)
(define-extern ambient-type-dark function)
(define-extern ambient-type-weather-off function)
;;(define-extern *execute-ambients* object) ;; unknown type
;;(define-extern level-hint-sidekick object) ;; unknown type
;;(define-extern level-hint-exit object) ;; unknown type
;;(define-extern level-hint-normal object) ;; unknown type
;;(define-extern level-hint-error object) ;; unknown type
;;(define-extern level-hint-ambient-sound object) ;; unknown type
(define-extern ambient-hint-init-by-other function)
(define-extern ambient-type-poi function)
(define-extern level-hint-process-cmd function)
(define-extern ambient-type-music function)
(define-extern level-hint-displayed? function)
(define-extern ambient-type-light function)
(define-extern ambient-type-error function)
(define-extern ambient-type-hint function)
(define-extern level-hint-task-process function)
(define-extern ambient-type-ocean-near-off function)
(define-extern can-grab-display? function)
;;(define-extern sound object) ;; unknown type
;;(define-extern poi object) ;; unknown type
;;(define-extern ocean-near-off object) ;; unknown type
;;(define-extern dark object) ;; unknown type
;;(define-extern entity-meters object) ;; unknown type
;;(define-extern weather-off object) ;; unknown type
;;(define-extern text-id object) ;; unknown type
;;(define-extern loc-name-id object) ;; unknown type
(define-extern voicebox-spawn function)
;;(define-extern flava object) ;; unknown type
(define-extern hide-bottom-hud function)
;;(define-extern play-mode object) ;; unknown type
;;(define-extern cmds object) ;; unknown type
;;(define-extern voicebox object) ;; unknown type
(define-extern task-known? function)
;;(define-extern stinger object) ;; unknown type
;;(define-extern look-around object) ;; unknown type
;;(define-extern target-look-around object) ;; unknown type
;;(define-extern priority object) ;; unknown type
(define-extern bottom-hud-hidden? function)
(define-extern __assert-min-max-range-float function)
(define-extern __assert-zero-lim-range-int function)
(define-extern __assert function)
;;(define-extern *run-time-assert-enable* object) ;; unknown type
(define-extern __assert-min-max-range-int function)
;;(define-extern launcher-active object) ;; unknown type
(define-extern command-get-process function)
(define-extern ja-anim-done? function)
;;(define-extern cam-launcher-longfall object) ;; unknown type
;;(define-extern launcher-idle object) ;; unknown type
;;(define-extern manipy-idle object) ;; unknown type
(define-extern process-drawable-pair-random-point! function)
(define-extern camera-change-to function)
(define-extern draw-eco-beam function)
(define-extern command-get-camera function)
(define-extern birth-func-set-quat function)
(define-extern cam-launcher-long-joystick function)
;;(define-extern swingpole-stance object) ;; unknown type
;;(define-extern launcher-deactivated object) ;; unknown type
;;(define-extern *particle-quat* object) ;; unknown type
;;(define-extern med-res-level-idle object) ;; unknown type
(define-extern manipy-init function)
;;(define-extern *lev-string* object) ;; unknown type
(define-extern camera-anim function)
(define-extern cam-launcher-joystick function)
;;(define-extern part-tracker-process object) ;; unknown type
;;(define-extern camera-tracker-process object) ;; unknown type
(define-extern launcher-init-by-other function)
(define-extern camera-tracker-init function)
;;(define-extern swingpole-active object) ;; unknown type
;;(define-extern touch-tracker-idle object) ;; unknown type
(define-extern process-drawable-random-point! function)
(define-extern camera-pov-from function)
;;(define-extern part-spawner-active object) ;; unknown type
(define-extern camera-start type)
(define-extern med-res-level type)
(define-extern command-get-trans function)
(define-extern part-tracker-notify function)
;;(define-extern cam-launcher-shortfall object) ;; unknown type
(define-extern clone-anim-once function)
(define-extern clone-anim function)
(define-extern camera-look-at function)
;;(define-extern wait object) ;; unknown type
;;(define-extern loop object) ;; unknown type
;;(define-extern max-vis-dist object) ;; unknown type
;;(define-extern look-at object) ;; unknown type
;;(define-extern play1 object) ;; unknown type
;;(define-extern clone-parent object) ;; unknown type
;;(define-extern art-name object) ;; unknown type
;;(define-extern fixed object) ;; unknown type
;;(define-extern spring-height object) ;; unknown type
;;(define-extern beach-part-grotto-1 object) ;; unknown type
(define-extern hide-hud-quick function)
;;(define-extern release object) ;; unknown type
;;(define-extern rot-quat object) ;; unknown type
;;(define-extern until object) ;; unknown type
;;(define-extern while object) ;; unknown type
;;(define-extern mode object) ;; unknown type
(define-extern process-drawable-from-entity! function)
;;(define-extern event-hook object) ;; unknown type
;;(define-extern work-set! object) ;; unknown type
;;(define-extern instant-death object) ;; unknown type
(define-extern convert-to-hud-object function)
;;(define-extern alive? object) ;; unknown type
;;(define-extern copy-parent object) ;; unknown type
;;(define-extern message? object) ;; unknown type
;;(define-extern wait-for object) ;; unknown type
;;(define-extern trans-hook object) ;; unknown type
;;(define-extern pole-grab object) ;; unknown type
;;(define-extern target-grab object) ;; unknown type
;;(define-extern mask object) ;; unknown type
;;(define-extern alt-vector object) ;; unknown type
;;(define-extern anim-mode object) ;; unknown type
;;(define-extern work object) ;; unknown type
;;(define-extern still object) ;; unknown type
;;(define-extern blend-shape object) ;; unknown type
;;(define-extern clone-copy-trans object) ;; unknown type
;;(define-extern not object) ;; unknown type
;;(define-extern set-frame-num object) ;; unknown type
;;(define-extern null object) ;; unknown type
;;(define-extern target-launch object) ;; unknown type
;;(define-extern post-hook object) ;; unknown type
;;(define-extern origin-joint-index object) ;; unknown type
;;(define-extern suspend object) ;; unknown type
;;(define-extern center-joint object) ;; unknown type
;;(define-extern launch object) ;; unknown type
;;(define-extern pov object) ;; unknown type
;;(define-extern change-mode object) ;; unknown type
;;(define-extern become-hud-object object) ;; unknown type
;;(define-extern touched object) ;; unknown type
;;(define-extern border object) ;; unknown type
;;(define-extern anim object) ;; unknown type
;;(define-extern attackable object) ;; unknown type
(define-extern line-in-view-frustum? function)
;;(define-extern message object) ;; unknown type
;;(define-extern touch object) ;; unknown type
;;(define-extern *target-shadow-control* object) ;; unknown type
(define-extern ground-tween-initialize function)
(define-extern can-hands? function)
(define-extern can-exit-duck? function)
(define-extern target-start-attack function)
(define-extern set-side-vel function)
(define-extern ground-tween-update function)
(define-extern can-play-stance-amibent? function)
(define-extern fall-test function)
(define-extern slide-down-test function)
(define-extern vector-local+! function)
(define-extern target-height-above-ground function)
(define-extern target-bank type)
(define-extern can-duck? function)
(define-extern target-collide-set! function)
(define-extern target-timed-invulnerable-off function)
(define-extern target-danger-set! function)
(define-extern set-forward-vel function)
(define-extern average-turn-angle function)
(define-extern delete-back-vel function)
(define-extern move-legs? function)
(define-extern smack-surface? function)
(define-extern can-feet? function)
;;(define-extern *jchar-sg* object) ;; unknown type
(define-extern can-jump? function)
(define-extern target-timed-invulnerable function)
(define-extern move-forward function)
(define-extern target-rot function)
(define-extern target-align-vel-z-adjust function)
(define-extern can-wheel? function)
;;(define-extern *TARGET-bank* object) ;; unknown type
;;(define-extern duck-spin object) ;; unknown type
;;(define-extern flop-down object) ;; unknown type
;;(define-extern flut object) ;; unknown type
;;(define-extern wheel-solid object) ;; unknown type
;;(define-extern harmless object) ;; unknown type
;;(define-extern spin-air object) ;; unknown type
;;(define-extern duck-slide object) ;; unknown type
;;(define-extern tube object) ;; unknown type
;;(define-extern punch object) ;; unknown type
;;(define-extern target-falling object) ;; unknown type
;;(define-extern target-slide-down object) ;; unknown type
;;(define-extern spin object) ;; unknown type
;;(define-extern flip object) ;; unknown type
;;(define-extern flut-attack object) ;; unknown type
;;(define-extern target-wheel-flip object) ;; unknown type
;;(define-extern roll object) ;; unknown type
(define-extern birth-func-copy-target-y-rot function)
(define-extern part-tracker-track-target-joint function)
(define-extern birth-func-vector-orient function)
(define-extern process-drawable-burn-effect function)
(define-extern birth-func-ground-orient function)
(define-extern birth-func-target-orient function)
(define-extern part-first-person-hud-selector-func function)
(define-extern part-first-person-hud-right-func function)
(define-extern part-first-person-hud-left-func function)
(define-extern collide-shape-moving-angle-set! function)
(define-extern target-collision-no-reaction function)
(define-extern target-collision-low-coverage function)
(define-extern poly-find-nearest-edge function)
(define-extern target-collision-reaction function)
(define-extern build-conversions function)
(define-extern target-compute-edge function)
(define-extern read-pad function)
(define-extern level-setup function)
(define-extern target-swim-post function)
(define-extern init-target function)
(define-extern target-compute-edge-rider function)
(define-extern target-no-ja-move-post function)
(define-extern target-move-dist function)
(define-extern reverse-conversions function)
(define-extern print-history function)
(define-extern turn-around? function)
(define-extern target-post function)
(define-extern target-compute-pole function)
(define-extern local-pad-angle function)
(define-extern joint-points function)
(define-extern target-no-stick-post function)
(define-extern target-slide-down-post function)
(define-extern post-flag-setup function)
(define-extern draw-history function)
(define-extern vector<-pad-in-surface! function)
(define-extern reset-target-state function)
(define-extern warp-vector-into-surface! function)
(define-extern flag-setup function)
(define-extern target-print-stats function)
(define-extern turn-to-vector function)
(define-extern do-rotations2 function)
(define-extern target-compute-slopes function)
(define-extern add-thrust function)
(define-extern bend-gravity function)
(define-extern target-calc-camera-pos function)
(define-extern target-no-move-post function)
(define-extern vector-turn-to function)
(define-extern do-rotations1 function)
(define-extern add-gravity function)
(define-extern target-real-post function)
(define-extern activate-hud function)
(define-extern target-powerup-process function)
;;(define-extern falling object) ;; unknown type
(define-extern target-generic-event-handler function)
;;(define-extern current object) ;; unknown type
;;(define-extern target-walk object) ;; unknown type
(define-extern init-sidekick function)
(define-extern target-exit function)
;;(define-extern level-enter object) ;; unknown type
;;(define-extern target-clone-anim object) ;; unknown type
(define-extern do-target-shadow function)
;;(define-extern *sidekick-sg* object) ;; unknown type
(define-extern cspace<-cspace+quaternion! function)
;;(define-extern sidekick-clone object) ;; unknown type
(define-extern starts function)
;;(define-extern *sidekick-remap* object) ;; unknown type
;;(define-extern play-anim object) ;; unknown type
;;(define-extern empty-state object) ;; unknown type
(define-extern voicebox-track function)
;;(define-extern camera-voicebox object) ;; unknown type
(define-extern voicebox-init-by-other function)
;;(define-extern *voicebox-sg* object) ;; unknown type
;;(define-extern enter object) ;; unknown type
;;(define-extern idle object) ;; unknown type
(define-extern target-walk-event-handler function)
(define-extern target-standard-event-handler function)
(define-extern target-send-attack function)
(define-extern target-effect-exit function)
(define-extern target-dangerous-event-handler function)
(define-extern target-apply-tongue function)
(define-extern target-shoved function)
(define-extern target-bonk-event-handler function)
(define-extern target-state-hook-exit function)
(define-extern target-attacked function)
(define-extern target-jump-event-handler function)
(define-extern get-intersect-point function)
;;(define-extern ground-height object) ;; unknown type
;;(define-extern neck object) ;; unknown type
(define-extern billy type)
;;(define-extern group-spin-hit object) ;; unknown type
;;(define-extern reset-pickup object) ;; unknown type
;;(define-extern target-stance object) ;; unknown type
;;(define-extern target-play-anim object) ;; unknown type
;;(define-extern no-look-around object) ;; unknown type
;;(define-extern get-attack-count object) ;; unknown type
;;(define-extern get-pickup object) ;; unknown type
;;(define-extern target-periscope object) ;; unknown type
;;(define-extern target-wade-stance object) ;; unknown type
;;(define-extern tongue object) ;; unknown type
;;(define-extern target-fishing object) ;; unknown type
;;(define-extern racing object) ;; unknown type
;;(define-extern target-pole-cycle object) ;; unknown type
;;(define-extern target-load-wait object) ;; unknown type
;;(define-extern no-load-wait object) ;; unknown type
;;(define-extern group-uppercut-hit object) ;; unknown type
;;(define-extern darkeco object) ;; unknown type
;;(define-extern target-tube-start object) ;; unknown type
;;(define-extern damage object) ;; unknown type
;;(define-extern target-snowball-start object) ;; unknown type
;;(define-extern reset-height object) ;; unknown type
;;(define-extern target-swim-stance object) ;; unknown type
;;(define-extern target-jump object) ;; unknown type
;;(define-extern target-billy-game object) ;; unknown type
;;(define-extern target-eco-powerup object) ;; unknown type
;;(define-extern dry object) ;; unknown type
;;(define-extern final-door object) ;; unknown type
;;(define-extern target-hit object) ;; unknown type
;;(define-extern target-racing-start object) ;; unknown type
;;(define-extern target-edge-grab object) ;; unknown type
(define-extern target-powerup-effect function)
;;(define-extern fishing object) ;; unknown type
;;(define-extern target-stance-look-around object) ;; unknown type
;;(define-extern bonk object) ;; unknown type
(define-extern periscope type)
;;(define-extern continue object) ;; unknown type
;;(define-extern target-final-door object) ;; unknown type
;;(define-extern do-effect object) ;; unknown type
;;(define-extern group-flop-hit object) ;; unknown type
;;(define-extern snowball object) ;; unknown type
;;(define-extern target-flut-start object) ;; unknown type
;;(define-extern target-duck-stance object) ;; unknown type
;;(define-extern target-high-jump object) ;; unknown type
;;(define-extern target-flop-hit-ground object) ;; unknown type
;;(define-extern target-duck-walk object) ;; unknown type
;;(define-extern target-wheel object) ;; unknown type
(define-extern mod-var-jump function)
(define-extern target-hit-ground-anim function)
(define-extern target-falling-anim function)
;;(define-extern target-attack-uppercut-jump object) ;; unknown type
(define-extern target-falling-anim-trans function)
(define-extern target-falling-trans function)
;;(define-extern target-running-attack object) ;; unknown type
(define-extern init-var-jump function)
;;(define-extern target-attack object) ;; unknown type
;;(define-extern target-duck-high-jump object) ;; unknown type
;;(define-extern target-flop object) ;; unknown type
;;(define-extern target-double-jump object) ;; unknown type
;;(define-extern target-turn-around object) ;; unknown type
;;(define-extern target-hit-ground object) ;; unknown type
;;(define-extern target-attack-uppercut object) ;; unknown type
;;(define-extern target-attack-air object) ;; unknown type
;;(define-extern target-startup object) ;; unknown type
;;(define-extern target-jump-forward object) ;; unknown type
;;(define-extern target-duck-high-jump-jump object) ;; unknown type
;;(define-extern target-yellow-blast object) ;; unknown type
;;(define-extern swim-flop object) ;; unknown type
;;(define-extern target-ice-stance object) ;; unknown type
;;(define-extern collide-offset object) ;; unknown type
;;(define-extern target-ice-walk object) ;; unknown type
;;(define-extern target-swim-down object) ;; unknown type
;;(define-extern stuck object) ;; unknown type
;;(define-extern target-yellow-jump-blast object) ;; unknown type
;;(define-extern target-stance-ambient object) ;; unknown type
;;(define-extern target-wade-walk object) ;; unknown type
(define-extern target-land-effect function)
;;(define-extern group-blue-hit-ground-effect object) ;; unknown type
;;(define-extern group-red-eco-strike-ground object) ;; unknown type
;;(define-extern flop-forward object) ;; unknown type
;;(define-extern group-red-eco-spinkick object) ;; unknown type
;;(define-extern target-hit-ground-hard object) ;; unknown type
;;(define-extern target-swim-jump object) ;; unknown type
(define-extern first-person-hud-init-by-other function)
;;(define-extern target-pole-flip-forward-jump object) ;; unknown type
;;(define-extern target-edge-grab-off object) ;; unknown type
;;(define-extern hud-normal object) ;; unknown type
;;(define-extern target-pole-flip-forward object) ;; unknown type
;;(define-extern hud-waiting object) ;; unknown type
;;(define-extern first-person-hud object) ;; unknown type
;;(define-extern hud-coming-in object) ;; unknown type
;;(define-extern target-swim-jump-jump object) ;; unknown type
;;(define-extern *fp-hud-stack* object) ;; unknown type
;;(define-extern hud-going-out object) ;; unknown type
(define-extern look-for-points-of-interest function)
;;(define-extern *yellow-jump-mods* object) ;; unknown type
;;(define-extern target-pole-flip-up-jump object) ;; unknown type
;;(define-extern target-swim-walk object) ;; unknown type
(define-extern target-swim-tilt function)
;;(define-extern target-pole-flip-up object) ;; unknown type
;;(define-extern progress-gone object) ;; unknown type
;;(define-extern shock-out object) ;; unknown type
;;(define-extern min-max object) ;; unknown type
;;(define-extern drown-death object) ;; unknown type
(define-extern projectile-init-by-other function)
(define-extern enable-hud function)
;;(define-extern progress-going-out object) ;; unknown type
;;(define-extern stance object) ;; unknown type
;;(define-extern drown object) ;; unknown type
;;(define-extern go-away object) ;; unknown type
(define-extern disable-hud function)
;;(define-extern shock-in object) ;; unknown type
;;(define-extern generic object) ;; unknown type
;;(define-extern target-death object) ;; unknown type
(define-extern target-death-anim function)
(define-extern target-hit-push function)
;;(define-extern *death-spool-array* object) ;; unknown type
(define-extern death-movie-remap function)
(define-extern target-hit-setup-anim function)
;;(define-extern *smack-mods* object) ;; unknown type
;;(define-extern *auto-continue* object) ;; unknown type
;;(define-extern *smack-up-mods* object) ;; unknown type
;;(define-extern *deathcam-sg* object) ;; unknown type
(define-extern target-hit-orient function)
(define-extern velocity-set-to-target! function)
(define-extern target-hit-move function)
(define-extern target-hit-effect function)
(define-extern next-level function)
;;(define-extern lava object) ;; unknown type
(define-extern task-closed? function)
;;(define-extern music-movie-volume object) ;; unknown type
;;(define-extern sfx-movie-volume object) ;; unknown type
(define-extern sharkey type)
;;(define-extern up-forward object) ;; unknown type
(define-extern dark-eco-pool type)
;;(define-extern abort-request object) ;; unknown type
;;(define-extern death object) ;; unknown type
;;(define-extern ogreboss-super-boulder object) ;; unknown type
(define-extern start-sequence-a function)
(define-extern pov-camera-init-by-other function)
;;(define-extern back object) ;; unknown type
;;(define-extern target-title object) ;; unknown type
;;(define-extern target-demo object) ;; unknown type
;;(define-extern target-warp-in object) ;; unknown type
;;(define-extern tar object) ;; unknown type
;;(define-extern group-smack-surface-dizzy object) ;; unknown type
;;(define-extern front object) ;; unknown type
;;(define-extern group-smack-surface object) ;; unknown type
;;(define-extern hidden-other object) ;; unknown type
(define-extern plant-boss type)
(define-extern debug-menu-item-flag-msg function)
(define-extern debug-menu-append-item function)
(define-extern debug-menu-render function)
(define-extern debug-menu-rebuild function)
(define-extern debug-menu-item-send-msg function)
(define-extern debug-menus-active function)
(define-extern debug-menu-context-select-next-or-prev-item function)
(define-extern debug-menu-context-render function)
;;(define-extern debug-menu-item-submenu object) ;; unknown type
(define-extern debug-menu-item-function-render function)
(define-extern debug-menu-item-var-render function)
(define-extern debug-menu-find-from-template function)
(define-extern debug-menu-item-submenu-render function)
(define-extern debug-menu-context-close-submenu function)
(define-extern debug-menu-make-from-template function)
(define-extern debug-menu-item-render function)
(define-extern debug-menu-context-set-root-menu function)
;;(define-extern debug-menu-item object) ;; unknown type
(define-extern debug-menus-handler function)
(define-extern debug-menu-item-var-joypad-handler function)
;;(define-extern debug-menu-item-flag object) ;; unknown type
(define-extern debug-menu-item-function-msg function)
(define-extern debug-menu-context-grab-joypad function)
(define-extern debug-menu-item-submenu-msg function)
(define-extern debug-menu-item-var-make-float function)
;;(define-extern debug-menu-context object) ;; unknown type
(define-extern debug-menu-context-default-selection function)
;;(define-extern debug-menu-item-var object) ;; unknown type
(define-extern debug-menu-context-activate-selection function)
(define-extern debug-menus-default-joypad-func function)
(define-extern debug-menu-item-var-make-int function)
(define-extern debug-menu-remove-all-items function)
;;(define-extern debug-menu object) ;; unknown type
(define-extern debug-menu-item-var-update-display-str function)
(define-extern debug-menu-item-var-msg function)
(define-extern debug-menu-context-send-msg function)
(define-extern debug-menu-item-flag-render function)
(define-extern debug-menu-func-decode function)
;;(define-extern debug-menu-node object) ;; unknown type
(define-extern debug-menu-context-release-joypad function)
(define-extern debug-menu-context-open-submenu function)
;;(define-extern debug-menu-item-function object) ;; unknown type
(define-extern debug-menu-send-msg function)
(define-extern debug-menu-item-get-max-width function)
(define-extern debug-menu-context-select-new-item function)
;;(define-extern var object) ;; unknown type
;;(define-extern flag object) ;; unknown type
;;(define-extern float-var object) ;; unknown type
;;(define-extern int-var object) ;; unknown type
;;(define-extern main-menu object) ;; unknown type
;;(define-extern hex-var object) ;; unknown type
;;(define-extern int-var-gat1 object) ;; unknown type
;;(define-extern invalid object) ;; unknown type
;;(define-extern float-fixed-var object) ;; unknown type
(define-extern prototype-bucket-type function)
(define-extern real-main-draw-hook function)
(define-extern gregs-village1-cam-restore function)
;;(define-extern *hud-lights* object) ;; unknown type
(define-extern display-frame-finish function)
(define-extern swap-display function)
(define-extern gregs-texture2-cam-restore function)
(define-extern paals-cam-restore function)
;;(define-extern *add-sphere* object) ;; unknown type
(define-extern gregs-texture-cam-restore function)
;;(define-extern *instance-mem-usage* object) ;; unknown type
(define-extern display-sync function)
(define-extern main-draw-hook function)
(define-extern gregs-jungle-cam-restore function)
(define-extern eddie-cam-restore function)
;;(define-extern *screen-shot* object) ;; unknown type
(define-extern find-instance-by-name function)
(define-extern prototype-bucket-recalc-fields function)
(define-extern cave-cam-restore function)
;;(define-extern *surrogate-dma-buffer* object) ;; unknown type
(define-extern dma-add-process-drawable-hud function)
(define-extern find-instance-by-index function)
(define-extern main-debug-hook function)
(define-extern marks-cam-restore function)
(define-extern determine-pause-mode function)
(define-extern guard-band-cull function)
(define-extern debug-init-buffer function)
(define-extern error-sphere function)
(define-extern display-frame-start function)
;;(define-extern *edit-instance* object) ;; unknown type
;;(define-extern *generic-effect-mode* object) ;; unknown type
(define-extern draw-instance-info function)
(define-extern update-eyes function)
(define-extern draw-ocean function)
;;(define-extern syncv object) ;; unknown type
(define-extern toggle-pause function)
(define-extern deactivate-progress function)
(define-extern swap-fake-shadow-buffers function)
;;(define-extern put-display-env object) ;; unknown type
(define-extern update-ocean function)
(define-extern instance-tfragment-add-debug-sphere function)
(define-extern instance-sphere-box-intersect? function)
(define-extern drawable-sphere-box-intersect? function)
(define-extern set-hud-aspect-ratio function)
(define-extern main-cheats function)
;;(define-extern *progress-cheat* object) ;; unknown type
(define-extern display-loop function)
(define-extern letterbox function)
;;(define-extern *cheat-temp* object) ;; unknown type
;;(define-extern *master-exit* object) ;; unknown type
;;(define-extern *last-master-mode* object) ;; unknown type
(define-extern off function)
;;(define-extern *screen-filter* object) ;; unknown type
(define-extern set-letterbox-frames function)
(define-extern entity-by-type function)
;;(define-extern scf-get-timeout object) ;; unknown type
(define-extern pause-allowed? function)
;;(define-extern kernel-shutdown object) ;; unknown type
;;(define-extern unknown-cpu-time object) ;; unknown type
(define-extern hide-progress-screen function)
;;(define-extern scf-get-inactive-timeout object) ;; unknown type
(define-extern make-current-level-available-to-progress function)
(define-extern menu-respond-to-pause function)
(define-extern test-closest-pt-in-triangle function)
(define-extern make-collide-list-using-line-sphere-inst-test function)
;;(define-extern *already-printed-exeeded-max-cache-tris* object) ;; unknown type
;;(define-extern lsmi-work object) ;; unknown type
;;(define-extern collide-puls-work object) ;; unknown type
;;(define-extern *max-dma* object) ;; unknown type
(define-extern entity-task-complete-off function)
(define-extern entity-remap-names function)
;;(define-extern *compact-actors* object) ;; unknown type
(define-extern update-actor-vis-box function)
(define-extern entity-process-count function)
(define-extern entity-count function)
;;(define-extern *vis-actors* object) ;; unknown type
(define-extern entity-task-complete-on function)
(define-extern entity-speed-test function)
(define-extern entity-by-meters function)
(define-extern init-entity function)
(define-extern process-status-bits function)
(define-extern expand-vis-box-with-point function)
;;(define-extern visvol object) ;; unknown type
;;(define-extern box object) ;; unknown type
;;(define-extern vis object) ;; unknown type
;;(define-extern actor object) ;; unknown type
(define-extern birth-viewer function)
(define-extern task-control-reset function)
(define-extern plane-volume-intersect-dist function)
(define-extern inc-mod3 function)
;;(define-extern *edge-vert0-table* object) ;; unknown type
(define-extern add-collide-shape-spheres function)
;;(define-extern *color-dark-green* object) ;; unknown type
;;(define-extern *color-cyan* object) ;; unknown type
(define-extern nav-mesh-lookup-route function)
;;(define-extern *test-ray-start-poly-id* object) ;; unknown type
(define-extern nav-mesh-update-route-table function)
;;(define-extern *debug-nav-travel* object) ;; unknown type
;;(define-extern *debug-ray-test-capture-output* object) ;; unknown type
;;(define-extern *debug-traverse* object) ;; unknown type
;;(define-extern *color-dark-cyan* object) ;; unknown type
(define-extern circle-triangle-intersection? function)
(define-extern debug-report-nav-stats function)
;;(define-extern *nav-patch-route-table* object) ;; unknown type
;;(define-extern *clip-for-spheres-timer* object) ;; unknown type
;;(define-extern *color-dark-magenta* object) ;; unknown type
(define-extern choose-travel-portal-vertex function)
(define-extern clip-vector-to-halfspace! function)
;;(define-extern *color-black* object) ;; unknown type
;;(define-extern *color-yellow* object) ;; unknown type
;;(define-extern *color-light-yellow* object) ;; unknown type
;;(define-extern *color-blue* object) ;; unknown type
;;(define-extern *edge-mask-table* object) ;; unknown type
(define-extern compute-dir-parm function)
;;(define-extern *debug-nav* object) ;; unknown type
;;(define-extern *color-orange* object) ;; unknown type
;;(define-extern *test-ray-src-pos* object) ;; unknown type
;;(define-extern *debug-offset* object) ;; unknown type
;;(define-extern *color-dark-yellow* object) ;; unknown type
;;(define-extern *nav-last-triangle-test-count* object) ;; unknown type
(define-extern ray-ccw-line-segment-intersection? function)
(define-extern find-closest-circle-ray-intersection function)
(define-extern init-ray-dir-local function)
;;(define-extern *color-light-cyan* object) ;; unknown type
;;(define-extern *travel-timer* object) ;; unknown type
;;(define-extern *debug-nav-ray* object) ;; unknown type
(define-extern add-nav-sphere function)
(define-extern point-inside-poly? function)
(define-extern end-collect-nav function)
;;(define-extern *debug-ray-test* object) ;; unknown type
;;(define-extern *color-light-blue* object) ;; unknown type
(define-extern sign-bit function)
(define-extern init-ray function)
;;(define-extern *nav-update-route-table-route-count* object) ;; unknown type
;;(define-extern *color-light-green* object) ;; unknown type
;;(define-extern *nav-timer-enable* object) ;; unknown type
;;(define-extern *nav-timer* object) ;; unknown type
(define-extern start-collect-nav function)
(define-extern debug-nav-validate-current-poly function)
;;(define-extern *color-gray* object) ;; unknown type
;;(define-extern *nav-triangle-test-count* object) ;; unknown type
;;(define-extern *nav-one-third* object) ;; unknown type
(define-extern circle-tangent-directions function)
;;(define-extern *color-magenta* object) ;; unknown type
(define-extern recursive-inside-poly function)
(define-extern nav-sphere-from-cam function)
;;(define-extern *color-red* object) ;; unknown type
(define-extern init-ray-local function)
;;(define-extern *color-light-red* object) ;; unknown type
;;(define-extern *find-poly-timer* object) ;; unknown type
;;(define-extern *debug-ray-test-capture-mode* object) ;; unknown type
(define-extern circle-triangle-intersection-proc? function)
(define-extern point-inside-rect? function)
;;(define-extern cfs-work object) ;; unknown type
;;(define-extern *edge-vert1-table* object) ;; unknown type
(define-extern nav-ray-test function)
;;(define-extern *debug-output* object) ;; unknown type
;;(define-extern *color-dark-red* object) ;; unknown type
;;(define-extern *debug-tests* object) ;; unknown type
;;(define-extern cfs-travel-vec object) ;; unknown type
;;(define-extern *color-green* object) ;; unknown type
(define-extern nav-ray-test-local? function)
;;(define-extern *nav-update-route-table-ray-count* object) ;; unknown type
(define-extern test-xz-point-on-line-segment? function)
(define-extern vu-point-triangle-intersection? function)
(define-extern point-triangle-distance-min function)
;;(define-extern nav-control-cfs-work object) ;; unknown type
;;(define-extern *color-dark-blue* object) ;; unknown type
(define-extern dec-mod3 function)
;;(define-extern *color-light-magenta* object) ;; unknown type
;;(define-extern *debug-ray-offset* object) ;; unknown type
;;(define-extern *color-white* object) ;; unknown type
(define-extern ray-line-segment-intersection? function)
;;(define-extern *test-ray-dest-pos* object) ;; unknown type
(define-extern pke-nav-hack function)
;;(define-extern nav-mesh-sphere object) ;; unknown type
(define-extern sound-name-with-material function)
;;(define-extern *footstep-surface* object) ;; unknown type
;;(define-extern group-just-poof-dpsnow object) ;; unknown type
;;(define-extern group-just-poof-grass object) ;; unknown type
;;(define-extern group-just-poof-straw object) ;; unknown type
;;(define-extern group-just-footprint-dirt object) ;; unknown type
;;(define-extern group-just-poof-snow object) ;; unknown type
;;(define-extern effect-run-step-left object) ;; unknown type
;;(define-extern land object) ;; unknown type
;;(define-extern effect-run-poof object) ;; unknown type
;;(define-extern death-start object) ;; unknown type
;;(define-extern group-run-poof-wood object) ;; unknown type
;;(define-extern group-land-poof-dpsnow object) ;; unknown type
;;(define-extern group-run-poof-grass object) ;; unknown type
;;(define-extern group-land-poof-neutral object) ;; unknown type
;;(define-extern group-just-footprint-ice object) ;; unknown type
;;(define-extern zoom-land object) ;; unknown type
;;(define-extern group-slide-poof-tar object) ;; unknown type
;;(define-extern group-land-poof-straw object) ;; unknown type
;;(define-extern group-just-poof-swamp object) ;; unknown type
;;(define-extern group-just-footprint-water object) ;; unknown type
;;(define-extern group-run-poof-sand object) ;; unknown type
;;(define-extern group-slide-poof-dpsnow object) ;; unknown type
;;(define-extern effect-just-footprint object) ;; unknown type
;;(define-extern group-land-poof-pcmetal object) ;; unknown type
;;(define-extern group-just-footprint-snow object) ;; unknown type
;;(define-extern group-slide-poof-dirt object) ;; unknown type
;;(define-extern group-land-poof-grass object) ;; unknown type
;;(define-extern group-land-poof-snow object) ;; unknown type
;;(define-extern effect-zoom-land object) ;; unknown type
;;(define-extern group-run-poof-water object) ;; unknown type
;;(define-extern effect-slide object) ;; unknown type
;;(define-extern group-slide-poof-stone object) ;; unknown type
;;(define-extern group-run-poof-pcmetal object) ;; unknown type
;;(define-extern group-slide-poof-straw object) ;; unknown type
;;(define-extern effect-walk-step-left object) ;; unknown type
;;(define-extern group-run-poof-metal object) ;; unknown type
;;(define-extern effect-slide-poof object) ;; unknown type
;;(define-extern group-just-footprint-tar object) ;; unknown type
;;(define-extern group-slide-poof-gravel object) ;; unknown type
;;(define-extern group-just-poof-wood object) ;; unknown type
;;(define-extern group-just-footprint-straw object) ;; unknown type
;;(define-extern group-land-poof-swamp object) ;; unknown type
;;(define-extern group-run-poof-crwood object) ;; unknown type
;;(define-extern group-just-poof-ice object) ;; unknown type
;;(define-extern effect-flut-land object) ;; unknown type
;;(define-extern group-just-poof-sand object) ;; unknown type
;;(define-extern group-just-poof-water object) ;; unknown type
;;(define-extern effect-walk-step-right object) ;; unknown type
;;(define-extern group-run-poof-snow object) ;; unknown type
;;(define-extern group-land-poof-wood object) ;; unknown type
;;(define-extern group-slide-poof-metal object) ;; unknown type
;;(define-extern effect-droppings object) ;; unknown type
;;(define-extern group-slide-poof-snow object) ;; unknown type
;;(define-extern group-slide-poof-wood object) ;; unknown type
;;(define-extern group-just-poof-dirt object) ;; unknown type
;;(define-extern group-just-poof-gravel object) ;; unknown type
;;(define-extern camera-shake object) ;; unknown type
;;(define-extern group-just-poof-crwood object) ;; unknown type
;;(define-extern group-just-footprint-pcmetal object) ;; unknown type
;;(define-extern group-just-footprint-swamp object) ;; unknown type
;;(define-extern group-land-poof-sand object) ;; unknown type
;;(define-extern group-run-poof-stone object) ;; unknown type
;;(define-extern effect-jump-droppings object) ;; unknown type
;;(define-extern effect-zoom-hit object) ;; unknown type
;;(define-extern group-just-footprint-dpsnow object) ;; unknown type
;;(define-extern group-land-poof-crwood object) ;; unknown type
;;(define-extern group-slide-poof-pcmetal object) ;; unknown type
;;(define-extern group-slide-poof-water object) ;; unknown type
;;(define-extern effect-just-poof object) ;; unknown type
;;(define-extern group-slide-poof-neutral object) ;; unknown type
;;(define-extern group-just-poof-metal object) ;; unknown type
;;(define-extern group-just-footprint-grass object) ;; unknown type
;;(define-extern effect-roll object) ;; unknown type
;;(define-extern group-slide-poof-crwood object) ;; unknown type
;;(define-extern flut-land object) ;; unknown type
;;(define-extern effect-land object) ;; unknown type
;;(define-extern group-slide-poof-ice object) ;; unknown type
;;(define-extern group-just-poof-stone object) ;; unknown type
;;(define-extern zoom-hit object) ;; unknown type
;;(define-extern group-just-poof-tar object) ;; unknown type
;;(define-extern slide object) ;; unknown type
;;(define-extern group-land-poof-water object) ;; unknown type
;;(define-extern group-run-poof-neutral object) ;; unknown type
;;(define-extern group-run-poof-dpsnow object) ;; unknown type
;;(define-extern group-just-footprint-metal object) ;; unknown type
;;(define-extern group-land-poof-ice object) ;; unknown type
;;(define-extern group-run-poof-ice object) ;; unknown type
;;(define-extern group-just-footprint-crwood object) ;; unknown type
;;(define-extern group-just-footprint-wood object) ;; unknown type
;;(define-extern group-land-poof-dirt object) ;; unknown type
;;(define-extern effect-land-poof object) ;; unknown type
;;(define-extern effect-run-step-right object) ;; unknown type
;;(define-extern group-just-footprint-gravel object) ;; unknown type
;;(define-extern group-land-poof-metal object) ;; unknown type
;;(define-extern group-run-poof-tar object) ;; unknown type
;;(define-extern group-just-footprint-stone object) ;; unknown type
;;(define-extern group-run-poof-swamp object) ;; unknown type
;;(define-extern group-slide-poof-grass object) ;; unknown type
;;(define-extern group-land-poof-tar object) ;; unknown type
;;(define-extern group-just-footprint-neutral object) ;; unknown type
;;(define-extern group-just-poof-pcmetal object) ;; unknown type
;;(define-extern group-slide-poof-swamp object) ;; unknown type
;;(define-extern group-land-poof-stone object) ;; unknown type
;;(define-extern group-just-footprint-sand object) ;; unknown type
;;(define-extern group-land-poof-gravel object) ;; unknown type
;;(define-extern group-slide-poof-sand object) ;; unknown type
;;(define-extern group-run-poof-dirt object) ;; unknown type
;;(define-extern group-run-poof-straw object) ;; unknown type
;;(define-extern effect-joint object) ;; unknown type
;;(define-extern group-run-poof-gravel object) ;; unknown type
;;(define-extern group-just-poof-neutral object) ;; unknown type
;;(define-extern effect-land-water object) ;; unknown type
(define-extern part-water-splash-callback function)
(define-extern check-water-level-drop-and-die function)
(define-extern check-water-level-above-and-die function)
(define-extern check-water-level-drop function)
(define-extern splash-spawn function)
(define-extern birth-func-y->userdata function)
(define-extern birth-func-ocean-height function)
(define-extern water-vol-init-by-other function)
;;(define-extern update object) ;; unknown type
;;(define-extern water-vol-startup object) ;; unknown type
;;(define-extern heat object) ;; unknown type
;;(define-extern water-vol-idle object) ;; unknown type
(define-extern ocean-get-height function)
;;(define-extern swim-stroke object) ;; unknown type
;;(define-extern attack-event object) ;; unknown type
;;(define-extern water-height object) ;; unknown type
(define-extern eco-fadeout function)
(define-extern eco-track-root-prim-fadeout function)
(define-extern part-tracker-track-root function)
(define-extern sparticle-track-root-money function)
(define-extern part-tracker-move-to-target function)
(define-extern part-tracker-track-target function)
;;(define-extern hud-money object) ;; unknown type
;;(define-extern ecovalve-idle object) ;; unknown type
;;(define-extern ventyellow object) ;; unknown type
;;(define-extern eco-yellow object) ;; unknown type
;;(define-extern fuel-cell-clone-anim object) ;; unknown type
(define-extern add-blue-motion function)
(define-extern check-blue-suck function)
;;(define-extern *fuel-cell-tune-pos* object) ;; unknown type
;;(define-extern eco-collectable object) ;; unknown type
(define-extern money-init-by-other-no-bob function)
;;(define-extern *ecovalve-sg* object) ;; unknown type
(define-extern fuel-cell-pick-anim function)
(define-extern money-init-by-other function)
(define-extern fuel-cell-animate function)
;;(define-extern ecovalve object) ;; unknown type
(define-extern initialize-eco-by-other function)
(define-extern fuel-cell-init-as-clone function)
;;(define-extern vent-blocked object) ;; unknown type
;;(define-extern vent-pickup object) ;; unknown type
(define-extern vent-standard-event-handler function)
(define-extern ventblue type)
;;(define-extern *buzzer-sg* object) ;; unknown type
(define-extern ecovalve-init-by-other function)
;;(define-extern *fuel-cell-sg* object) ;; unknown type
(define-extern buzzer-init-by-other function)
;;(define-extern collectable object) ;; unknown type
(define-extern fuel-cell-init-by-other function)
;;(define-extern vent-wait-for-touch object) ;; unknown type
;;(define-extern eco-red object) ;; unknown type
;;(define-extern *eco-pill-count* object) ;; unknown type
(define-extern add-blue-shake function)
;;(define-extern *money-sg* object) ;; unknown type
;;(define-extern ventred object) ;; unknown type
;;(define-extern eco-bg-blue object) ;; unknown type
;;(define-extern pickup-radius object) ;; unknown type
;;(define-extern stop-cloning object) ;; unknown type
;;(define-extern show object) ;; unknown type
(define-extern othercam-init-by-other function)
;;(define-extern show-particles object) ;; unknown type
;;(define-extern movie-pos object) ;; unknown type
;;(define-extern hide object) ;; unknown type
;;(define-extern eco-bg-red object) ;; unknown type
;;(define-extern notice-blue object) ;; unknown type
;;(define-extern eco-bg-yellow object) ;; unknown type
;;(define-extern set-movie-pos object) ;; unknown type
;;(define-extern eco-bg-green object) ;; unknown type
;;(define-extern blocked object) ;; unknown type
(define-extern eco-blue-glow function)
;;(define-extern actor-pause object) ;; unknown type
;;(define-extern movie-mask object) ;; unknown type
;;(define-extern *sage-tasks* object) ;; unknown type
(define-extern task-exists? function)
;;(define-extern *citb-redsage-tasks* object) ;; unknown type
(define-extern sages-kidnapped? function)
;;(define-extern *citb-yellowsage-tasks* object) ;; unknown type
;;(define-extern *citb-bluesage-tasks* object) ;; unknown type
;;(define-extern *oracle-village3-tasks* object) ;; unknown type
;;(define-extern *null-task-control* object) ;; unknown type
;;(define-extern *mayor-tasks* object) ;; unknown type
;;(define-extern *sage-bluehut-tasks* object) ;; unknown type
;;(define-extern *miners-tasks* object) ;; unknown type
;;(define-extern *oracle-village1-tasks* object) ;; unknown type
;;(define-extern *gambler-tasks* object) ;; unknown type
;;(define-extern *sage-villagec-tasks* object) ;; unknown type
;;(define-extern *assistant-tasks* object) ;; unknown type
;;(define-extern *assistant-village2-tasks* object) ;; unknown type
(define-extern task-status->string function)
;;(define-extern *oracle-village2-tasks* object) ;; unknown type
;;(define-extern *task-controls* object) ;; unknown type
;;(define-extern *citb-greensage-tasks* object) ;; unknown type
;;(define-extern *geologist-tasks* object) ;; unknown type
(define-extern open-specific-task! function)
(define-extern vector-for-ambient function)
(define-extern process-taskable-hide-handler function)
(define-extern process-taskable-hide-exit function)
;;(define-extern othercam-running object) ;; unknown type
(define-extern process-taskable-play-anim-trans function)
(define-extern process-taskable-play-anim-enter function)
(define-extern process-taskable-anim-loop function)
(define-extern process-taskable-hide-enter function)
(define-extern process-taskable-clean-up-after-talking function)
(define-extern process-taskable-play-anim-exit function)
(define-extern othercam-calc function)
(define-extern process-taskable-play-anim-code function)
;;(define-extern be-clone object) ;; unknown type
;;(define-extern lose object) ;; unknown type
;;(define-extern undecided object) ;; unknown type
(define-extern logo type)
;;(define-extern no object) ;; unknown type
(define-extern hud-hidden? function)
;;(define-extern hidden object) ;; unknown type
;;(define-extern play-accept object) ;; unknown type
;;(define-extern yes object) ;; unknown type
;;(define-extern enter-playing object) ;; unknown type
(define-extern hide-hud function)
;;(define-extern shadow-min-max object) ;; unknown type
;;(define-extern play-reject object) ;; unknown type
;;(define-extern clone object) ;; unknown type
;;(define-extern give-cell object) ;; unknown type
(define-extern pov-camera-play-and-reposition function)
;;(define-extern abort object) ;; unknown type
;;(define-extern pov-camera-start-playing object) ;; unknown type
;;(define-extern pov-camera-abort object) ;; unknown type
;;(define-extern pov-camera-startup object) ;; unknown type
;;(define-extern pov-camera-playing object) ;; unknown type
;;(define-extern pov-camera-done-playing object) ;; unknown type
(define-extern cloud-track function)
;;(define-extern *crate-darkeco-sg* object) ;; unknown type
;;(define-extern *crate-wood-sg* object) ;; unknown type
;;(define-extern *crate-iron-sg* object) ;; unknown type
(define-extern crate-init-by-other function)
(define-extern crate-standard-event-handler function)
(define-extern crate-bank type)
(define-extern crate-post function)
;;(define-extern *CRATE-bank* object) ;; unknown type
;;(define-extern *crate-bucket-sg* object) ;; unknown type
;;(define-extern crate-buzzer object) ;; unknown type
;;(define-extern *crate-steel-sg* object) ;; unknown type
;;(define-extern *crate-barrel-sg* object) ;; unknown type
;;(define-extern explode object) ;; unknown type
;;(define-extern special-contents-die object) ;; unknown type
;;(define-extern wake object) ;; unknown type
;;(define-extern steel object) ;; unknown type
;;(define-extern bounce-on object) ;; unknown type
;;(define-extern flut-bonk object) ;; unknown type
;;(define-extern iron object) ;; unknown type
;;(define-extern wood object) ;; unknown type
;;(define-extern crate-type object) ;; unknown type
;;(define-extern hud-arriving object) ;; unknown type
;;(define-extern hud-leaving object) ;; unknown type
;;(define-extern hud-hidden object) ;; unknown type
;;(define-extern hud-in object) ;; unknown type
(define-extern send-hud-increment-event function)
(define-extern hud-init-by-other function)
;;(define-extern hud-collecting object) ;; unknown type
;;(define-extern increment object) ;; unknown type
;;(define-extern enable object) ;; unknown type
;;(define-extern hide-quick object) ;; unknown type
;;(define-extern disable object) ;; unknown type
(define-extern part-hud-health-03-func function)
(define-extern part-hud-health-02-func function)
;;(define-extern hud-fuel-cell object) ;; unknown type
(define-extern part-hud-eco-timer-func function)
;;(define-extern hud-health object) ;; unknown type
(define-extern fuel-cell-hud-center-callback function)
;;(define-extern hud-buzzers object) ;; unknown type
;;(define-extern hud-money-all object) ;; unknown type
;;(define-extern hud-power object) ;; unknown type
(define-extern calculate-rotation-and-color-for-slice function)
(define-extern part-hud-health-01-func function)
(define-extern part-hud-eco-timer-02-func function)
(define-extern show-hud function)
;;(define-extern hud-pickups object) ;; unknown type
(define-extern part-hud-eco-timer-03-func function)
(define-extern part-hud-eco-timer-01-func function)
(define-extern fuel-cell-hud-starburst-4-callback function)
(define-extern part-hud-eco-timer-backing-func function)
;;(define-extern *fuelcell-naked-sg* object) ;; unknown type
(define-extern part-hud-buzzer-func function)
(define-extern fuel-cell-hud-starburst-3-callback function)
(define-extern fuel-cell-hud-orbit-callback function)
;;(define-extern *game-counts* object) ;; unknown type
;;(define-extern *main-options-demo* object) ;; unknown type
;;(define-extern *graphic-title-options-pal* object) ;; unknown type
;;(define-extern *task-egg-starting-x* object) ;; unknown type
;;(define-extern *game-options-demo* object) ;; unknown type
;;(define-extern *options-remap* object) ;; unknown type
;;(define-extern *main-options* object) ;; unknown type
;;(define-extern *game-options-japan* object) ;; unknown type
;;(define-extern *language-name-remap* object) ;; unknown type
;;(define-extern *game-options* object) ;; unknown type
;;(define-extern *load-options* object) ;; unknown type
;;(define-extern *ok-options* object) ;; unknown type
;;(define-extern *save-options* object) ;; unknown type
;;(define-extern *yes-no-options* object) ;; unknown type
;;(define-extern *main-options-demo-shared* object) ;; unknown type
;;(define-extern *title* object) ;; unknown type
;;(define-extern *options* object) ;; unknown type
;;(define-extern *save-options-title* object) ;; unknown type
;;(define-extern *graphic-options* object) ;; unknown type
;;(define-extern *sound-options* object) ;; unknown type
(define-extern part-progress-hud-button-func function)
(define-extern part-progress-card-cell-func function)
(define-extern part-progress-hud-buzzer-func function)
(define-extern part-progress-card-slot-02-func function)
(define-extern fuel-cell-progress-hud-orbit-callback function)
(define-extern part-progress-hud-left-func function)
(define-extern part-progress-hud-orb-func function)
(define-extern part-progress-save-icon-func function)
(define-extern part-progress-card-slot-03-func function)
(define-extern part-progress-hud-right-func function)
(define-extern part-progress-card-slot-01-func function)
(define-extern part-progress-card-slot-04-func function)
(define-extern part-progress-hud-tint-func function)
(define-extern print-language-name function)
(define-extern draw-percent-bar function)
(define-extern adjust-pos function)
(define-extern hide-progress-icons function)
;;(define-extern progress-debug object) ;; unknown type
;;(define-extern *progress-save-info* object) ;; unknown type
;;(define-extern progress-normal object) ;; unknown type
(define-extern progress-global-state type)
(define-extern get-next-level-up function)
;;(define-extern *progress-stack* object) ;; unknown type
;;(define-extern progress-waiting object) ;; unknown type
;;(define-extern *progress-state* object) ;; unknown type
(define-extern make-levels-with-tasks-available-to-progress function)
(define-extern get-next-task-up function)
(define-extern init-game-options function)
(define-extern progress-init-by-other function)
(define-extern get-next-task-down function)
(define-extern get-next-level-down function)
;;(define-extern progress-coming-in object) ;; unknown type
;;(define-extern demo-shared object) ;; unknown type
(define-extern draw-title-credits function)
;;(define-extern *title-credits-spacing* object) ;; unknown type
(define-extern set-credits-font-color function)
(define-extern draw-end-credits function)
;;(define-extern *title-credits-scale* object) ;; unknown type
(define-extern find-nearest-attackable function)
(define-extern projectile-update-velocity-space-wars function)
(define-extern projectile-collision-reaction function)
;;(define-extern search-info object) ;; unknown type
(define-extern spawn-projectile-blue function)
;;(define-extern *search-info* object) ;; unknown type
;;(define-extern projectile-dissipate object) ;; unknown type
(define-extern find-ground-and-draw-shadow function)
;;(define-extern projectile-impact object) ;; unknown type
;;(define-extern projectile-die object) ;; unknown type
;;(define-extern projectile-moving object) ;; unknown type
(define-extern mother-spider type)
(define-extern render-ocean-quad function)
;;(define-extern *swamp-low-ocean-marker* object) ;; unknown type
(define-extern init-ocean-far-regs function)
(define-extern draw-ocean-far function)
(define-extern draw-large-polygon-ocean function)
(define-extern ocean-init-buffer function)
(define-extern ocean-end-buffer function)
(define-extern render-ocean-far function)
;;(define-extern *ocean-map* object) ;; unknown type
(define-extern ocean-generate-verts function)
(define-extern draw-ocean-near function)
(define-extern draw-ocean-mid function)
(define-extern draw-ocean-texture function)
(define-extern ocean-interp-wave function)
;;(define-extern ocean-vu0-block object) ;; unknown type
;;(define-extern *ocean-vu0-work* object) ;; unknown type
(define-extern ocean-texture-add-call-done function)
(define-extern ocean-texture-add-verts-last function)
(define-extern ocean-texture-add-call-rest function)
(define-extern ocean-texture-add-constants function)
(define-extern ocean-texture-add-verts function)
(define-extern ocean-texture-add-call-start function)
;;(define-extern ocean-texture-vu1-block object) ;; unknown type
(define-extern ocean-texture-setup-constants function)
(define-extern ocean-texture-add-envmap function)
;;(define-extern *ocean-texture-work* object) ;; unknown type
(define-extern ocean-mid-camera-masks-set! function)
(define-extern ocean-mid-add-call-flush function)
(define-extern ocean-mid-add-upload-top function)
(define-extern ocean-mid-mask-ptrs-bit? function)
(define-extern ocean-vector-matrix*! function)
(define-extern ocean-mid-camera-masks-bit? function)
(define-extern ocean-mid-add-constants function)
(define-extern ocean-mid-add-call function)
(define-extern ocean-mid-add-upload function)
(define-extern ocean-mid-add-upload-table function)
(define-extern draw-ocean-mid-seams function)
(define-extern ocean-mid-check function)
(define-extern ocean-mid-setup-constants function)
(define-extern ocean-mid-add-upload-bottom function)
(define-extern ocean-mid-add-matrices function)
(define-extern ocean-mid-add-upload-middle function)
(define-extern ocean-matrix*! function)
(define-extern ocean-seams-add-constants function)
;;(define-extern ocean-mid-block object) ;; unknown type
(define-extern draw-ocean-transition function)
(define-extern ocean-trans-mask-ptrs-bit? function)
(define-extern ocean-trans-add-upload function)
(define-extern ocean-trans-add-upload-table function)
(define-extern ocean-trans-add-constants function)
(define-extern ocean-make-trans-camera-masks function)
(define-extern draw-ocean-transition-seams function)
(define-extern ocean-trans-add-upload-strip function)
(define-extern ocean-trans-camera-masks-bit? function)
(define-extern ocean-trans-mask-ptrs-set! function)
(define-extern ocean-transition-check function)
(define-extern ocean-near-add-upload function)
(define-extern ocean-near-setup-constants function)
(define-extern ocean-near-add-constants function)
(define-extern ocean-near-add-call-flush function)
(define-extern ocean-near-add-call function)
;;(define-extern ocean-near-block object) ;; unknown type
(define-extern ocean-near-add-heights function)
(define-extern ocean-near-add-matrices function)
(define-extern draw-shadow function)
(define-extern add-fake-shadow-to-buffer function)
(define-extern compute-and-draw-shadow function)
(define-extern convert-eye-data function)
(define-extern render-eyes function)
;;(define-extern *eye-work* object) ;; unknown type
;;(define-extern glst-named-node object) ;; unknown type
(define-extern glst-head function)
(define-extern glst-tail function)
(define-extern glst-empty? function)
(define-extern glst-node-name function)
(define-extern glst-end-of-list? function)
(define-extern glst-prev function)
;;(define-extern glst-list object) ;; unknown type
(define-extern glst-set-name! function)
(define-extern glst-next function)
(define-extern glst-start-of-list? function)
;;(define-extern glst-node object) ;; unknown type
(define-extern glst-num-elements function)
(define-extern glst-get-node-index function)
(define-extern glst-remove-tail function)
(define-extern glst-find-node-by-name function)
(define-extern glst-remove-head function)
(define-extern glst-add-head function)
(define-extern glst-insert-before function)
(define-extern glst-add-tail function)
(define-extern glst-init-list! function)
(define-extern glst-remove function)
(define-extern glst-insert-after function)
(define-extern glst-length-of-longest-name function)
(define-extern glst-get-node-by-index function)
(define-extern anim-tester-start function)
;;(define-extern *DISP_LIST-bank* object) ;; unknown type
(define-extern anim-test-obj-remove-invalid function)
(define-extern anim-test-sequence-list-handler function)
(define-extern anim-tester-add-newobj function)
;;(define-extern anim-tester object) ;; unknown type
;;(define-extern *ANIM_TESTER-bank* object) ;; unknown type
(define-extern anim-test-sequence-init function)
(define-extern anim-tester-reset function)
(define-extern anim-test-seq-mark-as-edited function)
(define-extern anim-tester-string-get-frame!! function)
(define-extern anim-tester-standard-event-handler function)
(define-extern display-list-control function)
(define-extern anim-tester-save-object-seqs function)
;;(define-extern anim-test-field-highlight-lw object) ;; unknown type
(define-extern anim-tester-real-post function)
(define-extern anim-tester-update-anim-info function)
(define-extern initialize-anim-tester function)
;;(define-extern anim-test-sequence object) ;; unknown type
(define-extern anim-tester-set-name function)
(define-extern anim-tester-bank type)
(define-extern anim-test-obj-list-handler function)
(define-extern anim-tester-save-all-objects function)
;;(define-extern list-field object) ;; unknown type
(define-extern anim-tester-load-object-seqs function)
(define-extern anim-tester-post function)
(define-extern anim-test-seq-item-copy! function)
;;(define-extern anim-test-seq-item object) ;; unknown type
(define-extern anim-tester-stop function)
(define-extern anim-tester-add-object function)
(define-extern DISP_LIST-bank type)
(define-extern anim-tester-pick-item-setup function)
(define-extern anim-tester-disp-frame-num function)
(define-extern anim-test-obj-item-valid? function)
(define-extern anim-test-obj-init function)
(define-extern anim-test-anim-list-handler function)
(define-extern anim-tester-add-sequence function)
(define-extern anim-tester-num-print function)
;;(define-extern *anim-tester* object) ;; unknown type
;;(define-extern list-control object) ;; unknown type
(define-extern anim-test-edit-seq-insert-item function)
(define-extern anim-tester-interface function)
(define-extern anim-tester-adjust-frame function)
;;(define-extern anim-tester-process object) ;; unknown type
;;(define-extern anim-test-obj object) ;; unknown type
(define-extern anim-test-edit-sequence-list-handler function)
(define-extern anim-tester-get-playing-item function)
;;(define-extern *debug-menu-context* object) ;; unknown type
;;(define-extern save-sequences object) ;; unknown type
;;(define-extern pick-sequence object) ;; unknown type
;;(define-extern edit-sequence object) ;; unknown type
;;(define-extern change-anim object) ;; unknown type
;;(define-extern pick-joint-anim object) ;; unknown type
;;(define-extern pick-object object) ;; unknown type
;;(define-extern viewer-ja-name object) ;; unknown type
(define-extern actor-get-arg! function)
(define-extern art-part-name function)
(define-extern init-viewer-for-other function)
;;(define-extern viewer-geo-name object) ;; unknown type
;;(define-extern viewer-process object) ;; unknown type
;;(define-extern viewer-string object) ;; unknown type
(define-extern init-viewer function)
(define-extern add-a-bunch function)
;;(define-extern viewer object) ;; unknown type
;;(define-extern *viewer-sg* object) ;; unknown type
;;(define-extern *viewer* object) ;; unknown type
;;(define-extern part-tester object) ;; unknown type
(define-extern part-tester-init-by-other function)
;;(define-extern *debug-part-dead-pool* object) ;; unknown type
;;(define-extern part-tester-idle object) ;; unknown type
(define-extern start-part function)
;;(define-extern *part-tester-name* object) ;; unknown type
;;(define-extern *part-tester* object) ;; unknown type
(define-extern dm-current-continue function)
(define-extern dm-time-of-day-func function)
(define-extern dm-give-all-cells function)
(define-extern debug-menu-make-instance-menu function)
(define-extern dm-time-of-day-pick-func function)
;;(define-extern *instance-shrub-menu* object) ;; unknown type
(define-extern debug-menu-make-task-menu function)
(define-extern debug-menu-make-task-need-resolution-menu function)
(define-extern dm-time-of-day-func2 function)
(define-extern dm-cam-render-float function)
(define-extern debug-menu-make-task-unknown-menu function)
(define-extern debug-menu-make-camera-menu function)
(define-extern debug-menu-make-task-need-introduction-menu function)
(define-extern dm-instance-pick-func function)
(define-extern build-instance-list function)
(define-extern debug-create-cam-restore function)
(define-extern dm-task-introduction function)
(define-extern dm-subdiv-int function)
(define-extern dm-strip-lines-toggle-pick-func function)
(define-extern dm-cam-externalize function)
(define-extern dm-subdiv-draw-func function)
(define-extern dm-task-reward-speech function)
(define-extern dm-task-resolution function)
;;(define-extern *enable-instance-tie-menu* object) ;; unknown type
(define-extern dm-edit-instance-toggle-pick-func function)
(define-extern debug-menu-make-shader-menu function)
(define-extern dm-cam-settings-func function)
(define-extern build-shader-list function)
(define-extern dm-anim-tester-func function)
;;(define-extern *dm-cam-mode-interpolation* object) ;; unknown type
(define-extern dm-compact-actor-pick-func function)
(define-extern dm-game-mode-pick-func function)
(define-extern dm-boolean-toggle-pick-func function)
(define-extern all-texture-tweak-adjust function)
(define-extern dm-lavabike-ready function)
(define-extern dm-texture-user-set-pick-func function)
(define-extern dm-levitator-ready function)
(define-extern build-continue-menu function)
(define-extern dm-cam-settings-func-int function)
(define-extern debug-menu-make-task-need-reminder-a-menu function)
(define-extern dm-actor-marks-pick-func function)
(define-extern dm-task-unknown function)
(define-extern dm-setting-language function)
(define-extern dm-subdiv-float function)
(define-extern dm-task-reminder-a function)
(define-extern dm-strip-lines-set-pick-func function)
(define-extern debug-menu-make-task-need-reward-speech-menu function)
(define-extern dm-task-get-money function)
(define-extern dm-actor-vis-pick-func function)
(define-extern popup-menu-context-make-default-menus function)
(define-extern dm-enable-instance-func function)
(define-extern dm-task-reminder function)
;;(define-extern *instance-tie-menu* object) ;; unknown type
(define-extern dm-ocean-subdiv-draw-func function)
;;(define-extern *popup-menu-context* object) ;; unknown type
(define-extern dm-shader-pick-func function)
(define-extern dm-cam-mode-func function)
(define-extern dm-task-hint function)
(define-extern dm-vu1-user-set-pick-func function)
(define-extern debug-menu-make-task-need-reminder-menu function)
(define-extern dm-vu1-user-toggle-pick-func function)
(define-extern debug-menu-node<? function)
(define-extern dm-give-cell function)
(define-extern dm-anim-tester-flag-func function)
(define-extern debug-menu-make-camera-mode-menu function)
(define-extern dm-texture-user-toggle-pick-func function)
;;(define-extern *shader-pick-menu* object) ;; unknown type
(define-extern debug-menu-make-task-need-hint-menu function)
(define-extern debug-menu-context-make-default-menus function)
;;(define-extern close object) ;; unknown type
;;(define-extern cam-robotboss object) ;; unknown type
;;(define-extern at-pick-sequence object) ;; unknown type
;;(define-extern allow-z object) ;; unknown type
;;(define-extern at-apply-align object) ;; unknown type
;;(define-extern at-pick-joint-anim object) ;; unknown type
;;(define-extern at-show-joint-info object) ;; unknown type
;;(define-extern at-cam-stick object) ;; unknown type
;;(define-extern at-save-sequences object) ;; unknown type
;;(define-extern at-cam-free-floating object) ;; unknown type
;;(define-extern at-pick-object object) ;; unknown type
;;(define-extern far object) ;; unknown type
;;(define-extern anim-speed object) ;; unknown type
;;(define-extern *ocean-texture* object) ;; unknown type
;;(define-extern texture-level object) ;; unknown type
;;(define-extern breath-in object) ;; unknown type
;;(define-extern breath-in-loud object) ;; unknown type
;;(define-extern breath-out object) ;; unknown type
;;(define-extern breath-out-loud object) ;; unknown type
;;(define-extern flop-land object) ;; unknown type
;;(define-extern foothit object) ;; unknown type
;;(define-extern get-powered object) ;; unknown type
;;(define-extern grunt object) ;; unknown type
;;(define-extern hand-grab object) ;; unknown type
;;(define-extern jak-deatha object) ;; unknown type
;;(define-extern jak-fall object) ;; unknown type
;;(define-extern jump-long object) ;; unknown type
;;(define-extern land-hard object) ;; unknown type
;;(define-extern land-poof object) ;; unknown type
;;(define-extern punch-hit object) ;; unknown type
;;(define-extern smack-surface object) ;; unknown type
;;(define-extern spin-kick object) ;; unknown type
;;(define-extern swim-dive object) ;; unknown type
;;(define-extern swim-down object) ;; unknown type
;;(define-extern swim-idle1 object) ;; unknown type
;;(define-extern swim-idle2 object) ;; unknown type
;;(define-extern swim-jump object) ;; unknown type
;;(define-extern swim-kick-surf object) ;; unknown type
;;(define-extern swim-kick-under object) ;; unknown type
;;(define-extern swim-noseblow object) ;; unknown type
;;(define-extern swim-surface object) ;; unknown type
;;(define-extern swim-to-down object) ;; unknown type
;;(define-extern swim-turn object) ;; unknown type
;;(define-extern swim-up object) ;; unknown type
;;(define-extern walk-dwater1 object) ;; unknown type
;;(define-extern walk-dwater2 object) ;; unknown type
;;(define-extern walk-water1 object) ;; unknown type
;;(define-extern walk-water2 object) ;; unknown type
;;(define-extern dax-face-smak object) ;; unknown type
;;(define-extern dax-land object) ;; unknown type
;;(define-extern dax-leg-spin object) ;; unknown type
;;(define-extern dax-stretch-in object) ;; unknown type
;;(define-extern dax-stretch-out object) ;; unknown type
;;(define-extern rigid-body-control-point object) ;; unknown type
;;(define-extern rigid-body object) ;; unknown type
;;(define-extern *water-anim-rolling-water-back-sg* object) ;; unknown type
;;(define-extern *water-anim-finalboss-dark-eco-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-above-skeleton-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-dark-eco-helix-room-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-dark-eco-qbert-sg* object) ;; unknown type
;;(define-extern *water-anim-village1-rice-paddy-mid-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-first-room-from-entrance-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-big-room-upper-water-sg* object) ;; unknown type
;;(define-extern water-anim object) ;; unknown type
;;(define-extern *water-anim-sunken-first-right-branch-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-under-spine-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-by-dock-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-hall-before-big-room-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-hall-with-one-whirlpool-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-start-of-helix-slide-sg* object) ;; unknown type
;;(define-extern *water-anim-robocave-main-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-dark-eco-platform-room-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-island-near-dock-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-dark-eco-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-ogre-lava-sg* object) ;; unknown type
;;(define-extern *water-anim-village2-bucket-sg* object) ;; unknown type
;;(define-extern *water-anim-jungle-river-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-hall-with-three-whirlpools-sg* object) ;; unknown type
;;(define-extern *water-anim-lavatube-energy-lava-sg* object) ;; unknown type
;;(define-extern *water-anim-look* object) ;; unknown type
;;(define-extern *water-anim-maincave-mid-left-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-by-arena-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-big-room-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-above-skull-back-sg* object) ;; unknown type
;;(define-extern *water-anim-darkcave-water-with-crystal-sg* object) ;; unknown type
;;(define-extern *water-anim-village1-fountain-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-qbert-room-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-short-piece-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-behind-skeleton-sg* object) ;; unknown type
;;(define-extern *water-anim-maincave-mid-right-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-room-above-exit-chamber-sg* object) ;; unknown type
;;(define-extern *water-anim-training-lake-sg* object) ;; unknown type
;;(define-extern *water-anim-village1-rice-paddy-top-sg* object) ;; unknown type
;;(define-extern *water-anim-maincave-water-with-crystal-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-near-skull-sg* object) ;; unknown type
;;(define-extern *water-anim-maincave-lower-right-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-maincave-lower-left-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-village1-rice-paddy-sg* object) ;; unknown type
(define-extern water-anim-look type)
;;(define-extern *water-anim-misty-mud-above-skull-front-sg* object) ;; unknown type
;;(define-extern *water-anim-rolling-water-front-sg* object) ;; unknown type
;;(define-extern *water-anim-maincave-center-pool-sg* object) ;; unknown type
;;(define-extern *water-anim-village3-lava-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-other-near-skull-sg* object) ;; unknown type
;;(define-extern *water-anim-misty-mud-lonely-island-sg* object) ;; unknown type
;;(define-extern *water-anim-sunken-circular-with-bullys-sg* object) ;; unknown type
;;(define-extern move-to object) ;; unknown type
;;(define-extern rotoffset object) ;; unknown type
;;(define-extern look object) ;; unknown type
;;(define-extern ripple-for-maincave-dark-eco-pool object) ;; unknown type
;;(define-extern ripple-for-finalboss-dark-eco-pool object) ;; unknown type
;;(define-extern ripple-for-misty-dark-eco-pool object) ;; unknown type
;;(define-extern ripple-for-dark-eco-pool object) ;; unknown type
;;(define-extern ripple-for-sunken-dark-eco-helix-room object) ;; unknown type
;;(define-extern rigid-body-platform-constants object) ;; unknown type
;;(define-extern *rigid-body-platform-constants* object) ;; unknown type
;;(define-extern rigid-body-control-point-inline-array object) ;; unknown type
;;(define-extern rigid-body-platform object) ;; unknown type
(define-extern matrix-3x3-triple-transpose-product function)
(define-extern rigid-body-platform-event-handler function)
(define-extern rigid-body-platform-post function)
;;(define-extern water-actor object) ;; unknown type
;;(define-extern impulse object) ;; unknown type
;;(define-extern rigid-body-platform-float object) ;; unknown type
;;(define-extern rigid-body-platform-idle object) ;; unknown type
(define-extern nav-enemy-info type)
;;(define-extern nav-enemy object) ;; unknown type
(define-extern nav-enemy-common-post function)
(define-extern nav-enemy-jump-land-post function)
(define-extern nav-enemy-rnd-percent? function)
(define-extern nav-enemy-reset-frustration function)
(define-extern nav-enemy-falling-post function)
(define-extern nav-enemy-travel-post function)
(define-extern nav-enemy-jump-land-anim function)
(define-extern nav-enemy-test-nav-mesh-intersection-xz? function)
(define-extern nav-enemy-test-point-in-nav-mesh? function)
(define-extern nav-enemy-player-vulnerable? function)
(define-extern nav-enemy-rnd-float-range function)
(define-extern nav-enemy-player-at-frustration-point? function)
(define-extern nav-enemy-execute-custom-jump function)
(define-extern nav-enemy-rnd-int-range function)
(define-extern nav-enemy-send-attack function)
(define-extern nav-enemy-jump-post function)
(define-extern nav-enemy-patrol-post function)
(define-extern nav-enemy-turn-to-face-dir function)
(define-extern nav-enemy-fall-and-play-death-anim function)
(define-extern nav-enemy-test-point-near-nav-mesh? function)
(define-extern nav-enemy-execute-jump function)
(define-extern nav-enemy-rnd-int-count function)
(define-extern nav-enemy-frustrated? function)
(define-extern nav-enemy-default-event-handler function)
(define-extern nav-enemy-neck-control-look-at function)
(define-extern nav-enemy-flee-post function)
(define-extern nav-enemy-chase-post function)
(define-extern nav-enemy-simple-post function)
(define-extern nav-enemy-rnd-go-idle? function)
(define-extern nav-enemy-notice-player? function)
(define-extern nav-enemy-facing-direction? function)
(define-extern nav-enemy-rnd-float function)
(define-extern nav-enemy-face-player-post function)
(define-extern nav-enemy-jump-event-handler function)
(define-extern nav-enemy-facing-player? function)
(define-extern nav-enemy-facing-point? function)
(define-extern nav-enemy-initialize-jump function)
;;(define-extern *nav-enemy-dummy-shadow-control* object) ;; unknown type
(define-extern nav-enemy-init-by-other function)
(define-extern process-drawable-death-event-handler function)
(define-extern nav-enemy-set-hit-from-direction function)
(define-extern nav-enemy-initialize-custom-jump function)
(define-extern nav-enemy-death-post function)
(define-extern nav-enemy-get-new-patrol-point function)
(define-extern nav-enemy-neck-control-inactive function)
(define-extern nav-enemy-set-base-collide-sphere-collide-with function)
(define-extern ja-group-index? function)
(define-extern nav-enemy-turn-to-face-point function)
;;(define-extern nav-enemy-jump-to-point object) ;; unknown type
;;(define-extern nav-enemy-wait-for-cue object) ;; unknown type
;;(define-extern nav-enemy-give-up object) ;; unknown type
;;(define-extern cue-patrol object) ;; unknown type
;;(define-extern nav-enemy-patrol object) ;; unknown type
;;(define-extern nav-enemy-jump-blocked object) ;; unknown type
;;(define-extern nav-enemy-die object) ;; unknown type
;;(define-extern go-wait-for-cue object) ;; unknown type
;;(define-extern nav-enemy-jump object) ;; unknown type
;;(define-extern nav-enemy-jump-land object) ;; unknown type
;;(define-extern nav-enemy-notice object) ;; unknown type
;;(define-extern nav-enemy-victory object) ;; unknown type
;;(define-extern cue-jump-to-point object) ;; unknown type
;;(define-extern nav-enemy-stop-chase object) ;; unknown type
;;(define-extern nav-enemy-idle object) ;; unknown type
;;(define-extern nav-enemy-chase object) ;; unknown type
;;(define-extern nav-enemy-flee object) ;; unknown type
;;(define-extern cue-chase object) ;; unknown type
;;(define-extern nav-enemy-fuel-cell object) ;; unknown type
;;(define-extern nav-enemy-attack object) ;; unknown type
;;(define-extern nav-enemy-stare object) ;; unknown type
;;(define-extern child-die object) ;; unknown type
(define-extern plat-trans function)
(define-extern eco-door-event-handler function)
(define-extern plat-post function)
(define-extern plat-code function)
;;(define-extern eco-door object) ;; unknown type
;;(define-extern baseplat object) ;; unknown type
(define-extern plat-event function)
;;(define-extern scale object) ;; unknown type
;;(define-extern door-closed object) ;; unknown type
;;(define-extern door-closing object) ;; unknown type
;;(define-extern trigger object) ;; unknown type
;;(define-extern door-opening object) ;; unknown type
;;(define-extern state-actor object) ;; unknown type
;;(define-extern door-open object) ;; unknown type
;;(define-extern *generic-button-sg* object) ;; unknown type
;;(define-extern warp-gate object) ;; unknown type
;;(define-extern *warp-info* object) ;; unknown type
(define-extern basebutton-init-by-other function)
;;(define-extern *warp-jump-mods* object) ;; unknown type
;;(define-extern target-warp-out object) ;; unknown type
;;(define-extern basebutton object) ;; unknown type
;;(define-extern basebutton-going-up object) ;; unknown type
;;(define-extern basebutton-going-down object) ;; unknown type
;;(define-extern extra-id object) ;; unknown type
;;(define-extern basebutton-down-idle object) ;; unknown type
;;(define-extern basebutton-startup object) ;; unknown type
;;(define-extern use object) ;; unknown type
;;(define-extern untrigger object) ;; unknown type
;;(define-extern basebutton-up-idle object) ;; unknown type
;;(define-extern tippy object) ;; unknown type
;;(define-extern joint-exploder-list object) ;; unknown type
;;(define-extern joint-exploder-joint object) ;; unknown type
;;(define-extern joint-exploder-shatter object) ;; unknown type
;;(define-extern joint-exploder-tuning object) ;; unknown type
(define-extern joint-exploder-joint-callback function)
;;(define-extern joint-exploder-joints object) ;; unknown type
(define-extern joint-exploder-static-joint-params type)
;;(define-extern joint-exploder object) ;; unknown type
(define-extern joint-exploder-init-by-other function)
(define-extern joint-exploder-static-params type)
;;(define-extern *babak-nav-enemy-info* object) ;; unknown type
;;(define-extern *babak-sg* object) ;; unknown type
;;(define-extern *sharkey-sg* object) ;; unknown type
(define-extern sharkey-reset-position function)
(define-extern sharkey-get-player-position function)
;;(define-extern *sharkey-nav-enemy-info* object) ;; unknown type
(define-extern sharkey-notice-player? function)
(define-extern sharkey-move-to-attack-position function)
(define-extern sharkey-follow-trajectory function)
;;(define-extern distance object) ;; unknown type
;;(define-extern delay object) ;; unknown type
;;(define-extern orb-cache-top-complete object) ;; unknown type
;;(define-extern orb-cache-top-activate object) ;; unknown type
;;(define-extern orb-cache-top-idle object) ;; unknown type
;;(define-extern *orb-cache-top-sg* object) ;; unknown type
;;(define-extern orb-cache-count object) ;; unknown type
(define-extern plat type)
;;(define-extern *plat-jungleb-sg* object) ;; unknown type
;;(define-extern *plat-sunken-sg* object) ;; unknown type
;;(define-extern *plat-sg* object) ;; unknown type
;;(define-extern plat-idle object) ;; unknown type
;;(define-extern plat-path-active object) ;; unknown type
;;(define-extern plat-startup object) ;; unknown type
;;(define-extern *plat-button-sg* object) ;; unknown type
;;(define-extern plat-button object) ;; unknown type
(define-extern plat-button-camera-off function)
(define-extern plat-button-camera-on function)
;;(define-extern plat-button-pressed object) ;; unknown type
;;(define-extern camera-name object) ;; unknown type
;;(define-extern plat-button-idle object) ;; unknown type
;;(define-extern plat-button-move-downward object) ;; unknown type
;;(define-extern plat-button-move-upward object) ;; unknown type
;;(define-extern bidirectional object) ;; unknown type
;;(define-extern plat-button-at-end object) ;; unknown type
;;(define-extern plat-button-teleport-to-other-end object) ;; unknown type
(define-extern plat-eco type)
;;(define-extern *plat-eco-lit-sg* object) ;; unknown type
;;(define-extern *plat-eco-unlit-sg* object) ;; unknown type
;;(define-extern notice-dist object) ;; unknown type
;;(define-extern ropebridge-tuning object) ;; unknown type
(define-extern ropebridge type)
;;(define-extern *ropebridge-32-rest-state* object) ;; unknown type
;;(define-extern *ropebridge-tunings* object) ;; unknown type
;;(define-extern *vil3-bridge-36-sg* object) ;; unknown type
;;(define-extern *ropebridge-32-sg* object) ;; unknown type
;;(define-extern *ropebridge-52-sg* object) ;; unknown type
(define-extern ropebridge-joint-callback function)
;;(define-extern *ropebridge-52-rest-state* object) ;; unknown type
;;(define-extern *ropebridge-70-rest-state* object) ;; unknown type
;;(define-extern *ropebridge-70-sg* object) ;; unknown type
;;(define-extern *snow-bridge-36-sg* object) ;; unknown type
;;(define-extern ropebridge-idle object) ;; unknown type
;;(define-extern *ropebridge-36-rest-state* object) ;; unknown type
;;(define-extern *ropebridge-36-sg* object) ;; unknown type
;;(define-extern ropebridge-spring-point object) ;; unknown type
;;(define-extern ticky object) ;; unknown type
;;(define-extern trajectory-params object) ;; unknown type
;;(define-extern mistycannon-waiting-for-player object) ;; unknown type
(define-extern angle-tracker-get-value function)
(define-extern mistycannon-find-best-solution function)
(define-extern angle-tracker-seek! function)
;;(define-extern angle-tracker object) ;; unknown type
(define-extern mistycannon-pick-random-target-point function)
;;(define-extern mistycannon-waiting-for-player-to-fuck-off object) ;; unknown type
;;(define-extern mistycannon-missile-idle object) ;; unknown type
;;(define-extern cam-mistycannon object) ;; unknown type
;;(define-extern mistycannon-idle object) ;; unknown type
;;(define-extern quadratic-solution object) ;; unknown type
(define-extern mistycannon-missile-init-by-other function)
;;(define-extern *mistycannon-missile-sg* object) ;; unknown type
(define-extern mistycannon type)
;;(define-extern mistycannon-missile-in-water object) ;; unknown type
(define-extern angle-tracker-init-range! function)
(define-extern mistycannon-collision-reaction function)
(define-extern solve-missile-tilt function)
(define-extern angle-tracker-apply-move! function)
;;(define-extern mistycannon-aim-at-player object) ;; unknown type
(define-extern mistycannon-find-trajectory function)
;;(define-extern mistycannon-missile-explode object) ;; unknown type
(define-extern spawn-mistycannon-missile function)
(define-extern solve-missile-velocity function)
;;(define-extern *mistycannon-sg* object) ;; unknown type
;;(define-extern mistycannon-player-control object) ;; unknown type
(define-extern mistycannon-postbind-function function)
;;(define-extern mistycannon-missile object) ;; unknown type
(define-extern angle-tracker-set-value function)
(define-extern mistycannon-do-aim function)
(define-extern mistycannon-prebind-function function)
;;(define-extern mistycannon-init-data object) ;; unknown type
;;(define-extern rotmax object) ;; unknown type
;;(define-extern rotspeed object) ;; unknown type
;;(define-extern center-point object) ;; unknown type
;;(define-extern center-radius object) ;; unknown type
;;(define-extern rotmin object) ;; unknown type
;;(define-extern tiltmin object) ;; unknown type
;;(define-extern tiltspeed object) ;; unknown type
;;(define-extern tiltmax object) ;; unknown type
;;(define-extern babak-run-to-cannon object) ;; unknown type
(define-extern babak-with-cannon type)
;;(define-extern babak-with-cannon-jump-off-cannon object) ;; unknown type
;;(define-extern babak-with-cannon-shooting object) ;; unknown type
(define-extern babak-with-cannon-compute-ride-point function)
;;(define-extern babak-with-cannon-jump-onto-cannon object) ;; unknown type
(define-extern handle->process-safe function)
(define-extern babak-with-cannon-ride-cannon-post function)
(define-extern babak-with-cannon-compute-cannon-dir function)
(define-extern beachcam-spawn function)
(define-extern mistycam-spawn function)
(define-extern point-in-air-box? function)
;;(define-extern air-box object) ;; unknown type
(define-extern point-in-air-box-area? function)
(define-extern add-debug-air-box function)
(define-extern points-in-air? function)
(define-extern point-in-air? function)
;;(define-extern wobbler object) ;; unknown type
;;(define-extern twist-joint object) ;; unknown type
;;(define-extern twister object) ;; unknown type
(define-extern move-grottopole function)
;;(define-extern *flutflut-naked-sg* object) ;; unknown type
;;(define-extern *bladeassm-sg* object) ;; unknown type
;;(define-extern *windmill-one-sg* object) ;; unknown type
;;(define-extern *flutflutegg-sg* object) ;; unknown type
;;(define-extern flutflutegg-physics object) ;; unknown type
;;(define-extern grottopole-idle object) ;; unknown type
;;(define-extern *grottopole-sg* object) ;; unknown type
(define-extern move-grottopole-to-position function)
;;(define-extern grottopole-moving-up object) ;; unknown type
(define-extern bladeassm type)
;;(define-extern flying-rock-idle object) ;; unknown type
;;(define-extern harvester-idle object) ;; unknown type
;;(define-extern ecoventrock-break object) ;; unknown type
(define-extern flying-rock-init-by-other function)
;;(define-extern windmill-one-idle object) ;; unknown type
;;(define-extern *kickrock-sg* object) ;; unknown type
;;(define-extern ecoventrock-idle object) ;; unknown type
(define-extern grottopole type)
;;(define-extern *ecoventrock-sg* object) ;; unknown type
;;(define-extern grottopole-moving-down object) ;; unknown type
;;(define-extern bladeassm-idle object) ;; unknown type
(define-extern ecoventrock type)
;;(define-extern *beachcam-sg* object) ;; unknown type
(define-extern spawn-flying-rock function)
(define-extern bladeassm-prebind-function function)
;;(define-extern harvester-inflate object) ;; unknown type
;;(define-extern flutflutegg-break object) ;; unknown type
;;(define-extern *harvester-sg* object) ;; unknown type
(define-extern beachcam type)
;;(define-extern flutflutegg-idle object) ;; unknown type
(define-extern windmill-one type)
;;(define-extern flying-rock-rolling object) ;; unknown type
(define-extern flutflutegg-hit-sounds function)
;;(define-extern flutflutegg-physics-fall object) ;; unknown type
;;(define-extern flying-rock object) ;; unknown type
(define-extern flutflutegg type)
(define-extern harvester type)
;;(define-extern num-positions object) ;; unknown type
(define-extern bird-lady type)
;;(define-extern *bird-lady-sg* object) ;; unknown type
(define-extern bird-lady-beach type)
;;(define-extern *bird-lady-beach-sg* object) ;; unknown type
;;(define-extern *mayor-sg* object) ;; unknown type
(define-extern mayor type)
(define-extern mayor-lurkerm-reward-speech function)
(define-extern sculptor type)
(define-extern muse-to-idle function)
;;(define-extern *sculptor-muse-sg* object) ;; unknown type
;;(define-extern *sculptor-sg* object) ;; unknown type
(define-extern pelican-fly function)
;;(define-extern pelican-dive object) ;; unknown type
;;(define-extern pelican-fly-to-end object) ;; unknown type
(define-extern pelican-post function)
(define-extern pelican-path-update function)
(define-extern pelican type)
;;(define-extern *PELICAN-bank* object) ;; unknown type
;;(define-extern pelican-wait-at-nest object) ;; unknown type
;;(define-extern pelican-circle object) ;; unknown type
;;(define-extern pelican-to-nest object) ;; unknown type
;;(define-extern pelican-spit object) ;; unknown type
;;(define-extern pelican-wait-at-end object) ;; unknown type
;;(define-extern *pelican-sg* object) ;; unknown type
(define-extern pelican-bank type)
;;(define-extern pelican-explode object) ;; unknown type
;;(define-extern pelican-from-nest object) ;; unknown type
;;(define-extern got-cell? object) ;; unknown type
;;(define-extern zero-func object) ;; unknown type
;;(define-extern position object) ;; unknown type
(define-extern lurkerworm type)
;;(define-extern lurkerworm-strike object) ;; unknown type
;;(define-extern lurkerworm-rise object) ;; unknown type
;;(define-extern lurkerworm-sink object) ;; unknown type
;;(define-extern lurkerworm-idle object) ;; unknown type
;;(define-extern lurkerworm-die object) ;; unknown type
(define-extern lurkerworm-default-post-behavior function)
(define-extern lurkerworm-default-event-handler function)
;;(define-extern *lurkerworm-sg* object) ;; unknown type
(define-extern lurkerworm-joint-callback function)
;;(define-extern lurkerworm-spot object) ;; unknown type
;;(define-extern lurkerworm-rest object) ;; unknown type
(define-extern lurkerworm-prebind-function function)
;;(define-extern *lurkercrab-sg* object) ;; unknown type
(define-extern lurkercrab-vulnerable function)
(define-extern lurkercrab type)
;;(define-extern *lurkercrab-nav-enemy-info* object) ;; unknown type
(define-extern lurkercrab-invulnerable function)
;;(define-extern lurkercrab-pushed object) ;; unknown type
;;(define-extern *lurkerpuppy-nav-enemy-info* object) ;; unknown type
;;(define-extern *lurkerpuppy-sg* object) ;; unknown type
(define-extern lurkerpuppy type)
(define-extern lrocklrg type)
;;(define-extern *lrocklrg-sg* object) ;; unknown type
;;(define-extern beach-rock object) ;; unknown type
;;(define-extern fallen object) ;; unknown type
;;(define-extern seagull-landing object) ;; unknown type
(define-extern seagull-reaction function)
;;(define-extern sound-seagull-squall object) ;; unknown type
(define-extern seagull-init-by-other function)
;;(define-extern *seagull-sg* object) ;; unknown type
;;(define-extern seagull-flying object) ;; unknown type
;;(define-extern seagull-idle object) ;; unknown type
;;(define-extern seagull-soaring object) ;; unknown type
(define-extern seagull-post function)
(define-extern beach-rock-trigger function)
(define-extern seagullflock type)
;;(define-extern seagull object) ;; unknown type
;;(define-extern *seagull-boxes* object) ;; unknown type
;;(define-extern seagullflock-idle object) ;; unknown type
;;(define-extern seagullflock-at-waterfall object) ;; unknown type
;;(define-extern seagull-takeoff object) ;; unknown type
;;(define-extern aybabtu object) ;; unknown type
;;(define-extern sound-beach-waterfall object) ;; unknown type
(define-extern beach-part type)
;;(define-extern babak-breathin object) ;; unknown type
;;(define-extern babak-breathout object) ;; unknown type
;;(define-extern babak-charge object) ;; unknown type
;;(define-extern babak-chest object) ;; unknown type
;;(define-extern babak-dies object) ;; unknown type
;;(define-extern babak-giveup object) ;; unknown type
;;(define-extern babak-roar object) ;; unknown type
;;(define-extern babak-taunt object) ;; unknown type
;;(define-extern babak-win object) ;; unknown type
;;(define-extern babk-taunt object) ;; unknown type
;;(define-extern jump-low object) ;; unknown type
;;(define-extern run-step-right object) ;; unknown type
;;(define-extern slide-poof object) ;; unknown type
;;(define-extern walk-step-left object) ;; unknown type
;;(define-extern walk-step-right object) ;; unknown type
;;(define-extern egg-crack object) ;; unknown type
;;(define-extern rope-stretch object) ;; unknown type
;;(define-extern EFEFCT(8 object) ;; unknown type
;;(define-extern crab-slide object) ;; unknown type
;;(define-extern crab-walk1 object) ;; unknown type
;;(define-extern crab-walk2 object) ;; unknown type
;;(define-extern crab-walk2) object) ;; unknown type
;;(define-extern crab-walk3 object) ;; unknown type
;;(define-extern lurkercrab-dies object) ;; unknown type
;;(define-extern shell-down object) ;; unknown type
;;(define-extern shell-up object) ;; unknown type
;;(define-extern snap object) ;; unknown type
;;(define-extern 8) object) ;; unknown type
;;(define-extern TIME_PEROIOD(8 object) ;; unknown type
;;(define-extern lurkerdog-bite object) ;; unknown type
;;(define-extern lurkerdog-dies object) ;; unknown type
;;(define-extern lurkerdog-idle object) ;; unknown type
;;(define-extern puppy-bark object) ;; unknown type
;;(define-extern run-step-left object) ;; unknown type
;;(define-extern worm-bite object) ;; unknown type
;;(define-extern worm-dies object) ;; unknown type
;;(define-extern worm-sink object) ;; unknown type
;;(define-extern mayor-step-carp object) ;; unknown type
;;(define-extern mayor-step-wood object) ;; unknown type
;;(define-extern pelican-flap object) ;; unknown type
;;(define-extern pelican-gulp object) ;; unknown type
;;(define-extern walk-straw1 object) ;; unknown type
;;(define-extern walk-straw2 object) ;; unknown type
;;(define-extern fuse object) ;; unknown type
;;(define-extern sack-land object) ;; unknown type
;;(define-extern hammer-tap object) ;; unknown type
;;(define-extern TIME_PE0IOD_LOOP object) ;; unknown type
;;(define-extern bird object) ;; unknown type
;;(define-extern bird-2 object) ;; unknown type
;;(define-extern campath-time object) ;; unknown type
;;(define-extern campoints-flags-off object) ;; unknown type
;;(define-extern campoints-flags-on object) ;; unknown type
;;(define-extern flags-off object) ;; unknown type
;;(define-extern flags-on object) ;; unknown type
;;(define-extern focalpull-flags-off object) ;; unknown type
;;(define-extern focalpull-flags-on object) ;; unknown type
;;(define-extern tower-wind2 object) ;; unknown type
;;(define-extern tower-wind3 object) ;; unknown type
;;(define-extern tower-winds object) ;; unknown type
;;(define-extern tower-winds3 object) ;; unknown type
;;(define-extern water-lap object) ;; unknown type
;;(define-extern waterfall object) ;; unknown type
(define-extern village-cam type)
(define-extern get-next-slot-down function)
(define-extern get-next-slot-up function)
;;(define-extern *village-cam-sg* object) ;; unknown type
;;(define-extern *warp-gate-switch-sg* object) ;; unknown type
(define-extern warpgate type)
(define-extern print-level-name function)
(define-extern warp-gate-switch type)
(define-extern warp-gate-init-by-other function)
;;(define-extern trigger-actor object) ;; unknown type
;;(define-extern *oracle-sg* object) ;; unknown type
(define-extern oracle type)
;;(define-extern alt-task object) ;; unknown type
(define-extern battlecontroller-spawn-creature function)
(define-extern battlecontroller-set-task-completed function)
;;(define-extern battlecontroller object) ;; unknown type
;;(define-extern battlecontroller-spawner object) ;; unknown type
(define-extern battlecontroller-camera-on function)
(define-extern battlecontroller-task-completed? function)
(define-extern battlecontroller-update-spawners function)
(define-extern battlecontroller-battle-end function)
(define-extern battlecontroller-draw-debug function)
(define-extern battlecontroller-fill-all-spawners function)
(define-extern battlecontroller-default-event-handler function)
(define-extern battlecontroller-special-contents? function)
(define-extern battlecontroller-spawners-full? function)
;;(define-extern battlecontroller-creature-type object) ;; unknown type
(define-extern battlecontroller-special-contents-collected? function)
(define-extern battlecontroller-spawn-creature-random-spawner function)
(define-extern battlecontroller-off function)
(define-extern battlecontroller-camera-off function)
(define-extern battlecontroller-spawn-creature-at-spawner function)
(define-extern battlecontroller-disable-ocean function)
(define-extern battlecontroller-battle-begin function)
(define-extern battlecontroller-set-special-contents-collected function)
;;(define-extern num-lurkers object) ;; unknown type
;;(define-extern danger object) ;; unknown type
;;(define-extern pathb object) ;; unknown type
;;(define-extern pathg object) ;; unknown type
;;(define-extern fade-actor object) ;; unknown type
;;(define-extern pathd object) ;; unknown type
;;(define-extern percent object) ;; unknown type
;;(define-extern pickup-type object) ;; unknown type
;;(define-extern kill-actor object) ;; unknown type
;;(define-extern spawn object) ;; unknown type
;;(define-extern spawner-blocker-actor object) ;; unknown type
;;(define-extern battlecontroller-active object) ;; unknown type
;;(define-extern patha object) ;; unknown type
;;(define-extern lurker-type object) ;; unknown type
;;(define-extern battlecontroller-die object) ;; unknown type
;;(define-extern pathf object) ;; unknown type
;;(define-extern spawner-trigger-actor object) ;; unknown type
;;(define-extern pathc object) ;; unknown type
;;(define-extern pickup-percent object) ;; unknown type
;;(define-extern battlecontroller-play-intro-camera object) ;; unknown type
;;(define-extern final-pickup object) ;; unknown type
;;(define-extern max-pickup-count object) ;; unknown type
;;(define-extern pathh object) ;; unknown type
;;(define-extern pathspawn object) ;; unknown type
;;(define-extern pathe object) ;; unknown type
;;(define-extern battlecontroller-idle object) ;; unknown type
(define-extern birth-func-random-rot function)
(define-extern citb-part type)
(define-extern check-drop-level-firehose-pops function)
;;(define-extern *citb-arm-c-sg* object) ;; unknown type
;;(define-extern *citb-arm-d-sg* object) ;; unknown type
;;(define-extern *citb-robotboss-leftarm-sg* object) ;; unknown type
(define-extern citb-arm-c type)
;;(define-extern citb-hose-die object) ;; unknown type
;;(define-extern *citb-robotboss-head-sg* object) ;; unknown type
;;(define-extern citb-robotboss-idle object) ;; unknown type
;;(define-extern *citb-disc-b-sg* object) ;; unknown type
;;(define-extern citb-coil-break object) ;; unknown type
;;(define-extern *citb-arm-shoulder-a-sg* object) ;; unknown type
(define-extern citb-launcher type)
;;(define-extern citb-arm object) ;; unknown type
;;(define-extern *citb-robotboss-leftshoulder-sg* object) ;; unknown type
(define-extern citadelcam type)
;;(define-extern citb-hose-idle object) ;; unknown type
;;(define-extern citb-arm-section object) ;; unknown type
;;(define-extern *citb-hose-sg* object) ;; unknown type
;;(define-extern citadelcam-idle object) ;; unknown type
(define-extern citb-generator-trigger-others function)
;;(define-extern *citb-generator-sg* object) ;; unknown type
(define-extern citb-arm-b type)
(define-extern citb-hose type)
;;(define-extern *citb-launcher-sg* object) ;; unknown type
;;(define-extern citb-generator-broken object) ;; unknown type
;;(define-extern citb-disc-idle object) ;; unknown type
;;(define-extern *citb-robotboss-rightshoulder-sg* object) ;; unknown type
;;(define-extern citb-hose-spawn object) ;; unknown type
(define-extern citb-generator type)
;;(define-extern *citb-robotboss-sg* object) ;; unknown type
;;(define-extern *citb-iris-door-sg* object) ;; unknown type
(define-extern citb-hose-event-handler function)
(define-extern citb-button type)
(define-extern citb-arm-shoulder-b type)
;;(define-extern citb-generator-break object) ;; unknown type
;;(define-extern *citb-disc-c-sg* object) ;; unknown type
(define-extern citb-robotboss type)
;;(define-extern citb-arm-shoulder object) ;; unknown type
;;(define-extern *citb-robotboss-belly-sg* object) ;; unknown type
;;(define-extern *citb-robotboss-gun-sg* object) ;; unknown type
;;(define-extern *citb-arm-shoulder-b-sg* object) ;; unknown type
(define-extern citb-arm-shoulder-a type)
;;(define-extern citb-robotboss-die object) ;; unknown type
(define-extern citb-arm-d type)
;;(define-extern *citadelcam-sg* object) ;; unknown type
;;(define-extern *citb-disc-a-sg* object) ;; unknown type
(define-extern citb-disc-a type)
(define-extern citb-iris-door type)
(define-extern citb-arm-a type)
;;(define-extern citb-disc object) ;; unknown type
;;(define-extern *citb-button-sg* object) ;; unknown type
(define-extern citb-disc-b type)
(define-extern citb-chains type)
(define-extern citb-disc-c type)
;;(define-extern citadelcam-stair-plats object) ;; unknown type
;;(define-extern citb-coil-idle object) ;; unknown type
;;(define-extern citb-generator-idle object) ;; unknown type
(define-extern citb-disc-d type)
;;(define-extern *citb-coil-sg* object) ;; unknown type
;;(define-extern *citb-robotboss-rightarm-sg* object) ;; unknown type
(define-extern citb-battlecontroller type)
;;(define-extern citb-coil-broken object) ;; unknown type
;;(define-extern *citb-arm-a-sg* object) ;; unknown type
(define-extern citb-coil type)
;;(define-extern *citb-generator-broken-sg* object) ;; unknown type
;;(define-extern *citb-arm-b-sg* object) ;; unknown type
;;(define-extern *citb-disc-d-sg* object) ;; unknown type
;;(define-extern *citb-robotboss-nose-sg* object) ;; unknown type
;;(define-extern open object) ;; unknown type
;;(define-extern open-actor object) ;; unknown type
;;(define-extern shield-off object) ;; unknown type
;;(define-extern shield-on object) ;; unknown type
(define-extern citb-plat-eco type)
;;(define-extern citb-base-plat object) ;; unknown type
;;(define-extern citb-chain-plat-settle object) ;; unknown type
;;(define-extern *citb-rotatebox-sg* object) ;; unknown type
;;(define-extern citb-exit-plat-idle object) ;; unknown type
(define-extern citb-firehose type)
;;(define-extern *plat-citb-sg* object) ;; unknown type
;;(define-extern *citb-chain-plat-sg* object) ;; unknown type
;;(define-extern *citb-stopbox-sg* object) ;; unknown type
(define-extern citb-rotatebox type)
(define-extern citb-stair-plat type)
(define-extern citb-exit-plat-move-player function)
;;(define-extern *plat-eco-citb-unlit-sg* object) ;; unknown type
(define-extern citb-firehose-blast-particles function)
(define-extern citb-exit-plat type)
;;(define-extern citb-firehose-blast object) ;; unknown type
(define-extern citb-donut type)
(define-extern citb-plat type)
;;(define-extern citb-firehose-idle object) ;; unknown type
;;(define-extern *citb-donut-sg* object) ;; unknown type
;;(define-extern *citb-chain-plat-constants* object) ;; unknown type
(define-extern citb-stopbox type)
;;(define-extern *citb-firehose-sg* object) ;; unknown type
;;(define-extern citb-firehose-active object) ;; unknown type
(define-extern citb-chain-plat type)
;;(define-extern citb-exit-plat-rise object) ;; unknown type
;;(define-extern *plat-eco-citb-lit-sg* object) ;; unknown type
;;(define-extern *citb-exit-plat-sg* object) ;; unknown type
;;(define-extern height-info object) ;; unknown type
;;(define-extern citb-base-plat-idle object) ;; unknown type
;;(define-extern citb-base-plat-active object) ;; unknown type
(define-extern citb-sage-draw-beam function)
;;(define-extern citb-sagecage-idle object) ;; unknown type
;;(define-extern *evilbro-citadel-sg* object) ;; unknown type
;;(define-extern *citb-sagecage-sg* object) ;; unknown type
(define-extern blue-sagecage type)
;;(define-extern citb-sage object) ;; unknown type
(define-extern citb-sagecage-draw-bars function)
;;(define-extern *redsage-sg* object) ;; unknown type
(define-extern green-sagecage type)
;;(define-extern *yellowsage-sg* object) ;; unknown type
(define-extern citb-sagecage-init-by-other function)
;;(define-extern *green-sagecage-sg* object) ;; unknown type
;;(define-extern citb-sagecage object) ;; unknown type
;;(define-extern *evilsis-citadel-sg* object) ;; unknown type
(define-extern citb-sagecage-update-collision function)
(define-extern yellow-sagecage type)
;;(define-extern *bluesage-sg* object) ;; unknown type
(define-extern red-sagecage type)
;;(define-extern enable-bars object) ;; unknown type
;;(define-extern start-cloning object) ;; unknown type
;;(define-extern disable-bars object) ;; unknown type
;;(define-extern *robotboss-sg* object) ;; unknown type
;;(define-extern spawn-robot object) ;; unknown type
(define-extern snow-bunny-initialize-jump function)
;;(define-extern *snow-bunny-sg* object) ;; unknown type
(define-extern snow-bunny-execute-jump function)
(define-extern snow-bunny-default-event-handler function)
;;(define-extern snow-bunny-retreat-work object) ;; unknown type
;;(define-extern *snow-bunny-nav-enemy-info* object) ;; unknown type
(define-extern snow-bunny type)
;;(define-extern snow-bunny-tune-spheres object) ;; unknown type
;;(define-extern snow-bunny-nav-resume object) ;; unknown type
;;(define-extern snow-bunny-retreat-hop object) ;; unknown type
;;(define-extern snow-bunny-patrol-hop object) ;; unknown type
;;(define-extern *snow-bunny* object) ;; unknown type
;;(define-extern snow-bunny-attack object) ;; unknown type
;;(define-extern snow-bunny-chase-hop object) ;; unknown type
;;(define-extern snow-bunny-patrol-idle object) ;; unknown type
;;(define-extern snow-bunny-lunge object) ;; unknown type
;;(define-extern snow-bunny-defend object) ;; unknown type
;;(define-extern *citb-bunny-sg* object) ;; unknown type
(define-extern citb-bunny type)
;;(define-extern *citb-bunny-nav-enemy-info* object) ;; unknown type
(define-extern citb-drop-plat-spawn-children function)
(define-extern citb-drop-plat-drop-children function)
;;(define-extern drop-plat-spawn object) ;; unknown type
(define-extern drop-plat-init-by-other function)
;;(define-extern drop-plat-idle object) ;; unknown type
(define-extern drop-plat-set-fade function)
;;(define-extern citb-drop-plat-active object) ;; unknown type
;;(define-extern drop-plat-die object) ;; unknown type
;;(define-extern *citb-drop-plat-red-sg* object) ;; unknown type
;;(define-extern drop-plat-drop object) ;; unknown type
;;(define-extern handle-inline-array object) ;; unknown type
;;(define-extern *citb-drop-plat-yellow-sg* object) ;; unknown type
;;(define-extern drop-plat-rise object) ;; unknown type
(define-extern citb-drop-plat type)
(define-extern citb-drop-plat-drop-all-children function)
;;(define-extern drop-plat object) ;; unknown type
;;(define-extern *citb-drop-plat-green-sg* object) ;; unknown type
;;(define-extern *citb-drop-plat-sg* object) ;; unknown type
;;(define-extern citb-drop-plat-idle object) ;; unknown type
;;(define-extern *citb-drop-plat-blue-sg* object) ;; unknown type
;;(define-extern plat-type object) ;; unknown type
;;(define-extern player-stepped object) ;; unknown type
;;(define-extern count object) ;; unknown type
;;(define-extern drop object) ;; unknown type
;;(define-extern *assistant-lavatube-end-sg* object) ;; unknown type
(define-extern assistant-lavatube-end type)
;;(define-extern snow-bunny1 object) ;; unknown type
;;(define-extern snow-bunny2 object) ;; unknown type
;;(define-extern prec-button2 object) ;; unknown type
;;(define-extern irisdoor2 object) ;; unknown type
;;(define-extern assembly-moves object) ;; unknown type
;;(define-extern teleporter-on object) ;; unknown type
;;(define-extern continue-name object) ;; unknown type
;;(define-extern fire-loop object) ;; unknown type
;;(define-extern notice object) ;; unknown type
;;(define-extern robot-arm object) ;; unknown type
;;(define-extern warpgate-loop object) ;; unknown type
(define-extern cavecrystal type)
;;(define-extern *cavecrystal-sg* object) ;; unknown type
;;(define-extern cavecrystal-active object) ;; unknown type
;;(define-extern cavecrystal-idle object) ;; unknown type
;;(define-extern *cavecrystal-light-control* object) ;; unknown type
;;(define-extern bab-spid-dies object) ;; unknown type
;;(define-extern bab-spid-roar object) ;; unknown type
;;(define-extern eggs-hatch object) ;; unknown type
;;(define-extern spider-step object) ;; unknown type
;;(define-extern cavelevator object) ;; unknown type
;;(define-extern cave-spatula object) ;; unknown type
;;(define-extern trapdoor object) ;; unknown type
;;(define-extern mom-spid-dies object) ;; unknown type
;;(define-extern mom-spid-grunt object) ;; unknown type
;;(define-extern spider-mom-t1 object) ;; unknown type
;;(define-extern cavewind object) ;; unknown type
;;(define-extern crystal-light object) ;; unknown type
(define-extern baby-spider type)
(define-extern cave-water type)
(define-extern caveelevator type)
(define-extern cavespatula type)
(define-extern cavetrapdoor type)
(define-extern dark-crystal type)
(define-extern static-screen-spawn function)
;;(define-extern static-screen object) ;; unknown type
(define-extern static-screen-init-by-other function)
;;(define-extern robotboss-dda object) ;; unknown type
(define-extern target-has-all-the-cells? function)
(define-extern check-drop-level-eichar-lighteco-pops function)
(define-extern check-drop-level-bigdoor-open-pops function)
;;(define-extern light-eco-mother-active object) ;; unknown type
(define-extern light-eco-child-init-by-other function)
(define-extern check-drop-level-lighteco-big-pops function)
;;(define-extern light-eco-child-appear object) ;; unknown type
;;(define-extern light-eco-child-grabbed object) ;; unknown type
(define-extern check-drop-level-lighteco-pops function)
;;(define-extern light-eco-child-die object) ;; unknown type
(define-extern light-eco-mother-init-by-other function)
(define-extern light-eco-mother-default-event-handler function)
;;(define-extern *light-eco-big-sg* object) ;; unknown type
;;(define-extern light-eco-mother object) ;; unknown type
;;(define-extern light-eco-mother-discipate object) ;; unknown type
;;(define-extern light-eco-child object) ;; unknown type
;;(define-extern light-eco-mother-appear object) ;; unknown type
;;(define-extern light-eco-child-hit-ground object) ;; unknown type
;;(define-extern *light-eco-small-sg* object) ;; unknown type
;;(define-extern light-eco-child-idle object) ;; unknown type
(define-extern light-eco-child-default-event-handler function)
;;(define-extern white-eco-picked-up object) ;; unknown type
;;(define-extern beam-off object) ;; unknown type
;;(define-extern darkecobomb object) ;; unknown type
(define-extern darkecobomb-init-by-other function)
(define-extern arcing-shot-setup function)
;;(define-extern darkecobomb-countdown object) ;; unknown type
;;(define-extern arcing-shot-debug-trajectory object) ;; unknown type
;;(define-extern torus-verts object) ;; unknown type
;;(define-extern greenshot object) ;; unknown type
(define-extern darkecobomb-explode-if-player-high-enough function)
;;(define-extern *greenshot-sg* object) ;; unknown type
;;(define-extern darkecobomb-explode object) ;; unknown type
(define-extern redshot-init-by-other function)
(define-extern arcing-shot-calculate function)
;;(define-extern redshot-explode object) ;; unknown type
(define-extern redshot-particle-callback function)
(define-extern darkecobomb-handler function)
;;(define-extern yellowshot object) ;; unknown type
;;(define-extern yellowshot-idle object) ;; unknown type
;;(define-extern redshot object) ;; unknown type
(define-extern yellowshot-init-by-other function)
(define-extern greenshot-init-by-other function)
;;(define-extern greenshot-idle object) ;; unknown type
;;(define-extern arcing-shot object) ;; unknown type
;;(define-extern darkecobomb-idle object) ;; unknown type
;;(define-extern torus object) ;; unknown type
(define-extern redshot-trans function)
;;(define-extern *redring-sg* object) ;; unknown type
;;(define-extern darkecobomb-land object) ;; unknown type
(define-extern arcing-shot-draw function)
(define-extern redshot-handler function)
;;(define-extern *darkecobomb-sg* object) ;; unknown type
;;(define-extern redshot-idle object) ;; unknown type
;;(define-extern redshot-wait object) ;; unknown type
;;(define-extern bomb-going object) ;; unknown type
;;(define-extern flash object) ;; unknown type
;;(define-extern hit-jak object) ;; unknown type
;;(define-extern bomb-done object) ;; unknown type
;;(define-extern missed-jak object) ;; unknown type
;;(define-extern ecoclaw-activate object) ;; unknown type
(define-extern ecoclaw-beam-particle-callback function)
;;(define-extern ecoclaw-part-info object) ;; unknown type
(define-extern ecoclaw type)
(define-extern ecoclaw-handler function)
;;(define-extern *silodoor-sg* object) ;; unknown type
(define-extern finalbosscam-init-by-other function)
;;(define-extern finalbosscam object) ;; unknown type
;;(define-extern *ecoclaw-sg* object) ;; unknown type
;;(define-extern ecoclaw-idle object) ;; unknown type
;;(define-extern *finalbosscam-sg* object) ;; unknown type
(define-extern robotboss-manipy-trans-hook function)
;;(define-extern *med-res-snow1-sg* object) ;; unknown type
(define-extern silodoor type)
;;(define-extern set-pivot object) ;; unknown type
;;(define-extern *ecoclaw* object) ;; unknown type
;;(define-extern beam-on object) ;; unknown type
;;(define-extern green-eco-lurker object) ;; unknown type
;;(define-extern *green-eco-lurker-sg* object) ;; unknown type
(define-extern green-eco-lurker-gen-init-by-other function)
;;(define-extern *green-eco-lurker-nav-enemy-info* object) ;; unknown type
;;(define-extern green-eco-lurker-gen object) ;; unknown type
;;(define-extern green-eco-lurker-appear object) ;; unknown type
;;(define-extern green-eco-lurker-wait-to-appear object) ;; unknown type
(define-extern green-eco-lurker-init-by-other function)
;;(define-extern green-eco-lurker-appear-land object) ;; unknown type
;;(define-extern spawn-minions object) ;; unknown type
;;(define-extern green-eco-lurker-tune-spheres object) ;; unknown type
;;(define-extern blob-died object) ;; unknown type
;;(define-extern blob-hit-jak object) ;; unknown type
;;(define-extern redshot-launch-info object) ;; unknown type
;;(define-extern redshot-launch-array object) ;; unknown type
;;(define-extern *robotboss-redeco-sg* object) ;; unknown type
(define-extern robotboss-yellow-eco-off function)
(define-extern robotboss-yellow-eco-on function)
(define-extern robotboss-anim-blend-loop function)
;;(define-extern robotboss-red-dark-bomb-wait object) ;; unknown type
;;(define-extern robotboss-green object) ;; unknown type
(define-extern robotboss-yellowshot function)
(define-extern robotboss-bomb-handler function)
;;(define-extern robotboss-green-dark-bomb-wait object) ;; unknown type
(define-extern robotboss-greenshot function)
(define-extern robotboss-always-trans function)
;;(define-extern robotboss-green-wait object) ;; unknown type
;;(define-extern robotboss-daxter-sacrifice-movie object) ;; unknown type
(define-extern robotboss-blue-done function)
;;(define-extern robotboss-red object) ;; unknown type
;;(define-extern robotboss-blue-wait object) ;; unknown type
;;(define-extern robotboss-yellow object) ;; unknown type
;;(define-extern robotboss-green-dark-bomb object) ;; unknown type
(define-extern robotboss-is-red-hit function)
(define-extern robotboss-redshot function)
(define-extern robotboss-is-yellow-hit function)
;;(define-extern robotboss-red-dark-bomb object) ;; unknown type
;;(define-extern robotboss-blue-dark-bomb object) ;; unknown type
(define-extern robotboss-position function)
(define-extern robotboss-blue-beam function)
;;(define-extern *robotboss-blueeco-sg* object) ;; unknown type
(define-extern robotboss-time-to-shoot-yellow function)
;;(define-extern *robotboss-yelloweco-sg* object) ;; unknown type
(define-extern robotboss-shooting-trans function)
(define-extern robotboss-cut-cam function)
;;(define-extern robotboss-yellow-dark-bomb-wait object) ;; unknown type
(define-extern robotboss-cut-cam-exit function)
;;(define-extern robotboss-yellow-wait object) ;; unknown type
(define-extern robotboss-darkecobomb function)
;;(define-extern robotboss-yellow-dark-bomb object) ;; unknown type
(define-extern robotboss-redshot-fill-array function)
(define-extern robotboss-set-dda function)
;;(define-extern robotboss-white-eco-movie object) ;; unknown type
(define-extern robotboss-setup-for-hits function)
;;(define-extern robotboss-red-wait object) ;; unknown type
;;(define-extern robotboss-blue-dark-bomb-wait object) ;; unknown type
(define-extern robotboss-handler function)
(define-extern power-left type)
;;(define-extern *powercellalt-sg* object) ;; unknown type
;;(define-extern powercellalt object) ;; unknown type
;;(define-extern *power-left-sg* object) ;; unknown type
;;(define-extern *power-right-sg* object) ;; unknown type
(define-extern power-right type)
;;(define-extern fin-door object) ;; unknown type
(define-extern powercellalt-init-by-other function)
;;(define-extern brightness object) ;; unknown type
;;(define-extern *robotboss-cinematic-sg* object) ;; unknown type
;;(define-extern *plat-eco-finalboss-unlit-sg* object) ;; unknown type
;;(define-extern sage-finalboss-credits object) ;; unknown type
;;(define-extern sage-finalboss-particle object) ;; unknown type
(define-extern sage-finalboss-extra-enter function)
;;(define-extern *plat-eco-finalboss-lit-sg* object) ;; unknown type
;;(define-extern *jak-white-sg* object) ;; unknown type
(define-extern sage-finalboss-extra-trans function)
(define-extern sage-finalboss-credit-particle function)
(define-extern plat-eco-finalboss type)
;;(define-extern *sage-finalboss-sg* object) ;; unknown type
(define-extern ogreboss type)
;;(define-extern activate-particle object) ;; unknown type
;;(define-extern deactivate-particle object) ;; unknown type
;;(define-extern babak-alarmed object) ;; unknown type
;;(define-extern blob-dies object) ;; unknown type
;;(define-extern blob-land object) ;; unknown type
;;(define-extern blob-roar object) ;; unknown type
;;(define-extern bfg-fizzle object) ;; unknown type
;;(define-extern dark-eco-buzz object) ;; unknown type
;;(define-extern dark-eco-fire object) ;; unknown type
;;(define-extern explod-bfg object) ;; unknown type
;;(define-extern explosion2 object) ;; unknown type
;;(define-extern robo-servo2 object) ;; unknown type
;;(define-extern robo-servo3 object) ;; unknown type
;;(define-extern robo-servo5 object) ;; unknown type
;;(define-extern robo-servo6 object) ;; unknown type
;;(define-extern robo-servo9 object) ;; unknown type
;;(define-extern robo-yell object) ;; unknown type
;;(define-extern *evilbro-intro-sg* object) ;; unknown type
(define-extern evilsis type)
;;(define-extern *evilsis-intro-sg* object) ;; unknown type
(define-extern evilbro type)
(define-extern misty-part type)
;;(define-extern eggtop-idle object) ;; unknown type
(define-extern eggtop type)
;;(define-extern eggtop-close object) ;; unknown type
;;(define-extern *jng-iris-door-sg* object) ;; unknown type
;;(define-extern *eggtop-sg* object) ;; unknown type
(define-extern jng-iris-door type)
(define-extern plat-flip type)
;;(define-extern *plat-flip-sg* object) ;; unknown type
;;(define-extern plat-flip-idle object) ;; unknown type
;;(define-extern sync-percent object) ;; unknown type
;;(define-extern *aphid-sg* object) ;; unknown type
(define-extern aphid-vulnerable function)
;;(define-extern aphid object) ;; unknown type
(define-extern aphid-init-by-other function)
;;(define-extern *aphid-nav-enemy-info* object) ;; unknown type
(define-extern aphid-invulnerable function)
;;(define-extern plant-boss-root-idle object) ;; unknown type
;;(define-extern plant-boss-intro object) ;; unknown type
;;(define-extern plant-boss-reset object) ;; unknown type
;;(define-extern plant-boss-root-die object) ;; unknown type
;;(define-extern plant-boss-dead-bounce object) ;; unknown type
;;(define-extern plant-boss-dead-idle object) ;; unknown type
(define-extern plant-boss-back-arms-init function)
;;(define-extern plant-boss-vulnerable object) ;; unknown type
;;(define-extern plant-boss-spawn object) ;; unknown type
;;(define-extern plant-boss-hit object) ;; unknown type
(define-extern plant-boss-root-init function)
;;(define-extern *plant-boss-vine-sg* object) ;; unknown type
;;(define-extern *plant-boss-back-arms-sg* object) ;; unknown type
;;(define-extern plant-boss-arm object) ;; unknown type
;;(define-extern plant-boss-back-arms-hit object) ;; unknown type
;;(define-extern plant-boss-vine-idle object) ;; unknown type
;;(define-extern *plant-boss-sg* object) ;; unknown type
(define-extern plant-boss-vine-init function)
;;(define-extern *plant-boss-shadow-control* object) ;; unknown type
;;(define-extern *plant-boss-leaf-sg* object) ;; unknown type
;;(define-extern plant-boss-idle object) ;; unknown type
(define-extern plant-boss-generic-event-handler function)
;;(define-extern plant-boss-arm-hit object) ;; unknown type
;;(define-extern plant-boss-arm-die object) ;; unknown type
;;(define-extern plant-boss-leaf object) ;; unknown type
;;(define-extern plant-boss-vine-hit object) ;; unknown type
;;(define-extern plant-boss-leaf-open object) ;; unknown type
(define-extern plant-boss-leaf-init function)
;;(define-extern plant-boss-eat object) ;; unknown type
(define-extern plant-boss-default-event-handler function)
;;(define-extern *plant-boss-arm-sg* object) ;; unknown type
;;(define-extern plant-boss-back-arms-die object) ;; unknown type
;;(define-extern plant-boss-attack object) ;; unknown type
(define-extern plant-boss-post function)
;;(define-extern *plant-boss-root-sg* object) ;; unknown type
;;(define-extern plant-boss-leaf-idle object) ;; unknown type
;;(define-extern plant-boss-leaf-die object) ;; unknown type
(define-extern plant-boss-arm-init function)
;;(define-extern plant-boss-dead object) ;; unknown type
;;(define-extern plant-boss-leaf-bounce object) ;; unknown type
;;(define-extern plant-boss-leaf-close object) ;; unknown type
;;(define-extern plant-boss-far-idle object) ;; unknown type
;;(define-extern plant-boss-back-arms-idle object) ;; unknown type
;;(define-extern plant-boss-leaf-open-idle object) ;; unknown type
;;(define-extern plant-boss-arm-idle object) ;; unknown type
;;(define-extern plant-boss-vine-die object) ;; unknown type
;;(define-extern hit object) ;; unknown type
;;(define-extern aphid-dies object) ;; unknown type
;;(define-extern aphid-roar object) ;; unknown type
;;(define-extern aphid-step object) ;; unknown type
;;(define-extern darkvine-down object) ;; unknown type
;;(define-extern darkvine-move object) ;; unknown type
;;(define-extern darkvine-up object) ;; unknown type
;;(define-extern irisdoor1 object) ;; unknown type
;;(define-extern plant-chomp object) ;; unknown type
;;(define-extern plant-eye object) ;; unknown type
;;(define-extern plant-fall object) ;; unknown type
;;(define-extern plant-laugh object) ;; unknown type
;;(define-extern plant-ouch object) ;; unknown type
;;(define-extern plant-recover object) ;; unknown type
;;(define-extern plant-roar object) ;; unknown type
;;(define-extern extra-count object) ;; unknown type
(define-extern darkvine type)
(define-extern jungle-elevator type)
;;(define-extern bouncer-smush object) ;; unknown type
;;(define-extern bouncer-fire object) ;; unknown type
;;(define-extern bouncer-wait object) ;; unknown type
;;(define-extern *bouncer-sg* object) ;; unknown type
;;(define-extern *hopper-nav-enemy-info* object) ;; unknown type
(define-extern hopper-do-jump function)
(define-extern hopper-jump-to function)
(define-extern hopper type)
;;(define-extern *hopper-sg* object) ;; unknown type
(define-extern hopper-find-ground function)
;;(define-extern junglesnake-tilt-joint object) ;; unknown type
;;(define-extern junglesnake-tracking object) ;; unknown type
;;(define-extern *junglesnake-twist-max-deltas* object) ;; unknown type
(define-extern junglesnake-default-event-handler function)
(define-extern junglesnake type)
;;(define-extern junglesnake-wake object) ;; unknown type
;;(define-extern junglesnake-die object) ;; unknown type
;;(define-extern junglesnake-attack object) ;; unknown type
;;(define-extern junglesnake-sleeping object) ;; unknown type
(define-extern junglesnake-joint-callback function)
;;(define-extern junglesnake-give-up object) ;; unknown type
;;(define-extern junglesnake-twist-joint object) ;; unknown type
;;(define-extern *junglesnake-sg* object) ;; unknown type
;;(define-extern *darkvine-sg* object) ;; unknown type
;;(define-extern darkvine-idle object) ;; unknown type
(define-extern darkvine-event-handler function)
;;(define-extern darkvine-retreat object) ;; unknown type
;;(define-extern darkvine-die object) ;; unknown type
;;(define-extern precurbridge-idle object) ;; unknown type
;;(define-extern *maindoor-sg* object) ;; unknown type
(define-extern lurkerm-tall-sail type)
;;(define-extern precurbridge-span object) ;; unknown type
;;(define-extern precurbridge-active object) ;; unknown type
;;(define-extern lurkerm-tall-sail-idle object) ;; unknown type
;;(define-extern *lurkerm-tall-sail-sg* object) ;; unknown type
(define-extern logtrap type)
;;(define-extern *accordian-sg* object) ;; unknown type
(define-extern accordian type)
;;(define-extern lurkerm-short-sail-idle object) ;; unknown type
(define-extern maindoor type)
;;(define-extern maindoor-closed object) ;; unknown type
;;(define-extern *logtrap-sg* object) ;; unknown type
;;(define-extern *junglecam-sg* object) ;; unknown type
;;(define-extern *med-res-firecanyon-sg* object) ;; unknown type
;;(define-extern *jungle-camera-sg* object) ;; unknown type
(define-extern precurbridge type)
(define-extern lurkerm-piston type)
;;(define-extern *sidedoor-sg* object) ;; unknown type
;;(define-extern jngpusher-idle object) ;; unknown type
;;(define-extern precurbridge-activate object) ;; unknown type
;;(define-extern lurkerm-short-sail object) ;; unknown type
(define-extern sidedoor type)
(define-extern junglecam type)
;;(define-extern *towertop-sg* object) ;; unknown type
(define-extern towertop type)
;;(define-extern accordian-idle object) ;; unknown type
(define-extern jungle-water type)
;;(define-extern *lurkerm-piston-sg* object) ;; unknown type
;;(define-extern towertop-idle object) ;; unknown type
;;(define-extern *jngpusher-sg* object) ;; unknown type
;;(define-extern *lurkerm-short-sail-sg* object) ;; unknown type
;;(define-extern precurbridgecam object) ;; unknown type
;;(define-extern maindoor-open object) ;; unknown type
;;(define-extern lurkerm-piston-idle object) ;; unknown type
;;(define-extern ripple-for-jungle-water object) ;; unknown type
;;(define-extern *precurbridge-sg* object) ;; unknown type
;;(define-extern jngpusher object) ;; unknown type
(define-extern peri-beamcam-init-by-other function)
;;(define-extern reflector object) ;; unknown type
;;(define-extern periscope-activate object) ;; unknown type
;;(define-extern reflector-mirror-idle object) ;; unknown type
(define-extern reflector-init-by-other function)
(define-extern periscope-debug-trans function)
;;(define-extern *reflector-mirror-sg* object) ;; unknown type
(define-extern periscope-post function)
(define-extern periscope-has-power-input? function)
(define-extern periscope-test-task-complete? function)
(define-extern periscope-update-joints function)
;;(define-extern reflector-idle object) ;; unknown type
(define-extern periscope-draw-beam function)
;;(define-extern *periscope-base-sg* object) ;; unknown type
;;(define-extern *periscope-mirror-sg* object) ;; unknown type
(define-extern reflector-origin-update function)
;;(define-extern periscope-idle object) ;; unknown type
(define-extern reflector-origin type)
;;(define-extern cam-periscope object) ;; unknown type
;;(define-extern periscope-player-control object) ;; unknown type
;;(define-extern periscope-wait-for-player object) ;; unknown type
(define-extern periscope-crosshair function)
(define-extern periscope-find-aim-at-angles function)
(define-extern periscope-find-next function)
(define-extern draw-power-beam function)
(define-extern periscope-set-target-direction function)
(define-extern periscope-find-reflection-angles function)
;;(define-extern periscope-power-on object) ;; unknown type
(define-extern reflector-mirror type)
(define-extern periscope-draw-beam-impact function)
;;(define-extern periscope-wait-for-power-input object) ;; unknown type
;;(define-extern *reflector-mirror-break-sg* object) ;; unknown type
(define-extern target-close-to-point? function)
;;(define-extern reflector-origin-idle object) ;; unknown type
;;(define-extern reflector-mirror-broken object) ;; unknown type
;;(define-extern activate object) ;; unknown type
(define-extern junglefish type)
;;(define-extern *junglefish-sg* object) ;; unknown type
;;(define-extern *junglefish-nav-enemy-info* object) ;; unknown type
(define-extern fisher-fish-move function)
(define-extern fisher-spawn-ambient function)
;;(define-extern *fish-net-sg* object) ;; unknown type
;;(define-extern fisher-fish-die object) ;; unknown type
;;(define-extern *fisher-sg* object) ;; unknown type
;;(define-extern *catch-fishc-sg* object) ;; unknown type
;;(define-extern *fisher-params* object) ;; unknown type
;;(define-extern *catch-fisha-sg* object) ;; unknown type
(define-extern fisher-game-update function)
;;(define-extern fisher-fish-fall object) ;; unknown type
;;(define-extern fisher-fish-caught object) ;; unknown type
;;(define-extern fisher-fish object) ;; unknown type
;;(define-extern fisher-params object) ;; unknown type
;;(define-extern fisher-done object) ;; unknown type
(define-extern fisher-fish-water function)
(define-extern fisher-bank type)
;;(define-extern *catch-fishb-sg* object) ;; unknown type
(define-extern fisher-fish-init-by-other function)
;;(define-extern fisher-playing object) ;; unknown type
(define-extern fisher-draw-display function)
;;(define-extern *FISHER-bank* object) ;; unknown type
(define-extern fisher type)
;;(define-extern emissive-off object) ;; unknown type
;;(define-extern bounce object) ;; unknown type
;;(define-extern emissive-on object) ;; unknown type
;;(define-extern bad object) ;; unknown type
;;(define-extern fishgame object) ;; unknown type
(define-extern jungle-part type)
;;(define-extern launcherdoor-closed object) ;; unknown type
;;(define-extern *launcherdoor-maincave-sg* object) ;; unknown type
;;(define-extern *launcherdoor-sg* object) ;; unknown type
;;(define-extern launcherdoor-open object) ;; unknown type
(define-extern launcherdoor type)
;;(define-extern accordian-pump object) ;; unknown type
;;(define-extern bounceytarp object) ;; unknown type
;;(define-extern frog-dies object) ;; unknown type
;;(define-extern frog-idle object) ;; unknown type
;;(define-extern frog-jump object) ;; unknown type
;;(define-extern frogspeak object) ;; unknown type
;;(define-extern lurkerfish-bite object) ;; unknown type
;;(define-extern lurkerfish-dies object) ;; unknown type
;;(define-extern lurkerfish-swim object) ;; unknown type
;;(define-extern snake-bite object) ;; unknown type
;;(define-extern snake-idle object) ;; unknown type
;;(define-extern snake-rattle object) ;; unknown type
;;(define-extern logtrap1 object) ;; unknown type
;;(define-extern logtrap2 object) ;; unknown type
;;(define-extern lurkerm-squeak object) ;; unknown type
;;(define-extern prec-button3 object) ;; unknown type
;;(define-extern pc-bridge object) ;; unknown type
;;(define-extern floating-rings object) ;; unknown type
;;(define-extern bridge-hover object) ;; unknown type
;;(define-extern heart-drone object) ;; unknown type
;;(define-extern jungle-river object) ;; unknown type
;;(define-extern jungle-shores object) ;; unknown type
;;(define-extern lurkerm-hum object) ;; unknown type
;;(define-extern steam-release object) ;; unknown type
;;(define-extern wind-loop object) ;; unknown type
(define-extern racer-bank type)
;;(define-extern racer-info object) ;; unknown type
;;(define-extern *balloon-sg* object) ;; unknown type
;;(define-extern *RACER-bank* object) ;; unknown type
(define-extern zoomer-heat-slice-color function)
(define-extern part-hud-zoomer-heat-slice-03-func function)
;;(define-extern hud-bike-speed object) ;; unknown type
(define-extern part-hud-racer-speed-func function)
(define-extern part-hud-zoomer-heat-slice-02-func function)
(define-extern part-hud-racer-heat-func function)
(define-extern part-hud-zoomer-heat-slice-01-func function)
;;(define-extern hud-bike-heat object) ;; unknown type
(define-extern racer-effect function)
;;(define-extern *racer-explode-sg* object) ;; unknown type
;;(define-extern *racer-shadow-control* object) ;; unknown type
;;(define-extern *racer-sg* object) ;; unknown type
;;(define-extern wait-for-start object) ;; unknown type
(define-extern blocking-plane-destroy function)
(define-extern blocking-plane-spawn function)
;;(define-extern wait-for-return object) ;; unknown type
(define-extern racer-on-ground? function)
(define-extern racer-xz function)
;;(define-extern *racer-air-mods* object) ;; unknown type
(define-extern racer-collision function)
(define-extern racer-sounds function)
(define-extern racer-find-prop-point function)
(define-extern target-racing-turn-anim function)
(define-extern racer-integrate function)
(define-extern racer-effects function)
(define-extern racer-service-slide function)
(define-extern target-racing-post function)
(define-extern racer-buzz function)
(define-extern target-racing-center-anim function)
(define-extern racer-cushion function)
(define-extern racer-thrust function)
;;(define-extern *racer-mods* object) ;; unknown type
(define-extern target-racing-land-anim function)
(define-extern target-racing-jump-anim function)
(define-extern racer-calc-gravity function)
(define-extern racer-bend-gravity function)
;;(define-extern target-racing-falling object) ;; unknown type
;;(define-extern target-racing-jump object) ;; unknown type
;;(define-extern target-racing-bounce object) ;; unknown type
(define-extern racer-collision-reaction function)
;;(define-extern boost object) ;; unknown type
;;(define-extern target-racing-smack object) ;; unknown type
;;(define-extern target-racing object) ;; unknown type
;;(define-extern target-racing-death object) ;; unknown type
;;(define-extern target-racing-grab object) ;; unknown type
(define-extern target-racing-smack-check function)
;;(define-extern target-racing-get-on object) ;; unknown type
;;(define-extern target-racing-get-off-jump object) ;; unknown type
;;(define-extern target-racing-clone-anim object) ;; unknown type
;;(define-extern target-racing-get-off object) ;; unknown type
;;(define-extern target-racing-get-off-hit-ground object) ;; unknown type
;;(define-extern target-racing-hit object) ;; unknown type
(define-extern balloonlurker type)
;;(define-extern smack object) ;; unknown type
;;(define-extern group-target-hit object) ;; unknown type
;;(define-extern *ef-plane-sg* object) ;; unknown type
;;(define-extern blocking-plane-idle object) ;; unknown type
(define-extern blocking-plane-init-by-other function)
;;(define-extern blocking-plane object) ;; unknown type
(define-extern flutflut-effect function)
(define-extern flutflut type)
;;(define-extern *flutflut-shadow-control* object) ;; unknown type
;;(define-extern *flutflut-sg* object) ;; unknown type
(define-extern target-flut-hit-ground-anim function)
;;(define-extern target-flut-get-on object) ;; unknown type
;;(define-extern target-flut-air-attack-hit-ground object) ;; unknown type
;;(define-extern *flut-walk-mods* object) ;; unknown type
(define-extern target-flut-dangerous-event-handler function)
;;(define-extern target-flut-hit object) ;; unknown type
(define-extern target-flut-standard-event-handler function)
;;(define-extern target-flut-stance object) ;; unknown type
;;(define-extern target-flut-hit-ground object) ;; unknown type
(define-extern flut-bank type)
(define-extern target-flut-post-post function)
;;(define-extern target-flut-grab object) ;; unknown type
;;(define-extern target-flut-falling object) ;; unknown type
;;(define-extern target-flut-death object) ;; unknown type
;;(define-extern target-flut-air-attack object) ;; unknown type
;;(define-extern *flut-air-attack-mods* object) ;; unknown type
;;(define-extern *flut-jump-mods* object) ;; unknown type
;;(define-extern target-flut-double-jump object) ;; unknown type
;;(define-extern flut-info object) ;; unknown type
(define-extern target-flut-falling-anim-trans function)
;;(define-extern target-flut-get-off-jump object) ;; unknown type
;;(define-extern target-flut-jump object) ;; unknown type
;;(define-extern target-flut-walk object) ;; unknown type
(define-extern target-flut-post function)
;;(define-extern *flut-double-jump-mods* object) ;; unknown type
;;(define-extern target-flut-get-off object) ;; unknown type
;;(define-extern target-flut-running-attack object) ;; unknown type
;;(define-extern *flut-run-attack-mods* object) ;; unknown type
;;(define-extern *FLUT-bank* object) ;; unknown type
;;(define-extern target-flut-get-off-hit-ground object) ;; unknown type
;;(define-extern target-flut-clone-anim object) ;; unknown type
;;(define-extern group-flut-attack-strike-ground object) ;; unknown type
;;(define-extern flut-death object) ;; unknown type
;;(define-extern long-jump object) ;; unknown type
;;(define-extern *farmer-sg* object) ;; unknown type
(define-extern farmer type)
(define-extern explorer type)
;;(define-extern *explorer-sg* object) ;; unknown type
;;(define-extern *assistant-sg* object) ;; unknown type
(define-extern assistant type)
(define-extern check-drop-level-assistant function)
(define-extern sage type)
;;(define-extern *sage-sg* object) ;; unknown type
;;(define-extern yakow-kicked object) ;; unknown type
;;(define-extern yakow-idle object) ;; unknown type
;;(define-extern yakow-walk-to object) ;; unknown type
(define-extern yakow-common-post function)
;;(define-extern *yakow-sg* object) ;; unknown type
(define-extern yakow-bank type)
(define-extern yakow-post function)
(define-extern yakow-facing-player? function)
;;(define-extern *YAKOW-bank* object) ;; unknown type
;;(define-extern yakow-notice object) ;; unknown type
(define-extern yakow-blend-walk-run function)
;;(define-extern *village1cam-sg* object) ;; unknown type
(define-extern yakow-facing-point? function)
;;(define-extern yakow-graze-kicked object) ;; unknown type
(define-extern yakow-run-post function)
;;(define-extern yakow-run-away object) ;; unknown type
(define-extern yakow-simple-post function)
;;(define-extern yakow-graze object) ;; unknown type
(define-extern yakow-facing-direction? function)
;;(define-extern yakow-die object) ;; unknown type
(define-extern yakow-default-event-handler function)
(define-extern yakow-task-complete? function)
(define-extern yakow-cam function)
(define-extern yakow type)
(define-extern yakow-generate-travel-vector function)
;;(define-extern yakow-2 object) ;; unknown type
;;(define-extern yakow-1 object) ;; unknown type
;;(define-extern hutlamp-idle object) ;; unknown type
(define-extern revcycleprop type)
;;(define-extern *hutlamp-sg* object) ;; unknown type
;;(define-extern windmill-sail-idle object) ;; unknown type
;;(define-extern *med-res-village13-sg* object) ;; unknown type
;;(define-extern starfish object) ;; unknown type
(define-extern reflector-middle type)
;;(define-extern *starfish-sg* object) ;; unknown type
;;(define-extern starfish-patrol object) ;; unknown type
;;(define-extern *med-res-training-sg* object) ;; unknown type
;;(define-extern villa-starfish-idle object) ;; unknown type
;;(define-extern *med-res-beach3-sg* object) ;; unknown type
(define-extern windmill-sail type)
;;(define-extern *windmill-sail-sg* object) ;; unknown type
;;(define-extern mayorgears-idle object) ;; unknown type
(define-extern villa-starfish type)
;;(define-extern sagesail-idle object) ;; unknown type
;;(define-extern *med-res-beach-sg* object) ;; unknown type
;;(define-extern village-fish object) ;; unknown type
;;(define-extern *reflector-middle-sg* object) ;; unknown type
(define-extern hutlamp type)
(define-extern update-clock function)
;;(define-extern *revcycleprop-sg* object) ;; unknown type
(define-extern starfish-spawn-child function)
;;(define-extern villa-fisha object) ;; unknown type
;;(define-extern cyclegen object) ;; unknown type
(define-extern revcycle type)
;;(define-extern windspinner-idle object) ;; unknown type
;;(define-extern villa-fishb object) ;; unknown type
;;(define-extern *mayorgears-sg* object) ;; unknown type
(define-extern process-drawable-child-count function)
;;(define-extern ripple-for-villagea-water object) ;; unknown type
(define-extern sagesail type)
;;(define-extern *revcycle-sg* object) ;; unknown type
;;(define-extern village-fish-idle object) ;; unknown type
;;(define-extern reflector-middle-idle object) ;; unknown type
(define-extern starfish-init-by-other function)
;;(define-extern *med-res-village11-sg* object) ;; unknown type
(define-extern villagea-water type)
;;(define-extern *med-res-beach1-sg* object) ;; unknown type
(define-extern reflector-end type)
;;(define-extern *med-res-jungle1-sg* object) ;; unknown type
;;(define-extern *med-res-jungle2-sg* object) ;; unknown type
;;(define-extern reflector-end-idle object) ;; unknown type
;;(define-extern *sagesail-sg* object) ;; unknown type
(define-extern set-period function)
;;(define-extern *med-res-jungle-sg* object) ;; unknown type
;;(define-extern *starfish-nav-enemy-info* object) ;; unknown type
;;(define-extern *med-res-village12-sg* object) ;; unknown type
;;(define-extern *med-res-misty-sg* object) ;; unknown type
;;(define-extern starfish-idle object) ;; unknown type
;;(define-extern *med-res-beach2-sg* object) ;; unknown type
(define-extern windspinner type)
;;(define-extern *windspinner-sg* object) ;; unknown type
(define-extern mayorgears type)
;;(define-extern fishermans-boat-player-control object) ;; unknown type
;;(define-extern fishermans-boat-measurements object) ;; unknown type
(define-extern fishermans-boat-play-sounds function)
(define-extern fishermans-boat-reset-physics function)
(define-extern fishermans-boat type)
(define-extern fishermans-boat-set-dock-point function)
;;(define-extern vehicle-path object) ;; unknown type
;;(define-extern *boat-throttle-control-table* object) ;; unknown type
;;(define-extern fishermans-boat-ride-to-village1 object) ;; unknown type
;;(define-extern *fb-evilsis-sg* object) ;; unknown type
;;(define-extern *boat-turning-radius-table* object) ;; unknown type
(define-extern fishermans-boat-wave function)
(define-extern fishermans-boat-enter-dock? function)
;;(define-extern boat-stabilizer object) ;; unknown type
;;(define-extern fishermans-boat-entering-village object) ;; unknown type
;;(define-extern *fishermans-boat-constants* object) ;; unknown type
(define-extern fishermans-boat-set-throttle-by-speed function)
(define-extern fishermans-boat-post function)
(define-extern fishermans-boat-set-path-point function)
;;(define-extern fishermans-boat-docked-village object) ;; unknown type
(define-extern fishermans-boat-leave-dock? function)
(define-extern fishermans-boat-spawn-particles function)
;;(define-extern *fb-evilbro-sg* object) ;; unknown type
;;(define-extern fishermans-boat-entering-misty object) ;; unknown type
;;(define-extern *fishermans-boat-sg* object) ;; unknown type
;;(define-extern fishermans-boat-leaving-misty object) ;; unknown type
;;(define-extern vehicle-controller object) ;; unknown type
;;(define-extern fishermans-boat-docked-misty object) ;; unknown type
;;(define-extern fishermans-boat-ride-to-misty object) ;; unknown type
;;(define-extern fishermans-boat-leaving-village object) ;; unknown type
(define-extern fishermans-boat-next-path-point function)
(define-extern bird-bob-func function)
(define-extern villagea-part type)
(define-extern check-drop-level-village1-fountain-nosplash function)
(define-extern check-drop-level-village1-fountain function)
(define-extern sparticle-seagull-moon function)
(define-extern check-drop-level-sagehut function)
;;(define-extern sequenceA-village1 object) ;; unknown type
(define-extern sequenceA-village1-init-by-other function)
(define-extern sequenceA-village1-trans-hook function)
;;(define-extern sidekick-human object) ;; unknown type
;;(define-extern *sidekick-human-sg* object) ;; unknown type
;;(define-extern *tra-pontoon-sg* object) ;; unknown type
;;(define-extern *training-cam-sg* object) ;; unknown type
;;(define-extern *scarecrow-a-sg* object) ;; unknown type
(define-extern scarecrow-a type)
(define-extern tra-pontoon type)
(define-extern tra-iris-door type)
(define-extern training-cam type)
(define-extern scarecrow-b type)
;;(define-extern *scarecrow-a-break-sg* object) ;; unknown type
;;(define-extern *scarecrow-b-break-sg* object) ;; unknown type
;;(define-extern ripple-for-training-water object) ;; unknown type
;;(define-extern *scarecrow-b-sg* object) ;; unknown type
(define-extern training-water type)
;;(define-extern *tra-iris-door-sg* object) ;; unknown type
;;(define-extern *tra-pontoon-constants* object) ;; unknown type
;;(define-extern group-scarecrow-explode object) ;; unknown type
;;(define-extern group-scarecrow-hit object) ;; unknown type
;;(define-extern group-scarecrow-joint-explode object) ;; unknown type
(define-extern check-drop-level-training-spout-rain function)
(define-extern check-drop-level-training-mist function)
(define-extern tra-sparticle-seagull-moon function)
(define-extern training-part type)
(define-extern tra-bird-bob-func function)
(define-extern breakaway-left type)
(define-extern misty-cam-restore function)
(define-extern actor-wait-for-period function)
(define-extern mistycam type)
(define-extern boatpaddle type)
;;(define-extern breakaway-about-to-fall object) ;; unknown type
(define-extern mis-bone-bridge type)
;;(define-extern *breakaway-left-sg* object) ;; unknown type
(define-extern boat-fuelcell type)
;;(define-extern mis-bone-bridge-idle object) ;; unknown type
;;(define-extern *bone-platform-constants* object) ;; unknown type
;;(define-extern *mis-bone-platform-sg* object) ;; unknown type
;;(define-extern *breakaway-mid-sg* object) ;; unknown type
;;(define-extern mis-bone-bridge-hit object) ;; unknown type
(define-extern breakaway-right type)
;;(define-extern breakaway-fall object) ;; unknown type
;;(define-extern breakaway object) ;; unknown type
(define-extern breakaway-mid type)
;;(define-extern mis-bone-bridge-bump object) ;; unknown type
(define-extern bone-platform type)
;;(define-extern mis-bone-bridge-fall object) ;; unknown type
;;(define-extern boat-fuelcell-die object) ;; unknown type
(define-extern misty-battlecontroller type)
;;(define-extern *boatpaddle-sg* object) ;; unknown type
;;(define-extern boat-fuelcell-idle object) ;; unknown type
(define-extern mis-bone-bridge-event-handler function)
;;(define-extern boatpaddle-idle object) ;; unknown type
(define-extern windturbine type)
;;(define-extern breakaway-idle object) ;; unknown type
;;(define-extern windturbine-idle object) ;; unknown type
;;(define-extern *breakaway-right-sg* object) ;; unknown type
;;(define-extern boat-fuelcell-spawn object) ;; unknown type
;;(define-extern *mistycam-sg* object) ;; unknown type
;;(define-extern *mis-bone-bridge-sg* object) ;; unknown type
;;(define-extern *windturbine-sg* object) ;; unknown type
;;(define-extern task-complete object) ;; unknown type
;;(define-extern particle-select object) ;; unknown type
;;(define-extern animation-select object) ;; unknown type
;;(define-extern *rounddoor-sg* object) ;; unknown type
;;(define-extern silostep-camera object) ;; unknown type
(define-extern misty-camera-view function)
(define-extern silostep type)
;;(define-extern silostep-rise object) ;; unknown type
;;(define-extern silostep-idle object) ;; unknown type
;;(define-extern *silostep-sg* object) ;; unknown type
(define-extern rounddoor type)
;;(define-extern trigger-rise object) ;; unknown type
;;(define-extern keg-conveyor-idle object) ;; unknown type
(define-extern keg-conveyor type)
(define-extern keg-conveyor-spawn-keg function)
;;(define-extern keg-on-path object) ;; unknown type
;;(define-extern keg-conveyor-paddle-idle object) ;; unknown type
(define-extern keg-conveyor-paddle-init-by-other function)
;;(define-extern *keg-conveyor-paddle-sg* object) ;; unknown type
(define-extern keg-update-smush function)
(define-extern keg-post function)
;;(define-extern *keg-sg* object) ;; unknown type
;;(define-extern keg object) ;; unknown type
;;(define-extern keg-on-paddle object) ;; unknown type
(define-extern keg-conveyor-spawn-bouncing-keg function)
;;(define-extern keg-conveyor-paddle object) ;; unknown type
;;(define-extern keg-in-chute object) ;; unknown type
(define-extern keg-bounce-set-particle-rotation-callback function)
;;(define-extern keg-die object) ;; unknown type
;;(define-extern *keg-conveyor-keg-spawn-table* object) ;; unknown type
;;(define-extern keg-paddle-to-path object) ;; unknown type
;;(define-extern *keg-conveyor-sg* object) ;; unknown type
(define-extern keg-event-handler function)
(define-extern keg-init-by-other function)
;;(define-extern detach object) ;; unknown type
;;(define-extern ripple-for-small-mud object) ;; unknown type
(define-extern mud type)
;;(define-extern ripple-for-mud object) ;; unknown type
;;(define-extern water-anim-fade-dist object) ;; unknown type
(define-extern muse type)
;;(define-extern muse-idle object) ;; unknown type
;;(define-extern *muse-nav-enemy-info* object) ;; unknown type
(define-extern muse-check-dest-point function)
(define-extern analyze-point-on-path-segment function)
(define-extern muse-get-path-point function)
;;(define-extern point-on-path-segment-info object) ;; unknown type
;;(define-extern muse-caught object) ;; unknown type
;;(define-extern *muse-sg* object) ;; unknown type
;;(define-extern *bonelurker-sg* object) ;; unknown type
(define-extern bonelurker-push-post function)
(define-extern bonelurker type)
;;(define-extern *bonelurker-nav-enemy-info* object) ;; unknown type
(define-extern bonelurker-stunned-event-handler function)
(define-extern bonelurker-set-small-bounds-sphere function)
;;(define-extern bonelurker-stun object) ;; unknown type
(define-extern bonelurker-set-large-bounds-sphere function)
;;(define-extern quicksandlurker-missile-init-data object) ;; unknown type
;;(define-extern quicksandlurker-attack object) ;; unknown type
;;(define-extern quicksandlurker-missile-idle object) ;; unknown type
(define-extern spawn-quicksandlurker-missile function)
;;(define-extern quicksandlurker-yawn object) ;; unknown type
;;(define-extern quicksandlurker-hide object) ;; unknown type
(define-extern intersects-nav-mesh? function)
(define-extern quicksandlurker-check-hide-transition function)
;;(define-extern quicksandlurker-die object) ;; unknown type
(define-extern get-height-over-navmesh! function)
;;(define-extern *quicksandlurker-sg* object) ;; unknown type
;;(define-extern quicksandlurker-missile object) ;; unknown type
;;(define-extern quicksandlurker-victory object) ;; unknown type
(define-extern quicksandlurker-default-event-handler function)
;;(define-extern quicksandlurker-idle object) ;; unknown type
(define-extern quicksandlurker-spit function)
;;(define-extern quicksandlurker-missile-impact object) ;; unknown type
(define-extern orient-to-face-target function)
;;(define-extern quicksandlurker-popup object) ;; unknown type
(define-extern quicksandlurker-post function)
(define-extern quicksandlurker-missile-init-by-other function)
;;(define-extern quicksandlurker-wait object) ;; unknown type
;;(define-extern quicksandlurker-track object) ;; unknown type
(define-extern quicksandlurker type)
(define-extern inc-angle function)
;;(define-extern victory object) ;; unknown type
(define-extern teetertotter type)
;;(define-extern *teetertotter-sg* object) ;; unknown type
;;(define-extern teetertotter-launch object) ;; unknown type
;;(define-extern teetertotter-idle object) ;; unknown type
(define-extern target-on-end-of-teetertotter? function)
;;(define-extern teetertotter-bend object) ;; unknown type
(define-extern balloonlurker-bank type)
;;(define-extern *BALLOONLURKER-bank* object) ;; unknown type
;;(define-extern *balloonlurker-sg* object) ;; unknown type
(define-extern balloonlurker-get-path-point function)
;;(define-extern balloonlurker-pilot object) ;; unknown type
(define-extern balloonlurker-post function)
;;(define-extern balloonlurker-pilot-idle object) ;; unknown type
;;(define-extern *balloonlurker-pilot-sg* object) ;; unknown type
(define-extern balloonlurker-snap-to-path-point function)
(define-extern balloonlurker-player-impulse function)
;;(define-extern balloonlurker-mine-explode object) ;; unknown type
;;(define-extern *balloonlurker-constants* object) ;; unknown type
(define-extern balloonlurker-pilot-init-by-other function)
(define-extern balloonlurker-get-next-path-point function)
;;(define-extern balloonlurker-pilot-die object) ;; unknown type
;;(define-extern *balloonlurker-rudder-joint-home* object) ;; unknown type
;;(define-extern balloonlurker-die object) ;; unknown type
(define-extern balloonlurker-play-sounds function)
(define-extern balloonlurker-find-nearest-path-point function)
;;(define-extern balloonlurker-patrol object) ;; unknown type
(define-extern balloonlurker-event-handler function)
;;(define-extern *lurker-army* object) ;; unknown type
(define-extern army-info type)
(define-extern sequenceA type)
(define-extern sequenceC-can-trans-hook-2 function)
(define-extern sequenceC-trans-hook function)
(define-extern sequenceC type)
;;(define-extern *darkecocan-sg* object) ;; unknown type
;;(define-extern *evilsis-sg* object) ;; unknown type
(define-extern sequenceB type)
(define-extern evilsib-trans-hook-hover function)
(define-extern evilsib-trans-hook-wait function)
;;(define-extern *darkecocan-glow-sg* object) ;; unknown type
;;(define-extern *evilbro-sg* object) ;; unknown type
(define-extern sequenceC-can-trans-hook function)
;;(define-extern offset-army object) ;; unknown type
(define-extern firecanyon-part type)
;;(define-extern *assistant-firecanyon-sg* object) ;; unknown type
(define-extern assistant-firecanyon type)
(define-extern check-drop-level-sagehut2 function)
(define-extern villageb-part type)
;;(define-extern *ogreboss-village2-sg* object) ;; unknown type
;;(define-extern *med-res-rolling-sg* object) ;; unknown type
;;(define-extern *village2cam-sg* object) ;; unknown type
(define-extern pontoonten type)
(define-extern exit-chamber-dummy type)
;;(define-extern *fireboulder-sg* object) ;; unknown type
(define-extern ceilingflag type)
(define-extern ogreboss-village2-trans function)
;;(define-extern ceilingflag-idle object) ;; unknown type
(define-extern villageb-ogreboss type)
;;(define-extern *allpontoons-sg* object) ;; unknown type
(define-extern boulder3-trans-2 function)
;;(define-extern allpontoons-idle object) ;; unknown type
;;(define-extern *pontoonten-constants* object) ;; unknown type
(define-extern boulder3-trans function)
(define-extern allpontoons type)
(define-extern boulder4-trans-3 function)
;;(define-extern *exit-chamber-dummy-sg* object) ;; unknown type
;;(define-extern exit-chamber-dummy-idle object) ;; unknown type
;;(define-extern ogreboss-village2 object) ;; unknown type
;;(define-extern village2cam object) ;; unknown type
;;(define-extern *med-res-village2-sg* object) ;; unknown type
;;(define-extern *pontoonfive-sg* object) ;; unknown type
;;(define-extern pontoon-die object) ;; unknown type
(define-extern fireboulder type)
;;(define-extern fireboulder-be-clone object) ;; unknown type
(define-extern boulder2-trans-2 function)
;;(define-extern ripple-for-villageb-water object) ;; unknown type
;;(define-extern fireboulder-idle object) ;; unknown type
;;(define-extern ogreboss-village2-throw object) ;; unknown type
(define-extern boulder2-trans function)
(define-extern villageb-water type)
;;(define-extern pontoon object) ;; unknown type
;;(define-extern *ceilingflag-sg* object) ;; unknown type
(define-extern fireboulder-disable-blocking-collision function)
;;(define-extern *pontoonfive-constants* object) ;; unknown type
;;(define-extern allpontoons-be-clone object) ;; unknown type
(define-extern pontoonfive type)
(define-extern boulder1-trans function)
(define-extern boulder4-trans-2 function)
;;(define-extern *pontoonten-sg* object) ;; unknown type
;;(define-extern *med-res-rolling1-sg* object) ;; unknown type
(define-extern fireboulder-hover-stuff function)
(define-extern boulder4-trans function)
;;(define-extern ogreboss-village2-idle object) ;; unknown type
;;(define-extern exit-chamber-dummy-wait-to-appear object) ;; unknown type
;;(define-extern pontoon-hidden object) ;; unknown type
;;(define-extern fireboulder-hover object) ;; unknown type
;;(define-extern *gambler-sg* object) ;; unknown type
(define-extern gambler type)
;;(define-extern *warrior-sg* object) ;; unknown type
(define-extern warrior type)
;;(define-extern *geologist-sg* object) ;; unknown type
(define-extern geologist type)
;;(define-extern swamp-rope-idle-arm object) ;; unknown type
(define-extern swamp-rope-init-by-other function)
;;(define-extern *precursor-arm-sg* object) ;; unknown type
(define-extern tetherrock-get-info function)
;;(define-extern swamp-blimp-bye-bye object) ;; unknown type
(define-extern swamp-rope-update-bounding-spheres function)
(define-extern swamp-blimp-setup function)
(define-extern blimp-trans function)
;;(define-extern *swamp-blimp-sg* object) ;; unknown type
;;(define-extern *swamp-tetherrock-explode-sg* object) ;; unknown type
(define-extern swamp-blimp type)
;;(define-extern swamp-rope-idle-rock object) ;; unknown type
;;(define-extern swamp-tetherrock-hide object) ;; unknown type
(define-extern precursor-arm-slip function)
;;(define-extern swamp-blimp-rand-vector object) ;; unknown type
(define-extern swamp-tetherrock type)
;;(define-extern *swamp-tetherrock-sg* object) ;; unknown type
;;(define-extern tetherrock-info object) ;; unknown type
;;(define-extern precursor-arm-idle object) ;; unknown type
;;(define-extern swamp-rope-oscillator object) ;; unknown type
;;(define-extern swamp-blimp-oscillator object) ;; unknown type
(define-extern swamp-rope-trans function)
;;(define-extern precursor-arm-die object) ;; unknown type
(define-extern swamp-rope-break-code function)
;;(define-extern *SWAMP_BLIMP-bank* object) ;; unknown type
(define-extern swamp-blimp-bank type)
;;(define-extern swamp-tetherrock-die object) ;; unknown type
(define-extern bustarock function)
;;(define-extern swamp-rope-break object) ;; unknown type
;;(define-extern swamp-tetherrock-idle object) ;; unknown type
;;(define-extern swamp-blimp-idle object) ;; unknown type
(define-extern precursor-arm type)
;;(define-extern swamp-tetherrock-break object) ;; unknown type
;;(define-extern precursor-arm-sink object) ;; unknown type
(define-extern swamp-rope-post function)
;;(define-extern swamp-rope-rand-float object) ;; unknown type
;;(define-extern swamp-rope object) ;; unknown type
;;(define-extern *swamp-rope-sg* object) ;; unknown type
;;(define-extern tetherrock-break-evt object) ;; unknown type
;;(define-extern arm-sink-evt object) ;; unknown type
;;(define-extern *sage-bluehut-sg* object) ;; unknown type
(define-extern sage-bluehut type)
(define-extern assistant-bluehut type)
(define-extern flutflut-bluehut type)
;;(define-extern *flutflut-bluehut-sg* object) ;; unknown type
(define-extern assistant-levitator-blue-beam function)
;;(define-extern just-particles object) ;; unknown type
;;(define-extern *assistant-village2-sg* object) ;; unknown type
(define-extern assistant-levitator-blue-glow function)
(define-extern check-drop-level-assistant-bluehut function)
;;(define-extern *jaws-sg* object) ;; unknown type
;;(define-extern *sunken-elevator-sg* object) ;; unknown type
(define-extern sunken-elevator type)
(define-extern swampgate type)
;;(define-extern *swamp-spike-sg* object) ;; unknown type
;;(define-extern *balance-plat-sg* object) ;; unknown type
(define-extern tar-plat type)
(define-extern swampcam type)
(define-extern swamp-barrel type)
;;(define-extern *tar-plat-sg* object) ;; unknown type
(define-extern balance-plat type)
(define-extern swamp-spike-set-particle-rotation-callback function)
;;(define-extern *tar-plat-constants* object) ;; unknown type
(define-extern swamp-rock-init-by-other function)
;;(define-extern swamp-spike-gate-down object) ;; unknown type
(define-extern swamp-spike-default-event-handler function)
;;(define-extern *swampcam-sg* object) ;; unknown type
(define-extern swamp-spike-post function)
;;(define-extern balance-plat-idle object) ;; unknown type
;;(define-extern *swamp-rock-sg* object) ;; unknown type
;;(define-extern swamp-spike-gate-up object) ;; unknown type
(define-extern swamp-battlecontroller type)
(define-extern swamp-spike type)
;;(define-extern swamp-spike-idle object) ;; unknown type
;;(define-extern swamp-rock-idle object) ;; unknown type
;;(define-extern swamp-rock-break object) ;; unknown type
(define-extern swamp-rock type)
;;(define-extern grow object) ;; unknown type
;;(define-extern scale-factor object) ;; unknown type
;;(define-extern swamp-bat-slave object) ;; unknown type
;;(define-extern *swamp-bat-slave-sg* object) ;; unknown type
;;(define-extern swamp-bat-slave-swoop object) ;; unknown type
(define-extern swamp-bat-launch-slave function)
;;(define-extern swamp-bat-slave-return object) ;; unknown type
;;(define-extern swamp-bat-idle-path object) ;; unknown type
;;(define-extern swamp-bat-idle object) ;; unknown type
(define-extern swamp-bat-debug function)
;;(define-extern swamp-bat-slave-strafe object) ;; unknown type
(define-extern swamp-bat-make-path-select-plane function)
(define-extern swamp-bat-slave-post function)
(define-extern swamp-bat-check-slave-paths-match? function)
;;(define-extern swamp-bat-slave-launch object) ;; unknown type
;;(define-extern swamp-bat-slave-idle object) ;; unknown type
;;(define-extern swamp-bat-slave-die object) ;; unknown type
(define-extern swamp-bat-slave-get-new-path function)
(define-extern swamp-bat type)
(define-extern swamp-bat-setup-new-path function)
;;(define-extern swamp-bat-launch-slaves object) ;; unknown type
(define-extern swamp-bat-update-path function)
(define-extern swamp-bat-slave-init-by-other function)
(define-extern swamp-bat-slave-event-handler function)
(define-extern swamp-bat-slave-path-post function)
;;(define-extern swamp-rat-spawn object) ;; unknown type
(define-extern swamp-rat-update-wiggle-target function)
(define-extern swamp-rat-update-wiggle-params function)
(define-extern swamp-rat-default-event-handler function)
;;(define-extern *swamp-rat-nav-enemy-info* object) ;; unknown type
(define-extern swamp-rat type)
;;(define-extern *swamp-rat-sg* object) ;; unknown type
(define-extern swamp-rat-init-by-other function)
;;(define-extern pointer object) ;; unknown type
;;(define-extern *swamp-rat-nest-dummy-b-sg* object) ;; unknown type
(define-extern swamp-rat-nest-dummy-draw-spawn-joints function)
(define-extern swamp-rat-nest-pick-spawn-joint function)
;;(define-extern swamp-rat-nest-gestate object) ;; unknown type
(define-extern swamp-rat-nest-default-event-handler function)
(define-extern swamp-rat-nest-spawn-rat function)
;;(define-extern swamp-rat-nest-dummy object) ;; unknown type
;;(define-extern swamp-rat-nest-active object) ;; unknown type
;;(define-extern swamp-rat-nest-dummy-shake object) ;; unknown type
;;(define-extern swamp-rat-nest-dummy-die object) ;; unknown type
(define-extern swamp-rat-nest-check-dummy function)
;;(define-extern swamp-rat-nest-dummy-c object) ;; unknown type
(define-extern swamp-rat-nest-dummy-init-by-other function)
;;(define-extern swamp-rat-nest-dummy-idle object) ;; unknown type
;;(define-extern swamp-rat-nest-dummy-a object) ;; unknown type
;;(define-extern *swamp-rat-nest-dummy-a-sg* object) ;; unknown type
(define-extern swamp-rat-nest-dummy-event-handler function)
;;(define-extern swamp-rat-nest-victory object) ;; unknown type
(define-extern swamp-rat-nest type)
(define-extern swamp-rat-nest-dummy-take-damage function)
;;(define-extern swamp-rat-nest-dummy-hit object) ;; unknown type
;;(define-extern *swamp-rat-nest-dummy-c-sg* object) ;; unknown type
;;(define-extern swamp-rat-nest-idle object) ;; unknown type
;;(define-extern swamp-rat-nest-dummy-b object) ;; unknown type
;;(define-extern swamp-rat-nest-die object) ;; unknown type
;;(define-extern shake object) ;; unknown type
(define-extern kermit-post function)
(define-extern kermit-player-target-pos function)
(define-extern kermit-disable-tongue function)
;;(define-extern *kermit-nav-enemy-info* object) ;; unknown type
(define-extern kermit-short-hop function)
;;(define-extern kermit-patrol object) ;; unknown type
;;(define-extern kermit-idle object) ;; unknown type
(define-extern kermit-pulse-init-by-other function)
(define-extern spawn-kermit-pulse function)
(define-extern kermit-hop function)
;;(define-extern kermit-notice object) ;; unknown type
;;(define-extern kermit-pulse-impact object) ;; unknown type
(define-extern kermit-enable-tongue function)
(define-extern kermit-check-tongue-is-clear? function)
(define-extern kermit-check-to-hit-player? function)
;;(define-extern kermit-retract-tongue object) ;; unknown type
(define-extern build-matrix-from-up-and-forward-axes! function)
;;(define-extern kermit-attack object) ;; unknown type
(define-extern kermit-tongue-pos function)
;;(define-extern kermit-tongue-stuck object) ;; unknown type
(define-extern kermit-get-new-patrol-point function)
;;(define-extern joint-mod-tracker object) ;; unknown type
(define-extern kermit-get-tongue-target-callback function)
(define-extern kermit type)
;;(define-extern *kermit-sg* object) ;; unknown type
;;(define-extern kermit-give-up object) ;; unknown type
(define-extern kermit-long-hop function)
(define-extern kermit-set-nav-mesh-target function)
(define-extern kermit-get-head-dir-xz function)
;;(define-extern kermit-chase object) ;; unknown type
;;(define-extern kermit-pulse-idle object) ;; unknown type
(define-extern kermit-set-rotate-dir-to-player function)
(define-extern joint-mod-tracker-callback function)
;;(define-extern kermit-chase-new-position object) ;; unknown type
;;(define-extern kermit-pulse object) ;; unknown type
(define-extern kermit-get-head-dir function)
(define-extern kermit-simple-post function)
(define-extern kermit-set-rotate-dir-to-nav-target function)
(define-extern swamp-part type)
;;(define-extern billy-rat-salivate object) ;; unknown type
;;(define-extern *billy-sg* object) ;; unknown type
;;(define-extern billy-playing object) ;; unknown type
;;(define-extern billy-snack-eat object) ;; unknown type
;;(define-extern billy-rat object) ;; unknown type
;;(define-extern billy-snack object) ;; unknown type
;;(define-extern billy-rat-eat object) ;; unknown type
;;(define-extern billy-done object) ;; unknown type
(define-extern billy-kill-all-but-farthy function)
(define-extern rat-about-to-eat? function)
(define-extern billy-snack-init-by-other function)
;;(define-extern billy-snack-idle object) ;; unknown type
(define-extern billy-rat-init-by-other function)
(define-extern billy-game-update-wave function)
(define-extern billy-game-update function)
;;(define-extern *billy-sidekick-sg* object) ;; unknown type
;;(define-extern *farthy-snack-sg* object) ;; unknown type
;;(define-extern billy-rat-die object) ;; unknown type
;;(define-extern eat object) ;; unknown type
;;(define-extern billy-rat-needs-destination object) ;; unknown type
;;(define-extern cavecrystal-light object) ;; unknown type
;;(define-extern *cavecrystal-engine* object) ;; unknown type
(define-extern cavecrystal-light-control type)
(define-extern cavecrystal-light-control-default-callback function)
(define-extern cavecrystal-light-control-caveelevator-callback function)
;;(define-extern *cavespatulatwo-sg* object) ;; unknown type
;;(define-extern maincavecam object) ;; unknown type
;;(define-extern *maincavecam-sg* object) ;; unknown type
;;(define-extern caveelevator-cycle-active object) ;; unknown type
;;(define-extern caveelevator-one-way-travel-to-end object) ;; unknown type
(define-extern cavecrusher type)
(define-extern caveflamepots type)
;;(define-extern *cavetrapdoor-sg* object) ;; unknown type
(define-extern caveelevator-joint-callback function)
;;(define-extern *cavecrusher-sg* object) ;; unknown type
;;(define-extern caveelevator-one-way-idle-end object) ;; unknown type
;;(define-extern ripple-for-cave-water object) ;; unknown type
(define-extern cavespatulatwo type)
;;(define-extern caveelevator-one-way-idle-start object) ;; unknown type
;;(define-extern caveflamepots-active object) ;; unknown type
;;(define-extern cavespatula-idle object) ;; unknown type
;;(define-extern *caveelevator-sg* object) ;; unknown type
;;(define-extern *cavespatula-darkcave-sg* object) ;; unknown type
;;(define-extern *cavespatula-sg* object) ;; unknown type
;;(define-extern caveelevator-one-way-travel-to-start object) ;; unknown type
;;(define-extern cavecrusher-idle object) ;; unknown type
;;(define-extern cavespatulatwo-idle object) ;; unknown type
;;(define-extern darkcave-part object) ;; unknown type
(define-extern maincave-part type)
(define-extern check-drop-level-maincave-drip function)
;;(define-extern spiderwebs-bounce object) ;; unknown type
(define-extern spiderwebs type)
;;(define-extern spiderwebs-idle object) ;; unknown type
(define-extern spiderwebs-default-event-handler function)
;;(define-extern *spiderwebs-sg* object) ;; unknown type
;;(define-extern *spider-jump-mods* object) ;; unknown type
;;(define-extern *dark-crystal-flash-delays* object) ;; unknown type
;;(define-extern dark-crystal-idle object) ;; unknown type
;;(define-extern *dark-crystal-explode-sg* object) ;; unknown type
;;(define-extern *dark-crystal-exploder-params* object) ;; unknown type
;;(define-extern dark-crystal-activate object) ;; unknown type
;;(define-extern dark-crystal-explode object) ;; unknown type
;;(define-extern *dark-crystal-sg* object) ;; unknown type
;;(define-extern dark-crystal-spawn-fuel-cell object) ;; unknown type
;;(define-extern extra-radius object) ;; unknown type
;;(define-extern *baby-spider-nav-enemy-info-for-cave-trap* object) ;; unknown type
;;(define-extern baby-spider-die-fast object) ;; unknown type
;;(define-extern *baby-spider-nav-enemy-info* object) ;; unknown type
;;(define-extern *baby-spider-sg* object) ;; unknown type
;;(define-extern baby-spider-resume object) ;; unknown type
;;(define-extern baby-spider-spawn-params object) ;; unknown type
;;(define-extern baby-spider-hatching object) ;; unknown type
(define-extern baby-spider-init-by-other function)
(define-extern baby-spider-default-event-handler function)
(define-extern cave-trap type)
;;(define-extern mother-spider-thread object) ;; unknown type
;;(define-extern mother-spider-history-array object) ;; unknown type
;;(define-extern mother-spider-leg object) ;; unknown type
;;(define-extern mother-spider-leg-info object) ;; unknown type
;;(define-extern mother-spider-history object) ;; unknown type
;;(define-extern mother-spider-egg-falling object) ;; unknown type
;;(define-extern mother-spider-egg-die-exit object) ;; unknown type
;;(define-extern mother-spider-egg-hatch object) ;; unknown type
;;(define-extern mother-spider-egg object) ;; unknown type
;;(define-extern mother-spider-egg-die-while-falling object) ;; unknown type
(define-extern mother-spider-egg-init-by-other function)
;;(define-extern mother-spider-egg-on-ground object) ;; unknown type
;;(define-extern *mother-spider-egg-unbroken-sg* object) ;; unknown type
;;(define-extern mother-spider-egg-die object) ;; unknown type
;;(define-extern *mother-spider-egg-broken-sg* object) ;; unknown type
(define-extern mother-spider-proj-update-velocity function)
;;(define-extern mother-spider-proj object) ;; unknown type
;;(define-extern mother-spider-hit-while-tracking object) ;; unknown type
;;(define-extern wait-for-children object) ;; unknown type
;;(define-extern mother-spider-spit object) ;; unknown type
(define-extern mother-spider-default-event-handler function)
;;(define-extern mother-spider-stop-traveling object) ;; unknown type
;;(define-extern mother-spider-tracking object) ;; unknown type
;;(define-extern mother-spider-die-wait-for-children object) ;; unknown type
;;(define-extern mother-spider-hit-while-birthing object) ;; unknown type
;;(define-extern mother-spider-birth-baby object) ;; unknown type
;;(define-extern mother-spider-die-from-uppercut object) ;; unknown type
;;(define-extern mother-spider-idle object) ;; unknown type
;;(define-extern mother-spider-traveling object) ;; unknown type
(define-extern mother-spider-death-event-handler function)
;;(define-extern mother-spider-leg-flying object) ;; unknown type
(define-extern mother-spider-leg-init-by-other function)
(define-extern mother-spider-full-joint-callback function)
;;(define-extern *mother-spider-sg* object) ;; unknown type
;;(define-extern *mother-spider-leg-sg* object) ;; unknown type
;;(define-extern mother-spider-die object) ;; unknown type
;;(define-extern *mother-spider-threads* object) ;; unknown type
;;(define-extern mother-spider-birthing object) ;; unknown type
;;(define-extern *mother-spider-leg-infos* object) ;; unknown type
;;(define-extern gnawer-wait-to-run object) ;; unknown type
;;(define-extern *gnawer-sg* object) ;; unknown type
;;(define-extern *gnawer-segment-infos* object) ;; unknown type
(define-extern gnawer type)
;;(define-extern gnawer-falling-segment object) ;; unknown type
(define-extern gnawer-falling-segment-init-by-other function)
;;(define-extern gnawer-retreat-into-post object) ;; unknown type
;;(define-extern gnawer-route object) ;; unknown type
;;(define-extern gnawer-segment object) ;; unknown type
;;(define-extern gnawer-die object) ;; unknown type
;;(define-extern *gnawer-segment-sg* object) ;; unknown type
;;(define-extern gnawer-chewing-on-post object) ;; unknown type
;;(define-extern gnawer-run object) ;; unknown type
;;(define-extern gnawer-give-fuel-cell object) ;; unknown type
;;(define-extern gnawer-put-items-at-dest object) ;; unknown type
(define-extern gnawer-joint-callback function)
;;(define-extern gnawer-dying-give-pickups object) ;; unknown type
;;(define-extern gnawer-segment-info object) ;; unknown type
;;(define-extern driller-lurker-idle-drilling object) ;; unknown type
;;(define-extern driller-lurker-patrol object) ;; unknown type
;;(define-extern *driller-lurker-sg* object) ;; unknown type
;;(define-extern driller-lurker-jammed-standing object) ;; unknown type
(define-extern driller-lurker-default-event-handler function)
;;(define-extern driller-lurker-debug-play-anims object) ;; unknown type
;;(define-extern driller-lurker-die object) ;; unknown type
;;(define-extern *driller-lurker-shadow-control* object) ;; unknown type
;;(define-extern driller-lurker-patrol-pause object) ;; unknown type
(define-extern driller-lurker type)
;;(define-extern driller-lurker-attack object) ;; unknown type
;;(define-extern driller-lurker-chase object) ;; unknown type
(define-extern sunken-part type)
;;(define-extern target-tube object) ;; unknown type
;;(define-extern *TUBE-bank* object) ;; unknown type
;;(define-extern *tube-hit-mods* object) ;; unknown type
;;(define-extern tube-info object) ;; unknown type
;;(define-extern *tube-surface* object) ;; unknown type
(define-extern tube-thrust function)
;;(define-extern target-tube-hit object) ;; unknown type
(define-extern slide-control type)
(define-extern target-tube-turn-anim function)
;;(define-extern *tube-jump-mods* object) ;; unknown type
;;(define-extern target-tube-death object) ;; unknown type
;;(define-extern target-tube-jump object) ;; unknown type
;;(define-extern *tube-mods* object) ;; unknown type
(define-extern tube-sounds function)
(define-extern tube-bank type)
(define-extern distance-from-tangent function)
(define-extern target-tube-post function)
(define-extern find-target-point function)
;;(define-extern slide-control-watch object) ;; unknown type
;;(define-extern slide-control-ride object) ;; unknown type
;;(define-extern *side-to-side-plat-sg* object) ;; unknown type
;;(define-extern sunkencam object) ;; unknown type
;;(define-extern water-vol-deadly object) ;; unknown type
;;(define-extern *seaweed-sg* object) ;; unknown type
;;(define-extern seaweed-idle object) ;; unknown type
;;(define-extern *sunkencam-sg* object) ;; unknown type
(define-extern seaweed type)
(define-extern side-to-side-plat type)
;;(define-extern *seaweed* object) ;; unknown type
;;(define-extern shover-idle object) ;; unknown type
(define-extern shover type)
;;(define-extern *shover-sg* object) ;; unknown type
;;(define-extern *shover* object) ;; unknown type
;;(define-extern collision-mesh-id object) ;; unknown type
;;(define-extern square-platform-lowering object) ;; unknown type
(define-extern square-platform-master type)
(define-extern square-platform type)
;;(define-extern *square-platform-sg* object) ;; unknown type
(define-extern square-platform-button type)
;;(define-extern square-platform-lowered object) ;; unknown type
;;(define-extern square-platform-master-idle object) ;; unknown type
;;(define-extern square-platform-master-activate object) ;; unknown type
;;(define-extern square-platform-raised object) ;; unknown type
;;(define-extern square-platform-rising object) ;; unknown type
;;(define-extern sun-iris-door-closing object) ;; unknown type
(define-extern sun-iris-door type)
;;(define-extern sun-iris-door-opening object) ;; unknown type
;;(define-extern sun-iris-door-closed object) ;; unknown type
;;(define-extern sun-iris-door-open object) ;; unknown type
;;(define-extern *sun-iris-door-sg* object) ;; unknown type
(define-extern sun-iris-door-init-by-other function)
;;(define-extern proximity object) ;; unknown type
;;(define-extern orbit-plat-bottom-idle object) ;; unknown type
;;(define-extern orbit-plat-idle object) ;; unknown type
;;(define-extern orbit-plat-reset object) ;; unknown type
;;(define-extern orbit-plat-riding object) ;; unknown type
(define-extern orbit-plat type)
(define-extern orbit-plat-bottom-init-by-other function)
;;(define-extern *orbit-plat-bottom-sg* object) ;; unknown type
;;(define-extern orbit-plat-wait-for-other object) ;; unknown type
;;(define-extern orbit-plat-still object) ;; unknown type
;;(define-extern orbit-plat-rotating object) ;; unknown type
;;(define-extern *orbit-plat-sg* object) ;; unknown type
(define-extern get-nav-point! function)
(define-extern get-rotate-point! function)
;;(define-extern orbit-plat-bottom object) ;; unknown type
;;(define-extern query-reset object) ;; unknown type
;;(define-extern wedge-plat-idle object) ;; unknown type
(define-extern wedge-plat type)
;;(define-extern wedge-plat-tip object) ;; unknown type
;;(define-extern wedge-plat-outer-tip object) ;; unknown type
(define-extern wedge-plat-master type)
;;(define-extern wedge-plat-outer-idle object) ;; unknown type
(define-extern wedge-plat-outer type)
;;(define-extern wedge-plat-master-idle object) ;; unknown type
;;(define-extern *wedge-plat-outer-sg* object) ;; unknown type
;;(define-extern *wedge-plat-sg* object) ;; unknown type
;;(define-extern wall-plat-sync-idle object) ;; unknown type
;;(define-extern wall-plat-retracting object) ;; unknown type
;;(define-extern *wall-plat-sg* object) ;; unknown type
;;(define-extern wall-plat-extending object) ;; unknown type
(define-extern wall-plat type)
;;(define-extern wall-plat-extended object) ;; unknown type
;;(define-extern wall-plat-retracted object) ;; unknown type
;;(define-extern tunemeters object) ;; unknown type
;;(define-extern qbert-plat-master-do-door object) ;; unknown type
;;(define-extern qbert-plat-master-wait-for-door object) ;; unknown type
(define-extern qbert-plat-event-handler function)
;;(define-extern qbert-plat-on object) ;; unknown type
;;(define-extern *qbert-plat-on-sg* object) ;; unknown type
;;(define-extern *qbert-plat-constants* object) ;; unknown type
;;(define-extern qbert-plat-master-idle object) ;; unknown type
;;(define-extern *qbert-plat-sg* object) ;; unknown type
(define-extern qbert-plat-on-init-by-other function)
;;(define-extern qbert-plat-on-mimic object) ;; unknown type
(define-extern qbert-plat-master type)
(define-extern qbert-plat type)
;;(define-extern qbert-plat-on-die object) ;; unknown type
;;(define-extern qbert-plat-wait-for-master object) ;; unknown type
(define-extern steam-cap type)
;;(define-extern steam-cap-idle object) ;; unknown type
;;(define-extern *steam-cap-sg* object) ;; unknown type
;;(define-extern steam-cap-control-pt object) ;; unknown type
;;(define-extern exit-chamber-charger-puzzle object) ;; unknown type
;;(define-extern blue-eco-charger-close object) ;; unknown type
;;(define-extern *blue-eco-charger-sg* object) ;; unknown type
;;(define-extern blue-eco-charger-orb-idle object) ;; unknown type
;;(define-extern blue-eco-charger-open object) ;; unknown type
;;(define-extern exit-chamber-items object) ;; unknown type
(define-extern blue-eco-charger type)
;;(define-extern blue-eco-charger-stuck-open object) ;; unknown type
;;(define-extern exit-chamber-charger-puzzle-beaten object) ;; unknown type
;;(define-extern exit-chamber-lower object) ;; unknown type
;;(define-extern blue-eco-charger-orb-active object) ;; unknown type
(define-extern blue-eco-charger-orb-init-by-other function)
;;(define-extern blue-eco-charger-idle object) ;; unknown type
;;(define-extern *exit-chamber-sg* object) ;; unknown type
;;(define-extern exit-chamber-button object) ;; unknown type
(define-extern exit-chamber-button-init-by-other function)
(define-extern exit-chamber type)
;;(define-extern *blue-eco-charger-orb-sg* object) ;; unknown type
;;(define-extern exit-chamber-idle-in-sunken object) ;; unknown type
;;(define-extern exit-chamber-rise object) ;; unknown type
;;(define-extern exit-chamber-idle-in-village object) ;; unknown type
;;(define-extern blue-eco-charger-orb object) ;; unknown type
;;(define-extern floating-launcher-idle object) ;; unknown type
;;(define-extern floating-launcher-ready object) ;; unknown type
;;(define-extern floating-launcher-lowering object) ;; unknown type
;;(define-extern *floating-launcher-sg* object) ;; unknown type
(define-extern floating-launcher type)
;;(define-extern trigger-height object) ;; unknown type
;;(define-extern ripple-for-sunken-water object) ;; unknown type
(define-extern sunken-water type)
(define-extern whirlpool type)
;;(define-extern whirlpool-idle object) ;; unknown type
;;(define-extern *whirlpool-sg* object) ;; unknown type
;;(define-extern sunken-pipegame-prize object) ;; unknown type
;;(define-extern sunken-pipegame-idle object) ;; unknown type
;;(define-extern sunken-pipegame-start-up object) ;; unknown type
;;(define-extern sunken-pipegame-button object) ;; unknown type
(define-extern sunken-pipegame type)
;;(define-extern sunken-pipegame-beat-challenge object) ;; unknown type
;;(define-extern sunken-pipegame-begin-play object) ;; unknown type
;;(define-extern sunken-pipegame-end-play object) ;; unknown type
(define-extern sunken-pipegame-button-init-by-other function)
(define-extern bully-broken-cage-init-by-other function)
;;(define-extern bully-notice object) ;; unknown type
;;(define-extern bully-die object) ;; unknown type
;;(define-extern bully-broken-cage-explode object) ;; unknown type
;;(define-extern bully-stop-spinning object) ;; unknown type
(define-extern bully-default-event-handler function)
;;(define-extern bully-start-spinning object) ;; unknown type
;;(define-extern *bully-broken-cage-sg* object) ;; unknown type
(define-extern bully type)
;;(define-extern *bully-shadow-control* object) ;; unknown type
;;(define-extern bully-idle object) ;; unknown type
;;(define-extern *bully-sg* object) ;; unknown type
(define-extern bully-post function)
;;(define-extern bully-broken-cage object) ;; unknown type
;;(define-extern double-lurker-top-on-shoulders-die object) ;; unknown type
;;(define-extern double-lurker-waiting-to-die object) ;; unknown type
;;(define-extern double-lurker-knocked-back object) ;; unknown type
;;(define-extern double-lurker-top object) ;; unknown type
;;(define-extern *double-lurker-top-sg* object) ;; unknown type
(define-extern double-lurker-top-init-by-other function)
;;(define-extern *double-lurker-sg* object) ;; unknown type
;;(define-extern double-lurker-buddy-was-hit object) ;; unknown type
;;(define-extern *double-lurker-nav-enemy-info* object) ;; unknown type
;;(define-extern double-lurker-resume object) ;; unknown type
;;(define-extern double-lurker-show-anims object) ;; unknown type
;;(define-extern double-lurker-both-knocked-back object) ;; unknown type
;;(define-extern double-lurker-top-resume object) ;; unknown type
(define-extern double-lurker type)
;;(define-extern *double-lurker-top-nav-enemy-info* object) ;; unknown type
;;(define-extern double-lurker-top-on-shoulders object) ;; unknown type
;;(define-extern *double-lurker-when-both-nav-enemy-info* object) ;; unknown type
;;(define-extern double-lurker-top-knocked-down object) ;; unknown type
(define-extern double-lurker-default-event-handler function)
;;(define-extern double-lurker-break-apart object) ;; unknown type
;;(define-extern helix-button-startup object) ;; unknown type
;;(define-extern *helix-slide-door-sg* object) ;; unknown type
;;(define-extern helix-button-quick-activate object) ;; unknown type
(define-extern helix-water type)
;;(define-extern helix-slide-door-idle-closed object) ;; unknown type
;;(define-extern helix-button-idle-down object) ;; unknown type
;;(define-extern helix-water-idle object) ;; unknown type
(define-extern helix-slide-door type)
;;(define-extern helix-button-idle-up object) ;; unknown type
(define-extern helix-button type)
;;(define-extern helix-slide-door-close object) ;; unknown type
;;(define-extern helix-dark-eco object) ;; unknown type
;;(define-extern helix-water-activated object) ;; unknown type
;;(define-extern *helix-button-sg* object) ;; unknown type
;;(define-extern helix-slide-door-idle-open object) ;; unknown type
;;(define-extern helix-button-activate object) ;; unknown type
;;(define-extern *helix-button* object) ;; unknown type
;;(define-extern *helix-slide-door* object) ;; unknown type
;;(define-extern *helix-water* object) ;; unknown type
(define-extern puffer-default-event-handler function)
;;(define-extern puffer-die object) ;; unknown type
(define-extern puffer-post function)
;;(define-extern *puffer-mean-sg* object) ;; unknown type
;;(define-extern pick-patrol-point-away-from-buddy-work object) ;; unknown type
;;(define-extern *puffer-sg* object) ;; unknown type
;;(define-extern puffer-attack object) ;; unknown type
;;(define-extern puffer-patrol object) ;; unknown type
;;(define-extern puffer-idle object) ;; unknown type
(define-extern puffer type)
(define-extern sunkenfisha type)
(define-extern sunkenfisha-init-by-other function)
;;(define-extern *sunkenfisha-red-yellow-sg* object) ;; unknown type
;;(define-extern sunkenfisha-idle object) ;; unknown type
;;(define-extern *sunkenfisha-yellow-eye-sg* object) ;; unknown type
;;(define-extern *sunkenfisha-yellow-blue-sg* object) ;; unknown type
;;(define-extern path-max-offset object) ;; unknown type
;;(define-extern path-trans-offset object) ;; unknown type
(define-extern gorge-in-front function)
(define-extern happy-plant type)
;;(define-extern rolling-start object) ;; unknown type
(define-extern gorge-start-draw-time function)
(define-extern pusher type)
(define-extern rolling-start-init-by-other function)
(define-extern race-time-copy! function)
;;(define-extern dark-plant-idle object) ;; unknown type
(define-extern dark-plant-has-bad-neighbor function)
(define-extern dark-plants-all-done function)
;;(define-extern gorge-start-race-finished object) ;; unknown type
;;(define-extern *dark-plant-sg* object) ;; unknown type
(define-extern gorge-behind function)
;;(define-extern *rollingcam-sg* object) ;; unknown type
;;(define-extern gorge-abort-idle object) ;; unknown type
(define-extern race-time-save function)
(define-extern gorge-finish-init-by-other function)
(define-extern gorge-pusher type)
;;(define-extern *happy-plant-sg* object) ;; unknown type
;;(define-extern dark-plant-death object) ;; unknown type
(define-extern race-time-read function)
(define-extern gorge-start-launch-start-banner function)
;;(define-extern gorge-start-idle object) ;; unknown type
;;(define-extern happy-plant-opening object) ;; unknown type
;;(define-extern gorge-pusher-idle object) ;; unknown type
;;(define-extern race-time object) ;; unknown type
(define-extern rollingcam type)
(define-extern race-time->seconds function)
(define-extern dark-plant-trans function)
;;(define-extern ripple-for-rolling-water object) ;; unknown type
;;(define-extern gorge-finish object) ;; unknown type
(define-extern gorge-trans function)
;;(define-extern rolling-start-whole object) ;; unknown type
(define-extern dark-plant-check-target function)
;;(define-extern rolling-start-break object) ;; unknown type
;;(define-extern happy-plant-opened object) ;; unknown type
;;(define-extern gorge-start-racing object) ;; unknown type
;;(define-extern pusher-base object) ;; unknown type
;;(define-extern *rolling-start-whole-sg* object) ;; unknown type
;;(define-extern happy-plant-init object) ;; unknown type
(define-extern race-time->string function)
(define-extern gorge-abort-init-by-other function)
;;(define-extern gorge-finish-idle object) ;; unknown type
;;(define-extern pusher-idle object) ;; unknown type
;;(define-extern gorge-start-race-aborted object) ;; unknown type
;;(define-extern gorge-abort object) ;; unknown type
;;(define-extern *pusher-sg* object) ;; unknown type
;;(define-extern rolling-part object) ;; unknown type
(define-extern rolling-water type)
;;(define-extern dark-plant-startup object) ;; unknown type
;;(define-extern gorge-start-ready object) ;; unknown type
(define-extern gorge-init function)
(define-extern seconds->race-time function)
(define-extern pusher-base-init function)
;;(define-extern gorge object) ;; unknown type
(define-extern dark-plant-randomize function)
;;(define-extern dark-plant-sprout object) ;; unknown type
(define-extern race-time-less-than function)
(define-extern dark-plant type)
(define-extern gorge-start type)
;;(define-extern dark-plant-gone object) ;; unknown type
;;(define-extern *rolling-start-broken-sg* object) ;; unknown type
;;(define-extern finished object) ;; unknown type
;;(define-extern min-frame object) ;; unknown type
;;(define-extern break object) ;; unknown type
;;(define-extern unbreak object) ;; unknown type
;;(define-extern aborted object) ;; unknown type
;;(define-extern break-and-die object) ;; unknown type
;;(define-extern max-frame object) ;; unknown type
(define-extern lightning-mole type)
;;(define-extern lightning-mole-dive object) ;; unknown type
;;(define-extern *lightning-mole-nav-enemy-info* object) ;; unknown type
(define-extern find-adjacent-bounds-one function)
;;(define-extern fleeing-nav-enemy-debug object) ;; unknown type
;;(define-extern *lightning-mole-hole* object) ;; unknown type
;;(define-extern lightning-mole-gone object) ;; unknown type
(define-extern lightning-mole-hole-post function)
;;(define-extern fleeing-nav-enemy-info object) ;; unknown type
(define-extern lightning-mole-task-complete? function)
(define-extern check-drop-level-rolling-dirt function)
(define-extern find-adjacent-bounds function)
;;(define-extern peeper-up object) ;; unknown type
;;(define-extern lightning-mole-debug-run object) ;; unknown type
(define-extern fleeing-nav-enemy-adjust-nav-info function)
(define-extern fleeing-nav-enemy-adjust-travel function)
(define-extern fleeing-nav-enemy-chase-post function)
;;(define-extern lightning-mole-yelp object) ;; unknown type
(define-extern lightning-mole-run-code function)
;;(define-extern lightning-mole-head-for-hole object) ;; unknown type
;;(define-extern *lightning-mole-sg* object) ;; unknown type
;;(define-extern peeper-hide object) ;; unknown type
;;(define-extern peeper-down object) ;; unknown type
(define-extern check-drop-level-rolling-dirt-finish function)
;;(define-extern peeper-wait object) ;; unknown type
(define-extern fleeing-nav-enemy-chase-post-func function)
;;(define-extern lightning-mole-debug-blend object) ;; unknown type
;;(define-extern lightning-mole-hiding object) ;; unknown type
(define-extern peeper type)
(define-extern fleeing-nav-enemy-clip-travel function)
;;(define-extern fleeing-nav-enemy object) ;; unknown type
;;(define-extern robber-flee object) ;; unknown type
;;(define-extern robber-die object) ;; unknown type
(define-extern robber-find-ground function)
;;(define-extern robber-initial object) ;; unknown type
;;(define-extern *robber-sg* object) ;; unknown type
(define-extern robber-rotate function)
;;(define-extern fuel-cell-spline-slider object) ;; unknown type
(define-extern robber-event-handler function)
;;(define-extern robber-got-away object) ;; unknown type
(define-extern fuel-cell-init-as-spline-slider function)
;;(define-extern robber-tired object) ;; unknown type
(define-extern robber-calc-speed function)
;;(define-extern robber-initial-notice object) ;; unknown type
;;(define-extern robber-idle object) ;; unknown type
(define-extern robber-move function)
(define-extern robber type)
(define-extern robber-task-complete? function)
;;(define-extern robber-debug object) ;; unknown type
(define-extern robber-calc-anim-speed function)
;;(define-extern robber-dead object) ;; unknown type
;;(define-extern initial-spline-pos object) ;; unknown type
;;(define-extern race-ring-active object) ;; unknown type
(define-extern race-ring type)
(define-extern race-ring-set-particle-rotation-callback function)
(define-extern last-ring? function)
(define-extern race-ring-blue-set-particle-rotation-callback function)
(define-extern first-ring? function)
;;(define-extern race-ring-idle object) ;; unknown type
;;(define-extern *race-ring-sg* object) ;; unknown type
;;(define-extern race-ring-wait object) ;; unknown type
(define-extern balloon type)
;;(define-extern balloon-idle object) ;; unknown type
;;(define-extern *crate-darkeco-cluster-sg* object) ;; unknown type
;;(define-extern spike-down object) ;; unknown type
(define-extern spike type)
;;(define-extern spike-up object) ;; unknown type
;;(define-extern spike-idle object) ;; unknown type
;;(define-extern balloon-popping object) ;; unknown type
(define-extern crate-darkeco-cluster type)
;;(define-extern *spike-sg* object) ;; unknown type
;;(define-extern go-spike-up object) ;; unknown type
(define-extern ogre-part type)
;;(define-extern ogreboss-idle object) ;; unknown type
;;(define-extern *ogreboss-shoot-boulder-sg* object) ;; unknown type
(define-extern ogreboss-shoot-boulder function)
;;(define-extern ogreboss-stage1 object) ;; unknown type
;;(define-extern ogreboss-stage3-hit object) ;; unknown type
(define-extern ogreboss-super-boulder-event-handler function)
(define-extern ogreboss-move-near function)
;;(define-extern ogreboss-super-boulder-throw object) ;; unknown type
(define-extern ogreboss-update-shuffling function)
;;(define-extern *ogreboss-super-boulder-sg* object) ;; unknown type
;;(define-extern ogreboss-missile-idle object) ;; unknown type
;;(define-extern ogreboss-super-boulder-die object) ;; unknown type
(define-extern ogreboss-debug-adjust-difficulty function)
(define-extern ogreboss-roll-boulder function)
(define-extern ogreboss-super-boulder-play-hit-anim function)
(define-extern ogreboss-inc-try-count function)
;;(define-extern ogreboss-stage2 object) ;; unknown type
(define-extern ogreboss-post function)
;;(define-extern *ogreboss-shoot-boulder-break-sg* object) ;; unknown type
(define-extern ogreboss-super-boulder-impact-effect function)
(define-extern ogreboss-pick-target function)
(define-extern ogreboss-get-targets function)
(define-extern ogreboss-move-far function)
;;(define-extern ogreboss-missile object) ;; unknown type
;;(define-extern ogreboss-wait-for-player object) ;; unknown type
;;(define-extern *ogreboss-bounce-boulder-sg* object) ;; unknown type
;;(define-extern ogreboss-stage3-throw object) ;; unknown type
;;(define-extern *ogreboss-column-sg* object) ;; unknown type
;;(define-extern ogreboss-super-boulder-hit object) ;; unknown type
(define-extern ogreboss-spawn-super-boulder function)
;;(define-extern ogreboss-die object) ;; unknown type
;;(define-extern ogreboss-super-boulder-land object) ;; unknown type
;;(define-extern *ogreboss-sg* object) ;; unknown type
(define-extern ogreboss-player-inside-range? function)
;;(define-extern *ogreboss-missile-shadow-control* object) ;; unknown type
(define-extern ogreboss-bounce-boulder-init-by-other function)
(define-extern ogreboss-update-super-boulder function)
(define-extern ogreboss-super-boulder-init-by-other function)
(define-extern ogreboss-reset-camera function)
(define-extern ogreboss-trigger-steps function)
(define-extern ogreboss-bounce-boulder-event-handler function)
(define-extern ogreboss-blend-hit-anim function)
(define-extern ogreboss-missile-init-by-other function)
;;(define-extern ogreboss-super-boulder-roll object) ;; unknown type
(define-extern ogreboss-set-stage2-camera function)
(define-extern ogreboss-attack-event-handler function)
(define-extern ogreboss-missile-scale-explosion function)
(define-extern ogreboss-submerge function)
;;(define-extern ogreboss-super-boulder-idle object) ;; unknown type
(define-extern ogreboss-set-stage1-camera function)
(define-extern ogreboss-emerge function)
;;(define-extern ogreboss-dead object) ;; unknown type
;;(define-extern ogreboss-intro object) ;; unknown type
;;(define-extern *ogreboss-cam-sg* object) ;; unknown type
;;(define-extern ogreboss-stage3-shuffle object) ;; unknown type
;;(define-extern ogreboss-missile-impact object) ;; unknown type
(define-extern ogreboss-rock-explosion-effect function)
;;(define-extern *ogreboss-shadow-control* object) ;; unknown type
;;(define-extern ogreboss-super-boulder-killed-player object) ;; unknown type
;;(define-extern ogreboss-bounce-boulder-idle object) ;; unknown type
;;(define-extern ogreboss-missile-init-data object) ;; unknown type
;;(define-extern ogreboss-missile-seek object) ;; unknown type
(define-extern ogreboss-idle-loop function)
;;(define-extern ogreboss-bounce-boulder object) ;; unknown type
;;(define-extern go-hit object) ;; unknown type
;;(define-extern submerge1 object) ;; unknown type
;;(define-extern boulder object) ;; unknown type
;;(define-extern next-stage object) ;; unknown type
;;(define-extern submerge2 object) ;; unknown type
;;(define-extern emerge1 object) ;; unknown type
;;(define-extern emerge2 object) ;; unknown type
;;(define-extern target-actor object) ;; unknown type
;;(define-extern go-die object) ;; unknown type
;;(define-extern grow-faster object) ;; unknown type
;;(define-extern go-throw object) ;; unknown type
;;(define-extern break-no-damage object) ;; unknown type
;;(define-extern lava-ripple object) ;; unknown type
;;(define-extern speedup object) ;; unknown type
;;(define-extern *ogreboss* object) ;; unknown type
;;(define-extern *ogre-step-a-sg* object) ;; unknown type
;;(define-extern *shortcut-boulder-broken-sg* object) ;; unknown type
(define-extern ogre-bridge type)
;;(define-extern *ogre-bridgeend-sg* object) ;; unknown type
;;(define-extern ripple-for-ogre-lava object) ;; unknown type
;;(define-extern shortcut-boulder-idle object) ;; unknown type
;;(define-extern ogre-bridge-activated object) ;; unknown type
(define-extern tntbarrel type)
;;(define-extern ogre-bridgeend-idle object) ;; unknown type
(define-extern ogre-step-a type)
;;(define-extern *ogre-step-c-sg* object) ;; unknown type
(define-extern ogre-step-b type)
;;(define-extern ogre-bridge-activate object) ;; unknown type
;;(define-extern ogre-step object) ;; unknown type
;;(define-extern *ogre-bridge-joint-array* object) ;; unknown type
;;(define-extern *med-res-snow-sg* object) ;; unknown type
(define-extern ogre-step-c type)
(define-extern ogre-bridge-update-joints function)
(define-extern ogre-step-d type)
(define-extern shortcut-boulder type)
;;(define-extern *ogre-isle-b-sg* object) ;; unknown type
;;(define-extern *ogre-bridge-sg* object) ;; unknown type
(define-extern ogre-isle-b type)
;;(define-extern shortcut-boulder-break object) ;; unknown type
(define-extern ogre-isle-c type)
;;(define-extern *ogre-isle-a-sg* object) ;; unknown type
(define-extern ogre-isle-d type)
;;(define-extern ogre-bridge-idle object) ;; unknown type
;;(define-extern *ogre-isle-d-sg* object) ;; unknown type
;;(define-extern *shortcut-boulder-whole-sg* object) ;; unknown type
;;(define-extern *ogre-isle-constants* object) ;; unknown type
;;(define-extern *ogre-step-b-sg* object) ;; unknown type
;;(define-extern ogre-isle object) ;; unknown type
(define-extern ogre-bridgeend type)
;;(define-extern ogre-bridge-break object) ;; unknown type
;;(define-extern *tntbarrel-sg* object) ;; unknown type
;;(define-extern *ogre-isle-c-sg* object) ;; unknown type
;;(define-extern ogre-plat object) ;; unknown type
(define-extern ogre-lava type)
;;(define-extern *ogre-step-constants* object) ;; unknown type
;;(define-extern splash object) ;; unknown type
;;(define-extern die-big object) ;; unknown type
;;(define-extern flying-lurker-fly object) ;; unknown type
;;(define-extern flying-lurker-die object) ;; unknown type
;;(define-extern *plunger-lurker-sg* object) ;; unknown type
(define-extern flying-lurker-move function)
;;(define-extern flying-lurker-idle object) ;; unknown type
(define-extern flying-lurker-calc-anim-speed function)
(define-extern flying-lurker-handler function)
(define-extern flying-lurker-play-intro function)
;;(define-extern plunger-lurker-die object) ;; unknown type
;;(define-extern *ogrecam-sg* object) ;; unknown type
;;(define-extern flying-lurker-sleep object) ;; unknown type
(define-extern plunger-lurker type)
;;(define-extern flying-lurker-clone object) ;; unknown type
(define-extern flying-lurker-rotate function)
;;(define-extern *flying-lurker-sg* object) ;; unknown type
;;(define-extern flying-lurker-start object) ;; unknown type
(define-extern flying-lurker-calc-speed function)
(define-extern flying-lurker-inc-try-count function)
;;(define-extern plunger-lurker-flee object) ;; unknown type
(define-extern first? function)
;;(define-extern plunger-lurker-plunge object) ;; unknown type
(define-extern flying-lurker type)
(define-extern play-movie? function)
;;(define-extern plunger-lurker-idle object) ;; unknown type
;;(define-extern saw-player object) ;; unknown type
;;(define-extern clone-and-kill-links object) ;; unknown type
;;(define-extern sleep object) ;; unknown type
;;(define-extern plunge object) ;; unknown type
;;(define-extern fly-away object) ;; unknown type
(define-extern villagec-part type)
;;(define-extern *gondola-sg* object) ;; unknown type
(define-extern pistons type)
;;(define-extern *med-res-ogre2-sg* object) ;; unknown type
;;(define-extern *med-res-ogre-sg* object) ;; unknown type
;;(define-extern *med-res-finalboss-sg* object) ;; unknown type
;;(define-extern *pistons-sg* object) ;; unknown type
(define-extern gondola type)
(define-extern villagec-lava type)
;;(define-extern *gondolacables-sg* object) ;; unknown type
;;(define-extern ripple-for-villagec-lava object) ;; unknown type
;;(define-extern *med-res-ogre3-sg* object) ;; unknown type
(define-extern gondolacables type)
;;(define-extern ride-up object) ;; unknown type
;;(define-extern ride-down object) ;; unknown type
;;(define-extern *minecartsteel-sg* object) ;; unknown type
(define-extern minecartsteel-initialize-by-other function)
(define-extern minecartsteel type)
(define-extern minershort-trans-hook function)
(define-extern minertall type)
(define-extern miners-anim-loop function)
(define-extern cavegem type)
;;(define-extern *minertall-sg* object) ;; unknown type
(define-extern minershort type)
;;(define-extern *minershort-sg* object) ;; unknown type
;;(define-extern *cavegem-sg* object) ;; unknown type
(define-extern assistant-villagec type)
;;(define-extern *assistant-village3-sg* object) ;; unknown type
;;(define-extern *evilsis-village3-sg* object) ;; unknown type
;;(define-extern *evilbro-village3-sg* object) ;; unknown type
(define-extern sage-villagec type)
;;(define-extern *sage-village3-sg* object) ;; unknown type
(define-extern spider-vent type)
(define-extern cave-trap-default-event-handler function)
;;(define-extern cave-trap-idle object) ;; unknown type
;;(define-extern spawn-baby-spider-best object) ;; unknown type
;;(define-extern cave-trap-give-up object) ;; unknown type
;;(define-extern spider-vent-idle object) ;; unknown type
;;(define-extern cave-trap-active object) ;; unknown type
;;(define-extern spawn-baby-spider-work object) ;; unknown type
;;(define-extern can-spawn? object) ;; unknown type
(define-extern spider-egg type)
;;(define-extern notify-spawned object) ;; unknown type
;;(define-extern spider-egg-die object) ;; unknown type
;;(define-extern *spider-egg-broken-sg* object) ;; unknown type
;;(define-extern spider-egg-idle object) ;; unknown type
;;(define-extern spider-egg-hatch object) ;; unknown type
;;(define-extern *spider-egg-unbroken-sg* object) ;; unknown type
(define-extern robocave-part type)
(define-extern target-snowball-post function)
;;(define-extern snowball-info object) ;; unknown type
;;(define-extern *SNOWBALL-bank* object) ;; unknown type
;;(define-extern target-snowball object) ;; unknown type
(define-extern snowball-bank type)
(define-extern ice-cube-default-event-handler function)
;;(define-extern ice-cube-appear-land object) ;; unknown type
;;(define-extern ice-cube-retract-spikes object) ;; unknown type
;;(define-extern *ice-cube-nav-enemy-info* object) ;; unknown type
;;(define-extern *ice-cube-break-sg* object) ;; unknown type
;;(define-extern ice-cube-mean-turn-to-charge object) ;; unknown type
;;(define-extern *ice-cube-sg* object) ;; unknown type
;;(define-extern ice-cube-mean-charge-done object) ;; unknown type
;;(define-extern ice-cube-face-player object) ;; unknown type
;;(define-extern ice-cube-become-mean object) ;; unknown type
;;(define-extern ice-cube-trying-to-appear object) ;; unknown type
;;(define-extern ice-cube-shatter object) ;; unknown type
;;(define-extern ice-cube-tired object) ;; unknown type
;;(define-extern ice-cube-appear object) ;; unknown type
;;(define-extern ice-cube-mean-charge object) ;; unknown type
(define-extern ice-cube type)
(define-extern snow-ball-roller-path-update function)
;;(define-extern snow-ball-path-info object) ;; unknown type
;;(define-extern snow-ball-junction object) ;; unknown type
(define-extern snow-ball-roller-init-by-other function)
(define-extern snow-ball-roller-path-init function)
(define-extern snow-ball-shadow-init-by-other function)
;;(define-extern *snow-ball-shadow-control* object) ;; unknown type
;;(define-extern snow-ball-roller object) ;; unknown type
(define-extern snow-ball type)
;;(define-extern snow-ball-idle object) ;; unknown type
;;(define-extern *snow-ball-shadow-sg* object) ;; unknown type
;;(define-extern snow-ball-shadow object) ;; unknown type
;;(define-extern snow-ball-shadow-idle object) ;; unknown type
;;(define-extern *snow-ball-sg* object) ;; unknown type
;;(define-extern snow-ball-roller-idle object) ;; unknown type
;;(define-extern *snowpusher-sg* object) ;; unknown type
;;(define-extern snow-log-button-idle-up object) ;; unknown type
;;(define-extern snowcam object) ;; unknown type
;;(define-extern snow-gears-stopped object) ;; unknown type
;;(define-extern snow-gears-halt object) ;; unknown type
;;(define-extern snowpusher-idle object) ;; unknown type
;;(define-extern snow-log-button-idle-down object) ;; unknown type
(define-extern snow-fort-gate type)
;;(define-extern *snow-fort-gate-sg* object) ;; unknown type
(define-extern snow-log-button-event-handler function)
;;(define-extern snow-log-button-activate object) ;; unknown type
;;(define-extern snow-log-wait-for-master object) ;; unknown type
;;(define-extern snow-eggtop-idle-down object) ;; unknown type
;;(define-extern snow-fort-gate-idle-open object) ;; unknown type
;;(define-extern *snow-gears-sg* object) ;; unknown type
;;(define-extern *snow-eggtop-sg* object) ;; unknown type
;;(define-extern snow-switch-idle-down object) ;; unknown type
(define-extern snow-switch-event-handler function)
;;(define-extern snow-switch-activate object) ;; unknown type
(define-extern snow-log type)
(define-extern snowpusher type)
;;(define-extern *snow-switch-sg* object) ;; unknown type
(define-extern snow-switch type)
;;(define-extern snow-fort-gate-activate object) ;; unknown type
;;(define-extern snow-log-hidden object) ;; unknown type
;;(define-extern snow-eggtop-activate object) ;; unknown type
;;(define-extern snow-spatula-idle object) ;; unknown type
(define-extern snow-eggtop type)
;;(define-extern snow-gears-activate object) ;; unknown type
;;(define-extern snow-switch-idle-up object) ;; unknown type
;;(define-extern snow-log-activate object) ;; unknown type
(define-extern snow-gears type)
(define-extern snow-log-button type)
;;(define-extern *snowcam-sg* object) ;; unknown type
;;(define-extern snow-gears-idle object) ;; unknown type
(define-extern snow-spatula type)
;;(define-extern *snow-spatula-sg* object) ;; unknown type
;;(define-extern snow-fort-gate-idle-closed object) ;; unknown type
;;(define-extern *snow-log-sg* object) ;; unknown type
;;(define-extern snow-eggtop-idle-up object) ;; unknown type
;;(define-extern snow-log-active object) ;; unknown type
;;(define-extern cut object) ;; unknown type
;;(define-extern flutflut-plat-hide object) ;; unknown type
;;(define-extern elevator-travel-to-cave object) ;; unknown type
(define-extern flutflut-plat-small type)
;;(define-extern snow-button-deactivate object) ;; unknown type
;;(define-extern flutflut-plat object) ;; unknown type
;;(define-extern *flutflut-plat-small-sg* object) ;; unknown type
;;(define-extern flutflut-plat-appear object) ;; unknown type
;;(define-extern *flutflut-plat-large-sg* object) ;; unknown type
;;(define-extern elevator-idle-at-cave object) ;; unknown type
;;(define-extern *flutflut-plat-med-sg* object) ;; unknown type
;;(define-extern elevator-idle-at-fort object) ;; unknown type
;;(define-extern snow-button-activate object) ;; unknown type
(define-extern flutflut-plat-med type)
;;(define-extern snow-button-up-idle object) ;; unknown type
(define-extern flutflut-plat-large type)
;;(define-extern *snow-button-sg* object) ;; unknown type
;;(define-extern elevator-travel-to-fort object) ;; unknown type
;;(define-extern flutflut-plat-hidden-idle object) ;; unknown type
(define-extern snow-button type)
;;(define-extern snow-bumper-active-far-idle object) ;; unknown type
;;(define-extern snow-bumper-active-close-idle object) ;; unknown type
(define-extern snow-bumper type)
;;(define-extern snow-bumper-spawn-fuel-cell object) ;; unknown type
;;(define-extern *snow-bumper-sg* object) ;; unknown type
;;(define-extern snow-bumper-deactivate object) ;; unknown type
;;(define-extern snow-bumper-inactive-idle object) ;; unknown type
(define-extern ram type)
;;(define-extern ram-boss-forward-defend-block object) ;; unknown type
;;(define-extern *ram-boss-sg* object) ;; unknown type
;;(define-extern ram-boss-jump-down-hit-ground object) ;; unknown type
;;(define-extern ram-boss object) ;; unknown type
;;(define-extern ram-boss-proj-launch object) ;; unknown type
;;(define-extern ram-boss-tracking object) ;; unknown type
;;(define-extern *ram-boss-nav-enemy-info-no-shield* object) ;; unknown type
;;(define-extern ram-boss-up-defend-block object) ;; unknown type
;;(define-extern ram-boss-jump-down object) ;; unknown type
;;(define-extern ram-boss-already-down object) ;; unknown type
(define-extern snow-ram-proj-update-velocity function)
(define-extern ram-boss-on-ground-event-handler function)
(define-extern ram-boss-init-by-other function)
;;(define-extern ram-boss-show-anims object) ;; unknown type
;;(define-extern ram-boss-proj-growing object) ;; unknown type
;;(define-extern *ram-boss-nav-enemy-info* object) ;; unknown type
;;(define-extern ram-boss-nav-resume object) ;; unknown type
;;(define-extern ram-boss-throw object) ;; unknown type
;;(define-extern ram-boss-lose-shield object) ;; unknown type
;;(define-extern ram-boss-idle object) ;; unknown type
;;(define-extern ram-boss-nav-start object) ;; unknown type
;;(define-extern ram-boss-proj object) ;; unknown type
;;(define-extern snow-ram-proj object) ;; unknown type
;;(define-extern ram-idle object) ;; unknown type
;;(define-extern ram-fun-idle object) ;; unknown type
;;(define-extern *ram-sg* object) ;; unknown type
;;(define-extern ram-give-fuel-cell object) ;; unknown type
(define-extern sparticle-snow-birds-moon function)
(define-extern snow-part type)
(define-extern snow-bird-bob-func function)
;;(define-extern *yeti-nav-enemy-info* object) ;; unknown type
(define-extern yeti-slave-default-event-handler function)
;;(define-extern yeti-slave-appear-land object) ;; unknown type
;;(define-extern yeti-first-time-start object) ;; unknown type
(define-extern yeti-slave-init-by-other function)
;;(define-extern *yeti-sg* object) ;; unknown type
;;(define-extern yeti-slave object) ;; unknown type
;;(define-extern yeti-slave-appear-jump-up object) ;; unknown type
;;(define-extern yeti-resuming-start object) ;; unknown type
(define-extern yeti type)
;;(define-extern yeti-idle object) ;; unknown type
;;(define-extern yeti-slave-show-anims object) ;; unknown type
;;(define-extern spin-pole object) ;; unknown type
;;(define-extern iceskate object) ;; unknown type
(define-extern lavafallsewerb type)
;;(define-extern lavafall-idle object) ;; unknown type
(define-extern lavabase type)
;;(define-extern lavashortcut-idle object) ;; unknown type
;;(define-extern *lavafallsewerb-sg* object) ;; unknown type
(define-extern lavaballoon type)
(define-extern darkecobarrel-base-pos function)
(define-extern darkecobarrel-base-init function)
;;(define-extern darkecobarrel-mover-die object) ;; unknown type
;;(define-extern darkecobarrel-mover-move object) ;; unknown type
(define-extern lavatube-lava type)
;;(define-extern *darkecobarrel-sg* object) ;; unknown type
;;(define-extern darkecobarrel-spawner object) ;; unknown type
;;(define-extern lavafallsewera-idle object) ;; unknown type
(define-extern lavayellowtarp type)
;;(define-extern *lavayellowtarp-sg* object) ;; unknown type
(define-extern lavashortcut type)
;;(define-extern lavayellowtarp-idle object) ;; unknown type
(define-extern darkecobarrel-mover-init-by-other function)
(define-extern darkecobarrel-advance-curspawn function)
;;(define-extern lavafallsewerb-idle object) ;; unknown type
;;(define-extern darkecobarrel-leak object) ;; unknown type
(define-extern lavafall type)
;;(define-extern *lavabase-sg* object) ;; unknown type
;;(define-extern lavabase-idle object) ;; unknown type
;;(define-extern ripple-for-lavatube-lava object) ;; unknown type
(define-extern chainmine type)
;;(define-extern darkecobarrel-mover object) ;; unknown type
;;(define-extern darkecobarrel-base object) ;; unknown type
;;(define-extern *lavafall-sg* object) ;; unknown type
;;(define-extern *lavashortcut-sg* object) ;; unknown type
(define-extern darkecobarrel type)
(define-extern darkecobarrel-base-done? function)
(define-extern darkecobarrel-mover-pos function)
(define-extern lavafallsewera type)
;;(define-extern *lavafallsewera-sg* object) ;; unknown type
;;(define-extern *chainmine-sg* object) ;; unknown type
;;(define-extern *lavaballoon-sg* object) ;; unknown type
(define-extern darkecobarrel-base-time function)
(define-extern darkecobarrel-cycle-time function)
(define-extern energyhub-set-lava-height function)
;;(define-extern energybase-stopping object) ;; unknown type
;;(define-extern *energylava-sg* object) ;; unknown type
;;(define-extern energyhub-idle object) ;; unknown type
;;(define-extern energydoor-opened object) ;; unknown type
;;(define-extern energydoor-closed-till-task object) ;; unknown type
;;(define-extern energybase-idle object) ;; unknown type
(define-extern energydoor-closed-handler function)
;;(define-extern energyarm-no-ball object) ;; unknown type
;;(define-extern energyhub-stopped object) ;; unknown type
;;(define-extern energyball object) ;; unknown type
;;(define-extern energylava object) ;; unknown type
;;(define-extern *energydoor-sg* object) ;; unknown type
;;(define-extern energyball-idle object) ;; unknown type
;;(define-extern *energyhub-sg* object) ;; unknown type
;;(define-extern energyarm object) ;; unknown type
;;(define-extern *energyball-sg* object) ;; unknown type
(define-extern energyball-init function)
(define-extern energyarm-trans function)
(define-extern energyarm-init function)
(define-extern energydoor-open-handler function)
(define-extern energydoor type)
;;(define-extern *energybase-sg* object) ;; unknown type
(define-extern energyhub-trans function)
;;(define-extern energyhub-stop object) ;; unknown type
;;(define-extern energydoor-closed-till-near object) ;; unknown type
;;(define-extern energyarm-idle object) ;; unknown type
;;(define-extern energydoor-opening object) ;; unknown type
;;(define-extern energyarm-stop object) ;; unknown type
;;(define-extern energyarm-fall object) ;; unknown type
;;(define-extern energydoor-closing object) ;; unknown type
(define-extern energyarm-init-by-other function)
(define-extern energybase type)
;;(define-extern energylava-idle object) ;; unknown type
;;(define-extern *energyarm-sg* object) ;; unknown type
;;(define-extern energybase-stopped object) ;; unknown type
(define-extern energydoor-player-dist function)
(define-extern energyball-init-by-other function)
(define-extern energyhub type)
;;(define-extern open? object) ;; unknown type
(define-extern lavatube-part type)
;;(define-extern *assistant-lavatube-start-sg* object) ;; unknown type
(define-extern assistant-lavatube-start type)
;;(define-extern bubling-lava object) ;; unknown type
;;(define-extern lava-amb object) ;; unknown type
;;(define-extern lava-steam object) ;; unknown type
;;(define-extern lav-spin-gen object) ;; unknown type
;;(define-extern dril-step object) ;; unknown type
;;(define-extern drill-hit object) ;; unknown type
;;(define-extern drill-stop object) ;; unknown type
;;(define-extern drlurker-roar object) ;; unknown type
;;(define-extern gnawer-dies object) ;; unknown type
;;(define-extern gnawer-taunt object) ;; unknown type
;;(define-extern sounds object) ;; unknown type
;;(define-extern balloon-dies object) ;; unknown type
;;(define-extern binelurk-roar object) ;; unknown type
;;(define-extern bone-bigswing object) ;; unknown type
;;(define-extern bone-freehead object) ;; unknown type
;;(define-extern bone-helmet object) ;; unknown type
;;(define-extern bone-smallswing object) ;; unknown type
;;(define-extern bone-stepl object) ;; unknown type
;;(define-extern bone-stepr object) ;; unknown type
;;(define-extern bonelurk-raor object) ;; unknown type
;;(define-extern bonelurk-roar object) ;; unknown type
;;(define-extern bonelurker-dies object) ;; unknown type
;;(define-extern bonebridge-fall object) ;; unknown type
;;(define-extern muse-taunt-1 object) ;; unknown type
;;(define-extern muse-taunt-2 object) ;; unknown type
;;(define-extern walk-sand2 object) ;; unknown type
;;(define-extern mud-lurk-inhale object) ;; unknown type
;;(define-extern mud-lurk-laugh object) ;; unknown type
;;(define-extern mudlurker-dies object) ;; unknown type
;;(define-extern mudlurker-idle object) ;; unknown type
;;(define-extern qsl-fire object) ;; unknown type
;;(define-extern spooge1 object) ;; unknown type
;;(define-extern teeter-launch object) ;; unknown type
;;(define-extern teeter-rockland object) ;; unknown type
;;(define-extern teeter-wobble object) ;; unknown type
;;(define-extern teeter_rockup object) ;; unknown type
;;(define-extern walk-wood1 object) ;; unknown type
;;(define-extern arena object) ;; unknown type
;;(define-extern large-steam-lp object) ;; unknown type
;;(define-extern paddle-boat object) ;; unknown type
;;(define-extern flylurk-plane object) ;; unknown type
;;(define-extern flylurk-taunt object) ;; unknown type
;;(define-extern bridge-appears object) ;; unknown type
;;(define-extern bridge-breaks object) ;; unknown type
;;(define-extern rock-in-lava object) ;; unknown type
;;(define-extern group-ogreboss-boulder-splash object) ;; unknown type
;;(define-extern group-ogreboss-bounce-boulder-splash object) ;; unknown type
;;(define-extern group-ogreboss-column-break object) ;; unknown type
;;(define-extern group-ogreboss-lava-splash object) ;; unknown type
;;(define-extern hits-head object) ;; unknown type
;;(define-extern ogre-boulder object) ;; unknown type
;;(define-extern ogre-dies object) ;; unknown type
;;(define-extern ogre-roar2 object) ;; unknown type
;;(define-extern ogre-roar3 object) ;; unknown type
;;(define-extern ogre-throw object) ;; unknown type
;;(define-extern ogre-walk object) ;; unknown type
;;(define-extern ogre-windup object) ;; unknown type
;;(define-extern ogreboss-out object) ;; unknown type
;;(define-extern lava-loop object) ;; unknown type
;;(define-extern ogre-amb object) ;; unknown type
;;(define-extern village2-amb object) ;; unknown type
;;(define-extern plant-dies object) ;; unknown type
;;(define-extern plant-move object) ;; unknown type
;;(define-extern get-mole object) ;; unknown type
;;(define-extern mole-taunt-1 object) ;; unknown type
;;(define-extern mole-taunt-2 object) ;; unknown type
;;(define-extern piston-open object) ;; unknown type
;;(define-extern robber-dies object) ;; unknown type
;;(define-extern robber-flap object) ;; unknown type
;;(define-extern robber-taunt object) ;; unknown type
;;(define-extern mole-dig object) ;; unknown type
;;(define-extern roling-amb object) ;; unknown type
;;(define-extern #t) object) ;; unknown type
;;(define-extern group-ice-cube-foot-puff object) ;; unknown type
;;(define-extern ice-breathin object) ;; unknown type
;;(define-extern ice-monster1 object) ;; unknown type
;;(define-extern ice-monster2 object) ;; unknown type
;;(define-extern ice-monster4 object) ;; unknown type
;;(define-extern ice-spike-in object) ;; unknown type
;;(define-extern ice-spike-out object) ;; unknown type
;;(define-extern icelurk-land object) ;; unknown type
;;(define-extern icelurk-step object) ;; unknown type
;;(define-extern group-ram-boss-foot-puff object) ;; unknown type
;;(define-extern ice-monster3 object) ;; unknown type
;;(define-extern ramboss-land object) ;; unknown type
;;(define-extern ramboss-laugh object) ;; unknown type
;;(define-extern ramboss-shield object) ;; unknown type
;;(define-extern ramboss-step object) ;; unknown type
;;(define-extern ramboss-yell object) ;; unknown type
;;(define-extern babak-death object) ;; unknown type
;;(define-extern burst-out object) ;; unknown type
;;(define-extern winter-amb object) ;; unknown type
;;(define-extern bully-dies object) ;; unknown type
;;(define-extern bully-jump object) ;; unknown type
;;(define-extern bully-land object) ;; unknown type
;;(define-extern bully-spin1 object) ;; unknown type
;;(define-extern bully-spin2 object) ;; unknown type
;;(define-extern split-steps object) ;; unknown type
;;(define-extern splitb-breathin object) ;; unknown type
;;(define-extern splitb-dies object) ;; unknown type
;;(define-extern splitb-roar object) ;; unknown type
;;(define-extern splitb-roars object) ;; unknown type
;;(define-extern splitb-spot object) ;; unknown type
;;(define-extern splitb-taunt object) ;; unknown type
;;(define-extern splita-charge object) ;; unknown type
;;(define-extern splita-dies object) ;; unknown type
;;(define-extern splita-roar object) ;; unknown type
;;(define-extern splita-spot object) ;; unknown type
;;(define-extern splita-taunt object) ;; unknown type
;;(define-extern chamber-land object) ;; unknown type
;;(define-extern chamber-lift object) ;; unknown type
;;(define-extern submerge object) ;; unknown type
;;(define-extern puffer-change object) ;; unknown type
;;(define-extern puffer-wing object) ;; unknown type
;;(define-extern path1 object) ;; unknown type
;;(define-extern path1-k object) ;; unknown type
;;(define-extern path2 object) ;; unknown type
;;(define-extern path2-k object) ;; unknown type
;;(define-extern path3 object) ;; unknown type
;;(define-extern path3-k object) ;; unknown type
;;(define-extern path4 object) ;; unknown type
;;(define-extern path4-k object) ;; unknown type
;;(define-extern path5 object) ;; unknown type
;;(define-extern path5-k object) ;; unknown type
;;(define-extern path6 object) ;; unknown type
;;(define-extern path6-k object) ;; unknown type
;;(define-extern path7 object) ;; unknown type
;;(define-extern path7-k object) ;; unknown type
;;(define-extern path8 object) ;; unknown type
;;(define-extern path8-k object) ;; unknown type
;;(define-extern sunken-amb object) ;; unknown type
;;(define-extern kermit-dies object) ;; unknown type
;;(define-extern kermit-letgo object) ;; unknown type
;;(define-extern kermit-shoot object) ;; unknown type
;;(define-extern kermit-speak1 object) ;; unknown type
;;(define-extern kermit-speak2 object) ;; unknown type
;;(define-extern bat-celebrate object) ;; unknown type
;;(define-extern lurkbat-dies object) ;; unknown type
;;(define-extern lurkbat-idle object) ;; unknown type
;;(define-extern lurkbat-wing object) ;; unknown type
;;(define-extern -2 object) ;; unknown type
;;(define-extern 0 object) ;; unknown type
;;(define-extern 1 object) ;; unknown type
;;(define-extern 100 object) ;; unknown type
;;(define-extern 3 object) ;; unknown type
;;(define-extern 4 object) ;; unknown type
;;(define-extern 5 object) ;; unknown type
;;(define-extern 6 object) ;; unknown type
;;(define-extern lurkrat-bounce object) ;; unknown type
;;(define-extern lurkrat-dies object) ;; unknown type
;;(define-extern lurkrat-fall object) ;; unknown type
;;(define-extern lurkrat-idle object) ;; unknown type
;;(define-extern lurkrat-notice object) ;; unknown type
;;(define-extern lurkrat-walk object) ;; unknown type
;;(define-extern rat-celebrate object) ;; unknown type
;;(define-extern pole-down object) ;; unknown type
;;(define-extern pole-up object) ;; unknown type
;;(define-extern pathb-k object) ;; unknown type
;;(define-extern swamp-amb object) ;; unknown type
(define-extern logo-slave-init-by-other function)
;;(define-extern target-title-wait object) ;; unknown type
;;(define-extern *logo-sg* object) ;; unknown type
;;(define-extern target-title-play object) ;; unknown type
;;(define-extern *logo-japan-sg* object) ;; unknown type
;;(define-extern logo-slave object) ;; unknown type
;;(define-extern *ndi-volumes-sg* object) ;; unknown type
;;(define-extern *logo-black-sg* object) ;; unknown type
;;(define-extern *ndi-cam-sg* object) ;; unknown type
(define-extern logo-init-by-other function)
;;(define-extern *logo-volumes-sg* object) ;; unknown type
;;(define-extern *ndi-sg* object) ;; unknown type
;;(define-extern *logo-cam-sg* object) ;; unknown type
;;(define-extern *logo-volumes-japan-sg* object) ;; unknown type
;;(define-extern ndi object) ;; unknown type
;;(define-extern startup object) ;; unknown type
;;(define-extern break-dummy object) ;; unknown type
;;(define-extern training-amb object) ;; unknown type
;;(define-extern water-lap-cls object) ;; unknown type
;;(define-extern walk-wood2 object) ;; unknown type
;;(define-extern yakow-grazing object) ;; unknown type
;;(define-extern 11 object) ;; unknown type
;;(define-extern 12 object) ;; unknown type
;;(define-extern 50 object) ;; unknown type
;;(define-extern bird-1 object) ;; unknown type
;;(define-extern bird-3 object) ;; unknown type
;;(define-extern bird-4 object) ;; unknown type
;;(define-extern bird-house object) ;; unknown type
;;(define-extern bubbling-still object) ;; unknown type
;;(define-extern cage-bird-2 object) ;; unknown type
;;(define-extern cage-bird-4 object) ;; unknown type
;;(define-extern cage-bird-5 object) ;; unknown type
;;(define-extern fire-bubble object) ;; unknown type
;;(define-extern fire-crackle object) ;; unknown type
;;(define-extern fly1 object) ;; unknown type
;;(define-extern fly2 object) ;; unknown type
;;(define-extern fly3 object) ;; unknown type
;;(define-extern fly4 object) ;; unknown type
;;(define-extern fly5 object) ;; unknown type
;;(define-extern fly6 object) ;; unknown type
;;(define-extern fly7 object) ;; unknown type
;;(define-extern fly8 object) ;; unknown type
;;(define-extern fountain object) ;; unknown type
;;(define-extern gear-creak object) ;; unknown type
;;(define-extern hover-bike-hum object) ;; unknown type
;;(define-extern seagulls-2 object) ;; unknown type
(define-extern evilplant type)
;;(define-extern meteor object) ;; unknown type
;;(define-extern v2ogre-roar1 object) ;; unknown type
;;(define-extern v2ogre-roar2 object) ;; unknown type
;;(define-extern control-panel object) ;; unknown type
;;(define-extern fire-boulder object) ;; unknown type
;;(define-extern flame-pot object) ;; unknown type
;;(define-extern sages-machine object) ;; unknown type
;;(define-extern wind-chimes object) ;; unknown type
;;(define-extern lava-erupt object) ;; unknown type
;;(define-extern miners-fire object) ;; unknown type
;;(define-extern small-steam object) ;; unknown type
;;(define-extern steam-large object) ;; unknown type
;;(define-extern steam-medium object) ;; unknown type
;;(define-extern steam-small object) ;; unknown type
;;(define-extern sulphur object) ;; unknown type
(define-extern lavaspoutdrip type)
;;(define-extern ripple-for-lava object) ;; unknown type

