;;-*-Lisp-*-
(in-package goal)

;; name: nav-engine.gc
;; name in dgo: nav-engine
;; dgos: GAME

;; DECOMP BEGINS

(deftype nav-engine-spr-buffer (structure)
  ((mem-addr   (pointer nav-mesh))
   (mem-nav    uint32  :overlay-at mem-addr)
   (spr-addr   (inline-array nav-control))
   (spr-nav    uint32  :overlay-at spr-addr)
   (q-size     uint32)
   (i-nav      uint8)
   (done       int8)
   (nav-count  int8)
   (i-pass     int8)
   )
  :pack-me
  )


(deftype nav-engine (structure)
  ((spr-addr               uint32)
   (nav-work-addr          uint32)
   (nav-mesh-addr          nav-mesh)
   (poly-array-addr        uint32)
   (hash-sphere-addr       uint32)
   (hash-buckets-addr      uint32)
   (buf-nav-control-count  int8)
   (max-pass-count         int8)
   (output-sphere-hash     uint8)
   (work-buf-array         nav-engine-spr-buffer  3 :inline)
   (spr-work               nav-mesh-work          :overlay-at nav-work-addr)
   (mem-work               nav-mesh-work)
   (spr-mesh               nav-mesh               :overlay-at nav-mesh-addr)
   (mem-mesh               nav-mesh)
   (spr-poly-array         uint32                 :overlay-at poly-array-addr)
   (mem-poly-array         (inline-array nav-poly))
   (hash-sphere-list       uint32                 :overlay-at hash-sphere-addr)
   (hash-buckets           uint32                 :overlay-at hash-buckets-addr)
   (to-spr-wait            uint32)
   (from-spr-wait          uint32)
   )
  (:methods
    (inc-spr-addr! (_type_ uint) uint)
    (lay-out-spad-memory (_type_ nav-mesh) none)
    (set-up-mem-work (_type_) none)
    (add-spheres-from-mesh-user-list (_type_ sphere-hash nav-mesh) none)
    (add-all-spheres (_type_) none)
    (do-sphere-lookups (_type_) none)
    (update-nav-controls-pipelined-in-spr (_type_) none)
    (update-nav-controls-in-spr (_type_) none)
    (upload-nav-to-spr (_type_ nav-engine-spr-buffer) none)
    (download-nav-from-spr (_type_ nav-engine-spr-buffer) none)
    (do-callbacks (_type_ nav-engine-spr-buffer) none)
    (reloc-ptrs-to-spad (_type_ nav-engine-spr-buffer) none)
    (reloc-ptrs-to-mem (_type_ nav-engine-spr-buffer) none)
    )
  )


(defmethod inc-spr-addr! ((this nav-engine) (arg0 uint))
  (let ((v0-0 (-> this spr-addr)))
    (+! (-> this spr-addr) arg0)
    v0-0
    )
  )

(defmethod lay-out-spad-memory ((this nav-engine) (arg0 nav-mesh))
  (let ((s5-0 0))
    ;; og:preserve-this
    (set! (-> this spr-addr) (scratchpad-object uint :offset #x60))
    (let* ((v1-1 this)
           (a1-1 320)
           (a0-1 (-> v1-1 spr-addr))
           )
      (+! (-> v1-1 spr-addr) a1-1)
      (set! (-> this nav-work-addr) a0-1)
      )
    (let* ((v1-2 this)
           (a1-3 112)
           (a0-2 (-> v1-2 spr-addr))
           )
      (+! (-> v1-2 spr-addr) a1-3)
      (set! (-> this nav-mesh-addr) (the-as nav-mesh a0-2))
      )
    (if (and (= (-> arg0 work polys-in-scratch) 1) (< (-> arg0 poly-count) (the-as uint 64)))
        (set! s5-0 (the-as int (-> arg0 poly-count)))
        )
    (let* ((v1-10 this)
           (a1-5 (* s5-0 64))
           (a0-4 (-> v1-10 spr-addr))
           )
      (+! (-> v1-10 spr-addr) a1-5)
      (set! (-> this poly-array-addr) a0-4)
      )
    (let* ((v1-11 this)
           (a1-7 (* (-> arg0 sphere-hash max-object-count) 16))
           (a0-7 (-> v1-11 spr-addr))
           )
      (+! (-> v1-11 spr-addr) a1-7)
      (set! (-> this hash-sphere-addr) a0-7)
      )
    (let* ((v1-12 this)
           (a1-9 0)
           (a0-8 (-> v1-12 spr-addr))
           )
      (+! (-> v1-12 spr-addr) a1-9)
      (set! (-> this hash-buckets-addr) a0-8)
      )
    (set! (-> this buf-nav-control-count) 7)
    (dotimes (v1-14 3)
      (let ((a0-11 (-> this work-buf-array v1-14)))
        (let* ((a1-11 this)
               (a3-0 2048)
               (a2-5 (-> a1-11 spr-addr))
               )
          (+! (-> a1-11 spr-addr) a3-0)
          (set! (-> a0-11 spr-addr) (the-as (inline-array nav-control) a2-5))
          )
        (set! (-> a0-11 mem-addr) (the-as (pointer nav-mesh) 0))
        (set! (-> a0-11 q-size) (the-as uint 0))
        (set! (-> a0-11 nav-count) 0)
        (set! (-> a0-11 i-pass) -1)
        )
      )
    (set! (-> this output-sphere-hash) (the-as uint 0))
    (set! (-> this mem-mesh) arg0)
    (cond
      ((= (-> arg0 work mesh-struct-in-scratch) 1)
       (set! (-> this nav-mesh-addr) (the-as nav-mesh (&-> (-> this nav-mesh-addr) poly-array)))
       (mem-copy! (&-> (-> this nav-mesh-addr) type) (&-> arg0 type) 112)
       )
      (else
        (set! (-> this nav-mesh-addr) arg0)
        )
      )
    (set! (-> this mem-work) (-> arg0 work))
    (if (= (-> arg0 work work-struct-in-scratch) 1)
        (quad-copy! (the-as pointer (-> this nav-work-addr)) (the-as pointer (-> this mem-work)) 20)
        (set! (-> this nav-work-addr) (the-as uint (-> arg0 work)))
        )
    (set! (-> this nav-mesh-addr work) (the-as nav-mesh-work (-> this nav-work-addr)))
    (set! (-> this mem-poly-array) (-> arg0 poly-array))
    (when (> s5-0 0)
      (quad-copy! (the-as pointer (-> this poly-array-addr)) (the-as pointer (-> this mem-poly-array)) (* s5-0 4))
      (set! (-> this nav-mesh-addr poly-array) (the-as (inline-array nav-poly) (-> this poly-array-addr)))
      )
    )
  0
  (none)
  )

(defmethod set-up-mem-work ((this nav-engine))
  (let ((v1-0 (-> this mem-mesh)))
    (set! (-> v1-0 poly-array) (-> this mem-poly-array))
    (set! (-> v1-0 work) (-> this mem-work))
    )
  0
  (none)
  )

(defmethod add-spheres-from-mesh-user-list ((this nav-engine) (arg0 sphere-hash) (arg1 nav-mesh))
  (countdown (s3-0 (-> arg1 static-sphere-count))
    (add-a-sphere-with-flag arg0 (-> arg1 static-sphere s3-0) 64)
    )
  (let* ((s4-1 (-> arg1 user-list))
         (v1-6 (-> s4-1 alive-list next0))
         (s3-1 (-> (the-as connection v1-6) next0))
         )
    (while (!= v1-6 (-> s4-1 alive-list-end))
      (let ((a0-4 (-> (the-as connection v1-6) param1))
            (s2-0 (the-as object (-> (the-as connection v1-6) param3)))
            )
        (cond
          ((-> (the-as connection v1-6) param2)
           (let ((s1-0 (-> (the-as process-focusable a0-4) nav)))
             (set! (-> s1-0 sec-per-frame) (-> (the-as process-focusable a0-4) clock seconds-per-frame))
             (set! (-> s1-0 root-nav-sphere quad) (-> (the-as collide-shape s2-0) trans quad))
             (set! (-> s1-0 root-nav-sphere w) (-> (the-as collide-shape s2-0) nav-radius))
             (if (logtest? (-> s1-0 flags) (nav-control-flag output-sphere-hash))
                 (set! (-> this output-sphere-hash) (the-as uint 1))
                 )
             (if (logtest? (-> (the-as collide-shape s2-0) nav-flags) (nav-flags has-root-sphere))
                 (set! (-> s1-0 root-sphere-id)
                       (the-as uint (add-a-sphere-with-flag
                                      arg0
                                      (-> s1-0 root-nav-sphere)
                                      (the-as int (-> (the-as collide-shape s2-0) backup-collide-as))
                                      )
                               )
                       )
                 )
             (if (logtest? (-> (the-as collide-shape s2-0) nav-flags) (nav-flags has-extra-sphere))
                 (add-a-sphere-with-flag
                   arg0
                   (-> s1-0 extra-nav-sphere)
                   (the-as int (-> (the-as collide-shape s2-0) backup-collide-as))
                   )
                 )
             )
           )
          (else
            (when (logtest? (-> (the-as collide-shape s2-0) nav-flags) (nav-flags has-root-sphere))
              (let ((a1-5 (new 'stack-no-clear 'vector)))
                (set! (-> a1-5 quad) (-> (the-as collide-shape s2-0) trans quad))
                (set! (-> a1-5 w) (-> (the-as collide-shape s2-0) nav-radius))
                (add-a-sphere-with-flag arg0 a1-5 (the-as int (-> (the-as collide-shape s2-0) backup-collide-as)))
                )
              )
            )
          )
        (when (logtest? (-> (the-as collide-shape s2-0) nav-flags) (nav-flags has-child-spheres))
          (let ((s2-1 (-> (the-as collide-shape s2-0) root-prim))
                (s1-1 1)
                )
            (when (zero? (-> s2-1 prim-core prim-type))
              (let ((v1-35 s2-1))
                (set! s2-1 (-> (the-as collide-shape-prim-group v1-35) child 0))
                (set! s1-1 (the-as int (-> v1-35 specific 0)))
                )
              )
            (while (nonzero? s1-1)
              (+! s1-1 -1)
              (when (and (logtest? (collide-action nav-sphere) (-> s2-1 prim-core action)) (= (-> s2-1 prim-core prim-type) -1))
                (let ((a1-6 (new 'stack-no-clear 'vector)))
                  (set! (-> a1-6 quad) (-> s2-1 prim-core world-sphere quad))
                  (set! (-> a1-6 w) (-> (the-as collide-shape-prim-sphere s2-1) nav-radius))
                  (add-a-sphere-with-flag arg0 a1-6 (the-as int (-> s2-1 prim-core collide-as)))
                  )
                )
              (&+! s2-1 80)
              )
            )
          )
        )
      (set! v1-6 s3-1)
      (set! s3-1 (-> s3-1 next0))
      )
    )
  0
  (none)
  )

(defmethod add-all-spheres ((this nav-engine))
  (let ((s4-0 (-> this nav-mesh-addr))
        (gp-0 (-> this nav-mesh-addr sphere-hash))
        )
    (clear-objects! gp-0)
    (set! (-> gp-0 bucket-array) (the-as (pointer grid-hash-word) (-> this hash-buckets-addr)))
    (set! (-> gp-0 sphere-array) (the-as (inline-array sphere) (-> this hash-sphere-addr)))
    (when *target*
      (let ((a1-0 (new 'stack-no-clear 'vector)))
        (let ((v1-8 (-> *target* control)))
          (set! (-> a1-0 quad) (-> v1-8 trans quad))
          (set! (-> a1-0 w) (-> v1-8 nav-radius))
          )
        (add-a-sphere-with-flag gp-0 a1-0 2)
        )
      )
    (add-spheres-from-mesh-user-list this gp-0 s4-0)
    (let ((s3-0 (the-as nav-mesh (-> s4-0 next-nav-mesh))))
      (while (and s3-0 (nonzero? s3-0))
        (add-spheres-from-mesh-user-list this gp-0 s3-0)
        (set! s3-0 (the-as nav-mesh (-> s3-0 next-nav-mesh)))
        )
      )
    (let ((s4-1 (the-as nav-mesh (-> s4-0 prev-nav-mesh))))
      (while (and s4-1 (nonzero? s4-1))
        (add-spheres-from-mesh-user-list this gp-0 s4-1)
        (set! s4-1 (the-as nav-mesh (-> s4-1 prev-nav-mesh)))
        )
      )
    (update-from-spheres gp-0)
    )
  0
  (none)
  )

(defmethod do-sphere-lookups ((this nav-engine))
  (let ((s5-0 (-> this nav-mesh-addr)))
    (dotimes (s4-0 (the-as int (-> s5-0 nav-control-count)))
      (let ((a0-3 (-> s5-0 nav-control-array s4-0)))
        (when (-> a0-3 process)
          (set! (-> a0-3 sphere-count) 0)
          (set! (-> a0-3 state mesh) (-> this nav-mesh-addr))
          (set! (-> this mem-work nav) (the-as basic a0-3))
          (find-sphere-ids-from-sphere-hash a0-3 #f)
          (set! (-> this mem-work nav) #f)
          )
        )
      )
    )
  0
  (none)
  )

(def-mips2c nav-dma-send-to-spr-no-flush (function pointer pointer int none))

(def-mips2c nav-dma-send-from-spr-no-flush (function pointer pointer int none))

(defun inc-mod3 ((arg0 int))
  (local-vars (v0-1 int) (v1-1 int))
  (let ((v0-0 (+ arg0 1)))
    (let ((v1-0 2))
      (set-on-less-than v1-1 v1-0 v0-0)
      )
    (move-if-not-zero v0-1 0 v1-1 v0-0)
    )
  v0-1
  )

(def-mips2c nav-state-patch-pointers (function nav-state int none))

(defmethod-mips2c "(method 17 nav-engine)" 17 nav-engine)

(defmethod-mips2c "(method 18 nav-engine)" 18 nav-engine)

(defmethod do-callbacks ((this nav-engine) (arg0 nav-engine-spr-buffer))
  (local-vars (sv-16 nav-callback-info))
  (with-pp
    (dotimes (s4-0 (-> arg0 nav-count))
      (let* ((a1-1 (-> arg0 spr-addr s4-0))
             (a0-3 (-> a1-1 process))
             )
        (set! sv-16 (-> a1-1 callback-info))
        (when a0-3
          (set! (-> a1-1 state nav) a1-1)
          (when (and (logtest? (-> a1-1 flags) (nav-control-flag kernel-run)) sv-16)
            (let ((s3-0 pp))
              (set! pp a0-3)
              (set! (-> this mem-mesh work nav) (the-as basic a1-1))
              (let ((v1-10 (-> sv-16 callback-count)))
                (set! (-> this max-pass-count) (max (-> this max-pass-count) v1-10))
                (if (< (-> arg0 i-pass) v1-10)
                    ((-> sv-16 callback-array (-> arg0 i-pass)) a0-3 a1-1)
                    )
                )
              (set! pp s3-0)
              )
            (set! (-> this mem-mesh work nav) #f)
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod-mips2c "(method 20 nav-engine)" 20 nav-engine)

(defmethod-mips2c "(method 21 nav-engine)" 21 nav-engine)

(defmethod update-nav-controls-pipelined-in-spr ((this nav-engine))
  (local-vars
    (v1-33 int)
    (v1-45 int)
    (v1-66 int)
    (a0-14 int)
    (a0-19 int)
    (a0-26 int)
    (sv-16 symbol)
    (sv-24 int)
    (sv-32 int)
    (sv-40 uint)
    (sv-44 (inline-array nav-control))
    (sv-48 nav-engine-spr-buffer)
    )
  (flush-cache 0)
  (set! (-> this max-pass-count) 3)
  (set! sv-16 (the-as symbol #f))
  (set! sv-24 0)
  (set! sv-32 0)
  (set! sv-40 (-> this nav-mesh-addr nav-control-count))
  (set! sv-44 (-> this nav-mesh-addr nav-control-array))
  (let ((s5-0 2)
        (s3-0 1)
        (s4-0 0)
        )
    (while (not sv-16)
      (let ((s2-0 (-> this work-buf-array s5-0)))
        (set! (-> s2-0 i-nav) (the-as uint sv-32))
        (set! (-> s2-0 nav-count) (min (-> this buf-nav-control-count) (the-as int (- sv-40 (the-as uint sv-32)))))
        (set! (-> s2-0 i-pass) sv-24)
        (set! (-> s2-0 mem-addr) (the-as (pointer nav-mesh) (-> sv-44 sv-32)))
        (set! (-> s2-0 q-size) (the-as uint (* 18 (-> s2-0 nav-count))))
        (set! (-> s2-0 done) 0)
        (when (>= sv-24 (-> this max-pass-count))
          (set! (-> s2-0 nav-count) 0)
          0
          )
        (if (> (-> s2-0 nav-count) 0)
            (upload-nav-to-spr this s2-0)
            (dma-sync (the-as pointer #x1000d400) 0 0)
            )
        (set! sv-32 (+ sv-32 (-> s2-0 nav-count)))
        (when (>= sv-32 (the-as int sv-40))
          (set! sv-32 0)
          (set! sv-24 (+ sv-24 1))
          (if (= sv-24 (-> this max-pass-count))
              (set! (-> s2-0 done) 1)
              )
          )
        )
      (let ((v1-32 (+ s5-0 1)))
        (let ((a0-13 2))
          (set-on-less-than a0-14 a0-13 v1-32)
          )
        (move-if-not-zero v1-33 0 a0-14 v1-32)
        )
      (set! s5-0 v1-33)
      (let ((s2-1 (-> this work-buf-array s4-0)))
        (when (> (-> s2-1 nav-count) 0)
          (download-nav-from-spr this s2-1)
          (when (= (-> s2-1 done) 1)
            (dma-sync (the-as pointer #x1000d000) 0 0)
            (set! sv-16 #t)
            )
          )
        )
      (let ((v1-44 (+ s4-0 1)))
        (let ((a0-18 2))
          (set-on-less-than a0-19 a0-18 v1-44)
          )
        (move-if-not-zero v1-45 0 a0-19 v1-44)
        )
      (set! s4-0 v1-45)
      (set! sv-48 (-> this work-buf-array s3-0))
      (when (> (-> sv-48 nav-count) 0)
        (if (zero? (-> sv-48 i-pass))
            (reloc-ptrs-to-spad this sv-48)
            )
        (do-callbacks this sv-48)
        (if (= (-> sv-48 i-pass) (+ (-> this max-pass-count) -1))
            (reloc-ptrs-to-mem this sv-48)
            )
        )
      (let ((v1-65 (+ s3-0 1)))
        (let ((a0-25 2))
          (set-on-less-than a0-26 a0-25 v1-65)
          )
        (move-if-not-zero v1-66 0 a0-26 v1-65)
        )
      (set! s3-0 v1-66)
      )
    )
  0
  (none)
  )

(defmethod update-nav-controls-in-spr ((this nav-engine))
  (flush-cache 0)
  (set! (-> this max-pass-count) 1)
  (let ((gp-0 (-> this work-buf-array)))
    (set! (-> gp-0 0 i-nav) (the-as uint 0))
    (set! (-> gp-0 0 nav-count) (the-as int (-> this nav-mesh-addr nav-control-count)))
    (set! (-> gp-0 0 i-pass) 0)
    (set! (-> gp-0 0 mem-addr) (the-as (pointer nav-mesh) (-> this nav-mesh-addr nav-control-array)))
    (set! (-> gp-0 0 q-size) (the-as uint (* 18 (-> gp-0 0 nav-count))))
    (set! (-> gp-0 0 done) 0)
    (when (> (-> gp-0 0 nav-count) 0)
      (upload-nav-to-spr this (the-as nav-engine-spr-buffer gp-0))
      (dma-sync (the-as pointer #x1000d400) 0 0)
      (reloc-ptrs-to-spad this (the-as nav-engine-spr-buffer gp-0))
      (while (< (-> gp-0 0 i-pass) (-> this max-pass-count))
        (do-callbacks this (the-as nav-engine-spr-buffer gp-0))
        (+! (-> gp-0 0 i-pass) 1)
        )
      (reloc-ptrs-to-mem this (the-as nav-engine-spr-buffer gp-0))
      (dotimes (s4-0 (-> gp-0 0 nav-count))
        (let ((a2-1 (-> gp-0 0 spr-addr s4-0 state mesh)))
          ;; og:preserve-this
          (when (in-scratchpad? a2-1)
            (format 0 "nav-engine::update-nav-controls-in-spr: (pre-dma) bad mesh pointer found (#x0~x)~%" a2-1)
            (break!)
            0
            )
          )
        )
      (download-nav-from-spr this (the-as nav-engine-spr-buffer gp-0))
      (dma-sync (the-as pointer #x1000d000) 0 0)
      (dotimes (s5-1 (-> gp-0 0 nav-count))
        (let ((a2-3 (-> (&+ (-> gp-0 0 mem-addr) (* 288 s5-1)) 31)))
          ;; og:preserve-this
          (when (in-scratchpad? a2-3)
            (format 0 "nav-engine::update-nav-controls-in-spr: (post-dma) bad mesh pointer found (#x0~x)~%" a2-3)
            (break!)
            0
            )
          )
        )
      )
    )
  0
  (none)
  )

(defmethod update-navigation ((this nav-mesh))
  (local-vars (sp-0 int))
  (when (zero? (-> this next-nav-mesh))
    (set! (-> this next-nav-mesh) (the-as surface (nav-mesh-from-res-tag (-> this entity) 'next-actor 0)))
    (set! (-> this prev-nav-mesh) (the-as surface (nav-mesh-from-res-tag (-> this entity) 'prev-actor 0)))
    )
  (when (> (-> this nav-control-count) 0)
    (the-as none sp-0)
    (set! sp-0 #x70003fc0)
    (set! (-> this work mesh) this)
    ;; og:preserve-this
    (let ((s4-0 (scratchpad-object nav-engine)))
      (lay-out-spad-memory s4-0 this)
      (add-all-spheres s4-0)
      (do-sphere-lookups s4-0)
      (when (nonzero? (-> s4-0 output-sphere-hash))
        (let ((s3-0 (-> s4-0 nav-mesh-addr sphere-hash)))
          (quad-copy! (-> s3-0 mem-bucket-array) (-> s3-0 bucket-array) (/ (-> s3-0 bucket-memory-size) 16))
          (quad-copy!
            (the-as pointer (-> s3-0 mem-sphere-array))
            (the-as pointer (-> s3-0 sphere-array))
            (-> s3-0 object-count)
            )
          (set! (-> s3-0 bucket-array) (-> s3-0 mem-bucket-array))
          (set! (-> s3-0 sphere-array) (the-as (inline-array sphere) (-> s3-0 mem-sphere-array)))
          )
        )
      (if (< (the-as uint (* 3 (-> s4-0 buf-nav-control-count))) (-> this nav-control-count))
          (update-nav-controls-pipelined-in-spr s4-0)
          (update-nav-controls-in-spr s4-0)
          )
      (set-up-mem-work s4-0)
      )
    )
  0
  (none)
  )
