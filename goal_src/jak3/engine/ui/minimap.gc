;;-*-Lisp-*-
(in-package goal)

;; name: minimap.gc
;; name in dgo: minimap
;; dgos: GAME

;; DECOMP BEGINS

(deftype minimap-texture-name-array (structure)
  ((data  string  35)
   )
  )


(deftype minimap-corner-array (structure)
  ((data  vector  35 :inline)
   )
  )


(define *minimap-texture-name-array*
  (new 'static 'minimap-texture-name-array :data (new 'static 'array string 35
                                                   #f
                                                   #f
                                                   "map-stadium"
                                                   "map-ctyslumc"
                                                   #f
                                                   #f
                                                   "map-ctygena"
                                                   "map-ctygenb"
                                                   "map-ctyslumb"
                                                   #f
                                                   #f
                                                   "map-ctyfarma"
                                                   "map-ctygenc"
                                                   #f
                                                   "map-ctysluma"
                                                   #f
                                                   "map-ctymarka"
                                                   "map-ctypala"
                                                   "map-ctymarkb"
                                                   "map-ctyindb"
                                                   #f
                                                   "map-ctyfarmb"
                                                   "map-ctypalb"
                                                   #f
                                                   "map-ctyinda"
                                                   #f
                                                   "map-ctyporta"
                                                   "map-ctyportb"
                                                   "map-ctyportc"
                                                   #f
                                                   #f
                                                   "map-ctyportd"
                                                   "map-ctyporte"
                                                   "map-ctyportf"
                                                   #f
                                                   )
                                           )
  )

(define *minimap-corner-array*
  (new 'static 'minimap-corner-array :data (new 'static 'inline-array vector 35
                                             (new 'static 'vector :x -4456448.0 :z -4456448.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z -4456448.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z -4456448.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z -4456448.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z -4456448.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z -2883584.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z -2883584.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z -2883584.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z -2883584.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z -2883584.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z -1310720.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z -1310720.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z -1310720.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z -1310720.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z -1310720.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z 262144.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z 262144.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z 262144.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z 262144.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z 262144.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z 1835008.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z 1835008.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z 1835008.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z 1835008.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z 1835008.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z 3407872.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z 3407872.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z 3407872.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z 3407872.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z 3407872.0 :w 1.0)
                                             (new 'static 'vector :x -4456448.0 :z 4980736.0 :w 1.0)
                                             (new 'static 'vector :x -2883584.0 :z 4980736.0 :w 1.0)
                                             (new 'static 'vector :x -1310720.0 :z 4980736.0 :w 1.0)
                                             (new 'static 'vector :x 262144.0 :z 4980736.0 :w 1.0)
                                             (new 'static 'vector :x 1835008.0 :z 4980736.0 :w 1.0)
                                             )
                                     )
  )

(define *minimap* (new 'static 'minimap
                    :draw-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #xa :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #xa :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x908a400000008001 #x535353531)
                      )
                    :draw2-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #xa :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #xa :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x900a400000008001 #x525252521)
                      )
                    :draw3-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #xa :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #xa :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x90aa400000008001 #x535353531)
                      )
                    :draw4-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #xa :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #xa :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x902a400000008001 #x525252521)
                      )
                    :sprite-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x50ab400000008001 #x53531)
                      )
                    :adgif-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x1000000000008005 #xe)
                      )
                    :color (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w #x80)
                    :offset (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
                    :last-name #f
                    :last-tex #f
                    :engine #f
                    :engine-key #x800
                    :race-tex #f
                    :race-scale 16384.0
                    :race-level #f
                    :sprite2-tmpl (new 'static 'dma-gif-packet
                      :dma-vif (new 'static 'dma-packet
                        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
                        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
                        )
                      :gif (new 'static 'array uint64 2 #x502b400000008001 #x52521)
                      )
                    :frustum-alpha 1.0
                    )
        )

(kmemopen global "minimap-engines")

(define *minimap-class-list* (new 'static 'inline-array minimap-class-node 177
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag trail bigmap)
                                 :name "none"
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3190784.0 :y 32768.0 :z 765952.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap)
                                 :name "onintent"
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4505600.0 :z 4505600.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "vinroom"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x5))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4197499.0 :y -34734.08 :z 4187750.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "sewer-kg"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 775413.75 :y 32727.04 :z -1279795.2 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "sewer-genb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3148021.8 :y 8847.36 :z -1200209.9 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "sewer-slumb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -282624.0 :y 45056.0 :z 5464064.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "hiphog"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x3 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1465712.6 :y 36085.76 :z 5251563.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "gungame"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x5 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1843200.0 :y 34816.0 :z 5275648.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "gun-yellow"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9143050.0 :y 89169.92 :z 9106391.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "desert-nest-entrance"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :name "guard"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :name "parking-spot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag trail bigmap goal)
                                 :name "goal"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "goal-no-trail"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "goal-no-trail-bigmap"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3906355.2 :y 100352.0 :z 3732922.2 :w 1.0)
                                 :flags (minimap-flag trail bigmap goal ctywide)
                                 :name "cty-sniper-vicinity"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x4c :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -2105467.0 :y 118906.88 :z 3788431.2 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "forest"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x3 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6583542.0 :y 262021.12 :z -1945067.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "wascity-gungame"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x3 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1523712.0 :z 7372800.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only ctywide)
                                 :name "city-transport"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 839680.0 :z 3756032.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "wascity-leaper-race"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6039716.0 :y 109895.68 :z -1498153.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "wascity-pre-game"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x5 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 10678272.0 :z 524288.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "desert-transport"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 86016.0 :z 7151616.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "waspal"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1458176.0 :z -1499136.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "stadium"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2895872.0 :z -1855488.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "wasteland-arena"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag frustum)
                                 :name "guard-frustum"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9286615.0 :y 125091.84 :z 653434.9 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "wasdoors"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1843200.0 :y 34816.0 :z 5275648.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap)
                                 :name "gun-dark"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3137536.0 :y 34324.48 :z -2962923.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport desert)
                                 :name "spargus-city"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x3 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag racer)
                                 :name "racer"
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag racer)
                                 :name "racer-target"
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag racer)
                                 :name "racer-errol"
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 166871.05 :y 49192.96 :z -2900009.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "monk-temple"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x5 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 15650816.0 :y 149913.6 :z 2943385.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desd"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3550003.2 :y 321126.4 :z 5485773.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desc"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 5525913.5 :y 369049.6 :z 3343564.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desa"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 12869222.0 :y 158105.6 :z 10319053.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desg"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 12833587.0 :y 79052.8 :z 14444954.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desh"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6352077.0 :y 331366.4 :z 7294976.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desc-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2684108.8 :y 63488.0 :z 10600858.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-dese"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 11691622.0 :y 116326.4 :z 674611.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6981632.0 :y 56115.2 :z 378470.4 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desa-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 832307.2 :y 185958.4 :z 6533529.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desc-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 12394496.0 :y 206438.4 :z 12609126.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desg-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 8704819.0 :y 148684.8 :z 5840896.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desd-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 11052646.0 :y 106086.4 :z 11750605.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desg-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 876134.4 :y 251494.4 :z 12136038.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-dese-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 556646.4 :y 184320.0 :z 15724134.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-dese-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16105472.0 :y 54886.4 :z 5789696.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desd-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 15939994.0 :y 135168.0 :z 1683456.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desb-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9377382.0 :y 93798.4 :z 92160.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9970483.0 :y 93388.8 :z 104448.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 10326016.0 :y 131481.6 :z -862208.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9631334.0 :y 88473.6 :z -1377075.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 7608729.5 :y 109772.8 :z -1456128.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 7272038.5 :y 371507.2 :z -410828.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 5833523.0 :y 110592.0 :z -1670758.4 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6916915.0 :y 389939.2 :z -420659.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 12718080.0 :y 141312.0 :z 10554573.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desg-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6378701.0 :y 364134.4 :z -371507.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6380749.0 :y 156876.8 :z -1238630.4 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-6"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2466611.2 :y 372326.4 :z 2169241.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desa-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 8616755.0 :y 108953.6 :z -924876.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 11712922.0 :y 240435.2 :z 3998105.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desd-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 10091315.0 :y 263782.4 :z 3800678.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desd-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4193894.5 :y 33177.6 :z 858521.6 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-sluma-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 792576.0 :y 33177.6 :z -570982.4 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-genb-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1705984.0 :y 8192.0 :z -1542963.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-slumb-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2126643.2 :y 8192.0 :z -919552.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-slumb-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4290560.0 :y 411238.4 :z 7154483.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desc-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3999744.0 :y 45465.6 :z 4032512.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-inda-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2407219.2 :y 394035.2 :z 9599795.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-dese-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6369689.5 :y 128204.8 :z 7754137.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desc-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 11148493.0 :y 130662.4 :z 1211596.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desb-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9161114.0 :y 140492.8 :z 355532.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasa-6"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6171853.0 :y 226508.8 :z -1021132.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only wasall waswide)
                                 :name "bbush-wasb-7"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4068556.8 :y 45465.6 :z 2008678.4 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-indb-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4970496.0 :y 108953.6 :z 13683098.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desf"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 86016.0 :y 44236.8 :z 7160217.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1570406.4 :y 45875.2 :z -1356185.6 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-genb-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1308672.0 :y 45056.0 :z -833536.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-genb-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 505036.8 :y 45465.6 :z -144588.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-genb-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1736294.4 :y 20480.0 :z -799129.6 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-slumb-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2141388.8 :y 7782.4 :z -1939865.6 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-slumc-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2992128.0 :y 315801.6 :z 13929677.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-dese-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2893824.0 :y 188006.4 :z 14871757.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-post-game"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2445721.5 :y 20070.4 :z -2903654.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-slumc-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4145152.0 :y 45056.0 :z 1143193.6 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-sluma-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3572121.5 :y 45056.0 :z 1372160.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-sluma-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3889152.0 :y 45056.0 :z 1889075.2 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-indb-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4385997.0 :y 45056.0 :z 2440396.8 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-indb-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3716710.5 :y 45056.0 :z 3579494.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-inda-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4198809.5 :y 45056.0 :z 4518297.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-inda-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4687462.5 :y 45056.0 :z 4294246.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-inda-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 3675750.5 :y 32768.0 :z 4731289.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-inda-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2622750.8 :y 43950.08 :z 6559170.5 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1377894.4 :y 45056.0 :z 7051264.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-5"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -1053491.2 :y 45056.0 :z 6554419.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-6"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -27852.8 :y 43827.2 :z 5318656.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-7"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1216512.0 :y 45056.0 :z 5433344.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only ctywide)
                                 :name "bbush-port-8"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9130394.0 :y 122060.8 :z 3092480.0 :w 1.0)
                                 :flags (minimap-flag bigmap local-only desert)
                                 :name "bbush-desb-4"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1542847.2 :y 196168.9 :z -4314233.0 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "atoll-valve"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2277804.5 :y 217672.9 :z -4571725.5 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "atoll-ashelin"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -3100565.5 :y 547275.56 :z 1190112.5 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "mountain-lens"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -2833539.0 :y 496445.44 :z 11345.101 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "mountain-shard"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -3448408.5 :y 567047.8 :z 1029759.4 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "mountain-gear"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 4357507.5 :y 205120.72 :z -2286701.2 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "ruins-hut"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -2575550.8 :y 156067.02 :z 3728844.8 :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "forest-samos"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :name "metalhead"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9633792.0 :y 32768.0 :z -1470464.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "kleever-arena"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9181552.0 :y 28517.172 :z -227204.7 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "seem-wascitya"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6039716.0 :y 109895.68 :z -1498153.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "seem-wascityb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9279857.0 :y 126115.84 :z 725073.94 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "kleever-wasdoors"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9344532.0 :y 126484.48 :z 712171.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "damus-wasdoors"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 8197611.5 :y 1009336.3 :z -1705738.2 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "damus-waspal"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9527296.0 :y 225280.0 :z -1642496.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "damus-arena"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6533816.5 :y 86671.36 :z -1681449.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "kleever-wascityb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "red-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :name "tiny-red-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 0.5
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16954164.0 :y 495984.62 :z 17066476.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "desert-temple"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x5 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2539761.8 :y 74191.26 :z 10381844.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap local-only transport wasall)
                                 :name "desert-oasis"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x1 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 12359188.0 :y 90439.68 :z 11306598.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap local-only transport wasall)
                                 :name "desert-corral"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 9344532.0 :y 126484.48 :z 712171.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "sig-wasdoors"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x3))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2669486.0 :y 14131.2 :z -2278359.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "freehq"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x5))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "green-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp trail bigmap)
                                 :name "nest-cocoon"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp trail bigmap)
                                 :name "nest-bridge"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 0.8
                                 :color (new 'static 'rgba :g #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 2866749.5 :y 10117.12 :z -2174484.5 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "factory"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x0))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "big-orange-flashing-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x33 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "big-red-flashing-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "big-green-flashing-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "big-purple-flashing-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x27 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag bigmap)
                                 :name "medium-purple-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x27 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "parked-vehicle"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1603706.9 :y 32522.24 :z -194478.08 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport ctywide)
                                 :name "samos-genb"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp flash)
                                 :name "projectile"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 11540444.0 :y 91835.19 :z 956374.6 :w 1.0)
                                 :flags (minimap-flag trail bigmap goal local-only transport wasall)
                                 :name "desertb-race"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag trail bigmap goal)
                                 :name "big-red-flashing-trail-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag trail bigmap goal)
                                 :name "big-green-flashing-trail-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag frustum)
                                 :name "robot-frustum"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 6036357.0 :y 99532.8 :z 12370657.0 :w 1.0)
                                 :flags (minimap-flag trail bigmap local-only transport wasall)
                                 :name "desert-marauder-village"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x3 #x5))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "gray-clamped-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -898404.4 :y 450727.94 :z -570347.1 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "volcano-monk"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x27 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 226181.53 :y -85.1968 :z 239582.4 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "volcano-collapsing-rock"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -377453.78 :y 83010.766 :z 401777.88 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "volcano-stone-lid"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -364009.06 :y 4519.936 :z -1827779.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "volcano-dark-maker-idol"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :g #x27 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag bigmap)
                                 :name "medium-green-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag bigmap goal)
                                 :name "big-red-flashing-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "factory-clamped-target"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "factory-clamped-tower"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "desglide-ring-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "desglide-thermal-dot"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -338150.6 :y 344064.0 :z -341446.25 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "mine-elevator"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -1054895.8 :y 279489.75 :z -77204.69 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "mine-armor"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "mine-sign-up"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "mine-sign-down"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 1078071.8 :y 418296.62 :z -450073.4 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "mine-door"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "ruins-elec-gate"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 791688.4 :y 92675.27 :z 1785077.8 :w 1.0)
                                 :flags (minimap-flag clamp bigmap goal)
                                 :name "ruins-goal"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp)
                                 :name "dp-bipedal"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp)
                                 :name "neo-wasp"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x1))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :w 1.0)
                                 :flags (minimap-flag clamp bigmap)
                                 :name "dark-maker"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17319976.0 :y 488816.62 :z 16711188.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templea-door"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16893830.0 :y 187146.23 :z 17766400.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templeb-watchers"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17029612.0 :y 189808.64 :z 19156910.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templeb-regen"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16982508.0 :y 180674.56 :z 19045868.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templeb-warpgate"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16956294.0 :y 504422.4 :z 16792166.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only)
                                 :name "templex-darkmaker"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x2 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x40 :b #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16744653.0 :y 181903.36 :z 17680548.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "temple-tests-door"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16833126.0 :y 189808.64 :z 19508510.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templeb-freeze"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17827010.0 :y 317647.66 :z 18464536.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "temple-elev"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 386252.8 :y 1760583.6 :z 207462.4 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "factoryc-vehicle"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17238630.0 :y 189808.64 :z 19509616.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "templeb-defend"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17585848.0 :y 389857.28 :z 18208850.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only)
                                 :name "templeb-seem"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x4 #x2))
                                 :scale 1.0
                                 :color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 16891248.0 :y 182435.84 :z 17934050.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "temple-defend-door-1"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 0.5
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17123000.0 :y 199475.2 :z 18286838.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "temple-defend-door-2"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 0.5
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x 17571308.0 :y 181125.12 :z 19067166.0 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "temple-defend-door-3"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 0.5
                                 :color (new 'static 'rgba :r #x40 :a #x80)
                                 )
                               (new 'static 'minimap-class-node
                                 :default-position (new 'static 'vector :x -592445.44 :y 20111.36 :z -1443553.2 :w 1.0)
                                 :flags (minimap-flag clamp bigmap-only goal)
                                 :name "palace-ruins"
                                 :icon-xy (new 'static 'vector2ub :data (new 'static 'array uint8 2 #x0 #x4))
                                 :scale 1.0
                                 :color (new 'static 'rgba :g #x40 :a #x80)
                                 )
                               )
        )

(let ((gp-0 *minimap*))
      ;; og:preserve-this
  (set! (-> gp-0 engine) (new 'global 'engine-minimap '*minimap* (#if PC_PORT 256 64) connection-minimap))
  (countdown (v1-9 6)
    (set! (-> gp-0 trail v1-9 used-by) #f)
    )
  )

(kmemclose)

(defmethod debug-draw ((this minimap))
  (when *trail-graph*
    (dotimes (s5-0 6)
      (let ((s4-0 (-> this trail s5-0)))
        (when (and (-> s4-0 used-by)
                   (>= (-> s4-0 node-count) 0)
                   (not (time-elapsed? (the-as int (-> s4-0 last-updated)) (seconds 5)))
                   )
          (let* ((a3-0 (target-pos 0))
                 (v1-12 s5-0)
                 (t1-0 (cond
                         ((zero? v1-12)
                          *color-green*
                          )
                         ((= v1-12 1)
                          *color-blue*
                          )
                         ((= v1-12 2)
                          *color-white*
                          )
                         ((= v1-12 3)
                          *color-red*
                          )
                         (else
                           *color-magenta*
                           )
                         )
                       )
                 )
            (trail-graph-method-16
              *trail-graph*
              (-> s4-0 node-count)
              (-> s4-0 node-id)
              a3-0
              (-> s4-0 cached-info orig-goal-pos)
              t1-0
              (* 1024.0 (the float s5-0))
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; ERROR: Unsupported inline assembly instruction kind - [mfc0 v1, Count]
(defmethod update-trails ((this minimap))
  (let ((s5-0 *trail-graph*))
    (when s5-0
      (.mtc0 Count 0)
      (let ((v1-1 0))
        (while (< (the-as uint v1-1) (the-as uint #x605a))
          (let ((v1-2 (-> s5-0 mode)))
            (cond
              ((= v1-2 1)
               (trail-graph-method-31 s5-0 #x605a)
               )
              ((zero? v1-2)
               (let ((v1-5 -1))
                 (let ((a0-5 0))
                   (countdown (a1-1 6)
                     (let* ((a2-3 (-> this trail a1-1))
                            (a3-0 (-> a2-3 used-by))
                            )
                       (when (and a3-0 (and (< 0.0 (-> a3-0 alpha)) (or (< v1-5 0) (< (the-as int (-> a2-3 last-updated)) a0-5))))
                         (set! v1-5 a1-1)
                         (set! a0-5 (the-as int (-> a2-3 last-updated)))
                         )
                       )
                     )
                   (let ((a1-5 (current-time)))
                     (if (or (< v1-5 0) (= a0-5 a1-5))
                         (goto cfg-68)
                         )
                     )
                   )
                 (let ((s4-0 (-> this trail v1-5))
                       (s3-0 (the-as vector #f))
                       )
                   (let* ((v1-9 (-> s4-0 used-by))
                          (s2-0 (the-as structure (-> v1-9 position)))
                          )
                     (set! s3-0 (cond
                                  ((= (the-as vector s2-0) #t)
                                   (let* ((s2-1 (handle->process (-> v1-9 handle)))
                                          (v1-13 (if (type? s2-1 process-drawable)
                                                     s2-1
                                                     )
                                                 )
                                          )
                                     (if v1-13
                                         (set! s3-0 (-> (the-as process-drawable v1-13) root trans))
                                         )
                                     )
                                   s3-0
                                   )
                                  ((and (= (logand (the-as int s2-0) 7) 4) (= (-> (the-as basic s2-0) type) entity-actor))
                                   (let* ((v1-19 (the-as structure s2-0))
                                          (s3-1 (if (the-as vector v1-19)
                                                    (-> (the-as entity-actor v1-19) extra process)
                                                    )
                                                )
                                          (v1-21 (if (type? s3-1 process-drawable)
                                                     s3-1
                                                     )
                                                 )
                                          )
                                     (if v1-21
                                         (set! s3-0 (-> (the-as process-drawable v1-21) root trans))
                                         (set! s3-0 (-> (the-as entity-actor s2-0) extra trans))
                                         )
                                     )
                                   s3-0
                                   )
                                  (else
                                    (the-as vector s2-0)
                                    )
                                  )
                           )
                     )
                   (when s3-0
                     (trail-graph-method-29 s5-0 (target-pos 0) s3-0 (-> s4-0 cached-info))
                     (set! (-> s4-0 search-id) (-> s5-0 search-id))
                     )
                   )
                 )
               )
              ((or (= v1-2 3) (= v1-2 2))
               (countdown (v1-33 6)
                 (let ((s4-1 (-> this trail v1-33)))
                   (when (and (= (-> s4-1 search-id) (-> s5-0 search-id)) (-> s4-1 used-by))
                     (set! (-> s4-1 node-count)
                           (trail-graph-method-21 s5-0 (-> s4-1 node-id) 64 (&-> s4-1 goal-node-id) (&-> s4-1 node-path-dist))
                           )
                     (set! (-> s4-1 last-updated) (the-as uint (current-time)))
                     (goto cfg-64)
                     )
                   )
                 )
               (label cfg-64)
               (trail-graph-method-26 s5-0)
               )
              )
            )
          ;; og:preserve-this added in PC port: they timed stuff, we just allow it to run a fixed number of iterations.
          (+! v1-1 100)
          (.mfc0 v1-1 Count)
          )
        )
      (label cfg-68)
      0
      )
    )
  0
  (none)
  )

(defmethod get-trail-for-connection ((this minimap) (arg0 connection-minimap) (arg1 symbol))
  (local-vars (gp-0 minimap-trail))
  (countdown (v1-0 6)
    (let ((a3-3 (-> this trail v1-0)))
      (when (= (-> a3-3 used-by) arg0)
        (set! gp-0 a3-3)
        (goto cfg-14)
        )
      )
    )
  (when arg1
    (dotimes (v1-4 6)
      (let ((a3-7 (-> this trail v1-4)))
        (when (not (-> a3-7 used-by))
          (set! (-> a3-7 used-by) arg0)
          (set! gp-0 a3-7)
          (goto cfg-14)
          )
        )
      )
    )
  (set! gp-0 (the-as minimap-trail #f))
  (label cfg-14)
  (if (and gp-0 arg1)
      (reset gp-0)
      )
  gp-0
  )

;; WARN: Function (method 13 minimap) has a return type of none, but the expression builder found a return statement.
(defmethod free-trail-by-connection ((this minimap) (arg0 connection-minimap))
  (countdown (v1-0 6)
    (let ((a2-3 (-> this trail v1-0)))
      (when (= (-> a2-3 used-by) arg0)
        (set! (-> a2-3 used-by) #f)
        (reset a2-3)
        (return #f)
        )
      )
    )
  0
  (none)
  )

(defmethod reset ((this minimap-trail))
  (set! (-> this node-count) -1)
  (set! (-> this search-id) (the-as uint 0))
  (set! (-> this last-updated) (the-as uint 0))
  (set! (-> this cached-info goal-conn-id) -1)
  (none)
  )

(defmethod get-icon-draw-pos ((this minimap) (arg0 connection-minimap) (arg1 minimap-trail) (arg2 vector) (arg3 float) (arg4 vector))
  (let ((s5-0 (new 'stack-no-clear 'inline-array 'vector 4)))
    (vector-reset! (-> s5-0 2))
    (vector-reset! (-> s5-0 1))
    (let ((s1-0 0))
      (while (>= (-> arg1 node-count) s1-0)
        (set! (-> s5-0 0 quad) (-> s5-0 1 quad))
        (cond
          ((< s1-0 (-> arg1 node-count))
           (trail-graph-method-20 *trail-graph* (-> arg1 node-id s1-0) (-> s5-0 1))
           (+! s1-0 1)
           (vector-! (-> s5-0 1) (-> s5-0 1) arg2)
           (set! (-> s5-0 1 x) (* (-> s5-0 1 x) arg3))
           (set! (-> s5-0 1 z) (* (-> s5-0 1 z) arg3))
           (set! (-> s5-0 1 y) 0.0)
           (set! (-> s5-0 1 w) 1.0)
           )
          (else
            (vector-negate! (-> s5-0 1) arg4)
            (+! s1-0 1)
            )
          )
        (let ((v1-12 (-> s5-0 1)))
          (when (>= (sqrtf (+ (* (-> v1-12 x) (-> v1-12 x)) (* (-> v1-12 z) (-> v1-12 z)))) 50.0)
            (vector-! (-> s5-0 3) (-> s5-0 0) (-> s5-0 1))
            (let* ((f1-6 (ray-sphere-intersect (-> s5-0 1) (-> s5-0 3) (-> s5-0 2) 50.0))
                   (f0-12 (fmax 0.0 (fmin 1.0 f1-6)))
                   )
              (vector-float*! arg4 (-> s5-0 3) f0-12)
              )
            (vector+! arg4 arg4 (-> s5-0 1))
            (vector-negate! arg4 arg4)
            (return #t)
            )
          )
        )
      )
    )
  #f
  )

(defmethod get-distance-with-path ((this minimap-trail) (arg0 vector) (arg1 vector))
  (local-vars (f30-1 float))
  0.0
  (let ((s5-0 *trail-graph*))
    (cond
      ((and s5-0 (> (-> this node-count) 0))
       (let ((f30-0 (-> this node-path-dist))
             (s3-0 (new 'stack-no-clear 'vector))
             )
         (trail-graph-method-20 s5-0 (-> this node-id 0) s3-0)
         (set! f30-1 (+ f30-0 (vector-vector-xz-distance arg0 s3-0)))
         (trail-graph-method-20 s5-0 (the-as uint (-> this goal-node-id)) s3-0)
         )
       )
      (else
        (set! f30-1 (vector-vector-xz-distance arg0 arg1))
        )
      )
    )
  f30-1
  )

(defmethod print ((this connection-minimap))
  (format
    #t
    "#<connection-minimap ~16S #x~4X ~A @ #x~X>"
    (-> this class name)
    (-> this flags)
    (handle->process (-> this handle))
    this
    )
  this
  )


(defmethod run-pending-updates! ((this engine-minimap) (arg0 time-frame))
  "Run updates if they scheduled. If something is found that has no pending update, kill it.
   Note that we won't kill things on this call if they fail to update their `update-time`.
   They will survive until the next call to `run-pending-updates`!
   (or you can modify their `update-time` before that to prevent them from being killed.)"
  (let ((s2-0 (&-> this alive-list))
        (s3-0 (-> this alive-list))
        )
    (while s3-0
      (let ((s4-0 (-> s3-0 next)))
        ;; og:preserve-this not-yet-implemented check
        (when (or (and *bigmap* (bigmap-method-11 *bigmap*)) (not (paused?)))
          (cond
            ((logtest? (-> s3-0 flags) (minimap-flag fade-out))
             (logclear! (-> s3-0 flags) (minimap-flag fade-in))
             (seek! (-> s3-0 alpha) 0.0 (seconds-per-frame))
             )
            ((and (logtest? (-> s3-0 flags) (minimap-flag task-graph))
                  (not (logtest? (-> *setting-control* user-current minimap) 32))
                  )
             (logior! (-> s3-0 flags) (minimap-flag fade-in))
             (seek! (-> s3-0 alpha) 0.0 (seconds-per-frame))
             )
            ((logtest? (-> s3-0 flags) (minimap-flag fade-in))
             (let ((f30-0 1.0))
               (when (logtest? (-> s3-0 class flags) (minimap-flag trail))
                 (let ((v1-29 (get-trail-for-connection *minimap* s3-0 #f)))
                   (if (or (not v1-29) (time-elapsed? (the-as int (-> v1-29 last-updated)) (seconds 5)))
                       (set! f30-0 0.0001)
                       )
                   )
                 )
               (seek! (-> s3-0 alpha) f30-0 (seconds-per-frame))
               )
             (if (= (-> s3-0 alpha) 1.0)
                 (logclear! (-> s3-0 flags) (minimap-flag fade-in))
                 )
             )
            )
          )
        (cond
          ((and (logtest? (-> s3-0 flags) (minimap-flag fade-out)) (= (-> s3-0 alpha) 0.0))
           (kill-callback this s3-0)
           (set! (-> s2-0 0) (-> s3-0 next))
           (set! (-> s3-0 next) (-> this dead-list))
           (set! (-> this dead-list) s3-0)
           (+! (-> this length) -1)
           )
          ((and (handle->process (-> s3-0 handle))
                (not (and (= (logand (the-as int (-> s3-0 position)) 7) 4)
                          (= (-> (the-as entity-actor (-> s3-0 position)) type) entity-actor)
                          (logtest? (-> (the-as entity-actor (-> s3-0 position)) extra perm status)
                                    (entity-perm-status dead subtask-complete bit-12)
                                    )
                          )
                     )
                )
           (update-callback this)
           (set! s2-0 (&-> s3-0 next))
           )
          (else
            (logior! (-> s3-0 flags) (minimap-flag fade-out))
            (update-callback this)
            (set! s2-0 (&-> s3-0 next))
            )
          )
        (set! s3-0 s4-0)
        )
      )
    )
  (set! (-> this execute-time) arg0)
  0
  (none)
  )

(defmethod add-icon! ((this minimap) (arg0 process) (arg1 uint) (arg2 int) (arg3 vector) (arg4 int))
  (when (not arg2)
    (let ((v1-3 (+ (-> *minimap* engine-key) 1)))
      (set! (-> *minimap* engine-key) v1-3)
      (set! arg2 (the-as int v1-3))
      )
    )
  (let ((s3-0 (the-as connection-minimap (schedule-callback (-> this engine) arg2 0))))
    (let ((s2-1 (-> *minimap-class-list* arg1)))
      (when s3-0
        (when (not (logtest? (-> s3-0 flags) (minimap-flag active)))
          (set! (-> s3-0 class) s2-1)
          (set! (-> s3-0 last-world-pos quad) (-> s2-1 default-position quad))
          (vector-! (-> s3-0 last-relative-pos) (target-pos 0) (-> s3-0 last-world-pos))
          (set! (-> s3-0 edge-ry) -131072)
          )
        (set! (-> s3-0 handle) (process->handle arg0))
        (set! arg3 (cond
                     (arg3
                       (empty)
                       arg3
                       )
                     (else
                       (-> s2-1 default-position)
                       )
                     )
              )
        (set! (-> s3-0 position) arg3)
        (set! (-> s3-0 flags) (minimap-flag active fade-in))
        (set! (-> s3-0 node) (the-as uint arg4))
        )
      )
    s3-0
    )
  )

;; WARN: Function (method 10 engine-minimap) has a return type of none, but the expression builder found a return statement.
(defmethod kill-callback ((this engine-minimap) (arg0 connection-pers))
  "Called when a connection is removed."
  (if (not arg0)
      (return #f)
      )
  (if (logtest? (-> (the-as connection-minimap arg0) class flags) (minimap-flag trail))
      (free-trail-by-connection *minimap* (the-as connection-minimap arg0))
      )
  (set! (-> arg0 update-time) (the-as time-frame #f))
  ((method-of-type engine-pers kill-callback) this arg0)
  (none)
  )

(defun lookup-minimap-texture-by-name ((arg0 string) (arg1 string) (arg2 (pointer texture-page)))
  (local-vars (sv-16 texture-page))
  (dotimes (s3-0 11)
    (let ((s2-0 (-> *level* level s3-0)))
      (when (or (= (-> s2-0 status) 'active) (= (-> s2-0 status) 'reserved))
        (set! sv-16 (-> s2-0 texture-page 8))
        (when (and sv-16 (or (not arg1) (string= (-> sv-16 name) arg1)))
          (dotimes (s1-0 (-> sv-16 length))
            (let ((s0-0 (-> sv-16 data s1-0)))
              (when (and s0-0 (string= (-> s0-0 name) arg0))
                (if arg2
                    (set! (-> arg2 0) sv-16)
                    )
                (set! (-> s2-0 texture-mask 8 mask quad) (-> s0-0 masks data 0 mask quad))
                (return s0-0)
                )
              )
            )
          )
        )
      )
    )
  (the-as texture #f)
  )

(define *minimap-table-entry-array* (new 'static 'boxed-array :type minimap-table-entry
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x 5270364.0 :z -3660800.0)
                                        :level-name 'waswide
                                        :tex-name "map-wascity"
                                        :meters-per-texel 22118.4
                                        :pos-scale 5662310.5
                                        :min-inv-scale 0.5
                                        :max-inv-scale 1.0
                                        :switch-immediate #t
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x -2048000.0 :z -2338816.0)
                                        :level-name 'desert
                                        :tex-name "map-desert"
                                        :meters-per-texel 40960.0
                                        :pos-scale 20971520.0
                                        :min-inv-scale 1.0
                                        :max-inv-scale 1.0
                                        :switch-immediate #f
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x 5270364.0 :z -3660800.0)
                                        :level-name 'wasdoors
                                        :tex-name "map-wasdoors"
                                        :meters-per-texel 22118.4
                                        :pos-scale 5662310.5
                                        :min-inv-scale 0.5
                                        :max-inv-scale 0.5
                                        :switch-immediate #f
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x 4505600.0 :z 3442688.0)
                                        :level-name 'lwassig
                                        :tex-name "map-nst-lower"
                                        :meters-per-texel 25600.0
                                        :pos-scale 6553600.0
                                        :min-inv-scale 0.5
                                        :max-inv-scale 0.5
                                        :switch-immediate #f
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x 1662976.0 :z 163840.0)
                                        :level-name 'nsta
                                        :tex-name "map-nst-upper"
                                        :meters-per-texel 25600.0
                                        :pos-scale 6553600.0
                                        :min-inv-scale 0.5
                                        :max-inv-scale 0.5
                                        :switch-immediate #t
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x -1433600.0 :z -1433600.0)
                                        :level-name 'factoryb
                                        :tex-name "map-factoryb"
                                        :meters-per-texel 20480.0
                                        :pos-scale 5242880.0
                                        :min-inv-scale 0.4
                                        :max-inv-scale 0.4
                                        :switch-immediate #t
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x -3909755.0 :z 3309977.5)
                                        :level-name 'foresta
                                        :tex-name "map-forest"
                                        :meters-per-texel 8519.68
                                        :pos-scale 2181038.0
                                        :min-inv-scale 0.15
                                        :max-inv-scale 0.15
                                        :switch-immediate #t
                                        )
                                      (new 'static 'minimap-table-entry
                                        :corner (new 'static 'vector :x -2129920.0 :z -2338816.0)
                                        :level-name 'jakx
                                        :tex-name "map-desert"
                                        :meters-per-texel 40960.0
                                        :pos-scale 20971520.0
                                        :min-inv-scale 1.0
                                        :max-inv-scale 1.0
                                        :switch-immediate #t
                                        )
                                      )
        )

(defmethod update! ((this minimap))
  (set! (-> this map-bits) (the-as uint 0))
  (let* ((s5-0 (the-as level #f))
         (s4-0 *minimap-table-entry-array*)
         (v1-0 (-> s4-0 length))
         (s3-0 99)
         )
    (let ((a0-2 (-> *setting-control* user-current minimap-level)))
      (dotimes (a1-0 (-> *level* length))
        (let ((a2-3 (-> *level* level a1-0)))
          (when (= (-> a2-3 status) 'active)
            ;; og:preserve-this
            (set! (-> this map-bits) (logior (the-as uint (-> this map-bits)) (-> a2-3 info city-map-bits)))
            (dotimes (a3-5 v1-0)
              (cond
                (a0-2
                  (when (= a0-2 (-> s4-0 a3-5 level-name))
                    (set! s3-0 a3-5)
                    (set! s5-0 a2-3)
                    )
                  )
                ((and (= (-> a2-3 name) (-> s4-0 a3-5 level-name)) (< a3-5 s3-0))
                 (set! s3-0 a3-5)
                 (set! s5-0 a2-3)
                 )
                )
              )
            )
          )
        )
      )
    (cond
      (s5-0
        (when (not (paused?))
          (seek! (-> this min-inv-scale) (-> s4-0 s3-0 min-inv-scale) (* 0.5 (seconds-per-frame)))
          (seek! (-> this max-inv-scale) (-> s4-0 s3-0 max-inv-scale) (* 0.5 (seconds-per-frame)))
          )
        (when (or (-> s4-0 s3-0 switch-immediate)
                  (and (= (-> this min-inv-scale) (-> s4-0 s3-0 min-inv-scale))
                       (= (-> this max-inv-scale) (-> s4-0 s3-0 max-inv-scale))
                       )
                  )
          (set! (-> this last-name) (-> s4-0 s3-0 tex-name))
          (set! (-> this minimap-corner quad) (-> s4-0 s3-0 corner quad))
          (set! (-> this meters-per-texel) (-> s4-0 s3-0 meters-per-texel))
          (set! (-> this pos-scale) (-> s4-0 s3-0 pos-scale))
          (set! (-> this level) s5-0)
          (set! (-> this ctywide) s5-0)
          (cond
            ((= (-> this level name) 'lwassig)
             (if (level-get *level* 'nsta)
                 (set! (-> this map-bits) (the-as uint 1))
                 )
             )
            (else
              (set! (-> this map-bits) (the-as uint 1))
              )
            )
          )
        )
      (else
        (set! (-> this ctywide) (level-get *level* 'ctywide))
        (let ((s5-1 (the int (* 0.0000006357829 (+ 3145728.0 (-> (target-pos 0) x)))))
              (s4-1 (the int (* 0.0000006357829 (+ 3145728.0 (-> (target-pos 0) z)))))
              )
          (set! (-> this meters-per-texel) 16384.0)
          (set! (-> this pos-scale) (* 256.0 (-> this meters-per-texel)))
          (when (not (paused?))
            (seek! (-> this min-inv-scale) 0.25 (* 0.5 (seconds-per-frame)))
            (seek! (-> this max-inv-scale) 0.5 (* 0.5 (seconds-per-frame)))
            )
          (when (and (< s5-1 5) (< s4-1 7) (logtest? (-> this map-bits) (ash 1 (+ (* 5 s4-1) s5-1))))
            (let ((a0-23 (-> *minimap-texture-name-array* data (+ (* 5 s4-1) s5-1))))
              (when a0-23
                (set! (-> this last-name) a0-23)
                (set! (-> this minimap-corner quad) (-> *minimap-corner-array* data (+ (* 5 s4-1) s5-1) quad))
                (dotimes (v1-69 (-> *level* length))
                  (let ((a0-34 (-> *level* level v1-69)))
                    (when (= (-> a0-34 status) 'active)
                      (if (logtest? (-> a0-34 info city-map-bits) (ash 1 (+ (* 5 s4-1) s5-1)))
                          (set! (-> this level) a0-34)
                          )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  (cond
    ((string= (-> this last-name) "map-nst-upper")
     (cond
       ((or (and (task-node-closed? (game-task-node nest-eggs-introduction))
                 (not (task-node-closed? (game-task-node nest-eggs-gas)))
                 )
            (and (task-node-closed? (game-task-node nest-hunt-introduction))
                 (not (task-node-closed? (game-task-node nest-hunt-resolution)))
                 )
            )
        (if (task-node-closed? (game-task-node nest-eggs-resolution))
            (set! (-> this last-name) "map-nst-upper-2")
            )
        )
       (else
         (set! (-> this last-name) #f)
         )
       )
     )
    ((string= (-> this last-name) "map-forest")
     (if (not (or (and (task-node-closed? (game-task-node forest-kill-plants-introduction))
                       (not (task-node-closed? (game-task-node forest-kill-plants-resolution)))
                       )
                  (and (task-node-closed? (game-task-node forest-turn-on-machine-introduction))
                       (not (task-node-closed? (game-task-node precursor-tour-introduction)))
                       )
                  )
              )
         (set! (-> this last-name) #f)
         )
     )
    )
  (set! (-> this last-tex)
        (lookup-minimap-texture-by-name (-> this last-name) (the-as string #f) (the-as (pointer texture-page) #f))
        )
  (let ((f30-2 (seconds-per-frame)))
    (let ((v1-84 (-> this last-tex)))
      (cond
        ((or (not (-> this level)) (zero? (-> this level)) (!= (-> this level status) 'active) (not v1-84))
         (set! (-> this offset w) 0.0)
         )
        ((not (logtest? (-> *setting-control* user-current minimap) 128))
         (seek! (-> this offset w) 0.0 f30-2)
         )
        ((and *target* (nonzero? (-> this map-bits)))
         (set! (-> this offset w) (fmin 0.5 (+ (-> this offset w) f30-2)))
         )
        (else
          (set! (-> this offset w) 0.0)
          )
        )
      )
    (cond
      ((and *target* (or (focus-test? *target* board pilot) (= (-> this min-inv-scale) (-> this max-inv-scale))))
       (let ((f0-40 0.000008138021)
             (f1-10 122880.0)
             (v1-105 (-> *target* control transv))
             )
         (set! (-> this target-inv-scale)
               (fmax
                 (fmin
                   (* f0-40 (fmin f1-10 (sqrtf (+ (* (-> v1-105 x) (-> v1-105 x)) (* (-> v1-105 z) (-> v1-105 z))))))
                   (-> this max-inv-scale)
                   )
                 (-> this min-inv-scale)
                 )
               )
         )
       )
      (else
        (set! (-> this target-inv-scale) 0.5)
        )
      )
    (seek! (-> this offset y) (-> this target-inv-scale) (* 0.5 f30-2))
    )
  (set! (-> this icon-inv-scale) (/ (* 32768.0 (-> this offset y)) (-> this meters-per-texel)))
  (set! (-> this map-inv-scale)
        (/ (* 256.0 (-> this meters-per-texel) (-> this icon-inv-scale)) (-> this pos-scale))
        )
  (set! (-> this icon-inv-scale) (* 1.1428572 (-> this icon-inv-scale)))
  (run-pending-updates! (-> this engine) (-> *display* base-clock frame-counter))
  (when (and (-> this ctywide) (and (= (-> this ctywide status) 'active) (!= (-> this offset w) 0.0)))
    (update-trails this)
    (if *display-trail-graph*
        (debug-draw this)
        )
    #t
    )
  )

;; WARN: Return type mismatch pointer vs none.
(defmethod draw-racer-2 ((this minimap) (arg0 minimap-draw-work) (arg1 connection-minimap))
  (local-vars
    (sv-16 process)
    (sv-20 dma-buffer)
    (sv-208 pointer)
    (sv-212 vector)
    (sv-216 vector)
    (sv-220 vector)
    (sv-224 matrix)
    (sv-228 matrix)
    )
  (let ((s3-0 (handle->process (-> arg1 handle))))
    (set! sv-16 (if (type? s3-0 process-drawable)
                    s3-0
                    )
          )
    )
  (set! sv-20 (-> arg0 buf))
  (when (and sv-16 (nonzero? (-> (the-as process-drawable sv-16) root)))
    (set! sv-208 (-> sv-20 base))
    (set! sv-212 (new 'stack-no-clear 'vector))
    (set! sv-216 (new 'stack-no-clear 'vector))
    (set! sv-220 (new 'stack-no-clear 'vector))
    (set! sv-224 (new 'stack-no-clear 'matrix))
    (set! sv-228 (new 'stack-no-clear 'matrix))
    (set! (-> sv-216 quad) (-> (#if PC_PORT (if (-> *pc-settings* minimap-force-north) *matrix-minimap-north* (matrix-world->local #f #f)) (matrix-world->local #f #f)) fvec quad))
    (set! (-> sv-216 y) 0.0)
    (vector-normalize! sv-216 1.0)
    (vector-z-quaternion! sv-220 (-> (the-as process-drawable sv-16) root quat))
    (vector-xz-normalize! sv-220 1.0)
    (set! (-> sv-220 y) 0.0)
    (set! (-> sv-220 w) 0.0)
    (vector-! sv-212 (target-pos 0) (-> (the-as process-drawable sv-16) root trans))
    (let ((f0-4 (/ (-> sv-212 x) (* (-> this meters-per-texel) (-> this icon-inv-scale))))
          (f1-3 (/ (-> sv-212 z) (* (-> this meters-per-texel) (-> this icon-inv-scale))))
          )
      (set-vector! (-> sv-224 rvec) (-> sv-216 z) 0.0 (- (-> sv-216 x)) 0.0)
      (set-vector! (-> sv-224 uvec) 0.0 1.0 0.0 0.0)
      (set-vector! (-> sv-224 fvec) (-> sv-216 x) 0.0 (-> sv-216 z) 0.0)
      (set-vector! (-> sv-224 trans) 164.0 0.0 164.0 1.0)
      (set-vector! (-> sv-228 rvec) (-> sv-220 z) 0.0 (- (-> sv-220 x)) 0.0)
      (set-vector! (-> sv-228 uvec) 0.0 1.0 0.0 0.0)
      (set-vector! (-> sv-228 fvec) (-> sv-220 x) 0.0 (-> sv-220 z) 0.0)
      (set-vector! (-> sv-228 trans) f0-4 0.0 f1-3 1.0)
      )
    (let ((v1-42 (-> sv-228 trans)))
      (when (< (sqrtf (+ (* (-> v1-42 x) (-> v1-42 x)) (* (-> v1-42 z) (-> v1-42 z)))) 50.0)
        (matrix*! sv-228 sv-228 sv-224)
        (let ((f0-12 7.0))
          (set-vector! (-> arg0 corner 0) 0.0 0.0 (- f0-12) 1.0)
          (set-vector! (-> arg0 corner 1) f0-12 0.0 0.0 1.0)
          (set-vector! (-> arg0 corner 2) (- f0-12) 0.0 0.0 1.0)
          (set-vector! (-> arg0 corner 3) 0.0 0.0 f0-12 1.0)
          )
        (vector-matrix*! (the-as vector (-> arg0 corner)) (the-as vector (-> arg0 corner)) sv-228)
        (vector-matrix*! (-> arg0 corner 1) (-> arg0 corner 1) sv-228)
        (vector-matrix*! (-> arg0 corner 2) (-> arg0 corner 2) sv-228)
        (vector-matrix*! (-> arg0 corner 3) (-> arg0 corner 3) sv-228)
        (let* ((a0-38 (-> arg1 class color))
               (a0-45 (copy-and-set-field a0-38 r (shr (* (-> a0-38 r) (the-as uint (-> this color x))) 7)))
               (a0-52 (copy-and-set-field a0-45 g (shr (* (-> a0-45 g) (the-as uint (-> this color y))) 7)))
               (v1-59
                 (copy-and-set-field
                   (copy-and-set-field a0-52 b (shr (* (-> a0-52 b) (the-as uint (-> this color z))) 7))
                   a
                   (the int (* 128.0 (-> arg1 alpha)))
                   )
                 )
               )
          (let ((a0-65 (-> this draw4-tmpl dma-vif quad)))
            (set! (-> (the-as (pointer uint128) sv-208)) a0-65)
            )
          (let ((a0-66 (-> this draw4-tmpl quad 1)))
            (set! (-> (the-as (pointer uint128) sv-208) 1) a0-66)
            )
          (set-vector!
            (-> (the-as (inline-array vector4w) sv-208) 2)
            (the-as int (-> v1-59 r))
            (the-as int (-> v1-59 g))
            (the-as int (-> v1-59 b))
            (the-as int (-> v1-59 a))
            )
          )
        (let ((v1-62 (the-as object (&+ sv-208 48))))
          (set! (-> (the-as (inline-array vector) v1-62) 0 x) 0.0)
          (set! (-> (the-as (inline-array vector) v1-62) 0 y) 0.0)
          (set! (-> (the-as (inline-array vector) v1-62) 0 z) 1.0)
          (set! (-> (the-as (inline-array vector) v1-62) 0 w) 0.0)
          )
        (let ((v1-64 (the-as object (&+ sv-208 64))))
          (set! (-> (the-as (inline-array vector4w) v1-64) 0 x) (the int (* 16.0 (-> arg0 corner 0 x))))
          (set! (-> (the-as (inline-array vector4w) v1-64) 0 y) (the int (* 16.0 (-> arg0 corner 0 z))))
          (set! (-> (the-as (inline-array vector4w) v1-64) 0 z) #xffffff)
          (set! (-> (the-as (inline-array vector4w) v1-64) 0 w) 0)
          )
        (let ((v1-66 (the-as object (&+ sv-208 80))))
          (set! (-> (the-as (inline-array vector) v1-66) 0 x) 1.0)
          (set! (-> (the-as (inline-array vector) v1-66) 0 y) 0.0)
          (set! (-> (the-as (inline-array vector) v1-66) 0 z) 1.0)
          (set! (-> (the-as (inline-array vector) v1-66) 0 w) 0.0)
          )
        (let ((v1-68 (the-as object (&+ sv-208 96))))
          (set! (-> (the-as (inline-array vector4w) v1-68) 0 x) (the int (* 16.0 (-> arg0 corner 1 x))))
          (set! (-> (the-as (inline-array vector4w) v1-68) 0 y) (the int (* 16.0 (-> arg0 corner 1 z))))
          (set! (-> (the-as (inline-array vector4w) v1-68) 0 z) #xffffff)
          (set! (-> (the-as (inline-array vector4w) v1-68) 0 w) 0)
          )
        (let ((v1-70 (the-as object (&+ sv-208 112))))
          (set! (-> (the-as (inline-array vector) v1-70) 0 x) 0.0)
          (set! (-> (the-as (inline-array vector) v1-70) 0 y) 1.0)
          (set! (-> (the-as (inline-array vector) v1-70) 0 z) 1.0)
          (set! (-> (the-as (inline-array vector) v1-70) 0 w) 0.0)
          )
        (let ((v1-72 (the-as object (&+ sv-208 128))))
          (set! (-> (the-as (inline-array vector4w) v1-72) 0 x) (the int (* 16.0 (-> arg0 corner 2 x))))
          (set! (-> (the-as (inline-array vector4w) v1-72) 0 y) (the int (* 16.0 (-> arg0 corner 2 z))))
          (set! (-> (the-as (inline-array vector4w) v1-72) 0 z) #xffffff)
          (set! (-> (the-as (inline-array vector4w) v1-72) 0 w) 0)
          )
        (let ((v1-74 (the-as object (&+ sv-208 144))))
          (set! (-> (the-as (inline-array vector) v1-74) 0 x) 1.0)
          (set! (-> (the-as (inline-array vector) v1-74) 0 y) 1.0)
          (set! (-> (the-as (inline-array vector) v1-74) 0 z) 1.0)
          (set! (-> (the-as (inline-array vector) v1-74) 0 w) 0.0)
          )
        (let ((v1-76 (the-as object (&+ sv-208 160))))
          (set! (-> (the-as (inline-array vector4w) v1-76) 0 x) (the int (* 16.0 (-> arg0 corner 3 x))))
          (set! (-> (the-as (inline-array vector4w) v1-76) 0 y) (the int (* 16.0 (-> arg0 corner 3 z))))
          (set! (-> (the-as (inline-array vector4w) v1-76) 0 z) #xffffff)
          (set! (-> (the-as (inline-array vector4w) v1-76) 0 w) 0)
          )
        (&+! (-> sv-20 base) 176)
        )
      )
    )
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defmethod draw-racer-1 ((this minimap) (arg0 minimap-draw-work) (arg1 connection-minimap) (arg2 float) (arg3 float) (arg4 float))
  (local-vars
    (sv-16 process)
    (sv-20 float)
    (sv-24 dma-buffer)
    (sv-128 pointer)
    (sv-132 vector)
    (sv-136 vector)
    (sv-140 matrix)
    )
  (let ((s0-0 (handle->process (-> arg1 handle))))
    (set! sv-16 (if (type? s0-0 process-drawable)
                    s0-0
                    )
          )
    )
  (set! sv-20 (-> *video-params* relative-x-scale))
  (set! sv-24 (-> arg0 buf))
  (when (and sv-16 (nonzero? (-> (the-as process-drawable sv-16) root)))
    (set! sv-128 (-> sv-24 base))
    (set! sv-132 (new 'stack-no-clear 'vector))
    (set! sv-136 (new 'stack-no-clear 'vector))
    (set! sv-140 (new 'stack-no-clear 'matrix))
    (vector-z-quaternion! sv-136 (-> (the-as process-drawable sv-16) root quat))
    (vector-xz-normalize! sv-136 -1.0)
    (set! (-> sv-136 y) 0.0)
    (set! (-> sv-136 w) 0.0)
    (vector-! sv-132 (-> (the-as process-drawable sv-16) root trans) (-> this race-corner))
    (cond
      ((get-horizontal-flip-flag *blit-displays-work*)
       (let ((f0-4 (+ arg3 (* (- 128.0 (/ (-> sv-132 x) arg2)) sv-20)))
             (f1-4 (+ arg4 (/ (-> sv-132 z) arg2)))
             )
         (set-vector! (-> sv-140 rvec) (-> sv-136 z) 0.0 (-> sv-136 x) 0.0)
         (set-vector! (-> sv-140 uvec) 0.0 1.0 0.0 0.0)
         (set-vector! (-> sv-140 fvec) (- (-> sv-136 x)) 0.0 (-> sv-136 z) 0.0)
         (set-vector! (-> sv-140 trans) f0-4 0.0 f1-4 1.0)
         )
       )
      (else
        (let ((f0-8 (+ arg3 (* (/ (-> sv-132 x) arg2) sv-20)))
              (f1-9 (+ arg4 (/ (-> sv-132 z) arg2)))
              )
          (set-vector! (-> sv-140 rvec) (-> sv-136 z) 0.0 (- (-> sv-136 x)) 0.0)
          (set-vector! (-> sv-140 uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> sv-140 fvec) (-> sv-136 x) 0.0 (-> sv-136 z) 0.0)
          (set-vector! (-> sv-140 trans) f0-8 0.0 f1-9 1.0)
          )
        )
      )
    (let ((f0-11 7.0))
      (set-vector! (-> arg0 corner 0) 0.0 0.0 (- f0-11) 1.0)
      (set-vector! (-> arg0 corner 1) f0-11 0.0 0.0 1.0)
      (set-vector! (-> arg0 corner 2) (- f0-11) 0.0 0.0 1.0)
      (set-vector! (-> arg0 corner 3) 0.0 0.0 f0-11 1.0)
      )
    (vector-matrix*! (the-as vector (-> arg0 corner)) (the-as vector (-> arg0 corner)) sv-140)
    (vector-matrix*! (-> arg0 corner 1) (-> arg0 corner 1) sv-140)
    (vector-matrix*! (-> arg0 corner 2) (-> arg0 corner 2) sv-140)
    (vector-matrix*! (-> arg0 corner 3) (-> arg0 corner 3) sv-140)
    (let* ((a0-33 (-> arg1 class color))
           (a0-40 (copy-and-set-field a0-33 r (shr (* (-> a0-33 r) (the-as uint (-> this color x))) 7)))
           (a0-47 (copy-and-set-field a0-40 g (shr (* (-> a0-40 g) (the-as uint (-> this color y))) 7)))
           (v1-57 (copy-and-set-field
                    (copy-and-set-field a0-47 b (shr (* (-> a0-47 b) (the-as uint (-> this color z))) 7))
                    a
                    (the int (* 128.0 (-> arg1 alpha)))
                    )
                  )
           )
      (let ((a0-60 (-> this draw4-tmpl dma-vif quad)))
        (set! (-> (the-as (pointer uint128) sv-128)) a0-60)
        )
      (let ((a0-61 (-> this draw4-tmpl quad 1)))
        (set! (-> (the-as (pointer uint128) sv-128) 1) a0-61)
        )
      (let ((a0-63 (the-as object (&+ sv-128 32))))
        (set! (-> (the-as (inline-array vector4w) a0-63) 0 x) (the-as int (-> v1-57 r)))
        (set! (-> (the-as (inline-array vector4w) a0-63) 0 y) (the-as int (-> v1-57 g)))
        (set! (-> (the-as (inline-array vector4w) a0-63) 0 z) (the-as int (-> v1-57 b)))
        (set! (-> (the-as (inline-array vector4w) a0-63) 0 w) (the-as int (-> v1-57 a)))
        )
      )
    (let ((v1-60 (the-as object (&+ sv-128 48))))
      (set! (-> (the-as (inline-array vector) v1-60) 0 x) 0.0)
      (set! (-> (the-as (inline-array vector) v1-60) 0 y) 0.0)
      (set! (-> (the-as (inline-array vector) v1-60) 0 z) 1.0)
      (set! (-> (the-as (inline-array vector) v1-60) 0 w) 0.0)
      )
    (let ((v1-62 (the-as object (&+ sv-128 64))))
      (set! (-> (the-as (inline-array vector4w) v1-62) 0 x) (the int (* 16.0 (-> arg0 corner 0 x))))
      (set! (-> (the-as (inline-array vector4w) v1-62) 0 y) (the int (* 16.0 (-> arg0 corner 0 z))))
      (set! (-> (the-as (inline-array vector4w) v1-62) 0 z) #xffffff)
      (set! (-> (the-as (inline-array vector4w) v1-62) 0 w) 0)
      )
    (let ((v1-64 (the-as object (&+ sv-128 80))))
      (set! (-> (the-as (inline-array vector) v1-64) 0 x) 1.0)
      (set! (-> (the-as (inline-array vector) v1-64) 0 y) 0.0)
      (set! (-> (the-as (inline-array vector) v1-64) 0 z) 1.0)
      (set! (-> (the-as (inline-array vector) v1-64) 0 w) 0.0)
      )
    (let ((v1-66 (the-as object (&+ sv-128 96))))
      (set! (-> (the-as (inline-array vector4w) v1-66) 0 x) (the int (* 16.0 (-> arg0 corner 1 x))))
      (set! (-> (the-as (inline-array vector4w) v1-66) 0 y) (the int (* 16.0 (-> arg0 corner 1 z))))
      (set! (-> (the-as (inline-array vector4w) v1-66) 0 z) #xffffff)
      (set! (-> (the-as (inline-array vector4w) v1-66) 0 w) 0)
      )
    (let ((v1-68 (the-as object (&+ sv-128 112))))
      (set! (-> (the-as (inline-array vector) v1-68) 0 x) 0.0)
      (set! (-> (the-as (inline-array vector) v1-68) 0 y) 1.0)
      (set! (-> (the-as (inline-array vector) v1-68) 0 z) 1.0)
      (set! (-> (the-as (inline-array vector) v1-68) 0 w) 0.0)
      )
    (let ((v1-70 (the-as object (&+ sv-128 128))))
      (set! (-> (the-as (inline-array vector4w) v1-70) 0 x) (the int (* 16.0 (-> arg0 corner 2 x))))
      (set! (-> (the-as (inline-array vector4w) v1-70) 0 y) (the int (* 16.0 (-> arg0 corner 2 z))))
      (set! (-> (the-as (inline-array vector4w) v1-70) 0 z) #xffffff)
      (set! (-> (the-as (inline-array vector4w) v1-70) 0 w) 0)
      )
    (let ((v1-72 (the-as object (&+ sv-128 144))))
      (set! (-> (the-as (inline-array vector) v1-72) 0 x) 1.0)
      (set! (-> (the-as (inline-array vector) v1-72) 0 y) 1.0)
      (set! (-> (the-as (inline-array vector) v1-72) 0 z) 1.0)
      (set! (-> (the-as (inline-array vector) v1-72) 0 w) 0.0)
      )
    (let ((v1-74 (the-as object (&+ sv-128 160))))
      (set! (-> (the-as (inline-array vector4w) v1-74) 0 x) (the int (* 16.0 (-> arg0 corner 3 x))))
      (set! (-> (the-as (inline-array vector4w) v1-74) 0 y) (the int (* 16.0 (-> arg0 corner 3 z))))
      (set! (-> (the-as (inline-array vector4w) v1-74) 0 z) #xffffff)
      (set! (-> (the-as (inline-array vector4w) v1-74) 0 w) 0)
      )
    (&+! (-> sv-24 base) 176)
    )
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defmethod draw-frustum-1 ((this minimap) (arg0 minimap-draw-work) (arg1 connection-minimap))
  (local-vars
    (sv-16 process)
    (sv-20 dma-buffer)
    (sv-208 pointer)
    (sv-212 texture)
    (sv-216 vector)
    (sv-220 vector)
    (sv-224 vector)
    (sv-228 matrix)
    (sv-232 matrix)
    )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (let ((s3-0 (handle->process (-> arg1 handle))))
      (set! sv-16 (if (type? s3-0 process-drawable)
                      s3-0
                      )
            )
      )
    (set! sv-20 (-> arg0 buf))
    (when (and sv-16 (nonzero? (-> (the-as process-drawable sv-16) root)))
      (set! sv-208 (-> sv-20 base))
      (set! sv-212 (get-texture map-guard-frustum level-default-minimap))
      (set! sv-216 (new 'stack-no-clear 'vector))
      (set! sv-220 (new 'stack-no-clear 'vector))
      (set! sv-224 (new 'stack-no-clear 'vector))
      (set! sv-228 (new 'stack-no-clear 'matrix))
      (set! sv-232 (new 'stack-no-clear 'matrix))
      (when sv-212
        (set! (-> sv-220 quad) (-> (#if PC_PORT (if (-> *pc-settings* minimap-force-north) *matrix-minimap-north* (matrix-world->local #f #f)) (matrix-world->local #f #f)) fvec quad))
        (set! (-> sv-220 y) 0.0)
        (vector-normalize! sv-220 1.0)
        (vector-z-quaternion! sv-224 (-> (the-as process-drawable sv-16) root quat))
        (vector-xz-normalize! sv-224 1.0)
        (set! (-> sv-224 y) 0.0)
        (set! (-> sv-224 w) 0.0)
        (vector-! sv-216 (target-pos 0) (-> (the-as process-drawable sv-16) root trans))
        (let ((f0-4 (/ (-> sv-216 x) (* (-> this meters-per-texel) (-> this map-inv-scale))))
              (f1-3 (/ (-> sv-216 z) (* (-> this meters-per-texel) (-> this map-inv-scale))))
              )
          (set-vector! (-> sv-228 rvec) (-> sv-220 z) 0.0 (- (-> sv-220 x)) 0.0)
          (set-vector! (-> sv-228 uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> sv-228 fvec) (-> sv-220 x) 0.0 (-> sv-220 z) 0.0)
          (set-vector! (-> sv-228 trans) 164.0 0.0 164.0 1.0)
          (set-vector! (-> sv-232 rvec) (-> sv-224 z) 0.0 (- (-> sv-224 x)) 0.0)
          (set-vector! (-> sv-232 uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> sv-232 fvec) (-> sv-224 x) 0.0 (-> sv-224 z) 0.0)
          (set-vector! (-> sv-232 trans) f0-4 0.0 f1-3 1.0)
          )
        (matrix*! sv-232 sv-232 sv-228)
        (let ((f0-8 (/ -10.0 (-> this map-inv-scale))))
          (set-vector! (-> arg0 corner 0) 0.0 0.0 0.0 1.0)
          (set-vector! (-> arg0 corner 1) (- f0-8) 0.0 f0-8 1.0)
          (set-vector! (-> arg0 corner 2) f0-8 0.0 f0-8 1.0)
          (set-vector! (-> arg0 corner 3) 0.0 0.0 (* 2.0 f0-8) 1.0)
          )
        (vector-matrix*! (the-as vector (-> arg0 corner)) (the-as vector (-> arg0 corner)) sv-232)
        (vector-matrix*! (-> arg0 corner 1) (-> arg0 corner 1) sv-232)
        (vector-matrix*! (-> arg0 corner 2) (-> arg0 corner 2) sv-232)
        (vector-matrix*! (-> arg0 corner 3) (-> arg0 corner 3) sv-232)
        (let ((v1-47 (new 'stack-no-clear 'vector))
              (a0-40 (new 'stack-no-clear 'vector))
              )
          (.lvf vf1 (&-> arg0 corner 0 quad))
          (.lvf vf2 (&-> arg0 corner 1 quad))
          (.lvf vf3 (&-> arg0 corner 2 quad))
          (.lvf vf4 (&-> arg0 corner 3 quad))
          (.min.vf vf5 vf1 vf2)
          (.min.vf vf5 vf5 vf3)
          (.min.vf vf5 vf5 vf4)
          (.max.vf vf6 vf1 vf2)
          (.max.vf vf6 vf6 vf3)
          (.max.vf vf6 vf6 vf4)
          (.svf (&-> v1-47 quad) vf5)
          (.svf (&-> a0-40 quad) vf6)
          (when (and (< (-> a0-40 x) 228.0) (< (-> a0-40 z) 228.0) (< 100.0 (-> v1-47 x)) (< 100.0 (-> v1-47 z)))
            (let* ((a0-46 (-> arg1 class color))
                   (a0-53 (copy-and-set-field a0-46 r (shr (* (-> a0-46 r) (the-as uint (-> this color x))) 7)))
                   (a0-60 (copy-and-set-field a0-53 g (shr (* (-> a0-53 g) (the-as uint (-> this color y))) 7)))
                   (s4-1 (copy-and-set-field
                           (copy-and-set-field a0-60 b (shr (* (-> a0-60 b) (the-as uint (-> this color z))) 7))
                           a
                           (the int (* 128.0 (-> this frustum-alpha) (-> arg1 alpha)))
                           )
                         )
                   )
              (let ((v1-58 (-> this adgif-tmpl dma-vif quad)))
                (set! (-> (the-as (pointer uint128) sv-208) 0) v1-58)
                )
              (let ((v1-59 (-> this adgif-tmpl quad 1)))
                (set! (-> (the-as (pointer uint128) sv-208) 1) v1-59)
                )
              (adgif-shader<-texture-simple! (the-as adgif-shader (&+ sv-208 32)) sv-212)
              (let ((v1-61 (-> this draw4-tmpl dma-vif quad)))
                (set! (-> (the-as (pointer uint128) sv-208) 7) v1-61)
                )
              (let ((v1-62 (-> this draw4-tmpl quad 1)))
                (set! (-> (the-as (pointer uint128) sv-208) 8) v1-62)
                )
              (let ((v1-64 (the-as object (&+ sv-208 144))))
                (set! (-> (the-as (inline-array vector4w) v1-64) 0 x) (the-as int (-> s4-1 r)))
                (set! (-> (the-as (inline-array vector4w) v1-64) 0 y) (the-as int (-> s4-1 g)))
                (set! (-> (the-as (inline-array vector4w) v1-64) 0 z) (the-as int (-> s4-1 b)))
                (set! (-> (the-as (inline-array vector4w) v1-64) 0 w) (the-as int (-> s4-1 a)))
                )
              )
            (let ((v1-66 (the-as object (&+ sv-208 160))))
              (set! (-> (the-as (inline-array vector) v1-66) 0 x) 0.0)
              (set! (-> (the-as (inline-array vector) v1-66) 0 y) 0.0)
              (set! (-> (the-as (inline-array vector) v1-66) 0 z) 1.0)
              (set! (-> (the-as (inline-array vector) v1-66) 0 w) 0.0)
              )
            (let ((v1-68 (the-as object (&+ sv-208 176))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 x) (the int (* 16.0 (-> arg0 corner 0 x))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 y) (the int (* 16.0 (-> arg0 corner 0 z))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 w) 0)
              )
            (let ((v1-70 (the-as object (&+ sv-208 192))))
              (set! (-> (the-as (inline-array vector) v1-70) 0 x) 1.0)
              (set! (-> (the-as (inline-array vector) v1-70) 0 y) 0.0)
              (set! (-> (the-as (inline-array vector) v1-70) 0 z) 1.0)
              (set! (-> (the-as (inline-array vector) v1-70) 0 w) 0.0)
              )
            (let ((v1-72 (the-as object (&+ sv-208 208))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 x) (the int (* 16.0 (-> arg0 corner 1 x))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 y) (the int (* 16.0 (-> arg0 corner 1 z))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 w) 0)
              )
            (let ((v1-74 (the-as object (&+ sv-208 224))))
              (set! (-> (the-as (inline-array vector) v1-74) 0 x) 0.0)
              (set! (-> (the-as (inline-array vector) v1-74) 0 y) 1.0)
              (set! (-> (the-as (inline-array vector) v1-74) 0 z) 1.0)
              (set! (-> (the-as (inline-array vector) v1-74) 0 w) 0.0)
              )
            (let ((v1-76 (the-as object (&+ sv-208 240))))
              (set! (-> (the-as (inline-array vector4w) v1-76) 0 x) (the int (* 16.0 (-> arg0 corner 2 x))))
              (set! (-> (the-as (inline-array vector4w) v1-76) 0 y) (the int (* 16.0 (-> arg0 corner 2 z))))
              (set! (-> (the-as (inline-array vector4w) v1-76) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-76) 0 w) 0)
              )
            (let ((v1-78 (the-as object (&+ sv-208 256))))
              (set! (-> (the-as (inline-array vector) v1-78) 0 x) 1.0)
              (set! (-> (the-as (inline-array vector) v1-78) 0 y) 1.0)
              (set! (-> (the-as (inline-array vector) v1-78) 0 z) 1.0)
              (set! (-> (the-as (inline-array vector) v1-78) 0 w) 0.0)
              )
            (let ((v1-80 (the-as object (&+ sv-208 272))))
              (set! (-> (the-as (inline-array vector4w) v1-80) 0 x) (the int (* 16.0 (-> arg0 corner 3 x))))
              (set! (-> (the-as (inline-array vector4w) v1-80) 0 y) (the int (* 16.0 (-> arg0 corner 3 z))))
              (set! (-> (the-as (inline-array vector4w) v1-80) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-80) 0 w) 0)
              )
            (&+! (-> sv-20 base) 288)
            )
          )
        )
      )
    (none)
    )
  )

;; WARN: Return type mismatch pointer vs none.
(defmethod draw-frustum-2 ((this minimap) (arg0 minimap-draw-work) (arg1 connection-minimap))
  (local-vars
    (sv-16 process)
    (sv-20 dma-buffer)
    (sv-208 pointer)
    (sv-212 texture)
    (sv-216 vector)
    (sv-220 vector)
    (sv-224 vector)
    (sv-228 matrix)
    (sv-232 matrix)
    )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (let ((s3-0 (handle->process (-> arg1 handle))))
      (set! sv-16 (if (type? s3-0 process-drawable)
                      s3-0
                      )
            )
      )
    (set! sv-20 (-> arg0 buf))
    (when (and sv-16 (nonzero? (-> (the-as process-drawable sv-16) root)))
      (set! sv-208 (-> sv-20 base))
      (set! sv-212 (get-texture map-guard-frustum level-default-minimap))
      (set! sv-216 (new 'stack-no-clear 'vector))
      (set! sv-220 (new 'stack-no-clear 'vector))
      (set! sv-224 (new 'stack-no-clear 'vector))
      (set! sv-228 (new 'stack-no-clear 'matrix))
      (set! sv-232 (new 'stack-no-clear 'matrix))
      (when sv-212
        (set! (-> sv-220 quad) (-> (#if PC_PORT (if (-> *pc-settings* minimap-force-north) *matrix-minimap-north* (matrix-world->local #f #f)) (matrix-world->local #f #f)) fvec quad))
        (set! (-> sv-220 y) 0.0)
        (vector-normalize! sv-220 1.0)
        (vector-z-quaternion! sv-224 (-> (the-as process-drawable sv-16) root quat))
        (vector-xz-normalize! sv-224 1.0)
        (set! (-> sv-224 y) 0.0)
        (set! (-> sv-224 w) 0.0)
        (vector-! sv-216 (target-pos 0) (-> (the-as process-drawable sv-16) root trans))
        (let ((f0-4 (/ (-> sv-216 x) (* (-> this meters-per-texel) (-> this map-inv-scale))))
              (f1-3 (/ (-> sv-216 z) (* (-> this meters-per-texel) (-> this map-inv-scale))))
              )
          (set-vector! (-> sv-228 rvec) (-> sv-220 z) 0.0 (- (-> sv-220 x)) 0.0)
          (set-vector! (-> sv-228 uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> sv-228 fvec) (-> sv-220 x) 0.0 (-> sv-220 z) 0.0)
          (set-vector! (-> sv-228 trans) 164.0 0.0 164.0 1.0)
          (set-vector! (-> sv-232 rvec) (-> sv-224 z) 0.0 (- (-> sv-224 x)) 0.0)
          (set-vector! (-> sv-232 uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> sv-232 fvec) (-> sv-224 x) 0.0 (-> sv-224 z) 0.0)
          (set-vector! (-> sv-232 trans) f0-4 0.0 f1-3 1.0)
          )
        (matrix*! sv-232 sv-232 sv-228)
        (let ((f0-7 12.0))
          (set-vector! (-> arg0 corner 0) (- f0-7) 0.0 0.0 1.0)
          (set-vector! (-> arg0 corner 1) 0.0 0.0 f0-7 1.0)
          (set-vector! (-> arg0 corner 2) 0.0 0.0 (- f0-7) 1.0)
          (set-vector! (-> arg0 corner 3) f0-7 0.0 0.0 1.0)
          )
        (vector-matrix*! (the-as vector (-> arg0 corner)) (the-as vector (-> arg0 corner)) sv-232)
        (vector-matrix*! (-> arg0 corner 1) (-> arg0 corner 1) sv-232)
        (vector-matrix*! (-> arg0 corner 2) (-> arg0 corner 2) sv-232)
        (vector-matrix*! (-> arg0 corner 3) (-> arg0 corner 3) sv-232)
        (let ((v1-47 (new 'stack-no-clear 'vector))
              (a0-39 (new 'stack-no-clear 'vector))
              )
          (.lvf vf1 (&-> arg0 corner 0 quad))
          (.lvf vf2 (&-> arg0 corner 1 quad))
          (.lvf vf3 (&-> arg0 corner 2 quad))
          (.lvf vf4 (&-> arg0 corner 3 quad))
          (.min.vf vf5 vf1 vf2)
          (.min.vf vf5 vf5 vf3)
          (.min.vf vf5 vf5 vf4)
          (.max.vf vf6 vf1 vf2)
          (.max.vf vf6 vf6 vf3)
          (.max.vf vf6 vf6 vf4)
          (.svf (&-> v1-47 quad) vf5)
          (.svf (&-> a0-39 quad) vf6)
          (when (and (< (-> a0-39 x) 228.0) (< (-> a0-39 z) 228.0) (< 100.0 (-> v1-47 x)) (< 100.0 (-> v1-47 z)))
            (let* ((a3-0 (-> arg1 class color))
                   ;; og:preserve-this
                   (a2-6 (the int (+ (* (the-as uint 320) (-> arg1 class icon-xy x)) 8)))
                   (a1-14 (the int (+ (* (the-as uint 320) (-> arg1 class icon-xy y)) 8)))
                   (v1-54 (+ a2-6 304))
                   (a0-49 (+ a1-14 304))
                   )
              (let* ((t0-2 (copy-and-set-field a3-0 r (shr (* (-> a3-0 r) (the-as uint (-> this color x))) 7)))
                     (t0-9 (copy-and-set-field t0-2 g (shr (* (-> t0-2 g) (the-as uint (-> this color y))) 7)))
                     (a3-13 (copy-and-set-field
                              (copy-and-set-field t0-9 b (shr (* (-> t0-9 b) (the-as uint (-> this color z))) 7))
                              a
                              (the int (* 128.0 (-> arg1 alpha)))
                              )
                            )
                     )
                (let ((t0-22 (-> this draw3-tmpl dma-vif quad)))
                  (set! (-> (the-as (pointer uint128) sv-208) 0) t0-22)
                  )
                (let ((t0-23 (-> this draw3-tmpl quad 1)))
                  (set! (-> (the-as (pointer uint128) sv-208) 1) t0-23)
                  )
                (let ((t0-25 (the-as (object object) (&-> (the-as (pointer uint128) sv-208) 2))))
                  (set! (-> (the-as (inline-array vector4w) t0-25) 0 x) (the-as int (-> a3-13 r)))
                  (set! (-> (the-as (inline-array vector4w) t0-25) 0 y) (the-as int (-> a3-13 g)))
                  (set! (-> (the-as (inline-array vector4w) t0-25) 0 z) (the-as int (-> a3-13 b)))
                  (set! (-> (the-as (inline-array vector4w) t0-25) 0 w) (the-as int (-> a3-13 a)))
                  )
                )
              (let ((a3-16 (the-as (inline-array vector4w) (&+ sv-208 48))))
                (set! (-> a3-16 0 x) a2-6)
                (set! (-> a3-16 0 y) a1-14)
                (set! (-> a3-16 0 z) 0)
                (set! (-> a3-16 0 w) 0)
                )
              (let ((a3-18 (the-as object (&+ sv-208 64))))
                (set! (-> (the-as (inline-array vector4w) a3-18) 0 x) (the int (* 16.0 (-> arg0 corner 0 x))))
                (set! (-> (the-as (inline-array vector4w) a3-18) 0 y) (the int (* 16.0 (-> arg0 corner 0 z))))
                (set! (-> (the-as (inline-array vector4w) a3-18) 0 z) 0)
                (set! (-> (the-as (inline-array vector4w) a3-18) 0 w) 0)
                )
              (let ((a3-20 (the-as (inline-array vector4w) (&+ sv-208 80))))
                (set! (-> a3-20 0 x) a2-6)
                (set! (-> a3-20 0 y) a0-49)
                (set! (-> a3-20 0 z) 0)
                (set! (-> a3-20 0 w) 0)
                )
              (let ((a2-8 (the-as object (&+ sv-208 96))))
                (set! (-> (the-as (inline-array vector4w) a2-8) 0 x) (the int (* 16.0 (-> arg0 corner 1 x))))
                (set! (-> (the-as (inline-array vector4w) a2-8) 0 y) (the int (* 16.0 (-> arg0 corner 1 z))))
                (set! (-> (the-as (inline-array vector4w) a2-8) 0 z) 0)
                (set! (-> (the-as (inline-array vector4w) a2-8) 0 w) 0)
                )
              (let ((a2-10 (the-as (inline-array vector4w) (&+ sv-208 112))))
                (set! (-> a2-10 0 x) v1-54)
                (set! (-> a2-10 0 y) a1-14)
                (set! (-> a2-10 0 z) 0)
                (set! (-> a2-10 0 w) 0)
                )
              (let ((a1-16 (the-as object (&+ sv-208 128))))
                (set! (-> (the-as (inline-array vector4w) a1-16) 0 x) (the int (* 16.0 (-> arg0 corner 2 x))))
                (set! (-> (the-as (inline-array vector4w) a1-16) 0 y) (the int (* 16.0 (-> arg0 corner 2 z))))
                (set! (-> (the-as (inline-array vector4w) a1-16) 0 z) 0)
                (set! (-> (the-as (inline-array vector4w) a1-16) 0 w) 0)
                )
              (let ((a1-18 (the-as (inline-array vector4w) (&+ sv-208 144))))
                (set! (-> a1-18 0 x) v1-54)
                (set! (-> a1-18 0 y) a0-49)
                (set! (-> a1-18 0 z) 0)
                (set! (-> a1-18 0 w) 0)
                )
              )
            (let ((v1-56 (the-as object (&+ sv-208 160))))
              (set! (-> (the-as (inline-array vector4w) v1-56) 0 x) (the int (* 16.0 (-> arg0 corner 3 x))))
              (set! (-> (the-as (inline-array vector4w) v1-56) 0 y) (the int (* 16.0 (-> arg0 corner 3 z))))
              (set! (-> (the-as (inline-array vector4w) v1-56) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-56) 0 w) 0)
              )
            (&+! (-> sv-20 base) 176)
            )
          )
        )
      )
    (none)
    )
  )

(defmethod sub-draw-1-1 ((this minimap) (arg0 minimap-draw-work))
  (let ((s5-0 (-> arg0 buf)))
    (set-display-gs-state s5-0 (the-as int (-> *map-texture-base* vram-page)) 128 128 0 0)
    (let ((s3-0 (-> s5-0 base)))
      (set! (-> (the-as (pointer uint128) s3-0) 0) (-> this adgif-tmpl dma-vif quad))
      (set! (-> (the-as (pointer uint128) s3-0) 1) (-> this adgif-tmpl quad 1))
      (let ((a1-2 (-> this last-tex)))
        (if (not a1-2)
            (set! a1-2 (get-texture common-white common))
            )
        (adgif-shader<-texture-simple! (the-as adgif-shader (&+ s3-0 32)) (the-as texture a1-2))
        )
      )
    (&+! (-> s5-0 base) 112)
    (dma-buffer-add-gs-set s5-0
                           (clamp-1 (new 'static 'gs-clamp))
                           (test-1 (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always)))
                           (texa (new 'static 'gs-texa :ta1 #x80))
                           )
    (let ((s3-1 (-> s5-0 base)))
      ;; og:preserve-this this fixes minimap stretching at non-4x3 aspeect ratio
      (let ((f30-0 (#if PC_PORT 1.0 (-> *video-params* relative-x-scale))))
        (set! (-> (the-as (pointer uint128) s3-1) 0) (-> this draw2-tmpl dma-vif quad))
        (set! (-> (the-as (pointer uint128) s3-1) 1) (-> this draw2-tmpl quad 1))
        (let ((s2-0 (new-stack-vector0)))
          (let ((s1-0 (new-stack-vector0)))
            (set! (-> s1-0 quad) (-> (#if PC_PORT (if (-> *pc-settings* minimap-force-north) *matrix-minimap-north* (matrix-local->world #f #f)) (matrix-local->world #f #f)) fvec quad))
            (set! (-> s1-0 y) 0.0)
            (vector-normalize! s1-0 1.0)
            (let ((v1-16 (-> arg0 mat)))
              (set! (-> v1-16 rvec x) (* (-> s1-0 z) f30-0))
              (set! (-> v1-16 rvec y) 0.0)
              (set! (-> v1-16 rvec z) (- (-> s1-0 x)))
              (set! (-> v1-16 rvec w) 0.0)
              )
            (set-vector! (-> arg0 mat uvec) 0.0 1.0 0.0 0.0)
            (set-vector! (-> arg0 mat fvec) (* (-> s1-0 x) f30-0) 0.0 (-> s1-0 z) 0.0)
            )
          (vector-! s2-0 (target-pos 0) (-> this minimap-corner))
          (set! (-> s2-0 x) (/ (-> s2-0 x) (-> this pos-scale)))
          (set! (-> s2-0 z) (/ (-> s2-0 z) (-> this pos-scale)))
          (vector+! (-> arg0 mat trans) s2-0 (-> this offset))
          )
        )
      (set! (-> arg0 mat trans y) 0.0)
      (set! (-> arg0 corner 0 x) (* 0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 0 z) (* 0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 0 w) 1.0)
      (set! (-> arg0 corner 1 x) (* -0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 1 z) (* 0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 1 w) 1.0)
      (set! (-> arg0 corner 2 x) (* 0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 2 z) (* -0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 2 w) 1.0)
      (set! (-> arg0 corner 3 x) (* -0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 3 z) (* -0.25 (-> this map-inv-scale)))
      (set! (-> arg0 corner 3 w) 1.0)
      (vector-matrix*! (the-as vector (-> arg0 corner)) (the-as vector (-> arg0 corner)) (-> arg0 mat))
      (vector-matrix*! (-> arg0 corner 1) (-> arg0 corner 1) (-> arg0 mat))
      (vector-matrix*! (-> arg0 corner 2) (-> arg0 corner 2) (-> arg0 mat))
      (vector-matrix*! (-> arg0 corner 3) (-> arg0 corner 3) (-> arg0 mat))
      (let ((v1-33 (the-as object (&+ s3-1 32))))
        (set! (-> (the-as (inline-array vector4w) v1-33) 0 x) 128)
        (set! (-> (the-as (inline-array vector4w) v1-33) 0 y) 128)
        (set! (-> (the-as (inline-array vector4w) v1-33) 0 z) 128)
        (set! (-> (the-as (inline-array vector4w) v1-33) 0 w) 128)
        )
      (let ((v1-34 (the-as object (&+ s3-1 48))))
        (set! (-> (the-as (inline-array vector) v1-34) 0 x) (-> arg0 corner 0 x))
        (set! (-> (the-as (inline-array vector) v1-34) 0 y) (-> arg0 corner 0 z))
        (set! (-> (the-as (inline-array vector) v1-34) 0 z) 1.0)
        (set! (-> (the-as (inline-array vector) v1-34) 0 w) 1.0)
        )
      (let ((v1-35 (the-as (inline-array vector4w) (&+ s3-1 64))))
        (set! (-> v1-35 0 x) 0)
        (set! (-> v1-35 0 y) 0)
        (set! (-> v1-35 0 z) #xffffff)
        (set! (-> v1-35 0 w) 0)
        )
      (let ((v1-36 (the-as object (&+ s3-1 80))))
        (set! (-> (the-as (inline-array vector) v1-36) 0 x) (-> arg0 corner 1 x))
        (set! (-> (the-as (inline-array vector) v1-36) 0 y) (-> arg0 corner 1 z))
        (set! (-> (the-as (inline-array vector) v1-36) 0 z) 1.0)
        (set! (-> (the-as (inline-array vector) v1-36) 0 w) 1.0)
        )
      (let ((v1-37 (the-as object (&+ s3-1 96))))
        (set! (-> (the-as (inline-array vector4w) v1-37) 0 x) 2048)
        (set! (-> (the-as (inline-array vector4w) v1-37) 0 y) 0)
        (set! (-> (the-as (inline-array vector4w) v1-37) 0 z) #xffffff)
        (set! (-> (the-as (inline-array vector4w) v1-37) 0 w) 0)
        )
      (let ((v1-38 (the-as object (&+ s3-1 112))))
        (set! (-> (the-as (inline-array vector) v1-38) 0 x) (-> arg0 corner 2 x))
        (set! (-> (the-as (inline-array vector) v1-38) 0 y) (-> arg0 corner 2 z))
        (set! (-> (the-as (inline-array vector) v1-38) 0 z) 1.0)
        (set! (-> (the-as (inline-array vector) v1-38) 0 w) 1.0)
        )
      (let ((v1-39 (the-as (inline-array vector4w) (&+ s3-1 128))))
        (set! (-> v1-39 0 x) 0)
        (set! (-> v1-39 0 y) 2048)
        (set! (-> v1-39 0 z) #xffffff)
        (set! (-> v1-39 0 w) 0)
        )
      (let ((v1-40 (the-as object (&+ s3-1 144))))
        (set! (-> (the-as (inline-array vector) v1-40) 0 x) (-> arg0 corner 3 x))
        (set! (-> (the-as (inline-array vector) v1-40) 0 y) (-> arg0 corner 3 z))
        (set! (-> (the-as (inline-array vector) v1-40) 0 z) 1.0)
        (set! (-> (the-as (inline-array vector) v1-40) 0 w) 1.0)
        )
      (let ((v1-41 (the-as object (&+ s3-1 160))))
        (set! (-> (the-as (inline-array vector4w) v1-41) 0 x) 2048)
        (set! (-> (the-as (inline-array vector4w) v1-41) 0 y) 2048)
        (set! (-> (the-as (inline-array vector4w) v1-41) 0 z) #xffffff)
        (set! (-> (the-as (inline-array vector4w) v1-41) 0 w) 0)
        )
      )
    (&+! (-> s5-0 base) 176)
    (let ((f0-57 1.0))
      (when *target*
        (if (focus-test? *target* pilot)
            (set! f0-57 0.0)
            )
        )
      (seek! (-> this frustum-alpha) f0-57 (seconds-per-frame))
      )
    (dma-buffer-add-gs-set s5-0 (xyoffset-1 (new 'static 'gs-xy-offset :ofx #x640 :ofy #x640)))
    (when (!= (-> this frustum-alpha) 0.0)
      (let ((s3-2 (-> *minimap* engine alive-list)))
        (while s3-2
          (let ((a2-6 s3-2))
            (if (logtest? (-> a2-6 class flags) (minimap-flag frustum))
                (draw-frustum-1 this arg0 a2-6)
                )
            )
          (set! s3-2 (-> s3-2 next))
          )
        )
      )
    (let ((s2-1 (-> arg0 buf base))
          (s3-3 (get-texture mini-map-icons level-default-minimap))
          )
      (when s3-3
        (set! (-> (the-as (pointer uint128) s2-1) 0) (-> this adgif-tmpl dma-vif quad))
        (set! (-> (the-as (pointer uint128) s2-1) 1) (-> this adgif-tmpl quad 1))
        (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as (pointer uint128) s2-1) 2)) s3-3)
        (&+! (-> arg0 buf base) 112)
        )
      (if (not s3-3)
          (format *stdebug* "minimap: mini-map-icons texture is #f~%")
          )
      )
    (let ((s3-4 (-> *minimap* engine alive-list)))
      (while s3-4
        (let ((a2-7 s3-4))
          (if (logtest? (-> a2-7 class flags) (minimap-flag frustum))
              (draw-frustum-2 this arg0 a2-7)
              )
          )
        (set! s3-4 (-> s3-4 next))
        )
      )
    (let ((s3-5 (-> arg0 buf base))
          (a1-37 (get-texture map-target-marker level-default-minimap))
          )
      (when a1-37
        (set! (-> (the-as (pointer uint128) s3-5) 0) (-> this adgif-tmpl dma-vif quad))
        (set! (-> (the-as (pointer uint128) s3-5) 1) (-> this adgif-tmpl quad 1))
        (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as (pointer uint128) s3-5) 2)) a1-37)
        (&+! (-> arg0 buf base) 112)
        )
      )
    (let ((s3-6 (-> *minimap* engine alive-list)))
      (while s3-6
        (let ((a2-8 s3-6))
          (if (logtest? (-> a2-8 class flags) (minimap-flag racer))
              (draw-racer-2 this arg0 a2-8)
              )
          )
        (set! s3-6 (-> s3-6 next))
        )
      )
    (dma-buffer-add-gs-set s5-0
                           (frame-1 (new 'static 'gs-frame :fbw #x2 :fbmsk #xffffff :fbp (-> *map-texture-base* vram-page)))
                           (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                           (xyoffset-1 (new 'static 'gs-xy-offset))
                           )
    (let ((s3-7 (-> s5-0 base)))
      (set! (-> (the-as (pointer uint128) s3-7) 0) (-> this adgif-tmpl dma-vif quad))
      (set! (-> (the-as (pointer uint128) s3-7) 1) (-> this adgif-tmpl quad 1))
      (adgif-shader<-texture-simple!
        (the-as adgif-shader (&-> (the-as (pointer uint128) s3-7) 2))
        (get-texture minimap-mask level-default-minimap)
        )
      (set! (-> (the-as (pointer uint128) s3-7) 7) (-> this sprite-tmpl dma-vif quad))
      (set! (-> (the-as (pointer uint128) s3-7) 8) (-> this sprite-tmpl quad 1))
      (let ((v1-110 (the-as object (&+ s3-7 144))))
        (set! (-> (the-as (inline-array vector4w) v1-110) 0 x) 128)
        (set! (-> (the-as (inline-array vector4w) v1-110) 0 y) 128)
        (set! (-> (the-as (inline-array vector4w) v1-110) 0 z) 128)
        (set! (-> (the-as (inline-array vector4w) v1-110) 0 w) 128)
        )
      (let ((v1-111 (the-as (inline-array vector4w) (&+ s3-7 160))))
        (set! (-> v1-111 0 x) 0)
        (set! (-> v1-111 0 y) 0)
        (set! (-> v1-111 0 z) 0)
        (set! (-> v1-111 0 w) 0)
        )
      (let ((v1-112 (the-as (inline-array vector4w) (&+ s3-7 176))))
        (set! (-> v1-112 0 x) 0)
        (set! (-> v1-112 0 y) 0)
        (set! (-> v1-112 0 z) #xffffff)
        (set! (-> v1-112 0 w) 0)
        )
      (let ((v1-113 (the-as object (&+ s3-7 192))))
        (set! (-> (the-as (inline-array vector4w) v1-113) 0 x) 1024)
        (set! (-> (the-as (inline-array vector4w) v1-113) 0 y) 1024)
        (set! (-> (the-as (inline-array vector4w) v1-113) 0 z) 0)
        (set! (-> (the-as (inline-array vector4w) v1-113) 0 w) 0)
        )
      (let ((v1-114 (the-as object (&+ s3-7 208))))
        (set! (-> (the-as (inline-array vector4w) v1-114) 0 x) 2048)
        (set! (-> (the-as (inline-array vector4w) v1-114) 0 y) 2048)
        (set! (-> (the-as (inline-array vector4w) v1-114) 0 z) #xffffff)
        (set! (-> (the-as (inline-array vector4w) v1-114) 0 w) 0)
        )
      )
    (&+! (-> s5-0 base) 224)
    (set! (-> arg0 buf) s5-0)
    )
  0
  (none)
  )

(defmethod sub-draw-1-2 ((this minimap) (arg0 minimap-draw-work))
  (local-vars (sv-48 vector) (sv-52 vector) (sv-56 vector) (sv-64 int) (sv-80 int))
  (let ((s5-0 (-> arg0 buf)))
    (reset-display-gs-state *display* s5-0)
    (dma-buffer-add-gs-set s5-0
                           (test-1 (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal)))
                           (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                           (tex0-1 (new 'static 'gs-tex0
                                     :tbw #x2
                                     :tcc #x1
                                     :th (log2 128)
                                     :tw (log2 128)
                                     :tbp0 (-> *map-texture-base* vram-block)
                                     )
                                   )
                           (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
                           (clamp-1 (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp)))
                           (texflush 0)
                           )
    (let ((f30-0 (-> *video-params* relative-x-scale)))
      (let ((s3-1 (the-as object (-> s5-0 base)))
            (v1-22 (the int (* 112.0 f30-0)))
            )
        0
        0
        (let ((s0-0 (* (+ (-> arg0 draw-pos y) 1840) 16))
              (s2-1 (* (+ (-> arg0 draw-pos y) 1952) 16))
              (s1-2 (-> arg0 draw-pos z))
              )
          (cond
            ((-> arg0 justify-right)
             (set! sv-64 (* (+ (- 1792 v1-22) (-> arg0 draw-pos x)) 16))
             (set! sv-80 (* (+ (-> arg0 draw-pos x) 1792) 16))
             sv-80
             )
            (else
              (set! sv-64 (* (+ (-> arg0 draw-pos x) 1792) 16))
              (set! sv-80 (* (+ v1-22 1792 (-> arg0 draw-pos x)) 16))
              sv-80
              )
            )
          (set! (-> (the-as (inline-array vector4w) s3-1) 0 quad) (-> this sprite-tmpl dma-vif quad))
          (set! (-> (the-as (inline-array vector4w) s3-1) 1 quad) (-> this sprite-tmpl quad 1))
          (let ((v1-36 (-> this color quad)))
            (set! (-> (the-as (inline-array vector4w) s3-1) 2 quad) v1-36)
            )
          (cond
            ((get-horizontal-flip-flag *blit-displays-work*)
             (set-vector! (-> (the-as (inline-array vector4w) s3-1) 3) 0 0 0 0)
             (set-vector! (-> (the-as (inline-array vector4w) s3-1) 4) sv-80 s0-0 s1-2 0)
             (set-vector! (-> (the-as (inline-array vector4w) s3-1) 5) 2048 2048 0 0)
             (set-vector! (-> (the-as (inline-array vector4w) s3-1) 6) sv-64 s2-1 s1-2 0)
             )
            (else
              (let ((v1-42 (the-as (inline-array vector4w) (&+ (the-as pointer s3-1) 48))))
                (set! (-> v1-42 0 x) 0)
                (set! (-> v1-42 0 y) 0)
                (set! (-> v1-42 0 z) 0)
                (set! (-> v1-42 0 w) 0)
                )
              (let ((a0-31 (the-as object (&+ (the-as pointer s3-1) 64))))
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 x) sv-64)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 y) s0-0)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 z) s1-2)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 w) 0)
                )
              (let ((v1-44 (the-as object (&+ (the-as pointer s3-1) 80))))
                (set! (-> (the-as (inline-array vector4w) v1-44) 0 x) 2048)
                (set! (-> (the-as (inline-array vector4w) v1-44) 0 y) 2048)
                (set! (-> (the-as (inline-array vector4w) v1-44) 0 z) 0)
                (set! (-> (the-as (inline-array vector4w) v1-44) 0 w) 0)
                )
              (let ((v1-45 (the-as object (&+ (the-as pointer s3-1) 96))))
                (set! (-> (the-as (inline-array vector4w) v1-45) 0 x) sv-80)
                (set! (-> (the-as (inline-array vector4w) v1-45) 0 y) s2-1)
                (set! (-> (the-as (inline-array vector4w) v1-45) 0 z) s1-2)
                (set! (-> (the-as (inline-array vector4w) v1-45) 0 w) 0)
                )
              )
            )
          )
        )
      (&+! (-> s5-0 base) 112)
      (dma-buffer-add-gs-set s5-0
                             (test-1 (new 'static 'gs-test :ate #x1 :atst (gs-atest greater) :zte #x1 :ztst (gs-ztest always)))
                             )
      (set! sv-48 (new-stack-vector0))
      (set! sv-52 (new-stack-vector0))
      (set! sv-56 (target-pos 0))
      (set! (-> sv-52 quad) (-> (#if PC_PORT (if (-> *pc-settings* minimap-force-north) *matrix-minimap-north* (matrix-world->local #f #f)) (matrix-world->local #f #f)) fvec quad))
      (set! (-> sv-52 y) 0.0)
      (vector-normalize! sv-52 1.0)
      (cond
        ((get-horizontal-flip-flag *blit-displays-work*)
         (let ((v1-57 (-> arg0 mat)))
           ;; og:preserve-this
           (set! (-> v1-57 rvec x) (* (-> sv-52 z) (- f30-0)))
           (set! (-> v1-57 rvec y) 0.0)
           (set! (-> v1-57 rvec z) (- (-> sv-52 x)))
           (set! (-> v1-57 rvec w) 0.0)
           )
         (set-vector! (-> arg0 mat uvec) 0.0 1.0 0.0 0.0)
         (set-vector! (-> arg0 mat fvec) (* (-> sv-52 x) (- f30-0)) 0.0 (-> sv-52 z) 0.0)
         (set-vector! (-> arg0 mat trans) 0.0 0.0 (the float (+ (-> arg0 draw-pos y) 1896)) 1.0)
         )
        (else
          (let ((v1-61 (-> arg0 mat)))
            (set! (-> v1-61 rvec x) (* (-> sv-52 z) f30-0))
            (set! (-> v1-61 rvec y) 0.0)
            (set! (-> v1-61 rvec z) (- (-> sv-52 x)))
            (set! (-> v1-61 rvec w) 0.0)
            )
          (set-vector! (-> arg0 mat uvec) 0.0 1.0 0.0 0.0)
          (set-vector! (-> arg0 mat fvec) (* (-> sv-52 x) f30-0) 0.0 (-> sv-52 z) 0.0)
          (set-vector! (-> arg0 mat trans) 0.0 0.0 (the float (+ (-> arg0 draw-pos y) 1896)) 1.0)
          )
        )
      (let ((v1-66 (the int (* 56.0 f30-0))))
        (if (-> arg0 justify-right)
            (set! (-> arg0 mat trans x) (the float (+ (- 1792 v1-66) (-> arg0 draw-pos x))))
            (set! (-> arg0 mat trans x) (the float (+ v1-66 1792 (-> arg0 draw-pos x))))
            )
        )
      )
    (set! (-> arg0 buf) s5-0)
    )
  0
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defmethod draw-connection ((this minimap) (arg0 minimap-draw-work) (arg1 connection-minimap))
  (let ((s1-0 (target-pos 0)))
    (cond
      ((= (-> arg1 position) #t)
       (let* ((s3-0 (handle->process (-> arg1 handle)))
              (v1-4 (if (type? s3-0 process-drawable)
                        s3-0
                        )
                    )
              )
         (when (and v1-4 (nonzero? (-> (the-as process-drawable v1-4) root)))
           (set! (-> arg1 last-world-pos quad) (-> (the-as process-drawable v1-4) root trans quad))
           (vector-! (-> arg1 last-relative-pos) s1-0 (-> arg1 last-world-pos))
           )
         )
       )
      ((and (= (logand (the-as int (-> arg1 position)) 7) 4)
            (= (-> (the-as entity-actor (-> arg1 position)) type) entity-actor)
            )
       (let* ((v1-15 (the-as structure (-> arg1 position)))
              (s3-1 (if (the-as vector v1-15)
                        (-> (the-as entity-actor v1-15) extra process)
                        )
                    )
              (a0-16 (if (type? s3-1 process-drawable)
                         s3-1
                         )
                     )
              )
         (cond
           (a0-16
             (set! (-> arg1 last-world-pos quad) (-> (the-as process-drawable a0-16) root trans quad))
             (vector-! (-> arg1 last-relative-pos) s1-0 (-> arg1 last-world-pos))
             )
           (else
             (set! (-> arg1 last-world-pos quad) (-> (the-as entity-actor (-> arg1 position)) extra trans quad))
             (vector-! (-> arg1 last-relative-pos) s1-0 (-> arg1 last-world-pos))
             )
           )
         )
       )
      (else
        (set! (-> arg1 last-world-pos quad) (-> arg1 position quad))
        (vector-! (-> arg1 last-relative-pos) s1-0 (-> arg1 last-world-pos))
        )
      )
    (let ((s3-2 (new 'stack-no-clear 'vector))
          (s2-0 #f)
          )
      1.0
      0.0
      (let ((f30-0 (/ 1.0 (* (-> this icon-inv-scale) (-> this meters-per-texel)))))
        (set! (-> s3-2 quad) (-> arg1 last-relative-pos quad))
        (set! (-> s3-2 x) (* (-> s3-2 x) f30-0))
        (set! (-> s3-2 z) (* (-> s3-2 z) f30-0))
        (set! (-> s3-2 y) 0.0)
        (set! (-> s3-2 w) 1.0)
        (let* ((v1-29 s3-2)
               (f28-0 (sqrtf (+ (* (-> v1-29 x) (-> v1-29 x)) (* (-> v1-29 z) (-> v1-29 z)))))
               )
          (if (or (and (logtest? (minimap-flag local-only) (-> arg1 class flags))
                       (not (logtest? (the-as minimap-flag (logand #x3c0000 (-> arg0 global-flags))) (-> arg1 class flags)))
                       )
                  (logtest? (-> arg1 class flags) (minimap-flag bigmap-only))
                  )
              (set! s2-0 #t)
              )
          (cond
            ((logtest? (-> arg1 class flags) (minimap-flag trail))
             (cond
               (*trail-graph*
                 (let ((a2-2 (get-trail-for-connection this arg1 #f)))
                   (cond
                     ((not a2-2)
                      (when (!= (-> arg1 alpha) 0.0)
                        (when (not (get-trail-for-connection this arg1 #t))
                          (let ((s2-1 (-> *minimap* engine alive-list)))
                            (while s2-1
                              (let ((a1-15 s2-1))
                                (if (and (= (-> a1-15 alpha) 0.0) (logtest? (-> arg1 class flags) (minimap-flag trail)))
                                    (free-trail-by-connection *minimap* a1-15)
                                    )
                                )
                              (set! s2-1 (-> s2-1 next))
                              )
                            )
                          )
                        )
                      (set! s2-0 #t)
                      (set! (-> arg1 edge-ry) -131072)
                      )
                     ((time-elapsed? (the-as int (-> a2-2 last-updated)) (seconds 5))
                      (set! s2-0 #t)
                      (set! (-> arg1 edge-ry) -131072)
                      )
                     ((< 50.0 f28-0)
                      (let ((s0-0 (new 'stack-no-clear 'vector)))
                        (set! (-> s0-0 quad) (-> s3-2 quad))
                        (let ((s1-1 (get-icon-draw-pos *minimap* arg1 a2-2 s1-0 f30-0 s3-2)))
                          (if (not s1-1)
                              (vector-normalize-copy! s3-2 s0-0 50.0)
                              )
                          (let ((f30-1 (atan (-> s3-2 x) (-> s3-2 z))))
                            (let ((f28-1 (the float (-> arg1 edge-ry))))
                              (when (!= f28-1 -131072.0)
                                (let* ((f0-20 (deg- f30-1 f28-1))
                                       (f1-7 (fabs f0-20))
                                       (f2-3 (* 16384.0 (seconds-per-frame)))
                                       )
                                  (when (< f2-3 f1-7)
                                    (set! f30-1 (+ f28-1 (if (>= f0-20 0.0)
                                                             f2-3
                                                             (- f2-3)
                                                             )
                                                   )
                                          )
                                    (set-vector! s3-2 (sin f30-1) 0.0 (cos f30-1) 1.0)
                                    (vector-normalize! s3-2 (if s1-1
                                                                50.0
                                                                66.0
                                                                )
                                                       )
                                    )
                                  )
                                )
                              )
                            (set! (-> arg1 edge-ry) (the int f30-1))
                            )
                          )
                        )
                      )
                     (else
                       (set! (-> arg1 edge-ry) (the int (atan (-> s3-2 x) (-> s3-2 z))))
                       )
                     )
                   )
                 )
               (else
                 (set! s2-0 #t)
                 (set! (-> arg1 edge-ry) -131072)
                 )
               )
             )
            ((logtest? (-> arg1 class flags) (minimap-flag clamp))
             (cond
               ((< 50.0 f28-0)
                (let ((a1-22 (new 'stack-no-clear 'vector)))
                  (set! (-> a1-22 quad) (-> s3-2 quad))
                  (vector-normalize-copy! s3-2 a1-22 54.0)
                  )
                (let ((f30-2 (atan (-> s3-2 x) (-> s3-2 z))))
                  (let ((f28-2 (the float (-> arg1 edge-ry))))
                    (when (!= f28-2 -131072.0)
                      (let* ((f0-37 (deg- f30-2 f28-2))
                             (f1-9 (fabs f0-37))
                             (f2-5 (* 16384.0 (seconds-per-frame)))
                             )
                        (when (< f2-5 f1-9)
                          (set! f30-2 (+ f28-2 (if (>= f0-37 0.0)
                                                   f2-5
                                                   (- f2-5)
                                                   )
                                         )
                                )
                          (set-vector! s3-2 (sin f30-2) 0.0 (cos f30-2) 1.0)
                          (vector-normalize! s3-2 54.0)
                          )
                        )
                      )
                    )
                  (set! (-> arg1 edge-ry) (the int f30-2))
                  )
                )
               (else
                 (set! (-> arg1 edge-ry) (the int (atan (-> s3-2 x) (-> s3-2 z))))
                 )
               )
             )
            (else
              (if (< 50.0 f28-0)
                  (set! s2-0 #t)
                  )
              )
            )
          )
        )
      (if (or (logtest? (-> arg1 class flags) (minimap-flag frustum))
              (logtest? (-> arg1 class flags) (minimap-flag racer))
              (and (logtest? (-> arg1 class flags) (minimap-flag flash))
                   (< (logand (-> *display* base-clock integral-frame-counter) 15) (seconds 0.027))
                   )
              )
          (set! s2-0 #t)
          )
      (if (logtest? (-> arg1 class flags) (minimap-flag goal))
          (set! (-> arg1 class icon-xy x) (the-as uint (mod (the int (-> this goal-time)) 6)))
          )
      (when (not s2-0)
        (vector-matrix*! s3-2 s3-2 (-> arg0 mat))
        (let ((v1-122 (-> arg0 buf base)))
          (let* ((f0-52 (-> arg1 class scale))
                 (a1-28 (-> arg1 class color))
                 (a1-35 (copy-and-set-field a1-28 r (shr (* (-> a1-28 r) (the-as uint (-> this color x))) 7)))
                 (a1-42 (copy-and-set-field a1-35 g (shr (* (-> a1-35 g) (the-as uint (-> this color y))) 7)))
                 (a0-78 (copy-and-set-field
                          (copy-and-set-field a1-42 b (shr (* (-> a1-42 b) (the-as uint (-> this color z))) 7))
                          a
                          (the int (* 128.0 (-> arg1 alpha)))
                          )
                        )
                 )
            (let ((f1-16 (* 20.0 (-> *video-params* relative-x-scale) f0-52))
                  (f0-53 (* 20.0 f0-52))
                  )
              (set! (-> arg0 corner 0 x) (the float (the int (- (-> s3-2 x) (* 0.5 f1-16)))))
              (set! (-> arg0 corner 0 z) (the float (the int (- (-> s3-2 z) (* 0.5 f0-53)))))
              ;; og:preserve-this
              (#when PC_PORT
                ;; pc port note : don't align icons to PS2 framebuffer positions since
                ;; it results in jagged motion on PC, since the framebuffer can be any size we want
                (when (-> *pc-settings* smooth-minimap?)
                  (set! (-> arg0 corner 0 x) (- (-> s3-2 x) (* 0.5 f1-16)))
                  (set! (-> arg0 corner 0 z) (- (-> s3-2 z) (* 0.5 f0-53)))
                  )
                )
              (set! (-> arg0 corner 1 x) (+ (-> arg0 corner 0 x) f1-16))
              (set! (-> arg0 corner 1 z) (+ (-> arg0 corner 0 z) f0-53))
              )
            (let* ((a3-1 (the int (+ (* (the-as uint 320) (-> arg1 class icon-xy x)) 8)))
                   (t0-1 (the int (+ (* (the-as uint 320) (-> arg1 class icon-xy y)) 8)))
                   (a1-65 (+ a3-1 300)) ;; og:preserve-this fix icon misalign
                   (a2-14 (+ t0-1 300)) ;; og:preserve-this fix icon misalign
                   )
              (set! (-> (the-as (pointer uint128) v1-122) 0) (-> this sprite-tmpl dma-vif quad))
              (set! (-> (the-as (pointer uint128) v1-122) 1) (-> this sprite-tmpl quad 1))
              (let ((t1-3 (the-as object (&+ v1-122 32))))
                (set! (-> (the-as (inline-array vector4w) t1-3) 0 x) (the-as int (-> a0-78 r)))
                (set! (-> (the-as (inline-array vector4w) t1-3) 0 y) (the-as int (-> a0-78 g)))
                (set! (-> (the-as (inline-array vector4w) t1-3) 0 z) (the-as int (-> a0-78 b)))
                (set! (-> (the-as (inline-array vector4w) t1-3) 0 w) (the-as int (-> a0-78 a)))
                )
              (let ((a0-80 (the-as (inline-array vector4w) (&+ v1-122 48))))
                (set! (-> a0-80 0 x) a3-1)
                (set! (-> a0-80 0 y) t0-1)
                (set! (-> a0-80 0 z) 0)
                (set! (-> a0-80 0 w) 0)
                )
              (let ((a0-81 (the-as object (&+ v1-122 64))))
                (set! (-> (the-as (inline-array vector4w) a0-81) 0 x) (the int (* 16.0 (-> arg0 corner 0 x))))
                (set! (-> (the-as (inline-array vector4w) a0-81) 0 y) (the int (* 16.0 (-> arg0 corner 0 z))))
                (set! (-> (the-as (inline-array vector4w) a0-81) 0 z) #xffffff)
                (set! (-> (the-as (inline-array vector4w) a0-81) 0 w) 0)
                )
              (let ((a0-82 (the-as (inline-array vector4w) (&+ v1-122 80))))
                (set! (-> a0-82 0 x) a1-65)
                (set! (-> a0-82 0 y) a2-14)
                (set! (-> a0-82 0 z) 0)
                (set! (-> a0-82 0 w) 0)
                )
              )
            )
          (let ((v1-123 (the-as object (&+ v1-122 96))))
            (set! (-> (the-as (inline-array vector4w) v1-123) 0 x) (the int (* 16.0 (-> arg0 corner 1 x))))
            (set! (-> (the-as (inline-array vector4w) v1-123) 0 y) (the int (* 16.0 (-> arg0 corner 1 z))))
            (set! (-> (the-as (inline-array vector4w) v1-123) 0 z) #xffffff)
            (set! (-> (the-as (inline-array vector4w) v1-123) 0 w) 0)
            )
          )
        (&+! (-> arg0 buf base) 112)
        )
      )
    )
  (none)
  )

(defmethod draw-1 ((this minimap) (arg0 dma-buffer) (arg1 vector4w) (arg2 symbol))
  (local-vars (v1-35 uint128))
  (let ((gp-0 (new 'stack-no-clear 'minimap-draw-work)))
    (set! (-> gp-0 buf) arg0)
    (set! (-> gp-0 draw-pos quad) (-> arg1 quad))
    (set! (-> gp-0 justify-right) arg2)
    (set! (-> gp-0 global-flags) (the-as uint 0))
    (if (= (status-of-level-and-borrows *level* 'ctywide #f) 'active)
        (logior! (-> gp-0 global-flags) #x40000)
        )
    (if (= (status-of-level-and-borrows *level* 'waswide #f) 'active)
        (logior! (-> gp-0 global-flags) #x100000)
        )
    (if (= (status-of-level-and-borrows *level* 'wasall #f) 'active)
        (logior! (-> gp-0 global-flags) #x80000)
        )
    (if (= (status-of-level-and-borrows *level* 'desert #f) 'active)
        (logior! (-> gp-0 global-flags) #x200000)
        )
    (sub-draw-1-1 this gp-0)
    (sub-draw-1-2 this gp-0)
    (when #t
      (let ((s1-0 (-> gp-0 buf base))
            (s3-4 (get-texture mini-map-icons level-default-minimap))
            (s2-0 (-> *level* level-default texture-mask 8))
            )
        (cond
          (s3-4
            (set! (-> (the-as (pointer uint128) s1-0) 0) (-> this adgif-tmpl dma-vif quad))
            (set! (-> (the-as (pointer uint128) s1-0) 1) (-> this adgif-tmpl quad 1))
            (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as (pointer uint128) s1-0) 2)) s3-4)
            (&+! (-> gp-0 buf base) 112)
            (let ((v1-34 (-> s2-0 mask quad))
                  (a0-15 (-> s3-4 masks data 0 mask quad))
                  )
              (.por v1-35 v1-34 a0-15)
              )
            (set! (-> s2-0 mask quad) v1-35)
            )
          (else
            (format *stdebug* "minimap: mini-map-icons texture is #f~%")
            )
          )
        )
      )
    (let ((s3-5 (-> *minimap* engine alive-list)))
      (while s3-5
        (let ((a2-5 s3-5))
          (draw-connection this gp-0 a2-5)
          )
        (set! s3-5 (-> s3-5 next))
        )
      )
    (let ((s0-0 (new 'stack-no-clear 'vector))
          (f30-0 (-> *video-params* relative-x-scale))
          )
      ;; og:preserve-this correct the icons matrix so that it doesn't stretch horizontally
      (#when PC_PORT
        (/! (-> gp-0 mat vector 0 x) f30-0)
        (/! (-> gp-0 mat vector 2 x) f30-0)
        )
      (when *target*
        (vector-z-quaternion! s0-0 (-> *target* control quat))
        (vector-xz-normalize! s0-0 1.0)
        (set! (-> s0-0 y) 0.0)
        (set! (-> s0-0 w) 0.0)
        (vector-matrix*! s0-0 s0-0 (-> gp-0 mat))
        (let ((s3-6 (-> arg0 base))
              (s2-1 (get-texture map-target-marker level-default-minimap))
              (s1-1 (new 'stack-no-clear 'matrix))
              (v1-48 (the int (* 56.0 f30-0)))
              )
          (when s2-1
            (set-vector! (-> s1-1 rvec) (* (-> s0-0 z) f30-0) 0.0 (- (-> s0-0 x)) 0.0)
            (set-vector! (-> s1-1 uvec) 0.0 1.0 0.0 0.0)
            (set-vector! (-> s1-1 fvec) (* (-> s0-0 x) f30-0) 0.0 (-> s0-0 z) 1.0)
            (set-vector! (-> s1-1 trans) 0.0 0.0 (the float (+ (-> gp-0 draw-pos y) 1896)) 1.0)
            (if (-> gp-0 justify-right)
                (set! (-> s1-1 trans x) (the float (+ (- 1792 v1-48) (-> gp-0 draw-pos x))))
                (set! (-> s1-1 trans x) (the float (+ v1-48 1792 (-> gp-0 draw-pos x))))
                )
            (let ((f0-29 7.0))
              (set-vector! (-> gp-0 corner 0) 0.0 0.0 (- f0-29) 1.0)
              (set-vector! (-> gp-0 corner 1) f0-29 0.0 0.0 1.0)
              (set-vector! (-> gp-0 corner 2) (- f0-29) 0.0 0.0 1.0)
              (set-vector! (-> gp-0 corner 3) 0.0 0.0 f0-29 1.0)
              )
            (vector-matrix*! (the-as vector (-> gp-0 corner)) (the-as vector (-> gp-0 corner)) s1-1)
            (vector-matrix*! (-> gp-0 corner 1) (-> gp-0 corner 1) s1-1)
            (vector-matrix*! (-> gp-0 corner 2) (-> gp-0 corner 2) s1-1)
            (vector-matrix*! (-> gp-0 corner 3) (-> gp-0 corner 3) s1-1)
            (set! (-> (the-as (pointer uint128) s3-6) 0) (-> this adgif-tmpl dma-vif quad))
            (set! (-> (the-as (pointer uint128) s3-6) 1) (-> this adgif-tmpl quad 1))
            (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as (pointer uint128) s3-6) 2)) s2-1)
            (set! (-> (the-as (pointer uint128) s3-6) 7) (-> this draw-tmpl dma-vif quad))
            (set! (-> (the-as (pointer uint128) s3-6) 8) (-> this draw-tmpl quad 1))
            (let ((v1-64 (the-as (inline-array vector4w) (&+ s3-6 144))))
              (set! (-> v1-64 0 x) 0)
              (set! (-> v1-64 0 y) 255)
              (set! (-> v1-64 0 z) 255)
              (set! (-> v1-64 0 w) 128)
              )
            (let ((v1-65 (the-as (inline-array vector4w) (&+ s3-6 160))))
              (set! (-> v1-65 0 x) 0)
              (set! (-> v1-65 0 y) 0)
              (set! (-> v1-65 0 z) #xffffff)
              (set! (-> v1-65 0 w) 0)
              )
            (let ((v1-66 (the-as object (&+ s3-6 176))))
              (set! (-> (the-as (inline-array vector4w) v1-66) 0 x) (the int (* 16.0 (-> gp-0 corner 0 x))))
              (set! (-> (the-as (inline-array vector4w) v1-66) 0 y) (the int (* 16.0 (-> gp-0 corner 0 z))))
              (set! (-> (the-as (inline-array vector4w) v1-66) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-66) 0 w) 0)
              )
            (let ((v1-67 (the-as object (&+ s3-6 192))))
              (set! (-> (the-as (inline-array vector4w) v1-67) 0 x) 256)
              (set! (-> (the-as (inline-array vector4w) v1-67) 0 y) 0)
              (set! (-> (the-as (inline-array vector4w) v1-67) 0 z) #xffffff)
              (set! (-> (the-as (inline-array vector4w) v1-67) 0 w) 0)
              )
            (let ((v1-68 (the-as object (&+ s3-6 208))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 x) (the int (* 16.0 (-> gp-0 corner 1 x))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 y) (the int (* 16.0 (-> gp-0 corner 1 z))))
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-68) 0 w) 0)
              )
            (let ((v1-69 (the-as (inline-array vector4w) (&+ s3-6 224))))
              (set! (-> v1-69 0 x) 0)
              (set! (-> v1-69 0 y) 256)
              (set! (-> v1-69 0 z) #xffffff)
              (set! (-> v1-69 0 w) 0)
              )
            (let ((v1-70 (the-as object (&+ s3-6 240))))
              (set! (-> (the-as (inline-array vector4w) v1-70) 0 x) (the int (* 16.0 (-> gp-0 corner 2 x))))
              (set! (-> (the-as (inline-array vector4w) v1-70) 0 y) (the int (* 16.0 (-> gp-0 corner 2 z))))
              (set! (-> (the-as (inline-array vector4w) v1-70) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-70) 0 w) 0)
              )
            (let ((v1-71 (the-as object (&+ s3-6 256))))
              (set! (-> (the-as (inline-array vector4w) v1-71) 0 x) 256)
              (set! (-> (the-as (inline-array vector4w) v1-71) 0 y) 256)
              (set! (-> (the-as (inline-array vector4w) v1-71) 0 z) #xffffff)
              (set! (-> (the-as (inline-array vector4w) v1-71) 0 w) 0)
              )
            (let ((v1-72 (the-as object (&+ s3-6 272))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 x) (the int (* 16.0 (-> gp-0 corner 3 x))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 y) (the int (* 16.0 (-> gp-0 corner 3 z))))
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 z) 0)
              (set! (-> (the-as (inline-array vector4w) v1-72) 0 w) 0)
              )
            (&+! (-> arg0 base) 288)
            )
          )
        )
      ;; og:preserve-this revert widescreen correction done earlier
      (#when PC_PORT
        (*! (-> gp-0 mat vector 0 x) f30-0)
        (*! (-> gp-0 mat vector 2 x) f30-0)
        )
      )
    (if (not (paused?))
        (+! (-> this goal-time) (* 14.0 (seconds-per-frame)))
        )
    (reset-display-gs-state *display* (-> gp-0 buf))
    )
  0
  (none)
  )

(defmethod draw-sprite2 ((this minimap) (arg0 dma-buffer) (arg1 vector4w) (arg2 symbol))
  (local-vars (v1-47 uint128) (a0-8 uint128) (sv-176 int) (sv-192 int))
  (when (-> this race-tex)
    (let ((s5-0 (new 'stack-no-clear 'minimap-draw-work)))
      (set! (-> s5-0 buf) arg0)
      (set! (-> s5-0 draw-pos quad) (-> arg1 quad))
      (set! (-> s5-0 justify-right) arg2)
      (let ((v1-4 (the-as object (-> s5-0 buf base)))
            (s3-0 (-> this race-tex))
            (s2-0 (-> this race-level texture-mask 8))
            )
        (when s3-0
          (set! (-> (the-as adgif-shader v1-4) quad 0 quad) (-> this adgif-tmpl dma-vif quad))
          (set! (-> (the-as adgif-shader v1-4) quad 1 quad) (-> this adgif-tmpl quad 1))
          (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as adgif-shader v1-4) miptbp1)) s3-0)
          (&+! (-> s5-0 buf base) 112)
          (let ((v1-8 (-> s2-0 mask quad))
                (a0-7 (-> s3-0 masks data 0 mask quad))
                )
            (.por a0-8 v1-8 a0-7)
            )
          (set! (-> s2-0 mask quad) a0-8)
          )
        )
      (let* ((f0-0 (-> *video-params* relative-x-scale))
             (s3-1 (-> arg0 base))
             (v1-11 (the int (* 128.0 f0-0)))
             )
        0
        0
        (let ((s0-0 (* (+ (-> s5-0 draw-pos y) 1840) 16))
              (s2-1 (* (+ (-> s5-0 draw-pos y) 1968) 16))
              (s1-0 (-> s5-0 draw-pos z))
              )
          (cond
            ((-> s5-0 justify-right)
             (set! sv-176 (* (+ (- 1792 v1-11) (-> s5-0 draw-pos x)) 16))
             (set! sv-192 (* (+ (-> s5-0 draw-pos x) 1792) 16))
             sv-192
             )
            (else
              (set! sv-176 (* (+ (-> s5-0 draw-pos x) 1792) 16))
              (set! sv-192 (* (+ v1-11 1792 (-> s5-0 draw-pos x)) 16))
              sv-192
              )
            )
          (set! (-> s5-0 draw-pos x) sv-176)
          (set! (-> s5-0 draw-pos y) s0-0)
          (set! (-> (the-as (pointer uint128) s3-1) 0) (-> this sprite2-tmpl dma-vif quad))
          (set! (-> (the-as (pointer uint128) s3-1) 1) (-> this sprite2-tmpl quad 1))
          (let ((v1-26 (-> this color quad)))
            (set! (-> (the-as (pointer uint128) (&+ s3-1 32))) v1-26)
            )
          (cond
            ((get-horizontal-flip-flag *blit-displays-work*)
             (let ((v1-28 (the-as object (&+ s3-1 48))))
               (set! (-> (the-as (inline-array vector) v1-28) 0 x) 0.0)
               (set! (-> (the-as (inline-array vector) v1-28) 0 y) 0.0)
               (set! (-> (the-as (inline-array vector) v1-28) 0 z) 1.0)
               (set! (-> (the-as (inline-array vector) v1-28) 0 w) 0.0)
               )
             (let ((a0-25 (the-as object (&+ s3-1 64))))
               (set! (-> (the-as (inline-array vector4w) a0-25) 0 x) sv-192)
               (set! (-> (the-as (inline-array vector4w) a0-25) 0 y) s0-0)
               (set! (-> (the-as (inline-array vector4w) a0-25) 0 z) s1-0)
               (set! (-> (the-as (inline-array vector4w) a0-25) 0 w) 0)
               )
             (let ((v1-30 (the-as object (&+ s3-1 80))))
               (set! (-> (the-as (inline-array vector) v1-30) 0 x) 1.0)
               (set! (-> (the-as (inline-array vector) v1-30) 0 y) 1.0)
               (set! (-> (the-as (inline-array vector) v1-30) 0 z) 1.0)
               (set! (-> (the-as (inline-array vector) v1-30) 0 w) 0.0)
               )
             (let ((v1-31 (the-as object (&+ s3-1 96))))
               (set! (-> (the-as (inline-array vector4w) v1-31) 0 x) sv-176)
               (set! (-> (the-as (inline-array vector4w) v1-31) 0 y) s2-1)
               (set! (-> (the-as (inline-array vector4w) v1-31) 0 z) s1-0)
               (set! (-> (the-as (inline-array vector4w) v1-31) 0 w) 0)
               )
             )
            (else
              (let ((v1-32 (the-as object (&+ s3-1 48))))
                (set! (-> (the-as (inline-array vector) v1-32) 0 x) 0.0)
                (set! (-> (the-as (inline-array vector) v1-32) 0 y) 0.0)
                (set! (-> (the-as (inline-array vector) v1-32) 0 z) 1.0)
                (set! (-> (the-as (inline-array vector) v1-32) 0 w) 0.0)
                )
              (let ((a0-31 (the-as object (&+ s3-1 64))))
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 x) sv-176)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 y) s0-0)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 z) s1-0)
                (set! (-> (the-as (inline-array vector4w) a0-31) 0 w) 0)
                )
              (let ((v1-34 (the-as object (&+ s3-1 80))))
                (set! (-> (the-as (inline-array vector) v1-34) 0 x) 1.0)
                (set! (-> (the-as (inline-array vector) v1-34) 0 y) 1.0)
                (set! (-> (the-as (inline-array vector) v1-34) 0 z) 1.0)
                (set! (-> (the-as (inline-array vector) v1-34) 0 w) 0.0)
                )
              (let ((v1-35 (the-as object (&+ s3-1 96))))
                (set! (-> (the-as (inline-array vector4w) v1-35) 0 x) sv-192)
                (set! (-> (the-as (inline-array vector4w) v1-35) 0 y) s2-1)
                (set! (-> (the-as (inline-array vector4w) v1-35) 0 z) s1-0)
                (set! (-> (the-as (inline-array vector4w) v1-35) 0 w) 0)
                )
              )
            )
          )
        )
      (&+! (-> arg0 base) 112)
      (let ((s2-2 (the-as object (-> s5-0 buf base)))
            (s4-1 (get-texture map-target-marker level-default-minimap))
            (s3-2 (-> this ctywide texture-mask 8))
            )
        (when s4-1
          (set! (-> (the-as (pointer uint128) s2-2)) (-> this adgif-tmpl dma-vif quad))
          (set! (-> (the-as adgif-shader s2-2) quad 1 quad) (-> this adgif-tmpl quad 1))
          (adgif-shader<-texture-simple! (the-as adgif-shader (&-> (the-as adgif-shader s2-2) miptbp1)) s4-1)
          (&+! (-> s5-0 buf base) 112)
          (let ((v1-46 (-> s3-2 mask quad))
                (a0-39 (-> s4-1 masks data 0 mask quad))
                )
            (.por v1-47 v1-46 a0-39)
            )
          (set! (-> s3-2 mask quad) v1-47)
          )
        )
      (let ((f30-0 (the float (/ (-> s5-0 draw-pos x) 16)))
            (f28-0 (the float (/ (-> s5-0 draw-pos y) 16)))
            (s4-2 (the-as connection-minimap #f))
            )
        (let ((s3-3 (-> *minimap* engine alive-list)))
          (while s3-3
            (let ((s2-3 s3-3))
              (when (logtest? (-> s2-3 class flags) (minimap-flag racer))
                (if (string= (-> s2-3 class name) "racer-target")
                    (set! s4-2 s2-3)
                    (draw-racer-1 this s5-0 s2-3 (-> this race-scale) f30-0 f28-0)
                    )
                )
              )
            (set! s3-3 (-> s3-3 next))
            )
          )
        (if s4-2
            (draw-racer-1 this s5-0 s4-2 (-> this race-scale) f30-0 f28-0)
            )
        )
      )
    )
  0
  (none)
  )

(defmethod set-race-texture ((this minimap) (arg0 texture) (arg1 float) (arg2 level))
  (set! (-> this race-tex) arg0)
  (set! (-> this race-scale) arg1)
  (set! (-> this race-level) arg2)
  0
  (none)
  )

(defmethod set-race-corner ((this minimap) (arg0 float) (arg1 float))
  (set! (-> this race-corner x) arg0)
  (set! (-> this race-corner z) arg1)
  0
  (none)
  )

(defmethod set-color ((this minimap) (arg0 vector))
  (set! (-> this color quad) (-> arg0 quad))
  0
  (none)
  )

(defmethod minimap-class-node-method-9 ((this minimap-class-node))
  (let ((gp-0 (-> this flags)))
    (when (and (logtest? (minimap-flag local-only) gp-0) (not (logtest? (minimap-flag transport) gp-0)))
      (cond
        ((and (logtest? (minimap-flag ctywide) gp-0)
              (!= (status-of-level-and-borrows *level* 'ctywide 'ignore-borrow) 'active)
              )
         (return #f)
         )
        ((and (logtest? (minimap-flag wasall) gp-0)
              (!= (status-of-level-and-borrows *level* 'wasall 'ignore-borrow) 'active)
              )
         (return #f)
         )
        ((and (logtest? (minimap-flag waswide) gp-0)
              (!= (status-of-level-and-borrows *level* 'waswide 'ignore-borrow) 'active)
              )
         (return #f)
         )
        ((and (logtest? (minimap-flag desert) gp-0)
              (!= (status-of-level-and-borrows *level* 'desert 'ignore-borrow) 'active)
              )
         (return #f)
         )
        )
      )
    )
  #t
  )
