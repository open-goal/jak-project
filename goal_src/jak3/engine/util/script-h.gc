;;-*-Lisp-*-
(in-package goal)

;; name: script-h.gc
;; name in dgo: script-h
;; dgos: GAME


(declare-type script-context structure)
(declare-type load-state structure)
(define-extern *load-state* load-state)

;; DECOMP BEGINS

(deftype script-form (structure)
  ((name  symbol)
   (spec  pair)
   (func  (function script-context object))
   )
  (:methods
    (script-form-method-9 () none)
    )
  )


(deftype script-context (structure)
  ((load-state    load-state)
   (key           object)
   (process       process)
   (trans         vector)
   (side-effect?  symbol)
   (got-error?    symbol)
   (expr          pair)
   (param-count   int32)
   (param         object  16)
   (param-type    object  16)
   )
  (:methods
    (new (symbol type object process vector) _type_)
    (script-context-method-9 () none)
    (script-context-method-10 () none)
    (script-context-method-11 () none)
    )
  )


;; WARN: Return type mismatch structure vs script-context.
(defmethod new script-context ((allocation symbol) (type-to-make type) (arg0 object) (arg1 process) (arg2 vector))
  (let ((t9-0 (method-of-type structure new))
        (v1-1 type-to-make)
        )
    (-> type-to-make size)
    (let ((v0-0 (t9-0 allocation v1-1)))
      (set! (-> (the-as script-context v0-0) key) arg0)
      (set! (-> (the-as script-context v0-0) process) arg1)
      (set! (-> (the-as script-context v0-0) load-state) *load-state*)
      (set! (-> (the-as script-context v0-0) side-effect?) #t)
      (set! (-> (the-as script-context v0-0) got-error?) #f)
      (set! (-> (the-as script-context v0-0) trans) arg2)
      (the-as script-context v0-0)
      )
    )
  )
