;;-*-Lisp-*-
(in-package goal)

;; name: hfrag-h.gc
;; name in dgo: hfrag-h
;; dgos: GAME

;; DECOMP BEGINS

(deftype adgif-shader-array (inline-array-class)
  ((data  adgif-shader  :inline :dynamic)
   )
  )


(set! (-> adgif-shader-array heap-base) (the-as uint 80))

(deftype hfrag-montage (structure)
  ((data  uint16  16)
   )
  )


(deftype hfrag-bucket (structure)
  ((next                  pointer)
   (count                 uint16)
   (vertex-count          uint16)
   (next-scissor          pointer)
   (count-scissor         uint16)
   (vertex-count-scissor  uint16)
   )
  )


(deftype hfrag-packed-index (uint16)
  ((color uint16 :offset   0 :size  11)
   (bit11 uint8  :offset  11 :size   5)
   )
  )

(deftype hfrag-vertex (structure)
  ((height        uint16)
   (packed-index  hfrag-packed-index)
   )
  :pack-me
  )


(deftype hfrag-vert-index (structure)
  ((pos     vector2ub  :inline)
   (index0  uint16     :offset   2)
   (index1  uint16     :offset   4)
   (index2  uint16     :offset   6)
   )
  :pack-me
  )


(deftype hfrag-poly4 (structure)
  ((data  hfrag-vert-index  4 :inline)
   )
  )



(deftype hfrag-poly9 (structure)
  ((data  hfrag-vert-index  9 :inline)
   )
  :pack-me
  )



(deftype hfrag-poly25 (structure)
  ((data  hfrag-vert-index  25 :inline)
   )
  :pack-me
  )



(deftype hfrag-poly4-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  4 :inline)
   (next   dma-packet  :inline :offset 208)
   )
  )


(deftype hfrag-poly9-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  12 :inline)
   (next   dma-packet  :inline :offset 592)
   )
  )


(deftype hfrag-poly25-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  40 :inline)
   (next   dma-packet  :inline)
   )
  )


(deftype hfrag-cache-vertex (structure)
  ((color  vector4w  :inline)
   (pos    vector    :inline)
   (clip   uint32    :overlay-at (-> pos data 3))
   )
  )


(deftype hfrag-cache-line (structure)
  ((data  hfrag-cache-vertex  9 :inline)
   )
  )


(deftype hfrag-visbits (structure)
  ((data  uint8  128)
   )
  )


(deftype hfrag-gcf-control (structure)
  ((matrix       matrix           :inline)
   (giftag       generic-gif-tag  :inline)
   (adnops       gs-adcmd         2 :inline)
   (num-strips   uint32           :overlay-at (-> giftag data 3))
   (num-dps      uint32           :overlay-at (-> adnops 0 word 3))
   (kick-offset  uint32           :offset 108)
   (shader       gcf-shader       :inline)
   )
  )


(deftype hfrag-gcf-ctrl (structure)
  ((tag      dma-packet         :inline)
   (control  hfrag-gcf-control  :inline)
   )
  )


(deftype hfrag-init-packet (structure)
  ((init-tmpl  dma-packet  :inline)
   (init-data  uint32      8)
   (init-vif   vif-tag     :overlay-at (-> init-data 7))
   )
  )


(deftype hfrag-sprite-coord (structure)
  ((pos0  vector4w  :inline)
   (pos1  vector4w  :inline)
   )
  )


(deftype hfrag-montage-coord (structure)
  ((stq0  vector4  :inline)
   (stq1  vector4  :inline)
   )
  )


(deftype hfrag-sprite-packet (structure)
  ((sprite-tmpl  dma-gif-packet  :inline)
   (color        vector4w        :inline)
   (tex0         vector          :inline)
   (pos0         vector4w        :inline)
   (tex1         vector          :inline)
   (pos1         vector4w        :inline)
   )
  )


(deftype hfrag-tex-data (structure)
  ((quad      qword    3 :inline)
   (prims     uint64   6 :overlay-at quad)
   (reg-0     gs-reg     :overlay-at (-> quad 0 data 2))
   (reg-1     gs-reg     :overlay-at (-> prims 3))
   (reg-2     gs-reg     :overlay-at (-> prims 5))
   (tex0      gs-tex0    :overlay-at (-> quad 0 data 0))
   (tex1      gs-tex1    :overlay-at (-> prims 2))
   (texflush  uint64     :overlay-at (-> prims 4))
   )
  )


; (deftype hfrag-mip-packet (structure)
;   ((mip-tmpl  dma-gif-packet  :inline)
;    (tex0-1    vector          :inline)
;    (tex1-1    vector          :inline)
;    (texflush  vector          :inline)
;    (color     vector4w        :inline)
;    (tex0      vector          :inline)
;    (pos0      vector          :inline)
;    (tex1      vector          :inline)
;    (pos1      vector          :inline)
;    )
;   )


(deftype hfrag-adgif-packet (structure)
  ((adgif-tmpl  dma-gif-packet  :inline)
   (adgif-data  adgif-shader    :inline)
   )
  )


(deftype hfrag-adgif-packet2 (structure)
  ((adgif-tmpl  dma-gif-packet  :inline)
   (adgif-data  adgif-shader    :inline)
   (texflush    uint128)
   )
  )


(deftype hfrag-frame (structure)
  ((quad      qword         4 :inline :offset   0)
   (prims     uint64        8         :overlay-at quad)
   (reg-0     gs-reg                  :overlay-at (-> prims 1))
   (reg-1     gs-reg                  :overlay-at (-> prims 3))
   (reg-2     gs-reg                  :overlay-at (-> prims 5))
   (reg-3     gs-reg                  :overlay-at (-> prims 7))
   (frame     gs-frame                :overlay-at (-> prims 0))
   (scissor   gs-scissor              :overlay-at (-> prims 2))
   (xyoffset  gs-xy-offset            :overlay-at (-> prims 4))
   (test      gs-test                 :overlay-at (-> prims 6))
   )
  )


(deftype hfrag-frame-packet (structure)
  ((frame-tmpl  dma-gif-packet  :inline)
   (frame-data  hfrag-frame     :inline)
   )
  )


(deftype hfragment (drawable)
  ((start-corner      vector  :inline)
   (spheres           (inline-array vector))
   (visids            (pointer int16))
   (shaders           (inline-array adgif-shader))
   (colors            time-of-day-palette)
   (montage           uint32)
   (buckets-far       (inline-array hfrag-bucket))
   (buckets-mid       (inline-array hfrag-bucket))
   (buckets-near      (inline-array hfrag-bucket))
   (verts             (inline-array hfrag-vertex))
   (pat-array         (pointer pat-surface))
   (pat-length        uint16)
   (num-buckets-far   uint16)
   (num-buckets-mid   uint16)
   (num-buckets-near  uint16)
   (size              uint32  :overlay-at (-> start-corner data 3))
   )
  (:methods
    (bounding-box-query (_type_ collide-cache collide-query) none)
    (line-sphere-query (_type_ collide-cache collide-query) none)
    (add-tri-to-collide-cache (_type_ collide-cache collide-query int int int int) none)
    (add-tri-a-xy-zzz-to-collide-cache (_type_ collide-cache int int uint uint uint pat-surface) none)
    (add-tri-b-xy-zzz-to-collide-cache (_type_ collide-cache int int uint uint uint pat-surface) none)
    )
  )


(defmethod login ((this hfragment))
  "Initialize the object after it is loaded."
  (dotimes (s5-0 3)
    (adgif-shader-login (-> this shaders s5-0))
    (if (> s5-0 0)
        (set! (-> this shaders s5-0 tex0 tcc) 0)
        )
    (set! (-> this shaders 1 tex0 cbp) 3904)
    (set! (-> this shaders 2 tex0 cbp) 3904)
    )
  this
  )

(deftype hfrag-dma (structure)
  ((banka   uint32            340)
   (bankb   uint32            340)
   (outa    uint128           227)
   (outb    uint128           227)
   (cache   hfrag-cache-line  8 :inline)
   (colors  rgba              1024)
   )
  )


(deftype hfrag-work (structure)
  ((far-chaina              dma-packet           6 :inline)
   (far-chainb              dma-packet           6 :inline)
   (mid-chaina              dma-packet           10 :inline)
   (mid-chainb              dma-packet           10 :inline)
   (near-chaina             dma-packet           18 :inline)
   (near-chainb             dma-packet           18 :inline)
   (poly4-tmpl              dma-packet           3 :inline)
   (poly9-tmpl              dma-packet           3 :inline)
   (poly25-tmpl             dma-packet           3 :inline)
   (init-tmpl               hfrag-init-packet    3 :inline)
   (control-tmpl            dma-packet           2 :inline)
   (heights4-tmpl           dma-packet           2 :inline)
   (colors4-tmpl            dma-packet           2 :inline)
   (heights9-tmpl           dma-packet           2 :inline)
   (colors9-tmpl            dma-packet           2 :inline)
   (heights25-tmpl          dma-packet           2 :inline)
   (colors25-tmpl           dma-packet           2 :inline)
   (init-vu1-tmpl           hfrag-init-packet    2 :inline)
   (next-tmpl               dma-packet           :inline)
   (call-tmpl               dma-packet           :inline)
   (ret-tmpl                dma-packet           :inline)
   (next-scissor-tmpl       dma-packet           :inline)
   (ret-scissor-tmpl        dma-packet           :inline)
   (frame-tmpl              dma-gif-packet       :inline)
   (frames                  hfrag-frame          5 :inline)
   (adgif-tmpl              dma-gif-packet       :inline)
   (adgif-tmpl2             dma-gif-packet       :inline)
   (sprite-tmpl             dma-gif-packet       :inline)
   (mip-tmpl                dma-gif-packet       :inline)
   (color                   vector4w             6 :inline)
   (far-data                hfrag-sprite-coord   :inline)
   (near-data               vector4w-2           16 :inline)
   (mip-data                vector4w-2           7 :inline)
   (tex-data                hfrag-tex-data       5 :inline)
   (tex                     vector               6 :inline)
   (montage-tex-coords      hfrag-montage-coord  128 :inline :offset 3456)
   (giftag                  generic-gif-tag      :inline     :offset 7552)
   (call-abort              dma-packet           :inline)
   (call-abort-vu1          dma-packet           :inline)
   (shader-far              adgif-shader         :inline)
   (shader-mid              adgif-shader         :inline)
   (shader-near             adgif-shader         :inline)
   (stq                     vector4w             9 :inline)
   (shader                  adgif-shader         :inline)
   (constants               vector               :inline)
   (pos-temp                vector4w             :inline)
   (trans-temp              vector               :inline     :overlay-at (-> pos-temp data 0))
   (dists                   vector               :inline)
   (rdists                  vector               :inline)
   (call-poly4-near         vif-tag)
   (call-poly9-mid          vif-tag)
   (call-poly9-near         vif-tag)
   (call-poly25-far         vif-tag)
   (call-poly25-mid         vif-tag)
   (dma-buffer              basic)
   (base                    uint32)
   (wait-to-spr             uint32)
   (wait-from-spr           uint32)
   (buffer-end              uint32)
   (subdiv-index            uint32)
   (scissor                 symbol)
   (chain-ptr               uint32)
   (chain-ptr-next          uint32)
   (near-dist               float)
   (far-dist                float)
   (to-spr                  uint32)
   (from-spr                uint32)
   (lowres-flag             symbol)
   (hfrag                   hfragment            :inline)
   (next-far                int16)
   (next-far-mid            int16)
   (next-mid                int16)
   (next-near-mid           int16)
   (next-near               int16)
   (next-far-scissor        int16)
   (next-near-mid-scissor   int16)
   (next-near-scissor       int16)
   (count-far               int16)
   (count-far-mid           int16)
   (count-mid               int16)
   (count-near-mid          int16)
   (count-near              int16)
   (count-far-scissor       int16)
   (count-near-mid-scissor  int16)
   (count-near-scissor      int16)
   (size-far                int32)
   (size-far-mid            int32)
   (size-mid                int32)
   (size-near-mid           int32)
   (size-near               int32)
   (size-far-scissor        int32)
   (size-near-mid-scissor   int32)
   (size-near-scissor       int32)
   (size-texture            int32)
   (poly-far                hfrag-poly25)
   (poly-mid25              (inline-array hfrag-poly25))
   (poly-mid                (inline-array hfrag-poly9))
   (poly-near               (inline-array hfrag-poly9))
   (far-texture             pointer)
   (near-textures           uint16               16)
   (draw-table              int16                1024        :offset 8456)
   (corners                 vector               1024 :inline)
   )
  (:methods
    (initialize-renderer! (_type_) none)
    (init-work-from-current-hfrag! (_type_) none)
    (pick-level-of-detail! (_type_ level) none)
    (generate-vertices! (_type_) none)
    (finalize-dma! (_type_) none)
    (setup-far-vertex-index! (_type_ hfrag-vert-index int int) none)
    (setup-mid-vertex-index! (_type_ hfrag-vert-index int int) none)
    (setup-near-vertex-index! (_type_ hfrag-vert-index int int) none)
    (init-montage-tex-coords (_type_) none)
    (asm-far-scissor (_type_ dma-buffer int) none)
    (hfrag-work-method-19 () none)
    (hfrag-work-method-20 () none)
    (asm-near-mid-scissor (_type_ dma-buffer int) none)
    (hfrag-work-method-22 () none)
    (generate-montage-texture (_type_) none)
    (hfrag-work-method-24 (_type_ dma-buffer) none)
    (hfrag-work-method-25 (_type_ dma-buffer) none)
    (hfrag-work-method-26 (_type_ dma-buffer) none)
    (asm-far (_type_ dma-buffer int) none)
    (asm-far-mid (_type_ dma-buffer int) none)
    (asm-mid (_type_ dma-buffer int) none)
    (asm-near-mid (_type_ dma-buffer int) none)
    (asm-near (_type_ dma-buffer int) none)
    (hfrag-work-method-32 (_type_ dma-buffer) none)
    (hfrag-work-method-33 (_type_ dma-buffer) none)
    (hfrag-work-method-34 (_type_ dma-buffer) none)
    (trim-dma-to-fit-in-memory (_type_) none)
    )
  )


(deftype hfrag-mip-packet (structure)
  ((mip-tmpl  dma-gif-packet  :inline)
   (tex0-1    vector          :inline)
   (tex1-1    vector          :inline)
   (texflush  vector          :inline)
   (color     vector4w        :inline)
   (tex0      vector          :inline)
   (pos0      vector          :inline)
   (tex1      vector          :inline)
   (pos1      vector          :inline)
   )
  )


(deftype hfrag-mip-packet-array (structure)
  ((data  hfrag-mip-packet  6 :inline)
   )
  )
