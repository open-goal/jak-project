;;-*-Lisp-*-
(in-package goal)

;; name: hfrag-work.gc
;; name in dgo: hfrag-work
;; dgos: HGA, WIN, DST

;; DECOMP BEGINS

(defmethod setup-far-vertex-index! ((this hfrag-work) (arg0 hfrag-vert-index) (arg1 int) (arg2 int))
  (let ((v1-3 (* (+ (* 20 arg1) (* arg2 4)) 4))
        (a0-2 (* arg2 32))
        (a2-1 (* arg1 32))
        )
    (set! (-> arg0 index0) (the-as uint v1-3))
    (set! (-> arg0 index1) (the-as uint v1-3))
    (set! (-> arg0 index2) (the-as uint v1-3))
    (set! (-> arg0 pos x) (the-as uint a0-2))
    (set! (-> arg0 pos y) (the-as uint a2-1))
    )
  0
  (none)
  )

(defmethod setup-mid-vertex-index! ((this hfrag-work) (arg0 hfrag-vert-index) (arg1 int) (arg2 int))
  (let ((t1-0 (* (+ (* 20 arg1) (* arg2 2)) 4))
        (v1-3 (* arg2 16))
        (a0-2 (* arg1 16))
        )
    (let ((t0-2 (logior (* (logand arg1 1) 2) (logand arg2 1))))
      (set! (-> arg0 index0) (the-as uint t1-0))
      (cond
        ((zero? t0-2)
         (set! (-> arg0 index1) (the-as uint t1-0))
         (set! (-> arg0 index2) (the-as uint t1-0))
         )
        ((= t0-2 1)
         (set! (-> arg0 index1) (the-as uint (* (+ (* 20 arg1) (* (+ arg2 -1) 2)) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ (* 20 arg1) (* (+ arg2 1) 2)) 4)))
         )
        ((= t0-2 2)
         (set! (-> arg0 index1) (the-as uint (* (+ (* 20 (+ arg1 -1)) (* arg2 2)) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ (* 20 (+ arg1 1)) (* arg2 2)) 4)))
         )
        ((= t0-2 3)
         (set! (-> arg0 index1) (the-as uint (* (+ (* 20 (+ arg1 -1)) (* (+ arg2 1) 2)) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ (* 20 (+ arg1 1)) (* (+ arg2 -1) 2)) 4)))
         )
        )
      )
    (set! (-> arg0 pos x) (the-as uint v1-3))
    (set! (-> arg0 pos y) (the-as uint a0-2))
    )
  0
  (none)
  )

(defmethod setup-near-vertex-index! ((this hfrag-work) (arg0 hfrag-vert-index) (arg1 int) (arg2 int))
  (let ((t1-0 (* (+ (* 20 arg1) arg2) 4))
        (v1-3 (* arg2 8))
        (a0-1 (* arg1 8))
        )
    (let ((t0-2 (logior (* (logand arg1 1) 2) (logand arg2 1))))
      (set! (-> arg0 index0) (the-as uint t1-0))
      (cond
        ((zero? t0-2)
         (set! (-> arg0 index1) (the-as uint t1-0))
         (set! (-> arg0 index2) (the-as uint t1-0))
         )
        ((= t0-2 1)
         (set! (-> arg0 index1) (the-as uint (* (+ arg2 -1 (* 20 arg1)) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ arg2 1 (* 20 arg1)) 4)))
         )
        ((= t0-2 2)
         (set! (-> arg0 index1) (the-as uint (* (+ (* 20 (+ arg1 -1)) arg2) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ (* 20 (+ arg1 1)) arg2) 4)))
         )
        ((= t0-2 3)
         (set! (-> arg0 index1) (the-as uint (* (+ arg2 1 (* 20 (+ arg1 -1))) 4)))
         (set! (-> arg0 index2) (the-as uint (* (+ arg2 -1 (* 20 (+ arg1 1))) 4)))
         )
        )
      )
    (set! (-> arg0 pos x) (the-as uint v1-3))
    (set! (-> arg0 pos y) (the-as uint a0-1))
    )
  0
  (none)
  )

(defmethod init-montage-tex-coords ((this hfrag-work))
  (let ((f0-0 0.0))
    (dotimes (v1-0 8)
      (dotimes (a1-0 16)
        (let ((a2-4 (-> this montage-tex-coords (+ (* v1-0 16) a1-0))))
          (set-vector! (-> a2-4 stq0) (* 0.0625 (+ (the float a1-0) f0-0)) (* 0.125 (+ (the float v1-0) f0-0)) 1.0 0.0)
          (set-vector!
            (-> a2-4 stq1)
            (* 0.0625 (- (the float (+ a1-0 1)) f0-0))
            (* 0.125 (- (the float (+ v1-0 1)) f0-0))
            1.0
            0.0
            )
          )
        )
      )
    )
  0
  (none)
  )

(defmethod initialize-renderer! ((this hfrag-work))
  (set! (-> this poly-far) (new 'loading-level 'hfrag-poly25))
  (set! (-> this poly-mid25) (the-as (inline-array hfrag-poly25) (malloc 'loading-level 800)))
  (set! (-> this poly-mid) (the-as (inline-array hfrag-poly9) (malloc 'loading-level 1152)))
  (set! (-> this poly-near) (the-as (inline-array hfrag-poly9) (malloc 'loading-level 4608)))
  (set! (-> this init-vu1-tmpl 0 init-vif) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x2c))
  (set! (-> this init-vu1-tmpl 1 init-vif) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x2c))
  (set! (-> this call-abort-vu1 vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x20))
  (set! (-> this call-poly4-near) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x2e))
  (set! (-> this call-poly9-mid) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x14b))
  (set! (-> this call-poly9-near) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x14f))
  (set! (-> this call-poly25-far) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x7d))
  (set! (-> this call-poly25-mid) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1 :imm #x7f))
  (set! (-> this next-scissor-tmpl vif0) (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd mscalf) :msk #x1))
  (set! (-> this ret-scissor-tmpl vif0) (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd mscalf) :msk #x1))
  (let ((s5-0 (-> this poly-far)))
    (cond
      ((nonzero? s5-0)
       (dotimes (s4-0 5)
         (dotimes (s3-0 5)
           (let ((v1-21 (+ (* 5 s3-0) s4-0)))
             (setup-far-vertex-index! this (-> s5-0 data v1-21) s4-0 s3-0)
             )
           )
         )
       )
      (else
        (format 0 "ERROR: couldn't allocate memory for poly-far table~%")
        (break!)
        0
        )
      )
    )
  (let ((s5-1 (-> this poly-mid25)))
    (cond
      ((nonzero? s5-1)
       (dotimes (s4-1 2)
         (dotimes (s3-1 2)
           (let ((s2-0 (-> s5-1 (+ (* s4-1 2) s3-1)))
                 (s1-0 (* s4-1 4))
                 (s0-0 (* s3-1 4))
                 )
             (setup-mid-vertex-index! this (the-as hfrag-vert-index (-> s2-0 data)) s1-0 s0-0)
             (setup-mid-vertex-index! this (-> s2-0 data 1) (+ s1-0 1) s0-0)
             (setup-mid-vertex-index! this (-> s2-0 data 2) (+ s1-0 2) s0-0)
             (setup-mid-vertex-index! this (-> s2-0 data 3) (+ s1-0 3) s0-0)
             (setup-mid-vertex-index! this (-> s2-0 data 4) (+ s1-0 4) s0-0)
             (setup-mid-vertex-index! this (-> s2-0 data 5) s1-0 (+ s0-0 1))
             (setup-mid-vertex-index! this (-> s2-0 data 6) (+ s1-0 1) (+ s0-0 1))
             (setup-mid-vertex-index! this (-> s2-0 data 7) (+ s1-0 2) (+ s0-0 1))
             (setup-mid-vertex-index! this (-> s2-0 data 8) (+ s1-0 3) (+ s0-0 1))
             (setup-mid-vertex-index! this (-> s2-0 data 9) (+ s1-0 4) (+ s0-0 1))
             (setup-mid-vertex-index! this (-> s2-0 data 10) s1-0 (+ s0-0 2))
             (setup-mid-vertex-index! this (-> s2-0 data 11) (+ s1-0 1) (+ s0-0 2))
             (setup-mid-vertex-index! this (-> s2-0 data 12) (+ s1-0 2) (+ s0-0 2))
             (setup-mid-vertex-index! this (-> s2-0 data 13) (+ s1-0 3) (+ s0-0 2))
             (setup-mid-vertex-index! this (-> s2-0 data 14) (+ s1-0 4) (+ s0-0 2))
             (setup-mid-vertex-index! this (-> s2-0 data 15) s1-0 (+ s0-0 3))
             (setup-mid-vertex-index! this (-> s2-0 data 16) (+ s1-0 1) (+ s0-0 3))
             (setup-mid-vertex-index! this (-> s2-0 data 17) (+ s1-0 2) (+ s0-0 3))
             (setup-mid-vertex-index! this (-> s2-0 data 18) (+ s1-0 3) (+ s0-0 3))
             (setup-mid-vertex-index! this (-> s2-0 data 19) (+ s1-0 4) (+ s0-0 3))
             (setup-mid-vertex-index! this (-> s2-0 data 20) s1-0 (+ s0-0 4))
             (setup-mid-vertex-index! this (-> s2-0 data 21) (+ s1-0 1) (+ s0-0 4))
             (setup-mid-vertex-index! this (-> s2-0 data 22) (+ s1-0 2) (+ s0-0 4))
             (setup-mid-vertex-index! this (-> s2-0 data 23) (+ s1-0 3) (+ s0-0 4))
             (setup-mid-vertex-index! this (-> s2-0 data 24) (+ s1-0 4) (+ s0-0 4))
             )
           )
         )
       )
      (else
        (format 0 "ERROR: couldn't allocate memory for poly-far table~%")
        (break!)
        0
        )
      )
    )
  (let ((s5-2 (-> this poly-mid)))
    (cond
      ((nonzero? s5-2)
       (dotimes (s4-2 4)
         (dotimes (s3-2 4)
           (let ((s2-1 (-> s5-2 (+ (* s4-2 4) s3-2)))
                 (s1-1 (* s4-2 2))
                 (s0-1 (* s3-2 2))
                 )
             (setup-mid-vertex-index! this (the-as hfrag-vert-index (-> s2-1 data)) s1-1 s0-1)
             (setup-mid-vertex-index! this (-> s2-1 data 1) (+ s1-1 1) s0-1)
             (setup-mid-vertex-index! this (-> s2-1 data 2) (+ s1-1 2) s0-1)
             (setup-mid-vertex-index! this (-> s2-1 data 3) s1-1 (+ s0-1 1))
             (setup-mid-vertex-index! this (-> s2-1 data 4) (+ s1-1 1) (+ s0-1 1))
             (setup-mid-vertex-index! this (-> s2-1 data 5) (+ s1-1 2) (+ s0-1 1))
             (setup-mid-vertex-index! this (-> s2-1 data 6) s1-1 (+ s0-1 2))
             (setup-mid-vertex-index! this (-> s2-1 data 7) (+ s1-1 1) (+ s0-1 2))
             (setup-mid-vertex-index! this (-> s2-1 data 8) (+ s1-1 2) (+ s0-1 2))
             )
           )
         )
       )
      (else
        (format 0 "ERROR: couldn't allocate memory for poly-mid table~%")
        (break!)
        0
        )
      )
    )
  (let ((s5-3 (-> this poly-near)))
    (cond
      ((nonzero? s5-3)
       (dotimes (s4-3 8)
         (dotimes (s3-3 8)
           (let ((s2-2 (-> s5-3 (+ (* s4-3 8) s3-3)))
                 (s1-2 (* s4-3 2))
                 (s0-2 (* s3-3 2))
                 )
             (setup-near-vertex-index! this (the-as hfrag-vert-index (-> s2-2 data)) s1-2 s0-2)
             (setup-near-vertex-index! this (-> s2-2 data 1) (+ s1-2 1) s0-2)
             (setup-near-vertex-index! this (-> s2-2 data 2) (+ s1-2 2) s0-2)
             (setup-near-vertex-index! this (-> s2-2 data 3) s1-2 (+ s0-2 1))
             (setup-near-vertex-index! this (-> s2-2 data 4) (+ s1-2 1) (+ s0-2 1))
             (setup-near-vertex-index! this (-> s2-2 data 5) (+ s1-2 2) (+ s0-2 1))
             (setup-near-vertex-index! this (-> s2-2 data 6) s1-2 (+ s0-2 2))
             (setup-near-vertex-index! this (-> s2-2 data 7) (+ s1-2 1) (+ s0-2 2))
             (setup-near-vertex-index! this (-> s2-2 data 8) (+ s1-2 2) (+ s0-2 2))
             )
           )
         )
       )
      (else
        (format 0 "ERROR: couldn't allocate memory for poly-near table~%")
        (break!)
        0
        )
      )
    )
  (let ((f1-0 (-> this near-dist))
        (f0-0 (-> this far-dist))
        )
    (let ((f2-1 (* 0.14285715 (- f0-0 f1-0))))
      (set! (-> this dists x) (- f1-0))
      (set! (-> this dists y) (- (+ f1-0 (* 0.5 f2-1))))
      (set! (-> this dists z) (- (+ f1-0 (* 2.0 f2-1))))
      )
    (set! (-> this dists w) (- f0-0))
    )
  (set! (-> this rdists x) (/ 1.0 (-> this dists x)))
  (set! (-> this rdists y) (/ 1.0 (-> this dists y)))
  (set! (-> this rdists z) (/ 1.0 (-> this dists z)))
  (set! (-> this rdists w) (/ 1.0 (-> this dists w)))
  (init-montage-tex-coords this)
  0
  (none)
  )

(define *hfrag-work*
  (new 'static 'hfrag-work
    :far-chaina (new 'static 'inline-array dma-packet 6
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :far-chainb (new 'static 'inline-array dma-packet 6
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :mid-chaina (new 'static 'inline-array dma-packet 10
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :mid-chainb (new 'static 'inline-array dma-packet 10
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :near-chaina (new 'static 'inline-array dma-packet 18
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :near-chainb (new 'static 'inline-array dma-packet 18
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id ref)))
      (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id end)))
      )
    :poly4-tmpl (new 'static 'inline-array dma-packet 3
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x9 :num #xc :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x120 :num #xc :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x237 :num #xc :cmd (vif-cmd unpack-v4-32))
        )
      )
    :poly9-tmpl (new 'static 'inline-array dma-packet 3
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x24 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x9 :num #x24 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x24 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x120 :num #x24 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x24 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x237 :num #x24 :cmd (vif-cmd unpack-v4-32))
        )
      )
    :poly25-tmpl (new 'static 'inline-array dma-packet 3
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x78 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x9 :num #x78 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x78 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x120 :num #x78 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x78 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x237 :num #x78 :cmd (vif-cmd unpack-v4-32))
        )
      )
    :init-tmpl (new 'static 'inline-array hfrag-init-packet 3
      (new 'static 'hfrag-init-packet
        :init-tmpl (new 'static 'dma-packet
          :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id call))
          :vif0 (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl))
          :vif1 (new 'static 'vif-tag :imm #x388 :num #x1 :cmd (vif-cmd unpack-v4-32))
          )
        :init-data (new 'static 'array uint32 8 #x0 #x0 #x363 #x117 #x0 #x0 #x0 #x1500000c)
        )
      (new 'static 'hfrag-init-packet
        :init-tmpl (new 'static 'dma-packet
          :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id call))
          :vif0 (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl))
          :vif1 (new 'static 'vif-tag :imm #x388 :num #x1 :cmd (vif-cmd unpack-v4-32))
          )
        :init-data (new 'static 'array uint32 8 #x0 #x0 #x363 #x22e #x0 #x0 #x0 #x1500000c)
        )
      (new 'static 'hfrag-init-packet
        :init-tmpl (new 'static 'dma-packet
          :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id call))
          :vif0 (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl))
          :vif1 (new 'static 'vif-tag :imm #x388 :num #x1 :cmd (vif-cmd unpack-v4-32))
          )
        :init-data (new 'static 'array uint32 8 #x0 #x0 #x363 #x0 #x0 #x0 #x0 #x1500000c)
        )
      )
    :control-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x345 :num #xc :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x363 :num #xc :cmd (vif-cmd unpack-v4-32))
        )
      )
    :heights4-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :num #x2 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x7 :num #x2 :cmd (vif-cmd unpack-v4-32))
        )
      )
    :colors4-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x1 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #xe :num #x4 :cmd (vif-cmd unpack-v4-8))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x1 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x2a :num #x4 :cmd (vif-cmd unpack-v4-8))
        )
      )
    :heights9-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :num #x3 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x7 :num #x3 :cmd (vif-cmd unpack-v4-32))
        )
      )
    :colors9-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #xe :num #xc :cmd (vif-cmd unpack-v4-8))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x2a :num #xc :cmd (vif-cmd unpack-v4-8))
        )
      )
    :heights25-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :num #x7 :cmd (vif-cmd unpack-v4-32))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x7 :num #x7 :cmd (vif-cmd unpack-v4-32))
        )
      )
    :colors25-tmpl (new 'static 'inline-array dma-packet 2
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #xe :num #x1c :cmd (vif-cmd unpack-v4-8))
        )
      (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x2a :num #x1c :cmd (vif-cmd unpack-v4-8))
        )
      )
    :init-vu1-tmpl (new 'static 'inline-array hfrag-init-packet 2
      (new 'static 'hfrag-init-packet
        :init-tmpl (new 'static 'dma-packet
          :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id call))
          :vif0 (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl))
          :vif1 (new 'static 'vif-tag :imm #x1e6 :num #x1 :cmd (vif-cmd unpack-v4-32))
          )
        :init-data (new 'static 'array uint32 8 #x0 #x0 #x2a #x7 #x0 #x0 #x0 #x0)
        )
      (new 'static 'hfrag-init-packet
        :init-tmpl (new 'static 'dma-packet
          :dma (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id call))
          :vif0 (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl))
          :vif1 (new 'static 'vif-tag :imm #x1e6 :num #x1 :cmd (vif-cmd unpack-v4-32))
          )
        :init-data (new 'static 'array uint32 8 #x0 #x0 #xe #x0 #x0 #x0 #x0 #x0)
        )
      )
    :next-tmpl (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id next)))
    :call-tmpl (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id call)))
    :ret-tmpl (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id ret)))
    :next-scissor-tmpl (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id next)))
    :ret-scissor-tmpl (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id ret)))
    :frame-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif (new 'static 'array uint64 2 #x1000000000008004 #xe)
      )
    :frames (new 'static 'inline-array hfrag-frame 5
      (new 'static 'hfrag-frame
        :reg-0 (gs-reg frame-1)
        :reg-1 (gs-reg scissor-1)
        :reg-2 (gs-reg xyoffset-1)
        :reg-3 (gs-reg test-1)
        :frame (new 'static 'gs-frame :fbp #x6f :fbw #x2)
        :scissor (new 'static 'gs-scissor :scax1 #x7f :scay1 #x7f)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        )
      (new 'static 'hfrag-frame
        :reg-0 (gs-reg frame-1)
        :reg-1 (gs-reg scissor-1)
        :reg-2 (gs-reg xyoffset-1)
        :reg-3 (gs-reg test-1)
        :frame (new 'static 'gs-frame :fbp #x77 :fbw #x1)
        :scissor (new 'static 'gs-scissor :scax1 #x3f :scay1 #x3f)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        )
      (new 'static 'hfrag-frame
        :reg-0 (gs-reg frame-1)
        :reg-1 (gs-reg scissor-1)
        :reg-2 (gs-reg xyoffset-1)
        :reg-3 (gs-reg test-1)
        :frame (new 'static 'gs-frame :fbp #x79 :fbw #x1)
        :scissor (new 'static 'gs-scissor :scax1 #x3f :scay1 #x1f)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        )
      (new 'static 'hfrag-frame
        :reg-0 (gs-reg frame-1)
        :reg-1 (gs-reg scissor-1)
        :reg-2 (gs-reg xyoffset-1)
        :reg-3 (gs-reg test-1)
        :frame (new 'static 'gs-frame :fbp #x79 :fbw #x1 :fbmsk #xff000000)
        :scissor (new 'static 'gs-scissor :scax1 #x3f :scay1 #x1f)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        )
      (new 'static 'hfrag-frame
        :reg-0 (gs-reg frame-1)
        :reg-1 (gs-reg scissor-1)
        :reg-2 (gs-reg xyoffset-1)
        :reg-3 (gs-reg test-1)
        :frame (new 'static 'gs-frame :fbp #x198 :fbw #x8)
        :scissor (new 'static 'gs-scissor :scax1 #x1ff :scay1 #x19f)
        :xyoffset (new 'static 'gs-xy-offset :ofx #x7000 :ofy #x7300)
        :test (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
        )
      )
    :adgif-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif (new 'static 'array uint64 2 #x1000000000008005 #xe)
      )
    :adgif-tmpl2 (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif (new 'static 'array uint64 2 #x1000000000008006 #xe)
      )
    :sprite-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif (new 'static 'array uint64 2 #x500b400000008001 #x52521)
      )
    :mip-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x9 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x9 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif (new 'static 'array uint64 2 #x802f400000008001 #x52521eee)
      )
    :color (new 'static 'inline-array vector4w 6
      (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w #x80)
      (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w #x70)
      (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w 88)
      (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w 64)
      (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w 32)
      (new 'static 'vector4w)
      )
    :far-data (new 'static 'hfrag-sprite-coord
      :pos0 (new 'static 'vector4w :z #xffffff)
      :pos1 (new 'static 'vector4w :x #x400 :y #x200 :z #xffffff)
      )
    :near-data (new 'static 'inline-array vector4w-2 16
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :z #xffffff)
          (new 'static 'vector4w :x #x200 :y #x200 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x200 :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x200 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x400 :z #xffffff)
          (new 'static 'vector4w :x #x600 :y #x200 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x600 :z #xffffff)
          (new 'static 'vector4w :x #x800 :y #x200 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :y #x200 :z #xffffff)
          (new 'static 'vector4w :x #x200 :y #x400 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x200 :y #x200 :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x400 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x400 :y #x200 :z #xffffff)
          (new 'static 'vector4w :x #x600 :y #x400 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x600 :y #x200 :z #xffffff)
          (new 'static 'vector4w :x #x800 :y #x400 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :y #x400 :z #xffffff)
          (new 'static 'vector4w :x #x200 :y #x600 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x200 :y #x400 :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x600 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x400 :y #x400 :z #xffffff)
          (new 'static 'vector4w :x #x600 :y #x600 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x600 :y #x400 :z #xffffff)
          (new 'static 'vector4w :x #x800 :y #x600 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :y #x600 :z #xffffff)
          (new 'static 'vector4w :x #x200 :y #x800 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x200 :y #x600 :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x800 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x400 :y #x600 :z #xffffff)
          (new 'static 'vector4w :x #x600 :y #x800 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x600 :y #x600 :z #xffffff)
          (new 'static 'vector4w :x #x800 :y #x800 :z #xffffff)
          )
        )
      )
    :mip-data (new 'static 'inline-array vector4w-2 7
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x400 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :z #xffffff)
          (new 'static 'vector4w :x #x200 :y #x200 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x200 :z #xffffff)
          (new 'static 'vector4w :x #x300 :y #x100 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x300 :z #xffffff)
          (new 'static 'vector4w :x #x380 :y #x80 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x380 :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x80 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :x #x300 :y #x80 :z #xffffff)
          (new 'static 'vector4w :x #x380 :y #x100 :z #xffffff)
          )
        )
      (new 'static 'vector4w-2
        :vector (new 'static 'inline-array vector4w 2
          (new 'static 'vector4w :z #xffffff)
          (new 'static 'vector4w :x #x400 :y #x200 :z #xffffff)
          )
        )
      )
    :tex-data (new 'static 'inline-array hfrag-tex-data 5
      (new 'static 'hfrag-tex-data
        :reg-0 (gs-reg tex0-1)
        :reg-1 (gs-reg tex1-1)
        :reg-2 (gs-reg texflush)
        :tex0 (new 'static 'gs-tex0 :tbp0 #xde0 :tbw #x2 :tw #x7 :th #x7 :tcc #x1)
        :tex1 (new 'static 'gs-tex1 :mmin #x1)
        )
      (new 'static 'hfrag-tex-data
        :reg-0 (gs-reg tex0-1)
        :reg-1 (gs-reg tex1-1)
        :reg-2 (gs-reg texflush)
        :tex0 (new 'static 'gs-tex0 :tbp0 #xee0 :tbw #x1 :tw #x6 :th #x6 :tcc #x1)
        :tex1 (new 'static 'gs-tex1 :mmin #x1)
        )
      (new 'static 'hfrag-tex-data
        :reg-0 (gs-reg tex0-1)
        :reg-1 (gs-reg tex1-1)
        :reg-2 (gs-reg texflush)
        :tex0 (new 'static 'gs-tex0 :tbp0 #xf20 :tbw #x1 :tw #x5 :th #x5 :tcc #x1)
        :tex1 (new 'static 'gs-tex1 :mmin #x1)
        )
      (new 'static 'hfrag-tex-data
        :reg-0 (gs-reg tex0-1)
        :reg-1 (gs-reg tex1-1)
        :reg-2 (gs-reg texflush)
        :tex0 (new 'static 'gs-tex0 :tbp0 #xf30 :tbw #x1 :tw #x4 :th #x4 :tcc #x1)
        :tex1 (new 'static 'gs-tex1 :mmin #x1)
        )
      (new 'static 'hfrag-tex-data
        :reg-0 (gs-reg tex0-1)
        :reg-1 (gs-reg tex1-1)
        :reg-2 (gs-reg texflush)
        :tex0 (new 'static 'gs-tex0 :tbp0 #xf34 :tbw #x1 :tw #x3 :th #x3 :tcc #x1)
        :tex1 (new 'static 'gs-tex1 :mmin #x1)
        )
      )
    :tex (new 'static 'inline-array vector 6
      (new 'static 'vector :z 1.0)
      (new 'static 'vector :x 1.015625 :y 1.015625 :z 1.0)
      (new 'static 'vector :x 1.03125 :y 1.03125 :z 1.0)
      (new 'static 'vector :x 1.0625 :y 1.0625 :z 1.0)
      (new 'static 'vector :x 1.125 :y 1.125 :z 1.0)
      (new 'static 'vector :x 2.0 :y 2.0 :z 1.0)
      )
    :giftag (new 'static 'generic-gif-tag
      :fan-prim (new 'static 'gif-tag-prim
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type tri-fan) :iip #x1 :tme #x1 :fge #x1 :abe #x1)
        :nreg #x3
        )
      :str-prim (new 'static 'gif-tag-prim
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type tri-strip) :iip #x1 :tme #x1 :fge #x1 :abe #x1)
        :nreg #x3
        )
      :regs (new 'static 'gif-tag-regs-32 :regs0 (gif-reg-id st) :regs1 (gif-reg-id rgbaq) :regs2 (gif-reg-id xyzf2))
      :num-strips #x1
      )
    :call-abort (new 'static 'dma-packet
      :dma (new 'static 'dma-tag :id (dma-tag-id cnt))
      :vif0 (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd mscalf) :msk #x1)
      )
    :call-abort-vu1 (new 'static 'dma-packet :dma (new 'static 'dma-tag :id (dma-tag-id cnt)))
    :shader-far (new 'static 'adgif-shader
      :reg-0 (gs-reg tex0-1)
      :reg-1 (gs-reg tex1-1)
      :reg-2 (gs-reg miptbp1-1)
      :reg-3 (gs-reg clamp-1)
      :reg-4 (gs-reg miptbp2-1)
      :tex0 (new 'static 'gs-tex0 :tbp0 #xf20 :tbw #x1 :tcc #x1)
      :tex1 (new 'static 'gs-tex1 :mxl #x1 :k #xfb1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      )
    :shader-near (new 'static 'adgif-shader
      :reg-0 (gs-reg tex0-1)
      :reg-1 (gs-reg tex1-1)
      :reg-2 (gs-reg miptbp1-1)
      :reg-3 (gs-reg clamp-1)
      :reg-4 (gs-reg miptbp2-1)
      :tex0 (new 'static 'gs-tex0 :tbp0 #xde0 :tbw #x2 :tw #x7 :th #x7 :tcc #x1)
      :tex1 (new 'static 'gs-tex1 :mxl #x6 :mmag #x1 :mmin #x5 :k #xfbf)
      :miptbp1 (new 'static 'gs-miptbp :tbp1 #xee0 :tbw1 #x1 :tbp2 #xf20 :tbw2 #x1 :tbp3 #xf30 :tbw3 #x1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      :alpha (new 'static 'gs-miptbp :tbp1 #xf34 :tbw1 #x1 :tbp2 #xf35 :tbw2 #x1 :tbp3 #xf36)
      )
    :stq (new 'static 'inline-array vector4w 9
      (new 'static 'vector4w :x 1)
      (new 'static 'vector4w :x #x801)
      (new 'static 'vector4w :x #x1001)
      (new 'static 'vector4w :y #x800)
      (new 'static 'vector4w :x #x800 :y #x800)
      (new 'static 'vector4w :x #x1000 :y #x800)
      (new 'static 'vector4w :y #x1000)
      (new 'static 'vector4w :x #x800 :y #x1000)
      (new 'static 'vector4w :x #x1000 :y #x1000)
      )
    :constants (new 'static 'vector :x 0.5)
    :near-dist 1228800.0
    :far-dist 4096000.0
    :lowres-flag #f
    )
  )

(initialize-renderer! *hfrag-work*)

(define *hfrag-vu1-constants-base* (new 'static 'hfrag-vu1-constants-base
                                     :far-verts (new 'static 'inline-array vector 25
                                       (new 'static 'vector)
                                       (new 'static 'vector :z 131072.0)
                                       (new 'static 'vector :z 262144.0)
                                       (new 'static 'vector :z 393216.0)
                                       (new 'static 'vector :z 524288.0)
                                       (new 'static 'vector :x 131072.0)
                                       (new 'static 'vector :x 131072.0 :z 131072.0)
                                       (new 'static 'vector :x 131072.0 :z 262144.0)
                                       (new 'static 'vector :x 131072.0 :z 393216.0)
                                       (new 'static 'vector :x 131072.0 :z 524288.0)
                                       (new 'static 'vector :x 262144.0)
                                       (new 'static 'vector :x 262144.0 :z 131072.0)
                                       (new 'static 'vector :x 262144.0 :z 262144.0)
                                       (new 'static 'vector :x 262144.0 :z 393216.0)
                                       (new 'static 'vector :x 262144.0 :z 524288.0)
                                       (new 'static 'vector :x 393216.0)
                                       (new 'static 'vector :x 393216.0 :z 131072.0)
                                       (new 'static 'vector :x 393216.0 :z 262144.0)
                                       (new 'static 'vector :x 393216.0 :z 393216.0)
                                       (new 'static 'vector :x 393216.0 :z 524288.0)
                                       (new 'static 'vector :x 524288.0)
                                       (new 'static 'vector :x 524288.0 :z 131072.0)
                                       (new 'static 'vector :x 524288.0 :z 262144.0)
                                       (new 'static 'vector :x 524288.0 :z 393216.0)
                                       (new 'static 'vector :x 524288.0 :z 524288.0)
                                       )
                                     :mid-verts9 (new 'static 'inline-array vector 9
                                       (new 'static 'vector)
                                       (new 'static 'vector :x 65536.0)
                                       (new 'static 'vector :x 131072.0)
                                       (new 'static 'vector :z 65536.0)
                                       (new 'static 'vector :x 65536.0 :z 65536.0)
                                       (new 'static 'vector :x 131072.0 :z 65536.0)
                                       (new 'static 'vector :z 131072.0)
                                       (new 'static 'vector :x 65536.0 :z 131072.0)
                                       (new 'static 'vector :x 131072.0 :z 131072.0)
                                       )
                                     :mid-verts25 (new 'static 'inline-array vector 25
                                       (new 'static 'vector)
                                       (new 'static 'vector :z 65536.0)
                                       (new 'static 'vector :z 131072.0)
                                       (new 'static 'vector :z 196608.0)
                                       (new 'static 'vector :z 262144.0)
                                       (new 'static 'vector :x 65536.0)
                                       (new 'static 'vector :x 65536.0 :z 65536.0)
                                       (new 'static 'vector :x 65536.0 :z 131072.0)
                                       (new 'static 'vector :x 65536.0 :z 196608.0)
                                       (new 'static 'vector :x 65536.0 :z 262144.0)
                                       (new 'static 'vector :x 131072.0)
                                       (new 'static 'vector :x 131072.0 :z 65536.0)
                                       (new 'static 'vector :x 131072.0 :z 131072.0)
                                       (new 'static 'vector :x 131072.0 :z 196608.0)
                                       (new 'static 'vector :x 131072.0 :z 262144.0)
                                       (new 'static 'vector :x 196608.0)
                                       (new 'static 'vector :x 196608.0 :z 65536.0)
                                       (new 'static 'vector :x 196608.0 :z 131072.0)
                                       (new 'static 'vector :x 196608.0 :z 196608.0)
                                       (new 'static 'vector :x 196608.0 :z 262144.0)
                                       (new 'static 'vector :x 262144.0)
                                       (new 'static 'vector :x 262144.0 :z 65536.0)
                                       (new 'static 'vector :x 262144.0 :z 131072.0)
                                       (new 'static 'vector :x 262144.0 :z 196608.0)
                                       (new 'static 'vector :x 262144.0 :z 262144.0)
                                       )
                                     :near-verts4 (new 'static 'inline-array vector 4
                                       (new 'static 'vector)
                                       (new 'static 'vector :x 32768.0)
                                       (new 'static 'vector :z 32768.0)
                                       (new 'static 'vector :x 32768.0 :z 32768.0)
                                       )
                                     :near-verts9 (new 'static 'inline-array vector 9
                                       (new 'static 'vector)
                                       (new 'static 'vector :x 32768.0)
                                       (new 'static 'vector :x 65536.0)
                                       (new 'static 'vector :z 32768.0)
                                       (new 'static 'vector :x 32768.0 :z 32768.0)
                                       (new 'static 'vector :x 65536.0 :z 32768.0)
                                       (new 'static 'vector :z 65536.0)
                                       (new 'static 'vector :x 32768.0 :z 65536.0)
                                       (new 'static 'vector :x 65536.0 :z 65536.0)
                                       )
                                     :sts (new 'static 'inline-array vector 9
                                       (new 'static 'vector :z 1.0)
                                       (new 'static 'vector :x 0.5 :z 1.0)
                                       (new 'static 'vector :x 1.0 :z 1.0)
                                       (new 'static 'vector :y 0.5 :z 1.0)
                                       (new 'static 'vector :x 0.5 :y 0.5 :z 1.0)
                                       (new 'static 'vector :x 1.0 :y 0.5 :z 1.0)
                                       (new 'static 'vector :y 1.0 :z 1.0)
                                       (new 'static 'vector :x 0.5 :y 1.0 :z 1.0)
                                       (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
                                       )
                                     )
        )
