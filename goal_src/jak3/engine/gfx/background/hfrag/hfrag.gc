;;-*-Lisp-*-
(in-package goal)

;; name: hfrag.gc
;; name in dgo: hfrag
;; dgos: HGA, WIN, DST

;; DECOMP BEGINS

(defmethod hfragment-method-20 ((this hfragment)
                               (arg0 collide-cache)
                               (arg1 int)
                               (arg2 int)
                               (arg3 uint)
                               (arg4 uint)
                               (arg5 uint)
                               (arg6 pat-surface)
                               )
  (let ((v1-0 (-> arg0 num-tris)))
    (cond
      ((>= v1-0 460)
       (if (= *cheat-mode* 'debug)
           (print-exceeded-max-cache-tris)
           )
       )
      (else
        (let ((v1-6 (-> arg0 tris v1-0)))
          (let ((f0-2 (+ (* 32768.0 (the float arg1)) (-> this start-corner x)))
                (f1-5 (+ (* 32768.0 (the float arg2)) (-> this start-corner z)))
                )
            (set-vector! (-> v1-6 vertex 2) f0-2 (the float (* arg3 8)) f1-5 1.0)
            (set-vector! (-> v1-6 vertex 1) (+ 32768.0 f0-2) (the float (* arg4 8)) f1-5 1.0)
            (set-vector! (-> v1-6 vertex 0) f0-2 (the float (* arg5 8)) (+ 32768.0 f1-5) 1.0)
            )
          (set! (-> v1-6 clear-flags) (the-as uint128 0))
          (set! (-> v1-6 pat) arg6)
          (set! (-> v1-6 collide-ptr) #f)
          )
        (+! (-> arg0 num-tris) 1)
        )
      )
    )
  0
  (none)
  )

(defmethod hfragment-method-21 ((this hfragment)
                               (arg0 collide-cache)
                               (arg1 int)
                               (arg2 int)
                               (arg3 uint)
                               (arg4 uint)
                               (arg5 uint)
                               (arg6 pat-surface)
                               )
  (let ((v1-0 (-> arg0 num-tris)))
    (cond
      ((>= v1-0 460)
       (if (= *cheat-mode* 'debug)
           (print-exceeded-max-cache-tris)
           )
       )
      (else
        (let ((v1-6 (-> arg0 tris v1-0)))
          (let ((f0-2 (+ (* 32768.0 (the float arg1)) (-> this start-corner x)))
                (f1-5 (+ (* 32768.0 (the float arg2)) (-> this start-corner z)))
                )
            (set-vector! (-> v1-6 vertex 2) f0-2 (the float (* arg4 8)) (+ 32768.0 f1-5) 1.0)
            (set-vector! (-> v1-6 vertex 1) (+ 32768.0 f0-2) (the float (* arg3 8)) f1-5 1.0)
            (set-vector! (-> v1-6 vertex 0) (+ 32768.0 f0-2) (the float (* arg5 8)) (+ 32768.0 f1-5) 1.0)
            )
          (set! (-> v1-6 clear-flags) (the-as uint128 0))
          (set! (-> v1-6 pat) arg6)
          (set! (-> v1-6 collide-ptr) #f)
          )
        (+! (-> arg0 num-tris) 1)
        )
      )
    )
  0
  (none)
  )

(defmethod hfragment-method-19 ((this hfragment) (arg0 collide-cache) (arg1 collide-query) (arg2 int) (arg3 int) (arg4 int) (arg5 int))
  (local-vars
    (sv-16 uint)
    (sv-24 uint)
    (sv-32 uint)
    (sv-40 uint)
    (sv-48 int)
    (sv-56 int)
    (sv-64 int)
    (sv-72 int)
    )
  (let ((v1-0 (-> this verts))
        (a0-2 (+ (* arg3 512) arg2))
        (s2-0 (-> this pat-array 0))
        )
    (when (not (logtest? (-> arg1 ignore-pat) s2-0))
      (when (nonzero? (-> (the-as hfrag-vertex (+ (* a0-2 4) (the-as int v1-0))) packed-index bit11))
        (set! sv-16 (-> (the-as (pointer uint16) (+ (* a0-2 4) (the-as int v1-0)))))
        (set! sv-24 (-> (the-as (pointer uint16) (+ (* (+ a0-2 1) 4) (the-as int v1-0)))))
        (set! sv-32 (-> (the-as (pointer uint16) (+ (* (+ a0-2 512) 4) (the-as int v1-0)))))
        (set! sv-40 (-> (the-as (pointer uint16) (+ (* (+ a0-2 513) 4) (the-as int v1-0)))))
        (set! sv-48 0)
        (set! sv-56 0)
        (set! sv-64 0)
        (set! sv-72 0)
        (if (< (the-as int sv-16) arg4)
            (set! sv-48 1)
            )
        (if (< arg5 (the-as int sv-16))
            (set! sv-48 (logior sv-48 2))
            )
        (if (< (the-as int sv-24) arg4)
            (set! sv-56 1)
            )
        (if (< arg5 (the-as int sv-24))
            (set! sv-56 (logior sv-56 2))
            )
        (if (< (the-as int sv-32) arg4)
            (set! sv-64 1)
            )
        (if (< arg5 (the-as int sv-32))
            (set! sv-64 (logior sv-64 2))
            )
        (if (< (the-as int sv-40) arg4)
            (set! sv-72 1)
            )
        (if (< arg5 (the-as int sv-40))
            (set! sv-72 (logior sv-72 2))
            )
        (if (not (logtest? (logand sv-48 sv-56) sv-64))
            (hfragment-method-20 this arg0 arg2 arg3 sv-16 sv-24 sv-32 s2-0)
            )
        (if (not (logtest? (logand sv-56 sv-64) sv-72))
            (hfragment-method-21 this arg0 arg2 arg3 sv-24 sv-32 sv-40 s2-0)
            )
        )
      )
    )
  0
  (none)
  )

(defmethod hfragment-method-17 ((this hfragment) (arg0 collide-cache) (arg1 collide-query))
  (local-vars (sv-16 int) (sv-24 int) (sv-32 int) (sv-40 int) (sv-48 int) (sv-56 int))
  (set! sv-16 (the int (* 0.000030517578 (- (-> arg1 bbox min x) (-> this start-corner x)))))
  (set! sv-24 (the int (* 0.000030517578 (- (-> arg1 bbox min z) (-> this start-corner z)))))
  (set! sv-32 (the int (* 0.000030517578 (- (-> arg1 bbox max x) (-> this start-corner x)))))
  (set! sv-40 (the int (* 0.000030517578 (- (-> arg1 bbox max z) (-> this start-corner z)))))
  (set! sv-48 (the int (* 0.125 (-> arg1 bbox min y))))
  (set! sv-56 (the int (* 0.125 (-> arg1 bbox max y))))
  (set! sv-16 (max 0 (min 511 sv-16)))
  (set! sv-32 (max 0 (min 511 sv-32)))
  (set! sv-24 (max 0 (min 511 sv-24)))
  (set! sv-40 (max 0 (min 511 sv-40)))
  (let ((s3-0 sv-24)
        (s2-0 sv-40)
        )
    (while (>= s2-0 s3-0)
      (let ((s1-0 sv-16)
            (s0-0 sv-32)
            )
        (while (>= s0-0 s1-0)
          (hfragment-method-19 this arg0 arg1 s1-0 s3-0 sv-48 sv-56)
          (+! s1-0 1)
          )
        )
      (+! s3-0 1)
      )
    )
  0
  (none)
  )

(defmethod hfragment-method-18 ((this hfragment) (arg0 collide-cache) (arg1 collide-query))
  (local-vars
    (v1-30 int)
    (v1-31 int)
    (v1-57 int)
    (v1-58 int)
    (a0-16 int)
    (a0-17 int)
    (a0-35 int)
    (a0-36 int)
    (s3-0 int)
    (s3-2 int)
    (sv-64 vector)
    (sv-68 vector)
    (sv-72 vector)
    (sv-76 float)
    (sv-80 float)
    (sv-128 int)
    (sv-144 int)
    (sv-160 int)
    (sv-176 int)
    (sv-192 int)
    (sv-208 int)
    )
  (set! sv-64 (new 'stack-no-clear 'vector))
  (set! sv-68 (new 'stack-no-clear 'vector))
  (set! sv-72 (new 'stack-no-clear 'vector))
  (set! sv-76 (the-as float 0.000030517578))
  (set! sv-80 (* 0.000030517578 (-> arg1 radius)))
  (vector-! sv-64 (-> arg1 start-pos) (-> this start-corner))
  (vector-float*! sv-64 sv-64 sv-76)
  (vector-float*! sv-72 (-> arg1 move-dist) sv-76)
  (vector+! sv-68 sv-64 sv-72)
  (cond
    ((< (fabs (-> sv-72 z)) (fabs (-> sv-72 x)))
     (when (< (-> sv-72 x) 0.0)
       (let ((v1-15 (new 'stack-no-clear 'vector)))
         (set! (-> v1-15 quad) (-> sv-64 quad))
         (set! (-> sv-64 quad) (-> sv-68 quad))
         (set! (-> sv-68 quad) (-> v1-15 quad))
         )
       (vector-negate! sv-72 sv-72)
       )
     (let* ((a0-9 (the int (- (-> sv-64 x) sv-80)))
            (v1-20 (the int (+ (-> sv-68 x) sv-80)))
            (f0-15 (fmax 1.0 (the float (- v1-20 a0-9))))
            (f30-0 (/ (-> sv-72 y) f0-15))
            (f28-0 (/ (-> sv-72 z) f0-15))
            (f26-0 (+ sv-80 (* 0.5 (fabs f30-0))))
            (f24-0 (+ sv-80 (* 0.5 (fabs f28-0))))
            )
       (cond
         ((< a0-9 0)
          (+! (-> sv-64 y) (* f30-0 (- (the float a0-9))))
          (+! (-> sv-64 z) (* f28-0 (- (the float a0-9))))
          (set! s3-0 0)
          )
         (else
           (set! s3-0 (min 511 a0-9))
           )
         )
       (let ((s2-1 (max 0 (min 511 v1-20)))
             (s1-0 s3-0)
             )
         (while (>= s2-1 s1-0)
           (let* ((f0-23 (the float (- s1-0 s3-0)))
                  (f1-23 (+ (-> sv-64 y) (* f30-0 f0-23)))
                  (f0-25 (+ (-> sv-64 z) (* f28-0 f0-23)))
                  (s0-0 (the int (* 4096.0 (+ (- -0.5 f26-0) f1-23))))
                  )
             (set! sv-128 (the int (* 4096.0 (+ 0.5 f26-0 f1-23))))
             (let ((a0-15 (the int (- f0-25 f24-0)))
                   (v1-29 (the int (+ f0-25 f24-0)))
                   )
               (set! sv-144 0)
               (let ((a2-1 sv-144)
                     (a1-21 (min 511 a0-15))
                     )
                 (set-on-less-than a0-16 a2-1 a1-21)
                 (move-if-not-zero a0-17 a1-21 a0-16 a0-16)
                 )
               (set! sv-144 a0-17)
               (set! sv-160 0)
               (let ((a1-22 sv-160)
                     (a0-20 (min 511 v1-29))
                     )
                 (set-on-less-than v1-30 a1-22 a0-20)
                 (move-if-not-zero v1-31 a0-20 v1-30 v1-30)
                 )
               )
             (set! sv-160 v1-31)
             (while (>= sv-160 sv-144)
               (hfragment-method-19 this arg0 arg1 s1-0 sv-144 s0-0 sv-128)
               (set! sv-144 (+ sv-144 1))
               )
             )
           (+! s1-0 1)
           )
         )
       )
     )
    (else
      (when (< (-> sv-72 z) 0.0)
        (let ((v1-42 (new 'stack-no-clear 'vector)))
          (set! (-> v1-42 quad) (-> sv-64 quad))
          (set! (-> sv-64 quad) (-> sv-68 quad))
          (set! (-> sv-68 quad) (-> v1-42 quad))
          )
        (vector-negate! sv-72 sv-72)
        )
      (let* ((a0-27 (the int (- (-> sv-64 z) sv-80)))
             (v1-47 (the int (+ (-> sv-68 z) sv-80)))
             (f0-36 (fmax 1.0 (the float (- v1-47 a0-27))))
             (f30-1 (/ (-> sv-72 y) f0-36))
             (f28-1 (/ (-> sv-72 x) f0-36))
             (f26-1 (+ sv-80 (* 0.5 (fabs f30-1))))
             (f24-1 (+ sv-80 (* 0.5 (fabs f28-1))))
             )
        (cond
          ((< a0-27 0)
           (+! (-> sv-64 y) (* f30-1 (the float (- a0-27))))
           (+! (-> sv-64 x) (* f28-1 (the float (- a0-27))))
           (set! s3-2 0)
           )
          (else
            (set! s3-2 (min 511 a0-27))
            )
          )
        (let ((s2-3 (max 0 (min 511 v1-47)))
              (s1-1 s3-2)
              )
          (while (>= s2-3 s1-1)
            (let* ((f0-44 (the float (- s1-1 s3-2)))
                   (f1-47 (+ (-> sv-64 y) (* f30-1 f0-44)))
                   (f0-46 (+ (-> sv-64 x) (* f28-1 f0-44)))
                   (s0-1 (the int (* 4096.0 (+ (- -0.5 f26-1) f1-47))))
                   )
              (set! sv-176 (the int (* 4096.0 (+ 0.5 f26-1 f1-47))))
              (let ((a0-34 (the int (- f0-46 f24-1)))
                    (v1-56 (the int (+ f0-46 f24-1)))
                    )
                (set! sv-192 0)
                (let ((a2-3 sv-192)
                      (a1-41 (min 511 a0-34))
                      )
                  (set-on-less-than a0-35 a2-3 a1-41)
                  (move-if-not-zero a0-36 a1-41 a0-35 a0-35)
                  )
                (set! sv-192 a0-36)
                (set! sv-208 0)
                (let ((a1-42 sv-208)
                      (a0-39 (min 511 v1-56))
                      )
                  (set-on-less-than v1-57 a1-42 a0-39)
                  (move-if-not-zero v1-58 a0-39 v1-57 v1-57)
                  )
                )
              (set! sv-208 v1-58)
              (while (>= sv-208 sv-192)
                (hfragment-method-19 this arg0 arg1 sv-192 s1-1 s0-1 sv-176)
                (set! sv-192 (+ sv-192 1))
                )
              )
            (+! s1-1 1)
            )
          )
        )
      )
    )
  0
  (none)
  )
