;;-*-Lisp-*-
(in-package goal)

;; name: tie-methods.gc
;; name in dgo: tie-methods
;; dgos: GAME

;; DECOMP BEGINS

(deftype tie-debug (structure)
  ((max-instance   uint32)
   (min-instance   uint32)
   (test-fragment  uint32)
   (frag-count     uint32)
   )
  )


(define *tie* (new 'global 'tie-debug))

(defun tie-debug-between ((arg0 uint) (arg1 uint))
  (set! (-> *instance-tie-work* test-id) arg1)
  (set! (-> *instance-tie-work* test-id2) arg0)
  arg0
  )

(defun tie-debug-one ((arg0 uint) (arg1 uint))
  (set! (-> *instance-tie-work* test-id) (+ arg1 -1 arg0))
  (set! (-> *instance-tie-work* test-id2) arg0)
  arg0
  )

(defun tie-debug-frag-between ((arg0 uint) (arg1 uint))
  (set! (-> *tie* test-fragment) arg0)
  (let ((v0-0 (- arg1 arg0)))
    (set! (-> *tie* frag-count) v0-0)
    v0-0
    )
  )

(defun tie-debug-frag-one ((arg0 uint) (arg1 uint))
  (set! (-> *tie* test-fragment) arg0)
  (set! (-> *tie* frag-count) arg1)
  arg1
  )

;; WARN: Return type mismatch symbol vs none.
(defun walk-tie-generic-prototypes ()
  (none)
  )

(define *pke-hack* (new 'global 'vector))

(defun pc-add-tie-vis-mask ((lev level) (dma-buf dma-buffer))
  "Add data so Tie3.cpp can hide protos."
  (let ((packet (the-as dma-packet (-> dma-buf base))))
    (set! (-> packet vif0) (new 'static 'vif-tag))
    (set! (-> packet vif1) (new 'static 'vif-tag :cmd (vif-cmd pc-port)))
    (set! (-> dma-buf base) (the pointer (&+ packet 16)))

    (let ((lev-trees (-> lev bsp drawable-trees))
          (data-ptr (the (pointer uint8) (-> dma-buf base)))
          )
      (dotimes (tree-idx (-> lev-trees length))
        (let ((tree (-> lev-trees data tree-idx)))
          (when (= (-> tree type) drawable-tree-instance-tie)
            (let* ((tie-tree (the drawable-tree-instance-tie tree))
                   (protos (-> tie-tree prototypes prototype-array-tie))
                   )
              (dotimes (i (-> protos length))
                (let ((proto (-> protos array-data i)))
                  (when (logtest? (-> proto flags) (prototype-flags visible))
                    ;; invisible!
                    ;(format 0 "invis: ~A~%" (-> proto name))
                    (let ((src (-> proto name data)))
                      (while (nonzero? (-> src))
                        (set! (-> data-ptr) (-> src))
                        (&+! src 1)
                        (&+! data-ptr 1)
                        )
                      (set! (-> data-ptr) 0)
                      (&+! data-ptr 1)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      ;; align
      (while (nonzero? (logand data-ptr #xf))
        (set! (-> data-ptr) 0)
        (&+! data-ptr 1)
        )
      (set! (-> packet dma) (new 'static 'dma-tag
                                 :id (dma-tag-id cnt)
                                 :qwc (/ (&- data-ptr (-> dma-buf base)) 16))
            )
      (set! (-> dma-buf base) data-ptr)
      #f
      )
    )
  )

(defun pc-add-tie-envmap-info ((dma-buf dma-buffer))
  (let ((packet (the-as dma-packet (-> dma-buf base))))
    (set! (-> packet dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc 1))
    (set! (-> packet vif0) (new 'static 'vif-tag))
    (set! (-> packet vif1) (new 'static 'vif-tag :cmd (vif-cmd pc-port)))
    (set! (-> dma-buf base) (the pointer (&+ packet 16)))
    (set! (-> (the (pointer uint128) (-> dma-buf base)))
          (if (and *time-of-day-context*
                   (nonzero? *time-of-day-context*))
              (-> *time-of-day-context* current-env-color quad)
              (the uint128 0)
              )
          )
    (set! (-> dma-buf base) (the pointer (&+ packet 32)))
    )
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

;; ERROR: function was not converted to expressions. Cannot decompile.

;; WARN: Return type mismatch pointer vs object.
;; ERROR: Failed store: (s.d! (the-as uint a0-5) a1-5) at op 46
;; ERROR: Failed store: (s.d! (the-as uint a0-18) a1-23) at op 144
;; ERROR: Failed store: (s.d! (the-as uint a0-31) a1-41) at op 242
;; ERROR: Failed store: (s.d! (the-as uint a0-44) a1-59) at op 340
;; ERROR: Failed store: (s.d! (the-as uint a0-57) a1-77) at op 438
;; ERROR: Failed store: (s.d! (the-as uint a0-72) a1-95) at op 537
;; ERROR: Failed store: (s.d! (the-as uint a0-87) a1-113) at op 636
;; ERROR: Failed store: (s.d! (the-as uint a0-102) a1-131) at op 735
;; ERROR: Failed store: (s.d! (the-as uint a0-117) a1-149) at op 834
;; ERROR: Failed store: (s.d! (the-as uint a0-132) a1-167) at op 933
;; ERROR: Failed store: (s.d! (the-as uint a0-147) a1-185) at op 1032
;; ERROR: Failed store: (s.d! (the-as uint a0-162) a1-203) at op 1131
;; ERROR: Failed store: (s.d! (the-as uint a0-176) a1-221) at op 1230
;; ERROR: Failed store: (s.w! (+ a0-179 8) 0) at op 1239
;; ERROR: Failed store: (s.w! (+ a0-179 12) 0) at op 1240
(defun instance-tie-patch-buckets ((arg0 dma-buffer) (arg1 level))
  ; (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-scissor))
  ;   (when (nonzero? (-> *prototype-tie-work* scissor-count))
  ;     (let ((s5-0 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-17 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-scissor-l0-tfrag)
  ;                                          (bucket-id tie-scissor-l1-tfrag)
  ;                                          (bucket-id tie-scissor-l2-tfrag)
  ;                                          (bucket-id tie-scissor-l3-tfrag)
  ;                                          (bucket-id tie-scissor-l4-tfrag)
  ;                                          (bucket-id tie-scissor-l5-tfrag)
  ;                                          (bucket-id tie-scissor-l6-tfrag)
  ;                                          (bucket-id tie-scissor-l7-tfrag)
  ;                                          (bucket-id tie-scissor-l8-tfrag)
  ;                                          (bucket-id tie-scissor-l9-tfrag)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-1 (-> v1-17 base))
  ;               (a0-5 (the-as object (-> *prototype-tie-work* scissor-last)))
  ;               )
  ;           (let ((a3-1 (-> *prototype-tie-work* scissor-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-1)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-1))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-1)) (the-as uint #x80000000ffffffff)) (shr (shl a3-1 33) 1))
  ;                   )
  ;             )
  ;           (let ((a1-5 (logior (logand (-> (the-as (pointer uint64) a0-5) 0) (the-as uint #x80000000ffffffff))
  ;                               (shr (shl (the-as int (&+ a1-1 16)) 33) 1)
  ;                               )
  ;                       )
  ;                 )
  ;             (s.d! (the-as uint a0-5) a1-5)
  ;             )
  ;           )
  ;         (&+! (-> v1-17 base) 16)
  ;         )
  ;       (let ((v1-25 *dma-mem-usage*))
  ;         (when (nonzero? v1-25)
  ;           (set! (-> v1-25 length) (max 16 (-> v1-25 length)))
  ;           (set! (-> v1-25 data 15 name) "tie-scissor")
  ;           (+! (-> v1-25 data 15 count) 1)
  ;           (+! (-> v1-25 data 15 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-0))
  ;               )
  ;           (set! (-> v1-25 data 15 total) (-> v1-25 data 15 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie))
  ;   (when (nonzero? (-> *prototype-tie-work* tie-count))
  ;     (let ((s5-1 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-43 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-l0-tfrag)
  ;                                          (bucket-id tie-l1-tfrag)
  ;                                          (bucket-id tie-l2-tfrag)
  ;                                          (bucket-id tie-l3-tfrag)
  ;                                          (bucket-id tie-l4-tfrag)
  ;                                          (bucket-id tie-l5-tfrag)
  ;                                          (bucket-id tie-l6-tfrag)
  ;                                          (bucket-id tie-l7-tfrag)
  ;                                          (bucket-id tie-l8-tfrag)
  ;                                          (bucket-id tie-l9-tfrag)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-19 (-> v1-43 base))
  ;               (a0-18 (the-as object (-> *prototype-tie-work* tie-last)))
  ;               )
  ;           (let ((a3-10 (-> *prototype-tie-work* tie-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-19)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-19))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-19)) (the-as uint #x80000000ffffffff)) (shr (shl a3-10 33) 1))
  ;                   )
  ;             )
  ;           (let ((a1-23 (logior (logand (-> (the-as (pointer uint64) a0-18) 0) (the-as uint #x80000000ffffffff))
  ;                                (shr (shl (the-as int (&+ a1-19 16)) 33) 1)
  ;                                )
  ;                        )
  ;                 )
  ;             (s.d! (the-as uint a0-18) a1-23)
  ;             )
  ;           )
  ;         (&+! (-> v1-43 base) 16)
  ;         )
  ;       (let ((v1-51 *dma-mem-usage*))
  ;         (when (nonzero? v1-51)
  ;           (set! (-> v1-51 length) (max 10 (-> v1-51 length)))
  ;           (set! (-> v1-51 data 9 name) "tie-fragment")
  ;           (+! (-> v1-51 data 9 count) 1)
  ;           (+! (-> v1-51 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-1))
  ;               )
  ;           (set! (-> v1-51 data 9 total) (-> v1-51 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask etie))
    ; (when (nonzero? (-> *prototype-tie-work* envmap-count))
      (let ((s5-2 (-> *display* frames (-> *display* on-screen) global-buf base)))
        (with-dma-buffer-add-bucket ((v1-69 (-> *display* frames (-> *display* on-screen) global-buf))
                                     (-> (new 'static 'array bucket-id 10
                                           (bucket-id tie-l0-tfrag) ; (bucket-id etie-l0-tfrag)
                                           (bucket-id tie-l1-tfrag) ; (bucket-id etie-l1-tfrag)
                                           (bucket-id tie-l2-tfrag) ; (bucket-id etie-l2-tfrag)
                                           (bucket-id tie-l3-tfrag) ; (bucket-id etie-l3-tfrag)
                                           (bucket-id tie-l4-tfrag) ; (bucket-id etie-l4-tfrag)
                                           (bucket-id tie-l5-tfrag) ; (bucket-id etie-l5-tfrag)
                                           (bucket-id tie-l6-tfrag) ; (bucket-id etie-l6-tfrag)
                                           (bucket-id tie-l7-tfrag) ; (bucket-id etie-l7-tfrag)
                                           (bucket-id tie-l8-tfrag) ; (bucket-id etie-l8-tfrag)
                                           (bucket-id tie-l9-tfrag) ; (bucket-id etie-l9-tfrag)
                                           )
                                         (-> arg1 draw-index)
                                         )
                                     )
          (add-pc-tfrag3-data v1-69 arg1 0)
          (pc-add-tie-vis-mask arg1 v1-69)
          (pc-add-tie-envmap-info v1-69)
    ;       (let ((a1-37 (-> v1-69 base))
    ;             (a0-31 (the-as object (-> *prototype-tie-work* envmap-last)))
    ;             )
    ;         (let ((a3-19 (-> *prototype-tie-work* envmap-next)))
    ;           (set! (-> (the-as (pointer uint128) a1-37)) (-> *prototype-tie-work* model-next quad))
    ;           (set! (-> (the-as (pointer uint64) a1-37))
    ;                 (logior (logand (-> (the-as (pointer uint64) a1-37)) (the-as uint #x80000000ffffffff)) (shr (shl a3-19 33) 1))
    ;                 )
    ;           )
    ;         (let ((a1-41 (logior (logand (-> (the-as (pointer uint64) a0-31) 0) (the-as uint #x80000000ffffffff))
    ;                              (shr (shl (the-as int (&+ a1-37 16)) 33) 1)
    ;                              )
    ;                      )
    ;               )
    ;           (s.d! (the-as uint a0-31) a1-41)
    ;           )
    ;         )
    ;       (&+! (-> v1-69 base) 16)
          )
        (let ((v1-77 *dma-mem-usage*))
          (when (nonzero? v1-77)
            (set! (-> v1-77 length) (max 10 (-> v1-77 length)))
            (set! (-> v1-77 data 9 name) "tie-fragment")
            (+! (-> v1-77 data 9 count) 1)
            (+! (-> v1-77 data 9 used)
                (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-2))
                )
            (set! (-> v1-77 data 9 total) (-> v1-77 data 9 used))
            )
          )
        )
    ;   )
    )
  ; (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask etie-scissor))
  ;   (when (nonzero? (-> *prototype-tie-work* envmap-scissor-count))
  ;     (let ((s5-3 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-95 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id etie-scissor-l0-tfrag)
  ;                                          (bucket-id etie-scissor-l1-tfrag)
  ;                                          (bucket-id etie-scissor-l2-tfrag)
  ;                                          (bucket-id etie-scissor-l3-tfrag)
  ;                                          (bucket-id etie-scissor-l4-tfrag)
  ;                                          (bucket-id etie-scissor-l5-tfrag)
  ;                                          (bucket-id etie-scissor-l6-tfrag)
  ;                                          (bucket-id etie-scissor-l7-tfrag)
  ;                                          (bucket-id etie-scissor-l8-tfrag)
  ;                                          (bucket-id etie-scissor-l9-tfrag)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-55 (-> v1-95 base))
  ;               (a0-44 (the-as object (-> *prototype-tie-work* envmap-scissor-last)))
  ;               )
  ;           (let ((a3-28 (-> *prototype-tie-work* envmap-scissor-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-55)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-55))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-55)) (the-as uint #x80000000ffffffff)) (shr (shl a3-28 33) 1))
  ;                   )
  ;             )
  ;           (let ((a1-59 (logior (logand (-> (the-as (pointer uint64) a0-44) 0) (the-as uint #x80000000ffffffff))
  ;                                (shr (shl (the-as int (&+ a1-55 16)) 33) 1)
  ;                                )
  ;                        )
  ;                 )
  ;             (s.d! (the-as uint a0-44) a1-59)
  ;             )
  ;           )
  ;         (&+! (-> v1-95 base) 16)
  ;         )
  ;       (let ((v1-103 *dma-mem-usage*))
  ;         (when (nonzero? v1-103)
  ;           (set! (-> v1-103 length) (max 10 (-> v1-103 length)))
  ;           (set! (-> v1-103 data 9 name) "tie-fragment")
  ;           (+! (-> v1-103 data 9 count) 1)
  ;           (+! (-> v1-103 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-3))
  ;               )
  ;           (set! (-> v1-103 data 9 total) (-> v1-103 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-vanish))
  ;   (when (nonzero? (-> *prototype-tie-work* vanish-count))
  ;     (let ((s5-4 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-121 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-vanish-l0-tfrag)
  ;                                          (bucket-id tie-vanish-l1-tfrag)
  ;                                          (bucket-id tie-vanish-l2-tfrag)
  ;                                          (bucket-id tie-vanish-l3-tfrag)
  ;                                          (bucket-id tie-vanish-l4-tfrag)
  ;                                          (bucket-id tie-vanish-l5-tfrag)
  ;                                          (bucket-id tie-vanish-l6-tfrag)
  ;                                          (bucket-id tie-vanish-l7-tfrag)
  ;                                          (bucket-id tie-vanish-l8-tfrag)
  ;                                          (bucket-id tie-vanish-l9-tfrag)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-73 (-> v1-121 base))
  ;               (a0-57 (the-as object (-> *prototype-tie-work* vanish-last)))
  ;               )
  ;           (let ((a3-37 (-> *prototype-tie-work* vanish-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-73)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-73))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-73)) (the-as uint #x80000000ffffffff)) (shr (shl a3-37 33) 1))
  ;                   )
  ;             )
  ;           (let ((a1-77 (logior (logand (-> (the-as (pointer uint64) a0-57) 0) (the-as uint #x80000000ffffffff))
  ;                                (shr (shl (the-as int (&+ a1-73 16)) 33) 1)
  ;                                )
  ;                        )
  ;                 )
  ;             (s.d! (the-as uint a0-57) a1-77)
  ;             )
  ;           )
  ;         (&+! (-> v1-121 base) 16)
  ;         )
  ;       (let ((v1-129 *dma-mem-usage*))
  ;         (when (nonzero? v1-129)
  ;           (set! (-> v1-129 length) (max 10 (-> v1-129 length)))
  ;           (set! (-> v1-129 data 9 name) "tie-fragment")
  ;           (+! (-> v1-129 data 9 count) 1)
  ;           (+! (-> v1-129 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-4))
  ;               )
  ;           (set! (-> v1-129 data 9 total) (-> v1-129 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask tie-scissor-trans) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* scissor-trans-count))
  ;     (let ((s5-5 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-146 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-scissor-l0-alpha)
  ;                                          (bucket-id tie-scissor-l1-alpha)
  ;                                          (bucket-id tie-scissor-l2-alpha)
  ;                                          (bucket-id tie-scissor-l3-alpha)
  ;                                          (bucket-id tie-scissor-l4-alpha)
  ;                                          (bucket-id tie-scissor-l5-alpha)
  ;                                          (bucket-id tie-scissor-l6-alpha)
  ;                                          (bucket-id tie-scissor-l7-alpha)
  ;                                          (bucket-id tie-scissor-l8-alpha)
  ;                                          (bucket-id tie-scissor-l9-alpha)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-91 (-> v1-146 base))
  ;               (a0-72 (the-as object (-> *prototype-tie-work* scissor-trans-last)))
  ;               )
  ;           (let ((a3-46 (-> *prototype-tie-work* scissor-trans-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-91)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-91))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-91)) (the-as uint #x80000000ffffffff)) (shr (shl a3-46 33) 1))
  ;                   )
  ;             )
  ;           (let ((a1-95 (logior (logand (-> (the-as (pointer uint64) a0-72) 0) (the-as uint #x80000000ffffffff))
  ;                                (shr (shl (the-as int (&+ a1-91 16)) 33) 1)
  ;                                )
  ;                        )
  ;                 )
  ;             (s.d! (the-as uint a0-72) a1-95)
  ;             )
  ;           )
  ;         (&+! (-> v1-146 base) 16)
  ;         )
  ;       (let ((v1-154 *dma-mem-usage*))
  ;         (when (nonzero? v1-154)
  ;           (set! (-> v1-154 length) (max 16 (-> v1-154 length)))
  ;           (set! (-> v1-154 data 15 name) "tie-scissor")
  ;           (+! (-> v1-154 data 15 count) 1)
  ;           (+! (-> v1-154 data 15 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-5))
  ;               )
  ;           (set! (-> v1-154 data 15 total) (-> v1-154 data 15 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask tie-trans) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* trans-count))
  ;     (let ((s5-6 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-171 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-l0-alpha)
  ;                                          (bucket-id tie-l1-alpha)
  ;                                          (bucket-id tie-l2-alpha)
  ;                                          (bucket-id tie-l3-alpha)
  ;                                          (bucket-id tie-l4-alpha)
  ;                                          (bucket-id tie-l5-alpha)
  ;                                          (bucket-id tie-l6-alpha)
  ;                                          (bucket-id tie-l7-alpha)
  ;                                          (bucket-id tie-l8-alpha)
  ;                                          (bucket-id tie-l9-alpha)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-109 (-> v1-171 base))
  ;               (a0-87 (the-as object (-> *prototype-tie-work* trans-last)))
  ;               )
  ;           (let ((a3-55 (-> *prototype-tie-work* trans-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-109)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-109))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-109)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-55 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-113 (logior (logand (-> (the-as (pointer uint64) a0-87) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-109 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-87) a1-113)
  ;             )
  ;           )
  ;         (&+! (-> v1-171 base) 16)
  ;         )
  ;       (let ((v1-179 *dma-mem-usage*))
  ;         (when (nonzero? v1-179)
  ;           (set! (-> v1-179 length) (max 10 (-> v1-179 length)))
  ;           (set! (-> v1-179 data 9 name) "tie-fragment")
  ;           (+! (-> v1-179 data 9 count) 1)
  ;           (+! (-> v1-179 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-6))
  ;               )
  ;           (set! (-> v1-179 data 9 total) (-> v1-179 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask etie-trans) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* envmap-trans-count))
  ;     (let ((s5-7 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-196 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id etie-l0-alpha)
  ;                                          (bucket-id etie-l1-alpha)
  ;                                          (bucket-id etie-l2-alpha)
  ;                                          (bucket-id etie-l3-alpha)
  ;                                          (bucket-id etie-l4-alpha)
  ;                                          (bucket-id etie-l5-alpha)
  ;                                          (bucket-id etie-l6-alpha)
  ;                                          (bucket-id etie-l7-alpha)
  ;                                          (bucket-id etie-l8-alpha)
  ;                                          (bucket-id etie-l9-alpha)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-127 (-> v1-196 base))
  ;               (a0-102 (the-as object (-> *prototype-tie-work* envmap-trans-last)))
  ;               )
  ;           (let ((a3-64 (-> *prototype-tie-work* envmap-trans-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-127)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-127))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-127)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-64 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-131 (logior (logand (-> (the-as (pointer uint64) a0-102) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-127 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-102) a1-131)
  ;             )
  ;           )
  ;         (&+! (-> v1-196 base) 16)
  ;         )
  ;       (let ((v1-204 *dma-mem-usage*))
  ;         (when (nonzero? v1-204)
  ;           (set! (-> v1-204 length) (max 10 (-> v1-204 length)))
  ;           (set! (-> v1-204 data 9 name) "tie-fragment")
  ;           (+! (-> v1-204 data 9 count) 1)
  ;           (+! (-> v1-204 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-7))
  ;               )
  ;           (set! (-> v1-204 data 9 total) (-> v1-204 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask etie-scissor-trans) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* envmap-scissor-trans-count))
  ;     (let ((s5-8 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-221 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id etie-scissor-l0-alpha)
  ;                                          (bucket-id etie-scissor-l1-alpha)
  ;                                          (bucket-id etie-scissor-l2-alpha)
  ;                                          (bucket-id etie-scissor-l3-alpha)
  ;                                          (bucket-id etie-scissor-l4-alpha)
  ;                                          (bucket-id etie-scissor-l5-alpha)
  ;                                          (bucket-id etie-scissor-l6-alpha)
  ;                                          (bucket-id etie-scissor-l7-alpha)
  ;                                          (bucket-id etie-scissor-l8-alpha)
  ;                                          (bucket-id etie-scissor-l9-alpha)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-145 (-> v1-221 base))
  ;               (a0-117 (the-as object (-> *prototype-tie-work* envmap-scissor-trans-last)))
  ;               )
  ;           (let ((a3-73 (-> *prototype-tie-work* envmap-scissor-trans-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-145)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-145))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-145)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-73 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-149 (logior (logand (-> (the-as (pointer uint64) a0-117) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-145 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-117) a1-149)
  ;             )
  ;           )
  ;         (&+! (-> v1-221 base) 16)
  ;         )
  ;       (let ((v1-229 *dma-mem-usage*))
  ;         (when (nonzero? v1-229)
  ;           (set! (-> v1-229 length) (max 10 (-> v1-229 length)))
  ;           (set! (-> v1-229 data 9 name) "tie-fragment")
  ;           (+! (-> v1-229 data 9 count) 1)
  ;           (+! (-> v1-229 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-8))
  ;               )
  ;           (set! (-> v1-229 data 9 total) (-> v1-229 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask tie-scissor-water) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* scissor-water-count))
  ;     (let ((s5-9 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-246 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-scissor-l0-water)
  ;                                          (bucket-id tie-scissor-l1-water)
  ;                                          (bucket-id tie-scissor-l2-water)
  ;                                          (bucket-id tie-scissor-l3-water)
  ;                                          (bucket-id tie-scissor-l4-water)
  ;                                          (bucket-id tie-scissor-l5-water)
  ;                                          (bucket-id tie-scissor-l6-water)
  ;                                          (bucket-id tie-scissor-l7-water)
  ;                                          (bucket-id tie-scissor-l8-water)
  ;                                          (bucket-id tie-scissor-l9-water)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-163 (-> v1-246 base))
  ;               (a0-132 (the-as object (-> *prototype-tie-work* scissor-water-last)))
  ;               )
  ;           (let ((a3-82 (-> *prototype-tie-work* scissor-water-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-163)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-163))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-163)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-82 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-167 (logior (logand (-> (the-as (pointer uint64) a0-132) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-163 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-132) a1-167)
  ;             )
  ;           )
  ;         (&+! (-> v1-246 base) 16)
  ;         )
  ;       (let ((v1-254 *dma-mem-usage*))
  ;         (when (nonzero? v1-254)
  ;           (set! (-> v1-254 length) (max 16 (-> v1-254 length)))
  ;           (set! (-> v1-254 data 15 name) "tie-scissor")
  ;           (+! (-> v1-254 data 15 count) 1)
  ;           (+! (-> v1-254 data 15 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-9))
  ;               )
  ;           (set! (-> v1-254 data 15 total) (-> v1-254 data 15 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask tie-water) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* water-count))
  ;     (let ((s5-10 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-271 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id tie-l0-water)
  ;                                          (bucket-id tie-l1-water)
  ;                                          (bucket-id tie-l2-water)
  ;                                          (bucket-id tie-l3-water)
  ;                                          (bucket-id tie-l4-water)
  ;                                          (bucket-id tie-l5-water)
  ;                                          (bucket-id tie-l6-water)
  ;                                          (bucket-id tie-l7-water)
  ;                                          (bucket-id tie-l8-water)
  ;                                          (bucket-id tie-l9-water)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-181 (-> v1-271 base))
  ;               (a0-147 (the-as object (-> *prototype-tie-work* water-last)))
  ;               )
  ;           (let ((a3-91 (-> *prototype-tie-work* water-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-181)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-181))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-181)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-91 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-185 (logior (logand (-> (the-as (pointer uint64) a0-147) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-181 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-147) a1-185)
  ;             )
  ;           )
  ;         (&+! (-> v1-271 base) 16)
  ;         )
  ;       (let ((v1-279 *dma-mem-usage*))
  ;         (when (nonzero? v1-279)
  ;           (set! (-> v1-279 length) (max 10 (-> v1-279 length)))
  ;           (set! (-> v1-279 data 9 name) "tie-fragment")
  ;           (+! (-> v1-279 data 9 count) 1)
  ;           (+! (-> v1-279 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-10))
  ;               )
  ;           (set! (-> v1-279 data 9 total) (-> v1-279 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask etie-water) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* envmap-water-count))
  ;     (let ((s5-11 (-> *display* frames (-> *display* on-screen) global-buf base)))
  ;       (with-dma-buffer-add-bucket ((v1-296 (-> *display* frames (-> *display* on-screen) global-buf))
  ;                                    (-> (new 'static 'array bucket-id 10
  ;                                          (bucket-id etie-l0-water)
  ;                                          (bucket-id etie-l1-water)
  ;                                          (bucket-id etie-l2-water)
  ;                                          (bucket-id etie-l3-water)
  ;                                          (bucket-id etie-l4-water)
  ;                                          (bucket-id etie-l5-water)
  ;                                          (bucket-id etie-l6-water)
  ;                                          (bucket-id etie-l7-water)
  ;                                          (bucket-id etie-l8-water)
  ;                                          (bucket-id etie-l9-water)
  ;                                          )
  ;                                        (-> arg1 draw-index)
  ;                                        )
  ;                                    )
  ;         (let ((a1-199 (-> v1-296 base))
  ;               (a0-162 (the-as object (-> *prototype-tie-work* envmap-water-last)))
  ;               )
  ;           (let ((a3-100 (-> *prototype-tie-work* envmap-water-next)))
  ;             (set! (-> (the-as (pointer uint128) a1-199)) (-> *prototype-tie-work* model-next quad))
  ;             (set! (-> (the-as (pointer uint64) a1-199))
  ;                   (logior (logand (-> (the-as (pointer uint64) a1-199)) (the-as uint #x80000000ffffffff))
  ;                           (shr (shl a3-100 33) 1)
  ;                           )
  ;                   )
  ;             )
  ;           (let ((a1-203 (logior (logand (-> (the-as (pointer uint64) a0-162) 0) (the-as uint #x80000000ffffffff))
  ;                                 (shr (shl (the-as int (&+ a1-199 16)) 33) 1)
  ;                                 )
  ;                         )
  ;                 )
  ;             (s.d! (the-as uint a0-162) a1-203)
  ;             )
  ;           )
  ;         (&+! (-> v1-296 base) 16)
  ;         )
  ;       (let ((v1-304 *dma-mem-usage*))
  ;         (when (nonzero? v1-304)
  ;           (set! (-> v1-304 length) (max 10 (-> v1-304 length)))
  ;           (set! (-> v1-304 data 9 name) "tie-fragment")
  ;           (+! (-> v1-304 data 9 count) 1)
  ;           (+! (-> v1-304 data 9 used)
  ;               (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-11))
  ;               )
  ;           (set! (-> v1-304 data 9 total) (-> v1-304 data 9 used))
  ;           )
  ;         )
  ;       )
  ;     )
  ;   )
  ; (when (logtest? (vu1-renderer-mask etie-scissor-water) (-> *display* vu1-enable-user))
  ;   (when (nonzero? (-> *prototype-tie-work* envmap-scissor-water-count))
  ;     (let* ((s5-12 (-> *display* frames (-> *display* on-screen) global-buf base))
  ;            (v1-320 (-> *display* frames (-> *display* on-screen) global-buf))
  ;            (a2-120 (-> v1-320 base))
  ;            )
  ;       (let ((a1-217 (-> v1-320 base))
  ;             (a0-176 (the-as object (-> *prototype-tie-work* envmap-scissor-water-last)))
  ;             )
  ;         (let ((a3-109 (-> *prototype-tie-work* envmap-scissor-water-next)))
  ;           (set! (-> (the-as (pointer uint128) a1-217)) (-> *prototype-tie-work* model-next quad))
  ;           (set! (-> (the-as (pointer uint64) a1-217))
  ;                 (logior (logand (-> (the-as (pointer uint64) a1-217)) (the-as uint #x80000000ffffffff))
  ;                         (shr (shl a3-109 33) 1)
  ;                         )
  ;                 )
  ;           )
  ;         (let ((a1-221 (logior (logand (-> (the-as (pointer uint64) a0-176) 0) (the-as uint #x80000000ffffffff))
  ;                               (shr (shl (the-as int (&+ a1-217 16)) 33) 1)
  ;                               )
  ;                       )
  ;               )
  ;           (s.d! (the-as uint a0-176) a1-221)
  ;           )
  ;         )
  ;       (&+! (-> v1-320 base) 16)
  ;       (let* ((a3-115 (-> v1-320 base))
  ;              (v0-12 (when (!= a2-120 a3-115)
  ;                       (let ((a0-179 (-> v1-320 base)))
  ;                         (set! (-> (the-as (pointer int64) a0-179)) #x20000000)
  ;                         (s.w! (+ a0-179 8) 0)
  ;                         (s.w! (+ a0-179 12) 0)
  ;                         (set! (-> v1-320 base) (&+ a0-179 16))
  ;                         )
  ;                       (dma-bucket-insert-tag
  ;                         (-> *display* frames (-> *display* on-screen) bucket-group)
  ;                         (-> (new 'static 'array bucket-id 10
  ;                               (bucket-id etie-scissor-l0-water)
  ;                               (bucket-id etie-scissor-l1-water)
  ;                               (bucket-id etie-scissor-l2-water)
  ;                               (bucket-id etie-scissor-l3-water)
  ;                               (bucket-id etie-scissor-l4-water)
  ;                               (bucket-id etie-scissor-l5-water)
  ;                               (bucket-id etie-scissor-l6-water)
  ;                               (bucket-id etie-scissor-l7-water)
  ;                               (bucket-id etie-scissor-l8-water)
  ;                               (bucket-id etie-scissor-l9-water)
  ;                               )
  ;                             (-> arg1 draw-index)
  ;                             )
  ;                         a2-120
  ;                         (the-as (pointer dma-tag) a3-115)
  ;                         )
  ;                       )
  ;                     )
  ;              )
  ;         (let ((v1-328 *dma-mem-usage*))
  ;           (when (nonzero? v1-328)
  ;             (set! (-> v1-328 length) (max 10 (-> v1-328 length)))
  ;             (set! (-> v1-328 data 9 name) "tie-fragment")
  ;             (+! (-> v1-328 data 9 count) 1)
  ;             (+! (-> v1-328 data 9 used)
  ;                 (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s5-12))
  ;                 )
  ;             (set! (-> v1-328 data 9 total) (-> v1-328 data 9 used))
  ;             )
  ;           )
  ;         v0-12
  ;         )
  ;       )
  ;     )
  ;   )
   (the object 0)
  )

(defun draw-drawable-tree-instance-tie ((arg0 drawable-tree-instance-tie) (arg1 level))
  (local-vars (v0-9 object) (a0-42 int) (a0-44 int) (a0-55 int) (a0-57 int) (sv-16 int))
  (when (logtest? (vu1-renderer-mask
                    tie-scissor
                    tie
                    etie
                    etie-scissor
                    tie-vanish
                    generic
                    tie-scissor-trans
                    tie-trans
                    etie-trans
                    etie-scissor-trans
                    )
                  (-> *display* vu1-enable-user)
                  )
    (set! (-> *instance-tie-work* wind-vectors) (-> arg0 prototypes wind-vectors))
    (let ((s5-0 (+ (-> arg0 length) -1)))
      (when (nonzero? s5-0)
        ; (dotimes (s4-0 s5-0)
        ;   (let* ((v1-9 (-> arg0 data s4-0))
        ;          (a0-7 (-> arg0 data (+ s4-0 1)))
        ;          (a1-2 (/ (-> (the-as drawable-inline-array-node v1-9) data 0 id) 8))
        ;          (a0-9 (/ (-> (the-as drawable-inline-array-node a0-7) data 0 id) 8))
        ;          (a1-4 (+ a1-2 #x3800 #x70000000))
        ;          (a0-11 (+ a0-9 #x3800 #x70000000))
        ;          )
        ;     (draw-node-cull
        ;       (the-as pointer a0-11)
        ;       (the-as pointer a1-4)
        ;       (-> (the-as drawable-inline-array-node v1-9) data)
        ;       (-> (the-as drawable-inline-array-node v1-9) length)
        ;       )
        ;     )
        ;   )
        )
      (let* ((s2-0 (-> arg0 data s5-0))
             (s3-0 (-> arg0 prototypes prototype-array-tie))
             (s4-1 (-> s3-0 length))
             (s5-1 (-> *display* frames (-> *display* on-screen) global-buf))
             (s0-0 (-> s5-1 base))
             (s1-1 (&- (-> s5-1 end) (the-as uint (* (-> arg0 prototypes prototype-max-qwc) 16))))
             )
        (when *debug-segment*
          (if (>= (the-as uint s0-0) (the-as uint s1-1))
              (format *stdcon* "out of tie memory~%")
              )
          )
        (when (< (the-as uint s0-0) (the-as uint s1-1))
          (set! (-> *instance-tie-work* buffer-start) (the-as uint (-> s5-1 base)))
          (set! (-> *instance-tie-work* buffer-end) (the-as uint s1-1))
          (dotimes (v1-28 16)
            (set! (-> *prototype-tie-work* last v1-28) (the-as uint 0))
            (set! (-> *prototype-tie-work* next v1-28) (the-as uint 0))
            (set! (-> *prototype-tie-work* count v1-28) (the-as uint 0))
            )
          (dotimes (v1-31 s4-1)
            (let ((a0-26 (-> s3-0 array-data v1-31)))
              (dotimes (a1-9 3)
                (set! (-> a0-26 next-clear a1-9) (the-as uint128 0))
                (set! (-> a0-26 count-clear a1-9) (the-as uint 0))
                )
              )
            )
          (let* ((s1-2 (&+ s2-0 32))
                 (s0-1 (+ (/ (-> s1-2 id) 8) #x3800 #x70000000))
                 )
            (set! sv-16 (-> (the-as drawable-inline-array-instance-tie s2-0) length))
            (when (nonzero? sv-16)
              (let* ((v1-41 (logand (the-as int *gsf-buffer*) 8191))
                     (v1-43
                       (the-as
                         object
                         (logand (the-as int (&- (logand (the-as int (&-> (-> s3-0 data) -640)) 8191) (the-as uint v1-41))) 8191)
                         )
                       )
                     )
                (set! *instance-tie-work-copy* (the-as instance-tie-work (+ (the-as int *gsf-buffer*) (the-as int v1-43))))
                )
              (quad-copy! (the-as pointer *instance-tie-work-copy*) (the-as pointer *instance-tie-work*) 35)
              (let ((s2-1 (-> *display* frames (-> *display* on-screen) global-buf base)))
                (set! (-> *instance-tie-work-copy* wait-to-spr) (the-as uint 0))
                (set! (-> *instance-tie-work-copy* wait-from-spr) (the-as uint 0))
                (set! (-> *instance-tie-work-copy* tfrag-dists) (the-as uint (-> arg1 bsp tfrag-closest)))
                (set! (-> *instance-tie-work-copy* alpha-dists) (the-as uint (-> arg1 bsp alpha-closest)))
                (set! (-> *instance-tie-work-copy* water-dists) (the-as uint (-> arg1 bsp water-closest)))
                ; (let* ((v1-61 (-> *perf-stats* data 46))
                ;        (a0-39 (-> v1-61 ctrl))
                ;        )
                ;   (+! (-> v1-61 count) 1)
                ;   (b! (zero? a0-39) cfg-23 :delay (nop!))
                ;   (.mtc0 Perf 0)
                ;   (.sync.l)
                ;   (.sync.p)
                ;   (.mtpc pcr0 0)
                ;   (.mtpc pcr1 0)
                ;   (.sync.l)
                ;   (.sync.p)
                ;   (.mtc0 Perf a0-39)
                ;   )
                ; (.sync.l)
                ; (.sync.p)
                ; (label cfg-23)
                ; 0
                ; (let ((t9-3 draw-inline-array-instance-tie)
                ;       (a3-1 s5-1)
                ;       )
                ;   (t9-3 (the-as pointer s0-1) (the-as (inline-array instance-tie) s1-2) sv-16 a3-1)
                ;   )
                ; (let ((v1-64 (-> *perf-stats* data 46)))
                ;   (b! (zero? (-> v1-64 ctrl)) cfg-25 :delay (nop!))
                ;   (.mtc0 Perf 0)
                ;   (.sync.l)
                ;   (.sync.p)
                ;   (.mfpc a0-42 pcr0)
                ;   (+! (-> v1-64 accum0) a0-42)
                ;   (.mfpc a0-44 pcr1)
                ;   (+! (-> v1-64 accum1) a0-44)
                ;   )
                ; (label cfg-25)
                ; 0
                (update-wait-stats
                  (-> *perf-stats* data 46)
                  (the-as uint 0)
                  (-> *instance-tie-work-copy* wait-to-spr)
                  (-> *instance-tie-work-copy* wait-from-spr)
                  )
                (let ((v1-71 (-> *instance-tie-work-copy* min-dist quad)))
                  (set! (-> *instance-tie-work* min-dist quad) v1-71)
                  )
                (set! (-> *instance-tie-work* flags) (-> *instance-tie-work-copy* flags))
                (if (and *debug-segment* (< (the-as int (-> *instance-tie-work* buffer-end)) (the-as int (-> s5-1 base))))
                    (format *stdcon* "out of tie memory~%")
                    )
                (when (>= (the-as int (-> *instance-tie-work* buffer-end)) (the-as int (-> s5-1 base)))
                  (set! (-> *prototype-tie-work* wait-to-spr) (the-as uint 0))
                  (set! (-> *prototype-tie-work* wait-from-spr) (the-as uint 0))
                  ; (let* ((v1-85 (-> *perf-stats* data 47))
                  ;        (a0-52 (-> v1-85 ctrl))
                  ;        )
                  ;   (+! (-> v1-85 count) 1)
                  ;   (b! (zero? a0-52) cfg-33 :delay (nop!))
                  ;   (.mtc0 Perf 0)
                  ;   (.sync.l)
                  ;   (.sync.p)
                  ;   (.mtpc pcr0 0)
                  ;   (.mtpc pcr1 0)
                  ;   (.sync.l)
                  ;   (.sync.p)
                  ;   (.mtc0 Perf a0-52)
                  ;   )
                  ; (.sync.l)
                  ; (.sync.p)
                  ; (label cfg-33)
                  ; 0
                  ; (draw-inline-array-prototype-tie-asm s5-1 s4-1 s3-0)
                  ; (let ((v1-88 (-> *perf-stats* data 47)))
                  ;   (b! (zero? (-> v1-88 ctrl)) cfg-35 :delay (nop!))
                  ;   (.mtc0 Perf 0)
                  ;   (.sync.l)
                  ;   (.sync.p)
                  ;   (.mfpc a0-55 pcr0)
                  ;   (+! (-> v1-88 accum0) a0-55)
                  ;   (.mfpc a0-57 pcr1)
                  ;   (+! (-> v1-88 accum1) a0-57)
                  ;   )
                  ; (label cfg-35)
                  ; 0
                  (update-wait-stats
                    (-> *perf-stats* data 47)
                    (the-as uint 0)
                    (-> *prototype-tie-work* wait-to-spr)
                    (-> *prototype-tie-work* wait-from-spr)
                    )
                  )
                (let ((a0-60 *dma-mem-usage*))
                  (when (nonzero? a0-60)
                    (set! (-> a0-60 length) (max 10 (-> a0-60 length)))
                    (set! (-> a0-60 data 9 name) "tie-fragment")
                    (+! (-> a0-60 data 9 count) 1)
                    (+! (-> a0-60 data 9 used)
                        (&- (-> *display* frames (-> *display* on-screen) global-buf base) (the-as uint s2-1))
                        )
                    (set! (-> a0-60 data 9 total) (-> a0-60 data 9 used))
                    )
                  )
                )
              )
            )
          (set! v0-9 (cond
                       ((< (the-as int (-> *instance-tie-work* buffer-end)) (the-as int (-> s5-1 base)))
                        (if *debug-segment*
                            (format *stdcon* "out of tie memory~%")
                            )
                        (set! v0-9 (-> *instance-tie-work* buffer-start))
                        (set! (-> s5-1 base) (the-as pointer v0-9))
                        v0-9
                        )
                       (else
                         (instance-tie-patch-buckets s5-1 arg1)
                         )
                       )
                )
          )
        )
      )
    )
  (set! (-> arg1 tie-min-dist) (-> *instance-tie-work* min-dist x))
  0
  (none)
  )

;; ERROR: failed type prop at 40: Unknown symbol: tie-near-init-engine
;; WARN: Return type mismatch symbol vs none.
(defun tie-init-scissor-buf ((a0-0 bucket-id) (a1-0 gs-alpha) (a2-0 gs-test) (a3-0 gs-test))
   (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defun tie-init-buf ((arg0 bucket-id) (arg1 gs-alpha) (arg2 gs-test) (arg3 gs-test))
  (let ((v1-0 *display*)
        (a0-1 80)
        )
    (+! (-> v1-0 mem-reserve-size) a0-1)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((t1-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> t1-0 real-buffer-end) (the-as int (&+ (-> t1-0 base) a0-1)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (let ((s5-0 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= s5-0 (-> s5-0 last))
            (let* ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s3-1 (-> s4-0 base))
                   )
              (tie-init-engine s4-0 arg1 arg2 arg3)
              (let* ((v1-14 s4-0)
                     (a0-9 (the-as dma-packet (-> v1-14 base)))
                     )
                (set! (-> a0-9 dma) (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id cnt)))
                (set! (-> a0-9 vif0) (new 'static 'vif-tag))
                (set! (-> a0-9 vif1) (new 'static 'vif-tag :imm #x2 :cmd (vif-cmd direct) :msk #x1))
                (set! (-> v1-14 base) (the-as pointer (&+ a0-9 16)))
                )
              (let* ((v1-15 s4-0)
                     (a0-11 (the-as gs-gif-tag (-> v1-15 base)))
                     )
                (set! (-> a0-11 tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x1))
                (set! (-> a0-11 regs) GIF_REGS_ALL_AD)
                (set! (-> v1-15 base) (the-as pointer (&+ a0-11 16)))
                )
              (let* ((v1-16 s4-0)
                     (a0-13 (-> v1-16 base))
                     )
                (set! (-> (the-as (pointer gs-zbuf) a0-13) 0) (new 'static 'gs-zbuf :zbp #x130 :psm (gs-psm ct24)))
                (set! (-> (the-as (pointer gs-reg64) a0-13) 1) (gs-reg64 zbuf-1))
                (set! (-> v1-16 base) (&+ a0-13 16))
                )
              (let ((v1-17 (the-as object (-> s4-0 base))))
                (set! (-> (the-as dma-packet v1-17) dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (-> s5-0 next)))
                (set! (-> (the-as dma-packet v1-17) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-17) vif1) (new 'static 'vif-tag))
                (set! (-> s4-0 base) (the-as pointer (&+ (the-as dma-packet v1-17) 16)))
                )
              (set! (-> s5-0 next) (the-as uint s3-1))
              )
            )
          )
        (let ((gp-1 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= gp-1 (-> gp-1 last))
            (let* ((s4-1 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s5-1 (-> s4-1 base))
                   )
              (tie-end-buffer s4-1)
              (let ((v0-5 (-> s4-1 base)))
                (let ((v1-31 (the-as dma-packet (-> s4-1 base))))
                  (set! (-> v1-31 dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                  (set! (-> v1-31 vif0) (new 'static 'vif-tag))
                  (set! (-> v1-31 vif1) (new 'static 'vif-tag))
                  (set! (-> s4-1 base) (the-as pointer (&+ v1-31 16)))
                  )
                (set! (-> (the-as (pointer uint32) (-> gp-1 last)) 1) (the-as uint s5-1))
                (set! (-> gp-1 last) (the-as (pointer dma-tag) v0-5))
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
;; ERROR: Failed store: (s.w! (+ v1-14 8) 0) at op 50
;; ERROR: Failed store: (s.w! (+ v1-14 12) 0) at op 51
;; ERROR: Failed store: (s.w! (+ v1-28 8) 0) at op 81
;; ERROR: Failed store: (s.w! (+ v1-28 12) 0) at op 82
;; ERROR: Failed store: (s.w! (+ v1-30 4) s5-1) at op 86
(defun tie-init-envmap-buf ((arg0 bucket-id) (arg1 gs-alpha) (arg2 gs-test))
  (none)
  )

;; ERROR: failed type prop at 40: Unknown symbol: etn-init-engine
;; WARN: Return type mismatch symbol vs none.
(defun tie-init-envmap-scissor-buf ((a0-0 bucket-id) (a1-0 gs-alpha) (a2-0 int) (a3-0 int))
  (none)
  )

(deftype tie-init-data (structure)
  ((tie-bucket                       bucket-id)
   (tie-scissor-bucket               bucket-id)
   (tie-envmap-bucket                bucket-id)
   (tie-envmap-scissor-bucket        bucket-id)
   (tie-vanish-bucket                bucket-id)
   (tie-trans-bucket                 bucket-id)
   (tie-scissor-trans-bucket         bucket-id)
   (tie-envmap-trans-bucket          bucket-id)
   (tie-envmap-scissor-trans-bucket  bucket-id)
   (tie-water-bucket                 bucket-id)
   (tie-scissor-water-bucket         bucket-id)
   (tie-envmap-water-bucket          bucket-id)
   (tie-envmap-scissor-water-bucket  bucket-id)
   )
  )


(define *tie-init-table* (new 'static 'inline-array tie-init-data 10
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l0-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l0-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l0-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l0-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l0-tfrag)
                             :tie-trans-bucket (bucket-id tie-l0-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l0-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l0-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l0-alpha)
                             :tie-water-bucket (bucket-id tie-l0-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l0-water)
                             :tie-envmap-water-bucket (bucket-id etie-l0-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l0-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l1-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l1-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l1-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l1-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l1-tfrag)
                             :tie-trans-bucket (bucket-id tie-l1-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l1-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l1-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l1-alpha)
                             :tie-water-bucket (bucket-id tie-l1-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l1-water)
                             :tie-envmap-water-bucket (bucket-id etie-l1-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l1-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l2-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l2-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l2-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l2-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l2-tfrag)
                             :tie-trans-bucket (bucket-id tie-l2-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l2-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l2-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l2-alpha)
                             :tie-water-bucket (bucket-id tie-l2-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l2-water)
                             :tie-envmap-water-bucket (bucket-id etie-l2-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l2-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l3-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l3-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l3-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l3-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l3-tfrag)
                             :tie-trans-bucket (bucket-id tie-l3-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l3-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l3-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l3-alpha)
                             :tie-water-bucket (bucket-id tie-l3-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l3-water)
                             :tie-envmap-water-bucket (bucket-id etie-l3-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l3-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l4-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l4-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l4-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l4-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l4-tfrag)
                             :tie-trans-bucket (bucket-id tie-l4-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l4-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l4-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l4-alpha)
                             :tie-water-bucket (bucket-id tie-l4-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l4-water)
                             :tie-envmap-water-bucket (bucket-id etie-l4-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l4-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l5-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l5-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l5-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l5-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l5-tfrag)
                             :tie-trans-bucket (bucket-id tie-l5-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l5-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l5-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l5-alpha)
                             :tie-water-bucket (bucket-id tie-l5-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l5-water)
                             :tie-envmap-water-bucket (bucket-id etie-l5-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l5-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l6-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l6-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l6-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l6-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l6-tfrag)
                             :tie-trans-bucket (bucket-id tie-l6-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l6-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l6-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l6-alpha)
                             :tie-water-bucket (bucket-id tie-l6-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l6-water)
                             :tie-envmap-water-bucket (bucket-id etie-l6-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l6-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l7-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l7-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l7-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l7-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l7-tfrag)
                             :tie-trans-bucket (bucket-id tie-l7-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l7-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l7-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l7-alpha)
                             :tie-water-bucket (bucket-id tie-l7-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l7-water)
                             :tie-envmap-water-bucket (bucket-id etie-l7-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l7-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l8-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l8-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l8-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l8-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l8-tfrag)
                             :tie-trans-bucket (bucket-id tie-l8-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l8-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l8-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l8-alpha)
                             :tie-water-bucket (bucket-id tie-l8-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l8-water)
                             :tie-envmap-water-bucket (bucket-id etie-l8-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l8-water)
                             )
                           (new 'static 'tie-init-data
                             :tie-bucket (bucket-id tie-l9-tfrag)
                             :tie-scissor-bucket (bucket-id tie-scissor-l9-tfrag)
                             :tie-envmap-bucket (bucket-id etie-l9-tfrag)
                             :tie-envmap-scissor-bucket (bucket-id etie-scissor-l9-tfrag)
                             :tie-vanish-bucket (bucket-id tie-vanish-l9-tfrag)
                             :tie-trans-bucket (bucket-id tie-l9-alpha)
                             :tie-scissor-trans-bucket (bucket-id tie-scissor-l9-alpha)
                             :tie-envmap-trans-bucket (bucket-id etie-l9-alpha)
                             :tie-envmap-scissor-trans-bucket (bucket-id etie-scissor-l9-alpha)
                             :tie-water-bucket (bucket-id tie-l9-water)
                             :tie-scissor-water-bucket (bucket-id tie-scissor-l9-water)
                             :tie-envmap-water-bucket (bucket-id etie-l9-water)
                             :tie-envmap-scissor-water-bucket (bucket-id etie-scissor-l9-water)
                             )
                           )
        )

;; WARN: Return type mismatch symbol vs none.
(defun tie-vu1-init-buffers ()
  (let ((gp-0 0)
        (s5-0 100)
        (s4-0 68)
        )
    (dotimes (s3-0 10)
      (let ((v1-2 (-> *level* draw-level s3-0))
            (s2-0 (-> *tie-init-table* s3-0))
            )
        (when v1-2
          (tie-init-buf
            (-> s2-0 tie-bucket)
            (the-as gs-alpha gp-0)
            (new 'static 'gs-test
              :ate #x1
              :atst (gs-atest greater-equal)
              :aref #x26
              :zte #x1
              :ztst (gs-ztest greater-equal)
              )
            (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
            )
          (let ((t9-1 tie-init-scissor-buf)
                (a0-3 (-> s2-0 tie-scissor-bucket))
                (a1-2 0)
                (a2-1 #x5026b)
                (a3-1 #x50000)
                )
            (t9-1 a0-3 (the-as gs-alpha a1-2) (the-as gs-test a2-1) (the-as gs-test a3-1))
            (tie-init-envmap-buf
              (-> s2-0 tie-envmap-bucket)
              (the-as gs-alpha gp-0)
              (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
              )
            (tie-init-envmap-scissor-buf (-> s2-0 tie-envmap-scissor-bucket) (the-as gs-alpha gp-0) #x50000 a3-1)
            )
          (tie-init-buf
            (-> s2-0 tie-vanish-bucket)
            (the-as gs-alpha s5-0)
            (new 'static 'gs-test
              :ate #x1
              :atst (gs-atest greater-equal)
              :aref #x26
              :zte #x1
              :ztst (gs-ztest greater-equal)
              )
            (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
            )
          (tie-init-buf
            (-> s2-0 tie-trans-bucket)
            (the-as gs-alpha s4-0)
            (new 'static 'gs-test
              :ate #x1
              :atst (gs-atest greater-equal)
              :aref #x26
              :zte #x1
              :ztst (gs-ztest greater-equal)
              )
            (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
            )
          (let ((t9-6 tie-init-scissor-buf)
                (a0-8 (-> s2-0 tie-scissor-trans-bucket))
                (a1-7 1)
                (a2-6 #x5026b)
                (a3-4 #x50000)
                )
            (t9-6 a0-8 (the-as gs-alpha a1-7) (the-as gs-test a2-6) (the-as gs-test a3-4))
            (tie-init-envmap-buf
              (-> s2-0 tie-envmap-trans-bucket)
              (the-as gs-alpha s4-0)
              (new 'static 'gs-test :zte #x1 :ztst (gs-ztest greater-equal))
              )
            (tie-init-envmap-scissor-buf (-> s2-0 tie-envmap-scissor-trans-bucket) (the-as gs-alpha s4-0) #x50000 a3-4)
            )
          (tie-init-buf
            (-> s2-0 tie-water-bucket)
            (the-as gs-alpha s4-0)
            (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest greater-equal))
            (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest greater-equal))
            )
          (let ((t9-10 tie-init-scissor-buf)
                (a0-12 (-> s2-0 tie-scissor-water-bucket))
                (a1-11 1)
                (a2-10 #x51001)
                (a3-6 #x51001)
                )
            (t9-10 a0-12 (the-as gs-alpha a1-11) (the-as gs-test a2-10) (the-as gs-test a3-6))
            (tie-init-envmap-buf
              (-> s2-0 tie-envmap-water-bucket)
              (the-as gs-alpha s4-0)
              (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest greater-equal))
              )
            (tie-init-envmap-scissor-buf (-> s2-0 tie-envmap-scissor-water-bucket) (the-as gs-alpha s4-0) #x51001 a3-6)
            )
          )
        )
      )
    )
  (none)
  )

(defmethod draw ((this drawable-tree-instance-tie))
  "Draw the drawable, and typically its children.
   This usually means adding stuff to a list to be drawn later, rather than expensive drawing here."
  (let ((v1-1 (-> *background-work* tie-tree-count))
        (a1-3 (-> *level* draw-level *draw-index*))
        )
    (set! (-> *background-work* tie-trees v1-1) this)
    (set! (-> *background-work* tie-levels v1-1) a1-3)
    )
  (+! (-> *background-work* tie-tree-count) 1)
  0
  (none)
  )

(defmethod collect-stats ((this drawable-tree-instance-tie))
  "Collect triangle/perf statistics for rendering.
   This is only called when viewing stats.
   The vis-bits and culling registers are loaded during this time."
  (when (logtest? (vu1-renderer-mask
                    tie-scissor
                    tie
                    etie
                    tie-vanish
                    generic
                    tie-scissor-trans
                    tie-trans
                    etie-trans
                    tie-scissor-water
                    tie-water
                    etie-water
                    )
                  (-> *display* vu1-enable-user)
                  )
    (-> this data (+ (-> this length) -1))
    (let ((v1-9 (-> this prototypes prototype-array-tie)))
      (dotimes (a0-1 (-> v1-9 length))
        (let ((a1-4 (-> v1-9 array-data a0-1)))
          (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask generic))
            (let ((a2-4 0)
                  (a3-0 2)
                  )
              (while (>= a3-0 a2-4)
                (let ((t0-2 (-> a1-4 generic-count a2-4))
                      (t2-0 (-> a1-4 tie-geom (+ a2-4 1)))
                      )
                  (when (nonzero? t0-2)
                    (let ((t1-4 (the-as object (-> t2-0 data)))
                          (t2-1 (-> t2-0 length))
                          )
                      (+! (-> *terrain-stats* tie-generic groups) 1)
                      (+! (-> *terrain-stats* tie-generic fragments) t2-1)
                      (+! (-> *terrain-stats* tie-generic instances) t0-2)
                      (dotimes (t3-9 t2-1)
                        (let ((t5-0 (* (-> (the-as tie-fragment t1-4) debug num-tris) t0-2))
                              (t4-7 (* (-> (the-as tie-fragment t1-4) debug num-dverts) t0-2))
                              )
                          (+! (-> *terrain-stats* tie-generic tris) t5-0)
                          (+! (-> *terrain-stats* tie-generic dverts) t4-7)
                          )
                        (set! t1-4 (&+ (the-as tie-fragment t1-4) 64))
                        )
                      )
                    )
                  )
                (+! a2-4 1)
                )
              )
            )
          (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-vanish))
            (let ((a2-11 (-> a1-4 vanish-count))
                  (t0-4 (-> a1-4 tie-geom 3))
                  )
              (when (nonzero? a2-11)
                (let ((a3-2 (the-as object (-> t0-4 data)))
                      (t0-5 (-> t0-4 length))
                      )
                  (+! (-> *terrain-stats* tie-vanish groups) 1)
                  (+! (-> *terrain-stats* tie-vanish fragments) t0-5)
                  (+! (-> *terrain-stats* tie-vanish instances) a2-11)
                  (dotimes (t1-15 t0-5)
                    (let ((t3-10 (* (-> (the-as tie-fragment a3-2) debug num-tris) a2-11))
                          (t2-9 (* (-> (the-as tie-fragment a3-2) debug num-dverts) a2-11))
                          )
                      (+! (-> *terrain-stats* tie-vanish tris) t3-10)
                      (+! (-> *terrain-stats* tie-vanish dverts) t2-9)
                      )
                    (set! a3-2 (&+ (the-as tie-fragment a3-2) 64))
                    )
                  )
                )
              )
            )
          (cond
            ((logtest? (-> a1-4 flags) (prototype-flags tpage-water))
             (when (logtest? (vu1-renderer-mask tie-water) (-> *display* vu1-enable-user))
               (let ((a2-18 1)
                     (a3-6 3)
                     )
                 (while (>= a3-6 a2-18)
                   (let ((t0-8 (-> a1-4 count a2-18))
                         (t2-11 (-> a1-4 tie-geom a2-18))
                         )
                     (when (nonzero? t0-8)
                       (let ((t1-19 (the-as object (-> t2-11 data)))
                             (t2-12 (-> t2-11 length))
                             )
                         (+! (-> *terrain-stats* tie-water groups) 1)
                         (+! (-> *terrain-stats* tie-water fragments) t2-12)
                         (+! (-> *terrain-stats* tie-water instances) t0-8)
                         (dotimes (t3-24 t2-12)
                           (let ((t5-5 (* (-> (the-as tie-fragment t1-19) debug num-tris) t0-8))
                                 (t4-19 (* (-> (the-as tie-fragment t1-19) debug num-dverts) t0-8))
                                 )
                             (+! (-> *terrain-stats* tie-water tris) t5-5)
                             (+! (-> *terrain-stats* tie-water dverts) t4-19)
                             )
                           (set! t1-19 (&+ (the-as tie-fragment t1-19) 64))
                           )
                         )
                       )
                     )
                   (+! a2-18 1)
                   )
                 )
               )
             (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-scissor))
               (let ((a2-25 (-> a1-4 tie-scissor-count))
                     (t0-10 (-> a1-4 tie-geom 0))
                     )
                 (when (nonzero? a2-25)
                   (let ((a3-8 (the-as object (-> t0-10 data)))
                         (t0-11 (-> t0-10 length))
                         )
                     (+! (-> *terrain-stats* tie-scissor-water groups) 1)
                     (+! (-> *terrain-stats* tie-scissor-water fragments) t0-11)
                     (+! (-> *terrain-stats* tie-scissor-water instances) a2-25)
                     (dotimes (t1-30 t0-11)
                       (let ((t3-25 (* (-> (the-as tie-fragment a3-8) debug num-tris) a2-25))
                             (t2-20 (* (-> (the-as tie-fragment a3-8) debug num-dverts) a2-25))
                             )
                         (+! (-> *terrain-stats* tie-scissor-water tris) t3-25)
                         (+! (-> *terrain-stats* tie-scissor-water dverts) t2-20)
                         )
                       (set! a3-8 (&+ (the-as tie-fragment a3-8) 64))
                       )
                     )
                   )
                 )
               )
             (when (logtest? (vu1-renderer-mask etie-water) (-> *display* vu1-enable-user))
               (let ((a2-30 1)
                     (a3-12 3)
                     )
                 (while (>= a3-12 a2-30)
                   (let ((t0-14 (-> a1-4 envmap-count a2-30))
                         (t2-22 (-> a1-4 tie-geom a2-30))
                         )
                     (when (nonzero? t0-14)
                       (let ((t1-34 (the-as object (-> t2-22 data)))
                             (t2-23 (-> t2-22 length))
                             )
                         (+! (-> *terrain-stats* tie-envmap-water groups) 1)
                         (+! (-> *terrain-stats* tie-envmap-water fragments) t2-23)
                         (+! (-> *terrain-stats* tie-envmap-water instances) t0-14)
                         (dotimes (t3-39 t2-23)
                           (let ((t5-10 (* (* t0-14 (-> (the-as tie-fragment t1-34) debug num-tris)) 2))
                                 (t4-33 (* (* t0-14 (-> (the-as tie-fragment t1-34) debug num-dverts)) 2))
                                 )
                             (+! (-> *terrain-stats* tie-envmap-water tris) t5-10)
                             (+! (-> *terrain-stats* tie-envmap-water dverts) t4-33)
                             )
                           (set! t1-34 (&+ (the-as tie-fragment t1-34) 64))
                           )
                         )
                       )
                     )
                   (+! a2-30 1)
                   )
                 )
               )
             (when (logtest? (vu1-renderer-mask etie-scissor-water) (-> *display* vu1-enable-user))
               (let ((a2-35 (-> a1-4 envmap-scissor-count))
                     (t0-16 (-> a1-4 tie-geom 0))
                     )
                 (when (nonzero? a2-35)
                   (let ((a1-5 (the-as object (-> t0-16 data)))
                         (a3-17 (-> t0-16 length))
                         )
                     (+! (-> *terrain-stats* tie-envmap-scissor-water groups) 1)
                     (+! (-> *terrain-stats* tie-envmap-scissor-water fragments) a3-17)
                     (+! (-> *terrain-stats* tie-envmap-scissor-water instances) a2-35)
                     (dotimes (t0-26 a3-17)
                       (let ((t2-24 (* (* a2-35 (-> (the-as tie-fragment a1-5) debug num-tris)) 2))
                             (t1-45 (* (* a2-35 (-> (the-as tie-fragment a1-5) debug num-dverts)) 2))
                             )
                         (+! (-> *terrain-stats* tie-envmap-scissor-water tris) t2-24)
                         (+! (-> *terrain-stats* tie-envmap-scissor-water dverts) t1-45)
                         )
                       (set! a1-5 (&+ (the-as tie-fragment a1-5) 64))
                       )
                     )
                   )
                 )
               )
             )
            ((logtest? (-> a1-4 flags) (prototype-flags tpage-alpha))
             (when (logtest? (vu1-renderer-mask tie-trans) (-> *display* vu1-enable-user))
               (let ((a2-41 1)
                     (a3-21 3)
                     )
                 (while (>= a3-21 a2-41)
                   (let ((t0-29 (-> a1-4 count a2-41))
                         (t2-29 (-> a1-4 tie-geom a2-41))
                         )
                     (when (nonzero? t0-29)
                       (let ((t1-50 (the-as object (-> t2-29 data)))
                             (t2-30 (-> t2-29 length))
                             )
                         (+! (-> *terrain-stats* tie-trans groups) 1)
                         (+! (-> *terrain-stats* tie-trans fragments) t2-30)
                         (+! (-> *terrain-stats* tie-trans instances) t0-29)
                         (dotimes (t3-52 t2-30)
                           (let ((t5-15 (* (-> (the-as tie-fragment t1-50) debug num-tris) t0-29))
                                 (t4-42 (* (-> (the-as tie-fragment t1-50) debug num-dverts) t0-29))
                                 )
                             (+! (-> *terrain-stats* tie-trans tris) t5-15)
                             (+! (-> *terrain-stats* tie-trans dverts) t4-42)
                             )
                           (set! t1-50 (&+ (the-as tie-fragment t1-50) 64))
                           )
                         )
                       )
                     )
                   (+! a2-41 1)
                   )
                 )
               )
             (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-scissor))
               (let ((a2-48 (-> a1-4 tie-scissor-count))
                     (t0-31 (-> a1-4 tie-geom 0))
                     )
                 (when (nonzero? a2-48)
                   (let ((a3-23 (the-as object (-> t0-31 data)))
                         (t0-32 (-> t0-31 length))
                         )
                     (+! (-> *terrain-stats* tie-scissor-trans groups) 1)
                     (+! (-> *terrain-stats* tie-scissor-trans fragments) t0-32)
                     (+! (-> *terrain-stats* tie-scissor-trans instances) a2-48)
                     (dotimes (t1-61 t0-32)
                       (let ((t3-53 (* (-> (the-as tie-fragment a3-23) debug num-tris) a2-48))
                             (t2-38 (* (-> (the-as tie-fragment a3-23) debug num-dverts) a2-48))
                             )
                         (+! (-> *terrain-stats* tie-scissor-trans tris) t3-53)
                         (+! (-> *terrain-stats* tie-scissor-trans dverts) t2-38)
                         )
                       (set! a3-23 (&+ (the-as tie-fragment a3-23) 64))
                       )
                     )
                   )
                 )
               )
             (when (logtest? (vu1-renderer-mask etie-trans) (-> *display* vu1-enable-user))
               (let ((a2-53 1)
                     (a3-27 3)
                     )
                 (while (>= a3-27 a2-53)
                   (let ((t0-35 (-> a1-4 envmap-count a2-53))
                         (t2-40 (-> a1-4 tie-geom a2-53))
                         )
                     (when (nonzero? t0-35)
                       (let ((t1-65 (the-as object (-> t2-40 data)))
                             (t2-41 (-> t2-40 length))
                             )
                         (+! (-> *terrain-stats* tie-envmap-trans groups) 1)
                         (+! (-> *terrain-stats* tie-envmap-trans fragments) t2-41)
                         (+! (-> *terrain-stats* tie-envmap-trans instances) t0-35)
                         (dotimes (t3-67 t2-41)
                           (let ((t5-20 (* (* t0-35 (-> (the-as tie-fragment t1-65) debug num-tris)) 2))
                                 (t4-56 (* (* t0-35 (-> (the-as tie-fragment t1-65) debug num-dverts)) 2))
                                 )
                             (+! (-> *terrain-stats* tie-envmap-trans tris) t5-20)
                             (+! (-> *terrain-stats* tie-envmap-trans dverts) t4-56)
                             )
                           (set! t1-65 (&+ (the-as tie-fragment t1-65) 64))
                           )
                         )
                       )
                     )
                   (+! a2-53 1)
                   )
                 )
               )
             (when (logtest? (vu1-renderer-mask etie-scissor-trans) (-> *display* vu1-enable-user))
               (let ((a2-58 (-> a1-4 envmap-scissor-count))
                     (t0-37 (-> a1-4 tie-geom 0))
                     )
                 (when (nonzero? a2-58)
                   (let ((a1-7 (the-as object (-> t0-37 data)))
                         (a3-32 (-> t0-37 length))
                         )
                     (+! (-> *terrain-stats* tie-envmap-scissor-trans groups) 1)
                     (+! (-> *terrain-stats* tie-envmap-scissor-trans fragments) a3-32)
                     (+! (-> *terrain-stats* tie-envmap-scissor-trans instances) a2-58)
                     (dotimes (t0-47 a3-32)
                       (let ((t2-42 (* (* a2-58 (-> (the-as tie-fragment a1-7) debug num-tris)) 2))
                             (t1-76 (* (* a2-58 (-> (the-as tie-fragment a1-7) debug num-dverts)) 2))
                             )
                         (+! (-> *terrain-stats* tie-envmap-scissor-trans tris) t2-42)
                         (+! (-> *terrain-stats* tie-envmap-scissor-trans dverts) t1-76)
                         )
                       (set! a1-7 (&+ (the-as tie-fragment a1-7) 64))
                       )
                     )
                   )
                 )
               )
             )
            (else
              (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie))
                (let ((a2-63 1)
                      (a3-34 3)
                      )
                  (while (>= a3-34 a2-63)
                    (let ((t0-50 (-> a1-4 count a2-63))
                          (t2-47 (-> a1-4 tie-geom a2-63))
                          )
                      (when (nonzero? t0-50)
                        (let ((t1-81 (the-as object (-> t2-47 data)))
                              (t2-48 (-> t2-47 length))
                              )
                          (+! (-> *terrain-stats* tie groups) 1)
                          (+! (-> *terrain-stats* tie fragments) t2-48)
                          (+! (-> *terrain-stats* tie instances) t0-50)
                          (dotimes (t3-80 t2-48)
                            (let ((t5-25 (* (-> (the-as tie-fragment t1-81) debug num-tris) t0-50))
                                  (t4-65 (* (-> (the-as tie-fragment t1-81) debug num-dverts) t0-50))
                                  )
                              (+! (-> *terrain-stats* tie tris) t5-25)
                              (+! (-> *terrain-stats* tie dverts) t4-65)
                              )
                            (set! t1-81 (&+ (the-as tie-fragment t1-81) 64))
                            )
                          )
                        )
                      )
                    (+! a2-63 1)
                    )
                  )
                )
              (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask tie-scissor))
                (let ((a2-70 (-> a1-4 tie-scissor-count))
                      (t0-52 (-> a1-4 tie-geom 0))
                      )
                  (when (nonzero? a2-70)
                    (let ((a3-36 (the-as object (-> t0-52 data)))
                          (t0-53 (-> t0-52 length))
                          )
                      (+! (-> *terrain-stats* tie-scissor groups) 1)
                      (+! (-> *terrain-stats* tie-scissor fragments) t0-53)
                      (+! (-> *terrain-stats* tie-scissor instances) a2-70)
                      (dotimes (t1-92 t0-53)
                        (let ((t3-81 (* (-> (the-as tie-fragment a3-36) debug num-tris) a2-70))
                              (t2-56 (* (-> (the-as tie-fragment a3-36) debug num-dverts) a2-70))
                              )
                          (+! (-> *terrain-stats* tie-scissor tris) t3-81)
                          (+! (-> *terrain-stats* tie-scissor dverts) t2-56)
                          )
                        (set! a3-36 (&+ (the-as tie-fragment a3-36) 64))
                        )
                      )
                    )
                  )
                )
              (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask etie))
                (let ((a2-76 1)
                      (a3-38 3)
                      )
                  (while (>= a3-38 a2-76)
                    (let ((t0-56 (-> a1-4 envmap-count a2-76))
                          (t2-58 (-> a1-4 tie-geom a2-76))
                          )
                      (when (nonzero? t0-56)
                        (let ((t1-96 (the-as object (-> t2-58 data)))
                              (t2-59 (-> t2-58 length))
                              )
                          (+! (-> *terrain-stats* tie-envmap groups) 1)
                          (+! (-> *terrain-stats* tie-envmap fragments) t2-59)
                          (+! (-> *terrain-stats* tie-envmap instances) t0-56)
                          (dotimes (t3-95 t2-59)
                            (let ((t5-30 (* (* t0-56 (-> (the-as tie-fragment t1-96) debug num-tris)) 2))
                                  (t4-79 (* (* t0-56 (-> (the-as tie-fragment t1-96) debug num-dverts)) 2))
                                  )
                              (+! (-> *terrain-stats* tie-envmap tris) t5-30)
                              (+! (-> *terrain-stats* tie-envmap dverts) t4-79)
                              )
                            (set! t1-96 (&+ (the-as tie-fragment t1-96) 64))
                            )
                          )
                        )
                      )
                    (+! a2-76 1)
                    )
                  )
                )
              (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask etie-scissor))
                (let ((a2-82 (-> a1-4 envmap-scissor-count))
                      (t0-58 (-> a1-4 tie-geom 0))
                      )
                  (when (nonzero? a2-82)
                    (let ((a1-9 (the-as object (-> t0-58 data)))
                          (a3-41 (-> t0-58 length))
                          )
                      (+! (-> *terrain-stats* tie-envmap-scissor groups) 1)
                      (+! (-> *terrain-stats* tie-envmap-scissor fragments) a3-41)
                      (+! (-> *terrain-stats* tie-envmap-scissor instances) a2-82)
                      (dotimes (t0-68 a3-41)
                        (let ((t2-60 (* (* a2-82 (-> (the-as tie-fragment a1-9) debug num-tris)) 2))
                              (t1-107 (* (* a2-82 (-> (the-as tie-fragment a1-9) debug num-dverts)) 2))
                              )
                          (+! (-> *terrain-stats* tie-envmap-scissor tris) t2-60)
                          (+! (-> *terrain-stats* tie-envmap-scissor dverts) t1-107)
                          )
                        (set! a1-9 (&+ (the-as tie-fragment a1-9) 64))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defmethod debug-draw ((this drawable-tree-instance-tie))
  "Debug-draw a drawable and its children. Typically uses the debug-draw functions."
  (-> this data (+ (-> this length) -1))
  (let* ((gp-0 (-> this prototypes prototype-array-tie))
         (s5-0 (-> gp-0 length))
         )
    (dotimes (s4-0 s5-0)
      (debug-draw (-> gp-0 array-data s4-0 tie-geom 0))
      )
    )
  0
  (none)
  )
