;;-*-Lisp-*-
(in-package goal)

;; name: generic-vu1.gc
;; name in dgo: generic-vu1
;; dgos: GAME

(define-extern fx-copy-buf (function dma-buffer none))

;; DECOMP BEGINS

;; og:preserve-this
(define generic-vu1-block (new 'static 'vu-function #|:length #x6de :qlength #x36f|#))

(defun generic-setup-constants ((arg0 generic-constants))
  (let ((v1-0 *math-camera*))
    (set-vector! (-> arg0 fog) (-> v1-0 pfog0) (-> v1-0 fog-min) (-> v1-0 fog-max) 3072.0)
    (set! (-> arg0 adgif tag) (new 'static 'gif-tag64 :nloop #x7 :nreg #x1))
    (set! (-> arg0 adgif regs) (new 'static 'gif-tag-regs :regs0 (gif-reg-id a+d)))
    (set! (-> arg0 hvdf-offset quad) (-> v1-0 hvdf-off quad))
    (set! (-> arg0 hmge-scale quad) (-> v1-0 hmge-scale quad))
    (set! (-> arg0 invh-scale quad) (-> v1-0 inv-hmge-scale quad))
    (set! (-> arg0 guard quad) (-> v1-0 guard quad))
    )
  (set! (-> arg0 flush dword 0) (the-as uint #x3f80000080808080))
  (set! (-> arg0 flush dword 1) (the-as uint 1))
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defun generic-add-constants ((arg0 dma-buffer))
  (let* ((a1-0 8)
         (v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc a1-0))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a0-1) vif1)
          (new 'static 'vif-tag :imm #x381 :cmd (vif-cmd unpack-v4-32) :num a1-0)
          )
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  (generic-setup-constants (the-as generic-constants (-> arg0 base)))
  (&+! (-> arg0 base) 128)
  (none)
  )

(defun generic-setup-shrub-constants ((arg0 generic-shrub-constants) (arg1 int) (arg2 int) (arg3 int))
  (set! (-> arg0 shrub-giftag qword vector4w x) (logior #x30004000 (shr (shl arg3 53) 38)))
  (set! (-> arg0 shrub-giftag qword vector4w y) (logior #x30004000 (shr (shl arg2 53) 38)))
  (set! (-> arg0 shrub-giftag qword vector4w z) 1042)
  (set! (-> arg0 shrub-giftag qword vector4w w) 0)
  (set! (-> arg0 shrub-adnop dword 0) (the-as uint arg1))
  (set! (-> arg0 shrub-adnop dword 1) (the-as uint 71))
  (none)
  )

;; WARN: Return type mismatch pointer vs none.
(defun generic-add-shrub-constants ((arg0 dma-buffer) (arg1 int) (arg2 int) (arg3 int))
  (let ((v1-0 2)
        (a0-1 *display*)
        (t0-0 64)
        )
    (+! (-> a0-1 mem-reserve-size) t0-0)
    (when (not (-> a0-1 dma-buffer-overflow))
      (let ((t2-0 (-> a0-1 frames (-> a0-1 on-screen) global-buf)))
        (if (< (-> t2-0 real-buffer-end) (the-as int (&+ (-> t2-0 base) t0-0)))
            (set! (-> a0-1 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> a0-1 dma-buffer-overflow))
        (let* ((a0-3 arg0)
               (t0-4 (the-as object (-> a0-3 base)))
               )
          (set! (-> (the-as dma-packet t0-4) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc v1-0))
          (set! (-> (the-as dma-packet t0-4) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
          (set! (-> (the-as dma-packet t0-4) vif1)
                (new 'static 'vif-tag :imm #x389 :cmd (vif-cmd unpack-v4-32) :num v1-0)
                )
          (set! (-> a0-3 base) (&+ (the-as pointer t0-4) 16))
          )
        )
      )
    )
  (generic-setup-shrub-constants (the-as generic-shrub-constants (-> arg0 base)) arg1 arg2 arg3)
  (&+! (-> arg0 base) 32)
  (none)
  )

(defun generic-init-buf ((arg0 dma-buffer) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a0-6 (+ (* (+ (/ (-> generic-vu1-block qlength) 127) 1) 16) 208))
        )
    (+! (-> v1-0 mem-reserve-size) a0-6)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((a2-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> a2-0 real-buffer-end) (the-as int (&+ (-> a2-0 base) a0-6)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (dma-buffer-add-vu-function arg0 generic-vu1-block 1)
        (dma-buffer-add-gs-set arg0 (zbuf-1 arg1))
        (generic-add-constants arg0)
        (let* ((v1-5 arg0)
               (a0-18 (the-as object (-> v1-5 base)))
               )
          (set! (-> (the-as (pointer int64) a0-18)) #x10000002)
          (set! (-> (the-as dma-packet a0-18) vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1))
          (set! (-> (the-as dma-packet a0-18) vif1) (new 'static 'vif-tag :cmd (vif-cmd stmod)))
          (set! (-> v1-5 base) (&+ (the-as pointer a0-18) 16))
          )
        (let ((v1-6 (-> arg0 base)))
          (set! (-> (the-as (pointer int32) v1-6)) #x3000000)
          (set! (-> (the-as (pointer uint32) v1-6) 1) (the-as uint #x2000000))
          (set! (-> (the-as (pointer uint32) v1-6) 2) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 3) (the-as uint #x30000000))
          (set! (-> (the-as (pointer uint32) v1-6) 4) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 5) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 6) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 7) (the-as uint 0))
          (set! (-> arg0 base) (&+ v1-6 32))
          )
        )
      )
    )
  0
  (none)
  )

(defun generic-vu1-init-buf ((arg0 bucket-id) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a2-0 16)
        )
    (+! (-> v1-0 mem-reserve-size) a2-0)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((t0-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> t0-0 real-buffer-end) (the-as int (&+ (-> t0-0 base) a2-0)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (let ((gp-0 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= gp-0 (-> gp-0 last))
            (let* ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s5-3 (-> s4-0 base))
                   )
              (generic-init-buf s4-0 arg1)
              (let ((v1-14 (the-as object (-> s4-0 base))))
                (set! (-> (the-as dma-packet v1-14) dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (-> gp-0 next)))
                (set! (-> (the-as dma-packet v1-14) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-14) vif1) (new 'static 'vif-tag))
                (set! (-> s4-0 base) (&+ (the-as pointer v1-14) 16))
                )
              (set! (-> gp-0 next) (the-as uint s5-3))
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defun generic-vu1-init-buf-special ((arg0 bucket-id) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a1-1 16)
        )
    (+! (-> v1-0 mem-reserve-size) a1-1)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((a3-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> a3-0 real-buffer-end) (the-as int (&+ (-> a3-0 base) a1-1)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (let ((s5-0 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= s5-0 (-> s5-0 last))
            (let* ((s3-0 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s4-3 (-> s3-0 base))
                   )
              (fx-copy-buf s3-0)
              (generic-init-buf s3-0 arg1)
              (let ((v1-14 (the-as object (-> s3-0 base))))
                (set! (-> (the-as dma-packet v1-14) dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (-> s5-0 next)))
                (set! (-> (the-as dma-packet v1-14) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-14) vif1) (new 'static 'vif-tag))
                (set! (-> s3-0 base) (&+ (the-as pointer v1-14) 16))
                )
              (set! (-> s5-0 next) (the-as uint s4-3))
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defun generic-vu1-init-buffers ()
  (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask generic))
    (let ((s5-0 #x1000130))
      (let ((gp-0 (the-as uint #x101000130)))
        (generic-vu1-init-buf (bucket-id bucket19) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket31) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket43) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket55) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket67) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket79) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket91) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket103) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket115) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket127) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket343) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket21) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket33) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket45) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket57) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket69) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket81) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket93) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket105) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket117) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket129) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket344) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket354) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket359) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket364) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket369) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket374) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket379) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket384) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket389) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket394) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket399) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket404) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket355) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket360) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket365) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket370) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket375) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket380) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket385) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket390) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket395) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket400) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket405) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket138) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket148) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket158) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket168) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket178) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket188) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket198) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket208) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket218) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket228) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket348) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket139) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket149) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket159) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket169) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket179) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket189) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket199) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket209) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket219) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket229) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket349) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket236) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket247) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket258) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket269) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket280) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket291) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket302) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket313) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket324) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket335) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket240) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket251) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket262) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket273) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket284) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket295) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket306) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket317) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket328) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket339) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket409) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket414) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket419) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket424) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket429) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket434) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket439) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket444) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket449) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket454) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket459) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket410) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket415) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket420) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket425) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket430) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket435) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket440) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket445) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket450) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket455) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket460) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket465) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket475) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket485) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket495) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket505) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket515) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket525) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket535) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket545) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket555) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket565) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket472) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket482) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket492) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket502) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket512) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket522) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket532) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket542) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket552) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket562) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket566) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id bucket569) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket571) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id bucket574) (the-as gs-zbuf gp-0))
        )
      (generic-vu1-init-buf-special (bucket-id bucket576) (the-as gs-zbuf s5-0))
      )
    )
  (none)
  )
