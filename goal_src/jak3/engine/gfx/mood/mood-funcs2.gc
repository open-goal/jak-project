;;-*-Lisp-*-
(in-package goal)

;; name: mood-funcs2.gc
;; name in dgo: mood-funcs2
;; dgos: GAME

;; DECOMP BEGINS

(deftype default-interior-states (structure)
  ()
  )


(defbehavior update-mood-default-interior time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #f)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (-> arg0 state)
      (set! (-> arg0 times 0 w) 1.0)
      (set! (-> arg0 times 1 w) 1.0)
      (set! (-> arg0 times 2 w) 1.0)
      (set! (-> arg0 times 3 w) 1.0)
      (set! (-> arg0 times 4 w) 1.0)
      (set! (-> arg0 times 5 w) 1.0)
      (set! (-> arg0 times 6 w) 1.0)
      (set! (-> arg0 times 7 w) 1.0)
      )
    )
  0
  (none)
  )

(defbehavior update-mood-default-interior-ambient time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #t)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (-> arg0 state)
      (set! (-> arg0 times 0 w) 1.0)
      (set! (-> arg0 times 1 w) 1.0)
      (set! (-> arg0 times 2 w) 1.0)
      (set! (-> arg0 times 3 w) 1.0)
      (set! (-> arg0 times 4 w) 1.0)
      (set! (-> arg0 times 5 w) 1.0)
      (set! (-> arg0 times 6 w) 1.0)
      (set! (-> arg0 times 7 w) 1.0)
      )
    )
  0
  (none)
  )

(deftype vinroom-states (structure)
  ((main      float)
   (flicker1  float)
   (flicker2  float)
   (warp      float)
   )
  )


(defun update-vinroom-lights ((arg0 mood-context))
  (let ((v1-0 (-> arg0 light-group)))
    (set-vector! (-> arg0 current-env-color) 48.0 60.0 96.0 255.0)
    (set-vector! (-> v1-0 0 dir0 color) 0.061 0.854 1.0 1.0)
    (set-vector! (-> v1-0 0 dir1 color) 0.858 0.932 1.0 1.0)
    (let ((a0-4 (-> v1-0 0 dir1)))
      (set! (-> a0-4 direction x) -0.6499)
      (set! (-> a0-4 direction y) 0.7134)
      (set! (-> a0-4 direction z) -0.2619)
      (set! (-> a0-4 direction w) 1.0)
      )
    (set-vector! (-> v1-0 0 dir2 color) 0.858 0.932 1.0 1.0)
    (let ((a0-6 (-> v1-0 0 dir2)))
      (set! (-> a0-6 direction x) 0.4634)
      (set! (-> a0-6 direction y) 0.7718)
      (set! (-> a0-6 direction z) -0.4352)
      (set! (-> a0-6 direction w) 1.0)
      )
    (set-vector! (-> v1-0 0 ambi color) 0.282 0.42 0.637 1.0)
    (set! (-> v1-0 0 dir1 extra x) 1.0)
    (set! (-> v1-0 0 dir2 extra x) 1.0)
    )
  0
  (none)
  )

(defbehavior update-mood-vinroom time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #t)
  (update-vinroom-lights arg0)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (let ((gp-0 (the-as object (-> arg0 state))))
        (let ((s4-0 (-> arg0 light-group)))
          (set! (-> arg0 times 1 w) (+ 0.875 (* 0.175 (cos (-> (the-as vinroom-states gp-0) main)))))
          (set! (-> arg0 times 0 w) 1.0)
          (set! (-> s4-0 0 dir0 extra x) (-> arg0 times 1 w))
          (set! (-> arg0 times 2 w) (if (< 36408.89 (-> (the-as vinroom-states gp-0) flicker1))
                                        0.475
                                        0.5
                                        )
                )
          (set! (-> s4-0 0 dir1 extra x) (-> arg0 times 2 w))
          (set! (-> arg0 times 3 w) (if (< 21845.334 (-> (the-as vinroom-states gp-0) flicker2))
                                        0.475
                                        0.5
                                        )
                )
          (set! (-> s4-0 0 dir2 extra x) (-> arg0 times 3 w))
          )
        (set! (-> arg0 times 4 w) (+ 1.2 (* 0.2 (cos (-> (the-as vinroom-states gp-0) warp)))))
        (when (not (paused?))
          (let ((f0-17 (+ (-> (the-as vinroom-states gp-0) main) (* 18204.445 (seconds-per-frame)))))
            (set! (-> (the-as vinroom-states gp-0) main) (- f0-17 (* (the float (the int (/ f0-17 65536.0))) 65536.0)))
            )
          (let ((f0-20 (+ (-> (the-as vinroom-states gp-0) flicker1) (* 196608.0 (seconds-per-frame)))))
            (set! (-> (the-as vinroom-states gp-0) flicker1)
                  (- f0-20 (* (the float (the int (/ f0-20 65536.0))) 65536.0))
                  )
            )
          (let ((f0-23 (+ (-> (the-as vinroom-states gp-0) flicker2) (* 163840.0 (seconds-per-frame)))))
            (set! (-> (the-as vinroom-states gp-0) flicker2)
                  (- f0-23 (* (the float (the int (/ f0-23 65536.0))) 65536.0))
                  )
            )
          (let ((f0-26 (+ (-> (the-as vinroom-states gp-0) warp) (* 32768.0 (seconds-per-frame)))))
            (set! (-> (the-as vinroom-states gp-0) warp) (- f0-26 (* (the float (the int (/ f0-26 65536.0))) 65536.0)))
            )
          )
        )
      )
    )
  0
  (none)
  )

(deftype hideout-states (structure)
  ((flame0  flames-state  :inline)
   (flame1  flames-state  :inline)
   )
  )


(defun update-hideout-lights ((arg0 mood-context))
  (let ((a2-0 (-> arg0 light-group))
        (a1-0 (-> arg0 light-group 1))
        (v1-0 (-> arg0 light-group 2))
        )
    (set-vector! (-> a2-0 0 dir0 color) 0.0 0.0 0.0 1.0)
    (set-vector! (-> a2-0 0 ambi color) 0.22 0.219 0.35 1.0)
    (let ((a0-3 (-> a1-0 dir0)))
      (set! (-> a0-3 direction x) 0.0)
      (set! (-> a0-3 direction y) -1.0)
      (set! (-> a0-3 direction z) 0.0)
      (set! (-> a0-3 direction w) 1.0)
      )
    (set-vector! (-> a1-0 dir0 color) 1.0 0.8 0.4 1.0)
    (set! (-> a1-0 dir0 extra x) 1.0)
    (set-vector! (-> a1-0 ambi color) 0.22 0.219 0.35 1.0)
    (set! (-> a1-0 ambi extra x) 1.0)
    (let ((a0-8 (-> v1-0 dir0)))
      (set! (-> a0-8 direction x) 0.331)
      (set! (-> a0-8 direction y) 0.943)
      (set! (-> a0-8 direction z) 0.0)
      (set! (-> a0-8 direction w) 1.0)
      )
    (set-vector! (-> v1-0 dir0 color) 0.256 0.685 0.573 1.0)
    (set! (-> v1-0 dir0 extra x) 1.0)
    (let ((a0-11 (-> v1-0 dir1)))
      (set! (-> a0-11 direction x) -1.0)
      (set! (-> a0-11 direction y) 0.0)
      (set! (-> a0-11 direction z) 0.0)
      (set! (-> a0-11 direction w) 1.0)
      )
    (set-vector! (-> v1-0 dir1 color) 0.202 0.205 0.15 1.0)
    (set! (-> v1-0 dir1 extra x) 1.0)
    (set-vector! (-> v1-0 ambi color) 0.22 0.219 0.35 1.0)
    (set! (-> v1-0 ambi extra x) 1.0)
    )
  0
  (none)
  )

(defbehavior update-mood-hideout time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #t)
  (update-hideout-lights arg0)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (set! (-> arg0 times 0 w) 1.0)
      (cond
        ((movie?)
         (update-mood-flames arg0 1 2 0 0.333 0.0005859375 2.0)
         (update-mood-flames arg0 3 2 8 0.333 0.0005859375 3.0)
         )
        (else
          (update-mood-flames arg0 1 2 0 0.333 0.001953125 2.0)
          (update-mood-flames arg0 3 2 8 0.333 0.001953125 3.0)
          )
        )
      (let ((a0-10 (new 'stack-no-clear 'sphere))
            (a1-5 (-> *math-camera* trans))
            )
        (let ((v1-6 a0-10))
          (set! (-> v1-6 x) 4898816.0)
          (set! (-> v1-6 y) 32768.0)
          (set! (-> v1-6 z) 245760.0)
          (set! (-> v1-6 r) 1.0)
          )
        (let ((f0-5 (get-sphere-interp a0-10 a1-5 61440.0 69632.0)))
          (set-vector! (-> arg0 times 0) 1.0 1.0 1.0 1.0)
          (vector-lerp!
            (the-as vector (-> arg0 times))
            (the-as vector (-> arg0 times))
            (the-as vector (-> *level* level-default mood-context times))
            f0-5
            )
          )
        )
      )
    )
  0
  (none)
  )

(deftype hiphog-states (structure)
  ((door                 entity)
   (door-current-interp  float)
   (door-target-interp   float)
   )
  )


;; WARN: Return type mismatch entity vs none.
(defun init-mood-hiphog ((arg0 mood-context))
  (let ((gp-0 (-> arg0 state)))
    (set! (-> gp-0 0) (the-as uint (entity-by-name "hip-door-b-1")))
    )
  (none)
  )

(defun update-hiphog-lights ((arg0 mood-context))
  (let ((t1-0 (-> arg0 light-group))
        (t0-0 (-> arg0 light-group 1))
        (a3-0 (-> arg0 light-group 2))
        (a2-0 (-> arg0 light-group 3))
        (a1-0 (-> arg0 light-group 4))
        (v1-0 (-> arg0 light-group 5))
        )
    (set-vector! (-> t1-0 0 dir0 color) 0.0 0.0 0.0 1.0)
    (set-vector! (-> t1-0 0 ambi color) 0.11 0.109 0.175 1.0)
    (set-vector! (-> t0-0 dir0 color) 0.945 0.648 0.523 1.0)
    (let ((a0-4 (-> t0-0 dir0)))
      (set! (-> a0-4 direction x) 0.0)
      (set! (-> a0-4 direction y) 1.0)
      (set! (-> a0-4 direction z) 0.0)
      (set! (-> a0-4 direction w) 1.0)
      )
    (set! (-> t0-0 dir0 extra x) 1.0)
    (set-vector! (-> t0-0 ambi color) 0.197 0.124 0.062 1.0)
    (set! (-> t0-0 ambi extra x) 1.0)
    (set-vector! (-> a3-0 dir0 color) 0.945 0.648 0.523 1.0)
    (set-vector! (-> a3-0 dir1 color) 1.0 0.237 0.386 1.0)
    (set-vector! (-> a3-0 ambi color) 0.197 0.124 0.062 1.0)
    (let ((a0-11 (-> a3-0 dir0)))
      (set! (-> a0-11 direction x) 0.0)
      (set! (-> a0-11 direction y) 1.0)
      (set! (-> a0-11 direction z) 0.0)
      (set! (-> a0-11 direction w) 1.0)
      )
    (let ((a0-12 (-> a3-0 dir1)))
      (set! (-> a0-12 direction x) 0.0)
      (set! (-> a0-12 direction y) -1.0)
      (set! (-> a0-12 direction z) 0.0)
      (set! (-> a0-12 direction w) 1.0)
      )
    (set! (-> a3-0 dir0 extra x) 1.0)
    (set! (-> a3-0 dir1 extra x) 1.0)
    (set! (-> a3-0 ambi extra x) 1.0)
    (set-vector! (-> a2-0 dir0 color) 0.945 0.648 0.523 1.0)
    (set-vector! (-> a2-0 dir1 color) 0.02 0.97 0.0 1.0)
    (set-vector! (-> a2-0 dir2 color) 1.0 0.237 0.386 1.0)
    (set-vector! (-> a2-0 ambi color) 0.197 0.124 0.062 1.0)
    (let ((a0-20 (-> a2-0 dir0)))
      (set! (-> a0-20 direction x) 0.0)
      (set! (-> a0-20 direction y) 1.0)
      (set! (-> a0-20 direction z) 0.0)
      (set! (-> a0-20 direction w) 1.0)
      )
    (let ((a0-21 (-> a2-0 dir1)))
      (set! (-> a0-21 direction x) 0.0)
      (set! (-> a0-21 direction y) -1.0)
      (set! (-> a0-21 direction z) 0.0)
      (set! (-> a0-21 direction w) 1.0)
      )
    (let ((a0-22 (-> a2-0 dir2)))
      (set! (-> a0-22 direction x) 1.0)
      (set! (-> a0-22 direction y) 0.0)
      (set! (-> a0-22 direction z) 0.0)
      (set! (-> a0-22 direction w) 1.0)
      )
    (set! (-> a2-0 dir0 extra x) 1.0)
    (set! (-> a2-0 dir1 extra x) 1.0)
    (set! (-> a2-0 dir2 extra x) 1.0)
    (set! (-> a2-0 ambi extra x) 1.0)
    (set-vector! (-> a1-0 dir0 color) 0.945 0.648 0.523 1.0)
    (set-vector! (-> a1-0 dir1 color) 0.02 0.97 0.0 1.0)
    (set-vector! (-> a1-0 dir2 color) 1.0 0.237 0.386 1.0)
    (set-vector! (-> a1-0 ambi color) 0.197 0.124 0.062 1.0)
    (let ((a0-31 (-> a1-0 dir0)))
      (set! (-> a0-31 direction x) 0.0)
      (set! (-> a0-31 direction y) 1.0)
      (set! (-> a0-31 direction z) 0.0)
      (set! (-> a0-31 direction w) 1.0)
      )
    (let ((a0-32 (-> a1-0 dir1)))
      (set! (-> a0-32 direction x) 0.0)
      (set! (-> a0-32 direction y) -1.0)
      (set! (-> a0-32 direction z) 0.0)
      (set! (-> a0-32 direction w) 1.0)
      )
    (let ((a0-33 (-> a1-0 dir2)))
      (set! (-> a0-33 direction x) -1.0)
      (set! (-> a0-33 direction y) 0.0)
      (set! (-> a0-33 direction z) 0.0)
      (set! (-> a0-33 direction w) 1.0)
      )
    (set! (-> a1-0 dir0 extra x) 1.0)
    (set! (-> a1-0 dir1 extra x) 1.0)
    (set! (-> a1-0 dir2 extra x) 1.0)
    (set! (-> a1-0 ambi extra x) 1.0)
    (set-vector! (-> v1-0 dir0 color) 0.9992 0.6868 0.7258 1.0)
    (set-vector! (-> v1-0 dir1 color) 0.9992 0.6868 0.7258 1.0)
    (set-vector! (-> v1-0 dir2 color) 0.9 0.9 0.9 1.0)
    (set-vector! (-> v1-0 ambi color) 0.197 0.124 0.062 1.0)
    (let ((a0-42 (-> v1-0 dir0)))
      (set! (-> a0-42 direction x) 0.028)
      (set! (-> a0-42 direction y) 0.731)
      (set! (-> a0-42 direction z) -0.681)
      (set! (-> a0-42 direction w) 1.0)
      )
    (let ((a0-43 (-> v1-0 dir1)))
      (set! (-> a0-43 direction x) -0.472)
      (set! (-> a0-43 direction y) 0.719)
      (set! (-> a0-43 direction z) 0.519)
      (set! (-> a0-43 direction w) 1.0)
      )
    (let ((a0-44 (-> v1-0 dir2)))
      (set! (-> a0-44 direction x) 0.242)
      (set! (-> a0-44 direction y) 0.786)
      (set! (-> a0-44 direction z) 0.567)
      (set! (-> a0-44 direction w) 1.0)
      )
    (set! (-> v1-0 dir0 extra x) 1.0)
    (set! (-> v1-0 dir1 extra x) 0.75)
    (set! (-> v1-0 dir2 extra x) 0.0)
    (set! (-> v1-0 ambi extra x) 1.0)
    )
  0
  (none)
  )

(defbehavior update-mood-hiphog time-of-day-proc ((arg0 mood-context) (arg1 float))
  (update-mood-interior arg0 #t)
  (update-hiphog-lights arg0)
  (set! (-> arg0 light-group 0 dir0 extra x) 0.0)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (set! (-> arg0 times 1 w) 1.0)
      (set! (-> arg0 times 2 w) 1.0)
      (let ((s5-0 (the-as hiphog-states (-> arg0 state))))
        (if (not (-> s5-0 door))
            (set! (-> s5-0 door) (entity-by-name "hip-door-b-1"))
            )
        (if (and (-> s5-0 door) (logtest? (-> s5-0 door extra perm status) (entity-perm-status subtask-complete)))
            (set! (-> s5-0 door-target-interp) 1.0)
            (set! (-> s5-0 door-target-interp) 0.0)
            )
        (vector4-lerp!
          (the-as vector (-> arg0 times))
          (the-as vector (-> arg0 times))
          (the-as vector (-> *level* level-default mood-context times))
          (-> s5-0 door-current-interp)
          )
        (if (not (paused?))
            (seek! (-> s5-0 door-current-interp) (-> s5-0 door-target-interp) (seconds-per-frame))
            )
        )
      )
    )
  0
  (none)
  )

(deftype onintent-states (structure)
  ((flame0       flames-state  :inline)
   (flame1       flames-state  :inline)
   (flame2       flames-state  :inline)
   (green-flame  flames-state  :inline)
   (totem0       flames-state  :inline)
   (totem1       flames-state  :inline)
   )
  )


(defun update-onintent-lights ((arg0 mood-context))
  (let ((v1-0 (-> arg0 light-group)))
    (set-vector! (-> v1-0 0 dir0 color) 0.822 0.694 0.613 1.0)
    (set-vector! (-> v1-0 0 ambi color) 0.21 0.188 0.163 1.0)
    )
  0
  (none)
  )

(defbehavior update-mood-onintent time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #t)
  (update-onintent-lights arg0)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (set! (-> arg0 times 0 w) 1.0)
      (set! (-> arg0 times 1 w) 1.0)
      (update-mood-flames arg0 2 1 0 0.75 0.0009765625 2.0)
      (update-mood-flames arg0 3 1 8 0.75 0.0009765625 3.0)
      (update-mood-flames arg0 4 1 16 0.75 0.0009765625 4.0)
      (update-mood-flames arg0 5 1 24 0.75 0.0009765625 2.0)
      (update-mood-flames arg0 6 1 32 0.333 0.001953125 2.0)
      (update-mood-flames arg0 7 1 40 0.75 0.0009765625 2.0)
      )
    )
  0
  (none)
  )

(deftype oracle-states (structure)
  ((flame0        flames-state  :inline)
   (flame1        flames-state  :inline)
   (flame2        flames-state  :inline)
   (blue-flame    flames-state  :inline)
   (door-entity   entity)
   (door-current  float)
   (door-target   float)
   (purple-flag   symbol)
   (purple        float)
   (purple-noise  float)
   )
  )


(defun init-mood-oracle ((arg0 mood-context))
  (let ((v1-0 (-> arg0 state)))
    (set! (-> v1-0 8) (the-as uint #f))
    (set! (-> v1-0 9) (the-as uint 0.0))
    (set! (-> v1-0 10) (the-as uint 0.0))
    (set! (-> v1-0 11) (the-as uint #f))
    )
  #f
  )

(defbehavior update-mood-oracle time-of-day-proc ((arg0 mood-context))
  (copy-mood-exterior-ambi arg0 #f)
  (update-mood-interior arg0 #t)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (let ((s5-0 (the-as oracle-states (-> arg0 state))))
        (cond
          ((-> s5-0 door-entity)
           (if (logtest? (-> s5-0 door-entity extra perm status) (entity-perm-status subtask-complete))
               (set! (-> s5-0 door-target) 1.0)
               (set! (-> s5-0 door-target) 0.0)
               )
           )
          (else
            (set! (-> s5-0 door-entity) (entity-by-name "oracle-door-1"))
            )
          )
        (when (not (paused?))
          (seek! (-> s5-0 door-current) (-> s5-0 door-target) (* 4.0 (seconds-per-frame)))
          (cond
            ((-> s5-0 purple-flag)
             (set! (-> s5-0 purple) (fmin 1.9 (+ (-> s5-0 purple) (* 2.0 (seconds-per-frame)))))
             (set! (-> s5-0 purple-noise) (rand-vu-float-range 0.0 (-> s5-0 purple)))
             )
            (else
              (set! (-> s5-0 purple) (fmax 0.0 (- (-> s5-0 purple) (* 2.0 (seconds-per-frame)))))
              (set! (-> s5-0 purple-noise) 0.0)
              )
            )
          )
        (set! (-> arg0 times 0 w) (-> s5-0 door-current))
        (set! (-> arg0 times 1 w) 1.0)
        (update-mood-flames arg0 2 1 0 0.75 0.0009765625 2.0)
        (update-mood-flames arg0 3 1 8 0.75 0.0009765625 3.0)
        (update-mood-flames arg0 4 1 16 0.75 0.0009765625 4.0)
        (update-mood-flames arg0 5 1 24 0.75 0.0009765625 2.0)
        (set! (-> arg0 times 6 w) (+ (-> s5-0 purple) (-> s5-0 purple-noise)))
        )
      )
    )
  0
  (none)
  )

(defun set-oracle-purple-flag! ((arg0 symbol))
  (let ((v1-1 (level-get *level* 'oracle)))
    (when v1-1
      (set! (-> v1-1 mood-context state 11) (the-as uint arg0))
      arg0
      )
    )
  )

(deftype gungame-states (structure)
  ((florescent  florescent-state  :inline)
   )
  )


(defun update-gungame-lights ((arg0 mood-context))
  (let ((v1-0 (-> arg0 light-group)))
    (let ((a0-1 (-> v1-0 0)))
      (set! (-> a0-1 dir0 direction x) 0.0)
      (set! (-> a0-1 dir0 direction y) 0.955)
      (set! (-> a0-1 dir0 direction z) 0.3)
      (set! (-> a0-1 dir0 direction w) 1.0)
      )
    (set-vector! (-> v1-0 0 dir0 color) 1.0 1.0 0.7 1.0)
    (set-vector! (-> v1-0 0 ambi color) 0.65 0.589 0.406 1.0)
    )
  0
  (none)
  )

(defbehavior update-mood-gungame time-of-day-proc ((arg0 mood-context))
  (update-mood-interior arg0 #t)
  (update-gungame-lights arg0)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (set! (-> arg0 times 0 w) 1.0)
      (set! (-> arg0 times 1 w) 1.0)
      )
    )
  0
  (none)
  )

(deftype garage-states (structure)
  ()
  )


(defun init-mood-garage ((arg0 mood-context))
  (-> arg0 state)
  #f
  )

(defun update-garage-lights ((arg0 mood-context))
  (let ((a1-0 (-> *level* level-default mood-context))
        (a0-2 (-> arg0 current-fog))
        )
    (mem-copy! (the-as pointer a0-2) (the-as pointer a1-0) 48)
    )
  (let ((s4-0 (-> *level* level-default mood-context light-group))
        (a1-1 (-> arg0 light-group))
        (s5-0 (-> arg0 light-group 1))
        (gp-1 (-> arg0 light-group 2))
        )
    (mem-copy! (the-as pointer s5-0) (the-as pointer a1-1) 192)
    (set! (-> s5-0 dir0 extra x) 0.5)
    (set! (-> s5-0 ambi extra x) 0.0)
    (mem-copy! (the-as pointer gp-1) (the-as pointer s4-0) 192)
    (set! (-> gp-1 dir0 extra x) 0.0)
    (set! (-> gp-1 dir1 extra x) 0.0)
    (set! (-> gp-1 dir2 extra x) 0.0)
    )
  0
  (none)
  )

(defbehavior update-mood-garage time-of-day-proc ((arg0 mood-context) (arg1 object) (arg2 int))
  (copy-mood-exterior-ambi arg0 #f)
  (update-mood-interior arg0 #t)
  (update-garage-lights arg0)
  (when (and (= (-> *level* level arg2 status) 'active)
             (< (the-as uint (-> *time-of-day-context* mode)) (the-as uint 9))
             )
    (-> arg0 state)
    (set! (-> arg0 times 6 w) 0.75)
    (set! (-> arg0 times 1 w) 1.0)
    (set! (-> arg0 times 7 w) 1.0)
    )
  0
  (none)
  )

(deftype freehq-states (structure)
  ((flicker  float)
   )
  )


(defbehavior update-mood-freehq time-of-day-proc ((arg0 mood-context) (arg1 object) (arg2 int))
  (update-mood-interior-ambient arg0 #f 0.5)
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (let ((gp-0 (the-as object (-> arg0 state))))
        (set! (-> arg0 times 1 w) 1.0)
        (set! (-> arg0 times 2 w) 1.0)
        (set! (-> arg0 times 3 w) (if (< 36408.89 (-> (the-as freehq-states gp-0) flicker))
                                      0.95
                                      1.0
                                      )
              )
        (set! (-> arg0 times 4 w) 1.0)
        (set! (-> arg0 times 5 w) 1.0)
        (set! (-> arg0 times 6 w) 1.0)
        (set! (-> arg0 times 7 w) 1.0)
        (when (not (paused?))
          (let ((f0-9 (+ (-> (the-as freehq-states gp-0) flicker) (* 196608.0 (seconds-per-frame)))))
            (set! (-> (the-as freehq-states gp-0) flicker) (- f0-9 (* (the float (the int (/ f0-9 65536.0))) 65536.0)))
            )
          )
        )
      )
    )
  0
  (none)
  )
