;;-*-Lisp-*-
(in-package goal)

;; name: rigid-body-h.gc
;; name in dgo: rigid-body-h
;; dgos: GAME


;; +++rigid-body-h:rigid-body-flag
(defenum rigid-body-flag
  :bitfield #t
  :type uint32
  (display-marks 0)
  (enable-physics 1)
  (enable-collision 2)
  (active 3)
  (debug 4)
  (blocker 5)
  )
;; ---rigid-body-h:rigid-body-flag

;; +++rigid-body-h:rigid-body-object-flag
(defenum rigid-body-object-flag
  :bitfield #t
  :type uint64
  (enable-collision 0)
  (disturbed 1)
  (damaged 2)
  (dead 3)
  (player-touching 4)
  (player-edge-grabbing 5)
  (player-standing-on 6)
  (player-impulse-force 7)
  (player-contact-force 8)
  (persistent 9)
  (in-air 10)
  (on-ground 11)
  (on-flight-level 12)
  (riding 13)
  (player-driving 14)
  (waiting-for-player 15)
  (ignition 16)
  (turbo-boost 17)
  (reverse-gear 18)
  (slide 19)
  (hard-turn 20)
  (jump 21)
  (jump-sound 22)
  (ai-driving 23)
  (traffic-managed 24)
  (flight-level-transition 25)
  (flight-level-transition-ending 26)
  (camera-bike-mode 27)
  (camera-rapid-track-mode 28)
  (camera 29)
  (alert 30)
  (in-pursuit 31)
  (target-in-sight 32)
  (rammed-target 33)
  (draw-marks 34)
  (hack-edit-graph-mode 35)
  (measure-control-parameters 36)
  (lights-on 37)
  (lights-update 38)
  (lights-dead 39)
  (no-hijack 40)
  (player-grabbed 41)
  (nav-spheres 42)
  (idle-sound 43)
  )
;; ---rigid-body-h:rigid-body-object-flag

(declare-type rigid-body-object basic)
(declare-type rigid-body-queue-manager process)
(define-extern *rigid-body-queue-manager* rigid-body-queue-manager)

;; DECOMP BEGINS

(deftype rigid-body-info (structure)
  ((mass                 float)
   (inv-mass             float)
   (linear-damping       float)
   (angular-damping      float)
   (bounce-factor        float)
   (friction-factor      float)
   (bounce-mult-factor   float)
   (cm-offset-joint      vector  :inline)
   (inv-inertial-tensor  matrix  :inline)
   (inertial-tensor      matrix  :inline)
   (inertial-tensor-box  meters  3)
   )
  (:methods
    (rigid-body-info-method-9 (_type_) none)
    )
  )


(deftype rigid-body-object-extra-info (structure)
  ((max-time-step       float)
   (gravity             meters)
   (idle-distance       meters)
   (attack-force-scale  float)
   )
  :pack-me
  )


(deftype rigid-body-object-constants (structure)
  ((info                rigid-body-info               :inline)
   (mass                float                         :overlay-at (-> info mass))
   (inv-mass            float                         :overlay-at (-> info inv-mass))
   (cm-joint-x          meters                        :overlay-at (-> info cm-offset-joint data 0))
   (cm-joint-y          meters                        :overlay-at (-> info cm-offset-joint data 1))
   (cm-joint-z          meters                        :overlay-at (-> info cm-offset-joint data 2))
   (linear-damping      float                         :overlay-at (-> info linear-damping))
   (angular-damping     float                         :overlay-at (-> info angular-damping))
   (bounce-factor       float                         :overlay-at (-> info bounce-factor))
   (friction-factor     float                         :overlay-at (-> info friction-factor))
   (inertial-tensor-x   meters                        :overlay-at (-> info inertial-tensor-box 0))
   (inertial-tensor-y   meters                        :overlay-at (-> info inertial-tensor-box 1))
   (inertial-tensor-z   meters                        :overlay-at (-> info inertial-tensor-box 2))
   (extra               rigid-body-object-extra-info  :inline)
   (max-time-step       float                         :overlay-at (-> extra max-time-step))
   (gravity             meters                        :overlay-at (-> extra gravity))
   (idle-distance       meters                        :overlay-at (-> extra idle-distance))
   (attack-force-scale  float                         :overlay-at (-> extra attack-force-scale))
   (name                symbol)
   )
  )


(deftype rigid-body-impact (structure)
  ((point     vector  :inline)
   (normal    vector  :inline)
   (velocity  vector  :inline)
   (impulse   float)
   (pat       pat-surface)
   (process   process)
   (prim-id   uint32)
   )
  )


(deftype rigid-body-control (basic)
  ((flags            rigid-body-flag)
   (info             rigid-body-info)
   (force-callback   (function rigid-body-object float none))
   (process          process)
   (blocked-by       process-focusable)
   (time-remaining   float)
   (step-count       int16)
   (linear-damping   float)
   (angular-damping  float)
   (bounce-factor    float)
   (friction-factor  float)
   (position         vector      :inline)
   (rot              vector      :inline)
   (rotation         quaternion  :inline :overlay-at (-> rot data 0))
   (lin-momentum     vector      :inline)
   (ang-momentum     vector      :inline)
   (force            vector      :inline)
   (torque           vector      :inline)
   (lin-velocity     vector      :inline)
   (ang-velocity     vector      :inline)
   (matrix           matrix      :inline)
   (inv-i-world      matrix      :inline)
   )
  (:methods
    (new (symbol type process) _type_)
    (rigid-body-control-method-9 (_type_ collide-shape-moving float) none)
    (rigid-body-control-method-10 (_type_ rigid-body-object float float) object)
    (update-rbody-transform! (_type_ collide-shape-moving) none)
    (rigid-body-control-method-12 (_type_ float) none)
    (init-velocities! (_type_) none)
    (rigid-body-control-method-14 (_type_ float) none)
    (rigid-body-control-method-15 (_type_) none)
    (reset-force-and-torque! (_type_) none)
    (reset-momentum! (_type_) none)
    (apply-impact! (_type_ vector vector) none)
    (rigid-body-control-method-19 (_type_ vector vector) none)
    (add-force! (_type_ vector) none)
    (rigid-body-control-method-21 (_type_ vector vector float) none)
    (rigid-body-control-method-22 (_type_ vector vector) none)
    (rigid-body-control-method-23 (_type_ vector vector) none)
    (rigid-body-control-method-24 (_type_ vector vector) none)
    (rigid-body-control-method-25 (_type_ vector) vector)
    (rigid-body-control-method-26 (_type_) none)
    (init! (_type_ rigid-body-info vector quaternion (function rigid-body-object float)) none)
    (rigid-body-control-method-28 (_type_ vector quaternion) none)
    (debug-print-info (_type_ object) none)
    (debug-print-force-torque (_type_ object) none)
    (debug-print-pos-rot (_type_ object) none)
    (debug-print-momentum (_type_ object) none)
    (debug-print-velocity (_type_ object) none)
    )
  )


(deftype rigid-body-object (process-focusable)
  ((root                   collide-shape-moving :override)
   (info                   rigid-body-object-constants)
   (flags                  rigid-body-object-flag)
   (max-time-step          float)
   (incoming-attack-id     uint32)
   (player-touch-time      time-frame)
   (disturbed-time         time-frame)
   (player-force-position  vector                :inline)
   (player-force           vector                :inline)
   )
  (:state-methods
    idle
    active
    )
  (:methods
    (rigid-body-object-method-30 (_type_) object)
    (apply-gravity! (_type_ float) none)
    (rigid-body-object-method-32 (_type_) none)
    (alloc-rbody-control! (_type_ rigid-body-object-constants) none)
    (init-collision! (_type_) none)
    (init-rbody-control! (_type_) none)
    (go-idle (_type_) object)
    (rigid-body-object-method-37 (_type_) none)
    (rigid-body-object-method-38 (_type_) none)
    (rbody-post (_type_) none)
    (apply-momentum! (_type_) none)
    (disable-physics! (_type_) none)
    (rigid-body-object-method-42 (_type_) none)
    (rigid-body-object-method-43 (_type_) none)
    (impulse-handler (_type_) none)
    (go-active (_type_) object)
    (apply-damage (_type_ float rigid-body-impact) none)
    (impulse-force<-penetrate (_type_ rigid-body-impact attack-info penetrate) none)
    (on-impact (_type_ rigid-body-impact) none)
    (rbody-event-handler (_type_ process int symbol event-message-block) object)
    (attack-handler (_type_ process-drawable attack-info touching-shapes-entry penetrate) symbol)
    (touch-handler (_type_ process-focusable touching-shapes-entry) symbol)
    (init-rbody-impact-from-tshape! (_type_ rigid-body-impact touching-shapes-entry) none)
    (rigid-body-object-method-53 (_type_ float) none)
    (rigid-body-object-method-54 (_type_) none)
    (clear-impulse-force-flag! (_type_) none)
    )
  )


(deftype rigid-body-queue (structure)
  ((count    int8)
   (manager  handle)
   (array    handle  128)
   )
  (:methods
    (init-queue! (_type_ process) none)
    (rigid-body-queue-method-10 (_type_) none)
    (rigid-body-queue-method-11 (_type_ process) none)
    (rigid-body-queue-method-12 (_type_ int int) none)
    (rigid-body-queue-method-13 (_type_ int process) none)
    (rigid-body-queue-method-14 (_type_ int) none)
    (rigid-body-queue-method-15 (_type_ process) none)
    (rigid-body-queue-method-16 (_type_) none)
    )
  )
