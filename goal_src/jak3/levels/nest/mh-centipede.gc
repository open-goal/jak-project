;;-*-Lisp-*-
(in-package goal)

;; name: mh-centipede.gc
;; name in dgo: mh-centipede
;; dgos: LNSTOBB

;; +++nest-hunt-speech-instance-flag
(defenum nest-hunt-speech-instance-flag
  :type uint64
  :bitfield #t
  (nhs0 0)
  (nhs1 1)
  (nhs2 2)
  (nhs3 3)
  (nhs4 4)
  (nhs5 5)
  (nhs6 6)
  (nhs7 7)
  )
;; ---nest-hunt-speech-instance-flag


;; +++nest-hunt-speech-info-flag
(defenum nest-hunt-speech-info-flag
  :type uint8
  :bitfield #t
  (nhs0 0)
  (nhs1 1)
  (nhs2 2)
  )
;; ---nest-hunt-speech-info-flag


;; +++mh-centipede-flag
(defenum mh-centipede-flag
  :type uint32
  :bitfield #t
  (mc0 0)
  (mc1 1)
  (mc2 2)
  (mc3 3)
  (mc4 4)
  (mc5 5)
  (mc6 6)
  (mc7 7)
  (mc8 8)
  (mc9 9)
  )
;; ---mh-centipede-flag


;; DECOMP BEGINS

(define *mh-centipede-sphere-1* (new 'static 'sphere :x -3276800.0 :z 2048000.0 :r 8192000.0))

(define *mh-centipede-sphere-2* (new 'static 'sphere :x 6144000.0 :z 2048000.0 :r 1310720.0))

(defun nest-hunt-find-sphere ((arg0 vector))
  (cond
    ((< (vector-vector-distance *mh-centipede-sphere-1* arg0) (-> *mh-centipede-sphere-1* r))
     *mh-centipede-sphere-1*
     )
    ((< (vector-vector-distance *mh-centipede-sphere-2* arg0) (-> *mh-centipede-sphere-2* r))
     *mh-centipede-sphere-2*
     )
    (else
      (the-as sphere #f)
      )
    )
  )

(defun nest-hunt-same-sphere ((arg0 sphere) (arg1 vector))
  (and arg0 (= arg0 (nest-hunt-find-sphere arg1)))
  )

(defun nest-hunt-volume ((arg0 sphere))
  (if (nest-hunt-same-sphere arg0 (target-pos 0))
      1.0
      0.1
      )
  )

(defun nest-hunt-shake-amp ((arg0 vector))
  (if (nest-hunt-same-sphere (the-as sphere arg0) (target-pos 0))
      1.0
      0.01
      )
  )

(define *nest-hunt-speech-list* (new 'static 'inline-array talker-speech-class 36
                                  (new 'static 'talker-speech-class :name "none")
                                  (new 'static 'talker-speech-class
                                    :name "sig224"
                                    :channel (gui-channel sig)
                                    :speech #x1
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig225"
                                    :channel (gui-channel sig)
                                    :speech #x2
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig226"
                                    :channel (gui-channel sig)
                                    :speech #x3
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig227"
                                    :channel (gui-channel sig)
                                    :speech #x4
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig228"
                                    :channel (gui-channel sig)
                                    :speech #x5
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig229"
                                    :channel (gui-channel sig)
                                    :speech #x6
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig230"
                                    :channel (gui-channel sig)
                                    :speech #x7
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig231"
                                    :channel (gui-channel sig)
                                    :speech #x8
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig232"
                                    :channel (gui-channel sig)
                                    :speech #x9
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig233"
                                    :channel (gui-channel sig)
                                    :speech #xa
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig234"
                                    :channel (gui-channel sig)
                                    :speech #xb
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig235"
                                    :channel (gui-channel sig)
                                    :speech #xc
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig236"
                                    :channel (gui-channel sig)
                                    :speech #xd
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig237"
                                    :channel (gui-channel sig)
                                    :speech #xe
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig238"
                                    :channel (gui-channel sig)
                                    :speech #xf
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig239"
                                    :channel (gui-channel sig)
                                    :speech #x10
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig240"
                                    :channel (gui-channel sig)
                                    :speech #x11
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig241"
                                    :channel (gui-channel sig)
                                    :speech #x12
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig242"
                                    :channel (gui-channel sig)
                                    :speech #x13
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig243"
                                    :channel (gui-channel sig)
                                    :speech #x14
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig244"
                                    :channel (gui-channel sig)
                                    :speech #x15
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig245"
                                    :channel (gui-channel sig)
                                    :speech #x16
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig246"
                                    :channel (gui-channel sig)
                                    :speech #x17
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig247"
                                    :channel (gui-channel sig)
                                    :speech #x18
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig248"
                                    :channel (gui-channel sig)
                                    :speech #x19
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig249"
                                    :channel (gui-channel sig)
                                    :speech #x1a
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig250"
                                    :channel (gui-channel sig)
                                    :speech #x1b
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig251"
                                    :channel (gui-channel sig)
                                    :speech #x1c
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig252"
                                    :channel (gui-channel sig)
                                    :speech #x1d
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig253"
                                    :channel (gui-channel sig)
                                    :speech #x1e
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig254"
                                    :channel (gui-channel sig)
                                    :speech #x1f
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig255"
                                    :channel (gui-channel sig)
                                    :speech #x20
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig256"
                                    :channel (gui-channel sig)
                                    :speech #x21
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig257"
                                    :channel (gui-channel sig)
                                    :speech #x22
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  (new 'static 'talker-speech-class
                                    :name "sig258"
                                    :channel (gui-channel sig)
                                    :speech #x23
                                    :neg #x1
                                    :on-close #f
                                    :camera #f
                                    )
                                  )
        )

(deftype nest-hunt-speech-instance (structure)
  ((speech       uint16)
   (probability  float)
   (flags        nest-hunt-speech-instance-flag)
   (play-count   uint32)
   )
  )


(deftype nest-hunt-speech-info (structure)
  ((speeches          (array nest-hunt-speech-instance))
   (play-time         time-frame)
   (current-random    time-frame)
   (minimum-interval  time-frame)
   (random-interval   time-frame)
   (last-played       int8)
   (flags             nest-hunt-speech-info-flag)
   )
  )


(deftype nest-hunt-speech-group (structure)
  ((play-time          time-frame)
   (game-counter-last  float)
   (info               (array nest-hunt-speech-info))
   )
  )


(define *nest-hunt-speech* (new 'static 'nest-hunt-speech-group
                             :info (new 'static 'boxed-array :type nest-hunt-speech-info
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance :speech #x1 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x2 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x3 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x4 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x6 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x11 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x12 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x1b :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x5 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x1d :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x1c :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x19 :probability 1.0)
                                   )
                                 :minimum-interval (seconds 10)
                                 :random-interval (seconds 3)
                                 :flags (nest-hunt-speech-info-flag nhs0 nhs1)
                                 )
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance
                                     :speech #xd
                                     :probability 1.0
                                     :flags (nest-hunt-speech-instance-flag nhs4)
                                     )
                                   (new 'static 'nest-hunt-speech-instance :speech #x7 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x1e :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x8 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance
                                     :speech #x21
                                     :probability 1.0
                                     :flags (nest-hunt-speech-instance-flag nhs3)
                                     )
                                   (new 'static 'nest-hunt-speech-instance
                                     :speech #x1a
                                     :probability 1.0
                                     :flags (nest-hunt-speech-instance-flag nhs3)
                                     )
                                   )
                                 :minimum-interval (seconds 20)
                                 :random-interval (seconds 3)
                                 :flags (nest-hunt-speech-info-flag nhs0)
                                 )
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance :speech #x9 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #xb :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x22 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x23 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x20 :probability 1.0)
                                   )
                                 :minimum-interval (seconds 15)
                                 :random-interval (seconds 2)
                                 :flags (nest-hunt-speech-info-flag nhs0)
                                 )
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance :speech #xa :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #xf :probability 1.0)
                                   )
                                 :minimum-interval (seconds 10)
                                 :random-interval (seconds 2)
                                 :flags (nest-hunt-speech-info-flag nhs0)
                                 )
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance :speech #xc :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #xe :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance
                                     :speech #x10
                                     :probability 1.0
                                     :flags (nest-hunt-speech-instance-flag nhs4)
                                     )
                                   (new 'static 'nest-hunt-speech-instance
                                     :speech #x13
                                     :probability 1.0
                                     :flags (nest-hunt-speech-instance-flag nhs4)
                                     )
                                   )
                                 )
                               (new 'static 'nest-hunt-speech-info
                                 :speeches (new 'static 'boxed-array :type nest-hunt-speech-instance
                                   (new 'static 'nest-hunt-speech-instance :speech #x14 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x15 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x16 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x17 :probability 1.0)
                                   (new 'static 'nest-hunt-speech-instance :speech #x18 :probability 1.0)
                                   )
                                 :minimum-interval (seconds 15)
                                 :random-interval (seconds 5)
                                 :flags (nest-hunt-speech-info-flag nhs0)
                                 )
                               )
                             )
        )

(defun reset-nest-hunt-speeches ((arg0 float))
  (set! (-> *nest-hunt-speech* game-counter-last) arg0)
  (set! (-> *nest-hunt-speech* play-time) 0)
  (dotimes (v1-2 (-> *nest-hunt-speech* info length))
    (let ((a0-3 (-> *nest-hunt-speech* info v1-2)))
      (dotimes (a1-2 (-> a0-3 speeches length))
        (set! (-> a0-3 speeches a1-2 play-count) (the-as uint 0))
        )
      (set! (-> a0-3 play-time) 0)
      (set! (-> a0-3 current-random) 0)
      (set! (-> a0-3 last-played) -1)
      )
    )
  #f
  )

;; WARN: Function nest-hunt-play-speech has a return type of none, but the expression builder found a return statement.
(defun nest-hunt-play-speech ((arg0 int) (arg1 sphere))
  (let ((gp-0 (-> *nest-hunt-speech* info arg0)))
    (if (zero? (-> gp-0 speeches length))
        (return 0)
        )
    (if (and (logtest? (-> gp-0 flags) (nest-hunt-speech-info-flag nhs1))
             (or (not arg1) (>= (vector-vector-distance arg1 (target-pos 0)) (-> arg1 r)))
             )
        (return 0)
        )
    (if (logtest? (-> gp-0 flags) (nest-hunt-speech-info-flag nhs0))
        (set! (-> gp-0 play-time) (-> *nest-hunt-speech* play-time))
        )
    (if (not (time-elapsed? (-> gp-0 play-time) (+ (-> gp-0 minimum-interval) (-> gp-0 current-random))))
        (return 0)
        )
    (let ((f30-0 0.0)
          (s5-1 (-> gp-0 speeches 0 play-count))
          )
      (dotimes (v1-23 (-> gp-0 speeches length))
        (let ((a0-10 (-> gp-0 speeches v1-23)))
          (cond
            ((or (< s5-1 (-> a0-10 play-count))
                 (and (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs1)) (nonzero? (-> gp-0 play-time)))
                 (and (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs2)) (zero? (-> gp-0 play-time)))
                 (and (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs0)) (> (-> a0-10 play-count) 0))
                 (and (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs3))
                      (!= (-> *game-info* counter) (-> *nest-hunt-speech* game-counter-last))
                      )
                 (or (and (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs4)) (< 4.0 (-> *game-info* counter)))
                     (and (not (logtest? (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs5))) (= (-> gp-0 last-played) v1-23))
                     )
                 )
             (logclear! (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs6))
             )
            ((= (-> a0-10 play-count) s5-1)
             (+! f30-0 (-> a0-10 probability))
             (logior! (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs6))
             )
            (else
              (set! s5-1 (-> a0-10 play-count))
              (set! f30-0 (-> a0-10 probability))
              (logior! (-> a0-10 flags) (nest-hunt-speech-instance-flag nhs6))
              )
            )
          )
        )
      (let ((f0-5 (* f30-0 (rand-vu))))
        (dotimes (s4-1 (-> gp-0 speeches length))
          (let ((s3-1 (-> gp-0 speeches s4-1)))
            (cond
              ((or (not (logtest? (-> s3-1 flags) (nest-hunt-speech-instance-flag nhs6))) (< s5-1 (-> s3-1 play-count)))
               )
              ((or (>= (-> s3-1 probability) f0-5)
                   (logtest? (-> s3-1 flags) (nest-hunt-speech-instance-flag nhs1))
                   (and (logtest? (-> s3-1 flags) (nest-hunt-speech-instance-flag nhs3)) (zero? (-> s3-1 play-count)))
                   )
               (when (nonzero? (talker-spawn-func
                                 (-> *nest-hunt-speech-list* (-> s3-1 speech))
                                 *entity-pool*
                                 (target-pos 0)
                                 (the-as region #f)
                                 )
                               )
                 (set! (-> s3-1 play-count) (+ s5-1 1))
                 (set-time! (-> *nest-hunt-speech* play-time))
                 (set-time! (-> gp-0 play-time))
                 (set! (-> gp-0 current-random)
                       (the-as time-frame (the int (* (rand-vu) (the float (-> gp-0 random-interval)))))
                       )
                 (set! (-> gp-0 last-played) s4-1)
                 )
               (return 0)
               )
              (else
                (set! f0-5 (- f0-5 (-> gp-0 speeches s4-1 probability)))
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(define *mh-centipede-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :center (new 'static 'vector :w (the-as float #xa))
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 163840.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w -163840.0)
                                           )
                               )
  )

(defskelgroup skel-mh-centipede-eco-crystal-light eco-crystal-light eco-crystal-light-lod0-jg eco-crystal-light-idle-ja
              ((eco-crystal-light-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 0.5)
              :origin-joint-index 3
              )

(deftype rod-spawner (process-drawable)
  ((rod      handle)
   (minimap  connection-minimap)
   )
  (:state-methods
    idle
    wait-for-children
    hidden
    )
  )


(defstate wait-for-children (rod-spawner)
  :virtual #t
  :trans (behavior ()
    (if (not (-> self child))
        (deactivate self)
        )
    )
  :code sleep-code
  )

(defstate idle (rod-spawner)
  :virtual #t
  :enter (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (set-time! (-> self state-time))
      (set-vector! (-> self root scale) 3.0 3.0 3.0 1.0)
      (logclear! (-> self mask) (process-mask actor-pause))
      (let ((v1-8 (-> self entity extra perm)))
        (logior! (-> v1-8 status) (entity-perm-status bit-5))
        (set! (-> self root trans x) (* 4096.0 (the float (-> v1-8 user-int16 0))))
        (set! (-> self root trans z) (* 4096.0 (the float (-> v1-8 user-int16 1))))
        )
      (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 12) (the-as int #f) (the-as vector #t) 0))
      (let ((gp-0 (new 'stack-no-clear 'collide-query)))
        (set-vector! (-> gp-0 move-dist) 0.0 -204800.0 0.0 1.0)
        (set! (-> gp-0 start-pos quad) (-> self root trans quad))
        (+! (-> gp-0 start-pos y) 102400.0)
        (let ((v1-17 gp-0))
          (set! (-> v1-17 radius) 409.6)
          (set! (-> v1-17 collide-with) (collide-spec backgnd))
          (set! (-> v1-17 ignore-process0) #f)
          (set! (-> v1-17 ignore-process1) #f)
          (set! (-> v1-17 ignore-pat)
                (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                )
          (set! (-> v1-17 action-mask) (collide-action solid))
          )
        (let ((f0-15 (fill-and-probe-using-line-sphere *collide-cache* gp-0)))
          (cond
            ((>= f0-15 0.0)
             (let ((a0-22 (-> self root trans)))
               (let ((v1-21 (-> gp-0 start-pos)))
                 (let ((a1-2 (-> gp-0 move-dist)))
                   (let ((a2-1 f0-15))
                     (.mov vf7 a2-1)
                     )
                   (.lvf vf5 (&-> a1-2 quad))
                   )
                 (.lvf vf4 (&-> v1-21 quad))
                 )
               (.add.x.vf vf6 vf0 vf0 :mask #b1000)
               (.mul.x.vf acc vf5 vf7 :mask #b111)
               (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
               (.svf (&-> a0-22 quad) vf6)
               )
             (+! (-> self root trans y) 4096.0)
             )
            (else
              (format 0 "~A failed to find ground~%" (-> self name))
              )
            )
          )
        )
      (let ((gp-1 (new 'stack-no-clear 'task-arrow-params)))
        (set! (-> gp-1 pos quad) (-> self root trans quad))
        (quaternion-identity! (-> gp-1 quat))
        (set! (-> gp-1 flags) (task-arrow-flags taf3 taf5))
        (set! (-> gp-1 map-icon) (the-as uint 12))
        (set! (-> self rod) (process->handle (task-arrow-spawn gp-1 self)))
        )
      )
    )
  :exit (behavior ()
    (send-event (handle->process (-> self rod)) 'die)
    (kill-callback (-> *minimap* engine) (-> self minimap))
    (set! (-> self minimap) #f)
    )
  :trans (behavior ()
    (let ((f0-0 (vector-vector-xz-distance-squared (target-pos 0) (-> self root trans)))
          (f1-0 28672.0)
          )
      (when (< f0-0 (* f1-0 f1-0))
        (let* ((v1-6 (-> *game-info* sub-task-list (game-task-node nest-hunt-get-crystal)))
               (a0-4 (handle->process (if (-> v1-6 manager)
                                          (-> v1-6 manager manager)
                                          (the-as handle #f)
                                          )
                                      )
                     )
               )
          (when a0-4
            (when (send-event a0-4 'complete)
              (talker-spawn-func (-> *talker-speech* 133) *entity-pool* (target-pos 0) (the-as region #f))
              (cleanup-for-death self)
              (go-virtual wait-for-children)
              )
            )
          )
        )
      )
    (let* ((f0-2 (* 24.272593 (the float (- (current-time) (-> self state-time)))))
           (f30-0 (- f0-2 (* (the float (the int (/ f0-2 65536.0))) 65536.0)))
           )
      (quaternion-set! (-> self root quat) 0.0 (sin f30-0) 0.0 (cos f30-0))
      )
    )
  :code sleep-code
  :post ja-post
  )

(defstate hidden (rod-spawner)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('appear)
       (let ((a1-1 (the-as object (-> block param 0)))
             (a0-3 (the-as object (-> block param 1)))
             (v1-3 (-> self entity extra perm))
             )
         (logior! (-> v1-3 status) (entity-perm-status bit-5))
         (set! (-> v1-3 user-int16 0) (the int (* 0.00024414062 (-> (the-as vector a1-1) x))))
         (set! (-> v1-3 user-int16 1) (the int (* 0.00024414062 (-> (the-as vector a1-1) z))))
         (set! (-> v1-3 user-int16 2) (the int (* 0.00024414062 (-> (the-as vector a0-3) x))))
         (set! (-> v1-3 user-int16 3) (the int (* 0.00024414062 (-> (the-as vector a0-3) z))))
         )
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual idle)
       )
      (('apply-pos-from-entity)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual idle)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (ja-post)
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw-bounds))
    )
  :trans (behavior ()
    '()
    )
  :code sleep-code
  )

(defmethod init-from-entity! ((this rod-spawner) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mh-centipede-eco-crystal-light" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! (-> this rod) (the-as handle #f))
  (set! (-> this event-hook) (-> (method-of-object this hidden) event))
  (set! (-> this minimap) #f)
  (cond
    ((task-node-closed? (game-task-node nest-hunt-fight))
     (logclear! (-> this mask) (process-mask actor-pause))
     (go (method-of-object this idle))
     )
    (else
      (go (method-of-object this hidden))
      )
    )
  )

(deftype mh-centipede-shot (projectile)
  ((trail-part  sparticle-launch-control)
   )
  )


(defmethod relocate ((this mh-centipede-shot) (offset int))
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (call-parent-method this offset)
  )

(defmethod projectile-method-25 ((this mh-centipede-shot))
  (if (nonzero? (-> this trail-part))
      (push-back (-> this trail-part) (-> this root trans))
      )
  0
  (none)
  )

(defmethod setup-collision! ((this mh-centipede-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-projectile)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-6 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-6 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> v1-6 prim-core action) (collide-action solid))
      (set-vector! (-> v1-6 local-sphere) 0.0 0.0 0.0 3072.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this mh-centipede-shot))
  (with-pp
    (set! (-> this attack-mode) 'eco-dark)
    pp
    (set! (-> this trail-part)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 2520) 10.0)
            )
          )
    (set! (-> this sound-id) (new-sound-id))
    ((method-of-type projectile init-proj-settings!) this)
    0
    (none)
    )
  )

(defstate moving (mh-centipede-shot)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type projectile moving) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (logtest? (collide-status
                    on-surface
                    on-ground
                    touch-surface
                    touch-wall
                    touch-ceiling
                    touch-actor
                    on-special-surface
                    touch-edge
                    no-touch
                    blocked
                    on-water
                    impact-surface
                    touch-background
                    stuck
                    touch-ceiling-sticky
                    glance
                    probe-hit
                    )
                  (-> self root status)
                  )
        (go-impact! self)
        )
    )
  )

(defstate impact (mh-centipede-shot)
  :virtual #t
  :enter (behavior ()
    (sound-play-by-name
      (static-sound-name "cent-fire-bomb")
      (new-sound-id)
      (the int (* 1024.0 (nest-hunt-volume (nest-hunt-find-sphere (-> self root trans)))))
      0
      0
      (sound-group)
      (-> self root trans)
      )
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (collide-spec))
      (set! (-> v1-6 prim-core collide-with) (collide-spec))
      )
    0
    (let ((gp-1 (new 'stack-no-clear 'explosion-init-params)))
      (set! (-> gp-1 spawn-point quad) (-> self root trans quad))
      (quaternion-identity! (-> gp-1 spawn-quat))
      (set! (-> gp-1 radius) 8192.0)
      (set! (-> gp-1 scale) 1.0)
      (set! (-> gp-1 group) (-> *part-group-id-table* 650))
      (set! (-> gp-1 collide-with)
            (collide-spec backgnd jak crate enemy obstacle vehicle-sphere hit-by-others-list player-list pusher shield)
            )
      (set! (-> gp-1 damage) 1.0)
      (set! (-> gp-1 damage-scale) 1.0)
      (set! (-> gp-1 vehicle-damage-factor) 0.333)
      (set! (-> gp-1 vehicle-impulse-factor) 1.0)
      (set! (-> gp-1 ignore-proc) (process->handle #f))
      (explosion-spawn gp-1 (ppointer->process (-> self parent)))
      )
    (send-event (ppointer->process (-> self parent)) 'shot-hit (-> self root trans))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (when (and (time-elapsed? (-> self state-time) (seconds 10)) (not (-> self child)))
      (deactivate self)
      (go empty-state)
      )
    )
  :code sleep-code
  )

(deftype mh-centipede-crater-pt (structure)
  ((collision-pt  vector  :inline)
   (normal        vector  :inline)
   (found?        symbol)
   (angle         float)
   )
  )


(deftype mh-centipede-crater-pt-array (structure)
  ((points         mh-centipede-crater-pt  20 :inline)
   (origin         vector                  :inline)
   (radius         float)
   (current-point  int32)
   )
  (:methods
    (init! (_type_ vector float) none)
    (mh-centipede-crater-pt-array-method-10 (_type_) none)
    (mh-centipede-crater-pt-array-method-11 (_type_ process) none)
    )
  )


(defmethod init! ((this mh-centipede-crater-pt-array) (arg0 vector) (arg1 float))
  (set! (-> this origin quad) (-> arg0 quad))
  (set! (-> this radius) arg1)
  (set! (-> this current-point) 0)
  0
  (none)
  )

;; WARN: Function (method 10 mh-centipede-crater-pt-array) has a return type of none, but the expression builder found a return statement.
(defmethod mh-centipede-crater-pt-array-method-10 ((this mh-centipede-crater-pt-array))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (if (>= (-> this current-point) 20)
        (return 0)
        )
    (let ((gp-0 (new 'stack-no-clear 'collide-query))
          (s5-0 (-> this points (-> this current-point)))
          )
      (set! (-> s5-0 found?) #f)
      (let* ((f0-0 3449.2632)
             (f30-0 (* f0-0 (the float (-> this current-point))))
             (s3-0 (new 'stack-no-clear 'vector))
             )
        (let ((f0-3 (+ f30-0 (rand-vu-float-range (* -0.43 f0-0) (* 0.43 f0-0)))))
          (set! (-> s5-0 angle) f0-3)
          (sincos! s3-0 f0-3)
          )
        (set! (-> s3-0 z) (* (-> s3-0 y) (-> this radius) (rand-vu-float-range 0.7 0.9)))
        (set! (-> s3-0 y) 32768.0)
        (set! (-> s3-0 x) (* (-> s3-0 x) (-> this radius) (rand-vu-float-range 0.7 0.9)))
        (vector+! (-> gp-0 start-pos) (-> this origin) s3-0)
        )
      (set-vector! (-> gp-0 move-dist) 0.0 -65536.0 0.0 1.0)
      (let ((v1-13 gp-0))
        (set! (-> v1-13 radius) 409.6)
        (set! (-> v1-13 collide-with) (collide-spec backgnd pusher))
        (set! (-> v1-13 ignore-process0) #f)
        (set! (-> v1-13 ignore-process1) #f)
        (set! (-> v1-13 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-13 action-mask) (collide-action solid))
        )
      (+! (-> this current-point) 1)
      (let ((f0-16 (fill-and-probe-using-line-sphere *collide-cache* gp-0)))
        (when (>= f0-16 0.0)
          (let ((a1-5 (-> s5-0 collision-pt)))
            (let ((v1-19 (-> gp-0 start-pos)))
              (let ((a0-15 (-> gp-0 move-dist)))
                (let ((a2-0 f0-16))
                  (.mov vf7 a2-0)
                  )
                (.lvf vf5 (&-> a0-15 quad))
                )
              (.lvf vf4 (&-> v1-19 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a1-5 quad) vf6)
            )
          (+! (-> s5-0 collision-pt y) 204.8)
          (set! (-> s5-0 found?) #t)
          (vector-normalize-copy! (-> s5-0 normal) (-> gp-0 best-other-tri normal) 1.0)
          (let ((s3-1 (new 'stack-no-clear 'vector))
                (s4-1 (new 'stack-no-clear 'inline-array 'vector 4))
                )
            (vector-cross! s3-1 (-> s5-0 normal) (vector-get-unique! (new 'stack-no-clear 'vector) (-> s5-0 normal)))
            (vector-normalize! s3-1 10240.0)
            (set! (-> s4-1 0 quad) (-> s3-1 quad))
            (vector-cross! (-> s4-1 1) s3-1 (-> s5-0 normal))
            (vector-negate! (-> s4-1 2) s3-1)
            (vector-cross! (-> s4-1 3) (-> s5-0 normal) s3-1)
            (vector-float*! s3-1 (-> s5-0 normal) 3072.0)
            (dotimes (v1-28 4)
              (vector+! (-> s4-1 v1-28) (-> s4-1 v1-28) s3-1)
              (vector+! (-> s4-1 v1-28) (-> s4-1 v1-28) (-> s5-0 collision-pt))
              )
            (vector-float*! (-> gp-0 move-dist) s3-1 -2.0)
            (let ((s3-2 (new 'stack-no-clear 'collide-query)))
              (let ((a1-19 (new 'stack-no-clear 'bounding-box)))
                (let* ((f0-21 409.6)
                       (f1-9 3072.0)
                       (f1-11 (* f1-9 f1-9))
                       (f2-0 10240.0)
                       (f0-22 (+ f0-21 (sqrtf (+ f1-11 (* f2-0 f2-0)))))
                       (v1-38 (new 'stack-no-clear 'vector))
                       )
                  (set-vector! v1-38 f0-22 f0-22 f0-22 1.0)
                  (vector+! (-> a1-19 max) (-> s5-0 collision-pt) v1-38)
                  (vector-! (-> a1-19 min) (-> s5-0 collision-pt) v1-38)
                  )
                (set! (-> s3-2 collide-with) (collide-spec backgnd pusher))
                (set! (-> s3-2 ignore-process0) #f)
                (set! (-> s3-2 ignore-process1) #f)
                (set! (-> s3-2 ignore-pat)
                      (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                      )
                (set! (-> s3-2 action-mask) (collide-action solid))
                (mem-copy! (the-as pointer (-> s3-2 bbox)) (the-as pointer a1-19) 32)
                )
              (fill-using-bounding-box *collide-cache* s3-2)
              )
            (dotimes (s3-3 4)
              (set! (-> gp-0 start-pos quad) (-> s4-1 s3-3 quad))
              (when (< (probe-using-line-sphere *collide-cache* gp-0) 0.0)
                (set! (-> s5-0 found?) #f)
                (return 0)
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

;; WARN: Function (method 11 mh-centipede-crater-pt-array) has a return type of none, but the expression builder found a return statement.
(defmethod mh-centipede-crater-pt-array-method-11 ((this mh-centipede-crater-pt-array) (arg0 process))
  (let ((s4-0 (new 'stack-no-clear 'vector)))
    (set! (-> s4-0 x) 0.0)
    (set! (-> s4-0 y) 409.6)
    (set! (-> s4-0 z) 0.0)
    (set! (-> s4-0 w) 1.0)
    (let ((s3-0 (new 'stack-no-clear 'matrix)))
      (dotimes (s2-0 4)
        (+! (-> this current-point) -1)
        (if (< (-> this current-point) 0)
            (return 0)
            )
        (let ((s1-0 (-> this points (-> this current-point))))
          (when (-> s1-0 found?)
            (set! (-> s3-0 uvec quad) (-> s1-0 normal quad))
            (vector-cross!
              (-> s3-0 rvec)
              (-> s3-0 uvec)
              (vector-! (new 'stack-no-clear 'vector) (-> s1-0 collision-pt) (-> this origin))
              )
            (vector-normalize! (-> s3-0 rvec) 1.0)
            (vector-cross! (-> s3-0 fvec) (-> s3-0 rvec) (-> s3-0 uvec))
            (let ((s0-0 (matrix->quaternion (new 'stack-no-clear 'quaternion) s3-0)))
              (quaternion-rotate-local-y! s0-0 s0-0 49152.0)
              (quaternion->matrix s3-0 s0-0)
              )
            (vector+! (-> s3-0 trans) (-> s1-0 collision-pt) s4-0)
            (let ((v1-23
                    (if (logtest? (-> *part-group-id-table* 643 flags) (sp-group-flag sp13))
                        (part-tracker-spawn part-tracker-subsampler :to arg0 :group (-> *part-group-id-table* 643) :mat-joint s3-0)
                        (part-tracker-spawn part-tracker :to arg0 :group (-> *part-group-id-table* 643) :mat-joint s3-0)
                        )
                    )
                  )
              (send-event (ppointer->process v1-23) 'clock arg0)
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defskelgroup skel-mh-centipede mh-centipede mh-centipede-lod0-jg mh-centipede-idle-ja
              ((mh-centipede-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 37)
              :shadow mh-centipede-shadow-mg
              :origin-joint-index 49
              )

(defskelgroup skel-mh-centipede-explode mh-centipede mh-centipede-explode-lod0-jg mh-centipede-explode-idle-ja
              ((mh-centipede-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6)
              )

(define *mh-centipede-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

(deftype mh-centipede-anim (structure)
  ((anim              int32)
   (speed             float)
   (radius            float)
   (vulnerable-start  float)
   (vulnerable-end    float)
   )
  )


(deftype mh-centipede (process-focusable)
  ((root                     collide-shape-moving         :override)
   (launch-position          vector                        :inline)
   (landing-position         vector                        :inline)
   (flags                    mh-centipede-flag)
   (incoming-attack-id       uint32)
   (hit-points               float)
   (appearance-order         int8)
   (before-breach-part       sparticle-launch-control)
   (breach-part              sparticle-launch-control)
   (dirt-fall-part           sparticle-launch-control)
   (impact-part              sparticle-launch-control)
   (impact-dust-part         sparticle-launch-control)
   (out-of-ground-crater     mh-centipede-crater-pt-array  :inline)
   (into-ground-crater       mh-centipede-crater-pt-array  :inline)
   (wait-time                time-frame)
   (pre-breach-time          time-frame)
   (breach-anims             (array mh-centipede-anim))
   (shoot-anims              (array mh-centipede-anim))
   (current-anim             mh-centipede-anim)
   (nose-smack-time          time-frame)
   (tail-smack-time          time-frame)
   (timeout                  time-frame)
   (prev-anim-frame          float)
   (current-target-position  vector                        :inline)
   (prev-target-position     vector                        :inline)
   (prev-time                time-frame)
   (rumble-sound             sound-id)
   (rumble-sound-playing     symbol)
   (ground-sound             sound-id)
   (ground-sound-playing     symbol)
   (legs-sound               sound-id)
   (legs-sound-playing       symbol)
   (minimap                  connection-minimap)
   (mm-handle                handle)
   (effect-sphere            sphere)
   )
  (:state-methods
    hidden
    wait-on-minimap
    wait-off-minimap
    pre-breach
    breach
    shooting
    die
    test
    )
  (:methods
    (mh-centipede-method-36 (_type_) none)
    (probe-ground (_type_ vector) symbol)
    (mh-centipede-method-38 (_type_ symbol) symbol)
    (mh-centipede-method-39 (_type_) symbol)
    (death-explosion (_type_ int) none)
    (mh-centipede-method-41 (_type_) symbol)
    (fire-shot (_type_) none)
    )
  )


(deftype mh-centipede-minimap-dot (process-drawable)
  ((parent   (pointer mh-centipede) :override)
   (minimap  connection-minimap)
   )
  (:state-methods
    idle
    )
  )


(defstate idle (mh-centipede-minimap-dot)
  :virtual #t
  :enter (behavior ()
    (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 137) (the-as int #f) (the-as vector #t) 0))
    )
  :exit (behavior ()
    (kill-callback (-> *minimap* engine) (-> self minimap))
    )
  :trans (behavior ()
    (vector<-cspace! (-> self root trans) (-> (ppointer->process (-> self parent)) node-list data 5))
    )
  :code sleep-code
  )

(defbehavior mh-centipede-minimap-dot-init-by-other mh-centipede-minimap-dot ()
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mh-centipede" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logclear! (-> self mask) (process-mask actor-pause))
  (logior! (-> self draw status) (draw-control-status no-draw-bounds))
  (go-virtual idle)
  )

;; WARN: Return type mismatch int vs search-info-flag.
(defmethod process-mask->search-info-flag ((this mh-centipede))
  (the-as search-info-flag 120)
  )

(defmethod get-trans ((this mh-centipede) (arg0 int))
  "Get the `trans` for this process."
  (cond
    ((or (= arg0 2) (= arg0 3))
     (let ((gp-0 (new 'static 'vector)))
       (cond
         ((logtest? (-> this flags) (mh-centipede-flag mc5))
          (set! (-> gp-0 quad) (-> this landing-position quad))
          (+! (-> gp-0 y) 8192.0)
          )
         (else
           (vector<-cspace! gp-0 (-> this node-list data 5))
           )
         )
       gp-0
       )
     )
    (else
      ((method-of-type process-focusable get-trans) this arg0)
      )
    )
  )

(defmethod mh-centipede-method-36 ((this mh-centipede))
  (set! (-> this effect-sphere) (nest-hunt-find-sphere (-> this root trans)))
  (when (!= (-> this prev-time) (current-time))
    (set-time! (-> this prev-time))
    (set! (-> this prev-target-position quad) (-> this current-target-position quad))
    (set! (-> this current-target-position quad) (-> (target-pos 0) quad))
    )
  (nest-hunt-play-speech 1 (-> this effect-sphere))
  0
  (none)
  )

(defmethod probe-ground ((this mh-centipede) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack-no-clear 'collide-query)))
      (set-vector! (-> s5-0 move-dist) 0.0 -40960.0 0.0 1.0)
      (set! (-> s5-0 start-pos quad) (-> arg0 quad))
      (+! (-> s5-0 start-pos y) 20480.0)
      (let ((v1-3 s5-0))
        (set! (-> v1-3 radius) 409.6)
        (set! (-> v1-3 collide-with) (collide-spec backgnd))
        (set! (-> v1-3 ignore-process0) #f)
        (set! (-> v1-3 ignore-process1) #f)
        (set! (-> v1-3 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-3 action-mask) (collide-action solid))
        )
      (let ((f0-7 (fill-and-probe-using-line-sphere *collide-cache* s5-0)))
        (cond
          ((>= f0-7 0.0)
           (let ((v1-6 (-> s5-0 start-pos)))
             (let ((a0-10 (-> s5-0 move-dist)))
               (let ((a1-2 f0-7))
                 (.mov vf7 a1-2)
                 )
               (.lvf vf5 (&-> a0-10 quad))
               )
             (.lvf vf4 (&-> v1-6 quad))
             )
           (.add.x.vf vf6 vf0 vf0 :mask #b1000)
           (.mul.x.vf acc vf5 vf7 :mask #b111)
           (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
           (.svf (&-> arg0 quad) vf6)
           #t
           )
          (else
            #f
            )
          )
        )
      )
    )
  )

(defmethod mh-centipede-method-38 ((this mh-centipede) (arg0 symbol))
  (local-vars (sv-288 nav-control) (sv-304 vector) (sv-320 vector) (sv-336 nav-control))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
    (init-vf0-vector)
    (if (and (not arg0) (< (rand-vu) 0.5))
        (set! arg0 #t)
        )
    (logclear! (-> this flags) (mh-centipede-flag mc8))
    (when (nonzero? (-> this nav))
      (let ((s4-0 (new 'stack-no-clear 'matrix)))
        (if arg0
            (set! (-> this current-anim) (-> this shoot-anims (rand-vu-int-count (-> this shoot-anims length))))
            (set! (-> this current-anim) (-> this breach-anims (rand-vu-int-count (-> this breach-anims length))))
            )
        (set! (-> this pre-breach-time) (the-as time-frame (the int (* 300.0 (you-suck-scale *game-info* #f 0)))))
        (set! (-> s4-0 rvec quad) (-> (camera-matrix) fvec quad))
        (set! (-> s4-0 rvec y) 0.0)
        (vector-normalize! (-> s4-0 rvec) 1.0)
        (set! (-> s4-0 uvec quad) (-> (camera-matrix) rvec quad))
        (set! (-> s4-0 uvec y) 0.0)
        (vector-normalize! (-> s4-0 uvec) 1.0)
        (set! (-> s4-0 fvec quad) (-> s4-0 rvec quad))
        (vector-normalize! (-> s4-0 fvec) 327680.0)
        (vector+! (-> s4-0 fvec) (-> s4-0 fvec) (target-pos 0))
        (let ((s3-3 (closest-point-on-mesh (-> this nav) (-> this landing-position) (-> s4-0 fvec) (the-as nav-poly #f)))
              (s1-0 (new 'stack-no-clear 'vector))
              (s2-2 (new 'stack-no-clear 'vector))
              )
          (let ((f0-6 10240.0))
            (if (< (* f0-6 f0-6) (vector-vector-xz-distance-squared (-> s4-0 fvec) (-> this landing-position)))
                (return #f)
                )
            )
          (set! sv-288 (-> this nav))
          (let ((a1-7 s3-3)
                (s0-0 s1-0)
                )
            (let ((a3-1 s2-2)
                  (v1-30 (-> this landing-position))
                  )
              (project-point-onto-plane-of-poly-local
                (-> sv-288 state mesh)
                a1-7
                s0-0
                a3-1
                (vector-! (new 'stack-no-clear 'vector) v1-30 (the-as vector (-> sv-288 state mesh bounds)))
                )
              )
            (vector+! s0-0 s0-0 (the-as vector (-> sv-288 state mesh bounds)))
            )
          0
          (set! (-> this landing-position y) (-> s1-0 y))
          (when (or (probe-ground this (-> this landing-position)) (not arg0))
            (dotimes (s1-1 10)
              (let ((s0-1 (-> s4-0 fvec)))
                (set! sv-304 (-> s4-0 rvec))
                (set! sv-320 (-> s4-0 uvec))
                (let* ((f30-2 (- (tan 0.0)))
                       (v1-39 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                       (v1-40 (the-as number (logior #x3f800000 v1-39)))
                       (f0-16 (+ f30-2 (* (+ -1.0 (the-as float v1-40)) (+ (tan 0.0) (tan 0.0)))))
                       )
                  (.lvf vf2 (&-> sv-320 quad))
                  (.lvf vf1 (&-> sv-304 quad))
                  (let ((v1-44 f0-16))
                    (.mov vf3 v1-44)
                    )
                  )
                (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf2 vf3)
                (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                (.svf (&-> s0-1 quad) vf4)
                )
              (vector-normalize! (-> s4-0 fvec) (* 3.0 (-> this current-anim radius)))
              (let ((s0-2 (new 'stack-no-clear 'clamp-travel-vector-to-mesh-return-info)))
                (set! (-> s4-0 fvec y) 0.0)
                (set! (-> s0-2 poly) s3-3)
                (clamp-vector-to-mesh-no-gaps (-> this nav) (-> this landing-position) (-> s0-2 poly) (-> s4-0 fvec) s0-2)
                (when (not (-> s0-2 found-boundary))
                  (vector+! (-> s4-0 fvec) (-> this landing-position) (-> s4-0 fvec))
                  (set! sv-336 (-> this nav))
                  (let ((a1-13 (-> s0-2 poly))
                        (s0-3 (-> this launch-position))
                        )
                    (let ((a3-3 s2-2)
                          (v1-52 (-> s4-0 fvec))
                          )
                      (project-point-onto-plane-of-poly-local
                        (-> sv-336 state mesh)
                        a1-13
                        s0-3
                        a3-3
                        (vector-! (new 'stack-no-clear 'vector) v1-52 (the-as vector (-> sv-336 state mesh bounds)))
                        )
                      )
                    (vector+! s0-3 s0-3 (the-as vector (-> sv-336 state mesh bounds)))
                    )
                  0
                  (when (probe-ground this (-> this launch-position))
                    (when arg0
                      (logior! (-> this flags) (mh-centipede-flag mc8))
                      (set! (-> this landing-position quad) (-> this launch-position quad))
                      )
                    (return #t)
                    )
                  )
                )
              )
            )
          )
        )
      )
    #f
    )
  )

(defmethod mh-centipede-method-39 ((this mh-centipede))
  (local-vars (sv-288 vector))
  (logclear! (-> this flags) (mh-centipede-flag mc8))
  (when (nonzero? (-> this nav))
    (let ((s5-0 (new 'stack-no-clear 'matrix)))
      (set! (-> this current-anim) (-> this breach-anims (rand-vu-int-count (-> this breach-anims length))))
      (set! (-> this pre-breach-time) (the-as time-frame (the int (* 300.0 (you-suck-scale *game-info* #f 0)))))
      (set! (-> s5-0 rvec quad) (-> (camera-matrix) fvec quad))
      (set! (-> s5-0 rvec y) 0.0)
      (vector-normalize! (-> s5-0 rvec) 1.0)
      (set! (-> s5-0 uvec quad) (-> (camera-matrix) rvec quad))
      (set! (-> s5-0 uvec y) 0.0)
      (vector-normalize! (-> s5-0 uvec) 1.0)
      (let* ((s4-2 (-> s5-0 fvec))
             (s3-0 (-> s5-0 rvec))
             (s2-0 (-> s5-0 uvec))
             (f30-1 (- (tan 0.0)))
             (v1-15 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-16 (the-as number (logior #x3f800000 v1-15)))
             )
        (vector+float*! s4-2 s3-0 s2-0 (+ f30-1 (* (+ -1.0 (the-as float v1-16)) (+ (tan 0.0) (tan 0.0)))))
        )
      (vector-normalize! (-> s5-0 fvec) 409600.0)
      (vector+! (-> s5-0 fvec) (-> s5-0 fvec) (camera-pos))
      (let ((s4-5 (closest-point-on-mesh (-> this nav) (-> this landing-position) (-> s5-0 fvec) (the-as nav-poly #f)))
            (s2-1 (new 'stack-no-clear 'vector))
            (s3-3 (new 'stack-no-clear 'vector))
            )
        (let ((f0-12 (vector-vector-xz-distance-squared (camera-pos) (-> this landing-position)))
              (f1-1 245760.0)
              )
          (if (or (< f0-12 (* f1-1 f1-1))
                  (let ((f0-13 (vector-vector-xz-distance-squared (target-pos 0) (-> this landing-position)))
                        (f1-4 245760.0)
                        )
                    (< f0-13 (* f1-4 f1-4))
                    )
                  )
              (return #f)
              )
          )
        (let ((s0-0 (-> this nav))
              (a1-7 s4-5)
              (s1-2 s2-1)
              )
          (let ((a3-1 s3-3)
                (v1-27 (-> this landing-position))
                )
            (project-point-onto-plane-of-poly-local
              (-> s0-0 state mesh)
              a1-7
              s1-2
              a3-1
              (vector-! (new 'stack-no-clear 'vector) v1-27 (the-as vector (-> s0-0 state mesh bounds)))
              )
            )
          (vector+! s1-2 s1-2 (the-as vector (-> s0-0 state mesh bounds)))
          )
        0
        (set! (-> this landing-position y) (-> s2-1 y))
        (when (probe-ground this (-> this landing-position))
          (dotimes (s2-2 10)
            (let* ((s1-3 (-> s5-0 fvec))
                   (s0-1 (-> s5-0 uvec))
                   (f30-2 -1.0)
                   (f28-1 2.0)
                   (v1-35 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                   (v1-36 (the-as number (logior #x3f800000 v1-35)))
                   )
              (vector-float*! s1-3 s0-1 (+ f30-2 (* f28-1 (+ -1.0 (the-as float v1-36)))))
              )
            (let ((s1-5 (-> s5-0 fvec))
                  (s0-2 (-> s5-0 fvec))
                  )
              (set! sv-288 (-> s5-0 rvec))
              (let* ((f30-3 -1.0)
                     (f28-2 2.0)
                     (v1-41 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                     (v1-42 (the-as number (logior #x3f800000 v1-41)))
                     (f0-24 (+ f30-3 (* f28-2 (+ -1.0 (the-as float v1-42)))))
                     )
                (vector+float*! s1-5 s0-2 sv-288 f0-24)
                )
              )
            (vector-normalize! (-> s5-0 fvec) (* 3.0 (-> this current-anim radius)))
            (let ((s1-7 (new 'stack-no-clear 'clamp-travel-vector-to-mesh-return-info)))
              (set! (-> s1-7 poly) s4-5)
              (clamp-vector-to-mesh-no-gaps (-> this nav) (-> this landing-position) (-> s1-7 poly) (-> s5-0 fvec) s1-7)
              (when (not (-> s1-7 found-boundary))
                (vector+! (-> s5-0 fvec) (-> this landing-position) (-> s5-0 fvec))
                (let ((s0-3 (-> this nav))
                      (a1-13 (-> s1-7 poly))
                      (s1-8 (-> this launch-position))
                      )
                  (let ((a3-3 s3-3)
                        (v1-51 (-> s5-0 fvec))
                        )
                    (project-point-onto-plane-of-poly-local
                      (-> s0-3 state mesh)
                      a1-13
                      s1-8
                      a3-3
                      (vector-! (new 'stack-no-clear 'vector) v1-51 (the-as vector (-> s0-3 state mesh bounds)))
                      )
                    )
                  (vector+! s1-8 s1-8 (the-as vector (-> s0-3 state mesh bounds)))
                  )
                0
                (if (probe-ground this (-> this launch-position))
                    (return #t)
                    )
                )
              )
            )
          )
        )
      )
    )
  #f
  )

(defmethod death-explosion ((this mh-centipede) (arg0 int))
  (local-vars
    (sv-848 process)
    (sv-864
      (function skeleton-group int joint-exploder-tuning joint-exploder-static-params object :behavior joint-exploder)
      )
    )
  (let ((s4-0 (get-field-spec-by-id (-> *part-id-table* 2512) (sp-field-id spt-omega)))
        (s5-0 (new 'stack-no-clear 'matrix))
        )
    (let* ((v1-2 s5-0)
           (a3-0 (-> this node-list data arg0 bone transform))
           (a0-5 (-> a3-0 rvec quad))
           (a1-3 (-> a3-0 uvec quad))
           (a2-0 (-> a3-0 fvec quad))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-2 rvec quad) a0-5)
      (set! (-> v1-2 uvec quad) a1-3)
      (set! (-> v1-2 fvec quad) a2-0)
      (set! (-> v1-2 trans quad) a3-1)
      )
    (vector<-cspace! (-> s5-0 trans) (-> this node-list data arg0))
    (cond
      (s4-0
        (let ((s3-1 (new 'stack-no-clear 'collide-query)))
          (set! (-> s3-1 start-pos quad) (-> s5-0 trans quad))
          (vector-float*! (-> s3-1 move-dist) (-> this root dynam gravity-normal) -163840.0)
          (let ((v1-8 s3-1))
            (set! (-> v1-8 radius) 1228.8)
            (set! (-> v1-8 collide-with) (collide-spec backgnd obstacle hit-by-player-list hit-by-others-list))
            (set! (-> v1-8 ignore-process0) this)
            (set! (-> v1-8 ignore-process1) #f)
            (set! (-> v1-8 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-8 action-mask) (collide-action solid))
            )
          (let ((f30-0 (fill-and-probe-using-line-sphere *collide-cache* s3-1)))
            (add-debug-sphere
              #t
              (bucket-id debug-no-zbuf1)
              (-> s5-0 trans)
              (meters 0.2)
              (new 'static 'rgba :r #x40 :g #xff :b #xff :a #x80)
              )
            (cond
              ((>= f30-0 0.0)
               (add-debug-sphere
                 #t
                 (bucket-id debug-no-zbuf1)
                 (-> s3-1 best-other-tri intersect)
                 (meters 0.3)
                 (new 'static 'rgba :r #x40 :g #xff :b #xff :a #x80)
                 )
               (set! (-> s4-0 initial-valuef)
                     (fmin (+ 819.2 (-> s3-1 best-other-tri intersect y)) (+ -1228.8 (-> s5-0 trans y)))
                     )
               )
              (else
                (set! (-> s4-0 initial-valuef) (+ -81920.0 (-> s5-0 trans y)))
                )
              )
            )
          )
        )
      (else
        (format 0 "no spec for mh-centipede death particle~%")
        )
      )
    (let ((v1-22
            (if (logtest? (-> *part-group-id-table* 647 flags) (sp-group-flag sp13))
                (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 647) :mat-joint s5-0)
                (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 647) :mat-joint s5-0)
                )
            )
          )
      (send-event (ppointer->process v1-22) 'clock this)
      )
    (let ((s2-0 (new 'stack 'joint-exploder-tuning (the-as uint 0)))
          (s1-0 (quaternion-copy! (new 'stack-no-clear 'quaternion) (-> this root quat)))
          (s4-3 (new 'stack-no-clear 'vector))
          )
      (set! (-> s4-3 quad) (-> this root trans quad))
      (let ((s3-2 (new 'stack-no-clear 'vector)))
        (set! (-> s3-2 quad) (-> this root scale quad))
        (set! (-> this root trans quad) (-> s5-0 trans quad))
        (set-vector! (-> this root scale) 2.0 2.0 2.0 1.0)
        (let ((s5-1 (get-process *default-dead-pool* joint-exploder #x4000 0)))
          (when s5-1
            (let ((t9-16 (method-of-type joint-exploder activate)))
              (t9-16 (the-as joint-exploder s5-1) this "joint-exploder" (the-as pointer #x70004000))
              )
            (let ((s0-0 run-function-in-process))
              (set! sv-848 s5-1)
              (set! sv-864 joint-exploder-init-by-other)
              (let ((a2-16 (art-group-get-by-name *level* "skel-mh-centipede-explode" (the-as (pointer level) #f)))
                    (a3-10 10)
                    (t1-0 *mh-centipede-exploder-params*)
                    )
                ((the-as (function object object object object object object none) s0-0) sv-848 sv-864 a2-16 a3-10 s2-0 t1-0)
                )
              )
            (-> s5-1 ppointer)
            )
          )
        (quaternion-copy! (-> this root quat) s1-0)
        (set! (-> this root trans quad) (-> s4-3 quad))
        (set! (-> this root scale quad) (-> s3-2 quad))
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch symbol vs object.
(defbehavior mh-centipede-active-handler mh-centipede ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v1-13 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (case arg2
      (('touched)
       (let ((s4-0 (the-as touching-shapes-entry (-> arg3 param 0))))
         (cond
           ((not s4-0)
            )
           ((type? arg0 vehicle)
            (when (not (logtest? (-> self flags) (mh-centipede-flag mc6)))
              (let ((s2-0 (-> s4-0 head)))
                (when s2-0
                  (let ((s3-0 (get-touched-prim s2-0 (-> self root) s4-0))
                        (s5-1 (new 'stack-no-clear 'vector))
                        )
                    (when s3-0
                      (get-intersect-point s5-1 s2-0 (-> self root) s4-0)
                      (vector-! s5-1 s5-1 (the-as vector (-> s3-0 prim-core)))
                      (set! (-> s5-1 y) 0.0)
                      (.lvf vf1 (&-> s5-1 quad))
                      (.add.w.vf vf2 vf0 vf0 :mask #b1)
                      (.mul.vf vf1 vf1 vf1)
                      (.mul.x.vf acc vf2 vf1 :mask #b1)
                      (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                      (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                      (.mov v1-13 vf1)
                      (let ((f0-1 v1-13)
                            (f1-0 1.0)
                            )
                        (if (< f0-1 (* f1-0 f1-0))
                            (set! (-> s5-1 x) 1.0)
                            )
                        )
                      (vector-normalize! s5-1 1.0)
                      (set! (-> s5-1 y) 0.1)
                      (when (send-event arg0 'attack #f (static-attack-info
                                                          :mask (vehicle-impulse-factor)
                                                          ((id (new-attack-id))
                                                           (damage 4.0)
                                                           (vehicle-damage-factor 0.8325)
                                                           (vehicle-impulse-factor (* 1.25 (-> (the-as vehicle arg0) info info mass)))
                                                           (shield-damage 1.0)
                                                           (knock (knocked-type dark-shot))
                                                           (attacker-velocity s5-1)
                                                           )
                                                          )
                                        )
                        )
                      (logior! (-> self flags) (mh-centipede-flag mc6))
                      (nest-hunt-play-speech 5 (-> self effect-sphere))
                      )
                    )
                  )
                )
              )
            )
           ((prims-touching? s4-0 (-> self root) (the-as uint -1))
            (if (send-event
                  (if (type? arg0 process-focusable)
                      arg0
                      )
                  'attack
                  (-> arg3 param 0)
                  (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                      (damage 4.0)
                                                                      (vehicle-damage-factor 1.0)
                                                                      (vehicle-impulse-factor 1.0)
                                                                      (knock (knocked-type dark-shot))
                                                                      )
                                      )
                  )
                (nest-hunt-play-speech 5 (-> self effect-sphere))
                )
            )
           )
         )
       #t
       )
      (('attack)
       (if (type? arg0 vehicle)
           (return (the-as object #f))
           )
       (if (or (< (ja-aframe-num 0) (-> self current-anim vulnerable-start))
               (< (-> self current-anim vulnerable-end) (ja-aframe-num 0))
               )
           (return (the-as object #f))
           )
       (let ((f0-14 1.0)
             (v1-50 (the-as attack-info (-> arg3 param 1)))
             )
         (when (or (not (logtest? (-> v1-50 mask) (attack-mask id))) (!= (-> self incoming-attack-id) (-> v1-50 id)))
           (if (logtest? (-> v1-50 mask) (attack-mask id))
               (set! (-> self incoming-attack-id) (-> v1-50 id))
               )
           (if (logtest? (attack-mask damage) (-> v1-50 mask))
               (set! f0-14 (-> v1-50 damage))
               )
           (if (and (-> self next-state) (= (-> self next-state name) 'shooting))
               (set! f0-14 (* 0.5 f0-14))
               )
           (if (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
               (set! f0-14 (* 0.6666667 f0-14))
               )
           (set! (-> self hit-points) (fmax 0.0 (- (-> self hit-points) f0-14)))
           (set! (-> *game-info* health-bar) (-> self hit-points))
           (cond
             ((= (-> self hit-points) 0.0)
              (go-virtual die)
              )
             ((= f0-14 0.0)
              )
             ((< (-> self hit-points) 20.0)
              (nest-hunt-play-speech 3 (-> self effect-sphere))
              )
             (else
               (nest-hunt-play-speech 2 (-> self effect-sphere))
               )
             )
           )
         )
       #t
       )
      )
    )
  )

(defmethod mh-centipede-method-41 ((this mh-centipede))
  (and (task-node-closed? (game-task-node nest-hunt-introduction))
       (> (-> this appearance-order) 0)
       (= (-> this appearance-order) (the int (-> *game-info* counter)))
       )
  )

(defmethod fire-shot ((this mh-centipede))
  (local-vars (sv-192 sound-id))
  (with-pp
    (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (let ((s3-0 (new 'stack-no-clear 'vector))
            (s4-0 (new 'stack-no-clear 'vector))
            )
        (let ((s2-0 (new 'stack-no-clear 'vector)))
          (set! (-> s2-0 quad) (-> (target-pos 0) quad))
          (vector<-cspace! s3-0 (-> this node-list data 77))
          (let ((s1-0 sound-play-by-name)
                (sname (static-sound-name "cent-fire-spit"))
                )
            (set! sv-192 (new-sound-id))
            (let ((a2-0 (the int (* 1024.0 (nest-hunt-volume (-> this effect-sphere)))))
                  (a3-0 0)
                  (t0-0 0)
                  (t1-0 0)
                  (t2-0 s3-0)
                  )
              (s1-0 (the-as sound-name sname) sv-192 a2-0 a3-0 t0-0 (the-as sound-group t1-0) t2-0)
              )
            )
          (vector-! s4-0 (-> this current-target-position) (-> this prev-target-position))
          (set! (-> s4-0 y) 0.0)
          (let* ((f30-1 (vector-length s4-0))
                 (s1-1 s4-0)
                 (s0-1 s4-0)
                 (f28-0 (lerp-scale 20480.0 81920.0 f30-1 0.0 4505.6))
                 (f26-0 20480.0)
                 (v1-9 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                 (v1-10 (the-as number (logior #x3f800000 v1-9)))
                 )
            (vector-float*! s1-1 s0-1 (/ (+ f28-0 (* f26-0 (+ -1.0 (the-as float v1-10)))) f30-1))
            )
          (vector+! s2-0 s2-0 s4-0)
          (let* ((f30-2 (-> s2-0 y))
                 (f28-1 -16384.0)
                 (v1-14 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                 (v1-15 (the-as number (logior #x3f800000 v1-14)))
                 )
            (set! (-> s2-0 y) (+ f30-2 (* f28-1 (+ -1.0 (the-as float v1-15)))))
            )
          (vector-! s4-0 s2-0 s3-0)
          )
        (vector-normalize! s4-0 (* 36864.0 (-> pp clock frames-per-second)))
        (set! (-> gp-0 ent) (-> this entity))
        (set! (-> gp-0 charge) 1.0)
        (set! (-> gp-0 options) (projectile-options))
        (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
        (set! (-> gp-0 pos quad) (-> s3-0 quad))
        (set! (-> gp-0 vel quad) (-> s4-0 quad))
        )
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle this))
      (let* ((v1-30 *game-info*)
             (a0-27 (+ (-> v1-30 attack-id) 1))
             )
        (set! (-> v1-30 attack-id) a0-27)
        (set! (-> gp-0 attack-id) a0-27)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (set! (-> gp-0 damage) 3.33)
      (logior! (-> gp-0 options) (projectile-options po14))
      (set! (-> gp-0 vehicle-impulse-factor) (* 0.3003003 (-> pp clock frames-per-second)))
      (logior! (-> gp-0 options) (projectile-options po16))
      (spawn-projectile mh-centipede-shot gp-0 (ppointer->process (-> this parent)) *default-dead-pool*)
      )
    0
    (none)
    )
  )

(defstate hidden (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (collide-spec))
      (set! (-> v1-6 prim-core collide-with) (collide-spec))
      )
    0
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (when (and (time-elapsed? (-> self state-time) (seconds 0.1)) (mh-centipede-method-41 self))
      (set! (-> *game-info* health-bar-owner) (process->handle self))
      (set! (-> *game-info* health-bar) (-> self hit-points))
      (go-virtual wait-off-minimap)
      )
    )
  :code sleep-code
  )

(defstate wait-on-minimap (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-time! (-> self timeout))
    (set! (-> self wait-time) (the-as time-frame (the int (* 900.0 (you-suck-scale *game-info* #f 0)))))
    (vector<-cspace! (-> self root trans) (joint-node mh-centipede-lod0-jg head))
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-14 (-> self root root-prim)))
      (set! (-> v1-14 prim-core collide-as) (collide-spec))
      (set! (-> v1-14 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 138) (the-as int #f) (the-as vector #t) 0))
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    (kill-callback (-> *minimap* engine) (-> self minimap))
    (set! (-> self minimap) #f)
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (when (time-elapsed? (-> self state-time) (-> self wait-time))
      (if (or (mh-centipede-method-38 self #f) (mh-centipede-method-38 self #t))
          (go-virtual wait-off-minimap)
          (set! (-> self state-time) (-> self state-time))
          )
      )
    (when (time-elapsed? (-> self timeout) (seconds 15))
      (if (mh-centipede-method-39 self)
          (go-virtual wait-off-minimap)
          (set! (-> self timeout) (-> self timeout))
          )
      )
    )
  :code sleep-code
  )

(defstate wait-off-minimap (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self wait-time) (the-as time-frame (the int (* 300.0 (you-suck-scale *game-info* #f 0)))))
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-10 (-> self root root-prim)))
      (set! (-> v1-10 prim-core collide-as) (collide-spec))
      (set! (-> v1-10 prim-core collide-with) (collide-spec))
      )
    0
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (when (time-elapsed? (-> self state-time) (-> self wait-time))
      (if (or (mh-centipede-method-38 self #f) (mh-centipede-method-38 self #t) (mh-centipede-method-39 self))
          (go-virtual pre-breach)
          (set! (-> self state-time) (-> self state-time))
          )
      )
    )
  :code sleep-code
  )

(defstate pre-breach (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (collide-spec))
      (set! (-> v1-6 prim-core collide-with) (collide-spec))
      )
    0
    (let* ((gp-0 lerp-scale)
           (s5-0 819.2)
           (s4-0 0.0)
           (a2-0 (vector-vector-distance-squared (-> self launch-position) (target-pos 0)))
           (f0-0 204800.0)
           (a3-0 (* f0-0 f0-0))
           (f0-2 2048000.0)
           (f0-5 (* (gp-0 s5-0 s4-0 a2-0 a3-0 (* f0-2 f0-2)) (nest-hunt-shake-amp (-> self effect-sphere))))
           )
      (activate! *camera-smush-control* f0-5 37 600 1.0 1.1 (-> *display* camera-clock))
      )
    (init! (-> self out-of-ground-crater) (-> self launch-position) 32768.0)
    (init! (-> self into-ground-crater) (-> self landing-position) 32768.0)
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw-bounds))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (cond
      ((not (time-elapsed? (-> self state-time) (-> self pre-breach-time)))
       )
      ((logtest? (-> self flags) (mh-centipede-flag mc8))
       (go-virtual shooting)
       )
      (else
        (go-virtual breach)
        )
      )
    (let ((f30-0 (/ (the float (- (current-time) (-> self state-time))) (the float (-> self pre-breach-time)))))
      (sound-play-by-name
        (static-sound-name "cent-rumble")
        (-> self rumble-sound)
        (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
        0
        0
        (sound-group)
        (-> self launch-position)
        )
      (set! (-> self rumble-sound-playing) #t)
      (let ((f30-1 (* f30-0 f30-0)))
        (sound-play-by-name
          (static-sound-name "cent-ground")
          (-> self ground-sound)
          (the int (* 1024.0 (* f30-1 (nest-hunt-volume (-> self effect-sphere)))))
          0
          0
          (sound-group)
          (-> self launch-position)
          )
        )
      )
    (set! (-> self ground-sound-playing) #t)
    (if (nonzero? (-> self before-breach-part))
        (spawn (-> self before-breach-part) (-> self launch-position))
        )
    (dotimes (gp-2 2)
      (mh-centipede-crater-pt-array-method-10 (-> self out-of-ground-crater))
      (mh-centipede-crater-pt-array-method-10 (-> self into-ground-crater))
      )
    )
  :code sleep-code
  )

(defstate breach (mh-centipede)
  :virtual #t
  :event mh-centipede-active-handler
  :enter (behavior ()
    (nest-hunt-play-speech 0 (-> self effect-sphere))
    (set-time! (-> self state-time))
    (set! (-> self root trans quad) (-> self launch-position quad))
    (let ((gp-1 (vector-! (new 'stack-no-clear 'vector) (-> self landing-position) (-> self launch-position))))
      (set! (-> gp-1 y) 0.0)
      (vector-normalize! gp-1 1.0)
      (quaternion-set! (-> self root quat) 0.0 (-> gp-1 x) 0.0 (+ 1.0 (-> gp-1 z)))
      )
    (quaternion-normalize! (-> self root quat))
    (let* ((gp-2 lerp-scale)
           (s5-0 1638.4)
           (s4-0 0.0)
           (a2-1 (vector-vector-distance-squared (-> self launch-position) (target-pos 0)))
           (f0-4 204800.0)
           (a3-1 (* f0-4 f0-4))
           (f0-6 2048000.0)
           (f30-1 (* (gp-2 s5-0 s4-0 a2-1 a3-1 (* f0-6 f0-6)) (nest-hunt-shake-amp (-> self effect-sphere))))
           )
      (set-zero! *camera-smush-control*)
      (activate! *camera-smush-control* f30-1 75 900 1.1 1.07 (-> *display* camera-clock))
      )
    (logclear! (-> self flags) (mh-centipede-flag mc0 mc1 mc2 mc3 mc4 mc5 mc6))
    (ja-channel-push! 1 0)
    (ja :group! (-> self draw art-group data (-> self current-anim anim)) :num! min)
    (set! (-> self mm-handle)
          (ppointer->handle (process-spawn mh-centipede-minimap-dot :name "mh-centipede-minimap-dot" :to self))
          )
    )
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self mm-handle))))
      (when a0-1
        (deactivate a0-1)
        (set! (-> self mm-handle) (the-as handle #f))
        )
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (ja :num! (seek! max (-> self current-anim speed)))
    (if (ja-done? 0)
        (go-virtual wait-on-minimap)
        )
    (cond
      ((not (logtest? (-> self flags) (mh-centipede-flag mc0)))
       (when (nonzero? (-> self breach-part))
         (let ((f30-0 (-> *part-id-table* 2499 init-specs 2 initial-valuef)))
           (set! (-> *part-id-table* 2499 init-specs 2 initial-valuef)
                 (lerp-scale f30-0 (* 0.1 f30-0) (the float (- (current-time) (-> self state-time))) 0.0 150.0)
                 )
           (spawn (-> self breach-part) (-> self launch-position))
           (set! (-> *part-id-table* 2499 init-specs 2 initial-valuef) f30-0)
           )
         )
       (mh-centipede-crater-pt-array-method-11 (-> self out-of-ground-crater) self)
       (if (>= (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg tail3)) y)
               (-> self launch-position y)
               )
           (logior! (-> self flags) (mh-centipede-flag mc0))
           )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc1)))
       (if (>= (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg tail3)) y)
               (+ 8192.0 (-> self landing-position y))
               )
           (logior! (-> self flags) (mh-centipede-flag mc1))
           )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc2)))
       (when (< (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg tail3)) y)
                (-> self landing-position y)
                )
         (set-time! (-> self tail-smack-time))
         (logior! (-> self flags) (mh-centipede-flag mc2))
         (when (-> self rumble-sound-playing)
           (sound-stop (-> self rumble-sound))
           (set! (-> self rumble-sound-playing) #f)
           )
         (when (-> self ground-sound-playing)
           (sound-stop (-> self ground-sound))
           (set! (-> self ground-sound-playing) #f)
           )
         )
       )
      (else
        )
      )
    (cond
      ((not (logtest? (-> self flags) (mh-centipede-flag mc3)))
       (let ((gp-0 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth))))
         (when (>= (-> gp-0 y) (+ -12288.0 (-> self launch-position y)))
           (logior! (-> self flags) (mh-centipede-flag mc3))
           (sound-play-by-name
             (static-sound-name "cent-out")
             (new-sound-id)
             (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
             0
             0
             (sound-group)
             (-> self launch-position)
             )
           (when (-> self rumble-sound-playing)
             (sound-stop (-> self rumble-sound))
             (set! (-> self rumble-sound-playing) #f)
             )
           (when (-> self ground-sound-playing)
             (sound-stop (-> self ground-sound))
             (set! (-> self ground-sound-playing) #f)
             )
           (sound-play-by-name
             (static-sound-name "cent-legs")
             (-> self legs-sound)
             (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
             0
             0
             (sound-group)
             gp-0
             )
           (set! (-> self legs-sound-playing) #t)
           )
         )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc4)))
       (let ((gp-1 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth))))
         (sound-play-by-name
           (static-sound-name "cent-legs")
           (-> self legs-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           gp-1
           )
         (set! (-> self legs-sound-playing) #t)
         (if (< (+ 14336.0 (-> self launch-position y)) (-> gp-1 y))
             (logior! (-> self flags) (mh-centipede-flag mc4))
             )
         )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc5)))
       (when (< (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth)) y)
                (+ 12288.0 (-> self launch-position y))
                )
         (logior! (-> self flags) (mh-centipede-flag mc5))
         (set-time! (-> self nose-smack-time))
         (sound-play-by-name
           (static-sound-name "cent-in")
           (new-sound-id)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (sound-play-by-name
           (static-sound-name "cent-rumble")
           (-> self rumble-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (set! (-> self rumble-sound-playing) #t)
         (sound-play-by-name
           (static-sound-name "cent-ground")
           (-> self ground-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (set! (-> self ground-sound-playing) #t)
         (let* ((gp-5 lerp-scale)
                (s5-6 1638.4)
                (s4-6 0.0)
                (a2-9 (vector-vector-distance-squared (-> self landing-position) (target-pos 0)))
                (f0-33 204800.0)
                (a3-7 (* f0-33 f0-33))
                (f0-35 2048000.0)
                (f30-8 (* (gp-5 s5-6 s4-6 a2-9 a3-7 (* f0-35 f0-35)) (nest-hunt-shake-amp (-> self effect-sphere))))
                )
           (set-zero! *camera-smush-control*)
           (activate! *camera-smush-control* f30-8 60 600 0.995 1.07 (-> *display* camera-clock))
           )
         )
       )
      (else
        (when (-> self legs-sound-playing)
          (sound-stop (-> self legs-sound))
          (set! (-> self legs-sound-playing) #f)
          )
        (when (-> self ground-sound-playing)
          (sound-play-by-name
            (static-sound-name "cent-ground")
            (-> self ground-sound)
            (the int
                 (* 1024.0 (* (nest-hunt-volume (-> self effect-sphere))
                              (lerp-scale 1.0 0.0 (the float (- (current-time) (-> self nose-smack-time))) 0.0 600.0)
                              )
                    )
                 )
            0
            0
            (sound-group)
            (-> self landing-position)
            )
          (set! (-> self ground-sound-playing) #t)
          )
        (mh-centipede-crater-pt-array-method-11 (-> self into-ground-crater) self)
        (when (and (nonzero? (-> self impact-part)) (not (logtest? (-> self flags) (mh-centipede-flag mc2))))
          (let ((f30-10 (-> *part-id-table* 2507 init-specs 2 initial-valuef))
                (f28-1 (-> *part-id-table* 2508 init-specs 2 initial-valuef))
                )
            (set! (-> *part-id-table* 2507 init-specs 2 initial-valuef)
                  (lerp-scale f30-10 (* 0.05 f30-10) (the float (- (current-time) (-> self nose-smack-time))) 0.0 30.0)
                  )
            (set! (-> *part-id-table* 2508 init-specs 2 initial-valuef)
                  (lerp-scale f28-1 (* 0.0 f28-1) (the float (- (current-time) (-> self nose-smack-time))) 0.0 150.0)
                  )
            (spawn (-> self impact-part) (-> self landing-position))
            (set! (-> *part-id-table* 2507 init-specs 2 initial-valuef) f30-10)
            (set! (-> *part-id-table* 2508 init-specs 2 initial-valuef) f28-1)
            )
          )
        (if (and (nonzero? (-> self impact-dust-part))
                 (logtest? (-> self flags) (mh-centipede-flag mc2))
                 (not (time-elapsed? (-> self tail-smack-time) (seconds 0.2)))
                 )
            (spawn (-> self impact-dust-part) (-> self landing-position))
            )
        )
      )
    (when (nonzero? (-> self dirt-fall-part))
      (let ((gp-7 (new 'static 'boxed-array :type uint8
                    #xb
                    #xe
                    #x1c
                    #x24
                    #x2c
                    #x34
                    #x3c
                    #x44
                    #x11
                    #x14
                    #x1f
                    #x27
                    #x2f
                    #x37
                    #x3f
                    #x47
                    )
                  )
            (s5-8 (new 'stack-no-clear 'vector))
            )
        (dotimes (s4-8 3)
          (vector<-cspace!
            s5-8
            (-> self node-list data (-> gp-7 (mod (the-as int (rand-uint31-gen *random-generator*)) (-> gp-7 length))))
            )
          (spawn (-> self dirt-fall-part) s5-8)
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

(defstate shooting (mh-centipede)
  :virtual #t
  :event mh-centipede-active-handler
  :enter (behavior ()
    (nest-hunt-play-speech 0 (-> self effect-sphere))
    (set-time! (-> self state-time))
    (set! (-> self root trans quad) (-> self launch-position quad))
    (let* ((gp-0 lerp-scale)
           (s5-0 1638.4)
           (s4-0 0.0)
           (a2-0 (vector-vector-distance-squared (-> self launch-position) (target-pos 0)))
           (f0-0 204800.0)
           (a3-0 (* f0-0 f0-0))
           (f0-2 2048000.0)
           (f30-1 (* (gp-0 s5-0 s4-0 a2-0 a3-0 (* f0-2 f0-2)) (nest-hunt-shake-amp (-> self effect-sphere))))
           )
      (set-zero! *camera-smush-control*)
      (activate! *camera-smush-control* f30-1 75 900 1.1 1.07 (-> *display* camera-clock))
      )
    (logclear! (-> self flags) (mh-centipede-flag mc0 mc1 mc2 mc3 mc4 mc5 mc6))
    (ja-channel-push! 1 0)
    (ja :group! (-> self draw art-group data (-> self current-anim anim)) :num! min)
    (set! (-> self prev-anim-frame) (ja-aframe-num 0))
    (set! (-> self mm-handle)
          (ppointer->handle (process-spawn mh-centipede-minimap-dot :name "mh-centipede-minimap-dot" :to self))
          )
    )
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self mm-handle))))
      (when a0-1
        (deactivate a0-1)
        (set! (-> self mm-handle) (the-as handle #f))
        )
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (ja :num! (seek! max (-> self current-anim speed)))
    (let ((f30-0 (ja-aframe-num 0)))
      (if (or (and (< (-> self prev-anim-frame) 25.0) (>= f30-0 25.0))
              (and (< (-> self prev-anim-frame) 35.0) (>= f30-0 35.0))
              (and (< (-> self prev-anim-frame) 40.0) (>= f30-0 40.0))
              )
          (fire-shot self)
          )
      (set! (-> self prev-anim-frame) f30-0)
      )
    (if (ja-done? 0)
        (go-virtual wait-on-minimap)
        )
    (let ((gp-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> self launch-position))))
      (set! (-> gp-1 y) 0.0)
      (vector-normalize! gp-1 1.0)
      (quaternion-set! (-> self root quat) 0.0 (-> gp-1 x) 0.0 (+ 1.0 (-> gp-1 z)))
      )
    (quaternion-normalize! (-> self root quat))
    (cond
      ((not (logtest? (-> self flags) (mh-centipede-flag mc0)))
       (when (nonzero? (-> self breach-part))
         (let ((f30-1 (-> *part-id-table* 2499 init-specs 2 initial-valuef)))
           (set! (-> *part-id-table* 2499 init-specs 2 initial-valuef)
                 (lerp-scale f30-1 (* 0.1 f30-1) (the float (- (current-time) (-> self state-time))) 0.0 150.0)
                 )
           (spawn (-> self breach-part) (-> self launch-position))
           (set! (-> *part-id-table* 2499 init-specs 2 initial-valuef) f30-1)
           )
         )
       (mh-centipede-crater-pt-array-method-11 (-> self out-of-ground-crater) self)
       (if (>= (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth)) y)
               (+ 16384.0 (-> self launch-position y))
               )
           (logior! (-> self flags) (mh-centipede-flag mc0))
           )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc1)))
       (if (>= (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth)) y)
               (+ 8192.0 (-> self landing-position y))
               )
           (logior! (-> self flags) (mh-centipede-flag mc1))
           )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc2)))
       (when (< (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth)) y)
                (-> self landing-position y)
                )
         (set-time! (-> self tail-smack-time))
         (logior! (-> self flags) (mh-centipede-flag mc2))
         (when (-> self rumble-sound-playing)
           (sound-stop (-> self rumble-sound))
           (set! (-> self rumble-sound-playing) #f)
           )
         (when (-> self ground-sound-playing)
           (sound-stop (-> self ground-sound))
           (set! (-> self ground-sound-playing) #f)
           )
         )
       )
      )
    (cond
      ((not (logtest? (-> self flags) (mh-centipede-flag mc3)))
       (let ((gp-2 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth))))
         (when (>= (-> gp-2 y) (+ -12288.0 (-> self launch-position y)))
           (logior! (-> self flags) (mh-centipede-flag mc3))
           (sound-play-by-name
             (static-sound-name "cent-out")
             (new-sound-id)
             (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
             0
             0
             (sound-group)
             (-> self launch-position)
             )
           (when (-> self rumble-sound-playing)
             (sound-stop (-> self rumble-sound))
             (set! (-> self rumble-sound-playing) #f)
             )
           (when (-> self ground-sound-playing)
             (sound-stop (-> self ground-sound))
             (set! (-> self ground-sound-playing) #f)
             )
           (sound-play-by-name
             (static-sound-name "cent-legs")
             (-> self legs-sound)
             (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
             0
             0
             (sound-group)
             gp-2
             )
           (set! (-> self legs-sound-playing) #t)
           )
         )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc4)))
       (let ((gp-3 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth))))
         (sound-play-by-name
           (static-sound-name "cent-legs")
           (-> self legs-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           gp-3
           )
         (set! (-> self legs-sound-playing) #t)
         (if (< (+ 14336.0 (-> self launch-position y)) (-> gp-3 y))
             (logior! (-> self flags) (mh-centipede-flag mc4))
             )
         )
       )
      ((not (logtest? (-> self flags) (mh-centipede-flag mc5)))
       (when (< (-> (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node mh-centipede-lod0-jg mouth)) y)
                (+ 12288.0 (-> self launch-position y))
                )
         (logior! (-> self flags) (mh-centipede-flag mc5))
         (set-time! (-> self nose-smack-time))
         (sound-play-by-name
           (static-sound-name "cent-in")
           (new-sound-id)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (sound-play-by-name
           (static-sound-name "cent-rumble")
           (-> self rumble-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (set! (-> self rumble-sound-playing) #t)
         (sound-play-by-name
           (static-sound-name "cent-ground")
           (-> self ground-sound)
           (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
           0
           0
           (sound-group)
           (-> self landing-position)
           )
         (set! (-> self ground-sound-playing) #t)
         (let* ((gp-7 lerp-scale)
                (s5-6 1638.4)
                (s4-6 0.0)
                (a2-10 (vector-vector-distance-squared (-> self landing-position) (target-pos 0)))
                (f0-43 204800.0)
                (a3-8 (* f0-43 f0-43))
                (f0-45 2048000.0)
                (f30-9 (* (gp-7 s5-6 s4-6 a2-10 a3-8 (* f0-45 f0-45)) (nest-hunt-shake-amp (-> self effect-sphere))))
                )
           (set-zero! *camera-smush-control*)
           (activate! *camera-smush-control* f30-9 60 600 0.995 1.07 (-> *display* camera-clock))
           )
         )
       )
      (else
        (when (-> self legs-sound-playing)
          (sound-stop (-> self legs-sound))
          (set! (-> self legs-sound-playing) #f)
          )
        (when (-> self ground-sound-playing)
          (sound-play-by-name
            (static-sound-name "cent-ground")
            (-> self ground-sound)
            (the int
                 (* 1024.0 (* (nest-hunt-volume (-> self effect-sphere))
                              (lerp-scale 1.0 0.0 (the float (- (current-time) (-> self nose-smack-time))) 0.0 600.0)
                              )
                    )
                 )
            0
            0
            (sound-group)
            (-> self landing-position)
            )
          (set! (-> self ground-sound-playing) #t)
          )
        (mh-centipede-crater-pt-array-method-11 (-> self into-ground-crater) self)
        (when (and (nonzero? (-> self impact-part)) (not (logtest? (-> self flags) (mh-centipede-flag mc2))))
          (let ((f30-11 (-> *part-id-table* 2507 init-specs 2 initial-valuef))
                (f28-1 (-> *part-id-table* 2508 init-specs 2 initial-valuef))
                )
            (set! (-> *part-id-table* 2507 init-specs 2 initial-valuef)
                  (lerp-scale f30-11 (* 0.05 f30-11) (the float (- (current-time) (-> self nose-smack-time))) 0.0 30.0)
                  )
            (set! (-> *part-id-table* 2508 init-specs 2 initial-valuef)
                  (lerp-scale f28-1 (* 0.0 f28-1) (the float (- (current-time) (-> self nose-smack-time))) 0.0 150.0)
                  )
            (spawn (-> self impact-part) (-> self landing-position))
            (set! (-> *part-id-table* 2507 init-specs 2 initial-valuef) f30-11)
            (set! (-> *part-id-table* 2508 init-specs 2 initial-valuef) f28-1)
            )
          )
        (if (and (nonzero? (-> self impact-dust-part))
                 (logtest? (-> self flags) (mh-centipede-flag mc2))
                 (not (time-elapsed? (-> self tail-smack-time) (seconds 0.2)))
                 )
            (spawn (-> self impact-dust-part) (-> self landing-position))
            )
        )
      )
    (when (nonzero? (-> self dirt-fall-part))
      (let ((gp-9 (new 'static 'boxed-array :type uint8
                    #xb
                    #xe
                    #x1c
                    #x24
                    #x2c
                    #x34
                    #x3c
                    #x44
                    #x11
                    #x14
                    #x1f
                    #x27
                    #x2f
                    #x37
                    #x3f
                    #x47
                    )
                  )
            (s5-8 (new 'stack-no-clear 'vector))
            )
        (dotimes (s4-8 3)
          (vector<-cspace!
            s5-8
            (-> self node-list data (-> gp-9 (mod (the-as int (rand-uint31-gen *random-generator*)) (-> gp-9 length))))
            )
          (spawn (-> self dirt-fall-part) s5-8)
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

(defstate die (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (let* ((v1-2 (-> *game-info* sub-task-list (game-task-node nest-hunt-fight)))
           (a0-2 (handle->process (if (-> v1-2 manager)
                                      (-> v1-2 manager manager)
                                      (the-as handle #f)
                                      )
                                  )
                 )
           )
      (if a0-2
          (send-event a0-2 'centipede-died (-> self launch-position))
          )
      )
    (set-time! (-> self state-time))
    (let* ((gp-0 lerp-scale)
           (s5-0 1638.4)
           (s4-0 0.0)
           (a2-1 (vector-vector-distance-squared (-> self launch-position) (target-pos 0)))
           (f0-0 204800.0)
           (a3-0 (* f0-0 f0-0))
           (f0-2 2048000.0)
           (f30-1 (* (gp-0 s5-0 s4-0 a2-1 a3-0 (* f0-2 f0-2)) (nest-hunt-shake-amp (-> self effect-sphere))))
           )
      (set-zero! *camera-smush-control*)
      (activate! *camera-smush-control* f30-1 75 900 1.1 1.07 (-> *display* camera-clock))
      )
    (if (-> self rumble-sound-playing)
        (sound-stop (-> self rumble-sound))
        )
    (if (-> self ground-sound-playing)
        (sound-stop (-> self ground-sound))
        )
    (if (-> self legs-sound-playing)
        (sound-stop (-> self legs-sound))
        )
    (let ((v1-32 (-> self root root-prim)))
      (set! (-> v1-32 prim-core collide-as) (collide-spec))
      (set! (-> v1-32 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw-bounds))
    (death-explosion self 5)
    (death-explosion self 25)
    (death-explosion self 33)
    (death-explosion self 41)
    (death-explosion self 49)
    (death-explosion self 57)
    (death-explosion self 65)
    (sound-play-by-name
      (static-sound-name "cent-out")
      (new-sound-id)
      (the int (* 1024.0 (nest-hunt-volume (-> self effect-sphere))))
      0
      0
      (sound-group)
      (-> self launch-position)
      )
    (nest-hunt-play-speech 4 (-> self effect-sphere))
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'get-vehicle)
      (let ((a0-3 (the-as vehicle (send-event-function *target* a1-0))))
        (if a0-3
            (vehicle-method-106 a0-3)
            )
        )
      )
    (when (and (time-elapsed? (-> self state-time) (seconds 1)) (not (-> self child)))
      (process-entity-status! self (entity-perm-status subtask-complete) #t)
      (cleanup-for-death self)
      (deactivate self)
      )
    (when (time-elapsed? (-> self state-time) (seconds 2))
      (process-entity-status! self (entity-perm-status subtask-complete) #t)
      (cleanup-for-death self)
      )
    (when *camera*
      (let ((s5-0 (-> *camera* slave)))
        (when s5-0
          (new 'stack-no-clear 'vector)
          (let ((gp-0 (new 'stack-no-clear 'vector)))
            (vector<-cspace! gp-0 (joint-node mh-centipede-lod0-jg mouth))
            (set! (-> gp-0 y) (fmax (-> gp-0 y) (+ 16384.0 (-> self landing-position y))))
            (vector-! gp-0 gp-0 (-> s5-0 0 trans))
            (vector-normalize! gp-0 1.0)
            (forward-down->inv-matrix (the-as matrix (-> s5-0 0 tracking)) gp-0 (new 'static 'vector :y -1.0))
            )
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

(defstate test (mh-centipede)
  :virtual #t
  :enter (behavior ()
    (ja :group! mh-centipede-breach-2-ja :num! min)
    (set-time! (-> self state-time))
    (set! (-> self root trans y) (-> self entity extra trans y))
    (set! (-> self draw shadow-ctrl) *mh-centipede-shadow-control*)
    (logclear! (-> self flags) (mh-centipede-flag mc7))
    (when (!= (-> self entity) (entity-by-name "mh-centipede-7"))
      (cleanup-for-death self)
      (deactivate self)
      )
    )
  :trans (behavior ()
    (mh-centipede-method-36 self)
    (if (and (time-elapsed? (-> self state-time) (seconds 0.017)) (cpad-hold? 1 x))
        (go-virtual test)
        )
    (when (not (logtest? (-> self flags) (mh-centipede-flag mc7)))
      (when (mh-centipede-method-38 self #f)
        (ja :group! mh-centipede-shoot-ja :num! min)
        (set! (-> self root trans quad) (-> self launch-position quad))
        (logior! (-> self flags) (mh-centipede-flag mc7))
        )
      )
    (ja :num! (loop! 0.125))
    (format *stdebug* "frame ~f~%" (ja-aframe-num 0))
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

(defmethod deactivate ((this mh-centipede))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this before-breach-part))
      (kill-particles (-> this before-breach-part))
      )
  (if (nonzero? (-> this breach-part))
      (kill-particles (-> this breach-part))
      )
  (if (nonzero? (-> this dirt-fall-part))
      (kill-particles (-> this dirt-fall-part))
      )
  (if (nonzero? (-> this impact-part))
      (kill-particles (-> this impact-part))
      )
  (if (nonzero? (-> this impact-dust-part))
      (kill-particles (-> this impact-dust-part))
      )
  (if (-> this rumble-sound-playing)
      (sound-stop (-> this rumble-sound))
      )
  (if (-> this ground-sound-playing)
      (sound-stop (-> this ground-sound))
      )
  (if (-> this legs-sound-playing)
      (sound-stop (-> this legs-sound))
      )
  ((method-of-type process-focusable deactivate) this)
  (none)
  )

;; WARN: Return type mismatch process-focusable vs mh-centipede.
(defmethod relocate ((this mh-centipede) (offset int))
  (if (nonzero? (-> this before-breach-part))
      (&+! (-> this before-breach-part) offset)
      )
  (if (nonzero? (-> this breach-part))
      (&+! (-> this breach-part) offset)
      )
  (if (nonzero? (-> this dirt-fall-part))
      (&+! (-> this dirt-fall-part) offset)
      )
  (if (nonzero? (-> this impact-part))
      (&+! (-> this impact-part) offset)
      )
  (if (nonzero? (-> this impact-dust-part))
      (&+! (-> this impact-dust-part) offset)
      )
  (the-as mh-centipede ((method-of-type process-focusable relocate) this offset))
  )

;; WARN: Return type mismatch int vs object.
(defmethod init-from-entity! ((this mh-centipede) (arg0 entity-actor))
  (local-vars (sv-16 res-tag))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) cshape-reaction-default)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s4-0 penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            flut-attack
            board
            mech-punch
            dark-punch
            dark-smack
            flut
            )
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 8) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 9))
      (set! (-> s3-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s3-0 prim-core collide-with) (collide-spec backgnd jak bot hit-by-others-list player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> s3-0 transform-index) 34)
      (set-vector! (-> s3-0 local-sphere) -3.6864002 0.0 -98.304 118246.195)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-14 transform-index) 5)
      (set-vector! (-> v1-14 local-sphere) 46.6944 -7090.1763 -374.784 21871.41)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-16 transform-index) 3)
      (set-vector! (-> v1-16 local-sphere) 1105.92 -20860.11 45.4656 34929.87)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-18 transform-index) 26)
      (set-vector! (-> v1-18 local-sphere) -1062.912 -10449.715 11.0592 37866.7)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-20 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-20 transform-index) 34)
      (set-vector! (-> v1-20 local-sphere) -366.1824 -3607.7568 3.6864002 34341.273)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-22 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-22 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-22 transform-index) 42)
      (set-vector! (-> v1-22 local-sphere) 889.65125 -8613.888 -138.8544 33735.477)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-24 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-24 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-24 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-24 transform-index) 50)
      (set-vector! (-> v1-24 local-sphere) -471.85922 -7038.5664 -77.4144 30895.719)
      )
    (let ((v1-26 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-26 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-26 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-26 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-26 transform-index) 58)
      (set-vector! (-> v1-26 local-sphere) -305.9712 -4273.766 4158.2593 24832.82)
      )
    (let ((v1-28 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
      (set! (-> v1-28 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-28 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-28 prim-core action) (collide-action solid deadly no-standon))
      (set! (-> v1-28 transform-index) 66)
      (set-vector! (-> v1-28 local-sphere) -1778.0737 -7170.0483 -785.20325 21710.44)
      )
    (set! (-> s4-0 nav-radius) 81920.0)
    (let ((v1-30 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-30 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-30 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mh-centipede" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (set-vector! (-> this root scale) 3.0 3.0 3.0 1.0)
  (set! (-> this root pause-adjust-distance) 409600.0)
  (let ((s4-2 (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 0)))
    (when s4-2
      (change-to s4-2 this)
      (set! (-> this root trans quad) (-> s4-2 bounds quad))
      (if (nonzero? (-> this nav))
          (closest-point-on-mesh (-> this nav) (-> this root trans) (-> this root trans) (the-as nav-poly #f))
          )
      )
    )
  (set! (-> this flags) (mh-centipede-flag))
  (set! (-> this incoming-attack-id) (the-as uint 0))
  (set! (-> this hit-points) 100.0)
  (set! (-> this before-breach-part) (create-launch-control (-> *part-group-id-table* 641) this))
  (set! (-> this breach-part) (create-launch-control (-> *part-group-id-table* 642) this))
  (set! (-> this dirt-fall-part) (create-launch-control (-> *part-group-id-table* 644) this))
  (set! (-> this impact-part) (create-launch-control (-> *part-group-id-table* 645) this))
  (set! (-> this impact-dust-part) (create-launch-control (-> *part-group-id-table* 646) this))
  (set! (-> this breach-anims)
        (new 'static 'boxed-array :type mh-centipede-anim
          (new 'static 'mh-centipede-anim
            :anim 5
            :speed 0.25
            :radius 63078.4
            :vulnerable-start 13.0
            :vulnerable-end 30.0
            )
          (new 'static 'mh-centipede-anim
            :anim 6
            :speed 0.15
            :radius 63488.0
            :vulnerable-start 10.0
            :vulnerable-end 30.0
            )
          )
        )
  (set! (-> this shoot-anims)
        (new 'static 'boxed-array :type mh-centipede-anim (new 'static 'mh-centipede-anim
                                                            :anim 7
                                                            :speed 0.25
                                                            :radius 73728.0
                                                            :vulnerable-start 13.0
                                                            :vulnerable-end 48.0
                                                            )
                                                          )
        )
  (set! (-> this current-anim) (-> this breach-anims 0))
  (set! (-> this appearance-order) 0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-74 (res-lump-data arg0 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
    (cond
      ((and v1-74 (nonzero? (-> sv-16 elt-count)))
       (let ((v1-75 (-> v1-74 0)))
         (set! (-> this appearance-order) (-> v1-75 length))
         (dotimes (a0-78 (-> v1-75 length))
           (when (= arg0 (-> v1-75 data a0-78 actor))
             0
             (goto cfg-14)
             )
           (+! (-> this appearance-order) -1)
           )
         )
       (format 0 "ERROR<gmj>: could not find self in actor-group for ~S~%" (-> this name))
       (label cfg-14)
       )
      (else
        (format 0 "ERROR<gmj>: could not find actor-group for ~S~%" (-> this name))
        )
      )
    )
  (set! (-> this rumble-sound) (new-sound-id))
  (set! (-> this rumble-sound-playing) #f)
  (set! (-> this ground-sound) (new-sound-id))
  (set! (-> this ground-sound-playing) #f)
  (set! (-> this legs-sound) (new-sound-id))
  (set! (-> this legs-sound-playing) #f)
  (set! (-> this draw shadow-ctrl) *mh-centipede-shadow-control*)
  (set! (-> this minimap) #f)
  (set! (-> this mm-handle) (the-as handle #f))
  (set-time! (-> this prev-time))
  (set! (-> this prev-target-position quad) (-> (target-pos 0) quad))
  (set! (-> this current-target-position quad) (-> (target-pos 0) quad))
  (set! (-> this effect-sphere) #f)
  (go (method-of-object this hidden))
  0
  )

(defmethod draw ((this hud-mh-centipede))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 452.0 (* 130.0 (-> this offset))))
    130
    )
  (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites)) 0 37)
  (set! (-> this sprites 4 scale-x) (* 0.164 (the float (-> this values 1 current))))
  (cond
    ((< 75 (-> this values 1 current))
     (set! (-> this sprites 4 color x) 0)
     (set! (-> this sprites 4 color y) 255)
     (set! (-> this sprites 4 color z) 0)
     0
     )
    ((< 50 (-> this values 1 current))
     (set! (-> this sprites 4 color x)
           (the int (lerp-scale 0.0 128.0 (the float (-> this values 1 current)) 75.0 50.0))
           )
     (set! (-> this sprites 4 color y)
           (the int (lerp-scale 255.0 128.0 (the float (-> this values 1 current)) 75.0 50.0))
           )
     (set! (-> this sprites 4 color z) 0)
     0
     )
    ((< 25 (-> this values 1 current))
     (set! (-> this sprites 4 color x)
           (the int (lerp-scale 128.0 255.0 (the float (-> this values 1 current)) 50.0 25.0))
           )
     (set! (-> this sprites 4 color y)
           (the int (lerp-scale 128.0 0.0 (the float (-> this values 1 current)) 50.0 25.0))
           )
     (set! (-> this sprites 4 color z) 0)
     0
     )
    (else
      (set! (-> this sprites 4 color x) 255)
      (set! (-> this sprites 4 color y) 0)
      (set! (-> this sprites 4 color z) 0)
      0
      )
    )
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites)) 1 36)
  (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites)) -59 36)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) -4 36)
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) 5 15)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values! ((this hud-mh-centipede))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  (cond
    ((handle->process (-> *game-info* health-bar-owner))
     (set! (-> this values 1 target) (the int (-> *game-info* health-bar)))
     )
    (else
      (set! (-> this values 1 target) 0)
      0
      )
    )
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-mh-centipede))
  (set! (-> this level) (level-get *level* 'nsta))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid) (the-as texture-id (get-texture hud-mhcentipede-01 lnstobb-minimap)))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 4 tid) (the-as texture-id (get-texture hud-mhcentipede-meter-01 lnstobb-minimap)))
  (set! (-> this sprites 4 scale-x) 1.0)
  (set! (-> this sprites 4 scale-y) 1.3)
  (set! (-> this sprites 4 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 3 tid) (the-as texture-id (get-texture hud-small-frame-01 lnstobb-minimap)))
  (set! (-> this sprites 3 scale-x) 1.0)
  (set! (-> this sprites 3 scale-y) 1.0)
  (set! (-> this sprites 3 flags) (hud-sprite-flags hsf0 hsf2))
  (set! (-> this sprites 2 tid) (the-as texture-id (get-texture hud-small-frame-01 lnstobb-minimap)))
  (set! (-> this sprites 2 scale-x) 1.0)
  (set! (-> this sprites 2 scale-y) 1.0)
  (set! (-> this sprites 2 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 1 tid) (the-as texture-id (get-texture hud-small-frame-02 lnstobb-minimap)))
  (set! (-> this sprites 1 scale-x) 14.0)
  (set! (-> this sprites 1 scale-y) 1.0)
  (set! (-> this sprites 1 flags) (hud-sprite-flags hsf2))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.6)
  (set! (-> this strings 0 flags) (font-flags shadow kerning large))
  0
  (none)
  )

(deftype task-manager-mh-centipede (task-manager)
  ((vehicle-handle           handle)
   (manager-entity           entity-actor)
   (check-timer              time-frame)
   (actor-group              (pointer actor-group))
   (actor-group-count        int32)
   (last-centipede-position  vector  :inline)
   (last-target-position     vector  :inline)
   )
  (:methods
    (init-actor-group! (_type_) none)
    )
  )


(defstate active (task-manager-mh-centipede)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self check-timer) 0)
    (set-setting! 'pilot-exit #f 0.0 0)
    (set-setting! 'pilot-death #t 0.0 0)
    )
  :exit (behavior ()
    (remove-setting! 'pilot-exit)
    (remove-setting! 'pilot-death)
    )
  :code (behavior ()
    (local-vars (v1-11 object))
    (while (begin
             (set! (-> self vehicle-handle) (-> *vehicle-info* handle-by-vehicle-type 14))
             (not (handle->process (-> self vehicle-handle)))
             )
      (format *stdebug* "mh-centipede task manager waiting for scorpion~%")
      (suspend)
      )
    (sig-rider-spawn (the-as vehicle (handle->process (-> self vehicle-handle))) #t)
    (until v1-11
      (suspend)
      (set! v1-11 (and *target* (= (send-event *target* 'query 'mode) 'pilot)))
      )
    (sleep-code)
    )
  )

(defmethod taskman-event-handler ((this task-manager-mh-centipede) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('centipede-died)
     (set! (-> this last-centipede-position quad) (-> (the-as vector (-> arg3 param 0)) quad))
     (let ((gp-0 (the-as object (-> this last-target-position))))
       (set! (-> (the-as vector gp-0) quad) (-> (target-pos 0) quad))
       gp-0
       )
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-mh-centipede))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (when (time-elapsed? (-> this check-timer) (seconds 0.1))
    (if (not (-> this manager-entity))
        (init-actor-group! this)
        )
    (let ((v1-9 0))
      (when (> (-> this actor-group-count) 0)
        (dotimes (a0-6 (-> this actor-group 0 length))
          (if (not (logtest? (-> this actor-group 0 data a0-6 actor extra perm status) (entity-perm-status subtask-complete))
                   )
              (+! v1-9 1)
              )
          )
        )
      (set! (-> *game-info* counter) (the float v1-9))
      (when (zero? v1-9)
        (let ((s5-0 (entity-by-name "rod-spawner-1")))
          (when s5-0
            (entity-birth-no-kill s5-0)
            (send-event
              (if s5-0
                  (-> s5-0 extra process)
                  )
              'appear
              (-> this last-centipede-position)
              (-> this last-target-position)
              )
            )
          )
        (send-event this 'complete)
        )
      )
    (set-time! (-> this check-timer))
    )
  (when (and *target* (not (logtest? (focus-status teleporting) (-> *target* focus-status))))
    (let* ((s5-1 (handle->process (-> this vehicle-handle)))
           (a0-22 (if (type? s5-1 process-focusable)
                      (the-as vehicle s5-1)
                      )
                  )
           )
      (if (and a0-22 (focus-test? a0-22 dead))
          (send-event this 'fail)
          )
      )
    )
  (none)
  )

(defmethod init-actor-group! ((this task-manager-mh-centipede))
  (local-vars (sv-16 res-tag))
  (let* ((s5-0 "mh-centipede-7")
         (a0-2 (entity-by-name s5-0))
         )
    (cond
      (a0-2
        (set! (-> this manager-entity) (the-as entity-actor a0-2))
        (set! sv-16 (new 'static 'res-tag))
        (let ((v1-1 (res-lump-data a0-2 'actor-groups pointer :tag-ptr (& sv-16))))
          (cond
            ((and v1-1 (nonzero? (-> sv-16 elt-count)))
             (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
             (set! (-> this actor-group) (the-as (pointer actor-group) v1-1))
             )
            (else
              (format 0 "ERROR: ~S: ~S entity missing actor-group!~%" (game-task->string (-> this node-info task)) s5-0)
              )
            )
          )
        (set! (-> this hud-counter)
              (ppointer->handle (process-spawn hud-mh-centipede :init hud-init-by-other :name "hud-mh-centipede" :to this))
              )
        )
      (else
        )
      )
    )
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-25 ((this task-manager-mh-centipede))
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod set-time-limit ((this task-manager-mh-centipede))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this vehicle-handle) (the-as handle #f))
  (set! (-> this manager-entity) #f)
  (set! (-> this actor-group-count) 0)
  (set-setting! 'extra-bank '((nest1 nest3) (nest2 nest4)) 0.0 0)
  (set-setting! 'pilot-exit #f 0.0 0)
  (set-setting! 'pilot-death #t 0.0 0)
  (set-setting! 'scarf 'abs 1.0 0)
  (set-setting! 'goggles 'abs 1.0 0)
  (set-setting! 'music 'nesthunt 0.0 0)
  (set-setting! 'cloth #f 0.0 0)
  (set-setting! 'armor #f 0.0 0)
  (reset-nest-hunt-speeches 1.0)
  (none)
  )

(deftype task-manager-nstb-crystal (task-manager)
  ((vehicle-handle  handle)
   )
  )


(defstate active (task-manager-nstb-crystal)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set-setting! 'pilot-exit #f 0.0 0)
    (set-setting! 'pilot-death #t 0.0 0)
    )
  :exit (behavior ()
    (remove-setting! 'pilot-exit)
    (remove-setting! 'pilot-death)
    )
  :code (behavior ()
    (local-vars (v1-11 object))
    (while (begin
             (set! (-> self vehicle-handle) (-> *vehicle-info* handle-by-vehicle-type 14))
             (not (handle->process (-> self vehicle-handle)))
             )
      (format *stdebug* "nstb-crystal task manager waiting for scorpion~%")
      (suspend)
      )
    (sig-rider-spawn (the-as vehicle (handle->process (-> self vehicle-handle))) #t)
    (until v1-11
      (suspend)
      (set! v1-11 (and *target* (= (send-event *target* 'query 'mode) 'pilot)))
      )
    (sleep-code)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-nstb-crystal))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (when (and *target* (not (logtest? (focus-status teleporting) (-> *target* focus-status))))
    (let* ((s5-0 (handle->process (-> this vehicle-handle)))
           (a0-8 (if (type? s5-0 process-focusable)
                     (the-as vehicle s5-0)
                     )
                 )
           )
      (if (and a0-8 (focus-test? a0-8 dead))
          (send-event this 'fail)
          )
      )
    )
  (none)
  )

;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-nstb-crystal))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this vehicle-handle) (the-as handle #f))
  (set-setting! 'extra-bank '((nest1 nest3) (nest2 nest4)) 0.0 0)
  (set-setting! 'pilot-exit #f 0.0 0)
  (set-setting! 'pilot-death #t 0.0 0)
  (set-setting! 'scarf 'abs 1.0 0)
  (set-setting! 'goggles 'abs 1.0 0)
  (none)
  )
