;;-*-Lisp-*-
(in-package goal)

;; name: protect-script.gc
;; name in dgo: protect-script
;; dgos: LCTYPROT

;; +++gunship-command
(defenum gunship-command
  :type uint8
  (spawn)
  (wait)
  (missiles)
  (script-set-jump)
  (script-jump)
  (no-op)
  (other)
  )
;; ---gunship-command


;; +++gunship-cmd-spawn-type
(defenum gunship-cmd-spawn-type
  :type uint16
  :copy-entries city-target-type
  )
;; ---gunship-cmd-spawn-type


;; +++gunship-cmd-wait-type
(defenum gunship-cmd-wait-type
  :type uint8
  (time)
  (total)
  )
;; ---gunship-cmd-wait-type


;; DECOMP BEGINS

(deftype gunship-cmd (structure)
  ((command         gunship-command)
   (spawn-type      gunship-cmd-spawn-type)
   (count           int8)
   (wait-type       gunship-cmd-wait-type  :overlay-at spawn-type)
   (difficulty      float)
   (wait-time       time-frame)
   (timeout-period  time-frame)
   )
  :pack-me
  )


(deftype gunship-cmd-context (structure)
  ((start-time         time-frame)
   (current-command    gunship-cmd  :inline)
   (script             pair)
   (script-jump-point  basic)
   )
  )


;; WARN: Return type mismatch int vs object.
(defun parse-protect-command ((arg0 gunship-cmd-context))
  (let ((s5-0 (-> arg0 script car))
        (gp-0 (-> arg0 current-command))
        )
    (case (ref s5-0 0)
      (('spawn)
       (set! (-> gp-0 command) (gunship-command spawn))
       0
       )
      (('wait)
       (set! (-> gp-0 command) (gunship-command wait))
       )
      (('missiles)
       (set! (-> gp-0 command) (gunship-command missiles))
       )
      (('script-set-jump)
       (set! (-> gp-0 command) (gunship-command script-set-jump))
       (return (the-as object 0))
       )
      (('no-op)
       (set! (-> gp-0 command) (gunship-command no-op))
       (return (the-as object 0))
       )
      (('script-jump)
       (set! (-> gp-0 command) (gunship-command script-jump))
       (set! (-> gp-0 count) (the-as int (/ (the-as int (ref s5-0 1)) 8)))
       (return (the-as object 0))
       )
      (else
        (set! (-> gp-0 command) (gunship-command other))
        (return (the-as object 0))
        )
      )
    (case (-> gp-0 command)
      (((gunship-command spawn))
       (let ((a0-11 (ref s5-0 1)))
         (set! (-> gp-0 spawn-type) (the-as gunship-cmd-spawn-type (symbol->city-target-type (the-as symbol a0-11))))
         )
       (let ((a0-12 s5-0))
         (if (>= ((method-of-type (rtype-of a0-12) length) a0-12) 3)
             (set! (-> gp-0 count) (the-as int (/ (the-as int (ref s5-0 2)) 8)))
             (set! (-> gp-0 count) 1)
             )
         )
       )
      (((gunship-command missiles))
       (set! (-> gp-0 count) (max 0 (min 16 (the-as int (/ (the-as int (ref s5-0 1)) 8)))))
       (set! (-> gp-0 difficulty) 1.0)
       (let ((a0-17 s5-0))
         (if (>= ((method-of-type (rtype-of a0-17) length) a0-17) 3)
             (set! (-> gp-0 difficulty) (command-get-float (ref s5-0 2) 0.0))
             )
         )
       )
      (((gunship-command wait))
       (case (ref s5-0 1)
         (('time)
          (set! (-> gp-0 wait-type) (gunship-cmd-wait-type time))
          (let ((f0-2 (command-get-float (ref s5-0 2) 0.0)))
            (set! (-> gp-0 wait-time) (the-as time-frame (the int (* 300.0 f0-2))))
            )
          )
         (('total)
          (set! (-> gp-0 wait-type) (gunship-cmd-wait-type total))
          (set! (-> gp-0 count) (the-as int (/ (the-as int (ref s5-0 2)) 8)))
          )
         )
       )
      )
    (let* ((a0-28 s5-0)
           (s3-2 ((method-of-type (rtype-of a0-28) length) a0-28))
           (s4-4 (ref s5-0 (+ s3-2 -2)))
           (a0-31 (ref s5-0 (+ s3-2 -1)))
           (v0-1 6000)
           )
      (if (= s4-4 'timeout)
          (set! v0-1 (the int (* 300.0 (command-get-float a0-31 0.0))))
          )
      (set! (-> gp-0 timeout-period) (the-as time-frame v0-1))
      v0-1
      )
    )
  )

(define *gunship-0-script* '((no-op)
                             (spawn roboguard 1)
                             (missiles 16)
                             (spawn turret 1)
                             (wait total 0)
                             (missiles 10 (new 'static 'bfloat :data 0.5))
                             (spawn roboguard 1)
                             (missiles 16)
                             (wait time (new 'static 'bfloat :data 5.0))
                             (script-set-jump)
                             (spawn roboguard 2)
                             (wait time (new 'static 'bfloat :data 5.0))
                             (missiles 16)
                             (spawn spydroid 5)
                             (wait time (new 'static 'bfloat :data 2.0))
                             (missiles 8)
                             (wait time (new 'static 'bfloat :data 3.0))
                             (spawn spydroid 2)
                             (wait time (new 'static 'bfloat :data 5.0))
                             (spawn roboguard 1)
                             (missiles 16)
                             (wait time (new 'static 'bfloat :data 10.0))
                             (script-jump 1)
                             (end)
                             )
        )
