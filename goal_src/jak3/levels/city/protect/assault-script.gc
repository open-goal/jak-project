;;-*-Lisp-*-
(in-package goal)

;; name: assault-script.gc
;; name in dgo: assault-script
;; dgos: LCTYPALT

;; +++assault-cmd-speech-type
(defenum assault-cmd-speech-type
  :type uint64
  (instructions)
  (jak-hit)
  (room-complete)
  (room-start)
  (encouragement)
  (type5)
  (torn-watch-out)
  (protect-civilians)
  (grab-pickup)
  (torn-give-help)
  (torn-finish)
  (guard-hello)
  (guard-bombbot)
  )
;; ---assault-cmd-speech-type


;; +++assault-cmd-faction-type
(defenum assault-cmd-faction-type
  :type uint8
  (none)
  (mh)
  (ff)
  (kg)
  )
;; ---assault-cmd-faction-type


;; +++assault-cmd-wait-type
(defenum assault-cmd-wait-type
  :type uint8
  (spawn-delay)
  (cmd1)
  (cmd2)
  )
;; ---assault-cmd-wait-type


;; +++assault-cmd-spawn-type
(defenum assault-cmd-spawn-type
  :type uint16
  (cmd0)
  (cmd1)
  (cmd2)
  (cmd3)
  (cmd4)
  (cmd5)
  (cmd6)
  (cmd7)
  (cmd8)
  (cmd9)
  (cmd10)
  (cmd11)
  (cmd12)
  )
;; ---assault-cmd-spawn-type


;; +++assault-cmd
(defenum assault-cmd
  :type uint8
  (spawn)
  (wait)
  (advance)
  (pickup)
  (torn)
  (final-bombbot)
  (load-continue)
  (save-continue)
  (speech)
  (queue)
  (other)
  )
;; ---assault-cmd


;; DECOMP BEGINS

(define *port-assault-speech*
  (new 'static 'boxed-array :type speech-info
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x1 :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x2 :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x3 :probability 1.0)
        (new 'static 'speech-instance :speech #x4 :probability 1.0)
        (new 'static 'speech-instance :speech #x5 :probability 1.0)
        (new 'static 'speech-instance :speech #x6 :probability 1.0)
        )
      :flags (speech-info-flag si5)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x7 :probability 1.0)
        (new 'static 'speech-instance :speech #x8 :probability 1.0)
        (new 'static 'speech-instance :speech #x9 :probability 1.0)
        )
      :flags (speech-info-flag si5)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #xa :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #xb :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #xc :probability 1.0)
        (new 'static 'speech-instance :speech #xb :probability 1.0)
        )
      :flags (speech-info-flag si5)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #xd :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #xe :probability 1.0)
        (new 'static 'speech-instance :speech #xf :probability 1.0)
        (new 'static 'speech-instance :speech #x10 :probability 1.0)
        (new 'static 'speech-instance :speech #x11 :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x12 :probability 1.0))
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x145 :probability 1.0))
      :flags (speech-info-flag si8)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x13 :probability 1.0))
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x15 :probability 1.0))
      )
    )
  )

(deftype assault-spawn-cmd (structure)
  ((spawn-delay      time-frame)
   (command          assault-cmd)
   (spawn-type       assault-cmd-spawn-type)
   (count            int8)
   (spawner-index    int8)
   (wait-type        assault-cmd-wait-type     :overlay-at spawn-type)
   (faction-type     assault-cmd-faction-type  :overlay-at spawner-index)
   (wait-time        time-frame                :overlay-at spawn-delay)
   (msg              symbol)
   (path-id          int32)
   (event0           int32)
   (event1           int32)
   (event2           int32)
   (speech-type      assault-cmd-speech-type)
   (gun-pickup-type  int32)
   )
  )


(deftype room-powerup-percentage (structure)
  ((avg-spawn-rate  uint64)
   (percentages     float  51)
   (red2            float  :overlay-at (-> percentages 27))
   (red3            float  :overlay-at (-> percentages 28))
   (yellow2         float  :overlay-at (-> percentages 30))
   (yellow3         float  :overlay-at (-> percentages 31))
   (blue1           float  :overlay-at (-> percentages 32))
   (blue2           float  :overlay-at (-> percentages 33))
   (blue3           float  :overlay-at (-> percentages 34))
   (darkjak         float  :overlay-at (-> percentages 7))
   (lightjak        float  :overlay-at (-> percentages 14))
   (health          float  :overlay-at (-> percentages 20))
   )
  )


(deftype assault-cmd-context (structure)
  ((start-time       time-frame)
   (state-time       time-frame)
   (current-command  assault-spawn-cmd  :inline)
   (script           pair)
   )
  )


(define *assault-object-count*
  (new 'static 'boxed-array :type int32 :length 15 :allocated-length 19 0 5 0 8 0 0 6 12 0 6 0 15 0 1 0)
  )

(define *assault-fade-dist* (new 'static 'boxed-array :type float :length 14 :allocated-length 19
                              0.0
                              0.0
                              0.0
                              409600.0
                              409600.0
                              409600.0
                              368640.0
                              245760.0
                              245760.0
                              409600.0
                              245760.0
                              245760.0
                              491520.0
                              0.0
                              )
        )

(define *assault-graph-classification*
  (new 'static 'boxed-array :type int32 :length 16 :allocated-length 19 -1 0 0 0 0 0 1 1 1 2 3 2 2 -1 -1 -1)
  )

(define *assault-faction-lookup* (new 'static 'boxed-array :type uint8 :length 15 :allocated-length 19
                                   #x0
                                   #x2
                                   #x2
                                   #x2
                                   #x2
                                   #x2
                                   #x1
                                   #x1
                                   #x1
                                   #x3
                                   #x3
                                   #x3
                                   #x3
                                   #x3
                                   #x0
                                   )
        )

(define *assault-guard-count* (new 'static 'boxed-array :type int32 0 2 0 0 0))

(define *assault-citizen-count* (new 'static 'boxed-array :type int32 0 0 3 0 0))

;; WARN: Return type mismatch int vs assault-target-type.
(defun symbol->assault-target-type ((arg0 symbol))
  (let ((v1-0 arg0))
    (the-as assault-target-type (cond
                                  ((= v1-0 'roboguard)
                                   (the-as assault-target-type (assault-target-type roboguard))
                                   )
                                  ((= v1-0 'roboguard-giant)
                                   (the-as assault-target-type (assault-target-type roboguard-giant))
                                   )
                                  ((= v1-0 'guard-rifle)
                                   (the-as assault-target-type (assault-target-type guard-rifle))
                                   )
                                  ((= v1-0 'guard-tazer)
                                   (the-as assault-target-type (assault-target-type guard-tazer))
                                   )
                                  ((= v1-0 'guard-grenade)
                                   (the-as assault-target-type (assault-target-type guard-grenade))
                                   )
                                  ((= v1-0 'turret)
                                   (the-as assault-target-type (assault-target-type turret))
                                   )
                                  ((= v1-0 'spydroid)
                                   (the-as assault-target-type (assault-target-type other))
                                   )
                                  ((= v1-0 'flitter)
                                   (the-as assault-target-type (assault-target-type flitter))
                                   )
                                  ((= v1-0 'bombbot)
                                   (the-as assault-target-type (assault-target-type assault-bombbot))
                                   )
                                  ((= v1-0 'grunt)
                                   (the-as assault-target-type (assault-target-type assault-grunt))
                                   )
                                  (else
                                    (the-as assault-target-type (assault-target-type other))
                                    )
                                  )
            )
    )
  )

;; WARN: Return type mismatch int vs assault-cmd-speech-type.
(defun symbol->speech-type ((arg0 symbol))
  (let ((v1-0 arg0))
    (the-as
      assault-cmd-speech-type
      (cond
        ((= v1-0 'instructions)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type instructions))
         )
        ((= v1-0 'jak-hit)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type jak-hit))
         )
        ((= v1-0 'room-complete)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type room-complete))
         )
        ((= v1-0 'room-start)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type room-start))
         )
        ((= v1-0 'encouragement)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type encouragement))
         )
        ((= v1-0 'torn-watch-out)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type torn-watch-out))
         )
        ((= v1-0 'guard-hello)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type guard-hello))
         )
        ((= v1-0 'guard-bombbot)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type guard-bombbot))
         )
        ((= v1-0 'protect-civilians)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type protect-civilians))
         )
        ((= v1-0 'grab-pickup)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type grab-pickup))
         )
        ((= v1-0 'torn-give-help)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type torn-give-help))
         )
        ((= v1-0 'torn-finish)
         (the-as assault-cmd-speech-type (assault-cmd-speech-type torn-finish))
         )
        (else
          (the-as assault-cmd-speech-type (assault-cmd-speech-type encouragement))
          )
        )
      )
    )
  )

;; WARN: Return type mismatch int vs assault-cmd-faction-type.
(defun symbol->faction-type ((arg0 symbol))
  (let ((v1-0 arg0))
    (the-as assault-cmd-faction-type (cond
                                       ((= v1-0 'kg)
                                        (the-as assault-cmd-faction-type (assault-cmd-faction-type kg))
                                        )
                                       ((= v1-0 'ff)
                                        (the-as assault-cmd-faction-type (assault-cmd-faction-type ff))
                                        )
                                       ((= v1-0 'mh)
                                        (the-as assault-cmd-faction-type (assault-cmd-faction-type mh))
                                        )
                                       (else
                                         (the-as assault-cmd-faction-type (assault-cmd-faction-type kg))
                                         )
                                       )
            )
    )
  )

;; WARN: Return type mismatch int vs pickup-type.
(defun symbol->gun-pickup-type ((arg0 symbol))
  (let ((v1-0 arg0))
    (the-as pickup-type (cond
                          ((= v1-0 'gun-red-1)
                           (the-as pickup-type (pickup-type gun-red-1))
                           )
                          ((= v1-0 'gun-red-2)
                           (the-as pickup-type (pickup-type gun-red-2))
                           )
                          ((= v1-0 'gun-red-3)
                           (the-as pickup-type (pickup-type gun-red-3))
                           )
                          ((= v1-0 'gun-yellow-1)
                           (the-as pickup-type (pickup-type gun-yellow-1))
                           )
                          ((= v1-0 'gun-yellow-2)
                           (the-as pickup-type (pickup-type gun-yellow-2))
                           )
                          ((= v1-0 'gun-yellow-3)
                           (the-as pickup-type (pickup-type gun-yellow-3))
                           )
                          ((= v1-0 'gun-blue-1)
                           (the-as pickup-type (pickup-type gun-blue-1))
                           )
                          ((= v1-0 'gun-blue-2)
                           (the-as pickup-type (pickup-type gun-blue-2))
                           )
                          ((= v1-0 'gun-blue-3)
                           (the-as pickup-type (pickup-type gun-blue-3))
                           )
                          ((= v1-0 'gun-dark-1)
                           (the-as pickup-type (pickup-type gun-dark-1))
                           )
                          ((= v1-0 'gun-dark-2)
                           (the-as pickup-type (pickup-type gun-dark-2))
                           )
                          ((= v1-0 'gun-dark-3)
                           (the-as pickup-type (pickup-type gun-dark-3))
                           )
                          ((= v1-0 'health)
                           (the-as pickup-type (pickup-type health))
                           )
                          ((= v1-0 'darkjak)
                           (the-as pickup-type (pickup-type eco-pill-dark))
                           )
                          (else
                            (the-as pickup-type (pickup-type none))
                            )
                          )
            )
    )
  )

;; WARN: Return type mismatch int vs object.
(defun parse-assault-command ((arg0 pair) (arg1 assault-spawn-cmd))
  (local-vars (v0-11 int))
  (case (ref arg0 0)
    (('spawn)
     (set! (-> arg1 command) (assault-cmd spawn))
     0
     )
    (('queue)
     (set! (-> arg1 command) (assault-cmd queue))
     )
    (('wait)
     (set! (-> arg1 command) (assault-cmd wait))
     )
    (('advance)
     (set! (-> arg1 command) (assault-cmd advance))
     )
    (('pickup)
     (set! (-> arg1 command) (assault-cmd pickup))
     )
    (('torn)
     (set! (-> arg1 command) (assault-cmd torn))
     (set! (-> arg1 msg) (the-as symbol (ref arg0 1)))
     (set! (-> arg1 event0) 0)
     (set! (-> arg1 event1) 1)
     (set! (-> arg1 event2) 2)
     (let ((a0-9 arg0))
       (when (>= ((method-of-type (rtype-of a0-9) length) a0-9) 3)
         (set! (-> arg1 event0) (command-get-int (ref arg0 2) 0))
         (let ((a0-12 arg0))
           (when (>= ((method-of-type (rtype-of a0-12) length) a0-12) 4)
             (set! (-> arg1 event1) (command-get-int (ref arg0 3) 0))
             (let ((a0-15 arg0))
               (if (>= ((method-of-type (rtype-of a0-15) length) a0-15) 5)
                   (set! (-> arg1 event2) (command-get-int (ref arg0 4) 0))
                   )
               )
             )
           )
         )
       )
     (return (the-as object 0))
     )
    (('final-bombbot)
     (set! (-> arg1 command) (assault-cmd final-bombbot))
     )
    (('load-continue)
     (set! (-> arg1 command) (assault-cmd load-continue))
     )
    (('save-continue)
     (set! (-> arg1 command) (assault-cmd save-continue))
     )
    (('speech)
     (let* ((a0-23 (ref arg0 1))
            (s2-0 (symbol->speech-type (the-as symbol a0-23)))
            )
       (speech-play *port-assault-speech* (the-as int s2-0) *assault-speech-list* (target-pos 0))
       )
     (set! (-> arg1 command) (assault-cmd speech))
     )
    (else
      (set! (-> arg1 command) (assault-cmd other))
      (return (the-as object 0))
      )
    )
  (case (-> arg1 command)
    (((assault-cmd spawn))
     (let ((a0-28 (ref arg0 1)))
       (set! (-> arg1 spawn-type)
             (the-as assault-cmd-spawn-type (symbol->assault-target-type (the-as symbol a0-28)))
             )
       )
     (let ((a0-29 arg0))
       (cond
         ((>= ((method-of-type (rtype-of a0-29) length) a0-29) 3)
          (set! (-> arg1 count) (the-as int (/ (the-as int (ref arg0 2)) 8)))
          (let ((a0-31 arg0))
            (cond
              ((>= ((method-of-type (rtype-of a0-31) length) a0-31) 4)
               (set! (-> arg1 spawner-index) (the-as int (/ (the-as int (ref arg0 3)) 8)))
               (let ((a0-33 arg0))
                 (cond
                   ((>= ((method-of-type (rtype-of a0-33) length) a0-33) 5)
                    (let ((f0-0 (command-get-float (ref arg0 4) 0.0)))
                      (set! v0-11 (the int (* 300.0 f0-0)))
                      )
                    (set! (-> arg1 spawn-delay) (the-as time-frame v0-11))
                    )
                   (else
                     (set! v0-11 150)
                     (set! (-> arg1 spawn-delay) (the-as time-frame v0-11))
                     )
                   )
                 )
               )
              (else
                (set! v0-11 -1)
                (set! (-> arg1 spawner-index) v0-11)
                )
              )
            )
          )
         (else
           (set! v0-11 1)
           (set! (-> arg1 count) v0-11)
           )
         )
       )
     v0-11
     )
    (((assault-cmd pickup))
     (let ((a0-38 arg0))
       (cond
         ((>= ((method-of-type (rtype-of a0-38) length) a0-38) 2)
          (let ((a0-40 (ref arg0 1)))
            (set! v0-11 (the-as int (symbol->gun-pickup-type (the-as symbol a0-40))))
            )
          (set! (-> arg1 gun-pickup-type) v0-11)
          v0-11
          )
         (else
           (set! (-> arg1 gun-pickup-type) 0)
           0
           )
         )
       )
     )
    (((assault-cmd wait))
     (let ((s4-5 (ref arg0 1)))
       (case s4-5
         (('time)
          (set! (-> arg1 wait-type) (assault-cmd-wait-type spawn-delay))
          (let ((f0-3 (command-get-float (ref arg0 2) 0.0)))
            (set! v0-11 (the int (* 300.0 f0-3)))
            )
          (set! (-> arg1 spawn-delay) (the-as time-frame v0-11))
          )
         (('total)
          (format 0 "Yes~%")
          (set! (-> arg1 wait-type) (assault-cmd-wait-type cmd2))
          (set! v0-11 (the-as int (/ (the-as int (ref arg0 2)) 8)))
          (set! (-> arg1 count) v0-11)
          )
         (else
           (format 0 "No~%")
           (set! (-> arg1 wait-type) (assault-cmd-wait-type cmd1))
           (set! (-> arg1 spawner-index) (the-as int (symbol->faction-type (the-as symbol s4-5))))
           (set! v0-11 (the-as int (/ (the-as int (ref arg0 2)) 8)))
           (set! (-> arg1 count) v0-11)
           )
         )
       )
     v0-11
     )
    )
  )

(define *assault-bombbot-paths*
  (new 'static 'boxed-array :type bombbot-path
    (new 'static 'bombbot-path
      :node-count #xe
      :node (new 'static 'inline-array bombbot-node 14
        (new 'static 'bombbot-node)
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1664327.6 :y 31580.16 :z 5487821.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1695375.4 :y 31580.16 :z 5511086.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1728061.5 :y 31580.16 :z 5529641.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1762836.5 :y 31580.16 :z 5548933.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1797898.2 :y 31662.08 :z 5559378.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1814814.8 :y 31662.08 :z 5542666.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1837875.2 :y 31703.04 :z 5514731.5))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1817108.5 :y 31703.04 :z 5498347.5))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1788928.0 :y 31621.12 :z 5476393.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1752514.5 :y 31621.12 :z 5443789.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1723473.9 :y 34119.68 :z 5425971.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1699717.1 :y 33751.04 :z 5425152.0))
        (new 'static 'bombbot-node :position (new 'static 'vector :x 1679523.9 :y 31621.12 :z 5452308.5))
        )
      )
    )
  )

(define *assault-scripts* (new 'static 'boxed-array :type pair :length 0 :allocated-length 5))

(set! (-> *assault-scripts* length) (-> *assault-scripts* allocated-length))

(define *room-goal* (new 'static 'boxed-array :type uint8 #x0 #x0 #x2 #x0 #x0))

(define *room-powerups*
  (new 'static 'boxed-array :type room-powerup-percentage
    (new 'static 'room-powerup-percentage :avg-spawn-rate #x1194 :percentages (new 'static 'array float 51
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                1.0
                                                                                1.0
                                                                                1.1
                                                                                0.7
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                )
                                          )
    (new 'static 'room-powerup-percentage :avg-spawn-rate #x1d4c :percentages (new 'static 'array float 51
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.1
                                                                                0.0
                                                                                0.0
                                                                                0.1
                                                                                0.1
                                                                                1.5
                                                                                1.1
                                                                                0.7
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                )
                                          )
    (new 'static 'room-powerup-percentage :avg-spawn-rate #x1194 :percentages (new 'static 'array float 51
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.5
                                                                                0.0
                                                                                0.8
                                                                                0.5
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                )
                                          )
    (new 'static 'room-powerup-percentage :avg-spawn-rate #x1770 :percentages (new 'static 'array float 51
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.1
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                )
                                          )
    (new 'static 'room-powerup-percentage :avg-spawn-rate #x1194 :percentages (new 'static 'array float 51
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                0.0
                                                                                0.0
                                                                                1.0
                                                                                1.0
                                                                                1.0
                                                                                1.1
                                                                                0.7
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                0.0
                                                                                )
                                          )
    )
  )

(define *room0-script* '((speech instructions)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (load-continue)
                         (spawn spydroid 3 0)
                         (spawn spydroid 3 1)
                         (wait total 4)
                         (spawn spydroid 5 0)
                         (wait total 2)
                         (spawn roboguard 1)
                         (wait time (new 'static 'bfloat :data 1.5))
                         (spawn spydroid 3 0)
                         (spawn spydroid 3 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (wait total 1)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (spawn guard-tazer 1)
                         (spawn guard-tazer 1)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 2 0)
                         (spawn spydroid 2 1)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (spawn spydroid 3 0)
                         (spawn spydroid 3 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (wait total 1)
                         (pickup gun-blue-1)
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (wait total 0)
                         (wait time (new 'static 'bfloat :data 0.2))
                         (spawn spydroid 4 0)
                         (spawn spydroid 4 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn spydroid 2 0)
                         (spawn spydroid 2 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn spydroid 2 0)
                         (spawn spydroid 2 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn spydroid 2 0)
                         (spawn spydroid 2 1)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (wait total 0)
                         (speech room-complete)
                         (queue)
                         (wait time (new 'static 'bfloat :data 2.5))
                         (advance)
                         (end)
                         )
        )

(define *room1-script* '((save-continue)
                         (speech guard-hello)
                         (wait time (new 'static 'bfloat :data 1.5))
                         (spawn grunt 1 1)
                         (spawn grunt 1 2)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn flitter 4 0)
                         (wait total 4)
                         (spawn flitter 2 1)
                         (spawn flitter 2 2)
                         (spawn grunt 2)
                         (spawn grunt 2)
                         (wait total 3)
                         (spawn flitter 3 1)
                         (spawn flitter 3 0)
                         (spawn flitter 3 2)
                         (wait total 8)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (spawn grunt 3)
                         (wait total 4)
                         (spawn flitter 2 0)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (wait total 1)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (spawn flitter 1 2)
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (spawn flitter 1 2)
                         (spawn grunt 1 1)
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (spawn flitter 1 2)
                         (spawn grunt 1 1)
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (spawn flitter 1 2)
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (spawn flitter 1 2)
                         (spawn flitter 1 0)
                         (spawn flitter 1 1)
                         (wait total 2)
                         (spawn grunt 1 0)
                         (spawn grunt 1 1)
                         (spawn grunt 1 2)
                         (spawn flitter 3 0)
                         (spawn flitter 3 1)
                         (spawn flitter 3 2)
                         (wait total 0)
                         (speech room-complete)
                         (queue)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (advance)
                         (end)
                         )
        )

(define *room2-script* '((save-continue)
                         (speech room-start)
                         (speech protect-civilians)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (spawn spydroid 4)
                         (spawn spydroid 4)
                         (spawn spydroid 4)
                         (wait total 4)
                         (spawn flitter 4)
                         (spawn flitter 4)
                         (spawn flitter 4)
                         (wait total 6)
                         (spawn roboguard 1)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (wait total 4)
                         (spawn spydroid 2)
                         (spawn spydroid 2)
                         (spawn spydroid 2)
                         (wait total 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (wait total 3)
                         (spawn spydroid 4)
                         (spawn spydroid 4)
                         (spawn spydroid 4)
                         (spawn flitter 3)
                         (spawn flitter 3)
                         (spawn flitter 3)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (pickup gun-red-2)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (spawn roboguard 1)
                         (spawn roboguard 1)
                         (spawn grunt 1)
                         (spawn grunt 1)
                         (wait total 0)
                         (spawn flitter 10 0 (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 10 1 (new 'static 'bfloat :data 1.0))
                         (wait total 4)
                         (spawn grunt 1 2)
                         (spawn roboguard 1 2)
                         (wait time (new 'static 'bfloat :data 2.5))
                         (spawn flitter 5 0 (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 5 1 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 1.5))
                         (spawn grunt 1 2)
                         (spawn roboguard 1 2)
                         (wait total 4)
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (spawn roboguard 1 2)
                         (spawn roboguard 1 0)
                         (spawn roboguard 1 1)
                         (spawn roboguard 1 2)
                         (wait total 0)
                         (speech room-complete)
                         (queue)
                         (wait time (new 'static 'bfloat :data 2.0))
                         (advance)
                         (end)
                         )
        )

(define *room3-script* '((save-continue)
                         (speech room-start)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 4 0 (new 'static 'bfloat :data 0.3))
                         (wait time (new 'static 'bfloat :data 1.0))
                         (spawn bombbot 1 0)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (spawn guard-rifle 1 1)
                         (wait time (new 'static 'bfloat :data 12.0))
                         (spawn spydroid 3 0 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 12.0))
                         (spawn spydroid 3 0 (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 1 1 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 10.0))
                         (spawn spydroid 3 0 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 10.0))
                         (spawn spydroid 2 0 (new 'static 'bfloat :data 1.0))
                         (spawn spydroid 2 1 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 7.0))
                         (spawn guard-rifle 1 1)
                         (spawn spydroid 3 0)
                         (wait kg 0)
                         (pickup health)
                         (wait time (new 'static 'bfloat :data 1.0))
                         (final-bombbot)
                         (spawn bombbot 1 0)
                         (wait time (new 'static 'bfloat :data 1.5))
                         (speech torn-give-help)
                         (wait time (new 'static 'bfloat :data 1.5))
                         (spawn guard-rifle 3 1 (new 'static 'bfloat :data 1.0))
                         (spawn guard-rifle 3 0 (new 'static 'bfloat :data 1.0))
                         (wait time (new 'static 'bfloat :data 1.5))
                         (speech guard-bombbot)
                         (wait time (new 'static 'bfloat :data 1.5))
                         (pickup health)
                         (spawn guard-rifle 127 1 (new 'static 'bfloat :data 2.0))
                         (spawn guard-rifle 127 0 (new 'static 'bfloat :data 2.0))
                         (wait time (new 'static 'bfloat :data 3.0))
                         (pickup health)
                         (wait time (new 'static 'bfloat :data 3.0))
                         (pickup health)
                         (wait kg 0)
                         (speech torn-finish)
                         (wait total 0)
                         (end)
                         (advance)
                         (end)
                         )
        )

(define *room4-script* '((wait time (new 'static 'bfloat :data 1.0))
                         (speech torn-watch-out)
                         (torn spot-assignment 15)
                         (torn free-to-move)
                         (wait time (new 'static 'bfloat :data 0.5))
                         (torn spot-assignment 10)
                         (spawn spydroid 3 0)
                         (wait total 1)
                         (spawn spydroid 1 1)
                         (spawn spydroid 1 2)
                         (wait total 1)
                         (spawn spydroid 1 3)
                         (spawn spydroid 1 4)
                         (spawn spydroid 1 5)
                         (spawn spydroid 1 6)
                         (wait total 2)
                         (torn spot-assignment 4)
                         (spawn roboguard 1 0)
                         (spawn spydroid 3 1)
                         (spawn spydroid 3 2)
                         (wait total 1)
                         (spawn flitter 1 4)
                         (spawn flitter 1 6)
                         (spawn grunt 1 3)
                         (spawn grunt 1 5)
                         (wait total 0)
                         (torn spot-assignment 15)
                         (spawn roboguard 1 3)
                         (spawn roboguard 1 0)
                         (spawn grunt 1 1)
                         (spawn grunt 1 2)
                         (wait total 0)
                         (spawn roboguard 1 3)
                         (spawn roboguard 1 4)
                         (spawn roboguard 1 5)
                         (wait total 1)
                         (spawn grunt 1 0)
                         (wait total 0)
                         (wait time (new 'static 'bfloat :data 10.0))
                         (end)
                         )
        )

(set! (-> *assault-scripts* 0) *room0-script*)

(set! (-> *assault-scripts* 1) *room1-script*)

(set! (-> *assault-scripts* 2) *room2-script*)

(set! (-> *assault-scripts* 3) *room3-script*)

(set! (-> *assault-scripts* 4) *room4-script*)
