;;-*-Lisp-*-
(in-package goal)

;; name: guard-rifle.gc
;; name in dgo: guard-rifle
;; dgos: CWI

;; DECOMP BEGINS

(defmethod crimson-guard-method-255 ((this crimson-guard))
  (let ((s5-0 (-> this target-pos-predict-miss))
        (s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 14)))
        (s3-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 15)))
        )
    (vector-normalize! (vector-! (new 'stack-no-clear 'vector) s5-0 s3-0) 1.0)
    (new 'stack-no-clear 'vector)
    (spawn-guard-projectile this s3-0 s5-0 819200.0 s4-0)
    )
  (crimson-guard-method-285 this -1)
  0
  (none)
  )

(defmethod crimson-guard-method-257 ((this crimson-guard))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> this target-pos-predict-miss quad))
    (let* ((s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 14)))
           (a0-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 15)))
           (s3-1 (vector-! (new 'stack-no-clear 'vector) s5-0 a0-3))
           )
      (vector-normalize! s3-1 409600.0)
      (and (crimson-guard-method-256 this)
           (zero? (crimson-guard-method-258 this s4-0 (vector+! (new 'stack-no-clear 'vector) s4-0 s3-1) s5-0))
           )
      )
    )
  )

(defstate gun-shoot (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (if (zero? (-> self ammo-count))
        (go-virtual rifle-reload)
        )
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (set! (-> self other-side) (if (< (rand-vu) 0.5)
                                   #t
                                   #f
                                   )
          )
    (nav-enemy-method-177 self)
    (let ((v1-11 self))
      (set! (-> v1-11 enemy-flags) (the-as enemy-flag (logclear (-> v1-11 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-11 nav callback-info) *null-nav-callback-info*)
      )
    0
    (let ((v1-14 self))
      (set! (-> v1-14 enemy-flags) (the-as enemy-flag (logclear (-> v1-14 enemy-flags) (enemy-flag ef38))))
      )
    0
    (let ((v1-17 (-> self nav state)))
      (set! (-> v1-17 speed) 0.0)
      )
    0
    (let ((a0-9 (-> self nav state))
          (v1-20 *null-vector*)
          )
      (set! (-> a0-9 velocity quad) (-> v1-20 quad))
      )
    0
    (set-time! (-> self state-time))
    (set-time! (-> self last-time-see-target))
    (set! (-> self miss-amount) (lerp-scale 0.0 16384.0 (-> self target-self-dist) 40960.0 122880.0))
    (set! (-> self miss-amount) 16384.0)
    (let ((v1-30 (handle->process (-> self focus handle))))
      (if (and v1-30 (logtest? (process-mask enemy) (-> v1-30 mask)))
          (set! (-> self miss-amount) 0.0)
          )
      )
    (set-time! (-> self next-shot))
    (set! (-> self joint-enable) #t)
    )
  :exit (behavior ()
    (set! (-> self joint-enable) #f)
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    )
  :trans (behavior ()
    (go-active-if-necessary)
    (let ((gp-0 (the-as process-focusable (handle->process (-> self focus handle)))))
      (when gp-0
        (when (not (and gp-0 (not (logtest? (-> gp-0 focus-status) (focus-status disable dead ignore grabbed)))))
          (set! (-> self miss-amount) (lerp-scale 0.0 16384.0 (-> self target-self-dist) 40960.0 122880.0))
          (set! (-> self miss-amount) 16384.0)
          )
        (if (and (< (-> self target-self-xz-dist) 16384.0)
                 (and (< (fabs (-> self target-y-angle)) 7281.778)
                      gp-0
                      (not (logtest? (-> gp-0 focus-status) (focus-status disable dead ignore grabbed)))
                      )
                 )
            (go-virtual close-attack)
            )
        (if (and (time-elapsed? (-> self state-time) (seconds 1))
                 (or (not (logtest? (-> self flags) (citizen-flag target-in-sight)))
                     (< 184320.0 (-> self target-self-xz-dist))
                     (< 10922.667 (fabs (-> self target-y-angle)))
                     )
                 )
            (go-hostile self)
            )
        )
      )
    )
  :code (behavior ()
    (local-vars (v1-33 object))
    (ja-channel-push! 1 (seconds 0.2))
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (ja-no-eval :group! (-> self draw art-group data (-> self anim-shoot 0 anim-index))
                  :num! (seek! max f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (seek-toward-heading-vec! (-> self root) (-> self target-self-xz) 65536.0 (seconds 0.02))
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (label cfg-3)
    (when (crimson-guard-method-257 self)
      (set! v1-33 #t)
      (goto cfg-10)
      )
    (when (time-elapsed? (-> self state-time) (seconds 1))
      (set! v1-33 #f)
      (goto cfg-10)
      )
    (suspend)
    (b! (not #f) cfg-3 :delay (set! v1-33 #f))
    (label cfg-10)
    (when v1-33
      (set-time! (-> self state-time))
      (let ((gp-1 (min 3 (the-as int (+ (logand (rand-uint31-gen *random-generator*) 3) 1)))))
        (until #f
          (ja-channel-push! 1 (seconds 0.1))
          (ja-no-eval :group! (-> self draw art-group data (-> self anim-shoot 1 anim-index)) :num! min)
          (set! (-> self already-shot) #t)
          (lerp-scale 1.0 0.2 (-> self target-self-dist) 20480.0 122880.0)
          (let ((f0-8 1.0))
            (cond
              ((logtest? (-> self draw status) (draw-control-status on-screen))
               (let ((v1-58 (handle->process (-> self focus handle))))
                 (when v1-58
                   (if (or (< (-> self target-vel) 40.96)
                           (and (focus-test? (the-as process-focusable v1-58) pilot) (< (-> self target-pos y) 49152.0))
                           )
                       (set! (-> self miss-amount) (- (-> self miss-amount) (* 12288.0 f0-8)))
                       (set! (-> self miss-amount) (- (-> self miss-amount) (* 4096.0 f0-8)))
                       )
                   )
                 )
               )
              (else
                (set! (-> self miss-amount) (- (-> self miss-amount) (* 3276.8 f0-8)))
                )
              )
            )
          (if (< (-> self miss-amount) 0.0)
              (set! (-> self miss-amount) 0.0)
              )
          (crimson-guard-method-255 self)
          (set-time! (-> self last-fire-time))
          (until (ja-done? 0)
            (ja :num! (seek!))
            (suspend)
            )
          (if (zero? (-> self ammo-count))
              (go-virtual rifle-reload)
              )
          (+! gp-1 -1)
          (if (or (< gp-1 0)
                  (not (and (handle->process (-> self focus handle))
                            (not (logtest? (-> (the-as process-focusable (handle->process (-> self focus handle))) focus-status)
                                           (focus-status disable dead ignore grabbed)
                                           )
                                 )
                            )
                       )
                  )
              (goto cfg-59)
              )
          )
        )
      #f
      )
    (label cfg-59)
    (let ((f30-1 (rnd-float-range self 0.9 1.1)))
      (ja-channel-push! 1 (seconds 0.2))
      (ja-no-eval :group! (-> self draw art-group data (-> self anim-shoot 2 anim-index))
                  :num! (seek! max f30-1)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (seek-toward-heading-vec! (-> self root) (-> self target-self-xz) 65536.0 (seconds 0.02))
        (suspend)
        (ja :num! (seek! max f30-1))
        )
      )
    (crimson-guard-method-268 self)
    )
  :post (behavior ()
    (citizen-method-213 self)
    (nav-enemy-method-187 self)
    )
  )

(defstate rifle-reload (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((v1-0 self))
      (set! (-> v1-0 enemy-flags) (the-as enemy-flag (logclear (-> v1-0 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-0 nav callback-info) *null-nav-callback-info*)
      )
    0
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag ef38))))
      )
    0
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (let ((gp-0 (-> self skel root-channel 0)))
        (set! (-> gp-0 frame-group) (the-as art-joint-anim crimson-guard-grenade-reload-ja))
        (set! (-> gp-0 param 0)
              (the float (+ (-> (the-as art-joint-anim crimson-guard-grenade-reload-ja) frames num-frames) -1))
              )
        (let* ((f30-0 1.1)
               (f28-0 0.39999998)
               (v1-14 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-15 (the-as number (logior #x3f800000 v1-14)))
               )
          (set! (-> gp-0 param 1) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-15)))))
          )
        (set! (-> gp-0 frame-num) 0.0)
        (joint-control-channel-group! gp-0 (the-as art-joint-anim crimson-guard-grenade-reload-ja) num-func-seek!)
        )
      (until (ja-done? 0)
        (suspend)
        (let ((gp-1 (-> self skel root-channel 0)))
          (set! (-> gp-1 param 0) (the float (+ (-> gp-1 frame-group frames num-frames) -1)))
          (let* ((f30-1 1.1)
                 (f28-1 0.39999998)
                 (v1-29 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                 (v1-30 (the-as number (logior #x3f800000 v1-29)))
                 )
            (set! (-> gp-1 param 1) (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-30)))))
            )
          (joint-control-channel-group-eval! gp-1 (the-as art-joint-anim #f) num-func-seek!)
          )
        )
      (crimson-guard-method-285 self 3)
      (set! (-> self last-fire-time) 0)
      (let ((v1-36 #f))
        (let ((a0-13 (handle->process (-> self focus handle))))
          (if (and a0-13 (focus-test? (the-as process-focusable a0-13) ignore))
              (set! v1-36 #t)
              )
          )
        (when (and (not v1-36) (or (>= 40960.0 (-> self target-self-xz-dist))
                                   (= (-> self ammo-count) (crimson-guard-method-286 self))
                                   (time-elapsed? (-> self last-fire-time) (-> self rand-state-time))
                                   )
                   )
          0
          (goto cfg-26)
          )
        )
      )
    #f
    (label cfg-26)
    (ja-channel-push! 1 0)
    (ja-no-eval :group! crimson-guard-cock-gun-ja :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (go-hostile self)
    )
  :post (behavior ()
    (enemy-common-post self)
    )
  )

(defstate rifle-hostile (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (crimson-guard-method-251 self)
    (set! (-> self rand-state-time) (the-as time-frame (the int (* 300.0 (rnd-float-range self 2.5 4.5)))))
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (crimson-guard-method-252 self)
    (let ((v1-4 (handle->process (-> self focus handle))))
      (if (or (not v1-4)
              (not (and v1-4
                        (not (logtest? (-> (the-as process-focusable v1-4) focus-status) (focus-status disable dead ignore grabbed)))
                        )
                   )
              )
          (go-virtual rifle-reload)
          )
      )
    (when (and (< (-> self target-self-xz-dist) 163840.0)
               (or (< 40960.0 (-> self target-self-xz-dist)) (>= 2 (the-as int (-> self focus aware))))
               )
      (when (and (logtest? (-> self flags) (citizen-flag target-in-sight))
                 (< (vector-vector-xz-distance (-> self root trans) (-> self move-position)) 20480.0)
                 )
        (if (or (time-elapsed? (-> self last-fire-time) (-> self rand-state-time)) (= (-> self faction-mode) 1))
            (go-virtual gun-shoot)
            (go-virtual rifle-reload)
            )
        )
      )
    (if (< (vector-vector-xz-distance (-> self root trans) (-> self move-position)) 8192.0)
        (crimson-guard-method-289 self (-> self last-quick-target-spot-angle))
        )
    )
  :code (behavior ()
    (citizen-travel-anim (the-as int (-> self draw art-group data (-> self enemy-info walk-anim))) 60)
    )
  :post (behavior ()
    (crimson-guard-method-253 self)
    (crimson-guard-method-254 self)
    )
  )
