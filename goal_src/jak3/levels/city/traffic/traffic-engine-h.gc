;;-*-Lisp-*-
(in-package goal)

;; name: traffic-engine-h.gc
;; name in dgo: traffic-engine-h
;; dgos: DESRESC, HGA, WWD, CWI, LFACTORY

(declare-type squad-control basic)
(declare-type traffic-find-segment-struct structure)

;; +++vis-cell-flag
(defenum vis-cell-flag
  :type uint8
  :bitfield #t
  (active-vehicle 0)
  (active-pedestrian 1)
  (suppress 2)
  )
;; ---vis-cell-flag


;; +++traffic-suppression-box-flag
(defenum traffic-suppression-box-flag
  :type uint8
  :bitfield #t
  (in-use 0)
  (tfsb1 1)
  (tfsb2 2)
  (tfsb3 3)
  (tfsb4 4)
  (tfsb5 5)
  (tfsb6 6)
  (tfsb7 7)
  )
;; ---traffic-suppression-box-flag


;; +++traffic-suppressor-flag
(defenum traffic-suppressor-flag
  :type uint8
  :bitfield #t
  (tfs0 0)
  (needs-update 1)
  (tfs2 2)
  (tfs3 3)
  (tfs4 4)
  (tfs5 5)
  (tfs6 6)
  (tfs7 7)
  )
;; ---traffic-suppressor-flag


;; +++traffic-type-flag
(defenum traffic-type-flag
  :bitfield #t
  :type uint8
  (ttf0)
  (ttf1)
  (ttf2)
  (ttf3)
  (ttf4)
  (ttf5)
  (ttf6)
  (ttf7)
  )
;; ---traffic-type-flag


;; DECOMP BEGINS

(deftype nav-segment (structure)
  ((vertex         vector  2 :inline)
   (length         float   :overlay-at (-> vertex 0 data 3))
   (spawn-spacing  float   :offset  28)
   (branch         nav-branch)
   (nav-mesh-id    uint32)
   (id             uint16)
   (cell-id        uint16)
   (from-cell-id   uint16)
   (tracker-id     int8)
   (pad0           int8)
   )
  )


(deftype vis-cell (structure)
  ((sphere                  sphere  :inline)
   (segment-array           (inline-array nav-segment))
   (vis-id                  uint16)
   (id                      uint16)
   (incoming-segment-count  int8)
   (segment-count           int8)
   (flags                   vis-cell-flag)
   (prev-flags              vis-cell-flag)
   (alloc-segment-count     int8    :overlay-at flags)
   (nav-territories         uint32)
   )
  (:methods
    (reset-segment-counts (_type_) none)
    (debug-draw (_type_) none)
    )
  )


(deftype vis-grid-pos (structure)
  ((data  int8  3)
   (x     int8  :overlay-at (-> data 0))
   (y     int8  :overlay-at (-> data 1))
   (z     int8  :overlay-at (-> data 2))
   )
  :pack-me
  )


(deftype vis-grid-box (structure)
  ((min  vis-grid-pos  :inline)
   (max  vis-grid-pos  :inline)
   )
  )


(deftype vis-ray (structure)
  ((pos       vector        :inline)
   (dir       vector        :inline)
   (dest-pos  vector        :inline)
   (plane     plane         :inline)
   (grid-pos  vis-grid-pos  :inline)
   (len       float)
   (cell      vis-cell)
   )
  )


(deftype grid-info (structure)
  ((axis-scale       float         3)
   (dimension-array  int8          3)
   (pad0             uint8         1)
   (box              bounding-box  :inline)
   (cell-size        vector        :inline)
   )
  (:methods
    (setup-grid-from-bounding-box (_type_ (pointer bounding-box) int int) none)
    (lookup-cell-for-point (_type_ vis-grid-pos vector) none)
    (lookup-box-for-sphere (_type_ vis-grid-box vector) none)
    (debug-draw-grid (_type_ rgba) none)
    (debug-draw-cell (_type_ vis-grid-pos rgba) none)
    )
  )


(deftype city-level-info (structure)
  ((grid-info       grid-info  :inline)
   (cell-array      (inline-array vis-cell))
   (segment-count   int16)
   (cell-count      uint16)
   (segment-array   (inline-array nav-segment))
   (nav-graph       nav-graph)
   (camera-ceiling  meters)
   (pad-array       int8       56)
   )
  (:methods
    (city-level-info-method-9 (_type_) object)
    (init-vis-ray (_type_ vis-ray vector vector) none)
    (city-level-info-method-11 (_type_ vis-ray) none)
    (city-level-info-method-12 (_type_ vector nav-branch vector) vector)
    (lookup-cell-by-position (_type_ vector) vis-cell)
    (get-first-cell-in-box (_type_ vis-grid-box) vis-cell)
    (sphere-in-grid? (_type_ vector int) symbol)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (update-suppressions-from-traffic-engine (_type_ traffic-engine) none)
    (city-level-info-method-18 (_type_) none)
    )
  )


(deftype traffic-level-data (structure)
  ((city-info                city-level-info)
   (active-cell-count        uint8)
   (newly-active-cell-count  uint8)
   (active-cell-list         vis-cell      255)
   (newly-active-cell-list   vis-cell      255)
   (active-cell-box          bounding-box  :inline)
   )
  (:methods
    (reset! (_type_) none)
    (add-active-cell (_type_ vis-cell) none)
    (remove-active-cell (_type_ int) none)
    (add-newly-active-cell (_type_ vis-cell) none)
    (per-frame-cell-update (_type_) none)
    (debug-draw (_type_) none)
    )
  )


(deftype traffic-suppression-box (structure)
  ((data      uint8                         32)
   (bbox      bounding-box                  :inline :overlay-at (-> data 0))
   (flags     traffic-suppression-box-flag          :overlay-at (-> data 12))
   (duration  uint32                                :overlay-at (-> data 28))
   )
  )


(deftype traffic-object-type-info (structure)
  ((flags                 traffic-type-flag)
   (active-count          int8)
   (inactive-count        int8)
   (reserve-count         uint16)
   (killed-count          uint16)
   (want-count            int8)
   (tracker-index         uint8)
   (parking-spot-prob     uint8)
   (guard-type            uint8)
   (array                 (pointer handle))
   (level                 symbol)
   (target-counts         int8  3)
   (target-count          int8  :overlay-at (-> target-counts 0))
   (target-count-war      int8  :overlay-at (-> target-counts 1))
   (target-count-mission  int8  :overlay-at (-> target-counts 2))
   )
  )


(deftype traffic-suppressor (structure)
  ((flags  traffic-suppressor-flag)
   (bbox   bounding-box             :inline)
   (array  traffic-suppression-box  16 :inline)
   )
  (:methods
    (reset-boxes (_type_) none)
    (add-new-supression-box (_type_ traffic-suppression-params) none)
    (remove-box-by-id (_type_ int) none)
    (update-box-from-params (_type_ traffic-suppression-params) none)
    (debug-draw (_type_) none)
    )
  )


(deftype traffic-tracker (structure)
  ((traffic                  traffic-engine)
   (object-hash              spatial-hash)
   (rand                     float)
   (id                       uint8)
   (active-object-count      uint8)
   (inactive-object-count    int8)
   (active-object-list       handle        126)
   (active-object-type-list  traffic-type  126)
   )
  (:methods
    (traffic-tracker-method-9 (_type_) none)
    (traffic-tracker-method-10 (_type_) none)
    (traffic-tracker-method-11 (_type_) none)
    (add-active-process (_type_ traffic-type handle) none)
    (remove-active-process (_type_ int) handle)
    (add-reserved-process (_type_ traffic-type handle) none)
    (get-from-inactive-by-type (_type_ traffic-type) handle)
    (get-from-inactive-by-handle (_type_ traffic-type handle) handle)
    (deactivate-object (_type_ int symbol) none)
    (set-process-to-killed (_type_ process) none)
    (deactivate-all (_type_ symbol) none)
    (deactivate-all-of-type (_type_ traffic-type symbol) none)
    (activate-from-params (_type_ traffic-object-spawn-params) none)
    (activate-by-type (_type_ traffic-type nav-segment float) none)
    (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (reset (_type_ uint traffic-engine) none)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (for-all-active-processes-of-type (_type_ traffic-type (function process-focusable traffic-object-type-info none)) none)
    )
  )


(deftype traffic-engine (basic)
  ((object-hash             spatial-hash)
   (manager                 handle)
   (inv-density-factor      float)
   (sync-clock              uint8)
   (sync-mask-8             uint8)
   (sync-mask-16            uint16)
   (sync-mask-32            uint32)
   (sync-array              uint8                     4)
   (flags                   uint8)
   (squad-control-array     squad-control             4)
   (level-data-array        traffic-level-data        2 :inline)
   (object-type-info-array  traffic-object-type-info  29 :inline)
   (tracker-array           traffic-tracker           2 :inline)
   (tracker0                traffic-tracker           :inline :overlay-at (-> tracker-array 0))
   (tracker1                traffic-tracker           :inline :offset 6304)
   (inactive-object-array   handle                    580     :offset 7456)
   (suppressor              traffic-suppressor        :inline)
   (danger-sphere-count     int8                              :offset 12656)
   (danger-sphere-array     traffic-danger-info       4 :inline)
   (allow-spawning?         symbol                            :offset 12928)
   )
  (:methods
    (new (symbol type) _type_)
    (update-traffic (_type_) none)
    (reset-and-init-from-manager (_type_ process) none)
    (squad-stop-alarm-sound (_type_) none)
    (stub (_type_) none)
    (add-object (_type_ traffic-type process) none)
    (sphere-in-loaded-city-infos? (_type_ vector int) symbol)
    (activate-one-citizen (_type_ nav-segment float) none)
    (activate-one-vehicle (_type_ nav-segment float) none)
    (can-dest-be-used? (_type_ nav-branch) symbol)
    (child-killed (_type_ process) none)
    (deactivate-all-from-level (_type_ symbol) none)
    (find-best-segment (_type_ vector vector int) nav-segment)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (add-danger (_type_ traffic-danger-info) none)
    (target-count (_type_ float) none)
    (deactivate-all (_type_) none)
    (deactivate-by-type (_type_ traffic-type) none)
    (restore-default-settings (_type_) none)
    (set-object-target-level (_type_ int float) none)
    (set-object-target-count (_type_ int int) none)
    (set-object-reserve-count (_type_ int uint) none)
    (get-object-reserve-count (_type_ int) uint)
    (get-object-remaining-count (_type_ int) int)
    (activate-object (_type_ traffic-object-spawn-params) none)
    (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (set-parking-spot-prob (_type_ int float) none)
    (get-random-parking-spot-type (_type_) traffic-type)
    (new-suppression-box (_type_ traffic-suppression-params) none)
    (remove-suppression-box (_type_ traffic-suppression-params) none)
    (update-suppression-box (_type_ traffic-suppression-params) none)
    (stub1 (_type_) none)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (set-object-auto-activate (_type_ int symbol) none)
    (check-proc-in-tracker (_type_ process int) none)
    (kill-traffic-sphere (_type_ vector) none)
    (level-link (_type_ level) none)
    (level-unlink (_type_ level) none)
    (add-squad-ctrl (_type_ squad-control) none)
    (stub2 (_type_) none)
    (stub3 (_type_) none)
    (handle-new-vis-cell (_type_ vis-cell) none)
    (init-sync-masks (_type_) none)
    (stub4 (_type_) none)
    (update-traffic-amount (_type_) none)
    (update-danger (_type_) none)
    (update-danger-from-target (_type_) none)
    (stub5 (_type_) none)
    (update-suppressor (_type_) none)
    (recompute-suppressions (_type_) none)
    )
  )
