;;-*-Lisp-*-
(in-package goal)

;; name: traffic-manager.gc
;; name in dgo: traffic-manager
;; dgos: DESRESC, WWD, CWI

(define-extern vehicle-manager-start (function process none))
(define-extern *traffic-fast-spawn* symbol)

;; DECOMP BEGINS

;; TODO stubs

(define *traffic-engine* (the-as traffic-engine #f))

(define *traffic-fast-spawn* #f)

(deftype traffic-manager (process)
  ((traffic-engine    traffic-engine)
   (fast-spawn        symbol)
   (dark-guard-ratio  int32)
   (spawn-params      traffic-object-spawn-params  :inline)
   )
  (:state-methods
    idle
    active
    )
  (:methods
    (traffic-manager-method-16 (_type_) none)
    (traffic-manager-method-17 (_type_) none)
    (traffic-manager-method-18 (_type_) none)
    (traffic-manager-method-19 (_type_) none)
    (traffic-manager-method-20 (_type_) none)
    (traffic-manager-method-21 (_type_) none)
    (traffic-manager-method-22 (_type_) none)
    )
  )

(defmethod traffic-manager-method-16 ((this traffic-manager))
  (none)
  )

(defmethod traffic-manager-method-17 ((this traffic-manager))
  (none)
  )

(defmethod traffic-manager-method-21 ((this traffic-manager))
  (none)
  )

(defbehavior traffic-manager-event-handler traffic-manager ((proc process) (argc int) (msg symbol) (block event-message-block))
  #f
  )

(defun draw-city-info ((arg0 city-level-info) (arg1 vis-grid-pos))
  (let ((v1-0 (-> arg0 grid-info box)))
    (add-debug-box #t (bucket-id debug) (-> v1-0 min) (-> v1-0 max) *color-yellow*)
    )
  (debug-draw-grid (-> arg0 grid-info) *color-gray*)
  (debug-draw-cell (-> arg0 grid-info) arg1 *color-red*)
  (let* ((v1-8 (+ (-> arg1 x)
                  (* (-> arg1 z) (-> arg0 grid-info dimension-array 0))
                  (* (* (-> arg1 y) (-> arg0 grid-info dimension-array 0)) (-> arg0 grid-info dimension-array 2))
                  )
               )
         (v1-10 (-> arg0 cell-array v1-8))
         )
    (add-debug-sphere #t (bucket-id debug) (-> v1-10 sphere) (-> v1-10 sphere r) *color-green*)
    )
  0
  (none)
  )

(defmethod traffic-manager-method-18 ((this traffic-manager))
  (let ((s5-0 0))
    (while (< (the-as uint s5-0) (the-as uint 29))
      (let ((v1-2 (-> this traffic-engine object-type-info-array s5-0)))
        (when (logtest? (-> v1-2 flags) 2)
          (let ((a0-5 (+ (-> v1-2 active-count) (-> v1-2 inactive-count))))
            (when (< (-> v1-2 want-count) a0-5)
              (let ((a0-10 (handle->process (get-from-inactive-by-type
                                              (-> this traffic-engine tracker-array (-> v1-2 tracker-index))
                                              (the-as traffic-type s5-0)
                                              )
                                            )
                           )
                    )
                (if a0-10
                    (deactivate a0-10)
                    )
                )
              )
            )
          )
        )
      (+! s5-0 1)
      )
    )
  0
  (none)
  )

(defmethod traffic-manager-method-19 ((this traffic-manager))
  ((method-of-object (-> this traffic-engine) traffic-engine-method-24))
  (let ((s5-0 0))
    (while (< (the-as uint s5-0) (the-as uint 29))
      (let ((s4-0 (-> this traffic-engine object-type-info-array s5-0)))
        (countdown (s3-0 (-> s4-0 inactive-count))
          (let ((a0-7 (handle->process (get-from-inactive-by-type
                                         (-> this traffic-engine tracker-array (-> s4-0 tracker-index))
                                         (the-as traffic-type s5-0)
                                         )
                                       )
                      )
                )
            (if a0-7
                (deactivate a0-7)
                )
            )
          )
        )
      (+! s5-0 1)
      )
    )
  0
  (none)
  )

(defmethod traffic-manager-method-20 ((this traffic-manager))
  (set! (-> this traffic-engine) *traffic-engine*)
  (reset-and-init-from-manager (-> this traffic-engine) this)
  (let ((t9-1 (-> *traffic-info* restore-speech-callback)))
    (if t9-1
        (t9-1)
        )
    )
  0
  (none)
  )

;; WARN: Return type mismatch process vs traffic-manager.
(defmethod relocate ((this traffic-manager) (offset int))
  (set! *traffic-manager* this)
  (if *traffic-manager*
      (set! *traffic-manager* (&+ *traffic-manager* offset))
      )
  (the-as traffic-manager ((method-of-type process relocate) this offset))
  )

(defmethod deactivate ((this traffic-manager))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (and *vehicle-manager* (!= (-> this level) (-> *vehicle-manager* level)))
      (change-parent *vehicle-manager* *entity-pool*)
      )
  ; ((method-of-object (-> this traffic-engine) traffic-engine-method-11))
  (set! *traffic-manager* #f)
  (remove-setting *setting-control* this 'task-mask)
  (apply-settings *setting-control*)
  (speech-table-reset! *speech-control*)
  ((method-of-type process deactivate) this)
  (none)
  )

(define *traffic-vehicle-level-borrow-list* (the-as object '(#f)))

(define *traffic-vehicle-level-sound-list* (the-as object '(#f)))

(defbehavior traffic-manager-init-by-other traffic-manager ()
  (stack-size-set! (-> self main-thread) 128)
  (ctywide-entity-hack)
  (traffic-manager-method-21 self)
  (add-setting! 'task-mask 'clear 0.0 (task-mask ctywide))
  (set! (-> self event-hook) traffic-manager-event-handler)
  (vehicle-manager-start self)
  (go-virtual idle)
  )

(defun traffic-start ()
  (kill-by-type traffic-manager *active-pool*)
  (process-spawn traffic-manager :name "traffic-manager" :to *entity-pool*)
  0
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defun traffic-kill ()
  (kill-by-type traffic-manager *active-pool*)
  (none)
  )

(defun ctywide-entity-hack ()
  (with-pp
    (set! (-> pp level) (-> *traffic-info* ctywide-level))
    0
    (none)
    )
  )

(defun traffic-entity-hack ((arg0 traffic-type))
  (with-pp
    (set! (-> pp level) (level-get *level* (-> *traffic-engine* object-type-info-array arg0 level)))
    (if (not (-> pp level))
        (format 0 "traffic-entity-hack ~s~%" (cond
                                               ((= arg0 (traffic-type guard-a))
                                                "guard-a"
                                                )
                                               ((= arg0 (traffic-type civilian-fat))
                                                "civilian-fat"
                                                )
                                               ((= arg0 (traffic-type civilian-car-a))
                                                "civilian-car-a"
                                                )
                                               ((= arg0 (traffic-type bike-d))
                                                "bike-d"
                                                )
                                               ((= arg0 (traffic-type civilian-bike-b))
                                                "civilian-bike-b"
                                                )
                                               ((= arg0 (traffic-type metalhead-flitter))
                                                "metalhead-flitter"
                                                )
                                               ((= arg0 (traffic-type vehicle-task))
                                                "vehicle-task"
                                                )
                                               ((= arg0 (traffic-type metalhead-predator))
                                                "metalhead-predator"
                                                )
                                               ((= arg0 (traffic-type guard-b))
                                                "guard-b"
                                                )
                                               ((= arg0 (traffic-type wlander-female))
                                                "wlander-female"
                                                )
                                               ((= arg0 (traffic-type civilian-bike-a))
                                                "civilian-bike-a"
                                                )
                                               ((= arg0 (traffic-type wlander-male))
                                                "wlander-male"
                                                )
                                               ((= arg0 (traffic-type guard-transport))
                                                "guard-transport"
                                                )
                                               ((= arg0 (traffic-type guard-car))
                                                "guard-car"
                                                )
                                               ((= arg0 (traffic-type roboguard))
                                                "roboguard"
                                                )
                                               ((= arg0 (traffic-type metalhead-grunt))
                                                "metalhead-grunt"
                                                )
                                               ((= arg0 (traffic-type guard-pilot))
                                                "guard-pilot"
                                                )
                                               ((= arg0 (traffic-type civilian-pilot))
                                                "civilian-pilot"
                                                )
                                               ((= arg0 (traffic-type spydroid))
                                                "spydroid"
                                                )
                                               ((= arg0 (traffic-type kg-pickup))
                                                "kg-pickup"
                                                )
                                               ((= arg0 (traffic-type flying-turret))
                                                "flying-turret"
                                                )
                                               ((= arg0 (traffic-type civilian-female))
                                                "civilian-female"
                                                )
                                               ((= arg0 (traffic-type civilian-car-c))
                                                "civilian-car-c"
                                                )
                                               ((= arg0 (traffic-type citizen-task))
                                                "citizen-task"
                                                )
                                               ((= arg0 (traffic-type guard-bike))
                                                "guard-bike"
                                                )
                                               ((= arg0 (traffic-type civilian-car-b))
                                                "civilian-car-b"
                                                )
                                               ((= arg0 (traffic-type civilian-bike-c))
                                                "civilian-bike-c"
                                                )
                                               ((= arg0 (traffic-type formation))
                                                "formation"
                                                )
                                               ((= arg0 (traffic-type civilian-male))
                                                "civilian-male"
                                                )
                                               (else
                                                 "*unknown*"
                                                 )
                                               )
                )
        )
    0
    (none)
    )
  )

(defstate idle (traffic-manager)
  :virtual #t
  :event traffic-manager-event-handler
  :enter (behavior ()
    (traffic-manager-method-17 self)
    )
  :code (behavior ()
    (suspend)
    (suspend)
    (go-virtual active)
    )
  )

(defstate active (traffic-manager)
  :virtual #t
  :event traffic-manager-event-handler
  :code sleep-code
  :post (behavior ()
    (traffic-manager-method-16 self)
    )
  )

;; WARN: Return type mismatch object vs none.
(defun riders-on ()
  (send-event *traffic-manager* 'rider-on)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defun riders-off ()
  (send-event *traffic-manager* 'rider-off)
  (none)
  )

(deftype want-count-binding (structure)
  ((obj-type  traffic-type)
   (count     uint8)
   )
  )


(deftype want-count-group (structure)
  ((bindings  (array want-count-binding))
   )
  )


(deftype want-count-level-group (structure)
  ((want-groups  (array want-count-group))
   (level        uint8)
   )
  )


(define *want-count-levels*
  (new 'static 'boxed-array :type want-count-level-group
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard))
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid))
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt))
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter))
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c))
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      )
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard))
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret) :count #x1)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a) :count #x2)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat) :count #x1)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c) :count #x1)
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      :level #x1
      )
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret) :count #x1)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a) :count #x4)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat) :count #x1)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b) :count #x1)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c) :count #x1)
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      :level #x2
      )
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard) :count #x3)
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid) :count #x3)
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret) :count #x3)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt) :count #x3)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter) :count #x3)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator) :count #x1)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a) :count #x7)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :count #xa)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female) :count #xa)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat) :count #x3)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b) :count #x2)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c) :count #x2)
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      :level #x3
      )
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard) :count #x5)
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid) :count #x4)
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret) :count #x5)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt) :count #x5)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter) :count #x5)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator) :count #x2)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a) :count #xb)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c))
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      :level #x4
      )
    (new 'static 'want-count-level-group
      :want-groups (new 'static 'boxed-array :type want-count-group
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type roboguard) :count #x6)
            (new 'static 'want-count-binding :obj-type (traffic-type spydroid) :count #x9)
            (new 'static 'want-count-binding :obj-type (traffic-type flying-turret) :count #x6)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-grunt) :count #x6)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-flitter) :count #x8)
            (new 'static 'want-count-binding :obj-type (traffic-type metalhead-predator) :count #x3)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type guard-a) :count #xd)
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding)
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-female))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-fat))
            )
          )
        (new 'static 'want-count-group
          :bindings (new 'static 'boxed-array :type want-count-binding
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-bike-c))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-a))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-b))
            (new 'static 'want-count-binding :obj-type (traffic-type civilian-car-c))
            )
          )
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        (new 'static 'want-count-group :bindings (new 'static 'boxed-array :type want-count-binding))
        )
      :level #x7
      )
    )
  )