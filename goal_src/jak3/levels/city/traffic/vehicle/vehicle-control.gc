;;-*-Lisp-*-
(in-package goal)

;; name: vehicle-control.gc
;; name in dgo: vehicle-control
;; dgos: DESRESC, HGA, WWD, CWI, LFACTORY

;; +++vehicle-controller-flag
(defenum vehicle-controller-flag
  :type uint32
  :bitfield #t
  (debug)
  (draw-marks)
  (left-turn)
  (on-straightaway)
  (do-turn)
  (blocking-dest-node)
  (attached)
  (off-path)
  (ignore-others)
  (direct-mode)
  (recovery-mode)
  (no-slowing-for-turns)
  )
;; ---vehicle-controller-flag


(declare-type vehicle process-focusable)
(declare-type rigid-body-vehicle-constants structure)

;; DECOMP BEGINS

(deftype vehicle-controller (structure)
  ((flags                   vehicle-controller-flag)
   (traffic                 traffic-engine)
   (branch                  nav-branch)
   (target-speed-offset     meters)
   (target-speed            meters)
   (choose-branch-callback  (function vehicle-controller vehicle nav-branch))
   (turn-accel              meters)
   (max-turn-speed          meters)
   (path-prev-point         vector  :inline)
   (turn-enter-point        vector  :inline)
   (turn-exit-point         vector  :inline)
   (path-dest-point         vector  :inline :overlay-at turn-exit-point)
   (turn-enter-dir          vector  :inline)
   (turn-exit-dir           vector  :inline)
   (dest-circle             vector  :inline)
   (target-point            vector  :inline)
   )
  (:methods
    (vehicle-controller-method-9 (_type_) none)
    (vehicle-controller-method-10 (_type_ nav-branch) none)
    (vehicle-controller-method-11 (_type_) none)
    (vehicle-controller-method-12 (_type_ rigid-body-vehicle-constants vector float int float) none)
    (vehicle-controller-method-13 (_type_ nav-branch vector) none)
    (vehicle-controller-method-14 (_type_ vehicle) nav-branch)
    (vehicle-controller-method-15 (_type_) nav-branch)
    (vehicle-controller-method-16 (_type_ vector vector) none)
    (draw-debug-info (_type_) none)
    (vehicle-controller-method-18 (_type_ vector vector vehicle float) none)
    (vehicle-controller-method-19 (_type_ vector object vector vector) none)
    (vehicle-controller-method-20 (_type_ vector float) none)
    (vehicle-controller-method-21 (_type_) none)
    )
  )


(define *vehicle-control-debug-obj* (the-as object #f))

(defmethod vehicle-controller-method-21 ((this vehicle-controller))
  (when (logtest? (-> this flags) (vehicle-controller-flag attached))
    (let ((v1-3 (-> this branch)))
      (when (or (not v1-3) (zero? v1-3))
        (break!)
        0
        )
      (when (logtest? (the-as int v1-3) 15)
        (break!)
        0
        )
      (let ((v1-4 (-> v1-3 src-node)))
        (when (or (not v1-4) (zero? v1-4))
          (break!)
          0
          )
        (when (< (the-as uint #x8000000) (the-as uint v1-4))
          (break!)
          0
          )
        )
      )
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-20 ((this vehicle-controller) (arg0 vector) (arg1 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (set! (-> this max-turn-speed) (sqrtf (* (fmax 16384.0 arg1) (-> this turn-accel))))
    (let ((v1-1 (new 'stack-no-clear 'inline-array 'vector 2)))
      (vector-! (-> v1-1 1) (-> this turn-exit-point) arg0)
      (set! (-> v1-1 0 quad) (-> this turn-exit-dir quad))
      (set! (-> v1-1 0 x) (-> this turn-exit-dir z))
      (set! (-> v1-1 0 z) (- (-> this turn-exit-dir x)))
      (logior! (-> this flags) (vehicle-controller-flag left-turn))
      (when (< 0.0 (vector-dot (-> v1-1 1) (-> v1-1 0)))
        (logclear! (-> this flags) (vehicle-controller-flag left-turn))
        (vector-float*! (-> v1-1 0) (-> v1-1 0) -1.0)
        )
      (let ((a1-6 (-> this dest-circle)))
        (let ((a0-12 (-> this turn-exit-point)))
          (let ((v1-2 (-> v1-1 0)))
            (let ((a3-3 arg1))
              (.mov vf7 a3-3)
              )
            (.lvf vf5 (&-> v1-2 quad))
            )
          (.lvf vf4 (&-> a0-12 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a1-6 quad) vf6)
        )
      )
    (set! (-> this dest-circle w) arg1)
    0
    (vehicle-controller-method-16 this (-> this path-prev-point) (-> this turn-enter-point))
    (set! (-> this target-point quad) (-> this turn-enter-point quad))
    (vector-! (-> this turn-enter-dir) (-> this turn-enter-point) (-> this path-prev-point))
    (set! (-> this turn-enter-dir y) 0.0)
    (vector-normalize! (-> this turn-enter-dir) 1.0)
    (let ((f0-12 (cos 8192.0))
          (f30-0 (vector-dot (-> this turn-enter-dir) (-> this turn-exit-dir)))
          )
      (set! (-> this max-turn-speed)
            (* (-> this max-turn-speed) (+ 1.0 (fmax 0.0 (/ (- f30-0 f0-12) (- 1.0 f0-12)))))
            )
      (if (>= f30-0 (cos 1820.4445))
          (set! (-> this max-turn-speed) 409600.0)
          )
      )
    0
    (none)
    )
  )

(defmethod vehicle-controller-method-19 ((this vehicle-controller) (arg0 vector) (arg1 object) (arg2 vector) (arg3 vector))
  (set! (-> this path-prev-point quad) (-> arg0 quad))
  (vector-vector-distance arg0 arg2)
  (set! (-> this target-speed) (vector-length arg3))
  (set! (-> this turn-exit-point quad) (-> arg2 quad))
  (set! (-> this turn-exit-dir quad) (-> arg3 quad))
  (set! (-> this turn-exit-dir y) 0.0)
  (vector-normalize! (-> this turn-exit-dir) 1.0)
  (vehicle-controller-method-20 this arg0 (the-as float arg1))
  (logior! (-> this flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

(defmethod vehicle-controller-method-13 ((this vehicle-controller) (arg0 nav-branch) (arg1 vector))
  (vehicle-controller-method-10 this arg0)
  (set! (-> this path-prev-point quad) (-> arg1 quad))
  (set! (-> this branch) arg0)
  (let ((v1-3 arg0))
    (set! (-> this target-speed) (* 1024.0 (the float (-> v1-3 speed-limit))))
    )
  (let ((s4-1 (-> arg0 dest-node)))
    (let ((a1-2 s4-1)
          (v1-6 (-> this turn-exit-point))
          )
      (set! (-> v1-6 quad) (-> a1-2 position quad))
      (set! (-> v1-6 w) 1.0)
      )
    (let ((v1-7 s4-1)
          (s3-0 (-> this turn-exit-dir))
          )
      (let ((f0-5 (the float (-> v1-7 angle)))
            (s2-0 (new 'stack-no-clear 'vector))
            )
        (sincos! s2-0 f0-5)
        (set! (-> s3-0 x) (-> s2-0 y))
        (set! (-> s3-0 y) 0.0)
        (set! (-> s3-0 z) (- (-> s2-0 x)))
        )
      (set! (-> s3-0 w) 1.0)
      )
    (vehicle-controller-method-20 this arg1 (* 1024.0 (the float (-> s4-1 radius))))
    )
  (logior! (-> this flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

(defmethod vehicle-controller-method-15 ((this vehicle-controller))
  (let ((gp-0 (the-as nav-branch #f)))
    (let* ((s5-0 (-> this branch dest-node))
           (s4-0 (-> s5-0 branch-count))
           )
      (b! (!= s4-0 1) cfg-4 :delay (empty-form))
      (let ((s5-1 (-> s5-0 branch-array 0)))
        (if (dest-node-id-at-max? s5-1)
            (set! gp-0 s5-1)
            )
        )
      (b! #t cfg-12 :delay (nop!))
      (label cfg-4)
      (when (< 1 s4-0)
        (let ((s3-0 (rand-vu-int-count s4-0))
              (s2-0 s4-0)
              )
          (b! #t cfg-10 :delay (nop!))
          (label cfg-6)
          (+! s2-0 -1)
          (let ((s1-0 (-> s5-0 branch-array s3-0)))
            (b! (not (dest-node-id-at-max? s1-0)) cfg-8 :delay (empty-form))
            (set! gp-0 s1-0)
            )
          (b! #t cfg-12 :delay (nop!))
          (label cfg-8)
          (+! s3-0 1)
          (if (>= s3-0 s4-0)
              (set! s3-0 0)
              )
          (label cfg-10)
          (b! (nonzero? s2-0) cfg-6 :delay (nop!))
          )
        )
      )
    (label cfg-12)
    gp-0
    )
  )

(defmethod vehicle-controller-method-14 ((this vehicle-controller) (arg0 vehicle))
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (gp-0 ((-> this choose-branch-callback) this arg0))
        )
    (when gp-0
      (vehicle-controller-method-11 this)
      (set! (-> s4-0 quad) (-> this turn-exit-point quad))
      (vehicle-controller-method-13 this gp-0 s4-0)
      )
    gp-0
    )
  )

(defmethod vehicle-controller-method-16 ((this vehicle-controller) (arg0 vector) (arg1 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'inline-array 'vector 2)))
      (vector-! (-> s4-0 0) (-> this dest-circle) arg0)
      (set! (-> s4-0 0 y) 0.0)
      (let* ((v1-1 (-> s4-0 0))
             (f30-0 (sqrtf (+ (* (-> v1-1 x) (-> v1-1 x)) (* (-> v1-1 z) (-> v1-1 z)))))
             (f28-0 (-> this dest-circle w))
             )
        (vector-xz-normalize! (-> s4-0 0) 1.0)
        (set! (-> s4-0 1 x) (-> s4-0 0 z))
        (set! (-> s4-0 1 y) 0.0)
        (set! (-> s4-0 1 z) (- (-> s4-0 0 x)))
        (if (logtest? (-> this flags) (vehicle-controller-flag left-turn))
            (vector-float*! (-> s4-0 1) (-> s4-0 1) -1.0)
            )
        (let* ((f0-10 f30-0)
               (f0-12 (* f0-10 f0-10))
               (f1-3 f28-0)
               (f1-6 (sqrtf (- f0-12 (* f1-3 f1-3))))
               (f0-15 (/ (* f28-0 f1-6) f30-0))
               )
          (let ((f1-9 (/ (* f1-6 f1-6) f30-0)))
            (set! (-> arg1 quad) (-> arg0 quad))
            (let ((a1-5 arg1))
              (let ((v1-12 arg1))
                (let ((a0-5 (-> s4-0 0)))
                  (let ((a2-1 f1-9))
                    (.mov vf7 a2-1)
                    )
                  (.lvf vf5 (&-> a0-5 quad))
                  )
                (.lvf vf4 (&-> v1-12 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a1-5 quad) vf6)
              )
            )
          (let ((a0-6 arg1))
            (let ((v1-13 arg1))
              (let ((a1-6 (-> s4-0 1)))
                (let ((a2-2 f0-15))
                  (.mov vf7 a2-2)
                  )
                (.lvf vf5 (&-> a1-6 quad))
                )
              (.lvf vf4 (&-> v1-13 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a0-6 quad) vf6)
            )
          )
        )
      )
    (set! (-> arg1 y) (-> this turn-exit-point y))
    0
    (none)
    )
  )

(defmethod vehicle-controller-method-10 ((this vehicle-controller) (arg0 nav-branch))
  (when (not (logtest? (-> this flags) (vehicle-controller-flag attached)))
    (logior! (-> this flags) (vehicle-controller-flag attached))
    (+! (-> arg0 user-count) 1)
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-11 ((this vehicle-controller))
  (when (logtest? (-> this flags) (vehicle-controller-flag attached))
    (logclear! (-> this flags) (vehicle-controller-flag attached))
    (let ((v1-5 (-> this branch)))
      (if (> (-> v1-5 user-count) 0)
          (+! (-> v1-5 user-count) -1)
          )
      )
    (when (logtest? (-> this flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> this flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> this branch dest-node flags) (nav-node-flag-byte blocked))
      )
    )
  (set! (-> this branch) (the-as nav-branch 0))
  (if (logtest? (-> this flags) (vehicle-controller-flag blocking-dest-node))
      (format #t "blocking-dest-node bit set after detach~%")
      )
  0
  (none)
  )

(defmethod draw-debug-info ((this vehicle-controller))
  (add-debug-sphere #t (bucket-id debug) (-> this dest-circle) (-> this dest-circle w) *color-green*)
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> this target-point) *color-white*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> this turn-exit-point)
    (-> this turn-exit-dir)
    (meters 2)
    *color-red*
    )
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> this turn-enter-point) *color-dark-red*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> this turn-enter-point)
    (-> this turn-enter-dir)
    (meters 2)
    *color-dark-red*
    )
  (when (logtest? (-> this flags) (vehicle-controller-flag on-straightaway))
    (let ((a3-5 (new 'stack-no-clear 'vector)))
      (vector-! a3-5 (-> this target-point) (-> this path-prev-point))
      (add-debug-line-sphere
        #t
        (bucket-id debug)
        (-> this path-prev-point)
        a3-5
        (-> this dest-circle w)
        *color-yellow*
        )
      )
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-9 ((this vehicle-controller))
  (set! (-> this traffic) *traffic-engine*)
  (set! (-> this choose-branch-callback) (the-as
                                           (function vehicle-controller vehicle nav-branch)
                                           (method-of-type vehicle-controller vehicle-controller-method-15)
                                           )
        )
  (set! (-> this turn-accel) 49152.0)
  0
  (none)
  )
