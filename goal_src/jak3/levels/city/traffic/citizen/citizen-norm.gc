;;-*-Lisp-*-
(in-package goal)

;; name: citizen-norm.gc
;; name in dgo: citizen-norm
;; dgos: CWI

;; DECOMP BEGINS

(defskelgroup skel-citizen-norm citizen-norm citizen-norm-lod0-jg -1
              ((citizen-norm-lod0-mg (meters 20)) (citizen-norm-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 2 0 3)
              :shadow citizen-norm-shadow-mg
              )

(define *citizen-norm-global-info*
  (new 'static 'civilian-global-info
    :knocked (new 'static 'array int32 2 18 20)
    :knocked-land (new 'static 'array int32 2 19 21)
    :yellow-hit-anim (new 'static 'inline-array civilian-anim-info 1
      (new 'static 'civilian-anim-info :anim-index (new 'static 'array int32 2 18 20))
      )
    :blue-hit-anim (new 'static 'inline-array civilian-anim-info 3
      (new 'static 'civilian-anim-info :anim-index (new 'static 'array int32 2 24 24))
      (new 'static 'civilian-anim-info :anim-index (new 'static 'array int32 2 24 24))
      (new 'static 'civilian-anim-info :anim-index (new 'static 'array int32 2 24 24))
      )
    :anim-cover-head-start 26
    :anim-cover-head-loop 27
    :anim-cover-head-end 28
    :car-stance-anim 31
    :bike-stance-anim 30
    :get-in-car-anim 32
    :seat-flag #x2
    :speech-ambient 19
    :speech-alert 20
    :speech-cower 21
    :speech-touched-by-player 22
    :speech-shot-by-player 23
    :speech-avoiding-player-vehicle 24
    :speech-hit-by-player-vehicle 25
    )
  )

(deftype citizen-norm (civilian)
  ()
  (:state-methods
    knocked-off-vehicle
    )
  )


(define *citizen-norm-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 2
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x4
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 4
    :notice-anim 4
    :hostile-anim -1
    :hit-anim 4
    :knocked-anim 18
    :knocked-land-anim 19
    :die-anim 4
    :die-falling-anim 4
    :victory-anim 4
    :jump-wind-up-anim 12
    :jump-in-air-anim 12
    :jump-land-anim 12
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :notice-distance (meters 10)
    :notice-distance-delta (meters 0.1)
    :default-hit-points 1.0
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 4.5)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 32768.0
    :knocked-soft-vxz-hi 49152.0
    :knocked-soft-vy-lo 36864.0
    :knocked-soft-vy-hi 73728.0
    :knocked-medium-vxz-lo 81920.0
    :knocked-medium-vxz-hi 143360.0
    :knocked-medium-vy-lo 49152.0
    :knocked-medium-vy-hi 102400.0
    :knocked-hard-vxz-lo 102400.0
    :knocked-hard-vxz-hi 122880.0
    :knocked-hard-vy-lo 81920.0
    :knocked-hard-vy-hi 102400.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 16384.0
    :knocked-yellow-vxz-hi 32768.0
    :knocked-yellow-vy-lo 24576.0
    :knocked-yellow-vy-hi 49152.0
    :knocked-red-vxz-lo 40960.0
    :knocked-red-vxz-hi 61440.0
    :knocked-red-vy-lo 36864.0
    :knocked-red-vy-hi 73728.0
    :knocked-blue-vxz-lo 32768.0
    :knocked-blue-vxz-hi 65536.0
    :knocked-blue-vy-lo 32768.0
    :knocked-blue-vy-hi 49152.0
    :ragdoll-info (new 'static 'ragdoll-setup
      :orient-tform (new 'static 'vector :x 1.0 :w 35283.07)
      :scale (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
      :bg-collide-with (collide-spec backgnd player-list)
      :joint-setup (new 'static 'boxed-array :type ragdoll-joint-setup
        (new 'static 'ragdoll-joint-setup
          :joint-index 3
          :parent-joint -1
          :geo-tform (new 'static 'vector :x 0.0076 :y 0.9921 :z 0.1239)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 944.9472
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 4
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.0794 :z 0.9967 :w 32767.965)
          :geo-tform (new 'static 'vector :x 0.0726 :y 0.1093 :z 0.9912 :w 32708.4)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 1220.1984
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 5
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9988 :z 0.0451 :w 2259.0806)
          :geo-tform (new 'static 'vector :x -0.0157 :y 0.9998 :z -0.012 :w 34465.492)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 1045.7087
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 6
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5419 :z 0.8402 :w 415.13416)
          :geo-tform (new 'static 'vector :x 0.0009 :y 0.9998 :z 0.0122 :w 34465.676)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 369.4592
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 7
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.1383 :z 0.9902 :w 15972.161)
          :geo-tform (new 'static 'vector :x 0.1734 :y 0.2732 :z 0.946 :w 15088.391)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 757.3504
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 8
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.406 :z 0.9137 :w 14397.095)
          :geo-tform (new 'static 'vector :x -0.8824 :y 0.419 :z 0.2128 :w 10897.436)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 943.3088
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 9
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8899 :z 0.4559 :w 9807.463)
          :geo-tform (new 'static 'vector :x 0.5839 :y 0.806 :z 0.0945 :w 7551.8223)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 10
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.3207 :z -0.947 :w 15692.25)
          :geo-tform (new 'static 'vector :x 0.1676 :y -0.0297 :z -0.9852 :w 16216.993)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 11
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.1965 :z -0.9803 :w 16207.8545)
          :geo-tform (new 'static 'vector :x -0.9965 :y -0.0765 :z -0.0291 :w 7626.661)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 12
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9981 :z -0.0585 :w 7603.1772)
          :geo-tform (new 'static 'vector :x 0.9672 :y 0.0993 :z 0.2329 :w 33489.59)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 13
          :parent-joint 3
          :pre-tform (new 'static 'vector :z -1.0 :w 10.15808)
          :geo-tform (new 'static 'vector :x 0.2392 :y 0.0404 :z -0.9699)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 1006.3872
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 14
          :parent-joint -1
          :pre-tform (new 'static 'vector :z -1.0 :w 10839.891)
          :geo-tform (new 'static 'vector :x -0.253 :y -0.0825 :z 0.9637 :w 11579.046)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 15
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.3032 :z 0.9528 :w 11534.791)
          :geo-tform (new 'static 'vector :x 0.9808 :y -0.1876 :z 0.0501 :w 5559.5283)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 16
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9946 :z 0.1021 :w 5458.348)
          :geo-tform (new 'static 'vector :x -0.8838 :y -0.4355 :z -0.1697 :w 10838.162)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 17
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9071 :z -0.4205 :w 9664.376)
          :geo-tform (new 'static 'vector :x -0.8646 :y -0.4535 :z -0.2154 :w 10479.789)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 471.04
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 18
          :parent-joint 13
          :pre-tform (new 'static 'vector :z 1.0 :w 10820.357)
          :geo-tform (new 'static 'vector :x -0.0785 :y 0.0487 :z -0.9956 :w 9567.073)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 19
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1026 :z -0.9946 :w 9554.785)
          :geo-tform (new 'static 'vector :x 0.9932 :y 0.1129 :z -0.0238 :w 4384.3403)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 20
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9987 :z -0.048 :w 4355.8506)
          :geo-tform (new 'static 'vector :x -0.8653 :y 0.5006 :z 0.0132 :w 11708.225)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 758.9888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 21
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9489 :z 0.3149 :w 9987.923)
          :geo-tform (new 'static 'vector :x -0.8062 :y 0.5342 :z 0.2537 :w 11107.588)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 572.2112
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 22
          :parent-joint 9
          :pre-tform (new 'static 'vector :x 0.9998 :z 0.0151 :w 3411.8406)
          :geo-tform (new 'static 'vector :x -0.3858 :y 0.7112 :z 0.5872 :w 20326.883)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 538.624
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 23
          :parent-joint 12
          :pre-tform (new 'static 'vector :x -0.4594 :z 0.888 :w 1846.4587)
          :geo-tform (new 'static 'vector :x 0.2602 :y 0.8098 :z 0.5256 :w 42878.53)
          :axial-slop 1758.7496
          :max-angle 3957.2275
          :coll-rad 548.864
          )
        )
      )
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 12
    :turn-anim 12
    :run-anim 14
    :taunt-anim -1
    :run-travel-speed (meters 12)
    :run-acceleration (meters 2)
    :run-turning-acceleration (meters 30)
    :walk-travel-speed (meters 3)
    :walk-acceleration (meters 2)
    :walk-turning-acceleration (meters 8)
    :maximum-rotation-rate (degrees 720)
    :notice-nav-radius (meters 10)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *citizen-norm-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod coin-flip? ((this citizen-norm))
  #f
  )

;; WARN: Return type mismatch float vs degrees.
(defmethod get-knockback-angle ((this citizen-norm))
  (the-as
    degrees
    (cond
      ((logtest? (-> this flags) (citizen-flag knocked-out-car knocked-out-bike))
       ((method-of-type nav-enemy get-knockback-angle) this)
       )
      (else
        (let ((f30-0 (quaternion-y-angle (-> this root quat))))
          (case (-> this incoming knocked-type)
            (((knocked-type yellow-shot) (knocked-type blue-shot))
             (let ((a0-6 (the-as process-focusable (handle->process (-> this focus handle)))))
               (when a0-6
                 (get-trans a0-6 0)
                 (let ((s5-0 (new 'stack-no-clear 'vector)))
                   (set! (-> s5-0 quad) (-> this root transv quad))
                   (if (< (vector-dot (-> this root transv) (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
                          0.0
                          )
                       (vector-negate-in-place! s5-0)
                       )
                   (set! f30-0 (atan (-> s5-0 x) (-> s5-0 z)))
                   )
                 )
               )
             )
            (else
              (let ((s5-1 (new 'stack-no-clear 'vector)))
                (set! (-> s5-1 quad) (-> this root transv quad))
                (if (< (vector-dot s5-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat))) 0.0)
                    (vector-negate-in-place! s5-1)
                    )
                (let* ((f28-0 (atan (-> s5-1 x) (-> s5-1 z)))
                       (f1-2 (deg- f30-0 f28-0))
                       (f2-0 (fabs f1-2))
                       (f0-8 (-> this enemy-info knocked-seek-ry-clamp))
                       )
                  (when (and (< f0-8 f2-0) (< f2-0 (- 32768.0 f0-8)))
                    (set! f30-0 (+ (cond
                                     ((< f2-0 16384.0)
                                      (if (>= f1-2 0.0)
                                          f0-8
                                          (- f0-8)
                                          )
                                      )
                                     ((>= f1-2 0.0)
                                      (- 32768.0 f0-8)
                                      )
                                     (else
                                       (+ -32768.0 f0-8)
                                       )
                                     )
                                   f28-0
                                   )
                          )
                    (if (< f30-0 0.0)
                        (set! f30-0 (+ 65536.0 f30-0))
                        )
                    )
                  )
                )
              )
            )
          f30-0
          )
        )
      )
    )
  )

(defmethod knocked-anim-handler ((this citizen-norm) (arg0 int) (arg1 enemy-knocked-info))
  (case arg0
    ((1)
     (case (-> this incoming knocked-type)
       (((knocked-type blue-shot))
        (let ((s5-0 (ja-done? 0)))
          (let ((a0-4 (-> this skel root-channel 0)))
            (set! (-> a0-4 param 0) (the float (+ (-> a0-4 frame-group frames num-frames) -1)))
            (set! (-> a0-4 param 1) (-> arg1 anim-speed))
            (joint-control-channel-group-eval! a0-4 (the-as art-joint-anim #f) num-func-seek!)
            )
          (when s5-0
            (ja-channel-push! 1 (seconds 0.1))
            (let ((a0-6 (-> this skel root-channel 0)))
              (set! (-> a0-6 frame-group)
                    (the-as art-joint-anim (-> this draw art-group data (-> this info knocked (-> this hit-face))))
                    )
              (set! (-> a0-6 param 0)
                    (the float
                         (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this info knocked (-> this hit-face))))
                                frames
                                num-frames
                                )
                            -1
                            )
                         )
                    )
              (set! (-> a0-6 param 1) (-> arg1 anim-speed))
              (set! (-> a0-6 frame-num) 3.0)
              (joint-control-channel-group!
                a0-6
                (the-as art-joint-anim (-> this draw art-group data (-> this info knocked (-> this hit-face))))
                num-func-seek!
                )
              )
            )
          s5-0
          )
        )
       (else
         ((method-of-type nav-enemy knocked-anim-handler) this arg0 arg1)
         )
       )
     )
    (else
      ((method-of-type nav-enemy knocked-anim-handler) this arg0 arg1)
      )
    )
  )

(defmethod knocked-anim ((this citizen-norm) (arg0 enemy-knocked-info))
  (local-vars (v1-36 knocked-type))
  (cond
    ((logtest? (-> this flags) (citizen-flag knocked-out-car))
     (ja-channel-push! 1 (seconds 0.1))
     (let ((a0-2 (-> this skel root-channel 0)))
       (set! (-> a0-2 frame-group) (the-as art-joint-anim (-> this draw art-group data 33)))
       (set! (-> a0-2 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 33)) frames num-frames) -1))
             )
       (set! (-> a0-2 param 1) (-> arg0 anim-speed))
       (set! (-> a0-2 frame-num) 0.0)
       (joint-control-channel-group! a0-2 (the-as art-joint-anim (-> this draw art-group data 33)) num-func-seek!)
       )
     (logclear! (-> this flags) (citizen-flag knocked-out-car))
     )
    ((logtest? (-> this flags) (citizen-flag knocked-out-bike))
     (ja-channel-push! 1 (seconds 0.1))
     (let ((a0-5 (-> this skel root-channel 0)))
       (set! (-> a0-5 frame-group) (the-as art-joint-anim (-> this draw art-group data 34)))
       (set! (-> a0-5 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 34)) frames num-frames) -1))
             )
       (set! (-> a0-5 param 1) (-> arg0 anim-speed))
       (set! (-> a0-5 frame-num) 0.0)
       (joint-control-channel-group! a0-5 (the-as art-joint-anim (-> this draw art-group data 34)) num-func-seek!)
       )
     (logclear! (-> this flags) (citizen-flag knocked-out-bike))
     )
    ((begin (set! v1-36 (-> this incoming knocked-type)) (= v1-36 (knocked-type yellow-shot)))
     (ja-channel-push! 1 (seconds 0.1))
     (let* ((a2-2 (ash 1 (-> this info prev-yellow-hit)))
            (v1-39 (enemy-method-131 this 1 a2-2))
            (a1-11
              (-> this
                  draw
                  art-group
                  data
                  (-> (the-as civilian-global-info (+ (+ (* (-> this hit-face) 4) (* v1-39 8)) (the-as uint (-> this info))))
                      yellow-hit-anim
                      0
                      anim-index-front
                      )
                  )
              )
            )
       (set! (-> this info prev-yellow-hit) v1-39)
       (let ((a0-21 (-> this skel root-channel 0)))
         (set! (-> a0-21 frame-group) (the-as art-joint-anim a1-11))
         (set! (-> a0-21 param 0) (the float (+ (-> (the-as art-joint-anim a1-11) frames num-frames) -1)))
         (set! (-> a0-21 param 1) (-> arg0 anim-speed))
         (set! (-> a0-21 frame-num) 0.0)
         (joint-control-channel-group! a0-21 (the-as art-joint-anim a1-11) num-func-seek!)
         )
       )
     )
    ((= v1-36 (knocked-type blue-shot))
     (ja-channel-push! 1 (seconds 0.01))
     (let* ((a2-4 (ash 1 (-> this info prev-blue-hit)))
            (v1-48 (enemy-method-131 this 3 a2-4))
            (a1-18
              (-> this
                  draw
                  art-group
                  data
                  (-> (the-as civilian-global-info (+ (+ (* (-> this hit-face) 4) (* v1-48 8)) (the-as uint (-> this info))))
                      blue-hit-anim
                      0
                      anim-index-front
                      )
                  )
              )
            )
       (set! (-> this info prev-blue-hit) v1-48)
       (let ((a0-36 (-> this skel root-channel 0)))
         (set! (-> a0-36 frame-group) (the-as art-joint-anim a1-18))
         (set! (-> a0-36 param 0) (the float (+ (-> (the-as art-joint-anim a1-18) frames num-frames) -1)))
         (set! (-> a0-36 param 1) 1.0)
         (set! (-> a0-36 frame-num) 0.0)
         (joint-control-channel-group! a0-36 (the-as art-joint-anim a1-18) num-func-seek!)
         )
       )
     )
    (else
      (let ((s4-0 (if (= (-> this incoming knocked-type) (knocked-type explode-or-darkjak))
                      (-> this draw art-group data (-> this info knocked (-> this hit-face)))
                      (-> this draw art-group data (-> this info knocked (-> this hit-face)))
                      )
                  )
            )
        (ja-channel-push! 1 (seconds 0.1))
        (if (or (= (-> this incoming knocked-type) (knocked-type explode-or-darkjak))
                (= (-> this incoming knocked-type) (knocked-type dark-shot))
                )
            (set! (-> arg0 anim-speed) (* 0.5 (-> arg0 anim-speed)))
            )
        (let ((a0-47 (-> this skel root-channel 0)))
          (set! (-> a0-47 frame-group) (the-as art-joint-anim s4-0))
          (set! (-> a0-47 param 0) (the float (+ (-> (the-as art-joint-anim s4-0) frames num-frames) -1)))
          (set! (-> a0-47 param 1) (-> arg0 anim-speed))
          (set! (-> a0-47 frame-num) 0.0)
          (joint-control-channel-group! a0-47 (the-as art-joint-anim s4-0) num-func-seek!)
          )
        )
      )
    )
  #t
  )

(defmethod knocked-land-anim ((this citizen-norm) (arg0 enemy-knocked-info))
  (ja-channel-push! 1 (seconds 0.1))
  (set! (-> arg0 anim-speed) 1.0)
  (let ((a0-2 (-> this skel root-channel 0)))
    (set! (-> a0-2 frame-group)
          (the-as art-joint-anim (-> this draw art-group data (-> this info knocked-land (-> this hit-face))))
          )
    (set! (-> a0-2 param 0)
          (the float
               (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this info knocked-land (-> this hit-face))))
                      frames
                      num-frames
                      )
                  -1
                  )
               )
          )
    (set! (-> a0-2 param 1) (-> arg0 anim-speed))
    (set! (-> a0-2 frame-num) 0.0)
    (joint-control-channel-group!
      a0-2
      (the-as art-joint-anim (-> this draw art-group data (-> this info knocked-land (-> this hit-face))))
      num-func-seek!
      )
    )
  #t
  )

(defstate knocked (citizen-norm)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type civilian knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-5 (the-as collide-shape-prim-group (-> self root root-prim))))
      (logior! (-> v1-5 child 0 prim-core action) (collide-action no-standon))
      (logclear! (-> v1-5 child 1 prim-core action) (collide-action no-standon))
      (set! (-> v1-5 child 1 prim-core collide-as) (collide-spec))
      (set! (-> v1-5 child 1 prim-core collide-with) (collide-spec))
      )
    0
    )
  )

(defstate get-up-front (citizen-norm)
  :virtual #t
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type civilian get-up-front) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-5 (-> self root root-prim)))
      (logclear! (-> (the-as collide-shape-prim-group v1-5) child 0 prim-core action) (collide-action no-standon))
      (logior! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core action) (collide-action no-standon))
      (set! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core collide-as) (collide-spec civilian))
      (set! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core collide-with)
            (collide-spec backgnd jak civilian enemy hit-by-others-list player-list)
            )
      )
    )
  )

(defstate get-up-back (citizen-norm)
  :virtual #t
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type civilian get-up-back) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-5 (-> self root root-prim)))
      (logclear! (-> (the-as collide-shape-prim-group v1-5) child 0 prim-core action) (collide-action no-standon))
      (logior! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core action) (collide-action no-standon))
      (set! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core collide-as) (collide-spec civilian))
      (set! (-> (the-as collide-shape-prim-group v1-5) child 1 prim-core collide-with)
            (collide-spec backgnd jak civilian enemy hit-by-others-list player-list)
            )
      )
    )
  )

(defstate wait (citizen-norm)
  :virtual #t
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (until #f
      (let ((f30-1 (/ 1.0 (rand-vu-float-range 10.0 13.0)))
            (gp-0 (rand-vu-int-range 1 5))
            (s5-0 (rand-vu-int-count 2))
            )
        (ja-channel-push! 1 (seconds 0.2))
        (if (zero? s5-0)
            (ja-no-eval :group! citizen-norm-idle-to-arms-hips-ja :num! min)
            (ja-no-eval :group! citizen-norm-idle-to-arms-crossed-ja :num! min)
            )
        (let ((f28-0 0.0))
          (while (< f28-0 1.0)
            (ja :num-func num-func-identity
                :frame-num (lerp-scale 0.0 2.0 (+ (* -2.0 f28-0 f28-0 f28-0) (* 3.0 f28-0 f28-0)) 0.0 1.0)
                )
            (suspend)
            (+! f28-0 (seconds-per-frame))
            )
          )
        (ja-channel-push! 1 (seconds 0.1))
        (while (> gp-0 0)
          (+! gp-0 -1)
          (cond
            ((zero? s5-0)
             (ja-no-eval :group! citizen-norm-arms-hips-ja :num! (seek! max f30-1) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek! max f30-1))
               )
             )
            (else
              (ja-no-eval :group! citizen-norm-arms-crossed-ja :num! (seek! max f30-1) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek! max f30-1))
                )
              )
            )
          )
        )
      (if (-> self wait-return-state)
          (go (-> self wait-return-state))
          )
      )
    #f
    )
  )

(defmethod go-from-behavior ((this citizen-norm) (arg0 traffic-object-spawn-params))
  (case (-> arg0 behavior)
    ((11)
     (speech-control-method-12 *speech-control* this (speech-type civ-m-player-stealing-vehicle))
     (set! (-> this root trans quad) (-> arg0 position quad))
     (quaternion-copy! (-> this root quat) (-> arg0 rotation))
     (set! (-> this vehicle) (-> arg0 handle))
     (ja-channel-set! 1)
     (case (-> (the-as vehicle (handle->process (-> this vehicle))) info object-type)
       (((traffic-type civilian-bike-a) (traffic-type civilian-bike-b) (traffic-type civilian-bike-c))
        (logior! (-> this flags) (citizen-flag knocked-out-bike))
        (let ((v1-16 (-> this skel root-channel 0)))
          (set! (-> v1-16 frame-group) (the-as art-joint-anim (-> this draw art-group data 30)))
          )
        )
       (((traffic-type civilian-car-a) (traffic-type civilian-car-b) (traffic-type civilian-car-c))
        (logior! (-> this flags) (citizen-flag knocked-out-car))
        (let ((v1-22 (-> this skel root-channel 0)))
          (set! (-> v1-22 frame-group) (the-as art-joint-anim (-> this draw art-group data 31)))
          )
        )
       )
     (ja-post)
     (setup-masks (-> this draw) 0 -1)
     (let ((s5-1 (-> arg0 user-data)))
       (if (not (logtest? s5-1 32))
           (setup-masks (-> this draw) 32 0)
           )
       (if (not (logtest? s5-1 16))
           (setup-masks (-> this draw) 16 0)
           )
       (if (not (logtest? s5-1 2))
           (setup-masks (-> this draw) 2 0)
           )
       (if (not (logtest? s5-1 4096))
           (setup-masks (-> this draw) 8192 0)
           )
       (if (not (logtest? s5-1 8))
           (setup-masks (-> this draw) 8 0)
           )
       (if (not (logtest? s5-1 512))
           (setup-masks (-> this draw) 1024 0)
           )
       (if (not (logtest? s5-1 #x4000))
           (setup-masks (-> this draw) #x8000 0)
           )
       (if (not (logtest? s5-1 4))
           (setup-masks (-> this draw) 4 0)
           )
       (if (not (logtest? s5-1 256))
           (setup-masks (-> this draw) 512 0)
           )
       (if (not (logtest? s5-1 8192))
           (setup-masks (-> this draw) #x4000 0)
           )
       (if (not (logtest? s5-1 64))
           (setup-masks (-> this draw) 128 0)
           )
       (if (not (logtest? s5-1 2048))
           (setup-masks (-> this draw) 4096 0)
           )
       (if (not (logtest? #x10000 s5-1))
           (setup-masks (-> this draw) #x20000 0)
           )
       (if (not (logtest? s5-1 128))
           (setup-masks (-> this draw) 256 0)
           )
       (if (logtest? #x40000 s5-1)
           (setup-masks (-> this draw) 2048 0)
           (setup-masks (-> this draw) 2048 0)
           )
       )
     (go (method-of-object this knocked-off-vehicle))
     )
    (else
      ((method-of-type civilian go-from-behavior) this arg0)
      )
    )
  0
  (none)
  )

(defstate knocked-off-vehicle (citizen-norm)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    '()
    )
  :code (behavior ()
    (suspend)
    (citizen-method-206 self)
    )
  )

(defmethod init-enemy-collision! ((this citizen-norm))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec civilian))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak civilian enemy hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 8192.0 0.0 12288.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec civilian))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak civilian enemy hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 4096.0 0.0 4096.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec civilian))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd jak civilian enemy hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-15 local-sphere) 0.0 9830.4 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) 4096.0)
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod init-enemy! ((this citizen-norm))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-citizen-norm" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this *citizen-norm-nav-enemy-info*)
  (let ((v1-5 (-> this nav)))
    (set! (-> v1-5 speed-scale) 1.0)
    )
  0
  (set! (-> this draw lod-set lod 0 dist) 204800.0)
  (set! (-> this draw lod-set lod 1 dist) 491520.0)
  (try-update-focus (-> this focus) *target* this)
  (-> this neck)
  (set! (-> this info) *citizen-norm-global-info*)
  (set! (-> this anim-shuffle) 11)
  (let ((v1-18 (rnd-int this 3)))
    (cond
      ((zero? v1-18)
       (set! (-> this anim-walk) 12)
       (set! (-> this dist-walk-anim) 8736.768)
       (set! (-> this speed-walk) 10240.0)
       )
      ((= v1-18 1)
       (set! (-> this anim-walk) 13)
       (set! (-> this dist-walk-anim) 13107.2)
       (set! (-> this speed-walk) 12288.0)
       )
      ((= v1-18 2)
       (set! (-> this anim-walk) 11)
       (set! (-> this dist-walk-anim) 4370.432)
       (set! (-> this speed-walk) 4096.0)
       )
      )
    )
  (let ((v1-33 (rnd-int this 3)))
    (cond
      ((zero? v1-33)
       (set! (-> this anim-panic-run) 15)
       )
      ((= v1-33 1)
       (set! (-> this anim-panic-run) 15)
       )
      ((= v1-33 2)
       (set! (-> this anim-panic-run) 14)
       )
      )
    )
  (set! (-> this dist-run-anim) 28672.0)
  (let ((v1-40 (rnd-int this 3)))
    (cond
      ((zero? v1-40)
       (set! (-> this anim-run) 14)
       )
      ((= v1-40 1)
       (set! (-> this anim-run) 14)
       )
      ((= v1-40 2)
       (set! (-> this anim-run) 14)
       )
      )
    )
  (set! (-> this speed-run) 49152.0)
  (set! (-> this anim-on-ground) 17)
  (set! (-> this anim-dive) 16)
  (set! (-> this anim-get-up-front) 22)
  (set! (-> this anim-get-up-back) 23)
  (let ((f30-0 (rnd-float-range this 1.0 1.25))
        (f0-11 (rnd-float-range this 1.0 1.25))
        )
    (set-vector! (-> this root scale) f0-11 f30-0 f0-11 1.0)
    )
  (let ((f0-13 (rnd-float-range this 0.9 1.0)))
    (set-vector! (-> this draw color-mult) f0-13 f0-13 f0-13 1.0)
    )
  (set! (-> this water-anim) 29)
  0
  (none)
  )

(defmethod citizen-method-194 ((this citizen-norm))
  (let ((t9-0 (method-of-type civilian citizen-method-194)))
    (t9-0 this)
    )
  (set! (-> this dive-reaction) (+ 0.09 (* 0.15 (rand-vu))))
  (logclear! (-> this mask) (process-mask enemy))
  (setup-masks (-> this draw) 0 -1)
  (setup-masks (-> this draw) 32 0)
  (let ((v1-10 (rnd-int this 4)))
    (cond
      ((zero? v1-10)
       (setup-masks (-> this draw) 64 0)
       )
      ((= v1-10 1)
       (setup-masks (-> this draw) 2048 0)
       )
      ((= v1-10 2)
       (setup-masks (-> this draw) #x10000 0)
       )
      ((= v1-10 3)
       (setup-masks (-> this draw) #x200000 0)
       )
      )
    )
  (let ((v1-21 (rnd-int this 3)))
    (cond
      ((zero? v1-21)
       (setup-masks (-> this draw) 2 0)
       )
      ((= v1-21 1)
       (setup-masks (-> this draw) 8192 0)
       )
      ((= v1-21 2)
       (setup-masks (-> this draw) #x40000 0)
       )
      )
    )
  (let ((v1-30 (rnd-int this 4)))
    (cond
      ((zero? v1-30)
       (setup-masks (-> this draw) 8 0)
       )
      ((= v1-30 1)
       (setup-masks (-> this draw) 1024 0)
       )
      ((= v1-30 2)
       (setup-masks (-> this draw) #x8000 0)
       )
      ((= v1-30 3)
       (setup-masks (-> this draw) #x100000 0)
       )
      )
    )
  (let ((v1-41 (rnd-int this 5)))
    (cond
      ((zero? v1-41)
       (setup-masks (-> this draw) 4 0)
       )
      ((= v1-41 1)
       (setup-masks (-> this draw) 512 0)
       )
      ((= v1-41 2)
       (setup-masks (-> this draw) #x4000 0)
       )
      ((= v1-41 3)
       (setup-masks (-> this draw) #x80000 0)
       )
      )
    )
  (let ((v1-52 (rnd-int this 4)))
    (cond
      ((zero? v1-52)
       (setup-masks (-> this draw) 128 0)
       )
      ((= v1-52 1)
       (setup-masks (-> this draw) 4096 0)
       )
      ((= v1-52 2)
       (setup-masks (-> this draw) #x20000 0)
       )
      ((= v1-52 3)
       (setup-masks (-> this draw) #x400000 0)
       )
      )
    )
  (setup-masks (-> this draw) 16 0)
  (let ((v1-65 (rnd-int this 4)))
    (cond
      ((zero? v1-65)
       (setup-masks (-> this draw) 256 0)
       )
      ((= v1-65 1)
       (setup-masks (-> this draw) #x800000 0)
       )
      )
    )
  0
  (none)
  )
