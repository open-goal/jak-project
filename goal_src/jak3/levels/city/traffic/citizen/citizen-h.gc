;;-*-Lisp-*-
(in-package goal)

;; name: citizen-h.gc
;; name in dgo: citizen-h
;; dgos: DESRESC, WWD, CWI

;; +++citizen-flag
(defenum citizen-flag
  :type uint16
  :bitfield #t
  (persistent)
  (run-mode)
  (shuffle-mode)
  (in-pursuit)
  (hostile)
  (target-in-sight)
  (sticky-weapon)
  (knocked-out-car)
  (knocked-out-bike)
  (dark-guard)
  (female)
  (in-formation)
  (neck-no-auto-look-at)
  (talking)
  (in-mission)
  )
;; ---citizen-flag


;; DECOMP BEGINS

(deftype citizen (nav-enemy)
  ((self                     citizen            :override)
   (ppointer                 (pointer citizen)  :override)
   (flags                    citizen-flag)
   (traffic-id               int8)
   (hit-by-player-count      int8)
   (gnd-height               float)
   (speed-scale              float)
   (controller               vehicle-controller  :inline)
   (squad                    squad-control)
   (danger-pos               sphere              :inline)
   (dest-point               vector              :inline :overlay-at (-> controller turn-exit-point))
   (vehicle                  handle)
   (formation                handle                      :overlay-at vehicle)
   (formation-index          int8)
   (anim-shuffle             int32)
   (dist-walk-anim           float)
   (speed-walk               float)
   (anim-walk                int32)
   (dist-run-anim            float)
   (speed-run                float)
   (anim-run                 int32)
   (travel-anim-scale-speed  float)
   (water-anim               int32)
   (interp                   float)
   (last-danger-time         time-frame)
   (next-time-look-at        time-frame)
   (stop-time-look-at        time-frame)
   (wait-return-state        (state citizen))
   (wait-time                time-frame)
   (shield-handle            handle)
   (cp-valid?                symbol)
   (cp-sphere                sphere              :inline)
   (cp-vec                   vector              :inline)
   (cp-next-time             time-frame)
   (cp-exit-time             time-frame)
   (cp-force                 vector              :inline)
   (cp-plane                 plane               :inline)
   (cp-factor                float)
   (faction-mode             uint8)
   (attacker-info            city-attacker-info)
   (mission-squad            mission-squad-control)
   (probe-counter            uint32)
   )
  (:state-methods
    wait
    inactive
    in-ditch
    )
  (:methods
    (init-enemy-defaults! (_type_ nav-enemy-info) none :replace)
    (set-squad (_type_) none)
    (citizen-method-194 (_type_) none)
    (citizen-method-195 (_type_) none)
    (go-inactive (_type_) none)
    (find-segment (_type_ vector vector) nav-segment)
    (nav-segment-callback (_type_ vector traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (citizen-method-199 (_type_ nav-segment) none)
    (citizen-method-200 (_type_) symbol)
    (citizen-method-201 (_type_ vector) none)
    (citizen-method-202 (_type_ vector vector) none)
    (citizen-method-203 (_type_ vector) none)
    (gen-clear-path (_type_) nav-segment)
    (citizen-method-205 (_type_) none)
    (citizen-method-206 (_type_) none)
    (citizen-method-207 (_type_ vector float) nav-segment)
    (citizen-method-208 (_type_ vector) none)
    (get-run-anim (_type_) int)
    (citizen-method-210 (_type_ int process) none)
    (set-alert-level (_type_ int) none)
    (go-from-behavior (_type_ traffic-object-spawn-params) none)
    (citizen-method-213 (_type_) none)
    (citizen-method-214 (_type_ nav-control vector) none)
    (citizen-method-215 (_type_) none)
    )
  )
