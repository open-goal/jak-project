;;-*-Lisp-*-
(in-package goal)

;; name: ctywide-tasks.gc
;; name in dgo: ctywide-tasks
;; dgos: CWI

;; DECOMP BEGINS

(defun wait-for-speech-end ((arg0 sound-id))
  (while (nonzero? (get-status *gui-control* arg0))
    (suspend)
    )
  #f
  )

(deftype task-manager-city-vehicle-training-hover-zone-1 (task-manager)
  ((speech-id  sound-id)
   )
  )


(defmethod task-manager-method-26 ((this task-manager-city-vehicle-training-hover-zone-1))
  (when (and (!= (-> this player-vehicle) #f) (not (and *target* (focus-test? *target* pilot))))
    (set! (-> this speech-id)
          (talker-spawn-func (-> *talker-speech* 30) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (send-event this 'fail)
    )
  (call-parent-method this)
  (none)
  )

(defstate active (task-manager-city-vehicle-training-hover-zone-1)
  :virtual #t
  :code (behavior ()
    (until #f
      (if (and *target* (focus-test? *target* pilot))
          (goto cfg-7)
          )
      (suspend)
      )
    #f
    (label cfg-7)
    (set! (-> self player-vehicle) (-> *target* pilot vehicle))
    (while (or (not *target*) (focus-test? *target* dead teleporting))
      (suspend)
      )
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 26) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (wait-for-speech-end (-> self speech-id))
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (seconds 1))
        (suspend)
        )
      )
    (while (or (not *target*) (focus-test? *target* dead teleporting))
      (suspend)
      )
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 27) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (wait-for-speech-end (-> self speech-id))
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 1))
        (suspend)
        )
      )
    (while (or (not *target*) (focus-test? *target* dead teleporting))
      (suspend)
      )
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 28) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (while (let ((v1-36 (handle->process (-> self player-vehicle))))
             (not (logtest? (vehicle-flag flight-level-transition) (-> (the-as vehicle v1-36) v-flags)))
             )
      (suspend)
      )
    (wait-for-speech-end (-> self speech-id))
    (while (or (not *target*) (focus-test? *target* dead teleporting))
      (suspend)
      )
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 29) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (wait-for-speech-end (-> self speech-id))
    (set! (-> self player-vehicle) (the-as handle #f))
    (let ((gp-6 (current-time)))
      (until (time-elapsed? gp-6 (seconds 1))
        (suspend)
        )
      )
    (send-event self 'complete)
    (let ((t9-14 (-> (find-parent-state) code)))
      (if t9-14
          ((the-as (function none) t9-14))
          )
      )
    )
  )

(defstate fail (task-manager-city-vehicle-training-hover-zone-1)
  :virtual #t
  :code (behavior ((arg0 resetter-params))
    (task-node-close! (game-task-node city-vehicle-training-hover-zone-1) 'event)
    (sleep-code)
    (let ((t9-3 (-> (find-parent-state) code)))
      (if t9-3
          ((the-as (function none) t9-3))
          )
      )
    )
  )

(defstate complete (task-manager-city-vehicle-training-hover-zone-1)
  :virtual #t
  :code (behavior ()
    (task-node-close! (game-task-node city-vehicle-training-hover-zone-2) 'event)
    (let ((t9-2 (-> (find-parent-state) code)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(deftype task-manager-city-vehicle-training-hover-zone-2 (task-manager)
  ((speech-id  sound-id)
   )
  )


;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-city-vehicle-training-hover-zone-2))
  (if (not (and *target* (focus-test? *target* pilot)))
      (send-event this 'fail)
      )
  (none)
  )

(defstate active (task-manager-city-vehicle-training-hover-zone-2)
  :virtual #t
  :code (behavior ()
    (set-time! (-> self state-time))
    (until #f
      (cond
        ((and *target* (focus-test? *target* pilot))
         (let ((v1-8 (the-as vehicle (handle->process (-> *target* pilot vehicle)))))
           (if (logtest? (vehicle-flag flight-level-transition) (-> v1-8 v-flags))
               (go-virtual complete)
               )
           )
         )
        (else
          (set-time! (-> self state-time))
          )
        )
      (if (time-elapsed? (-> self state-time) (seconds 60))
          (goto cfg-18)
          )
      (suspend)
      )
    #f
    (label cfg-18)
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 27) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (wait-for-speech-end (-> self speech-id))
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (seconds 1))
        (suspend)
        )
      )
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 28) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (until #f
      (let ((v1-35 (handle->process (-> *target* pilot vehicle))))
        (if (logtest? (vehicle-flag flight-level-transition) (-> (the-as vehicle v1-35) v-flags))
            (goto cfg-30)
            )
        )
      (suspend)
      )
    #f
    (label cfg-30)
    (wait-for-speech-end (-> self speech-id))
    (set! (-> self speech-id)
          (talker-spawn-func (-> *talker-speech* 29) *entity-pool* (target-pos 0) (the-as region #f))
          )
    (wait-for-speech-end (-> self speech-id))
    (let ((gp-4 (current-time)))
      (until (time-elapsed? gp-4 (seconds 3))
        (suspend)
        )
      )
    (go-virtual complete)
    )
  )

(deftype cty-hijack-intro (task-manager)
  ()
  )


(defstate active (cty-hijack-intro)
  :virtual #t
  :trans (behavior ()
    ((-> (method-of-object self wait) trans))
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 5))
        (suspend)
        )
      )
    (until (< 327680.0
              (vector-vector-xz-distance (target-pos 0) (new 'static 'vector :x -285696.0 :y 36044.8 :z 5443625.0 :w 1.0))
              )
      (suspend)
      )
    (set-setting! 'airlock-command '(("hip-door-a-6" close)) 0.0 0)
    (talker-spawn-func (-> *talker-speech* 162) *entity-pool* (target-pos 0) (the-as region #f))
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 5))
        (suspend)
        )
      )
    (until (handle-command-list *gui-control* (gui-channel voicebox) (the-as gui-connection #f))
      (suspend)
      )
    (send-event self 'complete)
    )
  )

(defmethod task-manager-method-25 ((this cty-hijack-intro))
  (nop!)
  (call-parent-method this)
  (none)
  )

(deftype task-manager-force-load-borrows (task-manager)
  ()
  )


(defstate active (task-manager-force-load-borrows)
  :virtual #t
  :exit (behavior ()
    (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0)
    )
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (local-vars (v1-22 symbol))
    (send-event (ppointer->process *time-of-day*) 'change 'hour 8)
    (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.0)
    (when (> (-> (task-perm-by-index *game-info* 46) user-uint64) 0)
      (set-blackout-frames (seconds 100))
      (until (process-grab? *target* #f)
        (suspend)
        )
      )
    (until v1-22
      (suspend)
      (set! v1-22 (and (= (status-of-level-and-borrows *level* 'ctypesb #f) 'active)
                       (= (status-of-level-and-borrows *level* 'ctypesc #f) 'active)
                       (= (status-of-level-and-borrows *level* 'ctypesa #f) 'active)
                       )
            )
      )
    (send-event self 'complete)
    )
  )

(deftype task-manager-blackout (task-manager)
  ()
  )


(defstate active (task-manager-blackout)
  :virtual #t
  :code (behavior ()
    (persist-with-delay *setting-control* 'task-manager-blackout (seconds 10) 'music 'portattk 0.0 0)
    (persist-with-delay
      *setting-control*
      'task-manager-blackout2
      (seconds 10)
      'city-sound
      (the-as symbol '(portatk1))
      0.0
      2
      )
    (set-blackout-frames (seconds 100))
    (send-event self 'complete)
    )
  )
