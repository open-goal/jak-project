;;-*-Lisp-*-
(in-package goal)

;; name: blow-tower-obs.gc
;; name in dgo: blow-tower-obs
;; dgos: LCTYBLOW

;; DECOMP BEGINS

(deftype tower-enemy-init-params (structure)
  ((pos             vector  :inline)
   (entity-name     string)
   (target          handle)
   (time-offset     float)
   (activate-time   time-frame)
   (bool-userdata?  symbol)
   )
  )


(deftype blow-tower-enemy (process-focusable)
  ((hit-points       float)
   (last-attack-id   uint32)
   (last-attack-dir  vector  :inline)
   (last-attack-pos  vector  :inline)
   )
  (:state-methods
    idle
    dormant
    )
  (:methods
    (bt-enemy-handler (_type_ process int symbol event-message-block) object)
    (on-hit (_type_ float) none)
    (on-death (_type_) object)
    (init (_type_) object :behavior blow-tower-enemy)
    (blow-tower-enemy-method-34 (_type_) none)
    (blow-tower-enemy-method-35 (_type_) none)
    (blow-tower-enemy-method-36 (_type_) none)
    (get-damage-from-attack (_type_ attack-info process-focusable) float)
    )
  )


(defbehavior blow-tower-enemy-handler blow-tower-enemy ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (bt-enemy-handler self arg0 arg1 arg2 arg3)
  )

(defmethod blow-tower-enemy-method-36 ((this blow-tower-enemy))
  (logclear! (-> this focus-status) (focus-status dead))
  0
  (none)
  )

(defstate idle (blow-tower-enemy)
  :virtual #t
  :code nothing
  )

(defstate dormant (blow-tower-enemy)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('blow-tower-debug-end)
       (when (type? (-> self root) collide-shape)
         (let ((v1-3 (-> self root root-prim)))
           (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
           (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
           )
         )
       (logclear! (-> self draw status) (draw-control-status no-draw))
       (transform-post)
       (blow-tower-enemy-method-36 self)
       (go-virtual idle)
       )
      )
    )
  :enter (behavior ()
    (when (type? (-> self root) collide-shape)
      (let ((v1-2 (-> self root root-prim)))
        (set! (-> v1-2 prim-core collide-as) (collide-spec))
        (set! (-> v1-2 prim-core collide-with) (collide-spec))
        )
      0
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (transform-post)
    (logior! (-> self mask) (process-mask actor-pause))
    (process-entity-status! self (entity-perm-status no-kill) #f)
    )
  :code sleep-code
  )

(defmethod init ((this blow-tower-enemy))
  (set! (-> this hit-points) 5.0)
  (if (!= (status-of-level-and-borrows *level* 'lctyblow #f) 'active)
      (go empty-state)
      )
  )

;; WARN: Return type mismatch rgbaf vs none.
(defmethod on-hit ((this blow-tower-enemy) (arg0 float))
  (set-vector! (-> this draw color-emissive) 2.0 2.0 2.0 2.0)
  (none)
  )

;; WARN: Return type mismatch float vs none.
(defmethod blow-tower-enemy-method-34 ((this blow-tower-enemy))
  (let ((f30-0 (fmin 1.0 (* 20.0 (seconds-per-frame)))))
    (seek! (-> this draw color-emissive x) 0.0 f30-0)
    (seek! (-> this draw color-emissive y) 0.0 f30-0)
    (seek! (-> this draw color-emissive z) 0.0 f30-0)
    (seek! (-> this draw color-emissive w) 0.0 f30-0)
    )
  (none)
  )

;; WARN: Return type mismatch float vs none.
(defmethod blow-tower-enemy-method-35 ((this blow-tower-enemy))
  (let ((s5-0 (new 'stack-no-clear 'collide-query))
        (gp-0 (-> this root trans))
        )
    (vector+float*! (-> s5-0 start-pos) gp-0 *up-vector* 24576.0)
    (set! (-> s5-0 move-dist quad) (the-as uint128 0))
    (set! (-> s5-0 move-dist y) -81920.0)
    (let ((v1-5 s5-0))
      (set! (-> v1-5 radius) 409.6)
      (set! (-> v1-5 collide-with) (collide-spec backgnd))
      (set! (-> v1-5 ignore-process0) #f)
      (set! (-> v1-5 ignore-process1) #f)
      (set! (-> v1-5 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-5 action-mask) (collide-action solid))
      )
    (when (>= (fill-and-probe-using-line-sphere *collide-cache* s5-0) 0.0)
      (if (< (fabs (- (-> s5-0 best-other-tri intersect y) (-> this root trans y))) 12288.0)
          (set! (-> gp-0 y) (fmax 0.0 (-> s5-0 best-other-tri intersect y)))
          )
      )
    )
  (none)
  )

(defmethod on-death ((this blow-tower-enemy))
  (logior! (-> this focus-status) (focus-status dead))
  (cond
    ((logtest? (-> *part-group-id-table* 1457 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> (get-trans this 3) quad))
     (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1457))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> (get-trans this 3) quad))
      (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1457))
      )
    )
  (go empty-state)
  )

(defmethod get-damage-from-attack ((this blow-tower-enemy) (arg0 attack-info) (arg1 process-focusable))
  (if (logtest? (attack-mask damage) (-> arg0 mask))
      (-> arg0 damage)
      (penetrate-using->damage (-> arg0 penetrate-using))
      )
  )

(defmethod bt-enemy-handler ((this blow-tower-enemy) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((s4-0 (the-as attack-info (-> arg3 param 1))))
       (when (and (!= (-> s4-0 id) (-> this last-attack-id)) (or (= (-> s4-0 mode) 'eco-blue) (= (-> s4-0 mode) 'explode)))
         (set! (-> this last-attack-id) (-> s4-0 id))
         (let ((f30-0 (get-damage-from-attack this s4-0 (the-as process-focusable arg0))))
           (let ((s3-0 (new 'stack-no-clear 'attack-info)))
             (attack-info-method-9 s4-0 s3-0 (the-as process-drawable arg0) this)
             (set! (-> this last-attack-dir quad) (-> s3-0 trans quad))
             (set! (-> this last-attack-pos quad) (-> s3-0 intersection quad))
             )
           (set! (-> this hit-points) (- (-> this hit-points) f30-0))
           (if (>= 0.0 (-> this hit-points))
               (on-death this)
               (on-hit this f30-0)
               )
           )
         )
       )
     )
    (else
      #f
      )
    )
  )

(deftype tower-flyer-bobber (structure)
  ((start-val            float)
   (current-val          float)
   (total-time           time-frame)
   (current-time         time-frame)
   (current-size-scalar  float)
   (dir                  float)
   (num-iterations       float)
   (time-scalar          float)
   (start-time-scalar    float)
   (desired-time-scalar  float)
   (scale-min            float)
   (scale-max            float)
   (time-min             float)
   (time-max             float)
   (base-time            float)
   (current-speed        float)
   (output-scale         float)
   (output-val           float)
   (charge-time          time-frame)
   (wait-time            time-frame)
   )
  :allow-misaligned
  (:methods
    (init-fields (_type_) none)
    (tower-flyer-bobber-method-10 (_type_) none)
    (tower-flyer-bobber-method-11 (_type_) none)
    )
  )


(deftype tower-flyer (blow-tower-enemy)
  ((focus                handle)
   (local-offset         vector              :inline)
   (basetrans            vector              :inline)
   (surround-spot        int32)
   (desired-z-dist       float)
   (current-z-dist       float)
   (use-z-dist           float)
   (bobbers              tower-flyer-bobber  3 :inline)
   (spot-base-pos        vector              :inline)
   (hover-end-time       time-frame)
   (total-charge-time    time-frame          :overlay-at hover-end-time)
   (charge-part          sparticle-launch-control)
   (charge-t             float)
   (last-wall-clip-time  time-frame)
   (spawn-path-time      time-frame)
   (bob-vec              vector              :inline)
   (bob-y-scalar         float)
   (entity-pos           vector)
   (buzz-sound           sound-id)
   (charge-sound         sound-id)
   )
  (:state-methods
    hovering
    charging
    firing
    fleeing
    )
  (:methods
    (tower-flyer-method-42 (_type_) none)
    (tower-flyer-method-43 (_type_) none)
    (fire-projectile (_type_) none)
    (tower-flyer-method-45 (_type_) none)
    (tower-flyer-method-46 (_type_) none)
    (tower-flyer-method-47 (_type_ vector quaternion vector) symbol)
    (tower-flyer-method-48 (_type_ vector) quaternion)
    (tower-flyer-method-49 (_type_ vector quaternion) quaternion)
    )
  )


(defmethod on-hit ((this tower-flyer) (arg0 float))
  (if (and (-> this next-state) (= (-> this next-state name) 'charging))
      (go (method-of-object this hovering))
      )
  (call-parent-method this arg0)
  (none)
  )

;; WARN: Return type mismatch int vs object.
(defmethod init ((this tower-flyer))
  (call-parent-method this)
  (set! (-> this charge-part) (create-launch-control (-> *part-group-id-table* 1456) this))
  (set! (-> this charge-t) 0.0)
  (set! (-> this buzz-sound) (new-sound-id))
  (set! (-> this charge-sound) (new-sound-id))
  (set! (-> this hit-points) 3.0)
  0
  )

(defmethod deactivate ((this tower-flyer))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (sound-stop (-> this buzz-sound))
  (sound-stop (-> this charge-sound))
  (call-parent-method this)
  (none)
  )

(defbehavior tower-flyer-init-by-other tower-flyer ((arg0 tower-enemy-init-params))
  (tower-flyer-method-42 self)
  (quaternion-identity! (-> self root quat))
  (set! (-> self focus) (-> arg0 target))
  (set! (-> self entity-pos) #f)
  (let ((v1-4 (entity-by-name (-> arg0 entity-name))))
    (if v1-4
        (set! (-> self entity-pos) (-> v1-4 extra trans))
        )
    )
  (set! (-> self spawn-path-time)
        (+ (-> *blow-tower-targets* mission-time) (the int (* 300.0 (-> arg0 time-offset))))
        )
  (init self)
  (set! (-> self surround-spot)
        (the-as int (send-event (handle->process (-> self focus)) 'assign-spot (process->handle self) #f))
        )
  (if (< (-> self surround-spot) 0)
      (go empty-state)
      (go-virtual idle)
      )
  )

;; WARN: Return type mismatch float vs none.
(defmethod tower-flyer-method-46 ((this tower-flyer))
  (cond
    ((-> this entity-pos)
     (set! (-> this basetrans quad) (-> this entity-pos quad))
     (set! (-> this root trans quad) (-> this entity-pos quad))
     (let* ((s4-0 (handle->process (-> this focus)))
            (s5-0 (if (type? s4-0 process-focusable)
                      (the-as process-focusable s4-0)
                      )
                  )
            )
       (when s5-0
         (let ((a0-9 (new 'stack-no-clear 'vector)))
           (set! (-> a0-9 quad)
                 (-> (vector-! (new 'stack-no-clear 'vector) (-> s5-0 root trans) (-> this root trans)) quad)
                 )
           (set! (-> a0-9 y) 0.0)
           (let ((a1-5 (vector-normalize! a0-9 1.0)))
             (vector-! (-> this local-offset) (-> this basetrans) (-> s5-0 root trans))
             (quaternion-look-at! (-> this root quat) a1-5 *up-vector*)
             )
           )
         )
       )
     )
    (else
      (let ((s5-1 (new 'stack 'blow-tower-path-cursor)))
        (let ((s4-1 (new 'stack-no-clear 'vector)))
          (let ((s3-0 (new 'stack-no-clear 'quaternion)))
            (set! (-> s5-1 path) (the-as blow-tower-path (send-event (handle->process (-> this focus)) 'get-path)))
            (blow-tower-path-cursor-method-9 s5-1 (the-as int (-> this spawn-path-time)))
            (set! (-> s4-1 quad) (-> s5-1 pos quad))
            (let ((s2-0 quaternion-look-at!)
                  (s1-0 s3-0)
                  (a0-22 (-> s5-1 norm))
                  )
              (set! (-> a0-22 quad) (-> s5-1 norm quad))
              (set! (-> a0-22 y) 0.0)
              (s2-0 s1-0 (vector-normalize! a0-22 1.0) *up-vector*)
              )
            (send-event (handle->process (-> this focus)) 'retrieve-spot (-> this surround-spot) s4-1 s3-0)
            (let ((s2-1 (new 'stack-no-clear 'collide-query)))
              (let ((v1-33 (vector-z-quaternion! (new 'stack-no-clear 'vector) s3-0)))
                (set! (-> s2-1 start-pos quad) (-> s4-1 quad))
                (vector-float*! (-> s2-1 move-dist) v1-33 61440.0)
                )
              (let ((v1-34 s2-1))
                (set! (-> v1-34 radius) 4096.0)
                (set! (-> v1-34 collide-with) (collide-spec backgnd))
                (set! (-> v1-34 ignore-process0) #f)
                (set! (-> v1-34 ignore-process1) #f)
                (set! (-> v1-34 ignore-pat)
                      (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                      )
                (set! (-> v1-34 action-mask) (collide-action solid))
                )
              (let ((f0-4 (fill-and-probe-using-line-sphere *collide-cache* s2-1)))
                (if (>= f0-4 0.0)
                    (vector-float*! (-> s2-1 move-dist) (-> s2-1 move-dist) f0-4)
                    )
                )
              (vector+! s4-1 s4-1 (-> s2-1 move-dist))
              )
            )
          (set! (-> this basetrans quad) (-> s4-1 quad))
          )
        (set! (-> this root trans quad) (-> this basetrans quad))
        (let* ((s4-2 (handle->process (-> this focus)))
               (a1-20 (if (type? s4-2 process-focusable)
                          (the-as process-focusable s4-2)
                          )
                      )
               )
          (if a1-20
              (vector-! (-> this local-offset) (-> this basetrans) (-> a1-20 root trans))
              )
          )
        (vector-float*! (-> s5-1 norm) (-> s5-1 norm) -1.0)
        (quaternion-look-at! (-> this root quat) (-> s5-1 norm) *up-vector*)
        )
      )
    )
  (set! (-> this desired-z-dist) (cond
                                   ((= (-> this focus) (-> *blow-tower-targets* hellcat))
                                    (let* ((f30-0 40960.0)
                                           (f28-0 40960.0)
                                           (v1-57 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                                           (v1-58 (the-as number (logior #x3f800000 v1-57)))
                                           )
                                      (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-58))))
                                      )
                                    )
                                   (else
                                     (let* ((f30-1 16384.0)
                                            (f28-1 14336.0)
                                            (v1-64 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                                            (v1-65 (the-as number (logior #x3f800000 v1-64)))
                                            )
                                       (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-65))))
                                       )
                                     )
                                   )
        )
  (set! (-> this current-z-dist) (-> this desired-z-dist))
  (set! (-> this use-z-dist) (-> this desired-z-dist))
  (none)
  )

(defstate idle (tower-flyer)
  :virtual #t
  :enter (behavior ()
    (go-virtual hovering)
    )
  :exit (behavior ()
    (dotimes (gp-0 3)
      (init-fields (-> self bobbers gp-0))
      )
    (tower-flyer-method-46 self)
    )
  :code sleep-code
  :post transform-post
  )

(defstate hovering (tower-flyer)
  :virtual #t
  :event blow-tower-enemy-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self hover-end-time)
          (the-as time-frame (+ (logand 0 (rand-uint31-gen *random-generator*)) 450 (current-time)))
          )
    )
  :trans (behavior ()
    (if (< (-> self hover-end-time) (current-time))
        (go-virtual charging)
        )
    (tower-flyer-method-43 self)
    )
  :code sleep-code
  :post (behavior ()
    (blow-tower-enemy-method-34 self)
    (transform-post)
    )
  )

(defstate charging (tower-flyer)
  :virtual #t
  :event blow-tower-enemy-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self hover-end-time) (the-as time-frame (+ (logand 0 (rand-uint31-gen *random-generator*)) 300)))
    )
  :exit (behavior ()
    (sound-stop (-> self charge-sound))
    )
  :trans (behavior ()
    (let* ((gp-0 (handle->process (-> self focus)))
           (a1-2 (-> (the-as process-focusable (if (type? gp-0 process-focusable)
                                                   (the-as process-focusable gp-0)
                                                   )
                             )
                     root
                     trans
                     )
                 )
           )
      (if (or (< 143360.0 (vector-vector-xz-distance (-> self root trans) a1-2))
              (and (not (logtest? (-> self draw status) (draw-control-status on-screen)))
                   (let ((gp-1 sphere-in-view-frustum?)
                         (a0-6 (new 'stack 'sphere))
                         )
                     (set! (-> a0-6 quad) (-> self root trans quad))
                     (set! (-> a0-6 r) 409.6)
                     (not (gp-1 a0-6))
                     )
                   )
              )
          (set-time! (-> self state-time))
          )
      )
    (if (time-elapsed? (-> self state-time) (-> self hover-end-time))
        (go-virtual firing)
        )
    (tower-flyer-method-43 self)
    )
  :code sleep-code
  :post (behavior ()
    (blow-tower-enemy-method-34 self)
    (logior! (-> self skel status) (joint-control-status sync-math))
    (transform-post)
    (let ((f1-2 (/ (the float (- (current-time) (-> self state-time))) (the float (-> self hover-end-time)))))
      (set! (-> self charge-t) (fmax 0.0 (fmin 1.0 f1-2)))
      )
    (tower-flyer-method-45 self)
    )
  )

(defstate fleeing (tower-flyer)
  :virtual #t
  :event blow-tower-enemy-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let ((gp-0 (-> self spot-base-pos))
          (s5-0 (new 'stack-no-clear 'quaternion))
          )
      (set! (-> gp-0 quad) (the-as uint128 0))
      (quaternion-identity! s5-0)
      (send-event (handle->process (-> self focus)) 'retrieve-spot (-> self surround-spot) gp-0 s5-0 #t)
      (let* ((s4-0 (handle->process (-> self focus)))
             (a1-3 (if (type? s4-0 process-focusable)
                       (the-as process-focusable s4-0)
                       )
                   )
             )
        (if a1-3
            (vector+! gp-0 (-> self spot-base-pos) (-> a1-3 root trans))
            )
        )
      (let* ((f1-2 (* 0.0022222223 (the float (- (current-time) (-> self state-time)))))
             (f0-2 (fmax 0.0 (fmin 1.0 f1-2)))
             (f0-3 (* -32768.0 f0-2))
             )
        (quaternion-rotate-local-x! s5-0 s5-0 f0-3)
        )
      (if (or (not (logtest? (-> self draw status) (draw-control-status on-screen)))
              (let ((s4-1 sphere-in-view-frustum?)
                    (a0-16 (new 'stack 'sphere))
                    )
                (set! (-> a0-16 quad) (-> self root trans quad))
                (set! (-> a0-16 r) 20480.0)
                (not (s4-1 a0-16))
                )
              )
          (go empty-state)
          )
      (tower-flyer-method-49 self gp-0 s5-0)
      )
    )
  :code sleep-code
  :post (behavior ()
    (blow-tower-enemy-method-34 self)
    (transform-post)
    )
  )

(defstate firing (tower-flyer)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('notify)
       (case (-> block param 0)
         (('attack)
          (if (= (-> self focus) (-> *blow-tower-targets* hellcat))
              (go-virtual fleeing)
              )
          )
         )
       )
      (else
        (blow-tower-enemy-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (fire-projectile self)
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 1))
      (if (= (-> self focus) (-> *blow-tower-targets* hellcat))
          (go-virtual fleeing)
          (go-virtual charging)
          )
      )
    (tower-flyer-method-43 self)
    )
  :code sleep-code
  :post (behavior ()
    (blow-tower-enemy-method-34 self)
    (transform-post)
    )
  )

(define *current-color* (new 'static 'rgba :r #xff :a #x80))

(defun tower-fly-quick-raycast ((arg0 vector) (arg1 vector) (arg2 vector) (arg3 float))
  (let ((s4-0 (new 'stack 'collide-query)))
    (set! (-> s4-0 start-pos quad) (-> arg0 quad))
    (vector-! (-> s4-0 move-dist) arg1 arg0)
    (let ((v1-3 s4-0))
      (set! (-> v1-3 radius) arg3)
      (set! (-> v1-3 collide-with) (collide-spec backgnd))
      (set! (-> v1-3 ignore-process0) #f)
      (set! (-> v1-3 ignore-process1) #f)
      (set! (-> v1-3 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-3 action-mask) (collide-action solid))
      )
    (let ((f0-1 (fill-and-probe-using-line-sphere *collide-cache* s4-0)))
      (cond
        ((!= f0-1 -100000000.0)
         (set! (-> arg2 quad) (-> s4-0 best-other-tri intersect quad))
         (vector+float*! arg2 arg0 (-> s4-0 move-dist) f0-1)
         )
        (else
          (set! (-> arg2 quad) (-> arg1 quad))
          )
        )
      f0-1
      )
    )
  )

(defun compute-tower-flyer-lerp-point ((arg0 tower-flyer) (arg1 vector) (arg2 vector) (arg3 vector) (arg4 float))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) arg3 arg2)))
    (vector-lerp! s4-1 (-> arg0 local-offset) s4-1 arg4)
    (vector+! arg1 arg2 s4-1)
    )
  (vector-lerp! arg1 (-> arg0 basetrans) arg3 arg4)
  arg1
  )

;; ERROR: Unsupported inline assembly instruction kind - [mula.s f0, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madda.s f1, f4]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f0, f2, f5]
(defmethod tower-flyer-method-47 ((this tower-flyer) (arg0 vector) (arg1 quaternion) (arg2 vector))
  (local-vars (f0-10 float) (sv-208 vector))
  (with-pp
    (rlet ((vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           )
      (init-vf0-vector)
      (vector-z-quaternion! (new 'stack-no-clear 'vector) arg1)
      (let ((s1-0 (new 'stack-no-clear 'vector))
            (s3-0 (new 'stack-no-clear 'vector))
            (f30-0 (-> pp clock frames-per-second))
            )
        (set! (-> s1-0 quad) (-> arg2 quad))
        (compute-tower-flyer-lerp-point this s3-0 arg0 s1-0 (* f30-0 (seconds-per-frame)))
        (set! *current-color* *color-red*)
        (when (= (tower-fly-quick-raycast (-> this basetrans) s3-0 (new 'stack-no-clear 'vector) 8192.0) -100000000.0)
          (set! (-> arg2 quad) (-> s1-0 quad))
          (return #t)
          )
        (let ((s2-0 (new 'stack-no-clear 'vector))
              (s3-1 (new 'stack-no-clear 'vector))
              )
          (set! *current-color* *color-green*)
          (tower-fly-quick-raycast arg0 s1-0 s2-0 8192.0)
          (compute-tower-flyer-lerp-point this s3-1 arg0 s2-0 (* f30-0 (seconds-per-frame)))
          (set! *current-color* *color-blue*)
          (when (= (tower-fly-quick-raycast s3-1 (-> this basetrans) (new 'stack-no-clear 'vector) 0.0) -100000000.0)
            (set! (-> arg2 quad) (-> s2-0 quad))
            (return #t)
            )
          (let ((s1-2 (vector-! (new 'stack-no-clear 'vector) arg0 s2-0)))
            0.0
            (set! sv-208 (new 'stack-no-clear 'vector))
            (let ((v1-19 s2-0)
                  (a0-11 (-> this basetrans))
                  )
              (.lvf vf4 (&-> v1-19 quad))
              (.lvf vf5 (&-> a0-11 quad))
              )
            (.mov.vf vf6 vf0 :mask #b1000)
            (.sub.vf vf6 vf4 vf5 :mask #b111)
            (.svf (&-> sv-208 quad) vf6)
            0.0
            (let ((s2-1 (new 'stack-no-clear 'vector)))
              (let ((s0-0 (new 'stack-no-clear 'vector)))
                (vector-normalize-ret-len! s1-2 1.0)
                (let* ((v1-21 s1-2)
                       ; (f0-9 (-> sv-208 x))
                       ; (f1-2 (-> sv-208 y))
                       ; (f2-0 (-> sv-208 z))
                       ; (f3-0 (-> v1-21 x))
                       ; (f4-0 (-> v1-21 y))
                       ; (f5-0 (-> v1-21 z))
                       )
                  ;; og:preserve-this
                  ; (.mula.s f0-9 f3-0)
                  ; (.madda.s f1-2 f4-0)
                  ; (.madd.s f0-10 f2-0 f5-0)
                  (set! f0-10 (vector-dot sv-208 v1-21))
                  )
                (let ((f0-11 f0-10))
                  (vector+float*! s2-1 (-> this basetrans) s1-2 f0-11)
                  )
                (compute-tower-flyer-lerp-point this s0-0 arg0 s2-1 (* f30-0 (seconds-per-frame)))
                )
              (set! *current-color* *color-white*)
              (when (= (tower-fly-quick-raycast (-> this basetrans) s3-1 (new 'stack-no-clear 'vector) 2048.0) -100000000.0)
                (set! (-> arg2 quad) (-> s2-1 quad))
                (return #t)
                )
              )
            )
          )
        )
      #f
      )
    )
  )

(defmethod tower-flyer-method-48 ((this tower-flyer) (arg0 vector))
  (set! (-> this bobbers 1 output-scale) (-> this bob-y-scalar))
  (set! (-> this bobbers 1 base-time) 0.9)
  (set! (-> this bobbers 2 output-scale) 6144.0)
  (set! (-> this bobbers 2 base-time) 1.1)
  (set! (-> this bobbers 2 output-scale) 4096.0)
  (dotimes (s4-0 3)
    (tower-flyer-bobber-method-10 (-> this bobbers s4-0))
    )
  (let ((s4-1 (new 'stack-no-clear 'vector)))
    (set! (-> s4-1 x) (-> this bobbers 0 output-val))
    (set! (-> s4-1 y) (-> this bobbers 1 output-val))
    (set! (-> s4-1 z) (-> this bobbers 2 output-val))
    (set! (-> s4-1 w) 1.0)
    (let ((a2-0 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> this root quat))))
      (vector-matrix*! s4-1 s4-1 a2-0)
      )
    (vector-lerp! (-> this bob-vec) (-> this bob-vec) s4-1 (* 2.0 (seconds-per-frame)))
    )
  (vector+! (-> this root trans) (-> this basetrans) (-> this bob-vec))
  (let ((s4-3 (vector-! (new 'stack-no-clear 'vector) arg0 (-> this basetrans)))
        (s5-1 (new 'stack-no-clear 'quaternion))
        )
    (set! (-> s4-3 y) 0.0)
    (vector-normalize! s4-3 1.0)
    (quaternion-look-at! s5-1 s4-3 *up-vector*)
    (quaternion-slerp! (-> this root quat) (-> this root quat) s5-1 (* 3.0 (seconds-per-frame)))
    )
  )

(defmethod tower-flyer-method-49 ((this tower-flyer) (arg0 vector) (arg1 quaternion))
  (local-vars (sv-608 collide-query) (sv-612 vector) (sv-616 symbol))
  (let ((s4-0 (new 'stack-no-clear 'vector)))
    (let ((s2-0 (new 'stack-no-clear 'vector)))
      (set! sv-608 (new 'stack-no-clear 'collide-query))
      (set! sv-612 (vector-z-quaternion! (new 'stack-no-clear 'vector) arg1))
      (set! sv-616 #t)
      (set! (-> sv-608 start-pos quad) (-> arg0 quad))
      (vector-float*! (-> sv-608 move-dist) sv-612 (+ 16384.0 (-> this desired-z-dist)))
      (let ((v1-7 sv-608))
        (set! (-> v1-7 radius) 4096.0)
        (set! (-> v1-7 collide-with) (collide-spec backgnd))
        (set! (-> v1-7 ignore-process0) #f)
        (set! (-> v1-7 ignore-process1) #f)
        (set! (-> v1-7 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-7 action-mask) (collide-action solid))
        )
      (let ((f0-3 (fill-and-probe-using-line-sphere *collide-cache* sv-608)))
        (cond
          ((>= f0-3 0.0)
           (vector-float*! (-> sv-608 move-dist) (-> sv-608 move-dist) f0-3)
           (let ((v1-15 (vector-! (new 'stack-no-clear 'vector) (-> this basetrans) arg0))
                 (a1-5 (new 'stack-no-clear 'collide-query))
                 )
             0.0
             (let ((f30-0 (vector-length (-> sv-608 move-dist)))
                   (f28-0 (vector-dot v1-15 sv-612))
                   )
               (vector+float*! s4-0 arg0 sv-612 f28-0)
               (set! (-> a1-5 start-pos quad) (-> this basetrans quad))
               (vector-! (-> a1-5 move-dist) s4-0 (-> a1-5 start-pos))
               (let ((v1-21 a1-5))
                 (set! (-> v1-21 radius) 40.96)
                 (set! (-> v1-21 collide-with) (collide-spec backgnd))
                 (set! (-> v1-21 ignore-process0) #f)
                 (set! (-> v1-21 ignore-process1) #f)
                 (set! (-> v1-21 ignore-pat)
                       (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                       )
                 (set! (-> v1-21 action-mask) (collide-action solid))
                 )
               (cond
                 ((or (>= (fill-and-probe-using-line-sphere *collide-cache* a1-5) 0.0) (>= (+ 6144.0 f30-0) f28-0))
                  (set! (-> this use-z-dist) (fmin (+ -8192.0 f30-0) (-> this desired-z-dist)))
                  (set! (-> this current-z-dist) (fmin (-> this current-z-dist) f30-0))
                  (seek! (-> this current-z-dist) (-> this use-z-dist) (* 61440.0 (seconds-per-frame)))
                  (set-time! (-> this last-wall-clip-time))
                  )
                 (else
                   (set! (-> this current-z-dist) f28-0)
                   (set-time! (-> this last-wall-clip-time))
                   (set! sv-616 (the-as symbol #f))
                   )
                 )
               )
             )
           )
          ((time-elapsed? (-> this last-wall-clip-time) (seconds 1))
           (seek! (-> this current-z-dist) (-> this use-z-dist) (* 20480.0 (seconds-per-frame)))
           (seek! (-> this use-z-dist) (-> this desired-z-dist) (* 8192.0 (seconds-per-frame)))
           )
          )
        )
      (when sv-616
        (vector-normalize! (-> sv-608 move-dist) (-> this current-z-dist))
        (vector+! s4-0 arg0 (-> sv-608 move-dist))
        )
      (vector-! s2-0 s4-0 arg0)
      (let ((a0-36 (vector-! (new 'stack-no-clear 'vector) s2-0 (-> this local-offset))))
        0.0
        (vector-normalize-ret-len! a0-36 1.0)
        )
      (when (and (and (-> this next-state) (= (-> this next-state name) 'charging))
                 (< 40960.0 (vector-vector-distance s4-0 (-> this basetrans)))
                 )
        (let ((v1-58 (- (-> this hover-end-time) (- (current-time) (-> this state-time)))))
          0
          (when (< v1-58 (seconds 1))
            (let ((v1-59 (- (seconds 1) v1-58)))
              (+! (-> this hover-end-time) v1-59)
              )
            )
          )
        )
      (let ((f30-2 0.5))
        (if (< 81920.0 (vector-length (-> this local-offset)))
            (set! f30-2 1.0)
            )
        (if (< (vector-vector-distance s4-0 (-> this basetrans)) 40960.0)
            (set! f30-2 1.0)
            )
        (vector-lerp! (-> this local-offset) (-> this local-offset) s2-0 (* f30-2 (seconds-per-frame)))
        )
      )
    (vector+! s4-0 arg0 (-> this local-offset))
    (tower-flyer-method-47 this arg0 arg1 s4-0)
    (vector-! (-> this local-offset) s4-0 arg0)
    (when #f
      (let ((a0-53 (vector-! (new 'stack-no-clear 'vector) s4-0 arg0)))
        0.0
        (let ((f30-3 10240.0)
              (f0-40 (vector-normalize-ret-len! a0-53 1.0))
              )
          (when (< f0-40 f30-3)
            (let ((f0-41 (- f30-3 f0-40)))
              (+! (-> s4-0 y) f0-41)
              )
            )
          )
        )
      )
    (set! (-> this basetrans quad) (-> s4-0 quad))
    )
  (tower-flyer-method-48 this arg0)
  )

;; WARN: Return type mismatch quaternion vs none.
(defmethod tower-flyer-method-43 ((this tower-flyer))
  (let ((s5-0 (-> this spot-base-pos))
        (s4-0 (new 'stack-no-clear 'quaternion))
        )
    (set! (-> s5-0 quad) (the-as uint128 0))
    (quaternion-identity! s4-0)
    (send-event (handle->process (-> this focus)) 'retrieve-spot (-> this surround-spot) s5-0 s4-0 #t)
    (let* ((s3-0 (handle->process (-> this focus)))
           (a1-3 (if (type? s3-0 process-focusable)
                     s3-0
                     )
                 )
           )
      (if a1-3
          (vector+! s5-0 (-> this spot-base-pos) (-> (the-as process-focusable a1-3) root trans))
          )
      )
    (tower-flyer-method-49 this s5-0 s4-0)
    )
  (none)
  )

(defmethod tower-flyer-method-42 ((this tower-flyer))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((v1-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-7 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-7 prim-core collide-with)
            (collide-spec backgnd jak bot enemy obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-7 prim-core action) (collide-action solid semi-solid no-standon))
      (set-vector! (-> v1-7 local-sphere) 0.0 0.0 0.0 8192.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-7)
      )
    (set! (-> s5-0 nav-radius) 40.96)
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(deftype flyer-projectile-params (structure)
  ((total-travel-time  time-frame)
   (target             handle)
   (damage             float)
   )
  )


(deftype flyer-projectile (process-drawable)
  ((original-offset-vec  vector                   :inline)
   (params               flyer-projectile-params  :inline)
   (size-t               float)
   )
  (:state-methods
    active
    )
  (:methods
    (spawn-part (_type_) none)
    )
  )


(defbehavior flyer-projectile-init-by-other flyer-projectile ((arg0 flyer-projectile-params) (arg1 vector))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg1 quad))
  (mem-copy! (the-as pointer (-> self params)) (the-as pointer arg0) 20)
  (let ((gp-1 (new 'stack-no-clear 'vector)))
    (send-event (handle->process (-> self params target)) 'get-attack-pos gp-1)
    (vector-! (-> self original-offset-vec) (-> self root trans) gp-1)
    )
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1456) self))
  (set! (-> self size-t) 1.0)
  (go-virtual active)
  )

;; WARN: Return type mismatch (pointer process) vs none.
(defmethod fire-projectile ((this tower-flyer))
  (let ((gp-0 (new 'stack-no-clear 'flyer-projectile-params)))
    (set! (-> gp-0 total-travel-time) (seconds 0.5))
    (set! (-> gp-0 target) (-> this focus))
    (set! (-> gp-0 damage) (if (= (-> this focus) (-> *blow-tower-targets* hellcat))
                               4.0
                               6.0
                               )
          )
    (process-spawn flyer-projectile gp-0 (-> this root trans) :name "flyer-projectile")
    )
  (none)
  )

(defmethod relocate ((this tower-flyer) (offset int))
  (if (nonzero? (-> this charge-part))
      (&+! (-> this charge-part) offset)
      )
  (call-parent-method this offset)
  )

;; WARN: Return type mismatch object vs none.
(defmethod tower-flyer-method-45 ((this tower-flyer))
  (set! (-> *part-id-table* 4791 init-specs 2 initial-valuef) (lerp 409.6 5120.0 (-> this charge-t)))
  (set! (-> *part-id-table* 4792 init-specs 2 initial-valuef) (lerp 409.6 6144.0 (-> this charge-t)))
  (set! (-> *part-id-table* 4790 init-specs 2 initial-valuef) (lerp 409.6 8192.0 (-> this charge-t)))
  (spawn (-> this charge-part) (-> this root trans))
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod spawn-part ((this flyer-projectile))
  (set! (-> *part-id-table* 4791 init-specs 2 initial-valuef) (lerp 409.6 5120.0 (-> this size-t)))
  (set! (-> *part-id-table* 4792 init-specs 2 initial-valuef) (lerp 409.6 6144.0 (-> this size-t)))
  (set! (-> *part-id-table* 4790 init-specs 2 initial-valuef) (lerp 409.6 8192.0 (-> this size-t)))
  (spawn (-> this part) (-> this root trans))
  (none)
  )

(defstate active (flyer-projectile)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let* ((f1-2 (/ (the float (- (current-time) (-> self state-time))) (the float (-> self params total-travel-time))))
           (f30-0 (fmax 0.0 (fmin 1.0 f1-2)))
           )
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (send-event (handle->process (-> self params target)) 'get-attack-pos gp-0)
        (vector+float*! (-> self root trans) gp-0 (-> self original-offset-vec) (- 1.0 f30-0))
        )
      (spawn-part self)
      (when (= f30-0 1.0)
        (when (= (-> self params target) (-> *blow-tower-targets* hellcat))
          (if (and (not (logtest? (rand-uint31-gen *random-generator*) 1))
                   (or (not (logtest? (-> *blow-tower-speech* 19 flags) (speech-info-flag si6)))
                       (and (> (-> *blow-tower-speech* 19 play-time) 0)
                            (time-elapsed? (-> *blow-tower-speech* 19 play-time) (seconds 4))
                            )
                       )
                   )
              (speech-play *blow-tower-speech* 19 *blow-tower-speech-list* (target-pos 0))
              )
          (sound-play "hellcat-hit")
          )
        (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-4 from) (process->ppointer self))
          (set! (-> a1-4 num-params) 2)
          (set! (-> a1-4 message) 'attack)
          (set! (-> a1-4 param 0) (the-as uint #f))
          (let ((v1-40
                  (new 'static 'attack-info
                    :mask (attack-mask trans mode id attacker-velocity damage vehicle-damage-factor vehicle-impulse-factor)
                    )
                  )
                )
            (let* ((a0-20 *game-info*)
                   (a2-4 (+ (-> a0-20 attack-id) 1))
                   )
              (set! (-> a0-20 attack-id) a2-4)
              (set! (-> v1-40 id) a2-4)
              )
            (set! (-> v1-40 damage) (-> self params damage))
            (set! (-> v1-40 vehicle-damage-factor) 1.0)
            (set! (-> v1-40 vehicle-impulse-factor) 1.0)
            (set! (-> v1-40 mode) 'eco-dark)
            (set! (-> v1-40 trans quad) (-> self root trans quad))
            (set! (-> v1-40 attacker-velocity quad)
                  (-> (vector-float*!
                        (new 'stack-no-clear 'vector)
                        (-> self original-offset-vec)
                        (/ 1.0 (* 0.0033333334 (the float (-> self params total-travel-time))))
                        )
                      quad
                      )
                  )
            (set! (-> a1-4 param 1) (the-as uint v1-40))
            )
          (send-event-function (handle->process (-> self params target)) a1-4)
          )
        (go empty-state)
        )
      )
    )
  :code sleep-code
  )

(deftype cast-rider (process-focusable)
  ((anim-index  int16)
   (track-obj   handle)
   (neck        joint-mod)
   (track-pos   vector  :inline)
   )
  (:state-methods
    riding
    )
  )


(defbehavior cast-rider-init-by-other cast-rider ((arg0 skeleton-group) (arg1 int) (arg2 int))
  (set! (-> self level) (level-get *level* 'lblowcst))
  (let ((s3-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s3-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s3-0 reaction) cshape-reaction-default)
    (set! (-> s3-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere s3-0 (the-as uint 0))))
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 409.6)
      (set! (-> s3-0 total-prims) (the-as uint 1))
      (set! (-> s3-0 root-prim) v1-8)
      )
    (set! (-> s3-0 nav-radius) (* 0.75 (-> s3-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s3-0 root-prim)))
      (set! (-> s3-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s3-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> self root) s3-0)
    )
  (initialize-skeleton self arg0 (the-as pair 0))
  (set! (-> self anim-index) arg1)
  (set! (-> self track-obj) (the-as handle #f))
  (set! (-> self neck) (new 'process 'joint-mod (joint-mod-mode flex-blend) self arg2))
  (set-vector! (-> self neck twist-max) 8192.0 8192.0 0.0 1.0)
  (set! (-> self neck up) (the-as uint 1))
  (set! (-> self neck nose) (the-as uint 2))
  (set! (-> self neck ear) (the-as uint 0))
  (set! (-> self neck max-dist) 307200.0)
  (set! (-> self neck ignore-angle) 16384.0)
  (mode-set! (-> self neck) (joint-mod-mode look-at))
  (go-virtual riding)
  )

(defmethod relocate ((this cast-rider) (offset int))
  (if (nonzero? (-> this neck))
      (&+! (-> this neck) offset)
      )
  (call-parent-method this offset)
  )

(defstate riding (cast-rider)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-0 object))
    (case message
      (('die)
       (logior! (-> self draw status) (draw-control-status no-draw))
       (go empty-state)
       )
      (('set-track)
       (set! v0-0 (-> block param 0))
       (set! (-> self track-obj) (the-as handle v0-0))
       v0-0
       )
      (('set-track-pos)
       (set! v0-0 (-> self track-pos))
       (set! (-> (the-as vector v0-0) quad) (-> (the-as vector (-> block param 0)) quad))
       v0-0
       )
      )
    )
  :trans (behavior ()
    (let* ((gp-0 (handle->process (-> self track-obj)))
           (a0-4 (if (type? gp-0 process-focusable)
                     (the-as process-focusable gp-0)
                     )
                 )
           )
      (if a0-4
          (set! (-> self track-pos quad) (-> (get-trans a0-4 2) quad))
          )
      )
    (target-set! (-> self neck) (-> self track-pos))
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (ja :group! (-> self draw art-group data (-> self anim-index)) :num! zero)
    (sleep-code)
    )
  :post ja-post
  )

(deftype bt-barrel (blow-tower-enemy)
  ((nearby-barrels      handle  16)
   (nearby-barrel-pos   vector  16 :inline)
   (nearby-barrel-dist  float   16)
   (num-nearby-barrels  int32)
   (barrel-send-index   int32)
   (barrel-live-mask    uint32)
   (rot-vec             vector  :inline)
   (rot-speed           float)
   )
  (:state-methods
    explode
    fly-up
    )
  (:methods
    (damage-targets (_type_) object)
    (count-nearby-barrels (_type_) none)
    (explode-nearby-barrels (_type_) object)
    (update-draw-mask-and-color (_type_) none)
    )
  )


(defbehavior bt-barrel-init-by-other bt-barrel ((arg0 vector))
  (init self)
  (set! (-> self root trans quad) (-> arg0 quad))
  (go-virtual idle)
  )

;; WARN: Return type mismatch rgbaf vs none.
(defmethod on-hit ((this bt-barrel) (arg0 float))
  (set-vector! (-> this draw color-emissive) 2.0 2.0 2.0 2.0)
  (none)
  )

(defstate idle (bt-barrel)
  :virtual #t
  :event blow-tower-enemy-handler
  :trans (behavior ()
    (update-draw-mask-and-color self)
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (let ((f30-0 (fmin 1.0 (* 10.0 (seconds-per-frame)))))
      (seek! (-> self draw color-emissive x) 0.0 f30-0)
      (seek! (-> self draw color-emissive y) 0.0 f30-0)
      (seek! (-> self draw color-emissive z) 0.0 f30-0)
      (seek! (-> self draw color-emissive w) 0.0 f30-0)
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod count-nearby-barrels ((this bt-barrel))
  (set! (-> this barrel-send-index) 0)
  (set! (-> this barrel-live-mask) (the-as uint #xffffffff))
  (let ((s5-0 (new 'stack 'sphere)))
    (set! (-> s5-0 quad) (-> this root trans quad))
    (set! (-> s5-0 r) 131072.0)
    (let ((s4-0 (new 'stack-no-clear 'array 'collide-shape 384)))
      (countdown (s3-0 (fill-actor-list-for-box *actor-hash* s5-0 s4-0 384))
        (let* ((s2-0 (-> s4-0 s3-0))
               (v1-8 (if (type? s2-0 collide-shape)
                         s2-0
                         )
                     )
               )
          (when v1-8
            (let* ((s2-1 (-> v1-8 process))
                   (a0-8 (if (type? s2-1 process-focusable)
                             s2-1
                             )
                         )
                   )
              (when a0-8
                (when (and (= (-> a0-8 type) bt-barrel) (< (-> this num-nearby-barrels) 16) (!= a0-8 this))
                  (set! (-> this nearby-barrels (-> this num-nearby-barrels)) (process->handle a0-8))
                  (set! (-> this nearby-barrel-pos (-> this num-nearby-barrels) quad)
                        (-> (get-trans (the-as process-focusable a0-8) 3) quad)
                        )
                  (set! (-> this nearby-barrel-dist (-> this num-nearby-barrels))
                        (vector-vector-distance (-> this nearby-barrel-pos (-> this num-nearby-barrels)) (get-trans this 3))
                        )
                  (if (< (-> this nearby-barrel-dist (-> this num-nearby-barrels)) 131072.0)
                      (+! (-> this num-nearby-barrels) 1)
                      )
                  )
                )
              )
            )
          )
        )
      )
    (let* ((s3-1 *target*)
           (s4-1 (if (type? s3-1 process-focusable)
                     s3-1
                     )
                 )
           )
      (when (and s4-1 (< (vector-vector-distance (get-trans s4-1 0) s5-0) (-> s5-0 r)))
        (when (and (= (-> s4-1 type) bt-barrel) (< (-> this num-nearby-barrels) 16) (!= s4-1 this))
          (set! (-> this nearby-barrels (-> this num-nearby-barrels)) (process->handle s4-1))
          (set! (-> this nearby-barrel-pos (-> this num-nearby-barrels) quad) (-> (get-trans s4-1 3) quad))
          (set! (-> this nearby-barrel-dist (-> this num-nearby-barrels))
                (vector-vector-distance (-> this nearby-barrel-pos (-> this num-nearby-barrels)) (get-trans this 3))
                )
          (if (< (-> this nearby-barrel-dist (-> this num-nearby-barrels)) 131072.0)
              (+! (-> this num-nearby-barrels) 1)
              )
          )
        )
      )
    )
  (format 0 "Found ~d barrels!~%" (-> this num-nearby-barrels))
  (none)
  )

(defmethod update-draw-mask-and-color ((this bt-barrel))
  (let* ((f0-0 0.9)
         (f1-1 (* 0.0033333334 (the float (current-time))))
         (f0-1 (/ (- f1-1 (* (the float (the int (/ f1-1 f0-0))) f0-0)) f0-0))
         (f0-2 (curve2d-method-9 *curve-linear-up-down* f0-1 3))
         (f0-3 (sin (lerp -16384.0 16384.0 f0-2)))
         (f0-4 (+ 1.0 f0-3))
         (f0-5 (* 0.5 f0-4))
         (f0-6 (* 0.8 f0-5))
         (f0-7 (+ 0.3 f0-6))
         )
    (set-vector! (-> this draw color-emissive) f0-7 f0-7 f0-7 0.0)
    )
  (if #f
      (setup-masks (-> this draw) 4 2)
      (setup-masks (-> this draw) 2 4)
      )
  (set-vector! (-> this draw color-mult) 1.0 1.0 1.0 1.0)
  0
  (none)
  )

(defmethod explode-nearby-barrels ((this bt-barrel))
  (local-vars (v1-25 symbol))
  (let ((f30-0 409600000.0)
        (s5-0 -1)
        )
    (dotimes (s4-0 (-> this num-nearby-barrels))
      (when (logtest? (-> this barrel-live-mask) (ash 1 s4-0))
        (when (and (< (-> this nearby-barrel-dist s4-0) f30-0)
                   (let ((a1-1 (handle->process (-> this nearby-barrels s4-0))))
                     (if a1-1
                         (not (logtest? (-> (the-as process-focusable a1-1) focus-status) (focus-status dead)))
                         )
                     )
                   )
          (dotimes (s3-0 (-> this num-nearby-barrels))
            (when (and (not (logtest? (-> this barrel-live-mask) (ash 1 s3-0)))
                       (and (!= s4-0 s3-0)
                            (< (vector-vector-distance (-> this nearby-barrel-pos s4-0) (-> this nearby-barrel-pos s3-0))
                               (-> this nearby-barrel-dist s4-0)
                               )
                            )
                       )
              (set! v1-25 #f)
              (goto cfg-33)
              )
            )
          (set! v1-25 #t)
          (label cfg-33)
          (when v1-25
            (set! s5-0 s4-0)
            (set! f30-0 (-> this nearby-barrel-dist s4-0))
            )
          )
        )
      )
    (cond
      ((>= s5-0 0)
       (logclear! (-> this barrel-live-mask) (ash 1 s5-0))
       (send-event
         (handle->process (-> this nearby-barrels s5-0))
         'attack
         #f
         (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                             (damage 16.0)
                                                             (vehicle-damage-factor 1.0)
                                                             (vehicle-impulse-factor 1.0)
                                                             (penetrate-using (penetrate explode))
                                                             (mode 'explode)
                                                             )
                             )
         )
       )
      (else
        (go (method-of-object this fly-up))
        )
      )
    )
  )

(defmethod damage-targets ((this bt-barrel))
  (local-vars (v1-14 symbol) (v1-34 symbol))
  (let ((s5-0 (new 'stack 'sphere)))
    (set! (-> s5-0 quad) (-> this root trans quad))
    (set! (-> s5-0 r) 131072.0)
    (let ((s4-0 (new 'stack-no-clear 'array 'collide-shape 384)))
      (countdown (s3-0 (fill-actor-list-for-box *actor-hash* s5-0 s4-0 384))
        (let* ((s2-0 (-> s4-0 s3-0))
               (v1-6 (if (type? s2-0 collide-shape)
                         s2-0
                         )
                     )
               )
          (when v1-6
            (let* ((s1-0 (-> v1-6 process))
                   (s2-1 (if (type? s1-0 process-focusable)
                             s1-0
                             )
                         )
                   )
              (when s2-1
                (when (or (type? s2-1 blow-tower-enemy) (type? s2-1 bombbot))
                  (let* ((s1-1 (get-trans (the-as process-focusable s2-1) 3))
                         (a0-15 (get-trans this 3))
                         (f30-0 (vector-vector-distance a0-15 s1-1))
                         )
                    (set! v1-14 (cond
                                  ((!= (-> s2-1 type) bt-barrel)
                                   (dotimes (s0-0 (-> this num-nearby-barrels))
                                     (when (< (vector-vector-distance (-> this nearby-barrel-pos s0-0) s1-1) f30-0)
                                       (set! v1-14 #f)
                                       (goto cfg-20)
                                       )
                                     )
                                   #t
                                   )
                                  (else
                                    #f
                                    )
                                  )
                          )
                    )
                  (label cfg-20)
                  (cond
                    (v1-14
                      (send-event
                        s2-1
                        'attack
                        #f
                        (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                            (damage 16.0)
                                                                            (vehicle-damage-factor 1.0)
                                                                            (vehicle-impulse-factor 1.0)
                                                                            (penetrate-using (penetrate explode))
                                                                            (mode 'explode)
                                                                            )
                                            )
                        )
                      )
                    (else
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (let* ((s3-1 *target*)
           (s4-1 (if (type? s3-1 process-focusable)
                     s3-1
                     )
                 )
           )
      (when (and s4-1 (< (vector-vector-distance (get-trans s4-1 0) s5-0) (-> s5-0 r)))
        (when (or (type? s4-1 blow-tower-enemy) (type? s4-1 bombbot))
          (let* ((s5-1 (get-trans s4-1 3))
                 (a0-35 (get-trans this 3))
                 (f30-1 (vector-vector-distance a0-35 s5-1))
                 )
            (set! v1-34 (cond
                          ((!= (-> s4-1 type) bt-barrel)
                           (dotimes (s3-3 (-> this num-nearby-barrels))
                             (when (< (vector-vector-distance (-> this nearby-barrel-pos s3-3) s5-1) f30-1)
                               (set! v1-34 #f)
                               (goto cfg-46)
                               )
                             )
                           #t
                           )
                          (else
                            #f
                            )
                          )
                  )
            )
          (label cfg-46)
          (if v1-34
              (send-event
                s4-1
                'attack
                #f
                (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                    (damage 16.0)
                                                                    (vehicle-damage-factor 1.0)
                                                                    (vehicle-impulse-factor 1.0)
                                                                    (penetrate-using (penetrate explode))
                                                                    (mode 'explode)
                                                                    )
                                    )
                )
              #f
              )
          )
        )
      )
    )
  )

(defstate explode (bt-barrel)
  :virtual #t
  :code (behavior ()
    (setup-masks (-> self draw) 4 2)
    (sound-play "barrel-explode")
    (logior! (-> self focus-status) (focus-status dead))
    (count-nearby-barrels self)
    (cond
      ((logtest? (-> *part-group-id-table* 1460 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1460))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1460))
        )
      )
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 0.1))
        (suspend)
        )
      )
    (let ((v1-46 (-> self root root-prim)))
      (set! (-> v1-46 prim-core collide-as) (collide-spec))
      (set! (-> v1-46 prim-core collide-with) (collide-spec))
      )
    0
    (update-transforms (-> self root))
    (damage-targets self)
    (until #f
      (explode-nearby-barrels self)
      (suspend)
      )
    #f
    )
  )

(defstate fly-up (bt-barrel)
  :virtual #t
  :enter (behavior ()
    (set-vector! (-> self draw color-mult) 0.2 0.2 0.2 0.0)
    (set-vector! (-> self draw color-emissive) 0.0 0.0 0.0 0.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> (math-camera-matrix) rvec quad))
      (let* ((s5-0 vector-rotate-around-y!)
             (s4-0 gp-0)
             (s3-0 gp-0)
             (f30-0 -3640.889)
             (f28-0 7281.778)
             (v1-9 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-10 (the-as number (logior #x3f800000 v1-9)))
             )
        (s5-0 s4-0 s3-0 (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-10)))))
        )
      (if (not (logtest? (rand-uint31-gen *random-generator*) 1))
          (vector-float*! gp-0 gp-0 -1.0)
          )
      (vector-normalize! gp-0 1.0)
      (let* ((s5-1 (-> self root transv))
             (f30-1 20480.0)
             (f28-1 40960.0)
             (v1-20 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-21 (the-as number (logior #x3f800000 v1-20)))
             )
        (vector-float*! s5-1 gp-0 (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-21)))))
        )
      )
    (let* ((gp-1 (-> self root transv))
           (s5-3 (-> self root transv))
           (s4-1 (-> (math-camera-matrix) fvec))
           (f30-2 -20480.0)
           (f28-2 40960.0)
           (v1-28 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-29 (the-as number (logior #x3f800000 v1-28)))
           )
      (vector+float*! gp-1 s5-3 s4-1 (+ f30-2 (* f28-2 (+ -1.0 (the-as float v1-29)))))
      )
    (let* ((f30-3 266240.0)
           (f28-3 102400.0)
           (v1-34 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-35 (the-as number (logior #x3f800000 v1-34)))
           )
      (set! (-> self root transv y) (+ f30-3 (* f28-3 (+ -1.0 (the-as float v1-35))) (-> self root transv y)))
      )
    (let ((gp-3 (-> self rot-vec)))
      (let* ((f30-4 -1.0)
             (f28-4 2.0)
             (v1-42 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-43 (the-as number (logior #x3f800000 v1-42)))
             )
        (set! (-> gp-3 x) (+ f30-4 (* f28-4 (+ -1.0 (the-as float v1-43)))))
        )
      (let* ((f30-5 -1.0)
             (f28-5 2.0)
             (v1-48 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-49 (the-as number (logior #x3f800000 v1-48)))
             )
        (set! (-> gp-3 y) (+ f30-5 (* f28-5 (+ -1.0 (the-as float v1-49)))))
        )
      (let* ((f30-6 -1.0)
             (f28-6 2.0)
             (v1-54 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-55 (the-as number (logior #x3f800000 v1-54)))
             )
        (set! (-> gp-3 z) (+ f30-6 (* f28-6 (+ -1.0 (the-as float v1-55)))))
        )
      (set! (-> gp-3 w) 1.0)
      )
    (vector-normalize! (-> self rot-vec) 1.0)
    (let* ((f30-7 91022.22)
           (f28-7 98304.0)
           (v1-61 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-62 (the-as number (logior #x3f800000 v1-61)))
           )
      (set! (-> self rot-speed) (+ f30-7 (* f28-7 (+ -1.0 (the-as float v1-62)))))
      )
    )
  :trans (behavior ()
    (let ((a1-1 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> self root quat))))
      (set! (-> a1-1 trans quad) (-> self root trans quad))
      (spawn-from-mat (-> self part) a1-1)
      )
    (set! (-> self root transv y) (- (-> self root transv y) (* 368640.0 (seconds-per-frame))))
    (let ((gp-0 (new 'stack-no-clear 'collide-query)))
      (set! (-> gp-0 start-pos quad) (-> self root trans quad))
      (vector-float*! (-> gp-0 move-dist) (-> self root transv) (seconds-per-frame))
      (when (< (-> self root transv y) 40960.0)
        (let ((v1-14 gp-0))
          (set! (-> v1-14 radius) 10240.0)
          (set! (-> v1-14 collide-with) (collide-spec backgnd))
          (set! (-> v1-14 ignore-process0) #f)
          (set! (-> v1-14 ignore-process1) #f)
          (set! (-> v1-14 ignore-pat)
                (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                )
          (set! (-> v1-14 action-mask) (collide-action solid))
          )
        (let ((f0-5 (fill-and-probe-using-line-sphere *collide-cache* gp-0)))
          (when (!= f0-5 -100000000.0)
            (vector+float*! (-> self root trans) (-> self root trans) (-> gp-0 move-dist) f0-5)
            (cond
              ((logtest? (-> *part-group-id-table* 1457 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
               (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1457))
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1457))
                )
              )
            (sound-play "barrel-explode2")
            (go empty-state)
            )
          )
        )
      (vector+! (-> self root trans) (-> self root trans) (-> gp-0 move-dist))
      )
    (when (< (-> self root trans y) 0.0)
      (set! (-> self root trans y) 0.0)
      (cond
        ((logtest? (-> *part-group-id-table* 1457 flags) (sp-group-flag sp13))
         (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
         (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1457))
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1457))
          )
        )
      (go empty-state)
      )
    (let ((a1-20 (quaternion-vector-angle!
                   (new 'stack-no-clear 'quaternion)
                   (-> self rot-vec)
                   (* (-> self rot-speed) (seconds-per-frame))
                   )
                 )
          )
      (quaternion*! (-> self root quat) a1-20 (-> self root quat))
      )
    )
  :code sleep-code
  :post ja-post
  )

(defmethod on-death ((this bt-barrel))
  (go (method-of-object this explode))
  )

;; WARN: Return type mismatch float vs object.
(defmethod init ((this bt-barrel))
  (set! (-> self level) (level-get *level* 'lblowcst))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 penetrate-using) (penetrate))
    (let ((v1-4 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-4 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-4 prim-core collide-with) (collide-spec jak player-list projectile))
      (set! (-> v1-4 prim-core action) (collide-action solid))
      (set-vector! (-> v1-4 local-sphere) 0.0 0.0 0.0 20480.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-4)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-7 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-7 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-7 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bt-barrel" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (call-parent-method this)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 1455) this))
  (set! (-> this hit-points) 2.0)
  )

(deftype bt-barrel-stack (process-drawable)
  ()
  (:state-methods
    idle
    barrel-spawning
    )
  )


(defbehavior barrel-stack-init-by-other bt-barrel-stack ((arg0 vector) (arg1 quaternion))
  (stack-size-set! (-> self main-thread) 512)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-scenecamera" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-copy! (-> self root quat) arg1)
  (go-virtual idle)
  )

(defun bt-barrel-ground-probe ((arg0 vector))
  (local-vars (sv-560 collide-query) (sv-564 vector))
  (set! sv-560 (new 'stack-no-clear 'collide-query))
  (set! sv-564 arg0)
  (vector+float*! (-> sv-560 start-pos) sv-564 *up-vector* 24576.0)
  (set! (-> sv-560 move-dist quad) (the-as uint128 0))
  (set! (-> sv-560 move-dist y) -81920.0)
  (let ((v1-8 sv-560))
    (set! (-> v1-8 radius) 409.6)
    (set! (-> v1-8 collide-with) (collide-spec backgnd))
    (set! (-> v1-8 ignore-process0) #f)
    (set! (-> v1-8 ignore-process1) #f)
    (set! (-> v1-8 ignore-pat)
          (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
          )
    (set! (-> v1-8 action-mask) (collide-action solid))
    )
  (when (>= (fill-and-probe-using-line-sphere *collide-cache* sv-560) 0.0)
    (if (< (fabs (- (-> sv-560 best-other-tri intersect y) (-> arg0 y))) 24576.0)
        (set! (-> sv-564 y) (fmax 0.0 (+ 12697.6 (-> sv-560 best-other-tri intersect y))))
        )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defbehavior setup-bt-barrels bt-barrel-stack ((arg0 int) (arg1 int) (arg2 float) (arg3 float))
  (local-vars (sv-48 vector) (sv-52 vector) (sv-80 vector) (sv-84 float) (sv-112 process) (sv-128 vector))
  (set! sv-48 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat)))
  (let ((v1-1 (new 'stack-no-clear 'vector)))
    (set! (-> v1-1 quad) (-> self root trans quad))
    (set! sv-52 v1-1)
    )
  (let ((a0-5 sv-48))
    (set! (-> a0-5 quad) (-> sv-48 quad))
    (set! (-> a0-5 y) 0.0)
    (vector-normalize! a0-5 1.0)
    )
  (dotimes (s2-0 arg0)
    (let ((v1-4 (new 'stack-no-clear 'vector)))
      (set! (-> v1-4 quad) (-> sv-52 quad))
      (set! sv-80 v1-4)
      )
    (let* ((f30-0 (- (* 0.5 arg2)))
           (v1-6 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-7 (the-as number (logior #x3f800000 v1-6)))
           )
      (set! sv-84 (+ f30-0 (* (+ -1.0 (the-as float v1-7)) (+ (* 0.5 arg2) (* 0.5 arg2)))))
      )
    (vector+float*! sv-80 sv-80 (vector-cross! (new 'stack-no-clear 'vector) sv-48 *up-vector*) (* sv-84 arg3))
    (bt-barrel-ground-probe sv-80)
    (dotimes (s1-0 arg1)
      (let ((s0-0 (handle->process (-> *blow-tower-targets* hellcat))))
        (set! sv-112 (get-process *default-dead-pool* bt-barrel #x4000 1))
        (when sv-112
          (let ((t9-5 (method-of-type bt-barrel activate)))
            (t9-5 (the-as bt-barrel sv-112) s0-0 "bt-barrel" (the-as pointer #x70004000))
            )
          (run-now-in-process sv-112 bt-barrel-init-by-other sv-80)
          (-> sv-112 ppointer)
          )
        )
      )
    (suspend)
    0
    (vector+float*! sv-52 sv-52 sv-48 arg2)
    (let ((s1-1 sv-52)
          (s0-1 sv-52)
          )
      (set! sv-128 sv-48)
      (let* ((f30-1 arg3)
             (f28-0 (- (* 0.25 arg2)))
             (v1-30 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-31 (the-as number (logior #x3f800000 v1-30)))
             (f0-18 (* f30-1 (+ f28-0 (* (+ -1.0 (the-as float v1-31)) (+ (* 0.25 arg2) (* 0.25 arg2))))))
             )
        (vector+float*! s1-1 s0-1 sv-128 f0-18)
        )
      )
    )
  (none)
  )

(defmethod run-logic? ((this bt-barrel))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

(defmethod init-from-entity! ((this bt-barrel-stack) (arg0 entity-actor))
  (stack-size-set! (-> this main-thread) 512)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-scenecamera" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (set! (-> this entity) arg0)
  (go (method-of-object this idle))
  )

(defbehavior attempt-barrel-spawn bt-barrel-stack ()
  (let ((a1-0 (new 'stack-no-clear 'collide-query)))
    (vector+float*! (-> a1-0 start-pos) (-> self root trans) *up-vector* 24576.0)
    (set! (-> a1-0 move-dist quad) (the-as uint128 0))
    (set! (-> a1-0 move-dist y) -81920.0)
    (let ((v1-4 a1-0))
      (set! (-> v1-4 radius) 409.6)
      (set! (-> v1-4 collide-with) (collide-spec backgnd))
      (set! (-> v1-4 ignore-process0) #f)
      (set! (-> v1-4 ignore-process1) #f)
      (set! (-> v1-4 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-4 action-mask) (collide-action solid))
      )
    (if (>= (fill-and-probe-using-line-sphere *collide-cache* a1-0) 0.0)
        (go-virtual barrel-spawning)
        )
    )
  )

(defstate barrel-spawning (bt-barrel-stack)
  :virtual #t
  :code (behavior ()
    (let ((gp-0 (the int (res-lump-float (-> self entity) 'width :default 1.0)))
          (s5-0 (the int (res-lump-float (-> self entity) 'height :default 1.0)))
          (f30-0 (res-lump-float (-> self entity) 'distance :default 20480.0))
          (f0-4 (res-lump-float (-> self entity) 'rand :default 1.0))
          )
      (setup-bt-barrels gp-0 s5-0 f30-0 f0-4)
      )
    (process-entity-status! self (entity-perm-status dead) #t)
    (go empty-state)
    )
  )

(defstate idle (bt-barrel-stack)
  :virtual #t
  :code (behavior ()
    (until #f
      (attempt-barrel-spawn)
      (let ((gp-0 (current-time)))
        (until (time-elapsed? gp-0 (seconds 0.3))
          (suspend)
          )
        )
      )
    #f
    )
  )

(defmethod get-damage-from-attack ((this bt-barrel) (arg0 attack-info) (arg1 process-focusable))
  (let ((gp-1 (call-parent-method this arg0 arg1)))
    (if (and (not (logtest? (penetrate explode) (-> arg0 penetrate-using)))
             (< 368640.0 (vector-vector-distance (target-pos 0) (-> this root trans)))
             )
        (set! gp-1 0.0)
        )
    gp-1
    )
  )

(defmethod on-death ((this tower-flyer))
  (sound-play "hc-target-hit")
  (call-parent-method this)
  )

(deftype bt-pickup-barrel (process-drawable)
  ((index  int32)
   )
  (:state-methods
    riding
    )
  )


(defbehavior bt-pickup-barrel-init-by-other bt-pickup-barrel ((arg0 int))
  (set! (-> self level) (level-get *level* 'lblowcst))
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bt-barrel" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set-vector! (-> self root scale) 0.5 0.3 0.5 1.0)
  (set! (-> self index) arg0)
  (go-virtual riding)
  )

(defstate riding (bt-pickup-barrel)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('die)
       (cond
         ((logtest? (-> *part-group-id-table* 1460 flags) (sp-group-flag sp13))
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1460))
          )
         (else
           (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
           (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1460))
           )
         )
       (go empty-state)
       )
      )
    )
  :trans (behavior ()
    (send-event
      (ppointer->process (-> self parent))
      'update-barrel-pos
      (-> self root trans)
      (-> self root quat)
      (-> self index)
      )
    )
  :code sleep-code
  :post ja-post
  )
