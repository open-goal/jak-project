;;-*-Lisp-*-
(in-package goal)

;; name: ctyport-scenes.gc
;; name in dgo: ctyport-scenes
;; dgos: CPO

(define-extern *range-dax-sign-explo-dust-color* curve-color-fast)
(define-extern *range-dax-sign-explo-dust-alpha* curve2d-fast)
(define-extern *range-dax-sign-explo-dust-scale-x* curve2d-fast)
(define-extern *range-dax-sign-explo-dust-scale-y* curve2d-fast)
(define-extern *curve-dax-sign-explo-dust-alpha* curve2d-fast)
(define-extern *curve-dax-sign-explo-dust-scale-x* curve2d-fast)
(define-extern *curve-dax-sign-explo-dust-scale-y* curve2d-fast)
(define-extern *range-dax-sign-explo-color* curve-color-fast)
(define-extern *range-dax-sign-explo-alpha* curve2d-fast)
(define-extern *range-dax-sign-explo-scale-x* curve2d-fast)
(define-extern *range-dax-sign-explo-scale-y* curve2d-fast)
(define-extern *curve-dax-sign-explo-alpha* curve2d-fast)
(define-extern *curve-dax-sign-explo-scale-x* curve2d-fast)
(define-extern *curve-dax-sign-explo-scale-y* curve2d-fast)
(define-extern *range-fma-barrier-explo-big-color* curve-color-fast)
(define-extern *range-fma-barrier-explo-big-alpha* curve2d-fast)
(define-extern *range-fma-barrier-explo-big-scale-x* curve2d-fast)
(define-extern *range-fma-barrier-explo-big-scale-y* curve2d-fast)
(define-extern *curve-fma-barrier-explo-big-alpha* curve2d-fast)
(define-extern *curve-fma-barrier-explo-big-scale-x* curve2d-fast)
(define-extern *curve-fma-barrier-explo-big-scale-y* curve2d-fast)

;; DECOMP BEGINS

(defskelgroup skel-broken-mdaxter-movie broken-mdaxter broken-mdaxter-lod0-jg broken-mdaxter-idle-ja
              ((broken-mdaxter-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 300)
              :origin-joint-index 3
              )

(defskelgroup skel-missile-launcher-movie cty-dax-missile-launcher cty-dax-missile-launcher-lod0-jg cty-dax-missile-launcher-idle-ja
              ((cty-dax-missile-launcher-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              :origin-joint-index 3
              )

(load-scene (new 'static 'scene
              :name "city-port-attack-res"
              :extra #f
              :info #f
              :scene-flags (scene-flags scf1 scf2 scf3 scf4)
              :mask-to-clear (process-mask movie projectile)
              :entity "scene-stage-125"
              :art-group "scenecamera"
              :anim "city-port-attack-res"
              :parts 7
              :command-list '((0
                  (kill "tpl-glider-broken-1")
                  (send-event "krimson-wall-8" 'kill)
                  (send-event "krimson-wall-9" 'kill)
                  (send-event "krimson-wall-10" 'kill)
                  (part-tracker
                    "group-fma-missile-thruster-fire"
                    entity
                    "h-torpedo"
                    joint
                    "main"
                    track
                    #t
                    duration
                    (frame-range 0 93)
                    )
                  (part-tracker
                    "group-hijak-fma-missile-trail"
                    entity
                    "h-torpedo"
                    joint
                    "main"
                    track
                    #t
                    duration
                    (frame-range 0 93)
                    subsample-num
                    (new 'static 'bfloat :data 10.0)
                    )
                  )
                (65
                  (part-tracker
                    "group-krimson-wall-fma"
                    entity
                    "particleman"
                    joint
                    "particleC"
                    track
                    #f
                    duration
                    (frame-range 65 66)
                    )
                  )
                (93
                  (part-tracker
                    "group-fma-barrier-explosion-big"
                    entity
                    "particleman"
                    joint
                    "particleB"
                    track
                    #f
                    duration
                    (frame-range 93 123)
                    )
                  )
                (384
                  (part-tracker
                    "group-scenes-daxter-crush-dust"
                    entity
                    "particleman"
                    joint
                    "particleA"
                    track
                    #f
                    duration
                    (frame-range 384 385)
                    )
                  )
                (410 (fadeout (frame-time-30 10)))
                (10000
                  (task-close! "city-port-attack-resolution")
                  (apply
                    ,(lambda :behavior scene-player
                       ()
                       (send-event *target* 'change-mode 'normal)
                       (logclear! (-> *target* draw status) (draw-control-status no-draw))
                       (none)
                       )
                    )
                  )
                )
              :cut-list '(65 176 284)
              :wait-ground-time (seconds 1)
              :actor (new 'static 'boxed-array :type scene-actor
                (new 'static 'scene-actor
                  :name "scenecamera"
                  :level #f
                  :art-group "skel-scenecamera"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :camera 4
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "particleman"
                  :level 'lpatkcs
                  :art-group "skel-particleman"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "sidekick-highres"
                  :level 'lpatkcs
                  :art-group "skel-sidekick-highres"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "h-torpedo"
                  :level 'lctypatk
                  :art-group "skel-h-torpedo"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "krimson-wall-break"
                  :level 'lctypatk
                  :art-group "skel-krimson-wall-break"
                  :prefix ""
                  :draw-frames '((65 max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "krimson-wall-break"
                  :level 'lctypatk
                  :art-group "skel-krimson-wall-break"
                  :prefix "a-"
                  :draw-frames '((65 max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "krimson-wall-break"
                  :level 'lctypatk
                  :art-group "skel-krimson-wall-break"
                  :prefix "b-"
                  :draw-frames '((65 max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                )
              :load-point "ctyport-attack-res"
              :end-point "ctyport-attack-res"
              :borrow '((ctywide 4 lctypatk special)
                (ctywide-ff alias ctywide copy ctypesa special ctycarb special lpatkcs special)
                )
              :sfx-volume -1.0
              :ambient-volume -1.0
              :music-volume -1.0
              :music-delay 1500.0
              :on-running #f
              :on-complete #f
              )
            )

(load-scene
  (new 'static 'scene
    :name "city-hijack-vehicle-res"
    :extra #f
    :info #f
    :scene-flags (scene-flags scf1 scf2 scf3 scf4)
    :mask-to-clear (process-mask movie projectile)
    :entity "scene-stage-93"
    :art-group "scenecamera"
    :anim "city-hijack-vehicle-res"
    :parts 4
    :command-list '((0 (apply ,(lambda :behavior scene-player () (kill-by-type h-kg-pickup *active-pool*) (none))))
      (10
        (part-tracker
          "group-fma-missile-thruster-fire"
          entity
          "cty-hijack-missile"
          joint
          "main"
          track
          #t
          duration
          (frame-range 0 239)
          )
        (part-tracker
          "group-hijak-fma-missile-trail"
          entity
          "cty-hijack-missile"
          joint
          "main"
          track
          #t
          duration
          (frame-range 0 239)
          subsample-num
          (new 'static 'bfloat :data 10.0)
          )
        (kill "farthy-1")
        )
      (70
        (send-event
          "mecha-daxter"
          'trans-hook
          ,(lambda :behavior scene-player
             ()
             (vector-seek!
               (-> self draw color-emissive)
               (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
               (* 4.0 (seconds-per-frame))
               )
             (none)
             )
          )
        )
      (180
        (send-event
          "mecha-daxter"
          'trans-hook
          ,(lambda :behavior scene-player () (set-vector! (-> self draw color-emissive) 1.0 1.0 1.0 1.0) (none))
          )
        )
      (239
        (part-tracker
          "group-daxter-sign-explosion"
          entity
          "particleman"
          joint
          "particleB"
          track
          #t
          duration
          (frame-range 239 290)
          )
        )
      (240)
      (415 (fadeout (frame-time-30 10)))
      (10000 (task-close! "city-hijack-vehicle-resolution"))
      )
    :cut-list '()
    :wait-ground-time (seconds 1)
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jakc-highres"
        :level 'citycast
        :art-group "skel-jakc-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '((min max))
        :cloth-commands '(((min max) hide))
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x80
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'citycast
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "torn-highres"
        :level 'citycast
        :art-group "skel-torn-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '((min max))
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "h-kg-pickup"
        :level 'lctyhijk
        :art-group "skel-h-kg-pickup"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "cty-hijack-missile"
        :level 'lctyhijk
        :art-group "skel-cty-hijack-missile"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "palmpilot-b"
        :level 'citycast
        :art-group "skel-palmpilot-b"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "broken-mdaxter-movie"
        :level 'ctyport
        :art-group "skel-broken-mdaxter-movie"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "particleman"
        :level 'citycast
        :art-group "skel-particleman"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "mecha-daxter"
        :level 'ctyport
        :art-group "skel-mecha-daxter"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-frames '((min max))
        :cloth-reset-frames '()
        :cloth-commands '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point "ctyhijack-res"
    :end-point "ctyport-hiphog"
    :borrow '((ctywide 4 lctyhijk special)
      (ctywide-kg alias ctywide copy ctypesc special)
      (ctywide-ff-kg alias ctywide copy ctypesc special)
      (ctywide-ff alias ctywide copy ctypepa special ctypesa special)
      )
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-delay 1500.0
    :scene-task #x9c
    :on-running #f
    :on-complete #f
    )
  )

(load-scene (new 'static 'scene
              :name "ctyport-attack-get-on-nuke"
              :extra #f
              :info #f
              :scene-flags (scene-flags scf1 scf2 scf3)
              :mask-to-clear (process-mask movie projectile)
              :entity "scene-stage-93"
              :art-group "scenecamera"
              :anim "city-port-attack-intro-b"
              :parts 1
              :command-list '((0 (kill "cty-dax-missile-launcher-1"))
                (78
                  (part-tracker
                    "group-fma-missile-launch-trail"
                    entity
                    "h-torpedo"
                    joint
                    "main"
                    track
                    #t
                    duration
                    (frame-range 78 100)
                    subsample-num
                    (new 'static 'bfloat :data 10.0)
                    )
                  )
                (81
                  (part-tracker
                    "group-fma-missile-launch-thruster"
                    entity
                    "h-torpedo"
                    joint
                    "main"
                    track
                    #t
                    duration
                    (frame-range 81 84)
                    )
                  )
                )
              :cut-list '(46)
              :wait-ground-time (seconds 1)
              :actor (new 'static 'boxed-array :type scene-actor
                (new 'static 'scene-actor
                  :name "scenecamera"
                  :level #f
                  :art-group "skel-scenecamera"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :camera 4
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "jakc-highres"
                  :level 'hiphog
                  :art-group "skel-jakc-highres"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :light-index #x1e
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  :no-draw-seg #x80
                  )
                (new 'static 'scene-actor
                  :name "sidekick-highres"
                  :level 'hiphog
                  :art-group "skel-sidekick-highres"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :light-index #x1e
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "missile-launcher-movie"
                  :level 'lpatkcs
                  :art-group "skel-missile-launcher-movie"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                (new 'static 'scene-actor
                  :name "h-torpedo"
                  :level 'lctypatk
                  :art-group "skel-h-torpedo"
                  :prefix ""
                  :draw-frames '((min max))
                  :scissor-frames '()
                  :shadow-frames '((min max))
                  :cloth-reset-frames '()
                  :cloth-commands '()
                  :flags #x1
                  :shadow-flags -1
                  :shadow-volume-joint #f
                  )
                )
              :load-point "ctyport-hiphog"
              :end-point #f
              :borrow '((ctywide 4 lctypatk display)
                (ctywide-ff alias ctywide copy ctypesa auto ctycarb auto ctycara auto lpatkcs display)
                )
              :sfx-volume -1.0
              :ambient-volume -1.0
              :music-delay 1500.0
              :on-running #f
              :on-complete #f
              )
            )

(defpartgroup group-fma-missile-launch-thruster
  :id 1070
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 3860 :flags (is-3d sp7) :period (seconds 0.017) :length (seconds 0.017))
    (sp-item 3861 :flags (sp7) :period (seconds 0.017) :length (seconds 0.017))
    )
  )

(defpart 3860
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:num 4.0)
    (:z (meters -0.7))
    (:scale-x (meters 1))
    (:rot-x (degrees 190))
    (:rot-y (degrees 0))
    (:rot-z (degrees 0) 1 (degrees 90))
    (:scale-y (meters 2))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-z (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(defpart 3861
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 3.0)
    (:x (meters -1))
    (:scale-x (meters 5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 60.0 20.0)
    (:b 0.0)
    (:a 30.0 2.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-z (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-fma-missile-launch-trail
  :id 1071
  :flags (sp0 sp13)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 3862))
  )

(defpart 3862
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 1.0)
    (:z (meters 0))
    (:scale-x (meters 0.5) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0 30.0)
    (:g :copy r)
    (:b :copy r)
    (:a 20.0 20.0)
    (:vel-z (meters -0.06666667) (meters -0.033333335))
    (:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.06666667 -0.06666667)
    (:friction 0.9)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x405c00 #x409b00))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-krimson-wall-fma
  :id 1072
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 3863 :flags (is-3d sp3 sp7)))
  )

(defpart 3863
  :init-specs ((:texture (lasersmoke-00 level-default-sprite))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0))
    (:z (meters 16))
    (:scale-x (meters 18))
    (:rot-x (degrees 0) 1 (degrees 180))
    (:rot-z (degrees 90))
    (:scale-y (meters 54))
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 64.0)
    (:timer (seconds 0.735))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata :data (new 'static 'boxed-array :type int32
                       20
                       1
                       0
                       #x401b00
                       #x401c00
                       #x401d00
                       #x401e00
                       #x401f00
                       #x402000
                       #x402100
                       #x402200
                       #x402300
                       #x402400
                       #x402500
                       #x402600
                       #x402700
                       #x402800
                       #x402900
                       #x402a00
                       #x402b00
                       #x402c00
                       #x402d00
                       #x402e00
                       #x402f00
                       #x403000
                       #x403100
                       #x403200
                       #x403300
                       #x403400
                       #x403500
                       #x403600
                       #x403700
                       #x403800
                       )
               )
    (:func 'sparticle-texture-animate)
    (:rotate-y (degrees 90))
    )
  )

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-daxter-crush-dust ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (+ (logand 0 (rand-uint31-gen *random-generator*)) 140))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (logand 0 (rand-uint31-gen *random-generator*)) 30))
        (v1-3 (+ (logand 0 (rand-uint31-gen *random-generator*)) 75))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 s3-0)))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-3)))
    )
  (none)
  )

(defpartgroup group-scenes-daxter-crush-dust
  :id 1073
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 3864 :flags (sp7)))
  )

(defpart 3864
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'spt-birth-func-brightness-daxter-crush-dust)
    (:num 30.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.064 -0.064)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.82)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z))
    (:conerot-x (degrees 80) (degrees 10))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-fma-missile-thruster-fire
  :id 1074
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 3865 :flags (is-3d sp7)) (sp-item 3866 :flags (sp6 sp7)))
  )

(defpart 3865
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:num 6.0)
    (:z (meters -0.9))
    (:scale-x (meters 0.8) (meters 0.5))
    (:rot-x (degrees 180))
    (:rot-y (degrees 0))
    (:rot-z (degrees 0) 1 (degrees 90))
    (:scale-y (meters 2) (meters 1))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 30.0 30.0)
    (:fade-a -0.6)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-z (degrees 0))
    (:rotate-x (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(defpart 3866
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 100.0)
    (:b 0.0)
    (:a 80.0 2.0)
    (:fade-a -0.12)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-z (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-hijak-fma-missile-trail
  :id 1075
  :flags (sp0 sp13)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 3867))
  )

(defpart 3867
  :init-specs ((:texture (big-cloud level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.5) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 50.0 80.0)
    (:g :copy r)
    (:b :copy r)
    (:a 10.0 40.0)
    (:scalevel-x (meters 0.0033333334) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.083333336 -0.083333336)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x40a000 #x405c00 #x409b00))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-daxter-sign-explosion
  :id 1076
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 3869 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 3870 :period (seconds 30) :length (seconds 0.035))
    (sp-item 3871 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 3872 :period (seconds 30) :length (seconds 0.035))
    (sp-item 3873 :period (seconds 30) :length (seconds 0.035))
    (sp-item 3874 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 3875 :period (seconds 30) :length (seconds 0.167))
    (sp-item 3876 :period (seconds 30) :length (seconds 0.5))
    (sp-item 3877 :flags (sp3) :binding 3868)
    (sp-item 3877 :flags (sp3) :binding 3868)
    (sp-item 3877 :flags (sp3) :binding 3868)
    (sp-item 3877 :flags (sp3) :binding 3868)
    (sp-item 3877 :flags (sp3) :binding 3868)
    (sp-item 3868 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3868 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3868 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3868 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3868 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

(defpart 3869
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 40.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 3870
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 0.8) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.16666667) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3871
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 160.0)
    (:b 40.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.22857143)
    (:fade-b -0.08571429)
    (:fade-a -0.36571428 -0.36571428)
    (:friction 0.93)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3872
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 8.0 8.0)
    (:g :copy r)
    (:b :copy r)
    (:a 64.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.7)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3873
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 30.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.05))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-dax-sign-explo-dust-color* (new 'static 'curve-color-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'inline-array vector 4
                                                (new 'static 'vector :x 70.0 :y 70.0 :z 70.0 :w 128.0)
                                                (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                                (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                                (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                                )
                                              :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-dax-sign-explo-dust-alpha* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 64.0 :y 32.0 :z 33.0 :w 34.0)
                                              :one-over-x-deltas (new 'static 'vector :x -32.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-dax-sign-explo-dust-scale-x* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                                :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *range-dax-sign-explo-dust-scale-y* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                                :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-dust-alpha* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.7 :z -1.0 :w -2.0)
                                              :ys (new 'static 'vector :y 1.0 :w 1.0)
                                              :one-over-x-deltas (new 'static 'vector :x 1.4285715 :y -3.3333333 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-dust-scale-x* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                                :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                                :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-dust-scale-y* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                                :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                                :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                                )
          )
    )

(define *part-daxter-sign-explosion-dust-in-curve-settings* (new 'static 'particle-curve-settings
                                                              :lifetime-base (seconds 0.5)
                                                              :lifetime-offset (seconds 1)
                                                              :flags (particle-curve-flags pcf0)
                                                              )
        )

(set! (-> *part-id-table* 3873 init-specs 14 initial-valuef)
      (the-as float *part-daxter-sign-explosion-dust-in-curve-settings*)
      )

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* color-start) *range-dax-sign-explo-dust-color*)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* alpha-start) *range-dax-sign-explo-dust-alpha*)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* scale-x-start)
      *range-dax-sign-explo-dust-scale-x*
      )

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* scale-y-start)
      *range-dax-sign-explo-dust-scale-y*
      )

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* r-scalar) #f)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* g-scalar) #f)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* b-scalar) #f)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* a-scalar) *curve-dax-sign-explo-dust-alpha*)

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* scale-x-scalar)
      *curve-dax-sign-explo-dust-scale-x*
      )

(set! (-> *part-daxter-sign-explosion-dust-in-curve-settings* scale-y-scalar)
      *curve-dax-sign-explo-dust-scale-y*
      )

(defpart 3875
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.7)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3876
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags ())
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-dax-sign-explo-color* (new 'static 'curve-color-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'inline-array vector 4
                                           (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                           (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                           (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                           (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                           )
                                         :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *range-dax-sign-explo-alpha* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                         :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *range-dax-sign-explo-scale-x* (new 'static 'curve2d-fast
                                           :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                           :ys (new 'static 'vector :x 3.0 :y 5.0 :z 6.0 :w 7.0)
                                           :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                           )
          )
    )

(if #t
    (set! *range-dax-sign-explo-scale-y* (new 'static 'curve2d-fast
                                           :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                           :ys (new 'static 'vector :x 3.0 :y 5.0 :z 6.0 :w 7.0)
                                           :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                           )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-alpha* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                         :ys (new 'static 'vector :y 1.0 :z 0.8)
                                         :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-scale-x* (new 'static 'curve2d-fast
                                           :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                           :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                           :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                           )
          )
    )

(if #t
    (set! *curve-dax-sign-explo-scale-y* (new 'static 'curve2d-fast
                                           :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                           :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                           :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                           )
          )
    )

(define *part-daxter-sign-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                              :lifetime-base (seconds 0.1)
                                                              :lifetime-offset (seconds 0.6)
                                                              :flags (particle-curve-flags pcf0)
                                                              )
        )

(set! (-> *part-id-table* 3876 init-specs 16 initial-valuef)
      (the-as float *part-daxter-sign-explosion-texture-curve-settings*)
      )

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* color-start) *range-dax-sign-explo-color*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* alpha-start) *range-dax-sign-explo-alpha*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* scale-x-start) *range-dax-sign-explo-scale-x*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* scale-y-start) *range-dax-sign-explo-scale-y*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* r-scalar) #f)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* g-scalar) #f)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* b-scalar) #f)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* a-scalar) *curve-dax-sign-explo-alpha*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* scale-x-scalar) *curve-dax-sign-explo-scale-x*)

(set! (-> *part-daxter-sign-explosion-texture-curve-settings* scale-y-scalar) *curve-dax-sign-explo-scale-y*)

(defpart 3874
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 3877
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 4))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.033333335) (meters -0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.00066666666))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 170))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3868
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 32.0)
    (:a 128.0)
    (:fade-a -0.36571428 -0.36571428)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(defpartgroup group-fma-barrier-explosion-big
  :id 1077
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 3879 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 3880 :period (seconds 30) :length (seconds 0.035))
    (sp-item 3881 :flags (sp3) :period (seconds 30))
    (sp-item 3882 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 3883 :period (seconds 30) :length (seconds 0.335))
    (sp-item 3884 :period (seconds 30) :length (seconds 0.5))
    (sp-item 3885 :flags (sp3) :binding 3878)
    (sp-item 3885 :flags (sp3) :binding 3878)
    (sp-item 3885 :flags (sp3) :binding 3878)
    (sp-item 3885 :flags (sp3) :binding 3878)
    (sp-item 3885 :flags (sp3) :binding 3878)
    (sp-item 3878 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3878 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3878 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3878 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 3878 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

(defpart 3879
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 40.0)
    (:a 64.0)
    (:fade-a -0.10666667)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 3880
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 1) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3881
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 160.0)
    (:b 40.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.12307692)
    (:fade-b -0.046153847)
    (:fade-a -0.19692308 -0.19692308)
    (:accel-x (meters -0.013333334) 1 (meters 0.026666667))
    (:friction 0.93)
    (:timer (seconds 2.167))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:next-time (seconds 0.335))
    (:next-launcher 3886)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3886
  :init-specs ((:friction 0.7))
  )

(defpart 3883
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.5) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.10666667)
    (:fade-b -0.04)
    (:fade-a -0.17066666 -0.17066666)
    (:accel-x (meters -0.013333334) 1 (meters 0.026666667))
    (:friction 0.7)
    (:timer (seconds 2.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-2d-spline-align-instant)
    (:next-time (seconds 0.335))
    (:next-launcher 3887)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3887
  :init-specs ((:friction 0.7))
  )

(defpart 3884
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.13333334))
    (:accel-x (meters -0.013333334) 1 (meters 0.026666667))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (launch-along-z))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:next-time (seconds 0.335))
    (:next-launcher 3888)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3888
  :init-specs ((:friction 0.7))
  )

(if #t
    (set! *range-fma-barrier-explo-big-color* (new 'static 'curve-color-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'inline-array vector 4
                                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                  )
                                                :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *range-fma-barrier-explo-big-alpha* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                                :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *range-fma-barrier-explo-big-scale-x* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                  :ys (new 'static 'vector :x 10.0 :y 20.0 :z 21.0 :w 22.0)
                                                  :one-over-x-deltas (new 'static 'vector :x 10.0 :y 1.0 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *range-fma-barrier-explo-big-scale-y* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                  :ys (new 'static 'vector :x 10.0 :y 20.0 :z 21.0 :w 22.0)
                                                  :one-over-x-deltas (new 'static 'vector :x 10.0 :y 1.0 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *curve-fma-barrier-explo-big-alpha* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                                :ys (new 'static 'vector :y 1.0 :z 0.8)
                                                :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *curve-fma-barrier-explo-big-scale-x* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                                  :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                                  :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *curve-fma-barrier-explo-big-scale-y* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                                  :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                                  :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                                  )
          )
    )

(define *part-fma-barrier-explosion-big-texture-curve-settings* (new 'static 'particle-curve-settings
                                                                  :lifetime-base (seconds 0.7)
                                                                  :lifetime-offset (seconds 0.6)
                                                                  :flags (particle-curve-flags pcf0)
                                                                  )
        )

(set! (-> *part-id-table* 3884 init-specs 17 initial-valuef)
      (the-as float *part-fma-barrier-explosion-big-texture-curve-settings*)
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* color-start)
      *range-fma-barrier-explo-big-color*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* alpha-start)
      *range-fma-barrier-explo-big-alpha*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* scale-x-start)
      *range-fma-barrier-explo-big-scale-x*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* scale-y-start)
      *range-fma-barrier-explo-big-scale-y*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* r-scalar) #f)

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* g-scalar) #f)

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* b-scalar) #f)

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* a-scalar)
      *curve-fma-barrier-explo-big-alpha*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* scale-x-scalar)
      *curve-fma-barrier-explo-big-scale-x*
      )

(set! (-> *part-fma-barrier-explosion-big-texture-curve-settings* scale-y-scalar)
      *curve-fma-barrier-explo-big-scale-y*
      )

(defpart 3882
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 3885
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 10) (meters 8))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-y (meters 0.1) (meters 0.1))
    (:scalevel-x (meters -0.05) (meters -0.05))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.00066666666))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 80))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3878
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 32.0)
    (:a 128.0)
    (:fade-a -0.17066666 -0.17066666)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 2.5))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(deftype port-board-vent (bouncer)
  ()
  )


(defmethod init-collision! ((this port-board-vent))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec crate))
      (set! (-> v1-2 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-2 prim-core action) (collide-action))
      (set-vector! (-> v1-2 local-sphere) 0.0 4096.0 0.0 10240.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-2)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod init-skel! ((this port-board-vent))
  0
  (none)
  )
