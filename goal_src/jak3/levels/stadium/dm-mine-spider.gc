;;-*-Lisp-*-
(in-package goal)

;; name: dm-mine-spider.gc
;; name in dgo: dm-mine-spider
;; dgos: STAA

;; DECOMP BEGINS

(defun check-drop-level-dm-mine-spider-dirt-rubble ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((f30-0 (-> arg1 key origin trans y)))
    (when (< (-> arg2 y) f30-0)
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (sp-kill-particle arg0 arg1)
        (set-vector! gp-0 (-> arg2 x) f30-0 (-> arg2 z) 1.0)
        (launch-particles (-> *part-id-table* 3750) gp-0)
        (launch-particles (-> *part-id-table* 3751) gp-0)
        (launch-particles (-> *part-id-table* 3752) gp-0)
        )
      )
    )
  (none)
  )

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-dm-mine-spider ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 51) 200))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 20))
        (v1-6 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 60))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 (the-as int s3-0))))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-6)))
    )
  (none)
  )

(defpartgroup group-dm-mine-spider-birth
  :id 1028
  :duration (seconds 0.835)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 3 0 8)
  :parts ((sp-item 3753 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 20) :length (seconds 0.835))
    (sp-item 3753 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 20) :length (seconds 0.667))
    (sp-item 3753 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 20) :length (seconds 0.5))
    (sp-item 3753 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 20) :length (seconds 0.335))
    (sp-item 3754 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 7.335) :length (seconds 0.4))
    (sp-item 3755 :fade-after (meters 50) :falloff-to (meters 100) :period (seconds 7.335) :length (seconds 1.067))
    )
  )

(defpart 3753
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-dm-mine-spider-clumps)
    (:num 0.1 0.1)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 0.1) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.1) (meters 0.2))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:accel-y (meters -0.002) (meters -0.002))
    (:friction 0.98)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'spt-func-part-dm-mine-spider-clumps)
    (:conerot-x (degrees 0) (degrees 15))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0.1))
    )
  )

(defun spt-birth-func-part-dm-mine-spider-clumps ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-dm-mine-spider arg0 arg1 arg2)
  (none)
  )

(defun spt-func-part-dm-mine-spider-clumps ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (check-drop-level-dm-mine-spider-dirt-rubble arg0 arg1 arg2)
  (none)
  )

(defpart 3754
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-dm-mine-spider-clumps-mass)
    (:num 0.25 0.25)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.1) (meters 0.1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.033333335) (meters 0.033333335))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:accel-y (meters -0.002) (meters -0.002))
    (:friction 0.98)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'spt-birth-func-part-dm-mine-spider-clumps-mass)
    (:conerot-x (degrees 0) (degrees 45))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0.5))
    )
  )

(defun spt-birth-func-part-dm-mine-spider-clumps-mass ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-dm-mine-spider arg0 arg1 arg2)
  (none)
  )

(defun spt-func-part-dm-mine-spider-clumps-mass ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (check-drop-level-dm-mine-spider-dirt-rubble arg0 arg1 arg2)
  (none)
  )

(defpart 3750
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-dm-mine-spider-clumps-pop)
    (:num 1.0 2.0)
    (:scale-x (meters 0.05) (meters 0.15))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.05) (meters 0.15))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.006666667) (meters 0.026666667))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -0.42666668 -0.85333335)
    (:accel-y (meters -0.00066666666))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'spt-birth-func-part-dm-mine-spider-clumps-pop)
    (:conerot-x (degrees 10) (degrees 60))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defun spt-birth-func-part-dm-mine-spider-clumps-pop ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-dm-mine-spider arg0 arg1 arg2)
  (none)
  )

(defun spt-func-part-dm-mine-spider-clumps-pop ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (check-drop-level-dm-mine-spider-dirt-rubble arg0 arg1 arg2)
  (none)
  )

(defpart 3751
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-dm-mine-spider-clumps-stays)
    (:num 1.0 1.0)
    (:scale-x (meters 0.05) (meters 0.15))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.05) (meters 0.15))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.04))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:friction 0.94 0.02)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'spt-birth-func-part-dm-mine-spider-clumps-stays)
    (:next-time (seconds 1.5) (seconds 0.497))
    (:next-launcher 3756)
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defun spt-birth-func-part-dm-mine-spider-clumps-stays ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-dm-mine-spider arg0 arg1 arg2)
  (none)
  )

(defun spt-func-part-dm-mine-spider-clumps-stays ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (check-drop-level-dm-mine-spider-dirt-rubble arg0 arg1 arg2)
  (none)
  )

(defpart 3756
  :init-specs ((:rotvel-z (degrees 0)) (:fade-a -0.10666667 -0.10666667))
  )

(defpart 3755
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 0.4 0.4)
    (:scale-x (meters 1) (meters 0.5))
    (:scale-y (meters 1) (meters 0.5))
    (:r 80.0 10.0)
    (:g 60.0 10.0)
    (:b 40.0 10.0)
    (:a 16.0 40.0)
    (:vel-y (meters 0.026666667) (meters 0.026666667))
    (:scalevel-x (meters 0.006666667) (meters 0.0016666667))
    (:scalevel-y (meters 0.0033333334) (meters 0.0016666667))
    (:fade-a -0.053333335 -0.053333335)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.85 0.05)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees 0) (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 0.5))
    )
  )

(defpart 3752
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 1.0)
    (:sound (static-sound-spec "debris-ground" :num 0.01 :group 0 :volume 100.0))
    (:scale-x (meters 0.5) (meters 0.25))
    (:scale-y (meters 0.25) (meters 0.25))
    (:r 100.0)
    (:g 80.0)
    (:b 60.0)
    (:a 30.0 40.0)
    (:vel-y (meters 0.013333334) (meters 0.026666667))
    (:scalevel-x (meters 0.0033333334) (meters 0.0016666667))
    (:scalevel-y (meters 0.0033333334) (meters 0.0016666667))
    (:fade-a -0.06666667 -0.06666667)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.9 0.05)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpartgroup group-dm-mine-spider-explode
  :id 1029
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 3758 :period (seconds 20) :length (seconds 0.035))
    (sp-item 3759 :period (seconds 20) :length (seconds 0.035))
    (sp-item 3760 :flags (sp7) :period (seconds 20) :length (seconds 0.035) :binding 3757)
    (sp-item 3760 :flags (sp7) :period (seconds 20) :length (seconds 0.035) :binding 3757)
    (sp-item 3760 :flags (sp7) :period (seconds 20) :length (seconds 0.035) :binding 3757)
    (sp-item 3760 :flags (sp7) :period (seconds 20) :length (seconds 0.035) :binding 3757)
    (sp-item 3760 :flags (sp7) :period (seconds 20) :length (seconds 0.035) :binding 3757)
    (sp-item 3757 :flags (sp2))
    (sp-item 3757 :flags (sp2))
    (sp-item 3757 :flags (sp2))
    (sp-item 3757 :flags (sp2))
    (sp-item 3757 :flags (sp2))
    )
  )

(defpart 3758
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 10.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 30.0)
    (:g 80.0 20.0)
    (:b 255.0)
    (:a 255.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.2)
    (:fade-g -0.53333336)
    (:fade-a -1.7 -1.7)
    (:friction 0.93)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3759
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 20.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 30.0)
    (:g 80.0 20.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.1)
    (:fade-g -0.26666668)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.75)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3760
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2) (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-z (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.0033333334) (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 launch-along-z))
    (:next-time (seconds 0.035))
    (:next-launcher 3761)
    (:conerot-x (degrees 0) (degrees 60))
    (:rotate-y (degrees 0))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

(defpart 3761
  :init-specs ((:a 32.0 32.0) (:next-time (seconds 0.035)) (:next-launcher 3762))
  )

(defpart 3762
  :init-specs ((:a 64.0 64.0) (:next-time (seconds 0.035)) (:next-launcher 3761))
  )

(defpart 3757
  :init-specs ((:texture (middot level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 0.0 1 0.5)
    (:scale-x (meters 0.000024414063) (meters 0.000024414063))
    (:scale-y :copy scale-x)
    (:r 30.0)
    (:g 80.0 20.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.00000040690105))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334 -1.28)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9 0.07)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:rotate-y (degrees 0))
    )
  )

(deftype dm-mine-spider (nav-enemy)
  ((change-dir-time  time-frame)
   (last-change-dir  time-frame)
   (move-angle       float)
   (heading          symbol)
   (size             float)
   (angle-spot       float)
   (trackable?       symbol)
   )
  (:state-methods
    run-stop
    attack
    )
  (:methods
    (dm-mine-spider-method-192 (_type_) none)
    (dm-mine-spider-method-193 (_type_ nav-control vector) none)
    )
  )


(defskelgroup skel-dm-mine-spider dm-mine-spider dm-mine-spider-lod0-jg -1
              ((dm-mine-spider-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              :shadow dm-mine-spider-shadow-mg
              :origin-joint-index 3
              :global-effects 32
              )

(define *dm-mine-spider-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 3
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x7
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 6
    :notice-anim 6
    :hostile-anim 7
    :hit-anim 6
    :knocked-anim 10
    :knocked-land-anim 6
    :die-anim 6
    :die-falling-anim 6
    :victory-anim 6
    :jump-wind-up-anim 6
    :jump-in-air-anim 6
    :jump-land-anim 6
    :neck-joint -1
    :look-at-joint 3
    :bullseye-joint 12
    :sound-hit (static-sound-name "spider-crunch")
    :sound-die (static-sound-name "spider-die")
    :notice-distance (meters 300)
    :notice-distance-delta (meters 300)
    :proximity-notice-distance (meters 300)
    :default-hit-points 1.0
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      generic-attack
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      flut-attack
      board
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      knocked
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 6)
    :attack-shove-up (meters 3)
    :attack-mode 'generic
    :attack-damage 1
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 275251.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :ragdoll-info #f
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #f
    :callback-info #f
    :use-momentum #f
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #t
    :use-pacing #t
    :walk-anim 7
    :turn-anim 6
    :run-anim 7
    :taunt-anim -1
    :run-travel-speed (meters 15)
    :run-acceleration (meters 8)
    :run-turning-acceleration (meters 120)
    :walk-travel-speed (meters 15)
    :walk-acceleration (meters 1)
    :walk-turning-acceleration (meters 5)
    :maximum-rotation-rate (degrees 720)
    :notice-nav-radius (meters 8)
    :frustration-distance (meters 12)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *dm-mine-spider-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod get-inv-mass ((this dm-mine-spider))
  100.0
  )

(defmethod event-handler ((this dm-mine-spider) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('touched)
     (let* ((s3-0 arg0)
            (v1-1 (if (type? s3-0 process-drawable)
                      s3-0
                      )
                  )
            )
       (when v1-1
         (let ((s3-1 (-> (the-as process-drawable v1-1) root))
               (a1-3 (new 'stack 'collide-query))
               )
           0.0
           (set! (-> a1-3 start-pos quad) (-> this root root-prim prim-core world-sphere quad))
           (vector-!
             (-> a1-3 move-dist)
             (the-as vector (-> (the-as collide-shape s3-1) root-prim prim-core))
             (-> a1-3 start-pos)
             )
           (let ((v1-6 a1-3))
             (set! (-> v1-6 radius) 40.96)
             (set! (-> v1-6 collide-with) (collide-spec backgnd))
             (set! (-> v1-6 ignore-process0) this)
             (set! (-> v1-6 ignore-process1) (ppointer->process (-> this parent)))
             (set! (-> v1-6 ignore-pat) (-> this root pat-ignore-mask))
             (set! (-> v1-6 action-mask) (collide-action solid))
             )
           (if (< (fill-and-probe-using-line-sphere *collide-cache* a1-3) 0.0)
               (send-attack this arg0 (the-as touching-shapes-entry (-> arg3 param 0)) (-> this attack-id))
               )
           )
         )
       )
     )
    (('event-explode)
     (sound-play "mnspider-blow")
     (cond
       ((logtest? (-> *part-group-id-table* 1029 flags) (sp-group-flag sp13))
        (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
        (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1029))
        )
       (else
         (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
         (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1029))
         )
       )
     (go (method-of-object this die-fast))
     )
    (else
      ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; WARN: Return type mismatch int vs search-info-flag.
(defmethod process-mask->search-info-flag ((this dm-mine-spider))
  (the-as search-info-flag (if (-> this trackable?)
                               (the-as int ((method-of-type nav-enemy process-mask->search-info-flag) this))
                               0
                               )
          )
  )

(defmethod normalize-heading! ((this dm-mine-spider) (arg0 nav-control))
  (let ((t9-0 (method-of-object this dm-mine-spider-method-193))
        (v1-1 arg0)
        (a3-0 (-> arg0 state))
        (a2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> a2-0 quad) (-> a3-0 heading quad))
    (t9-0 this v1-1 a2-0)
    )
  0
  (none)
  )

(defmethod dm-mine-spider-method-193 ((this dm-mine-spider) (arg0 nav-control) (arg1 vector))
  (set! (-> arg1 y) 0.0)
  (vector-normalize! arg1 1.0)
  (let ((gp-0 (new 'stack-no-clear 'quaternion))
        (s5-1 (-> this root quat))
        )
    (quaternion-set! gp-0 0.0 (-> arg1 x) 0.0 (+ 1.0 (-> arg1 z)))
    (quaternion-normalize! gp-0)
    (quaternion-smooth-seek!
      s5-1
      s5-1
      gp-0
      (* (fmax 0.5 (* 0.00024414062 (-> arg0 state speed))) (seconds-per-frame))
      )
    )
  0
  (none)
  )

(defmethod nav-enemy-method-187 ((this dm-mine-spider))
  (nav-enemy-method-188 this)
  (when (nav-enemy-method-185 this)
    (cond
      ((logtest? (enemy-flag ef39) (-> this enemy-flags))
       (set! (-> this enemy-flags) (the-as enemy-flag (logclear (-> this enemy-flags) (enemy-flag ef39))))
       (set! (-> this root gspot-pos quad) (-> this root trans quad))
       )
      (else
        (normalize-heading! this (-> this nav))
        (nav-enemy-method-161 this (-> this nav))
        )
      )
    )
  (enemy-common-post this)
  (update-transforms (-> this root))
  0
  (none)
  )

(defmethod dm-mine-spider-method-192 ((this dm-mine-spider))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s5-0 (handle->process (-> this focus handle)))
           (a0-5 (if (type? s5-0 process-focusable)
                     s5-0
                     )
                 )
           )
      (when a0-5
        (let* ((v1-5 (get-trans (the-as process-focusable a0-5) 0))
               (s4-1 (vector-! (new 'stack-no-clear 'vector) v1-5 (-> this root trans)))
               (f30-0 (vector-length s4-1))
               (s5-1 (new 'stack-no-clear 'vector))
               )
          (let ((s3-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat))))
            (let ((a1-4 (-> this nav state)))
              (set! (-> s5-1 quad) (-> a1-4 target-pos quad))
              )
            (set! (-> s4-1 y) 0.0)
            (vector-normalize! s4-1 1.0)
            (cond
              ((< f30-0 8192.0)
               (go (method-of-object this attack))
               )
              ((time-elapsed? (-> this last-change-dir) (-> this change-dir-time))
               (if (rand-vu-percent? 0.25)
                   (go (method-of-object this run-stop))
                   )
               (set-time! (-> this last-change-dir))
               (set! (-> this change-dir-time) (rand-vu-int-range (seconds 0.5) (seconds 0.7)))
               (if (< (vector-dot s4-1 s3-0) 0.0)
                   (vector-rotate-around-y! s4-1 s3-0 (if (rand-vu-percent? 0.5)
                                                          24576.0
                                                          -24576.0
                                                          )
                                            )
                   )
               (vector-deg-seek s4-1 s3-0 s4-1 16384.0)
               (let ((v1-30 s5-1))
                 (let ((a0-20 (-> this root trans)))
                   (let ((a1-13 (+ 40960.0 (* 0.4 f30-0))))
                     (.mov vf7 a1-13)
                     )
                   (.lvf vf5 (&-> s4-1 quad))
                   (.lvf vf4 (&-> a0-20 quad))
                   )
                 (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                 (.mul.x.vf acc vf5 vf7 :mask #b111)
                 (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                 (.svf (&-> v1-30 quad) vf6)
                 )
               )
              )
            )
          (let ((v1-32 (-> this nav state)))
            (logclear! (-> v1-32 flags) (nav-state-flag directional-mode))
            (logior! (-> v1-32 flags) (nav-state-flag target-poly-dirty))
            (set! (-> v1-32 target-pos quad) (-> s5-1 quad))
            )
          )
        0
        )
      )
    0
    (none)
    )
  )

;; WARN: Return type mismatch float vs none.
(defmethod enemy-common-post ((this dm-mine-spider))
  (let ((t9-0 (method-of-type nav-enemy enemy-common-post)))
    (t9-0 this)
    )
  (+! (-> this angle-spot) (* 182.04445 (* 100.0 (seconds-per-frame))))
  (none)
  )

(defmethod nav-enemy-method-164 ((this dm-mine-spider))
  (let ((v1-1 (-> this nav state))
        (a0-2 (-> this root trans))
        )
    (logclear! (-> v1-1 flags) (nav-state-flag directional-mode))
    (logior! (-> v1-1 flags) (nav-state-flag target-poly-dirty))
    (set! (-> v1-1 target-pos quad) (-> a0-2 quad))
    )
  0
  (none)
  )

(defstate attack (dm-mine-spider)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (nav-enemy-method-181 self)
    (sound-play "flitter-attack")
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-7 *game-info*)
           (a0-4 (+ (-> v1-7 attack-id) 1))
           )
      (set! (-> v1-7 attack-id) a0-4)
      (set! (-> self attack-id) a0-4)
      )
    (sound-play "spider-attack")
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (nav-enemy-method-182 self)
    (ja-no-eval :group! dm-mine-spider-anticipate-explode-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (let ((v1-27 (-> self root root-prim)))
      (set! (-> v1-27 prim-core world-sphere w) (* 5.0 (-> v1-27 prim-core world-sphere w)))
      (set! (-> v1-27 local-sphere w) (* 5.0 (-> v1-27 local-sphere w)))
      )
    (update-transforms (-> self root))
    (let ((a1-3 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-3 options) (overlaps-others-options))
      (set! (-> a1-3 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-3 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root) a1-3)
      )
    (sound-play "mnspider-blow")
    (cond
      ((logtest? (-> *part-group-id-table* 1029 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1029))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1029))
        )
      )
    (suspend)
    (go-virtual die-fast)
    )
  :post nav-enemy-travel-post
  )

(defstate run-stop (dm-mine-spider)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (stop-look-at! self)
    (logclear! (-> self enemy-flags) (enemy-flag notice alert cam-attack-mode))
    (logior! (-> self enemy-flags) (enemy-flag use-notice-distance))
    (set! (-> self state-timeout) (seconds 1))
    (if (-> self on-notice)
        (logior! (-> self enemy-flags) (enemy-flag enable-on-notice))
        )
    (if (-> self on-active)
        (logior! (-> self enemy-flags) (enemy-flag enable-on-active))
        )
    (if (-> self on-hostile)
        (logior! (-> self enemy-flags) (enemy-flag enable-on-hostile))
        )
    (when (not (logtest? (enemy-flag chase-startup) (-> self enemy-flags)))
      (if (logtest? (-> self enemy-flags) (enemy-flag actor-pause-backup))
          (logior! (-> self mask) (process-mask actor-pause))
          (logclear! (-> self mask) (process-mask actor-pause))
          )
      )
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (-> self state-timeout))
      (let ((v1-3 (-> self focus aware)))
        (cond
          ((< 1 (the-as int v1-3))
           (go-virtual notice)
           )
          ((> (the-as int v1-3) 0)
           (go-virtual active)
           )
          )
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! dm-mine-spider-run-stop-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (nav-enemy-method-182 self)
    (until #f
      (ja-no-eval :group! dm-mine-spider-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post nav-enemy-travel-post
  )

(defstate hostile (dm-mine-spider)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self last-change-dir))
    (set! (-> self change-dir-time) 0)
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) enter)))
      (if t9-0
          (t9-0)
          )
      )
    )
  :trans (behavior ()
    (if (time-elapsed? (-> self state-time) (seconds 0.5))
        (set! (-> self trackable?) #t)
        )
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (dm-mine-spider-method-192 self)
    )
  :post (behavior ()
    (let ((t9-0 add-debug-line)
          (a0-0 #t)
          (a1-0 577)
          (a2-0 (-> self root trans))
          (t0-0 (-> self nav state))
          (a3-0 (new 'stack-no-clear 'vector))
          )
      (set! (-> a3-0 quad) (-> t0-0 target-pos quad))
      (t9-0
        a0-0
        (the-as bucket-id a1-0)
        a2-0
        a3-0
        (new 'static 'rgba :r #xff :g #x1f :b #x7f :a #x7f)
        #f
        (the-as rgba -1)
        )
      )
    (nav-enemy-travel-post)
    )
  )

(defstate knocked (dm-mine-spider)
  :virtual #t
  :enter (behavior ()
    (sound-play "spider-get-hit")
    (let ((t9-2 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-2
          (t9-2)
          )
      )
    )
  )

(defstate ambush (dm-mine-spider)
  :virtual #t
  :enter (behavior ()
    (when (logtest? (-> self enemy-flags) (enemy-flag enable-on-notice))
      (logclear! (-> self enemy-flags) (enemy-flag enable-on-notice))
      (let ((gp-0 (-> self on-notice)))
        (if gp-0
            (script-eval gp-0 :vector (-> self root trans))
            )
        )
      )
    (let ((v1-12 (-> self root root-prim)))
      (set! (-> v1-12 prim-core collide-as) (collide-spec))
      (set! (-> v1-12 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy ambush) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (set-time! (-> self state-time))
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.6))
        (suspend)
        )
      )
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-6 prim-core collide-with) (-> self root backup-collide-with))
      )
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (update-focus self)
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (the int (* 300.0 (rnd-float-range self 0.0 0.6))))
        (suspend)
        )
      )
    (ja-channel-push! 1 0)
    (ja-no-eval :group! dm-mine-spider-climb-start-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (let ((gp-2 (new 'stack-no-clear 'vector)))
      (set! (-> gp-2 quad) (-> self root trans quad))
      (let ((s5-2 (vector-normalize! (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat)) 14745.6)))
        (vector+! s5-2 gp-2 s5-2)
        (ja-no-eval :group! dm-mine-spider-climb-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (vector-lerp! (-> self root trans) gp-2 s5-2 (/ (ja-frame-num 0) (the float (ja-num-frames 0))))
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    (ja-no-eval :group! dm-mine-spider-climb-end-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (nav-enemy-method-181 self)
    (nav-enemy-method-183 self)
    (set-look-at-mode! self 1)
    (set-time! (-> self state-time))
    (go-virtual hostile)
    )
  :post (behavior ()
    (nav-enemy-simple-post)
    )
  )

(defmethod enemy-method-88 ((this dm-mine-spider) (arg0 enemy-knocked-info))
  #f
  )

;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this dm-mine-spider) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; WARN: Return type mismatch int vs object.
(defmethod init-enemy-defaults! ((this dm-mine-spider) (arg0 nav-enemy-info))
  (set! (-> arg0 nav-mesh) *default-nav-mesh*)
  (let ((t9-0 (method-of-type nav-enemy init-enemy-defaults!)))
    (t9-0 this arg0)
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (let ((f0-0 (-> this size)))
    (set-vector! (-> this root scale) f0-0 f0-0 f0-0 1.0)
    (set! (-> this draw bounds w) (* (-> this draw bounds w) f0-0))
    )
  (set! (-> this angle-spot) (* 182.04445 (rnd-float-range this 0.0 360.0)))
  (let ((v1-14 (-> this nav)))
    (logclear! (-> v1-14 flags) (nav-control-flag limit-rotation-rate output-sphere-hash))
    (logclear! (-> this nav flags) (nav-control-flag update-heading-from-facing))
    (set! (-> this enemy-flags) (the-as enemy-flag (logclear (-> this enemy-flags) (enemy-flag ef44))))
    (let ((a0-12 v1-14))
      (set! (-> a0-12 sphere-mask) (the-as uint #x1000fe))
      )
    0
    (let ((a0-14 v1-14))
      (set! (-> a0-14 nav-cull-radius) 12288.0)
      )
    0
    (logclear! (-> v1-14 flags) (nav-control-flag output-sphere-hash))
    )
  (set! (-> this enemy-info callback-info) *physics-nav-callback-info*)
  (nav-enemy-method-181 this)
  0
  )

(defmethod init-enemy-collision! ((this dm-mine-spider))
  (set! (-> this size) (rnd-float-range this 0.8 1.2))
  (let ((f30-0 (* 3276.8 (-> this size)))
        (s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player)))
        )
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-9 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-9 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-9 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-9 prim-core action) (collide-action solid deadly no-standon))
      (set-vector! (-> v1-9 local-sphere) 0.0 f30-0 0.0 f30-0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-9)
      )
    (set! (-> s5-0 nav-radius) (* 3686.4 (-> this size)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> s5-0 penetrated-by) (the-as penetrate -1))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod init-enemy! ((this dm-mine-spider))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dm-mine-spider" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this *dm-mine-spider-nav-enemy-info*)
  (set! (-> this move-angle) 10922.667)
  (set! (-> this heading) (if (= (rand-vu-int-range 0 1) 1)
                              #t
                              #f
                              )
        )
  (set! (-> this change-dir-time) 0)
  (set! (-> this trackable?) #f)
  (set-gravity-length (-> this root dynam) 491520.0)
  (none)
  )

(deftype dm-mine-spider-spawner (process-focusable)
  ((count-alive      int32)
   (attack-id        uint32)
   (next-spawn-time  time-frame)
   (alt-actor        entity-actor)
   (nav-id           uint32)
   (num-nav-mesh     int32)
   (count-max        int32)
   (hit-points       int32)
   (nav-sphere       handle)
   )
  (:state-methods
    idle
    die
    )
  (:methods
    (dm-mine-spider-spawner-method-30 (_type_) none)
    (dm-mine-spider-spawner-method-31 (_type_) none)
    (dm-mine-spider-spawner-method-32 (_type_ vector) none)
    (dm-mine-spider-spawner-method-33 (_type_ vector) symbol)
    )
  )


(defskelgroup skel-dm-mine-spider-spawner dm-mine-spider-spawner dm-mine-spider-spawner-lod0-jg dm-mine-spider-spawner-idle-ja
              ((dm-mine-spider-spawner-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :global-effects 32
              )

(defmethod dm-mine-spider-spawner-method-31 ((this dm-mine-spider-spawner))
  (local-vars (sv-16 process-tree))
  (let ((s2-0 (-> this child))
        (s5-0 0)
        )
    (let ((s4-0 0)
          (s3-0 0.0)
          )
      (while s2-0
        (let ((s1-0 (-> s2-0 0)))
          (set! sv-16 (if (type? s1-0 dm-mine-spider)
                          s1-0
                          )
                )
          )
        (when sv-16
          (when (not (logtest? (-> (the-as dm-mine-spider sv-16) draw status) (draw-control-status on-screen)))
            (let ((f0-0 (vector-vector-xz-distance (-> (the-as dm-mine-spider sv-16) root trans) (target-pos 0))))
              (if (< (the float s3-0) f0-0)
                  (set! s3-0 f0-0)
                  )
              )
            (+! s4-0 1)
            )
          (+! s5-0 1)
          )
        (set! s2-0 (-> s2-0 0 brother))
        )
      )
    (set! (-> this count-alive) s5-0)
    )
  (none)
  )

(defmethod dm-mine-spider-spawner-method-32 ((this dm-mine-spider-spawner) (arg0 vector))
  (let ((s5-0 (new 'stack-no-clear 'cquery-with-vec)))
    (set! (-> s5-0 vec0 quad) (-> arg0 quad))
    (set! (-> s5-0 cquery start-pos quad) (-> s5-0 vec0 quad))
    (set-vector! (-> s5-0 cquery move-dist) 0.0 -40960.0 0.0 1.0)
    (let ((v1-3 (-> s5-0 cquery)))
      (set! (-> v1-3 radius) 1024.0)
      (set! (-> v1-3 collide-with) (collide-spec backgnd))
      (set! (-> v1-3 ignore-process0) #f)
      (set! (-> v1-3 ignore-process1) #f)
      (set! (-> v1-3 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-3 action-mask) (collide-action solid))
      )
    (let ((f0-5 (fill-and-probe-using-line-sphere *collide-cache* (-> s5-0 cquery))))
      (when (>= f0-5 0.0)
        (vector+float*! (-> s5-0 vec0) (-> s5-0 cquery start-pos) (-> s5-0 cquery move-dist) f0-5)
        (set! (-> s5-0 vec1 quad) (-> s5-0 cquery best-other-tri normal quad))
        (set! (-> arg0 quad) (-> s5-0 vec0 quad))
        )
      )
    )
  0
  (none)
  )

(defmethod dm-mine-spider-spawner-method-33 ((this dm-mine-spider-spawner) (arg0 vector))
  (dotimes (s2-0 (-> this num-nav-mesh))
    (let ((s4-0 (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor s2-0)))
      (when s4-0
        (new 'stack-no-clear 'vector)
        (new 'stack-no-clear 'vector)
        (let ((s3-0 (new 'stack-no-clear 'vector)))
          (set! (-> s3-0 quad) (-> arg0 quad))
          (let ((a1-2 (new 'stack-no-clear 'nav-poly)))
            (set! (-> a1-2 vertex1 x) 122880.0)
            (set! (-> a1-2 data 20) (the-as uint 2))
            (vector-! (the-as vector (-> a1-2 vertex)) s3-0 (the-as vector (-> s4-0 bounds)))
            (set! (-> s3-0 quad) (-> a1-2 vertex 0 quad))
            (let ((a1-3 (nav-mesh-method-45 s4-0 a1-2)))
              (when a1-3
                (let ((s2-1 (new 'stack-no-clear 'vector)))
                  (let ((a3-0 (new 'stack-no-clear 'vector)))
                    (project-point-onto-plane-of-poly-local s4-0 a1-3 s2-1 a3-0 s3-0)
                    )
                  (set! (-> s3-0 y) (-> s2-1 y))
                  )
                (vector+! s3-0 s3-0 (the-as vector (-> s4-0 bounds)))
                (dm-mine-spider-spawner-method-32 this s3-0)
                (set! (-> arg0 quad) (-> s3-0 quad))
                (set! (-> this nav-id) (-> s4-0 entity aid))
                (return #t)
                )
              )
            )
          )
        )
      )
    )
  #f
  )

(defmethod run-logic? ((this dm-mine-spider-spawner))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

(defstate idle (dm-mine-spider-spawner)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack 'touch)
       (let ((v1-3 (if (= message 'attack)
                       (-> block param 1)
                       #f
                       )
                   )
             )
         (cond
           ((or (logtest? (process-mask projectile) (-> proc mask))
                (and (the-as uint v1-3)
                     (not (logtest? (-> (the-as attack-info v1-3) penetrate-using) (penetrate flop punch spin roll uppercut bonk)))
                     )
                )
            (cond
              ((logtest? (penetrate dark-bomb) (-> (the-as attack-info v1-3) penetrate-using))
               (set! (-> self hit-points) -1)
               )
              ((logtest? (process-mask projectile) (-> proc mask))
               (+! (-> self hit-points) -1)
               )
              (else
                (+! (-> self hit-points) -3)
                )
              )
            (when (< (-> self hit-points) 0)
              (cond
                ((logtest? (-> *part-group-id-table* 1029 flags) (sp-group-flag sp13))
                 (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                 (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1029))
                 )
                (else
                  (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                  (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1029))
                  )
                )
              (go-virtual die)
              )
            #f
            )
           (else
             (let* ((s5-0 proc)
                    (a0-15 (if (type? s5-0 process-focusable)
                               s5-0
                               )
                           )
                    )
               (when a0-15
                 (send-event
                   a0-15
                   'attack
                   (-> block param 0)
                   (static-attack-info :mask (vehicle-impulse-factor) ((id (-> self attack-id))
                                                                       (damage 2.0)
                                                                       (vehicle-damage-factor 1.0)
                                                                       (vehicle-impulse-factor 1.0)
                                                                       (mode 'generic)
                                                                       (shove-back (meters 3))
                                                                       (shove-up (meters 3))
                                                                       )
                                       )
                   )
                 #f
                 )
               )
             )
           )
         )
       )
      )
    )
  :trans (behavior ()
    (local-vars (sv-112 vector))
    (dm-mine-spider-spawner-method-31 self)
    (when (and (< (-> self count-alive) (-> self count-max))
               *target*
               (and (< (if *target*
                           (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))
                           4096000.0
                           )
                       163840.0
                       )
                    (not (-> *setting-control* user-current nuke-active?))
                    #t
                    )
               )
      (when (< (-> self next-spawn-time) (current-time))
        (set! (-> self next-spawn-time) (+ (current-time) (rand-vu-int-range (seconds 0.5) (seconds 1.5))))
        (let ((s5-1 (vector+! (new 'stack-no-clear 'vector) (-> self root trans) (new 'static 'vector :w 1.0))))
          (when (dm-mine-spider-spawner-method-33 self s5-1)
            (let ((gp-1 (new 'stack-no-clear 'enemy-init-by-other-params)))
              (set! (-> gp-1 trans quad) (-> s5-1 quad))
              (let ((s5-2 quaternion-copy!)
                    (s4-0 (-> gp-1 quat))
                    (s3-0 quaternion<-rotate-y-vector)
                    (s2-0 (new 'stack-no-clear 'quaternion))
                    (s1-0 vector-normalize!)
                    (s0-0 (new 'stack-no-clear 'vector))
                    )
                (set! sv-112 (-> self root trans))
                (let ((v0-7 (target-pos 0)))
                  (s5-2 s4-0 (s3-0 s2-0 (s1-0 (vector-! s0-0 sv-112 v0-7) 1.0)))
                  )
                )
              (set! (-> gp-1 entity) (-> self alt-actor))
              (set! (-> gp-1 directed?) #f)
              (set! (-> gp-1 no-initial-move-to-ground?) #f)
              (set! (-> gp-1 art-level) #f)
              (let* ((s5-4 (ppointer->process
                             (process-spawn dm-mine-spider :init enemy-init-by-other self gp-1 :name "dm-mine-spider" :to self)
                             )
                           )
                     (gp-2 (if (type? s5-4 process-focusable)
                               s5-4
                               )
                           )
                     (s5-5 (entity-nav-mesh-by-aid (the-as actor-id (-> self nav-id))))
                     (v1-27 (if (type? s5-5 entity-nav-mesh)
                                s5-5
                                )
                            )
                     )
                (when v1-27
                  (change-to (-> v1-27 nav-mesh) (the-as process-drawable gp-2))
                  (let ((v1-30 (-> (the-as process-drawable gp-2) nav state)))
                    (set! (-> v1-30 current-poly) (the-as nav-poly #f))
                    )
                  0
                  )
                )
              )
            )
          )
        )
      )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post transform-post
  )

(defstate die (dm-mine-spider-spawner)
  :virtual #t
  :code (behavior ()
    (when (type? (-> self root) collide-shape)
      (let ((v1-2 (-> self root root-prim)))
        (set! (-> v1-2 prim-core collide-as) (collide-spec))
        (set! (-> v1-2 prim-core collide-with) (collide-spec))
        )
      0
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (transform-post)
    (let ((a0-3 (handle->process (-> self nav-sphere))))
      (if a0-3
          (deactivate a0-3)
          )
      )
    (send-event self 'death-end)
    (let ((gp-0 (-> self child)))
      (while gp-0
        (send-event (ppointer->process gp-0) 'notice 'die)
        (set! gp-0 (-> gp-0 0 brother))
        )
      )
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

;; WARN: Return type mismatch int vs search-info-flag.
(defmethod process-mask->search-info-flag ((this dm-mine-spider-spawner))
  (the-as search-info-flag 32)
  )

(defmethod get-trans ((this dm-mine-spider-spawner) (arg0 int))
  "Get the `trans` for this process."
  (let ((gp-0 (-> this root)))
    (cond
      ((and (= arg0 3) (type? gp-0 collide-shape))
       (let ((v0-1 (new 'static 'vector)))
         (vector+! v0-1 (the-as vector (-> gp-0 root-prim prim-core)) (new 'static 'vector :y 16384.0 :w 1.0))
         (set! (-> v0-1 w) 1638.4)
         v0-1
         )
       )
      (else
        ((method-of-type process-focusable get-trans) this arg0)
        )
      )
    )
  )

(defmethod dm-mine-spider-spawner-method-30 ((this dm-mine-spider-spawner))
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status subtask-complete)))
      (go (method-of-object this idle))
      (go (method-of-object this idle))
      )
  0
  (none)
  )

;; WARN: Return type mismatch none vs object.
(defmethod init-from-entity! ((this dm-mine-spider-spawner) (arg0 entity-actor))
  (local-vars (sv-16 res-tag) (sv-32 vector))
  (logior! (-> this mask) (process-mask enemy))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((v0-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v0-1 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v0-1 prim-core action) (collide-action solid no-standon))
      (set! (-> v0-1 transform-index) 3)
      (set-vector! (-> v0-1 local-sphere) 0.0 -12288.0 0.0 16384.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v0-1)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-12 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-12 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-12 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-dm-mine-spider-spawner" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! sv-16 (new 'static 'res-tag))
  (res-lump-data (-> this entity) 'nav-mesh-actor pointer :tag-ptr (& sv-16))
  (set! (-> this num-nav-mesh) (the-as int (-> sv-16 elt-count)))
  (when (> (-> this num-nav-mesh) 0)
    (let ((s4-2 (get-process *default-dead-pool* simple-nav-sphere #x4000 1)))
      (set! (-> this nav-sphere)
            (ppointer->handle
              (when s4-2
                (let ((t9-7 (method-of-type simple-nav-sphere activate)))
                  (t9-7 (the-as simple-nav-sphere s4-2) this "simple-nav-sphere" (the-as pointer #x70004000))
                  )
                (let ((s3-1 run-function-in-process)
                      (s2-0 s4-2)
                      (s1-0 simple-nav-sphere-init-by-other)
                      (s0-0 #x46800000)
                      )
                  (set! sv-32 (-> this root trans))
                  (let ((t0-1 (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 0))
                        (t1-1 -1)
                        )
                    ((the-as (function object object object object object object none) s3-1) s2-0 s1-0 s0-0 sv-32 t0-1 t1-1)
                    )
                  )
                (-> s4-2 ppointer)
                )
              )
            )
      )
    )
  (set! (-> this alt-actor) (entity-actor-lookup arg0 'alt-actor 0))
  (set! (-> this count-max)
        (res-lump-value (-> this entity) 'max-count int :default (the-as uint128 5) :time -1000000000.0)
        )
  (let* ((v1-33 *game-info*)
         (a0-22 (+ (-> v1-33 attack-id) 1))
         )
    (set! (-> v1-33 attack-id) a0-22)
    (set! (-> this attack-id) a0-22)
    )
  (set! (-> this hit-points) 10)
  (dm-mine-spider-spawner-method-30 this)
  )
