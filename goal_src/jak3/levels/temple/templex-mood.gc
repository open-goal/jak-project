;;-*-Lisp-*-
(in-package goal)

;; name: templex-mood.gc
;; name in dgo: templex-mood
;; dgos: TEMX

;; DECOMP BEGINS

(deftype templex-states (structure)
  ((light  light-state   :inline)
   (flame  flames-state  :inline)
   )
  )


;; WARN: Return type mismatch float vs none.
(defun update-templex-lights ((arg0 mood-context))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((v1-0 (-> arg0 current-fog)))
      (set-vector! (-> v1-0 fog-color) 0.0 44.7999 57.5999 1.0)
      (set-vector! (-> v1-0 fog-dists) 131072.0 1843200.0 255.0 128.0)
      (set-vector! (-> v1-0 erase-color) 0.0 0.0 0.0 128.0)
      )
    (let ((s5-0 (-> arg0 light-group 1)))
      (mem-copy! (the-as pointer s5-0) (the-as pointer (-> *level* level-default mood-context light-group)) 192)
      (set! (-> s5-0 ambi extra x) 0.8)
      )
    (let ((s5-1 (-> arg0 light-group 2)))
      (let ((s4-0 (new 'static 'vector :x 1.0 :y 0.65 :z 0.4 :w 1.0)))
        (mem-copy! (the-as pointer s5-1) (the-as pointer (-> *level* level-default mood-context light-group)) 192)
        (let ((a1-11 (-> s5-1 dir0 color)))
          (let ((v1-6 (-> s5-1 dir0 color))
                (a0-6 s4-0)
                )
            (.lvf vf4 (&-> v1-6 quad))
            (.lvf vf5 (&-> a0-6 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.vf vf6 vf4 vf5 :mask #b111)
          (.svf (&-> a1-11 quad) vf6)
          )
        (let ((a0-7 (-> s5-1 dir1 color)))
          (.lvf vf4 (&-> (-> s5-1 dir1 color) quad))
          (.lvf vf5 (&-> s4-0 quad))
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.vf vf6 vf4 vf5 :mask #b111)
          (.svf (&-> a0-7 quad) vf6)
          )
        )
      (set! (-> s5-1 ambi extra x) 0.8)
      )
    (let ((v1-10 (-> arg0 light-group 3)))
      (vector-float*! (the-as vector (-> v1-10 ambi color)) (the-as vector (-> arg0 times)) 0.55)
      (vector+!
        (the-as vector (-> v1-10 ambi color))
        (the-as vector (-> v1-10 ambi color))
        (new 'static 'vector :x 0.4253 :y 0.39 :z 0.45 :w 1.0)
        )
      (set! (-> v1-10 dir0 color quad) (-> arg0 times 0 quad))
      (let ((a0-12 (-> v1-10 dir0)))
        (set! (-> a0-12 direction x) 0.0)
        (set! (-> a0-12 direction y) 1.0)
        (set! (-> a0-12 direction z) 0.0)
        (set! (-> a0-12 direction w) 0.0)
        )
      (set! (-> v1-10 ambi extra x) 0.8)
      (set! (-> v1-10 dir0 extra x) 0.8)
      (set! (-> v1-10 dir1 extra x) 0.0)
      (set! (-> v1-10 dir2 extra x) 0.0)
      )
    (none)
    )
  )

(defbehavior update-mood-templex time-of-day-proc ((arg0 mood-context) (arg1 float) (arg2 int))
  (copy-mood-exterior arg0)
  (update-templex-lights arg0)
  (when (and (= (-> *level* level arg2 status) 'active)
             (< (the-as uint (-> *time-of-day-context* mode)) (the-as uint 9))
             )
    (-> arg0 state)
    (if (task-node-closed? (game-task-node volcano-darkeco-resolution))
        (set! (-> arg0 times 5 w) 1.0)
        )
    (update-mood-flames arg0 6 2 8 0.5 0.0009765625 1.5)
    )
  0
  (none)
  )
