;;-*-Lisp-*-
(in-package goal)

;; name: wasstada-part.gc
;; name in dgo: wasstada-part
;; dgos: WASSTADA

(define-extern *range-color-lava-geyser-flame* curve-color-fast)
(define-extern *range-alpha-lava-geyser-flame* curve2d-fast)
(define-extern *range-scale-lava-geyser-flame-x* curve2d-fast)
(define-extern *range-scale-lava-geyser-flame-y* curve2d-fast)
(define-extern *r-curve-lava-geyser-flame* curve2d-fast)
(define-extern *g-curve-lava-geyser-flame* curve2d-fast)
(define-extern *b-curve-lava-geyser-flame* curve2d-fast)
(define-extern *curve-alpha-lava-geyser-flame* curve2d-fast)
(define-extern *curve-scale-lava-geyser-flame-x* curve2d-fast)
(define-extern *curve-scale-lava-geyser-flame-y* curve2d-fast)
(define-extern *range-color-wasstada-crucible-flame* curve-color-fast)
(define-extern *range-alpha-wasstada-crucible-flame* curve2d-fast)
(define-extern *range-scale-wasstada-crucible-flame-x* curve2d-fast)
(define-extern *range-scale-wasstada-crucible-flame-y* curve2d-fast)
(define-extern *r-curve-wasstada-crucible-flame* curve2d-fast)
(define-extern *g-curve-wasstada-crucible-flame* curve2d-fast)
(define-extern *b-curve-wasstada-crucible-flame* curve2d-fast)
(define-extern *curve-alpha-wasstada-crucible-flame* curve2d-fast)
(define-extern *curve-wasstada-crucible-flame-x* curve2d-fast)
(define-extern *curve-wasstada-crucible-flame-y* curve2d-fast)
(define-extern *range-color-wasstada-bowl-flame* curve-color-fast)
(define-extern *range-alpha-wasstada-bowl-flame* curve2d-fast)
(define-extern *range-scale-wasstada-bowl-flame-x* curve2d-fast)
(define-extern *range-scale-wasstada-bowl-flame-y* curve2d-fast)
(define-extern *r-curve-wasstada-bowl-flame* curve2d-fast)
(define-extern *g-curve-wasstada-bowl-flame* curve2d-fast)
(define-extern *b-curve-wasstada-bowl-flame* curve2d-fast)
(define-extern *curve-alpha-wasstada-bowl-flame* curve2d-fast)
(define-extern *curve-wasstada-bowl-flame-x* curve2d-fast)
(define-extern *curve-wasstada-bowl-flame-y* curve2d-fast)

;; DECOMP BEGINS

(defpartgroup group-wasstada-lava-geyser-sploop
  :id 489
  :duration (seconds 2)
  :flags (sp0 sp4 sp9)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1930 :falloff-to (meters 200) :period (seconds 10) :length (seconds 0.067)))
  )

(defpart 1930
  :init-specs ((:texture (lava-drop-01 wasstada-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 2.0 10.0)
    (:x (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 0.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 80.0 100.0)
    (:b 0.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.1))
    (:rotvel-z (degrees -2) (degrees 4))
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 4))
    (:flags (launch-along-z))
    (:userdata :data (new 'static 'boxed-array :type int32 5 1 0 #x24f00000 #x24f00100 #x24f00200 #x24f00300))
    (:func 'check-drop-group-center)
    (:conerot-x (degrees 0) (degrees 15))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-wasstada-lava-geyser-flame
  :id 490
  :duration (seconds 2)
  :flags (sp0 sp4 sp9)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1931 :fade-after (meters 100) :period (seconds 10) :length (seconds 0.167)))
  )

(defpart 1931
  :init-specs ((:texture (flame01 level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 0.5 0.5)
    (:x (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 5))
    (:scale-y :copy scale-x)
    (:r 155.0)
    (:g 164.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters -0.0033333334) (meters 0.0016666667))
    (:accel-y (meters 0.0033333334))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 launch-along-z))
    (:userdata 0.0)
    (:func 'live-func-curve)
    )
  )

(if #t
    (set! *range-color-lava-geyser-flame* (new 'static 'curve-color-fast
                                            :xs (new 'static 'vector :y -0.6 :z -0.9 :w -1.0)
                                            :ys (new 'static 'inline-array vector 4
                                              (new 'static 'vector :x 128.0 :y 30.0 :w 128.0)
                                              (new 'static 'vector :x 128.0 :y 120.0 :z 30.0 :w 128.0)
                                              (new 'static 'vector :x 128.0 :y 128.0 :z 80.0 :w 128.0)
                                              (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                              )
                                            :one-over-x-deltas (new 'static 'vector :x 1.6666666 :y 3.333334 :z 9.999998 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *range-alpha-lava-geyser-flame* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                            :ys (new 'static 'vector :x 128.0 :y 255.0 :z 256.0 :w 257.0)
                                            :one-over-x-deltas (new 'static 'vector :x 127.0 :y 1.0 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *range-scale-lava-geyser-flame-x* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 3.0 :y 6.0 :z 7.0 :w 8.0)
                                              :one-over-x-deltas (new 'static 'vector :x 3.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-scale-lava-geyser-flame-y* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 3.0 :y 6.0 :z 7.0 :w 8.0)
                                              :one-over-x-deltas (new 'static 'vector :x 3.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *r-curve-lava-geyser-flame* (new 'static 'curve2d-fast
                                        :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                        :ys (new 'static 'vector :x 1.0 :y 1.0 :z 2.0 :w 3.0)
                                        :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                        )
          )
    )

(if #t
    (set! *g-curve-lava-geyser-flame* (new 'static 'curve2d-fast
                                        :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                        :ys (new 'static 'vector :x 0.7 :y 0.5 :z 1.5 :w 2.5)
                                        :one-over-x-deltas (new 'static 'vector :x -0.19999999 :y 1.0 :z 1.0 :w 1.0)
                                        )
          )
    )

(if #t
    (set! *b-curve-lava-geyser-flame* (new 'static 'curve2d-fast
                                        :xs (new 'static 'vector :y -0.6 :z -1.0 :w -2.0)
                                        :ys (new 'static 'vector :x 1.0 :w 1.0)
                                        :one-over-x-deltas (new 'static 'vector :x -1.6666666 :z 1.0 :w 1.0)
                                        )
          )
    )

(if #t
    (set! *curve-alpha-lava-geyser-flame* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -0.3 :z -0.5 :w -1.0)
                                            :ys (new 'static 'vector :y 0.5 :z 1.0)
                                            :one-over-x-deltas (new 'static 'vector :x 1.6666666 :y 2.5000002 :z -2.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *curve-scale-lava-geyser-flame-x* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                              :ys (new 'static 'vector :x 0.5 :y 1.0 :z 0.3 :w 1.3)
                                              :one-over-x-deltas (new 'static 'vector :x 1.0 :y -1.4 :z 0.99999994 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-scale-lava-geyser-flame-y* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                              :ys (new 'static 'vector :x 0.5 :y 1.0 :z 1.3 :w 2.3)
                                              :one-over-x-deltas (new 'static 'vector :x 1.0 :y 0.5999999 :z 1.0 :w 1.0)
                                              )
          )
    )

(define *part-wasstada-lava-geyser-flame-curve-settings* (new 'static 'particle-curve-settings
                                                           :lifetime-base (seconds 0.4)
                                                           :lifetime-offset (seconds 0.2)
                                                           :flags (particle-curve-flags pcf1)
                                                           )
        )

(set! (-> *part-id-table* 1931 init-specs 15 initial-valuef)
      (the-as float *part-wasstada-lava-geyser-flame-curve-settings*)
      )

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* color-start) *range-color-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* alpha-start) *range-alpha-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* scale-x-start) *range-scale-lava-geyser-flame-x*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* scale-y-start) *range-scale-lava-geyser-flame-y*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* r-scalar) *r-curve-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* g-scalar) *g-curve-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* b-scalar) *b-curve-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* a-scalar) *curve-alpha-lava-geyser-flame*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* scale-x-scalar) *curve-scale-lava-geyser-flame-x*)

(set! (-> *part-wasstada-lava-geyser-flame-curve-settings* scale-y-scalar) *curve-scale-lava-geyser-flame-y*)

(defpartgroup group-wasstada-lava-steam
  :id 491
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1932 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7)))
  )

(defpart 1932
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 0.0 0.1)
    (:scale-x (meters 3) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 200.0 55.0)
    (:g 60.0 60.0)
    (:b 20.0)
    (:a 0.0)
    (:vel-y (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-x (meters 0.0033333334) (meters 0.01))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-b 0.06666667)
    (:fade-a 0.8)
    (:accel-y (meters 0.00016666666))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 launch-along-z))
    (:next-time (seconds 0.335))
    (:next-launcher 1933)
    (:conerot-z (degrees 0) (degrees 180))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1933
  :init-specs ((:fade-a -0.16))
  )

(defpartgroup group-wasstada-lava-rocks-heat
  :id 492
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1934 :falloff-to (meters 100)) (sp-item 1935 :flags (is-3d)))
  )

(defpart 1934
  :init-specs ((:num 1.0)
    (:x (meters -20) (meters 40))
    (:y (meters 0))
    (:z (meters -20) (meters 40))
    (:rot-x 6)
    (:r 40960.0)
    (:g 20480.0)
    (:b 20480.0)
    (:vel-y (meters 0.016666668))
    (:fade-b -40.96)
    (:timer (seconds 0.335))
    (:flags (distort))
    (:next-time (seconds 0.167))
    (:next-launcher 1936)
    )
  )

(defpart 1936
  :init-specs ((:fade-b 40.96))
  )

(defpart 1935
  :init-specs ((:texture (lava-drop-01 wasstada-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.02 0.03)
    (:x (meters -20) (meters 40))
    (:y (meters 0))
    (:z (meters -20) (meters 40))
    (:scale-x (meters 0.05) (meters 1))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y (meters 0.05) (meters 1))
    (:r 30.0)
    (:g 0.0 10.0)
    (:b 0.0)
    (:a 128.0)
    (:vel-z (meters -0.005))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-y (meters 0.0033333334) (meters 0.0033333334))
    (:timer (seconds 20))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x408b00
                       #x40a200
                       #x40a600
                       #x40aa00
                       #x40ae00
                       #x24f00100
                       #x24f00200
                       #x24f00300
                       )
               )
    (:next-time (seconds 0.835) (seconds 3.33))
    (:next-launcher 1937)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1937
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y (meters 0)) (:next-time (seconds 5)) (:next-launcher 1938))
  )

(defpart 1938
  :init-specs ((:scalevel-x (meters -0.0033333334)) (:scalevel-y :copy scalevel-x))
  )

(defpartgroup group-wasstada-crucible-fire
  :id 493
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 40)
  :parts ((sp-item 1939 :fade-after (meters 100) :falloff-to (meters 200) :flags (sp7))
    (sp-item 1940 :fade-after (meters 100) :falloff-to (meters 200) :flags (sp7))
    (sp-item 1941 :fade-after (meters 100) :falloff-to (meters 200))
    (sp-item 1942 :falloff-to (meters 30))
    )
  )

(defpart 1939
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0 1.0)
    (:scale-x (meters 1))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 0.0)
    (:vel-z (meters -0.001) (meters 0.001))
    (:accel-y (meters 0.001) (meters 0.00033333333))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0))
    (:conerot-y (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(if #t
    (set! *range-color-wasstada-crucible-flame* (new 'static 'curve-color-fast
                                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                  :ys (new 'static 'inline-array vector 4
                                                    (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                    )
                                                  :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *range-alpha-wasstada-crucible-flame* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                  :ys (new 'static 'vector :x 96.0 :y 255.0 :z 256.0 :w 257.0)
                                                  :one-over-x-deltas (new 'static 'vector :x 159.0 :y 1.0 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *range-scale-wasstada-crucible-flame-x* (new 'static 'curve2d-fast
                                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                    :ys (new 'static 'vector :x 2.0 :y 4.0 :z 5.0 :w 6.0)
                                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                                    )
          )
    )

(if #t
    (set! *range-scale-wasstada-crucible-flame-y* (new 'static 'curve2d-fast
                                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                    :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                                    :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                                    )
          )
    )

(if #t
    (set! *r-curve-wasstada-crucible-flame* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                              :ys (new 'static 'vector :x 0.2 :y 1.0 :z 1.0 :w 1.0)
                                              :one-over-x-deltas (new 'static 'vector :x 1.6 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *g-curve-wasstada-crucible-flame* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                              :ys (new 'static 'vector :y 1.0 :z 0.8 :w 0.2)
                                              :one-over-x-deltas (new 'static 'vector :x 2.0 :y -1.0 :z -2.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *b-curve-wasstada-crucible-flame* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                              :ys (new 'static 'vector :x 1.0 :y 1.0)
                                              :one-over-x-deltas (new 'static 'vector :y -5.0000005 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-alpha-wasstada-crucible-flame* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -0.4 :z -0.7 :w -1.0)
                                                  :ys (new 'static 'vector :z 1.0 :w 0.2)
                                                  :one-over-x-deltas (new 'static 'vector :y 3.3333335 :z -2.6666665 :w 1.0)
                                                  )
          )
    )

(if #t
    (set! *curve-wasstada-crucible-flame-x* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -0.6 :w -1.0)
                                              :ys (new 'static 'vector :x 0.3 :y 0.6 :z 0.5 :w 0.2)
                                              :one-over-x-deltas (new 'static 'vector :x 0.6 :y -1.0 :z -0.75000006 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-wasstada-crucible-flame-y* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                              :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.0 :w 1.2)
                                              :one-over-x-deltas (new 'static 'vector :x 1.2 :y 1.0 :z 0.6666668 :w 1.0)
                                              )
          )
    )

(define *part-wasstada-crucible-flame-curve-settings* (new 'static 'particle-curve-settings
                                                        :lifetime-base (seconds 0.1)
                                                        :lifetime-offset (seconds 0.3)
                                                        :flags (particle-curve-flags pcf1)
                                                        )
        )

(set! (-> *part-id-table* 1939 init-specs 14 initial-valuef)
      (the-as float *part-wasstada-crucible-flame-curve-settings*)
      )

(set! (-> *part-wasstada-crucible-flame-curve-settings* color-start) *range-color-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* alpha-start) *range-alpha-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* scale-x-start)
      *range-scale-wasstada-crucible-flame-x*
      )

(set! (-> *part-wasstada-crucible-flame-curve-settings* scale-y-start)
      *range-scale-wasstada-crucible-flame-y*
      )

(set! (-> *part-wasstada-crucible-flame-curve-settings* r-scalar) *r-curve-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* g-scalar) *g-curve-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* b-scalar) *b-curve-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* a-scalar) *curve-alpha-wasstada-crucible-flame*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* scale-x-scalar) *curve-wasstada-crucible-flame-x*)

(set! (-> *part-wasstada-crucible-flame-curve-settings* scale-y-scalar) *curve-wasstada-crucible-flame-y*)

(defpart 1940
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.4)
    (:y (meters 1))
    (:scale-x (meters 6) (meters 3))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 15.0 10.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1941
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.3) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-y (meters 0.033333335) (meters 0.016666668))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:friction 0.99 0.02)
    (:timer (seconds 1) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:conerot-x (degrees -20) (degrees 40))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 2))
    )
  )

(defpart 1942
  :init-specs ((:num 0.3)
    (:x (meters -1) (meters 2))
    (:y (meters 2))
    (:z (meters -1) (meters 2))
    (:rot-x 8)
    (:r 8192.0)
    (:g 4096.0)
    (:b 4096.0)
    (:vel-y (meters 0.0033333334))
    (:fade-b -6.826667)
    (:accel-y (meters 0.001))
    (:timer (seconds 0.667))
    (:flags (distort))
    (:next-time (seconds 0.335))
    (:next-launcher 1943)
    )
  )

(defpart 1943
  :init-specs ((:fade-b 6.826667))
  )

(defpartgroup group-wasstada-fire
  :id 494
  :flags (sp4)
  :bounds (static-bspherem 0 0 0 200)
  :parts ((sp-item 1944 :fade-after (meters 200) :falloff-to (meters 200))
    (sp-item 1945 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1946 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1947 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1948 :fade-after (meters 100) :falloff-to (meters 100))
    )
  )

(defpart 1944
  :init-specs ((:texture (flame01 level-default-sprite))
    (:num 1.0 1.0)
    (:y (meters -1))
    (:scale-x (meters 2.5) (meters 2))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-y (meters -0.0033333334) (meters 0.0016666667))
    (:scalevel-x (meters -0.016666668))
    (:fade-r 0.6666667)
    (:fade-g -0.16666667)
    (:fade-b -3.75)
    (:fade-a 0.85333335)
    (:accel-y (meters 0.00033333333) (meters 0.0023333333))
    (:timer (seconds 0.6))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1949)
    (:conerot-x (degrees -90) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 1.5))
    )
  )

(defpart 1945
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 1.0 1.0)
    (:y (meters -1))
    (:scale-x (meters 2.5) (meters 2))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-y (meters -0.006666667) (meters 0.0033333334))
    (:scalevel-x (meters -0.016666668))
    (:fade-r 0.6666667)
    (:fade-g -0.16666667)
    (:fade-b -3.75)
    (:fade-a 0.85333335)
    (:accel-y (meters 0.00033333333) (meters 0.005))
    (:timer (seconds 0.6))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1949)
    (:conerot-x (degrees -90) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 1.5))
    )
  )

(defpart 1949
  :init-specs ((:scalevel-x (meters -0.016666668)) (:fade-a -0.85 -0.85))
  )

(defpart 1946
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.4)
    (:y (meters 2))
    (:scale-x (meters 10) (meters 5))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 3599))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 15.0 10.0)
    (:omega (degrees 11261.25))
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 1947
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.5) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:friction 0.99)
    (:timer (seconds 1) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:conerot-x (degrees -30) (degrees 60))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 2))
    )
  )

(defpart 1948
  :init-specs ((:num 0.1)
    (:y (meters 2))
    (:rot-x 8)
    (:r 16384.0)
    (:g 8192.0)
    (:b 9011.2)
    (:vel-y (meters 0.006666667))
    (:accel-y (meters 0.0033333334))
    (:timer (seconds 0.5))
    (:flags (distort))
    (:conerot-x (degrees -30) (degrees 60))
    (:conerot-radius (meters 1) (meters 4))
    )
  )

(defpartgroup group-wasstada-fire-big
  :id 495
  :flags (sp4)
  :bounds (static-bspherem 0 0 0 200)
  :parts ((sp-item 1950 :fade-after (meters 200) :falloff-to (meters 200))
    (sp-item 1951 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1952 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1953 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1954 :fade-after (meters 100) :falloff-to (meters 100))
    )
  )

(defpart 1950
  :init-specs ((:texture (flame01 level-default-sprite))
    (:num 1.0 1.0)
    (:y (meters -1))
    (:scale-x (meters 4) (meters 4))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-y (meters -0.0033333334) (meters 0.0016666667))
    (:scalevel-x (meters -0.016666668))
    (:fade-r 0.6666667)
    (:fade-g -0.16666667)
    (:fade-b -3.75)
    (:fade-a 0.85333335)
    (:accel-y (meters 0.00033333333) (meters 0.0023333333))
    (:timer (seconds 0.6))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1955)
    (:conerot-x (degrees -90) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 1) (meters 3))
    )
  )

(defpart 1951
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 1.0 1.0)
    (:y (meters -1))
    (:scale-x (meters 3) (meters 3))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-y (meters -0.006666667) (meters 0.0033333334))
    (:scalevel-x (meters -0.016666668))
    (:fade-r 0.6666667)
    (:fade-g -0.16666667)
    (:fade-b -3.75)
    (:fade-a 0.85333335)
    (:accel-y (meters 0.00033333333) (meters 0.005))
    (:timer (seconds 0.6))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1955)
    (:conerot-x (degrees -90) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 1) (meters 3))
    )
  )

(defpart 1955
  :init-specs ((:scalevel-x (meters -0.016666668)) (:fade-a -0.85 -0.85))
  )

(defpart 1952
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.4)
    (:y (meters 2))
    (:scale-x (meters 10) (meters 10))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 3599))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 15.0 10.0)
    (:omega (degrees 11261.25))
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    )
  )

(defpart 1953
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.5) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:friction 0.99)
    (:timer (seconds 1) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:conerot-x (degrees -30) (degrees 60))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 2))
    )
  )

(defpart 1954
  :init-specs ((:num 0.1)
    (:y (meters 2))
    (:rot-x 8)
    (:r 20480.0)
    (:g 8192.0)
    (:b 9011.2)
    (:vel-y (meters 0.006666667))
    (:accel-y (meters 0.0033333334))
    (:timer (seconds 0.5))
    (:flags (distort))
    (:conerot-x (degrees -30) (degrees 60))
    (:conerot-radius (meters 1) (meters 4))
    )
  )

(defpartgroup group-wasstada-bowl-fire
  :id 496
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 1 0 3)
  :parts ((sp-item 1956 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7))
    (sp-item 1957 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7))
    (sp-item 1958 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1959 :falloff-to (meters 30))
    )
  )

(defpart 1956
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0 1.0)
    (:y (meters -0.5))
    (:scale-x (meters 1))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 0.0)
    (:vel-y (meters -0.001) (meters 0.001))
    (:accel-y (meters 0.001) (meters 0.00033333333))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:rotate-y (degrees 0))
    )
  )

(if #t
    (set! *range-color-wasstada-bowl-flame* (new 'static 'curve-color-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'inline-array vector 4
                                                (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                                (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                                )
                                              :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-alpha-wasstada-bowl-flame* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 96.0 :y 255.0 :z 256.0 :w 257.0)
                                              :one-over-x-deltas (new 'static 'vector :x 159.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-scale-wasstada-bowl-flame-x* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'vector :x 2.0 :y 4.0 :z 5.0 :w 6.0)
                                                :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *range-scale-wasstada-bowl-flame-y* (new 'static 'curve2d-fast
                                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                                :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                                )
          )
    )

(if #t
    (set! *r-curve-wasstada-bowl-flame* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                          :ys (new 'static 'vector :x 0.2 :y 1.0 :z 1.0 :w 1.0)
                                          :one-over-x-deltas (new 'static 'vector :x 1.6 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *g-curve-wasstada-bowl-flame* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                          :ys (new 'static 'vector :y 1.0 :z 0.8 :w 0.2)
                                          :one-over-x-deltas (new 'static 'vector :x 2.0 :y -1.0 :z -2.0 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *b-curve-wasstada-bowl-flame* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                          :ys (new 'static 'vector :x 1.0 :y 1.0)
                                          :one-over-x-deltas (new 'static 'vector :y -5.0000005 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *curve-alpha-wasstada-bowl-flame* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.4 :z -0.7 :w -1.0)
                                              :ys (new 'static 'vector :z 1.0 :w 0.2)
                                              :one-over-x-deltas (new 'static 'vector :y 3.3333335 :z -2.6666665 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-wasstada-bowl-flame-x* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.5 :z -0.6 :w -1.0)
                                          :ys (new 'static 'vector :x 0.3 :y 0.6 :z 0.5 :w 0.2)
                                          :one-over-x-deltas (new 'static 'vector :x 0.6 :y -1.0 :z -0.75000006 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *curve-wasstada-bowl-flame-y* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                          :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.0 :w 1.2)
                                          :one-over-x-deltas (new 'static 'vector :x 1.2 :y 1.0 :z 0.6666668 :w 1.0)
                                          )
          )
    )

(define *part-wasstada-bowl-flame-curve-settings* (new 'static 'particle-curve-settings
                                                    :lifetime-base (seconds 0.1)
                                                    :lifetime-offset (seconds 0.3)
                                                    :flags (particle-curve-flags pcf1)
                                                    )
        )

(set! (-> *part-id-table* 1956 init-specs 15 initial-valuef)
      (the-as float *part-wasstada-bowl-flame-curve-settings*)
      )

(set! (-> *part-wasstada-bowl-flame-curve-settings* color-start) *range-color-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* alpha-start) *range-alpha-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* scale-x-start) *range-scale-wasstada-bowl-flame-x*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* scale-y-start) *range-scale-wasstada-bowl-flame-y*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* r-scalar) *r-curve-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* g-scalar) *g-curve-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* b-scalar) *b-curve-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* a-scalar) *curve-alpha-wasstada-bowl-flame*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* scale-x-scalar) *curve-wasstada-bowl-flame-x*)

(set! (-> *part-wasstada-bowl-flame-curve-settings* scale-y-scalar) *curve-wasstada-bowl-flame-y*)

(defpart 1957
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 0.4)
    (:z (meters 1))
    (:scale-x (meters 8) (meters 4))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 32.0)
    (:a 8.0 4.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.167) (seconds 0.08))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1958
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.3) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-y (meters 0.033333335) (meters 0.016666668))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:friction 0.99 0.02)
    (:timer (seconds 1) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:conerot-x (degrees -20) (degrees 40))
    (:rotate-y (degrees 0) (degrees 3598.0002))
    (:conerot-radius (meters 1) (meters 2))
    )
  )

(defpart 1959
  :init-specs ((:num 0.3)
    (:x (meters -1) (meters 2))
    (:y (meters 2))
    (:z (meters -1) (meters 2))
    (:rot-x 8)
    (:r 8192.0)
    (:g 4096.0)
    (:b 4096.0)
    (:vel-y (meters 0.0033333334))
    (:fade-b -6.826667)
    (:accel-y (meters 0.001))
    (:timer (seconds 0.667))
    (:flags (distort))
    (:next-time (seconds 0.335))
    (:next-launcher 1960)
    )
  )

(defpart 1960
  :init-specs ((:fade-b 6.826667))
  )

(defpartgroup group-part-wasstada-birds
  :id 497
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 1961 :flags (sp3))
    (sp-item 1962 :flags (sp3))
    (sp-item 1963 :flags (sp3))
    (sp-item 1964 :flags (sp3))
    (sp-item 1965 :flags (sp3))
    )
  )

(defpart 1961
  :init-specs ((:texture (flying-bird-01 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 1.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wasstada-bird1-path)
    )
  )

(defun part-wasstada-bird1-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1961 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) 0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) 0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) 1.7320508)
      (set! (-> v1-11 z) 2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 8192.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1961) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-tracker (-> a0-12 proc)) mat fvec quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1962
  :init-specs ((:texture (flying-bird-01 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 1.6))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 100.0)
    (:b 100.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wasstada-bird2-path)
    )
  )

(defun part-wasstada-bird2-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1962 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) 0.0)
    (set! (-> s2-0 y) 1.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 2.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) 0.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 32768.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1962) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-tracker (-> a0-10 proc)) mat fvec quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1963
  :init-specs ((:texture (flying-bird-01 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 1.7))
    (:scale-y :copy scale-x)
    (:r 120.0)
    (:g 120.0)
    (:b 120.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wasstada-bird3-path)
    )
  )

(defun part-wasstada-bird3-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1963 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 20480.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1963) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-tracker (-> a0-12 proc)) mat fvec quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1964
  :init-specs ((:texture (flying-bird-01 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 1.8))
    (:scale-y :copy scale-x)
    (:r 90.0)
    (:g 90.0)
    (:b 90.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wasstada-bird4-path)
    )
  )

(defun part-wasstada-bird4-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1964 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) -0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) -1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 16384.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1964) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-tracker (-> a0-12 proc)) mat fvec quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1965
  :init-specs ((:texture (flying-bird-01 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 1.9))
    (:scale-y :copy scale-x)
    (:r 110.0)
    (:g 110.0)
    (:b 110.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wasstada-bird5-path)
    )
  )

(defun part-wasstada-bird5-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1965 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) -1.0)
    (set! (-> s2-0 y) 0.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 0.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) -4.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 24576.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1965) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-tracker (-> a0-10 proc)) mat fvec quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpartgroup group-wasstada-crowd-wedge
  :id 498
  :flags (sp0 sp4 sp6)
  :bounds (static-bspherem 0 0 0 64)
  :rotate ((degrees 0) (degrees 180) (degrees 0))
  :parts ((sp-item 1966 :flags (sp7) :period (seconds 2) :length (seconds 0.017)))
  )

(defpart 1966
  :init-specs ((:texture (water-drops level-default-sprite))
    (:num 1.0)
    (:x (meters -6) (meters 12))
    (:z (meters -6) (meters 12))
    (:scale-x (meters 2) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 100.0)
    (:b 0.0 1 100.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334 -0.42666668)
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z))
    (:conerot-z (degrees -20))
    (:rotate-y (degrees 0))
    )
  )

(define *crowd-dudes-position* (new 'static 'boxed-array :type vector
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z 43008.0 :w 1.0)
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z 25804.8 :w 1.0)
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z 8601.6 :w 1.0)
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z -8601.6 :w 1.0)
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z -25804.8 :w 1.0)
                                 (new 'static 'vector :x -33587.2 :y -18432.0 :z -43008.0 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z 43008.0 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z 25804.8 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z 8601.6 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z -8601.6 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z -25804.8 :w 1.0)
                                 (new 'static 'vector :x -21299.2 :y -9011.2 :z -43008.0 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z 43008.0 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z 25804.8 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z 8601.6 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z -8601.6 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z -25804.8 :w 1.0)
                                 (new 'static 'vector :x -8192.0 :y -2048.0 :z -43008.0 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z 43008.0 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z 25804.8 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z 8601.6 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z -8601.6 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z -25804.8 :w 1.0)
                                 (new 'static 'vector :x 6553.6 :y 6963.2 :z -43008.0 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z 43008.0 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z 25804.8 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z 8601.6 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z -8601.6 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z -25804.8 :w 1.0)
                                 (new 'static 'vector :x 20480.0 :y 15564.8 :z -43008.0 :w 1.0)
                                 )
        )

(define *crowd-dudes-textures* (the-as (array (array int32)) (new 'static 'boxed-array :type array
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f0ba00
                                                                 #x24f0bb00
                                                                 #x24f0bc00
                                                                 #x24f0bd00
                                                                 #x24f0be00
                                                                 #x24f0bf00
                                                                 #x24f0c000
                                                                 #x24f0c100
                                                                 #x24f0c200
                                                                 #x24f0c300
                                                                 #x24f0c400
                                                                 #x24f0c500
                                                                 #x24f0c600
                                                                 #x24f0c700
                                                                 #x24f0c800
                                                                 #x24f0c900
                                                                 #x24f0ca00
                                                                 #x24f0cb00
                                                                 #x24f0cc00
                                                                 #x24f0cd00
                                                                 #x24f0ce00
                                                                 #x24f0ce00
                                                                 #x24f0ce00
                                                                 #x24f0cd00
                                                                 #x24f0cc00
                                                                 #x24f0cb00
                                                                 #x24f0ca00
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f0cf00
                                                                 #x24f0d000
                                                                 #x24f0d100
                                                                 #x24f0d200
                                                                 #x24f0d300
                                                                 #x24f0d400
                                                                 #x24f0d500
                                                                 #x24f0d600
                                                                 #x24f0d700
                                                                 #x24f0d800
                                                                 #x24f0d900
                                                                 #x24f0da00
                                                                 #x24f0db00
                                                                 #x24f0dc00
                                                                 #x24f0dd00
                                                                 #x24f0de00
                                                                 #x24f0df00
                                                                 #x24f0e000
                                                                 #x24f0e100
                                                                 #x24f0e200
                                                                 #x24f0e300
                                                                 #x24f0e300
                                                                 #x24f0e300
                                                                 #x24f0e200
                                                                 #x24f0e100
                                                                 #x24f0e000
                                                                 #x24f0df00
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f0e400
                                                                 #x24f0e500
                                                                 #x24f0e600
                                                                 #x24f0e700
                                                                 #x24f0e800
                                                                 #x24f0e900
                                                                 #x24f0ea00
                                                                 #x24f0eb00
                                                                 #x24f0ec00
                                                                 #x24f0ed00
                                                                 #x24f0ee00
                                                                 #x24f0ef00
                                                                 #x24f0f000
                                                                 #x24f0f100
                                                                 #x24f0f200
                                                                 #x24f0f300
                                                                 #x24f0f400
                                                                 #x24f0f500
                                                                 #x24f0f600
                                                                 #x24f0f700
                                                                 #x24f0f800
                                                                 #x24f0f800
                                                                 #x24f0f800
                                                                 #x24f0f700
                                                                 #x24f0f600
                                                                 #x24f0f500
                                                                 #x24f0f400
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f0f900
                                                                 #x24f0fa00
                                                                 #x24f0fb00
                                                                 #x24f0fc00
                                                                 #x24f0fd00
                                                                 #x24f0fe00
                                                                 #x24f0ff00
                                                                 #x24f10000
                                                                 #x24f10100
                                                                 #x24f10200
                                                                 #x24f10300
                                                                 #x24f10400
                                                                 #x24f10500
                                                                 #x24f10600
                                                                 #x24f10700
                                                                 #x24f10800
                                                                 #x24f10900
                                                                 #x24f10a00
                                                                 #x24f10b00
                                                                 #x24f10c00
                                                                 #x24f10d00
                                                                 #x24f10d00
                                                                 #x24f10d00
                                                                 #x24f10c00
                                                                 #x24f10b00
                                                                 #x24f10a00
                                                                 #x24f10900
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f10e00
                                                                 #x24f10f00
                                                                 #x24f11000
                                                                 #x24f11100
                                                                 #x24f11200
                                                                 #x24f11300
                                                                 #x24f11400
                                                                 #x24f11500
                                                                 #x24f11600
                                                                 #x24f11700
                                                                 #x24f11800
                                                                 #x24f11900
                                                                 #x24f11a00
                                                                 #x24f11b00
                                                                 #x24f11c00
                                                                 #x24f11d00
                                                                 #x24f11e00
                                                                 #x24f11f00
                                                                 #x24f12000
                                                                 #x24f12100
                                                                 #x24f12200
                                                                 #x24f12200
                                                                 #x24f12200
                                                                 #x24f12100
                                                                 #x24f12000
                                                                 #x24f11f00
                                                                 #x24f11e00
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f09000
                                                                 #x24f09100
                                                                 #x24f09200
                                                                 #x24f09300
                                                                 #x24f09400
                                                                 #x24f09500
                                                                 #x24f09600
                                                                 #x24f09700
                                                                 #x24f09800
                                                                 #x24f09900
                                                                 #x24f09a00
                                                                 #x24f09b00
                                                                 #x24f09c00
                                                                 #x24f09d00
                                                                 #x24f09e00
                                                                 #x24f09f00
                                                                 #x24f0a000
                                                                 #x24f0a100
                                                                 #x24f0a200
                                                                 #x24f0a300
                                                                 #x24f0a400
                                                                 #x24f0a400
                                                                 #x24f0a400
                                                                 #x24f0a300
                                                                 #x24f0a200
                                                                 #x24f0a100
                                                                 #x24f0a000
                                                                 )
                                                               (new 'static 'boxed-array :type int32
                                                                 5
                                                                 0
                                                                 0
                                                                 #x24f0a500
                                                                 #x24f0a600
                                                                 #x24f0a700
                                                                 #x24f0a800
                                                                 #x24f0a900
                                                                 #x24f0aa00
                                                                 #x24f0ab00
                                                                 #x24f0ac00
                                                                 #x24f0ad00
                                                                 #x24f0ae00
                                                                 #x24f0af00
                                                                 #x24f0b000
                                                                 #x24f0b100
                                                                 #x24f0b200
                                                                 #x24f0b300
                                                                 #x24f0b400
                                                                 #x24f0b500
                                                                 #x24f0b600
                                                                 #x24f0b700
                                                                 #x24f0b800
                                                                 #x24f0b900
                                                                 #x24f0b900
                                                                 #x24f0b900
                                                                 #x24f0b800
                                                                 #x24f0b700
                                                                 #x24f0b600
                                                                 #x24f0b500
                                                                 )
                                                               )
                                                             )
        )

(deftype spectator-info (structure)
  ((flags      int32)
   (textures   (array int32))
   (y-pos      float)
   (delta-y    float)
   (angle      float)
   (hola-time  time-frame)
   (offset     uint32)
   (speed      uint32)
   )
  )


(deftype wasstada-crowd (process-drawable)
  ((mat         matrix          :inline)
   (spectators  spectator-info  15 :inline)
   (hola        float           :offset 992)
   )
  (:state-methods
    idle
    )
  )


(defun crowd-dude-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (let* ((v1-1 (-> arg1 key proc))
         (s5-0 (-> (the-as wasstada-crowd v1-1) spectators (the-as uint (the-as int (-> arg1 user-float)))))
         )
    (if (logtest? (-> s5-0 flags) 1)
        (logior! (-> arg2 flag) 16)
        )
    (let* ((v1-7 (-> s5-0 textures))
           (s4-0 (+ (-> v1-7 length) -14))
           (a0-5 (-> s5-0 speed))
           (a1-4 (-> *display* base-clock frame-counter))
           )
      (cond
        ((logtest? (-> s5-0 flags) 2)
         (let* ((a2-4 (- a1-4 (-> s5-0 hola-time)))
                (s1-1 (min 10 (max 0 (the-as int (+ (/ (the-as uint a2-4) a0-5) (-> arg1 user1-int16))))))
                (s2-0 (+ s1-1 3 s4-0))
                )
           (let ((a1-7 (-> v1-7 s2-0)))
             (if (nonzero? a1-7)
                 (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-7))
                 )
             )
           (set! (-> arg2 x-y-z-sx y) (+ (-> s5-0 y-pos) (fmax 0.0 (* 819.2 (+ -5.0 (the float s1-1))))))
           (when (zero? (-> arg1 user-float))
             )
           (when (= s2-0 (+ s4-0 13))
             (logand! (-> s5-0 flags) -19)
             (logior! (-> s5-0 flags) 8)
             )
           )
         )
        ((logtest? (-> s5-0 flags) 4)
         (let* ((a2-9 (- a1-4 (-> s5-0 hola-time)))
                (s2-2 (min 10 (max 0 (the-as int (+ (/ (the-as uint a2-9) a0-5) (-> arg1 user1-int16))))))
                (s1-2 (+ s2-2 3 s4-0))
                )
           (let ((a1-10 (-> v1-7 s1-2)))
             (if (nonzero? a1-10)
                 (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-10))
                 )
             )
           (when (zero? (-> arg1 user-float))
             )
           (set! (-> arg2 x-y-z-sx y) (+ (-> s5-0 y-pos) (fmax 0.0 (* 819.2 (- 5.0 (the float s2-2))))))
           (when (= s1-2 (+ s4-0 13))
             (logand! (-> s5-0 flags) -13)
             (logior! (-> s5-0 flags) 16)
             (set! (-> arg2 x-y-z-sx y) (-> s5-0 y-pos))
             )
           )
         )
        (else
          (let ((a1-13
                  (-> v1-7
                      (+ (mod (max 0 (the-as int (+ (/ (the-as uint a1-4) a0-5) (-> arg1 user1-int16) (-> s5-0 offset)))) s4-0) 3)
                      )
                  )
                )
            (if (nonzero? a1-13)
                (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-13))
                )
            )
          )
        )
      )
    )
  (set! (-> arg2 r-g-b-a x) (* 128.0 (-> *time-of-day-context* current-prt-color x)))
  (set! (-> arg2 r-g-b-a y) (* 128.0 (-> *time-of-day-context* current-prt-color y)))
  (set! (-> arg2 r-g-b-a z) (* 128.0 (-> *time-of-day-context* current-prt-color z)))
  0
  (none)
  )

(defpart 1967
  :init-specs ((:texture (male4_00 wasstada-sprite))
    (:num 1.0)
    (:scale-x (meters 4))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 aux-list sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'crowd-dude-func)
    (:rotate-y (degrees 0))
    )
  )

(defstate idle (wasstada-crowd)
  :virtual #t
  :enter (behavior ()
    (dotimes (gp-0 15)
      (let ((s5-0 (new 'stack-no-clear 'vector)))
        (set! (-> s5-0 quad) (-> *crowd-dudes-position* gp-0 quad))
        (let ((s4-0 (-> self spectators gp-0)))
          (if (rand-vu-percent? 0.5)
              (logior! (-> s4-0 flags) 1)
              )
          (logior! (-> s4-0 flags) 16)
          (logand! (-> s4-0 flags) -15)
          (set! (-> s4-0 textures) (-> *crowd-dudes-textures* (rand-vu-int-count (-> *crowd-dudes-textures* length))))
          (set! (-> s4-0 offset) (the-as uint (rand-vu-int-count 64)))
          (set! (-> s4-0 speed) (the-as uint (the int (* 5.0000005 (the float (rand-vu-int-range 2 4))))))
          (+! (-> s5-0 x) (rand-vu-float-range -819.2 819.2))
          (+! (-> s5-0 y) (rand-vu-float-range -2048.0 0.0))
          (+! (-> s5-0 z) (rand-vu-float-range -2457.6 2457.6))
          (vector-matrix*! s5-0 s5-0 (-> self mat))
          (set! (-> s4-0 y-pos) (-> s5-0 y))
          (set! (-> s4-0 delta-y) 0.0)
          (set! (-> *part-id-table* 1967 init-specs 10 initial-valuef) (the-as float gp-0))
          (let ((v1-23 (vector-!
                         (new 'stack-no-clear 'vector)
                         s5-0
                         (new 'static 'vector :x 9494528.0 :y 135168.0 :z -2183168.0 :w 1.0)
                         )
                       )
                )
            (set! (-> s4-0 angle) (atan (-> v1-23 z) (-> v1-23 x)))
            )
          )
        (if (rand-vu-percent? 0.85)
            (launch-particles
              (-> *part-id-table* 1967)
              :launch-state (the-as sparticle-launch-state (-> self part data))
              :launch-control (-> self part)
              s5-0
              )
            )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (-> self hola)
    (+! (-> self hola) (* 2730.6667 (seconds-per-frame)))
    (dotimes (gp-0 15)
      (let ((s5-0 (-> self spectators gp-0)))
        0.0
        (when (and (< (seconds 1.5) (- (current-time) (-> s5-0 hola-time))) (logtest? (-> s5-0 flags) 8))
          (logior! (-> s5-0 flags) 4)
          (set-time! (-> s5-0 hola-time))
          )
        (when (< (fabs (deg-diff (-> self hola) (-> s5-0 angle))) 1820.4445)
          (when (and (not (logtest? (-> s5-0 flags) 2)) (not (logtest? (-> s5-0 flags) 8)))
            (logior! (-> s5-0 flags) 2)
            (set-time! (-> s5-0 hola-time))
            )
          (when (not (lookup-gui-connection
                       *gui-control*
                       (the-as process #f)
                       (gui-channel guard)
                       (the-as string #f)
                       (new 'static 'sound-id)
                       )
                     )
            )
          )
        )
      )
    (if (< 65536.0 (-> self hola))
        (+! (-> self hola) -65536.0)
        )
    )
  )

(defmethod init-from-entity! ((this wasstada-crowd) (arg0 entity-actor))
  (matrix-identity! (-> this mat))
  (matrix<-quat (-> this mat) (-> arg0 quat))
  (matrix<-trans (-> this mat) (-> arg0 extra trans))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 498) this))
  (set! (-> this hola) 0.0)
  (go (method-of-object this idle))
  )
