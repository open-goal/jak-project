;;-*-Lisp-*-
(in-package goal)

;; name: was-leaper-race.gc
;; name in dgo: was-leaper-race
;; dgos: WASLEAPR

;; DECOMP BEGINS

(defpartgroup group-leaper-ring
  :id 518
  :duration (seconds 218.45)
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2040 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2041 :flags (is-3d sp7))
    (sp-item 2041 :flags (is-3d sp7))
    )
  )

(defpart 2040
  :init-specs ((:texture (racegate wasleapr-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 40.0)
    (:b 40.0)
    (:a 32.0)
    (:rotvel-y (degrees 0.026666665) (degrees 0.033333335))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90) 1 (degrees 180))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpart 2041
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.0 0.5)
    (:scale-x (meters 12) (meters 1))
    (:scale-y :copy scale-x)
    (:r 20.0)
    (:g 20.0)
    (:b 20.0)
    (:a 0.0)
    (:scalevel-x (meters -0.093333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 6.4)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.067))
    (:next-launcher 2042)
    (:rotate-x (degrees -90))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpart 2042
  :init-specs ((:fade-a -1.28))
  )

(defpartgroup group-player-leaper-ring
  :id 519
  :duration (seconds 218.45)
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2043 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2044 :flags (is-3d sp7))
    (sp-item 2044 :flags (is-3d sp7))
    )
  )

(defpart 2043
  :init-specs ((:texture (racegate wasleapr-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 80.0)
    (:b 255.0)
    (:a 64.0)
    (:rotvel-y (degrees 0.026666665) (degrees 0.033333335))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90) 1 (degrees 180))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpart 2044
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.0 0.5)
    (:scale-x (meters 12) (meters 1))
    (:scale-y :copy scale-x)
    (:r 10.0)
    (:g 0.0 64.0)
    (:b 255.0)
    (:a 0.0)
    (:scalevel-x (meters -0.093333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 6.4)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.067))
    (:next-launcher 2045)
    (:rotate-x (degrees -90))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpart 2045
  :init-specs ((:fade-a -1.28))
  )

(defpartgroup group-player-leaper-ring-final
  :id 520
  :duration (seconds 218.45)
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2046 :flags (is-3d sp3 sp6 sp7))
    (sp-item 2047 :flags (is-3d sp7))
    (sp-item 2047 :flags (is-3d sp7))
    )
  )

(defpart 2046
  :init-specs ((:texture (racegate wasleapr-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 80.0)
    (:b 40.0)
    (:a 64.0)
    (:rotvel-y (degrees 0.026666665) (degrees 0.033333335))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90) 1 (degrees 180))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpart 2047
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.0 0.5)
    (:scale-x (meters 12) (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0 64.0)
    (:b 10.0)
    (:a 0.0)
    (:scalevel-x (meters -0.093333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 6.4)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.067))
    (:next-launcher 2042)
    (:rotate-x (degrees -90))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

(defpartgroup group-leaper-ring-explode
  :id 521
  :duration (seconds 0.067)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2048 :flags (is-3d sp6 sp7)) (sp-item 2049 :flags (sp6 sp7)))
  )

(defpart 2048
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:fade-r -2.1333334)
    (:fade-g -2.1333334)
    (:fade-b -2.1333334)
    (:fade-a -1.0666667)
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90))
    )
  )

(defpart 2049
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 36))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0)
    (:fade-r -4.266667)
    (:fade-g -4.266667)
    (:fade-b -4.266667)
    (:fade-a -1.0666667)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    (:rotate-x (degrees -90))
    )
  )

(defpartgroup group-player-leaper-ring-explode
  :id 522
  :duration (seconds 0.067)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2050 :flags (is-3d sp6 sp7)) (sp-item 2051 :flags (sp6 sp7)))
  )

(defpart 2050
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:fade-r -8.5)
    (:fade-g -4.25)
    (:fade-b 0.0)
    (:fade-a -2.1333334)
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90))
    )
  )

(defpart 2051
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 36))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:fade-r -17.0)
    (:fade-g -8.5)
    (:fade-b 0.0)
    (:fade-a -1.0666667)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    (:rotate-x (degrees -90))
    )
  )

(defpartgroup group-player-leaper-ring-explode-final
  :id 523
  :duration (seconds 0.067)
  :linger-duration (seconds 0.5)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2052 :flags (sp3 sp7)) (sp-item 2053 :flags (sp6 sp7)))
  )

(defpart 2052
  :init-specs ((:texture (middot level-default-sprite))
    (:num 200.0)
    (:x (meters 5.8))
    (:scale-x (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 80.0)
    (:b 40.0)
    (:a 64.0)
    (:omega (degrees 0.225))
    (:vel-x (meters 0.06666667) (meters 0.06666667))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:rotate-y (degrees 0))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

(defpart 2053
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 36))
    (:scale-y :copy scale-x)
    (:r 120.0)
    (:g 120.0)
    (:b 120.0)
    (:a 20.0)
    (:fade-r -17.0)
    (:fade-g -8.5)
    (:fade-b 0.0)
    (:fade-a -0.6666667)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    (:rotate-x (degrees -90))
    )
  )

(deftype wascity-race-ring (process-drawable)
  ((active?       symbol)
   (mat           matrix  :inline)
   (taskman       handle)
   (player-part   sparticle-launch-control)
   (player-ring?  symbol)
   (minimap       connection-minimap)
   (is-final?     symbol)
   (part-final    sparticle-launch-control)
   )
  (:state-methods
    idle
    die
    )
  (:methods
    (update (_type_) none)
    (spawn-part (_type_) none)
    )
  )


(defun wascity-race-ring-cleared? ((arg0 quaternion) (arg1 vector))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (and (< (fabs (vector-dot (vector-x-quaternion! s5-0 arg0) arg1)) 24576.0)
         (< (fabs (vector-dot (vector-y-quaternion! s5-0 arg0) arg1)) 24576.0)
         (< (fabs (vector-dot (vector-z-quaternion! s5-0 arg0) arg1)) 4096.0)
         )
    )
  )

(defstate idle (wascity-race-ring)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hit)
       (if (logtest? (-> *part-group-id-table* 521 flags) (sp-group-flag sp13))
           (part-tracker-spawn
             part-tracker-subsampler
             :to *entity-pool*
             :group (-> *part-group-id-table* 521)
             :mat-joint (-> self mat)
             )
           (part-tracker-spawn
             part-tracker
             :to *entity-pool*
             :group (-> *part-group-id-table* 521)
             :mat-joint (-> self mat)
             )
           )
       (update self)
       (if (not (-> self active?))
           (go-virtual die)
           )
       )
      )
    )
  :trans (behavior ()
    (update self)
    (spawn-part self)
    (when (-> self player-ring?)
      (let ((s4-0 *target*)
            (gp-0 (new 'stack-no-clear 'vector))
            )
        (if (not (-> self minimap))
            (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 13) (the-as int #f) (the-as vector #t) 0))
            )
        (when s4-0
          (set! (-> gp-0 quad) (-> s4-0 control trans quad))
          (+! (-> gp-0 y) 8192.0)
          (vector-! gp-0 gp-0 (-> self root trans))
          (let ((s5-0 (-> self root quat)))
            (if (< 491520.0 (vector-vector-xz-distance (-> s4-0 control trans) (-> self root trans)))
                (send-event (handle->process (-> self taskman)) 'fail)
                )
            (let ((s4-1 (-> self entity)))
              (when (= (send-event (handle->process (-> self taskman)) 'target-current-ring-ent) s4-1)
                (cond
                  ((wascity-race-ring-cleared? s5-0 gp-0)
                   (cond
                     ((-> self is-final?)
                      (sound-play "ring-final")
                      (if (logtest? (-> *part-group-id-table* 523 flags) (sp-group-flag sp13))
                          (part-tracker-spawn
                            part-tracker-subsampler
                            :to *entity-pool*
                            :group (-> *part-group-id-table* 523)
                            :mat-joint (-> self mat)
                            )
                          (part-tracker-spawn
                            part-tracker
                            :to *entity-pool*
                            :group (-> *part-group-id-table* 523)
                            :mat-joint (-> self mat)
                            )
                          )
                      )
                     ((begin (sound-play "ring-pass") (logtest? (-> *part-group-id-table* 522 flags) (sp-group-flag sp13)))
                      (part-tracker-spawn
                        part-tracker-subsampler
                        :to *entity-pool*
                        :group (-> *part-group-id-table* 522)
                        :mat-joint (-> self mat)
                        )
                      )
                     (else
                       (part-tracker-spawn
                         part-tracker
                         :to *entity-pool*
                         :group (-> *part-group-id-table* 522)
                         :mat-joint (-> self mat)
                         )
                       )
                     )
                   (send-event (handle->process (-> self taskman)) 'ring-hit)
                   (update self)
                   (if (not (-> self active?))
                       (go-virtual die)
                       )
                   )
                  ((let ((s4-2 (new 'stack-no-clear 'vector)))
                     (and (< (fabs (vector-dot (vector-x-quaternion! s4-2 s5-0) gp-0)) 49152.0)
                          (< (fabs (vector-dot (vector-y-quaternion! s4-2 s5-0) gp-0)) 49152.0)
                          (< (vector-dot (vector-z-quaternion! s4-2 s5-0) gp-0) -73728.0)
                          )
                     )
                   (send-event (handle->process (-> self taskman)) 'fail)
                   )
                  )
                )
              )
            )
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    0
    )
  )

(defstate die (wascity-race-ring)
  :virtual #t
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

(defmethod spawn-part ((this wascity-race-ring))
  (when (-> this active?)
    (cond
      ((-> this player-ring?)
       (cond
         ((-> this is-final?)
          (if (nonzero? (-> this part-final))
              (spawn-from-mat (-> this part-final) (-> this mat))
              )
          )
         (else
           (if (nonzero? (-> this player-part))
               (spawn-from-mat (-> this player-part) (-> this mat))
               )
           )
         )
       )
      ((nonzero? (-> this part))
       (spawn-from-mat (-> this part) (-> this mat))
       )
      )
    )
  0
  (none)
  )

(defmethod update ((this wascity-race-ring))
  (with-pp
    (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status dead)))
        (go (method-of-object this die))
        )
    (when (= (-> this taskman) #f)
      (let ((v1-11 (-> *game-info* sub-task-list (game-task-node wascity-leaper-race-resolution))))
        (set! (-> this taskman) (if (-> v1-11 manager)
                                    (-> v1-11 manager manager)
                                    (the-as handle #f)
                                    )
              )
        )
      )
    (set! (-> this is-final?) (the-as symbol (send-event (handle->process (-> this taskman)) 'last-ring?)))
    (set! (-> this active?) (the-as symbol (send-event (handle->process (-> this taskman)) 'ring-active?)))
    (when (-> this active?)
      (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-2 from) (process->ppointer pp))
        (set! (-> a1-2 num-params) 0)
        (set! (-> a1-2 message) 'target-current-ring-ent)
        (let ((s5-0 (= (send-event-function (handle->process (-> this taskman)) a1-2) (-> this entity))))
          (when (and (not s5-0) (-> this player-ring?))
            (if (and (-> this minimap) *minimap*)
                (kill-callback (-> *minimap* engine) (-> this minimap))
                )
            (if (-> this is-final?)
                (kill-particles (-> this part-final))
                (kill-particles (-> this player-part))
                )
            )
          (set! (-> this player-ring?) s5-0)
          )
        )
      )
    0
    (none)
    )
  )

;; WARN: Return type mismatch process-drawable vs wascity-race-ring.
(defmethod relocate ((this wascity-race-ring) (offset int))
  (if (nonzero? (-> this player-part))
      (&+! (-> this player-part) offset)
      )
  (if (nonzero? (-> this part-final))
      (&+! (-> this part-final) offset)
      )
  (the-as wascity-race-ring ((method-of-type process-drawable relocate) this offset))
  )

(defmethod run-logic? ((this wascity-race-ring))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

(defmethod deactivate ((this wascity-race-ring))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this player-part))
      (kill-particles (-> this player-part))
      )
  (if (nonzero? (-> this part-final))
      (kill-particles (-> this part-final))
      )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

(defmethod init-from-entity! ((this wascity-race-ring) (arg0 entity-actor))
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (set! (-> this active?) #f)
  (set! (-> this minimap) #f)
  (quaternion->matrix (-> this mat) (-> this root quat))
  (set! (-> this mat trans quad) (-> this root trans quad))
  (set! (-> this taskman) (the-as handle #f))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 518) this))
  (set! (-> this player-part) (create-launch-control (-> *part-group-id-table* 519) this))
  (set! (-> this player-ring?) #f)
  (set! (-> this is-final?) #f)
  (set! (-> this part-final) (create-launch-control (-> *part-group-id-table* 520) this))
  (go (method-of-object this idle))
  )

(define *was-leaper-speech-list* (new 'static 'inline-array talker-speech-class 21
                                   (new 'static 'talker-speech-class :name "none")
                                   (new 'static 'talker-speech-class
                                     :name "dax342"
                                     :channel (gui-channel daxter)
                                     :speech #x1
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax352"
                                     :channel (gui-channel daxter)
                                     :speech #x2
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax356"
                                     :channel (gui-channel daxter)
                                     :speech #x3
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax359"
                                     :channel (gui-channel daxter)
                                     :speech #x4
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax353"
                                     :channel (gui-channel daxter)
                                     :speech #x5
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax348"
                                     :channel (gui-channel daxter)
                                     :speech #x6
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax354"
                                     :channel (gui-channel daxter)
                                     :speech #x7
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax355"
                                     :channel (gui-channel daxter)
                                     :speech #x8
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax365"
                                     :channel (gui-channel daxter)
                                     :speech #x9
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax358"
                                     :channel (gui-channel daxter)
                                     :speech #xa
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax363"
                                     :channel (gui-channel daxter)
                                     :speech #xb
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax349"
                                     :channel (gui-channel daxter)
                                     :speech #xc
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax344"
                                     :channel (gui-channel daxter)
                                     :speech #xd
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax347"
                                     :channel (gui-channel daxter)
                                     :speech #xe
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax361"
                                     :channel (gui-channel daxter)
                                     :speech #xf
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax346"
                                     :channel (gui-channel daxter)
                                     :speech #x10
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax343"
                                     :channel (gui-channel daxter)
                                     :speech #x11
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax345"
                                     :channel (gui-channel daxter)
                                     :speech #x12
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax357"
                                     :channel (gui-channel daxter)
                                     :speech #x13
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   (new 'static 'talker-speech-class
                                     :name "dax366"
                                     :channel (gui-channel daxter)
                                     :flags (talker-flags tf0)
                                     :speech #x14
                                     :neg #x1
                                     :on-close #f
                                     :camera #f
                                     )
                                   )
        )

(deftype task-manager-wascity-leaper-race (task-manager)
  ((ring-manager-entity      entity)
   (actor-group              (pointer actor-group))
   (actor-group-count        int32)
   (current-ring             uint8)
   (challenger-current-ring  uint8   3)
   (check-timer              time-frame)
   (hud-position             handle  :overlay-at (-> hud 2))
   (hint-timer               time-frame)
   (played-speeches          uint32)
   )
  (:methods
    (get-current-ring-idx (_type_ int) int)
    (init-actor-group! (_type_) none)
    (play-speech (_type_ int) symbol)
    )
  )


(defmethod get-current-ring-idx ((this task-manager-wascity-leaper-race) (arg0 int))
  (let ((v1-1 (-> this actor-group 1)))
    (dotimes (a0-1 3)
      (if (= (-> v1-1 data a0-1 actor) arg0)
          (return a0-1)
          )
      )
    )
  -1
  )

(defmethod play-speech ((this task-manager-wascity-leaper-race) (arg0 int))
  (let ((s5-1 (logtest? (-> this played-speeches) (ash 1 arg0))))
    (when (not s5-1)
      (case arg0
        ((1)
         (talker-spawn-func (-> *was-leaper-speech-list* 7) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((2)
         (talker-spawn-func (-> *was-leaper-speech-list* 9) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((4)
         (talker-spawn-func (-> *was-leaper-speech-list* 11) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((3)
         (talker-spawn-func (-> *was-leaper-speech-list* 10) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((5)
         (talker-spawn-func (-> *was-leaper-speech-list* 17) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((6)
         (talker-spawn-func (-> *was-leaper-speech-list* 18) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((7)
         (talker-spawn-func (-> *was-leaper-speech-list* 19) *entity-pool* (target-pos 0) (the-as region #f))
         )
        )
      (logior! (-> this played-speeches) (ash 1 arg0))
      )
    (not s5-1)
    )
  )

;; WARN: disable def twice: 227. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod taskman-event-handler ((this task-manager-wascity-leaper-race) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (with-pp
    (case arg2
      (('ring-hit)
       (when (nonzero? (-> this actor-group))
         (cond
           ((= (-> arg3 param 0) 'challenger)
            (let ((s5-0 (get-current-ring-idx this (the-as int (-> arg0 entity)))))
              (when (and (>= s5-0 0) (< s5-0 3) (= (-> arg3 param 1) (-> this challenger-current-ring s5-0)))
                (+! (-> this challenger-current-ring s5-0) 1)
                (let ((v1-14 (-> this actor-group 0 data (+ (-> this challenger-current-ring s5-0) -1)))
                      (a1-2 (new 'stack-no-clear 'event-message-block))
                      )
                  (set! (-> a1-2 from) (process->ppointer pp))
                  (set! (-> a1-2 num-params) 0)
                  (set! (-> a1-2 message) 'hit)
                  (let ((t9-1 send-event-function)
                        (v1-15 (-> v1-14 actor))
                        )
                    (t9-1
                      (if v1-15
                          (-> v1-15 extra process)
                          )
                      a1-2
                      )
                    )
                  )
                (if (>= (-> this challenger-current-ring s5-0) (the-as uint (-> this actor-group 0 length)))
                    (send-event this 'fail)
                    (toggle-status
                      (-> this actor-group 0 data (-> this challenger-current-ring s5-0) actor)
                      (entity-perm-status dead)
                      #f
                      )
                    )
                )
              )
            )
           (else
             (+! (-> this current-ring) 1)
             (when (< (-> this current-ring) (the-as uint (-> this actor-group 0 length)))
               (when (= (-> this current-ring) (+ (-> this actor-group 0 length) -11))
                 (let ((v1-39 (-> (level-get *level* 'wasleapr) bsp nav-meshes 0 nav-mesh)))
                   (if v1-39
                       (set! (-> v1-39 prev-nav-mesh) #f)
                       )
                   )
                 (let ((a1-6 (new 'stack-no-clear 'array 'symbol 10)))
                   (set! (-> a1-6 9) #f)
                   (set! (-> a1-6 8) #f)
                   (set! (-> a1-6 7) #f)
                   (set! (-> a1-6 6) #f)
                   (set! (-> a1-6 5) #f)
                   (set! (-> a1-6 4) #f)
                   (set! (-> a1-6 3) 'wascast)
                   (set! (-> a1-6 2) 'wascityb)
                   (set! (-> a1-6 1) 'waswide)
                   (set! (-> a1-6 0) 'wasall)
                   (want-levels *load-state* a1-6)
                   )
                 )
               (set! (-> *ACTOR-bank* birth-max) 1000)
               (toggle-status (-> this actor-group 0 data (-> this current-ring) actor) (entity-perm-status dead) #f)
               )
             )
           )
         )
       )
      (('target-current-ring-ent)
       (if (and (nonzero? (-> this actor-group)) (< (-> this current-ring) (the-as uint (-> this actor-group 0 length))))
           (-> this actor-group 0 data (-> this current-ring) actor)
           )
       )
      (('target-current-ring)
       (if (-> this ring-manager-entity)
           (-> this current-ring)
           )
       )
      (('challenger-current-ring-ent)
       (let ((v1-59 (get-current-ring-idx this (the-as int (-> arg0 entity)))))
         (if (and (>= v1-59 0)
                  (< v1-59 3)
                  (< (-> this challenger-current-ring v1-59) (the-as uint (-> this actor-group 0 length)))
                  (nonzero? (-> this actor-group))
                  )
             (-> this actor-group 0 data (-> this challenger-current-ring v1-59) actor)
             )
         )
       )
      (('challenger-current-ring)
       (when (-> this ring-manager-entity)
         (let ((v1-66 (get-current-ring-idx this (the-as int (-> arg0 entity)))))
           (if (and (>= v1-66 0) (< v1-66 3))
               (-> this challenger-current-ring v1-66)
               )
           )
         )
       )
      (('ring-active?)
       (when (nonzero? (-> this actor-group))
         (let ((v0-0 (the-as object #f)))
           (let ((v1-69 (-> arg0 entity)))
             (dotimes (a0-54 3)
               (if (= v1-69 (-> this actor-group 0 data (-> this challenger-current-ring a0-54) actor))
                   (set! v0-0 #t)
                   )
               )
             (if (= v1-69 (-> this actor-group 0 data (-> this current-ring) actor))
                 (set! v0-0 #t)
                 )
             )
           v0-0
           )
         )
       )
      (('last-ring?)
       (if (nonzero? (-> this actor-group))
           (= (-> this current-ring) (+ (-> this actor-group 0 length) -1))
           )
       )
      (else
        ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
        )
      )
    )
  )

;; WARN: Return type mismatch time-frame vs none.
(defmethod task-manager-method-26 ((this task-manager-wascity-leaper-race))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (when (time-elapsed? (-> this check-timer) (seconds 0.1))
    (if (not (-> this ring-manager-entity))
        (init-actor-group! this)
        )
    (let ((s5-0 3))
      (let ((f30-0 0.0))
        (when (< (-> this current-ring) (the-as uint (-> this actor-group 0 length)))
          (if *target*
              (set! f30-0 (vector-vector-distance-squared
                            (target-pos 0)
                            (-> this actor-group 0 data (-> this current-ring) actor extra trans)
                            )
                    )
              )
          (dotimes (s4-1 3)
            (let* ((a0-10 (-> this actor-group 1 data s4-1 actor))
                   (v1-21 (if a0-10
                              (-> a0-10 extra process)
                              )
                          )
                   (a1-6 (-> this actor-group 0 data (-> this challenger-current-ring s4-1) actor))
                   )
              (if (and v1-21
                       (or (< (-> this challenger-current-ring s4-1) (-> this current-ring))
                           (and (= (-> this challenger-current-ring s4-1) (-> this current-ring))
                                (< f30-0
                                   (vector-vector-distance-squared (-> (the-as process-drawable v1-21) root trans) (-> a1-6 extra trans))
                                   )
                                )
                           )
                       )
                  (+! s5-0 -1)
                  )
              )
            )
          )
        )
      (let ((s4-2 *game-info*))
        (when (time-elapsed? (-> this hint-timer) (seconds 4))
          (cond
            ((< s5-0 (-> s4-2 race-position))
             (play-speech this (rand-vu-int-count-excluding 5 (the-as int (-> this played-speeches))))
             (set-time! (-> this hint-timer))
             )
            ((or (< (-> s4-2 race-position) s5-0) (and (= s5-0 3) (time-elapsed? (-> this hint-timer) (seconds 12))))
             (let ((a1-10 (logior (-> this played-speeches) 31)))
               (play-speech this (rand-vu-int-count-excluding 8 (the-as int a1-10)))
               )
             (set-time! (-> this hint-timer))
             )
            )
          )
        (set! (-> s4-2 race-position) s5-0)
        (if (= (-> s4-2 counter) 1.0)
            (talker-spawn-func (-> *was-leaper-speech-list* 20) *entity-pool* (target-pos 0) (the-as region #f))
            )
        (set! (-> s4-2 counter) (the float (- (-> this actor-group 0 length) (the-as int (-> this current-ring)))))
        )
      )
    (set-time! (-> this check-timer))
    )
  (none)
  )

(defstate active (task-manager-wascity-leaper-race)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set-time! (-> self check-timer))
    (set-time! (-> self hint-timer))
    (set-time! (-> self state-time))
    )
  :code (behavior ()
    (local-vars (v1-38 symbol))
    (until (process-grab? *target* #f)
      (suspend)
      )
    (when *target*
      (logior! (-> *target* focus-status) (focus-status teleporting))
      (process-drawable-show-all-cloth *target* #f)
      (logior! (-> *target* draw status) (draw-control-status no-draw))
      (let ((gp-0 (get-continue-by-name *game-info* "wascitya-flut-racer")))
        (move-to-point! (-> *target* control) (-> gp-0 trans))
        (let ((t9-4 quaternion-copy!)
              (a0-9 (-> *target* control quat-for-control))
              (a1-4 (new 'stack-no-clear 'quaternion))
              )
          (set! (-> a1-4 x) (* 0.00003051851 (the float (-> gp-0 quat x))))
          (set! (-> a1-4 y) (* 0.00003051851 (the float (-> gp-0 quat y))))
          (set! (-> a1-4 z) (* 0.00003051851 (the float (-> gp-0 quat z))))
          (set! (-> a1-4 w) (* 0.00003051851 (the float (-> gp-0 quat w))))
          (t9-4 a0-9 a1-4)
          )
        )
      (rot->dir-targ! (-> *target* control))
      )
    (suspend)
    (when *target*
      (process-drawable-show-all-cloth *target* #t)
      (logclear! (-> *target* draw status) (draw-control-status no-draw))
      )
    (suspend)
    (if *target*
        (logclear! (-> *target* focus-status) (focus-status teleporting))
        )
    (talker-spawn-func (-> *was-leaper-speech-list* 1) *entity-pool* (target-pos 0) (the-as region #f))
    (until v1-38
      (suspend)
      (set! v1-38 (and (time-elapsed? (-> self state-time) (seconds 3.5))
                       (begin
                         (when (not (-> self ring-manager-entity))
                           (set! v1-38 #f)
                           (goto cfg-20)
                           )
                         (dotimes (v1-42 3)
                           (when (not (-> self actor-group 1 data v1-42 actor))
                             (set! v1-38 #f)
                             (goto cfg-20)
                             )
                           )
                         #t
                         )
                       )
            )
      (label cfg-20)
      )
    (if (focus-test? *target* grabbed)
        (process-release? *target*)
        )
    (set-setting! 'exclusive-load '((ignore all) (allow wasleapr)) 0.0 0)
    (let ((a1-9 (new 'stack-no-clear 'array 'symbol 10)))
      (set! (-> a1-9 9) #f)
      (set! (-> a1-9 8) #f)
      (set! (-> a1-9 7) #f)
      (set! (-> a1-9 6) #f)
      (set! (-> a1-9 5) #f)
      (set! (-> a1-9 4) #f)
      (set! (-> a1-9 3) 'wascityb)
      (set! (-> a1-9 2) 'wascitya)
      (set! (-> a1-9 1) 'waswide)
      (set! (-> a1-9 0) 'wasall)
      (want-levels *load-state* a1-9)
      )
    (want-display-level *load-state* 'wascityb 'display)
    (let ((gp-2 (-> self actor-group 1)))
      (dotimes (s5-1 3)
        (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-11 from) (process->ppointer self))
          (set! (-> a1-11 num-params) 0)
          (set! (-> a1-11 message) 'trigger)
          (let ((t9-13 send-event-function)
                (v1-66 (-> gp-2 data s5-1 actor))
                )
            (t9-13
              (if v1-66
                  (-> v1-66 extra process)
                  )
              a1-11
              )
            )
          )
        )
      (let ((s5-2 #f))
        (until (and (-> self ring-manager-entity) (= (-> *game-info* counter) 0.0))
          (cond
            ((-> self ring-manager-entity)
             (format
               *stdebug*
               "~s: active w/ ~,,0f rings~%"
               (game-task->string (-> self node-info task))
               (-> *game-info* counter)
               )
             0
             )
            (else
              (let ((s4-2 format)
                    (s3-1 *stdebug*)
                    (s2-1 "~s: active no ring-manager~%")
                    (a2-4 (game-task->string (-> self node-info task)))
                    )
                (-> *game-info* counter)
                (s4-2 s3-1 s2-1 a2-4)
                )
              )
            )
          (when (not s5-2)
            (when (and (= (status-of-level-and-borrows *level* 'wascitya #f) 'active)
                       (= (status-of-level-and-borrows *level* 'wascityb #f) 'active)
                       )
              (let ((s4-3 (-> (level-get *level* 'wasleapr) bsp nav-meshes 0 nav-mesh)))
                (when s4-3
                  (set! (-> s4-3 next-nav-mesh) (the-as surface (nav-mesh-from-res-tag (-> s4-3 entity) 'next-actor 0)))
                  (set! (-> s4-3 prev-nav-mesh) (the-as surface (nav-mesh-from-res-tag (-> s4-3 entity) 'prev-actor 0)))
                  (set! s5-2 #t)
                  )
                )
              )
            )
          (suspend)
          )
        )
      (format *stdebug* "task-manager-wascity-leaper-race: done!~%")
      (dotimes (s5-3 3)
        (let ((a1-20 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-20 from) (process->ppointer self))
          (set! (-> a1-20 num-params) 0)
          (set! (-> a1-20 message) 'die-fast)
          (let ((t9-24 send-event-function)
                (v1-100 (-> gp-2 data s5-3 actor))
                )
            (t9-24
              (if v1-100
                  (-> v1-100 extra process)
                  )
              a1-20
              )
            )
          )
        )
      )
    (send-event self 'complete)
    (if *target*
        (send-event *target* 'change-mode 'flut self)
        )
    (sleep-code)
    )
  )

(defstate fail (task-manager-wascity-leaper-race)
  :virtual #t
  :enter (behavior ((arg0 resetter-params))
    (let ((a1-0 (new 'stack-no-clear 'array 'symbol 10)))
      (set! (-> a1-0 9) #f)
      (set! (-> a1-0 8) #f)
      (set! (-> a1-0 7) #f)
      (set! (-> a1-0 6) #f)
      (set! (-> a1-0 5) #f)
      (set! (-> a1-0 4) #f)
      (set! (-> a1-0 3) 'wascityb)
      (set! (-> a1-0 2) 'wascitya)
      (set! (-> a1-0 1) 'waswide)
      (set! (-> a1-0 0) 'wasall)
      (let ((a0-1 *load-state*))
        (want-levels a0-1 a1-0)
        (let ((t9-1 (-> (method-of-type task-manager fail) enter)))
          (if t9-1
              (t9-1 (the-as resetter-params a0-1))
              )
          )
        )
      )
    )
  )

(defmethod init-actor-group! ((this task-manager-wascity-leaper-race))
  (local-vars (sv-16 res-tag))
  (let ((a0-2 (entity-by-name "wascity-leaper-race-manager-1")))
    (when a0-2
      (set! (-> this ring-manager-entity) a0-2)
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-1 (res-lump-data a0-2 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-1 (>= (-> sv-16 elt-count) 0))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-1))
           (when (> (-> this actor-group-count) 0)
             (let* ((s5-0 (-> this actor-group 0 length))
                    (s4-0 0)
                    (v1-8 (-> this actor-group 0 data s4-0))
                    )
               (while (< s4-0 s5-0)
                 (toggle-status (the-as entity-actor (-> v1-8 actor)) (entity-perm-status dead) #t)
                 (+! s4-0 1)
                 (set! v1-8 (-> this actor-group 0 data s4-0))
                 )
               )
             (toggle-status (the-as entity-actor (-> this actor-group 0 data 0 actor)) (entity-perm-status dead) #f)
             )
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      (set! (-> this hud-position)
            (ppointer->handle
              (process-spawn hud-race-position :init hud-init-by-other :name "hud-race-position" :to this)
              )
            )
      )
    )
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod task-manager-method-25 ((this task-manager-wascity-leaper-race))
  ((method-of-type task-manager task-manager-method-25) this)
  (let ((v1-6 (-> (level-get *level* 'wasleapr) bsp nav-meshes 0 nav-mesh)))
    (when v1-6
      (set! (-> v1-6 next-nav-mesh) #f)
      (set! (-> v1-6 prev-nav-mesh) #f)
      )
    )
  (none)
  )

;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-wascity-leaper-race))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this ring-manager-entity) #f)
  (set! (-> this actor-group-count) 0)
  (set! (-> this current-ring) (the-as uint 0))
  (dotimes (v1-1 3)
    (set! (-> this challenger-current-ring v1-1) (the-as uint 0))
    )
  (set-setting! 'pilot-exit #f 0.0 0)
  (set-setting! 'attack #f 0.0 0)
  (set-setting! 'fov 'abs (degrees 84.0) 0)
  (set-setting! 'music 'waschase 0.0 0)
  (set-setting! 'airlock #f 0.0 0)
  (none)
  )
