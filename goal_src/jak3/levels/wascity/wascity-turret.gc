;;-*-Lisp-*-
(in-package goal)

;; name: wascity-turret.gc
;; name in dgo: wascity-turret
;; dgos: WCB

;; DECOMP BEGINS

(define *wascity-turret-speech-list* (new 'static 'inline-array talker-speech-class 4
                                       (new 'static 'talker-speech-class :name "none")
                                       (new 'static 'talker-speech-class
                                         :name "dam111a"
                                         :channel (gui-channel daxter)
                                         :speech #x1
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam112a"
                                         :channel (gui-channel daxter)
                                         :speech #x2
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam113a"
                                         :channel (gui-channel daxter)
                                         :speech #x3
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       )
        )

(defpartgroup group-turret-reticle
  :id 548
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2162))
  )

(defpart 2162
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.025))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 4096.0)
    )
  )

(defpartgroup group-turret-skeet
  :id 549
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2163))
  )

(defpart 2163
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.025))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 255.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 4096.0)
    )
  )

(define *wascity-turret-params* (new 'static 'target-turret-params
                                  :fire-interval (seconds 0.2)
                                  :max-health 16.0
                                  :roty-accel -118328.89
                                  :roty-friction 0.8
                                  :rotyv-max 21845.334
                                  :rotx-accel -118328.89
                                  :rotx-friction 0.8
                                  :rotxv-max 10922.667
                                  :rotx-min -7281.778
                                  :rotx-max 5461.3335
                                  )
        )

(define-perm *wascity-turret* (pointer wascity-turret) #f)

(defskelgroup skel-wascity-turret wascity-turret wascity-turret-lod0-jg wascity-turret-idle-ja
              ((wascity-turret-lod0-mg (meters 20))
               (wascity-turret-lod1-mg (meters 40))
               (wascity-turret-lod2-mg (meters 999999))
               )
              :bounds (static-spherem 0 1.8 0 12)
              :origin-joint-index 3
              )

(defskelgroup skel-wascity-turret-explode wascity-turret wascity-turret-explode-lod0-jg wascity-turret-explode-idle-ja
              ((wascity-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1.8 0 12)
              )

(define *wascity-turret-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 24 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index -1)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

(defmethod explode-turret ((this wascity-turret))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (let ((v1-1 (new 'stack-no-clear 'vector)))
        (let ((a0-2 (-> s5-0 fountain-rand-transv-lo)))
          (let ((a1-2 (-> this root trans)))
            (let ((a2-1 *up-vector*))
              (let ((a3-1 2048.0))
                (.mov vf7 a3-1)
                )
              (.lvf vf5 (&-> a2-1 quad))
              )
            (.lvf vf4 (&-> a1-2 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a0-2 quad) vf6)
          )
        (vector-float*! v1-1 *up-vector* 81920.0)
        (let ((a2-3 (-> s5-0 fountain-rand-transv-lo)))
          (let ((a0-5 v1-1))
            (let ((a1-4 *identity-vector*))
              (let ((a3-3 -40960.0))
                (.mov vf7 a3-3)
                )
              (.lvf vf5 (&-> a1-4 quad))
              )
            (.lvf vf4 (&-> a0-5 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a2-3 quad) vf6)
          )
        (let ((a1-5 (-> s5-0 fountain-rand-transv-hi)))
          (let ((a0-6 *identity-vector*))
            (let ((a2-5 40960.0))
              (.mov vf7 a2-5)
              )
            (.lvf vf5 (&-> a0-6 quad))
            )
          (.lvf vf4 (&-> v1-1 quad))
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a1-5 quad) vf6)
          )
        )
      (set! (-> s5-0 gravity) -122880.0)
      (set! (-> s5-0 rot-speed) 16.0)
      (sound-play "turret-explode")
      (process-spawn
        joint-exploder
        (art-group-get-by-name *level* "skel-wascity-turret-explode" (the-as (pointer level) #f))
        7
        s5-0
        *wascity-turret-exploder-params*
        :name "joint-exploder"
        :to this
        :unk 0
        )
      )
    (set! (-> *game-info* health-bar-vehicle) 0.0)
    (let ((v1-12 (new 'stack-no-clear 'vector)))
      (set! (-> v1-12 quad) (-> this root trans quad))
      (+! (-> v1-12 y) 8192.0)
      (cond
        ((logtest? (-> *part-group-id-table* 542 flags) (sp-group-flag sp13))
         (set! (-> *launch-matrix* trans quad) (-> v1-12 quad))
         (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 542))
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> v1-12 quad))
          (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 542))
          )
        )
      )
    0
    (none)
    )
  )

(defmethod target-turret-method-36 ((this wascity-turret))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 7372.8 0.0 53248.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-11 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-11 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 3)
      (set-vector! (-> v1-11 local-sphere) 0.0 0.0 0.0 122880.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-13 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 122880.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-15 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-15 transform-index) 3)
      (set-vector! (-> v1-15 local-sphere) 0.0 7372.8 35225.6 7372.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-17 transform-index) 3)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 0.0 12288.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec bot camera-blocker))
      (set! (-> v1-19 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-19 transform-index) 3)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -819.2 4915.2)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-21 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-21 transform-index) 3)
      (set-vector! (-> v1-21 local-sphere) 0.0 7372.8 17612.8 4915.2)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-23 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-23 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-23 transform-index) 3)
      (set-vector! (-> v1-23 local-sphere) 0.0 7372.8 23347.2 4915.2)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-26 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-26 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-26 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(define *wascity-display-offset* (new 'static 'vector :y 12583.731 :z 15139.635 :w 1.0))

(defmethod target-turret-method-44 ((this wascity-turret))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (wascity-turret-method-62 this)
    (when (nonzero? (-> this part))
      (-> this node-list data 4 bone transform)
      (let ((s4-0 (new 'stack-no-clear 'matrix))
            (s5-0 (new 'stack-no-clear 'matrix))
            )
        (quaternion->matrix s4-0 (-> this root quat))
        (set! (-> s4-0 trans quad) (-> this root trans quad))
        (matrix-identity! s5-0)
        (set! (-> s5-0 trans quad) (-> *wascity-display-offset* quad))
        (matrix*! s5-0 s5-0 s4-0)
        (set! (-> s4-0 trans quad) (-> s5-0 trans quad))
        (dotimes (s3-0 (the-as int (-> this radar-object-counter)))
          (let* ((f0-1 (* 2867.2 (-> this radar-object s3-0 x)))
                 (f1-2 (* 819.2 (+ -0.12 (-> this radar-object s3-0 y))))
                 (f1-3 (+ -0.12 f1-2))
                 )
            (when (and (< -2867.2 f0-1) (< f0-1 2867.2) (< -819.2 f1-3) (< f1-3 819.2))
              (let ((a1-2 (-> s5-0 trans)))
                (let ((v1-28 (-> s4-0 trans)))
                  (let ((a0-12 (-> s5-0 rvec)))
                    (let ((a2-1 f0-1))
                      (.mov vf7 a2-1)
                      )
                    (.lvf vf5 (&-> a0-12 quad))
                    )
                  (.lvf vf4 (&-> v1-28 quad))
                  )
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> a1-2 quad) vf6)
                )
              (let ((a1-3 (-> s5-0 trans)))
                (let ((v1-29 (-> s5-0 trans)))
                  (let ((a0-13 (-> s5-0 uvec)))
                    (let ((a2-2 f1-3))
                      (.mov vf7 a2-2)
                      )
                    (.lvf vf5 (&-> a0-13 quad))
                    )
                  (.lvf vf4 (&-> v1-29 quad))
                  )
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> a1-3 quad) vf6)
                )
              (spawn-from-mat (-> this part) s5-0)
              )
            )
          )
        (when (nonzero? (-> this reticle-part))
          (let ((s1-0 (vector<-fire-pos! this (new 'stack-no-clear 'vector)))
                (s2-0 (new 'stack-no-clear 'vector))
                (s3-1 (new 'stack-no-clear 'vector))
                )
            0.0
            (vector-! s2-0 (target-pos 0) s1-0)
            (let ((f0-6 (atan (-> s2-0 x) (fabs (-> s2-0 z)))))
              (if (< (-> s2-0 z) 0.0)
                  (set! f0-6 (- f0-6))
                  )
              (set! (-> s3-1 x) (* 0.000061035156 f0-6))
              )
            (let ((f0-13 (atan (-> s2-0 y) (sqrtf (+ (* (-> s2-0 x) (-> s2-0 x)) (* (-> s2-0 z) (-> s2-0 z)))))))
              (set! (-> s3-1 y) (* -0.00014085036 f0-13))
              )
            (let ((f0-16 (* 2867.2 (-> s3-1 x)))
                  (f1-12 (* 819.2 (+ -0.12 (-> s3-1 y))))
                  )
              (when (and (< -2867.2 f0-16) (< f0-16 2867.2) (< -819.2 f1-12) (< f1-12 819.2))
                (let ((v1-55 (-> s5-0 trans)))
                  (let ((a0-19 (-> s4-0 trans)))
                    (let ((a1-8 (-> s5-0 rvec)))
                      (let ((a2-3 f0-16))
                        (.mov vf7 a2-3)
                        )
                      (.lvf vf5 (&-> a1-8 quad))
                      )
                    (.lvf vf4 (&-> a0-19 quad))
                    )
                  (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                  (.mul.x.vf acc vf5 vf7 :mask #b111)
                  (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                  (.svf (&-> v1-55 quad) vf6)
                  )
                (let ((a1-9 (-> s5-0 trans)))
                  (let ((v1-56 (-> s5-0 trans)))
                    (let ((a0-20 (-> s5-0 uvec)))
                      (let ((a2-4 f1-12))
                        (.mov vf7 a2-4)
                        )
                      (.lvf vf5 (&-> a0-20 quad))
                      )
                    (.lvf vf4 (&-> v1-56 quad))
                    )
                  (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                  (.mul.x.vf acc vf5 vf7 :mask #b111)
                  (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                  (.svf (&-> a1-9 quad) vf6)
                  )
                (spawn-from-mat (-> this reticle-part) s5-0)
                )
              )
            )
          )
        )
      0
      )
    0
    (none)
    )
  )

(defmethod init! ((this wascity-turret))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-wascity-turret" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> this info) (new 'static 'target-turret-info :idle-anim 4 :camera-joint 3))
  (set! (-> this info explode-sg) #f)
  (set! (-> this info explode-params) #f)
  (set! (-> this reticle-part) (create-launch-control (-> *part-group-id-table* 548) this))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 549) this))
  0
  (none)
  )

(defmethod get-params ((this wascity-turret))
  *wascity-turret-params*
  )

(define *debug-control-params* (the-as object #f))

(defmethod wascity-turret-method-59 ((this wascity-turret))
  (set! (-> this params fire-interval) (seconds 0.2))
  (set! (-> this fire-time-interval) (-> this params fire-interval))
  (set! (-> this params roty-accel) -118328.89)
  (set! (-> this params rotx-accel) -118328.89)
  (set! (-> this params roty-friction) 0.8)
  (set! (-> this params rotx-friction) 0.8)
  (set! (-> this params rotyv-max) 21845.334)
  (set! (-> this params rotxv-max) 10922.667)
  (set! (-> this params rotx-min) -7281.778)
  (set! (-> this params rotx-max) 5461.3335)
  0
  (none)
  )

(defmethod target-turret-method-47 ((this wascity-turret))
  (let ((s5-0 (-> this params)))
    (let ((f30-0 0.0)
          (f28-0 0.0)
          )
      (set! (-> this rotyvv) 0.0)
      (set! (-> this rotxvv) 0.0)
      (when (and (-> this enable-controls) (not (-> this reset-facing)) *camera-combiner*)
        (when (>= (-> *camera-combiner* interp-val) 1.0)
          (set! (-> this rotyvv) (analog-input (the-as int (-> *cpad-list* cpads 0 leftx)) 128.0 32.0 110.0 1.0))
          (set! (-> this rotxvv) (analog-input (the-as int (-> *cpad-list* cpads 0 lefty)) 128.0 32.0 110.0 1.0))
          (if (-> *setting-control* cam-current flip-vertical)
              (set! (-> this rotxvv) (- (-> this rotxvv)))
              )
          (set! (-> this rotyvv) (* (-> this rotyvv) (fabs (-> this rotyvv)) (-> s5-0 roty-accel)))
          (set! (-> this rotxvv) (* (-> this rotxvv) (fabs (-> this rotxvv)) (-> s5-0 rotx-accel)))
          (set! f30-0 1.0)
          (set! f28-0 1.0)
          )
        (when (-> this facing-ocean)
          (set! f28-0 1.0)
          (set! f30-0 1.0)
          (if (and (< 0.0 (-> this roty)) (< (-> this roty) 17112.178))
              (set! f28-0 (- 1.0 (fmin 1.0 (* -0.1 (+ -94.0 (* 0.005493164 (-> this roty)))))))
              )
          (if (and (< (-> this roty) 0.0) (< -17112.178 (-> this roty)))
              (set! f28-0 (- 1.0 (fmin 1.0 (* 0.1 (+ 94.0 (* 0.005493164 (-> this roty)))))))
              )
          )
        (when (-> this facing-city)
          (set! f28-0 1.0)
          (set! f30-0 1.0)
          (if (and (>= 32768.0 (-> this roty)) (< 15655.822 (-> this roty)))
              (set! f28-0 (- 1.0 (fmin 1.0 (* 0.1 (+ -86.0 (* 0.005493164 (-> this roty)))))))
              )
          (if (and (>= (-> this roty) -32768.0) (< (-> this roty) -15655.822))
              (set! f28-0 (- 1.0 (fmin 1.0 (* -0.1 (+ 86.0 (* 0.005493164 (-> this roty)))))))
              )
          )
        )
      (when (or (-> this reset-facing) (not (-> this enable-controls)))
        (set! f30-0 0.0)
        (set! f28-0 0.0)
        )
      (let ((f24-0 (lerp-scale 1.0 -1.0 (-> this rotyv) -14563.556 14563.556))
            (f26-0 (lerp-scale 1.0 -1.0 (-> this rotxv) -9102.223 9102.223))
            )
        (set! (-> this rotyvv)
              (+ (* f28-0 (-> this rotyvv))
                 (* (- 1.0 f28-0)
                    (-> s5-0 roty-accel)
                    (+ (* 3.0 (lerp-scale 1.0 -1.0 (deg-diff (-> this roty) (-> this dest-roty)) -910.2222 910.2222))
                       (* -0.9 f24-0)
                       )
                    )
                 )
              )
        (set! (-> this rotxvv)
              (+ (* f30-0 (-> this rotxvv))
                 (* (- 1.0 f30-0)
                    (-> s5-0 rotx-accel)
                    (+ (* 2.0 (lerp-scale 1.0 -1.0 (deg-diff (-> this rotx) (-> this dest-rotx)) -910.2222 910.2222))
                       (* -0.8 f26-0)
                       )
                    )
                 )
              )
        )
      )
    (if (>= 182.04445 (fabs (deg-diff (-> this roty) (-> this dest-roty))))
        (set! (-> this reset-facing) #f)
        )
    (+! (-> this rotyv) (* (-> this speed-mult) (-> this rotyvv) (seconds-per-frame)))
    (set! (-> this rotyv) (* (-> this rotyv) (-> s5-0 roty-friction)))
    (set! (-> this rotyv) (fmax (fmin (-> this rotyv) (-> s5-0 rotyv-max)) (- (-> s5-0 rotyv-max))))
    (set! (-> this roty)
          (the float
               (sar (shl (the int (+ (-> this roty) (* (-> this speed-mult) (-> this rotyv) (seconds-per-frame)))) 48) 48)
               )
          )
    (+! (-> this rotxv) (* (-> this speed-mult) (-> this rotxvv) (seconds-per-frame)))
    (set! (-> this rotxv) (* (-> this rotxv) (-> s5-0 rotx-friction)))
    (set! (-> this rotxv) (fmax (fmin (-> this rotxv) (-> s5-0 rotxv-max)) (- (-> s5-0 rotxv-max))))
    )
  (set! (-> this rotx)
        (the float
             (sar (shl (the int (+ (-> this rotx) (* (-> this speed-mult) (-> this rotxv) (seconds-per-frame)))) 48) 48)
             )
        )
  (cond
    ((>= (-> this rotx) (-> this rotx-max))
     (set! (-> this rotx) (-> this rotx-max))
     (set! (-> this rotxv) 0.0)
     )
    ((>= (-> this rotx-min) (-> this rotx))
     (set! (-> this rotx) (-> this rotx-min))
     (set! (-> this rotxv) 0.0)
     )
    )
  (when (!= (-> this roty-min) (-> this roty-max))
    (cond
      ((>= (-> this roty) (-> this roty-max))
       (set! (-> this roty) (-> this roty-max))
       (set! (-> this rotyv) 0.0)
       )
      ((>= (-> this roty-min) (-> this roty))
       (set! (-> this roty) (-> this roty-min))
       (set! (-> this rotyv) 0.0)
       )
      )
    )
  0
  (none)
  )

;; WARN: disable def twice: 130. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod target-turret-method-56 ((this wascity-turret) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('speed-mult)
     (set! v0-0 (< (the-as float (-> arg3 param 0)) 1.0))
     (set! (-> this fire-delay) (the-as symbol v0-0))
     v0-0
     )
    (('fire-down)
     (if (and (-> this enable-controls) #f)
         (target-turret-method-52 this)
         )
     )
    (('fire-pressed)
     (if (and (-> this enable-controls)
              (or (not (-> this fire-delay)) (time-elapsed? (-> this fire-time) (-> this fire-time-interval)))
              )
         (target-turret-method-52 this)
         )
     )
    (('face-ocean)
     (set! (-> this facing-ocean) #t)
     (set! (-> this facing-city) #f)
     (set! (-> this reset-facing) #t)
     (set! (-> this dest-roty) 32768.0)
     )
    (('face-city)
     (set! (-> this facing-ocean) #f)
     (set! (-> this facing-city) #t)
     (set! (-> this reset-facing) #t)
     (set! (-> this dest-roty) 0.0)
     )
    (('camera-offset)
     (cond
       ((= (get-aspect-ratio) 'aspect16x9)
        (set! v0-0 (-> arg3 param 0))
        (set! (-> (the-as vector v0-0) x) 0.0)
        (set! (-> (the-as vector v0-0) y) 15360.0)
        (set! (-> (the-as vector v0-0) z) 4096.0)
        (set! (-> (the-as vector v0-0) w) 0.0)
        )
       (else
         (set! v0-0 (-> arg3 param 0))
         (set! (-> (the-as vector v0-0) x) 0.0)
         (set! (-> (the-as vector v0-0) y) 16384.0)
         (set! (-> (the-as vector v0-0) z) 4096.0)
         (set! (-> (the-as vector v0-0) w) 0.0)
         )
       )
     v0-0
     )
    (('trans 'player-pos)
     (let ((s4-0 (new 'stack-no-clear 'vector)))
       (set! (-> s4-0 x) 0.0)
       (set! (-> s4-0 y) 11059.2)
       (set! (-> s4-0 z) 0.0)
       (set! (-> s4-0 w) 0.0)
       (vector-orient-by-quat! s4-0 s4-0 (-> this root quat))
       (vector+! (the-as vector (-> arg3 param 0)) (-> this root trans) s4-0)
       )
     )
    (('radar-pos)
     (let ((v1-26 (new 'stack-no-clear 'vector)))
       (when (< (-> this radar-object-counter) (the-as uint 64))
         (set! (-> v1-26 quad) (-> (the-as vector (-> arg3 param 0)) quad))
         (let ((a0-21 (-> this radar-object (-> this radar-object-counter))))
           (set! (-> a0-21 x) (-> v1-26 x))
           (set! (-> a0-21 y) (-> v1-26 y))
           )
         (set! v0-0 (+ (-> this radar-object-counter) 1))
         (set! (-> this radar-object-counter) (the-as uint v0-0))
         v0-0
         )
       )
     )
    (('radar-reset)
     (set! (-> this radar-object-counter) (the-as uint 0))
     0
     )
    (else
      ((method-of-type target-turret target-turret-method-56) this arg0 arg1 arg2 arg3)
      )
    )
  )

(defun wct-show-flut ((arg0 wascity-turret) (arg1 symbol))
  (let ((gp-0 (the-as flut (process-by-name "flut" *active-pool*))))
    (when (and gp-0 (< (vector-vector-distance (target-pos 0) (-> gp-0 root trans)) 163840.0))
      (if arg1
          (logclear! (-> gp-0 draw status) (draw-control-status no-draw))
          (logior! (-> gp-0 draw status) (draw-control-status no-draw))
          )
      )
    )
  0
  (none)
  )

(defstate setup (wascity-turret)
  :virtual #t
  :exit (behavior ()
    (wct-show-flut self #f)
    (let ((t9-2 (-> (find-parent-state) exit)))
      (if t9-2
          (t9-2)
          )
      )
    )
  :code (behavior ()
    (local-vars (v1-45 symbol))
    (set! (-> self facing-ocean) #t)
    (set! (-> self facing-city) #f)
    (set! (-> self reset-facing) #f)
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.5))
        (suspend)
        )
      )
    (sound-play "jump-in-turret")
    (let* ((v1-9 (-> *game-info* sub-task-list (game-task-node wascity-gungame-resolution)))
           (a0-4 (handle->process (if (-> v1-9 manager)
                                      (-> v1-9 manager manager)
                                      (the-as handle #f)
                                      )
                                  )
                 )
           )
      (if a0-4
          (send-event a0-4 'setup)
          )
      )
    (let* ((v1-20 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
           (a0-9 (handle->process (if (-> v1-20 manager)
                                      (-> v1-20 manager manager)
                                      (the-as handle #f)
                                      )
                                  )
                 )
           )
      (if a0-9
          (send-event a0-9 'setup)
          )
      )
    (let* ((v1-31 (-> *game-info* sub-task-list (game-task-node wascity-gungame-play-for-fun)))
           (a0-14 (handle->process (if (-> v1-31 manager)
                                       (-> v1-31 manager manager)
                                       (the-as handle #f)
                                       )
                                   )
                  )
           )
      (if a0-14
          (send-event a0-14 'setup)
          )
      )
    (let* ((v1-42 (-> *game-info* sub-task-list (game-task-node wascity-defend-introduction)))
           (v1-44 (if (-> v1-42 manager)
                      (-> v1-42 manager manager)
                      (the-as handle #f)
                      )
                  )
           )
      ;; og:preserve-this
      ; (set! v1-45 (and (nonzero? (l32-false-check v1-44)) (begin
      ;                                                       (let ((a0-20 (-> v1-44 process 0)))
      ;                                                         (if (= (-> v1-44 pid) (-> a0-20 pid))
      ;                                                             (empty)
      ;                                                             )
      ;                                                         )
      ;                                                       v1-45
      ;                                                       )
      ;                  )
      ;       )
      )
    (until #f
      (suspend)
      )
    #f
    )
  )

(define *wascity-turret-got-out-time* (the-as time-frame 0))

(defstate shutdown (wascity-turret)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    )
  :exit (behavior ()
    (wct-show-flut self #t)
    (set! *wascity-turret-got-out-time* (current-time))
    (let ((t9-2 (-> (find-parent-state) exit)))
      (if t9-2
          (t9-2)
          )
      )
    )
  :trans (behavior ()
    (wascity-turret-method-62 self)
    (if (time-elapsed? (-> self state-time) (seconds 0.5))
        (remove-setting! 'mode-name)
        )
    (if (or (time-elapsed? (-> self state-time) (seconds 4)) (and (time-elapsed? (-> self state-time) (seconds 0.05))
                                                                  (< (fabs (-> self rotyvv)) 910.2222)
                                                                  (< (fabs (-> self rotyv)) 910.2222)
                                                                  (< (fabs (-> self rotxvv)) 910.2222)
                                                                  (< (fabs (-> self rotxv)) 910.2222)
                                                                  )
            )
        (go-virtual idle)
        )
    )
  )

(defstate active (wascity-turret)
  :virtual #t
  :enter (behavior ()
    (setup-masks (-> self draw) 0 2)
    (set-setting! 'matrix-blend-turret-rot 'abs 5.0 0)
    (set-setting! 'lock-sound-camera-to-target #t 0.0 0)
    (let ((t9-4 (-> (find-parent-state) enter)))
      (if t9-4
          (t9-4)
          )
      )
    )
  :exit (behavior ()
    (setup-masks (-> self draw) 2 0)
    (remove-setting! 'lock-sound-camera-to-target)
    (let ((t9-3 (-> (find-parent-state) exit)))
      (if t9-3
          (t9-3)
          )
      )
    )
  :trans (behavior ()
    (wascity-turret-method-59 self)
    (let ((t9-2 (-> (find-parent-state) trans)))
      (if t9-2
          (t9-2)
          )
      )
    )
  )

;; WARN: Return type mismatch float vs none.
(defun joint-mod-recoil ((arg0 cspace) (arg1 transformq))
  (let ((gp-0 (the-as wascity-turret (-> arg0 param1)))
        (s5-0 (the-as int (-> arg0 param2)))
        )
    (let ((v1-0 (new 'static 'vector)))
      (new 'static 'vector)
      (new 'static 'vector)
      (set-vector! v1-0 0.0 0.0 (- (-> gp-0 recoil s5-0)) 1.0)
      (vector+! (-> arg1 trans) (-> arg1 trans) v1-0)
      )
    (cspace<-parented-transformq-joint! arg0 arg1)
    (seek! (-> gp-0 recoil s5-0) 0.0 (* 81920.0 (seconds-per-frame)))
    )
  (none)
  )

(defmethod target-turret-method-51 ((this wascity-turret) (arg0 vector) (arg1 vector))
  (with-pp
    (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> this shot-timeout) (seconds 0.667))
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-1 from) (process->ppointer pp))
        (set! (-> a1-1 num-params) 0)
        (set! (-> a1-1 message) 'fire)
        (let ((t9-0 send-event-function)
              (v1-5 (-> *game-info* sub-task-list (game-task-node wascity-gungame-resolution)))
              )
          (t9-0
            (handle->process (if (-> v1-5 manager)
                                 (-> v1-5 manager manager)
                                 (the-as handle #f)
                                 )
                             )
            a1-1
            )
          )
        )
      (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-2 from) (process->ppointer pp))
        (set! (-> a1-2 num-params) 0)
        (set! (-> a1-2 message) 'fire)
        (let ((t9-1 send-event-function)
              (v1-15 (-> *game-info* sub-task-list (game-task-node wascity-gungame-play-for-fun)))
              )
          (t9-1
            (handle->process (if (-> v1-15 manager)
                                 (-> v1-15 manager manager)
                                 (the-as handle #f)
                                 )
                             )
            a1-2
            )
          )
        )
      (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-3 from) (process->ppointer pp))
        (set! (-> a1-3 num-params) 0)
        (set! (-> a1-3 message) 'fire)
        (let ((t9-2 send-event-function)
              (v1-25 (-> *game-info* sub-task-list (game-task-node wascity-defend-introduction)))
              )
          (t9-2
            (handle->process (if (-> v1-25 manager)
                                 (-> v1-25 manager manager)
                                 (the-as handle #f)
                                 )
                             )
            a1-3
            )
          )
        )
      (set! (-> gp-0 ent) (-> this entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options po13 po17))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg0 quad))
      (set! (-> gp-0 vel quad) (-> (vector-normalize-copy! (new 'stack-no-clear 'vector) arg1 7372800.0) quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle this))
      (let* ((v1-43 *game-info*)
             (a0-27 (+ (-> v1-43 attack-id) 1))
             )
        (set! (-> v1-43 attack-id) a0-27)
        (set! (-> gp-0 attack-id) a0-27)
        )
      (set! (-> gp-0 timeout) (-> this shot-timeout))
      (let ((t9-4 spawn-projectile)
            (a0-28 wascity-turret-shot)
            )
        (t9-4 a0-28 gp-0 this *default-dead-pool*)
        (set-wascityb-turret-flash! (the-as float a0-28))
        )
      )
    0
    (none)
    )
  )

(defmethod vector<-fire-pos! ((this wascity-turret) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((v0-0 arg0))
      (let ((v1-4 (-> this
                      node-list
                      data
                      (if (-> this left?)
                          5
                          6
                          )
                      bone
                      transform
                      trans
                      )
                  )
            )
        (let ((a0-1 (-> this aim-dir)))
          (let ((a1-2 3276800.0))
            (.mov vf7 a1-2)
            )
          (.lvf vf5 (&-> a0-1 quad))
          )
        (.lvf vf4 (&-> v1-4 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> v0-0 quad) vf6)
      v0-0
      )
    )
  )

(defmethod vector<-reticle-fire-pos! ((this wascity-turret) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((v0-0 arg0))
      (let ((v1-4 (-> this
                      node-list
                      data
                      (if (-> this left?)
                          5
                          6
                          )
                      bone
                      transform
                      trans
                      )
                  )
            )
        (let ((a0-1 (-> this reticle-dir)))
          (let ((a1-2 3276800.0))
            (.mov vf7 a1-2)
            )
          (.lvf vf5 (&-> a0-1 quad))
          )
        (.lvf vf4 (&-> v1-4 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> v0-0 quad) vf6)
      v0-0
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod target-turret-method-52 ((this wascity-turret))
  (cond
    ((-> this left?)
     (let ((v1-3 (-> this node-list data 5 bone transform)))
       (target-turret-method-51 this (-> v1-3 trans) (-> this aim-dir))
       )
     (set! (-> this left?) #f)
     (set! (-> this recoil 0) 8192.0)
     )
    (else
      (let ((v1-9 (-> this node-list data 6 bone transform)))
        (target-turret-method-51 this (-> v1-9 trans) (-> this aim-dir))
        )
      (set! (-> this left?) #t)
      (set! (-> this recoil 1) 8192.0)
      )
    )
  (activate! *camera-smush-control* 81.92 60 75 1.0 0.3 (-> *display* camera-clock))
  (set-time! (-> this fire-time))
  (set-time! (-> this my-fire-time (-> this fire-idx)))
  (set! (-> this fire-idx) (logand (+ (-> this fire-idx) 1) 3))
  (when (-> this rider)
    (if (= (handle->process (-> this rider)) *target*)
        (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
        )
    (send-event (handle->process (-> this rider)) 'fire)
    )
  (none)
  )

;; WARN: Return type mismatch symbol vs object.
(defmethod target-turret-method-41 ((this wascity-turret))
  (local-vars (v0-8 symbol))
  (if (and (or (and (task-node-closed? (game-task-node wascity-gungame-introduction))
                    (task-node-open? (game-task-node wascity-gungame-resolution))
                    (time-elapsed? *wascity-turret-got-out-time* (seconds 5))
                    )
               (and (task-node-closed? (game-task-node wascity-gungame-resolution))
                    (task-node-open? (game-task-node wascity-gungame-play-for-fun))
                    )
               (and (task-node-closed? (game-task-node wascity-defend-resolution))
                    (task-node-open? (game-task-node wascity-defend-get-to))
                    )
               )
           (call-parent-method this)
           )
      (return (the-as object #t))
      )
  (return (the-as object #f))
  v0-8
  )

;; WARN: Return type mismatch object vs none.
(defmethod target-turret-method-38 ((this wascity-turret))
  (if (or (and (not (task-node-closed? (game-task-node wascity-gungame-resolution)))
               (task-node-closed? (game-task-node desert-rescue-resolution))
               )
          (and (not (task-node-closed? (game-task-node wascity-gungame-play-for-fun)))
               (not (task-node-closed? (game-task-node temple-defend-resolution)))
               (task-node-closed? (game-task-node wascity-gungame-resolution))
               )
          (and (not (task-node-closed? (game-task-node wascity-defend-resolution)))
               (task-node-closed? (game-task-node temple-defend-resolution))
               )
          )
      (go (method-of-object this idle))
      (go (method-of-object this idle))
      )
  (none)
  )

;; WARN: Return type mismatch target-turret vs wascity-turret.
(defmethod relocate ((this wascity-turret) (offset int))
  (if (nonzero? (-> this reticle-part))
      (&+! (-> this reticle-part) offset)
      )
  (the-as wascity-turret ((method-of-type target-turret relocate) this offset))
  )

(defmethod deactivate ((this wascity-turret))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (set! *wascity-turret* (the-as (pointer wascity-turret) #f))
  (if (nonzero? (-> this reticle-part))
      (kill-particles (-> this reticle-part))
      )
  ((method-of-type target-turret deactivate) this)
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod init-fields! ((this wascity-turret))
  (let ((a1-0 (-> this node-list data 5)))
    (set! (-> a1-0 param0) joint-mod-recoil)
    (set! (-> a1-0 param1) this)
    (set! (-> a1-0 param2) (the-as basic 0))
    )
  (let ((v1-3 (-> this node-list data 6)))
    (set! (-> v1-3 param0) joint-mod-recoil)
    (set! (-> v1-3 param1) this)
    (set! (-> v1-3 param2) (the-as basic 1))
    )
  (set! *wascity-turret* (the-as (pointer wascity-turret) (process->ppointer this)))
  (set! (-> this radar-object-counter) (the-as uint 0))
  (set! (-> this fire-delay) #t)
  (set! (-> this recoil 0) 0.0)
  (set! (-> this recoil 1) 0.0)
  (set-time! (-> this my-fire-time 0))
  (set-time! (-> this my-fire-time 1))
  (set-time! (-> this ready-to-go-active))
  (set-time! (-> this move-start))
  (set! (-> this left?) #t)
  (set! (-> this fire-idx) (the-as uint 0))
  (set! (-> this facing-ocean) #t)
  (set! (-> this facing-city) #f)
  (set! (-> this reset-facing) #f)
  (set! (-> this target-handle) (the-as handle #f))
  (set-vector! (-> this aim-dir) 0.0 0.0 1.0 1.0)
  (set-vector! (-> this reticle-dir) 0.0 0.0 1.0 1.0)
  (set! (-> this speed-mult) 1.0)
  (set! (-> this roty) 32768.0)
  (set! (-> this dest-roty) (-> this roty))
  (set! (-> this ready-to-go-active-sym) #f)
  (none)
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod target-turret-method-48 ((this wascity-turret) (arg0 vector))
  (local-vars (a0-17 process))
  (with-pp
    (set-vector! arg0 6585594.5 263189.94 -1938929.1 1.0)
    (let ((v0-0 (the-as object #f)))
      (let* ((v1-3 (-> *game-info* sub-task-list (game-task-node wascity-gungame-resolution)))
             (a0-7 (handle->process (if (-> v1-3 manager)
                                        (-> v1-3 manager manager)
                                        (the-as handle #f)
                                        )
                                    )
                   )
             )
        (when a0-7
          (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
            (set! (-> a1-2 from) (process->ppointer pp))
            (set! (-> a1-2 num-params) 0)
            (set! (-> a1-2 message) 'event-over)
            (set! v0-0 (send-event-function a0-7 a1-2))
            )
          )
        )
      (let* ((v1-14 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
             (a0-12 (handle->process (if (-> v1-14 manager)
                                         (-> v1-14 manager manager)
                                         (the-as handle #f)
                                         )
                                     )
                    )
             )
        (cond
          (a0-12
            (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-4 from) (process->ppointer pp))
              (set! (-> a1-4 num-params) 0)
              (set! (-> a1-4 message) 'event-over)
              (set! v0-0 (send-event-function a0-12 a1-4))
              )
            )
          ((begin
             (let ((v1-24 (-> *game-info* sub-task-list (game-task-node wascity-gungame-play-for-fun))))
               (set! a0-17 (handle->process (if (-> v1-24 manager)
                                                (-> v1-24 manager manager)
                                                (the-as handle #f)
                                                )
                                            )
                     )
               )
             a0-17
             )
           (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
             (set! (-> a1-6 from) (process->ppointer pp))
             (set! (-> a1-6 num-params) 0)
             (set! (-> a1-6 message) 'event-over)
             (set! v0-0 (send-event-function a0-17 a1-6))
             )
           )
          )
        )
      (the-as symbol v0-0)
      )
    )
  )

(defmethod target-turret-method-45 ((this wascity-turret))
  (let ((f30-0 (fabs (/ (-> this rotyv) (-> this params rotyv-max))))
        (f28-0 (fabs (/ (-> this rotxv) (-> this params rotxv-max))))
        (f26-0 (- 1.0 (-> this params roty-friction)))
        (f24-0 (- 1.0 (-> this params rotx-friction)))
        (s5-0 (-> this sound-playing 0))
        (s4-0 (-> this sound-playing 1))
        )
    (cond
      ((and (-> this sound-playing 0) (< f30-0 f26-0) (< f28-0 f24-0))
       (sound-stop (-> this sound-id 0))
       (set! (-> this sound-playing 0) #f)
       (set! (-> this move-start) 0)
       0
       )
      ((or (< (* 1.2 f26-0) f30-0) (< (* 1.2 f24-0) f28-0))
       (if (zero? (-> this move-start))
           (set-time! (-> this move-start))
           )
       (sound-play "turret-servo" :id (-> this sound-id 0) :position (-> this root trans))
       (set! (-> this sound-playing 0) #t)
       )
      )
    (cond
      ((and (-> this sound-playing 1) (< f28-0 f24-0))
       (sound-stop (-> this sound-id 1))
       (set! (-> this sound-playing 1) #f)
       )
      ((< (* 1.2 f24-0) f28-0)
       (if (zero? (-> this move-start))
           (set-time! (-> this move-start))
           )
       (sound-play "turret-up-down" :id (-> this sound-id 1) :position (-> this root trans))
       (set! (-> this sound-playing 1) #t)
       )
      )
    (when (and (or s5-0 s4-0)
               (< f30-0 f26-0)
               (and (< f28-0 f24-0) (nonzero? (-> this move-start)) (time-elapsed? (-> this move-start) (seconds 2)))
               )
      (sound-play "turret-end" :position (-> this root trans))
      (set! (-> this move-start) 0)
      0
      )
    )
  0
  (none)
  )

;; ERROR: Unsupported inline assembly instruction kind - [mula.s f0, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madda.s f1, f4]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f0, f2, f5]
(defmethod wascity-turret-method-62 ((this wascity-turret))
  (local-vars
    (f0-30 float)
    (sv-896 collide-prim-core)
    (sv-912 vector)
    (sv-928 vector)
    (sv-944 int)
    (sv-960 process)
    (sv-976 collide-shape-prim)
    (sv-992 int)
    (sv-1008 vector)
    (sv-1024 vector)
    (sv-1040 vector)
    )
  (with-pp
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (let ((s5-0 (new 'stack-no-clear 'matrix))
            (s3-0 (new 'stack-no-clear 'vector))
            (s4-0 (the-as (array collide-shape) (new 'stack 'boxed-array collide-shape 128)))
            (f26-0 0.0)
            (f28-0 0.0)
            (f30-0 91.022224)
            )
        (quaternion->matrix s5-0 (-> this root quat))
        (set! (-> s5-0 trans quad) (-> (wascity-turret-gun-pos) quad))
        (seek! (-> this lerp) 0.0 (* 0.25 (seconds-per-frame)))
        (set! (-> this lerp2) 0.0)
        (vector-lerp! (-> this aim-dir) (-> s5-0 fvec) (-> this aim-dir) (-> this lerp))
        (vector-lerp! (-> this reticle-dir) (-> s5-0 fvec) (-> this reticle-dir) (-> this lerp2))
        (vector+float*! s3-0 (-> s5-0 trans) (-> this aim-dir) 2457600.0)
        (set! (-> s3-0 w) 2457600.0)
        (set! (-> this target-handle) (the-as handle #f))
        (let ((s2-1 (fill-actor-list-for-box *actor-hash* s3-0 (-> s4-0 data) (-> s4-0 length))))
          (set! (-> s4-0 length) s2-1)
          (let ((s3-1 (the-as process #f)))
            (dotimes (s1-0 s2-1)
              (set! sv-896 (-> s4-0 s1-0 root-prim prim-core))
              (let ((s0-0 (-> s4-0 s1-0 root-prim cshape process)))
                (set! sv-912 (new 'stack-no-clear 'vector))
                (let ((v1-21 sv-896)
                      (a0-8 (-> s5-0 trans))
                      )
                  (.lvf vf4 (&-> v1-21 world-sphere quad))
                  (.lvf vf5 (&-> a0-8 quad))
                  )
                (.mov.vf vf6 vf0 :mask #b1000)
                (.sub.vf vf6 vf4 vf5 :mask #b111)
                (.svf (&-> sv-912 quad) vf6)
                (let ((f24-0 (vector-length sv-912)))
                  (if (= f24-0 0.0)
                      (set! f24-0 0.000001)
                      )
                  (when (and (or (= (-> s0-0 type) maker-grenade)
                                 (= (-> s0-0 type) dm-flyer-shot)
                                 (= (-> s0-0 type) skeet)
                                 (and (or (and (-> s0-0 next-state) (= (-> s0-0 next-state name) 'walking))
                                          (and (-> s0-0 next-state) (= (-> s0-0 next-state name) 'standup))
                                          )
                                      (= (-> s0-0 type) maker)
                                      )
                                 )
                             (and (not (and (-> s0-0 next-state) (= (-> s0-0 next-state name) 'impact)))
                                  (not (and (-> s0-0 next-state) (= (-> s0-0 next-state name) 'explode)))
                                  (< f24-0 4915200.0)
                                  )
                             )
                    (when (= (-> s0-0 type) maker)
                      )
                    (if #f
                        (add-debug-sphere #t (bucket-id debug) (the-as vector sv-896) (-> sv-896 world-sphere w) *color-red*)
                        )
                    (let* ((t9-8 vector-normalize-copy!)
                           (a0-22 (new 'stack-no-clear 'vector))
                           (a2-7 1.0)
                           (f22-0 (vector-dot (t9-8 a0-22 sv-912 a2-7) (-> s5-0 fvec)))
                           )
                      (set! sv-928 (new 'stack-no-clear 'vector))
                      (set-vector! sv-928 f24-0 0.0 (-> sv-896 world-sphere w) 1.0)
                      (vector-normalize! sv-928 1.0)
                      (let ((f0-17 (/ f22-0 (-> sv-928 x))))
                        (when (or (not (the-as process-drawable s3-1)) (< f26-0 f0-17))
                          (set! s3-1 s0-0)
                          (set! f26-0 f0-17)
                          (set! f28-0 f24-0)
                          )
                        )
                      )
                    )
                  )
                )
              )
            (set! (-> this target-handle) (if (the-as process-drawable s3-1)
                                              (process->handle (the-as process-drawable s3-1))
                                              (the-as handle #f)
                                              )
                  )
            )
          )
        (when (-> this target-handle)
          (let* ((s4-1 (handle->process (-> this target-handle)))
                 (s2-2 (if (type? s4-1 process-drawable)
                           s4-1
                           )
                       )
                 )
            (when (and s2-2 (let ((s4-2 (-> (the-as process-drawable s2-2) root)))
                              (if (type? s4-2 collide-shape)
                                  s4-2
                                  )
                              )
                       )
              (let ((s0-1 (new 'stack-no-clear 'vector))
                    (s1-1 (new 'stack-no-clear 'vector))
                    )
                (set! sv-1024 (new 'stack-no-clear 'vector))
                (let ((s3-2 (new 'stack-no-clear 'vector))
                      (s4-3 (new 'stack-no-clear 'vector))
                      )
                  (set! sv-1040 (new 'stack-no-clear 'vector))
                  (set! sv-976 (-> (the-as collide-shape (-> (the-as process-drawable s2-2) root)) root-prim))
                  (set! sv-944 -1)
                  (set! (-> s1-1 quad) (-> sv-976 prim-core world-sphere quad))
                  (set! (-> sv-1024 quad) (-> s1-1 quad))
                  (set! (-> s0-1 quad) (-> s1-1 quad))
                  (when (= (-> s2-2 type) skeet)
                    (set! sv-960 s2-2)
                    (let ((f28-1 (* 0.00000013563368 f28-0)))
                      (if #f
                          (add-debug-sphere #t (bucket-id debug) s1-1 (meters 12) *color-red*)
                          )
                      (let ((a0-43 s0-1))
                        (let ((v1-89 s1-1))
                          (let ((a1-15 (-> (the-as skeet sv-960) pvel)))
                            (let ((a2-9 f28-1))
                              (.mov vf7 a2-9)
                              )
                            (.lvf vf5 (&-> a1-15 quad))
                            )
                          (.lvf vf4 (&-> v1-89 quad))
                          )
                        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                        (.mul.x.vf acc vf5 vf7 :mask #b111)
                        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                        (.svf (&-> a0-43 quad) vf6)
                        )
                      )
                    (if #f
                        (add-debug-sphere #t (bucket-id debug) s0-1 (meters 12) *color-green*)
                        )
                    )
                  (when (and (= (-> s2-2 type) maker) (= (-> sv-976 type) collide-shape-prim-group))
                    (if #f
                        (add-debug-sphere #t (bucket-id debug) s1-1 (-> s1-1 w) *color-red*)
                        )
                    (let ((f28-2 1.0))
                      (set! sv-992 0)
                      (while (< sv-992 (the-as int (-> sv-976 specific 0)))
                        (let* ((a1-19
                                 (vector-!
                                   (new 'stack-no-clear 'vector)
                                   (the-as vector (-> (the-as collide-shape-prim-group sv-976) child sv-992 prim-core))
                                   (-> s5-0 trans)
                                   )
                                 )
                               (f26-2
                                 (- 1.0 (vector-dot (vector-normalize-copy! (new 'stack-no-clear 'vector) a1-19 1.0) (-> this aim-dir)))
                                 )
                               (a1-20 (new 'stack-no-clear 'event-message-block))
                               )
                          (set! (-> a1-20 from) (process->ppointer pp))
                          (set! (-> a1-20 num-params) 1)
                          (set! (-> a1-20 message) 'is-section-shot)
                          (set! (-> a1-20 param 0) (-> (the-as collide-shape-prim-group sv-976) child sv-992 prim-id))
                          (when (and (not (send-event-function s2-2 a1-20)) (< f26-2 f28-2))
                            (set! (-> s0-1 quad) (-> (the-as collide-shape-prim-group sv-976) child sv-992 prim-core world-sphere quad))
                            (set! (-> sv-1024 quad) (-> s0-1 quad))
                            (set! (-> s1-1 quad) (-> s0-1 quad))
                            (if #f
                                (add-debug-sphere #t (bucket-id debug) s0-1 (-> s0-1 w) *color-blue*)
                                )
                            (set! f28-2 f26-2)
                            (set! sv-944 (the-as int (-> (the-as collide-shape-prim-group sv-976) child sv-992 prim-id)))
                            (the-as uint sv-944)
                            )
                          )
                        (set! sv-992 (+ sv-992 1))
                        )
                      )
                    )
                  (set! sv-1008 (new 'stack-no-clear 'vector))
                  (let ((f0-23 (vector-vector-distance s1-1 (-> s5-0 trans))))
                    (set! (-> sv-1008 x) (-> s1-1 w))
                    (set! (-> sv-1008 y) 0.0)
                    (set! (-> sv-1008 z) f0-23)
                    )
                  (vector-normalize! sv-1008 1.0)
                  (let ((f30-1 (+ f30-0 (acos (-> sv-1008 z)))))
                    (if #f
                        (add-debug-sphere #t (bucket-id debug) s0-1 (-> s0-1 w) *color-blue*)
                        )
                    (vector-! s3-2 s0-1 (-> s5-0 trans))
                    (vector-! s4-3 s1-1 (-> s5-0 trans))
                    (let ((a1-32 sv-1040)
                          (v1-138 (-> s5-0 trans))
                          )
                      (vector-! a1-32 sv-1024 v1-138)
                      )
                    (vector-normalize! s3-2 1.0)
                    (vector-normalize! s4-3 1.0)
                    (vector-normalize! sv-1040 1.0)
                    (let ((f28-3 (acos (vector-dot s3-2 (-> s5-0 fvec))))
                          (f26-3 (acos (vector-dot s4-3 (-> s5-0 fvec))))
                          (t9-27 acos)
                          )
                      (let* ((v1-141 (-> s5-0 fvec))
                             ; (f0-29 (-> sv-1040 x))
                             ; (f1-3 (-> sv-1040 y))
                             ; (f2-0 (-> sv-1040 z))
                             ; (f3-0 (-> v1-141 x))
                             ; (f4-0 (-> v1-141 y))
                             ; (f5-0 (-> v1-141 z))
                             )
                        ;; og:preserve-this
                        ; (.mula.s f0-29 f3-0)
                        ; (.madda.s f1-3 f4-0)
                        ; (.madd.s f0-30 f2-0 f5-0)
                        (set! f0-30 (vector-dot sv-1040 v1-141))
                        )
                      (let ((f24-1 (t9-27 f0-30))
                            (f0-31 (get-base-height *ocean-map*))
                            )
                        (when (and (< f0-31 (-> s0-1 y)) (< f0-31 (-> s1-1 y)) (or (>= f30-1 f28-3) (>= f30-1 f26-3) (>= f30-1 f24-1)))
                          (if (= (-> s2-2 type) maker)
                              (send-event s2-2 'section-targeted sv-944)
                              )
                          (if (< f26-3 f28-3)
                              (set! f28-3 f26-3)
                              )
                          (if (< f24-1 f28-3)
                              (set! f28-3 f24-1)
                              )
                          (set! (-> this lerp2) 1.0)
                          (let ((s5-1 vector-lerp!)
                                (s2-3 (-> this aim-dir))
                                (s1-2 (-> this aim-dir))
                                (f0-33 (lerp-scale 0.0 1.0 f28-3 f30-1 18.204445))
                                )
                            (set! (-> this lerp) f0-33)
                            (s5-1 s2-3 s1-2 s3-2 f0-33)
                            )
                          (let ((s5-2 vector-lerp!)
                                (s3-3 (-> this reticle-dir))
                                (s2-4 (-> this reticle-dir))
                                (f0-34 (lerp-scale 0.0 1.0 f28-3 f30-1 18.204445))
                                )
                            (set! (-> this lerp) f0-34)
                            (s5-2 s3-3 s2-4 s4-3 f0-34)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      0
      (none)
      )
    )
  )

(defmethod target-turret-method-54 ((this wascity-turret))
  (when (!= (-> *game-info* health-bar-vehicle) (/ (-> this health) (-> this params max-health)))
    (cond
      ((= (-> this health) (+ -1.0 (-> this params max-health)))
       (talker-spawn-func (-> *wascity-turret-speech-list* 3) *entity-pool* (target-pos 0) (the-as region #f))
       )
      ((= (-> *game-info* health-bar-vehicle) 0.5)
       (talker-spawn-func (-> *wascity-turret-speech-list* 1) *entity-pool* (target-pos 0) (the-as region #f))
       )
      ((= (-> this health) 1.0)
       (talker-spawn-func (-> *wascity-turret-speech-list* 2) *entity-pool* (target-pos 0) (the-as region #f))
       )
      )
    (set! (-> *game-info* health-bar-vehicle) (/ (-> this health) (-> this params max-health)))
    )
  0
  (none)
  )

(defun wascity-turret-get-fire-pos ((arg0 vector))
  (when *wascity-turret*
    (vector<-fire-pos! (-> *wascity-turret* 0) arg0)
    (return #t)
    )
  #f
  )

(defun wascity-turret-get-reticle-fire-pos ((arg0 vector))
  (when *wascity-turret*
    (vector<-reticle-fire-pos! (-> *wascity-turret* 0) arg0)
    (return #t)
    )
  #f
  )

(define *wascity-reticle-normal-color* (new 'static 'rgbaf :x 255.0 :y 236.0 :z 72.0 :w 1.0))

(define *wascity-reticle-locked-color* (new 'static 'rgbaf :x 242.0 :w 1.0))

(defun wascity-turret-get-reticle-color ((arg0 vector4w))
  (cond
    (*wascity-turret*
      (let ((s5-0 (new 'stack-no-clear 'vector))
            (f30-0 (-> *wascity-turret* 0 lerp2))
            )
        (vector-lerp! s5-0 *wascity-reticle-normal-color* *wascity-reticle-locked-color* f30-0)
        (set! (-> arg0 x) (the int (-> s5-0 x)))
        (set! (-> arg0 y) (the int (-> s5-0 y)))
        (set! (-> arg0 z) (the int (-> s5-0 z)))
        (set! (-> arg0 w) (the int (lerp 32.0 128.0 f30-0)))
        )
      )
    (else
      (set! (-> arg0 x) 255)
      (set! (-> arg0 y) 255)
      (set! (-> arg0 z) 255)
      (set! (-> arg0 w) 0)
      0
      )
    )
  0
  (none)
  )

(defun wascity-turret-gun-pos ()
  (if *wascity-turret*
      (-> *wascity-turret*
          0
          node-list
          data
          (if (-> *wascity-turret* 0 left?)
              5
              6
              )
          bone
          transform
          trans
          )
      (target-pos 0)
      )
  )

;; WARN: Return type mismatch vector vs none.
(defbehavior wascity-turret-gun-aim wascity-turret ()
  (if *wascity-turret*
      (-> *wascity-turret*
          0
          node-list
          data
          (if (-> *wascity-turret* 0 left?)
              5
              6
              )
          bone
          transform
          fvec
          )
      (target-pos 0)
      )
  (none)
  )

(defun wascity-turret-add-radar ((arg0 vector))
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (s5-0 (new 'stack-no-clear 'vector))
        (gp-0 *wascity-turret*)
        )
    0.0
    (when (and gp-0 (< (-> gp-0 0 radar-object-counter) (the-as uint 64)))
      (vector-! s4-0 (target-pos 0) arg0)
      (let ((f0-4 (atan (-> s4-0 x) (fabs (-> s4-0 z)))))
        (if (< (-> s4-0 z) 0.0)
            (set! f0-4 (- f0-4))
            )
        (set! (-> s5-0 x) (* 0.000061035156 f0-4))
        )
      (let ((f0-11 (atan (-> s4-0 y) (sqrtf (+ (* (-> s4-0 x) (-> s4-0 x)) (* (-> s4-0 z) (-> s4-0 z)))))))
        (set! (-> s5-0 y) (* -0.00014085036 f0-11))
        )
      (let ((v1-13 (-> gp-0 0 radar-object (-> gp-0 0 radar-object-counter))))
        (set! (-> v1-13 x) (-> s5-0 x))
        (set! (-> v1-13 y) (-> s5-0 y))
        )
      (+! (-> gp-0 0 radar-object-counter) 1)
      )
    )
  0
  (none)
  )
