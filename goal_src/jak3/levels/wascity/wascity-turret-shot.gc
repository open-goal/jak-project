;;-*-Lisp-*-
(in-package goal)

;; name: wascity-turret-shot.gc
;; name in dgo: wascity-turret-shot
;; dgos: WCB

(define-extern *range-skeet-shot-splash-color* curve-color-fast)
(define-extern *range-skeet-shot-splash-alpha* curve2d-fast)
(define-extern *range-skeet-shot-splash-scale-x* curve2d-fast)
(define-extern *range-skeet-shot-splash-scale-y* curve2d-fast)
(define-extern *curve-skeet-shot-splash-alpha* curve2d-fast)
(define-extern *curve-skeet-shot-splash-scale-x* curve2d-fast)
(define-extern *curve-skeet-shot-splash-scale-y* curve2d-fast)
(define-extern wasgun-manager-shot-missed (function none))
(define-extern set-wascityb-turret-flash! (function float none))
(define-extern wascity-turret-gun-pos (function vector))

(declare-type maker process-focusable)

;; DECOMP BEGINS

(defpart 2154
  :init-specs ((:texture (was-gun-beam wascityb-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 45))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:scalevel-x (meters 0.0016666667))
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:next-time (seconds 0.25))
    (:next-launcher 2155)
    )
  )

(defpart 2155
  :init-specs ((:scalevel-x (meters 0.03)) (:fade-a -1.7066667))
  )

(defpart 2156
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 200.0)
    (:a 10.0)
    (:vel-x (meters 0.016666668))
    (:scalevel-x (meters 0.013333334))
    (:rotvel-z (degrees 0.0033333332))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.06666667)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-wascity-turret-shot-hit
  :id 546
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2157 :period (seconds 20) :length (seconds 0.05)))
  )

(defpart 2157
  :init-specs ((:texture (middot level-default-sprite))
    (:num 40.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 150.0)
    (:b 40.0)
    (:a 64.0 64.0)
    (:omega (degrees 0.1125))
    (:vel-y (meters 0.13333334) (meters 0.13333334))
    (:fade-r -0.425)
    (:fade-g -0.16666667)
    (:fade-b 0.35)
    (:fade-a -0.21333334 -0.21333334)
    (:friction 0.95 0.02)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-wascity-turret-shot-hit-water
  :id 547
  :duration (seconds 5)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 2158 :period (seconds 60) :length (seconds 0.2))
    (sp-item 2159 :flags (is-3d) :period (seconds 60) :length (seconds 0.035) :offset 150)
    (sp-item 2160 :period (seconds 60) :length (seconds 0.1) :offset 20)
    )
  )

(defpart 2158
  :init-specs ((:texture (splash level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 3.0)
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-z (meters 0.006666667) (meters 0.006666667))
    (:accel-y (meters -0.0011666666))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-skeet-shot-splash-color* (new 'static 'curve-color-fast
                                            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                            :ys (new 'static 'inline-array vector 4
                                              (new 'static 'vector :x 90.0 :y 130.0 :z 110.0 :w 128.0)
                                              (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                              (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                              (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                              )
                                            :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *range-skeet-shot-splash-alpha* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                            :ys (new 'static 'vector :x 128.0 :y 255.0 :z 256.0 :w 257.0)
                                            :one-over-x-deltas (new 'static 'vector :x 127.0 :y 1.0 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *range-skeet-shot-splash-scale-x* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                              :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *range-skeet-shot-splash-scale-y* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 5.0 :y 10.0 :z 11.0 :w 12.0)
                                              :one-over-x-deltas (new 'static 'vector :x 5.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-skeet-shot-splash-alpha* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -0.1 :z -1.0 :w -2.0)
                                            :ys (new 'static 'vector :y 1.0 :w 1.0)
                                            :one-over-x-deltas (new 'static 'vector :x 10.0 :y -1.1111112 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *curve-skeet-shot-splash-scale-x* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 1.0 :y 3.0 :z 4.0 :w 5.0)
                                              :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if #t
    (set! *curve-skeet-shot-splash-scale-y* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -0.2 :z -0.3 :w -1.0)
                                              :ys (new 'static 'vector :y 1.0 :z 2.0 :w 0.1)
                                              :one-over-x-deltas (new 'static 'vector :x 5.0 :y 9.999999 :z -2.7142856 :w 1.0)
                                              )
          )
    )

(define *part-wascity-turret-shot-hit-splash-curve-settings*
  (new 'static 'particle-curve-settings :lifetime-base (seconds 0.8) :lifetime-offset (seconds 0.4))
  )

(set! (-> *part-id-table* 2158 init-specs 13 initial-valuef)
      (the-as float *part-wascity-turret-shot-hit-splash-curve-settings*)
      )

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* color-start) *range-skeet-shot-splash-color*)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* alpha-start) *range-skeet-shot-splash-alpha*)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* scale-x-start)
      *range-skeet-shot-splash-scale-x*
      )

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* scale-y-start)
      *range-skeet-shot-splash-scale-y*
      )

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* r-scalar) #f)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* g-scalar) #f)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* b-scalar) #f)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* a-scalar) *curve-skeet-shot-splash-alpha*)

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* scale-x-scalar)
      *curve-skeet-shot-splash-scale-x*
      )

(set! (-> *part-wascity-turret-shot-hit-splash-curve-settings* scale-y-scalar)
      *curve-skeet-shot-splash-scale-y*
      )

(defpart 2159
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 1.0)
    (:x (meters 0) (meters 2))
    (:y (meters 1.5))
    (:scale-x (meters 3) (meters 1))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.05) (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.425)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 2160
  :init-specs ((:texture (water-drops level-default-sprite))
    (:num 4.0)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) 1 (degrees 180))
    (:scale-y (meters 3) (meters 3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 128.0)
    (:vel-y (meters 0.016666668) (meters 0.13333334))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334 -0.21333334)
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 sp-cpuinfo-flag-14))
    (:func 'check-drop-group-center)
    (:conerot-x (degrees -2) (degrees 4))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2161
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 220.0 35.0)
    (:b 100.0)
    (:a 255.0)
    (:scalevel-x (meters 0.053333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -3.6571429)
    (:fade-a -7.285714)
    (:timer (seconds 0.117))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(deftype wascity-turret-shot (guard-shot)
  ((hit-pos         vector  :inline)
   (prev-smoke-pos  vector  :inline)
   (smoke-part      sparticle-launch-control)
   (hit-water?      symbol)
   (rotangle        float)
   (rotrad          float)
   (right           vector  :inline)
   (up              vector  :inline)
   (polarity        basic)
   )
  (:methods
    (wascity-turret-shot-method-41 (_type_) none)
    )
  )


(defstate impact (wascity-turret-shot)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (let* ((s4-0 proc)
              (v1-1 (if (type? s4-0 process-drawable)
                        s4-0
                        )
                    )
              )
         (when v1-1
           (-> (the-as process-drawable v1-1) root)
           (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
             (set! (-> a1-2 from) (process->ppointer self))
             (set! (-> a1-2 num-params) 2)
             (set! (-> a1-2 message) 'attack)
             (set! (-> a1-2 param 0) (-> block param 0))
             (let ((v1-7 (new 'static 'attack-info
                           :mask (attack-mask trans mode id damage vehicle-damage-factor vehicle-impulse-factor)
                           )
                         )
                   )
               (set! (-> v1-7 id) (-> self attack-id))
               (set! (-> v1-7 damage) (-> self damage))
               (set! (-> v1-7 vehicle-damage-factor) 1.0)
               (set! (-> v1-7 vehicle-impulse-factor) 1.0)
               (set! (-> v1-7 trans quad) (-> self root trans quad))
               (set! (-> v1-7 mode) 'explode)
               (set! (-> a1-2 param 1) (the-as uint v1-7))
               )
             (send-event-function proc a1-2)
             )
           )
         )
       )
      (else
        (projectile-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (projectile-method-26 self)
    (play-impact-sound self (projectile-options po0))
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> (the-as collide-shape-prim-group v1-5) child 0 prim-core world-sphere w) 4915.2)
      )
    (let ((a1-1 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-1 options) (overlaps-others-options))
      (set! (-> a1-1 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-1 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root) a1-1)
      )
    )
  :code (behavior ()
    (suspend)
    (go-virtual die)
    )
  )

(defmethod projectile-method-27 ((this wascity-turret-shot))
  (wasgun-manager-shot-missed)
  0
  (none)
  )

(defmethod projectile-method-24 ((this wascity-turret-shot))
  (draw-beam (-> *part-id-table* 854) (-> this tail-pos) (-> this starting-dir) #f)
  (let* ((a0-3 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this starting-dir) 2048.0))
         (v1-2 (vector+! (new 'stack-no-clear 'vector) (-> this tail-pos) a0-3))
         (t9-2 sp-launch-particles-var)
         (a0-4 *sp-particle-system-2d*)
         (a1-4 (-> *part-id-table* 2161))
         (a2-2 *launch-matrix*)
         )
    (set! (-> a2-2 trans quad) (-> v1-2 quad))
    (t9-2 a0-4 a1-4 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
    )
  0
  (none)
  )

(defmethod projectile-method-25 ((this wascity-turret-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((v1-1 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) v1-1 a1-0))
           )
      (vector-length s5-1)
      (let ((a2-0 (new 'stack-no-clear 'vector)))
        (let ((v1-4 a1-0))
          (let ((a0-2 s5-1))
            (let ((a3-1 0.8))
              (.mov vf7 a3-1)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a2-0 quad) vf6)
        )
      (let ((f30-0 (-> *part-id-table* 2154 init-specs 4 initial-valuef)))
        (set! (-> *part-id-table* 2154 init-specs 4 initial-valuef) (vector-length s5-1))
        (draw-beam (-> *part-id-table* 2154) a1-0 s5-1 #f)
        (set! (-> *part-id-table* 2154 init-specs 4 initial-valuef) f30-0)
        )
      (vector-normalize! s5-1 1.0)
      )
    (wascity-turret-shot-method-41 this)
    0
    (none)
    )
  )

(defmethod projectile-method-26 ((this wascity-turret-shot))
  (let* ((s5-0 (-> this root))
         (a0-3 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this tail-pos) (-> s5-0 trans)) 2048.0))
         (v1-1 (new 'stack-no-clear 'vector))
         )
    (set! (-> v1-1 quad) (-> s5-0 trans quad))
    (vector+! v1-1 v1-1 a0-3)
    (cond
      ((-> this hit-actor?)
       )
      ((logtest? (-> (if (-> this hit-water?)
                         (-> *part-group-id-table* 547)
                         (-> *part-group-id-table* 546)
                         )
                     flags
                     )
                 (sp-group-flag sp13)
                 )
       (set! (-> *launch-matrix* trans quad) (-> v1-1 quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (if (-> this hit-water?)
                                                                                (-> *part-group-id-table* 547)
                                                                                (-> *part-group-id-table* 546)
                                                                                )
                           )
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> v1-1 quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (if (-> this hit-water?)
                                                                      (-> *part-group-id-table* 547)
                                                                      (-> *part-group-id-table* 546)
                                                                      )
                            )
        )
      )
    )
  0
  (none)
  )

(defmethod play-impact-sound ((this wascity-turret-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "turret-fire" :position (-> this root trans))
       )
      ((= v1-0 (projectile-options po0))
       (if (-> this hit-water?)
           (sound-play "bullet-water")
           (sound-play "bullet-stone")
           )
       )
      )
    )
  0
  (none)
  )

(defmethod handle-proj-hit! ((this wascity-turret-shot) (arg0 process) (arg1 event-message-block))
  (let ((s5-1 (call-parent-method this arg0 arg1)))
    (go (method-of-object this die))
    s5-1
    )
  )

(defun wascity-turret-shot-move ((arg0 wascity-turret-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 184320.0 f0-0)
          (vector-normalize! s4-0 184320.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

(defmethod relocate ((this wascity-turret-shot) (offset int))
  (if (nonzero? (-> this smoke-part))
      (&+! (-> this smoke-part) offset)
      )
  (call-parent-method this offset)
  )

(defmethod wascity-turret-shot-method-41 ((this wascity-turret-shot))
  (let ((f30-0 0.16666667))
    0.0
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (set! (-> s5-0 quad) (-> this prev-smoke-pos quad))
      (let ((s4-0 (new 'stack-no-clear 'vector))
            (s3-0 (new 'stack-no-clear 'vector))
            (s2-0 (new 'stack-no-clear 'matrix))
            )
        (set! (-> s2-0 fvec quad) (-> this starting-dir quad))
        (dotimes (s1-0 6)
          (let ((f28-0 (cos (-> this rotangle))))
            (let ((f26-0 (sin (-> this rotangle))))
              (seek! (-> this rotrad) 12288.0 (* 40960.0 (seconds-per-frame)))
              (let ((f0-9 (* f30-0 (the float s1-0))))
                (vector-lerp! s5-0 (-> this prev-smoke-pos) (-> this root trans) f0-9)
                )
              (vector-float*! s4-0 (-> this right) (* (-> this rotrad) f28-0))
              (vector-float*! s3-0 (-> this up) (* (-> this rotrad) f26-0))
              (vector+! s4-0 s4-0 s3-0)
              (vector+! (-> s2-0 trans) s4-0 s5-0)
              (vector-float*! s4-0 (-> this right) f28-0)
              (vector-float*! s3-0 (-> this up) f26-0)
              (vector+! (-> s2-0 rvec) s4-0 s3-0)
              (vector-float*! s4-0 (-> this right) (- f26-0))
              )
            (vector-float*! s3-0 (-> this up) f28-0)
            )
          (vector+! (-> s2-0 uvec) s4-0 s3-0)
          (launch-particles (-> *part-id-table* 2156) s2-0 :origin-is-matrix #t)
          (set! (-> this rotangle)
                (the float (sar (shl (the int (+ (-> this rotangle) (* -109226.664 (seconds-per-frame)))) 48) 48))
                )
          )
        )
      )
    )
  (set! (-> this prev-smoke-pos quad) (-> this root trans quad))
  0
  (none)
  )

;; WARN: Return type mismatch projectile-options vs none.
(defmethod init-proj-settings! ((this wascity-turret-shot))
  (with-pp
    (set! (-> this tail-pos quad) (-> this root trans quad))
    (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
    (set! (-> this attack-mode) 'eco-yellow)
    (set! (-> this move) wascity-turret-shot-move)
    (set! (-> this damage) 1.0)
    (set! (-> this hit-water?) #f)
    (set! (-> this hit-actor?) #f)
    (set! (-> this rotangle) -9102.223)
    (set! (-> this polarity) (the-as basic (< 0.5 (rand-vu))))
    (set! (-> this rotrad) 12288.0)
    pp
    (set! (-> this smoke-part)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 2156) 8.0)
            )
          )
    (set! (-> this prev-smoke-pos quad) (-> this root trans quad))
    (vector-cross! (-> this right) (-> this starting-dir) *up-vector*)
    (vector-normalize! (-> this right) 1.0)
    (vector-cross! (-> this up) (-> this right) (-> this starting-dir))
    (logior! (-> this options) (projectile-options po13))
    (none)
    )
  )

(defmethod setup-collision! ((this wascity-turret-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 7372.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd obstacle pusher shield))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 7372.8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defstate moving (wascity-turret-shot)
  :virtual #t
  :trans (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (when (< (-> self root trans y) (get-base-height *ocean-map*))
        (set! (-> self hit-water?) #t)
        0.0
        0.0
        (let ((f0-4 (- (get-base-height *ocean-map*) (-> self starting-pos y))))
          (when (!= (-> self starting-dir y) 0.0)
            (let ((f0-5 (/ f0-4 (-> self starting-dir y)))
                  (v1-9 (-> self root trans))
                  )
              (let ((a0-2 (-> self starting-pos)))
                (let ((a1-0 (-> self starting-dir)))
                  (let ((a2-0 f0-5))
                    (.mov vf7 a2-0)
                    )
                  (.lvf vf5 (&-> a1-0 quad))
                  )
                (.lvf vf4 (&-> a0-2 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> v1-9 quad) vf6)
              )
            )
          )
        (go-impact! self)
        (wasgun-manager-shot-missed)
        )
      (let ((t9-5 (-> (find-parent-state) trans)))
        (if t9-5
            (t9-5)
            )
        )
      )
    )
  )
