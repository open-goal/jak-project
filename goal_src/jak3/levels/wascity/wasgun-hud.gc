;;-*-Lisp-*-
(in-package goal)

;; name: wasgun-hud.gc
;; name in dgo: wasgun-hud
;; dgos: WCB

;; DECOMP BEGINS

(defmethod draw ((this hud-wasgun))
  0
  0
  (let ((s5-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (when (wascity-turret-get-reticle-fire-pos s4-0)
      (transform-point-vector! s5-0 s4-0)
      (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
          (set! (-> s5-0 x) (- (-> s5-0 x)))
          )
      (+! (-> s5-0 x) -1792.0)
      (+! (-> s5-0 y) -1840.0)
      (set-hud-piece-position! (the-as hud-sprite (-> this sprites)) (the int (-> s5-0 x)) (the int (-> s5-0 y)))
      )
    )
  (set! (-> this sprites 0 pos z) #xfffff0)
  (wascity-turret-get-reticle-color (the-as vector4w (-> this sprites 0 color-ptr)))
  (set! (-> this sprites 4 color w) 0)
  (set! (-> this sprites 5 color w) 0)
  (let ((s5-1 32))
    22
    (set-hud-piece-position! (-> this sprites 4) s5-1 208)
    (if (logtest? (-> this offscreen) 1)
        (set! (-> this sprites 4 color w) 127)
        )
    (set-hud-piece-position! (-> this sprites 5) (- 512 s5-1) 208)
    )
  (if (logtest? (-> this offscreen) 2)
      (set! (-> this sprites 5 color w) 127)
      )
  (let ((s5-2 0))
    (b! #t cfg-28 :delay (nop!))
    (label cfg-9)
    (if (= (-> this scoretimes s5-2) 1)
        (set! (-> this scoretimes s5-2) (-> *display* base-clock frame-counter))
        )
    (cond
      ((or (zero? (-> this scoretimes s5-2))
           (>= (- (-> *display* base-clock frame-counter) (-> this scoretimes s5-2)) (seconds 2))
           )
       (set! (-> this scoretimes s5-2) 0)
       0
       )
      (else
        (new 'stack-no-clear 'vector)
        0
        0
        (when (not (paused?))
          (+! (-> this vel s5-2) (* 163840.0 (seconds-per-frame)))
          (+! (-> this position s5-2 y) (* (-> this vel s5-2) (seconds-per-frame)))
          )
        (let ((s3-0 (the-as object (new 'stack-no-clear 'vector4w))))
          (set! (-> (the-as vector4w s3-0) quad) (the-as uint128 0))
          (when (transform-point-qword! (the-as vector4w s3-0) (-> this position s5-2))
            (when (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
              (+! (-> (the-as (pointer uint32) s3-0) 0) -32768)
              (set! (-> (the-as (pointer uint32) s3-0) 0)
                    (the-as uint (- (the-as int (-> (the-as (pointer uint32) s3-0) 0))))
                    )
              (+! (-> (the-as (pointer uint32) s3-0) 0) #x8000)
              )
            (let ((s4-1 (new
                          'stack
                          'font-context
                          *font-default-matrix*
                          (+ (/ (-> (the-as vector4w s3-0) x) 16) -2048)
                          (+ (/ (-> (the-as vector4w s3-0) y) 16) -1855)
                          0.0
                          (font-color font-color-40)
                          (font-flags shadow kerning)
                          )
                        )
                  )
              (set! (-> s4-1 scale) 0.5)
              (let ((v1-75 s4-1))
                (set! (-> v1-75 origin z) (the float (/ (-> (the-as vector4w s3-0) z) 16)))
                )
              (set! (-> s4-1 flags) (font-flags shadow kerning middle large))
              (cond
                ((and (< (- (-> *display* base-clock frame-counter) (-> this scoretimes s5-2)) (seconds 0.7))
                      (< (the-as uint 1) (-> this multiplier s5-2))
                      )
                 (set! (-> s4-1 alpha) 0.5)
                 (let ((s3-1 print-game-text))
                   (format (clear *temp-string*) "~Dx~D" (-> this scores s5-2) (-> this multiplier s5-2))
                   (s3-1 *temp-string* s4-1 #f 44 (bucket-id hud-draw-hud-alpha))
                   )
                 )
                (else
                  (set! (-> s4-1 alpha)
                        (fmax
                          0.0
                          (- 0.5
                             (* 0.3
                                (+ -0.7 (* 0.0033333334 (the float (- (-> *display* base-clock frame-counter) (-> this scoretimes s5-2)))))
                                )
                             )
                          )
                        )
                  (let ((s3-2 print-game-text))
                    (format (clear *temp-string*) "~D" (* (-> this scores s5-2) (the-as int (-> this multiplier s5-2))))
                    (s3-2 *temp-string* s4-1 #f 44 (bucket-id hud-draw-hud-alpha))
                    )
                  )
                )
              )
            )
          )
        )
      )
    (+! s5-2 1)
    (label cfg-28)
    (b! (< s5-2 14) cfg-9)
    )
  (let ((s5-3 0))
    (b! #t cfg-54 :delay (nop!))
    (label cfg-30)
    (let ((s3-3 (new 'stack-no-clear 'vector))
          (s4-2 (new 'stack 'vector4w))
          )
      (b! (< (-> this minfo s5-3 pos y) (+ -20480.0 (get-base-height *ocean-map*))) cfg-53)
      (transform-point-vector! s3-3 (the-as vector (-> this minfo s5-3)))
      (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
          (set! (-> s3-3 x) (- (-> s3-3 x)))
          )
      (+! (-> s3-3 x) -2048.0)
      (+! (-> s3-3 y) -2048.0)
      (+! (-> s3-3 x) 256.0)
      (+! (-> s3-3 y) 208.0)
      (when (and (< (-> s3-3 z) 32768.0) (< 0.0 (-> s3-3 z)))
        (cond
          ((< (-> s3-3 x) -254.0)
           )
          ((< 258.0 (-> s3-3 x))
           )
          (else
            )
          )
        )
      (set! (-> s4-2 x) (- (the int (-> s3-3 x)) (the int (* 38.0 (-> *video-params* relative-x-scale)))))
      (set! (-> s4-2 y) (+ (the int (-> s3-3 y)) -50))
      1.0
      (let ((s2-3 (min 2 (the int (* 3.0 (-> this minfo s5-3 hit-points))))))
        (let ((f0-48 (* 0.00005 (-> s3-3 z))))
          (set! (-> this reticle s2-3 scale-x) f0-48)
          (set! (-> this reticle s2-3 scale-y) f0-48)
          )
        (set! (-> this reticle s2-3 color w) (if (-> this minfo s5-3 targeted)
                                                 71
                                                 31
                                                 )
              )
        (dotimes (v1-146 3)
          (set! (-> this reticle (+ v1-146 1) pos z) #xfffff0)
          )
        (set-as-offset-from! (-> this reticle s2-3) s4-2 38 48)
        (let* ((s3-4 (-> *display* frames (-> *display* on-screen) global-buf))
               (s4-3 (-> s3-4 base))
               )
          (draw (-> this reticle s2-3) s3-4 (-> this level) #f)
          (let ((a3-6 (-> s3-4 base)))
            (when (!= s4-3 a3-6)
              (let ((v1-160 (the-as object (-> s3-4 base))))
                (set! (-> (the-as dma-packet v1-160) dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                (set! (-> (the-as dma-packet v1-160) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-160) vif1) (new 'static 'vif-tag))
                (set! (-> s3-4 base) (&+ (the-as pointer v1-160) 16))
                )
              (dma-bucket-insert-tag
                (-> *display* frames (-> *display* on-screen) bucket-group)
                (bucket-id hud-draw-hud-alpha)
                s4-3
                (the-as (pointer dma-tag) a3-6)
                )
              )
            )
          )
        )
      )
    (label cfg-53)
    (+! s5-3 1)
    (label cfg-54)
    (b! (< s5-3 (the-as int (-> this maker-idx))) cfg-30)
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values! ((this hud-wasgun))
  (logclear! (-> this flags) (hud-flags disable))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-wasgun))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-center-2) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (dotimes (v1-4 15)
    (let ((a0-4 (-> this minfo v1-4)))
      (vector-reset! (-> a0-4 pos))
      (set! (-> a0-4 hit-points) 0.0)
      (set! (-> a0-4 targeted) #f)
      )
    )
  (set! (-> this maker-idx) (the-as uint 0))
  (dotimes (v1-7 20)
    (let ((a0-7 (&+ (-> this reticle 0 color-ptr) (* v1-7 64))))
      (set! (-> a0-7 0) 255)
      (set! (-> a0-7 1) 255)
      (set! (-> a0-7 2) 255)
      (set! (-> a0-7 3) 255)
      )
    (set! (-> this reticle v1-7 pos z) #xfffff0)
    (set! (-> this reticle v1-7 pos w) 0)
    (set! (-> this reticle v1-7 scale-x) 1.0)
    (set! (-> this reticle v1-7 scale-y) 1.0)
    (set! (-> this reticle v1-7 angle) 0.0)
    (set! (-> this reticle v1-7 flags) (hud-sprite-flags hsf3))
    (set! (-> this reticle v1-7 tid) (the-as texture-id #f))
    )
  (set! (-> this reticle 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #x938)))
        )
  (set! (-> this reticle 1 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #x938)))
        )
  (set! (-> this reticle 2 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x8 :page #x938)))
        )
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x10 :page #x938)))
        )
  (set! (-> this sprites 4 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #x938)))
        )
  (set! (-> this sprites 5 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #x938)))
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf3))
  (set! (-> this sprites 4 flags) (hud-sprite-flags hsf0 hsf3))
  (set! (-> this sprites 5 flags) (hud-sprite-flags hsf3))
  (set! (-> this sprites 0 scale-x) 0.8)
  (set! (-> this sprites 0 scale-y) 0.8)
  (set! (-> this sprites 4 scale-x) 1.0)
  (set! (-> this sprites 4 scale-y) 1.0)
  (set! (-> this sprites 5 scale-x) 1.0)
  (set! (-> this sprites 5 scale-y) 1.0)
  (dotimes (s5-0 14)
    (set! (-> this scoretimes s5-0) 0)
    (alloc-string-if-needed this s5-0)
    )
  0
  (none)
  )

(defmethod event-callback ((this hud-wasgun) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('reset-state)
     (set! (-> this offscreen) (the-as uint 0))
     (set! (-> this maker-idx) (the-as uint 0))
     0
     )
    (('off-to-left)
     (logior! (-> this offscreen) (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                                      2
                                      1
                                      )
              )
     )
    (('off-to-right)
     (logior! (-> this offscreen) (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                                      1
                                      2
                                      )
              )
     )
    (('maker-update)
     (when (< (-> this maker-idx) (the-as uint 15))
       (let ((v1-12 (-> this minfo (-> this maker-idx))))
         (set! (-> v1-12 pos quad) (-> (the-as vector (-> arg3 param 0)) quad))
         (set! (-> v1-12 hit-points) (the-as float (-> arg3 param 1)))
         (set! (-> v1-12 targeted) (the-as symbol (-> arg3 param 2)))
         )
       )
     (set! (-> this maker-idx) (the-as uint (min 15 (the-as int (+ (-> this maker-idx) 1)))))
     )
    )
  ((method-of-type hud event-callback) this arg0 arg1 arg2 arg3)
  )

(defmethod hud-wasgun-method-28 ((this hud-wasgun) (arg0 int) (arg1 int) (arg2 vector))
  (let ((v1-0 0))
    (b! #t cfg-4 :delay (nop!))
    (label cfg-1)
    (b! (nonzero? (-> this scoretimes v1-0)) cfg-3 :delay (empty-form))
    (set! (-> this position v1-0 quad) (-> arg2 quad))
    (set! (-> this vel v1-0) 0.0)
    (set! (-> this multiplier v1-0) (the-as uint arg1))
    (set! (-> this scores v1-0) arg0)
    (set! (-> this scoretimes v1-0) 1)
    (b! #t cfg-6 :delay (nop!))
    (label cfg-3)
    (+! v1-0 1)
    (label cfg-4)
    (b! (< v1-0 14) cfg-1)
    )
  (label cfg-6)
  0
  (none)
  )
