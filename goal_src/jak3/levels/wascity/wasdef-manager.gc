;;-*-Lisp-*-
(in-package goal)

;; name: wasdef-manager.gc
;; name in dgo: wasdef-manager
;; dgos: WCB

(define-extern *curve-maker-entry-linear-up-red* curve2d-piecewise)
(define-extern *trail-color-curve-maker-entry* curve-color-fast)
(define-extern *curve-maker-entry-linear-trail* curve2d-fast)
(define-extern *maker-entry-trail* light-trail-composition)

;; +++hip-maker-mode
(defenum hip-maker-mode
  :type uint8
  (hmm0 0)
  (hmm1 1)
  (hmm2 2)
  (hmm3 3)
  (hmm4 4)
  (hmm5 5)
  (hmm6 6)
  (hmm7 7)
  (hmm8 8)
  (hmm9 9)
  (hmm10 10)
  )
;; ---hip-maker-mode


;; DECOMP BEGINS

(define *maker-num-alive* 0)

(define *maker-num-visible* 0)

(define *maker-num-grenades* 0)

(define *maker-last-shot-time* (the-as time-frame 0))

(define *maker-first-hit* #f)

(define *maker-first-kill* (the-as time-frame #f))

(define *maker-first-missile* (the-as time-frame #f))

(define *maker-last-vocalization* (the-as time-frame 0))

(define *wascity-alarm-pos1* (new 'static 'vector :x 6582272.0 :y 36864.0 :z -4915200.0 :w 1.0))

(define *wascity-alarm-pos2* (new 'static 'vector :x 6582272.0 :y 36864.0 :z 1638400.0 :w 1.0))

(define *wascity-defend-speech-list* (new 'static 'inline-array talker-speech-class 33
                                       (new 'static 'talker-speech-class :name "none")
                                       (new 'static 'talker-speech-class
                                         :name "dam101"
                                         :channel (gui-channel daxter)
                                         :speech #x1
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam103"
                                         :channel (gui-channel daxter)
                                         :speech #x2
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam104"
                                         :channel (gui-channel daxter)
                                         :speech #x3
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam106"
                                         :channel (gui-channel daxter)
                                         :speech #x4
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam107"
                                         :channel (gui-channel daxter)
                                         :speech #x5
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam108"
                                         :channel (gui-channel daxter)
                                         :speech #x6
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam110"
                                         :channel (gui-channel daxter)
                                         :speech #x7
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam111"
                                         :channel (gui-channel daxter)
                                         :speech #x8
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam112"
                                         :channel (gui-channel daxter)
                                         :speech #x9
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam113"
                                         :channel (gui-channel daxter)
                                         :speech #xa
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam118"
                                         :channel (gui-channel daxter)
                                         :speech #xb
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam119"
                                         :channel (gui-channel daxter)
                                         :speech #xc
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam120"
                                         :channel (gui-channel daxter)
                                         :speech #xd
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam122"
                                         :channel (gui-channel daxter)
                                         :speech #xe
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam123"
                                         :channel (gui-channel daxter)
                                         :speech #xf
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam124"
                                         :channel (gui-channel daxter)
                                         :speech #x10
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam125"
                                         :channel (gui-channel daxter)
                                         :speech #x11
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam126"
                                         :channel (gui-channel daxter)
                                         :speech #x12
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam127"
                                         :channel (gui-channel daxter)
                                         :speech #x13
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam128"
                                         :channel (gui-channel daxter)
                                         :speech #x14
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam101a"
                                         :channel (gui-channel daxter)
                                         :speech #x15
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam106a"
                                         :channel (gui-channel daxter)
                                         :speech #x16
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam107a"
                                         :channel (gui-channel daxter)
                                         :speech #x17
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam108a"
                                         :channel (gui-channel daxter)
                                         :speech #x18
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam111a"
                                         :channel (gui-channel daxter)
                                         :speech #x19
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam112a"
                                         :channel (gui-channel daxter)
                                         :speech #x1a
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam113a"
                                         :channel (gui-channel daxter)
                                         :speech #x1b
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam122a"
                                         :channel (gui-channel daxter)
                                         :speech #x1c
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam124a"
                                         :channel (gui-channel daxter)
                                         :speech #x1d
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam125a"
                                         :channel (gui-channel daxter)
                                         :speech #x1e
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam126a"
                                         :channel (gui-channel daxter)
                                         :speech #x1f
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dam127a"
                                         :channel (gui-channel daxter)
                                         :speech #x20
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       )
        )

(deftype task-manager-wascity-defend (task-manager)
  ((self                    task-manager-wascity-defend :override)
   (wascity-defend-entity   entity)
   (check-timer             time-frame)
   (actor-group             (pointer actor-group))
   (actor-group-count       int32)
   (cur-group               int8)
   (facing-city?            symbol)
   (failed                  symbol)
   (completed               symbol)
   (miss-count              int16)
   (last-miss-count         int16)
   (launch-time             time-frame)
   (win-time                time-frame)
   (last-hit-time           time-frame)
   (added-points-time       time-frame)
   (point-queue             int16)
   (skeet-hit               int16)
   (shot-count-at-last-hit  int16)
   (bonus-mult              int16)
   (numshots                int16)
   (queue-time              int32)
   (event-length            time-frame)
   (event-time              time-frame)
   (wave                    int32)
   (event                   int32)
   (wct                     handle)
   (score                   int32)
   (hud-score               handle)
   (hud-goal                handle)
   (hud-miss                handle)
   (hud-reticle             handle)
   (hud-damage              handle)
   (hud-active?             symbol)
   (out-of-turret?          symbol)
   (sent-event-complete?    symbol)
   (time-out-of-turret      time-frame)
   (alarm                   sound-id                     :offset 448)
   )
  (:methods
    (task-manager-wascity-defend-method-32 (_type_) none)
    (task-manager-wascity-defend-method-33 (_type_) none)
    (task-manager-wascity-defend-method-34 (_type_) none)
    (task-manager-wascity-defend-method-35 (_type_) none)
    )
  )


(defskelgroup skel-maker dm-robot dm-robot-lod0-jg dm-robot-idle-ja
              ((dm-robot-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 45 0 160)
              :shadow dm-robot-shadow-mg
              )

(define *maker-debris-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 6 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 10 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 12 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 14 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 19 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 20 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 21 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 22 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 23 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 24 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 25 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 27 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 29 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 31 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 33 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 37 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 39 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 40 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 41 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 42 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 43 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 44 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 46 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 48 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 50 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 51 :group "skel-dm-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 52 :group "skel-dm-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 53 :group "skel-dm-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 54 :group "skel-dm-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 55 :group "skel-dm-debris-d")
      )
    :collide-spec (collide-spec backgnd)
    :sound-hit (static-sound-name "dm-debris")
    )
  )

(when (or (zero? *curve-maker-entry-linear-up-red*) (!= loading-level global))
  (set! *curve-maker-entry-linear-up-red* (new 'loading-level 'curve2d-piecewise))
  (curve2d-piecewise-method-10 *curve-maker-entry-linear-up-red* 2 'loading-level (the-as int #f))
  )

(set! (-> *curve-maker-entry-linear-up-red* pts data 0 first) 0.0)

(set! (-> *curve-maker-entry-linear-up-red* pts data 0 second) 0.3)

(set! (-> *curve-maker-entry-linear-up-red* pts data 1 first) 1.0)

(set! (-> *curve-maker-entry-linear-up-red* pts data 1 second) 1.0)

(if #t
    (set! *trail-color-curve-maker-entry* (new 'static 'curve-color-fast
                                            :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                            :ys (new 'static 'inline-array vector 4
                                              (new 'static 'vector :x 1.0 :y 0.5 :z 1.0 :w 128.0)
                                              (new 'static 'vector :x 0.7 :z 1.0 :w 128.0)
                                              (new 'static 'vector :x 0.7 :z 1.0 :w 128.0)
                                              (new 'static 'vector :x 0.7 :z 1.0 :w 128.0)
                                              )
                                            :one-over-x-deltas (new 'static 'vector :x 5.0 :y 1.25 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *curve-maker-entry-linear-trail* (new 'static 'curve2d-fast
                                             :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                             :ys (new 'static 'vector :x 2.0 :y 7.0 :z 8.0 :w 9.0)
                                             :one-over-x-deltas (new 'static 'vector :x 5.0 :y 1.0 :z 1.0 :w 1.0)
                                             )
          )
    )

(if (or (zero? *maker-entry-trail*) (!= loading-level global))
    (set! *maker-entry-trail* (new 'loading-level 'light-trail-composition))
    )

(set! (-> *maker-entry-trail* color-mode) (the-as uint 0))

(set! (-> *maker-entry-trail* color-repeat-dist) 40960.0)

(set! (-> *maker-entry-trail* alpha-1-mode) (the-as uint 0))

(set! (-> *maker-entry-trail* alpha-2-mode) (the-as uint 1))

(set! (-> *maker-entry-trail* base-alpha) 0.5)

(set! (-> *maker-entry-trail* alpha-repeat-dist) 6144.0)

(set! (-> *maker-entry-trail* width-mode) (the-as uint 2))

(set! (-> *maker-entry-trail* base-width) 8192.0)

(set! (-> *maker-entry-trail* width-repeat-dist) 40960.0)

(set! (-> *maker-entry-trail* uv-mode) (the-as uint 0))

(set! (-> *maker-entry-trail* uv-repeat-dist) 16384000.0)

(set! (-> *maker-entry-trail* lie-mode) (the-as uint 0))

(set! (-> *maker-entry-trail* max-age) (seconds 0.5))

(if #f
    (set! (-> *maker-entry-trail* tex-id)
          (the-as uint (lookup-texture-id-by-name (the-as string #f) (the-as string #f)))
          )
    (set! (-> *maker-entry-trail* tex-id) (the-as uint #x100300))
    )

(set! (-> *maker-entry-trail* width-curve) (the-as curve2d-piecewise *curve-maker-entry-linear-trail*))

(set! (-> *maker-entry-trail* color-curve) (the-as curve-color-piecewise *trail-color-curve-maker-entry*))

(set! (-> *maker-entry-trail* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

(set! (-> *maker-entry-trail* alpha-curve-2) *curve-maker-entry-linear-up-red*)

(set! (-> *maker-entry-trail* zbuffer?) #f)

(set! (-> *maker-entry-trail* lie-vector quad) (-> *up-vector* quad))

(set! (-> *maker-entry-trail* use-tape-mode?) #f)

(set! (-> *maker-entry-trail* blend-mode) (the-as uint 1))

(set! (-> *maker-entry-trail* frame-stagger) (the-as uint 1))

(deftype hip-maker-event (structure)
  ((event-length  uint32)
   (path-idx      uint32)
   (mode          hip-maker-mode)
   (angle         float)
   (speed         float)
   )
  )


(define *maker-data*
  (the-as (array (array hip-maker-event))
    (new 'static 'boxed-array :type array
      (new 'static 'boxed-array :type hip-maker-event
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm7) :angle 4551.1113 :speed 81920.0)
        (new 'static 'hip-maker-event :event-length #x384 :path-idx #x3 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event :event-length #x7c38 :path-idx #x6a :mode (hip-maker-mode hmm3))
        (new 'static 'hip-maker-event :event-length #xe10 :path-idx #xc :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x12c
          :path-idx #x1
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #xbb8 :path-idx #xa :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x258
          :path-idx #x2
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #xbb8 :path-idx #xa :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm1))
        )
      (new 'static 'boxed-array :type hip-maker-event
        (new 'static 'hip-maker-event
          :event-length #x708
          :path-idx #x6
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x258 :path-idx #x2 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event :event-length #x93a8 :path-idx #x7e :mode (hip-maker-mode hmm3))
        (new 'static 'hip-maker-event :event-length #x5dc :path-idx #x5 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x834
          :path-idx #x7
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x5dc :path-idx #x5 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x960
          :path-idx #x8
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm1))
        )
      (new 'static 'boxed-array :type hip-maker-event
        (new 'static 'hip-maker-event
          :event-length #xa8c
          :path-idx #x9
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x708 :path-idx #x6 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #xbb8
          :path-idx #xa
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x4b0 :path-idx #x4 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #xce4
          :path-idx #xb
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm1))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm2))
        )
      (new 'static 'boxed-array :type hip-maker-event
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm4))
        (new 'static 'hip-maker-event :event-length #x7d64 :path-idx #x6b :mode (hip-maker-mode hmm3))
        (new 'static 'hip-maker-event :event-length #x258 :path-idx #x2 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x384
          :path-idx #x3
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x1194 :path-idx #xf :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x4b0
          :path-idx #x4
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x1194 :path-idx #xf :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x5dc
          :path-idx #x5
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #x12c :path-idx #x1 :mode (hip-maker-mode hmm1))
        (new 'static 'hip-maker-event :event-length #x8ef8 :path-idx #x7a :mode (hip-maker-mode hmm3))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm1))
        (new 'static 'hip-maker-event :event-length #x9150 :path-idx #x7c :mode (hip-maker-mode hmm3))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm2))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm5))
        (new 'static 'hip-maker-event :event-length #x20d :path-idx #x1 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event)
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm10))
        (new 'static 'hip-maker-event :event-length #x3a980 :path-idx #x320 :mode (hip-maker-mode hmm6))
        )
      (new 'static 'boxed-array :type hip-maker-event
        (new 'static 'hip-maker-event :event-length #x3a980 :path-idx #x320 :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event :mode (hip-maker-mode hmm7) :angle 4551.1113 :speed 81920.0)
        (new 'static 'hip-maker-event :event-length #xbb8 :path-idx #xa :mode (hip-maker-mode hmm6))
        (new 'static 'hip-maker-event
          :event-length #x12c
          :path-idx #x1
          :mode (hip-maker-mode hmm7)
          :angle 4551.1113
          :speed 81920.0
          )
        (new 'static 'hip-maker-event :event-length #xbb8 :path-idx #xa :mode (hip-maker-mode hmm6))
        )
      )
    )
  )

(deftype maker-damage (structure)
  ((part     sparticle-launch-control)
   (pos      vector  :inline)
   (jnt      uint8)
   (active   symbol)
   (counter  uint8)
   )
  )


(deftype maker (process-focusable)
  ((parent                (pointer task-manager-wascity-defend) :override)
   (root                  collide-shape-moving                  :override)
   (forw                  vector                                 :inline)
   (ppos                  vector                                 :inline)
   (pvel                  vector                                 :inline)
   (pacc                  vector                                 :inline)
   (speed-mod             float)
   (tentacle-speed        float)
   (rot-vel               float)
   (rot-acc               float)
   (visible-explode-time  time-frame)
   (birth-time            time-frame)
   (footstep-time         time-frame)
   (last-hit-time         time-frame)
   (last-fire-time        time-frame)
   (last-laser-fire-time  time-frame)
   (audible-explode-time  time-frame)
   (exploded-time         time-frame)
   (mult                  uint8)
   (score                 uint16)
   (minimap               connection-minimap)
   (maker-sound           sound-id)
   (maker-sound-playing?  symbol)
   (explosion-sound-id    sound-id)
   (made-splash?          symbol)
   (head-rot              quaternion                             :inline)
   (head-jm               joint-mod)
   (head-tilt             float)
   (head-tilt-vel         float)
   (head-tilt-err         float)
   (head-yaw              float)
   (head-yaw-vel          float)
   (head-yaw-err          float)
   (walk-idle-blend       float)
   (idle-ball-blend       float)
   (hit-points            float)
   (num-shots             int8)
   (damage-idx            int8)
   (wait-time             uint32)
   (reticle-on?           symbol)
   (kick-your-ass-count   uint8)
   (kick-your-ass-string  uint8)
   (prim-targeted         int8)
   (damage-info           maker-damage                           5 :inline)
   (path-idx              int16)
   (path-pt               int16)
   (path-len              int16)
   (seek-pos              vector                                 :inline)
   (mode                  uint8)
   (trail-handle          handle)
   )
  (:state-methods
    flying
    explode
    walking
    standup
    )
  (:methods
    (maker-method-32 (_type_) none)
    (init-collision! (_type_) none)
    (maker-method-34 (_type_) none)
    (maker-method-35 (_type_) none)
    (maker-method-36 (_type_) none)
    (maker-method-37 (_type_) none)
    (maker-method-38 (_type_) none)
    (maker-method-39 (_type_) none)
    (find-ground (_type_ collide-query collide-spec float float float process symbol) pat-surface)
    (maker-method-41 (_type_ vector) float)
    (maker-method-42 (_type_) none)
    )
  )


(define *maker-rigid-body-constants* (new 'static 'rigid-body-object-constants
                                       :info (new 'static 'rigid-body-info
                                         :mass 1.5
                                         :inv-mass 0.6666667
                                         :linear-damping 0.97
                                         :angular-damping 0.94
                                         :bounce-factor 0.75
                                         :friction-factor 0.99
                                         :cm-offset-joint (new 'static 'vector :w 1.0)
                                         :inertial-tensor-box (new 'static 'array meters 3 (meters 2.5) (meters 5) (meters 2.5))
                                         )
                                       :extra (new 'static 'rigid-body-object-extra-info
                                         :max-time-step 0.033333335
                                         :gravity (meters 20)
                                         :idle-distance (meters 200)
                                         :attack-force-scale 2.0
                                         )
                                       :name '*maker-rigid-body-constants*
                                       )
        )

(defmethod maker-method-41 ((this maker) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'collide-query))
          (s5-0 (new 'stack-no-clear 'vector))
          )
      (set! (-> s4-0 start-pos quad) (-> arg0 quad))
      (+! (-> s4-0 start-pos y) 81920.0)
      (set-vector! (-> s4-0 move-dist) 0.0 -163840.0 0.0 1.0)
      (let ((v1-3 s4-0))
        (set! (-> v1-3 radius) 40.96)
        (set! (-> v1-3 collide-with) (collide-spec backgnd))
        (set! (-> v1-3 ignore-process0) #f)
        (set! (-> v1-3 ignore-process1) #f)
        (set! (-> v1-3 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-3 action-mask) (collide-action solid))
        )
      (let ((f0-7 (fill-and-probe-using-line-sphere *collide-cache* s4-0)))
        (when (< 0.0 f0-7)
          (let ((a0-11 s5-0))
            (let ((v1-6 (-> s4-0 start-pos)))
              (let ((a1-2 (-> s4-0 move-dist)))
                (let ((a2-0 f0-7))
                  (.mov vf7 a2-0)
                  )
                (.lvf vf5 (&-> a1-2 quad))
                )
              (.lvf vf4 (&-> v1-6 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a0-11 quad) vf6)
            )
          )
        )
      (- (-> s5-0 y) (-> arg0 y))
      )
    )
  )

;; WARN: Return type mismatch float vs none.
(defmethod maker-method-42 ((this maker))
  (let* ((a1-0 (-> this node-list data 24))
         (a1-1 (vector<-cspace! (new 'stack-no-clear 'vector) a1-0))
         )
    (maker-method-41 this a1-1)
    )
  (let* ((a1-2 (-> this node-list data 43))
         (a1-3 (vector<-cspace! (new 'stack-no-clear 'vector) a1-2))
         )
    (maker-method-41 this a1-3)
    )
  (none)
  )

(defmethod find-ground ((this maker)
                       (arg0 collide-query)
                       (arg1 collide-spec)
                       (arg2 float)
                       (arg3 float)
                       (arg4 float)
                       (arg5 process)
                       (arg6 symbol)
                       )
  (when (find-ground (-> this root) arg0 arg1 arg2 arg3 arg4 arg5)
    (let ((v0-1 (-> arg0 best-other-tri pat)))
      (set! (-> this root ground-pat) v0-1)
      v0-1
      )
    )
  )

(define *maker-damage-joint-array* (new 'static 'boxed-array :type int32 53 22 41 50 50 23 42 24 43))

;; WARN: Return type mismatch symbol vs none.
(defmethod init-collision! ((this maker))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 22) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 23))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy obstacle))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 184320.0 0.0 184320.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-11 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 50)
      (set-vector! (-> v1-11 local-sphere) 0.0 0.0 20480.0 69632.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 50)
      (set-vector! (-> v1-13 local-sphere) 0.0 73728.0 0.0 20480.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 50)
      (set-vector! (-> v1-15 local-sphere) 0.0 57344.0 12288.0 20480.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 50)
      (set-vector! (-> v1-17 local-sphere) 0.0 40960.0 24576.0 20480.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 3))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 50)
      (set-vector! (-> v1-19 local-sphere) 20480.0 0.0 40960.0 40960.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 50)
      (set-vector! (-> v1-21 local-sphere) -20480.0 0.0 40960.0 40960.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-23 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-23 prim-core action) (collide-action solid))
      (set! (-> v1-23 transform-index) 22)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-25 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-25 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-25 prim-core action) (collide-action solid))
      (set! (-> v1-25 transform-index) 41)
      (set-vector! (-> v1-25 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-27 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> v1-27 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-27 prim-core action) (collide-action solid))
      (set! (-> v1-27 transform-index) 23)
      (set-vector! (-> v1-27 local-sphere) 0.0 20480.0 0.0 20480.0)
      )
    (let ((v1-29 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> v1-29 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-29 prim-core action) (collide-action solid))
      (set! (-> v1-29 transform-index) 23)
      (set-vector! (-> v1-29 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-31 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 6))))
      (set! (-> v1-31 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-31 prim-core action) (collide-action solid))
      (set! (-> v1-31 transform-index) 42)
      (set-vector! (-> v1-31 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-33 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 6))))
      (set! (-> v1-33 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-33 prim-core action) (collide-action solid))
      (set! (-> v1-33 transform-index) 42)
      (set-vector! (-> v1-33 local-sphere) 0.0 20480.0 0.0 20480.0)
      )
    (let ((v1-35 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-35 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-35 prim-core action) (collide-action solid))
      (set! (-> v1-35 transform-index) 22)
      (set-vector! (-> v1-35 local-sphere) 0.0 16384.0 0.0 20480.0)
      )
    (let ((v1-37 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-37 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-37 prim-core action) (collide-action solid))
      (set! (-> v1-37 transform-index) 41)
      (set-vector! (-> v1-37 local-sphere) 0.0 -16384.0 0.0 20480.0)
      )
    (let ((v1-39 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-39 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-39 prim-core action) (collide-action solid))
      (set! (-> v1-39 transform-index) 22)
      (set-vector! (-> v1-39 local-sphere) 0.0 32768.0 0.0 20480.0)
      )
    (let ((v1-41 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-41 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-41 prim-core action) (collide-action solid))
      (set! (-> v1-41 transform-index) 41)
      (set-vector! (-> v1-41 local-sphere) 0.0 -32768.0 0.0 20480.0)
      )
    (let ((v1-43 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-43 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-43 prim-core action) (collide-action solid))
      (set! (-> v1-43 transform-index) 22)
      (set-vector! (-> v1-43 local-sphere) 0.0 49152.0 0.0 20480.0)
      )
    (let ((v1-45 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-45 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-45 prim-core action) (collide-action solid))
      (set! (-> v1-45 transform-index) 41)
      (set-vector! (-> v1-45 local-sphere) 0.0 -49152.0 0.0 20480.0)
      )
    (let ((v1-47 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-47 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-47 prim-core action) (collide-action solid))
      (set! (-> v1-47 transform-index) 22)
      (set-vector! (-> v1-47 local-sphere) 0.0 65536.0 0.0 20480.0)
      )
    (let ((v1-49 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-49 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-49 prim-core action) (collide-action solid))
      (set! (-> v1-49 transform-index) 41)
      (set-vector! (-> v1-49 local-sphere) 0.0 -65536.0 0.0 20480.0)
      )
    (let ((v1-51 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 7))))
      (set! (-> v1-51 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-51 prim-core action) (collide-action solid))
      (set! (-> v1-51 transform-index) 24)
      (set-vector! (-> v1-51 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-53 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-53 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-53 prim-core action) (collide-action solid))
      (set! (-> v1-53 transform-index) 43)
      (set-vector! (-> v1-53 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-56 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-56 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-56 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (set! (-> this root event-self) 'touched)
  (none)
  )

(defmethod get-trans ((this maker) (arg0 int))
  "Get the `trans` for this process."
  (-> this root trans)
  )

(define *maker-joint-array*
  (new 'static 'boxed-array :type int32 20 21 22 23 24 25 27 29 39 40 41 42 43 44 46 48 50 51 52 53 54 55)
  )

(defun maker-world-to-local-vec! ((arg0 vector) (arg1 vector) (arg2 matrix))
  (let ((s5-0 (new 'stack-no-clear 'matrix)))
    (matrix-4x4-inverse! s5-0 arg2)
    (vector-rotate*! arg0 arg1 s5-0)
    (vector+! arg0 arg0 (-> s5-0 trans))
    )
  )

(define *say-iteration-counter* 0)

(define *say-timestamp* (the-as time-frame 0))

;; WARN: Return type mismatch time-frame vs none.
(defun wasdef-voiceover ((arg0 int))
  (cond
    ((= arg0 106)
     (if (not (logtest? *say-iteration-counter* 1))
         (talker-spawn-func (-> *wascity-defend-speech-list* 22) *entity-pool* (target-pos 0) (the-as region #f))
         (talker-spawn-func (-> *wascity-defend-speech-list* 21) *entity-pool* (target-pos 0) (the-as region #f))
         )
     (set! *say-iteration-counter* (+ *say-iteration-counter* 1))
     )
    ((= arg0 125)
     (if (time-elapsed? *say-timestamp* (seconds 3))
         (talker-spawn-func (-> *wascity-defend-speech-list* 30) *entity-pool* (target-pos 0) (the-as region #f))
         )
     )
    ((= arg0 126)
     (talker-spawn-func (-> *wascity-defend-speech-list* 31) *entity-pool* (target-pos 0) (the-as region #f))
     )
    ((= arg0 107)
     (talker-spawn-func (-> *wascity-defend-speech-list* 23) *entity-pool* (target-pos 0) (the-as region #f))
     )
    ((= arg0 122)
     (talker-spawn-func (-> *wascity-defend-speech-list* 28) *entity-pool* (target-pos 0) (the-as region #f))
     )
    ((= arg0 124)
     (talker-spawn-func (-> *wascity-defend-speech-list* 29) *entity-pool* (target-pos 0) (the-as region #f))
     )
    (else
      (format 0 "need to put in wasdef-voiceover for ~d~%" arg0)
      )
    )
  (set! *say-timestamp* (current-time))
  (none)
  )

;; WARN: disable def twice: 439. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defbehavior maker-standard-event-handler maker ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('touched 'touch)
     #f
     )
    (('is-section-shot)
     (let* ((a1-2 (-> arg3 param 0))
            (v1-2 (max 0 (min 4 (the-as int a1-2))))
            )
       (set! (-> self prim-targeted) -1)
       (-> self damage-info v1-2 active)
       )
     )
    (('section-targeted)
     (let ((a0-13 (-> arg3 param 0)))
       (set! v0-0 (max 0 (min 4 (the-as int a0-13))))
       )
     (set! (-> self prim-targeted) (the-as int v0-0))
     v0-0
     )
    (('attack)
     (let ((gp-0 (the-as object (-> arg3 param 1))))
       (let ((s5-0 (the-as object (-> arg3 param 0))))
         (when (time-elapsed? (-> self last-hit-time) (seconds 1))
           (when #f
             (let ((v1-12 (rand-vu-int-range 0 2)))
               (cond
                 ((zero? v1-12)
                  (let ((v1-15 (ja-channel-float! (the-as art-joint-anim dm-robot-knock1-ja) 0.0 0.0 0.0)))
                    (when v1-15
                      (set! (-> self skel interp-select 0) (shl #x20000 32))
                      (set! (-> self skel interp-select 1) 0)
                      (set! (-> v1-15 param 0) 1.0)
                      (set! (-> v1-15 param 1) 1.0)
                      (set! (-> v1-15 param 2) 2.0)
                      (set! (-> v1-15 num-func) num-func-interp1-play!)
                      )
                    )
                  )
                 ((= v1-12 1)
                  (let ((v1-18 (ja-channel-float! (the-as art-joint-anim dm-robot-knock2-ja) 0.0 0.0 0.0)))
                    (when v1-18
                      (set! (-> self skel interp-select 0) (shl #x20000 32))
                      (set! (-> self skel interp-select 1) 0)
                      (set! (-> v1-18 param 0) 1.0)
                      (set! (-> v1-18 param 1) 1.0)
                      (set! (-> v1-18 param 2) 2.0)
                      (set! (-> v1-18 num-func) num-func-interp1-play!)
                      )
                    )
                  )
                 ((= v1-12 2)
                  (let ((v1-21 (ja-channel-float! (the-as art-joint-anim dm-robot-knock3-ja) 0.0 0.0 0.0)))
                    (when v1-21
                      (set! (-> self skel interp-select 0) (shl #x20000 32))
                      (set! (-> self skel interp-select 1) 0)
                      (set! (-> v1-21 param 0) 1.0)
                      (set! (-> v1-21 param 1) 1.0)
                      (set! (-> v1-21 param 2) 2.0)
                      (set! (-> v1-21 num-func) num-func-interp1-play!)
                      )
                    )
                  )
                 )
               )
             )
           (set-time! (-> self last-hit-time))
           (set! (-> self tentacle-speed) 5.0)
           )
         (when (the-as uint s5-0)
           (let ((a0-52 (-> (the-as touching-shapes-entry s5-0) head)))
             (when a0-52
               (let ((s4-0 (get-touched-prim a0-52 (-> self root) (the-as touching-shapes-entry s5-0))))
                 0
                 0
                 (let ((s5-1 (-> self damage-idx)))
                   (if s4-0
                       (set! s5-1 (max 0 (min 4 (the-as int (-> s4-0 prim-id)))))
                       )
                   (sound-play "flesh-impact")
                   (when (and s4-0 (and (< s5-1 5) (not (-> self damage-info s5-1 active))))
                     (let ((s4-1 (-> *maker-damage-joint-array* (max 0 (min 4 (the-as int (-> s4-0 prim-id)))))))
                       (+! (-> self damage-info s5-1 counter) 1)
                       (when (time-elapsed? *maker-last-vocalization* (seconds 8))
                         (sound-play "dm-get-hit")
                         (set! *maker-last-vocalization* (current-time))
                         )
                       (when (not *maker-first-hit*)
                         (wasdef-voiceover 125)
                         (set! *maker-first-hit* #t)
                         )
                       (let ((s3-2 (new 'stack-no-clear 'vector)))
                         (let ((a2-7 (new 'stack-no-clear 'matrix)))
                           (let* ((a3-6 (-> self node-list data s4-1 bone transform))
                                  (v1-65 (-> a3-6 rvec quad))
                                  (a0-70 (-> a3-6 uvec quad))
                                  (a1-14 (-> a3-6 fvec quad))
                                  (a3-7 (-> a3-6 trans quad))
                                  )
                             (set! (-> a2-7 rvec quad) v1-65)
                             (set! (-> a2-7 uvec quad) a0-70)
                             (set! (-> a2-7 fvec quad) a1-14)
                             (set! (-> a2-7 trans quad) a3-7)
                             )
                           (maker-world-to-local-vec! s3-2 (-> (the-as attack-info gp-0) trans) a2-7)
                           )
                         (when (< (the-as uint 2) (-> self damage-info s5-1 counter))
                           (set! (-> self damage-info s5-1 active) #t)
                           (set! (-> self damage-info s5-1 jnt) (the-as uint s4-1))
                           (set! (-> (the-as (pointer uint128) (+ (the-as uint (-> self damage-info 0 pos)) (* 48 s5-1))))
                                 (-> s3-2 quad)
                                 )
                           (+! (-> self damage-idx) 1)
                           )
                         )
                       )
                     )
                   )
                 )
               )
             )
           )
         )
       (set! (-> self head-tilt-vel) (rand-vu-float-range -81920.0 81920.0))
       (set! (-> self head-yaw-vel) (rand-vu-float-range -81920.0 81920.0))
       (if (< 0.0 (-> self hit-points))
           (set-time! (-> self state-time))
           )
       (let ((v1-79 #t))
         (dotimes (a0-84 5)
           (if (not (-> self damage-info a0-84 active))
               (set! v1-79 #f)
               )
           )
         (set! (-> self hit-points) (if v1-79
                                        0.0
                                        1.0
                                        )
               )
         )
       (cond
         ((logtest? (-> *part-group-id-table* 538 flags) (sp-group-flag sp13))
          (set! (-> *launch-matrix* trans quad) (-> (the-as attack-info gp-0) trans quad))
          (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 538))
          )
         (else
           (set! (-> *launch-matrix* trans quad) (-> (the-as attack-info gp-0) trans quad))
           (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 538))
           )
         )
       )
     (sound-play "flesh-impact")
     (cond
       ((= (-> self hit-points) 0.0)
        (when (zero? (-> self exploded-time))
          (set-time! (-> self exploded-time))
          (set! v0-0 (add-process *gui-control* self (gui-channel background) (gui-action queue) "dmexplo" -99.0 0))
          (set! (-> self explosion-sound-id) (the-as sound-id v0-0))
          v0-0
          )
        )
       (else
         #f
         )
       )
     )
    )
  )

(defun get-ocean-floor-height ((arg0 vector))
  (let ((v1-0 (new 'stack-no-clear 'vector)))
    0.0
    (set-vector! v1-0 6583861.5 0.0 -1960301.9 1.0)
    (let ((f0-5 (vector-vector-xz-distance v1-0 arg0)))
      (- 36864.0 (* 0.1 f0-5))
      )
    )
  )

;; WARN: Return type mismatch enemy vs maker.
(defmethod relocate ((this maker) (offset int))
  (if (nonzero? (-> this head-jm))
      (&+! (-> this head-jm) offset)
      )
  (dotimes (v1-4 5)
    (if (nonzero? (-> this damage-info v1-4 part))
        (&+! (-> this damage-info v1-4 part) offset)
        )
    )
  (the-as maker ((method-of-type enemy relocate) (the-as enemy this) offset))
  )

(defmethod maker-method-35 ((this maker))
  (let ((f0-0 0.0))
    0.0
    0.0
    0.0
    (let* ((f3-0 (- f0-0 (-> this head-tilt)))
           (f2-0 (- (-> this head-tilt-vel)))
           (f2-3 (* 0.5 (+ (* 100.0 f3-0) (* 10.0 f2-0))))
           )
      (+! (-> this head-tilt-vel) (* f2-3 (seconds-per-frame)))
      )
    (+! (-> this head-tilt) (* (-> this head-tilt-vel) (seconds-per-frame)))
    (let* ((f2-7 (- f0-0 (-> this head-yaw)))
           (f1-11 (- (-> this head-yaw-vel)))
           (f1-14 (* 0.5 (+ (* 100.0 f2-7) (* 10.0 f1-11))))
           )
      (+! (-> this head-yaw-vel) (* f1-14 (seconds-per-frame)))
      )
    )
  (+! (-> this head-yaw) (* (-> this head-yaw-vel) (seconds-per-frame)))
  (set! (-> this head-tilt) (fmax -16384.0 (fmin 16384.0 (-> this head-tilt))))
  (set! (-> this head-yaw) (fmax -16384.0 (fmin 16384.0 (-> this head-yaw))))
  (let ((s5-0 (new 'stack-no-clear 'quaternion))
        (s4-0 (new 'stack-no-clear 'quaternion))
        )
    (quaternion-axis-angle! s5-0 1.0 0.0 0.0 (-> this head-tilt))
    (quaternion-axis-angle! s4-0 0.0 1.0 0.0 (-> this head-yaw))
    (quaternion*! (-> this head-jm quat) s5-0 s4-0)
    )
  0
  (none)
  )

(defmethod maker-method-36 ((this maker))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s4-0 (-> this node-list data 50))
           (s5-0 (vector<-cspace! (new 'stack-no-clear 'vector) s4-0))
           (s4-1 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s4-0 bone transform fvec) 1.0))
           (s3-0 (new 'stack-no-clear 'vector))
           )
      (set! (-> s3-0 quad) (-> (target-pos 0) quad))
      (new 'stack-no-clear 'vector)
      0.0
      0.0
      (let ((f30-0 0.0))
        (vector-! s4-1 (target-pos 0) s5-0)
        (set! (-> s4-1 y) 0.0)
        (vector-normalize! s4-1 1.0)
        (let ((a1-3 s5-0))
          (let ((v1-6 s5-0))
            (let ((a0-7 s4-1))
              (let ((a2-2 122880.0))
                (.mov vf7 a2-2)
                )
              (.lvf vf5 (&-> a0-7 quad))
              )
            (.lvf vf4 (&-> v1-6 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a1-3 quad) vf6)
          )
        (let* ((f0-5 (* 0.18333334 (vector-vector-xz-distance s5-0 s3-0)))
               (f28-1 (fmax 163840.0 (fmin 450560.0 f0-5)))
               )
          (let ((f0-8 (/ (vector-vector-xz-distance s5-0 s3-0) f28-1)))
            (if (< 0.0 f0-8)
                (set! f30-0 (+ (/ (- (-> s3-0 y) (-> s5-0 y)) f0-8) (* 20480.0 f0-8)))
                )
            )
          (cond
            ((>= (-> this root trans z) -1937408.0)
             (let ((s3-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
               (let ((s2-3 (rand-vu-sphere-point-uniform! (new 'stack-no-clear 'vector) (rand-vu-float-range 204800.0 409600.0))))
                 (new 'stack-no-clear 'vector)
                 (vector-normalize! s4-1 f28-1)
                 (set! (-> s3-1 ent) (-> this entity))
                 (set! (-> s3-1 charge) 1.0)
                 (set! (-> s3-1 options) (projectile-options))
                 (logclear! (-> s3-1 options) (projectile-options po14 po15 po16))
                 (set! (-> s3-1 pos quad) (-> s5-0 quad))
                 (set! (-> s3-1 vel quad) (-> s2-3 quad))
                 )
               (set! (-> s3-1 notify-handle) (the-as handle #f))
               (set! (-> s3-1 owner-handle) (the-as handle #f))
               (set! (-> s3-1 target-handle) (the-as handle #f))
               (set! (-> s3-1 target-pos quad) (the-as uint128 0))
               (set! (-> s3-1 ignore-handle) (process->handle this))
               (let* ((v1-26 *game-info*)
                      (a0-21 (+ (-> v1-26 attack-id) 1))
                      )
                 (set! (-> v1-26 attack-id) a0-21)
                 (set! (-> s3-1 attack-id) a0-21)
                 )
               (set! (-> s3-1 timeout) (seconds 4))
               (let ((s5-1 (new 'static 'vector4w)))
                 (+! (-> s5-1 x) 1)
                 (when (< 2 (-> s5-1 x))
                   (sound-play "dm-throw")
                   (set! (-> s5-1 x) 0)
                   0
                   )
                 )
               (spawn-projectile dm-flyer-shot s3-1 this *default-dead-pool*)
               )
             )
            (else
              (vector-normalize! s4-1 f28-1)
              (+! (-> s4-1 y) f30-0)
              (let ((s3-2 (new 'stack-no-clear 'projectile-init-by-other-params)))
                (set! (-> s3-2 ent) (-> this entity))
                (set! (-> s3-2 charge) 1.0)
                (set! (-> s3-2 options) (projectile-options))
                (logclear! (-> s3-2 options) (projectile-options po14 po15 po16))
                (set! (-> s3-2 pos quad) (-> s5-0 quad))
                (set! (-> s3-2 vel quad) (-> s4-1 quad))
                (set! (-> s3-2 notify-handle) (the-as handle #f))
                (set! (-> s3-2 owner-handle) (process->handle this))
                (set! (-> s3-2 target-handle) (the-as handle #f))
                (set! (-> s3-2 target-pos quad) (-> (target-pos 0) quad))
                (set! (-> s3-2 ignore-handle) (process->handle this))
                (let* ((v1-50 *game-info*)
                       (a0-41 (+ (-> v1-50 attack-id) 1))
                       )
                  (set! (-> v1-50 attack-id) a0-41)
                  (set! (-> s3-2 attack-id) a0-41)
                  )
                (set! (-> s3-2 timeout) (seconds 4))
                (sound-play "ball-launch")
                (spawn-projectile maker-grenade s3-2 this *default-dead-pool*)
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

(define *maker-close* 40955904.0)

(define *maker-close-count* 0)

(defmethod maker-method-39 ((this maker))
  (let ((s4-0 #f))
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      0.0
      (let ((s5-0 (ppointer->process (-> this parent))))
        (transform-point-vector! s3-0 (-> this root trans))
        (let ((f0-1 (vector-vector-distance (target-pos 0) (-> this root trans))))
          (+! (-> s3-0 x) -2048.0)
          (+! (-> s3-0 y) -2048.0)
          (let ((v1-11 (and (and (-> this next-state) (let ((v1-10 (-> this next-state name)))
                                                        (or (= v1-10 'walking) (= v1-10 'standup))
                                                        )
                                 )
                            (< 0.0 (-> s3-0 z))
                            (< (the float (- 2 (the int (* 0.00256 (-> s3-0 z))))) (-> s3-0 x))
                            (< (-> s3-0 x) (the float (+ (the int (* 0.00256 (-> s3-0 z))) 2)))
                            )
                       )
                )
            (when (< (the-as uint 10) (the-as uint *maker-close-count*))
              (set! *maker-close-count* 0)
              (set! *maker-close* 40955904.0)
              )
            (when (and v1-11 (>= (+ 81920.0 *maker-close*) f0-1))
              (set! *maker-close* f0-1)
              (set! *maker-close-count* 0)
              (set! s4-0 #t)
              )
            (when (< *maker-close* f0-1)
              (set! *maker-close-count* (+ *maker-close-count* 1))
              (set! *maker-close* (+ 40960.0 *maker-close*))
              )
            (when #t
              (cond
                ((and (< (-> s3-0 z) 32768.0) (< 0.0 (-> s3-0 z)) (< (-> s3-0 x) -254.0))
                 (send-event (handle->process (-> s5-0 hud-reticle)) 'off-to-left)
                 )
                ((and (< (-> s3-0 z) 32768.0) (< 0.0 (-> s3-0 z)) (< 258.0 (-> s3-0 x)))
                 (send-event (handle->process (-> s5-0 hud-reticle)) 'off-to-right)
                 )
                (v1-11
                  (set! (-> this reticle-on?) #t)
                  (dotimes (s2-1 5)
                    (when (not (-> this damage-info s2-1 active))
                      (cond
                        ((= s2-1 3)
                         (let ((t9-5 vector<-cspace+vector!)
                               (a0-50 s3-0)
                               (a1-7 (-> this node-list data (-> this damage-info s2-1 jnt)))
                               (a2-2 (new 'stack-no-clear 'vector))
                               )
                           (set! (-> a2-2 x) 20480.0)
                           (set! (-> a2-2 y) 0.0)
                           (set! (-> a2-2 z) 0.0)
                           (set! (-> a2-2 w) 1.0)
                           (t9-5 a0-50 a1-7 a2-2)
                           )
                         )
                        ((= s2-1 4)
                         (let ((t9-6 vector<-cspace+vector!)
                               (a0-51 s3-0)
                               (a1-9 (-> this node-list data (-> this damage-info s2-1 jnt)))
                               (a2-3 (new 'stack-no-clear 'vector))
                               )
                           (set! (-> a2-3 x) -20480.0)
                           (set! (-> a2-3 y) 0.0)
                           (set! (-> a2-3 z) 0.0)
                           (set! (-> a2-3 w) 1.0)
                           (t9-6 a0-51 a1-9 a2-3)
                           )
                         )
                        ((= s2-1 1)
                         (let ((t9-7 vector<-cspace+vector!)
                               (a0-52 s3-0)
                               (a1-11 (-> this node-list data (-> this damage-info s2-1 jnt)))
                               (a2-4 (new 'stack-no-clear 'vector))
                               )
                           (set! (-> a2-4 x) 0.0)
                           (set! (-> a2-4 y) 40960.0)
                           (set! (-> a2-4 z) 0.0)
                           (set! (-> a2-4 w) 1.0)
                           (t9-7 a0-52 a1-11 a2-4)
                           )
                         )
                        ((= s2-1 2)
                         (let ((t9-8 vector<-cspace+vector!)
                               (a0-53 s3-0)
                               (a1-13 (-> this node-list data (-> this damage-info s2-1 jnt)))
                               (a2-5 (new 'stack-no-clear 'vector))
                               )
                           (set! (-> a2-5 x) 0.0)
                           (set! (-> a2-5 y) -40960.0)
                           (set! (-> a2-5 z) 0.0)
                           (set! (-> a2-5 w) 1.0)
                           (t9-8 a0-53 a1-13 a2-5)
                           )
                         )
                        (else
                          (vector<-cspace! s3-0 (-> this node-list data (-> this damage-info s2-1 jnt)))
                          )
                        )
                      (if s4-0
                          (send-event
                            (handle->process (-> s5-0 hud-reticle))
                            'maker-update
                            s3-0
                            (* 0.33333334 (the float (-> this damage-info s2-1 counter)))
                            (= (-> this prim-targeted) s2-1)
                            )
                          )
                      )
                    )
                  )
                (s4-0
                  )
                )
              )
            )
          )
        )
      )
    )
  (set! (-> this prim-targeted) -1)
  (none)
  )

(defstate standup (maker)
  :virtual #t
  :event maker-standard-event-handler
  :code (behavior ()
    (set! (-> self idle-ball-blend) 1.0)
    (ja-no-eval :group! dm-robot-standup-ja :num! (seek! max 2.0) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 2.0))
      )
    (set! (-> self idle-ball-blend) 0.999)
    (go-virtual walking)
    (ja-channel-push! 2 (seconds 0.33))
    (ja-no-eval :group! dm-robot-idle-ja :num! min)
    (let ((gp-1 (-> self skel root-channel 1)))
      (let ((f0-10 1.0))
        (set! (-> gp-1 frame-interp 1) f0-10)
        (set! (-> gp-1 frame-interp 0) f0-10)
        )
      (joint-control-channel-group! gp-1 (the-as art-joint-anim dm-robot-standup-ja) num-func-identity)
      (set! (-> gp-1 frame-num)
            (the float (+ (-> (the-as art-joint-anim dm-robot-standup-ja) frames num-frames) -1))
            )
      )
    (loop
      (ja :num! (loop!))
      (let ((v1-51 (-> self skel root-channel 1)))
        (let ((f0-14 (-> self idle-ball-blend)))
          (set! (-> v1-51 frame-interp 1) f0-14)
          (set! (-> v1-51 frame-interp 0) f0-14)
          )
        (set! (-> v1-51 num-func) num-func-identity)
        (set! (-> v1-51 frame-num) (the float (+ (-> v1-51 frame-group frames num-frames) -1)))
        )
      (suspend)
      )
    )
  :post (behavior ()
    (new 'stack-no-clear 'vector)
    (new 'stack-no-clear 'vector)
    (seconds-per-frame)
    (maker-method-34 self)
    (let* ((v1-7 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
           (v1-10 (the-as task-manager-wascity-defend (handle->process (if (-> v1-7 manager)
                                                                           (-> v1-7 manager manager)
                                                                           (the-as handle #f)
                                                                           )
                                                                       )
                          )
                  )
           )
      (when v1-10
        (when (and (nonzero? (-> v1-10 win-time)) (time-elapsed? (-> v1-10 win-time) (seconds 0.1)))
          (set-time! (-> v1-10 win-time))
          (go-virtual explode)
          )
        )
      )
    (let ((a0-16 (new 'stack-no-clear 'vector)))
      (set! (-> a0-16 quad) (-> self root trans quad))
      (+! (-> a0-16 y) 143360.0)
      (wascity-turret-add-radar a0-16)
      )
    (maker-method-35 self)
    (maker-method-39 self)
    (transform-post)
    )
  )

(defstate walking (maker)
  :virtual #t
  :event maker-standard-event-handler
  :code (behavior ()
    (ja-channel-push! 3 (seconds 0.15))
    (ja-no-eval :group! dm-robot-idle-ja :num! (loop! (-> self speed-mod)))
    (ja-no-eval :chan 1 :group! dm-robot-walk-ja :num! (loop! (-> self speed-mod)))
    (let ((a0-3 (-> self skel root-channel 2)))
      (set! (-> a0-3 frame-interp 1) 1.0)
      (set! (-> self skel interp-select 0) (the-as int (the-as uint #x3fc007fff8)))
      (set! (-> self skel interp-select 1) 0)
      (set! (-> a0-3 frame-group) (the-as art-joint-anim dm-robot-walk-ja))
      (set! (-> a0-3 param 0) (-> self tentacle-speed))
      (joint-control-channel-group! a0-3 (the-as art-joint-anim dm-robot-walk-ja) num-func-loop!)
      )
    (loop
      (ja :num! (loop!))
      (let ((a0-5 (-> self skel root-channel 1)))
        (let ((f0-5 (-> self walk-idle-blend)))
          (set! (-> a0-5 frame-interp 1) f0-5)
          (set! (-> a0-5 frame-interp 0) f0-5)
          )
        (set! (-> a0-5 param 0) (-> self speed-mod))
        (joint-control-channel-group-eval! a0-5 (the-as art-joint-anim #f) num-func-loop!)
        )
      (ja :chan 2 :num! (loop! (-> self tentacle-speed)) :frame-interp1 1.0)
      (suspend)
      )
    (let* ((v1-43 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
           (v1-46 (handle->process (if (-> v1-43 manager)
                                       (-> v1-43 manager manager)
                                       (the-as handle #f)
                                       )
                                   )
                  )
           )
      (if v1-46
          (+! (-> (the-as task-manager-wascity-defend v1-46) miss-count) 1)
          )
      )
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 4))
        (suspend)
        )
      )
    )
  :post (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (let ((s5-0 (new 'stack-no-clear 'vector))
            (f30-0 (seconds-per-frame))
            )
        (let ((f28-0 (ja-aframe-num 1)))
          (when (and (= 1.0 (-> self walk-idle-blend))
                     (and (time-elapsed? (-> self footstep-time) (seconds 0.5))
                          (or (and (< 24.0 f28-0) (< f28-0 29.9)) (and (< 49.9 f28-0) (< f28-0 54.9)))
                          )
                     )
            (if (< (-> self root trans z) -1937408.0)
                (sound-play "dm-robot-water")
                (sound-play "dm-robot-dirt")
                )
            (set-time! (-> self footstep-time))
            (when (< (-> self root trans z) -1937408.0)
              (let ((s4-2 (new 'stack-no-clear 'vector)))
                (if (and (< 24.0 f28-0) (< f28-0 29.9))
                    (vector<-cspace! s4-2 (joint-node dm-robot-lod0-jg R_ankle))
                    (vector<-cspace! s4-2 (joint-node dm-robot-lod0-jg L_ankle))
                    )
                (set! (-> s4-2 y) (get-base-height *ocean-map*))
                (cond
                  ((logtest? (-> *part-group-id-table* 535 flags) (sp-group-flag sp13))
                   (set! (-> *launch-matrix* trans quad) (-> s4-2 quad))
                   (part-tracker-spawn
                     part-tracker-subsampler
                     :to self
                     :group (-> *part-group-id-table* 535)
                     :duration (seconds 1)
                     )
                   )
                  (else
                    (set! (-> *launch-matrix* trans quad) (-> s4-2 quad))
                    (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 535) :duration (seconds 1))
                    )
                  )
                )
              )
            )
          )
        (when (and (time-elapsed? (-> self footstep-time) (seconds 0.75)) (< (-> self root trans z) -1937408.0))
          (set-time! (-> self footstep-time))
          (let ((s4-5 (new 'stack-no-clear 'vector)))
            (if (< 0.5 (rand-vu))
                (vector<-cspace! s4-5 (joint-node dm-robot-lod0-jg R_ankle))
                (vector<-cspace! s4-5 (joint-node dm-robot-lod0-jg L_ankle))
                )
            (set! (-> s4-5 y) (get-base-height *ocean-map*))
            (cond
              ((logtest? (-> *part-group-id-table* 535 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> s4-5 quad))
               (part-tracker-spawn
                 part-tracker-subsampler
                 :to self
                 :group (-> *part-group-id-table* 535)
                 :duration (seconds 1)
                 )
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> s4-5 quad))
                (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 535) :duration (seconds 1))
                )
              )
            )
          )
        (maker-method-34 self)
        (vector-float*! s5-0 (-> self pacc) f30-0)
        (vector+! (-> self pvel) (-> self pvel) s5-0)
        (vector-float*! gp-0 (-> self pvel) (* (-> self speed-mod) f30-0))
        )
      (vector+! (-> self root trans) (-> self root trans) gp-0)
      )
    (let ((a0-42 (new 'stack-no-clear 'vector)))
      (set! (-> a0-42 quad) (-> self root trans quad))
      (+! (-> a0-42 y) 307200.0)
      (wascity-turret-add-radar a0-42)
      )
    (when (and (< (-> self root trans z) -1937408.0)
               (< (-> self root trans y) (get-ocean-floor-height (-> self root trans)))
               )
      )
    (cond
      ((and (= (-> self path-idx) -1) (< (vector-vector-xz-distance (target-pos 0) (-> self root trans)) 1433600.0))
       (seek! (-> self speed-mod) 0.0 (seconds-per-frame))
       (seek! (-> self walk-idle-blend) 0.0 (* 0.2 (seconds-per-frame)))
       )
      (else
        (seek! (-> self speed-mod) 1.0 (* 0.5 (seconds-per-frame)))
        (seek! (-> self walk-idle-blend) 1.0 (* 0.5 (seconds-per-frame)))
        )
      )
    (when (and (= (-> self speed-mod) 0.0)
               (= (-> self walk-idle-blend) 0.0)
               (and (< 0.0 (-> self hit-points))
                    (>= (- (current-time) (-> self last-laser-fire-time)) 0)
                    (> *maker-num-grenades* 0)
                    )
               )
      (set! (-> self last-laser-fire-time) (+ (current-time) (seconds 3)))
      (+ (-> self kick-your-ass-count) 1)
      (when (< (-> self kick-your-ass-string) (-> self kick-your-ass-count))
        (set! (-> self last-laser-fire-time) (+ (current-time) (seconds 10)))
        (set! (-> self kick-your-ass-string) (the-as uint (rand-vu-int-range 3 6)))
        (set! (-> self kick-your-ass-count) (the-as uint 0))
        0
        )
      (set! *maker-num-grenades* (+ *maker-num-grenades* -1))
      (maker-method-36 self)
      )
    (seek! (-> self tentacle-speed) 1.0 (* 0.2 (seconds-per-frame)))
    (dotimes (gp-2 5)
      (when (-> self damage-info gp-2 active)
        (let ((a1-27 (vector<-cspace+vector!
                       (new 'stack-no-clear 'vector)
                       (-> self node-list data (-> self damage-info gp-2 jnt))
                       (the-as vector (+ (the-as uint (-> self damage-info 0 pos)) (* 48 gp-2)))
                       )
                     )
              )
          (spawn (-> self damage-info gp-2 part) a1-27)
          )
        )
      )
    (if (and (<= (-> self num-shots) 0)
             (time-elapsed? (-> self last-fire-time) (the-as time-frame (-> self wait-time)))
             )
        (set! (-> self num-shots) (rand-vu-int-range 1 3))
        )
    (when (and *target*
               (> (-> self num-shots) 0)
               (< 0.0 (-> self walk-idle-blend))
               (and (< 0.0 (-> self hit-points))
                    (time-elapsed? *maker-last-shot-time* (seconds 1))
                    (time-elapsed? (-> self last-fire-time) (seconds 1))
                    (not (focus-test? *target* dead))
                    (not (and (-> self next-state) (= (-> self next-state name) 'fail)))
                    (> *maker-num-grenades* 0)
                    )
               )
      (let ((v1-228 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node dm-robot-lod0-jg head))))
        (+! (-> v1-228 z) 163840.0)
        )
      (set! *maker-num-grenades* (+ *maker-num-grenades* -1))
      (maker-method-36 self)
      (when (not *maker-first-missile*)
        (talker-spawn-func (-> *wascity-defend-speech-list* 32) *entity-pool* (target-pos 0) (the-as region #f))
        (set! *maker-first-missile* (the-as time-frame #t))
        )
      (set-time! (-> self last-fire-time))
      (set! *maker-last-shot-time* (-> self last-fire-time))
      (+! (-> self num-shots) -1)
      (set! (-> self wait-time) (the-as uint (rand-vu-int-range 1800 3000)))
      )
    (+! (-> self rot-vel) (* (-> self rot-acc) (seconds-per-frame)))
    (set! (-> self rot-vel) (fmax -5461.3335 (fmin 5461.3335 (-> self rot-vel))))
    (let* ((v1-248 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
           (v1-251 (the-as task-manager-wascity-defend (handle->process (if (-> v1-248 manager)
                                                                            (-> v1-248 manager manager)
                                                                            (the-as handle #f)
                                                                            )
                                                                        )
                           )
                   )
           )
      (when v1-251
        (when (and (nonzero? (-> v1-251 win-time)) (time-elapsed? (-> v1-251 win-time) (seconds 0.1)))
          (set-time! (-> v1-251 win-time))
          (go-virtual explode)
          )
        )
      )
    (maker-method-35 self)
    (when (= 0.0 (-> self hit-points))
      (if (zero? (-> self visible-explode-time))
          (set! (-> self visible-explode-time) (+ (current-time) (rand-vu-int-range (seconds 0.015) (seconds 0.05))))
          )
      (if (zero? (-> self audible-explode-time))
          (set! (-> self audible-explode-time) (+ (current-time) (rand-vu-int-range (seconds 0.5) (seconds 1))))
          )
      (when (>= (current-time) (-> self audible-explode-time))
        (sound-play "dm-short-explo")
        (set! (-> self audible-explode-time) 0)
        0
        )
      (when (>= (current-time) (-> self visible-explode-time))
        (let ((v1-277 (rand-vu-int-range 0 (+ (length *maker-joint-array*) -1))))
          (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> *maker-joint-array* v1-277)))
          )
        (set! (-> self visible-explode-time) 0)
        0
        )
      (if (and (nonzero? (-> self exploded-time)) (>= (- (current-time) (-> self exploded-time)) 0))
          (go-virtual explode)
          )
      )
    (if (!= 0.0 (-> self hit-points))
        (maker-method-39 self)
        )
    (transform-post)
    )
  )

(defstate flying (maker)
  :virtual #t
  :event maker-standard-event-handler
  :enter (behavior ()
    (set! (-> self pacc quad) (-> self pvel quad))
    (vector-normalize! (-> self pacc) 20480.0)
    (if (not (-> self maker-sound-playing?))
        (set! (-> self maker-sound-playing?) #t)
        )
    (cond
      ((logtest? (-> *part-group-id-table* 534 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn
         part-tracker-subsampler
         :to self
         :group (-> *part-group-id-table* 534)
         :duration (seconds 1)
         )
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 534) :duration (seconds 1))
        )
      )
    (sound-play "dm-robot-appear")
    )
  :exit (behavior ()
    (when (-> self maker-sound-playing?)
      (sound-stop (-> self maker-sound))
      (set! (-> self maker-sound-playing?) #f)
      )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! dm-robot-ball-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      (suspend)
      )
    #f
    )
  :post (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (let ((s5-0 (new 'stack-no-clear 'vector))
            (f30-0 (seconds-per-frame))
            )
        (when (and (< (-> self root trans y) (get-base-height *ocean-map*))
                   (< (-> self seek-pos z) -1937408.0)
                   (not (-> self made-splash?))
                   )
          (set! (-> self made-splash?) #t)
          (let ((s4-0 (new 'stack-no-clear 'vector)))
            (set! (-> s4-0 quad) (-> self root trans quad))
            (set! (-> s4-0 y) (get-base-height *ocean-map*))
            (sound-play "ball-splash")
            (cond
              ((logtest? (-> *part-group-id-table* 536 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
               (part-tracker-spawn
                 part-tracker-subsampler
                 :to self
                 :group (-> *part-group-id-table* 536)
                 :duration (seconds 5)
                 )
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
                (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 536) :duration (seconds 5))
                )
              )
            )
          )
        (when (>= (-> self seek-pos y) (-> self root trans y))
          (send-event (handle->process (-> self trail-handle)) 'notice 'die)
          (if (< -1937408.0 (-> self seek-pos z))
              (sound-play "robot-hit-grnd")
              )
          (go-virtual standup)
          )
        (vector-float*! s5-0 (-> self pacc) f30-0)
        (vector+! (-> self pvel) (-> self pvel) s5-0)
        (vector-float*! gp-0 (-> self pvel) (* 20.0 f30-0))
        )
      (vector+! (-> self root trans) (-> self root trans) gp-0)
      )
    (+! (-> self rot-vel) (* (-> self rot-acc) (seconds-per-frame)))
    (set! (-> self rot-vel) (fmax -5461.3335 (fmin 5461.3335 (-> self rot-vel))))
    (let* ((v1-78 (-> *game-info* sub-task-list (game-task-node wascity-defend-resolution)))
           (v1-81 (the-as task-manager-wascity-defend (handle->process (if (-> v1-78 manager)
                                                                           (-> v1-78 manager manager)
                                                                           (the-as handle #f)
                                                                           )
                                                                       )
                          )
                  )
           )
      (when v1-81
        (when (and (nonzero? (-> v1-81 win-time)) (time-elapsed? (-> v1-81 win-time) (seconds 0.1)))
          (set-time! (-> v1-81 win-time))
          (go-virtual explode)
          )
        )
      )
    (let ((a0-46 (new 'stack-no-clear 'vector)))
      (set! (-> a0-46 quad) (-> self root trans quad))
      (+! (-> a0-46 y) 143360.0)
      (wascity-turret-add-radar a0-46)
      )
    (maker-method-39 self)
    (transform-post)
    )
  )

(defmethod maker-method-38 ((this maker))
  (let ((a1-1 (new 'stack 'debris-tuning (the-as uint 1))))
    (set! (-> a1-1 duration) (seconds 3))
    (set! (-> a1-1 gravity) -163840.0)
    (set! (-> a1-1 scale-rand-lo) 7.5)
    (set! (-> a1-1 scale-rand-hi) 10.0)
    (set! (-> a1-1 fountain-rand-transv-lo quad) (-> this root trans quad))
    (debris-spawn this a1-1 *maker-debris-params* (the-as process-drawable #f))
    )
  0
  (none)
  )

(defmethod deactivate ((this maker))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (let ((v1-0 (-> this parent)))
    (if v1-0
        (-> v1-0 0 self)
        )
    )
  (dotimes (s5-0 5)
    (if (nonzero? (-> this damage-info s5-0 part))
        (kill-particles (-> this damage-info s5-0 part))
        )
    )
  (set-action!
    *gui-control*
    (gui-action stop)
    (-> this explosion-sound-id)
    (gui-channel none)
    (gui-action none)
    (the-as string #f)
    (the-as (function gui-connection symbol) #f)
    (the-as process #f)
    )
  (call-parent-method this)
  0
  (none)
  )

(defstate explode (maker)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (when (not *maker-first-kill*)
      (talker-spawn-func (-> *wascity-defend-speech-list* 24) *entity-pool* (target-pos 0) (the-as region #f))
      (set! *maker-first-kill* (the-as time-frame #t))
      )
    (let* ((a1-1 (joint-node dm-robot-lod0-jg head))
           (v1-7 (vector<-cspace! (new 'stack-no-clear 'vector) a1-1))
           )
      (cond
        ((logtest? (-> *part-group-id-table* 545 flags) (sp-group-flag sp13))
         (set! (-> *launch-matrix* trans quad) (-> v1-7 quad))
         (part-tracker-spawn
           part-tracker-subsampler
           :to self
           :group (-> *part-group-id-table* 545)
           :duration (seconds 5)
           )
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> v1-7 quad))
          (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 545) :duration (seconds 5))
          )
        )
      )
    (sound-play "dm-robot-explo")
    (sound-params-set! *gui-control* (-> self explosion-sound-id) #t 200 5000 -1 0.8)
    (set-action!
      *gui-control*
      (gui-action play)
      (-> self explosion-sound-id)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    (let ((v1-41 (-> self root root-prim)))
      (set! (-> v1-41 prim-core collide-as) (collide-spec))
      (set! (-> v1-41 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self root root-prim local-sphere w) 491520.0)
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    )
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (maker-method-38 self)
    (set! *maker-num-visible* (+ *maker-num-visible* -1))
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 3))
        (suspend)
        )
      )
    (if (nonzero? (-> self explosion-sound-id))
        (set-action!
          *gui-control*
          (gui-action stop)
          (-> self explosion-sound-id)
          (gui-channel none)
          (gui-action none)
          (the-as string #f)
          (the-as (function gui-connection symbol) #f)
          (the-as process #f)
          )
        )
    (while (and (-> self child) (< *maker-num-grenades* 7))
      (suspend)
      )
    (set! *maker-num-alive* (+ *maker-num-alive* -1))
    )
  :post (behavior ()
    (let ((v1-0 (new 'stack-no-clear 'vector)))
      (let ((a0-0 (new 'stack-no-clear 'vector))
            (f0-0 (seconds-per-frame))
            )
        (set-vector! (-> self pacc) 0.0 -327680.0 0.0 1.0)
        (vector-float*! a0-0 (-> self pacc) f0-0)
        (vector+! (-> self pvel) (-> self pvel) a0-0)
        (vector-float*! v1-0 (-> self pvel) f0-0)
        )
      (vector+! (-> self root trans) (-> self root trans) v1-0)
      )
    (transform-post)
    )
  )

(define *maker-traverse-paths*
  (the-as (array (array vector))
    (new 'static 'boxed-array :type array
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6594560.0 :y -307200.0 :z -3686400.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -2273280.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6225920.0 :y -307200.0 :z -3686400.0 :w 1.0)
        (new 'static 'vector :x 6225920.0 :z -3276800.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -3276800.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -2867200.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -2560000.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6963200.0 :y -307200.0 :z -3686400.0 :w 1.0)
        (new 'static 'vector :x 6963200.0 :z -3276800.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -3276800.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -2867200.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 7258112.0 :y 286720.0 :z -630784.0 :w 1.0)
        (new 'static 'vector :x 7139328.0 :y 139264.0 :z -1142784.0 :w 1.0)
        (new 'static 'vector :x 6963200.0 :y 110592.0 :z -1376256.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6549504.0 :y 274432.0 :z -552960.0 :w 1.0)
        (new 'static 'vector :x 6500352.0 :y 262144.0 :z -593920.0 :w 1.0)
        (new 'static 'vector :x 6430720.0 :y 228147.2 :z -704512.0 :w 1.0)
        (new 'static 'vector :x 6402048.0 :y 232652.8 :z -724992.0 :w 1.0)
        (new 'static 'vector :x 6369280.0 :y 201113.6 :z -827392.0 :w 1.0)
        (new 'static 'vector :x 6270976.0 :y 170803.2 :z -1069056.0 :w 1.0)
        (new 'static 'vector :x 6246400.0 :y 145408.0 :z -1134592.0 :w 1.0)
        (new 'static 'vector :x 6135808.0 :y 120832.0 :z -1341030.4 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6540083.0 :y 294912.0 :z -528384.0 :w 1.0)
        (new 'static 'vector :x 6331187.0 :y 208896.0 :z -856064.0 :w 1.0)
        (new 'static 'vector :x 6478643.0 :y 188416.0 :z -1134592.0 :w 1.0)
        (new 'static 'vector :x 6556467.0 :y 258048.0 :z -1257472.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 4505600.0 :z -4096000.0 :w 1.0)
        (new 'static 'vector :x 5201920.0 :z -3538944.0 :w 1.0)
        (new 'static 'vector :x 5201920.0 :z -3072000.0 :w 1.0)
        (new 'static 'vector :x 6430720.0 :z -2457600.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 4915200.0 :z -4096000.0 :w 1.0)
        (new 'static 'vector :x 5611520.0 :z -3538944.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 5324800.0 :z -4096000.0 :w 1.0)
        (new 'static 'vector :x 6021120.0 :z -3538944.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -3538944.0 :w 1.0)
        (new 'static 'vector :x 6594560.0 :z -2867200.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 8706673.0 :y 36864.0 :z -2669111.2 :w 1.0)
        (new 'static 'vector :x 7709166.0 :y 36864.0 :z -2394641.5 :w 1.0)
        (new 'static 'vector :x 7176449.5 :y 36864.0 :z -2215491.5 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 7848095.5 :y 36864.0 :z -3891855.8 :w 1.0)
        (new 'static 'vector :x 7535541.5 :y 36864.0 :z -3029221.0 :w 1.0)
        (new 'static 'vector :x 7145330.5 :y 36864.0 :z -2504272.8 :w 1.0)
        (new 'static 'vector :x 6993778.5 :y 36864.0 :z -2405968.8 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 9870554.0 :y 36864.0 :z -4230729.5 :w 1.0)
        (new 'static 'vector :x 9062067.0 :y 36864.0 :z -3391453.2 :w 1.0)
        (new 'static 'vector :x 8096083.0 :y 36864.0 :z -3234923.8 :w 1.0)
        (new 'static 'vector :x 7334712.0 :y 36864.0 :z -2540761.5 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 5591040.0 :z -4456448.0 :w 1.0)
        (new 'static 'vector :x 5943296.0 :z -3375104.0 :w 1.0)
        (new 'static 'vector :x 6602752.0 :z -2658304.0 :w 1.0)
        (new 'static 'vector :x 6541312.0 :z -2461696.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 6348800.0 :z -4096000.0 :w 1.0)
        (new 'static 'vector :x 6144000.0 :z -3358720.0 :w 1.0)
        (new 'static 'vector :x 6348800.0 :z -3117056.0 :w 1.0)
        (new 'static 'vector :x 6602752.0 :z -2961408.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 6258688.0 :z -2703360.0 :w 1.0))
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 7380992.0 :z -2711552.0 :w 1.0))
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 5971968.0 :z -2486272.0 :w 1.0))
      (new 'static 'boxed-array :type vector
        (new 'static 'vector :x 7782400.0 :z -2867200.0 :w 1.0)
        (new 'static 'vector :x 7700480.0 :z -2498560.0 :w 1.0)
        )
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 6873088.0 :z -1335296.0 :w 1.0))
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 6086656.0 :z -1286144.0 :w 1.0))
      (new 'static 'boxed-array :type vector (new 'static 'vector :x 6848512.0 :z -1064960.0 :w 1.0))
      )
    )
  )

(defmethod maker-method-34 ((this maker))
  (cond
    ((= (-> this path-idx) -1)
     (set! (-> this seek-pos quad) (-> (target-pos 0) quad))
     )
    (else
      (set! (-> this seek-pos quad) (-> *maker-traverse-paths* (-> this path-idx) (-> this path-pt) quad))
      (if (< (-> this seek-pos z) -1937408.0)
          (set! (-> this seek-pos y) (get-ocean-floor-height (-> this seek-pos)))
          )
      0
      )
    )
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (s5-1 (new 'stack-no-clear 'matrix))
        )
    0.0
    0.0
    (vector-! s4-0 (-> this seek-pos) (-> this root trans))
    (vector-normalize! s4-0 1.0)
    (quaternion->matrix s5-1 (-> this root quat))
    (let ((f30-0 (vector-dot (-> s5-1 rvec) s4-0))
          (f28-0 (vector-dot (-> s5-1 fvec) s4-0))
          )
      (cond
        ((< 122880.0 (vector-vector-xz-distance (-> this seek-pos) (-> this root trans)))
         (let ((f0-9 (* 0.5 (seconds-per-frame) (atan f30-0 f28-0))))
           (quaternion-rotate-local-y! (-> this root quat) (-> this root quat) f0-9)
           )
         (quaternion->matrix s5-1 (-> this root quat))
         (set! (-> this pvel quad) (-> s5-1 fvec quad))
         (set! (-> this pvel y) 0.0)
         (vector-normalize! (-> this pvel) 81920.0)
         (set! (-> this pvel y) (* 81920.0 (/ (- (-> this seek-pos y) (-> this root trans y))
                                              (vector-vector-xz-distance (-> this seek-pos) (-> this root trans))
                                              )
                                   )
               )
         )
        ((< (+ (-> this path-pt) 1) (-> this path-len))
         (+! (-> this path-pt) 1)
         )
        (else
          (set! (-> this path-idx) -1)
          (set! (-> this path-pt) 0)
          (set! (-> this path-len) 0)
          0
          )
        )
      )
    )
  0
  (none)
  )

(defbehavior maker-init-by-other maker ((arg0 int) (arg1 float) (arg2 float))
  (init-collision! self)
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 1.75 1.75 1.75 1.0)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-maker" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self skel generate-frame-function) create-interpolated2-joint-animation-frame)
  (set! (-> self path-idx) -1)
  (set-time! (-> self footstep-time))
  (set! (-> self explosion-sound-id) (new 'static 'sound-id))
  (set! *maker-num-alive* (+ *maker-num-alive* 1))
  (set! *maker-num-visible* (+ *maker-num-visible* 1))
  (if (-> self draw shadow)
      (set! (-> self draw shadow-ctrl) (new
                                         'process
                                         'shadow-control
                                         -81920.0
                                         163840.0
                                         573440.0
                                         (the-as vector #f)
                                         (shadow-flags shdf00 shdf04)
                                         4096000.0
                                         )
            )
      (set! (-> self draw shadow-ctrl) *enemy-dummy-shadow-control*)
      )
  (when (< arg0 (length *maker-traverse-paths*))
    (set! (-> self path-idx) arg0)
    (set! (-> self path-pt) 0)
    (set! (-> self path-len) (length (-> *maker-traverse-paths* arg0)))
    (set! (-> self seek-pos quad) (-> *maker-traverse-paths* arg0 0 quad))
    (if (< (-> self seek-pos z) -1937408.0)
        (set! (-> self seek-pos y) (get-ocean-floor-height (-> self seek-pos)))
        )
    (let ((s4-1 (new 'stack-no-clear 'vector)))
      0.0
      (vector-! s4-1 (-> self seek-pos) (target-pos 0))
      (set! (-> s4-1 y) 0.0)
      (vector-normalize! s4-1 1.0)
      (let ((f30-0 (atan (- (-> s4-1 x)) (- (-> s4-1 z)))))
        (cond
          ((< (-> self seek-pos z) -1937408.0)
           (vector-normalize! s4-1 4096000.0)
           (vector+! s4-1 s4-1 (-> self seek-pos))
           (+! (-> s4-1 y) 2457600.0)
           )
          (else
            (vector-normalize! s4-1 40960.0)
            (set! arg2 0.01)
            (vector+! s4-1 s4-1 (-> self seek-pos))
            (+! (-> s4-1 y) 819200.0)
            )
          )
        (set! (-> self root trans quad) (-> s4-1 quad))
        (vector-! (-> self pvel) (-> self seek-pos) (-> self root trans))
        (vector-normalize! (-> self pvel) arg2)
        (quaternion-rotate-local-y! (-> self root quat) (-> self root quat) f30-0)
        )
      )
    )
  (set! (-> self head-jm) (new 'process 'joint-mod (joint-mod-mode joint-set*) self 50))
  (set! (-> self head-tilt) 0.0)
  (set! (-> self head-tilt-vel) 0.0)
  (set! (-> self head-tilt-err) 0.0)
  (set! (-> self head-yaw) 0.0)
  (set! (-> self head-yaw-vel) 0.0)
  (set! (-> self head-yaw-err) 0.0)
  (set! (-> self made-splash?) #f)
  (set! (-> self reticle-on?) #f)
  (set! (-> self hit-points) 1.0)
  (set! (-> self prim-targeted) -1)
  (set! (-> self damage-idx) 0)
  (dotimes (s4-2 5)
    (set! (-> self damage-info s4-2 part) (create-launch-control (-> *part-group-id-table* 543) self))
    ;; og:preserve-this
    (vector-reset! (-> self damage-info s4-2 pos))
    (set! (-> self damage-info s4-2 jnt) (the-as uint (-> *maker-damage-joint-array* s4-2)))
    (set! (-> self damage-info s4-2 active) #f)
    (set! (-> self damage-info s4-2 counter) (the-as uint 0))
    )
  (set! (-> self walk-idle-blend) 1.0)
  (set! (-> self idle-ball-blend) 1.0)
  (vector-reset! (-> self pacc))
  (set! (-> self rot-vel) -3640.889)
  (set! (-> self rot-acc) 0.0)
  (quaternion-identity! (-> self head-rot))
  (if (= arg1 0.0)
      0
      )
  (if (= arg2 0.0)
      #x488c0000
      )
  (set! (-> self visible-explode-time) 0)
  (set-time! (-> self birth-time))
  (set! (-> self speed-mod) 1.0)
  (set! (-> self tentacle-speed) 1.0)
  (set! (-> self last-hit-time) 0)
  (set-time! (-> self last-fire-time))
  (set-time! (-> self last-laser-fire-time))
  (set-time! (-> self audible-explode-time))
  (set! (-> self exploded-time) 0)
  (set! (-> self mult) (the-as uint 0))
  (set! (-> self score) (the-as uint 0))
  (set! (-> self num-shots) (rand-vu-int-range 1 3))
  (set! (-> self wait-time) (the-as uint 0))
  (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 117) (the-as int #f) (the-as vector #t) 0))
  (set! (-> self draw light-index) (the-as uint 10))
  (set! (-> self draw lod-set lod 0 dist) 14336000.0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (logior! (-> self mask) (process-mask no-kill))
  (let ((gp-1 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
    (set! (-> gp-1 tracked-obj) (process->handle self))
    (set! (-> gp-1 appearance) *maker-entry-trail*)
    (set! (-> gp-1 max-num-crumbs) (the int (* 0.5 (the float (-> gp-1 appearance max-age)))))
    (set! (-> gp-1 track-immediately?) #t)
    (let* ((v1-104
             (estimate-light-trail-mem-usage
               (the-as uint (-> gp-1 max-num-crumbs))
               (the-as uint (= (-> gp-1 appearance lie-mode) 3))
               )
             )
           (s5-1 (get-process *default-dead-pool* light-trail-tracker-projectile (+ v1-104 8192) 1))
           )
      (set! (-> self trail-handle)
            (ppointer->handle (when s5-1
                                (let ((t9-22 (method-of-type process activate)))
                                  (t9-22 s5-1 self "light-trail" (the-as pointer #x70004000))
                                  )
                                (run-now-in-process s5-1 light-trail-tracker-init-by-other gp-1)
                                (-> s5-1 ppointer)
                                )
                              )
            )
      )
    )
  (go-virtual flying)
  )

;; WARN: Return type mismatch process vs maker.
(defun spawn-maker ((arg0 process) (arg1 int) (arg2 float) (arg3 float))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn maker arg1 arg2 arg3 :name "maker" :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as maker gp-0)
    )
  )

(define *maker-avoid-spheres* (new 'static 'boxed-array :type vector
                                (new 'static 'vector :x 7016448.0 :y 65536.0 :z -2945433.5 :w 327680.0)
                                (new 'static 'vector :x 6477005.0 :y 65536.0 :z -2750873.5 :w 81920.0)
                                (new 'static 'vector :x 6567117.0 :y 65536.0 :z -2241740.8 :w 61440.0)
                                )
        )

(defun spawn-maker-enum ((arg0 process) (arg1 int) (arg2 float) (arg3 float))
  (spawn-maker arg0 arg1 arg2 arg3)
  )

(defstate active (task-manager-wascity-defend)
  :virtual #t
  :code (behavior ()
    (until #f
      (when *debug-segment*
        )
      (suspend)
      )
    #f
    )
  )

;; WARN: disable def twice: 36. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod taskman-event-handler ((this task-manager-wascity-defend) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('fire)
     (let ((v0-0 (the-as object (+ (-> this numshots) 1))))
       (set! (-> this numshots) (the-as int v0-0))
       v0-0
       )
     )
    (('event-over)
     ;; og:preserve-this handle->process nonsense
     (let ((makers (search-process-tree *active-pool* (lambda ((arg0 process-tree)) (type? arg0 maker))))
           (flyer-shots (search-process-tree *active-pool* (lambda ((arg0 process-tree)) (type? arg0 dm-flyer-shot))))
           (grenades (search-process-tree *active-pool* (lambda ((arg0 process-tree)) (type? arg0 maker-grenade))))
           )
       (and
         (not (process->handle makers))
         (not (process->handle flyer-shots))
         (not (process->handle grenades))
         (-> this completed)
         )
       )
     )
    (('fail)
     ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

(defun jak-out-of-turret ()
  (let ((gp-0 (new 'static 'vector :x 6583861.0 :y 274198.53 :z -1960301.8 :w 1.0)))
    (< 23756.8 (vector-vector-distance gp-0 (target-pos 0)))
    )
  )

(defmethod task-manager-method-26 ((this task-manager-wascity-defend))
  (with-pp
    (if (not (handle->process (-> this wct)))
        (set! (-> this wct) (process->handle (process-by-name "wascity-turret-1" *active-pool*)))
        )
    (send-event (handle->process (-> this wct)) 'radar-reset)
    (when (and (<= *maker-num-visible* 0) (>= *maker-num-grenades* 7) (nonzero? (-> this alarm)))
      (sound-stop (-> this alarm))
      (set! (-> this alarm) (new 'static 'sound-id))
      0
      )
    (when (and (< *maker-num-grenades* 7) (> *maker-num-visible* 0) (zero? (-> this alarm)) (-> this facing-city?))
      (sound-stop (-> this alarm))
      (set! (-> this alarm) (new-sound-id))
      (sound-play "wascity-alarm" :id (-> this alarm) :position (if (-> this facing-city?)
                                                                    *wascity-alarm-pos2*
                                                                    *wascity-alarm-pos1*
                                                                    )
                  )
      )
    (if (-> this hud-active?)
        (send-event (handle->process (-> this hud-reticle)) 'reset-state)
        )
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      0.0
      (set-vector! s5-0 6585594.5 263189.94 -1938929.1 1.0)
      (let ((f0-5 (vector-vector-distance-squared s5-0 (target-pos 0)))
            (f1-0 409600.0)
            )
        (if (and (< (* f1-0 f1-0) f0-5) (!= (-> this info index) 1))
            (send-event this 'fail)
            )
        )
      )
    (when (and (-> this completed) (>= *maker-num-grenades* 7))
      (when (not (-> this out-of-turret?))
        (send-event *target* 'end-mode 'turret)
        (task-manager-wascity-defend-method-32 this)
        )
      (when (and (zero? (-> this time-out-of-turret)) (and (not (-> this out-of-turret?))
                                                           (!= (send-event *target* 'query 'mode) 'turret)
                                                           (jak-out-of-turret)
                                                           (>= (-> *camera-combiner* interp-val) 1.0)
                                                           )
                 )
        (set! (-> this out-of-turret?) #t)
        (set-time! (-> this time-out-of-turret))
        )
      (when (and (nonzero? (-> this time-out-of-turret))
                 (time-elapsed? (-> this time-out-of-turret) (seconds 0.3))
                 (not (-> this sent-event-complete?))
                 )
        (send-event this 'complete)
        (set! (-> this sent-event-complete?) #t)
        )
      )
    (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-10 from) (process->ppointer pp))
      (set! (-> a1-10 num-params) 1)
      (set! (-> a1-10 message) 'query)
      (set! (-> a1-10 param 0) (the-as uint 'mode))
      (cond
        ((and (= (send-event-function *target* a1-10) 'turret)
              (and (not (focus-test? *target* dead)) (not (and (-> this next-state) (= (-> this next-state name) 'fail))))
              )
         (set! (-> this out-of-turret?) #f)
         (set! (-> this time-out-of-turret) 0)
         (set! (-> this sent-event-complete?) #f)
         (when (not (-> this hud-active?))
           (set-setting! 'music 'wasdefnd 0.0 0)
           (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
           (set! (-> this hud-reticle)
                 (ppointer->handle (process-spawn hud-wasgun :init hud-init-by-other :name "hud-wasgun" :to this))
                 )
           (set! (-> this hud-damage)
                 (ppointer->handle
                   (process-spawn hud-wasdef-damage :init hud-init-by-other :name "hud-wasdef-damage" :to this)
                   )
                 )
           (set! (-> this hud-active?) #t)
           )
         (task-manager-wascity-defend-method-34 this)
         )
        (else
          )
        )
      )
    (call-parent-method this)
    (none)
    )
  )

(defmethod set-time-limit ((this task-manager-wascity-defend))
  (set! (-> this failed) #f)
  (set! (-> this completed) #f)
  (set! (-> this hud-active?) #f)
  (set-time! (-> this start-time))
  (set-setting! 'extra-bank '((wascity1 wasdef1) (wascity2 wasdef2) (wascity3 wasdef3)) 0.0 0)
  (set! *maker-num-grenades* 7)
  (set! *maker-last-shot-time* (+ (current-time) (seconds 8)))
  (set! *maker-num-alive* 0)
  (set! *maker-num-visible* 0)
  (set! *maker-first-hit* #f)
  (set! *maker-first-kill* (the-as time-frame #f))
  (set! *maker-first-missile* (the-as time-frame #f))
  (set! (-> this wct) (the-as handle #f))
  (set! (-> this alarm) (new 'static 'sound-id))
  (set! (-> this facing-city?) #f)
  (call-parent-method this)
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod task-manager-wascity-defend-method-32 ((this task-manager-wascity-defend))
  (when (= (-> this hud-active?) #t)
    (remove-setting! 'music)
    (remove-setting! 'extra-bank)
    (remove-setting! 'minimap)
    (set-continue! *game-info* "wascityb-gungame-done" #f)
    (send-event (handle->process (-> this hud-reticle)) 'hide-and-die)
    (send-event (handle->process (-> this hud-damage)) 'hide-and-die)
    (set! (-> this hud-active?) #f)
    )
  (none)
  )

(defmethod task-manager-method-25 ((this task-manager-wascity-defend))
  (sound-stop (-> this alarm))
  (task-manager-wascity-defend-method-32 this)
  (call-parent-method this)
  (none)
  )

(defmethod task-manager-wascity-defend-method-34 ((this task-manager-wascity-defend))
  (let ((v1-3 (-> *maker-data* (-> this wave) (-> this event)))
        (s5-0 #t)
        )
    (when (zero? (-> this event-length))
      (set! (-> this event-length) (the-as time-frame (-> v1-3 event-length)))
      (set-time! (-> this event-time))
      )
    (case (-> v1-3 mode)
      (((hip-maker-mode hmm4))
       (let ((a0-12 (process-by-name "wascity-turret-1" *active-pool*)))
         (send-event a0-12 'face-city)
         )
       (sound-stop (-> this alarm))
       (set! (-> this alarm) (new-sound-id))
       (sound-play "wascity-alarm" :id (-> this alarm) :position *wascity-alarm-pos2*)
       (set! (-> this facing-city?) #t)
       )
      (((hip-maker-mode hmm5))
       (let ((a0-19 (process-by-name "wascity-turret-1" *active-pool*)))
         (send-event a0-19 'face-ocean)
         )
       (set! (-> this facing-city?) #f)
       )
      (((hip-maker-mode hmm1))
       (set! s5-0 (>= (the-as int (-> v1-3 path-idx)) *maker-num-visible*))
       (when (and s5-0 (zero? (-> v1-3 path-idx)))
         (sound-stop (-> this alarm))
         (set! (-> this alarm) (new 'static 'sound-id))
         0
         )
       )
      (((hip-maker-mode hmm0))
       (set! s5-0 (>= (the-as int (-> v1-3 path-idx)) *maker-num-alive*))
       )
      (((hip-maker-mode hmm3))
       (wasdef-voiceover (the-as int (-> v1-3 path-idx)))
       )
      (((hip-maker-mode hmm10))
       (set! (-> this completed) #t)
       )
      (((hip-maker-mode hmm2))
       (set! s5-0 (>= *maker-num-grenades* 7))
       )
      (((hip-maker-mode hmm6))
       (set! s5-0 (time-elapsed? (-> this event-time) (-> this event-length)))
       0
       )
      (((hip-maker-mode hmm7))
       0
       0
       0
       (let ((a1-23 (-> v1-3 path-idx)))
         (spawn-maker-enum this (the-as int a1-23) (-> v1-3 angle) (-> v1-3 speed))
         )
       )
      )
    (when s5-0
      (set! (-> this event-length) 0)
      (+! (-> this event) 1)
      (when (>= (-> this event) (-> *maker-data* (-> this wave) length))
        (set! (-> this event) 0)
        (+! (-> this wave) 1)
        (if (>= (-> this wave) (-> *maker-data* length))
            (set! (-> this wave) (+ (-> *maker-data* length) -1))
            )
        )
      )
    )
  0
  (none)
  )
