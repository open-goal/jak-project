;;-*-Lisp-*-
(in-package goal)

;; name: dm-flyer.gc
;; name in dgo: dm-flyer
;; dgos: WCB

(define-extern *dm-flyer-curve-linear-up-red* curve2d-piecewise)
(define-extern *dm-flyer-trail-color-curve-missile* curve-color-fast)
(define-extern *dm-flyer-curve-missile-linear-trail* curve2d-fast)
(define-extern *dm-flyer-missile-trail* light-trail-composition)
(define-extern *maker-num-grenades* int)
(define-extern wascity-turret-add-radar (function vector none))

;; DECOMP BEGINS

(defpart 2153
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 150.0)
    (:b 128.0)
    (:a 64.0)
    (:scalevel-x (meters 0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.32)
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-2))
    (:rotate-y (degrees 0))
    )
  )

(when (or (zero? *dm-flyer-curve-linear-up-red*) (!= loading-level global))
  (set! *dm-flyer-curve-linear-up-red* (new 'loading-level 'curve2d-piecewise))
  (curve2d-piecewise-method-10 *dm-flyer-curve-linear-up-red* 2 'loading-level (the-as int #f))
  )

(set! (-> *dm-flyer-curve-linear-up-red* pts data 0 first) 0.0)

(set! (-> *dm-flyer-curve-linear-up-red* pts data 0 second) 0.3)

(set! (-> *dm-flyer-curve-linear-up-red* pts data 1 first) 1.0)

(set! (-> *dm-flyer-curve-linear-up-red* pts data 1 second) 1.0)

(if #t
    (set! *dm-flyer-trail-color-curve-missile* (new 'static 'curve-color-fast
                                                 :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                                 :ys (new 'static 'inline-array vector 4
                                                   (new 'static 'vector :x 1.0 :y 0.5 :w 128.0)
                                                   (new 'static 'vector :x 0.7 :w 128.0)
                                                   (new 'static 'vector :x 0.7 :w 128.0)
                                                   (new 'static 'vector :x 0.7 :w 128.0)
                                                   )
                                                 :one-over-x-deltas (new 'static 'vector :x 5.0 :y 1.25 :z 1.0 :w 1.0)
                                                 )
          )
    )

(if #t
    (set! *dm-flyer-curve-missile-linear-trail* (new 'static 'curve2d-fast
                                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                                  :ys (new 'static 'vector :x 0.3 :y 1.0 :z 2.0 :w 3.0)
                                                  :one-over-x-deltas (new 'static 'vector :x 0.7 :y 1.0 :z 1.0 :w 1.0)
                                                  )
          )
    )

(if (or (zero? *dm-flyer-missile-trail*) (!= loading-level global))
    (set! *dm-flyer-missile-trail* (new 'loading-level 'light-trail-composition))
    )

(set! (-> *dm-flyer-missile-trail* color-mode) (the-as uint 0))

(set! (-> *dm-flyer-missile-trail* color-repeat-dist) 40960.0)

(set! (-> *dm-flyer-missile-trail* alpha-1-mode) (the-as uint 0))

(set! (-> *dm-flyer-missile-trail* alpha-2-mode) (the-as uint 1))

(set! (-> *dm-flyer-missile-trail* base-alpha) 0.5)

(set! (-> *dm-flyer-missile-trail* alpha-repeat-dist) 6144.0)

(set! (-> *dm-flyer-missile-trail* width-mode) (the-as uint 2))

(set! (-> *dm-flyer-missile-trail* base-width) 8192.0)

(set! (-> *dm-flyer-missile-trail* width-repeat-dist) 40960.0)

(set! (-> *dm-flyer-missile-trail* uv-mode) (the-as uint 0))

(set! (-> *dm-flyer-missile-trail* uv-repeat-dist) 16384000.0)

(set! (-> *dm-flyer-missile-trail* lie-mode) (the-as uint 0))

(set! (-> *dm-flyer-missile-trail* max-age) (seconds 1))

(if #f
    (set! (-> *dm-flyer-missile-trail* tex-id)
          (the-as uint (lookup-texture-id-by-name (the-as string #f) (the-as string #f)))
          )
    (set! (-> *dm-flyer-missile-trail* tex-id) (the-as uint #x100300))
    )

(set! (-> *dm-flyer-missile-trail* width-curve)
      (the-as curve2d-piecewise *dm-flyer-curve-missile-linear-trail*)
      )

(set! (-> *dm-flyer-missile-trail* color-curve)
      (the-as curve-color-piecewise *dm-flyer-trail-color-curve-missile*)
      )

(set! (-> *dm-flyer-missile-trail* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

(set! (-> *dm-flyer-missile-trail* alpha-curve-2) *dm-flyer-curve-linear-up-red*)

(set! (-> *dm-flyer-missile-trail* zbuffer?) #f)

(set! (-> *dm-flyer-missile-trail* lie-vector quad) (-> *up-vector* quad))

(set! (-> *dm-flyer-missile-trail* use-tape-mode?) #f)

(set! (-> *dm-flyer-missile-trail* blend-mode) (the-as uint 1))

(set! (-> *dm-flyer-missile-trail* frame-stagger) (the-as uint 1))

(defskelgroup skel-dm-flyer-missile dm-missile dm-missile-lod0-jg dm-missile-idle-ja
              ((dm-missile-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              :origin-joint-index 3
              )

(deftype dm-flyer-shot (projectile)
  ((tail-pos           vector      :inline)
   (hit-pos            vector      :inline)
   (turn-quat          quaternion  :inline)
   (minimap            connection-minimap)
   (hit-actor?         symbol)
   (last-hit-time      time-frame)
   (muzzle-flash-part  sparticle-launch-control)
   (particle-trail     sparticle-launch-control)
   (swirl              float)
   (swirlvel           float)
   )
  )


(defstate impact (dm-flyer-shot)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (send-event
         proc
         'attack
         (-> block param 0)
         (static-attack-info :mask (vehicle-impulse-factor) ((id (-> self attack-id))
                                                             (damage 2.0)
                                                             (vehicle-damage-factor 1.0)
                                                             (vehicle-impulse-factor 2.5)
                                                             (mode 'explode)
                                                             )
                             )
         )
       #t
       )
      )
    )
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (let ((s5-0 (new 'stack-no-clear 'explosion-init-params)))
        (set! (-> s5-0 spawn-point quad) (-> self root trans quad))
        (quaternion-identity! (-> s5-0 spawn-quat))
        (set! (-> s5-0 radius) 40960.0)
        (set! (-> s5-0 scale) 1.0)
        (set! (-> s5-0 group) #f)
        (set! (-> s5-0 collide-with)
              (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
              )
        (set! (-> s5-0 damage) 2.0)
        (set! (-> s5-0 damage-scale) 1.0)
        (set! (-> s5-0 vehicle-damage-factor) 1.0)
        (set! (-> s5-0 vehicle-impulse-factor) 1.0)
        (set! (-> s5-0 ignore-proc) (process->handle #f))
        (explosion-spawn s5-0 (the-as process-drawable *default-pool*))
        )
      (let ((f0-6 81920.0))
        (cond
          ((< (* f0-6 f0-6) (vector-vector-distance-squared (-> self root trans) (target-pos 0)))
           (forward-up->inv-matrix gp-0 (-> self pre-move-transv) *up-vector*)
           (set! (-> gp-0 trans quad) (-> self root trans quad))
           (if (logtest? (-> *part-group-id-table* 539 flags) (sp-group-flag sp13))
               (part-tracker-spawn
                 part-tracker-subsampler
                 :to *entity-pool*
                 :group (-> *part-group-id-table* 539)
                 :mat-joint gp-0
                 )
               (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 539) :mat-joint gp-0)
               )
           (sound-play "ball-explode")
           )
          (else
            (quaternion->matrix gp-0 (-> *target* control quat))
            (set! (-> gp-0 trans quad) (-> *target* control trans quad))
            (if (logtest? (-> *part-group-id-table* 541 flags) (sp-group-flag sp13))
                (part-tracker-spawn
                  part-tracker-subsampler
                  :to *entity-pool*
                  :group (-> *part-group-id-table* 541)
                  :mat-joint gp-0
                  )
                (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 541) :mat-joint gp-0)
                )
            (sound-play "ball-hit-turret")
            )
          )
        )
      )
    (let ((f0-11 (lerp-scale 409.6 0.0 (vector-vector-distance (camera-pos) (-> self root trans)) 40960.0 163840.0)))
      (if (!= f0-11 0.0)
          (activate! *camera-smush-control* f0-11 37 600 1.0 0.1 (-> self clock))
          )
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-94 (-> self root root-prim)))
      (set! (-> v1-94 prim-core collide-as) (collide-spec))
      (set! (-> v1-94 prim-core collide-with) (collide-spec))
      )
    0
    )
  :code (behavior ()
    (suspend)
    (while (-> self child)
      (suspend)
      )
    )
  )

(defstate dissipate (dm-flyer-shot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    )
  )

(defmethod projectile-method-24 ((this dm-flyer-shot))
  (draw-beam
    (the-as sparticle-launcher (-> this muzzle-flash-part))
    (-> this tail-pos)
    (-> this starting-dir)
    #f
    )
  0
  (none)
  )

(defmethod projectile-method-25 ((this dm-flyer-shot))
  (transform-post)
  0
  (none)
  )

(defmethod deal-damage! ((this dm-flyer-shot) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

(defmethod projectile-method-26 ((this dm-flyer-shot))
  (let ((v1-8
          (cond
            ((-> this hit-actor?)
             (cond
               ((logtest? (-> *part-group-id-table* 102 flags) (sp-group-flag sp13))
                (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 102))
                )
               (else
                 (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                 (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 102))
                 )
               )
             )
            ((logtest? (-> *part-group-id-table* 101 flags) (sp-group-flag sp13))
             (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
             (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 101))
             )
            (else
              (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
              (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 101))
              )
            )
          )
        )
    (send-event (ppointer->process v1-8) 'clock this)
    )
  0
  (none)
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound ((this dm-flyer-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "missile-launch")
       )
      ((= v1-0 (projectile-options po0))
       (cond
         ((-> this hit-actor?)
          )
         (else
           )
         )
       )
      ((= v1-0 (projectile-options po0 po1))
       (let* ((f0-0 (vector-vector-distance (target-pos 0) (-> this root trans)))
              (f0-2 (+ 0.3 (* 0.0000012207031 f0-0)))
              )
         (sound-play-by-name
           (static-sound-name "missile-travel")
           (-> this sound-id)
           1024
           (the int (* 1524.0 f0-2))
           0
           (sound-group)
           #t
           )
         )
       )
      )
    )
  (none)
  )

(defun dm-flyer-shot-move ((arg0 dm-flyer-shot))
  (let ((s5-0 (-> arg0 root)))
    (set! (-> arg0 swirl)
          (the float (sar (shl (the int (+ (-> arg0 swirl) (* (-> arg0 swirlvel) (seconds-per-frame)))) 48) 48))
          )
    (let* ((s4-0 (handle->process (-> arg0 desired-target)))
           (s2-0 (if (type? s4-0 process-focusable)
                     s4-0
                     )
                 )
           )
      (when s2-0
        0.0
        (vector+float*!
          (-> arg0 desired-target-pos)
          (get-trans (the-as process-focusable s2-0) 0)
          (get-transv (the-as process-focusable s2-0))
          (* 3.0 (-> arg0 charge-level))
          )
        (let ((f30-1 (fmin 204800.0 (* 0.25 (vector-vector-distance (-> arg0 desired-target-pos) (-> arg0 root trans))))))
          (+! (-> arg0 desired-target-pos x) (* f30-1 (sin (-> arg0 swirl))))
          (+! (-> arg0 desired-target-pos y) (* f30-1 (cos (-> arg0 swirl))))
          )
        )
      )
    (let ((s3-1 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-0 transv) 1.0))
          (s2-2 (vector-! (new 'stack-no-clear 'vector) (-> arg0 desired-target-pos) (-> s5-0 trans)))
          (s4-3 (new 'stack-no-clear 'quaternion))
          (f30-2 (vector-length (-> s5-0 transv)))
          )
      (vector-normalize! s2-2 1.0)
      (quaternion-from-two-vectors-max-angle! s4-3 s3-1 s2-2 (* 29127.111 (seconds-per-frame)))
      (quaternion-slerp! (-> arg0 turn-quat) (-> arg0 turn-quat) s4-3 (* 10.0 (seconds-per-frame)))
      (quaternion*! (-> s5-0 quat) (-> arg0 turn-quat) (-> s5-0 quat))
      (vector-z-quaternion! (-> s5-0 transv) (-> s5-0 quat))
      (vector-normalize! (-> s5-0 transv) f30-2)
      )
    (projectile-move-fill-line-sphere arg0)
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (let ((v1-32 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-13 (-> arg0 hit-pos))
            )
        (set! (-> a1-13 quad) (-> s5-0 trans quad))
        (vector+! a1-13 a1-13 v1-32)
        (move-to-point! (-> arg0 root) a1-13)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

(defmethod handle-proj-hit! ((this dm-flyer-shot) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile handle-proj-hit!)))
    (when (not (t9-0 this arg0 arg1))
      (if (type? arg0 projectile)
          (go (method-of-object this impact))
          )
      )
    )
  )

(defmethod setup-collision! ((this dm-flyer-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((v1-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-7 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-7 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> v1-7 prim-core action) (collide-action solid))
      (set-vector! (-> v1-7 local-sphere) 0.0 0.0 0.0 12288.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-7)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-10 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-10 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-10 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defmethod relocate ((this dm-flyer-shot) (offset int))
  (if (nonzero? (-> this particle-trail))
      (&+! (-> this particle-trail) offset)
      )
  (call-parent-method this offset)
  )

(defmethod deactivate ((this dm-flyer-shot))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (set! *maker-num-grenades* (+ *maker-num-grenades* 1))
  (call-parent-method this)
  0
  (none)
  )

(defmethod projectile-method-39 ((this dm-flyer-shot))
  (wascity-turret-add-radar (-> this root trans))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (set! (-> s4-0 quad) (-> this root transv quad))
      (vector-normalize! s4-0 17612.8)
      (vector+! s5-0 (-> this root trans) s4-0)
      )
    (spawn (-> this part) s5-0)
    )
  (call-parent-method this)
  (none)
  )

;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 128 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 128 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 128 mismatch: defined as size 4, got size 16
(defmethod init-proj-settings! ((this dm-flyer-shot))
  (local-vars
    (sv-80 (function float float float float float float))
    (sv-96 float)
    (sv-112 float)
    (sv-128 float)
    )
  (with-pp
    (initialize-skeleton
      this
      (the-as skeleton-group (art-group-get-by-name *level* "skel-dm-flyer-missile" (the-as (pointer level) #f)))
      (the-as pair 0)
      )
    (set! (-> this hit-actor?) #f)
    (set! (-> this tail-pos quad) (-> this root trans quad))
    (set! (-> this swirl) (rand-vu-float-range 0.0 65536.0))
    (set! (-> this swirlvel) (rand-vu-float-range 8192.0 24576.0))
    (set! (-> this swirlvel) (* (-> this swirlvel) (if (>= (rand-vu) 0.5)
                                                       -1.0
                                                       1.0
                                                       )
                                )
          )
    (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
    (set! (-> this attack-mode) 'eco-yellow)
    (set! (-> this max-speed) 327680.0)
    (set! (-> this move) dm-flyer-shot-move)
    (set! (-> this timeout) (seconds 15))
    (set! (-> this sound-id) (new-sound-id))
    (logior! (-> this options) (projectile-options po13))
    (set! (-> this muzzle-flash-part) (the-as sparticle-launch-control (-> *part-id-table* 268)))
    pp
    (set! (-> this particle-trail)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 2153) 8.0)
            )
          )
    (set! (-> this desired-target) (process->handle *target*))
    (set! (-> this part) (create-launch-control (-> *part-group-id-table* 537) this))
    (let* ((s5-1 (handle->process (-> this desired-target)))
           (s3-0 (if (type? s5-1 process-focusable)
                     s5-1
                     )
                 )
           )
      (if s3-0
          (vector+float*!
            (-> this desired-target-pos)
            (get-trans (the-as process-focusable s3-0) 0)
            (get-transv (the-as process-focusable s3-0))
            (* 3.0 (-> this charge-level))
            )
          )
      )
    (let ((s5-5 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
      (set! (-> s5-5 tracked-obj) (process->handle this))
      (set! (-> s5-5 appearance) *dm-flyer-missile-trail*)
      (set! (-> s5-5 max-num-crumbs) (the int (* 0.5 (the float (-> s5-5 appearance max-age)))))
      (set! (-> s5-5 track-immediately?) #t)
      (let* ((v0-12 (estimate-light-trail-mem-usage
                      (the-as uint (-> s5-5 max-num-crumbs))
                      (the-as uint (= (-> s5-5 appearance lie-mode) 3))
                      )
                    )
             (s4-2 (get-process *default-dead-pool* light-trail-tracker-projectile (+ v0-12 8192) 1))
             )
        (when s4-2
          (let ((t9-14 (method-of-type process activate)))
            (t9-14 s4-2 *entity-pool* "light-trail" (the-as pointer #x70004000))
            )
          (run-now-in-process s4-2 light-trail-tracker-init-by-other s5-5)
          (-> s4-2 ppointer)
          )
        )
      )
    (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 135) (the-as int #f) (the-as vector #t) 0))
    (quaternion-copy! (-> this turn-quat) *unity-quaternion*)
    (let* ((s5-6 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this root transv) 1.0))
           (f0-12 (vector-dot s5-6 *y-vector*))
           (s4-3 (new 'stack-no-clear 'vector))
           )
      (let ((s3-1 vector-lerp!)
            (s2-0 s4-3)
            (s1-0 *y-vector*)
            (s0-0 *x-vector*)
            )
        (set! sv-80 lerp-scale)
        (set! sv-96 (the-as float 0.0))
        (set! sv-112 (the-as float 1.0))
        (set! sv-128 f0-12)
        (let ((a3-5 (cos 14563.556))
              (t0-2 0.0)
              )
          (s3-1 s2-0 s1-0 s0-0 (sv-80 sv-96 sv-112 sv-128 a3-5 t0-2))
          )
        )
      (forward-up->quaternion (-> this root quat) s5-6 s4-3)
      )
    (set-vector! (-> this root scale) 3.0 3.0 1.0 1.0)
    0
    (none)
    )
  )
