;;-*-Lisp-*-
(in-package goal)

;; name: waswide-part.gc
;; name in dgo: waswide-part
;; dgos: WWD

(define-extern *range-sat-explo-scene-color* curve-color-fast)
(define-extern *range-sat-explo-scene-alpha* curve2d-fast)
(define-extern *range-sat-explo-scene-scale-x* curve2d-fast)
(define-extern *range-sat-explo-scene-scale-y* curve2d-fast)
(define-extern *curve-sat-explo-scene-alpha* curve2d-fast)
(define-extern *curve-sat-explo-scene-scale-x* curve2d-fast)
(define-extern *curve-sat-explo-scene-scale-y* curve2d-fast)
(define-extern *part-neo-satellite-explosion-texture-scene-curve-settings* particle-curve-settings)
(define-extern *range-color-wascity-palace-fire-beacon-flame* curve-color-fast)
(define-extern *range-alpha-wascity-palace-fire-beacon-flame* curve2d-fast)
(define-extern *range-scale-wascity-palace-fire-beacon-flame-x* curve2d-fast)
(define-extern *range-scale-wascity-palace-fire-beacon-flame-y* curve2d-fast)
(define-extern *r-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
(define-extern *g-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
(define-extern *b-curve-wascity-palace-fire-beacon-flame* curve2d-fast)
(define-extern *curve-alpha-wascity-palace-fire-beacon-flame* curve2d-fast)
(define-extern *curve-wascity-palace-fire-beacon-flame-x* curve2d-fast)
(define-extern *curve-wascity-palace-fire-beacon-flame-y* curve2d-fast)
(define-extern *part-wascity-palace-fire-beacon-flame-curve-settings* particle-curve-settings)
(define-extern *range-wrsplash-color* curve-color-fast)
(define-extern *range-wrsplash-alpha* curve2d-fast)
(define-extern *range-wrsplash-scale-x* curve2d-fast)
(define-extern *range-wrsplash-scale-y* curve2d-fast)
(define-extern *curve-wrsplash-alpha* curve2d-fast)
(define-extern *curve-wrsplash-scale-x* curve2d-fast)
(define-extern *curve-wrsplash-scale-y* curve2d-fast)
(define-extern *part-water-rocks-splash-curve-settings* particle-curve-settings)
(define-extern *range-color-flame* curve-color-fast)
(define-extern *range-alpha-flame* curve2d-fast)
(define-extern *range-scale-flame-x* curve2d-fast)
(define-extern *range-scale-flame-y* curve2d-fast)
(define-extern *r-curve-flame* curve2d-fast)
(define-extern *g-curve-flame* curve2d-fast)
(define-extern *b-curve-flame* curve2d-fast)
(define-extern *curve-alpha-flame* curve2d-fast)
(define-extern *curve-flame-x* curve2d-fast)
(define-extern *curve-flame-y* curve2d-fast)
(define-extern *part-gas-lamp-flame-curve-settings* particle-curve-settings)
(define-extern *part-talltorch-flame-curve-settings* particle-curve-settings)

;; DECOMP BEGINS

(defpartgroup group-wascity-pre-game-sat-sparks
  :id 460
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1815 :flags (sp7)) (sp-item 1816 :flags (sp7)))
  )

(defpart 1815
  :init-specs ((:texture (tinyspeck level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.8))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.1125))
    (:vel-y (meters 0.02) (meters 0.033333335))
    (:friction 0.96)
    (:timer (seconds 0.5) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1816
  :init-specs ((:texture (lightning-anim-01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.5 3.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0 128.0)
    (:scalevel-x (meters -0.006666667) (meters 0.006666667))
    (:rotvel-z (degrees -0.53333336) (degrees 1.0666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.017) (seconds 0.13))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata :data (new 'static 'boxed-array :type int32 5 1 0 #x405700 #x405800 #x405900))
    )
  )

(defpartgroup group-daxter-slide-dust
  :id 461
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 1817 :flags (sp7)))
  )

(defpart 1817
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 2.0)
    (:scale-x (meters 0.3) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 150.0)
    (:g 120.0)
    (:b 90.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0) (meters 0.0013333333))
    (:scalevel-x (meters 0.001))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:accel-y (meters 0) (meters 0.000033333334))
    (:friction 0.98)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x405c00 #x409b00))
    (:conerot-x (degrees 80) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-sat-scrape-dirt ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 31) 120))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 6) 25))
        (v1-6 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 6) 60))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 (the-as int s3-0))))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-6)))
    )
  (none)
  )

(defpartgroup group-sat-scrape-dust
  :id 462
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 1818 :flags (sp7)))
  )

(defpart 1818
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 4.0)
    (:scale-x (meters 1) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 150.0)
    (:g 120.0)
    (:b 90.0)
    (:a 32.0 64.0)
    (:vel-y (meters 0) (meters 0.006666667))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.07111111 -0.07111111)
    (:accel-y (meters 0) (meters 0.000033333334))
    (:friction 0.98)
    (:timer (seconds 5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x405c00 #x409b00))
    (:conerot-x (degrees 80) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-sat-scrape-dirt
  :id 463
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 1819 :flags (sp7)) (sp-item 1820 :flags (sp7)))
  )

(defpart 1819
  :init-specs ((:texture (water-drops level-default-sprite))
    (:birth-func 'spt-birth-func-part-sat-scrape-dirt)
    (:num 10.0)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.01) (meters 0.01))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.033333335) (degrees 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 5 1 0 #x406500 #x404a00))
    (:conerot-x (degrees 20))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defun spt-birth-func-part-sat-scrape-dirt ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-sat-scrape-dirt arg0 arg1 arg2)
  (none)
  )

(defpart 1820
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-sat-scrape-rocks)
    (:num 8.0)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.1) (meters 0.1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.016666668) (meters 0.033333335))
    (:rotvel-z (degrees -1) (degrees 2))
    (:accel-y (meters -0.0033333334))
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-x (degrees 20))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defun spt-birth-func-part-sat-scrape-rocks ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-sat-scrape-dirt arg0 arg1 arg2)
  (none)
  )

(defpartgroup group-neo-satellite-buildup-scene
  :id 464
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1821 :flags (is-3d sp7) :period (seconds 10) :length (seconds 1))
    (sp-item 1822 :flags (sp7) :period (seconds 10) :length (seconds 0.035))
    )
  )

(defpart 1821
  :init-specs ((:texture (light-burst level-default-sprite))
    (:num 0.2 0.2)
    (:scale-x (meters 40) (meters 40))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 0))
    (:r 128.0)
    (:g 64.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-y (meters 0.033333335))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:func 'sparticle-track-root)
    (:next-time (seconds 0.167))
    (:next-launcher 1823)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1823
  :init-specs ((:scalevel-y (meters 0)))
  )

(defpart 1822
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 32.0)
    (:b 255.0)
    (:a 0.0)
    (:fade-a 0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    (:func 'sparticle-track-root)
    )
  )

(defpartgroup group-neo-satellite-explode-scene
  :id 465
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1824 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1825 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1826 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1827 :period (seconds 30) :length (seconds 0.167))
    (sp-item 1828 :period (seconds 30) :length (seconds 0.335))
    (sp-item 1829 :period (seconds 30) :length (seconds 0.667) :offset 300)
    (sp-item 1830 :period (seconds 30) :length (seconds 0.117))
    )
  )

(defpart 1830
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 10.0)
    (:y (meters -3.5) (meters 2))
    (:scale-x (meters 5))
    (:rot-x 4)
    (:scale-y (meters 0.2) (meters 0.4))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:omega (degrees 0.0675))
    (:vel-y (meters 0.26666668) (meters 0.33333334))
    (:fade-a -0.51 -0.51)
    (:accel-y (meters -0.0033333334) (meters -0.0016666667))
    (:friction 0.9 0.08)
    (:timer (seconds 1.5) (seconds 0.997))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 140))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1829
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 10.0)
    (:x (meters -5) (meters 10))
    (:y (meters -5) (meters 10))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 0.05) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 255.0)
    (:a 120.0 120.0)
    (:omega (degrees 0.045))
    (:vel-y (meters 0) (meters 0.01))
    (:fade-a -0.17 -0.1275)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.017))
    (:next-launcher 1831)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1831
  :init-specs ((:accel-x (meters -0.0033333334) 1 (meters 0.006666667))
    (:accel-y (meters -0.0033333334) 1 (meters 0.006666667))
    (:accel-z (meters -0.0033333334) 1 (meters 0.006666667))
    (:next-time (seconds 0.067) (seconds 0.03))
    (:next-launcher 1831)
    )
  )

(defpart 1824
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 160.0)
    (:g 0.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 1825
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 160.0)
    (:g 30.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.06666667)
    (:fade-g -0.025)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.99)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1827
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0 20.0)
    (:g 30.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.6666667) (meters 0.26666668))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.13333334)
    (:fade-g -0.05)
    (:fade-a -0.21333334 -0.21333334)
    (:friction 0.8)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1828
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0)
    (:x (meters -4) (meters 8))
    (:y (meters -4) (meters 8))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.13333334) (meters 0.06666667))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-14))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-sat-explo-scene-color* (new 'static 'curve-color-fast
                                          :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                          :ys (new 'static 'inline-array vector 4
                                            (new 'static 'vector :x 32.0 :z 128.0 :w 128.0)
                                            (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                            (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                            (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                            )
                                          :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *range-sat-explo-scene-alpha* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                          :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                          :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *range-sat-explo-scene-scale-x* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                            :ys (new 'static 'vector :x 20.0 :y 40.0 :z 41.0 :w 42.0)
                                            :one-over-x-deltas (new 'static 'vector :x 20.0 :y 1.0 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *range-sat-explo-scene-scale-y* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                            :ys (new 'static 'vector :x 20.0 :y 40.0 :z 41.0 :w 42.0)
                                            :one-over-x-deltas (new 'static 'vector :x 20.0 :y 1.0 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *curve-sat-explo-scene-alpha* (new 'static 'curve2d-fast
                                          :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                          :ys (new 'static 'vector :y 1.0 :z 0.8)
                                          :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                          )
          )
    )

(if #t
    (set! *curve-sat-explo-scene-scale-x* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                            :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                            :one-over-x-deltas (new 'static 'vector :x 5.0 :y 0.625 :z 1.0 :w 1.0)
                                            )
          )
    )

(if #t
    (set! *curve-sat-explo-scene-scale-y* (new 'static 'curve2d-fast
                                            :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                            :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                            :one-over-x-deltas (new 'static 'vector :x 5.0 :y 0.625 :z 1.0 :w 1.0)
                                            )
          )
    )

(define *part-neo-satellite-explosion-texture-scene-curve-settings* (new 'static 'particle-curve-settings
                                                                      :lifetime-base (seconds 0.7)
                                                                      :lifetime-offset (seconds 0.6)
                                                                      :flags (particle-curve-flags pcf0)
                                                                      )
        )

(set! (-> *part-id-table* 1828 init-specs 16 initial-valuef)
      (the-as float *part-neo-satellite-explosion-texture-scene-curve-settings*)
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* color-start)
      *range-sat-explo-scene-color*
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* alpha-start)
      *range-sat-explo-scene-alpha*
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* scale-x-start)
      *range-sat-explo-scene-scale-x*
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* scale-y-start)
      *range-sat-explo-scene-scale-y*
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* r-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* g-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* b-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* a-scalar) *curve-sat-explo-scene-alpha*)

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* scale-x-scalar)
      *curve-sat-explo-scene-scale-x*
      )

(set! (-> *part-neo-satellite-explosion-texture-scene-curve-settings* scale-y-scalar)
      *curve-sat-explo-scene-scale-y*
      )

(defpart 1826
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 30))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0)
    (:g 40.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpartgroup group-wascity-pre-game-crystal-glow
  :id 466
  :flags (sp0 sp4 sp12)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1832 :flags (sp6 sp7)))
  )

(defpart 1832
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 0.2 0.5)
    (:x (meters -0.05) (meters 0.1))
    (:y (meters -0.05) (meters 0.1))
    (:z (meters -0.05) (meters 0.1))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-x (degrees 0.9))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 2 128.0)
    (:g 0.0 1 128.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-z (meters 0))
    (:fade-a 0.21333334 0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.4096)
    (:func 'spt-func-relative-pos)
    (:next-time (seconds 0.5) (seconds 0.497))
    (:next-launcher 1833)
    )
  )

(defpart 1833
  :init-specs ((:fade-a -0.42666668))
  )

(defpartgroup group-wascity-pre-game-crystal-creation
  :id 467
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1834 :flags (sp6 sp7))
    (sp-item 1835 :flags (sp6 sp7))
    (sp-item 1836 :flags (sp7))
    (sp-item 1837 :flags (sp7))
    )
  )

(defpart 1834
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.4) (meters 0.3))
    (:rot-x (degrees 22.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 60.0 10.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    )
  )

(defpart 1835
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.3))
    (:rot-x (degrees 22.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0)
    (:b 255.0)
    (:a 60.0 10.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    )
  )

(defpart 1836
  :init-specs ((:texture (tinyspeck level-default-sprite))
    (:num 10.0)
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 32.0 64.0)
    (:g 32.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.1125))
    (:vel-y (meters 0.006666667) (meters 0.006666667))
    (:friction 0.96)
    (:timer (seconds 0.5) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1837
  :init-specs ((:texture (lightning-anim-01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.0 2.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 100.0)
    (:b 255.0)
    (:a 128.0 128.0)
    (:scalevel-x (meters -0.006666667) (meters 0.013333334))
    (:rotvel-z (degrees -0.53333336) (degrees 1.0666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.017) (seconds 0.13))
    (:flags (sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:userdata :data (new 'static 'boxed-array :type int32 5 1 0 #x405700 #x405800 #x405900))
    )
  )

(defpartgroup group-wascity-pre-game-res-text
  :id 468
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1838 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017))
    (sp-item 1839 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 5)
    (sp-item 1840 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 10)
    (sp-item 1841 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 15)
    (sp-item 1842 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 20)
    (sp-item 1843 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 20)
    (sp-item 1844 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 15)
    (sp-item 1845 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 10)
    (sp-item 1846 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 5)
    (sp-item 1847 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017))
    (sp-item 1848 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 5)
    (sp-item 1849 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 10)
    (sp-item 1850 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 15)
    (sp-item 1851 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017) :offset 20)
    (sp-item 1852 :flags (is-3d sp7) :period (seconds 0.335) :length (seconds 0.017))
    )
  )

(defpart 1838
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.4))
    (:y (meters 0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1853
  :init-specs ((:a 16.0 64.0) (:next-time (seconds 0.017)) (:next-launcher 1853))
  )

(defpart 1839
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.2))
    (:y (meters 0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1840
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1841
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.2))
    (:y (meters 0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1842
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.4))
    (:y (meters 0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1843
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.4))
    (:y (meters 0))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1844
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.2))
    (:y (meters 0))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1845
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 0))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1846
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.2))
    (:y (meters 0))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1847
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.4))
    (:y (meters 0))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1848
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.4))
    (:y (meters -0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1849
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters -0.2))
    (:y (meters -0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1850
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1851
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.2))
    (:y (meters -0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1852
  :init-specs ((:texture (dp-text-01 wasseem-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:x (meters 0.4))
    (:y (meters -0.25))
    (:z (meters 0.02))
    (:scale-x (meters 0.2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       0
                       0
                       #x7b700000
                       #x7b700100
                       #x7b700200
                       #x7b700300
                       #x7b700400
                       #x7b700500
                       #x7b700600
                       #x7b700700
                       #x7b700800
                       #x7b700900
                       #x7b700a00
                       #x7b700b00
                       #x7b700c00
                       #x7b700d00
                       #x7b700e00
                       #x7b700f00
                       )
               )
    (:next-time (seconds 0.017))
    (:next-launcher 1853)
    (:rotate-y (degrees 90))
    )
  )

(defpartgroup group-wasteland-scenes-leaper-dust
  :id 469
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1854 :flags (sp7)))
  )

(defpart 1854
  :init-specs ((:texture (edge-cloud level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 3.0)
    (:z (meters -1) (meters 2))
    (:scale-x (meters 0.5) (meters 1.5))
    (:rot-z (degrees 90) (degrees 10))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 80.0)
    (:b 60.0)
    (:a 64.0)
    (:vel-x (meters 0.016666668) (meters 0.016666668))
    (:vel-y (meters 0.006666667))
    (:scalevel-x (meters 0.0016666667) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x409b00 #x405c00))
    (:rotate-y (degrees 90))
    )
  )

(defpartgroup group-day-star-fma
  :id 470
  :flags (sp1)
  :bounds (static-bspherem 0 0 0 70)
  :parts ((sp-item 1855 :flags (sp6)) (sp-item 1856 :flags (sp6)))
  )

(defpart 1855
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2))
    (:rot-x (degrees 1125))
    (:rot-z (degrees 30))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:omega (degrees 0))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 12.0)
    )
  )

(defpart 1856
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 1125))
    (:rot-z (degrees 30))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 0.0)
    (:b 128.0)
    (:a 64.0)
    (:omega (degrees 0))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 13.0)
    )
  )

(defpartgroup group-wascity-palace-fire-beacon
  :id 471
  :flags (sp0 sp4 sp11)
  :bounds (static-bspherem 0 0 0 1000)
  :parts ((sp-item 1857 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    (sp-item 1858 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    (sp-item 1859 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    )
  )

(defpart 1857
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 0.5)
    (:y (meters 0))
    (:scale-x (meters 1))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 0.0)
    (:vel-y (meters 0.016666668) (meters 0.033333335))
    (:accel-y (meters 0.00066666666) (meters 0.00066666666))
    (:friction 0.99)
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 130))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-color-wascity-palace-fire-beacon-flame*
          (new 'static 'curve-color-fast
            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
            :ys (new 'static 'inline-array vector 4
              (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
              (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
              (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
              (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
              )
            :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
    )

(if #t
    (set! *range-alpha-wascity-palace-fire-beacon-flame*
          (new 'static 'curve2d-fast
            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
            :ys (new 'static 'vector :x 96.0 :y 255.0 :z 256.0 :w 257.0)
            :one-over-x-deltas (new 'static 'vector :x 159.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
    )

(if #t
    (set! *range-scale-wascity-palace-fire-beacon-flame-x*
          (new 'static 'curve2d-fast
            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
            :ys (new 'static 'vector :x 40.0 :y 56.0 :z 57.0 :w 58.0)
            :one-over-x-deltas (new 'static 'vector :x 16.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
    )

(if #t
    (set! *range-scale-wascity-palace-fire-beacon-flame-y*
          (new 'static 'curve2d-fast
            :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
            :ys (new 'static 'vector :x 52.0 :y 60.0 :z 61.0 :w 62.0)
            :one-over-x-deltas (new 'static 'vector :x 8.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
    )

(if #t
    (set! *r-curve-wascity-palace-fire-beacon-flame* (new 'static 'curve2d-fast
                                                       :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                                       :ys (new 'static 'vector :x 0.2 :y 1.0 :z 1.0 :w 1.0)
                                                       :one-over-x-deltas (new 'static 'vector :x 1.6 :w 1.0)
                                                       )
          )
    )

(if #t
    (set! *g-curve-wascity-palace-fire-beacon-flame* (new 'static 'curve2d-fast
                                                       :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                                       :ys (new 'static 'vector :y 1.0 :z 0.8 :w 0.2)
                                                       :one-over-x-deltas (new 'static 'vector :x 2.0 :y -1.0 :z -2.0 :w 1.0)
                                                       )
          )
    )

(if #t
    (set! *b-curve-wascity-palace-fire-beacon-flame* (new 'static 'curve2d-fast
                                                       :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                                       :ys (new 'static 'vector :x 1.0 :y 1.0)
                                                       :one-over-x-deltas (new 'static 'vector :y -5.0000005 :w 1.0)
                                                       )
          )
    )

(if #t
    (set! *curve-alpha-wascity-palace-fire-beacon-flame*
          (new 'static 'curve2d-fast
            :xs (new 'static 'vector :y -0.4 :z -0.7 :w -1.0)
            :ys (new 'static 'vector :z 1.0 :w 0.2)
            :one-over-x-deltas (new 'static 'vector :y 3.3333335 :z -2.6666665 :w 1.0)
            )
          )
    )

(if #t
    (set! *curve-wascity-palace-fire-beacon-flame-x* (new 'static 'curve2d-fast
                                                       :xs (new 'static 'vector :y -0.5 :z -0.6 :w -1.0)
                                                       :ys (new 'static 'vector :x 0.3 :y 0.6 :z 0.5 :w 0.2)
                                                       :one-over-x-deltas (new 'static 'vector :x 0.6 :y -1.0 :z -0.75000006 :w 1.0)
                                                       )
          )
    )

(if #t
    (set! *curve-wascity-palace-fire-beacon-flame-y* (new 'static 'curve2d-fast
                                                       :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                                       :ys (new 'static 'vector :x 0.2 :y 0.4 :z 0.5 :w 0.6)
                                                       :one-over-x-deltas (new 'static 'vector :x 0.4 :y 0.5 :z 0.3333334 :w 1.0)
                                                       )
          )
    )

(define *part-wascity-palace-fire-beacon-flame-curve-settings* (new 'static 'particle-curve-settings
                                                                 :lifetime-base (seconds 2)
                                                                 :lifetime-offset (seconds 2)
                                                                 :flags (particle-curve-flags pcf1)
                                                                 )
        )

(set! (-> *part-id-table* 1857 init-specs 16 initial-valuef)
      (the-as float *part-wascity-palace-fire-beacon-flame-curve-settings*)
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* color-start)
      *range-color-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* alpha-start)
      *range-alpha-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* scale-x-start)
      *range-scale-wascity-palace-fire-beacon-flame-x*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* scale-y-start)
      *range-scale-wascity-palace-fire-beacon-flame-y*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* r-scalar)
      *r-curve-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* g-scalar)
      *g-curve-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* b-scalar)
      *b-curve-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* a-scalar)
      *curve-alpha-wascity-palace-fire-beacon-flame*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* scale-x-scalar)
      *curve-wascity-palace-fire-beacon-flame-x*
      )

(set! (-> *part-wascity-palace-fire-beacon-flame-curve-settings* scale-y-scalar)
      *curve-wascity-palace-fire-beacon-flame-y*
      )

(defpart 1858
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.2)
    (:y (meters 10))
    (:scale-x (meters 100) (meters 6))
    (:rot-x (degrees 225))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 0.0)
    (:a 0.0)
    (:omega (degrees 2250011.2))
    (:fade-a 0.2)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-3 glow set-conerot))
    (:userdata 4096.0)
    (:next-time (seconds 0.5))
    (:next-launcher 1860)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1860
  :init-specs ((:fade-a -0.2))
  )

(defpart 1859
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.1)
    (:x (meters -10) (meters 20))
    (:y (meters 20))
    (:z (meters -10) (meters 20))
    (:scale-x (meters 20) (meters 4))
    (:rot-z (degrees 160) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 100.0)
    (:b 10.0)
    (:a 0.0)
    (:scalevel-x (meters 0.033333335) (meters 0.016666668))
    (:rotvel-z (degrees -0.033333335) (degrees 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.13333334 0.13333334)
    (:accel-y (meters 0.0013333333))
    (:friction 0.98)
    (:timer (seconds 20))
    (:flags (sp-cpuinfo-flag-2 launch-along-z))
    (:next-time (seconds 2))
    (:next-launcher 1861)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1861
  :init-specs ((:scalevel-x (meters 0.026666667) (meters 0.013333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.14222223)
    (:fade-g 0.031111112)
    (:fade-b 0.13111112)
    (:fade-a -0.032)
    (:next-time (seconds 2))
    (:next-launcher 1862)
    )
  )

(defpart 1862
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b 0.0)
    (:accel-y (meters 0.00066666666))
    )
  )

(defpartgroup group-waswide-chimney
  :id 472
  :bounds (static-bspherem 0 0 -12 24)
  :parts ((sp-item 1863 :fade-after (meters 200) :falloff-to (meters 300))
    (sp-item 1864 :fade-after (meters 200) :flags (sp6))
    )
  )

(defpart 1864
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters 1))
    (:scale-x (meters 16) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 240.0)
    (:b 100.0)
    (:a 12.0 4.0)
    (:omega (degrees 4518))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 6144.0)
    )
  )

(defpart 1863
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.0 0.5)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.03) (meters 0.01))
    (:scalevel-x (meters 0.026666667) (meters 0.006666667))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.36)
    (:fade-b -4.24)
    (:fade-a -0.053333335 -0.053333335)
    (:accel-x (meters -0.00066666666) (meters -0.00033333333))
    (:accel-y (meters 0.0001) (meters 0.0001))
    (:friction 0.96)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x400000 #x400000 #x400700))
    (:next-time (seconds 0.085) (seconds 0.015))
    (:next-launcher 1865)
    )
  )

(defpart 1865
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:next-time (seconds 0.035) (seconds 0.13)) (:next-launcher 1866))
  )

(defpart 1866
  :init-specs ((:scalevel-x (meters 0.013333334) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.14666666)
    (:fade-g -0.7866667)
    (:fade-b -0.88)
    (:next-time (seconds 0.35) (seconds 0.147))
    (:next-launcher 1867)
    )
  )

(defpart 1867
  :init-specs ((:scalevel-x (meters 0.006666667) (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.2944444)
    (:fade-g -0.7111111)
    (:fade-b -0.094444446)
    (:next-time (seconds 0.5) (seconds 0.097))
    (:next-launcher 1868)
    )
  )

(defpart 1868
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.024))
  )

(defpartgroup group-waswide-chimney-smoke
  :id 473
  :bounds (static-bspherem 0 0 -12 48)
  :parts ((sp-item 1869 :fade-after (meters 600) :falloff-to (meters 700)))
  )

(defpart 1869
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.05 0.08)
    (:scale-x (meters 0.5) (meters 2))
    (:rot-z (degrees 0) (degrees 20))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 200.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters 0.006666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:rotvel-z (degrees 0) (degrees -0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.10666667)
    (:accel-x (meters -0.00013333333) (meters -0.00013333333))
    (:accel-y (meters 0.000016666667) (meters 0.00006666667))
    (:friction 0.99)
    (:timer (seconds 6))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 2))
    (:next-launcher 1870)
    )
  )

(defpart 1870
  :init-specs ((:scalevel-x (meters 0.01)) (:fade-a -0.053333335 -0.053333335))
  )

(defpartgroup group-waswide-chimney-double-smoke
  :id 474
  :bounds (static-bspherem 0 0 -12 48)
  :parts ((sp-item 1871 :fade-after (meters 600) :falloff-to (meters 700))
    (sp-item 1872 :fade-after (meters 600) :falloff-to (meters 700))
    )
  )

(defpart 1871
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.05 0.08)
    (:scale-x (meters 0.5) (meters 1.5))
    (:rot-z (degrees 0) (degrees 20))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 200.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters 0.006666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0016666667) (meters 0.0033333334))
    (:rotvel-z (degrees 0) (degrees -0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.10666667)
    (:accel-x (meters -0.00013333333) (meters -0.00013333333))
    (:accel-y (meters 0.000016666667) (meters 0.00006666667))
    (:friction 0.99)
    (:timer (seconds 6))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 2))
    (:next-launcher 1873)
    )
  )

(defpart 1873
  :init-specs ((:scalevel-x (meters 0.01)) (:fade-a -0.053333335 -0.053333335))
  )

(defpart 1872
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.05 0.08)
    (:scale-x (meters 1) (meters 2))
    (:rot-z (degrees 0) (degrees 20))
    (:scale-y (meters 1) (meters 1))
    (:r 200.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters 0.00033333333) (meters 0.0016666667))
    (:rotvel-z (degrees 0) (degrees -0.033333335))
    (:fade-a 0.10666667)
    (:accel-x (meters -0.00013333333) (meters -0.00013333333))
    (:accel-y (meters 0.000033333334) (meters 0.000016666667))
    (:friction 0.986)
    (:timer (seconds 6))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 2))
    (:next-launcher 1874)
    )
  )

(defpart 1874
  :init-specs ((:scalevel-x (meters 0.0033333334)) (:scalevel-y (meters 0.001)) (:fade-a -0.053333335 -0.053333335))
  )

(defpartgroup group-waswide-chimney-long-smoke
  :id 475
  :bounds (static-bspherem 0 0 -12 48)
  :parts ((sp-item 1875 :fade-after (meters 600) :falloff-to (meters 700)))
  )

(defpart 1875
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.05 0.08)
    (:scale-x (meters 0.5) (meters 2))
    (:rot-z (degrees 0) (degrees 30))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 200.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters 0.006666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:rotvel-z (degrees 0) (degrees -0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.053333335)
    (:accel-x (meters -0.00013333333) (meters -0.00026666667))
    (:accel-y (meters 0.000016666667) (meters 0.00006666667))
    (:friction 0.99)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 4))
    (:next-launcher 1876)
    )
  )

(defpart 1876
  :init-specs ((:scalevel-x (meters 0.01)) (:fade-a -0.035555556 -0.035555556))
  )

(defpartgroup group-waswide-chimney-small
  :id 476
  :bounds (static-bspherem 0 0 -12 48)
  :parts ((sp-item 1877 :fade-after (meters 300) :falloff-to (meters 350)))
  )

(defpart 1877
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.0 0.5)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 128.0)
    (:g :copy r)
    (:b :copy g)
    (:a 24.0 24.0)
    (:vel-y (meters 0.03) (meters 0.01))
    (:scalevel-x (meters 0.013333334) (meters 0.013333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.21333334)
    (:fade-g -0.21333334)
    (:fade-b -0.21333334)
    (:fade-a -0.026666667 -0.026666667)
    (:accel-x (meters -0.00066666666) (meters -0.0002))
    (:accel-y (meters 0.0001) (meters 0.0001))
    (:friction 0.96)
    (:timer (seconds 6))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x400000 #x400000 #x400700))
    (:next-time (seconds 0.25) (seconds 0.015))
    (:next-launcher 1878)
    )
  )

(defpart 1878
  :init-specs ((:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:next-time (seconds 0.35) (seconds 0.147))
    (:next-launcher 1879)
    )
  )

(defpart 1879
  :init-specs ((:scalevel-x (meters 0.0033333334) (meters 0.0033333334)) (:scalevel-y :copy scalevel-x))
  )

(defpartgroup group-waswide-steamvent
  :id 477
  :flags (sp4)
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 1880 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7))
    (sp-item 1881 :fade-after (meters 10) :falloff-to (meters 15) :flags (sp7))
    )
  )

(defpart 1880
  :init-specs ((:birth-func 'birth-func-texture-group)
    (:num 0.0 0.1)
    (:z (meters 1))
    (:scale-x (meters 1) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g :copy r)
    (:b :copy g)
    (:a 0.0)
    (:vel-y (meters 0.0033333334))
    (:vel-z (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:rotvel-z (degrees -0.1) (degrees 0.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.42666668)
    (:accel-x (meters 0.0001))
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x405c00 #x400000))
    (:next-time (seconds 0.5))
    (:next-launcher 1882)
    (:launchrot-x (degrees -5) (degrees 10))
    (:launchrot-y (degrees -5) (degrees 10))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1882
  :init-specs ((:fade-a -0.06095238 -0.06095238))
  )

(defpart 1881
  :init-specs ((:num 0.3)
    (:x (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:rot-x 8)
    (:r 2048.0)
    (:g 1024.0)
    (:b 860.16)
    (:vel-y (meters 0.0033333334))
    (:vel-z (meters 0.0033333334) (meters 0.0033333334))
    (:accel-x (meters 0.0001))
    (:timer (seconds 2))
    (:flags (distort))
    (:launchrot-x (degrees -5) (degrees 10))
    (:launchrot-y (degrees -5) (degrees 10))
    )
  )

(defpartgroup group-waswide-topdust
  :id 478
  :flags (sp4)
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 1883 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7)))
  )

(defpart 1883
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.0 0.2)
    (:x (meters -4) (meters 8))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 170.0)
    (:g 150.0)
    (:b 120.0)
    (:a 0.0)
    (:scalevel-x (meters 0.016666668))
    (:rotvel-z (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.16666667 0.16666667)
    (:accel-z (meters 0.006666667))
    (:friction 0.8 0.03)
    (:timer (seconds 1.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x405c00 #x400000))
    (:next-time (seconds 0.5))
    (:next-launcher 1884)
    )
  )

(defpart 1884
  :init-specs ((:fade-a -0.071428575 -0.071428575))
  )

(defpartgroup group-waswide-pump
  :id 479
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 1885 :fade-after (meters 100) :falloff-to (meters 140) :flags (sp7) :period (seconds 2) :length (seconds 1) :offset 200)
    (sp-item 1886 :fade-after (meters 100) :falloff-to (meters 140) :flags (is-3d sp7) :period (seconds 2) :length (seconds 1.2) :offset 200)
    (sp-item 1887 :falloff-to (meters 50) :flags (sp7) :period (seconds 2) :length (seconds 1.2) :offset 200)
    (sp-item 1888 :fade-after (meters 100) :falloff-to (meters 200) :flags (is-3d sp7) :period (seconds 2) :length (seconds 1.2) :offset 425)
    (sp-item 1889 :fade-after (meters 100) :falloff-to (meters 200) :flags (sp7) :period (seconds 2) :length (seconds 1.2) :offset 425)
    )
  )

(defpart 1888
  :init-specs ((:texture (laser-hit2 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 0.5)
    (:x (meters 0))
    (:y (meters -1.5))
    (:z (meters 2.2))
    (:scale-x (meters 0.3) (meters 0.3))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 30.0)
    (:g :copy r)
    (:b :copy r)
    (:a 128.0 64.0)
    (:scalevel-x (meters 0.013333334) (meters 0.013333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-13 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 5 0 0 #x406400 #x408200))
    (:next-time (seconds 0.167))
    (:next-launcher 1890)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1890
  :init-specs ((:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -2.55)
    (:next-time (seconds 0.085))
    (:next-launcher 1891)
    )
  )

(defpart 1891
  :init-specs ((:scalevel-x (meters 0.0016666667) (meters 0.0016666667)) (:scalevel-y :copy scalevel-x))
  )

(defpart 1889
  :init-specs ((:texture (lakedrop level-default-sprite))
    (:num 0.5)
    (:x (meters -0.2) (meters 0.4))
    (:y (meters -1.5))
    (:z (meters 2) (meters 0.4))
    (:scale-x (meters 0.05) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.0016666667) (meters -0.0033333334))
    (:vel-z (meters 0) (meters 0.00066666666))
    (:scalevel-x (meters -0.00033333333))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters 0.00016666666))
    (:friction 0.97)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1886
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 2.0 2.0)
    (:x (meters -0.05) (meters 0.1))
    (:y (meters -0.14))
    (:z (meters -0.14))
    (:scale-x (meters 0.1) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 160.0)
    (:g 160.0)
    (:b 160.0)
    (:a 32.0 32.0)
    (:vel-z (meters 0.01))
    (:scalevel-x (meters 0.0033333334))
    (:scalevel-y (meters 0.0016666667))
    (:accel-y (meters 0))
    (:timer (seconds 0.735))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 5 1 0 #x406700 #x406700 #x406700 #x406600 #x406500))
    (:func 'sparticle-rotate-to-vel-3d)
    (:next-time (seconds 0.335))
    (:next-launcher 1892)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1892
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y (meters 0)) (:accel-y (meters -0.00066666666)))
  )

(defpart 1885
  :init-specs ((:texture (tinyspeck level-default-sprite))
    (:num 0.4 0.8)
    (:x (meters -0.1) (meters 0.2))
    (:y (meters -0.14))
    (:z (meters -0.14) (meters -0.1))
    (:scale-x (meters 0.1) (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-z (meters 0.01))
    (:scalevel-x (meters 0) (meters 0.001))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters 0))
    (:timer (seconds 0.735))
    (:flags (launch-along-z left-multiply-quat))
    (:next-time (seconds 0.335))
    (:next-launcher 1893)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1893
  :init-specs ((:accel-y (meters -0.0005) (meters -0.00033333333)) (:next-time (seconds 0.017)) (:next-launcher 1894))
  )

(defpart 1894
  :init-specs ((:a 128.0 128.0) (:next-time (seconds 0.017) (seconds 0.015)) (:next-launcher 1895))
  )

(defpart 1895
  :init-specs ((:a 0.0) (:next-time (seconds 0.05) (seconds 0.165)) (:next-launcher 1894))
  )

(defpart 1887
  :init-specs ((:num 0.4 0.8)
    (:x (meters -0.1) (meters 0.2))
    (:y (meters -0.14))
    (:z (meters -0.14) (meters -0.1))
    (:rot-x 8)
    (:r 614.4)
    (:g 163.84 327.68)
    (:b 327.68)
    (:vel-z (meters 0.01))
    (:accel-y (meters 0))
    (:timer (seconds 0.735))
    (:flags (distort launch-along-z))
    (:next-time (seconds 0.335))
    (:next-launcher 1896)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1896
  :init-specs ((:accel-y (meters -0.00066666666)))
  )

(defpartgroup group-part-water-rocks-splash
  :id 480
  :duration (seconds 1)
  :linger-duration (seconds 6)
  :flags (sp0 sp9)
  :bounds (static-bspherem 0 0 0 600)
  :parts ((sp-item 1897 :fade-after (meters 300) :falloff-to (meters 300) :period (seconds 60) :length (seconds 0.2))
    (sp-item 1898 :fade-after (meters 300) :falloff-to (meters 300) :flags (is-3d) :period (seconds 60) :length (seconds 0.035) :offset 150)
    (sp-item 1899 :fade-after (meters 300) :falloff-to (meters 300) :period (seconds 60) :length (seconds 0.2) :offset 20)
    )
  )

(defpart 1897
  :init-specs ((:texture (splash level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 3.0)
    (:y (meters -3))
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:vel-z (meters 0.016666668) (meters 0.016666668))
    (:accel-y (meters -0.0011666666))
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-wrsplash-color* (new 'static 'curve-color-fast
                                   :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                   :ys (new 'static 'inline-array vector 4
                                     (new 'static 'vector :x 90.0 :y 130.0 :z 110.0 :w 128.0)
                                     (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                     (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                     (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                     )
                                   :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                   )
          )
    )

(if #t
    (set! *range-wrsplash-alpha* (new 'static 'curve2d-fast
                                   :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                   :ys (new 'static 'vector :x 128.0 :y 255.0 :z 256.0 :w 257.0)
                                   :one-over-x-deltas (new 'static 'vector :x 127.0 :y 1.0 :z 1.0 :w 1.0)
                                   )
          )
    )

(if #t
    (set! *range-wrsplash-scale-x* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'vector :x 2.0 :y 8.0 :z 9.0 :w 10.0)
                                     :one-over-x-deltas (new 'static 'vector :x 6.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *range-wrsplash-scale-y* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -0.9 :z -1.0 :w -2.0)
                                     :ys (new 'static 'vector :x 6.0 :y 30.0 :z 40.0 :w 41.0)
                                     :one-over-x-deltas (new 'static 'vector :x 26.666668 :y 99.99998 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *curve-wrsplash-alpha* (new 'static 'curve2d-fast
                                   :xs (new 'static 'vector :y -0.1 :z -1.0 :w -2.0)
                                   :ys (new 'static 'vector :y 1.0 :w 1.0)
                                   :one-over-x-deltas (new 'static 'vector :x 10.0 :y -1.1111112 :z 1.0 :w 1.0)
                                   )
          )
    )

(if #t
    (set! *curve-wrsplash-scale-x* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'vector :x 1.0 :y 3.0 :z 4.0 :w 5.0)
                                     :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *curve-wrsplash-scale-y* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -0.2 :z -0.3 :w -1.0)
                                     :ys (new 'static 'vector :y 2.5 :z 4.0 :w 4.0)
                                     :one-over-x-deltas (new 'static 'vector :x 12.5 :y 14.999999 :w 1.0)
                                     )
          )
    )

(define *part-water-rocks-splash-curve-settings*
  (new 'static 'particle-curve-settings :lifetime-base (seconds 1.5) :lifetime-offset (seconds 1))
  )

(set! (-> *part-id-table* 1897 init-specs 16 initial-valuef)
      (the-as float *part-water-rocks-splash-curve-settings*)
      )

(set! (-> *part-water-rocks-splash-curve-settings* color-start) *range-wrsplash-color*)

(set! (-> *part-water-rocks-splash-curve-settings* alpha-start) *range-wrsplash-alpha*)

(set! (-> *part-water-rocks-splash-curve-settings* scale-x-start) *range-wrsplash-scale-x*)

(set! (-> *part-water-rocks-splash-curve-settings* scale-y-start) *range-wrsplash-scale-y*)

(set! (-> *part-water-rocks-splash-curve-settings* r-scalar) #f)

(set! (-> *part-water-rocks-splash-curve-settings* g-scalar) #f)

(set! (-> *part-water-rocks-splash-curve-settings* b-scalar) #f)

(set! (-> *part-water-rocks-splash-curve-settings* a-scalar) *curve-wrsplash-alpha*)

(set! (-> *part-water-rocks-splash-curve-settings* scale-x-scalar) *curve-wrsplash-scale-x*)

(set! (-> *part-water-rocks-splash-curve-settings* scale-y-scalar) #f)

(defpart 1898
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 1.0)
    (:x (meters 0) (meters 4))
    (:y (meters 1.5))
    (:scale-x (meters 5) (meters 3))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y (meters 5) (meters 3))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.033333335) (meters 0.016666668))
    (:scalevel-y (meters 0.033333335) (meters 0.016666668))
    (:fade-a -0.21333334)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 1899
  :init-specs ((:texture (water-drops level-default-sprite))
    (:num 3.0)
    (:x (meters 0) (meters 1))
    (:y (meters 5))
    (:scale-x (meters 2) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.033333335) (meters 0.06666667))
    (:scalevel-x (meters 0.01) (meters 0.0033333334))
    (:rotvel-z (degrees -0.1) (degrees 0.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.064 -0.064)
    (:accel-y (meters -0.0011666666))
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-13 sp-cpuinfo-flag-14))
    (:func 'check-drop-group-center)
    (:conerot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-part-water-wave-foam
  :id 481
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 400)
  :parts ((sp-item 1901 :flags (is-3d sp7) :period (seconds 6) :length (seconds 0.067) :binding 1900)
    (sp-item 1900 :flags (is-3d sp2) :period (seconds 6) :length (seconds 1) :offset 25)
    )
  )

(defpart 1901
  :init-specs ((:texture (wave-foam wascityb-sprite))
    (:num 1.0)
    (:x (meters -20) (meters 40))
    (:y (meters 3))
    (:z (meters -20))
    (:scale-x (meters 10) (meters 10))
    (:scale-y (meters 1) (meters 3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-y (meters 0.001))
    (:vel-z (meters 0.06666667) (meters 0.016666668))
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:scalevel-y (meters 0.026666667) (meters 0.013333334))
    (:fade-a 0.064)
    (:accel-z (meters -0.0005) (meters -0.00006666667))
    (:friction 0.99)
    (:timer (seconds 6.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:next-time (seconds 2.5))
    (:next-launcher 1902)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1902
  :init-specs ((:fade-a -0.1024 -0.1024))
  )

(defpart 1900
  :init-specs ((:texture (water-froth wascityb-sprite))
    (:num 0.1)
    (:x (meters -20) (meters 40))
    (:scale-x (meters 20))
    (:scale-y (meters 20))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-z (meters -0.000033333334))
    (:fade-a 0.42666668)
    (:timer (seconds 3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:func 'sparticle-turn-to-vel)
    (:next-time (seconds 0.5))
    (:next-launcher 1903)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1903
  :init-specs ((:scalevel-y (meters 0.033333335)) (:fade-a 0.0) (:next-time (seconds 1)) (:next-launcher 1904))
  )

(defpart 1904
  :init-specs ((:accel-z (meters -0.001)) (:next-time (seconds 0.335)) (:next-launcher 1905))
  )

(defpart 1905
  :init-specs ((:fade-a -0.32 -0.32))
  )

(defpartgroup group-part-wascityb-birds
  :id 482
  :bounds (static-bspherem 0 0 0 600)
  :parts ((sp-item 1906 :flags (sp3))
    (sp-item 1907 :flags (sp3))
    (sp-item 1908 :flags (sp3))
    (sp-item 1909 :flags (sp3))
    (sp-item 1910 :flags (sp3))
    (sp-item 1911 :flags (sp3))
    (sp-item 1912 :flags (sp3))
    (sp-item 1913 :flags (sp3))
    (sp-item 1914 :flags (sp3))
    (sp-item 1915 :flags (sp3))
    )
  )

(defpart 1906
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird1-path)
    )
  )

(defun part-wascityb-bird1-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1906 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) 0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) 0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) 1.7320508)
      (set! (-> v1-11 z) 2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 8192.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1906) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1907
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.6))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 100.0)
    (:b 100.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301f00
                       #x3b302000
                       #x3b302200
                       #x3b302300
                       #x3b302500
                       #x3b302600
                       #x3b302800
                       #x3b302900
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird2-path)
    )
  )

(defun part-wascityb-bird2-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1907 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) 0.0)
    (set! (-> s2-0 y) 1.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 2.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) 0.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 32768.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1907) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-10 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1908
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.7))
    (:scale-y :copy scale-x)
    (:r 120.0)
    (:g 120.0)
    (:b 120.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       )
               )
    (:func 'part-wascityb-bird3-path)
    )
  )

(defun part-wascityb-bird3-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1908 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 20480.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1908) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1909
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.8))
    (:scale-y :copy scale-x)
    (:r 90.0)
    (:g 90.0)
    (:b 90.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird4-path)
    )
  )

(defun part-wascityb-bird4-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1909 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) -0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) -1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 16384.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1909) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1910
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.9))
    (:scale-y :copy scale-x)
    (:r 110.0)
    (:g 110.0)
    (:b 110.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird5-path)
    )
  )

(defun part-wascityb-bird5-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1910 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) -1.0)
    (set! (-> s2-0 y) 0.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 0.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) -4.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 24576.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1910) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-10 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1911
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird6-path)
    )
  )

(defun part-wascityb-bird6-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1911 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) -0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) -1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 10240.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1911) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1912
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.6))
    (:scale-y :copy scale-x)
    (:r 100.0)
    (:g 100.0)
    (:b 100.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301f00
                       #x3b302000
                       #x3b302200
                       #x3b302300
                       #x3b302500
                       #x3b302600
                       #x3b302800
                       #x3b302900
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird7-path)
    )
  )

(defun part-wascityb-bird7-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1912 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) 0.0)
    (set! (-> s2-0 y) -1.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) -2.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) 0.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 34816.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1912) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-10 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1913
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.7))
    (:scale-y :copy scale-x)
    (:r 120.0)
    (:g 120.0)
    (:b 120.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       )
               )
    (:func 'part-wascityb-bird8-path)
    )
  )

(defun part-wascityb-bird8-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1913 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) 0.57735026)
    (set! (-> s3-0 y) -0.57735026)
    (set! (-> s3-0 z) 0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) -1.1547005)
      (set! (-> v1-11 y) 1.7320508)
      (set! (-> v1-11 z) 2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 22528.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1913) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1914
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.8))
    (:scale-y :copy scale-x)
    (:r 90.0)
    (:g 90.0)
    (:b 90.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b301f00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302300
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302700
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       #x3b302b00
                       )
               )
    (:func 'part-wascityb-bird9-path)
    )
  )

(defun part-wascityb-bird9-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1914 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) 0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) 0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) 1.7320508)
      (set! (-> v1-11 z) 2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 18432.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1914) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1915
  :init-specs ((:texture (flying-bird-01 wascityb-sprite))
    (:num 1.0)
    (:scale-x (meters 2.9))
    (:scale-y :copy scale-x)
    (:r 110.0)
    (:g 110.0)
    (:b 110.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       5
                       1
                       0
                       #x3b301c00
                       #x3b301d00
                       #x3b301e00
                       #x3b302000
                       #x3b302100
                       #x3b302200
                       #x3b302400
                       #x3b302500
                       #x3b302600
                       #x3b302800
                       #x3b302900
                       #x3b302a00
                       )
               )
    (:func 'part-wascityb-bird10-path)
    )
  )

(defun part-wascityb-bird10-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1915 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) 1.0)
    (set! (-> s2-0 y) 0.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 0.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) 4.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 26624.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1915) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-10 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpartgroup group-part-wascitya-flies
  :id 483
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 1916 :flags (sp3 sp6)) (sp-item 1917 :flags (sp3 sp6)) (sp-item 1918 :flags (sp3 sp6)))
  )

(defpart 1916
  :init-specs ((:texture (shell-casing-03 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 20.0)
    (:g 20.0)
    (:b 0.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:func 'part-wascitya-fly1-path)
    )
  )

(defun part-wascitya-fly1-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1916 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) 0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) 0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) 1.7320508)
      (set! (-> v1-11 z) 2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 409.6)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1916) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1917
  :init-specs ((:texture (shell-casing-03 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.15))
    (:scale-y :copy scale-x)
    (:r 20.0)
    (:g 20.0)
    (:b 0.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:func 'part-wascitya-fly2-path)
    )
  )

(defun part-wascitya-fly2-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1917 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s2-0 x) 0.0)
    (set! (-> s2-0 y) 1.0)
    (set! (-> s2-0 z) 0.0)
    (set! (-> s2-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-9 x) 2.0)
      (set! (-> v1-9 y) 0.0)
      (set! (-> v1-9 z) 0.0)
      (set! (-> v1-9 w) 1.0)
      (let ((s3-1
              (vector-cross! (new 'stack-no-clear 'vector) s2-0 (vector-cross! (new 'stack-no-clear 'vector) s2-0 v1-9))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s3-1 4096.0)
        (vector-rotate-around-axis! s3-1 (the-as quaternion s3-1) f28-0 s2-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1917) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-10 (-> arg1 key))
                   (v1-16 (-> a0-10 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-10 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-16 x) (-> s3-1 x)))
              (set! (-> arg2 y) (+ (-> v1-16 y) (-> s3-1 y)))
              (set! (-> arg2 z) (+ (-> v1-16 z) (-> s3-1 z)))
              0.0
              (let ((a0-14 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-17 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-14 s5-1)))
                    (vector-float*! v1-17 a0-14 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-17)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpart 1918
  :init-specs ((:texture (shell-casing-03 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.22))
    (:scale-y :copy scale-x)
    (:r 20.0)
    (:g 20.0)
    (:b 0.0)
    (:a 128.0)
    (:omega (degrees 3.2958984) (degrees 6.591797))
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-13))
    (:func 'part-wascitya-fly3-path)
    )
  )

(defun part-wascitya-fly3-path ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (sparticle-texture-animate arg0 arg1 arg2)
  (let ((f30-0
          (/ (the float
                  (- (the-as int (-> *part-id-table* 1918 init-specs 9 initial-valuef)) (the-as uint (-> arg1 timer)))
                  )
             (-> arg1 omega)
             )
          )
        (s3-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) -0.57735026)
    (set! (-> s3-0 y) 0.57735026)
    (set! (-> s3-0 z) -0.57735026)
    (set! (-> s3-0 w) 1.0)
    (let ((f28-0 (* 182.04445 (* 360.0 f30-0)))
          (v1-11 (new 'stack-no-clear 'vector))
          )
      (set! (-> v1-11 x) 1.1547005)
      (set! (-> v1-11 y) -1.7320508)
      (set! (-> v1-11 z) -2.309401)
      (set! (-> v1-11 w) 1.0)
      (let ((s2-1
              (vector-cross! (new 'stack-no-clear 'vector) s3-0 (vector-cross! (new 'stack-no-clear 'vector) s3-0 v1-11))
              )
            )
        (set! (-> arg1 rot-syvel quad) (the-as uint128 0))
        (vector-normalize! s2-1 6144.0)
        (vector-rotate-around-axis! s2-1 (the-as quaternion s2-1) f28-0 s3-0)
        (cond
          ((< 1.0 f30-0)
           (sp-kill-particle arg0 arg1)
           (sp-relaunch-particle-2d arg0 (-> *part-id-table* 1918) arg1 (the-as sprite-vec-data-2d arg2))
           )
          (else
            (let* ((a0-12 (-> arg1 key))
                   (v1-18 (-> a0-12 proc root trans))
                   (s5-1 (new 'stack-no-clear 'vector))
                   )
              (set! (-> s5-1 quad) (-> (the-as part-spawner (-> a0-12 proc)) last-velocity quad))
              0.0
              (set! (-> arg2 x) (+ (-> v1-18 x) (-> s2-1 x)))
              (set! (-> arg2 y) (+ (-> v1-18 y) (-> s2-1 y)))
              (set! (-> arg2 z) (+ (-> v1-18 z) (-> s2-1 z)))
              0.0
              (let ((a0-16 (-> (math-camera-matrix) fvec)))
                0.0
                (let ((v1-19 (new 'stack-no-clear 'vector)))
                  (let ((f0-22 (vector-dot a0-16 s5-1)))
                    (vector-float*! v1-19 a0-16 f0-22)
                    )
                  (vector-! s5-1 s5-1 v1-19)
                  )
                )
              (let ((a2-7 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
                (vector-matrix*! s5-1 s5-1 a2-7)
                (let ((f0-30 (the float (sar (shl (the int (atan (-> s5-1 y) (* -1.0 (-> s5-1 x)))) 48) 48))))
                  (rot-to-particle f0-30 (the-as sprite-vec-data-2d arg2) a2-7)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defpartgroup group-waswide-gaslamp
  :id 484
  :flags (sp4 sp11)
  :bounds (static-bspherem 0 0 0 40)
  :parts ((sp-item 1919 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1920 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1921 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1922 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1923 :fade-after (meters 20) :falloff-to (meters 30) :flags (sp7))
    )
  )

(defpart 1919
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0 1.0)
    (:z (meters 0.4))
    (:scale-x (meters 2.5) (meters 2))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-z (meters -0.0016666667) (meters 0.0016666667))
    (:scalevel-x (meters -0.016666668))
    (:accel-x (meters -0.001))
    (:accel-z (meters 0.0013333333) (meters 0.0013333333))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0))
    (:conerot-y (degrees 0))
    )
  )

(if #t
    (set! *range-color-flame* (new 'static 'curve-color-fast
                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                :ys (new 'static 'inline-array vector 4
                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                  (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                  (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                  (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                  )
                                :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                )
          )
    )

(if #t
    (set! *range-alpha-flame* (new 'static 'curve2d-fast
                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                :ys (new 'static 'vector :x 96.0 :y 255.0 :z 256.0 :w 257.0)
                                :one-over-x-deltas (new 'static 'vector :x 159.0 :y 1.0 :z 1.0 :w 1.0)
                                )
          )
    )

(if #t
    (set! *range-scale-flame-x* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 3.0 :y 5.0 :z 6.0 :w 7.0)
                                  :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *range-scale-flame-y* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 4.0 :y 8.0 :z 9.0 :w 10.0)
                                  :one-over-x-deltas (new 'static 'vector :x 4.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *r-curve-flame* (new 'static 'curve2d-fast
                            :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                            :ys (new 'static 'vector :x 0.2 :y 1.0 :z 1.0 :w 1.0)
                            :one-over-x-deltas (new 'static 'vector :x 1.6 :w 1.0)
                            )
          )
    )

(if #t
    (set! *g-curve-flame* (new 'static 'curve2d-fast
                            :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                            :ys (new 'static 'vector :y 1.0 :z 0.8 :w 0.2)
                            :one-over-x-deltas (new 'static 'vector :x 2.0 :y -1.0 :z -2.0 :w 1.0)
                            )
          )
    )

(if #t
    (set! *b-curve-flame* (new 'static 'curve2d-fast
                            :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                            :ys (new 'static 'vector :x 1.0 :y 1.0)
                            :one-over-x-deltas (new 'static 'vector :y -5.0000005 :w 1.0)
                            )
          )
    )

(if #t
    (set! *curve-alpha-flame* (new 'static 'curve2d-fast
                                :xs (new 'static 'vector :y -0.4 :z -0.7 :w -1.0)
                                :ys (new 'static 'vector :x 0.01 :y 0.01 :z 1.0 :w 0.2)
                                :one-over-x-deltas (new 'static 'vector :y 3.3000002 :z -2.6666665 :w 1.0)
                                )
          )
    )

(if #t
    (set! *curve-flame-x* (new 'static 'curve2d-fast
                            :xs (new 'static 'vector :y -0.5 :z -0.6 :w -1.0)
                            :ys (new 'static 'vector :x 0.3 :y 0.6 :z 0.5 :w 0.2)
                            :one-over-x-deltas (new 'static 'vector :x 0.6 :y -1.0 :z -0.75000006 :w 1.0)
                            )
          )
    )

(if #t
    (set! *curve-flame-y* (new 'static 'curve2d-fast
                            :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                            :ys (new 'static 'vector :x 0.2 :y 0.4 :z 0.5 :w 0.6)
                            :one-over-x-deltas (new 'static 'vector :x 0.4 :y 0.5 :z 0.3333334 :w 1.0)
                            )
          )
    )

(define *part-gas-lamp-flame-curve-settings* (new 'static 'particle-curve-settings
                                               :lifetime-base (seconds 0.3)
                                               :lifetime-offset (seconds 0.2)
                                               :flags (particle-curve-flags pcf1)
                                               )
        )

(set! (-> *part-id-table* 1919 init-specs 17 initial-valuef)
      (the-as float *part-gas-lamp-flame-curve-settings*)
      )

(set! (-> *part-gas-lamp-flame-curve-settings* color-start) *range-color-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* alpha-start) *range-alpha-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* scale-x-start) *range-scale-flame-x*)

(set! (-> *part-gas-lamp-flame-curve-settings* scale-y-start) *range-scale-flame-y*)

(set! (-> *part-gas-lamp-flame-curve-settings* r-scalar) *r-curve-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* g-scalar) *g-curve-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* b-scalar) *b-curve-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* a-scalar) *curve-alpha-flame*)

(set! (-> *part-gas-lamp-flame-curve-settings* scale-x-scalar) *curve-flame-x*)

(set! (-> *part-gas-lamp-flame-curve-settings* scale-y-scalar) *curve-flame-y*)

(defpart 1920
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 1.0 1.0)
    (:x (meters -0.3) (meters 0.6))
    (:y (meters -0.3) (meters 0.6))
    (:z (meters 0.3))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees -90))
    (:scale-y :copy scale-x)
    (:r 10.0 20.0)
    (:g 10.0 20.0)
    (:b 200.0)
    (:a 64.0)
    (:scalevel-x (meters -0.00033333333))
    (:fade-a -0.64)
    (:accel-x (meters -0.001))
    (:accel-z (meters 0.0013333333) (meters 0.0013333333))
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1921
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.4)
    (:x (meters -1))
    (:z (meters 2.5))
    (:scale-x (meters 12) (meters 6))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 32.0)
    (:a 8.0 4.0)
    (:omega (degrees 11261.25))
    (:timer (seconds 0.167) (seconds 0.08))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1922
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.3) (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-z (meters 0.06666667) (meters 0.016666668))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:accel-x (meters 0.0016666667))
    (:friction 0.95)
    (:timer (seconds 2) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-x (degrees -20) (degrees 40))
    (:conerot-y (degrees -20) (degrees 40))
    (:rotate-y (degrees -40))
    (:rotate-z (degrees 0))
    )
  )

(defpart 1923
  :init-specs ((:num 0.2)
    (:x (meters 0) (meters 2))
    (:y (meters -0.5) (meters 1))
    (:z (meters 6))
    (:rot-x 8)
    (:r 8192.0)
    (:g 1228.8)
    (:b 1024.0)
    (:accel-x (meters 0.001))
    (:accel-z (meters 0.0016666667))
    (:timer (seconds 0.335))
    (:flags (distort))
    (:rotate-y (degrees -30))
    )
  )

(defpartgroup group-waswide-talltorch
  :id 485
  :flags (sp4)
  :bounds (static-bspherem 0 0 -12 40)
  :parts ((sp-item 1924 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1925 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    (sp-item 1926 :fade-after (meters 200) :falloff-to (meters 300) :flags (sp7))
    )
  )

(defpart 1924
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0 1.0)
    (:z (meters 0.4))
    (:scale-x (meters 2.5) (meters 2))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 200.0)
    (:a 0.0)
    (:vel-z (meters -0.0016666667) (meters 0.0016666667))
    (:scalevel-x (meters -0.016666668))
    (:accel-x (meters -0.001))
    (:accel-z (meters 0.0013333333) (meters 0.0013333333))
    (:timer (seconds 0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0))
    (:conerot-y (degrees 0))
    )
  )

(define *part-talltorch-flame-curve-settings* (new 'static 'particle-curve-settings
                                                :lifetime-base (seconds 0.3)
                                                :lifetime-offset (seconds 0.2)
                                                :flags (particle-curve-flags pcf1)
                                                )
        )

(set! (-> *part-id-table* 1924 init-specs 17 initial-valuef)
      (the-as float *part-talltorch-flame-curve-settings*)
      )

(set! (-> *part-talltorch-flame-curve-settings* color-start) *range-color-flame*)

(set! (-> *part-talltorch-flame-curve-settings* alpha-start) *range-alpha-flame*)

(set! (-> *part-talltorch-flame-curve-settings* scale-x-start) *range-scale-flame-x*)

(set! (-> *part-talltorch-flame-curve-settings* scale-y-start) *range-scale-flame-y*)

(set! (-> *part-talltorch-flame-curve-settings* r-scalar) *r-curve-flame*)

(set! (-> *part-talltorch-flame-curve-settings* g-scalar) *g-curve-flame*)

(set! (-> *part-talltorch-flame-curve-settings* b-scalar) *b-curve-flame*)

(set! (-> *part-talltorch-flame-curve-settings* a-scalar) *curve-alpha-flame*)

(set! (-> *part-talltorch-flame-curve-settings* scale-x-scalar) *curve-flame-x*)

(set! (-> *part-talltorch-flame-curve-settings* scale-y-scalar) *curve-flame-y*)

(defpart 1925
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.4)
    (:x (meters -1))
    (:z (meters 2.5))
    (:scale-x (meters 12) (meters 6))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 3599))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 32.0)
    (:a 8.0 4.0)
    (:omega (degrees 11261.25))
    (:timer (seconds 0.167) (seconds 0.08))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1926
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 0.01 0.05)
    (:scale-x (meters 0.3) (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 8.0)
    (:a 255.0)
    (:vel-z (meters 0.06666667) (meters 0.016666668))
    (:fade-g -0.16666667)
    (:fade-b -5.0)
    (:fade-a -1.7)
    (:accel-x (meters 0.0016666667))
    (:friction 0.95)
    (:timer (seconds 2) (seconds 0.497))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-x (degrees -20) (degrees 40))
    (:conerot-y (degrees -20) (degrees 40))
    (:rotate-y (degrees -40))
    (:rotate-z (degrees 0))
    )
  )
