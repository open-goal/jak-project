;;-*-Lisp-*-
(in-package goal)

;; name: cty-faction.gc
;; name in dgo: cty-faction
;; dgos: DESRESC, WWD, CWI

;; +++exclusive-nav-info-mask
(defenum exclusive-nav-info-mask
  :type uint8
  :bitfield #t
  (eni0 0)
  (eni1 1)
  (eni2 2)
  (eni3 3)
  (eni4 4)
  (eni5 5)
  (eni6 6)
  (eni7 7)
  )
;; ---exclusive-nav-info-mask


;; DECOMP BEGINS

(define *territory-list* (new 'static 'boxed-array :type pair '(#f) '(#f) '(#f) '(#f) '(#f) '(#f)))

(define *default-faction-info*
  (new 'static 'boxed-array :type cty-faction-info :length 21 :allocated-length 30
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 4 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 2 :kg-guard -2 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 2 :ff-ped -6 :kg-guard 1 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 1 :ff-ped -6 :kg-guard 2 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -2 :ff-ped -6 :kg-guard 4 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -4 :ff-ped -6 :kg-guard 4 :kg-ped 4 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -4 :ff-ped -6 :kg-guard 4 :kg-ped 4 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -2 :ff-ped -6 :kg-guard 4 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-ped -6 :kg-guard 2 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 2 :ff-ped -6 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :kg-guard -2 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 4 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 4 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 4 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -4 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -4 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard -4 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 4 :ff-ped 2 :kg-guard -4 :kg-ped -6 :mh-guard -2 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard 2 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard 1 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -2 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard 2 :mh-ped -6)
    (new 'static 'cty-faction-info :ff-guard -2 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard 4 :mh-ped 2)
    (new 'static 'cty-faction-info :ff-guard -4 :ff-ped -6 :kg-guard -4 :kg-ped -6 :mh-guard 4 :mh-ped 4)
    )
  )

(define *default-faction-mod* (new 'static 'cty-faction-info))

(define *default-faction-strength-mod* (new 'static 'cty-faction-strength))

(defun setup-city-task-faction ()
  (cond
    ((task-node-closed? (game-task-node city-power-game-resolution))
     (cty-faction-evaluate-commands '((faction-strength ff ind 5)
                                      (faction-strength mh ind 5)
                                      (faction-strength kg slum 5)
                                      (faction-strength kg port 1)
                                      (faction-strength mh port 1)
                                      )
                                    )
     )
    ((task-node-closed? (game-task-node city-blow-barricade-resolution))
     (cty-faction-evaluate-commands '((faction-strength kg 1) (faction-strength kg slum 1)))
     )
    ((task-node-closed? (game-task-node city-blow-barricade-resolution))
     (cty-faction-evaluate-commands '((faction-strength kg slum 1)))
     )
    ((task-node-closed? (game-task-node city-destroy-grid-resolution))
     (cty-faction-evaluate-commands '((faction-strength kg slum -5)
                                      (faction-strength mh port 0)
                                      (faction-strength kg indb-kg-ff-border -5)
                                      (faction-strength kg indb-kg -5)
                                      (faction-strength kg indb-kg-deep -5)
                                      (faction-strength kg sluma-ff-kg-border -5)
                                      )
                                    )
     )
    ((task-node-closed? (game-task-node city-destroy-darkeco-resolution))
     (cty-faction-evaluate-commands '((faction-strength mh port -1)))
     )
    ((task-node-closed? (game-task-node city-port-attack-resolution))
     (cty-faction-evaluate-commands
       '((faction-strength mh -5) (faction-strength ff ind -5) (faction-spawn mh off))
       )
     )
    (else
      (cty-faction-evaluate-commands '((faction-strength ff ind -5)
                                       (faction-strength mh -5)
                                       (faction-strength kg -5)
                                       (faction-spawn kg off)
                                       (faction-spawn mh off)
                                       )
                                     )
      )
    )
  )

(defmethod restore-defaults ((this cty-faction-manager))
  (dotimes (s5-0 (-> *default-faction-info* allocated-length))
    (set! (-> this faction-array s5-0) (-> *default-faction-info* s5-0))
    (mem-copy! (the-as pointer (-> this faction-mod-array s5-0)) (the-as pointer *default-faction-mod*) 6)
    )
  (mem-copy!
    (the-as pointer (-> this global-faction-strength-mod))
    (the-as pointer *default-faction-strength-mod*)
    3
    )
  (dotimes (s5-1 4)
    (mem-copy!
      (the-as pointer (-> this territory-faction-strength-mod s5-1))
      (the-as pointer *default-faction-strength-mod*)
      3
      )
    )
  (set! (-> this last-requested-level) #f)
  (dotimes (v1-13 3)
    (set! (-> this territory-faction-flags data v1-13) (the-as uint 0))
    )
  (dotimes (v1-16 30)
    (logior! (-> this territory-flags v1-16) 3)
    )
  (set! (-> this last-active-territories) (the-as uint 0))
  (cty-faction-manager-method-19 this)
  (dotimes (v1-21 7)
    (set! (-> this faction-spawn v1-21 faction-type) (the-as uint v1-21))
    (set! (-> this faction-spawn v1-21 requested-level) (the-as uint 3))
    (set! (-> this faction-spawn v1-21 flags) (faction-spawn-flag))
    )
  (let ((v0-4 (logior (-> this update-flags) (cty-faction-update-flag cfu0))))
    (set! (-> this update-flags) v0-4)
    v0-4
    )
  )

(defmethod cty-faction-manager-method-19 ((this cty-faction-manager))
  (dotimes (v1-0 30)
    (set! (-> this permission-cache v1-0) (the-as uint 4))
    )
  #f
  )

(defmethod cty-faction-manager-method-10 ((this cty-faction-manager) (arg0 int) (arg1 symbol))
  (-> this territory-faction-modes 0 data (+ (cty-faction-manager-method-18 this arg1) (* arg0 16)))
  )

(defmethod cty-faction-manager-method-11 ((this cty-faction-manager) (arg0 int))
  (-> this territory-flags arg0)
  )

(defmethod cty-faction-manager-method-14 ((this cty-faction-manager) (arg0 nav-territory-type) (arg1 int) (arg2 int))
  (local-vars (gp-0 int))
  (when (= arg0 (nav-territory-type invalid))
    (set! gp-0 0)
    (goto cfg-14)
    )
  (let ((v1-5 (-> this faction-array arg0)))
    (set! gp-0 0)
    (when (or (zero? v1-5) (not v1-5))
      (set! gp-0 gp-0)
      (goto cfg-14)
      )
    (let ((a0-5 (-> this faction-mod-array arg0))
          (s3-0 (-> this global-faction-strength-mod data arg2))
          (v1-7 (-> v1-5 data arg1))
          )
      -1
      (let* ((s2-0 (+ v1-7 (-> a0-5 data arg2)))
             (v1-15
               (+ s3-0
                  (-> this territory-faction-strength-mod 0 data (+ arg2 (* (cty-faction-manager-method-16 this arg0) 16)))
                  s2-0
                  )
               )
             )
        (cond
          ((zero? v1-15)
           (set! gp-0 (logior gp-0 1))
           )
          ((> v1-15 0)
           (set! gp-0 (logior gp-0 3))
           )
          )
        )
      )
    )
  (label cfg-14)
  gp-0
  )

(defmethod cty-faction-manager-method-9 ((this cty-faction-manager) (arg0 int) (arg1 symbol))
  (local-vars (a1-2 int) (a1-4 int))
  (if (not arg1)
      (return 0)
      )
  (if (= arg1 'ctywide)
      (return 3)
      )
  (cond
    ((= arg1 (-> this last-requested-level))
     (let ((v1-7 (-> this permission-cache arg0)))
       (when (not (logtest? v1-7 4))
         (let ((v1-8 (logand -5 v1-7)))
           (let ((a0-5 (-> *perf-stats* data 55)))
             (b! (zero? (-> a0-5 ctrl)) cfg-10 :delay (nop!))
             (.mtc0 Perf 0)
             (.sync.l)
             (.sync.p)
             (.mfpc a1-2 pcr0)
             (+! (-> a0-5 accum0) a1-2)
             (.mfpc a1-4 pcr1)
             (+! (-> a0-5 accum1) a1-4)
             )
           (label cfg-10)
           0
           (return (the-as int v1-8))
           )
         )
       )
     )
    (else
      (set! (-> this last-requested-level) arg1)
      (cty-faction-manager-method-19 this)
      )
    )
  (let* ((s3-0 (cty-faction-manager-method-17 this arg1))
         (a3-0 (cty-faction-manager-method-18 this arg1))
         (v0-0 (cty-faction-manager-method-14 this (the-as nav-territory-type arg0) s3-0 a3-0))
         )
    (set! (-> this permission-cache arg0) (the-as uint v0-0))
    v0-0
    )
  )

(defmethod cty-faction-manager-method-16 ((this cty-faction-manager) (arg0 nav-territory-type))
  (case arg0
    (((nav-territory-type port-ff-deep)
      (nav-territory-type port-ff-near-kg)
      (nav-territory-type port-ff-kg-border)
      (nav-territory-type port-ff-near-mh)
      (nav-territory-type port-ff-mh-border)
      )
     0
     )
    (((nav-territory-type inda-kg-ff-border)
      (nav-territory-type inda-kg)
      (nav-territory-type inda-kg-deep)
      (nav-territory-type indb-kg-deep)
      (nav-territory-type indb-kg)
      (nav-territory-type indb-kg-ff-border)
      )
     1
     )
    (((nav-territory-type sluma-ff-kg-border)
      (nav-territory-type sluma-ff)
      (nav-territory-type sluma-ff-deep)
      (nav-territory-type slumb-ff-deep)
      (nav-territory-type slumc-ff-deep)
      (nav-territory-type genc-border)
      (nav-territory-type genc)
      )
     2
     )
    (((nav-territory-type mhcity-mh-ff-border) (nav-territory-type mhcity-mh) (nav-territory-type mhcity-mh-deep))
     3
     )
    (else
      (format 0 "Trying to use an unknown territory type ~d~%" arg0)
      (break!)
      0
      )
    )
  )

(defmethod cty-faction-manager-method-17 ((this cty-faction-manager) (arg0 symbol))
  (case arg0
    (('ctypesa)
     0
     )
    (('ctycara 'ctycarb 'ctypepa)
     1
     )
    (('ctypesc)
     2
     )
    (('ctypepc 'ctycarkg 'lctyhijk)
     3
     )
    (('ctypesb 'ctygenb)
     4
     )
    (('ctypepb)
     5
     )
    (else
      (break!)
      0
      )
    )
  )

(defmethod cty-faction-manager-method-18 ((this cty-faction-manager) (arg0 symbol))
  (case arg0
    (('ctycara 'ctycarb 'ctypesa 'ctypepa)
     0
     )
    (('ctypepc 'ctypesc)
     1
     )
    (('ctypepb 'ctypesb 'ctygenb)
     2
     )
    (else
      (break!)
      0
      )
    )
  )

(deftype exclusive-nav-mesh-info (structure)
  ((aid             uint32)
   (exclusive-mask  exclusive-nav-info-mask)
   )
  )


(define *exclusive-nav-mesh-list*
  (new 'static 'boxed-array :type exclusive-nav-mesh-info
    (new 'static 'exclusive-nav-mesh-info :aid #xd0ae :exclusive-mask (exclusive-nav-info-mask eni0 eni1))
    (new 'static 'exclusive-nav-mesh-info :aid #xd0a8 :exclusive-mask (exclusive-nav-info-mask eni0 eni1 eni2))
    (new 'static 'exclusive-nav-mesh-info :aid #xd0a9 :exclusive-mask (exclusive-nav-info-mask eni1 eni2 eni3))
    (new 'static 'exclusive-nav-mesh-info :aid #xd0aa :exclusive-mask (exclusive-nav-info-mask eni2 eni3 eni4))
    (new 'static 'exclusive-nav-mesh-info :aid #xd0ad :exclusive-mask (exclusive-nav-info-mask eni3 eni4))
    (new 'static 'exclusive-nav-mesh-info :aid #xd0af :exclusive-mask (exclusive-nav-info-mask eni5 eni6))
    (new 'static 'exclusive-nav-mesh-info :aid #xd2dc :exclusive-mask (exclusive-nav-info-mask eni1 eni2))
    (new 'static 'exclusive-nav-mesh-info :aid #xd2dd :exclusive-mask (exclusive-nav-info-mask eni0 eni1 eni2))
    (new 'static 'exclusive-nav-mesh-info :aid #xd22b :exclusive-mask (exclusive-nav-info-mask eni3 eni4))
    (new 'static 'exclusive-nav-mesh-info :aid #xd22c :exclusive-mask (exclusive-nav-info-mask eni0 eni3 eni4))
    (new 'static 'exclusive-nav-mesh-info :aid #xd2de :exclusive-mask (exclusive-nav-info-mask eni5 eni6 eni7))
    (new 'static 'exclusive-nav-mesh-info :aid #xd2df :exclusive-mask (exclusive-nav-info-mask eni0 eni6 eni7))
    (new 'static 'exclusive-nav-mesh-info
      :aid #xd2e0
      :exclusive-mask (exclusive-nav-info-mask eni0 eni2 eni4 eni7)
      )
    )
  )

(defmethod cty-faction-manager-method-23 ((this cty-faction-manager) (arg0 uint))
  (if (zero? (-> this target-exclusive-branch-index))
      (return #t)
      )
  (logtest? (-> this target-exclusive-branch-index) arg0)
  )

(defmethod cty-faction-manager-method-13 ((this cty-faction-manager))
  (local-vars (v1-9 int))
  (set! (-> this target-exclusive-branch-index) (the-as uint 0))
  (when *target*
    (let ((v1-2 (find-nearest-nav-mesh (target-pos 0) (the-as float #x7f800000))))
      (cond
        (v1-2
          (let ((v1-4 (-> v1-2 entity aid)))
            (dotimes (a0-3 (-> *exclusive-nav-mesh-list* length))
              (when (= v1-4 (-> *exclusive-nav-mesh-list* a0-3 aid))
                (set! v1-9 (the-as int (-> *exclusive-nav-mesh-list* a0-3 exclusive-mask)))
                (goto cfg-9)
                )
              )
            )
          (set! v1-9 0)
          (label cfg-9)
          (set! (-> this target-exclusive-branch-index) (the-as uint v1-9))
          )
        (else
          (set! (-> this target-exclusive-branch-index) (the-as uint 0))
          0
          )
        )
      )
    )
  (when (logtest? (-> this update-flags) (cty-faction-update-flag cfu0))
    (dotimes (s5-1 30)
      (when (logtest? (-> this territory-flags s5-1) 1)
        (set! (-> this territory-faction-modes s5-1 kg-mode) (the-as uint 0))
        (set! (-> this territory-faction-modes s5-1 ff-mode) (the-as uint 0))
        (set! (-> this territory-faction-modes s5-1 mh-mode) (the-as uint 0))
        (let ((s2-0 (cty-faction-manager-method-14 this (the-as nav-territory-type s5-1) 1 0))
              (s4-0 (cty-faction-manager-method-14 this (the-as nav-territory-type s5-1) 0 0))
              (s3-0 (cty-faction-manager-method-14 this (the-as nav-territory-type s5-1) 2 1))
              (v1-31 (cty-faction-manager-method-14 this (the-as nav-territory-type s5-1) 4 2))
              )
          (when (or (logtest? s2-0 2) (logtest? s4-0 1))
            (let ((a0-13 #f))
              (when (logtest? s3-0 1)
                (if (not (logtest? (-> this territory-faction-flags kg-mode) 1))
                    (set! (-> this territory-faction-modes s5-1 kg-mode) (the-as uint 1))
                    )
                (set! a0-13 #t)
                )
              (when (logtest? v1-31 1)
                (if (not (logtest? (-> this territory-faction-flags mh-mode) 1))
                    (set! (-> this territory-faction-modes s5-1 mh-mode) (the-as uint 1))
                    )
                (set! a0-13 #t)
                )
              (when (and a0-13 (logtest? s4-0 1))
                (when (not (logtest? (-> this territory-faction-flags ff-mode) 1))
                  (set! (-> this territory-faction-modes s5-1 ff-mode) (the-as uint 1))
                  (if (logtest? (-> this last-active-territories) (ash 1 s5-1))
                      #t
                      )
                  )
                )
              )
            )
          )
        )
      )
    )
  (let ((s5-2 #f))
    (when (-> *setting-control* user-current attack)
      (dotimes (s4-1 30)
        (when (logtest? (-> this last-active-territories) (ash 1 s4-1))
          (let ((s3-1 (cty-faction-manager-method-14 this (the-as nav-territory-type s4-1) 2 1)))
            (if (or (logtest? (cty-faction-manager-method-14 this (the-as nav-territory-type s4-1) 4 2) 2) (logtest? s3-1 2))
                (set! s5-2 #t)
                )
            )
          )
        )
      )
    (cond
      (s5-2
        (when (or (= (status-of-level-and-borrows *level* 'ctypesc #f) 'active)
                  (= (status-of-level-and-borrows *level* 'ctypesb #f) 'active)
                  )
          (if (zero? (-> this start-fight-music-time))
              (set-time! (-> this start-fight-music-time))
              )
          (when (and (> (-> this start-fight-music-time) 0) (time-elapsed? (-> this start-fight-music-time) (seconds 5)))
            (persist-with-delay *setting-control* 'cty-faction-music (seconds 1000) 'music 'fight1 0.0 0)
            (set-time! (-> this last-change-music-time))
            )
          )
        )
      (else
        (set! (-> this start-fight-music-time) 0)
        (when (or (time-elapsed? (-> this last-change-music-time) (seconds 6))
                  (not (-> *setting-control* user-current attack))
                  )
          (persist-with-delay *setting-control* 'cty-faction-music 0 'music 'city1 0.0 0)
          (set-time! (-> this last-change-music-time))
          )
        )
      )
    )
  (when (logtest? (-> this update-flags) (cty-faction-update-flag cfu0))
    (remove-setting! 'borrow-city)
    (set-setting! 'borrow-city (-> *territory-list* 0) 0.0 0)
    (add-borrow-levels *load-state*)
    )
  (logclear! (-> this update-flags) (cty-faction-update-flag cfu0))
  (cty-faction-manager-method-24 this)
  )

(defmethod cty-faction-manager-method-21 ((this cty-faction-manager) (arg0 int))
  (let ((v1-0 arg0))
    (cond
      ((= v1-0 2)
       'ctypesb
       )
      ((zero? v1-0)
       'ctypesa
       )
      ((= v1-0 1)
       'ctypesc
       )
      )
    )
  )

(defmethod cty-faction-manager-method-20 ((this cty-faction-manager) (arg0 uint))
  (local-vars (sv-16 int) (sv-17 int) (sv-18 int))
  (if (= arg0 (-> this last-active-territories))
      (return 0)
      )
  (set! (-> this last-active-territories) arg0)
  (let ((s4-0 (-> *territory-list* 0))
        (s3-0 1)
        (s2-0 0)
        )
    (set! (car s4-0) #f)
    (set! (cdr s4-0) '())
    (dotimes (s1-0 30)
      (let ((s0-0 s1-0))
        (when (and (logtest? (-> this territory-flags s0-0) 2) (logtest? arg0 (ash 1 s0-0)))
          (set! sv-16 (cty-faction-manager-method-14 this (the-as nav-territory-type s0-0) 0 0))
          (set! sv-17 (cty-faction-manager-method-14 this (the-as nav-territory-type s0-0) 2 1))
          (set! sv-18 (cty-faction-manager-method-14 this (the-as nav-territory-type s0-0) 4 2))
          (when (and (logtest? sv-17 2) (not (logtest? s2-0 2)))
            (when (!= (car s4-0) #f)
              (set! (cdr s4-0) (-> *territory-list* s3-0))
              (+! s3-0 1)
              (set! s4-0 (cdr s4-0))
              )
            (set! s2-0 (logior s2-0 2))
            (set! (car s4-0) (cty-faction-manager-method-21 this 1))
            (set! (cdr s4-0) '())
            )
          (when (and (logtest? sv-16 2) (not (logtest? s2-0 1)))
            (when (!= (car s4-0) #f)
              (set! (cdr s4-0) (-> *territory-list* s3-0))
              (+! s3-0 1)
              (set! s4-0 (cdr s4-0))
              )
            (set! s2-0 (logior s2-0 1))
            (set! (car s4-0) (cty-faction-manager-method-21 this 0))
            (set! (cdr s4-0) '())
            )
          (when (and (logtest? sv-18 2) (not (logtest? s2-0 4)))
            (when (!= (car s4-0) #f)
              (set! (cdr s4-0) (-> *territory-list* s3-0))
              (+! s3-0 1)
              (set! s4-0 (cdr s4-0))
              )
            (set! s2-0 (logior s2-0 4))
            (set! (car s4-0) (cty-faction-manager-method-21 this 2))
            (set! (cdr s4-0) '())
            )
          (logior! (-> this update-flags) (cty-faction-update-flag cfu0))
          )
        )
      )
    )
  (the-as int #f)
  )

(defmethod cty-faction-manager-method-22 ((this cty-faction-manager))
  (set! (-> this last-active-territories) (the-as uint 0))
  (let ((v0-0 (logior (-> this update-flags) (cty-faction-update-flag cfu0))))
    (set! (-> this update-flags) v0-0)
    v0-0
    )
  )

;; WARN: Return type mismatch int vs nav-territory-type.
(defun map-symbol-to-nav-territory-type ((arg0 symbol))
  (let ((v1-0 arg0))
    (the-as nav-territory-type (cond
                                 ((= v1-0 'port-ff-deep)
                                  (nav-territory-type port-ff-deep)
                                  )
                                 ((= v1-0 'port-ff-near-kg)
                                  (nav-territory-type port-ff-near-kg)
                                  )
                                 ((= v1-0 'port-ff-kg-border)
                                  (nav-territory-type port-ff-kg-border)
                                  )
                                 ((= v1-0 'inda-kg-ff-border)
                                  (nav-territory-type inda-kg-ff-border)
                                  )
                                 ((= v1-0 'inda-kg)
                                  (nav-territory-type inda-kg)
                                  )
                                 ((= v1-0 'inda-kg-deep)
                                  (nav-territory-type inda-kg-deep)
                                  )
                                 ((= v1-0 'indb-kg-deep)
                                  (nav-territory-type indb-kg-deep)
                                  )
                                 ((= v1-0 'indb-kg)
                                  (nav-territory-type indb-kg)
                                  )
                                 ((= v1-0 'indb-kg-ff-border)
                                  (nav-territory-type indb-kg-ff-border)
                                  )
                                 ((= v1-0 'sluma-ff-kg-border)
                                  (nav-territory-type sluma-ff-kg-border)
                                  )
                                 ((= v1-0 'sluma-ff)
                                  (nav-territory-type sluma-ff)
                                  )
                                 ((= v1-0 'sluma-ff-deep)
                                  (nav-territory-type sluma-ff-deep)
                                  )
                                 ((= v1-0 'slumb-ff-deep)
                                  (nav-territory-type slumb-ff-deep)
                                  )
                                 ((= v1-0 'slumc-ff-deep)
                                  (nav-territory-type slumc-ff-deep)
                                  )
                                 ((= v1-0 'genc-border)
                                  (nav-territory-type genc-border)
                                  )
                                 ((= v1-0 'genc)
                                  (nav-territory-type genc)
                                  )
                                 ((= v1-0 'port-ff-near-mh)
                                  (nav-territory-type port-ff-near-mh)
                                  )
                                 ((= v1-0 'port-ff-mh-border)
                                  (nav-territory-type port-ff-mh-border)
                                  )
                                 ((= v1-0 'mhcity-mh-ff-border)
                                  (nav-territory-type mhcity-mh-ff-border)
                                  )
                                 ((= v1-0 'mhcity-mh)
                                  (nav-territory-type mhcity-mh)
                                  )
                                 ((= v1-0 'mhcity-mh-deep)
                                  (nav-territory-type mhcity-mh-deep)
                                  )
                                 ((= v1-0 'special0)
                                  (nav-territory-type special0)
                                  )
                                 ((= v1-0 'special1)
                                  (nav-territory-type special1)
                                  )
                                 ((= v1-0 'special2)
                                  (nav-territory-type special2)
                                  )
                                 ((= v1-0 'special3)
                                  (nav-territory-type special3)
                                  )
                                 ((= v1-0 'special4)
                                  (nav-territory-type special4)
                                  )
                                 ((= v1-0 'special5)
                                  (nav-territory-type special5)
                                  )
                                 ((= v1-0 'special6)
                                  (nav-territory-type special6)
                                  )
                                 ((= v1-0 'special7)
                                  (nav-territory-type special7)
                                  )
                                 ((= v1-0 'special8)
                                  (nav-territory-type special8)
                                  )
                                 (else
                                   (break!)
                                   (nav-territory-type genc)
                                   )
                                 )
            )
    )
  )

;; WARN: Return type mismatch int vs object.
(defun cty-faction-evaluate-commands ((arg0 pair))
  (local-vars (v1-23 object))
  (let ((s5-0 (car arg0)))
    (while (not (null? arg0))
      (case (car s5-0)
        (('restore-defaults)
         (restore-defaults *cty-faction-manager*)
         )
        (('faction-spawn)
         (let* ((v1-3 (ref s5-0 1))
                (s4-0 (cond
                        ((= v1-3 'kg-guard)
                         0
                         )
                        ((= v1-3 'mh-guard)
                         1
                         )
                        ((= v1-3 'ff-guard)
                         2
                         )
                        ((= v1-3 'ff-ped)
                         3
                         )
                        ((= v1-3 'ff-vehicle)
                         4
                         )
                        ((= v1-3 'kg-ambient)
                         5
                         )
                        ((= v1-3 'mh-ambient)
                         6
                         )
                        (else
                          6
                          )
                        )
                      )
                (v1-4 (ref s5-0 2))
                (a2-0 (cond
                        ((= v1-4 'off)
                         0
                         )
                        ((= v1-4 'suppress-x)
                         1
                         )
                        ((= v1-4 'suppress)
                         2
                         )
                        ((= v1-4 'default)
                         3
                         )
                        ((= v1-4 'war)
                         4
                         )
                        ((= v1-4 'war3)
                         3
                         )
                        ((= v1-4 'combat)
                         7
                         )
                        ((= v1-4 'mission)
                         7
                         )
                        ((= v1-4 'mission-hi)
                         7
                         )
                        ((= v1-4 'mission-suppress)
                         5
                         )
                        ((= v1-4 'mission-suppress-x)
                         3
                         )
                        (else
                          0
                          )
                        )
                      )
                )
           (faction-spawn *cty-faction-manager* s4-0 a2-0 #t #f)
           )
         )
        (('faction-set-flags)
         (let* ((v1-7 (ref s5-0 1))
                (s4-1 (cond
                        ((= v1-7 'mh)
                         2
                         )
                        ((= v1-7 'kg)
                         1
                         )
                        ((= v1-7 'ff)
                         0
                         )
                        (else
                          (break!)
                          0
                          )
                        )
                      )
                (v1-8 (ref s5-0 2))
                )
           0
           (if (= v1-8 'no-war)
               (logior! (-> *cty-faction-manager* territory-faction-flags data s4-1) 1)
               )
           )
         )
        (('faction-strength)
         (let ((s4-2 (ref s5-0 1))
               (s3-0 3)
               (a0-40 s5-0)
               )
           (cond
             ((= ((method-of-type (rtype-of a0-40) length) a0-40) s3-0)
              (let ((s4-3 (cond
                            ((= s4-2 'mh)
                             2
                             )
                            ((= s4-2 'kg)
                             1
                             )
                            ((= s4-2 'ff)
                             0
                             )
                            (else
                              (break!)
                              0
                              )
                            )
                          )
                    )
                (set! (-> *cty-faction-manager* global-faction-strength-mod data s4-3)
                      (the-as int (/ (the-as int (ref s5-0 2)) 8))
                      )
                )
              )
             ((begin
                (set! v1-23 (ref s5-0 2))
                (let ((a0-45 v1-23))
                  (or (= a0-45 'port) (= a0-45 'ind) (= a0-45 'slum) (= a0-45 'mhcity) (= a0-45 'city))
                  )
                )
              (let* ((s3-1 (cond
                             ((= v1-23 'port)
                              0
                              )
                             ((= v1-23 'mhcity)
                              3
                              )
                             ((= v1-23 'ind)
                              1
                              )
                             ((= v1-23 'slum)
                              2
                              )
                             ((= v1-23 'city)
                              -1
                              )
                             (else
                               (break!)
                               2
                               )
                             )
                           )
                     (v1-24 s4-2)
                     (s4-4 (cond
                             ((= v1-24 'mh)
                              2
                              )
                             ((= v1-24 'kg)
                              1
                              )
                             ((= v1-24 'ff)
                              0
                              )
                             (else
                               (break!)
                               0
                               )
                             )
                           )
                     )
                (cond
                  ((< -1 s3-1)
                   (set! (-> *cty-faction-manager* territory-faction-strength-mod 0 data (+ (* s3-1 16) s4-4))
                         (the-as int (/ (the-as int (ref s5-0 3)) 8))
                         )
                   )
                  (else
                    (dotimes (s3-2 4)
                      (set! (-> *cty-faction-manager* territory-faction-strength-mod 0 data (+ (* s3-2 16) s4-4))
                            (the-as int (/ (the-as int (ref s5-0 3)) 8))
                            )
                      )
                    )
                  )
                )
              )
             (else
               (let* ((s3-4 (map-symbol-to-nav-territory-type (the-as symbol (ref s5-0 2))))
                      (v1-30 s4-2)
                      (s4-5 (cond
                              ((or (= v1-30 'ff) (= v1-30 'ff-guard))
                               0
                               )
                              ((= v1-30 'ff-ped)
                               1
                               )
                              ((or (= v1-30 'kg) (= v1-30 'kg-guard))
                               2
                               )
                              ((= v1-30 'kg-ped)
                               3
                               )
                              ((or (= v1-30 'mh) (= v1-30 'mh-guard))
                               4
                               )
                              ((= v1-30 'mh-ped)
                               5
                               )
                              (else
                                (break!)
                                0
                                )
                              )
                            )
                      )
                 (set! (-> *cty-faction-manager* territory-faction-strength-mod 0 data (+ (* s3-4 16) s4-5))
                       (the-as int (/ (the-as int (ref s5-0 3)) 8))
                       )
                 )
               )
             )
           )
         )
        )
      (set! arg0 (cdr arg0))
      (set! s5-0 (car arg0))
      )
    )
  (cty-faction-manager-method-22 *cty-faction-manager*)
  0
  )

(defun is-faction-level-loaded? ((arg0 cty-faction-level))
  (case arg0
    (((cty-faction-level pesc))
     (= (status-of-level-and-borrows *level* 'ctypesc #f) 'active)
     )
    (((cty-faction-level pesb))
     (= (status-of-level-and-borrows *level* 'ctypesb #f) 'active)
     )
    (((cty-faction-level pesa))
     (= (status-of-level-and-borrows *level* 'ctypesa #f) 'active)
     )
    (((cty-faction-level pepa))
     (= (status-of-level-and-borrows *level* 'ctypepa #f) 'active)
     )
    (((cty-faction-level car))
     (or (= (status-of-level-and-borrows *level* 'ctycara #f) 'active)
         (= (status-of-level-and-borrows *level* 'ctycarb #f) 'active)
         )
     )
    (((cty-faction-level pepc))
     (= (status-of-level-and-borrows *level* 'ctypepc #f) 'active)
     )
    (((cty-faction-level pepb))
     (= (status-of-level-and-borrows *level* 'ctypepb #f) 'active)
     )
    )
  )

(defmethod faction-spawn ((this cty-faction-manager) (arg0 int) (arg1 int) (arg2 symbol) (arg3 symbol))
  (let ((v1-2 (-> this faction-spawn arg0)))
    (when (or arg2 (not (logtest? (-> v1-2 flags) (faction-spawn-flag fs0 fs3))))
      (set! (-> v1-2 requested-level) (the-as uint arg1))
      (if arg2
          (logior! (-> v1-2 flags) (faction-spawn-flag fs0))
          )
      (when arg3
        (let ((v0-0 (logior (-> v1-2 flags) (faction-spawn-flag fs3))))
          (set! (-> v1-2 flags) v0-0)
          v0-0
          )
        )
      )
    )
  )

(defmethod cty-faction-manager-method-24 ((this cty-faction-manager))
  (dotimes (s5-0 7)
    (if (not (is-faction-level-loaded? (the-as cty-faction-level s5-0)))
        (logior! (-> this faction-spawn s5-0 flags) (faction-spawn-flag fs2))
        )
    (set! (-> this faction-spawn s5-0 current-level) (the-as uint 0))
    (logclear! (-> this faction-spawn s5-0 flags) (faction-spawn-flag fs1))
    )
  (dotimes (s5-1 30)
    (when (logtest? (-> this last-active-territories) (ash 1 s5-1))
      (if (= (-> this territory-faction-modes s5-1 ff-mode) 1)
          (faction-spawn this 2 4 #f #f)
          )
      (if (= (-> this territory-faction-modes s5-1 kg-mode) 1)
          (faction-spawn this 0 4 #f #f)
          )
      (if (= (-> this territory-faction-modes s5-1 mh-mode) 1)
          (faction-spawn this 1 4 #f #f)
          )
      )
    )
  (let ((s5-2 0))
    0
    (let ((v1-30 (the int (lerp 20.0 0.0 (-> *setting-control* user-current city-heap-load)))))
      (dotimes (a0-24 7)
        (let ((a1-7 (-> this faction-spawn a0-24)))
          (when (and (not (logtest? (-> a1-7 flags) (faction-spawn-flag fs1 fs2)))
                     (logtest? (-> a1-7 flags) (faction-spawn-flag fs0))
                     )
            (set! (-> a1-7 current-level) (-> a1-7 requested-level))
            (logior! (-> a1-7 flags) (faction-spawn-flag fs1))
            (+! s5-2 (-> a1-7 current-level))
            )
          )
        )
      (countdown (a0-27 9)
        (when (>= s5-2 v1-30)
          0
          (goto cfg-55)
          )
        (let ((a1-10 0))
          (dotimes (a2-13 7)
            (let ((a3-7 (-> this faction-spawn a2-13)))
              (if (and (not (logtest? (-> a3-7 flags) (faction-spawn-flag fs1 fs2))) (= (-> a3-7 requested-level) a0-27))
                  (+! a1-10 1)
                  )
              )
            )
          (when (> a1-10 0)
            (let ((a3-12 (* (the-as uint a1-10) (the-as uint a0-27)))
                  (a2-17 (- v1-30 s5-2))
                  )
              0
              0
              (let ((a1-11 (/ (min (the-as int a3-12) a2-17) a1-10)))
                (if (zero? a1-11)
                    (set! a1-11 a2-17)
                    )
                (dotimes (a2-19 7)
                  (let ((a3-17 (-> this faction-spawn a2-19)))
                    (when (and (not (logtest? (-> a3-17 flags) (faction-spawn-flag fs1 fs2))) (= (-> a3-17 requested-level) a0-27))
                      (set! (-> a3-17 current-level) (the-as uint a1-11))
                      (logior! (-> a3-17 flags) (faction-spawn-flag fs1))
                      (+! s5-2 a1-11)
                      )
                    )
                  (when (>= s5-2 v1-30)
                    0
                    (goto cfg-55)
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  (label cfg-55)
  (dotimes (v1-35 7)
    (logclear! (-> this faction-spawn v1-35 flags) (faction-spawn-flag fs3))
    )
  #f
  )
