;;-*-Lisp-*-
(in-package goal)

;; name: skeet-part.gc
;; name in dgo: skeet-part
;; dgos: WCB

(define-extern *range-skeet-dust-color* curve-color-fast)
(define-extern *range-skeet-dust-alpha* curve2d-fast)
(define-extern *range-skeet-dust-scale-x* curve2d-fast)
(define-extern *range-skeet-dust-scale-y* curve2d-fast)
(define-extern *curve-skeet-dust-alpha* curve2d-fast)
(define-extern *curve-skeet-dust-scale-x* curve2d-fast)
(define-extern *curve-skeet-dust-scale-y* curve2d-fast)
(define-extern *range-skeet-color* curve-color-fast)
(define-extern *range-skeet-alpha* curve2d-fast)
(define-extern *range-skeet-scale-x* curve2d-fast)
(define-extern *range-skeet-scale-y* curve2d-fast)
(define-extern *curve-skeet-alpha* curve2d-fast)
(define-extern *curve-skeet-scale-x* curve2d-fast)
(define-extern *curve-skeet-scale-y* curve2d-fast)
(define-extern *range-skeet-splash-color* curve-color-fast)
(define-extern *range-skeet-splash-alpha* curve2d-fast)
(define-extern *range-skeet-splash-scale-x* curve2d-fast)
(define-extern *range-skeet-splash-scale-y* curve2d-fast)
(define-extern *curve-skeet-splash-alpha* curve2d-fast)
(define-extern *curve-skeet-splash-scale-x* curve2d-fast)
(define-extern *curve-skeet-splash-scale-y* curve2d-fast)

;; DECOMP BEGINS

(defpartgroup group-skeet-explosion
  :id 532
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 2094 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2095 :period (seconds 30) :length (seconds 0.035))
    (sp-item 2096 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2097 :period (seconds 30) :length (seconds 0.035))
    (sp-item 2098 :period (seconds 30) :length (seconds 0.035))
    (sp-item 2099 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2100 :period (seconds 30) :length (seconds 0.167))
    (sp-item 2101 :period (seconds 30) :length (seconds 0.5))
    (sp-item 2102 :flags (sp3) :binding 2093)
    (sp-item 2102 :flags (sp3) :binding 2093)
    (sp-item 2102 :flags (sp3) :binding 2093)
    (sp-item 2102 :flags (sp3) :binding 2093)
    (sp-item 2102 :flags (sp3) :binding 2093)
    (sp-item 2093 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 2093 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 2093 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 2093 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 2093 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

(defpart 2094
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 40.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 2095
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 0.8) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.16666667) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2096
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 160.0)
    (:b 40.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.22857143)
    (:fade-b -0.08571429)
    (:fade-a -0.36571428 -0.36571428)
    (:friction 0.93)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2097
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 8.0 8.0)
    (:g :copy r)
    (:b :copy r)
    (:a 64.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.7)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2098
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 30.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.05))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-skeet-dust-color* (new 'static 'curve-color-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'inline-array vector 4
                                       (new 'static 'vector :x 70.0 :y 70.0 :z 70.0 :w 128.0)
                                       (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                       (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                       (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                       )
                                     :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *range-skeet-dust-alpha* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'vector :x 64.0 :y 32.0 :z 33.0 :w 34.0)
                                     :one-over-x-deltas (new 'static 'vector :x -32.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *range-skeet-dust-scale-x* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                       :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-skeet-dust-scale-y* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                       :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-skeet-dust-alpha* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -0.7 :z -1.0 :w -2.0)
                                     :ys (new 'static 'vector :y 1.0 :w 1.0)
                                     :one-over-x-deltas (new 'static 'vector :x 1.4285715 :y -3.3333333 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *curve-skeet-dust-scale-x* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                       :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-skeet-dust-scale-y* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                       :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                       )
          )
    )

(define *part-skeet-explosion-dust-in-curve-settings* (new 'static 'particle-curve-settings
                                                        :lifetime-base (seconds 0.5)
                                                        :lifetime-offset (seconds 1)
                                                        :flags (particle-curve-flags pcf0)
                                                        )
        )

(set! (-> *part-id-table* 2098 init-specs 14 initial-valuef)
      (the-as float *part-skeet-explosion-dust-in-curve-settings*)
      )

(set! (-> *part-skeet-explosion-dust-in-curve-settings* color-start) *range-skeet-dust-color*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* alpha-start) *range-skeet-dust-alpha*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* scale-x-start) *range-skeet-dust-scale-x*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* scale-y-start) *range-skeet-dust-scale-y*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* r-scalar) #f)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* g-scalar) #f)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* b-scalar) #f)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* a-scalar) *curve-skeet-dust-alpha*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* scale-x-scalar) *curve-skeet-dust-scale-x*)

(set! (-> *part-skeet-explosion-dust-in-curve-settings* scale-y-scalar) *curve-skeet-dust-scale-y*)

(defpart 2100
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.7)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2101
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags ())
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-skeet-color* (new 'static 'curve-color-fast
                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                :ys (new 'static 'inline-array vector 4
                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                  (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                  )
                                :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                )
          )
    )

(if #t
    (set! *range-skeet-alpha* (new 'static 'curve2d-fast
                                :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                )
          )
    )

(if #t
    (set! *range-skeet-scale-x* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 3.0 :y 5.0 :z 6.0 :w 7.0)
                                  :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *range-skeet-scale-y* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 3.0 :y 5.0 :z 6.0 :w 7.0)
                                  :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *curve-skeet-alpha* (new 'static 'curve2d-fast
                                :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                :ys (new 'static 'vector :y 1.0 :z 0.8)
                                :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                )
          )
    )

(if #t
    (set! *curve-skeet-scale-x* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                  :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                  :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *curve-skeet-scale-y* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                  :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                  :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                  )
          )
    )

(define *part-skeet-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                        :lifetime-base (seconds 0.1)
                                                        :lifetime-offset (seconds 0.6)
                                                        :flags (particle-curve-flags pcf0)
                                                        )
        )

(set! (-> *part-id-table* 2101 init-specs 16 initial-valuef)
      (the-as float *part-skeet-explosion-texture-curve-settings*)
      )

(set! (-> *part-skeet-explosion-texture-curve-settings* color-start) *range-skeet-color*)

(set! (-> *part-skeet-explosion-texture-curve-settings* alpha-start) *range-skeet-alpha*)

(set! (-> *part-skeet-explosion-texture-curve-settings* scale-x-start) *range-skeet-scale-x*)

(set! (-> *part-skeet-explosion-texture-curve-settings* scale-y-start) *range-skeet-scale-y*)

(set! (-> *part-skeet-explosion-texture-curve-settings* r-scalar) #f)

(set! (-> *part-skeet-explosion-texture-curve-settings* g-scalar) #f)

(set! (-> *part-skeet-explosion-texture-curve-settings* b-scalar) #f)

(set! (-> *part-skeet-explosion-texture-curve-settings* a-scalar) *curve-skeet-alpha*)

(set! (-> *part-skeet-explosion-texture-curve-settings* scale-x-scalar) *curve-skeet-scale-x*)

(set! (-> *part-skeet-explosion-texture-curve-settings* scale-y-scalar) *curve-skeet-scale-y*)

(defpart 2099
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 2102
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 4))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.033333335) (meters -0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.00066666666))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 170))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2093
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 32.0)
    (:a 128.0)
    (:fade-a -0.36571428 -0.36571428)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(defpartgroup group-skeet-splash
  :id 533
  :duration (seconds 5)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 2103 :period (seconds 60) :length (seconds 0.2))
    (sp-item 2104 :flags (is-3d) :period (seconds 60) :length (seconds 0.035) :offset 150)
    (sp-item 2105 :period (seconds 60) :length (seconds 0.1) :offset 20)
    )
  )

(defpart 2103
  :init-specs ((:texture (splash level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 3.0)
    (:y (meters -3))
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:vel-z (meters 0.016666668) (meters 0.016666668))
    (:accel-y (meters -0.0011666666))
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-skeet-splash-color* (new 'static 'curve-color-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'inline-array vector 4
                                         (new 'static 'vector :x 90.0 :y 130.0 :z 110.0 :w 128.0)
                                         (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                         (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                         (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                         )
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-skeet-splash-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 128.0 :y 255.0 :z 256.0 :w 257.0)
                                       :one-over-x-deltas (new 'static 'vector :x 127.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-skeet-splash-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 2.0 :y 8.0 :z 9.0 :w 10.0)
                                         :one-over-x-deltas (new 'static 'vector :x 6.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *range-skeet-splash-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 5.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 15.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *curve-skeet-splash-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.1 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :y 1.0 :w 1.0)
                                       :one-over-x-deltas (new 'static 'vector :x 10.0 :y -1.1111112 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-skeet-splash-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 1.0 :y 3.0 :z 4.0 :w 5.0)
                                         :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *curve-skeet-splash-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.2 :z -0.3 :w -1.0)
                                         :ys (new 'static 'vector :y 1.0 :z 2.0 :w 0.1)
                                         :one-over-x-deltas (new 'static 'vector :x 5.0 :y 9.999999 :z -2.7142856 :w 1.0)
                                         )
          )
    )

(define *part-skeet-splash-curve-settings*
  (new 'static 'particle-curve-settings :lifetime-base (seconds 0.8) :lifetime-offset (seconds 0.4))
  )

(set! (-> *part-id-table* 2103 init-specs 16 initial-valuef)
      (the-as float *part-skeet-splash-curve-settings*)
      )

(set! (-> *part-skeet-splash-curve-settings* color-start) *range-skeet-splash-color*)

(set! (-> *part-skeet-splash-curve-settings* alpha-start) *range-skeet-splash-alpha*)

(set! (-> *part-skeet-splash-curve-settings* scale-x-start) *range-skeet-splash-scale-x*)

(set! (-> *part-skeet-splash-curve-settings* scale-y-start) *range-skeet-splash-scale-y*)

(set! (-> *part-skeet-splash-curve-settings* r-scalar) #f)

(set! (-> *part-skeet-splash-curve-settings* g-scalar) #f)

(set! (-> *part-skeet-splash-curve-settings* b-scalar) #f)

(set! (-> *part-skeet-splash-curve-settings* a-scalar) *curve-skeet-splash-alpha*)

(set! (-> *part-skeet-splash-curve-settings* scale-x-scalar) *curve-skeet-splash-scale-x*)

(set! (-> *part-skeet-splash-curve-settings* scale-y-scalar) *curve-skeet-splash-scale-y*)

(defpart 2104
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 1.0)
    (:x (meters 0) (meters 4))
    (:y (meters 1.5))
    (:scale-x (meters 10) (meters 10))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 2105
  :init-specs ((:texture (water-drops level-default-sprite))
    (:num 10.0)
    (:x (meters 0) (meters 1))
    (:y (meters 2))
    (:scale-x (meters 2) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.06666667) (meters 0.1))
    (:scalevel-x (meters 0.01) (meters 0.01))
    (:rotvel-z (degrees -0.1) (degrees 0.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 sp-cpuinfo-flag-14))
    (:func 'check-drop-group-center)
    (:conerot-x (degrees -10) (degrees 20))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )
