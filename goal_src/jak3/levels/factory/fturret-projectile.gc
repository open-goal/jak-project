;;-*-Lisp-*-
(in-package goal)

;; name: fturret-projectile.gc
;; name in dgo: fturret-projectile
;; dgos: LFACTORY

;; DECOMP BEGINS

(defpart 2877
  :init-specs ((:texture (common-white common))
    (:num 10.0 1.0)
    (:x (meters 0))
    (:y (meters 0))
    (:z (meters 0))
    (:scale-x (meters 1))
    (:rot-x (degrees 90))
    (:rot-y (degrees 0))
    (:rot-z (degrees 0))
    (:scale-y (meters 0.1))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:accel-y (meters -0.00033333333) (meters -0.001))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-14))
    )
  )

(defpart 2878
  :init-specs ((:texture (gun-yellow-beam level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 0.25))
    (:scale-y (meters 9))
    (:r 128.0)
    (:g 0.0 64.0)
    (:b 0.0)
    (:a 128.0)
    (:scalevel-x (meters 0.0016666667))
    (:fade-a -2.1333334)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 2879
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0 32.0)
    (:b 0.0)
    (:a 64.0)
    (:scalevel-x (meters -0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -1.6)
    (:timer (seconds 0.085))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 2880
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.0)
    (:scale-x (meters 0.3) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 2881
  :init-specs ((:texture (radial-gradient level-default-sprite))
    (:num 8.0 8.0)
    (:z (meters 0) (meters -3))
    (:scale-x (meters 0.4) (meters 0.4))
    (:scale-y (meters 0.4) (meters 0.4))
    (:r 192.0)
    (:g 64.0 128.0)
    (:b 0.0)
    (:a 64.0)
    (:scalevel-x (meters -0.00234375))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -1.2 -2.4)
    (:fade-a -0.53333336 -2.1333334)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:timer (seconds 0.8))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 2882
  :init-specs ((:texture (gun-enemy-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 4.5))
    (:r 128.0)
    (:g 0.0 128.0)
    (:b 0.0)
    (:a 128.0)
    (:fade-a -3.6571429)
    (:timer (seconds 0.117))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 2883
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-x (degrees 4.5))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 255.0)
    (:omega (degrees 4515.75))
    (:scalevel-x (meters 0.053333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -3.6571429)
    (:fade-a -7.285714)
    (:timer (seconds 0.117))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 1024.0)
    )
  )

(defpartgroup group-fturret-shot-hit-object
  :id 771
  :duration (seconds 4)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2884 :flags (sp3)) (sp-item 2885 :flags (sp7) :period (seconds 4) :length (seconds 0.1)))
  )

(defpart 2884
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:fade-a -0.21333334)
    (:timer (seconds 0.035))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 glow))
    (:userdata 16384.0)
    )
  )

(defpart 2885
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 2))
    (:rot-x 4)
    (:scale-y (meters 0.15))
    (:r 255.0)
    (:g 0.0 128.0)
    (:b 0.0)
    (:a 128.0 128.0)
    (:omega (degrees 0.0225))
    (:vel-z (meters 0.33333334) (meters 0.16666667))
    (:fade-b -0.42666668 -0.42666668)
    (:fade-a -0.21333334 -0.21333334)
    (:accel-y (meters -0.0016666667))
    (:friction 0.8 0.02)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -10) (degrees 20))
    (:conerot-y (degrees -10) (degrees 20))
    (:rotate-x (degrees -45))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-fturret-shot-hit
  :id 772
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2886 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2887 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2888 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2889 :period (seconds 30) :length (seconds 0.167))
    )
  )

(defpart 2886
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 0.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 2887
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 1) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 40.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.016666668))
    (:scalevel-x (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.4)
    (:fade-b -0.13333334)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.93)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 2888
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 15))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 2889
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 1) (meters 0.5))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.006666667) (meters 0.006666667))
    (:scalevel-x (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.26666668)
    (:fade-b -0.1)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.99)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-fturret-grenade
  :id 773
  :duration (seconds 0.5)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2890 :fade-after (meters 200) :falloff-to (meters 200)))
  )

(defpart 2890
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g :copy r)
    (:b :copy g)
    (:a 16.0 32.0)
    (:vel-y (meters 0) (meters 0.016666668))
    (:scalevel-x (meters 0.006666667) (meters 0.013333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16 -0.16)
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0))
    )
  )

(defpartgroup group-fturret-shot-die
  :id 774
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 249))
  )

(deftype fturret-shot (projectile)
  ((hit-actor?  symbol)
   (tail-pos    vector  :inline)
   )
  )


(defmethod deal-damage! ((this fturret-shot) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

(defmethod projectile-method-24 ((this fturret-shot))
  (draw-beam (-> *part-id-table* 2882) (-> this tail-pos) (-> this starting-dir) #f)
  (let* ((a0-3 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this starting-dir) 2048.0))
         (v1-2 (vector+! (new 'stack-no-clear 'vector) (-> this tail-pos) a0-3))
         (t9-2 sp-launch-particles-var)
         (a0-4 *sp-particle-system-2d*)
         (a1-4 (-> *part-id-table* 2883))
         (a2-2 *launch-matrix*)
         )
    (set! (-> a2-2 trans quad) (-> v1-2 quad))
    (t9-2 a0-4 a1-4 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
    )
  0
  (none)
  )

(defmethod projectile-method-25 ((this fturret-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((gp-0 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 a1-0))
           (f30-0 (vector-length s5-1))
           )
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (let ((v1-4 a1-0))
          (let ((a0-2 s5-1))
            (let ((a2-1 0.8))
              (.mov vf7 a2-1)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s4-0 quad) vf6)
        (let ((f28-0 (-> *part-id-table* 2878 init-specs 4 initial-valuef)))
          (set! (-> *part-id-table* 2878 init-specs 4 initial-valuef) (vector-length s5-1))
          (draw-beam (-> *part-id-table* 2878) a1-0 s5-1 #f)
          (set! (-> *part-id-table* 2878 init-specs 4 initial-valuef) f28-0)
          )
        (vector-normalize! s5-1 1.0)
        (launch-particles (-> *part-id-table* 2879) s4-0)
        (launch-particles (-> *part-id-table* 2880) s4-0)
        )
      (let ((s4-1 (new 'stack-no-clear 'matrix))
            (f26-0 (* 0.000027126736 f30-0))
            (f30-1 (-> *part-id-table* 2881 init-specs 3 initial-valuef))
            (f28-1 (-> *part-id-table* 2881 init-specs 4 initial-valuef))
            )
        (forward-up->inv-matrix s4-1 s5-1 *up-vector*)
        (set! (-> s4-1 trans quad) (-> gp-0 quad))
        (set! (-> *part-id-table* 2881 init-specs 3 initial-valuef) (* f26-0 f30-1))
        (set! (-> *part-id-table* 2881 init-specs 4 initial-valuef) (* f26-0 f28-1))
        (launch-particles (-> *part-id-table* 2881) s4-1 :origin-is-matrix #t)
        (set! (-> *part-id-table* 2881 init-specs 3 initial-valuef) f30-1)
        (set! (-> *part-id-table* 2881 init-specs 4 initial-valuef) f28-1)
        )
      )
    0
    (none)
    )
  )

(defmethod projectile-method-26 ((this fturret-shot))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this tail-pos)))
        (s3-0
          (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this tail-pos) (-> this root trans)) 2048.0)
          )
        (gp-0 (new 'stack-no-clear 'matrix))
        )
    (forward-up->inv-matrix gp-0 s4-1 *up-vector*)
    (vector+! (-> gp-0 trans) (-> this root trans) s3-0)
    (cond
      ((-> this hit-actor?)
       (if (logtest? (-> *part-group-id-table* 771 flags) (sp-group-flag sp13))
           (part-tracker-spawn
             part-tracker-subsampler
             :to *entity-pool*
             :group (-> *part-group-id-table* 771)
             :mat-joint gp-0
             )
           (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 771) :mat-joint gp-0)
           )
       )
      ((logtest? (-> *part-group-id-table* 772 flags) (sp-group-flag sp13))
       (part-tracker-spawn
         part-tracker-subsampler
         :to *entity-pool*
         :group (-> *part-group-id-table* 772)
         :mat-joint gp-0
         )
       )
      (else
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 772) :mat-joint gp-0)
        )
      )
    )
  0
  (none)
  )

(defmethod play-impact-sound ((this fturret-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "tank-fire")
       )
      ((= v1-0 (projectile-options po0 po1))
       (let ((f0-0 (doppler-pitch-shift (-> this root trans) (-> this root transv)))
             (a0-7 (static-sound-spec "turret-doppler" :group 0 :volume 0.0 :mask (pitch reg0)))
             )
         (set! (-> a0-7 volume) 1024)
         (set! (-> a0-7 pitch-mod) (the int (* 1524.0 f0-0)))
         (sound-play-by-spec a0-7 (-> this sound-id) (-> this root trans))
         )
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "laser-ricochets")
       )
      )
    )
  0
  (none)
  )

(defun fturret-shot-move ((arg0 fturret-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 36864.0 f0-0)
          (vector-normalize! s4-0 36864.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

(defmethod made-impact? ((this fturret-shot))
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a0-1 t1-0))
      (set! (-> a0-1 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a0-1 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a0-1 ignore-process0) this)
      (set! (-> a0-1 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a0-1 ignore-pat) (-> v1-0 pat-ignore-mask))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (when (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -6144.0 0.0 -2048.0 t1-0)
      (if (logtest? (-> this root status) (collide-status touch-actor))
          (set! (-> this hit-actor?) #t)
          )
      #t
      )
    )
  )

(defmethod setup-collision! ((this fturret-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot crate hit-by-others-list player-list))
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this fturret-shot))
  (set! (-> this hit-actor?) #f)
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) 'fac-robotank-shot)
  (set! (-> this max-speed) 819200.0)
  (set! (-> this move) fturret-shot-move)
  (set! (-> this update-velocity) projectile-update-velocity-space-wars)
  (set! (-> this timeout) (seconds 0.5))
  (set! (-> this sound-id) (new-sound-id))
  (set! (-> this damage) 1.0)
  (logior! (-> this options) (projectile-options po13))
  (set-gravity-length (-> this root dynam) 573440.0)
  0
  (none)
  )

;; WARN: Return type mismatch (pointer process) vs projectile.
(defun spawn-fturret-projectile ((arg0 process) (arg1 vector) (arg2 vector) (arg3 float) (arg4 vector))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (-> arg0 entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 notify-handle) (process->handle arg0))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle arg0))
      (let* ((a0-13 *game-info*)
             (a2-12 (+ (-> a0-13 attack-id) 1))
             )
        (set! (-> a0-13 attack-id) a2-12)
        (set! (-> gp-0 attack-id) a2-12)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (if arg4
          (set! (-> gp-0 pos quad) (-> arg4 quad))
          (set! (-> gp-0 pos quad) (-> arg1 quad))
          )
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (the-as projectile (spawn-projectile fturret-shot gp-0 arg0 *default-dead-pool*))
    )
  )

(set! (-> *lightning-spec-id-table* 31) (new 'static 'lightning-spec
                                          :name "lightning-trail-fturret-fturret"
                                          :flags (lightning-spec-flags lsf1)
                                          :rand-func #x2
                                          :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.6
                                          :num-points 16
                                          :box-size 2048.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 1638.4
                                          :duration -1.0
                                          :sound #f
                                          )
      )

(set! (-> *lightning-spec-id-table* 32) (new 'static 'lightning-spec
                                          :name "lightning-fractal-fturret-fturret"
                                          :flags (lightning-spec-flags lsf1)
                                          :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.6
                                          :num-points 16
                                          :box-size 2048.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 1638.4
                                          :duration -1.0
                                          :sound #f
                                          )
      )

(defpart 2891
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.8) (meters 0.2))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees -17) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0 96.0)
    (:g :copy r)
    (:b 255.0)
    (:a 32.0 16.0)
    (:omega (degrees 2265.75))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 819.2)
    )
  )

(defpart 2892
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5) (meters 1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees -17))
    (:scale-y :copy scale-x)
    (:r 0.0 64.0)
    (:g :copy r)
    (:b 255.0)
    (:a 16.0 16.0)
    (:omega (degrees 2265.75))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 819.2)
    )
  )

(defpartgroup part-fturret-lightning-glow
  :id 775
  :duration (seconds 0.017)
  :linger-duration (seconds 0.035)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 2892 :fade-after (meters 100) :flags (sp6)) (sp-item 2891 :fade-after (meters 100) :flags (sp6)))
  )
