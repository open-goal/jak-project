;;-*-Lisp-*-
(in-package goal)

;; name: roboguard.gc
;; name in dgo: roboguard
;; dgos: SEA, FACC, FACD

;; +++roboguard-flag
(defenum roboguard-flag
  :type uint16
  :bitfield #t
  (rf0 0)
  (rf1 1)
  (rf2 2)
  )
;; ---roboguard-flag


;; DECOMP BEGINS

(defpartgroup group-roboguard-armor-explode
  :id 223
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 810) (sp-item 812) (sp-item 814))
  )

(deftype roboguard (nav-enemy)
  ((los                     los-control  :inline)
   (rotation-matrix         matrix       :inline)
   (upper-rotation-matrix   matrix       :inline)
   (fire-at-pos             vector       :inline)
   (formation-position      vector       :inline)
   (focus-formation-source  vector       :inline)
   (me-to-focus-dir         vector       :inline)
   (me-to-focus-angle       float)
   (flags                   roboguard-flag)
   (torso-aim-blend         float)
   (torso-angle             float)
   (torso-seek-speed        float)
   (torso-to-focus-angle    float)
   (last-torso-frame-num    float)
   (stand-angle-threshold   float)
   (arm-rot-mult            float        2)
   (arm-rot                 degrees      2)
   (fire-time               time-frame)
   (fire-count              uint32)
   (last-attack-time        time-frame)
   (update-focus-pos        symbol)
   (formation-angle-sign    float)
   (last-hit-points         int32)
   )
  (:state-methods
    hostile-stand
    close-attack
    shoot-attack
    explode
    )
  (:methods
    (roboguard-method-194 (_type_ vector float) symbol)
    (roboguard-method-195 (_type_) none)
    (roboguard-method-196 (_type_ int) none)
    )
  )


(defskelgroup skel-roboguard roboguard roboguard-lod0-jg roboguard-idle0-ja
              ((roboguard-lod0-mg (meters 20)) (roboguard-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              :shadow roboguard-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-roboguard-explode roboguard roboguard-explode-lod0-jg roboguard-explode-idle-ja
              ((roboguard-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 80)
              )

(define *roboguard-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index 15)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index 11)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index 9)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index 13)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index 24)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index 27)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index 18)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index 21)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index 12)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index 8)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index 6)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index 17)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index 4)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

(define *roboguard-explode-joints* (new 'static 'boxed-array :type int32 0 10 19 9 14 22 13 6))

(define *roboguard-debris-array-params*
  (new 'static 'boxed-array :type debris-static-params
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    (new 'static 'debris-static-params
      :joints (new 'static 'boxed-array :type debris-static-joint-params
        (new 'static 'debris-static-joint-params :parent-joint-index -1 :group "skel-kg-debris-b")
        )
      :collide-spec (collide-spec backgnd)
      :sound-hit (static-sound-name "kg-debris")
      :art-level 'sewg
      )
    )
  )

(dotimes (v1-27 (-> *roboguard-debris-array-params* length))
  (set! (-> *roboguard-debris-array-params* v1-27 joints 0 parent-joint-index)
        (-> *roboguard-explode-joints* (+ v1-27 1))
        )
  )

(set! (-> *lightning-spec-id-table* 17) (new 'static 'lightning-spec
                                          :name "lightning-shock-roboguard"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 15.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.42
                                          :num-points 8
                                          :box-size 8192.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 819.2
                                          :duration 90.0
                                          :sound (static-sound-spec "shock" :group 0)
                                          )
      )

(set! (-> *lightning-spec-id-table* 18) (new 'static 'lightning-spec
                                          :name "lightning-awe-roboguard"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 15.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.42
                                          :num-points 8
                                          :box-size 8192.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration 90.0
                                          :sound (static-sound-spec "shock" :group 0)
                                          )
      )

(define *fact-info-roboguard-defaults*
  (new 'static 'fact-info-enemy-defaults :idle-distance (meters 80) :pickup-type 48 :pickup-amount 10.0)
  )

(define *roboguard-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script #f
    :idle-anim 5
    :notice-anim -1
    :hostile-anim 14
    :hit-anim 5
    :knocked-anim 27
    :knocked-land-anim 28
    :die-anim 18
    :die-falling-anim 29
    :victory-anim 5
    :jump-wind-up-anim 5
    :jump-in-air-anim 5
    :jump-land-anim 5
    :neck-joint -1
    :look-at-joint 6
    :bullseye-joint 4
    :notice-distance (meters 50)
    :notice-distance-delta (meters 20)
    :proximity-notice-distance (meters 30)
    :default-hit-points 8.0
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot enemy vehicle-sphere hit-by-others-list player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.5
    :attack-shove-back (meters 5)
    :attack-shove-up (meters 3)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 0.5)
    :jump-height-factor 0.1
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 32768.0
    :knocked-soft-vxz-hi 61440.0
    :knocked-soft-vy-lo 49152.0
    :knocked-soft-vy-hi 65536.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 73728.0
    :knocked-hard-vxz-hi 114688.0
    :knocked-hard-vy-lo 49152.0
    :knocked-hard-vy-hi 73728.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 20480.0
    :knocked-yellow-vxz-hi 28672.0
    :knocked-yellow-vy-lo 36864.0
    :knocked-yellow-vy-hi 4096.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 114688.0
    :knocked-red-vy-lo 53248.0
    :knocked-red-vy-hi 69632.0
    :knocked-blue-vxz-lo 16384.0
    :knocked-blue-vxz-hi 20480.0
    :knocked-blue-vy-lo 16384.0
    :knocked-blue-vy-hi 32768.0
    :ragdoll-info #f
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #f
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 13
    :turn-anim 4
    :run-anim 14
    :taunt-anim -1
    :run-travel-speed (meters 8)
    :run-acceleration (meters 2)
    :run-turning-acceleration (meters 30)
    :walk-travel-speed (meters 3)
    :walk-acceleration (meters 1)
    :walk-turning-acceleration (meters 8)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 16)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *roboguard-nav-enemy-info* fact-defaults) *fact-info-roboguard-defaults*)

(defpart 913
  :init-specs ((:texture (pal-lightning level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y (meters 40))
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 914
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defpart 915
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defmethod init-enemy-collision! ((this roboguard))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 4) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 5))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy camera-blocker los-blocker))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid semi-solid deadly no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 8192.0 0.0 12288.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-12 prim-core collide-with)
            (collide-spec backgnd jak bot enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-12 prim-core action) (collide-action solid))
      (set-vector! (-> v1-12 local-sphere) 0.0 6144.0 0.0 6144.0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with)
            (collide-spec backgnd jak bot enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-14 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-14 local-sphere) 0.0 12697.6 0.0 6144.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core action) (collide-action))
      (set! (-> v1-16 transform-index) 11)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec los-blocker))
      (set! (-> v1-18 prim-core action) (collide-action solid))
      (set-vector! (-> v1-18 local-sphere) 0.0 8192.0 0.0 11468.8)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-20 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-20 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-20 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defbehavior roboguard-turn-torso-post roboguard ()
  (seek! (-> self torso-aim-blend) 1.0 (* 5.0 (seconds-per-frame)))
  (let ((v1-3 (joint-node roboguard-lod0-jg chest))
        (gp-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> gp-0 quad) (-> v1-3 bone transform fvec quad))
    (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) (-> self focus-pos) (-> v1-3 bone transform trans))))
      (set! (-> gp-0 y) 0.0)
      (set! (-> s5-1 y) 0.0)
      (vector-xz-normalize! gp-0 1.0)
      (vector-xz-normalize! s5-1 1.0)
      (set! (-> self torso-to-focus-angle) (acos (vector-dot gp-0 s5-1)))
      )
    )
  (if (>= 2730.6667 (-> self torso-to-focus-angle))
      (seek! (-> self torso-seek-speed) 0.0 (* 54613.332 (seconds-per-frame)))
      (seek! (-> self torso-seek-speed) 43690.668 (* 72817.78 (seconds-per-frame)))
      )
  (nav-enemy-simple-post)
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
;; WARN: new jak 2 until loop case, check carefully
(defbehavior roboguard-turret-code roboguard ()
  (ja-channel-push! 1 (seconds 0.2))
  (ja-no-eval :group! roboguard-idle-shoot0-loop-ja :num! zero)
  (let ((gp-0 (current-time)))
    (until (time-elapsed? gp-0 (seconds 0.2))
      (suspend)
      )
    )
  (let ((gp-1
          (lambda ((arg0 roboguard) (arg1 symbol))
            (quaternion-rotate-y! (-> arg0 root quat) (-> arg0 root quat) (* 20480.0 (seconds-per-frame) (if arg1
                                                                                                             1.0
                                                                                                             -1.0
                                                                                                             )
                                                                             )
                                  )
            )
          )
        (f30-0 (-> self stand-angle-threshold))
        )
    (until #f
      (when (< (fabs (-> self me-to-focus-angle)) f30-0)
        (let ((s5-0 (current-time)))
          (until (time-elapsed? s5-0 (seconds 0.5))
            (suspend)
            )
          )
        (while (< (fabs (-> self me-to-focus-angle)) f30-0)
          (suspend)
          )
        )
      (ja-channel-push! 1 0)
      (let ((v1-20 (if (< 0.0 (-> self me-to-focus-angle))
                       7
                       9
                       )
                   )
            (s5-1 (< 0.0 (-> self me-to-focus-angle)))
            )
        (ja-no-eval :group! (-> self draw art-group data v1-20) :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (gp-1 self s5-1)
          (suspend)
          (ja :num! (seek!))
          )
        )
      (when (< (fabs (-> self me-to-focus-angle)) f30-0)
        (let ((s5-2 (current-time)))
          (until (time-elapsed? s5-2 (seconds 0.5))
            (suspend)
            )
          )
        (while (< (fabs (-> self me-to-focus-angle)) f30-0)
          (suspend)
          )
        )
      (ja-channel-push! 1 0)
      (let ((v1-40 (if (< 0.0 (-> self me-to-focus-angle))
                       8
                       10
                       )
                   )
            (s5-3 (< 0.0 (-> self me-to-focus-angle)))
            )
        (ja-no-eval :group! (-> self draw art-group data v1-40) :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (gp-1 self s5-3)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    )
  #f
  (none)
  )

(defstate idle (roboguard)
  :virtual #t
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (until #f
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 2.0 (rand-vu-float-range 0.1 0.15)) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 2.0 (rand-vu-float-range 0.1 0.15)))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 3.0 (rand-vu-float-range 0.1 0.15)) :frame-num 2.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 3.0 (rand-vu-float-range 0.1 0.15)))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 4.0 (rand-vu-float-range 0.1 0.15)) :frame-num 3.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 4.0 (rand-vu-float-range 0.1 0.15)))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 5.0 (rand-vu-float-range 0.1 0.15)) :frame-num 4.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 5.0 (rand-vu-float-range 0.1 0.15)))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 6.0 (rand-vu-float-range 0.1 0.15)) :frame-num 5.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 6.0 (rand-vu-float-range 0.1 0.15)))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 7.0 0.07) :frame-num 6.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 7.0 0.07))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 8.0 0.07) :frame-num 7.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 8.0 0.07))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 9.0 0.07) :frame-num 8.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 9.0 0.07))
        )
      (ja-no-eval :group! roboguard-idle0-ja :num! (seek! 10.0 (rand-vu-float-range 0.02 0.05)) :frame-num 9.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 10.0 (rand-vu-float-range 0.02 0.05)))
        )
      )
    #f
    )
  :post (behavior ()
    (if (and (nonzero? (-> self draw)) (logtest? (-> self draw status) (draw-control-status on-screen)))
        (set-time! (-> self last-draw-time))
        )
    (update-focus self)
    (ja-post)
    )
  )

(defstate notice (roboguard)
  :virtual #t
  :exit (behavior ()
    (set! (-> self formation-position quad) (-> self root trans quad))
    (let ((t9-0 (-> (method-of-type nav-enemy notice) exit)))
      (if t9-0
          (t9-0)
          )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.075))
    (let ((f30-0 (rnd-float-range self 0.8 1.2)))
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (ja-no-eval :group! roboguard-notice-jump-ja :num! (seek! max f30-0) :frame-num 0.0)
        (until (ja-done? 0)
          (vector-! gp-0 (target-pos 0) (-> self root trans))
          (seek-toward-heading-vec! (-> self root) gp-0 131072.0 (seconds 0.05))
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      (ja-no-eval :group! roboguard-notice-land-ja :num! (seek! max f30-0) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (go-best-state self)
    )
  )

(defstate stare (roboguard)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy stare) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self stand-angle-threshold) 9102.223)
    )
  :code roboguard-turret-code
  :post roboguard-turn-torso-post
  )

(defstate hostile (roboguard)
  :virtual #t
  :exit (behavior ()
    ;; og:preserve-this fix potential use-after-free bug
    (if (-> self nav)
      (let ((v1-0 (-> self nav)))
        (logclear! (-> v1-0 shape nav-flags) (nav-flags has-extra-sphere))
        )
      )
    0
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (when (time-elapsed? (-> self state-time) (-> self reaction-time))
      (cond
        ((< (vector-vector-xz-distance (-> self root trans) (-> self formation-position)) 8192.0)
         (go-virtual hostile-stand)
         )
        ((and (< (fabs (-> self torso-to-focus-angle)) 3640.889)
              (and (get-focus! self) (>= 24576.0 (vector-vector-xz-distance (-> self root trans) (-> self focus-pos))))
              )
         (go-virtual close-attack)
         )
        )
      )
    )
  :post (behavior ()
    (seek! (-> self torso-aim-blend) 0.0 (seconds-per-frame))
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (roboguard-method-195 self)
    (let ((a0-4 (-> self nav state))
          (v1-8 (-> self formation-position))
          )
      (logclear! (-> a0-4 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-4 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-4 target-pos quad) (-> v1-8 quad))
      )
    0
    (nav-enemy-method-187 self)
    )
  )

(defstate hostile-stand (roboguard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self stand-angle-threshold) 9102.223)
    (nav-enemy-method-180 self 8192.0 (the-as float #f))
    )
  :exit (behavior ()
    (nav-enemy-method-179 self)
    )
  :trans (behavior ()
    (when (and (time-elapsed? (-> self state-time) (-> self reaction-time)) (ja-done? 0))
      (if (or (and (< 65536.0 (vector-vector-xz-distance (-> self focus-pos) (-> self root trans)))
                   (< 2048.0 (vector-vector-xz-distance (-> self root trans) (-> self formation-position)))
                   )
              (< 14336.0 (vector-vector-xz-distance (-> self root trans) (-> self formation-position)))
              )
          (go-virtual hostile)
          )
      (when (and (time-elapsed? (-> self state-time) (seconds 0.3))
                 (and (< (fabs (-> self torso-to-focus-angle)) 3640.889) (get-focus! self))
                 )
        (cond
          ((>= 24576.0 (vector-vector-xz-distance (-> self root trans) (-> self focus-pos)))
           (go-virtual close-attack)
           )
          ((should-check-los? (-> self los) (seconds 0.4))
           (go-virtual shoot-attack)
           )
          )
        )
      )
    )
  :code roboguard-turret-code
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (roboguard-method-195 self)
    (roboguard-turn-torso-post)
    )
  )

(defstate close-attack (roboguard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-time! (-> self fire-time))
    (nav-enemy-method-180 self 8192.0 (the-as float #f))
    )
  :exit (behavior ()
    (nav-enemy-method-179 self)
    )
  :code (behavior ()
    (let ((f30-0
            (lerp-scale 0.0 1.0 (vector-vector-xz-distance (-> self root trans) (-> self focus-pos)) 12288.0 20480.0)
            )
          )
      (ja-channel-push! 2 (seconds 0.3))
      (ja-no-eval :group! roboguard-punch-close-rotate-ja :num! (seek!) :frame-num 0.0)
      (ja-no-eval :chan 1 :group! roboguard-punch-far-rotate-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (ja :chan 1 :num! (chan 0) :frame-interp0 f30-0 :frame-interp1 f30-0)
        (seek-to-point-toward-point!
          (-> self root)
          (-> self focus-pos)
          (* 1.2 (-> self nav max-rotation-rate))
          (seconds 0.02)
          )
        (seek! (-> self torso-aim-blend) 0.0 (* 3.0 (seconds-per-frame)))
        (suspend)
        (ja :num! (seek!))
        )
      (let ((f28-0 8192.0))
        (let* ((a0-10 (-> self root root-prim))
               (v1-53 (-> (the-as collide-shape-prim-group a0-10) child 2))
               )
          (+! (-> a0-10 local-sphere w) f28-0)
          (set! (-> v1-53 prim-core action) (collide-action solid deadly))
          (set! (-> v1-53 prim-core collide-as) (collide-spec enemy))
          (set! (-> v1-53 prim-core collide-with) (collide-spec jak bot obstacle player-list))
          )
        (logior! (-> self focus-status) (focus-status dangerous))
        (ja-no-eval :group! roboguard-punch-close-go-ja :num! (seek!) :frame-num 0.0)
        (ja-no-eval :chan 1 :group! roboguard-punch-far-go-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (ja :chan 1 :num! (chan 0) :frame-interp0 f30-0 :frame-interp1 f30-0)
          (suspend)
          (ja :num! (seek! max 1.2))
          )
        (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
            (logior! (-> self focus-status) (focus-status dangerous))
            (logclear! (-> self focus-status) (focus-status dangerous))
            )
        (ja-no-eval :group! roboguard-punch-close-hold-ja :num! (seek!) :frame-num 0.0)
        (ja-no-eval :chan 1 :group! roboguard-punch-far-hold-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (ja :chan 1 :num! (chan 0) :frame-interp0 f30-0 :frame-interp1 f30-0)
          (suspend)
          (ja :num! (seek! max 4.0))
          )
        (let* ((v1-147 (-> self root root-prim))
               (a0-26 (-> (the-as collide-shape-prim-group v1-147) child 2))
               )
          (set! (-> v1-147 local-sphere w) (- (-> v1-147 local-sphere w) f28-0))
          (set! (-> a0-26 prim-core action) (collide-action))
          (set! (-> a0-26 prim-core collide-as) (collide-spec))
          (set! (-> a0-26 prim-core collide-with) (collide-spec))
          )
        )
      )
    0
    (go-virtual hostile-stand)
    )
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (nav-enemy-simple-post)
    )
  )

(defstate shoot-attack (roboguard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self fire-time) (+ (current-time) (seconds -0.4)))
    (set! (-> self fire-count) (the-as uint 0))
    (set! (-> self last-torso-frame-num) 0.0)
    (set! (-> self stand-angle-threshold) 16384.0)
    (set! (-> self update-focus-pos) #f)
    (nav-enemy-method-180 self 8192.0 (the-as float #f))
    )
  :exit (behavior ()
    (when (> (-> self skel float-channels) 0)
      (let ((a0-1 (joint-control-method-12 (-> self skel) 0)))
        (joint-channel-float-delete! a0-1)
        )
      )
    (set! (-> self update-focus-pos) #t)
    (nav-enemy-method-179 self)
    )
  :trans (behavior ()
    (when (and (time-elapsed? (-> self state-time) (seconds 0.2)) (zero? (-> self skel float-channels)))
      (if (or (= (-> self fire-count) 8) (los-control-method-11 (-> self los) (seconds 0.1)))
          (go-virtual hostile-stand)
          )
      (let ((f0-0 (vector-vector-xz-distance (-> self focus-pos) (-> self root trans))))
        (if (>= 24576.0 f0-0)
            (go-virtual close-attack)
            )
        )
      (let ((v1-22 (ja-channel-float! (the-as art-joint-anim roboguard-idle-shoot0-loop-ja) 0.0 1.0 0.0)))
        (when v1-22
          (set! (-> self skel interp-select 0) #x1bbf8)
          (set! (-> self skel interp-select 1) 0)
          (set! (-> v1-22 param 0) 1.0)
          (set! (-> v1-22 param 1) 1.0)
          (set! (-> v1-22 param 2) 2.0)
          (set! (-> v1-22 num-func) num-func-interp1-play!)
          )
        )
      (set-time! (-> self fire-time))
      )
    (let ((gp-0 (joint-control-method-12 (-> self skel) 0)))
      (when gp-0
        (let ((f1-1 (-> gp-0 frame-num))
              (f0-4 (-> self last-torso-frame-num))
              )
          (cond
            ((and (< 0.5 f1-1) (>= 0.5 f0-4))
             (roboguard-method-196 self 11)
             )
            ((and (< 3.0 f1-1) (>= 3.0 f0-4))
             (roboguard-method-196 self 15)
             )
            )
          )
        (set! (-> self last-torso-frame-num) (-> gp-0 frame-num))
        )
      )
    )
  :code roboguard-turret-code
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 1.0 (* 30.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 1.0 (* 30.0 (seconds-per-frame)))
    (let ((gp-1 (vector-! (new 'stack-no-clear 'vector) (-> self root trans) (-> self focus-pos))))
      (let ((s5-0 vector-normalize!)
            (s4-0 gp-1)
            (f0-8 -8192.0)
            (v1-7 gp-1)
            )
        (s5-0 s4-0 (fmin
                     (+ f0-8 (sqrtf (+ (* (-> v1-7 x) (-> v1-7 x)) (* (-> v1-7 z) (-> v1-7 z)))))
                     (lerp-scale 0.0 32768.0 (the float (- (current-time) (-> self state-time))) 600.0 60.0)
                     )
              )
        )
      (vector+! (-> self fire-at-pos) (-> self focus-pos) gp-1)
      )
    0
    (let ((gp-2
            (lambda :behavior roboguard
              ((arg0 int) (arg1 int) (arg2 float))
              (let* ((s5-0 (-> self node-list data arg0))
                     (v1-2 (vector<-cspace! (new 'stack-no-clear 'vector) s5-0))
                     )
                (vector-float*! (new 'stack-no-clear 'vector) (-> s5-0 bone transform uvec) -1.0)
                (let ((s5-1 (new 'stack-no-clear 'matrix)))
                  (vector-! (-> s5-1 rvec) (-> self fire-at-pos) v1-2)
                  (set! (-> s5-1 uvec quad) (-> s5-1 rvec quad))
                  (set! (-> s5-1 uvec y) 0.0)
                  (vector-normalize! (-> s5-1 uvec) 1.0)
                  (vector-normalize-copy! (-> s5-1 fvec) (-> s5-1 rvec) 1.0)
                  (vector-flatten! (-> s5-1 fvec) (-> s5-1 fvec) (the-as vector (-> self upper-rotation-matrix)))
                  (set! (-> self arm-rot-mult arg1)
                        (* (-> self arm-rot-mult arg1) (vector-dot (-> s5-1 uvec) (-> self upper-rotation-matrix fvec)))
                        )
                  (let ((f0-6 (* arg2 (acos (vector-dot (-> s5-1 fvec) (-> self upper-rotation-matrix fvec))))))
                    (set! (-> self arm-rot arg1)
                          (seek
                            (-> self arm-rot arg1)
                            (fmax -8192.0 (fmin 13653.333 (if (< 0.0 (vector-dot (-> s5-1 fvec) *y-vector*))
                                                              (- f0-6)
                                                              f0-6
                                                              )
                                                )
                                  )
                            (* 65536.0 (seconds-per-frame))
                            )
                          )
                    )
                  )
                )
              )
            )
          )
      (gp-2 11 0 1.0)
      (gp-2 15 1 1.0)
      )
    (roboguard-turn-torso-post)
    )
  )

(defstate knocked (roboguard)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (dotimes (gp-0 (- (-> self last-hit-points) (the int (-> self hit-points))))
      (let ((s5-0 (enemy-method-131 self 8 (the-as int (logior (-> self draw seg-mask) 1)))))
        (when (> s5-0 0)
          (let ((a1-2 (new 'stack 'debris-tuning (the-as uint 1))))
            (set! (-> a1-2 hit-xz-reaction) 0.5)
            (set! (-> a1-2 hit-y-reaction) 0.3)
            (set! (-> a1-2 fountain-rand-transv-lo quad) (-> self root root-prim prim-core world-sphere quad))
            (let ((s3-0 (-> *roboguard-debris-array-params* (+ s5-0 -1))))
              (debris-spawn self a1-2 s3-0 (the-as process-drawable #f))
              (cond
                ((logtest? (-> *part-group-id-table* 223 flags) (sp-group-flag sp13))
                 (set! (-> *launch-matrix* trans quad)
                       (-> (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> s3-0 joints 0 parent-joint-index)))
                           quad
                           )
                       )
                 (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 223))
                 )
                (else
                  (set! (-> *launch-matrix* trans quad)
                        (-> (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> s3-0 joints 0 parent-joint-index)))
                            quad
                            )
                        )
                  (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 223))
                  )
                )
              )
            )
          (setup-masks (-> self draw) 0 (ash 1 s5-0))
          )
        )
      )
    (set! (-> self last-hit-points) (the int (-> self hit-points)))
    )
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (let ((t9-2 (-> (method-of-type nav-enemy knocked) post)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(defstate knocked-recover (roboguard)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy knocked-recover) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (enemy-method-109 self)
        (go-die self)
        (go-hostile self)
        )
    )
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (let ((t9-2 (-> (method-of-type nav-enemy knocked-recover) post)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(defstate die (roboguard)
  :virtual #t
  :enter (behavior ()
    (on-dying self)
    (set-time! (-> self state-time))
    (set! (-> self hit-points) 0.0)
    )
  :code (behavior ()
    (when (!= (-> self incoming knocked-type) (knocked-type blue-shot))
      (ja-channel-push! 1 (seconds 0.075))
      (ja-no-eval :group! roboguard-death-standing-ja
                  :num! (seek! (ja-aframe 20.0 0) 1.5)
                  :frame-num (ja-aframe 13.0 0)
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! (ja-aframe 20.0 0) 1.5))
        )
      )
    (go-virtual explode)
    )
  :post (behavior ()
    (seek! (-> self arm-rot-mult 0) 0.0 (* 10.0 (seconds-per-frame)))
    (seek! (-> self arm-rot-mult 1) 0.0 (* 10.0 (seconds-per-frame)))
    (let ((t9-2 (-> (method-of-type nav-enemy die) post)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(defstate explode (roboguard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (sound-play "robo-explode")
      (let ((v1-2 (-> self root root-prim)))
        (set! (-> v1-2 prim-core collide-as) (collide-spec))
        (set! (-> v1-2 prim-core collide-with) (collide-spec))
        )
      0
      (logior! (-> self draw status) (draw-control-status no-draw))
      (set! (-> self root root-prim local-sphere w) 491520.0)
      (send-event self 'death-start)
      (let ((gp-1 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
        (let ((s5-1 (new 'stack-no-clear 'vector)))
          (let ((v1-14 (-> gp-1 fountain-rand-transv-lo)))
            (let ((a0-8 (-> self root trans)))
              (let ((a1-3 *up-vector*))
                (let ((a2-3 2048.0))
                  (.mov vf7 a2-3)
                  )
                (.lvf vf5 (&-> a1-3 quad))
                )
              (.lvf vf4 (&-> a0-8 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> v1-14 quad) vf6)
            )
          (set! (-> s5-1 quad) (-> self incoming attack-direction quad))
          (vector-normalize-copy! (-> gp-1 fountain-rand-transv-lo) s5-1 -20480.0)
          (vector-normalize-copy! (-> gp-1 fountain-rand-transv-hi) s5-1 122880.0)
          )
        (set! (-> gp-1 fountain-rand-transv-lo y) 40960.0)
        (set! (-> gp-1 fountain-rand-transv-hi y) 81920.0)
        (process-spawn
          joint-exploder
          (art-group-get-by-name *level* "skel-roboguard-explode" (the-as (pointer level) #f))
          35
          gp-1
          *roboguard-exploder-params*
          :name "joint-exploder"
          :to self
          :unk 0
          )
        )
      (let ((v1-25 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node roboguard-lod0-jg chest))))
        (cond
          ((logtest? (-> *part-group-id-table* 219 flags) (sp-group-flag sp13))
           (set! (-> *launch-matrix* trans quad) (-> v1-25 quad))
           (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 219))
           )
          (else
            (set! (-> *launch-matrix* trans quad) (-> v1-25 quad))
            (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 219))
            )
          )
        )
      )
    )
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

(defmethod roboguard-method-194 ((this roboguard) (arg0 vector) (arg1 float))
  (let ((a1-1 (new 'stack-no-clear 'vector)))
    (set! (-> a1-1 quad) (-> arg0 quad))
    (set! (-> a1-1 w) arg1)
    (and (not (add-root-sphere-to-hash! (-> this nav) a1-1 #x100068))
         (let ((a0-5 (vector-! (new 'stack-no-clear 'vector) (-> this focus-pos) arg0)))
           (< (vector-x-angle a0-5) 5461.3335)
           )
         (let ((s3-0 (-> this nav))
               (s2-0 (-> this focus-pos))
               (s4-0 (new 'stack 'nav-find-poly-parms))
               )
           (vector-! (-> s4-0 point) s2-0 (the-as vector (-> s3-0 state mesh bounds)))
           (set! (-> s4-0 y-threshold) (-> s3-0 nearest-y-threshold))
           (set! (-> s4-0 ignore) (the-as uint 2))
           (nav-mesh-method-46 (-> s3-0 state mesh) (the-as nav-poly s4-0))
           (let ((s4-1 (-> s4-0 poly))
                 (s3-2 (vector-! (new 'stack-no-clear 'vector) arg0 (-> this focus-pos)))
                 (s5-1 (new 'stack 'clamp-travel-vector-to-mesh-return-info))
                 )
             (or (not s4-1) (begin
                              (clamp-vector-to-mesh-no-gaps (-> this nav) (-> this focus-pos) s4-1 s3-2 s5-1)
                              (not (-> s5-1 found-boundary))
                              )
                 )
             )
           )
         )
    )
  )

(define *roboguard-formation-table* (new 'static 'boxed-array :type float
                                      0.0
                                      1820.4445
                                      3640.889
                                      5461.3335
                                      -1820.4445
                                      -3640.889
                                      -5461.3335
                                      7281.778
                                      9102.223
                                      10922.667
                                      -7281.778
                                      -9102.223
                                      -10922.667
                                      12743.111
                                      14563.556
                                      16384.0
                                      -12743.111
                                      -14563.556
                                      -16384.0
                                      18204.445
                                      20024.889
                                      21845.334
                                      -18204.445
                                      -20024.889
                                      -21845.334
                                      23665.777
                                      25486.223
                                      27306.666
                                      -23665.777
                                      -25486.223
                                      -27306.666
                                      29127.111
                                      30947.555
                                      32768.0
                                      -29127.111
                                      -30947.555
                                      )
        )

(defmethod roboguard-method-195 ((this roboguard))
  (when (or (< 8192.0 (vector-vector-xz-distance (-> this focus-pos) (-> this focus-formation-source)))
            (let ((f0-1 (vector-vector-distance (-> this formation-position) (-> this focus-formation-source)))
                  (f1-0 40960.0)
                  (f2-0 65536.0)
                  )
              (or (>= f1-0 f0-1) (>= f0-1 f2-0))
              )
            (not (roboguard-method-194 this (-> this formation-position) 9011.2))
            )
    (set! (-> this focus-formation-source quad) (-> this focus-pos quad))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (set! (-> s5-0 quad) (-> this root trans quad))
      (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this formation-position) (-> this focus-formation-source)))
            )
        (when (< 0.0 (vector-length s4-1))
          (set! (-> s4-1 y) 0.0)
          (dotimes (s3-0 (-> *roboguard-formation-table* length))
            (let ((s1-0 (new 'stack-no-clear 'vector))
                  (s2-0 (new 'stack-no-clear 'vector))
                  )
              (vector-normalize-copy! s1-0 s4-1 1.0)
              (vector-rotate-y! s1-0 s1-0 (* (-> this formation-angle-sign) (-> *roboguard-formation-table* s3-0)))
              (vector-normalize! s1-0 53248.0)
              (vector+! s2-0 (-> this focus-formation-source) s1-0)
              (when (and (closest-point-on-mesh (-> this nav) s2-0 s2-0 (the-as nav-poly #f))
                         (roboguard-method-194 this s2-0 9011.2)
                         )
                (set! (-> s5-0 quad) (-> s2-0 quad))
                #t
                (goto cfg-26)
                )
              )
            )
          )
        )
      (label cfg-26)
      (set! (-> this formation-angle-sign) (* -1.0 (-> this formation-angle-sign)))
      (set! (-> this formation-position quad) (-> s5-0 quad))
      )
    )
  0
  (none)
  )

(defmethod roboguard-method-196 ((this roboguard) (arg0 int))
  (let* ((s5-0 (-> this node-list data arg0))
         (v1-2 (vector<-cspace! (new 'stack-no-clear 'vector) s5-0))
         (a3-1 (vector-float*! (new 'stack-no-clear 'vector) (-> s5-0 bone transform uvec) -1.0))
         )
    (spawn-guard-projectile
      this
      v1-2
      (vector+! (new 'stack-no-clear 'vector) v1-2 a3-1)
      819200.0
      (the-as vector #f)
      )
    )
  (sound-play "robo-fire" :position (-> this root trans))
  (+! (-> this fire-count) 1)
  0
  (none)
  )

(defmethod knocked-anim ((this roboguard) (arg0 enemy-knocked-info))
  (ja-channel-push! 1 0)
  (case (-> this incoming knocked-type)
    (((knocked-type none) (knocked-type mech-punch) (knocked-type yellow-shot) (knocked-type blue-shot))
     (let ((a0-5 (-> this skel root-channel 0)))
       (set! (-> a0-5 frame-group) (the-as art-joint-anim (-> this draw art-group data 27)))
       (set! (-> a0-5 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 27)) frames num-frames) -1))
             )
       (set! (-> a0-5 param 1) (-> arg0 anim-speed))
       (set! (-> a0-5 frame-num) 0.0)
       (joint-control-channel-group! a0-5 (the-as art-joint-anim (-> this draw art-group data 27)) num-func-seek!)
       )
     )
    (else
      (let ((a0-6 (-> this skel root-channel 0)))
        (set! (-> a0-6 frame-group) (the-as art-joint-anim (-> this draw art-group data 29)))
        (set! (-> a0-6 param 0)
              (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 29)) frames num-frames) -1))
              )
        (set! (-> a0-6 param 1) (-> arg0 anim-speed))
        (set! (-> a0-6 frame-num) 0.0)
        (joint-control-channel-group! a0-6 (the-as art-joint-anim (-> this draw art-group data 29)) num-func-seek!)
        )
      )
    )
  #t
  )

(defmethod knocked-land-anim ((this roboguard) (arg0 enemy-knocked-info))
  (case (-> this incoming knocked-type)
    (((knocked-type none) (knocked-type mech-punch) (knocked-type yellow-shot) (knocked-type blue-shot))
     (let ((v1-4 (-> this skel root-channel 0)))
       (set! (-> v1-4 frame-group) (the-as art-joint-anim (-> this draw art-group data 28)))
       (set! (-> v1-4 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 28)) frames num-frames) -1))
             )
       (set! (-> v1-4 param 1) (-> arg0 anim-speed))
       (set! (-> v1-4 frame-num) 0.0)
       (joint-control-channel-group! v1-4 (the-as art-joint-anim (-> this draw art-group data 28)) num-func-seek!)
       )
     )
    (else
      (let ((v1-8 (-> this skel root-channel 0)))
        (set! (-> v1-8 frame-group) (the-as art-joint-anim (-> this draw art-group data 30)))
        (set! (-> v1-8 param 0)
              (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 30)) frames num-frames) -1))
              )
        (set! (-> v1-8 param 1) (-> arg0 anim-speed))
        (set! (-> v1-8 frame-num) 0.0)
        (joint-control-channel-group! v1-8 (the-as art-joint-anim (-> this draw art-group data 30)) num-func-seek!)
        )
      )
    )
  #t
  )

;; WARN: Return type mismatch int vs penetrate.
(defmethod get-penetrated-by ((this roboguard))
  (the-as penetrate 0)
  )

(defmethod get-inv-mass ((this roboguard))
  2.0
  )

(defmethod enemy-method-109 ((this roboguard))
  (let ((gp-0 (-> this root))
        (s3-0 (-> this nav state))
        )
    (do-navigation-to-destination s3-0 (-> gp-0 trans))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (cond
        ((logtest? (-> s3-0 flags) (nav-state-flag in-mesh))
         (set! (-> s5-0 quad) (-> gp-0 trans quad))
         )
        (else
          (if (or (not (closest-point-on-mesh (-> this nav) s5-0 (-> gp-0 trans) (-> s3-0 current-poly)))
                  (let ((f0-0 8192.0))
                    (< (* f0-0 f0-0) (vector-vector-xz-distance-squared s5-0 (-> gp-0 trans)))
                    )
                  (< (- (-> gp-0 trans y) (-> s5-0 y)) -4096.0)
                  )
              (return #t)
              )
          )
        )
      )
    )
  #f
  )

(defmethod event-handler ((this roboguard) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('hit 'hit-knocked)
     (logclear! (-> this mask) (process-mask actor-pause))
     (logclear! (-> this focus-status) (focus-status dangerous))
     (logclear! (-> this enemy-flags) (enemy-flag use-notice-distance))
     (logior! (-> this enemy-flags) (enemy-flag alert))
     (logior! (-> this focus-status) (focus-status hit))
     (if (= (-> this hit-points) 0.0)
         (logior! (-> this focus-status) (focus-status dead))
         )
     (logclear! (-> this enemy-flags) (enemy-flag lock-focus))
     (enemy-method-69 this)
     (logior! (-> this enemy-flags) (enemy-flag lock-focus))
     (process-contact-action arg0)
     (send-event arg0 'get-attack-count 1)
     (freeze-hit-begin)
     (cond
       ((or (= (-> this hit-points) 0.0)
            (and (>= 1.0 (-> this hit-points)) (= (-> this incoming knocked-type) (knocked-type blue-shot)))
            )
        (on-dying this)
        (go (method-of-object this explode))
        )
       (else
         (go (method-of-object this knocked))
         )
       )
     #t
     )
    (('impact-impulse)
     (let ((v1-38 (the-as object (-> arg3 param 0))))
       (when (< 4096.0 (-> (the-as rigid-body-impact v1-38) impulse))
         (logior! (-> this root penetrated-by) (penetrate vehicle))
         (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 255 (seconds 0.1))
         (set! (-> this hit-points) 0.0)
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           10
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           14
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           8
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           12
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           19
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           22
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           18
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 17)
           lightning-probe-callback
           (-> *part-id-table* 160)
           21
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           10
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           14
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           8
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           12
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           19
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           22
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           18
           210
           16384.0
           )
         (process-drawable-shock-effect
           this
           (-> *lightning-spec-id-table* 18)
           lightning-probe-callback
           (-> *part-id-table* 160)
           21
           210
           16384.0
           )
         (send-event arg0 'lawsuit (-> this root trans))
         (go (method-of-object this explode))
         #t
         )
       )
     )
    (else
      ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod enemy-common-post ((this roboguard))
  (quaternion->matrix (-> this rotation-matrix) (-> this root quat))
  (vector-rotate-around-y!
    (the-as vector (-> this upper-rotation-matrix))
    (the-as vector (-> this rotation-matrix))
    (-> this torso-angle)
    )
  (set! (-> this upper-rotation-matrix uvec quad) (-> this rotation-matrix uvec quad))
  (vector-rotate-around-y!
    (-> this upper-rotation-matrix fvec)
    (-> this rotation-matrix fvec)
    (-> this torso-angle)
    )
  (when (< 1 (the-as int (-> this focus aware)))
    (when (-> this update-focus-pos)
      (let ((s5-0 (handle->process (-> this focus handle))))
        (when s5-0
          (set! (-> this focus-pos quad) (-> (get-trans (the-as process-focusable s5-0) 5) quad))
          (los-control-method-9 (-> this los) (the-as process-focusable s5-0) (-> this focus-pos) 819.2 4096.0)
          )
        )
      )
    (vector-! (-> this me-to-focus-dir) (-> this focus-pos) (-> this root trans))
    (set! (-> this me-to-focus-dir y) 0.0)
    (vector-xz-normalize! (-> this me-to-focus-dir) 1.0)
    (let* ((a1-9 (-> this rotation-matrix fvec))
           (s5-1 (-> this rotation-matrix))
           (f0-3 (vector-vector-angle-safe (-> this me-to-focus-dir) a1-9))
           )
      (if (< (vector-dot (-> this me-to-focus-dir) (the-as vector s5-1)) 0.0)
          (set! f0-3 (* -1.0 f0-3))
          )
      (set! (-> this me-to-focus-angle) f0-3)
      )
    )
  ((method-of-type nav-enemy enemy-common-post) this)
  (none)
  )

(defmethod coin-flip? ((this roboguard))
  #f
  )

(defmethod init-enemy! ((this roboguard))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-roboguard" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logior! (-> this mask) (process-mask kg-robot))
  (set! (-> this enemy-flags)
        (the-as enemy-flag (logior (enemy-flag no-initial-move-to-ground) (-> this enemy-flags)))
        )
  (init-enemy-defaults! this *roboguard-nav-enemy-info*)
  (init-los!
    (-> this los)
    this
    (seconds 0.1)
    327680.0
    (collide-spec backgnd obstacle hit-by-others-list los-blocker)
    )
  (set! (-> this torso-aim-blend) 0.0)
  (set! (-> this torso-angle) 0.0)
  (set! (-> this torso-seek-speed) 0.0)
  (set! (-> this torso-to-focus-angle) 0.0)
  (let ((v1-13 (-> this node-list data 4)))
    (set! (-> v1-13 param0)
          (lambda ((arg0 cspace) (arg1 transformq))
            (local-vars (sv-96 vector))
            (let ((s3-0 (the-as roboguard (-> arg0 param1)))
                  (gp-0 (new 'stack-no-clear 'quaternion))
                  )
              (cspace<-parented-transformq-joint! arg0 arg1)
              (let ((s2-0 (new 'stack-no-clear 'vector)))
                (set! (-> s2-0 quad) (-> s3-0 rotation-matrix rvec quad))
                (let ((s0-0 (new 'stack-no-clear 'vector)))
                  (set! (-> s0-0 quad) (-> s3-0 rotation-matrix fvec quad))
                  (let ((s1-0 (new 'stack-no-clear 'vector)))
                    (set! sv-96 (-> s3-0 focus-pos))
                    (let* ((v0-1 (vector<-cspace! (new 'stack-no-clear 'vector) arg0))
                           (s1-1 (vector-! s1-0 sv-96 v0-1))
                           )
                      (set! (-> s1-1 y) 0.0)
                      (set! (-> s2-0 y) 0.0)
                      (set! (-> s0-0 y) 0.0)
                      (vector-xz-normalize! s1-1 1.0)
                      (vector-xz-normalize! s2-0 1.0)
                      (vector-xz-normalize! s0-0 1.0)
                      (let ((f0-5 (fmin 18204.445 (acos (vector-dot s0-0 s1-1)))))
                        (if (< (vector-dot s2-0 s1-1) 0.0)
                            (set! f0-5 (* -1.0 f0-5))
                            )
                        (seek! (-> s3-0 torso-angle) f0-5 (* (-> s3-0 torso-seek-speed) (seconds-per-frame)))
                        )
                      )
                    )
                  )
                )
              (quaternion-vector-angle! gp-0 *y-vector* (* (-> s3-0 torso-angle) (-> s3-0 torso-aim-blend)))
              (quaternion*! (-> arg1 quat) (-> arg1 quat) gp-0)
              )
            (quaternion-normalize! (-> arg1 quat))
            (cspace<-parented-transformq-joint! arg0 arg1)
            (none)
            )
          )
    (set! (-> v1-13 param1) this)
    )
  (let ((v1-14 (lambda ((arg0 cspace) (arg1 transformq))
                 (let ((s3-0 (-> arg0 param1))
                       (s2-0 (the-as object (-> arg0 param2)))
                       (s4-0 (new 'stack-no-clear 'vector))
                       (gp-0 (new 'stack-no-clear 'vector))
                       )
                   (cspace<-parented-transformq-joint! arg0 arg1)
                   (quaternion-vector-angle!
                     (the-as quaternion s4-0)
                     (the-as vector (-> (the-as roboguard s3-0) upper-rotation-matrix))
                     (* (-> (the-as roboguard s3-0) arm-rot (the-as int s2-0))
                        (-> (the-as roboguard s3-0) arm-rot-mult (the-as int s2-0))
                        )
                     )
                   (matrix->trans (-> arg0 bone transform) gp-0)
                   (matrix*!
                     (-> arg0 bone transform)
                     (-> arg0 bone transform)
                     (quaternion->matrix (new 'stack-no-clear 'matrix) (the-as quaternion s4-0))
                     )
                   (matrix<-trans (-> arg0 bone transform) gp-0)
                   )
                 (none)
                 )
               )
        )
    (let ((a0-9 (-> this node-list data 10)))
      (set! (-> a0-9 param0) v1-14)
      (set! (-> a0-9 param1) this)
      (set! (-> a0-9 param2) (the-as basic 0))
      )
    (let ((a0-11 (-> this node-list data 14)))
      (set! (-> a0-11 param0) v1-14)
      (set! (-> a0-11 param1) this)
      (set! (-> a0-11 param2) (the-as basic 1))
      )
    )
  (set! (-> this arm-rot-mult 0) 0.0)
  (set! (-> this arm-rot-mult 1) 0.0)
  (set! (-> this flags) (roboguard-flag))
  (set! (-> this last-attack-time) 0)
  (set! (-> this update-focus-pos) #t)
  (set! (-> this formation-angle-sign) (if (not (logtest? (-> this pid) 1))
                                           1.0
                                           -1.0
                                           )
        )
  (set! (-> this last-hit-points) (the int (-> this enemy-info default-hit-points)))
  (setup-masks (-> this draw) -1 0)
  0
  (none)
  )
