;;-*-Lisp-*-
(in-package goal)

;; name: grunt.gc
;; name in dgo: grunt
;; dgos: MIC

;; +++grunt-flags
(defenum grunt-flags
  :type uint8
  :bitfield #t
  (gf0 0)
  (gf1 1)
  (gf2 2)
  )
;; ---grunt-flags


;; DECOMP BEGINS

(defskelgroup skel-grunt grunt grunt-lod0-jg -1
              ((grunt-lod0-mg (meters 20)) (grunt-lod1-mg (meters 40)) (grunt-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow grunt-shadow-mg
              :origin-joint-index 18
              )

(deftype grunt-anim-info (structure)
  ((anim-index    int32)
   (travel-speed  meters)
   )
  :pack-me
  )


(deftype grunt-global-info (basic)
  ((patrol-anim  grunt-anim-info  4 :inline)
   (charge-anim  grunt-anim-info  3 :inline)
   (attack-anim  grunt-anim-info  2 :inline)
   )
  )


(deftype grunt (nav-enemy)
  ((patrol-anim             grunt-anim-info)
   (charge-anim             grunt-anim-info)
   (attack-anim             grunt-anim-info)
   (intro-path              path-control)
   (use-charge-anim-index   int8                :offset 640)
   (jumping-ambush-path-pt  int8)
   (grunt-flags             grunt-flags)
   (state-timeout2          time-frame)
   (next-warn-time          time-frame)
   (dest                    vector              :inline)
   (minimap                 connection-minimap  :offset 704)
   )
  (:state-methods
    attack
    falling-ambush
    jumping-ambush
    jumping-ambush-cont
    wait-for-focus
    spin-attack
    )
  (:methods
    (grunt-method-196 (_type_ float) process-focusable)
    (get-enemy-info (_type_) nav-enemy-info)
    )
  )


(define *grunt-global-info* (new 'static 'grunt-global-info
                              :patrol-anim (new 'static 'inline-array grunt-anim-info 4
                                (new 'static 'grunt-anim-info :anim-index 11 :travel-speed (meters 4))
                                (new 'static 'grunt-anim-info :anim-index 12 :travel-speed (meters 7))
                                (new 'static 'grunt-anim-info :anim-index 14 :travel-speed (meters 7))
                                (new 'static 'grunt-anim-info :anim-index 15 :travel-speed (meters 7))
                                )
                              :charge-anim (new 'static 'inline-array grunt-anim-info 3
                                (new 'static 'grunt-anim-info :anim-index 14 :travel-speed (meters 7))
                                (new 'static 'grunt-anim-info :anim-index 15 :travel-speed (meters 7))
                                (new 'static 'grunt-anim-info :anim-index 16 :travel-speed (meters 7))
                                )
                              :attack-anim (new 'static 'inline-array grunt-anim-info 2
                                (new 'static 'grunt-anim-info :anim-index 17 :travel-speed (meters 12))
                                (new 'static 'grunt-anim-info :anim-index 18 :travel-speed (meters 12))
                                )
                              )
        )

(define *grunt-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #t
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 36
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 3
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x6
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x7
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 60)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 3
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x6
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x7
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x8
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x9
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #xa
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 3
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x8
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x9
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #xa
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 3
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x6
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x7
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x8
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x9
        :param0 30
        :param1 #x69
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #xa
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 3
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x14
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 60)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x5
        :param0 1
        :param1 1
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 5
    :notice-anim 13
    :hostile-anim -1
    :hit-anim -1
    :knocked-anim -1
    :knocked-land-anim -1
    :die-anim -1
    :die-falling-anim -1
    :victory-anim -1
    :jump-wind-up-anim 22
    :jump-in-air-anim 23
    :jump-land-anim 24
    :neck-joint 5
    :look-at-joint 6
    :bullseye-joint 18
    :sound-hit (static-sound-name "grunt-hit")
    :sound-die (static-sound-name "grunt-die")
    :notice-distance (meters 40)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 5.0
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 5)
    :attack-shove-up (meters 3)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.5)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.5)
    :ragdoll-rotate-velocity-mult 0.5
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 73728.0
    :knocked-red-vy-hi 114688.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :ragdoll-info (new 'static 'ragdoll-setup
      :orient-tform (new 'static 'vector :x 1.0 :w 10625.897)
      :scale (new 'static 'vector :x 0.6399 :y 0.6399 :z 0.6399)
      :bg-collide-with (collide-spec backgnd crate obstacle hit-by-others-list player-list)
      :joint-setup (new 'static 'boxed-array :type ragdoll-joint-setup
        (new 'static 'ragdoll-joint-setup
          :joint-index 3
          :parent-joint -1
          :geo-tform (new 'static 'vector :x -1.0 :w 1170.3455)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 2268.7744
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 4
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 4000.9365)
          :geo-tform (new 'static 'vector :x 1.0 :w 12817.95)
          :axial-slop 2169.078
          :max-angle 2296.8184
          :coll-rad 2867.2
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 5
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 10540.374)
          :geo-tform (new 'static 'vector :x -1.0 :w 12551.108)
          :axial-slop 2169.078
          :max-angle 2226.3489
          :coll-rad 2209.3823
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 6
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 13046.233)
          :geo-tform (new 'static 'vector :x 1.0 :w 18078.088)
          :axial-slop 2169.078
          :max-angle 3210.7178
          :coll-rad 1644.544
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 7
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 16901.771)
          :geo-tform (new 'static 'vector :x 1.0 :w 359.3193)
          :axial-slop 2169.078
          :max-angle 2605.129
          :coll-rad 1722.368
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 9
          :parent-joint 4
          :pre-tform (new 'static 'vector :x 0.4178 :z -0.9083 :w 11487.004)
          :geo-tform (new 'static 'vector :x -0.5907 :y -0.4565 :z 0.665 :w 25388.248)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1641.6768
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 10
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1565 :z -0.9875 :w 12747.589)
          :geo-tform (new 'static 'vector :x -0.0123 :y 0.7268 :z 0.6864 :w 28823.824)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1295.1552
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 11
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.938 :z 0.3463 :w 15464.585)
          :geo-tform (new 'static 'vector :x 0.0404 :y 0.9991 :z 0.0016 :w 26660.428)
          :axial-slop 2169.078
          :max-angle 2671.921
          :coll-rad 1899.3152
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 12
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.938 :z 0.346 :w 14.381512)
          :geo-tform (new 'static 'vector :x 0.5827 :y 0.8005 :z 0.1389 :w 27752.074)
          :axial-slop 2169.078
          :max-angle 2077.3455
          :coll-rad 1787.904
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 13
          :parent-joint 4
          :pre-tform (new 'static 'vector :x 0.418 :z 0.9082 :w 11484.565)
          :geo-tform (new 'static 'vector :x 0.5908 :y -0.4564 :z 0.665 :w 40148.812)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1563.8528
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 14
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1563 :z 0.9875 :w 12751.085)
          :geo-tform (new 'static 'vector :x 0.0122 :y 0.7266 :z 0.6866 :w 36713.688)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 15
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.938 :z -0.3461 :w 15469.664)
          :geo-tform (new 'static 'vector :x -0.0404 :y 0.9991 :z 0.0015 :w 38877.887)
          :axial-slop 2169.078
          :max-angle 2330.5876
          :coll-rad 1610.1376
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 16
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9377 :z -0.3468 :w 16.074524)
          :geo-tform (new 'static 'vector :x -0.2371 :y 0.2169 :z -0.9468 :w 20556.623)
          :axial-slop 2169.078
          :max-angle 1879.882
          :coll-rad 1629.3888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 17
          :parent-joint 3
          :pre-tform (new 'static 'vector :x 1.0 :w 42847.234)
          :geo-tform (new 'static 'vector :x -1.0 :w 16468.232)
          :axial-slop 2169.078
          :max-angle 2508.973
          :coll-rad 1812.0704
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 18
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 3567.2522)
          :geo-tform (new 'static 'vector :x 1.0 :w 42973.14)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1858.3552
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 19
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.2349 :z -0.9718 :w 18020.252)
          :geo-tform (new 'static 'vector :x 0.3808 :y 0.3151 :z 0.8691 :w 29486.395)
          :axial-slop 2169.078
          :max-angle 3698.87
          :coll-rad 877.3632
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 20
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9998 :z 0.0086 :w 4412.9214)
          :geo-tform (new 'static 'vector :x 0.3995 :y -0.4805 :z 0.7804 :w 25729.781)
          :axial-slop 2169.078
          :max-angle 3691.5154
          :coll-rad 1524.9408
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 21
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.7835 :z 0.621 :w 14960.958)
          :geo-tform (new 'static 'vector :x 0.2887 :y 0.6587 :z 0.6945 :w 40555.97)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 22
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.7644 :z -0.6445 :w 17272.176)
          :geo-tform (new 'static 'vector :x 0.5513 :y 0.3614 :z 0.7516 :w 33063.24)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 23
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9734 :z 0.2283 :w 7149.304)
          :geo-tform (new 'static 'vector :x -0.7224 :y -0.6901 :z -0.0373 :w 15253.522)
          :axial-slop 2169.078
          :max-angle 1294.1176
          :coll-rad 659.456
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 24
          :parent-joint 22
          :pre-tform (new 'static 'vector :x 0.4934 :z 0.8696 :w 6514.1875)
          :geo-tform (new 'static 'vector :x -0.0332 :y 0.8825 :z 0.4687 :w 37613.457)
          :axial-slop 2169.078
          :max-angle 1411.5544
          :coll-rad 605.3888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 25
          :parent-joint 18
          :pre-tform (new 'static 'vector :x -1.0 :w 9863.842)
          :geo-tform (new 'static 'vector :x -1.0 :w 12698.965)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1488.0768
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 26
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -1.0 :w 1462.5452)
          :geo-tform (new 'static 'vector :x 0.9995 :y -0.0161 :z -0.0185 :w 7921.737)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1285.7344
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 27
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9958 :z -0.09 :w 1956.7229)
          :geo-tform (new 'static 'vector :x 0.9998 :y 0.0041 :z 0.0071 :w 33050.805)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1801.8304
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 28
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9998 :z 0.0159 :w 6114.891)
          :geo-tform (new 'static 'vector :x 0.9998 :y -0.0127 :z 0.0043 :w 8018.73)
          :axial-slop 2169.078
          :max-angle 2497.213
          :coll-rad 794.2144
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 29
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9998 :z 0.0159 :w 6305.8555)
          :geo-tform (new 'static 'vector :x 0.9998 :y -0.0172 :z 0.0018 :w 6908.7324)
          :axial-slop 2169.078
          :max-angle 1846.1127
          :coll-rad 556.2368
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 30
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9998 :z 0.0159 :w 6830.7266)
          :geo-tform (new 'static 'vector :x 0.9993 :y -0.0365 :z -0.006 :w 3790.2383)
          :axial-slop 2169.078
          :max-angle 1491.563
          :coll-rad 542.3104
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 31
          :parent-joint 18
          :pre-tform (new 'static 'vector :x -0.2352 :z 0.9718 :w 18022.729)
          :geo-tform (new 'static 'vector :x -0.3537 :y 0.3542 :z 0.8654 :w 34566.508)
          :axial-slop 2169.078
          :max-angle 3739.2292
          :coll-rad 1540.096
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 32
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8967 :z -0.4423 :w 5274.7744)
          :geo-tform (new 'static 'vector :x -0.0105 :y 0.862 :z -0.5065 :w 24694.367)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 33
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8194 :z -0.573 :w 13110.112)
          :geo-tform (new 'static 'vector :x -0.2576 :y 0.7211 :z 0.6428 :w 24504.475)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1751.4496
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 34
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.8027 :z 0.596 :w 15135.011)
          :geo-tform (new 'static 'vector :x -0.5895 :y 0.2007 :z 0.7821 :w 36329.734)
          :axial-slop 2169.078
          :max-angle 3682.7046
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 35
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8262 :z 0.5632 :w 7707.525)
          :geo-tform (new 'static 'vector :x -0.6943 :y 0.7184 :z -0.0381 :w 14762.858)
          :axial-slop 2169.078
          :max-angle 2015.6871
          :coll-rad 573.0304
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 36
          :parent-joint 34
          :pre-tform (new 'static 'vector :x 0.9975 :z -0.0684 :w 3277.692)
          :geo-tform (new 'static 'vector :x -0.2795 :y 0.7979 :z 0.5336 :w 35258.77)
          :axial-slop 2169.078
          :max-angle 1851.9927
          :coll-rad 468.992
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 37
          :parent-joint 4
          :pre-tform (new 'static 'vector :x 0.5769 :z -0.8166 :w 8297.695)
          :geo-tform (new 'static 'vector :x -0.6954 :y -0.0651 :z 0.7153 :w 9511.8955)
          :axial-slop 2169.078
          :max-angle 2863.5044
          :coll-rad 1868.5952
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 38
          :parent-joint 4
          :pre-tform (new 'static 'vector :x 0.5774 :z 0.8162 :w 8293.489)
          :geo-tform (new 'static 'vector :x 0.948 :y -0.2986 :z 0.1083 :w 34953.68)
          :axial-slop 2169.078
          :max-angle 2569.885
          :coll-rad 1893.9904
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 39
          :parent-joint 12
          :pre-tform (new 'static 'vector :x 0.3449 :z -0.9384 :w 16372.404)
          :geo-tform (new 'static 'vector :x 0.088 :y -0.8342 :z 0.5442 :w 20057.604)
          :axial-slop 2169.078
          :max-angle 3185.0312
          :coll-rad 1327.9232
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 40
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.6081 :z 0.7936 :w 10429.526)
          :geo-tform (new 'static 'vector :x 0.213 :y -0.975 :z -0.061 :w 19499.654)
          :axial-slop 2169.078
          :max-angle 2031.8344
          :coll-rad 423.1168
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 41
          :parent-joint 12
          :pre-tform (new 'static 'vector :x 0.9512 :z -0.3084 :w 2006.2573)
          :geo-tform (new 'static 'vector :x -0.0464 :y 0.9956 :z 0.0799 :w 26746.152)
          :axial-slop 2169.078
          :max-angle 2505.2957
          :coll-rad 533.7088
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 42
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.7105 :z 0.7034 :w 3017.6597)
          :geo-tform (new 'static 'vector :x 0.0381 :y 0.9847 :z -0.1692 :w 26846.422)
          :axial-slop 2169.078
          :max-angle 2064.8572
          :coll-rad 408.3712
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 43
          :parent-joint 10
          :pre-tform (new 'static 'vector :x 0.9371 :z 0.3486 :w 15668.893)
          :geo-tform (new 'static 'vector :x -0.2897 :y 0.1004 :z 0.9516 :w 31568.328)
          :axial-slop 2169.078
          :max-angle 2784.2424
          :coll-rad 1593.7535
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 44
          :parent-joint 16
          :pre-tform (new 'static 'vector :x 0.3452 :z 0.9383 :w 16373.424)
          :geo-tform (new 'static 'vector :x 0.1347 :y 0.823 :z -0.5515 :w 19233.342)
          :axial-slop 2169.078
          :max-angle 2773.2288
          :coll-rad 1373.3888
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 45
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.4593 :z -0.888 :w 10428.289)
          :geo-tform (new 'static 'vector :x 0.1971 :y 0.977 :z 0.079 :w 17810.5)
          :axial-slop 2169.078
          :max-angle 1984.8488
          :coll-rad 616.448
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 46
          :parent-joint 16
          :pre-tform (new 'static 'vector :x 0.9998 :z -0.0063 :w 3668.4868)
          :geo-tform (new 'static 'vector :x 0.0529 :y 0.9969 :z 0.056 :w 38759.062)
          :axial-slop 2169.078
          :max-angle 1981.1897
          :coll-rad 1127.6288
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 47
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.7207 :z -0.6929 :w 3011.8708)
          :geo-tform (new 'static 'vector :x -0.0298 :y 0.9808 :z -0.1918 :w 38536.098)
          :axial-slop 2169.078
          :max-angle 2276.2654
          :coll-rad 534.528
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 48
          :parent-joint 14
          :pre-tform (new 'static 'vector :x 0.9375 :z -0.3477 :w 15673.973)
          :geo-tform (new 'static 'vector :x 0.2894 :y 0.1005 :z 0.9517 :w 33957.168)
          :axial-slop 2169.078
          :max-angle 2685.1372
          :coll-rad 1853.0304
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 49
          :parent-joint 22
          :pre-tform (new 'static 'vector :x -0.9829 :z 0.1831 :w 2492.6619)
          :geo-tform (new 'static 'vector :x 0.5546 :y 0.2592 :z 0.7904 :w 34067.453)
          :axial-slop 2169.078
          :max-angle 1536.3458
          :coll-rad 525.9264
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 50
          :parent-joint 34
          :pre-tform (new 'static 'vector :x -0.275 :z 0.9613 :w 5964.5225)
          :geo-tform (new 'static 'vector :x -0.5191 :y 0.2888 :z 0.8042 :w 30864.797)
          :axial-slop 2169.078
          :max-angle 1445.3237
          :coll-rad 382.5664
          )
        )
      )
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint 6
    :gem-seg #x2
    :gem-no-seg #x4
    :gem-offset (new 'static 'sphere :y 614.4 :z -3276.8 :r 327680.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #t
    :use-circling #t
    :use-pacing #t
    :walk-anim 11
    :turn-anim -1
    :run-anim 14
    :taunt-anim 19
    :run-travel-speed (meters 7)
    :run-acceleration (meters 6)
    :run-turning-acceleration (meters 50)
    :walk-travel-speed (meters 4)
    :walk-acceleration (meters 6)
    :walk-turning-acceleration (meters 3)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 2)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *grunt-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod event-handler ((this grunt) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('hit 'hit-knocked)
     (logclear! (-> this mask) (process-mask actor-pause))
     (logclear! (-> this focus-status) (focus-status dangerous))
     (logclear! (-> this enemy-flags) (enemy-flag use-notice-distance))
     (logior! (-> this enemy-flags) (enemy-flag alert))
     (logior! (-> this focus-status) (focus-status hit))
     (if (= (-> this hit-points) 0.0)
         (logior! (-> this focus-status) (focus-status dead))
         )
     (logclear! (-> this enemy-flags) (enemy-flag lock-focus))
     (enemy-method-69 this)
     (logior! (-> this enemy-flags) (enemy-flag lock-focus))
     (process-contact-action arg0)
     (send-event arg0 'get-attack-count 1)
     (freeze-hit-begin)
     (cond
       ((= (-> this hit-points) 0.0)
        (let ((s5-1 (-> this incoming knocked-type)))
          (cond
            ((and (= s5-1 (knocked-type yellow-shot))
                  (not (and (-> this next-state) (let ((v1-31 (-> this next-state name)))
                                                   (or (= v1-31 'knocked) (= v1-31 'jump) (= v1-31 'jump-land))
                                                   )
                            )
                       )
                  (zero? (rnd-int this 3))
                  (let ((f0-2 (vector-vector-distance-squared (-> this root trans) (target-pos 0)))
                        (f1-2 32768.0)
                        )
                    (>= f0-2 (* f1-2 f1-2))
                    )
                  )
             (go-die this)
             )
            ((or (= s5-1 (knocked-type yellow-shot)) (= s5-1 (knocked-type blue-shot)))
             (set! (-> this incoming knocked-type) (knocked-type none))
             (go (method-of-object this knocked))
             )
            (else
              (go (method-of-object this knocked))
              )
            )
          )
        )
       (else
         (go (method-of-object this knocked))
         )
       )
     #t
     )
    (else
      ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod go-ambush-delay ((this grunt))
  (cond
    ((logtest? (-> this fact enemy-options) (enemy-option user10))
     (go (method-of-object this falling-ambush))
     )
    ((logtest? (-> this fact enemy-options) (enemy-option user11))
     (go (method-of-object this jumping-ambush))
     )
    (else
      (format 0 "ERROR: ~A doesn't specify which ambush behavior to use.~%" (-> this name))
      (go-hostile this)
      )
    )
  )

(defstate falling-ambush (grunt)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (when (logtest? (-> self enemy-flags) (enemy-flag enable-on-notice))
      (logclear! (-> self enemy-flags) (enemy-flag enable-on-notice))
      (let ((gp-0 (-> self on-notice)))
        (if gp-0
            (script-eval gp-0 :vector (-> self root trans))
            )
        )
      )
    (let* ((gp-1 *target*)
           (a0-4 (if (type? gp-1 process-focusable)
                     gp-1
                     )
                 )
           )
      (when a0-4
        (let* ((gp-2 (-> self root))
               (s3-0 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (get-trans a0-4 0) (-> gp-2 trans)) 1.0))
               (f0-0 (deg-diff (quaternion-y-angle (-> gp-2 quat)) (vector-y-angle s3-0)))
               )
          (quaternion-rotate-y! (-> gp-2 quat) (-> gp-2 quat) f0-0)
          )
        )
      )
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (let* ((v1-17 *game-info*)
           (a0-15 (+ (-> v1-17 attack-id) 1))
           )
      (set! (-> v1-17 attack-id) a0-15)
      (set! (-> self attack-id) a0-15)
      )
    (let ((v1-19 (-> self root root-prim)))
      (set! (-> v1-19 prim-core collide-as) (collide-spec))
      (set! (-> v1-19 prim-core collide-with) (collide-spec))
      )
    0
    )
  :exit (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-1 prim-core collide-with) (-> self root backup-collide-with))
      )
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.2))
        (suspend)
        )
      )
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-6 prim-core collide-with) (-> self root backup-collide-with))
      )
    (sound-play "grunt-notice")
    (ja-channel-push! 1 0)
    (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info notice-anim))
                :num! (seek! max 1.8)
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 1.8))
      )
    (until (logtest? (-> self root status) (collide-status on-ground touch-surface touch-wall))
      (suspend)
      )
    (go-virtual hostile)
    )
  :post nav-enemy-falling-post
  )

(defmethod go-directed2 ((this grunt))
  (case (-> this jump-why)
    ((2)
     (go (method-of-object this jumping-ambush-cont))
     )
    (else
      ((method-of-type nav-enemy go-directed2) this)
      )
    )
  )

(defstate jumping-ambush (grunt)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    ((-> (method-of-type nav-enemy ambush) enter))
    (when (zero? (-> self intro-path))
      (format 0 "ERROR: ~A has no intro path, skipping jumping-ambush~%" (-> self name))
      (go-virtual notice)
      )
    (get-point-in-path! (-> self intro-path) (-> self root trans) 0.0 'interp)
    )
  :code (behavior ()
    (set! (-> self jumping-ambush-path-pt) 1)
    (until #f
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (get-point-in-path! (-> self intro-path) gp-0 1.0 'interp)
        (set! (-> self enemy-flags)
              (the-as enemy-flag (logclear (-> self enemy-flags) (enemy-flag jump-check-blocked)))
              )
        (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
          (let ((v1-5 (process->ppointer self)))
            (set! (-> a1-1 from) v1-5)
            )
          (set! (-> a1-1 num-params) 2)
          (set! (-> a1-1 message) 'jump)
          (set! (-> a1-1 param 0) (the-as uint 2))
          (set! (-> a1-1 param 1) (the-as uint gp-0))
          (send-event-function self a1-1)
          )
        )
      (suspend)
      )
    #f
    )
  )

(defstate jumping-ambush-cont (grunt)
  :virtual #t
  :event enemy-event-handler
  :code (behavior ()
    (let ((a0-0 (-> self intro-path))
          (v1-1 (+ (-> self jumping-ambush-path-pt) 1))
          )
      (if (< v1-1 (-> a0-0 curve num-cverts))
          (set! (-> self jumping-ambush-path-pt) v1-1)
          (go-best-state self)
          )
      )
    (until #f
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (get-point-in-path! (-> self intro-path) gp-0 (the float (-> self jumping-ambush-path-pt)) 'interp)
        (set! (-> self enemy-flags)
              (the-as enemy-flag (logclear (-> self enemy-flags) (enemy-flag jump-check-blocked)))
              )
        (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
          (let ((v1-9 (process->ppointer self)))
            (set! (-> a1-1 from) v1-9)
            )
          (set! (-> a1-1 num-params) 2)
          (set! (-> a1-1 message) 'jump)
          (set! (-> a1-1 param 0) (the-as uint 2))
          (set! (-> a1-1 param 1) (the-as uint gp-0))
          (send-event-function self a1-1)
          )
        )
      (suspend)
      )
    #f
    )
  )

(defstate active (grunt)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (or (and v1-2 (or (= v1-2 grunt-charge0-ja) (= v1-2 grunt-charge1-ja) (= v1-2 grunt-charge2-ja)))
                (let ((v1-8 (ja-group)))
                  (and v1-8
                       (or (= v1-8 grunt-patrol0-ja) (= v1-8 grunt-patrol1-ja) (= v1-8 grunt-charge0-ja) (= v1-8 grunt-charge1-ja))
                       )
                  )
                )
        (ja-no-eval :num! (seek!))
        (while (not (ja-done? 0))
          (suspend)
          (ja-eval)
          )
        )
      )
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (until #f
        (set! (-> self patrol-anim) (-> *grunt-global-info* patrol-anim (rnd-int self 4)))
        (let ((v1-28 (-> self nav)))
          (set! (-> v1-28 target-speed) (-> self patrol-anim travel-speed))
          )
        0
        (let ((gp-0 (-> self draw art-group data (-> self patrol-anim anim-index)))
              (s5-0 (set-reaction-time! self 1 (seconds 0.027)))
              )
          (let ((v1-37 (ja-group)))
            (if (not (and v1-37 (= v1-37 gp-0)))
                (ja-channel-push! 1 (seconds 0.2))
                )
            )
          (dotimes (s4-0 s5-0)
            (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek! max f30-0))
              )
            )
          )
        (when (nonzero? (-> self patrol-anim anim-index))
          (ja-no-eval :num! (loop!))
          (ja-channel-push! 1 (seconds 0.2))
          (set! (-> self patrol-anim) (the-as grunt-anim-info (-> *grunt-global-info* patrol-anim)))
          (let ((v1-67 (-> self nav)))
            (set! (-> v1-67 target-speed) (-> self patrol-anim travel-speed))
            )
          0
          (let ((gp-1 (-> self draw art-group data (-> self patrol-anim anim-index)))
                (s5-1 (set-reaction-time! self (seconds 0.007) (seconds 0.017)))
                )
            (ja-no-eval :group! gp-1 :num! (seek! max f30-0) :frame-num 0.0)
            (until (ja-done? 0)
              (ja-blend-eval)
              (suspend)
              (ja :num! (seek! max f30-0))
              )
            (dotimes (s4-1 s5-1)
              (ja-no-eval :group! gp-1 :num! (seek! max f30-0) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek! max f30-0))
                )
              )
            )
          )
        (when (zero? (rnd-int self 3))
          (let ((v1-107 self))
            (set! (-> v1-107 enemy-flags) (the-as enemy-flag (logclear (-> v1-107 enemy-flags) (enemy-flag ef37))))
            (set! (-> v1-107 nav callback-info) *null-nav-callback-info*)
            )
          0
          (nav-enemy-method-178 self)
          (ja-channel-push! 1 (seconds 0.3))
          (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info idle-anim))
                      :num! (seek! max f30-0)
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! max f30-0))
            )
          (until (not (enemy-method-134 self 0.2))
            (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info idle-anim))
                        :num! (seek! max f30-0)
                        :frame-num 0.0
                        )
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek! max f30-0))
              )
            )
          (let ((v1-171 self))
            (if (not (logtest? (enemy-flag ef37) (-> v1-171 enemy-flags)))
                (set! (-> v1-171 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-171 enemy-flags))))
                )
            (set! (-> v1-171 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-171 enemy-flags))))
            (set! (-> v1-171 nav callback-info) (-> v1-171 enemy-info callback-info))
            )
          0
          )
        )
      )
    #f
    )
  )

(defmethod grunt-method-196 ((this grunt) (arg0 float))
  (local-vars (v1-5 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (get-focus! this)))
      (when gp-0
        (let ((v1-3 (get-trans gp-0 0))
              (s4-0 (new 'stack-no-clear 'vector))
              )
          (vector-! s4-0 v1-3 (-> this root trans))
          (.lvf vf1 (&-> s4-0 quad))
          (.add.w.vf vf2 vf0 vf0 :mask #b1)
          (.mul.vf vf1 vf1 vf1)
          (.mul.x.vf acc vf2 vf1 :mask #b1)
          (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
          (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
          (.mov v1-5 vf1)
          (let* ((f30-0 v1-5)
                 (f0-0 arg0)
                 (f28-0 (* f0-0 f0-0))
                 (f0-2 12288.0)
                 )
            (when (or (>= (* f0-2 f0-2) f30-0) (>= f28-0 f30-0))
              (let ((f26-0 (quaternion-y-angle (-> this root quat)))
                    (f0-7 (atan (-> s4-0 x) (-> s4-0 z)))
                    (f1-0 1228.8)
                    )
                (cond
                  ((and (< (* f1-0 f1-0) f30-0) (>= f28-0 f30-0) (>= 8192.0 (fabs (deg- f26-0 f0-7))))
                   (go (method-of-object this attack))
                   )
                  ((let ((f0-10 12288.0))
                     (< f30-0 (* f0-10 f0-10))
                     )
                   (go (method-of-object this spin-attack))
                   )
                  )
                )
              )
            )
          )
        )
      gp-0
      )
    )
  )

(defstate hostile (grunt)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((a0-1 (grunt-method-196 self 13312.0))
          (gp-0 (current-time))
          )
      (when (and (>= gp-0 (-> self next-warn-time))
                 (not (logtest? (-> self draw status) (draw-control-status on-screen)))
                 )
        (when (and a0-1 (let ((f0-0 65536.0))
                          (>= (* f0-0 f0-0) (vector-vector-xz-distance-squared (get-trans a0-1 0) (-> self root trans)))
                          )
                   )
          (sound-play "grunt-warn")
          (set! (-> self next-warn-time) (+ gp-0 (set-reaction-time! self (seconds 1) (seconds 1.2))))
          )
        )
      )
    )
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (and v1-2 (or (= v1-2 grunt-charge0-ja) (= v1-2 grunt-charge1-ja) (= v1-2 grunt-charge2-ja)))
        (let ((v1-6 (-> self nav)))
          (set! (-> v1-6 target-speed) (-> self charge-anim travel-speed))
          )
        0
        (ja-no-eval :num! (seek!))
        (while (not (ja-done? 0))
          (suspend)
          (ja-eval)
          )
        )
      )
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (let ((v1-19 (-> self use-charge-anim-index)))
        (cond
          ((>= v1-19 0)
           (set! (-> self charge-anim) (-> *grunt-global-info* charge-anim v1-19))
           (set! (-> self use-charge-anim-index) -1)
           )
          (else
            (set! (-> self charge-anim) (-> *grunt-global-info* charge-anim (rnd-int self 3)))
            )
          )
        )
      (until #f
        (grunt-method-196 self 22528.0)
        (let ((gp-0 (-> self draw art-group data (-> self charge-anim anim-index))))
          (let ((v1-37 (ja-group)))
            (when (not (and v1-37 (= v1-37 gp-0)))
              (ja-channel-push! 1 (seconds 0.1))
              (let ((v1-41 (-> self nav)))
                (set! (-> v1-41 target-speed) (-> self charge-anim travel-speed))
                )
              0
              )
            )
          (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
          )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    )
  :post nav-enemy-chase-post
  )

(defstate attack (grunt)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((v1-1 (-> self nav state)))
      (set! (-> v1-1 speed) (-> self enemy-info run-travel-speed))
      )
    0
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (logior! (-> self focus-status) (focus-status dangerous))
    (set! (-> self root penetrate-using) (penetrate generic-attack lunge))
    (reset-penetrate! self)
    (let* ((v1-10 *game-info*)
           (v0-1 (+ (-> v1-10 attack-id) 1))
           )
      (set! (-> v1-10 attack-id) v0-1)
      (set! (-> self attack-id) v0-1)
      )
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (reset-penetrate! self)
    (when (logtest? (-> self enemy-flags) (enemy-flag victory))
      (logclear! (-> self enemy-flags) (enemy-flag victory))
      (sound-play "grunt-hit")
      )
    )
  :code (behavior ()
    (set! (-> self attack-anim) (-> *grunt-global-info* attack-anim (rnd-int self 2)))
    (let ((v1-5 (-> self nav)))
      (set! (-> v1-5 target-speed) (-> self attack-anim travel-speed))
      )
    0
    (let ((v1-7 (-> self nav)))
      (set! (-> v1-7 turning-acceleration) 49152.0)
      )
    0
    (let ((gp-0 (-> self draw art-group data (-> self attack-anim anim-index)))
          (f30-0 (rnd-float-range self 0.9 1.1))
          )
      (let ((v1-17 (ja-group)))
        (if (not (and v1-17 (= v1-17 gp-0)))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (let ((v1-36 (-> self nav)))
      (set! (-> v1-36 target-speed) (-> self charge-anim travel-speed))
      )
    0
    (let ((v1-38 (-> self nav)))
      (set! (-> v1-38 turning-acceleration) (-> self enemy-info run-turning-acceleration))
      )
    0
    (let ((gp-1 (-> self draw art-group data (-> self charge-anim anim-index))))
      (ja-channel-push! 1 (seconds 0.1))
      (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
      )
    (ja :num-func num-func-identity :frame-num (ja-aframe 3.0 0))
    (let ((gp-3 (-> self focus aware)))
      (if (or (not (get-focus! self)) (!= gp-3 3))
          (go-stare self)
          )
      )
    (let ((v1-57 0))
      (let ((a0-22 (the-as object (-> *grunt-global-info* charge-anim)))
            (a1-7 (-> self charge-anim))
            )
        (dotimes (a2-3 3)
          (when (= a0-22 a1-7)
            (set! v1-57 a2-3)
            (goto cfg-21)
            )
          (set! a0-22 (-> (the-as grunt-global-info a0-22) patrol-anim 1))
          )
        )
      (label cfg-21)
      (set! (-> self use-charge-anim-index) v1-57)
      )
    (go-virtual hostile)
    )
  :post nav-enemy-chase-post
  )

(defstate spin-attack (grunt)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-2 nav callback-info) *null-nav-callback-info*)
      )
    0
    (nav-enemy-method-178 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag ef38))))
      )
    0
    (let ((gp-0 (handle->process (-> self focus handle))))
      (if (not gp-0)
          (go-stare self)
          )
      (set! (-> self focus-pos quad) (-> (get-trans (the-as process-focusable gp-0) 0) quad))
      )
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-21 *game-info*)
           (v0-3 (+ (-> v1-21 attack-id) 1))
           )
      (set! (-> v1-21 attack-id) v0-3)
      (set! (-> self attack-id) v0-3)
      )
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (when (logtest? (-> self enemy-flags) (enemy-flag victory))
      (logclear! (-> self enemy-flags) (enemy-flag victory))
      (sound-play "grunt-hit")
      )
    )
  :code (behavior ()
    (set! (-> self attack-anim) (-> *grunt-global-info* attack-anim (rnd-int self 2)))
    (let ((gp-0 (-> self draw art-group data (-> self attack-anim anim-index)))
          (f30-0 (rnd-float-range self 0.9 1.1))
          )
      (let ((v1-13 (ja-group)))
        (if (not (and v1-13 (= v1-13 gp-0)))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
      (until (ja-done? 0)
        (let ((a0-9 (handle->process (-> self focus handle))))
          (if a0-9
              (set! (-> self focus-pos quad) (-> (get-trans (the-as process-focusable a0-9) 0) quad))
              )
          )
        (seek-to-point-toward-point! (-> self root) (-> self focus-pos) 546133.3 (seconds 0.1))
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (let ((gp-3 (-> self focus aware)))
      (if (or (not (get-focus! self)) (!= gp-3 3))
          (go-stare self)
          )
      )
    (go-virtual hostile)
    )
  :post nav-enemy-simple-post
  )

(defstate circling (grunt)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (and v1-2 (or (= v1-2 grunt-charge0-ja) (= v1-2 grunt-charge1-ja) (= v1-2 grunt-charge2-ja)))
        (let ((v1-6 (-> self nav)))
          (set! (-> v1-6 target-speed) (-> self charge-anim travel-speed))
          )
        0
        (ja-no-eval :num! (seek!))
        (while (not (ja-done? 0))
          (suspend)
          (ja-eval)
          )
        )
      )
    (until #f
      (set! (-> self charge-anim) (-> *grunt-global-info* charge-anim (rnd-int self 3)))
      (let ((v1-22 self))
        (if (not (logtest? (enemy-flag ef37) (-> v1-22 enemy-flags)))
            (set! (-> v1-22 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-22 enemy-flags))))
            )
        (set! (-> v1-22 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-22 enemy-flags))))
        (set! (-> v1-22 nav callback-info) (-> v1-22 enemy-info callback-info))
        )
      0
      (let ((v1-25 self))
        (set! (-> v1-25 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef38) (-> v1-25 enemy-flags))))
        )
      0
      (let ((v1-27 (-> self nav)))
        (set! (-> v1-27 target-speed) (-> self charge-anim travel-speed))
        )
      0
      (let ((v1-29 (-> self nav)))
        (set! (-> v1-29 acceleration) (-> self enemy-info run-acceleration))
        )
      0
      (let ((v1-31 (-> self nav)))
        (set! (-> v1-31 turning-acceleration) (-> self enemy-info run-turning-acceleration))
        )
      0
      (let ((gp-0 (-> self draw art-group data (-> self charge-anim anim-index))))
        (let ((v1-39 (ja-group)))
          (if (not (and v1-39 (= v1-39 gp-0)))
              (ja-channel-push! 1 (seconds 0.1))
              )
          )
        (let ((s5-0 (rnd-int self 8))
              (f30-0 (rnd-float-range self 0.9 1.1))
              )
          (while (nonzero? s5-0)
            (+! s5-0 -1)
            (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek! max f30-0))
              )
            )
          )
        )
      (when (< 20480.0 (vector-vector-xz-distance (-> self focus-pos) (-> self root trans)))
        (let ((v1-66 self))
          (set! (-> v1-66 enemy-flags) (the-as enemy-flag (logclear (-> v1-66 enemy-flags) (enemy-flag ef37))))
          (set! (-> v1-66 nav callback-info) *null-nav-callback-info*)
          )
        0
        (nav-enemy-method-178 self)
        (let ((v1-71 self))
          (set! (-> v1-71 enemy-flags) (the-as enemy-flag (logclear (-> v1-71 enemy-flags) (enemy-flag ef38))))
          )
        0
        (vector-reset! (-> self root transv))
        (let ((v1-77 (ja-group)))
          (if (not (and v1-77 (= v1-77 grunt-celebrate-start-ja)))
              (ja-channel-push! 1 (seconds 0.1))
              )
          )
        (let ((f30-2 (rnd-float-range self 0.9 1.1)))
          (ja-no-eval :group! grunt-celebrate-start-ja :num! (seek! max f30-2) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! max f30-2))
            )
          (ja-no-eval :group! grunt-celebrate-finish-ja :num! (seek! max f30-2) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! max f30-2))
            )
          )
        )
      )
    #f
    )
  )

(defstate pacing (grunt)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (and v1-2 (or (= v1-2 grunt-charge0-ja) (= v1-2 grunt-charge1-ja) (= v1-2 grunt-charge2-ja)))
        (let ((v1-6 (-> self nav)))
          (set! (-> v1-6 target-speed) (-> self charge-anim travel-speed))
          )
        0
        (ja-no-eval :num! (seek!))
        (while (not (ja-done? 0))
          (suspend)
          (ja-eval)
          )
        )
      )
    (set! (-> self patrol-anim) (-> *grunt-global-info* patrol-anim (rnd-int self 4)))
    (let ((f30-0 (rnd-float-range self 0.9 1.1))
          (gp-0 (-> self draw art-group data (-> self patrol-anim anim-index)))
          )
      (let ((v1-28 self))
        (if (not (logtest? (enemy-flag ef37) (-> v1-28 enemy-flags)))
            (set! (-> v1-28 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-28 enemy-flags))))
            )
        (set! (-> v1-28 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-28 enemy-flags))))
        (set! (-> v1-28 nav callback-info) (-> v1-28 enemy-info callback-info))
        )
      0
      (let ((v1-31 self))
        (set! (-> v1-31 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef38) (-> v1-31 enemy-flags))))
        )
      0
      (let ((v1-33 (-> self nav)))
        (set! (-> v1-33 target-speed) (-> self patrol-anim travel-speed))
        )
      0
      (let ((v1-35 (-> self nav)))
        (set! (-> v1-35 acceleration) (-> self enemy-info walk-acceleration))
        )
      0
      (let ((v1-37 (-> self nav)))
        (set! (-> v1-37 turning-acceleration) (-> self enemy-info walk-turning-acceleration))
        )
      0
      (let ((v1-41 (ja-group)))
        (if (not (and v1-41 (= v1-41 gp-0)))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (until #f
        (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    )
  )

(defstate stop-chase (grunt)
  :virtual #t
  :code (behavior ()
    (ja-no-eval :num! (seek!))
    (while (not (ja-done? 0))
      (suspend)
      (ja-eval)
      )
    (set! (-> self patrol-anim) (-> *grunt-global-info* patrol-anim (rnd-int self 4)))
    (let ((v1-14 (-> self nav)))
      (set! (-> v1-14 target-speed) (-> self patrol-anim travel-speed))
      )
    0
    (let ((f30-0 (rnd-float-range self 0.9 1.1))
          (gp-0 (-> self draw art-group data (-> self patrol-anim anim-index)))
          )
      (let ((v1-24 (ja-group)))
        (if (not (and v1-24 (= v1-24 gp-0)))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (until #f
        (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    )
  )

(defstate wait-for-focus (grunt)
  :virtual #t
  :event enemy-event-handler
  :enter (-> (method-of-type nav-enemy idle) enter)
  :trans (behavior ()
    (let ((s5-0 (handle->process (-> self focus handle))))
      (when s5-0
        (let ((gp-0 (get-trans (the-as process-focusable s5-0) 0)))
          (when (and (or (not (logtest? (-> self enemy-flags) (enemy-flag use-notice-distance)))
                         (>= 163840.0 (vector-vector-distance (-> self root trans) gp-0))
                         )
                     (or (not (logtest? (-> self fact enemy-options) (enemy-option user8)))
                         (and (not (focus-test? (the-as process-focusable s5-0) in-air))
                              (>= 4096.0 (fabs (- (-> gp-0 y) (-> self root trans y))))
                              )
                         )
                     )
            (cond
              ((and (logtest? (-> self fact enemy-options) (enemy-option user9))
                    (logtest? (-> self enemy-flags) (enemy-flag use-notice-distance))
                    )
               (let ((s5-1 (new 'stack-no-clear 'vector)))
                 (vector-! s5-1 gp-0 (-> self root trans))
                 (let ((f0-2 32768.0)
                       (v1-26 s5-1)
                       )
                   (if (or (>= f0-2 (sqrtf (+ (* (-> v1-26 x) (-> v1-26 x)) (* (-> v1-26 z) (-> v1-26 z)))))
                           (>= 20024.889 (fabs (deg- (y-angle (-> self root)) (atan (-> s5-1 x) (-> s5-1 z)))))
                           )
                       (go-virtual notice)
                       )
                   )
                 )
               )
              (else
                (go-virtual notice)
                )
              )
            )
          )
        )
      )
    )
  :code (-> (method-of-type nav-enemy idle) code)
  :post (-> (method-of-type nav-enemy idle) post)
  )

(defstate knocked-recover (grunt)
  :virtual #t
  :code (behavior ()
    (local-vars (v1-49 object))
    (ja-channel-push! 1 0)
    (let ((gp-0 (-> (the-as ragdoll-proc (handle->process (-> self ragdoll-proc))) ragdoll)))
      (when gp-0
        (let ((a0-5 (-> gp-0 ragdoll-joints)))
          (if (< 0.0 (vector-dot (-> self node-list data (-> a0-5 0 joint-index) bone transform fvec) *y-vector*))
              (ja-no-eval :group! grunt-getup-front-ja :num! (seek!) :frame-num 0.0)
              (ja-no-eval :group! grunt-getup-back-ja :num! (seek!) :frame-num 0.0)
              )
          )
        (enable-ragdoll! gp-0 self)
        )
      )
    (until v1-49
      (suspend)
      (ja :num! (seek!))
      (set! v1-49 (and (ja-done? 0) (let ((a0-15 (handle->process (-> self ragdoll-proc))))
                                      (or (not a0-15) (ragdoll-proc-method-19 (the-as ragdoll-proc a0-15)))
                                      )
                       )
            )
      )
    (if (enemy-method-109 self)
        (go-die self)
        (go-hostile self)
        )
    )
  )

(defmethod ragdoll-settled? ((this grunt))
  (let ((t9-0 (method-of-type nav-enemy ragdoll-settled?)))
    (and (t9-0 this) (or (= (-> this root gspot-pos y) -40959590.0)
                         (< (- (-> this root trans y) (-> this root gspot-pos y)) 4096.0)
                         )
         )
    )
  )

(defmethod on-dying ((this grunt))
  (when (-> this minimap)
    (logior! (-> this minimap flags) (minimap-flag fade-out))
    (set! (-> this minimap) #f)
    )
  (call-parent-method this)
  (none)
  )

;; WARN: Return type mismatch nav-enemy vs grunt.
(defmethod relocate ((this grunt) (offset int))
  (if (nonzero? (-> this intro-path))
      (&+! (-> this intro-path) offset)
      )
  (the-as grunt ((method-of-type nav-enemy relocate) this offset))
  )

(defmethod init-enemy-collision! ((this grunt))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid can-ride deadly no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 6144.0 0.0 17408.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid can-ride deadly no-standon))
      (set-vector! (-> v1-13 local-sphere) 0.0 4915.2 0.0 4915.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-with) (collide-spec backgnd crate obstacle hit-by-others-list))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 9830.4 0.0 4915.2)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-17 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-17 prim-core action) (collide-action semi-solid deadly))
      (set! (-> v1-17 transform-index) 4)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 0.0 4915.2)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-19 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-19 prim-core action) (collide-action semi-solid deadly))
      (set! (-> v1-19 transform-index) 18)
      (set-vector! (-> v1-19 local-sphere) 0.0 0.0 0.0 2252.8)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-21 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-21 prim-core action) (collide-action deadly))
      (set! (-> v1-21 transform-index) 16)
      (set-vector! (-> v1-21 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-23 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-23 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-23 prim-core action) (collide-action deadly))
      (set! (-> v1-23 transform-index) 12)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-25 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-25 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-25 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-25 prim-core action) (collide-action semi-solid deadly))
      (set! (-> v1-25 transform-index) 6)
      (set-vector! (-> v1-25 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-27 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-27 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-27 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod get-enemy-info ((this grunt))
  *grunt-nav-enemy-info*
  )

(defmethod coin-flip? ((this grunt))
  #f
  )

(defmethod init-enemy! ((this grunt))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-grunt" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this (get-enemy-info this))
  (let ((v1-6 (-> this neck)))
    (set! (-> v1-6 up) (the-as uint 1))
    (set! (-> v1-6 nose) (the-as uint 2))
    (set! (-> v1-6 ear) (the-as uint 0))
    (set-vector! (-> v1-6 twist-max) 11832.889 11832.889 0.0 1.0)
    (set! (-> v1-6 ignore-angle) 30947.555)
    )
  (let ((v1-8 (-> this nav)))
    (set! (-> v1-8 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (let ((s5-2 *grunt-global-info*))
    (set! (-> this patrol-anim) (-> s5-2 patrol-anim (rnd-int this 4)))
    (set! (-> this charge-anim) (-> s5-2 charge-anim (rnd-int this 3)))
    (set! (-> this attack-anim) (-> s5-2 attack-anim (rnd-int this 2)))
    )
  (set! (-> this use-charge-anim-index) -1)
  (if (zero? (rnd-int this 2))
      (logior! (-> this grunt-flags) (grunt-flags gf0))
      )
  (if (zero? (rnd-int this 2))
      (logior! (-> this grunt-flags) (grunt-flags gf2))
      )
  (set! (-> this intro-path) (new 'process 'path-control this 'intro 0.0 (the-as entity #f) #t))
  (add-connection
    *part-engine*
    this
    6
    this
    468
    (new 'static 'vector :x 1433.6 :y 2785.28 :z -1761.28 :w 163840.0)
    )
  (add-connection
    *part-engine*
    this
    6
    this
    468
    (new 'static 'vector :x -1433.6 :y 2785.28 :z -1761.28 :w 163840.0)
    )
  (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 108) (the-as int #f) (the-as vector #t) 0))
  0
  (none)
  )

;; WARN: Return type mismatch int vs object.
(defmethod go-idle2 ((this grunt))
  (if (logtest? (-> this fact enemy-options) (enemy-option user9))
      (go (method-of-object this wait-for-focus))
      (go (method-of-object this idle))
      )
  0
  )
