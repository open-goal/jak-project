;;-*-Lisp-*-
(in-package goal)

;; name: ash-shot.gc
;; name in dgo: ash-shot
;; dgos: DESOASIS

;; DECOMP BEGINS

(defpart 900
  :init-specs ((:texture (gun-yellow-beam level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 0.75))
    (:scale-y (meters 10))
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 32.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 901
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 64.0 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defpart 902
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 1.5)
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 128.0)
    (:a 16.0 32.0)
    (:scalevel-x (meters 0.013333334) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -1.28)
    (:fade-b -1.28)
    (:fade-a -0.48)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defpart 903
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 4.5))
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 128.0)
    (:fade-a -3.6571429)
    (:timer (seconds 0.117))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpartgroup group-ashelin-shot-hit
  :id 222
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 904 :period (seconds 2) :length (seconds 0.017))
    (sp-item 905 :fade-after (meters 100) :period (seconds 2) :length (seconds 0.017))
    (sp-item 906 :period (seconds 2) :length (seconds 0.017))
    (sp-item 907 :fade-after (meters 50) :falloff-to (meters 50) :period (seconds 2) :length (seconds 0.667))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.667))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.5))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.417))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.335))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.25))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.217))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.167))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.135))
    (sp-item 908 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 2) :length (seconds 0.085))
    )
  )

(defpart 907
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.0 0.2)
    (:y (meters 0.25))
    (:scale-x (meters 0.2) (meters 0.2))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b 32.0 8.0)
    (:a 32.0 64.0)
    (:vel-y (meters 0.06666667) (meters 0.013333334))
    (:scalevel-x (meters -0.001) (meters -0.00033333333))
    (:rotvel-z (degrees -2.4) 1 (degrees 4.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.10666667)
    (:fade-b -0.10666667)
    (:accel-y (meters -0.00033333333) (meters -0.0013333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.667))
    (:next-launcher 909)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 908
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.5)
    (:scale-x (meters 0.5) (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b 32.0 8.0)
    (:a 96.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters -0.0005) (meters -0.0005))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.10666667)
    (:fade-b -0.10666667)
    (:accel-y (meters -0.00033333333) (meters -0.0013333333))
    (:friction 0.8)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.667))
    (:next-launcher 909)
    (:conerot-x (degrees 0) (degrees 180))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 909
  :init-specs ((:fade-a -0.96))
  )

(defpart 905
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b 32.0 8.0)
    (:a 128.0)
    (:rotvel-z (degrees -0.1))
    (:fade-a -0.32)
    (:timer (seconds 1.335))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.035))
    (:next-launcher 910)
    )
  )

(defpart 910
  :init-specs ((:scale-x (meters 2) (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b 32.0 8.0)
    (:next-time (seconds 0.017))
    (:next-launcher 910)
    )
  )

(defpart 906
  :init-specs ((:texture (glow level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b 32.0 8.0)
    (:a 48.0)
    (:scalevel-x (meters 0.12857144))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.9142857)
    (:fade-b -0.9142857)
    (:timer (seconds 1.335))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.117))
    (:next-launcher 911)
    )
  )

(defpart 911
  :init-specs ((:scale-x (meters 4.5))
    (:scale-y :copy scale-x)
    (:scalevel-x (meters -0.010958904))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.38356164)
    (:fade-b 0.0)
    (:fade-a -0.13150685)
    )
  )

(defpart 904
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 96.0)
    (:scalevel-x (meters 0.16666667))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.185))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.05))
    (:next-launcher 912)
    )
  )

(defpart 912
  :init-specs ((:scale-x (meters 3.5))
    (:scale-y :copy scale-x)
    (:scalevel-x (meters -0.0875))
    (:scalevel-y :copy scalevel-x)
    (:fade-b -6.4)
    )
  )

(deftype ashelin-shot (projectile)
  ((parent    (pointer ashelin) :override)
   (tail-pos  vector             :inline)
   (hit-pos   vector             :inline)
   )
  )


(defmethod projectile-method-24 ((this ashelin-shot))
  (draw-beam (-> *part-id-table* 903) (-> this tail-pos) (-> this starting-dir) #f)
  0
  (none)
  )

(defmethod projectile-method-25 ((this ashelin-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((v1-1 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) v1-1 a1-0))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-2 a1-0))
        (let ((a0-2 s5-1))
          (let ((a2-1 0.8))
            (.mov vf7 a2-1)
            )
          (.lvf vf5 (&-> a0-2 quad))
          )
        (.lvf vf4 (&-> v1-2 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> gp-0 quad) vf6)
      (let ((f30-0 (-> *part-id-table* 900 init-specs 4 initial-valuef)))
        (set! (-> *part-id-table* 900 init-specs 4 initial-valuef) (fmin f30-0 (vector-length s5-1)))
        (draw-beam (-> *part-id-table* 900) a1-0 s5-1 #f)
        (set! (-> *part-id-table* 900 init-specs 4 initial-valuef) f30-0)
        )
      (vector-normalize! s5-1 1.0)
      (launch-particles (-> *part-id-table* 901) gp-0)
      (let ((f0-4 (vector-dot s5-1 (-> (camera-matrix) fvec))))
        (when (< 0.0 f0-4)
          (let ((f0-5 (* f0-4 f0-4))
                (f30-1 (-> *part-id-table* 902 init-specs 8 initial-valuef))
                (f28-0 (-> *part-id-table* 902 init-specs 8 random-rangef))
                )
            (set! (-> *part-id-table* 902 init-specs 8 initial-valuef) (* f30-1 f0-5))
            (set! (-> *part-id-table* 902 init-specs 8 random-rangef) (* f28-0 f0-5))
            (launch-particles (-> *part-id-table* 902) gp-0)
            (set! (-> *part-id-table* 902 init-specs 8 initial-valuef) f30-1)
            (set! (-> *part-id-table* 902 init-specs 8 random-rangef) f28-0)
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod projectile-method-26 ((this ashelin-shot))
  (cond
    ((logtest? (-> *part-group-id-table* 222 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
     (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 222))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
      (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 222))
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod play-impact-sound ((this ashelin-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "ashelin-fire")
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "ashelin-shot-hi")
       )
      ((= v1-0 (projectile-options po0 po1))
       ((method-of-type projectile play-impact-sound) this arg0)
       )
      )
    )
  (none)
  )

(defmethod made-impact? ((this ashelin-shot))
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a1-0 t1-0))
      (set! (-> a1-0 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a1-0 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a1-0 ignore-process0) this)
      (set! (-> a1-0 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a1-0 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> a1-0 action-mask) (collide-action solid))
      )
    (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -10240.0 12697.6 -4096.0 t1-0)
    )
  )

(defun ashelin-shot-move ((arg0 ashelin-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 40960.0 f0-0)
          (vector-normalize! s4-0 40960.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (let ((v1-9 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-5 (-> arg0 hit-pos))
            )
        (set! (-> a1-5 quad) (-> s5-0 trans quad))
        (vector+! a1-5 a1-5 v1-9)
        (move-to-point! (-> arg0 root) a1-5)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod setup-collision! ((this ashelin-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  (when (not (logtest? (-> (ppointer->process (-> this parent)) bot-flags) (bot-flag attacked)))
    (let* ((a0-17 (-> this root))
           (v1-27 (-> a0-17 root-prim))
           )
      (countdown (a0-18 (-> a0-17 total-prims))
        (logclear! (-> v1-27 prim-core collide-with) (collide-spec jak))
        (&+! v1-27 80)
        )
      )
    )
  (none)
  )

(defmethod init-proj-settings! ((this ashelin-shot))
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) 'eco-yellow)
  (set! (-> this max-speed) 307200.0)
  (set! (-> this move) ashelin-shot-move)
  (set! (-> this timeout) (seconds 1.335))
  (none)
  )
