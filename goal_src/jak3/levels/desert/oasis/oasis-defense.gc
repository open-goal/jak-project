;;-*-Lisp-*-
(in-package goal)

;; name: oasis-defense.gc
;; name in dgo: oasis-defense
;; dgos: DESOASIS

;; DECOMP BEGINS

(deftype oasis-point (structure)
  ((pos   vector      :inline)
   (quat  quaternion  :inline)
   )
  )


(define *oasis-marauder-start* (new 'static 'boxed-array :type oasis-point
                                 (new 'static 'oasis-point
                                   :pos (new 'static 'vector :x 2458461.0 :y 81688.164 :z 10302577.0 :w 1.0)
                                   :quat (new 'static 'quaternion :x 0.0006 :y 0.5862 :z -0.0012 :w 0.8101)
                                   )
                                 (new 'static 'oasis-point
                                   :pos (new 'static 'vector :x 2450950.2 :y 82370.97 :z 10330767.0 :w 1.0)
                                   :quat (new 'static 'quaternion :x -0.0008 :y -0.7239 :z 0.001 :w -0.6898)
                                   )
                                 (new 'static 'oasis-point
                                   :pos (new 'static 'vector :x 2458173.8 :y 82435.69 :z 10352404.0 :w 1.0)
                                   :quat (new 'static 'quaternion :x 0.001 :y 0.8624 :z -0.0008 :w 0.506)
                                   )
                                 )
        )

(define *oasis-vehicle-start* (new 'static 'boxed-array :type oasis-point
                                (new 'static 'oasis-point
                                  :pos (new 'static 'vector :x 2378927.8 :y 89453.77 :z 10338013.0 :w 1.0)
                                  :quat (new 'static 'quaternion :x -0.0047 :y 0.8075 :z -0.0137 :w 0.5896)
                                  )
                                (new 'static 'oasis-point
                                  :pos (new 'static 'vector :x 2416701.5 :y 87323.85 :z 10297737.0 :w 1.0)
                                  :quat (new 'static 'quaternion :x -0.0007 :y -0.1249 :z -0.0329 :w 0.9916)
                                  )
                                (new 'static 'oasis-point
                                  :pos (new 'static 'vector :x 2411298.5 :y 90682.984 :z 10373812.0 :w 1.0)
                                  :quat (new 'static 'quaternion :x 0.041 :y 0.9921 :z -0.0557 :w 0.104)
                                  )
                                )
        )

(define *oasis-vehicle-path* (the-as (array (array oasis-point))
                               (new 'static 'boxed-array :type array
                                 (new 'static 'boxed-array :type oasis-point
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 1643712.1 :y 135682.05 :z 10027475.0 :w 1.0)
                                     :quat (new 'static 'quaternion :x 0.0013 :y 0.52 :z 0.0005 :w 0.8541)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 1834901.5 :y 126926.03 :z 10381510.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y 0.4936 :w 0.8696)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2164965.5 :y 103604.23 :z 10309546.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y 0.7718 :w 0.6357)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2351683.5 :y 89942.836 :z 10210302.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y -0.9924 :w -0.1222)
                                     )
                                   )
                                 (new 'static 'boxed-array :type oasis-point
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2656992.8 :y 158144.11 :z 12118015.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y 0.9957 :w 0.092)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2729601.5 :y 154424.11 :z 11455859.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y -0.9626 :w 0.2709)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2346952.2 :y 104915.766 :z 10551702.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y -0.7954 :w 0.6059)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2446049.2 :y 93183.59 :z 10450630.0 :w 1.0)
                                     :quat (new 'static 'quaternion :x -0.0005 :y -0.999 :z 0.0014 :w -0.044)
                                     )
                                   )
                                 (new 'static 'boxed-array :type oasis-point
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 1486110.8 :y 118251.52 :z 11689861.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y 0.9323 :w 0.3615)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 1744946.0 :y 140856.11 :z 10625518.0 :w 1.0)
                                     :quat (new 'static 'quaternion :x 0.0001 :y -0.7207 :z 0.0015 :w -0.6932)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2165376.5 :y 96137.625 :z 10535523.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y -0.9339 :w -0.3572)
                                     )
                                   (new 'static 'oasis-point
                                     :pos (new 'static 'vector :x 2379151.2 :y 85637.12 :z 10319897.0 :w 1.0)
                                     :quat (new 'static 'quaternion :y -0.9317 :w -0.3631)
                                     )
                                   )
                                 )
                               )
        )

(define *oasis-vehicle-fx-path* (the-as (array (array oasis-point))
                                  (new 'static 'boxed-array :type array
                                    (new 'static 'boxed-array :type oasis-point
                                      (new 'static 'oasis-point
                                        :pos (new 'static 'vector :x 1905749.2 :y 139053.06 :z 11196600.0 :w 1.0)
                                        :quat (new 'static 'quaternion :y -0.876 :w -0.4823)
                                        )
                                      (new 'static 'oasis-point
                                        :pos (new 'static 'vector :x 2656209.8 :y 67824.44 :z 10573690.0 :w 1.0)
                                        :quat (new 'static 'quaternion :y -0.876 :w -0.4823)
                                        )
                                      )
                                    (new 'static 'boxed-array :type oasis-point
                                      (new 'static 'oasis-point
                                        :pos (new 'static 'vector :x 2206190.0 :y 154991.83 :z 11345007.0 :w 1.0)
                                        :quat (new 'static 'quaternion :y -0.9882 :w -0.153)
                                        )
                                      (new 'static 'oasis-point
                                        :pos (new 'static 'vector :x 2565465.0 :y 111149.055 :z 10101822.0 :w 1.0)
                                        :quat (new 'static 'quaternion :y -0.9882 :w -0.153)
                                        )
                                      )
                                    )
                                  )
        )

(define *oasis-marauder-spawn-point* (new 'static 'boxed-array :type oasis-point
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2397388.5 :y 91552.56 :z 10411445.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.8685 :w 0.4955)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2498060.2 :y 95181.62 :z 10163618.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y -0.0501 :w 0.9987)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2601913.5 :y 70653.95 :z 10246909.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.2036 :w -0.979)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2304180.2 :y 88062.36 :z 10259569.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y -0.3212 :w -0.9469)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2293810.0 :y 89958.4 :z 10373563.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y -0.7906 :w -0.6123)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2557681.8 :y 86204.01 :z 10528274.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.9788 :w -0.2044)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2483336.8 :y 95299.99 :z 10500398.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.9819 :w -0.189)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2579720.2 :y 69928.55 :z 10425897.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.8771 :w -0.4801)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2405315.0 :y 90315.164 :z 10202601.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y -0.2878 :w -0.9576)
                                         )
                                       (new 'static 'oasis-point
                                         :pos (new 'static 'vector :x 2543300.5 :y 79528.76 :z 10235757.0 :w 1.0)
                                         :quat (new 'static 'quaternion :y 0.493 :w -0.87)
                                         )
                                       )
        )

(deftype oasis-vehicle (structure)
  ((handle             handle)
   (path-type          int8)
   (path-pos           int8)
   (spawned-marauder?  symbol)
   )
  :pack-me
  )


(deftype oasis-marauder (structure)
  ((handle        handle)
   (initialized?  symbol)
   )
  :pack-me
  )


(deftype task-manager-desert-oasis-defense (task-manager)
  ((nav-mesh           nav-mesh)
   (vehicle            oasis-vehicle   3 :inline)
   (vehicle-count      uint8)
   (v-free-list        (array uint8))
   (marauder           oasis-marauder  7 :inline)
   (m-free-list        (array uint8))
   (marauder-count     uint8)
   (total-spawned      uint8)
   (total-veh-spawned  uint8)
   (check-timer        time-frame)
   (trans-timer        time-frame)
   (veh-fx             handle          2)
   (veh-fx-timer       time-frame)
   (ash-entity         entity-actor)
   (marauder-entity    entity-actor)
   (last-kill-time     time-frame)
   )
  (:methods
    (spawn-v-marauder (_type_ int int) handle)
    (spawn-marauder (_type_ oasis-point symbol) handle)
    (task-manager-desert-oasis-defense-method-34 (_type_) none)
    (task-manager-desert-oasis-defense-method-35 (_type_) none)
    )
  )


(defstate active (task-manager-desert-oasis-defense)
  :virtual #t
  :code (behavior ()
    (local-vars (f30-1 float))
    (when (not (task-node-closed? (game-task-node desert-oasis-defense-meeting)))
      (was-squad-manager-start self)
      (let ((v1-1 *was-squad-control*))
        (set! (-> v1-1 target-count) 3)
        (set! (-> v1-1 reserve-count) 40)
        )
      (loop
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (set! (-> gp-0 quad) (-> self ash-entity extra trans quad))
          (let ((f30-0 (vector-vector-distance gp-0 (target-pos 0))))
            (when (and *was-squad-manager* (< f30-0 3276800.0))
              (set! (-> *was-squad-control* target-count) 0)
              0
              )
            (if (and (< f30-0 819200.0) (-> *setting-control* user-current turbo))
                (set-setting! 'turbo #f 0.0 0)
                )
            (when (< f30-0 327680.0)
              (was-squad-manager-kill)
              (set-setting! 'stop-vehicle? #t 0.0 0)
              (send-event *target* 'change-mode 'normal)
              (set-setting! 'pilot #f 0.0 0)
              #t
              (goto cfg-23)
              )
            )
          )
        (suspend)
        0
        )
      )
    (label cfg-23)
    (when (and *target* (focus-test? *target* pilot-riding) (handle->process (-> *target* pilot vehicle)))
      (-> self player-vehicle)
      (let ((v1-49 (-> *target* pilot vehicle)))
        (send-event (handle->process v1-49) 'ignore-damage #t)
        )
      )
    (while (not (task-node-closed? (game-task-node desert-oasis-defense-meeting)))
      (suspend)
      )
    (when (not (task-node-closed? (game-task-node desert-oasis-defense-battle)))
      (set-setting! 'string-max-length 'abs (meters 18.5) 0)
      (set-setting! 'string-max-height 'abs (meters 6) 0)
      (set-setting! 'music 'oasisfi 0.0 0)
      (set-setting! 'fog-special-interp-rate #f 0.025 0)
      (set-setting! 'fog-special-interp-targ #f 0.9 0)
      (dotimes (gp-1 (length *oasis-vehicle-start*))
        (spawn-v-marauder self -1 gp-1)
        )
      (dotimes (gp-2 (length *oasis-marauder-start*))
        (spawn-marauder self (-> *oasis-marauder-start* gp-2) #f)
        )
      (set-time! (-> self check-timer))
      (set-time! (-> self veh-fx-timer))
      (set! (-> self hud-counter)
            (ppointer->handle (process-spawn hud-marauder :init hud-init-by-other :name "hud-marauder" :to self))
            )
      (set! (-> *game-info* counter) (the float (- (+ (-> self marauder-count) 57) (-> self total-spawned))))
      (until (and (>= (-> self total-spawned) (the-as uint 57))
                  (zero? (-> self marauder-count))
                  (zero? (-> self vehicle-count))
                  )
        (when (>= (+ (current-time) (seconds -20)) (-> self veh-fx-timer))
          (dotimes (gp-4 2)
            (when (= (-> self veh-fx gp-4) #f)
              (when (rand-vu-percent? 0.7)
                (let ((s5-1 (-> *oasis-vehicle-fx-path* gp-4 0))
                      (s4-0 (new 'stack-no-clear 'mystery-traffic-object-spawn-params0))
                      )
                  (vector-z-quaternion! (-> s4-0 vec) (-> s5-1 quat))
                  (vector-float*! (-> s4-0 vec) (-> s4-0 vec) 204800.0)
                  (set! (-> s4-0 params object-type) (traffic-type guard-a))
                  (set! (-> s4-0 params behavior) (the-as uint 3))
                  (set! (-> s4-0 params id) (the-as uint 0))
                  (set! (-> s4-0 params nav-mesh) (-> self nav-mesh))
                  (set! (-> s4-0 params nav-branch) #f)
                  (set! (-> s4-0 params proc) #f)
                  (set! (-> s4-0 params handle) (the-as handle #f))
                  (set! (-> s4-0 params user-data) (the-as uint 0))
                  (set! (-> s4-0 params flags) (traffic-spawn-flags))
                  (set! (-> s4-0 params guard-type) (the-as uint 11))
                  (set! (-> s4-0 params entity) #f)
                  (set! (-> s4-0 params velocity quad) (-> s4-0 vec quad))
                  (set! (-> s4-0 params position quad) (-> s5-1 pos quad))
                  (quaternion-copy! (-> s4-0 params rotation) (-> s5-1 quat))
                  (let ((s5-2 (vehicle-spawn (vehicle-type v-marauder) (-> s4-0 params))))
                    (when s5-2
                      (iterate-prims
                        (the-as collide-shape-moving (-> s5-2 root))
                        (lambda ((arg0 collide-shape-prim)) (logior! (-> arg0 prim-core collide-as) (collide-spec enemy)) (none))
                        )
                      (logior! (-> s5-2 mask) (process-mask enemy))
                      (set! (-> self veh-fx gp-4) (process->handle s5-2))
                      (suspend)
                      (send-event
                        (handle->process (-> self veh-fx gp-4))
                        'ai-set-target-position
                        (-> *oasis-vehicle-fx-path* gp-4 1 pos)
                        )
                      (send-event (handle->process (-> self veh-fx gp-4)) 'ai-set-target-speed 327680.0)
                      )
                    )
                  )
                )
              )
            )
          (set-time! (-> self veh-fx-timer))
          )
        (when (>= (+ (current-time) (seconds -2.5)) (-> self check-timer))
          (when (and (< (-> self vehicle-count) (the-as uint 3)) (< (-> self total-spawned) (the-as uint 57)))
            (let ((gp-5 0))
              (dotimes (v1-156 3)
                (let ((a0-71 (-> self vehicle v1-156)))
                  (if (!= (-> a0-71 handle) #f)
                      (set! gp-5 (logior gp-5 (ash 1 (-> a0-71 path-type))))
                      )
                  )
                )
              (spawn-v-marauder self (rand-vu-int-count-excluding (length *oasis-vehicle-path*) gp-5) -1)
              )
            )
          (let ((gp-6 (-> (camera-matrix) fvec))
                (s5-4 (new 'stack-no-clear 'vector))
                )
            (dotimes (s4-2 (length *oasis-marauder-spawn-point*))
              (when (and (< (-> self marauder-count) (the-as uint 7)) (< (-> self total-spawned) (the-as uint 57)))
                (let ((s3-1 (-> *oasis-marauder-spawn-point* s4-2)))
                  (vector-! s5-4 (-> s3-1 pos) (camera-pos))
                  (if (< (vector-dot gp-6 s5-4) 0.0)
                      (spawn-marauder self s3-1 #f)
                      )
                  )
                )
              )
            )
          (set-time! (-> self check-timer))
          )
        (let ((v1-182 (- (+ (-> self marauder-count) 57) (-> self total-spawned))))
          (cond
            ((zero? v1-182)
             (when (-> self hud-counter)
               (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
               (set! (-> self hud-counter) (the-as handle #f))
               )
             )
            (else
              (set! (-> *game-info* counter) (the float v1-182))
              )
            )
          )
        (suspend)
        )
      (dotimes (gp-7 2)
        (let ((a0-92 (handle->process (-> self veh-fx gp-7))))
          (when a0-92
            (deactivate a0-92)
            (set! (-> self veh-fx gp-7) (the-as handle #f))
            )
          )
        )
      (set-setting! 'fog-special-interp-rate #f 0.2 0)
      (set-setting! 'fog-special-interp-targ #f 0.2 0)
      (when (handle->process (-> *game-info* dust-storm))
        1.0
        (let ((gp-8 (-> *game-info* dust-storm)))
          (until (< f30-1 0.4)
            (let ((a1-37 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-37 from) (process->ppointer self))
              (set! (-> a1-37 num-params) 0)
              (set! (-> a1-37 message) 'get-intensity)
              (let ((t9-42 send-event-function)
                    (a0-102 (handle->process gp-8))
                    )
                (set! f30-1 (the-as float (t9-42 a0-102 a1-37)))
                )
              )
            (suspend)
            )
          )
        )
      (send-event self 'complete)
      )
    (sleep-code)
    )
  :post (behavior ()
    (task-manager-desert-oasis-defense-method-35 self)
    0
    )
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

;; WARN: Return type mismatch time-frame vs none.
(defmethod task-manager-method-26 ((this task-manager-desert-oasis-defense))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (when (time-elapsed? (-> this trans-timer) (seconds 0.1))
    (dotimes (s5-0 3)
      (let ((s4-0 (-> this vehicle s5-0))
            (v1-8 (-> this vehicle s5-0 handle))
            )
        (when (!= v1-8 #f)
          (let ((s3-0 (handle->process v1-8)))
            (cond
              (s3-0
                (when (>= (-> s4-0 path-type) 0)
                  (let* ((s2-0 (-> *oasis-vehicle-path* (-> s4-0 path-type) (-> s4-0 path-pos)))
                         (s1-0 (= (+ (length (-> *oasis-vehicle-path* (-> s4-0 path-type))) -1) (-> s4-0 path-pos)))
                         (f30-0 (vector-vector-distance-squared (-> s2-0 pos) (-> (the-as process-drawable s3-0) root trans)))
                         )
                    (when (and (not s1-0) (let ((f0-0 81920.0))
                                            (< f30-0 (* f0-0 f0-0))
                                            )
                               )
                      (+! (-> s4-0 path-pos) 1)
                      (send-event s3-0 'ai-set-target-position (-> *oasis-vehicle-path* (-> s4-0 path-type) (-> s4-0 path-pos) pos))
                      (send-event s3-0 'ai-set-target-speed 163840.0)
                      (send-event s3-0 'ai-set-target-process *target*)
                      )
                    (if (and s1-0 (let ((f0-3 122880.0))
                                    (< f30-0 (* f0-3 f0-3))
                                    )
                             )
                        (send-event s3-0 'ai-set-target-speed 122880.0)
                        )
                    (when (-> s4-0 spawned-marauder?)
                      (send-event s3-0 'ai-set-target-speed 81920.0)
                      (send-event s3-0 'ai-set-target-position (-> *oasis-vehicle-path* (-> s4-0 path-type) (-> s4-0 path-pos) pos))
                      )
                    (when (and s1-0 (not (-> s4-0 spawned-marauder?)) (let ((f0-6 40960.0))
                                                                        (and (< f30-0 (* f0-6 f0-6))
                                                                             (< (-> this marauder-count) (the-as uint 7))
                                                                             (< (-> this total-spawned) (the-as uint 57))
                                                                             )
                                                                        )
                               )
                      (let ((a1-10 (handle->process (spawn-marauder this s2-0 #t))))
                        (when a1-10
                          (let ((v1-83 (new 'stack-no-clear 'wvehicle-ai-drop-off-params)))
                            (set! (-> v1-83 proc) a1-10)
                            (set! (-> v1-83 dest quad) (-> s2-0 pos quad))
                            (send-event s3-0 'ai-drop-off v1-83)
                            )
                          (set! (-> s4-0 spawned-marauder?) #t)
                          )
                        )
                      )
                    )
                  )
                )
              (else
                (set! (-> this vehicle s5-0 handle) (the-as handle #f))
                (+! (-> this vehicle-count) -1)
                (let ((s4-1 (-> this v-free-list)))
                  (set! (-> s4-1 (length s4-1)) (the-as uint s5-0))
                  (+! (-> s4-1 length) 1)
                  )
                )
              )
            )
          )
        )
      )
    (dotimes (s5-1 2)
      (let ((s4-2 (handle->process (-> this veh-fx s5-1))))
        (cond
          (s4-2
            (let ((f30-1 (vector-vector-distance-squared
                           (-> *oasis-vehicle-fx-path* s5-1 1 pos)
                           (-> (the-as process-drawable s4-2) root trans)
                           )
                         )
                  )
              (let ((f0-9 102400.0))
                (when (< f30-1 (* f0-9 f0-9))
                  (let* ((s2-1 (-> (the-as process-drawable s4-2) root quat))
                         (s3-2 (vector-normalize! (vector-x-quaternion! (new 'stack-no-clear 'vector) s2-1) 40960.0))
                         (v1-109 (vector-normalize! (vector-y-quaternion! (new 'stack-no-clear 'vector) s2-1) 102400.0))
                         )
                    (vector+! s3-2 (-> (the-as process-drawable s4-2) root trans) s3-2)
                    (send-event s4-2 'apply-impulse s3-2 v1-109)
                    )
                  )
                )
              (let ((f0-12 40960.0))
                (when (< f30-1 (* f0-12 f0-12))
                  (send-event
                    s4-2
                    'attack
                    #f
                    (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                        (damage 2000.0)
                                                                        (vehicle-damage-factor 1.0)
                                                                        (vehicle-impulse-factor 0.0)
                                                                        (attacker-velocity (new 'static 'vector :w 1.0))
                                                                        )
                                        )
                    )
                  (set! (-> this veh-fx s5-1) (the-as handle #f))
                  )
                )
              )
            )
          (else
            (set! (-> this veh-fx s5-1) (the-as handle #f))
            )
          )
        )
      )
    (dotimes (s5-2 7)
      (let* ((s3-3 (-> this marauder s5-2))
             (v1-129 (-> s3-3 handle))
             )
        (when (!= v1-129 #f)
          (let* ((s2-2 (handle->process v1-129))
                 (s4-3 (if (type? s2-2 process-focusable)
                           s2-2
                           )
                       )
                 )
            (cond
              (s4-3
                (cond
                  ((not (-> s3-3 initialized?))
                   (send-event s4-3 'go-hostile)
                   (send-event s4-3 'target-pos (target-pos 0))
                   (set! (-> s3-3 initialized?) #t)
                   )
                  ((and (-> s3-3 initialized?)
                        (and (-> s4-3 next-state) (= (-> s4-3 next-state name) 'dormant))
                        (>= (+ (current-time) (seconds -10)) (-> this last-kill-time))
                        )
                   (deactivate s4-3)
                   )
                  )
                )
              (else
                (set! (-> this marauder s5-2 handle) (the-as handle #f))
                (+! (-> this marauder-count) -1)
                (let ((s4-4 (-> this m-free-list)))
                  (set! (-> s4-4 (length s4-4)) (the-as uint s5-2))
                  (+! (-> s4-4 length) 1)
                  )
                (set-time! (-> this last-kill-time))
                )
              )
            )
          )
        )
      )
    (set-time! (-> this trans-timer))
    )
  (none)
  )

(defmethod task-manager-desert-oasis-defense-method-35 ((this task-manager-desert-oasis-defense))
  0
  (none)
  )

(defmethod spawn-marauder ((this task-manager-desert-oasis-defense) (arg0 oasis-point) (arg1 symbol))
  (let ((s5-0 (-> this m-free-list)))
    (when (nonzero? (length s5-0))
      (let ((s3-0 (-> this marauder (-> s5-0 (+ (length s5-0) -1))))
            (s2-0 49)
            (f30-0 30.0)
            )
        (let ((v1-13 (-> *game-info* sub-task-list (game-task-node desert-oasis-defense-battle))))
          (when (and v1-13 (>= (-> v1-13 death-count) 0))
            (when (and *target* (and (>= 5.0 (-> *target* fact health)) (rand-vu-percent? 0.6)))
              (set! s2-0 20)
              (set! f30-0 2.0)
              )
            )
          )
        (let ((s0-0 (new 'stack-no-clear 'marauder-init-by-other-params)))
          (set! (-> s0-0 trans quad) (-> arg0 pos quad))
          (quaternion-copy! (-> s0-0 quat) (-> arg0 quat))
          (set! (-> s0-0 entity) (-> this marauder-entity))
          (set! (-> s0-0 directed?) #f)
          (set! (-> s0-0 no-initial-move-to-ground?) #t)
          (set! (-> s0-0 multi-focus) #t)
          (set! (-> s0-0 skip-jump) #f)
          (let* ((s1-2 (ppointer->process (process-spawn marauder this s0-0 :name "marauder" :to this)))
                 (s0-1 (if (type? s1-2 process-focusable)
                           s1-2
                           )
                       )
                 (s1-3 (if (type? s0-1 marauder)
                           (the-as marauder s0-1)
                           )
                       )
                 )
            (when s1-3
              (change-to (-> this nav-mesh) s1-3)
              (let ((v1-38 (-> s1-3 nav state)))
                (set! (-> v1-38 current-poly) (the-as nav-poly #f))
                )
              0
              (reset-to-collide-spec (-> s1-3 focus) (collide-spec jak bot hit-by-others-list player-list jak-vehicle))
              (logior! (-> s1-3 fact options) (actor-option dont-override-fact))
              (set! (-> s1-3 fact pickup-type) (the-as pickup-type s2-0))
              (set! (-> s1-3 fact pickup-amount) f30-0)
              (set! (-> s1-3 fact pickup-spawn-amount) f30-0)
              (set! (-> s3-0 handle) (process->handle s1-3))
              (set! (-> s3-0 initialized?) arg1)
              (+! (-> this marauder-count) 1)
              (+! (-> s5-0 length) -1)
              (+! (-> this total-spawned) 1)
              (add-icon! *minimap* s1-3 (the-as uint 117) (the-as int #f) (the-as vector #t) 0)
              (return (-> s3-0 handle))
              )
            )
          )
        )
      )
    )
  (the-as handle #f)
  )

(defmethod spawn-v-marauder ((this task-manager-desert-oasis-defense) (arg0 int) (arg1 int))
  (local-vars (sv-240 mystery-traffic-object-spawn-params0))
  (let ((s5-0 (-> this v-free-list))
        (s4-0 (>= arg1 0))
        )
    (when (nonzero? (length s5-0))
      (let ((s3-0 (-> this vehicle (-> s5-0 (+ (length s5-0) -1)))))
        (let ((s0-0 (if s4-0
                        (-> *oasis-vehicle-start* arg1)
                        (-> *oasis-vehicle-path* arg0 0)
                        )
                    )
              )
          (set! sv-240 (new 'stack-no-clear 'mystery-traffic-object-spawn-params0))
          (vector-z-quaternion! (-> sv-240 vec) (-> s0-0 quat))
          (vector-float*! (-> sv-240 vec) (-> sv-240 vec) (if s4-0
                                                              0.0
                                                              204800.0
                                                              )
                          )
          (set! (-> sv-240 params object-type) (traffic-type guard-a))
          (set! (-> sv-240 params behavior) (the-as uint 3))
          (set! (-> sv-240 params id) (the-as uint 0))
          (set! (-> sv-240 params nav-mesh) (-> this nav-mesh))
          (set! (-> sv-240 params nav-branch) #f)
          (set! (-> sv-240 params proc) #f)
          (set! (-> sv-240 params handle) (the-as handle #f))
          (set! (-> sv-240 params user-data) (the-as uint 0))
          (set! (-> sv-240 params flags) (traffic-spawn-flags))
          (set! (-> sv-240 params guard-type) (the-as uint 11))
          (set! (-> sv-240 params entity) #f)
          (set! (-> sv-240 params velocity quad) (-> sv-240 vec quad))
          (set! (-> sv-240 params position quad) (-> s0-0 pos quad))
          (quaternion-copy! (-> sv-240 params rotation) (-> s0-0 quat))
          )
        (let ((s0-1 (vehicle-spawn (vehicle-type v-marauder) (-> sv-240 params))))
          (when s0-1
            (iterate-prims
              (the-as collide-shape-moving (-> s0-1 root))
              (lambda ((arg0 collide-shape-prim)) (logior! (-> arg0 prim-core collide-as) (collide-spec enemy)) (none))
              )
            (logior! (-> s0-1 mask) (process-mask enemy))
            (send-event s0-1 'ai-set-attack-delay-factor 4.0)
            (send-event s0-1 'ai-set-inaccuracy-factor 2.0)
            (set! arg0 (cond
                         (s4-0
                           arg1
                           )
                         (else
                           (empty)
                           arg0
                           )
                         )
                  )
            (set! (-> s3-0 path-type) arg0)
            (set! (-> s3-0 path-pos) (if s4-0
                                         (+ (length (-> *oasis-vehicle-path* arg1)) -1)
                                         0
                                         )
                  )
            (set! (-> s3-0 handle) (process->handle s0-1))
            (set! (-> s3-0 spawned-marauder?) (if s4-0
                                                  #t
                                                  #f
                                                  )
                  )
            (+! (-> this vehicle-count) 1)
            (+! (-> s5-0 length) -1)
            (+! (-> this total-veh-spawned) 1)
            (return (-> s3-0 handle))
            )
          )
        )
      )
    )
  (the-as handle #f)
  )

;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-25 ((this task-manager-desert-oasis-defense))
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this player-vehicle)) 'ignore-damage #f)
  (none)
  )

(defmethod set-time-limit ((this task-manager-desert-oasis-defense))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this nav-mesh) (get-nav-mesh (the-as actor-id #xb5d9)))
  (set! (-> this v-free-list) (new 'static 'boxed-array :type uint8 :length 0 :allocated-length 3))
  (dotimes (v1-2 3)
    (set! (-> this vehicle v1-2 handle) (the-as handle #f))
    (set! (-> this vehicle v1-2 spawned-marauder?) #f)
    (set! (-> this v-free-list v1-2) (the-as uint v1-2))
    )
  (set! (-> this v-free-list length) 3)
  (set! (-> this m-free-list) (new 'static 'boxed-array :type uint8 :length 0 :allocated-length 7))
  (dotimes (v1-7 7)
    (set! (-> this marauder v1-7 handle) (the-as handle #f))
    (set! (-> this marauder v1-7 initialized?) #f)
    (set! (-> this m-free-list v1-7) (the-as uint v1-7))
    )
  (set! (-> this m-free-list length) 7)
  (set! (-> this ash-entity) (the-as entity-actor (entity-by-name "ashelin-npc-3")))
  (set! (-> this marauder-entity) (the-as entity-actor (entity-by-name "marauder-2")))
  (dotimes (v1-11 2)
    (set! (-> this veh-fx v1-11) (the-as handle #f))
    )
  (if (= (-> *game-info* current-vehicle) (vehicle-type-u8 vt27))
      (set! (-> *game-info* current-vehicle) (vehicle-type-u8 v-snake))
      )
  (none)
  )

(deftype desoasis-hellcat (process-drawable)
  ()
  (:state-methods
    idle
    )
  )


(defskelgroup skel-desoasis-hellcat hellcat hellcat-lod0-jg hellcat-idle-ja
              ((hellcat-lod0-mg (meters 20)) (hellcat-lod1-mg (meters 40)) (hellcat-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6.8)
              :shadow hellcat-shadow-mg
              :origin-joint-index 3
              )

(defstate idle (desoasis-hellcat)
  :virtual #t
  :code sleep-code
  )

(defmethod init-from-entity! ((this desoasis-hellcat) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-2 prim-core action) (collide-action solid))
      (set! (-> v1-2 transform-index) 3)
      (set-vector! (-> v1-2 local-sphere) 0.0 0.0 0.0 34816.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-2)
      )
    (set! (-> s4-0 nav-radius) 34816.0)
    (let ((v1-4 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-4 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-4 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (add-process-drawable-to-nav-mesh (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 0) this #f)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-desoasis-hellcat" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )
