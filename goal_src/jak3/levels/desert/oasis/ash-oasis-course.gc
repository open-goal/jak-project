;;-*-Lisp-*-
(in-package goal)

;; name: ash-oasis-course.gc
;; name in dgo: ash-oasis-course
;; dgos: DESOASIS

;; DECOMP BEGINS

(deftype ashelin-oasis (ashelin)
  ((player-in-bounds-time  time-frame)
   (last-speech-time       time-frame)
   (last-speech-id         int32)
   (last-sound-trans       vector  :inline)
   (last-sound-id          sound-id)
   (minimap                connection-minimap)
   )
  (:methods
    (set-frontline (_type_) none)
    (ashelin-oasis-method-263 (_type_ symbol) none)
    )
  )


(defmethod go-idle2 ((this ashelin-oasis))
  (go-idle this)
  )

(defmethod set-frontline ((this ashelin-oasis))
  (let ((a0-1 *target*))
    (when a0-1
      (set! (-> this frontline w)
            (- (+ 40960.0 (vector-dot (the-as vector (-> this frontline)) (get-trans a0-1 0))))
            )
      0
      )
    )
  (none)
  )

(defstate traveling (ashelin-oasis)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type ashelin traveling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (nav-enemy-method-177 self)
    )
  )

(defstate knocked (ashelin-oasis)
  :virtual #t
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type ashelin knocked) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (logclear! (-> self root penetrated-by) (penetrate vehicle))
    )
  )

(defmethod ashelin-method-256 ((this ashelin-oasis))
  (if (time-elapsed? (-> this last-speech-time) (seconds 10))
      ((method-of-type ashelin ashelin-method-256) this)
      )
  (none)
  )

;; WARN: Return type mismatch time-frame vs gui-connection.
(defmethod play-speech-by-id ((this ashelin-oasis) (arg0 int))
  (let* ((s4-0 (-> this course))
         (s3-0 (-> s4-0 speeches arg0))
         )
    (logior! (-> s3-0 flags) (bot-speech-info-flag playing))
    (let* ((t2-0 (-> s3-0 hold-time))
           (s5-0 (add-process
                   *gui-control*
                   this
                   (-> this channel)
                   (gui-action play)
                   (-> s3-0 name)
                   -99.0
                   (the-as time-frame t2-0)
                   )
                 )
           )
      (let ((v1-5 (-> s4-0 speech-tunings (-> s3-0 tuning-id))))
        (sound-params-set!
          *gui-control*
          s5-0
          (-> v1-5 trans?)
          (-> v1-5 fo-min)
          (-> v1-5 fo-max)
          (-> v1-5 fo-curve)
          -1.0
          )
        )
      (set! (-> this last-sound-id) s5-0)
      )
    )
  (ashelin-oasis-method-263 this #t)
  (let ((v0-3 (current-time)))
    (set! (-> this last-speech-time) v0-3)
    (the-as gui-connection v0-3)
    )
  )

(defmethod ashelin-oasis-method-263 ((this ashelin-oasis) (arg0 symbol))
  (with-pp
    (when (channel-active? this (gui-channel none))
      (let* ((s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (math-camera-pos)))
             (f30-0 (vector-length s4-1))
             (v1-7 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> (math-camera-matrix) fvec) f30-0))
             (s3-2 (new 'stack-no-clear 'vector))
             )
        (if (< f30-0 122880.0)
            (set! (-> s3-2 quad) (-> v1-7 quad))
            (set! (-> s3-2 quad) (-> s4-1 quad))
            )
        (vector+! s3-2 s3-2 (math-camera-pos))
        (if arg0
            (set! (-> this last-sound-trans quad) (-> s3-2 quad))
            (vector-seek-3d-smooth! (-> this last-sound-trans) s3-2 (* 102400.0 (seconds-per-frame)) 1.0)
            )
        )
      (when *sound-player-enable*
        (let ((s5-1 (the-as sound-rpc-set-param (get-sound-buffer-entry))))
          (set! (-> s5-1 command) (sound-command set-param))
          (set! (-> s5-1 id) (-> this last-sound-id))
          (let ((a1-4 (-> this last-sound-trans)))
            (let ((gp-1 pp))
              (when (= a1-4 #t)
                (if (and gp-1 (type? gp-1 process-drawable) (nonzero? (-> (the-as process-drawable gp-1) root)))
                    (set! a1-4 (-> (the-as process-drawable gp-1) root trans))
                    (set! a1-4 (the-as vector #f))
                    )
                )
              )
            (sound-trans-convert (-> s5-1 params trans) a1-4)
            )
          (set! (-> s5-1 params mask) (the-as uint 32))
          (-> s5-1 id)
          )
        )
      0
      )
    0
    (none)
    )
  )

(defmethod enemy-common-post ((this ashelin-oasis))
  (let ((t9-0 (method-of-type ashelin enemy-common-post)))
    (t9-0 this)
    )
  (ashelin-oasis-method-263 this #f)
  (none)
  )

(defmethod get-inv-mass ((this ashelin-oasis))
  0.033333335
  )

(defmethod event-handler ((this ashelin-oasis) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('impact-impulse)
     (let ((v1-1 (the-as object (-> arg3 param 0))))
       (when (< 4096.0 (-> (the-as rigid-body-impact v1-1) impulse))
         (logior! (-> this root penetrated-by) (penetrate vehicle))
         (go (method-of-object this knocked))
         ((method-of-type ashelin event-handler) this arg0 arg1 arg2 arg3)
         )
       )
     )
    (else
      ((method-of-type ashelin event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

(define *ash-oasis-course*
  (new 'static 'ashelin-course
    :speech-count #x2b
    :spot-count #x6
    :attack-player-speeches (new 'static 'bot-speech-list-shuffle
      :flags (bot-speech-list-flag bsl1 bsl2 bsl3)
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 5 1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
      )
    :default-check-too-far #f
    :waypoints (new 'static 'boxed-array :type bot-waypoint
      (new 'static 'bot-waypoint
        :waypoint-id 1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-oasis))
          (bot-method-223 arg0)
          (move-to-point! (-> arg0 root) (the-as vector (-> arg0 course spots 0)))
          (let ((v1-6 25))
            (set! (-> arg0 hit-points) (the float v1-6))
            (set! (-> arg0 enemy-info default-hit-points) (the float v1-6))
            )
          (set! (-> arg0 waypoint-time0) 0)
          (go-to-waypoint! arg0 3 #f)
          (ai-task-control-method-10 (-> arg0 ai-ctrl) arg0)
          #t
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 2
        :nav-mesh-index -1
        :skip-to -1
        :on-set #f
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 3
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-oasis))
          (send-event arg0 'hide #f)
          (set! (-> arg0 minimap) (add-icon! *minimap* arg0 (the-as uint 146) (the-as int #f) (the-as vector #t) 0))
          (set-time! (-> arg0 last-speech-time))
          (ashelin-method-261 arg0 #t)
          (set! (-> arg0 notice-enemy-dist) 245760.0)
          (logior! (-> arg0 bot-flags) (bot-flag bf06))
          (logior! (-> arg0 bot-flags) (bot-flag bf20))
          (let ((s5-0 (-> arg0 course spots)))
            (vector-! (the-as vector (-> arg0 frontline)) (the-as vector (-> s5-0 2)) (the-as vector (-> s5-0 1)))
            (vector-normalize! (-> arg0 frontline) 1.0)
            (set! (-> arg0 frontline w) (- (vector-dot (the-as vector (-> arg0 frontline)) (the-as vector (-> s5-0 1)))))
            )
          (set-frontline arg0)
          (let ((v1-23 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-23 bytes 5) 2)
            (set! (-> v1-23 bytes 6) 3)
            (set! (-> v1-23 bytes 7) 4)
            (let ((v0-6
                    (lambda ((arg0 asht-wait-spot) (arg1 ashelin-oasis))
                      (when (and (not (channel-active? arg1 (gui-channel none))) (time-elapsed? (-> arg1 last-speech-time) (seconds 5)))
                        (cond
                          ((and (not (course-speech-playing? arg1 35)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 1)))
                           (play-speech-by-id arg1 35)
                           )
                          ((and (not (course-speech-playing? arg1 39)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 30)))
                           (play-speech-by-id arg1 39)
                           )
                          ((and (not (course-speech-playing? arg1 37)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 60)))
                           (play-speech-by-id arg1 37)
                           )
                          ((and (not (course-speech-playing? arg1 38)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 90)))
                           (play-speech-by-id arg1 38)
                           )
                          ((and (not (course-speech-playing? arg1 36)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 120)))
                           (play-speech-by-id arg1 36)
                           )
                          ((and (not (course-speech-playing? arg1 42)) (time-elapsed? (-> arg1 waypoint-time0) (seconds 150)))
                           (play-speech-by-id arg1 42)
                           )
                          )
                        )
                      )
                    )
                  )
              (set! (-> (the-as asht-wait-spot v1-23) check-done) (the-as (function asht-wait-spot ashelin symbol) v0-6))
              v0-6
              )
            )
          )
        :on-update (lambda ((arg0 ashelin-oasis))
          (local-vars (v0-5 bot-flag))
          (set-frontline arg0)
          (let* ((a1-0 (target-pos 0))
                 (f0-0 (vector-vector-xz-distance-squared (-> arg0 root trans) a1-0))
                 (f1-0 409600.0)
                 (s5-0 (< f0-0 (* f1-0 f1-0)))
                 )
            (if s5-0
                (set-time! (-> arg0 player-in-bounds-time))
                )
            (when (time-elapsed? (-> arg0 player-in-bounds-time) (seconds 6))
              (send-event arg0 'instant-death)
              (play-speech-by-id arg0 41)
              )
            (cond
              ((not s5-0)
               (set! v0-5 (logior (-> arg0 bot-flags) (bot-flag bf10)))
               (set! (-> arg0 bot-flags) v0-5)
               )
              (else
                (set! v0-5 (logclear (-> arg0 bot-flags) (bot-flag bf10)))
                (set! (-> arg0 bot-flags) v0-5)
                )
              )
            )
          v0-5
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 4
        :nav-mesh-index -1
        :skip-to -1
        :on-set #f
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 5
        :nav-mesh-index -1
        :skip-to -1
        :on-set #f
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      )
    :speeches (new 'static 'inline-array bot-speech-info 43
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha008")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha002")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf10)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha003"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf06)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha004"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf06)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha005"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha006")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha018"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha019")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha020"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha021"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha022"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha023"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha024"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha025"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha026")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha027"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha028")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha029"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf10)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha030"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf09)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha031"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha035")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha036")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha039")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha041")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha052")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha054")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha014")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha015")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha016")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha017")
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf11)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha038"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf11)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha044"
        )
      (new 'static 'bot-speech-info
        :flags (bot-speech-info-flag sf11)
        :hold-time (seconds 0.3)
        :slave-id -1
        :name "asha049"
        )
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha032")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha034")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha037")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "asha042")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash104")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash111")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash113")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash114")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash117")
      (new 'static 'bot-speech-info :hold-time (seconds 0.3) :slave-id -1 :name "ash118")
      )
    :speech-tunings (new 'static 'inline-array bot-speech-tuning 1
      (new 'static 'bot-speech-tuning :fo-min 15 :fo-max #x12c :fo-curve 9 :trans? #f)
      )
    :spots (new 'static 'inline-array bot-spot 6
      (new 'static 'bot-spot :center (new 'static 'vector :x 2540830.8 :y 72540.16 :z 10318971.0 :w 16384.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 2381537.2 :y 85770.24 :z 10326016.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 2333696.0 :y 87941.12 :z 10350346.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 2456617.0 :y 87777.28 :z 10412892.0 :w 16384.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 2405294.0 :y 84623.36 :z 10283336.0 :w 16384.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 2439454.8 :y 106086.4 :z 10570424.0 :w 16384.0))
      )
    :ouch-speeches (new 'static 'bot-speech-list-shuffle
      :flags (bot-speech-list-flag bsl1 bsl2)
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 26 27 28 29 30 31 32 40)
      )
    :victory-speeches (new 'static 'bot-speech-list-shuffle
      :flags (bot-speech-list-flag bsl2 bsl3)
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 0 20 21 22 23 24 25)
      )
    )
  )

(set! (-> *bot-course-table* course 0) *ash-oasis-course*)
