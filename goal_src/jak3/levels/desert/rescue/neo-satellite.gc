;;-*-Lisp-*-
(in-package goal)

;; name: neo-satellite.gc
;; name in dgo: neo-satellite
;; dgos: DESRESC

(define-extern *range-sat-explo-color* curve-color-fast)
(define-extern *range-sat-explo-alpha* curve2d-fast)
(define-extern *range-sat-explo-scale-x* curve2d-fast)
(define-extern *range-sat-explo-scale-y* curve2d-fast)
(define-extern *curve-sat-explo-alpha* curve2d-fast)
(define-extern *curve-sat-explo-scale-x* curve2d-fast)
(define-extern *curve-sat-explo-scale-y* curve2d-fast)

;; DECOMP BEGINS

(defskelgroup skel-neo-sat neo-satellite neo-satellite-lod0-jg neo-satellite-idle-ja
              ((neo-satellite-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 20)
              :shadow neo-satellite-shadow-mg
              :origin-joint-index 3
              :global-effects 32
              )

(set! (-> *lightning-spec-id-table* 22) (new 'static 'lightning-spec
                                          :name "neo-sat-lightning-shock"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #x80 :b #x40 :a #x80)
                                          :end-color (new 'static 'rgba :r #x80 :b #x40 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.42
                                          :num-points 16
                                          :box-size 16384.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration 30.0
                                          :sound (static-sound-spec "shock" :group 0)
                                          )
      )

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-sat-shockwave ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 51) 200))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 20))
        (v1-6 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 60))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 (the-as int s3-0))))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-6)))
    )
  (none)
  )

(defpart 1679
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-sat-shockwave)
    (:num 1.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.016666668) (meters 0.06666667))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-x (degrees 60) (degrees 20))
    (:rotate-y (degrees 0))
    )
  )

(defun spt-birth-func-part-sat-shockwave ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-sat-shockwave arg0 arg1 arg2)
  (none)
  )

(defpart 1680
  :init-specs ((:texture (redpuff level-default-sprite))
    (:num 1.0)
    (:y (meters 0.5))
    (:scale-x (meters 0.5))
    (:scale-y (meters 1))
    (:r 50.0 128.0)
    (:g 255.0)
    (:b 8.0 64.0)
    (:a 128.0 128.0)
    (:omega (degrees 0))
    (:vel-z (meters 0.083333336))
    (:scalevel-x (meters 0.006666667) (meters 0.0033333334))
    (:scalevel-y (meters -0.001))
    (:fade-a -0.425)
    (:friction 0.997 0.003)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:func 'spt-func-part-neo-sat-shockwave-hot)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1681
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3))
    (:scale-y (meters 1.2) (meters 0.5))
    (:r 255.0)
    (:g 200.0)
    (:b 0.0)
    (:a 255.0)
    (:vel-x (meters 0.00033333333))
    (:fade-r -5.5)
    (:fade-g -20.0)
    (:fade-a -3.4)
    (:timer (seconds 0.25))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    (:func 'sparticle-turn-to-vel)
    (:next-time (seconds 0.035))
    (:next-launcher 1682)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1682
  :init-specs ((:fade-r -20.0))
  )

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-scorch-bits ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (mod (the-as int (rand-uint31-gen *random-generator*)) 51))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 20))
        (v1-5 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 40))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 (the-as int s3-0))))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-5)))
    )
  (none)
  )

(defpart 1683
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-scorch-bits)
    (:num 4.0)
    (:z (meters -1) (meters 2))
    (:scale-x (meters 0.05) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.0033333334) (meters 0.016666668))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:accel-y (meters -0.00066666666) (meters -0.00066666666))
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-x (degrees -10) (degrees 20))
    (:rotate-y (degrees 0))
    )
  )

(defun spt-birth-func-part-scorch-bits ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-scorch-bits arg0 arg1 arg2)
  (none)
  )

(defpart 1684
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0)
    (:z (meters 0) (meters 4))
    (:scale-x (meters 0.3) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 10.0)
    (:g 20.0)
    (:b 255.0)
    (:a 255.0)
    (:vel-y (meters 0.016666668) (meters 0.05))
    (:vel-z (meters -0.33333334))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:fade-a -5.1 -5.1)
    (:accel-y (meters -0.0033333334))
    (:friction 0.8)
    (:timer (seconds 0.167))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z left-multiply-quat))
    (:conerot-x (degrees 0))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-neo-sat-ground-impact
  :id 418
  :duration (seconds 0.05)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1685 :flags (sp7)) (sp-item 1686 :flags (sp7)))
  )

(defpart 1685
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-ground-impact)
    (:num 10.0)
    (:x (meters 2))
    (:scale-x (meters 0.2) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.2) (meters 0.2))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.016666668) (meters 0.06666667))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-x (degrees -20) (degrees 40))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defun spt-birth-func-part-ground-impact ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-sat-shockwave arg0 arg1 arg2)
  (none)
  )

(defpart 1686
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 10.0)
    (:scale-x (meters 2) (meters 1))
    (:scale-y :copy scale-x)
    (:r 150.0)
    (:g 110.0)
    (:b 50.0)
    (:a 64.0)
    (:vel-z (meters 0.05) (meters 0.01))
    (:scalevel-x (meters 0.01) (meters 0.01))
    (:scalevel-y (meters -0.001))
    (:fade-a -0.10666667)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:conerot-x (degrees 0) (degrees -45))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-neo-sat-ground-emerge
  :id 419
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1687 :flags (sp7)))
  )

(defpartgroup group-neo-sat-ground-dust
  :id 420
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1688 :flags (sp7) :period (seconds 10) :length (seconds 0.05)))
  )

(defpart 1687
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-ground-emerge)
    (:num 0.3 0.3)
    (:x (meters -2) (meters 4))
    (:y (meters -1) (meters 2))
    (:scale-x (meters 0.1) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:rotvel-z (degrees -1) (degrees 2))
    (:accel-y (meters -0.00066666666) (meters -0.001))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defun spt-birth-func-part-ground-emerge ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-sat-shockwave arg0 arg1 arg2)
  (none)
  )

(defpart 1688
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 10.0)
    (:scale-x (meters 4) (meters 2))
    (:scale-y :copy scale-x)
    (:r 150.0)
    (:g 110.0)
    (:b 50.0)
    (:a 64.0)
    (:vel-z (meters 0.05) (meters 0.01))
    (:scalevel-x (meters 0.01) (meters 0.01))
    (:scalevel-y (meters -0.001))
    (:fade-a -0.10666667)
    (:accel-y (meters 0) (meters 0.00033333333))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:conerot-x (degrees 0) (degrees -45))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-neo-sat-debris-fly
  :id 421
  :duration (seconds 0.017)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1689 :flags (sp7)) (sp-item 1690 :flags (sp7)) (sp-item 1691))
  )

(defpart 1689
  :init-specs ((:texture (middot level-default-sprite))
    (:num 20.0)
    (:scale-x (meters 0.2) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.045))
    (:vel-z (meters 0.06666667) (meters 0.06666667))
    (:accel-y (meters -0.0016666667))
    (:friction 0.98)
    (:timer (seconds 0.167) (seconds 0.165))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-motion-blur)
    (:conerot-y (degrees -30) (degrees 60))
    (:rotate-y (degrees 0))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

(defpart 1690
  :init-specs ((:texture (crate-wood-01-splinter level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 5.0 5.0)
    (:scale-x (meters 0.2) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 10.0 100.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-z (meters 0.016666668) (meters 0.1))
    (:rotvel-z (degrees -5) (degrees 10))
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-13 launch-along-z))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x400600 #x408900 #x405000))
    (:conerot-x (degrees 0) (degrees -40))
    (:conerot-y (degrees -20) (degrees 40))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1691
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:scale-y (meters 2))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.013333334))
    (:scalevel-y (meters 0.0033333334))
    (:fade-a -0.21333334)
    (:accel-y (meters 0.001))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13 launch-along-z))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-neo-sat-antenna-explode
  :id 422
  :duration (seconds 1)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1692 :flags (sp7) :period (seconds 0.335) :length (seconds 0.017)) (sp-item 1693 :flags (sp7)))
  )

(defpart 1692
  :init-specs ((:texture (middot level-default-sprite))
    (:num 100.0)
    (:scale-x (meters 0.2) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.045))
    (:vel-z (meters 0.06666667) (meters 0.06666667))
    (:accel-y (meters -0.0016666667))
    (:friction 0.98)
    (:timer (seconds 0.167) (seconds 0.165))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-motion-blur)
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

(defpart 1693
  :init-specs ((:texture (lightning-anim-01 level-default-sprite))
    (:num 0.1 0.2)
    (:scale-x (meters 2) (meters 2))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.5))
    (:r 40.0)
    (:g 128.0 64.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-y (meters 0.04))
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x405700 #x405800 #x405900))
    (:func 'sparticle-texture-animate)
    )
  )

(defpartgroup group-neo-sat-damage-light
  :id 423
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1694 :flags (sp7)) (sp-item 1695 :flags (sp7)))
  )

(defpart 1694
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 0.1)
    (:scale-x (meters 0.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 64.0)
    (:g :copy r)
    (:b :copy r)
    (:a 128.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters 0.00033333333) (meters 0.00033333333))
    (:friction 0.9)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -5) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1695
  :init-specs ((:texture (diamond-star level-default-sprite))
    (:num 0.05 0.1)
    (:x (meters 0) (meters 2))
    (:y (meters -1))
    (:scale-x (meters 0.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 128.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334 -0.21333334)
    (:accel-y (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-neo-sat-damage-medium
  :id 424
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1696 :flags (sp7)) (sp-item 1697 :flags (sp7)))
  )

(defpart 1696
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.1)
    (:scale-x (meters 0.2) (meters 0.8))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters 0.00033333333) (meters 0.00033333333))
    (:friction 0.9)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -5) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1697
  :init-specs ((:texture (diamond-star level-default-sprite))
    (:num 0.1 0.2)
    (:x (meters 0) (meters 2))
    (:y (meters -1))
    (:scale-x (meters 0.4) (meters 0.8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 128.0 128.0)
    (:b 255.0)
    (:a 160.0)
    (:scalevel-x (meters -0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.26666668 -0.26666668)
    (:accel-y (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-neo-sat-damage-heavy
  :id 425
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1698 :flags (sp7)) (sp-item 1699 :flags (sp7)) (sp-item 1700 :flags (sp7)))
  )

(defpart 1698
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.1)
    (:scale-x (meters 0.6) (meters 1))
    (:rot-z (degrees -20) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 64.0)
    (:a 128.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters 0.00033333333) (meters 0.00033333333))
    (:friction 0.9)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -5) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1699
  :init-specs ((:texture (diamond-star level-default-sprite))
    (:num 0.2 0.4)
    (:x (meters 0) (meters 2))
    (:y (meters -1))
    (:scale-x (meters 0.6) (meters 0.8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 200.0)
    (:b 255.0)
    (:a 160.0)
    (:scalevel-x (meters -0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.26666668 -0.26666668)
    (:accel-y (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1700
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0 1.0)
    (:x (meters 0) (meters 0.5))
    (:y (meters 0.5))
    (:scale-x (meters 0.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 200.0 30.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.0033333334) (meters -0.0033333334))
    (:scalevel-y (meters 0.0033333334) (meters 0.0033333334))
    (:fade-g -0.8)
    (:fade-b -0.2)
    (:fade-a -0.2 -0.6666667)
    (:accel-y (meters 0.00033333333) (meters 0.00033333333))
    (:friction 0.99)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-x (degrees -5) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-neo-satellite-explode
  :id 426
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1701 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1702 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1703 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1704 :period (seconds 30) :length (seconds 0.167))
    (sp-item 1705 :period (seconds 30) :length (seconds 0.335))
    (sp-item 1706 :period (seconds 30) :length (seconds 0.667) :offset 300)
    (sp-item 1707 :period (seconds 30) :length (seconds 0.117))
    )
  )

(defpart 1707
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 10.0)
    (:y (meters -3.5) (meters 2))
    (:scale-x (meters 5))
    (:rot-x 4)
    (:scale-y (meters 0.2) (meters 0.4))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:omega (degrees 0.0675))
    (:vel-y (meters 0.26666668) (meters 0.33333334))
    (:fade-a -0.51 -0.51)
    (:accel-y (meters -0.0033333334) (meters -0.0016666667))
    (:friction 0.9 0.08)
    (:timer (seconds 1.5) (seconds 0.997))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 140))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1706
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 10.0)
    (:x (meters -5) (meters 10))
    (:y (meters -5) (meters 10))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 0.05) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 255.0)
    (:a 120.0 120.0)
    (:omega (degrees 0.045))
    (:vel-y (meters 0) (meters 0.01))
    (:fade-a -0.17 -0.1275)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.017))
    (:next-launcher 1708)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1708
  :init-specs ((:accel-x (meters -0.0033333334) 1 (meters 0.006666667))
    (:accel-y (meters -0.0033333334) 1 (meters 0.006666667))
    (:accel-z (meters -0.0033333334) 1 (meters 0.006666667))
    (:next-time (seconds 0.067) (seconds 0.03))
    (:next-launcher 1708)
    )
  )

(defpart 1701
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 160.0)
    (:g 0.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 1702
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 160.0)
    (:g 30.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.06666667)
    (:fade-g -0.025)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.99)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1704
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 6) (meters 4))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0 20.0)
    (:g 30.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.6666667) (meters 0.26666668))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.13333334)
    (:fade-g -0.05)
    (:fade-a -0.21333334 -0.21333334)
    (:friction 0.8)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1705
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 1.0)
    (:x (meters -4) (meters 8))
    (:y (meters -4) (meters 8))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.13333334) (meters 0.06666667))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-14))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-sat-explo-color* (new 'static 'curve-color-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'inline-array vector 4
                                      (new 'static 'vector :x 32.0 :z 128.0 :w 128.0)
                                      (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                      (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                      (new 'static 'vector :x 64.0 :z 128.0 :w 128.0)
                                      )
                                    :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *range-sat-explo-alpha* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                    :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *range-sat-explo-scale-x* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                      :ys (new 'static 'vector :x 20.0 :y 40.0 :z 41.0 :w 42.0)
                                      :one-over-x-deltas (new 'static 'vector :x 20.0 :y 1.0 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *range-sat-explo-scale-y* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                      :ys (new 'static 'vector :x 20.0 :y 40.0 :z 41.0 :w 42.0)
                                      :one-over-x-deltas (new 'static 'vector :x 20.0 :y 1.0 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *curve-sat-explo-alpha* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                    :ys (new 'static 'vector :y 1.0 :z 0.8)
                                    :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *curve-sat-explo-scale-x* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                      :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                      :one-over-x-deltas (new 'static 'vector :x 5.0 :y 0.625 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *curve-sat-explo-scale-y* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                      :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                      :one-over-x-deltas (new 'static 'vector :x 5.0 :y 0.625 :z 1.0 :w 1.0)
                                      )
          )
    )

(define *part-neo-satellite-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                                :lifetime-base (seconds 0.7)
                                                                :lifetime-offset (seconds 0.6)
                                                                :flags (particle-curve-flags pcf0)
                                                                )
        )

(set! (-> *part-id-table* 1705 init-specs 16 initial-valuef)
      (the-as float *part-neo-satellite-explosion-texture-curve-settings*)
      )

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* color-start) *range-sat-explo-color*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* alpha-start) *range-sat-explo-alpha*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* scale-x-start) *range-sat-explo-scale-x*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* scale-y-start) *range-sat-explo-scale-y*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* r-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* g-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* b-scalar) #f)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* a-scalar) *curve-sat-explo-alpha*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* scale-x-scalar) *curve-sat-explo-scale-x*)

(set! (-> *part-neo-satellite-explosion-texture-curve-settings* scale-y-scalar) *curve-sat-explo-scale-y*)

(defpart 1703
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 30))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0)
    (:g 40.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpartgroup group-neo-satellite-buildup
  :id 427
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1709 :flags (is-3d sp7) :period (seconds 10) :length (seconds 2))
    (sp-item 1710 :flags (sp7) :period (seconds 10) :length (seconds 0.035))
    )
  )

(defpart 1709
  :init-specs ((:texture (light-burst level-default-sprite))
    (:num 0.4 0.4)
    (:scale-x (meters 40) (meters 40))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 0))
    (:r 128.0)
    (:g 64.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-y (meters 0.033333335))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.167))
    (:next-launcher 1711)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1711
  :init-specs ((:scalevel-y (meters 0)))
  )

(defpart 1710
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 40))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 32.0)
    (:b 255.0)
    (:a 0.0)
    (:fade-a 0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(deftype neo-sat-laser-info (structure)
  ((joint       int16)
   (rope-index  int16)
   )
  )


(define *neo-sat-laser-array* (new 'static 'boxed-array :type neo-sat-laser-info
                                (new 'static 'neo-sat-laser-info :joint 4)
                                (new 'static 'neo-sat-laser-info :joint 5 :rope-index -1)
                                (new 'static 'neo-sat-laser-info :joint 6 :rope-index 1)
                                (new 'static 'neo-sat-laser-info :joint 7 :rope-index 1)
                                (new 'static 'neo-sat-laser-info :joint 8 :rope-index 2)
                                (new 'static 'neo-sat-laser-info :joint 9 :rope-index -1)
                                )
        )

(deftype neo-sat-hash-index (structure)
  ((h0  float)
   (h1  float)
   )
  :pack-me
  )


(deftype rope-neo-sat-whip (rope-prim-system)
  ((parent-handle  handle)
   )
  )


(deftype neo-sat-yellow-ammo-pos (structure)
  ((angle  float)
   (dist   float)
   )
  :allow-misaligned
  )


(define *neo-sat-focus-pos* (new 'static 'vector))

(deftype neo-sat (nav-enemy)
  ((nav-vector                  vector                   :inline)
   (y-movement                  float)
   (ground-offset               float)
   (desired-y-height            float)
   (xz-vel                      float)
   (x-vel                       float)
   (z-vel                       float)
   (offset-angle                float)
   (last-thrust-vec             vector                   :inline)
   (disc-joint                  joint-mod-rotate-local   :inline)
   (laser-rotate-angle          float)
   (wander-generate-time        time-frame)
   (hit-player?                 symbol)
   (desired-float-height        float)
   (bob-speed-scalar            float)
   (on-ground?                  symbol)
   (current-shockwave-radius    float)
   (active-laser-index          int8)
   (current-stage               int8)
   (fly-speed-scalar            float)
   (last-shockwave-radius       float)
   (ropes                       (array rope-neo-sat-whip))
   (max-speed                   float)
   (spin-current                float)
   (spin-dest                   float)
   (spin-speed                  float)
   (hashed-heights              float                    1225)
   (shockwave-origin            vector                   :inline)
   (current-height-probe-index  int16)
   (last-spawned-ring-index     int16)
   (global-neo-sat-index        uint8)
   (yellow-ammo-pos             neo-sat-yellow-ammo-pos  4 :inline)
   (num-yellow-ammo             int8                     :offset 5784)
   (start-thrust-pos            vector                   :inline)
   (was-player-inside-cone?     symbol)
   (was-doing-cone-check?       symbol)
   (damage-part1                sparticle-launch-control)
   (damage-part2                sparticle-launch-control)
   (damage-part3                sparticle-launch-control)
   (burst-dust-part             sparticle-launch-control)
   (warp-handle                 handle)
   (spine-joint-mods            joint-mod-rotate-local   6 :inline)
   (actual-laser-rotate-angle   float)
   (last-particle-rotate        float)
   (trunk-joint                 joint-mod-rotate-local   :inline)
   (ground-height               float)
   (tentacle                    rope-joint-system)
   (anim-loop?                  symbol)
   (play-anim?                  symbol)
   (anim-speed                  float)
   (should-rise?                symbol)
   (last-play-laser-time        time-frame)
   (snd-laser-burn              sound-id)
   (snd-whips-loop              sound-id                 3)
   (sound-last-snap-time        time-frame               3)
   (sound-next-play-time        time-frame               3)
   (new-spin-time               time-frame)
   (snd-arms-chatter            sound-id)
   (was-spinning?               symbol)
   (snd-hover                   sound-id)
   (snd-spool-explosion         sound-id)
   (antenna-explode-part        sparticle-launch-control)
   (next-lightning-time         time-frame)
   )
  (:state-methods
    sat-idle
    neo-sat-drill-attack
    neo-sat-drill-prepare
    neo-sat-drill-returning
    neo-sat-laser-attack
    neo-sat-drill-impact
    neo-sat-sit-and-spin
    ground-burst
    )
  (:methods
    (neo-sat-method-198 (_type_) none)
    (neo-sat-method-199 (_type_) none)
    (neo-sat-method-200 (_type_) none)
    (neo-sat-method-201 (_type_) float)
    (neo-sat-probe-ground (_type_ vector) float)
    (neo-sat-method-203 (_type_ symbol) vector)
    (neo-sat-method-204 (_type_) none)
    (neo-sat-method-205 (_type_) none)
    (neo-sat-method-206 (_type_ int symbol) none)
    (neo-sat-method-207 (_type_) none)
    (neo-sat-method-208 (_type_) none)
    (neo-sat-method-209 (_type_) float)
    (neo-sat-method-210 (_type_) float)
    (neo-sat-method-211 (_type_) none)
    (neo-sat-method-212 (_type_ vector vector) vector)
    (neo-sat-method-213 (_type_ float) int)
    (neo-sat-method-214 (_type_ float) int)
    (neo-sat-method-215 (_type_ float) float)
    (neo-sat-method-216 (_type_ float) float)
    (neo-sat-method-217 (_type_ int int) int)
    (neo-sat-method-218 (_type_ vector) float)
    (neo-sat-method-219 (_type_) none)
    (neo-sat-method-220 (_type_) int)
    (neo-sat-method-221 (_type_) symbol)
    (neo-sat-method-222 (_type_ object vector) float)
    (neo-sat-method-223 (_type_ vector int int) symbol)
    (neo-sat-method-224 (_type_) none)
    (neo-sat-method-225 (_type_ int) object)
    (neo-sat-method-226 (_type_ int) rope-system-flag)
    (neo-sat-method-227 (_type_ int) none)
    (neo-sat-method-228 (_type_) none)
    (move-to-ground-height (_type_ float) none)
    (neo-sat-method-230 (_type_) none)
    (spawn-shield (_type_) none)
    (neo-sat-method-232 (_type_ vector) symbol)
    (neo-sat-method-233 (_type_) quaternion)
    )
  (:states
    neo-sat-drill-halting
    )
  )


(define *alive-neo-sats* (new 'static 'boxed-array :type handle :length 0 :allocated-length 12))

(set! (-> *alive-neo-sats* length) (-> *alive-neo-sats* allocated-length))

(dotimes (v1-107 (-> *alive-neo-sats* length))
  (set! (-> *alive-neo-sats* v1-107) (the-as handle #f))
  )

(define *neo-sat-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 3
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x4
        :param0 100
        :param1 100
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 4
    :notice-anim 4
    :hostile-anim 4
    :hit-anim 4
    :knocked-anim 4
    :knocked-land-anim 4
    :die-anim 4
    :die-falling-anim -1
    :victory-anim -1
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint -1
    :notice-distance (meters 30)
    :notice-distance-delta (meters 10)
    :default-hit-points 90.0
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :ragdoll-info #f
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 4
    :turn-anim -1
    :run-anim 4
    :taunt-anim -1
    :run-travel-speed (meters 20)
    :run-acceleration (meters 1)
    :run-turning-acceleration (meters 2)
    :walk-travel-speed (meters 20)
    :walk-acceleration (meters 1)
    :walk-turning-acceleration (meters 1)
    :maximum-rotation-rate (degrees 720)
    :notice-nav-radius (meters 1)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *neo-sat-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(deftype neo-sat-init-params (structure)
  ((pos   vector      :inline)
   (quat  quaternion  :inline)
   )
  )


(define *neo-sat-rope-tentacle*
  (new 'static 'rope-joint-system-info :joint-info-array (new 'static 'boxed-array :type rope-joint-info
                                                           (new 'static 'rope-joint-info :joint-index 10)
                                                           (new 'static 'rope-joint-info :joint-index 11)
                                                           (new 'static 'rope-joint-info :joint-index 12)
                                                           (new 'static 'rope-joint-info :joint-index 13)
                                                           (new 'static 'rope-joint-info :joint-index 14)
                                                           (new 'static 'rope-joint-info :joint-index 15)
                                                           )
                                       )
  )

(define *neo-satellite-nav-mesh* (the-as actor-id #x11bae))

;; WARN: Return type mismatch none vs object.
(defbehavior neo-sat-init-by-other neo-sat ((arg0 neo-sat-init-params))
  (stack-size-set! (-> self main-thread) 512)
  (logclear! (-> self mask) (process-mask enemy))
  (init-enemy-collision! self)
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (quaternion-copy! (-> self root quat) (-> arg0 quat))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-neo-sat" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init (-> self disc-joint) self (the-as uint 3) (joint-mod-base-flags attached))
  (init (-> self trunk-joint) self (the-as uint 10) (joint-mod-base-flags attached))
  (set! (-> self snd-laser-burn) (new-sound-id))
  (set! (-> self snd-arms-chatter) (new-sound-id))
  (set! (-> self snd-hover) (new-sound-id))
  (dotimes (gp-2 3)
    (set! (-> self snd-whips-loop gp-2) (new-sound-id))
    )
  (init-enemy-defaults! self *neo-sat-nav-enemy-info*)
  (logior! (-> self skel status) (joint-control-status sync-math))
  (ja-no-eval :group! neo-satellite-idle-ja :num! zero)
  (ja-post)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self ropes) (new 'process 'boxed-array rope-neo-sat-whip 3))
  (dotimes (gp-3 (-> self ropes allocated-length))
    (set! (-> self ropes gp-3) (new 'process 'rope-neo-sat-whip))
    (set! (-> self ropes gp-3 parent-handle) (process->handle self))
    (init! (-> self ropes gp-3) 20)
    (logior! (-> self ropes gp-3 flags) (rope-system-flag rs0 rs1))
    (set! (-> self ropes gp-3 gravity) 409600.0)
    (set! (-> self ropes gp-3 drag) 0.3)
    (set! (-> self ropes gp-3 strip1 tex-id) (new 'static 'texture-id :index #xf :page #x5))
    (set! (-> self ropes gp-3 strip2 tex-id) (new 'static 'texture-id :index #xf :page #x5))
    (set! (-> self ropes gp-3 uv-repeat-dist) 40960.0)
    (rope-system-method-21 (-> self ropes gp-3))
    )
  (set! (-> self ropes length) (-> self ropes allocated-length))
  (set! (-> self tentacle) (new 'process 'rope-joint-system))
  (set! (-> self damage-part1) (create-launch-control (-> *part-group-id-table* 423) self))
  (set! (-> self damage-part2) (create-launch-control (-> *part-group-id-table* 424) self))
  (set! (-> self damage-part3) (create-launch-control (-> *part-group-id-table* 425) self))
  (set! (-> self burst-dust-part) (create-launch-control (-> *part-group-id-table* 419) self))
  (set! (-> self antenna-explode-part) (create-launch-control (-> *part-group-id-table* 422) self))
  (dotimes (gp-4 (-> *neo-sat-laser-array* length))
    (init
      (-> self spine-joint-mods gp-4)
      self
      (the-as uint (-> *neo-sat-laser-array* gp-4 joint))
      (joint-mod-base-flags attached)
      )
    )
  (change-to (get-nav-mesh *neo-satellite-nav-mesh*) self)
  (if (not (-> self nav))
      (go process-drawable-art-error "No nav mesh~%")
      )
  (let ((v1-109 (-> self nav state)))
    (set! (-> v1-109 current-poly) (the-as nav-poly #f))
    )
  0
  (neo-sat-method-198 self)
  (let ((v1-113 0))
    (while (< v1-113 (-> *alive-neo-sats* length))
      (when (= (-> *alive-neo-sats* v1-113) #f)
        (set! (-> *alive-neo-sats* v1-113) (process->handle self))
        (set! (-> self global-neo-sat-index) (the-as uint v1-113))
        )
      ;; og:preserve-this
      ; (break ((empty)) ((set! v1-113 (the-as int (+ 0 1)))))
      (1+! v1-113)
      )
    )
  ; (label cfg-28)
  (init-enemy! self)
  )

(defmethod neo-sat-method-198 ((this neo-sat))
  (let ((v1-0 (-> this nav)))
    (logclear! (-> v1-0 flags) (nav-control-flag limit-rotation-rate output-sphere-hash))
    (logclear! (-> this nav flags) (nav-control-flag update-heading-from-facing))
    (set! (-> this enemy-flags) (the-as enemy-flag (logclear (-> this enemy-flags) (enemy-flag ef44))))
    (let ((a1-7 v1-0))
      (set! (-> a1-7 sphere-mask) (the-as uint #x1000fe))
      )
    0
    (let ((a1-9 v1-0))
      (set! (-> a1-9 nav-cull-radius) 12288.0)
      )
    0
    (logclear! (-> v1-0 flags) (nav-control-flag output-sphere-hash))
    )
  (set! (-> this enemy-info callback-info) *physics-nav-callback-info*)
  (let ((v1-2 this))
    (if (not (logtest? (enemy-flag ef37) (-> v1-2 enemy-flags)))
        (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-2 enemy-flags))))
        )
    (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-2 enemy-flags))))
    (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info callback-info))
    )
  0
  0
  (none)
  )

;; WARN: Return type mismatch none vs object.
(defmethod init-enemy-defaults! ((this neo-sat) (arg0 nav-enemy-info))
  (set! (-> arg0 nav-mesh) *default-nav-mesh*)
  (let ((t9-0 (method-of-type nav-enemy init-enemy-defaults!)))
    (t9-0 this arg0)
    )
  (neo-sat-method-199 this)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod neo-sat-method-199 ((this neo-sat))
  (add-setting! 'music 'desres2 0.0 0)
  (logclear! (-> this focus-status) (focus-status disable dead inactive hit))
  (clear-focused (-> this focus))
  (dotimes (v1-6 3)
    (set! (-> this sound-last-snap-time v1-6) 0)
    )
  (dotimes (v1-9 3)
    (set! (-> this sound-next-play-time v1-9) 0)
    )
  (logclear! (-> this root nav-flags) (nav-flags has-root-sphere))
  (let ((v1-15 (-> this root root-prim)))
    (set! (-> v1-15 prim-core collide-as) (-> this root backup-collide-as))
    (set! (-> v1-15 prim-core collide-with) (-> this root backup-collide-with))
    )
  (set! (-> this root penetrated-by) (penetrate
                                       generic-attack
                                       lunge
                                       flop
                                       punch
                                       spin
                                       roll
                                       uppercut
                                       bonk
                                       tube
                                       flut-attack
                                       board
                                       mech-punch
                                       dark-punch
                                       dark-smack
                                       flut
                                       )
        )
  (logior! (-> this enemy-flags) (enemy-flag vulnerable vulnerable-backup))
  (logclear! (-> this focus-status) (focus-status dangerous))
  (logclear! (-> this enemy-flags) (enemy-flag dangerous-backup))
  (logior! (-> this enemy-flags) (enemy-flag trackable trackable-backup))
  (logior! (-> this enemy-flags) (enemy-flag attackable attackable-backup))
  (update-transforms (-> this root))
  (logclear! (-> this nav flags) (nav-control-flag limit-rotation-rate update-heading-from-facing))
  (let ((v1-31 (-> this nav)))
    (set! (-> v1-31 sphere-mask) (the-as uint 65))
    )
  0
  (let ((v1-33 (-> this nav)))
    (set! (-> v1-33 acceleration) 409600000.0)
    )
  0
  (set! (-> this current-stage) 0)
  (set! (-> this laser-rotate-angle) 0.0)
  (set! (-> this actual-laser-rotate-angle) 0.0)
  (set! (-> this hit-player?) #f)
  (set! (-> this should-rise?) #f)
  (set! (-> this play-anim?) #t)
  (set! (-> this was-spinning?) #f)
  (none)
  )

(defmethod penetrate->next-state ((this neo-sat) (arg0 process) (arg1 event-message-block) (arg2 float))
  (when (< 0.0 arg2)
    (let* ((a1-2 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this incoming attack-direction) 1.0))
           (s5-0 (matrix-f-u-compose (new 'stack-no-clear 'matrix) a1-2 *up-vector*))
           )
      (set! (-> s5-0 trans quad) (-> this root trans quad))
      (if (logtest? (-> *part-group-id-table* 421 flags) (sp-group-flag sp13))
          (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 421) :mat-joint s5-0)
          (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 421) :mat-joint s5-0)
          )
      )
    (when (>= 0.0 (-> this hit-points))
      )
    )
  'none
  )

(defmethod nav-enemy-method-176 ((this neo-sat))
  0
  (none)
  )

(defmethod nav-enemy-method-177 ((this neo-sat))
  0
  (none)
  )

(defmethod init-enemy-collision! ((this neo-sat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 -20480.0 0.0 81920.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 9420.8)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set! (-> v1-15 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 -12288.0 0.0 5324.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-17 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set-vector! (-> v1-17 local-sphere) 0.0 -20480.0 0.0 4096.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-19 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set-vector! (-> v1-19 local-sphere) 0.0 -32768.0 0.0 8192.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-21 prim-core collide-with) (collide-spec backgnd jak hit-by-others-list player-list))
      (set! (-> v1-21 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-21 local-sphere) 0.0 9011.2 0.0 9420.8)
      )
    (set! (-> s5-0 nav-radius) 6144.0)
    (let ((v1-23 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-enemy! ((this neo-sat))
  (let ((v1-0 (-> this nav)))
    (set! (-> v1-0 speed-scale) 1.0)
    )
  0
  (set! (-> this draw lod-set lod 0 dist) 491520.0)
  (set! (-> this draw lod-set lod 1 dist) 983040.0)
  (ja-channel-push! 1 0)
  (let ((a0-3 (-> this skel root-channel 0)))
    (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> this draw art-group data 4)))
    (set! (-> a0-3 frame-num) 0.0)
    (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> this draw art-group data 4)) num-func-identity)
    )
  (ja-post)
  (set-setting! 'dust-storm-sound-scalar #f 0.75 0)
  (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
  (go (method-of-object this sat-idle))
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod enemy-common-post ((this neo-sat))
  (call-parent-method this)
  (logclear! (-> this nav flags) (nav-control-flag limit-rotation-rate update-heading-from-facing))
  (when (-> this should-rise?)
    (send-event this 'rise-up)
    (set! (-> this should-rise?) #f)
    )
  (when (-> this play-anim?)
    (cond
      ((-> this anim-loop?)
       (let ((a0-8 (-> this skel root-channel 0)))
         (set! (-> a0-8 param 0) (-> this anim-speed))
         (joint-control-channel-group-eval! a0-8 (the-as art-joint-anim #f) num-func-loop!)
         )
       )
      (else
        (let ((a0-9 (-> this skel root-channel 0)))
          (set! (-> a0-9 param 0) (the float (+ (-> a0-9 frame-group frames num-frames) -1)))
          (set! (-> a0-9 param 1) (-> this anim-speed))
          (joint-control-channel-group-eval! a0-9 (the-as art-joint-anim #f) num-func-seek!)
          )
        )
      )
    )
  (seek! (-> this actual-laser-rotate-angle) (-> this laser-rotate-angle) (* 16384.0 (seconds-per-frame)))
  (let ((v1-24 (-> this draw shadow-ctrl)))
    (set! (-> v1-24 settings top-plane w) (- 4096.0))
    )
  0
  (let ((v1-27 (-> this draw shadow-ctrl)))
    (set! (-> v1-27 settings bot-plane w) (- (+ (- -12288.0 (-> this root trans y)) (-> this ground-height))))
    )
  0
  (dotimes (s5-0 (-> *neo-sat-laser-array* length))
    (quaternion-identity! (the-as quaternion (+ (the-as uint (-> this spine-joint-mods 0 rotation)) (* s5-0 32))))
    (quaternion-rotate-local-x!
      (the-as quaternion (+ (the-as uint (-> this spine-joint-mods 0 rotation)) (* s5-0 32)))
      (the-as quaternion (+ (the-as uint (-> this spine-joint-mods 0 rotation)) (* s5-0 32)))
      (- (-> this actual-laser-rotate-angle))
      )
    )
  (let ((a0-19 (handle->process (-> this focus handle))))
    (if a0-19
        (set! (-> this focus-pos quad) (-> (get-trans (the-as process-focusable a0-19) 0) quad))
        )
    )
  (let ((f0-18 (/ (-> this hit-points) (-> this enemy-info default-hit-points))))
    (when (< 0.0 f0-18)
      (cond
        ((< f0-18 0.27)
         (spawn (-> this damage-part3) (-> this root trans))
         (when (< (-> this next-lightning-time) (current-time))
           (process-drawable-shock-effect
             this
             (-> *lightning-spec-id-table* 22)
             lightning-probe-callback
             (-> *part-id-table* 160)
             0
             0
             40960.0
             )
           (set! (-> this next-lightning-time) (+ (current-time) (seconds 0.35)))
           )
         )
        ((< f0-18 0.6)
         (spawn (-> this damage-part2) (-> this root trans))
         )
        ((< f0-18 0.9)
         (spawn (-> this damage-part1) (-> this root trans))
         )
        )
      )
    )
  (none)
  )

(defmethod neo-sat-probe-ground ((this neo-sat) (arg0 vector))
  (let ((gp-0 (new 'stack-no-clear 'collide-query)))
    (vector+float*! (-> gp-0 start-pos) arg0 *up-vector* 81920.0)
    (set! (-> gp-0 move-dist quad) (the-as uint128 0))
    (set! (-> gp-0 move-dist y) -245760.0)
    (let ((v1-4 gp-0))
      (set! (-> v1-4 radius) 40.96)
      (set! (-> v1-4 collide-with) (collide-spec backgnd))
      (set! (-> v1-4 ignore-process0) #f)
      (set! (-> v1-4 ignore-process1) #f)
      (set! (-> v1-4 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-4 action-mask) (collide-action solid))
      )
    (if (>= (fill-and-probe-using-line-sphere *collide-cache* gp-0) 0.0)
        (-> gp-0 best-other-tri intersect y)
        -40960000.0
        )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod move-to-ground-height ((this neo-sat) (arg0 float))
  (set! (-> this ground-height) arg0)
  (let ((f0-2 (+ arg0 (-> this ground-offset))))
    (set! (-> this on-ground?) #f)
    (when (< (-> this root trans y) f0-2)
      (set! (-> this root trans y) f0-2)
      (set! (-> this y-movement) 0.0)
      (set! (-> this on-ground?) #t)
      )
    )
  (none)
  )

(define *h0* 20.0)

(define *h1* 8.0)

(define *hs* 4.0)

(defmethod neo-sat-method-201 ((this neo-sat))
  (when (and (-> this next-state) (= (-> this next-state name) 'neo-sat-drill-prepare))
    (let ((f0-1 (* 0.000010172526 (-> this spin-current))))
      (sound-play-by-name
        (static-sound-name "sat-hover")
        (-> this snd-hover)
        1024
        (the int (* 1524.0 (lerp 0.0 0.25 f0-1)))
        0
        (sound-group)
        #t
        )
      )
    )
  (let ((f30-1 (neo-sat-probe-ground this (-> this root trans))))
    (let ((a1-3 (new 'stack-no-clear 'vector)))
      (set! (-> a1-3 x) (-> this root trans x))
      (set! (-> a1-3 y) f30-1)
      (set! (-> a1-3 z) (-> this root trans z))
      (set! (-> a1-3 w) 1.0)
      (set-virtual-cur-pos! (-> this nav state) a1-3)
      )
    (move-to-ground-height this f30-1)
    (set! (-> this desired-y-height) (+ f30-1 (-> this desired-float-height)))
    )
  (let ((f30-2 (- (-> this desired-y-height) (-> this root trans y)))
        (f0-11 0.0)
        )
    (when (< 8192.0 (fabs (-> this y-movement)))
      (let ((f1-5 (* 0.00012207031 (+ -8192.0 (fabs (-> this y-movement))))))
        (fmax 0.0 (fmin 1.0 f1-5))
        )
      (set! f0-11 (lerp 0.0 *h1* 1.0))
      )
    (let ((f1-12
            (* (+ (* *h0* f30-2) (* f0-11 (- (-> this y-movement)))) *hs* (-> this bob-speed-scalar) (seconds-per-frame))
            )
          )
      (+! (-> this y-movement) (* f1-12 (seconds-per-frame)))
      )
    )
  (set! (-> this root trans y) (+ (-> this root trans y) (* (-> this y-movement) (seconds-per-frame))))
  )

(define *m0* 30.0)

(define *m1* 20.0)

(define *ms* 1.5)

(define *move-offset* 32768.0)

(define *maxh* 16384.0)

(define *minh* 16384.0)

(define *maxl* 73728.0)

(define *minl* 69632.0)

(defmethod neo-sat-method-203 ((this neo-sat) (arg0 symbol))
  (let ((a0-1 (-> this nav state))
        (a1-1 (new 'stack-no-clear 'vector))
        )
    (set! (-> a1-1 quad) (-> a0-1 target-pos quad))
    (let ((f30-0 (vector-vector-xz-distance (-> this root trans) a1-1)))
      (-> this xz-vel)
      (let ((s5-0 (new-stack-vector0)))
        (when arg0
          (let ((a1-2 (the-as process-focusable (handle->process (-> this focus handle)))))
            (if a1-2
                (vector-float*! s5-0 (-> a1-2 root transv) 1.0)
                )
            )
          )
        (fabs (+ -32768.0 f30-0))
        (let ((s3-1 (vector+float*! (new 'stack-no-clear 'vector) s5-0 (-> this nav-vector) f30-0)))
          (vector-dot
            (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this root transv) 1.0)
            (-> this nav-vector)
            )
          (let ((s4-2 (vector-! (new 'stack-no-clear 'vector) s3-1 (-> this root transv))))
            (vector-lerp! (-> this last-thrust-vec) (-> this last-thrust-vec) s4-2 (* 2.0 (seconds-per-frame)))
            (set! (-> s4-2 quad) (-> this last-thrust-vec quad))
            (let* ((f1-1 (vector-dot
                           (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this root transv) 1.0)
                           (vector-normalize-copy! (new 'stack-no-clear 'vector) s4-2 1.0)
                           )
                         )
                   (f0-18 (* (+ (* *m0* f30-0) (* -1.0 (vector-length (-> this root transv)) f1-1 *m1*))
                             (lerp 1.0 2.0 (fmax 0.0 (fmin 1.0 (* 0.0000061035157 (vector-length s5-0)))))
                             *ms*
                             (seconds-per-frame)
                             )
                          )
                   )
              (vector-normalize! s4-2 (* f0-18 (seconds-per-frame)))
              )
            (vector+! (-> this root transv) (-> this root transv) s4-2)
            )
          )
        )
      )
    )
  (let ((f0-20 (vector-length (-> this root transv))))
    (if (< (-> this max-speed) f0-20)
        (vector-float*! (-> this root transv) (-> this root transv) (/ (-> this max-speed) f0-20))
        )
    )
  (vector-v++! (-> this root trans) (-> this root transv))
  )

;; WARN: Return type mismatch connection vs none.
(defmethod neo-sat-method-204 ((this neo-sat))
  (set-setting! 'fov 'abs (degrees 75.0) 0)
  (set-setting! 'string-min-height 'abs *minh* 0)
  (set-setting! 'string-max-height 'abs *maxh* 0)
  (set-setting! 'string-min-length 'abs *minl* 0)
  (set-setting! 'string-max-length 'abs *maxl* 0)
  (none)
  )

;; WARN: Return type mismatch connection vs none.
(defmethod neo-sat-method-208 ((this neo-sat))
  (set-setting! 'fov 'abs (degrees 75.0) 0)
  (set-setting! 'string-min-height 'abs (meters 4) 0)
  (set-setting! 'string-max-height 'abs (meters 8) 0)
  (set-setting! 'string-min-length 'abs *minl* 0)
  (set-setting! 'string-max-length 'abs *maxl* 0)
  (none)
  )

(defmethod neo-sat-method-205 ((this neo-sat))
  (remove-setting! 'fov)
  (remove-setting! 'string-min-height)
  (remove-setting! 'string-max-height)
  (remove-setting! 'string-min-length)
  (remove-setting! 'string-max-length)
  (none)
  )

(defmethod neo-sat-method-233 ((this neo-sat))
  (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) (-> this focus-pos) (-> this root trans))))
    (set! (-> s5-1 y) 0.0)
    (vector-normalize! s5-1 1.0)
    (let ((s5-2 (quaternion-look-at! (new 'stack-no-clear 'quaternion) s5-1 *up-vector*)))
      (quaternion-rotate-y! s5-2 s5-2 -10922.667)
      (quaternion-slerp!
        (-> this trunk-joint rotation)
        (-> this trunk-joint rotation)
        s5-2
        (* 2.0 (seconds-per-frame))
        )
      )
    )
  )

;; WARN: Return type mismatch quaternion vs none.
(defmethod neo-sat-method-200 ((this neo-sat))
  (neo-sat-method-201 this)
  (neo-sat-method-203 this #t)
  (neo-sat-method-233 this)
  (none)
  )

;; WARN: Return type mismatch float vs none.
(defmethod neo-sat-method-207 ((this neo-sat))
  (set-setting! 'duststorm-push-player? #f 0.0 0)
  (set! (-> this last-play-laser-time) 0)
  (set! (-> this current-height-probe-index) 0)
  (set! (-> this shockwave-origin quad) (-> this root trans quad))
  (let ((v1-8
          (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> *neo-sat-laser-array* 0 joint)))
          )
        )
    0.0
    0.0
    (let* ((s5-0 (new 'stack-no-clear 'vector))
           (f30-0 (- (-> v1-8 y) (-> this root trans y)))
           (a0-8 (vector-! (new 'stack-no-clear 'vector) v1-8 (-> this root trans)))
           (f28-0 (sqrtf (+ (* (-> a0-8 x) (-> a0-8 x)) (* (-> a0-8 z) (-> a0-8 z)))))
           (s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this focus-pos) (-> this root trans)))
           (s3-0 (new 'stack-no-clear 'vector))
           )
      (set! (-> s4-1 y) 0.0)
      (vector-normalize! s4-1 1.0)
      (vector-float*! s4-1 s4-1 81920.0)
      (vector+! s3-0 (-> this focus-pos) s4-1)
      (vector-normalize! s4-1 1.0)
      (vector-float*! s4-1 s4-1 f28-0)
      (set! (-> s4-1 y) f30-0)
      (vector+! s5-0 (-> this root trans) s4-1)
      (let ((a0-19 (vector-! (new 'stack-no-clear 'vector) s3-0 s5-0)))
        0.0
        0.0
        (let ((f30-1 (fabs (-> a0-19 y))))
          (set! (-> a0-19 y) 0.0)
          (let ((f0-13 (vector-normalize-ret-len! a0-19 1.0)))
            (set! (-> this laser-rotate-angle) (- (atan f30-1 f0-13)))
            )
          )
        )
      )
    )
  (none)
  )

(defmethod event-handler ((this neo-sat) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((a0-3 (-> arg3 param 1))
           (s1-0 (new 'stack-no-clear 'attack-info))
           )
       ((method-of-type attack-info attack-info-method-9)
        (the-as attack-info a0-3)
        s1-0
        (the-as process-drawable arg0)
        this
        )
       (if (and (not (logtest? (-> this enemy-flags) (enemy-flag vulnerable)))
                (< (+ -8192.0 (-> this root trans y)) (-> s1-0 intersection y))
                )
           (send-event (handle->process (-> this warp-handle)) 'hit)
           )
       )
     )
    (('notify)
     (case (-> arg3 param 0)
       (('attack)
        (let ((v1-18 (the-as process (-> arg3 param 1))))
          (if (and v1-18 (= (-> v1-18 type) target) (> (-> this current-stage) 0))
              (set! (-> this hit-player?) #t)
              )
          )
        )
       )
     )
    )
  (call-parent-method this arg0 arg1 arg2 arg3)
  )

(defmethod coin-flip? ((this neo-sat))
  #f
  )

(defstate neo-sat-drill-halting (neo-sat)
  :event enemy-event-handler
  :trans (behavior ()
    (if (-> self hit-player?)
        (go-virtual hostile)
        )
    (neo-sat-method-230 self)
    (seek! (-> self anim-speed) 3.0 (* 0.15 (seconds-per-frame)))
    (neo-sat-method-233 self)
    (vector-float*! (-> self root transv) (-> self root transv) (fmax 0.0 (- 1.0 (* 2.0 (seconds-per-frame)))))
    (vector-v++! (-> self root trans) (-> self root transv))
    (neo-sat-method-220 self)
    (dotimes (gp-0 (-> *neo-sat-laser-array* length))
      (neo-sat-method-206 self (-> *neo-sat-laser-array* gp-0 joint) #f)
      )
    (set! (-> self spin-current) 49152.0)
    (quaternion-rotate-y!
      (-> self disc-joint rotation)
      (-> self disc-joint rotation)
      (* (-> self spin-current) (seconds-per-frame))
      )
    (if (< (vector-length (-> self root transv)) 2048.0)
        (go-virtual neo-sat-drill-returning)
        )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate neo-sat-drill-returning (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((v1-0 self))
      (if (not (logtest? (enemy-flag ef37) (-> v1-0 enemy-flags)))
          (set! (-> v1-0 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-0 enemy-flags))))
          )
      (set! (-> v1-0 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-0 enemy-flags))))
      (set! (-> v1-0 nav callback-info) (-> v1-0 enemy-info callback-info))
      )
    0
    (let ((a0-12 (-> self nav state))
          (v1-4 (-> self shockwave-origin))
          )
      (logclear! (-> a0-12 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-12 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-12 target-pos quad) (-> v1-4 quad))
      )
    0
    (set! (-> self last-thrust-vec quad) (the-as uint128 0))
    )
  :trans (behavior ()
    (if (-> self hit-player?)
        (go-virtual hostile)
        )
    (neo-sat-method-230 self)
    (seek! (-> self anim-speed) 3.0 (* 0.15 (seconds-per-frame)))
    (vector-! (-> self nav-vector) (-> self shockwave-origin) (-> self root trans))
    (set! (-> self nav-vector y) 0.0)
    (vector-normalize! (-> self nav-vector) 1.0)
    (neo-sat-method-203 self #f)
    (neo-sat-method-233 self)
    (neo-sat-method-220 self)
    (neo-sat-method-201 self)
    (dotimes (gp-0 (-> *neo-sat-laser-array* length))
      (neo-sat-method-206 self (-> *neo-sat-laser-array* gp-0 joint) #f)
      )
    (set! (-> self spin-current) 49152.0)
    (quaternion-rotate-y!
      (-> self disc-joint rotation)
      (-> self disc-joint rotation)
      (* (-> self spin-current) (seconds-per-frame))
      )
    (if (< (vector-vector-xz-distance (-> self root trans) (-> self shockwave-origin)) 901.12)
        (go-virtual neo-sat-drill-prepare)
        )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate neo-sat-drill-prepare (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-2 nav callback-info) *null-nav-callback-info*)
      )
    0
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! neo-satellite-stab-ja :num! (seek!) :frame-num 0.0)
    (set! (-> self anim-loop?) #f)
    (set! (-> self anim-speed) 0.7)
    (sound-stop (-> self snd-arms-chatter))
    )
  :trans (behavior ()
    (neo-sat-method-220 self)
    (if (time-elapsed? (-> self state-time) (seconds 1.5))
        (go-virtual neo-sat-drill-attack)
        )
    (if (-> self hit-player?)
        (go-virtual hostile)
        )
    (if #f
        (neo-sat-method-230 self)
        )
    (neo-sat-method-201 self)
    (let* ((f0-1 (* 0.0033333334 (the float (- (current-time) (-> self state-time)))))
           (f30-0 (* f0-1 f0-1))
           )
      (set! (-> self bob-speed-scalar) (lerp 1.0 10.0 f30-0))
      (set! (-> self spin-current) (lerp 49152.0 98304.0 f30-0))
      )
    (quaternion-rotate-y!
      (-> self disc-joint rotation)
      (-> self disc-joint rotation)
      (* (-> self spin-current) (seconds-per-frame))
      )
    (when #f
      (dotimes (gp-0 (-> *neo-sat-laser-array* length))
        (neo-sat-method-206 self (-> *neo-sat-laser-array* gp-0 joint) #f)
        )
      )
    (when (time-elapsed? (-> self state-time) (seconds 1))
      (sound-stop (-> self snd-laser-burn))
      (neo-sat-method-208 self)
      )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defmethod neo-sat-method-224 ((this neo-sat))
  0
  (none)
  )

;; WARN: Return type mismatch symbol vs vector.
(defmethod rope-system-method-10 ((this rope-neo-sat-whip))
  (call-parent-method this)
  (let ((s5-0 (the-as neo-sat (handle->process (-> this parent-handle)))))
    (the-as vector (when (not (and (-> s5-0 next-state) (= (-> s5-0 next-state name) 'neo-sat-sit-and-spin)))
                     (dotimes (s4-0 (-> this knots length))
                       (let* ((f0-0 (neo-sat-method-218 s5-0 (the-as vector (-> this knots data s4-0))))
                              (f0-1 (+ 614.4 f0-0))
                              )
                         (set! (-> this knots data s4-0 pos y) (fmax (-> this knots data s4-0 pos y) f0-1))
                         )
                       )
                     #f
                     )
            )
    )
  )

(defmethod neo-sat-method-225 ((this neo-sat) (arg0 int))
  (let* ((gp-0 (-> *neo-sat-laser-array* arg0 joint))
         (a1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data gp-0)))
         (s3-0 (new 'stack-no-clear 'vector))
         )
    (set! (-> s3-0 quad) (-> this node-list data gp-0 bone transform fvec quad))
    (let ((gp-1 (-> this ropes (-> *neo-sat-laser-array* arg0 rope-index))))
      (set! (-> gp-1 knots data 0 mass) (the-as float #x7f800000))
      (if (and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin))
          (set! (-> gp-1 gravity-dir quad) (-> s3-0 quad))
          )
      (set! (-> gp-1 knots data 0 pos quad) (-> a1-3 quad))
      (set! (-> gp-1 knots data 0 prev-pos quad) (-> a1-3 quad))
      (set! (-> gp-1 knot-constraints data 0 dir quad) (-> s3-0 quad))
      (when (and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin))
        (let ((f30-1 (- (-> a1-3 y) (neo-sat-method-218 this a1-3))))
          (dotimes (s2-0 (-> gp-1 knots length))
            (set! (-> gp-1 knots data s2-0 pos y)
                  (+ f30-1 (neo-sat-method-218 this (the-as vector (-> gp-1 knots data s2-0))))
                  )
            (set! (-> gp-1 knots data s2-0 prev-pos y) (-> gp-1 knots data s2-0 pos y))
            )
          )
        )
      0.0
      0.0
      (let* ((f30-2 (/ 368640.0 (the float (+ (-> gp-1 knots length) -1))))
             (f28-0 (* 0.6666667 f30-2))
             )
        (cond
          ((and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin))
           (let ((s2-1 (-> *neo-sat-laser-array* arg0 rope-index)))
             (when (and (> (-> this sound-next-play-time s2-1) 0) (>= (- (current-time) (-> this sound-next-play-time s2-1)) 0))
               (sound-play "sat-whip-snap")
               (set! (-> this sound-next-play-time s2-1) 0)
               0
               )
             (when (and (time-elapsed? (-> this sound-last-snap-time s2-1) (seconds 1.5))
                        (not (time-elapsed?
                               (-> gp-1 knot-constraints data (+ (-> gp-1 knot-constraints length) -1) constrained-angle-time)
                               (seconds 0.1)
                               )
                             )
                        (zero? (-> this sound-next-play-time s2-1))
                        )
               (set-time! (-> this sound-last-snap-time s2-1))
               (let* ((f0-10 (* 0.000030517578 (fabs (-> this spin-speed))))
                      (f0-11 (* f0-10 f0-10))
                      )
                 (set! (-> this sound-next-play-time s2-1) (+ (current-time) (the int (* 300.0 (lerp 0.3 0.0 f0-11)))))
                 )
               )
             )
           (when (< 0.75 (/ (-> gp-1 knot-constraints data 0 length) f30-2))
             (let ((s2-3 (vector-! (new 'stack-no-clear 'vector) (-> this focus-pos) (-> this root trans))))
               0.0
               0.0
               0.0
               0.0
               (let ((f26-1 (fmax 0.0 (fmin 1.0 (* 0.000030517578 (fabs (-> this spin-speed)))))))
                 (set! (-> s2-3 y) 0.0)
                 (vector-normalize! s2-3 1.0)
                 (let* ((f0-23 (acos (vector-dot s2-3 s3-0)))
                        (f0-24 (* 0.000030517578 f0-23))
                        (f22-0 (- 1.0 f0-24))
                        (f1-10 (+ (lerp 0.0 0.75 (* f22-0 f22-0)) (lerp -0.25 0.25 f26-1)))
                        (f24-1 (fmax 0.0 (fmin 1.0 f1-10)))
                        (f0-29 (+ (lerp -0.5 0.5 f22-0) (lerp 0.0 0.5 f26-1)))
                        (f0-30 (fmin 1.0 f0-29))
                        )
                   (sound-play-by-name
                     (static-sound-name "sat-whip-loop-a")
                     (-> this snd-whips-loop (-> *neo-sat-laser-array* arg0 rope-index))
                     (the int (* 1024.0 f24-1))
                     (the int (* 1524.0 f0-30))
                     0
                     (sound-group)
                     #t
                     )
                   )
                 )
               )
             )
           )
          (else
            (sound-stop (-> this snd-whips-loop (-> *neo-sat-laser-array* arg0 rope-index)))
            )
          )
        (when (not (and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin)))
          (set! f28-0 (* 2.0 f28-0))
          (set! f30-2 0.0)
          )
        (dotimes (s5-1 (-> gp-1 knot-constraints length))
          (seek! (-> gp-1 knot-constraints data s5-1 length) f30-2 (* f28-0 (seconds-per-frame)))
          )
        )
      (rope-system-method-18 gp-1)
      )
    )
  )

(defmethod neo-sat-method-226 ((this neo-sat) (arg0 int))
  (let* ((s4-0 (-> *neo-sat-laser-array* arg0 joint))
         (a1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data s4-0)))
         (v1-5 (new 'stack-no-clear 'vector))
         )
    (set! (-> v1-5 quad) (-> this node-list data s4-0 bone transform fvec quad))
    368640.0
    (let ((a0-15 (-> this ropes (-> *neo-sat-laser-array* arg0 rope-index))))
      0.0
      (let ((f0-2 0.0))
        (dotimes (a2-3 (-> a0-15 knots length))
          (vector+float*! (the-as vector (-> a0-15 knots data a2-3)) a1-3 v1-5 (* (the float a2-3) f0-2))
          (set! (-> (the-as (pointer uint128) (+ (the-as uint (-> a0-15 knots data 0 prev-pos)) (* a2-3 64))))
                (-> a0-15 knots data a2-3 pos quad)
                )
          )
        )
      (dotimes (a1-6 (-> a0-15 knot-constraints length))
        (set! (-> a0-15 knot-constraints data a1-6 dir quad) (-> v1-5 quad))
        (set! (-> a0-15 knot-constraints data a1-6 length) 0.0)
        (set! (-> a0-15 knot-constraints data a1-6 rest-seek-rate) 5461.3335)
        (set! (-> a0-15 knot-constraints data a1-6 max-angle) 2730.6667)
        )
      (cond
        ((and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin))
         (logior! (-> a0-15 flags) (rope-system-flag rs0))
         )
        (else
          (vector-float*! (-> a0-15 gravity-dir) *up-vector* -1.0)
          (logclear! (-> a0-15 flags) (rope-system-flag rs0))
          )
        )
      (rope-system-method-22 a0-15)
      )
    )
  )

(defmethod neo-sat-method-209 ((this neo-sat))
  (set-time! (-> this new-spin-time))
  (set! (-> this spin-current) (quaternion-y-angle (-> this disc-joint rotation)))
  (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) (-> this focus-pos) (-> this root trans))))
    0.0
    (set! (-> s5-1 y) 0.0)
    (vector-normalize! s5-1 1.0)
    (let ((f30-0 (the float (sar (shl (the int (vector-y-angle s5-1)) 48) 48))))
      (set! (-> this spin-current) (the float (sar (shl (the int (-> this spin-current)) 48) 48)))
      (when (= (-> this current-stage) 2)
        (let* ((f30-1 -24576.0)
               (f28-0 49152.0)
               (v1-14 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-15 (the-as number (logior #x3f800000 v1-14)))
               (f0-14 (+ f30-1 (* f28-0 (+ -1.0 (the-as float v1-15)))))
               (f0-15 (if (< f0-14 0.0)
                          (+ -21845.334 f0-14)
                          (+ 21845.334 f0-14)
                          )
                      )
               )
          (set! (-> this spin-dest) (+ (-> this spin-current) f0-15))
          )
        (return 0.0)
        )
      (let* ((v1-23 (-> this current-stage))
             (f28-4 (cond
                      ((zero? v1-23)
                       (let* ((f28-1 22755.555)
                              (f26-0 20935.113)
                              (v1-27 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                              (v1-28 (the-as number (logior #x3f800000 v1-27)))
                              )
                         (+ f28-1 (* f26-0 (+ -1.0 (the-as float v1-28))))
                         )
                       )
                      ((= v1-23 1)
                       (let* ((f28-2 8192.0)
                              (f26-1 8192.0)
                              (v1-34 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                              (v1-35 (the-as number (logior #x3f800000 v1-34)))
                              )
                         (+ f28-2 (* f26-1 (+ -1.0 (the-as float v1-35))))
                         )
                       )
                      (else
                        (let* ((f28-3 -3640.889)
                               (f26-2 7281.778)
                               (v1-40 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                               (v1-41 (the-as number (logior #x3f800000 v1-40)))
                               )
                          (+ f28-3 (* f26-2 (+ -1.0 (the-as float v1-41))))
                          )
                        )
                      )
                    )
             (f30-2 (deg- f30-0 (-> this spin-current)))
             )
        0.0
        -32768.0
        (let ((s5-2 #f))
          (if (< (mod (the-as int (rand-uint31-gen *random-generator*)) 21) 12)
              (set! s5-2 #t)
              )
          (set! f30-2 (cond
                        (s5-2
                          (if (< 0.0 f30-2)
                              (+ -65536.0 f30-2)
                              (+ 65536.0 f30-2)
                              )
                          )
                        (else
                          (empty)
                          f30-2
                          )
                        )
                )
          )
        (if (< f30-2 0.0)
            (set! f28-4 (* -1.0 f28-4))
            )
        (let ((f0-40 (+ f30-2 f28-4)))
          (set! (-> this spin-dest) (+ (-> this spin-current) f0-40))
          )
        )
      )
    )
  )

(defmethod neo-sat-method-228 ((this neo-sat))
  (neo-sat-method-225 this (-> this active-laser-index))
  (neo-sat-method-227 this (-> this active-laser-index))
  (case (-> this current-stage)
    ((1)
     (neo-sat-method-225 this 3)
     (neo-sat-method-227 this 3)
     )
    ((2)
     (neo-sat-method-225 this 2)
     (neo-sat-method-227 this 2)
     (neo-sat-method-225 this 4)
     (neo-sat-method-227 this 4)
     )
    )
  (none)
  )

(defmethod neo-sat-method-210 ((this neo-sat))
  (local-vars (s5-1 object))
  (let ((f0-0 143360.0))
    (if (< (* f0-0 f0-0) (vector-vector-xz-distance-squared (-> this root trans) (-> this focus-pos)))
        (go (method-of-object this ground-burst))
        )
    )
  (-> this spin-current)
  0.0
  (let ((f0-5 1.0)
        (f1-1 (- (-> this spin-dest) (-> this spin-current)))
        )
    (if (or (and (< 0.0 (-> this spin-speed)) (< f1-1 0.0)) (and (< (-> this spin-speed) 0.0) (< 0.0 f1-1)))
        (* -1.0 f0-5)
        )
    )
  (let* ((f0-10
           (* (+ (* 12.0 (- (-> this spin-dest) (-> this spin-current))) (* 6.0 (- (-> this spin-speed))))
              (seconds-per-frame)
              )
           )
         (f0-11 (* 0.05 f0-10))
         )
    (+! (-> this spin-speed) f0-11)
    )
  (let* ((v1-19 (-> this current-stage))
         (v1-20 (cond
                  ((zero? v1-19)
                   50062.223
                   )
                  ((= v1-19 1)
                   50062.223
                   )
                  ((= v1-19 2)
                   36408.89
                   )
                  )
                )
         (f0-13 v1-20)
         )
    (set! (-> this spin-speed) (fmax (fmin (-> this spin-speed) f0-13) (- f0-13)))
    )
  (+! (-> this spin-current) (* (-> this spin-speed) (seconds-per-frame)))
  (quaternion-rotate-y!
    (-> this disc-joint rotation)
    (-> this disc-joint rotation)
    (* (-> this spin-speed) (seconds-per-frame))
    )
  (let ((s5-0 (handle->process (-> this focus handle))))
    (cond
      ((and (if (type? s5-0 process-focusable)
                s5-0
                )
            (begin
              (let* ((s5-2 #t)
                     (s4-0 (handle->process (-> this focus handle)))
                     (v1-33 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s4-0 process-focusable)
                                                                                           (the-as process-focusable s4-0)
                                                                                           )
                                                                     )
                                                             focus-status
                                                             )
                                                         (focus-status disable dead ignore grabbed)
                                                         )
                                    )
                            )
                     )
                (cmove-#f-nonzero s5-1 v1-33 s5-2)
                )
              s5-1
              )
            )
       (if (or (time-elapsed? (-> this new-spin-time) (seconds 3))
               (and (< (-> this spin-speed) 910.2222) (< (fabs (- (-> this spin-current) (-> this spin-dest))) 546.13336))
               )
           (neo-sat-method-209 this)
           )
       )
      (else
        (set! (-> this spin-dest) (-> this spin-current))
        )
      )
    )
  (vector-rotate-around-y! (new 'stack-no-clear 'vector) *z-vector* (-> this spin-dest))
  (set! (-> this laser-rotate-angle) (seek (-> this laser-rotate-angle) 0.0 (* 16384.0 (seconds-per-frame))))
  )

;; WARN: Return type mismatch number vs float.
(defmethod get-damage-from-attack ((this neo-sat) (arg0 object) (arg1 event-message-block))
  (let ((v0-1 (the-as number (call-parent-method this arg0 arg1))))
    (if (logtest? (penetrate dark-bomb dark-smack) (-> (the-as attack-info (-> arg1 param 1)) penetrate-using))
        (set! v0-1 #x41f00000)
        )
    (the-as float v0-1)
    )
  )

(defmethod damage-enemy! ((this neo-sat) (arg0 object) (arg1 event-message-block))
  (let ((f30-0 (call-parent-method this arg0 arg1)))
    (let ((f28-0 (-> this hit-points))
          (f26-0 (* 30.0 (- 3.0 (the float (+ (-> this current-stage) 1)))))
          )
      (sound-play "sat-hit")
      (when (>= f26-0 f28-0)
        (if (= f28-0 0.0)
            (setup-masks (-> this draw) 0 4)
            )
        (set! f30-0 (- f30-0 (- f26-0 f28-0)))
        (set! (-> this hit-points) f26-0)
        (set! (-> this should-rise?) #t)
        )
      )
    f30-0
    )
  )

(defstate neo-sat-sit-and-spin (neo-sat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('rise-up)
       (+! (-> self current-stage) 1)
       (cond
         ((= (-> self current-stage) 3)
          (+! (-> self current-stage) -1)
          (set! (-> self was-spinning?) #t)
          (go-virtual die)
          )
         (else
           (set! (-> self was-spinning?) #t)
           (go-virtual ground-burst)
           )
         )
       )
      (else
        (enemy-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self active-laser-index) 0)
    (neo-sat-method-209 self)
    (set-time! (-> self state-time))
    (set-time! (-> self new-spin-time))
    (sound-play "sat-whip-out")
    (neo-sat-method-226 self 0)
    (case (-> self current-stage)
      ((1)
       (neo-sat-method-226 self 3)
       )
      ((2)
       (neo-sat-method-226 self 2)
       (neo-sat-method-226 self 4)
       )
      )
    )
  :trans (behavior ()
    (neo-sat-method-210 self)
    (neo-sat-method-211 self)
    (neo-sat-method-228 self)
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

;; WARN: Return type mismatch float vs none.
(defun sparticle-height-set ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((a0-3 (the-as neo-sat (handle->process (-> *alive-neo-sats* (shr (the int (-> arg1 omega)) 16)))))
        (a1-2 (new 'stack-no-clear 'vector))
        )
    (set! (-> a1-2 x) (-> arg2 x))
    (set! (-> a1-2 y) (-> arg2 y))
    (set! (-> a1-2 z) (-> arg2 z))
    (set! (-> a1-2 w) 1.0)
    (when a0-3
      (set! (-> arg2 y) (neo-sat-method-218 a0-3 a1-2))
      (+! (-> arg2 y) 2048.0)
      )
    )
  (none)
  )

(defun spt-func-part-neo-sat-shockwave-hot ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (sparticle-2d-spline-align-instant arg0 arg1 (the-as sprite-vec-data-2d arg2))
  (sparticle-height-set arg0 arg1 (the-as vector arg2))
  (none)
  )

;; WARN: Return type mismatch float vs none.
(defun sparticle-shockwave-set ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((a0-3 (the-as neo-sat (handle->process (-> *alive-neo-sats* (shr (the int (-> arg1 omega)) 16)))))
        (v1-7 #f)
        )
    (if a0-3
        (set! v1-7 (neo-sat-method-223
                     a0-3
                     (-> arg2 launchrot)
                     (the-as int (-> arg1 user-float))
                     (logand (the-as int (-> arg1 omega)) #xffff)
                     )
              )
        )
    (if (not v1-7)
        (set! (-> arg2 coneradius) 0.0)
        )
    )
  (none)
  )

(defmethod neo-sat-method-223 ((this neo-sat) (arg0 vector) (arg1 int) (arg2 int))
  (let ((v1-1 (vector-rotate-around-y! (new 'stack-no-clear 'vector) *z-vector* (* 327.68 (the float arg1))))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (let ((f0-3 (- (-> this current-shockwave-radius) (* 73728.0 (the float arg2)))))
      (if (< 163840.0 f0-3)
          (return #f)
          )
      (vector+float*! s4-0 (-> this shockwave-origin) v1-1 f0-3)
      )
    (set! (-> s4-0 y) (neo-sat-method-218 this s4-0))
    (set! (-> arg0 x) (-> s4-0 x))
    (set! (-> arg0 y) (-> s4-0 y))
    (set! (-> arg0 z) (-> s4-0 z))
    )
  #t
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod neo-sat-method-211 ((this neo-sat))
  (let ((s5-0 (+ (-> this current-stage) 1))
        (f30-0 73728.0)
        )
    (let* ((f28-0 91.022224)
           (f26-0 1092.2667)
           (v1-5 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-6 (the-as number (logior #x3f800000 v1-5)))
           )
      (set! (-> this last-particle-rotate)
            (+ f28-0 (* f26-0 (+ -1.0 (the-as float v1-6))) (-> this last-particle-rotate))
            )
      )
    (let ((f0-6 (-> this last-particle-rotate)))
      (set! (-> this last-particle-rotate) (- f0-6 (* (the float (the int (/ f0-6 2366.578))) 2366.578)))
      )
    (dotimes (s4-0 s5-0)
      (let ((f0-9 (- (-> this current-shockwave-radius) (* f30-0 (the float s4-0)))))
        (when (and (>= f0-9 16384.0) (< f0-9 163840.0))
          (new 'stack-no-clear 'vector)
          (let ((f28-1 (- (-> this current-shockwave-radius) (* f30-0 (the float s4-0))))
                (s3-0 #f)
                )
            (when (< (-> this last-spawned-ring-index) s4-0)
              (sound-play "sat-shockwave")
              (set! (-> this last-spawned-ring-index) s4-0)
              (set! s3-0 #t)
              )
            (dotimes (s2-1 20)
              (let* ((f26-1 (+ (-> this last-particle-rotate) (* 3276.8 (the float s2-1))))
                     (f24-0 -1638.4)
                     (f22-0 3276.8)
                     (v1-25 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                     (v1-26 (the-as number (logior #x3f800000 v1-25)))
                     (f0-17 (+ f24-0 (* f22-0 (+ -1.0 (the-as float v1-26))) f26-1))
                     (s0-0 (vector-rotate-around-y! (new 'stack-no-clear 'vector) *z-vector* f0-17))
                     (s1-0 (new 'stack-no-clear 'vector))
                     )
                (vector+float*! s1-0 (-> this shockwave-origin) s0-0 f28-1)
                (set! (-> s1-0 y) (neo-sat-method-218 this s1-0))
                (set! (-> *part-id-table* 1679 init-specs 3 initial-valuef) (lerp 409.6 2457.6 (* 0.0000061035157 f28-1)))
                (let* ((f26-2 (-> *part-id-table* 1679 init-specs 3 initial-valuef))
                       (f24-1 1.0)
                       (v1-41 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                       (v1-42 (the-as number (logior #x3f800000 v1-41)))
                       )
                  (set! (-> *part-id-table* 1679 init-specs 3 initial-valuef) (* f26-2 (+ f24-1 (+ -1.0 (the-as float v1-42)))))
                  )
                (let ((a2-4 (matrix-f-u-compose (new 'stack-no-clear 'matrix) s0-0 *up-vector*)))
                  (set! (-> a2-4 trans quad) (-> s1-0 quad))
                  (launch-particles (-> *part-id-table* 1679) a2-4 :origin-is-matrix #t)
                  )
                )
              )
            (when s3-0
              (dotimes (s3-2 100)
                (let* ((f26-3 182.04445)
                       (f24-2 -1.8)
                       (f22-1 3.6)
                       (v1-57 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                       (v1-58 (the-as number (logior #x3f800000 v1-57)))
                       (f0-34 (+ (* f26-3 (+ f24-2 (* f22-1 (+ -1.0 (the-as float v1-58))))) (* 655.36 (the float s3-2))))
                       (s1-1 (vector-rotate-around-y! (new 'stack-no-clear 'vector) *z-vector* f0-34))
                       (s2-2 (new 'stack-no-clear 'vector))
                       )
                  (vector+float*! s2-2 (-> this shockwave-origin) s1-1 f28-1)
                  (set! (-> s2-2 y) (neo-sat-method-218 this s2-2))
                  (let ((a2-7 (matrix-f-u-compose (new 'stack-no-clear 'matrix) s1-1 *up-vector*)))
                    (set! (-> a2-7 trans quad) (-> s2-2 quad))
                    (set! (-> *part-id-table* 1680 init-specs 9 initial-valuef)
                          (the-as float (shl (-> this global-neo-sat-index) 16))
                          )
                    (launch-particles (-> *part-id-table* 1680) a2-7 :origin-is-matrix #t)
                    )
                  )
                )
              )
            )
          )
        )
      )
    (set! (-> this last-shockwave-radius) (-> this current-shockwave-radius))
    (+! (-> this current-shockwave-radius) (* 102400.0 (seconds-per-frame)))
    (dotimes (s4-1 (-> this num-yellow-ammo))
      (when (and (>= (-> this current-shockwave-radius) (-> this yellow-ammo-pos s4-1 dist))
                 (< (-> this last-shockwave-radius) (-> this yellow-ammo-pos s4-1 dist))
                 )
        (let ((s3-3 (vector-rotate-around-y! (new 'stack-no-clear 'vector) *z-vector* (-> this yellow-ammo-pos s4-1 angle)))
              )
          (vector-normalize! s3-3 (-> this yellow-ammo-pos s4-1 dist))
          (vector+! s3-3 s3-3 (-> this shockwave-origin))
          (set! (-> s3-3 y) (neo-sat-method-218 this s3-3))
          (birth-pickup-at-point s3-3 (pickup-type ammo-yellow) 10.0 #t *entity-pool* (the-as fact-info #f))
          )
        )
      )
    (let ((f28-2 (vector-vector-xz-distance (-> this root trans) (-> this focus-pos)))
          (s4-2 (the-as object #f))
          )
      (let* ((s3-4 (handle->process (-> this focus handle)))
             (v1-98 (if (type? s3-4 process-focusable)
                        (the-as process-focusable s3-4)
                        )
                    )
             )
        (when v1-98
          (let ((v1-99 (-> v1-98 root)))
            (set! s4-2 (and v1-99 (logtest? (-> (the-as collide-shape-moving v1-99) status) (collide-status on-surface))))
            )
          )
        )
      (when s4-2
        (dotimes (s4-4 s5-0)
          (let ((f0-46 (- (-> this current-shockwave-radius) (* f30-0 (the float s4-4)))))
            (if (and (>= f0-46 16384.0) (< f0-46 163840.0) (>= f0-46 (+ -4096.0 f28-2)) (>= (+ 4096.0 f28-2) f0-46))
                (send-event
                  (handle->process (-> this focus handle))
                  'attack
                  #f
                  (static-attack-info
                    :mask (vehicle-impulse-factor)
                    ((id (new-attack-id)) (damage 1.0) (vehicle-damage-factor 1.0) (vehicle-impulse-factor 1.0) (mode 'generic))
                    )
                  )
                )
            )
          )
        )
      )
    )
  (none)
  )

(defstate neo-sat-drill-impact (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (sound-stop (-> self snd-hover))
    (activate! *camera-smush-control* 1228.8 45 240 1.0 0.9 (-> *display* camera-clock))
    (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 229 (seconds 0.5))
    (send-event (handle->process (-> self warp-handle)) 'turn-off)
    (cond
      ((logtest? (-> *part-group-id-table* 418 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 418))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 418))
        )
      )
    (sound-play "sat-in-ground")
    (set! (-> self root transv quad) (the-as uint128 0))
    (set! (-> self current-shockwave-radius) 16384.0)
    (set-time! (-> self state-time))
    (logior! (-> self enemy-flags) (enemy-flag vulnerable))
    (set! (-> self last-spawned-ring-index) -1)
    (let ((f0-2 (get-remaining-player-ammo (pickup-type ammo-yellow))))
      (set! (-> self num-yellow-ammo) 0)
      (if (>= 55.0 f0-2)
          (+! (-> self num-yellow-ammo) 1)
          )
      (if (>= 35.0 f0-2)
          (+! (-> self num-yellow-ammo) 1)
          )
      (if (>= 15.0 f0-2)
          (+! (-> self num-yellow-ammo) 1)
          )
      (if (>= 5.0 f0-2)
          (+! (-> self num-yellow-ammo) 1)
          )
      )
    (dotimes (gp-3 (-> self num-yellow-ammo))
      (let* ((f30-0 65536.0)
             (v1-70 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-71 (the-as number (logior #x3f800000 v1-70)))
             (f30-1 (* f30-0 (+ -1.0 (the-as float v1-71))))
             (f28-0 32768.0)
             (f26-0 49152.0)
             (v1-76 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-77 (the-as number (logior #x3f800000 v1-76)))
             (f0-10 (+ f28-0 (* f26-0 (+ -1.0 (the-as float v1-77)))))
             )
        (set! (-> self yellow-ammo-pos gp-3 angle) f30-1)
        (set! (-> self yellow-ammo-pos gp-3 dist) f0-10)
        )
      )
    )
  :trans (behavior ()
    (neo-sat-method-211 self)
    (let ((v1-2 450))
      (if (= (-> self current-stage) 2)
          (set! v1-2 675)
          )
      (if (time-elapsed? (-> self state-time) v1-2)
          (go-virtual neo-sat-sit-and-spin)
          )
      )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate neo-sat-drill-attack (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set! (-> self ground-offset) 4096.0)
    (set! (-> self desired-float-height) -163840.0)
    (set! (-> self bob-speed-scalar) 1.0)
    (logior! (-> self focus-status) (focus-status dangerous))
    (set! (-> self root transv quad) (the-as uint128 0))
    (set! (-> self desired-float-height) 16384.0)
    (set! (-> self start-thrust-pos quad) (-> self root trans quad))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (neo-sat-method-220 self)
    (let ((f30-0 (neo-sat-probe-ground self (-> self root trans))))
      (let ((a2-0 (new 'stack-no-clear 'vector)))
        (set! (-> a2-0 quad) (-> self root trans quad))
        (set! (-> a2-0 y) (+ (-> self start-thrust-pos y) (-> self desired-float-height)))
        (cond
          ((< 0.0 (-> self desired-float-height))
           (let* ((f1-4 (* 0.008333334 (the float (- (current-time) (-> self state-time)))))
                  (f1-6 (fmax 0.0 (fmin 1.0 f1-4)))
                  (f28-0 (- 1.0 (* (- 1.0 f1-6) (- 1.0 f1-6))))
                  )
             (vector-lerp! (-> self root trans) (-> self start-thrust-pos) a2-0 f28-0)
             (when (>= f28-0 0.95)
               (set! (-> self desired-float-height) -102400.0)
               (set-time! (-> self state-time))
               (set! (-> self start-thrust-pos quad) (-> self root trans quad))
               )
             )
           )
          (else
            (let* ((f1-11 (* 0.008333334 (the float (- (current-time) (-> self state-time)))))
                   (f0-10 (fmax 0.0 (fmin 1.0 f1-11)))
                   )
              (vector-lerp! (-> self root trans) (-> self start-thrust-pos) a2-0 f0-10)
              )
            )
          )
        )
      (move-to-ground-height self f30-0)
      )
    (if (-> self on-ground?)
        (go-virtual neo-sat-drill-impact)
        )
    (set! (-> self spin-current) 98304.0)
    (quaternion-rotate-y!
      (-> self disc-joint rotation)
      (-> self disc-joint rotation)
      (* (-> self spin-current) (seconds-per-frame))
      )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate neo-sat-laser-attack (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (neo-sat-method-207 self)
    (set! (-> self hit-player?) #f)
    (set! (-> self wander-generate-time) 0)
    (let ((v1-4 (-> self current-stage)))
      (cond
        ((zero? v1-4)
         (set! (-> self max-speed) 32768.0)
         )
        ((= v1-4 1)
         (set! (-> self max-speed) 36864.0)
         )
        ((= v1-4 2)
         (set! (-> self max-speed) 40960.0)
         )
        )
      )
    (set! (-> self fly-speed-scalar) 10.0)
    (set! (-> self was-doing-cone-check?) #f)
    )
  :trans (behavior ()
    (if (-> self hit-player?)
        (go-virtual hostile)
        )
    (seek! (-> self anim-speed) 3.0 (* 0.15 (seconds-per-frame)))
    (when (time-elapsed? (-> self wander-generate-time) (seconds 1.5))
      (let ((s5-0 (new 'stack-no-clear 'vector)))
        (set! (-> s5-0 quad) (-> *x-vector* quad))
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (vector-normalize! s5-0 65536.0)
          (vector-rotate-y! s5-0 s5-0 (-> self offset-angle))
          (let* ((f30-0 -16384.0)
                 (f28-0 32768.0)
                 (v1-16 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                 (v1-17 (the-as number (logior #x3f800000 v1-16)))
                 )
            (set! (-> self offset-angle) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-17))) (-> self offset-angle)))
            )
          (set! (-> self offset-angle) (the float (sar (shl (the int (-> self offset-angle)) 48) 48)))
          (set-time! (-> self wander-generate-time))
          (vector+! gp-0 (-> self focus-pos) s5-0)
          (let ((v1-26 (-> self nav state)))
            (logclear! (-> v1-26 flags) (nav-state-flag directional-mode))
            (logior! (-> v1-26 flags) (nav-state-flag target-poly-dirty))
            (set! (-> v1-26 target-pos quad) (-> gp-0 quad))
            )
          )
        )
      0
      )
    (neo-sat-method-203 self #f)
    (neo-sat-method-233 self)
    (if (-> self was-doing-cone-check?)
        (neo-sat-method-230 self)
        )
    (neo-sat-method-220 self)
    (neo-sat-method-201 self)
    (let* ((v1-41 (-> self current-stage))
           (f30-1 (cond
                    ((zero? v1-41)
                     -10012.444
                     )
                    ((= v1-41 1)
                     -10922.667
                     )
                    (else
                      -11832.889
                      )
                    )
                  )
           )
      (seek! (-> self laser-rotate-angle) f30-1 (* 1820.4445 (seconds-per-frame)))
      (if (and (>= 182.04445 (fabs (- (-> self laser-rotate-angle) f30-1)))
               (let ((v1-50 (- (current-time) (-> self state-time)))
                     (a0-22 (-> self current-stage))
                     )
                 (>= v1-50 (cond
                             ((zero? a0-22)
                              600
                              )
                             ((= a0-22 1)
                              900
                              )
                             (else
                               1200
                               )
                             )
                     )
                 )
               )
          (go neo-sat-drill-halting)
          )
      (let ((gp-1 #t))
        (when (< (-> self laser-rotate-angle) -9102.223)
          (set! gp-1 #f)
          (when (not (-> self was-doing-cone-check?))
            (set! (-> self was-doing-cone-check?) #t)
            (set! (-> self was-player-inside-cone?) (neo-sat-method-232 self (target-pos 0)))
            )
          )
        (dotimes (s5-2 (-> *neo-sat-laser-array* length))
          (neo-sat-method-206 self (-> *neo-sat-laser-array* s5-2 joint) gp-1)
          )
        )
      (let ((f0-24 (lerp 16384.0 32768.0 (/ (fabs (-> self laser-rotate-angle)) (fabs f30-1)))))
        (if (< 32585.955 f0-24)
            (set! f0-24 (lerp 32768.0 49152.0 (* 0.00055555557 (the float (- (current-time) (-> self state-time))))))
            )
        (set! (-> self spin-current) f0-24)
        )
      )
    (quaternion-rotate-y!
      (-> self disc-joint rotation)
      (-> self disc-joint rotation)
      (* (-> self spin-current) (seconds-per-frame))
      )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate die (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self next-lightning-time) 0)
    (sound-play "sat-out-ground")
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-4 nav callback-info) *null-nav-callback-info*)
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
    (logclear! (-> self focus-status) (focus-status dangerous))
    (cond
      ((logtest? (-> *part-group-id-table* 420 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 420))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 420))
        )
      )
    (set-time! (-> self state-time))
    (when (-> self was-spinning?)
      (set! (-> self was-spinning?) #f)
      (sound-play "sat-whip-in")
      )
    )
  :exit (behavior ()
    (dotimes (gp-0 (-> self ropes length))
      (rope-system-method-21 (-> self ropes gp-0))
      )
    )
  :trans (behavior ()
    (when (< (-> self next-lightning-time) (current-time))
      (process-drawable-shock-effect
        self
        (-> *lightning-spec-id-table* 22)
        lightning-probe-callback
        (-> *part-id-table* 160)
        0
        0
        40960.0
        )
      (process-drawable-shock-effect
        self
        (-> *lightning-spec-id-table* 22)
        lightning-probe-callback
        (-> *part-id-table* 160)
        0
        0
        40960.0
        )
      (set! (-> self next-lightning-time) (+ (current-time) (seconds 0.05)))
      )
    (if (not (time-elapsed? (-> self state-time) (seconds 1)))
        (spawn
          (-> self burst-dust-part)
          (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node neo-satellite-lod0-jg arm_top_ring))
          )
        )
    (when (time-elapsed? (-> self state-time) (seconds 0.9))
      (dotimes (gp-1 (-> self ropes length))
        (rope-system-method-21 (-> self ropes gp-1))
        )
      )
    (neo-sat-method-228 self)
    )
  :code (behavior ()
    (set! (-> self play-anim?) #f)
    (ja-channel-push! 1 (seconds 0.1))
    (let ((hand (the-as handle #f)))
      (let ((f28-0 -1.0))
        (ja-no-eval :group! neo-satellite-death-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (let ((f30-0 (ja-frame-num 0)))
            (let ((f0-4 43.0)
                  (f26-0 48.0)
                  )
              (if (and (< f28-0 f0-4) (>= f30-0 f0-4))
                  (sound-play "sat-fall-hit")
                  )
              (when (and (< f28-0 f26-0) (>= f30-0 f26-0))
                (set! (-> self next-lightning-time) (+ (seconds 1000) (current-time)))
                (sound-play "sat-explode")
                (set! hand
                      (process->handle
                        (-> (cond
                              ((logtest? (-> *part-group-id-table* 427 flags) (sp-group-flag sp13))
                               (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                               (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 427))
                               )
                              (else
                                (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                                (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 427))
                                )
                              )
                            0
                            )
                        )
                      )
                )
              )
            (set! f28-0 f30-0)
            )
          (suspend)
          (ja :num! (seek!))
          )
        )
      (send-event (ppointer->process (-> self parent)) 'notify 'die)
      (send-event (handle->process hand) 'die)
      )
    (cond
      ((logtest? (-> *part-group-id-table* 426 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 426))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 426))
        )
      )
    (let ((gp-6 (current-time)))
      (until (time-elapsed? gp-6 (seconds 0.25))
        (suspend)
        )
      (logior! (-> self draw status) (draw-control-status no-draw))
      (until (time-elapsed? gp-6 (seconds 1.5))
        (suspend)
        )
      )
    (go-virtual die-fast)
    )
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate ground-burst (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (sound-play "sat-out-ground")
    (send-event (handle->process (-> self warp-handle)) 'turn-on)
    (cond
      ((logtest? (-> *part-group-id-table* 420 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 420))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 420))
        )
      )
    (let ((v1-40 self))
      (set! (-> v1-40 enemy-flags) (the-as enemy-flag (logclear (-> v1-40 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-40 nav callback-info) *null-nav-callback-info*)
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
    (set! (-> self desired-float-height) 163840.0)
    (set! (-> self bob-speed-scalar) 10.0)
    (neo-sat-method-204 self)
    (set! (-> self ground-offset) 4096.0)
    (set-time! (-> self state-time))
    (logclear! (-> self focus-status) (focus-status dangerous))
    (when (-> self was-spinning?)
      (set! (-> self was-spinning?) #f)
      (sound-play "sat-whip-in")
      )
    (sound-play "sat-hover" :id (-> self snd-hover))
    )
  :exit (behavior ()
    (dotimes (gp-0 (-> self ropes length))
      (rope-system-method-21 (-> self ropes gp-0))
      )
    )
  :trans (behavior ()
    (neo-sat-method-201 self)
    (when (not (time-elapsed? (-> self state-time) (seconds 1)))
      (let* ((f1-2 (* 0.0033333334 (the float (- (current-time) (-> self state-time)))))
             (f1-5 (- 1.0 (* (- 1.0 f1-2) (- 1.0 f1-2))))
             (f0-3 (- 1.0 (* (- 1.0 f1-5) (- 1.0 f1-5))))
             )
        (set! (-> *part-id-table* 1687 init-specs 2 initial-valuef) (fmax 0.0 (lerp 10.0 0.0 f0-3)))
        )
      (spawn (-> self burst-dust-part) (-> self root trans))
      )
    (seek! (-> self desired-float-height) 49152.0 (* 327680.0 (seconds-per-frame)))
    (neo-sat-method-228 self)
    (if (time-elapsed? (-> self state-time) (seconds 1.5))
        (go-virtual hostile)
        )
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate hostile (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (sound-play "sat-arms" :id (-> self snd-arms-chatter))
    (set! (-> self laser-rotate-angle) 0.0)
    (sound-stop (-> self snd-laser-burn))
    (set! (-> self fly-speed-scalar) 1.0)
    (set! (-> self max-speed) 204800.0)
    (set! (-> self active-laser-index) -1)
    (let ((v1-5 self))
      (if (not (logtest? (enemy-flag ef37) (-> v1-5 enemy-flags)))
          (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-5 enemy-flags))))
          )
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-5 enemy-flags))))
      (set! (-> v1-5 nav callback-info) (-> v1-5 enemy-info callback-info))
      )
    0
    (let ((v1-8 (-> self nav)))
      (set! (-> v1-8 target-speed) 4096.0)
      )
    0
    (set-time! (-> self state-time))
    (set! (-> self hit-player?) #f)
    (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
    (set! (-> self wander-generate-time) 0)
    (set! (-> self last-thrust-vec quad) (the-as uint128 0))
    (set! (-> self ground-offset) 40960.0)
    (set! (-> self desired-float-height) 49152.0)
    (set! (-> self bob-speed-scalar) 1.0)
    (ja-channel-push! 1 (seconds 0.5))
    (ja-no-eval :group! neo-satellite-active-ja :num! (loop!) :frame-num 0.0)
    (set! (-> self anim-loop?) #t)
    (set! (-> self play-anim?) #t)
    (set! (-> self anim-speed) 0.6)
    (neo-sat-method-204 self)
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (sound-play "sat-hover" :id (-> self snd-hover))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (set! (-> s5-0 quad) (-> *x-vector* quad))
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (vector-normalize! s5-0 12288.0)
        (vector-rotate-y! s5-0 s5-0 (-> self offset-angle))
        (when (time-elapsed? (-> self wander-generate-time) (seconds 2))
          (let* ((f30-0 -16384.0)
                 (f28-0 32768.0)
                 (v1-10 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                 (v1-11 (the-as number (logior #x3f800000 v1-10)))
                 )
            (set! (-> self offset-angle) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-11))) (-> self offset-angle)))
            )
          (set! (-> self offset-angle) (the float (sar (shl (the int (-> self offset-angle)) 48) 48)))
          (set-time! (-> self wander-generate-time))
          )
        (if (and (time-elapsed? (-> self state-time) (seconds 4))
                 (or (< (vector-vector-xz-distance (-> self root trans) (-> self focus-pos)) 81920.0)
                     (time-elapsed? (-> self state-time) (seconds 7))
                     )
                 )
            (go-virtual neo-sat-laser-attack)
            )
        (vector+! gp-0 (-> self focus-pos) s5-0)
        (let ((v1-34 (-> self nav state)))
          (logclear! (-> v1-34 flags) (nav-state-flag directional-mode))
          (logior! (-> v1-34 flags) (nav-state-flag target-poly-dirty))
          (set! (-> v1-34 target-pos quad) (-> gp-0 quad))
          )
        )
      )
    0
    (neo-sat-method-200 self)
    (neo-sat-method-201 self)
    (neo-sat-method-233 self)
    )
  :code sleep-code
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

(defstate sat-idle (neo-sat)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((v1-0 self))
      (set! (-> v1-0 enemy-flags) (the-as enemy-flag (logclear (-> v1-0 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-0 nav callback-info) *null-nav-callback-info*)
      )
    0
    (spawn-shield self)
    )
  :trans (behavior ()
    (if (< (vector-vector-distance (-> self root trans) (-> self focus-pos)) 491520.0)
        (go-virtual ground-burst)
        )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! neo-satellite-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

;; WARN: Return type mismatch vector vs none.
(defmethod nav-enemy-method-161 ((this neo-sat) (arg0 nav-control))
  (when (logtest? (enemy-flag ef37) (-> this enemy-flags))
    (let ((a2-1 (-> arg0 state)))
      (set! (-> this nav-vector quad) (-> a2-1 travel quad))
      )
    (vector-normalize! (-> this nav-vector) 1.0)
    )
  (none)
  )

;; WARN: Return type mismatch (pointer process) vs (pointer neo-sat).
(defun spawn-neo-sat ((arg0 vector) (arg1 quaternion) (arg2 process))
  (let ((s5-0 (new 'stack-no-clear 'neo-sat-init-params)))
    (set! (-> s5-0 pos quad) (-> arg0 quad))
    (quaternion-copy! (-> s5-0 quat) arg1)
    (process-spawn neo-sat s5-0 :name "neo-sat" :to arg2 :stack-size #x14000)
    )
  )

(defmethod normalize-heading! ((this neo-sat) (arg0 nav-control))
  0
  (none)
  )

(defmethod run-logic? ((this neo-sat))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

(defmethod relocate ((this neo-sat) (offset int))
  (if (nonzero? (-> this tentacle))
      (&+! (-> this tentacle) offset)
      )
  (dotimes (v1-4 (-> this ropes length))
    (if (nonzero? (-> this ropes v1-4))
        (&+! (-> this ropes v1-4) offset)
        )
    )
  (if (nonzero? (-> this ropes))
      (&+! (-> this ropes) offset)
      )
  (if (nonzero? (-> this damage-part1))
      (&+! (-> this damage-part1) offset)
      )
  (if (nonzero? (-> this damage-part2))
      (&+! (-> this damage-part2) offset)
      )
  (if (nonzero? (-> this damage-part3))
      (&+! (-> this damage-part3) offset)
      )
  (if (nonzero? (-> this burst-dust-part))
      (&+! (-> this burst-dust-part) offset)
      )
  (if (nonzero? (-> this antenna-explode-part))
      (&+! (-> this antenna-explode-part) offset)
      )
  (call-parent-method this offset)
  )

(defpart 1712
  :init-specs ((:texture (pal-lightning level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 1713
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defpart 1714
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

;; WARN: Function (method 227 neo-sat) has a return type of none, but the expression builder found a return statement.
(defmethod neo-sat-method-227 ((this neo-sat) (arg0 int))
  (if (or (not (and (-> this next-state) (= (-> this next-state name) 'neo-sat-sit-and-spin)))
          (not (time-elapsed? (-> this state-time) (seconds 1.5)))
          )
      (return 0)
      )
  (let ((s5-0 (-> this ropes (-> *neo-sat-laser-array* arg0 rope-index))))
    (dotimes (s4-0 (+ (-> s5-0 knots length) -1))
      (let ((v1-18 (-> s5-0 knots data s4-0))
            (a0-8 (-> s5-0 knots data (+ s4-0 1)))
            (s3-0 (new 'stack-no-clear 'collide-query))
            )
        (set! (-> s3-0 start-pos quad) (-> v1-18 pos quad))
        (vector-! (-> s3-0 move-dist) (the-as vector a0-8) (the-as vector v1-18))
        (let ((v1-19 s3-0))
          (set! (-> v1-19 radius) 40.96)
          (set! (-> v1-19 collide-with) (collide-spec jak player-list))
          (set! (-> v1-19 ignore-process0) this)
          (set! (-> v1-19 ignore-process1) #f)
          (set! (-> v1-19 ignore-pat)
                (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                )
          (set! (-> v1-19 action-mask) (collide-action solid))
          )
        (let ((f0-1 (fill-and-probe-using-line-sphere *collide-cache* s3-0)))
          (if (>= f0-1 0.0)
              (vector-float*! (-> s3-0 move-dist) (-> s3-0 move-dist) f0-1)
              (set! (-> s3-0 best-other-tri collide-ptr) #f)
              )
          )
        (cond
          ((and (-> s3-0 best-other-tri collide-ptr) (let ((s2-0 (-> s3-0 best-other-tri collide-ptr)))
                                                       (if (type? s2-0 collide-shape-prim-sphere)
                                                           s2-0
                                                           )
                                                       )
                )
           (let* ((s2-1 (-> s3-0 best-other-tri collide-ptr))
                  (s2-2 (-> (the-as collide-shape-prim-sphere (if (type? s2-1 collide-shape-prim-sphere)
                                                                  (the-as collide-shape-prim-sphere s2-1)
                                                                  )
                                    )
                            cshape
                            process
                            )
                        )
                  (s1-0 (the-as object #f))
                  )
             (let* ((s0-0 s2-2)
                    (v1-29 (if (type? s0-0 process-focusable)
                               s0-0
                               )
                           )
                    )
               (when v1-29
                 (let ((v1-30 (-> v1-29 root)))
                   (set! s1-0 (and v1-30 (logtest? (-> (the-as collide-shape-moving v1-30) status) (collide-status on-surface))))
                   )
                 )
               )
             (when s1-0
               (send-event
                 s2-2
                 'attack
                 #f
                 (static-attack-info
                   :mask (vehicle-impulse-factor)
                   ((id (new-attack-id)) (damage 1.0) (vehicle-damage-factor 1.0) (vehicle-impulse-factor 1.0) (mode 'generic))
                   )
                 )
               (send-event this 'notify 'attack s2-2)
               )
             )
           (vector-normalize! (-> s3-0 move-dist) (+ 2048.0 (vector-length (-> s3-0 move-dist))))
           )
          (else
            (set! (-> *part-id-table* 1714 init-specs 2 initial-valuef) 4096.0)
            )
          )
        (set! (-> *part-id-table* 1712 init-specs 4 initial-valuef) (vector-length (-> s3-0 move-dist)))
        )
      )
    )
  (none)
  )

(defmethod neo-sat-method-206 ((this neo-sat) (arg0 int) (arg1 symbol))
  (let ((v1-2 (the int (* 75.0 (/ 65536.0 (-> this spin-current))))))
    (when (time-elapsed? (-> this last-play-laser-time) v1-2)
      (sound-play "sat-laser")
      (set-time! (-> this last-play-laser-time))
      )
    )
  (sound-play "sat-ground-burn" :id (-> this snd-laser-burn))
  (let ((s5-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data arg0)))
        (s4-1 (new 'stack-no-clear 'vector))
        (f30-0 491520.0)
        (s2-1 (if arg1
                  1091
                  65
                  )
              )
        )
    (set! (-> s4-1 quad) (-> this node-list data arg0 bone transform fvec quad))
    (vector-normalize! s4-1 1.0)
    (let ((s3-1 (new 'stack-no-clear 'collide-query)))
      (set! (-> s3-1 start-pos quad) (-> s5-1 quad))
      (vector-float*! (-> s3-1 move-dist) s4-1 f30-0)
      (let ((v1-16 s3-1))
        (set! (-> v1-16 radius) 4096.0)
        (set! (-> v1-16 collide-with) (the-as collide-spec s2-1))
        (set! (-> v1-16 ignore-process0) this)
        (set! (-> v1-16 ignore-process1) #f)
        (set! (-> v1-16 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-16 action-mask) (collide-action solid))
        )
      (let ((f0-4 (fill-and-probe-using-line-sphere *collide-cache* s3-1)))
        (if (>= f0-4 0.0)
            (vector-float*! (-> s3-1 move-dist) (-> s3-1 move-dist) f0-4)
            (set! (-> s3-1 best-other-tri collide-ptr) #f)
            )
        )
      (cond
        ((and (-> s3-1 best-other-tri collide-ptr) (let ((s2-2 (-> s3-1 best-other-tri collide-ptr)))
                                                     (if (type? s2-2 collide-shape-prim-sphere)
                                                         s2-2
                                                         )
                                                     )
              )
         (let* ((s2-3 (-> s3-1 best-other-tri collide-ptr))
                (s2-4 (-> (the-as collide-shape-prim-sphere (if (type? s2-3 collide-shape-prim-sphere)
                                                                (the-as collide-shape-prim-sphere s2-3)
                                                                )
                                  )
                          cshape
                          process
                          )
                      )
                )
           (send-event
             s2-4
             'attack
             #f
             (static-attack-info
               :mask (vehicle-impulse-factor)
               ((id (new-attack-id)) (damage 1.0) (vehicle-damage-factor 1.0) (vehicle-impulse-factor 1.0) (mode 'shock))
               )
             )
           (send-event this 'notify 'attack s2-4)
           )
         (vector-normalize! (-> s3-1 move-dist) (+ 2048.0 (vector-length (-> s3-1 move-dist))))
         )
        (else
          (set! (-> *part-id-table* 1714 init-specs 2 initial-valuef) 4096.0)
          )
        )
      (vector+float*! (-> s3-1 move-dist) (-> s3-1 move-dist) s4-1 4096.0)
      (set! (-> *part-id-table* 1712 init-specs 4 initial-valuef) (vector-length (-> s3-1 move-dist)))
      (draw-beam (-> *part-id-table* 1712) s5-1 (-> s3-1 move-dist) #f)
      (let ((gp-1 (matrix-f-u-compose
                    (new 'stack-no-clear 'matrix)
                    (vector-cross! (new 'stack-no-clear 'vector) s4-1 *up-vector*)
                    *up-vector*
                    )
                  )
            )
        (vector+! (-> gp-1 trans) (-> s3-1 move-dist) s5-1)
        (launch-particles :system *sp-particle-system-3d* (-> *part-id-table* 1681) gp-1 :origin-is-matrix #t)
        (launch-particles (-> *part-id-table* 1683) gp-1 :origin-is-matrix #t)
        (launch-particles (-> *part-id-table* 1684) gp-1 :origin-is-matrix #t)
        )
      )
    )
  (none)
  )

(defmethod neo-sat-method-212 ((this neo-sat) (arg0 vector) (arg1 vector))
  (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg0 (-> this shockwave-origin))))
    (set! (-> arg1 x) (+ 163840.0 (-> v1-1 x)))
    (set! (-> arg1 y) (+ 163840.0 (-> v1-1 z)))
    )
  arg1
  )

(defmethod neo-sat-method-215 ((this neo-sat) (arg0 float))
  (* 0.000108506945 arg0)
  )

(defmethod neo-sat-method-216 ((this neo-sat) (arg0 float))
  (* 0.000108506945 arg0)
  )

(defmethod neo-sat-method-213 ((this neo-sat) (arg0 float))
  0
  (let ((a0-1 (the int (neo-sat-method-215 this arg0))))
    (max 0 (min 34 a0-1))
    )
  )

(defmethod neo-sat-method-214 ((this neo-sat) (arg0 float))
  0
  (let ((a0-1 (the int (neo-sat-method-216 this arg0))))
    (max 0 (min 34 a0-1))
    )
  )

(defmethod neo-sat-method-217 ((this neo-sat) (arg0 int) (arg1 int))
  (+ arg0 (* 35 arg1))
  )

(defun compute-xz-pos ((arg0 neo-sat) (arg1 int) (arg2 int) (arg3 vector))
  (let ((f0-1 (+ -163840.0 (* 9216.0 (the float arg1))))
        (f1-3 (+ -163840.0 (* 9216.0 (the float arg2))))
        (v1-4 (new 'stack-no-clear 'vector))
        )
    (set-vector! v1-4 f0-1 0.0 f1-3 1.0)
    (vector+! arg3 (-> arg0 shockwave-origin) v1-4)
    )
  arg3
  )

(defmethod neo-sat-method-218 ((this neo-sat) (arg0 vector))
  (local-vars (sv-32 int) (sv-40 int) (sv-48 int) (sv-56 int))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (neo-sat-method-212 this arg0 s5-0)
    (set! sv-32 (neo-sat-method-213 this (-> s5-0 x)))
    (set! sv-40 (neo-sat-method-213 this (+ 9216.0 (-> s5-0 x))))
    (set! sv-48 (neo-sat-method-214 this (-> s5-0 y)))
    (set! sv-56 (neo-sat-method-214 this (+ 9216.0 (-> s5-0 y))))
    (let* ((f26-0 (-> this hashed-heights (neo-sat-method-217 this sv-32 sv-48)))
           (f24-0 (-> this hashed-heights (neo-sat-method-217 this sv-32 sv-56)))
           (f30-0 (-> this hashed-heights (neo-sat-method-217 this sv-40 sv-48)))
           (f28-0 (-> this hashed-heights (neo-sat-method-217 this sv-40 sv-56)))
           (f26-1 (lerp-scale f26-0 f24-0 (neo-sat-method-216 this (-> s5-0 y)) (the float sv-48) (the float sv-56)))
           (f0-16 (lerp-scale f30-0 f28-0 (neo-sat-method-216 this (-> s5-0 y)) (the float sv-48) (the float sv-56)))
           )
      (lerp-scale f26-1 f0-16 (neo-sat-method-215 this (-> s5-0 x)) (the float sv-32) (the float sv-40))
      )
    )
  )

;; ERROR: Stack slot load at 16 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 32 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 48 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 64 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 16 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 32 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 48 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 64 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 16 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 32 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 48 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 64 mismatch: defined as size 4, got size 16
(defmethod neo-sat-method-222 ((this neo-sat) (arg0 object) (arg1 vector))
  (local-vars (sv-16 float) (sv-32 float) (sv-48 float) (sv-64 float))
  (let* ((s4-0 (neo-sat-method-213 this (-> arg1 x)))
         (s3-0 (neo-sat-method-213 this (+ 9216.0 (-> arg1 x))))
         (s2-0 (neo-sat-method-214 this (-> arg1 y)))
         (s1-0 (neo-sat-method-214 this (+ 9216.0 (-> arg1 y))))
         (f26-0 (-> this hashed-heights (neo-sat-method-217 this s4-0 s2-0)))
         (f24-0 (-> this hashed-heights (neo-sat-method-217 this s4-0 s1-0)))
         (f30-0 (-> this hashed-heights (neo-sat-method-217 this s3-0 s2-0)))
         (f28-0 (-> this hashed-heights (neo-sat-method-217 this s3-0 s1-0)))
         (s0-0 lerp-scale)
         )
    (set! sv-16 f26-0)
    (set! sv-32 f24-0)
    (let* ((a2-5 (neo-sat-method-216 this (-> arg1 y)))
           (a3-0 (the float s2-0))
           (t0-0 (the float s1-0))
           (f26-1 (s0-0 sv-16 sv-32 a2-5 a3-0 t0-0))
           (s0-1 lerp-scale)
           )
      (set! sv-48 f30-0)
      (set! sv-64 f28-0)
      (let* ((a2-6 (neo-sat-method-216 this (-> arg1 y)))
             (a3-1 (the float s2-0))
             (t0-1 (the float s1-0))
             (f0-20 (s0-1 sv-48 sv-64 a2-6 a3-1 t0-1))
             )
        (lerp-scale f26-1 f0-20 (neo-sat-method-215 this (-> arg1 x)) (the float s4-0) (the float s3-0))
        )
      )
    )
  )

(defmethod deactivate ((this neo-sat))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (set! (-> *alive-neo-sats* (-> this global-neo-sat-index)) (the-as handle #f))
  (dotimes (s5-0 3)
    (sound-stop (-> this snd-whips-loop s5-0))
    )
  (sound-stop (-> this snd-laser-burn))
  (sound-stop (-> this snd-arms-chatter))
  (sound-stop (-> this snd-hover))
  (if (nonzero? (-> this damage-part1))
      (kill-particles (-> this damage-part1))
      )
  (if (nonzero? (-> this damage-part2))
      (kill-particles (-> this damage-part2))
      )
  (if (nonzero? (-> this damage-part3))
      (kill-particles (-> this damage-part3))
      )
  (if (nonzero? (-> this burst-dust-part))
      (kill-particles (-> this burst-dust-part))
      )
  (if (nonzero? (-> this antenna-explode-part))
      (kill-particles (-> this antenna-explode-part))
      )
  (call-parent-method this)
  (none)
  )

(defmethod neo-sat-method-221 ((this neo-sat))
  (let ((s5-0 0)
        (s4-0 1224)
        )
    (while (>= s4-0 s5-0)
      (let ((a1-0 (mod s5-0 35))
            (a2-0 (/ s5-0 35))
            )
        (+ 16384.0 (* 9216.0 (the float a1-0)))
        (let ((s3-0 (compute-xz-pos this a1-0 a2-0 (new 'stack-no-clear 'vector))))
          (new 'stack-no-clear 'vector)
          (set! (-> s3-0 y) (neo-sat-method-218 this s3-0))
          (add-debug-x #t (bucket-id debug) s3-0 *color-blue*)
          (set! (-> s3-0 y) (-> this hashed-heights s5-0))
          )
        )
      (+! s5-0 1)
      )
    )
  #f
  )

(defmethod neo-sat-method-220 ((this neo-sat))
  (dotimes (s5-0 8)
    (if (>= (-> this current-height-probe-index) 1225)
        (return 0)
        )
    (let* ((a1-0 (mod (-> this current-height-probe-index) 35))
           (a2-0 (/ (-> this current-height-probe-index) 35))
           (s4-0 (compute-xz-pos this a1-0 a2-0 (new 'stack-no-clear 'vector)))
           (f0-0 (neo-sat-probe-ground this s4-0))
           )
      (set! (-> this hashed-heights (-> this current-height-probe-index)) f0-0)
      (set! (-> s4-0 y) f0-0)
      )
    (+! (-> this current-height-probe-index) 1)
    )
  (the-as int #f)
  )

(defun neo-sat-inside-cone? ((arg0 vector) (arg1 float) (arg2 vector) (arg3 vector))
  (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) arg3 arg0)))
    0.0
    (vector-normalize! s5-1 1.0)
    (let ((f0-2 (vector-dot arg2 s5-1)))
      (< (acos f0-2) (- 16384.0 arg1))
      )
    )
  )

(defmethod neo-sat-method-232 ((this neo-sat) (arg0 vector))
  (let* ((s2-0
           (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> *neo-sat-laser-array* 0 joint)))
           )
         (f28-0 (vector-vector-xz-distance (-> this root trans) s2-0))
         (f30-0 (fabs (-> this laser-rotate-angle)))
         (s4-0 (new 'stack-no-clear 'vector))
         )
    0.0
    (let ((s3-1 (vector-float*! (new 'stack-no-clear 'vector) *up-vector* -1.0)))
      (let ((f0-4 (* f28-0 (tan f30-0))))
        (set-vector! s4-0 (-> this root trans x) (+ (-> s2-0 y) f0-4) (-> this root trans z) 1.0)
        )
      (neo-sat-inside-cone? s4-0 f30-0 s3-1 arg0)
      )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod neo-sat-method-230 ((this neo-sat))
  (let ((s4-0 (-> this was-player-inside-cone?))
        (s5-1 (neo-sat-method-232 this (target-pos 0)))
        )
    (let ((v1-1 s5-1))
      (when (or (and s4-0 (not v1-1)) (and v1-1 (not s4-0)))
        (send-event
          (handle->process (-> this focus handle))
          'attack
          #f
          (static-attack-info
            :mask (vehicle-impulse-factor)
            ((id (new-attack-id)) (damage 1.0) (vehicle-damage-factor 1.0) (vehicle-impulse-factor 1.0) (mode 'shock))
            )
          )
        (send-event this 'notify 'attack (handle->process (-> this focus handle)))
        )
      )
    (set! (-> this was-player-inside-cone?) s5-1)
    )
  (none)
  )

(defskelgroup skel-neo-sat-shield neo-satellite-shield neo-satellite-shield-lod0-jg neo-satellite-shield-idle-ja
              ((neo-satellite-shield-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

(deftype neo-sat-shield (process-drawable)
  ()
  (:state-methods
    active
    turning-on
    turning-off
    hit
    disabled
    )
  (:methods
    (neo-sat-shield-method-25 (_type_) none)
    )
  )


;; WARN: Return type mismatch quaternion vs none.
(defmethod neo-sat-shield-method-25 ((this neo-sat-shield))
  (let* ((s5-0 (ppointer->process (-> this parent)))
         (a0-2 (if (type? s5-0 process-focusable)
                   s5-0
                   )
               )
         )
    (set! (-> this root trans quad) (-> (the-as process-focusable a0-2) root trans quad))
    )
  (quaternion-identity! (-> this root quat))
  (let ((s5-1 (-> (math-camera-matrix) fvec)))
    0.0
    (set! (-> s5-1 y) 0.0)
    (vector-normalize! s5-1 1.0)
    (let ((f0-2 (vector-y-angle s5-1)))
      (quaternion-rotate-y! (-> this root quat) (-> this root quat) (+ 32768.0 f0-2))
      )
    )
  (none)
  )

(defstate hit (neo-sat-shield)
  :virtual #t
  :trans (behavior ()
    (neo-sat-shield-method-25 self)
    )
  :code (behavior ()
    (ja-no-eval :group! neo-satellite-shield-hit-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-virtual active)
    )
  :post (behavior ()
    (ja-post)
    )
  )

(defstate turning-off (neo-sat-shield)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status force-fade warp-cross-fade))
    (set! (-> self draw force-fade) (the-as uint 0))
    0
    )
  :trans (behavior ()
    (neo-sat-shield-method-25 self)
    )
  :code (behavior ()
    (ja-no-eval :group! neo-satellite-shield-end-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (let ((f0-6 (/ (ja-frame-num 0) (the float (ja-num-frames 0)))))
        (set! (-> self draw force-fade) (the-as uint (the int (lerp 0.0 128.0 f0-6))))
        )
      (suspend)
      (ja :num! (seek!))
      )
    (set! (-> self draw force-fade) (the-as uint 128))
    (go-virtual disabled)
    )
  :post (behavior ()
    (ja-post)
    )
  )

(defstate turning-on (neo-sat-shield)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status force-fade warp-cross-fade))
    )
  :trans (behavior ()
    (neo-sat-shield-method-25 self)
    )
  :code (behavior ()
    (ja-no-eval :group! neo-satellite-shield-start-ja :num! (seek! max 0.3) :frame-num 0.0)
    (until (ja-done? 0)
      (let ((f0-6 (/ (ja-frame-num 0) (the float (ja-num-frames 0)))))
        (set! (-> self draw force-fade) (the-as uint (the int (lerp 128.0 0.0 f0-6))))
        )
      (suspend)
      (ja :num! (seek! max 0.3))
      )
    (set! (-> self draw force-fade) (the-as uint 0))
    (go-virtual active)
    )
  :post (behavior ()
    (ja-post)
    )
  )

(defstate disabled (neo-sat-shield)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('turn-on)
       (go-virtual turning-on)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    )
  :code sleep-code
  )

(defstate active (neo-sat-shield)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hit)
       (go-virtual hit)
       )
      (('turn-off)
       (go-virtual turning-off)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status force-fade warp-cross-fade))
    (set! (-> self draw force-fade) (the-as uint 0))
    0
    )
  :trans (behavior ()
    (neo-sat-shield-method-25 self)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (until #f
      (ja-no-eval :group! neo-satellite-shield-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (ja-post)
    )
  )

(defbehavior neo-sat-shield-init-by-other neo-sat-shield ()
  (stack-size-set! (-> self main-thread) 64)
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-neo-sat-shield" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (go-virtual active)
  )

(defmethod spawn-shield ((this neo-sat))
  (set! (-> this warp-handle) (the-as handle #f))
  (let ((s5-0 (get-process *default-dead-pool* neo-sat-shield #x4000 1)))
    (set! (-> this warp-handle)
          (process->handle
            (-> (when s5-0
                  (let ((t9-1 (method-of-type neo-sat-shield activate)))
                    (t9-1 (the-as neo-sat-shield s5-0) this "neo-sat-shield" (the-as pointer #x70004000))
                    )
                  (run-now-in-process s5-0 neo-sat-shield-init-by-other)
                  (-> s5-0 ppointer)
                  )
                0
                )
            )
          )
    )
  (none)
  )

(defmethod get-trans ((this neo-sat) (arg0 int))
  "Get the `trans` for this process."
  (cond
    ((= arg0 3)
     (vector+float*! *neo-sat-focus-pos* (-> this root trans) *up-vector* 12288.0)
     *neo-sat-focus-pos*
     )
    (else
      (call-parent-method this arg0)
      )
    )
  )

;; WARN: Return type mismatch int vs search-info-flag.
(defmethod process-mask->search-info-flag ((this neo-sat))
  (let ((v0-0 0))
    (if (!= (-> this hit-points) 0.0)
        (set! v0-0 (logior (logior v0-0 16) 8))
        )
    (the-as search-info-flag v0-0)
    )
  )
