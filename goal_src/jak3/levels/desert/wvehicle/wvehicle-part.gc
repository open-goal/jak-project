;;-*-Lisp-*-
(in-package goal)

;; name: wvehicle-part.gc
;; name in dgo: wvehicle-part
;; dgos: LPATK, LFACCAR, WASALL

(define-extern *range-wv-wsplash-color* curve-color-fast)
(define-extern *range-wv-wsplash-alpha* curve2d-fast)
(define-extern *range-wv-wsplash-scale-x* curve2d-fast)
(define-extern *range-wv-wsplash-scale-y* curve2d-fast)
(define-extern *curve-wv-wsplash-alpha* curve2d-fast)
(define-extern *curve-wv-wsplash-scale-x* curve2d-fast)
(define-extern *curve-wv-wsplash-scale-y* curve2d-fast)
(define-extern *range-wv-splash-color* curve-color-fast)
(define-extern *range-wv-splash-alpha* curve2d-fast)
(define-extern *range-wv-splash-scale-x* curve2d-fast)
(define-extern *range-wv-splash-scale-y* curve2d-fast)
(define-extern *curve-wv-splash-alpha* curve2d-fast)
(define-extern *curve-wv-splash-scale-x* curve2d-fast)
(define-extern *curve-wv-splash-scale-y* curve2d-fast)
(define-extern *curve-toad-linear-up-red* curve2d-piecewise)
(define-extern *trail-color-curve-toad-grenade* curve-color-fast)
(define-extern *curve-grenade-linear-toad-trail* curve2d-fast)
(define-extern *toad-grenade-trail* light-trail-composition)

;; DECOMP BEGINS

(def-mips2c sparticle-motion-blur-dirt (function sparticle-system sparticle-cpuinfo vector none))

;; WARN: Return type mismatch float vs none.
(defun spt-birth-func-brightness-buggy-rocks ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 51) 200))
        (s3-0 (logand 0 (rand-uint31-gen *random-generator*)))
        (s4-0 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 20))
        (v1-6 (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 11) 60))
        )
    (set! (-> arg2 rotate-x) (the float (- s5-0 (the-as int s3-0))))
    (set! (-> arg2 rotate-y) (the float (- s5-0 s4-0)))
    (set! (-> arg2 rotate-z) (the float (- s5-0 v1-6)))
    )
  (none)
  )

(defpart 953
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-buggy-rocks)
    (:num 1.0)
    (:x (meters 0) (meters 0.2))
    (:scale-x (meters 0.1) (meters 0.2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.033333335) (meters 0.01))
    (:rotvel-z (degrees -2.4) (degrees 4.8))
    (:accel-y (meters -0.001))
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-x (degrees -5) (degrees 10))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defun spt-birth-func-part-buggy-rocks ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (spt-birth-func-brightness-buggy-rocks arg0 arg1 arg2)
  (none)
  )

(defpart 954
  :init-specs ((:texture (rockbit01 level-default-sprite))
    (:birth-func 'spt-birth-func-part-dbuggy-debris)
    (:num 1.0)
    (:x (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 1))
    (:r 200.0)
    (:g 200.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-y (meters 0.033333335))
    (:rotvel-z (degrees -2.4) (degrees 4.8))
    (:accel-y (meters -0.0016666667) (meters -0.00066666666))
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #x408b00
                       #x408c00
                       #x40a100
                       #x40a200
                       #x40a300
                       #x40a400
                       #x40a500
                       #x40a600
                       #x40a700
                       #x40a800
                       #x40a900
                       #x40aa00
                       #x40ab00
                       #x40ac00
                       #x40ad00
                       #x40ae00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:conerot-z (degrees -5) (degrees 10))
    (:rotate-y (degrees 0))
    )
  )

(defun spt-birth-func-part-dbuggy-debris ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo) (arg3 object) (arg4 object))
  (birth-func-texture-group-2d arg0 arg1 arg2 arg3 arg4)
  (birth-func-set-vel-2d arg0 arg1 arg2)
  (spt-birth-func-brightness-buggy-rocks arg0 arg1 arg2)
  (none)
  )

(defpart 955
  :init-specs ((:texture (water-drops level-default-sprite))
    (:birth-func 'birth-func-set-vel)
    (:num 1.0)
    (:x (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-y (meters 0.033333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.0016666667) (meters -0.00066666666))
    (:friction 0.96)
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-z (degrees -5) (degrees 10))
    (:rotate-y (degrees 0))
    )
  )

(defpart 956
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.05)
    (:scale-x (meters 0.5))
    (:scale-y (meters 0.5))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 16.0 16.0)
    (:scalevel-x (meters 0.008333334) (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.07111111 -0.07111111)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-part-wv-water-splash
  :id 226
  :duration (seconds 5)
  :flags (sp0)
  :bounds (static-bspherem 0 -12 0 14)
  :parts ((sp-item 957 :fade-after (meters 60) :flags (sp7) :period (seconds 10) :length (seconds 0.2))
    (sp-item 958 :fade-after (meters 60) :flags (sp7) :period (seconds 10) :length (seconds 0.067) :offset 125)
    (sp-item 959 :fade-after (meters 60) :flags (is-3d sp7) :period (seconds 10) :length (seconds 0.067))
    (sp-item 960 :fade-after (meters 60) :flags (is-3d sp7) :period (seconds 10) :length (seconds 0.167) :offset 125)
    )
  )

(defpart 957
  :init-specs ((:texture (splash level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 5.0)
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-z (meters 0.016666668))
    (:friction 0.96)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 set-conerot))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-wv-wsplash-color* (new 'static 'curve-color-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'inline-array vector 4
                                       (new 'static 'vector :x 128.0 :y 158.0 :z 128.0 :w 128.0)
                                       (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                       (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                       (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
                                       )
                                     :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *range-wv-wsplash-alpha* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                     :ys (new 'static 'vector :x 64.0 :y 128.0 :z 129.0 :w 130.0)
                                     :one-over-x-deltas (new 'static 'vector :x 64.0 :y 1.0 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *range-wv-wsplash-scale-x* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 0.5 :y 1.0 :z 2.0 :w 3.0)
                                       :one-over-x-deltas (new 'static 'vector :x 0.5 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-wv-wsplash-scale-y* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-wv-wsplash-alpha* (new 'static 'curve2d-fast
                                     :xs (new 'static 'vector :y -0.1 :z -1.0 :w -2.0)
                                     :ys (new 'static 'vector :y 1.0 :w 1.0)
                                     :one-over-x-deltas (new 'static 'vector :x 10.0 :y -1.1111112 :z 1.0 :w 1.0)
                                     )
          )
    )

(if #t
    (set! *curve-wv-wsplash-scale-x* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-wv-wsplash-scale-y* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.4 :z -0.7 :w -1.0)
                                       :ys (new 'static 'vector :y 2.0 :z 0.5)
                                       :one-over-x-deltas (new 'static 'vector :x 5.0 :y -5.0000005 :z -1.6666666 :w 1.0)
                                       )
          )
    )

(define *part-wv-water-splash-curve-settings*
  (new 'static 'particle-curve-settings :lifetime-base (seconds 0.95) :lifetime-offset (seconds 0.1))
  )

(set! (-> *part-id-table* 957 init-specs 13 initial-valuef)
      (the-as float *part-wv-water-splash-curve-settings*)
      )

(set! (-> *part-wv-water-splash-curve-settings* color-start) *range-wv-wsplash-color*)

(set! (-> *part-wv-water-splash-curve-settings* alpha-start) *range-wv-wsplash-alpha*)

(set! (-> *part-wv-water-splash-curve-settings* scale-x-start) *range-wv-wsplash-scale-x*)

(set! (-> *part-wv-water-splash-curve-settings* scale-y-start) *range-wv-wsplash-scale-y*)

(set! (-> *part-wv-water-splash-curve-settings* r-scalar) #f)

(set! (-> *part-wv-water-splash-curve-settings* g-scalar) #f)

(set! (-> *part-wv-water-splash-curve-settings* b-scalar) #f)

(set! (-> *part-wv-water-splash-curve-settings* a-scalar) *curve-wv-wsplash-alpha*)

(set! (-> *part-wv-water-splash-curve-settings* scale-x-scalar) *curve-wv-wsplash-scale-x*)

(set! (-> *part-wv-water-splash-curve-settings* scale-y-scalar) *curve-wv-wsplash-scale-y*)

(defpart 958
  :init-specs ((:texture (splash level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 2.0)
    (:scale-x (meters 1))
    (:scale-y (meters 1))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 set-conerot))
    (:userdata 0.0)
    (:func 'live-func-curve)
    )
  )

(if #t
    (set! *range-wv-splash-color* (new 'static 'curve-color-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'inline-array vector 4
                                      (new 'static 'vector :x 128.0 :y 128.0 :z 110.0 :w 128.0)
                                      (new 'static 'vector :x 255.0 :y 255.0 :z 235.0 :w 128.0)
                                      (new 'static 'vector :x 255.0 :y 255.0 :z 235.0 :w 128.0)
                                      (new 'static 'vector :x 255.0 :y 255.0 :z 235.0 :w 128.0)
                                      )
                                    :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *range-wv-splash-alpha* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 64.0 :y 128.0 :z 129.0 :w 130.0)
                                    :one-over-x-deltas (new 'static 'vector :x 64.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *range-wv-splash-scale-x* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                      :ys (new 'static 'vector :x 1.0 :y 5.0 :z 6.0 :w 7.0)
                                      :one-over-x-deltas (new 'static 'vector :x 4.0 :y 1.0 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *range-wv-splash-scale-y* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                      :ys (new 'static 'vector :x 1.0 :y 2.0 :z 3.0 :w 4.0)
                                      :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *curve-wv-splash-alpha* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.1 :z -0.7 :w -1.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.0)
                                    :one-over-x-deltas (new 'static 'vector :x 10.0 :z -3.3333333 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *curve-wv-splash-scale-x* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -0.3 :z -1.0 :w -2.0)
                                      :ys (new 'static 'vector :x 1.0 :y 0.15 :w 1.0)
                                      :one-over-x-deltas (new 'static 'vector :x -2.8333333 :y -0.21428573 :z 1.0 :w 1.0)
                                      )
          )
    )

(if #t
    (set! *curve-wv-splash-scale-y* (new 'static 'curve2d-fast
                                      :xs (new 'static 'vector :y -0.5 :z -0.7 :w -1.0)
                                      :ys (new 'static 'vector :y 3.0 :z 2.0)
                                      :one-over-x-deltas (new 'static 'vector :x 6.0 :y -5.0000005 :z -6.6666665 :w 1.0)
                                      )
          )
    )

(define *part-wv-water-splash-center-curve-settings*
  (new 'static 'particle-curve-settings :lifetime-base (seconds 0.8) :lifetime-offset (seconds 0.4))
  )

(set! (-> *part-id-table* 958 init-specs 11 initial-valuef)
      (the-as float *part-wv-water-splash-center-curve-settings*)
      )

(set! (-> *part-wv-water-splash-center-curve-settings* color-start) *range-wv-splash-color*)

(set! (-> *part-wv-water-splash-center-curve-settings* alpha-start) *range-wv-splash-alpha*)

(set! (-> *part-wv-water-splash-center-curve-settings* scale-x-start) *range-wv-splash-scale-x*)

(set! (-> *part-wv-water-splash-center-curve-settings* scale-y-start) *range-wv-splash-scale-y*)

(set! (-> *part-wv-water-splash-center-curve-settings* r-scalar) #f)

(set! (-> *part-wv-water-splash-center-curve-settings* g-scalar) #f)

(set! (-> *part-wv-water-splash-center-curve-settings* b-scalar) #f)

(set! (-> *part-wv-water-splash-center-curve-settings* a-scalar) *curve-wv-splash-alpha*)

(set! (-> *part-wv-water-splash-center-curve-settings* scale-x-scalar) *curve-wv-splash-scale-x*)

(set! (-> *part-wv-water-splash-center-curve-settings* scale-y-scalar) *curve-wv-splash-scale-y*)

(defpart 959
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.4)
    (:scale-x (meters 2) (meters 0.5))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y (meters 2) (meters 0.5))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.01) (meters 0.0033333334))
    (:scalevel-y (meters 0.01) (meters 0.0033333334))
    (:fade-a -0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat set-conerot))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 960
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.2)
    (:scale-x (meters 0) (meters 0.1))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.00033333333) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat set-conerot))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 961
  :init-specs ((:texture (water-drops level-default-sprite))
    (:num 5.0)
    (:x (meters 0) (meters 1))
    (:scale-x (meters 0.2) (meters 0.2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.016666668) (meters 0.033333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 set-conerot))
    (:conerot-x (degrees -40) (degrees 80))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 962
  :init-specs ((:texture (ripples level-default-sprite))
    (:num 0.5 1.0)
    (:x (meters 1) (meters 5))
    (:scale-x (meters 0.1) (meters 0.2))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 64.0)
    (:scalevel-x (meters 0.001) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat set-conerot))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 963
  :init-specs ((:texture (lakedrop level-default-sprite))
    (:num 2.0 2.0)
    (:scale-x (meters 0.05) (meters 0.05))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.026666667) (meters 0.026666667))
    (:accel-y (meters -0.0016666667))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 set-conerot))
    (:func 'check-water-level-drop)
    (:conerot-x (degrees -2) (degrees 4))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 964
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'birth-func-set-vel)
    (:num 0.4)
    (:scale-x (meters 2))
    (:rot-z (degrees 0) (degrees 3598.0002))
    (:scale-y (meters 2))
    (:r 150.0)
    (:g 120.0)
    (:b 90.0)
    (:a 20.0)
    (:vel-y (meters 0) (meters 0.013333334))
    (:scalevel-x (meters 0.016666668))
    (:rotvel-z (degrees -0.1) (degrees 0.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.07111111 -0.07111111)
    (:accel-y (meters 0) (meters 0.000033333334))
    (:friction 0.98)
    (:timer (seconds 3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 launch-along-z left-multiply-quat))
    (:next-time (seconds 1))
    (:next-launcher 965)
    (:launchrot-x (degrees -90))
    (:conerot-x (degrees -10) (degrees 20))
    (:rotate-x (degrees 30))
    (:rotate-z (degrees -20) (degrees 40))
    )
  )

(defpart 965
  :init-specs ((:scalevel-x (meters 0.0033333334)) (:scalevel-y :copy scalevel-x))
  )

(defpartgroup group-gun-scorp-shells
  :id 227
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 966 :flags (sp7)) (sp-item 967 :flags (sp7)))
  )

(defpart 966
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 5.0)
    (:y (meters 0.25))
    (:scale-x (meters 0.2) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0 128.0)
    (:a 32.0 16.0)
    (:omega (degrees 0))
    (:vel-y (meters 0.053333335) (meters 0.026666667))
    (:scalevel-x (meters 0.01) (meters 0.006666667))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.4 -0.4)
    (:friction 0.85 0.04)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -45) (degrees 10))
    (:conerot-y (degrees 85) (degrees 10))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 0.4))
    )
  )

(defpart 967
  :init-specs ((:texture (shell-casing-01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:y (meters 0.25))
    (:scale-x (meters 0.35))
    (:rot-z (degrees 260) (degrees 20))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 20.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-y (meters 0.06666667) (meters 0.026666667))
    (:rotvel-z (degrees -4.8) (degrees 2.4))
    (:accel-y (meters -0.008333334) (meters -0.0016666667))
    (:timer (seconds 1.2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 30 0 0 #x408700 #x408700 #x408700 #x408800))
    (:func 'check-scorp-shell-level1)
    (:next-time (seconds 0.017) (seconds 0.53))
    (:next-launcher 968)
    (:conerot-x (degrees -40) (degrees 20))
    (:conerot-y (degrees 80) (degrees 20))
    (:rotate-y (degrees 0))
    )
  )

(defpart 968
  :init-specs ((:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:next-time (seconds 0.017) (seconds 0.015))
    (:next-launcher 969)
    )
  )

(defpart 969
  :init-specs ((:r 128.0) (:g 128.0) (:b 20.0) (:a 128.0))
  )

(defpart 970
  :init-specs ((:texture (shell-casing-01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:scale-x (meters 0.35))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 20.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-y (meters 0.026666667) (meters 0.016666668))
    (:rotvel-z (degrees -2.4) (degrees 4.8))
    (:accel-y (meters -0.0026666666) (meters -0.00083333335))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 30 0 0 #x408700 #x408800 #x408900))
    (:func 'check-scorp-shell-level2)
    (:next-time (seconds 0.017) (seconds 0.53))
    (:next-launcher 968)
    (:conerot-x (degrees 0) (degrees 45))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 971
  :init-specs ((:texture (shell-casing-01 level-default-sprite))
    (:birth-func 'birth-func-texture-group)
    (:num 1.0)
    (:scale-x (meters 0.35))
    (:rot-z (degrees 30) (degrees 120))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 20.0)
    (:a 128.0)
    (:vel-x (meters 0) (meters 0.0033333334))
    (:vel-y (meters 0.016666668))
    (:vel-z (meters 0) (meters 0.0033333334))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:accel-y (meters -0.0016666667))
    (:friction 0.9)
    (:timer (seconds 40))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:userdata :data (new 'static 'boxed-array :type int32 30 0 0 #x408800 #x408800 #x408900))
    (:next-time (seconds 0.25))
    (:next-launcher 972)
    (:conerot-x (degrees 30) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 972
  :init-specs ((:vel-x (meters 0))
    (:vel-y (meters 0))
    (:vel-z (meters 0))
    (:rotvel-z (degrees 0))
    (:accel-y (meters 0))
    (:next-time (seconds 2) (seconds 0.997))
    (:next-launcher 973)
    )
  )

(defpart 973
  :init-specs ((:fade-a -0.512))
  )

(defpart 974
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 0.0 1 2.0)
    (:scale-x (meters 2.5))
    (:rot-x 4)
    (:scale-y (meters 0.03) (meters 0.005))
    (:r 255.0)
    (:g 128.0 128.0)
    (:b 0.0 128.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.0045))
    (:vel-y (meters 0.033333335) (meters 0.033333335))
    (:fade-g -2.55 -2.55)
    (:fade-b -8.0)
    (:fade-a -0.64 -0.64)
    (:accel-y (meters -0.00033333333) (meters -0.00033333333))
    (:friction 0.8 0.02)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defun check-scorp-shell-level1 ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (and (< (-> arg2 y) (-> arg1 omega)) (< (-> arg1 vel-sxvel y) 0.0))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! gp-0 (-> arg2 x) (-> arg1 omega) (-> arg2 z) 1.0)
      (set! (-> *part-id-table* 970 init-specs 10 initial-valuef) (-> gp-0 y))
      (launch-particles (-> *part-id-table* 970) gp-0)
      (launch-particles (-> *part-id-table* 974) gp-0)
      )
    )
  0
  (none)
  )

(defun check-scorp-shell-level2 ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (and (< (-> arg2 y) (-> arg1 omega)) (< (-> arg1 vel-sxvel y) 0.0))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! gp-0 (-> arg2 x) (-> arg1 omega) (-> arg2 z) 1.0)
      (launch-particles (-> *part-id-table* 971) gp-0)
      (launch-particles (-> *part-id-table* 974) gp-0)
      )
    )
  0
  (none)
  )

(defpart 975
  :init-specs ((:texture (gun-blue-beam level-default-sprite))
    (:birth-func 'birth-func-setup-beam)
    (:num 1.0)
    (:scale-x (meters 0.3) (meters 0.1))
    (:scale-y (meters 100) (meters 20))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 16.0)
    (:fade-a 0.8)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 30 0 0 #x401000 #x401200))
    (:func 'sparticle-texture-animate)
    (:next-time (seconds 0.05))
    (:next-launcher 976)
    )
  )

(defpart 976
  :init-specs ((:scalevel-x (meters 0.033333335))
    (:scalevel-y (meters -0.13333334))
    (:fade-r 0.85333335)
    (:fade-g 0.85333335)
    (:fade-b 0.85333335)
    (:fade-a -0.21333334 -0.42666668)
    (:accel-y (meters 0.000033333334))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.5))
    (:next-launcher 977)
    )
  )

(defpart 977
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0))
  )

(defpart 978
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2) (meters 5))
    (:scale-y (meters 10) (meters 0.6))
    (:r 128.0)
    (:g 110.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.08))
    (:fade-r -3.2)
    (:fade-g -3.2)
    (:fade-b -6.4)
    (:fade-a -6.4)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 979
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2) (meters 5))
    (:scale-y (meters 10) (meters 0.6))
    (:r 128.0)
    (:g 110.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.08))
    (:fade-r -3.2)
    (:fade-g -3.2)
    (:fade-b -6.4)
    (:fade-a -6.4)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 980
  :init-specs ((:texture (gun-enemy-beam level-default-sprite))
    (:birth-func 'birth-func-setup-beam)
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y (meters 30))
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 32.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

(defpart 981
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 64.0)
    (:scalevel-x (meters -0.075))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 982
  :init-specs ((:texture (radial-gradient level-default-sprite))
    (:num 16.0)
    (:z (meters 0) (meters -2))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 64.0)
    (:fade-g -3.2 -6.4)
    (:fade-a -1.6 -6.4)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:timer (seconds 0.267))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(when (or (zero? *curve-toad-linear-up-red*) (!= loading-level global))
  (set! *curve-toad-linear-up-red* (new 'loading-level 'curve2d-piecewise))
  (curve2d-piecewise-method-10 *curve-toad-linear-up-red* 2 'loading-level (the-as int #f))
  )

(set! (-> *curve-toad-linear-up-red* pts data 0 first) 0.0)

(set! (-> *curve-toad-linear-up-red* pts data 0 second) 0.3)

(set! (-> *curve-toad-linear-up-red* pts data 1 first) 1.0)

(set! (-> *curve-toad-linear-up-red* pts data 1 second) 1.0)

(if #t
    (set! *trail-color-curve-toad-grenade* (new 'static 'curve-color-fast
                                             :xs (new 'static 'vector :y -0.2 :z -1.0 :w -2.0)
                                             :ys (new 'static 'inline-array vector 4
                                               (new 'static 'vector :x 1.0 :y 0.3 :w 128.0)
                                               (new 'static 'vector :x 1.0 :w 128.0)
                                               (new 'static 'vector :x 1.0 :w 128.0)
                                               (new 'static 'vector :x 1.0 :w 128.0)
                                               )
                                             :one-over-x-deltas (new 'static 'vector :x 5.0 :y 1.25 :z 1.0 :w 1.0)
                                             )
          )
    )

(if #t
    (set! *curve-grenade-linear-toad-trail* (new 'static 'curve2d-fast
                                              :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                              :ys (new 'static 'vector :x 0.3 :y 1.0 :z 2.0 :w 3.0)
                                              :one-over-x-deltas (new 'static 'vector :x 0.7 :y 1.0 :z 1.0 :w 1.0)
                                              )
          )
    )

(if (or (zero? *toad-grenade-trail*) (!= loading-level global))
    (set! *toad-grenade-trail* (new 'loading-level 'light-trail-composition))
    )

(set! (-> *toad-grenade-trail* color-mode) (the-as uint 0))

(set! (-> *toad-grenade-trail* color-repeat-dist) 40960.0)

(set! (-> *toad-grenade-trail* alpha-1-mode) (the-as uint 0))

(set! (-> *toad-grenade-trail* alpha-2-mode) (the-as uint 1))

(set! (-> *toad-grenade-trail* base-alpha) 0.5)

(set! (-> *toad-grenade-trail* alpha-repeat-dist) 6144.0)

(set! (-> *toad-grenade-trail* width-mode) (the-as uint 2))

(set! (-> *toad-grenade-trail* base-width) 2048.0)

(set! (-> *toad-grenade-trail* width-repeat-dist) 40960.0)

(set! (-> *toad-grenade-trail* uv-mode) (the-as uint 0))

(set! (-> *toad-grenade-trail* uv-repeat-dist) 16384000.0)

(set! (-> *toad-grenade-trail* lie-mode) (the-as uint 0))

(set! (-> *toad-grenade-trail* max-age) (seconds 0.5))

(if #f
    (set! (-> *toad-grenade-trail* tex-id)
          (the-as uint (lookup-texture-id-by-name (the-as string #f) (the-as string #f)))
          )
    (set! (-> *toad-grenade-trail* tex-id) (the-as uint #x100300))
    )

(set! (-> *toad-grenade-trail* width-curve) (the-as curve2d-piecewise *curve-grenade-linear-toad-trail*))

(set! (-> *toad-grenade-trail* color-curve) (the-as curve-color-piecewise *trail-color-curve-toad-grenade*))

(set! (-> *toad-grenade-trail* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

(set! (-> *toad-grenade-trail* alpha-curve-2) *curve-toad-linear-up-red*)

(set! (-> *toad-grenade-trail* zbuffer?) #f)

(set! (-> *toad-grenade-trail* lie-vector quad) (-> *up-vector* quad))

(set! (-> *toad-grenade-trail* use-tape-mode?) #f)

(set! (-> *toad-grenade-trail* blend-mode) (the-as uint 1))

(set! (-> *toad-grenade-trail* frame-stagger) (the-as uint 1))

(defpart 983
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 5.0)
    (:y (meters 0.25))
    (:scale-x (meters 18) (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0 64.0)
    (:g :copy r)
    (:b :copy r)
    (:a 16.0 16.0)
    (:omega (degrees 0))
    (:vel-y (meters 0.053333335) (meters 0.026666667))
    (:scalevel-x (meters 0.01) (meters 0.006666667))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.2 -0.2)
    (:friction 0.85 0.04)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -45) (degrees 10))
    (:conerot-y (degrees 85) (degrees 10))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 0.4))
    )
  )

(defpartgroup group-gun-scorp-shot-hit
  :id 228
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 984 :flags (sp6) :period (seconds 2) :length (seconds 0.017))
    (sp-item 985 :fade-after (meters 60) :falloff-to (meters 60) :period (seconds 2) :length (seconds 0.017))
    (sp-item 986 :fade-after (meters 120) :falloff-to (meters 140) :period (seconds 2) :length (seconds 0.017))
    )
  )

(defpart 986
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 8.0 16.0)
    (:scale-x (meters 1.5))
    (:rot-x 4)
    (:scale-y (meters 0.05) (meters 0.05))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 64.0)
    (:omega (degrees 0.0675))
    (:vel-z (meters 0.06666667) (meters 0.33333334))
    (:fade-r -0.053333335)
    (:fade-g -2.55)
    (:fade-b -5.1)
    (:fade-a -0.42666668 -0.42666668)
    (:accel-y (meters -0.0013333333) (meters -0.001))
    (:friction 0.875)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-13))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 80) (degrees 40))
    (:conerot-y (degrees 80) (degrees 40))
    (:conerot-z (degrees 80) (degrees 40))
    (:conerot-radius (meters 0) (meters 0.2))
    )
  )

(defpart 985
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 8.0 16.0)
    (:scale-x (meters 0.5) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 100.0)
    (:b 80.0)
    (:a 32.0 32.0)
    (:vel-z (meters 0) (meters 0.016666668))
    (:scalevel-x (meters 0.0013333333) (meters 0.0033333334))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees 90) (degrees 20))
    (:conerot-y (degrees 90) (degrees 20))
    (:conerot-z (degrees 90) (degrees 20))
    (:conerot-radius (meters 0) (meters 0.2))
    )
  )

(defpart 984
  :init-specs ((:texture (hitspark level-default-sprite))
    (:num 1.0)
    (:sound (static-sound-spec "blue-gun-rico" :group 0))
    (:scale-x (meters 0.4) (meters 2))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 230.0 25.0)
    (:g 230.0 25.0)
    (:b 230.0 25.0)
    (:a 128.0)
    (:fade-a -5.12)
    (:timer (seconds 0.085))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:next-time (seconds 0.035))
    (:next-launcher 987)
    )
  )

(defpart 987
  :init-specs ((:scalevel-x (meters 0.12) (meters 0.12)) (:scalevel-y :copy scalevel-x))
  )

(defpartgroup group-gun-scorp-shot-die
  :id 229
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 249))
  )

(defpartgroup group-toad-grenade-shot-explode
  :id 230
  :duration (seconds 5)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 988 :flags (sp3))
    (sp-item 989 :flags (sp3))
    (sp-item 990 :flags (sp3))
    (sp-item 991 :period (seconds 30) :length (seconds 0.167))
    (sp-item 992 :flags (sp3))
    )
  )

(defpart 988
  :init-specs ((:texture (shockwave level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:scalevel-x (meters 0.6666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -1.28)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 989
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 50))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 40.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 990
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 50))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 255.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.6666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 991
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:birth-func 'birth-func-flip-based-on-scale)
    (:num 10.0)
    (:scale-x (meters -4) 2.0 (meters 8))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 200.0 20.0)
    (:b 130.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.6666667))
    (:scalevel-x (meters 0.033333335) (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.26666668)
    (:fade-b -0.1)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.8)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 992
  :init-specs ((:texture (water-radiate level-default-sprite))
    (:birth-func 'birth-func-flip-based-on-scale)
    (:num 100.0)
    (:x (meters 0) (meters 0.1))
    (:scale-x (meters -4) 2.0 (meters 8))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 200.0)
    (:a 255.0)
    (:vel-y (meters 0.6666667) (meters 0.033333335))
    (:scalevel-x (meters 0.033333335))
    (:fade-g -1.7)
    (:fade-b -1.7)
    (:fade-a -0.85)
    (:friction 0.83)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:func 'sparticle-2d-spline-align-instant)
    (:next-time (seconds 0.25))
    (:next-launcher 993)
    (:conerot-x (degrees -90) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 993
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.33333334)
    (:fade-b -0.6666667)
    (:friction 0.99)
    )
  )
