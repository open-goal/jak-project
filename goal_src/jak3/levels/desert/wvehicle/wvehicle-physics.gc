;;-*-Lisp-*-
(in-package goal)

;; name: wvehicle-physics.gc
;; name in dgo: wvehicle-physics
;; dgos: LPATK, LFACCAR, WASALL

;; DECOMP BEGINS

(define *wvehicle-surfaces* (new 'static 'inline-array vehicle-wheel-surface 7
                              (new 'static 'vehicle-wheel-surface
                                :friction 1.0
                                :drag 1.0
                                :damage 1.0
                                :tire-roll-mix (new 'static 'array float 4 1.0 0.0 0.0 1.0)
                                :tire-slide-mix (new 'static 'array float 2 1.0 0.0)
                                )
                              (new 'static 'vehicle-wheel-surface
                                :surface-type (vehicle-wheel-surface-type dirt)
                                :friction 0.9
                                :drag 1.0
                                :depth 409.6
                                :damage 1.0
                                :tire-roll-mix (new 'static 'array float 4 0.5 0.5 0.0 0.5)
                                :tire-slide-mix (new 'static 'array float 2 0.5 1.0)
                                )
                              (new 'static 'vehicle-wheel-surface
                                :surface-type (vehicle-wheel-surface-type sand)
                                :friction 0.85
                                :drag 2.0
                                :depth 1024.0
                                :damage 1.0
                                :tire-roll-mix (new 'static 'array float 4 0.0 0.0 1.0 0.25)
                                :tire-slide-mix (new 'static 'array float 2 0.0 0.5)
                                )
                              (new 'static 'vehicle-wheel-surface
                                :flags (vehicle-wheel-surface-flag moving)
                                :surface-type (vehicle-wheel-surface-type quicksand)
                                :friction 0.5
                                :drag 5.0
                                :damage 1.0
                                )
                              (new 'static 'vehicle-wheel-surface
                                :surface-type (vehicle-wheel-surface-type water)
                                :friction 0.25
                                :drag 4.0
                                :depth 2048.0
                                :damage 1.0
                                )
                              (new 'static 'vehicle-wheel-surface
                                :surface-type (vehicle-wheel-surface-type wall)
                                :friction 0.1
                                :drag 1.0
                                :damage 1.0
                                :tire-roll-mix (new 'static 'array float 4 1.0 0.0 0.0 1.0)
                                :tire-slide-mix (new 'static 'array float 2 1.0 0.0)
                                )
                              (new 'static 'vehicle-wheel-surface
                                :flags (vehicle-wheel-surface-flag moving)
                                :surface-type (vehicle-wheel-surface-type conveyor)
                                :friction 1.0
                                :drag 1.0
                                :damage 1.0
                                :tire-roll-mix (new 'static 'array float 4 1.0 0.0 0.0 1.0)
                                :tire-slide-mix (new 'static 'array float 2 1.0 0.0)
                                )
                              )
        )

(defmethod wvehicle-method-160 ((this wvehicle) (arg0 wvehicle-physics-work))
  (let ((v1-0 (-> this rbody)))
    (mem-copy! (the-as pointer (-> arg0 mat)) (the-as pointer (-> v1-0 matrix)) 64)
    )
  (logior! (-> this v-flags) (vehicle-flag in-air))
  (logclear! (-> this v-flags) (vehicle-flag on-ground on-flight-level))
  (vector-reset! (-> arg0 ground-normal-sum))
  (let ((v1-6 (-> arg0 cquery)))
    (set! (-> v1-6 radius) 1.0)
    (set! (-> v1-6 collide-with) (collide-spec
                                   backgnd
                                   obstacle
                                   vehicle-sphere
                                   hit-by-player-list
                                   hit-by-others-list
                                   player-list
                                   collectable
                                   blocking-plane
                                   pusher
                                   vehicle-mesh-probeable
                                   shield
                                   )
          )
    (set! (-> v1-6 ignore-process0) #f)
    (set! (-> v1-6 ignore-process1) #f)
    (set! (-> v1-6 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nopilot #x1))
    (set! (-> v1-6 action-mask) (collide-action solid))
    )
  (countdown (s4-0 (-> this info physics-model wheel-count))
    (let* ((s3-0 (-> this wheel s4-0))
           (s1-0 (-> s3-0 info))
           (s2-0 (-> arg0 probe-work-array s4-0))
           )
      (vector-matrix*! (-> arg0 world-pos) (-> s3-0 probe-local-pos) (-> arg0 mat))
      (vector-rotate*! (-> arg0 probe-dir) (-> s3-0 probe-local-dir) (-> arg0 mat))
      (vector-rotate*! (-> s2-0 wheel-axis) (-> s3-0 local-axis) (-> arg0 mat))
      (vector-float*! (-> arg0 cquery move-dist) (-> arg0 probe-dir) (-> s1-0 travel))
      (set! (-> arg0 cquery radius) (-> s1-0 probe-radius))
      (vector-reset! (-> s3-0 ground-normal))
      (vector+float*!
        (-> arg0 cquery start-pos)
        (-> arg0 world-pos)
        (-> arg0 probe-dir)
        (- (-> arg0 cquery radius))
        )
      (logand! (-> s3-0 flags) -7)
      (set! (-> s3-0 sink-depth) 0.0)
      (set! (-> arg0 surface-depth) 0.0)
      (set! (-> s2-0 probe-uu) (probe-using-line-sphere *collide-cache* (-> arg0 cquery)))
      (cond
        ((>= (-> s2-0 probe-uu) 0.0)
         (set! (-> arg0 material) (the-as uint (-> arg0 cquery best-other-tri pat material)))
         (let ((v1-26 (-> arg0 material)))
           (set! (-> arg0 surface-type) (the-as uint (cond
                                                       ((or (= v1-26 23) (= v1-26 6))
                                                        0
                                                        )
                                                       ((or (= v1-26 15) (zero? v1-26))
                                                        1
                                                        )
                                                       ((= v1-26 5)
                                                        2
                                                        )
                                                       ((= v1-26 2)
                                                        3
                                                        )
                                                       ((= v1-26 16)
                                                        6
                                                        )
                                                       (else
                                                         1
                                                         )
                                                       )
                                                )
                 )
           )
         (if (or (= (-> arg0 cquery best-other-tri pat mode) (pat-mode wall))
                 (= (-> arg0 cquery best-other-tri pat event) (pat-event slippery))
                 )
             (set! (-> arg0 surface-type) (the-as uint 5))
             )
         (set! (-> s3-0 surface) (-> *wvehicle-surfaces* (-> arg0 surface-type)))
         (logclear! (-> this v-flags) (vehicle-flag in-air))
         (logior! (-> this v-flags) (vehicle-flag on-ground))
         (logior! (-> s3-0 flags) 2)
         (set! (-> arg0 surface-depth) (-> s3-0 surface depth))
         (vector+float*! (-> arg0 tmp) (-> arg0 cquery start-pos) (-> arg0 cquery move-dist) (-> s2-0 probe-uu))
         (vector-! (-> s3-0 ground-normal) (-> arg0 tmp) (-> arg0 cquery best-other-tri intersect))
         (vector-normalize! (-> s3-0 ground-normal) 1.0)
         (vector+! (-> arg0 ground-normal-sum) (-> arg0 ground-normal-sum) (-> s3-0 ground-normal))
         0
         )
        (else
          (set! (-> s2-0 probe-uu) 1.0)
          (set! (-> s3-0 surface) #f)
          )
        )
      (vector+float*!
        (-> s3-0 surface-pos)
        (-> arg0 world-pos)
        (-> arg0 probe-dir)
        (* (-> s1-0 travel) (-> s2-0 probe-uu))
        )
      (+! (-> s2-0 probe-uu) (/ (-> arg0 surface-depth) (-> s1-0 travel)))
      (set! (-> s2-0 probe-uu) (fmax 0.0 (fmin 1.0 (-> s2-0 probe-uu))))
      (vector+float*! (-> s3-0 ground-pos) (-> s3-0 surface-pos) (-> arg0 probe-dir) (-> arg0 surface-depth))
      (set! (-> s3-0 sink-depth) (fmax 0.0 (- (-> this water-height) (-> s3-0 ground-pos y))))
      (set! (-> s3-0 pos) (-> s2-0 probe-uu))
      )
    0
    )
  0
  (none)
  )

(defmethod vehicle-method-97 ((this wvehicle) (arg0 float) (arg1 vehicle-physics-work))
  (local-vars (sv-16 rigid-body-control))
  (set! sv-16 (-> this rbody))
  (dotimes (s3-0 (-> this info physics-model wheel-count))
    (let* ((s2-0 (-> this wheel s3-0))
           (s1-0 (-> s2-0 info))
           (f30-0
             (fmax
               0.0
               (- 1.0 (-> (the-as wvehicle-physics-work (+ (the-as uint arg1) (* 144 s3-0))) probe-work-array 0 probe-uu))
               )
             )
           )
      (if (>= (-> this info handling cos-ground-effect-angle) (vector-dot (-> s2-0 ground-normal) (-> arg1 mat uvec)))
          (set! f30-0 0.0)
          )
      (set! (-> s2-0 up-force) 0.0)
      (when (< 0.0 f30-0)
        (rigid-body-control-method-23 sv-16 (-> s2-0 ground-pos) (-> arg1 velocity))
        (let* ((f0-4 0.0)
               (f1-9 (* 2.0
                        (-> this info info mass)
                        (-> this info extra gravity)
                        f30-0
                        (-> this susp-spring-control)
                        (-> s1-0 suspension-spring)
                        )
                     )
               (f2-5 0.25)
               (f3-0 arg0)
               (f0-5 (fmax f0-4 (+ f1-9 (* f2-5
                                           (/ 1.0 f3-0)
                                           (-> this info info mass)
                                           (-> s1-0 suspension-damping)
                                           (fmax 0.0 (- (vector-dot (-> arg1 velocity) (-> s2-0 ground-normal))))
                                           )
                                   )
                           )
                     )
               )
          (set! (-> s2-0 up-force) f0-5)
          (vector-float*! (-> arg1 force) (-> s2-0 ground-normal) f0-5)
          )
        (apply-impact! sv-16 (-> s2-0 ground-pos) (-> arg1 force))
        )
      )
    )
  (dotimes (s3-1 (-> this info physics-model wheel-count))
    (let* ((s2-1 (-> this wheel s3-1))
           (s1-1 (-> s2-1 info))
           )
      (set! (-> arg1 probe-work-array 0 world-normal y) (* (-> s1-1 scale) (-> s1-1 radius)))
      (set! (-> arg1 probe-work-array 0 ground-normal x) 1.0)
      (when (< 0.0 (-> s2-1 up-force))
        (rigid-body-control-method-23 sv-16 (-> s2-1 ground-pos) (-> arg1 velocity))
        (if (logtest? (-> s2-1 surface flags) (vehicle-wheel-surface-flag moving))
            (vector-! (-> arg1 velocity) (-> arg1 velocity) (-> this surface-velocity))
            )
        (let ((s0-0 (the-as object (+ (+ (* 144 s3-1) 416) (the-as int arg1)))))
          (set! (-> arg1 probe-work-array 0 local-normal quad) (-> (the-as wvehicle-physics-work s0-0) force quad))
          (vector+float*!
            (-> (the-as wvehicle-physics-work s0-0) velocity)
            (-> arg1 probe-work-array 0 local-normal)
            (-> s2-1 ground-normal)
            (- (vector-dot (-> arg1 probe-work-array 0 local-normal) (-> s2-1 ground-normal)))
            )
          (vector-normalize! (the-as vector (+ (the-as int s0-0) 80)) 1.0)
          (vector-cross!
            (the-as vector (+ (the-as int s0-0) 96))
            (-> arg1 probe-work-array 0 local-normal)
            (-> s2-1 ground-normal)
            )
          (vector-normalize! (-> (the-as wvehicle-physics-work s0-0) world-pos) 1.0)
          (set! (-> (the-as wvehicle-physics-work arg1) forward-dir quad)
                (-> (the-as wvehicle-physics-work s0-0) world-pos quad)
                )
          (set! (-> (the-as wvehicle-physics-work arg1) side-dir quad)
                (-> (the-as wvehicle-physics-work s0-0) velocity quad)
                )
          (set! (-> (the-as wvehicle-physics-work s0-0) world-normal quad)
                (-> (the-as wvehicle-physics-work arg1) velocity quad)
                )
          )
        (set! (-> s2-1 side-vel)
              (vector-dot
                (-> (the-as wvehicle-physics-work arg1) velocity)
                (-> (the-as wvehicle-physics-work arg1) side-dir)
                )
              )
        (set! (-> s2-1 forward-vel) (vector-dot (-> arg1 velocity) (the-as vector (&-> arg1 impulse))))
        (set! (-> s2-1 up-vel) (vector-dot (-> arg1 velocity) (-> s2-1 ground-normal)))
        (set! (-> s2-1 forward-slip-vel)
              (+ (-> s2-1 forward-vel) (* -1.0 (-> arg1 probe-work-array 0 world-normal y) (-> s2-1 rev)))
              )
        (let* ((f0-21 (-> s2-1 side-vel))
               (f0-23 (* f0-21 f0-21))
               (f1-16 (-> s2-1 forward-slip-vel))
               (f0-25 (sqrtf (+ f0-23 (* f1-16 f1-16))))
               )
          (set! (-> s2-1 friction-coef)
                (* (smooth-interp
                     (-> this info handling tire-static-friction)
                     (-> this info handling tire-dynamic-friction)
                     f0-25
                     (-> this info handling tire-static-friction-speed)
                     (-> this info handling tire-dynamic-friction-speed)
                     )
                   (-> s2-1 surface friction)
                   )
                )
          )
        (set! (-> arg1 probe-work-array 0 ground-normal x) (-> s2-1 surface drag))
        )
      (set! (-> arg1 probe-work-array 0 ground-pos y) (-> s2-1 torque))
      (when (< 0.0 (-> s2-1 up-force))
        (let ((f0-36
                (* (-> s2-1 up-force)
                   (-> s2-1 friction-coef)
                   (-> s1-1 forward-grip)
                   (-> arg1 probe-work-array 0 world-normal y)
                   )
                )
              (f1-29
                (/ (* 0.5 (-> s2-1 inertia) (-> s2-1 forward-slip-vel)) (* arg0 (-> arg1 probe-work-array 0 world-normal y)))
                )
              )
          (if (logtest? (-> s1-1 flags) (vehicle-wheel-flag vwf0))
              (set! f1-29 (* f1-29 (/ 1.0 (the float (-> this info physics-model drive-wheel-count)))))
              )
          (set! (-> arg1 probe-work-array 0 probe-pos w) (fmax (fmin f1-29 f0-36) (- f0-36)))
          )
        (+! (-> arg1 probe-work-array 0 ground-pos y) (-> arg1 probe-work-array 0 probe-pos w))
        )
      (set! (-> arg1 probe-work-array 0 ground-pos z)
            (- (* -0.25 (/ 1.0 arg0) (-> s2-1 rev) (-> s2-1 inertia)) (-> arg1 probe-work-array 0 ground-pos y))
            )
      (set! (-> arg1 probe-work-array 0 ground-pos w) (fabs (-> s2-1 braking-torque)))
      (set! (-> arg1 probe-work-array 0 ground-pos x)
            (fmax
              (fmin (-> arg1 probe-work-array 0 ground-pos z) (-> arg1 probe-work-array 0 ground-pos w))
              (- (-> arg1 probe-work-array 0 ground-pos w))
              )
            )
      (+! (-> arg1 probe-work-array 0 ground-pos y) (-> arg1 probe-work-array 0 ground-pos x))
      (let ((f0-57 (* -1.0
                      (-> s2-1 rev)
                      (-> s2-1 inertia)
                      (-> arg1 probe-work-array 0 ground-normal x)
                      (-> this info handling rolling-resistance)
                      )
                   )
            )
        (if (logtest? (vehicle-flag turbo-boost) (-> this v-flags))
            (set! f0-57 (* 0.05 f0-57))
            )
        (+! (-> arg1 probe-work-array 0 ground-pos y) f0-57)
        )
      (cond
        ((logtest? (-> s1-1 flags) (vehicle-wheel-flag vwf0))
         (+! (-> this wheel-torque) (-> arg1 probe-work-array 0 ground-pos y))
         )
        (else
          (let ((f0-61 (-> s2-1 rev))
                (f1-49 (* (-> arg1 probe-work-array 0 ground-pos y) arg0))
                (f2-20 (-> s2-1 inertia))
                )
            (set! (-> s2-1 rev) (+ f0-61 (* f1-49 (/ 1.0 f2-20))))
            )
          (set! (-> s2-1 rev) (fmax -125.6637 (fmin 125.6637 (-> s2-1 rev))))
          )
        )
      )
    0
    )
  (let ((f0-65 (-> this wheel-rev))
        (f1-54 (* arg0 (-> this wheel-torque)))
        (f2-25 (-> this wheel-inertia))
        )
    (set! (-> this wheel-rev) (+ f0-65 (* f1-54 (/ 1.0 f2-25))))
    )
  (set! (-> this wheel-rev) (fmax -125.6637 (fmin 125.6637 (-> this wheel-rev))))
  (dotimes (v1-110 (-> this info physics-model wheel-count))
    (let ((a0-28 (-> this wheel v1-110)))
      (if (logtest? (-> a0-28 info flags) (vehicle-wheel-flag vwf0))
          (set! (-> a0-28 rev) (* (-> this wheel-rev) (-> a0-28 drive-diff)))
          )
      )
    )
  (let* ((f0-71 (-> this info engine inertia))
         (f1-59 (-> this clutch-grab))
         (f2-29 (-> this clutch-inertia))
         (f3-12 (-> this gear-ratio))
         (f3-14 (/ 1.0 f3-12))
         (f3-16 (* f3-14 f3-14))
         (f4-5 (-> this info transmission inertia))
         (f5-0 (-> this final-drive-ratio))
         (f5-2 (/ 1.0 f5-0))
         )
    (set! (-> arg1 probe-work-array 0 probe-pos z)
          (+ f0-71 (* f1-59 (+ f2-29 (* f3-16 (+ f4-5 (* f5-2 f5-2 (-> this drive-wheel-inertia)))))))
          )
    )
  (let* ((f3-18 (- (* (- (fmax 0.0 (* (-> this total-gear-ratio) (-> this wheel-rev))) (-> this engine-rev))
                      (-> arg1 probe-work-array 0 probe-pos z)
                      (/ 1.0 arg0)
                      )
                   (-> this engine-torque)
                   )
                )
         (f0-78 (-> this engine-rev))
         (f1-69 (* arg0 (+ (-> this engine-torque) (* f3-18 (-> this clutch-grab)))))
         (f2-35 (-> arg1 probe-work-array 0 probe-pos z))
         )
    (set! (-> this engine-rev) (+ f0-78 (* f1-69 (/ 1.0 f2-35))))
    )
  (let* ((f0-80 (-> this engine-rev))
         (f1-71 (-> this info engine max-rpm))
         (f0-81 (fmin f0-80 (* 0.10471976 f1-71)))
         (f1-74 (-> this info engine min-rpm))
         )
    (set! (-> this engine-rev) (fmax f0-81 (* 0.10471976 f1-74)))
    )
  (dotimes (s3-2 (-> this info physics-model wheel-count))
    (let* ((s1-2 (-> this wheel s3-2))
           (s2-2 (-> s1-2 info))
           )
      (when (< 0.0 (-> s1-2 up-force))
        (set! (-> arg1 probe-work-array 0 world-normal y) (* (-> s2-2 scale) (-> s2-2 radius)))
        (let ((v1-138 (-> (the-as wvehicle-physics-work arg1) probe-work-array s3-2)))
          (set! (-> (the-as wvehicle-physics-work arg1) forward-dir quad) (-> v1-138 forward-dir quad))
          (set! (-> (the-as wvehicle-physics-work arg1) side-dir quad) (-> v1-138 side-dir quad))
          (set! (-> (the-as wvehicle-physics-work arg1) velocity quad) (-> v1-138 velocity quad))
          )
        (set! (-> (the-as wvehicle-physics-work arg1) ground-pos quad) (-> s1-2 ground-pos quad))
        (vector-!
          (-> (the-as wvehicle-physics-work arg1) p-body)
          (-> (the-as wvehicle-physics-work arg1) ground-pos)
          (-> sv-16 position)
          )
        (vector-cross! (-> arg1 normal) (-> arg1 tmp) (the-as vector (-> arg1 probe-work-array)))
        (vector-rotate*! (-> arg1 normal) (-> arg1 normal) (-> sv-16 inv-i-world))
        (vector-cross! (-> arg1 normal) (-> arg1 normal) (-> arg1 tmp))
        (set! (-> arg1 probe-work-array 0 world-normal z)
              (/ (* -0.5 (-> s1-2 side-vel))
                 (* arg0 (+ (-> sv-16 info inv-mass) (vector-dot (the-as vector (-> arg1 probe-work-array)) (-> arg1 normal))))
                 )
              )
        (set! (-> arg1 probe-work-array 0 world-normal w) 0.0)
        (set! (-> s1-2 forward-slip-vel)
              (+ (-> s1-2 forward-vel) (* -1.0 (-> arg1 probe-work-array 0 world-normal y) (-> s1-2 rev)))
              )
        (vector-cross! (-> arg1 normal) (-> arg1 tmp) (the-as vector (&-> arg1 impulse)))
        (vector-rotate*! (-> arg1 normal) (-> arg1 normal) (-> sv-16 inv-i-world))
        (vector-cross! (-> arg1 normal) (-> arg1 normal) (-> arg1 tmp))
        (let ((f0-94
                (/ (* -0.25 (-> s1-2 forward-slip-vel))
                   (* arg0 (+ (-> sv-16 info inv-mass) (vector-dot (the-as vector (&-> arg1 impulse)) (-> arg1 normal))))
                   )
                )
              )
          (+! (-> arg1 probe-work-array 0 world-normal w) f0-94)
          )
        (set! (-> arg1 probe-work-array 0 probe-pos y)
              (* (-> s1-2 friction-coef) (-> s1-2 up-force) (-> s2-2 side-grip))
              )
        (set! (-> arg1 probe-work-array 0 probe-pos x)
              (* (-> s1-2 friction-coef) (-> s1-2 up-force) (-> s2-2 forward-grip))
              )
        (let* ((f0-103 (/ (-> arg1 probe-work-array 0 world-normal z) (-> arg1 probe-work-array 0 probe-pos y)))
               (f0-105 (* f0-103 f0-103))
               (f1-95 (/ (-> arg1 probe-work-array 0 world-normal w) (-> arg1 probe-work-array 0 probe-pos x)))
               (f0-106 (+ f0-105 (* f1-95 f1-95)))
               )
          (when (< 1.0 f0-106)
            (let ((f0-108 (/ 1.0 (sqrtf f0-106))))
              (set! (-> arg1 probe-work-array 0 world-normal z) (* (-> arg1 probe-work-array 0 world-normal z) f0-108))
              (set! (-> arg1 probe-work-array 0 world-normal w) (* (-> arg1 probe-work-array 0 world-normal w) f0-108))
              )
            )
          )
        (vector-float*!
          (-> arg1 force)
          (the-as vector (-> arg1 probe-work-array))
          (-> arg1 probe-work-array 0 world-normal z)
          )
        (vector+float*!
          (-> arg1 force)
          (-> arg1 force)
          (the-as vector (&-> arg1 impulse))
          (-> arg1 probe-work-array 0 world-normal w)
          )
        (let ((f0-114
                (* (vector-dot (-> arg1 tmp) (-> arg1 mat uvec)) (+ -1.0 (-> this info handling ground-torque-scale)))
                )
              )
          (vector+float*! (-> arg1 ground-normal) (-> arg1 ground-normal) (-> arg1 mat uvec) f0-114)
          )
        (apply-impact! sv-16 (-> arg1 ground-normal) (-> arg1 force))
        0
        )
      )
    )
  0
  (none)
  )

(defmethod apply-gravity! ((this wvehicle) (arg0 float))
  (local-vars (v1-51 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (wvehicle-method-162 this arg0)
    (wvehicle-method-163 this)
    (let ((gp-0 (new 'stack-no-clear 'wvehicle-physics-work))
          (s5-0 (-> this rbody))
          (s4-0 (-> this info))
          )
      (set! (-> gp-0 cur-time) (the-as uint (current-time)))
      (cond
        ((logtest? (-> this v-flags) (vehicle-flag dead))
         (vector-reset! (-> gp-0 ground-normal-sum))
         )
        (else
          (wvehicle-method-160 this gp-0)
          (vector-reset! (-> gp-0 force))
          (set! (-> gp-0 force y) (* 2.0 (-> s4-0 info mass) (-> s4-0 extra gravity) (-> this jump-control)))
          (add-force! s5-0 (-> gp-0 force))
          (vehicle-method-97 this arg0 (the-as vehicle-physics-work gp-0))
          )
        )
      (when (logtest? (vehicle-flag turbo-boost) (-> this v-flags))
        (let ((f0-6 (* (-> this turbo-boost-factor) (-> s4-0 info mass) (-> s4-0 extra gravity))))
          (vector-float*! (-> gp-0 force) (-> gp-0 mat fvec) f0-6)
          )
        (add-force! s5-0 (-> gp-0 force))
        )
      (when (logtest? (-> this v-flags) (vehicle-flag in-air))
        (let* ((v1-29 (-> this rbody ang-momentum))
               (a0-10 (-> this rbody ang-momentum))
               (f3-0 (-> s4-0 handling air-angular-damping))
               (f2-0 arg0)
               (f0-7 0.0)
               (f1-5 1.0)
               (f2-1 (* -1.0 (- 1.0 f3-0) f2-0))
               (f3-3 0.016666668)
               )
          (vector-float*! v1-29 a0-10 (fmax f0-7 (+ f1-5 (* f2-1 (/ 1.0 f3-3)))))
          )
        (let* ((v1-31 (-> s5-0 lin-velocity))
               (f0-13 (+ (* (-> v1-31 x) (-> v1-31 x)) (* (-> v1-31 z) (-> v1-31 z))))
               (f1-10 40960.0)
               )
          (cond
            ((< f0-13 (* f1-10 f1-10))
             (set! (-> gp-0 local-pos quad) (-> s4-0 info cm-offset-joint quad))
             (+! (-> gp-0 local-pos z) 4096.0)
             (vector-matrix*! (-> gp-0 world-pos) (-> gp-0 local-pos) (-> gp-0 mat))
             (vector-reset! (-> gp-0 force))
             (set! (-> gp-0 force x) (* (-> s4-0 handling hop-turn-torque) (-> this controls steering)))
             (set! (-> gp-0 force y) (* -1.0 (-> this controls lean-z) (-> s4-0 handling air-pitch-torque)))
             (vector-rotate*! (-> gp-0 force) (-> gp-0 force) (-> gp-0 mat))
             (rigid-body-control-method-22 s5-0 (-> gp-0 world-pos) (-> gp-0 force))
             )
            (else
              (set! (-> gp-0 local-pos quad) (-> s4-0 info cm-offset-joint quad))
              (+! (-> gp-0 local-pos y) 4096.0)
              (vector-matrix*! (-> gp-0 world-pos) (-> gp-0 local-pos) (-> gp-0 mat))
              (vector-reset! (-> gp-0 force))
              (set! (-> gp-0 force x) (* (-> s4-0 handling air-roll-torque) (-> this controls steering)))
              (set! (-> gp-0 force z) (* (-> s4-0 handling air-pitch-torque) (-> this controls lean-z)))
              (vector-rotate*! (-> gp-0 force) (-> gp-0 force) (-> gp-0 mat))
              (rigid-body-control-method-22 s5-0 (-> gp-0 world-pos) (-> gp-0 force))
              )
            )
          )
        )
      (when (not (logtest? (vehicle-flag gun-dark-2-zero-g) (-> this v-flags)))
        (let ((f0-27 0.0))
          (.lvf vf1 (&-> (-> gp-0 ground-normal-sum) quad))
          (.add.w.vf vf2 vf0 vf0 :mask #b1)
          (.mul.vf vf1 vf1 vf1)
          (.mul.x.vf acc vf2 vf1 :mask #b1)
          (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
          (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
          (.mov v1-51 vf1)
          (if (= f0-27 v1-51)
              (set! (-> gp-0 ground-normal-sum y) 1.0)
              )
          )
        (+! (-> gp-0 ground-normal-sum y) 6.0)
        (vector-normalize! (-> gp-0 ground-normal-sum) 1.0)
        (vector-float*! (-> this gravity-dir) (-> gp-0 ground-normal-sum) -1.0)
        (vector-float*! (-> gp-0 force) (-> this gravity-dir) (* (-> s4-0 extra gravity) (-> s4-0 info mass)))
        (add-force! s5-0 (-> gp-0 force))
        )
      (rigid-body-object-method-53 this arg0)
      (vehicle-method-96 this arg0)
      (countdown (s1-0 (-> s4-0 physics-model wheel-count))
        (let* ((a1-25 (-> this wheel s1-0))
               (v1-69 (-> a1-25 info))
               )
          (set! (-> gp-0 wsphere quad) (-> a1-25 trans quad))
          (set! (-> gp-0 wsphere r) (* (-> v1-69 scale) (-> v1-69 radius)))
          )
        (vehicle-method-95 this (-> gp-0 wsphere) arg0)
        0
        )
      (let ((f0-38 (* -0.000012207031 (vector-length (-> s5-0 lin-velocity)) (-> s4-0 handling drag-force-factor))))
        (vector-float*! (-> gp-0 force) (-> s5-0 lin-velocity) f0-38)
        )
      (add-force! s5-0 (-> gp-0 force))
      (when (or (and (logtest? (-> this v-flags) (vehicle-flag in-air))
                     (and (not (logtest? (-> this v-flags) (vehicle-flag dead)))
                          (and (< (-> s5-0 matrix uvec y) 0.0) (< (- (-> gp-0 cur-time) (-> this impact-time)) (the-as uint 10)))
                          )
                     )
                (logtest? (vehicle-flag overturned) (-> this v-flags))
                )
        (vector-reset! (-> gp-0 local-pos))
        (set! (-> gp-0 local-pos y) -6144.0)
        (when (logtest? (vehicle-flag overturned) (-> this v-flags))
          (let ((f0-42 (* 0.0033333334 (the float (- (current-time) (the-as int (-> this overturned-time)))))))
            (set! (-> gp-0 local-pos y) (* (+ -32768.0 (* -16384.0 f0-42))
                                           (-> s4-0 handling roll-control-factor)
                                           (fmax 0.1 (- (-> s5-0 matrix uvec y)))
                                           )
                  )
            )
          )
        (vector-matrix*! (-> gp-0 world-pos) (-> gp-0 local-pos) (-> gp-0 mat))
        (vector-reset! (-> gp-0 force))
        (set! (-> gp-0 force y) (* -0.5 (-> s4-0 extra gravity) (-> s4-0 info mass)))
        (rigid-body-control-method-22 s5-0 (-> gp-0 world-pos) (-> gp-0 force))
        )
      )
    0
    (none)
    )
  )

(defmethod apply-gravity ((this wvehicle) (arg0 float))
  (apply-gravity! this arg0)
  (none)
  )

(defmethod apply-gravity1 ((this wvehicle) (arg0 float))
  (apply-gravity! this arg0)
  (none)
  )
