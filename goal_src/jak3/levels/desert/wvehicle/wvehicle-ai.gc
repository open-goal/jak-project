;;-*-Lisp-*-
(in-package goal)

;; name: wvehicle-ai.gc
;; name in dgo: wvehicle-ai
;; dgos: LPATK, LFACCAR, WASALL

;; DECOMP BEGINS

(defmethod wvehicle-method-168 ((this wvehicle))
  (if (not (logtest? (-> this rbody flags) (rigid-body-flag enable-physics)))
      (apply-momentum! this)
      )
  (set! (-> this camera-dist2) (vector-vector-distance-squared (-> this root trans) (camera-pos)))
  (set! (-> this player-dist2) (vector-vector-distance-squared (-> this root trans) (target-pos 0)))
  (let* ((s4-2 (handle->process (-> this target-status handle)))
         (s5-2 (if (type? s4-2 process-focusable)
                   s4-2
                   )
               )
         )
    (when s5-2
      (set! (-> this target-status position quad) (-> (get-trans (the-as process-focusable s5-2) 3) quad))
      (set! (-> this target-status velocity quad) (-> (get-transv (the-as process-focusable s5-2)) quad))
      )
    )
  ((-> this control-hook) this)
  (vehicle-method-117 this)
  0
  (none)
  )

(defmethod vehicle-method-141 ((this wvehicle))
  (logtest? (vehicle-flag dead player-driving net-player-driving ai-driving waiting-for-player)
            (-> this v-flags)
            )
  )

(defmethod vehicle-method-139 ((this wvehicle))
  (set! (-> this nav flags) (nav-control-flag display-marks update-heading-from-facing))
  (when (logtest? (vehicle-flag ai-driving) (-> this v-flags))
    (let ((v1-4 (-> this nav)))
      (set! (-> v1-4 target-speed) 0.0)
      )
    0
    (let ((v1-6 (-> this nav)))
      (set! (-> v1-6 acceleration) 40960.0)
      )
    0
    (let ((v1-8 (-> this nav)))
      (set! (-> v1-8 turning-acceleration) 40960.0)
      )
    0
    (let ((v1-10 (-> this nav)))
      (set! (-> v1-10 max-rotation-rate) 16384.0)
      )
    0
    (set! (-> this nav callback-info) *default-nav-callback-info*)
    )
  0
  (none)
  )

(defmethod control-hook-ai ((this wvehicle) (arg0 vehicle-controls))
  (local-vars (v1-50 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (new 'stack-no-clear 'wvehicle-physics-work)))
      (mem-set32! (the-as pointer (-> gp-0 forward-dir)) 6 0)
      (set! (-> gp-0 wsphere r) (seconds-per-frame))
      (set! (-> gp-0 friction-coef) (the-as float (current-time)))
      (vehicle-method-140 this)
      (set! (-> gp-0 mat rvec quad) (-> this rbody position quad))
      (set! (-> gp-0 mat uvec quad) (-> this rbody lin-velocity quad))
      (set! (-> gp-0 probe-dir quad) (-> this rbody matrix fvec quad))
      (set! (-> gp-0 steering-axis quad) (-> this rbody matrix rvec quad))
      (set! (-> gp-0 steering-axis y) 0.0)
      (set! (-> gp-0 side-dir z) (vector-length (-> gp-0 mat uvec)))
      (set! (-> gp-0 wheel-axis z) (vector-dot (-> gp-0 mat uvec) (-> gp-0 probe-dir)))
      (cond
        ((logtest? (vehicle-flag rammed-target) (-> this v-flags))
         (if (or (and (< (the-as uint 600) (- (the-as uint (-> gp-0 friction-coef)) (the-as uint (-> this ram-time))))
                      (< (the-as uint 150) (- (the-as uint (-> gp-0 friction-coef)) (the-as uint (-> this impact-time))))
                      )
                 (and (logtest? (-> this v-flags) (vehicle-flag impact)) (< (-> this impact-local-pos z) 0.0))
                 )
             (set! (-> this v-flags) (the-as vehicle-flag (logclear (-> this v-flags) (vehicle-flag rammed-target))))
             )
         )
        (else
          (when (and (logtest? (-> this v-flags) (vehicle-flag impact))
                     (< (- (the-as uint (-> gp-0 friction-coef)) (the-as uint (-> this prev-impact-time))) (the-as uint 30))
                     (< (-> gp-0 wheel-axis z) 40960.0)
                     (< 0.0 (-> gp-0 wheel-axis z))
                     (< 0.0 (-> this impact-local-pos z))
                     )
            (set! (-> this v-flags) (the-as vehicle-flag (logior (vehicle-flag rammed-target) (-> this v-flags))))
            (set! (-> this ram-time) (the-as uint (-> gp-0 friction-coef)))
            )
          )
        )
      (set! (-> gp-0 wheel-axis x) 0.0)
      (let ((v1-38 (-> this ai-state)))
        (b! (!= v1-38 1) cfg-45 :delay (empty-form))
        (let* ((s4-0 (handle->process (-> this target-status handle)))
               (a0-32 (if (type? s4-0 process-focusable)
                          s4-0
                          )
                      )
               )
          (b! a0-32 cfg-39 :delay (empty-form))
          (set! (-> gp-0 side-dir x) 1.0)
          (b! #t cfg-64 :delay (nop!))
          (label cfg-39)
          (set! (-> gp-0 force quad) (-> (the-as process-focusable a0-32) node-list data 0 bone transform fvec quad))
          )
        (set! (-> gp-0 mat fvec quad) (-> this target-status position quad))
        (set! (-> gp-0 mat trans quad) (-> this target-status velocity quad))
        (let* ((f0-11 40960.0)
               (f0-13 (* f0-11 f0-11))
               )
          (.lvf vf1 (&-> (-> gp-0 mat trans) quad))
          (.add.w.vf vf2 vf0 vf0 :mask #b1)
          (.mul.vf vf1 vf1 vf1)
          (.mul.x.vf acc vf2 vf1 :mask #b1)
          (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
          (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
          (.mov v1-50 vf1)
          (if (< f0-13 v1-50)
              (set! (-> gp-0 force quad) (-> gp-0 mat trans quad))
              )
          )
        (set! (-> gp-0 wheel-axis x)
              (fmax (fmin (+ 20480.0 (vector-length (-> gp-0 mat trans))) (-> this ai-max-speed)) (-> this ai-min-speed))
              )
        (vector-normalize! (-> gp-0 force) 1.0)
        (vector+float*! (-> gp-0 velocity) (-> gp-0 mat fvec) (-> gp-0 force) 81920.0)
        (vector+float*! (-> gp-0 velocity) (-> gp-0 velocity) (-> gp-0 mat trans) 0.5)
        (when (logtest? (vehicle-flag vf54) (-> this v-flags))
          (set! (-> gp-0 axis quad) (-> gp-0 mat rvec quad))
          (set! (-> gp-0 dir quad) (-> gp-0 mat uvec quad))
          (set! (-> gp-0 ground-normal-sum quad) (-> gp-0 mat fvec quad))
          (set! (-> gp-0 ground-pos quad) (-> gp-0 mat trans quad))
          (set! (-> gp-0 axis y) 0.0)
          (set! (-> gp-0 dir y) 0.0)
          (set! (-> gp-0 ground-normal-sum y) 0.0)
          (set! (-> gp-0 ground-pos y) 0.0)
          (set! (-> gp-0 wsphere z) (nearest-dist2-between-moving-points
                                      (the-as vector (-> gp-0 mat))
                                      (-> gp-0 mat uvec)
                                      (-> gp-0 mat fvec)
                                      (-> gp-0 mat trans)
                                      1.0
                                      )
                )
          (let ((f0-25 (-> gp-0 wsphere z))
                (f1-8 40960.0)
                )
            (when (< f0-25 (* f1-8 f1-8))
              (vector+float*! (-> gp-0 p-body) (-> gp-0 ground-normal-sum) (-> gp-0 ground-pos) 0.0)
              (vector-! (-> gp-0 world-normal) (-> gp-0 axis) (-> gp-0 p-body))
              (vector-normalize! (-> gp-0 world-normal) 1.0)
              (vector+float*! (-> gp-0 velocity) (the-as vector (-> gp-0 mat)) (-> gp-0 world-normal) 163840.0)
              (set! (-> gp-0 wheel-axis x) (* 0.5 (-> gp-0 wheel-axis x)))
              0
              )
            )
          )
        0
        (b! #t cfg-49 :delay (nop!))
        (label cfg-45)
        (cond
          ((= v1-38 2)
           (set! (-> gp-0 velocity quad) (-> this ai-target-point quad))
           (set! (-> gp-0 wheel-axis x) (-> this ai-max-speed))
           )
          ((zero? v1-38)
           )
          )
        )
      (label cfg-49)
      (cond
        ((>= 0.0 (-> gp-0 wheel-axis x))
         (set! (-> gp-0 side-dir x) 1.0)
         )
        ((begin
           (cond
             ((logtest? (vehicle-flag vf52) (-> this v-flags))
              (vector-! (-> gp-0 mat trans) (-> gp-0 velocity) (-> this root trans))
              (vector-normalize! (-> gp-0 mat trans) (-> gp-0 wheel-axis x))
              )
             (else
               (when (-> this nav)
                 (let ((a0-69 (-> this nav state))
                       (v1-92 (-> gp-0 velocity))
                       )
                   (logclear! (-> a0-69 flags) (nav-state-flag directional-mode))
                   (logior! (-> a0-69 flags) (nav-state-flag target-poly-dirty))
                   (set! (-> a0-69 target-pos quad) (-> v1-92 quad))
                   )
                 0
                 (let ((v1-95 (-> this nav)))
                   (set! (-> v1-95 target-speed) (-> gp-0 wheel-axis x))
                   )
                 0
                 (let ((a1-22 (-> this nav state)))
                   (set! (-> gp-0 mat trans quad) (-> a1-22 velocity quad))
                   )
                 )
               )
             )
           (when (< (vector-dot (-> gp-0 mat trans) (-> gp-0 probe-dir)) 0.0)
             (vector-float*!
               (-> gp-0 mat trans)
               (-> gp-0 steering-axis)
               (vector-dot (-> gp-0 mat trans) (-> gp-0 steering-axis))
               )
             (vector-normalize! (-> gp-0 mat trans) (-> gp-0 wheel-axis x))
             )
           (vector-! (-> gp-0 local-pos) (-> gp-0 mat trans) (-> gp-0 mat uvec))
           (vector-float*! (-> gp-0 tmp) (-> gp-0 local-pos) 1.5)
           (set! (-> gp-0 wheel-axis w) 0.0)
           (dotimes (v1-108 2)
             (let ((a0-80 (-> this wheel (+ v1-108 2))))
               (if (logtest? (-> a0-80 flags) 2)
                   (+! (-> gp-0 wheel-axis w) (-> a0-80 side-vel))
                   )
               )
             )
           (set! (-> gp-0 wheel-axis y)
                 (* 60.0
                    (+ (* 0.0000061035157 (- (-> gp-0 wheel-axis x) (-> gp-0 side-dir z)))
                       (* -0.0000061035157 (fabs (-> gp-0 wheel-axis w)))
                       )
                    (-> this info handling ai-throttle-factor)
                    )
                 )
           (set! (-> gp-0 forward-dir y)
                 (fmax 0.0 (fmin 1.0 (+ (-> this controls throttle) (* (-> gp-0 wsphere r) (-> gp-0 wheel-axis y)))))
                 )
           (set! (-> gp-0 forward-dir z)
                 (fmax 0.0 (fmin 1.0 (* 0.000048828126 (+ (- -4096.0 (-> gp-0 wheel-axis x)) (-> gp-0 side-dir z)))))
                 )
           (set! (-> gp-0 wsphere x) (vector-dot (-> gp-0 steering-axis) (-> gp-0 tmp)))
           (set! (-> gp-0 wsphere y) (- (-> gp-0 wheel-axis w) (fmax -12288.0 (fmin 12288.0 (-> gp-0 wheel-axis w)))))
           (set! (-> gp-0 forward-dir x) (fmax -1.0 (fmin 1.0 (* 2.0
                                                                 (-> this info handling ai-steering-factor)
                                                                 (/ 1.0 (+ 4096.0 (-> gp-0 side-dir z)))
                                                                 (+ (-> gp-0 wsphere x) (-> gp-0 wsphere y))
                                                                 )
                                                          )
                                               )
                 )
           (logtest? (vehicle-flag rammed-target) (-> this v-flags))
           )
         (set! (-> gp-0 forward-dir y) 0.0)
         (set! (-> gp-0 forward-dir z) 1.0)
         (set! (-> gp-0 forward-dir x) (* -1.0 (-> gp-0 forward-dir x)))
         )
        )
      (label cfg-64)
      (vehicle-method-92 this (the-as vehicle-controls (-> gp-0 forward-dir)))
      )
    0
    (none)
    )
  )
