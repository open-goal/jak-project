;;-*-Lisp-*-
(in-package goal)

;; name: wvehicle-effects.gc
;; name in dgo: wvehicle-effects
;; dgos: LPATK, LFACCAR, WASALL

(define-extern *wheel-trail-info* light-trail-composition)

;; DECOMP BEGINS

(deftype wvehicle-wheel-launcher-spec (structure)
  ((mat              matrix)
   (particle-system  sparticle-system)
   (launcher         sparticle-launcher)
   (num-spec         sp-field-init-spec)
   (r-spec           sp-field-init-spec)
   (g-spec           sp-field-init-spec)
   (b-spec           sp-field-init-spec)
   (a-spec           sp-field-init-spec)
   (scale-x-spec     sp-field-init-spec)
   (scale-y-spec     sp-field-init-spec)
   (fade-a-spec      sp-field-init-spec)
   (ptr-birth-accum  (pointer sparticle-launch-control))
   (i-birth-accum    int8)
   )
  :pack-me
  )


(deftype wvehicle-part-work (structure)
  ((local-mat        matrix                        :inline)
   (world-mat        matrix                        :inline)
   (velocity         vector                        :inline)
   (side-dir         vector                        :inline)
   (up-dir           vector                        :inline)
   (forward-dir      vector                        :inline)
   (wheel-axis       vector                        :inline)
   (surface-pos      vector                        :inline)
   (part-vel         vector                        :inline)
   (pos-l            vector                        :inline)
   (pos-r            vector                        :inline)
   (offset           vector                        :inline)
   (zero-offset      vector                        :inline)
   (prev-pos         vector                        :inline)
   (surface-type     uint8)
   (wheel-rev-speed  float)
   (wheel-speed      float)
   (wheel-radius     float)
   (wheel-width      float)
   (part-num         float)
   (rand-val         float)
   (scale            float)
   (slip             float)
   (up-force         float)
   (alpha            float)
   (alpha-range      float)
   (vel-scale        float)
   (cur-time         uint32)
   (ups              float)
   (dirt-launcher    wvehicle-wheel-launcher-spec  :inline)
   (dust-launcher    wvehicle-wheel-launcher-spec  :inline)
   (spray-launcher   wvehicle-wheel-launcher-spec  :inline)
   (ripple-launcher  wvehicle-wheel-launcher-spec  :inline)
   (dummy-spec       sp-field-init-spec            :inline)
   )
  )


(if (or (zero? *wheel-trail-info*) (!= loading-level global))
    (set! *wheel-trail-info* (new 'loading-level 'light-trail-composition))
    )

(set! (-> *wheel-trail-info* color-mode) (the-as uint 3))

(set! (-> *wheel-trail-info* color-repeat-dist) 73728.0)

(set! (-> *wheel-trail-info* alpha-1-mode) (the-as uint 0))

(set! (-> *wheel-trail-info* alpha-2-mode) (the-as uint 6))

(set! (-> *wheel-trail-info* base-alpha) 0.1)

(set! (-> *wheel-trail-info* alpha-repeat-dist) 12288.0)

(set! (-> *wheel-trail-info* width-mode) (the-as uint 0))

(set! (-> *wheel-trail-info* base-width) 1.0)

(set! (-> *wheel-trail-info* width-repeat-dist) 4096.0)

(set! (-> *wheel-trail-info* uv-mode) (the-as uint 3))

(set! (-> *wheel-trail-info* uv-repeat-dist) 8192.0)

(set! (-> *wheel-trail-info* lie-mode) (the-as uint 0))

(set! (-> *wheel-trail-info* max-age) (seconds 3))

(if #f
    (set! (-> *wheel-trail-info* tex-id)
          (the-as uint (lookup-texture-id-by-name (the-as string #f) (the-as string #f)))
          )
    (set! (-> *wheel-trail-info* tex-id) (the-as uint #x100300))
    )

(set! (-> *wheel-trail-info* width-curve) (the-as curve2d-piecewise *curve-unity*))

(set! (-> *wheel-trail-info* color-curve) (the-as curve-color-piecewise *trail-color-curve-white*))

(set! (-> *wheel-trail-info* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

(set! (-> *wheel-trail-info* alpha-curve-2) #f)

(set! (-> *wheel-trail-info* zbuffer?) #f)

(set! (-> *wheel-trail-info* lie-vector quad) (-> *up-vector* quad))

(set! (-> *wheel-trail-info* use-tape-mode?) #f)

(set! (-> *wheel-trail-info* blend-mode) (the-as uint 2))

(set! (-> *wheel-trail-info* frame-stagger) (the-as uint 1))

(deftype tire-trail-crumb (light-trail-breadcrumb)
  ((offset  vector  :inline)
   (uu      float   :overlay-at (-> offset data 3))
   )
  )


(deftype tire-trail (light-trail)
  ()
  (:methods
    (tire-trail-method-22 (_type_) none)
    (tire-trail-method-23 (_type_) none)
    )
  )


;; WARN: Return type mismatch vector vs none.
(defmethod light-trail-method-18 ((this tire-trail) (arg0 light-trail-breadcrumb) (arg1 int) (arg2 vector) (arg3 vector))
  (set! (-> arg3 quad) (-> (&+ arg0 16) pos quad))
  (none)
  )

(defmethod light-trail-method-9 ((this tire-trail) (arg0 light-trail-composition) (arg1 int))
  (set! (-> this crumb-size) (the-as uint 32))
  (call-parent-method this arg0 arg1)
  (none)
  )

(defmethod wvehicle-method-195 ((this wvehicle))
  ; TODO trail tracker stuff
  ; (let ((s5-0 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
  ;   (set! (-> s5-0 tracked-obj) (process->handle this))
  ;   (set! (-> s5-0 max-num-crumbs) 80)
  ;   (set! (-> s5-0 appearance) *wheel-trail-info*)
  ;   (dotimes (s4-0 (-> this info physics-model wheel-count))
  ;     (when (not (handle->process (-> this wheel s4-0 tread-tracker)))
  ;       (set! (-> *wheel-trail-info* tex-id) (the-as uint (-> this wheel s4-0 info tread-tid)))
  ;       (set! (-> this wheel s4-0 tread-tracker) (process->handle (spawn-tire-trail-tracker this s5-0)))
  ;       )
  ;     )
  ;   )
  0
  (none)
  )

(defmethod wvehicle-method-196 ((this wvehicle))
  (dotimes (s5-0 (-> this info physics-model wheel-count))
    (send-event (handle->process (-> this wheel s5-0 tread-tracker)) 'die)
    (set! (-> this wheel s5-0 tread-tracker) (the-as handle #f))
    )
  0
  (none)
  )

(defmethod wvehicle-method-189 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work) (arg2 wvehicle-wheel-launcher-spec))
  (let ((s5-0 (-> arg2 mat)))
    (let ((s3-0 (-> this info particle-common)))
      (set! (-> s5-0 trans quad) (-> arg1 surface-pos quad))
      (set! (-> arg2 num-spec initial-valuef) (-> arg1 part-num))
      (set! (-> arg2 num-spec random-rangef) 0.0)
      (set! (-> arg2 a-spec initial-valuef) (-> arg1 alpha))
      (set! (-> arg2 a-spec random-rangef) (-> arg1 alpha-range))
      (set! (-> arg2 scale-x-spec initial-valuef) (-> arg1 scale))
      (set! (-> arg2 scale-x-spec random-rangef) (* 0.5 (-> arg1 scale)))
      (set! (-> arg2 scale-y-spec initial-valuef) (-> arg1 scale))
      (set! (-> arg2 scale-y-spec random-rangef) 0.0)
      (rigid-body-control-method-23 (-> this rbody) (-> arg1 surface-pos) (-> arg1 velocity))
      (vector-float*! (-> arg1 velocity) (-> arg1 velocity) (-> arg1 vel-scale))
      (vector+float*! (-> arg1 velocity) (-> arg1 velocity) (-> arg1 forward-dir) (-> arg1 part-vel z))
      (vector+float*! (-> arg1 velocity) (-> arg1 velocity) (-> arg1 up-dir) (-> arg1 part-vel y))
      (vector+float*! (-> arg1 velocity) (-> arg1 velocity) (-> arg1 side-dir) (-> arg1 part-vel x))
      (let ((v1-21 (-> s3-0 part-vel))
            (a0-6 (-> arg1 velocity))
            (f0-13 300.0)
            )
        (vector-float*! v1-21 a0-6 (/ 1.0 f0-13))
        )
      )
    (when (nonzero? (-> arg2 launcher))
      (let ((s4-1 (-> arg2 ptr-birth-accum)))
        (set! (-> arg2 launcher birthaccum) (the-as float (-> s4-1 0)))
        (launch-particles :system (-> arg2 particle-system) (-> arg2 launcher) s5-0 :origin-is-matrix #t)
        (set! (-> s4-1 0) (the-as sparticle-launch-control (-> arg2 launcher birthaccum)))
        (if (< 1.0 (the-as float (-> s4-1 0)))
            (set! (-> s4-1 0) (the-as sparticle-launch-control 0.0))
            )
        )
      )
    )
  0
  (none)
  )

(defmethod wvehicle-method-190 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work))
  (when (not (-> arg1 dirt-launcher particle-system))
    (set! (-> arg1 dirt-launcher particle-system) *sp-particle-system-2d*)
    (set! (-> arg1 dirt-launcher launcher) (-> *part-id-table* 954))
    (set! (-> arg1 dirt-launcher num-spec) (-> *part-id-table* 954 init-specs 2))
    (set! (-> arg1 dirt-launcher a-spec) (-> *part-id-table* 954 init-specs 11))
    (set! (-> arg1 dirt-launcher scale-x-spec) (-> *part-id-table* 954 init-specs 5))
    (set! (-> arg1 dirt-launcher scale-y-spec) (-> *part-id-table* 954 init-specs 7))
    (set! (-> arg1 dirt-launcher mat) (-> arg1 local-mat))
    (set! (-> arg1 dirt-launcher i-birth-accum) 0)
    0
    )
  (set! (-> arg1 dirt-launcher ptr-birth-accum) (-> arg0 part-birth-accum))
  (set! (-> arg1 part-vel x) (-> arg0 side-vel))
  (set! (-> arg1 part-vel y) (* 0.7 (+ (fabs (-> arg1 wheel-rev-speed)) (* 2048.0 (-> arg1 slip)))))
  (set! (-> arg1 rand-val) (rand-vu-float-range -1.0 0.5))
  (set! (-> arg1 part-vel z) (* (-> arg1 rand-val) (-> arg1 wheel-rev-speed)))
  (set! (-> arg1 part-num) (fmin 20.0 (* 0.1 (-> arg1 up-force) (+ 1.0 (-> arg1 slip)))))
  (set! (-> arg1 scale) (* 983.04 (fmin 1.0 (* 0.125 (-> arg1 up-force) (+ 1.0 (-> arg1 slip))))))
  (set! (-> arg1 vel-scale) 1.0)
  (set! (-> arg1 alpha) 128.0)
  (set! (-> arg1 alpha-range) 0.0)
  (if (< 0.5 (-> arg1 part-num))
      (wvehicle-method-189 this arg0 arg1 (-> arg1 dirt-launcher))
      )
  0
  (none)
  )

;; WARN: Return type mismatch int vs symbol.
(defmethod wvehicle-method-191 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work))
  (when (not (-> arg1 dust-launcher particle-system))
    (set! (-> arg1 dust-launcher particle-system) *sp-particle-system-2d*)
    (set! (-> arg1 dust-launcher launcher) (-> *part-id-table* 964))
    (set! (-> arg1 dust-launcher num-spec) (-> *part-id-table* 964 init-specs 2))
    (set! (-> arg1 dust-launcher a-spec) (-> *part-id-table* 964 init-specs 9))
    (set! (-> arg1 dust-launcher scale-x-spec) (-> *part-id-table* 964 init-specs 3))
    (set! (-> arg1 dust-launcher scale-y-spec) (-> *part-id-table* 964 init-specs 5))
    (set! (-> arg1 dust-launcher mat) (-> arg1 local-mat))
    )
  (set! (-> arg1 dust-launcher i-birth-accum) 1)
  (set! (-> arg1 dust-launcher ptr-birth-accum) (&-> arg0 part-birth-accum 1))
  (let* ((f0-0 (-> arg0 side-vel))
         (f0-2 (* f0-0 f0-0))
         (f1-0 (-> arg0 forward-vel))
         (f30-0 (sqrtf (+ f0-2 (* f1-0 f1-0))))
         )
    (vector-reset! (-> arg1 part-vel))
    (set! (-> arg1 rand-val) (rand-vu-float-range -1.0 1.0))
    (set! (-> arg1 part-vel y) 8192.0)
    (set! (-> arg1 part-vel x) (* 4096.0 (-> arg1 rand-val)))
    (set! (-> arg1 part-num) (fmin 1.0 (* 0.000016276043 (+ -40960.0 (fabs f30-0)))))
    )
  (set! (-> arg1 scale) 8192.0)
  (if (zero? (-> arg1 surface-type))
      (set! (-> arg1 part-num) (* 0.25 (-> arg1 part-num)))
      )
  (set! (-> arg1 alpha) 32.0)
  (set! (-> arg1 alpha-range) 32.0)
  (set! (-> arg1 vel-scale) 0.0)
  (if (< 0.05 (-> arg1 part-num))
      (wvehicle-method-189 this arg0 arg1 (-> arg1 dust-launcher))
      )
  (the-as symbol 0)
  )

(defmethod wvehicle-method-192 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work))
  (when (not (-> arg1 dust-launcher particle-system))
    (set! (-> arg1 dust-launcher particle-system) *sp-particle-system-2d*)
    (set! (-> arg1 dust-launcher launcher) (-> *part-id-table* 964))
    (set! (-> arg1 dust-launcher num-spec) (-> *part-id-table* 964 init-specs 2))
    (set! (-> arg1 dust-launcher a-spec) (-> *part-id-table* 964 init-specs 9))
    (set! (-> arg1 dust-launcher scale-x-spec) (-> *part-id-table* 964 init-specs 3))
    (set! (-> arg1 dust-launcher scale-y-spec) (-> *part-id-table* 964 init-specs 5))
    (set! (-> arg1 dust-launcher mat) (-> arg1 local-mat))
    )
  (set! (-> arg1 dust-launcher i-birth-accum) 2)
  (set! (-> arg1 dust-launcher ptr-birth-accum) (&-> arg0 part-birth-accum 2))
  (set! (-> arg1 part-vel x) (-> arg0 side-vel))
  (set! (-> arg1 part-vel y) 8192.0)
  (set! (-> arg1 rand-val) (rand-vu-float-range -1.0 0.5))
  (set! (-> arg1 part-vel z) (* (-> arg1 rand-val) (-> arg1 wheel-rev-speed)))
  (set! (-> arg1 rand-val) (* 0.5 (-> arg1 up-force) (-> arg1 slip)))
  (set! (-> arg1 part-num) (fmin 0.4 (-> arg1 rand-val)))
  (set! (-> arg1 alpha) (* 40.0 (fmin 1.0 (-> arg1 rand-val))))
  (set! (-> arg1 alpha-range) (* 0.25 (-> arg1 alpha)))
  (set! (-> arg1 vel-scale) 0.75)
  (set! (-> arg1 scale) 16384.0)
  (if (< 0.05 (-> arg1 part-num))
      (wvehicle-method-189 this arg0 arg1 (-> arg1 dust-launcher))
      )
  0
  (none)
  )

(defmethod wvehicle-method-193 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work))
  (when (not (-> arg1 spray-launcher particle-system))
    (set! (-> arg1 spray-launcher particle-system) *sp-particle-system-2d*)
    (set! (-> arg1 spray-launcher launcher) (-> *part-id-table* 955))
    (set! (-> arg1 spray-launcher num-spec) (-> *part-id-table* 955 init-specs 2))
    (set! (-> arg1 spray-launcher r-spec) (-> *part-id-table* 955 init-specs 8))
    (set! (-> arg1 spray-launcher g-spec) (-> *part-id-table* 955 init-specs 9))
    (set! (-> arg1 spray-launcher b-spec) (-> *part-id-table* 955 init-specs 10))
    (set! (-> arg1 spray-launcher a-spec) (-> *part-id-table* 955 init-specs 11))
    (set! (-> arg1 spray-launcher scale-x-spec) (-> arg1 dummy-spec))
    (set! (-> arg1 spray-launcher scale-y-spec) (-> arg1 dummy-spec))
    (set! (-> arg1 spray-launcher mat) (-> arg1 local-mat))
    (set! (-> arg1 spray-launcher i-birth-accum) 2)
    )
  (set! (-> arg1 spray-launcher ptr-birth-accum) (&-> arg0 part-birth-accum 2))
  (set! (-> arg1 part-vel x) (-> arg0 side-vel))
  (set! (-> arg1 part-vel y)
        (* 0.75 (fmax (fmax (fabs (-> arg1 wheel-rev-speed)) (fabs (-> arg0 forward-vel))) (fabs (-> arg0 side-vel))))
        )
  (let ((f0-4 (fmin 1.0 (* 0.000008138021 (-> arg1 part-vel y)))))
    (set! (-> this water-sound-envelope) (fmax (-> this water-sound-envelope) f0-4))
    )
  (set! (-> arg1 rand-val) (rand-vu-float-range -1.0 0.5))
  (set! (-> arg1 part-vel z) (* (-> arg1 rand-val) (-> arg1 wheel-rev-speed)))
  (set! (-> arg1 part-num) (fmin 5.0 (* 0.000008138021 (-> arg1 part-vel y))))
  (set! (-> arg1 alpha-range) 0.0)
  (set! (-> arg1 vel-scale) 1.0)
  (set! (-> arg1 surface-pos y) (-> this water-height))
  (cond
    ((logtest? (-> this water-flags) 128)
     (let ((f0-16 (+ 1.0 (* -0.2222 (rand-vu)))))
       (set! (-> arg1 spray-launcher r-spec initial-valuef) (* 105.0 f0-16))
       (set! (-> arg1 spray-launcher g-spec initial-valuef) (* 90.0 f0-16))
       (set! (-> arg1 spray-launcher b-spec initial-valuef) (* 60.0 f0-16))
       )
     (set! (-> arg1 alpha) 128.0)
     )
    (else
      (set! (-> arg1 spray-launcher r-spec initial-valuef) 255.0)
      (set! (-> arg1 spray-launcher g-spec initial-valuef) 255.0)
      (set! (-> arg1 spray-launcher b-spec initial-valuef) 255.0)
      (set! (-> arg1 alpha) (* 102.4 (fmin 1.0 (* 0.0000040690106 (-> arg1 part-vel y)))))
      )
    )
  (if (< 0.1 (-> arg1 part-num))
      (wvehicle-method-189 this arg0 arg1 (-> arg1 spray-launcher))
      )
  0
  (none)
  )

(defmethod wvehicle-method-194 ((this wvehicle) (arg0 vehicle-wheel-state) (arg1 wvehicle-part-work))
  (when (not (-> arg1 ripple-launcher particle-system))
    (set! (-> arg1 ripple-launcher particle-system) *sp-particle-system-3d*)
    (set! (-> arg1 ripple-launcher launcher) (-> *part-id-table* 956))
    (set! (-> arg1 ripple-launcher num-spec) (-> *part-id-table* 956 init-specs 1))
    (set! (-> arg1 ripple-launcher r-spec) (-> *part-id-table* 956 init-specs 4))
    (set! (-> arg1 ripple-launcher g-spec) (-> *part-id-table* 956 init-specs 5))
    (set! (-> arg1 ripple-launcher b-spec) (-> *part-id-table* 956 init-specs 6))
    (set! (-> arg1 ripple-launcher a-spec) (-> *part-id-table* 956 init-specs 7))
    (set! (-> arg1 ripple-launcher scale-x-spec) (-> *part-id-table* 956 init-specs 2))
    (set! (-> arg1 ripple-launcher scale-y-spec) (-> *part-id-table* 956 init-specs 3))
    (set! (-> arg1 ripple-launcher fade-a-spec) (-> *part-id-table* 956 init-specs 10))
    (set! (-> arg1 ripple-launcher mat) (-> arg1 world-mat))
    (set! (-> arg1 ripple-launcher i-birth-accum) 3)
    )
  (set! (-> arg1 ripple-launcher ptr-birth-accum) (&-> arg0 part-birth-accum 3))
  (let* ((f0-0 (-> arg0 forward-vel))
         (f0-2 (* f0-0 f0-0))
         (f1-0 (-> arg0 side-vel))
         )
    (set! (-> arg1 wheel-speed) (sqrtf (+ f0-2 (* f1-0 f1-0))))
    )
  (vector-reset! (-> arg1 part-vel))
  (set! (-> arg1 part-num) (fmax 0.1 (fmin 1.0 (* 0.0000048828124 (-> arg1 wheel-speed)))))
  (set! (-> arg1 alpha) (* 32.0 (fmax 0.5 (-> arg1 part-num))))
  (set! (-> arg1 alpha-range) (-> arg1 alpha))
  (let* ((f0-10 -0.07111111)
         (f0-11 (* 2.0 (fmax 0.5 (-> arg1 part-num)) f0-10))
         )
    (set! (-> arg1 ripple-launcher fade-a-spec initial-valuef) f0-11)
    (set! (-> arg1 ripple-launcher fade-a-spec random-rangef) f0-11)
    )
  (cond
    ((logtest? (-> this water-flags) 128)
     (let ((f0-14 (+ 2.0 (* 0.222 (rand-vu)))))
       (set! (-> arg1 ripple-launcher r-spec initial-valuef) (* 45.0 f0-14))
       (set! (-> arg1 ripple-launcher g-spec initial-valuef) (* 30.0 f0-14))
       (set! (-> arg1 ripple-launcher b-spec initial-valuef) (* 20.0 f0-14))
       )
     )
    (else
      (set! (-> arg1 ripple-launcher r-spec initial-valuef) 128.0)
      (set! (-> arg1 ripple-launcher g-spec initial-valuef) 128.0)
      (set! (-> arg1 ripple-launcher b-spec initial-valuef) 128.0)
      )
    )
  (set! (-> arg1 scale) (-> arg1 wheel-radius))
  (set! (-> arg1 vel-scale) 0.0)
  (set! (-> arg1 surface-pos y) (-> this water-height))
  (if #t
      (wvehicle-method-189 this arg0 arg1 (-> arg1 ripple-launcher))
      )
  0
  (none)
  )

(defmethod wvehicle-method-200 ((this wvehicle) (arg0 vector) (arg1 wvehicle-part-work))
  (set! (-> arg1 ups) (seconds-per-frame))
  (set! (-> arg1 surface-pos quad) (-> arg0 quad))
  (set! (-> arg1 surface-pos y) (-> this water-height))
  (rigid-body-control-method-23 (-> this rbody) arg0 (-> arg1 velocity))
  (vector+float*! (-> arg1 prev-pos) arg0 (-> arg1 velocity) (* -1.0 (-> arg1 ups)))
  (when (and (< (-> arg1 surface-pos y) (- (-> arg1 prev-pos y) (-> arg0 w))) (< (-> arg1 velocity y) -40960.0))
    (let ((s4-0 (new 'stack-no-clear 'wvehicle-physics-work)))
      (set! (-> s4-0 mat uvec y) (* 0.0000000029802323 (fabs (-> arg1 velocity y)) (-> arg0 w)))
      (set! (-> s4-0 mat uvec y) (fmin 4.0 (-> s4-0 mat uvec y)))
      (vector-identity! (the-as vector (-> s4-0 mat)))
      (vector-float*! (the-as vector (-> s4-0 mat)) (the-as vector (-> s4-0 mat)) (-> s4-0 mat uvec y))
      (matrix-scale! (-> arg1 world-mat) (the-as vector (-> s4-0 mat)))
      (set! (-> arg1 world-mat trans quad) (-> arg1 surface-pos quad))
      (when (< (the-as uint 300) (- (-> arg1 cur-time) (-> this splash-time)))
        (set! (-> this splash-time) (-> arg1 cur-time))
        (set! (-> s4-0 mat uvec x) (fmax 0.0 (fmin 1.0 (* 0.0000061035157 (fabs (-> arg1 velocity y))))))
        (sound-play-by-name
          (static-sound-name "car-splash")
          (new-sound-id)
          (the int (* 1024.0 (-> s4-0 mat uvec x)))
          0
          0
          (sound-group)
          #t
          )
        )
      )
    (if (logtest? (-> *part-group-id-table* 226 flags) (sp-group-flag sp13))
        (part-tracker-spawn
          part-tracker-subsampler
          :to *entity-pool*
          :group (-> *part-group-id-table* 226)
          :mat-joint (-> arg1 world-mat)
          )
        (part-tracker-spawn
          part-tracker
          :to *entity-pool*
          :group (-> *part-group-id-table* 226)
          :mat-joint (-> arg1 world-mat)
          )
        )
    )
  0
  (none)
  )

(defmethod vehicle-method-78 ((this wvehicle))
  (let ((t9-0 (method-of-type vehicle vehicle-method-78)))
    (t9-0 this)
    )
  (let ((s5-0 (new 'stack-no-clear 'wvehicle-part-work)))
    (set! (-> s5-0 dirt-launcher particle-system) #f)
    (set! (-> s5-0 dust-launcher particle-system) #f)
    (set! (-> s5-0 spray-launcher particle-system) #f)
    (set! (-> s5-0 ripple-launcher particle-system) #f)
    (set! (-> s5-0 cur-time) (the-as uint (current-time)))
    (let* ((v1-3 (-> s5-0 local-mat))
           (a3-0 (-> this rbody matrix))
           (a0-3 (-> a3-0 rvec quad))
           (a1-0 (-> a3-0 uvec quad))
           (a2-0 (-> a3-0 fvec quad))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-3 rvec quad) a0-3)
      (set! (-> v1-3 uvec quad) a1-0)
      (set! (-> v1-3 fvec quad) a2-0)
      (set! (-> v1-3 trans quad) a3-1)
      )
    (matrix-identity! (-> s5-0 world-mat))
    (vector-reset! (-> s5-0 zero-offset))
    (let ((s4-0 (-> this info)))
      (set! (-> s5-0 surface-type) (the-as uint 7))
      (when (logtest? (vehicle-flag player-driving net-player-driving ai-driving) (-> this v-flags))
        (dotimes (s3-0 (-> this info physics-model wheel-count))
          (let ((s2-0 (-> this wheel s3-0)))
            (let ((s1-0 (-> s2-0 info)))
              (when (logtest? (-> s2-0 flags) 2)
                (set! (-> s5-0 surface-pos quad) (-> s2-0 surface-pos quad))
                (set! (-> s5-0 slip) (* 0.00024414062 (+ (fabs (-> s2-0 forward-slip-vel)) (fabs (-> s2-0 side-vel)))))
                (set! (-> s5-0 up-force) (/ (-> s2-0 up-force) (* 0.25 (-> s4-0 extra gravity) (-> s4-0 info mass))))
                (set! (-> s5-0 wheel-radius) (* (-> s1-0 scale) (-> s1-0 radius)))
                (set! (-> s5-0 wheel-width) (* (-> s1-0 scale) (-> s1-0 width)))
                (set! (-> s5-0 wheel-rev-speed) (* (-> s2-0 rev) (-> s5-0 wheel-radius)))
                (set! (-> s5-0 surface-type) (the-as uint (-> s2-0 surface surface-type)))
                (if (< 0.0 (-> s2-0 sink-depth))
                    (set! (-> s5-0 surface-type) (the-as uint 4))
                    )
                (vector-rotate*! (-> s5-0 side-dir) (-> s2-0 local-axis) (-> s5-0 local-mat))
                (set! (-> s5-0 up-dir quad) (-> s2-0 ground-normal quad))
                (vector+float*!
                  (-> s5-0 side-dir)
                  (-> s5-0 side-dir)
                  (-> s5-0 up-dir)
                  (- (vector-dot (-> s5-0 side-dir) (-> s5-0 up-dir)))
                  )
                (vector-normalize! (-> s5-0 side-dir) 1.0)
                (vector-cross! (-> s5-0 forward-dir) (-> s5-0 side-dir) (-> s5-0 up-dir))
                (vector-normalize! (-> s5-0 forward-dir) 1.0)
                (let ((f0-14 (-> this camera-dist2))
                      (f1-10 245760.0)
                      )
                  (when (< f0-14 (* f1-10 f1-10))
                    (let ((v1-29 (-> s5-0 surface-type)))
                      (cond
                        ((or (= v1-29 1) (= v1-29 2))
                         (wvehicle-method-190 this s2-0 s5-0)
                         (wvehicle-method-191 this s2-0 s5-0)
                         (wvehicle-method-192 this s2-0 s5-0)
                         )
                        ((zero? v1-29)
                         (wvehicle-method-191 this s2-0 s5-0)
                         )
                        ((= v1-29 4)
                         (wvehicle-method-193 this s2-0 s5-0)
                         (wvehicle-method-194 this s2-0 s5-0)
                         )
                        )
                      )
                    )
                  )
                )
              (set! (-> *wheel-trail-info* tex-id) (the-as uint (-> s1-0 tread-tid)))
              )
            (let ((s1-1 (handle->process (-> s2-0 tread-tracker))))
              (when s1-1
                (cond
                  ((logtest? (-> s2-0 flags) 2)
                   (set! (-> s5-0 surface-pos quad) (-> s2-0 surface-pos quad))
                   (vector+float*! (-> s5-0 surface-pos) (-> s5-0 surface-pos) (-> s2-0 ground-normal) 204.8)
                   (vector-rotate*! (-> s5-0 wheel-axis) (-> s2-0 local-axis) (-> s5-0 local-mat))
                   (vector+float*!
                     (-> s5-0 wheel-axis)
                     (-> s5-0 wheel-axis)
                     (-> s2-0 ground-normal)
                     (- (vector-dot (-> s5-0 wheel-axis) (-> s2-0 ground-normal)))
                     )
                   (vector-normalize! (-> s5-0 wheel-axis) 1.0)
                   (vector-float*! (-> s5-0 offset) (-> s5-0 wheel-axis) (* 0.5 (-> s5-0 wheel-width)))
                   (vector+! (the-as vector (-> s2-0 trail-pos)) (-> s5-0 surface-pos) (-> s5-0 offset))
                   (vector-! (-> s2-0 trail-pos 1) (-> s5-0 surface-pos) (-> s5-0 offset))
                   )
                  (else
                    (vector+! (-> s5-0 surface-pos) (the-as vector (-> s2-0 trail-pos)) (-> s2-0 trail-pos 1))
                    (vector-float*! (-> s5-0 surface-pos) (-> s5-0 surface-pos) 0.5)
                    )
                  )
                (cond
                  ((logtest? (-> s2-0 prev-flags) 2)
                   (cond
                     ((>= (- (-> s5-0 cur-time) (-> s2-0 tread-time)) (the-as uint 50))
                      (set! (-> s2-0 tread-time) (-> s5-0 cur-time))
                      (let* ((a0-42 (-> (the-as process-focusable s1-1) root))
                             (t9-13 (method-of-object a0-42 y-angle))
                             )
                        (-> s5-0 surface-pos)
                        (-> s5-0 offset)
                        0
                        (t9-13 a0-42)
                        )
                      )
                     (else
                       (let* ((a0-43 (-> (the-as process-focusable s1-1) root))
                              (t9-14 (method-of-object a0-43 global-y-angle-to-point))
                              (a1-29 (-> s5-0 surface-pos))
                              )
                         (-> s5-0 offset)
                         0
                         (t9-14 a0-43 a1-29)
                         )
                       )
                     )
                   (when (not (logtest? (-> s2-0 flags) 2))
                     (+! (-> s5-0 surface-pos y) -2048.0)
                     (let* ((a0-44 (-> (the-as process-focusable s1-1) root))
                            (t9-15 (method-of-object a0-44 y-angle))
                            )
                       (-> s5-0 surface-pos)
                       (-> s5-0 zero-offset)
                       0
                       (t9-15 a0-44)
                       )
                     (set! (-> s2-0 tread-time) (+ (-> s5-0 cur-time) -50))
                     )
                   )
                  (else
                    (when (logtest? (-> s2-0 flags) 2)
                      (set! (-> s2-0 tread-time) (-> s5-0 cur-time))
                      (+! (-> s5-0 surface-pos y) -2048.0)
                      (let* ((a0-45 (-> (the-as process-focusable s1-1) root))
                             (t9-16 (method-of-object a0-45 y-angle))
                             )
                        (-> s5-0 surface-pos)
                        (-> s5-0 zero-offset)
                        0
                        (t9-16 a0-45)
                        )
                      (+! (-> s5-0 surface-pos y) 2048.0)
                      (let* ((a0-46 (-> (the-as process-focusable s1-1) root))
                             (t9-17 (method-of-object a0-46 y-angle))
                             )
                        (-> s5-0 surface-pos)
                        (-> s5-0 offset)
                        0
                        (t9-17 a0-46)
                        )
                      (set! (-> s2-0 tread-time) (+ (-> s5-0 cur-time) -50))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (let ((f0-28 (-> this camera-dist2))
          (f1-17 245760.0)
          )
      (when (< f0-28 (* f1-17 f1-17))
        (let ((s4-1 (-> this root root-prim))
              (s3-1 1)
              )
          (when (< (-> this rbody position y) (+ (-> this water-height) (-> s4-1 local-sphere w)))
            (when (zero? (-> s4-1 prim-core prim-type))
              (let ((v1-103 s4-1))
                (set! s4-1 (-> (the-as collide-shape-prim-group v1-103) child 0))
                (set! s3-1 (the-as int (-> v1-103 specific 0)))
                )
              )
            (while (nonzero? s3-1)
              (+! s3-1 -1)
              (when (= (-> s4-1 prim-core prim-type) -1)
                (let ((a1-33 (-> s4-1 prim-core)))
                  (if (< (- (-> a1-33 world-sphere y) (-> a1-33 world-sphere w)) (-> this water-height))
                      (wvehicle-method-200 this (the-as vector a1-33) s5-0)
                      )
                  )
                )
              (&+! s4-1 80)
              )
            )
          )
        )
      )
    )
  (when (and (logtest? (-> this rbody flags) (rigid-body-flag enable-physics))
             (logtest? (vehicle-flag turbo-boost) (-> this v-flags))
             )
    (let ((s5-1 (new 'stack-no-clear 'wvehicle-draw-thruster-params)))
      (let* ((v1-118 (-> s5-1 mat))
             (a3-9 (-> this node-list data 0 bone transform))
             (a0-54 (-> a3-9 rvec quad))
             (a1-35 (-> a3-9 uvec quad))
             (a2-20 (-> a3-9 fvec quad))
             (a3-10 (-> a3-9 trans quad))
             )
        (set! (-> v1-118 rvec quad) a0-54)
        (set! (-> v1-118 uvec quad) a1-35)
        (set! (-> v1-118 fvec quad) a2-20)
        (set! (-> v1-118 trans quad) a3-10)
        )
      (set! (-> s5-1 width) (-> this info particles thruster-flame-width))
      (set! (-> s5-1 length) (-> this info particles thruster-flame-length))
      (set! (-> s5-1 thrust) 1.0)
      (set! (-> s5-1 fog-fade) (-> this fog-fade))
      (quaternion-rotate-local-z! (-> s5-1 quat) (-> this root quat) 5461.3335)
      (dotimes (s4-2 2)
        (vector-matrix*! (-> s5-1 trans) (-> this info particles thruster-local-pos s4-2) (-> s5-1 mat))
        (vehicle-draw-thruster (-> this info particle-common) (the-as vehicle-draw-thruster-params (-> s5-1 quat)))
        )
      )
    )
  0
  (none)
  )

(defmethod vehicle-method-106 ((this wvehicle))
  (let ((t9-0 (method-of-type vehicle vehicle-method-106)))
    (t9-0 this)
    )
  (sound-stop (-> this engine1-sound-id))
  (sound-stop (-> this engine2-sound-id))
  (sound-stop (-> this engine3-sound-id))
  (set! (-> this eng1-vol) 0.0)
  (set! (-> this eng2-vol) 0.0)
  (set! (-> this eng3-vol) 0.0)
  (set! (-> this engine1-sound-id) (new 'static 'sound-id))
  (set! (-> this engine2-sound-id) (new 'static 'sound-id))
  (set! (-> this engine3-sound-id) (new 'static 'sound-id))
  (dotimes (s5-0 4)
    (let ((s4-0 (-> this tire-roll-loop-state s5-0)))
      (sound-stop (-> s4-0 id))
      (set! (-> s4-0 vol) 0.0)
      (set! (-> s4-0 id) (new 'static 'sound-id))
      )
    0
    )
  (dotimes (s5-1 2)
    (let ((s4-1 (-> this tire-slide-loop-state s5-1)))
      (sound-stop (-> s4-1 id))
      (set! (-> s4-1 vol) 0.0)
      (set! (-> s4-1 id) (new 'static 'sound-id))
      )
    0
    )
  (set! (-> this water-sound-envelope) 0.0)
  (sound-stop (-> this water-sound-id))
  (set! (-> this water-sound-id) (new 'static 'sound-id))
  (sound-stop (-> this turbo-sound-id))
  (set! (-> this turbo-sound-id) (new 'static 'sound-id))
  0
  (none)
  )

(defmethod vehicle-method-135 ((this wvehicle))
  (set! (-> this controls throttle) 1.0)
  ((method-of-type vehicle vehicle-method-135) this)
  (none)
  )

(defmethod vehicle-method-136 ((this wvehicle))
  (when (logtest? (vehicle-flag ignition) (-> this v-flags))
    (logclear! (-> this v-flags) (vehicle-flag ignition))
    (if (not (logtest? (-> this v-flags) (vehicle-flag dead)))
        (sound-play-by-name (-> this info sound stop-sound) (new-sound-id) 1024 0 0 (sound-group) #t)
        )
    (sound-stop (-> this engine1-sound-id))
    (sound-stop (-> this engine2-sound-id))
    (sound-stop (-> this engine3-sound-id))
    (sound-stop (-> this turbo-sound-id))
    (set! (-> this engine1-sound-id) (new 'static 'sound-id))
    (set! (-> this engine2-sound-id) (new 'static 'sound-id))
    (set! (-> this engine3-sound-id) (new 'static 'sound-id))
    (set! (-> this turbo-sound-id) (new 'static 'sound-id))
    0
    )
  0
  (none)
  )

(deftype wvehicle-sound-loop-params (structure)
  ((speed   float)
   (weight  float)
   )
  )


(deftype wvehicle-sound-work (structure)
  ((roll-basis-params   wvehicle-sound-loop-params  4 :inline)
   (slide-basis-params  wvehicle-sound-loop-params  2 :inline)
   )
  )

;; og:preserve-this added
(deftype wvehicle-stack-type7 (structure)
  ((work wvehicle-sound-work :inline :offset 0)
   (vec0 vector :inline :offset 96)
   (float3 float        :offset 116)
   (float2 float        :offset 120)
   (float0 float        :offset 124)
   (vec1 vector :inline :offset 128)
   (float1 float        :offset 144)
   )
  )

;; WARN: Return type mismatch number vs none.
(defmethod rigid-body-object-method-38 ((this wvehicle))
  (let ((t9-0 (method-of-type vehicle rigid-body-object-method-38)))
    (t9-0 this)
    )
  (let ((s5-0 (-> this info))
        (s4-1 (not (logtest? (vehicle-flag ai-driving) (-> this v-flags))))
        )
    (when (logtest? (vehicle-flag ignition) (-> this v-flags))
      (if (zero? (-> this engine1-sound-id))
          (set! (-> this engine1-sound-id) (new-sound-id))
          )
      (if (zero? (-> this engine2-sound-id))
          (set! (-> this engine2-sound-id) (new-sound-id))
          )
      (if (zero? (-> this engine3-sound-id))
          (set! (-> this engine3-sound-id) (new-sound-id))
          )
      (let ((s3-0 (new 'stack-no-clear 'wvehicle-stack-type5)))
        (set! (-> s3-0 vec5 x) (seconds-per-frame))
        (seek! (-> this eng-pitch-variance) (-> this eng-pitch-variance-seek) (* 0.4 (-> s3-0 vec5 x)))
        (if (= (-> this eng-pitch-variance) (-> this eng-pitch-variance-seek))
            (set! (-> this eng-pitch-variance-seek) (* 0.0 (+ -1.0 (rand-vu) (rand-vu))))
            )
        (seek! (-> this eng-vol-variance) (-> this eng-vol-variance-seek) (* 0.8 (-> s3-0 vec5 x)))
        (if (= (-> this eng-vol-variance) (-> this eng-vol-variance-seek))
            (set! (-> this eng-vol-variance-seek) (* 0.0 (+ -1.0 (rand-vu) (rand-vu))))
            )
        (seek! (-> this eng-flutter-envelope) 0.0 (* 0.5 (-> s3-0 vec5 x)))
        (seek!
          (-> this sound-engine-rpm)
          (-> this engine-rpm)
          (* 3000.0 (+ 1.0 (* 10.0 (-> this clutch-grab))) (-> s3-0 vec5 x))
          )
        (set! (-> s3-0 vec3 z) (* (-> this sound-engine-rpm) (+ 1.0 (-> this eng-pitch-variance))))
        (set! (-> s3-0 vec3 y) 0.0)
        (set! (-> s3-0 vec2 y)
              (* (fmax
                   0.5
                   (fmin
                     1.0
                     (+ 0.7
                        (/ (- (-> s3-0 vec3 z) (-> s5-0 engine idle-rpm)) (- (-> s5-0 engine max-rpm) (-> s5-0 engine idle-rpm)))
                        )
                     )
                   )
                 (+ 1.0 (-> this eng-vol-variance))
                 )
              )
        (set! (-> s3-0 vec2 z) (-> s5-0 sound idle-crossover-rpm))
        (set! (-> s3-0 vec2 w) (-> s5-0 sound engine-crossover-rpm))
        (set! (-> s3-0 vec3 x)
              (fmax 0.0 (fmin 1.0 (/ (- (-> s3-0 vec3 z) (-> s3-0 vec2 z)) (- (-> s3-0 vec2 w) (-> s3-0 vec2 z)))))
              )
        (set! (-> s3-0 vec0 x) (* (-> s3-0 vec2 y) (- 1.0 (-> s3-0 vec3 x))))
        (set! (-> s3-0 vec0 w) (* (-> s3-0 vec2 y) (-> s3-0 vec3 x) (- 1.0 (-> s3-0 vec3 y))))
        (set! (-> s3-0 vec1 z) (* (-> s3-0 vec2 y) (-> s3-0 vec3 x) (-> s3-0 vec3 y)))
        (set! (-> s3-0 vec0 x) (cube-root (-> s3-0 vec0 x)))
        (set! (-> s3-0 vec0 w) (cube-root (-> s3-0 vec0 w)))
        (set! (-> s3-0 vec1 z) (cube-root (-> s3-0 vec1 z)))
        (set! (-> s3-0 vec0 y)
              (+ (-> this eng-pitch-offset)
                 (* (-> s5-0 sound idle-pitch-scale) (log2f (/ (-> s3-0 vec3 z) (-> s5-0 sound idle-rpm))))
                 )
              )
        (set! (-> s3-0 vec1 x)
              (+ (-> this eng-pitch-offset)
                 (* (-> s5-0 sound engine-pitch-scale) (log2f (/ (-> s3-0 vec3 z) (-> s5-0 sound engine-rpm))))
                 )
              )
        (set! (-> s3-0 vec1 w) (-> s3-0 vec1 x))
        (set! (-> s3-0 vec4 quad) (-> this root trans quad))
        (let ((s2-0 (static-sound-spec "aaaabbbbccccddd" :group 0 :volume 0.0 :mask (pitch))))
          (logior! (-> s2-0 mask) (sound-mask trans unk2))
          (set! (-> s2-0 sound-name) (-> s5-0 sound idle-sound))
          (set! (-> s2-0 volume) (the int (* 1024.0 (-> s3-0 vec0 x))))
          (set! (-> s2-0 pitch-mod) (the int (* 1524.0 (-> s3-0 vec0 y))))
          (sound-play-by-spec s2-0 (-> this engine1-sound-id) (-> s3-0 vec4))
          (set! (-> s2-0 sound-name) (-> s5-0 sound engine-sound))
          (set! (-> s2-0 volume) (the int (* 1024.0 (-> s3-0 vec0 w))))
          (set! (-> s2-0 pitch-mod) (the int (* 1524.0 (-> s3-0 vec1 x))))
          (sound-play-by-spec s2-0 (-> this engine2-sound-id) (-> s3-0 vec4))
          )
        0
        (when s4-1
          (cond
            ((logtest? (vehicle-flag turbo-boost) (-> this v-flags))
             (if (zero? (-> this turbo-sound-id))
                 (set! (-> this turbo-sound-id) (new-sound-id))
                 )
             (sound-play-by-name
               (-> s5-0 sound turbo-sound)
               (-> this turbo-sound-id)
               1024
               0
               0
               (sound-group)
               (-> s3-0 vec4)
               )
             )
            (else
              (when (nonzero? (-> this turbo-sound-id))
                (sound-stop (-> this turbo-sound-id))
                (set! (-> this turbo-sound-id) (new 'static 'sound-id))
                0
                )
              )
            )
          )
        )
      )
    (when s4-1
      (let ((s3-1 (new 'stack-no-clear 'wvehicle-stack-type7)))
        (set! (-> s3-1 float1) (seconds-per-frame))
        (set! (-> s3-1 vec0 quad) (-> this root trans quad))
        (dotimes (v1-59 4)
          (let ((a0-26 (-> s3-1 work roll-basis-params v1-59)))
            (set! (-> a0-26 speed) 0.0)
            (set! (-> a0-26 weight) 0.0)
            )
          )
        (dotimes (v1-62 2)
          (let ((a0-30 (-> s3-1 work slide-basis-params v1-62)))
            (set! (-> a0-30 speed) 0.0)
            (set! (-> a0-30 weight) 0.0)
            )
          )
        (dotimes (v1-65 4)
          (let ((a0-35 (-> this wheel v1-65)))
            (when (logtest? (-> a0-35 flags) 2)
              (set! (-> s3-1 float3) (fabs (-> a0-35 forward-vel)))
              (let* ((f0-85 (-> a0-35 side-vel))
                     (f0-87 (* f0-85 f0-85))
                     (f1-29 (-> a0-35 forward-slip-vel))
                     )
                (set! (-> s3-1 float2) (sqrtf (+ f0-87 (* f1-29 f1-29))))
                )
              (let ((a0-36 (-> a0-35 surface)))
                (dotimes (a1-12 4)
                  (let ((a2-9 (the-as structure (-> s3-1 work roll-basis-params a1-12)))
                        (f0-91 (* 0.25 (-> a0-36 tire-roll-mix a1-12)))
                        )
                    (+! (-> (the-as vector a2-9) y) f0-91)
                    (+! (-> (the-as vector a2-9) x) (* f0-91 (-> s3-1 float3)))
                    )
                  )
                (dotimes (a1-15 2)
                  (let ((a2-13 (the-as structure (-> s3-1 work slide-basis-params a1-15)))
                        (f0-95 (* 0.25 (-> a0-36 tire-slide-mix a1-15)))
                        )
                    (+! (-> (the-as vector a2-13) y) f0-95)
                    (+! (-> (the-as vector a2-13) x) (* f0-95 (-> s3-1 float2)))
                    )
                  )
                )
              )
            )
          )
        (set! (-> s3-1 vec1 x) 0.0)
        (dotimes (s2-1 2)
          (let ((v1-70 (the-as structure (-> s3-1 work slide-basis-params s2-1)))
                (s0-0 (-> s5-0 sound tire-slide-sounds s2-1))
                (s1-0 (-> this tire-slide-loop-state s2-1))
                )
            (set! (-> s3-1 vec1 z) 0.0)
            (when (< 0.0 (-> (the-as vector v1-70) y))
              (set! (-> s3-1 float2) (/ (-> (the-as vector v1-70) x) (-> (the-as vector v1-70) y)))
              (set! (-> s3-1 vec1 z)
                    (* (-> (the-as vector v1-70) y)
                       (fmax 0.0 (fmin 1.0 (/ (- (-> s3-1 float2) (-> s0-0 min-speed)) (- (-> s0-0 max-speed) (-> s0-0 min-speed)))))
                       )
                    )
              (set! (-> s3-1 vec1 w)
                    (fmax
                      (fmin
                        (+ (-> s0-0 pitch-offset) (* (-> s0-0 pitch-scale) (log2f (/ (-> s3-1 float2) (-> s0-0 speed)))))
                        (-> s0-0 max-pitch)
                        )
                      (-> s0-0 min-pitch)
                      )
                    )
              (+! (-> s3-1 vec1 x) (-> s3-1 vec1 z))
              (set! (-> s1-0 vol) (fmax (-> s3-1 vec1 z) (-> s1-0 vol)))
              (set! (-> s1-0 pitch) (-> s3-1 vec1 w))
              )
            (seek! (-> s1-0 vol) (-> s3-1 vec1 z) (* 4.0 (-> s3-1 float1)))
            )
          )
        (set! (-> s3-1 float0) (fmax 0.0 (- 1.0 (-> s3-1 vec1 x))))
        (dotimes (s2-2 4)
          (let ((v1-80 (the-as structure (-> s3-1 work roll-basis-params s2-2)))
                (s0-1 (-> s5-0 sound tire-roll-sounds s2-2))
                (s1-1 (-> this tire-roll-loop-state s2-2))
                )
            (set! (-> s3-1 vec1 z) 0.0)
            (when (< 0.0 (-> (the-as vector v1-80) y))
              (set! (-> s3-1 vec1 y) (/ (-> (the-as vector v1-80) x) (-> (the-as vector v1-80) y)))
              (set! (-> s3-1 vec1 z)
                    (* (-> (the-as vector v1-80) y)
                       (fmax
                         0.0
                         (fmin
                           1.0
                           (* (-> s3-1 float0)
                              (- (-> s3-1 vec1 y) (-> s0-1 min-speed))
                              (/ 1.0 (- (-> s0-1 max-speed) (-> s0-1 min-speed)))
                              )
                           )
                         )
                       )
                    )
              (set! (-> s3-1 vec1 w)
                    (fmax
                      (fmin
                        (+ (-> s0-1 pitch-offset) (* (-> s0-1 pitch-scale) (log2f (/ (-> s3-1 vec1 y) (-> s0-1 speed)))))
                        (-> s0-1 max-pitch)
                        )
                      (-> s0-1 min-pitch)
                      )
                    )
              (set! (-> s1-1 vol) (fmax (-> s3-1 vec1 z) (-> s1-1 vol)))
              (set! (-> s1-1 pitch) (-> s3-1 vec1 w))
              )
            (seek! (-> s1-1 vol) (-> s3-1 vec1 z) (* 4.0 (-> s3-1 float1)))
            )
          )
        (dotimes (s2-3 4)
          (let ((s0-2 (-> this tire-roll-loop-state s2-3))
                (s1-2 (-> s5-0 sound tire-roll-sounds s2-3))
                )
            (set! (-> s3-1 vec1 z) (-> s0-2 vol))
            (set! (-> s3-1 vec1 z) (cube-root (-> s3-1 vec1 z)))
            (set! (-> s3-1 vec1 w) (-> s0-2 pitch))
            (cond
              ((= s2-3 3)
               (when (< 0.0 (-> s0-2 vol))
                 (let ((v1-96 (the-as structure (-> s3-1 work roll-basis-params s2-3))))
                   (when (< 0.0 (-> (the-as vector v1-96) y))
                     (set! (-> s3-1 vec1 y) (/ (-> (the-as vector v1-96) x) (-> (the-as vector v1-96) y)))
                     (let ((f0-154 (/ 7720777.5 (* 14.0 (-> s3-1 vec1 y)))))
                       (when (>= (the-as uint (- (current-time) (the-as int (-> this knobby-time)))) (the-as uint (the int f0-154)))
                         (set! (-> this knobby-time) (the-as uint (current-time)))
                         (sound-play-by-name
                           (-> s1-2 sound)
                           (new-sound-id)
                           (the int (* 1024.0 (-> s3-1 vec1 z)))
                           (the int (* 1524.0 (-> s3-1 vec1 w)))
                           0
                           (sound-group)
                           (-> s3-1 vec0)
                           )
                         )
                       )
                     )
                   )
                 )
               )
              ((< 0.0 (-> s3-1 vec1 z))
               (if (zero? (-> s0-2 id))
                   (set! (-> s0-2 id) (new-sound-id))
                   )
               (sound-play-by-name
                 (-> s1-2 sound)
                 (-> s0-2 id)
                 (the int (* 1024.0 (-> s3-1 vec1 z)))
                 (the int (* 1524.0 (-> s3-1 vec1 w)))
                 0
                 (sound-group)
                 (-> s3-1 vec0)
                 )
               )
              (else
                (when (nonzero? (-> s0-2 id))
                  (sound-stop (-> s0-2 id))
                  (set! (-> s0-2 id) (new 'static 'sound-id))
                  0
                  )
                )
              )
            )
          )
        (dotimes (s2-4 2)
          (let ((s1-4 (-> this tire-slide-loop-state s2-4))
                (s0-4 (-> s5-0 sound tire-slide-sounds s2-4))
                )
            (set! (-> s3-1 vec1 z) (-> s1-4 vol))
            (set! (-> s3-1 vec1 z) (cube-root (-> s3-1 vec1 z)))
            (cond
              ((< 0.0 (-> s3-1 vec1 z))
               (if (zero? (-> s1-4 id))
                   (set! (-> s1-4 id) (new-sound-id))
                   )
               (sound-play-by-name
                 (-> s0-4 sound)
                 (-> s1-4 id)
                 (the int (* 1024.0 (-> s3-1 vec1 z)))
                 (the int (* 1524.0 (-> s1-4 pitch)))
                 0
                 (sound-group)
                 (-> s3-1 vec0)
                 )
               )
              (else
                (when (nonzero? (-> s1-4 id))
                  (sound-stop (-> s1-4 id))
                  (set! (-> s1-4 id) (new 'static 'sound-id))
                  0
                  )
                )
              )
            )
          )
        )
      )
    (when s4-1
      (let ((s3-2 (new 'stack-no-clear 'wvehicle-stack-type5)))
        (set! (-> s3-2 vec0 quad) (-> this root trans quad))
        (set! (-> s3-2 vec1 x) 0.0)
        (set! (-> s3-2 vec1 y) 0.0)
        (when (not (logtest? (-> this v-flags) (vehicle-flag dead)))
          (dotimes (v1-135 4)
            (let ((a0-76 (-> this wheel v1-135)))
              (if (logtest? (-> a0-76 flags) 2)
                  (set! (-> s3-2 vec1 y) (fmax (-> s3-2 vec1 y) (- (-> a0-76 up-vel))))
                  )
              )
            )
          )
        (set! (-> s3-2 vec1 x) (fmax 0.0 (fmin 1.0 (* 0.000048828126 (+ -409.6 (-> s3-2 vec1 y))))))
        (when (and (< 0.0 (-> s3-2 vec1 x))
                   (>= (the-as uint (- (current-time) (the-as int (-> this susp-creak-time)))) (the-as uint 30))
                   )
          (set! (-> this susp-creak-time) (the-as uint (current-time)))
          (set! (-> s3-2 vec1 x) (cube-root (-> s3-2 vec1 x)))
          (sound-play-by-name
            (-> s5-0 sound susp-creak-sound)
            (new-sound-id)
            (the int (* 1024.0 (-> s3-2 vec1 x)))
            0
            0
            (sound-group)
            (-> s3-2 vec0)
            )
          )
        (if (< (* 0.5 (-> s5-0 sound susp-speed-threshold)) (-> s3-2 vec1 y))
            (set! (-> this eng-flutter-envelope) 1.0)
            )
        (when (< (-> s5-0 sound susp-speed-threshold) (-> s3-2 vec1 y))
          (set! (-> s3-2 vec1 x)
                (fmax 0.0 (fmin 1.0 (* 0.000024414063 (- (-> s3-2 vec1 y) (-> s5-0 sound susp-speed-threshold)))))
                )
          (set! (-> s3-2 vec1 x) (cube-root (-> s3-2 vec1 x)))
          (sound-play-by-name
            (-> s5-0 sound susp-bottom-out-sound)
            (new-sound-id)
            (the int (* 1024.0 (-> s3-2 vec1 x)))
            0
            0
            (sound-group)
            (-> s3-2 vec0)
            )
          )
        )
      )
    (when s4-1
      (cond
        ((< 0.0 (-> this water-sound-envelope))
         (if (zero? (-> this water-sound-id))
             (set! (-> this water-sound-id) (new-sound-id))
             )
         (let ((s4-2 (new 'stack-no-clear 'matrix)))
           (set! (-> s4-2 rvec quad) (-> this root trans quad))
           (set! (-> s4-2 uvec x) (-> this water-sound-envelope))
           (set! (-> s4-2 uvec x) (cube-root (-> s4-2 uvec x)))
           (sound-play-by-name
             (-> s5-0 sound water-sound)
             (-> this water-sound-id)
             (the int (* 1024.0 (-> s4-2 uvec x)))
             0
             0
             (sound-group)
             (-> s4-2 rvec)
             )
           )
         (seek! (-> this water-sound-envelope) 0.0 (* 2.0 (seconds-per-frame)))
         )
        (else
          (when (nonzero? (-> this water-sound-id))
            (sound-stop (-> this water-sound-id))
            (set! (-> this water-sound-id) (new 'static 'sound-id))
            0
            )
          )
        )
      )
    )
  (none)
  )
