;;-*-Lisp-*-
(in-package goal)

;; name: wvehicle-obs.gc
;; name in dgo: wvehicle-obs
;; dgos: LPATK, LFACCAR, WASALL

;; DECOMP BEGINS

(defpartgroup group-turbo-pickup
  :id 231
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 100)
  :parts ((sp-item 998 :flags (sp6 sp7))
    (sp-item 999 :flags (sp6 sp7))
    (sp-item 1000 :flags (sp6 sp7))
    (sp-item 1001 :flags (sp7))
    (sp-item 1002 :flags (sp3) :binding 994)
    (sp-item 994 :flags (sp2 sp3) :binding 995)
    (sp-item 1002 :flags (sp3) :binding 996)
    (sp-item 996 :flags (sp2 sp3) :binding 995)
    (sp-item 1002 :flags (sp3) :binding 997)
    (sp-item 997 :flags (sp2 sp3) :binding 995)
    (sp-item 995 :flags (sp2))
    (sp-item 995 :flags (sp2))
    (sp-item 995 :flags (sp2))
    )
  )

(defpart 998
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 100.0)
    (:b 0.0)
    (:a 200.0 2.0)
    (:omega (degrees 18011.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

(defpart 999
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 30.0)
    (:omega (degrees 18011.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1000
  :init-specs ((:texture (shockwave level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 20.0 1.0)
    (:omega (degrees 18011.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

(defpart 1002
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 90))
    )
  )

(defpart 994
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:y (meters 2))
    (:z (meters 2))
    (:scale-x (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-x (meters 0.10666667))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

(defpart 996
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:y (meters -2))
    (:z (meters 2))
    (:scale-x (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 45))
    (:vel-x (meters -0.10666667))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

(defpart 997
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:z (meters 2))
    (:scale-x (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 90))
    (:vel-x (meters 0.10666667))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

(defpart 995
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:fade-r 6.4)
    (:fade-g -6.4)
    (:fade-b -6.4)
    (:fade-a -2.56)
    (:timer (seconds 0.167))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(defpart 1001
  :init-specs ((:texture (light-burst level-default-sprite))
    (:num 0.06 0.06)
    (:scale-x (meters 2) (meters 4))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 0.3) (meters 0.3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0) (meters 0.0033333334))
    (:scalevel-y (meters -0.001) (meters 0.002))
    (:fade-a 0.42666668)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 1))
    (:next-launcher 1003)
    )
  )

(defpart 1003
  :init-specs ((:scalevel-y (meters -0.0013333333) (meters 0.002)) (:fade-a -0.42666668))
  )

(defpartgroup group-turbo-pickup-explode
  :id 232
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1006 :period (seconds 20) :length (seconds 0.3))
    (sp-item 1007 :flags (sp3) :binding 1004)
    (sp-item 1004 :flags (sp2) :period (seconds 20) :length (seconds 0.335) :binding 1005)
    (sp-item 1004 :flags (sp2) :period (seconds 20) :length (seconds 0.335) :binding 1005)
    (sp-item 1004 :flags (sp2) :period (seconds 20) :length (seconds 0.335) :binding 1005)
    (sp-item 1004 :flags (sp2) :period (seconds 20) :length (seconds 0.335) :binding 1005)
    (sp-item 1004 :flags (sp2) :period (seconds 20) :length (seconds 0.335) :binding 1005)
    (sp-item 1005 :flags (sp2))
    (sp-item 1005 :flags (sp2))
    (sp-item 1005 :flags (sp2))
    (sp-item 1005 :flags (sp2))
    (sp-item 1005 :flags (sp2))
    )
  )

(defpart 1006
  :init-specs ((:texture (laser-hit2 level-default-sprite))
    (:num 0.5)
    (:scale-x (meters 20))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 32.0)
    (:b :copy g)
    (:a 128.0)
    (:scalevel-x (meters -0.16666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-track-root)
    )
  )

(defpart 1007
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.001))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 64.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:func 'sparticle-track-root)
    )
  )

(defpart 1004
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 4.0)
    (:y (meters -4) (meters 16))
    (:scale-x (meters 1.3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 0.0)
    (:a 255.0)
    (:omega (degrees 0) (degrees 360))
    (:vel-x (meters -0.017777778) 1 (meters 0.035555556))
    (:vel-z (meters 0.16666667))
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:accel-z (meters -0.011333333))
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 ready-to-launch))
    )
  )

(defpart 1005
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 0.0)
    (:a 128.0)
    (:scalevel-x (meters -0.002))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.13333334 -0.13333334)
    (:accel-y (meters -0.00066666666))
    (:friction 0.6 0.3)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    )
  )

(deftype turbo-pickup (process-drawable)
  ((root        collide-shape :override)
   (available   symbol)
   (persistent  symbol)
   (birth-time  time-frame)
   (collector   handle)
   )
  (:state-methods
    idle
    die
    )
  (:methods
    (find-ground (_type_) symbol)
    )
  )


(defmethod find-ground ((this turbo-pickup))
  (let ((s4-0 #f))
    (let ((gp-0 (new 'stack-no-clear 'cquery-with-vec)))
      (set! (-> gp-0 vec0 quad) (-> this root trans quad))
      (set! (-> gp-0 cquery start-pos quad) (-> gp-0 vec0 quad))
      (vector-reset! (-> gp-0 vec1))
      (set! (-> gp-0 vec1 y) 1.0)
      (set-vector! (-> gp-0 cquery move-dist) 0.0 -40960.0 0.0 1.0)
      (let ((v1-5 (-> gp-0 cquery)))
        (set! (-> v1-5 radius) 1024.0)
        (set! (-> v1-5 collide-with) (collide-spec backgnd))
        (set! (-> v1-5 ignore-process0) #f)
        (set! (-> v1-5 ignore-process1) #f)
        (set! (-> v1-5 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-5 action-mask) (collide-action solid))
        )
      (let ((f0-6 (fill-and-probe-using-line-sphere *collide-cache* (-> gp-0 cquery))))
        (when (>= f0-6 0.0)
          (vector+float*! (-> gp-0 vec0) (-> gp-0 cquery start-pos) (-> gp-0 cquery move-dist) f0-6)
          (set! (-> gp-0 vec1 quad) (-> gp-0 cquery best-other-tri normal quad))
          (+! (-> gp-0 vec0 y) 4915.2)
          (set! s4-0 #t)
          (format #t "turbo-pickup::find-ground: ground y ~M~%" (-> gp-0 vec0 y))
          )
        )
      (set! (-> this root trans quad) (-> gp-0 vec0 quad))
      (forward-up-nopitch->quaternion (-> this root quat) (new 'static 'vector :z 1.0 :w 1.0) (-> gp-0 vec1))
      )
    s4-0
    )
  )

(defstate idle (turbo-pickup)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (when (-> self available)
         (set! (-> self collector) (process->handle proc))
         (when (send-event proc 'turbo-pickup)
           (set! (-> self available) #f)
           (go-virtual die)
           )
         )
       )
      )
    )
  :code sleep-code
  :post (behavior ()
    (spawn (-> self part) (-> self root trans))
    (if (and (not (-> self persistent)) (time-elapsed? (-> self birth-time) (seconds 10)))
        (go-virtual die)
        )
    0
    )
  )

(defstate die (turbo-pickup)
  :virtual #t
  :code (behavior ()
    (set-time! (-> self state-time))
    (let* ((s5-0 (handle->process (-> self collector)))
           (gp-0 (if (type? s5-0 process-focusable)
                     s5-0
                     )
                 )
           )
      (when gp-0
        (if (logtest? (-> *part-group-id-table* 232 flags) (sp-group-flag sp13))
            (part-tracker-spawn
              part-tracker-subsampler
              :to *entity-pool*
              :group (-> *part-group-id-table* 232)
              :target (the-as process-drawable gp-0)
              :mat-joint (the-as object 0)
              )
            (part-tracker-spawn
              part-tracker
              :to *entity-pool*
              :group (-> *part-group-id-table* 232)
              :target (the-as process-drawable gp-0)
              :mat-joint (the-as object 0)
              )
            )
        )
      )
    (let ((v1-35 (-> self root root-prim)))
      (set! (-> v1-35 prim-core collide-as) (collide-spec))
      (set! (-> v1-35 prim-core collide-with) (collide-spec))
      )
    0
    (when (nonzero? (-> self part))
      (kill-particles (-> self part))
      (set! (-> self part) (the-as sparticle-launch-control 0))
      0
      )
    (until (time-elapsed? (-> self state-time) (seconds 2))
      (suspend)
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior turbo-pickup-init-by-other turbo-pickup ((arg0 vector) (arg1 symbol))
  (let ((s4-0 (new 'process 'collide-shape self (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 penetrate-using) (the-as penetrate -1))
    (set! (-> s4-0 penetrated-by) (the-as penetrate -1))
    (let ((v1-4 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-4 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-4 prim-core collide-with) (collide-spec vehicle-sphere hit-by-others-list))
      (set-vector! (-> v1-4 local-sphere) 0.0 0.0 0.0 14336.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-4)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-7 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-7 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-7 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> self root) s4-0)
    )
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (update-transforms (-> self root))
  (set! (-> self available) #t)
  (set! (-> self persistent) arg1)
  (set-time! (-> self birth-time))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 231) self))
  (set! (-> self collector) (the-as handle #f))
  (go-virtual idle)
  (none)
  )

;; WARN: Return type mismatch process vs turbo-pickup.
(defun race-turbo-pickup-spawn ((arg0 process) (arg1 vector))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn turbo-pickup arg1 #t :name "turbo-pickup" :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as turbo-pickup gp-0)
    )
  )

;; WARN: Return type mismatch process vs turbo-pickup.
(defbehavior turbo-pickup-spawn turbo-pickup ((arg0 vector))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn turbo-pickup arg0 #f :name "turbo-pickup" :to *entity-pool*)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as turbo-pickup gp-0)
    )
  )
