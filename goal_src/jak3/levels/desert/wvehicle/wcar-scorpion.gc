;;-*-Lisp-*-
(in-package goal)

;; name: wcar-scorpion.gc
;; name in dgo: wcar-scorpion
;; dgos: LPATK, LFACCAR, WASALL

(deftype wcar-rhino-proj-params (structure)
  ((mat matrix :inline :offset 0)
   (gun-local-pos vector :inline :offset 64)
   (gun-local-dir vector :inline :offset 80)
   (gun-dir vector :inline :offset 96)
   (params projectile-init-by-other-params :inline :offset 128)
   )
  )

;; DECOMP BEGINS

(deftype v-scorpion (wcar-base)
  ((jmod-axles       joint-mod-rotate-local  4 :inline)
   (jmod-shock-tops  joint-mod-rotate-local  4 :inline)
   (jmod-shock-mids  joint-mod-set-local     4 :inline)
   (jmod-shock-bots  joint-mod-set-local     4 :inline)
   (jmod-gun-kick    joint-mod-add-local     :inline)
   (jmod-gun-tilt    joint-mod-add-local     :inline)
   (jmod-gun-turn    joint-mod-rotate-local  :inline)
   )
  )


(defmethod init-collision! ((this v-scorpion))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 8) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 9))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((a0-5 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> a0-5 prim-core action) (collide-action solid))
      (set! (-> a0-5 transform-index) 0)
      )
    (let ((a0-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> a0-7 prim-core action) (collide-action solid))
      (set! (-> a0-7 transform-index) 0)
      )
    (let ((a0-9 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> a0-9 prim-core action) (collide-action solid))
      (set! (-> a0-9 transform-index) 0)
      )
    (let ((a0-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> a0-11 prim-core action) (collide-action solid))
      (set! (-> a0-11 transform-index) 0)
      )
    (let ((a0-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> a0-13 prim-core action) (collide-action solid))
      (set! (-> a0-13 transform-index) 0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 16))))
      (set! (-> v1-20 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-20 transform-index) 0)
      (set! (-> v1-20 nav-radius) 20480.0)
      )
    (let ((a0-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 10))))
      (set! (-> a0-18 prim-core action) (collide-action solid))
      (set! (-> a0-18 transform-index) 0)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-24 prim-core action) (collide-action solid rideable))
      (set! (-> v1-24 transform-index) 3)
      (set-vector! (-> v1-24 local-sphere) 0.0 0.0 0.0 27033.6)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-26 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-26 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-26 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod vehicle-method-62 ((this v-scorpion))
  (let ((s5-0 (-> this root root-prim)))
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 0 local-sphere))
      (the-as pointer (new 'static 'vector :x 12697.6 :y -819.2 :z 14336.0 :w 7782.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 1 local-sphere))
      (the-as pointer (new 'static 'vector :x -12697.6 :y -819.2 :z 14336.0 :w 7782.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 2 local-sphere))
      (the-as pointer (new 'static 'vector :x 12697.6 :y -819.2 :z -12492.8 :w 7782.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 3 local-sphere))
      (the-as pointer (new 'static 'vector :x -12697.6 :y -819.2 :z -12492.8 :w 7782.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 4 local-sphere))
      (the-as pointer (new 'static 'vector :y 1638.4 :z 14336.0 :w 9830.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 5 local-sphere))
      (the-as pointer (new 'static 'vector :y 2457.6 :w 9830.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 6 local-sphere))
      (the-as pointer (new 'static 'vector :y 2457.6 :z -12492.8 :w 9830.4))
      16
      )
    )
  ((method-of-type wcar-base vehicle-method-62) this)
  0
  (none)
  )

;; WARN: Return type mismatch (pointer process) vs none.
(defmethod wvehicle-method-169 ((this v-scorpion))
  (set! (-> this shoot-time) (the-as uint (current-time)))
  (set! (-> this gun-kick) 1638.4)
  (let ((gp-0 (new 'stack-no-clear 'wcar-rhino-proj-params)))
    (let* ((v1-3 (-> gp-0 mat))
           (a3-0 (-> this node-list data 0 bone transform))
           (a0-3 (-> a3-0 rvec quad))
           (a1-0 (-> a3-0 uvec quad))
           (a2-0 (-> a3-0 fvec quad))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-3 rvec quad) a0-3)
      (set! (-> v1-3 uvec quad) a1-0)
      (set! (-> v1-3 fvec quad) a2-0)
      (set! (-> v1-3 trans quad) a3-1)
      )
    (vector-matrix*! (-> gp-0 gun-local-pos) (-> this gun-local-pos) (-> gp-0 mat))
    (vector-rotate*! (-> gp-0 gun-local-dir) (-> this gun-local-dir) (-> gp-0 mat))
    (vector-float*! (-> gp-0 gun-dir) (-> gp-0 gun-local-dir) 409600.0)
    (set! (-> gp-0 params ent) (-> this entity))
    (set! (-> gp-0 params charge) 1.0)
    (set! (-> gp-0 params options) (projectile-options))
    (logclear! (-> gp-0 params options) (projectile-options po14 po15 po16))
    (set! (-> gp-0 params pos quad) (-> gp-0 gun-local-pos quad))
    (set! (-> gp-0 params vel quad) (-> gp-0 gun-dir quad))
    (set! (-> gp-0 params notify-handle) (the-as handle #f))
    (set! (-> gp-0 params owner-handle) (process->handle this))
    (set! (-> gp-0 params target-handle) (the-as handle #f))
    (set! (-> gp-0 params target-pos quad) (the-as uint128 0))
    (set! (-> gp-0 params ignore-handle) (process->handle this))
    (let* ((v1-19 *game-info*)
           (a0-20 (+ (-> v1-19 attack-id) 1))
           )
      (set! (-> v1-19 attack-id) a0-20)
      (set! (-> gp-0 params attack-id) a0-20)
      )
    (set! (-> gp-0 params timeout) (seconds 4))
    (spawn-projectile v-scorp-shot (-> gp-0 params) *rigid-body-queue-manager* *default-dead-pool*)
    (let ((v1-23 (get-field-spec-by-id (-> *part-id-table* 967) (sp-field-id spt-omega))))
      (if v1-23
          (set! (-> v1-23 initial-valuef) (+ -20480.0 (-> gp-0 gun-local-pos y)))
          )
      )
    (set! (-> gp-0 mat fvec quad) (-> gp-0 gun-local-dir quad))
    (vector-cross! (the-as vector (-> gp-0 mat)) (-> gp-0 mat uvec) (-> gp-0 mat fvec))
    (vector+float*! (-> gp-0 mat trans) (-> gp-0 gun-local-pos) (-> gp-0 gun-local-dir) -12288.0)
    (if (logtest? (-> *part-group-id-table* 227 flags) (sp-group-flag sp13))
        (part-tracker-spawn
          part-tracker-subsampler
          :to *entity-pool*
          :group (-> *part-group-id-table* 227)
          :duration 1
          :mat-joint (-> gp-0 mat)
          )
        (part-tracker-spawn
          part-tracker
          :to *entity-pool*
          :group (-> *part-group-id-table* 227)
          :duration 1
          :mat-joint (-> gp-0 mat)
          )
        )
    )
  (none)
  )

(defmethod vehicle-method-88 ((this v-scorpion) (arg0 vehicle-controls))
  (let ((t9-0 (method-of-type wcar-base vehicle-method-88)))
    (t9-0 this arg0)
    )
  (wvehicle-method-199 this)
  0
  (none)
  )

(defmethod vehicle-method-94 ((this v-scorpion))
  (let ((f0-0 (vector-length (-> this lin-acceleration))))
    (if (and (< 327680.0 f0-0) (not (logtest? (-> this controls flags) (vehicle-controls-flag vcf0))))
        (activate! *camera-smush-control* (fmin 2048.0 (* 0.5 f0-0)) 60 210 1.0 0.9 (-> *display* camera-clock))
        )
    )
  ((method-of-type wcar-base vehicle-method-94) this)
  (none)
  )

(defmethod vehicle-method-79 ((this v-scorpion))
  (seek! (-> this gun-kick) 0.0 (* 32768.0 (seconds-per-frame)))
  (new 'stack-no-clear 'vector)
  (set! (-> this jmod-gun-kick transform trans z) (-> this gun-kick))
  (set! (-> this jmod-gun-tilt transform trans z) (-> this gun-kick))
  (quaternion-axis-angle! (-> this jmod-gun-tilt transform quat) 1.0 0.0 0.0 (-> this gun-pitch))
  (quaternion-axis-angle! (-> this jmod-gun-turn rotation) 0.0 1.0 0.0 (+ 32768.0 (-> this gun-yaw)))
  0
  (let ((s5-0 (new 'stack-no-clear 'inline-array 'quaternion 3)))
    (set-vector! (-> s5-0 2) -1638.4 -1638.4 1638.4 1638.4)
    (dotimes (s4-0 (-> this info physics-model wheel-count))
      (let ((v1-9 (-> this wheel s4-0)))
        (-> v1-9 info)
        (quaternion-set! (-> s5-0 0) 0.0 0.0 (-> v1-9 sin-susp-ang) (+ 1.0 (-> v1-9 cos-susp-ang)))
        )
      (quaternion-normalize! (-> s5-0 0))
      (quaternion-axis-angle! (-> s5-0 1) 0.0 1.0 0.0 (-> (&-> s5-0 0 data s4-0) 8))
      (let ((v1-14 (-> this jmod-axles s4-0)))
        (quaternion*! (-> v1-14 rotation) (-> s5-0 0) (-> s5-0 1))
        )
      0
      )
    )
  (let ((s5-1 (new 'stack-no-clear 'wvehicle-physics-work)))
    (let* ((v1-20 (-> s5-1 mat))
           (a3-4 (-> this node-list data 0 bone transform))
           (a0-15 (-> a3-4 rvec quad))
           (a1-6 (-> a3-4 uvec quad))
           (a2-6 (-> a3-4 fvec quad))
           (a3-5 (-> a3-4 trans quad))
           )
      (set! (-> v1-20 rvec quad) a0-15)
      (set! (-> v1-20 uvec quad) a1-6)
      (set! (-> v1-20 fvec quad) a2-6)
      (set! (-> v1-20 trans quad) a3-5)
      )
    (set! (-> s5-1 force quad) (-> (new 'static 'vector :x 7905.28 :y 5324.8 :z 5120.0 :w 1.0) quad))
    (set! (-> s5-1 velocity quad) (-> (new 'static 'vector :x 7905.28 :y 5324.8 :z 5120.0 :w 1.0) quad))
    (set! (-> s5-1 world-pos quad) (-> (new 'static 'vector :x 7905.28 :y 5324.8 :z -6635.52 :w 1.0) quad))
    (set! (-> s5-1 world-normal quad) (-> (new 'static 'vector :x 7905.28 :y 5324.8 :z -6635.52 :w 1.0) quad))
    (set-vector! (-> s5-1 local-pos) 27670.756 27670.756 28398.934 28398.934)
    (dotimes (s4-1 4)
      (let ((s3-0 (-> this wheel s4-1)))
        (let ((v1-29 (-> s3-0 info)))
          (set! (-> s5-1 ground-pos x) (+ -3276.8 (-> v1-29 susp-arm-length)))
          (set! (-> s5-1 tmp quad) (-> (the-as (pointer uint128) (+ (+ (* s4-1 16) 64) (the-as int s5-1)))))
          (set! (-> s5-1 steering-axis quad) (-> v1-29 local-pos quad))
          )
        (+! (-> s5-1 steering-axis x) (* (-> s5-1 ground-pos x) (-> s3-0 cos-susp-ang)))
        (+! (-> s5-1 steering-axis y) (* (-> s5-1 ground-pos x) (-> s3-0 sin-susp-ang)))
        (set! (-> s5-1 p-body quad) (-> s5-1 steering-axis quad))
        (set! (-> s5-1 p-body x) (* (-> s5-1 p-body x) (-> s3-0 x-scale)))
        (set! (-> s5-1 tmp x) (* (-> s5-1 tmp x) (-> s3-0 x-scale)))
        (vector-! (-> s5-1 axis) (-> s5-1 p-body) (-> s5-1 tmp))
        (set! (-> s5-1 ground-pos z) (vector-length (-> s5-1 axis)))
        (set! (-> s5-1 ground-pos y)
              (- (-> s5-1 local-pos data s4-1) (* (atan (-> s5-1 axis x) (-> s5-1 axis y)) (-> s3-0 x-scale)))
              )
        (let ((v1-40 (-> this jmod-shock-tops s4-1)))
          (quaternion-axis-angle! (-> v1-40 rotation) 0.0 0.0 1.0 (-> s5-1 ground-pos y))
          )
        0
        (let ((v1-44 (-> this jmod-shock-mids s4-1)))
          (set! (-> v1-44 transform trans y) (* -0.5 (-> s5-1 ground-pos z) (-> s3-0 x-scale)))
          )
        0
        (let ((v1-48 (-> this jmod-shock-bots s4-1)))
          (set! (-> v1-48 transform trans y) (* -1.0 (+ -2048.0 (* 0.5 (-> s5-1 ground-pos z))) (-> s3-0 x-scale)))
          )
        )
      0
      0
      )
    )
  0
  (none)
  )

(defmethod init-rbody-control! ((this v-scorpion))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-scorpion" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (alloc-rbody-control! this *v-scorpion-constants*)
  (set! (-> this rider-hand-joint-array 0) 3)
  (init (-> this jmod-gun-turn) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this jmod-gun-tilt) this (the-as uint 5) (joint-mod-base-flags attached trans quat))
  (init (-> this jmod-gun-kick) this (the-as uint 6) (joint-mod-base-flags attached trans))
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-axles))
   this
   (the-as uint 7)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-axles 1) this (the-as uint 15) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 2) this (the-as uint 8) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 3) this (the-as uint 16) (joint-mod-base-flags attached))
  (set! (-> this turret-local-pos quad) (-> (new 'static 'vector :y 10485.76 :z -10240.0 :w 1.0) quad))
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-shock-tops))
   this
   (the-as uint 9)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-shock-tops 1) this (the-as uint 17) (joint-mod-base-flags attached))
  (init (-> this jmod-shock-tops 2) this (the-as uint 12) (joint-mod-base-flags attached))
  (init (-> this jmod-shock-tops 3) this (the-as uint 20) (joint-mod-base-flags attached))
  ((method-of-type joint-mod-set-local init)
   (the-as joint-mod-set-local (-> this jmod-shock-mids))
   this
   (the-as uint 10)
   (joint-mod-base-flags attached trans)
   )
  (init (-> this jmod-shock-mids 1) this (the-as uint 18) (joint-mod-base-flags attached trans))
  (init (-> this jmod-shock-mids 2) this (the-as uint 13) (joint-mod-base-flags attached trans))
  (init (-> this jmod-shock-mids 3) this (the-as uint 21) (joint-mod-base-flags attached trans))
  ((method-of-type joint-mod-set-local init)
   (the-as joint-mod-set-local (-> this jmod-shock-bots))
   this
   (the-as uint 11)
   (joint-mod-base-flags attached trans)
   )
  (init (-> this jmod-shock-bots 1) this (the-as uint 19) (joint-mod-base-flags attached trans))
  (init (-> this jmod-shock-bots 2) this (the-as uint 14) (joint-mod-base-flags attached trans))
  (init (-> this jmod-shock-bots 3) this (the-as uint 22) (joint-mod-base-flags attached trans))
  (spawn-wheels!
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-scorpion-wheel" (the-as (pointer level) #f)))
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-v-scorpion-wheel-blur" (the-as (pointer level) #f))
      )
    (the-as skeleton-group #f)
    (the-as skeleton-group #f)
    )
  (set! (-> this gun-aim-yaw) 0.0)
  (set! (-> this gun-aim-yaw-vel) 0.0)
  (set! (-> this gun-yaw) 0.0)
  (set! (-> this gun-pitch) 0.0)
  (set! (-> this shoot-delay) (the-as uint 30))
  (set! (-> this lock-turret) #f)
  0
  (none)
  )

(defmethod rbody-event-handler ((this v-scorpion) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('set-string-height)
     (set-setting! 'string-min-height 'abs (-> arg3 param 0) 0)
     (set-setting! 'string-max-height 'abs (-> arg3 param 0) 0)
     #t
     )
    (('draw-turret)
     (if (-> arg3 param 0)
         (setup-masks (-> this draw) 2 0)
         (setup-masks (-> this draw) 0 2)
         )
     )
    (('use-camera)
     (if (-> arg3 param 0)
         (vehicle-method-80 this)
         (vehicle-method-81 this)
         )
     )
    (else
      (call-parent-method this arg0 arg1 arg2 arg3)
      )
    )
  )
