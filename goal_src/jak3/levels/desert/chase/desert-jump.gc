;;-*-Lisp-*-
(in-package goal)

;; name: desert-jump.gc
;; name in dgo: desert-jump
;; dgos: DESJUMP, DESCHASE

;; DECOMP BEGINS

(defpartgroup group-kamikaze-interceptor-fire
  :id 453
  :flags (sp0 sp1 sp4)
  :bounds (static-bspherem 0 0 0 1000)
  :parts ((sp-item 1802 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    (sp-item 1803 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    (sp-item 1804 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7))
    )
  )

(defpart 1804
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 2.0 1.0)
    (:x (meters -2) (meters 4))
    (:y (meters 0.5))
    (:z (meters -1) (meters 3))
    (:scale-x (meters 5) (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 20.0 20.0)
    (:scalevel-x (meters -0.04))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.9)
    (:fade-a -0.15)
    (:accel-y (meters 0.0016666667) (meters 0.0016666667))
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1802
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.2)
    (:y (meters 0))
    (:scale-x (meters 25) (meters 6))
    (:rot-x (degrees 225))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 32.0)
    (:b 0.0)
    (:a 8.0 8.0)
    (:omega (degrees 2250011.2))
    (:timer (seconds 0.335) (seconds 0.08))
    (:flags (sp-cpuinfo-flag-3 glow set-conerot))
    (:userdata 4096.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1803
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.5)
    (:x (meters -2) (meters 4))
    (:y (meters 1.5))
    (:z (meters -1) (meters 3))
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 160) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 100.0)
    (:b 10.0)
    (:a 1.0)
    (:scalevel-x (meters 0.015) (meters 0.008333334))
    (:rotvel-z (degrees -0.033333335) (degrees 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.6 0.6)
    (:accel-y (meters 0.00066666666) (meters 0.00066666666))
    (:friction 0.98)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 launch-along-z))
    (:next-time (seconds 0.167))
    (:next-launcher 1805)
    (:rotate-y (degrees 0))
    )
  )

(defpart 1805
  :init-specs ((:fade-r -0.42666668)
    (:fade-g 0.093333334)
    (:fade-b 0.39333335)
    (:fade-a -0.10909091)
    (:accel-y (meters 0.00033333333))
    )
  )

(defskelgroup skel-wascity-airlock-debris wascity-airlock-debris wascity-airlock-debris-lod0-jg wascity-airlock-debris-idle-ja
              ((wascity-airlock-debris-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 100)
              )

(define *wascity-airlock-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 24 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 26 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 27 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 28 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 29 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 30 :parent-joint-index -1)
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

(deftype wascity-airlock-debris (process-drawable)
  ()
  (:state-methods
    idle
    explode
    )
  (:methods
    (spawn-exploder (_type_) none)
    )
  )


(defstate idle (wascity-airlock-debris)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('explode)
       (go-virtual explode)
       )
      )
    )
  :code sleep-code
  )

(defstate explode (wascity-airlock-debris)
  :virtual #t
  :code (behavior ()
    (let ((gp-0 (the-as entity-actor (entity-by-name "wascity-airlock-5")))
          (s5-0 (the-as entity-actor (entity-by-name "wascity-airlock-4")))
          )
      (when (and gp-0 s5-0)
        (toggle-status gp-0 (entity-perm-status dead) #t)
        (toggle-status s5-0 (entity-perm-status dead) #t)
        (kill-by-type wascity-airlock *active-pool*)
        (set! (-> self root trans quad) (-> gp-0 extra trans quad))
        (spawn-exploder self)
        )
      )
    (suspend)
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

(defmethod run-logic? ((this wascity-airlock-debris))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

(defmethod spawn-exploder ((this wascity-airlock-debris))
  (let ((gp-0 (new 'stack 'joint-exploder-tuning (the-as uint 1))))
    (let ((v1-2 (vector-normalize! (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)) 327680.0)))
      (vector+! v1-2 v1-2 (-> this root trans))
      (set! (-> gp-0 fountain-rand-transv-lo quad) (-> v1-2 quad))
      )
    (set! (-> gp-0 fountain-rand-transv-hi x) 81920.0)
    (set! (-> gp-0 fountain-rand-transv-hi y) 327680.0)
    (set! (-> gp-0 fountain-rand-transv-hi z) 4096.0)
    (set! (-> gp-0 fountain-rand-transv-hi w) 16384.0)
    (set! (-> gp-0 hit-xz-reaction) 0.75)
    (set! (-> gp-0 hit-y-reaction) 0.35)
    (set! (-> gp-0 max-probes) (the-as uint (length (-> *wascity-airlock-exploder-params* joints))))
    (set! (-> gp-0 duration) (seconds 4))
    (process-spawn
      joint-exploder
      (art-group-get-by-name *level* "skel-wascity-airlock-debris" (the-as (pointer level) #f))
      2
      gp-0
      *wascity-airlock-exploder-params*
      :name "joint-exploder"
      :to this
      )
    )
  0
  (none)
  )

(defmethod init-from-entity! ((this wascity-airlock-debris) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (go (method-of-object this idle))
  )

(deftype beam-generator (process-drawable)
  ((arrow  handle)
   (pos    vector  :inline)
   (angs   vector  :inline)
   )
  (:state-methods
    idle
    die
    )
  (:methods
    (check-pickup (_type_) none)
    (rotate (_type_) none)
    )
  )


(defskelgroup skel-beam-generator beam-generator beam-generator-lod0-jg beam-generator-idle-ja
              ((beam-generator-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :shadow beam-generator-shadow-mg
              )

(defbehavior beam-generator-init-by-other beam-generator ((arg0 vector) (arg1 entity-actor))
  (process-entity-set! self arg1)
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self pos quad) (-> arg0 quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-beam-generator" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (if (-> self draw shadow)
      (set! (-> self draw shadow-ctrl) (new
                                         'process
                                         'shadow-control
                                         -40960.0
                                         40960.0
                                         614400.0
                                         (the-as vector #f)
                                         (shadow-flags shdf00 shdf04)
                                         245760.0
                                         )
            )
      )
  (let ((s5-1 (new 'stack-no-clear 'task-arrow-params)))
    (set! (-> s5-1 pos quad) (-> arg0 quad))
    (quaternion-identity! (-> s5-1 quat))
    (set! (-> s5-1 flags) (task-arrow-flags taf3))
    (set! (-> s5-1 map-icon) (the-as uint 13))
    (set! (-> self arrow) (process->handle (task-arrow-spawn s5-1 self)))
    )
  (go-virtual idle)
  )

(defstate idle (beam-generator)
  :virtual #t
  :trans (behavior ()
    (check-pickup self)
    )
  :code (behavior ()
    (ja :group! (ja-group) :num! min)
    (ja-post)
    (sleep-code)
    )
  :post (behavior ()
    (rotate self)
    )
  )

(defstate die (beam-generator)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    )
  )

(defmethod check-pickup ((this beam-generator))
  (let ((v1-0 *target*)
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (when v1-0
      (set! (-> s5-0 quad) (-> v1-0 control trans quad))
      (set! (-> s5-0 w) 4096.0)
      (when (focus-test? v1-0 pilot)
        (let ((a1-4 (the-as process-focusable (handle->process (-> v1-0 pilot vehicle)))))
          (set! (-> s5-0 quad) (-> a1-4 root root-prim prim-core world-sphere quad))
          )
        )
      (let ((f0-1 (vector-vector-distance-squared (-> this root trans) s5-0))
            (f1-1 (+ 12288.0 (-> s5-0 w)))
            )
        (when (>= (* f1-1 f1-1) f0-1)
          (talker-spawn-func (-> *talker-speech* 128) *entity-pool* (target-pos 0) (the-as region #f))
          (send-event (handle->process (-> this arrow)) 'die)
          (go (method-of-object this die))
          )
        )
      )
    )
  0
  (none)
  )

(defmethod rotate ((this beam-generator))
  (let ((gp-0 (new 'stack-no-clear 'matrix)))
    (set! (-> gp-0 fvec x) (seconds-per-frame))
    (+! (-> this angs x) (* 32768.0 (-> gp-0 fvec x)))
    (+! (-> this angs y) (* 23665.777 (-> gp-0 fvec x)))
    (+! (-> this angs z) (* 20024.889 (-> gp-0 fvec x)))
    (+! (-> this angs w) (* 22755.555 (-> gp-0 fvec x)))
    (dotimes (v1-5 4)
      (if (< 32768.0 (-> this angs data v1-5))
          (+! (-> this angs data v1-5) -65536.0)
          )
      (if (< (-> this angs data v1-5) -32768.0)
          (+! (-> this angs data v1-5) 65536.0)
          )
      )
    (vector-reset! (-> gp-0 rvec))
    (set! (-> gp-0 rvec y) (+ 4915.2 (* 2048.0 (sin (-> this angs x)))))
    (set! (-> gp-0 rvec x) (* 1024.0 (sin (-> this angs y))))
    (set! (-> gp-0 rvec z) (* 1024.0 (cos (-> this angs y))))
    (vector+! (-> this root trans) (-> this pos) (-> gp-0 rvec))
    (vector-reset! (-> gp-0 uvec))
    (set! (-> gp-0 uvec z) (* 5461.3335 (sin (-> this angs z))))
    (set! (-> gp-0 uvec y) (-> this angs w))
    (quaternion-zxy! (-> this root quat) (-> gp-0 uvec))
    )
  (ja-post)
  0
  (none)
  )

;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this beam-generator) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

(deftype hud-wasdoors-health (hud)
  ()
  )


(defmethod draw ((this hud-wasdoors-health))
  (set-hud-piece-position!
    (-> this sprites 2)
    (the int (+ 30.0 (* -130.0 (-> this offset))))
    (the int (+ 30.0 (* -100.0 (-> this offset))))
    )
  (set! (-> this sprites 0 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> this values 0 current)) 100)))))
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 2)) 40 16)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites 2)) 1 16)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 2)) 15 10)
  (let ((f30-1
          (the float
               (+ (the int (* 127.0 (sin (* 182.04445 (the float (* (-> *display* game-clock frame-counter) 2)))))) 127)
               )
          )
        )
    (set! (-> this sprites 1 color x) (the int (lerp-scale 64.0 128.0 f30-1 0.0 255.0)))
    (set! (-> this sprites 1 color y) (the int (lerp-scale 64.0 128.0 f30-1 0.0 255.0)))
    (set! (-> this sprites 1 color z) (the int (lerp-scale 64.0 128.0 f30-1 0.0 255.0)))
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values! ((this hud-wasdoors-health))
  (set! (-> this values 0 target) (the int (* 100.0 (-> *game-info* health-bar))))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-wasdoors-health))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid) (the-as texture-id (get-texture hud-transparent-01 level-default-minimap)))
  (set! (-> this sprites 0 scale-x) 12.0)
  (set! (-> this sprites 0 scale-y) 11.2)
  (set! (-> this sprites 0 pos z) #xfffff2)
  (set! (-> this sprites 1 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x4 :page #xace)))
        )
  (set! (-> this sprites 1 pos z) #xfffff0)
  (set! (-> this sprites 2 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x6 :page #xace)))
        )
  (set! (-> this sprites 2 pos z) #xffffff)
  (set! (-> this sprites 3 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #xace)))
        )
  (set! (-> this sprites 3 scale-x) 0.65)
  (set! (-> this sprites 3 scale-y) 0.95)
  (set! (-> this sprites 3 pos z) #xffffff)
  0
  (none)
  )

(deftype hud-desert-catapult-count (hud)
  ()
  )


(defmethod draw ((this hud-desert-catapult-count))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 482.0 (* 130.0 (-> this offset))))
    25
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -20 60)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values! ((this hud-desert-catapult-count))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-desert-catapult-count))
  (set! (-> this level) (level-get *level* 'desjump))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-center-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #xace)))
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.8)
  (set! (-> this strings 0 flags) (font-flags shadow kerning middle large))
  (set! (-> this strings 0 color) (font-color white))
  0
  (none)
  )

(deftype desjump-point (structure)
  ((pos   vector      :inline)
   (quat  quaternion  :inline)
   )
  )


(define *desjump-wasdoors-pos* (new 'static 'vector :x 9276363.0 :y 127580.98 :z 962223.7 :w 1.0))

(define *desjump-vehicle-path* (the-as (array (array desjump-point))
                                 (new 'static 'boxed-array :type array
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9631658.0 :y 117858.305 :z 2423129.0 :w 1.0)
                                       :quat (new 'static 'quaternion :y -0.9983 :w 0.0566)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9501355.0 :y 119288.22 :z 1724418.5 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 8930882.0 :y 149373.75 :z 2460976.8 :w 1.0)
                                       :quat (new 'static 'quaternion :y 0.9699 :w 0.2434)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9102560.0 :y 123364.97 :z 1795913.4 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 10259027.0 :y 116531.61 :z 2201311.2 :w 1.0)
                                       :quat (new 'static 'quaternion :y -0.9269 :w 0.3752)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9727058.0 :y 119932.516 :z 1606351.2 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 10602098.0 :y 112007.58 :z 1830187.4 :w 1.0)
                                       :quat (new 'static 'quaternion :y -0.915 :w 0.4034)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9916447.0 :y 120501.45 :z 1482014.2 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 10375236.0 :y 110511.31 :z 2096389.8 :w 1.0)
                                       :quat (new 'static 'quaternion :y -0.9286 :w 0.3709)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9508849.0 :y 123161.4 :z 1245483.9 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9639729.0 :y 122473.68 :z 1372115.8 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9276363.0 :y 127580.98 :z 962223.7 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9996342.0 :y 119910.81 :z 2389373.8 :w 1.0)
                                       :quat (new 'static 'quaternion :y -0.9658 :w 0.2589)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9453793.0 :y 123170.41 :z 1286821.1 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9500160.0 :y 122431.08 :z 1457920.4 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9276363.0 :y 127580.98 :z 962223.7 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9268282.0 :y 124794.06 :z 2578690.5 :w 1.0)
                                       :quat (new 'static 'quaternion :y 0.9999 :w 0.0133)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9270956.0 :y 138510.34 :z 1285244.9 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9313876.0 :y 128615.22 :z 1467933.1 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9276363.0 :y 127580.98 :z 962223.7 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   (new 'static 'boxed-array :type desjump-point
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 8764265.0 :y 182223.25 :z 2371544.8 :w 1.0)
                                       :quat (new 'static 'quaternion :y 0.9733 :w 0.2294)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9174787.0 :y 162145.08 :z 1362950.5 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9219156.0 :y 148370.64 :z 1482753.2 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     (new 'static 'desjump-point
                                       :pos (new 'static 'vector :x 9276363.0 :y 127580.98 :z 962223.7 :w 1.0)
                                       :quat (new 'static 'quaternion :w 1.0)
                                       )
                                     )
                                   )
                                 )
        )

(deftype desjump-vehicle (structure)
  ((handle      handle)
   (path-type   uint8)
   (path-pos    uint8)
   (ready?      symbol)
   (kamikaze?   symbol)
   (wait-timer  time-frame)
   )
  :pack-me
  )


(deftype desert-jump-manager (task-manager)
  ((nav-mesh             nav-mesh)
   (vehicle              desjump-vehicle  2 :inline)
   (vehicle-count        uint8)
   (v-free-list          (array uint8))
   (total-veh-spawned    uint8)
   (check-timer          time-frame)
   (hud-wasdoors-health  handle           :overlay-at (-> hud 2))
   (generator            handle)
   (interceptor          desjump-vehicle  4 :inline)
   (interceptor-count    uint8)
   (i-free-list          (array uint8))
   (interceptor-timer    time-frame)
   (plane                vector           :inline)
   (last-catapult-pos    vector           :inline)
   (player-can-win?      symbol)
   )
  (:methods
    (spawn-vehicle (_type_ uint vehicle-type) handle)
    (spawn-beam-generator (_type_ vector) none)
    (damage-airlock (_type_ int) none)
    )
  )


(defmethod taskman-event-handler ((this desert-jump-manager) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (with-pp
    (case arg2
      (('notify)
       (when (= (-> arg3 param 0) 'attack)
         (let ((v1-2 (if (type? arg0 projectile)
                         (the-as projectile arg0)
                         )
                     )
               )
           (if (and v1-2 (let ((f0-0 (vector-vector-distance-squared (-> v1-2 root trans) *desjump-wasdoors-pos*))
                               (f1-0 20480.0)
                               )
                           (< f0-0 (* f1-0 f1-0))
                           )
                    )
               (damage-airlock this 1)
               )
           )
         )
       )
      (('explode-doors)
       (want-display-level *load-state* 'wasdoors 'display)
       (persist-with-delay
         *setting-control*
         'entity-name
         (seconds 5)
         'entity-name
         (the-as symbol "camera-398")
         0.0
         0
         )
       (let ((gp-1 (new 'stack-no-clear 'event-message-block)))
         (set! (-> gp-1 from) (process->ppointer pp))
         (set! (-> gp-1 num-params) 0)
         (set! (-> gp-1 message) 'explode)
         (let ((s5-1 send-event-function)
               (v1-14 (entity-by-name "wascity-airlock-debris-1"))
               )
           (s5-1
             (if v1-14
                 (-> v1-14 extra process)
                 )
             gp-1
             )
           )
         )
       )
      (else
        (call-parent-method this arg0 arg1 arg2 arg3)
        )
      )
    )
  )

(defmethod damage-airlock ((this desert-jump-manager) (arg0 int))
  (when #t
    (when (not (task-node-closed? (game-task-node desert-jump-mission-protect-doors)))
      (cond
        ((= arg0 1)
         (+! (-> *game-info* health-bar) -0.15)
         )
        ((zero? arg0)
         (+! (-> *game-info* health-bar) -0.07)
         )
        )
      )
    )
  0
  (none)
  )

(defstate active (desert-jump-manager)
  :virtual #t
  :code (behavior ()
    (local-vars (v1-33 object) (f30-1 float))
    (set-setting! 'fog-special-interp-rate #f 0.025 0)
    (set-setting! 'fog-special-interp-targ #f 0.4 0)
    (cond
      ((task-node-closed? (game-task-node desert-jump-mission-protect-doors))
       (spawn-beam-generator self (-> *desjump-vehicle-path* 0 (+ (length (-> *desjump-vehicle-path* 0)) -1) pos))
       )
      (else
        (if (and *target* (nonzero? (-> *target* pilot)))
            (send-event (handle->process (-> *target* pilot vehicle)) 'scale-max-hit-points 2.7)
            )
        (let ((gp-1 (the-as entity-actor (entity-by-name "wascity-airlock-5"))))
          (when gp-1
            (vector-z-quaternion! (-> self plane) (-> gp-1 quat))
            (set! (-> self plane w) (- (vector-dot (-> self plane) (-> gp-1 extra trans))))
            )
          )
        (until v1-33
          (suspend)
          (set! v1-33 (and *target* (< 81920.0 (vector4-dot (-> self plane) (target-pos 0)))))
          )
        (set-setting! 'airlock #f 0.0 0)
        (set-setting! 'exclusive-load '((ignore all) (allow desjump)) 0.0 0)
        (let ((a1-7 (new 'stack-no-clear 'array 'symbol 10)))
          (set! (-> a1-7 9) #f)
          (set! (-> a1-7 8) #f)
          (set! (-> a1-7 7) #f)
          (set! (-> a1-7 6) #f)
          (set! (-> a1-7 5) #f)
          (set! (-> a1-7 4) #f)
          (set! (-> a1-7 3) 'desertb)
          (set! (-> a1-7 2) 'desert-game)
          (set! (-> a1-7 1) 'wasdoors)
          (set! (-> a1-7 0) 'wasall)
          (want-levels *load-state* a1-7)
          )
        (set-setting! 'extra-bank '((desert2 desjump1)) 0.0 0)
        (until (and (>= (-> self total-veh-spawned) (the-as uint 13))
                    (zero? (-> self vehicle-count))
                    (-> self player-can-win?)
                    )
          (when (>= (+ (current-time) (seconds -1)) (-> self interceptor-timer))
            (when (< (-> self interceptor-count) (the-as uint 4))
              (let ((gp-3 15))
                (dotimes (v1-56 4)
                  (let ((a0-25 (-> self interceptor v1-56)))
                    (if (!= (-> a0-25 handle) #f)
                        (set! gp-3 (logior gp-3 (ash 1 (the-as int (-> a0-25 path-type)))))
                        )
                    )
                  )
                (spawn-vehicle
                  self
                  (the-as uint (rand-vu-int-count-excluding (length *desjump-vehicle-path*) gp-3))
                  (vehicle-type v-marauder)
                  )
                )
              (set-time! (-> self interceptor-timer))
              )
            )
          (when (>= (+ (current-time) (seconds -7)) (-> self check-timer))
            (when (and (< (-> self vehicle-count) (the-as uint 2)) (< (-> self total-veh-spawned) (the-as uint 13)))
              (let ((gp-4 4080))
                (dotimes (v1-72 2)
                  (let ((a0-36 (-> self vehicle v1-72)))
                    (if (!= (-> a0-36 handle) #f)
                        (set! gp-4 (logior gp-4 (ash 1 (the-as int (-> a0-36 path-type)))))
                        )
                    )
                  )
                (if (= (-> self total-veh-spawned) 12)
                    (set! gp-4 (logior gp-4 2))
                    )
                (spawn-vehicle
                  self
                  (the-as uint (rand-vu-int-count-excluding (length *desjump-vehicle-path*) gp-4))
                  (vehicle-type v-catapult)
                  )
                )
              )
            (set-time! (-> self check-timer))
            )
          (suspend)
          )
        )
      )
    (send-event (handle->process (-> self hud-wasdoors-health)) 'hide-and-die)
    (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
    (when (not (task-node-closed? (game-task-node desert-jump-mission-protect-doors)))
      (remove-setting! 'exclusive-load)
      (spawn-beam-generator self (-> self last-catapult-pos))
      (task-node-close! (game-task-node desert-jump-mission-protect-doors) 'event)
      )
    (set-setting! 'fog-special-interp-rate #f 0.05 0)
    (set-setting! 'fog-special-interp-targ #f 0.1 0)
    (while (or (handle->process (-> self generator)) (nonzero? (-> self interceptor-count)))
      (dotimes (gp-5 4)
        (let ((s5-3 (-> self interceptor gp-5)))
          (when (!= (-> s5-3 handle) #f)
            (let* ((s4-2 (handle->process (-> s5-3 handle)))
                   (a0-63 (if (type? s4-2 process-focusable)
                              s4-2
                              )
                          )
                   )
              (when a0-63
                (cond
                  ((-> s5-3 kamikaze?)
                   (send-event
                     a0-63
                     'attack
                     #f
                     (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                         (damage 2000.0)
                                                                         (vehicle-damage-factor 1.0)
                                                                         (vehicle-impulse-factor 0.0)
                                                                         (attacker-velocity (new 'static 'vector :w 1.0))
                                                                         )
                                         )
                     )
                   (set! (-> self interceptor gp-5 handle) (the-as handle #f))
                   (+! (-> self interceptor-count) -1)
                   (let ((s5-4 (-> self i-free-list)))
                     (set! (-> s5-4 (length s5-4)) (the-as uint gp-5))
                     (+! (-> s5-4 length) 1)
                     )
                   )
                  ((not (logtest? (-> (the-as process-focusable a0-63) draw status) (draw-control-status on-screen)))
                   (send-event a0-63 'go-die)
                   )
                  )
                )
              )
            )
          )
        )
      (suspend)
      )
    (when (handle->process (-> *game-info* dust-storm))
      1.0
      (let ((gp-6 (-> *game-info* dust-storm)))
        (until (>= 0.1 f30-1)
          (let ((a1-34 (new 'stack-no-clear 'event-message-block)))
            (set! (-> a1-34 from) (process->ppointer self))
            (set! (-> a1-34 num-params) 0)
            (set! (-> a1-34 message) 'get-intensity)
            (let ((t9-31 send-event-function)
                  (a0-75 (handle->process gp-6))
                  )
              (set! f30-1 (the-as float (t9-31 a0-75 a1-34)))
              )
            )
          (suspend)
          )
        )
      )
    (let ((gp-7 (current-time)))
      (until (time-elapsed? gp-7 (seconds 2))
        (suspend)
        )
      )
    (send-event self 'complete)
    )
  :post (behavior ()
    (set! (-> *game-info* counter)
          (the float (- 13 (the-as int (- (-> self total-veh-spawned) (-> self vehicle-count)))))
          )
    0
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod task-manager-method-26 ((this desert-jump-manager))
  (with-pp
    (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
      (t9-0 this)
      )
    (when (>= 0.0 (-> *game-info* health-bar))
      (want-display-level *load-state* 'wasdoors 'display)
      (set-setting! 'entity-name "camera-398" 0.0 0)
      (let ((s5-0 (new 'stack-no-clear 'event-message-block)))
        (set! (-> s5-0 from) (process->ppointer pp))
        (set! (-> s5-0 num-params) 0)
        (set! (-> s5-0 message) 'explode)
        (let ((s4-0 send-event-function)
              (v1-9 (entity-by-name "wascity-airlock-debris-1"))
              )
          (s4-0
            (if v1-9
                (-> v1-9 extra process)
                )
            s5-0
            )
          )
        )
      (send-event this 'fail)
      )
    (dotimes (s5-1 2)
      (let* ((s4-1 (-> this vehicle s5-1))
             (v1-17 (-> s4-1 handle))
             )
        (when (!= v1-17 #f)
          (let* ((s2-0 (handle->process v1-17))
                 (s3-0 (if (type? s2-0 process-focusable)
                           (the-as process-focusable s2-0)
                           )
                       )
                 )
            (cond
              ((and s3-0 (not (logtest? (-> s3-0 focus-status) (focus-status dead))))
               (set! (-> this last-catapult-pos quad) (-> s3-0 root trans quad))
               (let ((s1-0 (-> *desjump-vehicle-path* (-> s4-1 path-type) (-> s4-1 path-pos)))
                     (s2-1 (= (+ (length (-> *desjump-vehicle-path* (-> s4-1 path-type))) -1) (-> s4-1 path-pos)))
                     )
                 (let ((f30-0 (vector-vector-distance-squared (-> s1-0 pos) (-> s3-0 root trans))))
                   (when (and (not s2-1) (let ((f0-1 81920.0))
                                           (< f30-0 (* f0-1 f0-1))
                                           )
                              )
                     (+! (-> s4-1 path-pos) 1)
                     (send-event
                       s3-0
                       'ai-set-target-position
                       (-> *desjump-vehicle-path* (-> s4-1 path-type) (-> s4-1 path-pos) pos)
                       )
                     (send-event s3-0 'ai-set-target-speed 163840.0)
                     (if *target*
                         (send-event s3-0 'ai-set-target-process *target*)
                         )
                     )
                   (when (and s2-1
                              (let ((f0-4 122880.0))
                                (< f30-0 (* f0-4 f0-4))
                                )
                              (not (-> s4-1 ready?))
                              )
                     (send-event s3-0 'ai-set-mode 0)
                     (send-event s3-0 'ai-set-target-speed 0)
                     (set-time! (-> s4-1 wait-timer))
                     (set! (-> s4-1 ready?) #t)
                     (when (= (-> this total-veh-spawned) 13)
                       (send-event s3-0 'ignore-damage #f)
                       (send-event s3-0 'ignore-impulse #f)
                       )
                     )
                   )
                 (when (and s2-1
                            (-> s4-1 ready?)
                            (time-elapsed? (-> s4-1 wait-timer) (seconds 10))
                            (not (focus-test? s3-0 inactive))
                            (let ((a0-49 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> s3-0 root quat)))
                                  (a1-17 (vector-! (new 'stack-no-clear 'vector) *desjump-wasdoors-pos* (-> s3-0 root trans)))
                                  )
                              (< (vector-vector-angle-safe a0-49 a1-17) 5461.3335)
                              )
                            )
                   (send-event s3-0 'launch *desjump-wasdoors-pos* this)
                   (set-time! (-> s4-1 wait-timer))
                   (if (>= 0.15 (-> *game-info* health-bar))
                       (set! (-> this player-can-win?) #f)
                       )
                   )
                 )
               )
              (else
                (set! (-> this vehicle s5-1 handle) (the-as handle #f))
                (+! (-> this vehicle-count) -1)
                (let ((s4-2 (-> this v-free-list)))
                  (set! (-> s4-2 (length s4-2)) (the-as uint s5-1))
                  (+! (-> s4-2 length) 1)
                  )
                )
              )
            )
          )
        )
      )
    (dotimes (s5-2 4)
      (let* ((s3-1 (-> this interceptor s5-2))
             (v1-119 (-> s3-1 handle))
             )
        (when (!= v1-119 #f)
          (let* ((s2-2 (handle->process v1-119))
                 (s4-3 (if (type? s2-2 process-focusable)
                           s2-2
                           )
                       )
                 )
            (cond
              ((and (the-as process-focusable s4-3)
                    (not (logtest? (-> (the-as process-focusable s4-3) focus-status) (focus-status dead)))
                    )
               (let* ((s1-1 (-> *desjump-vehicle-path* (-> s3-1 path-type) (-> s3-1 path-pos)))
                      (s2-3 (= (+ (length (-> *desjump-vehicle-path* (-> s3-1 path-type))) -1) (-> s3-1 path-pos)))
                      (f0-9 (vector-vector-distance-squared (-> s1-1 pos) (-> (the-as process-focusable s4-3) root trans)))
                      )
                 (cond
                   ((-> s3-1 kamikaze?)
                    (when (and (not s2-3) (let ((f1-3 81920.0))
                                            (< f0-9 (* f1-3 f1-3))
                                            )
                               )
                      (+! (-> s3-1 path-pos) 1)
                      (send-event
                        s4-3
                        'ai-set-target-position
                        (-> *desjump-vehicle-path* (-> s3-1 path-type) (-> s3-1 path-pos) pos)
                        )
                      (send-event s4-3 'ai-set-target-speed 163840.0)
                      )
                    (when (and s2-3 (not (-> s3-1 ready?)))
                      (send-event s4-3 'ai-ignore-nav-mesh #t)
                      (send-event
                        s4-3
                        'ai-set-target-position
                        (-> *desjump-vehicle-path* (-> s3-1 path-type) (-> s3-1 path-pos) pos)
                        )
                      (send-event s4-3 'ai-set-target-speed 245760.0)
                      (set! (-> s3-1 ready?) #t)
                      )
                    (when (and s2-3
                               (-> s3-1 ready?)
                               (< (vector4-dot (-> this plane) (-> (the-as process-focusable s4-3) root trans)) 61440.0)
                               )
                      (send-event
                        s4-3
                        'attack
                        #f
                        (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                            (damage 2000.0)
                                                                            (vehicle-damage-factor 1.0)
                                                                            (vehicle-impulse-factor 0.0)
                                                                            (attacker-velocity (new 'static 'vector :w 1.0))
                                                                            )
                                            )
                        )
                      (damage-airlock this 0)
                      (set! (-> this interceptor s5-2 handle) (the-as handle #f))
                      (+! (-> this interceptor-count) -1)
                      (let ((s4-4 (-> this i-free-list)))
                        (set! (-> s4-4 (length s4-4)) (the-as uint s5-2))
                        (+! (-> s4-4 length) 1)
                        )
                      )
                    )
                   (else
                     (when (and (time-elapsed? (-> s3-1 wait-timer) (seconds 3)) *target*)
                       (send-event s4-3 'ai-set-target-process *target*)
                       (send-event s4-3 'ai-set-target-speed 163840.0)
                       (send-event s4-3 'ai-set-target-position (target-pos 0))
                       (set-time! (-> s3-1 wait-timer))
                       )
                     )
                   )
                 )
               )
              (else
                (set! (-> this interceptor s5-2 handle) (the-as handle #f))
                (+! (-> this interceptor-count) -1)
                (let ((s4-5 (-> this i-free-list)))
                  (set! (-> s4-5 (length s4-5)) (the-as uint s5-2))
                  (+! (-> s4-5 length) 1)
                  )
                )
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod spawn-beam-generator ((this desert-jump-manager) (arg0 vector))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> arg0 quad))
    (+! (-> s5-0 y) 8192.0)
    (set! (-> this generator)
          (ppointer->handle (process-spawn beam-generator s5-0 (-> this entity) :name "beam-generator" :to this))
          )
    )
  0
  (none)
  )

(defun part-tracker-check-parent ((arg0 part-tracker))
  (let ((v1-1 (-> arg0 parent 0)))
    (when (and v1-1 (-> v1-1 next-state) (= (-> v1-1 next-state name) 'explode-into-nothing))
      (set! (-> arg0 linger-duration) (seconds 6))
      (send-event arg0 'draw #f)
      )
    )
  )

(defmethod spawn-vehicle ((this desert-jump-manager) (arg0 uint) (arg1 vehicle-type))
  (let ((gp-0 (if (= arg1 (vehicle-type v-catapult))
                  (-> this v-free-list)
                  (-> this i-free-list)
                  )
              )
        )
    (when (nonzero? (length gp-0))
      (let* ((v1-8 (-> gp-0 (+ (length gp-0) -1)))
             (s5-0 (if (= arg1 (vehicle-type v-catapult))
                       (-> this vehicle v1-8)
                       (-> this interceptor v1-8)
                       )
                   )
             (s2-0 (-> *desjump-vehicle-path* arg0 0))
             (s0-0 (new 'stack-no-clear 'mystery-traffic-object-spawn-params0))
             )
        (vector-z-quaternion! (-> s0-0 vec) (-> s2-0 quat))
        (vector-float*! (-> s0-0 vec) (-> s0-0 vec) 204800.0)
        (set! (-> s0-0 params object-type) (traffic-type guard-a))
        (set! (-> s0-0 params behavior) (the-as uint 3))
        (set! (-> s0-0 params id) (the-as uint 0))
        (set! (-> s0-0 params nav-mesh) (-> this nav-mesh))
        (set! (-> s0-0 params nav-branch) #f)
        (set! (-> s0-0 params proc) #f)
        (set! (-> s0-0 params handle) (the-as handle #f))
        (set! (-> s0-0 params user-data) (the-as uint 0))
        (set! (-> s0-0 params flags) (traffic-spawn-flags))
        (set! (-> s0-0 params guard-type) (the-as uint 11))
        (set! (-> s0-0 params entity) #f)
        (set! (-> s0-0 params velocity quad) (-> s0-0 vec quad))
        (set! (-> s0-0 params position quad) (-> s2-0 pos quad))
        (quaternion-copy! (-> s0-0 params rotation) (-> s2-0 quat))
        (let ((s2-1 (vehicle-spawn arg1 (-> s0-0 params))))
          (when s2-1
            (set! (-> s5-0 path-type) arg0)
            (set! (-> s5-0 path-pos) (the-as uint 0))
            (set! (-> s5-0 handle) (process->handle s2-1))
            (set! (-> s5-0 ready?) #f)
            (cond
              ((= arg1 (vehicle-type v-catapult))
               (+! (-> this vehicle-count) 1)
               (+! (-> this total-veh-spawned) 1)
               )
              (else
                (+! (-> this interceptor-count) 1)
                (set! (-> s5-0 kamikaze?) (rand-vu-percent? 0.3))
                (cond
                  ((-> s5-0 kamikaze?)
                   (set! (-> (the-as wvehicle s2-1) minimap)
                         (add-icon! *minimap* s2-1 (the-as uint 128) (the-as int #f) (the-as vector #t) 0)
                         )
                   (if (logtest? (-> *part-group-id-table* 453 flags) (sp-group-flag sp13))
                       (part-tracker-spawn
                         part-tracker-subsampler
                         :to s2-1
                         :group (-> *part-group-id-table* 453)
                         :duration -1
                         :callback (the-as (function part-tracker vector) part-tracker-check-parent)
                         :target s2-1
                         :mat-joint 3
                         )
                       (part-tracker-spawn
                         part-tracker
                         :to s2-1
                         :group (-> *part-group-id-table* 453)
                         :duration -1
                         :callback (the-as (function part-tracker vector) part-tracker-check-parent)
                         :target s2-1
                         :mat-joint 3
                         )
                       )
                   )
                  (else
                    )
                  )
                )
              )
            (when (not (-> s5-0 kamikaze?))
              (send-event s2-1 'ai-set-attack-delay-factor 4.0)
              (send-event s2-1 'ai-set-inaccuracy-factor 2.0)
              )
            (when (and (= (-> this total-veh-spawned) 13) (= arg1 (vehicle-type v-catapult)))
              (send-event s2-1 'no-pickup)
              (send-event s2-1 'ignore-damage #t)
              (send-event s2-1 'ignore-impulse #t)
              )
            (+! (-> gp-0 length) -1)
            (return (-> s5-0 handle))
            )
          )
        )
      )
    )
  (the-as handle #f)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod set-time-limit ((this desert-jump-manager))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set-setting! 'music 'oasisfi 0.0 0)
  (set! (-> *game-info* health-bar) 1.0)
  (set! (-> *game-info* health-bar-owner) (process->handle this))
  (set! (-> this hud-wasdoors-health)
        (ppointer->handle
          (process-spawn hud-wasdoors-health :init hud-init-by-other :name "hud-wasdoors-health" :to this)
          )
        )
  (set! (-> this hud-counter)
        (ppointer->handle
          (process-spawn hud-desert-catapult-count :init hud-init-by-other :name "hud-desert-catapult-count" :to this)
          )
        )
  (set! (-> this nav-mesh) (get-nav-mesh (the-as actor-id #xa7d6)))
  (set! (-> this v-free-list) (new 'static 'boxed-array :type uint8 :length 0 :allocated-length 2))
  (dotimes (v1-19 2)
    (set! (-> this vehicle v1-19 handle) (the-as handle #f))
    (set! (-> this vehicle v1-19 ready?) #f)
    (set! (-> this v-free-list v1-19) (the-as uint v1-19))
    )
  (set! (-> this v-free-list length) 2)
  (set! (-> this i-free-list) (new 'static 'boxed-array :type uint8 :length 0 :allocated-length 4))
  (dotimes (v1-24 4)
    (set! (-> this interceptor v1-24 handle) (the-as handle #f))
    (set! (-> this interceptor v1-24 ready?) #f)
    (set! (-> this i-free-list v1-24) (the-as uint v1-24))
    )
  (set! (-> this i-free-list length) 4)
  (set! (-> this generator) (the-as handle #f))
  (set! (-> this player-can-win?) #t)
  (none)
  )
