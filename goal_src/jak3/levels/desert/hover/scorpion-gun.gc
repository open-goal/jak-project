;;-*-Lisp-*-
(in-package goal)

;; name: scorpion-gun.gc
;; name in dgo: scorpion-gun
;; dgos: DESBATTL

(deftype scorpion-gun-stack-var0 (structure)
  ((float0 float :offset 68)
   (vec0 vector :inline :offset 96)
   (params projectile-init-by-other-params :inline :offset 128)
   )
  )

;; DECOMP BEGINS

(define *desert-beast-speech-list* (new 'static 'inline-array talker-speech-class 59
                                     (new 'static 'talker-speech-class :name "none")
                                     (new 'static 'talker-speech-class
                                       :name "sig175"
                                       :channel (gui-channel sig)
                                       :flags (talker-flags tf0)
                                       :speech #x1
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig176"
                                       :channel (gui-channel sig)
                                       :flags (talker-flags tf0)
                                       :speech #x2
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig177"
                                       :channel (gui-channel sig)
                                       :flags (talker-flags tf0)
                                       :speech #x3
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig178"
                                       :channel (gui-channel sig)
                                       :flags (talker-flags tf0)
                                       :speech #x4
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig197"
                                       :channel (gui-channel sig)
                                       :flags (talker-flags tf0)
                                       :speech #x5
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig101"
                                       :channel (gui-channel sig)
                                       :speech #x6
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig103"
                                       :channel (gui-channel sig)
                                       :speech #x7
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig104"
                                       :channel (gui-channel sig)
                                       :speech #x8
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig113"
                                       :channel (gui-channel sig)
                                       :speech #x9
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig109"
                                       :channel (gui-channel sig)
                                       :speech #xa
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig110"
                                       :channel (gui-channel sig)
                                       :speech #xb
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig116"
                                       :channel (gui-channel sig)
                                       :speech #xc
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig119"
                                       :channel (gui-channel sig)
                                       :speech #xd
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig120"
                                       :channel (gui-channel sig)
                                       :speech #xe
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig133"
                                       :channel (gui-channel sig)
                                       :speech #xf
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig134"
                                       :channel (gui-channel sig)
                                       :speech #x10
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig135"
                                       :channel (gui-channel sig)
                                       :speech #x11
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig136"
                                       :channel (gui-channel sig)
                                       :speech #x12
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig137"
                                       :channel (gui-channel sig)
                                       :speech #x13
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig138"
                                       :channel (gui-channel sig)
                                       :speech #x14
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig144"
                                       :channel (gui-channel sig)
                                       :speech #x15
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig142"
                                       :channel (gui-channel sig)
                                       :speech #x16
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig148"
                                       :channel (gui-channel sig)
                                       :speech #x17
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig153"
                                       :channel (gui-channel sig)
                                       :speech #x18
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig156"
                                       :channel (gui-channel sig)
                                       :speech #x19
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig157"
                                       :channel (gui-channel sig)
                                       :speech #x1a
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig127"
                                       :channel (gui-channel sig)
                                       :speech #x1b
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig128"
                                       :channel (gui-channel sig)
                                       :speech #x1c
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig139"
                                       :channel (gui-channel sig)
                                       :speech #x1d
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig143"
                                       :channel (gui-channel sig)
                                       :speech #x1e
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig102"
                                       :channel (gui-channel sig)
                                       :speech #x1f
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig105"
                                       :channel (gui-channel sig)
                                       :speech #x20
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig106"
                                       :channel (gui-channel sig)
                                       :speech #x21
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig107"
                                       :channel (gui-channel sig)
                                       :speech #x22
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig108"
                                       :channel (gui-channel sig)
                                       :speech #x23
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig117"
                                       :channel (gui-channel sig)
                                       :speech #x24
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig118"
                                       :channel (gui-channel sig)
                                       :speech #x25
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig121"
                                       :channel (gui-channel sig)
                                       :speech #x26
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig131"
                                       :channel (gui-channel sig)
                                       :speech #x27
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig132"
                                       :channel (gui-channel sig)
                                       :speech #x28
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig149"
                                       :channel (gui-channel sig)
                                       :speech #x29
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig150"
                                       :channel (gui-channel sig)
                                       :speech #x2a
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig152"
                                       :channel (gui-channel sig)
                                       :speech #x2b
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig151"
                                       :channel (gui-channel sig)
                                       :speech #x2c
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig159"
                                       :channel (gui-channel sig)
                                       :speech #x2d
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig160"
                                       :channel (gui-channel sig)
                                       :speech #x2e
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig161"
                                       :channel (gui-channel sig)
                                       :speech #x2f
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig162"
                                       :channel (gui-channel sig)
                                       :speech #x30
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig163"
                                       :channel (gui-channel sig)
                                       :speech #x31
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig164"
                                       :channel (gui-channel sig)
                                       :speech #x32
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig165"
                                       :channel (gui-channel sig)
                                       :speech #x33
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig166"
                                       :channel (gui-channel sig)
                                       :speech #x34
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig167"
                                       :channel (gui-channel sig)
                                       :speech #x35
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig168"
                                       :channel (gui-channel sig)
                                       :speech #x36
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig169"
                                       :channel (gui-channel sig)
                                       :speech #x37
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig170"
                                       :channel (gui-channel sig)
                                       :speech #x38
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig171"
                                       :channel (gui-channel sig)
                                       :speech #x39
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     (new 'static 'talker-speech-class
                                       :name "sig172"
                                       :channel (gui-channel sig)
                                       :speech #x3a
                                       :neg #x1
                                       :on-close #f
                                       :camera #f
                                       )
                                     )
        )

(deftype speecher (structure)
  ((speech-array  (array uint16))
   (next-index    uint32)
   )
  :pack-me
  (:methods
    (init! (_type_ (array uint16)) none)
    (play-next-speech (_type_) none)
    )
  )


(defmethod play-next-speech ((this speecher))
  (let ((s5-0 (-> this next-index)))
    (talker-spawn-func
      (-> *desert-beast-speech-list* (-> this speech-array s5-0))
      *entity-pool*
      (target-pos 0)
      (the-as region #f)
      )
    (set! (-> this next-index)
          (the-as uint (mod (the-as int (+ s5-0 (rand-vu-int-range 1 5))) (-> this speech-array length)))
          )
    )
  0
  (none)
  )

(defmethod init! ((this speecher) (arg0 (array uint16)))
  (set! (-> this speech-array) arg0)
  (set! (-> this next-index) (the-as uint (rand-vu-int-range 0 (+ (-> this speech-array length) -1))))
  0
  (none)
  )

(deftype hud-scorpion-gun (hud)
  ((offscreen  uint8)
   (alpha      float  2)
   )
  )


(defmethod draw ((this hud-scorpion-gun))
  (set! (-> this sprites 0 color w) 0)
  (set-hud-piece-position! (the-as hud-sprite (-> this sprites)) 32 208)
  (set! (-> this sprites 0 color w) (the int (-> this alpha 0)))
  (set! (-> this sprites 1 color w) 0)
  (set-hud-piece-position! (-> this sprites 1) 480 208)
  (set! (-> this sprites 1 color w) (the int (-> this alpha 1)))
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values! ((this hud-scorpion-gun))
  (logclear! (-> this flags) (hud-flags disable))
  (when (not (logtest? (-> *kernel-context* prevent-from-run) (process-mask pause)))
    (dotimes (s5-0 2)
      (if (not (logtest? (-> this offscreen) (ash 1 s5-0)))
          (seek! (-> this alpha s5-0) 0.0 (* 256.0 (seconds-per-frame)))
          (seek!
            (-> this alpha s5-0)
            (+ 80.0 (* 32.0 (sin (* 218.45334 (the float (mod (current-time) 300))))))
            (* 128.0 (seconds-per-frame))
            )
          )
      )
    )
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-scorpion-gun))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this offscreen) (the-as uint 0))
  (set! (-> this alpha 0) 0.0)
  (set! (-> this alpha 1) 0.0)
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #x966)))
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf0 hsf3))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (set! (-> this sprites 1 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #x966)))
        )
  (set! (-> this sprites 1 flags) (hud-sprite-flags hsf3))
  (set! (-> this sprites 1 scale-x) 1.0)
  (set! (-> this sprites 1 scale-y) 1.0)
  0
  (none)
  )

(defmethod event-callback ((this hud-scorpion-gun) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('reset-arrows)
     (set! (-> this offscreen) (the-as uint 0))
     0
     )
    (('off-to-left)
     (logior! (-> this offscreen) (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                                      2
                                      1
                                      )
              )
     )
    (('off-to-right)
     (logior! (-> this offscreen) (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                                      1
                                      2
                                      )
              )
     )
    )
  ((method-of-type hud event-callback) this arg0 arg1 arg2 arg3)
  )

(deftype scorpion-gun-aim (process)
  ((hud-aim     hud-sprite  :inline)
   (screen-pos  vector      :inline)
   (color       rgba)
   (draw?       symbol)
   )
  (:state-methods
    idle
    )
  )


(defstate idle (scorpion-gun-aim)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('draw)
       (set! (-> self draw?) #t)
       (set! (-> self screen-pos quad) (-> (the-as vector (-> block param 0)) quad))
       (let ((v0-0 (the-as object (-> block param 1))))
         (set! (-> self color) (the-as rgba v0-0))
         v0-0
         )
       )
      (('die)
       (go empty-state)
       )
      )
    )
  :code sleep-code
  :post (behavior ()
    (set! (-> self hud-aim pos x) (the int (+ -1792.0 (-> self screen-pos x))))
    (set! (-> self hud-aim pos y) (the int (+ -1840.0 (-> self screen-pos y))))
    (set! (-> self hud-aim pos z) 0)
    (set! (-> self hud-aim flags) (hud-sprite-flags hsf3 hsf4))
    (set! (-> self hud-aim scale-x) 0.75)
    (set! (-> self hud-aim scale-y) 0.75)
    (let ((v1-5 (-> self hud-aim color-ptr)))
      (set! (-> v1-5 0) (the-as int (-> self color r)))
      (set! (-> v1-5 1) (the-as int (-> self color g)))
      (set! (-> v1-5 2) (the-as int (-> self color b)))
      (set! (-> v1-5 3) (the-as int (-> self color a)))
      )
    (when (-> self draw?)
      (set! (-> self hud-aim tid)
            (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #x966)))
            )
      (with-dma-buffer-add-bucket ((s5-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                   (bucket-id hud-draw-hud-alpha)
                                   )
        (draw (-> self hud-aim) s5-0 (-> *level* level-default) #f)
        )
      )
    )
  )

(defbehavior scorpion-gun-aim-init-by-other scorpion-gun-aim ()
  (stack-size-set! (-> self main-thread) 32)
  (set! (-> self mask) (process-mask menu))
  (+! (-> self clock ref-count) -1)
  (+! (-> *display* real-clock ref-count) 1)
  (set! (-> self clock) (-> *display* real-clock))
  (set! (-> self draw?) #f)
  (go-virtual idle)
  )

(deftype scorpion-gun-shot (projectile)
  ((init-pos        vector  :inline)
   (init-dir        vector  :inline)
   (collide-normal  vector  :inline)
   )
  )


(defmethod projectile-method-24 ((this scorpion-gun-shot))
  0
  (none)
  )

(defmethod projectile-method-26 ((this scorpion-gun-shot))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this init-pos))))
      (draw-beam (-> *part-id-table* 975) (-> this init-pos) s3-1 #t)
      (draw-beam (-> *part-id-table* 978) (-> this init-pos) (-> this starting-dir) #f)
      (let ((s5-0 (-> *part-id-table* 986))
            (s4-0 (-> *part-id-table* 985))
            )
        (new 'stack-no-clear 'vector)
        (let ((s2-0 (vector-reflect! (new 'stack-no-clear 'vector) s3-1 (-> this collide-normal))))
          (vector-normalize! s2-0 1.0)
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-x))
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-y))
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-z))
          (let ((a1-7 (new 'stack-no-clear 'matrix))
                (s1-0 (new 'stack-no-clear 'vector))
                (s3-2 (new 'stack-no-clear 'vector))
                )
            (vector-cross! (-> a1-7 rvec) *y-vector* s2-0)
            (vector-cross! (-> a1-7 uvec) s2-0 (-> a1-7 rvec))
            (set! (-> a1-7 fvec quad) (-> s2-0 quad))
            (matrix->eul (the-as euler-angles s1-0) a1-7 21)
            (vector-negate! s3-2 s1-0)
            (let ((a0-14 s3-2))
              (let ((v1-16 s3-2))
                (let ((a1-10 -3640.889))
                  (.mov vf6 a1-10)
                  )
                (.lvf vf4 (&-> v1-16 quad))
                )
              (.add.x.vf vf5 vf0 vf0 :mask #b1000)
              (.add.x.vf vf5 vf4 vf6 :mask #b111)
              (.svf (&-> a0-14 quad) vf5)
              )
            (sparticle-set-conerot s5-0 s3-2)
            (sparticle-set-conerot s4-0 s3-2)
            )
          )
        )
      )
    (cond
      ((logtest? (-> *part-group-id-table* 228 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 228))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 228))
        )
      )
    0
    (none)
    )
  )

(defmethod projectile-method-27 ((this scorpion-gun-shot))
  (draw-beam (-> *part-id-table* 975) (-> this init-pos) (-> this init-dir) #f)
  (draw-beam (-> *part-id-table* 978) (-> this init-pos) (-> this starting-dir) #f)
  0
  (none)
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound ((this scorpion-gun-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "scorp-gun-fire")
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "blue-shot-hit")
       )
      )
    )
  (none)
  )

(defun scorpion-gun-shot-move ((arg0 scorpion-gun-shot))
  (projectile-move-fill-line-sphere arg0)
  (when (logtest? (-> arg0 root status) (collide-status touch-actor))
    )
  (if (logtest? (-> arg0 root status) (collide-status touch-surface))
      (go (method-of-object arg0 impact))
      )
  0
  (none)
  )

(defmethod setup-collision! ((this scorpion-gun-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-scorp-shot)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 1228.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd obstacle pusher shield))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this scorpion-gun-shot))
  (with-pp
    (set! (-> this init-pos quad) (-> this root trans quad))
    (set! (-> this init-dir quad) (-> this starting-dir quad))
    (vector-normalize-copy!
      (-> this root transv)
      (-> this init-dir)
      (* 1024000.0 (-> pp clock frames-per-second))
      )
    (set! (-> this attack-mode) 'eco-blue)
    (set! (-> this max-speed) (* 1024000.0 (-> pp clock frames-per-second)))
    (set! (-> this timeout) 1)
    (set! (-> this move) scorpion-gun-shot-move)
    (vector-reset! (-> this collide-normal))
    (set! (-> this damage) 4.0)
    (set! (-> this vehicle-impulse-factor) 0.5)
    (logior! (-> this options) (projectile-options po13))
    0
    (none)
    )
  )

(deftype scorpion-gun (process-drawable)
  ((aim-dir                 vector      :inline)
   (scorp-quat              quaternion  :inline)
   (scorp-smooth-quat       quaternion  :inline)
   (scorp                   handle)
   (manager                 handle)
   (hud-aim                 handle)
   (barrel-spin-angle       float)
   (barrel-spin-rate        float)
   (barrel-kick             float)
   (last-fire-time          time-frame)
   (valid-target-time       time-frame)
   (valid-target-anim-time  time-frame)
   (target-handle           handle)
   (rotx                    float)
   (rotxv                   float)
   (rotxvv                  float)
   (roty                    float)
   (rotyv                   float)
   (rotyvv                  float)
   )
  (:state-methods
    idle
    active
    firing
    die
    )
  (:methods
    (scorpion-gun-method-24 (_type_) none)
    (scorpion-gun-method-25 (_type_) none)
    )
  )


(defskelgroup skel-scorpion-gun scorpion-gun scorpion-gun-lod0-jg scorpion-gun-idle-ja
              ((scorpion-gun-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defbehavior scorpion-gun-handler scorpion-gun ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (sv-32 vector) (sv-128 quaternion))
  (case arg2
    (('die)
     (go-virtual die)
     )
    (('shutdown)
     (go-virtual idle)
     )
    (('get-cam-info)
     (let ((s5-0 (joint-node scorpion-gun-lod0-jg main)))
       (set! sv-32 (vector<-cspace! (new 'stack-no-clear 'vector) s5-0))
       (vector+float*! sv-32 sv-32 (-> s5-0 bone transform uvec) 7372.8)
       (vector+float*! sv-32 sv-32 (-> s5-0 bone transform fvec) -24576.0)
       (set! (-> sv-32 y) (fmax (-> sv-32 y) (-> s5-0 bone transform trans y)))
       (let ((s4-0 (new 'stack-no-clear 'vector)))
         (set! (-> s4-0 quad) (-> self root trans quad))
         (let ((s3-0 (new 'stack-no-clear 'vector)))
           (set! (-> s3-0 x) 0.0)
           (set! (-> s3-0 y) 0.0)
           (set! (-> s3-0 z) -24576.0)
           (set! (-> s3-0 w) 0.0)
           (let ((s0-0 (matrix->quaternion (new 'stack-no-clear 'quaternion) (-> s5-0 bone transform))))
             (set! sv-128 (quaternion*!
                            (new 'stack-no-clear 'quaternion)
                            s0-0
                            (quaternion-conjugate! (new 'stack-no-clear 'quaternion) (-> self scorp-quat))
                            )
                   )
             )
           (vector-rotate-around-y! s3-0 s3-0 (quaternion-y-angle sv-128))
           (vector-orient-by-quat! s3-0 s3-0 (-> self scorp-quat))
           (vector+! s4-0 s4-0 s3-0)
           )
         (set! (-> sv-32 y) (fmax (-> sv-32 y) (-> s4-0 y)))
         )
       (set! (-> (the-as vector (-> arg3 param 0)) quad) (-> sv-32 quad))
       (vector-normalize-copy! (the-as vector (-> arg3 param 1)) (-> s5-0 bone transform fvec) 1.0)
       )
     )
    )
  )

(defun quaternion-seek-by-angle! ((arg0 quaternion) (arg1 degrees))
  (let ((f30-0 (* 910.2222 (seconds-per-frame)))
        (f0-2 (* 0.5 (acos (quaternion-dot arg0 (the-as quaternion arg1)))))
        )
    (cond
      ((< f0-2 f30-0)
       (quaternion-copy! arg0 (the-as quaternion arg1))
       )
      ((< 0.0 f0-2)
       (quaternion-slerp! arg0 arg0 (the-as quaternion arg1) (fmax 0.0 (fmin 1.0 (/ f30-0 f0-2))))
       (quaternion-normalize! arg0)
       )
      )
    )
  )

;; ERROR: Stack slot load at 80 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 80 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 80 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 80 mismatch: defined as size 4, got size 16
(defbehavior control-post scorpion-gun ((arg0 symbol))
  (local-vars (sv-64 quaternion) (sv-68 vector) (sv-72 vector) (sv-80 float))
  (cond
    (arg0
      (set! (-> self rotyvv) (analog-input (the-as int (-> *cpad-list* cpads 0 leftx)) 128.0 64.0 96.0 -163840.0))
      (set! (-> self rotxvv) (analog-input (the-as int (-> *cpad-list* cpads 0 lefty)) 128.0 32.0 110.0 -127431.11))
      (if (-> *setting-control* cam-current flip-vertical)
          (set! (-> self rotxvv) (- (-> self rotxvv)))
          )
      )
    (else
      (set! (-> self rotyvv) 0.0)
      (set! (-> self rotxvv) 0.0)
      )
    )
  (+! (-> self rotyv) (* (-> self rotyvv) (seconds-per-frame)))
  (set! (-> self rotyv) (fmax -98304.0 (fmin 98304.0 (-> self rotyv))))
  (set! (-> self roty)
        (the float (sar (shl (the int (+ (-> self roty) (* (-> self rotyv) (seconds-per-frame)))) 48) 48))
        )
  (set! (-> self rotyv) (* 0.8 (-> self rotyv)))
  (+! (-> self rotxv) (* (-> self rotxvv) (seconds-per-frame)))
  (set! (-> self rotxv) (fmax -65536.0 (fmin 65536.0 (-> self rotxv))))
  (set! (-> self rotx)
        (the float (sar (shl (the int (+ (-> self rotx) (* (-> self rotxv) (seconds-per-frame)))) 48) 48))
        )
  (set! (-> self rotxv) (* 0.8 (-> self rotxv)))
  (cond
    ((>= (-> self rotx) 5461.3335)
     (set! (-> self rotx) 5461.3335)
     (set! (-> self rotxv) 0.0)
     )
    ((>= -10922.667 (-> self rotx))
     (set! (-> self rotx) -10922.667)
     (set! (-> self rotxv) 0.0)
     )
    )
  (set! sv-64 (new 'stack-no-clear 'quaternion))
  (set! sv-68 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> self scorp-quat)))
  (set! sv-72 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> self root quat)))
  (let ((gp-0 quaternion-slerp!)
        (s5-0 (-> self scorp-smooth-quat))
        (s4-0 (-> self scorp-smooth-quat))
        (s3-0 (-> self scorp-quat))
        (s2-0 lerp-scale)
        (s1-0 0.0)
        (s0-0 2.0)
        )
    (set! sv-80 (vector-dot sv-68 sv-72))
    (let ((a3-2 (cos 45.0))
          (t0-2 0.0)
          )
      (gp-0 s5-0 s4-0 s3-0 (* (s2-0 s1-0 s0-0 sv-80 a3-2 t0-2) (seconds-per-frame)))
      )
    )
  (quaternion-rotate-local-y! sv-64 (-> self scorp-smooth-quat) (-> self roty))
  (quaternion-rotate-local-x! (-> self root quat) sv-64 (-> self rotx))
  (ja-post)
  (none)
  )

(defbehavior aim-post scorpion-gun ()
  (local-vars
    (sv-656 vector)
    (sv-1296 cspace)
    (sv-1300 collide-query)
    (sv-1304 vector)
    (sv-1308 vector)
    (sv-1312 rgba)
    )
  (send-event (handle->process (-> self manager)) 'reset-arrows)
  (let ((gp-0 (-> (joint-node scorpion-gun-lod0-jg muzzle) bone transform))
        (s4-0 (new 'stack-no-clear 'vector))
        (s5-0 (the-as (array collide-shape) (new 'stack 'boxed-array collide-shape 128)))
        )
    (set! sv-656 (new 'stack-no-clear 'vector))
    (vector-normalize-copy! sv-656 (-> gp-0 fvec) 1.0)
    (vector+float*! s4-0 (-> gp-0 trans) sv-656 512000.0)
    (set! (-> s4-0 w) 614400.0)
    (let ((s3-0 (fill-actor-list-for-box *actor-hash* s4-0 (-> s5-0 data) (-> s5-0 length))))
      (set! (-> s5-0 length) s3-0)
      (let ((s4-1 (the-as process #f)))
        (let ((f30-0 0.0))
          (dotimes (s2-0 s3-0)
            (let ((s0-0 (-> s5-0 s2-0 root-prim prim-core))
                  (s1-0 (-> s5-0 s2-0 root-prim cshape process))
                  )
              (when (logtest? (process-mask enemy projectile) (-> s1-0 mask))
                (if #f
                    (add-debug-sphere #t (bucket-id debug) (the-as vector s0-0) (-> s0-0 world-sphere w) *color-red*)
                    )
                (let* ((a1-7 (vector-! (new 'stack-no-clear 'vector) (the-as vector s0-0) (-> gp-0 trans)))
                       (f28-0 (vector-length a1-7))
                       )
                  (when (< f28-0 1024000.0)
                    (let* ((f0-7 (* f28-0 (+ 1.0 (vector-dot (vector-normalize-copy! (new 'stack-no-clear 'vector) a1-7 1.0) sv-656))))
                           (v1-37 (-> s1-0 type))
                           (v1-38 (cond
                                    ((or (= v1-37 'beast-grenade-2) (= v1-37 'mh-flyer-shot))
                                     0.5
                                     )
                                    ((= v1-37 'des-beast-2)
                                     0.8
                                     )
                                    )
                                  )
                           (f0-8 (* f0-7 v1-38))
                           )
                      (when (or (not (the-as process-drawable s4-1)) (< f0-8 f30-0))
                        (set! s4-1 s1-0)
                        (set! f30-0 f0-8)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        (set! (-> self target-handle) (if (the-as process-drawable s4-1)
                                          (process->handle (the-as process-drawable s4-1))
                                          (the-as handle #f)
                                          )
              )
        )
      )
    )
  (let ((gp-1 (-> self node-list data 7 bone transform)))
    (set! (-> self aim-dir quad) (-> gp-1 fvec quad))
    (when (-> self target-handle)
      (let* ((s5-1 (handle->process (-> self target-handle)))
             (s4-2 (if (type? s5-1 process-drawable)
                       s5-1
                       )
                   )
             )
        (when (and s4-2 (let ((s5-2 (-> (the-as process-drawable s4-2) root)))
                          (if (type? s5-2 collide-shape)
                              s5-2
                              )
                          )
                   )
          (let ((s5-4 (vector-!
                        (new 'stack-no-clear 'vector)
                        (the-as vector (-> (the-as process-focusable s4-2) root root-prim prim-core))
                        (-> gp-1 trans)
                        )
                      )
                )
            (vector-normalize! s5-4 1.0)
            (let ((f0-10 (acos (vector-dot s5-4 (-> gp-1 fvec)))))
              (vector-lerp! (-> self aim-dir) (-> gp-1 fvec) s5-4 (lerp-scale 0.0 1.0 f0-10 1820.4445 91.022224))
              )
            )
          (vector-normalize! (-> self aim-dir) 1.0)
          )
        )
      )
    )
  (set! sv-1296 (joint-node scorpion-gun-lod0-jg muzzle))
  (set! sv-1300 (new 'stack-no-clear 'collide-query))
  (set! sv-1304 (-> self aim-dir))
  (set! sv-1308 (new 'stack-no-clear 'vector))
  (set! sv-1312 (the-as rgba (new 'stack-no-clear 'array 'rgba 1)))
  (set! (-> sv-1300 start-pos quad) (-> sv-1296 bone transform trans quad))
  (vector-float*! (-> sv-1300 move-dist) sv-1304 1024000.0)
  (let ((v1-73 sv-1300))
    (set! (-> v1-73 radius) 819.2)
    (set! (-> v1-73 collide-with) (collide-spec enemy obstacle hit-by-others-list))
    (set! (-> v1-73 ignore-process0) self)
    (set! (-> v1-73 ignore-process1) #f)
    (set! (-> v1-73 ignore-pat)
          (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
          )
    (set! (-> v1-73 action-mask) (collide-action solid))
    )
  (fill-using-line-sphere *collide-cache* sv-1300)
  (let ((f30-1 (probe-using-line-sphere *collide-cache* sv-1300)))
    (cond
      ((and (>= f30-1 0.0)
            (type? (-> sv-1300 best-other-tri collide-ptr) collide-shape-prim)
            (logtest? (process-mask enemy projectile)
                      (-> (the-as collide-shape-prim (-> sv-1300 best-other-tri collide-ptr)) cshape process mask)
                      )
            )
       (if (>= (+ (current-time) (seconds -0.5)) (-> self valid-target-time))
           (set! (-> self valid-target-anim-time) (+ (current-time) (seconds 0.4)))
           )
       (vector+float*! sv-1308 (-> sv-1300 start-pos) (-> sv-1300 move-dist) f30-1)
       (set! sv-1312
             (rgba-lerp
               (new 'static 'rgba :r #xf2 :a #x80)
               (new 'static 'rgba :r #xff :g #xec :b #x48 :a #x10)
               (the-as
                 rgba
                 (* 0.016666668 (fmax 0.0 (fmin 1.0 (the float (- (-> self valid-target-anim-time) (current-time))))))
                 )
               )
             )
       (set-time! (-> self valid-target-time))
       )
      (else
        (vector+float*! sv-1308 (-> sv-1300 start-pos) (-> sv-1300 move-dist) 1.0)
        (set! sv-1312 *color-gray*)
        (set! sv-1312 (copy-and-set-field sv-1312 a 16))
        )
      )
    )
  (set! (-> sv-1308 w) 1.0)
  (let ((gp-3 (new 'stack-no-clear 'vector)))
    (if (transform-point-vector! gp-3 sv-1308)
        (send-event (handle->process (-> self hud-aim)) 'draw gp-3 sv-1312)
        )
    )
  0
  (none)
  )

(defstate idle (scorpion-gun)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (go-virtual active)
       )
      (else
        (scorpion-gun-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (send-event (handle->process (-> self hud-aim)) 'die)
    )
  :code sleep-code
  :post (behavior ()
    (scorpion-gun-method-24 self)
    (quaternion-copy! (-> self scorp-smooth-quat) (-> self scorp-quat))
    (control-post #f)
    (ja-post)
    )
  )

(defstate active (scorpion-gun)
  :virtual #t
  :event scorpion-gun-handler
  :enter (behavior ()
    (if (not (-> self hud-aim))
        (set! (-> self hud-aim)
              (process->handle (ppointer->process (process-spawn scorpion-gun-aim :name "scorpion-gun-aim" :to self)))
              )
        )
    )
  :trans (behavior ()
    (if (cpad-hold? 0 r1)
        (go-virtual firing)
        )
    )
  :code sleep-code
  :post (behavior ()
    (seek! (-> self barrel-spin-rate) 0.0 (* 16384.0 (seconds-per-frame)))
    (set! (-> self barrel-spin-angle)
          (the float (sar (shl (the int (+ (-> self barrel-spin-angle) (-> self barrel-spin-rate))) 48) 48))
          )
    (scorpion-gun-method-24 self)
    (control-post #t)
    (aim-post)
    )
  )

(defstate firing (scorpion-gun)
  :virtual #t
  :event scorpion-gun-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self barrel-spin-angle) 0.0)
    )
  :trans (behavior ()
    (if (and (time-elapsed? (-> self state-time) (seconds 0.01))
             (not (logtest? (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons r1)))
             )
        (go-virtual active)
        )
    )
  :code sleep-code
  :post (behavior ()
    (seek! (-> self barrel-spin-rate) (* 262144.0 (seconds-per-frame)) (* 32768.0 (seconds-per-frame)))
    (set! (-> self barrel-spin-angle)
          (the float (sar (shl (the int (+ (-> self barrel-spin-angle) (-> self barrel-spin-rate))) 48) 48))
          )
    (seek! (-> self barrel-kick) 0.0 (* 16384.0 (seconds-per-frame)))
    (scorpion-gun-method-24 self)
    (control-post #t)
    (aim-post)
    (when (time-elapsed? (-> self last-fire-time) (seconds 0.1))
      (set! (-> self barrel-kick) 1638.4)
      (let ((s5-0 (new 'stack-no-clear 'scorpion-gun-stack-var0))
            (gp-0 (joint-node scorpion-gun-lod0-jg muzzle))
            )
        (let ((s4-0 (handle->process (-> self scorp))))
          (vector-normalize-copy! (-> s5-0 vec0) (-> self aim-dir) 409600.0)
          (set! (-> s5-0 params ent) (-> self entity))
          (set! (-> s5-0 params charge) 1.0)
          (set! (-> s5-0 params options) (projectile-options))
          (logclear! (-> s5-0 params options) (projectile-options po14 po15 po16))
          (set! (-> s5-0 params pos quad) (-> gp-0 bone transform trans quad))
          (set! (-> s5-0 params vel quad) (-> s5-0 vec0 quad))
          (set! (-> s5-0 params notify-handle) (the-as handle #f))
          (set! (-> s5-0 params owner-handle) (process->handle s4-0))
          (set! (-> s5-0 params target-handle) (the-as handle #f))
          (set! (-> s5-0 params target-pos quad) (the-as uint128 0))
          (set! (-> s5-0 params ignore-handle) (process->handle s4-0))
          )
        (let* ((v1-32 *game-info*)
               (a0-23 (+ (-> v1-32 attack-id) 1))
               )
          (set! (-> v1-32 attack-id) a0-23)
          (set! (-> s5-0 params attack-id) a0-23)
          )
        (set! (-> s5-0 params timeout) (seconds 4))
        (spawn-projectile scorpion-gun-shot (-> s5-0 params) self *default-dead-pool*)
        (let ((v1-36 (get-field-spec-by-id (-> *part-id-table* 967) (sp-field-id spt-omega))))
          (if v1-36
              (set! (-> v1-36 initial-valuef) (+ -20480.0 (-> s5-0 float0)))
              )
          )
        (let ((s5-1 (new 'stack-no-clear 'matrix)))
          (let* ((v1-37 s5-1)
                 (a3-1 (-> gp-0 bone transform))
                 (a0-30 (-> a3-1 rvec quad))
                 (a1-6 (-> a3-1 uvec quad))
                 (a2-4 (-> a3-1 fvec quad))
                 (a3-2 (-> a3-1 trans quad))
                 )
            (set! (-> v1-37 rvec quad) a0-30)
            (set! (-> v1-37 uvec quad) a1-6)
            (set! (-> v1-37 fvec quad) a2-4)
            (set! (-> v1-37 trans quad) a3-2)
            )
          (matrix->trans (-> gp-0 bone transform) (-> s5-1 trans))
          (if (logtest? (-> *part-group-id-table* 227 flags) (sp-group-flag sp13))
              (part-tracker-spawn
                part-tracker-subsampler
                :to *entity-pool*
                :group (-> *part-group-id-table* 227)
                :duration 1
                :mat-joint s5-1
                )
              (part-tracker-spawn
                part-tracker
                :to *entity-pool*
                :group (-> *part-group-id-table* 227)
                :duration 1
                :mat-joint s5-1
                )
              )
          )
        )
      (set-time! (-> self last-fire-time))
      )
    )
  )

(defstate die (scorpion-gun)
  :virtual #t
  :enter (behavior ()
    (send-event (handle->process (-> self hud-aim)) 'die)
    )
  :trans (behavior ()
    (if (not (-> self child))
        (deactivate self)
        )
    )
  :code sleep-code
  )

(defmethod scorpion-gun-method-24 ((this scorpion-gun))
  (let ((gp-0 (handle->process (-> this scorp)))
        (s5-0 (-> this root))
        )
    (when gp-0
      (set! (-> s5-0 transv quad) (-> (the-as process-drawable gp-0) root transv quad))
      (quaternion-copy! (-> this scorp-quat) (-> (the-as process-drawable gp-0) root quat))
      (vector-matrix*!
        (-> s5-0 trans)
        (new 'static 'vector :y 8478.72 :z -10813.44 :w 1.0)
        (-> (the-as process-focusable gp-0) rbody matrix)
        )
      )
    )
  0
  (none)
  )

(defmethod scorpion-gun-method-25 ((this scorpion-gun))
  (set! (-> this rotx) 0.0)
  (set! (-> this rotxv) 0.0)
  (set! (-> this rotxvv) 0.0)
  (set! (-> this roty) 0.0)
  (set! (-> this rotyv) 0.0)
  (set! (-> this rotyvv) 0.0)
  0
  (none)
  )

(defbehavior scorpion-gun-init-by-other scorpion-gun ((arg0 entity) (arg1 handle) (arg2 handle))
  (stack-size-set! (-> self main-thread) 32)
  (process-entity-set! self arg0)
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-scorpion-gun" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logclear! (-> self mask) (process-mask actor-pause))
  (logior! (-> self skel status) (joint-control-status sync-math))
  (scorpion-gun-method-25 self)
  (quaternion-copy! (-> self root quat) *unity-quaternion*)
  (quaternion-copy! (-> self scorp-smooth-quat) *unity-quaternion*)
  (set! (-> self manager) arg1)
  (set! (-> self scorp) arg2)
  (set! (-> self barrel-kick) 0.0)
  (set! (-> self barrel-spin-rate) 0.0)
  (set! (-> self valid-target-time) 0)
  (set! (-> self valid-target-anim-time) 0)
  (set! (-> self target-handle) (the-as handle #f))
  (set! (-> self hud-aim) (the-as handle #f))
  (scorpion-gun-method-24 self)
  (quaternion-copy! (-> self scorp-smooth-quat) (-> self scorp-quat))
  (ja-no-eval :group! scorpion-gun-idle-ja :num! zero)
  (ja-post)
  (let ((a0-14 (joint-node scorpion-gun-lod0-jg gun_Z_rotate)))
    (set! (-> a0-14 param0)
          (lambda ((arg0 cspace) (arg1 transformq))
            (let ((v1-0 (-> arg0 param1)))
              (quaternion-vector-angle! (-> arg1 quat) *z-vector* (-> (the-as scorpion-gun v1-0) barrel-spin-angle))
              )
            (cspace<-parented-transformq-joint! arg0 arg1)
            (none)
            )
          )
    (set! (-> a0-14 param1) self)
    )
  (let ((a0-15 (joint-node scorpion-gun-lod0-jg gun_X_rot_Z_trans)))
    (set! (-> a0-15 param0)
          (lambda ((arg0 cspace) (arg1 transformq))
            (let ((v1-0 (-> arg0 param1)))
              (set! (-> arg1 trans z) (- (-> arg1 trans z) (-> (the-as scorpion-gun v1-0) barrel-kick)))
              )
            (cspace<-parented-transformq-joint! arg0 arg1)
            (none)
            )
          )
    (set! (-> a0-15 param1) self)
    )
  (go-virtual idle)
  )

(deftype scorpion-gun-spawn-info (structure)
  ((enemy-to-spawn   symbol)
   (spawn-u          float)
   (use-path-index   int32)
   (follow-distance  float)
   )
  )


(define *scorpion-beast-spawn-info*
  (new 'static 'boxed-array :type scorpion-gun-spawn-info
    (new 'static 'scorpion-gun-spawn-info
      :enemy-to-spawn 'des-beast-2
      :use-path-index 2
      :follow-distance 122880.0
      )
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 2.0 :use-path-index 1)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 5.0 :use-path-index 12)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 8.5 :use-path-index 13)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 9.0 :use-path-index 3)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 13.0 :use-path-index 14)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 13.5 :use-path-index 15)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 16.0 :use-path-index 4)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'mh-flyer :spawn-u 21.0 :use-path-index 10)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 26.0 :use-path-index 5)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 30.0 :use-path-index 16)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 33.0 :use-path-index 17)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 33.0 :use-path-index 18)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'mh-flyer :spawn-u 34.0 :use-path-index 19)
    (new 'static 'scorpion-gun-spawn-info
      :enemy-to-spawn 'des-beast-2
      :spawn-u 38.5
      :use-path-index 32
      :follow-distance -204800.0
      )
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 41.0 :use-path-index 24)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 41.0 :use-path-index 25)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 47.0 :use-path-index 27)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'mh-flyer :spawn-u 49.0 :use-path-index 26)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 53.5 :use-path-index 7)
    (new 'static 'scorpion-gun-spawn-info
      :enemy-to-spawn 'des-beast-2
      :spawn-u 58.75
      :use-path-index 35
      :follow-distance 25.0
      )
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 63.0 :use-path-index 30)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 63.0 :use-path-index 31)
    (new 'static 'scorpion-gun-spawn-info :enemy-to-spawn 'des-beast-2 :spawn-u 65.0 :use-path-index 8)
    )
  )

(deftype scorpion-gun-manager-path (structure)
  ((path      desbeast-path)
   (curr-pos  float)
   (next-pos  int32)
   (prev-pos  int32)
   )
  )


(deftype scorpion-gun-manager (process)
  ((trans                        vector                     :inline)
   (quat                         quaternion                 :inline)
   (speecher-on-start            speecher                   :inline)
   (speecher-on-beast-death      speecher                   :inline)
   (speecher-on-damage           speecher                   :inline)
   (speecher-on-beast-triggered  speecher                   :inline)
   (speecher-on-flyer-triggered  speecher                   :inline)
   (state-time                   time-frame)
   (path-info                    scorpion-gun-manager-path  :inline)
   (enemy                        handle                     36)
   (last-beast                   handle)
   (gun                          handle)
   (scorp                        handle)
   (hud-health                   handle)
   (hud-arrows                   handle)
   (use-camera                   symbol)
   (last-scorpion-hit-points     float)
   )
  (:state-methods
    idle
    setup
    active
    shutdown
    fail
    restart
    die-fast
    )
  (:methods
    (scorpion-gun-manager-method-21 (_type_) none)
    (scorpion-gun-manager-method-22 (_type_) none)
    )
  )


;; WARN: disable def twice: 85. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defbehavior scorpion-gun-manager-handler scorpion-gun-manager ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('turret-type)
     'scorpion
     )
    (('trans 'player-pos)
     (let ((v1-1 (new 'stack-no-clear 'vector)))
       (set! (-> v1-1 quad) (-> self trans quad))
       (+! (-> v1-1 y) -12288.0)
       (set! v0-0 (-> arg3 param 0))
       (set! (-> (the-as vector v0-0) quad) (-> v1-1 quad))
       )
     v0-0
     )
    (('quat 'player-quat)
     (quaternion-copy! (the-as quaternion (-> arg3 param 0)) (-> self quat))
     )
    (('exit-valid)
     (set! (-> (the-as vector (-> arg3 param 0)) quad) (-> self trans quad))
     #t
     )
    (('exit)
     #t
     )
    (('beast-died 'flyer-died)
     (play-next-speech (-> self speecher-on-beast-death))
     )
    (('last-beast-died)
     (set! (-> self last-beast) (process->handle arg0))
     (go-virtual shutdown)
     )
    (('use-camera)
     (cond
       ((-> arg3 param 0)
        (when (not (-> self use-camera))
          (set-setting! 'mode-name 'cam-scorpion-gun 0.0 0)
          (set-setting! 'fov 'abs (degrees 85.0) 0)
          (set! v0-0 #t)
          (set! (-> self use-camera) (the-as symbol v0-0))
          v0-0
          )
        )
       (else
         (when (-> self use-camera)
           (remove-setting! 'mode-name)
           (remove-setting! 'fov)
           (set! (-> self use-camera) #f)
           #f
           )
         )
       )
     )
    (('get-cam-info)
     (let ((v1-22 (handle->process (-> self gun))))
       (when v1-22
         (let ((t0-30 (new 'stack-no-clear 'event-message-block)))
           (set! (-> t0-30 from) (process->ppointer arg0))
           (set! (-> t0-30 num-params) arg1)
           (set! (-> t0-30 message) arg2)
           (set! (-> t0-30 param 0) (-> arg3 param 0))
           (set! (-> t0-30 param 1) (-> arg3 param 1))
           (set! (-> t0-30 param 2) (-> arg3 param 2))
           (set! (-> t0-30 param 3) (-> arg3 param 3))
           (set! (-> t0-30 param 4) (-> arg3 param 4))
           (set! (-> t0-30 param 5) (-> arg3 param 5))
           (send-event-function v1-22 t0-30)
           )
         #t
         )
       )
     )
    (('reset-arrows 'off-to-left 'off-to-right)
     (let ((v1-27 (handle->process (-> self hud-arrows))))
       (when v1-27
         (let ((t0-38 (new 'stack-no-clear 'event-message-block)))
           (set! (-> t0-38 from) (process->ppointer arg0))
           (set! (-> t0-38 num-params) arg1)
           (set! (-> t0-38 message) arg2)
           (set! (-> t0-38 param 0) (-> arg3 param 0))
           (set! (-> t0-38 param 1) (-> arg3 param 1))
           (set! (-> t0-38 param 2) (-> arg3 param 2))
           (set! (-> t0-38 param 3) (-> arg3 param 3))
           (set! (-> t0-38 param 4) (-> arg3 param 4))
           (set! (-> t0-38 param 5) (-> arg3 param 5))
           (send-event-function v1-27 t0-38)
           )
         )
       )
     )
    )
  )

;; WARN: Return type mismatch symbol vs object.
(defbehavior beast-post scorpion-gun-manager ()
  (dotimes (gp-0 (-> *scorpion-beast-spawn-info* length))
    (let ((s5-0 (-> *scorpion-beast-spawn-info* gp-0)))
      (when (and (< (-> s5-0 spawn-u) (-> self path-info curr-pos))
                 (< (-> self path-info curr-pos) (+ 1.0 (-> s5-0 spawn-u)))
                 )
        (when (not (and (-> self enemy (-> s5-0 use-path-index)) (handle->process (-> self enemy (-> s5-0 use-path-index))))
                   )
          (let* ((v1-17 (-> s5-0 enemy-to-spawn))
                 (s4-1 (cond
                         ((= v1-17 'des-beast-2)
                          (play-next-speech (-> self speecher-on-beast-triggered))
                          (ppointer->process (process-spawn
                                               des-beast-2
                                               :init des-beast-init-by-other
                                               (level-get *level* 'desbattl)
                                               (-> self entity)
                                               (-> *desbeast-battle-path-table* (-> s5-0 use-path-index))
                                               *unity-quaternion*
                                               (process->handle self)
                                               :name "des-beast-2"
                                               :to self
                                               )
                                             )
                          )
                         ((= v1-17 'mh-flyer)
                          (play-next-speech (-> self speecher-on-flyer-triggered))
                          (ppointer->process (process-spawn
                                               mh-flyer
                                               (level-get *level* 'desbattl)
                                               (-> self entity)
                                               (-> *desbeast-battle-path-table* (-> s5-0 use-path-index))
                                               *unity-quaternion*
                                               (process->handle self)
                                               :name "mh-flyer"
                                               :to self
                                               )
                                             )
                          )
                         )
                       )
                 )
            (send-event s4-1 'follow-distance (-> s5-0 follow-distance))
            (if (= gp-0 (+ (-> *scorpion-beast-spawn-info* length) -1))
                (send-event s4-1 'last-beast)
                )
            (set! (-> self enemy (-> s5-0 use-path-index)) (process->handle s4-1))
            )
          )
        )
      )
    )
  #f
  )

(defstate idle (scorpion-gun-manager)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('pickup)
       (cond
         ((send-event proc 'change-mode 'turret self)
          (go-virtual setup)
          #t
          )
         (else
           #f
           )
         )
       )
      (else
        (scorpion-gun-manager-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'traffic-object-spawn-params)))
      (set! (-> gp-0 object-type) (traffic-type guard-a))
      (set! (-> gp-0 behavior) (the-as uint 3))
      (set! (-> gp-0 id) (the-as uint 0))
      (set! (-> gp-0 nav-mesh) #f)
      (set! (-> gp-0 nav-branch) #f)
      (set! (-> gp-0 proc) #f)
      (set! (-> gp-0 handle) (the-as handle #f))
      (set! (-> gp-0 user-data) (the-as uint 0))
      (set! (-> gp-0 flags) (traffic-spawn-flags tsf5))
      (set! (-> gp-0 guard-type) (the-as uint 11))
      (set! (-> gp-0 entity) #f)
      (vector-reset! (-> gp-0 velocity))
      (set! (-> gp-0 position quad) (-> (target-pos 0) quad))
      (quaternion-copy!
        (-> gp-0 rotation)
        (quaternion-axis-angle! (new 'stack-no-clear 'quaternion) 0.0 1.0 0.0 0.0)
        )
      (let ((a0-4 (vehicle-spawn (vehicle-type v-scorpion) gp-0)))
        (when a0-4
          (set! (-> self scorp) (process->handle a0-4))
          (send-event (handle->process (-> self scorp)) 'ai-ignore-nav-mesh)
          )
        )
      )
    )
  :trans (behavior ()
    (when (and *target*
               (not (cpad-hold? 0 l1))
               (handle->process (-> self scorp))
               (not (focus-test? *target* in-head light board mech dark teleporting))
               (and (< (vector-vector-xz-distance (-> self trans) (target-pos 0)) 61440.0)
                    (can-display-query? self "turret" -99.0)
                    )
               )
      (send-event *vehicle-manager* 'extra-bank (-> *v-scorpion-constants* sound bank-replace))
      (let ((gp-1
              (new 'stack 'font-context *font-default-matrix* 32 320 0.0 (font-color default) (font-flags shadow kerning))
              )
            )
        (let ((v1-21 gp-1))
          (set! (-> v1-21 width) (the float 340))
          )
        (let ((v1-22 gp-1))
          (set! (-> v1-22 height) (the float 80))
          )
        (let ((v1-23 gp-1)
              (a0-15 (-> *setting-control* user-default language))
              )
          (set! (-> v1-23 scale) (if (or (= a0-15 (language-enum korean)) (= a0-15 (language-enum russian)))
                                     0.9
                                     0.7
                                     )
                )
          )
        (set! (-> gp-1 flags) (font-flags shadow kerning large))
        (print-game-text
          (lookup-text! *common-text* (text-id text-0083) #f)
          gp-1
          #f
          44
          (bucket-id hud-draw-hud-alpha)
          )
        )
      (if (and (cpad-pressed? 0 triangle) (send-event *target* 'change-mode 'turret self))
          (go-virtual setup)
          )
      )
    (if *target*
        (look-at!
          (-> *target* neck)
          (vector+! (new 'stack-no-clear 'vector) (-> self trans) (new 'static 'vector :y 2048.0 :w 1.0))
          'nothing-special
          self
          )
        )
    )
  :code (behavior ()
    (suspend)
    (set! (-> self gun) (process->handle (ppointer->process (process-spawn
                                                              scorpion-gun
                                                              (-> self entity)
                                                              (process->handle self)
                                                              (-> self scorp)
                                                              :name "scorpion-gun"
                                                              :to *rigid-body-queue-manager*
                                                              )
                                                            )
                                         )
          )
    (send-event (handle->process (-> self scorp)) 'draw-turret #f)
    (sig-rider-spawn (the-as vehicle (handle->process (-> self scorp))) #t)
    (sleep-code)
    )
  :post (behavior ()
    (scorpion-gun-manager-method-21 self)
    (scorpion-gun-manager-method-22 self)
    )
  )

(defstate setup (scorpion-gun-manager)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('change-mode)
       (go-virtual active)
       )
      (else
        (scorpion-gun-manager-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (send-event self 'use-camera #t)
    (send-event (handle->process (-> self scorp)) 'go-player-control)
    )
  :code sleep-code
  :post (behavior ()
    (send-event (handle->process (-> self scorp)) 'use-camera #f)
    (scorpion-gun-manager-method-21 self)
    (scorpion-gun-manager-method-22 self)
    )
  )

(defstate active (scorpion-gun-manager)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('restart)
       (go-virtual restart)
       )
      (else
        (scorpion-gun-manager-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (send-event (handle->process (-> self gun)) 'trigger)
    (send-event (handle->process (-> self scorp)) 'set-control-hook-ai)
    (play-next-speech (-> self speecher-on-start))
    (let ((gp-0 (handle->process (-> self scorp))))
      (when gp-0
        (set! (-> self hud-health) (process->handle (hud-vehicle-health-spawn (the-as vehicle gp-0))))
        (set! (-> self last-scorpion-hit-points) (-> (the-as vehicle gp-0) hit-points))
        )
      )
    (set! (-> self hud-arrows)
          (ppointer->handle (process-spawn hud-scorpion-gun :init hud-init-by-other :name "hud-scorpion-gun" :to self))
          )
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (send-event (handle->process (-> self hud-health)) 'hide-and-die)
    (send-event (handle->process (-> self hud-arrows)) 'hide-and-die)
    )
  :trans (behavior ()
    (send-event (handle->process (-> self hud-arrows)) 'force-show)
    (send-event (handle->process (-> self hud-health)) 'force-show)
    )
  :code sleep-code
  :post (behavior ()
    (scorpion-gun-manager-method-22 self)
    (scorpion-gun-manager-method-21 self)
    (beast-post)
    (let ((v1-5 (handle->process (-> self scorp))))
      (when v1-5
        (let ((f30-0 (- (-> self last-scorpion-hit-points) (-> (the-as vehicle v1-5) hit-points))))
          (if (>= f30-0 0.02)
              (play-next-speech (-> self speecher-on-damage))
              )
          (set! (-> self last-scorpion-hit-points) (- (-> self last-scorpion-hit-points) f30-0))
          )
        )
      )
    (let ((gp-0 (-> self path-info)))
      (let ((s5-0 (-> gp-0 path node (-> gp-0 next-pos)))
            (s3-0 (-> gp-0 path node (-> gp-0 prev-pos)))
            (s4-0 (new 'stack-no-clear 'inline-array 'vector 1))
            )
        (let ((f30-1 (vector-segment-distance-point! (-> self trans) (the-as vector s3-0) (the-as vector s5-0) (-> s4-0 0)))
              )
          (set! (-> gp-0 curr-pos)
                (+ (the float (-> gp-0 prev-pos)) (/ (vector-vector-distance (the-as vector s3-0) (-> s4-0 0))
                                                     (vector-vector-distance (the-as vector s3-0) (the-as vector s5-0))
                                                     )
                   )
                )
          (let ((s3-1 (new 'stack-no-clear 'inline-array 'vector 2)))
            (vector-! (-> s3-1 1) (the-as vector s5-0) (-> s4-0 0))
            (vector+float*! (-> s3-1 0) (-> s4-0 0) (-> s3-1 1) (lerp-scale 0.0 1.0 f30-1 122880.0 20480.0))
            (send-event (handle->process (-> self scorp)) 'ai-set-target-position (-> s3-1 0))
            )
          )
        (send-event (handle->process (-> self scorp)) 'ai-set-target-speed #x48700000)
        (when (< (vector-vector-distance (the-as vector s5-0) (-> s4-0 0)) 40960.0)
          (+! (-> gp-0 prev-pos) 1)
          (+! (-> gp-0 next-pos) 1)
          (when (>= (-> gp-0 next-pos) (the-as int (-> gp-0 path node-count)))
            (go-virtual fail)
            (set! (-> gp-0 prev-pos) (the-as int (+ (-> gp-0 path node-count) -2)))
            (set! (-> gp-0 next-pos) (the-as int (+ (-> gp-0 path node-count) -1)))
            )
          )
        )
      (when *display-path-marks*
        (format
          *stdebug*
          "prev-pos ~d, curr-pos ~f, next-pos ~d~%"
          (-> gp-0 prev-pos)
          (-> gp-0 curr-pos)
          (-> gp-0 next-pos)
          )
        (dotimes (gp-1 (the-as int (+ (-> self path-info path node-count) -1)))
          (add-debug-line
            #t
            (bucket-id debug-no-zbuf1)
            (the-as vector (-> self path-info path node gp-1))
            (the-as vector (-> self path-info path node (+ gp-1 1)))
            *color-red*
            #f
            (the-as rgba -1)
            )
          )
        )
      )
    )
  )

(defstate shutdown (scorpion-gun-manager)
  :virtual #t
  :event scorpion-gun-manager-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'complete)
      (let ((t9-0 send-event-function)
            (v1-6 (-> *game-info* sub-task-list (game-task-node desert-beast-battle-kill-last-beast)))
            )
        (t9-0
          (handle->process (if (-> v1-6 manager)
                               (-> v1-6 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-0
          )
        )
      )
    )
  :trans (behavior ()
    0
    )
  :code (behavior ()
    (local-vars (a1-5 event-message-block))
    (until (process-grab? *target* #f)
      (suspend)
      )
    (send-event self 'use-camera #f)
    (send-event (handle->process (-> self gun)) 'shutdown)
    (send-event *camera* 'change-target (handle->process (-> self last-beast)))
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 2))
        (suspend)
        )
      )
    (send-event (handle->process (-> self scorp)) 'set-control-hook-player)
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (seconds 4))
        (suspend)
        )
      )
    (until (process-release? *target*)
      (suspend)
      )
    (until (send-event-function *target* a1-5)
      (suspend)
      (set! a1-5 (new 'stack-no-clear 'event-message-block))
      (let ((v1-35 (process->ppointer self)))
        (set! (-> a1-5 from) v1-35)
        )
      (set! (-> a1-5 num-params) 4)
      (set! (-> a1-5 message) 'change-mode)
      (set! (-> a1-5 param 0) (the-as uint 'pilot))
      (set! (-> a1-5 param 1) (the-as uint #f))
      (set! (-> a1-5 param 2) (the-as uint 14))
      (set! (-> a1-5 param 3) (the-as uint #t))
      )
    (send-event *camera* 'change-target #f)
    (send-event (handle->process (-> self gun)) 'die)
    (send-event (handle->process (-> self scorp)) 'draw-turret #t)
    (send-event (handle->process (-> self scorp)) 'use-camera #t)
    (sleep-code)
    )
  :post (behavior ()
    (scorpion-gun-manager-method-21 self)
    )
  )

(defstate fail (scorpion-gun-manager)
  :virtual #t
  :event scorpion-gun-manager-handler
  :enter (behavior ()
    (send-event (handle->process (-> self hud-health)) 'hide-and-die)
    (send-event (handle->process (-> self hud-arrows)) 'hide-and-die)
    (send-event (handle->process (-> self gun)) 'shutdown)
    (send-event self 'use-camera #f)
    (send-event *camera* 'change-target (handle->process (-> self scorp)))
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 2))
        (suspend)
        )
      )
    (let* ((v1-7 (-> *game-info* sub-task-list (game-task-node desert-beast-battle-kill-last-beast)))
           (v1-9 (if (-> v1-7 manager)
                     (-> v1-7 manager manager)
                     (the-as handle #f)
                     )
                 )
           )
      (if v1-9
          (send-event (handle->process v1-9) 'fail)
          )
      )
    (sleep-code)
    )
  )

(defstate restart (scorpion-gun-manager)
  :virtual #t
  :event scorpion-gun-manager-handler
  :enter (behavior ()
    (send-event (handle->process (-> self scorp)) 'go-die)
    (send-event self 'use-camera #f)
    (send-event (handle->process (-> self gun)) 'die)
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 0.2))
      (let ((gp-0 (-> self path-info))
            (s5-0 -1)
            )
        (let ((f30-0 0.0))
          (dotimes (s4-0 (the-as int (-> gp-0 path node-count)))
            (let ((f0-0 (vector-vector-distance (target-pos 0) (the-as vector (-> gp-0 path node s4-0)))))
              (when (or (= s5-0 -1) (< f0-0 f30-0))
                (set! s5-0 s4-0)
                (set! f30-0 f0-0)
                )
              )
            )
          )
        (when (!= s5-0 -1)
          (set! (-> gp-0 curr-pos) (the float s5-0))
          (set! (-> gp-0 prev-pos) (the int (the float s5-0)))
          (set! (-> gp-0 next-pos) (the int (the float (+ s5-0 1))))
          )
        )
      (go-virtual idle)
      )
    )
  :code sleep-code
  )

(defstate die-fast (scorpion-gun-manager)
  :virtual #t
  :enter (behavior ()
    (process-entity-status! self (entity-perm-status dead) #t)
    )
  :code (behavior ()
    '()
    )
  )

(defmethod scorpion-gun-manager-method-21 ((this scorpion-gun-manager))
  (let ((v1-1 (handle->process (-> this scorp))))
    (when v1-1
      (set! (-> this trans quad) (-> (the-as process-drawable v1-1) root trans quad))
      (quaternion-copy! (-> this quat) (-> (the-as process-drawable v1-1) root quat))
      )
    )
  0
  (none)
  )

(defmethod scorpion-gun-manager-method-22 ((this scorpion-gun-manager))
  (when *display-path-marks*
    (dotimes (gp-0 (-> *desbeast-battle-path-table* length))
      (let ((s5-0 (-> *desbeast-battle-path-table* gp-0)))
        (let ((s4-0 (new 'stack-no-clear 'vector)))
          (set! (-> s4-0 quad) (-> s5-0 node 0 position quad))
          (+! (-> s4-0 y) 12288.0)
          (let ((s3-0 add-debug-text-3d)
                (s2-0 #t)
                (s1-0 577)
                )
            (format (clear *temp-string*) "path ~D" gp-0)
            (s3-0 s2-0 (the-as bucket-id s1-0) *temp-string* s4-0 (font-color white) (the-as vector2h #f))
            )
          )
        (dotimes (s4-1 (the-as int (+ (-> s5-0 node-count) -1)))
          (add-debug-line
            #t
            (bucket-id debug-no-zbuf1)
            (the-as vector (-> s5-0 node s4-1))
            (the-as vector (-> s5-0 node (+ s4-1 1)))
            *color-red*
            #f
            (the-as rgba -1)
            )
          (let ((s3-1 add-debug-text-3d)
                (s2-1 #t)
                (s1-1 577)
                )
            (format (clear *temp-string*) "~D" s4-1)
            (s3-1
              s2-1
              (the-as bucket-id s1-1)
              *temp-string*
              (the-as vector (-> s5-0 node s4-1))
              (font-color red)
              (the-as vector2h #f)
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defmethod deactivate ((this scorpion-gun-manager))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (send-event (handle->process (-> this hud-health)) 'hide-and-die)
  (send-event (handle->process (-> this hud-arrows)) 'hide-and-die)
  (call-parent-method this)
  (none)
  )

(defmethod init-from-entity! ((this scorpion-gun-manager) (arg0 entity-actor))
  ;; og:preserve-this added
  (stack-size-set! (-> this main-thread) 1024)
  (set! (-> this trans quad) (-> arg0 extra trans quad))
  (quaternion-copy! (-> this quat) (-> arg0 quat))
  (logclear! (-> this mask) (process-mask actor-pause))
  (let ((v1-3 (-> this path-info)))
    (set! (-> v1-3 path) (-> *desbeast-battle-path-table* 0))
    (set! (-> v1-3 next-pos) 1)
    (set! (-> v1-3 prev-pos) 0)
    )
  0
  (dotimes (v1-5 36)
    (set! (-> this enemy v1-5) (the-as handle #f))
    )
  (set! (-> this hud-health) (the-as handle #f))
  (set! (-> this hud-arrows) (the-as handle #f))
  (set! (-> this use-camera) #f)
  (set! (-> this last-beast) (the-as handle #f))
  (init!
    (-> this speecher-on-start)
    (new 'static 'boxed-array :type uint16 #x6 #x7 #x8 #x9 #x1 #x2 #x3 #x4 #x5)
    )
  (init!
    (-> this speecher-on-beast-death)
    (new 'static 'boxed-array :type uint16
      #xa
      #xb
      #xc
      #xd
      #xe
      #xf
      #x10
      #x11
      #x12
      #x13
      #x14
      #x15
      #x16
      #x17
      #x18
      #x19
      #x1a
      )
    )
  (init!
    (-> this speecher-on-damage)
    (new 'static 'boxed-array :type uint16
      #x29
      #x2a
      #x2b
      #x2c
      #x2d
      #x2e
      #x2f
      #x30
      #x31
      #x32
      #x33
      #x34
      #x35
      #x36
      #x37
      #x38
      #x39
      #x3a
      )
    )
  (init!
    (-> this speecher-on-beast-triggered)
    (new 'static 'boxed-array :type uint16 #x1b #x1c #x1d #x1e #x1f #x20 #x21 #x22 #x23 #x24 #x25 #x26)
    )
  (init! (-> this speecher-on-flyer-triggered) (new 'static 'boxed-array :type uint16 #x27 #x28))
  (if (task-node-closed? (game-task-node desert-beast-battle-kill-last-beast))
      (go (method-of-object this die-fast))
      (go (method-of-object this idle))
      )
  )

(defstate cam-scorpion-gun (camera-slave)
  :event cam-standard-event-handler
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self saved-pt quad) (-> self trans quad))
      (set! (-> self blend-from-type) (camera-blend-from-type unknown-1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
      0
      )
    )
  :trans (behavior ()
    (if (not (logtest? (-> *camera* master-options) (cam-master-options-u32 HAVE_TARGET)))
        (cam-slave-go cam-free-floating)
        )
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (let ((a0-1 (handle->process (-> *camera* focus handle))))
          (when a0-1
            (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-2 from) (process->ppointer self))
              (set! (-> a1-2 num-params) 0)
              (set! (-> a1-2 message) 'get-turret)
              (let ((v1-8 (the-as handle (send-event-function a0-1 a1-2))))
                (when v1-8
                  (let ((gp-0 (new 'stack-no-clear 'vector)))
                    (if (send-event (handle->process v1-8) 'get-cam-info (-> self trans) gp-0)
                        (forward-up->inv-matrix (the-as matrix (-> self tracking)) gp-0 *y-vector*)
                        )
                    )
                  )
                )
              )
            )
          )
        )
      (suspend)
      )
    #f
    )
  )
