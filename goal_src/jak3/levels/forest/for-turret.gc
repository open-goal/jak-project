;;-*-Lisp-*-
(in-package goal)

;; name: for-turret.gc
;; name in dgo: for-turret
;; dgos: LFORM

;; DECOMP BEGINS

(defpartgroup group-for-turret-scorched-earth
  :id 241
  :flags (sp0 sp1)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 1081 :flags (is-3d sp3 sp7)))
  )

(defpart 1081
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3) (meters 1))
    (:scale-y (meters 3) (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 0.0)
    (:fade-a 0.85333335 0.85333335)
    (:timer (seconds 6))
    (:flags (left-multiply-quat))
    (:next-time (seconds 0.25))
    (:next-launcher 1082)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 1082
  :init-specs ((:fade-a 0.0) (:next-time (seconds 3.335)) (:next-launcher 1083))
  )

(defpart 1083
  :init-specs ((:fade-a -0.14222223) (:flags (sp-cpuinfo-flag-2 left-multiply-quat)))
  )

(deftype hud-for-turret-health (hud)
  ((aim-vector-source  vector  :inline)
   (aim-vector         vector  :inline)
   (fade-interp        float)
   )
  )


;; ERROR: Stack slot load at 352 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 368 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 352 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 368 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 352 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 368 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 352 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 368 mismatch: defined as size 4, got size 16
(defmethod draw ((this hud-for-turret-health))
  (local-vars
    (sv-80 float)
    (sv-84 vector)
    (sv-88 vector)
    (sv-92 vector)
    (sv-96 vector)
    (sv-100 process-focusable)
    (sv-128 vector)
    (sv-132 vector)
    (sv-136 vector)
    (sv-140 vector)
    (sv-240 float)
    (sv-304 vector)
    (sv-308 vector)
    (sv-312 vector)
    (sv-320 vector)
    (sv-336 (function float float float float float float))
    (sv-352 float)
    (sv-368 float)
    (sv-384 int)
    )
  (with-pp
    (seek!
      (-> this fade-interp)
      (if (>= (-> *camera-combiner* interp-val) 1.0)
          80.0
          0.0
          )
      (-> pp clock time-adjust-ratio)
      )
    (dotimes (v1-3 30)
      (set! (-> this sprites v1-3 color w) (the int (* 0.5 (- 1.0 (-> this offset)) (-> this fade-interp))))
      )
    (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) 44 0)
    (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites)) 0 44)
    (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites)) 44 44)
    (set! sv-80 (* 0.5 (- 1.0 (-> this offset)) (-> this fade-interp)))
    (let ((v1-8 (new 'stack-no-clear 'vector)))
      (set! (-> v1-8 x) 255.0)
      (set! (-> v1-8 y) 32.0)
      (set! (-> v1-8 z) 0.0)
      (set! (-> v1-8 w) 0.0)
      (set! sv-84 v1-8)
      )
    (let ((v1-9 (new 'stack-no-clear 'vector)))
      (set! (-> v1-9 x) 32.0)
      (set! (-> v1-9 y) 230.0)
      (set! (-> v1-9 z) 32.0)
      (set! (-> v1-9 w) 0.0)
      (set! sv-88 v1-9)
      )
    (set! sv-92 (new 'stack-no-clear 'vector))
    (set! sv-96 (new 'stack-no-clear 'vector))
    (vector-lerp! sv-96 sv-84 sv-88 (lerp-scale 0.0 1.0 (the float (-> this values 0 current)) 2.0 12.0))
    (set! (-> sv-96 w) (lerp 96.0 sv-80 (lerp-scale 0.0 1.0 (the float (-> this values 0 current)) 4.0 8.0)))
    (vector-cvt.w.s! sv-92 sv-96)
    (dotimes (v1-15 16)
      (let ((a0-23 (-> this sprites (- 19 v1-15))))
        (set! (-> a0-23 scale-x) (if (< v1-15 (-> this values 0 current))
                                     0.7
                                     0.0
                                     )
              )
        (set! (-> a0-23 color quad) (-> sv-92 quad))
        )
      )
    (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites)) 13 6)
    (set-as-offset-from! (-> this sprites 5) (the-as vector4w (-> this sprites)) 25 10)
    (set-as-offset-from! (-> this sprites 6) (the-as vector4w (-> this sprites)) 34 19)
    (set-as-offset-from! (-> this sprites 7) (the-as vector4w (-> this sprites)) 39 32)
    (set-as-offset-from! (-> this sprites 8) (the-as vector4w (-> this sprites)) 39 47)
    (set-as-offset-from! (-> this sprites 9) (the-as vector4w (-> this sprites)) 34 59)
    (set-as-offset-from! (-> this sprites 10) (the-as vector4w (-> this sprites)) 25 67)
    (set-as-offset-from! (-> this sprites 11) (the-as vector4w (-> this sprites)) 13 71)
    (set-as-offset-from! (-> this sprites 12) (the-as vector4w (-> this sprites)) -1 71)
    (set-as-offset-from! (-> this sprites 13) (the-as vector4w (-> this sprites)) -14 67)
    (set-as-offset-from! (-> this sprites 14) (the-as vector4w (-> this sprites)) -22 59)
    (set-as-offset-from! (-> this sprites 15) (the-as vector4w (-> this sprites)) -27 47)
    (set-as-offset-from! (-> this sprites 16) (the-as vector4w (-> this sprites)) -27 32)
    (set-as-offset-from! (-> this sprites 17) (the-as vector4w (-> this sprites)) -22 19)
    (set-as-offset-from! (-> this sprites 18) (the-as vector4w (-> this sprites)) -14 10)
    (set-as-offset-from! (-> this sprites 19) (the-as vector4w (-> this sprites)) -1 6)
    (let ((f0-27 (the float (-> this values 1 current))))
      (cond
        ((>= f0-27 100.0)
         (let ((f0-28 (if (< 100 (mod (-> *display* game-clock frame-counter) 200))
                          0.0
                          90.0
                          )
                      )
               )
           (set! (-> this sprites 26 angle) (* 182.04445 (- 270.0 f0-28)))
           (set! (-> this sprites 24 angle) (* 182.04445 (- f0-28)))
           (set! (-> this sprites 22 angle) (* 182.04445 (- 90.0 f0-28)))
           (set! (-> this sprites 20 angle) (* 182.04445 (- 180.0 f0-28)))
           )
         )
        ((< 75.0 f0-27)
         (set! (-> this sprites 26 angle) (* 182.04445 (- 180.0 (* 3.6 (+ -75.0 f0-27)))))
         (set! (-> this sprites 24 angle) 32768.0)
         (set! (-> this sprites 22 angle) 49152.0)
         (set! (-> this sprites 20 angle) 0.0)
         )
        ((< 50.0 f0-27)
         (set! (-> this sprites 26 angle) 32768.0)
         (set! (-> this sprites 24 angle) (* 182.04445 (- 270.0 (* 3.6 (+ -50.0 f0-27)))))
         (set! (-> this sprites 22 angle) 49152.0)
         (set! (-> this sprites 20 angle) 0.0)
         )
        ((< 25.0 f0-27)
         (set! (-> this sprites 26 angle) 32768.0)
         (set! (-> this sprites 24 angle) 49152.0)
         (set! (-> this sprites 22 angle) (* 182.04445 (- (* 3.6 (+ -25.0 f0-27)))))
         (set! (-> this sprites 20 angle) 0.0)
         )
        (else
          (set! (-> this sprites 26 angle) 32768.0)
          (set! (-> this sprites 24 angle) 49152.0)
          (set! (-> this sprites 22 angle) 0.0)
          (set! (-> this sprites 20 angle) (* 182.04445 (- 90.0 (* 3.6 f0-27))))
          )
        )
      )
    (set-as-offset-from! (-> this sprites 20) (the-as vector4w (-> this sprites)) 0 45)
    (set-as-offset-from! (-> this sprites 22) (the-as vector4w (-> this sprites)) 0 44)
    (set-as-offset-from! (-> this sprites 24) (the-as vector4w (-> this sprites)) 2 44)
    (set-as-offset-from! (-> this sprites 26) (the-as vector4w (-> this sprites)) 2 45)
    (set-as-offset-from! (-> this sprites 21) (the-as vector4w (-> this sprites)) 0 14)
    (set-as-offset-from! (-> this sprites 23) (the-as vector4w (-> this sprites)) 0 44)
    (set-as-offset-from! (-> this sprites 25) (the-as vector4w (-> this sprites)) -30 44)
    (set-as-offset-from! (-> this sprites 27) (the-as vector4w (-> this sprites)) -30 14)
    (set-as-offset-from! (-> this sprites 29) (the-as vector4w (-> this sprites)) -26 18)
    (set! (-> this sprites 29 color x) 32)
    (set! (-> this sprites 29 color y) 230)
    (set! (-> this sprites 29 color z) 32)
    (when (= (-> this values 4 current) 1)
      (let ((f0-52 (if (< 25 (mod (-> *display* game-clock frame-counter) 50))
                       250.0
                       48.0
                       )
                   )
            )
        (set! (-> this sprites 29 color x) (the int f0-52))
        (set! (-> this sprites 29 color y) (the int (if (>= (-> this values 1 current) 100)
                                                        0.0
                                                        f0-52
                                                        )
                                                )
              )
        )
      (set! (-> this sprites 29 color z) (-> this sprites 29 color y))
      (set! (-> this sprites 29 color w) 128)
      )
    (set! (-> this sprites 28 scale-x) 0.7)
    (with-dma-buffer-add-bucket ((s4-2 (-> *display* frames (-> *display* on-screen) global-buf))
                                 (bucket-id hud-draw-hud-alpha)
                                 )
      (let ((s3-2 (-> *minimap* engine alive-list)))
        (while s3-2
          (let ((s2-1 (handle->process (-> s3-2 handle))))
            (set! sv-100 (if (type? s2-1 process-focusable)
                             (the-as process-focusable s2-1)
                             )
                  )
            )
          (when (and sv-100
                     (logtest? (process-mask enemy) (-> sv-100 mask))
                     (not (focus-test? sv-100 disable dead ignore inactive turret))
                     (!= sv-100 *target*)
                     )
            (set! sv-128 (get-trans sv-100 3))
            (set! sv-132 (new 'stack-no-clear 'vector))
            (set! sv-136 (-> this aim-vector-source))
            (set! sv-140 (-> this aim-vector))
            (vector-line-distance-point!
              sv-128
              sv-136
              (vector+float*! (new 'stack-no-clear 'vector) sv-136 sv-140 4096.0)
              sv-132
              )
            (let* ((s2-3 (vector-! (new 'stack-no-clear 'vector) sv-128 sv-132))
                   (a1-46
                     (vector-flatten!
                       (new 'stack-no-clear 'vector)
                       s2-3
                       (vector-normalize-copy! (new 'stack-no-clear 'vector) sv-140 1.0)
                       )
                     )
                   (s2-4 (vector-rotate*! (new 'stack-no-clear 'vector) a1-46 (-> *math-camera* camera-rot)))
                   (f30-0 (vector-vector-angle-safe sv-140 (vector-! (new 'stack-no-clear 'vector) sv-128 sv-136)))
                   )
              (set! sv-240 (atan (-> s2-4 x) (-> s2-4 y)))
              (if (logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                  (set! sv-240 (* -1.0 sv-240))
                  )
              (let ((v1-105 (new 'stack-no-clear 'vector)))
                (set! (-> v1-105 x) 128.0)
                (set! (-> v1-105 y) 128.0)
                (set! (-> v1-105 z) 128.0)
                (set! (-> v1-105 w) 0.0)
                (set! sv-304 v1-105)
                )
              (let ((v1-106 (new 'stack-no-clear 'vector)))
                (set! (-> v1-106 x) 255.0)
                (set! (-> v1-106 y) 24.0)
                (set! (-> v1-106 z) 32.0)
                (set! (-> v1-106 w) 0.0)
                (set! sv-308 v1-106)
                )
              (set! sv-312 (new 'stack-no-clear 'vector))
              (let ((s2-5 vector-lerp!)
                    (s1-1 sv-312)
                    (s0-1 sv-304)
                    )
                (set! sv-320 sv-308)
                (set! sv-336 lerp-scale)
                (set! sv-352 (the-as float 1.0))
                (set! sv-368 (the-as float 0.0))
                (let* ((a2-39 (vector-vector-distance sv-128 sv-136))
                       (a3-33 20480.0)
                       (t0-3 122880.0)
                       (a3-34 (sv-336 sv-352 sv-368 a2-39 a3-33 t0-3))
                       )
                  (s2-5 s1-1 s0-1 sv-320 a3-34)
                  )
                )
              (vector-cvt.w.s! (the-as vector (-> this sprites 28 color-ptr)) sv-312)
              (set! (-> this sprites 28 color w)
                    (the int (* 0.0078125 (-> this fade-interp) (lerp-scale 0.0 128.0 f30-0 1820.4445 3640.889)))
                    )
              )
            (let ((s2-6 set-as-offset-from!)
                  (s1-2 (-> this sprites 28))
                  (s0-2 (-> this sprites))
                  )
              (set! sv-384 (the int (* -70.0 (sin sv-240))))
              (let ((a3-36 (+ (the int (* -70.0 (cos sv-240))) 44)))
                (s2-6 s1-2 (the-as vector4w s0-2) sv-384 a3-36)
                )
              )
            (set! (-> this sprites 28 angle) (+ -8192.0 sv-240))
            (draw (-> this sprites 28) s4-2 (-> this level) #f)
            )
          (set! s3-2 (-> s3-2 next))
          )
        )
      )
    (set! (-> this sprites 28 scale-x) 0.0)
    ((method-of-type hud draw) this)
    0
    (none)
    )
  )

(defmethod update-values! ((this hud-for-turret-health))
  (set! (-> this values 0 target) (the int (-> *game-info* score)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

(defmethod event-callback ((this hud-for-turret-health) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('set-heat)
     (set! (-> this values 1 target) (the int (* 100.0 (the-as float (-> arg3 param 0)))))
     )
    (('set-aim-vector)
     (set! (-> this aim-vector-source quad) (-> (the-as vector (-> arg3 param 0)) quad))
     (set! (-> this aim-vector quad) (-> (the-as vector (-> arg3 param 1)) quad))
     )
    (('set-hud-pos)
     (set-hud-piece-position!
       (the-as hud-sprite (-> this sprites))
       (the-as int (-> arg3 param 0))
       (the-as int (+ (-> arg3 param 1) -4))
       )
     )
    )
  ((method-of-type hud event-callback) this arg0 arg1 arg2 arg3)
  )

(defmethod init-callback ((this hud-for-turret-health))
  (set! (-> this level) (level-get *level* 'lformach))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this fade-interp) 0.0)
  (dotimes (v1-6 30)
    (set! (-> this sprites v1-6 scale-x) 0.7)
    (set! (-> this sprites v1-6 scale-y) 0.7)
    (set! (-> this sprites v1-6 pos z) #xfffff0)
    (set! (-> this sprites v1-6 color w) 0)
    )
  (let ((s5-0 "lformach-minimap"))
    (set! (-> this sprites 0 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-ring-01" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
    (set! (-> this sprites 1 tid) (-> this sprites 0 tid))
    (set! (-> this sprites 1 flags) (hud-sprite-flags hsf0 hsf2))
    (set! (-> this sprites 2 tid) (-> this sprites 0 tid))
    (set! (-> this sprites 2 flags) (hud-sprite-flags hsf1 hsf2))
    (set! (-> this sprites 3 tid) (-> this sprites 0 tid))
    (set! (-> this sprites 3 flags) (hud-sprite-flags hsf0 hsf1 hsf2))
    (set! (-> this sprites 4 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-health-04" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 4 flags) (hud-sprite-flags hsf0 hsf2))
    (set! (-> this sprites 5 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-health-03" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 5 flags) (hud-sprite-flags hsf0 hsf2))
    (set! (-> this sprites 6 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-health-02" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 6 flags) (hud-sprite-flags hsf0 hsf2))
    (set! (-> this sprites 7 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-health-01" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 7 flags) (hud-sprite-flags hsf0 hsf2))
    (set! (-> this sprites 8 tid) (-> this sprites 7 tid))
    (set! (-> this sprites 8 flags) (hud-sprite-flags hsf0 hsf1 hsf2))
    (set! (-> this sprites 9 tid) (-> this sprites 6 tid))
    (set! (-> this sprites 9 flags) (hud-sprite-flags hsf0 hsf1 hsf2))
    (set! (-> this sprites 10 tid) (-> this sprites 5 tid))
    (set! (-> this sprites 10 flags) (hud-sprite-flags hsf0 hsf1 hsf2))
    (set! (-> this sprites 11 tid) (-> this sprites 4 tid))
    (set! (-> this sprites 11 flags) (hud-sprite-flags hsf0 hsf1 hsf2))
    (set! (-> this sprites 12 tid) (-> this sprites 4 tid))
    (set! (-> this sprites 12 flags) (hud-sprite-flags hsf1 hsf2))
    (set! (-> this sprites 13 tid) (-> this sprites 5 tid))
    (set! (-> this sprites 13 flags) (hud-sprite-flags hsf1 hsf2))
    (set! (-> this sprites 14 tid) (-> this sprites 6 tid))
    (set! (-> this sprites 14 flags) (hud-sprite-flags hsf1 hsf2))
    (set! (-> this sprites 15 tid) (-> this sprites 7 tid))
    (set! (-> this sprites 15 flags) (hud-sprite-flags hsf1 hsf2))
    (set! (-> this sprites 16 tid) (-> this sprites 7 tid))
    (set! (-> this sprites 16 flags) (hud-sprite-flags hsf2))
    (set! (-> this sprites 17 tid) (-> this sprites 6 tid))
    (set! (-> this sprites 17 flags) (hud-sprite-flags hsf2))
    (set! (-> this sprites 18 tid) (-> this sprites 5 tid))
    (set! (-> this sprites 18 flags) (hud-sprite-flags hsf2))
    (set! (-> this sprites 19 tid) (-> this sprites 4 tid))
    (set! (-> this sprites 19 flags) (hud-sprite-flags hsf2))
    (set! (-> this sprites 20 tid)
          (the-as
            texture-id
            (lookup-texture-by-name "hud-transparent-01" (the-as string #f) (the-as (pointer texture-page) #f))
            )
          )
    (set! (-> this sprites 20 pos z) #xfffff1)
    (set! (-> this sprites 21 tid)
          (the-as
            texture-id
            (lookup-texture-by-name "dm-turret-hud-heat-ring-02" s5-0 (the-as (pointer texture-page) #f))
            )
          )
    (set! (-> this sprites 21 pos z) #xfffff0)
    (set! (-> this sprites 22 tid) (-> this sprites 20 tid))
    (set! (-> this sprites 22 pos z) #xfffff3)
    (set! (-> this sprites 23 tid)
          (the-as
            texture-id
            (lookup-texture-by-name "dm-turret-hud-heat-ring-04" s5-0 (the-as (pointer texture-page) #f))
            )
          )
    (set! (-> this sprites 23 pos z) #xfffff2)
    (set! (-> this sprites 24 tid) (-> this sprites 20 tid))
    (set! (-> this sprites 24 pos z) #xfffff5)
    (set! (-> this sprites 25 tid)
          (the-as
            texture-id
            (lookup-texture-by-name "dm-turret-hud-heat-ring-03" s5-0 (the-as (pointer texture-page) #f))
            )
          )
    (set! (-> this sprites 25 pos z) #xfffff4)
    (set! (-> this sprites 26 tid) (-> this sprites 20 tid))
    (set! (-> this sprites 26 pos z) #xfffff7)
    (set! (-> this sprites 27 tid)
          (the-as
            texture-id
            (lookup-texture-by-name "dm-turret-hud-heat-ring-01" s5-0 (the-as (pointer texture-page) #f))
            )
          )
    (set! (-> this sprites 27 pos z) #xfffff6)
    (set! (-> this sprites 28 tid)
          (the-as texture-id (lookup-texture-by-name "dm-turret-hud-arrow-01" s5-0 (the-as (pointer texture-page) #f)))
          )
    (set! (-> this sprites 28 pos z) #xffffff)
    (set! (-> this sprites 29 tid)
          (the-as texture-id (lookup-texture-by-name "hud-target-reticle" s5-0 (the-as (pointer texture-page) #f)))
          )
    )
  (set! (-> this sprites 29 pos z) #xffffff)
  (set! (-> this sprites 29 scale-x) 0.82)
  (set! (-> this sprites 29 scale-y) 0.82)
  (set! (-> this sprites 20 scale-x) 8.0)
  (set! (-> this sprites 20 scale-y) 8.0)
  (set! (-> this sprites 22 scale-x) 8.0)
  (set! (-> this sprites 22 scale-y) 8.0)
  (set! (-> this sprites 24 scale-x) 8.0)
  (set! (-> this sprites 24 scale-y) 8.0)
  (set! (-> this sprites 26 scale-x) 8.0)
  (set! (-> this sprites 26 scale-y) 8.0)
  0
  (none)
  )

(deftype for-turret-blocker (process-drawable)
  ((root  collide-shape :override)
   )
  (:state-methods
    idle
    )
  )


(defstate idle (for-turret-blocker)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('on)
       (let ((v1-2 (-> self root root-prim)))
         (set! (-> v1-2 prim-core collide-as) (-> self root backup-collide-as))
         (let ((v0-0 (the-as object (-> self root backup-collide-with))))
           (set! (-> v1-2 prim-core collide-with) (the-as collide-spec v0-0))
           v0-0
           )
         )
       )
      (('off)
       (let ((v1-4 (-> self root root-prim)))
         (set! (-> v1-4 prim-core collide-as) (collide-spec))
         (set! (-> v1-4 prim-core collide-with) (collide-spec))
         )
       0
       )
      (('dir)
       (go empty-state)
       )
      )
    )
  :code sleep-code
  )

(defbehavior for-turret-blocker-init-by-other for-turret-blocker ((arg0 vector) (arg1 entity))
  (process-entity-set! self arg1)
  (let ((s5-0 (new 'process 'collide-shape self (collide-list-enum usually-hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec obstacle camera-blocker los-blocker))
      (set! (-> v1-2 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-2 local-sphere) 0.0 8192.0 0.0 9830.4)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-2)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (set! (-> self root trans quad) (-> arg0 quad))
  (ja-post)
  (update-transforms (-> self root))
  (go-virtual idle)
  )

(deftype for-turret (target-turret)
  ((aim-pos               vector  :inline)
   (muzzle-pos            vector  :inline)
   (battle-entity         entity)
   (focus-handle          handle)
   (task-node-id          int32)
   (fire-timer            time-frame)
   (nav-mesh              nav-mesh)
   (flash-palette-index   int32)
   (flash-palette-level   level)
   (blocker               handle)
   (actor-group           (pointer actor-group))
   (actor-group-count     int32)
   (last-speed0           float)
   (minimap               connection-minimap)
   (current-barrel        int32)
   (barrel-recoil-offset  float   2)
   )
  (:state-methods
    gunner-setup
    gunner-active
    )
  )


(define *for-turret-params* (new 'static 'target-turret-params
                              :fire-interval (seconds 0.15)
                              :max-health 16.0
                              :roty-accel -109226.664
                              :roty-friction 0.92
                              :rotyv-max 32768.0
                              :rotx-accel -58254.223
                              :rotx-friction 0.88
                              :rotxv-max 14563.556
                              :rotx-min -7281.778
                              :rotx-max 3640.889
                              )
        )

(defskelgroup skel-for-turret-explode for-turret for-turret-explode-lod0-jg -1
              ((for-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1.8 0.7 15)
              )

(define *for-turret-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 26 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 27 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 28 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 30 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 31 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 32 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 33 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 35 :parent-joint-index -1)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

(defmethod target-turret-method-36 ((this for-turret))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 7372.8 0.0 22528.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-11 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-11 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-11 transform-index) 4)
      (set-vector! (-> v1-11 local-sphere) 0.0 8192.0 0.0 9830.4)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-13 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-13 local-sphere) 0.0 -2048.0 0.0 13516.8)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec bot camera-blocker))
      (set! (-> v1-15 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-15 transform-index) 12)
      (set-vector! (-> v1-15 local-sphere) 0.0 1228.8 -819.2 4915.2)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec bot obstacle camera-blocker))
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-17 transform-index) 4)
      (set-vector! (-> v1-17 local-sphere) 0.0 8192.0 9011.2 5734.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 transform-index) 4)
      (set-vector! (-> v1-19 local-sphere) 0.0 6553.6 0.0 12288.0)
      )
    (set! (-> s5-0 nav-radius) 12288.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defstate idle (for-turret)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('grab)
       (when (not (-> self rider))
         (set! (-> self rider) (process->handle proc))
         (go-virtual gunner-setup)
         )
       )
      (else
        ((-> (method-of-type target-turret idle) event) proc argc message block)
        )
      )
    )
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret idle) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (if *display-nav-marks*
        (add-debug-sphere
          #t
          (bucket-id debug)
          (-> self root trans)
          (-> self root nav-radius)
          (new 'static 'rgba :r #x80 :g #x40 :a #x80)
          )
        )
    )
  )

(defstate setup (for-turret)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret setup) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (sound-play "cannon-activate")
    (set-time! (-> self state-time))
    (when (> (-> self actor-group-count) 0)
      (let ((gp-1 (-> self actor-group 0)))
        (dotimes (s5-1 (-> gp-1 length))
          (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
            (set! (-> a1-1 from) (process->ppointer self))
            (set! (-> a1-1 num-params) 0)
            (set! (-> a1-1 message) 'trigger)
            (let ((t9-3 send-event-function)
                  (v1-14 (-> gp-1 data s5-1 actor))
                  )
              (t9-3
                (if v1-14
                    (-> v1-14 extra process)
                    )
                a1-1
                )
              )
            )
          )
        )
      )
    (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-2 from) (process->ppointer self))
      (set! (-> a1-2 num-params) 0)
      (set! (-> a1-2 message) 'trigger)
      (let ((t9-4 send-event-function)
            (v1-22 (-> self battle-entity))
            )
        (t9-4
          (if v1-22
              (-> v1-22 extra process)
              )
          a1-2
          )
        )
      )
    (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-3 from) (process->ppointer self))
      (set! (-> a1-3 num-params) 0)
      (set! (-> a1-3 message) 'turret-activate)
      (let ((t9-5 send-event-function)
            (v1-29 (-> *game-info* sub-task-list (game-task-node forest-turn-on-machine-spawners)))
            )
        (t9-5
          (handle->process (if (-> v1-29 manager)
                               (-> v1-29 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-3
          )
        )
      )
    )
  :post (behavior ()
    (set-setting! 'matrix-blend-turret-rot 'abs 60.0 0)
    (let ((t9-1 (-> (method-of-type target-turret setup) post)))
      (if t9-1
          ((the-as (function none) t9-1))
          )
      )
    )
  )

(defstate gunner-setup (for-turret)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (go-virtual gunner-active)
       )
      (('abort)
       (when (= proc (handle->process (-> self rider)))
         (set! (-> self rider) (the-as handle #f))
         (go-virtual shutdown)
         )
       )
      (else
        (turret-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self enable-controls) #f)
    )
  :trans (behavior ()
    (when (not (handle->process (-> self rider)))
      (set! (-> self rider) (the-as handle #f))
      (go-virtual idle)
      )
    )
  :code sleep-code
  )

(defstate gunner-active (for-turret)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('exit-valid)
       (target-turret-method-48 self (the-as vector (-> block param 0)))
       )
      (('exit)
       (go-virtual shutdown)
       #f
       )
      (('abort)
       (when (= proc (handle->process (-> self rider)))
         (set! (-> self rider) (the-as handle #f))
         (go-virtual shutdown)
         )
       )
      (('set-focus)
       (when (= proc (handle->process (-> self rider)))
         (let ((v0-0 (the-as object (-> block param 0))))
           (set! (-> self focus-handle) (the-as handle v0-0))
           v0-0
           )
         )
       )
      (else
        (turret-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self fire-timer) 0)
    0
    )
  :exit (behavior ()
    (set-zero! (-> self smush-control))
    (dotimes (v1-2 2)
      (set! (-> self barrel-recoil-offset v1-2) 0.0)
      )
    )
  :trans (behavior ()
    (when (not (handle->process (-> self rider)))
      (format 0 "rider vanished!~%")
      (set! (-> self rider) (the-as handle #f))
      (go-virtual shutdown)
      )
    )
  :code sleep-code
  :post (behavior ()
    (vector<-cspace! (-> self muzzle-pos) (joint-node for-turret-lod0-jg rightbarrel))
    (let* ((s5-0 (handle->process (-> self focus-handle)))
           (gp-0 (if (type? s5-0 process-focusable)
                     s5-0
                     )
                 )
           )
      (when gp-0
        (let ((s5-1 (new 'stack-no-clear 'vector)))
          (set! (-> s5-1 quad) (-> (get-trans (the-as process-focusable gp-0) 0) quad))
          (+! (-> s5-1 y) 6144.0)
          (when (>= 327680.0 (vector-vector-xz-distance s5-1 (-> self root trans)))
            (let ((s4-0 (new 'stack-no-clear 'vector)))
              (set! (-> s4-0 quad) (-> (get-transv (the-as process-focusable gp-0)) quad))
              (vector+float*! (-> self aim-pos) s5-1 s4-0 -0.3)
              )
            (when (and (time-elapsed? (-> self fire-timer) (-> self params fire-interval))
                       gp-0
                       (not (logtest? (-> (the-as process-focusable gp-0) focus-status) (focus-status disable dead ignore grabbed)))
                       )
              (let* ((s5-3 (vector-! (new 'stack-no-clear 'vector) (-> self aim-pos) (-> self muzzle-pos)))
                     (f30-1 (vector-length s5-3))
                     (gp-1 (new 'stack-no-clear 'vector))
                     )
                (set! (-> gp-1 quad) (-> self node-list data 7 bone transform fvec quad))
                (vector-normalize! s5-3 1.0)
                (vector-normalize! gp-1 1.0)
                (if (and (< (acos (vector-dot s5-3 gp-1)) 1820.4445)
                         (>= (+ -819.2 (target-turret-method-49 self (-> self muzzle-pos) gp-1 327680.0)) f30-1)
                         )
                    (send-event self 'rider-fire)
                    )
                )
              )
            )
          )
        )
      )
    (let ((gp-3 (vector-! (new 'stack-no-clear 'vector) (-> self aim-pos) (-> self muzzle-pos))))
      (set! (-> gp-3 y) 0.0)
      (vector-xz-normalize! gp-3 1.0)
      (set! (-> self dest-roty) (vector-y-angle gp-3))
      )
    (cond
      ((< (fabs (deg-diff (-> self roty) (-> self dest-roty))) 8192.0)
       (let ((gp-5 (vector-! (new 'stack-no-clear 'vector) (-> self aim-pos) (-> self muzzle-pos))))
         (let ((s5-4 (joint-node for-turret-lod0-jg elevatebarrel)))
           (vector-normalize! gp-5 1.0)
           (vector-flatten! gp-5 gp-5 (the-as vector (-> s5-4 bone transform)))
           )
         (set! (-> self dest-rotx) (- (vector-x-angle gp-5)))
         )
       )
      (else
        (set! (-> self dest-rotx) 0.0)
        )
      )
    (target-turret-method-47 self)
    (seek!
      (-> self heat)
      (-> self heat-target)
      (* (fmin 0.5 (fabs (- (-> self heat) (-> self heat-target)))) (seconds-per-frame))
      )
    (seek! (-> self heat-target) 0.0 (* 0.4 (seconds-per-frame)))
    (target-turret-active-post)
    )
  )

(defstate active (for-turret)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (send-event (handle->process (-> self blocker)) 'off)
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret active) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (send-event (handle->process (-> self blocker)) 'on)
    (set-zero! (-> self smush-control))
    (dotimes (v1-12 2)
      (set! (-> self barrel-recoil-offset v1-12) 0.0)
      )
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret active) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (set-setting!
      'matrix-blend-turret-rot
      'abs
      (lerp-scale 0.0 15.0 (the float (- (current-time) (-> self state-time))) 0.0 600.0)
      0
      )
    )
  :code sleep-code
  :post (behavior ()
    (set! (-> *game-info* score) (-> self health))
    (send-event (handle->process (-> self hud)) 'set-heat (-> self heat))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (set! (-> s5-0 x) 0.0)
      (set! (-> s5-0 y) 20480.0)
      (set! (-> s5-0 z) 81920.0)
      (set! (-> s5-0 w) 1.0)
      (let ((gp-0 (new 'stack-no-clear 'vector4w)))
        (set! (-> gp-0 quad) (the-as uint128 0))
        (vector-matrix*! s5-0 s5-0 (-> self node-list data 6 bone transform))
        (if (transform-point-qword! gp-0 s5-0)
            (send-event
              (handle->process (-> self hud))
              'set-hud-pos
              (+ (/ (-> gp-0 x) 16) -1792)
              (+ (/ (-> gp-0 y) 16) -1840)
              )
            )
        )
      )
    (let ((t9-4 (-> (method-of-type target-turret active) post)))
      (if t9-4
          ((the-as (function none) t9-4))
          )
      )
    )
  )

(defstate shutdown (for-turret)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type target-turret shutdown) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self dest-roty) (-> self roty))
    (sound-play "cannon-deactive")
    )
  :post (behavior ()
    (set-setting!
      'matrix-blend-turret-rot
      'abs
      (lerp-scale 15.0 0.0 (the float (- (current-time) (-> self state-time))) 0.0 300.0)
      0
      )
    (let ((t9-2 (-> (method-of-type target-turret shutdown) post)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(defstate die (for-turret)
  :virtual #t
  :enter (behavior ()
    (send-event (handle->process (-> self blocker)) 'die)
    (when (-> self minimap)
      (kill-callback (-> *minimap* engine) (-> self minimap))
      (set! (-> self minimap) #f)
      )
    )
  :post (behavior ()
    (target-turret-method-58 self)
    )
  )

(defmethod explode-turret ((this for-turret))
  (local-vars (sv-112 matrix) (sv-116 vector) (sv-120 vector))
  (sound-play "cannon-explode")
  (set! sv-112 (new 'stack-no-clear 'matrix))
  (set! sv-116 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
  (set! sv-120 (new 'stack-no-clear 'vector))
  (set! (-> sv-116 y) 0.0)
  (vector-normalize! sv-116 1.0)
  (let ((f30-0 0.0))
    (dotimes (s5-1 8)
      (let ((s4-1 (vector-rotate-y! (new 'stack-no-clear 'vector) sv-116 f30-0)))
        (+! f30-0 (* 182.04445 (rand-vu-float-range 40.0 50.0)))
        (vector-normalize! s4-1 1.0)
        (vector+float*! sv-120 (-> this root trans) s4-1 (* 4096.0 (rand-vu-float-range 1.5 2.5)))
        )
      (let ((s4-2 (new 'stack-no-clear 'vector)))
        (set! (-> s4-2 quad) (-> *y-vector* quad))
        (let ((s3-2 (new 'stack-no-clear 'collide-query)))
          (set! (-> s3-2 start-pos quad) (-> sv-120 quad))
          (+! (-> s3-2 start-pos y) 12288.0)
          (set-vector! (-> s3-2 move-dist) 0.0 -12288.0 0.0 0.0)
          (let ((v1-13 s3-2))
            (set! (-> v1-13 radius) 819.2)
            (set! (-> v1-13 collide-with) (collide-spec backgnd))
            (set! (-> v1-13 ignore-process0) #f)
            (set! (-> v1-13 ignore-process1) #f)
            (set! (-> v1-13 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-13 action-mask) (collide-action solid))
            )
          (let ((f0-12 (fill-and-probe-using-line-sphere *collide-cache* s3-2)))
            (when (>= f0-12 0.0)
              (vector+float*! sv-120 (-> s3-2 start-pos) (-> s3-2 move-dist) f0-12)
              (vector-! s4-2 sv-120 (-> s3-2 best-other-tri intersect))
              (vector-normalize! s4-2 1.0)
              )
            )
          )
        (matrix-u-f-compose sv-112 s4-2 sv-116)
        )
      (+! (-> sv-120 y) 819.2)
      (set! (-> sv-112 trans quad) (-> sv-120 quad))
      (let ((v1-32
              (if (logtest? (-> *part-group-id-table* 241 flags) (sp-group-flag sp13))
                  (part-tracker-spawn
                    part-tracker-subsampler
                    :to *entity-pool*
                    :group (-> *part-group-id-table* 241)
                    :mat-joint sv-112
                    )
                  (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 241) :mat-joint sv-112)
                  )
              )
            )
        (send-event (ppointer->process v1-32) 'clock this)
        )
      )
    )
  ((method-of-type target-turret explode-turret) this)
  (none)
  )

(defmethod target-turret-method-40 ((this for-turret))
  (set! (-> this hud)
        (ppointer->handle
          (process-spawn hud-for-turret-health :init hud-init-by-other :name "hud-for-turret-health" :to this)
          )
        )
  0
  (none)
  )

(defmethod target-turret-method-43 ((this for-turret))
  ((method-of-type target-turret target-turret-method-43) this)
  (none)
  )

(defmethod target-turret-method-54 ((this for-turret))
  (send-event (handle->process (-> this hud)) 'force-show)
  (let* ((s5-0 (-> this node-list data 7))
         (v1-7 (vector<-cspace! (new 'stack-no-clear 'vector) s5-0))
         (a0-8 (-> s5-0 bone transform fvec))
         )
    (send-event (handle->process (-> this hud)) 'set-aim-vector v1-7 a0-8)
    )
  0
  (none)
  )

(defmethod target-turret-method-41 ((this for-turret))
  (and (-> *setting-control* user-current pilot)
       *target*
       (not (focus-test? *target* in-head light board mech dark))
       (and *target* (and (>= 36864.0 (vector-vector-distance (-> this root trans) (-> *target* control trans)))
                          (not (logtest? (focus-status teleporting) (-> *target* focus-status)))
                          )
            )
       (and (< 21845.334
               (fabs (deg-diff
                       (-> this roty)
                       (vector-y-angle (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> this root trans)))
                       )
                     )
               )
            (logtest? (-> *target* control status) (collide-status on-surface))
            )
       )
  )

(defmethod target-turret-method-45 ((this for-turret))
  (let ((f30-0 (/ (-> this rotyv) (-> this params rotyv-max))))
    (let ((f28-0 (- 1.0 (-> this params roty-friction))))
      (cond
        ((and (-> this sound-playing 0) (< (fabs f30-0) f28-0))
         (sound-stop (-> this sound-id 0))
         (set! (-> this sound-playing 0) #f)
         )
        ((and (not (-> this sound-playing 0)) (or (< f28-0 (fabs f30-0)) (< (* f30-0 (-> this last-speed0)) 0.0)))
         (set! (-> this sound-playing 0) #t)
         )
        )
      (if (-> this sound-playing 0)
          (sound-play-by-name
            (static-sound-name "cannon-rotate")
            (-> this sound-id 0)
            (the int (* 1024.0 (lerp-scale 0.0 1.0 (fabs f30-0) f28-0 0.5)))
            0
            0
            (sound-group)
            (-> this root trans)
            )
          )
      )
    (set! (-> this last-speed0) f30-0)
    )
  0
  (none)
  )

(define *for-turret-offset-table* (new 'static 'boxed-array :type vector
                                    (new 'static 'vector :x 16384.0 :w 1.0)
                                    (new 'static 'vector :x -16384.0 :w 1.0)
                                    (new 'static 'vector :z 32768.0 :w 1.0)
                                    (new 'static 'vector :z -12288.0 :w 1.0)
                                    )
        )

(defmethod target-turret-method-48 ((this for-turret) (arg0 vector))
  (let ((s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 12))))
    (set! (-> s4-0 y) (+ 409.6 (-> this root trans y)))
    (dotimes (s2-0 (-> *for-turret-offset-table* length))
      (let* ((a0-3
               (vector-rotate-around-y! (new 'stack-no-clear 'vector) (-> *for-turret-offset-table* s2-0) (-> this roty))
               )
             (s1-1 (vector+! (new 'stack-no-clear 'vector) s4-0 a0-3))
             (f0-3 6144.0)
             (s3-0 (new 'stack-no-clear 'collide-query))
             )
        (set! (-> s3-0 start-pos quad) (-> s1-1 quad))
        (+! (-> s3-0 start-pos y) 12288.0)
        (set-vector! (-> s3-0 move-dist) 0.0 -12288.0 0.0 0.0)
        (let ((v1-10 s3-0))
          (set! (-> v1-10 radius) f0-3)
          (set! (-> v1-10 collide-with)
                (collide-spec
                  crate
                  enemy
                  obstacle
                  vehicle-sphere
                  hit-by-player-list
                  hit-by-others-list
                  pusher
                  obstacle-for-jak
                  )
                )
          (set! (-> v1-10 ignore-process0) #f)
          (set! (-> v1-10 ignore-process1) #f)
          (set! (-> v1-10 ignore-pat)
                (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                )
          (set! (-> v1-10 action-mask) (collide-action solid))
          )
        (when (< (fill-and-probe-using-line-sphere *collide-cache* s3-0) 0.0)
          (set! (-> arg0 quad) (-> s1-1 quad))
          (let ((v1-15 s3-0))
            (set! (-> v1-15 radius) 819.2)
            (set! (-> v1-15 collide-with) (collide-spec backgnd))
            (set! (-> v1-15 ignore-process0) #f)
            (set! (-> v1-15 ignore-process1) #f)
            (set! (-> v1-15 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-15 action-mask) (collide-action solid))
            )
          (let ((f0-6 (fill-and-probe-using-line-sphere *collide-cache* s3-0)))
            (if (>= f0-6 0.0)
                (vector+float*! arg0 (-> s3-0 start-pos) (-> s3-0 move-dist) f0-6)
                )
            )
          (return #t)
          )
        )
      )
    )
  #f
  )

(defmethod target-turret-method-46 ((this for-turret) (arg0 quaternion))
  0
  (none)
  )

(defmethod target-turret-method-52 ((this for-turret))
  (with-pp
    (when (< (-> this heat) 1.0)
      (let ((t9-0 (method-of-type target-turret target-turret-method-52)))
        (t9-0 this)
        )
      (let* ((v1-3 (new 'static 'boxed-array :type int32 7 9))
             (s3-0 (-> this node-list data (-> v1-3 (-> this current-barrel))))
             (s5-0 (vector<-cspace! (new 'stack-no-clear 'vector) s3-0))
             )
        (set! (-> (new 'stack-no-clear 'vector) quad) (-> s5-0 quad))
        (let ((s4-0 (new 'stack-no-clear 'vector)))
          (set! (-> s4-0 quad) (-> s3-0 bone transform fvec quad))
          (new 'stack-no-clear 'vector)
          (vector-normalize! s4-0 1.0)
          (vector+float*! s5-0 s5-0 s4-0 10240.0)
          (spawn-for-turret-projectile this s5-0 s4-0 737280.0)
          )
        )
      (sound-play "cannon-fire")
      (when (!= (-> this flash-palette-index) -1)
        (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-5 from) (process->ppointer pp))
          (set! (-> a1-5 num-params) 2)
          (set! (-> a1-5 message) 'gun-flash)
          (set! (-> a1-5 param 0) (the-as uint (-> this flash-palette-level)))
          (set! (-> a1-5 param 1) (the-as uint (-> this flash-palette-index)))
          (let ((t9-6 send-event-function)
                (v1-25 (-> *game-info* sub-task-list (game-task-node forest-turn-on-machine-spawners)))
                )
            (t9-6
              (handle->process (if (-> v1-25 manager)
                                   (-> v1-25 manager manager)
                                   (the-as handle #f)
                                   )
                               )
              a1-5
              )
            )
          )
        )
      (activate! (-> this smush-control) 0.1 30 120 0.8 0.9 (-> *display* entity-clock))
      (+! (-> this barrel-recoil-offset (-> this current-barrel)) 8192.0)
      (set! (-> this current-barrel) (- 1 (-> this current-barrel)))
      )
    0
    (none)
    )
  )

;; WARN: Return type mismatch time-frame vs none.
(defmethod attack-handler ((this for-turret) (arg0 attack-info) (arg1 symbol))
  (when arg1
    (case (-> arg0 mode)
      (('wasp-shot 'neo-wasp-shot 'guard-shot 'explode 'neo-grenadier-shot)
       (case (-> arg0 mode)
         (('neo-grenadier-shot)
          (seek! (-> this health) 0.0 1.0)
          )
         (('explode)
          (seek! (-> this health) 0.0 1.75)
          )
         (('neo-wasp-shot)
          (seek! (-> this health) 0.0 0.75)
          )
         (else
           (seek! (-> this health) 0.0 0.5)
           )
         )
       (activate! (-> this smush-control) 0.2 15 75 1.0 0.9 (-> *display* entity-clock))
       (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
       (sound-play "turret-take-hit")
       (set! (-> this red-filter-timer) (+ (current-time) (seconds 0.08)))
       (set-time! (-> this focus-ignore-timer))
       )
      (('neo-juicer-shot)
       (seek! (-> this health) 0.0 (seconds-per-frame))
       (set-time! (-> this focus-ignore-timer))
       )
      )
    )
  (none)
  )

;; WARN: disable def twice: 44. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod target-turret-method-56 ((this for-turret) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (s4-0 object))
  (let ((v1-0 arg2))
    (set! s4-0 (cond
                 ((= v1-0 'die)
                  (go (method-of-object this die))
                  )
                 ((= v1-0 'turret-type)
                  'for-turret
                  )
                 ((= v1-0 'camera-offset)
                  (set! s4-0 (-> arg3 param 0))
                  (set! (-> (the-as vector s4-0) x) 0.0)
                  (set! (-> (the-as vector s4-0) y) -2048.0)
                  (set! (-> (the-as vector s4-0) z) (lerp-scale -2867.2 6963.2 (-> this rotx) 0.0 -6371.5557))
                  (set! (-> (the-as vector s4-0) w) 0.0)
                  s4-0
                  )
                 ((= v1-0 'notify)
                  (case (-> arg3 param 0)
                    (('attack)
                     (when (= (-> arg3 param 1) *target*)
                       (set! s4-0 (+ (-> this fire-timer) (seconds 3)))
                       (set! (-> this fire-timer) (the-as time-frame s4-0))
                       s4-0
                       )
                     )
                    )
                  )
                 ((= v1-0 'shot-pos)
                  (let* ((s3-0 (-> this node-list data 7))
                         (gp-1 (vector<-cspace! (new 'stack-no-clear 'vector) s3-0))
                         )
                    (let ((s4-1 (new 'stack-no-clear 'vector)))
                      (set! (-> s4-1 quad) (-> s3-0 bone transform fvec quad))
                      (vector-normalize! s4-1 1.0)
                      (vector+float*! gp-1 gp-1 s4-1 10240.0)
                      )
                    (set! s4-0 (-> arg3 param 0))
                    (set! (-> (the-as vector s4-0) quad) (-> gp-1 quad))
                    )
                  s4-0
                  )
                 ((= v1-0 'valid-neo-spawner)
                  (let ((v1-14 (command-get-entity arg0 (the-as entity #f))))
                    (dotimes (a0-14 (-> this actor-group 0 length))
                      (when (= v1-14 (-> this actor-group 0 data a0-14 actor))
                        (set! s4-0 #t)
                        (goto cfg-44)
                        )
                      )
                    )
                  #f
                  )
                 ((= v1-0 'player-pos)
                  (vector<-cspace! (the-as vector (-> arg3 param 0)) (-> this node-list data 12))
                  )
                 ((= v1-0 'player-quat)
                  (matrix->quat (-> this node-list data 12 bone transform) (the-as quaternion (-> arg3 param 0)))
                  )
                 ((= v1-0 'gunner-pos)
                  (vector<-cspace! (the-as vector (-> arg3 param 0)) (-> this node-list data 13))
                  )
                 ((= v1-0 'gunner-quat)
                  (matrix->quat (-> this node-list data 13 bone transform) (the-as quaternion (-> arg3 param 0)))
                  )
                 ((= v1-0 'sideways)
                  (lerp-scale -1.0 1.0 (-> this rotyv) (- (-> this params rotyv-max)) (-> this params rotyv-max))
                  )
                 ((or (= v1-0 'fire-up) (= v1-0 'fire-pressed))
                  #f
                  )
                 ((or (= v1-0 'rider-fire) (= v1-0 'fire-down))
                  (if (time-elapsed? (-> this fire-time) (-> this fire-time-interval))
                      (target-turret-method-52 this)
                      )
                  )
                 (else
                   ((method-of-type target-turret target-turret-method-56) this arg0 arg1 arg2 arg3)
                   )
                 )
          )
    )
  (label cfg-44)
  s4-0
  )

(defmethod target-turret-method-58 ((this for-turret))
  (local-vars (v1-18 symbol))
  (seek! (-> this health) (-> this params max-health) (* 0.1 (seconds-per-frame)))
  (dotimes (s5-0 2)
    (seek! (-> this barrel-recoil-offset s5-0) 0.0 (* 32768.0 (seconds-per-frame)))
    )
  (update! (-> this smush-control))
  (when (not (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status subtask-complete)))
             )
    (dotimes (v1-17 (-> this actor-group 0 length))
      (when (not (logtest? (-> this actor-group 0 data v1-17 actor extra perm status) (entity-perm-status subtask-complete))
                 )
        (set! v1-18 #f)
        (goto cfg-14)
        )
      )
    (set! v1-18 #t)
    (label cfg-14)
    (if v1-18
        (process-entity-status! this (entity-perm-status subtask-complete) #t)
        )
    )
  ((method-of-type target-turret target-turret-method-58) this)
  (none)
  )

(defmethod init! ((this for-turret))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-for-turret" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> this info) (new 'static 'target-turret-info :idle-anim 4 :camera-joint 16))
  (set! (-> this info explode-sg)
        (the-as skeleton-group (art-group-get-by-name *level* "skel-for-turret-explode" (the-as (pointer level) #f)))
        )
  (set! (-> this info explode-params) (the-as explosion-init-params *for-turret-exploder-params*))
  0
  (none)
  )

(defmethod get-params ((this for-turret))
  *for-turret-params*
  )

(defmethod init-fields! ((this for-turret))
  (local-vars (sv-16 res-tag))
  (set! (-> this focus-handle) (the-as handle #f))
  (set! (-> this current-barrel) 0)
  (set! (-> this barrel-recoil-offset 0) 0.0)
  (set! (-> this barrel-recoil-offset 1) 0.0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-1 (res-lump-data (-> this entity) 'actor-groups pointer :tag-ptr (& sv-16))))
    (cond
      ((and v1-1 (nonzero? (-> sv-16 elt-count)))
       (set! (-> this actor-group) (the-as (pointer actor-group) v1-1))
       (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
       )
      (else
        (set! (-> this actor-group) (the-as (pointer actor-group) #f))
        (set! (-> this actor-group-count) 0)
        0
        )
      )
    )
  (let ((a0-4 (-> this node-list data 4)))
    (set! (-> a0-4 param0)
          (lambda ((arg0 cspace) (arg1 transformq))
            (let ((v1-0 (-> arg0 param1)))
              (quaternion-vector-angle! (-> arg1 quat) *y-vector* (-> (the-as for-turret v1-0) roty))
              )
            (cspace<-parented-transformq-joint! arg0 arg1)
            (none)
            )
          )
    (set! (-> a0-4 param1) this)
    )
  (let ((a0-5 (-> this node-list data 5)))
    (set! (-> a0-5 param0)
          (lambda ((arg0 cspace) (arg1 transformq))
            (let* ((s4-0 (the-as for-turret (-> arg0 param1)))
                   (f0-0 (get-no-update (-> s4-0 smush-control)))
                   )
              (quaternion-vector-angle! (-> arg1 quat) *x-vector* (+ (-> s4-0 rotx) (* -910.2222 f0-0)))
              )
            (cspace<-parented-transformq-joint! arg0 arg1)
            (none)
            )
          )
    (set! (-> a0-5 param1) this)
    )
  (let ((a0-6 (-> this node-list data 11)))
    (set! (-> a0-6 param0) (lambda ((arg0 cspace) (arg1 transformq))
                             (let* ((v1-0 (-> arg0 param1))
                                    (f0-4 (lerp-scale
                                            5461.3335
                                            -5461.3335
                                            (-> (the-as for-turret v1-0) rotyv)
                                            (- (-> (the-as for-turret v1-0) params rotyv-max))
                                            (-> (the-as for-turret v1-0) params rotyv-max)
                                            )
                                          )
                                    )
                               (quaternion-rotate-z! (-> arg1 quat) (-> arg1 quat) f0-4)
                               )
                             (cspace<-parented-transformq-joint! arg0 arg1)
                             (none)
                             )
          )
    (set! (-> a0-6 param1) this)
    )
  (let ((v1-13 (lambda ((arg0 cspace) (arg1 transformq))
                 (let ((a2-0 (-> arg0 param1))
                       (a3-0 (the-as object (-> arg0 param2)))
                       (v1-0 (new 'stack-no-clear 'transformq))
                       )
                   (let* ((t0-0 v1-0)
                          (t2-0 arg1)
                          (a1-1 (-> t2-0 trans quad))
                          (t1-0 (-> t2-0 quat quad))
                          (t2-1 (-> t2-0 scale quad))
                          )
                     (set! (-> t0-0 trans quad) a1-1)
                     (set! (-> t0-0 quat quad) t1-0)
                     (set! (-> t0-0 scale quad) t2-1)
                     )
                   (set! (-> v1-0 trans z)
                         (- (-> v1-0 trans z) (-> (the-as for-turret a2-0) barrel-recoil-offset (the-as int a3-0)))
                         )
                   (cspace<-parented-transformq-joint! arg0 v1-0)
                   )
                 (none)
                 )
               )
        )
    (let ((a0-8 (-> this node-list data 9)))
      (set! (-> a0-8 param0) v1-13)
      (set! (-> a0-8 param1) this)
      (set! (-> a0-8 param2) (the-as basic 0))
      )
    (let ((a0-10 (-> this node-list data 7)))
      (set! (-> a0-10 param0) v1-13)
      (set! (-> a0-10 param1) this)
      (set! (-> a0-10 param2) (the-as basic 1))
      )
    )
  (let ((s5-0 (get-process *default-dead-pool* for-turret-blocker #x4000 1)))
    (set! (-> this blocker)
          (process->handle
            (ppointer->process
              (when s5-0
                (let ((t9-2 (method-of-type for-turret-blocker activate))
                      (a0-12 s5-0)
                      (a1-6 this)
                      (a2-2 "for-turret-blocker")
                      (a3-2 #x70004000)
                      )
                  (t9-2 (the-as for-turret-blocker a0-12) a1-6 a2-2 (the-as pointer a3-2))
                  ;; og:preserve-this passing entity arg here instead of garbage
                  (run-now-in-process s5-0 for-turret-blocker-init-by-other (-> this root trans) (-> this entity))
                  )
                (-> s5-0 ppointer)
                )
              )
            )
          )
    )
  (set! (-> this nav-mesh) (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 0))
  (if (not (-> this nav-mesh))
      (go process-drawable-art-error "no nav-mesh")
      )
  (add-process-drawable-to-nav-mesh (-> this nav-mesh) this #f)
  (let ((s5-1 (-> this entity)))
    (case (-> s5-1 task)
      (((game-task forest-turn-on-machine))
       (set! (-> this task-node-id) 245)
       )
      (else
        (set! (-> this task-node-id) 0)
        0
        )
      )
    (set! (-> this battle-entity) (entity-actor-lookup s5-1 'alt-actor 0))
    (set! (-> this flash-palette-index)
          (res-lump-value s5-1 'extra-id int :default (the-as uint128 -1) :time -1000000000.0)
          )
    (set! (-> this flash-palette-level) (the-as level ((method-of-type res-lump get-property-struct)
                                                       s5-1
                                                       'level
                                                       'interp
                                                       -1000000000.0
                                                       (the-as structure 'none)
                                                       (the-as (pointer res-tag) #f)
                                                       *res-static-buf*
                                                       )
                                                )
          )
    )
  (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 146) (the-as int #f) (the-as vector #t) 0))
  0
  (none)
  )
