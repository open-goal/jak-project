;;-*-Lisp-*-
(in-package goal)

;; name: sig-plasma.gc
;; name in dgo: sig-plasma
;; dgos: ATE, UNB

(declare-type sig-atoll sig)

;; DECOMP BEGINS

(defun sparticle-sig-plasma-lightning ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let* ((v1-1 (-> arg1 key proc))
         (a1-2 (cond
                 ((= (-> v1-1 type) sig-atoll)
                  (-> v1-1 node-list data 24)
                  )
                 (else
                   (let ((v1-3 (-> v1-1 parent)))
                     (-> (the-as sig-atoll (if v1-3
                                               (the-as sig-atoll (-> v1-3 0 self))
                                               )
                                 )
                         node-list
                         data
                         52
                         )
                     )
                   )
                 )
               )
         (v1-6 (vector<-cspace! (new 'stack-no-clear 'vector) a1-2))
         )
    (set! (-> arg2 x) (-> v1-6 x))
    (set! (-> arg2 y) (-> v1-6 y))
    (set! (-> arg2 z) (-> v1-6 z))
    )
  (sparticle-texture-animate arg0 arg1 arg2)
  (none)
  )

(defpartgroup group-sig-plasma
  :id 147
  :bounds (static-bspherem 0 0 0 1)
  :parts ((sp-item 665) (sp-item 666 :flags (bit6)) (sp-item 667 :flags (bit6)) (sp-item 668 :flags (bit6)))
  )

(defpart 667
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 2.25) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    )
  )

(defpart 668
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 8) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0)
    (:b 255.0)
    (:a 16.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 2048.0)
    )
  )

(defpart 666
  :init-specs ((:texture (new 'static 'texture-id :index #x1 :page #x43b))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 0.0 32.0)
    (:g :copy r)
    (:b 128.0 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

(defpart 665
  :init-specs ((:texture (new 'static 'texture-id :index #xcc :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.9))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0))
    (:r 0.0)
    (:g 0.0)
    (:b 255.0)
    (:a 0.0)
    (:scalevel-y (meters 0.0125))
    (:fade-r 6.4)
    (:fade-g 6.4)
    (:fade-a 6.4)
    (:timer (seconds 0.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:userdata
      :data (new 'static 'boxed-array :type int32 15 1 0 #xc0cc00 #xc0cd00 #xc0ce00 #xc0cf00 #xc0d000 #xc0d100 #xc0d200)
      )
    (:func 'sparticle-sig-plasma-lightning)
    (:next-time (seconds 0.05) (seconds 0.015))
    (:next-launcher 669)
    )
  )

(defpart 669
  :init-specs ((:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-x (meters 0))
    (:scalevel-y (meters 0))
    (:fade-r -8.533334)
    (:fade-g -8.533334)
    (:fade-a -8.533334)
    (:next-time (seconds 0.05) (seconds 0.015))
    (:next-launcher 670)
    )
  )

(defpart 670
  :init-specs ((:scalevel-x (meters -0.00093750004) (meters -0.00093750004))
    (:scalevel-y (meters -0.00078125) (meters -0.00078125))
    (:fade-r -0.8)
    (:fade-g -0.8)
    (:fade-a -0.8)
    )
  )

(defmethod sig-plasma-method-14 sig-plasma ((obj sig-plasma) (arg0 process-focusable))
  (with-pp
    (let* ((f0-0 (-> obj level))
           (f30-0 (cond
                    ((logtest? (-> obj flags) (plasma-flags pf01))
                     (seek f0-0 1.0 (* (-> obj charge-speed) (-> pp clock seconds-per-frame)))
                     )
                    (else
                      (let ((f1-1 (-> obj min-level)))
                        (when (< f0-0 f1-1)
                          (set! f1-1 f0-0)
                          (set! (-> obj min-level) f1-1)
                          )
                        (seek f0-0 f1-1 (* 0.25 (-> pp clock seconds-per-frame)))
                        )
                      )
                    )
                  )
           )
      (set! (-> obj level) f30-0)
      (cond
        ((= f30-0 0.0)
         (let ((v1-9 (the-as sound-rpc-set-param (get-sound-buffer-entry))))
           (set! (-> v1-9 command) (sound-command set-param))
           (set! (-> v1-9 id) (-> obj powerup-sound-id))
           (set! (-> v1-9 params volume) -4)
           (set! (-> v1-9 auto-time) 24)
           (set! (-> v1-9 auto-from) 2)
           (set! (-> v1-9 params mask) (the-as uint 17))
           (-> v1-9 id)
           )
         (let ((v1-11 (the-as sound-rpc-set-param (get-sound-buffer-entry))))
           (set! (-> v1-11 command) (sound-command set-param))
           (set! (-> v1-11 id) (-> obj plasma-sound-id))
           (set! (-> v1-11 params volume) -4)
           (set! (-> v1-11 auto-time) 24)
           (set! (-> v1-11 auto-from) 2)
           (set! (-> v1-11 params mask) (the-as uint 17))
           (-> v1-11 id)
           )
         )
        (else
          (let ((s4-0 (-> arg0 root-override trans)))
            (if (movie?)
                (set! s4-0 (camera-pos))
                )
            (let ((f28-0 (+ 0.25 (* 0.75 f30-0))))
              (sound-play-by-name
                (static-sound-name "sig-gun-powerup")
                (-> obj powerup-sound-id)
                (the int (* 1024.0 f28-0))
                (the int (* 1524.0 (+ 0.5 (* 0.5 f30-0))))
                0
                (sound-group sfx)
                s4-0
                )
              (sound-play-by-name
                (static-sound-name "sig-gun-plasma")
                (-> obj plasma-sound-id)
                (the int (* 1024.0 f28-0))
                (the int (* 1524.0 (rand-vu-float-range -1.0 1.0)))
                0
                (sound-group sfx)
                s4-0
                )
              )
            )
          (when (not (logtest? (-> arg0 draw status) (draw-control-status no-draw)))
            (let ((s5-2 (vector<-cspace! (new 'stack-no-clear 'vector) (-> arg0 node-list data 24))))
              (set! (-> *part-id-table* 667 init-specs 2 initial-valuef) (lerp 409.6 9216.0 f30-0))
              (set! (-> *part-id-table* 667 init-specs 8 initial-valuef) (lerp 0.0 32.0 f30-0))
              (set! (-> *part-id-table* 668 init-specs 2 initial-valuef) (lerp 409.6 32768.0 f30-0))
              (set! (-> *part-id-table* 668 init-specs 8 initial-valuef) (lerp 0.0 16.0 f30-0))
              (set! (-> *part-id-table* 666 init-specs 2 initial-valuef) (lerp 409.6 8192.0 f30-0))
              (set! (-> *part-id-table* 665 init-specs 1 initial-valuef) (lerp 0.1 1.0 f30-0))
              (set! (-> *part-id-table* 665 init-specs 2 initial-valuef) (lerp 409.6 3686.4 f30-0))
              (spawn (-> arg0 part) s5-2)
              )
            )
          )
        )
      )
    (none)
    )
  )

;; WARN: Return type mismatch plasma-flags vs none.
(defmethod sig-plasma-method-12 sig-plasma ((obj sig-plasma))
  (let ((f0-0 (-> obj level)))
    (-> obj min-level)
    (when (>= f0-0 1.0)
      (set! f0-0 0.99)
      (set! (-> obj level) f0-0)
      )
    (set! (-> obj min-level) (fmax 0.0 (+ -0.5 f0-0)))
    )
  (logclear! (-> obj flags) (plasma-flags pf01 pf02 pf04))
  (none)
  )

;; WARN: Return type mismatch plasma-flags vs none.
(defmethod sig-plasma-method-11 sig-plasma ((obj sig-plasma) (arg0 symbol))
  (set! (-> obj min-level) 0.0)
  (cond
    (arg0
      (set! (-> obj level) 0.0)
      )
    (else
      (if (>= (-> obj level) 1.0)
          (set! (-> obj level) 0.99)
          )
      )
    )
  (logclear! (-> obj flags) (plasma-flags pf00 pf01 pf02 pf04))
  (none)
  )

;; WARN: Return type mismatch plasma-flags vs none.
(defmethod sig-plasma-method-9 sig-plasma ((obj sig-plasma))
  (logior! (-> obj flags) (plasma-flags pf03))
  (none)
  )

(defmethod sig-plasma-method-10 sig-plasma ((obj sig-plasma))
  (logtest? (-> obj flags) (plasma-flags pf02))
  )

(defmethod sig-plasma-method-13 sig-plasma ((obj sig-plasma))
  (and (logtest? (-> obj flags) (plasma-flags pf03)) (logtest? (-> obj flags) (plasma-flags pf04)))
  )
