;;-*-Lisp-*-
(in-package goal)

;; name: sig-h.gc
;; name in dgo: sig-h
;; dgos: ATE, UNB

;; +++sig-h:plasma-flags
(defenum plasma-flags
  :type uint8
  :bitfield #t
  (pf00)
  (pf01)
  (pf02)
  (pf03)
  (pf04)
  (pf05)
  (pf06)
  (pf07)
  )
;; ---sig-h:plasma-flags

;; DECOMP BEGINS

(deftype sig-plasma (structure)
  ((flags            plasma-flags  :offset-assert   0)
   (level            float         :offset-assert   4)
   (min-level        float         :offset-assert   8)
   (charge-speed     float         :offset-assert  12)
   (powerup-sound-id sound-id      :offset-assert  16)
   (plasma-sound-id  sound-id      :offset-assert  20)
   )
  :pack-me
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (sig-plasma-method-9 (_type_) none 9)
    (sig-plasma-method-10 (_type_) symbol 10)
    (sig-plasma-method-11 (_type_ symbol) none 11)
    (sig-plasma-method-12 (_type_) none 12)
    (sig-plasma-method-13 (_type_) symbol 13)
    (sig-plasma-method-14 (_type_ process-focusable) none 14)
    )
  )


(deftype sig-path-sample (structure)
  ((bytes  uint8      32      :offset-assert   0)
   (pos    vector     :inline :offset-assert  32)
   (quat   quaternion :inline :offset-assert  48)
   (flags  uint8              :offset         12)
   (pos-x  float              :offset         32)
   (pos-y  float              :offset         36)
   (pos-z  float              :offset         40)
   (quat-x float              :offset         48)
   (quat-y float              :offset         52)
   (quat-z float              :offset         56)
   (quat-w float              :offset         60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; ERROR: failed type prop at 14: add failed: sig-path-sample <integer 0>


(deftype sig-path (basic)
  ((sample-count int32                           :offset-assert   4)
   (samples      (inline-array sig-path-sample)  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )


(deftype sig (bot)
  ((fired-gun-count     uint32             :offset-assert 992)
   (sig-path            sig-path           :offset-assert 996)
   (sig-path-clock      clock              :offset-assert 1000)
   (travel-anim-interp  float              :offset-assert 1004)
   (platform-index      uint8              :offset-assert 1008)
   (played-unjam-time   time-frame         :offset-assert 1016)
   (sig-path-start-time time-frame         :offset-assert 1024)
   (sig-path-cur-time   time-frame         :offset-assert 1032)
   (sig-path-prev-time  time-frame         :offset-assert 1040)
   (plasma              sig-plasma :inline :offset        1048)
   (sig-path-prev-pos   vector     :inline :offset        368)
   )
  :heap-base #x3b0
  :method-count-assert 259
  :size-assert         #x430
  :flag-assert         #x10303b00430
  (:methods
    (whip () _type_ :state 225)
    (blast () _type_ :state 226)
    (chase () _type_ :state 227)
    (chase-attack () _type_ :state 228)
    (traveling () _type_ :state 229)
    (traveling-blocked () _type_ :state 230)
    (waiting-far () _type_ :state 231)
    (waiting-close () _type_ :state 232)
    (waiting-turn () _type_ :state 233)
    (waiting-crouched () _type_ :state 234)
    (charge-plasma () _type_ :state 235)
    (gun-jam () _type_ :state 236)
    (repair-gun () _type_ :state 237)
    (clean-gun () _type_ :state 238)
    (sig-path-run () _type_ :state 239)
    (sig-path-jump () _type_ :state 240)
    (sig-path-jump-land () _type_ :state 241)
    (sig-path-shoot-jump () _type_ :state 242)
    (sig-path-shoot-jump-land () _type_ :state 243)
    (sig-path-idle () _type_ :state 244)
    (sig-method-245 (_type_) symbol 245)
    (sig-method-246 (_type_) symbol 246)
    (fire-gun (_type_ vector) (pointer process) 247)
    (sig-method-248 (_type_ sig-path-sample) none 248)
    (sig-method-249 (_type_ sig-path) none 249)
    (sig-method-250 (_type_) symbol 250)
    (sig-method-251 (_type_) symbol 251)
    (sig-method-252 (_type_) symbol 252)
    (sig-method-253 (_type_) none 253)
    (sig-method-254 (_type_) symbol 254)
    (sig-method-255 (_type_) symbol 255)
    (sig-method-256 (_type_) none 256)
    (sig-method-257 (_type_) symbol 257)
    (sig-method-258 (_type_) none 258)
    )
  )


(defskelgroup skel-sig sig sig-lod0-jg sig-ready0-ja
              ((sig-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow sig-shadow-mg
              :origin-joint-index 25
              )

(deftype sigt-wait-spot (ai-task)
  ((check-done   (function sigt-wait-spot sig symbol)   :offset  32)
   (which-spot   int8                                   :offset  36)
   (num-spots    uint8                                  :offset  37)
   (spot-indexes uint8                                6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )


(deftype sigt-choose-piston (ai-task)
  ((check-done    (function sigt-choose-piston sig symbol)   :offset  32)
   (which-spot    int8                                       :offset  36)
   (num-spots     uint8                                      :offset  37)
   (spot-indexes  uint8                                    4 :offset  38)
   (actor-indexes uint8                                    4 :offset  42)
   )
  :method-count-assert 15
  :size-assert         #x30
  :flag-assert         #xf00000030
  (:methods
    (sigt-choose-piston-method-12 (_type_ sig) symbol 12)
    (sigt-choose-piston-method-13 (_type_ sig) none 13)
    (sigt-choose-piston-method-14 (_type_ sig int) symbol 14)
    )
  )


(deftype sigt-riding-piston (ai-task)
  ((check-done   (function sigt-riding-piston sig symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    4 :offset  38)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (sigt-riding-piston-method-12 (_type_ sig) symbol 12)
    )
  )


(deftype sigt-charge-plasma (ai-task)
  ((check-done   (function sigt-charge-plasma sig symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    4 :offset  38)
   (actor-index  uint8                                      :offset  42)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )


(deftype sigt-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )


(deftype sigt-repair-gun (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )
