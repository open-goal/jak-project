;;-*-Lisp-*-
(in-package goal)

;; name: jinx.gc
;; name in dgo: jinx
;; dgos: SEB, SWB, UNB

;; DECOMP BEGINS

(deftype jinx-anim-info (structure)
  ((anim-index int32  :offset-assert   0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(deftype jinx-global-info (basic)
  ((prev-blue-hit-front int8    :offset-assert   4)
   (prev-blue-hit-back  int8    :offset-assert   5)
   (blue-hit-front-anim int32 3 :offset-assert   8)
   (blue-hit-back-anim  int32 3 :offset-assert  20)
   (kick-anim           int32 2 :offset-assert  32)
   (scared-idle-anim    int32 5 :offset-assert  40)
   (bomb-recoil-anim    int32 2 :offset-assert  60)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )


(define *jinx-global-info* (new 'static 'jinx-global-info
                             :blue-hit-front-anim (new 'static 'array int32 3 10 11 12)
                             :blue-hit-back-anim (new 'static 'array int32 3 13 14 15)
                             :kick-anim (new 'static 'array int32 2 57 58)
                             :scared-idle-anim (new 'static 'array int32 5 5 6 7 8 9)
                             :bomb-recoil-anim (new 'static 'array int32 2 63 64)
                             )
        )

(define *jinx-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #t
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x3 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 3
    :notice-anim 3
    :hostile-anim -1
    :hit-anim 3
    :knocked-anim 3
    :knocked-land-anim 3
    :die-anim 25
    :die-falling-anim 25
    :victory-anim -1
    :jump-wind-up-anim 26
    :jump-in-air-anim 27
    :jump-land-anim 28
    :neck-joint 6
    :look-at-joint 7
    :bullseye-joint 5
    :notice-distance (meters 40)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 10
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.7
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 45056.0
    :knocked-soft-vxz-hi 54067.2
    :knocked-soft-vy-lo 38092.8
    :knocked-soft-vy-hi 45056.0
    :knocked-medium-vxz-lo 65536.0
    :knocked-medium-vxz-hi 74547.2
    :knocked-medium-vy-lo 65536.0
    :knocked-medium-vy-hi 73728.0
    :knocked-hard-vxz-lo 66355.2
    :knocked-hard-vxz-hi 85196.8
    :knocked-hard-vy-lo 60620.8
    :knocked-hard-vy-hi 101580.8
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 20480.0
    :knocked-yellow-vxz-hi 24576.0
    :knocked-yellow-vy-lo 28672.0
    :knocked-yellow-vy-hi 40960.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 73728.0
    :knocked-red-vy-lo 65536.0
    :knocked-red-vy-hi 81920.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 40960.0
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -2)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #t
    :use-circling #f
    :use-pacing #f
    :walk-anim 32
    :turn-anim -1
    :run-anim 33
    :taunt-anim -1
    :run-travel-speed (meters 10)
    :run-acceleration (meters 14)
    :run-turning-acceleration (meters 9)
    :walk-travel-speed (meters 3)
    :walk-acceleration (meters 8)
    :walk-turning-acceleration (meters 6)
    :maximum-rotation-rate (degrees 360.0)
    :notice-nav-radius (meters 10)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *jinx-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod general-event-handler jinx ((obj jinx) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('request)
     (case (-> arg3 param 0)
       (('explode)
        (send-event (handle->process (-> obj bomb-handle)) 'trigger)
        )
       (('no-bomb)
        (send-event (handle->process (-> obj bomb-handle)) 'die-fast)
        )
       (('replace-bomb)
        (setup-masks (-> obj draw) 4096 0)
        #t
        )
       (else
         ((method-of-type ruffian general-event-handler) obj arg0 arg1 arg2 arg3)
         )
       )
     )
    (else
      ((method-of-type ruffian general-event-handler) obj arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod init-enemy-collision! jinx ((obj jinx))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 3) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 4))
      (set! (-> s4-0 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid can-ride no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 5734.4 0.0 7372.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid can-ride))
      (set-vector! (-> v1-13 local-sphere) 0.0 3686.4 0.0 3686.4)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 5939.2 0.0 3686.4)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-17 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-17 local-sphere) 0.0 8192.0 0.0 3686.4)
      )
    (set! (-> s5-0 nav-radius) 4096.0)
    (let ((v1-19 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> s5-0 event-priority) (the-as uint 6))
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod init-enemy! jinx ((obj jinx))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (init! obj)
  (set! (-> obj min-speed) 24576.0)
  (set! (-> obj max-speed) 49152.0)
  (set! (-> obj follow-offset) 24576.0)
  (set! (-> obj channel) (the-as uint 24))
  (set! (-> obj notice-enemy-dist) 204800.0)
  (set! (-> obj travel-anim-interp) 0.0)
  (set! (-> obj focus-info max-los-dist) 61440.0)
  (set! (-> obj bomb-handle) (the-as handle #f))
  (set! (-> obj bomb-func) #f)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-jinx" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! obj *jinx-nav-enemy-info*)
  (set! (-> obj draw light-index) (the-as uint 10))
  (setup-masks (-> obj draw) 6882 #x3e51c)
  (set! (-> obj swivel-joint-mod) (new 'process 'joint-mod (joint-mod-mode joint-set*) obj 4))
  (let ((v1-17 (-> obj neck)))
    (set! (-> v1-17 up) (the-as uint 1))
    (set! (-> v1-17 nose) (the-as uint 2))
    (set! (-> v1-17 ear) (the-as uint 0))
    (set-vector! (-> v1-17 twist-max) 11832.889 11832.889 0.0 1.0)
    (set! (-> v1-17 ignore-angle) 30947.555)
    )
  (let ((t9-6 (method-of-type ruffian init-enemy!)))
    (t9-6 obj)
    )
  (set! (-> obj my-simple-focus) (process-spawn simple-focus :to obj))
  0
  (none)
  )

;; WARN: Return type mismatch (pointer process) vs none.
(defmethod fire-gun jinx ((obj jinx) (arg0 vector))
  (with-pp
    (set! (-> obj next-fire-time) (+ (-> pp clock frame-counter) (get-rand-int-range obj 150 600)))
    (+! (-> obj fired-gun-count) 1)
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> obj entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle obj))
      (let* ((v1-12 *game-info*)
             (a0-7 (+ (-> v1-12 attack-id) 1))
             )
        (set! (-> v1-12 attack-id) a0-7)
        (set! (-> s4-1 attack-id) a0-7)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector<-cspace! (-> s4-1 pos) (-> obj node-list data 24))
      (set! (-> s4-1 vel quad) (-> arg0 quad))
      (vector-! (-> s4-1 vel) (-> s4-1 vel) (-> s4-1 pos))
      (vector-normalize! (-> s4-1 vel) 307200.0)
      (spawn-projectile jinx-shot s4-1 obj *default-dead-pool*)
      )
    (none)
    )
  )

(defmethod ruffian-method-244 jinx ((obj jinx))
  (with-pp
    (ruffian-method-245 obj)
    (let ((f30-0 (-> obj nav state speed)))
      (let ((f0-1 (lerp-scale 0.0 1.0 f30-0 12288.0 40960.0)))
        (seek! (-> obj travel-anim-interp) f0-1 (* 4.0 (-> pp clock seconds-per-frame)))
        )
      (let ((f28-0 (-> obj travel-anim-interp))
            (v1-9 (if (> (-> obj skel active-channels) 0)
                      (-> obj skel root-channel 0 frame-group)
                      )
                  )
            )
        (cond
          ((and v1-9 (= v1-9 (-> obj draw art-group data 32)))
           (let ((v1-14 (-> obj skel root-channel 1)))
             (set! (-> v1-14 frame-interp 1) f28-0)
             (set! (-> v1-14 frame-interp 0) f28-0)
             )
           (let* ((f28-1 (current-cycle-distance (-> obj skel)))
                  (f0-5 (quaternion-y-angle (-> obj root-override2 quat)))
                  (f1-2 (deg- f0-5 (-> obj travel-prev-ry)))
                  (f0-8 (fmin 40960.0 (* 0.35342914 (-> pp clock frames-per-second) (fabs f1-2))))
                  (f0-11 (/ (* 16.0 (fmax f30-0 f0-8)) (* 15.0 f28-1)))
                  (a0-11 (-> obj skel root-channel 0))
                  )
             (set! (-> a0-11 param 0) f0-11)
             (joint-control-channel-group-eval! a0-11 (the-as art-joint-anim #f) num-func-loop!)
             )
           (let ((a0-12 (-> obj skel root-channel 1)))
             (set! (-> a0-12 param 0) 0.0)
             (joint-control-channel-group-eval! a0-12 (the-as art-joint-anim #f) num-func-chan)
             )
           )
          (else
            (ja-channel-push! 2 (seconds 0.15))
            (let ((a0-14 (-> obj skel root-channel 0)))
              (set! (-> a0-14 dist) 13107.2)
              (set! (-> a0-14 frame-group) (the-as art-joint-anim (-> obj draw art-group data 32)))
              (set! (-> a0-14 param 0) 1.0)
              (joint-control-channel-group! a0-14 (the-as art-joint-anim (-> obj draw art-group data 32)) num-func-loop!)
              )
            (let ((a0-15 (-> obj skel root-channel 1)))
              (set! (-> a0-15 frame-interp 1) f28-0)
              (set! (-> a0-15 frame-interp 0) f28-0)
              (set! (-> a0-15 dist) 21843.969)
              (set! (-> a0-15 frame-group) (the-as art-joint-anim (-> obj draw art-group data 33)))
              (set! (-> a0-15 param 0) 0.0)
              (joint-control-channel-group! a0-15 (the-as art-joint-anim (-> obj draw art-group data 33)) num-func-chan)
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod enemy-method-77 jinx ((obj jinx) (arg0 (pointer float)))
  (let ((v1-0 (-> obj incoming knocked-type)))
    (cond
      ((= v1-0 (knocked-type knocked-type-6))
       (let ((s4-0 (new 'stack-no-clear 'vector))
             (s5-1 (new 'stack-no-clear 'vector))
             )
         (enemy-method-50 obj s4-0)
         (vector-z-quaternion! s5-1 (-> obj root-override2 quat))
         (cond
           ((>= (vector-dot s4-0 s5-1) 0.0)
            (let* ((v1-7 (enemy-method-120 obj 3 (ash 1 (-> *jinx-global-info* prev-blue-hit-back))))
                   (s5-2 (-> obj draw art-group data (-> *jinx-global-info* blue-hit-back-anim v1-7)))
                   )
              (set! (-> *jinx-global-info* prev-blue-hit-back) v1-7)
              (let ((v1-10 (if (> (-> obj skel active-channels) 0)
                               (-> obj skel root-channel 0 frame-group)
                               )
                           )
                    )
                (if (and v1-10 (= v1-10 (-> obj draw art-group data 16)))
                    (ja-channel-push! 1 (seconds 0.17))
                    (ja-channel-push! 1 (seconds 0.02))
                    )
                )
              (let ((a0-17 (-> obj skel root-channel 0)))
                (set! (-> a0-17 frame-group) (the-as art-joint-anim s5-2))
                (set! (-> a0-17 param 0) (the float (+ (-> (the-as art-joint-anim s5-2) frames num-frames) -1)))
                (set! (-> a0-17 param 1) 1.0)
                (set! (-> a0-17 frame-num) 0.0)
                (joint-control-channel-group! a0-17 (the-as art-joint-anim s5-2) num-func-seek!)
                )
              )
            )
           (else
             (let* ((v1-24 (enemy-method-120 obj 3 (ash 1 (-> *jinx-global-info* prev-blue-hit-front))))
                    (s5-3 (-> obj draw art-group data (-> *jinx-global-info* blue-hit-front-anim v1-24)))
                    )
               (set! (-> *jinx-global-info* prev-blue-hit-front) v1-24)
               (let ((v1-27 (if (> (-> obj skel active-channels) 0)
                                (-> obj skel root-channel 0 frame-group)
                                )
                            )
                     )
                 (if (and v1-27 (= v1-27 (-> obj draw art-group data 16)))
                     (ja-channel-push! 1 (seconds 0.17))
                     (ja-channel-push! 1 (seconds 0.02))
                     )
                 )
               (let ((a0-31 (-> obj skel root-channel 0)))
                 (set! (-> a0-31 frame-group) (the-as art-joint-anim s5-3))
                 (set! (-> a0-31 param 0) (the float (+ (-> (the-as art-joint-anim s5-3) frames num-frames) -1)))
                 (set! (-> a0-31 param 1) 1.0)
                 (set! (-> a0-31 frame-num) 0.0)
                 (joint-control-channel-group! a0-31 (the-as art-joint-anim s5-3) num-func-seek!)
                 )
               )
             )
           )
         )
       )
      ((= v1-0 (knocked-type knocked-type-2))
       (ja-channel-push! 1 (seconds 0.17))
       (let ((a0-34 (-> obj skel root-channel 0)))
         (set! (-> a0-34 frame-group) (the-as art-joint-anim (-> obj draw art-group data 23)))
         (set! (-> a0-34 param 0)
               (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 23)) frames num-frames) -1))
               )
         (set! (-> a0-34 param 1) 1.0)
         (set! (-> a0-34 frame-num) 0.0)
         (joint-control-channel-group! a0-34 (the-as art-joint-anim (-> obj draw art-group data 23)) num-func-seek!)
         )
       )
      ((zero? (get-rand-int obj 3))
       (ja-channel-push! 1 (seconds 0.17))
       (let ((a0-37 (-> obj skel root-channel 0)))
         (set! (-> a0-37 frame-group) (the-as art-joint-anim (-> obj draw art-group data 21)))
         (set! (-> a0-37 param 0)
               (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 21)) frames num-frames) -1))
               )
         (set! (-> a0-37 param 1) 1.0)
         (set! (-> a0-37 frame-num) 0.0)
         (joint-control-channel-group! a0-37 (the-as art-joint-anim (-> obj draw art-group data 21)) num-func-seek!)
         )
       )
      (else
        (let ((s4-1 (new 'stack-no-clear 'vector)))
          0.0
          0.0
          (vector-z-quaternion! s4-1 (-> obj root-override2 quat))
          (let ((f30-0 (atan (-> s4-1 x) (-> s4-1 z))))
            (enemy-method-50 obj s4-1)
            (let* ((f0-24 (atan (-> s4-1 x) (-> s4-1 z)))
                   (s4-2 (if (< (deg- f0-24 f30-0) 0.0)
                             (-> obj draw art-group data 17)
                             (-> obj draw art-group data 19)
                             )
                         )
                   )
              (ja-channel-push! 1 (seconds 0.03))
              (let ((a0-44 (-> obj skel root-channel 0)))
                (set! (-> a0-44 frame-group) (the-as art-joint-anim s4-2))
                (set! (-> a0-44 param 0) (the float (+ (-> (the-as art-joint-anim s4-2) frames num-frames) -1)))
                (set! (-> a0-44 param 1) (-> arg0 0))
                (set! (-> a0-44 frame-num) 0.0)
                (joint-control-channel-group! a0-44 (the-as art-joint-anim s4-2) num-func-seek!)
                )
              )
            )
          )
        )
      )
    )
  #t
  )

(defmethod enemy-method-78 jinx ((obj jinx) (arg0 (pointer float)))
  (case (-> obj incoming knocked-type)
    (((knocked-type knocked-type-6))
     (when (>= (-> obj incoming blue-juggle-count) (the-as uint 2))
       (-> obj draw art-group data 16)
       (ja-channel-push! 1 (seconds 0.17))
       (let ((a0-3 (-> obj skel root-channel 0)))
         (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 16)))
         (set! (-> a0-3 param 0)
               (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 16)) frames num-frames) -1))
               )
         (set! (-> a0-3 param 1) 1.0)
         (set! (-> a0-3 frame-num) 0.0)
         (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> obj draw art-group data 16)) num-func-seek!)
         )
       #t
       )
     )
    (((knocked-type knocked-type-2))
     (ja-channel-push! 1 (seconds 0.17))
     (let ((a0-6 (-> obj skel root-channel 0)))
       (set! (-> a0-6 frame-group) (the-as art-joint-anim (-> obj draw art-group data 24)))
       (set! (-> a0-6 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 24)) frames num-frames) -1))
             )
       (set! (-> a0-6 param 1) 1.0)
       (set! (-> a0-6 frame-num) 0.0)
       (joint-control-channel-group! a0-6 (the-as art-joint-anim (-> obj draw art-group data 24)) num-func-seek!)
       )
     #t
     )
    (else
      (let ((v1-37 (if (> (-> obj skel active-channels) 0)
                       (-> obj skel root-channel 0 frame-group)
                       )
                   )
            )
        (cond
          ((and v1-37 (= v1-37 (-> obj draw art-group data 21)))
           (ja-channel-push! 1 (seconds 0.17))
           (let ((a0-12 (-> obj skel root-channel 0)))
             (set! (-> a0-12 frame-group) (the-as art-joint-anim (-> obj draw art-group data 22)))
             (set! (-> a0-12 param 0)
                   (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 22)) frames num-frames) -1))
                   )
             (set! (-> a0-12 param 1) 1.0)
             (set! (-> a0-12 frame-num) 0.0)
             (joint-control-channel-group! a0-12 (the-as art-joint-anim (-> obj draw art-group data 22)) num-func-seek!)
             )
           )
          (else
            (let ((v1-57 (if (> (-> obj skel active-channels) 0)
                             (-> obj skel root-channel 0 frame-group)
                             )
                         )
                  )
              (cond
                ((and v1-57 (= v1-57 (-> obj draw art-group data 17)))
                 (ja-channel-push! 1 (seconds 0.17))
                 (let ((a0-18 (-> obj skel root-channel 0)))
                   (set! (-> a0-18 frame-group) (the-as art-joint-anim (-> obj draw art-group data 18)))
                   (set! (-> a0-18 param 0)
                         (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 18)) frames num-frames) -1))
                         )
                   (set! (-> a0-18 param 1) 1.0)
                   (set! (-> a0-18 frame-num) 0.0)
                   (joint-control-channel-group! a0-18 (the-as art-joint-anim (-> obj draw art-group data 18)) num-func-seek!)
                   )
                 )
                (else
                  (ja-channel-push! 1 (seconds 0.17))
                  (let ((a0-20 (-> obj skel root-channel 0)))
                    (set! (-> a0-20 frame-group) (the-as art-joint-anim (-> obj draw art-group data 20)))
                    (set! (-> a0-20 param 0)
                          (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 20)) frames num-frames) -1))
                          )
                    (set! (-> a0-20 param 1) 1.0)
                    (set! (-> a0-20 frame-num) 0.0)
                    (joint-control-channel-group! a0-20 (the-as art-joint-anim (-> obj draw art-group data 20)) num-func-seek!)
                    )
                  )
                )
              )
            )
          )
        )
      #t
      )
    )
  )

(defmethod enemy-method-79 jinx ((obj jinx) (arg0 int) (arg1 enemy-knocked-info))
  (let ((f30-0 -1.0))
    (when (and (= arg0 3) (logtest? (-> obj bot-flags) (bot-flags attacked)))
      (let ((v1-7 (if (> (-> obj skel active-channels) 0)
                      (-> obj skel root-channel 0 frame-group)
                      )
                  )
            )
        (cond
          ((and v1-7 (= v1-7 (-> obj draw art-group data 22)))
           (set! f30-0 17.0)
           )
          ((let ((v1-15 (if (> (-> obj skel active-channels) 0)
                            (-> obj skel root-channel 0 frame-group)
                            )
                        )
                 )
             (and v1-15 (= v1-15 (-> obj draw art-group data 20)))
             )
           (set! f30-0 23.0)
           )
          ((let ((v1-23 (if (> (-> obj skel active-channels) 0)
                            (-> obj skel root-channel 0 frame-group)
                            )
                        )
                 )
             (and v1-23 (= v1-23 (-> obj draw art-group data 18)))
             )
           (set! f30-0 11.0)
           )
          ((let ((v1-31 (if (> (-> obj skel active-channels) 0)
                            (-> obj skel root-channel 0 frame-group)
                            )
                        )
                 )
             (and v1-31 (= v1-31 (-> obj draw art-group data 16)))
             )
           (set! f30-0 12.0)
           )
          )
        )
      )
    (cond
      ((>= f30-0 0.0)
       (let ((a0-1 (-> obj skel root-channel 0)))
         (set! (-> a0-1 param 0) (the float (+ (-> a0-1 frame-group frames num-frames) -1)))
         (set! (-> a0-1 param 1) (-> arg1 anim-speed))
         (joint-control-channel-group-eval! a0-1 (the-as art-joint-anim #f) num-func-seek!)
         )
       (>= (ja-aframe-num 0) f30-0)
       )
      (else
        ((method-of-type ruffian enemy-method-79) obj arg0 arg1)
        )
      )
    )
  )

(defmethod enemy-method-84 jinx ((obj jinx) (arg0 enemy-jump-info))
  (let ((f0-0 (vector-vector-xz-distance (-> arg0 start-pos) (-> arg0 dest-pos))))
    (fmax (-> obj enemy-info-override jump-height-min) (* (-> obj enemy-info-override jump-height-factor) f0-0))
    )
  (let ((f0-3 3072.0))
    (setup-from-to-height! (-> arg0 traj) (-> arg0 start-pos) (-> arg0 dest-pos) f0-3 -4.551111)
    )
  (none)
  )

(defmethod bot-method-216 jinx ((obj jinx))
  (set! (-> obj health-handle) (ppointer->handle (process-spawn hud-ruffians :init hud-init-by-other :to obj)))
  0
  (none)
  )

(defmethod draw hud-ruffians ((obj hud-ruffians))
  (set-hud-piece-position!
    (-> obj sprites 2)
    (the int (+ 20.0 (* -130.0 (-> obj offset))))
    (the int (+ 15.0 (* -100.0 (-> obj offset))))
    )
  (set! (-> obj sprites 0 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> obj values 0 current)) 100)))))
  (set-as-offset-from! (the-as hud-sprite (-> obj sprites)) (the-as vector4w (-> obj sprites 2)) 40 16)
  (set-as-offset-from! (-> obj sprites 1) (the-as vector4w (-> obj sprites 2)) 1 16)
  (set-as-offset-from! (-> obj sprites 3) (the-as vector4w (-> obj sprites 2)) 15 2)
  (set-hud-piece-position!
    (-> obj sprites 6)
    (the int (+ 100.0 (* -130.0 (-> obj offset))))
    (the int (+ 15.0 (* -100.0 (-> obj offset))))
    )
  (set! (-> obj sprites 4 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> obj values 1 current)) 100)))))
  (set-as-offset-from! (-> obj sprites 4) (the-as vector4w (-> obj sprites 6)) 40 16)
  (set-as-offset-from! (-> obj sprites 5) (the-as vector4w (-> obj sprites 6)) 1 16)
  (set-as-offset-from! (-> obj sprites 7) (the-as vector4w (-> obj sprites 6)) 15 2)
  (set-hud-piece-position!
    (-> obj sprites 10)
    (the int (+ 20.0 (* -130.0 (-> obj offset))))
    (the int (+ 85.0 (* -100.0 (-> obj offset))))
    )
  (set! (-> obj sprites 8 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> obj values 2 current)) 100)))))
  (set-as-offset-from! (-> obj sprites 8) (the-as vector4w (-> obj sprites 10)) 40 16)
  (set-as-offset-from! (-> obj sprites 9) (the-as vector4w (-> obj sprites 10)) 1 16)
  (set-as-offset-from! (-> obj sprites 11) (the-as vector4w (-> obj sprites 10)) 15 2)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

(defmethod update-values hud-ruffians ((obj hud-ruffians))
  (set! (-> obj values 0 target) (the int (* 100.0 (-> *game-info* bot-health 0))))
  (set! (-> obj values 1 target) (the int (* 100.0 (-> *game-info* bot-health 1))))
  (set! (-> obj values 2 target) (the int (* 100.0 (-> *game-info* bot-health 2))))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

(defmethod init-callback hud-ruffians ((obj hud-ruffians))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-upper-left) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> obj sprites 0 scale-x) 12.0)
  (set! (-> obj sprites 0 scale-y) 11.2)
  (set! (-> obj sprites 0 pos z) #xfffff2)
  (set! (-> obj sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x25 :page #x67a)))
  (set! (-> obj sprites 1 pos z) #xfffff0)
  (set! (-> obj sprites 2 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x12 :page #x67a)))
  (set! (-> obj sprites 2 pos z) #xffffff)
  (set! (-> obj sprites 3 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xd57)))
  (set! (-> obj sprites 3 scale-x) 1.0)
  (set! (-> obj sprites 3 scale-y) 1.4)
  (set! (-> obj sprites 3 pos z) #xffffff)
  (set! (-> obj sprites 4 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> obj sprites 4 scale-x) 12.0)
  (set! (-> obj sprites 4 scale-y) 11.2)
  (set! (-> obj sprites 4 pos z) #xfffff2)
  (set! (-> obj sprites 5 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x25 :page #x67a)))
  (set! (-> obj sprites 5 pos z) #xfffff0)
  (set! (-> obj sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x12 :page #x67a)))
  (set! (-> obj sprites 6 pos z) #xffffff)
  (set! (-> obj sprites 7 tex) (lookup-texture-by-id (new 'static 'texture-id :page #xd57)))
  (set! (-> obj sprites 7 scale-x) 1.0)
  (set! (-> obj sprites 7 scale-y) 1.4)
  (set! (-> obj sprites 7 pos z) #xffffff)
  (set! (-> obj sprites 8 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> obj sprites 8 scale-x) 12.0)
  (set! (-> obj sprites 8 scale-y) 11.2)
  (set! (-> obj sprites 8 pos z) #xfffff2)
  (set! (-> obj sprites 9 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x25 :page #x67a)))
  (set! (-> obj sprites 9 pos z) #xfffff0)
  (set! (-> obj sprites 10 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x12 :page #x67a)))
  (set! (-> obj sprites 10 pos z) #xffffff)
  (set! (-> obj sprites 11 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #xd57)))
  (set! (-> obj sprites 11 scale-x) 1.0)
  (set! (-> obj sprites 11 scale-y) 1.4)
  (set! (-> obj sprites 11 pos z) #xffffff)
  0
  (none)
  )
