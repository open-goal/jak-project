;;-*-Lisp-*-
(in-package goal)

;; name: jinx-states.gc
;; name in dgo: jinx-states
;; dgos: SEB, SWB, UNB

;; DECOMP BEGINS

(defstate waiting-idle (jinx)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (cond
        ((and v1-2 (or (= v1-2 (-> self draw art-group data 3))
                       (= v1-2 (-> self draw art-group data 4))
                       (= v1-2 (-> self draw art-group data 5))
                       (= v1-2 (-> self draw art-group data 6))
                       )
              )
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         )
        ((let ((v1-17 (ja-group)))
           (and v1-17 (= v1-17 (-> self draw art-group data 60)))
           )
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         (ja-no-eval :group! (-> self draw art-group data 61)
                     :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 61)) frames num-frames) -1)))
                     :frame-num 0.0
                     )
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         )
        )
      )
    (until #f
      (let ((gp-0 (get-rand-int self 5)))
        (while (>= gp-0 0)
          (let ((v1-57 (ja-group)))
            (if (not (and v1-57 (= v1-57 (-> self draw art-group data 3))))
                (ja-channel-push! 1 (seconds 0.2))
                )
            )
          (ja-no-eval :group! (-> self draw art-group data 3)
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          (+! gp-0 -1)
          )
        )
      (let ((v1-89 (ja-group)))
        (if (not (and v1-89 (= v1-89 (-> self draw art-group data 4))))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (stop-looking-at-target! self)
      (ja-no-eval :group! (-> self draw art-group data 4)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 4)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      (look-at-target! self (enemy-flag lock-focus))
      )
    #f
    (none)
    )
  )

(defstate waiting-turn (jinx)
  :virtual #t
  :code (behavior ()
    (local-vars (s4-1 art-element) (f0-9 float))
    (let ((gp-0 (new 'stack-no-clear 'bot-turn-info)))
      (let ((s5-0 (-> self focus-info fproc)))
        (if (not s5-0)
            (ruffian-method-240 self)
            )
        (turn-to-target self gp-0 s5-0 1.0)
        )
      (let ((s4-0 (>= (-> gp-0 predicted-ry-diff) 0.0)))
        (let ((s5-1 (-> self draw art-group data (if s4-0
                                                     38
                                                     42
                                                     )
                        )
                    )
              )
          (ja-channel-push! 1 (seconds 0.2))
          (ja-no-eval :group! s5-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s5-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        (let ((a2-3 (-> self focus-info fproc)))
          (if a2-3
              (turn-to-target self gp-0 a2-3 0.733)
              )
          )
        (let ((s5-2 (new 'stack-no-clear 'quaternion))
              (f0-8 (-> gp-0 predicted-ry-diff))
              (f30-0 4.0)
              (f28-0 15.0)
              )
          (cond
            (s4-0
              (if (< f0-8 0.0)
                  (set! f0-8 (+ 65536.0 f0-8))
                  )
              (cond
                ((< f0-8 18204.445)
                 (set! f0-9 9102.223)
                 (set! s4-1 (-> self draw art-group data 39))
                 )
                ((< f0-8 27306.666)
                 (set! f0-9 18204.445)
                 (set! s4-1 (-> self draw art-group data 40))
                 (set! f30-0 10.0)
                 (set! f28-0 24.0)
                 )
                (else
                  (set! f0-9 27306.666)
                  (set! s4-1 (-> self draw art-group data 41))
                  (set! f30-0 10.0)
                  (set! f28-0 24.0)
                  )
                )
              )
            (else
              (if (>= f0-8 0.0)
                  (set! f0-8 (+ -65536.0 f0-8))
                  )
              (cond
                ((< -18204.445 f0-8)
                 (set! f0-9 -9102.223)
                 (set! s4-1 (-> self draw art-group data 43))
                 )
                ((< -27306.666 f0-8)
                 (set! f0-9 -18204.445)
                 (set! s4-1 (-> self draw art-group data 44))
                 (set! f28-0 17.0)
                 )
                (else
                  (set! f0-9 -27306.666)
                  (set! s4-1 (-> self draw art-group data 45))
                  (set! f28-0 17.0)
                  )
                )
              )
            )
          (quaternion-rotate-y! s5-2 (-> gp-0 src-quat) f0-9)
          (ja-no-eval :group! s4-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s4-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (let ((f0-14 (ja-aframe-num 0)))
              (cond
                ((< f0-14 f28-0)
                 (if (>= f0-14 f30-0)
                     (quaternion-slerp! (-> self root-override2 quat) (-> gp-0 src-quat) s5-2 (/ (- f0-14 f30-0) (- f28-0 f30-0)))
                     )
                 )
                (else
                  (quaternion-copy! (-> self root-override2 quat) s5-2)
                  )
                )
              )
            (suspend)
            (ja :num! (seek!))
            )
          )
        )
      )
    (ruffian-method-240 self)
    (none)
    )
  :post (the-as (function none :behavior jinx) nav-enemy-simple-post)
  )

(defstate scared-idle (jinx)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (cond
        ((and v1-2 (or (= v1-2 (-> self draw art-group data 5))
                       (= v1-2 (-> self draw art-group data 6))
                       (= v1-2 (-> self draw art-group data 7))
                       (= v1-2 (-> self draw art-group data 8))
                       )
              )
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         )
        ((let ((v1-17 (ja-group)))
           (and v1-17 (= v1-17 (-> self draw art-group data 60)))
           )
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         (ja-no-eval :group! (-> self draw art-group data 61)
                     :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 61)) frames num-frames) -1)))
                     :frame-num 0.0
                     )
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         )
        )
      )
    (let ((gp-0 0))
      (until #f
        (countdown (s5-0 (get-rand-int-range self 1 3))
          (let ((v1-57 (ja-group)))
            (if (not (and v1-57 (= v1-57 (-> self draw art-group data 5))))
                (ja-channel-push! 1 (seconds 0.1))
                )
            )
          (ja-no-eval :group! (-> self draw art-group data 5)
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 5)) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          )
        (set! gp-0 (enemy-method-120 self 5 (logior (ash 1 gp-0) 1)))
        (let ((s5-1 (-> self draw art-group data (-> *jinx-global-info* scared-idle-anim gp-0))))
          (let ((v1-98 (ja-group)))
            (if (not (and v1-98 (= v1-98 s5-1)))
                (ja-channel-push! 1 (seconds 0.1))
                )
            )
          (ja-no-eval :group! s5-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s5-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    #f
    (none)
    )
  )

(defstate scared-turn (jinx)
  :virtual #t
  :code (behavior ()
    (local-vars (s4-1 art-element) (f0-9 float))
    (let ((gp-0 (new 'stack-no-clear 'bot-turn-info)))
      (-> self focus-info fproc)
      (let ((s5-0 (-> self focus-info fproc)))
        (if (not s5-0)
            (ruffian-method-240 self)
            )
        (turn-to-target self gp-0 s5-0 0.8)
        )
      (let ((s4-0 (>= (-> gp-0 predicted-ry-diff) 0.0)))
        (let ((s5-1 (-> self draw art-group data (if s4-0
                                                     46
                                                     50
                                                     )
                        )
                    )
              )
          (ja-channel-push! 1 (seconds 0.2))
          (ja-no-eval :group! s5-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s5-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        (let ((a2-3 (-> self focus-info fproc)))
          (if a2-3
              (turn-to-target self gp-0 a2-3 0.733)
              )
          )
        (let ((s5-2 (new 'stack-no-clear 'quaternion))
              (f0-8 (-> gp-0 predicted-ry-diff))
              (f30-0 2.0)
              (f28-0 6.0)
              )
          (cond
            (s4-0
              (if (< f0-8 0.0)
                  (set! f0-8 (+ 65536.0 f0-8))
                  )
              (cond
                ((< f0-8 18204.445)
                 (set! f0-9 9102.223)
                 (set! s4-1 (-> self draw art-group data 47))
                 )
                ((< f0-8 27306.666)
                 (set! f0-9 18204.445)
                 (set! s4-1 (-> self draw art-group data 48))
                 (set! f28-0 5.0)
                 )
                (else
                  (set! f0-9 27306.666)
                  (set! s4-1 (-> self draw art-group data 49))
                  )
                )
              )
            (else
              (if (>= f0-8 0.0)
                  (set! f0-8 (+ -65536.0 f0-8))
                  )
              (cond
                ((< -18204.445 f0-8)
                 (set! f0-9 -9102.223)
                 (set! s4-1 (-> self draw art-group data 51))
                 )
                ((< -27306.666 f0-8)
                 (set! f0-9 -18204.445)
                 (set! s4-1 (-> self draw art-group data 52))
                 (set! f28-0 5.0)
                 )
                (else
                  (set! f0-9 -27306.666)
                  (set! s4-1 (-> self draw art-group data 53))
                  )
                )
              )
            )
          (quaternion-rotate-y! s5-2 (-> gp-0 src-quat) f0-9)
          (ja-no-eval :group! s4-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s4-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (let ((f0-14 (ja-aframe-num 0)))
              (cond
                ((< f0-14 f28-0)
                 (if (>= f0-14 f30-0)
                     (quaternion-slerp! (-> self root-override2 quat) (-> gp-0 src-quat) s5-2 (/ (- f0-14 f30-0) (- f28-0 f30-0)))
                     )
                 )
                (else
                  (quaternion-copy! (-> self root-override2 quat) s5-2)
                  )
                )
              )
            (suspend)
            (ja :num! (seek!))
            )
          )
        )
      )
    (react-to-focus self)
    (none)
    )
  :post (the-as (function none :behavior jinx) nav-enemy-simple-post)
  )

(defstate alert-idle (jinx)
  :virtual #t
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (and v1-2 (= v1-2 (-> self draw art-group data 60)))
        (ja-no-eval :num! (seek!))
        (while (not (ja-done? 0))
          (suspend)
          (ja-eval)
          )
        )
      )
    (let ((v1-17 (ja-group)))
      (if (not (or (and v1-17 (= v1-17 (-> self draw art-group data 60)))
                   (let ((v1-23 (ja-group)))
                     (and (and v1-23 (= v1-23 (-> self draw art-group data 59))) (ja-done? 0))
                     )
                   )
               )
          (ja-channel-push! 1 (seconds 0.1))
          )
      )
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 60)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 60)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  )

(defstate alert-turn (jinx)
  :virtual #t
  :code (-> (method-of-type jinx scared-turn) code)
  :post (-> (method-of-type jinx scared-turn) post)
  )

(defstate traveling-blocked (jinx)
  :virtual #t
  :code (-> (method-of-type jinx waiting-idle) code)
  )

(defstate stare (jinx)
  :virtual #t
  :code (-> (method-of-type jinx waiting-idle) code)
  )

(defstate kick (jinx)
  :virtual #t
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((a1-2 (-> self draw art-group data (-> *jinx-global-info* kick-anim (get-rand-int self 2)))))
      (ja-no-eval :group! a1-2
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim a1-2) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (if (logtest? (-> self bot-flags) (bot-flags attacked))
        (reset-attacker! self)
        )
    (react-to-focus self)
    (none)
    )
  )

(defstate blast (jinx)
  :virtual #t
  :code (behavior ()
    (local-vars (s5-0 art-element))
    (let ((f30-0 3.0)
          (gp-0 #f)
          )
      (let ((a1-0 30))
        (let ((v1-4 (ja-group)))
          (when (and v1-4 (or (= v1-4 (-> self draw art-group data 22))
                              (= v1-4 (-> self draw art-group data 20))
                              (= v1-4 (-> self draw art-group data 18))
                              (= v1-4 (-> self draw art-group data 16))
                              )
                     )
            (set! gp-0 #t)
            (set! a1-0 12)
            )
          )
        (cond
          ((< (fabs (-> self focus-info ry-diff)) 8192.0)
           (let ((v1-12 (ja-group)))
             (cond
               ((and v1-12 (= v1-12 (-> self draw art-group data 60)))
                (set! s5-0 (-> self draw art-group data 59))
                (set! f30-0 7.0)
                (set! gp-0 #f)
                (set! a1-0 12)
                )
               (else
                 (set! s5-0 (-> self draw art-group data 54))
                 )
               )
             )
           (ja-channel-push! 1 (the-as time-frame a1-0))
           )
          ((< (-> self focus-info ry-diff) 0.0)
           (ja-channel-push! 1 (the-as time-frame a1-0))
           (set! s5-0 (-> self draw art-group data 56))
           )
          (else
            (ja-channel-push! 1 (the-as time-frame a1-0))
            (set! s5-0 (-> self draw art-group data 55))
            )
          )
        )
      (let ((f30-1 (ja-aframe f30-0 0)))
        (ja-no-eval :group! s5-0 :num! (seek! f30-1) :frame-num 0.0)
        (when gp-0
          (suspend)
          (suspend)
          0
          )
        (until (ja-done? 0)
          (seek-toward-heading-vec!
            (-> self root-override2)
            (-> self focus-info bullseye-xz-dir)
            131072.0
            (seconds 0.05)
            )
          (bot-method-223 self #t)
          (if (and (>= (- (current-time) (-> self state-time)) (seconds 0.1))
                   (or (not (bot-method-214 self)) (not (ruffian-method-237 self)))
                   )
              (react-to-focus self)
              )
          (suspend)
          (ja :num! (seek! f30-1))
          )
        )
      )
    0
    (bot-method-223 self #t)
    (if (and (bot-method-214 self) (ruffian-method-237 self))
        (fire-gun self (-> self focus-info bullseye))
        )
    (ja-no-eval :num! (seek!))
    (while (not (ja-done? 0))
      (suspend)
      (ja-eval)
      )
    (if (logtest? (-> self bot-flags) (bot-flags attacked))
        (reset-attacker! self)
        )
    (react-to-focus self)
    (none)
    )
  )

(defstate bomb-recoil (jinx)
  :virtual #t
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.07))
    (let ((gp-1 (-> self draw art-group data (-> *jinx-global-info* bomb-recoil-anim (get-rand-int self 2))))
          (f30-0 (get-rand-float-range self 0.4 0.8))
          )
      (ja-no-eval :group! gp-1
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim gp-1) frames num-frames) -1)) f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (react-to-focus self)
    (none)
    )
  )

(defstate hit (jinx)
  :virtual #t
  :code (behavior ()
    (local-vars (v1-7 enemy-flag) (v1-15 enemy-flag))
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-6 (-> self enemy-flags)))
      (if (logtest? v1-6 (enemy-flag checking-water))
          (set! v1-7 (logior v1-6 (enemy-flag enable-on-active)))
          (set! v1-7 (logclear v1-6 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-7)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (set! (-> self mask) (logior (process-mask collectable) (-> self mask)))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-14 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-14)
          (set! v1-15 (logior (enemy-flag check-water-backup) v1-14))
          (set! v1-15 (logclear v1-14 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-15)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (react-to-focus self)
    (none)
    )
  )

(defstate failed (jinx)
  :virtual #t
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! (-> self draw art-group data 3)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set! (-> self state-time) (current-time))
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 3)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (if (and (logtest? (-> self bot-flags) (bot-flags failed))
                 (>= (- (current-time) (-> self state-time)) (seconds 0.5))
                 (reset? *fail-mission-control*)
                 )
            (reset! *fail-mission-control*)
            )
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  )

(defstate plant-bomb (jinx)
  :virtual #t
  :exit (behavior ()
    (if (logtest? (bot-flags bf21) (-> self bot-flags))
        (set! (-> self bot-flags) (logior (bot-flags bf22) (-> self bot-flags)))
        )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 62) :num! (seek! (ja-aframe 56.0 0)) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! (ja-aframe 56.0 0)))
      )
    (let ((a1-5 (-> self node-list data 38 bone transform))
          (gp-2 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'quaternion))
          )
      (vector<-matrix! gp-2 a1-5)
      (set! (-> gp-2 y) (+ -122.88 (-> self root-override2 gspot-pos y)))
      (quaternion-identity! s5-0)
      (set! (-> self bomb-handle)
            (ppointer->handle
              (process-spawn
                jinx-bomb
                gp-2
                s5-0
                (-> self level)
                (-> self bomb-fuse-delay)
                (-> self bomb-func)
                (logtest? (bot-flags bf23) (-> self bot-flags))
                :to self
                )
              )
            )
      )
    (send-event (handle->process (-> self master-handle)) 'notify 'jinx-bomb)
    (set! (-> self bot-flags) (logior (bot-flags bf21) (-> self bot-flags)))
    (setup-masks (-> self draw) 0 4096)
    (ja-no-eval :group! (-> self draw art-group data 62)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 62)) frames num-frames) -1)))
                :frame-num (ja-aframe 56.0 0)
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (react-to-focus self)
    (none)
    )
  )

(defstate die-falling (jinx)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type ruffian die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (play-death-sound self "hal116")
    (none)
    )
  )
