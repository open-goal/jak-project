;;-*-Lisp-*-
(in-package goal)

;; name: stadium-scenes.gc
;; name in dgo: stadium-scenes
;; dgos: STA

;; DECOMP BEGINS

(defskelgroup skel-movie-race-bike-b race-bike-b race-bike-b-lod0-jg -1
              ((race-bike-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow race-bike-b-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-movie-race-bike-c race-bike-c race-bike-c-lod0-jg -1
              ((race-bike-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow race-bike-c-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-stdm-barrels stdm-barrels stdm-barrels-lod0-jg -1
              ((stdm-barrels-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :origin-joint-index 3
              )

(defskelgroup skel-stdm-baron-box stdm-baron-box stdm-baron-box-lod0-jg -1
              ((stdm-baron-box-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :origin-joint-index 3
              )

(defskelgroup skel-babak babak babak-lod0-jg -1
              ((babak-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :origin-joint-index 3
              )

(defpartgroup group-stdm-baron-box-thruster
  :id 921
  :linger-duration (seconds 1.5)
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 4086) (sp-item 4087) (sp-item 4088) (sp-item 4089) (sp-item 4090))
  )

(defpart 4086
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters -0.3))
    (:scale-x (meters 0.6) (meters 0.3))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0 128.0)
    (:b 0.0)
    (:a 64.0 8.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defpart 4087
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:y (meters -0.3))
    (:scale-x (meters 2.5) (meters 0.4))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0 128.0)
    (:b 0.0)
    (:a 24.0 2.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defpart 4088
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 1.0 4.0)
    (:y (meters 0) (meters -0.25))
    (:scale-x (meters 0.2) (meters 0.2))
    (:rot-z (degrees 0) 1 (degrees 180))
    (:scale-y (meters 1) (meters 0.6))
    (:r 192.0)
    (:g 64.0)
    (:b 0.0)
    (:a 0.0 16.0)
    (:vel-y (meters -0.05) (meters -0.016666668))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y (meters 0.006666667))
    (:fade-r -2.0)
    (:fade-g 2.0)
    (:fade-b 5.0)
    (:fade-a 1.28)
    (:accel-x (meters 0) (meters 0.0016666667))
    (:accel-y (meters 0.00016666666) (meters 0.0005))
    (:friction 0.94)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.085))
    (:next-launcher 4091)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 4091
  :init-specs ((:r 64.0 64.0)
    (:g 64.0 64.0)
    (:b 64.0 64.0)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b 0.0)
    (:fade-a -0.32 -0.256)
    )
  )

(defpart 4089
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.1 0.5)
    (:x (meters 0) (meters 0.1))
    (:y (meters 0.25) (meters -0.5))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 0.0 128.0)
    (:b 0.0)
    (:a 128.0)
    (:omega (degrees 0.0225) (degrees 0.0225))
    (:vel-y (meters -0.033333335) (meters -0.026666667))
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-g 0.0)
    (:accel-x (meters 0) (meters 0.0016666667))
    (:accel-y (meters 0.00016666666) (meters 0.0005))
    (:friction 0.96)
    (:timer (seconds 0.167) (seconds 0.247))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12 sp-cpuinfo-flag-14))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.1))
    (:next-launcher 4092)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 4092
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y (meters 0)))
  )

(defpart 4090
  :init-specs ((:num 0.4)
    (:rot-x 8)
    (:r 1638.4)
    (:g 1331.2)
    (:b 1433.6)
    (:vel-y (meters -0.05) (meters -0.016666668))
    (:fade-r 32.768)
    (:fade-g 28.671999)
    (:fade-b 26.623999)
    (:accel-x (meters 0) (meters 0.0016666667))
    (:friction 0.94)
    (:timer (seconds 0.335))
    (:flags (distort))
    (:next-time (seconds 0.167))
    (:next-launcher 4093)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 4093
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b -4.096))
  )

(defpartgroup group-stdm-barrel-explosion
  :id 922
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 32)
  :parts ((sp-item 4094 :flags (is-3d launch-asap) :period (seconds 3) :length (seconds 0.017) :offset 30)
    (sp-item 4095 :fade-after (meters 200) :falloff-to (meters 200) :period (seconds 3) :length (seconds 0.085))
    (sp-item 4096 :period (seconds 3) :length (seconds 0.035) :offset 10)
    (sp-item 4097 :period (seconds 3) :length (seconds 0.335) :offset 25)
    (sp-item 4098 :period (seconds 3) :length (seconds 0.117) :offset 10)
    (sp-item 4099 :period (seconds 3) :length (seconds 0.167) :offset 15)
    (sp-item 4100 :period (seconds 3) :length (seconds 0.017))
    (sp-item 4101 :period (seconds 3) :length (seconds 0.017))
    )
  )

(defpart 4094
  :init-specs ((:texture (new 'static 'texture-id :index #x2c :page #xc))
    (:num 2.0)
    (:scale-x (meters 5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:scalevel-x (meters 1))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.0625)
    (:fade-g -1.0666667)
    (:fade-b -0.26666668)
    (:fade-a -1.6)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.15))
    (:next-launcher 4102)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4102
  :init-specs ((:scalevel-x (meters 0.5)) (:scalevel-y :copy scalevel-x) (:fade-a -1.4222223))
  )

(defpart 4100
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 180))
    (:rot-x (degrees 45))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 24.0)
    (:scalevel-x (meters 0.5))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -4.266667)
    (:fade-b 0.0)
    (:fade-a 0.0)
    (:timer (seconds 0.217))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    (:next-time (seconds 0.15))
    (:next-launcher 4103)
    )
  )

(defpart 4103
  :init-specs ((:scalevel-x (meters -0.2857143))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.8285714)
    (:fade-g -3.6571429)
    (:fade-b -3.6571429)
    (:fade-a -0.6857143)
    )
  )

(defpart 4101
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 180))
    (:rot-x (degrees 45))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 16.0)
    (:scalevel-x (meters 0.13333334))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -4.266667)
    (:fade-b 0.0)
    (:fade-a 0.0)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 40960.0)
    (:next-time (seconds 0.25))
    (:next-launcher 258)
    )
  )

(defpart 4098
  :init-specs ((:texture (new 'static 'texture-id :index #x92 :page #xc))
    (:num 16.0)
    (:scale-x (meters 2.5))
    (:rot-x 4)
    (:scale-y (meters 0.1) (meters 0.2))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 96.0 32.0)
    (:omega (degrees 0.0675))
    (:vel-y (meters 0.4) (meters 0.2))
    (:fade-b -8.0)
    (:accel-y (meters -0.0033333334) (meters -0.0016666667))
    (:friction 0.9 0.08)
    (:timer (seconds 1.5) (seconds 0.997))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.05))
    (:next-launcher 4104)
    (:conerot-x (degrees 0) (degrees 140))
    (:conerot-y (degrees 0) (degrees 10000))
    )
  )

(defpart 4104
  :init-specs ((:r 255.0)
    (:g 255.0)
    (:b 0.0)
    (:fade-r -2.6133332)
    (:fade-g -2.6133332)
    (:fade-b 1.7066667)
    (:fade-a -0.096 -0.096)
    (:next-time (seconds 0.25))
    (:next-launcher 4105)
    )
  )

(defpart 4105
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0))
  )

(defpart 4106
  :init-specs ((:texture (new 'static 'texture-id :index #x34 :page #xc))
    (:num 5.0 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360) :store)
    (:scale-y (meters 8) (meters 4))
    (:r 180.0 55.0)
    (:g :copy r)
    (:b 0.0)
    (:a 0.0 32.0)
    (:vel-y (meters 0) (meters 0.1))
    (:scalevel-x (meters 0.033333335) (meters 0.13333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -5.142857)
    (:fade-b 0.0)
    (:fade-a 0.9142857)
    (:friction 0.89 0.02)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.1) (seconds 0.03))
    (:next-launcher 4107)
    (:conerot-x '*sp-temp*)
    (:conerot-radius (meters 0) (meters 2))
    )
  )

(defpart 4099
  :init-specs ((:texture (new 'static 'texture-id :index #x33 :page #xc))
    (:num 7.0 10.0)
    (:x (meters -15) (meters 19))
    (:y (meters 1) (meters 3))
    (:scale-x (meters 5) (meters 10))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 180.0 55.0)
    (:g :copy r)
    (:b 0.0)
    (:a 0.0 16.0)
    (:vel-y (meters 0) (meters 0.033333335))
    (:scalevel-x (meters 0.2) (meters 0.1))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -5.142857)
    (:fade-b 0.0)
    (:fade-a 0.9142857)
    (:friction 0.94)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.167) (seconds 0.065))
    (:next-launcher 4107)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4107
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -2.4)
    (:fade-g 0.0)
    (:fade-b 1.2)
    (:fade-a -0.21333334)
    (:next-time (seconds 0.25) (seconds 0.047))
    (:next-launcher 4108)
    )
  )

(defpart 4108
  :init-specs ((:scalevel-x (meters 0.008333334) (meters 0.008333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b 0.0)
    (:fade-a 0.0)
    (:next-time (seconds 0.835) (seconds 0.097))
    (:next-launcher 4109)
    )
  )

(defpart 4109
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.2))
  )

(defpart 4097
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #xc))
    (:num 6.0 8.0)
    (:x (meters 0) (meters 10))
    (:scale-x (meters 3) (meters 5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 0.0)
    (:a 24.0 48.0)
    (:vel-y (meters 0.4) (meters 0.13333334))
    (:scalevel-x (meters 0.013333334) (meters 0.013333334))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -3.6)
    (:fade-g -3.6)
    (:fade-b 5.1)
    (:accel-y (meters -0.00033333333) (meters -0.001))
    (:friction 0.88 0.02)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 4110)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4110
  :init-specs ((:scalevel-x (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.07)
    (:fade-g 0.07)
    (:fade-b -0.09)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 4111)
    )
  )

(defpart 4111
  :init-specs ((:fade-a -0.064 -0.053333335))
  )

(defpart 4095
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 4.0 8.0)
    (:x (meters 0) (meters 10))
    (:scale-x (meters 20.5) (meters 8))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 70.0 20.0)
    (:g 70.0 20.0)
    (:b 70.0 20.0)
    (:a 0.0 40.0)
    (:vel-y (meters 0) (meters 0.2))
    (:scalevel-x (meters 0.033333335) (meters 0.086666666))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 3.3)
    (:fade-g 3.2)
    (:fade-b -1.4)
    (:fade-a 1.76)
    (:friction 0.89)
    (:timer (seconds 2.367))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 4112)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4112
  :init-specs ((:scalevel-x (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -3.0)
    (:fade-b 0.0)
    (:fade-a -0.46666667)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 4113)
    )
  )

(defpart 4113
  :init-specs ((:fade-r -3.6) (:fade-g 0.0) (:fade-b 4.7) (:fade-a -1.0) (:next-time (seconds 0.167)) (:next-launcher 4114))
  )

(defpart 4114
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.11)
    (:fade-g -0.11)
    (:fade-b -0.47)
    (:fade-a -0.1)
    )
  )

(defpart 4096
  :init-specs ((:texture (new 'static 'texture-id :index #x31 :page #xc))
    (:num 9.0)
    (:scale-x (meters 4) (meters 8))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 1) (meters 0.5))
    (:r 235.0 20.0)
    (:g 235.0)
    (:b 0.0 20.0)
    (:a 64.0 96.0)
    (:scalevel-x (meters 0.2) (meters 0.4))
    (:fade-r -1.0)
    (:fade-g -1.0)
    (:fade-b 1.3055556)
    (:fade-a -0.512 -0.512)
    (:timer (seconds 0.835))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.6))
    (:next-launcher 4115)
    )
  )

(defpart 4115
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0))
  )

(defpartgroup group-stdm-barrel-explosion-afterglow
  :id 923
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 4116 :flags (bit6)))
  )

(defpart 4116
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0 4.0)
    (:scale-x (meters 7) (meters 2))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 32.0 16.0)
    (:b 255.0)
    (:a 16.0 8.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 glow))
    (:userdata 4096.0)
    )
  )

(defpartgroup group-stdm-bike-thruster
  :id 924
  :duration (seconds 3)
  :flags (use-local-clock unk-4)
  :bounds (static-bspherem 0 0 0 32)
  :parts ((sp-item 4117 :flags (is-3d bit7)) (sp-item 4118 :flags (is-3d bit7)) (sp-item 4119 :flags (bit7)))
  )

(defpart 4117
  :init-specs ((:texture (new 'static 'texture-id :index #x90 :page #xc))
    (:num 1.0)
    (:y (meters -0.525))
    (:z (meters -4.25))
    (:scale-x (meters 0.6))
    (:rot-x 4)
    (:scale-y (meters 2))
    (:r 128.0 128.0)
    (:g 32.0 96.0)
    (:b :copy g)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 4118
  :init-specs ((:texture (new 'static 'texture-id :index #x90 :page #xc))
    (:num 1.0)
    (:y (meters -0.525))
    (:z (meters -4.25))
    (:scale-x (meters 0.6))
    (:rot-x 4)
    (:rot-z (degrees 90))
    (:scale-y (meters 2))
    (:r 128.0 128.0)
    (:g 32.0 96.0)
    (:b :copy g)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(defpart 4119
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:y (meters -0.525))
    (:z (meters -4.5))
    (:scale-x (meters 1.25))
    (:rot-x (degrees 0.5625))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0 64.0)
    (:b 0.0)
    (:a 16.0 4.0)
    (:rotvel-z (degrees 0.3))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 2048.0)
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-stdm-trophy-bling-bling
  :id 925
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 5)
  :parts ((sp-item 4120 :flags (launch-asap bit6)))
  )

(defpart 4120
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:x (meters -0.2))
    (:y (meters 0.65))
    (:scale-x (meters 0))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 196.0)
    (:b 196.0)
    (:a 96.0)
    (:scalevel-x (meters 0.004))
    (:rotvel-z (degrees -0.6923077))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 glow left-multiply-quat))
    (:userdata 409.6)
    (:next-time (seconds 0.167))
    (:next-launcher 4121)
    )
  )

(defpart 4121
  :init-specs ((:scalevel-x (meters -0.002)) (:scalevel-y :copy scalevel-x) (:fade-a -1.92))
  )

(defpartgroup group-stdm-trophy-2-bling-bling
  :id 926
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 5)
  :parts ((sp-item 4122 :flags (launch-asap bit6)))
  )

(defpart 4122
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:x (meters -0.35))
    (:y (meters 0.9))
    (:scale-x (meters 0))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 196.0)
    (:b 196.0)
    (:a 96.0)
    (:scalevel-x (meters 0.004))
    (:rotvel-z (degrees -0.6923077))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-2 glow left-multiply-quat))
    (:userdata 409.6)
    (:next-time (seconds 0.167))
    (:next-launcher 4123)
    )
  )

(defpart 4123
  :init-specs ((:scalevel-x (meters -0.002)) (:scalevel-y :copy scalevel-x) (:fade-a -1.92))
  )

(defpartgroup group-stdm-balloon-smoke
  :id 927
  :linger-duration (seconds 2)
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 4124 :period (seconds 0.385) :length (seconds 0.167)))
  )

(defpart 4124
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 0.2)
    (:y (meters -1.5))
    (:z (meters 1))
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) 1 (degrees 180))
    (:scale-y (meters 0.25) (meters 0.25))
    (:r 136.0)
    (:g 128.0)
    (:b 128.0)
    (:a 2.0 2.0)
    (:vel-x (meters 0.0016666667))
    (:vel-y (meters -0.016666668) (meters -0.016666668))
    (:scalevel-x (meters 0.06))
    (:scalevel-y (meters 0.04))
    (:fade-a 1.28)
    (:accel-x (meters 0) (meters 0.00083333335))
    (:accel-y (meters 0.00016666666) (meters 0.0005))
    (:friction 0.94)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12 sp-cpuinfo-flag-14))
    (:next-time (seconds 0.135) (seconds 0.08))
    (:next-launcher 4125)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 4125
  :init-specs ((:fade-a -0.24 -0.256))
  )

(scene-method-16
  (new 'static 'scene
    :name "city-keira-hover-challenge-intro"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-keira-hover-challenge-intro"
    :parts 11
    :command-list '((0
        (kill "rift-rider-2")
        (send-event "gar-door-3" 'open (seconds 60) #t)
        (send-event "gar-door-4" 'open (seconds 60) #t)
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        (fadein (frame-time-30 10))
        )
      (1 (send-event "keira-highres" 'shadow-volume #f 156))
      (2
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (233
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (325
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (539
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (777
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (944
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 20480)
        )
      (1210 (fadeout (frame-time-30 30)))
      (10000
        (task-close! "stadium-board1-introduction")
        (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                             (when gp-0
                               (clear-mood-context (-> gp-0 mood-context))
                               (if #f
                                   ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                   )
                               (set! (-> gp-0 mood-func) update-mood-stadium)
                               (let ((v0-1 #t))
                                 (set! (-> gp-0 info sky) v0-1)
                                 v0-1
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '(101 233 324 457 538 645 777 850 944 1031)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "particleman"
        :level 'garage
        :art-group "skel-particleman"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "rift-rider"
        :level 'garage
        :art-group "skel-rift-rider"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "spotlight"
        :level 'garage
        :art-group "skel-spotlight"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-start-skate"
    :end-point-obj "garage-start-skate"
    :borrow '()
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-keira-hover-challenge-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-keira-hover-challenge-res"
    :parts 11
    :command-list '((0
        (task-close! "stadium-board1-resolution")
        (send-event "gar-door-3" 'open (seconds 60) #t)
        (send-event "gar-door-4" 'open (seconds 60) #t)
        (kill "rift-rider-2")
        (send-event "keira-highres" 'shadow-volume #f 156)
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        (fadein (frame-time-30 10))
        )
      (1
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (112
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (389
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (613
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (882
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (1240 (fadeout (frame-time-30 30)))
      (10000 (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                                  (when gp-0
                                    (clear-mood-context (-> gp-0 mood-context))
                                    (if #f
                                        ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                        )
                                    (set! (-> gp-0 mood-func) update-mood-stadium)
                                    (let ((v0-1 #t))
                                      (set! (-> gp-0 info sky) v0-1)
                                      v0-1
                                      )
                                    )
                                  )
                             )
                    )
             )
      )
    :cut-list '(111 325 388 471 612 805 881 1104)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "rift-rider"
        :level 'garage
        :art-group "skel-rift-rider"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "spotlight"
        :level 'garage
        :art-group "skel-spotlight"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-start-skate"
    :end-point-obj #f
    :borrow '()
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-3-race-intro"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-class-3-race-intro"
    :parts 27
    :command-list '((0
        (kill "rift-rider-2")
        (send-event "keira-highres" 'shadow-volume #f 156)
        (send-event "gar-door-3" 'open (seconds 60) #t)
        (send-event "gar-door-4" 'open (seconds 60) #t)
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        (fadein (frame-time-30 5))
        )
      (1
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (317
        (send-event "keira-highres" 'setup-spotlight-shadow 12288 12288)
        (send-event "rift-rider" 'setup-spotlight-shadow 24576 8192)
        )
      (453 (send-event "keira-highres" 'shadow #f) (kill "gar-curtain-1"))
      (3130 (fadeout (frame-time-30 30)))
      (10000
        (task-close! "stadium-race-class3-introduction")
        (kill "keira-npc-1")
        (talker-spawn "cityv177")
        (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                             (when gp-0
                               (clear-mood-context (-> gp-0 mood-context))
                               (if #f
                                   ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                   )
                               (set! (-> gp-0 mood-func) update-mood-stadium)
                               (let ((v0-1 #t))
                                 (set! (-> gp-0 info sky) v0-1)
                                 v0-1
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '(190
       316
       454
       526
       781
       825
       876
       901
       991
       1056
       1096
       1216
       1411
       1555
       1737
       1793
       1866
       1928
       2027
       2241
       2413
       2501
       2571
       2649
       2732
       2813
       2931
       3001
       3160
       )
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min 876) (901 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "krew-highres"
        :level 'lgarcsta
        :art-group "skel-krew-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sew-gold-key"
        :level 'lgarcsta
        :art-group "skel-sew-gold-key"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gar-curtain"
        :level 'garage
        :art-group "skel-gar-curtain"
        :prefix ""
        :draw-frames '((781 991) (1056 1216) (1411 1793) (1866 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "rift-rider"
        :level 'garage
        :art-group "skel-rift-rider"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "spotlight"
        :level 'garage
        :art-group "skel-spotlight"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-class3-movie"
    :end-point-obj (new 'static 'continue-point
      :name "stadium-start"
      :level #f
      :trans (new 'static 'vector :x 398456.0 :y 49137.254 :z -1674893.8 :w 1.0)
      :quat (new 'static 'vector :y -0.9913 :w 0.131)
      :camera-trans (new 'static 'vector :x 398140.62 :y 69612.75 :z -1715818.9 :w 1.0)
      :camera-rot (new 'static 'inline-array vector3s 3
        (new 'static 'vector3s :data (new 'static 'array float 3 0.9997 0.0 0.0205))
        (new 'static 'vector3s :data (new 'static 'array float 3 -0.0038 0.9819 0.1891))
        (new 'static 'vector3s :data (new 'static 'array float 3 -0.0201 -0.1892 0.9817))
        )
      :on-goto #f
      :vis-nick 'stadium
      :want (new 'static 'inline-array level-buffer-state 6
        (new 'static 'level-buffer-state :name 'stadium :display? 'display :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name 'garage :display? 'display :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name 'ctywide :display? 'display :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        )
      :want-sound (new 'static 'array symbol 3 'ctywide1 'ctywide2 'stadium1)
      )
    :borrow '((garage 0 lgarcsta special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-3-race-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-class-3-race-res"
    :parts 29
    :command-list '((0
        (task-close! "stadium-race-class3-resolution")
        (send-event "keira-highres" 'shadow #f)
        (kill "gar-door-3")
        (kill "gar-door-4")
        (blackout (time-frame 2))
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        )
      (25 (part-tracker
            "group-stdm-trophy-bling-bling"
            entity
            "gar-trophy-cc"
            joint
            "main"
            track
            #t
            duration
            (frame-time 1)
            )
          )
      (1685 (fadeout (frame-time-30 30)))
      (10000 (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                                  (when gp-0
                                    (clear-mood-context (-> gp-0 mood-context))
                                    (if #f
                                        ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                        )
                                    (set! (-> gp-0 mood-func) update-mood-stadium)
                                    (let ((v0-1 #t))
                                      (set! (-> gp-0 info sky) v0-1)
                                      v0-1
                                      )
                                    )
                                  )
                             )
                    )
             )
      )
    :cut-list '(76 131 201 271 357 455 511 601 675 771 858 906 1047 1126 1236 1351 1499 1633 1715)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min 1236) (1351 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "ashelin-highres"
        :level 'lashgrd
        :art-group "skel-ashelin-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-highres"
        :level 'lashgrd
        :art-group "skel-crimson-guard-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres"
        :level 'lashgrd
        :art-group "skel-crimson-guard-lowres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "gar-trophy-cc"
        :level 'garage
        :art-group "skel-gar-trophy-cc"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-class3-movie"
    :end-point-obj "garage-start-class3"
    :borrow '((garage 0 lashgrd special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-2-race-intro"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-class-2-race-intro"
    :parts 24
    :command-list '((0
        (send-event "gar-door-3" 'open (seconds 120) #t)
        (send-event "gar-door-4" 'open (seconds 120) #t)
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        )
      (2750 (fadeout (frame-time-30 30)))
      (10000
        (task-close! "stadium-race-class2-introduction")
        (kill "keira-npc-1")
        (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                             (when gp-0
                               (clear-mood-context (-> gp-0 mood-context))
                               (if #f
                                   ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                   )
                               (set! (-> gp-0 mood-func) update-mood-stadium)
                               (let ((v0-1 #t))
                                 (set! (-> gp-0 info sky) v0-1)
                                 v0-1
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '(100 264 376 489 819 954 1246 1343 1459 1590 1699 1920 1972 2104 2239 2450)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min 1972) (2104 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "errol-highres"
        :level 'lsamergd
        :art-group "skel-errol-highres"
        :prefix ""
        :draw-frames '((min 819) (954 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "samos-highres"
        :level 'lsamergd
        :art-group "skel-samos-highres"
        :prefix ""
        :draw-frames '((min 1699) (1920 2450))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-class3-movie"
    :end-point-obj "stadiumc-race-retry-pidax"
    :borrow '((garage 0 lsamergd special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-2-race-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-class-2-race-res"
    :parts 10
    :command-list '((0
        (task-close! "stadium-race-class2-resolution")
        (send-event "gar-door-3" 'open (seconds 60) #t)
        (send-event "gar-door-4" 'open (seconds 60) #t)
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        )
      (25 (part-tracker
            "group-stdm-trophy-2-bling-bling"
            entity
            "gar-trophy-cb"
            joint
            "main"
            track
            #t
            duration
            (frame-time 1)
            )
          )
      (1080 (fadeout (frame-time-30 30)))
      (10000 (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                                  (when gp-0
                                    (clear-mood-context (-> gp-0 mood-context))
                                    (if #f
                                        ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                        )
                                    (set! (-> gp-0 mood-func) update-mood-stadium)
                                    (let ((v0-1 #t))
                                      (set! (-> gp-0 info sky) v0-1)
                                      v0-1
                                      )
                                    )
                                  )
                             )
                    )
             )
      )
    :cut-list '(119 241 340 404 551 777 841 917 998)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min 1236) (1351 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "tess-highres"
        :level 'lgarcsta
        :art-group "skel-tess-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gar-trophy-cb"
        :level 'garage
        :art-group "skel-gar-trophy-cb"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-class3-movie"
    :end-point-obj "garage-start-class3"
    :borrow '((garage 0 lgarcsta special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-1-race-intro-a"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-39"
    :art-group "scenecamera"
    :anim "city-class-1-race-intro-a"
    :parts 17
    :command-list '((0
        (kill "gar-curtain-1")
        (apply
          ,(lambda ()
             (let ((gp-0 (level-get *level* 'stadium)))
               (when gp-0
                 (clear-mood-context (-> gp-0 mood-context))
                 (if #f
                     ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                     )
                 (set! (-> gp-0 mood-func) (the-as (function mood-context float int none) update-mood-copy-garage))
                 (set! (-> gp-0 info sky) #f)
                 #f
                 )
               )
             )
          )
        (fadein (frame-time-30 5))
        )
      (1900 (fadeout (frame-time-30 30)))
      (10000
        (task-close! "stadium-race-class1-introduction")
        (kill "keira-npc-1")
        (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                             (when gp-0
                               (clear-mood-context (-> gp-0 mood-context))
                               (if #f
                                   ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                   )
                               (set! (-> gp-0 mood-func) update-mood-stadium)
                               (let ((v0-1 #t))
                                 (set! (-> gp-0 info sky) v0-1)
                                 v0-1
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '(113 227 338 385 734 819 908 1001 1135 1327 1491 1588 1617 1792 1879)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min 733) (819 1616) (1792 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'garage
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min 1000) (1135 1490) (1588 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "samos-highres"
        :level 'lsamergd
        :art-group "skel-samos-highres"
        :prefix ""
        :draw-frames '((min 112) (227 818) (908 1490) (1588 1791) (1879 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gar-curtain"
        :level 'garage
        :art-group "skel-gar-curtain"
        :prefix ""
        :draw-frames '((min 337) (384 max))
        :scissor-frames '((385 455))
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "garage-class3-movie"
    :end-point-obj "garage-start-class3"
    :borrow '((garage 0 lsamergd special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-1-race-intro-b"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-84"
    :art-group "scenecamera"
    :anim "city-class-1-race-intro-b"
    :parts 21
    :command-list '((0
        (fadein (frame-time-30 15))
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 0 136)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 0 136)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 0 136)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 0 136)
          )
        (apply ,(lambda ()
                  (let ((gp-0 (level-get *level* 'stadium)))
                    (when gp-0
                      (clear-mood-context (-> gp-0 mood-context))
                      (if #f
                          ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                          )
                      (set! (-> gp-0 mood-func) update-mood-stadiumb)
                      (set! (-> gp-0 info sky) #f)
                      )
                    )
                  (the-as object (race-start 2 #f #t))
                  )
               )
        )
      (240
        (part-tracker
          "group-stdm-bike-thruster"
          entity
          "movie-race-bike-c"
          joint
          "main"
          track
          #t
          duration
          (frame-range 240 330)
          )
        )
      (494
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 494 650)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 494 650)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 494 650)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 494 650)
          )
        )
      (1028
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 1028 1108)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 1028 1108)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 1028 1108)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 1028 1108)
          )
        )
      (10000
        (task-close! "stadium-race-class1-introduction")
        (apply ,(lambda () (let ((gp-0 (level-get *level* 'stadium)))
                             (when gp-0
                               (clear-mood-context (-> gp-0 mood-context))
                               (if #f
                                   ((the-as (function mood-context none) #f) (-> gp-0 mood-context))
                                   )
                               (set! (-> gp-0 mood-func) update-mood-stadium)
                               (let ((v0-1 #t))
                                 (set! (-> gp-0 info sky) v0-1)
                                 v0-1
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '(330 400 441 494 571 777 842 925 1028 1108 1158 1203)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "baron-highres"
        :level 'lwidesta
        :art-group "skel-baron-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '((925 1028))
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "errol-highres"
        :level 'lwidesta
        :art-group "skel-errol-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-highres"
        :level 'lwidesta
        :art-group "skel-crimson-guard-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres"
        :level 'lwidesta
        :art-group "skel-crimson-guard-lowres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres"
        :level 'lwidesta
        :art-group "skel-crimson-guard-lowres"
        :prefix "b-"
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "movie-race-bike-b"
        :level 'stadiumd
        :art-group "skel-movie-race-bike-b"
        :prefix ""
        :draw-frames '((min 330) (400 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "movie-race-bike-c"
        :level 'stadiumd
        :art-group "skel-movie-race-bike-c"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "stdm-barrels"
        :level 'lwidesta
        :art-group "skel-stdm-barrels"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "stdm-baron-box"
        :level 'lwidesta
        :art-group "skel-stdm-baron-box"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "stadiumd-start"
    :end-point-obj #f
    :borrow '((ctywide 1 lwidesta special) (ctywide 0 lracedf special) (stadium 0 lracelit display))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-class-1-race-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-84"
    :art-group "scenecamera"
    :anim "city-class-1-race-res"
    :parts 28
    :command-list '((0 (fadein (frame-time-30 10)))
      (200
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 200 361)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 200 361)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 200 361)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 200 361)
          )
        )
      (846
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 846 981)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 846 981)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 846 981)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 846 981)
          )
        )
      (1365
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 1365 1400)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 1365 1400)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 1365 1400)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 1365 1400)
          )
        )
      (1391
        (part-tracker
          "group-stdm-bike-thruster"
          entity
          "movie-race-bike-c"
          joint
          "main"
          track
          #t
          duration
          (frame-range 1391 1475)
          )
        )
      (1441
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_a"
          track
          #t
          duration
          (frame-range 1441 1476)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_b"
          track
          #t
          duration
          (frame-range 1441 1476)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_c"
          track
          #t
          duration
          (frame-range 1441 1476)
          )
        (part-tracker
          "group-stdm-baron-box-thruster"
          entity
          "stdm-baron-box"
          joint
          "thruster_d"
          track
          #t
          duration
          (frame-range 1441 1476)
          )
        )
      (1474 (part-tracker "group-stdm-barrel-explosion" entity "particleman" joint "particleA"))
      (1486 (part-tracker "group-stdm-barrel-explosion" entity "particleman" joint "particleB"))
      (1490
        (lightning-tracker
          "lightning-shock-dim"
          from-entity
          "particleman"
          from-joint
          "particleA"
          to-entity
          "particleman"
          to-joint
          "particleB"
          duration
          (frame-range 1490 1540)
          )
        (send-event
          "particleman"
          'trans-hook
          ,(lambda ()
             (with-pp
               (let ((f30-0 (ja-aframe-num 0)))
                 (if (>= f30-0 1490.0)
                     (process-drawable-shock-effect
                       (the-as process-drawable pp)
                       (-> *lightning-spec-id-table* 1)
                       lightning-probe-callback
                       (-> *part-id-table* 166)
                       4
                       0
                       409600.0
                       )
                     )
                 (if (>= f30-0 1490.0)
                     (process-drawable-shock-effect
                       (the-as process-drawable pp)
                       (-> *lightning-spec-id-table* 1)
                       lightning-probe-callback
                       (-> *part-id-table* 166)
                       5
                       0
                       409600.0
                       )
                     )
                 )
               )
             )
          )
        )
      (1494 (part-tracker "group-stdm-barrel-explosion" entity "particleman" joint "particleC"))
      (1541
        (send-event
          "errol-highres"
          'trans-hook
          ,(lambda ()
             (with-pp
               (let ((f0-0 (ja-aframe-num 0)))
                 (when (and (>= f0-0 1541.0) (>= 1590.0 f0-0))
                   (if (zero? (rand-vu-int-count 3))
                       (process-drawable-shock-effect
                         (the-as process-drawable pp)
                         (-> *lightning-spec-id-table* 1)
                         lightning-probe-callback
                         (-> *part-id-table* 166)
                         42
                         0
                         12288.0
                         )
                       )
                   )
                 )
               )
             )
          )
        )
      (10000
        (unless (task-closed? "stadium-race-class1-race") (talker-spawn "miss009"))
        (task-close! "stadium-race-class1-race")
        )
      )
    :cut-list '(176 256 361 446 536 681 756 846 981 1031 1091 1153 1211 1291 1351 1391 1441 1476 1541 1591 1636)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "baron-highres"
        :level 'lwidesta
        :art-group "skel-baron-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '((446 680) (756 845) (1153 1211))
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "errol-highres"
        :level 'lwidesta
        :art-group "skel-errol-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-highres"
        :level 'lwidesta
        :art-group "skel-crimson-guard-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres"
        :level 'lwidesta
        :art-group "skel-crimson-guard-lowres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "movie-race-bike-b"
        :level 'stadiumd
        :art-group "skel-movie-race-bike-b"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "movie-race-bike-c"
        :level 'stadiumd
        :art-group "skel-movie-race-bike-c"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '((1390 1444))
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "stdm-barrels"
        :level 'lwidesta
        :art-group "skel-stdm-barrels"
        :prefix ""
        :draw-frames '((min 1491) (1541 1591))
        :scissor-frames '((1489 1491))
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "stdm-baron-box"
        :level 'lwidesta
        :art-group "skel-stdm-baron-box"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "palmpilot"
        :level 'lwidesta
        :art-group "skel-palmpilot"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "particleman"
        :level 'lwidesta
        :art-group "skel-particleman"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :light-index #xb
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "stadiumd-start"
    :end-point-obj "stadium-class1-res-end-movie"
    :borrow '((ctywide 1 lwidesta special) (ctywide 0 lracedf special) (stadium 0 lracelit display))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :music-delay 1500.0
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-put-hoverboard"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-63"
    :art-group "scenecamera"
    :anim "city-put-hoverboard"
    :parts 2
    :command-list '((0 (task-close! "stadium-board1-done") (fadein (frame-time (new 'static 'bfloat :data 10.0))))
      (10000
        (game-feature! board #f)
        (apply ,(lambda () (let ((gp-0 (process-spawn
                                         manipy
                                         :init manipy-init
                                         (new 'static 'vector :x 428032.0 :y -32768.0 :z -2596864.0 :w 1.0)
                                         #f
                                         (art-group-get-by-name *level* "skel-board" (the-as (pointer uint32) #f))
                                         #f
                                         0
                                         :to *entity-pool*
                                         )
                                       )
                                 )
                             (send-event (ppointer->process gp-0) 'anim-mode 'play)
                             (when gp-0
                               (set-vector! (-> (the-as process-drawable (-> gp-0 0)) root scale) 3.0 3.0 3.0 1.0)
                               (quaternion-rotate-y!
                                 (-> (the-as process-drawable (-> gp-0 0)) root quat)
                                 (-> (the-as process-drawable (-> gp-0 0)) root quat)
                                 24576.0
                                 )
                               )
                             )
                        )
               )
        )
      )
    :cut-list '()
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "board"
        :level #f
        :art-group "skel-board"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "skatea-start"
    :end-point-obj #f
    :borrow '()
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :music-delay 1500.0
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-defend-stadium-intro"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-70"
    :art-group "scenecamera"
    :anim "city-defend-stadium-intro"
    :parts 10
    :command-list '((0
        (fma-sphere (kill-once) sphere (new 'static 'vector :x 1191936.0 :y -16384.0 :z -1875968.0 :w 163840.0))
        (fadein (frame-time-30 2))
        )
      (284 (part-tracker
             "group-stdm-balloon-smoke"
             entity
             "brutter-balloon"
             joint
             "blades"
             track
             #t
             duration
             (frame-range 284 404)
             )
           )
      (1085 (fadeout (frame-time-30 2)))
      (10000 (task-close! "city-defend-stadium-introduction"))
      )
    :cut-list '(284 404 451 595 716 842)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'lkeirift
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "rift-rider"
        :level 'lkeirift
        :art-group "skel-rift-rider"
        :prefix ""
        :draw-frames '((min 595) (716 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "brutter-highres"
        :level 'stadblmp
        :art-group "skel-brutter-highres"
        :prefix ""
        :draw-frames '((min 716) (842 max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "brutter-balloon"
        :level 'stadblmp
        :art-group "skel-brutter-balloon"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :draw-seg #x1
        :no-draw-seg #x2
        )
      (new 'static 'scene-actor
        :name "samos-highres"
        :level 'stadblmp
        :art-group "skel-samos-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "youngsamos-highres"
        :level 'stadblmp
        :art-group "skel-youngsamos-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "babak"
        :level 'stadblmp
        :art-group "skel-babak"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "babak"
        :level 'stadblmp
        :art-group "skel-babak"
        :prefix "b-"
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "stadium-blimp"
    :end-point-obj "stadium-blimp"
    :borrow '((stadium 0 lkeirift special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :save #t
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-defend-stadium-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-70"
    :art-group "scenecamera"
    :anim "city-defend-stadium-res"
    :parts 4
    :command-list '((0
        (kill "brutter-balloon-1")
        (send-event "rift-rider" 'shadow #f)
        (send-event "keira-highres" 'shadow #f)
        (send-event "brutter-highres" 'shadow #f)
        (send-event "samos-highres" 'shadow #f)
        (send-event "youngsamos-highres" 'shadow #f)
        (send-event "babak" 'shadow #f)
        (send-event "b-babak" 'shadow #f)
        (fadein (frame-time (new 'static 'bfloat :data 5.0)))
        (part-tracker
          "group-stdm-balloon-smoke"
          entity
          "brutter-balloon"
          joint
          "blades"
          track
          #t
          duration
          (frame-range 0 325)
          )
        )
      (10000 (task-close! "city-defend-stadium-resolution"))
      )
    :cut-list '(116 205 325)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'stadium
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'stadium
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "keira-highres"
        :level 'lkeirift
        :art-group "skel-keira-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "rift-rider"
        :level 'lkeirift
        :art-group "skel-rift-rider"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "brutter-highres"
        :level 'stadblmp
        :art-group "skel-brutter-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "brutter-balloon"
        :level 'stadblmp
        :art-group "skel-brutter-balloon"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "samos-highres"
        :level 'stadblmp
        :art-group "skel-samos-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "youngsamos-highres"
        :level 'stadblmp
        :art-group "skel-youngsamos-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "babak"
        :level 'stadblmp
        :art-group "skel-babak"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "babak"
        :level 'stadblmp
        :art-group "skel-babak"
        :prefix "b-"
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gun"
        :level #f
        :art-group "skel-gun"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "stadium-blimp"
    :end-point-obj (new 'static 'continue-point
      :name "stadium-start"
      :level #f
      :trans (new 'static 'vector :x 1194953.1 :y -12288.0 :z -1996941.8 :w 1.0)
      :quat (new 'static 'vector :y -0.1353 :w 0.9907)
      :camera-trans (new 'static 'vector :x 1193199.6 :y 8794.932 :z -1953968.1 :w 1.0)
      :camera-rot (new 'static 'inline-array vector3s 3
        (new 'static 'vector3s :data (new 'static 'array float 3 -0.9999 0.0 -0.0103))
        (new 'static 'vector3s :data (new 'static 'array float 3 0.002 0.9804 -0.1965))
        (new 'static 'vector3s :data (new 'static 'array float 3 0.0101 -0.1965 -0.9804))
        )
      :on-goto #f
      :vis-nick 'stadium
      :want (new 'static 'inline-array level-buffer-state 6
        (new 'static 'level-buffer-state :name 'stadium :display? 'display :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name 'ctywide :display? 'display :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name 'ctygenb :display? #f :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        (new 'static 'level-buffer-state :name #f :display? #f :force-vis? #f :force-inside? #f)
        )
      :want-sound (new 'static 'array symbol 3 'ctywide1 'ctywide2 'ctywide3)
      )
    :borrow '((stadium 0 lkeirift special))
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :music-delay 1500.0
    :save #t
    )
  )

(deftype keira-npc (process-taskable)
  ()
  :heap-base #xa0
  :method-count-assert 38
  :size-assert         #x120
  :flag-assert         #x2600a00120
  )


;; WARN: Return type mismatch draw-control vs none.
(defmethod init-art! keira-npc ((obj keira-npc))
  "@see [[initialize-skeleton]]"
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-keira-highres" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (none)
  )

(defmethod get-art-elem keira-npc ((obj keira-npc))
  "Checks various things such the current actor, task status, etc to determine the right art-group data to use
@returns the appropriate [[art-element]] for the given NPC"
  (case (-> obj task actor)
    (((game-task-actor keira-stadium))
     (-> obj draw art-group data 4)
     )
    (else
      (-> obj draw art-group data 3)
      )
    )
  )
