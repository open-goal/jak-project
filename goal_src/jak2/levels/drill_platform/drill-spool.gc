;;-*-Lisp-*-
(in-package goal)

;; name: drill-spool.gc
;; name in dgo: drill-spool
;; dgos: DMI

;; DECOMP BEGINS

(defpartgroup group-drill-crane-explosion
  :id 453
  :duration (seconds 3)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 1996 :period 9600 :length 25)
    (sp-item 1997 :period 9600 :length 10 :offset 10)
    (sp-item 1998 :period 9600 :length 50 :offset 25)
    (sp-item 1999 :period 9600 :length 35 :offset 10)
    (sp-item 2000 :period 9600 :length 50 :offset 15)
    (sp-item 2001 :period 9600 :length 5)
    (sp-item 2002 :period 9600 :length 50 :offset 15)
    (sp-item 2003 :period 9600 :length 5)
    (sp-item 2004 :flags (is-3d) :period 9600 :length 5)
    )
  )

(defpart 2004
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x2c :page #xc))
    (sp-flt spt-num 8.0)
    (sp-flt spt-scale-x (meters 16))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-copy-from-other spt-g -1)
    (sp-flt spt-b 128.0)
    (sp-flt spt-a 136.0)
    (sp-flt spt-scalevel-x (meters 2))
    (sp-flt spt-rotvel-y (degrees 0.1))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -1.0625)
    (sp-flt spt-fade-g -2.125)
    (sp-flt spt-fade-b -2.1333334)
    (sp-flt spt-fade-a -3.2)
    (sp-int spt-timer 320)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14)
    (sp-int spt-next-time 40)
    (sp-launcher-by-id spt-next-launcher 2005)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 3600.0) 1.0)
    )
  )

(defpart 2005
  :init-specs ((sp-flt spt-fade-a -0.06666667))
  )

(defpart 2001
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xbb :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-flt spt-scale-x (meters 32))
    (sp-flt spt-rot-x 8192.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 96.0)
    (sp-flt spt-scalevel-x (meters 0.26666668))
    (sp-flt spt-rotvel-z (degrees 0.3))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -1.28)
    (sp-flt spt-fade-b -5.1)
    (sp-flt spt-fade-a 0.0)
    (sp-int spt-timer 65)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 122880.0)
    (sp-int spt-next-time 30)
    (sp-launcher-by-id spt-next-launcher 2006)
    )
  )

(defpart 2006
  :init-specs ((sp-flt spt-scalevel-x (meters -0.22857143))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -3.6571429)
    (sp-flt spt-fade-b 0.0)
    (sp-flt spt-fade-a -2.7428572)
    )
  )

(defpart 2003
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-scale-x (meters 120))
    (sp-flt spt-rot-x 8192.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 24.0)
    (sp-flt spt-scalevel-x (meters 0.4))
    (sp-flt spt-rotvel-z (degrees 0.3))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -4.266667)
    (sp-flt spt-fade-b -4.266667)
    (sp-flt spt-fade-a 0.0)
    (sp-int spt-timer 150)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow)
    (sp-flt spt-userdata 409600.0)
    (sp-int spt-next-time 75)
    (sp-launcher-by-id spt-next-launcher 2007)
    )
  )

(defpart 2007
  :init-specs ((sp-flt spt-scalevel-x (meters 0))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.85333335)
    (sp-flt spt-fade-g -1.7066667)
    (sp-flt spt-fade-b -1.7066667)
    (sp-flt spt-fade-a -0.64)
    )
  )

(defpart 1999
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x92 :page #xc))
    (sp-flt spt-num 16.0)
    (sp-flt spt-y (meters 0))
    (sp-flt spt-scale-x (meters 2.5))
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-scale-y (meters 0.2) (meters 0.3) 1.0)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-flt spt-omega 12.288)
    (sp-rnd-flt spt-vel-y (meters 0.53333336) (meters 0.33333334) 1.0)
    (sp-flt spt-fade-b -8.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.9 0.08 1.0)
    (sp-int-plain-rnd spt-timer 450 299 1)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int spt-next-time 15)
    (sp-launcher-by-id spt-next-launcher 2008)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 90.0))
    )
  )

(defpart 2008
  :init-specs ((sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 0.0)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -2.6133332)
    (sp-flt spt-fade-b -1.7066667)
    (sp-rnd-flt spt-fade-a -0.096 -0.096 1.0)
    (sp-int spt-next-time 75)
    (sp-launcher-by-id spt-next-launcher 2009)
    )
  )

(defpart 2009
  :init-specs ((sp-flt spt-fade-r 0.0) (sp-flt spt-fade-g 0.0) (sp-flt spt-fade-b 0.0))
  )

(defpart 2002
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x34 :page #xc))
    (sp-flt spt-num 5.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 6) (meters 8) 1.0)
    (sp-int spt-rot-x 4)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-rot-z)
      :flags (sp-flag spflag7)
      :random-rangef 655360.0
      :random-multf 1.0
      )
    (sp-rnd-flt spt-scale-y (meters 20) (meters 8) 1.0)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 16.0 16.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.1) (meters 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.26666668) (meters 0.13333334) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.36)
    (sp-flt spt-fade-b -4.24)
    (sp-flt spt-fade-a -0.13333334)
    (sp-rnd-flt spt-friction 0.92 0.02 1.0)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int spt-next-time 25)
    (sp-launcher-by-id spt-next-launcher 2010)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-conerot-x)
      :flags (sp-flag from-pointer)
      :func '*sp-temp*
      )
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 90.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 2) 1.0)
    )
  )

(defpart 2010
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.016666668) (meters 0.016666668) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.55)
    (sp-flt spt-fade-g -2.95)
    (sp-flt spt-fade-b -3.3)
    (sp-int-plain-rnd spt-next-time 30 9 1)
    (sp-launcher-by-id spt-next-launcher 2011)
    )
  )

(defpart 2011
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.008333334) (meters 0.008333334) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -1.2944444)
    (sp-flt spt-fade-g -0.7111111)
    (sp-flt spt-fade-b -0.2)
    (sp-rnd-flt spt-fade-a -0.1 -0.1 1.0)
    )
  )

(defpart 2000
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x33 :page #xc))
    (sp-func spt-birth-func 'birth-func-texture-group)
    (sp-rnd-flt spt-num 16.0 10.0 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 6) (meters 4) 1.0)
    (sp-flt spt-rot-z (degrees 0.0))
    (sp-rnd-flt spt-scale-y (meters 12.8) (meters 2.4) 1.0)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.2) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.26666668) (meters 0.2) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.36)
    (sp-flt spt-fade-b -4.24)
    (sp-flt spt-fade-a -0.32)
    (sp-flt spt-friction 0.94)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc03300)
      )
    (sp-int spt-next-time 25)
    (sp-launcher-by-id spt-next-launcher 2012)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 90.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 8) 1.0)
    )
  )

(defpart 2012
  :init-specs ((sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g 0.0)
    (sp-flt spt-fade-b 0.0)
    (sp-int-plain-rnd spt-next-time 5 19 1)
    (sp-launcher-by-id spt-next-launcher 2013)
    )
  )

(defpart 2013
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.016666668) (meters 0.016666668) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.44)
    (sp-flt spt-fade-g -2.36)
    (sp-flt spt-fade-b -2.64)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 2014)
    )
  )

(defpart 2014
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.008333334) (meters 0.008333334) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -1.2)
    (sp-flt spt-fade-g -0.7111111)
    (sp-flt spt-fade-b -0.2)
    (sp-rnd-flt spt-fade-a -0.06545454 -0.06545454 1.0)
    (sp-int-plain-rnd spt-next-time 150 29 1)
    (sp-launcher-by-id spt-next-launcher 2015)
    )
  )

(defpart 2015
  :init-specs ((sp-flt spt-fade-r 0.0) (sp-flt spt-fade-g 0.0) (sp-flt spt-fade-b 0.0) (sp-flt spt-fade-a -0.1125))
  )

(defpart 1998
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-rnd-flt spt-num 16.0 4.0 1.0)
    (sp-flt spt-x (meters 0.25))
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 4) (meters 4) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 32.0 48.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.13333334) (meters 0.8) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.02) (meters 0.02) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.18)
    (sp-flt spt-fade-b -2.12)
    (sp-rnd-flt spt-accel-y -5.4613333 -23.210667 1.0)
    (sp-rnd-flt spt-friction 0.84 0.02 1.0)
    (sp-int spt-timer 3000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 2016)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 90.0))
    (sp-rnd-flt spt-conerot-radius (meters 3) (meters 5) 1.0)
    )
  )

(defpart 2016
  :init-specs ((sp-flt spt-scalevel-x (meters 0.0016666667))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g 0.02)
    (sp-flt spt-fade-b 0.23555556)
    (sp-int-plain-rnd spt-next-time 45 14 1)
    (sp-launcher-by-id spt-next-launcher 2017)
    )
  )

(defpart 2017
  :init-specs ((sp-flt spt-fade-r -0.5543478)
    (sp-flt spt-fade-g -0.5543478)
    (sp-flt spt-fade-b -0.5543478)
    (sp-rnd-flt spt-fade-a -0.13333334 -0.10666667 1.0)
    )
  )

(defpart 1996
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 12.0 8.0 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 16.5) (meters 16) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 70.0 20.0 1.0)
    (sp-rnd-flt spt-g 70.0 20.0 1.0)
    (sp-rnd-flt spt-b 70.0 20.0 1.0)
    (sp-rnd-flt spt-a 0.0 40.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.33333334) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.033333335) (meters 0.086666666) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 3.3)
    (sp-flt spt-fade-g 3.12)
    (sp-flt spt-fade-b 1.18)
    (sp-flt spt-fade-a 1.76)
    (sp-flt spt-friction 0.89)
    (sp-int spt-timer 710)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 2018)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 90.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 16) 1.0)
    )
  )

(defpart 2018
  :init-specs ((sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.53333336)
    (sp-flt spt-fade-g -1.9666667)
    (sp-flt spt-fade-b -2.2)
    (sp-flt spt-fade-a -0.41666666)
    (sp-int-plain-rnd spt-next-time 45 14 1)
    (sp-launcher-by-id spt-next-launcher 2019)
    )
  )

(defpart 2019
  :init-specs ((sp-flt spt-scalevel-x (meters 0))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.38833332)
    (sp-flt spt-fade-g -0.21333334)
    (sp-flt spt-fade-b -0.028333334)
    (sp-flt spt-fade-a -0.38833332)
    )
  )

(defpart 1997
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x31 :page #xc))
    (sp-flt spt-num 8.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 16) (meters 16) 1.0)
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-flt spt-g 96.0)
    (sp-flt spt-b 64.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.4) (meters 0.4) 1.0)
    (sp-flt spt-fade-g 1.6)
    (sp-flt spt-fade-b 3.2)
    (sp-flt spt-fade-a -0.9142857)
    (sp-int spt-timer 90)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    )
  )

(defpartgroup group-drill-crane-dust-explosion
  :id 454
  :duration (seconds 3)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 2020 :period 9600 :length 25)
    (sp-item 2021 :period 9600 :length 10 :offset 10)
    (sp-item 2022 :period 9600 :length 100 :offset 25)
    (sp-item 2023 :period 9600 :length 35 :offset 10)
    (sp-item 2024 :period 9600 :length 50 :offset 15)
    (sp-item 2025 :period 9600 :length 50 :offset 15)
    )
  )

(defpart 2023
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xc9 :page #xc))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters -3.5) (meters 2) 1.0)
    (sp-flt spt-scale-x (meters 3.5))
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-scale-y (meters 0.3) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-flt spt-omega 12.288)
    (sp-rnd-flt spt-vel-y (meters 0.5) (meters 0.6666667) 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.9 0.08 1.0)
    (sp-int-plain-rnd spt-timer 450 299 1)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int spt-next-time 15)
    (sp-launcher-by-id spt-next-launcher 2026)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 140.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 2026
  :init-specs ((sp-rnd-flt spt-fade-a -0.096 -0.096 1.0))
  )

(defpart 2025
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x34 :page #xc))
    (sp-rnd-flt spt-num 8.0 5.0 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 13) (meters 12) 1.0)
    (sp-int spt-rot-x 4)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-rot-z)
      :flags (sp-flag spflag7)
      :random-rangef 65536.0
      :random-multf 1.0
      )
    (sp-rnd-flt spt-scale-y (meters 18) (meters 14) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 16.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.2) (meters 0.5) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.06666667) (meters 0.06666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -0.26666668)
    (sp-rnd-flt spt-friction 0.92 0.02 1.0)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int spt-next-time 25)
    (sp-launcher-by-id spt-next-launcher 2027)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-conerot-x)
      :flags (sp-flag from-pointer)
      :func '*sp-temp*
      )
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 2) 1.0)
    )
  )

(defpart 2027
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.033333335) (meters 0.033333335) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int-plain-rnd spt-next-time 30 9 1)
    (sp-launcher-by-id spt-next-launcher 2028)
    )
  )

(defpart 2028
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.016666668) (meters 0.016666668) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a -0.225 -0.225 1.0)
    )
  )

(defpart 2024
  :init-specs ((sp-func spt-birth-func 'birth-func-texture-group)
    (sp-rnd-flt spt-num 8.0 5.0 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 13) (meters 12) 1.0)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-rot-z)
      :flags (sp-flag spflag7)
      :random-rangef 655360.0
      :random-multf 1.0
      )
    (sp-rnd-flt spt-scale-y (meters 18) (meters 14) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 16.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.2) (meters 0.5) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.06666667) (meters 0.06666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -0.26666668)
    (sp-rnd-flt spt-friction 0.92 0.02 1.0)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc03300)
      )
    (sp-int spt-next-time 25)
    (sp-launcher-by-id spt-next-launcher 2027)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-conerot-x)
      :flags (sp-flag from-pointer)
      :func '*sp-temp*
      )
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 2) 1.0)
    )
  )

(defpart 2022
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-rnd-flt spt-num 6.0 8.0 1.0)
    (sp-flt spt-x (meters 0.25))
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 3) (meters 5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 48.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.33333334) (meters 0.5) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.033333335) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-accel-y -1.3653333 -9.557333 1.0)
    (sp-rnd-flt spt-friction 0.88 0.02 1.0)
    (sp-int spt-timer 3000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 2029)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    (sp-rnd-flt spt-conerot-radius (meters 5) (meters 20) 1.0)
    )
  )

(defpart 2029
  :init-specs ((sp-flt spt-scalevel-x (meters 0.016666668))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int-plain-rnd spt-next-time 45 14 1)
    (sp-launcher-by-id spt-next-launcher 2030)
    )
  )

(defpart 2030
  :init-specs ((sp-flt spt-scalevel-x (meters 0.006666667))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a -0.10666667 -0.10666667 1.0)
    )
  )

(defpart 2020
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 16.0 4.0 1.0)
    (sp-rnd-flt spt-x (meters 0) (meters 0.6) 1.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 16.5) (meters 20) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.33333334) (meters 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.06666667) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 0.32 0.32 1.0)
    (sp-rnd-flt spt-friction 0.89 0.04 1.0)
    (sp-int spt-timer 2400)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 2031)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 2031
  :init-specs ((sp-flt spt-scalevel-x (meters 0.033333335))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.0)
    (sp-int-plain-rnd spt-next-time 600 599 1)
    (sp-launcher-by-id spt-next-launcher 2032)
    )
  )

(defpart 2032
  :init-specs ((sp-flt spt-scalevel-x (meters 0.016666668))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a -0.026666667 -0.026666667 1.0)
    )
  )

(defpart 2021
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x31 :page #xc))
    (sp-flt spt-num 8.0)
    (sp-flt spt-y (meters -2.5))
    (sp-rnd-flt spt-scale-x (meters 16) (meters 16) 1.0)
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.26666668) (meters 0.33333334) 1.0)
    (sp-flt spt-fade-a -0.7111111)
    (sp-int spt-timer 90)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    )
  )

(defpartgroup group-drill-crane-trailer-small
  :id 455
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 2033))
  )

(defpart 2033
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 0.0 1.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 3) (meters 5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 3) (meters 5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.006666667) (meters 0.01) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 0.8 1.6 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -1.3653333 1.0)
    (sp-int spt-timer 650)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-int spt-next-time 20)
    (sp-launcher-by-id spt-next-launcher 2034)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters -1.5) (meters 5) 1.0)
    )
  )

(defpartgroup group-drill-crane-trailer-medium
  :id 456
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 2035))
  )

(defpart 2035
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 0.0 1.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 6) (meters 6) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 6) (meters 6) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.006666667) (meters 0.013333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 1.6 1.6 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -1.3653333 1.0)
    (sp-int spt-timer 650)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-int spt-next-time 20)
    (sp-launcher-by-id spt-next-launcher 2034)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters -1) (meters 4) 1.0)
    )
  )

(defpart 2034
  :init-specs ((sp-rnd-flt spt-fade-a -0.10666667 -0.42666668 1.0))
  )

(defpartgroup group-drill-crane-trailer-large
  :id 457
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 2036))
  )

(defpart 2036
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 0.0 1.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 12) (meters 12) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 8) (meters 8) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.01) (meters 0.02) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 1.6 2.4 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -1.3653333 1.0)
    (sp-int spt-timer 650)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-int spt-next-time 20)
    (sp-launcher-by-id spt-next-launcher 2034)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters -2) (meters 6) 1.0)
    )
  )

(deftype drill-wall (process-focusable)
  ((anim      spool-anim   :offset-assert 204)
   (art-name  string       :offset-assert 208)
   (egg-group actor-group  :offset-assert 212)
   )
  :heap-base #x60
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:methods
    (idle () _type_ :state 27)
    (hit (symbol) _type_ :state 28)
    )
  )


(defskelgroup skel-drill-wall drill-wall drill-wall-lod0-jg -1
              ((drill-wall-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :origin-joint-index 4
              )

(defstate idle (drill-wall)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (local-vars (v1-2 symbol))
    (case event-type
      (('trigger)
       (let ((v1-1 (-> self egg-group)))
         (when v1-1
           0
           (dotimes (a0-4 (-> v1-1 length))
             (when (not (logtest? (-> v1-1 data a0-4 actor extra perm status) (entity-perm-status subtask-complete)))
               (set! v1-2 #f)
               (goto cfg-10)
               )
             )
           )
         )
       (set! v1-2 #t)
       (label cfg-10)
       (when v1-2
         (logclear! (-> self mask) (process-mask actor-pause))
         (go-virtual hit (the-as symbol (if (>= arg1 1)
                                            (-> event param 0)
                                            (the-as uint #f)
                                            )
                                 )
                     )
         )
       )
      )
    )
  :code (behavior ()
    (add-process *gui-control* self (gui-channel art-load) (gui-action queue) (-> self anim name) -99.0 0)
    (until #f
      (transform-post)
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate hit (drill-wall)
  :virtual #t
  :exit (behavior ()
    (ja-abort-spooled-anim (-> self anim) (the-as art-joint-anim #f) -1)
    (none)
    )
  :trans (-> (method-of-type drill-wall idle) trans)
  :code (behavior ((arg0 symbol))
    (-> self draw bounds w)
    (let ((v1-2 (-> self root-override root-prim)))
      (set! (-> v1-2 prim-core collide-as) (collide-spec))
      (set! (-> v1-2 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self draw bounds w) 573440.0)
    (set! (-> self root-override root-prim local-sphere w) 573440.0)
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    (let* ((gp-0 (-> self draw art-group))
           (s4-0 (method-of-object gp-0 get-art-by-name-method))
           )
      (format (clear *temp-string*) "~S-end" (-> self art-name))
      (let ((gp-1 (s4-0 gp-0 *temp-string* art-joint-anim)))
        (when (not arg0)
          (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
            (when s5-1
              (let ((t9-5 (method-of-type part-tracker activate)))
                (t9-5
                  (the-as part-tracker s5-1)
                  *entity-pool*
                  (symbol->string (-> part-tracker symbol))
                  (the-as pointer #x70004000)
                  )
                )
              (let ((t9-6 run-function-in-process)
                    (a0-7 s5-1)
                    (a1-5 part-tracker-init)
                    (a2-7 (-> *part-group-id-table* 421))
                    (a3-1 0)
                    (t0-0 #f)
                    (t1-0 #f)
                    (t2-0 #f)
                    (t3-0 *launch-matrix*)
                    )
                (set! (-> t3-0 trans quad) (-> self root-override trans quad))
                ((the-as (function object object object object object object object object none) t9-6)
                 a0-7
                 a1-5
                 a2-7
                 a3-1
                 t0-0
                 t1-0
                 t2-0
                 t3-0
                 )
                )
              (-> s5-1 ppointer)
              )
            )
          (sound-play "egg-wall-break" :position (-> self root-override trans))
          (ja-play-spooled-anim (-> self anim) (ja-group) (the-as art-joint-anim gp-1) (the-as (function process-drawable symbol) false-func))
          )
        (ja-channel-set! 1)
        (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
        )
      )
    (suspend)
    (logior! (-> self mask) (process-mask sleep))
    (suspend)
    0
    (none)
    )
  :post (the-as (function none :behavior drill-wall) transform-post)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! drill-wall ((obj drill-wall) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (local-vars (r0-0 uint128) (a0-20 object) (a1-14 uint128) (sv-16 int))
  (stack-size-set! (-> obj main-thread) 512)
  (set! (-> obj mask) (logior (process-mask collectable) (-> obj mask)))
  (let ((s3-0 ((method-of-type res-lump get-property-struct)
               (-> obj entity)
               'art-name
               'interp
               -1000000000.0
               "drill-wall-1"
               (the-as (pointer res-tag) #f)
               *res-static-buf*
               )
              )
        (s4-0 (art-group-get-by-name *level* "skel-drill-wall" (the-as (pointer uint32) #f)))
        )
    (set! (-> obj art-name) (the-as string s3-0))
    (let ((s2-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
      (set! (-> s2-0 dynam) (copy *standard-dynamics* 'process))
      (set! (-> s2-0 reaction) cshape-reaction-default)
      (set! (-> s2-0 no-reaction)
            (the-as (function collide-shape-moving collide-query vector vector object) nothing)
            )
      (let ((s1-0 (new 'process 'collide-shape-prim-mesh s2-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s1-0 prim-core collide-as) (collide-spec obstacle pusher))
        (set! (-> s1-0 prim-core collide-with) (collide-spec jak player-list))
        (set! (-> s1-0 prim-core action) (collide-action solid))
        (set! (-> s1-0 transform-index) 4)
        (set-vector! (-> s1-0 local-sphere) 0.0 0.0 0.0 40960.0)
        (set! (-> s2-0 total-prims) (the-as uint 1))
        (set! (-> s2-0 root-prim) s1-0)
        )
      (pusher-init s2-0)
      (set! (-> s2-0 nav-radius) (* 0.75 (-> s2-0 root-prim local-sphere w)))
      (let ((v1-22 (-> s2-0 root-prim)))
        (set! (-> s2-0 backup-collide-as) (-> v1-22 prim-core collide-as))
        (set! (-> s2-0 backup-collide-with) (-> v1-22 prim-core collide-with))
        )
      (set! (-> obj root-override) s2-0)
      )
    (if (string= (-> obj art-name) "drill-wall-1")
        (set! (-> obj anim)
              (new 'static 'spool-anim :name "drill-wall-1" :anim-name "1-break" :parts 1 :command-list '())
              )
        (go process-drawable-art-error (the-as string s3-0))
        )
    (process-drawable-from-entity! obj arg0)
    (initialize-skeleton obj (the-as skeleton-group s4-0) (the-as pair 0))
    )
  (ja-channel-set! 1)
  (let* ((s5-1 (-> obj skel root-channel 0))
         (s4-1 (-> obj draw art-group))
         (s3-1 (method-of-object s4-1 get-art-by-name-method))
         )
    (format (clear *temp-string*) "~S-idle" (-> obj art-name))
    (set! (-> s5-1 frame-group) (the-as art-joint-anim (s3-1 s4-1 *temp-string* (the-as type #f))))
    )
  (set! sv-16 0)
  (let ((v1-35 (res-lump-data (-> obj entity) 'actor-groups pointer :tag-ptr (the-as (pointer res-tag) (& sv-16)))))
    (cond
      ((and v1-35 (begin
                    (let ((a0-21 #t))
                      (let ((a1-13 (the-as uint128 sv-16)))
                        (.pcpyud a1-14 a1-13 r0-0)
                        )
                      (let ((a1-16 (the-as int (shr (* (the-as int a1-14) 2) 49))))
                        (cmove-#f-zero a0-20 a1-16 a0-21)
                        )
                      )
                    a0-20
                    )
            )
       (set! (-> obj egg-group) (the-as actor-group (-> (the-as (pointer uint32) v1-35))))
       )
      (else
        )
      )
    )
  (cond
    ((and (-> obj entity) (logtest? (-> obj entity extra perm status) (entity-perm-status subtask-complete)))
     (logclear! (-> obj mask) (process-mask actor-pause))
     (go (method-of-object obj hit) #t)
     )
    (else
      (go (method-of-object obj idle))
      )
    )
  (none)
  )

(deftype drill-crane (process-focusable)
  ((anim      spool-anim   :offset-assert 204)
   (art-name  string       :offset-assert 208)
   (egg-group actor-group  :offset-assert 212)
   )
  :heap-base #x60
  :method-count-assert 29
  :size-assert         #xd8
  :flag-assert         #x1d006000d8
  (:methods
    (idle () _type_ :state 27)
    (hit (symbol) _type_ :state 28)
    )
  )


(defskelgroup skel-drill-crane drill-crane drill-crane-lod0-jg drill-crane-idle-ja
              ((drill-crane-lod0-mg (meters 20)) (drill-crane-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 -20 140)
              :origin-joint-index 8
              )

(defskelgroup skel-drill-crane-a drill-crane drill-crane-a-lod0-jg drill-crane-a-idle-ja
              ((drill-crane-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 200)
              :origin-joint-index 30
              )

(defskelgroup skel-drill-crane-b drill-crane drill-crane-b-lod0-jg drill-crane-b-idle-ja
              ((drill-crane-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 240)
              :origin-joint-index 30
              )

(defskelgroup skel-drill-crane-c drill-crane drill-crane-c-lod0-jg drill-crane-c-idle-ja
              ((drill-crane-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 200)
              :origin-joint-index 30
              )

(defskelgroup skel-drill-crane-d drill-crane drill-crane-d-lod0-jg drill-crane-d-idle-ja
              ((drill-crane-d-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 200)
              :origin-joint-index 29
              )

(defstate idle (drill-crane)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (local-vars (v1-2 symbol))
    (case event-type
      (('trigger)
       (let ((v1-1 (-> self egg-group)))
         (when v1-1
           0
           (dotimes (a0-5 (-> v1-1 length))
             (when (not (logtest? (-> v1-1 data a0-5 actor extra perm status) (entity-perm-status subtask-complete)))
               (set! v1-2 #f)
               (goto cfg-10)
               )
             )
           )
         )
       (set! v1-2 #t)
       (label cfg-10)
       (when v1-2
         (logclear! (-> self mask) (process-mask actor-pause))
         (go-virtual hit #f)
         )
       )
      (('die)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual hit #f)
       )
      )
    )
  :code (behavior ()
    (add-process *gui-control* self (gui-channel art-load) (gui-action queue) (-> self anim name) -99.0 0)
    (until #f
      (transform-post)
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate hit (drill-crane)
  :virtual #t
  :exit (behavior ()
    (ja-abort-spooled-anim (-> self anim) (the-as art-joint-anim #f) -1)
    (none)
    )
  :trans (-> (method-of-type drill-crane idle) trans)
  :code (behavior ((arg0 symbol))
    (-> self draw bounds w)
    (set! (-> self draw bounds w) 573440.0)
    (set! (-> self draw force-lod) 0)
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    (let ((s5-0 (get-art-by-name (-> self draw art-group) "end" art-joint-anim)))
      (when (not arg0)
        ((lambda :behavior drill-crane
           ()
           (let ((gp-0 (process-spawn
                         manipy
                         :init manipy-init
                         (-> self root-override trans)
                         (-> self entity)
                         (art-group-get-by-name *level* "skel-drill-crane-a" (the-as (pointer uint32) #f))
                         #f
                         0
                         :name "drill-crane-a"
                         :to self
                         )
                       )
                 )
             (send-event (ppointer->process gp-0) 'anim-mode 'clone-anim)
             (send-event (ppointer->process gp-0) 'prefix "a-")
             )
           (let ((gp-2 (process-spawn
                         manipy
                         :init manipy-init
                         (-> self root-override trans)
                         (-> self entity)
                         (art-group-get-by-name *level* "skel-drill-crane-b" (the-as (pointer uint32) #f))
                         #f
                         0
                         :name "drill-crane-b"
                         :to self
                         )
                       )
                 )
             (send-event (ppointer->process gp-2) 'anim-mode 'clone-anim)
             (send-event (ppointer->process gp-2) 'prefix "b-")
             )
           (let ((gp-4 (process-spawn
                         manipy
                         :init manipy-init
                         (-> self root-override trans)
                         (-> self entity)
                         (art-group-get-by-name *level* "skel-drill-crane-c" (the-as (pointer uint32) #f))
                         #f
                         0
                         :name "drill-crane-c"
                         :to self
                         )
                       )
                 )
             (send-event (ppointer->process gp-4) 'anim-mode 'clone-anim)
             (send-event (ppointer->process gp-4) 'prefix "c-")
             )
           (let ((gp-6 (process-spawn
                         manipy
                         :init manipy-init
                         (-> self root-override trans)
                         (-> self entity)
                         (art-group-get-by-name *level* "skel-drill-crane-d" (the-as (pointer uint32) #f))
                         #f
                         0
                         :name "drill-crane-d"
                         :to self
                         )
                       )
                 )
             (send-event (ppointer->process gp-6) 'anim-mode 'clone-anim)
             (send-event (ppointer->process gp-6) 'prefix "d-")
             )
           (none)
           )
         )
        (ja-play-spooled-anim (-> self anim) (ja-group) (the-as art-joint-anim s5-0) (the-as (function process-drawable symbol) false-func))
        )
      (ja-channel-set! 1)
      (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim s5-0))
      )
    (when (not arg0)
      (while (and *target* (logtest? (-> *target* focus-status) (focus-status ignore)))
        (suspend)
        )
      (while (-> self child)
        (deactivate (-> self child 0))
        )
      )
    (suspend)
    (logior! (-> self mask) (process-mask sleep))
    (suspend)
    0
    (none)
    )
  :post (the-as (function none :behavior drill-crane) transform-post)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! drill-crane ((obj drill-crane) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (local-vars (sv-16 res-tag) (sv-32 res-tag))
  (stack-size-set! (-> obj main-thread) 1024) ;; increased from 512
  (set! (-> obj mask) (logior (process-mask collectable) (-> obj mask)))
  (let ((s3-0 "drill-crane-break")
        (s4-0 (art-group-get-by-name *level* "skel-drill-crane" (the-as (pointer uint32) #f)))
        )
    (set! (-> obj art-name) s3-0)
    (let ((s3-1 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
      (set! (-> s3-1 dynam) (copy *standard-dynamics* 'process))
      (set! (-> s3-1 reaction) cshape-reaction-default)
      (set! (-> s3-1 no-reaction)
            (the-as (function collide-shape-moving collide-query vector vector object) nothing)
            )
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s3-1 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-spec obstacle pusher))
        (set! (-> s2-0 prim-core collide-with) (collide-spec jak player-list))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 transform-index) 9)
        (set-vector! (-> s2-0 local-sphere) 0.0 102400.0 0.0 327680.0)
        (set! (-> s3-1 total-prims) (the-as uint 1))
        (set! (-> s3-1 root-prim) s2-0)
        )
      (pusher-init s3-1)
      (set! (-> s3-1 nav-radius) (* 0.75 (-> s3-1 root-prim local-sphere w)))
      (let ((v1-21 (-> s3-1 root-prim)))
        (set! (-> s3-1 backup-collide-as) (-> v1-21 prim-core collide-as))
        (set! (-> s3-1 backup-collide-with) (-> v1-21 prim-core collide-with))
        )
      (set! (-> obj root-override) s3-1)
      )
    (set! (-> obj anim)
          (new 'static 'spool-anim :name "drill-crane-break" :anim-name "break" :parts 3 :command-list '())
          )
    (process-drawable-from-entity! obj arg0)
    (initialize-skeleton obj (the-as skeleton-group s4-0) (the-as pair 0))
    )
  (set! (-> obj draw force-lod) 1)
  (let ((s4-1 (-> obj root-override)))
    (set! sv-16 (new 'static 'res-tag))
    (let ((v1-28 (res-lump-data arg0 'scale-mult (pointer float) :tag-ptr (& sv-16))))
      (when v1-28
        (set! (-> s4-1 scale x) (* (-> s4-1 scale x) (-> v1-28 0)))
        (set! (-> s4-1 scale y) (* (-> s4-1 scale y) (-> v1-28 1)))
        (set! (-> s4-1 scale z) (* (-> s4-1 scale z) (-> v1-28 2)))
        )
      )
    )
  (set! sv-32 (new 'static 'res-tag))
  (let ((v1-30 (res-lump-data (-> obj entity) 'actor-groups pointer :tag-ptr (& sv-32))))
    (cond
      ((and v1-30 (nonzero? (-> sv-32 elt-count)))
       (set! (-> obj egg-group) (the-as actor-group (-> (the-as (pointer uint32) v1-30))))
       )
      (else
        )
      )
    )
  (cond
    ((or (and (-> obj entity) (logtest? (-> obj entity extra perm status) (entity-perm-status subtask-complete)))
         (task-node-closed? (game-task-node drill-eggs-resolution))
         )
     (logclear! (-> obj mask) (process-mask actor-pause))
     (go (method-of-object obj hit) #t)
     )
    (else
      (go (method-of-object obj idle))
      )
    )
  (none)
  )
