;;-*-Lisp-*-
(in-package goal)

;; name: neon-praxis-part.gc
;; name in dgo: neon-praxis-part
;; dgos: CGA

;; DECOMP BEGINS

(defpart 3596
  :init-specs ((:texture (new 'static 'texture-id :index #x13 :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.7))
    (:z (meters 9.2))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata
      :data (new 'static 'boxed-array :type object '*praxis* 0 (the binteger 146408032) (the binteger 146408064))
      )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3597
  :init-specs ((:texture (new 'static 'texture-id :index #x15 :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.7))
    (:z (meters 6.4))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis*
                       (the binteger 1)
                       (the binteger 146408096)
                       (the binteger 146408128)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3598
  :init-specs ((:texture (new 'static 'texture-id :index #x8 :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.7))
    (:z (meters 2.7))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis*
                       (the binteger 2)
                       (the binteger 146407680)
                       (the binteger 146407712)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3599
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.7))
    (:z (meters -0.7))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis*
                       (the binteger 3)
                       (the binteger 146408224)
                       (the binteger 146408256)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3600
  :init-specs ((:texture (new 'static 'texture-id :index #xb :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.5))
    (:z (meters -4.5))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis*
                       (the binteger 4)
                       (the binteger 146407776)
                       (the binteger 146407808)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3601
  :init-specs ((:texture (new 'static 'texture-id :index #x17 :page #x45d))
    (:num 1.0)
    (:x (meters 1))
    (:y (meters 0.5))
    (:z (meters -8.8))
    (:scale-x (meters 6))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 32.0 16.0)
    (:g :copy r)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis*
                       (the binteger 5)
                       (the binteger 146408160)
                       (the binteger 146408192)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3602
  :init-specs ((:texture (new 'static 'texture-id :index #xa :page #x45d))
    (:num 1.0)
    (:x (meters 0.5))
    (:y (meters 0.5))
    (:z (meters 0))
    (:scale-x (meters 24))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 8))
    (:r 255.0)
    (:g :copy r)
    (:b :copy g)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4 left-multiply-quat))
    (:rotate-y (degrees 0))
    )
  )

(defpart 3603
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 6))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata
      :data (new 'static 'boxed-array :type object '*praxis-backing* 0 (the binteger 146407968) (the binteger 146408000))
      )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3604
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 1)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3605
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 4))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 2)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3606
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 3))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 3)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3607
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 2))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 4)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3608
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 1))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 5)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3609
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 0))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 6)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3610
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -1))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 7)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3611
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -2))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 8)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3612
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -3))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 9)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3613
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -4))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 10)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3614
  :init-specs ((:texture (new 'static 'texture-id :index #x11 :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 32.0 16.0)
    (:g 0.0)
    (:b :copy r)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 11)
                       (the binteger 146407968)
                       (the binteger 146408000)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3615
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 5.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 12)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3616
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 4.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 13)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3617
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 3.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 14)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3618
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 2.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 15)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3619
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 1.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 16)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3620
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 0.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 17)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3621
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -0.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 18)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3622
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -1.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 19)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3623
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -2.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 20)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3624
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -3.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 21)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 3625
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x45d))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters -4.5))
    (:z (meters 0))
    (:scale-x (meters 32))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 32.0 16.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type object
                       '*praxis-backing*
                       (the binteger 22)
                       (the binteger 146407872)
                       (the binteger 146407904)
                       )
               )
    (:func 'sparticle-mode-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-praxis-neon
  :id 832
  :bounds (static-bspherem 0 0 0 16)
  :parts ((sp-item 3596 :flags (is-3d launch-asap bit7))
    (sp-item 3597 :flags (is-3d launch-asap bit7))
    (sp-item 3598 :flags (is-3d launch-asap bit7))
    (sp-item 3599 :flags (is-3d launch-asap bit7))
    (sp-item 3600 :flags (is-3d launch-asap bit7))
    (sp-item 3601 :flags (is-3d launch-asap bit7))
    (sp-item 3602 :flags (is-3d launch-asap bit7))
    )
  )

(define *praxis* (new 'static 'boxed-array :type object
                   (the binteger 6)
                   (new 'static 'boxed-array :type object (the binteger 1) (new 'static 'vector4w :x 63))
                   (new 'static 'boxed-array :type object (the binteger 1) (new 'static 'vector4w))
                   (new 'static 'boxed-array :type object
                     (the binteger 1)
                     (new 'static 'vector4w :x 1)
                     (new 'static 'vector4w :x 3)
                     (new 'static 'vector4w :x 7)
                     (new 'static 'vector4w :x 15)
                     (new 'static 'vector4w :x 31)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 62)
                     (new 'static 'vector4w :x 60)
                     (new 'static 'vector4w :x 56)
                     (new 'static 'vector4w :x 48)
                     (new 'static 'vector4w :x 32)
                     (new 'static 'vector4w)
                     )
                   (new 'static 'boxed-array :type object
                     (the binteger 10)
                     (new 'static 'vector4w)
                     (new 'static 'vector4w :x 1)
                     (new 'static 'vector4w :x 2)
                     (new 'static 'vector4w :x 4)
                     (new 'static 'vector4w :x 8)
                     (new 'static 'vector4w :x 16)
                     (new 'static 'vector4w :x 32)
                     (new 'static 'vector4w)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 63)
                     )
                   (new 'static 'boxed-array :type object
                     (the binteger 10)
                     (new 'static 'vector4w)
                     (new 'static 'vector4w :x 33)
                     (new 'static 'vector4w :x 51)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 30)
                     (new 'static 'vector4w :x 12)
                     (new 'static 'vector4w)
                     (new 'static 'vector4w :x 33)
                     (new 'static 'vector4w :x 51)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 63)
                     (new 'static 'vector4w :x 63)
                     )
                   )
        )

(defpartgroup group-praxis-neon-back
  :id 833
  :bounds (static-bspherem 0 0 0 16)
  :parts ((sp-item 3603 :flags (is-3d launch-asap bit7))
    (sp-item 3615 :flags (is-3d launch-asap bit7))
    (sp-item 3604 :flags (is-3d launch-asap bit7))
    (sp-item 3616 :flags (is-3d launch-asap bit7))
    (sp-item 3605 :flags (is-3d launch-asap bit7))
    (sp-item 3617 :flags (is-3d launch-asap bit7))
    (sp-item 3606 :flags (is-3d launch-asap bit7))
    (sp-item 3618 :flags (is-3d launch-asap bit7))
    (sp-item 3607 :flags (is-3d launch-asap bit7))
    (sp-item 3619 :flags (is-3d launch-asap bit7))
    (sp-item 3608 :flags (is-3d launch-asap bit7))
    (sp-item 3620 :flags (is-3d launch-asap bit7))
    (sp-item 3609 :flags (is-3d launch-asap bit7))
    (sp-item 3621 :flags (is-3d launch-asap bit7))
    (sp-item 3610 :flags (is-3d launch-asap bit7))
    (sp-item 3622 :flags (is-3d launch-asap bit7))
    (sp-item 3611 :flags (is-3d launch-asap bit7))
    (sp-item 3623 :flags (is-3d launch-asap bit7))
    (sp-item 3612 :flags (is-3d launch-asap bit7))
    (sp-item 3624 :flags (is-3d launch-asap bit7))
    (sp-item 3613 :flags (is-3d launch-asap bit7))
    (sp-item 3625 :flags (is-3d launch-asap bit7))
    (sp-item 3614 :flags (is-3d launch-asap bit7))
    )
  )

(define *praxis-backing*
  (new 'static 'boxed-array :type object
    (the binteger 23)
    (new 'static 'boxed-array :type object (the binteger 1) (new 'static 'vector4w :x #x7fffff))
    (new 'static 'boxed-array :type object (the binteger 1) (new 'static 'vector4w))
    (new 'static 'boxed-array :type object
      (the binteger 5)
      (new 'static 'vector4w :x #x400001)
      (new 'static 'vector4w :x #x600003)
      (new 'static 'vector4w :x #x700007)
      (new 'static 'vector4w :x #x78000f)
      (new 'static 'vector4w :x #x7c001f)
      (new 'static 'vector4w :x #x7e003f)
      (new 'static 'vector4w :x #x7f007f)
      (new 'static 'vector4w :x #x7f80ff)
      (new 'static 'vector4w :x #x7fc1ff)
      (new 'static 'vector4w :x #x7fe3ff)
      (new 'static 'vector4w :x #x7ff7ff)
      (new 'static 'vector4w :x #x7fffff)
      )
    (new 'static 'boxed-array :type object
      (the binteger 3)
      (new 'static 'vector4w :x #x3c00)
      (new 'static 'vector4w :x #x6600)
      (new 'static 'vector4w :x #xc300)
      (new 'static 'vector4w :x #x18180)
      (new 'static 'vector4w :x #x300c0)
      (new 'static 'vector4w :x #x60060)
      (new 'static 'vector4w :x #xc0030)
      (new 'static 'vector4w :x #x180018)
      (new 'static 'vector4w :x #x30000c)
      (new 'static 'vector4w :x #x600006)
      )
    (new 'static 'boxed-array :type object
      (the binteger 3)
      (new 'static 'vector4w :x #x8008)
      (new 'static 'vector4w :x #x200100)
      (new 'static 'vector4w :x #x4002)
      (new 'static 'vector4w :x #x420400)
      (new 'static 'vector4w :x #x80040)
      (new 'static 'vector4w :x #x2004)
      (new 'static 'vector4w :x #x100800)
      (new 'static 'vector4w :x #x10020)
      (new 'static 'vector4w :x #x40081)
      (new 'static 'vector4w :x #x1210)
      )
    (new 'static 'boxed-array :type object
      (the binteger 5)
      (new 'static 'vector4w :x 96)
      (new 'static 'vector4w :x #xf0)
      (new 'static 'vector4w :x #x1f8)
      (new 'static 'vector4w :x #x3fc)
      (new 'static 'vector4w :x #x7fe)
      (new 'static 'vector4w :x #xfff)
      )
    (new 'static 'boxed-array :type object
      (the binteger 5)
      (new 'static 'vector4w :x #x111000)
      (new 'static 'vector4w :x #x222000)
      (new 'static 'vector4w :x #x444000)
      (new 'static 'vector4w :x #x88000)
      )
    (new 'static 'boxed-array :type object
      (the binteger 15)
      (new 'static 'vector4w :x #x7ff000)
      (new 'static 'vector4w :x #xfff)
      )
    )
  )

(define *city-neon-praxis-group-ids* (new 'static 'boxed-array :type int32 #x341 #x340))

(deftype city-neon-praxis (process-drawable)
  ((rot                 vector                   :inline :offset-assert 208)
   (master-enable       uint32                           :offset-assert 224)
   (unknown-k1jn23j1n23 uint32                   3       :offset-assert 228)
   (praxis-mode         uint32                           :offset-assert 240)
   (back-mode           uint32                           :offset-assert 244)
   (praxis-counter      int32                            :offset-assert 248)
   (back-counter        int32                            :offset-assert 252)
   (parts               sparticle-launch-control 2       :offset-assert 256)
   )
  :heap-base #x90
  :method-count-assert 22
  :size-assert         #x108
  :flag-assert         #x1600900108
  (:methods
    (idle () _type_ :state 20)
    (city-neon-praxis-method-21 (_type_) none 21)
    )
  )


(defmethod deactivate city-neon-praxis ((obj city-neon-praxis))
  (dotimes (s5-0 2)
    (let ((a0-1 (-> obj parts s5-0)))
      (if (nonzero? a0-1)
          (kill-and-free-particles a0-1)
          )
      )
    )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

;; WARN: Return type mismatch process-drawable vs city-neon-praxis.
(defmethod relocate city-neon-praxis ((obj city-neon-praxis) (arg0 int))
  (dotimes (v1-0 2)
    (if (nonzero? (-> obj parts v1-0))
        (&+! (-> obj parts v1-0) arg0)
        )
    )
  (the-as city-neon-praxis ((method-of-type process-drawable relocate) obj arg0))
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod city-neon-praxis-method-21 city-neon-praxis ((obj city-neon-praxis))
  (+! (-> obj parts 1 state-counter) 1)
  (when (!= (-> obj parts 1 state-mode 0) (-> obj praxis-mode))
    (set! (-> obj parts 1 state-mode 0) (-> obj praxis-mode))
    (set! (-> obj parts 1 state-counter) (the-as uint 0))
    0
    )
  (+! (-> obj parts 0 state-counter) 1)
  (when (!= (-> obj parts 0 state-mode 0) (-> obj back-mode))
    (set! (-> obj parts 0 state-mode 0) (-> obj back-mode))
    (set! (-> obj parts 0 state-counter) (the-as uint 0))
    0
    )
  (let ((s5-0 (-> obj master-enable))
        (s4-0 (new 'stack-no-clear 'vector))
        (s3-0 (new 'stack-no-clear 'vector))
        (f30-0 (-> obj rot y))
        )
    (set-vector! s4-0 (* 3276.8 (cos (- 49152.0 f30-0))) 0.0 (* 3276.8 (sin (- 49152.0 f30-0))) 1.0)
    (vector-! s3-0 (camera-pos) (-> obj root trans))
    (when (< (vector-dot s4-0 s3-0) 0.0)
      (vector-negate! s4-0 s4-0)
      (set! f30-0 (+ 32768.0 f30-0))
      )
    (vector+! s4-0 s4-0 (-> obj root trans))
    (dotimes (s3-1 2)
      (when (logtest? s5-0 1)
        (let ((s2-3 (-> obj parts s3-1)))
          (matrix-rotate-y! (-> s2-3 origin) (+ 16384.0 f30-0))
          (spawn s2-3 s4-0)
          )
        )
      (set! s5-0 (shr s5-0 1))
      )
    )
  (none)
  )

(defstate idle (city-neon-praxis)
  :virtual #t
  :code (behavior ()
    (until #f
      (when (<= (-> self praxis-counter) 0)
        (set! (-> self praxis-mode) (the-as uint (rand-vu-int-count 5)))
        (let ((v0-1 (rand-vu-int-range 3 6))
              (a0-3 (the-as (object object) (-> *praxis* (+ (-> self praxis-mode) 1))))
              )
          (set! (-> self praxis-counter)
                (* v0-1 (* (+ (-> (the-as (pointer int32) a0-3) 0) -1)
                           (the-as int (/ (the-as int (-> (the-as (array object) a0-3) 0)) 8))
                           )
                   )
                )
          )
        (while (< (-> self praxis-counter) 120)
          (set! (-> self praxis-counter) (* (-> self praxis-counter) 2))
          )
        )
      (+! (-> self praxis-counter) -1)
      (when (<= (-> self back-counter) 0)
        (set! (-> self back-mode) (the-as uint (rand-vu-int-count 8)))
        (let ((v0-3 (rand-vu-int-range 3 6))
              (a0-9 (the-as (object object) (-> *praxis-backing* (+ (-> self back-mode) 1))))
              )
          (set! (-> self back-counter) (* v0-3 (* (+ (-> (the-as (pointer int32) a0-9) 0) -1)
                                                  (the-as int (/ (the-as int (-> (the-as (array object) a0-9) 0)) 8))
                                                  )
                                          )
                )
          )
        (while (< (-> self back-counter) 120)
          (set! (-> self back-counter) (* (-> self back-counter) 2))
          )
        )
      (+! (-> self back-counter) -1)
      (city-neon-praxis-method-21 self)
      (suspend)
      )
    #f
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! city-neon-praxis ((obj city-neon-praxis) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause enemy))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (set! (-> obj master-enable) (the-as uint -1))
  (set! (-> obj praxis-mode) (the-as uint (rand-vu-int-count 5)))
  (set! (-> obj back-mode) (the-as uint (rand-vu-int-count 8)))
  (-> obj rot y)
  (let ((f0-1 16384.0))
    (set! (-> obj rot y) f0-1)
    (quaternion-vector-angle! (-> obj root quat) (new 'static 'vector :y 1.0 :w 1.0) f0-1)
    )
  (let ((s5-1 (new 'stack-no-clear 'vector)))
    (vector-z-quaternion! s5-1 (-> obj root quat))
    (vector-normalize! s5-1 -4096.0)
    (vector+! (-> obj root trans) (-> obj root trans) s5-1)
    )
  (let ((s5-2 *city-neon-praxis-group-ids*))
    (dotimes (s4-0 2)
      (set! (-> obj parts s4-0) (create-launch-control (-> *part-group-id-table* (-> s5-2 s4-0)) obj))
      )
    )
  (go (method-of-object obj idle))
  (none)
  )
