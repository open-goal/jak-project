;;-*-Lisp-*-
(in-package goal)

;; name: onin-game.gc
;; name in dgo: onin-game
;; dgos: ONINTENT

;; DECOMP BEGINS

(deftype onin-game-event (structure)
  ((min-count  uint16  :offset-assert   0)
   (max-count  uint16  :offset-assert   2)
   (min-event  uint16  :offset-assert   4)
   (max-event  uint16  :offset-assert   6)
   (wave-delay uint16  :offset-assert   8)
   (min-wave   uint16  :offset-assert  10)
   (max-wave   uint16  :offset-assert  12)
   (gravity    meters  :offset-assert  16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


(define *onin-game-data* (new 'static 'boxed-array :type object
                           (new 'static 'inline-array onin-game-event 21
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x190
                               :min-event #x1770
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #xbb8
                               :max-wave #xbb8
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x1
                               :min-event #x12c
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -3)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x5
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x1
                               :min-event #x4b
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x6
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #xe1
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x5
                               :max-count #x7
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x96
                               :max-event #xe1
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x6
                               :max-count #x8
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x3
                               :min-event #x12c
                               :max-event #x177
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x5
                               :min-event #x12c
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x3
                               :min-event #xe1
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x7
                               :max-count #x9
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x4
                               :min-event #x177
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x8
                               :max-count #xa
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x4
                               :min-event #x12c
                               :max-event #x177
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x9
                               :max-count #xb
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x78
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #xa
                               :max-count #xc
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x4b
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :max-count #xc
                               :min-event #x12c
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #xbb8
                               :max-wave #xbb8
                               :gravity (meters -2)
                               )
                             )
                           (new 'static 'inline-array onin-game-event 21
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x3e8
                               :min-event #x1770
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #xbb8
                               :max-wave #xbb8
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x1
                               :min-event #x12c
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -3)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x5
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x1
                               :min-event #x4b
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x6
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #xe1
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x5
                               :max-count #x7
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x96
                               :max-event #xe1
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x6
                               :max-count #x8
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x3
                               :min-event #x12c
                               :max-event #x177
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x1
                               :max-count #x5
                               :min-event #x12c
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x3
                               :max-count #x3
                               :min-event #xe1
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x7
                               :max-count #x9
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x4
                               :min-event #x177
                               :max-event #x1c2
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x8
                               :max-count #xa
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x4
                               :max-count #x4
                               :min-event #x12c
                               :max-event #x177
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x9
                               :max-count #xb
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x78
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :min-count #xa
                               :max-count #xc
                               :min-event #x258
                               :max-event #x384
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -1)
                               )
                             (new 'static 'onin-game-event
                               :min-count #x2
                               :max-count #x2
                               :min-event #x4b
                               :max-event #x96
                               :wave-delay #x12c
                               :min-wave #x1194
                               :max-wave #x1194
                               :gravity (meters -2)
                               )
                             (new 'static 'onin-game-event
                               :max-count #xc
                               :min-event #x12c
                               :max-event #x12c
                               :wave-delay #x12c
                               :min-wave #xbb8
                               :max-wave #xbb8
                               :gravity (meters -2)
                               )
                             )
                           )
        )

(defpartgroup group-onin-bubble-triangle
  :id 799
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3484 :flags (bit6)) (sp-item 3485) (sp-item 3486) (sp-item 3487) (sp-item 3488 :flags (bit6)))
  )

(defpart 3485
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.33)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.18) (meters -0.02))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3489)
    (:conerot-z (degrees 0))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

(defpart 3486
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.33)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3489)
    (:conerot-z (degrees 30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

(defpart 3487
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.33)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3489)
    (:conerot-z (degrees -30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

(defpart 3489
  :init-specs ((:r 0.0)
    (:g 214.0)
    (:b 32.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 3490)
    )
  )

(defpart 3490
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 3491))
  )

(defpart 3491
  :init-specs ((:r 0.0) (:g 214.0) (:b 32.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 3490))
  )

(defpart 3484
  :init-specs ((:texture (new 'static 'texture-id :index #xb :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 3488
  :init-specs ((:texture (new 'static 'texture-id :index #xc :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.26))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

(defpartgroup group-onin-bubble-circle
  :id 800
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3492 :flags (bit6)) (sp-item 3493) (sp-item 3494 :flags (bit6)))
  )

(defpart 3493
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3495)
    (:conerot-z (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

(defpart 3495
  :init-specs ((:r 255.0)
    (:g 8.0)
    (:b 32.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 3496)
    )
  )

(defpart 3496
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 3497))
  )

(defpart 3497
  :init-specs ((:r 255.0) (:g 8.0) (:b 32.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 3496))
  )

(defpart 3492
  :init-specs ((:texture (new 'static 'texture-id :index #x7 :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 3494
  :init-specs ((:texture (new 'static 'texture-id :index #x8 :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.26))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

(defpartgroup group-onin-bubble-square
  :id 801
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3498 :flags (bit6))
    (sp-item 3499)
    (sp-item 3500)
    (sp-item 3501)
    (sp-item 3502)
    (sp-item 3503 :flags (bit6))
    )
  )

(defpart 3499
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.25)
    (:x (meters 0.08) (meters 0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3504)
    )
  )

(defpart 3500
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.25)
    (:x (meters -0.08) (meters -0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3504)
    )
  )

(defpart 3501
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.25)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.08) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3504)
    )
  )

(defpart 3502
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.25)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters 0.08) (meters 0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3504)
    )
  )

(defpart 3504
  :init-specs ((:r 255.0)
    (:g 0.0)
    (:b 128.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 3505)
    )
  )

(defpart 3505
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 3506))
  )

(defpart 3506
  :init-specs ((:r 255.0) (:g 0.0) (:b 128.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 3505))
  )

(defpart 3498
  :init-specs ((:texture (new 'static 'texture-id :index #x9 :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 3503
  :init-specs ((:texture (new 'static 'texture-id :index #xa :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.26))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

(defpartgroup group-onin-bubble-x
  :id 802
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3507 :flags (bit6)) (sp-item 3508) (sp-item 3509) (sp-item 3510 :flags (bit6)))
  )

(defpart 3508
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.5)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3511)
    (:conerot-z (degrees 45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

(defpart 3509
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.5)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 3511)
    (:conerot-z (degrees -45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

(defpart 3511
  :init-specs ((:r 48.0)
    (:g 64.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 3512)
    )
  )

(defpart 3512
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 3513))
  )

(defpart 3513
  :init-specs ((:r 48.0) (:g 64.0) (:b 255.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 3512))
  )

(defpart 3507
  :init-specs ((:texture (new 'static 'texture-id :index #xd :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.2))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 3510
  :init-specs ((:texture (new 'static 'texture-id :index #xe :page #x40b))
    (:num 1.0)
    (:scale-x (meters 0.26))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

(defpartgroup group-onin-bubble-pop-triangle
  :id 803
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3514) (sp-item 3515) (sp-item 3516) (sp-item 3517 :flags (bit6)))
  )

(defpart 3514
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 21.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.18) (meters -0.02))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3489)
    (:conerot-z (degrees 0))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

(defpart 3515
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 21.0)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3489)
    (:conerot-z (degrees 30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

(defpart 3516
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 21.0)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3489)
    (:conerot-z (degrees -30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

(defpart 3517
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r -6.375)
    (:fade-g -1.025)
    (:fade-b -5.575)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-pop-circle
  :id 804
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3518) (sp-item 3519 :flags (bit6)))
  )

(defpart 3518
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 64.0)
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3495)
    (:conerot-z (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

(defun birth-func-onin-bubble-pop ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (let* ((a0-1 (-> arg4 control))
         (v1-1 (vector-! (new 'stack-no-clear 'vector) (-> arg2 x-y-z-sx) (-> a0-1 origin trans)))
         )
    (set! (-> arg1 vel-sxvel x) (* 0.083333336 (-> v1-1 x)))
    (set! (-> arg1 vel-sxvel y) (* 0.083333336 (-> v1-1 y)))
    )
  0
  (none)
  )

(defpart 3519
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g -6.1)
    (:fade-b -4.6)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-pop-square
  :id 805
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3520) (sp-item 3521) (sp-item 3522) (sp-item 3523) (sp-item 3524 :flags (bit6)))
  )

(defpart 3520
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 16.0)
    (:x (meters 0.08) (meters 0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3504)
    )
  )

(defpart 3521
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 16.0)
    (:x (meters -0.08) (meters -0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3504)
    )
  )

(defpart 3522
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 16.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.08) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3504)
    )
  )

(defpart 3523
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 16.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters 0.08) (meters 0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3504)
    )
  )

(defpart 3524
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b -6.375)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-pop-x
  :id 806
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3525) (sp-item 3526) (sp-item 3527 :flags (bit6)))
  )

(defpart 3525
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 32.0)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3511)
    (:conerot-z (degrees 45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

(defpart 3526
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-pop)
    (:num 32.0)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 3511)
    (:conerot-z (degrees -45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

(defpart 3527
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g -5.175)
    (:fade-b -4.9)
    (:fade-a 0.0)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-birth-triangle
  :id 807
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3528) (sp-item 3529 :flags (bit6)))
  )

(defpart 3528
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 214.0)
    (:b 16.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

(defpart 3529
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 3530)
    )
  )

(defpart 3530
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -6.375)
    (:fade-b -3.2)
    (:fade-a -6.375)
    )
  )

(defpartgroup group-onin-bubble-birth-circle
  :id 808
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3531) (sp-item 3532 :flags (bit6)))
  )

(defpart 3531
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 8.0)
    (:b 32.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

(defun birth-func-onin-bubble-birth-pop ((arg0 sparticle-system)
                                (arg1 sparticle-cpuinfo)
                                (arg2 sprite-vec-data-3d)
                                (arg3 sparticle-launcher)
                                (arg4 sparticle-launch-state)
                                )
  (let* ((a0-1 (-> arg4 control))
         (v1-1 (vector-! (new 'stack-no-clear 'vector) (-> arg2 x-y-z-sx) (-> a0-1 origin trans)))
         )
    (set! (-> arg1 vel-sxvel x) (* -0.008333334 (-> v1-1 x)))
    (set! (-> arg1 vel-sxvel y) (* -0.008333334 (-> v1-1 y)))
    (set! (-> arg1 vel-sxvel z) (* -0.008333334 (-> v1-1 z)))
    )
  0
  (none)
  )

(defpart 3532
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 3533)
    )
  )

(defpart 3533
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -6.1)
    (:fade-b -4.6)
    (:fade-a -6.375)
    )
  )

(defpartgroup group-onin-bubble-birth-square
  :id 809
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3534) (sp-item 3535 :flags (bit6)))
  )

(defpart 3534
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 64.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

(defpart 3535
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 3536)
    )
  )

(defpart 3536
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -6.375)
    (:fade-g -1.025)
    (:fade-b -5.6)
    (:fade-a -6.375)
    )
  )

(defpartgroup group-onin-bubble-birth-x
  :id 810
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3537) (sp-item 3538 :flags (bit6)))
  )

(defpart 3537
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-onin-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 48.0)
    (:g 64.0)
    (:b 255.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.646875)
    (:fade-g 0.6125)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

(defpart 3538
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 3539)
    )
  )

(defpart 3539
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -6.375)
    )
  )

(defpartgroup group-onin-bubble-land-triangle
  :id 811
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3540 :flags (bit6)) (sp-item 3541 :flags (is-3d bit6)))
  )

(defpart 3541
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x40b))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 214.0)
    (:b 16.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 3542)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3540
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-land-circle
  :id 812
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3543 :flags (bit6)) (sp-item 3544 :flags (is-3d bit6)))
  )

(defpart 3544
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x40b))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 4.0)
    (:b 16.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 3542)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3543
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpartgroup group-onin-bubble-land-square
  :id 813
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3545 :flags (bit6)) (sp-item 3546 :flags (is-3d bit6)))
  )

(defpart 3545
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(defpart 3546
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x40b))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 3542)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-onin-bubble-land-x
  :id 814
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 3547 :flags (bit6)) (sp-item 3548 :flags (is-3d bit6)))
  )

(defpart 3548
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x40b))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 24.0)
    (:g 32.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.067) (seconds 0.047))
    (:next-launcher 3542)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 3542
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y (meters 0)) (:fade-a -0.8))
  )

(defpart 3547
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

(deftype onin-game-bubble (process-drawable)
  ((bubble-type       int32       :offset-assert 200)
   (bubble-start-time time-frame  :offset-assert 208)
   (gravity           meters      :offset-assert 216)
   (dead?             symbol      :offset-assert 220)
   (angle             float       :offset-assert 224)
   (height            float       :offset-assert 228)
   )
  :heap-base #x70
  :method-count-assert 22
  :size-assert         #xe8
  :flag-assert         #x16007000e8
  (:methods
    (idle () _type_ :state 20)
    (fall () _type_ :state 21)
    )
  )


(defstate idle (onin-game-bubble)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('die)
       (go empty-state)
       )
      (('attack)
       (if (-> event param 0)
           (go empty-state)
           )
       )
      )
    )
  :code (behavior ()
    (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-0
        (let ((t9-1 (method-of-type part-tracker activate)))
          (t9-1
            (the-as part-tracker gp-0)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let* ((t9-2 run-function-in-process)
               (a0-2 gp-0)
               (a1-2 part-tracker-init)
               (v1-5 (-> self bubble-type))
               (a2-4 (cond
                       ((zero? v1-5)
                        (-> *part-group-id-table* 807)
                        )
                       ((= v1-5 1)
                        (-> *part-group-id-table* 808)
                        )
                       ((= v1-5 2)
                        (-> *part-group-id-table* 810)
                        )
                       (else
                         (-> *part-group-id-table* 809)
                         )
                       )
                     )
               (a3-1 0)
               (t0-0 #f)
               (t1-0 #f)
               (t2-0 #f)
               (t3-0 *launch-matrix*)
               )
          (set! (-> t3-0 trans quad) (-> self root trans quad))
          ((the-as (function object object object object object object object object none) t9-2)
           a0-2
           a1-2
           a2-4
           a3-1
           t0-0
           t1-0
           t2-0
           t3-0
           )
          )
        (-> gp-0 ppointer)
        )
      )
    (let ((gp-1 (current-time)))
      (until (>= (- (current-time) gp-1) (seconds 0.25))
        (suspend)
        )
      )
    (go-virtual fall)
    (none)
    )
  )

(defstate fall (onin-game-bubble)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('attack)
       (when (not (-> self dead?))
         (sound-play "onin-pop")
         (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
           (when gp-1
             (let ((t9-3 (method-of-type part-tracker activate)))
               (t9-3
                 (the-as part-tracker gp-1)
                 *entity-pool*
                 (symbol->string (-> part-tracker symbol))
                 (the-as pointer #x70004000)
                 )
               )
             (let* ((t9-4 run-function-in-process)
                    (a0-6 gp-1)
                    (a1-4 part-tracker-init)
                    (v1-8 (-> self bubble-type))
                    (a2-6 (cond
                            ((zero? v1-8)
                             (-> *part-group-id-table* 803)
                             )
                            ((= v1-8 1)
                             (-> *part-group-id-table* 804)
                             )
                            ((= v1-8 2)
                             (-> *part-group-id-table* 806)
                             )
                            (else
                              (-> *part-group-id-table* 805)
                              )
                            )
                          )
                    (a3-3 0)
                    (t0-1 #f)
                    (t1-1 #f)
                    (t2-1 #f)
                    (t3-0 *launch-matrix*)
                    )
               (set! (-> t3-0 trans quad) (-> self root trans quad))
               ((the-as (function object object object object object object object object none) t9-4)
                a0-6
                a1-4
                a2-6
                a3-3
                t0-1
                t1-1
                t2-1
                t3-0
                )
               )
             (-> gp-1 ppointer)
             )
           )
         (go empty-state)
         )
       )
      (('die)
       (set! (-> self dead?) #t)
       (go empty-state)
       )
      )
    )
  :enter (behavior ()
    (set-vector!
      (-> self root transv)
      (-> self angle)
      (- (sqrtf (* 2.0 (-> self gravity) (-> self height))) (* 0.008333334 (- (-> self gravity))))
      819.2
      1.0
      )
    (none)
    )
  :code (behavior ()
    (while (and (not (and (< (-> self root transv y) 0.0) (< (-> self root trans y) 36044.8))) (not (-> self dead?)))
      (suspend)
      )
    (set! (-> self root trans y) 35799.04)
    (set! (-> self dead?) #t)
    (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-0
        (let ((t9-1 (method-of-type part-tracker activate)))
          (t9-1
            (the-as part-tracker gp-0)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let* ((t9-2 run-function-in-process)
               (a0-2 gp-0)
               (a1-2 part-tracker-init)
               (v1-16 (-> self bubble-type))
               (a2-4 (cond
                       ((zero? v1-16)
                        (-> *part-group-id-table* 811)
                        )
                       ((= v1-16 1)
                        (-> *part-group-id-table* 812)
                        )
                       ((= v1-16 2)
                        (-> *part-group-id-table* 814)
                        )
                       (else
                         (-> *part-group-id-table* 813)
                         )
                       )
                     )
               (a3-1 0)
               (t0-0 #f)
               (t1-0 #f)
               (t2-0 #f)
               (t3-0 *launch-matrix*)
               )
          (set! (-> t3-0 trans quad) (-> self root trans quad))
          ((the-as (function object object object object object object object object none) t9-2)
           a0-2
           a1-2
           a2-4
           a3-1
           t0-0
           t1-0
           t2-0
           t3-0
           )
          )
        (-> gp-0 ppointer)
        )
      )
    (send-event (ppointer->process (-> self parent)) 'done)
    (while (not (and (< (-> self root transv y) 0.0) (< (-> self root trans y) 31948.8)))
      (suspend)
      )
    (none)
    )
  :post (behavior ()
    (+! (-> self root transv y) (* (-> self gravity) (-> self clock seconds-per-frame)))
    (set! (-> self root transv x) (* 0.999 (-> self root transv x)))
    (vector-v+! (-> self root trans) (-> self root trans) (-> self root transv))
    (spawn (-> self part) (-> self root trans))
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior onin-game-bubble-init onin-game-bubble ((arg0 vector) (arg1 int) (arg2 meters) (arg3 float) (arg4 float))
  "TODO - bubble type enum"
  (sound-play "onin-launch")
  (set! (-> self bubble-start-time) (current-time))
  (set! (-> self bubble-type) arg1)
  (set! (-> self gravity) arg2)
  (set! (-> self angle) arg3)
  (set! (-> self height) arg4)
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self dead?) #f)
  (set! (-> self part) (create-launch-control
                         (cond
                           ((zero? arg1)
                            (-> *part-group-id-table* 799)
                            )
                           ((= arg1 1)
                            (-> *part-group-id-table* 800)
                            )
                           ((= arg1 2)
                            (-> *part-group-id-table* 802)
                            )
                           (else
                             (-> *part-group-id-table* 801)
                             )
                           )
                         self
                         )
        )
  (set! (-> self event-hook) (-> (method-of-type onin-game-bubble idle) event))
  (go-virtual idle)
  (none)
  )

(deftype onin-game (process-drawable)
  ((wave            int32                           :offset-assert 200)
   (event           int32                           :offset-assert 204)
   (wave-time       time-frame                      :offset-assert 208)
   (wave-delay-time time-frame                      :offset-assert 216)
   (wave-length     uint64                          :offset-assert 224)
   (event-time      time-frame                      :offset-assert 232)
   (event-length    uint64                          :offset-assert 240)
   (hud-score       handle                          :offset-assert 248)
   (hud-goal        handle                          :offset-assert 256)
   (hud-miss        handle                          :offset-assert 264)
   (score           float                           :offset-assert 272)
   (score-time      time-frame                      :offset-assert 280)
   (game            (inline-array onin-game-event)  :offset-assert 288)
   (miss-max        int32                           :offset-assert 292)
   (miss-count      int32                           :offset-assert 296)
   (point-win       float                           :offset-assert 300)
   (game-start-time time-frame                      :offset-assert 304)
   (last-type       int32                           :offset-assert 312)
   (current-bonus   float                           :offset-assert 316)
   (last-angle      float                           :offset-assert 320)
   (wave-start-miss int32                           :offset-assert 324)
   )
  :heap-base #xd0
  :method-count-assert 28
  :size-assert         #x148
  :flag-assert         #x1c00d00148
  (:methods
    (hide () _type_ :state 20)
    (wait-for-start () _type_ :state 21)
    (active (symbol) _type_ :state 22)
    (lose (symbol) _type_ :state 23)
    (win () _type_ :state 24)
    (onin-game-method-25 (_type_) none 25)
    (onin-game-method-26 (_type_) none 26)
    (onin-game-method-27 (_type_ int) none 27)
    )
  )


;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 96 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 112 mismatch: defined as size 4, got size 16
(defmethod onin-game-method-25 onin-game ((obj onin-game))
  (local-vars
    (v0-18 int)
    (sv-32 process)
    (sv-48 (function vector int meters float float none :behavior onin-game-bubble))
    (sv-64 vector)
    (sv-80 int)
    (sv-96 meters)
    (sv-112 float)
    )
  (when (>= (- (current-time) (-> obj game-start-time)) (seconds 2))
    (let ((s5-0 (-> obj game (-> obj wave))))
      (when (>= (- (current-time) (the-as int (-> obj wave-length))) (-> obj wave-time))
        (let ((s4-0 (-> obj child)))
          (while s4-0
            (if (type? (ppointer->process s4-0) onin-game-bubble)
                (goto cfg-58)
                )
            (set! s4-0 (-> s4-0 0 brother))
            )
          )
        (if (zero? (-> obj wave-delay-time))
            (set! (-> obj wave-delay-time) (current-time))
            )
        (if (< (- (current-time) (-> obj wave-delay-time)) (the-as time-frame (-> s5-0 wave-delay)))
            (goto cfg-58)
            )
        (set! (-> obj event-length) (the-as uint 0))
        (+! (-> obj wave) 1)
        (set! s5-0 (-> obj game (-> obj wave)))
        (when (zero? (-> s5-0 min-count))
          (set! (-> obj wave) (the-as int (-> s5-0 max-count)))
          (set! s5-0 (-> obj game (-> obj wave)))
          )
        (set! (-> obj wave-time) (current-time))
        (set! (-> obj wave-length)
              (the-as uint (rand-vu-int-range (the-as int (-> s5-0 min-wave)) (the-as int (-> s5-0 max-wave))))
              )
        (set! (-> obj wave-delay-time) 0)
        (when (< 1 (-> obj wave))
          (cond
            ((< 4 (- (-> obj miss-count) (-> obj wave-start-miss)))
             (let ((v0-2 (rand-vu-int-count 5)))
               (cond
                 ((zero? v0-2)
                  (talker-spawn-func (-> *talker-speech* 148) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-2 1)
                  (talker-spawn-func (-> *talker-speech* 153) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-2 2)
                  (talker-spawn-func (-> *talker-speech* 154) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-2 3)
                  (talker-spawn-func (-> *talker-speech* 157) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-2 4)
                  (talker-spawn-func (-> *talker-speech* 158) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 )
               )
             )
            ((>= 1 (- (-> obj miss-count) (-> obj wave-start-miss)))
             (let ((v0-9 (rand-vu-int-count 7)))
               (cond
                 ((zero? v0-9)
                  (talker-spawn-func (-> *talker-speech* 141) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 1)
                  (talker-spawn-func (-> *talker-speech* 142) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 2)
                  (talker-spawn-func (-> *talker-speech* 143) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 3)
                  (talker-spawn-func (-> *talker-speech* 150) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 4)
                  (talker-spawn-func (-> *talker-speech* 156) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 5)
                  (talker-spawn-func (-> *talker-speech* 159) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 ((= v0-9 6)
                  (talker-spawn-func (-> *talker-speech* 160) *entity-pool* (target-pos 0) (the-as region #f))
                  )
                 )
               )
             )
            )
          )
        (set! (-> obj wave-start-miss) (-> obj miss-count))
        )
      (set! v0-18
            (when (>= (- (current-time) (-> obj event-time)) (the-as time-frame (-> obj event-length)))
              (set! (-> obj event-time) (current-time))
              (let ((s4-14 (vector+! (new 'stack-no-clear 'vector) (-> obj root trans) (new 'static 'vector :w 1.0)))
                    (s3-12 (rand-vu-int-range (the-as int (-> s5-0 min-count)) (the-as int (-> s5-0 max-count))))
                    )
                (dotimes (s2-12 s3-12)
                  (let ((f0-0 (-> obj last-angle)))
                    (while (< (fabs (- (-> obj last-angle) f0-0)) 819.2)
                      (set! f0-0 (rand-vu-float-range -1720.32 1720.32))
                      )
                    (set! (-> obj last-angle) f0-0)
                    )
                  (let ((s1-0 (get-process *default-dead-pool* onin-game-bubble #x4000)))
                    (when s1-0
                      (let ((t9-31 (method-of-type onin-game-bubble activate)))
                        (t9-31
                          (the-as onin-game-bubble s1-0)
                          obj
                          (symbol->string (-> onin-game-bubble symbol))
                          (the-as pointer #x70004000)
                          )
                        )
                      (let ((s0-0 run-function-in-process))
                        (set! sv-32 s1-0)
                        (set! sv-48 onin-game-bubble-init)
                        (set! sv-64 s4-14)
                        (set! sv-80 (rand-vu-int-range 0 3))
                        (set! sv-96 (-> s5-0 gravity))
                        (set! sv-112 (-> obj last-angle))
                        (let ((t2-0 (rand-vu-float-range 4096.0 7372.8)))
                          ((the-as (function object object object object object object object none) s0-0)
                           sv-32
                           sv-48
                           sv-64
                           sv-80
                           sv-96
                           sv-112
                           t2-0
                           )
                          )
                        )
                      (-> s1-0 ppointer)
                      )
                    )
                  )
                )
              (set! v0-18 (rand-vu-int-range (the-as int (-> s5-0 min-event)) (the-as int (-> s5-0 max-event))))
              (set! (-> obj event-length) (the-as uint v0-18))
              v0-18
              )
            )
      )
    )
  (label cfg-58)
  (onin-game-method-26 obj)
  0
  (none)
  )

(defmethod onin-game-method-26 onin-game ((obj onin-game))
  (cond
    ((>= (-> *game-info* score) (-> obj score))
     (set! (-> *game-info* score) (-> obj score))
     )
    ((and (< (-> *game-info* score) (-> obj score)) (>= (- (current-time) (-> obj score-time)) (seconds 0.1)))
     (sound-play "onin-score")
     (seek! (-> *game-info* score) (-> obj score) 1.0)
     (set! (-> obj score-time) (current-time))
     )
    )
  (set! (-> *game-info* miss) (the float (-> obj miss-count)))
  0
  (none)
  )

;; WARN: Return type mismatch number vs none.
(defmethod onin-game-method-27 onin-game ((obj onin-game) (arg0 int))
  "TODO - bubble type"
  (let ((s4-0 (the-as onin-game-bubble #f)))
    (let ((s3-0 0)
          (s2-0 (-> obj child))
          )
      (while s2-0
        (let* ((s1-0 (ppointer->process s2-0))
               (v1-2 (if (type? s1-0 onin-game-bubble)
                         (the-as onin-game-bubble s1-0)
                         )
                     )
               )
          (when (and v1-2 (= (-> v1-2 bubble-type) arg0) (or (not s4-0) (< (-> v1-2 bubble-start-time) s3-0)))
            (set! s4-0 v1-2)
            (set! s3-0 (the-as int (-> v1-2 bubble-start-time)))
            )
          )
        (set! s2-0 (-> s2-0 0 brother))
        )
      )
    (cond
      (s4-0
        (when (send-event s4-0 'attack #f)
          (cond
            ((= arg0 (-> obj last-type))
             (+! (-> obj current-bonus) (-> obj current-bonus))
             (if (>= (-> obj current-bonus) 16.0)
                 (set! (-> obj current-bonus) 16.0)
                 )
             )
            (else
              (set! (-> obj current-bonus) 1.0)
              )
            )
          (set! (-> obj last-type) arg0)
          (+! (-> obj score) (-> obj current-bonus))
          )
        )
      (else
        (sound-play "onin-wrong")
        (set! (-> obj last-type) -1)
        (+! (-> obj miss-count) 1)
        (let ((v1-20 (rand-vu-int-count 4)))
          (cond
            ((zero? v1-20)
             (talker-spawn-func (-> *talker-speech* 144) *entity-pool* (target-pos 0) (the-as region #f))
             )
            ((= v1-20 1)
             (talker-spawn-func (-> *talker-speech* 146) *entity-pool* (target-pos 0) (the-as region #f))
             )
            ((= v1-20 2)
             (talker-spawn-func (-> *talker-speech* 147) *entity-pool* (target-pos 0) (the-as region #f))
             )
            ((= v1-20 3)
             (talker-spawn-func (-> *talker-speech* 149) *entity-pool* (target-pos 0) (the-as region #f))
             )
            )
          )
        )
      )
    )
  (none)
  )

(defstate hide (onin-game)
  :virtual #t
  :code (behavior ()
    (ja-channel-set! 0)
    (ja-post)
    (sleep-code)
    (none)
    )
  )

(defstate wait-for-start (onin-game)
  :virtual #t
  :code (behavior ()
    (while (or (not *target*) (not (process-grab? *target* #f)))
      (suspend)
      )
    (go-virtual active #t)
    (none)
    )
  )

(defstate active (onin-game)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('done)
       (sound-play "onin-splat")
       (set! (-> self last-type) -1)
       (+! (-> self miss-count) 1)
       (let ((v1-5 (rand-vu-int-count 2)))
         (cond
           ((zero? v1-5)
            (talker-spawn-func (-> *talker-speech* 151) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-5 1)
            (talker-spawn-func (-> *talker-speech* 152) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       )
      (('retry)
       (go-virtual lose #f)
       )
      )
    )
  :enter (behavior ((arg0 symbol))
    (when arg0
      (add-connection
        *task-manager-engine*
        self
        nothing
        self
        (-> *game-info* sub-task-list (game-task-node city-play-onin-game-resolution))
        #f
        )
      (let ((a1-1 (new 'stack-no-clear 'array 'pointer 3)))
        (set! (-> a1-1 2) (the-as pointer 'onin2))
        (set! (-> a1-1 1) (the-as pointer 'onin1))
        (set! (-> a1-1 0) (the-as pointer 'ctywide1))
        (want-sound-banks *load-state* (the-as (pointer symbol) a1-1))
        )
      (talker-speech-class-method-11 (-> *talker-speech* 141))
      (talker-speech-class-method-11 (-> *talker-speech* 142))
      (talker-speech-class-method-11 (-> *talker-speech* 143))
      (talker-speech-class-method-11 (-> *talker-speech* 144))
      (talker-speech-class-method-11 (-> *talker-speech* 146))
      (talker-speech-class-method-11 (-> *talker-speech* 147))
      (talker-speech-class-method-11 (-> *talker-speech* 148))
      (talker-speech-class-method-11 (-> *talker-speech* 149))
      (talker-speech-class-method-11 (-> *talker-speech* 150))
      (talker-speech-class-method-11 (-> *talker-speech* 151))
      (talker-speech-class-method-11 (-> *talker-speech* 152))
      (talker-speech-class-method-11 (-> *talker-speech* 153))
      (talker-speech-class-method-11 (-> *talker-speech* 154))
      (talker-speech-class-method-11 (-> *talker-speech* 155))
      (talker-speech-class-method-11 (-> *talker-speech* 156))
      (talker-speech-class-method-11 (-> *talker-speech* 157))
      (talker-speech-class-method-11 (-> *talker-speech* 158))
      (talker-speech-class-method-11 (-> *talker-speech* 159))
      (talker-speech-class-method-11 (-> *talker-speech* 160))
      (add-setting! 'music 'danger3 0.0 0)
      (set-setting! 'entity-name (res-lump-struct (-> self entity) 'camera-name structure) 0.0 0)
      (set-setting! 'airlock #f 0.0 0)
      (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
      (set! (-> self hud-score) (ppointer->handle (process-spawn hud-big-score :init hud-init-by-other :to self)))
      (set! (-> self hud-goal) (ppointer->handle (process-spawn hud-goal :init hud-init-by-other :to self)))
      (set! (-> self hud-miss) (ppointer->handle (process-spawn hud-miss :init hud-init-by-other :to self)))
      (set! (-> self game-start-time) (current-time))
      (send-event *target* 'draw #f)
      (set-setting! 'gun #f 0.0 0)
      (set-setting! 'calm #t 0.0 0)
      (set-setting! 'gem #f 0.0 0)
      (let ((a0-50 (-> *part-id-table* 3429)))
        (when a0-50
          (let ((v1-110 (get-field-spec-by-id a0-50 (sp-field-id spt-num))))
            (when v1-110
              (set! (-> v1-110 initial-valuef) 0.0)
              (set! (-> v1-110 random-rangef) 0.0)
              )
            )
          )
        )
      (let ((a0-51 (-> *part-id-table* 3437)))
        (when a0-51
          (let ((v1-113 (get-field-spec-by-id a0-51 (sp-field-id spt-num))))
            (when v1-113
              (set! (-> v1-113 initial-valuef) 0.0)
              (set! (-> v1-113 random-rangef) 0.0)
              )
            )
          )
        )
      )
    (none)
    )
  :exit (behavior ()
    (when (not (and (-> self next-state) (let ((v1-3 (-> self next-state name)))
                                           (or (= v1-3 'active) (= v1-3 'attack) (= v1-3 'win) (= v1-3 'lose))
                                           )
                    )
               )
      (format #t "score of ~f~%" (-> self score))
      (let ((gp-0 (-> self child)))
        (while gp-0
          (if (type? (ppointer->process gp-0) onin-game-bubble)
              (send-event (ppointer->process gp-0) 'die)
              )
          (set! gp-0 (-> gp-0 0 brother))
          )
        )
      (remove-from-process *task-manager-engine* self)
      (remove-setting! 'music)
      (send-event (handle->process (-> self hud-score)) 'hide-and-die)
      (send-event (handle->process (-> self hud-miss)) 'hide-and-die)
      (send-event (handle->process (-> self hud-goal)) 'hide-and-die)
      (remove-setting! 'entity-name)
      (if (and *target* (focus-test? *target* grabbed))
          (process-release? *target*)
          )
      (remove-setting! 'airlock)
      (remove-setting! 'borrow)
      (remove-setting! 'minimap)
      (remove-setting! 'gun)
      (remove-setting! 'calm)
      (remove-setting! 'gem)
      (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
      (send-event *target* 'draw #t)
      (let ((a0-39 (-> *part-id-table* 3429)))
        (when a0-39
          (let ((v1-64 (get-field-spec-by-id a0-39 (sp-field-id spt-num))))
            (when v1-64
              (set! (-> v1-64 initial-valuef) 0.0)
              (set! (-> v1-64 random-rangef) 1.0)
              )
            )
          )
        )
      (let ((a0-41 (-> *part-id-table* 3437)))
        (when a0-41
          (let ((v1-67 (get-field-spec-by-id a0-41 (sp-field-id spt-num))))
            (when v1-67
              (set! (-> v1-67 initial-valuef) 1.0)
              (set! (-> v1-67 random-rangef) 0.0)
              )
            )
          )
        )
      (game-info-method-28 *game-info* (game-score onin-game) (-> self score))
      (logclear!
        (-> *cpad-list* cpads 0 button0-abs 0)
        (pad-buttons up right down left l1 r1 triangle circle x square)
        )
      (logclear!
        (-> *cpad-list* cpads 0 button0-rel 0)
        (pad-buttons up right down left l1 r1 triangle circle x square)
        )
      (let ((a1-29 (new 'stack-no-clear 'array 'pointer 3)))
        (set! (-> a1-29 2) (the-as pointer 'onin1))
        (set! (-> a1-29 1) (the-as pointer 'ctywide1))
        (set! (-> a1-29 0) (the-as pointer 'ctywide1))
        (want-sound-banks *load-state* (the-as (pointer symbol) a1-29))
        )
      )
    (none)
    )
  :trans (behavior ()
    (cond
      ((or (and *cheat-mode* (cpad-pressed? 0 r1))
           (and (>= (-> self score) (-> self point-win))
                (or (not (task-node-closed? (game-task-node city-play-onin-game-resolution)))
                    (>= (-> self miss-count) (-> self miss-max))
                    )
                )
           )
       (go-virtual win)
       )
      ((or (and *cheat-mode* (cpad-pressed? 0 l1)) (>= (-> self miss-count) (-> self miss-max)))
       (go-virtual lose #t)
       )
      ((and *cheat-mode* (cpad-pressed? 0 up))
       (sound-play-by-spec (static-sound-spec "beep" :fo-curve 1) (new-sound-id) (the-as vector #t))
       (set! (-> self wave-time) 0)
       0
       )
      ((and *cheat-mode* (cpad-pressed? 0 down))
       (sound-play-by-spec (static-sound-spec "beep" :fo-curve 1) (new-sound-id) (the-as vector #t))
       (seekl! (-> self wave) 0 2)
       (set! (-> self wave-time) 0)
       0
       )
      ((cpad-pressed? 0 triangle)
       (onin-game-method-27 self 0)
       )
      ((cpad-pressed? 0 circle)
       (onin-game-method-27 self 1)
       )
      ((cpad-pressed? 0 x)
       (onin-game-method-27 self 2)
       )
      ((cpad-pressed? 0 square)
       (onin-game-method-27 self 3)
       )
      )
    (logclear!
      (-> *cpad-list* cpads 0 button0-abs 0)
      (pad-buttons up right down left l1 r1 triangle circle x square)
      )
    (logclear!
      (-> *cpad-list* cpads 0 button0-rel 0)
      (pad-buttons up right down left l1 r1 triangle circle x square)
      )
    (none)
    )
  :code (behavior ((arg0 symbol))
    (ja-channel-set! 0)
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 1))
        (suspend)
        )
      )
    (talker-spawn-func (-> *talker-speech* 145) *entity-pool* (target-pos 0) (the-as region #f))
    (sleep-code)
    (none)
    )
  :post (behavior ()
    (onin-game-method-25 self)
    (ja-post)
    (none)
    )
  )

(defstate lose (onin-game)
  :virtual #t
  :exit (-> (method-of-type onin-game active) exit)
  :code (behavior ((arg0 symbol))
    (let ((gp-0 (-> self child)))
      (while gp-0
        (if (type? (ppointer->process gp-0) onin-game-bubble)
            (send-event (ppointer->process gp-0) 'attack #t)
            )
        (set! gp-0 (-> gp-0 0 brother))
        )
      )
    (let* ((v1-14 (-> *game-info* sub-task-list (game-task-node city-play-onin-game-resolution)))
           (gp-1 (if (-> v1-14 info)
                     (-> v1-14 info manager)
                     (the-as handle #f)
                     )
                 )
           )
      (if (not (handle->process gp-1))
          (auto-save-user)
          )
      (let* ((v1-21 (rand-vu-int-count 7))
             (s5-1 (cond
                     ((zero? v1-21)
                      (talker-spawn-func (-> *talker-speech* 163) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     ((= v1-21 1)
                      (talker-spawn-func (-> *talker-speech* 164) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     ((= v1-21 2)
                      (talker-spawn-func (-> *talker-speech* 165) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     ((= v1-21 3)
                      (talker-spawn-func (-> *talker-speech* 166) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     ((= v1-21 4)
                      (talker-spawn-func (-> *talker-speech* 167) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     ((= v1-21 5)
                      (talker-spawn-func (-> *talker-speech* 168) *entity-pool* (target-pos 0) (the-as region #f))
                      )
                     (else
                       (talker-spawn-func (-> *talker-speech* 169) *entity-pool* (target-pos 0) (the-as region #f))
                       )
                     )
                   )
             )
        (while (nonzero? (get-status *gui-control* s5-1))
          (suspend)
          )
        )
      (send-event (handle->process gp-1) 'fail)
      )
    (if (task-node-closed? (game-task-node city-play-onin-game-resolution))
        (set-blackout-frames (seconds 0.1))
        (sleep-code)
        )
    (none)
    )
  :post (behavior ()
    (onin-game-method-26 self)
    (none)
    )
  )

(defstate win (onin-game)
  :virtual #t
  :exit (-> (method-of-type onin-game active) exit)
  :code (behavior ()
    (let ((gp-0 (-> self child)))
      (while gp-0
        (if (type? (ppointer->process gp-0) onin-game-bubble)
            (send-event (ppointer->process gp-0) 'attack #t)
            )
        (set! gp-0 (-> gp-0 0 brother))
        )
      )
    (while (nonzero? (lookup-gui-connection-id *gui-control* (the-as string #f) (gui-channel daxter) (gui-action none)))
      (suspend)
      )
    (when (and (task-node-closed? (game-task-node city-play-onin-game-resolution))
               (not (task-node-closed? (game-task-node city-play-onin-game-skill)))
               )
      (let ((gp-1 (current-time)))
        (until (>= (- (current-time) gp-1) (seconds 1))
          (suspend)
          )
        )
      ;; pc port : give skill directly
      (#if PC_PORT
          (send-event *target* 'get-pickup (pickup-type skill) (-> *FACT-bank* super-skill-inc))
          (script-eval '(birth-pickup ("pecker-npc-1" "head") skill FACT_SUPER_SKILL_INC flags (suck-in)))
          )
      (task-node-close! (game-task-node city-play-onin-game-skill))
      )
    (let* ((s5-1 (if (zero? (rand-vu-int-count 2))
                     (talker-spawn-func (-> *talker-speech* 161) *entity-pool* (target-pos 0) (the-as region #f))
                     (talker-spawn-func (-> *talker-speech* 162) *entity-pool* (target-pos 0) (the-as region #f))
                     )
                 )
           (v1-31 (-> *game-info* sub-task-list (game-task-node city-play-onin-game-resolution)))
           (gp-4 (if (-> v1-31 info)
                     (-> v1-31 info manager)
                     (the-as handle #f)
                     )
                 )
           )
      (if (not (handle->process gp-4))
          (auto-save-user)
          )
      (while (nonzero? (get-status *gui-control* s5-1))
        (suspend)
        )
      (let ((s5-3 (current-time)))
        (until (>= (- (current-time) s5-3) (seconds 2))
          (suspend)
          )
        )
      (set-blackout-frames (seconds 0.1))
      (send-event (handle->process gp-4) 'complete)
      )
    (none)
    )
  :post (-> (method-of-type onin-game lose) post)
  )

;; WARN: Return type mismatch object vs none.
(defbehavior onin-game-init onin-game ((arg0 entity))
  (set-blackout-frames (seconds 0.1))
  (stack-size-set! (-> self main-thread) 512)
  (set! (-> self entity) (the-as entity-actor arg0))
  (set! (-> self level) (level-get *level* 'onintent))
  (set! (-> self root) (new 'process 'trsqv))
  (set-vector! (-> self root trans) 2918698.5 36044.8 3025589.5 1.0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-sidekick-highres" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (logior! (-> self skel status) (joint-control-status blend-shape eye-anim))
  (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
  (set! (-> self hud-score) (the-as handle #f))
  (set! (-> self hud-goal) (the-as handle #f))
  (set! (-> self hud-miss) (the-as handle #f))
  (set! (-> self last-type) -1)
  (if (not (task-node-closed? (game-task-node city-play-onin-game-resolution)))
      (set! (-> self game) (the-as (inline-array onin-game-event) (-> *onin-game-data* 0)))
      (set! (-> self game) (the-as (inline-array onin-game-event) (-> *onin-game-data* 1)))
      )
  (set! (-> self miss-max) (the int (* 0.0033333334 (the float (-> self game 0 min-event)))))
  (set! (-> self point-win) (the float (-> self game 0 max-count)))
  (set! (-> *game-info* score) 0.0)
  (set! (-> *game-info* goal) (-> self point-win))
  (set! (-> *game-info* miss) 0.0)
  (set! (-> *game-info* miss-max) (the float (-> self miss-max)))
  (go-virtual wait-for-start)
  (none)
  )
