;;-*-Lisp-*-
(in-package goal)

;; name: ctyfarma-part.gc
;; name in dgo: ctyfarma-part
;; dgos: CFB, CFA

;; DECOMP BEGINS

(deftype ctyfarma-part (part-spawner)
  ()
  :heap-base #x30
  :method-count-assert 16
  :size-assert         #xb0
  :flag-assert         #x10003000b0
  )


(defpartgroup group-ctyfarma-light
  :id 1031
  :flags (unk-8)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 4492 :fade-after (meters 200) :flags (bit6) :hour-mask #b111111111110000000)
    (sp-item 4493 :fade-after (meters 200) :flags (bit6) :hour-mask #b111111111110000000)
    )
  )

(defpart 4492
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xbb :page #xc))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 2.5) (meters 0.1) 1.0)
    (sp-flt spt-rot-x 1638.4)
    (sp-flt spt-rot-z (degrees -17.0))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 20.0)
    (sp-flt spt-omega 822067.2)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 819.2)
    )
  )

(defpart 4493
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xbb :page #xc))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 12) (meters 0.1) 1.0)
    (sp-flt spt-rot-x 1638.4)
    (sp-flt spt-rot-z (degrees -17.0))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-rnd-flt spt-g 255.0 255.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 12.0)
    (sp-flt spt-omega 822067.2)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 819.2)
    )
  )

(defpartgroup group-ctyfarma-drip-1
  :id 1032
  :flags (unk-8)
  :bounds (static-bspherem 0 -4 0 16)
  :parts ((sp-item 4494 :fade-after (meters 140) :falloff-to (meters 140)))
  )

(defun birth-func-ctyfarma-drip ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s4-0 (new 'stack-no-clear 'collide-query)))
    (set! (-> s4-0 start-pos quad) (-> arg2 launchrot quad))
    (set-vector! (-> s4-0 move-dist) 0.0 -163840.0 0.0 1.0)
    (let ((v1-2 s4-0))
      (set! (-> v1-2 radius) 40.96)
      (set! (-> v1-2 collide-with) (collide-spec backgnd))
      (set! (-> v1-2 ignore-process0) #f)
      (set! (-> v1-2 ignore-process1) #f)
      (set! (-> v1-2 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
      (set! (-> v1-2 action-mask) (collide-action solid))
      )
    (fill-using-line-sphere *collide-cache* s4-0)
    (cond
      ((>= (probe-using-line-sphere *collide-cache* s4-0) 0.0)
       (set! (-> arg1 user-float) (-> s4-0 best-other-tri intersect y))
       (set! (-> arg1 datab 0) (the int (* 127.0 (-> s4-0 best-other-tri normal x))))
       (set! (-> arg1 datab 1) (the int (* 127.0 (-> s4-0 best-other-tri normal y))))
       (set! (-> arg1 datab 2) (the int (* 127.0 (-> s4-0 best-other-tri normal z))))
       (set! (-> arg1 datab 3) (the-as int (-> s4-0 best-other-tri pat event)))
       )
      (else
        (set! (-> arg1 omega) 65280.0)
        (set! (-> arg1 user-float) (+ -204800.0 (-> arg2 launchrot y)))
        )
      )
    )
  (let ((f0-19 (get-height *ocean* (-> arg2 launchrot) #f)))
    (when (!= f0-19 4095996000.0)
      (when (< (-> arg1 user-float) f0-19)
        (set! (-> arg1 user-float) f0-19)
        (set! (-> arg1 datab 0) 0)
        (set! (-> arg1 datab 1) 127)
        (set! (-> arg1 datab 2) 0)
        (set! (-> arg1 datab 3) 0)
        0
        )
      )
    )
  0
  (none)
  )

(defun check-drop-level-ctyfarma-drop-userdata ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (when (< (-> arg2 vector 0 y) (-> arg1 user-float))
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! s3-0 (-> arg2 vector 0 x) (-> arg1 user-float) (-> arg2 vector 0 z) 1.0)
      (if (< (vector-vector-distance (camera-pos) s3-0) 204800.0)
          (sound-play "dirt-drips" :position s3-0)
          )
      (let ((t9-5 sp-launch-particles-var)
            (a0-7 *sp-particle-system-2d*)
            (a1-4 (-> *part-id-table* 4495))
            (a2-2 *launch-matrix*)
            )
        (set! (-> a2-2 trans quad) (-> s3-0 quad))
        (t9-5 a0-7 a1-4 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (let ((t9-6 sp-launch-particles-var)
            (a0-8 *sp-particle-system-3d*)
            (a1-5 (-> *part-id-table* 4496))
            (a2-3 *launch-matrix*)
            )
        (set! (-> a2-3 trans quad) (-> s3-0 quad))
        (t9-6 a0-8 a1-5 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      )
    )
  (sparticle-motion-blur arg0 arg1 (the-as vector arg2))
  (none)
  )

(defpart 4495
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #xc))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.05) 1.0)
    (sp-int spt-rot-x 4)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-rnd-flt spt-g 32.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-omega 8.192)
    (sp-rnd-flt spt-vel-y (meters 0.016666668) (meters 0.03) 1.0)
    (sp-flt spt-fade-a -0.16)
    (sp-rnd-flt spt-accel-y -4.096 -0.68266666 1.0)
    (sp-flt spt-friction 0.97)
    (sp-int spt-timer 200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int-plain-rnd spt-next-time 0 224 1)
    (sp-launcher-by-id spt-next-launcher 4491)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 60.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-flt spt-rotate-y (degrees 180.0))
    )
  )

(defpart 4491
  :init-specs ((sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-int spt-next-time 5)
    (sp-launcher-by-id spt-next-launcher 4497)
    )
  )

(defpart 4497
  :init-specs ((sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-rnd-flt spt-g 32.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-int-plain-rnd spt-next-time 0 449 1)
    (sp-launcher-by-id spt-next-launcher 4491)
    )
  )

(defpart 4496
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xc9 :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 0.2))
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.25) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-rnd-flt spt-g 32.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-omega 0.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.006666667) (meters 0.006666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -0.8)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 10 0 0 #xc0c900 #xc02600 #xc03300 #xc02c00)
      )
    (sp-func spt-func 'sparticle-texture-animate)
    )
  )

(defpart 4494
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #xc))
    (sp-func spt-birth-func 'birth-func-ctyfarma-drip)
    (sp-flt spt-num 0.05)
    (sp-flt spt-scale-x (meters 0))
    (sp-int spt-rot-x 4)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-rnd-flt spt-g 32.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-vel-z (meters 0))
    (sp-flt spt-scalevel-x (meters 0.00044444445))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.28444445)
    (sp-rnd-flt spt-friction 0.93 0.02 1.0)
    (sp-int spt-timer 900)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12 use-global-acc)
    (sp-flt spt-userdata 0.0)
    (sp-func spt-func 'check-drop-level-rain2)
    (sp-int-plain-rnd spt-next-time 225 224 1)
    (sp-launcher-by-id spt-next-launcher 4498)
    )
  )

(defpart 4498
  :init-specs ((sp-flt spt-a 128.0)
    (sp-flt spt-fade-a 0.0)
    (sp-rnd-flt spt-accel-y -27.306667 2.7306666 1.0)
    (sp-rnd-flt spt-friction 0.93 0.02 1.0)
    (sp-int-plain-rnd spt-next-time 0 224 1)
    (sp-launcher-by-id spt-next-launcher 4491)
    )
  )

(defpartgroup group-ctyfarma-wall-bubbles
  :id 1033
  :flags (unk-4)
  :bounds (static-bspherem 0 0 0 32)
  :parts ((sp-item 4499 :fade-after (meters 80) :falloff-to (meters 80) :flags (bit7)))
  )

(defpart 4499
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #xc))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters -0.75) (meters 1.5) 1.0)
    (sp-flt spt-z (meters -4))
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.2) 1.0)
    (sp-int spt-rot-x 4)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 16.0 16.0 1.0)
    (sp-rnd-flt spt-g 64.0 16.0 1.0)
    (sp-rnd-flt spt-b 32.0 32.0 1.0)
    (sp-rnd-flt spt-a 32.0 64.0 1.0)
    (sp-rnd-flt spt-vel-z (meters 0.013333334) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-flt spt-rotate-y (degrees 0.0))
    (sp-rnd-flt spt-rotate-z (degrees 0.0) (degrees 3600.0) 1.0)
    )
  )
