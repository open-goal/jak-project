;;-*-Lisp-*-
(in-package goal)

;; name: crocesc-states.gc
;; name in dgo: crocesc-states
;; dgos: LKIDDOGE

;; DECOMP BEGINS

(defstate waiting-idle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (if (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223))
        (go-waiting-turn self)
        )
    (when (not (focus-test? self grabbed))
      (cond
        ((logtest? (-> self bot-flags) (bot-flags bf15))
         (go-virtual move-to-vehicle)
         )
        ((not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
         (go-virtual traveling)
         )
        )
      )
    )
  :code (behavior ()
    (let ((gp-0 (get-rand-int self 4)))
      (until #f
        (let ((a2-0 (ash 1 gp-0)))
          (if (= gp-0 3)
              (set! a2-0 (logior a2-0 4))
              )
          (set! gp-0 (enemy-method-120 self 4 a2-0))
          )
        (let ((v1-7 gp-0))
          (cond
            ((zero? v1-7)
             (let ((v1-10 (ja-group)))
               (cond
                 ((and v1-10 (= v1-10 (-> self draw art-group data 3)))
                  (ja-no-eval :num! (seek! max 0.5))
                  (while (not (ja-done? 0))
                    (suspend)
                    (ja-eval)
                    )
                  )
                 (else
                   (ja-channel-push! 1 (seconds 0.1))
                   )
                 )
               )
             (let ((s5-0 (get-rand-int-range self 3 7)))
               (dotimes (s4-0 s5-0)
                 (ja-no-eval :group! (-> self draw art-group data 3) :num! (seek! max 0.5) :frame-num 0.0)
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek! max 0.5))
                   )
                 )
               )
             )
            ((= v1-7 1)
             (ja-channel-push! 1 (seconds 0.1))
             (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek! (ja-aframe 3.0 0) 0.5) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek! (ja-aframe 3.0 0) 0.5))
               )
             (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek! max 0.33) :frame-num (ja-aframe 3.0 0))
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek! max 0.33))
               )
             )
            ((= v1-7 2)
             (let ((v1-90 (ja-group)))
               (cond
                 ((and v1-90 (= v1-90 (-> self draw art-group data 5)))
                  (ja-no-eval :num! (seek! max 0.5))
                  (while (not (ja-done? 0))
                    (suspend)
                    (ja-eval)
                    )
                  )
                 (else
                   (ja-channel-push! 1 (seconds 0.1))
                   )
                 )
               )
             (let ((s5-4 (get-rand-int-range self 5 7)))
               (dotimes (s4-1 s5-4)
                 (ja-no-eval :group! (-> self draw art-group data 5) :num! (seek! max 0.5) :frame-num (ja-aframe 2.0 0))
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek! max 0.5))
                   )
                 )
               )
             )
            (else
              (let ((v1-132 (ja-group)))
                (cond
                  ((and v1-132 (= v1-132 (-> self draw art-group data 4)))
                   (ja-no-eval :num! (seek!))
                   (while (not (ja-done? 0))
                     (suspend)
                     (ja-eval)
                     )
                   )
                  (else
                    (ja-channel-push! 1 (seconds 0.1))
                    )
                  )
                )
              (let ((s5-5 (get-rand-int-range self 3 7)))
                (dotimes (s4-2 s5-5)
                  (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
                  (until (ja-done? 0)
                    (suspend)
                    (ja :num! (seek!))
                    )
                  )
                )
              )
            )
          )
        )
      )
    #f
    )
  :post nav-enemy-simple-post
  )

(defstate waiting-turn (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (when (not (focus-test? self grabbed))
      (if (and (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
               (not (logtest? (-> self bot-flags) (bot-flags bf15)))
               )
          (go-virtual traveling)
          )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 9) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-idle-or-move self)
    )
  :post (behavior ()
    (seek-toward-heading-vec! (-> self root) (-> self focus-info bullseye-xz-dir) 49152.0 (seconds 0.05))
    (nav-enemy-simple-post)
    )
  )

(defstate traveling (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (stop-looking-at-target! self)
    (nav-enemy-method-166 self)
    (set! (-> self player-blocking) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (cond
      ((logtest? (-> self bot-flags) (bot-flags bf15))
       (go-virtual move-to-vehicle)
       )
      ((outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #t)
       (go-idle-or-move self)
       )
      ((and (time-elapsed? (-> self state-time) (seconds 0.5)) (bot-method-208 self))
       (go-virtual traveling-blocked)
       )
      ((and (nav-enemy-method-163 self) (time-elapsed? (-> self state-time) (-> self reaction-time)))
       (go-stare2 self)
       )
      )
    0
    )
  :code (behavior ()
    (until #f
      (play-walk-anim self)
      (suspend)
      )
    #f
    )
  :post (behavior ()
    (let ((a0-0 (-> self nav state))
          (v1-1 (-> self spot))
          )
      (logclear! (-> a0-0 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-0 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-0 target-post quad) (-> v1-1 center quad))
      )
    0
    (nav-enemy-travel-post)
    )
  )

(defstate move-to-vehicle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (stop-looking-at-target! self)
    (nav-enemy-method-166 self)
    (set! (-> self player-blocking) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self vehicle-handle))))
      (cond
        ((or (not gp-0)
             (logtest? (-> (the-as vehicle gp-0) flags) (rigid-body-object-flag dead))
             (not (logtest? (-> self bot-flags) (bot-flags bf15)))
             (< (-> self vehicle-seat-index) 0)
             )
         (logclear! (-> self bot-flags) (bot-flags bf15))
         (go-idle-or-move self)
         )
        ((and (time-elapsed? (-> self state-time) (seconds 0.5)) (bot-method-208 self))
         (go-virtual traveling-blocked)
         )
        ((and (nav-enemy-method-163 self) (time-elapsed? (-> self state-time) (-> self reaction-time)))
         (go-stare2 self)
         )
        )
      (let ((s5-0 (new 'stack-no-clear 'inline-array 'matrix 2)))
        (compute-seat-position (the-as vehicle gp-0) (the-as vector (-> s5-0 0)) (-> self vehicle-seat-index))
        (set! (-> s5-0 0 vector 1 quad) (-> self root trans quad))
        (set! (-> s5-0 0 trans quad) (-> s5-0 0 quad 0))
        (vector-! (the-as vector (-> s5-0 1)) (the-as vector (-> s5-0 0)) (-> (the-as vehicle gp-0) root trans))
        (vector-z-quaternion! (-> s5-0 0 vector 2) (-> self root quat))
        (let ((f30-1 (* 0.5 (vector-vector-xz-distance (-> s5-0 0 vector 1) (-> s5-0 0 trans)))))
          (vector-normalize! (-> s5-0 0 vector 2) (* 2.0 f30-1))
          (vector-normalize! (the-as vector (-> s5-0 1)) (* 4.0 f30-1))
          )
        (bot-method-181
          self
          (-> s5-0 1 vector 1)
          (-> s5-0 0 vector 1)
          (-> s5-0 0 vector 2)
          (-> s5-0 0 trans)
          (the-as vector (-> s5-0 1))
          0.8
          )
        (let ((a0-26 (-> self nav state))
              (v1-47 (-> s5-0 1 vector 1))
              )
          (logclear! (-> a0-26 flags) (nav-state-flag directional-mode))
          (logior! (-> a0-26 flags) (nav-state-flag target-poly-dirty))
          (set! (-> a0-26 target-post quad) (-> v1-47 quad))
          )
        0
        (if (and (< (vector-vector-xz-distance (the-as vector (-> s5-0 0)) (-> self root trans)) 17203.2)
                 (< (fabs (- (-> s5-0 0 vector 0 y) (-> self root trans y))) 20480.0)
                 )
            (go-virtual board-vehicle)
            )
        )
      )
    )
  :code (behavior ()
    (until #f
      (play-walk-anim self)
      (suspend)
      )
    #f
    )
  :post nav-enemy-travel-post
  )

(defstate board-vehicle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (let ((gp-0 (handle->process (-> self vehicle-handle))))
      (when (or (not (logtest? (-> self bot-flags) (bot-flags bf15))) (< (-> self vehicle-seat-index) 0))
        (logclear! (-> self bot-flags) (bot-flags bf15))
        (go-idle-or-move self)
        )
      (let* ((s5-0 (handle->process (-> self kid-handle)))
             (a2-0 (if (type? s5-0 process-focusable)
                       s5-0
                       )
                   )
             )
        (if a2-0
            (put-rider-in-seat (the-as vehicle gp-0) (-> self vehicle-seat-index) (the-as process-focusable a2-0))
            )
        )
      )
    (logior! (-> self focus-status) (focus-status pilot))
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logior! (-> self focus-status) (focus-status disable))
    (logclear! (-> self focus-status) (focus-status arrestable))
    (logclear! (-> self bot-flags) (bot-flags bf15))
    )
  :exit (behavior ()
    (local-vars (v1-6 enemy-flag))
    (logior! (-> self root nav-flags) (nav-flags has-root-sphere))
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-5 (-> self enemy-flags)))
      (if (logtest? v1-5 (enemy-flag checking-water))
          (set! v1-6 (logior v1-5 (enemy-flag enable-on-active)))
          (set! v1-6 (logclear v1-5 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-6)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    )
  :code (behavior ()
    (local-vars (sv-128 float))
    (ja-channel-push! 1 (seconds 0.1))
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 1.0 0) 0.5)
                  :frame-num (ja-aframe 0.0 0)
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! (ja-aframe 1.0 0) 0.5))
        )
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (set! (-> s5-2 quad) (-> self root trans quad))
        (let ((s4-0 (quaternion-copy! (new 'stack-no-clear 'quaternion) (-> self root quat))))
          (ja-no-eval :group! (-> self draw art-group data 10)
                      :num! (seek! (ja-aframe 5.0 0) 0.5)
                      :frame-num (ja-aframe 1.0 0)
                      )
          (until (ja-done? 0)
            (let ((s3-1 (handle->process (-> self vehicle-handle))))
              (quaternion-copy! (the-as quaternion (-> gp-0 vector 2)) (-> (the-as vehicle s3-1) root quat))
              (compute-seat-position (the-as vehicle s3-1) (the-as vector (-> gp-0 vector)) (-> self vehicle-seat-index))
              )
            (vector-! (-> gp-0 vector 1) (the-as vector (-> gp-0 vector)) s5-2)
            (let ((s3-2 lerp-scale)
                  (s2-0 0.0)
                  (s1-0 1.0)
                  (s0-0 (ja-aframe-num 0))
                  )
              (set! sv-128 (ja-aframe 1.0 0))
              (let* ((t0-0 (ja-aframe 4.0 0))
                     (f30-0 (s3-2 s2-0 s1-0 s0-0 sv-128 t0-0))
                     )
                (quaternion-rotate-local-y!
                  (the-as quaternion (-> gp-0 vector 2))
                  (the-as quaternion (-> gp-0 vector 2))
                  (* f30-0 (if (zero? (-> self vehicle-seat-index))
                               -16384.0
                               16384.0
                               )
                     )
                  )
                (quaternion-slerp! (-> self root quat) s4-0 (the-as quaternion (-> gp-0 vector 2)) f30-0)
                (vector+float*! (-> self root trans) s5-2 (-> gp-0 vector 1) f30-0)
                )
              )
            (suspend)
            (ja :num! (seek! (ja-aframe 5.0 0) 0.5))
            )
          )
        )
      (let ((s5-3 (new 'stack-no-clear 'vector)))
        (set! (-> s5-3 quad) (-> self root trans quad))
        (ja-no-eval :group! (-> self draw art-group data 10)
                    :num! (seek! (ja-aframe 7.0 0) 0.5)
                    :frame-num (ja-aframe 5.0 0)
                    )
        (until (ja-done? 0)
          (let ((s4-2 (handle->process (-> self vehicle-handle))))
            (quaternion-copy! (-> self root quat) (-> (the-as vehicle s4-2) root quat))
            (quaternion-rotate-local-y! (-> self root quat) (-> self root quat) (if (zero? (-> self vehicle-seat-index))
                                                                                    -16384.0
                                                                                    16384.0
                                                                                    )
                                        )
            (vector-matrix*!
              (the-as vector (-> gp-0 vector))
              (-> self local-seat-pos)
              (-> (the-as vehicle s4-2) node-list data 0 bone transform)
              )
            )
          (vector-! (-> gp-0 vector 1) (the-as vector (-> gp-0 vector)) s5-3)
          (let ((f0-16 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 5.0 0) (ja-aframe 7.0 0))))
            (vector+float*! (-> self root trans) s5-3 (-> gp-0 vector 1) f0-16)
            )
          (suspend)
          (ja :num! (seek! (ja-aframe 7.0 0) 0.5))
          )
        )
      (quaternion-copy! (new 'stack-no-clear 'quaternion) (-> self root quat))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 12.0 0) 0.5)
                  :frame-num (ja-aframe 7.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-5 (handle->process (-> self vehicle-handle))))
          (quaternion-copy! (the-as quaternion (-> gp-0 vector 2)) (-> (the-as vehicle s5-5) root quat))
          (vector-matrix*!
            (-> self root trans)
            (-> self local-seat-pos)
            (-> (the-as vehicle s5-5) node-list data 0 bone transform)
            )
          )
        (let ((f0-22 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 7.0 0) (ja-aframe 9.0 0))))
          (quaternion-rotate-local-y!
            (-> self root quat)
            (the-as quaternion (-> gp-0 vector 2))
            (* (- 1.0 f0-22) (if (zero? (-> self vehicle-seat-index))
                                 -16384.0
                                 16384.0
                                 )
               )
            )
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 12.0 0) 0.5))
        )
      )
    (logior! (-> self focus-status) (focus-status pilot-riding pilot))
    (go-virtual ride-vehicle)
    )
  :post nav-enemy-simple-post
  )

(defstate ride-vehicle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logclear! (-> self root nav-flags) (nav-flags has-root-sphere))
    (let ((v1-11 (-> self nav)))
      (logclear! (-> v1-11 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    (logior! (-> self focus-status) (focus-status disable pilot-riding pilot))
    (set! (-> self anim-speed) 0.0)
    )
  :exit (behavior ()
    (local-vars (v1-4 enemy-flag))
    (logior! (-> self root nav-flags) (nav-flags has-root-sphere))
    (let ((v1-3 (-> self enemy-flags)))
      (if (logtest? v1-3 (enemy-flag checking-water))
          (set! v1-4 (logior v1-3 (enemy-flag enable-on-active)))
          (set! v1-4 (logclear v1-3 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-4)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    0.0
    (when (focus-test? self pilot-riding)
      (let ((s5-0 (handle->process (-> self vehicle-handle)))
            (gp-0 (new 'stack-no-clear 'vector))
            )
        (quaternion-copy! (-> self root quat) (-> (the-as vehicle s5-0) root quat))
        (set! (-> gp-0 quad) (-> self root trans quad))
        (vector-matrix*!
          (-> self root trans)
          (-> self local-seat-pos)
          (-> (the-as vehicle s5-0) node-list data 0 bone transform)
          )
        (let* ((f0-2 (* (vector-vector-distance (-> self root trans) gp-0) (-> self clock frames-per-second)))
               (f0-3 (lerp-scale 0.3 1.2 f0-2 0.0 81920.0))
               )
          (seek! (-> self anim-speed) f0-3 (* 2.0 (seconds-per-frame)))
          )
        )
      )
    (if (and (logtest? (bot-flags bf16) (-> self bot-flags)) (want-exit-vehicle? self (-> self exit-vehicle-dest)))
        (go-virtual exit-vehicle)
        )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 11) :num! (seek! max (-> self anim-speed)) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max (-> self anim-speed)))
        )
      )
    #f
    )
  :post nav-enemy-simple-post
  )

(defstate exit-vehicle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logior! (-> self root nav-flags) (nav-flags has-root-sphere))
    (logior! (-> self focus-status) (focus-status disable))
    )
  :exit (behavior ()
    (local-vars (v1-11 enemy-flag))
    (set! (-> self vehicle-seat-index) -1)
    (set! (-> self vehicle-handle) (the-as handle #f))
    (logclear! (-> self bot-flags) (bot-flags bf16))
    (logclear! (-> self focus-status) (focus-status pilot-riding pilot))
    (let ((v1-5 (-> self nav)))
      (logclear! (-> v1-5 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-10 (-> self enemy-flags)))
      (if (logtest? v1-10 (enemy-flag checking-water))
          (set! v1-11 (logior v1-10 (enemy-flag enable-on-active)))
          (set! v1-11 (logclear v1-10 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-11)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    (when (focus-test? self pilot-riding)
      (let ((gp-0 (handle->process (-> self vehicle-handle))))
        (quaternion-copy! (-> self root quat) (-> (the-as vehicle gp-0) root quat))
        (vector-matrix*!
          (-> self root trans)
          (-> self local-seat-pos)
          (-> (the-as vehicle gp-0) node-list data 0 bone transform)
          )
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((gp-0 (new 'stack-no-clear 'inline-array 'matrix 2)))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 7.0 0) 0.25)
                  :frame-num (ja-aframe 12.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-1 (handle->process (-> self vehicle-handle))))
          (quaternion-copy! (-> self root quat) (-> (the-as vehicle s5-1) root quat))
          (vector-matrix*!
            (-> self root trans)
            (-> self local-seat-pos)
            (-> (the-as vehicle s5-1) node-list data 0 bone transform)
            )
          )
        (let ((f0-3 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 9.0 0) (ja-aframe 7.0 0))))
          (quaternion-rotate-local-y!
            (-> self root quat)
            (-> self root quat)
            (* f0-3 (if (zero? (-> self vehicle-seat-index))
                        16384.0
                        -16384.0
                        )
               )
            )
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 7.0 0) 0.25))
        )
      (set! (-> gp-0 0 vector 1 quad) (-> self root trans quad))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 5.0 0) 0.5)
                  :frame-num (ja-aframe 7.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-5 (handle->process (-> self vehicle-handle))))
          (quaternion-copy! (-> self root quat) (-> (the-as vehicle s5-5) root quat))
          (quaternion-rotate-local-y! (-> self root quat) (-> self root quat) (if (zero? (-> self vehicle-seat-index))
                                                                                  16384.0
                                                                                  -16384.0
                                                                                  )
                                      )
          (compute-seat-position (the-as vehicle s5-5) (the-as vector (-> gp-0 0)) (-> self vehicle-seat-index))
          )
        (vector-! (-> gp-0 0 trans) (the-as vector (-> gp-0 0)) (-> gp-0 0 vector 1))
        (let ((f0-10 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 7.0 0) (ja-aframe 5.0 0))))
          (vector+float*! (-> self root trans) (-> gp-0 0 vector 1) (-> gp-0 0 trans) f0-10)
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 5.0 0) 0.5))
        )
      (logclear! (-> self focus-status) (focus-status pilot-riding))
      (set! (-> gp-0 0 quad 0) (-> self root trans quad))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 0.0 0))
                  :frame-num (ja-aframe 5.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-9 (handle->process (-> self vehicle-handle))))
          (compute-seat-position (the-as vehicle s5-9) (the-as vector (-> gp-0 0)) (-> self vehicle-seat-index))
          (quaternion-rotate-local-y!
            (the-as quaternion (-> gp-0 1))
            (-> (the-as vehicle s5-9) root quat)
            (if (zero? (-> self vehicle-seat-index))
                -49152.0
                49152.0
                )
            )
          )
        (let ((s5-10 (-> self root quat)))
          (let ((f30-0 (quaternion-y-angle (the-as quaternion (-> gp-0 1)))))
            (quaternion-identity! s5-10)
            (quaternion-rotate-y! s5-10 s5-10 f30-0)
            )
          (let ((f0-16 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 5.0 0) (ja-aframe 1.0 0))))
            (quaternion-slerp! s5-10 (the-as quaternion (-> gp-0 1)) s5-10 f0-16)
            )
          )
        (want-exit-vehicle? self (-> self exit-vehicle-dest))
        (let* ((v1-79 (-> self nav))
               (a1-40 (-> self exit-vehicle-dest))
               (f0-17 (-> v1-79 extra-nav-sphere w))
               )
          (set! (-> v1-79 extra-nav-sphere quad) (-> a1-40 quad))
          (set! (-> v1-79 extra-nav-sphere w) f0-17)
          )
        0
        (let ((v1-82 (-> self nav)))
          (set! (-> v1-82 extra-nav-sphere w) (-> self nav-radius-backup))
          )
        0
        (let ((v1-84 (-> self nav)))
          (logior! (-> v1-84 shape nav-flags) (nav-flags has-extra-sphere))
          )
        0
        (vector-! (-> gp-0 0 trans) (the-as vector (-> gp-0 0)) (-> self exit-vehicle-dest))
        (let ((f0-19 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 1.0 0) (ja-aframe 5.0 0))))
          (vector+float*! (-> self root trans) (-> self exit-vehicle-dest) (-> gp-0 0 trans) f0-19)
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 0.0 0)))
        )
      )
    (react-to-focus self)
    )
  :post nav-enemy-simple-post
  )

(defstate traveling-blocked (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (if (and (time-elapsed? (-> self state-time) (seconds 1)) (not (bot-method-208 self)))
        (go-virtual traveling)
        )
    )
  :code (-> (method-of-type crocadog-escort waiting-idle) code)
  :post nav-enemy-simple-post
  )

(defstate stare (crocadog-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot stare) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (set! (-> self travel-anim-interp) 0.0)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (when (time-elapsed? (-> self state-time) (seconds 0.1))
      (if (not (nav-enemy-method-163 self))
          (go-virtual traveling)
          )
      )
    )
  :code (-> (method-of-type crocadog-escort waiting-idle) code)
  )

(defstate hit (crocadog-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot hit) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    )
  :code (behavior ()
    (local-vars (v1-7 enemy-flag) (v1-15 enemy-flag))
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-6 (-> self enemy-flags)))
      (if (logtest? v1-6 (enemy-flag checking-water))
          (set! v1-7 (logior v1-6 (enemy-flag enable-on-active)))
          (set! v1-7 (logclear v1-6 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-7)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (logior! (-> self mask) (process-mask collectable))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-14 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-14)
          (set! v1-15 (logior (enemy-flag check-water-backup) v1-14))
          (set! v1-15 (logclear v1-14 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-15)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (react-to-focus self)
    )
  )

(defstate knocked (crocadog-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    )
  )

(defstate die-falling (crocadog-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    )
  :code (behavior ()
    0.0
    (until #f
      (if (and (logtest? (-> self bot-flags) (bot-flags failed))
               (time-elapsed? (-> self state-time) (seconds 3))
               (reset? *fail-mission-control*)
               )
          (reset! *fail-mission-control*)
          )
      (cond
        ((zero? (get-rand-int self 3))
         (ja-channel-push! 1 (seconds 0.1))
         (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek! (ja-aframe 3.0 0) 0.5) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! (ja-aframe 3.0 0) 0.5))
           )
         (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek! max 0.33) :frame-num (ja-aframe 3.0 0))
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! max 0.33))
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.1))
          (let ((f30-0 (get-rand-float-range self 0.4 0.6)))
            (ja-no-eval :group! (-> self draw art-group data 14) :num! (seek! max f30-0) :frame-num 0.0)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek! max f30-0))
              )
            )
          )
        )
      )
    #f
    )
  )

(defstate failed (crocadog-escort)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root transv))
    (stop-looking-at-target! self)
    (set! (-> self travel-anim-interp) 0.0)
    (logior! (-> self bot-flags) (bot-flags bf09))
    (logclear! (-> self bot-flags) (bot-flags bf19))
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 0.1))
      (when (not (logtest? (bot-flags bf19) (-> self bot-flags)))
        (logior! (-> self bot-flags) (bot-flags bf19))
        (fail-mission! self)
        )
      (fail-falling self)
      )
    )
  :code (-> (method-of-type crocadog-escort die-falling) code)
  )

(defstate knocked-off-vehicle (crocadog-escort)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root transv))
    (stop-looking-at-target! self)
    (logior! (-> self bot-flags) (bot-flags bf09))
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active checking-water))
    (logclear! (-> self focus-status) (focus-status dangerous))
    (logclear! (-> self enemy-flags) (enemy-flag check-water))
    (logclear! (-> self mask) (process-mask collectable))
    (logclear! (-> self enemy-flags) (enemy-flag look-at-move-dest))
    (logclear! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self enemy-flags) (enemy-flag notice))
    (logclear! (-> self focus-status) (focus-status disable))
    (set! (-> self travel-anim-interp) 0.0)
    )
  :code (-> (method-of-type crocadog-escort waiting-idle) code)
  :post nav-enemy-simple-post
  )
