;;-*-Lisp-*-
(in-package goal)

;; name: collection-task.gc
;; name in dgo: collection-task
;; dgos: LSACK

;; DECOMP BEGINS

(defmethod draw hud-moneybag ((this hud-moneybag))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 462.0 (* 130.0 (-> this offset))))
    210
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -25 25)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-moneybag ((this hud-moneybag))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-moneybag ((this hud-moneybag))
  (set! (-> this level) (level-get *level* 'ctywide))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x7 :page #x679)))
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 scale-y) 1.2)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.6)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(defskelgroup skel-krew-collection-item krew-moneybag krew-moneybag-lod0-jg krew-moneybag-idle-ja
              ((krew-moneybag-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :shadow krew-moneybag-shadow-mg
              )

(deftype krew-collection-item (process-drawable)
  ()
  :heap-base #x50
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (find-ground (_type_) symbol 22)
    )
  )


(defmethod find-ground krew-collection-item ((this krew-collection-item))
  "TODO - understand the collision query stuff more
@returns whether or not the [[self]] is above the ground"
  (let ((on-ground? #f))
    (let ((query (new 'stack-no-clear 'collide-query-with-2vec)))
      (set! (-> query vec quad) (-> this root trans quad))
      (set! (-> query cquery start-pos quad) (-> query vec quad))
      (vector-reset! (-> query vec2))
      (set! (-> query vec2 y) 1.0)
      (set-vector! (-> query cquery move-dist) 0.0 -40960.0 0.0 1.0)
      (let ((_query (-> query cquery)))
        (set! (-> _query radius) 1024.0)
        (set! (-> _query collide-with) (collide-spec backgnd))
        (set! (-> _query ignore-process0) #f)
        (set! (-> _query ignore-process1) #f)
        (set! (-> _query ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1)
              )
        (set! (-> _query action-mask) (collide-action solid))
        )
      (let ((dist (fill-and-probe-using-line-sphere *collide-cache* (-> query cquery))))
        (when (>= dist 0.0)
          (vector+float*! (-> query vec) (-> query cquery start-pos) (-> query cquery move-dist) dist)
          (set! (-> query vec2 quad) (-> query cquery best-other-tri normal quad))
          (+! (-> query vec y) 4915.2)
          (set! on-ground? #t)
          (format #t "krew-collection-item::find-ground: ground y ~M~%" (-> query vec y))
          )
        )
      (set! (-> this root trans quad) (-> query vec quad))
      (forward-up-nopitch->quaternion (-> this root quat) (new 'static 'vector :z 1.0 :w 1.0) (-> query vec2))
      )
    on-ground?
    )
  )

(defstate idle (krew-collection-item)
  :virtual #t
  :trans (behavior ()
    (let ((target *target*)
          (vec (new 'stack-no-clear 'vector))
          )
      (when target
        (set! (-> vec quad) (-> target control trans quad))
        (set! (-> vec w) 4096.0)
        (when (focus-test? target pilot)
          (let ((vehicle (handle->process (-> target pilot vehicle))))
            (set! (-> vec quad) (-> (the-as vehicle vehicle) root root-prim prim-core world-sphere quad))
            )
          )
        (let ((dist-from-target (vector-vector-distance-squared (-> self root trans) vec))
              (pickup-dist (+ 12288.0 (-> vec w)))
              )
          (when (>= (* pickup-dist pickup-dist) dist-from-target)
            (sound-play "skill-pickup")
            (+! (-> *game-info* counter) -1.0)
            (go-virtual die)
            )
          )
        )
      )
    )
  :code (behavior ()
    (let ((beam-params (new 'stack-no-clear 'task-arrow-params)))
      (let ((beam-location (new 'stack-no-clear 'vector)))
        (set! (-> beam-location quad) (-> self root trans quad))
        (+! (-> beam-location y) -6144.0)
        (set! (-> beam-params pos quad) (-> beam-location quad))
        )
      (quaternion-identity! (-> beam-params quat))
      (set! (-> beam-params flags) (task-arrow-flags))
      (set! (-> beam-params map-icon) (the-as uint 15))
      (task-arrow-spawn beam-params self)
      )
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

(defstate die (krew-collection-item)
  :virtual #t
  :code (behavior ()
    (cleanup-for-death self)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior krew-collection-item-init-by-other krew-collection-item ((position vector))
  "Given a [[vector]] defining it's position, create a [[krew-collection-item]]
@param position The intended position of the item"
  (set! (-> self level) (level-get *level* 'lsack))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> position quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 3.0 3.0 3.0 1.0)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-krew-collection-item" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (if (-> self draw shadow)
      (set! (-> self draw shadow-ctrl)
            (new 'process 'shadow-control -12288.0 12288.0 614400.0 (shadow-flags shdf00 shdf04) 245760.0)
            )
      )
  (go-virtual idle)
  (none)
  )

;; WARN: Return type mismatch process vs krew-collection-item.
(defun krew-collection-item-spawn ((proc process) (position vector))
  "Given a [[vector]] defining it's position, create a [[krew-collection-item]] via [[process-spawn]]
@param proc The [[process]] that is used to spawn the new item
@param position The intended position of the item"
  (let ((new-krew-item (the-as process #f)))
    (let ((new-proc (process-spawn krew-collection-item position :to proc)))
      (if new-proc
          (set! new-krew-item (-> new-proc 0))
          )
      )
    (the-as krew-collection-item new-krew-item)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (set! (-> self begin-pos quad) (-> (new 'static 'vector :x -245760.0 :y 45056.0 :z 5468160.0 :w 1.0) quad))
    (set-setting! 'exclusive-task #f 0.0 (-> self node-info task))
    (let ((traffic-manager *traffic-manager*)
          (traffic-obj-params (new 'stack 'traffic-object-spawn-params))
          )
      (set! (-> traffic-obj-params position quad) (-> self begin-pos quad))
      (quaternion-axis-angle! (-> traffic-obj-params rotation) 0.0 1.0 0.0 16384.0)
      (set! (-> traffic-obj-params object-type) (traffic-type bikec))
      (set! (-> traffic-obj-params behavior) (the-as uint 0))
      (set! (-> traffic-obj-params id) (the-as uint 0))
      (set! (-> traffic-obj-params proc) #f)
      (send-event traffic-manager 'spawn-object traffic-obj-params)
      )
    (set! (-> self start-time) 0)
    (set! (-> self count) -1)
    (set! (-> self max-count) 14)
    (set! (-> self data-vector 0 quad)
          (-> (new 'static 'vector :x 1282048.0 :y 37925.273 :z 5492736.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 1 quad)
          (-> (new 'static 'vector :x 2392064.0 :y 23235.379 :z 5980160.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 2 quad)
          (-> (new 'static 'vector :x 3231744.0 :y 38680.984 :z 4788224.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 3 quad)
          (-> (new 'static 'vector :x 3829760.0 :y 38680.984 :z 3682304.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 4 quad)
          (-> (new 'static 'vector :x 4325376.0 :y 38680.984 :z 2564096.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 5 quad)
          (-> (new 'static 'vector :x 4014080.0 :y 38680.984 :z 1822720.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 6 quad)
          (-> (new 'static 'vector :x 3698688.0 :y 38680.984 :z 1728512.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 7 quad)
          (-> (new 'static 'vector :x 3792896.0 :y 38680.984 :z 2387968.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 8 quad)
          (-> (new 'static 'vector :x 4616192.0 :y 38680.984 :z 2863104.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 9 quad)
          (-> (new 'static 'vector :x 3633152.0 :y 38680.984 :z 3477504.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 10 quad)
          (-> (new 'static 'vector :x 3993600.0 :y 38680.984 :z 4378624.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 11 quad)
          (-> (new 'static 'vector :x 3112960.0 :y 23472.947 :z 5390336.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 12 quad)
          (-> (new 'static 'vector :x 1789952.0 :y 37616.027 :z 5455872.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 13 quad)
          (-> (new 'static 'vector :x 237568.0 :y 37541.477 :z 5439488.0 :w 1.0) quad)
          )
    (set! (-> self data-int32 0) #x2904)
    (set! (-> self data-int32 1) 9000)
    (set! (-> self data-int32 2) 9000)
    (set! (-> self data-int32 3) 9000)
    (set! (-> self data-int32 4) 9000)
    (set! (-> self data-int32 5) 9000)
    (set! (-> self data-int32 6) 3000)
    (set! (-> self data-int32 7) 6000)
    (set! (-> self data-int32 8) 9000)
    (set! (-> self data-int32 9) 9000)
    (set! (-> self data-int32 10) 9000)
    (set! (-> self data-int32 11) 9000)
    (set! (-> self data-int32 12) 7500)
    (set! (-> self data-int32 13) 7500)
    (set! (-> *game-info* counter) (the float (-> self max-count)))
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_CLEANUP_HOOK
  (lambda :behavior task-manager () (send-event *traffic-manager* 'restore-default-settings))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager
    ()
    (check-time self)
    (when (>= (-> self count) 0)
      (cond
        ((handle->process (-> self slave 0))
         )
        (else
          (let ((task-count (-> self count)))
            (cond
              ((< task-count (-> self max-count))
               (let ((krew-item (krew-collection-item-spawn self (-> self data-vector task-count))))
                 (when krew-item
                   (set! (-> self slave 0) (process->handle krew-item))
                   (set! (-> self time-limit) (the-as time-frame (-> self data-int32 task-count)))
                   (set-time! (-> self start-time))
                   (+! (-> self count) 1)
                   )
                 )
               )
              (else
                (go-virtual complete)
                )
              )
            )
          )
        )
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_CODE_HOOK
  (lambda :behavior task-manager
    ()
    (local-vars (moved-beyond-start? symbol))
    (until (or moved-beyond-start? (and *target* (focus-test? *target* pilot)))
      (suspend)
      (let ((min-start-distance 122880.0))
        (set! moved-beyond-start?
              (< (* min-start-distance min-start-distance)
                 (vector-vector-distance-squared (-> self begin-pos) (target-pos 0))
                 )
              )
        )
      )
    (set-setting! 'airlock #f 0.0 0)
    (set! (-> self count) 0)
    (set! (-> self hud-counter)
          (ppointer->handle (process-spawn hud-moneybag :init hud-init-by-other :to *target*))
          )
    (send-event *traffic-manager* 'set-target-level 1.0)
    (set-time! (-> self state-time))
    (while (not (time-elapsed? (-> self state-time) (seconds 5)))
      (suspend)
      )
    (send-event *traffic-manager* 'set-alert-level 2)
    (send-event *traffic-manager* 'set-alert-duration (seconds 36000))
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_FAIL_HOOK
  (lambda :behavior task-manager () (kill-all-children self))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-krew-collection-collection)
  TASK_MANAGER_COMPLETE_HOOK
  (lambda :behavior task-manager
    ()
    (send-event *traffic-manager* 'decrease-alert-level 0)
    (send-event *traffic-manager* 'set-alert-duration (seconds 30))
    (set-time! (-> self state-time))
    (while (not (time-elapsed? (-> self state-time) (seconds 2)))
      (suspend)
      )
    (talker-spawn-func (-> *talker-speech* 88) *entity-pool* (target-pos 0) (the-as region #f))
    (none)
    )
  )
